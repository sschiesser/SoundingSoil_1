
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ff8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005ff8  00005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000118  20000000  00006000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000950  20000118  00006118  00020118  2**2
                  ALLOC
  4 .stack        00002000  20000a68  00006a68  00020118  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003ff34  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005ab6  00000000  00000000  000600cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000c127  00000000  00000000  00065b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ae0  00000000  00000000  00071caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000011c0  00000000  00000000  0007278a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00021346  00000000  00000000  0007394a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014a1a  00000000  00000000  00094c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009a6f2  00000000  00000000  000a96aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c84  00000000  00000000  00143d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 2a 00 20 5d 54 00 00 59 54 00 00 59 54 00 00     h*. ]T..YT..YT..
	...
      2c:	59 54 00 00 00 00 00 00 00 00 00 00 59 54 00 00     YT..........YT..
      3c:	59 54 00 00 59 54 00 00 59 54 00 00 59 54 00 00     YT..YT..YT..YT..
      4c:	59 54 00 00 d5 35 00 00 59 54 00 00 59 54 00 00     YT...5..YT..YT..
      5c:	fd 2d 00 00 59 54 00 00 cd 41 00 00 dd 41 00 00     .-..YT...A...A..
      6c:	ed 41 00 00 fd 41 00 00 0d 42 00 00 1d 42 00 00     .A...A...B...B..
      7c:	59 54 00 00 59 54 00 00 59 54 00 00 59 54 00 00     YT..YT..YT..YT..
      8c:	59 54 00 00 59 54 00 00 59 54 00 00 59 54 00 00     YT..YT..YT..YT..
      9c:	59 54 00 00 59 54 00 00 59 54 00 00 59 54 00 00     YT..YT..YT..YT..
      ac:	59 54 00 00 00 00 00 00                             YT......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000118 	.word	0x20000118
      d4:	00000000 	.word	0x00000000
      d8:	00006000 	.word	0x00006000

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000011c 	.word	0x2000011c
     108:	00006000 	.word	0x00006000
     10c:	00006000 	.word	0x00006000
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b07      	ldr	r3, [pc, #28]	; (134 <sd_mmc_configure_slot+0x20>)
     118:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     11a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     11c:	5ccb      	ldrb	r3, [r1, r3]
     11e:	1e5a      	subs	r2, r3, #1
     120:	4193      	sbcs	r3, r2
     122:	b2db      	uxtb	r3, r3
     124:	7c4a      	ldrb	r2, [r1, #17]
     126:	6809      	ldr	r1, [r1, #0]
     128:	4803      	ldr	r0, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12a:	7800      	ldrb	r0, [r0, #0]
     12c:	4c03      	ldr	r4, [pc, #12]	; (13c <sd_mmc_configure_slot+0x28>)
     12e:	47a0      	blx	r4
}
     130:	bd10      	pop	{r4, pc}
     132:	46c0      	nop			; (mov r8, r8)
     134:	20000134 	.word	0x20000134
     138:	2000013d 	.word	0x2000013d
     13c:	000047cd 	.word	0x000047cd

00000140 <sd_mmc_select_slot>:
{
     140:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     142:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     144:	2800      	cmp	r0, #0
     146:	d001      	beq.n	14c <sd_mmc_select_slot+0xc>
}
     148:	0018      	movs	r0, r3
     14a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     14c:	4b40      	ldr	r3, [pc, #256]	; (250 <sd_mmc_select_slot+0x110>)
     14e:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     150:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     152:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     154:	2a00      	cmp	r2, #0
     156:	d104      	bne.n	162 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     158:	094b      	lsrs	r3, r1, #5
     15a:	01db      	lsls	r3, r3, #7
     15c:	4a3d      	ldr	r2, [pc, #244]	; (254 <sd_mmc_select_slot+0x114>)
     15e:	4694      	mov	ip, r2
     160:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     164:	221f      	movs	r2, #31
     166:	400a      	ands	r2, r1
     168:	2301      	movs	r3, #1
     16a:	4093      	lsls	r3, r2
     16c:	4218      	tst	r0, r3
     16e:	d010      	beq.n	192 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     170:	4b37      	ldr	r3, [pc, #220]	; (250 <sd_mmc_select_slot+0x110>)
     172:	7b9b      	ldrb	r3, [r3, #14]
     174:	2b01      	cmp	r3, #1
     176:	d004      	beq.n	182 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     178:	2204      	movs	r2, #4
     17a:	4b35      	ldr	r3, [pc, #212]	; (250 <sd_mmc_select_slot+0x110>)
     17c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     17e:	2302      	movs	r3, #2
     180:	e7e2      	b.n	148 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     182:	4b35      	ldr	r3, [pc, #212]	; (258 <sd_mmc_select_slot+0x118>)
     184:	781b      	ldrb	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d0f6      	beq.n	178 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     18a:	2200      	movs	r2, #0
     18c:	4b33      	ldr	r3, [pc, #204]	; (25c <sd_mmc_select_slot+0x11c>)
     18e:	601a      	str	r2, [r3, #0]
     190:	e7f2      	b.n	178 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     192:	4b2f      	ldr	r3, [pc, #188]	; (250 <sd_mmc_select_slot+0x110>)
     194:	7b9a      	ldrb	r2, [r3, #14]
     196:	2a04      	cmp	r2, #4
     198:	d005      	beq.n	1a6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     19a:	2a01      	cmp	r2, #1
     19c:	d033      	beq.n	206 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     19e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     1a0:	2a03      	cmp	r2, #3
     1a2:	d0d1      	beq.n	148 <sd_mmc_select_slot+0x8>
     1a4:	e045      	b.n	232 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     1a6:	3a03      	subs	r2, #3
     1a8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     1aa:	4b2c      	ldr	r3, [pc, #176]	; (25c <sd_mmc_select_slot+0x11c>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	2b00      	cmp	r3, #0
     1b0:	d017      	beq.n	1e2 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     1b2:	2200      	movs	r2, #0
     1b4:	4b28      	ldr	r3, [pc, #160]	; (258 <sd_mmc_select_slot+0x118>)
     1b6:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     1b8:	2000      	movs	r0, #0
     1ba:	4b29      	ldr	r3, [pc, #164]	; (260 <sd_mmc_select_slot+0x120>)
     1bc:	4798      	blx	r3
     1be:	22fa      	movs	r2, #250	; 0xfa
     1c0:	0092      	lsls	r2, r2, #2
     1c2:	2300      	movs	r3, #0
     1c4:	2100      	movs	r1, #0
     1c6:	4c27      	ldr	r4, [pc, #156]	; (264 <sd_mmc_select_slot+0x124>)
     1c8:	47a0      	blx	r4
     1ca:	4a27      	ldr	r2, [pc, #156]	; (268 <sd_mmc_select_slot+0x128>)
     1cc:	2300      	movs	r3, #0
     1ce:	1880      	adds	r0, r0, r2
     1d0:	4159      	adcs	r1, r3
     1d2:	4a26      	ldr	r2, [pc, #152]	; (26c <sd_mmc_select_slot+0x12c>)
     1d4:	2300      	movs	r3, #0
     1d6:	4c26      	ldr	r4, [pc, #152]	; (270 <sd_mmc_select_slot+0x130>)
     1d8:	47a0      	blx	r4
     1da:	4b26      	ldr	r3, [pc, #152]	; (274 <sd_mmc_select_slot+0x134>)
     1dc:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     1de:	2302      	movs	r3, #2
     1e0:	e7b2      	b.n	148 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     1e2:	2401      	movs	r4, #1
     1e4:	4b1c      	ldr	r3, [pc, #112]	; (258 <sd_mmc_select_slot+0x118>)
     1e6:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1e8:	2000      	movs	r0, #0
     1ea:	4b1d      	ldr	r3, [pc, #116]	; (260 <sd_mmc_select_slot+0x120>)
     1ec:	4798      	blx	r3
     1ee:	21fa      	movs	r1, #250	; 0xfa
     1f0:	0149      	lsls	r1, r1, #5
     1f2:	4b21      	ldr	r3, [pc, #132]	; (278 <sd_mmc_select_slot+0x138>)
     1f4:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     1f6:	23fa      	movs	r3, #250	; 0xfa
     1f8:	009b      	lsls	r3, r3, #2
     1fa:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     1fc:	4b17      	ldr	r3, [pc, #92]	; (25c <sd_mmc_select_slot+0x11c>)
     1fe:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     200:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     202:	2302      	movs	r3, #2
     204:	e7a0      	b.n	148 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     206:	4b14      	ldr	r3, [pc, #80]	; (258 <sd_mmc_select_slot+0x118>)
     208:	781b      	ldrb	r3, [r3, #0]
     20a:	2b00      	cmp	r3, #0
     20c:	d007      	beq.n	21e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     20e:	4b13      	ldr	r3, [pc, #76]	; (25c <sd_mmc_select_slot+0x11c>)
     210:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     212:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     214:	03d2      	lsls	r2, r2, #15
     216:	d597      	bpl.n	148 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     218:	2200      	movs	r2, #0
     21a:	4b10      	ldr	r3, [pc, #64]	; (25c <sd_mmc_select_slot+0x11c>)
     21c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <sd_mmc_select_slot+0x110>)
     220:	2202      	movs	r2, #2
     222:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     224:	4a15      	ldr	r2, [pc, #84]	; (27c <sd_mmc_select_slot+0x13c>)
     226:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     228:	2201      	movs	r2, #1
     22a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     22c:	2100      	movs	r1, #0
     22e:	3221      	adds	r2, #33	; 0x21
     230:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     232:	2200      	movs	r2, #0
     234:	4b12      	ldr	r3, [pc, #72]	; (280 <sd_mmc_select_slot+0x140>)
     236:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     238:	4c05      	ldr	r4, [pc, #20]	; (250 <sd_mmc_select_slot+0x110>)
     23a:	4b12      	ldr	r3, [pc, #72]	; (284 <sd_mmc_select_slot+0x144>)
     23c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     23e:	4b12      	ldr	r3, [pc, #72]	; (288 <sd_mmc_select_slot+0x148>)
     240:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     242:	7ba3      	ldrb	r3, [r4, #14]
     244:	3b02      	subs	r3, #2
     246:	425a      	negs	r2, r3
     248:	4153      	adcs	r3, r2
     24a:	b2db      	uxtb	r3, r3
     24c:	e77c      	b.n	148 <sd_mmc_select_slot+0x8>
     24e:	46c0      	nop			; (mov r8, r8)
     250:	2000000c 	.word	0x2000000c
     254:	41004400 	.word	0x41004400
     258:	2000013c 	.word	0x2000013c
     25c:	e000e010 	.word	0xe000e010
     260:	000051e9 	.word	0x000051e9
     264:	00005a79 	.word	0x00005a79
     268:	00001b57 	.word	0x00001b57
     26c:	00001b58 	.word	0x00001b58
     270:	00005a39 	.word	0x00005a39
     274:	20000001 	.word	0x20000001
     278:	000056d1 	.word	0x000056d1
     27c:	00061a80 	.word	0x00061a80
     280:	2000013d 	.word	0x2000013d
     284:	20000134 	.word	0x20000134
     288:	00000115 	.word	0x00000115

0000028c <sd_mmc_cmd13>:
{
     28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     28e:	4d09      	ldr	r5, [pc, #36]	; (2b4 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     290:	4f09      	ldr	r7, [pc, #36]	; (2b8 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     292:	4e0a      	ldr	r6, [pc, #40]	; (2bc <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     294:	2100      	movs	r1, #0
     296:	480a      	ldr	r0, [pc, #40]	; (2c0 <sd_mmc_cmd13+0x34>)
     298:	47b8      	blx	r7
     29a:	1e04      	subs	r4, r0, #0
     29c:	d007      	beq.n	2ae <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     29e:	47b0      	blx	r6
     2a0:	23ff      	movs	r3, #255	; 0xff
     2a2:	4203      	tst	r3, r0
     2a4:	d003      	beq.n	2ae <sd_mmc_cmd13+0x22>
     2a6:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     2a8:	2d00      	cmp	r5, #0
     2aa:	d1f3      	bne.n	294 <sd_mmc_cmd13+0x8>
			return false;
     2ac:	2400      	movs	r4, #0
}
     2ae:	0020      	movs	r0, r4
     2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00030d41 	.word	0x00030d41
     2b8:	00004a11 	.word	0x00004a11
     2bc:	00004a29 	.word	0x00004a29
     2c0:	00001b0d 	.word	0x00001b0d

000002c4 <sd_mmc_cmd9_spi>:
{
     2c4:	b510      	push	{r4, lr}
     2c6:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     2c8:	4b0c      	ldr	r3, [pc, #48]	; (2fc <sd_mmc_cmd9_spi+0x38>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	8999      	ldrh	r1, [r3, #12]
     2ce:	0409      	lsls	r1, r1, #16
     2d0:	2301      	movs	r3, #1
     2d2:	9300      	str	r3, [sp, #0]
     2d4:	2210      	movs	r2, #16
     2d6:	480a      	ldr	r0, [pc, #40]	; (300 <sd_mmc_cmd9_spi+0x3c>)
     2d8:	4c0a      	ldr	r4, [pc, #40]	; (304 <sd_mmc_cmd9_spi+0x40>)
     2da:	47a0      	blx	r4
     2dc:	2800      	cmp	r0, #0
     2de:	d101      	bne.n	2e4 <sd_mmc_cmd9_spi+0x20>
}
     2e0:	b002      	add	sp, #8
     2e2:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     2e4:	4b05      	ldr	r3, [pc, #20]	; (2fc <sd_mmc_cmd9_spi+0x38>)
     2e6:	6818      	ldr	r0, [r3, #0]
     2e8:	3012      	adds	r0, #18
     2ea:	2101      	movs	r1, #1
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <sd_mmc_cmd9_spi+0x44>)
     2ee:	4798      	blx	r3
     2f0:	2800      	cmp	r0, #0
     2f2:	d0f5      	beq.n	2e0 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     2f4:	4b05      	ldr	r3, [pc, #20]	; (30c <sd_mmc_cmd9_spi+0x48>)
     2f6:	4798      	blx	r3
     2f8:	e7f2      	b.n	2e0 <sd_mmc_cmd9_spi+0x1c>
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	20000134 	.word	0x20000134
     300:	00081109 	.word	0x00081109
     304:	00004881 	.word	0x00004881
     308:	00004aad 	.word	0x00004aad
     30c:	00004b39 	.word	0x00004b39

00000310 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     310:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     312:	4b04      	ldr	r3, [pc, #16]	; (324 <sd_mmc_deselect_slot+0x14>)
     314:	781b      	ldrb	r3, [r3, #0]
     316:	2b00      	cmp	r3, #0
     318:	d000      	beq.n	31c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     31a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     31c:	2000      	movs	r0, #0
     31e:	4b02      	ldr	r3, [pc, #8]	; (328 <sd_mmc_deselect_slot+0x18>)
     320:	4798      	blx	r3
}
     322:	e7fa      	b.n	31a <sd_mmc_deselect_slot+0xa>
     324:	2000013d 	.word	0x2000013d
     328:	00004821 	.word	0x00004821

0000032c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     32c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     32e:	2204      	movs	r2, #4
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <sd_mmc_init+0x14>)
     332:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     334:	32fb      	adds	r2, #251	; 0xfb
     336:	4b03      	ldr	r3, [pc, #12]	; (344 <sd_mmc_init+0x18>)
     338:	701a      	strb	r2, [r3, #0]
	driver_init();
     33a:	4b03      	ldr	r3, [pc, #12]	; (348 <sd_mmc_init+0x1c>)
     33c:	4798      	blx	r3
}
     33e:	bd10      	pop	{r4, pc}
     340:	2000000c 	.word	0x2000000c
     344:	2000013d 	.word	0x2000013d
     348:	000046c1 	.word	0x000046c1

0000034c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     34c:	b5f0      	push	{r4, r5, r6, r7, lr}
     34e:	46c6      	mov	lr, r8
     350:	b500      	push	{lr}
     352:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     354:	4bcb      	ldr	r3, [pc, #812]	; (684 <sd_mmc_check+0x338>)
     356:	4798      	blx	r3
     358:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     35a:	2801      	cmp	r0, #1
     35c:	d006      	beq.n	36c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     35e:	4bca      	ldr	r3, [pc, #808]	; (688 <sd_mmc_check+0x33c>)
     360:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     362:	0020      	movs	r0, r4
     364:	b008      	add	sp, #32
     366:	bc04      	pop	{r2}
     368:	4690      	mov	r8, r2
     36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     36c:	4bc7      	ldr	r3, [pc, #796]	; (68c <sd_mmc_check+0x340>)
     36e:	681b      	ldr	r3, [r3, #0]
     370:	2201      	movs	r2, #1
     372:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     374:	2200      	movs	r2, #0
     376:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     378:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     37a:	4bc5      	ldr	r3, [pc, #788]	; (690 <sd_mmc_check+0x344>)
     37c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     37e:	2100      	movs	r1, #0
     380:	2088      	movs	r0, #136	; 0x88
     382:	0140      	lsls	r0, r0, #5
     384:	4bc3      	ldr	r3, [pc, #780]	; (694 <sd_mmc_check+0x348>)
     386:	4798      	blx	r3
     388:	2800      	cmp	r0, #0
     38a:	d107      	bne.n	39c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     38c:	4bbf      	ldr	r3, [pc, #764]	; (68c <sd_mmc_check+0x340>)
     38e:	681b      	ldr	r3, [r3, #0]
     390:	2203      	movs	r2, #3
     392:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     394:	4bbc      	ldr	r3, [pc, #752]	; (688 <sd_mmc_check+0x33c>)
     396:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     398:	2403      	movs	r4, #3
     39a:	e7e2      	b.n	362 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     39c:	21d5      	movs	r1, #213	; 0xd5
     39e:	0049      	lsls	r1, r1, #1
     3a0:	48bd      	ldr	r0, [pc, #756]	; (698 <sd_mmc_check+0x34c>)
     3a2:	4bbc      	ldr	r3, [pc, #752]	; (694 <sd_mmc_check+0x348>)
     3a4:	4798      	blx	r3
	*v2 = 0;
     3a6:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     3a8:	2800      	cmp	r0, #0
     3aa:	d125      	bne.n	3f8 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3ac:	4bb7      	ldr	r3, [pc, #732]	; (68c <sd_mmc_check+0x340>)
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	7bdb      	ldrb	r3, [r3, #15]
     3b2:	07db      	lsls	r3, r3, #31
     3b4:	d500      	bpl.n	3b8 <sd_mmc_check+0x6c>
     3b6:	e1eb      	b.n	790 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     3b8:	4bb4      	ldr	r3, [pc, #720]	; (68c <sd_mmc_check+0x340>)
     3ba:	681b      	ldr	r3, [r3, #0]
     3bc:	7bda      	ldrb	r2, [r3, #15]
     3be:	2309      	movs	r3, #9
     3c0:	4013      	ands	r3, r2
     3c2:	2b01      	cmp	r3, #1
     3c4:	d10f      	bne.n	3e6 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     3c6:	2180      	movs	r1, #128	; 0x80
     3c8:	0089      	lsls	r1, r1, #2
     3ca:	48b4      	ldr	r0, [pc, #720]	; (69c <sd_mmc_check+0x350>)
     3cc:	4bb1      	ldr	r3, [pc, #708]	; (694 <sd_mmc_check+0x348>)
     3ce:	4798      	blx	r3
     3d0:	2800      	cmp	r0, #0
     3d2:	d0db      	beq.n	38c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     3d4:	4bad      	ldr	r3, [pc, #692]	; (68c <sd_mmc_check+0x340>)
     3d6:	681b      	ldr	r3, [r3, #0]
     3d8:	7bdb      	ldrb	r3, [r3, #15]
     3da:	07db      	lsls	r3, r3, #31
     3dc:	d503      	bpl.n	3e6 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     3de:	4bb0      	ldr	r3, [pc, #704]	; (6a0 <sd_mmc_check+0x354>)
     3e0:	4798      	blx	r3
     3e2:	2800      	cmp	r0, #0
     3e4:	d0d2      	beq.n	38c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     3e6:	4baf      	ldr	r3, [pc, #700]	; (6a4 <sd_mmc_check+0x358>)
     3e8:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     3ea:	4ba8      	ldr	r3, [pc, #672]	; (68c <sd_mmc_check+0x340>)
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	2200      	movs	r2, #0
     3f0:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     3f2:	4ba5      	ldr	r3, [pc, #660]	; (688 <sd_mmc_check+0x33c>)
     3f4:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     3f6:	e7b4      	b.n	362 <sd_mmc_check+0x16>
	resp = driver_get_response();
     3f8:	4bab      	ldr	r3, [pc, #684]	; (6a8 <sd_mmc_check+0x35c>)
     3fa:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     3fc:	1c43      	adds	r3, r0, #1
     3fe:	d100      	bne.n	402 <sd_mmc_check+0xb6>
     400:	e1c4      	b.n	78c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     402:	0500      	lsls	r0, r0, #20
     404:	0d00      	lsrs	r0, r0, #20
     406:	23d5      	movs	r3, #213	; 0xd5
     408:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     40a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     40c:	4298      	cmp	r0, r3
     40e:	d1bd      	bne.n	38c <sd_mmc_check+0x40>
     410:	e7cc      	b.n	3ac <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     412:	2100      	movs	r1, #0
     414:	48a5      	ldr	r0, [pc, #660]	; (6ac <sd_mmc_check+0x360>)
     416:	4b9f      	ldr	r3, [pc, #636]	; (694 <sd_mmc_check+0x348>)
     418:	4798      	blx	r3
     41a:	2800      	cmp	r0, #0
     41c:	d119      	bne.n	452 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     41e:	4b9b      	ldr	r3, [pc, #620]	; (68c <sd_mmc_check+0x340>)
     420:	681b      	ldr	r3, [r3, #0]
     422:	2202      	movs	r2, #2
     424:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     426:	2100      	movs	r1, #0
     428:	2088      	movs	r0, #136	; 0x88
     42a:	0140      	lsls	r0, r0, #5
     42c:	4b99      	ldr	r3, [pc, #612]	; (694 <sd_mmc_check+0x348>)
     42e:	4798      	blx	r3
     430:	2800      	cmp	r0, #0
     432:	d0ab      	beq.n	38c <sd_mmc_check+0x40>
     434:	4d9e      	ldr	r5, [pc, #632]	; (6b0 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     436:	4f97      	ldr	r7, [pc, #604]	; (694 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     438:	4e9b      	ldr	r6, [pc, #620]	; (6a8 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     43a:	2100      	movs	r1, #0
     43c:	489d      	ldr	r0, [pc, #628]	; (6b4 <sd_mmc_check+0x368>)
     43e:	47b8      	blx	r7
     440:	2800      	cmp	r0, #0
     442:	d0a3      	beq.n	38c <sd_mmc_check+0x40>
		resp = driver_get_response();
     444:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     446:	07c3      	lsls	r3, r0, #31
     448:	d57d      	bpl.n	546 <sd_mmc_check+0x1fa>
     44a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     44c:	2d00      	cmp	r5, #0
     44e:	d1f4      	bne.n	43a <sd_mmc_check+0xee>
     450:	e79c      	b.n	38c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     452:	4b95      	ldr	r3, [pc, #596]	; (6a8 <sd_mmc_check+0x35c>)
     454:	4798      	blx	r3
     456:	0043      	lsls	r3, r0, #1
     458:	d505      	bpl.n	466 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     45a:	4b8c      	ldr	r3, [pc, #560]	; (68c <sd_mmc_check+0x340>)
     45c:	681a      	ldr	r2, [r3, #0]
     45e:	7bd3      	ldrb	r3, [r2, #15]
     460:	2108      	movs	r1, #8
     462:	430b      	orrs	r3, r1
     464:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     466:	2100      	movs	r1, #0
     468:	4893      	ldr	r0, [pc, #588]	; (6b8 <sd_mmc_check+0x36c>)
     46a:	4b8a      	ldr	r3, [pc, #552]	; (694 <sd_mmc_check+0x348>)
     46c:	4798      	blx	r3
     46e:	2800      	cmp	r0, #0
     470:	d08c      	beq.n	38c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     472:	4b86      	ldr	r3, [pc, #536]	; (68c <sd_mmc_check+0x340>)
     474:	681b      	ldr	r3, [r3, #0]
     476:	7bdb      	ldrb	r3, [r3, #15]
     478:	07da      	lsls	r2, r3, #31
     47a:	d400      	bmi.n	47e <sd_mmc_check+0x132>
     47c:	e1a4      	b.n	7c8 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     47e:	4b8f      	ldr	r3, [pc, #572]	; (6bc <sd_mmc_check+0x370>)
     480:	4798      	blx	r3
     482:	2800      	cmp	r0, #0
     484:	d082      	beq.n	38c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     486:	4b81      	ldr	r3, [pc, #516]	; (68c <sd_mmc_check+0x340>)
     488:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     48a:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     48c:	2107      	movs	r1, #7
     48e:	4019      	ands	r1, r3
     490:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     492:	488b      	ldr	r0, [pc, #556]	; (6c0 <sd_mmc_check+0x374>)
     494:	5808      	ldr	r0, [r1, r0]
     496:	21fa      	movs	r1, #250	; 0xfa
     498:	0089      	lsls	r1, r1, #2
     49a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     49c:	065b      	lsls	r3, r3, #25
     49e:	0f1b      	lsrs	r3, r3, #28
     4a0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4a2:	4888      	ldr	r0, [pc, #544]	; (6c4 <sd_mmc_check+0x378>)
     4a4:	581b      	ldr	r3, [r3, r0]
     4a6:	434b      	muls	r3, r1
     4a8:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     4aa:	7c93      	ldrb	r3, [r2, #18]
     4ac:	099b      	lsrs	r3, r3, #6
     4ae:	d000      	beq.n	4b2 <sd_mmc_check+0x166>
     4b0:	e13c      	b.n	72c <sd_mmc_check+0x3e0>
     4b2:	7e91      	ldrb	r1, [r2, #26]
     4b4:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4b6:	7e53      	ldrb	r3, [r2, #25]
     4b8:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4ba:	7e10      	ldrb	r0, [r2, #24]
     4bc:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4be:	4303      	orrs	r3, r0
     4c0:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c2:	7f10      	ldrb	r0, [r2, #28]
     4c4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4c6:	7ed1      	ldrb	r1, [r2, #27]
     4c8:	0049      	lsls	r1, r1, #1
     4ca:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     4cc:	051b      	lsls	r3, r3, #20
     4ce:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4d0:	3301      	adds	r3, #1
     4d2:	2107      	movs	r1, #7
     4d4:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     4d6:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     4d8:	408b      	lsls	r3, r1
     4da:	7dd0      	ldrb	r0, [r2, #23]
     4dc:	210f      	movs	r1, #15
     4de:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     4e0:	408b      	lsls	r3, r1
				/ 1024;
     4e2:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     4e4:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     4e6:	8991      	ldrh	r1, [r2, #12]
     4e8:	0409      	lsls	r1, r1, #16
     4ea:	4877      	ldr	r0, [pc, #476]	; (6c8 <sd_mmc_check+0x37c>)
     4ec:	4b69      	ldr	r3, [pc, #420]	; (694 <sd_mmc_check+0x348>)
     4ee:	4798      	blx	r3
     4f0:	2800      	cmp	r0, #0
     4f2:	d100      	bne.n	4f6 <sd_mmc_check+0x1aa>
     4f4:	e74a      	b.n	38c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     4f6:	2301      	movs	r3, #1
     4f8:	9300      	str	r3, [sp, #0]
     4fa:	2208      	movs	r2, #8
     4fc:	2100      	movs	r1, #0
     4fe:	4873      	ldr	r0, [pc, #460]	; (6cc <sd_mmc_check+0x380>)
     500:	4d73      	ldr	r5, [pc, #460]	; (6d0 <sd_mmc_check+0x384>)
     502:	47a8      	blx	r5
     504:	2800      	cmp	r0, #0
     506:	d100      	bne.n	50a <sd_mmc_check+0x1be>
     508:	e740      	b.n	38c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     50a:	2101      	movs	r1, #1
     50c:	a806      	add	r0, sp, #24
     50e:	4b71      	ldr	r3, [pc, #452]	; (6d4 <sd_mmc_check+0x388>)
     510:	4798      	blx	r3
     512:	2800      	cmp	r0, #0
     514:	d100      	bne.n	518 <sd_mmc_check+0x1cc>
     516:	e739      	b.n	38c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     518:	4b6f      	ldr	r3, [pc, #444]	; (6d8 <sd_mmc_check+0x38c>)
     51a:	4798      	blx	r3
     51c:	2800      	cmp	r0, #0
     51e:	d100      	bne.n	522 <sd_mmc_check+0x1d6>
     520:	e734      	b.n	38c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     522:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     524:	781b      	ldrb	r3, [r3, #0]
     526:	220f      	movs	r2, #15
     528:	4013      	ands	r3, r2
     52a:	2b01      	cmp	r3, #1
     52c:	d100      	bne.n	530 <sd_mmc_check+0x1e4>
     52e:	e119      	b.n	764 <sd_mmc_check+0x418>
     530:	2b00      	cmp	r3, #0
     532:	d100      	bne.n	536 <sd_mmc_check+0x1ea>
     534:	e109      	b.n	74a <sd_mmc_check+0x3fe>
     536:	2b02      	cmp	r3, #2
     538:	d100      	bne.n	53c <sd_mmc_check+0x1f0>
     53a:	e118      	b.n	76e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     53c:	4b53      	ldr	r3, [pc, #332]	; (68c <sd_mmc_check+0x340>)
     53e:	681b      	ldr	r3, [r3, #0]
     540:	2210      	movs	r2, #16
     542:	741a      	strb	r2, [r3, #16]
     544:	e105      	b.n	752 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     546:	2100      	movs	r1, #0
     548:	4858      	ldr	r0, [pc, #352]	; (6ac <sd_mmc_check+0x360>)
     54a:	4b52      	ldr	r3, [pc, #328]	; (694 <sd_mmc_check+0x348>)
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d100      	bne.n	554 <sd_mmc_check+0x208>
     552:	e71b      	b.n	38c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     554:	4b54      	ldr	r3, [pc, #336]	; (6a8 <sd_mmc_check+0x35c>)
     556:	4798      	blx	r3
     558:	23c0      	movs	r3, #192	; 0xc0
     55a:	05db      	lsls	r3, r3, #23
     55c:	4018      	ands	r0, r3
     55e:	2380      	movs	r3, #128	; 0x80
     560:	05db      	lsls	r3, r3, #23
     562:	4298      	cmp	r0, r3
     564:	d105      	bne.n	572 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     566:	4b49      	ldr	r3, [pc, #292]	; (68c <sd_mmc_check+0x340>)
     568:	681a      	ldr	r2, [r3, #0]
     56a:	7bd1      	ldrb	r1, [r2, #15]
     56c:	2308      	movs	r3, #8
     56e:	430b      	orrs	r3, r1
     570:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     572:	2100      	movs	r1, #0
     574:	4850      	ldr	r0, [pc, #320]	; (6b8 <sd_mmc_check+0x36c>)
     576:	4b47      	ldr	r3, [pc, #284]	; (694 <sd_mmc_check+0x348>)
     578:	4798      	blx	r3
     57a:	2800      	cmp	r0, #0
     57c:	d100      	bne.n	580 <sd_mmc_check+0x234>
     57e:	e705      	b.n	38c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     580:	4b4e      	ldr	r3, [pc, #312]	; (6bc <sd_mmc_check+0x370>)
     582:	4798      	blx	r3
     584:	2800      	cmp	r0, #0
     586:	d100      	bne.n	58a <sd_mmc_check+0x23e>
     588:	e700      	b.n	38c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     58a:	4b40      	ldr	r3, [pc, #256]	; (68c <sd_mmc_check+0x340>)
     58c:	681a      	ldr	r2, [r3, #0]
     58e:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     590:	069b      	lsls	r3, r3, #26
     592:	0f1b      	lsrs	r3, r3, #28
     594:	2b02      	cmp	r3, #2
     596:	d100      	bne.n	59a <sd_mmc_check+0x24e>
     598:	e0a8      	b.n	6ec <sd_mmc_check+0x3a0>
     59a:	d907      	bls.n	5ac <sd_mmc_check+0x260>
     59c:	2b03      	cmp	r3, #3
     59e:	d100      	bne.n	5a2 <sd_mmc_check+0x256>
     5a0:	e0a7      	b.n	6f2 <sd_mmc_check+0x3a6>
     5a2:	2b04      	cmp	r3, #4
     5a4:	d104      	bne.n	5b0 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     5a6:	2340      	movs	r3, #64	; 0x40
     5a8:	7413      	strb	r3, [r2, #16]
     5aa:	e003      	b.n	5b4 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     5ac:	2b01      	cmp	r3, #1
     5ae:	d066      	beq.n	67e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     5b0:	2312      	movs	r3, #18
     5b2:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5b4:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     5b6:	0659      	lsls	r1, r3, #25
     5b8:	0f09      	lsrs	r1, r1, #28
     5ba:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     5bc:	2007      	movs	r0, #7
     5be:	4003      	ands	r3, r0
     5c0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     5c2:	483f      	ldr	r0, [pc, #252]	; (6c0 <sd_mmc_check+0x374>)
     5c4:	5818      	ldr	r0, [r3, r0]
     5c6:	23fa      	movs	r3, #250	; 0xfa
     5c8:	009b      	lsls	r3, r3, #2
     5ca:	4343      	muls	r3, r0
     5cc:	4843      	ldr	r0, [pc, #268]	; (6dc <sd_mmc_check+0x390>)
     5ce:	5809      	ldr	r1, [r1, r0]
     5d0:	434b      	muls	r3, r1
     5d2:	6013      	str	r3, [r2, #0]
     5d4:	7e91      	ldrb	r1, [r2, #26]
     5d6:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5d8:	7e53      	ldrb	r3, [r2, #25]
     5da:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5dc:	7e10      	ldrb	r0, [r2, #24]
     5de:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     5e0:	4303      	orrs	r3, r0
     5e2:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     5e4:	051b      	lsls	r3, r3, #20
     5e6:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     5e8:	493d      	ldr	r1, [pc, #244]	; (6e0 <sd_mmc_check+0x394>)
     5ea:	428b      	cmp	r3, r1
     5ec:	d00f      	beq.n	60e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     5ee:	7f10      	ldrb	r0, [r2, #28]
     5f0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     5f2:	7ed1      	ldrb	r1, [r2, #27]
     5f4:	0049      	lsls	r1, r1, #1
     5f6:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     5f8:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     5fa:	2007      	movs	r0, #7
     5fc:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     5fe:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     600:	408b      	lsls	r3, r1
     602:	7dd1      	ldrb	r1, [r2, #23]
     604:	3008      	adds	r0, #8
     606:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     608:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     60a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     60c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     60e:	7c13      	ldrb	r3, [r2, #16]
     610:	2b3f      	cmp	r3, #63	; 0x3f
     612:	d97b      	bls.n	70c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     614:	2100      	movs	r1, #0
     616:	9100      	str	r1, [sp, #0]
     618:	2301      	movs	r3, #1
     61a:	2280      	movs	r2, #128	; 0x80
     61c:	0092      	lsls	r2, r2, #2
     61e:	4831      	ldr	r0, [pc, #196]	; (6e4 <sd_mmc_check+0x398>)
     620:	4d2b      	ldr	r5, [pc, #172]	; (6d0 <sd_mmc_check+0x384>)
     622:	47a8      	blx	r5
     624:	2800      	cmp	r0, #0
     626:	d100      	bne.n	62a <sd_mmc_check+0x2de>
     628:	e6b0      	b.n	38c <sd_mmc_check+0x40>
     62a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     62c:	4e2e      	ldr	r6, [pc, #184]	; (6e8 <sd_mmc_check+0x39c>)
     62e:	a805      	add	r0, sp, #20
     630:	47b0      	blx	r6
     632:	2800      	cmp	r0, #0
     634:	d100      	bne.n	638 <sd_mmc_check+0x2ec>
     636:	e6a9      	b.n	38c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     638:	3501      	adds	r5, #1
     63a:	b2ad      	uxth	r5, r5
     63c:	2d32      	cmp	r5, #50	; 0x32
     63e:	d1f6      	bne.n	62e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     640:	4b12      	ldr	r3, [pc, #72]	; (68c <sd_mmc_check+0x340>)
     642:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     644:	7e8a      	ldrb	r2, [r1, #26]
     646:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     648:	7e4b      	ldrb	r3, [r1, #25]
     64a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     64c:	7e09      	ldrb	r1, [r1, #24]
     64e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     650:	430b      	orrs	r3, r1
     652:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     654:	051b      	lsls	r3, r3, #20
     656:	0d1b      	lsrs	r3, r3, #20
     658:	4a21      	ldr	r2, [pc, #132]	; (6e0 <sd_mmc_check+0x394>)
     65a:	4293      	cmp	r3, r2
     65c:	d154      	bne.n	708 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     65e:	4e22      	ldr	r6, [pc, #136]	; (6e8 <sd_mmc_check+0x39c>)
     660:	a806      	add	r0, sp, #24
     662:	47b0      	blx	r6
     664:	2800      	cmp	r0, #0
     666:	d100      	bne.n	66a <sd_mmc_check+0x31e>
     668:	e690      	b.n	38c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     66a:	3501      	adds	r5, #1
     66c:	b2ad      	uxth	r5, r5
     66e:	2d35      	cmp	r5, #53	; 0x35
     670:	d9f6      	bls.n	660 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     672:	4b06      	ldr	r3, [pc, #24]	; (68c <sd_mmc_check+0x340>)
     674:	681a      	ldr	r2, [r3, #0]
     676:	9b06      	ldr	r3, [sp, #24]
     678:	085b      	lsrs	r3, r3, #1
     67a:	6053      	str	r3, [r2, #4]
     67c:	e044      	b.n	708 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     67e:	2314      	movs	r3, #20
     680:	7413      	strb	r3, [r2, #16]
     682:	e797      	b.n	5b4 <sd_mmc_check+0x268>
     684:	00000141 	.word	0x00000141
     688:	00000311 	.word	0x00000311
     68c:	20000134 	.word	0x20000134
     690:	00004849 	.word	0x00004849
     694:	00004a11 	.word	0x00004a11
     698:	00005508 	.word	0x00005508
     69c:	00001110 	.word	0x00001110
     6a0:	0000028d 	.word	0x0000028d
     6a4:	00000115 	.word	0x00000115
     6a8:	00004a29 	.word	0x00004a29
     6ac:	0000053a 	.word	0x0000053a
     6b0:	00001bef 	.word	0x00001bef
     6b4:	00001101 	.word	0x00001101
     6b8:	0000113b 	.word	0x0000113b
     6bc:	000002c5 	.word	0x000002c5
     6c0:	00005d10 	.word	0x00005d10
     6c4:	00005d2c 	.word	0x00005d2c
     6c8:	00001137 	.word	0x00001137
     6cc:	00081133 	.word	0x00081133
     6d0:	00004881 	.word	0x00004881
     6d4:	00004aad 	.word	0x00004aad
     6d8:	00004b39 	.word	0x00004b39
     6dc:	00005cd0 	.word	0x00005cd0
     6e0:	00000fff 	.word	0x00000fff
     6e4:	00081108 	.word	0x00081108
     6e8:	00004a35 	.word	0x00004a35
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6ec:	2322      	movs	r3, #34	; 0x22
     6ee:	7413      	strb	r3, [r2, #16]
     6f0:	e760      	b.n	5b4 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6f2:	2330      	movs	r3, #48	; 0x30
     6f4:	7413      	strb	r3, [r2, #16]
     6f6:	e75d      	b.n	5b4 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     6f8:	a806      	add	r0, sp, #24
     6fa:	4b36      	ldr	r3, [pc, #216]	; (7d4 <sd_mmc_check+0x488>)
     6fc:	4798      	blx	r3
     6fe:	2800      	cmp	r0, #0
     700:	d100      	bne.n	704 <sd_mmc_check+0x3b8>
     702:	e643      	b.n	38c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     704:	3501      	adds	r5, #1
     706:	b2ad      	uxth	r5, r5
     708:	2d7f      	cmp	r5, #127	; 0x7f
     70a:	d9f5      	bls.n	6f8 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     70c:	2180      	movs	r1, #128	; 0x80
     70e:	0089      	lsls	r1, r1, #2
     710:	4831      	ldr	r0, [pc, #196]	; (7d8 <sd_mmc_check+0x48c>)
     712:	4b32      	ldr	r3, [pc, #200]	; (7dc <sd_mmc_check+0x490>)
     714:	4798      	blx	r3
     716:	2800      	cmp	r0, #0
     718:	d100      	bne.n	71c <sd_mmc_check+0x3d0>
     71a:	e637      	b.n	38c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     71c:	4b30      	ldr	r3, [pc, #192]	; (7e0 <sd_mmc_check+0x494>)
     71e:	4798      	blx	r3
     720:	2800      	cmp	r0, #0
     722:	d100      	bne.n	726 <sd_mmc_check+0x3da>
     724:	e632      	b.n	38c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     726:	4b2f      	ldr	r3, [pc, #188]	; (7e4 <sd_mmc_check+0x498>)
     728:	4798      	blx	r3
     72a:	e65e      	b.n	3ea <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     72c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     72e:	7e93      	ldrb	r3, [r2, #26]
     730:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     732:	7e51      	ldrb	r1, [r2, #25]
     734:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     736:	430b      	orrs	r3, r1
     738:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     73a:	029b      	lsls	r3, r3, #10
				* 512;
     73c:	085b      	lsrs	r3, r3, #1
     73e:	2180      	movs	r1, #128	; 0x80
     740:	0089      	lsls	r1, r1, #2
     742:	468c      	mov	ip, r1
     744:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     746:	6053      	str	r3, [r2, #4]
     748:	e6cd      	b.n	4e6 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     74a:	4b27      	ldr	r3, [pc, #156]	; (7e8 <sd_mmc_check+0x49c>)
     74c:	681b      	ldr	r3, [r3, #0]
     74e:	2210      	movs	r2, #16
     750:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     752:	4b25      	ldr	r3, [pc, #148]	; (7e8 <sd_mmc_check+0x49c>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	7bdb      	ldrb	r3, [r3, #15]
     758:	2209      	movs	r2, #9
     75a:	4013      	ands	r3, r2
     75c:	2b01      	cmp	r3, #1
     75e:	d000      	beq.n	762 <sd_mmc_check+0x416>
     760:	e638      	b.n	3d4 <sd_mmc_check+0x88>
     762:	e630      	b.n	3c6 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     764:	4b20      	ldr	r3, [pc, #128]	; (7e8 <sd_mmc_check+0x49c>)
     766:	681b      	ldr	r3, [r3, #0]
     768:	221a      	movs	r2, #26
     76a:	741a      	strb	r2, [r3, #16]
     76c:	e7f1      	b.n	752 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     76e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     770:	789b      	ldrb	r3, [r3, #2]
     772:	09db      	lsrs	r3, r3, #7
     774:	2b01      	cmp	r3, #1
     776:	d104      	bne.n	782 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     778:	4b1b      	ldr	r3, [pc, #108]	; (7e8 <sd_mmc_check+0x49c>)
     77a:	681b      	ldr	r3, [r3, #0]
     77c:	2230      	movs	r2, #48	; 0x30
     77e:	741a      	strb	r2, [r3, #16]
     780:	e7e7      	b.n	752 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     782:	4b19      	ldr	r3, [pc, #100]	; (7e8 <sd_mmc_check+0x49c>)
     784:	681b      	ldr	r3, [r3, #0]
     786:	2220      	movs	r2, #32
     788:	741a      	strb	r2, [r3, #16]
     78a:	e7e2      	b.n	752 <sd_mmc_check+0x406>
	*v2 = 0;
     78c:	2600      	movs	r6, #0
     78e:	e60d      	b.n	3ac <sd_mmc_check+0x60>
     790:	1e73      	subs	r3, r6, #1
     792:	419e      	sbcs	r6, r3
     794:	07b3      	lsls	r3, r6, #30
     796:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     798:	4d14      	ldr	r5, [pc, #80]	; (7ec <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     79a:	4f10      	ldr	r7, [pc, #64]	; (7dc <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     79c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     79e:	4e14      	ldr	r6, [pc, #80]	; (7f0 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     7a0:	2100      	movs	r1, #0
     7a2:	4814      	ldr	r0, [pc, #80]	; (7f4 <sd_mmc_check+0x4a8>)
     7a4:	47b8      	blx	r7
     7a6:	2800      	cmp	r0, #0
     7a8:	d100      	bne.n	7ac <sd_mmc_check+0x460>
     7aa:	e638      	b.n	41e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     7ac:	9903      	ldr	r1, [sp, #12]
     7ae:	4812      	ldr	r0, [pc, #72]	; (7f8 <sd_mmc_check+0x4ac>)
     7b0:	47c0      	blx	r8
     7b2:	2800      	cmp	r0, #0
     7b4:	d100      	bne.n	7b8 <sd_mmc_check+0x46c>
     7b6:	e632      	b.n	41e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     7b8:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     7ba:	07c3      	lsls	r3, r0, #31
     7bc:	d400      	bmi.n	7c0 <sd_mmc_check+0x474>
     7be:	e628      	b.n	412 <sd_mmc_check+0xc6>
     7c0:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     7c2:	2d00      	cmp	r5, #0
     7c4:	d1ec      	bne.n	7a0 <sd_mmc_check+0x454>
     7c6:	e62a      	b.n	41e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     7c8:	2209      	movs	r2, #9
     7ca:	4013      	ands	r3, r2
     7cc:	2b01      	cmp	r3, #1
     7ce:	d000      	beq.n	7d2 <sd_mmc_check+0x486>
     7d0:	e609      	b.n	3e6 <sd_mmc_check+0x9a>
     7d2:	e5f8      	b.n	3c6 <sd_mmc_check+0x7a>
     7d4:	00004a35 	.word	0x00004a35
     7d8:	00001110 	.word	0x00001110
     7dc:	00004a11 	.word	0x00004a11
     7e0:	0000028d 	.word	0x0000028d
     7e4:	00000115 	.word	0x00000115
     7e8:	20000134 	.word	0x20000134
     7ec:	00001bef 	.word	0x00001bef
     7f0:	00004a29 	.word	0x00004a29
     7f4:	00001137 	.word	0x00001137
     7f8:	00001129 	.word	0x00001129

000007fc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     7fc:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     7fe:	4b06      	ldr	r3, [pc, #24]	; (818 <sd_mmc_get_type+0x1c>)
     800:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     802:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     804:	2800      	cmp	r0, #0
     806:	d001      	beq.n	80c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     808:	0018      	movs	r0, r3
     80a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     80c:	4b03      	ldr	r3, [pc, #12]	; (81c <sd_mmc_get_type+0x20>)
     80e:	4798      	blx	r3
	return sd_mmc_card->type;
     810:	4b03      	ldr	r3, [pc, #12]	; (820 <sd_mmc_get_type+0x24>)
     812:	681b      	ldr	r3, [r3, #0]
     814:	7bdb      	ldrb	r3, [r3, #15]
     816:	e7f7      	b.n	808 <sd_mmc_get_type+0xc>
     818:	00000141 	.word	0x00000141
     81c:	00000311 	.word	0x00000311
     820:	20000134 	.word	0x20000134

00000824 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     824:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     826:	4b06      	ldr	r3, [pc, #24]	; (840 <sd_mmc_get_capacity+0x1c>)
     828:	4798      	blx	r3
		return 0;
     82a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     82c:	2800      	cmp	r0, #0
     82e:	d001      	beq.n	834 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     830:	0018      	movs	r0, r3
     832:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     834:	4b03      	ldr	r3, [pc, #12]	; (844 <sd_mmc_get_capacity+0x20>)
     836:	4798      	blx	r3
	return sd_mmc_card->capacity;
     838:	4b03      	ldr	r3, [pc, #12]	; (848 <sd_mmc_get_capacity+0x24>)
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	685b      	ldr	r3, [r3, #4]
     83e:	e7f7      	b.n	830 <sd_mmc_get_capacity+0xc>
     840:	00000141 	.word	0x00000141
     844:	00000311 	.word	0x00000311
     848:	20000134 	.word	0x20000134

0000084c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     84c:	2000      	movs	r0, #0
     84e:	4770      	bx	lr

00000850 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     850:	b570      	push	{r4, r5, r6, lr}
     852:	b082      	sub	sp, #8
     854:	000e      	movs	r6, r1
     856:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     858:	4b16      	ldr	r3, [pc, #88]	; (8b4 <sd_mmc_init_read_blocks+0x64>)
     85a:	4798      	blx	r3
     85c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     85e:	d002      	beq.n	866 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     860:	0020      	movs	r0, r4
     862:	b002      	add	sp, #8
     864:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     866:	4b14      	ldr	r3, [pc, #80]	; (8b8 <sd_mmc_init_read_blocks+0x68>)
     868:	4798      	blx	r3
     86a:	2800      	cmp	r0, #0
     86c:	d017      	beq.n	89e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     86e:	2d01      	cmp	r5, #1
     870:	d919      	bls.n	8a6 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     872:	4812      	ldr	r0, [pc, #72]	; (8bc <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     874:	4b12      	ldr	r3, [pc, #72]	; (8c0 <sd_mmc_init_read_blocks+0x70>)
     876:	681b      	ldr	r3, [r3, #0]
     878:	7bdb      	ldrb	r3, [r3, #15]
     87a:	071b      	lsls	r3, r3, #28
     87c:	d400      	bmi.n	880 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     87e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     880:	2301      	movs	r3, #1
     882:	9300      	str	r3, [sp, #0]
     884:	002b      	movs	r3, r5
     886:	2280      	movs	r2, #128	; 0x80
     888:	0092      	lsls	r2, r2, #2
     88a:	0031      	movs	r1, r6
     88c:	4e0d      	ldr	r6, [pc, #52]	; (8c4 <sd_mmc_init_read_blocks+0x74>)
     88e:	47b0      	blx	r6
     890:	2800      	cmp	r0, #0
     892:	d00a      	beq.n	8aa <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     894:	4b0c      	ldr	r3, [pc, #48]	; (8c8 <sd_mmc_init_read_blocks+0x78>)
     896:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     898:	4b0c      	ldr	r3, [pc, #48]	; (8cc <sd_mmc_init_read_blocks+0x7c>)
     89a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     89c:	e7e0      	b.n	860 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     89e:	4b0c      	ldr	r3, [pc, #48]	; (8d0 <sd_mmc_init_read_blocks+0x80>)
     8a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8a2:	3405      	adds	r4, #5
     8a4:	e7dc      	b.n	860 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     8a6:	480b      	ldr	r0, [pc, #44]	; (8d4 <sd_mmc_init_read_blocks+0x84>)
     8a8:	e7e4      	b.n	874 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     8aa:	4b09      	ldr	r3, [pc, #36]	; (8d0 <sd_mmc_init_read_blocks+0x80>)
     8ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8ae:	2405      	movs	r4, #5
     8b0:	e7d6      	b.n	860 <sd_mmc_init_read_blocks+0x10>
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	00000141 	.word	0x00000141
     8b8:	0000028d 	.word	0x0000028d
     8bc:	00101112 	.word	0x00101112
     8c0:	20000134 	.word	0x20000134
     8c4:	00004881 	.word	0x00004881
     8c8:	20000138 	.word	0x20000138
     8cc:	2000013a 	.word	0x2000013a
     8d0:	00000311 	.word	0x00000311
     8d4:	00081111 	.word	0x00081111

000008d8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     8d8:	b510      	push	{r4, lr}
     8da:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     8dc:	4b07      	ldr	r3, [pc, #28]	; (8fc <sd_mmc_start_read_blocks+0x24>)
     8de:	4798      	blx	r3
     8e0:	2800      	cmp	r0, #0
     8e2:	d104      	bne.n	8ee <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8e4:	2200      	movs	r2, #0
     8e6:	4b06      	ldr	r3, [pc, #24]	; (900 <sd_mmc_start_read_blocks+0x28>)
     8e8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     8ea:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     8ec:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     8ee:	4a04      	ldr	r2, [pc, #16]	; (900 <sd_mmc_start_read_blocks+0x28>)
     8f0:	8813      	ldrh	r3, [r2, #0]
     8f2:	1b1c      	subs	r4, r3, r4
     8f4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     8f6:	2000      	movs	r0, #0
     8f8:	e7f8      	b.n	8ec <sd_mmc_start_read_blocks+0x14>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	00004aad 	.word	0x00004aad
     900:	20000138 	.word	0x20000138

00000904 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     904:	b510      	push	{r4, lr}
     906:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     908:	4b14      	ldr	r3, [pc, #80]	; (95c <sd_mmc_wait_end_of_read_blocks+0x58>)
     90a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     90c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     90e:	2800      	cmp	r0, #0
     910:	d101      	bne.n	916 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     912:	0018      	movs	r0, r3
     914:	bd10      	pop	{r4, pc}
	if (abort) {
     916:	2c00      	cmp	r4, #0
     918:	d010      	beq.n	93c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     91a:	2200      	movs	r2, #0
     91c:	4b10      	ldr	r3, [pc, #64]	; (960 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     91e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     920:	4b10      	ldr	r3, [pc, #64]	; (964 <sd_mmc_wait_end_of_read_blocks+0x60>)
     922:	881b      	ldrh	r3, [r3, #0]
     924:	2b01      	cmp	r3, #1
     926:	d00f      	beq.n	948 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     928:	2100      	movs	r1, #0
     92a:	480f      	ldr	r0, [pc, #60]	; (968 <sd_mmc_wait_end_of_read_blocks+0x64>)
     92c:	4b0f      	ldr	r3, [pc, #60]	; (96c <sd_mmc_wait_end_of_read_blocks+0x68>)
     92e:	4798      	blx	r3
     930:	2800      	cmp	r0, #0
     932:	d00d      	beq.n	950 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     934:	4b0e      	ldr	r3, [pc, #56]	; (970 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     936:	4798      	blx	r3
	return SD_MMC_OK;
     938:	2300      	movs	r3, #0
     93a:	e7ea      	b.n	912 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     93c:	4b08      	ldr	r3, [pc, #32]	; (960 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     93e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     940:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     942:	2a00      	cmp	r2, #0
     944:	d0ec      	beq.n	920 <sd_mmc_wait_end_of_read_blocks+0x1c>
     946:	e7e4      	b.n	912 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     948:	4b09      	ldr	r3, [pc, #36]	; (970 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     94a:	4798      	blx	r3
		return SD_MMC_OK;
     94c:	2300      	movs	r3, #0
     94e:	e7e0      	b.n	912 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     950:	2100      	movs	r1, #0
     952:	4805      	ldr	r0, [pc, #20]	; (968 <sd_mmc_wait_end_of_read_blocks+0x64>)
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <sd_mmc_wait_end_of_read_blocks+0x68>)
     956:	4798      	blx	r3
     958:	e7ec      	b.n	934 <sd_mmc_wait_end_of_read_blocks+0x30>
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00004b39 	.word	0x00004b39
     960:	20000138 	.word	0x20000138
     964:	2000013a 	.word	0x2000013a
     968:	0000310c 	.word	0x0000310c
     96c:	00004a11 	.word	0x00004a11
     970:	00000311 	.word	0x00000311

00000974 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     974:	b570      	push	{r4, r5, r6, lr}
     976:	b082      	sub	sp, #8
     978:	000e      	movs	r6, r1
     97a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <sd_mmc_init_write_blocks+0x50>)
     97e:	4798      	blx	r3
     980:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     982:	d116      	bne.n	9b2 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     984:	2d01      	cmp	r5, #1
     986:	d917      	bls.n	9b8 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     988:	480f      	ldr	r0, [pc, #60]	; (9c8 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     98a:	4b10      	ldr	r3, [pc, #64]	; (9cc <sd_mmc_init_write_blocks+0x58>)
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	7bdb      	ldrb	r3, [r3, #15]
     990:	071b      	lsls	r3, r3, #28
     992:	d400      	bmi.n	996 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     994:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     996:	2301      	movs	r3, #1
     998:	9300      	str	r3, [sp, #0]
     99a:	002b      	movs	r3, r5
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	0092      	lsls	r2, r2, #2
     9a0:	0031      	movs	r1, r6
     9a2:	4e0b      	ldr	r6, [pc, #44]	; (9d0 <sd_mmc_init_write_blocks+0x5c>)
     9a4:	47b0      	blx	r6
     9a6:	2800      	cmp	r0, #0
     9a8:	d008      	beq.n	9bc <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     9aa:	4b0a      	ldr	r3, [pc, #40]	; (9d4 <sd_mmc_init_write_blocks+0x60>)
     9ac:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     9ae:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <sd_mmc_init_write_blocks+0x64>)
     9b0:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     9b2:	0020      	movs	r0, r4
     9b4:	b002      	add	sp, #8
     9b6:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     9b8:	4808      	ldr	r0, [pc, #32]	; (9dc <sd_mmc_init_write_blocks+0x68>)
     9ba:	e7e6      	b.n	98a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     9bc:	4b08      	ldr	r3, [pc, #32]	; (9e0 <sd_mmc_init_write_blocks+0x6c>)
     9be:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     9c0:	2405      	movs	r4, #5
     9c2:	e7f6      	b.n	9b2 <sd_mmc_init_write_blocks+0x3e>
     9c4:	00000141 	.word	0x00000141
     9c8:	00109119 	.word	0x00109119
     9cc:	20000134 	.word	0x20000134
     9d0:	00004881 	.word	0x00004881
     9d4:	20000138 	.word	0x20000138
     9d8:	2000013a 	.word	0x2000013a
     9dc:	00089118 	.word	0x00089118
     9e0:	00000311 	.word	0x00000311

000009e4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     9e4:	b510      	push	{r4, lr}
     9e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <sd_mmc_start_write_blocks+0x24>)
     9ea:	4798      	blx	r3
     9ec:	2800      	cmp	r0, #0
     9ee:	d104      	bne.n	9fa <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     9f0:	2200      	movs	r2, #0
     9f2:	4b06      	ldr	r3, [pc, #24]	; (a0c <sd_mmc_start_write_blocks+0x28>)
     9f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     9f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     9f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     9fa:	4a04      	ldr	r2, [pc, #16]	; (a0c <sd_mmc_start_write_blocks+0x28>)
     9fc:	8813      	ldrh	r3, [r2, #0]
     9fe:	1b1c      	subs	r4, r3, r4
     a00:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     a02:	2000      	movs	r0, #0
     a04:	e7f8      	b.n	9f8 <sd_mmc_start_write_blocks+0x14>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00004b3d 	.word	0x00004b3d
     a0c:	20000138 	.word	0x20000138

00000a10 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     a10:	b510      	push	{r4, lr}
     a12:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     a14:	4b0e      	ldr	r3, [pc, #56]	; (a50 <sd_mmc_wait_end_of_write_blocks+0x40>)
     a16:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     a18:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     a1a:	2800      	cmp	r0, #0
     a1c:	d101      	bne.n	a22 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     a1e:	0018      	movs	r0, r3
     a20:	bd10      	pop	{r4, pc}
	if (abort) {
     a22:	2c00      	cmp	r4, #0
     a24:	d00a      	beq.n	a3c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     a26:	2200      	movs	r2, #0
     a28:	4b0a      	ldr	r3, [pc, #40]	; (a54 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a2a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     a2c:	4b0a      	ldr	r3, [pc, #40]	; (a58 <sd_mmc_wait_end_of_write_blocks+0x48>)
     a2e:	881b      	ldrh	r3, [r3, #0]
     a30:	2b01      	cmp	r3, #1
     a32:	d009      	beq.n	a48 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     a34:	4b09      	ldr	r3, [pc, #36]	; (a5c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a36:	4798      	blx	r3
	return SD_MMC_OK;
     a38:	2300      	movs	r3, #0
     a3a:	e7f0      	b.n	a1e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     a3c:	4b05      	ldr	r3, [pc, #20]	; (a54 <sd_mmc_wait_end_of_write_blocks+0x44>)
     a3e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     a40:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     a42:	2a00      	cmp	r2, #0
     a44:	d0f2      	beq.n	a2c <sd_mmc_wait_end_of_write_blocks+0x1c>
     a46:	e7ea      	b.n	a1e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     a48:	4b04      	ldr	r3, [pc, #16]	; (a5c <sd_mmc_wait_end_of_write_blocks+0x4c>)
     a4a:	4798      	blx	r3
		return SD_MMC_OK;
     a4c:	2300      	movs	r3, #0
     a4e:	e7e6      	b.n	a1e <sd_mmc_wait_end_of_write_blocks+0xe>
     a50:	00004bbd 	.word	0x00004bbd
     a54:	20000138 	.word	0x20000138
     a58:	2000013a 	.word	0x2000013a
     a5c:	00000311 	.word	0x00000311

00000a60 <udi_msc_disable>:
}


void udi_msc_disable(void)
{
	udi_msc_b_trans_req = false;
     a60:	2200      	movs	r2, #0
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <udi_msc_disable+0x14>)
     a64:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
     a66:	2301      	movs	r3, #1
     a68:	4a03      	ldr	r2, [pc, #12]	; (a78 <udi_msc_disable+0x18>)
     a6a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     a6c:	4a03      	ldr	r2, [pc, #12]	; (a7c <udi_msc_disable+0x1c>)
     a6e:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
}
     a70:	4770      	bx	lr
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	2000015a 	.word	0x2000015a
     a78:	20000044 	.word	0x20000044
     a7c:	20000045 	.word	0x20000045

00000a80 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     a80:	2000      	movs	r0, #0
     a82:	4770      	bx	lr

00000a84 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     a84:	1e43      	subs	r3, r0, #1
     a86:	4198      	sbcs	r0, r3
     a88:	b2c0      	uxtb	r0, r0
     a8a:	4b03      	ldr	r3, [pc, #12]	; (a98 <udi_msc_trans_ack+0x14>)
     a8c:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     a8e:	2201      	movs	r2, #1
     a90:	4b02      	ldr	r3, [pc, #8]	; (a9c <udi_msc_trans_ack+0x18>)
     a92:	701a      	strb	r2, [r3, #0]
}
     a94:	4770      	bx	lr
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	200002c9 	.word	0x200002c9
     a9c:	20000044 	.word	0x20000044

00000aa0 <udi_msc_cbw_wait>:
{
     aa0:	b510      	push	{r4, lr}
     aa2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     aa4:	4b08      	ldr	r3, [pc, #32]	; (ac8 <udi_msc_cbw_wait+0x28>)
     aa6:	9300      	str	r3, [sp, #0]
     aa8:	231f      	movs	r3, #31
     aaa:	4a08      	ldr	r2, [pc, #32]	; (acc <udi_msc_cbw_wait+0x2c>)
     aac:	2101      	movs	r1, #1
     aae:	2002      	movs	r0, #2
     ab0:	4c07      	ldr	r4, [pc, #28]	; (ad0 <udi_msc_cbw_wait+0x30>)
     ab2:	47a0      	blx	r4
     ab4:	2800      	cmp	r0, #0
     ab6:	d001      	beq.n	abc <udi_msc_cbw_wait+0x1c>
}
     ab8:	b002      	add	sp, #8
     aba:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     abc:	4905      	ldr	r1, [pc, #20]	; (ad4 <udi_msc_cbw_wait+0x34>)
     abe:	3002      	adds	r0, #2
     ac0:	4b05      	ldr	r3, [pc, #20]	; (ad8 <udi_msc_cbw_wait+0x38>)
     ac2:	4798      	blx	r3
}
     ac4:	e7f8      	b.n	ab8 <udi_msc_cbw_wait+0x18>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	00000eb9 	.word	0x00000eb9
     acc:	20000164 	.word	0x20000164
     ad0:	00002415 	.word	0x00002415
     ad4:	00000aa1 	.word	0x00000aa1
     ad8:	000023bd 	.word	0x000023bd

00000adc <udi_msc_enable>:
{
     adc:	b570      	push	{r4, r5, r6, lr}
	udi_msc_b_trans_req = false;
     ade:	2300      	movs	r3, #0
     ae0:	4a11      	ldr	r2, [pc, #68]	; (b28 <udi_msc_enable+0x4c>)
     ae2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     ae4:	4a11      	ldr	r2, [pc, #68]	; (b2c <udi_msc_enable+0x50>)
     ae6:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     ae8:	3301      	adds	r3, #1
     aea:	4a11      	ldr	r2, [pc, #68]	; (b30 <udi_msc_enable+0x54>)
     aec:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     aee:	4a11      	ldr	r2, [pc, #68]	; (b34 <udi_msc_enable+0x58>)
     af0:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     af2:	4b11      	ldr	r3, [pc, #68]	; (b38 <udi_msc_enable+0x5c>)
     af4:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     af6:	2800      	cmp	r0, #0
     af8:	d011      	beq.n	b1e <udi_msc_enable+0x42>
	udi_msc_nb_lun--;
     afa:	3801      	subs	r0, #1
     afc:	4b0f      	ldr	r3, [pc, #60]	; (b3c <udi_msc_enable+0x60>)
     afe:	7018      	strb	r0, [r3, #0]
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     b00:	2400      	movs	r4, #0
		mem_unload(lun, false);
     b02:	4e0f      	ldr	r6, [pc, #60]	; (b40 <udi_msc_enable+0x64>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     b04:	001d      	movs	r5, r3
		mem_unload(lun, false);
     b06:	2100      	movs	r1, #0
     b08:	0020      	movs	r0, r4
     b0a:	47b0      	blx	r6
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     b0c:	3401      	adds	r4, #1
     b0e:	b2e4      	uxtb	r4, r4
     b10:	782b      	ldrb	r3, [r5, #0]
     b12:	42a3      	cmp	r3, r4
     b14:	d2f7      	bcs.n	b06 <udi_msc_enable+0x2a>
	udi_msc_cbw_wait();
     b16:	4b0b      	ldr	r3, [pc, #44]	; (b44 <udi_msc_enable+0x68>)
     b18:	4798      	blx	r3
	return true;
     b1a:	2001      	movs	r0, #1
}
     b1c:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_nb_lun = get_nb_lun();
     b1e:	2200      	movs	r2, #0
     b20:	4b06      	ldr	r3, [pc, #24]	; (b3c <udi_msc_enable+0x60>)
     b22:	701a      	strb	r2, [r3, #0]
     b24:	e7fa      	b.n	b1c <udi_msc_enable+0x40>
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	2000015a 	.word	0x2000015a
     b2c:	20000158 	.word	0x20000158
     b30:	20000044 	.word	0x20000044
     b34:	20000045 	.word	0x20000045
     b38:	00004be1 	.word	0x00004be1
     b3c:	20000188 	.word	0x20000188
     b40:	00004c21 	.word	0x00004c21
     b44:	00000aa1 	.word	0x00000aa1

00000b48 <udi_msc_csw_sent>:
{
     b48:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
     b4a:	4b01      	ldr	r3, [pc, #4]	; (b50 <udi_msc_csw_sent+0x8>)
     b4c:	4798      	blx	r3
}
     b4e:	bd10      	pop	{r4, pc}
     b50:	00000aa1 	.word	0x00000aa1

00000b54 <udi_msc_csw_send>:
{
     b54:	b510      	push	{r4, lr}
     b56:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     b58:	4b08      	ldr	r3, [pc, #32]	; (b7c <udi_msc_csw_send+0x28>)
     b5a:	9300      	str	r3, [sp, #0]
     b5c:	230d      	movs	r3, #13
     b5e:	4a08      	ldr	r2, [pc, #32]	; (b80 <udi_msc_csw_send+0x2c>)
     b60:	2100      	movs	r1, #0
     b62:	2081      	movs	r0, #129	; 0x81
     b64:	4c07      	ldr	r4, [pc, #28]	; (b84 <udi_msc_csw_send+0x30>)
     b66:	47a0      	blx	r4
     b68:	2800      	cmp	r0, #0
     b6a:	d001      	beq.n	b70 <udi_msc_csw_send+0x1c>
}
     b6c:	b002      	add	sp, #8
     b6e:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     b70:	4905      	ldr	r1, [pc, #20]	; (b88 <udi_msc_csw_send+0x34>)
     b72:	3081      	adds	r0, #129	; 0x81
     b74:	4b05      	ldr	r3, [pc, #20]	; (b8c <udi_msc_csw_send+0x38>)
     b76:	4798      	blx	r3
}
     b78:	e7f8      	b.n	b6c <udi_msc_csw_send+0x18>
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00000b49 	.word	0x00000b49
     b80:	20000048 	.word	0x20000048
     b84:	00002415 	.word	0x00002415
     b88:	00000b55 	.word	0x00000b55
     b8c:	000023bd 	.word	0x000023bd

00000b90 <udi_msc_cbw_invalid>:
{
     b90:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     b92:	4b06      	ldr	r3, [pc, #24]	; (bac <udi_msc_cbw_invalid+0x1c>)
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	2b00      	cmp	r3, #0
     b98:	d100      	bne.n	b9c <udi_msc_cbw_invalid+0xc>
}
     b9a:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     b9c:	2002      	movs	r0, #2
     b9e:	4b04      	ldr	r3, [pc, #16]	; (bb0 <udi_msc_cbw_invalid+0x20>)
     ba0:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     ba2:	4904      	ldr	r1, [pc, #16]	; (bb4 <udi_msc_cbw_invalid+0x24>)
     ba4:	2002      	movs	r0, #2
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <udi_msc_cbw_invalid+0x28>)
     ba8:	4798      	blx	r3
     baa:	e7f6      	b.n	b9a <udi_msc_cbw_invalid+0xa>
     bac:	20000158 	.word	0x20000158
     bb0:	00002249 	.word	0x00002249
     bb4:	00000b91 	.word	0x00000b91
     bb8:	000023bd 	.word	0x000023bd

00000bbc <udi_msc_csw_invalid>:
{
     bbc:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     bbe:	4b06      	ldr	r3, [pc, #24]	; (bd8 <udi_msc_csw_invalid+0x1c>)
     bc0:	781b      	ldrb	r3, [r3, #0]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d100      	bne.n	bc8 <udi_msc_csw_invalid+0xc>
}
     bc6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
     bc8:	2081      	movs	r0, #129	; 0x81
     bca:	4b04      	ldr	r3, [pc, #16]	; (bdc <udi_msc_csw_invalid+0x20>)
     bcc:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     bce:	4904      	ldr	r1, [pc, #16]	; (be0 <udi_msc_csw_invalid+0x24>)
     bd0:	2081      	movs	r0, #129	; 0x81
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <udi_msc_csw_invalid+0x28>)
     bd4:	4798      	blx	r3
     bd6:	e7f6      	b.n	bc6 <udi_msc_csw_invalid+0xa>
     bd8:	20000158 	.word	0x20000158
     bdc:	00002249 	.word	0x00002249
     be0:	00000bbd 	.word	0x00000bbd
     be4:	000023bd 	.word	0x000023bd

00000be8 <udi_msc_csw_process>:
{
     be8:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     bea:	4b0b      	ldr	r3, [pc, #44]	; (c18 <udi_msc_csw_process+0x30>)
     bec:	689b      	ldr	r3, [r3, #8]
     bee:	2b00      	cmp	r3, #0
     bf0:	d006      	beq.n	c00 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     bf2:	4b0a      	ldr	r3, [pc, #40]	; (c1c <udi_msc_csw_process+0x34>)
     bf4:	7b1b      	ldrb	r3, [r3, #12]
     bf6:	2b7f      	cmp	r3, #127	; 0x7f
     bf8:	d809      	bhi.n	c0e <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     bfa:	2002      	movs	r0, #2
     bfc:	4b08      	ldr	r3, [pc, #32]	; (c20 <udi_msc_csw_process+0x38>)
     bfe:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     c00:	4b06      	ldr	r3, [pc, #24]	; (c1c <udi_msc_csw_process+0x34>)
     c02:	685a      	ldr	r2, [r3, #4]
     c04:	4b04      	ldr	r3, [pc, #16]	; (c18 <udi_msc_csw_process+0x30>)
     c06:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
     c08:	4b06      	ldr	r3, [pc, #24]	; (c24 <udi_msc_csw_process+0x3c>)
     c0a:	4798      	blx	r3
}
     c0c:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     c0e:	2081      	movs	r0, #129	; 0x81
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <udi_msc_csw_process+0x38>)
     c12:	4798      	blx	r3
     c14:	e7f4      	b.n	c00 <udi_msc_csw_process+0x18>
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	20000048 	.word	0x20000048
     c1c:	20000164 	.word	0x20000164
     c20:	00002249 	.word	0x00002249
     c24:	00000b55 	.word	0x00000b55

00000c28 <udi_msc_clear_sense>:
{
     c28:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     c2a:	4c05      	ldr	r4, [pc, #20]	; (c40 <udi_msc_clear_sense+0x18>)
     c2c:	2212      	movs	r2, #18
     c2e:	2100      	movs	r1, #0
     c30:	0020      	movs	r0, r4
     c32:	4b04      	ldr	r3, [pc, #16]	; (c44 <udi_msc_clear_sense+0x1c>)
     c34:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     c36:	23f0      	movs	r3, #240	; 0xf0
     c38:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     c3a:	3be6      	subs	r3, #230	; 0xe6
     c3c:	71e3      	strb	r3, [r4, #7]
}
     c3e:	bd10      	pop	{r4, pc}
     c40:	2000018c 	.word	0x2000018c
     c44:	00005cbf 	.word	0x00005cbf

00000c48 <udi_msc_sense_fail>:
{
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	0006      	movs	r6, r0
     c4c:	000d      	movs	r5, r1
     c4e:	0014      	movs	r4, r2
	udi_msc_clear_sense();
     c50:	4b08      	ldr	r3, [pc, #32]	; (c74 <udi_msc_sense_fail+0x2c>)
     c52:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     c54:	2201      	movs	r2, #1
     c56:	4b08      	ldr	r3, [pc, #32]	; (c78 <udi_msc_sense_fail+0x30>)
     c58:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     c5a:	4b08      	ldr	r3, [pc, #32]	; (c7c <udi_msc_sense_fail+0x34>)
     c5c:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
     c5e:	0e22      	lsrs	r2, r4, #24
     c60:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
     c62:	0c22      	lsrs	r2, r4, #16
     c64:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
     c66:	0a22      	lsrs	r2, r4, #8
     c68:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
     c6a:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     c6c:	0a2a      	lsrs	r2, r5, #8
     c6e:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
     c70:	735d      	strb	r5, [r3, #13]
}
     c72:	bd70      	pop	{r4, r5, r6, pc}
     c74:	00000c29 	.word	0x00000c29
     c78:	20000048 	.word	0x20000048
     c7c:	2000018c 	.word	0x2000018c

00000c80 <udi_msc_sense_fail_cdb_invalid>:
{
     c80:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
     c82:	2200      	movs	r2, #0
     c84:	2190      	movs	r1, #144	; 0x90
     c86:	0189      	lsls	r1, r1, #6
     c88:	2005      	movs	r0, #5
     c8a:	4b01      	ldr	r3, [pc, #4]	; (c90 <udi_msc_sense_fail_cdb_invalid+0x10>)
     c8c:	4798      	blx	r3
}
     c8e:	bd10      	pop	{r4, pc}
     c90:	00000c49 	.word	0x00000c49

00000c94 <udi_msc_cbw_validate>:
{
     c94:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
     c96:	4b09      	ldr	r3, [pc, #36]	; (cbc <udi_msc_cbw_validate+0x28>)
     c98:	7b1b      	ldrb	r3, [r3, #12]
     c9a:	4059      	eors	r1, r3
     c9c:	b249      	sxtb	r1, r1
     c9e:	2900      	cmp	r1, #0
     ca0:	db04      	blt.n	cac <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     ca2:	4b07      	ldr	r3, [pc, #28]	; (cc0 <udi_msc_cbw_validate+0x2c>)
     ca4:	689a      	ldr	r2, [r3, #8]
	return true;
     ca6:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
     ca8:	4282      	cmp	r2, r0
     caa:	d204      	bcs.n	cb6 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
     cac:	4b05      	ldr	r3, [pc, #20]	; (cc4 <udi_msc_cbw_validate+0x30>)
     cae:	4798      	blx	r3
		udi_msc_csw_process();
     cb0:	4b05      	ldr	r3, [pc, #20]	; (cc8 <udi_msc_cbw_validate+0x34>)
     cb2:	4798      	blx	r3
		return false;
     cb4:	2300      	movs	r3, #0
}
     cb6:	0018      	movs	r0, r3
     cb8:	bd10      	pop	{r4, pc}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	20000164 	.word	0x20000164
     cc0:	20000048 	.word	0x20000048
     cc4:	00000c81 	.word	0x00000c81
     cc8:	00000be9 	.word	0x00000be9

00000ccc <udi_msc_sense_fail_hardware>:
{
     ccc:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
     cce:	2200      	movs	r2, #0
     cd0:	2100      	movs	r1, #0
     cd2:	2004      	movs	r0, #4
     cd4:	4b01      	ldr	r3, [pc, #4]	; (cdc <udi_msc_sense_fail_hardware+0x10>)
     cd6:	4798      	blx	r3
}
     cd8:	bd10      	pop	{r4, pc}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	00000c49 	.word	0x00000c49

00000ce0 <udi_msc_data_send>:
{
     ce0:	b510      	push	{r4, lr}
     ce2:	b082      	sub	sp, #8
     ce4:	0002      	movs	r2, r0
     ce6:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
     ce8:	4907      	ldr	r1, [pc, #28]	; (d08 <udi_msc_data_send+0x28>)
     cea:	9100      	str	r1, [sp, #0]
     cec:	2101      	movs	r1, #1
     cee:	2081      	movs	r0, #129	; 0x81
     cf0:	4c06      	ldr	r4, [pc, #24]	; (d0c <udi_msc_data_send+0x2c>)
     cf2:	47a0      	blx	r4
     cf4:	2800      	cmp	r0, #0
     cf6:	d001      	beq.n	cfc <udi_msc_data_send+0x1c>
}
     cf8:	b002      	add	sp, #8
     cfa:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <udi_msc_data_send+0x30>)
     cfe:	4798      	blx	r3
		udi_msc_csw_process();
     d00:	4b04      	ldr	r3, [pc, #16]	; (d14 <udi_msc_data_send+0x34>)
     d02:	4798      	blx	r3
}
     d04:	e7f8      	b.n	cf8 <udi_msc_data_send+0x18>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000d59 	.word	0x00000d59
     d0c:	00002415 	.word	0x00002415
     d10:	00000ccd 	.word	0x00000ccd
     d14:	00000be9 	.word	0x00000be9

00000d18 <udi_msc_sense_fail_busy_or_change>:
{
     d18:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
     d1a:	2200      	movs	r2, #0
     d1c:	21a0      	movs	r1, #160	; 0xa0
     d1e:	0189      	lsls	r1, r1, #6
     d20:	2006      	movs	r0, #6
     d22:	4b01      	ldr	r3, [pc, #4]	; (d28 <udi_msc_sense_fail_busy_or_change+0x10>)
     d24:	4798      	blx	r3
}
     d26:	bd10      	pop	{r4, pc}
     d28:	00000c49 	.word	0x00000c49

00000d2c <udi_msc_sense_fail_not_present>:
{
     d2c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
     d2e:	2200      	movs	r2, #0
     d30:	21e8      	movs	r1, #232	; 0xe8
     d32:	0189      	lsls	r1, r1, #6
     d34:	2002      	movs	r0, #2
     d36:	4b01      	ldr	r3, [pc, #4]	; (d3c <udi_msc_sense_fail_not_present+0x10>)
     d38:	4798      	blx	r3
}
     d3a:	bd10      	pop	{r4, pc}
     d3c:	00000c49 	.word	0x00000c49

00000d40 <udi_msc_sense_pass>:
{
     d40:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
     d42:	4b03      	ldr	r3, [pc, #12]	; (d50 <udi_msc_sense_pass+0x10>)
     d44:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
     d46:	2200      	movs	r2, #0
     d48:	4b02      	ldr	r3, [pc, #8]	; (d54 <udi_msc_sense_pass+0x14>)
     d4a:	731a      	strb	r2, [r3, #12]
}
     d4c:	bd10      	pop	{r4, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	00000c29 	.word	0x00000c29
     d54:	20000048 	.word	0x20000048

00000d58 <udi_msc_data_sent>:
{
     d58:	b510      	push	{r4, lr}
     d5a:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
     d5c:	2800      	cmp	r0, #0
     d5e:	d000      	beq.n	d62 <udi_msc_data_sent+0xa>
}
     d60:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
     d62:	4b04      	ldr	r3, [pc, #16]	; (d74 <udi_msc_data_sent+0x1c>)
     d64:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <udi_msc_data_sent+0x20>)
     d68:	689a      	ldr	r2, [r3, #8]
     d6a:	1b14      	subs	r4, r2, r4
     d6c:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
     d6e:	4b03      	ldr	r3, [pc, #12]	; (d7c <udi_msc_data_sent+0x24>)
     d70:	4798      	blx	r3
     d72:	e7f5      	b.n	d60 <udi_msc_data_sent+0x8>
     d74:	00000d41 	.word	0x00000d41
     d78:	20000048 	.word	0x20000048
     d7c:	00000be9 	.word	0x00000be9

00000d80 <udi_msc_spc_mode_sense>:
{
     d80:	b570      	push	{r4, r5, r6, lr}
     d82:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
     d84:	2214      	movs	r2, #20
     d86:	2100      	movs	r1, #0
     d88:	4823      	ldr	r0, [pc, #140]	; (e18 <udi_msc_spc_mode_sense+0x98>)
     d8a:	4b24      	ldr	r3, [pc, #144]	; (e1c <udi_msc_spc_mode_sense+0x9c>)
     d8c:	4798      	blx	r3
	if (b_sense10) {
     d8e:	2d00      	cmp	r5, #0
     d90:	d018      	beq.n	dc4 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
     d92:	4b23      	ldr	r3, [pc, #140]	; (e20 <udi_msc_spc_mode_sense+0xa0>)
     d94:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
     d96:	4a20      	ldr	r2, [pc, #128]	; (e18 <udi_msc_spc_mode_sense+0x98>)
     d98:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
     d9a:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
     d9c:	4b20      	ldr	r3, [pc, #128]	; (e20 <udi_msc_spc_mode_sense+0xa0>)
     d9e:	7c58      	ldrb	r0, [r3, #17]
     da0:	233f      	movs	r3, #63	; 0x3f
     da2:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
     da4:	2b1c      	cmp	r3, #28
     da6:	d013      	beq.n	dd0 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
     da8:	2b3f      	cmp	r3, #63	; 0x3f
     daa:	d011      	beq.n	dd0 <udi_msc_spc_mode_sense+0x50>
     dac:	1c20      	adds	r0, r4, #0
     dae:	428c      	cmp	r4, r1
     db0:	d900      	bls.n	db4 <udi_msc_spc_mode_sense+0x34>
     db2:	1c08      	adds	r0, r1, #0
     db4:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
     db6:	2180      	movs	r1, #128	; 0x80
     db8:	0030      	movs	r0, r6
     dba:	4b1a      	ldr	r3, [pc, #104]	; (e24 <udi_msc_spc_mode_sense+0xa4>)
     dbc:	4798      	blx	r3
     dbe:	2800      	cmp	r0, #0
     dc0:	d10f      	bne.n	de2 <udi_msc_spc_mode_sense+0x62>
}
     dc2:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
     dc4:	4b16      	ldr	r3, [pc, #88]	; (e20 <udi_msc_spc_mode_sense+0xa0>)
     dc6:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
     dc8:	4a13      	ldr	r2, [pc, #76]	; (e18 <udi_msc_spc_mode_sense+0x98>)
     dca:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
     dcc:	2404      	movs	r4, #4
     dce:	e7e5      	b.n	d9c <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
     dd0:	231c      	movs	r3, #28
     dd2:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
     dd4:	3b12      	subs	r3, #18
     dd6:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
     dd8:	3b05      	subs	r3, #5
     dda:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
     ddc:	340c      	adds	r4, #12
     dde:	b2e4      	uxtb	r4, r4
     de0:	e7e4      	b.n	dac <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
     de2:	4b0f      	ldr	r3, [pc, #60]	; (e20 <udi_msc_spc_mode_sense+0xa0>)
     de4:	7b58      	ldrb	r0, [r3, #13]
     de6:	4b10      	ldr	r3, [pc, #64]	; (e28 <udi_msc_spc_mode_sense+0xa8>)
     de8:	4798      	blx	r3
     dea:	1e43      	subs	r3, r0, #1
     dec:	4198      	sbcs	r0, r3
     dee:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
     df0:	2d00      	cmp	r5, #0
     df2:	d00c      	beq.n	e0e <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
     df4:	3c02      	subs	r4, #2
     df6:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
     df8:	4a07      	ldr	r2, [pc, #28]	; (e18 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
     dfa:	0a23      	lsrs	r3, r4, #8
     dfc:	0224      	lsls	r4, r4, #8
     dfe:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
     e00:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
     e02:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
     e04:	0031      	movs	r1, r6
     e06:	4804      	ldr	r0, [pc, #16]	; (e18 <udi_msc_spc_mode_sense+0x98>)
     e08:	4b08      	ldr	r3, [pc, #32]	; (e2c <udi_msc_spc_mode_sense+0xac>)
     e0a:	4798      	blx	r3
     e0c:	e7d9      	b.n	dc2 <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <udi_msc_spc_mode_sense+0x98>)
     e10:	3c01      	subs	r4, #1
     e12:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
     e14:	7098      	strb	r0, [r3, #2]
     e16:	e7f5      	b.n	e04 <udi_msc_spc_mode_sense+0x84>
     e18:	20000140 	.word	0x20000140
     e1c:	00005cbf 	.word	0x00005cbf
     e20:	20000164 	.word	0x20000164
     e24:	00000c95 	.word	0x00000c95
     e28:	00004c4d 	.word	0x00004c4d
     e2c:	00000ce1 	.word	0x00000ce1

00000e30 <udi_msc_sbc_trans>:
{
     e30:	b510      	push	{r4, lr}
     e32:	1e04      	subs	r4, r0, #0
	if (!b_read) {
     e34:	d01e      	beq.n	e74 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
     e36:	4a17      	ldr	r2, [pc, #92]	; (e94 <udi_msc_sbc_trans+0x64>)
     e38:	4b17      	ldr	r3, [pc, #92]	; (e98 <udi_msc_sbc_trans+0x68>)
     e3a:	7c59      	ldrb	r1, [r3, #17]
     e3c:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
     e3e:	7c99      	ldrb	r1, [r3, #18]
     e40:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
     e42:	7cd9      	ldrb	r1, [r3, #19]
     e44:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
     e46:	7d19      	ldrb	r1, [r3, #20]
     e48:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
     e4a:	4a14      	ldr	r2, [pc, #80]	; (e9c <udi_msc_sbc_trans+0x6c>)
     e4c:	7d99      	ldrb	r1, [r3, #22]
     e4e:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
     e50:	7ddb      	ldrb	r3, [r3, #23]
     e52:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     e54:	8810      	ldrh	r0, [r2, #0]
     e56:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
     e58:	0021      	movs	r1, r4
     e5a:	1e4b      	subs	r3, r1, #1
     e5c:	4199      	sbcs	r1, r3
     e5e:	01c9      	lsls	r1, r1, #7
     e60:	4b0f      	ldr	r3, [pc, #60]	; (ea0 <udi_msc_sbc_trans+0x70>)
     e62:	4798      	blx	r3
     e64:	2800      	cmp	r0, #0
     e66:	d004      	beq.n	e72 <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
     e68:	4b0e      	ldr	r3, [pc, #56]	; (ea4 <udi_msc_sbc_trans+0x74>)
     e6a:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
     e6c:	2201      	movs	r2, #1
     e6e:	4b0e      	ldr	r3, [pc, #56]	; (ea8 <udi_msc_sbc_trans+0x78>)
     e70:	701a      	strb	r2, [r3, #0]
}
     e72:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
     e74:	4b08      	ldr	r3, [pc, #32]	; (e98 <udi_msc_sbc_trans+0x68>)
     e76:	7b58      	ldrb	r0, [r3, #13]
     e78:	4b0c      	ldr	r3, [pc, #48]	; (eac <udi_msc_sbc_trans+0x7c>)
     e7a:	4798      	blx	r3
     e7c:	2800      	cmp	r0, #0
     e7e:	d0da      	beq.n	e36 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
     e80:	2200      	movs	r2, #0
     e82:	219c      	movs	r1, #156	; 0x9c
     e84:	0189      	lsls	r1, r1, #6
     e86:	2007      	movs	r0, #7
     e88:	4b09      	ldr	r3, [pc, #36]	; (eb0 <udi_msc_sbc_trans+0x80>)
     e8a:	4798      	blx	r3
			udi_msc_csw_process();
     e8c:	4b09      	ldr	r3, [pc, #36]	; (eb4 <udi_msc_sbc_trans+0x84>)
     e8e:	4798      	blx	r3
			return;
     e90:	e7ef      	b.n	e72 <udi_msc_sbc_trans+0x42>
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	20000154 	.word	0x20000154
     e98:	20000164 	.word	0x20000164
     e9c:	20000184 	.word	0x20000184
     ea0:	00000c95 	.word	0x00000c95
     ea4:	20000159 	.word	0x20000159
     ea8:	2000015a 	.word	0x2000015a
     eac:	00004c4d 	.word	0x00004c4d
     eb0:	00000c49 	.word	0x00000c49
     eb4:	00000be9 	.word	0x00000be9

00000eb8 <udi_msc_cbw_received>:
{
     eb8:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
     eba:	2800      	cmp	r0, #0
     ebc:	d10d      	bne.n	eda <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
     ebe:	291f      	cmp	r1, #31
     ec0:	d104      	bne.n	ecc <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
     ec2:	4b84      	ldr	r3, [pc, #528]	; (10d4 <udi_msc_cbw_received+0x21c>)
     ec4:	4a84      	ldr	r2, [pc, #528]	; (10d8 <udi_msc_cbw_received+0x220>)
     ec6:	6812      	ldr	r2, [r2, #0]
     ec8:	429a      	cmp	r2, r3
     eca:	d007      	beq.n	edc <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
     ecc:	2201      	movs	r2, #1
     ece:	4b83      	ldr	r3, [pc, #524]	; (10dc <udi_msc_cbw_received+0x224>)
     ed0:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
     ed2:	4b83      	ldr	r3, [pc, #524]	; (10e0 <udi_msc_cbw_received+0x228>)
     ed4:	4798      	blx	r3
		udi_msc_csw_invalid();
     ed6:	4b83      	ldr	r3, [pc, #524]	; (10e4 <udi_msc_cbw_received+0x22c>)
     ed8:	4798      	blx	r3
}
     eda:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
     edc:	4b7e      	ldr	r3, [pc, #504]	; (10d8 <udi_msc_cbw_received+0x220>)
     ede:	7b58      	ldrb	r0, [r3, #13]
     ee0:	220f      	movs	r2, #15
     ee2:	4010      	ands	r0, r2
     ee4:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
     ee6:	4b80      	ldr	r3, [pc, #512]	; (10e8 <udi_msc_cbw_received+0x230>)
     ee8:	781b      	ldrb	r3, [r3, #0]
     eea:	4283      	cmp	r3, r0
     eec:	d30b      	bcc.n	f06 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
     eee:	4b7a      	ldr	r3, [pc, #488]	; (10d8 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
     ef0:	4a7e      	ldr	r2, [pc, #504]	; (10ec <udi_msc_cbw_received+0x234>)
     ef2:	6899      	ldr	r1, [r3, #8]
     ef4:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
     ef6:	7bda      	ldrb	r2, [r3, #15]
     ef8:	2a5a      	cmp	r2, #90	; 0x5a
     efa:	d900      	bls.n	efe <udi_msc_cbw_received+0x46>
     efc:	e0d2      	b.n	10a4 <udi_msc_cbw_received+0x1ec>
     efe:	0093      	lsls	r3, r2, #2
     f00:	4a7b      	ldr	r2, [pc, #492]	; (10f0 <udi_msc_cbw_received+0x238>)
     f02:	58d3      	ldr	r3, [r2, r3]
     f04:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
     f06:	4b7b      	ldr	r3, [pc, #492]	; (10f4 <udi_msc_cbw_received+0x23c>)
     f08:	4798      	blx	r3
		udi_msc_csw_process();
     f0a:	4b7b      	ldr	r3, [pc, #492]	; (10f8 <udi_msc_cbw_received+0x240>)
     f0c:	4798      	blx	r3
		return;
     f0e:	e7e4      	b.n	eda <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
     f10:	4b71      	ldr	r3, [pc, #452]	; (10d8 <udi_msc_cbw_received+0x220>)
     f12:	7cda      	ldrb	r2, [r3, #19]
     f14:	1c13      	adds	r3, r2, #0
     f16:	2a12      	cmp	r2, #18
     f18:	d900      	bls.n	f1c <udi_msc_cbw_received+0x64>
     f1a:	2312      	movs	r3, #18
     f1c:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
     f1e:	2180      	movs	r1, #128	; 0x80
     f20:	0020      	movs	r0, r4
     f22:	4b76      	ldr	r3, [pc, #472]	; (10fc <udi_msc_cbw_received+0x244>)
     f24:	4798      	blx	r3
     f26:	2800      	cmp	r0, #0
     f28:	d0d7      	beq.n	eda <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
     f2a:	0021      	movs	r1, r4
     f2c:	4874      	ldr	r0, [pc, #464]	; (1100 <udi_msc_cbw_received+0x248>)
     f2e:	4b75      	ldr	r3, [pc, #468]	; (1104 <udi_msc_cbw_received+0x24c>)
     f30:	4798      	blx	r3
     f32:	e7d2      	b.n	eda <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
     f34:	4b68      	ldr	r3, [pc, #416]	; (10d8 <udi_msc_cbw_received+0x220>)
     f36:	7cdb      	ldrb	r3, [r3, #19]
     f38:	1c1a      	adds	r2, r3, #0
     f3a:	2b24      	cmp	r3, #36	; 0x24
     f3c:	d900      	bls.n	f40 <udi_msc_cbw_received+0x88>
     f3e:	2224      	movs	r2, #36	; 0x24
     f40:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
     f42:	2180      	movs	r1, #128	; 0x80
     f44:	0020      	movs	r0, r4
     f46:	4b6d      	ldr	r3, [pc, #436]	; (10fc <udi_msc_cbw_received+0x244>)
     f48:	4798      	blx	r3
     f4a:	2800      	cmp	r0, #0
     f4c:	d0c5      	beq.n	eda <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
     f4e:	4b62      	ldr	r3, [pc, #392]	; (10d8 <udi_msc_cbw_received+0x220>)
     f50:	7c1b      	ldrb	r3, [r3, #16]
     f52:	079b      	lsls	r3, r3, #30
     f54:	d103      	bne.n	f5e <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
     f56:	4b60      	ldr	r3, [pc, #384]	; (10d8 <udi_msc_cbw_received+0x220>)
     f58:	7c5d      	ldrb	r5, [r3, #17]
     f5a:	2d00      	cmp	r5, #0
     f5c:	d004      	beq.n	f68 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
     f5e:	4b65      	ldr	r3, [pc, #404]	; (10f4 <udi_msc_cbw_received+0x23c>)
     f60:	4798      	blx	r3
		udi_msc_csw_process();
     f62:	4b65      	ldr	r3, [pc, #404]	; (10f8 <udi_msc_cbw_received+0x240>)
     f64:	4798      	blx	r3
     f66:	e7b8      	b.n	eda <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
     f68:	4b5b      	ldr	r3, [pc, #364]	; (10d8 <udi_msc_cbw_received+0x220>)
     f6a:	7b58      	ldrb	r0, [r3, #13]
     f6c:	4b66      	ldr	r3, [pc, #408]	; (1108 <udi_msc_cbw_received+0x250>)
     f6e:	4798      	blx	r3
     f70:	2380      	movs	r3, #128	; 0x80
     f72:	2800      	cmp	r0, #0
     f74:	d100      	bne.n	f78 <udi_msc_cbw_received+0xc0>
     f76:	002b      	movs	r3, r5
     f78:	4e64      	ldr	r6, [pc, #400]	; (110c <udi_msc_cbw_received+0x254>)
     f7a:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
     f7c:	4b56      	ldr	r3, [pc, #344]	; (10d8 <udi_msc_cbw_received+0x220>)
     f7e:	7b58      	ldrb	r0, [r3, #13]
     f80:	4b63      	ldr	r3, [pc, #396]	; (1110 <udi_msc_cbw_received+0x258>)
     f82:	4798      	blx	r3
     f84:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
     f86:	0030      	movs	r0, r6
     f88:	3010      	adds	r0, #16
     f8a:	3101      	adds	r1, #1
     f8c:	2210      	movs	r2, #16
     f8e:	4b61      	ldr	r3, [pc, #388]	; (1114 <udi_msc_cbw_received+0x25c>)
     f90:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
     f92:	7c33      	ldrb	r3, [r6, #16]
     f94:	2b00      	cmp	r3, #0
     f96:	d100      	bne.n	f9a <udi_msc_cbw_received+0xe2>
     f98:	e08e      	b.n	10b8 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     f9a:	2b22      	cmp	r3, #34	; 0x22
     f9c:	d100      	bne.n	fa0 <udi_msc_cbw_received+0xe8>
     f9e:	e08a      	b.n	10b6 <udi_msc_cbw_received+0x1fe>
     fa0:	495a      	ldr	r1, [pc, #360]	; (110c <udi_msc_cbw_received+0x254>)
		i++;
     fa2:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
     fa4:	7c4a      	ldrb	r2, [r1, #17]
     fa6:	2a00      	cmp	r2, #0
     fa8:	d100      	bne.n	fac <udi_msc_cbw_received+0xf4>
     faa:	e085      	b.n	10b8 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
     fac:	2a22      	cmp	r2, #34	; 0x22
     fae:	d100      	bne.n	fb2 <udi_msc_cbw_received+0xfa>
     fb0:	e082      	b.n	10b8 <udi_msc_cbw_received+0x200>
		i++;
     fb2:	3301      	adds	r3, #1
     fb4:	b2db      	uxtb	r3, r3
     fb6:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
     fb8:	2b10      	cmp	r3, #16
     fba:	d1f3      	bne.n	fa4 <udi_msc_cbw_received+0xec>
     fbc:	e084      	b.n	10c8 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
     fbe:	2000      	movs	r0, #0
     fc0:	4b55      	ldr	r3, [pc, #340]	; (1118 <udi_msc_cbw_received+0x260>)
     fc2:	4798      	blx	r3
		break;
     fc4:	e789      	b.n	eda <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
     fc6:	2001      	movs	r0, #1
     fc8:	4b53      	ldr	r3, [pc, #332]	; (1118 <udi_msc_cbw_received+0x260>)
     fca:	4798      	blx	r3
		break;
     fcc:	e785      	b.n	eda <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
     fce:	4b53      	ldr	r3, [pc, #332]	; (111c <udi_msc_cbw_received+0x264>)
     fd0:	4798      	blx	r3
     fd2:	2802      	cmp	r0, #2
     fd4:	d009      	beq.n	fea <udi_msc_cbw_received+0x132>
     fd6:	2803      	cmp	r0, #3
     fd8:	d004      	beq.n	fe4 <udi_msc_cbw_received+0x12c>
     fda:	2800      	cmp	r0, #0
     fdc:	d008      	beq.n	ff0 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
     fde:	4b50      	ldr	r3, [pc, #320]	; (1120 <udi_msc_cbw_received+0x268>)
     fe0:	4798      	blx	r3
     fe2:	e007      	b.n	ff4 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
     fe4:	4b4f      	ldr	r3, [pc, #316]	; (1124 <udi_msc_cbw_received+0x26c>)
     fe6:	4798      	blx	r3
     fe8:	e004      	b.n	ff4 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
     fea:	4b4f      	ldr	r3, [pc, #316]	; (1128 <udi_msc_cbw_received+0x270>)
     fec:	4798      	blx	r3
     fee:	e001      	b.n	ff4 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
     ff0:	4b4e      	ldr	r3, [pc, #312]	; (112c <udi_msc_cbw_received+0x274>)
     ff2:	4798      	blx	r3
	udi_msc_csw_process();
     ff4:	4b40      	ldr	r3, [pc, #256]	; (10f8 <udi_msc_cbw_received+0x240>)
     ff6:	4798      	blx	r3
     ff8:	e76f      	b.n	eda <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
     ffa:	2180      	movs	r1, #128	; 0x80
     ffc:	2008      	movs	r0, #8
     ffe:	4b3f      	ldr	r3, [pc, #252]	; (10fc <udi_msc_cbw_received+0x244>)
    1000:	4798      	blx	r3
    1002:	2800      	cmp	r0, #0
    1004:	d100      	bne.n	1008 <udi_msc_cbw_received+0x150>
    1006:	e768      	b.n	eda <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1008:	4b33      	ldr	r3, [pc, #204]	; (10d8 <udi_msc_cbw_received+0x220>)
    100a:	7b58      	ldrb	r0, [r3, #13]
    100c:	4948      	ldr	r1, [pc, #288]	; (1130 <udi_msc_cbw_received+0x278>)
    100e:	4b49      	ldr	r3, [pc, #292]	; (1134 <udi_msc_cbw_received+0x27c>)
    1010:	4798      	blx	r3
    1012:	2802      	cmp	r0, #2
    1014:	d00d      	beq.n	1032 <udi_msc_cbw_received+0x17a>
    1016:	2803      	cmp	r0, #3
    1018:	d006      	beq.n	1028 <udi_msc_cbw_received+0x170>
    101a:	2800      	cmp	r0, #0
    101c:	d00e      	beq.n	103c <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    101e:	4b40      	ldr	r3, [pc, #256]	; (1120 <udi_msc_cbw_received+0x268>)
    1020:	4798      	blx	r3
		udi_msc_csw_process();
    1022:	4b35      	ldr	r3, [pc, #212]	; (10f8 <udi_msc_cbw_received+0x240>)
    1024:	4798      	blx	r3
    1026:	e758      	b.n	eda <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1028:	4b3e      	ldr	r3, [pc, #248]	; (1124 <udi_msc_cbw_received+0x26c>)
    102a:	4798      	blx	r3
		udi_msc_csw_process();
    102c:	4b32      	ldr	r3, [pc, #200]	; (10f8 <udi_msc_cbw_received+0x240>)
    102e:	4798      	blx	r3
    1030:	e753      	b.n	eda <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    1032:	4b3d      	ldr	r3, [pc, #244]	; (1128 <udi_msc_cbw_received+0x270>)
    1034:	4798      	blx	r3
		udi_msc_csw_process();
    1036:	4b30      	ldr	r3, [pc, #192]	; (10f8 <udi_msc_cbw_received+0x240>)
    1038:	4798      	blx	r3
    103a:	e74e      	b.n	eda <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    103c:	483c      	ldr	r0, [pc, #240]	; (1130 <udi_msc_cbw_received+0x278>)
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	029b      	lsls	r3, r3, #10
    1042:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1044:	6803      	ldr	r3, [r0, #0]
    1046:	ba1b      	rev	r3, r3
    1048:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    104a:	2108      	movs	r1, #8
    104c:	4b2d      	ldr	r3, [pc, #180]	; (1104 <udi_msc_cbw_received+0x24c>)
    104e:	4798      	blx	r3
    1050:	e743      	b.n	eda <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    1052:	4b21      	ldr	r3, [pc, #132]	; (10d8 <udi_msc_cbw_received+0x220>)
    1054:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1056:	079a      	lsls	r2, r3, #30
    1058:	d404      	bmi.n	1064 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    105a:	4b34      	ldr	r3, [pc, #208]	; (112c <udi_msc_cbw_received+0x274>)
    105c:	4798      	blx	r3
	udi_msc_csw_process();
    105e:	4b26      	ldr	r3, [pc, #152]	; (10f8 <udi_msc_cbw_received+0x240>)
    1060:	4798      	blx	r3
    1062:	e73a      	b.n	eda <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1064:	2101      	movs	r1, #1
    1066:	404b      	eors	r3, r1
    1068:	2101      	movs	r1, #1
    106a:	4019      	ands	r1, r3
    106c:	4b32      	ldr	r3, [pc, #200]	; (1138 <udi_msc_cbw_received+0x280>)
    106e:	4798      	blx	r3
    1070:	e7f3      	b.n	105a <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    1072:	4b19      	ldr	r3, [pc, #100]	; (10d8 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1074:	7cdb      	ldrb	r3, [r3, #19]
    1076:	2b00      	cmp	r3, #0
    1078:	d004      	beq.n	1084 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    107a:	4b1e      	ldr	r3, [pc, #120]	; (10f4 <udi_msc_cbw_received+0x23c>)
    107c:	4798      	blx	r3
	udi_msc_csw_process();
    107e:	4b1e      	ldr	r3, [pc, #120]	; (10f8 <udi_msc_cbw_received+0x240>)
    1080:	4798      	blx	r3
    1082:	e72a      	b.n	eda <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1084:	4b29      	ldr	r3, [pc, #164]	; (112c <udi_msc_cbw_received+0x274>)
    1086:	4798      	blx	r3
    1088:	e7f9      	b.n	107e <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    108a:	4b28      	ldr	r3, [pc, #160]	; (112c <udi_msc_cbw_received+0x274>)
    108c:	4798      	blx	r3
		udi_msc_csw_process();
    108e:	4b1a      	ldr	r3, [pc, #104]	; (10f8 <udi_msc_cbw_received+0x240>)
    1090:	4798      	blx	r3
		break;
    1092:	e722      	b.n	eda <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    1094:	2001      	movs	r0, #1
    1096:	4b29      	ldr	r3, [pc, #164]	; (113c <udi_msc_cbw_received+0x284>)
    1098:	4798      	blx	r3
		break;
    109a:	e71e      	b.n	eda <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    109c:	2000      	movs	r0, #0
    109e:	4b27      	ldr	r3, [pc, #156]	; (113c <udi_msc_cbw_received+0x284>)
    10a0:	4798      	blx	r3
		break;
    10a2:	e71a      	b.n	eda <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    10a4:	2200      	movs	r2, #0
    10a6:	2180      	movs	r1, #128	; 0x80
    10a8:	0189      	lsls	r1, r1, #6
    10aa:	2005      	movs	r0, #5
    10ac:	4b24      	ldr	r3, [pc, #144]	; (1140 <udi_msc_cbw_received+0x288>)
    10ae:	4798      	blx	r3
		udi_msc_csw_process();
    10b0:	4b11      	ldr	r3, [pc, #68]	; (10f8 <udi_msc_cbw_received+0x240>)
    10b2:	4798      	blx	r3
		break;
    10b4:	e711      	b.n	eda <udi_msc_cbw_received+0x22>
	i = 0;
    10b6:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    10b8:	4814      	ldr	r0, [pc, #80]	; (110c <udi_msc_cbw_received+0x254>)
    10ba:	2120      	movs	r1, #32
    10bc:	18c2      	adds	r2, r0, r3
    10be:	7411      	strb	r1, [r2, #16]
		i++;
    10c0:	3301      	adds	r3, #1
    10c2:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    10c4:	2b10      	cmp	r3, #16
    10c6:	d1f9      	bne.n	10bc <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    10c8:	0021      	movs	r1, r4
    10ca:	4810      	ldr	r0, [pc, #64]	; (110c <udi_msc_cbw_received+0x254>)
    10cc:	4b0d      	ldr	r3, [pc, #52]	; (1104 <udi_msc_cbw_received+0x24c>)
    10ce:	4798      	blx	r3
    10d0:	e703      	b.n	eda <udi_msc_cbw_received+0x22>
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	43425355 	.word	0x43425355
    10d8:	20000164 	.word	0x20000164
    10dc:	20000158 	.word	0x20000158
    10e0:	00000b91 	.word	0x00000b91
    10e4:	00000bbd 	.word	0x00000bbd
    10e8:	20000188 	.word	0x20000188
    10ec:	20000048 	.word	0x20000048
    10f0:	00005d6c 	.word	0x00005d6c
    10f4:	00000c81 	.word	0x00000c81
    10f8:	00000be9 	.word	0x00000be9
    10fc:	00000c95 	.word	0x00000c95
    1100:	2000018c 	.word	0x2000018c
    1104:	00000ce1 	.word	0x00000ce1
    1108:	00004c6d 	.word	0x00004c6d
    110c:	20000058 	.word	0x20000058
    1110:	00004c8d 	.word	0x00004c8d
    1114:	00005cad 	.word	0x00005cad
    1118:	00000d81 	.word	0x00000d81
    111c:	00004be5 	.word	0x00004be5
    1120:	00000ccd 	.word	0x00000ccd
    1124:	00000d19 	.word	0x00000d19
    1128:	00000d2d 	.word	0x00000d2d
    112c:	00000d41 	.word	0x00000d41
    1130:	2000015c 	.word	0x2000015c
    1134:	00004c01 	.word	0x00004c01
    1138:	00004c21 	.word	0x00004c21
    113c:	00000e31 	.word	0x00000e31
    1140:	00000c49 	.word	0x00000c49

00001144 <udi_msc_setup>:
{
    1144:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    1146:	4b20      	ldr	r3, [pc, #128]	; (11c8 <udi_msc_setup+0x84>)
    1148:	781a      	ldrb	r2, [r3, #0]
    114a:	b253      	sxtb	r3, r2
    114c:	2b00      	cmp	r3, #0
    114e:	db05      	blt.n	115c <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1150:	2360      	movs	r3, #96	; 0x60
    1152:	4013      	ands	r3, r2
	return false;	// Not supported request
    1154:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1156:	2b20      	cmp	r3, #32
    1158:	d018      	beq.n	118c <udi_msc_setup+0x48>
}
    115a:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    115c:	2360      	movs	r3, #96	; 0x60
    115e:	4013      	ands	r3, r2
	return false;	// Not supported request
    1160:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1162:	2b20      	cmp	r3, #32
    1164:	d1f9      	bne.n	115a <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1166:	4b18      	ldr	r3, [pc, #96]	; (11c8 <udi_msc_setup+0x84>)
    1168:	785b      	ldrb	r3, [r3, #1]
    116a:	2bfe      	cmp	r3, #254	; 0xfe
    116c:	d127      	bne.n	11be <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    116e:	4b16      	ldr	r3, [pc, #88]	; (11c8 <udi_msc_setup+0x84>)
    1170:	88db      	ldrh	r3, [r3, #6]
    1172:	2b01      	cmp	r3, #1
    1174:	d1f1      	bne.n	115a <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1176:	4b14      	ldr	r3, [pc, #80]	; (11c8 <udi_msc_setup+0x84>)
    1178:	885b      	ldrh	r3, [r3, #2]
    117a:	2b00      	cmp	r3, #0
    117c:	d1ed      	bne.n	115a <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    117e:	4b12      	ldr	r3, [pc, #72]	; (11c8 <udi_msc_setup+0x84>)
    1180:	4a12      	ldr	r2, [pc, #72]	; (11cc <udi_msc_setup+0x88>)
    1182:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1184:	2201      	movs	r2, #1
    1186:	819a      	strh	r2, [r3, #12]
				return true;
    1188:	3001      	adds	r0, #1
    118a:	e7e6      	b.n	115a <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    118c:	4b0e      	ldr	r3, [pc, #56]	; (11c8 <udi_msc_setup+0x84>)
    118e:	785b      	ldrb	r3, [r3, #1]
    1190:	2bff      	cmp	r3, #255	; 0xff
    1192:	d116      	bne.n	11c2 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1194:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <udi_msc_setup+0x84>)
    1196:	88db      	ldrh	r3, [r3, #6]
    1198:	2b00      	cmp	r3, #0
    119a:	d1de      	bne.n	115a <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    119c:	4b0a      	ldr	r3, [pc, #40]	; (11c8 <udi_msc_setup+0x84>)
    119e:	885b      	ldrh	r3, [r3, #2]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d1da      	bne.n	115a <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    11a4:	4a0a      	ldr	r2, [pc, #40]	; (11d0 <udi_msc_setup+0x8c>)
    11a6:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    11a8:	4a0a      	ldr	r2, [pc, #40]	; (11d4 <udi_msc_setup+0x90>)
    11aa:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    11ac:	3002      	adds	r0, #2
    11ae:	4c0a      	ldr	r4, [pc, #40]	; (11d8 <udi_msc_setup+0x94>)
    11b0:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    11b2:	2081      	movs	r0, #129	; 0x81
    11b4:	47a0      	blx	r4
				udi_msc_cbw_wait();
    11b6:	4b09      	ldr	r3, [pc, #36]	; (11dc <udi_msc_setup+0x98>)
    11b8:	4798      	blx	r3
				return true;
    11ba:	2001      	movs	r0, #1
    11bc:	e7cd      	b.n	115a <udi_msc_setup+0x16>
	return false;	// Not supported request
    11be:	2000      	movs	r0, #0
    11c0:	e7cb      	b.n	115a <udi_msc_setup+0x16>
    11c2:	2000      	movs	r0, #0
    11c4:	e7c9      	b.n	115a <udi_msc_setup+0x16>
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	200004f4 	.word	0x200004f4
    11cc:	20000188 	.word	0x20000188
    11d0:	20000158 	.word	0x20000158
    11d4:	2000015a 	.word	0x2000015a
    11d8:	00002099 	.word	0x00002099
    11dc:	00000aa1 	.word	0x00000aa1

000011e0 <udi_msc_process_trans>:
{
    11e0:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    11e2:	4b1e      	ldr	r3, [pc, #120]	; (125c <udi_msc_process_trans+0x7c>)
    11e4:	781c      	ldrb	r4, [r3, #0]
    11e6:	2c00      	cmp	r4, #0
    11e8:	d030      	beq.n	124c <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    11ea:	2300      	movs	r3, #0
    11ec:	4a1b      	ldr	r2, [pc, #108]	; (125c <udi_msc_process_trans+0x7c>)
    11ee:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    11f0:	4a1b      	ldr	r2, [pc, #108]	; (1260 <udi_msc_process_trans+0x80>)
    11f2:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    11f4:	4b1b      	ldr	r3, [pc, #108]	; (1264 <udi_msc_process_trans+0x84>)
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d015      	beq.n	1228 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    11fc:	4b1a      	ldr	r3, [pc, #104]	; (1268 <udi_msc_process_trans+0x88>)
    11fe:	881a      	ldrh	r2, [r3, #0]
    1200:	4b1a      	ldr	r3, [pc, #104]	; (126c <udi_msc_process_trans+0x8c>)
    1202:	6819      	ldr	r1, [r3, #0]
    1204:	4b1a      	ldr	r3, [pc, #104]	; (1270 <udi_msc_process_trans+0x90>)
    1206:	7b58      	ldrb	r0, [r3, #13]
    1208:	4b1a      	ldr	r3, [pc, #104]	; (1274 <udi_msc_process_trans+0x94>)
    120a:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    120c:	4b14      	ldr	r3, [pc, #80]	; (1260 <udi_msc_process_trans+0x80>)
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	b2db      	uxtb	r3, r3
    1212:	2b00      	cmp	r3, #0
    1214:	d111      	bne.n	123a <udi_msc_process_trans+0x5a>
	switch (status) {
    1216:	2802      	cmp	r0, #2
    1218:	d01d      	beq.n	1256 <udi_msc_process_trans+0x76>
    121a:	2803      	cmp	r0, #3
    121c:	d018      	beq.n	1250 <udi_msc_process_trans+0x70>
    121e:	2800      	cmp	r0, #0
    1220:	d010      	beq.n	1244 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1222:	4b15      	ldr	r3, [pc, #84]	; (1278 <udi_msc_process_trans+0x98>)
    1224:	4798      	blx	r3
		break;
    1226:	e00f      	b.n	1248 <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1228:	4b0f      	ldr	r3, [pc, #60]	; (1268 <udi_msc_process_trans+0x88>)
    122a:	881a      	ldrh	r2, [r3, #0]
    122c:	4b0f      	ldr	r3, [pc, #60]	; (126c <udi_msc_process_trans+0x8c>)
    122e:	6819      	ldr	r1, [r3, #0]
    1230:	4b0f      	ldr	r3, [pc, #60]	; (1270 <udi_msc_process_trans+0x90>)
    1232:	7b58      	ldrb	r0, [r3, #13]
    1234:	4b11      	ldr	r3, [pc, #68]	; (127c <udi_msc_process_trans+0x9c>)
    1236:	4798      	blx	r3
    1238:	e7e8      	b.n	120c <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    123a:	2100      	movs	r1, #0
    123c:	4a08      	ldr	r2, [pc, #32]	; (1260 <udi_msc_process_trans+0x80>)
    123e:	7011      	strb	r1, [r2, #0]
		return true;
    1240:	001c      	movs	r4, r3
    1242:	e003      	b.n	124c <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1244:	4b0e      	ldr	r3, [pc, #56]	; (1280 <udi_msc_process_trans+0xa0>)
    1246:	4798      	blx	r3
	udi_msc_csw_process();
    1248:	4b0e      	ldr	r3, [pc, #56]	; (1284 <udi_msc_process_trans+0xa4>)
    124a:	4798      	blx	r3
}
    124c:	0020      	movs	r0, r4
    124e:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1250:	4b0d      	ldr	r3, [pc, #52]	; (1288 <udi_msc_process_trans+0xa8>)
    1252:	4798      	blx	r3
		break;
    1254:	e7f8      	b.n	1248 <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    1256:	4b0d      	ldr	r3, [pc, #52]	; (128c <udi_msc_process_trans+0xac>)
    1258:	4798      	blx	r3
		break;
    125a:	e7f5      	b.n	1248 <udi_msc_process_trans+0x68>
    125c:	2000015a 	.word	0x2000015a
    1260:	20000045 	.word	0x20000045
    1264:	20000159 	.word	0x20000159
    1268:	20000184 	.word	0x20000184
    126c:	20000154 	.word	0x20000154
    1270:	20000164 	.word	0x20000164
    1274:	00004ca5 	.word	0x00004ca5
    1278:	00000ccd 	.word	0x00000ccd
    127c:	00004cc9 	.word	0x00004cc9
    1280:	00000d41 	.word	0x00000d41
    1284:	00000be9 	.word	0x00000be9
    1288:	00000d19 	.word	0x00000d19
    128c:	00000d2d 	.word	0x00000d2d

00001290 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1290:	b530      	push	{r4, r5, lr}
    1292:	b083      	sub	sp, #12
    1294:	0005      	movs	r5, r0
    1296:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    1298:	4a1d      	ldr	r2, [pc, #116]	; (1310 <udi_msc_trans_block+0x80>)
    129a:	7810      	ldrb	r0, [r2, #0]
    129c:	b2c0      	uxtb	r0, r0
    129e:	2800      	cmp	r0, #0
    12a0:	d013      	beq.n	12ca <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    12a2:	2000      	movs	r0, #0
    12a4:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    12a6:	3081      	adds	r0, #129	; 0x81
    12a8:	2d00      	cmp	r5, #0
    12aa:	d100      	bne.n	12ae <udi_msc_trans_block+0x1e>
    12ac:	387f      	subs	r0, #127	; 0x7f
    12ae:	2b00      	cmp	r3, #0
    12b0:	d00d      	beq.n	12ce <udi_msc_trans_block+0x3e>
    12b2:	9300      	str	r3, [sp, #0]
    12b4:	0023      	movs	r3, r4
    12b6:	000a      	movs	r2, r1
    12b8:	2100      	movs	r1, #0
    12ba:	4d16      	ldr	r5, [pc, #88]	; (1314 <udi_msc_trans_block+0x84>)
    12bc:	47a8      	blx	r5
    12be:	2800      	cmp	r0, #0
    12c0:	d020      	beq.n	1304 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    12c2:	4b15      	ldr	r3, [pc, #84]	; (1318 <udi_msc_trans_block+0x88>)
    12c4:	689a      	ldr	r2, [r3, #8]
    12c6:	1b14      	subs	r4, r2, r4
    12c8:	609c      	str	r4, [r3, #8]
	return true;
}
    12ca:	b003      	add	sp, #12
    12cc:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    12ce:	4b13      	ldr	r3, [pc, #76]	; (131c <udi_msc_trans_block+0x8c>)
    12d0:	9300      	str	r3, [sp, #0]
    12d2:	0023      	movs	r3, r4
    12d4:	000a      	movs	r2, r1
    12d6:	2100      	movs	r1, #0
    12d8:	4d0e      	ldr	r5, [pc, #56]	; (1314 <udi_msc_trans_block+0x84>)
    12da:	47a8      	blx	r5
    12dc:	2800      	cmp	r0, #0
    12de:	d011      	beq.n	1304 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    12e0:	4a0b      	ldr	r2, [pc, #44]	; (1310 <udi_msc_trans_block+0x80>)
    12e2:	7813      	ldrb	r3, [r2, #0]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d0fc      	beq.n	12e2 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    12e8:	4b0d      	ldr	r3, [pc, #52]	; (1320 <udi_msc_trans_block+0x90>)
    12ea:	781b      	ldrb	r3, [r3, #0]
			return false;
    12ec:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    12ee:	2b00      	cmp	r3, #0
    12f0:	d1eb      	bne.n	12ca <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    12f2:	4b09      	ldr	r3, [pc, #36]	; (1318 <udi_msc_trans_block+0x88>)
    12f4:	689a      	ldr	r2, [r3, #8]
    12f6:	1b14      	subs	r4, r2, r4
    12f8:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    12fa:	4b09      	ldr	r3, [pc, #36]	; (1320 <udi_msc_trans_block+0x90>)
    12fc:	7818      	ldrb	r0, [r3, #0]
    12fe:	2301      	movs	r3, #1
    1300:	4058      	eors	r0, r3
    1302:	e7e2      	b.n	12ca <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1304:	2201      	movs	r2, #1
    1306:	4b02      	ldr	r3, [pc, #8]	; (1310 <udi_msc_trans_block+0x80>)
    1308:	701a      	strb	r2, [r3, #0]
		return false;
    130a:	2000      	movs	r0, #0
    130c:	e7dd      	b.n	12ca <udi_msc_trans_block+0x3a>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	20000044 	.word	0x20000044
    1314:	00002415 	.word	0x00002415
    1318:	20000048 	.word	0x20000048
    131c:	00000a85 	.word	0x00000a85
    1320:	200002c9 	.word	0x200002c9

00001324 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1324:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1326:	4b11      	ldr	r3, [pc, #68]	; (136c <udc_next_desc_in_iface+0x48>)
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    132c:	7894      	ldrb	r4, [r2, #2]
    132e:	78d3      	ldrb	r3, [r2, #3]
    1330:	021b      	lsls	r3, r3, #8
    1332:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1334:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1336:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1338:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    133a:	4290      	cmp	r0, r2
    133c:	d210      	bcs.n	1360 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    133e:	7843      	ldrb	r3, [r0, #1]
    1340:	2b04      	cmp	r3, #4
    1342:	d00f      	beq.n	1364 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1344:	428b      	cmp	r3, r1
    1346:	d00a      	beq.n	135e <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1348:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    134a:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    134c:	4290      	cmp	r0, r2
    134e:	d205      	bcs.n	135c <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1350:	7843      	ldrb	r3, [r0, #1]
    1352:	2b04      	cmp	r3, #4
    1354:	d008      	beq.n	1368 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1356:	428b      	cmp	r3, r1
    1358:	d1f6      	bne.n	1348 <udc_next_desc_in_iface+0x24>
    135a:	e000      	b.n	135e <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    135c:	2000      	movs	r0, #0
}
    135e:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1360:	2000      	movs	r0, #0
    1362:	e7fc      	b.n	135e <udc_next_desc_in_iface+0x3a>
    1364:	2000      	movs	r0, #0
    1366:	e7fa      	b.n	135e <udc_next_desc_in_iface+0x3a>
    1368:	2000      	movs	r0, #0
    136a:	e7f8      	b.n	135e <udc_next_desc_in_iface+0x3a>
    136c:	200001ac 	.word	0x200001ac

00001370 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1370:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1372:	4b03      	ldr	r3, [pc, #12]	; (1380 <udc_valid_address+0x10>)
    1374:	885b      	ldrh	r3, [r3, #2]
    1376:	207f      	movs	r0, #127	; 0x7f
    1378:	4018      	ands	r0, r3
    137a:	4b02      	ldr	r3, [pc, #8]	; (1384 <udc_valid_address+0x14>)
    137c:	4798      	blx	r3
}
    137e:	bd10      	pop	{r4, pc}
    1380:	200004f4 	.word	0x200004f4
    1384:	000025ed 	.word	0x000025ed

00001388 <udc_update_iface_desc>:
{
    1388:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    138a:	4b19      	ldr	r3, [pc, #100]	; (13f0 <udc_update_iface_desc+0x68>)
    138c:	781b      	ldrb	r3, [r3, #0]
		return false;
    138e:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1390:	2b00      	cmp	r3, #0
    1392:	d029      	beq.n	13e8 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1394:	4b17      	ldr	r3, [pc, #92]	; (13f4 <udc_update_iface_desc+0x6c>)
    1396:	681b      	ldr	r3, [r3, #0]
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	791c      	ldrb	r4, [r3, #4]
    139c:	4284      	cmp	r4, r0
    139e:	d923      	bls.n	13e8 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    13a0:	4a15      	ldr	r2, [pc, #84]	; (13f8 <udc_update_iface_desc+0x70>)
    13a2:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    13a4:	789a      	ldrb	r2, [r3, #2]
    13a6:	78dc      	ldrb	r4, [r3, #3]
    13a8:	0224      	lsls	r4, r4, #8
    13aa:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    13ac:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    13ae:	42a3      	cmp	r3, r4
    13b0:	d21c      	bcs.n	13ec <udc_update_iface_desc+0x64>
    13b2:	2500      	movs	r5, #0
    13b4:	2601      	movs	r6, #1
    13b6:	e007      	b.n	13c8 <udc_update_iface_desc+0x40>
    13b8:	4a0f      	ldr	r2, [pc, #60]	; (13f8 <udc_update_iface_desc+0x70>)
    13ba:	6013      	str	r3, [r2, #0]
    13bc:	e00f      	b.n	13de <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    13be:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    13c0:	189b      	adds	r3, r3, r2
    13c2:	0035      	movs	r5, r6
	while (ptr_end_desc >
    13c4:	42a3      	cmp	r3, r4
    13c6:	d20c      	bcs.n	13e2 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    13c8:	785a      	ldrb	r2, [r3, #1]
    13ca:	2a04      	cmp	r2, #4
    13cc:	d1f7      	bne.n	13be <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    13ce:	789a      	ldrb	r2, [r3, #2]
    13d0:	4282      	cmp	r2, r0
    13d2:	d1f4      	bne.n	13be <udc_update_iface_desc+0x36>
    13d4:	78da      	ldrb	r2, [r3, #3]
    13d6:	428a      	cmp	r2, r1
    13d8:	d1f1      	bne.n	13be <udc_update_iface_desc+0x36>
    13da:	2d00      	cmp	r5, #0
    13dc:	d1ec      	bne.n	13b8 <udc_update_iface_desc+0x30>
				return true; // Interface found
    13de:	2201      	movs	r2, #1
    13e0:	e002      	b.n	13e8 <udc_update_iface_desc+0x60>
    13e2:	4a05      	ldr	r2, [pc, #20]	; (13f8 <udc_update_iface_desc+0x70>)
    13e4:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    13e6:	2200      	movs	r2, #0
}
    13e8:	0010      	movs	r0, r2
    13ea:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    13ec:	2200      	movs	r2, #0
    13ee:	e7fb      	b.n	13e8 <udc_update_iface_desc+0x60>
    13f0:	200001a8 	.word	0x200001a8
    13f4:	200001ac 	.word	0x200001ac
    13f8:	200001b0 	.word	0x200001b0

000013fc <udc_iface_disable>:
{
    13fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fe:	46c6      	mov	lr, r8
    1400:	b500      	push	{lr}
    1402:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1404:	2100      	movs	r1, #0
    1406:	4b13      	ldr	r3, [pc, #76]	; (1454 <udc_iface_disable+0x58>)
    1408:	4798      	blx	r3
    140a:	1e05      	subs	r5, r0, #0
    140c:	d103      	bne.n	1416 <udc_iface_disable+0x1a>
}
    140e:	0028      	movs	r0, r5
    1410:	bc04      	pop	{r2}
    1412:	4690      	mov	r8, r2
    1414:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1416:	4b10      	ldr	r3, [pc, #64]	; (1458 <udc_iface_disable+0x5c>)
    1418:	681b      	ldr	r3, [r3, #0]
    141a:	685b      	ldr	r3, [r3, #4]
    141c:	00a2      	lsls	r2, r4, #2
    141e:	58d3      	ldr	r3, [r2, r3]
    1420:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1422:	68db      	ldr	r3, [r3, #12]
    1424:	4798      	blx	r3
    1426:	0001      	movs	r1, r0
    1428:	0020      	movs	r0, r4
    142a:	4b0a      	ldr	r3, [pc, #40]	; (1454 <udc_iface_disable+0x58>)
    142c:	4798      	blx	r3
    142e:	1e05      	subs	r5, r0, #0
    1430:	d0ed      	beq.n	140e <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1432:	4b0a      	ldr	r3, [pc, #40]	; (145c <udc_iface_disable+0x60>)
    1434:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1436:	4e0a      	ldr	r6, [pc, #40]	; (1460 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1438:	4f0a      	ldr	r7, [pc, #40]	; (1464 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    143a:	2105      	movs	r1, #5
    143c:	0020      	movs	r0, r4
    143e:	47b0      	blx	r6
    1440:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1442:	d002      	beq.n	144a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1444:	7880      	ldrb	r0, [r0, #2]
    1446:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1448:	e7f7      	b.n	143a <udc_iface_disable+0x3e>
	udi_api->disable();
    144a:	4643      	mov	r3, r8
    144c:	685b      	ldr	r3, [r3, #4]
    144e:	4798      	blx	r3
	return true;
    1450:	e7dd      	b.n	140e <udc_iface_disable+0x12>
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	00001389 	.word	0x00001389
    1458:	200001ac 	.word	0x200001ac
    145c:	200001b0 	.word	0x200001b0
    1460:	00001325 	.word	0x00001325
    1464:	000020d5 	.word	0x000020d5

00001468 <udc_iface_enable>:
{
    1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146a:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    146c:	4b0f      	ldr	r3, [pc, #60]	; (14ac <udc_iface_enable+0x44>)
    146e:	4798      	blx	r3
    1470:	2800      	cmp	r0, #0
    1472:	d019      	beq.n	14a8 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1474:	4b0e      	ldr	r3, [pc, #56]	; (14b0 <udc_iface_enable+0x48>)
    1476:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1478:	4e0e      	ldr	r6, [pc, #56]	; (14b4 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    147a:	4f0f      	ldr	r7, [pc, #60]	; (14b8 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    147c:	2105      	movs	r1, #5
    147e:	0020      	movs	r0, r4
    1480:	47b0      	blx	r6
    1482:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1484:	d009      	beq.n	149a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1486:	7903      	ldrb	r3, [r0, #4]
    1488:	7942      	ldrb	r2, [r0, #5]
    148a:	0212      	lsls	r2, r2, #8
    148c:	431a      	orrs	r2, r3
    148e:	78c1      	ldrb	r1, [r0, #3]
    1490:	7880      	ldrb	r0, [r0, #2]
    1492:	47b8      	blx	r7
    1494:	2800      	cmp	r0, #0
    1496:	d1f1      	bne.n	147c <udc_iface_enable+0x14>
    1498:	e006      	b.n	14a8 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    149a:	4b08      	ldr	r3, [pc, #32]	; (14bc <udc_iface_enable+0x54>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	685b      	ldr	r3, [r3, #4]
    14a0:	00ad      	lsls	r5, r5, #2
    14a2:	58eb      	ldr	r3, [r5, r3]
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	4798      	blx	r3
}
    14a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	00001389 	.word	0x00001389
    14b0:	200001b0 	.word	0x200001b0
    14b4:	00001325 	.word	0x00001325
    14b8:	0000212d 	.word	0x0000212d
    14bc:	200001ac 	.word	0x200001ac

000014c0 <udc_start>:
{
    14c0:	b510      	push	{r4, lr}
	udd_enable();
    14c2:	4b01      	ldr	r3, [pc, #4]	; (14c8 <udc_start+0x8>)
    14c4:	4798      	blx	r3
}
    14c6:	bd10      	pop	{r4, pc}
    14c8:	0000269d 	.word	0x0000269d

000014cc <udc_reset>:
{
    14cc:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    14ce:	4b0e      	ldr	r3, [pc, #56]	; (1508 <udc_reset+0x3c>)
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d011      	beq.n	14fa <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14d6:	4b0d      	ldr	r3, [pc, #52]	; (150c <udc_reset+0x40>)
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    14dc:	791b      	ldrb	r3, [r3, #4]
    14de:	2b00      	cmp	r3, #0
    14e0:	d00b      	beq.n	14fa <udc_reset+0x2e>
    14e2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    14e4:	4e0a      	ldr	r6, [pc, #40]	; (1510 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14e6:	4d09      	ldr	r5, [pc, #36]	; (150c <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    14e8:	0020      	movs	r0, r4
    14ea:	47b0      	blx	r6
				iface_num++) {
    14ec:	3401      	adds	r4, #1
    14ee:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14f0:	682b      	ldr	r3, [r5, #0]
    14f2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    14f4:	791b      	ldrb	r3, [r3, #4]
    14f6:	42a3      	cmp	r3, r4
    14f8:	d8f6      	bhi.n	14e8 <udc_reset+0x1c>
	udc_num_configuration = 0;
    14fa:	2200      	movs	r2, #0
    14fc:	4b02      	ldr	r3, [pc, #8]	; (1508 <udc_reset+0x3c>)
    14fe:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1500:	3201      	adds	r2, #1
    1502:	4b04      	ldr	r3, [pc, #16]	; (1514 <udc_reset+0x48>)
    1504:	801a      	strh	r2, [r3, #0]
}
    1506:	bd70      	pop	{r4, r5, r6, pc}
    1508:	200001a8 	.word	0x200001a8
    150c:	200001ac 	.word	0x200001ac
    1510:	000013fd 	.word	0x000013fd
    1514:	2000019e 	.word	0x2000019e

00001518 <udc_sof_notify>:
{
    1518:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    151a:	4b0e      	ldr	r3, [pc, #56]	; (1554 <udc_sof_notify+0x3c>)
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	2b00      	cmp	r3, #0
    1520:	d017      	beq.n	1552 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1522:	4b0d      	ldr	r3, [pc, #52]	; (1558 <udc_sof_notify+0x40>)
    1524:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1526:	681a      	ldr	r2, [r3, #0]
    1528:	7912      	ldrb	r2, [r2, #4]
    152a:	2a00      	cmp	r2, #0
    152c:	d011      	beq.n	1552 <udc_sof_notify+0x3a>
    152e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1530:	4d09      	ldr	r5, [pc, #36]	; (1558 <udc_sof_notify+0x40>)
    1532:	e006      	b.n	1542 <udc_sof_notify+0x2a>
				iface_num++) {
    1534:	3401      	adds	r4, #1
    1536:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1538:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	7912      	ldrb	r2, [r2, #4]
    153e:	42a2      	cmp	r2, r4
    1540:	d907      	bls.n	1552 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1542:	685b      	ldr	r3, [r3, #4]
    1544:	00a2      	lsls	r2, r4, #2
    1546:	58d3      	ldr	r3, [r2, r3]
    1548:	691b      	ldr	r3, [r3, #16]
    154a:	2b00      	cmp	r3, #0
    154c:	d0f2      	beq.n	1534 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    154e:	4798      	blx	r3
    1550:	e7f0      	b.n	1534 <udc_sof_notify+0x1c>
}
    1552:	bd70      	pop	{r4, r5, r6, pc}
    1554:	200001a8 	.word	0x200001a8
    1558:	200001ac 	.word	0x200001ac

0000155c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    155e:	4bac      	ldr	r3, [pc, #688]	; (1810 <udc_process_setup+0x2b4>)
    1560:	2200      	movs	r2, #0
    1562:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1564:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1566:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	b25a      	sxtb	r2, r3
    156c:	2a00      	cmp	r2, #0
    156e:	db13      	blt.n	1598 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1570:	2260      	movs	r2, #96	; 0x60
    1572:	421a      	tst	r2, r3
    1574:	d100      	bne.n	1578 <udc_process_setup+0x1c>
    1576:	e0d9      	b.n	172c <udc_process_setup+0x1d0>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1578:	4ba5      	ldr	r3, [pc, #660]	; (1810 <udc_process_setup+0x2b4>)
    157a:	781a      	ldrb	r2, [r3, #0]
    157c:	231f      	movs	r3, #31
    157e:	4013      	ands	r3, r2
    1580:	2b01      	cmp	r3, #1
    1582:	d100      	bne.n	1586 <udc_process_setup+0x2a>
    1584:	e176      	b.n	1874 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1586:	4ba2      	ldr	r3, [pc, #648]	; (1810 <udc_process_setup+0x2b4>)
    1588:	781a      	ldrb	r2, [r3, #0]
    158a:	231f      	movs	r3, #31
    158c:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    158e:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1590:	2b02      	cmp	r3, #2
    1592:	d100      	bne.n	1596 <udc_process_setup+0x3a>
    1594:	e1cc      	b.n	1930 <udc_process_setup+0x3d4>
#endif
}
    1596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1598:	4a9d      	ldr	r2, [pc, #628]	; (1810 <udc_process_setup+0x2b4>)
    159a:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    159c:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    159e:	2a00      	cmp	r2, #0
    15a0:	d0f9      	beq.n	1596 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    15a2:	2160      	movs	r1, #96	; 0x60
    15a4:	4219      	tst	r1, r3
    15a6:	d1e7      	bne.n	1578 <udc_process_setup+0x1c>
    15a8:	211f      	movs	r1, #31
    15aa:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    15ac:	d108      	bne.n	15c0 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    15ae:	4998      	ldr	r1, [pc, #608]	; (1810 <udc_process_setup+0x2b4>)
    15b0:	7849      	ldrb	r1, [r1, #1]
    15b2:	2906      	cmp	r1, #6
    15b4:	d023      	beq.n	15fe <udc_process_setup+0xa2>
    15b6:	2908      	cmp	r1, #8
    15b8:	d100      	bne.n	15bc <udc_process_setup+0x60>
    15ba:	e086      	b.n	16ca <udc_process_setup+0x16e>
    15bc:	2900      	cmp	r1, #0
    15be:	d017      	beq.n	15f0 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    15c0:	2b01      	cmp	r3, #1
    15c2:	d100      	bne.n	15c6 <udc_process_setup+0x6a>
    15c4:	e089      	b.n	16da <udc_process_setup+0x17e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    15c6:	2b02      	cmp	r3, #2
    15c8:	d1d6      	bne.n	1578 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    15ca:	4b91      	ldr	r3, [pc, #580]	; (1810 <udc_process_setup+0x2b4>)
    15cc:	785b      	ldrb	r3, [r3, #1]
	return false;
    15ce:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    15d0:	2b00      	cmp	r3, #0
    15d2:	d000      	beq.n	15d6 <udc_process_setup+0x7a>
    15d4:	e1a8      	b.n	1928 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    15d6:	2a02      	cmp	r2, #2
    15d8:	d1d5      	bne.n	1586 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    15da:	4b8d      	ldr	r3, [pc, #564]	; (1810 <udc_process_setup+0x2b4>)
    15dc:	7918      	ldrb	r0, [r3, #4]
    15de:	4b8d      	ldr	r3, [pc, #564]	; (1814 <udc_process_setup+0x2b8>)
    15e0:	4798      	blx	r3
    15e2:	4b8d      	ldr	r3, [pc, #564]	; (1818 <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    15e4:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    15e6:	2102      	movs	r1, #2
    15e8:	0018      	movs	r0, r3
    15ea:	4b8c      	ldr	r3, [pc, #560]	; (181c <udc_process_setup+0x2c0>)
    15ec:	4798      	blx	r3
    15ee:	e0fe      	b.n	17ee <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    15f0:	2a02      	cmp	r2, #2
    15f2:	d1c8      	bne.n	1586 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    15f4:	3102      	adds	r1, #2
    15f6:	488a      	ldr	r0, [pc, #552]	; (1820 <udc_process_setup+0x2c4>)
    15f8:	4b88      	ldr	r3, [pc, #544]	; (181c <udc_process_setup+0x2c0>)
    15fa:	4798      	blx	r3
    15fc:	e0f7      	b.n	17ee <udc_process_setup+0x292>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    15fe:	4b84      	ldr	r3, [pc, #528]	; (1810 <udc_process_setup+0x2b4>)
    1600:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1602:	0a13      	lsrs	r3, r2, #8
    1604:	2b02      	cmp	r3, #2
    1606:	d023      	beq.n	1650 <udc_process_setup+0xf4>
    1608:	b2d9      	uxtb	r1, r3
    160a:	2902      	cmp	r1, #2
    160c:	d90f      	bls.n	162e <udc_process_setup+0xd2>
    160e:	2b03      	cmp	r3, #3
    1610:	d034      	beq.n	167c <udc_process_setup+0x120>
    1612:	2b0f      	cmp	r3, #15
    1614:	d000      	beq.n	1618 <udc_process_setup+0xbc>
    1616:	e184      	b.n	1922 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    1618:	4b82      	ldr	r3, [pc, #520]	; (1824 <udc_process_setup+0x2c8>)
    161a:	6898      	ldr	r0, [r3, #8]
    161c:	2800      	cmp	r0, #0
    161e:	d0b2      	beq.n	1586 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1620:	7883      	ldrb	r3, [r0, #2]
    1622:	78c1      	ldrb	r1, [r0, #3]
    1624:	0209      	lsls	r1, r1, #8
    1626:	4319      	orrs	r1, r3
    1628:	4b7c      	ldr	r3, [pc, #496]	; (181c <udc_process_setup+0x2c0>)
    162a:	4798      	blx	r3
    162c:	e007      	b.n	163e <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    162e:	2b01      	cmp	r3, #1
    1630:	d000      	beq.n	1634 <udc_process_setup+0xd8>
    1632:	e176      	b.n	1922 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    1634:	4b7b      	ldr	r3, [pc, #492]	; (1824 <udc_process_setup+0x2c8>)
    1636:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1638:	7801      	ldrb	r1, [r0, #0]
    163a:	4b78      	ldr	r3, [pc, #480]	; (181c <udc_process_setup+0x2c0>)
    163c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    163e:	4b74      	ldr	r3, [pc, #464]	; (1810 <udc_process_setup+0x2b4>)
    1640:	88da      	ldrh	r2, [r3, #6]
    1642:	899b      	ldrh	r3, [r3, #12]
    1644:	4293      	cmp	r3, r2
    1646:	d800      	bhi.n	164a <udc_process_setup+0xee>
    1648:	e0d1      	b.n	17ee <udc_process_setup+0x292>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    164a:	4b71      	ldr	r3, [pc, #452]	; (1810 <udc_process_setup+0x2b4>)
    164c:	819a      	strh	r2, [r3, #12]
    164e:	e0ce      	b.n	17ee <udc_process_setup+0x292>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1650:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1652:	4b74      	ldr	r3, [pc, #464]	; (1824 <udc_process_setup+0x2c8>)
    1654:	681b      	ldr	r3, [r3, #0]
    1656:	7c5b      	ldrb	r3, [r3, #17]
    1658:	4293      	cmp	r3, r2
    165a:	d800      	bhi.n	165e <udc_process_setup+0x102>
    165c:	e793      	b.n	1586 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    165e:	4b71      	ldr	r3, [pc, #452]	; (1824 <udc_process_setup+0x2c8>)
    1660:	685b      	ldr	r3, [r3, #4]
    1662:	00d2      	lsls	r2, r2, #3
    1664:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1666:	7883      	ldrb	r3, [r0, #2]
    1668:	78c1      	ldrb	r1, [r0, #3]
    166a:	0209      	lsls	r1, r1, #8
    166c:	4319      	orrs	r1, r3
    166e:	4b6b      	ldr	r3, [pc, #428]	; (181c <udc_process_setup+0x2c0>)
    1670:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1672:	4b67      	ldr	r3, [pc, #412]	; (1810 <udc_process_setup+0x2b4>)
    1674:	689b      	ldr	r3, [r3, #8]
    1676:	2202      	movs	r2, #2
    1678:	705a      	strb	r2, [r3, #1]
    167a:	e7e0      	b.n	163e <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    167c:	23ff      	movs	r3, #255	; 0xff
    167e:	401a      	ands	r2, r3
    1680:	2a01      	cmp	r2, #1
    1682:	d01f      	beq.n	16c4 <udc_process_setup+0x168>
    1684:	2a00      	cmp	r2, #0
    1686:	d018      	beq.n	16ba <udc_process_setup+0x15e>
    1688:	2a02      	cmp	r2, #2
    168a:	d100      	bne.n	168e <udc_process_setup+0x132>
    168c:	e178      	b.n	1980 <udc_process_setup+0x424>
    168e:	2a03      	cmp	r2, #3
    1690:	d000      	beq.n	1694 <udc_process_setup+0x138>
    1692:	e771      	b.n	1578 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1694:	2107      	movs	r1, #7
		str = udc_get_string_serial_name();
    1696:	4c64      	ldr	r4, [pc, #400]	; (1828 <udc_process_setup+0x2cc>)
    1698:	4a64      	ldr	r2, [pc, #400]	; (182c <udc_process_setup+0x2d0>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    169a:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    169c:	5ce0      	ldrb	r0, [r4, r3]
    169e:	8050      	strh	r0, [r2, #2]
    16a0:	3301      	adds	r3, #1
    16a2:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    16a4:	b2d8      	uxtb	r0, r3
    16a6:	4281      	cmp	r1, r0
    16a8:	d8f8      	bhi.n	169c <udc_process_setup+0x140>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    16aa:	0049      	lsls	r1, r1, #1
    16ac:	3102      	adds	r1, #2
    16ae:	485f      	ldr	r0, [pc, #380]	; (182c <udc_process_setup+0x2d0>)
    16b0:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    16b2:	b289      	uxth	r1, r1
    16b4:	4b59      	ldr	r3, [pc, #356]	; (181c <udc_process_setup+0x2c0>)
    16b6:	4798      	blx	r3
    16b8:	e7c1      	b.n	163e <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    16ba:	2104      	movs	r1, #4
    16bc:	485c      	ldr	r0, [pc, #368]	; (1830 <udc_process_setup+0x2d4>)
    16be:	4b57      	ldr	r3, [pc, #348]	; (181c <udc_process_setup+0x2c0>)
    16c0:	4798      	blx	r3
    16c2:	e7bc      	b.n	163e <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    16c4:	4c5b      	ldr	r4, [pc, #364]	; (1834 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    16c6:	2110      	movs	r1, #16
    16c8:	e7e6      	b.n	1698 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    16ca:	2a01      	cmp	r2, #1
    16cc:	d000      	beq.n	16d0 <udc_process_setup+0x174>
    16ce:	e75a      	b.n	1586 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    16d0:	2101      	movs	r1, #1
    16d2:	4859      	ldr	r0, [pc, #356]	; (1838 <udc_process_setup+0x2dc>)
    16d4:	4b51      	ldr	r3, [pc, #324]	; (181c <udc_process_setup+0x2c0>)
    16d6:	4798      	blx	r3
    16d8:	e089      	b.n	17ee <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
    16da:	494d      	ldr	r1, [pc, #308]	; (1810 <udc_process_setup+0x2b4>)
    16dc:	7849      	ldrb	r1, [r1, #1]
    16de:	290a      	cmp	r1, #10
    16e0:	d000      	beq.n	16e4 <udc_process_setup+0x188>
    16e2:	e770      	b.n	15c6 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    16e4:	2a01      	cmp	r2, #1
    16e6:	d000      	beq.n	16ea <udc_process_setup+0x18e>
    16e8:	e0c4      	b.n	1874 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    16ea:	4b53      	ldr	r3, [pc, #332]	; (1838 <udc_process_setup+0x2dc>)
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d100      	bne.n	16f4 <udc_process_setup+0x198>
    16f2:	e0bf      	b.n	1874 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    16f4:	4b46      	ldr	r3, [pc, #280]	; (1810 <udc_process_setup+0x2b4>)
    16f6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16f8:	4b50      	ldr	r3, [pc, #320]	; (183c <udc_process_setup+0x2e0>)
    16fa:	681d      	ldr	r5, [r3, #0]
    16fc:	682b      	ldr	r3, [r5, #0]
    16fe:	791b      	ldrb	r3, [r3, #4]
    1700:	42a3      	cmp	r3, r4
    1702:	d800      	bhi.n	1706 <udc_process_setup+0x1aa>
    1704:	e0b6      	b.n	1874 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1706:	2100      	movs	r1, #0
    1708:	0020      	movs	r0, r4
    170a:	4b4d      	ldr	r3, [pc, #308]	; (1840 <udc_process_setup+0x2e4>)
    170c:	4798      	blx	r3
    170e:	2800      	cmp	r0, #0
    1710:	d100      	bne.n	1714 <udc_process_setup+0x1b8>
    1712:	e731      	b.n	1578 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1714:	686b      	ldr	r3, [r5, #4]
    1716:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1718:	58e3      	ldr	r3, [r4, r3]
    171a:	68db      	ldr	r3, [r3, #12]
    171c:	4798      	blx	r3
    171e:	4b49      	ldr	r3, [pc, #292]	; (1844 <udc_process_setup+0x2e8>)
    1720:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1722:	2101      	movs	r1, #1
    1724:	0018      	movs	r0, r3
    1726:	4b3d      	ldr	r3, [pc, #244]	; (181c <udc_process_setup+0x2c0>)
    1728:	4798      	blx	r3
    172a:	e060      	b.n	17ee <udc_process_setup+0x292>
    172c:	221f      	movs	r2, #31
    172e:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1730:	d15f      	bne.n	17f2 <udc_process_setup+0x296>
			switch (udd_g_ctrlreq.req.bRequest) {
    1732:	4a37      	ldr	r2, [pc, #220]	; (1810 <udc_process_setup+0x2b4>)
    1734:	7852      	ldrb	r2, [r2, #1]
    1736:	2a03      	cmp	r2, #3
    1738:	d100      	bne.n	173c <udc_process_setup+0x1e0>
    173a:	e0f4      	b.n	1926 <udc_process_setup+0x3ca>
    173c:	b2d1      	uxtb	r1, r2
    173e:	2903      	cmp	r1, #3
    1740:	d93b      	bls.n	17ba <udc_process_setup+0x25e>
    1742:	2a05      	cmp	r2, #5
    1744:	d04b      	beq.n	17de <udc_process_setup+0x282>
    1746:	2a09      	cmp	r2, #9
    1748:	d153      	bne.n	17f2 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
    174a:	4b31      	ldr	r3, [pc, #196]	; (1810 <udc_process_setup+0x2b4>)
    174c:	88db      	ldrh	r3, [r3, #6]
    174e:	2b00      	cmp	r3, #0
    1750:	d000      	beq.n	1754 <udc_process_setup+0x1f8>
    1752:	e718      	b.n	1586 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1754:	4b3c      	ldr	r3, [pc, #240]	; (1848 <udc_process_setup+0x2ec>)
    1756:	4798      	blx	r3
    1758:	2800      	cmp	r0, #0
    175a:	d100      	bne.n	175e <udc_process_setup+0x202>
    175c:	e70c      	b.n	1578 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    175e:	4b2c      	ldr	r3, [pc, #176]	; (1810 <udc_process_setup+0x2b4>)
    1760:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1762:	4b30      	ldr	r3, [pc, #192]	; (1824 <udc_process_setup+0x2c8>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1768:	429a      	cmp	r2, r3
    176a:	dd00      	ble.n	176e <udc_process_setup+0x212>
    176c:	e704      	b.n	1578 <udc_process_setup+0x1c>
	udc_reset();
    176e:	4b37      	ldr	r3, [pc, #220]	; (184c <udc_process_setup+0x2f0>)
    1770:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1772:	4b27      	ldr	r3, [pc, #156]	; (1810 <udc_process_setup+0x2b4>)
    1774:	789b      	ldrb	r3, [r3, #2]
    1776:	4a30      	ldr	r2, [pc, #192]	; (1838 <udc_process_setup+0x2dc>)
    1778:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    177a:	2b00      	cmp	r3, #0
    177c:	d037      	beq.n	17ee <udc_process_setup+0x292>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    177e:	4a34      	ldr	r2, [pc, #208]	; (1850 <udc_process_setup+0x2f4>)
    1780:	4694      	mov	ip, r2
    1782:	4463      	add	r3, ip
    1784:	00db      	lsls	r3, r3, #3
    1786:	4a27      	ldr	r2, [pc, #156]	; (1824 <udc_process_setup+0x2c8>)
    1788:	6852      	ldr	r2, [r2, #4]
    178a:	18d3      	adds	r3, r2, r3
    178c:	4a2b      	ldr	r2, [pc, #172]	; (183c <udc_process_setup+0x2e0>)
    178e:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1790:	681b      	ldr	r3, [r3, #0]
    1792:	791b      	ldrb	r3, [r3, #4]
    1794:	2b00      	cmp	r3, #0
    1796:	d02a      	beq.n	17ee <udc_process_setup+0x292>
    1798:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    179a:	4d2e      	ldr	r5, [pc, #184]	; (1854 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    179c:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    179e:	2100      	movs	r1, #0
    17a0:	0020      	movs	r0, r4
    17a2:	47a8      	blx	r5
    17a4:	2800      	cmp	r0, #0
    17a6:	d100      	bne.n	17aa <udc_process_setup+0x24e>
    17a8:	e6e6      	b.n	1578 <udc_process_setup+0x1c>
			iface_num++) {
    17aa:	3401      	adds	r4, #1
    17ac:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17ae:	6833      	ldr	r3, [r6, #0]
    17b0:	681b      	ldr	r3, [r3, #0]
    17b2:	791b      	ldrb	r3, [r3, #4]
    17b4:	42a3      	cmp	r3, r4
    17b6:	d8f2      	bhi.n	179e <udc_process_setup+0x242>
    17b8:	e019      	b.n	17ee <udc_process_setup+0x292>
			switch (udd_g_ctrlreq.req.bRequest) {
    17ba:	2a01      	cmp	r2, #1
    17bc:	d119      	bne.n	17f2 <udc_process_setup+0x296>
	if (udd_g_ctrlreq.req.wLength) {
    17be:	4b14      	ldr	r3, [pc, #80]	; (1810 <udc_process_setup+0x2b4>)
    17c0:	88db      	ldrh	r3, [r3, #6]
    17c2:	2b00      	cmp	r3, #0
    17c4:	d000      	beq.n	17c8 <udc_process_setup+0x26c>
    17c6:	e6de      	b.n	1586 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    17c8:	4b11      	ldr	r3, [pc, #68]	; (1810 <udc_process_setup+0x2b4>)
    17ca:	885b      	ldrh	r3, [r3, #2]
    17cc:	2b01      	cmp	r3, #1
    17ce:	d000      	beq.n	17d2 <udc_process_setup+0x276>
    17d0:	e6d9      	b.n	1586 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    17d2:	4a13      	ldr	r2, [pc, #76]	; (1820 <udc_process_setup+0x2c4>)
    17d4:	8813      	ldrh	r3, [r2, #0]
    17d6:	2102      	movs	r1, #2
    17d8:	438b      	bics	r3, r1
    17da:	8013      	strh	r3, [r2, #0]
    17dc:	e007      	b.n	17ee <udc_process_setup+0x292>
	if (udd_g_ctrlreq.req.wLength) {
    17de:	4b0c      	ldr	r3, [pc, #48]	; (1810 <udc_process_setup+0x2b4>)
    17e0:	88db      	ldrh	r3, [r3, #6]
    17e2:	2b00      	cmp	r3, #0
    17e4:	d000      	beq.n	17e8 <udc_process_setup+0x28c>
    17e6:	e6ce      	b.n	1586 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    17e8:	4a1b      	ldr	r2, [pc, #108]	; (1858 <udc_process_setup+0x2fc>)
    17ea:	4b09      	ldr	r3, [pc, #36]	; (1810 <udc_process_setup+0x2b4>)
    17ec:	611a      	str	r2, [r3, #16]
			return true;
    17ee:	2001      	movs	r0, #1
    17f0:	e6d1      	b.n	1596 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    17f2:	2b01      	cmp	r3, #1
    17f4:	d032      	beq.n	185c <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    17f6:	2b02      	cmp	r3, #2
    17f8:	d000      	beq.n	17fc <udc_process_setup+0x2a0>
    17fa:	e6bd      	b.n	1578 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    17fc:	4b04      	ldr	r3, [pc, #16]	; (1810 <udc_process_setup+0x2b4>)
    17fe:	785b      	ldrb	r3, [r3, #1]
    1800:	2b01      	cmp	r3, #1
    1802:	d06d      	beq.n	18e0 <udc_process_setup+0x384>
    1804:	2b03      	cmp	r3, #3
    1806:	d100      	bne.n	180a <udc_process_setup+0x2ae>
    1808:	e079      	b.n	18fe <udc_process_setup+0x3a2>
	return false;
    180a:	2000      	movs	r0, #0
    180c:	e08c      	b.n	1928 <udc_process_setup+0x3cc>
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	200004f4 	.word	0x200004f4
    1814:	00002235 	.word	0x00002235
    1818:	200001a0 	.word	0x200001a0
    181c:	0000260d 	.word	0x0000260d
    1820:	2000019e 	.word	0x2000019e
    1824:	200000c8 	.word	0x200000c8
    1828:	00005ed8 	.word	0x00005ed8
    182c:	2000007c 	.word	0x2000007c
    1830:	200000a0 	.word	0x200000a0
    1834:	200000a4 	.word	0x200000a4
    1838:	200001a8 	.word	0x200001a8
    183c:	200001ac 	.word	0x200001ac
    1840:	00001389 	.word	0x00001389
    1844:	200001a4 	.word	0x200001a4
    1848:	000025fd 	.word	0x000025fd
    184c:	000014cd 	.word	0x000014cd
    1850:	1fffffff 	.word	0x1fffffff
    1854:	00001469 	.word	0x00001469
    1858:	00001371 	.word	0x00001371
			switch (udd_g_ctrlreq.req.bRequest) {
    185c:	4a4a      	ldr	r2, [pc, #296]	; (1988 <udc_process_setup+0x42c>)
    185e:	7852      	ldrb	r2, [r2, #1]
    1860:	2a0b      	cmp	r2, #11
    1862:	d1c8      	bne.n	17f6 <udc_process_setup+0x29a>
	if (udd_g_ctrlreq.req.wLength) {
    1864:	4b48      	ldr	r3, [pc, #288]	; (1988 <udc_process_setup+0x42c>)
    1866:	88db      	ldrh	r3, [r3, #6]
    1868:	2b00      	cmp	r3, #0
    186a:	d103      	bne.n	1874 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    186c:	4b47      	ldr	r3, [pc, #284]	; (198c <udc_process_setup+0x430>)
    186e:	781b      	ldrb	r3, [r3, #0]
    1870:	2b00      	cmp	r3, #0
    1872:	d127      	bne.n	18c4 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1874:	4b45      	ldr	r3, [pc, #276]	; (198c <udc_process_setup+0x430>)
    1876:	781b      	ldrb	r3, [r3, #0]
	return false;
    1878:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    187a:	2b00      	cmp	r3, #0
    187c:	d100      	bne.n	1880 <udc_process_setup+0x324>
    187e:	e68a      	b.n	1596 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1880:	4b41      	ldr	r3, [pc, #260]	; (1988 <udc_process_setup+0x42c>)
    1882:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1884:	4b42      	ldr	r3, [pc, #264]	; (1990 <udc_process_setup+0x434>)
    1886:	681d      	ldr	r5, [r3, #0]
    1888:	682b      	ldr	r3, [r5, #0]
    188a:	791b      	ldrb	r3, [r3, #4]
    188c:	42a3      	cmp	r3, r4
    188e:	d800      	bhi.n	1892 <udc_process_setup+0x336>
    1890:	e681      	b.n	1596 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1892:	2100      	movs	r1, #0
    1894:	0020      	movs	r0, r4
    1896:	4b3f      	ldr	r3, [pc, #252]	; (1994 <udc_process_setup+0x438>)
    1898:	4798      	blx	r3
    189a:	2800      	cmp	r0, #0
    189c:	d100      	bne.n	18a0 <udc_process_setup+0x344>
    189e:	e672      	b.n	1586 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    18a0:	686b      	ldr	r3, [r5, #4]
    18a2:	00a2      	lsls	r2, r4, #2
    18a4:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    18a6:	68eb      	ldr	r3, [r5, #12]
    18a8:	4798      	blx	r3
    18aa:	0001      	movs	r1, r0
    18ac:	0020      	movs	r0, r4
    18ae:	4b39      	ldr	r3, [pc, #228]	; (1994 <udc_process_setup+0x438>)
    18b0:	4798      	blx	r3
    18b2:	2800      	cmp	r0, #0
    18b4:	d100      	bne.n	18b8 <udc_process_setup+0x35c>
    18b6:	e666      	b.n	1586 <udc_process_setup+0x2a>
	return udi_api->setup();
    18b8:	68ab      	ldr	r3, [r5, #8]
    18ba:	4798      	blx	r3
		if (udc_req_iface()) {
    18bc:	2800      	cmp	r0, #0
    18be:	d000      	beq.n	18c2 <udc_process_setup+0x366>
    18c0:	e669      	b.n	1596 <udc_process_setup+0x3a>
    18c2:	e660      	b.n	1586 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18c4:	4b30      	ldr	r3, [pc, #192]	; (1988 <udc_process_setup+0x42c>)
    18c6:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    18c8:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    18ca:	0028      	movs	r0, r5
    18cc:	4b32      	ldr	r3, [pc, #200]	; (1998 <udc_process_setup+0x43c>)
    18ce:	4798      	blx	r3
    18d0:	2800      	cmp	r0, #0
    18d2:	d100      	bne.n	18d6 <udc_process_setup+0x37a>
    18d4:	e650      	b.n	1578 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    18d6:	b2e1      	uxtb	r1, r4
    18d8:	0028      	movs	r0, r5
    18da:	4b30      	ldr	r3, [pc, #192]	; (199c <udc_process_setup+0x440>)
    18dc:	4798      	blx	r3
    18de:	e023      	b.n	1928 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    18e0:	4b29      	ldr	r3, [pc, #164]	; (1988 <udc_process_setup+0x42c>)
    18e2:	88db      	ldrh	r3, [r3, #6]
    18e4:	2b00      	cmp	r3, #0
    18e6:	d000      	beq.n	18ea <udc_process_setup+0x38e>
    18e8:	e64d      	b.n	1586 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18ea:	4b27      	ldr	r3, [pc, #156]	; (1988 <udc_process_setup+0x42c>)
    18ec:	885b      	ldrh	r3, [r3, #2]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d000      	beq.n	18f4 <udc_process_setup+0x398>
    18f2:	e648      	b.n	1586 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18f4:	4b24      	ldr	r3, [pc, #144]	; (1988 <udc_process_setup+0x42c>)
    18f6:	7918      	ldrb	r0, [r3, #4]
    18f8:	4b29      	ldr	r3, [pc, #164]	; (19a0 <udc_process_setup+0x444>)
    18fa:	4798      	blx	r3
    18fc:	e014      	b.n	1928 <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    18fe:	4b22      	ldr	r3, [pc, #136]	; (1988 <udc_process_setup+0x42c>)
    1900:	88db      	ldrh	r3, [r3, #6]
    1902:	2b00      	cmp	r3, #0
    1904:	d000      	beq.n	1908 <udc_process_setup+0x3ac>
    1906:	e63e      	b.n	1586 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1908:	4b1f      	ldr	r3, [pc, #124]	; (1988 <udc_process_setup+0x42c>)
    190a:	885b      	ldrh	r3, [r3, #2]
    190c:	2b00      	cmp	r3, #0
    190e:	d000      	beq.n	1912 <udc_process_setup+0x3b6>
    1910:	e639      	b.n	1586 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1912:	4c1d      	ldr	r4, [pc, #116]	; (1988 <udc_process_setup+0x42c>)
    1914:	7920      	ldrb	r0, [r4, #4]
    1916:	4b23      	ldr	r3, [pc, #140]	; (19a4 <udc_process_setup+0x448>)
    1918:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    191a:	7920      	ldrb	r0, [r4, #4]
    191c:	4b22      	ldr	r3, [pc, #136]	; (19a8 <udc_process_setup+0x44c>)
    191e:	4798      	blx	r3
    1920:	e002      	b.n	1928 <udc_process_setup+0x3cc>
		return false;
    1922:	2000      	movs	r0, #0
    1924:	e000      	b.n	1928 <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    1926:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1928:	2800      	cmp	r0, #0
    192a:	d000      	beq.n	192e <udc_process_setup+0x3d2>
    192c:	e633      	b.n	1596 <udc_process_setup+0x3a>
    192e:	e623      	b.n	1578 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1930:	4b16      	ldr	r3, [pc, #88]	; (198c <udc_process_setup+0x430>)
    1932:	781b      	ldrb	r3, [r3, #0]
    1934:	2b00      	cmp	r3, #0
    1936:	d100      	bne.n	193a <udc_process_setup+0x3de>
    1938:	e62d      	b.n	1596 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    193a:	4b15      	ldr	r3, [pc, #84]	; (1990 <udc_process_setup+0x434>)
    193c:	681b      	ldr	r3, [r3, #0]
    193e:	681a      	ldr	r2, [r3, #0]
    1940:	7912      	ldrb	r2, [r2, #4]
    1942:	2a00      	cmp	r2, #0
    1944:	d01a      	beq.n	197c <udc_process_setup+0x420>
    1946:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1948:	4e12      	ldr	r6, [pc, #72]	; (1994 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    194a:	4f11      	ldr	r7, [pc, #68]	; (1990 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    194c:	685b      	ldr	r3, [r3, #4]
    194e:	00aa      	lsls	r2, r5, #2
    1950:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1952:	68e3      	ldr	r3, [r4, #12]
    1954:	4798      	blx	r3
    1956:	0001      	movs	r1, r0
    1958:	0028      	movs	r0, r5
    195a:	47b0      	blx	r6
    195c:	2800      	cmp	r0, #0
    195e:	d100      	bne.n	1962 <udc_process_setup+0x406>
    1960:	e619      	b.n	1596 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1962:	68a3      	ldr	r3, [r4, #8]
    1964:	4798      	blx	r3
    1966:	2800      	cmp	r0, #0
    1968:	d000      	beq.n	196c <udc_process_setup+0x410>
    196a:	e614      	b.n	1596 <udc_process_setup+0x3a>
			iface_num++) {
    196c:	3501      	adds	r5, #1
    196e:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1970:	683b      	ldr	r3, [r7, #0]
    1972:	681a      	ldr	r2, [r3, #0]
    1974:	7912      	ldrb	r2, [r2, #4]
    1976:	42aa      	cmp	r2, r5
    1978:	d8e8      	bhi.n	194c <udc_process_setup+0x3f0>
    197a:	e60c      	b.n	1596 <udc_process_setup+0x3a>
	return false;
    197c:	2000      	movs	r0, #0
    197e:	e60a      	b.n	1596 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1980:	210c      	movs	r1, #12
		str = udc_string_product_name;
    1982:	4c0a      	ldr	r4, [pc, #40]	; (19ac <udc_process_setup+0x450>)
    1984:	e688      	b.n	1698 <udc_process_setup+0x13c>
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	200004f4 	.word	0x200004f4
    198c:	200001a8 	.word	0x200001a8
    1990:	200001ac 	.word	0x200001ac
    1994:	00001389 	.word	0x00001389
    1998:	000013fd 	.word	0x000013fd
    199c:	00001469 	.word	0x00001469
    19a0:	00002379 	.word	0x00002379
    19a4:	00002099 	.word	0x00002099
    19a8:	00002249 	.word	0x00002249
    19ac:	200000b8 	.word	0x200000b8

000019b0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    19b0:	4a04      	ldr	r2, [pc, #16]	; (19c4 <_extint_enable+0x14>)
    19b2:	7813      	ldrb	r3, [r2, #0]
    19b4:	2102      	movs	r1, #2
    19b6:	430b      	orrs	r3, r1
    19b8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    19ba:	7853      	ldrb	r3, [r2, #1]
    19bc:	b25b      	sxtb	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	dbfb      	blt.n	19ba <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    19c2:	4770      	bx	lr
    19c4:	40001800 	.word	0x40001800

000019c8 <_system_extint_init>:
{
    19c8:	b500      	push	{lr}
    19ca:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    19cc:	4a12      	ldr	r2, [pc, #72]	; (1a18 <_system_extint_init+0x50>)
    19ce:	6993      	ldr	r3, [r2, #24]
    19d0:	2140      	movs	r1, #64	; 0x40
    19d2:	430b      	orrs	r3, r1
    19d4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    19d6:	a901      	add	r1, sp, #4
    19d8:	2300      	movs	r3, #0
    19da:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    19dc:	2005      	movs	r0, #5
    19de:	4b0f      	ldr	r3, [pc, #60]	; (1a1c <_system_extint_init+0x54>)
    19e0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    19e2:	2005      	movs	r0, #5
    19e4:	4b0e      	ldr	r3, [pc, #56]	; (1a20 <_system_extint_init+0x58>)
    19e6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    19e8:	4a0e      	ldr	r2, [pc, #56]	; (1a24 <_system_extint_init+0x5c>)
    19ea:	7813      	ldrb	r3, [r2, #0]
    19ec:	2101      	movs	r1, #1
    19ee:	430b      	orrs	r3, r1
    19f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    19f2:	7853      	ldrb	r3, [r2, #1]
    19f4:	b25b      	sxtb	r3, r3
    19f6:	2b00      	cmp	r3, #0
    19f8:	dbfb      	blt.n	19f2 <_system_extint_init+0x2a>
    19fa:	4b0b      	ldr	r3, [pc, #44]	; (1a28 <_system_extint_init+0x60>)
    19fc:	0019      	movs	r1, r3
    19fe:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1a00:	2200      	movs	r2, #0
    1a02:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1a04:	4299      	cmp	r1, r3
    1a06:	d1fc      	bne.n	1a02 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a08:	2210      	movs	r2, #16
    1a0a:	4b08      	ldr	r3, [pc, #32]	; (1a2c <_system_extint_init+0x64>)
    1a0c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1a0e:	4b08      	ldr	r3, [pc, #32]	; (1a30 <_system_extint_init+0x68>)
    1a10:	4798      	blx	r3
}
    1a12:	b003      	add	sp, #12
    1a14:	bd00      	pop	{pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	40000400 	.word	0x40000400
    1a1c:	00005301 	.word	0x00005301
    1a20:	00005275 	.word	0x00005275
    1a24:	40001800 	.word	0x40001800
    1a28:	200002cc 	.word	0x200002cc
    1a2c:	e000e100 	.word	0xe000e100
    1a30:	000019b1 	.word	0x000019b1

00001a34 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1a34:	b510      	push	{r4, lr}
    1a36:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    1a38:	ab03      	add	r3, sp, #12
    1a3a:	2200      	movs	r2, #0
    1a3c:	701a      	strb	r2, [r3, #0]
    1a3e:	3203      	adds	r2, #3
    1a40:	705a      	strb	r2, [r3, #1]
    1a42:	3a01      	subs	r2, #1
    1a44:	709a      	strb	r2, [r3, #2]
    1a46:	3a01      	subs	r2, #1
    1a48:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    1a4a:	4b27      	ldr	r3, [pc, #156]	; (1ae8 <udd_sleep_mode+0xb4>)
    1a4c:	781b      	ldrb	r3, [r3, #0]
    1a4e:	4283      	cmp	r3, r0
    1a50:	d007      	beq.n	1a62 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1a52:	2800      	cmp	r0, #0
    1a54:	d107      	bne.n	1a66 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    1a56:	4b24      	ldr	r3, [pc, #144]	; (1ae8 <udd_sleep_mode+0xb4>)
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d123      	bne.n	1aa6 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1a5e:	4b22      	ldr	r3, [pc, #136]	; (1ae8 <udd_sleep_mode+0xb4>)
    1a60:	7018      	strb	r0, [r3, #0]
}
    1a62:	b004      	add	sp, #16
    1a64:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1a66:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1a68:	5c1b      	ldrb	r3, [r3, r0]
    1a6a:	4a20      	ldr	r2, [pc, #128]	; (1aec <udd_sleep_mode+0xb8>)
    1a6c:	5cd2      	ldrb	r2, [r2, r3]
    1a6e:	2aff      	cmp	r2, #255	; 0xff
    1a70:	d100      	bne.n	1a74 <udd_sleep_mode+0x40>
    1a72:	e7fe      	b.n	1a72 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a74:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1a78:	4251      	negs	r1, r2
    1a7a:	414a      	adcs	r2, r1
    1a7c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1a7e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1a84:	2100      	movs	r1, #0
    1a86:	4a1a      	ldr	r2, [pc, #104]	; (1af0 <udd_sleep_mode+0xbc>)
    1a88:	7011      	strb	r1, [r2, #0]
	return flags;
    1a8a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1a8c:	4917      	ldr	r1, [pc, #92]	; (1aec <udd_sleep_mode+0xb8>)
    1a8e:	5cca      	ldrb	r2, [r1, r3]
    1a90:	3201      	adds	r2, #1
    1a92:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a94:	2c00      	cmp	r4, #0
    1a96:	d0de      	beq.n	1a56 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    1a98:	2201      	movs	r2, #1
    1a9a:	4b15      	ldr	r3, [pc, #84]	; (1af0 <udd_sleep_mode+0xbc>)
    1a9c:	701a      	strb	r2, [r3, #0]
    1a9e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1aa2:	b662      	cpsie	i
    1aa4:	e7d7      	b.n	1a56 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1aa6:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1aa8:	5cd3      	ldrb	r3, [r2, r3]
    1aaa:	4a10      	ldr	r2, [pc, #64]	; (1aec <udd_sleep_mode+0xb8>)
    1aac:	5cd2      	ldrb	r2, [r2, r3]
    1aae:	2a00      	cmp	r2, #0
    1ab0:	d100      	bne.n	1ab4 <udd_sleep_mode+0x80>
    1ab2:	e7fe      	b.n	1ab2 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ab4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ab8:	4251      	negs	r1, r2
    1aba:	414a      	adcs	r2, r1
    1abc:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1abe:	b672      	cpsid	i
    1ac0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ac4:	2100      	movs	r1, #0
    1ac6:	4a0a      	ldr	r2, [pc, #40]	; (1af0 <udd_sleep_mode+0xbc>)
    1ac8:	7011      	strb	r1, [r2, #0]
	return flags;
    1aca:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1acc:	4907      	ldr	r1, [pc, #28]	; (1aec <udd_sleep_mode+0xb8>)
    1ace:	5cca      	ldrb	r2, [r1, r3]
    1ad0:	3a01      	subs	r2, #1
    1ad2:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1ad4:	2c00      	cmp	r4, #0
    1ad6:	d0c2      	beq.n	1a5e <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    1ad8:	2201      	movs	r2, #1
    1ada:	4b05      	ldr	r3, [pc, #20]	; (1af0 <udd_sleep_mode+0xbc>)
    1adc:	701a      	strb	r2, [r3, #0]
    1ade:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ae2:	b662      	cpsie	i
    1ae4:	e7bb      	b.n	1a5e <udd_sleep_mode+0x2a>
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	2000020c 	.word	0x2000020c
    1aec:	200002c4 	.word	0x200002c4
    1af0:	20000115 	.word	0x20000115

00001af4 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    1af4:	0643      	lsls	r3, r0, #25
    1af6:	d00b      	beq.n	1b10 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1af8:	230f      	movs	r3, #15
    1afa:	4003      	ands	r3, r0
    1afc:	005b      	lsls	r3, r3, #1
    1afe:	09c0      	lsrs	r0, r0, #7
    1b00:	1818      	adds	r0, r3, r0
    1b02:	3802      	subs	r0, #2
    1b04:	0083      	lsls	r3, r0, #2
    1b06:	1818      	adds	r0, r3, r0
    1b08:	0080      	lsls	r0, r0, #2
    1b0a:	4b02      	ldr	r3, [pc, #8]	; (1b14 <udd_ep_get_job+0x20>)
    1b0c:	1818      	adds	r0, r3, r0
	}
}
    1b0e:	4770      	bx	lr
		return NULL;
    1b10:	2000      	movs	r0, #0
    1b12:	e7fc      	b.n	1b0e <udd_ep_get_job+0x1a>
    1b14:	200001bc 	.word	0x200001bc

00001b18 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    1b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1a:	46d6      	mov	lr, sl
    1b1c:	464f      	mov	r7, r9
    1b1e:	4646      	mov	r6, r8
    1b20:	b5c0      	push	{r6, r7, lr}
    1b22:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1b24:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    1b26:	b26b      	sxtb	r3, r5
    1b28:	2b00      	cmp	r3, #0
    1b2a:	db26      	blt.n	1b7a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    1b2c:	0028      	movs	r0, r5
    1b2e:	4b5e      	ldr	r3, [pc, #376]	; (1ca8 <udd_ep_transfer_process+0x190>)
    1b30:	4798      	blx	r3
    1b32:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1b34:	270f      	movs	r7, #15
    1b36:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1b38:	8a03      	ldrh	r3, [r0, #16]
    1b3a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1b3c:	464b      	mov	r3, r9
    1b3e:	881b      	ldrh	r3, [r3, #0]
    1b40:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1b42:	7c83      	ldrb	r3, [r0, #18]
    1b44:	075b      	lsls	r3, r3, #29
    1b46:	d46a      	bmi.n	1c1e <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    1b48:	68e3      	ldr	r3, [r4, #12]
    1b4a:	4453      	add	r3, sl
    1b4c:	001e      	movs	r6, r3
    1b4e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1b50:	68a3      	ldr	r3, [r4, #8]
    1b52:	429e      	cmp	r6, r3
    1b54:	d800      	bhi.n	1b58 <udd_ep_transfer_process+0x40>
    1b56:	e074      	b.n	1c42 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    1b58:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    1b5a:	7ca3      	ldrb	r3, [r4, #18]
    1b5c:	2201      	movs	r2, #1
    1b5e:	4393      	bics	r3, r2
    1b60:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1b62:	6823      	ldr	r3, [r4, #0]
    1b64:	2b00      	cmp	r3, #0
    1b66:	d003      	beq.n	1b70 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1b68:	68e1      	ldr	r1, [r4, #12]
    1b6a:	002a      	movs	r2, r5
    1b6c:	2000      	movs	r0, #0
    1b6e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1b70:	bc1c      	pop	{r2, r3, r4}
    1b72:	4690      	mov	r8, r2
    1b74:	4699      	mov	r9, r3
    1b76:	46a2      	mov	sl, r4
    1b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    1b7a:	0028      	movs	r0, r5
    1b7c:	4b4a      	ldr	r3, [pc, #296]	; (1ca8 <udd_ep_transfer_process+0x190>)
    1b7e:	4798      	blx	r3
    1b80:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1b82:	270f      	movs	r7, #15
    1b84:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1b86:	8a03      	ldrh	r3, [r0, #16]
    1b88:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    1b8a:	464b      	mov	r3, r9
    1b8c:	885e      	ldrh	r6, [r3, #2]
    1b8e:	68c3      	ldr	r3, [r0, #12]
    1b90:	469c      	mov	ip, r3
    1b92:	4466      	add	r6, ip
    1b94:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1b96:	6881      	ldr	r1, [r0, #8]
    1b98:	428e      	cmp	r6, r1
    1b9a:	d025      	beq.n	1be8 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b9c:	1b8d      	subs	r5, r1, r6
    1b9e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ba0:	4b42      	ldr	r3, [pc, #264]	; (1cac <udd_ep_transfer_process+0x194>)
    1ba2:	429d      	cmp	r5, r3
    1ba4:	d906      	bls.n	1bb4 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1ba6:	001d      	movs	r5, r3
    1ba8:	4641      	mov	r1, r8
    1baa:	0018      	movs	r0, r3
    1bac:	4b40      	ldr	r3, [pc, #256]	; (1cb0 <udd_ep_transfer_process+0x198>)
    1bae:	4798      	blx	r3
    1bb0:	1a6d      	subs	r5, r5, r1
    1bb2:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1bb4:	7ca2      	ldrb	r2, [r4, #18]
    1bb6:	2300      	movs	r3, #0
    1bb8:	0792      	lsls	r2, r2, #30
    1bba:	d507      	bpl.n	1bcc <udd_ep_transfer_process+0xb4>
    1bbc:	4641      	mov	r1, r8
    1bbe:	0028      	movs	r0, r5
    1bc0:	4b3c      	ldr	r3, [pc, #240]	; (1cb4 <udd_ep_transfer_process+0x19c>)
    1bc2:	4798      	blx	r3
    1bc4:	b289      	uxth	r1, r1
    1bc6:	424b      	negs	r3, r1
    1bc8:	414b      	adcs	r3, r1
    1bca:	b2db      	uxtb	r3, r3
    1bcc:	005b      	lsls	r3, r3, #1
    1bce:	7ca2      	ldrb	r2, [r4, #18]
    1bd0:	2102      	movs	r1, #2
    1bd2:	438a      	bics	r2, r1
    1bd4:	4313      	orrs	r3, r2
    1bd6:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1bd8:	6862      	ldr	r2, [r4, #4]
    1bda:	1992      	adds	r2, r2, r6
    1bdc:	002b      	movs	r3, r5
    1bde:	0039      	movs	r1, r7
    1be0:	4835      	ldr	r0, [pc, #212]	; (1cb8 <udd_ep_transfer_process+0x1a0>)
    1be2:	4c36      	ldr	r4, [pc, #216]	; (1cbc <udd_ep_transfer_process+0x1a4>)
    1be4:	47a0      	blx	r4
    1be6:	e7c3      	b.n	1b70 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    1be8:	7c83      	ldrb	r3, [r0, #18]
    1bea:	079b      	lsls	r3, r3, #30
    1bec:	d40b      	bmi.n	1c06 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    1bee:	7c83      	ldrb	r3, [r0, #18]
    1bf0:	2201      	movs	r2, #1
    1bf2:	4393      	bics	r3, r2
    1bf4:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1bf6:	6803      	ldr	r3, [r0, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d0b9      	beq.n	1b70 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1bfc:	002a      	movs	r2, r5
    1bfe:	0031      	movs	r1, r6
    1c00:	2000      	movs	r0, #0
    1c02:	4798      	blx	r3
    1c04:	e7b4      	b.n	1b70 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    1c06:	7c83      	ldrb	r3, [r0, #18]
    1c08:	2202      	movs	r2, #2
    1c0a:	4393      	bics	r3, r2
    1c0c:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1c0e:	6842      	ldr	r2, [r0, #4]
    1c10:	1992      	adds	r2, r2, r6
    1c12:	2300      	movs	r3, #0
    1c14:	0039      	movs	r1, r7
    1c16:	4828      	ldr	r0, [pc, #160]	; (1cb8 <udd_ep_transfer_process+0x1a0>)
    1c18:	4c28      	ldr	r4, [pc, #160]	; (1cbc <udd_ep_transfer_process+0x1a4>)
    1c1a:	47a0      	blx	r4
    1c1c:	e7a8      	b.n	1b70 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1c1e:	6843      	ldr	r3, [r0, #4]
    1c20:	68c2      	ldr	r2, [r0, #12]
    1c22:	4694      	mov	ip, r2
    1c24:	4463      	add	r3, ip
    1c26:	001e      	movs	r6, r3
    1c28:	4641      	mov	r1, r8
    1c2a:	6880      	ldr	r0, [r0, #8]
    1c2c:	4b21      	ldr	r3, [pc, #132]	; (1cb4 <udd_ep_transfer_process+0x19c>)
    1c2e:	4798      	blx	r3
    1c30:	000a      	movs	r2, r1
    1c32:	1e7b      	subs	r3, r7, #1
    1c34:	019b      	lsls	r3, r3, #6
    1c36:	4922      	ldr	r1, [pc, #136]	; (1cc0 <udd_ep_transfer_process+0x1a8>)
    1c38:	1859      	adds	r1, r3, r1
    1c3a:	0030      	movs	r0, r6
    1c3c:	4b21      	ldr	r3, [pc, #132]	; (1cc4 <udd_ep_transfer_process+0x1ac>)
    1c3e:	4798      	blx	r3
    1c40:	e782      	b.n	1b48 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1c42:	464a      	mov	r2, r9
    1c44:	8892      	ldrh	r2, [r2, #4]
    1c46:	4552      	cmp	r2, sl
    1c48:	d000      	beq.n	1c4c <udd_ep_transfer_process+0x134>
    1c4a:	e786      	b.n	1b5a <udd_ep_transfer_process+0x42>
    1c4c:	429e      	cmp	r6, r3
    1c4e:	d100      	bne.n	1c52 <udd_ep_transfer_process+0x13a>
    1c50:	e783      	b.n	1b5a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1c52:	1b9b      	subs	r3, r3, r6
    1c54:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c56:	4b15      	ldr	r3, [pc, #84]	; (1cac <udd_ep_transfer_process+0x194>)
    1c58:	429d      	cmp	r5, r3
    1c5a:	d916      	bls.n	1c8a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1c5c:	001d      	movs	r5, r3
    1c5e:	4641      	mov	r1, r8
    1c60:	0018      	movs	r0, r3
    1c62:	4b13      	ldr	r3, [pc, #76]	; (1cb0 <udd_ep_transfer_process+0x198>)
    1c64:	4798      	blx	r3
    1c66:	1a6b      	subs	r3, r5, r1
    1c68:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    1c6a:	4598      	cmp	r8, r3
    1c6c:	d914      	bls.n	1c98 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1c6e:	7ca3      	ldrb	r3, [r4, #18]
    1c70:	2204      	movs	r2, #4
    1c72:	4313      	orrs	r3, r2
    1c74:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1c76:	1e7a      	subs	r2, r7, #1
    1c78:	0192      	lsls	r2, r2, #6
    1c7a:	4b11      	ldr	r3, [pc, #68]	; (1cc0 <udd_ep_transfer_process+0x1a8>)
    1c7c:	18d2      	adds	r2, r2, r3
    1c7e:	4643      	mov	r3, r8
    1c80:	0039      	movs	r1, r7
    1c82:	480d      	ldr	r0, [pc, #52]	; (1cb8 <udd_ep_transfer_process+0x1a0>)
    1c84:	4c10      	ldr	r4, [pc, #64]	; (1cc8 <udd_ep_transfer_process+0x1b0>)
    1c86:	47a0      	blx	r4
    1c88:	e772      	b.n	1b70 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    1c8a:	4641      	mov	r1, r8
    1c8c:	0028      	movs	r0, r5
    1c8e:	4b09      	ldr	r3, [pc, #36]	; (1cb4 <udd_ep_transfer_process+0x19c>)
    1c90:	4798      	blx	r3
    1c92:	1a6b      	subs	r3, r5, r1
    1c94:	b29b      	uxth	r3, r3
    1c96:	e7e8      	b.n	1c6a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1c98:	6862      	ldr	r2, [r4, #4]
    1c9a:	1992      	adds	r2, r2, r6
    1c9c:	0039      	movs	r1, r7
    1c9e:	4806      	ldr	r0, [pc, #24]	; (1cb8 <udd_ep_transfer_process+0x1a0>)
    1ca0:	4c09      	ldr	r4, [pc, #36]	; (1cc8 <udd_ep_transfer_process+0x1b0>)
    1ca2:	47a0      	blx	r4
    1ca4:	e764      	b.n	1b70 <udd_ep_transfer_process+0x58>
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00001af5 	.word	0x00001af5
    1cac:	00001fff 	.word	0x00001fff
    1cb0:	000059b1 	.word	0x000059b1
    1cb4:	000057dd 	.word	0x000057dd
    1cb8:	2000038c 	.word	0x2000038c
    1cbc:	00002d15 	.word	0x00002d15
    1cc0:	2000030c 	.word	0x2000030c
    1cc4:	00005cad 	.word	0x00005cad
    1cc8:	00002d69 	.word	0x00002d69

00001ccc <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1ccc:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1cce:	2205      	movs	r2, #5
    1cd0:	4b05      	ldr	r3, [pc, #20]	; (1ce8 <udd_ctrl_stall_data+0x1c>)
    1cd2:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1cd4:	4c05      	ldr	r4, [pc, #20]	; (1cec <udd_ctrl_stall_data+0x20>)
    1cd6:	2180      	movs	r1, #128	; 0x80
    1cd8:	0020      	movs	r0, r4
    1cda:	4b05      	ldr	r3, [pc, #20]	; (1cf0 <udd_ctrl_stall_data+0x24>)
    1cdc:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1cde:	2100      	movs	r1, #0
    1ce0:	0020      	movs	r0, r4
    1ce2:	4b04      	ldr	r3, [pc, #16]	; (1cf4 <udd_ctrl_stall_data+0x28>)
    1ce4:	4798      	blx	r3
}
    1ce6:	bd10      	pop	{r4, pc}
    1ce8:	200001ba 	.word	0x200001ba
    1cec:	2000038c 	.word	0x2000038c
    1cf0:	00002c69 	.word	0x00002c69
    1cf4:	00002c8f 	.word	0x00002c8f

00001cf8 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1cf8:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1cfa:	4c08      	ldr	r4, [pc, #32]	; (1d1c <_usb_device_lpm_suspend+0x24>)
    1cfc:	2106      	movs	r1, #6
    1cfe:	0020      	movs	r0, r4
    1d00:	4d07      	ldr	r5, [pc, #28]	; (1d20 <_usb_device_lpm_suspend+0x28>)
    1d02:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1d04:	2104      	movs	r1, #4
    1d06:	0020      	movs	r0, r4
    1d08:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1d0a:	2102      	movs	r1, #2
    1d0c:	0020      	movs	r0, r4
    1d0e:	4b05      	ldr	r3, [pc, #20]	; (1d24 <_usb_device_lpm_suspend+0x2c>)
    1d10:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    1d12:	2002      	movs	r0, #2
    1d14:	4b04      	ldr	r3, [pc, #16]	; (1d28 <_usb_device_lpm_suspend+0x30>)
    1d16:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    1d18:	bd70      	pop	{r4, r5, r6, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	2000038c 	.word	0x2000038c
    1d20:	0000277d 	.word	0x0000277d
    1d24:	0000275d 	.word	0x0000275d
    1d28:	00001a35 	.word	0x00001a35

00001d2c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1d2c:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1d2e:	4b12      	ldr	r3, [pc, #72]	; (1d78 <_usb_on_wakeup+0x4c>)
    1d30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1d32:	069b      	lsls	r3, r3, #26
    1d34:	d41a      	bmi.n	1d6c <_usb_on_wakeup+0x40>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1d36:	4910      	ldr	r1, [pc, #64]	; (1d78 <_usb_on_wakeup+0x4c>)
    1d38:	22d0      	movs	r2, #208	; 0xd0
    1d3a:	68cb      	ldr	r3, [r1, #12]
    1d3c:	4013      	ands	r3, r2
    1d3e:	2bd0      	cmp	r3, #208	; 0xd0
    1d40:	d1fb      	bne.n	1d3a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1d42:	4c0e      	ldr	r4, [pc, #56]	; (1d7c <_usb_on_wakeup+0x50>)
    1d44:	2102      	movs	r1, #2
    1d46:	0020      	movs	r0, r4
    1d48:	4b0d      	ldr	r3, [pc, #52]	; (1d80 <_usb_on_wakeup+0x54>)
    1d4a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1d4c:	2104      	movs	r1, #4
    1d4e:	0020      	movs	r0, r4
    1d50:	4d0c      	ldr	r5, [pc, #48]	; (1d84 <_usb_on_wakeup+0x58>)
    1d52:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1d54:	4a0c      	ldr	r2, [pc, #48]	; (1d88 <_usb_on_wakeup+0x5c>)
    1d56:	2106      	movs	r1, #6
    1d58:	0020      	movs	r0, r4
    1d5a:	4b0c      	ldr	r3, [pc, #48]	; (1d8c <_usb_on_wakeup+0x60>)
    1d5c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1d5e:	2106      	movs	r1, #6
    1d60:	0020      	movs	r0, r4
    1d62:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1d64:	2003      	movs	r0, #3
    1d66:	4b0a      	ldr	r3, [pc, #40]	; (1d90 <_usb_on_wakeup+0x64>)
    1d68:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    1d6a:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1d6c:	4902      	ldr	r1, [pc, #8]	; (1d78 <_usb_on_wakeup+0x4c>)
    1d6e:	2210      	movs	r2, #16
    1d70:	68cb      	ldr	r3, [r1, #12]
    1d72:	421a      	tst	r2, r3
    1d74:	d0fc      	beq.n	1d70 <_usb_on_wakeup+0x44>
    1d76:	e7e4      	b.n	1d42 <_usb_on_wakeup+0x16>
    1d78:	40000800 	.word	0x40000800
    1d7c:	2000038c 	.word	0x2000038c
    1d80:	0000277d 	.word	0x0000277d
    1d84:	0000275d 	.word	0x0000275d
    1d88:	00001cf9 	.word	0x00001cf9
    1d8c:	00002739 	.word	0x00002739
    1d90:	00001a35 	.word	0x00001a35

00001d94 <_usb_on_suspend>:
{
    1d94:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1d96:	4c06      	ldr	r4, [pc, #24]	; (1db0 <_usb_on_suspend+0x1c>)
    1d98:	2104      	movs	r1, #4
    1d9a:	0020      	movs	r0, r4
    1d9c:	4b05      	ldr	r3, [pc, #20]	; (1db4 <_usb_on_suspend+0x20>)
    1d9e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1da0:	2102      	movs	r1, #2
    1da2:	0020      	movs	r0, r4
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <_usb_on_suspend+0x24>)
    1da6:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1da8:	2001      	movs	r0, #1
    1daa:	4b04      	ldr	r3, [pc, #16]	; (1dbc <_usb_on_suspend+0x28>)
    1dac:	4798      	blx	r3
}
    1dae:	bd10      	pop	{r4, pc}
    1db0:	2000038c 	.word	0x2000038c
    1db4:	0000277d 	.word	0x0000277d
    1db8:	0000275d 	.word	0x0000275d
    1dbc:	00001a35 	.word	0x00001a35

00001dc0 <_usb_on_bus_reset>:
{
    1dc0:	b530      	push	{r4, r5, lr}
    1dc2:	b083      	sub	sp, #12
    1dc4:	0004      	movs	r4, r0
	udc_reset();
    1dc6:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <_usb_on_bus_reset+0x80>)
    1dc8:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1dca:	2380      	movs	r3, #128	; 0x80
    1dcc:	6822      	ldr	r2, [r4, #0]
    1dce:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1dd0:	ad01      	add	r5, sp, #4
    1dd2:	0028      	movs	r0, r5
    1dd4:	4b1b      	ldr	r3, [pc, #108]	; (1e44 <_usb_on_bus_reset+0x84>)
    1dd6:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1dd8:	2303      	movs	r3, #3
    1dda:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1ddc:	0029      	movs	r1, r5
    1dde:	0020      	movs	r0, r4
    1de0:	4b19      	ldr	r3, [pc, #100]	; (1e48 <_usb_on_bus_reset+0x88>)
    1de2:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1de4:	4919      	ldr	r1, [pc, #100]	; (1e4c <_usb_on_bus_reset+0x8c>)
    1de6:	0020      	movs	r0, r4
    1de8:	4b19      	ldr	r3, [pc, #100]	; (1e50 <_usb_on_bus_reset+0x90>)
    1dea:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1dec:	4b19      	ldr	r3, [pc, #100]	; (1e54 <_usb_on_bus_reset+0x94>)
    1dee:	2202      	movs	r2, #2
    1df0:	2100      	movs	r1, #0
    1df2:	0020      	movs	r0, r4
    1df4:	4d18      	ldr	r5, [pc, #96]	; (1e58 <_usb_on_bus_reset+0x98>)
    1df6:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1df8:	4b18      	ldr	r3, [pc, #96]	; (1e5c <_usb_on_bus_reset+0x9c>)
    1dfa:	2200      	movs	r2, #0
    1dfc:	2100      	movs	r1, #0
    1dfe:	0020      	movs	r0, r4
    1e00:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1e02:	4b17      	ldr	r3, [pc, #92]	; (1e60 <_usb_on_bus_reset+0xa0>)
    1e04:	2201      	movs	r2, #1
    1e06:	2100      	movs	r1, #0
    1e08:	0020      	movs	r0, r4
    1e0a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1e0c:	2202      	movs	r2, #2
    1e0e:	2100      	movs	r1, #0
    1e10:	0020      	movs	r0, r4
    1e12:	4d14      	ldr	r5, [pc, #80]	; (1e64 <_usb_on_bus_reset+0xa4>)
    1e14:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1e16:	2200      	movs	r2, #0
    1e18:	2100      	movs	r1, #0
    1e1a:	0020      	movs	r0, r4
    1e1c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1e1e:	2201      	movs	r2, #1
    1e20:	2100      	movs	r1, #0
    1e22:	0020      	movs	r0, r4
    1e24:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1e26:	6821      	ldr	r1, [r4, #0]
    1e28:	890b      	ldrh	r3, [r1, #8]
    1e2a:	4a0f      	ldr	r2, [pc, #60]	; (1e68 <_usb_on_bus_reset+0xa8>)
    1e2c:	401a      	ands	r2, r3
    1e2e:	2380      	movs	r3, #128	; 0x80
    1e30:	00db      	lsls	r3, r3, #3
    1e32:	4313      	orrs	r3, r2
    1e34:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1e36:	2200      	movs	r2, #0
    1e38:	4b0c      	ldr	r3, [pc, #48]	; (1e6c <_usb_on_bus_reset+0xac>)
    1e3a:	701a      	strb	r2, [r3, #0]
}
    1e3c:	b003      	add	sp, #12
    1e3e:	bd30      	pop	{r4, r5, pc}
    1e40:	000014cd 	.word	0x000014cd
    1e44:	00002989 	.word	0x00002989
    1e48:	00002999 	.word	0x00002999
    1e4c:	2000050c 	.word	0x2000050c
    1e50:	00002db9 	.word	0x00002db9
    1e54:	00001fa9 	.word	0x00001fa9
    1e58:	00002799 	.word	0x00002799
    1e5c:	00002279 	.word	0x00002279
    1e60:	00001ead 	.word	0x00001ead
    1e64:	000027e9 	.word	0x000027e9
    1e68:	fffff3ff 	.word	0xfffff3ff
    1e6c:	200001ba 	.word	0x200001ba

00001e70 <udd_ctrl_send_zlp_in>:
{
    1e70:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1e72:	2203      	movs	r2, #3
    1e74:	4b07      	ldr	r3, [pc, #28]	; (1e94 <udd_ctrl_send_zlp_in+0x24>)
    1e76:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1e78:	4c07      	ldr	r4, [pc, #28]	; (1e98 <udd_ctrl_send_zlp_in+0x28>)
    1e7a:	4908      	ldr	r1, [pc, #32]	; (1e9c <udd_ctrl_send_zlp_in+0x2c>)
    1e7c:	0020      	movs	r0, r4
    1e7e:	4b08      	ldr	r3, [pc, #32]	; (1ea0 <udd_ctrl_send_zlp_in+0x30>)
    1e80:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1e82:	4b08      	ldr	r3, [pc, #32]	; (1ea4 <udd_ctrl_send_zlp_in+0x34>)
    1e84:	689a      	ldr	r2, [r3, #8]
    1e86:	2300      	movs	r3, #0
    1e88:	2100      	movs	r1, #0
    1e8a:	0020      	movs	r0, r4
    1e8c:	4c06      	ldr	r4, [pc, #24]	; (1ea8 <udd_ctrl_send_zlp_in+0x38>)
    1e8e:	47a0      	blx	r4
}
    1e90:	bd10      	pop	{r4, pc}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	200001ba 	.word	0x200001ba
    1e98:	2000038c 	.word	0x2000038c
    1e9c:	2000050c 	.word	0x2000050c
    1ea0:	00002db9 	.word	0x00002db9
    1ea4:	200004f4 	.word	0x200004f4
    1ea8:	00002d15 	.word	0x00002d15

00001eac <_usb_ep0_on_tansfer_fail>:
{
    1eac:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1eae:	7989      	ldrb	r1, [r1, #6]
    1eb0:	b24b      	sxtb	r3, r1
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	db06      	blt.n	1ec4 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1eb6:	4b0e      	ldr	r3, [pc, #56]	; (1ef0 <_usb_ep0_on_tansfer_fail+0x44>)
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	2b02      	cmp	r3, #2
    1ebc:	d00f      	beq.n	1ede <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1ebe:	2b03      	cmp	r3, #3
    1ec0:	d011      	beq.n	1ee6 <_usb_ep0_on_tansfer_fail+0x3a>
}
    1ec2:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1ec4:	4b0a      	ldr	r3, [pc, #40]	; (1ef0 <_usb_ep0_on_tansfer_fail+0x44>)
    1ec6:	781b      	ldrb	r3, [r3, #0]
    1ec8:	2b01      	cmp	r3, #1
    1eca:	d005      	beq.n	1ed8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1ecc:	2b04      	cmp	r3, #4
    1ece:	d1f8      	bne.n	1ec2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1ed0:	4808      	ldr	r0, [pc, #32]	; (1ef4 <_usb_ep0_on_tansfer_fail+0x48>)
    1ed2:	4b09      	ldr	r3, [pc, #36]	; (1ef8 <_usb_ep0_on_tansfer_fail+0x4c>)
    1ed4:	4798      	blx	r3
    1ed6:	e7f4      	b.n	1ec2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1ed8:	4b08      	ldr	r3, [pc, #32]	; (1efc <_usb_ep0_on_tansfer_fail+0x50>)
    1eda:	4798      	blx	r3
    1edc:	e7f1      	b.n	1ec2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1ede:	2204      	movs	r2, #4
    1ee0:	4b03      	ldr	r3, [pc, #12]	; (1ef0 <_usb_ep0_on_tansfer_fail+0x44>)
    1ee2:	701a      	strb	r2, [r3, #0]
    1ee4:	e7ed      	b.n	1ec2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1ee6:	4803      	ldr	r0, [pc, #12]	; (1ef4 <_usb_ep0_on_tansfer_fail+0x48>)
    1ee8:	4b03      	ldr	r3, [pc, #12]	; (1ef8 <_usb_ep0_on_tansfer_fail+0x4c>)
    1eea:	4798      	blx	r3
}
    1eec:	e7e9      	b.n	1ec2 <_usb_ep0_on_tansfer_fail+0x16>
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	200001ba 	.word	0x200001ba
    1ef4:	2000038c 	.word	0x2000038c
    1ef8:	00002c69 	.word	0x00002c69
    1efc:	00001e71 	.word	0x00001e71

00001f00 <udd_ctrl_in_sent>:
{
    1f00:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1f02:	4b20      	ldr	r3, [pc, #128]	; (1f84 <udd_ctrl_in_sent+0x84>)
    1f04:	881b      	ldrh	r3, [r3, #0]
    1f06:	4a20      	ldr	r2, [pc, #128]	; (1f88 <udd_ctrl_in_sent+0x88>)
    1f08:	8994      	ldrh	r4, [r2, #12]
    1f0a:	1ae4      	subs	r4, r4, r3
    1f0c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    1f0e:	2c00      	cmp	r4, #0
    1f10:	d118      	bne.n	1f44 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f12:	4a1e      	ldr	r2, [pc, #120]	; (1f8c <udd_ctrl_in_sent+0x8c>)
    1f14:	8811      	ldrh	r1, [r2, #0]
    1f16:	185b      	adds	r3, r3, r1
    1f18:	b29b      	uxth	r3, r3
    1f1a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1f1c:	4a1a      	ldr	r2, [pc, #104]	; (1f88 <udd_ctrl_in_sent+0x88>)
    1f1e:	88d2      	ldrh	r2, [r2, #6]
    1f20:	429a      	cmp	r2, r3
    1f22:	d023      	beq.n	1f6c <udd_ctrl_in_sent+0x6c>
    1f24:	4b1a      	ldr	r3, [pc, #104]	; (1f90 <udd_ctrl_in_sent+0x90>)
    1f26:	781b      	ldrb	r3, [r3, #0]
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d11f      	bne.n	1f6c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1f2c:	4b16      	ldr	r3, [pc, #88]	; (1f88 <udd_ctrl_in_sent+0x88>)
    1f2e:	695b      	ldr	r3, [r3, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d023      	beq.n	1f7c <udd_ctrl_in_sent+0x7c>
    1f34:	4798      	blx	r3
    1f36:	2800      	cmp	r0, #0
    1f38:	d020      	beq.n	1f7c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    1f3a:	2200      	movs	r2, #0
    1f3c:	4b11      	ldr	r3, [pc, #68]	; (1f84 <udd_ctrl_in_sent+0x84>)
    1f3e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1f40:	4b11      	ldr	r3, [pc, #68]	; (1f88 <udd_ctrl_in_sent+0x88>)
    1f42:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1f44:	2c3f      	cmp	r4, #63	; 0x3f
    1f46:	d919      	bls.n	1f7c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    1f48:	2200      	movs	r2, #0
    1f4a:	4b11      	ldr	r3, [pc, #68]	; (1f90 <udd_ctrl_in_sent+0x90>)
    1f4c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1f4e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1f50:	4d0c      	ldr	r5, [pc, #48]	; (1f84 <udd_ctrl_in_sent+0x84>)
    1f52:	882b      	ldrh	r3, [r5, #0]
    1f54:	4a0c      	ldr	r2, [pc, #48]	; (1f88 <udd_ctrl_in_sent+0x88>)
    1f56:	6892      	ldr	r2, [r2, #8]
    1f58:	18d2      	adds	r2, r2, r3
    1f5a:	0023      	movs	r3, r4
    1f5c:	2100      	movs	r1, #0
    1f5e:	480d      	ldr	r0, [pc, #52]	; (1f94 <udd_ctrl_in_sent+0x94>)
    1f60:	4e0d      	ldr	r6, [pc, #52]	; (1f98 <udd_ctrl_in_sent+0x98>)
    1f62:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1f64:	882b      	ldrh	r3, [r5, #0]
    1f66:	18e4      	adds	r4, r4, r3
    1f68:	802c      	strh	r4, [r5, #0]
}
    1f6a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1f6c:	2204      	movs	r2, #4
    1f6e:	4b0b      	ldr	r3, [pc, #44]	; (1f9c <udd_ctrl_in_sent+0x9c>)
    1f70:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1f72:	490b      	ldr	r1, [pc, #44]	; (1fa0 <udd_ctrl_in_sent+0xa0>)
    1f74:	4807      	ldr	r0, [pc, #28]	; (1f94 <udd_ctrl_in_sent+0x94>)
    1f76:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <udd_ctrl_in_sent+0xa4>)
    1f78:	4798      	blx	r3
			return;
    1f7a:	e7f6      	b.n	1f6a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    1f7c:	2201      	movs	r2, #1
    1f7e:	4b04      	ldr	r3, [pc, #16]	; (1f90 <udd_ctrl_in_sent+0x90>)
    1f80:	701a      	strb	r2, [r3, #0]
    1f82:	e7e5      	b.n	1f50 <udd_ctrl_in_sent+0x50>
    1f84:	200001b6 	.word	0x200001b6
    1f88:	200004f4 	.word	0x200004f4
    1f8c:	200001b8 	.word	0x200001b8
    1f90:	200001b4 	.word	0x200001b4
    1f94:	2000038c 	.word	0x2000038c
    1f98:	00002d15 	.word	0x00002d15
    1f9c:	200001ba 	.word	0x200001ba
    1fa0:	2000050c 	.word	0x2000050c
    1fa4:	00002db9 	.word	0x00002db9

00001fa8 <_usb_ep0_on_setup>:
{
    1fa8:	b510      	push	{r4, lr}
    1faa:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1fac:	4b2c      	ldr	r3, [pc, #176]	; (2060 <STACK_SIZE+0x60>)
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d007      	beq.n	1fc4 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    1fb4:	4b2b      	ldr	r3, [pc, #172]	; (2064 <STACK_SIZE+0x64>)
    1fb6:	691b      	ldr	r3, [r3, #16]
    1fb8:	2b00      	cmp	r3, #0
    1fba:	d000      	beq.n	1fbe <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    1fbc:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    1fbe:	2200      	movs	r2, #0
    1fc0:	4b27      	ldr	r3, [pc, #156]	; (2060 <STACK_SIZE+0x60>)
    1fc2:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1fc4:	8823      	ldrh	r3, [r4, #0]
    1fc6:	2b08      	cmp	r3, #8
    1fc8:	d002      	beq.n	1fd0 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1fca:	4b27      	ldr	r3, [pc, #156]	; (2068 <STACK_SIZE+0x68>)
    1fcc:	4798      	blx	r3
}
    1fce:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    1fd0:	4a24      	ldr	r2, [pc, #144]	; (2064 <STACK_SIZE+0x64>)
    1fd2:	4b26      	ldr	r3, [pc, #152]	; (206c <STACK_SIZE+0x6c>)
    1fd4:	7819      	ldrb	r1, [r3, #0]
    1fd6:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1fd8:	7859      	ldrb	r1, [r3, #1]
    1fda:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1fdc:	78d8      	ldrb	r0, [r3, #3]
    1fde:	0200      	lsls	r0, r0, #8
    1fe0:	7899      	ldrb	r1, [r3, #2]
    1fe2:	1809      	adds	r1, r1, r0
    1fe4:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1fe6:	7958      	ldrb	r0, [r3, #5]
    1fe8:	0200      	lsls	r0, r0, #8
    1fea:	7919      	ldrb	r1, [r3, #4]
    1fec:	1809      	adds	r1, r1, r0
    1fee:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    1ff0:	79d9      	ldrb	r1, [r3, #7]
    1ff2:	0209      	lsls	r1, r1, #8
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	185b      	adds	r3, r3, r1
    1ff8:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    1ffa:	4b1d      	ldr	r3, [pc, #116]	; (2070 <STACK_SIZE+0x70>)
    1ffc:	4798      	blx	r3
    1ffe:	2800      	cmp	r0, #0
    2000:	d016      	beq.n	2030 <STACK_SIZE+0x30>
		} else if (Udd_setup_is_in()) {
    2002:	4b18      	ldr	r3, [pc, #96]	; (2064 <STACK_SIZE+0x64>)
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	2b7f      	cmp	r3, #127	; 0x7f
    2008:	d815      	bhi.n	2036 <STACK_SIZE+0x36>
			if(0 == udd_g_ctrlreq.req.wLength) {
    200a:	4b16      	ldr	r3, [pc, #88]	; (2064 <STACK_SIZE+0x64>)
    200c:	88db      	ldrh	r3, [r3, #6]
    200e:	2b00      	cmp	r3, #0
    2010:	d022      	beq.n	2058 <STACK_SIZE+0x58>
				udd_ctrl_prev_payload_nb_trans = 0;
    2012:	2300      	movs	r3, #0
    2014:	4a17      	ldr	r2, [pc, #92]	; (2074 <STACK_SIZE+0x74>)
    2016:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2018:	4a17      	ldr	r2, [pc, #92]	; (2078 <STACK_SIZE+0x78>)
    201a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    201c:	2201      	movs	r2, #1
    201e:	4b10      	ldr	r3, [pc, #64]	; (2060 <STACK_SIZE+0x60>)
    2020:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2022:	2340      	movs	r3, #64	; 0x40
    2024:	4a11      	ldr	r2, [pc, #68]	; (206c <STACK_SIZE+0x6c>)
    2026:	2100      	movs	r1, #0
    2028:	4814      	ldr	r0, [pc, #80]	; (207c <STACK_SIZE+0x7c>)
    202a:	4c15      	ldr	r4, [pc, #84]	; (2080 <STACK_SIZE+0x80>)
    202c:	47a0      	blx	r4
    202e:	e7ce      	b.n	1fce <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2030:	4b0d      	ldr	r3, [pc, #52]	; (2068 <STACK_SIZE+0x68>)
    2032:	4798      	blx	r3
			return;
    2034:	e7cb      	b.n	1fce <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2036:	2300      	movs	r3, #0
    2038:	4a0e      	ldr	r2, [pc, #56]	; (2074 <STACK_SIZE+0x74>)
    203a:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    203c:	4a0e      	ldr	r2, [pc, #56]	; (2078 <STACK_SIZE+0x78>)
    203e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2040:	2202      	movs	r2, #2
    2042:	4b07      	ldr	r3, [pc, #28]	; (2060 <STACK_SIZE+0x60>)
    2044:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2046:	2340      	movs	r3, #64	; 0x40
    2048:	4a08      	ldr	r2, [pc, #32]	; (206c <STACK_SIZE+0x6c>)
    204a:	2100      	movs	r1, #0
    204c:	480b      	ldr	r0, [pc, #44]	; (207c <STACK_SIZE+0x7c>)
    204e:	4c0c      	ldr	r4, [pc, #48]	; (2080 <STACK_SIZE+0x80>)
    2050:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2052:	4b0c      	ldr	r3, [pc, #48]	; (2084 <STACK_SIZE+0x84>)
    2054:	4798      	blx	r3
    2056:	e7ba      	b.n	1fce <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2058:	4b0b      	ldr	r3, [pc, #44]	; (2088 <STACK_SIZE+0x88>)
    205a:	4798      	blx	r3
				return;
    205c:	e7b7      	b.n	1fce <_usb_ep0_on_setup+0x26>
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	200001ba 	.word	0x200001ba
    2064:	200004f4 	.word	0x200004f4
    2068:	00001ccd 	.word	0x00001ccd
    206c:	2000050c 	.word	0x2000050c
    2070:	0000155d 	.word	0x0000155d
    2074:	200001b8 	.word	0x200001b8
    2078:	200001b6 	.word	0x200001b6
    207c:	2000038c 	.word	0x2000038c
    2080:	00002d69 	.word	0x00002d69
    2084:	00001f01 	.word	0x00001f01
    2088:	00001e71 	.word	0x00001e71

0000208c <_usb_on_sof_notify>:
{
    208c:	b510      	push	{r4, lr}
	udc_sof_notify();
    208e:	4b01      	ldr	r3, [pc, #4]	; (2094 <_usb_on_sof_notify+0x8>)
    2090:	4798      	blx	r3
}
    2092:	bd10      	pop	{r4, pc}
    2094:	00001519 	.word	0x00001519

00002098 <udd_ep_abort>:
{
    2098:	b510      	push	{r4, lr}
    209a:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    209c:	0001      	movs	r1, r0
    209e:	480a      	ldr	r0, [pc, #40]	; (20c8 <udd_ep_abort+0x30>)
    20a0:	4b0a      	ldr	r3, [pc, #40]	; (20cc <udd_ep_abort+0x34>)
    20a2:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    20a4:	0020      	movs	r0, r4
    20a6:	4b0a      	ldr	r3, [pc, #40]	; (20d0 <udd_ep_abort+0x38>)
    20a8:	4798      	blx	r3
	if (!ptr_job->busy) {
    20aa:	7c83      	ldrb	r3, [r0, #18]
    20ac:	07db      	lsls	r3, r3, #31
    20ae:	d50a      	bpl.n	20c6 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    20b0:	7c83      	ldrb	r3, [r0, #18]
    20b2:	2201      	movs	r2, #1
    20b4:	4393      	bics	r3, r2
    20b6:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    20b8:	6803      	ldr	r3, [r0, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d003      	beq.n	20c6 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    20be:	68c1      	ldr	r1, [r0, #12]
    20c0:	0022      	movs	r2, r4
    20c2:	2001      	movs	r0, #1
    20c4:	4798      	blx	r3
}
    20c6:	bd10      	pop	{r4, pc}
    20c8:	2000038c 	.word	0x2000038c
    20cc:	00002c09 	.word	0x00002c09
    20d0:	00001af5 	.word	0x00001af5

000020d4 <udd_ep_free>:
{
    20d4:	b570      	push	{r4, r5, r6, lr}
    20d6:	b082      	sub	sp, #8
    20d8:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    20da:	ad01      	add	r5, sp, #4
    20dc:	0028      	movs	r0, r5
    20de:	4b0d      	ldr	r3, [pc, #52]	; (2114 <udd_ep_free+0x40>)
    20e0:	4798      	blx	r3
	udd_ep_abort(ep);
    20e2:	0020      	movs	r0, r4
    20e4:	4b0c      	ldr	r3, [pc, #48]	; (2118 <udd_ep_free+0x44>)
    20e6:	4798      	blx	r3
	config_ep.ep_address = ep;
    20e8:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    20ea:	2300      	movs	r3, #0
    20ec:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    20ee:	4e0b      	ldr	r6, [pc, #44]	; (211c <udd_ep_free+0x48>)
    20f0:	0029      	movs	r1, r5
    20f2:	0030      	movs	r0, r6
    20f4:	4b0a      	ldr	r3, [pc, #40]	; (2120 <udd_ep_free+0x4c>)
    20f6:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    20f8:	210f      	movs	r1, #15
    20fa:	4021      	ands	r1, r4
    20fc:	2200      	movs	r2, #0
    20fe:	0030      	movs	r0, r6
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <udd_ep_free+0x50>)
    2102:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2104:	2200      	movs	r2, #0
    2106:	0021      	movs	r1, r4
    2108:	0030      	movs	r0, r6
    210a:	4b07      	ldr	r3, [pc, #28]	; (2128 <udd_ep_free+0x54>)
    210c:	4798      	blx	r3
}
    210e:	b002      	add	sp, #8
    2110:	bd70      	pop	{r4, r5, r6, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	00002989 	.word	0x00002989
    2118:	00002099 	.word	0x00002099
    211c:	2000038c 	.word	0x2000038c
    2120:	00002999 	.word	0x00002999
    2124:	000027c1 	.word	0x000027c1
    2128:	000028b9 	.word	0x000028b9

0000212c <udd_ep_alloc>:
{
    212c:	b5f0      	push	{r4, r5, r6, r7, lr}
    212e:	b083      	sub	sp, #12
    2130:	0005      	movs	r5, r0
    2132:	000f      	movs	r7, r1
    2134:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2136:	ae01      	add	r6, sp, #4
    2138:	0030      	movs	r0, r6
    213a:	4b36      	ldr	r3, [pc, #216]	; (2214 <udd_ep_alloc+0xe8>)
    213c:	4798      	blx	r3
	config_ep.ep_address = ep;
    213e:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2140:	2c08      	cmp	r4, #8
    2142:	d813      	bhi.n	216c <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2144:	2200      	movs	r2, #0
    2146:	ab01      	add	r3, sp, #4
    2148:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    214a:	0028      	movs	r0, r5
    214c:	4b32      	ldr	r3, [pc, #200]	; (2218 <udd_ep_alloc+0xec>)
    214e:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2150:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2152:	2103      	movs	r1, #3
    2154:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2156:	2901      	cmp	r1, #1
    2158:	d038      	beq.n	21cc <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    215a:	2902      	cmp	r1, #2
    215c:	d043      	beq.n	21e6 <udd_ep_alloc+0xba>
		return false;
    215e:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2160:	2903      	cmp	r1, #3
    2162:	d13d      	bne.n	21e0 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2164:	2204      	movs	r2, #4
    2166:	ab01      	add	r3, sp, #4
    2168:	70da      	strb	r2, [r3, #3]
    216a:	e032      	b.n	21d2 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    216c:	2c10      	cmp	r4, #16
    216e:	d803      	bhi.n	2178 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2170:	2201      	movs	r2, #1
    2172:	ab01      	add	r3, sp, #4
    2174:	705a      	strb	r2, [r3, #1]
    2176:	e7e8      	b.n	214a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2178:	2c20      	cmp	r4, #32
    217a:	d803      	bhi.n	2184 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    217c:	2202      	movs	r2, #2
    217e:	ab01      	add	r3, sp, #4
    2180:	705a      	strb	r2, [r3, #1]
    2182:	e7e2      	b.n	214a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2184:	2c40      	cmp	r4, #64	; 0x40
    2186:	d803      	bhi.n	2190 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2188:	2203      	movs	r2, #3
    218a:	ab01      	add	r3, sp, #4
    218c:	705a      	strb	r2, [r3, #1]
    218e:	e7dc      	b.n	214a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2190:	2c80      	cmp	r4, #128	; 0x80
    2192:	d803      	bhi.n	219c <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2194:	2204      	movs	r2, #4
    2196:	ab01      	add	r3, sp, #4
    2198:	705a      	strb	r2, [r3, #1]
    219a:	e7d6      	b.n	214a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    219c:	2380      	movs	r3, #128	; 0x80
    219e:	005b      	lsls	r3, r3, #1
    21a0:	429c      	cmp	r4, r3
    21a2:	d803      	bhi.n	21ac <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    21a4:	2205      	movs	r2, #5
    21a6:	ab01      	add	r3, sp, #4
    21a8:	705a      	strb	r2, [r3, #1]
    21aa:	e7ce      	b.n	214a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    21ac:	2380      	movs	r3, #128	; 0x80
    21ae:	009b      	lsls	r3, r3, #2
    21b0:	429c      	cmp	r4, r3
    21b2:	d803      	bhi.n	21bc <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    21b4:	2206      	movs	r2, #6
    21b6:	ab01      	add	r3, sp, #4
    21b8:	705a      	strb	r2, [r3, #1]
    21ba:	e7c6      	b.n	214a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    21bc:	4a17      	ldr	r2, [pc, #92]	; (221c <udd_ep_alloc+0xf0>)
		return false;
    21be:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    21c0:	4294      	cmp	r4, r2
    21c2:	d80d      	bhi.n	21e0 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    21c4:	2207      	movs	r2, #7
    21c6:	ab01      	add	r3, sp, #4
    21c8:	705a      	strb	r2, [r3, #1]
    21ca:	e7be      	b.n	214a <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    21cc:	2202      	movs	r2, #2
    21ce:	ab01      	add	r3, sp, #4
    21d0:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    21d2:	a901      	add	r1, sp, #4
    21d4:	4812      	ldr	r0, [pc, #72]	; (2220 <udd_ep_alloc+0xf4>)
    21d6:	4b13      	ldr	r3, [pc, #76]	; (2224 <udd_ep_alloc+0xf8>)
    21d8:	4798      	blx	r3
		return false;
    21da:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    21dc:	2800      	cmp	r0, #0
    21de:	d006      	beq.n	21ee <udd_ep_alloc+0xc2>
}
    21e0:	0018      	movs	r0, r3
    21e2:	b003      	add	sp, #12
    21e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    21e6:	2203      	movs	r2, #3
    21e8:	ab01      	add	r3, sp, #4
    21ea:	70da      	strb	r2, [r3, #3]
    21ec:	e7f1      	b.n	21d2 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    21ee:	210f      	movs	r1, #15
    21f0:	4029      	ands	r1, r5
    21f2:	4c0b      	ldr	r4, [pc, #44]	; (2220 <udd_ep_alloc+0xf4>)
    21f4:	4b0c      	ldr	r3, [pc, #48]	; (2228 <udd_ep_alloc+0xfc>)
    21f6:	2200      	movs	r2, #0
    21f8:	0020      	movs	r0, r4
    21fa:	4e0c      	ldr	r6, [pc, #48]	; (222c <udd_ep_alloc+0x100>)
    21fc:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    21fe:	2200      	movs	r2, #0
    2200:	0029      	movs	r1, r5
    2202:	0020      	movs	r0, r4
    2204:	4e0a      	ldr	r6, [pc, #40]	; (2230 <udd_ep_alloc+0x104>)
    2206:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2208:	2201      	movs	r2, #1
    220a:	0029      	movs	r1, r5
    220c:	0020      	movs	r0, r4
    220e:	47b0      	blx	r6
	return true;
    2210:	2301      	movs	r3, #1
    2212:	e7e5      	b.n	21e0 <udd_ep_alloc+0xb4>
    2214:	00002989 	.word	0x00002989
    2218:	00001af5 	.word	0x00001af5
    221c:	000003ff 	.word	0x000003ff
    2220:	2000038c 	.word	0x2000038c
    2224:	00002999 	.word	0x00002999
    2228:	00001b19 	.word	0x00001b19
    222c:	00002799 	.word	0x00002799
    2230:	000027e9 	.word	0x000027e9

00002234 <udd_ep_is_halted>:
{
    2234:	b510      	push	{r4, lr}
    2236:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2238:	4801      	ldr	r0, [pc, #4]	; (2240 <udd_ep_is_halted+0xc>)
    223a:	4b02      	ldr	r3, [pc, #8]	; (2244 <udd_ep_is_halted+0x10>)
    223c:	4798      	blx	r3
}
    223e:	bd10      	pop	{r4, pc}
    2240:	2000038c 	.word	0x2000038c
    2244:	00002c3f 	.word	0x00002c3f

00002248 <udd_ep_set_halt>:
{
    2248:	b510      	push	{r4, lr}
    224a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    224c:	230f      	movs	r3, #15
    224e:	4003      	ands	r3, r0
		return false;
    2250:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2252:	2b02      	cmp	r3, #2
    2254:	d900      	bls.n	2258 <udd_ep_set_halt+0x10>
}
    2256:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2258:	0021      	movs	r1, r4
    225a:	4804      	ldr	r0, [pc, #16]	; (226c <udd_ep_set_halt+0x24>)
    225c:	4b04      	ldr	r3, [pc, #16]	; (2270 <udd_ep_set_halt+0x28>)
    225e:	4798      	blx	r3
	udd_ep_abort(ep);
    2260:	0020      	movs	r0, r4
    2262:	4b04      	ldr	r3, [pc, #16]	; (2274 <udd_ep_set_halt+0x2c>)
    2264:	4798      	blx	r3
	return true;
    2266:	2001      	movs	r0, #1
    2268:	e7f5      	b.n	2256 <udd_ep_set_halt+0xe>
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	2000038c 	.word	0x2000038c
    2270:	00002c69 	.word	0x00002c69
    2274:	00002099 	.word	0x00002099

00002278 <_usb_ep0_on_tansfer_ok>:
{
    2278:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    227a:	4b34      	ldr	r3, [pc, #208]	; (234c <_usb_ep0_on_tansfer_ok+0xd4>)
    227c:	781b      	ldrb	r3, [r3, #0]
    227e:	2b01      	cmp	r3, #1
    2280:	d00a      	beq.n	2298 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2282:	2b02      	cmp	r3, #2
    2284:	d05f      	beq.n	2346 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    2286:	4b32      	ldr	r3, [pc, #200]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    2288:	691b      	ldr	r3, [r3, #16]
    228a:	2b00      	cmp	r3, #0
    228c:	d000      	beq.n	2290 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    228e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2290:	2200      	movs	r2, #0
    2292:	4b2e      	ldr	r3, [pc, #184]	; (234c <_usb_ep0_on_tansfer_ok+0xd4>)
    2294:	701a      	strb	r2, [r3, #0]
}
    2296:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2298:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    229a:	4b2d      	ldr	r3, [pc, #180]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    229c:	899b      	ldrh	r3, [r3, #12]
    229e:	4a2d      	ldr	r2, [pc, #180]	; (2354 <_usb_ep0_on_tansfer_ok+0xdc>)
    22a0:	8814      	ldrh	r4, [r2, #0]
    22a2:	1962      	adds	r2, r4, r5
    22a4:	4293      	cmp	r3, r2
    22a6:	da01      	bge.n	22ac <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    22a8:	1b1d      	subs	r5, r3, r4
    22aa:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    22ac:	4b28      	ldr	r3, [pc, #160]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    22ae:	6898      	ldr	r0, [r3, #8]
    22b0:	1900      	adds	r0, r0, r4
    22b2:	002a      	movs	r2, r5
    22b4:	4928      	ldr	r1, [pc, #160]	; (2358 <_usb_ep0_on_tansfer_ok+0xe0>)
    22b6:	4b29      	ldr	r3, [pc, #164]	; (235c <_usb_ep0_on_tansfer_ok+0xe4>)
    22b8:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    22ba:	1964      	adds	r4, r4, r5
    22bc:	b2a4      	uxth	r4, r4
    22be:	4b25      	ldr	r3, [pc, #148]	; (2354 <_usb_ep0_on_tansfer_ok+0xdc>)
    22c0:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    22c2:	2d40      	cmp	r5, #64	; 0x40
    22c4:	d00a      	beq.n	22dc <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    22c6:	4b22      	ldr	r3, [pc, #136]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    22c8:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    22ca:	695b      	ldr	r3, [r3, #20]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d002      	beq.n	22d6 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    22d0:	4798      	blx	r3
    22d2:	2800      	cmp	r0, #0
    22d4:	d014      	beq.n	2300 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    22d6:	4b22      	ldr	r3, [pc, #136]	; (2360 <_usb_ep0_on_tansfer_ok+0xe8>)
    22d8:	4798      	blx	r3
    22da:	e7dc      	b.n	2296 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    22dc:	4b1c      	ldr	r3, [pc, #112]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    22de:	88da      	ldrh	r2, [r3, #6]
    22e0:	4b20      	ldr	r3, [pc, #128]	; (2364 <_usb_ep0_on_tansfer_ok+0xec>)
    22e2:	881b      	ldrh	r3, [r3, #0]
    22e4:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    22e6:	429a      	cmp	r2, r3
    22e8:	dded      	ble.n	22c6 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    22ea:	4b19      	ldr	r3, [pc, #100]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    22ec:	899b      	ldrh	r3, [r3, #12]
    22ee:	42a3      	cmp	r3, r4
    22f0:	d00c      	beq.n	230c <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    22f2:	2340      	movs	r3, #64	; 0x40
    22f4:	4a18      	ldr	r2, [pc, #96]	; (2358 <_usb_ep0_on_tansfer_ok+0xe0>)
    22f6:	2100      	movs	r1, #0
    22f8:	481b      	ldr	r0, [pc, #108]	; (2368 <_usb_ep0_on_tansfer_ok+0xf0>)
    22fa:	4c1c      	ldr	r4, [pc, #112]	; (236c <_usb_ep0_on_tansfer_ok+0xf4>)
    22fc:	47a0      	blx	r4
    22fe:	e7ca      	b.n	2296 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2300:	2205      	movs	r2, #5
    2302:	4b12      	ldr	r3, [pc, #72]	; (234c <_usb_ep0_on_tansfer_ok+0xd4>)
    2304:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    2306:	4b1a      	ldr	r3, [pc, #104]	; (2370 <_usb_ep0_on_tansfer_ok+0xf8>)
    2308:	4798      	blx	r3
    230a:	e7c4      	b.n	2296 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    230c:	4b10      	ldr	r3, [pc, #64]	; (2350 <_usb_ep0_on_tansfer_ok+0xd8>)
    230e:	695b      	ldr	r3, [r3, #20]
    2310:	2b00      	cmp	r3, #0
    2312:	d00b      	beq.n	232c <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    2314:	4798      	blx	r3
    2316:	2800      	cmp	r0, #0
    2318:	d00f      	beq.n	233a <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    231a:	4912      	ldr	r1, [pc, #72]	; (2364 <_usb_ep0_on_tansfer_ok+0xec>)
    231c:	4a0d      	ldr	r2, [pc, #52]	; (2354 <_usb_ep0_on_tansfer_ok+0xdc>)
    231e:	880b      	ldrh	r3, [r1, #0]
    2320:	8810      	ldrh	r0, [r2, #0]
    2322:	181b      	adds	r3, r3, r0
    2324:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    2326:	2300      	movs	r3, #0
    2328:	8013      	strh	r3, [r2, #0]
    232a:	e7e2      	b.n	22f2 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    232c:	2205      	movs	r2, #5
    232e:	4b07      	ldr	r3, [pc, #28]	; (234c <_usb_ep0_on_tansfer_ok+0xd4>)
    2330:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2332:	2000      	movs	r0, #0
    2334:	4b0e      	ldr	r3, [pc, #56]	; (2370 <_usb_ep0_on_tansfer_ok+0xf8>)
    2336:	4798      	blx	r3
    2338:	e7ad      	b.n	2296 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    233a:	2205      	movs	r2, #5
    233c:	4b03      	ldr	r3, [pc, #12]	; (234c <_usb_ep0_on_tansfer_ok+0xd4>)
    233e:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2340:	4b0b      	ldr	r3, [pc, #44]	; (2370 <_usb_ep0_on_tansfer_ok+0xf8>)
    2342:	4798      	blx	r3
    2344:	e7a7      	b.n	2296 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    2346:	4b0b      	ldr	r3, [pc, #44]	; (2374 <_usb_ep0_on_tansfer_ok+0xfc>)
    2348:	4798      	blx	r3
    234a:	e7a4      	b.n	2296 <_usb_ep0_on_tansfer_ok+0x1e>
    234c:	200001ba 	.word	0x200001ba
    2350:	200004f4 	.word	0x200004f4
    2354:	200001b6 	.word	0x200001b6
    2358:	2000050c 	.word	0x2000050c
    235c:	00005cad 	.word	0x00005cad
    2360:	00001e71 	.word	0x00001e71
    2364:	200001b8 	.word	0x200001b8
    2368:	2000038c 	.word	0x2000038c
    236c:	00002d69 	.word	0x00002d69
    2370:	00002249 	.word	0x00002249
    2374:	00001f01 	.word	0x00001f01

00002378 <udd_ep_clear_halt>:
{
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    237c:	230f      	movs	r3, #15
    237e:	4003      	ands	r3, r0
		return false;
    2380:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2382:	2b02      	cmp	r3, #2
    2384:	d900      	bls.n	2388 <udd_ep_clear_halt+0x10>
}
    2386:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2388:	0020      	movs	r0, r4
    238a:	4b09      	ldr	r3, [pc, #36]	; (23b0 <udd_ep_clear_halt+0x38>)
    238c:	4798      	blx	r3
    238e:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2390:	0021      	movs	r1, r4
    2392:	4808      	ldr	r0, [pc, #32]	; (23b4 <udd_ep_clear_halt+0x3c>)
    2394:	4b08      	ldr	r3, [pc, #32]	; (23b8 <udd_ep_clear_halt+0x40>)
    2396:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2398:	7cab      	ldrb	r3, [r5, #18]
	return true;
    239a:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    239c:	07db      	lsls	r3, r3, #31
    239e:	d5f2      	bpl.n	2386 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    23a0:	7cab      	ldrb	r3, [r5, #18]
    23a2:	2201      	movs	r2, #1
    23a4:	4393      	bics	r3, r2
    23a6:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    23a8:	682b      	ldr	r3, [r5, #0]
    23aa:	4798      	blx	r3
	return true;
    23ac:	2001      	movs	r0, #1
    23ae:	e7ea      	b.n	2386 <udd_ep_clear_halt+0xe>
    23b0:	00001af5 	.word	0x00001af5
    23b4:	2000038c 	.word	0x2000038c
    23b8:	00002c8f 	.word	0x00002c8f

000023bc <udd_ep_wait_stall_clear>:
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23be:	0004      	movs	r4, r0
    23c0:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    23c2:	230f      	movs	r3, #15
    23c4:	4003      	ands	r3, r0
		return false;
    23c6:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    23c8:	2b02      	cmp	r3, #2
    23ca:	d805      	bhi.n	23d8 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    23cc:	4b0d      	ldr	r3, [pc, #52]	; (2404 <udd_ep_wait_stall_clear+0x48>)
    23ce:	4798      	blx	r3
    23d0:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    23d2:	7c83      	ldrb	r3, [r0, #18]
    23d4:	07db      	lsls	r3, r3, #31
    23d6:	d501      	bpl.n	23dc <udd_ep_wait_stall_clear+0x20>
}
    23d8:	0030      	movs	r0, r6
    23da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    23dc:	0021      	movs	r1, r4
    23de:	480a      	ldr	r0, [pc, #40]	; (2408 <udd_ep_wait_stall_clear+0x4c>)
    23e0:	4b0a      	ldr	r3, [pc, #40]	; (240c <udd_ep_wait_stall_clear+0x50>)
    23e2:	4798      	blx	r3
    23e4:	1e06      	subs	r6, r0, #0
    23e6:	d005      	beq.n	23f4 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    23e8:	7cbb      	ldrb	r3, [r7, #18]
    23ea:	2201      	movs	r2, #1
    23ec:	4313      	orrs	r3, r2
    23ee:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    23f0:	603d      	str	r5, [r7, #0]
		return true;
    23f2:	e7f1      	b.n	23d8 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    23f4:	0021      	movs	r1, r4
    23f6:	4804      	ldr	r0, [pc, #16]	; (2408 <udd_ep_wait_stall_clear+0x4c>)
    23f8:	4b05      	ldr	r3, [pc, #20]	; (2410 <udd_ep_wait_stall_clear+0x54>)
    23fa:	4798      	blx	r3
    23fc:	1e06      	subs	r6, r0, #0
    23fe:	d0eb      	beq.n	23d8 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    2400:	47a8      	blx	r5
		return true;
    2402:	e7e9      	b.n	23d8 <udd_ep_wait_stall_clear+0x1c>
    2404:	00001af5 	.word	0x00001af5
    2408:	2000038c 	.word	0x2000038c
    240c:	00002c3f 	.word	0x00002c3f
    2410:	00002bdd 	.word	0x00002bdd

00002414 <udd_ep_run>:
{
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
    2416:	b087      	sub	sp, #28
    2418:	0005      	movs	r5, r0
    241a:	9103      	str	r1, [sp, #12]
    241c:	9202      	str	r2, [sp, #8]
    241e:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    2420:	260f      	movs	r6, #15
    2422:	4006      	ands	r6, r0
		return false;
    2424:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2426:	2e02      	cmp	r6, #2
    2428:	d902      	bls.n	2430 <udd_ep_run+0x1c>
}
    242a:	0020      	movs	r0, r4
    242c:	b007      	add	sp, #28
    242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2430:	4b64      	ldr	r3, [pc, #400]	; (25c4 <udd_ep_run+0x1b0>)
    2432:	4798      	blx	r3
    2434:	1e04      	subs	r4, r0, #0
    2436:	d000      	beq.n	243a <udd_ep_run+0x26>
    2438:	e0bd      	b.n	25b6 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    243a:	0028      	movs	r0, r5
    243c:	4b62      	ldr	r3, [pc, #392]	; (25c8 <udd_ep_run+0x1b4>)
    243e:	4798      	blx	r3
    2440:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2442:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2446:	425a      	negs	r2, r3
    2448:	4153      	adcs	r3, r2
    244a:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    244c:	b672      	cpsid	i
    244e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2452:	2200      	movs	r2, #0
    2454:	4b5d      	ldr	r3, [pc, #372]	; (25cc <udd_ep_run+0x1b8>)
    2456:	701a      	strb	r2, [r3, #0]
	return flags;
    2458:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    245a:	7c83      	ldrb	r3, [r0, #18]
    245c:	07db      	lsls	r3, r3, #31
    245e:	d508      	bpl.n	2472 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    2460:	2a00      	cmp	r2, #0
    2462:	d0e2      	beq.n	242a <udd_ep_run+0x16>
		cpu_irq_enable();
    2464:	2201      	movs	r2, #1
    2466:	4b59      	ldr	r3, [pc, #356]	; (25cc <udd_ep_run+0x1b8>)
    2468:	701a      	strb	r2, [r3, #0]
    246a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    246e:	b662      	cpsie	i
    2470:	e7db      	b.n	242a <udd_ep_run+0x16>
	ptr_job->busy = true;
    2472:	7c83      	ldrb	r3, [r0, #18]
    2474:	2101      	movs	r1, #1
    2476:	430b      	orrs	r3, r1
    2478:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    247a:	2a00      	cmp	r2, #0
    247c:	d005      	beq.n	248a <udd_ep_run+0x76>
		cpu_irq_enable();
    247e:	2201      	movs	r2, #1
    2480:	4b52      	ldr	r3, [pc, #328]	; (25cc <udd_ep_run+0x1b8>)
    2482:	701a      	strb	r2, [r3, #0]
    2484:	f3bf 8f5f 	dmb	sy
    2488:	b662      	cpsie	i
	ptr_job->buf = buf;
    248a:	9b02      	ldr	r3, [sp, #8]
    248c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    248e:	9b01      	ldr	r3, [sp, #4]
    2490:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    2492:	2300      	movs	r3, #0
    2494:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2498:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    249a:	2301      	movs	r3, #1
    249c:	9a03      	ldr	r2, [sp, #12]
    249e:	4013      	ands	r3, r2
    24a0:	005a      	lsls	r2, r3, #1
    24a2:	7cbb      	ldrb	r3, [r7, #18]
    24a4:	2102      	movs	r1, #2
    24a6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    24a8:	4313      	orrs	r3, r2
    24aa:	2204      	movs	r2, #4
    24ac:	4393      	bics	r3, r2
    24ae:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    24b0:	b26b      	sxtb	r3, r5
    24b2:	2b00      	cmp	r3, #0
    24b4:	db20      	blt.n	24f8 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    24b6:	9b01      	ldr	r3, [sp, #4]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d06f      	beq.n	259c <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    24bc:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    24be:	4b44      	ldr	r3, [pc, #272]	; (25d0 <udd_ep_run+0x1bc>)
    24c0:	429c      	cmp	r4, r3
    24c2:	d95a      	bls.n	257a <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    24c4:	8a39      	ldrh	r1, [r7, #16]
    24c6:	001c      	movs	r4, r3
    24c8:	0018      	movs	r0, r3
    24ca:	4b42      	ldr	r3, [pc, #264]	; (25d4 <udd_ep_run+0x1c0>)
    24cc:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    24ce:	1a63      	subs	r3, r4, r1
    24d0:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    24d2:	8a3b      	ldrh	r3, [r7, #16]
    24d4:	429a      	cmp	r2, r3
    24d6:	d257      	bcs.n	2588 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    24d8:	7cba      	ldrb	r2, [r7, #18]
    24da:	2104      	movs	r1, #4
    24dc:	430a      	orrs	r2, r1
    24de:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    24e0:	1e72      	subs	r2, r6, #1
    24e2:	0192      	lsls	r2, r2, #6
    24e4:	493c      	ldr	r1, [pc, #240]	; (25d8 <udd_ep_run+0x1c4>)
    24e6:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    24e8:	0031      	movs	r1, r6
    24ea:	483c      	ldr	r0, [pc, #240]	; (25dc <udd_ep_run+0x1c8>)
    24ec:	4c3c      	ldr	r4, [pc, #240]	; (25e0 <udd_ep_run+0x1cc>)
    24ee:	47a0      	blx	r4
				return (STATUS_OK ==
    24f0:	4244      	negs	r4, r0
    24f2:	4144      	adcs	r4, r0
    24f4:	b2e4      	uxtb	r4, r4
    24f6:	e798      	b.n	242a <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    24f8:	9b01      	ldr	r3, [sp, #4]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d027      	beq.n	254e <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    24fe:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2500:	4b33      	ldr	r3, [pc, #204]	; (25d0 <udd_ep_run+0x1bc>)
    2502:	429d      	cmp	r5, r3
    2504:	d906      	bls.n	2514 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2506:	8a39      	ldrh	r1, [r7, #16]
    2508:	001d      	movs	r5, r3
    250a:	0018      	movs	r0, r3
    250c:	4b31      	ldr	r3, [pc, #196]	; (25d4 <udd_ep_run+0x1c0>)
    250e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2510:	1a6b      	subs	r3, r5, r1
    2512:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2514:	7cbb      	ldrb	r3, [r7, #18]
    2516:	079b      	lsls	r3, r3, #30
    2518:	d507      	bpl.n	252a <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    251a:	8a39      	ldrh	r1, [r7, #16]
    251c:	0028      	movs	r0, r5
    251e:	4b31      	ldr	r3, [pc, #196]	; (25e4 <udd_ep_run+0x1d0>)
    2520:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2522:	b289      	uxth	r1, r1
    2524:	424c      	negs	r4, r1
    2526:	414c      	adcs	r4, r1
    2528:	b2e4      	uxtb	r4, r4
    252a:	2001      	movs	r0, #1
    252c:	4020      	ands	r0, r4
    252e:	0040      	lsls	r0, r0, #1
    2530:	7cbc      	ldrb	r4, [r7, #18]
    2532:	2302      	movs	r3, #2
    2534:	439c      	bics	r4, r3
    2536:	4304      	orrs	r4, r0
    2538:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    253a:	002b      	movs	r3, r5
    253c:	9a02      	ldr	r2, [sp, #8]
    253e:	0031      	movs	r1, r6
    2540:	4826      	ldr	r0, [pc, #152]	; (25dc <udd_ep_run+0x1c8>)
    2542:	4c29      	ldr	r4, [pc, #164]	; (25e8 <udd_ep_run+0x1d4>)
    2544:	47a0      	blx	r4
		return (STATUS_OK ==
    2546:	4244      	negs	r4, r0
    2548:	4144      	adcs	r4, r0
    254a:	b2e4      	uxtb	r4, r4
    254c:	e76d      	b.n	242a <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    254e:	7cbb      	ldrb	r3, [r7, #18]
    2550:	079b      	lsls	r3, r3, #30
    2552:	d505      	bpl.n	2560 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2554:	7cbb      	ldrb	r3, [r7, #18]
    2556:	2202      	movs	r2, #2
    2558:	4393      	bics	r3, r2
    255a:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    255c:	2500      	movs	r5, #0
    255e:	e7ec      	b.n	253a <udd_ep_run+0x126>
			ptr_job->busy = false;
    2560:	7cbb      	ldrb	r3, [r7, #18]
    2562:	2201      	movs	r2, #1
    2564:	4393      	bics	r3, r2
    2566:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    256a:	2b00      	cmp	r3, #0
    256c:	d025      	beq.n	25ba <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    256e:	002a      	movs	r2, r5
    2570:	2100      	movs	r1, #0
    2572:	2000      	movs	r0, #0
    2574:	4798      	blx	r3
			return true;
    2576:	2401      	movs	r4, #1
    2578:	e757      	b.n	242a <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    257a:	8a39      	ldrh	r1, [r7, #16]
    257c:	0020      	movs	r0, r4
    257e:	4b19      	ldr	r3, [pc, #100]	; (25e4 <udd_ep_run+0x1d0>)
    2580:	4798      	blx	r3
    2582:	1a63      	subs	r3, r4, r1
    2584:	b29a      	uxth	r2, r3
    2586:	e7a4      	b.n	24d2 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2588:	0013      	movs	r3, r2
    258a:	9a02      	ldr	r2, [sp, #8]
    258c:	0031      	movs	r1, r6
    258e:	4813      	ldr	r0, [pc, #76]	; (25dc <udd_ep_run+0x1c8>)
    2590:	4c13      	ldr	r4, [pc, #76]	; (25e0 <udd_ep_run+0x1cc>)
    2592:	47a0      	blx	r4
				return (STATUS_OK ==
    2594:	4244      	negs	r4, r0
    2596:	4144      	adcs	r4, r0
    2598:	b2e4      	uxtb	r4, r4
    259a:	e746      	b.n	242a <udd_ep_run+0x16>
			ptr_job->busy = false;
    259c:	7cbb      	ldrb	r3, [r7, #18]
    259e:	2201      	movs	r2, #1
    25a0:	4393      	bics	r3, r2
    25a2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    25a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25a6:	2b00      	cmp	r3, #0
    25a8:	d009      	beq.n	25be <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    25aa:	002a      	movs	r2, r5
    25ac:	2100      	movs	r1, #0
    25ae:	2000      	movs	r0, #0
    25b0:	4798      	blx	r3
			return true;
    25b2:	2401      	movs	r4, #1
    25b4:	e739      	b.n	242a <udd_ep_run+0x16>
		return false;
    25b6:	2400      	movs	r4, #0
    25b8:	e737      	b.n	242a <udd_ep_run+0x16>
			return true;
    25ba:	2401      	movs	r4, #1
    25bc:	e735      	b.n	242a <udd_ep_run+0x16>
			return true;
    25be:	2401      	movs	r4, #1
    25c0:	e733      	b.n	242a <udd_ep_run+0x16>
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00002235 	.word	0x00002235
    25c8:	00001af5 	.word	0x00001af5
    25cc:	20000115 	.word	0x20000115
    25d0:	00001fff 	.word	0x00001fff
    25d4:	000059b1 	.word	0x000059b1
    25d8:	2000030c 	.word	0x2000030c
    25dc:	2000038c 	.word	0x2000038c
    25e0:	00002d69 	.word	0x00002d69
    25e4:	000057dd 	.word	0x000057dd
    25e8:	00002d15 	.word	0x00002d15

000025ec <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    25ec:	4b02      	ldr	r3, [pc, #8]	; (25f8 <udd_set_address+0xc>)
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	2280      	movs	r2, #128	; 0x80
    25f2:	4310      	orrs	r0, r2
    25f4:	7298      	strb	r0, [r3, #10]
}
    25f6:	4770      	bx	lr
    25f8:	2000038c 	.word	0x2000038c

000025fc <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    25fc:	4b02      	ldr	r3, [pc, #8]	; (2608 <udd_getaddress+0xc>)
    25fe:	681b      	ldr	r3, [r3, #0]
    2600:	7a98      	ldrb	r0, [r3, #10]
    2602:	0640      	lsls	r0, r0, #25
    2604:	0e40      	lsrs	r0, r0, #25
}
    2606:	4770      	bx	lr
    2608:	2000038c 	.word	0x2000038c

0000260c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    260c:	4b01      	ldr	r3, [pc, #4]	; (2614 <udd_set_setup_payload+0x8>)
    260e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2610:	8199      	strh	r1, [r3, #12]
}
    2612:	4770      	bx	lr
    2614:	200004f4 	.word	0x200004f4

00002618 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2618:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    261a:	2003      	movs	r0, #3
    261c:	4b16      	ldr	r3, [pc, #88]	; (2678 <udd_attach+0x60>)
    261e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2620:	4c16      	ldr	r4, [pc, #88]	; (267c <udd_attach+0x64>)
    2622:	6822      	ldr	r2, [r4, #0]
    2624:	8913      	ldrh	r3, [r2, #8]
    2626:	2101      	movs	r1, #1
    2628:	438b      	bics	r3, r1
    262a:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    262c:	4a14      	ldr	r2, [pc, #80]	; (2680 <udd_attach+0x68>)
    262e:	3103      	adds	r1, #3
    2630:	0020      	movs	r0, r4
    2632:	4e14      	ldr	r6, [pc, #80]	; (2684 <udd_attach+0x6c>)
    2634:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    2636:	4a14      	ldr	r2, [pc, #80]	; (2688 <udd_attach+0x70>)
    2638:	2100      	movs	r1, #0
    263a:	0020      	movs	r0, r4
    263c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    263e:	4a13      	ldr	r2, [pc, #76]	; (268c <udd_attach+0x74>)
    2640:	2101      	movs	r1, #1
    2642:	0020      	movs	r0, r4
    2644:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    2646:	4a12      	ldr	r2, [pc, #72]	; (2690 <udd_attach+0x78>)
    2648:	2102      	movs	r1, #2
    264a:	0020      	movs	r0, r4
    264c:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    264e:	2104      	movs	r1, #4
    2650:	0020      	movs	r0, r4
    2652:	4d10      	ldr	r5, [pc, #64]	; (2694 <udd_attach+0x7c>)
    2654:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    2656:	2100      	movs	r1, #0
    2658:	0020      	movs	r0, r4
    265a:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    265c:	2101      	movs	r1, #1
    265e:	0020      	movs	r0, r4
    2660:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2662:	2102      	movs	r1, #2
    2664:	0020      	movs	r0, r4
    2666:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2668:	4a0b      	ldr	r2, [pc, #44]	; (2698 <udd_attach+0x80>)
    266a:	2106      	movs	r1, #6
    266c:	0020      	movs	r0, r4
    266e:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2670:	2106      	movs	r1, #6
    2672:	0020      	movs	r0, r4
    2674:	47a8      	blx	r5
#endif
}
    2676:	bd70      	pop	{r4, r5, r6, pc}
    2678:	00001a35 	.word	0x00001a35
    267c:	2000038c 	.word	0x2000038c
    2680:	00001d95 	.word	0x00001d95
    2684:	00002739 	.word	0x00002739
    2688:	0000208d 	.word	0x0000208d
    268c:	00001dc1 	.word	0x00001dc1
    2690:	00001d2d 	.word	0x00001d2d
    2694:	0000275d 	.word	0x0000275d
    2698:	00001cf9 	.word	0x00001cf9

0000269c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    269c:	b570      	push	{r4, r5, r6, lr}
    269e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26a0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    26a4:	425a      	negs	r2, r3
    26a6:	4153      	adcs	r3, r2
    26a8:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    26aa:	b672      	cpsid	i
    26ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    26b0:	2200      	movs	r2, #0
    26b2:	4b18      	ldr	r3, [pc, #96]	; (2714 <udd_enable+0x78>)
    26b4:	701a      	strb	r2, [r3, #0]
	return flags;
    26b6:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    26b8:	ad01      	add	r5, sp, #4
    26ba:	0028      	movs	r0, r5
    26bc:	4b16      	ldr	r3, [pc, #88]	; (2718 <udd_enable+0x7c>)
    26be:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    26c0:	2301      	movs	r3, #1
    26c2:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    26c4:	4e15      	ldr	r6, [pc, #84]	; (271c <udd_enable+0x80>)
    26c6:	002a      	movs	r2, r5
    26c8:	4915      	ldr	r1, [pc, #84]	; (2720 <udd_enable+0x84>)
    26ca:	0030      	movs	r0, r6
    26cc:	4b15      	ldr	r3, [pc, #84]	; (2724 <udd_enable+0x88>)
    26ce:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    26d0:	0030      	movs	r0, r6
    26d2:	4b15      	ldr	r3, [pc, #84]	; (2728 <udd_enable+0x8c>)
    26d4:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    26d6:	4b15      	ldr	r3, [pc, #84]	; (272c <udd_enable+0x90>)
    26d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    26da:	069b      	lsls	r3, r3, #26
    26dc:	d414      	bmi.n	2708 <udd_enable+0x6c>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    26de:	4913      	ldr	r1, [pc, #76]	; (272c <udd_enable+0x90>)
    26e0:	22d0      	movs	r2, #208	; 0xd0
    26e2:	68cb      	ldr	r3, [r1, #12]
    26e4:	4013      	ands	r3, r2
    26e6:	2bd0      	cmp	r3, #208	; 0xd0
    26e8:	d1fb      	bne.n	26e2 <udd_enable+0x46>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    26ea:	2001      	movs	r0, #1
    26ec:	4b10      	ldr	r3, [pc, #64]	; (2730 <udd_enable+0x94>)
    26ee:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    26f0:	4b10      	ldr	r3, [pc, #64]	; (2734 <udd_enable+0x98>)
    26f2:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    26f4:	2c00      	cmp	r4, #0
    26f6:	d005      	beq.n	2704 <udd_enable+0x68>
		cpu_irq_enable();
    26f8:	2201      	movs	r2, #1
    26fa:	4b06      	ldr	r3, [pc, #24]	; (2714 <udd_enable+0x78>)
    26fc:	701a      	strb	r2, [r3, #0]
    26fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2702:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    2704:	b002      	add	sp, #8
    2706:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2708:	4908      	ldr	r1, [pc, #32]	; (272c <udd_enable+0x90>)
    270a:	2210      	movs	r2, #16
    270c:	68cb      	ldr	r3, [r1, #12]
    270e:	421a      	tst	r2, r3
    2710:	d0fc      	beq.n	270c <udd_enable+0x70>
    2712:	e7ea      	b.n	26ea <udd_enable+0x4e>
    2714:	20000115 	.word	0x20000115
    2718:	000033c5 	.word	0x000033c5
    271c:	2000038c 	.word	0x2000038c
    2720:	41005000 	.word	0x41005000
    2724:	000033d5 	.word	0x000033d5
    2728:	00002de9 	.word	0x00002de9
    272c:	40000800 	.word	0x40000800
    2730:	00001a35 	.word	0x00001a35
    2734:	00002619 	.word	0x00002619

00002738 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    2738:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    273a:	000b      	movs	r3, r1
    273c:	332e      	adds	r3, #46	; 0x2e
    273e:	009b      	lsls	r3, r3, #2
    2740:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    2742:	22aa      	movs	r2, #170	; 0xaa
    2744:	0052      	lsls	r2, r2, #1
    2746:	0049      	lsls	r1, r1, #1
    2748:	5a83      	ldrh	r3, [r0, r2]
    274a:	4c03      	ldr	r4, [pc, #12]	; (2758 <usb_device_register_callback+0x20>)
    274c:	5b09      	ldrh	r1, [r1, r4]
    274e:	430b      	orrs	r3, r1
    2750:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    2752:	2000      	movs	r0, #0
    2754:	bd10      	pop	{r4, pc}
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	00005ef4 	.word	0x00005ef4

0000275c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    275c:	0049      	lsls	r1, r1, #1
    275e:	4b06      	ldr	r3, [pc, #24]	; (2778 <usb_device_enable_callback+0x1c>)
    2760:	5acb      	ldrh	r3, [r1, r3]
    2762:	6802      	ldr	r2, [r0, #0]
    2764:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    2766:	21ab      	movs	r1, #171	; 0xab
    2768:	0049      	lsls	r1, r1, #1
    276a:	5a42      	ldrh	r2, [r0, r1]
    276c:	431a      	orrs	r2, r3
    276e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2770:	6802      	ldr	r2, [r0, #0]
    2772:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    2774:	2000      	movs	r0, #0
    2776:	4770      	bx	lr
    2778:	00005ef4 	.word	0x00005ef4

0000277c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    277c:	0049      	lsls	r1, r1, #1
    277e:	4b05      	ldr	r3, [pc, #20]	; (2794 <usb_device_disable_callback+0x18>)
    2780:	5aca      	ldrh	r2, [r1, r3]
    2782:	21ab      	movs	r1, #171	; 0xab
    2784:	0049      	lsls	r1, r1, #1
    2786:	5a43      	ldrh	r3, [r0, r1]
    2788:	4393      	bics	r3, r2
    278a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    278c:	6803      	ldr	r3, [r0, #0]
    278e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    2790:	2000      	movs	r0, #0
    2792:	4770      	bx	lr
    2794:	00005ef4 	.word	0x00005ef4

00002798 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2798:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    279a:	008c      	lsls	r4, r1, #2
    279c:	18a4      	adds	r4, r4, r2
    279e:	3434      	adds	r4, #52	; 0x34
    27a0:	00a4      	lsls	r4, r4, #2
    27a2:	1904      	adds	r4, r0, r4
    27a4:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    27a6:	1840      	adds	r0, r0, r1
    27a8:	3059      	adds	r0, #89	; 0x59
    27aa:	30ff      	adds	r0, #255	; 0xff
    27ac:	7803      	ldrb	r3, [r0, #0]
    27ae:	4903      	ldr	r1, [pc, #12]	; (27bc <usb_device_endpoint_register_callback+0x24>)
    27b0:	5c8a      	ldrb	r2, [r1, r2]
    27b2:	4313      	orrs	r3, r2
    27b4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    27b6:	2000      	movs	r0, #0
    27b8:	bd10      	pop	{r4, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	00005f04 	.word	0x00005f04

000027c0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    27c0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    27c2:	008b      	lsls	r3, r1, #2
    27c4:	189b      	adds	r3, r3, r2
    27c6:	3334      	adds	r3, #52	; 0x34
    27c8:	009b      	lsls	r3, r3, #2
    27ca:	18c3      	adds	r3, r0, r3
    27cc:	2400      	movs	r4, #0
    27ce:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    27d0:	1840      	adds	r0, r0, r1
    27d2:	3059      	adds	r0, #89	; 0x59
    27d4:	30ff      	adds	r0, #255	; 0xff
    27d6:	4b03      	ldr	r3, [pc, #12]	; (27e4 <usb_device_endpoint_unregister_callback+0x24>)
    27d8:	5c9a      	ldrb	r2, [r3, r2]
    27da:	7803      	ldrb	r3, [r0, #0]
    27dc:	4393      	bics	r3, r2
    27de:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    27e0:	2000      	movs	r0, #0
    27e2:	bd10      	pop	{r4, pc}
    27e4:	00005f04 	.word	0x00005f04

000027e8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    27e8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    27ea:	230f      	movs	r3, #15
    27ec:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    27ee:	18c4      	adds	r4, r0, r3
    27f0:	3461      	adds	r4, #97	; 0x61
    27f2:	34ff      	adds	r4, #255	; 0xff
    27f4:	7825      	ldrb	r5, [r4, #0]
    27f6:	4e2f      	ldr	r6, [pc, #188]	; (28b4 <usb_device_endpoint_enable_callback+0xcc>)
    27f8:	5cb6      	ldrb	r6, [r6, r2]
    27fa:	4335      	orrs	r5, r6
    27fc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    27fe:	2a00      	cmp	r2, #0
    2800:	d129      	bne.n	2856 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2802:	2b00      	cmp	r3, #0
    2804:	d112      	bne.n	282c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2806:	2503      	movs	r5, #3
    2808:	240a      	movs	r4, #10
    280a:	34ff      	adds	r4, #255	; 0xff
    280c:	6806      	ldr	r6, [r0, #0]
    280e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2810:	2a03      	cmp	r2, #3
    2812:	d109      	bne.n	2828 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2814:	b249      	sxtb	r1, r1
    2816:	2900      	cmp	r1, #0
    2818:	db44      	blt.n	28a4 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    281a:	6802      	ldr	r2, [r0, #0]
    281c:	015b      	lsls	r3, r3, #5
    281e:	18d3      	adds	r3, r2, r3
    2820:	330a      	adds	r3, #10
    2822:	33ff      	adds	r3, #255	; 0xff
    2824:	2220      	movs	r2, #32
    2826:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2828:	2000      	movs	r0, #0
    282a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    282c:	b24c      	sxtb	r4, r1
    282e:	2c00      	cmp	r4, #0
    2830:	db08      	blt.n	2844 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    2832:	015c      	lsls	r4, r3, #5
    2834:	6805      	ldr	r5, [r0, #0]
    2836:	46ac      	mov	ip, r5
    2838:	4464      	add	r4, ip
    283a:	340a      	adds	r4, #10
    283c:	34ff      	adds	r4, #255	; 0xff
    283e:	2501      	movs	r5, #1
    2840:	7025      	strb	r5, [r4, #0]
    2842:	e7e5      	b.n	2810 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    2844:	015c      	lsls	r4, r3, #5
    2846:	6805      	ldr	r5, [r0, #0]
    2848:	46ac      	mov	ip, r5
    284a:	4464      	add	r4, ip
    284c:	340a      	adds	r4, #10
    284e:	34ff      	adds	r4, #255	; 0xff
    2850:	2502      	movs	r5, #2
    2852:	7025      	strb	r5, [r4, #0]
    2854:	e7dc      	b.n	2810 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2856:	2a01      	cmp	r2, #1
    2858:	d11a      	bne.n	2890 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    285a:	2b00      	cmp	r3, #0
    285c:	d105      	bne.n	286a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    285e:	6802      	ldr	r2, [r0, #0]
    2860:	210c      	movs	r1, #12
    2862:	230a      	movs	r3, #10
    2864:	33ff      	adds	r3, #255	; 0xff
    2866:	54d1      	strb	r1, [r2, r3]
    2868:	e7de      	b.n	2828 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    286a:	b249      	sxtb	r1, r1
    286c:	2900      	cmp	r1, #0
    286e:	db07      	blt.n	2880 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2870:	6802      	ldr	r2, [r0, #0]
    2872:	015b      	lsls	r3, r3, #5
    2874:	18d3      	adds	r3, r2, r3
    2876:	330a      	adds	r3, #10
    2878:	33ff      	adds	r3, #255	; 0xff
    287a:	2204      	movs	r2, #4
    287c:	701a      	strb	r2, [r3, #0]
    287e:	e7d3      	b.n	2828 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2880:	6802      	ldr	r2, [r0, #0]
    2882:	015b      	lsls	r3, r3, #5
    2884:	18d3      	adds	r3, r2, r3
    2886:	330a      	adds	r3, #10
    2888:	33ff      	adds	r3, #255	; 0xff
    288a:	2208      	movs	r2, #8
    288c:	701a      	strb	r2, [r3, #0]
    288e:	e7cb      	b.n	2828 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2890:	2a02      	cmp	r2, #2
    2892:	d1bd      	bne.n	2810 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2894:	6802      	ldr	r2, [r0, #0]
    2896:	015b      	lsls	r3, r3, #5
    2898:	18d3      	adds	r3, r2, r3
    289a:	330a      	adds	r3, #10
    289c:	33ff      	adds	r3, #255	; 0xff
    289e:	2210      	movs	r2, #16
    28a0:	701a      	strb	r2, [r3, #0]
    28a2:	e7c1      	b.n	2828 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    28a4:	6802      	ldr	r2, [r0, #0]
    28a6:	015b      	lsls	r3, r3, #5
    28a8:	18d3      	adds	r3, r2, r3
    28aa:	330a      	adds	r3, #10
    28ac:	33ff      	adds	r3, #255	; 0xff
    28ae:	2240      	movs	r2, #64	; 0x40
    28b0:	701a      	strb	r2, [r3, #0]
    28b2:	e7b9      	b.n	2828 <usb_device_endpoint_enable_callback+0x40>
    28b4:	00005f04 	.word	0x00005f04

000028b8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    28b8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    28ba:	230f      	movs	r3, #15
    28bc:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    28be:	18c4      	adds	r4, r0, r3
    28c0:	3461      	adds	r4, #97	; 0x61
    28c2:	34ff      	adds	r4, #255	; 0xff
    28c4:	4d2f      	ldr	r5, [pc, #188]	; (2984 <usb_device_endpoint_disable_callback+0xcc>)
    28c6:	5cae      	ldrb	r6, [r5, r2]
    28c8:	7825      	ldrb	r5, [r4, #0]
    28ca:	43b5      	bics	r5, r6
    28cc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    28ce:	2a00      	cmp	r2, #0
    28d0:	d129      	bne.n	2926 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    28d2:	2b00      	cmp	r3, #0
    28d4:	d112      	bne.n	28fc <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    28d6:	2503      	movs	r5, #3
    28d8:	2484      	movs	r4, #132	; 0x84
    28da:	0064      	lsls	r4, r4, #1
    28dc:	6806      	ldr	r6, [r0, #0]
    28de:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    28e0:	2a03      	cmp	r2, #3
    28e2:	d109      	bne.n	28f8 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    28e4:	b249      	sxtb	r1, r1
    28e6:	2900      	cmp	r1, #0
    28e8:	db44      	blt.n	2974 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    28ea:	6802      	ldr	r2, [r0, #0]
    28ec:	015b      	lsls	r3, r3, #5
    28ee:	18d3      	adds	r3, r2, r3
    28f0:	3309      	adds	r3, #9
    28f2:	33ff      	adds	r3, #255	; 0xff
    28f4:	2220      	movs	r2, #32
    28f6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    28f8:	2000      	movs	r0, #0
    28fa:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    28fc:	b24c      	sxtb	r4, r1
    28fe:	2c00      	cmp	r4, #0
    2900:	db08      	blt.n	2914 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2902:	015c      	lsls	r4, r3, #5
    2904:	6805      	ldr	r5, [r0, #0]
    2906:	46ac      	mov	ip, r5
    2908:	4464      	add	r4, ip
    290a:	3409      	adds	r4, #9
    290c:	34ff      	adds	r4, #255	; 0xff
    290e:	2501      	movs	r5, #1
    2910:	7025      	strb	r5, [r4, #0]
    2912:	e7e5      	b.n	28e0 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2914:	015c      	lsls	r4, r3, #5
    2916:	6805      	ldr	r5, [r0, #0]
    2918:	46ac      	mov	ip, r5
    291a:	4464      	add	r4, ip
    291c:	3409      	adds	r4, #9
    291e:	34ff      	adds	r4, #255	; 0xff
    2920:	2502      	movs	r5, #2
    2922:	7025      	strb	r5, [r4, #0]
    2924:	e7dc      	b.n	28e0 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    2926:	2a01      	cmp	r2, #1
    2928:	d11a      	bne.n	2960 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    292a:	2b00      	cmp	r3, #0
    292c:	d105      	bne.n	293a <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    292e:	6802      	ldr	r2, [r0, #0]
    2930:	210c      	movs	r1, #12
    2932:	3309      	adds	r3, #9
    2934:	33ff      	adds	r3, #255	; 0xff
    2936:	54d1      	strb	r1, [r2, r3]
    2938:	e7de      	b.n	28f8 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    293a:	b249      	sxtb	r1, r1
    293c:	2900      	cmp	r1, #0
    293e:	db07      	blt.n	2950 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    2940:	6802      	ldr	r2, [r0, #0]
    2942:	015b      	lsls	r3, r3, #5
    2944:	18d3      	adds	r3, r2, r3
    2946:	3309      	adds	r3, #9
    2948:	33ff      	adds	r3, #255	; 0xff
    294a:	2204      	movs	r2, #4
    294c:	701a      	strb	r2, [r3, #0]
    294e:	e7d3      	b.n	28f8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    2950:	6802      	ldr	r2, [r0, #0]
    2952:	015b      	lsls	r3, r3, #5
    2954:	18d3      	adds	r3, r2, r3
    2956:	3309      	adds	r3, #9
    2958:	33ff      	adds	r3, #255	; 0xff
    295a:	2208      	movs	r2, #8
    295c:	701a      	strb	r2, [r3, #0]
    295e:	e7cb      	b.n	28f8 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2960:	2a02      	cmp	r2, #2
    2962:	d1bd      	bne.n	28e0 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2964:	6802      	ldr	r2, [r0, #0]
    2966:	015b      	lsls	r3, r3, #5
    2968:	18d3      	adds	r3, r2, r3
    296a:	3309      	adds	r3, #9
    296c:	33ff      	adds	r3, #255	; 0xff
    296e:	2210      	movs	r2, #16
    2970:	701a      	strb	r2, [r3, #0]
    2972:	e7c1      	b.n	28f8 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2974:	6802      	ldr	r2, [r0, #0]
    2976:	015b      	lsls	r3, r3, #5
    2978:	18d3      	adds	r3, r2, r3
    297a:	3309      	adds	r3, #9
    297c:	33ff      	adds	r3, #255	; 0xff
    297e:	2240      	movs	r2, #64	; 0x40
    2980:	701a      	strb	r2, [r3, #0]
    2982:	e7b9      	b.n	28f8 <usb_device_endpoint_disable_callback+0x40>
    2984:	00005f04 	.word	0x00005f04

00002988 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2988:	2300      	movs	r3, #0
    298a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    298c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    298e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2990:	3301      	adds	r3, #1
    2992:	70c3      	strb	r3, [r0, #3]
}
    2994:	4770      	bx	lr
	...

00002998 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2998:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    299a:	780c      	ldrb	r4, [r1, #0]
    299c:	230f      	movs	r3, #15
    299e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    29a0:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    29a2:	78ca      	ldrb	r2, [r1, #3]
    29a4:	2a04      	cmp	r2, #4
    29a6:	d870      	bhi.n	2a8a <usb_device_endpoint_set_config+0xf2>
    29a8:	0092      	lsls	r2, r2, #2
    29aa:	4d89      	ldr	r5, [pc, #548]	; (2bd0 <usb_device_endpoint_set_config+0x238>)
    29ac:	58aa      	ldr	r2, [r5, r2]
    29ae:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    29b0:	6802      	ldr	r2, [r0, #0]
    29b2:	3308      	adds	r3, #8
    29b4:	015b      	lsls	r3, r3, #5
    29b6:	2100      	movs	r1, #0
    29b8:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    29ba:	2200      	movs	r2, #0
    29bc:	e082      	b.n	2ac4 <usb_device_endpoint_set_config+0x12c>
    29be:	015c      	lsls	r4, r3, #5
    29c0:	6802      	ldr	r2, [r0, #0]
    29c2:	4694      	mov	ip, r2
    29c4:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    29c6:	2280      	movs	r2, #128	; 0x80
    29c8:	0052      	lsls	r2, r2, #1
    29ca:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    29cc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    29ce:	076d      	lsls	r5, r5, #29
    29d0:	d178      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    29d2:	32e4      	adds	r2, #228	; 0xe4
    29d4:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    29d6:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    29d8:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    29da:	422e      	tst	r6, r5
    29dc:	d172      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    29de:	3d5f      	subs	r5, #95	; 0x5f
    29e0:	32e4      	adds	r2, #228	; 0xe4
    29e2:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    29e4:	001a      	movs	r2, r3
    29e6:	3208      	adds	r2, #8
    29e8:	0152      	lsls	r2, r2, #5
    29ea:	6804      	ldr	r4, [r0, #0]
    29ec:	18a4      	adds	r4, r4, r2
    29ee:	352f      	adds	r5, #47	; 0x2f
    29f0:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    29f2:	6800      	ldr	r0, [r0, #0]
    29f4:	1882      	adds	r2, r0, r2
    29f6:	2080      	movs	r0, #128	; 0x80
    29f8:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    29fa:	788a      	ldrb	r2, [r1, #2]
    29fc:	2a00      	cmp	r2, #0
    29fe:	d01f      	beq.n	2a40 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a00:	0158      	lsls	r0, r3, #5
    2a02:	4a74      	ldr	r2, [pc, #464]	; (2bd4 <usb_device_endpoint_set_config+0x23c>)
    2a04:	1812      	adds	r2, r2, r0
    2a06:	6854      	ldr	r4, [r2, #4]
    2a08:	2080      	movs	r0, #128	; 0x80
    2a0a:	0600      	lsls	r0, r0, #24
    2a0c:	4304      	orrs	r4, r0
    2a0e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a10:	6954      	ldr	r4, [r2, #20]
    2a12:	4320      	orrs	r0, r4
    2a14:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2a16:	2507      	movs	r5, #7
    2a18:	784c      	ldrb	r4, [r1, #1]
    2a1a:	015a      	lsls	r2, r3, #5
    2a1c:	4b6d      	ldr	r3, [pc, #436]	; (2bd4 <usb_device_endpoint_set_config+0x23c>)
    2a1e:	189b      	adds	r3, r3, r2
    2a20:	6858      	ldr	r0, [r3, #4]
    2a22:	402c      	ands	r4, r5
    2a24:	0724      	lsls	r4, r4, #28
    2a26:	4e6c      	ldr	r6, [pc, #432]	; (2bd8 <usb_device_endpoint_set_config+0x240>)
    2a28:	4030      	ands	r0, r6
    2a2a:	4320      	orrs	r0, r4
    2a2c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2a2e:	7849      	ldrb	r1, [r1, #1]
    2a30:	695a      	ldr	r2, [r3, #20]
    2a32:	4029      	ands	r1, r5
    2a34:	0709      	lsls	r1, r1, #28
    2a36:	4032      	ands	r2, r6
    2a38:	430a      	orrs	r2, r1
    2a3a:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    2a3c:	2200      	movs	r2, #0
    2a3e:	e041      	b.n	2ac4 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a40:	0158      	lsls	r0, r3, #5
    2a42:	4a64      	ldr	r2, [pc, #400]	; (2bd4 <usb_device_endpoint_set_config+0x23c>)
    2a44:	1812      	adds	r2, r2, r0
    2a46:	6850      	ldr	r0, [r2, #4]
    2a48:	0040      	lsls	r0, r0, #1
    2a4a:	0840      	lsrs	r0, r0, #1
    2a4c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a4e:	6950      	ldr	r0, [r2, #20]
    2a50:	0040      	lsls	r0, r0, #1
    2a52:	0840      	lsrs	r0, r0, #1
    2a54:	6150      	str	r0, [r2, #20]
    2a56:	e7de      	b.n	2a16 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    2a58:	2c00      	cmp	r4, #0
    2a5a:	db35      	blt.n	2ac8 <usb_device_endpoint_set_config+0x130>
    2a5c:	015d      	lsls	r5, r3, #5
    2a5e:	6802      	ldr	r2, [r0, #0]
    2a60:	4694      	mov	ip, r2
    2a62:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2a64:	2280      	movs	r2, #128	; 0x80
    2a66:	0052      	lsls	r2, r2, #1
    2a68:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    2a6a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2a6c:	0776      	lsls	r6, r6, #29
    2a6e:	d129      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2a70:	2680      	movs	r6, #128	; 0x80
    2a72:	0076      	lsls	r6, r6, #1
    2a74:	5daa      	ldrb	r2, [r5, r6]
    2a76:	2702      	movs	r7, #2
    2a78:	433a      	orrs	r2, r7
    2a7a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2a7c:	6802      	ldr	r2, [r0, #0]
    2a7e:	0018      	movs	r0, r3
    2a80:	3008      	adds	r0, #8
    2a82:	0140      	lsls	r0, r0, #5
    2a84:	1812      	adds	r2, r2, r0
    2a86:	2040      	movs	r0, #64	; 0x40
    2a88:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2a8a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2a8c:	784f      	ldrb	r7, [r1, #1]
    2a8e:	005d      	lsls	r5, r3, #1
    2a90:	18ad      	adds	r5, r5, r2
    2a92:	012d      	lsls	r5, r5, #4
    2a94:	4e4f      	ldr	r6, [pc, #316]	; (2bd4 <usb_device_endpoint_set_config+0x23c>)
    2a96:	1975      	adds	r5, r6, r5
    2a98:	6868      	ldr	r0, [r5, #4]
    2a9a:	2407      	movs	r4, #7
    2a9c:	403c      	ands	r4, r7
    2a9e:	0724      	lsls	r4, r4, #28
    2aa0:	4e4d      	ldr	r6, [pc, #308]	; (2bd8 <usb_device_endpoint_set_config+0x240>)
    2aa2:	4030      	ands	r0, r6
    2aa4:	4320      	orrs	r0, r4
    2aa6:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    2aa8:	7889      	ldrb	r1, [r1, #2]
    2aaa:	2900      	cmp	r1, #0
    2aac:	d000      	beq.n	2ab0 <usb_device_endpoint_set_config+0x118>
    2aae:	e088      	b.n	2bc2 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2ab0:	005b      	lsls	r3, r3, #1
    2ab2:	189b      	adds	r3, r3, r2
    2ab4:	011b      	lsls	r3, r3, #4
    2ab6:	4a47      	ldr	r2, [pc, #284]	; (2bd4 <usb_device_endpoint_set_config+0x23c>)
    2ab8:	18d3      	adds	r3, r2, r3
    2aba:	685a      	ldr	r2, [r3, #4]
    2abc:	0052      	lsls	r2, r2, #1
    2abe:	0852      	lsrs	r2, r2, #1
    2ac0:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    2ac2:	2200      	movs	r2, #0
}
    2ac4:	0010      	movs	r0, r2
    2ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ac8:	015d      	lsls	r5, r3, #5
    2aca:	6802      	ldr	r2, [r0, #0]
    2acc:	4694      	mov	ip, r2
    2ace:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2ad0:	2280      	movs	r2, #128	; 0x80
    2ad2:	0052      	lsls	r2, r2, #1
    2ad4:	5caf      	ldrb	r7, [r5, r2]
    2ad6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2ad8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2ada:	4237      	tst	r7, r6
    2adc:	d1f2      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2ade:	3690      	adds	r6, #144	; 0x90
    2ae0:	5daa      	ldrb	r2, [r5, r6]
    2ae2:	2720      	movs	r7, #32
    2ae4:	433a      	orrs	r2, r7
    2ae6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2ae8:	6802      	ldr	r2, [r0, #0]
    2aea:	0018      	movs	r0, r3
    2aec:	3008      	adds	r0, #8
    2aee:	0140      	lsls	r0, r0, #5
    2af0:	1812      	adds	r2, r2, r0
    2af2:	2080      	movs	r0, #128	; 0x80
    2af4:	7110      	strb	r0, [r2, #4]
    2af6:	e7c8      	b.n	2a8a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2af8:	2c00      	cmp	r4, #0
    2afa:	db17      	blt.n	2b2c <usb_device_endpoint_set_config+0x194>
    2afc:	015d      	lsls	r5, r3, #5
    2afe:	6802      	ldr	r2, [r0, #0]
    2b00:	4694      	mov	ip, r2
    2b02:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b04:	2280      	movs	r2, #128	; 0x80
    2b06:	0052      	lsls	r2, r2, #1
    2b08:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2b0a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b0c:	0776      	lsls	r6, r6, #29
    2b0e:	d1d9      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2b10:	2680      	movs	r6, #128	; 0x80
    2b12:	0076      	lsls	r6, r6, #1
    2b14:	5daa      	ldrb	r2, [r5, r6]
    2b16:	2703      	movs	r7, #3
    2b18:	433a      	orrs	r2, r7
    2b1a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2b1c:	6802      	ldr	r2, [r0, #0]
    2b1e:	0018      	movs	r0, r3
    2b20:	3008      	adds	r0, #8
    2b22:	0140      	lsls	r0, r0, #5
    2b24:	1812      	adds	r2, r2, r0
    2b26:	2040      	movs	r0, #64	; 0x40
    2b28:	7150      	strb	r0, [r2, #5]
    2b2a:	e7ae      	b.n	2a8a <usb_device_endpoint_set_config+0xf2>
    2b2c:	015d      	lsls	r5, r3, #5
    2b2e:	6802      	ldr	r2, [r0, #0]
    2b30:	4694      	mov	ip, r2
    2b32:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b34:	2280      	movs	r2, #128	; 0x80
    2b36:	0052      	lsls	r2, r2, #1
    2b38:	5caf      	ldrb	r7, [r5, r2]
    2b3a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2b3c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b3e:	4237      	tst	r7, r6
    2b40:	d1c0      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2b42:	3690      	adds	r6, #144	; 0x90
    2b44:	5daa      	ldrb	r2, [r5, r6]
    2b46:	2730      	movs	r7, #48	; 0x30
    2b48:	433a      	orrs	r2, r7
    2b4a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2b4c:	6802      	ldr	r2, [r0, #0]
    2b4e:	0018      	movs	r0, r3
    2b50:	3008      	adds	r0, #8
    2b52:	0140      	lsls	r0, r0, #5
    2b54:	1812      	adds	r2, r2, r0
    2b56:	2080      	movs	r0, #128	; 0x80
    2b58:	7110      	strb	r0, [r2, #4]
    2b5a:	e796      	b.n	2a8a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2b5c:	2c00      	cmp	r4, #0
    2b5e:	db17      	blt.n	2b90 <usb_device_endpoint_set_config+0x1f8>
    2b60:	015d      	lsls	r5, r3, #5
    2b62:	6802      	ldr	r2, [r0, #0]
    2b64:	4694      	mov	ip, r2
    2b66:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b68:	2280      	movs	r2, #128	; 0x80
    2b6a:	0052      	lsls	r2, r2, #1
    2b6c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2b6e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b70:	0776      	lsls	r6, r6, #29
    2b72:	d1a7      	bne.n	2ac4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2b74:	2680      	movs	r6, #128	; 0x80
    2b76:	0076      	lsls	r6, r6, #1
    2b78:	5daa      	ldrb	r2, [r5, r6]
    2b7a:	2704      	movs	r7, #4
    2b7c:	433a      	orrs	r2, r7
    2b7e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2b80:	6802      	ldr	r2, [r0, #0]
    2b82:	0018      	movs	r0, r3
    2b84:	3008      	adds	r0, #8
    2b86:	0140      	lsls	r0, r0, #5
    2b88:	1812      	adds	r2, r2, r0
    2b8a:	2040      	movs	r0, #64	; 0x40
    2b8c:	7150      	strb	r0, [r2, #5]
    2b8e:	e77c      	b.n	2a8a <usb_device_endpoint_set_config+0xf2>
    2b90:	015d      	lsls	r5, r3, #5
    2b92:	6802      	ldr	r2, [r0, #0]
    2b94:	4694      	mov	ip, r2
    2b96:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b98:	2280      	movs	r2, #128	; 0x80
    2b9a:	0052      	lsls	r2, r2, #1
    2b9c:	5caf      	ldrb	r7, [r5, r2]
    2b9e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2ba0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2ba2:	4237      	tst	r7, r6
    2ba4:	d000      	beq.n	2ba8 <usb_device_endpoint_set_config+0x210>
    2ba6:	e78d      	b.n	2ac4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2ba8:	3690      	adds	r6, #144	; 0x90
    2baa:	5daa      	ldrb	r2, [r5, r6]
    2bac:	2740      	movs	r7, #64	; 0x40
    2bae:	433a      	orrs	r2, r7
    2bb0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2bb2:	6802      	ldr	r2, [r0, #0]
    2bb4:	0018      	movs	r0, r3
    2bb6:	3008      	adds	r0, #8
    2bb8:	0140      	lsls	r0, r0, #5
    2bba:	1812      	adds	r2, r2, r0
    2bbc:	2080      	movs	r0, #128	; 0x80
    2bbe:	7110      	strb	r0, [r2, #4]
    2bc0:	e763      	b.n	2a8a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2bc2:	6869      	ldr	r1, [r5, #4]
    2bc4:	2380      	movs	r3, #128	; 0x80
    2bc6:	061b      	lsls	r3, r3, #24
    2bc8:	430b      	orrs	r3, r1
    2bca:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    2bcc:	2200      	movs	r2, #0
    2bce:	e779      	b.n	2ac4 <usb_device_endpoint_set_config+0x12c>
    2bd0:	00005ee0 	.word	0x00005ee0
    2bd4:	2000054c 	.word	0x2000054c
    2bd8:	8fffffff 	.word	0x8fffffff

00002bdc <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2bdc:	230f      	movs	r3, #15
    2bde:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    2be0:	b249      	sxtb	r1, r1
    2be2:	2900      	cmp	r1, #0
    2be4:	db09      	blt.n	2bfa <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2be6:	6802      	ldr	r2, [r0, #0]
    2be8:	3308      	adds	r3, #8
    2bea:	015b      	lsls	r3, r3, #5
    2bec:	5c98      	ldrb	r0, [r3, r2]
    2bee:	0740      	lsls	r0, r0, #29
    2bf0:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    2bf2:	1e43      	subs	r3, r0, #1
    2bf4:	4198      	sbcs	r0, r3
    2bf6:	b2c0      	uxtb	r0, r0
}
    2bf8:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2bfa:	6802      	ldr	r2, [r0, #0]
    2bfc:	3308      	adds	r3, #8
    2bfe:	015b      	lsls	r3, r3, #5
    2c00:	5c98      	ldrb	r0, [r3, r2]
    2c02:	0640      	lsls	r0, r0, #25
    2c04:	0f40      	lsrs	r0, r0, #29
    2c06:	e7f4      	b.n	2bf2 <usb_device_endpoint_is_configured+0x16>

00002c08 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2c08:	230f      	movs	r3, #15
    2c0a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2c0c:	b249      	sxtb	r1, r1
    2c0e:	2900      	cmp	r1, #0
    2c10:	db0a      	blt.n	2c28 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2c12:	3308      	adds	r3, #8
    2c14:	015b      	lsls	r3, r3, #5
    2c16:	6802      	ldr	r2, [r0, #0]
    2c18:	18d2      	adds	r2, r2, r3
    2c1a:	2140      	movs	r1, #64	; 0x40
    2c1c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2c1e:	6802      	ldr	r2, [r0, #0]
    2c20:	18d3      	adds	r3, r2, r3
    2c22:	2201      	movs	r2, #1
    2c24:	71da      	strb	r2, [r3, #7]
	}
}
    2c26:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2c28:	3308      	adds	r3, #8
    2c2a:	015b      	lsls	r3, r3, #5
    2c2c:	6802      	ldr	r2, [r0, #0]
    2c2e:	18d2      	adds	r2, r2, r3
    2c30:	2180      	movs	r1, #128	; 0x80
    2c32:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2c34:	6802      	ldr	r2, [r0, #0]
    2c36:	18d3      	adds	r3, r2, r3
    2c38:	2202      	movs	r2, #2
    2c3a:	71da      	strb	r2, [r3, #7]
    2c3c:	e7f3      	b.n	2c26 <usb_device_endpoint_abort_job+0x1e>

00002c3e <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c3e:	230f      	movs	r3, #15
    2c40:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2c42:	b249      	sxtb	r1, r1
    2c44:	2900      	cmp	r1, #0
    2c46:	db07      	blt.n	2c58 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2c48:	6802      	ldr	r2, [r0, #0]
    2c4a:	3308      	adds	r3, #8
    2c4c:	015b      	lsls	r3, r3, #5
    2c4e:	18d3      	adds	r3, r2, r3
    2c50:	7998      	ldrb	r0, [r3, #6]
    2c52:	06c0      	lsls	r0, r0, #27
    2c54:	0fc0      	lsrs	r0, r0, #31
	}
}
    2c56:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2c58:	6802      	ldr	r2, [r0, #0]
    2c5a:	3308      	adds	r3, #8
    2c5c:	015b      	lsls	r3, r3, #5
    2c5e:	18d3      	adds	r3, r2, r3
    2c60:	7998      	ldrb	r0, [r3, #6]
    2c62:	0680      	lsls	r0, r0, #26
    2c64:	0fc0      	lsrs	r0, r0, #31
    2c66:	e7f6      	b.n	2c56 <usb_device_endpoint_is_halted+0x18>

00002c68 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c68:	230f      	movs	r3, #15
    2c6a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2c6c:	b249      	sxtb	r1, r1
    2c6e:	2900      	cmp	r1, #0
    2c70:	db06      	blt.n	2c80 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2c72:	6802      	ldr	r2, [r0, #0]
    2c74:	3308      	adds	r3, #8
    2c76:	015b      	lsls	r3, r3, #5
    2c78:	18d3      	adds	r3, r2, r3
    2c7a:	2210      	movs	r2, #16
    2c7c:	715a      	strb	r2, [r3, #5]
	}
}
    2c7e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2c80:	6802      	ldr	r2, [r0, #0]
    2c82:	3308      	adds	r3, #8
    2c84:	015b      	lsls	r3, r3, #5
    2c86:	18d3      	adds	r3, r2, r3
    2c88:	2220      	movs	r2, #32
    2c8a:	715a      	strb	r2, [r3, #5]
    2c8c:	e7f7      	b.n	2c7e <usb_device_endpoint_set_halt+0x16>

00002c8e <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2c8e:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c90:	230f      	movs	r3, #15
    2c92:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2c94:	b249      	sxtb	r1, r1
    2c96:	2900      	cmp	r1, #0
    2c98:	db1d      	blt.n	2cd6 <usb_device_endpoint_clear_halt+0x48>
    2c9a:	0159      	lsls	r1, r3, #5
    2c9c:	6802      	ldr	r2, [r0, #0]
    2c9e:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2ca0:	2483      	movs	r4, #131	; 0x83
    2ca2:	0064      	lsls	r4, r4, #1
    2ca4:	5d14      	ldrb	r4, [r2, r4]
    2ca6:	06e4      	lsls	r4, r4, #27
    2ca8:	d514      	bpl.n	2cd4 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    2caa:	2510      	movs	r5, #16
    2cac:	2482      	movs	r4, #130	; 0x82
    2cae:	0064      	lsls	r4, r4, #1
    2cb0:	5515      	strb	r5, [r2, r4]
    2cb2:	6802      	ldr	r2, [r0, #0]
    2cb4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2cb6:	2108      	movs	r1, #8
    2cb8:	31ff      	adds	r1, #255	; 0xff
    2cba:	5c51      	ldrb	r1, [r2, r1]
    2cbc:	0689      	lsls	r1, r1, #26
    2cbe:	d509      	bpl.n	2cd4 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2cc0:	3ce4      	subs	r4, #228	; 0xe4
    2cc2:	2108      	movs	r1, #8
    2cc4:	31ff      	adds	r1, #255	; 0xff
    2cc6:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2cc8:	6802      	ldr	r2, [r0, #0]
    2cca:	3308      	adds	r3, #8
    2ccc:	015b      	lsls	r3, r3, #5
    2cce:	18d3      	adds	r3, r2, r3
    2cd0:	2201      	movs	r2, #1
    2cd2:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2cd4:	bd30      	pop	{r4, r5, pc}
    2cd6:	0159      	lsls	r1, r3, #5
    2cd8:	6802      	ldr	r2, [r0, #0]
    2cda:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    2cdc:	2483      	movs	r4, #131	; 0x83
    2cde:	0064      	lsls	r4, r4, #1
    2ce0:	5d14      	ldrb	r4, [r2, r4]
    2ce2:	06a4      	lsls	r4, r4, #26
    2ce4:	d5f6      	bpl.n	2cd4 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    2ce6:	2520      	movs	r5, #32
    2ce8:	2482      	movs	r4, #130	; 0x82
    2cea:	0064      	lsls	r4, r4, #1
    2cec:	5515      	strb	r5, [r2, r4]
    2cee:	6802      	ldr	r2, [r0, #0]
    2cf0:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2cf2:	2108      	movs	r1, #8
    2cf4:	31ff      	adds	r1, #255	; 0xff
    2cf6:	5c51      	ldrb	r1, [r2, r1]
    2cf8:	0649      	lsls	r1, r1, #25
    2cfa:	d5eb      	bpl.n	2cd4 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2cfc:	3cc4      	subs	r4, #196	; 0xc4
    2cfe:	2108      	movs	r1, #8
    2d00:	31ff      	adds	r1, #255	; 0xff
    2d02:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2d04:	6802      	ldr	r2, [r0, #0]
    2d06:	3308      	adds	r3, #8
    2d08:	015b      	lsls	r3, r3, #5
    2d0a:	18d3      	adds	r3, r2, r3
    2d0c:	2202      	movs	r2, #2
    2d0e:	711a      	strb	r2, [r3, #4]
    2d10:	e7e0      	b.n	2cd4 <usb_device_endpoint_clear_halt+0x46>
	...

00002d14 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2d14:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2d16:	000c      	movs	r4, r1
    2d18:	3408      	adds	r4, #8
    2d1a:	0164      	lsls	r4, r4, #5
    2d1c:	6805      	ldr	r5, [r0, #0]
    2d1e:	5d64      	ldrb	r4, [r4, r5]
    2d20:	0664      	lsls	r4, r4, #25
    2d22:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2d24:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2d26:	2c00      	cmp	r4, #0
    2d28:	d101      	bne.n	2d2e <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    2d2a:	0028      	movs	r0, r5
    2d2c:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2d2e:	014c      	lsls	r4, r1, #5
    2d30:	4d0b      	ldr	r5, [pc, #44]	; (2d60 <usb_device_endpoint_write_buffer_job+0x4c>)
    2d32:	192d      	adds	r5, r5, r4
    2d34:	002c      	movs	r4, r5
    2d36:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2d38:	696a      	ldr	r2, [r5, #20]
    2d3a:	4d0a      	ldr	r5, [pc, #40]	; (2d64 <usb_device_endpoint_write_buffer_job+0x50>)
    2d3c:	402a      	ands	r2, r5
    2d3e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2d40:	6962      	ldr	r2, [r4, #20]
    2d42:	049b      	lsls	r3, r3, #18
    2d44:	0c9b      	lsrs	r3, r3, #18
    2d46:	0b92      	lsrs	r2, r2, #14
    2d48:	0392      	lsls	r2, r2, #14
    2d4a:	4313      	orrs	r3, r2
    2d4c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2d4e:	6803      	ldr	r3, [r0, #0]
    2d50:	3108      	adds	r1, #8
    2d52:	0149      	lsls	r1, r1, #5
    2d54:	1859      	adds	r1, r3, r1
    2d56:	2380      	movs	r3, #128	; 0x80
    2d58:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    2d5a:	2500      	movs	r5, #0
    2d5c:	e7e5      	b.n	2d2a <usb_device_endpoint_write_buffer_job+0x16>
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	2000054c 	.word	0x2000054c
    2d64:	f0003fff 	.word	0xf0003fff

00002d68 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2d68:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2d6a:	000c      	movs	r4, r1
    2d6c:	3408      	adds	r4, #8
    2d6e:	0164      	lsls	r4, r4, #5
    2d70:	6805      	ldr	r5, [r0, #0]
    2d72:	5d64      	ldrb	r4, [r4, r5]
    2d74:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2d76:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2d78:	2c00      	cmp	r4, #0
    2d7a:	d101      	bne.n	2d80 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    2d7c:	0028      	movs	r0, r5
    2d7e:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2d80:	4c0b      	ldr	r4, [pc, #44]	; (2db0 <usb_device_endpoint_read_buffer_job+0x48>)
    2d82:	014d      	lsls	r5, r1, #5
    2d84:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2d86:	1962      	adds	r2, r4, r5
    2d88:	6854      	ldr	r4, [r2, #4]
    2d8a:	049b      	lsls	r3, r3, #18
    2d8c:	091b      	lsrs	r3, r3, #4
    2d8e:	4d09      	ldr	r5, [pc, #36]	; (2db4 <usb_device_endpoint_read_buffer_job+0x4c>)
    2d90:	402c      	ands	r4, r5
    2d92:	4323      	orrs	r3, r4
    2d94:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2d96:	6853      	ldr	r3, [r2, #4]
    2d98:	0b9b      	lsrs	r3, r3, #14
    2d9a:	039b      	lsls	r3, r3, #14
    2d9c:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2d9e:	6803      	ldr	r3, [r0, #0]
    2da0:	3108      	adds	r1, #8
    2da2:	0149      	lsls	r1, r1, #5
    2da4:	1859      	adds	r1, r3, r1
    2da6:	2340      	movs	r3, #64	; 0x40
    2da8:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    2daa:	2500      	movs	r5, #0
    2dac:	e7e6      	b.n	2d7c <usb_device_endpoint_read_buffer_job+0x14>
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	2000054c 	.word	0x2000054c
    2db4:	f0003fff 	.word	0xf0003fff

00002db8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2db8:	4b09      	ldr	r3, [pc, #36]	; (2de0 <usb_device_endpoint_setup_buffer_job+0x28>)
    2dba:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    2dbc:	685a      	ldr	r2, [r3, #4]
    2dbe:	4909      	ldr	r1, [pc, #36]	; (2de4 <usb_device_endpoint_setup_buffer_job+0x2c>)
    2dc0:	4011      	ands	r1, r2
    2dc2:	2280      	movs	r2, #128	; 0x80
    2dc4:	0292      	lsls	r2, r2, #10
    2dc6:	430a      	orrs	r2, r1
    2dc8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2dca:	685a      	ldr	r2, [r3, #4]
    2dcc:	0b92      	lsrs	r2, r2, #14
    2dce:	0392      	lsls	r2, r2, #14
    2dd0:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2dd2:	6802      	ldr	r2, [r0, #0]
    2dd4:	2140      	movs	r1, #64	; 0x40
    2dd6:	2382      	movs	r3, #130	; 0x82
    2dd8:	005b      	lsls	r3, r3, #1
    2dda:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    2ddc:	2000      	movs	r0, #0
    2dde:	4770      	bx	lr
    2de0:	2000054c 	.word	0x2000054c
    2de4:	f0003fff 	.word	0xf0003fff

00002de8 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    2de8:	6802      	ldr	r2, [r0, #0]
    2dea:	7813      	ldrb	r3, [r2, #0]
    2dec:	2102      	movs	r1, #2
    2dee:	430b      	orrs	r3, r1
    2df0:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    2df2:	6802      	ldr	r2, [r0, #0]
    2df4:	7893      	ldrb	r3, [r2, #2]
    2df6:	2b02      	cmp	r3, #2
    2df8:	d0fc      	beq.n	2df4 <usb_enable+0xc>
}
    2dfa:	4770      	bx	lr

00002dfc <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dfe:	46de      	mov	lr, fp
    2e00:	4657      	mov	r7, sl
    2e02:	464e      	mov	r6, r9
    2e04:	4645      	mov	r5, r8
    2e06:	b5e0      	push	{r5, r6, r7, lr}
    2e08:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    2e0a:	4bc2      	ldr	r3, [pc, #776]	; (3114 <USB_Handler+0x318>)
    2e0c:	681f      	ldr	r7, [r3, #0]
    2e0e:	683d      	ldr	r5, [r7, #0]
    2e10:	782b      	ldrb	r3, [r5, #0]
    2e12:	09db      	lsrs	r3, r3, #7
    2e14:	d114      	bne.n	2e40 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2e16:	8c2e      	ldrh	r6, [r5, #32]
    2e18:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    2e1a:	2e00      	cmp	r6, #0
    2e1c:	d000      	beq.n	2e20 <USB_Handler+0x24>
    2e1e:	e1a9      	b.n	3174 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2e20:	8bae      	ldrh	r6, [r5, #28]
    2e22:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2e24:	23ab      	movs	r3, #171	; 0xab
    2e26:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    2e28:	5afb      	ldrh	r3, [r7, r3]
    2e2a:	22aa      	movs	r2, #170	; 0xaa
    2e2c:	0052      	lsls	r2, r2, #1
    2e2e:	5abd      	ldrh	r5, [r7, r2]
    2e30:	401d      	ands	r5, r3
    2e32:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2e34:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    2e36:	4fb8      	ldr	r7, [pc, #736]	; (3118 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2e38:	4bb6      	ldr	r3, [pc, #728]	; (3114 <USB_Handler+0x318>)
    2e3a:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2e3c:	4698      	mov	r8, r3
    2e3e:	e184      	b.n	314a <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2e40:	8c2b      	ldrh	r3, [r5, #32]
    2e42:	b29b      	uxth	r3, r3
    2e44:	2b00      	cmp	r3, #0
    2e46:	d100      	bne.n	2e4a <USB_Handler+0x4e>
    2e48:	e0de      	b.n	3008 <USB_Handler+0x20c>
    2e4a:	8c28      	ldrh	r0, [r5, #32]
    2e4c:	b280      	uxth	r0, r0
    2e4e:	4bb3      	ldr	r3, [pc, #716]	; (311c <USB_Handler+0x320>)
    2e50:	4798      	blx	r3
    2e52:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    2e54:	281f      	cmp	r0, #31
    2e56:	d900      	bls.n	2e5a <USB_Handler+0x5e>
    2e58:	e0d6      	b.n	3008 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    2e5a:	0003      	movs	r3, r0
    2e5c:	3308      	adds	r3, #8
    2e5e:	015b      	lsls	r3, r3, #5
    2e60:	18ed      	adds	r5, r5, r3
    2e62:	79ed      	ldrb	r5, [r5, #7]
    2e64:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    2e66:	07ab      	lsls	r3, r5, #30
    2e68:	d041      	beq.n	2eee <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2e6a:	4aad      	ldr	r2, [pc, #692]	; (3120 <USB_Handler+0x324>)
    2e6c:	2301      	movs	r3, #1
    2e6e:	4083      	lsls	r3, r0
    2e70:	6811      	ldr	r1, [r2, #0]
    2e72:	4399      	bics	r1, r3
    2e74:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2e76:	0003      	movs	r3, r0
    2e78:	3308      	adds	r3, #8
    2e7a:	015b      	lsls	r3, r3, #5
    2e7c:	683a      	ldr	r2, [r7, #0]
    2e7e:	4694      	mov	ip, r2
    2e80:	4463      	add	r3, ip
    2e82:	2203      	movs	r2, #3
    2e84:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2e86:	183b      	adds	r3, r7, r0
    2e88:	33ae      	adds	r3, #174	; 0xae
    2e8a:	781b      	ldrb	r3, [r3, #0]
    2e8c:	07db      	lsls	r3, r3, #31
    2e8e:	d52e      	bpl.n	2eee <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    2e90:	4ba4      	ldr	r3, [pc, #656]	; (3124 <USB_Handler+0x328>)
    2e92:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2e94:	683a      	ldr	r2, [r7, #0]
    2e96:	0003      	movs	r3, r0
    2e98:	3308      	adds	r3, #8
    2e9a:	015b      	lsls	r3, r3, #5
    2e9c:	5c9b      	ldrb	r3, [r3, r2]
    2e9e:	079b      	lsls	r3, r3, #30
    2ea0:	0f9b      	lsrs	r3, r3, #30
    2ea2:	2b01      	cmp	r3, #1
    2ea4:	d100      	bne.n	2ea8 <USB_Handler+0xac>
    2ea6:	e081      	b.n	2fac <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2ea8:	0142      	lsls	r2, r0, #5
    2eaa:	4b9f      	ldr	r3, [pc, #636]	; (3128 <USB_Handler+0x32c>)
    2eac:	189b      	adds	r3, r3, r2
    2eae:	685a      	ldr	r2, [r3, #4]
    2eb0:	0112      	lsls	r2, r2, #4
    2eb2:	0c92      	lsrs	r2, r2, #18
    2eb4:	b290      	uxth	r0, r2
    2eb6:	499b      	ldr	r1, [pc, #620]	; (3124 <USB_Handler+0x328>)
    2eb8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2eba:	685a      	ldr	r2, [r3, #4]
    2ebc:	0492      	lsls	r2, r2, #18
    2ebe:	0c92      	lsrs	r2, r2, #18
    2ec0:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2ec2:	685a      	ldr	r2, [r3, #4]
    2ec4:	4999      	ldr	r1, [pc, #612]	; (312c <USB_Handler+0x330>)
    2ec6:	400a      	ands	r2, r1
    2ec8:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    2eca:	2800      	cmp	r0, #0
    2ecc:	d107      	bne.n	2ede <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2ece:	0162      	lsls	r2, r4, #5
    2ed0:	4b95      	ldr	r3, [pc, #596]	; (3128 <USB_Handler+0x32c>)
    2ed2:	189b      	adds	r3, r3, r2
    2ed4:	685b      	ldr	r3, [r3, #4]
    2ed6:	049b      	lsls	r3, r3, #18
    2ed8:	0c9b      	lsrs	r3, r3, #18
    2eda:	4a92      	ldr	r2, [pc, #584]	; (3124 <USB_Handler+0x328>)
    2edc:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    2ede:	4b8d      	ldr	r3, [pc, #564]	; (3114 <USB_Handler+0x318>)
    2ee0:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    2ee2:	1ca3      	adds	r3, r4, #2
    2ee4:	011b      	lsls	r3, r3, #4
    2ee6:	18c3      	adds	r3, r0, r3
    2ee8:	685b      	ldr	r3, [r3, #4]
    2eea:	498e      	ldr	r1, [pc, #568]	; (3124 <USB_Handler+0x328>)
    2eec:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    2eee:	076b      	lsls	r3, r5, #29
    2ef0:	d50e      	bpl.n	2f10 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2ef2:	4a8b      	ldr	r2, [pc, #556]	; (3120 <USB_Handler+0x324>)
    2ef4:	2301      	movs	r3, #1
    2ef6:	40a3      	lsls	r3, r4
    2ef8:	6811      	ldr	r1, [r2, #0]
    2efa:	4399      	bics	r1, r3
    2efc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2efe:	4b85      	ldr	r3, [pc, #532]	; (3114 <USB_Handler+0x318>)
    2f00:	681b      	ldr	r3, [r3, #0]
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	0022      	movs	r2, r4
    2f06:	3208      	adds	r2, #8
    2f08:	0152      	lsls	r2, r2, #5
    2f0a:	189b      	adds	r3, r3, r2
    2f0c:	2204      	movs	r2, #4
    2f0e:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2f10:	072b      	lsls	r3, r5, #28
    2f12:	d514      	bpl.n	2f3e <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2f14:	4a82      	ldr	r2, [pc, #520]	; (3120 <USB_Handler+0x324>)
    2f16:	2301      	movs	r3, #1
    2f18:	40a3      	lsls	r3, r4
    2f1a:	6811      	ldr	r1, [r2, #0]
    2f1c:	4399      	bics	r1, r3
    2f1e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2f20:	4b7c      	ldr	r3, [pc, #496]	; (3114 <USB_Handler+0x318>)
    2f22:	6818      	ldr	r0, [r3, #0]
    2f24:	0023      	movs	r3, r4
    2f26:	3308      	adds	r3, #8
    2f28:	015b      	lsls	r3, r3, #5
    2f2a:	6802      	ldr	r2, [r0, #0]
    2f2c:	4694      	mov	ip, r2
    2f2e:	4463      	add	r3, ip
    2f30:	2208      	movs	r2, #8
    2f32:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2f34:	1903      	adds	r3, r0, r4
    2f36:	33ae      	adds	r3, #174	; 0xae
    2f38:	781b      	ldrb	r3, [r3, #0]
    2f3a:	079b      	lsls	r3, r3, #30
    2f3c:	d447      	bmi.n	2fce <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2f3e:	06eb      	lsls	r3, r5, #27
    2f40:	d514      	bpl.n	2f6c <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2f42:	4a77      	ldr	r2, [pc, #476]	; (3120 <USB_Handler+0x324>)
    2f44:	2301      	movs	r3, #1
    2f46:	40a3      	lsls	r3, r4
    2f48:	6811      	ldr	r1, [r2, #0]
    2f4a:	4399      	bics	r1, r3
    2f4c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2f4e:	4b71      	ldr	r3, [pc, #452]	; (3114 <USB_Handler+0x318>)
    2f50:	6818      	ldr	r0, [r3, #0]
    2f52:	0023      	movs	r3, r4
    2f54:	3308      	adds	r3, #8
    2f56:	015b      	lsls	r3, r3, #5
    2f58:	6802      	ldr	r2, [r0, #0]
    2f5a:	4694      	mov	ip, r2
    2f5c:	4463      	add	r3, ip
    2f5e:	2210      	movs	r2, #16
    2f60:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2f62:	1903      	adds	r3, r0, r4
    2f64:	33ae      	adds	r3, #174	; 0xae
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	075b      	lsls	r3, r3, #29
    2f6a:	d43e      	bmi.n	2fea <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    2f6c:	06ab      	lsls	r3, r5, #26
    2f6e:	d400      	bmi.n	2f72 <USB_Handler+0x176>
    2f70:	e0b0      	b.n	30d4 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2f72:	4a6b      	ldr	r2, [pc, #428]	; (3120 <USB_Handler+0x324>)
    2f74:	2301      	movs	r3, #1
    2f76:	40a3      	lsls	r3, r4
    2f78:	6811      	ldr	r1, [r2, #0]
    2f7a:	4399      	bics	r1, r3
    2f7c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2f7e:	4b65      	ldr	r3, [pc, #404]	; (3114 <USB_Handler+0x318>)
    2f80:	6818      	ldr	r0, [r3, #0]
    2f82:	0023      	movs	r3, r4
    2f84:	3308      	adds	r3, #8
    2f86:	015b      	lsls	r3, r3, #5
    2f88:	6802      	ldr	r2, [r0, #0]
    2f8a:	4694      	mov	ip, r2
    2f8c:	4463      	add	r3, ip
    2f8e:	2220      	movs	r2, #32
    2f90:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2f92:	1903      	adds	r3, r0, r4
    2f94:	33ae      	adds	r3, #174	; 0xae
    2f96:	781b      	ldrb	r3, [r3, #0]
    2f98:	071b      	lsls	r3, r3, #28
    2f9a:	d400      	bmi.n	2f9e <USB_Handler+0x1a2>
    2f9c:	e09a      	b.n	30d4 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    2f9e:	4961      	ldr	r1, [pc, #388]	; (3124 <USB_Handler+0x328>)
    2fa0:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    2fa2:	0124      	lsls	r4, r4, #4
    2fa4:	1904      	adds	r4, r0, r4
    2fa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2fa8:	4798      	blx	r3
    2faa:	e093      	b.n	30d4 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2fac:	0142      	lsls	r2, r0, #5
    2fae:	4b5e      	ldr	r3, [pc, #376]	; (3128 <USB_Handler+0x32c>)
    2fb0:	189b      	adds	r3, r3, r2
    2fb2:	685a      	ldr	r2, [r3, #4]
    2fb4:	0492      	lsls	r2, r2, #18
    2fb6:	0c92      	lsrs	r2, r2, #18
    2fb8:	495a      	ldr	r1, [pc, #360]	; (3124 <USB_Handler+0x328>)
    2fba:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2fbc:	685a      	ldr	r2, [r3, #4]
    2fbe:	0112      	lsls	r2, r2, #4
    2fc0:	0c92      	lsrs	r2, r2, #18
    2fc2:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2fc4:	685a      	ldr	r2, [r3, #4]
    2fc6:	0b92      	lsrs	r2, r2, #14
    2fc8:	0392      	lsls	r2, r2, #14
    2fca:	605a      	str	r2, [r3, #4]
    2fcc:	e787      	b.n	2ede <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    2fce:	4955      	ldr	r1, [pc, #340]	; (3124 <USB_Handler+0x328>)
    2fd0:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    2fd2:	0162      	lsls	r2, r4, #5
    2fd4:	4b54      	ldr	r3, [pc, #336]	; (3128 <USB_Handler+0x32c>)
    2fd6:	189b      	adds	r3, r3, r2
    2fd8:	89db      	ldrh	r3, [r3, #14]
    2fda:	221f      	movs	r2, #31
    2fdc:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    2fde:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    2fe0:	0123      	lsls	r3, r4, #4
    2fe2:	18c3      	adds	r3, r0, r3
    2fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fe6:	4798      	blx	r3
    2fe8:	e7a9      	b.n	2f3e <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    2fea:	494e      	ldr	r1, [pc, #312]	; (3124 <USB_Handler+0x328>)
    2fec:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2fee:	0162      	lsls	r2, r4, #5
    2ff0:	4b4d      	ldr	r3, [pc, #308]	; (3128 <USB_Handler+0x32c>)
    2ff2:	189b      	adds	r3, r3, r2
    2ff4:	685b      	ldr	r3, [r3, #4]
    2ff6:	011b      	lsls	r3, r3, #4
    2ff8:	0c9b      	lsrs	r3, r3, #18
    2ffa:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    2ffc:	0123      	lsls	r3, r4, #4
    2ffe:	18c3      	adds	r3, r0, r3
    3000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3002:	2100      	movs	r1, #0
    3004:	4798      	blx	r3
    3006:	e7b1      	b.n	2f6c <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3008:	8bac      	ldrh	r4, [r5, #28]
    300a:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    300c:	0763      	lsls	r3, r4, #29
    300e:	d505      	bpl.n	301c <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3010:	2304      	movs	r3, #4
    3012:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3014:	33a1      	adds	r3, #161	; 0xa1
    3016:	5cfb      	ldrb	r3, [r7, r3]
    3018:	07db      	lsls	r3, r3, #31
    301a:	d462      	bmi.n	30e2 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    301c:	0723      	lsls	r3, r4, #28
    301e:	d50b      	bpl.n	3038 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    3020:	2200      	movs	r2, #0
    3022:	4b3f      	ldr	r3, [pc, #252]	; (3120 <USB_Handler+0x324>)
    3024:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3026:	4b3b      	ldr	r3, [pc, #236]	; (3114 <USB_Handler+0x318>)
    3028:	6818      	ldr	r0, [r3, #0]
    302a:	2308      	movs	r3, #8
    302c:	6802      	ldr	r2, [r0, #0]
    302e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3030:	339d      	adds	r3, #157	; 0x9d
    3032:	5cc3      	ldrb	r3, [r0, r3]
    3034:	079b      	lsls	r3, r3, #30
    3036:	d458      	bmi.n	30ea <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3038:	0663      	lsls	r3, r4, #25
    303a:	d508      	bpl.n	304e <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    303c:	4b35      	ldr	r3, [pc, #212]	; (3114 <USB_Handler+0x318>)
    303e:	6818      	ldr	r0, [r3, #0]
    3040:	2340      	movs	r3, #64	; 0x40
    3042:	6802      	ldr	r2, [r0, #0]
    3044:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3046:	3365      	adds	r3, #101	; 0x65
    3048:	5cc3      	ldrb	r3, [r0, r3]
    304a:	06db      	lsls	r3, r3, #27
    304c:	d450      	bmi.n	30f0 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    304e:	06a3      	lsls	r3, r4, #26
    3050:	d508      	bpl.n	3064 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3052:	4b30      	ldr	r3, [pc, #192]	; (3114 <USB_Handler+0x318>)
    3054:	6818      	ldr	r0, [r3, #0]
    3056:	2320      	movs	r3, #32
    3058:	6802      	ldr	r2, [r0, #0]
    305a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    305c:	3385      	adds	r3, #133	; 0x85
    305e:	5cc3      	ldrb	r3, [r0, r3]
    3060:	071b      	lsls	r3, r3, #28
    3062:	d448      	bmi.n	30f6 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3064:	06e3      	lsls	r3, r4, #27
    3066:	d508      	bpl.n	307a <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3068:	4b2a      	ldr	r3, [pc, #168]	; (3114 <USB_Handler+0x318>)
    306a:	6818      	ldr	r0, [r3, #0]
    306c:	2310      	movs	r3, #16
    306e:	6802      	ldr	r2, [r0, #0]
    3070:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3072:	3395      	adds	r3, #149	; 0x95
    3074:	5cc3      	ldrb	r3, [r0, r3]
    3076:	075b      	lsls	r3, r3, #29
    3078:	d440      	bmi.n	30fc <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    307a:	0623      	lsls	r3, r4, #24
    307c:	d50b      	bpl.n	3096 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    307e:	2200      	movs	r2, #0
    3080:	4b27      	ldr	r3, [pc, #156]	; (3120 <USB_Handler+0x324>)
    3082:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3084:	4b23      	ldr	r3, [pc, #140]	; (3114 <USB_Handler+0x318>)
    3086:	6818      	ldr	r0, [r3, #0]
    3088:	2380      	movs	r3, #128	; 0x80
    308a:	6802      	ldr	r2, [r0, #0]
    308c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    308e:	3325      	adds	r3, #37	; 0x25
    3090:	5cc3      	ldrb	r3, [r0, r3]
    3092:	069b      	lsls	r3, r3, #26
    3094:	d435      	bmi.n	3102 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3096:	05e3      	lsls	r3, r4, #23
    3098:	d50c      	bpl.n	30b4 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    309a:	2200      	movs	r2, #0
    309c:	4b20      	ldr	r3, [pc, #128]	; (3120 <USB_Handler+0x324>)
    309e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    30a0:	4b1c      	ldr	r3, [pc, #112]	; (3114 <USB_Handler+0x318>)
    30a2:	6818      	ldr	r0, [r3, #0]
    30a4:	2380      	movs	r3, #128	; 0x80
    30a6:	005b      	lsls	r3, r3, #1
    30a8:	6802      	ldr	r2, [r0, #0]
    30aa:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    30ac:	3b5b      	subs	r3, #91	; 0x5b
    30ae:	5cc3      	ldrb	r3, [r0, r3]
    30b0:	065b      	lsls	r3, r3, #25
    30b2:	d429      	bmi.n	3108 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    30b4:	05a3      	lsls	r3, r4, #22
    30b6:	d50d      	bpl.n	30d4 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    30b8:	2200      	movs	r2, #0
    30ba:	4b19      	ldr	r3, [pc, #100]	; (3120 <USB_Handler+0x324>)
    30bc:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    30be:	4b15      	ldr	r3, [pc, #84]	; (3114 <USB_Handler+0x318>)
    30c0:	6818      	ldr	r0, [r3, #0]
    30c2:	2380      	movs	r3, #128	; 0x80
    30c4:	009b      	lsls	r3, r3, #2
    30c6:	6802      	ldr	r2, [r0, #0]
    30c8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    30ca:	3b5c      	subs	r3, #92	; 0x5c
    30cc:	3bff      	subs	r3, #255	; 0xff
    30ce:	5cc3      	ldrb	r3, [r0, r3]
    30d0:	2b7f      	cmp	r3, #127	; 0x7f
    30d2:	d81c      	bhi.n	310e <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    30d4:	b003      	add	sp, #12
    30d6:	bc3c      	pop	{r2, r3, r4, r5}
    30d8:	4690      	mov	r8, r2
    30da:	4699      	mov	r9, r3
    30dc:	46a2      	mov	sl, r4
    30de:	46ab      	mov	fp, r5
    30e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	0038      	movs	r0, r7
    30e6:	4798      	blx	r3
    30e8:	e798      	b.n	301c <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    30ea:	6883      	ldr	r3, [r0, #8]
    30ec:	4798      	blx	r3
    30ee:	e7a3      	b.n	3038 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    30f0:	6943      	ldr	r3, [r0, #20]
    30f2:	4798      	blx	r3
    30f4:	e7ab      	b.n	304e <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    30f6:	6903      	ldr	r3, [r0, #16]
    30f8:	4798      	blx	r3
    30fa:	e7b3      	b.n	3064 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    30fc:	68c3      	ldr	r3, [r0, #12]
    30fe:	4798      	blx	r3
    3100:	e7bb      	b.n	307a <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3102:	6983      	ldr	r3, [r0, #24]
    3104:	4798      	blx	r3
    3106:	e7c6      	b.n	3096 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3108:	69c3      	ldr	r3, [r0, #28]
    310a:	4798      	blx	r3
    310c:	e7d2      	b.n	30b4 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    310e:	6a03      	ldr	r3, [r0, #32]
    3110:	4798      	blx	r3
    3112:	e7df      	b.n	30d4 <USB_Handler+0x2d8>
    3114:	20000210 	.word	0x20000210
    3118:	00005ef4 	.word	0x00005ef4
    311c:	000059f9 	.word	0x000059f9
    3120:	20000220 	.word	0x20000220
    3124:	20000224 	.word	0x20000224
    3128:	2000054c 	.word	0x2000054c
    312c:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3130:	0023      	movs	r3, r4
    3132:	332e      	adds	r3, #46	; 0x2e
    3134:	009b      	lsls	r3, r3, #2
    3136:	4642      	mov	r2, r8
    3138:	6812      	ldr	r2, [r2, #0]
    313a:	589b      	ldr	r3, [r3, r2]
    313c:	499e      	ldr	r1, [pc, #632]	; (33b8 <USB_Handler+0x5bc>)
    313e:	4642      	mov	r2, r8
    3140:	6810      	ldr	r0, [r2, #0]
    3142:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3144:	3401      	adds	r4, #1
    3146:	2c07      	cmp	r4, #7
    3148:	d0c4      	beq.n	30d4 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    314a:	0063      	lsls	r3, r4, #1
    314c:	5bdb      	ldrh	r3, [r3, r7]
    314e:	4233      	tst	r3, r6
    3150:	d003      	beq.n	315a <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3152:	464a      	mov	r2, r9
    3154:	6812      	ldr	r2, [r2, #0]
    3156:	6812      	ldr	r2, [r2, #0]
    3158:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    315a:	422b      	tst	r3, r5
    315c:	d0f2      	beq.n	3144 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    315e:	2c06      	cmp	r4, #6
    3160:	d1e6      	bne.n	3130 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3162:	4b96      	ldr	r3, [pc, #600]	; (33bc <USB_Handler+0x5c0>)
    3164:	891b      	ldrh	r3, [r3, #8]
    3166:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3168:	2280      	movs	r2, #128	; 0x80
    316a:	0052      	lsls	r2, r2, #1
    316c:	4013      	ands	r3, r2
    316e:	4a92      	ldr	r2, [pc, #584]	; (33b8 <USB_Handler+0x5bc>)
    3170:	6013      	str	r3, [r2, #0]
    3172:	e7dd      	b.n	3130 <USB_Handler+0x334>
    3174:	003c      	movs	r4, r7
    3176:	3459      	adds	r4, #89	; 0x59
    3178:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    317a:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    317c:	2201      	movs	r2, #1
    317e:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3180:	325f      	adds	r2, #95	; 0x5f
    3182:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3184:	3a50      	subs	r2, #80	; 0x50
    3186:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3188:	3a0d      	subs	r2, #13
    318a:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    318c:	46b8      	mov	r8, r7
    318e:	002f      	movs	r7, r5
    3190:	e0b9      	b.n	3306 <USB_Handler+0x50a>
    3192:	002a      	movs	r2, r5
    3194:	003d      	movs	r5, r7
    3196:	4647      	mov	r7, r8
    3198:	4690      	mov	r8, r2
    319a:	015b      	lsls	r3, r3, #5
    319c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    319e:	2308      	movs	r3, #8
    31a0:	33ff      	adds	r3, #255	; 0xff
    31a2:	5ceb      	ldrb	r3, [r5, r3]
    31a4:	065b      	lsls	r3, r3, #25
    31a6:	d516      	bpl.n	31d6 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    31a8:	2240      	movs	r2, #64	; 0x40
    31aa:	2308      	movs	r3, #8
    31ac:	33ff      	adds	r3, #255	; 0xff
    31ae:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    31b0:	3b88      	subs	r3, #136	; 0x88
    31b2:	3bff      	subs	r3, #255	; 0xff
    31b4:	4642      	mov	r2, r8
    31b6:	4313      	orrs	r3, r2
    31b8:	4a81      	ldr	r2, [pc, #516]	; (33c0 <USB_Handler+0x5c4>)
    31ba:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    31bc:	2360      	movs	r3, #96	; 0x60
    31be:	420b      	tst	r3, r1
    31c0:	d100      	bne.n	31c4 <USB_Handler+0x3c8>
    31c2:	e787      	b.n	30d4 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    31c4:	9b01      	ldr	r3, [sp, #4]
    31c6:	011b      	lsls	r3, r3, #4
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	33e0      	adds	r3, #224	; 0xe0
    31cc:	681b      	ldr	r3, [r3, #0]
    31ce:	497c      	ldr	r1, [pc, #496]	; (33c0 <USB_Handler+0x5c4>)
    31d0:	0038      	movs	r0, r7
    31d2:	4798      	blx	r3
    31d4:	e77e      	b.n	30d4 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    31d6:	2308      	movs	r3, #8
    31d8:	33ff      	adds	r3, #255	; 0xff
    31da:	5ceb      	ldrb	r3, [r5, r3]
    31dc:	069b      	lsls	r3, r3, #26
    31de:	d5ed      	bpl.n	31bc <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    31e0:	2220      	movs	r2, #32
    31e2:	2308      	movs	r3, #8
    31e4:	33ff      	adds	r3, #255	; 0xff
    31e6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    31e8:	4b75      	ldr	r3, [pc, #468]	; (33c0 <USB_Handler+0x5c4>)
    31ea:	4642      	mov	r2, r8
    31ec:	719a      	strb	r2, [r3, #6]
    31ee:	e7e5      	b.n	31bc <USB_Handler+0x3c0>
    31f0:	003d      	movs	r5, r7
    31f2:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    31f4:	9a01      	ldr	r2, [sp, #4]
    31f6:	0013      	movs	r3, r2
    31f8:	3308      	adds	r3, #8
    31fa:	015b      	lsls	r3, r3, #5
    31fc:	18ed      	adds	r5, r5, r3
    31fe:	2310      	movs	r3, #16
    3200:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3202:	18bb      	adds	r3, r7, r2
    3204:	3361      	adds	r3, #97	; 0x61
    3206:	33ff      	adds	r3, #255	; 0xff
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	06db      	lsls	r3, r3, #27
    320c:	d400      	bmi.n	3210 <USB_Handler+0x414>
    320e:	e761      	b.n	30d4 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3210:	0010      	movs	r0, r2
    3212:	0152      	lsls	r2, r2, #5
    3214:	4b69      	ldr	r3, [pc, #420]	; (33bc <USB_Handler+0x5c0>)
    3216:	189b      	adds	r3, r3, r2
    3218:	685b      	ldr	r3, [r3, #4]
    321a:	049b      	lsls	r3, r3, #18
    321c:	0c9b      	lsrs	r3, r3, #18
    321e:	4968      	ldr	r1, [pc, #416]	; (33c0 <USB_Handler+0x5c4>)
    3220:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3222:	0103      	lsls	r3, r0, #4
    3224:	18fb      	adds	r3, r7, r3
    3226:	33dc      	adds	r3, #220	; 0xdc
    3228:	681b      	ldr	r3, [r3, #0]
    322a:	4640      	mov	r0, r8
    322c:	4798      	blx	r3
    322e:	e751      	b.n	30d4 <USB_Handler+0x2d8>
    3230:	002a      	movs	r2, r5
    3232:	003d      	movs	r5, r7
    3234:	4647      	mov	r7, r8
    3236:	4690      	mov	r8, r2
    3238:	015b      	lsls	r3, r3, #5
    323a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    323c:	2308      	movs	r3, #8
    323e:	33ff      	adds	r3, #255	; 0xff
    3240:	5ceb      	ldrb	r3, [r5, r3]
    3242:	079b      	lsls	r3, r3, #30
    3244:	d51e      	bpl.n	3284 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3246:	2202      	movs	r2, #2
    3248:	2308      	movs	r3, #8
    324a:	33ff      	adds	r3, #255	; 0xff
    324c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    324e:	485c      	ldr	r0, [pc, #368]	; (33c0 <USB_Handler+0x5c4>)
    3250:	3b88      	subs	r3, #136	; 0x88
    3252:	3bff      	subs	r3, #255	; 0xff
    3254:	4642      	mov	r2, r8
    3256:	4313      	orrs	r3, r2
    3258:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    325a:	9b01      	ldr	r3, [sp, #4]
    325c:	015a      	lsls	r2, r3, #5
    325e:	4b57      	ldr	r3, [pc, #348]	; (33bc <USB_Handler+0x5c0>)
    3260:	189b      	adds	r3, r3, r2
    3262:	3310      	adds	r3, #16
    3264:	685b      	ldr	r3, [r3, #4]
    3266:	049b      	lsls	r3, r3, #18
    3268:	0c9b      	lsrs	r3, r3, #18
    326a:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    326c:	078b      	lsls	r3, r1, #30
    326e:	d100      	bne.n	3272 <USB_Handler+0x476>
    3270:	e730      	b.n	30d4 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3272:	9b01      	ldr	r3, [sp, #4]
    3274:	330d      	adds	r3, #13
    3276:	011b      	lsls	r3, r3, #4
    3278:	18fb      	adds	r3, r7, r3
    327a:	685b      	ldr	r3, [r3, #4]
    327c:	4950      	ldr	r1, [pc, #320]	; (33c0 <USB_Handler+0x5c4>)
    327e:	0038      	movs	r0, r7
    3280:	4798      	blx	r3
    3282:	e727      	b.n	30d4 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3284:	2308      	movs	r3, #8
    3286:	33ff      	adds	r3, #255	; 0xff
    3288:	5ceb      	ldrb	r3, [r5, r3]
    328a:	07db      	lsls	r3, r3, #31
    328c:	d5ee      	bpl.n	326c <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    328e:	2201      	movs	r2, #1
    3290:	2308      	movs	r3, #8
    3292:	33ff      	adds	r3, #255	; 0xff
    3294:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3296:	484a      	ldr	r0, [pc, #296]	; (33c0 <USB_Handler+0x5c4>)
    3298:	4643      	mov	r3, r8
    329a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    329c:	9b01      	ldr	r3, [sp, #4]
    329e:	015b      	lsls	r3, r3, #5
    32a0:	4a46      	ldr	r2, [pc, #280]	; (33bc <USB_Handler+0x5c0>)
    32a2:	18d2      	adds	r2, r2, r3
    32a4:	6853      	ldr	r3, [r2, #4]
    32a6:	049b      	lsls	r3, r3, #18
    32a8:	0c9b      	lsrs	r3, r3, #18
    32aa:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    32ac:	6853      	ldr	r3, [r2, #4]
    32ae:	011b      	lsls	r3, r3, #4
    32b0:	0c9b      	lsrs	r3, r3, #18
    32b2:	8083      	strh	r3, [r0, #4]
    32b4:	e7da      	b.n	326c <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    32b6:	2208      	movs	r2, #8
    32b8:	32ff      	adds	r2, #255	; 0xff
    32ba:	5c9a      	ldrb	r2, [r3, r2]
    32bc:	0752      	lsls	r2, r2, #29
    32be:	d56e      	bpl.n	339e <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    32c0:	2004      	movs	r0, #4
    32c2:	2208      	movs	r2, #8
    32c4:	32ff      	adds	r2, #255	; 0xff
    32c6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    32c8:	9801      	ldr	r0, [sp, #4]
    32ca:	0142      	lsls	r2, r0, #5
    32cc:	4b3b      	ldr	r3, [pc, #236]	; (33bc <USB_Handler+0x5c0>)
    32ce:	189b      	adds	r3, r3, r2
    32d0:	7a9b      	ldrb	r3, [r3, #10]
    32d2:	079b      	lsls	r3, r3, #30
    32d4:	d505      	bpl.n	32e2 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    32d6:	4b39      	ldr	r3, [pc, #228]	; (33bc <USB_Handler+0x5c0>)
    32d8:	189b      	adds	r3, r3, r2
    32da:	7a9a      	ldrb	r2, [r3, #10]
    32dc:	2002      	movs	r0, #2
    32de:	4382      	bics	r2, r0
    32e0:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    32e2:	4b37      	ldr	r3, [pc, #220]	; (33c0 <USB_Handler+0x5c4>)
    32e4:	4642      	mov	r2, r8
    32e6:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	3308      	adds	r3, #8
    32ec:	015b      	lsls	r3, r3, #5
    32ee:	683a      	ldr	r2, [r7, #0]
    32f0:	4694      	mov	ip, r2
    32f2:	4463      	add	r3, ip
    32f4:	79db      	ldrb	r3, [r3, #7]
    32f6:	07db      	lsls	r3, r3, #31
    32f8:	d551      	bpl.n	339e <USB_Handler+0x5a2>
    32fa:	e6eb      	b.n	30d4 <USB_Handler+0x2d8>
    32fc:	3301      	adds	r3, #1
    32fe:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3300:	2b08      	cmp	r3, #8
    3302:	d100      	bne.n	3306 <USB_Handler+0x50a>
    3304:	e6e6      	b.n	30d4 <USB_Handler+0x2d8>
    3306:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3308:	9301      	str	r3, [sp, #4]
    330a:	0032      	movs	r2, r6
    330c:	411a      	asrs	r2, r3
    330e:	4661      	mov	r1, ip
    3310:	4211      	tst	r1, r2
    3312:	d0f3      	beq.n	32fc <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3314:	001a      	movs	r2, r3
    3316:	3208      	adds	r2, #8
    3318:	0152      	lsls	r2, r2, #5
    331a:	18ba      	adds	r2, r7, r2
    331c:	79d2      	ldrb	r2, [r2, #7]
    331e:	b2d2      	uxtb	r2, r2
    3320:	7a21      	ldrb	r1, [r4, #8]
    3322:	4011      	ands	r1, r2
    3324:	7820      	ldrb	r0, [r4, #0]
    3326:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3328:	4648      	mov	r0, r9
    332a:	4210      	tst	r0, r2
    332c:	d000      	beq.n	3330 <USB_Handler+0x534>
    332e:	e730      	b.n	3192 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3330:	4650      	mov	r0, sl
    3332:	4210      	tst	r0, r2
    3334:	d000      	beq.n	3338 <USB_Handler+0x53c>
    3336:	e75b      	b.n	31f0 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3338:	4658      	mov	r0, fp
    333a:	4210      	tst	r0, r2
    333c:	d000      	beq.n	3340 <USB_Handler+0x544>
    333e:	e777      	b.n	3230 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3340:	200c      	movs	r0, #12
    3342:	4210      	tst	r0, r2
    3344:	d0da      	beq.n	32fc <USB_Handler+0x500>
    3346:	002a      	movs	r2, r5
    3348:	003d      	movs	r5, r7
    334a:	4647      	mov	r7, r8
    334c:	4690      	mov	r8, r2
    334e:	015b      	lsls	r3, r3, #5
    3350:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3352:	2208      	movs	r2, #8
    3354:	32ff      	adds	r2, #255	; 0xff
    3356:	5c9a      	ldrb	r2, [r3, r2]
    3358:	0712      	lsls	r2, r2, #28
    335a:	d5ac      	bpl.n	32b6 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    335c:	3804      	subs	r0, #4
    335e:	2208      	movs	r2, #8
    3360:	32ff      	adds	r2, #255	; 0xff
    3362:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3364:	9801      	ldr	r0, [sp, #4]
    3366:	0142      	lsls	r2, r0, #5
    3368:	4b14      	ldr	r3, [pc, #80]	; (33bc <USB_Handler+0x5c0>)
    336a:	189b      	adds	r3, r3, r2
    336c:	7e9b      	ldrb	r3, [r3, #26]
    336e:	079b      	lsls	r3, r3, #30
    3370:	d505      	bpl.n	337e <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3372:	4b12      	ldr	r3, [pc, #72]	; (33bc <USB_Handler+0x5c0>)
    3374:	189b      	adds	r3, r3, r2
    3376:	7e9a      	ldrb	r2, [r3, #26]
    3378:	2002      	movs	r0, #2
    337a:	4382      	bics	r2, r0
    337c:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    337e:	2380      	movs	r3, #128	; 0x80
    3380:	425b      	negs	r3, r3
    3382:	4642      	mov	r2, r8
    3384:	4313      	orrs	r3, r2
    3386:	4a0e      	ldr	r2, [pc, #56]	; (33c0 <USB_Handler+0x5c4>)
    3388:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    338a:	9b01      	ldr	r3, [sp, #4]
    338c:	3308      	adds	r3, #8
    338e:	015b      	lsls	r3, r3, #5
    3390:	683a      	ldr	r2, [r7, #0]
    3392:	4694      	mov	ip, r2
    3394:	4463      	add	r3, ip
    3396:	79db      	ldrb	r3, [r3, #7]
    3398:	079b      	lsls	r3, r3, #30
    339a:	d500      	bpl.n	339e <USB_Handler+0x5a2>
    339c:	e69a      	b.n	30d4 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    339e:	230c      	movs	r3, #12
    33a0:	420b      	tst	r3, r1
    33a2:	d100      	bne.n	33a6 <USB_Handler+0x5aa>
    33a4:	e696      	b.n	30d4 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    33a6:	9b01      	ldr	r3, [sp, #4]
    33a8:	011b      	lsls	r3, r3, #4
    33aa:	18fb      	adds	r3, r7, r3
    33ac:	33d8      	adds	r3, #216	; 0xd8
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	4903      	ldr	r1, [pc, #12]	; (33c0 <USB_Handler+0x5c4>)
    33b2:	0038      	movs	r0, r7
    33b4:	4798      	blx	r3
    33b6:	e68d      	b.n	30d4 <USB_Handler+0x2d8>
    33b8:	20000214 	.word	0x20000214
    33bc:	2000054c 	.word	0x2000054c
    33c0:	20000218 	.word	0x20000218

000033c4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    33c4:	2200      	movs	r2, #0
    33c6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    33c8:	2301      	movs	r3, #1
    33ca:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    33cc:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    33ce:	70c3      	strb	r3, [r0, #3]
}
    33d0:	4770      	bx	lr
	...

000033d4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    33d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33d6:	46ce      	mov	lr, r9
    33d8:	4647      	mov	r7, r8
    33da:	b580      	push	{r7, lr}
    33dc:	b083      	sub	sp, #12
    33de:	0004      	movs	r4, r0
    33e0:	000d      	movs	r5, r1
    33e2:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    33e4:	2300      	movs	r3, #0
    33e6:	4a6e      	ldr	r2, [pc, #440]	; (35a0 <usb_init+0x1cc>)
    33e8:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    33ea:	4a6e      	ldr	r2, [pc, #440]	; (35a4 <usb_init+0x1d0>)
    33ec:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    33ee:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    33f0:	496d      	ldr	r1, [pc, #436]	; (35a8 <usb_init+0x1d4>)
    33f2:	69ca      	ldr	r2, [r1, #28]
    33f4:	2020      	movs	r0, #32
    33f6:	4302      	orrs	r2, r0
    33f8:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    33fa:	af01      	add	r7, sp, #4
    33fc:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    33fe:	2201      	movs	r2, #1
    3400:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    3402:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3404:	3306      	adds	r3, #6
    3406:	4699      	mov	r9, r3
    3408:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    340a:	0039      	movs	r1, r7
    340c:	3808      	subs	r0, #8
    340e:	4b67      	ldr	r3, [pc, #412]	; (35ac <usb_init+0x1d8>)
    3410:	4698      	mov	r8, r3
    3412:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3414:	464b      	mov	r3, r9
    3416:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3418:	0039      	movs	r1, r7
    341a:	2019      	movs	r0, #25
    341c:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    341e:	78b3      	ldrb	r3, [r6, #2]
    3420:	466a      	mov	r2, sp
    3422:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3424:	4669      	mov	r1, sp
    3426:	2006      	movs	r0, #6
    3428:	4b61      	ldr	r3, [pc, #388]	; (35b0 <usb_init+0x1dc>)
    342a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    342c:	2006      	movs	r0, #6
    342e:	4b61      	ldr	r3, [pc, #388]	; (35b4 <usb_init+0x1e0>)
    3430:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    3432:	782b      	ldrb	r3, [r5, #0]
    3434:	2201      	movs	r2, #1
    3436:	4313      	orrs	r3, r2
    3438:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    343a:	78ab      	ldrb	r3, [r5, #2]
    343c:	07db      	lsls	r3, r3, #31
    343e:	d4fc      	bmi.n	343a <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3440:	4a5d      	ldr	r2, [pc, #372]	; (35b8 <usb_init+0x1e4>)
    3442:	78d3      	ldrb	r3, [r2, #3]
    3444:	2103      	movs	r1, #3
    3446:	438b      	bics	r3, r1
    3448:	2102      	movs	r1, #2
    344a:	430b      	orrs	r3, r1
    344c:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    344e:	78d3      	ldrb	r3, [r2, #3]
    3450:	210c      	movs	r1, #12
    3452:	438b      	bics	r3, r1
    3454:	2108      	movs	r1, #8
    3456:	430b      	orrs	r3, r1
    3458:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    345a:	4b58      	ldr	r3, [pc, #352]	; (35bc <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    345c:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    345e:	039b      	lsls	r3, r3, #14
    3460:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    3462:	2b1f      	cmp	r3, #31
    3464:	d100      	bne.n	3468 <usb_init+0x94>
    3466:	e08f      	b.n	3588 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    3468:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    346a:	019b      	lsls	r3, r3, #6
    346c:	4954      	ldr	r1, [pc, #336]	; (35c0 <usb_init+0x1ec>)
    346e:	400a      	ands	r2, r1
    3470:	4313      	orrs	r3, r2
    3472:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    3474:	4b51      	ldr	r3, [pc, #324]	; (35bc <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    347a:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    347c:	2b1f      	cmp	r3, #31
    347e:	d100      	bne.n	3482 <usb_init+0xae>
    3480:	e084      	b.n	358c <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    3482:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3484:	211f      	movs	r1, #31
    3486:	438a      	bics	r2, r1
    3488:	4313      	orrs	r3, r2
    348a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    348c:	4b4b      	ldr	r3, [pc, #300]	; (35bc <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    348e:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    3490:	019b      	lsls	r3, r3, #6
    3492:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    3494:	2b07      	cmp	r3, #7
    3496:	d100      	bne.n	349a <usb_init+0xc6>
    3498:	e07a      	b.n	3590 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    349a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    349c:	031b      	lsls	r3, r3, #12
    349e:	4949      	ldr	r1, [pc, #292]	; (35c4 <usb_init+0x1f0>)
    34a0:	400a      	ands	r2, r1
    34a2:	4313      	orrs	r3, r2
    34a4:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    34a6:	7832      	ldrb	r2, [r6, #0]
    34a8:	7829      	ldrb	r1, [r5, #0]
    34aa:	01d2      	lsls	r2, r2, #7
    34ac:	237f      	movs	r3, #127	; 0x7f
    34ae:	400b      	ands	r3, r1
    34b0:	4313      	orrs	r3, r2
    34b2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    34b4:	7871      	ldrb	r1, [r6, #1]
    34b6:	782b      	ldrb	r3, [r5, #0]
    34b8:	2201      	movs	r2, #1
    34ba:	400a      	ands	r2, r1
    34bc:	0092      	lsls	r2, r2, #2
    34be:	2104      	movs	r1, #4
    34c0:	438b      	bics	r3, r1
    34c2:	4313      	orrs	r3, r2
    34c4:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    34c6:	4b40      	ldr	r3, [pc, #256]	; (35c8 <usb_init+0x1f4>)
    34c8:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    34ca:	78f3      	ldrb	r3, [r6, #3]
    34cc:	2b01      	cmp	r3, #1
    34ce:	d061      	beq.n	3594 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    34d0:	2b00      	cmp	r3, #0
    34d2:	d106      	bne.n	34e2 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    34d4:	6822      	ldr	r2, [r4, #0]
    34d6:	8913      	ldrh	r3, [r2, #8]
    34d8:	210c      	movs	r1, #12
    34da:	438b      	bics	r3, r1
    34dc:	2104      	movs	r1, #4
    34de:	430b      	orrs	r3, r1
    34e0:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    34e2:	2280      	movs	r2, #128	; 0x80
    34e4:	0052      	lsls	r2, r2, #1
    34e6:	2100      	movs	r1, #0
    34e8:	4837      	ldr	r0, [pc, #220]	; (35c8 <usb_init+0x1f4>)
    34ea:	4b38      	ldr	r3, [pc, #224]	; (35cc <usb_init+0x1f8>)
    34ec:	4798      	blx	r3
    34ee:	1d23      	adds	r3, r4, #4
    34f0:	0021      	movs	r1, r4
    34f2:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    34f4:	2200      	movs	r2, #0
    34f6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    34f8:	428b      	cmp	r3, r1
    34fa:	d1fc      	bne.n	34f6 <usb_init+0x122>
    34fc:	0021      	movs	r1, r4
    34fe:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    3500:	2200      	movs	r2, #0
    3502:	601a      	str	r2, [r3, #0]
    3504:	605a      	str	r2, [r3, #4]
    3506:	609a      	str	r2, [r3, #8]
    3508:	60da      	str	r2, [r3, #12]
    350a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    350c:	428b      	cmp	r3, r1
    350e:	d1f8      	bne.n	3502 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    3510:	2300      	movs	r3, #0
    3512:	22a4      	movs	r2, #164	; 0xa4
    3514:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    3516:	3201      	adds	r2, #1
    3518:	54a3      	strb	r3, [r4, r2]
    351a:	0023      	movs	r3, r4
    351c:	33a6      	adds	r3, #166	; 0xa6
    351e:	0021      	movs	r1, r4
    3520:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    3522:	2200      	movs	r2, #0
    3524:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3526:	721a      	strb	r2, [r3, #8]
    3528:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    352a:	4299      	cmp	r1, r3
    352c:	d1fa      	bne.n	3524 <usb_init+0x150>
    352e:	0023      	movs	r3, r4
    3530:	33b8      	adds	r3, #184	; 0xb8
    3532:	0021      	movs	r1, r4
    3534:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    3536:	2200      	movs	r2, #0
    3538:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    353a:	428b      	cmp	r3, r1
    353c:	d1fc      	bne.n	3538 <usb_init+0x164>
    353e:	0021      	movs	r1, r4
    3540:	3155      	adds	r1, #85	; 0x55
    3542:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    3544:	2200      	movs	r2, #0
    3546:	601a      	str	r2, [r3, #0]
    3548:	605a      	str	r2, [r3, #4]
    354a:	609a      	str	r2, [r3, #8]
    354c:	60da      	str	r2, [r3, #12]
    354e:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    3550:	428b      	cmp	r3, r1
    3552:	d1f8      	bne.n	3546 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    3554:	2300      	movs	r3, #0
    3556:	22aa      	movs	r2, #170	; 0xaa
    3558:	0052      	lsls	r2, r2, #1
    355a:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    355c:	3202      	adds	r2, #2
    355e:	52a3      	strh	r3, [r4, r2]
    3560:	0023      	movs	r3, r4
    3562:	3359      	adds	r3, #89	; 0x59
    3564:	33ff      	adds	r3, #255	; 0xff
    3566:	3461      	adds	r4, #97	; 0x61
    3568:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    356a:	2200      	movs	r2, #0
    356c:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    356e:	721a      	strb	r2, [r3, #8]
    3570:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    3572:	42a3      	cmp	r3, r4
    3574:	d1fa      	bne.n	356c <usb_init+0x198>
    3576:	2280      	movs	r2, #128	; 0x80
    3578:	4b15      	ldr	r3, [pc, #84]	; (35d0 <usb_init+0x1fc>)
    357a:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    357c:	2000      	movs	r0, #0
    357e:	b003      	add	sp, #12
    3580:	bc0c      	pop	{r2, r3}
    3582:	4690      	mov	r8, r2
    3584:	4699      	mov	r9, r3
    3586:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    3588:	3b1a      	subs	r3, #26
    358a:	e76d      	b.n	3468 <usb_init+0x94>
		pad_transp = 29;
    358c:	3b02      	subs	r3, #2
    358e:	e778      	b.n	3482 <usb_init+0xae>
		pad_trim = 3;
    3590:	3b04      	subs	r3, #4
    3592:	e782      	b.n	349a <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3594:	6822      	ldr	r2, [r4, #0]
    3596:	8913      	ldrh	r3, [r2, #8]
    3598:	3108      	adds	r1, #8
    359a:	438b      	bics	r3, r1
    359c:	8113      	strh	r3, [r2, #8]
    359e:	e7a0      	b.n	34e2 <usb_init+0x10e>
    35a0:	20000220 	.word	0x20000220
    35a4:	20000210 	.word	0x20000210
    35a8:	40000400 	.word	0x40000400
    35ac:	000053f9 	.word	0x000053f9
    35b0:	00005301 	.word	0x00005301
    35b4:	00005275 	.word	0x00005275
    35b8:	41005000 	.word	0x41005000
    35bc:	00806024 	.word	0x00806024
    35c0:	fffff83f 	.word	0xfffff83f
    35c4:	ffff8fff 	.word	0xffff8fff
    35c8:	2000054c 	.word	0x2000054c
    35cc:	00005cbf 	.word	0x00005cbf
    35d0:	e000e100 	.word	0xe000e100

000035d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    35d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    35d6:	2200      	movs	r2, #0
    35d8:	4b10      	ldr	r3, [pc, #64]	; (361c <EIC_Handler+0x48>)
    35da:	701a      	strb	r2, [r3, #0]
    35dc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    35de:	4910      	ldr	r1, [pc, #64]	; (3620 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    35e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    35e2:	4e10      	ldr	r6, [pc, #64]	; (3624 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    35e4:	4c0d      	ldr	r4, [pc, #52]	; (361c <EIC_Handler+0x48>)
    35e6:	e00a      	b.n	35fe <EIC_Handler+0x2a>
		return eics[eic_index];
    35e8:	490d      	ldr	r1, [pc, #52]	; (3620 <EIC_Handler+0x4c>)
    35ea:	e008      	b.n	35fe <EIC_Handler+0x2a>
    35ec:	7823      	ldrb	r3, [r4, #0]
    35ee:	3301      	adds	r3, #1
    35f0:	b2db      	uxtb	r3, r3
    35f2:	7023      	strb	r3, [r4, #0]
    35f4:	2b0f      	cmp	r3, #15
    35f6:	d810      	bhi.n	361a <EIC_Handler+0x46>
		return NULL;
    35f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    35fa:	2b1f      	cmp	r3, #31
    35fc:	d9f4      	bls.n	35e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    35fe:	0028      	movs	r0, r5
    3600:	4018      	ands	r0, r3
    3602:	2201      	movs	r2, #1
    3604:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    3606:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3608:	4210      	tst	r0, r2
    360a:	d0ef      	beq.n	35ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    360c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    360e:	009b      	lsls	r3, r3, #2
    3610:	599b      	ldr	r3, [r3, r6]
    3612:	2b00      	cmp	r3, #0
    3614:	d0ea      	beq.n	35ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3616:	4798      	blx	r3
    3618:	e7e8      	b.n	35ec <EIC_Handler+0x18>
			}
		}
	}
}
    361a:	bd70      	pop	{r4, r5, r6, pc}
    361c:	2000064c 	.word	0x2000064c
    3620:	40001800 	.word	0x40001800
    3624:	200002cc 	.word	0x200002cc

00003628 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3628:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    362a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    362c:	2340      	movs	r3, #64	; 0x40
    362e:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    3630:	4281      	cmp	r1, r0
    3632:	d202      	bcs.n	363a <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3634:	0018      	movs	r0, r3
    3636:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3638:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    363a:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    363c:	1c63      	adds	r3, r4, #1
    363e:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    3640:	4288      	cmp	r0, r1
    3642:	d9f9      	bls.n	3638 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3644:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    3646:	2cff      	cmp	r4, #255	; 0xff
    3648:	d8f4      	bhi.n	3634 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    364a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    364c:	2300      	movs	r3, #0
    364e:	e7f1      	b.n	3634 <_sercom_get_sync_baud_val+0xc>

00003650 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3650:	b510      	push	{r4, lr}
    3652:	b082      	sub	sp, #8
    3654:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3656:	4b0e      	ldr	r3, [pc, #56]	; (3690 <sercom_set_gclk_generator+0x40>)
    3658:	781b      	ldrb	r3, [r3, #0]
    365a:	2b00      	cmp	r3, #0
    365c:	d007      	beq.n	366e <sercom_set_gclk_generator+0x1e>
    365e:	2900      	cmp	r1, #0
    3660:	d105      	bne.n	366e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3662:	4b0b      	ldr	r3, [pc, #44]	; (3690 <sercom_set_gclk_generator+0x40>)
    3664:	785b      	ldrb	r3, [r3, #1]
    3666:	4283      	cmp	r3, r0
    3668:	d010      	beq.n	368c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    366a:	201d      	movs	r0, #29
    366c:	e00c      	b.n	3688 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    366e:	a901      	add	r1, sp, #4
    3670:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3672:	2013      	movs	r0, #19
    3674:	4b07      	ldr	r3, [pc, #28]	; (3694 <sercom_set_gclk_generator+0x44>)
    3676:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3678:	2013      	movs	r0, #19
    367a:	4b07      	ldr	r3, [pc, #28]	; (3698 <sercom_set_gclk_generator+0x48>)
    367c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    367e:	4b04      	ldr	r3, [pc, #16]	; (3690 <sercom_set_gclk_generator+0x40>)
    3680:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3682:	2201      	movs	r2, #1
    3684:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    3686:	2000      	movs	r0, #0
}
    3688:	b002      	add	sp, #8
    368a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    368c:	2000      	movs	r0, #0
    368e:	e7fb      	b.n	3688 <sercom_set_gclk_generator+0x38>
    3690:	2000022c 	.word	0x2000022c
    3694:	00005301 	.word	0x00005301
    3698:	00005275 	.word	0x00005275

0000369c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    369c:	4b40      	ldr	r3, [pc, #256]	; (37a0 <_sercom_get_default_pad+0x104>)
    369e:	4298      	cmp	r0, r3
    36a0:	d031      	beq.n	3706 <_sercom_get_default_pad+0x6a>
    36a2:	d90a      	bls.n	36ba <_sercom_get_default_pad+0x1e>
    36a4:	4b3f      	ldr	r3, [pc, #252]	; (37a4 <_sercom_get_default_pad+0x108>)
    36a6:	4298      	cmp	r0, r3
    36a8:	d04d      	beq.n	3746 <_sercom_get_default_pad+0xaa>
    36aa:	4b3f      	ldr	r3, [pc, #252]	; (37a8 <_sercom_get_default_pad+0x10c>)
    36ac:	4298      	cmp	r0, r3
    36ae:	d05a      	beq.n	3766 <_sercom_get_default_pad+0xca>
    36b0:	4b3e      	ldr	r3, [pc, #248]	; (37ac <_sercom_get_default_pad+0x110>)
    36b2:	4298      	cmp	r0, r3
    36b4:	d037      	beq.n	3726 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    36b6:	2000      	movs	r0, #0
}
    36b8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    36ba:	4b3d      	ldr	r3, [pc, #244]	; (37b0 <_sercom_get_default_pad+0x114>)
    36bc:	4298      	cmp	r0, r3
    36be:	d00c      	beq.n	36da <_sercom_get_default_pad+0x3e>
    36c0:	4b3c      	ldr	r3, [pc, #240]	; (37b4 <_sercom_get_default_pad+0x118>)
    36c2:	4298      	cmp	r0, r3
    36c4:	d1f7      	bne.n	36b6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    36c6:	2901      	cmp	r1, #1
    36c8:	d017      	beq.n	36fa <_sercom_get_default_pad+0x5e>
    36ca:	2900      	cmp	r1, #0
    36cc:	d05d      	beq.n	378a <_sercom_get_default_pad+0xee>
    36ce:	2902      	cmp	r1, #2
    36d0:	d015      	beq.n	36fe <_sercom_get_default_pad+0x62>
    36d2:	2903      	cmp	r1, #3
    36d4:	d015      	beq.n	3702 <_sercom_get_default_pad+0x66>
	return 0;
    36d6:	2000      	movs	r0, #0
    36d8:	e7ee      	b.n	36b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    36da:	2901      	cmp	r1, #1
    36dc:	d007      	beq.n	36ee <_sercom_get_default_pad+0x52>
    36de:	2900      	cmp	r1, #0
    36e0:	d051      	beq.n	3786 <_sercom_get_default_pad+0xea>
    36e2:	2902      	cmp	r1, #2
    36e4:	d005      	beq.n	36f2 <_sercom_get_default_pad+0x56>
    36e6:	2903      	cmp	r1, #3
    36e8:	d005      	beq.n	36f6 <_sercom_get_default_pad+0x5a>
	return 0;
    36ea:	2000      	movs	r0, #0
    36ec:	e7e4      	b.n	36b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    36ee:	4832      	ldr	r0, [pc, #200]	; (37b8 <_sercom_get_default_pad+0x11c>)
    36f0:	e7e2      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    36f2:	4832      	ldr	r0, [pc, #200]	; (37bc <_sercom_get_default_pad+0x120>)
    36f4:	e7e0      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    36f6:	4832      	ldr	r0, [pc, #200]	; (37c0 <_sercom_get_default_pad+0x124>)
    36f8:	e7de      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    36fa:	4832      	ldr	r0, [pc, #200]	; (37c4 <_sercom_get_default_pad+0x128>)
    36fc:	e7dc      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    36fe:	4832      	ldr	r0, [pc, #200]	; (37c8 <_sercom_get_default_pad+0x12c>)
    3700:	e7da      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3702:	4832      	ldr	r0, [pc, #200]	; (37cc <_sercom_get_default_pad+0x130>)
    3704:	e7d8      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3706:	2901      	cmp	r1, #1
    3708:	d007      	beq.n	371a <_sercom_get_default_pad+0x7e>
    370a:	2900      	cmp	r1, #0
    370c:	d03f      	beq.n	378e <_sercom_get_default_pad+0xf2>
    370e:	2902      	cmp	r1, #2
    3710:	d005      	beq.n	371e <_sercom_get_default_pad+0x82>
    3712:	2903      	cmp	r1, #3
    3714:	d005      	beq.n	3722 <_sercom_get_default_pad+0x86>
	return 0;
    3716:	2000      	movs	r0, #0
    3718:	e7ce      	b.n	36b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    371a:	482d      	ldr	r0, [pc, #180]	; (37d0 <_sercom_get_default_pad+0x134>)
    371c:	e7cc      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    371e:	482d      	ldr	r0, [pc, #180]	; (37d4 <_sercom_get_default_pad+0x138>)
    3720:	e7ca      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3722:	482d      	ldr	r0, [pc, #180]	; (37d8 <_sercom_get_default_pad+0x13c>)
    3724:	e7c8      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3726:	2901      	cmp	r1, #1
    3728:	d007      	beq.n	373a <_sercom_get_default_pad+0x9e>
    372a:	2900      	cmp	r1, #0
    372c:	d031      	beq.n	3792 <_sercom_get_default_pad+0xf6>
    372e:	2902      	cmp	r1, #2
    3730:	d005      	beq.n	373e <_sercom_get_default_pad+0xa2>
    3732:	2903      	cmp	r1, #3
    3734:	d005      	beq.n	3742 <_sercom_get_default_pad+0xa6>
	return 0;
    3736:	2000      	movs	r0, #0
    3738:	e7be      	b.n	36b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    373a:	4828      	ldr	r0, [pc, #160]	; (37dc <_sercom_get_default_pad+0x140>)
    373c:	e7bc      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    373e:	4828      	ldr	r0, [pc, #160]	; (37e0 <_sercom_get_default_pad+0x144>)
    3740:	e7ba      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3742:	4828      	ldr	r0, [pc, #160]	; (37e4 <_sercom_get_default_pad+0x148>)
    3744:	e7b8      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3746:	2901      	cmp	r1, #1
    3748:	d007      	beq.n	375a <_sercom_get_default_pad+0xbe>
    374a:	2900      	cmp	r1, #0
    374c:	d023      	beq.n	3796 <_sercom_get_default_pad+0xfa>
    374e:	2902      	cmp	r1, #2
    3750:	d005      	beq.n	375e <_sercom_get_default_pad+0xc2>
    3752:	2903      	cmp	r1, #3
    3754:	d005      	beq.n	3762 <_sercom_get_default_pad+0xc6>
	return 0;
    3756:	2000      	movs	r0, #0
    3758:	e7ae      	b.n	36b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    375a:	4823      	ldr	r0, [pc, #140]	; (37e8 <_sercom_get_default_pad+0x14c>)
    375c:	e7ac      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    375e:	4823      	ldr	r0, [pc, #140]	; (37ec <_sercom_get_default_pad+0x150>)
    3760:	e7aa      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3762:	4823      	ldr	r0, [pc, #140]	; (37f0 <_sercom_get_default_pad+0x154>)
    3764:	e7a8      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3766:	2901      	cmp	r1, #1
    3768:	d007      	beq.n	377a <_sercom_get_default_pad+0xde>
    376a:	2900      	cmp	r1, #0
    376c:	d015      	beq.n	379a <_sercom_get_default_pad+0xfe>
    376e:	2902      	cmp	r1, #2
    3770:	d005      	beq.n	377e <_sercom_get_default_pad+0xe2>
    3772:	2903      	cmp	r1, #3
    3774:	d005      	beq.n	3782 <_sercom_get_default_pad+0xe6>
	return 0;
    3776:	2000      	movs	r0, #0
    3778:	e79e      	b.n	36b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    377a:	481e      	ldr	r0, [pc, #120]	; (37f4 <_sercom_get_default_pad+0x158>)
    377c:	e79c      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    377e:	481e      	ldr	r0, [pc, #120]	; (37f8 <_sercom_get_default_pad+0x15c>)
    3780:	e79a      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3782:	481e      	ldr	r0, [pc, #120]	; (37fc <_sercom_get_default_pad+0x160>)
    3784:	e798      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3786:	481e      	ldr	r0, [pc, #120]	; (3800 <_sercom_get_default_pad+0x164>)
    3788:	e796      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    378a:	2003      	movs	r0, #3
    378c:	e794      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    378e:	481d      	ldr	r0, [pc, #116]	; (3804 <_sercom_get_default_pad+0x168>)
    3790:	e792      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3792:	481d      	ldr	r0, [pc, #116]	; (3808 <_sercom_get_default_pad+0x16c>)
    3794:	e790      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    3796:	481d      	ldr	r0, [pc, #116]	; (380c <_sercom_get_default_pad+0x170>)
    3798:	e78e      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    379a:	481d      	ldr	r0, [pc, #116]	; (3810 <_sercom_get_default_pad+0x174>)
    379c:	e78c      	b.n	36b8 <_sercom_get_default_pad+0x1c>
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	42001000 	.word	0x42001000
    37a4:	42001800 	.word	0x42001800
    37a8:	42001c00 	.word	0x42001c00
    37ac:	42001400 	.word	0x42001400
    37b0:	42000800 	.word	0x42000800
    37b4:	42000c00 	.word	0x42000c00
    37b8:	00050003 	.word	0x00050003
    37bc:	00060003 	.word	0x00060003
    37c0:	00070003 	.word	0x00070003
    37c4:	00010003 	.word	0x00010003
    37c8:	001e0003 	.word	0x001e0003
    37cc:	001f0003 	.word	0x001f0003
    37d0:	00090003 	.word	0x00090003
    37d4:	000a0003 	.word	0x000a0003
    37d8:	000b0003 	.word	0x000b0003
    37dc:	00110003 	.word	0x00110003
    37e0:	00120003 	.word	0x00120003
    37e4:	00130003 	.word	0x00130003
    37e8:	000d0003 	.word	0x000d0003
    37ec:	000e0003 	.word	0x000e0003
    37f0:	000f0003 	.word	0x000f0003
    37f4:	00170003 	.word	0x00170003
    37f8:	00180003 	.word	0x00180003
    37fc:	00190003 	.word	0x00190003
    3800:	00040003 	.word	0x00040003
    3804:	00080003 	.word	0x00080003
    3808:	00100003 	.word	0x00100003
    380c:	000c0003 	.word	0x000c0003
    3810:	00160003 	.word	0x00160003

00003814 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3814:	b530      	push	{r4, r5, lr}
    3816:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3818:	4b0b      	ldr	r3, [pc, #44]	; (3848 <_sercom_get_sercom_inst_index+0x34>)
    381a:	466a      	mov	r2, sp
    381c:	cb32      	ldmia	r3!, {r1, r4, r5}
    381e:	c232      	stmia	r2!, {r1, r4, r5}
    3820:	cb32      	ldmia	r3!, {r1, r4, r5}
    3822:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3824:	9b00      	ldr	r3, [sp, #0]
    3826:	4283      	cmp	r3, r0
    3828:	d00b      	beq.n	3842 <_sercom_get_sercom_inst_index+0x2e>
    382a:	2301      	movs	r3, #1
    382c:	009a      	lsls	r2, r3, #2
    382e:	4669      	mov	r1, sp
    3830:	5852      	ldr	r2, [r2, r1]
    3832:	4282      	cmp	r2, r0
    3834:	d006      	beq.n	3844 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3836:	3301      	adds	r3, #1
    3838:	2b06      	cmp	r3, #6
    383a:	d1f7      	bne.n	382c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    383c:	2000      	movs	r0, #0
}
    383e:	b007      	add	sp, #28
    3840:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3842:	2300      	movs	r3, #0
			return i;
    3844:	b2d8      	uxtb	r0, r3
    3846:	e7fa      	b.n	383e <_sercom_get_sercom_inst_index+0x2a>
    3848:	00005f08 	.word	0x00005f08

0000384c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    384c:	b570      	push	{r4, r5, r6, lr}
    384e:	b082      	sub	sp, #8
    3850:	0005      	movs	r5, r0
    3852:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3854:	2200      	movs	r2, #0
    3856:	466b      	mov	r3, sp
    3858:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    385a:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    385c:	0030      	movs	r0, r6
    385e:	4b24      	ldr	r3, [pc, #144]	; (38f0 <spi_set_baudrate+0xa4>)
    3860:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3862:	231f      	movs	r3, #31
    3864:	4018      	ands	r0, r3
    3866:	3b1e      	subs	r3, #30
    3868:	4083      	lsls	r3, r0
    386a:	2280      	movs	r2, #128	; 0x80
    386c:	4921      	ldr	r1, [pc, #132]	; (38f4 <spi_set_baudrate+0xa8>)
    386e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3870:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3872:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    3874:	2b00      	cmp	r3, #0
    3876:	d1fc      	bne.n	3872 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3878:	338f      	adds	r3, #143	; 0x8f
    387a:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    387c:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    387e:	6833      	ldr	r3, [r6, #0]
    3880:	2202      	movs	r2, #2
    3882:	4393      	bics	r3, r2
    3884:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3886:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3888:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    388a:	2b00      	cmp	r3, #0
    388c:	d1fc      	bne.n	3888 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    388e:	4b1a      	ldr	r3, [pc, #104]	; (38f8 <spi_set_baudrate+0xac>)
    3890:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3892:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3894:	b2c0      	uxtb	r0, r0
    3896:	4b19      	ldr	r3, [pc, #100]	; (38fc <spi_set_baudrate+0xb0>)
    3898:	4798      	blx	r3
    389a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    389c:	466b      	mov	r3, sp
    389e:	1d9a      	adds	r2, r3, #6
    38a0:	0020      	movs	r0, r4
    38a2:	4b17      	ldr	r3, [pc, #92]	; (3900 <spi_set_baudrate+0xb4>)
    38a4:	4798      	blx	r3
    38a6:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    38a8:	d003      	beq.n	38b2 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    38aa:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    38ac:	0020      	movs	r0, r4
    38ae:	b002      	add	sp, #8
    38b0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    38b2:	466b      	mov	r3, sp
    38b4:	3306      	adds	r3, #6
    38b6:	781b      	ldrb	r3, [r3, #0]
    38b8:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    38ba:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    38bc:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    38be:	2b00      	cmp	r3, #0
    38c0:	d1fc      	bne.n	38bc <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    38c2:	0030      	movs	r0, r6
    38c4:	4b0a      	ldr	r3, [pc, #40]	; (38f0 <spi_set_baudrate+0xa4>)
    38c6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    38c8:	231f      	movs	r3, #31
    38ca:	4018      	ands	r0, r3
    38cc:	3b1e      	subs	r3, #30
    38ce:	4083      	lsls	r3, r0
    38d0:	4a08      	ldr	r2, [pc, #32]	; (38f4 <spi_set_baudrate+0xa8>)
    38d2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    38d4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    38d6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    38d8:	2b00      	cmp	r3, #0
    38da:	d1fc      	bne.n	38d6 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    38dc:	6833      	ldr	r3, [r6, #0]
    38de:	2202      	movs	r2, #2
    38e0:	4313      	orrs	r3, r2
    38e2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    38e4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    38e6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    38e8:	2b00      	cmp	r3, #0
    38ea:	d1fc      	bne.n	38e6 <spi_set_baudrate+0x9a>
    38ec:	e7de      	b.n	38ac <spi_set_baudrate+0x60>
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	0000419d 	.word	0x0000419d
    38f4:	e000e100 	.word	0xe000e100
    38f8:	00003815 	.word	0x00003815
    38fc:	0000531d 	.word	0x0000531d
    3900:	00003629 	.word	0x00003629

00003904 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3904:	b5f0      	push	{r4, r5, r6, r7, lr}
    3906:	b08b      	sub	sp, #44	; 0x2c
    3908:	0005      	movs	r5, r0
    390a:	000c      	movs	r4, r1
    390c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    390e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3910:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3912:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3914:	079b      	lsls	r3, r3, #30
    3916:	d501      	bpl.n	391c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3918:	b00b      	add	sp, #44	; 0x2c
    391a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    391c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    391e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3920:	07db      	lsls	r3, r3, #31
    3922:	d4f9      	bmi.n	3918 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3924:	0008      	movs	r0, r1
    3926:	4b6f      	ldr	r3, [pc, #444]	; (3ae4 <spi_init+0x1e0>)
    3928:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    392a:	4a6f      	ldr	r2, [pc, #444]	; (3ae8 <spi_init+0x1e4>)
    392c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    392e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3930:	2301      	movs	r3, #1
    3932:	40bb      	lsls	r3, r7
    3934:	430b      	orrs	r3, r1
    3936:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3938:	a909      	add	r1, sp, #36	; 0x24
    393a:	2724      	movs	r7, #36	; 0x24
    393c:	5df3      	ldrb	r3, [r6, r7]
    393e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3940:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3942:	b2c3      	uxtb	r3, r0
    3944:	9301      	str	r3, [sp, #4]
    3946:	0018      	movs	r0, r3
    3948:	4b68      	ldr	r3, [pc, #416]	; (3aec <spi_init+0x1e8>)
    394a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    394c:	9801      	ldr	r0, [sp, #4]
    394e:	4b68      	ldr	r3, [pc, #416]	; (3af0 <spi_init+0x1ec>)
    3950:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3952:	5df0      	ldrb	r0, [r6, r7]
    3954:	2100      	movs	r1, #0
    3956:	4b67      	ldr	r3, [pc, #412]	; (3af4 <spi_init+0x1f0>)
    3958:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    395a:	7833      	ldrb	r3, [r6, #0]
    395c:	2b01      	cmp	r3, #1
    395e:	d03f      	beq.n	39e0 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    3960:	7833      	ldrb	r3, [r6, #0]
    3962:	2b00      	cmp	r3, #0
    3964:	d103      	bne.n	396e <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    3966:	6823      	ldr	r3, [r4, #0]
    3968:	2208      	movs	r2, #8
    396a:	4313      	orrs	r3, r2
    396c:	6023      	str	r3, [r4, #0]
    396e:	002b      	movs	r3, r5
    3970:	330c      	adds	r3, #12
    3972:	0029      	movs	r1, r5
    3974:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    3976:	2200      	movs	r2, #0
    3978:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    397a:	428b      	cmp	r3, r1
    397c:	d1fc      	bne.n	3978 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    397e:	2300      	movs	r3, #0
    3980:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3982:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3984:	2400      	movs	r4, #0
    3986:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3988:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    398a:	3336      	adds	r3, #54	; 0x36
    398c:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    398e:	3301      	adds	r3, #1
    3990:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3992:	3301      	adds	r3, #1
    3994:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3996:	3b35      	subs	r3, #53	; 0x35
    3998:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    399a:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    399c:	6828      	ldr	r0, [r5, #0]
    399e:	4b51      	ldr	r3, [pc, #324]	; (3ae4 <spi_init+0x1e0>)
    39a0:	4798      	blx	r3
    39a2:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    39a4:	4954      	ldr	r1, [pc, #336]	; (3af8 <spi_init+0x1f4>)
    39a6:	4b55      	ldr	r3, [pc, #340]	; (3afc <spi_init+0x1f8>)
    39a8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    39aa:	00bf      	lsls	r7, r7, #2
    39ac:	4b54      	ldr	r3, [pc, #336]	; (3b00 <spi_init+0x1fc>)
    39ae:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    39b0:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    39b2:	ab04      	add	r3, sp, #16
    39b4:	2280      	movs	r2, #128	; 0x80
    39b6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    39b8:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    39ba:	3a7f      	subs	r2, #127	; 0x7f
    39bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    39be:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    39c0:	7833      	ldrb	r3, [r6, #0]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d102      	bne.n	39cc <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    39c6:	2200      	movs	r2, #0
    39c8:	ab04      	add	r3, sp, #16
    39ca:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    39cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    39ce:	9305      	str	r3, [sp, #20]
    39d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    39d2:	9306      	str	r3, [sp, #24]
    39d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    39d6:	9307      	str	r3, [sp, #28]
    39d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    39da:	9308      	str	r3, [sp, #32]
    39dc:	2400      	movs	r4, #0
    39de:	e00b      	b.n	39f8 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    39e0:	6823      	ldr	r3, [r4, #0]
    39e2:	220c      	movs	r2, #12
    39e4:	4313      	orrs	r3, r2
    39e6:	6023      	str	r3, [r4, #0]
    39e8:	e7ba      	b.n	3960 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    39ea:	0038      	movs	r0, r7
    39ec:	4b45      	ldr	r3, [pc, #276]	; (3b04 <spi_init+0x200>)
    39ee:	4798      	blx	r3
    39f0:	e00a      	b.n	3a08 <spi_init+0x104>
    39f2:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    39f4:	2c04      	cmp	r4, #4
    39f6:	d010      	beq.n	3a1a <spi_init+0x116>
    39f8:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    39fa:	00a3      	lsls	r3, r4, #2
    39fc:	aa02      	add	r2, sp, #8
    39fe:	200c      	movs	r0, #12
    3a00:	1812      	adds	r2, r2, r0
    3a02:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3a04:	2800      	cmp	r0, #0
    3a06:	d0f0      	beq.n	39ea <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    3a08:	1c43      	adds	r3, r0, #1
    3a0a:	d0f2      	beq.n	39f2 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3a0c:	a904      	add	r1, sp, #16
    3a0e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3a10:	0c00      	lsrs	r0, r0, #16
    3a12:	b2c0      	uxtb	r0, r0
    3a14:	4b3c      	ldr	r3, [pc, #240]	; (3b08 <spi_init+0x204>)
    3a16:	4798      	blx	r3
    3a18:	e7eb      	b.n	39f2 <spi_init+0xee>
	module->mode             = config->mode;
    3a1a:	7833      	ldrb	r3, [r6, #0]
    3a1c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3a1e:	7c33      	ldrb	r3, [r6, #16]
    3a20:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3a22:	7cb3      	ldrb	r3, [r6, #18]
    3a24:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3a26:	7d33      	ldrb	r3, [r6, #20]
    3a28:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    3a2a:	2200      	movs	r2, #0
    3a2c:	ab02      	add	r3, sp, #8
    3a2e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3a30:	7833      	ldrb	r3, [r6, #0]
    3a32:	2b01      	cmp	r3, #1
    3a34:	d012      	beq.n	3a5c <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    3a36:	7833      	ldrb	r3, [r6, #0]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d126      	bne.n	3a8a <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    3a3c:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    3a3e:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    3a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    3a42:	7ff1      	ldrb	r1, [r6, #31]
    3a44:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    3a46:	7fb4      	ldrb	r4, [r6, #30]
    3a48:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    3a4a:	4319      	orrs	r1, r3
    3a4c:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    3a4e:	2320      	movs	r3, #32
    3a50:	5cf3      	ldrb	r3, [r6, r3]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d01b      	beq.n	3a8e <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    3a56:	2340      	movs	r3, #64	; 0x40
    3a58:	431a      	orrs	r2, r3
    3a5a:	e018      	b.n	3a8e <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3a5c:	6828      	ldr	r0, [r5, #0]
    3a5e:	4b21      	ldr	r3, [pc, #132]	; (3ae4 <spi_init+0x1e0>)
    3a60:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3a62:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3a64:	b2c0      	uxtb	r0, r0
    3a66:	4b29      	ldr	r3, [pc, #164]	; (3b0c <spi_init+0x208>)
    3a68:	4798      	blx	r3
    3a6a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    3a6c:	ab02      	add	r3, sp, #8
    3a6e:	1d9a      	adds	r2, r3, #6
    3a70:	69b0      	ldr	r0, [r6, #24]
    3a72:	4b27      	ldr	r3, [pc, #156]	; (3b10 <spi_init+0x20c>)
    3a74:	4798      	blx	r3
    3a76:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3a78:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3a7a:	2b00      	cmp	r3, #0
    3a7c:	d000      	beq.n	3a80 <spi_init+0x17c>
    3a7e:	e74b      	b.n	3918 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    3a80:	ab02      	add	r3, sp, #8
    3a82:	3306      	adds	r3, #6
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	733b      	strb	r3, [r7, #12]
    3a88:	e7d5      	b.n	3a36 <spi_init+0x132>
	uint32_t ctrlb = 0;
    3a8a:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    3a8c:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    3a8e:	6873      	ldr	r3, [r6, #4]
    3a90:	68b1      	ldr	r1, [r6, #8]
    3a92:	430b      	orrs	r3, r1
    3a94:	68f1      	ldr	r1, [r6, #12]
    3a96:	430b      	orrs	r3, r1
    3a98:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    3a9a:	7c31      	ldrb	r1, [r6, #16]
    3a9c:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    3a9e:	7c71      	ldrb	r1, [r6, #17]
    3aa0:	2900      	cmp	r1, #0
    3aa2:	d103      	bne.n	3aac <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3aa4:	491b      	ldr	r1, [pc, #108]	; (3b14 <spi_init+0x210>)
    3aa6:	7889      	ldrb	r1, [r1, #2]
    3aa8:	0789      	lsls	r1, r1, #30
    3aaa:	d501      	bpl.n	3ab0 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3aac:	2180      	movs	r1, #128	; 0x80
    3aae:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    3ab0:	7cb1      	ldrb	r1, [r6, #18]
    3ab2:	2900      	cmp	r1, #0
    3ab4:	d002      	beq.n	3abc <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3ab6:	2180      	movs	r1, #128	; 0x80
    3ab8:	0289      	lsls	r1, r1, #10
    3aba:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    3abc:	7cf1      	ldrb	r1, [r6, #19]
    3abe:	2900      	cmp	r1, #0
    3ac0:	d002      	beq.n	3ac8 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3ac2:	2180      	movs	r1, #128	; 0x80
    3ac4:	0089      	lsls	r1, r1, #2
    3ac6:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    3ac8:	7d31      	ldrb	r1, [r6, #20]
    3aca:	2900      	cmp	r1, #0
    3acc:	d002      	beq.n	3ad4 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3ace:	2180      	movs	r1, #128	; 0x80
    3ad0:	0189      	lsls	r1, r1, #6
    3ad2:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    3ad4:	6839      	ldr	r1, [r7, #0]
    3ad6:	430b      	orrs	r3, r1
    3ad8:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	431a      	orrs	r2, r3
    3ade:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    3ae0:	2000      	movs	r0, #0
    3ae2:	e719      	b.n	3918 <spi_init+0x14>
    3ae4:	00003815 	.word	0x00003815
    3ae8:	40000400 	.word	0x40000400
    3aec:	00005301 	.word	0x00005301
    3af0:	00005275 	.word	0x00005275
    3af4:	00003651 	.word	0x00003651
    3af8:	00003f39 	.word	0x00003f39
    3afc:	00004161 	.word	0x00004161
    3b00:	20000650 	.word	0x20000650
    3b04:	0000369d 	.word	0x0000369d
    3b08:	000053f9 	.word	0x000053f9
    3b0c:	0000531d 	.word	0x0000531d
    3b10:	00003629 	.word	0x00003629
    3b14:	41002000 	.word	0x41002000

00003b18 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    3b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b1a:	46d6      	mov	lr, sl
    3b1c:	464f      	mov	r7, r9
    3b1e:	b580      	push	{r7, lr}
    3b20:	b083      	sub	sp, #12
    3b22:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3b24:	2538      	movs	r5, #56	; 0x38
    3b26:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3b28:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    3b2a:	2e05      	cmp	r6, #5
    3b2c:	d075      	beq.n	3c1a <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3b2e:	3512      	adds	r5, #18
	if (length == 0) {
    3b30:	2a00      	cmp	r2, #0
    3b32:	d072      	beq.n	3c1a <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    3b34:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    3b36:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    3b38:	2c00      	cmp	r4, #0
    3b3a:	d06e      	beq.n	3c1a <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    3b3c:	7944      	ldrb	r4, [r0, #5]
    3b3e:	2c00      	cmp	r4, #0
    3b40:	d103      	bne.n	3b4a <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b42:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b44:	7e25      	ldrb	r5, [r4, #24]
    3b46:	07a9      	lsls	r1, r5, #30
    3b48:	d40a      	bmi.n	3b60 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    3b4a:	3a01      	subs	r2, #1
    3b4c:	b294      	uxth	r4, r2
    3b4e:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    3b50:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    3b52:	2102      	movs	r1, #2
    3b54:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    3b56:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b58:	05db      	lsls	r3, r3, #23
    3b5a:	0ddb      	lsrs	r3, r3, #23
    3b5c:	469a      	mov	sl, r3
    3b5e:	e037      	b.n	3bd0 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3b60:	2502      	movs	r5, #2
    3b62:	7625      	strb	r5, [r4, #24]
    3b64:	e7f1      	b.n	3b4a <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b66:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3b68:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    3b6a:	423b      	tst	r3, r7
    3b6c:	d0fc      	beq.n	3b68 <spi_read_buffer_wait+0x50>
    3b6e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    3b70:	423b      	tst	r3, r7
    3b72:	d009      	beq.n	3b88 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3b74:	4653      	mov	r3, sl
    3b76:	628b      	str	r3, [r1, #40]	; 0x28
    3b78:	e02d      	b.n	3bd6 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3b7a:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    3b7c:	464d      	mov	r5, r9
    3b7e:	422b      	tst	r3, r5
    3b80:	d138      	bne.n	3bf4 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b82:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    3b84:	4213      	tst	r3, r2
    3b86:	d045      	beq.n	3c14 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3b88:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3b8a:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    3b8c:	4213      	tst	r3, r2
    3b8e:	d0fc      	beq.n	3b8a <spi_read_buffer_wait+0x72>
    3b90:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3b92:	4213      	tst	r3, r2
    3b94:	d040      	beq.n	3c18 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b96:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    3b98:	2500      	movs	r5, #0
    3b9a:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b9c:	4213      	tst	r3, r2
    3b9e:	d002      	beq.n	3ba6 <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3ba0:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    3ba2:	231e      	movs	r3, #30
    3ba4:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ba6:	7983      	ldrb	r3, [r0, #6]
    3ba8:	2b01      	cmp	r3, #1
    3baa:	d027      	beq.n	3bfc <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3bac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    3bae:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    3bb0:	9901      	ldr	r1, [sp, #4]
    3bb2:	2900      	cmp	r1, #0
    3bb4:	d137      	bne.n	3c26 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    3bb6:	1c75      	adds	r5, r6, #1
    3bb8:	b2ad      	uxth	r5, r5
    3bba:	4661      	mov	r1, ip
    3bbc:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3bbe:	7981      	ldrb	r1, [r0, #6]
    3bc0:	2901      	cmp	r1, #1
    3bc2:	d01f      	beq.n	3c04 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    3bc4:	002e      	movs	r6, r5
	while (length--) {
    3bc6:	3c01      	subs	r4, #1
    3bc8:	b2a4      	uxth	r4, r4
    3bca:	4b18      	ldr	r3, [pc, #96]	; (3c2c <spi_read_buffer_wait+0x114>)
    3bcc:	429c      	cmp	r4, r3
    3bce:	d01f      	beq.n	3c10 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    3bd0:	7943      	ldrb	r3, [r0, #5]
    3bd2:	2b01      	cmp	r3, #1
    3bd4:	d0c7      	beq.n	3b66 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    3bd6:	7943      	ldrb	r3, [r0, #5]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d1d5      	bne.n	3b88 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3bdc:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3bde:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    3be0:	4213      	tst	r3, r2
    3be2:	d1ca      	bne.n	3b7a <spi_read_buffer_wait+0x62>
    3be4:	4b12      	ldr	r3, [pc, #72]	; (3c30 <spi_read_buffer_wait+0x118>)
    3be6:	7e0d      	ldrb	r5, [r1, #24]
    3be8:	4215      	tst	r5, r2
    3bea:	d1c6      	bne.n	3b7a <spi_read_buffer_wait+0x62>
    3bec:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d1f9      	bne.n	3be6 <spi_read_buffer_wait+0xce>
    3bf2:	e7c2      	b.n	3b7a <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3bf4:	2302      	movs	r3, #2
    3bf6:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    3bf8:	2504      	movs	r5, #4
    3bfa:	e00e      	b.n	3c1a <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3bfc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    3bfe:	05db      	lsls	r3, r3, #23
    3c00:	0ddb      	lsrs	r3, r3, #23
    3c02:	e7d5      	b.n	3bb0 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    3c04:	3602      	adds	r6, #2
    3c06:	b2b6      	uxth	r6, r6
    3c08:	0a1b      	lsrs	r3, r3, #8
    3c0a:	4661      	mov	r1, ip
    3c0c:	554b      	strb	r3, [r1, r5]
    3c0e:	e7da      	b.n	3bc6 <spi_read_buffer_wait+0xae>
    3c10:	9d01      	ldr	r5, [sp, #4]
    3c12:	e002      	b.n	3c1a <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    3c14:	2512      	movs	r5, #18
    3c16:	e000      	b.n	3c1a <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    3c18:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    3c1a:	0028      	movs	r0, r5
    3c1c:	b003      	add	sp, #12
    3c1e:	bc0c      	pop	{r2, r3}
    3c20:	4691      	mov	r9, r2
    3c22:	469a      	mov	sl, r3
    3c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c26:	9d01      	ldr	r5, [sp, #4]
    3c28:	e7f7      	b.n	3c1a <spi_read_buffer_wait+0x102>
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	0000ffff 	.word	0x0000ffff
    3c30:	00002710 	.word	0x00002710

00003c34 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3c34:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3c36:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3c38:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    3c3a:	2c01      	cmp	r4, #1
    3c3c:	d001      	beq.n	3c42 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    3c3e:	0018      	movs	r0, r3
    3c40:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    3c42:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    3c44:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    3c46:	2c00      	cmp	r4, #0
    3c48:	d1f9      	bne.n	3c3e <spi_select_slave+0xa>
		if (select) {
    3c4a:	2a00      	cmp	r2, #0
    3c4c:	d058      	beq.n	3d00 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    3c4e:	784b      	ldrb	r3, [r1, #1]
    3c50:	2b00      	cmp	r3, #0
    3c52:	d044      	beq.n	3cde <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c54:	6803      	ldr	r3, [r0, #0]
    3c56:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    3c58:	07db      	lsls	r3, r3, #31
    3c5a:	d410      	bmi.n	3c7e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    3c5c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c5e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3c60:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c62:	2900      	cmp	r1, #0
    3c64:	d104      	bne.n	3c70 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3c66:	0953      	lsrs	r3, r2, #5
    3c68:	01db      	lsls	r3, r3, #7
    3c6a:	492e      	ldr	r1, [pc, #184]	; (3d24 <spi_select_slave+0xf0>)
    3c6c:	468c      	mov	ip, r1
    3c6e:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c70:	211f      	movs	r1, #31
    3c72:	4011      	ands	r1, r2
    3c74:	2201      	movs	r2, #1
    3c76:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3c78:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    3c7a:	2305      	movs	r3, #5
    3c7c:	e7df      	b.n	3c3e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3c7e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3c80:	09d4      	lsrs	r4, r2, #7
		return NULL;
    3c82:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3c84:	2c00      	cmp	r4, #0
    3c86:	d104      	bne.n	3c92 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    3c88:	0953      	lsrs	r3, r2, #5
    3c8a:	01db      	lsls	r3, r3, #7
    3c8c:	4c25      	ldr	r4, [pc, #148]	; (3d24 <spi_select_slave+0xf0>)
    3c8e:	46a4      	mov	ip, r4
    3c90:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3c92:	241f      	movs	r4, #31
    3c94:	4014      	ands	r4, r2
    3c96:	2201      	movs	r2, #1
    3c98:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3c9a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3c9c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c9e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3ca0:	07d2      	lsls	r2, r2, #31
    3ca2:	d501      	bpl.n	3ca8 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3ca4:	788a      	ldrb	r2, [r1, #2]
    3ca6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    3ca8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    3caa:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    3cac:	2a00      	cmp	r2, #0
    3cae:	d1c6      	bne.n	3c3e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3cb0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    3cb2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cb4:	7e13      	ldrb	r3, [r2, #24]
    3cb6:	420b      	tst	r3, r1
    3cb8:	d0fc      	beq.n	3cb4 <spi_select_slave+0x80>
    3cba:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    3cbc:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    3cbe:	0749      	lsls	r1, r1, #29
    3cc0:	d5bd      	bpl.n	3c3e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3cc2:	8b53      	ldrh	r3, [r2, #26]
    3cc4:	075b      	lsls	r3, r3, #29
    3cc6:	d501      	bpl.n	3ccc <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3cc8:	2304      	movs	r3, #4
    3cca:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3ccc:	7983      	ldrb	r3, [r0, #6]
    3cce:	2b01      	cmp	r3, #1
    3cd0:	d002      	beq.n	3cd8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3cd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cd4:	2300      	movs	r3, #0
    3cd6:	e7b2      	b.n	3c3e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3cd8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3cda:	2300      	movs	r3, #0
    3cdc:	e7af      	b.n	3c3e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3cde:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3ce0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3ce2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3ce4:	2900      	cmp	r1, #0
    3ce6:	d104      	bne.n	3cf2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    3ce8:	0953      	lsrs	r3, r2, #5
    3cea:	01db      	lsls	r3, r3, #7
    3cec:	490d      	ldr	r1, [pc, #52]	; (3d24 <spi_select_slave+0xf0>)
    3cee:	468c      	mov	ip, r1
    3cf0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3cf2:	211f      	movs	r1, #31
    3cf4:	4011      	ands	r1, r2
    3cf6:	2201      	movs	r2, #1
    3cf8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    3cfa:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    3cfc:	2300      	movs	r3, #0
    3cfe:	e79e      	b.n	3c3e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    3d00:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3d02:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3d04:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3d06:	2900      	cmp	r1, #0
    3d08:	d104      	bne.n	3d14 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    3d0a:	0953      	lsrs	r3, r2, #5
    3d0c:	01db      	lsls	r3, r3, #7
    3d0e:	4905      	ldr	r1, [pc, #20]	; (3d24 <spi_select_slave+0xf0>)
    3d10:	468c      	mov	ip, r1
    3d12:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d14:	211f      	movs	r1, #31
    3d16:	4011      	ands	r1, r2
    3d18:	2201      	movs	r2, #1
    3d1a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3d1c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3d1e:	2300      	movs	r3, #0
    3d20:	e78d      	b.n	3c3e <spi_select_slave+0xa>
    3d22:	46c0      	nop			; (mov r8, r8)
    3d24:	41004400 	.word	0x41004400

00003d28 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d2a:	46de      	mov	lr, fp
    3d2c:	4657      	mov	r7, sl
    3d2e:	464e      	mov	r6, r9
    3d30:	4645      	mov	r5, r8
    3d32:	b5e0      	push	{r5, r6, r7, lr}
    3d34:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    3d36:	2338      	movs	r3, #56	; 0x38
    3d38:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    3d3a:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    3d3c:	2c05      	cmp	r4, #5
    3d3e:	d002      	beq.n	3d46 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3d40:	3312      	adds	r3, #18
	if (length == 0) {
    3d42:	2a00      	cmp	r2, #0
    3d44:	d107      	bne.n	3d56 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    3d46:	0018      	movs	r0, r3
    3d48:	b003      	add	sp, #12
    3d4a:	bc3c      	pop	{r2, r3, r4, r5}
    3d4c:	4690      	mov	r8, r2
    3d4e:	4699      	mov	r9, r3
    3d50:	46a2      	mov	sl, r4
    3d52:	46ab      	mov	fp, r5
    3d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    3d56:	7943      	ldrb	r3, [r0, #5]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d103      	bne.n	3d64 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d5c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3d5e:	7e1c      	ldrb	r4, [r3, #24]
    3d60:	07a4      	lsls	r4, r4, #30
    3d62:	d40a      	bmi.n	3d7a <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    3d64:	4693      	mov	fp, r2
    3d66:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    3d68:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    3d6a:	2502      	movs	r5, #2
    3d6c:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    3d6e:	3502      	adds	r5, #2
    3d70:	46a8      	mov	r8, r5
    3d72:	3a01      	subs	r2, #1
    3d74:	b292      	uxth	r2, r2
    3d76:	468a      	mov	sl, r1
    3d78:	e023      	b.n	3dc2 <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3d7a:	2402      	movs	r4, #2
    3d7c:	761c      	strb	r4, [r3, #24]
    3d7e:	e7f1      	b.n	3d64 <spi_write_buffer_wait+0x3c>
    3d80:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    3d82:	4661      	mov	r1, ip
    3d84:	420d      	tst	r5, r1
    3d86:	d12e      	bne.n	3de6 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d88:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    3d8a:	421d      	tst	r5, r3
    3d8c:	d100      	bne.n	3d90 <spi_write_buffer_wait+0x68>
    3d8e:	e0c2      	b.n	3f16 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d90:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d92:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    3d94:	421d      	tst	r5, r3
    3d96:	d0fc      	beq.n	3d92 <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    3d98:	1c67      	adds	r7, r4, #1
    3d9a:	b2bf      	uxth	r7, r7
    3d9c:	4651      	mov	r1, sl
    3d9e:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3da0:	7981      	ldrb	r1, [r0, #6]
    3da2:	2901      	cmp	r1, #1
    3da4:	d023      	beq.n	3dee <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    3da6:	b2ad      	uxth	r5, r5
    3da8:	003c      	movs	r4, r7
    3daa:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    3dac:	421f      	tst	r7, r3
    3dae:	d002      	beq.n	3db6 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3db0:	05ed      	lsls	r5, r5, #23
    3db2:	0ded      	lsrs	r5, r5, #23
    3db4:	62b5      	str	r5, [r6, #40]	; 0x28
    3db6:	1e55      	subs	r5, r2, #1
    3db8:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    3dba:	79c6      	ldrb	r6, [r0, #7]
    3dbc:	2e00      	cmp	r6, #0
    3dbe:	d11d      	bne.n	3dfc <spi_write_buffer_wait+0xd4>
    3dc0:	002a      	movs	r2, r5
	while (length--) {
    3dc2:	4d5a      	ldr	r5, [pc, #360]	; (3f2c <spi_write_buffer_wait+0x204>)
    3dc4:	42aa      	cmp	r2, r5
    3dc6:	d070      	beq.n	3eaa <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    3dc8:	7945      	ldrb	r5, [r0, #5]
    3dca:	2d00      	cmp	r5, #0
    3dcc:	d1e0      	bne.n	3d90 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3dce:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3dd0:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    3dd2:	421d      	tst	r5, r3
    3dd4:	d1d4      	bne.n	3d80 <spi_write_buffer_wait+0x58>
    3dd6:	4d56      	ldr	r5, [pc, #344]	; (3f30 <spi_write_buffer_wait+0x208>)
    3dd8:	7e37      	ldrb	r7, [r6, #24]
    3dda:	421f      	tst	r7, r3
    3ddc:	d1d0      	bne.n	3d80 <spi_write_buffer_wait+0x58>
    3dde:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3de0:	2d00      	cmp	r5, #0
    3de2:	d1f9      	bne.n	3dd8 <spi_write_buffer_wait+0xb0>
    3de4:	e7cc      	b.n	3d80 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3de6:	2302      	movs	r3, #2
    3de8:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    3dea:	3302      	adds	r3, #2
    3dec:	e7ab      	b.n	3d46 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    3dee:	3402      	adds	r4, #2
    3df0:	b2a4      	uxth	r4, r4
    3df2:	4651      	mov	r1, sl
    3df4:	5dcf      	ldrb	r7, [r1, r7]
    3df6:	023f      	lsls	r7, r7, #8
    3df8:	433d      	orrs	r5, r7
    3dfa:	e7d6      	b.n	3daa <spi_write_buffer_wait+0x82>
    3dfc:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    3dfe:	7945      	ldrb	r5, [r0, #5]
    3e00:	2d00      	cmp	r5, #0
    3e02:	d137      	bne.n	3e74 <spi_write_buffer_wait+0x14c>
    3e04:	4d4b      	ldr	r5, [pc, #300]	; (3f34 <spi_write_buffer_wait+0x20c>)
    3e06:	9101      	str	r1, [sp, #4]
    3e08:	e012      	b.n	3e30 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    3e0a:	3402      	adds	r4, #2
    3e0c:	b2a4      	uxth	r4, r4
    3e0e:	4649      	mov	r1, r9
    3e10:	9f01      	ldr	r7, [sp, #4]
    3e12:	5c79      	ldrb	r1, [r7, r1]
    3e14:	0209      	lsls	r1, r1, #8
    3e16:	9f00      	ldr	r7, [sp, #0]
    3e18:	430f      	orrs	r7, r1
    3e1a:	e01b      	b.n	3e54 <spi_write_buffer_wait+0x12c>
						length--;
    3e1c:	3a01      	subs	r2, #1
    3e1e:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e20:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e22:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    3e24:	4641      	mov	r1, r8
    3e26:	420f      	tst	r7, r1
    3e28:	d11b      	bne.n	3e62 <spi_write_buffer_wait+0x13a>
    3e2a:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3e2c:	2d00      	cmp	r5, #0
    3e2e:	d018      	beq.n	3e62 <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    3e30:	2a00      	cmp	r2, #0
    3e32:	d0f5      	beq.n	3e20 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e34:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e36:	7e37      	ldrb	r7, [r6, #24]
    3e38:	421f      	tst	r7, r3
    3e3a:	d0f1      	beq.n	3e20 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    3e3c:	1c67      	adds	r7, r4, #1
    3e3e:	b2b9      	uxth	r1, r7
    3e40:	4689      	mov	r9, r1
    3e42:	9901      	ldr	r1, [sp, #4]
    3e44:	5d09      	ldrb	r1, [r1, r4]
    3e46:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e48:	7981      	ldrb	r1, [r0, #6]
    3e4a:	2901      	cmp	r1, #1
    3e4c:	d0dd      	beq.n	3e0a <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    3e4e:	4669      	mov	r1, sp
    3e50:	880f      	ldrh	r7, [r1, #0]
    3e52:	464c      	mov	r4, r9
    3e54:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    3e56:	4219      	tst	r1, r3
    3e58:	d0e0      	beq.n	3e1c <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e5a:	05ff      	lsls	r7, r7, #23
    3e5c:	0dff      	lsrs	r7, r7, #23
    3e5e:	62b7      	str	r7, [r6, #40]	; 0x28
    3e60:	e7dc      	b.n	3e1c <spi_write_buffer_wait+0xf4>
    3e62:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e64:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    3e66:	4667      	mov	r7, ip
    3e68:	423d      	tst	r5, r7
    3e6a:	d118      	bne.n	3e9e <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e6c:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    3e6e:	4646      	mov	r6, r8
    3e70:	4235      	tst	r5, r6
    3e72:	d052      	beq.n	3f1a <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3e74:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e76:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    3e78:	4647      	mov	r7, r8
    3e7a:	423d      	tst	r5, r7
    3e7c:	d0fb      	beq.n	3e76 <spi_write_buffer_wait+0x14e>
    3e7e:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    3e80:	423d      	tst	r5, r7
    3e82:	d007      	beq.n	3e94 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e84:	8b75      	ldrh	r5, [r6, #26]
    3e86:	423d      	tst	r5, r7
    3e88:	d000      	beq.n	3e8c <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e8a:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e8c:	7985      	ldrb	r5, [r0, #6]
    3e8e:	2d01      	cmp	r5, #1
    3e90:	d009      	beq.n	3ea6 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e92:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    3e94:	465d      	mov	r5, fp
    3e96:	3d01      	subs	r5, #1
    3e98:	b2ad      	uxth	r5, r5
    3e9a:	46ab      	mov	fp, r5
    3e9c:	e769      	b.n	3d72 <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3e9e:	2302      	movs	r3, #2
    3ea0:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    3ea2:	3302      	adds	r3, #2
    3ea4:	e74f      	b.n	3d46 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3ea6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    3ea8:	e7f4      	b.n	3e94 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    3eaa:	7943      	ldrb	r3, [r0, #5]
    3eac:	2b01      	cmp	r3, #1
    3eae:	d00b      	beq.n	3ec8 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d134      	bne.n	3f1e <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    3eb4:	79c2      	ldrb	r2, [r0, #7]
    3eb6:	2a00      	cmp	r2, #0
    3eb8:	d100      	bne.n	3ebc <spi_write_buffer_wait+0x194>
    3eba:	e744      	b.n	3d46 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    3ebc:	2404      	movs	r4, #4
			while (flush_length) {
    3ebe:	465b      	mov	r3, fp
    3ec0:	465d      	mov	r5, fp
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d119      	bne.n	3efa <spi_write_buffer_wait+0x1d2>
    3ec6:	e73e      	b.n	3d46 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3ec8:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    3eca:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ecc:	7e0b      	ldrb	r3, [r1, #24]
    3ece:	4213      	tst	r3, r2
    3ed0:	d0fc      	beq.n	3ecc <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    3ed2:	2300      	movs	r3, #0
    3ed4:	e737      	b.n	3d46 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ed6:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    3ed8:	4223      	tst	r3, r4
    3eda:	d022      	beq.n	3f22 <spi_write_buffer_wait+0x1fa>
    3edc:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    3ede:	4223      	tst	r3, r4
    3ee0:	d007      	beq.n	3ef2 <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3ee2:	8b4b      	ldrh	r3, [r1, #26]
    3ee4:	4223      	tst	r3, r4
    3ee6:	d000      	beq.n	3eea <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3ee8:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3eea:	7983      	ldrb	r3, [r0, #6]
    3eec:	2b01      	cmp	r3, #1
    3eee:	d010      	beq.n	3f12 <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3ef0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    3ef2:	3d01      	subs	r5, #1
    3ef4:	b2ad      	uxth	r5, r5
			while (flush_length) {
    3ef6:	2d00      	cmp	r5, #0
    3ef8:	d015      	beq.n	3f26 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3efa:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3efc:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    3efe:	4223      	tst	r3, r4
    3f00:	d1e9      	bne.n	3ed6 <spi_write_buffer_wait+0x1ae>
    3f02:	4b0b      	ldr	r3, [pc, #44]	; (3f30 <spi_write_buffer_wait+0x208>)
    3f04:	7e0a      	ldrb	r2, [r1, #24]
    3f06:	4222      	tst	r2, r4
    3f08:	d1e5      	bne.n	3ed6 <spi_write_buffer_wait+0x1ae>
    3f0a:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    3f0c:	2b00      	cmp	r3, #0
    3f0e:	d1f9      	bne.n	3f04 <spi_write_buffer_wait+0x1dc>
    3f10:	e7e1      	b.n	3ed6 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3f12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    3f14:	e7ed      	b.n	3ef2 <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    3f16:	2312      	movs	r3, #18
    3f18:	e715      	b.n	3d46 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    3f1a:	2312      	movs	r3, #18
    3f1c:	e713      	b.n	3d46 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    3f1e:	2300      	movs	r3, #0
    3f20:	e711      	b.n	3d46 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    3f22:	2312      	movs	r3, #18
    3f24:	e70f      	b.n	3d46 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    3f26:	2300      	movs	r3, #0
    3f28:	e70d      	b.n	3d46 <spi_write_buffer_wait+0x1e>
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	0000ffff 	.word	0x0000ffff
    3f30:	00002710 	.word	0x00002710
    3f34:	00002711 	.word	0x00002711

00003f38 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3f3a:	0080      	lsls	r0, r0, #2
    3f3c:	4b85      	ldr	r3, [pc, #532]	; (4154 <_spi_interrupt_handler+0x21c>)
    3f3e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3f40:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3f42:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    3f44:	5ce3      	ldrb	r3, [r4, r3]
    3f46:	2236      	movs	r2, #54	; 0x36
    3f48:	5ca7      	ldrb	r7, [r4, r2]
    3f4a:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3f4c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3f4e:	7db5      	ldrb	r5, [r6, #22]
    3f50:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3f52:	07eb      	lsls	r3, r5, #31
    3f54:	d52e      	bpl.n	3fb4 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3f56:	7963      	ldrb	r3, [r4, #5]
    3f58:	2b01      	cmp	r3, #1
    3f5a:	d025      	beq.n	3fa8 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d129      	bne.n	3fb4 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    3f60:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    3f62:	2b00      	cmp	r3, #0
    3f64:	d026      	beq.n	3fb4 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3f66:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f6a:	7813      	ldrb	r3, [r2, #0]
    3f6c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3f6e:	1c50      	adds	r0, r2, #1
    3f70:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3f72:	79a0      	ldrb	r0, [r4, #6]
    3f74:	2801      	cmp	r0, #1
    3f76:	d100      	bne.n	3f7a <_spi_interrupt_handler+0x42>
    3f78:	e069      	b.n	404e <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3f7a:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3f7c:	05db      	lsls	r3, r3, #23
    3f7e:	0ddb      	lsrs	r3, r3, #23
    3f80:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    3f82:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3f84:	3b01      	subs	r3, #1
    3f86:	b29b      	uxth	r3, r3
    3f88:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    3f8a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3f8c:	b29b      	uxth	r3, r3
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d110      	bne.n	3fb4 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3f92:	3301      	adds	r3, #1
    3f94:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    3f96:	7a63      	ldrb	r3, [r4, #9]
    3f98:	2b01      	cmp	r3, #1
    3f9a:	d10b      	bne.n	3fb4 <_spi_interrupt_handler+0x7c>
    3f9c:	79e3      	ldrb	r3, [r4, #7]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	d108      	bne.n	3fb4 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3fa2:	3302      	adds	r3, #2
    3fa4:	75b3      	strb	r3, [r6, #22]
    3fa6:	e005      	b.n	3fb4 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    3fa8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3faa:	2b00      	cmp	r3, #0
    3fac:	d03e      	beq.n	402c <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    3fae:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d1d8      	bne.n	3f66 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3fb4:	076b      	lsls	r3, r5, #29
    3fb6:	d511      	bpl.n	3fdc <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3fb8:	8b73      	ldrh	r3, [r6, #26]
    3fba:	075b      	lsls	r3, r3, #29
    3fbc:	d551      	bpl.n	4062 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3fbe:	7a63      	ldrb	r3, [r4, #9]
    3fc0:	2b01      	cmp	r3, #1
    3fc2:	d008      	beq.n	3fd6 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3fc4:	221e      	movs	r2, #30
    3fc6:	2338      	movs	r3, #56	; 0x38
    3fc8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3fca:	3b35      	subs	r3, #53	; 0x35
    3fcc:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3fce:	3302      	adds	r3, #2
    3fd0:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3fd2:	073b      	lsls	r3, r7, #28
    3fd4:	d441      	bmi.n	405a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3fd6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3fd8:	2304      	movs	r3, #4
    3fda:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3fdc:	07ab      	lsls	r3, r5, #30
    3fde:	d515      	bpl.n	400c <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    3fe0:	7963      	ldrb	r3, [r4, #5]
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d10e      	bne.n	4004 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    3fe6:	3307      	adds	r3, #7
    3fe8:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3fea:	3b05      	subs	r3, #5
    3fec:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    3fee:	3301      	adds	r3, #1
    3ff0:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    3ff2:	2300      	movs	r3, #0
    3ff4:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    3ff6:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    3ff8:	3338      	adds	r3, #56	; 0x38
    3ffa:	2200      	movs	r2, #0
    3ffc:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    3ffe:	06fb      	lsls	r3, r7, #27
    4000:	d500      	bpl.n	4004 <_spi_interrupt_handler+0xcc>
    4002:	e07f      	b.n	4104 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4004:	7963      	ldrb	r3, [r4, #5]
    4006:	2b01      	cmp	r3, #1
    4008:	d100      	bne.n	400c <_spi_interrupt_handler+0xd4>
    400a:	e07f      	b.n	410c <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    400c:	072b      	lsls	r3, r5, #28
    400e:	d508      	bpl.n	4022 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    4010:	7963      	ldrb	r3, [r4, #5]
    4012:	2b00      	cmp	r3, #0
    4014:	d105      	bne.n	4022 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    4016:	3308      	adds	r3, #8
    4018:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    401a:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    401c:	06bb      	lsls	r3, r7, #26
    401e:	d500      	bpl.n	4022 <_spi_interrupt_handler+0xea>
    4020:	e08a      	b.n	4138 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4022:	b26d      	sxtb	r5, r5
    4024:	2d00      	cmp	r5, #0
    4026:	da00      	bge.n	402a <_spi_interrupt_handler+0xf2>
    4028:	e08a      	b.n	4140 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    402c:	4b4a      	ldr	r3, [pc, #296]	; (4158 <_spi_interrupt_handler+0x220>)
    402e:	881b      	ldrh	r3, [r3, #0]
    4030:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4032:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4034:	3b01      	subs	r3, #1
    4036:	b29b      	uxth	r3, r3
    4038:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    403a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    403c:	b29b      	uxth	r3, r3
    403e:	2b00      	cmp	r3, #0
    4040:	d101      	bne.n	4046 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4042:	3301      	adds	r3, #1
    4044:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4046:	7963      	ldrb	r3, [r4, #5]
		if (0
    4048:	2b01      	cmp	r3, #1
    404a:	d0b0      	beq.n	3fae <_spi_interrupt_handler+0x76>
    404c:	e786      	b.n	3f5c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    404e:	7850      	ldrb	r0, [r2, #1]
    4050:	0200      	lsls	r0, r0, #8
    4052:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4054:	3202      	adds	r2, #2
    4056:	62e2      	str	r2, [r4, #44]	; 0x2c
    4058:	e790      	b.n	3f7c <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    405a:	0020      	movs	r0, r4
    405c:	69a3      	ldr	r3, [r4, #24]
    405e:	4798      	blx	r3
    4060:	e7b9      	b.n	3fd6 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4062:	7a63      	ldrb	r3, [r4, #9]
    4064:	2b01      	cmp	r3, #1
    4066:	d027      	beq.n	40b8 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4068:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    406c:	05db      	lsls	r3, r3, #23
    406e:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4070:	b2da      	uxtb	r2, r3
    4072:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4074:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4076:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4078:	1c51      	adds	r1, r2, #1
    407a:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    407c:	79a1      	ldrb	r1, [r4, #6]
    407e:	2901      	cmp	r1, #1
    4080:	d033      	beq.n	40ea <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    4082:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4084:	3b01      	subs	r3, #1
    4086:	b29b      	uxth	r3, r3
    4088:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    408a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    408c:	b29b      	uxth	r3, r3
    408e:	2b00      	cmp	r3, #0
    4090:	d1a4      	bne.n	3fdc <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    4092:	2200      	movs	r2, #0
    4094:	3338      	adds	r3, #56	; 0x38
    4096:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4098:	3b34      	subs	r3, #52	; 0x34
    409a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    409c:	7a63      	ldrb	r3, [r4, #9]
    409e:	2b02      	cmp	r3, #2
    40a0:	d029      	beq.n	40f6 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    40a2:	7a63      	ldrb	r3, [r4, #9]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d000      	beq.n	40aa <_spi_interrupt_handler+0x172>
    40a8:	e798      	b.n	3fdc <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    40aa:	07bb      	lsls	r3, r7, #30
    40ac:	d400      	bmi.n	40b0 <_spi_interrupt_handler+0x178>
    40ae:	e795      	b.n	3fdc <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    40b0:	0020      	movs	r0, r4
    40b2:	6923      	ldr	r3, [r4, #16]
    40b4:	4798      	blx	r3
    40b6:	e791      	b.n	3fdc <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    40b8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    40ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    40bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    40be:	3b01      	subs	r3, #1
    40c0:	b29b      	uxth	r3, r3
    40c2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    40c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    40c6:	b29b      	uxth	r3, r3
    40c8:	2b00      	cmp	r3, #0
    40ca:	d000      	beq.n	40ce <_spi_interrupt_handler+0x196>
    40cc:	e786      	b.n	3fdc <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    40ce:	3304      	adds	r3, #4
    40d0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    40d2:	2200      	movs	r2, #0
    40d4:	3334      	adds	r3, #52	; 0x34
    40d6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    40d8:	3b35      	subs	r3, #53	; 0x35
    40da:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    40dc:	07fb      	lsls	r3, r7, #31
    40de:	d400      	bmi.n	40e2 <_spi_interrupt_handler+0x1aa>
    40e0:	e77c      	b.n	3fdc <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    40e2:	0020      	movs	r0, r4
    40e4:	68e3      	ldr	r3, [r4, #12]
    40e6:	4798      	blx	r3
    40e8:	e778      	b.n	3fdc <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    40ea:	0a1b      	lsrs	r3, r3, #8
    40ec:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    40ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    40f0:	3301      	adds	r3, #1
    40f2:	62a3      	str	r3, [r4, #40]	; 0x28
    40f4:	e7c5      	b.n	4082 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    40f6:	077b      	lsls	r3, r7, #29
    40f8:	d400      	bmi.n	40fc <_spi_interrupt_handler+0x1c4>
    40fa:	e76f      	b.n	3fdc <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    40fc:	0020      	movs	r0, r4
    40fe:	6963      	ldr	r3, [r4, #20]
    4100:	4798      	blx	r3
    4102:	e76b      	b.n	3fdc <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    4104:	0020      	movs	r0, r4
    4106:	69e3      	ldr	r3, [r4, #28]
    4108:	4798      	blx	r3
    410a:	e77b      	b.n	4004 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    410c:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    410e:	2b01      	cmp	r3, #1
    4110:	d000      	beq.n	4114 <_spi_interrupt_handler+0x1dc>
    4112:	e786      	b.n	4022 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4114:	79e3      	ldrb	r3, [r4, #7]
    4116:	2b00      	cmp	r3, #0
    4118:	d000      	beq.n	411c <_spi_interrupt_handler+0x1e4>
    411a:	e782      	b.n	4022 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    411c:	3302      	adds	r3, #2
    411e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4120:	3301      	adds	r3, #1
    4122:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4124:	2200      	movs	r2, #0
    4126:	3335      	adds	r3, #53	; 0x35
    4128:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    412a:	07fb      	lsls	r3, r7, #31
    412c:	d400      	bmi.n	4130 <_spi_interrupt_handler+0x1f8>
    412e:	e76d      	b.n	400c <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4130:	0020      	movs	r0, r4
    4132:	68e3      	ldr	r3, [r4, #12]
    4134:	4798      	blx	r3
    4136:	e769      	b.n	400c <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    4138:	0020      	movs	r0, r4
    413a:	6a23      	ldr	r3, [r4, #32]
    413c:	4798      	blx	r3
    413e:	e770      	b.n	4022 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4140:	2380      	movs	r3, #128	; 0x80
    4142:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4144:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4146:	067b      	lsls	r3, r7, #25
    4148:	d400      	bmi.n	414c <_spi_interrupt_handler+0x214>
    414a:	e76e      	b.n	402a <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    414c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    414e:	0020      	movs	r0, r4
    4150:	4798      	blx	r3
}
    4152:	e76a      	b.n	402a <_spi_interrupt_handler+0xf2>
    4154:	20000650 	.word	0x20000650
    4158:	2000064e 	.word	0x2000064e

0000415c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    415c:	4770      	bx	lr
	...

00004160 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4160:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4162:	4b0a      	ldr	r3, [pc, #40]	; (418c <_sercom_set_handler+0x2c>)
    4164:	781b      	ldrb	r3, [r3, #0]
    4166:	2b00      	cmp	r3, #0
    4168:	d10c      	bne.n	4184 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    416a:	4f09      	ldr	r7, [pc, #36]	; (4190 <_sercom_set_handler+0x30>)
    416c:	4e09      	ldr	r6, [pc, #36]	; (4194 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    416e:	4d0a      	ldr	r5, [pc, #40]	; (4198 <_sercom_set_handler+0x38>)
    4170:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4172:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4174:	195a      	adds	r2, r3, r5
    4176:	6014      	str	r4, [r2, #0]
    4178:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    417a:	2b18      	cmp	r3, #24
    417c:	d1f9      	bne.n	4172 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    417e:	2201      	movs	r2, #1
    4180:	4b02      	ldr	r3, [pc, #8]	; (418c <_sercom_set_handler+0x2c>)
    4182:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4184:	0080      	lsls	r0, r0, #2
    4186:	4b02      	ldr	r3, [pc, #8]	; (4190 <_sercom_set_handler+0x30>)
    4188:	50c1      	str	r1, [r0, r3]
}
    418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    418c:	2000022e 	.word	0x2000022e
    4190:	20000230 	.word	0x20000230
    4194:	0000415d 	.word	0x0000415d
    4198:	20000650 	.word	0x20000650

0000419c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    419c:	b500      	push	{lr}
    419e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    41a0:	2309      	movs	r3, #9
    41a2:	466a      	mov	r2, sp
    41a4:	7013      	strb	r3, [r2, #0]
    41a6:	3301      	adds	r3, #1
    41a8:	7053      	strb	r3, [r2, #1]
    41aa:	3301      	adds	r3, #1
    41ac:	7093      	strb	r3, [r2, #2]
    41ae:	3301      	adds	r3, #1
    41b0:	70d3      	strb	r3, [r2, #3]
    41b2:	3301      	adds	r3, #1
    41b4:	7113      	strb	r3, [r2, #4]
    41b6:	3301      	adds	r3, #1
    41b8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    41ba:	4b03      	ldr	r3, [pc, #12]	; (41c8 <_sercom_get_interrupt_vector+0x2c>)
    41bc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    41be:	466b      	mov	r3, sp
    41c0:	5618      	ldrsb	r0, [r3, r0]
}
    41c2:	b003      	add	sp, #12
    41c4:	bd00      	pop	{pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	00003815 	.word	0x00003815

000041cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    41cc:	b510      	push	{r4, lr}
    41ce:	4b02      	ldr	r3, [pc, #8]	; (41d8 <SERCOM0_Handler+0xc>)
    41d0:	681b      	ldr	r3, [r3, #0]
    41d2:	2000      	movs	r0, #0
    41d4:	4798      	blx	r3
    41d6:	bd10      	pop	{r4, pc}
    41d8:	20000230 	.word	0x20000230

000041dc <SERCOM1_Handler>:
    41dc:	b510      	push	{r4, lr}
    41de:	4b02      	ldr	r3, [pc, #8]	; (41e8 <SERCOM1_Handler+0xc>)
    41e0:	685b      	ldr	r3, [r3, #4]
    41e2:	2001      	movs	r0, #1
    41e4:	4798      	blx	r3
    41e6:	bd10      	pop	{r4, pc}
    41e8:	20000230 	.word	0x20000230

000041ec <SERCOM2_Handler>:
    41ec:	b510      	push	{r4, lr}
    41ee:	4b02      	ldr	r3, [pc, #8]	; (41f8 <SERCOM2_Handler+0xc>)
    41f0:	689b      	ldr	r3, [r3, #8]
    41f2:	2002      	movs	r0, #2
    41f4:	4798      	blx	r3
    41f6:	bd10      	pop	{r4, pc}
    41f8:	20000230 	.word	0x20000230

000041fc <SERCOM3_Handler>:
    41fc:	b510      	push	{r4, lr}
    41fe:	4b02      	ldr	r3, [pc, #8]	; (4208 <SERCOM3_Handler+0xc>)
    4200:	68db      	ldr	r3, [r3, #12]
    4202:	2003      	movs	r0, #3
    4204:	4798      	blx	r3
    4206:	bd10      	pop	{r4, pc}
    4208:	20000230 	.word	0x20000230

0000420c <SERCOM4_Handler>:
    420c:	b510      	push	{r4, lr}
    420e:	4b02      	ldr	r3, [pc, #8]	; (4218 <SERCOM4_Handler+0xc>)
    4210:	691b      	ldr	r3, [r3, #16]
    4212:	2004      	movs	r0, #4
    4214:	4798      	blx	r3
    4216:	bd10      	pop	{r4, pc}
    4218:	20000230 	.word	0x20000230

0000421c <SERCOM5_Handler>:
    421c:	b510      	push	{r4, lr}
    421e:	4b02      	ldr	r3, [pc, #8]	; (4228 <SERCOM5_Handler+0xc>)
    4220:	695b      	ldr	r3, [r3, #20]
    4222:	2005      	movs	r0, #5
    4224:	4798      	blx	r3
    4226:	bd10      	pop	{r4, pc}
    4228:	20000230 	.word	0x20000230

0000422c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    422c:	b510      	push	{r4, lr}
    422e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    4230:	4b0f      	ldr	r3, [pc, #60]	; (4270 <sd_mmc_test_unit_ready+0x44>)
    4232:	4798      	blx	r3
    4234:	2801      	cmp	r0, #1
    4236:	d019      	beq.n	426c <sd_mmc_test_unit_ready+0x40>
    4238:	2800      	cmp	r0, #0
    423a:	d003      	beq.n	4244 <sd_mmc_test_unit_ready+0x18>
    423c:	2802      	cmp	r0, #2
    423e:	d010      	beq.n	4262 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    4240:	2001      	movs	r0, #1
	}
}
    4242:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    4244:	4b0b      	ldr	r3, [pc, #44]	; (4274 <sd_mmc_test_unit_ready+0x48>)
    4246:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    4248:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    424a:	2b00      	cmp	r3, #0
    424c:	d1f9      	bne.n	4242 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    424e:	0020      	movs	r0, r4
    4250:	4b09      	ldr	r3, [pc, #36]	; (4278 <sd_mmc_test_unit_ready+0x4c>)
    4252:	4798      	blx	r3
    4254:	0003      	movs	r3, r0
    4256:	2003      	movs	r0, #3
    4258:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    425a:	4243      	negs	r3, r0
    425c:	4158      	adcs	r0, r3
    425e:	0040      	lsls	r0, r0, #1
    4260:	e7ef      	b.n	4242 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    4262:	2200      	movs	r2, #0
    4264:	4b03      	ldr	r3, [pc, #12]	; (4274 <sd_mmc_test_unit_ready+0x48>)
    4266:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    4268:	2002      	movs	r0, #2
    426a:	e7ea      	b.n	4242 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    426c:	2003      	movs	r0, #3
    426e:	e7e8      	b.n	4242 <sd_mmc_test_unit_ready+0x16>
    4270:	0000034d 	.word	0x0000034d
    4274:	20000248 	.word	0x20000248
    4278:	000007fd 	.word	0x000007fd

0000427c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    427c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    427e:	2000      	movs	r0, #0
    4280:	4b01      	ldr	r3, [pc, #4]	; (4288 <sd_mmc_test_unit_ready_0+0xc>)
    4282:	4798      	blx	r3
}
    4284:	bd10      	pop	{r4, pc}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	0000422d 	.word	0x0000422d

0000428c <sd_mmc_test_unit_ready_1>:


Ctrl_status sd_mmc_test_unit_ready_1(void)
{
    428c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(1);
    428e:	2001      	movs	r0, #1
    4290:	4b01      	ldr	r3, [pc, #4]	; (4298 <sd_mmc_test_unit_ready_1+0xc>)
    4292:	4798      	blx	r3
}
    4294:	bd10      	pop	{r4, pc}
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	0000422d 	.word	0x0000422d

0000429c <sd_mmc_read_capacity>:

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    429c:	b570      	push	{r4, r5, r6, lr}
    429e:	0004      	movs	r4, r0
    42a0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    42a2:	4b04      	ldr	r3, [pc, #16]	; (42b4 <sd_mmc_read_capacity+0x18>)
    42a4:	4798      	blx	r3
    42a6:	0040      	lsls	r0, r0, #1
    42a8:	3801      	subs	r0, #1
    42aa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    42ac:	0020      	movs	r0, r4
    42ae:	4b02      	ldr	r3, [pc, #8]	; (42b8 <sd_mmc_read_capacity+0x1c>)
    42b0:	4798      	blx	r3
}
    42b2:	bd70      	pop	{r4, r5, r6, pc}
    42b4:	00000825 	.word	0x00000825
    42b8:	0000422d 	.word	0x0000422d

000042bc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    42bc:	b510      	push	{r4, lr}
    42be:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    42c0:	2000      	movs	r0, #0
    42c2:	4b01      	ldr	r3, [pc, #4]	; (42c8 <sd_mmc_read_capacity_0+0xc>)
    42c4:	4798      	blx	r3
}
    42c6:	bd10      	pop	{r4, pc}
    42c8:	0000429d 	.word	0x0000429d

000042cc <sd_mmc_read_capacity_1>:

Ctrl_status sd_mmc_read_capacity_1(uint32_t *nb_sector)
{
    42cc:	b510      	push	{r4, lr}
    42ce:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(1, nb_sector);
    42d0:	2001      	movs	r0, #1
    42d2:	4b01      	ldr	r3, [pc, #4]	; (42d8 <sd_mmc_read_capacity_1+0xc>)
    42d4:	4798      	blx	r3
}
    42d6:	bd10      	pop	{r4, pc}
    42d8:	0000429d 	.word	0x0000429d

000042dc <sd_mmc_unload_0>:

bool sd_mmc_unload(uint8_t slot, bool unload)
{
	sd_mmc_ejected[slot] = unload;
    42dc:	4b01      	ldr	r3, [pc, #4]	; (42e4 <sd_mmc_unload_0+0x8>)
    42de:	7018      	strb	r0, [r3, #0]
}

bool sd_mmc_unload_0(bool unload)
{
	return sd_mmc_unload(0, unload);
}
    42e0:	2001      	movs	r0, #1
    42e2:	4770      	bx	lr
    42e4:	20000248 	.word	0x20000248

000042e8 <sd_mmc_unload_1>:
	sd_mmc_ejected[slot] = unload;
    42e8:	4b01      	ldr	r3, [pc, #4]	; (42f0 <sd_mmc_unload_1+0x8>)
    42ea:	7058      	strb	r0, [r3, #1]

bool sd_mmc_unload_1(bool unload)
{
	return sd_mmc_unload(1, unload);
}
    42ec:	2001      	movs	r0, #1
    42ee:	4770      	bx	lr
    42f0:	20000248 	.word	0x20000248

000042f4 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    42f4:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    42f6:	2000      	movs	r0, #0
    42f8:	4b01      	ldr	r3, [pc, #4]	; (4300 <sd_mmc_wr_protect_0+0xc>)
    42fa:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    42fc:	bd10      	pop	{r4, pc}
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	0000084d 	.word	0x0000084d

00004304 <sd_mmc_wr_protect_1>:

bool sd_mmc_wr_protect_1(void)
{
    4304:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    4306:	2001      	movs	r0, #1
    4308:	4b01      	ldr	r3, [pc, #4]	; (4310 <sd_mmc_wr_protect_1+0xc>)
    430a:	4798      	blx	r3
	return sd_mmc_wr_protect(1);
}
    430c:	bd10      	pop	{r4, pc}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	0000084d 	.word	0x0000084d

00004314 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    4314:	2001      	movs	r0, #1
    4316:	4770      	bx	lr

00004318 <sd_mmc_removal_1>:

bool sd_mmc_removal_1(void)
{
	return sd_mmc_removal(1);
}
    4318:	2001      	movs	r0, #1
    431a:	4770      	bx	lr

0000431c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431e:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    4320:	4b24      	ldr	r3, [pc, #144]	; (43b4 <sd_mmc_usb_read_10+0x98>)
    4322:	4798      	blx	r3
    4324:	2800      	cmp	r0, #0
    4326:	d004      	beq.n	4332 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    4328:	3802      	subs	r0, #2
    432a:	4243      	negs	r3, r0
    432c:	4158      	adcs	r0, r3
    432e:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    4330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    4332:	3401      	adds	r4, #1
    4334:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    4336:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    4338:	4e1f      	ldr	r6, [pc, #124]	; (43b8 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    433a:	e008      	b.n	434e <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    433c:	481f      	ldr	r0, [pc, #124]	; (43bc <sd_mmc_usb_read_10+0xa0>)
    433e:	e010      	b.n	4362 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    4340:	2000      	movs	r0, #0
    4342:	4b1f      	ldr	r3, [pc, #124]	; (43c0 <sd_mmc_usb_read_10+0xa4>)
    4344:	4798      	blx	r3
    4346:	2800      	cmp	r0, #0
    4348:	d126      	bne.n	4398 <sd_mmc_usb_read_10+0x7c>
    434a:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    434c:	0022      	movs	r2, r4
	while (nb_step--) {
    434e:	1e54      	subs	r4, r2, #1
    4350:	b2a4      	uxth	r4, r4
    4352:	2a00      	cmp	r2, #0
    4354:	d01c      	beq.n	4390 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    4356:	2c00      	cmp	r4, #0
    4358:	d020      	beq.n	439c <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    435a:	2501      	movs	r5, #1
    435c:	4025      	ands	r5, r4
    435e:	d0ed      	beq.n	433c <sd_mmc_usb_read_10+0x20>
    4360:	4818      	ldr	r0, [pc, #96]	; (43c4 <sd_mmc_usb_read_10+0xa8>)
    4362:	2101      	movs	r1, #1
    4364:	47b0      	blx	r6
    4366:	2800      	cmp	r0, #0
    4368:	d114      	bne.n	4394 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    436a:	2f00      	cmp	r7, #0
    436c:	d1e8      	bne.n	4340 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    436e:	4915      	ldr	r1, [pc, #84]	; (43c4 <sd_mmc_usb_read_10+0xa8>)
    4370:	2d00      	cmp	r5, #0
    4372:	d000      	beq.n	4376 <sd_mmc_usb_read_10+0x5a>
    4374:	4911      	ldr	r1, [pc, #68]	; (43bc <sd_mmc_usb_read_10+0xa0>)
    4376:	2300      	movs	r3, #0
    4378:	2280      	movs	r2, #128	; 0x80
    437a:	0092      	lsls	r2, r2, #2
    437c:	2001      	movs	r0, #1
    437e:	4d12      	ldr	r5, [pc, #72]	; (43c8 <sd_mmc_usb_read_10+0xac>)
    4380:	47a8      	blx	r5
    4382:	2800      	cmp	r0, #0
    4384:	d1dc      	bne.n	4340 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    4386:	2001      	movs	r0, #1
    4388:	4b0d      	ldr	r3, [pc, #52]	; (43c0 <sd_mmc_usb_read_10+0xa4>)
    438a:	4798      	blx	r3
				return CTRL_FAIL;
    438c:	2001      	movs	r0, #1
    438e:	e7cf      	b.n	4330 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    4390:	2000      	movs	r0, #0
    4392:	e7cd      	b.n	4330 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    4394:	2001      	movs	r0, #1
    4396:	e7cb      	b.n	4330 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    4398:	2001      	movs	r0, #1
    439a:	e7c9      	b.n	4330 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    439c:	2f00      	cmp	r7, #0
    439e:	d1d4      	bne.n	434a <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    43a0:	2300      	movs	r3, #0
    43a2:	2280      	movs	r2, #128	; 0x80
    43a4:	0092      	lsls	r2, r2, #2
    43a6:	4907      	ldr	r1, [pc, #28]	; (43c4 <sd_mmc_usb_read_10+0xa8>)
    43a8:	2001      	movs	r0, #1
    43aa:	4d07      	ldr	r5, [pc, #28]	; (43c8 <sd_mmc_usb_read_10+0xac>)
    43ac:	47a8      	blx	r5
    43ae:	2800      	cmp	r0, #0
    43b0:	d1cb      	bne.n	434a <sd_mmc_usb_read_10+0x2e>
    43b2:	e7e8      	b.n	4386 <sd_mmc_usb_read_10+0x6a>
    43b4:	00000851 	.word	0x00000851
    43b8:	000008d9 	.word	0x000008d9
    43bc:	20000868 	.word	0x20000868
    43c0:	00000905 	.word	0x00000905
    43c4:	20000668 	.word	0x20000668
    43c8:	00001291 	.word	0x00001291

000043cc <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    43cc:	b510      	push	{r4, lr}
    43ce:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    43d0:	0001      	movs	r1, r0
    43d2:	2000      	movs	r0, #0
    43d4:	4b01      	ldr	r3, [pc, #4]	; (43dc <sd_mmc_usb_read_10_0+0x10>)
    43d6:	4798      	blx	r3
}
    43d8:	bd10      	pop	{r4, pc}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	0000431d 	.word	0x0000431d

000043e0 <sd_mmc_usb_read_10_1>:

Ctrl_status sd_mmc_usb_read_10_1(uint32_t addr, uint16_t nb_sector)
{
    43e0:	b510      	push	{r4, lr}
    43e2:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(1, addr, nb_sector);
    43e4:	0001      	movs	r1, r0
    43e6:	2001      	movs	r0, #1
    43e8:	4b01      	ldr	r3, [pc, #4]	; (43f0 <sd_mmc_usb_read_10_1+0x10>)
    43ea:	4798      	blx	r3
}
    43ec:	bd10      	pop	{r4, pc}
    43ee:	46c0      	nop			; (mov r8, r8)
    43f0:	0000431d 	.word	0x0000431d

000043f4 <sd_mmc_usb_write_10>:

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    43f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43f6:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    43f8:	4b20      	ldr	r3, [pc, #128]	; (447c <sd_mmc_usb_write_10+0x88>)
    43fa:	4798      	blx	r3
    43fc:	2800      	cmp	r0, #0
    43fe:	d00d      	beq.n	441c <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    4400:	3802      	subs	r0, #2
    4402:	4243      	negs	r3, r0
    4404:	4158      	adcs	r0, r3
    4406:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    4408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    440a:	481d      	ldr	r0, [pc, #116]	; (4480 <sd_mmc_usb_write_10+0x8c>)
    440c:	e01b      	b.n	4446 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    440e:	3001      	adds	r0, #1
				if (!b_first_step) {
    4410:	2d00      	cmp	r5, #0
    4412:	d1f9      	bne.n	4408 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    4414:	4b1b      	ldr	r3, [pc, #108]	; (4484 <sd_mmc_usb_write_10+0x90>)
    4416:	4798      	blx	r3
				return CTRL_FAIL;
    4418:	2001      	movs	r0, #1
    441a:	e7f5      	b.n	4408 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    441c:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    441e:	4f19      	ldr	r7, [pc, #100]	; (4484 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    4420:	4e19      	ldr	r6, [pc, #100]	; (4488 <sd_mmc_usb_write_10+0x94>)
    4422:	e008      	b.n	4436 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    4424:	2000      	movs	r0, #0
    4426:	e7ef      	b.n	4408 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    4428:	2001      	movs	r0, #1
    442a:	e7ed      	b.n	4408 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    442c:	2c00      	cmp	r4, #0
    442e:	d111      	bne.n	4454 <sd_mmc_usb_write_10+0x60>
    4430:	3c01      	subs	r4, #1
    4432:	b2a4      	uxth	r4, r4
    4434:	2500      	movs	r5, #0
	while (nb_step--) {
    4436:	4b15      	ldr	r3, [pc, #84]	; (448c <sd_mmc_usb_write_10+0x98>)
    4438:	429c      	cmp	r4, r3
    443a:	d0f3      	beq.n	4424 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    443c:	2d00      	cmp	r5, #0
    443e:	d1f5      	bne.n	442c <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    4440:	07e3      	lsls	r3, r4, #31
    4442:	d5e2      	bpl.n	440a <sd_mmc_usb_write_10+0x16>
    4444:	4812      	ldr	r0, [pc, #72]	; (4490 <sd_mmc_usb_write_10+0x9c>)
    4446:	2101      	movs	r1, #1
    4448:	4b12      	ldr	r3, [pc, #72]	; (4494 <sd_mmc_usb_write_10+0xa0>)
    444a:	4798      	blx	r3
    444c:	2800      	cmp	r0, #0
    444e:	d1eb      	bne.n	4428 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    4450:	2c00      	cmp	r4, #0
    4452:	d00c      	beq.n	446e <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    4454:	490e      	ldr	r1, [pc, #56]	; (4490 <sd_mmc_usb_write_10+0x9c>)
    4456:	07e3      	lsls	r3, r4, #31
    4458:	d500      	bpl.n	445c <sd_mmc_usb_write_10+0x68>
    445a:	4909      	ldr	r1, [pc, #36]	; (4480 <sd_mmc_usb_write_10+0x8c>)
    445c:	2300      	movs	r3, #0
    445e:	2280      	movs	r2, #128	; 0x80
    4460:	0092      	lsls	r2, r2, #2
    4462:	2000      	movs	r0, #0
    4464:	47b0      	blx	r6
    4466:	2800      	cmp	r0, #0
    4468:	d0d1      	beq.n	440e <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    446a:	2d00      	cmp	r5, #0
    446c:	d1e0      	bne.n	4430 <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    446e:	2000      	movs	r0, #0
    4470:	47b8      	blx	r7
    4472:	2800      	cmp	r0, #0
    4474:	d0dc      	beq.n	4430 <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    4476:	2001      	movs	r0, #1
    4478:	e7c6      	b.n	4408 <sd_mmc_usb_write_10+0x14>
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	00000975 	.word	0x00000975
    4480:	20000868 	.word	0x20000868
    4484:	00000a11 	.word	0x00000a11
    4488:	00001291 	.word	0x00001291
    448c:	0000ffff 	.word	0x0000ffff
    4490:	20000668 	.word	0x20000668
    4494:	000009e5 	.word	0x000009e5

00004498 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    4498:	b510      	push	{r4, lr}
    449a:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    449c:	0001      	movs	r1, r0
    449e:	2000      	movs	r0, #0
    44a0:	4b01      	ldr	r3, [pc, #4]	; (44a8 <sd_mmc_usb_write_10_0+0x10>)
    44a2:	4798      	blx	r3
}
    44a4:	bd10      	pop	{r4, pc}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	000043f5 	.word	0x000043f5

000044ac <sd_mmc_usb_write_10_1>:

Ctrl_status sd_mmc_usb_write_10_1(uint32_t addr, uint16_t nb_sector)
{
    44ac:	b510      	push	{r4, lr}
    44ae:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(1, addr, nb_sector);
    44b0:	0001      	movs	r1, r0
    44b2:	2001      	movs	r0, #1
    44b4:	4b01      	ldr	r3, [pc, #4]	; (44bc <sd_mmc_usb_write_10_1+0x10>)
    44b6:	4798      	blx	r3
}
    44b8:	bd10      	pop	{r4, pc}
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	000043f5 	.word	0x000043f5

000044c0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    44c0:	b500      	push	{lr}
    44c2:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    44c4:	466b      	mov	r3, sp
    44c6:	1dd9      	adds	r1, r3, #7
    44c8:	23ff      	movs	r3, #255	; 0xff
    44ca:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    44cc:	2201      	movs	r2, #1
    44ce:	480b      	ldr	r0, [pc, #44]	; (44fc <sd_mmc_spi_start_write_block+0x3c>)
    44d0:	4b0b      	ldr	r3, [pc, #44]	; (4500 <sd_mmc_spi_start_write_block+0x40>)
    44d2:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    44d4:	4b0b      	ldr	r3, [pc, #44]	; (4504 <sd_mmc_spi_start_write_block+0x44>)
    44d6:	881b      	ldrh	r3, [r3, #0]
    44d8:	2b01      	cmp	r3, #1
    44da:	d00a      	beq.n	44f2 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    44dc:	22fc      	movs	r2, #252	; 0xfc
    44de:	466b      	mov	r3, sp
    44e0:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    44e2:	2201      	movs	r2, #1
    44e4:	466b      	mov	r3, sp
    44e6:	1d99      	adds	r1, r3, #6
    44e8:	4804      	ldr	r0, [pc, #16]	; (44fc <sd_mmc_spi_start_write_block+0x3c>)
    44ea:	4b05      	ldr	r3, [pc, #20]	; (4500 <sd_mmc_spi_start_write_block+0x40>)
    44ec:	4798      	blx	r3
}
    44ee:	b003      	add	sp, #12
    44f0:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    44f2:	22fe      	movs	r2, #254	; 0xfe
    44f4:	466b      	mov	r3, sp
    44f6:	719a      	strb	r2, [r3, #6]
    44f8:	e7f3      	b.n	44e2 <sd_mmc_spi_start_write_block+0x22>
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	2000024c 	.word	0x2000024c
    4500:	00003d29 	.word	0x00003d29
    4504:	20000290 	.word	0x20000290

00004508 <sd_mmc_spi_wait_busy>:
{
    4508:	b5f0      	push	{r4, r5, r6, r7, lr}
    450a:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    450c:	466b      	mov	r3, sp
    450e:	1ddc      	adds	r4, r3, #7
    4510:	23ff      	movs	r3, #255	; 0xff
    4512:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    4514:	4e12      	ldr	r6, [pc, #72]	; (4560 <sd_mmc_spi_wait_busy+0x58>)
    4516:	2201      	movs	r2, #1
    4518:	0021      	movs	r1, r4
    451a:	0030      	movs	r0, r6
    451c:	4d11      	ldr	r5, [pc, #68]	; (4564 <sd_mmc_spi_wait_busy+0x5c>)
    451e:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    4520:	23ff      	movs	r3, #255	; 0xff
    4522:	2201      	movs	r2, #1
    4524:	0021      	movs	r1, r4
    4526:	0030      	movs	r0, r6
    4528:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    452a:	23ff      	movs	r3, #255	; 0xff
    452c:	2201      	movs	r2, #1
    452e:	0021      	movs	r1, r4
    4530:	0030      	movs	r0, r6
    4532:	47a8      	blx	r5
    4534:	4c0c      	ldr	r4, [pc, #48]	; (4568 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    4536:	466b      	mov	r3, sp
    4538:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    453a:	4e09      	ldr	r6, [pc, #36]	; (4560 <sd_mmc_spi_wait_busy+0x58>)
    453c:	4f09      	ldr	r7, [pc, #36]	; (4564 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    453e:	782b      	ldrb	r3, [r5, #0]
    4540:	2bff      	cmp	r3, #255	; 0xff
    4542:	d009      	beq.n	4558 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    4544:	23ff      	movs	r3, #255	; 0xff
    4546:	2201      	movs	r2, #1
    4548:	0029      	movs	r1, r5
    454a:	0030      	movs	r0, r6
    454c:	47b8      	blx	r7
    454e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    4550:	2c00      	cmp	r4, #0
    4552:	d1f4      	bne.n	453e <sd_mmc_spi_wait_busy+0x36>
			return false;
    4554:	2000      	movs	r0, #0
    4556:	e000      	b.n	455a <sd_mmc_spi_wait_busy+0x52>
	return true;
    4558:	2001      	movs	r0, #1
}
    455a:	b003      	add	sp, #12
    455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	2000024c 	.word	0x2000024c
    4564:	00003b19 	.word	0x00003b19
    4568:	00030d40 	.word	0x00030d40

0000456c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    456c:	b570      	push	{r4, r5, r6, lr}
    456e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    4570:	4b14      	ldr	r3, [pc, #80]	; (45c4 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    4572:	881c      	ldrh	r4, [r3, #0]
    4574:	2c01      	cmp	r4, #1
    4576:	d023      	beq.n	45c0 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    4578:	4b13      	ldr	r3, [pc, #76]	; (45c8 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    457a:	8819      	ldrh	r1, [r3, #0]
    457c:	4b13      	ldr	r3, [pc, #76]	; (45cc <sd_mmc_spi_stop_multiwrite_block+0x60>)
    457e:	6818      	ldr	r0, [r3, #0]
    4580:	4b13      	ldr	r3, [pc, #76]	; (45d0 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    4582:	4798      	blx	r3
		return true; // It is not the End of multi write
    4584:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    4586:	4284      	cmp	r4, r0
    4588:	d902      	bls.n	4590 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    458a:	0018      	movs	r0, r3
    458c:	b002      	add	sp, #8
    458e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    4590:	466b      	mov	r3, sp
    4592:	1ddc      	adds	r4, r3, #7
    4594:	23ff      	movs	r3, #255	; 0xff
    4596:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    4598:	4e0e      	ldr	r6, [pc, #56]	; (45d4 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    459a:	2201      	movs	r2, #1
    459c:	0021      	movs	r1, r4
    459e:	0030      	movs	r0, r6
    45a0:	4d0d      	ldr	r5, [pc, #52]	; (45d8 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    45a2:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    45a4:	23fd      	movs	r3, #253	; 0xfd
    45a6:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    45a8:	2201      	movs	r2, #1
    45aa:	0021      	movs	r1, r4
    45ac:	0030      	movs	r0, r6
    45ae:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    45b0:	4b0a      	ldr	r3, [pc, #40]	; (45dc <sd_mmc_spi_stop_multiwrite_block+0x70>)
    45b2:	4798      	blx	r3
    45b4:	1e03      	subs	r3, r0, #0
    45b6:	d1e8      	bne.n	458a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    45b8:	2105      	movs	r1, #5
    45ba:	4a09      	ldr	r2, [pc, #36]	; (45e0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    45bc:	7011      	strb	r1, [r2, #0]
		return false;
    45be:	e7e4      	b.n	458a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    45c0:	2301      	movs	r3, #1
    45c2:	e7e2      	b.n	458a <sd_mmc_spi_stop_multiwrite_block+0x1e>
    45c4:	20000290 	.word	0x20000290
    45c8:	20000288 	.word	0x20000288
    45cc:	20000298 	.word	0x20000298
    45d0:	000056d1 	.word	0x000056d1
    45d4:	2000024c 	.word	0x2000024c
    45d8:	00003d29 	.word	0x00003d29
    45dc:	00004509 	.word	0x00004509
    45e0:	2000028f 	.word	0x2000028f

000045e4 <sd_mmc_spi_start_read_block>:
{
    45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e6:	b083      	sub	sp, #12
	token = 0;
    45e8:	2200      	movs	r2, #0
    45ea:	466b      	mov	r3, sp
    45ec:	71da      	strb	r2, [r3, #7]
    45ee:	4c14      	ldr	r4, [pc, #80]	; (4640 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    45f0:	466b      	mov	r3, sp
    45f2:	1ddd      	adds	r5, r3, #7
    45f4:	4e13      	ldr	r6, [pc, #76]	; (4644 <sd_mmc_spi_start_read_block+0x60>)
    45f6:	4f14      	ldr	r7, [pc, #80]	; (4648 <sd_mmc_spi_start_read_block+0x64>)
    45f8:	23ff      	movs	r3, #255	; 0xff
    45fa:	2201      	movs	r2, #1
    45fc:	0029      	movs	r1, r5
    45fe:	0030      	movs	r0, r6
    4600:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    4602:	782b      	ldrb	r3, [r5, #0]
    4604:	220f      	movs	r2, #15
    4606:	0019      	movs	r1, r3
    4608:	4391      	bics	r1, r2
    460a:	1e0a      	subs	r2, r1, #0
    460c:	d009      	beq.n	4622 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    460e:	2bfe      	cmp	r3, #254	; 0xfe
    4610:	d013      	beq.n	463a <sd_mmc_spi_start_read_block+0x56>
    4612:	3c01      	subs	r4, #1
		if (i-- == 0) {
    4614:	2c00      	cmp	r4, #0
    4616:	d1ef      	bne.n	45f8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    4618:	2204      	movs	r2, #4
    461a:	4b0c      	ldr	r3, [pc, #48]	; (464c <sd_mmc_spi_start_read_block+0x68>)
    461c:	701a      	strb	r2, [r3, #0]
			return false;
    461e:	2000      	movs	r0, #0
    4620:	e00c      	b.n	463c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    4622:	075b      	lsls	r3, r3, #29
    4624:	d004      	beq.n	4630 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    4626:	3207      	adds	r2, #7
    4628:	4b08      	ldr	r3, [pc, #32]	; (464c <sd_mmc_spi_start_read_block+0x68>)
    462a:	701a      	strb	r2, [r3, #0]
			return false;
    462c:	2000      	movs	r0, #0
    462e:	e005      	b.n	463c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    4630:	220b      	movs	r2, #11
    4632:	4b06      	ldr	r3, [pc, #24]	; (464c <sd_mmc_spi_start_read_block+0x68>)
    4634:	701a      	strb	r2, [r3, #0]
			return false;
    4636:	2000      	movs	r0, #0
    4638:	e000      	b.n	463c <sd_mmc_spi_start_read_block+0x58>
	return true;
    463a:	2001      	movs	r0, #1
}
    463c:	b003      	add	sp, #12
    463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4640:	0007a120 	.word	0x0007a120
    4644:	2000024c 	.word	0x2000024c
    4648:	00003b19 	.word	0x00003b19
    464c:	2000028f 	.word	0x2000028f

00004650 <sd_mmc_spi_stop_write_block>:
{
    4650:	b530      	push	{r4, r5, lr}
    4652:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    4654:	a901      	add	r1, sp, #4
    4656:	2301      	movs	r3, #1
    4658:	425b      	negs	r3, r3
    465a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    465c:	4d14      	ldr	r5, [pc, #80]	; (46b0 <sd_mmc_spi_stop_write_block+0x60>)
    465e:	2202      	movs	r2, #2
    4660:	0028      	movs	r0, r5
    4662:	4b14      	ldr	r3, [pc, #80]	; (46b4 <sd_mmc_spi_stop_write_block+0x64>)
    4664:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    4666:	466b      	mov	r3, sp
    4668:	1ddc      	adds	r4, r3, #7
    466a:	23ff      	movs	r3, #255	; 0xff
    466c:	2201      	movs	r2, #1
    466e:	0021      	movs	r1, r4
    4670:	0028      	movs	r0, r5
    4672:	4d11      	ldr	r5, [pc, #68]	; (46b8 <sd_mmc_spi_stop_write_block+0x68>)
    4674:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    4676:	7822      	ldrb	r2, [r4, #0]
    4678:	2311      	movs	r3, #17
    467a:	4013      	ands	r3, r2
    467c:	2b01      	cmp	r3, #1
    467e:	d005      	beq.n	468c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    4680:	2201      	movs	r2, #1
    4682:	4b0e      	ldr	r3, [pc, #56]	; (46bc <sd_mmc_spi_stop_write_block+0x6c>)
    4684:	701a      	strb	r2, [r3, #0]
		return false;
    4686:	2000      	movs	r0, #0
}
    4688:	b003      	add	sp, #12
    468a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    468c:	231e      	movs	r3, #30
    468e:	401a      	ands	r2, r3
    4690:	2a04      	cmp	r2, #4
    4692:	d00b      	beq.n	46ac <sd_mmc_spi_stop_write_block+0x5c>
    4694:	2a0a      	cmp	r2, #10
    4696:	d104      	bne.n	46a2 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    4698:	3a02      	subs	r2, #2
    469a:	4b08      	ldr	r3, [pc, #32]	; (46bc <sd_mmc_spi_stop_write_block+0x6c>)
    469c:	701a      	strb	r2, [r3, #0]
		return false;
    469e:	2000      	movs	r0, #0
    46a0:	e7f2      	b.n	4688 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    46a2:	220a      	movs	r2, #10
    46a4:	4b05      	ldr	r3, [pc, #20]	; (46bc <sd_mmc_spi_stop_write_block+0x6c>)
    46a6:	701a      	strb	r2, [r3, #0]
		return false;
    46a8:	2000      	movs	r0, #0
    46aa:	e7ed      	b.n	4688 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    46ac:	2001      	movs	r0, #1
    46ae:	e7eb      	b.n	4688 <sd_mmc_spi_stop_write_block+0x38>
    46b0:	2000024c 	.word	0x2000024c
    46b4:	00003d29 	.word	0x00003d29
    46b8:	00003b19 	.word	0x00003b19
    46bc:	2000028f 	.word	0x2000028f

000046c0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    46c0:	b570      	push	{r4, r5, r6, lr}
    46c2:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    46c4:	2500      	movs	r5, #0
    46c6:	4b30      	ldr	r3, [pc, #192]	; (4788 <sd_mmc_spi_init+0xc8>)
    46c8:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    46ca:	a90f      	add	r1, sp, #60	; 0x3c
    46cc:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    46ce:	2601      	movs	r6, #1
    46d0:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    46d2:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    46d4:	2025      	movs	r0, #37	; 0x25
    46d6:	4b2d      	ldr	r3, [pc, #180]	; (478c <sd_mmc_spi_init+0xcc>)
    46d8:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    46da:	ac01      	add	r4, sp, #4
    46dc:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    46de:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    46e0:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    46e2:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    46e4:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    46e6:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    46e8:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    46ea:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    46ec:	2324      	movs	r3, #36	; 0x24
    46ee:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    46f0:	220c      	movs	r2, #12
    46f2:	2100      	movs	r1, #0
    46f4:	a807      	add	r0, sp, #28
    46f6:	4b26      	ldr	r3, [pc, #152]	; (4790 <sd_mmc_spi_init+0xd0>)
    46f8:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    46fa:	2380      	movs	r3, #128	; 0x80
    46fc:	025b      	lsls	r3, r3, #9
    46fe:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    4700:	4b24      	ldr	r3, [pc, #144]	; (4794 <sd_mmc_spi_init+0xd4>)
    4702:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    4704:	4b24      	ldr	r3, [pc, #144]	; (4798 <sd_mmc_spi_init+0xd8>)
    4706:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    4708:	4b24      	ldr	r3, [pc, #144]	; (479c <sd_mmc_spi_init+0xdc>)
    470a:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    470c:	4b24      	ldr	r3, [pc, #144]	; (47a0 <sd_mmc_spi_init+0xe0>)
    470e:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    4710:	4b24      	ldr	r3, [pc, #144]	; (47a4 <sd_mmc_spi_init+0xe4>)
    4712:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    4714:	4d24      	ldr	r5, [pc, #144]	; (47a8 <sd_mmc_spi_init+0xe8>)
    4716:	0022      	movs	r2, r4
    4718:	4924      	ldr	r1, [pc, #144]	; (47ac <sd_mmc_spi_init+0xec>)
    471a:	0028      	movs	r0, r5
    471c:	4b24      	ldr	r3, [pc, #144]	; (47b0 <sd_mmc_spi_init+0xf0>)
    471e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    4720:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4722:	0020      	movs	r0, r4
    4724:	4b23      	ldr	r3, [pc, #140]	; (47b4 <sd_mmc_spi_init+0xf4>)
    4726:	4798      	blx	r3
    4728:	231f      	movs	r3, #31
    472a:	4018      	ands	r0, r3
    472c:	4086      	lsls	r6, r0
    472e:	4b22      	ldr	r3, [pc, #136]	; (47b8 <sd_mmc_spi_init+0xf8>)
    4730:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4732:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4734:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4736:	2b00      	cmp	r3, #0
    4738:	d1fc      	bne.n	4734 <sd_mmc_spi_init+0x74>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    473a:	6823      	ldr	r3, [r4, #0]
    473c:	2202      	movs	r2, #2
    473e:	4313      	orrs	r3, r2
    4740:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    4742:	4a1e      	ldr	r2, [pc, #120]	; (47bc <sd_mmc_spi_init+0xfc>)
    4744:	2300      	movs	r3, #0
    4746:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    4748:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    474a:	491d      	ldr	r1, [pc, #116]	; (47c0 <sd_mmc_spi_init+0x100>)
    474c:	7808      	ldrb	r0, [r1, #0]
    474e:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    4750:	4c1c      	ldr	r4, [pc, #112]	; (47c4 <sd_mmc_spi_init+0x104>)
    4752:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    4754:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    4756:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    4758:	2201      	movs	r2, #1
    475a:	4669      	mov	r1, sp
    475c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    475e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    4760:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    4762:	4b0a      	ldr	r3, [pc, #40]	; (478c <sd_mmc_spi_init+0xcc>)
    4764:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    4766:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    4768:	09d1      	lsrs	r1, r2, #7
		return NULL;
    476a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    476c:	2900      	cmp	r1, #0
    476e:	d104      	bne.n	477a <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
    4770:	0953      	lsrs	r3, r2, #5
    4772:	01db      	lsls	r3, r3, #7
    4774:	4914      	ldr	r1, [pc, #80]	; (47c8 <sd_mmc_spi_init+0x108>)
    4776:	468c      	mov	ip, r1
    4778:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    477a:	211f      	movs	r1, #31
    477c:	4011      	ands	r1, r2
    477e:	2201      	movs	r2, #1
    4780:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4782:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    4784:	b010      	add	sp, #64	; 0x40
    4786:	bd70      	pop	{r4, r5, r6, pc}
    4788:	2000028f 	.word	0x2000028f
    478c:	00004d95 	.word	0x00004d95
    4790:	00005cbf 	.word	0x00005cbf
    4794:	00040003 	.word	0x00040003
    4798:	00050003 	.word	0x00050003
    479c:	00060003 	.word	0x00060003
    47a0:	00070003 	.word	0x00070003
    47a4:	00061a80 	.word	0x00061a80
    47a8:	2000024c 	.word	0x2000024c
    47ac:	42000800 	.word	0x42000800
    47b0:	00003905 	.word	0x00003905
    47b4:	0000419d 	.word	0x0000419d
    47b8:	e000e100 	.word	0xe000e100
    47bc:	2000029c 	.word	0x2000029c
    47c0:	20000114 	.word	0x20000114
    47c4:	2000028c 	.word	0x2000028c
    47c8:	41004400 	.word	0x41004400

000047cc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    47cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ce:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    47d0:	2200      	movs	r2, #0
    47d2:	4b0d      	ldr	r3, [pc, #52]	; (4808 <sd_mmc_spi_select_device+0x3c>)
    47d4:	701a      	strb	r2, [r3, #0]
    47d6:	000c      	movs	r4, r1
    47d8:	4b0c      	ldr	r3, [pc, #48]	; (480c <sd_mmc_spi_select_device+0x40>)
    47da:	4299      	cmp	r1, r3
    47dc:	d900      	bls.n	47e0 <sd_mmc_spi_select_device+0x14>
    47de:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    47e0:	4d0b      	ldr	r5, [pc, #44]	; (4810 <sd_mmc_spi_select_device+0x44>)
    47e2:	4e0c      	ldr	r6, [pc, #48]	; (4814 <sd_mmc_spi_select_device+0x48>)
    47e4:	e001      	b.n	47ea <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    47e6:	08e3      	lsrs	r3, r4, #3
    47e8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    47ea:	0021      	movs	r1, r4
    47ec:	0028      	movs	r0, r5
    47ee:	47b0      	blx	r6
    47f0:	2817      	cmp	r0, #23
    47f2:	d0f8      	beq.n	47e6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    47f4:	0079      	lsls	r1, r7, #1
    47f6:	19cf      	adds	r7, r1, r7
    47f8:	4907      	ldr	r1, [pc, #28]	; (4818 <sd_mmc_spi_select_device+0x4c>)
    47fa:	19c9      	adds	r1, r1, r7
    47fc:	2201      	movs	r2, #1
    47fe:	4804      	ldr	r0, [pc, #16]	; (4810 <sd_mmc_spi_select_device+0x44>)
    4800:	4b06      	ldr	r3, [pc, #24]	; (481c <sd_mmc_spi_select_device+0x50>)
    4802:	4798      	blx	r3
}
    4804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	2000028f 	.word	0x2000028f
    480c:	003d0900 	.word	0x003d0900
    4810:	2000024c 	.word	0x2000024c
    4814:	0000384d 	.word	0x0000384d
    4818:	2000028c 	.word	0x2000028c
    481c:	00003c35 	.word	0x00003c35

00004820 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    4820:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4822:	2200      	movs	r2, #0
    4824:	4b04      	ldr	r3, [pc, #16]	; (4838 <sd_mmc_spi_deselect_device+0x18>)
    4826:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    4828:	0041      	lsls	r1, r0, #1
    482a:	1808      	adds	r0, r1, r0
    482c:	4903      	ldr	r1, [pc, #12]	; (483c <sd_mmc_spi_deselect_device+0x1c>)
    482e:	1809      	adds	r1, r1, r0
    4830:	4803      	ldr	r0, [pc, #12]	; (4840 <sd_mmc_spi_deselect_device+0x20>)
    4832:	4b04      	ldr	r3, [pc, #16]	; (4844 <sd_mmc_spi_deselect_device+0x24>)
    4834:	4798      	blx	r3
}
    4836:	bd10      	pop	{r4, pc}
    4838:	2000028f 	.word	0x2000028f
    483c:	2000028c 	.word	0x2000028c
    4840:	2000024c 	.word	0x2000024c
    4844:	00003c35 	.word	0x00003c35

00004848 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    4848:	b570      	push	{r4, r5, r6, lr}
    484a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    484c:	22ff      	movs	r2, #255	; 0xff
    484e:	466b      	mov	r3, sp
    4850:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4852:	2200      	movs	r2, #0
    4854:	4b07      	ldr	r3, [pc, #28]	; (4874 <sd_mmc_spi_send_clock+0x2c>)
    4856:	701a      	strb	r2, [r3, #0]
    4858:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    485a:	4e07      	ldr	r6, [pc, #28]	; (4878 <sd_mmc_spi_send_clock+0x30>)
    485c:	4d07      	ldr	r5, [pc, #28]	; (487c <sd_mmc_spi_send_clock+0x34>)
    485e:	2201      	movs	r2, #1
    4860:	466b      	mov	r3, sp
    4862:	1dd9      	adds	r1, r3, #7
    4864:	0030      	movs	r0, r6
    4866:	47a8      	blx	r5
    4868:	3c01      	subs	r4, #1
    486a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    486c:	2c00      	cmp	r4, #0
    486e:	d1f6      	bne.n	485e <sd_mmc_spi_send_clock+0x16>
	}
}
    4870:	b002      	add	sp, #8
    4872:	bd70      	pop	{r4, r5, r6, pc}
    4874:	2000028f 	.word	0x2000028f
    4878:	2000024c 	.word	0x2000024c
    487c:	00003d29 	.word	0x00003d29

00004880 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    4880:	b5f0      	push	{r4, r5, r6, r7, lr}
    4882:	46c6      	mov	lr, r8
    4884:	b500      	push	{lr}
    4886:	b086      	sub	sp, #24
    4888:	4680      	mov	r8, r0
    488a:	9200      	str	r2, [sp, #0]
    488c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    488e:	22ff      	movs	r2, #255	; 0xff
    4890:	230f      	movs	r3, #15
    4892:	a802      	add	r0, sp, #8
    4894:	4684      	mov	ip, r0
    4896:	4463      	add	r3, ip
    4898:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    489a:	2200      	movs	r2, #0
    489c:	4b53      	ldr	r3, [pc, #332]	; (49ec <sd_mmc_spi_adtc_start+0x16c>)
    489e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    48a0:	ab04      	add	r3, sp, #16
    48a2:	323f      	adds	r2, #63	; 0x3f
    48a4:	4640      	mov	r0, r8
    48a6:	4002      	ands	r2, r0
    48a8:	2040      	movs	r0, #64	; 0x40
    48aa:	4302      	orrs	r2, r0
    48ac:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    48ae:	0e0a      	lsrs	r2, r1, #24
    48b0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    48b2:	0c0a      	lsrs	r2, r1, #16
    48b4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    48b6:	0a0a      	lsrs	r2, r1, #8
    48b8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    48ba:	7119      	strb	r1, [r3, #4]
    48bc:	2700      	movs	r7, #0
	crc = 0;
    48be:	2300      	movs	r3, #0
		value = *buf++;
    48c0:	a904      	add	r1, sp, #16
    48c2:	2208      	movs	r2, #8
				crc ^= 0x09;
    48c4:	2409      	movs	r4, #9
    48c6:	e011      	b.n	48ec <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    48c8:	0076      	lsls	r6, r6, #1
    48ca:	b2f6      	uxtb	r6, r6
    48cc:	3801      	subs	r0, #1
    48ce:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    48d0:	2800      	cmp	r0, #0
    48d2:	d008      	beq.n	48e6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    48d4:	005b      	lsls	r3, r3, #1
    48d6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    48d8:	001d      	movs	r5, r3
    48da:	4075      	eors	r5, r6
    48dc:	062d      	lsls	r5, r5, #24
    48de:	d5f3      	bpl.n	48c8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    48e0:	4063      	eors	r3, r4
    48e2:	b2db      	uxtb	r3, r3
    48e4:	e7f0      	b.n	48c8 <sd_mmc_spi_adtc_start+0x48>
    48e6:	3701      	adds	r7, #1
	while (size--) {
    48e8:	2f05      	cmp	r7, #5
    48ea:	d002      	beq.n	48f2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    48ec:	5c7e      	ldrb	r6, [r7, r1]
    48ee:	0010      	movs	r0, r2
    48f0:	e7f0      	b.n	48d4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    48f2:	005b      	lsls	r3, r3, #1
    48f4:	2201      	movs	r2, #1
    48f6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    48f8:	ac04      	add	r4, sp, #16
    48fa:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    48fc:	4e3c      	ldr	r6, [pc, #240]	; (49f0 <sd_mmc_spi_adtc_start+0x170>)
    48fe:	2201      	movs	r2, #1
    4900:	210f      	movs	r1, #15
    4902:	ab02      	add	r3, sp, #8
    4904:	469c      	mov	ip, r3
    4906:	4461      	add	r1, ip
    4908:	0030      	movs	r0, r6
    490a:	4f3a      	ldr	r7, [pc, #232]	; (49f4 <sd_mmc_spi_adtc_start+0x174>)
    490c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    490e:	2206      	movs	r2, #6
    4910:	0021      	movs	r1, r4
    4912:	0030      	movs	r0, r6
    4914:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    4916:	ab02      	add	r3, sp, #8
    4918:	1dd9      	adds	r1, r3, #7
    491a:	23ff      	movs	r3, #255	; 0xff
    491c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    491e:	2201      	movs	r2, #1
    4920:	0030      	movs	r0, r6
    4922:	4e35      	ldr	r6, [pc, #212]	; (49f8 <sd_mmc_spi_adtc_start+0x178>)
    4924:	47b0      	blx	r6
    4926:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    4928:	ab02      	add	r3, sp, #8
    492a:	1dde      	adds	r6, r3, #7
    492c:	4f30      	ldr	r7, [pc, #192]	; (49f0 <sd_mmc_spi_adtc_start+0x170>)
    492e:	4d32      	ldr	r5, [pc, #200]	; (49f8 <sd_mmc_spi_adtc_start+0x178>)
    4930:	23ff      	movs	r3, #255	; 0xff
    4932:	2201      	movs	r2, #1
    4934:	0031      	movs	r1, r6
    4936:	0038      	movs	r0, r7
    4938:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    493a:	7833      	ldrb	r3, [r6, #0]
    493c:	b25a      	sxtb	r2, r3
    493e:	2a00      	cmp	r2, #0
    4940:	da0b      	bge.n	495a <sd_mmc_spi_adtc_start+0xda>
    4942:	3c01      	subs	r4, #1
    4944:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    4946:	2c00      	cmp	r4, #0
    4948:	d1f2      	bne.n	4930 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    494a:	2202      	movs	r2, #2
    494c:	4b27      	ldr	r3, [pc, #156]	; (49ec <sd_mmc_spi_adtc_start+0x16c>)
    494e:	701a      	strb	r2, [r3, #0]
			return false;
    4950:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    4952:	b006      	add	sp, #24
    4954:	bc04      	pop	{r2}
    4956:	4690      	mov	r8, r2
    4958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    495a:	4a28      	ldr	r2, [pc, #160]	; (49fc <sd_mmc_spi_adtc_start+0x17c>)
    495c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    495e:	071a      	lsls	r2, r3, #28
    4960:	d41a      	bmi.n	4998 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    4962:	075a      	lsls	r2, r3, #29
    4964:	d41d      	bmi.n	49a2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    4966:	2201      	movs	r2, #1
    4968:	4393      	bics	r3, r2
    496a:	d11f      	bne.n	49ac <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    496c:	4643      	mov	r3, r8
    496e:	049b      	lsls	r3, r3, #18
    4970:	d420      	bmi.n	49b4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    4972:	4643      	mov	r3, r8
    4974:	059b      	lsls	r3, r3, #22
    4976:	d425      	bmi.n	49c4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    4978:	4643      	mov	r3, r8
    497a:	055b      	lsls	r3, r3, #21
    497c:	d42b      	bmi.n	49d6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    497e:	4b20      	ldr	r3, [pc, #128]	; (4a00 <sd_mmc_spi_adtc_start+0x180>)
    4980:	466a      	mov	r2, sp
    4982:	8812      	ldrh	r2, [r2, #0]
    4984:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    4986:	4b1f      	ldr	r3, [pc, #124]	; (4a04 <sd_mmc_spi_adtc_start+0x184>)
    4988:	466a      	mov	r2, sp
    498a:	8892      	ldrh	r2, [r2, #4]
    498c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    498e:	2200      	movs	r2, #0
    4990:	4b1d      	ldr	r3, [pc, #116]	; (4a08 <sd_mmc_spi_adtc_start+0x188>)
    4992:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    4994:	2001      	movs	r0, #1
    4996:	e7dc      	b.n	4952 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    4998:	2206      	movs	r2, #6
    499a:	4b14      	ldr	r3, [pc, #80]	; (49ec <sd_mmc_spi_adtc_start+0x16c>)
    499c:	701a      	strb	r2, [r3, #0]
		return false;
    499e:	2000      	movs	r0, #0
    49a0:	e7d7      	b.n	4952 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    49a2:	2209      	movs	r2, #9
    49a4:	4b11      	ldr	r3, [pc, #68]	; (49ec <sd_mmc_spi_adtc_start+0x16c>)
    49a6:	701a      	strb	r2, [r3, #0]
		return false;
    49a8:	2000      	movs	r0, #0
    49aa:	e7d2      	b.n	4952 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    49ac:	4b0f      	ldr	r3, [pc, #60]	; (49ec <sd_mmc_spi_adtc_start+0x16c>)
    49ae:	701a      	strb	r2, [r3, #0]
		return false;
    49b0:	2000      	movs	r0, #0
    49b2:	e7ce      	b.n	4952 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    49b4:	4b15      	ldr	r3, [pc, #84]	; (4a0c <sd_mmc_spi_adtc_start+0x18c>)
    49b6:	4798      	blx	r3
    49b8:	2800      	cmp	r0, #0
    49ba:	d1da      	bne.n	4972 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    49bc:	2203      	movs	r2, #3
    49be:	4b0b      	ldr	r3, [pc, #44]	; (49ec <sd_mmc_spi_adtc_start+0x16c>)
    49c0:	701a      	strb	r2, [r3, #0]
			return false;
    49c2:	e7c6      	b.n	4952 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    49c4:	490d      	ldr	r1, [pc, #52]	; (49fc <sd_mmc_spi_adtc_start+0x17c>)
    49c6:	2300      	movs	r3, #0
    49c8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    49ca:	33ff      	adds	r3, #255	; 0xff
    49cc:	2201      	movs	r2, #1
    49ce:	4808      	ldr	r0, [pc, #32]	; (49f0 <sd_mmc_spi_adtc_start+0x170>)
    49d0:	4e09      	ldr	r6, [pc, #36]	; (49f8 <sd_mmc_spi_adtc_start+0x178>)
    49d2:	47b0      	blx	r6
    49d4:	e7d0      	b.n	4978 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    49d6:	4e09      	ldr	r6, [pc, #36]	; (49fc <sd_mmc_spi_adtc_start+0x17c>)
    49d8:	23ff      	movs	r3, #255	; 0xff
    49da:	2204      	movs	r2, #4
    49dc:	0031      	movs	r1, r6
    49de:	4804      	ldr	r0, [pc, #16]	; (49f0 <sd_mmc_spi_adtc_start+0x170>)
    49e0:	4f05      	ldr	r7, [pc, #20]	; (49f8 <sd_mmc_spi_adtc_start+0x178>)
    49e2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    49e4:	6833      	ldr	r3, [r6, #0]
    49e6:	ba1b      	rev	r3, r3
    49e8:	6033      	str	r3, [r6, #0]
    49ea:	e7c8      	b.n	497e <sd_mmc_spi_adtc_start+0xfe>
    49ec:	2000028f 	.word	0x2000028f
    49f0:	2000024c 	.word	0x2000024c
    49f4:	00003d29 	.word	0x00003d29
    49f8:	00003b19 	.word	0x00003b19
    49fc:	20000294 	.word	0x20000294
    4a00:	20000288 	.word	0x20000288
    4a04:	20000290 	.word	0x20000290
    4a08:	20000298 	.word	0x20000298
    4a0c:	00004509 	.word	0x00004509

00004a10 <sd_mmc_spi_send_cmd>:
{
    4a10:	b510      	push	{r4, lr}
    4a12:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    4a14:	2300      	movs	r3, #0
    4a16:	9300      	str	r3, [sp, #0]
    4a18:	2200      	movs	r2, #0
    4a1a:	4c02      	ldr	r4, [pc, #8]	; (4a24 <sd_mmc_spi_send_cmd+0x14>)
    4a1c:	47a0      	blx	r4
}
    4a1e:	b002      	add	sp, #8
    4a20:	bd10      	pop	{r4, pc}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	00004881 	.word	0x00004881

00004a28 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    4a28:	4b01      	ldr	r3, [pc, #4]	; (4a30 <sd_mmc_spi_get_response+0x8>)
    4a2a:	6818      	ldr	r0, [r3, #0]
}
    4a2c:	4770      	bx	lr
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	20000294 	.word	0x20000294

00004a34 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    4a34:	b510      	push	{r4, lr}
    4a36:	b084      	sub	sp, #16
    4a38:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4a3a:	2200      	movs	r2, #0
    4a3c:	4b14      	ldr	r3, [pc, #80]	; (4a90 <sd_mmc_spi_read_word+0x5c>)
    4a3e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    4a40:	4b14      	ldr	r3, [pc, #80]	; (4a94 <sd_mmc_spi_read_word+0x60>)
    4a42:	8819      	ldrh	r1, [r3, #0]
    4a44:	4b14      	ldr	r3, [pc, #80]	; (4a98 <sd_mmc_spi_read_word+0x64>)
    4a46:	6818      	ldr	r0, [r3, #0]
    4a48:	4b14      	ldr	r3, [pc, #80]	; (4a9c <sd_mmc_spi_read_word+0x68>)
    4a4a:	4798      	blx	r3
    4a4c:	2900      	cmp	r1, #0
    4a4e:	d103      	bne.n	4a58 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    4a50:	4b13      	ldr	r3, [pc, #76]	; (4aa0 <sd_mmc_spi_read_word+0x6c>)
    4a52:	4798      	blx	r3
    4a54:	2800      	cmp	r0, #0
    4a56:	d010      	beq.n	4a7a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    4a58:	23ff      	movs	r3, #255	; 0xff
    4a5a:	2204      	movs	r2, #4
    4a5c:	a901      	add	r1, sp, #4
    4a5e:	4811      	ldr	r0, [pc, #68]	; (4aa4 <sd_mmc_spi_read_word+0x70>)
    4a60:	4c11      	ldr	r4, [pc, #68]	; (4aa8 <sd_mmc_spi_read_word+0x74>)
    4a62:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    4a64:	4b0c      	ldr	r3, [pc, #48]	; (4a98 <sd_mmc_spi_read_word+0x64>)
    4a66:	681a      	ldr	r2, [r3, #0]
    4a68:	1d10      	adds	r0, r2, #4
    4a6a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    4a6c:	4b09      	ldr	r3, [pc, #36]	; (4a94 <sd_mmc_spi_read_word+0x60>)
    4a6e:	8819      	ldrh	r1, [r3, #0]
    4a70:	4b0a      	ldr	r3, [pc, #40]	; (4a9c <sd_mmc_spi_read_word+0x68>)
    4a72:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    4a74:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    4a76:	2900      	cmp	r1, #0
    4a78:	d001      	beq.n	4a7e <sd_mmc_spi_read_word+0x4a>
}
    4a7a:	b004      	add	sp, #16
    4a7c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    4a7e:	23ff      	movs	r3, #255	; 0xff
    4a80:	2202      	movs	r2, #2
    4a82:	a903      	add	r1, sp, #12
    4a84:	4807      	ldr	r0, [pc, #28]	; (4aa4 <sd_mmc_spi_read_word+0x70>)
    4a86:	4c08      	ldr	r4, [pc, #32]	; (4aa8 <sd_mmc_spi_read_word+0x74>)
    4a88:	47a0      	blx	r4
	return true;
    4a8a:	2001      	movs	r0, #1
    4a8c:	e7f5      	b.n	4a7a <sd_mmc_spi_read_word+0x46>
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	2000028f 	.word	0x2000028f
    4a94:	20000288 	.word	0x20000288
    4a98:	20000298 	.word	0x20000298
    4a9c:	000057dd 	.word	0x000057dd
    4aa0:	000045e5 	.word	0x000045e5
    4aa4:	2000024c 	.word	0x2000024c
    4aa8:	00003b19 	.word	0x00003b19

00004aac <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aae:	46de      	mov	lr, fp
    4ab0:	4657      	mov	r7, sl
    4ab2:	4646      	mov	r6, r8
    4ab4:	b5c0      	push	{r6, r7, lr}
    4ab6:	b082      	sub	sp, #8
    4ab8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4aba:	2200      	movs	r2, #0
    4abc:	4b17      	ldr	r3, [pc, #92]	; (4b1c <sd_mmc_spi_start_read_blocks+0x70>)
    4abe:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    4ac0:	1e4c      	subs	r4, r1, #1
    4ac2:	b2a4      	uxth	r4, r4
    4ac4:	2900      	cmp	r1, #0
    4ac6:	d026      	beq.n	4b16 <sd_mmc_spi_start_read_blocks+0x6a>
    4ac8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    4aca:	4b15      	ldr	r3, [pc, #84]	; (4b20 <sd_mmc_spi_start_read_blocks+0x74>)
    4acc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    4ace:	4f15      	ldr	r7, [pc, #84]	; (4b24 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    4ad0:	47d0      	blx	sl
    4ad2:	4680      	mov	r8, r0
    4ad4:	2800      	cmp	r0, #0
    4ad6:	d017      	beq.n	4b08 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    4ad8:	883a      	ldrh	r2, [r7, #0]
    4ada:	465b      	mov	r3, fp
    4adc:	1999      	adds	r1, r3, r6
    4ade:	23ff      	movs	r3, #255	; 0xff
    4ae0:	4811      	ldr	r0, [pc, #68]	; (4b28 <sd_mmc_spi_start_read_blocks+0x7c>)
    4ae2:	4d12      	ldr	r5, [pc, #72]	; (4b2c <sd_mmc_spi_start_read_blocks+0x80>)
    4ae4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    4ae6:	883b      	ldrh	r3, [r7, #0]
    4ae8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    4aea:	4a11      	ldr	r2, [pc, #68]	; (4b30 <sd_mmc_spi_start_read_blocks+0x84>)
    4aec:	6811      	ldr	r1, [r2, #0]
    4aee:	468c      	mov	ip, r1
    4af0:	4463      	add	r3, ip
    4af2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    4af4:	23ff      	movs	r3, #255	; 0xff
    4af6:	2202      	movs	r2, #2
    4af8:	a901      	add	r1, sp, #4
    4afa:	480b      	ldr	r0, [pc, #44]	; (4b28 <sd_mmc_spi_start_read_blocks+0x7c>)
    4afc:	47a8      	blx	r5
	while (nb_block--) {
    4afe:	3c01      	subs	r4, #1
    4b00:	b2a4      	uxth	r4, r4
    4b02:	4b0c      	ldr	r3, [pc, #48]	; (4b34 <sd_mmc_spi_start_read_blocks+0x88>)
    4b04:	429c      	cmp	r4, r3
    4b06:	d1e3      	bne.n	4ad0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    4b08:	4640      	mov	r0, r8
    4b0a:	b002      	add	sp, #8
    4b0c:	bc1c      	pop	{r2, r3, r4}
    4b0e:	4690      	mov	r8, r2
    4b10:	469a      	mov	sl, r3
    4b12:	46a3      	mov	fp, r4
    4b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    4b16:	2301      	movs	r3, #1
    4b18:	4698      	mov	r8, r3
    4b1a:	e7f5      	b.n	4b08 <sd_mmc_spi_start_read_blocks+0x5c>
    4b1c:	2000028f 	.word	0x2000028f
    4b20:	000045e5 	.word	0x000045e5
    4b24:	20000288 	.word	0x20000288
    4b28:	2000024c 	.word	0x2000024c
    4b2c:	00003b19 	.word	0x00003b19
    4b30:	20000298 	.word	0x20000298
    4b34:	0000ffff 	.word	0x0000ffff

00004b38 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    4b38:	2001      	movs	r0, #1
    4b3a:	4770      	bx	lr

00004b3c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    4b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b3e:	46c6      	mov	lr, r8
    4b40:	b500      	push	{lr}
    4b42:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    4b44:	2200      	movs	r2, #0
    4b46:	4b15      	ldr	r3, [pc, #84]	; (4b9c <sd_mmc_spi_start_write_blocks+0x60>)
    4b48:	701a      	strb	r2, [r3, #0]
	pos = 0;
    4b4a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    4b4c:	4f14      	ldr	r7, [pc, #80]	; (4ba0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    4b4e:	4e15      	ldr	r6, [pc, #84]	; (4ba4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    4b50:	e000      	b.n	4b54 <sd_mmc_spi_start_write_blocks+0x18>
{
    4b52:	0021      	movs	r1, r4
	while (nb_block--) {
    4b54:	1e4c      	subs	r4, r1, #1
    4b56:	b2a4      	uxth	r4, r4
    4b58:	2900      	cmp	r1, #0
    4b5a:	d01b      	beq.n	4b94 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    4b5c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    4b5e:	8832      	ldrh	r2, [r6, #0]
    4b60:	4643      	mov	r3, r8
    4b62:	1959      	adds	r1, r3, r5
    4b64:	4810      	ldr	r0, [pc, #64]	; (4ba8 <sd_mmc_spi_start_write_blocks+0x6c>)
    4b66:	4b11      	ldr	r3, [pc, #68]	; (4bac <sd_mmc_spi_start_write_blocks+0x70>)
    4b68:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    4b6a:	8833      	ldrh	r3, [r6, #0]
    4b6c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    4b6e:	4a10      	ldr	r2, [pc, #64]	; (4bb0 <sd_mmc_spi_start_write_blocks+0x74>)
    4b70:	6811      	ldr	r1, [r2, #0]
    4b72:	468c      	mov	ip, r1
    4b74:	4463      	add	r3, ip
    4b76:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    4b78:	4b0e      	ldr	r3, [pc, #56]	; (4bb4 <sd_mmc_spi_start_write_blocks+0x78>)
    4b7a:	4798      	blx	r3
    4b7c:	2800      	cmp	r0, #0
    4b7e:	d00a      	beq.n	4b96 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    4b80:	2c00      	cmp	r4, #0
    4b82:	d0e6      	beq.n	4b52 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    4b84:	4b0c      	ldr	r3, [pc, #48]	; (4bb8 <sd_mmc_spi_start_write_blocks+0x7c>)
    4b86:	4798      	blx	r3
    4b88:	2800      	cmp	r0, #0
    4b8a:	d1e2      	bne.n	4b52 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    4b8c:	2205      	movs	r2, #5
    4b8e:	4b03      	ldr	r3, [pc, #12]	; (4b9c <sd_mmc_spi_start_write_blocks+0x60>)
    4b90:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    4b92:	e000      	b.n	4b96 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    4b94:	2001      	movs	r0, #1
}
    4b96:	bc04      	pop	{r2}
    4b98:	4690      	mov	r8, r2
    4b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b9c:	2000028f 	.word	0x2000028f
    4ba0:	000044c1 	.word	0x000044c1
    4ba4:	20000288 	.word	0x20000288
    4ba8:	2000024c 	.word	0x2000024c
    4bac:	00003d29 	.word	0x00003d29
    4bb0:	20000298 	.word	0x20000298
    4bb4:	00004651 	.word	0x00004651
    4bb8:	00004509 	.word	0x00004509

00004bbc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    4bbc:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    4bbe:	4b05      	ldr	r3, [pc, #20]	; (4bd4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    4bc0:	4798      	blx	r3
    4bc2:	2800      	cmp	r0, #0
    4bc4:	d103      	bne.n	4bce <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    4bc6:	2205      	movs	r2, #5
    4bc8:	4b03      	ldr	r3, [pc, #12]	; (4bd8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    4bca:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    4bcc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    4bce:	4b03      	ldr	r3, [pc, #12]	; (4bdc <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    4bd0:	4798      	blx	r3
    4bd2:	e7fb      	b.n	4bcc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    4bd4:	00004509 	.word	0x00004509
    4bd8:	2000028f 	.word	0x2000028f
    4bdc:	0000456d 	.word	0x0000456d

00004be0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    4be0:	2002      	movs	r0, #2
    4be2:	4770      	bx	lr

00004be4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    4be4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4be6:	2301      	movs	r3, #1
    4be8:	2801      	cmp	r0, #1
    4bea:	d901      	bls.n	4bf0 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4bec:	0018      	movs	r0, r3
    4bee:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4bf0:	0140      	lsls	r0, r0, #5
    4bf2:	4b02      	ldr	r3, [pc, #8]	; (4bfc <mem_test_unit_ready+0x18>)
    4bf4:	58c3      	ldr	r3, [r0, r3]
    4bf6:	4798      	blx	r3
    4bf8:	0003      	movs	r3, r0
    4bfa:	e7f7      	b.n	4bec <mem_test_unit_ready+0x8>
    4bfc:	00005f20 	.word	0x00005f20

00004c00 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    4c00:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4c02:	2301      	movs	r3, #1
    4c04:	2801      	cmp	r0, #1
    4c06:	d901      	bls.n	4c0c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4c08:	0018      	movs	r0, r3
    4c0a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4c0c:	0140      	lsls	r0, r0, #5
    4c0e:	4b03      	ldr	r3, [pc, #12]	; (4c1c <mem_read_capacity+0x1c>)
    4c10:	1818      	adds	r0, r3, r0
    4c12:	6843      	ldr	r3, [r0, #4]
    4c14:	0008      	movs	r0, r1
    4c16:	4798      	blx	r3
    4c18:	0003      	movs	r3, r0
    4c1a:	e7f5      	b.n	4c08 <mem_read_capacity+0x8>
    4c1c:	00005f20 	.word	0x00005f20

00004c20 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    4c20:	b510      	push	{r4, lr}

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    4c22:	2300      	movs	r3, #0
    4c24:	2801      	cmp	r0, #1
    4c26:	d901      	bls.n	4c2c <mem_unload+0xc>
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    4c28:	0018      	movs	r0, r3
    4c2a:	bd10      	pop	{r4, pc}
              (lun_desc[lun].unload ?
    4c2c:	0140      	lsls	r0, r0, #5
    4c2e:	4b06      	ldr	r3, [pc, #24]	; (4c48 <mem_unload+0x28>)
    4c30:	1818      	adds	r0, r3, r0
    4c32:	6883      	ldr	r3, [r0, #8]
                  lun_desc[lun].unload(unload) : !unload) :
    4c34:	2b00      	cmp	r3, #0
    4c36:	d003      	beq.n	4c40 <mem_unload+0x20>
    4c38:	0008      	movs	r0, r1
    4c3a:	4798      	blx	r3
    4c3c:	0003      	movs	r3, r0
    4c3e:	e7f3      	b.n	4c28 <mem_unload+0x8>
              false; /* No mem, unload/load fail */
    4c40:	2301      	movs	r3, #1
    4c42:	404b      	eors	r3, r1
    4c44:	e7f0      	b.n	4c28 <mem_unload+0x8>
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	00005f20 	.word	0x00005f20

00004c4c <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    4c4c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    4c4e:	2301      	movs	r3, #1
    4c50:	2801      	cmp	r0, #1
    4c52:	d901      	bls.n	4c58 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    4c54:	0018      	movs	r0, r3
    4c56:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    4c58:	0140      	lsls	r0, r0, #5
    4c5a:	4b03      	ldr	r3, [pc, #12]	; (4c68 <mem_wr_protect+0x1c>)
    4c5c:	1818      	adds	r0, r3, r0
    4c5e:	68c3      	ldr	r3, [r0, #12]
    4c60:	4798      	blx	r3
    4c62:	0003      	movs	r3, r0
    4c64:	e7f6      	b.n	4c54 <mem_wr_protect+0x8>
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	00005f20 	.word	0x00005f20

00004c6c <mem_removal>:


bool mem_removal(U8 lun)
{
    4c6c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    4c6e:	2301      	movs	r3, #1
    4c70:	2801      	cmp	r0, #1
    4c72:	d901      	bls.n	4c78 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    4c74:	0018      	movs	r0, r3
    4c76:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    4c78:	0140      	lsls	r0, r0, #5
    4c7a:	4b03      	ldr	r3, [pc, #12]	; (4c88 <mem_removal+0x1c>)
    4c7c:	1818      	adds	r0, r3, r0
    4c7e:	6903      	ldr	r3, [r0, #16]
    4c80:	4798      	blx	r3
    4c82:	0003      	movs	r3, r0
    4c84:	e7f6      	b.n	4c74 <mem_removal+0x8>
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	00005f20 	.word	0x00005f20

00004c8c <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    4c8c:	2801      	cmp	r0, #1
    4c8e:	d804      	bhi.n	4c9a <mem_name+0xe>
    4c90:	0140      	lsls	r0, r0, #5
    4c92:	4b03      	ldr	r3, [pc, #12]	; (4ca0 <mem_name+0x14>)
    4c94:	1818      	adds	r0, r3, r0
    4c96:	69c0      	ldr	r0, [r0, #28]
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    4c98:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    4c9a:	2000      	movs	r0, #0
    4c9c:	e7fc      	b.n	4c98 <mem_name+0xc>
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	00005f20 	.word	0x00005f20

00004ca4 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    4ca4:	b510      	push	{r4, lr}
    4ca6:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    4ca8:	2301      	movs	r3, #1
    4caa:	2801      	cmp	r0, #1
    4cac:	d901      	bls.n	4cb2 <memory_2_usb+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    4cae:	0018      	movs	r0, r3
    4cb0:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    4cb2:	0140      	lsls	r0, r0, #5
    4cb4:	4b03      	ldr	r3, [pc, #12]	; (4cc4 <memory_2_usb+0x20>)
    4cb6:	1818      	adds	r0, r3, r0
    4cb8:	6943      	ldr	r3, [r0, #20]
    4cba:	0011      	movs	r1, r2
    4cbc:	0020      	movs	r0, r4
    4cbe:	4798      	blx	r3
    4cc0:	0003      	movs	r3, r0
    4cc2:	e7f4      	b.n	4cae <memory_2_usb+0xa>
    4cc4:	00005f20 	.word	0x00005f20

00004cc8 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    4cc8:	b510      	push	{r4, lr}
    4cca:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    4ccc:	2301      	movs	r3, #1
    4cce:	2801      	cmp	r0, #1
    4cd0:	d901      	bls.n	4cd6 <usb_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    4cd2:	0018      	movs	r0, r3
    4cd4:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    4cd6:	0140      	lsls	r0, r0, #5
    4cd8:	4b03      	ldr	r3, [pc, #12]	; (4ce8 <usb_2_memory+0x20>)
    4cda:	1818      	adds	r0, r3, r0
    4cdc:	6983      	ldr	r3, [r0, #24]
    4cde:	0011      	movs	r1, r2
    4ce0:	0020      	movs	r0, r4
    4ce2:	4798      	blx	r3
    4ce4:	0003      	movs	r3, r0
    4ce6:	e7f4      	b.n	4cd2 <usb_2_memory+0xa>
    4ce8:	00005f20 	.word	0x00005f20

00004cec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4cec:	4b0c      	ldr	r3, [pc, #48]	; (4d20 <cpu_irq_enter_critical+0x34>)
    4cee:	681b      	ldr	r3, [r3, #0]
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d106      	bne.n	4d02 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4cf4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d007      	beq.n	4d0c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4cfc:	2200      	movs	r2, #0
    4cfe:	4b09      	ldr	r3, [pc, #36]	; (4d24 <cpu_irq_enter_critical+0x38>)
    4d00:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4d02:	4a07      	ldr	r2, [pc, #28]	; (4d20 <cpu_irq_enter_critical+0x34>)
    4d04:	6813      	ldr	r3, [r2, #0]
    4d06:	3301      	adds	r3, #1
    4d08:	6013      	str	r3, [r2, #0]
}
    4d0a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4d0c:	b672      	cpsid	i
    4d0e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4d12:	2200      	movs	r2, #0
    4d14:	4b04      	ldr	r3, [pc, #16]	; (4d28 <cpu_irq_enter_critical+0x3c>)
    4d16:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4d18:	3201      	adds	r2, #1
    4d1a:	4b02      	ldr	r3, [pc, #8]	; (4d24 <cpu_irq_enter_critical+0x38>)
    4d1c:	701a      	strb	r2, [r3, #0]
    4d1e:	e7f0      	b.n	4d02 <cpu_irq_enter_critical+0x16>
    4d20:	200002a0 	.word	0x200002a0
    4d24:	200002a4 	.word	0x200002a4
    4d28:	20000115 	.word	0x20000115

00004d2c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4d2c:	4b08      	ldr	r3, [pc, #32]	; (4d50 <cpu_irq_leave_critical+0x24>)
    4d2e:	681a      	ldr	r2, [r3, #0]
    4d30:	3a01      	subs	r2, #1
    4d32:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4d34:	681b      	ldr	r3, [r3, #0]
    4d36:	2b00      	cmp	r3, #0
    4d38:	d109      	bne.n	4d4e <cpu_irq_leave_critical+0x22>
    4d3a:	4b06      	ldr	r3, [pc, #24]	; (4d54 <cpu_irq_leave_critical+0x28>)
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d005      	beq.n	4d4e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4d42:	2201      	movs	r2, #1
    4d44:	4b04      	ldr	r3, [pc, #16]	; (4d58 <cpu_irq_leave_critical+0x2c>)
    4d46:	701a      	strb	r2, [r3, #0]
    4d48:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4d4c:	b662      	cpsie	i
	}
}
    4d4e:	4770      	bx	lr
    4d50:	200002a0 	.word	0x200002a0
    4d54:	200002a4 	.word	0x200002a4
    4d58:	20000115 	.word	0x20000115

00004d5c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d5e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4d60:	ac01      	add	r4, sp, #4
    4d62:	2501      	movs	r5, #1
    4d64:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4d66:	2700      	movs	r7, #0
    4d68:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4d6a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4d6c:	0021      	movs	r1, r4
    4d6e:	203e      	movs	r0, #62	; 0x3e
    4d70:	4e06      	ldr	r6, [pc, #24]	; (4d8c <system_board_init+0x30>)
    4d72:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4d74:	2280      	movs	r2, #128	; 0x80
    4d76:	05d2      	lsls	r2, r2, #23
    4d78:	4b05      	ldr	r3, [pc, #20]	; (4d90 <system_board_init+0x34>)
    4d7a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4d7c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4d7e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4d80:	0021      	movs	r1, r4
    4d82:	200f      	movs	r0, #15
    4d84:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    4d86:	b003      	add	sp, #12
    4d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d8a:	46c0      	nop			; (mov r8, r8)
    4d8c:	00004d95 	.word	0x00004d95
    4d90:	41004480 	.word	0x41004480

00004d94 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4d94:	b500      	push	{lr}
    4d96:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4d98:	ab01      	add	r3, sp, #4
    4d9a:	2280      	movs	r2, #128	; 0x80
    4d9c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4d9e:	780a      	ldrb	r2, [r1, #0]
    4da0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4da2:	784a      	ldrb	r2, [r1, #1]
    4da4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4da6:	788a      	ldrb	r2, [r1, #2]
    4da8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4daa:	0019      	movs	r1, r3
    4dac:	4b01      	ldr	r3, [pc, #4]	; (4db4 <port_pin_set_config+0x20>)
    4dae:	4798      	blx	r3
}
    4db0:	b003      	add	sp, #12
    4db2:	bd00      	pop	{pc}
    4db4:	000053f9 	.word	0x000053f9

00004db8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4db8:	b510      	push	{r4, lr}
	switch (clock_source) {
    4dba:	2808      	cmp	r0, #8
    4dbc:	d803      	bhi.n	4dc6 <system_clock_source_get_hz+0xe>
    4dbe:	0080      	lsls	r0, r0, #2
    4dc0:	4b1e      	ldr	r3, [pc, #120]	; (4e3c <system_clock_source_get_hz+0x84>)
    4dc2:	581b      	ldr	r3, [r3, r0]
    4dc4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4dc6:	2000      	movs	r0, #0
    4dc8:	e036      	b.n	4e38 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    4dca:	4b1d      	ldr	r3, [pc, #116]	; (4e40 <system_clock_source_get_hz+0x88>)
    4dcc:	6918      	ldr	r0, [r3, #16]
    4dce:	e033      	b.n	4e38 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4dd0:	4b1c      	ldr	r3, [pc, #112]	; (4e44 <system_clock_source_get_hz+0x8c>)
    4dd2:	6a1b      	ldr	r3, [r3, #32]
    4dd4:	059b      	lsls	r3, r3, #22
    4dd6:	0f9b      	lsrs	r3, r3, #30
    4dd8:	481b      	ldr	r0, [pc, #108]	; (4e48 <system_clock_source_get_hz+0x90>)
    4dda:	40d8      	lsrs	r0, r3
    4ddc:	e02c      	b.n	4e38 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    4dde:	4b18      	ldr	r3, [pc, #96]	; (4e40 <system_clock_source_get_hz+0x88>)
    4de0:	6958      	ldr	r0, [r3, #20]
    4de2:	e029      	b.n	4e38 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4de4:	4b16      	ldr	r3, [pc, #88]	; (4e40 <system_clock_source_get_hz+0x88>)
    4de6:	681b      	ldr	r3, [r3, #0]
			return 0;
    4de8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4dea:	079b      	lsls	r3, r3, #30
    4dec:	d524      	bpl.n	4e38 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4dee:	4915      	ldr	r1, [pc, #84]	; (4e44 <system_clock_source_get_hz+0x8c>)
    4df0:	2210      	movs	r2, #16
    4df2:	68cb      	ldr	r3, [r1, #12]
    4df4:	421a      	tst	r2, r3
    4df6:	d0fc      	beq.n	4df2 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    4df8:	4b11      	ldr	r3, [pc, #68]	; (4e40 <system_clock_source_get_hz+0x88>)
    4dfa:	681b      	ldr	r3, [r3, #0]
    4dfc:	075b      	lsls	r3, r3, #29
    4dfe:	d401      	bmi.n	4e04 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    4e00:	4812      	ldr	r0, [pc, #72]	; (4e4c <system_clock_source_get_hz+0x94>)
    4e02:	e019      	b.n	4e38 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    4e04:	4b0e      	ldr	r3, [pc, #56]	; (4e40 <system_clock_source_get_hz+0x88>)
    4e06:	681b      	ldr	r3, [r3, #0]
    4e08:	069b      	lsls	r3, r3, #26
    4e0a:	d501      	bpl.n	4e10 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    4e0c:	480f      	ldr	r0, [pc, #60]	; (4e4c <system_clock_source_get_hz+0x94>)
    4e0e:	e013      	b.n	4e38 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4e10:	2000      	movs	r0, #0
    4e12:	4b0f      	ldr	r3, [pc, #60]	; (4e50 <system_clock_source_get_hz+0x98>)
    4e14:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4e16:	4b0a      	ldr	r3, [pc, #40]	; (4e40 <system_clock_source_get_hz+0x88>)
    4e18:	689b      	ldr	r3, [r3, #8]
    4e1a:	041b      	lsls	r3, r3, #16
    4e1c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4e1e:	4358      	muls	r0, r3
    4e20:	e00a      	b.n	4e38 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4e22:	2350      	movs	r3, #80	; 0x50
    4e24:	4a07      	ldr	r2, [pc, #28]	; (4e44 <system_clock_source_get_hz+0x8c>)
    4e26:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4e28:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4e2a:	075b      	lsls	r3, r3, #29
    4e2c:	d504      	bpl.n	4e38 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    4e2e:	4b04      	ldr	r3, [pc, #16]	; (4e40 <system_clock_source_get_hz+0x88>)
    4e30:	68d8      	ldr	r0, [r3, #12]
    4e32:	e001      	b.n	4e38 <system_clock_source_get_hz+0x80>
		return 32768UL;
    4e34:	2080      	movs	r0, #128	; 0x80
    4e36:	0200      	lsls	r0, r0, #8
	}
}
    4e38:	bd10      	pop	{r4, pc}
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	00005f90 	.word	0x00005f90
    4e40:	200002a8 	.word	0x200002a8
    4e44:	40000800 	.word	0x40000800
    4e48:	007a1200 	.word	0x007a1200
    4e4c:	02dc6c00 	.word	0x02dc6c00
    4e50:	0000531d 	.word	0x0000531d

00004e54 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4e54:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4e56:	490c      	ldr	r1, [pc, #48]	; (4e88 <system_clock_source_osc8m_set_config+0x34>)
    4e58:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4e5a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4e5c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4e5e:	7840      	ldrb	r0, [r0, #1]
    4e60:	2201      	movs	r2, #1
    4e62:	4010      	ands	r0, r2
    4e64:	0180      	lsls	r0, r0, #6
    4e66:	2640      	movs	r6, #64	; 0x40
    4e68:	43b3      	bics	r3, r6
    4e6a:	4303      	orrs	r3, r0
    4e6c:	402a      	ands	r2, r5
    4e6e:	01d2      	lsls	r2, r2, #7
    4e70:	2080      	movs	r0, #128	; 0x80
    4e72:	4383      	bics	r3, r0
    4e74:	4313      	orrs	r3, r2
    4e76:	2203      	movs	r2, #3
    4e78:	4022      	ands	r2, r4
    4e7a:	0212      	lsls	r2, r2, #8
    4e7c:	4803      	ldr	r0, [pc, #12]	; (4e8c <system_clock_source_osc8m_set_config+0x38>)
    4e7e:	4003      	ands	r3, r0
    4e80:	4313      	orrs	r3, r2
    4e82:	620b      	str	r3, [r1, #32]
}
    4e84:	bd70      	pop	{r4, r5, r6, pc}
    4e86:	46c0      	nop			; (mov r8, r8)
    4e88:	40000800 	.word	0x40000800
    4e8c:	fffffcff 	.word	0xfffffcff

00004e90 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4e90:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4e92:	7a03      	ldrb	r3, [r0, #8]
    4e94:	069b      	lsls	r3, r3, #26
    4e96:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4e98:	8942      	ldrh	r2, [r0, #10]
    4e9a:	0592      	lsls	r2, r2, #22
    4e9c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4e9e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4ea0:	4918      	ldr	r1, [pc, #96]	; (4f04 <system_clock_source_dfll_set_config+0x74>)
    4ea2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4ea4:	7983      	ldrb	r3, [r0, #6]
    4ea6:	79c2      	ldrb	r2, [r0, #7]
    4ea8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4eaa:	8842      	ldrh	r2, [r0, #2]
    4eac:	8884      	ldrh	r4, [r0, #4]
    4eae:	4322      	orrs	r2, r4
    4eb0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4eb2:	7842      	ldrb	r2, [r0, #1]
    4eb4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    4eb6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4eb8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4eba:	7803      	ldrb	r3, [r0, #0]
    4ebc:	2b04      	cmp	r3, #4
    4ebe:	d011      	beq.n	4ee4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4ec0:	2b20      	cmp	r3, #32
    4ec2:	d10e      	bne.n	4ee2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4ec4:	7b03      	ldrb	r3, [r0, #12]
    4ec6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4ec8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4eca:	4313      	orrs	r3, r2
    4ecc:	89c2      	ldrh	r2, [r0, #14]
    4ece:	0412      	lsls	r2, r2, #16
    4ed0:	490d      	ldr	r1, [pc, #52]	; (4f08 <system_clock_source_dfll_set_config+0x78>)
    4ed2:	400a      	ands	r2, r1
    4ed4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4ed6:	4a0b      	ldr	r2, [pc, #44]	; (4f04 <system_clock_source_dfll_set_config+0x74>)
    4ed8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4eda:	6811      	ldr	r1, [r2, #0]
    4edc:	4b0b      	ldr	r3, [pc, #44]	; (4f0c <system_clock_source_dfll_set_config+0x7c>)
    4ede:	430b      	orrs	r3, r1
    4ee0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4ee2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4ee4:	7b03      	ldrb	r3, [r0, #12]
    4ee6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4ee8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4eea:	4313      	orrs	r3, r2
    4eec:	89c2      	ldrh	r2, [r0, #14]
    4eee:	0412      	lsls	r2, r2, #16
    4ef0:	4905      	ldr	r1, [pc, #20]	; (4f08 <system_clock_source_dfll_set_config+0x78>)
    4ef2:	400a      	ands	r2, r1
    4ef4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4ef6:	4a03      	ldr	r2, [pc, #12]	; (4f04 <system_clock_source_dfll_set_config+0x74>)
    4ef8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4efa:	6813      	ldr	r3, [r2, #0]
    4efc:	2104      	movs	r1, #4
    4efe:	430b      	orrs	r3, r1
    4f00:	6013      	str	r3, [r2, #0]
    4f02:	e7ee      	b.n	4ee2 <system_clock_source_dfll_set_config+0x52>
    4f04:	200002a8 	.word	0x200002a8
    4f08:	03ff0000 	.word	0x03ff0000
    4f0c:	00000424 	.word	0x00000424

00004f10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4f10:	2808      	cmp	r0, #8
    4f12:	d803      	bhi.n	4f1c <system_clock_source_enable+0xc>
    4f14:	0080      	lsls	r0, r0, #2
    4f16:	4b25      	ldr	r3, [pc, #148]	; (4fac <system_clock_source_enable+0x9c>)
    4f18:	581b      	ldr	r3, [r3, r0]
    4f1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4f1c:	2017      	movs	r0, #23
    4f1e:	e044      	b.n	4faa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4f20:	4a23      	ldr	r2, [pc, #140]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f22:	6a13      	ldr	r3, [r2, #32]
    4f24:	2102      	movs	r1, #2
    4f26:	430b      	orrs	r3, r1
    4f28:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4f2a:	2000      	movs	r0, #0
    4f2c:	e03d      	b.n	4faa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4f2e:	4a20      	ldr	r2, [pc, #128]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f30:	6993      	ldr	r3, [r2, #24]
    4f32:	2102      	movs	r1, #2
    4f34:	430b      	orrs	r3, r1
    4f36:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4f38:	2000      	movs	r0, #0
		break;
    4f3a:	e036      	b.n	4faa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4f3c:	4a1c      	ldr	r2, [pc, #112]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f3e:	8a13      	ldrh	r3, [r2, #16]
    4f40:	2102      	movs	r1, #2
    4f42:	430b      	orrs	r3, r1
    4f44:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4f46:	2000      	movs	r0, #0
		break;
    4f48:	e02f      	b.n	4faa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4f4a:	4a19      	ldr	r2, [pc, #100]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f4c:	8a93      	ldrh	r3, [r2, #20]
    4f4e:	2102      	movs	r1, #2
    4f50:	430b      	orrs	r3, r1
    4f52:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4f54:	2000      	movs	r0, #0
		break;
    4f56:	e028      	b.n	4faa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4f58:	4916      	ldr	r1, [pc, #88]	; (4fb4 <system_clock_source_enable+0xa4>)
    4f5a:	680b      	ldr	r3, [r1, #0]
    4f5c:	2202      	movs	r2, #2
    4f5e:	4313      	orrs	r3, r2
    4f60:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4f62:	4b13      	ldr	r3, [pc, #76]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f64:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4f66:	0019      	movs	r1, r3
    4f68:	320e      	adds	r2, #14
    4f6a:	68cb      	ldr	r3, [r1, #12]
    4f6c:	421a      	tst	r2, r3
    4f6e:	d0fc      	beq.n	4f6a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4f70:	4a10      	ldr	r2, [pc, #64]	; (4fb4 <system_clock_source_enable+0xa4>)
    4f72:	6891      	ldr	r1, [r2, #8]
    4f74:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f76:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4f78:	6852      	ldr	r2, [r2, #4]
    4f7a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4f7c:	2200      	movs	r2, #0
    4f7e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4f80:	0019      	movs	r1, r3
    4f82:	3210      	adds	r2, #16
    4f84:	68cb      	ldr	r3, [r1, #12]
    4f86:	421a      	tst	r2, r3
    4f88:	d0fc      	beq.n	4f84 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4f8a:	4b0a      	ldr	r3, [pc, #40]	; (4fb4 <system_clock_source_enable+0xa4>)
    4f8c:	681b      	ldr	r3, [r3, #0]
    4f8e:	b29b      	uxth	r3, r3
    4f90:	4a07      	ldr	r2, [pc, #28]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f92:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4f94:	2000      	movs	r0, #0
    4f96:	e008      	b.n	4faa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4f98:	4905      	ldr	r1, [pc, #20]	; (4fb0 <system_clock_source_enable+0xa0>)
    4f9a:	2244      	movs	r2, #68	; 0x44
    4f9c:	5c8b      	ldrb	r3, [r1, r2]
    4f9e:	2002      	movs	r0, #2
    4fa0:	4303      	orrs	r3, r0
    4fa2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4fa4:	2000      	movs	r0, #0
		break;
    4fa6:	e000      	b.n	4faa <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4fa8:	2000      	movs	r0, #0
}
    4faa:	4770      	bx	lr
    4fac:	00005fb4 	.word	0x00005fb4
    4fb0:	40000800 	.word	0x40000800
    4fb4:	200002a8 	.word	0x200002a8

00004fb8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4fb8:	b570      	push	{r4, r5, r6, lr}
    4fba:	b08a      	sub	sp, #40	; 0x28
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4fbc:	22c2      	movs	r2, #194	; 0xc2
    4fbe:	00d2      	lsls	r2, r2, #3
    4fc0:	4b34      	ldr	r3, [pc, #208]	; (5094 <system_clock_init+0xdc>)
    4fc2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4fc4:	4a34      	ldr	r2, [pc, #208]	; (5098 <system_clock_init+0xe0>)
    4fc6:	6853      	ldr	r3, [r2, #4]
    4fc8:	211e      	movs	r1, #30
    4fca:	438b      	bics	r3, r1
    4fcc:	391a      	subs	r1, #26
    4fce:	430b      	orrs	r3, r1
    4fd0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4fd2:	2202      	movs	r2, #2
    4fd4:	ab01      	add	r3, sp, #4
    4fd6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4fd8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4fda:	4d30      	ldr	r5, [pc, #192]	; (509c <system_clock_init+0xe4>)
    4fdc:	b2e0      	uxtb	r0, r4
    4fde:	a901      	add	r1, sp, #4
    4fe0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4fe2:	3401      	adds	r4, #1
    4fe4:	2c25      	cmp	r4, #37	; 0x25
    4fe6:	d1f9      	bne.n	4fdc <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4fe8:	ab05      	add	r3, sp, #20
    4fea:	2200      	movs	r2, #0
    4fec:	2100      	movs	r1, #0
    4fee:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4ff0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4ff2:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4ff4:	3120      	adds	r1, #32
    4ff6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4ff8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4ffa:	4b29      	ldr	r3, [pc, #164]	; (50a0 <system_clock_init+0xe8>)
    4ffc:	681b      	ldr	r3, [r3, #0]
    4ffe:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5000:	2b3f      	cmp	r3, #63	; 0x3f
    5002:	d044      	beq.n	508e <system_clock_init+0xd6>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5004:	a805      	add	r0, sp, #20
    5006:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5008:	2303      	movs	r3, #3
    500a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    500c:	3307      	adds	r3, #7
    500e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    5010:	4b24      	ldr	r3, [pc, #144]	; (50a4 <system_clock_init+0xec>)
    5012:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    5014:	3bff      	subs	r3, #255	; 0xff
    5016:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    5018:	4b23      	ldr	r3, [pc, #140]	; (50a8 <system_clock_init+0xf0>)
    501a:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    501c:	4b23      	ldr	r3, [pc, #140]	; (50ac <system_clock_init+0xf4>)
    501e:	4798      	blx	r3
	config->run_in_standby  = false;
    5020:	a804      	add	r0, sp, #16
    5022:	2400      	movs	r4, #0
    5024:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    5026:	2501      	movs	r5, #1
    5028:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    502a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    502c:	4b20      	ldr	r3, [pc, #128]	; (50b0 <system_clock_init+0xf8>)
    502e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5030:	2006      	movs	r0, #6
    5032:	4e20      	ldr	r6, [pc, #128]	; (50b4 <system_clock_init+0xfc>)
    5034:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5036:	4b20      	ldr	r3, [pc, #128]	; (50b8 <system_clock_init+0x100>)
    5038:	4798      	blx	r3
	config->division_factor    = 1;
    503a:	a901      	add	r1, sp, #4
    503c:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    503e:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    5040:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5042:	2307      	movs	r3, #7
    5044:	700b      	strb	r3, [r1, #0]
    5046:	720d      	strb	r5, [r1, #8]
    5048:	2001      	movs	r0, #1
    504a:	4b1c      	ldr	r3, [pc, #112]	; (50bc <system_clock_init+0x104>)
    504c:	4798      	blx	r3
    504e:	2001      	movs	r0, #1
    5050:	4b1b      	ldr	r3, [pc, #108]	; (50c0 <system_clock_init+0x108>)
    5052:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5054:	2007      	movs	r0, #7
    5056:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5058:	490e      	ldr	r1, [pc, #56]	; (5094 <system_clock_init+0xdc>)
    505a:	2210      	movs	r2, #16
    505c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    505e:	421a      	tst	r2, r3
    5060:	d0fc      	beq.n	505c <system_clock_init+0xa4>
	PM->CPUSEL.reg = (uint32_t)divider;
    5062:	4a18      	ldr	r2, [pc, #96]	; (50c4 <system_clock_init+0x10c>)
    5064:	2300      	movs	r3, #0
    5066:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5068:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    506a:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    506c:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    506e:	a901      	add	r1, sp, #4
    5070:	2201      	movs	r2, #1
    5072:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5074:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    5076:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5078:	3307      	adds	r3, #7
    507a:	700b      	strb	r3, [r1, #0]
    507c:	720a      	strb	r2, [r1, #8]
    507e:	2000      	movs	r0, #0
    5080:	4b0e      	ldr	r3, [pc, #56]	; (50bc <system_clock_init+0x104>)
    5082:	4798      	blx	r3
    5084:	2000      	movs	r0, #0
    5086:	4b0e      	ldr	r3, [pc, #56]	; (50c0 <system_clock_init+0x108>)
    5088:	4798      	blx	r3
#endif
}
    508a:	b00a      	add	sp, #40	; 0x28
    508c:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    508e:	3b20      	subs	r3, #32
    5090:	e7b8      	b.n	5004 <system_clock_init+0x4c>
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	40000800 	.word	0x40000800
    5098:	41004000 	.word	0x41004000
    509c:	00005301 	.word	0x00005301
    50a0:	00806024 	.word	0x00806024
    50a4:	000001ff 	.word	0x000001ff
    50a8:	ffffbb80 	.word	0xffffbb80
    50ac:	00004e91 	.word	0x00004e91
    50b0:	00004e55 	.word	0x00004e55
    50b4:	00004f11 	.word	0x00004f11
    50b8:	000050c9 	.word	0x000050c9
    50bc:	000050ed 	.word	0x000050ed
    50c0:	000051a5 	.word	0x000051a5
    50c4:	40000400 	.word	0x40000400

000050c8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    50c8:	4a06      	ldr	r2, [pc, #24]	; (50e4 <system_gclk_init+0x1c>)
    50ca:	6993      	ldr	r3, [r2, #24]
    50cc:	2108      	movs	r1, #8
    50ce:	430b      	orrs	r3, r1
    50d0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    50d2:	2201      	movs	r2, #1
    50d4:	4b04      	ldr	r3, [pc, #16]	; (50e8 <system_gclk_init+0x20>)
    50d6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    50d8:	0019      	movs	r1, r3
    50da:	780b      	ldrb	r3, [r1, #0]
    50dc:	4213      	tst	r3, r2
    50de:	d1fc      	bne.n	50da <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    50e0:	4770      	bx	lr
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	40000400 	.word	0x40000400
    50e8:	40000c00 	.word	0x40000c00

000050ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    50ec:	b570      	push	{r4, r5, r6, lr}
    50ee:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    50f0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    50f2:	780d      	ldrb	r5, [r1, #0]
    50f4:	022d      	lsls	r5, r5, #8
    50f6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    50f8:	784b      	ldrb	r3, [r1, #1]
    50fa:	2b00      	cmp	r3, #0
    50fc:	d002      	beq.n	5104 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    50fe:	2380      	movs	r3, #128	; 0x80
    5100:	02db      	lsls	r3, r3, #11
    5102:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5104:	7a4b      	ldrb	r3, [r1, #9]
    5106:	2b00      	cmp	r3, #0
    5108:	d002      	beq.n	5110 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    510a:	2380      	movs	r3, #128	; 0x80
    510c:	031b      	lsls	r3, r3, #12
    510e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5110:	6848      	ldr	r0, [r1, #4]
    5112:	2801      	cmp	r0, #1
    5114:	d910      	bls.n	5138 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5116:	1e43      	subs	r3, r0, #1
    5118:	4218      	tst	r0, r3
    511a:	d134      	bne.n	5186 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    511c:	2802      	cmp	r0, #2
    511e:	d930      	bls.n	5182 <system_gclk_gen_set_config+0x96>
    5120:	2302      	movs	r3, #2
    5122:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5124:	3201      	adds	r2, #1
						mask <<= 1) {
    5126:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5128:	4298      	cmp	r0, r3
    512a:	d8fb      	bhi.n	5124 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    512c:	0212      	lsls	r2, r2, #8
    512e:	4332      	orrs	r2, r6
    5130:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5132:	2380      	movs	r3, #128	; 0x80
    5134:	035b      	lsls	r3, r3, #13
    5136:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5138:	7a0b      	ldrb	r3, [r1, #8]
    513a:	2b00      	cmp	r3, #0
    513c:	d002      	beq.n	5144 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    513e:	2380      	movs	r3, #128	; 0x80
    5140:	039b      	lsls	r3, r3, #14
    5142:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5144:	4a13      	ldr	r2, [pc, #76]	; (5194 <system_gclk_gen_set_config+0xa8>)
    5146:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5148:	b25b      	sxtb	r3, r3
    514a:	2b00      	cmp	r3, #0
    514c:	dbfb      	blt.n	5146 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    514e:	4b12      	ldr	r3, [pc, #72]	; (5198 <system_gclk_gen_set_config+0xac>)
    5150:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5152:	4b12      	ldr	r3, [pc, #72]	; (519c <system_gclk_gen_set_config+0xb0>)
    5154:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5156:	4a0f      	ldr	r2, [pc, #60]	; (5194 <system_gclk_gen_set_config+0xa8>)
    5158:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    515a:	b25b      	sxtb	r3, r3
    515c:	2b00      	cmp	r3, #0
    515e:	dbfb      	blt.n	5158 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5160:	4b0c      	ldr	r3, [pc, #48]	; (5194 <system_gclk_gen_set_config+0xa8>)
    5162:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5164:	001a      	movs	r2, r3
    5166:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5168:	b25b      	sxtb	r3, r3
    516a:	2b00      	cmp	r3, #0
    516c:	dbfb      	blt.n	5166 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    516e:	4a09      	ldr	r2, [pc, #36]	; (5194 <system_gclk_gen_set_config+0xa8>)
    5170:	6853      	ldr	r3, [r2, #4]
    5172:	2180      	movs	r1, #128	; 0x80
    5174:	0249      	lsls	r1, r1, #9
    5176:	400b      	ands	r3, r1
    5178:	431d      	orrs	r5, r3
    517a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    517c:	4b08      	ldr	r3, [pc, #32]	; (51a0 <system_gclk_gen_set_config+0xb4>)
    517e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5180:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5182:	2200      	movs	r2, #0
    5184:	e7d2      	b.n	512c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5186:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5188:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    518a:	2380      	movs	r3, #128	; 0x80
    518c:	029b      	lsls	r3, r3, #10
    518e:	431d      	orrs	r5, r3
    5190:	e7d2      	b.n	5138 <system_gclk_gen_set_config+0x4c>
    5192:	46c0      	nop			; (mov r8, r8)
    5194:	40000c00 	.word	0x40000c00
    5198:	00004ced 	.word	0x00004ced
    519c:	40000c08 	.word	0x40000c08
    51a0:	00004d2d 	.word	0x00004d2d

000051a4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    51a4:	b510      	push	{r4, lr}
    51a6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51a8:	4a0b      	ldr	r2, [pc, #44]	; (51d8 <system_gclk_gen_enable+0x34>)
    51aa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    51ac:	b25b      	sxtb	r3, r3
    51ae:	2b00      	cmp	r3, #0
    51b0:	dbfb      	blt.n	51aa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    51b2:	4b0a      	ldr	r3, [pc, #40]	; (51dc <system_gclk_gen_enable+0x38>)
    51b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    51b6:	4b0a      	ldr	r3, [pc, #40]	; (51e0 <system_gclk_gen_enable+0x3c>)
    51b8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51ba:	4a07      	ldr	r2, [pc, #28]	; (51d8 <system_gclk_gen_enable+0x34>)
    51bc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    51be:	b25b      	sxtb	r3, r3
    51c0:	2b00      	cmp	r3, #0
    51c2:	dbfb      	blt.n	51bc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    51c4:	4a04      	ldr	r2, [pc, #16]	; (51d8 <system_gclk_gen_enable+0x34>)
    51c6:	6851      	ldr	r1, [r2, #4]
    51c8:	2380      	movs	r3, #128	; 0x80
    51ca:	025b      	lsls	r3, r3, #9
    51cc:	430b      	orrs	r3, r1
    51ce:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    51d0:	4b04      	ldr	r3, [pc, #16]	; (51e4 <system_gclk_gen_enable+0x40>)
    51d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    51d4:	bd10      	pop	{r4, pc}
    51d6:	46c0      	nop			; (mov r8, r8)
    51d8:	40000c00 	.word	0x40000c00
    51dc:	00004ced 	.word	0x00004ced
    51e0:	40000c04 	.word	0x40000c04
    51e4:	00004d2d 	.word	0x00004d2d

000051e8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    51e8:	b570      	push	{r4, r5, r6, lr}
    51ea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51ec:	4a1a      	ldr	r2, [pc, #104]	; (5258 <system_gclk_gen_get_hz+0x70>)
    51ee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    51f0:	b25b      	sxtb	r3, r3
    51f2:	2b00      	cmp	r3, #0
    51f4:	dbfb      	blt.n	51ee <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    51f6:	4b19      	ldr	r3, [pc, #100]	; (525c <system_gclk_gen_get_hz+0x74>)
    51f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    51fa:	4b19      	ldr	r3, [pc, #100]	; (5260 <system_gclk_gen_get_hz+0x78>)
    51fc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51fe:	4a16      	ldr	r2, [pc, #88]	; (5258 <system_gclk_gen_get_hz+0x70>)
    5200:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5202:	b25b      	sxtb	r3, r3
    5204:	2b00      	cmp	r3, #0
    5206:	dbfb      	blt.n	5200 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5208:	4e13      	ldr	r6, [pc, #76]	; (5258 <system_gclk_gen_get_hz+0x70>)
    520a:	6870      	ldr	r0, [r6, #4]
    520c:	04c0      	lsls	r0, r0, #19
    520e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5210:	4b14      	ldr	r3, [pc, #80]	; (5264 <system_gclk_gen_get_hz+0x7c>)
    5212:	4798      	blx	r3
    5214:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5216:	4b12      	ldr	r3, [pc, #72]	; (5260 <system_gclk_gen_get_hz+0x78>)
    5218:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    521a:	6876      	ldr	r6, [r6, #4]
    521c:	02f6      	lsls	r6, r6, #11
    521e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5220:	4b11      	ldr	r3, [pc, #68]	; (5268 <system_gclk_gen_get_hz+0x80>)
    5222:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5224:	4a0c      	ldr	r2, [pc, #48]	; (5258 <system_gclk_gen_get_hz+0x70>)
    5226:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5228:	b25b      	sxtb	r3, r3
    522a:	2b00      	cmp	r3, #0
    522c:	dbfb      	blt.n	5226 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    522e:	4b0a      	ldr	r3, [pc, #40]	; (5258 <system_gclk_gen_get_hz+0x70>)
    5230:	689c      	ldr	r4, [r3, #8]
    5232:	0224      	lsls	r4, r4, #8
    5234:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5236:	4b0d      	ldr	r3, [pc, #52]	; (526c <system_gclk_gen_get_hz+0x84>)
    5238:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    523a:	2e00      	cmp	r6, #0
    523c:	d107      	bne.n	524e <system_gclk_gen_get_hz+0x66>
    523e:	2c01      	cmp	r4, #1
    5240:	d907      	bls.n	5252 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5242:	0021      	movs	r1, r4
    5244:	0028      	movs	r0, r5
    5246:	4b0a      	ldr	r3, [pc, #40]	; (5270 <system_gclk_gen_get_hz+0x88>)
    5248:	4798      	blx	r3
    524a:	0005      	movs	r5, r0
    524c:	e001      	b.n	5252 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    524e:	3401      	adds	r4, #1
    5250:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5252:	0028      	movs	r0, r5
    5254:	bd70      	pop	{r4, r5, r6, pc}
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	40000c00 	.word	0x40000c00
    525c:	00004ced 	.word	0x00004ced
    5260:	40000c04 	.word	0x40000c04
    5264:	00004db9 	.word	0x00004db9
    5268:	40000c08 	.word	0x40000c08
    526c:	00004d2d 	.word	0x00004d2d
    5270:	000056d1 	.word	0x000056d1

00005274 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5274:	b510      	push	{r4, lr}
    5276:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5278:	4b06      	ldr	r3, [pc, #24]	; (5294 <system_gclk_chan_enable+0x20>)
    527a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    527c:	4b06      	ldr	r3, [pc, #24]	; (5298 <system_gclk_chan_enable+0x24>)
    527e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5280:	4a06      	ldr	r2, [pc, #24]	; (529c <system_gclk_chan_enable+0x28>)
    5282:	8853      	ldrh	r3, [r2, #2]
    5284:	2180      	movs	r1, #128	; 0x80
    5286:	01c9      	lsls	r1, r1, #7
    5288:	430b      	orrs	r3, r1
    528a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    528c:	4b04      	ldr	r3, [pc, #16]	; (52a0 <system_gclk_chan_enable+0x2c>)
    528e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5290:	bd10      	pop	{r4, pc}
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	00004ced 	.word	0x00004ced
    5298:	40000c02 	.word	0x40000c02
    529c:	40000c00 	.word	0x40000c00
    52a0:	00004d2d 	.word	0x00004d2d

000052a4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    52a4:	b510      	push	{r4, lr}
    52a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    52a8:	4b0f      	ldr	r3, [pc, #60]	; (52e8 <system_gclk_chan_disable+0x44>)
    52aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    52ac:	4b0f      	ldr	r3, [pc, #60]	; (52ec <system_gclk_chan_disable+0x48>)
    52ae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    52b0:	4a0f      	ldr	r2, [pc, #60]	; (52f0 <system_gclk_chan_disable+0x4c>)
    52b2:	8853      	ldrh	r3, [r2, #2]
    52b4:	051b      	lsls	r3, r3, #20
    52b6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    52b8:	8853      	ldrh	r3, [r2, #2]
    52ba:	490e      	ldr	r1, [pc, #56]	; (52f4 <system_gclk_chan_disable+0x50>)
    52bc:	400b      	ands	r3, r1
    52be:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    52c0:	8853      	ldrh	r3, [r2, #2]
    52c2:	490d      	ldr	r1, [pc, #52]	; (52f8 <system_gclk_chan_disable+0x54>)
    52c4:	400b      	ands	r3, r1
    52c6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    52c8:	0011      	movs	r1, r2
    52ca:	2280      	movs	r2, #128	; 0x80
    52cc:	01d2      	lsls	r2, r2, #7
    52ce:	884b      	ldrh	r3, [r1, #2]
    52d0:	4213      	tst	r3, r2
    52d2:	d1fc      	bne.n	52ce <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    52d4:	4906      	ldr	r1, [pc, #24]	; (52f0 <system_gclk_chan_disable+0x4c>)
    52d6:	884a      	ldrh	r2, [r1, #2]
    52d8:	0203      	lsls	r3, r0, #8
    52da:	4806      	ldr	r0, [pc, #24]	; (52f4 <system_gclk_chan_disable+0x50>)
    52dc:	4002      	ands	r2, r0
    52de:	4313      	orrs	r3, r2
    52e0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    52e2:	4b06      	ldr	r3, [pc, #24]	; (52fc <system_gclk_chan_disable+0x58>)
    52e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    52e6:	bd10      	pop	{r4, pc}
    52e8:	00004ced 	.word	0x00004ced
    52ec:	40000c02 	.word	0x40000c02
    52f0:	40000c00 	.word	0x40000c00
    52f4:	fffff0ff 	.word	0xfffff0ff
    52f8:	ffffbfff 	.word	0xffffbfff
    52fc:	00004d2d 	.word	0x00004d2d

00005300 <system_gclk_chan_set_config>:
{
    5300:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5302:	780c      	ldrb	r4, [r1, #0]
    5304:	0224      	lsls	r4, r4, #8
    5306:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5308:	4b02      	ldr	r3, [pc, #8]	; (5314 <system_gclk_chan_set_config+0x14>)
    530a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    530c:	b2a4      	uxth	r4, r4
    530e:	4b02      	ldr	r3, [pc, #8]	; (5318 <system_gclk_chan_set_config+0x18>)
    5310:	805c      	strh	r4, [r3, #2]
}
    5312:	bd10      	pop	{r4, pc}
    5314:	000052a5 	.word	0x000052a5
    5318:	40000c00 	.word	0x40000c00

0000531c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    531c:	b510      	push	{r4, lr}
    531e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5320:	4b06      	ldr	r3, [pc, #24]	; (533c <system_gclk_chan_get_hz+0x20>)
    5322:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5324:	4b06      	ldr	r3, [pc, #24]	; (5340 <system_gclk_chan_get_hz+0x24>)
    5326:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5328:	4b06      	ldr	r3, [pc, #24]	; (5344 <system_gclk_chan_get_hz+0x28>)
    532a:	885c      	ldrh	r4, [r3, #2]
    532c:	0524      	lsls	r4, r4, #20
    532e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5330:	4b05      	ldr	r3, [pc, #20]	; (5348 <system_gclk_chan_get_hz+0x2c>)
    5332:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5334:	0020      	movs	r0, r4
    5336:	4b05      	ldr	r3, [pc, #20]	; (534c <system_gclk_chan_get_hz+0x30>)
    5338:	4798      	blx	r3
}
    533a:	bd10      	pop	{r4, pc}
    533c:	00004ced 	.word	0x00004ced
    5340:	40000c02 	.word	0x40000c02
    5344:	40000c00 	.word	0x40000c00
    5348:	00004d2d 	.word	0x00004d2d
    534c:	000051e9 	.word	0x000051e9

00005350 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5350:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5352:	78d3      	ldrb	r3, [r2, #3]
    5354:	2b00      	cmp	r3, #0
    5356:	d135      	bne.n	53c4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5358:	7813      	ldrb	r3, [r2, #0]
    535a:	2b80      	cmp	r3, #128	; 0x80
    535c:	d029      	beq.n	53b2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    535e:	061b      	lsls	r3, r3, #24
    5360:	2480      	movs	r4, #128	; 0x80
    5362:	0264      	lsls	r4, r4, #9
    5364:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5366:	7854      	ldrb	r4, [r2, #1]
    5368:	2502      	movs	r5, #2
    536a:	43ac      	bics	r4, r5
    536c:	d106      	bne.n	537c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    536e:	7894      	ldrb	r4, [r2, #2]
    5370:	2c00      	cmp	r4, #0
    5372:	d120      	bne.n	53b6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5374:	2480      	movs	r4, #128	; 0x80
    5376:	02a4      	lsls	r4, r4, #10
    5378:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    537a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    537c:	7854      	ldrb	r4, [r2, #1]
    537e:	3c01      	subs	r4, #1
    5380:	2c01      	cmp	r4, #1
    5382:	d91c      	bls.n	53be <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5384:	040d      	lsls	r5, r1, #16
    5386:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5388:	24a0      	movs	r4, #160	; 0xa0
    538a:	05e4      	lsls	r4, r4, #23
    538c:	432c      	orrs	r4, r5
    538e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5390:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5392:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5394:	24d0      	movs	r4, #208	; 0xd0
    5396:	0624      	lsls	r4, r4, #24
    5398:	432c      	orrs	r4, r5
    539a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    539c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    539e:	78d4      	ldrb	r4, [r2, #3]
    53a0:	2c00      	cmp	r4, #0
    53a2:	d122      	bne.n	53ea <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    53a4:	035b      	lsls	r3, r3, #13
    53a6:	d51c      	bpl.n	53e2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    53a8:	7893      	ldrb	r3, [r2, #2]
    53aa:	2b01      	cmp	r3, #1
    53ac:	d01e      	beq.n	53ec <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    53ae:	6141      	str	r1, [r0, #20]
    53b0:	e017      	b.n	53e2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    53b2:	2300      	movs	r3, #0
    53b4:	e7d7      	b.n	5366 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    53b6:	24c0      	movs	r4, #192	; 0xc0
    53b8:	02e4      	lsls	r4, r4, #11
    53ba:	4323      	orrs	r3, r4
    53bc:	e7dd      	b.n	537a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    53be:	4c0d      	ldr	r4, [pc, #52]	; (53f4 <_system_pinmux_config+0xa4>)
    53c0:	4023      	ands	r3, r4
    53c2:	e7df      	b.n	5384 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    53c4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    53c6:	040c      	lsls	r4, r1, #16
    53c8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    53ca:	23a0      	movs	r3, #160	; 0xa0
    53cc:	05db      	lsls	r3, r3, #23
    53ce:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    53d0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    53d2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    53d4:	23d0      	movs	r3, #208	; 0xd0
    53d6:	061b      	lsls	r3, r3, #24
    53d8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    53da:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    53dc:	78d3      	ldrb	r3, [r2, #3]
    53de:	2b00      	cmp	r3, #0
    53e0:	d103      	bne.n	53ea <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    53e2:	7853      	ldrb	r3, [r2, #1]
    53e4:	3b01      	subs	r3, #1
    53e6:	2b01      	cmp	r3, #1
    53e8:	d902      	bls.n	53f0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    53ea:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    53ec:	6181      	str	r1, [r0, #24]
    53ee:	e7f8      	b.n	53e2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    53f0:	6081      	str	r1, [r0, #8]
}
    53f2:	e7fa      	b.n	53ea <_system_pinmux_config+0x9a>
    53f4:	fffbffff 	.word	0xfffbffff

000053f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    53f8:	b510      	push	{r4, lr}
    53fa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    53fc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    53fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5400:	2900      	cmp	r1, #0
    5402:	d104      	bne.n	540e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5404:	0943      	lsrs	r3, r0, #5
    5406:	01db      	lsls	r3, r3, #7
    5408:	4905      	ldr	r1, [pc, #20]	; (5420 <system_pinmux_pin_set_config+0x28>)
    540a:	468c      	mov	ip, r1
    540c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    540e:	241f      	movs	r4, #31
    5410:	4020      	ands	r0, r4
    5412:	2101      	movs	r1, #1
    5414:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5416:	0018      	movs	r0, r3
    5418:	4b02      	ldr	r3, [pc, #8]	; (5424 <system_pinmux_pin_set_config+0x2c>)
    541a:	4798      	blx	r3
}
    541c:	bd10      	pop	{r4, pc}
    541e:	46c0      	nop			; (mov r8, r8)
    5420:	41004400 	.word	0x41004400
    5424:	00005351 	.word	0x00005351

00005428 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5428:	4770      	bx	lr
	...

0000542c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    542c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    542e:	4b05      	ldr	r3, [pc, #20]	; (5444 <system_init+0x18>)
    5430:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5432:	4b05      	ldr	r3, [pc, #20]	; (5448 <system_init+0x1c>)
    5434:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5436:	4b05      	ldr	r3, [pc, #20]	; (544c <system_init+0x20>)
    5438:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    543a:	4b05      	ldr	r3, [pc, #20]	; (5450 <system_init+0x24>)
    543c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    543e:	4b05      	ldr	r3, [pc, #20]	; (5454 <system_init+0x28>)
    5440:	4798      	blx	r3
}
    5442:	bd10      	pop	{r4, pc}
    5444:	00004fb9 	.word	0x00004fb9
    5448:	00004d5d 	.word	0x00004d5d
    544c:	00005429 	.word	0x00005429
    5450:	000019c9 	.word	0x000019c9
    5454:	00005429 	.word	0x00005429

00005458 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5458:	e7fe      	b.n	5458 <Dummy_Handler>
	...

0000545c <Reset_Handler>:
{
    545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    545e:	4a2a      	ldr	r2, [pc, #168]	; (5508 <Reset_Handler+0xac>)
    5460:	4b2a      	ldr	r3, [pc, #168]	; (550c <Reset_Handler+0xb0>)
    5462:	429a      	cmp	r2, r3
    5464:	d011      	beq.n	548a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5466:	001a      	movs	r2, r3
    5468:	4b29      	ldr	r3, [pc, #164]	; (5510 <Reset_Handler+0xb4>)
    546a:	429a      	cmp	r2, r3
    546c:	d20d      	bcs.n	548a <Reset_Handler+0x2e>
    546e:	4a29      	ldr	r2, [pc, #164]	; (5514 <Reset_Handler+0xb8>)
    5470:	3303      	adds	r3, #3
    5472:	1a9b      	subs	r3, r3, r2
    5474:	089b      	lsrs	r3, r3, #2
    5476:	3301      	adds	r3, #1
    5478:	009b      	lsls	r3, r3, #2
    547a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    547c:	4823      	ldr	r0, [pc, #140]	; (550c <Reset_Handler+0xb0>)
    547e:	4922      	ldr	r1, [pc, #136]	; (5508 <Reset_Handler+0xac>)
    5480:	588c      	ldr	r4, [r1, r2]
    5482:	5084      	str	r4, [r0, r2]
    5484:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5486:	429a      	cmp	r2, r3
    5488:	d1fa      	bne.n	5480 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    548a:	4a23      	ldr	r2, [pc, #140]	; (5518 <Reset_Handler+0xbc>)
    548c:	4b23      	ldr	r3, [pc, #140]	; (551c <Reset_Handler+0xc0>)
    548e:	429a      	cmp	r2, r3
    5490:	d20a      	bcs.n	54a8 <Reset_Handler+0x4c>
    5492:	43d3      	mvns	r3, r2
    5494:	4921      	ldr	r1, [pc, #132]	; (551c <Reset_Handler+0xc0>)
    5496:	185b      	adds	r3, r3, r1
    5498:	2103      	movs	r1, #3
    549a:	438b      	bics	r3, r1
    549c:	3304      	adds	r3, #4
    549e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    54a0:	2100      	movs	r1, #0
    54a2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    54a4:	4293      	cmp	r3, r2
    54a6:	d1fc      	bne.n	54a2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    54a8:	4a1d      	ldr	r2, [pc, #116]	; (5520 <Reset_Handler+0xc4>)
    54aa:	21ff      	movs	r1, #255	; 0xff
    54ac:	4b1d      	ldr	r3, [pc, #116]	; (5524 <Reset_Handler+0xc8>)
    54ae:	438b      	bics	r3, r1
    54b0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    54b2:	39fd      	subs	r1, #253	; 0xfd
    54b4:	2390      	movs	r3, #144	; 0x90
    54b6:	005b      	lsls	r3, r3, #1
    54b8:	4a1b      	ldr	r2, [pc, #108]	; (5528 <Reset_Handler+0xcc>)
    54ba:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    54bc:	4a1b      	ldr	r2, [pc, #108]	; (552c <Reset_Handler+0xd0>)
    54be:	78d3      	ldrb	r3, [r2, #3]
    54c0:	2503      	movs	r5, #3
    54c2:	43ab      	bics	r3, r5
    54c4:	2402      	movs	r4, #2
    54c6:	4323      	orrs	r3, r4
    54c8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    54ca:	78d3      	ldrb	r3, [r2, #3]
    54cc:	270c      	movs	r7, #12
    54ce:	43bb      	bics	r3, r7
    54d0:	2608      	movs	r6, #8
    54d2:	4333      	orrs	r3, r6
    54d4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    54d6:	4b16      	ldr	r3, [pc, #88]	; (5530 <Reset_Handler+0xd4>)
    54d8:	7b98      	ldrb	r0, [r3, #14]
    54da:	2230      	movs	r2, #48	; 0x30
    54dc:	4390      	bics	r0, r2
    54de:	2220      	movs	r2, #32
    54e0:	4310      	orrs	r0, r2
    54e2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    54e4:	7b99      	ldrb	r1, [r3, #14]
    54e6:	43b9      	bics	r1, r7
    54e8:	4331      	orrs	r1, r6
    54ea:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    54ec:	7b9a      	ldrb	r2, [r3, #14]
    54ee:	43aa      	bics	r2, r5
    54f0:	4322      	orrs	r2, r4
    54f2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    54f4:	4a0f      	ldr	r2, [pc, #60]	; (5534 <Reset_Handler+0xd8>)
    54f6:	6853      	ldr	r3, [r2, #4]
    54f8:	2180      	movs	r1, #128	; 0x80
    54fa:	430b      	orrs	r3, r1
    54fc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    54fe:	4b0e      	ldr	r3, [pc, #56]	; (5538 <Reset_Handler+0xdc>)
    5500:	4798      	blx	r3
        main();
    5502:	4b0e      	ldr	r3, [pc, #56]	; (553c <Reset_Handler+0xe0>)
    5504:	4798      	blx	r3
    5506:	e7fe      	b.n	5506 <Reset_Handler+0xaa>
    5508:	00006000 	.word	0x00006000
    550c:	20000000 	.word	0x20000000
    5510:	20000118 	.word	0x20000118
    5514:	20000004 	.word	0x20000004
    5518:	20000118 	.word	0x20000118
    551c:	20000a68 	.word	0x20000a68
    5520:	e000ed00 	.word	0xe000ed00
    5524:	00000000 	.word	0x00000000
    5528:	41007000 	.word	0x41007000
    552c:	41005000 	.word	0x41005000
    5530:	41004800 	.word	0x41004800
    5534:	41004000 	.word	0x41004000
    5538:	00005c65 	.word	0x00005c65
    553c:	00005541 	.word	0x00005541

00005540 <main>:
#include "conf_usb.h"

static volatile bool main_b_msc_enable = false;

int main (void)
{
    5540:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    5542:	2101      	movs	r1, #1
    5544:	4b57      	ldr	r3, [pc, #348]	; (56a4 <main+0x164>)
    5546:	7019      	strb	r1, [r3, #0]
    5548:	f3bf 8f5f 	dmb	sy
    554c:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    554e:	4b56      	ldr	r3, [pc, #344]	; (56a8 <main+0x168>)
    5550:	2200      	movs	r2, #0
    5552:	701a      	strb	r2, [r3, #0]
    5554:	705a      	strb	r2, [r3, #1]
    5556:	709a      	strb	r2, [r3, #2]
    5558:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    555a:	7119      	strb	r1, [r3, #4]
	
	sleepmgr_init();
	system_init();
    555c:	4b53      	ldr	r3, [pc, #332]	; (56ac <main+0x16c>)
    555e:	4798      	blx	r3
	sd_mmc_init();
    5560:	4b53      	ldr	r3, [pc, #332]	; (56b0 <main+0x170>)
    5562:	4798      	blx	r3
	udc_start();
    5564:	4b53      	ldr	r3, [pc, #332]	; (56b4 <main+0x174>)
    5566:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		if(main_b_msc_enable) {
    5568:	4c53      	ldr	r4, [pc, #332]	; (56b8 <main+0x178>)
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    556a:	4e4e      	ldr	r6, [pc, #312]	; (56a4 <main+0x164>)
	while (!(*lock_ptr)) {
    556c:	4d4e      	ldr	r5, [pc, #312]	; (56a8 <main+0x168>)
    556e:	e057      	b.n	5620 <main+0xe0>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    5570:	0019      	movs	r1, r3
		lock_ptr++;
    5572:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    5574:	1c4b      	adds	r3, r1, #1
    5576:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    5578:	7810      	ldrb	r0, [r2, #0]
    557a:	2800      	cmp	r0, #0
    557c:	d0f8      	beq.n	5570 <main+0x30>

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    557e:	2b00      	cmp	r3, #0
    5580:	d106      	bne.n	5590 <main+0x50>
		cpu_irq_enable();
    5582:	2201      	movs	r2, #1
    5584:	4b47      	ldr	r3, [pc, #284]	; (56a4 <main+0x164>)
    5586:	701a      	strb	r2, [r3, #0]
    5588:	f3bf 8f5f 	dmb	sy
    558c:	b662      	cpsie	i
    558e:	e047      	b.n	5620 <main+0xe0>
  __ASM volatile ("cpsid i" : : : "memory");
    5590:	b672      	cpsid	i
    5592:	f3bf 8f5f 	dmb	sy

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    5596:	2200      	movs	r2, #0
    5598:	4b42      	ldr	r3, [pc, #264]	; (56a4 <main+0x164>)
    559a:	701a      	strb	r2, [r3, #0]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    559c:	4b47      	ldr	r3, [pc, #284]	; (56bc <main+0x17c>)
    559e:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    55a0:	051b      	lsls	r3, r3, #20
    55a2:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    55a4:	2b02      	cmp	r3, #2
    55a6:	d805      	bhi.n	55b4 <main+0x74>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    55a8:	4a45      	ldr	r2, [pc, #276]	; (56c0 <main+0x180>)
    55aa:	6850      	ldr	r0, [r2, #4]
    55ac:	23c0      	movs	r3, #192	; 0xc0
    55ae:	009b      	lsls	r3, r3, #2
    55b0:	4303      	orrs	r3, r0
    55b2:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    55b4:	2902      	cmp	r1, #2
    55b6:	d90b      	bls.n	55d0 <main+0x90>
    55b8:	2903      	cmp	r1, #3
    55ba:	d011      	beq.n	55e0 <main+0xa0>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    55bc:	2201      	movs	r2, #1
    55be:	4b39      	ldr	r3, [pc, #228]	; (56a4 <main+0x164>)
    55c0:	701a      	strb	r2, [r3, #0]
    55c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    55c6:	b662      	cpsie	i
  __ASM volatile ("dsb");
    55c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    55cc:	bf30      	wfi
    55ce:	e027      	b.n	5620 <main+0xe0>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    55d0:	4a3c      	ldr	r2, [pc, #240]	; (56c4 <main+0x184>)
    55d2:	6913      	ldr	r3, [r2, #16]
    55d4:	2004      	movs	r0, #4
    55d6:	4383      	bics	r3, r0
    55d8:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    55da:	4b3b      	ldr	r3, [pc, #236]	; (56c8 <main+0x188>)
    55dc:	7059      	strb	r1, [r3, #1]
    55de:	e7ed      	b.n	55bc <main+0x7c>
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    55e0:	4a38      	ldr	r2, [pc, #224]	; (56c4 <main+0x184>)
    55e2:	6913      	ldr	r3, [r2, #16]
    55e4:	2104      	movs	r1, #4
    55e6:	430b      	orrs	r3, r1
    55e8:	6113      	str	r3, [r2, #16]
    55ea:	e7e7      	b.n	55bc <main+0x7c>
  __ASM volatile ("cpsid i" : : : "memory");
    55ec:	b672      	cpsid	i
  __ASM volatile ("dmb");
    55ee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    55f2:	2300      	movs	r3, #0
    55f4:	7033      	strb	r3, [r6, #0]
	while (!(*lock_ptr)) {
    55f6:	782b      	ldrb	r3, [r5, #0]
    55f8:	2b00      	cmp	r3, #0
    55fa:	d10b      	bne.n	5614 <main+0xd4>
    55fc:	2100      	movs	r1, #0
    55fe:	4a2a      	ldr	r2, [pc, #168]	; (56a8 <main+0x168>)
    5600:	e000      	b.n	5604 <main+0xc4>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    5602:	0019      	movs	r1, r3
		lock_ptr++;
    5604:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    5606:	1c4b      	adds	r3, r1, #1
    5608:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    560a:	7810      	ldrb	r0, [r2, #0]
    560c:	2800      	cmp	r0, #0
    560e:	d0f8      	beq.n	5602 <main+0xc2>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    5610:	2b00      	cmp	r3, #0
    5612:	d119      	bne.n	5648 <main+0x108>
		cpu_irq_enable();
    5614:	2201      	movs	r2, #1
    5616:	4b23      	ldr	r3, [pc, #140]	; (56a4 <main+0x164>)
    5618:	701a      	strb	r2, [r3, #0]
    561a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    561e:	b662      	cpsie	i
    5620:	7823      	ldrb	r3, [r4, #0]
    5622:	2b00      	cmp	r3, #0
    5624:	d0e2      	beq.n	55ec <main+0xac>
			if(!udi_msc_process_trans()) {
    5626:	4b29      	ldr	r3, [pc, #164]	; (56cc <main+0x18c>)
    5628:	4798      	blx	r3
    562a:	2800      	cmp	r0, #0
    562c:	d1f8      	bne.n	5620 <main+0xe0>
  __ASM volatile ("cpsid i" : : : "memory");
    562e:	b672      	cpsid	i
    5630:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    5634:	2200      	movs	r2, #0
    5636:	4b1b      	ldr	r3, [pc, #108]	; (56a4 <main+0x164>)
    5638:	701a      	strb	r2, [r3, #0]
	while (!(*lock_ptr)) {
    563a:	4b1b      	ldr	r3, [pc, #108]	; (56a8 <main+0x168>)
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	d19f      	bne.n	5582 <main+0x42>
    5642:	2100      	movs	r1, #0
    5644:	4a18      	ldr	r2, [pc, #96]	; (56a8 <main+0x168>)
    5646:	e794      	b.n	5572 <main+0x32>
    5648:	b672      	cpsid	i
    564a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    564e:	2200      	movs	r2, #0
    5650:	4b14      	ldr	r3, [pc, #80]	; (56a4 <main+0x164>)
    5652:	701a      	strb	r2, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    5654:	4b19      	ldr	r3, [pc, #100]	; (56bc <main+0x17c>)
    5656:	699b      	ldr	r3, [r3, #24]
	rev = rev >> DSU_DID_REVISION_Pos;
    5658:	051b      	lsls	r3, r3, #20
    565a:	0f1b      	lsrs	r3, r3, #28
	if (rev < _SYSTEM_MCU_REVISION_D) {
    565c:	2b02      	cmp	r3, #2
    565e:	d805      	bhi.n	566c <main+0x12c>
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    5660:	4a17      	ldr	r2, [pc, #92]	; (56c0 <main+0x180>)
    5662:	6850      	ldr	r0, [r2, #4]
    5664:	23c0      	movs	r3, #192	; 0xc0
    5666:	009b      	lsls	r3, r3, #2
    5668:	4303      	orrs	r3, r0
    566a:	6053      	str	r3, [r2, #4]
	switch (sleep_mode) {
    566c:	2902      	cmp	r1, #2
    566e:	d90b      	bls.n	5688 <main+0x148>
    5670:	2903      	cmp	r1, #3
    5672:	d011      	beq.n	5698 <main+0x158>
	cpu_irq_enable();
    5674:	2201      	movs	r2, #1
    5676:	4b0b      	ldr	r3, [pc, #44]	; (56a4 <main+0x164>)
    5678:	701a      	strb	r2, [r3, #0]
    567a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    567e:	b662      	cpsie	i
  __ASM volatile ("dsb");
    5680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    5684:	bf30      	wfi
    5686:	e7cb      	b.n	5620 <main+0xe0>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    5688:	4a0e      	ldr	r2, [pc, #56]	; (56c4 <main+0x184>)
    568a:	6913      	ldr	r3, [r2, #16]
    568c:	2004      	movs	r0, #4
    568e:	4383      	bics	r3, r0
    5690:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    5692:	4b0d      	ldr	r3, [pc, #52]	; (56c8 <main+0x188>)
    5694:	7059      	strb	r1, [r3, #1]
    5696:	e7ed      	b.n	5674 <main+0x134>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    5698:	4a0a      	ldr	r2, [pc, #40]	; (56c4 <main+0x184>)
    569a:	6913      	ldr	r3, [r2, #16]
    569c:	2104      	movs	r1, #4
    569e:	430b      	orrs	r3, r1
    56a0:	6113      	str	r3, [r2, #16]
    56a2:	e7e7      	b.n	5674 <main+0x134>
    56a4:	20000115 	.word	0x20000115
    56a8:	200002c4 	.word	0x200002c4
    56ac:	0000542d 	.word	0x0000542d
    56b0:	0000032d 	.word	0x0000032d
    56b4:	000014c1 	.word	0x000014c1
    56b8:	200002c0 	.word	0x200002c0
    56bc:	41002000 	.word	0x41002000
    56c0:	41004000 	.word	0x41004000
    56c4:	e000ed00 	.word	0xe000ed00
    56c8:	40000400 	.word	0x40000400
    56cc:	000011e1 	.word	0x000011e1

000056d0 <__udivsi3>:
    56d0:	2200      	movs	r2, #0
    56d2:	0843      	lsrs	r3, r0, #1
    56d4:	428b      	cmp	r3, r1
    56d6:	d374      	bcc.n	57c2 <__udivsi3+0xf2>
    56d8:	0903      	lsrs	r3, r0, #4
    56da:	428b      	cmp	r3, r1
    56dc:	d35f      	bcc.n	579e <__udivsi3+0xce>
    56de:	0a03      	lsrs	r3, r0, #8
    56e0:	428b      	cmp	r3, r1
    56e2:	d344      	bcc.n	576e <__udivsi3+0x9e>
    56e4:	0b03      	lsrs	r3, r0, #12
    56e6:	428b      	cmp	r3, r1
    56e8:	d328      	bcc.n	573c <__udivsi3+0x6c>
    56ea:	0c03      	lsrs	r3, r0, #16
    56ec:	428b      	cmp	r3, r1
    56ee:	d30d      	bcc.n	570c <__udivsi3+0x3c>
    56f0:	22ff      	movs	r2, #255	; 0xff
    56f2:	0209      	lsls	r1, r1, #8
    56f4:	ba12      	rev	r2, r2
    56f6:	0c03      	lsrs	r3, r0, #16
    56f8:	428b      	cmp	r3, r1
    56fa:	d302      	bcc.n	5702 <__udivsi3+0x32>
    56fc:	1212      	asrs	r2, r2, #8
    56fe:	0209      	lsls	r1, r1, #8
    5700:	d065      	beq.n	57ce <__udivsi3+0xfe>
    5702:	0b03      	lsrs	r3, r0, #12
    5704:	428b      	cmp	r3, r1
    5706:	d319      	bcc.n	573c <__udivsi3+0x6c>
    5708:	e000      	b.n	570c <__udivsi3+0x3c>
    570a:	0a09      	lsrs	r1, r1, #8
    570c:	0bc3      	lsrs	r3, r0, #15
    570e:	428b      	cmp	r3, r1
    5710:	d301      	bcc.n	5716 <__udivsi3+0x46>
    5712:	03cb      	lsls	r3, r1, #15
    5714:	1ac0      	subs	r0, r0, r3
    5716:	4152      	adcs	r2, r2
    5718:	0b83      	lsrs	r3, r0, #14
    571a:	428b      	cmp	r3, r1
    571c:	d301      	bcc.n	5722 <__udivsi3+0x52>
    571e:	038b      	lsls	r3, r1, #14
    5720:	1ac0      	subs	r0, r0, r3
    5722:	4152      	adcs	r2, r2
    5724:	0b43      	lsrs	r3, r0, #13
    5726:	428b      	cmp	r3, r1
    5728:	d301      	bcc.n	572e <__udivsi3+0x5e>
    572a:	034b      	lsls	r3, r1, #13
    572c:	1ac0      	subs	r0, r0, r3
    572e:	4152      	adcs	r2, r2
    5730:	0b03      	lsrs	r3, r0, #12
    5732:	428b      	cmp	r3, r1
    5734:	d301      	bcc.n	573a <__udivsi3+0x6a>
    5736:	030b      	lsls	r3, r1, #12
    5738:	1ac0      	subs	r0, r0, r3
    573a:	4152      	adcs	r2, r2
    573c:	0ac3      	lsrs	r3, r0, #11
    573e:	428b      	cmp	r3, r1
    5740:	d301      	bcc.n	5746 <__udivsi3+0x76>
    5742:	02cb      	lsls	r3, r1, #11
    5744:	1ac0      	subs	r0, r0, r3
    5746:	4152      	adcs	r2, r2
    5748:	0a83      	lsrs	r3, r0, #10
    574a:	428b      	cmp	r3, r1
    574c:	d301      	bcc.n	5752 <__udivsi3+0x82>
    574e:	028b      	lsls	r3, r1, #10
    5750:	1ac0      	subs	r0, r0, r3
    5752:	4152      	adcs	r2, r2
    5754:	0a43      	lsrs	r3, r0, #9
    5756:	428b      	cmp	r3, r1
    5758:	d301      	bcc.n	575e <__udivsi3+0x8e>
    575a:	024b      	lsls	r3, r1, #9
    575c:	1ac0      	subs	r0, r0, r3
    575e:	4152      	adcs	r2, r2
    5760:	0a03      	lsrs	r3, r0, #8
    5762:	428b      	cmp	r3, r1
    5764:	d301      	bcc.n	576a <__udivsi3+0x9a>
    5766:	020b      	lsls	r3, r1, #8
    5768:	1ac0      	subs	r0, r0, r3
    576a:	4152      	adcs	r2, r2
    576c:	d2cd      	bcs.n	570a <__udivsi3+0x3a>
    576e:	09c3      	lsrs	r3, r0, #7
    5770:	428b      	cmp	r3, r1
    5772:	d301      	bcc.n	5778 <__udivsi3+0xa8>
    5774:	01cb      	lsls	r3, r1, #7
    5776:	1ac0      	subs	r0, r0, r3
    5778:	4152      	adcs	r2, r2
    577a:	0983      	lsrs	r3, r0, #6
    577c:	428b      	cmp	r3, r1
    577e:	d301      	bcc.n	5784 <__udivsi3+0xb4>
    5780:	018b      	lsls	r3, r1, #6
    5782:	1ac0      	subs	r0, r0, r3
    5784:	4152      	adcs	r2, r2
    5786:	0943      	lsrs	r3, r0, #5
    5788:	428b      	cmp	r3, r1
    578a:	d301      	bcc.n	5790 <__udivsi3+0xc0>
    578c:	014b      	lsls	r3, r1, #5
    578e:	1ac0      	subs	r0, r0, r3
    5790:	4152      	adcs	r2, r2
    5792:	0903      	lsrs	r3, r0, #4
    5794:	428b      	cmp	r3, r1
    5796:	d301      	bcc.n	579c <__udivsi3+0xcc>
    5798:	010b      	lsls	r3, r1, #4
    579a:	1ac0      	subs	r0, r0, r3
    579c:	4152      	adcs	r2, r2
    579e:	08c3      	lsrs	r3, r0, #3
    57a0:	428b      	cmp	r3, r1
    57a2:	d301      	bcc.n	57a8 <__udivsi3+0xd8>
    57a4:	00cb      	lsls	r3, r1, #3
    57a6:	1ac0      	subs	r0, r0, r3
    57a8:	4152      	adcs	r2, r2
    57aa:	0883      	lsrs	r3, r0, #2
    57ac:	428b      	cmp	r3, r1
    57ae:	d301      	bcc.n	57b4 <__udivsi3+0xe4>
    57b0:	008b      	lsls	r3, r1, #2
    57b2:	1ac0      	subs	r0, r0, r3
    57b4:	4152      	adcs	r2, r2
    57b6:	0843      	lsrs	r3, r0, #1
    57b8:	428b      	cmp	r3, r1
    57ba:	d301      	bcc.n	57c0 <__udivsi3+0xf0>
    57bc:	004b      	lsls	r3, r1, #1
    57be:	1ac0      	subs	r0, r0, r3
    57c0:	4152      	adcs	r2, r2
    57c2:	1a41      	subs	r1, r0, r1
    57c4:	d200      	bcs.n	57c8 <__udivsi3+0xf8>
    57c6:	4601      	mov	r1, r0
    57c8:	4152      	adcs	r2, r2
    57ca:	4610      	mov	r0, r2
    57cc:	4770      	bx	lr
    57ce:	e7ff      	b.n	57d0 <__udivsi3+0x100>
    57d0:	b501      	push	{r0, lr}
    57d2:	2000      	movs	r0, #0
    57d4:	f000 f8f0 	bl	59b8 <__aeabi_idiv0>
    57d8:	bd02      	pop	{r1, pc}
    57da:	46c0      	nop			; (mov r8, r8)

000057dc <__aeabi_uidivmod>:
    57dc:	2900      	cmp	r1, #0
    57de:	d0f7      	beq.n	57d0 <__udivsi3+0x100>
    57e0:	e776      	b.n	56d0 <__udivsi3>
    57e2:	4770      	bx	lr

000057e4 <__divsi3>:
    57e4:	4603      	mov	r3, r0
    57e6:	430b      	orrs	r3, r1
    57e8:	d47f      	bmi.n	58ea <__divsi3+0x106>
    57ea:	2200      	movs	r2, #0
    57ec:	0843      	lsrs	r3, r0, #1
    57ee:	428b      	cmp	r3, r1
    57f0:	d374      	bcc.n	58dc <__divsi3+0xf8>
    57f2:	0903      	lsrs	r3, r0, #4
    57f4:	428b      	cmp	r3, r1
    57f6:	d35f      	bcc.n	58b8 <__divsi3+0xd4>
    57f8:	0a03      	lsrs	r3, r0, #8
    57fa:	428b      	cmp	r3, r1
    57fc:	d344      	bcc.n	5888 <__divsi3+0xa4>
    57fe:	0b03      	lsrs	r3, r0, #12
    5800:	428b      	cmp	r3, r1
    5802:	d328      	bcc.n	5856 <__divsi3+0x72>
    5804:	0c03      	lsrs	r3, r0, #16
    5806:	428b      	cmp	r3, r1
    5808:	d30d      	bcc.n	5826 <__divsi3+0x42>
    580a:	22ff      	movs	r2, #255	; 0xff
    580c:	0209      	lsls	r1, r1, #8
    580e:	ba12      	rev	r2, r2
    5810:	0c03      	lsrs	r3, r0, #16
    5812:	428b      	cmp	r3, r1
    5814:	d302      	bcc.n	581c <__divsi3+0x38>
    5816:	1212      	asrs	r2, r2, #8
    5818:	0209      	lsls	r1, r1, #8
    581a:	d065      	beq.n	58e8 <__divsi3+0x104>
    581c:	0b03      	lsrs	r3, r0, #12
    581e:	428b      	cmp	r3, r1
    5820:	d319      	bcc.n	5856 <__divsi3+0x72>
    5822:	e000      	b.n	5826 <__divsi3+0x42>
    5824:	0a09      	lsrs	r1, r1, #8
    5826:	0bc3      	lsrs	r3, r0, #15
    5828:	428b      	cmp	r3, r1
    582a:	d301      	bcc.n	5830 <__divsi3+0x4c>
    582c:	03cb      	lsls	r3, r1, #15
    582e:	1ac0      	subs	r0, r0, r3
    5830:	4152      	adcs	r2, r2
    5832:	0b83      	lsrs	r3, r0, #14
    5834:	428b      	cmp	r3, r1
    5836:	d301      	bcc.n	583c <__divsi3+0x58>
    5838:	038b      	lsls	r3, r1, #14
    583a:	1ac0      	subs	r0, r0, r3
    583c:	4152      	adcs	r2, r2
    583e:	0b43      	lsrs	r3, r0, #13
    5840:	428b      	cmp	r3, r1
    5842:	d301      	bcc.n	5848 <__divsi3+0x64>
    5844:	034b      	lsls	r3, r1, #13
    5846:	1ac0      	subs	r0, r0, r3
    5848:	4152      	adcs	r2, r2
    584a:	0b03      	lsrs	r3, r0, #12
    584c:	428b      	cmp	r3, r1
    584e:	d301      	bcc.n	5854 <__divsi3+0x70>
    5850:	030b      	lsls	r3, r1, #12
    5852:	1ac0      	subs	r0, r0, r3
    5854:	4152      	adcs	r2, r2
    5856:	0ac3      	lsrs	r3, r0, #11
    5858:	428b      	cmp	r3, r1
    585a:	d301      	bcc.n	5860 <__divsi3+0x7c>
    585c:	02cb      	lsls	r3, r1, #11
    585e:	1ac0      	subs	r0, r0, r3
    5860:	4152      	adcs	r2, r2
    5862:	0a83      	lsrs	r3, r0, #10
    5864:	428b      	cmp	r3, r1
    5866:	d301      	bcc.n	586c <__divsi3+0x88>
    5868:	028b      	lsls	r3, r1, #10
    586a:	1ac0      	subs	r0, r0, r3
    586c:	4152      	adcs	r2, r2
    586e:	0a43      	lsrs	r3, r0, #9
    5870:	428b      	cmp	r3, r1
    5872:	d301      	bcc.n	5878 <__divsi3+0x94>
    5874:	024b      	lsls	r3, r1, #9
    5876:	1ac0      	subs	r0, r0, r3
    5878:	4152      	adcs	r2, r2
    587a:	0a03      	lsrs	r3, r0, #8
    587c:	428b      	cmp	r3, r1
    587e:	d301      	bcc.n	5884 <__divsi3+0xa0>
    5880:	020b      	lsls	r3, r1, #8
    5882:	1ac0      	subs	r0, r0, r3
    5884:	4152      	adcs	r2, r2
    5886:	d2cd      	bcs.n	5824 <__divsi3+0x40>
    5888:	09c3      	lsrs	r3, r0, #7
    588a:	428b      	cmp	r3, r1
    588c:	d301      	bcc.n	5892 <__divsi3+0xae>
    588e:	01cb      	lsls	r3, r1, #7
    5890:	1ac0      	subs	r0, r0, r3
    5892:	4152      	adcs	r2, r2
    5894:	0983      	lsrs	r3, r0, #6
    5896:	428b      	cmp	r3, r1
    5898:	d301      	bcc.n	589e <__divsi3+0xba>
    589a:	018b      	lsls	r3, r1, #6
    589c:	1ac0      	subs	r0, r0, r3
    589e:	4152      	adcs	r2, r2
    58a0:	0943      	lsrs	r3, r0, #5
    58a2:	428b      	cmp	r3, r1
    58a4:	d301      	bcc.n	58aa <__divsi3+0xc6>
    58a6:	014b      	lsls	r3, r1, #5
    58a8:	1ac0      	subs	r0, r0, r3
    58aa:	4152      	adcs	r2, r2
    58ac:	0903      	lsrs	r3, r0, #4
    58ae:	428b      	cmp	r3, r1
    58b0:	d301      	bcc.n	58b6 <__divsi3+0xd2>
    58b2:	010b      	lsls	r3, r1, #4
    58b4:	1ac0      	subs	r0, r0, r3
    58b6:	4152      	adcs	r2, r2
    58b8:	08c3      	lsrs	r3, r0, #3
    58ba:	428b      	cmp	r3, r1
    58bc:	d301      	bcc.n	58c2 <__divsi3+0xde>
    58be:	00cb      	lsls	r3, r1, #3
    58c0:	1ac0      	subs	r0, r0, r3
    58c2:	4152      	adcs	r2, r2
    58c4:	0883      	lsrs	r3, r0, #2
    58c6:	428b      	cmp	r3, r1
    58c8:	d301      	bcc.n	58ce <__divsi3+0xea>
    58ca:	008b      	lsls	r3, r1, #2
    58cc:	1ac0      	subs	r0, r0, r3
    58ce:	4152      	adcs	r2, r2
    58d0:	0843      	lsrs	r3, r0, #1
    58d2:	428b      	cmp	r3, r1
    58d4:	d301      	bcc.n	58da <__divsi3+0xf6>
    58d6:	004b      	lsls	r3, r1, #1
    58d8:	1ac0      	subs	r0, r0, r3
    58da:	4152      	adcs	r2, r2
    58dc:	1a41      	subs	r1, r0, r1
    58de:	d200      	bcs.n	58e2 <__divsi3+0xfe>
    58e0:	4601      	mov	r1, r0
    58e2:	4152      	adcs	r2, r2
    58e4:	4610      	mov	r0, r2
    58e6:	4770      	bx	lr
    58e8:	e05d      	b.n	59a6 <__divsi3+0x1c2>
    58ea:	0fca      	lsrs	r2, r1, #31
    58ec:	d000      	beq.n	58f0 <__divsi3+0x10c>
    58ee:	4249      	negs	r1, r1
    58f0:	1003      	asrs	r3, r0, #32
    58f2:	d300      	bcc.n	58f6 <__divsi3+0x112>
    58f4:	4240      	negs	r0, r0
    58f6:	4053      	eors	r3, r2
    58f8:	2200      	movs	r2, #0
    58fa:	469c      	mov	ip, r3
    58fc:	0903      	lsrs	r3, r0, #4
    58fe:	428b      	cmp	r3, r1
    5900:	d32d      	bcc.n	595e <__divsi3+0x17a>
    5902:	0a03      	lsrs	r3, r0, #8
    5904:	428b      	cmp	r3, r1
    5906:	d312      	bcc.n	592e <__divsi3+0x14a>
    5908:	22fc      	movs	r2, #252	; 0xfc
    590a:	0189      	lsls	r1, r1, #6
    590c:	ba12      	rev	r2, r2
    590e:	0a03      	lsrs	r3, r0, #8
    5910:	428b      	cmp	r3, r1
    5912:	d30c      	bcc.n	592e <__divsi3+0x14a>
    5914:	0189      	lsls	r1, r1, #6
    5916:	1192      	asrs	r2, r2, #6
    5918:	428b      	cmp	r3, r1
    591a:	d308      	bcc.n	592e <__divsi3+0x14a>
    591c:	0189      	lsls	r1, r1, #6
    591e:	1192      	asrs	r2, r2, #6
    5920:	428b      	cmp	r3, r1
    5922:	d304      	bcc.n	592e <__divsi3+0x14a>
    5924:	0189      	lsls	r1, r1, #6
    5926:	d03a      	beq.n	599e <__divsi3+0x1ba>
    5928:	1192      	asrs	r2, r2, #6
    592a:	e000      	b.n	592e <__divsi3+0x14a>
    592c:	0989      	lsrs	r1, r1, #6
    592e:	09c3      	lsrs	r3, r0, #7
    5930:	428b      	cmp	r3, r1
    5932:	d301      	bcc.n	5938 <__divsi3+0x154>
    5934:	01cb      	lsls	r3, r1, #7
    5936:	1ac0      	subs	r0, r0, r3
    5938:	4152      	adcs	r2, r2
    593a:	0983      	lsrs	r3, r0, #6
    593c:	428b      	cmp	r3, r1
    593e:	d301      	bcc.n	5944 <__divsi3+0x160>
    5940:	018b      	lsls	r3, r1, #6
    5942:	1ac0      	subs	r0, r0, r3
    5944:	4152      	adcs	r2, r2
    5946:	0943      	lsrs	r3, r0, #5
    5948:	428b      	cmp	r3, r1
    594a:	d301      	bcc.n	5950 <__divsi3+0x16c>
    594c:	014b      	lsls	r3, r1, #5
    594e:	1ac0      	subs	r0, r0, r3
    5950:	4152      	adcs	r2, r2
    5952:	0903      	lsrs	r3, r0, #4
    5954:	428b      	cmp	r3, r1
    5956:	d301      	bcc.n	595c <__divsi3+0x178>
    5958:	010b      	lsls	r3, r1, #4
    595a:	1ac0      	subs	r0, r0, r3
    595c:	4152      	adcs	r2, r2
    595e:	08c3      	lsrs	r3, r0, #3
    5960:	428b      	cmp	r3, r1
    5962:	d301      	bcc.n	5968 <__divsi3+0x184>
    5964:	00cb      	lsls	r3, r1, #3
    5966:	1ac0      	subs	r0, r0, r3
    5968:	4152      	adcs	r2, r2
    596a:	0883      	lsrs	r3, r0, #2
    596c:	428b      	cmp	r3, r1
    596e:	d301      	bcc.n	5974 <__divsi3+0x190>
    5970:	008b      	lsls	r3, r1, #2
    5972:	1ac0      	subs	r0, r0, r3
    5974:	4152      	adcs	r2, r2
    5976:	d2d9      	bcs.n	592c <__divsi3+0x148>
    5978:	0843      	lsrs	r3, r0, #1
    597a:	428b      	cmp	r3, r1
    597c:	d301      	bcc.n	5982 <__divsi3+0x19e>
    597e:	004b      	lsls	r3, r1, #1
    5980:	1ac0      	subs	r0, r0, r3
    5982:	4152      	adcs	r2, r2
    5984:	1a41      	subs	r1, r0, r1
    5986:	d200      	bcs.n	598a <__divsi3+0x1a6>
    5988:	4601      	mov	r1, r0
    598a:	4663      	mov	r3, ip
    598c:	4152      	adcs	r2, r2
    598e:	105b      	asrs	r3, r3, #1
    5990:	4610      	mov	r0, r2
    5992:	d301      	bcc.n	5998 <__divsi3+0x1b4>
    5994:	4240      	negs	r0, r0
    5996:	2b00      	cmp	r3, #0
    5998:	d500      	bpl.n	599c <__divsi3+0x1b8>
    599a:	4249      	negs	r1, r1
    599c:	4770      	bx	lr
    599e:	4663      	mov	r3, ip
    59a0:	105b      	asrs	r3, r3, #1
    59a2:	d300      	bcc.n	59a6 <__divsi3+0x1c2>
    59a4:	4240      	negs	r0, r0
    59a6:	b501      	push	{r0, lr}
    59a8:	2000      	movs	r0, #0
    59aa:	f000 f805 	bl	59b8 <__aeabi_idiv0>
    59ae:	bd02      	pop	{r1, pc}

000059b0 <__aeabi_idivmod>:
    59b0:	2900      	cmp	r1, #0
    59b2:	d0f8      	beq.n	59a6 <__divsi3+0x1c2>
    59b4:	e716      	b.n	57e4 <__divsi3>
    59b6:	4770      	bx	lr

000059b8 <__aeabi_idiv0>:
    59b8:	4770      	bx	lr
    59ba:	46c0      	nop			; (mov r8, r8)

000059bc <__clzsi2>:
    59bc:	211c      	movs	r1, #28
    59be:	2301      	movs	r3, #1
    59c0:	041b      	lsls	r3, r3, #16
    59c2:	4298      	cmp	r0, r3
    59c4:	d301      	bcc.n	59ca <__clzsi2+0xe>
    59c6:	0c00      	lsrs	r0, r0, #16
    59c8:	3910      	subs	r1, #16
    59ca:	0a1b      	lsrs	r3, r3, #8
    59cc:	4298      	cmp	r0, r3
    59ce:	d301      	bcc.n	59d4 <__clzsi2+0x18>
    59d0:	0a00      	lsrs	r0, r0, #8
    59d2:	3908      	subs	r1, #8
    59d4:	091b      	lsrs	r3, r3, #4
    59d6:	4298      	cmp	r0, r3
    59d8:	d301      	bcc.n	59de <__clzsi2+0x22>
    59da:	0900      	lsrs	r0, r0, #4
    59dc:	3904      	subs	r1, #4
    59de:	a202      	add	r2, pc, #8	; (adr r2, 59e8 <__clzsi2+0x2c>)
    59e0:	5c10      	ldrb	r0, [r2, r0]
    59e2:	1840      	adds	r0, r0, r1
    59e4:	4770      	bx	lr
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	02020304 	.word	0x02020304
    59ec:	01010101 	.word	0x01010101
	...

000059f8 <__ctzsi2>:
    59f8:	4241      	negs	r1, r0
    59fa:	4008      	ands	r0, r1
    59fc:	211c      	movs	r1, #28
    59fe:	2301      	movs	r3, #1
    5a00:	041b      	lsls	r3, r3, #16
    5a02:	4298      	cmp	r0, r3
    5a04:	d301      	bcc.n	5a0a <__ctzsi2+0x12>
    5a06:	0c00      	lsrs	r0, r0, #16
    5a08:	3910      	subs	r1, #16
    5a0a:	0a1b      	lsrs	r3, r3, #8
    5a0c:	4298      	cmp	r0, r3
    5a0e:	d301      	bcc.n	5a14 <__ctzsi2+0x1c>
    5a10:	0a00      	lsrs	r0, r0, #8
    5a12:	3908      	subs	r1, #8
    5a14:	091b      	lsrs	r3, r3, #4
    5a16:	4298      	cmp	r0, r3
    5a18:	d301      	bcc.n	5a1e <__ctzsi2+0x26>
    5a1a:	0900      	lsrs	r0, r0, #4
    5a1c:	3904      	subs	r1, #4
    5a1e:	a202      	add	r2, pc, #8	; (adr r2, 5a28 <__ctzsi2+0x30>)
    5a20:	5c10      	ldrb	r0, [r2, r0]
    5a22:	1a40      	subs	r0, r0, r1
    5a24:	4770      	bx	lr
    5a26:	46c0      	nop			; (mov r8, r8)
    5a28:	1d1d1c1b 	.word	0x1d1d1c1b
    5a2c:	1e1e1e1e 	.word	0x1e1e1e1e
    5a30:	1f1f1f1f 	.word	0x1f1f1f1f
    5a34:	1f1f1f1f 	.word	0x1f1f1f1f

00005a38 <__aeabi_uldivmod>:
    5a38:	2b00      	cmp	r3, #0
    5a3a:	d111      	bne.n	5a60 <__aeabi_uldivmod+0x28>
    5a3c:	2a00      	cmp	r2, #0
    5a3e:	d10f      	bne.n	5a60 <__aeabi_uldivmod+0x28>
    5a40:	2900      	cmp	r1, #0
    5a42:	d100      	bne.n	5a46 <__aeabi_uldivmod+0xe>
    5a44:	2800      	cmp	r0, #0
    5a46:	d002      	beq.n	5a4e <__aeabi_uldivmod+0x16>
    5a48:	2100      	movs	r1, #0
    5a4a:	43c9      	mvns	r1, r1
    5a4c:	1c08      	adds	r0, r1, #0
    5a4e:	b407      	push	{r0, r1, r2}
    5a50:	4802      	ldr	r0, [pc, #8]	; (5a5c <__aeabi_uldivmod+0x24>)
    5a52:	a102      	add	r1, pc, #8	; (adr r1, 5a5c <__aeabi_uldivmod+0x24>)
    5a54:	1840      	adds	r0, r0, r1
    5a56:	9002      	str	r0, [sp, #8]
    5a58:	bd03      	pop	{r0, r1, pc}
    5a5a:	46c0      	nop			; (mov r8, r8)
    5a5c:	ffffff5d 	.word	0xffffff5d
    5a60:	b403      	push	{r0, r1}
    5a62:	4668      	mov	r0, sp
    5a64:	b501      	push	{r0, lr}
    5a66:	9802      	ldr	r0, [sp, #8]
    5a68:	f000 f830 	bl	5acc <__udivmoddi4>
    5a6c:	9b01      	ldr	r3, [sp, #4]
    5a6e:	469e      	mov	lr, r3
    5a70:	b002      	add	sp, #8
    5a72:	bc0c      	pop	{r2, r3}
    5a74:	4770      	bx	lr
    5a76:	46c0      	nop			; (mov r8, r8)

00005a78 <__aeabi_lmul>:
    5a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a7a:	46ce      	mov	lr, r9
    5a7c:	4647      	mov	r7, r8
    5a7e:	0415      	lsls	r5, r2, #16
    5a80:	0c2d      	lsrs	r5, r5, #16
    5a82:	002e      	movs	r6, r5
    5a84:	b580      	push	{r7, lr}
    5a86:	0407      	lsls	r7, r0, #16
    5a88:	0c14      	lsrs	r4, r2, #16
    5a8a:	0c3f      	lsrs	r7, r7, #16
    5a8c:	4699      	mov	r9, r3
    5a8e:	0c03      	lsrs	r3, r0, #16
    5a90:	437e      	muls	r6, r7
    5a92:	435d      	muls	r5, r3
    5a94:	4367      	muls	r7, r4
    5a96:	4363      	muls	r3, r4
    5a98:	197f      	adds	r7, r7, r5
    5a9a:	0c34      	lsrs	r4, r6, #16
    5a9c:	19e4      	adds	r4, r4, r7
    5a9e:	469c      	mov	ip, r3
    5aa0:	42a5      	cmp	r5, r4
    5aa2:	d903      	bls.n	5aac <__aeabi_lmul+0x34>
    5aa4:	2380      	movs	r3, #128	; 0x80
    5aa6:	025b      	lsls	r3, r3, #9
    5aa8:	4698      	mov	r8, r3
    5aaa:	44c4      	add	ip, r8
    5aac:	464b      	mov	r3, r9
    5aae:	4351      	muls	r1, r2
    5ab0:	4343      	muls	r3, r0
    5ab2:	0436      	lsls	r6, r6, #16
    5ab4:	0c36      	lsrs	r6, r6, #16
    5ab6:	0c25      	lsrs	r5, r4, #16
    5ab8:	0424      	lsls	r4, r4, #16
    5aba:	4465      	add	r5, ip
    5abc:	19a4      	adds	r4, r4, r6
    5abe:	1859      	adds	r1, r3, r1
    5ac0:	1949      	adds	r1, r1, r5
    5ac2:	0020      	movs	r0, r4
    5ac4:	bc0c      	pop	{r2, r3}
    5ac6:	4690      	mov	r8, r2
    5ac8:	4699      	mov	r9, r3
    5aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005acc <__udivmoddi4>:
    5acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ace:	4657      	mov	r7, sl
    5ad0:	464e      	mov	r6, r9
    5ad2:	4645      	mov	r5, r8
    5ad4:	46de      	mov	lr, fp
    5ad6:	b5e0      	push	{r5, r6, r7, lr}
    5ad8:	0004      	movs	r4, r0
    5ada:	b083      	sub	sp, #12
    5adc:	000d      	movs	r5, r1
    5ade:	4692      	mov	sl, r2
    5ae0:	4699      	mov	r9, r3
    5ae2:	428b      	cmp	r3, r1
    5ae4:	d82f      	bhi.n	5b46 <__udivmoddi4+0x7a>
    5ae6:	d02c      	beq.n	5b42 <__udivmoddi4+0x76>
    5ae8:	4649      	mov	r1, r9
    5aea:	4650      	mov	r0, sl
    5aec:	f000 f8ae 	bl	5c4c <__clzdi2>
    5af0:	0029      	movs	r1, r5
    5af2:	0006      	movs	r6, r0
    5af4:	0020      	movs	r0, r4
    5af6:	f000 f8a9 	bl	5c4c <__clzdi2>
    5afa:	1a33      	subs	r3, r6, r0
    5afc:	4698      	mov	r8, r3
    5afe:	3b20      	subs	r3, #32
    5b00:	469b      	mov	fp, r3
    5b02:	d500      	bpl.n	5b06 <__udivmoddi4+0x3a>
    5b04:	e074      	b.n	5bf0 <__udivmoddi4+0x124>
    5b06:	4653      	mov	r3, sl
    5b08:	465a      	mov	r2, fp
    5b0a:	4093      	lsls	r3, r2
    5b0c:	001f      	movs	r7, r3
    5b0e:	4653      	mov	r3, sl
    5b10:	4642      	mov	r2, r8
    5b12:	4093      	lsls	r3, r2
    5b14:	001e      	movs	r6, r3
    5b16:	42af      	cmp	r7, r5
    5b18:	d829      	bhi.n	5b6e <__udivmoddi4+0xa2>
    5b1a:	d026      	beq.n	5b6a <__udivmoddi4+0x9e>
    5b1c:	465b      	mov	r3, fp
    5b1e:	1ba4      	subs	r4, r4, r6
    5b20:	41bd      	sbcs	r5, r7
    5b22:	2b00      	cmp	r3, #0
    5b24:	da00      	bge.n	5b28 <__udivmoddi4+0x5c>
    5b26:	e079      	b.n	5c1c <__udivmoddi4+0x150>
    5b28:	2200      	movs	r2, #0
    5b2a:	2300      	movs	r3, #0
    5b2c:	9200      	str	r2, [sp, #0]
    5b2e:	9301      	str	r3, [sp, #4]
    5b30:	2301      	movs	r3, #1
    5b32:	465a      	mov	r2, fp
    5b34:	4093      	lsls	r3, r2
    5b36:	9301      	str	r3, [sp, #4]
    5b38:	2301      	movs	r3, #1
    5b3a:	4642      	mov	r2, r8
    5b3c:	4093      	lsls	r3, r2
    5b3e:	9300      	str	r3, [sp, #0]
    5b40:	e019      	b.n	5b76 <__udivmoddi4+0xaa>
    5b42:	4282      	cmp	r2, r0
    5b44:	d9d0      	bls.n	5ae8 <__udivmoddi4+0x1c>
    5b46:	2200      	movs	r2, #0
    5b48:	2300      	movs	r3, #0
    5b4a:	9200      	str	r2, [sp, #0]
    5b4c:	9301      	str	r3, [sp, #4]
    5b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b50:	2b00      	cmp	r3, #0
    5b52:	d001      	beq.n	5b58 <__udivmoddi4+0x8c>
    5b54:	601c      	str	r4, [r3, #0]
    5b56:	605d      	str	r5, [r3, #4]
    5b58:	9800      	ldr	r0, [sp, #0]
    5b5a:	9901      	ldr	r1, [sp, #4]
    5b5c:	b003      	add	sp, #12
    5b5e:	bc3c      	pop	{r2, r3, r4, r5}
    5b60:	4690      	mov	r8, r2
    5b62:	4699      	mov	r9, r3
    5b64:	46a2      	mov	sl, r4
    5b66:	46ab      	mov	fp, r5
    5b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b6a:	42a3      	cmp	r3, r4
    5b6c:	d9d6      	bls.n	5b1c <__udivmoddi4+0x50>
    5b6e:	2200      	movs	r2, #0
    5b70:	2300      	movs	r3, #0
    5b72:	9200      	str	r2, [sp, #0]
    5b74:	9301      	str	r3, [sp, #4]
    5b76:	4643      	mov	r3, r8
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d0e8      	beq.n	5b4e <__udivmoddi4+0x82>
    5b7c:	07fb      	lsls	r3, r7, #31
    5b7e:	0872      	lsrs	r2, r6, #1
    5b80:	431a      	orrs	r2, r3
    5b82:	4646      	mov	r6, r8
    5b84:	087b      	lsrs	r3, r7, #1
    5b86:	e00e      	b.n	5ba6 <__udivmoddi4+0xda>
    5b88:	42ab      	cmp	r3, r5
    5b8a:	d101      	bne.n	5b90 <__udivmoddi4+0xc4>
    5b8c:	42a2      	cmp	r2, r4
    5b8e:	d80c      	bhi.n	5baa <__udivmoddi4+0xde>
    5b90:	1aa4      	subs	r4, r4, r2
    5b92:	419d      	sbcs	r5, r3
    5b94:	2001      	movs	r0, #1
    5b96:	1924      	adds	r4, r4, r4
    5b98:	416d      	adcs	r5, r5
    5b9a:	2100      	movs	r1, #0
    5b9c:	3e01      	subs	r6, #1
    5b9e:	1824      	adds	r4, r4, r0
    5ba0:	414d      	adcs	r5, r1
    5ba2:	2e00      	cmp	r6, #0
    5ba4:	d006      	beq.n	5bb4 <__udivmoddi4+0xe8>
    5ba6:	42ab      	cmp	r3, r5
    5ba8:	d9ee      	bls.n	5b88 <__udivmoddi4+0xbc>
    5baa:	3e01      	subs	r6, #1
    5bac:	1924      	adds	r4, r4, r4
    5bae:	416d      	adcs	r5, r5
    5bb0:	2e00      	cmp	r6, #0
    5bb2:	d1f8      	bne.n	5ba6 <__udivmoddi4+0xda>
    5bb4:	465b      	mov	r3, fp
    5bb6:	9800      	ldr	r0, [sp, #0]
    5bb8:	9901      	ldr	r1, [sp, #4]
    5bba:	1900      	adds	r0, r0, r4
    5bbc:	4169      	adcs	r1, r5
    5bbe:	2b00      	cmp	r3, #0
    5bc0:	db22      	blt.n	5c08 <__udivmoddi4+0x13c>
    5bc2:	002b      	movs	r3, r5
    5bc4:	465a      	mov	r2, fp
    5bc6:	40d3      	lsrs	r3, r2
    5bc8:	002a      	movs	r2, r5
    5bca:	4644      	mov	r4, r8
    5bcc:	40e2      	lsrs	r2, r4
    5bce:	001c      	movs	r4, r3
    5bd0:	465b      	mov	r3, fp
    5bd2:	0015      	movs	r5, r2
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	db2c      	blt.n	5c32 <__udivmoddi4+0x166>
    5bd8:	0026      	movs	r6, r4
    5bda:	409e      	lsls	r6, r3
    5bdc:	0033      	movs	r3, r6
    5bde:	0026      	movs	r6, r4
    5be0:	4647      	mov	r7, r8
    5be2:	40be      	lsls	r6, r7
    5be4:	0032      	movs	r2, r6
    5be6:	1a80      	subs	r0, r0, r2
    5be8:	4199      	sbcs	r1, r3
    5bea:	9000      	str	r0, [sp, #0]
    5bec:	9101      	str	r1, [sp, #4]
    5bee:	e7ae      	b.n	5b4e <__udivmoddi4+0x82>
    5bf0:	4642      	mov	r2, r8
    5bf2:	2320      	movs	r3, #32
    5bf4:	1a9b      	subs	r3, r3, r2
    5bf6:	4652      	mov	r2, sl
    5bf8:	40da      	lsrs	r2, r3
    5bfa:	4641      	mov	r1, r8
    5bfc:	0013      	movs	r3, r2
    5bfe:	464a      	mov	r2, r9
    5c00:	408a      	lsls	r2, r1
    5c02:	0017      	movs	r7, r2
    5c04:	431f      	orrs	r7, r3
    5c06:	e782      	b.n	5b0e <__udivmoddi4+0x42>
    5c08:	4642      	mov	r2, r8
    5c0a:	2320      	movs	r3, #32
    5c0c:	1a9b      	subs	r3, r3, r2
    5c0e:	002a      	movs	r2, r5
    5c10:	4646      	mov	r6, r8
    5c12:	409a      	lsls	r2, r3
    5c14:	0023      	movs	r3, r4
    5c16:	40f3      	lsrs	r3, r6
    5c18:	4313      	orrs	r3, r2
    5c1a:	e7d5      	b.n	5bc8 <__udivmoddi4+0xfc>
    5c1c:	4642      	mov	r2, r8
    5c1e:	2320      	movs	r3, #32
    5c20:	2100      	movs	r1, #0
    5c22:	1a9b      	subs	r3, r3, r2
    5c24:	2200      	movs	r2, #0
    5c26:	9100      	str	r1, [sp, #0]
    5c28:	9201      	str	r2, [sp, #4]
    5c2a:	2201      	movs	r2, #1
    5c2c:	40da      	lsrs	r2, r3
    5c2e:	9201      	str	r2, [sp, #4]
    5c30:	e782      	b.n	5b38 <__udivmoddi4+0x6c>
    5c32:	4642      	mov	r2, r8
    5c34:	2320      	movs	r3, #32
    5c36:	0026      	movs	r6, r4
    5c38:	1a9b      	subs	r3, r3, r2
    5c3a:	40de      	lsrs	r6, r3
    5c3c:	002f      	movs	r7, r5
    5c3e:	46b4      	mov	ip, r6
    5c40:	4097      	lsls	r7, r2
    5c42:	4666      	mov	r6, ip
    5c44:	003b      	movs	r3, r7
    5c46:	4333      	orrs	r3, r6
    5c48:	e7c9      	b.n	5bde <__udivmoddi4+0x112>
    5c4a:	46c0      	nop			; (mov r8, r8)

00005c4c <__clzdi2>:
    5c4c:	b510      	push	{r4, lr}
    5c4e:	2900      	cmp	r1, #0
    5c50:	d103      	bne.n	5c5a <__clzdi2+0xe>
    5c52:	f7ff feb3 	bl	59bc <__clzsi2>
    5c56:	3020      	adds	r0, #32
    5c58:	e002      	b.n	5c60 <__clzdi2+0x14>
    5c5a:	1c08      	adds	r0, r1, #0
    5c5c:	f7ff feae 	bl	59bc <__clzsi2>
    5c60:	bd10      	pop	{r4, pc}
    5c62:	46c0      	nop			; (mov r8, r8)

00005c64 <__libc_init_array>:
    5c64:	b570      	push	{r4, r5, r6, lr}
    5c66:	2600      	movs	r6, #0
    5c68:	4d0c      	ldr	r5, [pc, #48]	; (5c9c <__libc_init_array+0x38>)
    5c6a:	4c0d      	ldr	r4, [pc, #52]	; (5ca0 <__libc_init_array+0x3c>)
    5c6c:	1b64      	subs	r4, r4, r5
    5c6e:	10a4      	asrs	r4, r4, #2
    5c70:	42a6      	cmp	r6, r4
    5c72:	d109      	bne.n	5c88 <__libc_init_array+0x24>
    5c74:	2600      	movs	r6, #0
    5c76:	f000 f9af 	bl	5fd8 <_init>
    5c7a:	4d0a      	ldr	r5, [pc, #40]	; (5ca4 <__libc_init_array+0x40>)
    5c7c:	4c0a      	ldr	r4, [pc, #40]	; (5ca8 <__libc_init_array+0x44>)
    5c7e:	1b64      	subs	r4, r4, r5
    5c80:	10a4      	asrs	r4, r4, #2
    5c82:	42a6      	cmp	r6, r4
    5c84:	d105      	bne.n	5c92 <__libc_init_array+0x2e>
    5c86:	bd70      	pop	{r4, r5, r6, pc}
    5c88:	00b3      	lsls	r3, r6, #2
    5c8a:	58eb      	ldr	r3, [r5, r3]
    5c8c:	4798      	blx	r3
    5c8e:	3601      	adds	r6, #1
    5c90:	e7ee      	b.n	5c70 <__libc_init_array+0xc>
    5c92:	00b3      	lsls	r3, r6, #2
    5c94:	58eb      	ldr	r3, [r5, r3]
    5c96:	4798      	blx	r3
    5c98:	3601      	adds	r6, #1
    5c9a:	e7f2      	b.n	5c82 <__libc_init_array+0x1e>
    5c9c:	00005fe4 	.word	0x00005fe4
    5ca0:	00005fe4 	.word	0x00005fe4
    5ca4:	00005fe4 	.word	0x00005fe4
    5ca8:	00005fe8 	.word	0x00005fe8

00005cac <memcpy>:
    5cac:	2300      	movs	r3, #0
    5cae:	b510      	push	{r4, lr}
    5cb0:	429a      	cmp	r2, r3
    5cb2:	d100      	bne.n	5cb6 <memcpy+0xa>
    5cb4:	bd10      	pop	{r4, pc}
    5cb6:	5ccc      	ldrb	r4, [r1, r3]
    5cb8:	54c4      	strb	r4, [r0, r3]
    5cba:	3301      	adds	r3, #1
    5cbc:	e7f8      	b.n	5cb0 <memcpy+0x4>

00005cbe <memset>:
    5cbe:	0003      	movs	r3, r0
    5cc0:	1882      	adds	r2, r0, r2
    5cc2:	4293      	cmp	r3, r2
    5cc4:	d100      	bne.n	5cc8 <memset+0xa>
    5cc6:	4770      	bx	lr
    5cc8:	7019      	strb	r1, [r3, #0]
    5cca:	3301      	adds	r3, #1
    5ccc:	e7f9      	b.n	5cc2 <memset+0x4>
	...

00005cd0 <mmc_trans_multipliers>:
    5cd0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    5ce0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    5cf0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    5d00:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00005d10 <sd_mmc_trans_units>:
    5d10:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00005d2c <sd_trans_multipliers>:
    5d2c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    5d3c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    5d4c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    5d5c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    5d6c:	0fce 0000 10a4 0000 10a4 0000 0f10 0000     ................
    5d7c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5d8c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5d9c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5dac:	10a4 0000 10a4 0000 0f34 0000 10a4 0000     ........4.......
    5dbc:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5dcc:	10a4 0000 10a4 0000 0fbe 0000 1052 0000     ............R...
    5ddc:	10a4 0000 10a4 0000 1072 0000 10a4 0000     ........r.......
    5dec:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5dfc:	10a4 0000 0ffa 0000 10a4 0000 10a4 0000     ................
    5e0c:	1094 0000 10a4 0000 109c 0000 10a4 0000     ................
    5e1c:	10a4 0000 10a4 0000 10a4 0000 108a 0000     ................
    5e2c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e3c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e4c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e5c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e6c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e7c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e8c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5e9c:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5eac:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5ebc:	10a4 0000 10a4 0000 10a4 0000 10a4 0000     ................
    5ecc:	10a4 0000 10a4 0000 0fc6 0000 3231 2e2e     ............12..
    5edc:	452e 0046 29b0 0000 29be 0000 2a58 0000     .EF..)...)..X*..
    5eec:	2af8 0000 2b5c 0000                         .*..\+..

00005ef4 <_usb_device_irq_bits>:
    5ef4:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

00005f04 <_usb_endpoint_irq_bits>:
    5f04:	0c03 6010 0800 4200 0c00 4200 1000 4200     ...`...B...B...B
    5f14:	1400 4200 1800 4200 1c00 4200               ...B...B...B

00005f20 <lun_desc>:
    5f20:	427d 0000 42bd 0000 42dd 0000 42f5 0000     }B...B...B...B..
    5f30:	4315 0000 43cd 0000 4499 0000 5f60 0000     .C...C...D..`_..
    5f40:	428d 0000 42cd 0000 42e9 0000 4305 0000     .B...B...B...C..
    5f50:	4319 0000 43e1 0000 44ad 0000 5f78 0000     .C...C...D..x_..
    5f60:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
    5f70:	2074 2230 0000 0000 5322 2f44 4d4d 2043     t 0"...."SD/MMC 
    5f80:	6143 6472 5320 6f6c 2074 2231 0000 0000     Card Slot 1"....
    5f90:	4dca 0000 4dc6 0000 4dc6 0000 4e34 0000     .M...M...M..4N..
    5fa0:	4e34 0000 4dde 0000 4dd0 0000 4de4 0000     4N...M...M...M..
    5fb0:	4e22 0000 4f3c 0000 4f1c 0000 4f1c 0000     "N..<O...O...O..
    5fc0:	4fa8 0000 4f2e 0000 4f4a 0000 4f20 0000     .O...O..JO.. O..
    5fd0:	4f58 0000 4f98 0000                         XO...O..

00005fd8 <_init>:
    5fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fda:	46c0      	nop			; (mov r8, r8)
    5fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fde:	bc08      	pop	{r3}
    5fe0:	469e      	mov	lr, r3
    5fe2:	4770      	bx	lr

00005fe4 <__init_array_start>:
    5fe4:	000000dd 	.word	0x000000dd

00005fe8 <_fini>:
    5fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fea:	46c0      	nop			; (mov r8, r8)
    5fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fee:	bc08      	pop	{r3}
    5ff0:	469e      	mov	lr, r3
    5ff2:	4770      	bx	lr

00005ff4 <__fini_array_start>:
    5ff4:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	0add 0000 0a61 0000 1145 0000 0a81 0000     ....a...E.......
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12540>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000a0 <udc_string_desc_languageid>:
200000a0:	0304 0409                                   ....

200000a4 <udc_string_manufacturer_name>:
200000a4:	614d 756e 6166 7463 7275 2065 616e 656d     Manufacture name
200000b4:	0000 0000                                   ....

200000b8 <udc_string_product_name>:
200000b8:	7250 646f 6375 2074 616e 656d 0000 0000     Product name....

200000c8 <udc_config>:
200000c8:	00fc 2000 00d4 2000 0000 0000               ... ... ....

200000d4 <udc_config_lsfs>:
200000d4:	00dc 2000 0110 2000                         ... ... 

200000dc <udc_desc_fs>:
200000dc:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000ec:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000fc <udc_device_desc>:
200000fc:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000010c:	0103 0000                                   ....

20000110 <udi_apis>:
20000110:	0030 2000                                   0.. 

20000114 <ss_pins>:
20000114:	0105                                             .

20000115 <g_interrupt_enabled>:
20000115:	0001 a400                                        ...
