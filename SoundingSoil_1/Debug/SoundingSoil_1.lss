
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b14c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b14c  0000b14c  0001b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000018c  20000000  0000b154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001a18  2000018c  0000b2e0  0002018c  2**2
                  ALLOC
  4 .stack        00002004  20001ba4  0000ccf8  0002018c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00066bba  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008819  00000000  00000000  00086dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000167fa  00000000  00000000  0008f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010a0  00000000  00000000  000a5dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001940  00000000  00000000  000a6e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002637a  00000000  00000000  000a87ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f0de  00000000  00000000  000ceb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009fb46  00000000  00000000  000edc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003598  00000000  00000000  0018d758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 3b 00 20 b1 8c 00 00 ad 8c 00 00 ad 8c 00 00     .;. ............
	...
      2c:	ad 8c 00 00 00 00 00 00 00 00 00 00 ad 8c 00 00     ................
      3c:	ad 8c 00 00 ad 8c 00 00 ad 8c 00 00 ad 8c 00 00     ................
      4c:	ad 8c 00 00 85 71 00 00 ad 8c 00 00 ad 8c 00 00     .....q..........
      5c:	41 69 00 00 ad 8c 00 00 d9 24 00 00 e9 24 00 00     Ai.......$...$..
      6c:	f9 24 00 00 09 25 00 00 19 25 00 00 29 25 00 00     .$...%...%..)%..
      7c:	45 07 00 00 55 07 00 00 65 07 00 00 ad 8c 00 00     E...U...e.......
      8c:	ad 8c 00 00 ad 8c 00 00 ad 8c 00 00 ad 8c 00 00     ................
      9c:	ad 8c 00 00 ad 8c 00 00 ad 8c 00 00 ad 8c 00 00     ................
      ac:	ad 8c 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000018c 	.word	0x2000018c
      d4:	00000000 	.word	0x00000000
      d8:	0000b154 	.word	0x0000b154

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000190 	.word	0x20000190
     108:	0000b154 	.word	0x0000b154
     10c:	0000b154 	.word	0x0000b154
     110:	00000000 	.word	0x00000000

00000114 <_tcc_get_inst_index>:
	uint32_t ch;
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
     114:	4b09      	ldr	r3, [pc, #36]	; (13c <_tcc_get_inst_index+0x28>)
     116:	4298      	cmp	r0, r3
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
     118:	d00c      	beq.n	134 <_tcc_get_inst_index+0x20>
     11a:	4b09      	ldr	r3, [pc, #36]	; (140 <_tcc_get_inst_index+0x2c>)
     11c:	4298      	cmp	r0, r3
     11e:	d007      	beq.n	130 <_tcc_get_inst_index+0x1c>
		}
	}
	if (events->generate_event_on_counter_overflow) {
     120:	4a08      	ldr	r2, [pc, #32]	; (144 <_tcc_get_inst_index+0x30>)
     122:	2300      	movs	r3, #0
     124:	4290      	cmp	r0, r2
		evctrl |= TCC_EVCTRL_OVFEO;
     126:	d001      	beq.n	12c <_tcc_get_inst_index+0x18>
     128:	0018      	movs	r0, r3
     12a:	4770      	bx	lr
	}
	if (events->generate_event_on_counter_retrigger) {
     12c:	3302      	adds	r3, #2
     12e:	e002      	b.n	136 <_tcc_get_inst_index+0x22>
     130:	2301      	movs	r3, #1
		evctrl |= TCC_EVCTRL_TRGEO;
     132:	e000      	b.n	136 <_tcc_get_inst_index+0x22>
     134:	2300      	movs	r3, #0
     136:	b2db      	uxtb	r3, r3
	}
	if (events->generate_event_on_counter_event) {
     138:	e7f6      	b.n	128 <_tcc_get_inst_index+0x14>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	42002000 	.word	0x42002000
		evctrl |= TCC_EVCTRL_CNTEO;
     140:	42002400 	.word	0x42002400
	}

	tcc_module->EVCTRL.reg = evctrl;
     144:	42002800 	.word	0x42002800

00000148 <tcc_get_config_defaults>:

	return STATUS_OK;
     148:	b510      	push	{r4, lr}
			return STATUS_ERR_INVALID_ARG;
     14a:	0004      	movs	r4, r0
     14c:	0008      	movs	r0, r1
			return STATUS_ERR_INVALID_ARG;
     14e:	4b4f      	ldr	r3, [pc, #316]	; (28c <tcc_get_config_defaults+0x144>)
     150:	4798      	blx	r3
     152:	2300      	movs	r3, #0
     154:	6023      	str	r3, [r4, #0]
     156:	0080      	lsls	r0, r0, #2
     158:	4a4d      	ldr	r2, [pc, #308]	; (290 <tcc_get_config_defaults+0x148>)
     15a:	5882      	ldr	r2, [r0, r2]
     15c:	6062      	str	r2, [r4, #4]
     15e:	72a3      	strb	r3, [r4, #10]
     160:	72e3      	strb	r3, [r4, #11]
     162:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     166:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     168:	61e3      	str	r3, [r4, #28]
     16a:	6223      	str	r3, [r4, #32]
     16c:	6263      	str	r3, [r4, #36]	; 0x24
     16e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     170:	7523      	strb	r3, [r4, #20]
     172:	7563      	strb	r3, [r4, #21]
     174:	75a3      	strb	r3, [r4, #22]
     176:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     17a:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     17c:	7423      	strb	r3, [r4, #16]
     17e:	7463      	strb	r3, [r4, #17]
     180:	74a3      	strb	r3, [r4, #18]
     182:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     184:	222c      	movs	r2, #44	; 0x2c
     186:	54a3      	strb	r3, [r4, r2]
     188:	3201      	adds	r2, #1
     18a:	54a3      	strb	r3, [r4, r2]
     18c:	3201      	adds	r2, #1
     18e:	54a3      	strb	r3, [r4, r2]
     190:	3201      	adds	r2, #1
     192:	54a3      	strb	r3, [r4, r2]
     194:	3201      	adds	r2, #1
     196:	54a3      	strb	r3, [r4, r2]
     198:	3201      	adds	r2, #1
     19a:	54a3      	strb	r3, [r4, r2]
     19c:	3201      	adds	r2, #1
     19e:	54a3      	strb	r3, [r4, r2]
     1a0:	3201      	adds	r2, #1
     1a2:	54a3      	strb	r3, [r4, r2]
     1a4:	3201      	adds	r2, #1
     1a6:	54a3      	strb	r3, [r4, r2]
     1a8:	3201      	adds	r2, #1
     1aa:	54a3      	strb	r3, [r4, r2]
     1ac:	3201      	adds	r2, #1
     1ae:	54a3      	strb	r3, [r4, r2]
     1b0:	3201      	adds	r2, #1
     1b2:	54a3      	strb	r3, [r4, r2]
     1b4:	3201      	adds	r2, #1
     1b6:	54a3      	strb	r3, [r4, r2]
     1b8:	3201      	adds	r2, #1
     1ba:	54a3      	strb	r3, [r4, r2]
     1bc:	3201      	adds	r2, #1
     1be:	54a3      	strb	r3, [r4, r2]
     1c0:	3201      	adds	r2, #1
     1c2:	54a3      	strb	r3, [r4, r2]
     1c4:	3201      	adds	r2, #1
     1c6:	54a3      	strb	r3, [r4, r2]
     1c8:	3201      	adds	r2, #1
     1ca:	54a3      	strb	r3, [r4, r2]
     1cc:	3201      	adds	r2, #1
     1ce:	54a3      	strb	r3, [r4, r2]
     1d0:	3201      	adds	r2, #1
     1d2:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     1d4:	3201      	adds	r2, #1
     1d6:	54a3      	strb	r3, [r4, r2]
     1d8:	3201      	adds	r2, #1
     1da:	54a3      	strb	r3, [r4, r2]
     1dc:	3201      	adds	r2, #1
     1de:	54a3      	strb	r3, [r4, r2]
     1e0:	3201      	adds	r2, #1
     1e2:	54a3      	strb	r3, [r4, r2]
     1e4:	3201      	adds	r2, #1
     1e6:	54a3      	strb	r3, [r4, r2]
     1e8:	3201      	adds	r2, #1
     1ea:	54a3      	strb	r3, [r4, r2]
     1ec:	3201      	adds	r2, #1
     1ee:	54a3      	strb	r3, [r4, r2]
     1f0:	3201      	adds	r2, #1
     1f2:	54a3      	strb	r3, [r4, r2]
     1f4:	3201      	adds	r2, #1
     1f6:	54a3      	strb	r3, [r4, r2]
     1f8:	3201      	adds	r2, #1
     1fa:	54a3      	strb	r3, [r4, r2]
     1fc:	3201      	adds	r2, #1
     1fe:	54a3      	strb	r3, [r4, r2]
     200:	3201      	adds	r2, #1
     202:	54a3      	strb	r3, [r4, r2]
     204:	3201      	adds	r2, #1
     206:	54a3      	strb	r3, [r4, r2]
     208:	3201      	adds	r2, #1
     20a:	54a3      	strb	r3, [r4, r2]
     20c:	3201      	adds	r2, #1
     20e:	54a3      	strb	r3, [r4, r2]
     210:	3201      	adds	r2, #1
     212:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     214:	3201      	adds	r2, #1
     216:	54a3      	strb	r3, [r4, r2]
     218:	3201      	adds	r2, #1
     21a:	54a3      	strb	r3, [r4, r2]
     21c:	3201      	adds	r2, #1
     21e:	54a3      	strb	r3, [r4, r2]
     220:	3201      	adds	r2, #1
     222:	54a3      	strb	r3, [r4, r2]
     224:	3201      	adds	r2, #1
     226:	54a3      	strb	r3, [r4, r2]
     228:	3201      	adds	r2, #1
     22a:	54a3      	strb	r3, [r4, r2]
     22c:	3201      	adds	r2, #1
     22e:	54a3      	strb	r3, [r4, r2]
     230:	3201      	adds	r2, #1
     232:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     234:	3241      	adds	r2, #65	; 0x41
     236:	54a3      	strb	r3, [r4, r2]
     238:	65a3      	str	r3, [r4, #88]	; 0x58
     23a:	67a3      	str	r3, [r4, #120]	; 0x78
     23c:	3201      	adds	r2, #1
     23e:	54a3      	strb	r3, [r4, r2]
     240:	65e3      	str	r3, [r4, #92]	; 0x5c
     242:	67e3      	str	r3, [r4, #124]	; 0x7c
     244:	3201      	adds	r2, #1
     246:	54a3      	strb	r3, [r4, r2]
     248:	6623      	str	r3, [r4, #96]	; 0x60
     24a:	3a1a      	subs	r2, #26
     24c:	50a3      	str	r3, [r4, r2]
     24e:	321b      	adds	r2, #27
     250:	54a3      	strb	r3, [r4, r2]
     252:	6663      	str	r3, [r4, #100]	; 0x64
     254:	3a17      	subs	r2, #23
     256:	50a3      	str	r3, [r4, r2]
     258:	3218      	adds	r2, #24
     25a:	54a3      	strb	r3, [r4, r2]
     25c:	66a3      	str	r3, [r4, #104]	; 0x68
     25e:	3a14      	subs	r2, #20
     260:	50a3      	str	r3, [r4, r2]
     262:	3215      	adds	r2, #21
     264:	54a3      	strb	r3, [r4, r2]
     266:	66e3      	str	r3, [r4, #108]	; 0x6c
     268:	3a11      	subs	r2, #17
     26a:	50a3      	str	r3, [r4, r2]
     26c:	3212      	adds	r2, #18
     26e:	54a3      	strb	r3, [r4, r2]
     270:	6723      	str	r3, [r4, #112]	; 0x70
     272:	3a0e      	subs	r2, #14
     274:	50a3      	str	r3, [r4, r2]
     276:	320f      	adds	r2, #15
     278:	54a3      	strb	r3, [r4, r2]
     27a:	6763      	str	r3, [r4, #116]	; 0x74
     27c:	3a0b      	subs	r2, #11
     27e:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     280:	2101      	movs	r1, #1
     282:	320c      	adds	r2, #12
     284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     286:	3201      	adds	r2, #1
     288:	54a3      	strb	r3, [r4, r2]
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000115 	.word	0x00000115
     290:	0000a758 	.word	0x0000a758

00000294 <tcc_init>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
     2a0:	b091      	sub	sp, #68	; 0x44
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	000c      	movs	r4, r1
     2a6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     2a8:	0008      	movs	r0, r1
     2aa:	4bc3      	ldr	r3, [pc, #780]	; (5b8 <tcc_init+0x324>)
     2ac:	4798      	blx	r3
     2ae:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2b0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b2:	48c2      	ldr	r0, [pc, #776]	; (5bc <tcc_init+0x328>)
     2b4:	6a02      	ldr	r2, [r0, #32]
     2b6:	009e      	lsls	r6, r3, #2
     2b8:	4fc1      	ldr	r7, [pc, #772]	; (5c0 <tcc_init+0x32c>)
     2ba:	59f7      	ldr	r7, [r6, r7]
     2bc:	433a      	orrs	r2, r7
     2be:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     2c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d506      	bpl.n	2d6 <tcc_init+0x42>
}
     2c8:	b011      	add	sp, #68	; 0x44
     2ca:	bc3c      	pop	{r2, r3, r4, r5}
     2cc:	4690      	mov	r8, r2
     2ce:	4699      	mov	r9, r3
     2d0:	46a2      	mov	sl, r4
     2d2:	46ab      	mov	fp, r5
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     2d6:	6822      	ldr	r2, [r4, #0]
     2d8:	2701      	movs	r7, #1
     2da:	4017      	ands	r7, r2
     2dc:	d1f4      	bne.n	2c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     2de:	48b9      	ldr	r0, [pc, #740]	; (5c4 <tcc_init+0x330>)
     2e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     2e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     2e4:	682e      	ldr	r6, [r5, #0]
     2e6:	42b2      	cmp	r2, r6
     2e8:	d3ee      	bcc.n	2c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     2ea:	686e      	ldr	r6, [r5, #4]
     2ec:	42b2      	cmp	r2, r6
     2ee:	d3eb      	bcc.n	2c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     2f0:	69e8      	ldr	r0, [r5, #28]
     2f2:	4282      	cmp	r2, r0
     2f4:	d200      	bcs.n	2f8 <tcc_init+0x64>
     2f6:	e1b9      	b.n	66c <tcc_init+0x3d8>
     2f8:	6a28      	ldr	r0, [r5, #32]
     2fa:	4282      	cmp	r2, r0
     2fc:	d200      	bcs.n	300 <tcc_init+0x6c>
     2fe:	e1b7      	b.n	670 <tcc_init+0x3dc>
     300:	6a68      	ldr	r0, [r5, #36]	; 0x24
     302:	4282      	cmp	r2, r0
     304:	d200      	bcs.n	308 <tcc_init+0x74>
     306:	e1b5      	b.n	674 <tcc_init+0x3e0>
     308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     30a:	4282      	cmp	r2, r0
     30c:	d200      	bcs.n	310 <tcc_init+0x7c>
     30e:	e1b3      	b.n	678 <tcc_init+0x3e4>
     310:	2298      	movs	r2, #152	; 0x98
     312:	4694      	mov	ip, r2
     314:	44ac      	add	ip, r5
     316:	4662      	mov	r2, ip
     318:	9208      	str	r2, [sp, #32]
     31a:	2000      	movs	r0, #0
     31c:	e003      	b.n	326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     31e:	3001      	adds	r0, #1
     320:	3201      	adds	r2, #1
     322:	2808      	cmp	r0, #8
     324:	d008      	beq.n	338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     326:	7816      	ldrb	r6, [r2, #0]
     328:	2e00      	cmp	r6, #0
     32a:	d0f8      	beq.n	31e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     32c:	4ea6      	ldr	r6, [pc, #664]	; (5c8 <tcc_init+0x334>)
     32e:	5c76      	ldrb	r6, [r6, r1]
     330:	4286      	cmp	r6, r0
     332:	dcf4      	bgt.n	31e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     334:	2017      	movs	r0, #23
     336:	e7c7      	b.n	2c8 <tcc_init+0x34>
     338:	2200      	movs	r2, #0
     33a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	4684      	mov	ip, r0
     342:	e002      	b.n	34a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     344:	3201      	adds	r2, #1
     346:	2a04      	cmp	r2, #4
     348:	d00e      	beq.n	368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     34a:	18a8      	adds	r0, r5, r2
     34c:	7c00      	ldrb	r0, [r0, #16]
     34e:	2801      	cmp	r0, #1
     350:	d1f8      	bne.n	344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     352:	489e      	ldr	r0, [pc, #632]	; (5cc <tcc_init+0x338>)
     354:	5c40      	ldrb	r0, [r0, r1]
     356:	4290      	cmp	r0, r2
     358:	da00      	bge.n	35c <tcc_init+0xc8>
     35a:	e18f      	b.n	67c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     35c:	4660      	mov	r0, ip
     35e:	4090      	lsls	r0, r2
     360:	9e02      	ldr	r6, [sp, #8]
     362:	4306      	orrs	r6, r0
     364:	9602      	str	r6, [sp, #8]
     366:	e7ed      	b.n	344 <tcc_init+0xb0>
	if (config->run_in_standby) {
     368:	329d      	adds	r2, #157	; 0x9d
     36a:	5caa      	ldrb	r2, [r5, r2]
     36c:	2a00      	cmp	r2, #0
     36e:	d004      	beq.n	37a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     370:	2280      	movs	r2, #128	; 0x80
     372:	0112      	lsls	r2, r2, #4
     374:	9902      	ldr	r1, [sp, #8]
     376:	4311      	orrs	r1, r2
     378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     37a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     37c:	1e51      	subs	r1, r2, #1
     37e:	418a      	sbcs	r2, r1
     380:	0092      	lsls	r2, r2, #2
     382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     384:	7a6a      	ldrb	r2, [r5, #9]
     386:	2a01      	cmp	r2, #1
     388:	d022      	beq.n	3d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     38a:	4a90      	ldr	r2, [pc, #576]	; (5cc <tcc_init+0x338>)
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	0011      	movs	r1, r2
     390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     392:	2235      	movs	r2, #53	; 0x35
     394:	5caa      	ldrb	r2, [r5, r2]
     396:	428a      	cmp	r2, r1
     398:	d300      	bcc.n	39c <tcc_init+0x108>
     39a:	e179      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     39c:	212c      	movs	r1, #44	; 0x2c
     39e:	5c69      	ldrb	r1, [r5, r1]
     3a0:	290f      	cmp	r1, #15
     3a2:	d900      	bls.n	3a6 <tcc_init+0x112>
     3a4:	e174      	b.n	690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     3a6:	7b28      	ldrb	r0, [r5, #12]
     3a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     3aa:	7ae8      	ldrb	r0, [r5, #11]
     3ac:	900b      	str	r0, [sp, #44]	; 0x2c
     3ae:	202d      	movs	r0, #45	; 0x2d
     3b0:	4682      	mov	sl, r0
     3b2:	44aa      	add	sl, r5
     3b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     3b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     3b8:	ae0e      	add	r6, sp, #56	; 0x38
     3ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3bc:	26c0      	movs	r6, #192	; 0xc0
     3be:	0136      	lsls	r6, r6, #4
     3c0:	46b1      	mov	r9, r6
     3c2:	4684      	mov	ip, r0
     3c4:	46a0      	mov	r8, r4
     3c6:	0028      	movs	r0, r5
     3c8:	4655      	mov	r5, sl
     3ca:	9309      	str	r3, [sp, #36]	; 0x24
     3cc:	4682      	mov	sl, r0
     3ce:	e035      	b.n	43c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     3d0:	9906      	ldr	r1, [sp, #24]
     3d2:	4311      	orrs	r1, r2
     3d4:	9106      	str	r1, [sp, #24]
     3d6:	e7d8      	b.n	38a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3d8:	0292      	lsls	r2, r2, #10
     3da:	464f      	mov	r7, r9
     3dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     3e0:	7919      	ldrb	r1, [r3, #4]
     3e2:	468b      	mov	fp, r1
     3e4:	2103      	movs	r1, #3
     3e6:	465f      	mov	r7, fp
     3e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3ea:	430a      	orrs	r2, r1
     3ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     3ee:	795a      	ldrb	r2, [r3, #5]
     3f0:	0152      	lsls	r2, r2, #5
     3f2:	2160      	movs	r1, #96	; 0x60
     3f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     3f8:	7999      	ldrb	r1, [r3, #6]
     3fa:	0209      	lsls	r1, r1, #8
     3fc:	26c0      	movs	r6, #192	; 0xc0
     3fe:	00b6      	lsls	r6, r6, #2
     400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     404:	79da      	ldrb	r2, [r3, #7]
     406:	0312      	lsls	r2, r2, #12
     408:	21e0      	movs	r1, #224	; 0xe0
     40a:	01c9      	lsls	r1, r1, #7
     40c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     40e:	4316      	orrs	r6, r2
     410:	4334      	orrs	r4, r6
     412:	9a03      	ldr	r2, [sp, #12]
     414:	4314      	orrs	r4, r2
     416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     418:	4662      	mov	r2, ip
     41a:	9907      	ldr	r1, [sp, #28]
     41c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     41e:	2a04      	cmp	r2, #4
     420:	d02a      	beq.n	478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     422:	7c9a      	ldrb	r2, [r3, #18]
     424:	9905      	ldr	r1, [sp, #20]
     426:	4291      	cmp	r1, r2
     428:	d800      	bhi.n	42c <tcc_init+0x198>
     42a:	e131      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     42c:	7a59      	ldrb	r1, [r3, #9]
     42e:	350a      	adds	r5, #10
     430:	2304      	movs	r3, #4
     432:	469b      	mov	fp, r3
     434:	44dc      	add	ip, fp
     436:	290f      	cmp	r1, #15
     438:	d900      	bls.n	43c <tcc_init+0x1a8>
     43a:	e129      	b.n	690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     43c:	0609      	lsls	r1, r1, #24
     43e:	23f0      	movs	r3, #240	; 0xf0
     440:	051b      	lsls	r3, r3, #20
     442:	4019      	ands	r1, r3
     444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     446:	782e      	ldrb	r6, [r5, #0]
     448:	0436      	lsls	r6, r6, #16
     44a:	20ff      	movs	r0, #255	; 0xff
     44c:	0400      	lsls	r0, r0, #16
     44e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     450:	7868      	ldrb	r0, [r5, #1]
     452:	2480      	movs	r4, #128	; 0x80
     454:	2800      	cmp	r0, #0
     456:	d100      	bne.n	45a <tcc_init+0x1c6>
     458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     45a:	7898      	ldrb	r0, [r3, #2]
     45c:	2708      	movs	r7, #8
     45e:	9703      	str	r7, [sp, #12]
     460:	2800      	cmp	r0, #0
     462:	d101      	bne.n	468 <tcc_init+0x1d4>
     464:	9804      	ldr	r0, [sp, #16]
     466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     468:	78d8      	ldrb	r0, [r3, #3]
     46a:	4683      	mov	fp, r0
     46c:	2010      	movs	r0, #16
     46e:	465f      	mov	r7, fp
     470:	2f00      	cmp	r7, #0
     472:	d1b1      	bne.n	3d8 <tcc_init+0x144>
     474:	9804      	ldr	r0, [sp, #16]
     476:	e7af      	b.n	3d8 <tcc_init+0x144>
     478:	4644      	mov	r4, r8
     47a:	4655      	mov	r5, sl
     47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     47e:	4a52      	ldr	r2, [pc, #328]	; (5c8 <tcc_init+0x334>)
     480:	5cd2      	ldrb	r2, [r2, r3]
     482:	4691      	mov	r9, r2
     484:	4651      	mov	r1, sl
     486:	3150      	adds	r1, #80	; 0x50
     488:	4650      	mov	r0, sl
     48a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     48c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     48e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     490:	2601      	movs	r6, #1
     492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     494:	2602      	movs	r6, #2
     496:	36ff      	adds	r6, #255	; 0xff
     498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     49a:	2680      	movs	r6, #128	; 0x80
     49c:	0276      	lsls	r6, r6, #9
     49e:	46b0      	mov	r8, r6
     4a0:	46a4      	mov	ip, r4
     4a2:	001c      	movs	r4, r3
     4a4:	464b      	mov	r3, r9
     4a6:	e00f      	b.n	4c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4a8:	7806      	ldrb	r6, [r0, #0]
     4aa:	2e00      	cmp	r6, #0
     4ac:	d007      	beq.n	4be <tcc_init+0x22a>
			if (i >= ow_num) {
     4ae:	4293      	cmp	r3, r2
     4b0:	d800      	bhi.n	4b4 <tcc_init+0x220>
     4b2:	e0e7      	b.n	684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     4b4:	2e02      	cmp	r6, #2
     4b6:	d014      	beq.n	4e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     4b8:	4656      	mov	r6, sl
     4ba:	4096      	lsls	r6, r2
     4bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4be:	3201      	adds	r2, #1
     4c0:	3101      	adds	r1, #1
     4c2:	3002      	adds	r0, #2
     4c4:	2a08      	cmp	r2, #8
     4c6:	d010      	beq.n	4ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     4c8:	780e      	ldrb	r6, [r1, #0]
     4ca:	2e00      	cmp	r6, #0
     4cc:	d0ec      	beq.n	4a8 <tcc_init+0x214>
			if (i >= ow_num) {
     4ce:	4293      	cmp	r3, r2
     4d0:	d800      	bhi.n	4d4 <tcc_init+0x240>
     4d2:	e0d5      	b.n	680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     4d4:	4646      	mov	r6, r8
     4d6:	4096      	lsls	r6, r2
     4d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4da:	7806      	ldrb	r6, [r0, #0]
     4dc:	2e00      	cmp	r6, #0
     4de:	d1e9      	bne.n	4b4 <tcc_init+0x220>
     4e0:	e7ed      	b.n	4be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     4e2:	465e      	mov	r6, fp
     4e4:	4096      	lsls	r6, r2
     4e6:	4337      	orrs	r7, r6
     4e8:	e7e9      	b.n	4be <tcc_init+0x22a>
     4ea:	4699      	mov	r9, r3
     4ec:	0023      	movs	r3, r4
     4ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4f0:	7e6a      	ldrb	r2, [r5, #25]
     4f2:	0112      	lsls	r2, r2, #4
     4f4:	2130      	movs	r1, #48	; 0x30
     4f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     4f8:	7e28      	ldrb	r0, [r5, #24]
     4fa:	2207      	movs	r2, #7
     4fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     502:	2080      	movs	r0, #128	; 0x80
     504:	0240      	lsls	r0, r0, #9
     506:	000e      	movs	r6, r1
     508:	e002      	b.n	510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     50a:	3201      	adds	r2, #1
     50c:	2a04      	cmp	r2, #4
     50e:	d00b      	beq.n	528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     510:	18a9      	adds	r1, r5, r2
     512:	7d09      	ldrb	r1, [r1, #20]
     514:	2900      	cmp	r1, #0
     516:	d0f8      	beq.n	50a <tcc_init+0x276>
			if (n >= cc_num) {
     518:	9905      	ldr	r1, [sp, #20]
     51a:	4291      	cmp	r1, r2
     51c:	dc00      	bgt.n	520 <tcc_init+0x28c>
     51e:	e0b3      	b.n	688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     520:	0001      	movs	r1, r0
     522:	4091      	lsls	r1, r2
     524:	430e      	orrs	r6, r1
     526:	e7f0      	b.n	50a <tcc_init+0x276>
     528:	46b2      	mov	sl, r6
     52a:	9801      	ldr	r0, [sp, #4]
     52c:	0002      	movs	r2, r0
     52e:	3204      	adds	r2, #4
     530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     532:	2100      	movs	r1, #0
     534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     536:	4282      	cmp	r2, r0
     538:	d1fc      	bne.n	534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     53a:	2200      	movs	r2, #0
     53c:	9801      	ldr	r0, [sp, #4]
     53e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     542:	0099      	lsls	r1, r3, #2
     544:	4a22      	ldr	r2, [pc, #136]	; (5d0 <tcc_init+0x33c>)
     546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     54a:	22a0      	movs	r2, #160	; 0xa0
     54c:	5ca9      	ldrb	r1, [r5, r2]
     54e:	3a64      	subs	r2, #100	; 0x64
     550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     552:	a90d      	add	r1, sp, #52	; 0x34
     554:	7aaa      	ldrb	r2, [r5, #10]
     556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     558:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <tcc_init+0x340>)
     55a:	5cd6      	ldrb	r6, [r2, r3]
     55c:	0030      	movs	r0, r6
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <tcc_init+0x344>)
     560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     562:	0030      	movs	r0, r6
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <tcc_init+0x348>)
     566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     568:	464b      	mov	r3, r9
     56a:	2b00      	cmp	r3, #0
     56c:	dd3c      	ble.n	5e8 <tcc_init+0x354>
     56e:	002e      	movs	r6, r5
     570:	3658      	adds	r6, #88	; 0x58
     572:	3398      	adds	r3, #152	; 0x98
     574:	4698      	mov	r8, r3
     576:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     578:	2301      	movs	r3, #1
     57a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     57c:	46ab      	mov	fp, r5
     57e:	4645      	mov	r5, r8
     580:	46a0      	mov	r8, r4
     582:	9c08      	ldr	r4, [sp, #32]
     584:	e003      	b.n	58e <tcc_init+0x2fa>
     586:	3401      	adds	r4, #1
     588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     58a:	42ac      	cmp	r4, r5
     58c:	d02a      	beq.n	5e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0f8      	beq.n	586 <tcc_init+0x2f2>
     594:	ab0c      	add	r3, sp, #48	; 0x30
     596:	464a      	mov	r2, r9
     598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     59a:	2300      	movs	r3, #0
     59c:	aa0c      	add	r2, sp, #48	; 0x30
     59e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     5a0:	0013      	movs	r3, r2
     5a2:	2220      	movs	r2, #32
     5a4:	18b2      	adds	r2, r6, r2
     5a6:	7812      	ldrb	r2, [r2, #0]
     5a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5aa:	464a      	mov	r2, r9
     5ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	0019      	movs	r1, r3
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <tcc_init+0x34c>)
     5b4:	4798      	blx	r3
     5b6:	e7e6      	b.n	586 <tcc_init+0x2f2>
     5b8:	00000115 	.word	0x00000115
     5bc:	40000400 	.word	0x40000400
     5c0:	0000a744 	.word	0x0000a744
     5c4:	0000a758 	.word	0x0000a758
     5c8:	0000a764 	.word	0x0000a764
     5cc:	0000a750 	.word	0x0000a750
     5d0:	20000334 	.word	0x20000334
     5d4:	0000a754 	.word	0x0000a754
     5d8:	00008b55 	.word	0x00008b55
     5dc:	00008ac9 	.word	0x00008ac9
     5e0:	00008c4d 	.word	0x00008c4d
     5e4:	4644      	mov	r4, r8
     5e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     5ee:	0212      	lsls	r2, r2, #8
     5f0:	4313      	orrs	r3, r2
     5f2:	9a02      	ldr	r2, [sp, #8]
     5f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     5f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5f8:	2204      	movs	r2, #4
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	421a      	tst	r2, r3
     5fe:	d1fc      	bne.n	5fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     600:	23ff      	movs	r3, #255	; 0xff
     602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     604:	2204      	movs	r2, #4
     606:	68a3      	ldr	r3, [r4, #8]
     608:	421a      	tst	r2, r3
     60a:	d1fc      	bne.n	606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     60c:	466b      	mov	r3, sp
     60e:	7e1b      	ldrb	r3, [r3, #24]
     610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     61a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     61c:	4a1d      	ldr	r2, [pc, #116]	; (694 <tcc_init+0x400>)
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	4213      	tst	r3, r2
     622:	d1fc      	bne.n	61e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     624:	4653      	mov	r3, sl
     626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     628:	2210      	movs	r2, #16
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	421a      	tst	r2, r3
     62e:	d1fc      	bne.n	62a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     630:	682b      	ldr	r3, [r5, #0]
     632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     634:	4a18      	ldr	r2, [pc, #96]	; (698 <tcc_init+0x404>)
     636:	68a3      	ldr	r3, [r4, #8]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     63c:	686b      	ldr	r3, [r5, #4]
     63e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     640:	9805      	ldr	r0, [sp, #20]
     642:	2800      	cmp	r0, #0
     644:	dd22      	ble.n	68c <tcc_init+0x3f8>
     646:	351c      	adds	r5, #28
     648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     64a:	4e14      	ldr	r6, [pc, #80]	; (69c <tcc_init+0x408>)
     64c:	0032      	movs	r2, r6
     64e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     650:	68a3      	ldr	r3, [r4, #8]
     652:	421a      	tst	r2, r3
     654:	d1fc      	bne.n	650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     656:	cd04      	ldmia	r5!, {r2}
     658:	000b      	movs	r3, r1
     65a:	3310      	adds	r3, #16
     65c:	009b      	lsls	r3, r3, #2
     65e:	18e3      	adds	r3, r4, r3
     660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     662:	3101      	adds	r1, #1
     664:	4288      	cmp	r0, r1
     666:	dcf1      	bgt.n	64c <tcc_init+0x3b8>
	return STATUS_OK;
     668:	2000      	movs	r0, #0
     66a:	e62d      	b.n	2c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     66c:	2017      	movs	r0, #23
     66e:	e62b      	b.n	2c8 <tcc_init+0x34>
     670:	2017      	movs	r0, #23
     672:	e629      	b.n	2c8 <tcc_init+0x34>
     674:	2017      	movs	r0, #23
     676:	e627      	b.n	2c8 <tcc_init+0x34>
     678:	2017      	movs	r0, #23
     67a:	e625      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e623      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     680:	2017      	movs	r0, #23
     682:	e621      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     684:	2017      	movs	r0, #23
     686:	e61f      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     688:	2017      	movs	r0, #23
     68a:	e61d      	b.n	2c8 <tcc_init+0x34>
	return STATUS_OK;
     68c:	2000      	movs	r0, #0
     68e:	e61b      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e619      	b.n	2c8 <tcc_init+0x34>
     694:	00020040 	.word	0x00020040
     698:	00040080 	.word	0x00040080
     69c:	00080100 	.word	0x00080100

000006a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6a0:	0092      	lsls	r2, r2, #2
     6a2:	1883      	adds	r3, r0, r2
     6a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     6a6:	4b03      	ldr	r3, [pc, #12]	; (6b4 <tcc_register_callback+0x14>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
     6ac:	4313      	orrs	r3, r2
     6ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     6b0:	2000      	movs	r0, #0
     6b2:	4770      	bx	lr
     6b4:	0000a768 	.word	0x0000a768

000006b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     6be:	6800      	ldr	r0, [r0, #0]
     6c0:	4b09      	ldr	r3, [pc, #36]	; (6e8 <tcc_enable_callback+0x30>)
     6c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c6:	5c1b      	ldrb	r3, [r3, r0]
     6c8:	221f      	movs	r2, #31
     6ca:	401a      	ands	r2, r3
     6cc:	2301      	movs	r3, #1
     6ce:	4093      	lsls	r3, r2
     6d0:	4a07      	ldr	r2, [pc, #28]	; (6f0 <tcc_enable_callback+0x38>)
     6d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <tcc_enable_callback+0x3c>)
     6d8:	58ea      	ldr	r2, [r5, r3]
     6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6dc:	4313      	orrs	r3, r2
     6de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000115 	.word	0x00000115
     6ec:	0000a798 	.word	0x0000a798
     6f0:	e000e100 	.word	0xe000e100
     6f4:	0000a768 	.word	0x0000a768

000006f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6fe:	0080      	lsls	r0, r0, #2
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <_tcc_interrupt_handler+0x44>)
     702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     704:	683b      	ldr	r3, [r7, #0]
     706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     70c:	4013      	ands	r3, r2
     70e:	401e      	ands	r6, r3
     710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     712:	4b0b      	ldr	r3, [pc, #44]	; (740 <_tcc_interrupt_handler+0x48>)
     714:	4698      	mov	r8, r3
     716:	e002      	b.n	71e <_tcc_interrupt_handler+0x26>
     718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     71a:	2c30      	cmp	r4, #48	; 0x30
     71c:	d00a      	beq.n	734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     71e:	4643      	mov	r3, r8
     720:	58e5      	ldr	r5, [r4, r3]
     722:	4235      	tst	r5, r6
     724:	d0f8      	beq.n	718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     726:	193b      	adds	r3, r7, r4
     728:	685b      	ldr	r3, [r3, #4]
     72a:	0038      	movs	r0, r7
     72c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     72e:	683b      	ldr	r3, [r7, #0]
     730:	62dd      	str	r5, [r3, #44]	; 0x2c
     732:	e7f1      	b.n	718 <_tcc_interrupt_handler+0x20>
		}
	}
}
     734:	bc04      	pop	{r2}
     736:	4690      	mov	r8, r2
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	20000334 	.word	0x20000334
     740:	0000a768 	.word	0x0000a768

00000744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006f9 	.word	0x000006f9

00000754 <TCC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TCC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006f9 	.word	0x000006f9

00000764 <TCC2_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2002      	movs	r0, #2
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TCC2_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006f9 	.word	0x000006f9

00000774 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     774:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <sd_mmc_configure_slot+0x20>)
     778:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     77a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     77c:	5ccb      	ldrb	r3, [r1, r3]
     77e:	1e5a      	subs	r2, r3, #1
     780:	4193      	sbcs	r3, r2
     782:	b2db      	uxtb	r3, r3
     784:	7c4a      	ldrb	r2, [r1, #17]
     786:	6809      	ldr	r1, [r1, #0]
     788:	4803      	ldr	r0, [pc, #12]	; (798 <sd_mmc_configure_slot+0x24>)
     78a:	7800      	ldrb	r0, [r0, #0]
     78c:	4c03      	ldr	r4, [pc, #12]	; (79c <sd_mmc_configure_slot+0x28>)
     78e:	47a0      	blx	r4
}
     790:	bd10      	pop	{r4, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	200001a8 	.word	0x200001a8
     798:	200001b1 	.word	0x200001b1
     79c:	000082dd 	.word	0x000082dd

000007a0 <sd_mmc_select_slot>:
{
     7a0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     7a2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     7a4:	2800      	cmp	r0, #0
     7a6:	d001      	beq.n	7ac <sd_mmc_select_slot+0xc>
}
     7a8:	0018      	movs	r0, r3
     7aa:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     7ac:	4b40      	ldr	r3, [pc, #256]	; (8b0 <sd_mmc_select_slot+0x110>)
     7ae:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7b0:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7b4:	2a00      	cmp	r2, #0
     7b6:	d104      	bne.n	7c2 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     7b8:	094b      	lsrs	r3, r1, #5
     7ba:	01db      	lsls	r3, r3, #7
     7bc:	4a3d      	ldr	r2, [pc, #244]	; (8b4 <sd_mmc_select_slot+0x114>)
     7be:	4694      	mov	ip, r2
     7c0:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     7c2:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7c4:	221f      	movs	r2, #31
     7c6:	400a      	ands	r2, r1
     7c8:	2301      	movs	r3, #1
     7ca:	4093      	lsls	r3, r2
     7cc:	4218      	tst	r0, r3
     7ce:	d010      	beq.n	7f2 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     7d0:	4b37      	ldr	r3, [pc, #220]	; (8b0 <sd_mmc_select_slot+0x110>)
     7d2:	7b9b      	ldrb	r3, [r3, #14]
     7d4:	2b01      	cmp	r3, #1
     7d6:	d004      	beq.n	7e2 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     7d8:	2204      	movs	r2, #4
     7da:	4b35      	ldr	r3, [pc, #212]	; (8b0 <sd_mmc_select_slot+0x110>)
     7dc:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     7de:	2302      	movs	r3, #2
     7e0:	e7e2      	b.n	7a8 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     7e2:	4b35      	ldr	r3, [pc, #212]	; (8b8 <sd_mmc_select_slot+0x118>)
     7e4:	781b      	ldrb	r3, [r3, #0]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d0f6      	beq.n	7d8 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     7ea:	2200      	movs	r2, #0
     7ec:	4b33      	ldr	r3, [pc, #204]	; (8bc <sd_mmc_select_slot+0x11c>)
     7ee:	601a      	str	r2, [r3, #0]
     7f0:	e7f2      	b.n	7d8 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     7f2:	4b2f      	ldr	r3, [pc, #188]	; (8b0 <sd_mmc_select_slot+0x110>)
     7f4:	7b9a      	ldrb	r2, [r3, #14]
     7f6:	2a04      	cmp	r2, #4
     7f8:	d005      	beq.n	806 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     7fa:	2a01      	cmp	r2, #1
     7fc:	d033      	beq.n	866 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     7fe:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     800:	2a03      	cmp	r2, #3
     802:	d0d1      	beq.n	7a8 <sd_mmc_select_slot+0x8>
     804:	e045      	b.n	892 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     806:	3a03      	subs	r2, #3
     808:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     80a:	4b2c      	ldr	r3, [pc, #176]	; (8bc <sd_mmc_select_slot+0x11c>)
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	2b00      	cmp	r3, #0
     810:	d017      	beq.n	842 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     812:	2200      	movs	r2, #0
     814:	4b28      	ldr	r3, [pc, #160]	; (8b8 <sd_mmc_select_slot+0x118>)
     816:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     818:	2000      	movs	r0, #0
     81a:	4b29      	ldr	r3, [pc, #164]	; (8c0 <sd_mmc_select_slot+0x120>)
     81c:	4798      	blx	r3
     81e:	22fa      	movs	r2, #250	; 0xfa
     820:	0092      	lsls	r2, r2, #2
     822:	2300      	movs	r3, #0
     824:	2100      	movs	r1, #0
     826:	4c27      	ldr	r4, [pc, #156]	; (8c4 <sd_mmc_select_slot+0x124>)
     828:	47a0      	blx	r4
     82a:	4a27      	ldr	r2, [pc, #156]	; (8c8 <sd_mmc_select_slot+0x128>)
     82c:	2300      	movs	r3, #0
     82e:	1880      	adds	r0, r0, r2
     830:	4159      	adcs	r1, r3
     832:	4a26      	ldr	r2, [pc, #152]	; (8cc <sd_mmc_select_slot+0x12c>)
     834:	2300      	movs	r3, #0
     836:	4c26      	ldr	r4, [pc, #152]	; (8d0 <sd_mmc_select_slot+0x130>)
     838:	47a0      	blx	r4
     83a:	4b26      	ldr	r3, [pc, #152]	; (8d4 <sd_mmc_select_slot+0x134>)
     83c:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     83e:	2302      	movs	r3, #2
     840:	e7b2      	b.n	7a8 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     842:	2401      	movs	r4, #1
     844:	4b1c      	ldr	r3, [pc, #112]	; (8b8 <sd_mmc_select_slot+0x118>)
     846:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     848:	2000      	movs	r0, #0
     84a:	4b1d      	ldr	r3, [pc, #116]	; (8c0 <sd_mmc_select_slot+0x120>)
     84c:	4798      	blx	r3
     84e:	21fa      	movs	r1, #250	; 0xfa
     850:	0149      	lsls	r1, r1, #5
     852:	4b21      	ldr	r3, [pc, #132]	; (8d8 <sd_mmc_select_slot+0x138>)
     854:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     856:	23fa      	movs	r3, #250	; 0xfa
     858:	009b      	lsls	r3, r3, #2
     85a:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     85c:	4b17      	ldr	r3, [pc, #92]	; (8bc <sd_mmc_select_slot+0x11c>)
     85e:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     860:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     862:	2302      	movs	r3, #2
     864:	e7a0      	b.n	7a8 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     866:	4b14      	ldr	r3, [pc, #80]	; (8b8 <sd_mmc_select_slot+0x118>)
     868:	781b      	ldrb	r3, [r3, #0]
     86a:	2b00      	cmp	r3, #0
     86c:	d007      	beq.n	87e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     86e:	4b13      	ldr	r3, [pc, #76]	; (8bc <sd_mmc_select_slot+0x11c>)
     870:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     872:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     874:	03d2      	lsls	r2, r2, #15
     876:	d597      	bpl.n	7a8 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     878:	2200      	movs	r2, #0
     87a:	4b10      	ldr	r3, [pc, #64]	; (8bc <sd_mmc_select_slot+0x11c>)
     87c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     87e:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <sd_mmc_select_slot+0x110>)
     880:	2202      	movs	r2, #2
     882:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     884:	4a15      	ldr	r2, [pc, #84]	; (8dc <sd_mmc_select_slot+0x13c>)
     886:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     888:	2201      	movs	r2, #1
     88a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     88c:	2100      	movs	r1, #0
     88e:	3221      	adds	r2, #33	; 0x21
     890:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     892:	2200      	movs	r2, #0
     894:	4b12      	ldr	r3, [pc, #72]	; (8e0 <sd_mmc_select_slot+0x140>)
     896:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     898:	4c05      	ldr	r4, [pc, #20]	; (8b0 <sd_mmc_select_slot+0x110>)
     89a:	4b12      	ldr	r3, [pc, #72]	; (8e4 <sd_mmc_select_slot+0x144>)
     89c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     89e:	4b12      	ldr	r3, [pc, #72]	; (8e8 <sd_mmc_select_slot+0x148>)
     8a0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     8a2:	7ba3      	ldrb	r3, [r4, #14]
     8a4:	3b02      	subs	r3, #2
     8a6:	425a      	negs	r2, r3
     8a8:	4153      	adcs	r3, r2
     8aa:	b2db      	uxtb	r3, r3
     8ac:	e77c      	b.n	7a8 <sd_mmc_select_slot+0x8>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	2000000c 	.word	0x2000000c
     8b4:	41004400 	.word	0x41004400
     8b8:	200001b0 	.word	0x200001b0
     8bc:	e000e010 	.word	0xe000e010
     8c0:	00008a3d 	.word	0x00008a3d
     8c4:	00009179 	.word	0x00009179
     8c8:	00001b57 	.word	0x00001b57
     8cc:	00001b58 	.word	0x00001b58
     8d0:	00009139 	.word	0x00009139
     8d4:	20000001 	.word	0x20000001
     8d8:	00008dd1 	.word	0x00008dd1
     8dc:	00061a80 	.word	0x00061a80
     8e0:	200001b1 	.word	0x200001b1
     8e4:	200001a8 	.word	0x200001a8
     8e8:	00000775 	.word	0x00000775

000008ec <sd_mmc_cmd13>:
{
     8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ee:	4d09      	ldr	r5, [pc, #36]	; (914 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8f0:	4f09      	ldr	r7, [pc, #36]	; (918 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     8f2:	4e0a      	ldr	r6, [pc, #40]	; (91c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8f4:	2100      	movs	r1, #0
     8f6:	480a      	ldr	r0, [pc, #40]	; (920 <sd_mmc_cmd13+0x34>)
     8f8:	47b8      	blx	r7
     8fa:	1e04      	subs	r4, r0, #0
     8fc:	d007      	beq.n	90e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     8fe:	47b0      	blx	r6
     900:	23ff      	movs	r3, #255	; 0xff
     902:	4203      	tst	r3, r0
     904:	d003      	beq.n	90e <sd_mmc_cmd13+0x22>
     906:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     908:	2d00      	cmp	r5, #0
     90a:	d1f3      	bne.n	8f4 <sd_mmc_cmd13+0x8>
			return false;
     90c:	2400      	movs	r4, #0
}
     90e:	0020      	movs	r0, r4
     910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	00030d41 	.word	0x00030d41
     918:	00008521 	.word	0x00008521
     91c:	00008539 	.word	0x00008539
     920:	00001b0d 	.word	0x00001b0d

00000924 <sd_mmc_cmd9_spi>:
{
     924:	b510      	push	{r4, lr}
     926:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     928:	4b0c      	ldr	r3, [pc, #48]	; (95c <sd_mmc_cmd9_spi+0x38>)
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	8999      	ldrh	r1, [r3, #12]
     92e:	0409      	lsls	r1, r1, #16
     930:	2301      	movs	r3, #1
     932:	9300      	str	r3, [sp, #0]
     934:	2210      	movs	r2, #16
     936:	480a      	ldr	r0, [pc, #40]	; (960 <sd_mmc_cmd9_spi+0x3c>)
     938:	4c0a      	ldr	r4, [pc, #40]	; (964 <sd_mmc_cmd9_spi+0x40>)
     93a:	47a0      	blx	r4
     93c:	2800      	cmp	r0, #0
     93e:	d101      	bne.n	944 <sd_mmc_cmd9_spi+0x20>
}
     940:	b002      	add	sp, #8
     942:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     944:	4b05      	ldr	r3, [pc, #20]	; (95c <sd_mmc_cmd9_spi+0x38>)
     946:	6818      	ldr	r0, [r3, #0]
     948:	3012      	adds	r0, #18
     94a:	2101      	movs	r1, #1
     94c:	4b06      	ldr	r3, [pc, #24]	; (968 <sd_mmc_cmd9_spi+0x44>)
     94e:	4798      	blx	r3
     950:	2800      	cmp	r0, #0
     952:	d0f5      	beq.n	940 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <sd_mmc_cmd9_spi+0x48>)
     956:	4798      	blx	r3
     958:	e7f2      	b.n	940 <sd_mmc_cmd9_spi+0x1c>
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	200001a8 	.word	0x200001a8
     960:	00081109 	.word	0x00081109
     964:	00008391 	.word	0x00008391
     968:	000085bd 	.word	0x000085bd
     96c:	00008649 	.word	0x00008649

00000970 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     970:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     972:	4b04      	ldr	r3, [pc, #16]	; (984 <sd_mmc_deselect_slot+0x14>)
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b00      	cmp	r3, #0
     978:	d000      	beq.n	97c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     97a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     97c:	2000      	movs	r0, #0
     97e:	4b02      	ldr	r3, [pc, #8]	; (988 <sd_mmc_deselect_slot+0x18>)
     980:	4798      	blx	r3
}
     982:	e7fa      	b.n	97a <sd_mmc_deselect_slot+0xa>
     984:	200001b1 	.word	0x200001b1
     988:	00008331 	.word	0x00008331

0000098c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     98c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     98e:	2204      	movs	r2, #4
     990:	4b03      	ldr	r3, [pc, #12]	; (9a0 <sd_mmc_init+0x14>)
     992:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     994:	32fb      	adds	r2, #251	; 0xfb
     996:	4b03      	ldr	r3, [pc, #12]	; (9a4 <sd_mmc_init+0x18>)
     998:	701a      	strb	r2, [r3, #0]
	driver_init();
     99a:	4b03      	ldr	r3, [pc, #12]	; (9a8 <sd_mmc_init+0x1c>)
     99c:	4798      	blx	r3
}
     99e:	bd10      	pop	{r4, pc}
     9a0:	2000000c 	.word	0x2000000c
     9a4:	200001b1 	.word	0x200001b1
     9a8:	000081e9 	.word	0x000081e9

000009ac <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ae:	46c6      	mov	lr, r8
     9b0:	b500      	push	{lr}
     9b2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     9b4:	4bcb      	ldr	r3, [pc, #812]	; (ce4 <sd_mmc_check+0x338>)
     9b6:	4798      	blx	r3
     9b8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     9ba:	2801      	cmp	r0, #1
     9bc:	d006      	beq.n	9cc <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     9be:	4bca      	ldr	r3, [pc, #808]	; (ce8 <sd_mmc_check+0x33c>)
     9c0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     9c2:	0020      	movs	r0, r4
     9c4:	b008      	add	sp, #32
     9c6:	bc04      	pop	{r2}
     9c8:	4690      	mov	r8, r2
     9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     9cc:	4bc7      	ldr	r3, [pc, #796]	; (cec <sd_mmc_check+0x340>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	2201      	movs	r2, #1
     9d2:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     9d4:	2200      	movs	r2, #0
     9d6:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     9d8:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     9da:	4bc5      	ldr	r3, [pc, #788]	; (cf0 <sd_mmc_check+0x344>)
     9dc:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     9de:	2100      	movs	r1, #0
     9e0:	2088      	movs	r0, #136	; 0x88
     9e2:	0140      	lsls	r0, r0, #5
     9e4:	4bc3      	ldr	r3, [pc, #780]	; (cf4 <sd_mmc_check+0x348>)
     9e6:	4798      	blx	r3
     9e8:	2800      	cmp	r0, #0
     9ea:	d107      	bne.n	9fc <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     9ec:	4bbf      	ldr	r3, [pc, #764]	; (cec <sd_mmc_check+0x340>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	2203      	movs	r2, #3
     9f2:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     9f4:	4bbc      	ldr	r3, [pc, #752]	; (ce8 <sd_mmc_check+0x33c>)
     9f6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     9f8:	2403      	movs	r4, #3
     9fa:	e7e2      	b.n	9c2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     9fc:	21d5      	movs	r1, #213	; 0xd5
     9fe:	0049      	lsls	r1, r1, #1
     a00:	48bd      	ldr	r0, [pc, #756]	; (cf8 <sd_mmc_check+0x34c>)
     a02:	4bbc      	ldr	r3, [pc, #752]	; (cf4 <sd_mmc_check+0x348>)
     a04:	4798      	blx	r3
	*v2 = 0;
     a06:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a08:	2800      	cmp	r0, #0
     a0a:	d125      	bne.n	a58 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a0c:	4bb7      	ldr	r3, [pc, #732]	; (cec <sd_mmc_check+0x340>)
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	7bdb      	ldrb	r3, [r3, #15]
     a12:	07db      	lsls	r3, r3, #31
     a14:	d500      	bpl.n	a18 <sd_mmc_check+0x6c>
     a16:	e1eb      	b.n	df0 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a18:	4bb4      	ldr	r3, [pc, #720]	; (cec <sd_mmc_check+0x340>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	7bda      	ldrb	r2, [r3, #15]
     a1e:	2309      	movs	r3, #9
     a20:	4013      	ands	r3, r2
     a22:	2b01      	cmp	r3, #1
     a24:	d10f      	bne.n	a46 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a26:	2180      	movs	r1, #128	; 0x80
     a28:	0089      	lsls	r1, r1, #2
     a2a:	48b4      	ldr	r0, [pc, #720]	; (cfc <sd_mmc_check+0x350>)
     a2c:	4bb1      	ldr	r3, [pc, #708]	; (cf4 <sd_mmc_check+0x348>)
     a2e:	4798      	blx	r3
     a30:	2800      	cmp	r0, #0
     a32:	d0db      	beq.n	9ec <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a34:	4bad      	ldr	r3, [pc, #692]	; (cec <sd_mmc_check+0x340>)
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	7bdb      	ldrb	r3, [r3, #15]
     a3a:	07db      	lsls	r3, r3, #31
     a3c:	d503      	bpl.n	a46 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     a3e:	4bb0      	ldr	r3, [pc, #704]	; (d00 <sd_mmc_check+0x354>)
     a40:	4798      	blx	r3
     a42:	2800      	cmp	r0, #0
     a44:	d0d2      	beq.n	9ec <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a46:	4baf      	ldr	r3, [pc, #700]	; (d04 <sd_mmc_check+0x358>)
     a48:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     a4a:	4ba8      	ldr	r3, [pc, #672]	; (cec <sd_mmc_check+0x340>)
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	2200      	movs	r2, #0
     a50:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     a52:	4ba5      	ldr	r3, [pc, #660]	; (ce8 <sd_mmc_check+0x33c>)
     a54:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     a56:	e7b4      	b.n	9c2 <sd_mmc_check+0x16>
	resp = driver_get_response();
     a58:	4bab      	ldr	r3, [pc, #684]	; (d08 <sd_mmc_check+0x35c>)
     a5a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     a5c:	1c43      	adds	r3, r0, #1
     a5e:	d100      	bne.n	a62 <sd_mmc_check+0xb6>
     a60:	e1c4      	b.n	dec <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a62:	0500      	lsls	r0, r0, #20
     a64:	0d00      	lsrs	r0, r0, #20
     a66:	23d5      	movs	r3, #213	; 0xd5
     a68:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     a6a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a6c:	4298      	cmp	r0, r3
     a6e:	d1bd      	bne.n	9ec <sd_mmc_check+0x40>
     a70:	e7cc      	b.n	a0c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     a72:	2100      	movs	r1, #0
     a74:	48a5      	ldr	r0, [pc, #660]	; (d0c <sd_mmc_check+0x360>)
     a76:	4b9f      	ldr	r3, [pc, #636]	; (cf4 <sd_mmc_check+0x348>)
     a78:	4798      	blx	r3
     a7a:	2800      	cmp	r0, #0
     a7c:	d119      	bne.n	ab2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     a7e:	4b9b      	ldr	r3, [pc, #620]	; (cec <sd_mmc_check+0x340>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	2202      	movs	r2, #2
     a84:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a86:	2100      	movs	r1, #0
     a88:	2088      	movs	r0, #136	; 0x88
     a8a:	0140      	lsls	r0, r0, #5
     a8c:	4b99      	ldr	r3, [pc, #612]	; (cf4 <sd_mmc_check+0x348>)
     a8e:	4798      	blx	r3
     a90:	2800      	cmp	r0, #0
     a92:	d0ab      	beq.n	9ec <sd_mmc_check+0x40>
     a94:	4d9e      	ldr	r5, [pc, #632]	; (d10 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a96:	4f97      	ldr	r7, [pc, #604]	; (cf4 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     a98:	4e9b      	ldr	r6, [pc, #620]	; (d08 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a9a:	2100      	movs	r1, #0
     a9c:	489d      	ldr	r0, [pc, #628]	; (d14 <sd_mmc_check+0x368>)
     a9e:	47b8      	blx	r7
     aa0:	2800      	cmp	r0, #0
     aa2:	d0a3      	beq.n	9ec <sd_mmc_check+0x40>
		resp = driver_get_response();
     aa4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     aa6:	07c3      	lsls	r3, r0, #31
     aa8:	d57d      	bpl.n	ba6 <sd_mmc_check+0x1fa>
     aaa:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     aac:	2d00      	cmp	r5, #0
     aae:	d1f4      	bne.n	a9a <sd_mmc_check+0xee>
     ab0:	e79c      	b.n	9ec <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     ab2:	4b95      	ldr	r3, [pc, #596]	; (d08 <sd_mmc_check+0x35c>)
     ab4:	4798      	blx	r3
     ab6:	0043      	lsls	r3, r0, #1
     ab8:	d505      	bpl.n	ac6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     aba:	4b8c      	ldr	r3, [pc, #560]	; (cec <sd_mmc_check+0x340>)
     abc:	681a      	ldr	r2, [r3, #0]
     abe:	7bd3      	ldrb	r3, [r2, #15]
     ac0:	2108      	movs	r1, #8
     ac2:	430b      	orrs	r3, r1
     ac4:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ac6:	2100      	movs	r1, #0
     ac8:	4893      	ldr	r0, [pc, #588]	; (d18 <sd_mmc_check+0x36c>)
     aca:	4b8a      	ldr	r3, [pc, #552]	; (cf4 <sd_mmc_check+0x348>)
     acc:	4798      	blx	r3
     ace:	2800      	cmp	r0, #0
     ad0:	d08c      	beq.n	9ec <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ad2:	4b86      	ldr	r3, [pc, #536]	; (cec <sd_mmc_check+0x340>)
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	7bdb      	ldrb	r3, [r3, #15]
     ad8:	07da      	lsls	r2, r3, #31
     ada:	d400      	bmi.n	ade <sd_mmc_check+0x132>
     adc:	e1a4      	b.n	e28 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     ade:	4b8f      	ldr	r3, [pc, #572]	; (d1c <sd_mmc_check+0x370>)
     ae0:	4798      	blx	r3
     ae2:	2800      	cmp	r0, #0
     ae4:	d082      	beq.n	9ec <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     ae6:	4b81      	ldr	r3, [pc, #516]	; (cec <sd_mmc_check+0x340>)
     ae8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     aea:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     aec:	2107      	movs	r1, #7
     aee:	4019      	ands	r1, r3
     af0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     af2:	488b      	ldr	r0, [pc, #556]	; (d20 <sd_mmc_check+0x374>)
     af4:	5808      	ldr	r0, [r1, r0]
     af6:	21fa      	movs	r1, #250	; 0xfa
     af8:	0089      	lsls	r1, r1, #2
     afa:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     afc:	065b      	lsls	r3, r3, #25
     afe:	0f1b      	lsrs	r3, r3, #28
     b00:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b02:	4888      	ldr	r0, [pc, #544]	; (d24 <sd_mmc_check+0x378>)
     b04:	581b      	ldr	r3, [r3, r0]
     b06:	434b      	muls	r3, r1
     b08:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     b0a:	7c93      	ldrb	r3, [r2, #18]
     b0c:	099b      	lsrs	r3, r3, #6
     b0e:	d000      	beq.n	b12 <sd_mmc_check+0x166>
     b10:	e13c      	b.n	d8c <sd_mmc_check+0x3e0>
     b12:	7e91      	ldrb	r1, [r2, #26]
     b14:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b16:	7e53      	ldrb	r3, [r2, #25]
     b18:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b1a:	7e10      	ldrb	r0, [r2, #24]
     b1c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b1e:	4303      	orrs	r3, r0
     b20:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b22:	7f10      	ldrb	r0, [r2, #28]
     b24:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b26:	7ed1      	ldrb	r1, [r2, #27]
     b28:	0049      	lsls	r1, r1, #1
     b2a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     b2c:	051b      	lsls	r3, r3, #20
     b2e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b30:	3301      	adds	r3, #1
     b32:	2107      	movs	r1, #7
     b34:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     b36:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b38:	408b      	lsls	r3, r1
     b3a:	7dd0      	ldrb	r0, [r2, #23]
     b3c:	210f      	movs	r1, #15
     b3e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     b40:	408b      	lsls	r3, r1
				/ 1024;
     b42:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     b44:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     b46:	8991      	ldrh	r1, [r2, #12]
     b48:	0409      	lsls	r1, r1, #16
     b4a:	4877      	ldr	r0, [pc, #476]	; (d28 <sd_mmc_check+0x37c>)
     b4c:	4b69      	ldr	r3, [pc, #420]	; (cf4 <sd_mmc_check+0x348>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d100      	bne.n	b56 <sd_mmc_check+0x1aa>
     b54:	e74a      	b.n	9ec <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     b56:	2301      	movs	r3, #1
     b58:	9300      	str	r3, [sp, #0]
     b5a:	2208      	movs	r2, #8
     b5c:	2100      	movs	r1, #0
     b5e:	4873      	ldr	r0, [pc, #460]	; (d2c <sd_mmc_check+0x380>)
     b60:	4d73      	ldr	r5, [pc, #460]	; (d30 <sd_mmc_check+0x384>)
     b62:	47a8      	blx	r5
     b64:	2800      	cmp	r0, #0
     b66:	d100      	bne.n	b6a <sd_mmc_check+0x1be>
     b68:	e740      	b.n	9ec <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     b6a:	2101      	movs	r1, #1
     b6c:	a806      	add	r0, sp, #24
     b6e:	4b71      	ldr	r3, [pc, #452]	; (d34 <sd_mmc_check+0x388>)
     b70:	4798      	blx	r3
     b72:	2800      	cmp	r0, #0
     b74:	d100      	bne.n	b78 <sd_mmc_check+0x1cc>
     b76:	e739      	b.n	9ec <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     b78:	4b6f      	ldr	r3, [pc, #444]	; (d38 <sd_mmc_check+0x38c>)
     b7a:	4798      	blx	r3
     b7c:	2800      	cmp	r0, #0
     b7e:	d100      	bne.n	b82 <sd_mmc_check+0x1d6>
     b80:	e734      	b.n	9ec <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b82:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	220f      	movs	r2, #15
     b88:	4013      	ands	r3, r2
     b8a:	2b01      	cmp	r3, #1
     b8c:	d100      	bne.n	b90 <sd_mmc_check+0x1e4>
     b8e:	e119      	b.n	dc4 <sd_mmc_check+0x418>
     b90:	2b00      	cmp	r3, #0
     b92:	d100      	bne.n	b96 <sd_mmc_check+0x1ea>
     b94:	e109      	b.n	daa <sd_mmc_check+0x3fe>
     b96:	2b02      	cmp	r3, #2
     b98:	d100      	bne.n	b9c <sd_mmc_check+0x1f0>
     b9a:	e118      	b.n	dce <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b9c:	4b53      	ldr	r3, [pc, #332]	; (cec <sd_mmc_check+0x340>)
     b9e:	681b      	ldr	r3, [r3, #0]
     ba0:	2210      	movs	r2, #16
     ba2:	741a      	strb	r2, [r3, #16]
     ba4:	e105      	b.n	db2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     ba6:	2100      	movs	r1, #0
     ba8:	4858      	ldr	r0, [pc, #352]	; (d0c <sd_mmc_check+0x360>)
     baa:	4b52      	ldr	r3, [pc, #328]	; (cf4 <sd_mmc_check+0x348>)
     bac:	4798      	blx	r3
     bae:	2800      	cmp	r0, #0
     bb0:	d100      	bne.n	bb4 <sd_mmc_check+0x208>
     bb2:	e71b      	b.n	9ec <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     bb4:	4b54      	ldr	r3, [pc, #336]	; (d08 <sd_mmc_check+0x35c>)
     bb6:	4798      	blx	r3
     bb8:	23c0      	movs	r3, #192	; 0xc0
     bba:	05db      	lsls	r3, r3, #23
     bbc:	4018      	ands	r0, r3
     bbe:	2380      	movs	r3, #128	; 0x80
     bc0:	05db      	lsls	r3, r3, #23
     bc2:	4298      	cmp	r0, r3
     bc4:	d105      	bne.n	bd2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     bc6:	4b49      	ldr	r3, [pc, #292]	; (cec <sd_mmc_check+0x340>)
     bc8:	681a      	ldr	r2, [r3, #0]
     bca:	7bd1      	ldrb	r1, [r2, #15]
     bcc:	2308      	movs	r3, #8
     bce:	430b      	orrs	r3, r1
     bd0:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     bd2:	2100      	movs	r1, #0
     bd4:	4850      	ldr	r0, [pc, #320]	; (d18 <sd_mmc_check+0x36c>)
     bd6:	4b47      	ldr	r3, [pc, #284]	; (cf4 <sd_mmc_check+0x348>)
     bd8:	4798      	blx	r3
     bda:	2800      	cmp	r0, #0
     bdc:	d100      	bne.n	be0 <sd_mmc_check+0x234>
     bde:	e705      	b.n	9ec <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     be0:	4b4e      	ldr	r3, [pc, #312]	; (d1c <sd_mmc_check+0x370>)
     be2:	4798      	blx	r3
     be4:	2800      	cmp	r0, #0
     be6:	d100      	bne.n	bea <sd_mmc_check+0x23e>
     be8:	e700      	b.n	9ec <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bea:	4b40      	ldr	r3, [pc, #256]	; (cec <sd_mmc_check+0x340>)
     bec:	681a      	ldr	r2, [r3, #0]
     bee:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     bf0:	069b      	lsls	r3, r3, #26
     bf2:	0f1b      	lsrs	r3, r3, #28
     bf4:	2b02      	cmp	r3, #2
     bf6:	d100      	bne.n	bfa <sd_mmc_check+0x24e>
     bf8:	e0a8      	b.n	d4c <sd_mmc_check+0x3a0>
     bfa:	d907      	bls.n	c0c <sd_mmc_check+0x260>
     bfc:	2b03      	cmp	r3, #3
     bfe:	d100      	bne.n	c02 <sd_mmc_check+0x256>
     c00:	e0a7      	b.n	d52 <sd_mmc_check+0x3a6>
     c02:	2b04      	cmp	r3, #4
     c04:	d104      	bne.n	c10 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     c06:	2340      	movs	r3, #64	; 0x40
     c08:	7413      	strb	r3, [r2, #16]
     c0a:	e003      	b.n	c14 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c0c:	2b01      	cmp	r3, #1
     c0e:	d066      	beq.n	cde <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     c10:	2312      	movs	r3, #18
     c12:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c14:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     c16:	0659      	lsls	r1, r3, #25
     c18:	0f09      	lsrs	r1, r1, #28
     c1a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c1c:	2007      	movs	r0, #7
     c1e:	4003      	ands	r3, r0
     c20:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c22:	483f      	ldr	r0, [pc, #252]	; (d20 <sd_mmc_check+0x374>)
     c24:	5818      	ldr	r0, [r3, r0]
     c26:	23fa      	movs	r3, #250	; 0xfa
     c28:	009b      	lsls	r3, r3, #2
     c2a:	4343      	muls	r3, r0
     c2c:	4843      	ldr	r0, [pc, #268]	; (d3c <sd_mmc_check+0x390>)
     c2e:	5809      	ldr	r1, [r1, r0]
     c30:	434b      	muls	r3, r1
     c32:	6013      	str	r3, [r2, #0]
     c34:	7e91      	ldrb	r1, [r2, #26]
     c36:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c38:	7e53      	ldrb	r3, [r2, #25]
     c3a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c3c:	7e10      	ldrb	r0, [r2, #24]
     c3e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c40:	4303      	orrs	r3, r0
     c42:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     c44:	051b      	lsls	r3, r3, #20
     c46:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     c48:	493d      	ldr	r1, [pc, #244]	; (d40 <sd_mmc_check+0x394>)
     c4a:	428b      	cmp	r3, r1
     c4c:	d00f      	beq.n	c6e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c4e:	7f10      	ldrb	r0, [r2, #28]
     c50:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c52:	7ed1      	ldrb	r1, [r2, #27]
     c54:	0049      	lsls	r1, r1, #1
     c56:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c58:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     c5a:	2007      	movs	r0, #7
     c5c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     c5e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c60:	408b      	lsls	r3, r1
     c62:	7dd1      	ldrb	r1, [r2, #23]
     c64:	3008      	adds	r0, #8
     c66:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     c68:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     c6a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     c6c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     c6e:	7c13      	ldrb	r3, [r2, #16]
     c70:	2b3f      	cmp	r3, #63	; 0x3f
     c72:	d97b      	bls.n	d6c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     c74:	2100      	movs	r1, #0
     c76:	9100      	str	r1, [sp, #0]
     c78:	2301      	movs	r3, #1
     c7a:	2280      	movs	r2, #128	; 0x80
     c7c:	0092      	lsls	r2, r2, #2
     c7e:	4831      	ldr	r0, [pc, #196]	; (d44 <sd_mmc_check+0x398>)
     c80:	4d2b      	ldr	r5, [pc, #172]	; (d30 <sd_mmc_check+0x384>)
     c82:	47a8      	blx	r5
     c84:	2800      	cmp	r0, #0
     c86:	d100      	bne.n	c8a <sd_mmc_check+0x2de>
     c88:	e6b0      	b.n	9ec <sd_mmc_check+0x40>
     c8a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     c8c:	4e2e      	ldr	r6, [pc, #184]	; (d48 <sd_mmc_check+0x39c>)
     c8e:	a805      	add	r0, sp, #20
     c90:	47b0      	blx	r6
     c92:	2800      	cmp	r0, #0
     c94:	d100      	bne.n	c98 <sd_mmc_check+0x2ec>
     c96:	e6a9      	b.n	9ec <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c98:	3501      	adds	r5, #1
     c9a:	b2ad      	uxth	r5, r5
     c9c:	2d32      	cmp	r5, #50	; 0x32
     c9e:	d1f6      	bne.n	c8e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     ca0:	4b12      	ldr	r3, [pc, #72]	; (cec <sd_mmc_check+0x340>)
     ca2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ca4:	7e8a      	ldrb	r2, [r1, #26]
     ca6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ca8:	7e4b      	ldrb	r3, [r1, #25]
     caa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cac:	7e09      	ldrb	r1, [r1, #24]
     cae:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cb0:	430b      	orrs	r3, r1
     cb2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     cb4:	051b      	lsls	r3, r3, #20
     cb6:	0d1b      	lsrs	r3, r3, #20
     cb8:	4a21      	ldr	r2, [pc, #132]	; (d40 <sd_mmc_check+0x394>)
     cba:	4293      	cmp	r3, r2
     cbc:	d154      	bne.n	d68 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     cbe:	4e22      	ldr	r6, [pc, #136]	; (d48 <sd_mmc_check+0x39c>)
     cc0:	a806      	add	r0, sp, #24
     cc2:	47b0      	blx	r6
     cc4:	2800      	cmp	r0, #0
     cc6:	d100      	bne.n	cca <sd_mmc_check+0x31e>
     cc8:	e690      	b.n	9ec <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     cca:	3501      	adds	r5, #1
     ccc:	b2ad      	uxth	r5, r5
     cce:	2d35      	cmp	r5, #53	; 0x35
     cd0:	d9f6      	bls.n	cc0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     cd2:	4b06      	ldr	r3, [pc, #24]	; (cec <sd_mmc_check+0x340>)
     cd4:	681a      	ldr	r2, [r3, #0]
     cd6:	9b06      	ldr	r3, [sp, #24]
     cd8:	085b      	lsrs	r3, r3, #1
     cda:	6053      	str	r3, [r2, #4]
     cdc:	e044      	b.n	d68 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     cde:	2314      	movs	r3, #20
     ce0:	7413      	strb	r3, [r2, #16]
     ce2:	e797      	b.n	c14 <sd_mmc_check+0x268>
     ce4:	000007a1 	.word	0x000007a1
     ce8:	00000971 	.word	0x00000971
     cec:	200001a8 	.word	0x200001a8
     cf0:	00008359 	.word	0x00008359
     cf4:	00008521 	.word	0x00008521
     cf8:	00005508 	.word	0x00005508
     cfc:	00001110 	.word	0x00001110
     d00:	000008ed 	.word	0x000008ed
     d04:	00000775 	.word	0x00000775
     d08:	00008539 	.word	0x00008539
     d0c:	0000053a 	.word	0x0000053a
     d10:	00001bef 	.word	0x00001bef
     d14:	00001101 	.word	0x00001101
     d18:	0000113b 	.word	0x0000113b
     d1c:	00000925 	.word	0x00000925
     d20:	0000a7dc 	.word	0x0000a7dc
     d24:	0000a7f8 	.word	0x0000a7f8
     d28:	00001137 	.word	0x00001137
     d2c:	00081133 	.word	0x00081133
     d30:	00008391 	.word	0x00008391
     d34:	000085bd 	.word	0x000085bd
     d38:	00008649 	.word	0x00008649
     d3c:	0000a79c 	.word	0x0000a79c
     d40:	00000fff 	.word	0x00000fff
     d44:	00081108 	.word	0x00081108
     d48:	00008545 	.word	0x00008545
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     d4c:	2322      	movs	r3, #34	; 0x22
     d4e:	7413      	strb	r3, [r2, #16]
     d50:	e760      	b.n	c14 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     d52:	2330      	movs	r3, #48	; 0x30
     d54:	7413      	strb	r3, [r2, #16]
     d56:	e75d      	b.n	c14 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     d58:	a806      	add	r0, sp, #24
     d5a:	4b36      	ldr	r3, [pc, #216]	; (e34 <sd_mmc_check+0x488>)
     d5c:	4798      	blx	r3
     d5e:	2800      	cmp	r0, #0
     d60:	d100      	bne.n	d64 <sd_mmc_check+0x3b8>
     d62:	e643      	b.n	9ec <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     d64:	3501      	adds	r5, #1
     d66:	b2ad      	uxth	r5, r5
     d68:	2d7f      	cmp	r5, #127	; 0x7f
     d6a:	d9f5      	bls.n	d58 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d6c:	2180      	movs	r1, #128	; 0x80
     d6e:	0089      	lsls	r1, r1, #2
     d70:	4831      	ldr	r0, [pc, #196]	; (e38 <sd_mmc_check+0x48c>)
     d72:	4b32      	ldr	r3, [pc, #200]	; (e3c <sd_mmc_check+0x490>)
     d74:	4798      	blx	r3
     d76:	2800      	cmp	r0, #0
     d78:	d100      	bne.n	d7c <sd_mmc_check+0x3d0>
     d7a:	e637      	b.n	9ec <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     d7c:	4b30      	ldr	r3, [pc, #192]	; (e40 <sd_mmc_check+0x494>)
     d7e:	4798      	blx	r3
     d80:	2800      	cmp	r0, #0
     d82:	d100      	bne.n	d86 <sd_mmc_check+0x3da>
     d84:	e632      	b.n	9ec <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d86:	4b2f      	ldr	r3, [pc, #188]	; (e44 <sd_mmc_check+0x498>)
     d88:	4798      	blx	r3
     d8a:	e65e      	b.n	a4a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d8c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d8e:	7e93      	ldrb	r3, [r2, #26]
     d90:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d92:	7e51      	ldrb	r1, [r2, #25]
     d94:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d96:	430b      	orrs	r3, r1
     d98:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     d9a:	029b      	lsls	r3, r3, #10
				* 512;
     d9c:	085b      	lsrs	r3, r3, #1
     d9e:	2180      	movs	r1, #128	; 0x80
     da0:	0089      	lsls	r1, r1, #2
     da2:	468c      	mov	ip, r1
     da4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     da6:	6053      	str	r3, [r2, #4]
     da8:	e6cd      	b.n	b46 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     daa:	4b27      	ldr	r3, [pc, #156]	; (e48 <sd_mmc_check+0x49c>)
     dac:	681b      	ldr	r3, [r3, #0]
     dae:	2210      	movs	r2, #16
     db0:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     db2:	4b25      	ldr	r3, [pc, #148]	; (e48 <sd_mmc_check+0x49c>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	7bdb      	ldrb	r3, [r3, #15]
     db8:	2209      	movs	r2, #9
     dba:	4013      	ands	r3, r2
     dbc:	2b01      	cmp	r3, #1
     dbe:	d000      	beq.n	dc2 <sd_mmc_check+0x416>
     dc0:	e638      	b.n	a34 <sd_mmc_check+0x88>
     dc2:	e630      	b.n	a26 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     dc4:	4b20      	ldr	r3, [pc, #128]	; (e48 <sd_mmc_check+0x49c>)
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	221a      	movs	r2, #26
     dca:	741a      	strb	r2, [r3, #16]
     dcc:	e7f1      	b.n	db2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dce:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     dd0:	789b      	ldrb	r3, [r3, #2]
     dd2:	09db      	lsrs	r3, r3, #7
     dd4:	2b01      	cmp	r3, #1
     dd6:	d104      	bne.n	de2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     dd8:	4b1b      	ldr	r3, [pc, #108]	; (e48 <sd_mmc_check+0x49c>)
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2230      	movs	r2, #48	; 0x30
     dde:	741a      	strb	r2, [r3, #16]
     de0:	e7e7      	b.n	db2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     de2:	4b19      	ldr	r3, [pc, #100]	; (e48 <sd_mmc_check+0x49c>)
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	2220      	movs	r2, #32
     de8:	741a      	strb	r2, [r3, #16]
     dea:	e7e2      	b.n	db2 <sd_mmc_check+0x406>
	*v2 = 0;
     dec:	2600      	movs	r6, #0
     dee:	e60d      	b.n	a0c <sd_mmc_check+0x60>
     df0:	1e73      	subs	r3, r6, #1
     df2:	419e      	sbcs	r6, r3
     df4:	07b3      	lsls	r3, r6, #30
     df6:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     df8:	4d14      	ldr	r5, [pc, #80]	; (e4c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     dfa:	4f10      	ldr	r7, [pc, #64]	; (e3c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     dfc:	46b8      	mov	r8, r7
		resp = driver_get_response();
     dfe:	4e14      	ldr	r6, [pc, #80]	; (e50 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e00:	2100      	movs	r1, #0
     e02:	4814      	ldr	r0, [pc, #80]	; (e54 <sd_mmc_check+0x4a8>)
     e04:	47b8      	blx	r7
     e06:	2800      	cmp	r0, #0
     e08:	d100      	bne.n	e0c <sd_mmc_check+0x460>
     e0a:	e638      	b.n	a7e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e0c:	9903      	ldr	r1, [sp, #12]
     e0e:	4812      	ldr	r0, [pc, #72]	; (e58 <sd_mmc_check+0x4ac>)
     e10:	47c0      	blx	r8
     e12:	2800      	cmp	r0, #0
     e14:	d100      	bne.n	e18 <sd_mmc_check+0x46c>
     e16:	e632      	b.n	a7e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     e18:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e1a:	07c3      	lsls	r3, r0, #31
     e1c:	d400      	bmi.n	e20 <sd_mmc_check+0x474>
     e1e:	e628      	b.n	a72 <sd_mmc_check+0xc6>
     e20:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e22:	2d00      	cmp	r5, #0
     e24:	d1ec      	bne.n	e00 <sd_mmc_check+0x454>
     e26:	e62a      	b.n	a7e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e28:	2209      	movs	r2, #9
     e2a:	4013      	ands	r3, r2
     e2c:	2b01      	cmp	r3, #1
     e2e:	d000      	beq.n	e32 <sd_mmc_check+0x486>
     e30:	e609      	b.n	a46 <sd_mmc_check+0x9a>
     e32:	e5f8      	b.n	a26 <sd_mmc_check+0x7a>
     e34:	00008545 	.word	0x00008545
     e38:	00001110 	.word	0x00001110
     e3c:	00008521 	.word	0x00008521
     e40:	000008ed 	.word	0x000008ed
     e44:	00000775 	.word	0x00000775
     e48:	200001a8 	.word	0x200001a8
     e4c:	00001bef 	.word	0x00001bef
     e50:	00008539 	.word	0x00008539
     e54:	00001137 	.word	0x00001137
     e58:	00001129 	.word	0x00001129

00000e5c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     e5c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e5e:	4b06      	ldr	r3, [pc, #24]	; (e78 <sd_mmc_get_type+0x1c>)
     e60:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     e62:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e64:	2800      	cmp	r0, #0
     e66:	d001      	beq.n	e6c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     e68:	0018      	movs	r0, r3
     e6a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e6c:	4b03      	ldr	r3, [pc, #12]	; (e7c <sd_mmc_get_type+0x20>)
     e6e:	4798      	blx	r3
	return sd_mmc_card->type;
     e70:	4b03      	ldr	r3, [pc, #12]	; (e80 <sd_mmc_get_type+0x24>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	7bdb      	ldrb	r3, [r3, #15]
     e76:	e7f7      	b.n	e68 <sd_mmc_get_type+0xc>
     e78:	000007a1 	.word	0x000007a1
     e7c:	00000971 	.word	0x00000971
     e80:	200001a8 	.word	0x200001a8

00000e84 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     e84:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e86:	4b06      	ldr	r3, [pc, #24]	; (ea0 <sd_mmc_get_capacity+0x1c>)
     e88:	4798      	blx	r3
		return 0;
     e8a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e8c:	2800      	cmp	r0, #0
     e8e:	d001      	beq.n	e94 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     e90:	0018      	movs	r0, r3
     e92:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e94:	4b03      	ldr	r3, [pc, #12]	; (ea4 <sd_mmc_get_capacity+0x20>)
     e96:	4798      	blx	r3
	return sd_mmc_card->capacity;
     e98:	4b03      	ldr	r3, [pc, #12]	; (ea8 <sd_mmc_get_capacity+0x24>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	685b      	ldr	r3, [r3, #4]
     e9e:	e7f7      	b.n	e90 <sd_mmc_get_capacity+0xc>
     ea0:	000007a1 	.word	0x000007a1
     ea4:	00000971 	.word	0x00000971
     ea8:	200001a8 	.word	0x200001a8

00000eac <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     eac:	2000      	movs	r0, #0
     eae:	4770      	bx	lr

00000eb0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	b082      	sub	sp, #8
     eb4:	000e      	movs	r6, r1
     eb6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     eb8:	4b16      	ldr	r3, [pc, #88]	; (f14 <sd_mmc_init_read_blocks+0x64>)
     eba:	4798      	blx	r3
     ebc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ebe:	d002      	beq.n	ec6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     ec0:	0020      	movs	r0, r4
     ec2:	b002      	add	sp, #8
     ec4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     ec6:	4b14      	ldr	r3, [pc, #80]	; (f18 <sd_mmc_init_read_blocks+0x68>)
     ec8:	4798      	blx	r3
     eca:	2800      	cmp	r0, #0
     ecc:	d017      	beq.n	efe <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     ece:	2d01      	cmp	r5, #1
     ed0:	d919      	bls.n	f06 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     ed2:	4812      	ldr	r0, [pc, #72]	; (f1c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     ed4:	4b12      	ldr	r3, [pc, #72]	; (f20 <sd_mmc_init_read_blocks+0x70>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	7bdb      	ldrb	r3, [r3, #15]
     eda:	071b      	lsls	r3, r3, #28
     edc:	d400      	bmi.n	ee0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     ede:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ee0:	2301      	movs	r3, #1
     ee2:	9300      	str	r3, [sp, #0]
     ee4:	002b      	movs	r3, r5
     ee6:	2280      	movs	r2, #128	; 0x80
     ee8:	0092      	lsls	r2, r2, #2
     eea:	0031      	movs	r1, r6
     eec:	4e0d      	ldr	r6, [pc, #52]	; (f24 <sd_mmc_init_read_blocks+0x74>)
     eee:	47b0      	blx	r6
     ef0:	2800      	cmp	r0, #0
     ef2:	d00a      	beq.n	f0a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     ef4:	4b0c      	ldr	r3, [pc, #48]	; (f28 <sd_mmc_init_read_blocks+0x78>)
     ef6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     ef8:	4b0c      	ldr	r3, [pc, #48]	; (f2c <sd_mmc_init_read_blocks+0x7c>)
     efa:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     efc:	e7e0      	b.n	ec0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     efe:	4b0c      	ldr	r3, [pc, #48]	; (f30 <sd_mmc_init_read_blocks+0x80>)
     f00:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f02:	3405      	adds	r4, #5
     f04:	e7dc      	b.n	ec0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     f06:	480b      	ldr	r0, [pc, #44]	; (f34 <sd_mmc_init_read_blocks+0x84>)
     f08:	e7e4      	b.n	ed4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     f0a:	4b09      	ldr	r3, [pc, #36]	; (f30 <sd_mmc_init_read_blocks+0x80>)
     f0c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f0e:	2405      	movs	r4, #5
     f10:	e7d6      	b.n	ec0 <sd_mmc_init_read_blocks+0x10>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	000007a1 	.word	0x000007a1
     f18:	000008ed 	.word	0x000008ed
     f1c:	00101112 	.word	0x00101112
     f20:	200001a8 	.word	0x200001a8
     f24:	00008391 	.word	0x00008391
     f28:	200001ac 	.word	0x200001ac
     f2c:	200001ae 	.word	0x200001ae
     f30:	00000971 	.word	0x00000971
     f34:	00081111 	.word	0x00081111

00000f38 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     f38:	b510      	push	{r4, lr}
     f3a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     f3c:	4b07      	ldr	r3, [pc, #28]	; (f5c <sd_mmc_start_read_blocks+0x24>)
     f3e:	4798      	blx	r3
     f40:	2800      	cmp	r0, #0
     f42:	d104      	bne.n	f4e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     f44:	2200      	movs	r2, #0
     f46:	4b06      	ldr	r3, [pc, #24]	; (f60 <sd_mmc_start_read_blocks+0x28>)
     f48:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     f4a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     f4c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     f4e:	4a04      	ldr	r2, [pc, #16]	; (f60 <sd_mmc_start_read_blocks+0x28>)
     f50:	8813      	ldrh	r3, [r2, #0]
     f52:	1b1c      	subs	r4, r3, r4
     f54:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     f56:	2000      	movs	r0, #0
     f58:	e7f8      	b.n	f4c <sd_mmc_start_read_blocks+0x14>
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	000085bd 	.word	0x000085bd
     f60:	200001ac 	.word	0x200001ac

00000f64 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     f64:	b510      	push	{r4, lr}
     f66:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     f68:	4b14      	ldr	r3, [pc, #80]	; (fbc <sd_mmc_wait_end_of_read_blocks+0x58>)
     f6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f6c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     f6e:	2800      	cmp	r0, #0
     f70:	d101      	bne.n	f76 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     f72:	0018      	movs	r0, r3
     f74:	bd10      	pop	{r4, pc}
	if (abort) {
     f76:	2c00      	cmp	r4, #0
     f78:	d010      	beq.n	f9c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     f7a:	2200      	movs	r2, #0
     f7c:	4b10      	ldr	r3, [pc, #64]	; (fc0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f7e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     f80:	4b10      	ldr	r3, [pc, #64]	; (fc4 <sd_mmc_wait_end_of_read_blocks+0x60>)
     f82:	881b      	ldrh	r3, [r3, #0]
     f84:	2b01      	cmp	r3, #1
     f86:	d00f      	beq.n	fa8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     f88:	2100      	movs	r1, #0
     f8a:	480f      	ldr	r0, [pc, #60]	; (fc8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f8c:	4b0f      	ldr	r3, [pc, #60]	; (fcc <sd_mmc_wait_end_of_read_blocks+0x68>)
     f8e:	4798      	blx	r3
     f90:	2800      	cmp	r0, #0
     f92:	d00d      	beq.n	fb0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     f94:	4b0e      	ldr	r3, [pc, #56]	; (fd0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f96:	4798      	blx	r3
	return SD_MMC_OK;
     f98:	2300      	movs	r3, #0
     f9a:	e7ea      	b.n	f72 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     f9c:	4b08      	ldr	r3, [pc, #32]	; (fc0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f9e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     fa0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     fa2:	2a00      	cmp	r2, #0
     fa4:	d0ec      	beq.n	f80 <sd_mmc_wait_end_of_read_blocks+0x1c>
     fa6:	e7e4      	b.n	f72 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     fa8:	4b09      	ldr	r3, [pc, #36]	; (fd0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     faa:	4798      	blx	r3
		return SD_MMC_OK;
     fac:	2300      	movs	r3, #0
     fae:	e7e0      	b.n	f72 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     fb0:	2100      	movs	r1, #0
     fb2:	4805      	ldr	r0, [pc, #20]	; (fc8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <sd_mmc_wait_end_of_read_blocks+0x68>)
     fb6:	4798      	blx	r3
     fb8:	e7ec      	b.n	f94 <sd_mmc_wait_end_of_read_blocks+0x30>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00008649 	.word	0x00008649
     fc0:	200001ac 	.word	0x200001ac
     fc4:	200001ae 	.word	0x200001ae
     fc8:	0000310c 	.word	0x0000310c
     fcc:	00008521 	.word	0x00008521
     fd0:	00000971 	.word	0x00000971

00000fd4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	b082      	sub	sp, #8
     fd8:	000e      	movs	r6, r1
     fda:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     fdc:	4b11      	ldr	r3, [pc, #68]	; (1024 <sd_mmc_init_write_blocks+0x50>)
     fde:	4798      	blx	r3
     fe0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     fe2:	d116      	bne.n	1012 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     fe4:	2d01      	cmp	r5, #1
     fe6:	d917      	bls.n	1018 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     fe8:	480f      	ldr	r0, [pc, #60]	; (1028 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     fea:	4b10      	ldr	r3, [pc, #64]	; (102c <sd_mmc_init_write_blocks+0x58>)
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	7bdb      	ldrb	r3, [r3, #15]
     ff0:	071b      	lsls	r3, r3, #28
     ff2:	d400      	bmi.n	ff6 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     ff4:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ff6:	2301      	movs	r3, #1
     ff8:	9300      	str	r3, [sp, #0]
     ffa:	002b      	movs	r3, r5
     ffc:	2280      	movs	r2, #128	; 0x80
     ffe:	0092      	lsls	r2, r2, #2
    1000:	0031      	movs	r1, r6
    1002:	4e0b      	ldr	r6, [pc, #44]	; (1030 <sd_mmc_init_write_blocks+0x5c>)
    1004:	47b0      	blx	r6
    1006:	2800      	cmp	r0, #0
    1008:	d008      	beq.n	101c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    100a:	4b0a      	ldr	r3, [pc, #40]	; (1034 <sd_mmc_init_write_blocks+0x60>)
    100c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    100e:	4b0a      	ldr	r3, [pc, #40]	; (1038 <sd_mmc_init_write_blocks+0x64>)
    1010:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1012:	0020      	movs	r0, r4
    1014:	b002      	add	sp, #8
    1016:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1018:	4808      	ldr	r0, [pc, #32]	; (103c <sd_mmc_init_write_blocks+0x68>)
    101a:	e7e6      	b.n	fea <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    101c:	4b08      	ldr	r3, [pc, #32]	; (1040 <sd_mmc_init_write_blocks+0x6c>)
    101e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1020:	2405      	movs	r4, #5
    1022:	e7f6      	b.n	1012 <sd_mmc_init_write_blocks+0x3e>
    1024:	000007a1 	.word	0x000007a1
    1028:	00109119 	.word	0x00109119
    102c:	200001a8 	.word	0x200001a8
    1030:	00008391 	.word	0x00008391
    1034:	200001ac 	.word	0x200001ac
    1038:	200001ae 	.word	0x200001ae
    103c:	00089118 	.word	0x00089118
    1040:	00000971 	.word	0x00000971

00001044 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1044:	b510      	push	{r4, lr}
    1046:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1048:	4b07      	ldr	r3, [pc, #28]	; (1068 <sd_mmc_start_write_blocks+0x24>)
    104a:	4798      	blx	r3
    104c:	2800      	cmp	r0, #0
    104e:	d104      	bne.n	105a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1050:	2200      	movs	r2, #0
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <sd_mmc_start_write_blocks+0x28>)
    1054:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1056:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1058:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    105a:	4a04      	ldr	r2, [pc, #16]	; (106c <sd_mmc_start_write_blocks+0x28>)
    105c:	8813      	ldrh	r3, [r2, #0]
    105e:	1b1c      	subs	r4, r3, r4
    1060:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1062:	2000      	movs	r0, #0
    1064:	e7f8      	b.n	1058 <sd_mmc_start_write_blocks+0x14>
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	0000864d 	.word	0x0000864d
    106c:	200001ac 	.word	0x200001ac

00001070 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1070:	b510      	push	{r4, lr}
    1072:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1074:	4b0e      	ldr	r3, [pc, #56]	; (10b0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    1076:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1078:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    107a:	2800      	cmp	r0, #0
    107c:	d101      	bne.n	1082 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    107e:	0018      	movs	r0, r3
    1080:	bd10      	pop	{r4, pc}
	if (abort) {
    1082:	2c00      	cmp	r4, #0
    1084:	d00a      	beq.n	109c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1086:	2200      	movs	r2, #0
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    108a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    108c:	4b0a      	ldr	r3, [pc, #40]	; (10b8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    108e:	881b      	ldrh	r3, [r3, #0]
    1090:	2b01      	cmp	r3, #1
    1092:	d009      	beq.n	10a8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1096:	4798      	blx	r3
	return SD_MMC_OK;
    1098:	2300      	movs	r3, #0
    109a:	e7f0      	b.n	107e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    109c:	4b05      	ldr	r3, [pc, #20]	; (10b4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    109e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    10a0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    10a2:	2a00      	cmp	r2, #0
    10a4:	d0f2      	beq.n	108c <sd_mmc_wait_end_of_write_blocks+0x1c>
    10a6:	e7ea      	b.n	107e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    10a8:	4b04      	ldr	r3, [pc, #16]	; (10bc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    10aa:	4798      	blx	r3
		return SD_MMC_OK;
    10ac:	2300      	movs	r3, #0
    10ae:	e7e6      	b.n	107e <sd_mmc_wait_end_of_write_blocks+0xe>
    10b0:	000086cd 	.word	0x000086cd
    10b4:	200001ac 	.word	0x200001ac
    10b8:	200001ae 	.word	0x200001ae
    10bc:	00000971 	.word	0x00000971

000010c0 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    10c0:	2000      	movs	r0, #0
    10c2:	4770      	bx	lr

000010c4 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    10c4:	1e43      	subs	r3, r0, #1
    10c6:	4198      	sbcs	r0, r3
    10c8:	b2c0      	uxtb	r0, r0
    10ca:	4b03      	ldr	r3, [pc, #12]	; (10d8 <udi_msc_trans_ack+0x14>)
    10cc:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
    10ce:	2201      	movs	r2, #1
    10d0:	4b02      	ldr	r3, [pc, #8]	; (10dc <udi_msc_trans_ack+0x18>)
    10d2:	701a      	strb	r2, [r3, #0]
}
    10d4:	4770      	bx	lr
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	20000340 	.word	0x20000340
    10dc:	20000044 	.word	0x20000044

000010e0 <udi_msc_cbw_wait>:
{
    10e0:	b510      	push	{r4, lr}
    10e2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    10e4:	4b08      	ldr	r3, [pc, #32]	; (1108 <udi_msc_cbw_wait+0x28>)
    10e6:	9300      	str	r3, [sp, #0]
    10e8:	231f      	movs	r3, #31
    10ea:	4a08      	ldr	r2, [pc, #32]	; (110c <udi_msc_cbw_wait+0x2c>)
    10ec:	2101      	movs	r1, #1
    10ee:	2002      	movs	r0, #2
    10f0:	4c07      	ldr	r4, [pc, #28]	; (1110 <udi_msc_cbw_wait+0x30>)
    10f2:	47a0      	blx	r4
    10f4:	2800      	cmp	r0, #0
    10f6:	d001      	beq.n	10fc <udi_msc_cbw_wait+0x1c>
}
    10f8:	b002      	add	sp, #8
    10fa:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    10fc:	4905      	ldr	r1, [pc, #20]	; (1114 <udi_msc_cbw_wait+0x34>)
    10fe:	3002      	adds	r0, #2
    1100:	4b05      	ldr	r3, [pc, #20]	; (1118 <udi_msc_cbw_wait+0x38>)
    1102:	4798      	blx	r3
}
    1104:	e7f8      	b.n	10f8 <udi_msc_cbw_wait+0x18>
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	00001505 	.word	0x00001505
    110c:	200001d8 	.word	0x200001d8
    1110:	00003881 	.word	0x00003881
    1114:	000010e1 	.word	0x000010e1
    1118:	00003829 	.word	0x00003829

0000111c <udi_msc_enable>:
{
    111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    111e:	2300      	movs	r3, #0
    1120:	4a13      	ldr	r2, [pc, #76]	; (1170 <udi_msc_enable+0x54>)
    1122:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    1124:	4a13      	ldr	r2, [pc, #76]	; (1174 <udi_msc_enable+0x58>)
    1126:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    1128:	3301      	adds	r3, #1
    112a:	4a13      	ldr	r2, [pc, #76]	; (1178 <udi_msc_enable+0x5c>)
    112c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    112e:	4a13      	ldr	r2, [pc, #76]	; (117c <udi_msc_enable+0x60>)
    1130:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    1132:	4b13      	ldr	r3, [pc, #76]	; (1180 <udi_msc_enable+0x64>)
    1134:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    1136:	2800      	cmp	r0, #0
    1138:	d105      	bne.n	1146 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    113a:	2200      	movs	r2, #0
    113c:	4b11      	ldr	r3, [pc, #68]	; (1184 <udi_msc_enable+0x68>)
    113e:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    1140:	2500      	movs	r5, #0
}
    1142:	0028      	movs	r0, r5
    1144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    1146:	3801      	subs	r0, #1
    1148:	4b0e      	ldr	r3, [pc, #56]	; (1184 <udi_msc_enable+0x68>)
    114a:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    114c:	4b0e      	ldr	r3, [pc, #56]	; (1188 <udi_msc_enable+0x6c>)
    114e:	4798      	blx	r3
    1150:	1e05      	subs	r5, r0, #0
    1152:	d0f6      	beq.n	1142 <udi_msc_enable+0x26>
    1154:	2400      	movs	r4, #0
		mem_unload(lun, false);
    1156:	4f0d      	ldr	r7, [pc, #52]	; (118c <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1158:	4e0a      	ldr	r6, [pc, #40]	; (1184 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    115a:	2100      	movs	r1, #0
    115c:	0020      	movs	r0, r4
    115e:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1160:	3401      	adds	r4, #1
    1162:	b2e4      	uxtb	r4, r4
    1164:	7833      	ldrb	r3, [r6, #0]
    1166:	42a3      	cmp	r3, r4
    1168:	d2f7      	bcs.n	115a <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    116a:	4b09      	ldr	r3, [pc, #36]	; (1190 <udi_msc_enable+0x74>)
    116c:	4798      	blx	r3
	return true;
    116e:	e7e8      	b.n	1142 <udi_msc_enable+0x26>
    1170:	200001ce 	.word	0x200001ce
    1174:	200001cc 	.word	0x200001cc
    1178:	20000044 	.word	0x20000044
    117c:	20000045 	.word	0x20000045
    1180:	000086f1 	.word	0x000086f1
    1184:	200001fc 	.word	0x200001fc
    1188:	00005dfd 	.word	0x00005dfd
    118c:	00008731 	.word	0x00008731
    1190:	000010e1 	.word	0x000010e1

00001194 <udi_msc_csw_sent>:
{
    1194:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
    1196:	4b01      	ldr	r3, [pc, #4]	; (119c <udi_msc_csw_sent+0x8>)
    1198:	4798      	blx	r3
}
    119a:	bd10      	pop	{r4, pc}
    119c:	000010e1 	.word	0x000010e1

000011a0 <udi_msc_csw_send>:
{
    11a0:	b510      	push	{r4, lr}
    11a2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    11a4:	4b08      	ldr	r3, [pc, #32]	; (11c8 <udi_msc_csw_send+0x28>)
    11a6:	9300      	str	r3, [sp, #0]
    11a8:	230d      	movs	r3, #13
    11aa:	4a08      	ldr	r2, [pc, #32]	; (11cc <udi_msc_csw_send+0x2c>)
    11ac:	2100      	movs	r1, #0
    11ae:	2081      	movs	r0, #129	; 0x81
    11b0:	4c07      	ldr	r4, [pc, #28]	; (11d0 <udi_msc_csw_send+0x30>)
    11b2:	47a0      	blx	r4
    11b4:	2800      	cmp	r0, #0
    11b6:	d001      	beq.n	11bc <udi_msc_csw_send+0x1c>
}
    11b8:	b002      	add	sp, #8
    11ba:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    11bc:	4905      	ldr	r1, [pc, #20]	; (11d4 <udi_msc_csw_send+0x34>)
    11be:	3081      	adds	r0, #129	; 0x81
    11c0:	4b05      	ldr	r3, [pc, #20]	; (11d8 <udi_msc_csw_send+0x38>)
    11c2:	4798      	blx	r3
}
    11c4:	e7f8      	b.n	11b8 <udi_msc_csw_send+0x18>
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	00001195 	.word	0x00001195
    11cc:	20000048 	.word	0x20000048
    11d0:	00003881 	.word	0x00003881
    11d4:	000011a1 	.word	0x000011a1
    11d8:	00003829 	.word	0x00003829

000011dc <udi_msc_cbw_invalid>:
{
    11dc:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    11de:	4b06      	ldr	r3, [pc, #24]	; (11f8 <udi_msc_cbw_invalid+0x1c>)
    11e0:	781b      	ldrb	r3, [r3, #0]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d100      	bne.n	11e8 <udi_msc_cbw_invalid+0xc>
}
    11e6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    11e8:	2002      	movs	r0, #2
    11ea:	4b04      	ldr	r3, [pc, #16]	; (11fc <udi_msc_cbw_invalid+0x20>)
    11ec:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    11ee:	4904      	ldr	r1, [pc, #16]	; (1200 <udi_msc_cbw_invalid+0x24>)
    11f0:	2002      	movs	r0, #2
    11f2:	4b04      	ldr	r3, [pc, #16]	; (1204 <udi_msc_cbw_invalid+0x28>)
    11f4:	4798      	blx	r3
    11f6:	e7f6      	b.n	11e6 <udi_msc_cbw_invalid+0xa>
    11f8:	200001cc 	.word	0x200001cc
    11fc:	000036b5 	.word	0x000036b5
    1200:	000011dd 	.word	0x000011dd
    1204:	00003829 	.word	0x00003829

00001208 <udi_msc_csw_invalid>:
{
    1208:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    120a:	4b06      	ldr	r3, [pc, #24]	; (1224 <udi_msc_csw_invalid+0x1c>)
    120c:	781b      	ldrb	r3, [r3, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	d100      	bne.n	1214 <udi_msc_csw_invalid+0xc>
}
    1212:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    1214:	2081      	movs	r0, #129	; 0x81
    1216:	4b04      	ldr	r3, [pc, #16]	; (1228 <udi_msc_csw_invalid+0x20>)
    1218:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    121a:	4904      	ldr	r1, [pc, #16]	; (122c <udi_msc_csw_invalid+0x24>)
    121c:	2081      	movs	r0, #129	; 0x81
    121e:	4b04      	ldr	r3, [pc, #16]	; (1230 <udi_msc_csw_invalid+0x28>)
    1220:	4798      	blx	r3
    1222:	e7f6      	b.n	1212 <udi_msc_csw_invalid+0xa>
    1224:	200001cc 	.word	0x200001cc
    1228:	000036b5 	.word	0x000036b5
    122c:	00001209 	.word	0x00001209
    1230:	00003829 	.word	0x00003829

00001234 <udi_msc_csw_process>:
{
    1234:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    1236:	4b0b      	ldr	r3, [pc, #44]	; (1264 <udi_msc_csw_process+0x30>)
    1238:	689b      	ldr	r3, [r3, #8]
    123a:	2b00      	cmp	r3, #0
    123c:	d006      	beq.n	124c <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    123e:	4b0a      	ldr	r3, [pc, #40]	; (1268 <udi_msc_csw_process+0x34>)
    1240:	7b1b      	ldrb	r3, [r3, #12]
    1242:	2b7f      	cmp	r3, #127	; 0x7f
    1244:	d809      	bhi.n	125a <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    1246:	2002      	movs	r0, #2
    1248:	4b08      	ldr	r3, [pc, #32]	; (126c <udi_msc_csw_process+0x38>)
    124a:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    124c:	4b06      	ldr	r3, [pc, #24]	; (1268 <udi_msc_csw_process+0x34>)
    124e:	685a      	ldr	r2, [r3, #4]
    1250:	4b04      	ldr	r3, [pc, #16]	; (1264 <udi_msc_csw_process+0x30>)
    1252:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    1254:	4b06      	ldr	r3, [pc, #24]	; (1270 <udi_msc_csw_process+0x3c>)
    1256:	4798      	blx	r3
}
    1258:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    125a:	2081      	movs	r0, #129	; 0x81
    125c:	4b03      	ldr	r3, [pc, #12]	; (126c <udi_msc_csw_process+0x38>)
    125e:	4798      	blx	r3
    1260:	e7f4      	b.n	124c <udi_msc_csw_process+0x18>
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	20000048 	.word	0x20000048
    1268:	200001d8 	.word	0x200001d8
    126c:	000036b5 	.word	0x000036b5
    1270:	000011a1 	.word	0x000011a1

00001274 <udi_msc_clear_sense>:
{
    1274:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    1276:	4c05      	ldr	r4, [pc, #20]	; (128c <udi_msc_clear_sense+0x18>)
    1278:	2212      	movs	r2, #18
    127a:	2100      	movs	r1, #0
    127c:	0020      	movs	r0, r4
    127e:	4b04      	ldr	r3, [pc, #16]	; (1290 <udi_msc_clear_sense+0x1c>)
    1280:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    1282:	23f0      	movs	r3, #240	; 0xf0
    1284:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    1286:	3be6      	subs	r3, #230	; 0xe6
    1288:	71e3      	strb	r3, [r4, #7]
}
    128a:	bd10      	pop	{r4, pc}
    128c:	20000200 	.word	0x20000200
    1290:	000093bf 	.word	0x000093bf

00001294 <udi_msc_sense_fail>:
{
    1294:	b570      	push	{r4, r5, r6, lr}
    1296:	0006      	movs	r6, r0
    1298:	000d      	movs	r5, r1
    129a:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    129c:	4b08      	ldr	r3, [pc, #32]	; (12c0 <udi_msc_sense_fail+0x2c>)
    129e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    12a0:	2201      	movs	r2, #1
    12a2:	4b08      	ldr	r3, [pc, #32]	; (12c4 <udi_msc_sense_fail+0x30>)
    12a4:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    12a6:	4b08      	ldr	r3, [pc, #32]	; (12c8 <udi_msc_sense_fail+0x34>)
    12a8:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    12aa:	0e22      	lsrs	r2, r4, #24
    12ac:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    12ae:	0c22      	lsrs	r2, r4, #16
    12b0:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    12b2:	0a22      	lsrs	r2, r4, #8
    12b4:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    12b6:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    12b8:	0a2a      	lsrs	r2, r5, #8
    12ba:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    12bc:	735d      	strb	r5, [r3, #13]
}
    12be:	bd70      	pop	{r4, r5, r6, pc}
    12c0:	00001275 	.word	0x00001275
    12c4:	20000048 	.word	0x20000048
    12c8:	20000200 	.word	0x20000200

000012cc <udi_msc_sense_fail_cdb_invalid>:
{
    12cc:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    12ce:	2200      	movs	r2, #0
    12d0:	2190      	movs	r1, #144	; 0x90
    12d2:	0189      	lsls	r1, r1, #6
    12d4:	2005      	movs	r0, #5
    12d6:	4b01      	ldr	r3, [pc, #4]	; (12dc <udi_msc_sense_fail_cdb_invalid+0x10>)
    12d8:	4798      	blx	r3
}
    12da:	bd10      	pop	{r4, pc}
    12dc:	00001295 	.word	0x00001295

000012e0 <udi_msc_cbw_validate>:
{
    12e0:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    12e2:	4b09      	ldr	r3, [pc, #36]	; (1308 <udi_msc_cbw_validate+0x28>)
    12e4:	7b1b      	ldrb	r3, [r3, #12]
    12e6:	4059      	eors	r1, r3
    12e8:	b249      	sxtb	r1, r1
    12ea:	2900      	cmp	r1, #0
    12ec:	db04      	blt.n	12f8 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    12ee:	4b07      	ldr	r3, [pc, #28]	; (130c <udi_msc_cbw_validate+0x2c>)
    12f0:	689a      	ldr	r2, [r3, #8]
	return true;
    12f2:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    12f4:	4282      	cmp	r2, r0
    12f6:	d204      	bcs.n	1302 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    12f8:	4b05      	ldr	r3, [pc, #20]	; (1310 <udi_msc_cbw_validate+0x30>)
    12fa:	4798      	blx	r3
		udi_msc_csw_process();
    12fc:	4b05      	ldr	r3, [pc, #20]	; (1314 <udi_msc_cbw_validate+0x34>)
    12fe:	4798      	blx	r3
		return false;
    1300:	2300      	movs	r3, #0
}
    1302:	0018      	movs	r0, r3
    1304:	bd10      	pop	{r4, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	200001d8 	.word	0x200001d8
    130c:	20000048 	.word	0x20000048
    1310:	000012cd 	.word	0x000012cd
    1314:	00001235 	.word	0x00001235

00001318 <udi_msc_sense_fail_hardware>:
{
    1318:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    131a:	2200      	movs	r2, #0
    131c:	2100      	movs	r1, #0
    131e:	2004      	movs	r0, #4
    1320:	4b01      	ldr	r3, [pc, #4]	; (1328 <udi_msc_sense_fail_hardware+0x10>)
    1322:	4798      	blx	r3
}
    1324:	bd10      	pop	{r4, pc}
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	00001295 	.word	0x00001295

0000132c <udi_msc_data_send>:
{
    132c:	b510      	push	{r4, lr}
    132e:	b082      	sub	sp, #8
    1330:	0002      	movs	r2, r0
    1332:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1334:	4907      	ldr	r1, [pc, #28]	; (1354 <udi_msc_data_send+0x28>)
    1336:	9100      	str	r1, [sp, #0]
    1338:	2101      	movs	r1, #1
    133a:	2081      	movs	r0, #129	; 0x81
    133c:	4c06      	ldr	r4, [pc, #24]	; (1358 <udi_msc_data_send+0x2c>)
    133e:	47a0      	blx	r4
    1340:	2800      	cmp	r0, #0
    1342:	d001      	beq.n	1348 <udi_msc_data_send+0x1c>
}
    1344:	b002      	add	sp, #8
    1346:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1348:	4b04      	ldr	r3, [pc, #16]	; (135c <udi_msc_data_send+0x30>)
    134a:	4798      	blx	r3
		udi_msc_csw_process();
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <udi_msc_data_send+0x34>)
    134e:	4798      	blx	r3
}
    1350:	e7f8      	b.n	1344 <udi_msc_data_send+0x18>
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	000013a5 	.word	0x000013a5
    1358:	00003881 	.word	0x00003881
    135c:	00001319 	.word	0x00001319
    1360:	00001235 	.word	0x00001235

00001364 <udi_msc_sense_fail_busy_or_change>:
{
    1364:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    1366:	2200      	movs	r2, #0
    1368:	21a0      	movs	r1, #160	; 0xa0
    136a:	0189      	lsls	r1, r1, #6
    136c:	2006      	movs	r0, #6
    136e:	4b01      	ldr	r3, [pc, #4]	; (1374 <udi_msc_sense_fail_busy_or_change+0x10>)
    1370:	4798      	blx	r3
}
    1372:	bd10      	pop	{r4, pc}
    1374:	00001295 	.word	0x00001295

00001378 <udi_msc_sense_fail_not_present>:
{
    1378:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    137a:	2200      	movs	r2, #0
    137c:	21e8      	movs	r1, #232	; 0xe8
    137e:	0189      	lsls	r1, r1, #6
    1380:	2002      	movs	r0, #2
    1382:	4b01      	ldr	r3, [pc, #4]	; (1388 <udi_msc_sense_fail_not_present+0x10>)
    1384:	4798      	blx	r3
}
    1386:	bd10      	pop	{r4, pc}
    1388:	00001295 	.word	0x00001295

0000138c <udi_msc_sense_pass>:
{
    138c:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    138e:	4b03      	ldr	r3, [pc, #12]	; (139c <udi_msc_sense_pass+0x10>)
    1390:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1392:	2200      	movs	r2, #0
    1394:	4b02      	ldr	r3, [pc, #8]	; (13a0 <udi_msc_sense_pass+0x14>)
    1396:	731a      	strb	r2, [r3, #12]
}
    1398:	bd10      	pop	{r4, pc}
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	00001275 	.word	0x00001275
    13a0:	20000048 	.word	0x20000048

000013a4 <udi_msc_data_sent>:
{
    13a4:	b510      	push	{r4, lr}
    13a6:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    13a8:	2800      	cmp	r0, #0
    13aa:	d000      	beq.n	13ae <udi_msc_data_sent+0xa>
}
    13ac:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    13ae:	4b04      	ldr	r3, [pc, #16]	; (13c0 <udi_msc_data_sent+0x1c>)
    13b0:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <udi_msc_data_sent+0x20>)
    13b4:	689a      	ldr	r2, [r3, #8]
    13b6:	1b14      	subs	r4, r2, r4
    13b8:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    13ba:	4b03      	ldr	r3, [pc, #12]	; (13c8 <udi_msc_data_sent+0x24>)
    13bc:	4798      	blx	r3
    13be:	e7f5      	b.n	13ac <udi_msc_data_sent+0x8>
    13c0:	0000138d 	.word	0x0000138d
    13c4:	20000048 	.word	0x20000048
    13c8:	00001235 	.word	0x00001235

000013cc <udi_msc_spc_mode_sense>:
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    13ce:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    13d0:	2214      	movs	r2, #20
    13d2:	2100      	movs	r1, #0
    13d4:	4823      	ldr	r0, [pc, #140]	; (1464 <udi_msc_spc_mode_sense+0x98>)
    13d6:	4b24      	ldr	r3, [pc, #144]	; (1468 <udi_msc_spc_mode_sense+0x9c>)
    13d8:	4798      	blx	r3
	if (b_sense10) {
    13da:	2d00      	cmp	r5, #0
    13dc:	d018      	beq.n	1410 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    13de:	4b23      	ldr	r3, [pc, #140]	; (146c <udi_msc_spc_mode_sense+0xa0>)
    13e0:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    13e2:	4a20      	ldr	r2, [pc, #128]	; (1464 <udi_msc_spc_mode_sense+0x98>)
    13e4:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    13e6:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    13e8:	4b20      	ldr	r3, [pc, #128]	; (146c <udi_msc_spc_mode_sense+0xa0>)
    13ea:	7c58      	ldrb	r0, [r3, #17]
    13ec:	233f      	movs	r3, #63	; 0x3f
    13ee:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    13f0:	2b1c      	cmp	r3, #28
    13f2:	d013      	beq.n	141c <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    13f4:	2b3f      	cmp	r3, #63	; 0x3f
    13f6:	d011      	beq.n	141c <udi_msc_spc_mode_sense+0x50>
    13f8:	1c20      	adds	r0, r4, #0
    13fa:	428c      	cmp	r4, r1
    13fc:	d900      	bls.n	1400 <udi_msc_spc_mode_sense+0x34>
    13fe:	1c08      	adds	r0, r1, #0
    1400:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    1402:	2180      	movs	r1, #128	; 0x80
    1404:	0030      	movs	r0, r6
    1406:	4b1a      	ldr	r3, [pc, #104]	; (1470 <udi_msc_spc_mode_sense+0xa4>)
    1408:	4798      	blx	r3
    140a:	2800      	cmp	r0, #0
    140c:	d10f      	bne.n	142e <udi_msc_spc_mode_sense+0x62>
}
    140e:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    1410:	4b16      	ldr	r3, [pc, #88]	; (146c <udi_msc_spc_mode_sense+0xa0>)
    1412:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    1414:	4a13      	ldr	r2, [pc, #76]	; (1464 <udi_msc_spc_mode_sense+0x98>)
    1416:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1418:	2404      	movs	r4, #4
    141a:	e7e5      	b.n	13e8 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    141c:	231c      	movs	r3, #28
    141e:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    1420:	3b12      	subs	r3, #18
    1422:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    1424:	3b05      	subs	r3, #5
    1426:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1428:	340c      	adds	r4, #12
    142a:	b2e4      	uxtb	r4, r4
    142c:	e7e4      	b.n	13f8 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    142e:	4b0f      	ldr	r3, [pc, #60]	; (146c <udi_msc_spc_mode_sense+0xa0>)
    1430:	7b58      	ldrb	r0, [r3, #13]
    1432:	4b10      	ldr	r3, [pc, #64]	; (1474 <udi_msc_spc_mode_sense+0xa8>)
    1434:	4798      	blx	r3
    1436:	1e43      	subs	r3, r0, #1
    1438:	4198      	sbcs	r0, r3
    143a:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    143c:	2d00      	cmp	r5, #0
    143e:	d00c      	beq.n	145a <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1440:	3c02      	subs	r4, #2
    1442:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1444:	4a07      	ldr	r2, [pc, #28]	; (1464 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1446:	0a23      	lsrs	r3, r4, #8
    1448:	0224      	lsls	r4, r4, #8
    144a:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    144c:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    144e:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1450:	0031      	movs	r1, r6
    1452:	4804      	ldr	r0, [pc, #16]	; (1464 <udi_msc_spc_mode_sense+0x98>)
    1454:	4b08      	ldr	r3, [pc, #32]	; (1478 <udi_msc_spc_mode_sense+0xac>)
    1456:	4798      	blx	r3
    1458:	e7d9      	b.n	140e <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    145a:	4b02      	ldr	r3, [pc, #8]	; (1464 <udi_msc_spc_mode_sense+0x98>)
    145c:	3c01      	subs	r4, #1
    145e:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1460:	7098      	strb	r0, [r3, #2]
    1462:	e7f5      	b.n	1450 <udi_msc_spc_mode_sense+0x84>
    1464:	200001b4 	.word	0x200001b4
    1468:	000093bf 	.word	0x000093bf
    146c:	200001d8 	.word	0x200001d8
    1470:	000012e1 	.word	0x000012e1
    1474:	00008741 	.word	0x00008741
    1478:	0000132d 	.word	0x0000132d

0000147c <udi_msc_sbc_trans>:
{
    147c:	b510      	push	{r4, lr}
    147e:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    1480:	d01e      	beq.n	14c0 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1482:	4a17      	ldr	r2, [pc, #92]	; (14e0 <udi_msc_sbc_trans+0x64>)
    1484:	4b17      	ldr	r3, [pc, #92]	; (14e4 <udi_msc_sbc_trans+0x68>)
    1486:	7c59      	ldrb	r1, [r3, #17]
    1488:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    148a:	7c99      	ldrb	r1, [r3, #18]
    148c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    148e:	7cd9      	ldrb	r1, [r3, #19]
    1490:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1492:	7d19      	ldrb	r1, [r3, #20]
    1494:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1496:	4a14      	ldr	r2, [pc, #80]	; (14e8 <udi_msc_sbc_trans+0x6c>)
    1498:	7d99      	ldrb	r1, [r3, #22]
    149a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    149c:	7ddb      	ldrb	r3, [r3, #23]
    149e:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    14a0:	8810      	ldrh	r0, [r2, #0]
    14a2:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    14a4:	0021      	movs	r1, r4
    14a6:	1e4b      	subs	r3, r1, #1
    14a8:	4199      	sbcs	r1, r3
    14aa:	01c9      	lsls	r1, r1, #7
    14ac:	4b0f      	ldr	r3, [pc, #60]	; (14ec <udi_msc_sbc_trans+0x70>)
    14ae:	4798      	blx	r3
    14b0:	2800      	cmp	r0, #0
    14b2:	d004      	beq.n	14be <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    14b4:	4b0e      	ldr	r3, [pc, #56]	; (14f0 <udi_msc_sbc_trans+0x74>)
    14b6:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    14b8:	2201      	movs	r2, #1
    14ba:	4b0e      	ldr	r3, [pc, #56]	; (14f4 <udi_msc_sbc_trans+0x78>)
    14bc:	701a      	strb	r2, [r3, #0]
}
    14be:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    14c0:	4b08      	ldr	r3, [pc, #32]	; (14e4 <udi_msc_sbc_trans+0x68>)
    14c2:	7b58      	ldrb	r0, [r3, #13]
    14c4:	4b0c      	ldr	r3, [pc, #48]	; (14f8 <udi_msc_sbc_trans+0x7c>)
    14c6:	4798      	blx	r3
    14c8:	2800      	cmp	r0, #0
    14ca:	d0da      	beq.n	1482 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    14cc:	2200      	movs	r2, #0
    14ce:	219c      	movs	r1, #156	; 0x9c
    14d0:	0189      	lsls	r1, r1, #6
    14d2:	2007      	movs	r0, #7
    14d4:	4b09      	ldr	r3, [pc, #36]	; (14fc <udi_msc_sbc_trans+0x80>)
    14d6:	4798      	blx	r3
			udi_msc_csw_process();
    14d8:	4b09      	ldr	r3, [pc, #36]	; (1500 <udi_msc_sbc_trans+0x84>)
    14da:	4798      	blx	r3
			return;
    14dc:	e7ef      	b.n	14be <udi_msc_sbc_trans+0x42>
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	200001c8 	.word	0x200001c8
    14e4:	200001d8 	.word	0x200001d8
    14e8:	200001f8 	.word	0x200001f8
    14ec:	000012e1 	.word	0x000012e1
    14f0:	200001cd 	.word	0x200001cd
    14f4:	200001ce 	.word	0x200001ce
    14f8:	00008741 	.word	0x00008741
    14fc:	00001295 	.word	0x00001295
    1500:	00001235 	.word	0x00001235

00001504 <udi_msc_cbw_received>:
{
    1504:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    1506:	2800      	cmp	r0, #0
    1508:	d10d      	bne.n	1526 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    150a:	291f      	cmp	r1, #31
    150c:	d104      	bne.n	1518 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    150e:	4b84      	ldr	r3, [pc, #528]	; (1720 <udi_msc_cbw_received+0x21c>)
    1510:	4a84      	ldr	r2, [pc, #528]	; (1724 <udi_msc_cbw_received+0x220>)
    1512:	6812      	ldr	r2, [r2, #0]
    1514:	429a      	cmp	r2, r3
    1516:	d007      	beq.n	1528 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1518:	2201      	movs	r2, #1
    151a:	4b83      	ldr	r3, [pc, #524]	; (1728 <udi_msc_cbw_received+0x224>)
    151c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    151e:	4b83      	ldr	r3, [pc, #524]	; (172c <udi_msc_cbw_received+0x228>)
    1520:	4798      	blx	r3
		udi_msc_csw_invalid();
    1522:	4b83      	ldr	r3, [pc, #524]	; (1730 <udi_msc_cbw_received+0x22c>)
    1524:	4798      	blx	r3
}
    1526:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    1528:	4b7e      	ldr	r3, [pc, #504]	; (1724 <udi_msc_cbw_received+0x220>)
    152a:	7b58      	ldrb	r0, [r3, #13]
    152c:	220f      	movs	r2, #15
    152e:	4010      	ands	r0, r2
    1530:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    1532:	4b80      	ldr	r3, [pc, #512]	; (1734 <udi_msc_cbw_received+0x230>)
    1534:	781b      	ldrb	r3, [r3, #0]
    1536:	4283      	cmp	r3, r0
    1538:	d30b      	bcc.n	1552 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    153a:	4b7a      	ldr	r3, [pc, #488]	; (1724 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    153c:	4a7e      	ldr	r2, [pc, #504]	; (1738 <udi_msc_cbw_received+0x234>)
    153e:	6899      	ldr	r1, [r3, #8]
    1540:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    1542:	7bda      	ldrb	r2, [r3, #15]
    1544:	2a5a      	cmp	r2, #90	; 0x5a
    1546:	d900      	bls.n	154a <udi_msc_cbw_received+0x46>
    1548:	e0d2      	b.n	16f0 <udi_msc_cbw_received+0x1ec>
    154a:	0093      	lsls	r3, r2, #2
    154c:	4a7b      	ldr	r2, [pc, #492]	; (173c <udi_msc_cbw_received+0x238>)
    154e:	58d3      	ldr	r3, [r2, r3]
    1550:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    1552:	4b7b      	ldr	r3, [pc, #492]	; (1740 <udi_msc_cbw_received+0x23c>)
    1554:	4798      	blx	r3
		udi_msc_csw_process();
    1556:	4b7b      	ldr	r3, [pc, #492]	; (1744 <udi_msc_cbw_received+0x240>)
    1558:	4798      	blx	r3
		return;
    155a:	e7e4      	b.n	1526 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    155c:	4b71      	ldr	r3, [pc, #452]	; (1724 <udi_msc_cbw_received+0x220>)
    155e:	7cda      	ldrb	r2, [r3, #19]
    1560:	1c13      	adds	r3, r2, #0
    1562:	2a12      	cmp	r2, #18
    1564:	d900      	bls.n	1568 <udi_msc_cbw_received+0x64>
    1566:	2312      	movs	r3, #18
    1568:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    156a:	2180      	movs	r1, #128	; 0x80
    156c:	0020      	movs	r0, r4
    156e:	4b76      	ldr	r3, [pc, #472]	; (1748 <udi_msc_cbw_received+0x244>)
    1570:	4798      	blx	r3
    1572:	2800      	cmp	r0, #0
    1574:	d0d7      	beq.n	1526 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    1576:	0021      	movs	r1, r4
    1578:	4874      	ldr	r0, [pc, #464]	; (174c <udi_msc_cbw_received+0x248>)
    157a:	4b75      	ldr	r3, [pc, #468]	; (1750 <udi_msc_cbw_received+0x24c>)
    157c:	4798      	blx	r3
    157e:	e7d2      	b.n	1526 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1580:	4b68      	ldr	r3, [pc, #416]	; (1724 <udi_msc_cbw_received+0x220>)
    1582:	7cdb      	ldrb	r3, [r3, #19]
    1584:	1c1a      	adds	r2, r3, #0
    1586:	2b24      	cmp	r3, #36	; 0x24
    1588:	d900      	bls.n	158c <udi_msc_cbw_received+0x88>
    158a:	2224      	movs	r2, #36	; 0x24
    158c:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    158e:	2180      	movs	r1, #128	; 0x80
    1590:	0020      	movs	r0, r4
    1592:	4b6d      	ldr	r3, [pc, #436]	; (1748 <udi_msc_cbw_received+0x244>)
    1594:	4798      	blx	r3
    1596:	2800      	cmp	r0, #0
    1598:	d0c5      	beq.n	1526 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    159a:	4b62      	ldr	r3, [pc, #392]	; (1724 <udi_msc_cbw_received+0x220>)
    159c:	7c1b      	ldrb	r3, [r3, #16]
    159e:	079b      	lsls	r3, r3, #30
    15a0:	d103      	bne.n	15aa <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    15a2:	4b60      	ldr	r3, [pc, #384]	; (1724 <udi_msc_cbw_received+0x220>)
    15a4:	7c5d      	ldrb	r5, [r3, #17]
    15a6:	2d00      	cmp	r5, #0
    15a8:	d004      	beq.n	15b4 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    15aa:	4b65      	ldr	r3, [pc, #404]	; (1740 <udi_msc_cbw_received+0x23c>)
    15ac:	4798      	blx	r3
		udi_msc_csw_process();
    15ae:	4b65      	ldr	r3, [pc, #404]	; (1744 <udi_msc_cbw_received+0x240>)
    15b0:	4798      	blx	r3
    15b2:	e7b8      	b.n	1526 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    15b4:	4b5b      	ldr	r3, [pc, #364]	; (1724 <udi_msc_cbw_received+0x220>)
    15b6:	7b58      	ldrb	r0, [r3, #13]
    15b8:	4b66      	ldr	r3, [pc, #408]	; (1754 <udi_msc_cbw_received+0x250>)
    15ba:	4798      	blx	r3
    15bc:	2380      	movs	r3, #128	; 0x80
    15be:	2800      	cmp	r0, #0
    15c0:	d100      	bne.n	15c4 <udi_msc_cbw_received+0xc0>
    15c2:	002b      	movs	r3, r5
    15c4:	4e64      	ldr	r6, [pc, #400]	; (1758 <udi_msc_cbw_received+0x254>)
    15c6:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    15c8:	4b56      	ldr	r3, [pc, #344]	; (1724 <udi_msc_cbw_received+0x220>)
    15ca:	7b58      	ldrb	r0, [r3, #13]
    15cc:	4b63      	ldr	r3, [pc, #396]	; (175c <udi_msc_cbw_received+0x258>)
    15ce:	4798      	blx	r3
    15d0:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    15d2:	0030      	movs	r0, r6
    15d4:	3010      	adds	r0, #16
    15d6:	3101      	adds	r1, #1
    15d8:	2210      	movs	r2, #16
    15da:	4b61      	ldr	r3, [pc, #388]	; (1760 <udi_msc_cbw_received+0x25c>)
    15dc:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    15de:	7c33      	ldrb	r3, [r6, #16]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d100      	bne.n	15e6 <udi_msc_cbw_received+0xe2>
    15e4:	e08e      	b.n	1704 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    15e6:	2b22      	cmp	r3, #34	; 0x22
    15e8:	d100      	bne.n	15ec <udi_msc_cbw_received+0xe8>
    15ea:	e08a      	b.n	1702 <udi_msc_cbw_received+0x1fe>
    15ec:	495a      	ldr	r1, [pc, #360]	; (1758 <udi_msc_cbw_received+0x254>)
		i++;
    15ee:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    15f0:	7c4a      	ldrb	r2, [r1, #17]
    15f2:	2a00      	cmp	r2, #0
    15f4:	d100      	bne.n	15f8 <udi_msc_cbw_received+0xf4>
    15f6:	e085      	b.n	1704 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    15f8:	2a22      	cmp	r2, #34	; 0x22
    15fa:	d100      	bne.n	15fe <udi_msc_cbw_received+0xfa>
    15fc:	e082      	b.n	1704 <udi_msc_cbw_received+0x200>
		i++;
    15fe:	3301      	adds	r3, #1
    1600:	b2db      	uxtb	r3, r3
    1602:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1604:	2b10      	cmp	r3, #16
    1606:	d1f3      	bne.n	15f0 <udi_msc_cbw_received+0xec>
    1608:	e084      	b.n	1714 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    160a:	2000      	movs	r0, #0
    160c:	4b55      	ldr	r3, [pc, #340]	; (1764 <udi_msc_cbw_received+0x260>)
    160e:	4798      	blx	r3
		break;
    1610:	e789      	b.n	1526 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    1612:	2001      	movs	r0, #1
    1614:	4b53      	ldr	r3, [pc, #332]	; (1764 <udi_msc_cbw_received+0x260>)
    1616:	4798      	blx	r3
		break;
    1618:	e785      	b.n	1526 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    161a:	4b53      	ldr	r3, [pc, #332]	; (1768 <udi_msc_cbw_received+0x264>)
    161c:	4798      	blx	r3
    161e:	2802      	cmp	r0, #2
    1620:	d009      	beq.n	1636 <udi_msc_cbw_received+0x132>
    1622:	2803      	cmp	r0, #3
    1624:	d004      	beq.n	1630 <udi_msc_cbw_received+0x12c>
    1626:	2800      	cmp	r0, #0
    1628:	d008      	beq.n	163c <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    162a:	4b50      	ldr	r3, [pc, #320]	; (176c <udi_msc_cbw_received+0x268>)
    162c:	4798      	blx	r3
    162e:	e007      	b.n	1640 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    1630:	4b4f      	ldr	r3, [pc, #316]	; (1770 <udi_msc_cbw_received+0x26c>)
    1632:	4798      	blx	r3
    1634:	e004      	b.n	1640 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    1636:	4b4f      	ldr	r3, [pc, #316]	; (1774 <udi_msc_cbw_received+0x270>)
    1638:	4798      	blx	r3
    163a:	e001      	b.n	1640 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    163c:	4b4e      	ldr	r3, [pc, #312]	; (1778 <udi_msc_cbw_received+0x274>)
    163e:	4798      	blx	r3
	udi_msc_csw_process();
    1640:	4b40      	ldr	r3, [pc, #256]	; (1744 <udi_msc_cbw_received+0x240>)
    1642:	4798      	blx	r3
    1644:	e76f      	b.n	1526 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1646:	2180      	movs	r1, #128	; 0x80
    1648:	2008      	movs	r0, #8
    164a:	4b3f      	ldr	r3, [pc, #252]	; (1748 <udi_msc_cbw_received+0x244>)
    164c:	4798      	blx	r3
    164e:	2800      	cmp	r0, #0
    1650:	d100      	bne.n	1654 <udi_msc_cbw_received+0x150>
    1652:	e768      	b.n	1526 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1654:	4b33      	ldr	r3, [pc, #204]	; (1724 <udi_msc_cbw_received+0x220>)
    1656:	7b58      	ldrb	r0, [r3, #13]
    1658:	4948      	ldr	r1, [pc, #288]	; (177c <udi_msc_cbw_received+0x278>)
    165a:	4b49      	ldr	r3, [pc, #292]	; (1780 <udi_msc_cbw_received+0x27c>)
    165c:	4798      	blx	r3
    165e:	2802      	cmp	r0, #2
    1660:	d00d      	beq.n	167e <udi_msc_cbw_received+0x17a>
    1662:	2803      	cmp	r0, #3
    1664:	d006      	beq.n	1674 <udi_msc_cbw_received+0x170>
    1666:	2800      	cmp	r0, #0
    1668:	d00e      	beq.n	1688 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    166a:	4b40      	ldr	r3, [pc, #256]	; (176c <udi_msc_cbw_received+0x268>)
    166c:	4798      	blx	r3
		udi_msc_csw_process();
    166e:	4b35      	ldr	r3, [pc, #212]	; (1744 <udi_msc_cbw_received+0x240>)
    1670:	4798      	blx	r3
    1672:	e758      	b.n	1526 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1674:	4b3e      	ldr	r3, [pc, #248]	; (1770 <udi_msc_cbw_received+0x26c>)
    1676:	4798      	blx	r3
		udi_msc_csw_process();
    1678:	4b32      	ldr	r3, [pc, #200]	; (1744 <udi_msc_cbw_received+0x240>)
    167a:	4798      	blx	r3
    167c:	e753      	b.n	1526 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    167e:	4b3d      	ldr	r3, [pc, #244]	; (1774 <udi_msc_cbw_received+0x270>)
    1680:	4798      	blx	r3
		udi_msc_csw_process();
    1682:	4b30      	ldr	r3, [pc, #192]	; (1744 <udi_msc_cbw_received+0x240>)
    1684:	4798      	blx	r3
    1686:	e74e      	b.n	1526 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1688:	483c      	ldr	r0, [pc, #240]	; (177c <udi_msc_cbw_received+0x278>)
    168a:	2380      	movs	r3, #128	; 0x80
    168c:	029b      	lsls	r3, r3, #10
    168e:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1690:	6803      	ldr	r3, [r0, #0]
    1692:	ba1b      	rev	r3, r3
    1694:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1696:	2108      	movs	r1, #8
    1698:	4b2d      	ldr	r3, [pc, #180]	; (1750 <udi_msc_cbw_received+0x24c>)
    169a:	4798      	blx	r3
    169c:	e743      	b.n	1526 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    169e:	4b21      	ldr	r3, [pc, #132]	; (1724 <udi_msc_cbw_received+0x220>)
    16a0:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    16a2:	079a      	lsls	r2, r3, #30
    16a4:	d404      	bmi.n	16b0 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    16a6:	4b34      	ldr	r3, [pc, #208]	; (1778 <udi_msc_cbw_received+0x274>)
    16a8:	4798      	blx	r3
	udi_msc_csw_process();
    16aa:	4b26      	ldr	r3, [pc, #152]	; (1744 <udi_msc_cbw_received+0x240>)
    16ac:	4798      	blx	r3
    16ae:	e73a      	b.n	1526 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    16b0:	2101      	movs	r1, #1
    16b2:	404b      	eors	r3, r1
    16b4:	2101      	movs	r1, #1
    16b6:	4019      	ands	r1, r3
    16b8:	4b32      	ldr	r3, [pc, #200]	; (1784 <udi_msc_cbw_received+0x280>)
    16ba:	4798      	blx	r3
    16bc:	e7f3      	b.n	16a6 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    16be:	4b19      	ldr	r3, [pc, #100]	; (1724 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    16c0:	7cdb      	ldrb	r3, [r3, #19]
    16c2:	2b00      	cmp	r3, #0
    16c4:	d004      	beq.n	16d0 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    16c6:	4b1e      	ldr	r3, [pc, #120]	; (1740 <udi_msc_cbw_received+0x23c>)
    16c8:	4798      	blx	r3
	udi_msc_csw_process();
    16ca:	4b1e      	ldr	r3, [pc, #120]	; (1744 <udi_msc_cbw_received+0x240>)
    16cc:	4798      	blx	r3
    16ce:	e72a      	b.n	1526 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    16d0:	4b29      	ldr	r3, [pc, #164]	; (1778 <udi_msc_cbw_received+0x274>)
    16d2:	4798      	blx	r3
    16d4:	e7f9      	b.n	16ca <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    16d6:	4b28      	ldr	r3, [pc, #160]	; (1778 <udi_msc_cbw_received+0x274>)
    16d8:	4798      	blx	r3
		udi_msc_csw_process();
    16da:	4b1a      	ldr	r3, [pc, #104]	; (1744 <udi_msc_cbw_received+0x240>)
    16dc:	4798      	blx	r3
		break;
    16de:	e722      	b.n	1526 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    16e0:	2001      	movs	r0, #1
    16e2:	4b29      	ldr	r3, [pc, #164]	; (1788 <udi_msc_cbw_received+0x284>)
    16e4:	4798      	blx	r3
		break;
    16e6:	e71e      	b.n	1526 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    16e8:	2000      	movs	r0, #0
    16ea:	4b27      	ldr	r3, [pc, #156]	; (1788 <udi_msc_cbw_received+0x284>)
    16ec:	4798      	blx	r3
		break;
    16ee:	e71a      	b.n	1526 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    16f0:	2200      	movs	r2, #0
    16f2:	2180      	movs	r1, #128	; 0x80
    16f4:	0189      	lsls	r1, r1, #6
    16f6:	2005      	movs	r0, #5
    16f8:	4b24      	ldr	r3, [pc, #144]	; (178c <udi_msc_cbw_received+0x288>)
    16fa:	4798      	blx	r3
		udi_msc_csw_process();
    16fc:	4b11      	ldr	r3, [pc, #68]	; (1744 <udi_msc_cbw_received+0x240>)
    16fe:	4798      	blx	r3
		break;
    1700:	e711      	b.n	1526 <udi_msc_cbw_received+0x22>
	i = 0;
    1702:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1704:	4814      	ldr	r0, [pc, #80]	; (1758 <udi_msc_cbw_received+0x254>)
    1706:	2120      	movs	r1, #32
    1708:	18c2      	adds	r2, r0, r3
    170a:	7411      	strb	r1, [r2, #16]
		i++;
    170c:	3301      	adds	r3, #1
    170e:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1710:	2b10      	cmp	r3, #16
    1712:	d1f9      	bne.n	1708 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1714:	0021      	movs	r1, r4
    1716:	4810      	ldr	r0, [pc, #64]	; (1758 <udi_msc_cbw_received+0x254>)
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <udi_msc_cbw_received+0x24c>)
    171a:	4798      	blx	r3
    171c:	e703      	b.n	1526 <udi_msc_cbw_received+0x22>
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	43425355 	.word	0x43425355
    1724:	200001d8 	.word	0x200001d8
    1728:	200001cc 	.word	0x200001cc
    172c:	000011dd 	.word	0x000011dd
    1730:	00001209 	.word	0x00001209
    1734:	200001fc 	.word	0x200001fc
    1738:	20000048 	.word	0x20000048
    173c:	0000a838 	.word	0x0000a838
    1740:	000012cd 	.word	0x000012cd
    1744:	00001235 	.word	0x00001235
    1748:	000012e1 	.word	0x000012e1
    174c:	20000200 	.word	0x20000200
    1750:	0000132d 	.word	0x0000132d
    1754:	00008759 	.word	0x00008759
    1758:	20000058 	.word	0x20000058
    175c:	00008771 	.word	0x00008771
    1760:	000093ad 	.word	0x000093ad
    1764:	000013cd 	.word	0x000013cd
    1768:	000086f5 	.word	0x000086f5
    176c:	00001319 	.word	0x00001319
    1770:	00001365 	.word	0x00001365
    1774:	00001379 	.word	0x00001379
    1778:	0000138d 	.word	0x0000138d
    177c:	200001d0 	.word	0x200001d0
    1780:	0000870d 	.word	0x0000870d
    1784:	00008731 	.word	0x00008731
    1788:	0000147d 	.word	0x0000147d
    178c:	00001295 	.word	0x00001295

00001790 <udi_msc_disable>:
{
    1790:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1792:	2200      	movs	r2, #0
    1794:	4b04      	ldr	r3, [pc, #16]	; (17a8 <udi_msc_disable+0x18>)
    1796:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1798:	2301      	movs	r3, #1
    179a:	4a04      	ldr	r2, [pc, #16]	; (17ac <udi_msc_disable+0x1c>)
    179c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    179e:	4a04      	ldr	r2, [pc, #16]	; (17b0 <udi_msc_disable+0x20>)
    17a0:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    17a2:	4b04      	ldr	r3, [pc, #16]	; (17b4 <udi_msc_disable+0x24>)
    17a4:	4798      	blx	r3
}
    17a6:	bd10      	pop	{r4, pc}
    17a8:	200001ce 	.word	0x200001ce
    17ac:	20000044 	.word	0x20000044
    17b0:	20000045 	.word	0x20000045
    17b4:	00005e0d 	.word	0x00005e0d

000017b8 <udi_msc_setup>:
{
    17b8:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    17ba:	4b20      	ldr	r3, [pc, #128]	; (183c <udi_msc_setup+0x84>)
    17bc:	781a      	ldrb	r2, [r3, #0]
    17be:	b253      	sxtb	r3, r2
    17c0:	2b00      	cmp	r3, #0
    17c2:	db05      	blt.n	17d0 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17c4:	2360      	movs	r3, #96	; 0x60
    17c6:	4013      	ands	r3, r2
	return false;	// Not supported request
    17c8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17ca:	2b20      	cmp	r3, #32
    17cc:	d018      	beq.n	1800 <udi_msc_setup+0x48>
}
    17ce:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17d0:	2360      	movs	r3, #96	; 0x60
    17d2:	4013      	ands	r3, r2
	return false;	// Not supported request
    17d4:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17d6:	2b20      	cmp	r3, #32
    17d8:	d1f9      	bne.n	17ce <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    17da:	4b18      	ldr	r3, [pc, #96]	; (183c <udi_msc_setup+0x84>)
    17dc:	785b      	ldrb	r3, [r3, #1]
    17de:	2bfe      	cmp	r3, #254	; 0xfe
    17e0:	d127      	bne.n	1832 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    17e2:	4b16      	ldr	r3, [pc, #88]	; (183c <udi_msc_setup+0x84>)
    17e4:	88db      	ldrh	r3, [r3, #6]
    17e6:	2b01      	cmp	r3, #1
    17e8:	d1f1      	bne.n	17ce <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    17ea:	4b14      	ldr	r3, [pc, #80]	; (183c <udi_msc_setup+0x84>)
    17ec:	885b      	ldrh	r3, [r3, #2]
    17ee:	2b00      	cmp	r3, #0
    17f0:	d1ed      	bne.n	17ce <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    17f2:	4b12      	ldr	r3, [pc, #72]	; (183c <udi_msc_setup+0x84>)
    17f4:	4a12      	ldr	r2, [pc, #72]	; (1840 <udi_msc_setup+0x88>)
    17f6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    17f8:	2201      	movs	r2, #1
    17fa:	819a      	strh	r2, [r3, #12]
				return true;
    17fc:	3001      	adds	r0, #1
    17fe:	e7e6      	b.n	17ce <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1800:	4b0e      	ldr	r3, [pc, #56]	; (183c <udi_msc_setup+0x84>)
    1802:	785b      	ldrb	r3, [r3, #1]
    1804:	2bff      	cmp	r3, #255	; 0xff
    1806:	d116      	bne.n	1836 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1808:	4b0c      	ldr	r3, [pc, #48]	; (183c <udi_msc_setup+0x84>)
    180a:	88db      	ldrh	r3, [r3, #6]
    180c:	2b00      	cmp	r3, #0
    180e:	d1de      	bne.n	17ce <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1810:	4b0a      	ldr	r3, [pc, #40]	; (183c <udi_msc_setup+0x84>)
    1812:	885b      	ldrh	r3, [r3, #2]
    1814:	2b00      	cmp	r3, #0
    1816:	d1da      	bne.n	17ce <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1818:	4a0a      	ldr	r2, [pc, #40]	; (1844 <udi_msc_setup+0x8c>)
    181a:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    181c:	4a0a      	ldr	r2, [pc, #40]	; (1848 <udi_msc_setup+0x90>)
    181e:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1820:	3002      	adds	r0, #2
    1822:	4c0a      	ldr	r4, [pc, #40]	; (184c <udi_msc_setup+0x94>)
    1824:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1826:	2081      	movs	r0, #129	; 0x81
    1828:	47a0      	blx	r4
				udi_msc_cbw_wait();
    182a:	4b09      	ldr	r3, [pc, #36]	; (1850 <udi_msc_setup+0x98>)
    182c:	4798      	blx	r3
				return true;
    182e:	2001      	movs	r0, #1
    1830:	e7cd      	b.n	17ce <udi_msc_setup+0x16>
	return false;	// Not supported request
    1832:	2000      	movs	r0, #0
    1834:	e7cb      	b.n	17ce <udi_msc_setup+0x16>
    1836:	2000      	movs	r0, #0
    1838:	e7c9      	b.n	17ce <udi_msc_setup+0x16>
    183a:	46c0      	nop			; (mov r8, r8)
    183c:	20000588 	.word	0x20000588
    1840:	200001fc 	.word	0x200001fc
    1844:	200001cc 	.word	0x200001cc
    1848:	200001ce 	.word	0x200001ce
    184c:	000034f5 	.word	0x000034f5
    1850:	000010e1 	.word	0x000010e1

00001854 <udi_msc_process_trans>:
{
    1854:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    1856:	4b1e      	ldr	r3, [pc, #120]	; (18d0 <udi_msc_process_trans+0x7c>)
    1858:	781c      	ldrb	r4, [r3, #0]
    185a:	2c00      	cmp	r4, #0
    185c:	d030      	beq.n	18c0 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    185e:	2300      	movs	r3, #0
    1860:	4a1b      	ldr	r2, [pc, #108]	; (18d0 <udi_msc_process_trans+0x7c>)
    1862:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    1864:	4a1b      	ldr	r2, [pc, #108]	; (18d4 <udi_msc_process_trans+0x80>)
    1866:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    1868:	4b1b      	ldr	r3, [pc, #108]	; (18d8 <udi_msc_process_trans+0x84>)
    186a:	781b      	ldrb	r3, [r3, #0]
    186c:	2b00      	cmp	r3, #0
    186e:	d015      	beq.n	189c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1870:	4b1a      	ldr	r3, [pc, #104]	; (18dc <udi_msc_process_trans+0x88>)
    1872:	881a      	ldrh	r2, [r3, #0]
    1874:	4b1a      	ldr	r3, [pc, #104]	; (18e0 <udi_msc_process_trans+0x8c>)
    1876:	6819      	ldr	r1, [r3, #0]
    1878:	4b1a      	ldr	r3, [pc, #104]	; (18e4 <udi_msc_process_trans+0x90>)
    187a:	7b58      	ldrb	r0, [r3, #13]
    187c:	4b1a      	ldr	r3, [pc, #104]	; (18e8 <udi_msc_process_trans+0x94>)
    187e:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1880:	4b14      	ldr	r3, [pc, #80]	; (18d4 <udi_msc_process_trans+0x80>)
    1882:	781b      	ldrb	r3, [r3, #0]
    1884:	b2db      	uxtb	r3, r3
    1886:	2b00      	cmp	r3, #0
    1888:	d111      	bne.n	18ae <udi_msc_process_trans+0x5a>
	switch (status) {
    188a:	2802      	cmp	r0, #2
    188c:	d01d      	beq.n	18ca <udi_msc_process_trans+0x76>
    188e:	2803      	cmp	r0, #3
    1890:	d018      	beq.n	18c4 <udi_msc_process_trans+0x70>
    1892:	2800      	cmp	r0, #0
    1894:	d010      	beq.n	18b8 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1896:	4b15      	ldr	r3, [pc, #84]	; (18ec <udi_msc_process_trans+0x98>)
    1898:	4798      	blx	r3
		break;
    189a:	e00f      	b.n	18bc <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    189c:	4b0f      	ldr	r3, [pc, #60]	; (18dc <udi_msc_process_trans+0x88>)
    189e:	881a      	ldrh	r2, [r3, #0]
    18a0:	4b0f      	ldr	r3, [pc, #60]	; (18e0 <udi_msc_process_trans+0x8c>)
    18a2:	6819      	ldr	r1, [r3, #0]
    18a4:	4b0f      	ldr	r3, [pc, #60]	; (18e4 <udi_msc_process_trans+0x90>)
    18a6:	7b58      	ldrb	r0, [r3, #13]
    18a8:	4b11      	ldr	r3, [pc, #68]	; (18f0 <udi_msc_process_trans+0x9c>)
    18aa:	4798      	blx	r3
    18ac:	e7e8      	b.n	1880 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    18ae:	2100      	movs	r1, #0
    18b0:	4a08      	ldr	r2, [pc, #32]	; (18d4 <udi_msc_process_trans+0x80>)
    18b2:	7011      	strb	r1, [r2, #0]
		return true;
    18b4:	001c      	movs	r4, r3
    18b6:	e003      	b.n	18c0 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    18b8:	4b0e      	ldr	r3, [pc, #56]	; (18f4 <udi_msc_process_trans+0xa0>)
    18ba:	4798      	blx	r3
	udi_msc_csw_process();
    18bc:	4b0e      	ldr	r3, [pc, #56]	; (18f8 <udi_msc_process_trans+0xa4>)
    18be:	4798      	blx	r3
}
    18c0:	0020      	movs	r0, r4
    18c2:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    18c4:	4b0d      	ldr	r3, [pc, #52]	; (18fc <udi_msc_process_trans+0xa8>)
    18c6:	4798      	blx	r3
		break;
    18c8:	e7f8      	b.n	18bc <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    18ca:	4b0d      	ldr	r3, [pc, #52]	; (1900 <udi_msc_process_trans+0xac>)
    18cc:	4798      	blx	r3
		break;
    18ce:	e7f5      	b.n	18bc <udi_msc_process_trans+0x68>
    18d0:	200001ce 	.word	0x200001ce
    18d4:	20000045 	.word	0x20000045
    18d8:	200001cd 	.word	0x200001cd
    18dc:	200001f8 	.word	0x200001f8
    18e0:	200001c8 	.word	0x200001c8
    18e4:	200001d8 	.word	0x200001d8
    18e8:	00008781 	.word	0x00008781
    18ec:	00001319 	.word	0x00001319
    18f0:	000087b5 	.word	0x000087b5
    18f4:	0000138d 	.word	0x0000138d
    18f8:	00001235 	.word	0x00001235
    18fc:	00001365 	.word	0x00001365
    1900:	00001379 	.word	0x00001379

00001904 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1904:	b530      	push	{r4, r5, lr}
    1906:	b083      	sub	sp, #12
    1908:	0005      	movs	r5, r0
    190a:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    190c:	4a1d      	ldr	r2, [pc, #116]	; (1984 <udi_msc_trans_block+0x80>)
    190e:	7810      	ldrb	r0, [r2, #0]
    1910:	b2c0      	uxtb	r0, r0
    1912:	2800      	cmp	r0, #0
    1914:	d013      	beq.n	193e <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1916:	2000      	movs	r0, #0
    1918:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    191a:	3081      	adds	r0, #129	; 0x81
    191c:	2d00      	cmp	r5, #0
    191e:	d100      	bne.n	1922 <udi_msc_trans_block+0x1e>
    1920:	387f      	subs	r0, #127	; 0x7f
    1922:	2b00      	cmp	r3, #0
    1924:	d00d      	beq.n	1942 <udi_msc_trans_block+0x3e>
    1926:	9300      	str	r3, [sp, #0]
    1928:	0023      	movs	r3, r4
    192a:	000a      	movs	r2, r1
    192c:	2100      	movs	r1, #0
    192e:	4d16      	ldr	r5, [pc, #88]	; (1988 <udi_msc_trans_block+0x84>)
    1930:	47a8      	blx	r5
    1932:	2800      	cmp	r0, #0
    1934:	d020      	beq.n	1978 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1936:	4b15      	ldr	r3, [pc, #84]	; (198c <udi_msc_trans_block+0x88>)
    1938:	689a      	ldr	r2, [r3, #8]
    193a:	1b14      	subs	r4, r2, r4
    193c:	609c      	str	r4, [r3, #8]
	return true;
}
    193e:	b003      	add	sp, #12
    1940:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1942:	4b13      	ldr	r3, [pc, #76]	; (1990 <udi_msc_trans_block+0x8c>)
    1944:	9300      	str	r3, [sp, #0]
    1946:	0023      	movs	r3, r4
    1948:	000a      	movs	r2, r1
    194a:	2100      	movs	r1, #0
    194c:	4d0e      	ldr	r5, [pc, #56]	; (1988 <udi_msc_trans_block+0x84>)
    194e:	47a8      	blx	r5
    1950:	2800      	cmp	r0, #0
    1952:	d011      	beq.n	1978 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1954:	4a0b      	ldr	r2, [pc, #44]	; (1984 <udi_msc_trans_block+0x80>)
    1956:	7813      	ldrb	r3, [r2, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	d0fc      	beq.n	1956 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    195c:	4b0d      	ldr	r3, [pc, #52]	; (1994 <udi_msc_trans_block+0x90>)
    195e:	781b      	ldrb	r3, [r3, #0]
			return false;
    1960:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1962:	2b00      	cmp	r3, #0
    1964:	d1eb      	bne.n	193e <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1966:	4b09      	ldr	r3, [pc, #36]	; (198c <udi_msc_trans_block+0x88>)
    1968:	689a      	ldr	r2, [r3, #8]
    196a:	1b14      	subs	r4, r2, r4
    196c:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    196e:	4b09      	ldr	r3, [pc, #36]	; (1994 <udi_msc_trans_block+0x90>)
    1970:	7818      	ldrb	r0, [r3, #0]
    1972:	2301      	movs	r3, #1
    1974:	4058      	eors	r0, r3
    1976:	e7e2      	b.n	193e <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1978:	2201      	movs	r2, #1
    197a:	4b02      	ldr	r3, [pc, #8]	; (1984 <udi_msc_trans_block+0x80>)
    197c:	701a      	strb	r2, [r3, #0]
		return false;
    197e:	2000      	movs	r0, #0
    1980:	e7dd      	b.n	193e <udi_msc_trans_block+0x3a>
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	20000044 	.word	0x20000044
    1988:	00003881 	.word	0x00003881
    198c:	20000048 	.word	0x20000048
    1990:	000010c5 	.word	0x000010c5
    1994:	20000340 	.word	0x20000340

00001998 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1998:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    199a:	4b11      	ldr	r3, [pc, #68]	; (19e0 <udc_next_desc_in_iface+0x48>)
    199c:	681b      	ldr	r3, [r3, #0]
    199e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    19a0:	7894      	ldrb	r4, [r2, #2]
    19a2:	78d3      	ldrb	r3, [r2, #3]
    19a4:	021b      	lsls	r3, r3, #8
    19a6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    19a8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    19aa:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    19ac:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    19ae:	4290      	cmp	r0, r2
    19b0:	d210      	bcs.n	19d4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    19b2:	7843      	ldrb	r3, [r0, #1]
    19b4:	2b04      	cmp	r3, #4
    19b6:	d00f      	beq.n	19d8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    19b8:	428b      	cmp	r3, r1
    19ba:	d00a      	beq.n	19d2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    19bc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    19be:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    19c0:	4290      	cmp	r0, r2
    19c2:	d205      	bcs.n	19d0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    19c4:	7843      	ldrb	r3, [r0, #1]
    19c6:	2b04      	cmp	r3, #4
    19c8:	d008      	beq.n	19dc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    19ca:	428b      	cmp	r3, r1
    19cc:	d1f6      	bne.n	19bc <udc_next_desc_in_iface+0x24>
    19ce:	e000      	b.n	19d2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    19d0:	2000      	movs	r0, #0
}
    19d2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    19d4:	2000      	movs	r0, #0
    19d6:	e7fc      	b.n	19d2 <udc_next_desc_in_iface+0x3a>
    19d8:	2000      	movs	r0, #0
    19da:	e7fa      	b.n	19d2 <udc_next_desc_in_iface+0x3a>
    19dc:	2000      	movs	r0, #0
    19de:	e7f8      	b.n	19d2 <udc_next_desc_in_iface+0x3a>
    19e0:	20000220 	.word	0x20000220

000019e4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    19e4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    19e6:	4b03      	ldr	r3, [pc, #12]	; (19f4 <udc_valid_address+0x10>)
    19e8:	885b      	ldrh	r3, [r3, #2]
    19ea:	207f      	movs	r0, #127	; 0x7f
    19ec:	4018      	ands	r0, r3
    19ee:	4b02      	ldr	r3, [pc, #8]	; (19f8 <udc_valid_address+0x14>)
    19f0:	4798      	blx	r3
}
    19f2:	bd10      	pop	{r4, pc}
    19f4:	20000588 	.word	0x20000588
    19f8:	00003a59 	.word	0x00003a59

000019fc <udc_update_iface_desc>:
{
    19fc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    19fe:	4b19      	ldr	r3, [pc, #100]	; (1a64 <udc_update_iface_desc+0x68>)
    1a00:	781b      	ldrb	r3, [r3, #0]
		return false;
    1a02:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1a04:	2b00      	cmp	r3, #0
    1a06:	d029      	beq.n	1a5c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1a08:	4b17      	ldr	r3, [pc, #92]	; (1a68 <udc_update_iface_desc+0x6c>)
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	681b      	ldr	r3, [r3, #0]
    1a0e:	791c      	ldrb	r4, [r3, #4]
    1a10:	4284      	cmp	r4, r0
    1a12:	d923      	bls.n	1a5c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1a14:	4a15      	ldr	r2, [pc, #84]	; (1a6c <udc_update_iface_desc+0x70>)
    1a16:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1a18:	789a      	ldrb	r2, [r3, #2]
    1a1a:	78dc      	ldrb	r4, [r3, #3]
    1a1c:	0224      	lsls	r4, r4, #8
    1a1e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1a20:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1a22:	42a3      	cmp	r3, r4
    1a24:	d21c      	bcs.n	1a60 <udc_update_iface_desc+0x64>
    1a26:	2500      	movs	r5, #0
    1a28:	2601      	movs	r6, #1
    1a2a:	e007      	b.n	1a3c <udc_update_iface_desc+0x40>
    1a2c:	4a0f      	ldr	r2, [pc, #60]	; (1a6c <udc_update_iface_desc+0x70>)
    1a2e:	6013      	str	r3, [r2, #0]
    1a30:	e00f      	b.n	1a52 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1a32:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1a34:	189b      	adds	r3, r3, r2
    1a36:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1a38:	42a3      	cmp	r3, r4
    1a3a:	d20c      	bcs.n	1a56 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1a3c:	785a      	ldrb	r2, [r3, #1]
    1a3e:	2a04      	cmp	r2, #4
    1a40:	d1f7      	bne.n	1a32 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1a42:	789a      	ldrb	r2, [r3, #2]
    1a44:	4282      	cmp	r2, r0
    1a46:	d1f4      	bne.n	1a32 <udc_update_iface_desc+0x36>
    1a48:	78da      	ldrb	r2, [r3, #3]
    1a4a:	428a      	cmp	r2, r1
    1a4c:	d1f1      	bne.n	1a32 <udc_update_iface_desc+0x36>
    1a4e:	2d00      	cmp	r5, #0
    1a50:	d1ec      	bne.n	1a2c <udc_update_iface_desc+0x30>
				return true; // Interface found
    1a52:	2201      	movs	r2, #1
    1a54:	e002      	b.n	1a5c <udc_update_iface_desc+0x60>
    1a56:	4a05      	ldr	r2, [pc, #20]	; (1a6c <udc_update_iface_desc+0x70>)
    1a58:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1a5a:	2200      	movs	r2, #0
}
    1a5c:	0010      	movs	r0, r2
    1a5e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1a60:	2200      	movs	r2, #0
    1a62:	e7fb      	b.n	1a5c <udc_update_iface_desc+0x60>
    1a64:	2000021c 	.word	0x2000021c
    1a68:	20000220 	.word	0x20000220
    1a6c:	20000224 	.word	0x20000224

00001a70 <udc_iface_disable>:
{
    1a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a72:	46c6      	mov	lr, r8
    1a74:	b500      	push	{lr}
    1a76:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1a78:	2100      	movs	r1, #0
    1a7a:	4b13      	ldr	r3, [pc, #76]	; (1ac8 <udc_iface_disable+0x58>)
    1a7c:	4798      	blx	r3
    1a7e:	1e05      	subs	r5, r0, #0
    1a80:	d103      	bne.n	1a8a <udc_iface_disable+0x1a>
}
    1a82:	0028      	movs	r0, r5
    1a84:	bc04      	pop	{r2}
    1a86:	4690      	mov	r8, r2
    1a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a8a:	4b10      	ldr	r3, [pc, #64]	; (1acc <udc_iface_disable+0x5c>)
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	685b      	ldr	r3, [r3, #4]
    1a90:	00a2      	lsls	r2, r4, #2
    1a92:	58d3      	ldr	r3, [r2, r3]
    1a94:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a96:	68db      	ldr	r3, [r3, #12]
    1a98:	4798      	blx	r3
    1a9a:	0001      	movs	r1, r0
    1a9c:	0020      	movs	r0, r4
    1a9e:	4b0a      	ldr	r3, [pc, #40]	; (1ac8 <udc_iface_disable+0x58>)
    1aa0:	4798      	blx	r3
    1aa2:	1e05      	subs	r5, r0, #0
    1aa4:	d0ed      	beq.n	1a82 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1aa6:	4b0a      	ldr	r3, [pc, #40]	; (1ad0 <udc_iface_disable+0x60>)
    1aa8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1aaa:	4e0a      	ldr	r6, [pc, #40]	; (1ad4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1aac:	4f0a      	ldr	r7, [pc, #40]	; (1ad8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1aae:	2105      	movs	r1, #5
    1ab0:	0020      	movs	r0, r4
    1ab2:	47b0      	blx	r6
    1ab4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1ab6:	d002      	beq.n	1abe <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1ab8:	7880      	ldrb	r0, [r0, #2]
    1aba:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1abc:	e7f7      	b.n	1aae <udc_iface_disable+0x3e>
	udi_api->disable();
    1abe:	4643      	mov	r3, r8
    1ac0:	685b      	ldr	r3, [r3, #4]
    1ac2:	4798      	blx	r3
	return true;
    1ac4:	e7dd      	b.n	1a82 <udc_iface_disable+0x12>
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	000019fd 	.word	0x000019fd
    1acc:	20000220 	.word	0x20000220
    1ad0:	20000224 	.word	0x20000224
    1ad4:	00001999 	.word	0x00001999
    1ad8:	00003541 	.word	0x00003541

00001adc <udc_iface_enable>:
{
    1adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ade:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1ae0:	4b0f      	ldr	r3, [pc, #60]	; (1b20 <udc_iface_enable+0x44>)
    1ae2:	4798      	blx	r3
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d019      	beq.n	1b1c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1ae8:	4b0e      	ldr	r3, [pc, #56]	; (1b24 <udc_iface_enable+0x48>)
    1aea:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1aec:	4e0e      	ldr	r6, [pc, #56]	; (1b28 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1aee:	4f0f      	ldr	r7, [pc, #60]	; (1b2c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1af0:	2105      	movs	r1, #5
    1af2:	0020      	movs	r0, r4
    1af4:	47b0      	blx	r6
    1af6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1af8:	d009      	beq.n	1b0e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1afa:	7903      	ldrb	r3, [r0, #4]
    1afc:	7942      	ldrb	r2, [r0, #5]
    1afe:	0212      	lsls	r2, r2, #8
    1b00:	431a      	orrs	r2, r3
    1b02:	78c1      	ldrb	r1, [r0, #3]
    1b04:	7880      	ldrb	r0, [r0, #2]
    1b06:	47b8      	blx	r7
    1b08:	2800      	cmp	r0, #0
    1b0a:	d1f1      	bne.n	1af0 <udc_iface_enable+0x14>
    1b0c:	e006      	b.n	1b1c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1b0e:	4b08      	ldr	r3, [pc, #32]	; (1b30 <udc_iface_enable+0x54>)
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	685b      	ldr	r3, [r3, #4]
    1b14:	00ad      	lsls	r5, r5, #2
    1b16:	58eb      	ldr	r3, [r5, r3]
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	4798      	blx	r3
}
    1b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	000019fd 	.word	0x000019fd
    1b24:	20000224 	.word	0x20000224
    1b28:	00001999 	.word	0x00001999
    1b2c:	00003599 	.word	0x00003599
    1b30:	20000220 	.word	0x20000220

00001b34 <udc_start>:
{
    1b34:	b510      	push	{r4, lr}
	udd_enable();
    1b36:	4b01      	ldr	r3, [pc, #4]	; (1b3c <udc_start+0x8>)
    1b38:	4798      	blx	r3
}
    1b3a:	bd10      	pop	{r4, pc}
    1b3c:	00003b65 	.word	0x00003b65

00001b40 <udc_reset>:
{
    1b40:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1b42:	4b0e      	ldr	r3, [pc, #56]	; (1b7c <udc_reset+0x3c>)
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d011      	beq.n	1b6e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b4a:	4b0d      	ldr	r3, [pc, #52]	; (1b80 <udc_reset+0x40>)
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1b50:	791b      	ldrb	r3, [r3, #4]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d00b      	beq.n	1b6e <udc_reset+0x2e>
    1b56:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1b58:	4e0a      	ldr	r6, [pc, #40]	; (1b84 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b5a:	4d09      	ldr	r5, [pc, #36]	; (1b80 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1b5c:	0020      	movs	r0, r4
    1b5e:	47b0      	blx	r6
				iface_num++) {
    1b60:	3401      	adds	r4, #1
    1b62:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b64:	682b      	ldr	r3, [r5, #0]
    1b66:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1b68:	791b      	ldrb	r3, [r3, #4]
    1b6a:	42a3      	cmp	r3, r4
    1b6c:	d8f6      	bhi.n	1b5c <udc_reset+0x1c>
	udc_num_configuration = 0;
    1b6e:	2200      	movs	r2, #0
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <udc_reset+0x3c>)
    1b72:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1b74:	3201      	adds	r2, #1
    1b76:	4b04      	ldr	r3, [pc, #16]	; (1b88 <udc_reset+0x48>)
    1b78:	801a      	strh	r2, [r3, #0]
}
    1b7a:	bd70      	pop	{r4, r5, r6, pc}
    1b7c:	2000021c 	.word	0x2000021c
    1b80:	20000220 	.word	0x20000220
    1b84:	00001a71 	.word	0x00001a71
    1b88:	20000212 	.word	0x20000212

00001b8c <udc_sof_notify>:
{
    1b8c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1b8e:	4b0e      	ldr	r3, [pc, #56]	; (1bc8 <udc_sof_notify+0x3c>)
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	2b00      	cmp	r3, #0
    1b94:	d017      	beq.n	1bc6 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b96:	4b0d      	ldr	r3, [pc, #52]	; (1bcc <udc_sof_notify+0x40>)
    1b98:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1b9a:	681a      	ldr	r2, [r3, #0]
    1b9c:	7912      	ldrb	r2, [r2, #4]
    1b9e:	2a00      	cmp	r2, #0
    1ba0:	d011      	beq.n	1bc6 <udc_sof_notify+0x3a>
    1ba2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ba4:	4d09      	ldr	r5, [pc, #36]	; (1bcc <udc_sof_notify+0x40>)
    1ba6:	e006      	b.n	1bb6 <udc_sof_notify+0x2a>
				iface_num++) {
    1ba8:	3401      	adds	r4, #1
    1baa:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bac:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1bae:	681a      	ldr	r2, [r3, #0]
    1bb0:	7912      	ldrb	r2, [r2, #4]
    1bb2:	42a2      	cmp	r2, r4
    1bb4:	d907      	bls.n	1bc6 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1bb6:	685b      	ldr	r3, [r3, #4]
    1bb8:	00a2      	lsls	r2, r4, #2
    1bba:	58d3      	ldr	r3, [r2, r3]
    1bbc:	691b      	ldr	r3, [r3, #16]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d0f2      	beq.n	1ba8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1bc2:	4798      	blx	r3
    1bc4:	e7f0      	b.n	1ba8 <udc_sof_notify+0x1c>
}
    1bc6:	bd70      	pop	{r4, r5, r6, pc}
    1bc8:	2000021c 	.word	0x2000021c
    1bcc:	20000220 	.word	0x20000220

00001bd0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1bd2:	4bac      	ldr	r3, [pc, #688]	; (1e84 <udc_process_setup+0x2b4>)
    1bd4:	2200      	movs	r2, #0
    1bd6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1bd8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1bda:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	b25a      	sxtb	r2, r3
    1be0:	2a00      	cmp	r2, #0
    1be2:	db13      	blt.n	1c0c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1be4:	2260      	movs	r2, #96	; 0x60
    1be6:	421a      	tst	r2, r3
    1be8:	d100      	bne.n	1bec <udc_process_setup+0x1c>
    1bea:	e0da      	b.n	1da2 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1bec:	4ba5      	ldr	r3, [pc, #660]	; (1e84 <udc_process_setup+0x2b4>)
    1bee:	781a      	ldrb	r2, [r3, #0]
    1bf0:	231f      	movs	r3, #31
    1bf2:	4013      	ands	r3, r2
    1bf4:	2b01      	cmp	r3, #1
    1bf6:	d100      	bne.n	1bfa <udc_process_setup+0x2a>
    1bf8:	e176      	b.n	1ee8 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1bfa:	4ba2      	ldr	r3, [pc, #648]	; (1e84 <udc_process_setup+0x2b4>)
    1bfc:	781a      	ldrb	r2, [r3, #0]
    1bfe:	231f      	movs	r3, #31
    1c00:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c02:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1c04:	2b02      	cmp	r3, #2
    1c06:	d100      	bne.n	1c0a <udc_process_setup+0x3a>
    1c08:	e1cc      	b.n	1fa4 <udc_process_setup+0x3d4>
#endif
}
    1c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1c0c:	4a9d      	ldr	r2, [pc, #628]	; (1e84 <udc_process_setup+0x2b4>)
    1c0e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1c10:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1c12:	2a00      	cmp	r2, #0
    1c14:	d0f9      	beq.n	1c0a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c16:	2160      	movs	r1, #96	; 0x60
    1c18:	4219      	tst	r1, r3
    1c1a:	d1e7      	bne.n	1bec <udc_process_setup+0x1c>
    1c1c:	211f      	movs	r1, #31
    1c1e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1c20:	d108      	bne.n	1c34 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1c22:	4998      	ldr	r1, [pc, #608]	; (1e84 <udc_process_setup+0x2b4>)
    1c24:	7849      	ldrb	r1, [r1, #1]
    1c26:	2906      	cmp	r1, #6
    1c28:	d023      	beq.n	1c72 <udc_process_setup+0xa2>
    1c2a:	2908      	cmp	r1, #8
    1c2c:	d100      	bne.n	1c30 <udc_process_setup+0x60>
    1c2e:	e087      	b.n	1d40 <udc_process_setup+0x170>
    1c30:	2900      	cmp	r1, #0
    1c32:	d017      	beq.n	1c64 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1c34:	2b01      	cmp	r3, #1
    1c36:	d100      	bne.n	1c3a <udc_process_setup+0x6a>
    1c38:	e08a      	b.n	1d50 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1c3a:	2b02      	cmp	r3, #2
    1c3c:	d1d6      	bne.n	1bec <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1c3e:	4b91      	ldr	r3, [pc, #580]	; (1e84 <udc_process_setup+0x2b4>)
    1c40:	785b      	ldrb	r3, [r3, #1]
	return false;
    1c42:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1c44:	2b00      	cmp	r3, #0
    1c46:	d000      	beq.n	1c4a <udc_process_setup+0x7a>
    1c48:	e1a8      	b.n	1f9c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1c4a:	2a02      	cmp	r2, #2
    1c4c:	d1d5      	bne.n	1bfa <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1c4e:	4b8d      	ldr	r3, [pc, #564]	; (1e84 <udc_process_setup+0x2b4>)
    1c50:	7918      	ldrb	r0, [r3, #4]
    1c52:	4b8d      	ldr	r3, [pc, #564]	; (1e88 <udc_process_setup+0x2b8>)
    1c54:	4798      	blx	r3
    1c56:	4b8d      	ldr	r3, [pc, #564]	; (1e8c <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1c58:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1c5a:	2102      	movs	r1, #2
    1c5c:	0018      	movs	r0, r3
    1c5e:	4b8c      	ldr	r3, [pc, #560]	; (1e90 <udc_process_setup+0x2c0>)
    1c60:	4798      	blx	r3
    1c62:	e0ff      	b.n	1e64 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1c64:	2a02      	cmp	r2, #2
    1c66:	d1c8      	bne.n	1bfa <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1c68:	3102      	adds	r1, #2
    1c6a:	488a      	ldr	r0, [pc, #552]	; (1e94 <udc_process_setup+0x2c4>)
    1c6c:	4b88      	ldr	r3, [pc, #544]	; (1e90 <udc_process_setup+0x2c0>)
    1c6e:	4798      	blx	r3
    1c70:	e0f8      	b.n	1e64 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1c72:	4b84      	ldr	r3, [pc, #528]	; (1e84 <udc_process_setup+0x2b4>)
    1c74:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1c76:	0a13      	lsrs	r3, r2, #8
    1c78:	2b02      	cmp	r3, #2
    1c7a:	d023      	beq.n	1cc4 <udc_process_setup+0xf4>
    1c7c:	b2d9      	uxtb	r1, r3
    1c7e:	2902      	cmp	r1, #2
    1c80:	d90f      	bls.n	1ca2 <udc_process_setup+0xd2>
    1c82:	2b03      	cmp	r3, #3
    1c84:	d034      	beq.n	1cf0 <udc_process_setup+0x120>
    1c86:	2b0f      	cmp	r3, #15
    1c88:	d000      	beq.n	1c8c <udc_process_setup+0xbc>
    1c8a:	e184      	b.n	1f96 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    1c8c:	4b82      	ldr	r3, [pc, #520]	; (1e98 <udc_process_setup+0x2c8>)
    1c8e:	6898      	ldr	r0, [r3, #8]
    1c90:	2800      	cmp	r0, #0
    1c92:	d0b2      	beq.n	1bfa <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1c94:	7883      	ldrb	r3, [r0, #2]
    1c96:	78c1      	ldrb	r1, [r0, #3]
    1c98:	0209      	lsls	r1, r1, #8
    1c9a:	4319      	orrs	r1, r3
    1c9c:	4b7c      	ldr	r3, [pc, #496]	; (1e90 <udc_process_setup+0x2c0>)
    1c9e:	4798      	blx	r3
    1ca0:	e007      	b.n	1cb2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1ca2:	2b01      	cmp	r3, #1
    1ca4:	d000      	beq.n	1ca8 <udc_process_setup+0xd8>
    1ca6:	e176      	b.n	1f96 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    1ca8:	4b7b      	ldr	r3, [pc, #492]	; (1e98 <udc_process_setup+0x2c8>)
    1caa:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1cac:	7801      	ldrb	r1, [r0, #0]
    1cae:	4b78      	ldr	r3, [pc, #480]	; (1e90 <udc_process_setup+0x2c0>)
    1cb0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1cb2:	4b74      	ldr	r3, [pc, #464]	; (1e84 <udc_process_setup+0x2b4>)
    1cb4:	88da      	ldrh	r2, [r3, #6]
    1cb6:	899b      	ldrh	r3, [r3, #12]
    1cb8:	4293      	cmp	r3, r2
    1cba:	d800      	bhi.n	1cbe <udc_process_setup+0xee>
    1cbc:	e0d2      	b.n	1e64 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1cbe:	4b71      	ldr	r3, [pc, #452]	; (1e84 <udc_process_setup+0x2b4>)
    1cc0:	819a      	strh	r2, [r3, #12]
    1cc2:	e0cf      	b.n	1e64 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1cc4:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1cc6:	4b74      	ldr	r3, [pc, #464]	; (1e98 <udc_process_setup+0x2c8>)
    1cc8:	681b      	ldr	r3, [r3, #0]
    1cca:	7c5b      	ldrb	r3, [r3, #17]
    1ccc:	4293      	cmp	r3, r2
    1cce:	d800      	bhi.n	1cd2 <udc_process_setup+0x102>
    1cd0:	e793      	b.n	1bfa <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1cd2:	4b71      	ldr	r3, [pc, #452]	; (1e98 <udc_process_setup+0x2c8>)
    1cd4:	685b      	ldr	r3, [r3, #4]
    1cd6:	00d2      	lsls	r2, r2, #3
    1cd8:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1cda:	7883      	ldrb	r3, [r0, #2]
    1cdc:	78c1      	ldrb	r1, [r0, #3]
    1cde:	0209      	lsls	r1, r1, #8
    1ce0:	4319      	orrs	r1, r3
    1ce2:	4b6b      	ldr	r3, [pc, #428]	; (1e90 <udc_process_setup+0x2c0>)
    1ce4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1ce6:	4b67      	ldr	r3, [pc, #412]	; (1e84 <udc_process_setup+0x2b4>)
    1ce8:	689b      	ldr	r3, [r3, #8]
    1cea:	2202      	movs	r2, #2
    1cec:	705a      	strb	r2, [r3, #1]
    1cee:	e7e0      	b.n	1cb2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1cf0:	23ff      	movs	r3, #255	; 0xff
    1cf2:	401a      	ands	r2, r3
    1cf4:	2a01      	cmp	r2, #1
    1cf6:	d020      	beq.n	1d3a <udc_process_setup+0x16a>
    1cf8:	2a00      	cmp	r2, #0
    1cfa:	d019      	beq.n	1d30 <udc_process_setup+0x160>
    1cfc:	2a02      	cmp	r2, #2
    1cfe:	d100      	bne.n	1d02 <udc_process_setup+0x132>
    1d00:	e178      	b.n	1ff4 <udc_process_setup+0x424>
    1d02:	2a03      	cmp	r2, #3
    1d04:	d000      	beq.n	1d08 <udc_process_setup+0x138>
    1d06:	e771      	b.n	1bec <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1d08:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1d0a:	4c64      	ldr	r4, [pc, #400]	; (1e9c <udc_process_setup+0x2cc>)
    1d0c:	4a64      	ldr	r2, [pc, #400]	; (1ea0 <udc_process_setup+0x2d0>)
    1d0e:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1d10:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1d12:	5ce0      	ldrb	r0, [r4, r3]
    1d14:	8010      	strh	r0, [r2, #0]
    1d16:	3301      	adds	r3, #1
    1d18:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1d1a:	b2d8      	uxtb	r0, r3
    1d1c:	4281      	cmp	r1, r0
    1d1e:	d8f8      	bhi.n	1d12 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1d20:	0049      	lsls	r1, r1, #1
    1d22:	3102      	adds	r1, #2
    1d24:	485e      	ldr	r0, [pc, #376]	; (1ea0 <udc_process_setup+0x2d0>)
    1d26:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1d28:	b289      	uxth	r1, r1
    1d2a:	4b59      	ldr	r3, [pc, #356]	; (1e90 <udc_process_setup+0x2c0>)
    1d2c:	4798      	blx	r3
    1d2e:	e7c0      	b.n	1cb2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1d30:	2104      	movs	r1, #4
    1d32:	485c      	ldr	r0, [pc, #368]	; (1ea4 <udc_process_setup+0x2d4>)
    1d34:	4b56      	ldr	r3, [pc, #344]	; (1e90 <udc_process_setup+0x2c0>)
    1d36:	4798      	blx	r3
    1d38:	e7bb      	b.n	1cb2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1d3a:	4c5b      	ldr	r4, [pc, #364]	; (1ea8 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1d3c:	2109      	movs	r1, #9
    1d3e:	e7e5      	b.n	1d0c <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1d40:	2a01      	cmp	r2, #1
    1d42:	d000      	beq.n	1d46 <udc_process_setup+0x176>
    1d44:	e759      	b.n	1bfa <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1d46:	2101      	movs	r1, #1
    1d48:	4858      	ldr	r0, [pc, #352]	; (1eac <udc_process_setup+0x2dc>)
    1d4a:	4b51      	ldr	r3, [pc, #324]	; (1e90 <udc_process_setup+0x2c0>)
    1d4c:	4798      	blx	r3
    1d4e:	e089      	b.n	1e64 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1d50:	494c      	ldr	r1, [pc, #304]	; (1e84 <udc_process_setup+0x2b4>)
    1d52:	7849      	ldrb	r1, [r1, #1]
    1d54:	290a      	cmp	r1, #10
    1d56:	d000      	beq.n	1d5a <udc_process_setup+0x18a>
    1d58:	e76f      	b.n	1c3a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1d5a:	2a01      	cmp	r2, #1
    1d5c:	d000      	beq.n	1d60 <udc_process_setup+0x190>
    1d5e:	e0c3      	b.n	1ee8 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1d60:	4b52      	ldr	r3, [pc, #328]	; (1eac <udc_process_setup+0x2dc>)
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	2b00      	cmp	r3, #0
    1d66:	d100      	bne.n	1d6a <udc_process_setup+0x19a>
    1d68:	e0be      	b.n	1ee8 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d6a:	4b46      	ldr	r3, [pc, #280]	; (1e84 <udc_process_setup+0x2b4>)
    1d6c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d6e:	4b50      	ldr	r3, [pc, #320]	; (1eb0 <udc_process_setup+0x2e0>)
    1d70:	681d      	ldr	r5, [r3, #0]
    1d72:	682b      	ldr	r3, [r5, #0]
    1d74:	791b      	ldrb	r3, [r3, #4]
    1d76:	42a3      	cmp	r3, r4
    1d78:	d800      	bhi.n	1d7c <udc_process_setup+0x1ac>
    1d7a:	e0b5      	b.n	1ee8 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d7c:	2100      	movs	r1, #0
    1d7e:	0020      	movs	r0, r4
    1d80:	4b4c      	ldr	r3, [pc, #304]	; (1eb4 <udc_process_setup+0x2e4>)
    1d82:	4798      	blx	r3
    1d84:	2800      	cmp	r0, #0
    1d86:	d100      	bne.n	1d8a <udc_process_setup+0x1ba>
    1d88:	e730      	b.n	1bec <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d8a:	686b      	ldr	r3, [r5, #4]
    1d8c:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1d8e:	58e3      	ldr	r3, [r4, r3]
    1d90:	68db      	ldr	r3, [r3, #12]
    1d92:	4798      	blx	r3
    1d94:	4b48      	ldr	r3, [pc, #288]	; (1eb8 <udc_process_setup+0x2e8>)
    1d96:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1d98:	2101      	movs	r1, #1
    1d9a:	0018      	movs	r0, r3
    1d9c:	4b3c      	ldr	r3, [pc, #240]	; (1e90 <udc_process_setup+0x2c0>)
    1d9e:	4798      	blx	r3
    1da0:	e060      	b.n	1e64 <udc_process_setup+0x294>
    1da2:	221f      	movs	r2, #31
    1da4:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1da6:	d15f      	bne.n	1e68 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1da8:	4a36      	ldr	r2, [pc, #216]	; (1e84 <udc_process_setup+0x2b4>)
    1daa:	7852      	ldrb	r2, [r2, #1]
    1dac:	2a03      	cmp	r2, #3
    1dae:	d100      	bne.n	1db2 <udc_process_setup+0x1e2>
    1db0:	e0f3      	b.n	1f9a <udc_process_setup+0x3ca>
    1db2:	b2d1      	uxtb	r1, r2
    1db4:	2903      	cmp	r1, #3
    1db6:	d93b      	bls.n	1e30 <udc_process_setup+0x260>
    1db8:	2a05      	cmp	r2, #5
    1dba:	d04b      	beq.n	1e54 <udc_process_setup+0x284>
    1dbc:	2a09      	cmp	r2, #9
    1dbe:	d153      	bne.n	1e68 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1dc0:	4b30      	ldr	r3, [pc, #192]	; (1e84 <udc_process_setup+0x2b4>)
    1dc2:	88db      	ldrh	r3, [r3, #6]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d000      	beq.n	1dca <udc_process_setup+0x1fa>
    1dc8:	e717      	b.n	1bfa <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1dca:	4b3c      	ldr	r3, [pc, #240]	; (1ebc <udc_process_setup+0x2ec>)
    1dcc:	4798      	blx	r3
    1dce:	2800      	cmp	r0, #0
    1dd0:	d100      	bne.n	1dd4 <udc_process_setup+0x204>
    1dd2:	e70b      	b.n	1bec <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dd4:	4b2b      	ldr	r3, [pc, #172]	; (1e84 <udc_process_setup+0x2b4>)
    1dd6:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1dd8:	4b2f      	ldr	r3, [pc, #188]	; (1e98 <udc_process_setup+0x2c8>)
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1dde:	429a      	cmp	r2, r3
    1de0:	dd00      	ble.n	1de4 <udc_process_setup+0x214>
    1de2:	e703      	b.n	1bec <udc_process_setup+0x1c>
	udc_reset();
    1de4:	4b36      	ldr	r3, [pc, #216]	; (1ec0 <udc_process_setup+0x2f0>)
    1de6:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1de8:	4b26      	ldr	r3, [pc, #152]	; (1e84 <udc_process_setup+0x2b4>)
    1dea:	789b      	ldrb	r3, [r3, #2]
    1dec:	4a2f      	ldr	r2, [pc, #188]	; (1eac <udc_process_setup+0x2dc>)
    1dee:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1df0:	2b00      	cmp	r3, #0
    1df2:	d037      	beq.n	1e64 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1df4:	4a33      	ldr	r2, [pc, #204]	; (1ec4 <udc_process_setup+0x2f4>)
    1df6:	4694      	mov	ip, r2
    1df8:	4463      	add	r3, ip
    1dfa:	00db      	lsls	r3, r3, #3
    1dfc:	4a26      	ldr	r2, [pc, #152]	; (1e98 <udc_process_setup+0x2c8>)
    1dfe:	6852      	ldr	r2, [r2, #4]
    1e00:	18d3      	adds	r3, r2, r3
    1e02:	4a2b      	ldr	r2, [pc, #172]	; (1eb0 <udc_process_setup+0x2e0>)
    1e04:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e06:	681b      	ldr	r3, [r3, #0]
    1e08:	791b      	ldrb	r3, [r3, #4]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d02a      	beq.n	1e64 <udc_process_setup+0x294>
    1e0e:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1e10:	4d2d      	ldr	r5, [pc, #180]	; (1ec8 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e12:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1e14:	2100      	movs	r1, #0
    1e16:	0020      	movs	r0, r4
    1e18:	47a8      	blx	r5
    1e1a:	2800      	cmp	r0, #0
    1e1c:	d100      	bne.n	1e20 <udc_process_setup+0x250>
    1e1e:	e6e5      	b.n	1bec <udc_process_setup+0x1c>
			iface_num++) {
    1e20:	3401      	adds	r4, #1
    1e22:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e24:	6833      	ldr	r3, [r6, #0]
    1e26:	681b      	ldr	r3, [r3, #0]
    1e28:	791b      	ldrb	r3, [r3, #4]
    1e2a:	42a3      	cmp	r3, r4
    1e2c:	d8f2      	bhi.n	1e14 <udc_process_setup+0x244>
    1e2e:	e019      	b.n	1e64 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e30:	2a01      	cmp	r2, #1
    1e32:	d119      	bne.n	1e68 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1e34:	4b13      	ldr	r3, [pc, #76]	; (1e84 <udc_process_setup+0x2b4>)
    1e36:	88db      	ldrh	r3, [r3, #6]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d000      	beq.n	1e3e <udc_process_setup+0x26e>
    1e3c:	e6dd      	b.n	1bfa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1e3e:	4b11      	ldr	r3, [pc, #68]	; (1e84 <udc_process_setup+0x2b4>)
    1e40:	885b      	ldrh	r3, [r3, #2]
    1e42:	2b01      	cmp	r3, #1
    1e44:	d000      	beq.n	1e48 <udc_process_setup+0x278>
    1e46:	e6d8      	b.n	1bfa <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1e48:	4a12      	ldr	r2, [pc, #72]	; (1e94 <udc_process_setup+0x2c4>)
    1e4a:	8813      	ldrh	r3, [r2, #0]
    1e4c:	2102      	movs	r1, #2
    1e4e:	438b      	bics	r3, r1
    1e50:	8013      	strh	r3, [r2, #0]
    1e52:	e007      	b.n	1e64 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1e54:	4b0b      	ldr	r3, [pc, #44]	; (1e84 <udc_process_setup+0x2b4>)
    1e56:	88db      	ldrh	r3, [r3, #6]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d000      	beq.n	1e5e <udc_process_setup+0x28e>
    1e5c:	e6cd      	b.n	1bfa <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1e5e:	4a1b      	ldr	r2, [pc, #108]	; (1ecc <udc_process_setup+0x2fc>)
    1e60:	4b08      	ldr	r3, [pc, #32]	; (1e84 <udc_process_setup+0x2b4>)
    1e62:	611a      	str	r2, [r3, #16]
			return true;
    1e64:	2001      	movs	r0, #1
    1e66:	e6d0      	b.n	1c0a <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1e68:	2b01      	cmp	r3, #1
    1e6a:	d031      	beq.n	1ed0 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1e6c:	2b02      	cmp	r3, #2
    1e6e:	d000      	beq.n	1e72 <udc_process_setup+0x2a2>
    1e70:	e6bc      	b.n	1bec <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e72:	4b04      	ldr	r3, [pc, #16]	; (1e84 <udc_process_setup+0x2b4>)
    1e74:	785b      	ldrb	r3, [r3, #1]
    1e76:	2b01      	cmp	r3, #1
    1e78:	d06c      	beq.n	1f54 <udc_process_setup+0x384>
    1e7a:	2b03      	cmp	r3, #3
    1e7c:	d100      	bne.n	1e80 <udc_process_setup+0x2b0>
    1e7e:	e078      	b.n	1f72 <udc_process_setup+0x3a2>
	return false;
    1e80:	2000      	movs	r0, #0
    1e82:	e08b      	b.n	1f9c <udc_process_setup+0x3cc>
    1e84:	20000588 	.word	0x20000588
    1e88:	000036a1 	.word	0x000036a1
    1e8c:	20000214 	.word	0x20000214
    1e90:	00003a79 	.word	0x00003a79
    1e94:	20000212 	.word	0x20000212
    1e98:	200000d8 	.word	0x200000d8
    1e9c:	0000a9a4 	.word	0x0000a9a4
    1ea0:	2000007c 	.word	0x2000007c
    1ea4:	20000098 	.word	0x20000098
    1ea8:	2000009c 	.word	0x2000009c
    1eac:	2000021c 	.word	0x2000021c
    1eb0:	20000220 	.word	0x20000220
    1eb4:	000019fd 	.word	0x000019fd
    1eb8:	20000218 	.word	0x20000218
    1ebc:	00003a69 	.word	0x00003a69
    1ec0:	00001b41 	.word	0x00001b41
    1ec4:	1fffffff 	.word	0x1fffffff
    1ec8:	00001add 	.word	0x00001add
    1ecc:	000019e5 	.word	0x000019e5
			switch (udd_g_ctrlreq.req.bRequest) {
    1ed0:	4a4a      	ldr	r2, [pc, #296]	; (1ffc <udc_process_setup+0x42c>)
    1ed2:	7852      	ldrb	r2, [r2, #1]
    1ed4:	2a0b      	cmp	r2, #11
    1ed6:	d1c9      	bne.n	1e6c <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1ed8:	4b48      	ldr	r3, [pc, #288]	; (1ffc <udc_process_setup+0x42c>)
    1eda:	88db      	ldrh	r3, [r3, #6]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d103      	bne.n	1ee8 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1ee0:	4b47      	ldr	r3, [pc, #284]	; (2000 <STACK_SIZE>)
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d127      	bne.n	1f38 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1ee8:	4b45      	ldr	r3, [pc, #276]	; (2000 <STACK_SIZE>)
    1eea:	781b      	ldrb	r3, [r3, #0]
	return false;
    1eec:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d100      	bne.n	1ef4 <udc_process_setup+0x324>
    1ef2:	e68a      	b.n	1c0a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ef4:	4b41      	ldr	r3, [pc, #260]	; (1ffc <udc_process_setup+0x42c>)
    1ef6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ef8:	4b42      	ldr	r3, [pc, #264]	; (2004 <STACK_SIZE+0x4>)
    1efa:	681d      	ldr	r5, [r3, #0]
    1efc:	682b      	ldr	r3, [r5, #0]
    1efe:	791b      	ldrb	r3, [r3, #4]
    1f00:	42a3      	cmp	r3, r4
    1f02:	d800      	bhi.n	1f06 <udc_process_setup+0x336>
    1f04:	e681      	b.n	1c0a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f06:	2100      	movs	r1, #0
    1f08:	0020      	movs	r0, r4
    1f0a:	4b3f      	ldr	r3, [pc, #252]	; (2008 <STACK_SIZE+0x8>)
    1f0c:	4798      	blx	r3
    1f0e:	2800      	cmp	r0, #0
    1f10:	d100      	bne.n	1f14 <udc_process_setup+0x344>
    1f12:	e672      	b.n	1bfa <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f14:	686b      	ldr	r3, [r5, #4]
    1f16:	00a2      	lsls	r2, r4, #2
    1f18:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1f1a:	68eb      	ldr	r3, [r5, #12]
    1f1c:	4798      	blx	r3
    1f1e:	0001      	movs	r1, r0
    1f20:	0020      	movs	r0, r4
    1f22:	4b39      	ldr	r3, [pc, #228]	; (2008 <STACK_SIZE+0x8>)
    1f24:	4798      	blx	r3
    1f26:	2800      	cmp	r0, #0
    1f28:	d100      	bne.n	1f2c <udc_process_setup+0x35c>
    1f2a:	e666      	b.n	1bfa <udc_process_setup+0x2a>
	return udi_api->setup();
    1f2c:	68ab      	ldr	r3, [r5, #8]
    1f2e:	4798      	blx	r3
		if (udc_req_iface()) {
    1f30:	2800      	cmp	r0, #0
    1f32:	d000      	beq.n	1f36 <udc_process_setup+0x366>
    1f34:	e669      	b.n	1c0a <udc_process_setup+0x3a>
    1f36:	e660      	b.n	1bfa <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1f38:	4b30      	ldr	r3, [pc, #192]	; (1ffc <udc_process_setup+0x42c>)
    1f3a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1f3c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1f3e:	0028      	movs	r0, r5
    1f40:	4b32      	ldr	r3, [pc, #200]	; (200c <STACK_SIZE+0xc>)
    1f42:	4798      	blx	r3
    1f44:	2800      	cmp	r0, #0
    1f46:	d100      	bne.n	1f4a <udc_process_setup+0x37a>
    1f48:	e650      	b.n	1bec <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1f4a:	b2e1      	uxtb	r1, r4
    1f4c:	0028      	movs	r0, r5
    1f4e:	4b30      	ldr	r3, [pc, #192]	; (2010 <STACK_SIZE+0x10>)
    1f50:	4798      	blx	r3
    1f52:	e023      	b.n	1f9c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1f54:	4b29      	ldr	r3, [pc, #164]	; (1ffc <udc_process_setup+0x42c>)
    1f56:	88db      	ldrh	r3, [r3, #6]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d000      	beq.n	1f5e <udc_process_setup+0x38e>
    1f5c:	e64d      	b.n	1bfa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1f5e:	4b27      	ldr	r3, [pc, #156]	; (1ffc <udc_process_setup+0x42c>)
    1f60:	885b      	ldrh	r3, [r3, #2]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d000      	beq.n	1f68 <udc_process_setup+0x398>
    1f66:	e648      	b.n	1bfa <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1f68:	4b24      	ldr	r3, [pc, #144]	; (1ffc <udc_process_setup+0x42c>)
    1f6a:	7918      	ldrb	r0, [r3, #4]
    1f6c:	4b29      	ldr	r3, [pc, #164]	; (2014 <STACK_SIZE+0x14>)
    1f6e:	4798      	blx	r3
    1f70:	e014      	b.n	1f9c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1f72:	4b22      	ldr	r3, [pc, #136]	; (1ffc <udc_process_setup+0x42c>)
    1f74:	88db      	ldrh	r3, [r3, #6]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d000      	beq.n	1f7c <udc_process_setup+0x3ac>
    1f7a:	e63e      	b.n	1bfa <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1f7c:	4b1f      	ldr	r3, [pc, #124]	; (1ffc <udc_process_setup+0x42c>)
    1f7e:	885b      	ldrh	r3, [r3, #2]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d000      	beq.n	1f86 <udc_process_setup+0x3b6>
    1f84:	e639      	b.n	1bfa <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1f86:	4c1d      	ldr	r4, [pc, #116]	; (1ffc <udc_process_setup+0x42c>)
    1f88:	7920      	ldrb	r0, [r4, #4]
    1f8a:	4b23      	ldr	r3, [pc, #140]	; (2018 <STACK_SIZE+0x18>)
    1f8c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1f8e:	7920      	ldrb	r0, [r4, #4]
    1f90:	4b22      	ldr	r3, [pc, #136]	; (201c <STACK_SIZE+0x1c>)
    1f92:	4798      	blx	r3
    1f94:	e002      	b.n	1f9c <udc_process_setup+0x3cc>
		return false;
    1f96:	2000      	movs	r0, #0
    1f98:	e000      	b.n	1f9c <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    1f9a:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1f9c:	2800      	cmp	r0, #0
    1f9e:	d000      	beq.n	1fa2 <udc_process_setup+0x3d2>
    1fa0:	e633      	b.n	1c0a <udc_process_setup+0x3a>
    1fa2:	e623      	b.n	1bec <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1fa4:	4b16      	ldr	r3, [pc, #88]	; (2000 <STACK_SIZE>)
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d100      	bne.n	1fae <udc_process_setup+0x3de>
    1fac:	e62d      	b.n	1c0a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fae:	4b15      	ldr	r3, [pc, #84]	; (2004 <STACK_SIZE+0x4>)
    1fb0:	681b      	ldr	r3, [r3, #0]
    1fb2:	681a      	ldr	r2, [r3, #0]
    1fb4:	7912      	ldrb	r2, [r2, #4]
    1fb6:	2a00      	cmp	r2, #0
    1fb8:	d01a      	beq.n	1ff0 <udc_process_setup+0x420>
    1fba:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1fbc:	4e12      	ldr	r6, [pc, #72]	; (2008 <STACK_SIZE+0x8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fbe:	4f11      	ldr	r7, [pc, #68]	; (2004 <STACK_SIZE+0x4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1fc0:	685b      	ldr	r3, [r3, #4]
    1fc2:	00aa      	lsls	r2, r5, #2
    1fc4:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1fc6:	68e3      	ldr	r3, [r4, #12]
    1fc8:	4798      	blx	r3
    1fca:	0001      	movs	r1, r0
    1fcc:	0028      	movs	r0, r5
    1fce:	47b0      	blx	r6
    1fd0:	2800      	cmp	r0, #0
    1fd2:	d100      	bne.n	1fd6 <udc_process_setup+0x406>
    1fd4:	e619      	b.n	1c0a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1fd6:	68a3      	ldr	r3, [r4, #8]
    1fd8:	4798      	blx	r3
    1fda:	2800      	cmp	r0, #0
    1fdc:	d000      	beq.n	1fe0 <udc_process_setup+0x410>
    1fde:	e614      	b.n	1c0a <udc_process_setup+0x3a>
			iface_num++) {
    1fe0:	3501      	adds	r5, #1
    1fe2:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fe4:	683b      	ldr	r3, [r7, #0]
    1fe6:	681a      	ldr	r2, [r3, #0]
    1fe8:	7912      	ldrb	r2, [r2, #4]
    1fea:	42aa      	cmp	r2, r5
    1fec:	d8e8      	bhi.n	1fc0 <udc_process_setup+0x3f0>
    1fee:	e60c      	b.n	1c0a <udc_process_setup+0x3a>
	return false;
    1ff0:	2000      	movs	r0, #0
    1ff2:	e60a      	b.n	1c0a <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1ff4:	2103      	movs	r1, #3
		str = udc_string_product_name;
    1ff6:	4c0a      	ldr	r4, [pc, #40]	; (2020 <STACK_SIZE+0x20>)
    1ff8:	e688      	b.n	1d0c <udc_process_setup+0x13c>
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	20000588 	.word	0x20000588
    2000:	2000021c 	.word	0x2000021c
    2004:	20000220 	.word	0x20000220
    2008:	000019fd 	.word	0x000019fd
    200c:	00001a71 	.word	0x00001a71
    2010:	00001add 	.word	0x00001add
    2014:	000037e5 	.word	0x000037e5
    2018:	000034f5 	.word	0x000034f5
    201c:	000036b5 	.word	0x000036b5
    2020:	200000a8 	.word	0x200000a8

00002024 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2024:	4a04      	ldr	r2, [pc, #16]	; (2038 <_extint_enable+0x14>)
    2026:	7813      	ldrb	r3, [r2, #0]
    2028:	2102      	movs	r1, #2
    202a:	430b      	orrs	r3, r1
    202c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    202e:	7853      	ldrb	r3, [r2, #1]
    2030:	b25b      	sxtb	r3, r3
    2032:	2b00      	cmp	r3, #0
    2034:	dbfb      	blt.n	202e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2036:	4770      	bx	lr
    2038:	40001800 	.word	0x40001800

0000203c <_system_extint_init>:
{
    203c:	b500      	push	{lr}
    203e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    2040:	4a12      	ldr	r2, [pc, #72]	; (208c <_system_extint_init+0x50>)
    2042:	6993      	ldr	r3, [r2, #24]
    2044:	2140      	movs	r1, #64	; 0x40
    2046:	430b      	orrs	r3, r1
    2048:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    204a:	a901      	add	r1, sp, #4
    204c:	2300      	movs	r3, #0
    204e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2050:	2005      	movs	r0, #5
    2052:	4b0f      	ldr	r3, [pc, #60]	; (2090 <_system_extint_init+0x54>)
    2054:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2056:	2005      	movs	r0, #5
    2058:	4b0e      	ldr	r3, [pc, #56]	; (2094 <_system_extint_init+0x58>)
    205a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    205c:	4a0e      	ldr	r2, [pc, #56]	; (2098 <_system_extint_init+0x5c>)
    205e:	7813      	ldrb	r3, [r2, #0]
    2060:	2101      	movs	r1, #1
    2062:	430b      	orrs	r3, r1
    2064:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2066:	7853      	ldrb	r3, [r2, #1]
    2068:	b25b      	sxtb	r3, r3
    206a:	2b00      	cmp	r3, #0
    206c:	dbfb      	blt.n	2066 <_system_extint_init+0x2a>
    206e:	4b0b      	ldr	r3, [pc, #44]	; (209c <_system_extint_init+0x60>)
    2070:	0019      	movs	r1, r3
    2072:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2074:	2200      	movs	r2, #0
    2076:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2078:	4299      	cmp	r1, r3
    207a:	d1fc      	bne.n	2076 <_system_extint_init+0x3a>
    207c:	2210      	movs	r2, #16
    207e:	4b08      	ldr	r3, [pc, #32]	; (20a0 <_system_extint_init+0x64>)
    2080:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2082:	4b08      	ldr	r3, [pc, #32]	; (20a4 <_system_extint_init+0x68>)
    2084:	4798      	blx	r3
}
    2086:	b003      	add	sp, #12
    2088:	bd00      	pop	{pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	40000400 	.word	0x40000400
    2090:	00008b55 	.word	0x00008b55
    2094:	00008ac9 	.word	0x00008ac9
    2098:	40001800 	.word	0x40001800
    209c:	20000344 	.word	0x20000344
    20a0:	e000e100 	.word	0xe000e100
    20a4:	00002025 	.word	0x00002025

000020a8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    20a8:	2300      	movs	r3, #0
    20aa:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    20ac:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    20ae:	2201      	movs	r2, #1
    20b0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    20b2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    20b4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    20b6:	3302      	adds	r3, #2
    20b8:	72c3      	strb	r3, [r0, #11]
}
    20ba:	4770      	bx	lr

000020bc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    20bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20be:	b083      	sub	sp, #12
    20c0:	0005      	movs	r5, r0
    20c2:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    20c4:	a901      	add	r1, sp, #4
    20c6:	2300      	movs	r3, #0
    20c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    20ca:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    20cc:	7923      	ldrb	r3, [r4, #4]
    20ce:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    20d0:	7a23      	ldrb	r3, [r4, #8]
    20d2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    20d4:	7820      	ldrb	r0, [r4, #0]
    20d6:	4b15      	ldr	r3, [pc, #84]	; (212c <extint_chan_set_config+0x70>)
    20d8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    20da:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    20dc:	2d1f      	cmp	r5, #31
    20de:	d800      	bhi.n	20e2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    20e0:	4813      	ldr	r0, [pc, #76]	; (2130 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    20e2:	2207      	movs	r2, #7
    20e4:	402a      	ands	r2, r5
    20e6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    20e8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    20ea:	7aa3      	ldrb	r3, [r4, #10]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d001      	beq.n	20f4 <extint_chan_set_config+0x38>
    20f0:	2308      	movs	r3, #8
    20f2:	431f      	orrs	r7, r3
    20f4:	08eb      	lsrs	r3, r5, #3
    20f6:	009b      	lsls	r3, r3, #2
    20f8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    20fa:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    20fc:	260f      	movs	r6, #15
    20fe:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2100:	43b1      	bics	r1, r6
			(new_config << config_pos);
    2102:	4097      	lsls	r7, r2
    2104:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2106:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    2108:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    210a:	7a63      	ldrb	r3, [r4, #9]
    210c:	2b00      	cmp	r3, #0
    210e:	d106      	bne.n	211e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2110:	6943      	ldr	r3, [r0, #20]
    2112:	2201      	movs	r2, #1
    2114:	40aa      	lsls	r2, r5
    2116:	4393      	bics	r3, r2
    2118:	6143      	str	r3, [r0, #20]
	}
}
    211a:	b003      	add	sp, #12
    211c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    211e:	6942      	ldr	r2, [r0, #20]
    2120:	2301      	movs	r3, #1
    2122:	40ab      	lsls	r3, r5
    2124:	4313      	orrs	r3, r2
    2126:	6143      	str	r3, [r0, #20]
    2128:	e7f7      	b.n	211a <extint_chan_set_config+0x5e>
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	00008c4d 	.word	0x00008c4d
    2130:	40001800 	.word	0x40001800

00002134 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2134:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2136:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2138:	b25b      	sxtb	r3, r3
    213a:	2b00      	cmp	r3, #0
    213c:	dbfb      	blt.n	2136 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    213e:	8813      	ldrh	r3, [r2, #0]
    2140:	2102      	movs	r1, #2
    2142:	430b      	orrs	r3, r1
    2144:	8013      	strh	r3, [r2, #0]
}
    2146:	4770      	bx	lr

00002148 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2148:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    214a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    214c:	b25b      	sxtb	r3, r3
    214e:	2b00      	cmp	r3, #0
    2150:	dbfb      	blt.n	214a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    2152:	23c1      	movs	r3, #193	; 0xc1
    2154:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    2156:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    2158:	8813      	ldrh	r3, [r2, #0]
    215a:	2102      	movs	r1, #2
    215c:	438b      	bics	r3, r1
    215e:	8013      	strh	r3, [r2, #0]
}
    2160:	4770      	bx	lr
	...

00002164 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2168:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    216a:	4b06      	ldr	r3, [pc, #24]	; (2184 <rtc_calendar_reset+0x20>)
    216c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    216e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2170:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    2172:	b25b      	sxtb	r3, r3
    2174:	2b00      	cmp	r3, #0
    2176:	dbfb      	blt.n	2170 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    2178:	882b      	ldrh	r3, [r5, #0]
    217a:	2201      	movs	r2, #1
    217c:	4313      	orrs	r3, r2
    217e:	802b      	strh	r3, [r5, #0]
}
    2180:	bd70      	pop	{r4, r5, r6, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	00002149 	.word	0x00002149

00002188 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2188:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    218a:	88cb      	ldrh	r3, [r1, #6]
    218c:	88c2      	ldrh	r2, [r0, #6]
    218e:	1a9a      	subs	r2, r3, r2
    2190:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    2192:	794b      	ldrb	r3, [r1, #5]
    2194:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    2196:	790c      	ldrb	r4, [r1, #4]
    2198:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    219a:	4323      	orrs	r3, r4
    219c:	788c      	ldrb	r4, [r1, #2]
    219e:	0324      	lsls	r4, r4, #12
    21a0:	4323      	orrs	r3, r4
    21a2:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    21a4:	7902      	ldrb	r2, [r0, #4]
    21a6:	2a00      	cmp	r2, #0
    21a8:	d105      	bne.n	21b6 <rtc_calendar_time_to_register_value+0x2e>
    21aa:	78ca      	ldrb	r2, [r1, #3]
    21ac:	2a00      	cmp	r2, #0
    21ae:	d002      	beq.n	21b6 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    21b0:	2280      	movs	r2, #128	; 0x80
    21b2:	0252      	lsls	r2, r2, #9
    21b4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    21b6:	7848      	ldrb	r0, [r1, #1]
    21b8:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    21ba:	780a      	ldrb	r2, [r1, #0]
    21bc:	4310      	orrs	r0, r2
    21be:	4318      	orrs	r0, r3

	return register_value;
}
    21c0:	bd10      	pop	{r4, pc}

000021c2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    21c2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    21c4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    21c6:	88c4      	ldrh	r4, [r0, #6]
    21c8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    21ca:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    21cc:	018b      	lsls	r3, r1, #6
    21ce:	0f1b      	lsrs	r3, r3, #28
    21d0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    21d2:	028b      	lsls	r3, r1, #10
    21d4:	0edb      	lsrs	r3, r3, #27
    21d6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    21d8:	7903      	ldrb	r3, [r0, #4]
    21da:	2b00      	cmp	r3, #0
    21dc:	d10c      	bne.n	21f8 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    21de:	040b      	lsls	r3, r1, #16
    21e0:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    21e2:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    21e4:	03cb      	lsls	r3, r1, #15
    21e6:	0fdb      	lsrs	r3, r3, #31
    21e8:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    21ea:	0988      	lsrs	r0, r1, #6
    21ec:	233f      	movs	r3, #63	; 0x3f
    21ee:	4018      	ands	r0, r3
    21f0:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    21f2:	4019      	ands	r1, r3
    21f4:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    21f6:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    21f8:	03cb      	lsls	r3, r1, #15
    21fa:	0edb      	lsrs	r3, r3, #27
    21fc:	7093      	strb	r3, [r2, #2]
    21fe:	e7f4      	b.n	21ea <rtc_calendar_register_value_to_time+0x28>

00002200 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2200:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2202:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    2204:	4b03      	ldr	r3, [pc, #12]	; (2214 <rtc_calendar_set_time+0x14>)
    2206:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2208:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    220a:	b25b      	sxtb	r3, r3
    220c:	2b00      	cmp	r3, #0
    220e:	dbfb      	blt.n	2208 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    2210:	6120      	str	r0, [r4, #16]
}
    2212:	bd10      	pop	{r4, pc}
    2214:	00002189 	.word	0x00002189

00002218 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    2218:	b510      	push	{r4, lr}
    221a:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    221c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    221e:	7941      	ldrb	r1, [r0, #5]
    2220:	2900      	cmp	r1, #0
    2222:	d006      	beq.n	2232 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    2224:	8859      	ldrh	r1, [r3, #2]
    2226:	0449      	lsls	r1, r1, #17
    2228:	d50b      	bpl.n	2242 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    222a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    222c:	4b0a      	ldr	r3, [pc, #40]	; (2258 <rtc_calendar_get_time+0x40>)
    222e:	4798      	blx	r3
}
    2230:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    2232:	490a      	ldr	r1, [pc, #40]	; (225c <rtc_calendar_get_time+0x44>)
    2234:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    2236:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2238:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    223a:	b249      	sxtb	r1, r1
    223c:	2900      	cmp	r1, #0
    223e:	dbfb      	blt.n	2238 <rtc_calendar_get_time+0x20>
    2240:	e7f3      	b.n	222a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    2242:	8859      	ldrh	r1, [r3, #2]
    2244:	24c0      	movs	r4, #192	; 0xc0
    2246:	0224      	lsls	r4, r4, #8
    2248:	4321      	orrs	r1, r4
    224a:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    224c:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    224e:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    2250:	b249      	sxtb	r1, r1
    2252:	2900      	cmp	r1, #0
    2254:	dbfb      	blt.n	224e <rtc_calendar_get_time+0x36>
    2256:	e7e8      	b.n	222a <rtc_calendar_get_time+0x12>
    2258:	000021c3 	.word	0x000021c3
    225c:	ffff8000 	.word	0xffff8000

00002260 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2260:	b570      	push	{r4, r5, r6, lr}
    2262:	000d      	movs	r5, r1
    2264:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    2266:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    2268:	2a01      	cmp	r2, #1
    226a:	d901      	bls.n	2270 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    226c:	0018      	movs	r0, r3
    226e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    2270:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    2272:	4b06      	ldr	r3, [pc, #24]	; (228c <rtc_calendar_set_alarm+0x2c>)
    2274:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2276:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    2278:	b25b      	sxtb	r3, r3
    227a:	2b00      	cmp	r3, #0
    227c:	dbfb      	blt.n	2276 <rtc_calendar_set_alarm+0x16>
    227e:	00e4      	lsls	r4, r4, #3
    2280:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    2282:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    2284:	7a2b      	ldrb	r3, [r5, #8]
    2286:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    2288:	2300      	movs	r3, #0
    228a:	e7ef      	b.n	226c <rtc_calendar_set_alarm+0xc>
    228c:	00002189 	.word	0x00002189

00002290 <rtc_calendar_init>:
{
    2290:	b530      	push	{r4, r5, lr}
    2292:	b083      	sub	sp, #12
    2294:	0005      	movs	r5, r0
    2296:	0014      	movs	r4, r2
	module->hw = hw;
    2298:	6001      	str	r1, [r0, #0]
    229a:	4a1c      	ldr	r2, [pc, #112]	; (230c <rtc_calendar_init+0x7c>)
    229c:	6993      	ldr	r3, [r2, #24]
    229e:	2120      	movs	r1, #32
    22a0:	430b      	orrs	r3, r1
    22a2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    22a4:	a901      	add	r1, sp, #4
    22a6:	2302      	movs	r3, #2
    22a8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    22aa:	2004      	movs	r0, #4
    22ac:	4b18      	ldr	r3, [pc, #96]	; (2310 <rtc_calendar_init+0x80>)
    22ae:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    22b0:	2004      	movs	r0, #4
    22b2:	4b18      	ldr	r3, [pc, #96]	; (2314 <rtc_calendar_init+0x84>)
    22b4:	4798      	blx	r3
	rtc_calendar_reset(module);
    22b6:	0028      	movs	r0, r5
    22b8:	4b17      	ldr	r3, [pc, #92]	; (2318 <rtc_calendar_init+0x88>)
    22ba:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    22bc:	7923      	ldrb	r3, [r4, #4]
    22be:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    22c0:	78e3      	ldrb	r3, [r4, #3]
    22c2:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    22c4:	88e3      	ldrh	r3, [r4, #6]
    22c6:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    22c8:	4b14      	ldr	r3, [pc, #80]	; (231c <rtc_calendar_init+0x8c>)
    22ca:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    22cc:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    22ce:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    22d0:	7921      	ldrb	r1, [r4, #4]
    22d2:	2900      	cmp	r1, #0
    22d4:	d017      	beq.n	2306 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    22d6:	2108      	movs	r1, #8
    22d8:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    22da:	78a1      	ldrb	r1, [r4, #2]
    22dc:	2900      	cmp	r1, #0
    22de:	d001      	beq.n	22e4 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    22e0:	2180      	movs	r1, #128	; 0x80
    22e2:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    22e4:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    22e6:	78e3      	ldrb	r3, [r4, #3]
    22e8:	2b00      	cmp	r3, #0
    22ea:	d004      	beq.n	22f6 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    22ec:	8853      	ldrh	r3, [r2, #2]
    22ee:	2180      	movs	r1, #128	; 0x80
    22f0:	01c9      	lsls	r1, r1, #7
    22f2:	430b      	orrs	r3, r1
    22f4:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    22f6:	0021      	movs	r1, r4
    22f8:	3108      	adds	r1, #8
    22fa:	2200      	movs	r2, #0
    22fc:	0028      	movs	r0, r5
    22fe:	4b08      	ldr	r3, [pc, #32]	; (2320 <rtc_calendar_init+0x90>)
    2300:	4798      	blx	r3
}
    2302:	b003      	add	sp, #12
    2304:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    2306:	2148      	movs	r1, #72	; 0x48
    2308:	430b      	orrs	r3, r1
    230a:	e7e6      	b.n	22da <rtc_calendar_init+0x4a>
    230c:	40000400 	.word	0x40000400
    2310:	00008b55 	.word	0x00008b55
    2314:	00008ac9 	.word	0x00008ac9
    2318:	00002165 	.word	0x00002165
    231c:	20000384 	.word	0x20000384
    2320:	00002261 	.word	0x00002261

00002324 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    2328:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    232a:	2a01      	cmp	r2, #1
    232c:	d901      	bls.n	2332 <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    232e:	0018      	movs	r0, r3
    2330:	bd70      	pop	{r4, r5, r6, pc}
    2332:	00d2      	lsls	r2, r2, #3
    2334:	6803      	ldr	r3, [r0, #0]
    2336:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    2338:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    233a:	0022      	movs	r2, r4
    233c:	4b02      	ldr	r3, [pc, #8]	; (2348 <rtc_calendar_get_alarm+0x24>)
    233e:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    2340:	7f2b      	ldrb	r3, [r5, #28]
    2342:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    2344:	2300      	movs	r3, #0
    2346:	e7f2      	b.n	232e <rtc_calendar_get_alarm+0xa>
    2348:	000021c3 	.word	0x000021c3

0000234c <rtc_calendar_swap_time_mode>:
{
    234c:	b570      	push	{r4, r5, r6, lr}
    234e:	b086      	sub	sp, #24
    2350:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    2352:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    2354:	a904      	add	r1, sp, #16
    2356:	4b3d      	ldr	r3, [pc, #244]	; (244c <rtc_calendar_swap_time_mode+0x100>)
    2358:	4798      	blx	r3
	if (module->clock_24h) {
    235a:	7923      	ldrb	r3, [r4, #4]
    235c:	2b00      	cmp	r3, #0
    235e:	d042      	beq.n	23e6 <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    2360:	aa04      	add	r2, sp, #16
    2362:	7890      	ldrb	r0, [r2, #2]
    2364:	230b      	movs	r3, #11
    2366:	4283      	cmp	r3, r0
    2368:	419b      	sbcs	r3, r3
    236a:	425b      	negs	r3, r3
    236c:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    236e:	210c      	movs	r1, #12
    2370:	4b37      	ldr	r3, [pc, #220]	; (2450 <rtc_calendar_swap_time_mode+0x104>)
    2372:	4798      	blx	r3
    2374:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    2376:	2900      	cmp	r1, #0
    2378:	d016      	beq.n	23a8 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    237a:	ab04      	add	r3, sp, #16
    237c:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    237e:	ad01      	add	r5, sp, #4
    2380:	2200      	movs	r2, #0
    2382:	0029      	movs	r1, r5
    2384:	0020      	movs	r0, r4
    2386:	4b33      	ldr	r3, [pc, #204]	; (2454 <rtc_calendar_swap_time_mode+0x108>)
    2388:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    238a:	78a8      	ldrb	r0, [r5, #2]
    238c:	230b      	movs	r3, #11
    238e:	4283      	cmp	r3, r0
    2390:	419b      	sbcs	r3, r3
    2392:	425b      	negs	r3, r3
    2394:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    2396:	210c      	movs	r1, #12
    2398:	4b2d      	ldr	r3, [pc, #180]	; (2450 <rtc_calendar_swap_time_mode+0x104>)
    239a:	4798      	blx	r3
    239c:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    239e:	2900      	cmp	r1, #0
    23a0:	d006      	beq.n	23b0 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    23a2:	ab01      	add	r3, sp, #4
    23a4:	7099      	strb	r1, [r3, #2]
    23a6:	e006      	b.n	23b6 <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    23a8:	220c      	movs	r2, #12
    23aa:	ab04      	add	r3, sp, #16
    23ac:	709a      	strb	r2, [r3, #2]
    23ae:	e7e6      	b.n	237e <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    23b0:	220c      	movs	r2, #12
    23b2:	ab01      	add	r3, sp, #4
    23b4:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    23b6:	2500      	movs	r5, #0
    23b8:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    23ba:	2200      	movs	r2, #0
    23bc:	a901      	add	r1, sp, #4
    23be:	0020      	movs	r0, r4
    23c0:	4b25      	ldr	r3, [pc, #148]	; (2458 <rtc_calendar_swap_time_mode+0x10c>)
    23c2:	4798      	blx	r3
		module->clock_24h = false;
    23c4:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    23c6:	0020      	movs	r0, r4
    23c8:	4b24      	ldr	r3, [pc, #144]	; (245c <rtc_calendar_swap_time_mode+0x110>)
    23ca:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    23cc:	8833      	ldrh	r3, [r6, #0]
    23ce:	2240      	movs	r2, #64	; 0x40
    23d0:	4053      	eors	r3, r2
    23d2:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    23d4:	0020      	movs	r0, r4
    23d6:	4b22      	ldr	r3, [pc, #136]	; (2460 <rtc_calendar_swap_time_mode+0x114>)
    23d8:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    23da:	a904      	add	r1, sp, #16
    23dc:	0020      	movs	r0, r4
    23de:	4b21      	ldr	r3, [pc, #132]	; (2464 <rtc_calendar_swap_time_mode+0x118>)
    23e0:	4798      	blx	r3
}
    23e2:	b006      	add	sp, #24
    23e4:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    23e6:	ab04      	add	r3, sp, #16
    23e8:	78db      	ldrb	r3, [r3, #3]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d015      	beq.n	241a <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    23ee:	ab04      	add	r3, sp, #16
    23f0:	789a      	ldrb	r2, [r3, #2]
    23f2:	320c      	adds	r2, #12
    23f4:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    23f6:	2200      	movs	r2, #0
    23f8:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    23fa:	ad01      	add	r5, sp, #4
    23fc:	2200      	movs	r2, #0
    23fe:	0029      	movs	r1, r5
    2400:	0020      	movs	r0, r4
    2402:	4b14      	ldr	r3, [pc, #80]	; (2454 <rtc_calendar_swap_time_mode+0x108>)
    2404:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    2406:	78eb      	ldrb	r3, [r5, #3]
    2408:	2b00      	cmp	r3, #0
    240a:	d10e      	bne.n	242a <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    240c:	ab01      	add	r3, sp, #4
    240e:	789b      	ldrb	r3, [r3, #2]
    2410:	2b0c      	cmp	r3, #12
    2412:	d017      	beq.n	2444 <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    2414:	2301      	movs	r3, #1
    2416:	7123      	strb	r3, [r4, #4]
    2418:	e7d5      	b.n	23c6 <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    241a:	ab04      	add	r3, sp, #16
    241c:	789b      	ldrb	r3, [r3, #2]
    241e:	2b0c      	cmp	r3, #12
    2420:	d1eb      	bne.n	23fa <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    2422:	2200      	movs	r2, #0
    2424:	ab04      	add	r3, sp, #16
    2426:	709a      	strb	r2, [r3, #2]
    2428:	e7e7      	b.n	23fa <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    242a:	a901      	add	r1, sp, #4
    242c:	788b      	ldrb	r3, [r1, #2]
    242e:	330c      	adds	r3, #12
    2430:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    2432:	2300      	movs	r3, #0
    2434:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    2436:	3301      	adds	r3, #1
    2438:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    243a:	2200      	movs	r2, #0
    243c:	0020      	movs	r0, r4
    243e:	4b06      	ldr	r3, [pc, #24]	; (2458 <rtc_calendar_swap_time_mode+0x10c>)
    2440:	4798      	blx	r3
    2442:	e7e7      	b.n	2414 <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    2444:	2200      	movs	r2, #0
    2446:	ab01      	add	r3, sp, #4
    2448:	709a      	strb	r2, [r3, #2]
    244a:	e7e3      	b.n	2414 <rtc_calendar_swap_time_mode+0xc8>
    244c:	00002219 	.word	0x00002219
    2450:	00008edd 	.word	0x00008edd
    2454:	00002325 	.word	0x00002325
    2458:	00002261 	.word	0x00002261
    245c:	00002149 	.word	0x00002149
    2460:	00002135 	.word	0x00002135
    2464:	00002201 	.word	0x00002201

00002468 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2468:	4770      	bx	lr
	...

0000246c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    246c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    246e:	4b0a      	ldr	r3, [pc, #40]	; (2498 <_sercom_set_handler+0x2c>)
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d10c      	bne.n	2490 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2476:	4f09      	ldr	r7, [pc, #36]	; (249c <_sercom_set_handler+0x30>)
    2478:	4e09      	ldr	r6, [pc, #36]	; (24a0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    247a:	4d0a      	ldr	r5, [pc, #40]	; (24a4 <_sercom_set_handler+0x38>)
    247c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    247e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2480:	195a      	adds	r2, r3, r5
    2482:	6014      	str	r4, [r2, #0]
    2484:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2486:	2b18      	cmp	r3, #24
    2488:	d1f9      	bne.n	247e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    248a:	2201      	movs	r2, #1
    248c:	4b02      	ldr	r3, [pc, #8]	; (2498 <_sercom_set_handler+0x2c>)
    248e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2490:	0080      	lsls	r0, r0, #2
    2492:	4b02      	ldr	r3, [pc, #8]	; (249c <_sercom_set_handler+0x30>)
    2494:	50c1      	str	r1, [r0, r3]
}
    2496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2498:	20000228 	.word	0x20000228
    249c:	2000022c 	.word	0x2000022c
    24a0:	00002469 	.word	0x00002469
    24a4:	20000388 	.word	0x20000388

000024a8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    24a8:	b500      	push	{lr}
    24aa:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    24ac:	2309      	movs	r3, #9
    24ae:	466a      	mov	r2, sp
    24b0:	7013      	strb	r3, [r2, #0]
    24b2:	3301      	adds	r3, #1
    24b4:	7053      	strb	r3, [r2, #1]
    24b6:	3301      	adds	r3, #1
    24b8:	7093      	strb	r3, [r2, #2]
    24ba:	3301      	adds	r3, #1
    24bc:	70d3      	strb	r3, [r2, #3]
    24be:	3301      	adds	r3, #1
    24c0:	7113      	strb	r3, [r2, #4]
    24c2:	3301      	adds	r3, #1
    24c4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    24c6:	4b03      	ldr	r3, [pc, #12]	; (24d4 <_sercom_get_interrupt_vector+0x2c>)
    24c8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    24ca:	466b      	mov	r3, sp
    24cc:	5618      	ldrsb	r0, [r3, r0]
}
    24ce:	b003      	add	sp, #12
    24d0:	bd00      	pop	{pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	00007515 	.word	0x00007515

000024d8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    24d8:	b510      	push	{r4, lr}
    24da:	4b02      	ldr	r3, [pc, #8]	; (24e4 <SERCOM0_Handler+0xc>)
    24dc:	681b      	ldr	r3, [r3, #0]
    24de:	2000      	movs	r0, #0
    24e0:	4798      	blx	r3
    24e2:	bd10      	pop	{r4, pc}
    24e4:	2000022c 	.word	0x2000022c

000024e8 <SERCOM1_Handler>:
    24e8:	b510      	push	{r4, lr}
    24ea:	4b02      	ldr	r3, [pc, #8]	; (24f4 <SERCOM1_Handler+0xc>)
    24ec:	685b      	ldr	r3, [r3, #4]
    24ee:	2001      	movs	r0, #1
    24f0:	4798      	blx	r3
    24f2:	bd10      	pop	{r4, pc}
    24f4:	2000022c 	.word	0x2000022c

000024f8 <SERCOM2_Handler>:
    24f8:	b510      	push	{r4, lr}
    24fa:	4b02      	ldr	r3, [pc, #8]	; (2504 <SERCOM2_Handler+0xc>)
    24fc:	689b      	ldr	r3, [r3, #8]
    24fe:	2002      	movs	r0, #2
    2500:	4798      	blx	r3
    2502:	bd10      	pop	{r4, pc}
    2504:	2000022c 	.word	0x2000022c

00002508 <SERCOM3_Handler>:
    2508:	b510      	push	{r4, lr}
    250a:	4b02      	ldr	r3, [pc, #8]	; (2514 <SERCOM3_Handler+0xc>)
    250c:	68db      	ldr	r3, [r3, #12]
    250e:	2003      	movs	r0, #3
    2510:	4798      	blx	r3
    2512:	bd10      	pop	{r4, pc}
    2514:	2000022c 	.word	0x2000022c

00002518 <SERCOM4_Handler>:
    2518:	b510      	push	{r4, lr}
    251a:	4b02      	ldr	r3, [pc, #8]	; (2524 <SERCOM4_Handler+0xc>)
    251c:	691b      	ldr	r3, [r3, #16]
    251e:	2004      	movs	r0, #4
    2520:	4798      	blx	r3
    2522:	bd10      	pop	{r4, pc}
    2524:	2000022c 	.word	0x2000022c

00002528 <SERCOM5_Handler>:
    2528:	b510      	push	{r4, lr}
    252a:	4b02      	ldr	r3, [pc, #8]	; (2534 <SERCOM5_Handler+0xc>)
    252c:	695b      	ldr	r3, [r3, #20]
    252e:	2005      	movs	r0, #5
    2530:	4798      	blx	r3
    2532:	bd10      	pop	{r4, pc}
    2534:	2000022c 	.word	0x2000022c

00002538 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2538:	b5f0      	push	{r4, r5, r6, r7, lr}
    253a:	46de      	mov	lr, fp
    253c:	4657      	mov	r7, sl
    253e:	464e      	mov	r6, r9
    2540:	4645      	mov	r5, r8
    2542:	b5e0      	push	{r5, r6, r7, lr}
    2544:	b091      	sub	sp, #68	; 0x44
    2546:	0005      	movs	r5, r0
    2548:	000c      	movs	r4, r1
    254a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    254c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    254e:	0008      	movs	r0, r1
    2550:	4bbc      	ldr	r3, [pc, #752]	; (2844 <usart_init+0x30c>)
    2552:	4798      	blx	r3
    2554:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2556:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2558:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    255a:	07db      	lsls	r3, r3, #31
    255c:	d506      	bpl.n	256c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    255e:	b011      	add	sp, #68	; 0x44
    2560:	bc3c      	pop	{r2, r3, r4, r5}
    2562:	4690      	mov	r8, r2
    2564:	4699      	mov	r9, r3
    2566:	46a2      	mov	sl, r4
    2568:	46ab      	mov	fp, r5
    256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    256c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    256e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2570:	079b      	lsls	r3, r3, #30
    2572:	d4f4      	bmi.n	255e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    2574:	49b4      	ldr	r1, [pc, #720]	; (2848 <usart_init+0x310>)
    2576:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2578:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    257a:	2301      	movs	r3, #1
    257c:	40bb      	lsls	r3, r7
    257e:	4303      	orrs	r3, r0
    2580:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2582:	a90f      	add	r1, sp, #60	; 0x3c
    2584:	272d      	movs	r7, #45	; 0x2d
    2586:	5df3      	ldrb	r3, [r6, r7]
    2588:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    258a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    258c:	b2d3      	uxtb	r3, r2
    258e:	9302      	str	r3, [sp, #8]
    2590:	0018      	movs	r0, r3
    2592:	4bae      	ldr	r3, [pc, #696]	; (284c <usart_init+0x314>)
    2594:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2596:	9802      	ldr	r0, [sp, #8]
    2598:	4bad      	ldr	r3, [pc, #692]	; (2850 <usart_init+0x318>)
    259a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    259c:	5df0      	ldrb	r0, [r6, r7]
    259e:	2100      	movs	r1, #0
    25a0:	4bac      	ldr	r3, [pc, #688]	; (2854 <usart_init+0x31c>)
    25a2:	4798      	blx	r3
	module->character_size = config->character_size;
    25a4:	7af3      	ldrb	r3, [r6, #11]
    25a6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    25a8:	2324      	movs	r3, #36	; 0x24
    25aa:	5cf3      	ldrb	r3, [r6, r3]
    25ac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    25ae:	2325      	movs	r3, #37	; 0x25
    25b0:	5cf3      	ldrb	r3, [r6, r3]
    25b2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    25b4:	7ef3      	ldrb	r3, [r6, #27]
    25b6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    25b8:	7f33      	ldrb	r3, [r6, #28]
    25ba:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25bc:	682b      	ldr	r3, [r5, #0]
    25be:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25c0:	0018      	movs	r0, r3
    25c2:	4ba0      	ldr	r3, [pc, #640]	; (2844 <usart_init+0x30c>)
    25c4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25c6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    25c8:	2200      	movs	r2, #0
    25ca:	230e      	movs	r3, #14
    25cc:	a906      	add	r1, sp, #24
    25ce:	468c      	mov	ip, r1
    25d0:	4463      	add	r3, ip
    25d2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    25d4:	8a32      	ldrh	r2, [r6, #16]
    25d6:	9202      	str	r2, [sp, #8]
    25d8:	2380      	movs	r3, #128	; 0x80
    25da:	01db      	lsls	r3, r3, #7
    25dc:	429a      	cmp	r2, r3
    25de:	d100      	bne.n	25e2 <usart_init+0xaa>
    25e0:	e09e      	b.n	2720 <usart_init+0x1e8>
    25e2:	d90f      	bls.n	2604 <usart_init+0xcc>
    25e4:	23c0      	movs	r3, #192	; 0xc0
    25e6:	01db      	lsls	r3, r3, #7
    25e8:	9a02      	ldr	r2, [sp, #8]
    25ea:	429a      	cmp	r2, r3
    25ec:	d100      	bne.n	25f0 <usart_init+0xb8>
    25ee:	e092      	b.n	2716 <usart_init+0x1de>
    25f0:	2380      	movs	r3, #128	; 0x80
    25f2:	021b      	lsls	r3, r3, #8
    25f4:	429a      	cmp	r2, r3
    25f6:	d000      	beq.n	25fa <usart_init+0xc2>
    25f8:	e11f      	b.n	283a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    25fa:	2303      	movs	r3, #3
    25fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    25fe:	2300      	movs	r3, #0
    2600:	9307      	str	r3, [sp, #28]
    2602:	e008      	b.n	2616 <usart_init+0xde>
	switch (config->sample_rate) {
    2604:	2380      	movs	r3, #128	; 0x80
    2606:	019b      	lsls	r3, r3, #6
    2608:	429a      	cmp	r2, r3
    260a:	d000      	beq.n	260e <usart_init+0xd6>
    260c:	e115      	b.n	283a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    260e:	2310      	movs	r3, #16
    2610:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2612:	3b0f      	subs	r3, #15
    2614:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2616:	6833      	ldr	r3, [r6, #0]
    2618:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    261a:	68f3      	ldr	r3, [r6, #12]
    261c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    261e:	6973      	ldr	r3, [r6, #20]
    2620:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2622:	7e33      	ldrb	r3, [r6, #24]
    2624:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2626:	2326      	movs	r3, #38	; 0x26
    2628:	5cf3      	ldrb	r3, [r6, r3]
    262a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    262c:	6873      	ldr	r3, [r6, #4]
    262e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2630:	2b00      	cmp	r3, #0
    2632:	d100      	bne.n	2636 <usart_init+0xfe>
    2634:	e0a0      	b.n	2778 <usart_init+0x240>
    2636:	2380      	movs	r3, #128	; 0x80
    2638:	055b      	lsls	r3, r3, #21
    263a:	4599      	cmp	r9, r3
    263c:	d100      	bne.n	2640 <usart_init+0x108>
    263e:	e084      	b.n	274a <usart_init+0x212>
	if(config->encoding_format_enable) {
    2640:	7e73      	ldrb	r3, [r6, #25]
    2642:	2b00      	cmp	r3, #0
    2644:	d002      	beq.n	264c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2646:	7eb3      	ldrb	r3, [r6, #26]
    2648:	4642      	mov	r2, r8
    264a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    264c:	682a      	ldr	r2, [r5, #0]
    264e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2650:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2652:	2b00      	cmp	r3, #0
    2654:	d1fc      	bne.n	2650 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2656:	330e      	adds	r3, #14
    2658:	aa06      	add	r2, sp, #24
    265a:	4694      	mov	ip, r2
    265c:	4463      	add	r3, ip
    265e:	881b      	ldrh	r3, [r3, #0]
    2660:	4642      	mov	r2, r8
    2662:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2664:	9b05      	ldr	r3, [sp, #20]
    2666:	9a03      	ldr	r2, [sp, #12]
    2668:	4313      	orrs	r3, r2
    266a:	9a04      	ldr	r2, [sp, #16]
    266c:	4313      	orrs	r3, r2
    266e:	464a      	mov	r2, r9
    2670:	4313      	orrs	r3, r2
    2672:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2674:	465b      	mov	r3, fp
    2676:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2678:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    267a:	4653      	mov	r3, sl
    267c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    267e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2680:	2327      	movs	r3, #39	; 0x27
    2682:	5cf3      	ldrb	r3, [r6, r3]
    2684:	2b00      	cmp	r3, #0
    2686:	d101      	bne.n	268c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2688:	3304      	adds	r3, #4
    268a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    268c:	7e73      	ldrb	r3, [r6, #25]
    268e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2690:	7f32      	ldrb	r2, [r6, #28]
    2692:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2694:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2696:	7f72      	ldrb	r2, [r6, #29]
    2698:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    269a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    269c:	2224      	movs	r2, #36	; 0x24
    269e:	5cb2      	ldrb	r2, [r6, r2]
    26a0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    26a2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    26a4:	2225      	movs	r2, #37	; 0x25
    26a6:	5cb2      	ldrb	r2, [r6, r2]
    26a8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    26aa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    26ac:	7ab1      	ldrb	r1, [r6, #10]
    26ae:	7af2      	ldrb	r2, [r6, #11]
    26b0:	4311      	orrs	r1, r2
    26b2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    26b4:	8933      	ldrh	r3, [r6, #8]
    26b6:	2bff      	cmp	r3, #255	; 0xff
    26b8:	d100      	bne.n	26bc <usart_init+0x184>
    26ba:	e081      	b.n	27c0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    26bc:	2280      	movs	r2, #128	; 0x80
    26be:	0452      	lsls	r2, r2, #17
    26c0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    26c2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    26c4:	232c      	movs	r3, #44	; 0x2c
    26c6:	5cf3      	ldrb	r3, [r6, r3]
    26c8:	2b00      	cmp	r3, #0
    26ca:	d103      	bne.n	26d4 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    26cc:	4b62      	ldr	r3, [pc, #392]	; (2858 <usart_init+0x320>)
    26ce:	789b      	ldrb	r3, [r3, #2]
    26d0:	079b      	lsls	r3, r3, #30
    26d2:	d501      	bpl.n	26d8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    26d4:	2380      	movs	r3, #128	; 0x80
    26d6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    26d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26dc:	2b00      	cmp	r3, #0
    26de:	d1fc      	bne.n	26da <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    26e0:	4643      	mov	r3, r8
    26e2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26e8:	2b00      	cmp	r3, #0
    26ea:	d1fc      	bne.n	26e6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    26ec:	4643      	mov	r3, r8
    26ee:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    26f0:	ab0e      	add	r3, sp, #56	; 0x38
    26f2:	2280      	movs	r2, #128	; 0x80
    26f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    26f6:	2200      	movs	r2, #0
    26f8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    26fa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    26fc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    26fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2700:	930a      	str	r3, [sp, #40]	; 0x28
    2702:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2704:	930b      	str	r3, [sp, #44]	; 0x2c
    2706:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2708:	930c      	str	r3, [sp, #48]	; 0x30
    270a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    270c:	9302      	str	r3, [sp, #8]
    270e:	930d      	str	r3, [sp, #52]	; 0x34
    2710:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2712:	ae0a      	add	r6, sp, #40	; 0x28
    2714:	e063      	b.n	27de <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2716:	2308      	movs	r3, #8
    2718:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    271a:	3b07      	subs	r3, #7
    271c:	9307      	str	r3, [sp, #28]
    271e:	e77a      	b.n	2616 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2720:	6833      	ldr	r3, [r6, #0]
    2722:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2724:	68f3      	ldr	r3, [r6, #12]
    2726:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2728:	6973      	ldr	r3, [r6, #20]
    272a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    272c:	7e33      	ldrb	r3, [r6, #24]
    272e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2730:	2326      	movs	r3, #38	; 0x26
    2732:	5cf3      	ldrb	r3, [r6, r3]
    2734:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2736:	6873      	ldr	r3, [r6, #4]
    2738:	4699      	mov	r9, r3
	switch (transfer_mode)
    273a:	2b00      	cmp	r3, #0
    273c:	d018      	beq.n	2770 <usart_init+0x238>
    273e:	2380      	movs	r3, #128	; 0x80
    2740:	055b      	lsls	r3, r3, #21
    2742:	4599      	cmp	r9, r3
    2744:	d001      	beq.n	274a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2746:	2000      	movs	r0, #0
    2748:	e025      	b.n	2796 <usart_init+0x25e>
			if (!config->use_external_clock) {
    274a:	2327      	movs	r3, #39	; 0x27
    274c:	5cf3      	ldrb	r3, [r6, r3]
    274e:	2b00      	cmp	r3, #0
    2750:	d000      	beq.n	2754 <usart_init+0x21c>
    2752:	e775      	b.n	2640 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2754:	6a33      	ldr	r3, [r6, #32]
    2756:	001f      	movs	r7, r3
    2758:	b2c0      	uxtb	r0, r0
    275a:	4b40      	ldr	r3, [pc, #256]	; (285c <usart_init+0x324>)
    275c:	4798      	blx	r3
    275e:	0001      	movs	r1, r0
    2760:	220e      	movs	r2, #14
    2762:	ab06      	add	r3, sp, #24
    2764:	469c      	mov	ip, r3
    2766:	4462      	add	r2, ip
    2768:	0038      	movs	r0, r7
    276a:	4b3d      	ldr	r3, [pc, #244]	; (2860 <usart_init+0x328>)
    276c:	4798      	blx	r3
    276e:	e012      	b.n	2796 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2770:	2308      	movs	r3, #8
    2772:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2774:	2300      	movs	r3, #0
    2776:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2778:	2327      	movs	r3, #39	; 0x27
    277a:	5cf3      	ldrb	r3, [r6, r3]
    277c:	2b00      	cmp	r3, #0
    277e:	d00e      	beq.n	279e <usart_init+0x266>
				status_code =
    2780:	9b06      	ldr	r3, [sp, #24]
    2782:	9300      	str	r3, [sp, #0]
    2784:	9b07      	ldr	r3, [sp, #28]
    2786:	220e      	movs	r2, #14
    2788:	a906      	add	r1, sp, #24
    278a:	468c      	mov	ip, r1
    278c:	4462      	add	r2, ip
    278e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2790:	6a30      	ldr	r0, [r6, #32]
    2792:	4f34      	ldr	r7, [pc, #208]	; (2864 <usart_init+0x32c>)
    2794:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2796:	2800      	cmp	r0, #0
    2798:	d000      	beq.n	279c <usart_init+0x264>
    279a:	e6e0      	b.n	255e <usart_init+0x26>
    279c:	e750      	b.n	2640 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    279e:	6a33      	ldr	r3, [r6, #32]
    27a0:	001f      	movs	r7, r3
    27a2:	b2c0      	uxtb	r0, r0
    27a4:	4b2d      	ldr	r3, [pc, #180]	; (285c <usart_init+0x324>)
    27a6:	4798      	blx	r3
    27a8:	0001      	movs	r1, r0
				status_code =
    27aa:	9b06      	ldr	r3, [sp, #24]
    27ac:	9300      	str	r3, [sp, #0]
    27ae:	9b07      	ldr	r3, [sp, #28]
    27b0:	220e      	movs	r2, #14
    27b2:	a806      	add	r0, sp, #24
    27b4:	4684      	mov	ip, r0
    27b6:	4462      	add	r2, ip
    27b8:	0038      	movs	r0, r7
    27ba:	4f2a      	ldr	r7, [pc, #168]	; (2864 <usart_init+0x32c>)
    27bc:	47b8      	blx	r7
    27be:	e7ea      	b.n	2796 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    27c0:	7ef3      	ldrb	r3, [r6, #27]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d100      	bne.n	27c8 <usart_init+0x290>
    27c6:	e77d      	b.n	26c4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    27c8:	2380      	movs	r3, #128	; 0x80
    27ca:	04db      	lsls	r3, r3, #19
    27cc:	431f      	orrs	r7, r3
    27ce:	e779      	b.n	26c4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    27d0:	0020      	movs	r0, r4
    27d2:	4b25      	ldr	r3, [pc, #148]	; (2868 <usart_init+0x330>)
    27d4:	4798      	blx	r3
    27d6:	e007      	b.n	27e8 <usart_init+0x2b0>
    27d8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    27da:	2f04      	cmp	r7, #4
    27dc:	d00d      	beq.n	27fa <usart_init+0x2c2>
    27de:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    27e0:	00bb      	lsls	r3, r7, #2
    27e2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    27e4:	2800      	cmp	r0, #0
    27e6:	d0f3      	beq.n	27d0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    27e8:	1c43      	adds	r3, r0, #1
    27ea:	d0f5      	beq.n	27d8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    27ec:	a90e      	add	r1, sp, #56	; 0x38
    27ee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    27f0:	0c00      	lsrs	r0, r0, #16
    27f2:	b2c0      	uxtb	r0, r0
    27f4:	4b1d      	ldr	r3, [pc, #116]	; (286c <usart_init+0x334>)
    27f6:	4798      	blx	r3
    27f8:	e7ee      	b.n	27d8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    27fa:	2300      	movs	r3, #0
    27fc:	60eb      	str	r3, [r5, #12]
    27fe:	612b      	str	r3, [r5, #16]
    2800:	616b      	str	r3, [r5, #20]
    2802:	61ab      	str	r3, [r5, #24]
    2804:	61eb      	str	r3, [r5, #28]
    2806:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2808:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    280a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    280c:	2200      	movs	r2, #0
    280e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2810:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2812:	3330      	adds	r3, #48	; 0x30
    2814:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2816:	3301      	adds	r3, #1
    2818:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    281a:	3301      	adds	r3, #1
    281c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    281e:	3301      	adds	r3, #1
    2820:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2822:	6828      	ldr	r0, [r5, #0]
    2824:	4b07      	ldr	r3, [pc, #28]	; (2844 <usart_init+0x30c>)
    2826:	4798      	blx	r3
    2828:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    282a:	4911      	ldr	r1, [pc, #68]	; (2870 <usart_init+0x338>)
    282c:	4b11      	ldr	r3, [pc, #68]	; (2874 <usart_init+0x33c>)
    282e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2830:	00a4      	lsls	r4, r4, #2
    2832:	4b11      	ldr	r3, [pc, #68]	; (2878 <usart_init+0x340>)
    2834:	50e5      	str	r5, [r4, r3]
	return status_code;
    2836:	2000      	movs	r0, #0
    2838:	e691      	b.n	255e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    283a:	2310      	movs	r3, #16
    283c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    283e:	2300      	movs	r3, #0
    2840:	9307      	str	r3, [sp, #28]
    2842:	e6e8      	b.n	2616 <usart_init+0xde>
    2844:	00007515 	.word	0x00007515
    2848:	40000400 	.word	0x40000400
    284c:	00008b55 	.word	0x00008b55
    2850:	00008ac9 	.word	0x00008ac9
    2854:	00007351 	.word	0x00007351
    2858:	41002000 	.word	0x41002000
    285c:	00008b71 	.word	0x00008b71
    2860:	00007293 	.word	0x00007293
    2864:	000072bd 	.word	0x000072bd
    2868:	0000739d 	.word	0x0000739d
    286c:	00008c4d 	.word	0x00008c4d
    2870:	00002919 	.word	0x00002919
    2874:	0000246d 	.word	0x0000246d
    2878:	20000388 	.word	0x20000388

0000287c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    287c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    287e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2880:	2a00      	cmp	r2, #0
    2882:	d101      	bne.n	2888 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2884:	0018      	movs	r0, r3
    2886:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2888:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    288a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    288c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    288e:	2a00      	cmp	r2, #0
    2890:	d1f8      	bne.n	2884 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2892:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2894:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2896:	2a00      	cmp	r2, #0
    2898:	d1fc      	bne.n	2894 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    289a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    289c:	2102      	movs	r1, #2
    289e:	7e1a      	ldrb	r2, [r3, #24]
    28a0:	420a      	tst	r2, r1
    28a2:	d0fc      	beq.n	289e <usart_write_wait+0x22>
	return STATUS_OK;
    28a4:	2300      	movs	r3, #0
    28a6:	e7ed      	b.n	2884 <usart_write_wait+0x8>

000028a8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    28a8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    28aa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    28ac:	2a00      	cmp	r2, #0
    28ae:	d101      	bne.n	28b4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    28b0:	0018      	movs	r0, r3
    28b2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    28b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    28b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    28b8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    28ba:	2a00      	cmp	r2, #0
    28bc:	d1f8      	bne.n	28b0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    28be:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    28c0:	7e10      	ldrb	r0, [r2, #24]
    28c2:	0740      	lsls	r0, r0, #29
    28c4:	d5f4      	bpl.n	28b0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    28c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28c8:	2b00      	cmp	r3, #0
    28ca:	d1fc      	bne.n	28c6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    28cc:	8b53      	ldrh	r3, [r2, #26]
    28ce:	b2db      	uxtb	r3, r3
	if (error_code) {
    28d0:	0698      	lsls	r0, r3, #26
    28d2:	d01d      	beq.n	2910 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    28d4:	0798      	lsls	r0, r3, #30
    28d6:	d503      	bpl.n	28e0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    28d8:	2302      	movs	r3, #2
    28da:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    28dc:	3318      	adds	r3, #24
    28de:	e7e7      	b.n	28b0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    28e0:	0758      	lsls	r0, r3, #29
    28e2:	d503      	bpl.n	28ec <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    28e4:	2304      	movs	r3, #4
    28e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    28e8:	331a      	adds	r3, #26
    28ea:	e7e1      	b.n	28b0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    28ec:	07d8      	lsls	r0, r3, #31
    28ee:	d503      	bpl.n	28f8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    28f0:	2301      	movs	r3, #1
    28f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    28f4:	3312      	adds	r3, #18
    28f6:	e7db      	b.n	28b0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    28f8:	06d8      	lsls	r0, r3, #27
    28fa:	d503      	bpl.n	2904 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    28fc:	2310      	movs	r3, #16
    28fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2900:	3332      	adds	r3, #50	; 0x32
    2902:	e7d5      	b.n	28b0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2904:	069b      	lsls	r3, r3, #26
    2906:	d503      	bpl.n	2910 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2908:	2320      	movs	r3, #32
    290a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    290c:	3321      	adds	r3, #33	; 0x21
    290e:	e7cf      	b.n	28b0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2910:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2912:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2914:	2300      	movs	r3, #0
    2916:	e7cb      	b.n	28b0 <usart_read_wait+0x8>

00002918 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    291a:	0080      	lsls	r0, r0, #2
    291c:	4b62      	ldr	r3, [pc, #392]	; (2aa8 <_usart_interrupt_handler+0x190>)
    291e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2920:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2922:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2924:	2b00      	cmp	r3, #0
    2926:	d1fc      	bne.n	2922 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2928:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    292a:	7da6      	ldrb	r6, [r4, #22]
    292c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    292e:	2330      	movs	r3, #48	; 0x30
    2930:	5ceb      	ldrb	r3, [r5, r3]
    2932:	2231      	movs	r2, #49	; 0x31
    2934:	5caf      	ldrb	r7, [r5, r2]
    2936:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2938:	07f3      	lsls	r3, r6, #31
    293a:	d522      	bpl.n	2982 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    293c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    293e:	b29b      	uxth	r3, r3
    2940:	2b00      	cmp	r3, #0
    2942:	d01c      	beq.n	297e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2944:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2946:	7813      	ldrb	r3, [r2, #0]
    2948:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    294a:	1c51      	adds	r1, r2, #1
    294c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    294e:	7969      	ldrb	r1, [r5, #5]
    2950:	2901      	cmp	r1, #1
    2952:	d00e      	beq.n	2972 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2954:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2956:	05db      	lsls	r3, r3, #23
    2958:	0ddb      	lsrs	r3, r3, #23
    295a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    295c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    295e:	3b01      	subs	r3, #1
    2960:	b29b      	uxth	r3, r3
    2962:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2964:	2b00      	cmp	r3, #0
    2966:	d10c      	bne.n	2982 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2968:	3301      	adds	r3, #1
    296a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    296c:	3301      	adds	r3, #1
    296e:	75a3      	strb	r3, [r4, #22]
    2970:	e007      	b.n	2982 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2972:	7851      	ldrb	r1, [r2, #1]
    2974:	0209      	lsls	r1, r1, #8
    2976:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2978:	3202      	adds	r2, #2
    297a:	62aa      	str	r2, [r5, #40]	; 0x28
    297c:	e7eb      	b.n	2956 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    297e:	2301      	movs	r3, #1
    2980:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2982:	07b3      	lsls	r3, r6, #30
    2984:	d506      	bpl.n	2994 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2986:	2302      	movs	r3, #2
    2988:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    298a:	2200      	movs	r2, #0
    298c:	3331      	adds	r3, #49	; 0x31
    298e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2990:	07fb      	lsls	r3, r7, #31
    2992:	d41a      	bmi.n	29ca <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2994:	0773      	lsls	r3, r6, #29
    2996:	d565      	bpl.n	2a64 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2998:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    299a:	b29b      	uxth	r3, r3
    299c:	2b00      	cmp	r3, #0
    299e:	d05f      	beq.n	2a60 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29a0:	8b63      	ldrh	r3, [r4, #26]
    29a2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    29a4:	071a      	lsls	r2, r3, #28
    29a6:	d414      	bmi.n	29d2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29a8:	223f      	movs	r2, #63	; 0x3f
    29aa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    29ac:	2b00      	cmp	r3, #0
    29ae:	d034      	beq.n	2a1a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    29b0:	079a      	lsls	r2, r3, #30
    29b2:	d511      	bpl.n	29d8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    29b4:	221a      	movs	r2, #26
    29b6:	2332      	movs	r3, #50	; 0x32
    29b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    29ba:	3b30      	subs	r3, #48	; 0x30
    29bc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    29be:	077b      	lsls	r3, r7, #29
    29c0:	d550      	bpl.n	2a64 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    29c2:	0028      	movs	r0, r5
    29c4:	696b      	ldr	r3, [r5, #20]
    29c6:	4798      	blx	r3
    29c8:	e04c      	b.n	2a64 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    29ca:	0028      	movs	r0, r5
    29cc:	68eb      	ldr	r3, [r5, #12]
    29ce:	4798      	blx	r3
    29d0:	e7e0      	b.n	2994 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    29d2:	2237      	movs	r2, #55	; 0x37
    29d4:	4013      	ands	r3, r2
    29d6:	e7e9      	b.n	29ac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29d8:	075a      	lsls	r2, r3, #29
    29da:	d505      	bpl.n	29e8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    29dc:	221e      	movs	r2, #30
    29de:	2332      	movs	r3, #50	; 0x32
    29e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29e2:	3b2e      	subs	r3, #46	; 0x2e
    29e4:	8363      	strh	r3, [r4, #26]
    29e6:	e7ea      	b.n	29be <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    29e8:	07da      	lsls	r2, r3, #31
    29ea:	d505      	bpl.n	29f8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    29ec:	2213      	movs	r2, #19
    29ee:	2332      	movs	r3, #50	; 0x32
    29f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    29f2:	3b31      	subs	r3, #49	; 0x31
    29f4:	8363      	strh	r3, [r4, #26]
    29f6:	e7e2      	b.n	29be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    29f8:	06da      	lsls	r2, r3, #27
    29fa:	d505      	bpl.n	2a08 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    29fc:	2242      	movs	r2, #66	; 0x42
    29fe:	2332      	movs	r3, #50	; 0x32
    2a00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a02:	3b22      	subs	r3, #34	; 0x22
    2a04:	8363      	strh	r3, [r4, #26]
    2a06:	e7da      	b.n	29be <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a08:	2220      	movs	r2, #32
    2a0a:	421a      	tst	r2, r3
    2a0c:	d0d7      	beq.n	29be <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2a0e:	3221      	adds	r2, #33	; 0x21
    2a10:	2332      	movs	r3, #50	; 0x32
    2a12:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a14:	3b12      	subs	r3, #18
    2a16:	8363      	strh	r3, [r4, #26]
    2a18:	e7d1      	b.n	29be <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2a1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2a1c:	05db      	lsls	r3, r3, #23
    2a1e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2a20:	b2da      	uxtb	r2, r3
    2a22:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2a24:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2a26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2a28:	1c51      	adds	r1, r2, #1
    2a2a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a2c:	7969      	ldrb	r1, [r5, #5]
    2a2e:	2901      	cmp	r1, #1
    2a30:	d010      	beq.n	2a54 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2a32:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a34:	3b01      	subs	r3, #1
    2a36:	b29b      	uxth	r3, r3
    2a38:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d112      	bne.n	2a64 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2a3e:	3304      	adds	r3, #4
    2a40:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2a42:	2200      	movs	r2, #0
    2a44:	332e      	adds	r3, #46	; 0x2e
    2a46:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2a48:	07bb      	lsls	r3, r7, #30
    2a4a:	d50b      	bpl.n	2a64 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2a4c:	0028      	movs	r0, r5
    2a4e:	692b      	ldr	r3, [r5, #16]
    2a50:	4798      	blx	r3
    2a52:	e007      	b.n	2a64 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2a54:	0a1b      	lsrs	r3, r3, #8
    2a56:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2a58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2a5a:	3301      	adds	r3, #1
    2a5c:	626b      	str	r3, [r5, #36]	; 0x24
    2a5e:	e7e8      	b.n	2a32 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2a60:	2304      	movs	r3, #4
    2a62:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2a64:	06f3      	lsls	r3, r6, #27
    2a66:	d504      	bpl.n	2a72 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2a68:	2310      	movs	r3, #16
    2a6a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2a6c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2a6e:	06fb      	lsls	r3, r7, #27
    2a70:	d40e      	bmi.n	2a90 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2a72:	06b3      	lsls	r3, r6, #26
    2a74:	d504      	bpl.n	2a80 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2a76:	2320      	movs	r3, #32
    2a78:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2a7a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2a7c:	073b      	lsls	r3, r7, #28
    2a7e:	d40b      	bmi.n	2a98 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2a80:	0733      	lsls	r3, r6, #28
    2a82:	d504      	bpl.n	2a8e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2a84:	2308      	movs	r3, #8
    2a86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2a88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2a8a:	06bb      	lsls	r3, r7, #26
    2a8c:	d408      	bmi.n	2aa0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2a90:	0028      	movs	r0, r5
    2a92:	69eb      	ldr	r3, [r5, #28]
    2a94:	4798      	blx	r3
    2a96:	e7ec      	b.n	2a72 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2a98:	0028      	movs	r0, r5
    2a9a:	69ab      	ldr	r3, [r5, #24]
    2a9c:	4798      	blx	r3
    2a9e:	e7ef      	b.n	2a80 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2aa0:	6a2b      	ldr	r3, [r5, #32]
    2aa2:	0028      	movs	r0, r5
    2aa4:	4798      	blx	r3
}
    2aa6:	e7f2      	b.n	2a8e <_usart_interrupt_handler+0x176>
    2aa8:	20000388 	.word	0x20000388

00002aac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2aac:	b510      	push	{r4, lr}
	switch (clock_source) {
    2aae:	2808      	cmp	r0, #8
    2ab0:	d803      	bhi.n	2aba <system_clock_source_get_hz+0xe>
    2ab2:	0080      	lsls	r0, r0, #2
    2ab4:	4b1e      	ldr	r3, [pc, #120]	; (2b30 <system_clock_source_get_hz+0x84>)
    2ab6:	581b      	ldr	r3, [r3, r0]
    2ab8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2aba:	2000      	movs	r0, #0
    2abc:	e036      	b.n	2b2c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    2abe:	4b1d      	ldr	r3, [pc, #116]	; (2b34 <system_clock_source_get_hz+0x88>)
    2ac0:	6918      	ldr	r0, [r3, #16]
    2ac2:	e033      	b.n	2b2c <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2ac4:	4b1c      	ldr	r3, [pc, #112]	; (2b38 <system_clock_source_get_hz+0x8c>)
    2ac6:	6a1b      	ldr	r3, [r3, #32]
    2ac8:	059b      	lsls	r3, r3, #22
    2aca:	0f9b      	lsrs	r3, r3, #30
    2acc:	481b      	ldr	r0, [pc, #108]	; (2b3c <system_clock_source_get_hz+0x90>)
    2ace:	40d8      	lsrs	r0, r3
    2ad0:	e02c      	b.n	2b2c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2ad2:	4b18      	ldr	r3, [pc, #96]	; (2b34 <system_clock_source_get_hz+0x88>)
    2ad4:	6958      	ldr	r0, [r3, #20]
    2ad6:	e029      	b.n	2b2c <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ad8:	4b16      	ldr	r3, [pc, #88]	; (2b34 <system_clock_source_get_hz+0x88>)
    2ada:	681b      	ldr	r3, [r3, #0]
			return 0;
    2adc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ade:	079b      	lsls	r3, r3, #30
    2ae0:	d524      	bpl.n	2b2c <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ae2:	4915      	ldr	r1, [pc, #84]	; (2b38 <system_clock_source_get_hz+0x8c>)
    2ae4:	2210      	movs	r2, #16
    2ae6:	68cb      	ldr	r3, [r1, #12]
    2ae8:	421a      	tst	r2, r3
    2aea:	d0fc      	beq.n	2ae6 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2aec:	4b11      	ldr	r3, [pc, #68]	; (2b34 <system_clock_source_get_hz+0x88>)
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	075b      	lsls	r3, r3, #29
    2af2:	d401      	bmi.n	2af8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2af4:	4812      	ldr	r0, [pc, #72]	; (2b40 <system_clock_source_get_hz+0x94>)
    2af6:	e019      	b.n	2b2c <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2af8:	4b0e      	ldr	r3, [pc, #56]	; (2b34 <system_clock_source_get_hz+0x88>)
    2afa:	681b      	ldr	r3, [r3, #0]
    2afc:	069b      	lsls	r3, r3, #26
    2afe:	d501      	bpl.n	2b04 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2b00:	480f      	ldr	r0, [pc, #60]	; (2b40 <system_clock_source_get_hz+0x94>)
    2b02:	e013      	b.n	2b2c <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2b04:	2000      	movs	r0, #0
    2b06:	4b0f      	ldr	r3, [pc, #60]	; (2b44 <system_clock_source_get_hz+0x98>)
    2b08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2b0a:	4b0a      	ldr	r3, [pc, #40]	; (2b34 <system_clock_source_get_hz+0x88>)
    2b0c:	689b      	ldr	r3, [r3, #8]
    2b0e:	041b      	lsls	r3, r3, #16
    2b10:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2b12:	4358      	muls	r0, r3
    2b14:	e00a      	b.n	2b2c <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2b16:	2350      	movs	r3, #80	; 0x50
    2b18:	4a07      	ldr	r2, [pc, #28]	; (2b38 <system_clock_source_get_hz+0x8c>)
    2b1a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2b1c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2b1e:	075b      	lsls	r3, r3, #29
    2b20:	d504      	bpl.n	2b2c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <system_clock_source_get_hz+0x88>)
    2b24:	68d8      	ldr	r0, [r3, #12]
    2b26:	e001      	b.n	2b2c <system_clock_source_get_hz+0x80>
		return 32768UL;
    2b28:	2080      	movs	r0, #128	; 0x80
    2b2a:	0200      	lsls	r0, r0, #8
	}
}
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	0000a9b4 	.word	0x0000a9b4
    2b34:	20000244 	.word	0x20000244
    2b38:	40000800 	.word	0x40000800
    2b3c:	007a1200 	.word	0x007a1200
    2b40:	02dc6c00 	.word	0x02dc6c00
    2b44:	00008b71 	.word	0x00008b71

00002b48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2b48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2b4a:	490c      	ldr	r1, [pc, #48]	; (2b7c <system_clock_source_osc8m_set_config+0x34>)
    2b4c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2b4e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2b50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2b52:	7840      	ldrb	r0, [r0, #1]
    2b54:	2201      	movs	r2, #1
    2b56:	4010      	ands	r0, r2
    2b58:	0180      	lsls	r0, r0, #6
    2b5a:	2640      	movs	r6, #64	; 0x40
    2b5c:	43b3      	bics	r3, r6
    2b5e:	4303      	orrs	r3, r0
    2b60:	402a      	ands	r2, r5
    2b62:	01d2      	lsls	r2, r2, #7
    2b64:	2080      	movs	r0, #128	; 0x80
    2b66:	4383      	bics	r3, r0
    2b68:	4313      	orrs	r3, r2
    2b6a:	2203      	movs	r2, #3
    2b6c:	4022      	ands	r2, r4
    2b6e:	0212      	lsls	r2, r2, #8
    2b70:	4803      	ldr	r0, [pc, #12]	; (2b80 <system_clock_source_osc8m_set_config+0x38>)
    2b72:	4003      	ands	r3, r0
    2b74:	4313      	orrs	r3, r2
    2b76:	620b      	str	r3, [r1, #32]
}
    2b78:	bd70      	pop	{r4, r5, r6, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	40000800 	.word	0x40000800
    2b80:	fffffcff 	.word	0xfffffcff

00002b84 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b86:	46ce      	mov	lr, r9
    2b88:	4647      	mov	r7, r8
    2b8a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2b8c:	4b19      	ldr	r3, [pc, #100]	; (2bf4 <system_clock_source_osc32k_set_config+0x70>)
    2b8e:	4699      	mov	r9, r3
    2b90:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2b92:	7841      	ldrb	r1, [r0, #1]
    2b94:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2b96:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2b98:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2b9a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2b9c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2b9e:	7880      	ldrb	r0, [r0, #2]
    2ba0:	2101      	movs	r1, #1
    2ba2:	4008      	ands	r0, r1
    2ba4:	0080      	lsls	r0, r0, #2
    2ba6:	2204      	movs	r2, #4
    2ba8:	4393      	bics	r3, r2
    2baa:	4303      	orrs	r3, r0
    2bac:	4660      	mov	r0, ip
    2bae:	4008      	ands	r0, r1
    2bb0:	00c0      	lsls	r0, r0, #3
    2bb2:	3204      	adds	r2, #4
    2bb4:	4393      	bics	r3, r2
    2bb6:	4303      	orrs	r3, r0
    2bb8:	0038      	movs	r0, r7
    2bba:	4008      	ands	r0, r1
    2bbc:	0180      	lsls	r0, r0, #6
    2bbe:	2740      	movs	r7, #64	; 0x40
    2bc0:	43bb      	bics	r3, r7
    2bc2:	4303      	orrs	r3, r0
    2bc4:	0030      	movs	r0, r6
    2bc6:	4008      	ands	r0, r1
    2bc8:	01c0      	lsls	r0, r0, #7
    2bca:	2680      	movs	r6, #128	; 0x80
    2bcc:	43b3      	bics	r3, r6
    2bce:	4303      	orrs	r3, r0
    2bd0:	2007      	movs	r0, #7
    2bd2:	4005      	ands	r5, r0
    2bd4:	022d      	lsls	r5, r5, #8
    2bd6:	4808      	ldr	r0, [pc, #32]	; (2bf8 <system_clock_source_osc32k_set_config+0x74>)
    2bd8:	4003      	ands	r3, r0
    2bda:	432b      	orrs	r3, r5
    2bdc:	4021      	ands	r1, r4
    2bde:	0309      	lsls	r1, r1, #12
    2be0:	4806      	ldr	r0, [pc, #24]	; (2bfc <system_clock_source_osc32k_set_config+0x78>)
    2be2:	4003      	ands	r3, r0
    2be4:	430b      	orrs	r3, r1
    2be6:	464a      	mov	r2, r9
    2be8:	6193      	str	r3, [r2, #24]
}
    2bea:	bc0c      	pop	{r2, r3}
    2bec:	4690      	mov	r8, r2
    2bee:	4699      	mov	r9, r3
    2bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	40000800 	.word	0x40000800
    2bf8:	fffff8ff 	.word	0xfffff8ff
    2bfc:	ffffefff 	.word	0xffffefff

00002c00 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2c00:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2c02:	7a03      	ldrb	r3, [r0, #8]
    2c04:	069b      	lsls	r3, r3, #26
    2c06:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2c08:	8942      	ldrh	r2, [r0, #10]
    2c0a:	0592      	lsls	r2, r2, #22
    2c0c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2c0e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2c10:	4918      	ldr	r1, [pc, #96]	; (2c74 <system_clock_source_dfll_set_config+0x74>)
    2c12:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2c14:	7983      	ldrb	r3, [r0, #6]
    2c16:	79c2      	ldrb	r2, [r0, #7]
    2c18:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2c1a:	8842      	ldrh	r2, [r0, #2]
    2c1c:	8884      	ldrh	r4, [r0, #4]
    2c1e:	4322      	orrs	r2, r4
    2c20:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2c22:	7842      	ldrb	r2, [r0, #1]
    2c24:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2c26:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2c28:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2c2a:	7803      	ldrb	r3, [r0, #0]
    2c2c:	2b04      	cmp	r3, #4
    2c2e:	d011      	beq.n	2c54 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2c30:	2b20      	cmp	r3, #32
    2c32:	d10e      	bne.n	2c52 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2c34:	7b03      	ldrb	r3, [r0, #12]
    2c36:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2c38:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2c3a:	4313      	orrs	r3, r2
    2c3c:	89c2      	ldrh	r2, [r0, #14]
    2c3e:	0412      	lsls	r2, r2, #16
    2c40:	490d      	ldr	r1, [pc, #52]	; (2c78 <system_clock_source_dfll_set_config+0x78>)
    2c42:	400a      	ands	r2, r1
    2c44:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2c46:	4a0b      	ldr	r2, [pc, #44]	; (2c74 <system_clock_source_dfll_set_config+0x74>)
    2c48:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2c4a:	6811      	ldr	r1, [r2, #0]
    2c4c:	4b0b      	ldr	r3, [pc, #44]	; (2c7c <system_clock_source_dfll_set_config+0x7c>)
    2c4e:	430b      	orrs	r3, r1
    2c50:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2c52:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2c54:	7b03      	ldrb	r3, [r0, #12]
    2c56:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2c58:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2c5a:	4313      	orrs	r3, r2
    2c5c:	89c2      	ldrh	r2, [r0, #14]
    2c5e:	0412      	lsls	r2, r2, #16
    2c60:	4905      	ldr	r1, [pc, #20]	; (2c78 <system_clock_source_dfll_set_config+0x78>)
    2c62:	400a      	ands	r2, r1
    2c64:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2c66:	4a03      	ldr	r2, [pc, #12]	; (2c74 <system_clock_source_dfll_set_config+0x74>)
    2c68:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2c6a:	6813      	ldr	r3, [r2, #0]
    2c6c:	2104      	movs	r1, #4
    2c6e:	430b      	orrs	r3, r1
    2c70:	6013      	str	r3, [r2, #0]
    2c72:	e7ee      	b.n	2c52 <system_clock_source_dfll_set_config+0x52>
    2c74:	20000244 	.word	0x20000244
    2c78:	03ff0000 	.word	0x03ff0000
    2c7c:	00000424 	.word	0x00000424

00002c80 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2c80:	2808      	cmp	r0, #8
    2c82:	d803      	bhi.n	2c8c <system_clock_source_enable+0xc>
    2c84:	0080      	lsls	r0, r0, #2
    2c86:	4b25      	ldr	r3, [pc, #148]	; (2d1c <system_clock_source_enable+0x9c>)
    2c88:	581b      	ldr	r3, [r3, r0]
    2c8a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2c8c:	2017      	movs	r0, #23
    2c8e:	e044      	b.n	2d1a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2c90:	4a23      	ldr	r2, [pc, #140]	; (2d20 <system_clock_source_enable+0xa0>)
    2c92:	6a13      	ldr	r3, [r2, #32]
    2c94:	2102      	movs	r1, #2
    2c96:	430b      	orrs	r3, r1
    2c98:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2c9a:	2000      	movs	r0, #0
    2c9c:	e03d      	b.n	2d1a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2c9e:	4a20      	ldr	r2, [pc, #128]	; (2d20 <system_clock_source_enable+0xa0>)
    2ca0:	6993      	ldr	r3, [r2, #24]
    2ca2:	2102      	movs	r1, #2
    2ca4:	430b      	orrs	r3, r1
    2ca6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2ca8:	2000      	movs	r0, #0
		break;
    2caa:	e036      	b.n	2d1a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2cac:	4a1c      	ldr	r2, [pc, #112]	; (2d20 <system_clock_source_enable+0xa0>)
    2cae:	8a13      	ldrh	r3, [r2, #16]
    2cb0:	2102      	movs	r1, #2
    2cb2:	430b      	orrs	r3, r1
    2cb4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2cb6:	2000      	movs	r0, #0
		break;
    2cb8:	e02f      	b.n	2d1a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2cba:	4a19      	ldr	r2, [pc, #100]	; (2d20 <system_clock_source_enable+0xa0>)
    2cbc:	8a93      	ldrh	r3, [r2, #20]
    2cbe:	2102      	movs	r1, #2
    2cc0:	430b      	orrs	r3, r1
    2cc2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2cc4:	2000      	movs	r0, #0
		break;
    2cc6:	e028      	b.n	2d1a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2cc8:	4916      	ldr	r1, [pc, #88]	; (2d24 <system_clock_source_enable+0xa4>)
    2cca:	680b      	ldr	r3, [r1, #0]
    2ccc:	2202      	movs	r2, #2
    2cce:	4313      	orrs	r3, r2
    2cd0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2cd2:	4b13      	ldr	r3, [pc, #76]	; (2d20 <system_clock_source_enable+0xa0>)
    2cd4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2cd6:	0019      	movs	r1, r3
    2cd8:	320e      	adds	r2, #14
    2cda:	68cb      	ldr	r3, [r1, #12]
    2cdc:	421a      	tst	r2, r3
    2cde:	d0fc      	beq.n	2cda <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2ce0:	4a10      	ldr	r2, [pc, #64]	; (2d24 <system_clock_source_enable+0xa4>)
    2ce2:	6891      	ldr	r1, [r2, #8]
    2ce4:	4b0e      	ldr	r3, [pc, #56]	; (2d20 <system_clock_source_enable+0xa0>)
    2ce6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2ce8:	6852      	ldr	r2, [r2, #4]
    2cea:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2cec:	2200      	movs	r2, #0
    2cee:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2cf0:	0019      	movs	r1, r3
    2cf2:	3210      	adds	r2, #16
    2cf4:	68cb      	ldr	r3, [r1, #12]
    2cf6:	421a      	tst	r2, r3
    2cf8:	d0fc      	beq.n	2cf4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2cfa:	4b0a      	ldr	r3, [pc, #40]	; (2d24 <system_clock_source_enable+0xa4>)
    2cfc:	681b      	ldr	r3, [r3, #0]
    2cfe:	b29b      	uxth	r3, r3
    2d00:	4a07      	ldr	r2, [pc, #28]	; (2d20 <system_clock_source_enable+0xa0>)
    2d02:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2d04:	2000      	movs	r0, #0
    2d06:	e008      	b.n	2d1a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2d08:	4905      	ldr	r1, [pc, #20]	; (2d20 <system_clock_source_enable+0xa0>)
    2d0a:	2244      	movs	r2, #68	; 0x44
    2d0c:	5c8b      	ldrb	r3, [r1, r2]
    2d0e:	2002      	movs	r0, #2
    2d10:	4303      	orrs	r3, r0
    2d12:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2d14:	2000      	movs	r0, #0
		break;
    2d16:	e000      	b.n	2d1a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2d18:	2000      	movs	r0, #0
}
    2d1a:	4770      	bx	lr
    2d1c:	0000a9d8 	.word	0x0000a9d8
    2d20:	40000800 	.word	0x40000800
    2d24:	20000244 	.word	0x20000244

00002d28 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2d28:	b570      	push	{r4, r5, r6, lr}
    2d2a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2d2c:	22c2      	movs	r2, #194	; 0xc2
    2d2e:	00d2      	lsls	r2, r2, #3
    2d30:	4b42      	ldr	r3, [pc, #264]	; (2e3c <system_clock_init+0x114>)
    2d32:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2d34:	4a42      	ldr	r2, [pc, #264]	; (2e40 <system_clock_init+0x118>)
    2d36:	6853      	ldr	r3, [r2, #4]
    2d38:	211e      	movs	r1, #30
    2d3a:	438b      	bics	r3, r1
    2d3c:	391a      	subs	r1, #26
    2d3e:	430b      	orrs	r3, r1
    2d40:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2d42:	2201      	movs	r2, #1
    2d44:	ab01      	add	r3, sp, #4
    2d46:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2d48:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2d4a:	4d3e      	ldr	r5, [pc, #248]	; (2e44 <system_clock_init+0x11c>)
    2d4c:	b2e0      	uxtb	r0, r4
    2d4e:	a901      	add	r1, sp, #4
    2d50:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2d52:	3401      	adds	r4, #1
    2d54:	2c25      	cmp	r4, #37	; 0x25
    2d56:	d1f9      	bne.n	2d4c <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2d58:	4c3b      	ldr	r4, [pc, #236]	; (2e48 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2d5a:	6823      	ldr	r3, [r4, #0]
    2d5c:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2d5e:	4937      	ldr	r1, [pc, #220]	; (2e3c <system_clock_init+0x114>)
    2d60:	698a      	ldr	r2, [r1, #24]
    2d62:	0e5b      	lsrs	r3, r3, #25
    2d64:	041b      	lsls	r3, r3, #16
    2d66:	4839      	ldr	r0, [pc, #228]	; (2e4c <system_clock_init+0x124>)
    2d68:	4002      	ands	r2, r0
    2d6a:	4313      	orrs	r3, r2
    2d6c:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2d6e:	a80a      	add	r0, sp, #40	; 0x28
    2d70:	2301      	movs	r3, #1
    2d72:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2d74:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2d76:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2d78:	2207      	movs	r2, #7
    2d7a:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2d7c:	2500      	movs	r5, #0
    2d7e:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2d80:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2d82:	4b33      	ldr	r3, [pc, #204]	; (2e50 <system_clock_init+0x128>)
    2d84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2d86:	2004      	movs	r0, #4
    2d88:	4b32      	ldr	r3, [pc, #200]	; (2e54 <system_clock_init+0x12c>)
    2d8a:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2d8c:	ab05      	add	r3, sp, #20
    2d8e:	2200      	movs	r2, #0
    2d90:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2d92:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2d94:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2d96:	2120      	movs	r1, #32
    2d98:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2d9a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2d9c:	6823      	ldr	r3, [r4, #0]
    2d9e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2da0:	2b3f      	cmp	r3, #63	; 0x3f
    2da2:	d049      	beq.n	2e38 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2da4:	a805      	add	r0, sp, #20
    2da6:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2da8:	2307      	movs	r3, #7
    2daa:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2dac:	3303      	adds	r3, #3
    2dae:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2db0:	4b29      	ldr	r3, [pc, #164]	; (2e58 <system_clock_init+0x130>)
    2db2:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2db4:	3bff      	subs	r3, #255	; 0xff
    2db6:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2db8:	4b28      	ldr	r3, [pc, #160]	; (2e5c <system_clock_init+0x134>)
    2dba:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2dbc:	4b28      	ldr	r3, [pc, #160]	; (2e60 <system_clock_init+0x138>)
    2dbe:	4798      	blx	r3
	config->run_in_standby  = false;
    2dc0:	a804      	add	r0, sp, #16
    2dc2:	2400      	movs	r4, #0
    2dc4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2dc6:	2501      	movs	r5, #1
    2dc8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2dca:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2dcc:	4b25      	ldr	r3, [pc, #148]	; (2e64 <system_clock_init+0x13c>)
    2dce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2dd0:	2006      	movs	r0, #6
    2dd2:	4e20      	ldr	r6, [pc, #128]	; (2e54 <system_clock_init+0x12c>)
    2dd4:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2dd6:	4b24      	ldr	r3, [pc, #144]	; (2e68 <system_clock_init+0x140>)
    2dd8:	4798      	blx	r3
	config->division_factor    = 1;
    2dda:	a901      	add	r1, sp, #4
    2ddc:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2dde:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    2de0:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2de2:	2304      	movs	r3, #4
    2de4:	700b      	strb	r3, [r1, #0]
    2de6:	720d      	strb	r5, [r1, #8]
    2de8:	2007      	movs	r0, #7
    2dea:	4b20      	ldr	r3, [pc, #128]	; (2e6c <system_clock_init+0x144>)
    2dec:	4798      	blx	r3
    2dee:	2007      	movs	r0, #7
    2df0:	4b1f      	ldr	r3, [pc, #124]	; (2e70 <system_clock_init+0x148>)
    2df2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2df4:	2007      	movs	r0, #7
    2df6:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2df8:	4910      	ldr	r1, [pc, #64]	; (2e3c <system_clock_init+0x114>)
    2dfa:	2210      	movs	r2, #16
    2dfc:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2dfe:	421a      	tst	r2, r3
    2e00:	d0fc      	beq.n	2dfc <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2e02:	4a0e      	ldr	r2, [pc, #56]	; (2e3c <system_clock_init+0x114>)
    2e04:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2e06:	2180      	movs	r1, #128	; 0x80
    2e08:	430b      	orrs	r3, r1
    2e0a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2e0c:	4a19      	ldr	r2, [pc, #100]	; (2e74 <system_clock_init+0x14c>)
    2e0e:	2300      	movs	r3, #0
    2e10:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2e12:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2e14:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2e16:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2e18:	a901      	add	r1, sp, #4
    2e1a:	2201      	movs	r2, #1
    2e1c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2e1e:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2e20:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2e22:	3307      	adds	r3, #7
    2e24:	700b      	strb	r3, [r1, #0]
    2e26:	720a      	strb	r2, [r1, #8]
    2e28:	2000      	movs	r0, #0
    2e2a:	4b10      	ldr	r3, [pc, #64]	; (2e6c <system_clock_init+0x144>)
    2e2c:	4798      	blx	r3
    2e2e:	2000      	movs	r0, #0
    2e30:	4b0f      	ldr	r3, [pc, #60]	; (2e70 <system_clock_init+0x148>)
    2e32:	4798      	blx	r3
#endif
}
    2e34:	b00c      	add	sp, #48	; 0x30
    2e36:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    2e38:	3b20      	subs	r3, #32
    2e3a:	e7b3      	b.n	2da4 <system_clock_init+0x7c>
    2e3c:	40000800 	.word	0x40000800
    2e40:	41004000 	.word	0x41004000
    2e44:	00008b55 	.word	0x00008b55
    2e48:	00806024 	.word	0x00806024
    2e4c:	ff80ffff 	.word	0xff80ffff
    2e50:	00002b85 	.word	0x00002b85
    2e54:	00002c81 	.word	0x00002c81
    2e58:	000001ff 	.word	0x000001ff
    2e5c:	ffffbb80 	.word	0xffffbb80
    2e60:	00002c01 	.word	0x00002c01
    2e64:	00002b49 	.word	0x00002b49
    2e68:	0000891d 	.word	0x0000891d
    2e6c:	00008941 	.word	0x00008941
    2e70:	000089f9 	.word	0x000089f9
    2e74:	40000400 	.word	0x40000400

00002e78 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2e78:	b510      	push	{r4, lr}
    2e7a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2e7c:	ab03      	add	r3, sp, #12
    2e7e:	2200      	movs	r2, #0
    2e80:	701a      	strb	r2, [r3, #0]
    2e82:	3203      	adds	r2, #3
    2e84:	705a      	strb	r2, [r3, #1]
    2e86:	3a01      	subs	r2, #1
    2e88:	709a      	strb	r2, [r3, #2]
    2e8a:	3a01      	subs	r2, #1
    2e8c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2e8e:	4b27      	ldr	r3, [pc, #156]	; (2f2c <udd_sleep_mode+0xb4>)
    2e90:	781b      	ldrb	r3, [r3, #0]
    2e92:	4283      	cmp	r3, r0
    2e94:	d007      	beq.n	2ea6 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2e96:	2800      	cmp	r0, #0
    2e98:	d107      	bne.n	2eaa <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2e9a:	4b24      	ldr	r3, [pc, #144]	; (2f2c <udd_sleep_mode+0xb4>)
    2e9c:	781b      	ldrb	r3, [r3, #0]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d123      	bne.n	2eea <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2ea2:	4b22      	ldr	r3, [pc, #136]	; (2f2c <udd_sleep_mode+0xb4>)
    2ea4:	7018      	strb	r0, [r3, #0]
}
    2ea6:	b004      	add	sp, #16
    2ea8:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2eaa:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2eac:	5c1b      	ldrb	r3, [r3, r0]
    2eae:	4a20      	ldr	r2, [pc, #128]	; (2f30 <udd_sleep_mode+0xb8>)
    2eb0:	5cd2      	ldrb	r2, [r2, r3]
    2eb2:	2aff      	cmp	r2, #255	; 0xff
    2eb4:	d100      	bne.n	2eb8 <udd_sleep_mode+0x40>
    2eb6:	e7fe      	b.n	2eb6 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2eb8:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2ebc:	4251      	negs	r1, r2
    2ebe:	414a      	adcs	r2, r1
    2ec0:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2ec2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2ec4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2ec8:	2100      	movs	r1, #0
    2eca:	4a1a      	ldr	r2, [pc, #104]	; (2f34 <udd_sleep_mode+0xbc>)
    2ecc:	7011      	strb	r1, [r2, #0]
	return flags;
    2ece:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2ed0:	4917      	ldr	r1, [pc, #92]	; (2f30 <udd_sleep_mode+0xb8>)
    2ed2:	5cca      	ldrb	r2, [r1, r3]
    2ed4:	3201      	adds	r2, #1
    2ed6:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2ed8:	2c00      	cmp	r4, #0
    2eda:	d0de      	beq.n	2e9a <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2edc:	2201      	movs	r2, #1
    2ede:	4b15      	ldr	r3, [pc, #84]	; (2f34 <udd_sleep_mode+0xbc>)
    2ee0:	701a      	strb	r2, [r3, #0]
    2ee2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2ee6:	b662      	cpsie	i
    2ee8:	e7d7      	b.n	2e9a <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2eea:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2eec:	5cd3      	ldrb	r3, [r2, r3]
    2eee:	4a10      	ldr	r2, [pc, #64]	; (2f30 <udd_sleep_mode+0xb8>)
    2ef0:	5cd2      	ldrb	r2, [r2, r3]
    2ef2:	2a00      	cmp	r2, #0
    2ef4:	d100      	bne.n	2ef8 <udd_sleep_mode+0x80>
    2ef6:	e7fe      	b.n	2ef6 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2ef8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2efc:	4251      	negs	r1, r2
    2efe:	414a      	adcs	r2, r1
    2f00:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2f02:	b672      	cpsid	i
    2f04:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2f08:	2100      	movs	r1, #0
    2f0a:	4a0a      	ldr	r2, [pc, #40]	; (2f34 <udd_sleep_mode+0xbc>)
    2f0c:	7011      	strb	r1, [r2, #0]
	return flags;
    2f0e:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2f10:	4907      	ldr	r1, [pc, #28]	; (2f30 <udd_sleep_mode+0xb8>)
    2f12:	5cca      	ldrb	r2, [r1, r3]
    2f14:	3a01      	subs	r2, #1
    2f16:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2f18:	2c00      	cmp	r4, #0
    2f1a:	d0c2      	beq.n	2ea2 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2f1c:	2201      	movs	r2, #1
    2f1e:	4b05      	ldr	r3, [pc, #20]	; (2f34 <udd_sleep_mode+0xbc>)
    2f20:	701a      	strb	r2, [r3, #0]
    2f22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f26:	b662      	cpsie	i
    2f28:	e7bb      	b.n	2ea2 <udd_sleep_mode+0x2a>
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	200002b4 	.word	0x200002b4
    2f30:	20001b98 	.word	0x20001b98
    2f34:	20000125 	.word	0x20000125

00002f38 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2f38:	0643      	lsls	r3, r0, #25
    2f3a:	d00b      	beq.n	2f54 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2f3c:	230f      	movs	r3, #15
    2f3e:	4003      	ands	r3, r0
    2f40:	005b      	lsls	r3, r3, #1
    2f42:	09c0      	lsrs	r0, r0, #7
    2f44:	1818      	adds	r0, r3, r0
    2f46:	3802      	subs	r0, #2
    2f48:	0083      	lsls	r3, r0, #2
    2f4a:	1818      	adds	r0, r3, r0
    2f4c:	0080      	lsls	r0, r0, #2
    2f4e:	4b02      	ldr	r3, [pc, #8]	; (2f58 <udd_ep_get_job+0x20>)
    2f50:	1818      	adds	r0, r3, r0
	}
}
    2f52:	4770      	bx	lr
		return NULL;
    2f54:	2000      	movs	r0, #0
    2f56:	e7fc      	b.n	2f52 <udd_ep_get_job+0x1a>
    2f58:	20000264 	.word	0x20000264

00002f5c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f5e:	46d6      	mov	lr, sl
    2f60:	464f      	mov	r7, r9
    2f62:	4646      	mov	r6, r8
    2f64:	b5c0      	push	{r6, r7, lr}
    2f66:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2f68:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2f6a:	b26b      	sxtb	r3, r5
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	db26      	blt.n	2fbe <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2f70:	0028      	movs	r0, r5
    2f72:	4b5e      	ldr	r3, [pc, #376]	; (30ec <udd_ep_transfer_process+0x190>)
    2f74:	4798      	blx	r3
    2f76:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2f78:	270f      	movs	r7, #15
    2f7a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2f7c:	8a03      	ldrh	r3, [r0, #16]
    2f7e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2f80:	464b      	mov	r3, r9
    2f82:	881b      	ldrh	r3, [r3, #0]
    2f84:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2f86:	7c83      	ldrb	r3, [r0, #18]
    2f88:	075b      	lsls	r3, r3, #29
    2f8a:	d46a      	bmi.n	3062 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2f8c:	68e3      	ldr	r3, [r4, #12]
    2f8e:	4453      	add	r3, sl
    2f90:	001e      	movs	r6, r3
    2f92:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2f94:	68a3      	ldr	r3, [r4, #8]
    2f96:	429e      	cmp	r6, r3
    2f98:	d800      	bhi.n	2f9c <udd_ep_transfer_process+0x40>
    2f9a:	e074      	b.n	3086 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2f9c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2f9e:	7ca3      	ldrb	r3, [r4, #18]
    2fa0:	2201      	movs	r2, #1
    2fa2:	4393      	bics	r3, r2
    2fa4:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2fa6:	6823      	ldr	r3, [r4, #0]
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d003      	beq.n	2fb4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2fac:	68e1      	ldr	r1, [r4, #12]
    2fae:	002a      	movs	r2, r5
    2fb0:	2000      	movs	r0, #0
    2fb2:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2fb4:	bc1c      	pop	{r2, r3, r4}
    2fb6:	4690      	mov	r8, r2
    2fb8:	4699      	mov	r9, r3
    2fba:	46a2      	mov	sl, r4
    2fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2fbe:	0028      	movs	r0, r5
    2fc0:	4b4a      	ldr	r3, [pc, #296]	; (30ec <udd_ep_transfer_process+0x190>)
    2fc2:	4798      	blx	r3
    2fc4:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2fc6:	270f      	movs	r7, #15
    2fc8:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2fca:	8a03      	ldrh	r3, [r0, #16]
    2fcc:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2fce:	464b      	mov	r3, r9
    2fd0:	885e      	ldrh	r6, [r3, #2]
    2fd2:	68c3      	ldr	r3, [r0, #12]
    2fd4:	469c      	mov	ip, r3
    2fd6:	4466      	add	r6, ip
    2fd8:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2fda:	6881      	ldr	r1, [r0, #8]
    2fdc:	428e      	cmp	r6, r1
    2fde:	d025      	beq.n	302c <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2fe0:	1b8d      	subs	r5, r1, r6
    2fe2:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2fe4:	4b42      	ldr	r3, [pc, #264]	; (30f0 <udd_ep_transfer_process+0x194>)
    2fe6:	429d      	cmp	r5, r3
    2fe8:	d906      	bls.n	2ff8 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2fea:	001d      	movs	r5, r3
    2fec:	4641      	mov	r1, r8
    2fee:	0018      	movs	r0, r3
    2ff0:	4b40      	ldr	r3, [pc, #256]	; (30f4 <udd_ep_transfer_process+0x198>)
    2ff2:	4798      	blx	r3
    2ff4:	1a6d      	subs	r5, r5, r1
    2ff6:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2ff8:	7ca2      	ldrb	r2, [r4, #18]
    2ffa:	2300      	movs	r3, #0
    2ffc:	0792      	lsls	r2, r2, #30
    2ffe:	d507      	bpl.n	3010 <udd_ep_transfer_process+0xb4>
    3000:	4641      	mov	r1, r8
    3002:	0028      	movs	r0, r5
    3004:	4b3c      	ldr	r3, [pc, #240]	; (30f8 <udd_ep_transfer_process+0x19c>)
    3006:	4798      	blx	r3
    3008:	b289      	uxth	r1, r1
    300a:	424b      	negs	r3, r1
    300c:	414b      	adcs	r3, r1
    300e:	b2db      	uxtb	r3, r3
    3010:	005b      	lsls	r3, r3, #1
    3012:	7ca2      	ldrb	r2, [r4, #18]
    3014:	2102      	movs	r1, #2
    3016:	438a      	bics	r2, r1
    3018:	4313      	orrs	r3, r2
    301a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    301c:	6862      	ldr	r2, [r4, #4]
    301e:	1992      	adds	r2, r2, r6
    3020:	002b      	movs	r3, r5
    3022:	0039      	movs	r1, r7
    3024:	4835      	ldr	r0, [pc, #212]	; (30fc <udd_ep_transfer_process+0x1a0>)
    3026:	4c36      	ldr	r4, [pc, #216]	; (3100 <udd_ep_transfer_process+0x1a4>)
    3028:	47a0      	blx	r4
    302a:	e7c3      	b.n	2fb4 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    302c:	7c83      	ldrb	r3, [r0, #18]
    302e:	079b      	lsls	r3, r3, #30
    3030:	d40b      	bmi.n	304a <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    3032:	7c83      	ldrb	r3, [r0, #18]
    3034:	2201      	movs	r2, #1
    3036:	4393      	bics	r3, r2
    3038:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    303a:	6803      	ldr	r3, [r0, #0]
    303c:	2b00      	cmp	r3, #0
    303e:	d0b9      	beq.n	2fb4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3040:	002a      	movs	r2, r5
    3042:	0031      	movs	r1, r6
    3044:	2000      	movs	r0, #0
    3046:	4798      	blx	r3
    3048:	e7b4      	b.n	2fb4 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    304a:	7c83      	ldrb	r3, [r0, #18]
    304c:	2202      	movs	r2, #2
    304e:	4393      	bics	r3, r2
    3050:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3052:	6842      	ldr	r2, [r0, #4]
    3054:	1992      	adds	r2, r2, r6
    3056:	2300      	movs	r3, #0
    3058:	0039      	movs	r1, r7
    305a:	4828      	ldr	r0, [pc, #160]	; (30fc <udd_ep_transfer_process+0x1a0>)
    305c:	4c28      	ldr	r4, [pc, #160]	; (3100 <udd_ep_transfer_process+0x1a4>)
    305e:	47a0      	blx	r4
    3060:	e7a8      	b.n	2fb4 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    3062:	6843      	ldr	r3, [r0, #4]
    3064:	68c2      	ldr	r2, [r0, #12]
    3066:	4694      	mov	ip, r2
    3068:	4463      	add	r3, ip
    306a:	001e      	movs	r6, r3
    306c:	4641      	mov	r1, r8
    306e:	6880      	ldr	r0, [r0, #8]
    3070:	4b21      	ldr	r3, [pc, #132]	; (30f8 <udd_ep_transfer_process+0x19c>)
    3072:	4798      	blx	r3
    3074:	000a      	movs	r2, r1
    3076:	1e7b      	subs	r3, r7, #1
    3078:	019b      	lsls	r3, r3, #6
    307a:	4922      	ldr	r1, [pc, #136]	; (3104 <udd_ep_transfer_process+0x1a8>)
    307c:	1859      	adds	r1, r3, r1
    307e:	0030      	movs	r0, r6
    3080:	4b21      	ldr	r3, [pc, #132]	; (3108 <udd_ep_transfer_process+0x1ac>)
    3082:	4798      	blx	r3
    3084:	e782      	b.n	2f8c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3086:	464a      	mov	r2, r9
    3088:	8892      	ldrh	r2, [r2, #4]
    308a:	4552      	cmp	r2, sl
    308c:	d000      	beq.n	3090 <udd_ep_transfer_process+0x134>
    308e:	e786      	b.n	2f9e <udd_ep_transfer_process+0x42>
    3090:	429e      	cmp	r6, r3
    3092:	d100      	bne.n	3096 <udd_ep_transfer_process+0x13a>
    3094:	e783      	b.n	2f9e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3096:	1b9b      	subs	r3, r3, r6
    3098:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    309a:	4b15      	ldr	r3, [pc, #84]	; (30f0 <udd_ep_transfer_process+0x194>)
    309c:	429d      	cmp	r5, r3
    309e:	d916      	bls.n	30ce <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    30a0:	001d      	movs	r5, r3
    30a2:	4641      	mov	r1, r8
    30a4:	0018      	movs	r0, r3
    30a6:	4b13      	ldr	r3, [pc, #76]	; (30f4 <udd_ep_transfer_process+0x198>)
    30a8:	4798      	blx	r3
    30aa:	1a6b      	subs	r3, r5, r1
    30ac:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    30ae:	4598      	cmp	r8, r3
    30b0:	d914      	bls.n	30dc <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    30b2:	7ca3      	ldrb	r3, [r4, #18]
    30b4:	2204      	movs	r2, #4
    30b6:	4313      	orrs	r3, r2
    30b8:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    30ba:	1e7a      	subs	r2, r7, #1
    30bc:	0192      	lsls	r2, r2, #6
    30be:	4b11      	ldr	r3, [pc, #68]	; (3104 <udd_ep_transfer_process+0x1a8>)
    30c0:	18d2      	adds	r2, r2, r3
    30c2:	4643      	mov	r3, r8
    30c4:	0039      	movs	r1, r7
    30c6:	480d      	ldr	r0, [pc, #52]	; (30fc <udd_ep_transfer_process+0x1a0>)
    30c8:	4c10      	ldr	r4, [pc, #64]	; (310c <udd_ep_transfer_process+0x1b0>)
    30ca:	47a0      	blx	r4
    30cc:	e772      	b.n	2fb4 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    30ce:	4641      	mov	r1, r8
    30d0:	0028      	movs	r0, r5
    30d2:	4b09      	ldr	r3, [pc, #36]	; (30f8 <udd_ep_transfer_process+0x19c>)
    30d4:	4798      	blx	r3
    30d6:	1a6b      	subs	r3, r5, r1
    30d8:	b29b      	uxth	r3, r3
    30da:	e7e8      	b.n	30ae <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    30dc:	6862      	ldr	r2, [r4, #4]
    30de:	1992      	adds	r2, r2, r6
    30e0:	0039      	movs	r1, r7
    30e2:	4806      	ldr	r0, [pc, #24]	; (30fc <udd_ep_transfer_process+0x1a0>)
    30e4:	4c09      	ldr	r4, [pc, #36]	; (310c <udd_ep_transfer_process+0x1b0>)
    30e6:	47a0      	blx	r4
    30e8:	e764      	b.n	2fb4 <udd_ep_transfer_process+0x58>
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	00002f39 	.word	0x00002f39
    30f0:	00001fff 	.word	0x00001fff
    30f4:	000090b1 	.word	0x000090b1
    30f8:	00008edd 	.word	0x00008edd
    30fc:	20000420 	.word	0x20000420
    3100:	00006859 	.word	0x00006859
    3104:	200003a0 	.word	0x200003a0
    3108:	000093ad 	.word	0x000093ad
    310c:	000068ad 	.word	0x000068ad

00003110 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    3110:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3112:	2205      	movs	r2, #5
    3114:	4b05      	ldr	r3, [pc, #20]	; (312c <udd_ctrl_stall_data+0x1c>)
    3116:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3118:	4c05      	ldr	r4, [pc, #20]	; (3130 <udd_ctrl_stall_data+0x20>)
    311a:	2180      	movs	r1, #128	; 0x80
    311c:	0020      	movs	r0, r4
    311e:	4b05      	ldr	r3, [pc, #20]	; (3134 <udd_ctrl_stall_data+0x24>)
    3120:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    3122:	2100      	movs	r1, #0
    3124:	0020      	movs	r0, r4
    3126:	4b04      	ldr	r3, [pc, #16]	; (3138 <udd_ctrl_stall_data+0x28>)
    3128:	4798      	blx	r3
}
    312a:	bd10      	pop	{r4, pc}
    312c:	20000262 	.word	0x20000262
    3130:	20000420 	.word	0x20000420
    3134:	000067ad 	.word	0x000067ad
    3138:	000067d3 	.word	0x000067d3

0000313c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    313c:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    313e:	4c08      	ldr	r4, [pc, #32]	; (3160 <_usb_device_lpm_suspend+0x24>)
    3140:	2106      	movs	r1, #6
    3142:	0020      	movs	r0, r4
    3144:	4d07      	ldr	r5, [pc, #28]	; (3164 <_usb_device_lpm_suspend+0x28>)
    3146:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3148:	2104      	movs	r1, #4
    314a:	0020      	movs	r0, r4
    314c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    314e:	2102      	movs	r1, #2
    3150:	0020      	movs	r0, r4
    3152:	4b05      	ldr	r3, [pc, #20]	; (3168 <_usb_device_lpm_suspend+0x2c>)
    3154:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3156:	2002      	movs	r0, #2
    3158:	4b04      	ldr	r3, [pc, #16]	; (316c <_usb_device_lpm_suspend+0x30>)
    315a:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    315c:	bd70      	pop	{r4, r5, r6, pc}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	20000420 	.word	0x20000420
    3164:	000062c1 	.word	0x000062c1
    3168:	000062a1 	.word	0x000062a1
    316c:	00002e79 	.word	0x00002e79

00003170 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3170:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3172:	4b13      	ldr	r3, [pc, #76]	; (31c0 <_usb_on_wakeup+0x50>)
    3174:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3176:	069b      	lsls	r3, r3, #26
    3178:	d41c      	bmi.n	31b4 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    317a:	4911      	ldr	r1, [pc, #68]	; (31c0 <_usb_on_wakeup+0x50>)
    317c:	22d0      	movs	r2, #208	; 0xd0
    317e:	68cb      	ldr	r3, [r1, #12]
    3180:	4013      	ands	r3, r2
    3182:	2bd0      	cmp	r3, #208	; 0xd0
    3184:	d1fb      	bne.n	317e <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3186:	4c0f      	ldr	r4, [pc, #60]	; (31c4 <_usb_on_wakeup+0x54>)
    3188:	2102      	movs	r1, #2
    318a:	0020      	movs	r0, r4
    318c:	4b0e      	ldr	r3, [pc, #56]	; (31c8 <_usb_on_wakeup+0x58>)
    318e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3190:	2104      	movs	r1, #4
    3192:	0020      	movs	r0, r4
    3194:	4d0d      	ldr	r5, [pc, #52]	; (31cc <_usb_on_wakeup+0x5c>)
    3196:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3198:	4a0d      	ldr	r2, [pc, #52]	; (31d0 <_usb_on_wakeup+0x60>)
    319a:	2106      	movs	r1, #6
    319c:	0020      	movs	r0, r4
    319e:	4b0d      	ldr	r3, [pc, #52]	; (31d4 <_usb_on_wakeup+0x64>)
    31a0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    31a2:	2106      	movs	r1, #6
    31a4:	0020      	movs	r0, r4
    31a6:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    31a8:	2003      	movs	r0, #3
    31aa:	4b0b      	ldr	r3, [pc, #44]	; (31d8 <_usb_on_wakeup+0x68>)
    31ac:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    31ae:	4b0b      	ldr	r3, [pc, #44]	; (31dc <_usb_on_wakeup+0x6c>)
    31b0:	4798      	blx	r3
#endif
}
    31b2:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    31b4:	4902      	ldr	r1, [pc, #8]	; (31c0 <_usb_on_wakeup+0x50>)
    31b6:	2210      	movs	r2, #16
    31b8:	68cb      	ldr	r3, [r1, #12]
    31ba:	421a      	tst	r2, r3
    31bc:	d0fc      	beq.n	31b8 <_usb_on_wakeup+0x48>
    31be:	e7e2      	b.n	3186 <_usb_on_wakeup+0x16>
    31c0:	40000800 	.word	0x40000800
    31c4:	20000420 	.word	0x20000420
    31c8:	000062c1 	.word	0x000062c1
    31cc:	000062a1 	.word	0x000062a1
    31d0:	0000313d 	.word	0x0000313d
    31d4:	0000627d 	.word	0x0000627d
    31d8:	00002e79 	.word	0x00002e79
    31dc:	00005dcd 	.word	0x00005dcd

000031e0 <_usb_on_bus_reset>:
{
    31e0:	b530      	push	{r4, r5, lr}
    31e2:	b083      	sub	sp, #12
    31e4:	0004      	movs	r4, r0
	udc_reset();
    31e6:	4b1e      	ldr	r3, [pc, #120]	; (3260 <_usb_on_bus_reset+0x80>)
    31e8:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    31ea:	2380      	movs	r3, #128	; 0x80
    31ec:	6822      	ldr	r2, [r4, #0]
    31ee:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    31f0:	ad01      	add	r5, sp, #4
    31f2:	0028      	movs	r0, r5
    31f4:	4b1b      	ldr	r3, [pc, #108]	; (3264 <_usb_on_bus_reset+0x84>)
    31f6:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    31f8:	2303      	movs	r3, #3
    31fa:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    31fc:	0029      	movs	r1, r5
    31fe:	0020      	movs	r0, r4
    3200:	4b19      	ldr	r3, [pc, #100]	; (3268 <_usb_on_bus_reset+0x88>)
    3202:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3204:	4919      	ldr	r1, [pc, #100]	; (326c <_usb_on_bus_reset+0x8c>)
    3206:	0020      	movs	r0, r4
    3208:	4b19      	ldr	r3, [pc, #100]	; (3270 <_usb_on_bus_reset+0x90>)
    320a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    320c:	4b19      	ldr	r3, [pc, #100]	; (3274 <_usb_on_bus_reset+0x94>)
    320e:	2202      	movs	r2, #2
    3210:	2100      	movs	r1, #0
    3212:	0020      	movs	r0, r4
    3214:	4d18      	ldr	r5, [pc, #96]	; (3278 <_usb_on_bus_reset+0x98>)
    3216:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3218:	4b18      	ldr	r3, [pc, #96]	; (327c <_usb_on_bus_reset+0x9c>)
    321a:	2200      	movs	r2, #0
    321c:	2100      	movs	r1, #0
    321e:	0020      	movs	r0, r4
    3220:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3222:	4b17      	ldr	r3, [pc, #92]	; (3280 <_usb_on_bus_reset+0xa0>)
    3224:	2201      	movs	r2, #1
    3226:	2100      	movs	r1, #0
    3228:	0020      	movs	r0, r4
    322a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    322c:	2202      	movs	r2, #2
    322e:	2100      	movs	r1, #0
    3230:	0020      	movs	r0, r4
    3232:	4d14      	ldr	r5, [pc, #80]	; (3284 <_usb_on_bus_reset+0xa4>)
    3234:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3236:	2200      	movs	r2, #0
    3238:	2100      	movs	r1, #0
    323a:	0020      	movs	r0, r4
    323c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    323e:	2201      	movs	r2, #1
    3240:	2100      	movs	r1, #0
    3242:	0020      	movs	r0, r4
    3244:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3246:	6821      	ldr	r1, [r4, #0]
    3248:	890b      	ldrh	r3, [r1, #8]
    324a:	4a0f      	ldr	r2, [pc, #60]	; (3288 <_usb_on_bus_reset+0xa8>)
    324c:	401a      	ands	r2, r3
    324e:	2380      	movs	r3, #128	; 0x80
    3250:	00db      	lsls	r3, r3, #3
    3252:	4313      	orrs	r3, r2
    3254:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3256:	2200      	movs	r2, #0
    3258:	4b0c      	ldr	r3, [pc, #48]	; (328c <_usb_on_bus_reset+0xac>)
    325a:	701a      	strb	r2, [r3, #0]
}
    325c:	b003      	add	sp, #12
    325e:	bd30      	pop	{r4, r5, pc}
    3260:	00001b41 	.word	0x00001b41
    3264:	000064cd 	.word	0x000064cd
    3268:	000064dd 	.word	0x000064dd
    326c:	200005a0 	.word	0x200005a0
    3270:	000068fd 	.word	0x000068fd
    3274:	000033c9 	.word	0x000033c9
    3278:	000062dd 	.word	0x000062dd
    327c:	000036e5 	.word	0x000036e5
    3280:	000032cd 	.word	0x000032cd
    3284:	0000632d 	.word	0x0000632d
    3288:	fffff3ff 	.word	0xfffff3ff
    328c:	20000262 	.word	0x20000262

00003290 <udd_ctrl_send_zlp_in>:
{
    3290:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3292:	2203      	movs	r2, #3
    3294:	4b07      	ldr	r3, [pc, #28]	; (32b4 <udd_ctrl_send_zlp_in+0x24>)
    3296:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3298:	4c07      	ldr	r4, [pc, #28]	; (32b8 <udd_ctrl_send_zlp_in+0x28>)
    329a:	4908      	ldr	r1, [pc, #32]	; (32bc <udd_ctrl_send_zlp_in+0x2c>)
    329c:	0020      	movs	r0, r4
    329e:	4b08      	ldr	r3, [pc, #32]	; (32c0 <udd_ctrl_send_zlp_in+0x30>)
    32a0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    32a2:	4b08      	ldr	r3, [pc, #32]	; (32c4 <udd_ctrl_send_zlp_in+0x34>)
    32a4:	689a      	ldr	r2, [r3, #8]
    32a6:	2300      	movs	r3, #0
    32a8:	2100      	movs	r1, #0
    32aa:	0020      	movs	r0, r4
    32ac:	4c06      	ldr	r4, [pc, #24]	; (32c8 <udd_ctrl_send_zlp_in+0x38>)
    32ae:	47a0      	blx	r4
}
    32b0:	bd10      	pop	{r4, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	20000262 	.word	0x20000262
    32b8:	20000420 	.word	0x20000420
    32bc:	200005a0 	.word	0x200005a0
    32c0:	000068fd 	.word	0x000068fd
    32c4:	20000588 	.word	0x20000588
    32c8:	00006859 	.word	0x00006859

000032cc <_usb_ep0_on_tansfer_fail>:
{
    32cc:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    32ce:	7989      	ldrb	r1, [r1, #6]
    32d0:	b24b      	sxtb	r3, r1
    32d2:	2b00      	cmp	r3, #0
    32d4:	db06      	blt.n	32e4 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    32d6:	4b0e      	ldr	r3, [pc, #56]	; (3310 <_usb_ep0_on_tansfer_fail+0x44>)
    32d8:	781b      	ldrb	r3, [r3, #0]
    32da:	2b02      	cmp	r3, #2
    32dc:	d00f      	beq.n	32fe <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    32de:	2b03      	cmp	r3, #3
    32e0:	d011      	beq.n	3306 <_usb_ep0_on_tansfer_fail+0x3a>
}
    32e2:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    32e4:	4b0a      	ldr	r3, [pc, #40]	; (3310 <_usb_ep0_on_tansfer_fail+0x44>)
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	2b01      	cmp	r3, #1
    32ea:	d005      	beq.n	32f8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    32ec:	2b04      	cmp	r3, #4
    32ee:	d1f8      	bne.n	32e2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    32f0:	4808      	ldr	r0, [pc, #32]	; (3314 <_usb_ep0_on_tansfer_fail+0x48>)
    32f2:	4b09      	ldr	r3, [pc, #36]	; (3318 <_usb_ep0_on_tansfer_fail+0x4c>)
    32f4:	4798      	blx	r3
    32f6:	e7f4      	b.n	32e2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    32f8:	4b08      	ldr	r3, [pc, #32]	; (331c <_usb_ep0_on_tansfer_fail+0x50>)
    32fa:	4798      	blx	r3
    32fc:	e7f1      	b.n	32e2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    32fe:	2204      	movs	r2, #4
    3300:	4b03      	ldr	r3, [pc, #12]	; (3310 <_usb_ep0_on_tansfer_fail+0x44>)
    3302:	701a      	strb	r2, [r3, #0]
    3304:	e7ed      	b.n	32e2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3306:	4803      	ldr	r0, [pc, #12]	; (3314 <_usb_ep0_on_tansfer_fail+0x48>)
    3308:	4b03      	ldr	r3, [pc, #12]	; (3318 <_usb_ep0_on_tansfer_fail+0x4c>)
    330a:	4798      	blx	r3
}
    330c:	e7e9      	b.n	32e2 <_usb_ep0_on_tansfer_fail+0x16>
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	20000262 	.word	0x20000262
    3314:	20000420 	.word	0x20000420
    3318:	000067ad 	.word	0x000067ad
    331c:	00003291 	.word	0x00003291

00003320 <udd_ctrl_in_sent>:
{
    3320:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3322:	4b20      	ldr	r3, [pc, #128]	; (33a4 <udd_ctrl_in_sent+0x84>)
    3324:	881b      	ldrh	r3, [r3, #0]
    3326:	4a20      	ldr	r2, [pc, #128]	; (33a8 <udd_ctrl_in_sent+0x88>)
    3328:	8994      	ldrh	r4, [r2, #12]
    332a:	1ae4      	subs	r4, r4, r3
    332c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    332e:	2c00      	cmp	r4, #0
    3330:	d118      	bne.n	3364 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3332:	4a1e      	ldr	r2, [pc, #120]	; (33ac <udd_ctrl_in_sent+0x8c>)
    3334:	8811      	ldrh	r1, [r2, #0]
    3336:	185b      	adds	r3, r3, r1
    3338:	b29b      	uxth	r3, r3
    333a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    333c:	4a1a      	ldr	r2, [pc, #104]	; (33a8 <udd_ctrl_in_sent+0x88>)
    333e:	88d2      	ldrh	r2, [r2, #6]
    3340:	429a      	cmp	r2, r3
    3342:	d023      	beq.n	338c <udd_ctrl_in_sent+0x6c>
    3344:	4b1a      	ldr	r3, [pc, #104]	; (33b0 <udd_ctrl_in_sent+0x90>)
    3346:	781b      	ldrb	r3, [r3, #0]
    3348:	2b00      	cmp	r3, #0
    334a:	d11f      	bne.n	338c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    334c:	4b16      	ldr	r3, [pc, #88]	; (33a8 <udd_ctrl_in_sent+0x88>)
    334e:	695b      	ldr	r3, [r3, #20]
    3350:	2b00      	cmp	r3, #0
    3352:	d023      	beq.n	339c <udd_ctrl_in_sent+0x7c>
    3354:	4798      	blx	r3
    3356:	2800      	cmp	r0, #0
    3358:	d020      	beq.n	339c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    335a:	2200      	movs	r2, #0
    335c:	4b11      	ldr	r3, [pc, #68]	; (33a4 <udd_ctrl_in_sent+0x84>)
    335e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3360:	4b11      	ldr	r3, [pc, #68]	; (33a8 <udd_ctrl_in_sent+0x88>)
    3362:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3364:	2c3f      	cmp	r4, #63	; 0x3f
    3366:	d919      	bls.n	339c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3368:	2200      	movs	r2, #0
    336a:	4b11      	ldr	r3, [pc, #68]	; (33b0 <udd_ctrl_in_sent+0x90>)
    336c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    336e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3370:	4d0c      	ldr	r5, [pc, #48]	; (33a4 <udd_ctrl_in_sent+0x84>)
    3372:	882b      	ldrh	r3, [r5, #0]
    3374:	4a0c      	ldr	r2, [pc, #48]	; (33a8 <udd_ctrl_in_sent+0x88>)
    3376:	6892      	ldr	r2, [r2, #8]
    3378:	18d2      	adds	r2, r2, r3
    337a:	0023      	movs	r3, r4
    337c:	2100      	movs	r1, #0
    337e:	480d      	ldr	r0, [pc, #52]	; (33b4 <udd_ctrl_in_sent+0x94>)
    3380:	4e0d      	ldr	r6, [pc, #52]	; (33b8 <udd_ctrl_in_sent+0x98>)
    3382:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3384:	882b      	ldrh	r3, [r5, #0]
    3386:	18e4      	adds	r4, r4, r3
    3388:	802c      	strh	r4, [r5, #0]
}
    338a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    338c:	2204      	movs	r2, #4
    338e:	4b0b      	ldr	r3, [pc, #44]	; (33bc <udd_ctrl_in_sent+0x9c>)
    3390:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3392:	490b      	ldr	r1, [pc, #44]	; (33c0 <udd_ctrl_in_sent+0xa0>)
    3394:	4807      	ldr	r0, [pc, #28]	; (33b4 <udd_ctrl_in_sent+0x94>)
    3396:	4b0b      	ldr	r3, [pc, #44]	; (33c4 <udd_ctrl_in_sent+0xa4>)
    3398:	4798      	blx	r3
			return;
    339a:	e7f6      	b.n	338a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    339c:	2201      	movs	r2, #1
    339e:	4b04      	ldr	r3, [pc, #16]	; (33b0 <udd_ctrl_in_sent+0x90>)
    33a0:	701a      	strb	r2, [r3, #0]
    33a2:	e7e5      	b.n	3370 <udd_ctrl_in_sent+0x50>
    33a4:	2000025e 	.word	0x2000025e
    33a8:	20000588 	.word	0x20000588
    33ac:	20000260 	.word	0x20000260
    33b0:	2000025c 	.word	0x2000025c
    33b4:	20000420 	.word	0x20000420
    33b8:	00006859 	.word	0x00006859
    33bc:	20000262 	.word	0x20000262
    33c0:	200005a0 	.word	0x200005a0
    33c4:	000068fd 	.word	0x000068fd

000033c8 <_usb_ep0_on_setup>:
{
    33c8:	b510      	push	{r4, lr}
    33ca:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    33cc:	4b2c      	ldr	r3, [pc, #176]	; (3480 <_usb_ep0_on_setup+0xb8>)
    33ce:	781b      	ldrb	r3, [r3, #0]
    33d0:	2b00      	cmp	r3, #0
    33d2:	d007      	beq.n	33e4 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    33d4:	4b2b      	ldr	r3, [pc, #172]	; (3484 <_usb_ep0_on_setup+0xbc>)
    33d6:	691b      	ldr	r3, [r3, #16]
    33d8:	2b00      	cmp	r3, #0
    33da:	d000      	beq.n	33de <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    33dc:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    33de:	2200      	movs	r2, #0
    33e0:	4b27      	ldr	r3, [pc, #156]	; (3480 <_usb_ep0_on_setup+0xb8>)
    33e2:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    33e4:	8823      	ldrh	r3, [r4, #0]
    33e6:	2b08      	cmp	r3, #8
    33e8:	d002      	beq.n	33f0 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    33ea:	4b27      	ldr	r3, [pc, #156]	; (3488 <_usb_ep0_on_setup+0xc0>)
    33ec:	4798      	blx	r3
}
    33ee:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    33f0:	4a24      	ldr	r2, [pc, #144]	; (3484 <_usb_ep0_on_setup+0xbc>)
    33f2:	4b26      	ldr	r3, [pc, #152]	; (348c <_usb_ep0_on_setup+0xc4>)
    33f4:	7819      	ldrb	r1, [r3, #0]
    33f6:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    33f8:	7859      	ldrb	r1, [r3, #1]
    33fa:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    33fc:	78d8      	ldrb	r0, [r3, #3]
    33fe:	0200      	lsls	r0, r0, #8
    3400:	7899      	ldrb	r1, [r3, #2]
    3402:	1809      	adds	r1, r1, r0
    3404:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    3406:	7958      	ldrb	r0, [r3, #5]
    3408:	0200      	lsls	r0, r0, #8
    340a:	7919      	ldrb	r1, [r3, #4]
    340c:	1809      	adds	r1, r1, r0
    340e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3410:	79d9      	ldrb	r1, [r3, #7]
    3412:	0209      	lsls	r1, r1, #8
    3414:	799b      	ldrb	r3, [r3, #6]
    3416:	185b      	adds	r3, r3, r1
    3418:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    341a:	4b1d      	ldr	r3, [pc, #116]	; (3490 <_usb_ep0_on_setup+0xc8>)
    341c:	4798      	blx	r3
    341e:	2800      	cmp	r0, #0
    3420:	d016      	beq.n	3450 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    3422:	4b18      	ldr	r3, [pc, #96]	; (3484 <_usb_ep0_on_setup+0xbc>)
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	2b7f      	cmp	r3, #127	; 0x7f
    3428:	d815      	bhi.n	3456 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    342a:	4b16      	ldr	r3, [pc, #88]	; (3484 <_usb_ep0_on_setup+0xbc>)
    342c:	88db      	ldrh	r3, [r3, #6]
    342e:	2b00      	cmp	r3, #0
    3430:	d022      	beq.n	3478 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    3432:	2300      	movs	r3, #0
    3434:	4a17      	ldr	r2, [pc, #92]	; (3494 <_usb_ep0_on_setup+0xcc>)
    3436:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3438:	4a17      	ldr	r2, [pc, #92]	; (3498 <_usb_ep0_on_setup+0xd0>)
    343a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    343c:	2201      	movs	r2, #1
    343e:	4b10      	ldr	r3, [pc, #64]	; (3480 <_usb_ep0_on_setup+0xb8>)
    3440:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3442:	2340      	movs	r3, #64	; 0x40
    3444:	4a11      	ldr	r2, [pc, #68]	; (348c <_usb_ep0_on_setup+0xc4>)
    3446:	2100      	movs	r1, #0
    3448:	4814      	ldr	r0, [pc, #80]	; (349c <_usb_ep0_on_setup+0xd4>)
    344a:	4c15      	ldr	r4, [pc, #84]	; (34a0 <_usb_ep0_on_setup+0xd8>)
    344c:	47a0      	blx	r4
    344e:	e7ce      	b.n	33ee <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    3450:	4b0d      	ldr	r3, [pc, #52]	; (3488 <_usb_ep0_on_setup+0xc0>)
    3452:	4798      	blx	r3
			return;
    3454:	e7cb      	b.n	33ee <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    3456:	2300      	movs	r3, #0
    3458:	4a0e      	ldr	r2, [pc, #56]	; (3494 <_usb_ep0_on_setup+0xcc>)
    345a:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    345c:	4a0e      	ldr	r2, [pc, #56]	; (3498 <_usb_ep0_on_setup+0xd0>)
    345e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3460:	2202      	movs	r2, #2
    3462:	4b07      	ldr	r3, [pc, #28]	; (3480 <_usb_ep0_on_setup+0xb8>)
    3464:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3466:	2340      	movs	r3, #64	; 0x40
    3468:	4a08      	ldr	r2, [pc, #32]	; (348c <_usb_ep0_on_setup+0xc4>)
    346a:	2100      	movs	r1, #0
    346c:	480b      	ldr	r0, [pc, #44]	; (349c <_usb_ep0_on_setup+0xd4>)
    346e:	4c0c      	ldr	r4, [pc, #48]	; (34a0 <_usb_ep0_on_setup+0xd8>)
    3470:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3472:	4b0c      	ldr	r3, [pc, #48]	; (34a4 <_usb_ep0_on_setup+0xdc>)
    3474:	4798      	blx	r3
    3476:	e7ba      	b.n	33ee <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3478:	4b0b      	ldr	r3, [pc, #44]	; (34a8 <_usb_ep0_on_setup+0xe0>)
    347a:	4798      	blx	r3
				return;
    347c:	e7b7      	b.n	33ee <_usb_ep0_on_setup+0x26>
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	20000262 	.word	0x20000262
    3484:	20000588 	.word	0x20000588
    3488:	00003111 	.word	0x00003111
    348c:	200005a0 	.word	0x200005a0
    3490:	00001bd1 	.word	0x00001bd1
    3494:	20000260 	.word	0x20000260
    3498:	2000025e 	.word	0x2000025e
    349c:	20000420 	.word	0x20000420
    34a0:	000068ad 	.word	0x000068ad
    34a4:	00003321 	.word	0x00003321
    34a8:	00003291 	.word	0x00003291

000034ac <_usb_on_sof_notify>:
{
    34ac:	b510      	push	{r4, lr}
	udc_sof_notify();
    34ae:	4b02      	ldr	r3, [pc, #8]	; (34b8 <_usb_on_sof_notify+0xc>)
    34b0:	4798      	blx	r3
	UDC_SOF_EVENT();
    34b2:	4b02      	ldr	r3, [pc, #8]	; (34bc <_usb_on_sof_notify+0x10>)
    34b4:	4798      	blx	r3
}
    34b6:	bd10      	pop	{r4, pc}
    34b8:	00001b8d 	.word	0x00001b8d
    34bc:	00005dd9 	.word	0x00005dd9

000034c0 <_usb_on_suspend>:
{
    34c0:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    34c2:	4c07      	ldr	r4, [pc, #28]	; (34e0 <_usb_on_suspend+0x20>)
    34c4:	2104      	movs	r1, #4
    34c6:	0020      	movs	r0, r4
    34c8:	4b06      	ldr	r3, [pc, #24]	; (34e4 <_usb_on_suspend+0x24>)
    34ca:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    34cc:	2102      	movs	r1, #2
    34ce:	0020      	movs	r0, r4
    34d0:	4b05      	ldr	r3, [pc, #20]	; (34e8 <_usb_on_suspend+0x28>)
    34d2:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    34d4:	2001      	movs	r0, #1
    34d6:	4b05      	ldr	r3, [pc, #20]	; (34ec <_usb_on_suspend+0x2c>)
    34d8:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    34da:	4b05      	ldr	r3, [pc, #20]	; (34f0 <_usb_on_suspend+0x30>)
    34dc:	4798      	blx	r3
}
    34de:	bd10      	pop	{r4, pc}
    34e0:	20000420 	.word	0x20000420
    34e4:	000062c1 	.word	0x000062c1
    34e8:	000062a1 	.word	0x000062a1
    34ec:	00002e79 	.word	0x00002e79
    34f0:	00005dc1 	.word	0x00005dc1

000034f4 <udd_ep_abort>:
{
    34f4:	b510      	push	{r4, lr}
    34f6:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    34f8:	0001      	movs	r1, r0
    34fa:	480a      	ldr	r0, [pc, #40]	; (3524 <udd_ep_abort+0x30>)
    34fc:	4b0a      	ldr	r3, [pc, #40]	; (3528 <udd_ep_abort+0x34>)
    34fe:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    3500:	0020      	movs	r0, r4
    3502:	4b0a      	ldr	r3, [pc, #40]	; (352c <udd_ep_abort+0x38>)
    3504:	4798      	blx	r3
	if (!ptr_job->busy) {
    3506:	7c83      	ldrb	r3, [r0, #18]
    3508:	07db      	lsls	r3, r3, #31
    350a:	d50a      	bpl.n	3522 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    350c:	7c83      	ldrb	r3, [r0, #18]
    350e:	2201      	movs	r2, #1
    3510:	4393      	bics	r3, r2
    3512:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3514:	6803      	ldr	r3, [r0, #0]
    3516:	2b00      	cmp	r3, #0
    3518:	d003      	beq.n	3522 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    351a:	68c1      	ldr	r1, [r0, #12]
    351c:	0022      	movs	r2, r4
    351e:	2001      	movs	r0, #1
    3520:	4798      	blx	r3
}
    3522:	bd10      	pop	{r4, pc}
    3524:	20000420 	.word	0x20000420
    3528:	0000674d 	.word	0x0000674d
    352c:	00002f39 	.word	0x00002f39

00003530 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3530:	4b02      	ldr	r3, [pc, #8]	; (353c <udd_get_frame_number+0xc>)
    3532:	681b      	ldr	r3, [r3, #0]
    3534:	8a18      	ldrh	r0, [r3, #16]
    3536:	0480      	lsls	r0, r0, #18
    3538:	0d40      	lsrs	r0, r0, #21
}
    353a:	4770      	bx	lr
    353c:	20000420 	.word	0x20000420

00003540 <udd_ep_free>:
{
    3540:	b570      	push	{r4, r5, r6, lr}
    3542:	b082      	sub	sp, #8
    3544:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3546:	ad01      	add	r5, sp, #4
    3548:	0028      	movs	r0, r5
    354a:	4b0d      	ldr	r3, [pc, #52]	; (3580 <udd_ep_free+0x40>)
    354c:	4798      	blx	r3
	udd_ep_abort(ep);
    354e:	0020      	movs	r0, r4
    3550:	4b0c      	ldr	r3, [pc, #48]	; (3584 <udd_ep_free+0x44>)
    3552:	4798      	blx	r3
	config_ep.ep_address = ep;
    3554:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3556:	2300      	movs	r3, #0
    3558:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    355a:	4e0b      	ldr	r6, [pc, #44]	; (3588 <udd_ep_free+0x48>)
    355c:	0029      	movs	r1, r5
    355e:	0030      	movs	r0, r6
    3560:	4b0a      	ldr	r3, [pc, #40]	; (358c <udd_ep_free+0x4c>)
    3562:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3564:	210f      	movs	r1, #15
    3566:	4021      	ands	r1, r4
    3568:	2200      	movs	r2, #0
    356a:	0030      	movs	r0, r6
    356c:	4b08      	ldr	r3, [pc, #32]	; (3590 <udd_ep_free+0x50>)
    356e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3570:	2200      	movs	r2, #0
    3572:	0021      	movs	r1, r4
    3574:	0030      	movs	r0, r6
    3576:	4b07      	ldr	r3, [pc, #28]	; (3594 <udd_ep_free+0x54>)
    3578:	4798      	blx	r3
}
    357a:	b002      	add	sp, #8
    357c:	bd70      	pop	{r4, r5, r6, pc}
    357e:	46c0      	nop			; (mov r8, r8)
    3580:	000064cd 	.word	0x000064cd
    3584:	000034f5 	.word	0x000034f5
    3588:	20000420 	.word	0x20000420
    358c:	000064dd 	.word	0x000064dd
    3590:	00006305 	.word	0x00006305
    3594:	000063fd 	.word	0x000063fd

00003598 <udd_ep_alloc>:
{
    3598:	b5f0      	push	{r4, r5, r6, r7, lr}
    359a:	b083      	sub	sp, #12
    359c:	0005      	movs	r5, r0
    359e:	000f      	movs	r7, r1
    35a0:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    35a2:	ae01      	add	r6, sp, #4
    35a4:	0030      	movs	r0, r6
    35a6:	4b36      	ldr	r3, [pc, #216]	; (3680 <udd_ep_alloc+0xe8>)
    35a8:	4798      	blx	r3
	config_ep.ep_address = ep;
    35aa:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    35ac:	2c08      	cmp	r4, #8
    35ae:	d813      	bhi.n	35d8 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    35b0:	2200      	movs	r2, #0
    35b2:	ab01      	add	r3, sp, #4
    35b4:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    35b6:	0028      	movs	r0, r5
    35b8:	4b32      	ldr	r3, [pc, #200]	; (3684 <udd_ep_alloc+0xec>)
    35ba:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    35bc:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    35be:	2103      	movs	r1, #3
    35c0:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    35c2:	2901      	cmp	r1, #1
    35c4:	d038      	beq.n	3638 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    35c6:	2902      	cmp	r1, #2
    35c8:	d043      	beq.n	3652 <udd_ep_alloc+0xba>
		return false;
    35ca:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    35cc:	2903      	cmp	r1, #3
    35ce:	d13d      	bne.n	364c <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    35d0:	2204      	movs	r2, #4
    35d2:	ab01      	add	r3, sp, #4
    35d4:	70da      	strb	r2, [r3, #3]
    35d6:	e032      	b.n	363e <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    35d8:	2c10      	cmp	r4, #16
    35da:	d803      	bhi.n	35e4 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    35dc:	2201      	movs	r2, #1
    35de:	ab01      	add	r3, sp, #4
    35e0:	705a      	strb	r2, [r3, #1]
    35e2:	e7e8      	b.n	35b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    35e4:	2c20      	cmp	r4, #32
    35e6:	d803      	bhi.n	35f0 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    35e8:	2202      	movs	r2, #2
    35ea:	ab01      	add	r3, sp, #4
    35ec:	705a      	strb	r2, [r3, #1]
    35ee:	e7e2      	b.n	35b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    35f0:	2c40      	cmp	r4, #64	; 0x40
    35f2:	d803      	bhi.n	35fc <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    35f4:	2203      	movs	r2, #3
    35f6:	ab01      	add	r3, sp, #4
    35f8:	705a      	strb	r2, [r3, #1]
    35fa:	e7dc      	b.n	35b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    35fc:	2c80      	cmp	r4, #128	; 0x80
    35fe:	d803      	bhi.n	3608 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3600:	2204      	movs	r2, #4
    3602:	ab01      	add	r3, sp, #4
    3604:	705a      	strb	r2, [r3, #1]
    3606:	e7d6      	b.n	35b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3608:	2380      	movs	r3, #128	; 0x80
    360a:	005b      	lsls	r3, r3, #1
    360c:	429c      	cmp	r4, r3
    360e:	d803      	bhi.n	3618 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3610:	2205      	movs	r2, #5
    3612:	ab01      	add	r3, sp, #4
    3614:	705a      	strb	r2, [r3, #1]
    3616:	e7ce      	b.n	35b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3618:	2380      	movs	r3, #128	; 0x80
    361a:	009b      	lsls	r3, r3, #2
    361c:	429c      	cmp	r4, r3
    361e:	d803      	bhi.n	3628 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3620:	2206      	movs	r2, #6
    3622:	ab01      	add	r3, sp, #4
    3624:	705a      	strb	r2, [r3, #1]
    3626:	e7c6      	b.n	35b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3628:	4a17      	ldr	r2, [pc, #92]	; (3688 <udd_ep_alloc+0xf0>)
		return false;
    362a:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    362c:	4294      	cmp	r4, r2
    362e:	d80d      	bhi.n	364c <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3630:	2207      	movs	r2, #7
    3632:	ab01      	add	r3, sp, #4
    3634:	705a      	strb	r2, [r3, #1]
    3636:	e7be      	b.n	35b6 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3638:	2202      	movs	r2, #2
    363a:	ab01      	add	r3, sp, #4
    363c:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    363e:	a901      	add	r1, sp, #4
    3640:	4812      	ldr	r0, [pc, #72]	; (368c <udd_ep_alloc+0xf4>)
    3642:	4b13      	ldr	r3, [pc, #76]	; (3690 <udd_ep_alloc+0xf8>)
    3644:	4798      	blx	r3
		return false;
    3646:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3648:	2800      	cmp	r0, #0
    364a:	d006      	beq.n	365a <udd_ep_alloc+0xc2>
}
    364c:	0018      	movs	r0, r3
    364e:	b003      	add	sp, #12
    3650:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3652:	2203      	movs	r2, #3
    3654:	ab01      	add	r3, sp, #4
    3656:	70da      	strb	r2, [r3, #3]
    3658:	e7f1      	b.n	363e <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    365a:	210f      	movs	r1, #15
    365c:	4029      	ands	r1, r5
    365e:	4c0b      	ldr	r4, [pc, #44]	; (368c <udd_ep_alloc+0xf4>)
    3660:	4b0c      	ldr	r3, [pc, #48]	; (3694 <udd_ep_alloc+0xfc>)
    3662:	2200      	movs	r2, #0
    3664:	0020      	movs	r0, r4
    3666:	4e0c      	ldr	r6, [pc, #48]	; (3698 <udd_ep_alloc+0x100>)
    3668:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    366a:	2200      	movs	r2, #0
    366c:	0029      	movs	r1, r5
    366e:	0020      	movs	r0, r4
    3670:	4e0a      	ldr	r6, [pc, #40]	; (369c <udd_ep_alloc+0x104>)
    3672:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3674:	2201      	movs	r2, #1
    3676:	0029      	movs	r1, r5
    3678:	0020      	movs	r0, r4
    367a:	47b0      	blx	r6
	return true;
    367c:	2301      	movs	r3, #1
    367e:	e7e5      	b.n	364c <udd_ep_alloc+0xb4>
    3680:	000064cd 	.word	0x000064cd
    3684:	00002f39 	.word	0x00002f39
    3688:	000003ff 	.word	0x000003ff
    368c:	20000420 	.word	0x20000420
    3690:	000064dd 	.word	0x000064dd
    3694:	00002f5d 	.word	0x00002f5d
    3698:	000062dd 	.word	0x000062dd
    369c:	0000632d 	.word	0x0000632d

000036a0 <udd_ep_is_halted>:
{
    36a0:	b510      	push	{r4, lr}
    36a2:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    36a4:	4801      	ldr	r0, [pc, #4]	; (36ac <udd_ep_is_halted+0xc>)
    36a6:	4b02      	ldr	r3, [pc, #8]	; (36b0 <udd_ep_is_halted+0x10>)
    36a8:	4798      	blx	r3
}
    36aa:	bd10      	pop	{r4, pc}
    36ac:	20000420 	.word	0x20000420
    36b0:	00006783 	.word	0x00006783

000036b4 <udd_ep_set_halt>:
{
    36b4:	b510      	push	{r4, lr}
    36b6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36b8:	230f      	movs	r3, #15
    36ba:	4003      	ands	r3, r0
		return false;
    36bc:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36be:	2b02      	cmp	r3, #2
    36c0:	d900      	bls.n	36c4 <udd_ep_set_halt+0x10>
}
    36c2:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    36c4:	0021      	movs	r1, r4
    36c6:	4804      	ldr	r0, [pc, #16]	; (36d8 <udd_ep_set_halt+0x24>)
    36c8:	4b04      	ldr	r3, [pc, #16]	; (36dc <udd_ep_set_halt+0x28>)
    36ca:	4798      	blx	r3
	udd_ep_abort(ep);
    36cc:	0020      	movs	r0, r4
    36ce:	4b04      	ldr	r3, [pc, #16]	; (36e0 <udd_ep_set_halt+0x2c>)
    36d0:	4798      	blx	r3
	return true;
    36d2:	2001      	movs	r0, #1
    36d4:	e7f5      	b.n	36c2 <udd_ep_set_halt+0xe>
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	20000420 	.word	0x20000420
    36dc:	000067ad 	.word	0x000067ad
    36e0:	000034f5 	.word	0x000034f5

000036e4 <_usb_ep0_on_tansfer_ok>:
{
    36e4:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    36e6:	4b34      	ldr	r3, [pc, #208]	; (37b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    36e8:	781b      	ldrb	r3, [r3, #0]
    36ea:	2b01      	cmp	r3, #1
    36ec:	d00a      	beq.n	3704 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    36ee:	2b02      	cmp	r3, #2
    36f0:	d05f      	beq.n	37b2 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    36f2:	4b32      	ldr	r3, [pc, #200]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    36f4:	691b      	ldr	r3, [r3, #16]
    36f6:	2b00      	cmp	r3, #0
    36f8:	d000      	beq.n	36fc <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    36fa:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    36fc:	2200      	movs	r2, #0
    36fe:	4b2e      	ldr	r3, [pc, #184]	; (37b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3700:	701a      	strb	r2, [r3, #0]
}
    3702:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3704:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3706:	4b2d      	ldr	r3, [pc, #180]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    3708:	899b      	ldrh	r3, [r3, #12]
    370a:	4a2d      	ldr	r2, [pc, #180]	; (37c0 <_usb_ep0_on_tansfer_ok+0xdc>)
    370c:	8814      	ldrh	r4, [r2, #0]
    370e:	1962      	adds	r2, r4, r5
    3710:	4293      	cmp	r3, r2
    3712:	da01      	bge.n	3718 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3714:	1b1d      	subs	r5, r3, r4
    3716:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3718:	4b28      	ldr	r3, [pc, #160]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    371a:	6898      	ldr	r0, [r3, #8]
    371c:	1900      	adds	r0, r0, r4
    371e:	002a      	movs	r2, r5
    3720:	4928      	ldr	r1, [pc, #160]	; (37c4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3722:	4b29      	ldr	r3, [pc, #164]	; (37c8 <_usb_ep0_on_tansfer_ok+0xe4>)
    3724:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3726:	1964      	adds	r4, r4, r5
    3728:	b2a4      	uxth	r4, r4
    372a:	4b25      	ldr	r3, [pc, #148]	; (37c0 <_usb_ep0_on_tansfer_ok+0xdc>)
    372c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    372e:	2d40      	cmp	r5, #64	; 0x40
    3730:	d00a      	beq.n	3748 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3732:	4b22      	ldr	r3, [pc, #136]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    3734:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3736:	695b      	ldr	r3, [r3, #20]
    3738:	2b00      	cmp	r3, #0
    373a:	d002      	beq.n	3742 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    373c:	4798      	blx	r3
    373e:	2800      	cmp	r0, #0
    3740:	d014      	beq.n	376c <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    3742:	4b22      	ldr	r3, [pc, #136]	; (37cc <_usb_ep0_on_tansfer_ok+0xe8>)
    3744:	4798      	blx	r3
    3746:	e7dc      	b.n	3702 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3748:	4b1c      	ldr	r3, [pc, #112]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    374a:	88da      	ldrh	r2, [r3, #6]
    374c:	4b20      	ldr	r3, [pc, #128]	; (37d0 <_usb_ep0_on_tansfer_ok+0xec>)
    374e:	881b      	ldrh	r3, [r3, #0]
    3750:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3752:	429a      	cmp	r2, r3
    3754:	dded      	ble.n	3732 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3756:	4b19      	ldr	r3, [pc, #100]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    3758:	899b      	ldrh	r3, [r3, #12]
    375a:	42a3      	cmp	r3, r4
    375c:	d00c      	beq.n	3778 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    375e:	2340      	movs	r3, #64	; 0x40
    3760:	4a18      	ldr	r2, [pc, #96]	; (37c4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3762:	2100      	movs	r1, #0
    3764:	481b      	ldr	r0, [pc, #108]	; (37d4 <_usb_ep0_on_tansfer_ok+0xf0>)
    3766:	4c1c      	ldr	r4, [pc, #112]	; (37d8 <_usb_ep0_on_tansfer_ok+0xf4>)
    3768:	47a0      	blx	r4
    376a:	e7ca      	b.n	3702 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    376c:	2205      	movs	r2, #5
    376e:	4b12      	ldr	r3, [pc, #72]	; (37b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3770:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    3772:	4b1a      	ldr	r3, [pc, #104]	; (37dc <_usb_ep0_on_tansfer_ok+0xf8>)
    3774:	4798      	blx	r3
    3776:	e7c4      	b.n	3702 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3778:	4b10      	ldr	r3, [pc, #64]	; (37bc <_usb_ep0_on_tansfer_ok+0xd8>)
    377a:	695b      	ldr	r3, [r3, #20]
    377c:	2b00      	cmp	r3, #0
    377e:	d00b      	beq.n	3798 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3780:	4798      	blx	r3
    3782:	2800      	cmp	r0, #0
    3784:	d00f      	beq.n	37a6 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3786:	4912      	ldr	r1, [pc, #72]	; (37d0 <_usb_ep0_on_tansfer_ok+0xec>)
    3788:	4a0d      	ldr	r2, [pc, #52]	; (37c0 <_usb_ep0_on_tansfer_ok+0xdc>)
    378a:	880b      	ldrh	r3, [r1, #0]
    378c:	8810      	ldrh	r0, [r2, #0]
    378e:	181b      	adds	r3, r3, r0
    3790:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    3792:	2300      	movs	r3, #0
    3794:	8013      	strh	r3, [r2, #0]
    3796:	e7e2      	b.n	375e <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3798:	2205      	movs	r2, #5
    379a:	4b07      	ldr	r3, [pc, #28]	; (37b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    379c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    379e:	2000      	movs	r0, #0
    37a0:	4b0e      	ldr	r3, [pc, #56]	; (37dc <_usb_ep0_on_tansfer_ok+0xf8>)
    37a2:	4798      	blx	r3
    37a4:	e7ad      	b.n	3702 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    37a6:	2205      	movs	r2, #5
    37a8:	4b03      	ldr	r3, [pc, #12]	; (37b8 <_usb_ep0_on_tansfer_ok+0xd4>)
    37aa:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    37ac:	4b0b      	ldr	r3, [pc, #44]	; (37dc <_usb_ep0_on_tansfer_ok+0xf8>)
    37ae:	4798      	blx	r3
    37b0:	e7a7      	b.n	3702 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    37b2:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <_usb_ep0_on_tansfer_ok+0xfc>)
    37b4:	4798      	blx	r3
    37b6:	e7a4      	b.n	3702 <_usb_ep0_on_tansfer_ok+0x1e>
    37b8:	20000262 	.word	0x20000262
    37bc:	20000588 	.word	0x20000588
    37c0:	2000025e 	.word	0x2000025e
    37c4:	200005a0 	.word	0x200005a0
    37c8:	000093ad 	.word	0x000093ad
    37cc:	00003291 	.word	0x00003291
    37d0:	20000260 	.word	0x20000260
    37d4:	20000420 	.word	0x20000420
    37d8:	000068ad 	.word	0x000068ad
    37dc:	000036b5 	.word	0x000036b5
    37e0:	00003321 	.word	0x00003321

000037e4 <udd_ep_clear_halt>:
{
    37e4:	b570      	push	{r4, r5, r6, lr}
    37e6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    37e8:	230f      	movs	r3, #15
    37ea:	4003      	ands	r3, r0
		return false;
    37ec:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    37ee:	2b02      	cmp	r3, #2
    37f0:	d900      	bls.n	37f4 <udd_ep_clear_halt+0x10>
}
    37f2:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    37f4:	0020      	movs	r0, r4
    37f6:	4b09      	ldr	r3, [pc, #36]	; (381c <udd_ep_clear_halt+0x38>)
    37f8:	4798      	blx	r3
    37fa:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    37fc:	0021      	movs	r1, r4
    37fe:	4808      	ldr	r0, [pc, #32]	; (3820 <udd_ep_clear_halt+0x3c>)
    3800:	4b08      	ldr	r3, [pc, #32]	; (3824 <udd_ep_clear_halt+0x40>)
    3802:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3804:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3806:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3808:	07db      	lsls	r3, r3, #31
    380a:	d5f2      	bpl.n	37f2 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    380c:	7cab      	ldrb	r3, [r5, #18]
    380e:	2201      	movs	r2, #1
    3810:	4393      	bics	r3, r2
    3812:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3814:	682b      	ldr	r3, [r5, #0]
    3816:	4798      	blx	r3
	return true;
    3818:	2001      	movs	r0, #1
    381a:	e7ea      	b.n	37f2 <udd_ep_clear_halt+0xe>
    381c:	00002f39 	.word	0x00002f39
    3820:	20000420 	.word	0x20000420
    3824:	000067d3 	.word	0x000067d3

00003828 <udd_ep_wait_stall_clear>:
{
    3828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    382a:	0004      	movs	r4, r0
    382c:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    382e:	230f      	movs	r3, #15
    3830:	4003      	ands	r3, r0
		return false;
    3832:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3834:	2b02      	cmp	r3, #2
    3836:	d805      	bhi.n	3844 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3838:	4b0d      	ldr	r3, [pc, #52]	; (3870 <udd_ep_wait_stall_clear+0x48>)
    383a:	4798      	blx	r3
    383c:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    383e:	7c83      	ldrb	r3, [r0, #18]
    3840:	07db      	lsls	r3, r3, #31
    3842:	d501      	bpl.n	3848 <udd_ep_wait_stall_clear+0x20>
}
    3844:	0030      	movs	r0, r6
    3846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3848:	0021      	movs	r1, r4
    384a:	480a      	ldr	r0, [pc, #40]	; (3874 <udd_ep_wait_stall_clear+0x4c>)
    384c:	4b0a      	ldr	r3, [pc, #40]	; (3878 <udd_ep_wait_stall_clear+0x50>)
    384e:	4798      	blx	r3
    3850:	1e06      	subs	r6, r0, #0
    3852:	d005      	beq.n	3860 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3854:	7cbb      	ldrb	r3, [r7, #18]
    3856:	2201      	movs	r2, #1
    3858:	4313      	orrs	r3, r2
    385a:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    385c:	603d      	str	r5, [r7, #0]
		return true;
    385e:	e7f1      	b.n	3844 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3860:	0021      	movs	r1, r4
    3862:	4804      	ldr	r0, [pc, #16]	; (3874 <udd_ep_wait_stall_clear+0x4c>)
    3864:	4b05      	ldr	r3, [pc, #20]	; (387c <udd_ep_wait_stall_clear+0x54>)
    3866:	4798      	blx	r3
    3868:	1e06      	subs	r6, r0, #0
    386a:	d0eb      	beq.n	3844 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    386c:	47a8      	blx	r5
		return true;
    386e:	e7e9      	b.n	3844 <udd_ep_wait_stall_clear+0x1c>
    3870:	00002f39 	.word	0x00002f39
    3874:	20000420 	.word	0x20000420
    3878:	00006783 	.word	0x00006783
    387c:	00006721 	.word	0x00006721

00003880 <udd_ep_run>:
{
    3880:	b5f0      	push	{r4, r5, r6, r7, lr}
    3882:	b087      	sub	sp, #28
    3884:	0005      	movs	r5, r0
    3886:	9103      	str	r1, [sp, #12]
    3888:	9202      	str	r2, [sp, #8]
    388a:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    388c:	260f      	movs	r6, #15
    388e:	4006      	ands	r6, r0
		return false;
    3890:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3892:	2e02      	cmp	r6, #2
    3894:	d902      	bls.n	389c <udd_ep_run+0x1c>
}
    3896:	0020      	movs	r0, r4
    3898:	b007      	add	sp, #28
    389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    389c:	4b64      	ldr	r3, [pc, #400]	; (3a30 <udd_ep_run+0x1b0>)
    389e:	4798      	blx	r3
    38a0:	1e04      	subs	r4, r0, #0
    38a2:	d000      	beq.n	38a6 <udd_ep_run+0x26>
    38a4:	e0bd      	b.n	3a22 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    38a6:	0028      	movs	r0, r5
    38a8:	4b62      	ldr	r3, [pc, #392]	; (3a34 <udd_ep_run+0x1b4>)
    38aa:	4798      	blx	r3
    38ac:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    38ae:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    38b2:	425a      	negs	r2, r3
    38b4:	4153      	adcs	r3, r2
    38b6:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    38b8:	b672      	cpsid	i
    38ba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    38be:	2200      	movs	r2, #0
    38c0:	4b5d      	ldr	r3, [pc, #372]	; (3a38 <udd_ep_run+0x1b8>)
    38c2:	701a      	strb	r2, [r3, #0]
	return flags;
    38c4:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    38c6:	7c83      	ldrb	r3, [r0, #18]
    38c8:	07db      	lsls	r3, r3, #31
    38ca:	d508      	bpl.n	38de <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    38cc:	2a00      	cmp	r2, #0
    38ce:	d0e2      	beq.n	3896 <udd_ep_run+0x16>
		cpu_irq_enable();
    38d0:	2201      	movs	r2, #1
    38d2:	4b59      	ldr	r3, [pc, #356]	; (3a38 <udd_ep_run+0x1b8>)
    38d4:	701a      	strb	r2, [r3, #0]
    38d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    38da:	b662      	cpsie	i
    38dc:	e7db      	b.n	3896 <udd_ep_run+0x16>
	ptr_job->busy = true;
    38de:	7c83      	ldrb	r3, [r0, #18]
    38e0:	2101      	movs	r1, #1
    38e2:	430b      	orrs	r3, r1
    38e4:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    38e6:	2a00      	cmp	r2, #0
    38e8:	d005      	beq.n	38f6 <udd_ep_run+0x76>
		cpu_irq_enable();
    38ea:	2201      	movs	r2, #1
    38ec:	4b52      	ldr	r3, [pc, #328]	; (3a38 <udd_ep_run+0x1b8>)
    38ee:	701a      	strb	r2, [r3, #0]
    38f0:	f3bf 8f5f 	dmb	sy
    38f4:	b662      	cpsie	i
	ptr_job->buf = buf;
    38f6:	9b02      	ldr	r3, [sp, #8]
    38f8:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    38fa:	9b01      	ldr	r3, [sp, #4]
    38fc:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    38fe:	2300      	movs	r3, #0
    3900:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3904:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3906:	2301      	movs	r3, #1
    3908:	9a03      	ldr	r2, [sp, #12]
    390a:	4013      	ands	r3, r2
    390c:	005a      	lsls	r2, r3, #1
    390e:	7cbb      	ldrb	r3, [r7, #18]
    3910:	2102      	movs	r1, #2
    3912:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3914:	4313      	orrs	r3, r2
    3916:	2204      	movs	r2, #4
    3918:	4393      	bics	r3, r2
    391a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    391c:	b26b      	sxtb	r3, r5
    391e:	2b00      	cmp	r3, #0
    3920:	db20      	blt.n	3964 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3922:	9b01      	ldr	r3, [sp, #4]
    3924:	2b00      	cmp	r3, #0
    3926:	d06f      	beq.n	3a08 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3928:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    392a:	4b44      	ldr	r3, [pc, #272]	; (3a3c <udd_ep_run+0x1bc>)
    392c:	429c      	cmp	r4, r3
    392e:	d95a      	bls.n	39e6 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3930:	8a39      	ldrh	r1, [r7, #16]
    3932:	001c      	movs	r4, r3
    3934:	0018      	movs	r0, r3
    3936:	4b42      	ldr	r3, [pc, #264]	; (3a40 <udd_ep_run+0x1c0>)
    3938:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    393a:	1a63      	subs	r3, r4, r1
    393c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    393e:	8a3b      	ldrh	r3, [r7, #16]
    3940:	429a      	cmp	r2, r3
    3942:	d257      	bcs.n	39f4 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3944:	7cba      	ldrb	r2, [r7, #18]
    3946:	2104      	movs	r1, #4
    3948:	430a      	orrs	r2, r1
    394a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    394c:	1e72      	subs	r2, r6, #1
    394e:	0192      	lsls	r2, r2, #6
    3950:	493c      	ldr	r1, [pc, #240]	; (3a44 <udd_ep_run+0x1c4>)
    3952:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3954:	0031      	movs	r1, r6
    3956:	483c      	ldr	r0, [pc, #240]	; (3a48 <udd_ep_run+0x1c8>)
    3958:	4c3c      	ldr	r4, [pc, #240]	; (3a4c <udd_ep_run+0x1cc>)
    395a:	47a0      	blx	r4
				return (STATUS_OK ==
    395c:	4244      	negs	r4, r0
    395e:	4144      	adcs	r4, r0
    3960:	b2e4      	uxtb	r4, r4
    3962:	e798      	b.n	3896 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	2b00      	cmp	r3, #0
    3968:	d027      	beq.n	39ba <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    396a:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    396c:	4b33      	ldr	r3, [pc, #204]	; (3a3c <udd_ep_run+0x1bc>)
    396e:	429d      	cmp	r5, r3
    3970:	d906      	bls.n	3980 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3972:	8a39      	ldrh	r1, [r7, #16]
    3974:	001d      	movs	r5, r3
    3976:	0018      	movs	r0, r3
    3978:	4b31      	ldr	r3, [pc, #196]	; (3a40 <udd_ep_run+0x1c0>)
    397a:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    397c:	1a6b      	subs	r3, r5, r1
    397e:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3980:	7cbb      	ldrb	r3, [r7, #18]
    3982:	079b      	lsls	r3, r3, #30
    3984:	d507      	bpl.n	3996 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3986:	8a39      	ldrh	r1, [r7, #16]
    3988:	0028      	movs	r0, r5
    398a:	4b31      	ldr	r3, [pc, #196]	; (3a50 <udd_ep_run+0x1d0>)
    398c:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    398e:	b289      	uxth	r1, r1
    3990:	424c      	negs	r4, r1
    3992:	414c      	adcs	r4, r1
    3994:	b2e4      	uxtb	r4, r4
    3996:	2001      	movs	r0, #1
    3998:	4020      	ands	r0, r4
    399a:	0040      	lsls	r0, r0, #1
    399c:	7cbc      	ldrb	r4, [r7, #18]
    399e:	2302      	movs	r3, #2
    39a0:	439c      	bics	r4, r3
    39a2:	4304      	orrs	r4, r0
    39a4:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    39a6:	002b      	movs	r3, r5
    39a8:	9a02      	ldr	r2, [sp, #8]
    39aa:	0031      	movs	r1, r6
    39ac:	4826      	ldr	r0, [pc, #152]	; (3a48 <udd_ep_run+0x1c8>)
    39ae:	4c29      	ldr	r4, [pc, #164]	; (3a54 <udd_ep_run+0x1d4>)
    39b0:	47a0      	blx	r4
		return (STATUS_OK ==
    39b2:	4244      	negs	r4, r0
    39b4:	4144      	adcs	r4, r0
    39b6:	b2e4      	uxtb	r4, r4
    39b8:	e76d      	b.n	3896 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    39ba:	7cbb      	ldrb	r3, [r7, #18]
    39bc:	079b      	lsls	r3, r3, #30
    39be:	d505      	bpl.n	39cc <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    39c0:	7cbb      	ldrb	r3, [r7, #18]
    39c2:	2202      	movs	r2, #2
    39c4:	4393      	bics	r3, r2
    39c6:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    39c8:	2500      	movs	r5, #0
    39ca:	e7ec      	b.n	39a6 <udd_ep_run+0x126>
			ptr_job->busy = false;
    39cc:	7cbb      	ldrb	r3, [r7, #18]
    39ce:	2201      	movs	r2, #1
    39d0:	4393      	bics	r3, r2
    39d2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    39d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39d6:	2b00      	cmp	r3, #0
    39d8:	d025      	beq.n	3a26 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    39da:	002a      	movs	r2, r5
    39dc:	2100      	movs	r1, #0
    39de:	2000      	movs	r0, #0
    39e0:	4798      	blx	r3
			return true;
    39e2:	2401      	movs	r4, #1
    39e4:	e757      	b.n	3896 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    39e6:	8a39      	ldrh	r1, [r7, #16]
    39e8:	0020      	movs	r0, r4
    39ea:	4b19      	ldr	r3, [pc, #100]	; (3a50 <udd_ep_run+0x1d0>)
    39ec:	4798      	blx	r3
    39ee:	1a63      	subs	r3, r4, r1
    39f0:	b29a      	uxth	r2, r3
    39f2:	e7a4      	b.n	393e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    39f4:	0013      	movs	r3, r2
    39f6:	9a02      	ldr	r2, [sp, #8]
    39f8:	0031      	movs	r1, r6
    39fa:	4813      	ldr	r0, [pc, #76]	; (3a48 <udd_ep_run+0x1c8>)
    39fc:	4c13      	ldr	r4, [pc, #76]	; (3a4c <udd_ep_run+0x1cc>)
    39fe:	47a0      	blx	r4
				return (STATUS_OK ==
    3a00:	4244      	negs	r4, r0
    3a02:	4144      	adcs	r4, r0
    3a04:	b2e4      	uxtb	r4, r4
    3a06:	e746      	b.n	3896 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3a08:	7cbb      	ldrb	r3, [r7, #18]
    3a0a:	2201      	movs	r2, #1
    3a0c:	4393      	bics	r3, r2
    3a0e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3a12:	2b00      	cmp	r3, #0
    3a14:	d009      	beq.n	3a2a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3a16:	002a      	movs	r2, r5
    3a18:	2100      	movs	r1, #0
    3a1a:	2000      	movs	r0, #0
    3a1c:	4798      	blx	r3
			return true;
    3a1e:	2401      	movs	r4, #1
    3a20:	e739      	b.n	3896 <udd_ep_run+0x16>
		return false;
    3a22:	2400      	movs	r4, #0
    3a24:	e737      	b.n	3896 <udd_ep_run+0x16>
			return true;
    3a26:	2401      	movs	r4, #1
    3a28:	e735      	b.n	3896 <udd_ep_run+0x16>
			return true;
    3a2a:	2401      	movs	r4, #1
    3a2c:	e733      	b.n	3896 <udd_ep_run+0x16>
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	000036a1 	.word	0x000036a1
    3a34:	00002f39 	.word	0x00002f39
    3a38:	20000125 	.word	0x20000125
    3a3c:	00001fff 	.word	0x00001fff
    3a40:	000090b1 	.word	0x000090b1
    3a44:	200003a0 	.word	0x200003a0
    3a48:	20000420 	.word	0x20000420
    3a4c:	000068ad 	.word	0x000068ad
    3a50:	00008edd 	.word	0x00008edd
    3a54:	00006859 	.word	0x00006859

00003a58 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3a58:	4b02      	ldr	r3, [pc, #8]	; (3a64 <udd_set_address+0xc>)
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	2280      	movs	r2, #128	; 0x80
    3a5e:	4310      	orrs	r0, r2
    3a60:	7298      	strb	r0, [r3, #10]
}
    3a62:	4770      	bx	lr
    3a64:	20000420 	.word	0x20000420

00003a68 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3a68:	4b02      	ldr	r3, [pc, #8]	; (3a74 <udd_getaddress+0xc>)
    3a6a:	681b      	ldr	r3, [r3, #0]
    3a6c:	7a98      	ldrb	r0, [r3, #10]
    3a6e:	0640      	lsls	r0, r0, #25
    3a70:	0e40      	lsrs	r0, r0, #25
}
    3a72:	4770      	bx	lr
    3a74:	20000420 	.word	0x20000420

00003a78 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3a78:	4b01      	ldr	r3, [pc, #4]	; (3a80 <udd_set_setup_payload+0x8>)
    3a7a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3a7c:	8199      	strh	r1, [r3, #12]
}
    3a7e:	4770      	bx	lr
    3a80:	20000588 	.word	0x20000588

00003a84 <udd_detach>:

void udd_detach(void)
{
    3a84:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3a86:	4b05      	ldr	r3, [pc, #20]	; (3a9c <udd_detach+0x18>)
    3a88:	681a      	ldr	r2, [r3, #0]
    3a8a:	8913      	ldrh	r3, [r2, #8]
    3a8c:	2101      	movs	r1, #1
    3a8e:	430b      	orrs	r3, r1
    3a90:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3a92:	2001      	movs	r0, #1
    3a94:	4b02      	ldr	r3, [pc, #8]	; (3aa0 <udd_detach+0x1c>)
    3a96:	4798      	blx	r3
}
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	20000420 	.word	0x20000420
    3aa0:	00002e79 	.word	0x00002e79

00003aa4 <udd_attach>:

void udd_attach(void)
{
    3aa4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3aa6:	2003      	movs	r0, #3
    3aa8:	4b16      	ldr	r3, [pc, #88]	; (3b04 <udd_attach+0x60>)
    3aaa:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3aac:	4c16      	ldr	r4, [pc, #88]	; (3b08 <udd_attach+0x64>)
    3aae:	6822      	ldr	r2, [r4, #0]
    3ab0:	8913      	ldrh	r3, [r2, #8]
    3ab2:	2101      	movs	r1, #1
    3ab4:	438b      	bics	r3, r1
    3ab6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3ab8:	4a14      	ldr	r2, [pc, #80]	; (3b0c <udd_attach+0x68>)
    3aba:	3103      	adds	r1, #3
    3abc:	0020      	movs	r0, r4
    3abe:	4e14      	ldr	r6, [pc, #80]	; (3b10 <udd_attach+0x6c>)
    3ac0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3ac2:	4a14      	ldr	r2, [pc, #80]	; (3b14 <udd_attach+0x70>)
    3ac4:	2100      	movs	r1, #0
    3ac6:	0020      	movs	r0, r4
    3ac8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3aca:	4a13      	ldr	r2, [pc, #76]	; (3b18 <udd_attach+0x74>)
    3acc:	2101      	movs	r1, #1
    3ace:	0020      	movs	r0, r4
    3ad0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3ad2:	4a12      	ldr	r2, [pc, #72]	; (3b1c <udd_attach+0x78>)
    3ad4:	2102      	movs	r1, #2
    3ad6:	0020      	movs	r0, r4
    3ad8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3ada:	2104      	movs	r1, #4
    3adc:	0020      	movs	r0, r4
    3ade:	4d10      	ldr	r5, [pc, #64]	; (3b20 <udd_attach+0x7c>)
    3ae0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3ae2:	2100      	movs	r1, #0
    3ae4:	0020      	movs	r0, r4
    3ae6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3ae8:	2101      	movs	r1, #1
    3aea:	0020      	movs	r0, r4
    3aec:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3aee:	2102      	movs	r1, #2
    3af0:	0020      	movs	r0, r4
    3af2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3af4:	4a0b      	ldr	r2, [pc, #44]	; (3b24 <udd_attach+0x80>)
    3af6:	2106      	movs	r1, #6
    3af8:	0020      	movs	r0, r4
    3afa:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3afc:	2106      	movs	r1, #6
    3afe:	0020      	movs	r0, r4
    3b00:	47a8      	blx	r5
#endif
}
    3b02:	bd70      	pop	{r4, r5, r6, pc}
    3b04:	00002e79 	.word	0x00002e79
    3b08:	20000420 	.word	0x20000420
    3b0c:	000034c1 	.word	0x000034c1
    3b10:	0000627d 	.word	0x0000627d
    3b14:	000034ad 	.word	0x000034ad
    3b18:	000031e1 	.word	0x000031e1
    3b1c:	00003171 	.word	0x00003171
    3b20:	000062a1 	.word	0x000062a1
    3b24:	0000313d 	.word	0x0000313d

00003b28 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3b28:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3b2a:	2100      	movs	r1, #0
    3b2c:	200e      	movs	r0, #14
    3b2e:	4b08      	ldr	r3, [pc, #32]	; (3b50 <_uhd_vbus_handler+0x28>)
    3b30:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3b32:	4b08      	ldr	r3, [pc, #32]	; (3b54 <_uhd_vbus_handler+0x2c>)
    3b34:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3b36:	045b      	lsls	r3, r3, #17
    3b38:	d406      	bmi.n	3b48 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3b3a:	4b07      	ldr	r3, [pc, #28]	; (3b58 <_uhd_vbus_handler+0x30>)
    3b3c:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3b3e:	2100      	movs	r1, #0
    3b40:	200e      	movs	r0, #14
    3b42:	4b06      	ldr	r3, [pc, #24]	; (3b5c <_uhd_vbus_handler+0x34>)
    3b44:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3b46:	bd10      	pop	{r4, pc}
		udd_attach();
    3b48:	4b05      	ldr	r3, [pc, #20]	; (3b60 <_uhd_vbus_handler+0x38>)
    3b4a:	4798      	blx	r3
    3b4c:	e7f7      	b.n	3b3e <_uhd_vbus_handler+0x16>
    3b4e:	46c0      	nop			; (mov r8, r8)
    3b50:	00007165 	.word	0x00007165
    3b54:	41004400 	.word	0x41004400
    3b58:	00003a85 	.word	0x00003a85
    3b5c:	00007145 	.word	0x00007145
    3b60:	00003aa5 	.word	0x00003aa5

00003b64 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b68:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b6c:	425a      	negs	r2, r3
    3b6e:	4153      	adcs	r3, r2
    3b70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3b72:	b672      	cpsid	i
    3b74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b78:	2600      	movs	r6, #0
    3b7a:	4b29      	ldr	r3, [pc, #164]	; (3c20 <udd_enable+0xbc>)
    3b7c:	701e      	strb	r6, [r3, #0]
	return flags;
    3b7e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3b80:	ac05      	add	r4, sp, #20
    3b82:	0020      	movs	r0, r4
    3b84:	4b27      	ldr	r3, [pc, #156]	; (3c24 <udd_enable+0xc0>)
    3b86:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3b88:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3b8a:	4e27      	ldr	r6, [pc, #156]	; (3c28 <udd_enable+0xc4>)
    3b8c:	0022      	movs	r2, r4
    3b8e:	4927      	ldr	r1, [pc, #156]	; (3c2c <udd_enable+0xc8>)
    3b90:	0030      	movs	r0, r6
    3b92:	4b27      	ldr	r3, [pc, #156]	; (3c30 <udd_enable+0xcc>)
    3b94:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3b96:	0030      	movs	r0, r6
    3b98:	4b26      	ldr	r3, [pc, #152]	; (3c34 <udd_enable+0xd0>)
    3b9a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3b9c:	4b26      	ldr	r3, [pc, #152]	; (3c38 <udd_enable+0xd4>)
    3b9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3ba0:	069b      	lsls	r3, r3, #26
    3ba2:	d434      	bmi.n	3c0e <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3ba4:	4924      	ldr	r1, [pc, #144]	; (3c38 <udd_enable+0xd4>)
    3ba6:	22d0      	movs	r2, #208	; 0xd0
    3ba8:	68cb      	ldr	r3, [r1, #12]
    3baa:	4013      	ands	r3, r2
    3bac:	2bd0      	cmp	r3, #208	; 0xd0
    3bae:	d1fb      	bne.n	3ba8 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3bb0:	2001      	movs	r0, #1
    3bb2:	4b22      	ldr	r3, [pc, #136]	; (3c3c <udd_enable+0xd8>)
    3bb4:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3bb6:	ac02      	add	r4, sp, #8
    3bb8:	0020      	movs	r0, r4
    3bba:	4b21      	ldr	r3, [pc, #132]	; (3c40 <udd_enable+0xdc>)
    3bbc:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3bbe:	230e      	movs	r3, #14
    3bc0:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3bc2:	2300      	movs	r3, #0
    3bc4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3bc6:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3bc8:	3303      	adds	r3, #3
    3bca:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3bcc:	3b02      	subs	r3, #2
    3bce:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3bd0:	2100      	movs	r1, #0
    3bd2:	200e      	movs	r0, #14
    3bd4:	4b1b      	ldr	r3, [pc, #108]	; (3c44 <udd_enable+0xe0>)
    3bd6:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3bd8:	0021      	movs	r1, r4
    3bda:	200e      	movs	r0, #14
    3bdc:	4b1a      	ldr	r3, [pc, #104]	; (3c48 <udd_enable+0xe4>)
    3bde:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3be0:	2200      	movs	r2, #0
    3be2:	210e      	movs	r1, #14
    3be4:	4819      	ldr	r0, [pc, #100]	; (3c4c <udd_enable+0xe8>)
    3be6:	4b1a      	ldr	r3, [pc, #104]	; (3c50 <udd_enable+0xec>)
    3be8:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3bea:	2100      	movs	r1, #0
    3bec:	200e      	movs	r0, #14
    3bee:	4b19      	ldr	r3, [pc, #100]	; (3c54 <udd_enable+0xf0>)
    3bf0:	4798      	blx	r3
    3bf2:	4b19      	ldr	r3, [pc, #100]	; (3c58 <udd_enable+0xf4>)
    3bf4:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3bf6:	045b      	lsls	r3, r3, #17
    3bf8:	d40f      	bmi.n	3c1a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3bfa:	2d00      	cmp	r5, #0
    3bfc:	d005      	beq.n	3c0a <udd_enable+0xa6>
		cpu_irq_enable();
    3bfe:	2201      	movs	r2, #1
    3c00:	4b07      	ldr	r3, [pc, #28]	; (3c20 <udd_enable+0xbc>)
    3c02:	701a      	strb	r2, [r3, #0]
    3c04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3c08:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3c0a:	b006      	add	sp, #24
    3c0c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3c0e:	490a      	ldr	r1, [pc, #40]	; (3c38 <udd_enable+0xd4>)
    3c10:	2210      	movs	r2, #16
    3c12:	68cb      	ldr	r3, [r1, #12]
    3c14:	421a      	tst	r2, r3
    3c16:	d0fc      	beq.n	3c12 <udd_enable+0xae>
    3c18:	e7ca      	b.n	3bb0 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3c1a:	4b0c      	ldr	r3, [pc, #48]	; (3c4c <udd_enable+0xe8>)
    3c1c:	4798      	blx	r3
    3c1e:	e7ec      	b.n	3bfa <udd_enable+0x96>
    3c20:	20000125 	.word	0x20000125
    3c24:	00006f09 	.word	0x00006f09
    3c28:	20000420 	.word	0x20000420
    3c2c:	41005000 	.word	0x41005000
    3c30:	00006f19 	.word	0x00006f19
    3c34:	0000692d 	.word	0x0000692d
    3c38:	40000800 	.word	0x40000800
    3c3c:	00002e79 	.word	0x00002e79
    3c40:	000020a9 	.word	0x000020a9
    3c44:	00007165 	.word	0x00007165
    3c48:	000020bd 	.word	0x000020bd
    3c4c:	00003b29 	.word	0x00003b29
    3c50:	00007119 	.word	0x00007119
    3c54:	00007145 	.word	0x00007145
    3c58:	41004400 	.word	0x41004400

00003c5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5e:	46c6      	mov	lr, r8
    3c60:	b500      	push	{lr}
    3c62:	000c      	movs	r4, r1
    3c64:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3c66:	2800      	cmp	r0, #0
    3c68:	d10f      	bne.n	3c8a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3c6a:	2a00      	cmp	r2, #0
    3c6c:	dd11      	ble.n	3c92 <_read+0x36>
    3c6e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3c70:	4e09      	ldr	r6, [pc, #36]	; (3c98 <_read+0x3c>)
    3c72:	4d0a      	ldr	r5, [pc, #40]	; (3c9c <_read+0x40>)
    3c74:	6830      	ldr	r0, [r6, #0]
    3c76:	0021      	movs	r1, r4
    3c78:	682b      	ldr	r3, [r5, #0]
    3c7a:	4798      	blx	r3
		ptr++;
    3c7c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3c7e:	42bc      	cmp	r4, r7
    3c80:	d1f8      	bne.n	3c74 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3c82:	4640      	mov	r0, r8
    3c84:	bc04      	pop	{r2}
    3c86:	4690      	mov	r8, r2
    3c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3c8a:	2301      	movs	r3, #1
    3c8c:	425b      	negs	r3, r3
    3c8e:	4698      	mov	r8, r3
    3c90:	e7f7      	b.n	3c82 <_read+0x26>
	for (; len > 0; --len) {
    3c92:	4680      	mov	r8, r0
    3c94:	e7f5      	b.n	3c82 <_read+0x26>
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	200005e8 	.word	0x200005e8
    3c9c:	200005e0 	.word	0x200005e0

00003ca0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca2:	46c6      	mov	lr, r8
    3ca4:	b500      	push	{lr}
    3ca6:	000e      	movs	r6, r1
    3ca8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3caa:	3801      	subs	r0, #1
    3cac:	2802      	cmp	r0, #2
    3cae:	d810      	bhi.n	3cd2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3cb0:	2a00      	cmp	r2, #0
    3cb2:	d011      	beq.n	3cd8 <_write+0x38>
    3cb4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3cb6:	4b0c      	ldr	r3, [pc, #48]	; (3ce8 <_write+0x48>)
    3cb8:	4698      	mov	r8, r3
    3cba:	4f0c      	ldr	r7, [pc, #48]	; (3cec <_write+0x4c>)
    3cbc:	4643      	mov	r3, r8
    3cbe:	6818      	ldr	r0, [r3, #0]
    3cc0:	5d31      	ldrb	r1, [r6, r4]
    3cc2:	683b      	ldr	r3, [r7, #0]
    3cc4:	4798      	blx	r3
    3cc6:	2800      	cmp	r0, #0
    3cc8:	db08      	blt.n	3cdc <_write+0x3c>
			return -1;
		}
		++nChars;
    3cca:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3ccc:	42a5      	cmp	r5, r4
    3cce:	d1f5      	bne.n	3cbc <_write+0x1c>
    3cd0:	e006      	b.n	3ce0 <_write+0x40>
		return -1;
    3cd2:	2401      	movs	r4, #1
    3cd4:	4264      	negs	r4, r4
    3cd6:	e003      	b.n	3ce0 <_write+0x40>
	for (; len != 0; --len) {
    3cd8:	0014      	movs	r4, r2
    3cda:	e001      	b.n	3ce0 <_write+0x40>
			return -1;
    3cdc:	2401      	movs	r4, #1
    3cde:	4264      	negs	r4, r4
	}
	return nChars;
}
    3ce0:	0020      	movs	r0, r4
    3ce2:	bc04      	pop	{r2}
    3ce4:	4690      	mov	r8, r2
    3ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce8:	200005e8 	.word	0x200005e8
    3cec:	200005e4 	.word	0x200005e4

00003cf0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3cf0:	b530      	push	{r4, r5, lr}
    3cf2:	b087      	sub	sp, #28
    3cf4:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3cf6:	aa01      	add	r2, sp, #4
    3cf8:	23a0      	movs	r3, #160	; 0xa0
    3cfa:	011b      	lsls	r3, r3, #4
    3cfc:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3cfe:	2300      	movs	r3, #0
    3d00:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3d02:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3d04:	21fa      	movs	r1, #250	; 0xfa
    3d06:	00c9      	lsls	r1, r1, #3
    3d08:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3d0a:	2101      	movs	r1, #1
    3d0c:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3d0e:	2004      	movs	r0, #4
    3d10:	7210      	strb	r0, [r2, #8]
    3d12:	7253      	strb	r3, [r2, #9]
    3d14:	7293      	strb	r3, [r2, #10]
    3d16:	72d3      	strb	r3, [r2, #11]
    3d18:	7311      	strb	r1, [r2, #12]
    3d1a:	7351      	strb	r1, [r2, #13]
    3d1c:	4b14      	ldr	r3, [pc, #80]	; (3d70 <disk_initialize+0x80>)
    3d1e:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3d20:	2306      	movs	r3, #6
    3d22:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3d24:	4d13      	ldr	r5, [pc, #76]	; (3d74 <disk_initialize+0x84>)
    3d26:	4914      	ldr	r1, [pc, #80]	; (3d78 <disk_initialize+0x88>)
    3d28:	0028      	movs	r0, r5
    3d2a:	4b14      	ldr	r3, [pc, #80]	; (3d7c <disk_initialize+0x8c>)
    3d2c:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3d2e:	0028      	movs	r0, r5
    3d30:	4b13      	ldr	r3, [pc, #76]	; (3d80 <disk_initialize+0x90>)
    3d32:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3d34:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    3d36:	2c01      	cmp	r4, #1
    3d38:	d901      	bls.n	3d3e <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3d3a:	b007      	add	sp, #28
    3d3c:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    3d3e:	0020      	movs	r0, r4
    3d40:	4b10      	ldr	r3, [pc, #64]	; (3d84 <disk_initialize+0x94>)
    3d42:	4798      	blx	r3
    3d44:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    3d46:	2803      	cmp	r0, #3
    3d48:	d106      	bne.n	3d58 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    3d4a:	0020      	movs	r0, r4
    3d4c:	4b0d      	ldr	r3, [pc, #52]	; (3d84 <disk_initialize+0x94>)
    3d4e:	4798      	blx	r3
    3d50:	0003      	movs	r3, r0
		return STA_NOINIT;
    3d52:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3d54:	2b03      	cmp	r3, #3
    3d56:	d0f0      	beq.n	3d3a <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d106      	bne.n	3d6a <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3d5c:	0020      	movs	r0, r4
    3d5e:	4b0a      	ldr	r3, [pc, #40]	; (3d88 <disk_initialize+0x98>)
    3d60:	4798      	blx	r3
	return 0;
    3d62:	1e43      	subs	r3, r0, #1
    3d64:	4198      	sbcs	r0, r3
    3d66:	0080      	lsls	r0, r0, #2
    3d68:	e7e7      	b.n	3d3a <disk_initialize+0x4a>
		return STA_NOINIT;
    3d6a:	2001      	movs	r0, #1
    3d6c:	e7e5      	b.n	3d3a <disk_initialize+0x4a>
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	000007de 	.word	0x000007de
    3d74:	200005ec 	.word	0x200005ec
    3d78:	40001400 	.word	0x40001400
    3d7c:	00002291 	.word	0x00002291
    3d80:	00002135 	.word	0x00002135
    3d84:	000086f5 	.word	0x000086f5
    3d88:	00008741 	.word	0x00008741

00003d8c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3d8c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3d8e:	4b05      	ldr	r3, [pc, #20]	; (3da4 <disk_status+0x18>)
    3d90:	4798      	blx	r3
    3d92:	1e03      	subs	r3, r0, #0
    3d94:	d004      	beq.n	3da0 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3d96:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3d98:	2b02      	cmp	r3, #2
    3d9a:	d000      	beq.n	3d9e <disk_status+0x12>
	default:
		return STA_NOINIT;
    3d9c:	3802      	subs	r0, #2
	}
}
    3d9e:	bd10      	pop	{r4, pc}
		return 0;
    3da0:	2000      	movs	r0, #0
    3da2:	e7fc      	b.n	3d9e <disk_status+0x12>
    3da4:	000086f5 	.word	0x000086f5

00003da8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3daa:	46de      	mov	lr, fp
    3dac:	464f      	mov	r7, r9
    3dae:	4646      	mov	r6, r8
    3db0:	b5c0      	push	{r6, r7, lr}
    3db2:	b084      	sub	sp, #16
    3db4:	9001      	str	r0, [sp, #4]
    3db6:	000d      	movs	r5, r1
    3db8:	0014      	movs	r4, r2
    3dba:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3dbc:	4b18      	ldr	r3, [pc, #96]	; (3e20 <disk_read+0x78>)
    3dbe:	4798      	blx	r3
    3dc0:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3dc2:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3dc4:	2e00      	cmp	r6, #0
    3dc6:	d105      	bne.n	3dd4 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3dc8:	b004      	add	sp, #16
    3dca:	bc1c      	pop	{r2, r3, r4}
    3dcc:	4690      	mov	r8, r2
    3dce:	4699      	mov	r9, r3
    3dd0:	46a3      	mov	fp, r4
    3dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3dd4:	a903      	add	r1, sp, #12
    3dd6:	9801      	ldr	r0, [sp, #4]
    3dd8:	4b12      	ldr	r3, [pc, #72]	; (3e24 <disk_read+0x7c>)
    3dda:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3ddc:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3dde:	0032      	movs	r2, r6
    3de0:	437a      	muls	r2, r7
    3de2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3de4:	9b03      	ldr	r3, [sp, #12]
    3de6:	3301      	adds	r3, #1
    3de8:	4373      	muls	r3, r6
		return RES_PARERR;
    3dea:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3dec:	429a      	cmp	r2, r3
    3dee:	d8eb      	bhi.n	3dc8 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3df0:	2f00      	cmp	r7, #0
    3df2:	d011      	beq.n	3e18 <disk_read+0x70>
    3df4:	0273      	lsls	r3, r6, #9
    3df6:	4698      	mov	r8, r3
    3df8:	1c7b      	adds	r3, r7, #1
    3dfa:	469b      	mov	fp, r3
    3dfc:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3dfe:	4e0a      	ldr	r6, [pc, #40]	; (3e28 <disk_read+0x80>)
    3e00:	002a      	movs	r2, r5
    3e02:	0021      	movs	r1, r4
    3e04:	9801      	ldr	r0, [sp, #4]
    3e06:	47b0      	blx	r6
    3e08:	2800      	cmp	r0, #0
    3e0a:	d107      	bne.n	3e1c <disk_read+0x74>
    3e0c:	3701      	adds	r7, #1
    3e0e:	444c      	add	r4, r9
    3e10:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3e12:	455f      	cmp	r7, fp
    3e14:	d1f4      	bne.n	3e00 <disk_read+0x58>
    3e16:	e7d7      	b.n	3dc8 <disk_read+0x20>
	return RES_OK;
    3e18:	2000      	movs	r0, #0
    3e1a:	e7d5      	b.n	3dc8 <disk_read+0x20>
			return RES_ERROR;
    3e1c:	2001      	movs	r0, #1
    3e1e:	e7d3      	b.n	3dc8 <disk_read+0x20>
    3e20:	00008729 	.word	0x00008729
    3e24:	0000870d 	.word	0x0000870d
    3e28:	000087e9 	.word	0x000087e9

00003e2c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e2e:	46de      	mov	lr, fp
    3e30:	464f      	mov	r7, r9
    3e32:	4646      	mov	r6, r8
    3e34:	b5c0      	push	{r6, r7, lr}
    3e36:	b084      	sub	sp, #16
    3e38:	9001      	str	r0, [sp, #4]
    3e3a:	000d      	movs	r5, r1
    3e3c:	0014      	movs	r4, r2
    3e3e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3e40:	4b18      	ldr	r3, [pc, #96]	; (3ea4 <disk_write+0x78>)
    3e42:	4798      	blx	r3
    3e44:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3e46:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3e48:	2e00      	cmp	r6, #0
    3e4a:	d105      	bne.n	3e58 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3e4c:	b004      	add	sp, #16
    3e4e:	bc1c      	pop	{r2, r3, r4}
    3e50:	4690      	mov	r8, r2
    3e52:	4699      	mov	r9, r3
    3e54:	46a3      	mov	fp, r4
    3e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3e58:	a903      	add	r1, sp, #12
    3e5a:	9801      	ldr	r0, [sp, #4]
    3e5c:	4b12      	ldr	r3, [pc, #72]	; (3ea8 <disk_write+0x7c>)
    3e5e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3e60:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3e62:	0032      	movs	r2, r6
    3e64:	437a      	muls	r2, r7
    3e66:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3e68:	9b03      	ldr	r3, [sp, #12]
    3e6a:	3301      	adds	r3, #1
    3e6c:	4373      	muls	r3, r6
		return RES_PARERR;
    3e6e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3e70:	429a      	cmp	r2, r3
    3e72:	d8eb      	bhi.n	3e4c <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3e74:	2f00      	cmp	r7, #0
    3e76:	d011      	beq.n	3e9c <disk_write+0x70>
    3e78:	0273      	lsls	r3, r6, #9
    3e7a:	4698      	mov	r8, r3
    3e7c:	1c7b      	adds	r3, r7, #1
    3e7e:	469b      	mov	fp, r3
    3e80:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3e82:	4e0a      	ldr	r6, [pc, #40]	; (3eac <disk_write+0x80>)
    3e84:	002a      	movs	r2, r5
    3e86:	0021      	movs	r1, r4
    3e88:	9801      	ldr	r0, [sp, #4]
    3e8a:	47b0      	blx	r6
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d107      	bne.n	3ea0 <disk_write+0x74>
    3e90:	3701      	adds	r7, #1
    3e92:	444c      	add	r4, r9
    3e94:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3e96:	455f      	cmp	r7, fp
    3e98:	d1f4      	bne.n	3e84 <disk_write+0x58>
    3e9a:	e7d7      	b.n	3e4c <disk_write+0x20>
	return RES_OK;
    3e9c:	2000      	movs	r0, #0
    3e9e:	e7d5      	b.n	3e4c <disk_write+0x20>
			return RES_ERROR;
    3ea0:	2001      	movs	r0, #1
    3ea2:	e7d3      	b.n	3e4c <disk_write+0x20>
    3ea4:	00008729 	.word	0x00008729
    3ea8:	0000870d 	.word	0x0000870d
    3eac:	0000881d 	.word	0x0000881d

00003eb0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3eb0:	b510      	push	{r4, lr}
    3eb2:	b082      	sub	sp, #8
    3eb4:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3eb6:	2901      	cmp	r1, #1
    3eb8:	d00b      	beq.n	3ed2 <disk_ioctl+0x22>
    3eba:	2900      	cmp	r1, #0
    3ebc:	d020      	beq.n	3f00 <disk_ioctl+0x50>
    3ebe:	2902      	cmp	r1, #2
    3ec0:	d00f      	beq.n	3ee2 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3ec2:	2004      	movs	r0, #4
	switch (ctrl) {
    3ec4:	2903      	cmp	r1, #3
    3ec6:	d102      	bne.n	3ece <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3ec8:	2301      	movs	r3, #1
    3eca:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3ecc:	2000      	movs	r0, #0
	}

	return res;
}
    3ece:	b002      	add	sp, #8
    3ed0:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3ed2:	a901      	add	r1, sp, #4
    3ed4:	4b0e      	ldr	r3, [pc, #56]	; (3f10 <disk_ioctl+0x60>)
    3ed6:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3ed8:	9b01      	ldr	r3, [sp, #4]
    3eda:	3301      	adds	r3, #1
    3edc:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3ede:	2000      	movs	r0, #0
	break;
    3ee0:	e7f5      	b.n	3ece <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3ee2:	4b0c      	ldr	r3, [pc, #48]	; (3f14 <disk_ioctl+0x64>)
    3ee4:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3ee6:	1e43      	subs	r3, r0, #1
    3ee8:	b2db      	uxtb	r3, r3
    3eea:	2b01      	cmp	r3, #1
    3eec:	d904      	bls.n	3ef8 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3eee:	1f03      	subs	r3, r0, #4
    3ef0:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    3ef2:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3ef4:	4213      	tst	r3, r2
    3ef6:	d1ea      	bne.n	3ece <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3ef8:	2300      	movs	r3, #0
    3efa:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3efc:	2000      	movs	r0, #0
	break;
    3efe:	e7e6      	b.n	3ece <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3f00:	4b05      	ldr	r3, [pc, #20]	; (3f18 <disk_ioctl+0x68>)
    3f02:	4798      	blx	r3
    3f04:	2800      	cmp	r0, #0
    3f06:	d001      	beq.n	3f0c <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3f08:	2003      	movs	r0, #3
    3f0a:	e7e0      	b.n	3ece <disk_ioctl+0x1e>
			res = RES_OK;
    3f0c:	2000      	movs	r0, #0
    3f0e:	e7de      	b.n	3ece <disk_ioctl+0x1e>
    3f10:	0000870d 	.word	0x0000870d
    3f14:	00008729 	.word	0x00008729
    3f18:	000086f5 	.word	0x000086f5

00003f1c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3f1c:	b500      	push	{lr}
    3f1e:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3f20:	4669      	mov	r1, sp
    3f22:	480f      	ldr	r0, [pc, #60]	; (3f60 <get_fattime+0x44>)
    3f24:	4b0f      	ldr	r3, [pc, #60]	; (3f64 <get_fattime+0x48>)
    3f26:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3f28:	466b      	mov	r3, sp
    3f2a:	7958      	ldrb	r0, [r3, #5]
    3f2c:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3f2e:	791b      	ldrb	r3, [r3, #4]
    3f30:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    3f32:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    3f34:	466b      	mov	r3, sp
    3f36:	789b      	ldrb	r3, [r3, #2]
    3f38:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    3f3a:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    3f3c:	466b      	mov	r3, sp
    3f3e:	785b      	ldrb	r3, [r3, #1]
    3f40:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    3f42:	4318      	orrs	r0, r3
    3f44:	466b      	mov	r3, sp
    3f46:	781b      	ldrb	r3, [r3, #0]
    3f48:	085b      	lsrs	r3, r3, #1
    3f4a:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3f4c:	466b      	mov	r3, sp
    3f4e:	88db      	ldrh	r3, [r3, #6]
    3f50:	4a05      	ldr	r2, [pc, #20]	; (3f68 <get_fattime+0x4c>)
    3f52:	4694      	mov	ip, r2
    3f54:	4463      	add	r3, ip
    3f56:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    3f58:	4318      	orrs	r0, r3

	return ul_time;
}
    3f5a:	b003      	add	sp, #12
    3f5c:	bd00      	pop	{pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	200005ec 	.word	0x200005ec
    3f64:	00002219 	.word	0x00002219
    3f68:	fffff844 	.word	0xfffff844

00003f6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3f6c:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3f6e:	2a00      	cmp	r2, #0
    3f70:	d005      	beq.n	3f7e <mem_cpy+0x12>
    3f72:	2300      	movs	r3, #0
		*d++ = *s++;
    3f74:	5ccc      	ldrb	r4, [r1, r3]
    3f76:	54c4      	strb	r4, [r0, r3]
    3f78:	3301      	adds	r3, #1
	while (cnt--)
    3f7a:	4293      	cmp	r3, r2
    3f7c:	d1fa      	bne.n	3f74 <mem_cpy+0x8>
}
    3f7e:	bd10      	pop	{r4, pc}

00003f80 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3f80:	2a00      	cmp	r2, #0
    3f82:	d005      	beq.n	3f90 <mem_set+0x10>
    3f84:	0003      	movs	r3, r0
    3f86:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3f88:	7019      	strb	r1, [r3, #0]
    3f8a:	3301      	adds	r3, #1
	while (cnt--)
    3f8c:	4293      	cmp	r3, r2
    3f8e:	d1fb      	bne.n	3f88 <mem_set+0x8>
}
    3f90:	4770      	bx	lr

00003f92 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3f92:	0002      	movs	r2, r0
	clst -= 2;
    3f94:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3f96:	6983      	ldr	r3, [r0, #24]
    3f98:	3b02      	subs	r3, #2
    3f9a:	2000      	movs	r0, #0
    3f9c:	4299      	cmp	r1, r3
    3f9e:	d203      	bcs.n	3fa8 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3fa0:	7890      	ldrb	r0, [r2, #2]
    3fa2:	4341      	muls	r1, r0
    3fa4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3fa6:	1808      	adds	r0, r1, r0
}
    3fa8:	4770      	bx	lr

00003faa <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3faa:	0002      	movs	r2, r0
    3fac:	0001      	movs	r1, r0
    3fae:	310b      	adds	r1, #11
	BYTE sum = 0;
    3fb0:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3fb2:	0843      	lsrs	r3, r0, #1
    3fb4:	01c0      	lsls	r0, r0, #7
    3fb6:	4303      	orrs	r3, r0
    3fb8:	7810      	ldrb	r0, [r2, #0]
    3fba:	1818      	adds	r0, r3, r0
    3fbc:	b2c0      	uxtb	r0, r0
    3fbe:	3201      	adds	r2, #1
    3fc0:	428a      	cmp	r2, r1
    3fc2:	d1f6      	bne.n	3fb2 <sum_sfn+0x8>
	return sum;
}
    3fc4:	4770      	bx	lr
	...

00003fc8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3fc8:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3fca:	2800      	cmp	r0, #0
    3fcc:	d010      	beq.n	3ff0 <validate+0x28>
    3fce:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3fd0:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3fd2:	2a00      	cmp	r2, #0
    3fd4:	d101      	bne.n	3fda <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3fd6:	0018      	movs	r0, r3
    3fd8:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3fda:	88c2      	ldrh	r2, [r0, #6]
    3fdc:	428a      	cmp	r2, r1
    3fde:	d1fa      	bne.n	3fd6 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3fe0:	7840      	ldrb	r0, [r0, #1]
    3fe2:	4b04      	ldr	r3, [pc, #16]	; (3ff4 <validate+0x2c>)
    3fe4:	4798      	blx	r3
		return FR_NOT_READY;
    3fe6:	2303      	movs	r3, #3
	return FR_OK;
    3fe8:	07c0      	lsls	r0, r0, #31
    3fea:	17c0      	asrs	r0, r0, #31
    3fec:	4003      	ands	r3, r0
    3fee:	e7f2      	b.n	3fd6 <validate+0xe>
		return FR_INVALID_OBJECT;
    3ff0:	2309      	movs	r3, #9
    3ff2:	e7f0      	b.n	3fd6 <validate+0xe>
    3ff4:	00003d8d 	.word	0x00003d8d

00003ff8 <check_fs>:
{
    3ff8:	b570      	push	{r4, r5, r6, lr}
    3ffa:	0004      	movs	r4, r0
    3ffc:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3ffe:	0001      	movs	r1, r0
    4000:	3130      	adds	r1, #48	; 0x30
    4002:	7840      	ldrb	r0, [r0, #1]
    4004:	2301      	movs	r3, #1
    4006:	4d1f      	ldr	r5, [pc, #124]	; (4084 <check_fs+0x8c>)
    4008:	47a8      	blx	r5
		return 3;
    400a:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    400c:	2800      	cmp	r0, #0
    400e:	d001      	beq.n	4014 <check_fs+0x1c>
}
    4010:	0018      	movs	r0, r3
    4012:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    4014:	4b1c      	ldr	r3, [pc, #112]	; (4088 <check_fs+0x90>)
    4016:	5ce3      	ldrb	r3, [r4, r3]
    4018:	021b      	lsls	r3, r3, #8
    401a:	4a1c      	ldr	r2, [pc, #112]	; (408c <check_fs+0x94>)
    401c:	5ca2      	ldrb	r2, [r4, r2]
    401e:	431a      	orrs	r2, r3
    4020:	491b      	ldr	r1, [pc, #108]	; (4090 <check_fs+0x98>)
    4022:	b212      	sxth	r2, r2
		return 2;
    4024:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    4026:	428a      	cmp	r2, r1
    4028:	d1f2      	bne.n	4010 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    402a:	3367      	adds	r3, #103	; 0x67
    402c:	5ce3      	ldrb	r3, [r4, r3]
    402e:	061b      	lsls	r3, r3, #24
    4030:	2268      	movs	r2, #104	; 0x68
    4032:	5ca2      	ldrb	r2, [r4, r2]
    4034:	0412      	lsls	r2, r2, #16
    4036:	4313      	orrs	r3, r2
    4038:	2266      	movs	r2, #102	; 0x66
    403a:	5ca2      	ldrb	r2, [r4, r2]
    403c:	4313      	orrs	r3, r2
    403e:	2267      	movs	r2, #103	; 0x67
    4040:	5ca2      	ldrb	r2, [r4, r2]
    4042:	0212      	lsls	r2, r2, #8
    4044:	4313      	orrs	r3, r2
    4046:	021b      	lsls	r3, r3, #8
    4048:	0a1b      	lsrs	r3, r3, #8
    404a:	4a12      	ldr	r2, [pc, #72]	; (4094 <check_fs+0x9c>)
    404c:	4293      	cmp	r3, r2
    404e:	d016      	beq.n	407e <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    4050:	2385      	movs	r3, #133	; 0x85
    4052:	5ce3      	ldrb	r3, [r4, r3]
    4054:	061b      	lsls	r3, r3, #24
    4056:	2284      	movs	r2, #132	; 0x84
    4058:	5ca2      	ldrb	r2, [r4, r2]
    405a:	0412      	lsls	r2, r2, #16
    405c:	4313      	orrs	r3, r2
    405e:	2282      	movs	r2, #130	; 0x82
    4060:	5ca2      	ldrb	r2, [r4, r2]
    4062:	4313      	orrs	r3, r2
    4064:	2283      	movs	r2, #131	; 0x83
    4066:	5ca2      	ldrb	r2, [r4, r2]
    4068:	0212      	lsls	r2, r2, #8
    406a:	4313      	orrs	r3, r2
    406c:	021b      	lsls	r3, r3, #8
    406e:	0a1b      	lsrs	r3, r3, #8
    4070:	4a09      	ldr	r2, [pc, #36]	; (4098 <check_fs+0xa0>)
    4072:	4694      	mov	ip, r2
    4074:	4463      	add	r3, ip
    4076:	1e58      	subs	r0, r3, #1
    4078:	4183      	sbcs	r3, r0
		return 3;
    407a:	b2db      	uxtb	r3, r3
    407c:	e7c8      	b.n	4010 <check_fs+0x18>
		return 0;
    407e:	2300      	movs	r3, #0
    4080:	e7c6      	b.n	4010 <check_fs+0x18>
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	00003da9 	.word	0x00003da9
    4088:	0000022f 	.word	0x0000022f
    408c:	0000022e 	.word	0x0000022e
    4090:	ffffaa55 	.word	0xffffaa55
    4094:	00544146 	.word	0x00544146
    4098:	ffabbeba 	.word	0xffabbeba

0000409c <chk_mounted>:
{
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	46d6      	mov	lr, sl
    40a0:	464f      	mov	r7, r9
    40a2:	4646      	mov	r6, r8
    40a4:	b5c0      	push	{r6, r7, lr}
    40a6:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    40a8:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    40aa:	781c      	ldrb	r4, [r3, #0]
    40ac:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    40ae:	2c09      	cmp	r4, #9
    40b0:	d80e      	bhi.n	40d0 <chk_mounted+0x34>
    40b2:	785a      	ldrb	r2, [r3, #1]
    40b4:	2a3a      	cmp	r2, #58	; 0x3a
    40b6:	d001      	beq.n	40bc <chk_mounted+0x20>
    40b8:	2400      	movs	r4, #0
    40ba:	e00a      	b.n	40d2 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    40bc:	3302      	adds	r3, #2
    40be:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    40c0:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    40c2:	2c03      	cmp	r4, #3
    40c4:	d905      	bls.n	40d2 <chk_mounted+0x36>
}
    40c6:	bc1c      	pop	{r2, r3, r4}
    40c8:	4690      	mov	r8, r2
    40ca:	4699      	mov	r9, r3
    40cc:	46a2      	mov	sl, r4
    40ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40d0:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    40d2:	00a3      	lsls	r3, r4, #2
    40d4:	4ac5      	ldr	r2, [pc, #788]	; (43ec <chk_mounted+0x350>)
    40d6:	589e      	ldr	r6, [r3, r2]
    40d8:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    40da:	2e00      	cmp	r6, #0
    40dc:	d100      	bne.n	40e0 <chk_mounted+0x44>
    40de:	e0e8      	b.n	42b2 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    40e0:	7833      	ldrb	r3, [r6, #0]
    40e2:	2b00      	cmp	r3, #0
    40e4:	d00d      	beq.n	4102 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    40e6:	7870      	ldrb	r0, [r6, #1]
    40e8:	4bc1      	ldr	r3, [pc, #772]	; (43f0 <chk_mounted+0x354>)
    40ea:	4798      	blx	r3
    40ec:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    40ee:	07c2      	lsls	r2, r0, #31
    40f0:	d407      	bmi.n	4102 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    40f2:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    40f4:	2d00      	cmp	r5, #0
    40f6:	d0e6      	beq.n	40c6 <chk_mounted+0x2a>
    40f8:	075b      	lsls	r3, r3, #29
    40fa:	d400      	bmi.n	40fe <chk_mounted+0x62>
    40fc:	e0db      	b.n	42b6 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    40fe:	300a      	adds	r0, #10
    4100:	e7e1      	b.n	40c6 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    4102:	2300      	movs	r3, #0
    4104:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    4106:	b2e0      	uxtb	r0, r4
    4108:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    410a:	4bba      	ldr	r3, [pc, #744]	; (43f4 <chk_mounted+0x358>)
    410c:	4798      	blx	r3
    410e:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    4110:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    4112:	07da      	lsls	r2, r3, #31
    4114:	d4d7      	bmi.n	40c6 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    4116:	2d00      	cmp	r5, #0
    4118:	d002      	beq.n	4120 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    411a:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    411c:	075b      	lsls	r3, r3, #29
    411e:	d4d2      	bmi.n	40c6 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    4120:	2100      	movs	r1, #0
    4122:	0030      	movs	r0, r6
    4124:	4bb4      	ldr	r3, [pc, #720]	; (43f8 <chk_mounted+0x35c>)
    4126:	4798      	blx	r3
    4128:	0003      	movs	r3, r0
    412a:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    412c:	2801      	cmp	r0, #1
    412e:	d100      	bne.n	4132 <chk_mounted+0x96>
    4130:	e09a      	b.n	4268 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    4132:	2b03      	cmp	r3, #3
    4134:	d100      	bne.n	4138 <chk_mounted+0x9c>
    4136:	e0c0      	b.n	42ba <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4138:	200d      	movs	r0, #13
    413a:	2b00      	cmp	r3, #0
    413c:	d1c3      	bne.n	40c6 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    413e:	333c      	adds	r3, #60	; 0x3c
    4140:	5cf2      	ldrb	r2, [r6, r3]
    4142:	0212      	lsls	r2, r2, #8
    4144:	3b01      	subs	r3, #1
    4146:	5cf3      	ldrb	r3, [r6, r3]
    4148:	4313      	orrs	r3, r2
    414a:	2280      	movs	r2, #128	; 0x80
    414c:	0092      	lsls	r2, r2, #2
    414e:	b21b      	sxth	r3, r3
    4150:	4293      	cmp	r3, r2
    4152:	d1b8      	bne.n	40c6 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    4154:	2347      	movs	r3, #71	; 0x47
    4156:	5cf3      	ldrb	r3, [r6, r3]
    4158:	021b      	lsls	r3, r3, #8
    415a:	3abb      	subs	r2, #187	; 0xbb
    415c:	3aff      	subs	r2, #255	; 0xff
    415e:	5cb5      	ldrb	r5, [r6, r2]
    4160:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    4162:	d10d      	bne.n	4180 <chk_mounted+0xe4>
    4164:	2357      	movs	r3, #87	; 0x57
    4166:	5cf5      	ldrb	r5, [r6, r3]
    4168:	062d      	lsls	r5, r5, #24
    416a:	3b01      	subs	r3, #1
    416c:	5cf3      	ldrb	r3, [r6, r3]
    416e:	041b      	lsls	r3, r3, #16
    4170:	431d      	orrs	r5, r3
    4172:	2354      	movs	r3, #84	; 0x54
    4174:	5cf3      	ldrb	r3, [r6, r3]
    4176:	431d      	orrs	r5, r3
    4178:	2355      	movs	r3, #85	; 0x55
    417a:	5cf3      	ldrb	r3, [r6, r3]
    417c:	021b      	lsls	r3, r3, #8
    417e:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    4180:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    4182:	2340      	movs	r3, #64	; 0x40
    4184:	5cf2      	ldrb	r2, [r6, r3]
    4186:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    4188:	1e53      	subs	r3, r2, #1
    418a:	200d      	movs	r0, #13
    418c:	2b01      	cmp	r3, #1
    418e:	d89a      	bhi.n	40c6 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    4190:	233d      	movs	r3, #61	; 0x3d
    4192:	5cf1      	ldrb	r1, [r6, r3]
    4194:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    4196:	2900      	cmp	r1, #0
    4198:	d095      	beq.n	40c6 <chk_mounted+0x2a>
    419a:	1e4b      	subs	r3, r1, #1
    419c:	4219      	tst	r1, r3
    419e:	d192      	bne.n	40c6 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    41a0:	2342      	movs	r3, #66	; 0x42
    41a2:	5cf3      	ldrb	r3, [r6, r3]
    41a4:	021b      	lsls	r3, r3, #8
    41a6:	3034      	adds	r0, #52	; 0x34
    41a8:	5c30      	ldrb	r0, [r6, r0]
    41aa:	4318      	orrs	r0, r3
    41ac:	4680      	mov	r8, r0
    41ae:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    41b0:	200d      	movs	r0, #13
    41b2:	4643      	mov	r3, r8
    41b4:	071b      	lsls	r3, r3, #28
    41b6:	d000      	beq.n	41ba <chk_mounted+0x11e>
    41b8:	e785      	b.n	40c6 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    41ba:	2344      	movs	r3, #68	; 0x44
    41bc:	5cf3      	ldrb	r3, [r6, r3]
    41be:	021b      	lsls	r3, r3, #8
    41c0:	3036      	adds	r0, #54	; 0x36
    41c2:	5c30      	ldrb	r0, [r6, r0]
    41c4:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    41c6:	d10d      	bne.n	41e4 <chk_mounted+0x148>
    41c8:	3353      	adds	r3, #83	; 0x53
    41ca:	5cf3      	ldrb	r3, [r6, r3]
    41cc:	061b      	lsls	r3, r3, #24
    41ce:	2052      	movs	r0, #82	; 0x52
    41d0:	5c30      	ldrb	r0, [r6, r0]
    41d2:	0400      	lsls	r0, r0, #16
    41d4:	4303      	orrs	r3, r0
    41d6:	2050      	movs	r0, #80	; 0x50
    41d8:	5c30      	ldrb	r0, [r6, r0]
    41da:	4303      	orrs	r3, r0
    41dc:	2051      	movs	r0, #81	; 0x51
    41de:	5c30      	ldrb	r0, [r6, r0]
    41e0:	0200      	lsls	r0, r0, #8
    41e2:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    41e4:	203f      	movs	r0, #63	; 0x3f
    41e6:	5c30      	ldrb	r0, [r6, r0]
    41e8:	0200      	lsls	r0, r0, #8
    41ea:	273e      	movs	r7, #62	; 0x3e
    41ec:	5df7      	ldrb	r7, [r6, r7]
    41ee:	4307      	orrs	r7, r0
    41f0:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    41f2:	200d      	movs	r0, #13
    41f4:	2f00      	cmp	r7, #0
    41f6:	d100      	bne.n	41fa <chk_mounted+0x15e>
    41f8:	e765      	b.n	40c6 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    41fa:	436a      	muls	r2, r5
    41fc:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    41fe:	4642      	mov	r2, r8
    4200:	0917      	lsrs	r7, r2, #4
    4202:	4457      	add	r7, sl
    4204:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    4206:	42bb      	cmp	r3, r7
    4208:	d200      	bcs.n	420c <chk_mounted+0x170>
    420a:	e75c      	b.n	40c6 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    420c:	1bd8      	subs	r0, r3, r7
    420e:	4b7b      	ldr	r3, [pc, #492]	; (43fc <chk_mounted+0x360>)
    4210:	4798      	blx	r3
    4212:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    4214:	200d      	movs	r0, #13
    4216:	2b00      	cmp	r3, #0
    4218:	d100      	bne.n	421c <chk_mounted+0x180>
    421a:	e754      	b.n	40c6 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    421c:	4a78      	ldr	r2, [pc, #480]	; (4400 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    421e:	429a      	cmp	r2, r3
    4220:	4192      	sbcs	r2, r2
    4222:	4252      	negs	r2, r2
    4224:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    4226:	4977      	ldr	r1, [pc, #476]	; (4404 <chk_mounted+0x368>)
    4228:	428b      	cmp	r3, r1
    422a:	d848      	bhi.n	42be <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    422c:	3302      	adds	r3, #2
    422e:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    4230:	19e7      	adds	r7, r4, r7
    4232:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    4234:	4454      	add	r4, sl
    4236:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    4238:	200d      	movs	r0, #13
    423a:	4641      	mov	r1, r8
    423c:	2900      	cmp	r1, #0
    423e:	d100      	bne.n	4242 <chk_mounted+0x1a6>
    4240:	e741      	b.n	40c6 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    4242:	444c      	add	r4, r9
    4244:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    4246:	2a02      	cmp	r2, #2
    4248:	d12c      	bne.n	42a4 <chk_mounted+0x208>
    424a:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    424c:	496e      	ldr	r1, [pc, #440]	; (4408 <chk_mounted+0x36c>)
    424e:	468c      	mov	ip, r1
    4250:	4463      	add	r3, ip
    4252:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    4254:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4256:	429d      	cmp	r5, r3
    4258:	d200      	bcs.n	425c <chk_mounted+0x1c0>
    425a:	e734      	b.n	40c6 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    425c:	2301      	movs	r3, #1
    425e:	425b      	negs	r3, r3
    4260:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    4262:	2300      	movs	r3, #0
    4264:	60f3      	str	r3, [r6, #12]
    4266:	e0b6      	b.n	43d6 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    4268:	33f2      	adds	r3, #242	; 0xf2
    426a:	33ff      	adds	r3, #255	; 0xff
    426c:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    426e:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    4270:	2b00      	cmp	r3, #0
    4272:	d100      	bne.n	4276 <chk_mounted+0x1da>
    4274:	e727      	b.n	40c6 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    4276:	23fa      	movs	r3, #250	; 0xfa
    4278:	33ff      	adds	r3, #255	; 0xff
    427a:	5cf4      	ldrb	r4, [r6, r3]
    427c:	0624      	lsls	r4, r4, #24
    427e:	3b01      	subs	r3, #1
    4280:	5cf3      	ldrb	r3, [r6, r3]
    4282:	041b      	lsls	r3, r3, #16
    4284:	431c      	orrs	r4, r3
    4286:	23fb      	movs	r3, #251	; 0xfb
    4288:	005b      	lsls	r3, r3, #1
    428a:	5cf3      	ldrb	r3, [r6, r3]
    428c:	431c      	orrs	r4, r3
    428e:	23f8      	movs	r3, #248	; 0xf8
    4290:	33ff      	adds	r3, #255	; 0xff
    4292:	5cf2      	ldrb	r2, [r6, r3]
    4294:	0212      	lsls	r2, r2, #8
    4296:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    4298:	0021      	movs	r1, r4
    429a:	0030      	movs	r0, r6
    429c:	4b56      	ldr	r3, [pc, #344]	; (43f8 <chk_mounted+0x35c>)
    429e:	4798      	blx	r3
    42a0:	0003      	movs	r3, r0
    42a2:	e746      	b.n	4132 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    42a4:	2103      	movs	r1, #3
    42a6:	4359      	muls	r1, r3
    42a8:	0849      	lsrs	r1, r1, #1
    42aa:	2001      	movs	r0, #1
    42ac:	4003      	ands	r3, r0
    42ae:	18cb      	adds	r3, r1, r3
    42b0:	e7cc      	b.n	424c <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    42b2:	200c      	movs	r0, #12
    42b4:	e707      	b.n	40c6 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    42b6:	2000      	movs	r0, #0
    42b8:	e705      	b.n	40c6 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    42ba:	2001      	movs	r0, #1
    42bc:	e703      	b.n	40c6 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    42be:	3302      	adds	r3, #2
    42c0:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    42c2:	19e7      	adds	r7, r4, r7
    42c4:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    42c6:	4652      	mov	r2, sl
    42c8:	18a2      	adds	r2, r4, r2
    42ca:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    42cc:	200d      	movs	r0, #13
    42ce:	4642      	mov	r2, r8
    42d0:	2a00      	cmp	r2, #0
    42d2:	d000      	beq.n	42d6 <chk_mounted+0x23a>
    42d4:	e6f7      	b.n	40c6 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    42d6:	225f      	movs	r2, #95	; 0x5f
    42d8:	5cb2      	ldrb	r2, [r6, r2]
    42da:	0612      	lsls	r2, r2, #24
    42dc:	215e      	movs	r1, #94	; 0x5e
    42de:	5c71      	ldrb	r1, [r6, r1]
    42e0:	0409      	lsls	r1, r1, #16
    42e2:	430a      	orrs	r2, r1
    42e4:	215c      	movs	r1, #92	; 0x5c
    42e6:	5c71      	ldrb	r1, [r6, r1]
    42e8:	430a      	orrs	r2, r1
    42ea:	215d      	movs	r1, #93	; 0x5d
    42ec:	5c71      	ldrb	r1, [r6, r1]
    42ee:	0209      	lsls	r1, r1, #8
    42f0:	430a      	orrs	r2, r1
    42f2:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    42f4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    42f6:	4a44      	ldr	r2, [pc, #272]	; (4408 <chk_mounted+0x36c>)
    42f8:	4694      	mov	ip, r2
    42fa:	4463      	add	r3, ip
    42fc:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    42fe:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4300:	429d      	cmp	r5, r3
    4302:	d200      	bcs.n	4306 <chk_mounted+0x26a>
    4304:	e6df      	b.n	40c6 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    4306:	2301      	movs	r3, #1
    4308:	425b      	negs	r3, r3
    430a:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    430c:	2300      	movs	r3, #0
    430e:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    4310:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    4312:	3361      	adds	r3, #97	; 0x61
    4314:	5cf3      	ldrb	r3, [r6, r3]
    4316:	021b      	lsls	r3, r3, #8
    4318:	2260      	movs	r2, #96	; 0x60
    431a:	5cb2      	ldrb	r2, [r6, r2]
    431c:	431a      	orrs	r2, r3
    431e:	1912      	adds	r2, r2, r4
    4320:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    4322:	0031      	movs	r1, r6
    4324:	3130      	adds	r1, #48	; 0x30
    4326:	7870      	ldrb	r0, [r6, #1]
    4328:	2301      	movs	r3, #1
    432a:	4c38      	ldr	r4, [pc, #224]	; (440c <chk_mounted+0x370>)
    432c:	47a0      	blx	r4
    432e:	2203      	movs	r2, #3
    4330:	2800      	cmp	r0, #0
    4332:	d150      	bne.n	43d6 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    4334:	4b36      	ldr	r3, [pc, #216]	; (4410 <chk_mounted+0x374>)
    4336:	5cf2      	ldrb	r2, [r6, r3]
    4338:	0212      	lsls	r2, r2, #8
    433a:	4b36      	ldr	r3, [pc, #216]	; (4414 <chk_mounted+0x378>)
    433c:	5cf3      	ldrb	r3, [r6, r3]
    433e:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    4340:	4935      	ldr	r1, [pc, #212]	; (4418 <chk_mounted+0x37c>)
    4342:	b21b      	sxth	r3, r3
    4344:	2203      	movs	r2, #3
    4346:	428b      	cmp	r3, r1
    4348:	d145      	bne.n	43d6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    434a:	2333      	movs	r3, #51	; 0x33
    434c:	5cf3      	ldrb	r3, [r6, r3]
    434e:	061b      	lsls	r3, r3, #24
    4350:	322f      	adds	r2, #47	; 0x2f
    4352:	5cb2      	ldrb	r2, [r6, r2]
    4354:	0412      	lsls	r2, r2, #16
    4356:	4313      	orrs	r3, r2
    4358:	2230      	movs	r2, #48	; 0x30
    435a:	5cb2      	ldrb	r2, [r6, r2]
    435c:	4313      	orrs	r3, r2
    435e:	2231      	movs	r2, #49	; 0x31
    4360:	5cb2      	ldrb	r2, [r6, r2]
    4362:	0212      	lsls	r2, r2, #8
    4364:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    4366:	492d      	ldr	r1, [pc, #180]	; (441c <chk_mounted+0x380>)
    4368:	2203      	movs	r2, #3
    436a:	428b      	cmp	r3, r1
    436c:	d133      	bne.n	43d6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    436e:	4b2c      	ldr	r3, [pc, #176]	; (4420 <chk_mounted+0x384>)
    4370:	5cf3      	ldrb	r3, [r6, r3]
    4372:	061b      	lsls	r3, r3, #24
    4374:	4a2b      	ldr	r2, [pc, #172]	; (4424 <chk_mounted+0x388>)
    4376:	5cb2      	ldrb	r2, [r6, r2]
    4378:	0412      	lsls	r2, r2, #16
    437a:	4313      	orrs	r3, r2
    437c:	2285      	movs	r2, #133	; 0x85
    437e:	0092      	lsls	r2, r2, #2
    4380:	5cb2      	ldrb	r2, [r6, r2]
    4382:	4313      	orrs	r3, r2
    4384:	4a28      	ldr	r2, [pc, #160]	; (4428 <chk_mounted+0x38c>)
    4386:	5cb2      	ldrb	r2, [r6, r2]
    4388:	0212      	lsls	r2, r2, #8
    438a:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    438c:	4927      	ldr	r1, [pc, #156]	; (442c <chk_mounted+0x390>)
    438e:	2203      	movs	r2, #3
    4390:	428b      	cmp	r3, r1
    4392:	d120      	bne.n	43d6 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    4394:	4b26      	ldr	r3, [pc, #152]	; (4430 <chk_mounted+0x394>)
    4396:	5cf3      	ldrb	r3, [r6, r3]
    4398:	061b      	lsls	r3, r3, #24
    439a:	4a26      	ldr	r2, [pc, #152]	; (4434 <chk_mounted+0x398>)
    439c:	5cb2      	ldrb	r2, [r6, r2]
    439e:	0412      	lsls	r2, r2, #16
    43a0:	4313      	orrs	r3, r2
    43a2:	2287      	movs	r2, #135	; 0x87
    43a4:	0092      	lsls	r2, r2, #2
    43a6:	5cb2      	ldrb	r2, [r6, r2]
    43a8:	4313      	orrs	r3, r2
    43aa:	4a23      	ldr	r2, [pc, #140]	; (4438 <chk_mounted+0x39c>)
    43ac:	5cb2      	ldrb	r2, [r6, r2]
    43ae:	0212      	lsls	r2, r2, #8
    43b0:	4313      	orrs	r3, r2
    43b2:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    43b4:	4b21      	ldr	r3, [pc, #132]	; (443c <chk_mounted+0x3a0>)
    43b6:	5cf3      	ldrb	r3, [r6, r3]
    43b8:	061b      	lsls	r3, r3, #24
    43ba:	4a21      	ldr	r2, [pc, #132]	; (4440 <chk_mounted+0x3a4>)
    43bc:	5cb2      	ldrb	r2, [r6, r2]
    43be:	0412      	lsls	r2, r2, #16
    43c0:	4313      	orrs	r3, r2
    43c2:	2286      	movs	r2, #134	; 0x86
    43c4:	0092      	lsls	r2, r2, #2
    43c6:	5cb2      	ldrb	r2, [r6, r2]
    43c8:	4313      	orrs	r3, r2
    43ca:	4a1e      	ldr	r2, [pc, #120]	; (4444 <chk_mounted+0x3a8>)
    43cc:	5cb2      	ldrb	r2, [r6, r2]
    43ce:	0212      	lsls	r2, r2, #8
    43d0:	4313      	orrs	r3, r2
    43d2:	6133      	str	r3, [r6, #16]
    43d4:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    43d6:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    43d8:	4a1b      	ldr	r2, [pc, #108]	; (4448 <chk_mounted+0x3ac>)
    43da:	8813      	ldrh	r3, [r2, #0]
    43dc:	3301      	adds	r3, #1
    43de:	b29b      	uxth	r3, r3
    43e0:	8013      	strh	r3, [r2, #0]
    43e2:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    43e4:	2000      	movs	r0, #0
    43e6:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    43e8:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    43ea:	e66c      	b.n	40c6 <chk_mounted+0x2a>
    43ec:	200002b8 	.word	0x200002b8
    43f0:	00003d8d 	.word	0x00003d8d
    43f4:	00003cf1 	.word	0x00003cf1
    43f8:	00003ff9 	.word	0x00003ff9
    43fc:	00008dd1 	.word	0x00008dd1
    4400:	00000ff5 	.word	0x00000ff5
    4404:	0000fff5 	.word	0x0000fff5
    4408:	000001ff 	.word	0x000001ff
    440c:	00003da9 	.word	0x00003da9
    4410:	0000022f 	.word	0x0000022f
    4414:	0000022e 	.word	0x0000022e
    4418:	ffffaa55 	.word	0xffffaa55
    441c:	41615252 	.word	0x41615252
    4420:	00000217 	.word	0x00000217
    4424:	00000216 	.word	0x00000216
    4428:	00000215 	.word	0x00000215
    442c:	61417272 	.word	0x61417272
    4430:	0000021f 	.word	0x0000021f
    4434:	0000021e 	.word	0x0000021e
    4438:	0000021d 	.word	0x0000021d
    443c:	0000021b 	.word	0x0000021b
    4440:	0000021a 	.word	0x0000021a
    4444:	00000219 	.word	0x00000219
    4448:	200002c8 	.word	0x200002c8

0000444c <move_window>:
{
    444c:	b5f0      	push	{r4, r5, r6, r7, lr}
    444e:	46ce      	mov	lr, r9
    4450:	b500      	push	{lr}
    4452:	b082      	sub	sp, #8
    4454:	0004      	movs	r4, r0
    4456:	000f      	movs	r7, r1
	wsect = fs->winsect;
    4458:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    445a:	428d      	cmp	r5, r1
    445c:	d03f      	beq.n	44de <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    445e:	7903      	ldrb	r3, [r0, #4]
    4460:	2b00      	cmp	r3, #0
    4462:	d107      	bne.n	4474 <move_window+0x28>
	return FR_OK;
    4464:	2300      	movs	r3, #0
		if (sector) {
    4466:	2f00      	cmp	r7, #0
    4468:	d12c      	bne.n	44c4 <move_window+0x78>
}
    446a:	0018      	movs	r0, r3
    446c:	b002      	add	sp, #8
    446e:	bc04      	pop	{r2}
    4470:	4691      	mov	r9, r2
    4472:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4474:	2330      	movs	r3, #48	; 0x30
    4476:	469c      	mov	ip, r3
    4478:	4484      	add	ip, r0
    447a:	4663      	mov	r3, ip
    447c:	4661      	mov	r1, ip
    447e:	9301      	str	r3, [sp, #4]
    4480:	7840      	ldrb	r0, [r0, #1]
    4482:	2301      	movs	r3, #1
    4484:	002a      	movs	r2, r5
    4486:	4e17      	ldr	r6, [pc, #92]	; (44e4 <move_window+0x98>)
    4488:	47b0      	blx	r6
				return FR_DISK_ERR;
    448a:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    448c:	2800      	cmp	r0, #0
    448e:	d1ec      	bne.n	446a <move_window+0x1e>
			fs->wflag = 0;
    4490:	2300      	movs	r3, #0
    4492:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4494:	6a23      	ldr	r3, [r4, #32]
    4496:	69e2      	ldr	r2, [r4, #28]
    4498:	4694      	mov	ip, r2
    449a:	4463      	add	r3, ip
    449c:	429d      	cmp	r5, r3
    449e:	d2e1      	bcs.n	4464 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    44a0:	78e6      	ldrb	r6, [r4, #3]
    44a2:	2e01      	cmp	r6, #1
    44a4:	d9de      	bls.n	4464 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    44a6:	4b0f      	ldr	r3, [pc, #60]	; (44e4 <move_window+0x98>)
    44a8:	4699      	mov	r9, r3
					wsect += fs->fsize;
    44aa:	69e3      	ldr	r3, [r4, #28]
    44ac:	469c      	mov	ip, r3
    44ae:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    44b0:	7860      	ldrb	r0, [r4, #1]
    44b2:	2301      	movs	r3, #1
    44b4:	002a      	movs	r2, r5
    44b6:	9901      	ldr	r1, [sp, #4]
    44b8:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    44ba:	3e01      	subs	r6, #1
    44bc:	b2f6      	uxtb	r6, r6
    44be:	2e01      	cmp	r6, #1
    44c0:	d1f3      	bne.n	44aa <move_window+0x5e>
    44c2:	e7cf      	b.n	4464 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    44c4:	0021      	movs	r1, r4
    44c6:	3130      	adds	r1, #48	; 0x30
    44c8:	7860      	ldrb	r0, [r4, #1]
    44ca:	3301      	adds	r3, #1
    44cc:	003a      	movs	r2, r7
    44ce:	4d06      	ldr	r5, [pc, #24]	; (44e8 <move_window+0x9c>)
    44d0:	47a8      	blx	r5
				return FR_DISK_ERR;
    44d2:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    44d4:	2800      	cmp	r0, #0
    44d6:	d1c8      	bne.n	446a <move_window+0x1e>
			fs->winsect = sector;
    44d8:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    44da:	2300      	movs	r3, #0
    44dc:	e7c5      	b.n	446a <move_window+0x1e>
    44de:	2300      	movs	r3, #0
    44e0:	e7c3      	b.n	446a <move_window+0x1e>
    44e2:	46c0      	nop			; (mov r8, r8)
    44e4:	00003e2d 	.word	0x00003e2d
    44e8:	00003da9 	.word	0x00003da9

000044ec <get_fat>:
{
    44ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ee:	0005      	movs	r5, r0
    44f0:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    44f2:	2901      	cmp	r1, #1
    44f4:	d974      	bls.n	45e0 <get_fat+0xf4>
		return 1;
    44f6:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    44f8:	69ab      	ldr	r3, [r5, #24]
    44fa:	4299      	cmp	r1, r3
    44fc:	d271      	bcs.n	45e2 <get_fat+0xf6>
	switch (fs->fs_type) {
    44fe:	782b      	ldrb	r3, [r5, #0]
    4500:	2b02      	cmp	r3, #2
    4502:	d034      	beq.n	456e <get_fat+0x82>
    4504:	2b03      	cmp	r3, #3
    4506:	d049      	beq.n	459c <get_fat+0xb0>
    4508:	2b01      	cmp	r3, #1
    450a:	d002      	beq.n	4512 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    450c:	2001      	movs	r0, #1
    450e:	4240      	negs	r0, r0
    4510:	e067      	b.n	45e2 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    4512:	084e      	lsrs	r6, r1, #1
    4514:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4516:	0a71      	lsrs	r1, r6, #9
    4518:	6a2b      	ldr	r3, [r5, #32]
    451a:	469c      	mov	ip, r3
    451c:	4461      	add	r1, ip
    451e:	0028      	movs	r0, r5
    4520:	4b30      	ldr	r3, [pc, #192]	; (45e4 <get_fat+0xf8>)
    4522:	4798      	blx	r3
    4524:	2800      	cmp	r0, #0
    4526:	d002      	beq.n	452e <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4528:	2001      	movs	r0, #1
    452a:	4240      	negs	r0, r0
    452c:	e059      	b.n	45e2 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    452e:	05f3      	lsls	r3, r6, #23
    4530:	0ddb      	lsrs	r3, r3, #23
    4532:	18eb      	adds	r3, r5, r3
    4534:	3330      	adds	r3, #48	; 0x30
    4536:	781f      	ldrb	r7, [r3, #0]
    4538:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    453a:	0a71      	lsrs	r1, r6, #9
    453c:	6a2b      	ldr	r3, [r5, #32]
    453e:	469c      	mov	ip, r3
    4540:	4461      	add	r1, ip
    4542:	0028      	movs	r0, r5
    4544:	4b27      	ldr	r3, [pc, #156]	; (45e4 <get_fat+0xf8>)
    4546:	4798      	blx	r3
    4548:	2800      	cmp	r0, #0
    454a:	d002      	beq.n	4552 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    454c:	2001      	movs	r0, #1
    454e:	4240      	negs	r0, r0
    4550:	e047      	b.n	45e2 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    4552:	05f6      	lsls	r6, r6, #23
    4554:	0df6      	lsrs	r6, r6, #23
    4556:	19ad      	adds	r5, r5, r6
    4558:	3530      	adds	r5, #48	; 0x30
    455a:	7828      	ldrb	r0, [r5, #0]
    455c:	0200      	lsls	r0, r0, #8
    455e:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4560:	07e3      	lsls	r3, r4, #31
    4562:	d501      	bpl.n	4568 <get_fat+0x7c>
    4564:	0900      	lsrs	r0, r0, #4
    4566:	e03c      	b.n	45e2 <get_fat+0xf6>
    4568:	0500      	lsls	r0, r0, #20
    456a:	0d00      	lsrs	r0, r0, #20
    456c:	e039      	b.n	45e2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    456e:	0a09      	lsrs	r1, r1, #8
    4570:	6a2b      	ldr	r3, [r5, #32]
    4572:	469c      	mov	ip, r3
    4574:	4461      	add	r1, ip
    4576:	0028      	movs	r0, r5
    4578:	4b1a      	ldr	r3, [pc, #104]	; (45e4 <get_fat+0xf8>)
    457a:	4798      	blx	r3
    457c:	2800      	cmp	r0, #0
    457e:	d002      	beq.n	4586 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4580:	2001      	movs	r0, #1
    4582:	4240      	negs	r0, r0
    4584:	e02d      	b.n	45e2 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    4586:	0064      	lsls	r4, r4, #1
    4588:	23ff      	movs	r3, #255	; 0xff
    458a:	005b      	lsls	r3, r3, #1
    458c:	401c      	ands	r4, r3
		return LD_WORD(p);
    458e:	192d      	adds	r5, r5, r4
    4590:	3530      	adds	r5, #48	; 0x30
    4592:	786b      	ldrb	r3, [r5, #1]
    4594:	021b      	lsls	r3, r3, #8
    4596:	7828      	ldrb	r0, [r5, #0]
    4598:	4318      	orrs	r0, r3
    459a:	e022      	b.n	45e2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    459c:	09c9      	lsrs	r1, r1, #7
    459e:	6a2b      	ldr	r3, [r5, #32]
    45a0:	469c      	mov	ip, r3
    45a2:	4461      	add	r1, ip
    45a4:	0028      	movs	r0, r5
    45a6:	4b0f      	ldr	r3, [pc, #60]	; (45e4 <get_fat+0xf8>)
    45a8:	4798      	blx	r3
    45aa:	2800      	cmp	r0, #0
    45ac:	d002      	beq.n	45b4 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    45ae:	2001      	movs	r0, #1
    45b0:	4240      	negs	r0, r0
    45b2:	e016      	b.n	45e2 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    45b4:	00a4      	lsls	r4, r4, #2
    45b6:	23fe      	movs	r3, #254	; 0xfe
    45b8:	005b      	lsls	r3, r3, #1
    45ba:	401c      	ands	r4, r3
    45bc:	0023      	movs	r3, r4
    45be:	3330      	adds	r3, #48	; 0x30
    45c0:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    45c2:	78d8      	ldrb	r0, [r3, #3]
    45c4:	0600      	lsls	r0, r0, #24
    45c6:	789a      	ldrb	r2, [r3, #2]
    45c8:	0412      	lsls	r2, r2, #16
    45ca:	4310      	orrs	r0, r2
    45cc:	192c      	adds	r4, r5, r4
    45ce:	3430      	adds	r4, #48	; 0x30
    45d0:	7822      	ldrb	r2, [r4, #0]
    45d2:	4310      	orrs	r0, r2
    45d4:	785b      	ldrb	r3, [r3, #1]
    45d6:	021b      	lsls	r3, r3, #8
    45d8:	4318      	orrs	r0, r3
    45da:	0100      	lsls	r0, r0, #4
    45dc:	0900      	lsrs	r0, r0, #4
    45de:	e000      	b.n	45e2 <get_fat+0xf6>
		return 1;
    45e0:	2001      	movs	r0, #1
}
    45e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e4:	0000444d 	.word	0x0000444d

000045e8 <dir_sdi>:
{
    45e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ea:	0004      	movs	r4, r0
    45ec:	000d      	movs	r5, r1
	dj->index = idx;
    45ee:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    45f0:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    45f2:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    45f4:	2901      	cmp	r1, #1
    45f6:	d003      	beq.n	4600 <dir_sdi+0x18>
    45f8:	6823      	ldr	r3, [r4, #0]
    45fa:	699a      	ldr	r2, [r3, #24]
    45fc:	4291      	cmp	r1, r2
    45fe:	d300      	bcc.n	4602 <dir_sdi+0x1a>
}
    4600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4602:	2900      	cmp	r1, #0
    4604:	d119      	bne.n	463a <dir_sdi+0x52>
    4606:	781a      	ldrb	r2, [r3, #0]
    4608:	2a03      	cmp	r2, #3
    460a:	d013      	beq.n	4634 <dir_sdi+0x4c>
		dj->clust = clst;
    460c:	2200      	movs	r2, #0
    460e:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4610:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    4612:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4614:	42aa      	cmp	r2, r5
    4616:	d9f3      	bls.n	4600 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4618:	092a      	lsrs	r2, r5, #4
    461a:	b292      	uxth	r2, r2
    461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    461e:	189b      	adds	r3, r3, r2
    4620:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4622:	6823      	ldr	r3, [r4, #0]
    4624:	3330      	adds	r3, #48	; 0x30
    4626:	220f      	movs	r2, #15
    4628:	4015      	ands	r5, r2
    462a:	016d      	lsls	r5, r5, #5
    462c:	195d      	adds	r5, r3, r5
    462e:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    4630:	2000      	movs	r0, #0
    4632:	e7e5      	b.n	4600 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4634:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4636:	2900      	cmp	r1, #0
    4638:	d0e8      	beq.n	460c <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    463a:	789e      	ldrb	r6, [r3, #2]
    463c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    463e:	42b5      	cmp	r5, r6
    4640:	d313      	bcc.n	466a <dir_sdi+0x82>
    4642:	1bad      	subs	r5, r5, r6
    4644:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    4646:	4f10      	ldr	r7, [pc, #64]	; (4688 <dir_sdi+0xa0>)
    4648:	e000      	b.n	464c <dir_sdi+0x64>
    464a:	001d      	movs	r5, r3
    464c:	6820      	ldr	r0, [r4, #0]
    464e:	47b8      	blx	r7
    4650:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4652:	1c43      	adds	r3, r0, #1
    4654:	d012      	beq.n	467c <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4656:	2801      	cmp	r0, #1
    4658:	d912      	bls.n	4680 <dir_sdi+0x98>
    465a:	6823      	ldr	r3, [r4, #0]
    465c:	699b      	ldr	r3, [r3, #24]
    465e:	4298      	cmp	r0, r3
    4660:	d210      	bcs.n	4684 <dir_sdi+0x9c>
    4662:	1bab      	subs	r3, r5, r6
    4664:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    4666:	42b5      	cmp	r5, r6
    4668:	d2ef      	bcs.n	464a <dir_sdi+0x62>
		dj->clust = clst;
    466a:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    466c:	6820      	ldr	r0, [r4, #0]
    466e:	4b07      	ldr	r3, [pc, #28]	; (468c <dir_sdi+0xa4>)
    4670:	4798      	blx	r3
    4672:	092b      	lsrs	r3, r5, #4
    4674:	b29b      	uxth	r3, r3
    4676:	1818      	adds	r0, r3, r0
    4678:	6120      	str	r0, [r4, #16]
    467a:	e7d2      	b.n	4622 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    467c:	2001      	movs	r0, #1
    467e:	e7bf      	b.n	4600 <dir_sdi+0x18>
				return FR_INT_ERR;
    4680:	2002      	movs	r0, #2
    4682:	e7bd      	b.n	4600 <dir_sdi+0x18>
    4684:	2002      	movs	r0, #2
    4686:	e7bb      	b.n	4600 <dir_sdi+0x18>
    4688:	000044ed 	.word	0x000044ed
    468c:	00003f93 	.word	0x00003f93

00004690 <put_fat>:
{
    4690:	b5f0      	push	{r4, r5, r6, r7, lr}
    4692:	46c6      	mov	lr, r8
    4694:	b500      	push	{lr}
    4696:	0007      	movs	r7, r0
    4698:	000c      	movs	r4, r1
    469a:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    469c:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    469e:	2901      	cmp	r1, #1
    46a0:	d902      	bls.n	46a8 <put_fat+0x18>
    46a2:	6983      	ldr	r3, [r0, #24]
    46a4:	4299      	cmp	r1, r3
    46a6:	d303      	bcc.n	46b0 <put_fat+0x20>
}
    46a8:	0028      	movs	r0, r5
    46aa:	bc04      	pop	{r2}
    46ac:	4690      	mov	r8, r2
    46ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    46b0:	7803      	ldrb	r3, [r0, #0]
    46b2:	2b02      	cmp	r3, #2
    46b4:	d053      	beq.n	475e <put_fat+0xce>
    46b6:	2b03      	cmp	r3, #3
    46b8:	d063      	beq.n	4782 <put_fat+0xf2>
			res = FR_INT_ERR;
    46ba:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    46bc:	2b01      	cmp	r3, #1
    46be:	d002      	beq.n	46c6 <put_fat+0x36>
		fs->wflag = 1;
    46c0:	2301      	movs	r3, #1
    46c2:	713b      	strb	r3, [r7, #4]
    46c4:	e7f0      	b.n	46a8 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    46c6:	084b      	lsrs	r3, r1, #1
    46c8:	4698      	mov	r8, r3
    46ca:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    46cc:	4643      	mov	r3, r8
    46ce:	0a59      	lsrs	r1, r3, #9
    46d0:	6a03      	ldr	r3, [r0, #32]
    46d2:	469c      	mov	ip, r3
    46d4:	4461      	add	r1, ip
    46d6:	4b3b      	ldr	r3, [pc, #236]	; (47c4 <put_fat+0x134>)
    46d8:	4798      	blx	r3
    46da:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    46dc:	d1f0      	bne.n	46c0 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    46de:	4643      	mov	r3, r8
    46e0:	05db      	lsls	r3, r3, #23
    46e2:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    46e4:	07e2      	lsls	r2, r4, #31
    46e6:	d51f      	bpl.n	4728 <put_fat+0x98>
    46e8:	18fb      	adds	r3, r7, r3
    46ea:	3330      	adds	r3, #48	; 0x30
    46ec:	7819      	ldrb	r1, [r3, #0]
    46ee:	220f      	movs	r2, #15
    46f0:	400a      	ands	r2, r1
    46f2:	0131      	lsls	r1, r6, #4
    46f4:	20ff      	movs	r0, #255	; 0xff
    46f6:	0100      	lsls	r0, r0, #4
    46f8:	4001      	ands	r1, r0
    46fa:	430a      	orrs	r2, r1
    46fc:	701a      	strb	r2, [r3, #0]
			bc++;
    46fe:	4644      	mov	r4, r8
    4700:	3401      	adds	r4, #1
			fs->wflag = 1;
    4702:	2301      	movs	r3, #1
    4704:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4706:	0a61      	lsrs	r1, r4, #9
    4708:	6a3b      	ldr	r3, [r7, #32]
    470a:	469c      	mov	ip, r3
    470c:	4461      	add	r1, ip
    470e:	0038      	movs	r0, r7
    4710:	4b2c      	ldr	r3, [pc, #176]	; (47c4 <put_fat+0x134>)
    4712:	4798      	blx	r3
			if (res != FR_OK) break;
    4714:	2800      	cmp	r0, #0
    4716:	d151      	bne.n	47bc <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    4718:	05e4      	lsls	r4, r4, #23
    471a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    471c:	0936      	lsrs	r6, r6, #4
    471e:	b2f6      	uxtb	r6, r6
    4720:	193c      	adds	r4, r7, r4
    4722:	3430      	adds	r4, #48	; 0x30
    4724:	7026      	strb	r6, [r4, #0]
			break;
    4726:	e7cb      	b.n	46c0 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4728:	18fb      	adds	r3, r7, r3
    472a:	3330      	adds	r3, #48	; 0x30
    472c:	701e      	strb	r6, [r3, #0]
			bc++;
    472e:	4644      	mov	r4, r8
    4730:	3401      	adds	r4, #1
			fs->wflag = 1;
    4732:	2301      	movs	r3, #1
    4734:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4736:	0a61      	lsrs	r1, r4, #9
    4738:	6a3b      	ldr	r3, [r7, #32]
    473a:	469c      	mov	ip, r3
    473c:	4461      	add	r1, ip
    473e:	0038      	movs	r0, r7
    4740:	4b20      	ldr	r3, [pc, #128]	; (47c4 <put_fat+0x134>)
    4742:	4798      	blx	r3
			if (res != FR_OK) break;
    4744:	2800      	cmp	r0, #0
    4746:	d13b      	bne.n	47c0 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    4748:	05e4      	lsls	r4, r4, #23
    474a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    474c:	193b      	adds	r3, r7, r4
    474e:	3330      	adds	r3, #48	; 0x30
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	220f      	movs	r2, #15
    4754:	4393      	bics	r3, r2
    4756:	0536      	lsls	r6, r6, #20
    4758:	0f36      	lsrs	r6, r6, #28
    475a:	431e      	orrs	r6, r3
    475c:	e7e0      	b.n	4720 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    475e:	0a09      	lsrs	r1, r1, #8
    4760:	6a03      	ldr	r3, [r0, #32]
    4762:	469c      	mov	ip, r3
    4764:	4461      	add	r1, ip
    4766:	4b17      	ldr	r3, [pc, #92]	; (47c4 <put_fat+0x134>)
    4768:	4798      	blx	r3
    476a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    476c:	d1a8      	bne.n	46c0 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    476e:	0063      	lsls	r3, r4, #1
    4770:	24ff      	movs	r4, #255	; 0xff
    4772:	0064      	lsls	r4, r4, #1
    4774:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    4776:	18fb      	adds	r3, r7, r3
    4778:	3330      	adds	r3, #48	; 0x30
    477a:	701e      	strb	r6, [r3, #0]
    477c:	0a36      	lsrs	r6, r6, #8
    477e:	705e      	strb	r6, [r3, #1]
			break;
    4780:	e79e      	b.n	46c0 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4782:	09c9      	lsrs	r1, r1, #7
    4784:	6a03      	ldr	r3, [r0, #32]
    4786:	469c      	mov	ip, r3
    4788:	4461      	add	r1, ip
    478a:	4b0e      	ldr	r3, [pc, #56]	; (47c4 <put_fat+0x134>)
    478c:	4798      	blx	r3
    478e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4790:	d196      	bne.n	46c0 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    4792:	00a4      	lsls	r4, r4, #2
    4794:	23fe      	movs	r3, #254	; 0xfe
    4796:	005b      	lsls	r3, r3, #1
    4798:	401c      	ands	r4, r3
    479a:	0022      	movs	r2, r4
    479c:	3230      	adds	r2, #48	; 0x30
    479e:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    47a0:	78d3      	ldrb	r3, [r2, #3]
    47a2:	193c      	adds	r4, r7, r4
    47a4:	3430      	adds	r4, #48	; 0x30
    47a6:	091b      	lsrs	r3, r3, #4
    47a8:	071b      	lsls	r3, r3, #28
    47aa:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    47ac:	7026      	strb	r6, [r4, #0]
    47ae:	0a33      	lsrs	r3, r6, #8
    47b0:	7053      	strb	r3, [r2, #1]
    47b2:	0c33      	lsrs	r3, r6, #16
    47b4:	7093      	strb	r3, [r2, #2]
    47b6:	0e36      	lsrs	r6, r6, #24
    47b8:	70d6      	strb	r6, [r2, #3]
			break;
    47ba:	e781      	b.n	46c0 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    47bc:	0005      	movs	r5, r0
    47be:	e77f      	b.n	46c0 <put_fat+0x30>
    47c0:	0005      	movs	r5, r0
    47c2:	e77d      	b.n	46c0 <put_fat+0x30>
    47c4:	0000444d 	.word	0x0000444d

000047c8 <create_chain>:
{
    47c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ca:	46c6      	mov	lr, r8
    47cc:	b500      	push	{lr}
    47ce:	0005      	movs	r5, r0
    47d0:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    47d2:	2900      	cmp	r1, #0
    47d4:	d107      	bne.n	47e6 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    47d6:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    47d8:	2e00      	cmp	r6, #0
    47da:	d00d      	beq.n	47f8 <create_chain+0x30>
    47dc:	6983      	ldr	r3, [r0, #24]
    47de:	429e      	cmp	r6, r3
    47e0:	d30b      	bcc.n	47fa <create_chain+0x32>
    47e2:	2601      	movs	r6, #1
    47e4:	e009      	b.n	47fa <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    47e6:	4b26      	ldr	r3, [pc, #152]	; (4880 <create_chain+0xb8>)
    47e8:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    47ea:	2801      	cmp	r0, #1
    47ec:	d93d      	bls.n	486a <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    47ee:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    47f0:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    47f2:	4298      	cmp	r0, r3
    47f4:	d201      	bcs.n	47fa <create_chain+0x32>
    47f6:	e03d      	b.n	4874 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    47f8:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    47fa:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    47fc:	4f20      	ldr	r7, [pc, #128]	; (4880 <create_chain+0xb8>)
    47fe:	e00a      	b.n	4816 <create_chain+0x4e>
    4800:	0021      	movs	r1, r4
    4802:	0028      	movs	r0, r5
    4804:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    4806:	2800      	cmp	r0, #0
    4808:	d00d      	beq.n	4826 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    480a:	1c43      	adds	r3, r0, #1
    480c:	d032      	beq.n	4874 <create_chain+0xac>
    480e:	2801      	cmp	r0, #1
    4810:	d030      	beq.n	4874 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4812:	42b4      	cmp	r4, r6
    4814:	d02d      	beq.n	4872 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4816:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4818:	69ab      	ldr	r3, [r5, #24]
    481a:	429c      	cmp	r4, r3
    481c:	d3f0      	bcc.n	4800 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    481e:	2e01      	cmp	r6, #1
    4820:	d925      	bls.n	486e <create_chain+0xa6>
			ncl = 2;
    4822:	2402      	movs	r4, #2
    4824:	e7ec      	b.n	4800 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4826:	4a17      	ldr	r2, [pc, #92]	; (4884 <create_chain+0xbc>)
    4828:	0021      	movs	r1, r4
    482a:	0028      	movs	r0, r5
    482c:	4b16      	ldr	r3, [pc, #88]	; (4888 <create_chain+0xc0>)
    482e:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4830:	2800      	cmp	r0, #0
    4832:	d113      	bne.n	485c <create_chain+0x94>
    4834:	4643      	mov	r3, r8
    4836:	2b00      	cmp	r3, #0
    4838:	d109      	bne.n	484e <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    483a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    483c:	692b      	ldr	r3, [r5, #16]
    483e:	1c5a      	adds	r2, r3, #1
    4840:	d01b      	beq.n	487a <create_chain+0xb2>
			fs->free_clust--;
    4842:	3b01      	subs	r3, #1
    4844:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4846:	2301      	movs	r3, #1
    4848:	716b      	strb	r3, [r5, #5]
    484a:	0020      	movs	r0, r4
    484c:	e012      	b.n	4874 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    484e:	0022      	movs	r2, r4
    4850:	4641      	mov	r1, r8
    4852:	0028      	movs	r0, r5
    4854:	4b0c      	ldr	r3, [pc, #48]	; (4888 <create_chain+0xc0>)
    4856:	4798      	blx	r3
	if (res == FR_OK) {
    4858:	2800      	cmp	r0, #0
    485a:	d0ee      	beq.n	483a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    485c:	3801      	subs	r0, #1
    485e:	4242      	negs	r2, r0
    4860:	4142      	adcs	r2, r0
    4862:	4250      	negs	r0, r2
    4864:	2301      	movs	r3, #1
    4866:	4318      	orrs	r0, r3
    4868:	e004      	b.n	4874 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    486a:	2001      	movs	r0, #1
    486c:	e002      	b.n	4874 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    486e:	2000      	movs	r0, #0
    4870:	e000      	b.n	4874 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4872:	2000      	movs	r0, #0
}
    4874:	bc04      	pop	{r2}
    4876:	4690      	mov	r8, r2
    4878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    487a:	0020      	movs	r0, r4
    487c:	e7fa      	b.n	4874 <create_chain+0xac>
    487e:	46c0      	nop			; (mov r8, r8)
    4880:	000044ed 	.word	0x000044ed
    4884:	0fffffff 	.word	0x0fffffff
    4888:	00004691 	.word	0x00004691

0000488c <remove_chain>:
{
    488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    488e:	46ce      	mov	lr, r9
    4890:	4647      	mov	r7, r8
    4892:	b580      	push	{r7, lr}
    4894:	0004      	movs	r4, r0
    4896:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4898:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    489a:	2901      	cmp	r1, #1
    489c:	d902      	bls.n	48a4 <remove_chain+0x18>
    489e:	69a3      	ldr	r3, [r4, #24]
    48a0:	4299      	cmp	r1, r3
    48a2:	d303      	bcc.n	48ac <remove_chain+0x20>
}
    48a4:	bc0c      	pop	{r2, r3}
    48a6:	4690      	mov	r8, r2
    48a8:	4699      	mov	r9, r3
    48aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    48ac:	4f13      	ldr	r7, [pc, #76]	; (48fc <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    48ae:	4b14      	ldr	r3, [pc, #80]	; (4900 <remove_chain+0x74>)
    48b0:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    48b2:	2301      	movs	r3, #1
    48b4:	4699      	mov	r9, r3
    48b6:	e003      	b.n	48c0 <remove_chain+0x34>
    48b8:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    48ba:	69a3      	ldr	r3, [r4, #24]
    48bc:	42b3      	cmp	r3, r6
    48be:	d9f1      	bls.n	48a4 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    48c0:	0029      	movs	r1, r5
    48c2:	0020      	movs	r0, r4
    48c4:	47b8      	blx	r7
    48c6:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    48c8:	d011      	beq.n	48ee <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    48ca:	2801      	cmp	r0, #1
    48cc:	d011      	beq.n	48f2 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    48ce:	1c43      	adds	r3, r0, #1
    48d0:	d011      	beq.n	48f6 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    48d2:	2200      	movs	r2, #0
    48d4:	0029      	movs	r1, r5
    48d6:	0020      	movs	r0, r4
    48d8:	47c0      	blx	r8
			if (res != FR_OK) break;
    48da:	2800      	cmp	r0, #0
    48dc:	d1e2      	bne.n	48a4 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    48de:	6923      	ldr	r3, [r4, #16]
    48e0:	1c5a      	adds	r2, r3, #1
    48e2:	d0e9      	beq.n	48b8 <remove_chain+0x2c>
				fs->free_clust++;
    48e4:	3301      	adds	r3, #1
    48e6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    48e8:	464b      	mov	r3, r9
    48ea:	7163      	strb	r3, [r4, #5]
    48ec:	e7e4      	b.n	48b8 <remove_chain+0x2c>
    48ee:	2000      	movs	r0, #0
    48f0:	e7d8      	b.n	48a4 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    48f2:	2002      	movs	r0, #2
    48f4:	e7d6      	b.n	48a4 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    48f6:	2001      	movs	r0, #1
    48f8:	e7d4      	b.n	48a4 <remove_chain+0x18>
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	000044ed 	.word	0x000044ed
    4900:	00004691 	.word	0x00004691

00004904 <dir_next>:
{
    4904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4906:	46d6      	mov	lr, sl
    4908:	4647      	mov	r7, r8
    490a:	b580      	push	{r7, lr}
    490c:	0006      	movs	r6, r0
    490e:	000d      	movs	r5, r1
	i = dj->index + 1;
    4910:	88c4      	ldrh	r4, [r0, #6]
    4912:	3401      	adds	r4, #1
    4914:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4916:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4918:	2c00      	cmp	r4, #0
    491a:	d103      	bne.n	4924 <dir_next+0x20>
}
    491c:	bc0c      	pop	{r2, r3}
    491e:	4690      	mov	r8, r2
    4920:	469a      	mov	sl, r3
    4922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4924:	6933      	ldr	r3, [r6, #16]
    4926:	2b00      	cmp	r3, #0
    4928:	d0f8      	beq.n	491c <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    492a:	270f      	movs	r7, #15
    492c:	4027      	ands	r7, r4
    492e:	d10f      	bne.n	4950 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4930:	3301      	adds	r3, #1
    4932:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4934:	68f1      	ldr	r1, [r6, #12]
    4936:	2900      	cmp	r1, #0
    4938:	d104      	bne.n	4944 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    493a:	6833      	ldr	r3, [r6, #0]
    493c:	891b      	ldrh	r3, [r3, #8]
    493e:	42a3      	cmp	r3, r4
    4940:	d9ec      	bls.n	491c <dir_next+0x18>
    4942:	e005      	b.n	4950 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4944:	6830      	ldr	r0, [r6, #0]
    4946:	7883      	ldrb	r3, [r0, #2]
    4948:	3b01      	subs	r3, #1
    494a:	0922      	lsrs	r2, r4, #4
    494c:	421a      	tst	r2, r3
    494e:	d007      	beq.n	4960 <dir_next+0x5c>
	dj->index = i;
    4950:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4952:	6833      	ldr	r3, [r6, #0]
    4954:	3330      	adds	r3, #48	; 0x30
    4956:	017f      	lsls	r7, r7, #5
    4958:	19df      	adds	r7, r3, r7
    495a:	6177      	str	r7, [r6, #20]
	return FR_OK;
    495c:	2000      	movs	r0, #0
    495e:	e7dd      	b.n	491c <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4960:	4b2c      	ldr	r3, [pc, #176]	; (4a14 <dir_next+0x110>)
    4962:	4798      	blx	r3
    4964:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    4966:	2002      	movs	r0, #2
    4968:	4643      	mov	r3, r8
    496a:	2b01      	cmp	r3, #1
    496c:	d9d6      	bls.n	491c <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    496e:	3301      	adds	r3, #1
    4970:	d04b      	beq.n	4a0a <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4972:	6833      	ldr	r3, [r6, #0]
    4974:	699a      	ldr	r2, [r3, #24]
    4976:	4590      	cmp	r8, r2
    4978:	d33f      	bcc.n	49fa <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    497a:	3002      	adds	r0, #2
    497c:	2d00      	cmp	r5, #0
    497e:	d0cd      	beq.n	491c <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4980:	68f1      	ldr	r1, [r6, #12]
    4982:	0018      	movs	r0, r3
    4984:	4b24      	ldr	r3, [pc, #144]	; (4a18 <dir_next+0x114>)
    4986:	4798      	blx	r3
    4988:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    498a:	2007      	movs	r0, #7
    498c:	4643      	mov	r3, r8
    498e:	2b00      	cmp	r3, #0
    4990:	d0c4      	beq.n	491c <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4992:	3805      	subs	r0, #5
    4994:	2b01      	cmp	r3, #1
    4996:	d0c1      	beq.n	491c <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4998:	3801      	subs	r0, #1
    499a:	3301      	adds	r3, #1
    499c:	d0be      	beq.n	491c <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    499e:	2100      	movs	r1, #0
    49a0:	6830      	ldr	r0, [r6, #0]
    49a2:	4b1e      	ldr	r3, [pc, #120]	; (4a1c <dir_next+0x118>)
    49a4:	4798      	blx	r3
    49a6:	0003      	movs	r3, r0
    49a8:	2001      	movs	r0, #1
    49aa:	2b00      	cmp	r3, #0
    49ac:	d1b6      	bne.n	491c <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    49ae:	6830      	ldr	r0, [r6, #0]
    49b0:	3030      	adds	r0, #48	; 0x30
    49b2:	2280      	movs	r2, #128	; 0x80
    49b4:	0092      	lsls	r2, r2, #2
    49b6:	2100      	movs	r1, #0
    49b8:	4b19      	ldr	r3, [pc, #100]	; (4a20 <dir_next+0x11c>)
    49ba:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    49bc:	6835      	ldr	r5, [r6, #0]
    49be:	4641      	mov	r1, r8
    49c0:	0028      	movs	r0, r5
    49c2:	4b18      	ldr	r3, [pc, #96]	; (4a24 <dir_next+0x120>)
    49c4:	4798      	blx	r3
    49c6:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    49c8:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    49ca:	2301      	movs	r3, #1
    49cc:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    49ce:	6833      	ldr	r3, [r6, #0]
    49d0:	789a      	ldrb	r2, [r3, #2]
    49d2:	42aa      	cmp	r2, r5
    49d4:	d90e      	bls.n	49f4 <dir_next+0xf0>
						dj->fs->wflag = 1;
    49d6:	4652      	mov	r2, sl
    49d8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    49da:	2100      	movs	r1, #0
    49dc:	6830      	ldr	r0, [r6, #0]
    49de:	4b0f      	ldr	r3, [pc, #60]	; (4a1c <dir_next+0x118>)
    49e0:	4798      	blx	r3
    49e2:	2800      	cmp	r0, #0
    49e4:	d113      	bne.n	4a0e <dir_next+0x10a>
						dj->fs->winsect++;
    49e6:	6832      	ldr	r2, [r6, #0]
    49e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    49ea:	3301      	adds	r3, #1
    49ec:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    49ee:	3501      	adds	r5, #1
    49f0:	b2ed      	uxtb	r5, r5
    49f2:	e7ec      	b.n	49ce <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    49f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    49f6:	1b52      	subs	r2, r2, r5
    49f8:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    49fa:	4643      	mov	r3, r8
    49fc:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    49fe:	4641      	mov	r1, r8
    4a00:	6830      	ldr	r0, [r6, #0]
    4a02:	4b08      	ldr	r3, [pc, #32]	; (4a24 <dir_next+0x120>)
    4a04:	4798      	blx	r3
    4a06:	6130      	str	r0, [r6, #16]
    4a08:	e7a2      	b.n	4950 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4a0a:	2001      	movs	r0, #1
    4a0c:	e786      	b.n	491c <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4a0e:	2001      	movs	r0, #1
    4a10:	e784      	b.n	491c <dir_next+0x18>
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	000044ed 	.word	0x000044ed
    4a18:	000047c9 	.word	0x000047c9
    4a1c:	0000444d 	.word	0x0000444d
    4a20:	00003f81 	.word	0x00003f81
    4a24:	00003f93 	.word	0x00003f93

00004a28 <dir_find>:
{
    4a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2a:	46de      	mov	lr, fp
    4a2c:	4657      	mov	r7, sl
    4a2e:	464e      	mov	r6, r9
    4a30:	4645      	mov	r5, r8
    4a32:	b5e0      	push	{r5, r6, r7, lr}
    4a34:	b083      	sub	sp, #12
    4a36:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4a38:	2100      	movs	r1, #0
    4a3a:	4b5a      	ldr	r3, [pc, #360]	; (4ba4 <dir_find+0x17c>)
    4a3c:	4798      	blx	r3
    4a3e:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4a40:	d000      	beq.n	4a44 <dir_find+0x1c>
    4a42:	e09e      	b.n	4b82 <dir_find+0x15a>
    4a44:	23ff      	movs	r3, #255	; 0xff
    4a46:	4699      	mov	r9, r3
    4a48:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4a4a:	4b57      	ldr	r3, [pc, #348]	; (4ba8 <dir_find+0x180>)
    4a4c:	469b      	mov	fp, r3
    4a4e:	e01b      	b.n	4a88 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4a50:	2b0f      	cmp	r3, #15
    4a52:	d030      	beq.n	4ab6 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4a54:	4653      	mov	r3, sl
    4a56:	2b00      	cmp	r3, #0
    4a58:	d105      	bne.n	4a66 <dir_find+0x3e>
    4a5a:	0020      	movs	r0, r4
    4a5c:	4b53      	ldr	r3, [pc, #332]	; (4bac <dir_find+0x184>)
    4a5e:	4798      	blx	r3
    4a60:	4581      	cmp	r9, r0
    4a62:	d100      	bne.n	4a66 <dir_find+0x3e>
    4a64:	e08d      	b.n	4b82 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4a66:	2301      	movs	r3, #1
    4a68:	425b      	negs	r3, r3
    4a6a:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4a6c:	69a8      	ldr	r0, [r5, #24]
    4a6e:	7ac3      	ldrb	r3, [r0, #11]
    4a70:	07db      	lsls	r3, r3, #31
    4a72:	d400      	bmi.n	4a76 <dir_find+0x4e>
    4a74:	e07d      	b.n	4b72 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4a76:	23ff      	movs	r3, #255	; 0xff
    4a78:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4a7a:	2100      	movs	r1, #0
    4a7c:	0028      	movs	r0, r5
    4a7e:	4b4c      	ldr	r3, [pc, #304]	; (4bb0 <dir_find+0x188>)
    4a80:	4798      	blx	r3
    4a82:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4a84:	d000      	beq.n	4a88 <dir_find+0x60>
    4a86:	e07c      	b.n	4b82 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4a88:	6929      	ldr	r1, [r5, #16]
    4a8a:	6828      	ldr	r0, [r5, #0]
    4a8c:	47d8      	blx	fp
    4a8e:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4a90:	d177      	bne.n	4b82 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4a92:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4a94:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4a96:	2e00      	cmp	r6, #0
    4a98:	d100      	bne.n	4a9c <dir_find+0x74>
    4a9a:	e080      	b.n	4b9e <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4a9c:	7ae2      	ldrb	r2, [r4, #11]
    4a9e:	233f      	movs	r3, #63	; 0x3f
    4aa0:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4aa2:	2ee5      	cmp	r6, #229	; 0xe5
    4aa4:	d100      	bne.n	4aa8 <dir_find+0x80>
    4aa6:	e077      	b.n	4b98 <dir_find+0x170>
    4aa8:	0712      	lsls	r2, r2, #28
    4aaa:	d5d1      	bpl.n	4a50 <dir_find+0x28>
    4aac:	2b0f      	cmp	r3, #15
    4aae:	d002      	beq.n	4ab6 <dir_find+0x8e>
			ord = 0xFF;
    4ab0:	23ff      	movs	r3, #255	; 0xff
    4ab2:	469a      	mov	sl, r3
    4ab4:	e7e1      	b.n	4a7a <dir_find+0x52>
				if (dj->lfn) {
    4ab6:	69ef      	ldr	r7, [r5, #28]
    4ab8:	2f00      	cmp	r7, #0
    4aba:	d0de      	beq.n	4a7a <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4abc:	0673      	lsls	r3, r6, #25
    4abe:	d518      	bpl.n	4af2 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4ac0:	7b63      	ldrb	r3, [r4, #13]
    4ac2:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4ac4:	2340      	movs	r3, #64	; 0x40
    4ac6:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4ac8:	88eb      	ldrh	r3, [r5, #6]
    4aca:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4acc:	7b63      	ldrb	r3, [r4, #13]
    4ace:	9300      	str	r3, [sp, #0]
    4ad0:	22ff      	movs	r2, #255	; 0xff
    4ad2:	4692      	mov	sl, r2
    4ad4:	454b      	cmp	r3, r9
    4ad6:	d1d0      	bne.n	4a7a <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4ad8:	7823      	ldrb	r3, [r4, #0]
    4ada:	3abf      	subs	r2, #191	; 0xbf
    4adc:	4393      	bics	r3, r2
    4ade:	3b01      	subs	r3, #1
    4ae0:	005a      	lsls	r2, r3, #1
    4ae2:	18d2      	adds	r2, r2, r3
    4ae4:	0092      	lsls	r2, r2, #2
    4ae6:	4692      	mov	sl, r2
    4ae8:	449a      	add	sl, r3
	s = 0; wc = 1;
    4aea:	2201      	movs	r2, #1
    4aec:	2300      	movs	r3, #0
    4aee:	4699      	mov	r9, r3
    4af0:	e01d      	b.n	4b2e <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4af2:	45b2      	cmp	sl, r6
    4af4:	d0ea      	beq.n	4acc <dir_find+0xa4>
    4af6:	23ff      	movs	r3, #255	; 0xff
    4af8:	469a      	mov	sl, r3
    4afa:	e7be      	b.n	4a7a <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4afc:	4b2d      	ldr	r3, [pc, #180]	; (4bb4 <dir_find+0x18c>)
    4afe:	4798      	blx	r3
    4b00:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4b02:	4653      	mov	r3, sl
    4b04:	2bfe      	cmp	r3, #254	; 0xfe
    4b06:	d81f      	bhi.n	4b48 <dir_find+0x120>
    4b08:	2301      	movs	r3, #1
    4b0a:	4453      	add	r3, sl
    4b0c:	4698      	mov	r8, r3
    4b0e:	4653      	mov	r3, sl
    4b10:	005b      	lsls	r3, r3, #1
    4b12:	5bd8      	ldrh	r0, [r3, r7]
    4b14:	4b27      	ldr	r3, [pc, #156]	; (4bb4 <dir_find+0x18c>)
    4b16:	4798      	blx	r3
    4b18:	0002      	movs	r2, r0
    4b1a:	9b01      	ldr	r3, [sp, #4]
    4b1c:	4283      	cmp	r3, r0
    4b1e:	d113      	bne.n	4b48 <dir_find+0x120>
    4b20:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4b22:	2301      	movs	r3, #1
    4b24:	469c      	mov	ip, r3
    4b26:	44e1      	add	r9, ip
    4b28:	464b      	mov	r3, r9
    4b2a:	2b0d      	cmp	r3, #13
    4b2c:	d011      	beq.n	4b52 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4b2e:	4b22      	ldr	r3, [pc, #136]	; (4bb8 <dir_find+0x190>)
    4b30:	4649      	mov	r1, r9
    4b32:	5cc9      	ldrb	r1, [r1, r3]
    4b34:	1863      	adds	r3, r4, r1
    4b36:	785b      	ldrb	r3, [r3, #1]
    4b38:	021b      	lsls	r3, r3, #8
    4b3a:	5c60      	ldrb	r0, [r4, r1]
    4b3c:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4b3e:	2a00      	cmp	r2, #0
    4b40:	d1dc      	bne.n	4afc <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4b42:	4b1e      	ldr	r3, [pc, #120]	; (4bbc <dir_find+0x194>)
    4b44:	4298      	cmp	r0, r3
    4b46:	d0ec      	beq.n	4b22 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4b48:	9b00      	ldr	r3, [sp, #0]
    4b4a:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4b4c:	23ff      	movs	r3, #255	; 0xff
    4b4e:	469a      	mov	sl, r3
    4b50:	e793      	b.n	4a7a <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4b52:	7823      	ldrb	r3, [r4, #0]
    4b54:	065b      	lsls	r3, r3, #25
    4b56:	d506      	bpl.n	4b66 <dir_find+0x13e>
    4b58:	2a00      	cmp	r2, #0
    4b5a:	d004      	beq.n	4b66 <dir_find+0x13e>
    4b5c:	4653      	mov	r3, sl
    4b5e:	005b      	lsls	r3, r3, #1
    4b60:	5bdb      	ldrh	r3, [r3, r7]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d1f0      	bne.n	4b48 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4b66:	3e01      	subs	r6, #1
    4b68:	b2f3      	uxtb	r3, r6
    4b6a:	469a      	mov	sl, r3
    4b6c:	9b00      	ldr	r3, [sp, #0]
    4b6e:	4699      	mov	r9, r3
    4b70:	e783      	b.n	4a7a <dir_find+0x52>
    4b72:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4b74:	5ce1      	ldrb	r1, [r4, r3]
    4b76:	5cc2      	ldrb	r2, [r0, r3]
    4b78:	4291      	cmp	r1, r2
    4b7a:	d10a      	bne.n	4b92 <dir_find+0x16a>
    4b7c:	3301      	adds	r3, #1
    4b7e:	2b0b      	cmp	r3, #11
    4b80:	d1f8      	bne.n	4b74 <dir_find+0x14c>
}
    4b82:	0038      	movs	r0, r7
    4b84:	b003      	add	sp, #12
    4b86:	bc3c      	pop	{r2, r3, r4, r5}
    4b88:	4690      	mov	r8, r2
    4b8a:	4699      	mov	r9, r3
    4b8c:	46a2      	mov	sl, r4
    4b8e:	46ab      	mov	fp, r5
    4b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4b92:	23ff      	movs	r3, #255	; 0xff
    4b94:	469a      	mov	sl, r3
    4b96:	e770      	b.n	4a7a <dir_find+0x52>
			ord = 0xFF;
    4b98:	23ff      	movs	r3, #255	; 0xff
    4b9a:	469a      	mov	sl, r3
    4b9c:	e76d      	b.n	4a7a <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4b9e:	2704      	movs	r7, #4
    4ba0:	e7ef      	b.n	4b82 <dir_find+0x15a>
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	000045e9 	.word	0x000045e9
    4ba8:	0000444d 	.word	0x0000444d
    4bac:	00003fab 	.word	0x00003fab
    4bb0:	00004905 	.word	0x00004905
    4bb4:	000057b9 	.word	0x000057b9
    4bb8:	0000a9fc 	.word	0x0000a9fc
    4bbc:	0000ffff 	.word	0x0000ffff

00004bc0 <dir_register>:
{
    4bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc2:	46de      	mov	lr, fp
    4bc4:	4657      	mov	r7, sl
    4bc6:	464e      	mov	r6, r9
    4bc8:	4645      	mov	r5, r8
    4bca:	b5e0      	push	{r5, r6, r7, lr}
    4bcc:	b089      	sub	sp, #36	; 0x24
    4bce:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4bd0:	6987      	ldr	r7, [r0, #24]
    4bd2:	69c3      	ldr	r3, [r0, #28]
    4bd4:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4bd6:	ad05      	add	r5, sp, #20
    4bd8:	220c      	movs	r2, #12
    4bda:	0039      	movs	r1, r7
    4bdc:	0028      	movs	r0, r5
    4bde:	4ba7      	ldr	r3, [pc, #668]	; (4e7c <dir_register+0x2bc>)
    4be0:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4be2:	7aeb      	ldrb	r3, [r5, #11]
    4be4:	07db      	lsls	r3, r3, #31
    4be6:	d400      	bmi.n	4bea <dir_register+0x2a>
    4be8:	e070      	b.n	4ccc <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4bea:	2300      	movs	r3, #0
    4bec:	72fb      	strb	r3, [r7, #11]
    4bee:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4bf0:	220b      	movs	r2, #11
    4bf2:	a905      	add	r1, sp, #20
    4bf4:	0038      	movs	r0, r7
    4bf6:	4ba1      	ldr	r3, [pc, #644]	; (4e7c <dir_register+0x2bc>)
    4bf8:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4bfa:	2301      	movs	r3, #1
		ns[i--] = c;
    4bfc:	ad03      	add	r5, sp, #12
    4bfe:	001e      	movs	r6, r3
    4c00:	46a0      	mov	r8, r4
    4c02:	e049      	b.n	4c98 <dir_register+0xd8>
    4c04:	3801      	subs	r0, #1
    4c06:	1829      	adds	r1, r5, r0
    4c08:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4c0a:	091b      	lsrs	r3, r3, #4
    4c0c:	b29b      	uxth	r3, r3
	} while (seq);
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d007      	beq.n	4c22 <dir_register+0x62>
		c = (seq % 16) + '0';
    4c12:	0021      	movs	r1, r4
    4c14:	4019      	ands	r1, r3
    4c16:	000a      	movs	r2, r1
    4c18:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4c1a:	2a39      	cmp	r2, #57	; 0x39
    4c1c:	d9f2      	bls.n	4c04 <dir_register+0x44>
    4c1e:	3207      	adds	r2, #7
    4c20:	e7f0      	b.n	4c04 <dir_register+0x44>
	ns[i] = '~';
    4c22:	337e      	adds	r3, #126	; 0x7e
    4c24:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4c26:	2800      	cmp	r0, #0
    4c28:	d00a      	beq.n	4c40 <dir_register+0x80>
    4c2a:	783b      	ldrb	r3, [r7, #0]
    4c2c:	2b20      	cmp	r3, #32
    4c2e:	d009      	beq.n	4c44 <dir_register+0x84>
    4c30:	2300      	movs	r3, #0
    4c32:	3301      	adds	r3, #1
    4c34:	4298      	cmp	r0, r3
    4c36:	d007      	beq.n	4c48 <dir_register+0x88>
    4c38:	5cfa      	ldrb	r2, [r7, r3]
    4c3a:	2a20      	cmp	r2, #32
    4c3c:	d1f9      	bne.n	4c32 <dir_register+0x72>
    4c3e:	e009      	b.n	4c54 <dir_register+0x94>
    4c40:	0003      	movs	r3, r0
    4c42:	e007      	b.n	4c54 <dir_register+0x94>
    4c44:	2300      	movs	r3, #0
    4c46:	e005      	b.n	4c54 <dir_register+0x94>
    4c48:	0003      	movs	r3, r0
    4c4a:	e003      	b.n	4c54 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4c4c:	54fa      	strb	r2, [r7, r3]
    4c4e:	3301      	adds	r3, #1
	} while (j < 8);
    4c50:	2b07      	cmp	r3, #7
    4c52:	d805      	bhi.n	4c60 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4c54:	2220      	movs	r2, #32
    4c56:	2807      	cmp	r0, #7
    4c58:	d8f8      	bhi.n	4c4c <dir_register+0x8c>
    4c5a:	5c2a      	ldrb	r2, [r5, r0]
    4c5c:	3001      	adds	r0, #1
    4c5e:	e7f5      	b.n	4c4c <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4c60:	4640      	mov	r0, r8
    4c62:	4b87      	ldr	r3, [pc, #540]	; (4e80 <dir_register+0x2c0>)
    4c64:	4798      	blx	r3
			if (res != FR_OK) break;
    4c66:	2800      	cmp	r0, #0
    4c68:	d11c      	bne.n	4ca4 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4c6a:	3601      	adds	r6, #1
    4c6c:	b2b6      	uxth	r6, r6
    4c6e:	2e64      	cmp	r6, #100	; 0x64
    4c70:	d015      	beq.n	4c9e <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4c72:	220b      	movs	r2, #11
    4c74:	a905      	add	r1, sp, #20
    4c76:	0038      	movs	r0, r7
    4c78:	4b80      	ldr	r3, [pc, #512]	; (4e7c <dir_register+0x2bc>)
    4c7a:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4c7c:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4c7e:	2e05      	cmp	r6, #5
    4c80:	d90a      	bls.n	4c98 <dir_register+0xd8>
    4c82:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4c84:	085a      	lsrs	r2, r3, #1
    4c86:	03db      	lsls	r3, r3, #15
    4c88:	4313      	orrs	r3, r2
    4c8a:	880a      	ldrh	r2, [r1, #0]
    4c8c:	189b      	adds	r3, r3, r2
    4c8e:	b29b      	uxth	r3, r3
    4c90:	3102      	adds	r1, #2
    4c92:	880a      	ldrh	r2, [r1, #0]
    4c94:	2a00      	cmp	r2, #0
    4c96:	d1f5      	bne.n	4c84 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4c98:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4c9a:	240f      	movs	r4, #15
    4c9c:	e7b9      	b.n	4c12 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4c9e:	2307      	movs	r3, #7
    4ca0:	4698      	mov	r8, r3
    4ca2:	e006      	b.n	4cb2 <dir_register+0xf2>
    4ca4:	4644      	mov	r4, r8
    4ca6:	4680      	mov	r8, r0
    4ca8:	2e64      	cmp	r6, #100	; 0x64
    4caa:	d100      	bne.n	4cae <dir_register+0xee>
    4cac:	e0a5      	b.n	4dfa <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4cae:	2804      	cmp	r0, #4
    4cb0:	d007      	beq.n	4cc2 <dir_register+0x102>
}
    4cb2:	4640      	mov	r0, r8
    4cb4:	b009      	add	sp, #36	; 0x24
    4cb6:	bc3c      	pop	{r2, r3, r4, r5}
    4cb8:	4690      	mov	r8, r2
    4cba:	4699      	mov	r9, r3
    4cbc:	46a2      	mov	sl, r4
    4cbe:	46ab      	mov	fp, r5
    4cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4cc2:	ab05      	add	r3, sp, #20
    4cc4:	7adb      	ldrb	r3, [r3, #11]
    4cc6:	72fb      	strb	r3, [r7, #11]
    4cc8:	4653      	mov	r3, sl
    4cca:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4ccc:	ab05      	add	r3, sp, #20
    4cce:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4cd0:	2201      	movs	r2, #1
    4cd2:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4cd4:	079b      	lsls	r3, r3, #30
    4cd6:	d511      	bpl.n	4cfc <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4cd8:	4653      	mov	r3, sl
    4cda:	881b      	ldrh	r3, [r3, #0]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d01b      	beq.n	4d18 <dir_register+0x158>
    4ce0:	2000      	movs	r0, #0
    4ce2:	4652      	mov	r2, sl
    4ce4:	3001      	adds	r0, #1
    4ce6:	b280      	uxth	r0, r0
    4ce8:	0043      	lsls	r3, r0, #1
    4cea:	5a9b      	ldrh	r3, [r3, r2]
    4cec:	2b00      	cmp	r3, #0
    4cee:	d1f9      	bne.n	4ce4 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4cf0:	3019      	adds	r0, #25
    4cf2:	210d      	movs	r1, #13
    4cf4:	4b63      	ldr	r3, [pc, #396]	; (4e84 <dir_register+0x2c4>)
    4cf6:	4798      	blx	r3
    4cf8:	b283      	uxth	r3, r0
    4cfa:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4cfc:	2100      	movs	r1, #0
    4cfe:	0020      	movs	r0, r4
    4d00:	4b61      	ldr	r3, [pc, #388]	; (4e88 <dir_register+0x2c8>)
    4d02:	4798      	blx	r3
    4d04:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4d06:	2800      	cmp	r0, #0
    4d08:	d1d3      	bne.n	4cb2 <dir_register+0xf2>
    4d0a:	4682      	mov	sl, r0
    4d0c:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4d0e:	4f5f      	ldr	r7, [pc, #380]	; (4e8c <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4d10:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4d12:	4b5f      	ldr	r3, [pc, #380]	; (4e90 <dir_register+0x2d0>)
    4d14:	4699      	mov	r9, r3
    4d16:	e00b      	b.n	4d30 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4d18:	2000      	movs	r0, #0
    4d1a:	e7e9      	b.n	4cf0 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4d1c:	1c6b      	adds	r3, r5, #1
    4d1e:	b29b      	uxth	r3, r3
    4d20:	459b      	cmp	fp, r3
    4d22:	d06d      	beq.n	4e00 <dir_register+0x240>
    4d24:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4d26:	2101      	movs	r1, #1
    4d28:	0020      	movs	r0, r4
    4d2a:	47c8      	blx	r9
	} while (res == FR_OK);
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d112      	bne.n	4d56 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4d30:	6921      	ldr	r1, [r4, #16]
    4d32:	6820      	ldr	r0, [r4, #0]
    4d34:	47b8      	blx	r7
		if (res != FR_OK) break;
    4d36:	2800      	cmp	r0, #0
    4d38:	d000      	beq.n	4d3c <dir_register+0x17c>
    4d3a:	e098      	b.n	4e6e <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4d3c:	6963      	ldr	r3, [r4, #20]
    4d3e:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4d40:	2be5      	cmp	r3, #229	; 0xe5
    4d42:	d001      	beq.n	4d48 <dir_register+0x188>
    4d44:	2b00      	cmp	r3, #0
    4d46:	d104      	bne.n	4d52 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    4d48:	2d00      	cmp	r5, #0
    4d4a:	d1e7      	bne.n	4d1c <dir_register+0x15c>
    4d4c:	88e3      	ldrh	r3, [r4, #6]
    4d4e:	469a      	mov	sl, r3
    4d50:	e7e4      	b.n	4d1c <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4d52:	0035      	movs	r5, r6
    4d54:	e7e7      	b.n	4d26 <dir_register+0x166>
    4d56:	4680      	mov	r8, r0
    4d58:	e7ab      	b.n	4cb2 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    4d5a:	4651      	mov	r1, sl
    4d5c:	0020      	movs	r0, r4
    4d5e:	4b4a      	ldr	r3, [pc, #296]	; (4e88 <dir_register+0x2c8>)
    4d60:	4798      	blx	r3
    4d62:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4d64:	2800      	cmp	r0, #0
    4d66:	d1a4      	bne.n	4cb2 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4d68:	69a0      	ldr	r0, [r4, #24]
    4d6a:	4b4a      	ldr	r3, [pc, #296]	; (4e94 <dir_register+0x2d4>)
    4d6c:	4798      	blx	r3
    4d6e:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4d70:	46a8      	mov	r8, r5
    4d72:	e01f      	b.n	4db4 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4d74:	0022      	movs	r2, r4
    4d76:	e067      	b.n	4e48 <dir_register+0x288>
    4d78:	465e      	mov	r6, fp
    4d7a:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4d7c:	4946      	ldr	r1, [pc, #280]	; (4e98 <dir_register+0x2d8>)
    4d7e:	428b      	cmp	r3, r1
    4d80:	d003      	beq.n	4d8a <dir_register+0x1ca>
    4d82:	0052      	lsls	r2, r2, #1
    4d84:	5b93      	ldrh	r3, [r2, r6]
    4d86:	2b00      	cmp	r3, #0
    4d88:	d103      	bne.n	4d92 <dir_register+0x1d2>
    4d8a:	2340      	movs	r3, #64	; 0x40
    4d8c:	464a      	mov	r2, r9
    4d8e:	431a      	orrs	r2, r3
    4d90:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4d92:	464b      	mov	r3, r9
    4d94:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    4d96:	2301      	movs	r3, #1
    4d98:	6822      	ldr	r2, [r4, #0]
    4d9a:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4d9c:	2100      	movs	r1, #0
    4d9e:	0020      	movs	r0, r4
    4da0:	4b3b      	ldr	r3, [pc, #236]	; (4e90 <dir_register+0x2d0>)
    4da2:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4da4:	2800      	cmp	r0, #0
    4da6:	d166      	bne.n	4e76 <dir_register+0x2b6>
    4da8:	4645      	mov	r5, r8
    4daa:	3d01      	subs	r5, #1
    4dac:	b2ab      	uxth	r3, r5
    4dae:	4698      	mov	r8, r3
    4db0:	2b00      	cmp	r3, #0
    4db2:	d027      	beq.n	4e04 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4db4:	6921      	ldr	r1, [r4, #16]
    4db6:	6820      	ldr	r0, [r4, #0]
    4db8:	4b34      	ldr	r3, [pc, #208]	; (4e8c <dir_register+0x2cc>)
    4dba:	4798      	blx	r3
				if (res != FR_OK) break;
    4dbc:	2800      	cmp	r0, #0
    4dbe:	d158      	bne.n	4e72 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4dc0:	69e6      	ldr	r6, [r4, #28]
    4dc2:	6960      	ldr	r0, [r4, #20]
    4dc4:	4643      	mov	r3, r8
    4dc6:	466a      	mov	r2, sp
    4dc8:	70d3      	strb	r3, [r2, #3]
    4dca:	78d3      	ldrb	r3, [r2, #3]
    4dcc:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4dce:	7913      	ldrb	r3, [r2, #4]
    4dd0:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4dd2:	230f      	movs	r3, #15
    4dd4:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    4dd6:	2300      	movs	r3, #0
    4dd8:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4dda:	7683      	strb	r3, [r0, #26]
    4ddc:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4dde:	464b      	mov	r3, r9
    4de0:	3b01      	subs	r3, #1
    4de2:	005a      	lsls	r2, r3, #1
    4de4:	18d2      	adds	r2, r2, r3
    4de6:	0092      	lsls	r2, r2, #2
    4de8:	18d2      	adds	r2, r2, r3
    4dea:	492c      	ldr	r1, [pc, #176]	; (4e9c <dir_register+0x2dc>)
    4dec:	000d      	movs	r5, r1
    4dee:	350d      	adds	r5, #13
	s = wc = 0;
    4df0:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4df2:	4f29      	ldr	r7, [pc, #164]	; (4e98 <dir_register+0x2d8>)
    4df4:	46b3      	mov	fp, r6
    4df6:	46a4      	mov	ip, r4
    4df8:	e029      	b.n	4e4e <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4dfa:	2307      	movs	r3, #7
    4dfc:	4698      	mov	r8, r3
    4dfe:	e758      	b.n	4cb2 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4e00:	2b01      	cmp	r3, #1
    4e02:	d8aa      	bhi.n	4d5a <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4e04:	6921      	ldr	r1, [r4, #16]
    4e06:	6820      	ldr	r0, [r4, #0]
    4e08:	4b20      	ldr	r3, [pc, #128]	; (4e8c <dir_register+0x2cc>)
    4e0a:	4798      	blx	r3
    4e0c:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4e0e:	2800      	cmp	r0, #0
    4e10:	d000      	beq.n	4e14 <dir_register+0x254>
    4e12:	e74e      	b.n	4cb2 <dir_register+0xf2>
			dir = dj->dir;
    4e14:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    4e16:	2220      	movs	r2, #32
    4e18:	2100      	movs	r1, #0
    4e1a:	0028      	movs	r0, r5
    4e1c:	4b20      	ldr	r3, [pc, #128]	; (4ea0 <dir_register+0x2e0>)
    4e1e:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4e20:	220b      	movs	r2, #11
    4e22:	69a1      	ldr	r1, [r4, #24]
    4e24:	0028      	movs	r0, r5
    4e26:	4b15      	ldr	r3, [pc, #84]	; (4e7c <dir_register+0x2bc>)
    4e28:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4e2a:	69a3      	ldr	r3, [r4, #24]
    4e2c:	7ada      	ldrb	r2, [r3, #11]
    4e2e:	2318      	movs	r3, #24
    4e30:	4013      	ands	r3, r2
    4e32:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4e34:	6823      	ldr	r3, [r4, #0]
    4e36:	2201      	movs	r2, #1
    4e38:	711a      	strb	r2, [r3, #4]
    4e3a:	e73a      	b.n	4cb2 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4e3c:	780c      	ldrb	r4, [r1, #0]
    4e3e:	26ff      	movs	r6, #255	; 0xff
    4e40:	5506      	strb	r6, [r0, r4]
    4e42:	1904      	adds	r4, r0, r4
    4e44:	26ff      	movs	r6, #255	; 0xff
    4e46:	7066      	strb	r6, [r4, #1]
    4e48:	3101      	adds	r1, #1
	} while (++s < 13);
    4e4a:	42a9      	cmp	r1, r5
    4e4c:	d094      	beq.n	4d78 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4e4e:	42bb      	cmp	r3, r7
    4e50:	d0f4      	beq.n	4e3c <dir_register+0x27c>
    4e52:	1c54      	adds	r4, r2, #1
    4e54:	0052      	lsls	r2, r2, #1
    4e56:	465b      	mov	r3, fp
    4e58:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4e5a:	780a      	ldrb	r2, [r1, #0]
    4e5c:	5483      	strb	r3, [r0, r2]
    4e5e:	1882      	adds	r2, r0, r2
    4e60:	0a1e      	lsrs	r6, r3, #8
    4e62:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4e64:	2b00      	cmp	r3, #0
    4e66:	d185      	bne.n	4d74 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4e68:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4e6a:	003b      	movs	r3, r7
    4e6c:	e7ec      	b.n	4e48 <dir_register+0x288>
    4e6e:	4680      	mov	r8, r0
    4e70:	e71f      	b.n	4cb2 <dir_register+0xf2>
    4e72:	4680      	mov	r8, r0
    4e74:	e71d      	b.n	4cb2 <dir_register+0xf2>
    4e76:	4680      	mov	r8, r0
    4e78:	e71b      	b.n	4cb2 <dir_register+0xf2>
    4e7a:	46c0      	nop			; (mov r8, r8)
    4e7c:	00003f6d 	.word	0x00003f6d
    4e80:	00004a29 	.word	0x00004a29
    4e84:	00008ee5 	.word	0x00008ee5
    4e88:	000045e9 	.word	0x000045e9
    4e8c:	0000444d 	.word	0x0000444d
    4e90:	00004905 	.word	0x00004905
    4e94:	00003fab 	.word	0x00003fab
    4e98:	0000ffff 	.word	0x0000ffff
    4e9c:	0000a9fc 	.word	0x0000a9fc
    4ea0:	00003f81 	.word	0x00003f81

00004ea4 <sync>:
{
    4ea4:	b570      	push	{r4, r5, r6, lr}
    4ea6:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4ea8:	2100      	movs	r1, #0
    4eaa:	4b2c      	ldr	r3, [pc, #176]	; (4f5c <sync+0xb8>)
    4eac:	4798      	blx	r3
	if (res == FR_OK) {
    4eae:	2800      	cmp	r0, #0
    4eb0:	d10a      	bne.n	4ec8 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4eb2:	7823      	ldrb	r3, [r4, #0]
    4eb4:	2b03      	cmp	r3, #3
    4eb6:	d008      	beq.n	4eca <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4eb8:	7860      	ldrb	r0, [r4, #1]
    4eba:	2200      	movs	r2, #0
    4ebc:	2100      	movs	r1, #0
    4ebe:	4b28      	ldr	r3, [pc, #160]	; (4f60 <sync+0xbc>)
    4ec0:	4798      	blx	r3
    4ec2:	1e43      	subs	r3, r0, #1
    4ec4:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4ec6:	b2c0      	uxtb	r0, r0
}
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4eca:	7963      	ldrb	r3, [r4, #5]
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d0f3      	beq.n	4eb8 <sync+0x14>
			fs->winsect = 0;
    4ed0:	2600      	movs	r6, #0
    4ed2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4ed4:	0025      	movs	r5, r4
    4ed6:	3530      	adds	r5, #48	; 0x30
    4ed8:	2280      	movs	r2, #128	; 0x80
    4eda:	0092      	lsls	r2, r2, #2
    4edc:	2100      	movs	r1, #0
    4ede:	0028      	movs	r0, r5
    4ee0:	4b20      	ldr	r3, [pc, #128]	; (4f64 <sync+0xc0>)
    4ee2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4ee4:	2255      	movs	r2, #85	; 0x55
    4ee6:	4b20      	ldr	r3, [pc, #128]	; (4f68 <sync+0xc4>)
    4ee8:	54e2      	strb	r2, [r4, r3]
    4eea:	3255      	adds	r2, #85	; 0x55
    4eec:	4b1f      	ldr	r3, [pc, #124]	; (4f6c <sync+0xc8>)
    4eee:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4ef0:	3bde      	subs	r3, #222	; 0xde
    4ef2:	3bff      	subs	r3, #255	; 0xff
    4ef4:	3a7a      	subs	r2, #122	; 0x7a
    4ef6:	54a3      	strb	r3, [r4, r2]
    4ef8:	3201      	adds	r2, #1
    4efa:	54a3      	strb	r3, [r4, r2]
    4efc:	330f      	adds	r3, #15
    4efe:	3201      	adds	r2, #1
    4f00:	54a3      	strb	r3, [r4, r2]
    4f02:	320f      	adds	r2, #15
    4f04:	2133      	movs	r1, #51	; 0x33
    4f06:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4f08:	313f      	adds	r1, #63	; 0x3f
    4f0a:	2085      	movs	r0, #133	; 0x85
    4f0c:	0080      	lsls	r0, r0, #2
    4f0e:	5421      	strb	r1, [r4, r0]
    4f10:	4817      	ldr	r0, [pc, #92]	; (4f70 <sync+0xcc>)
    4f12:	5421      	strb	r1, [r4, r0]
    4f14:	4917      	ldr	r1, [pc, #92]	; (4f74 <sync+0xd0>)
    4f16:	5462      	strb	r2, [r4, r1]
    4f18:	4a17      	ldr	r2, [pc, #92]	; (4f78 <sync+0xd4>)
    4f1a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4f1c:	6923      	ldr	r3, [r4, #16]
    4f1e:	3201      	adds	r2, #1
    4f20:	54a3      	strb	r3, [r4, r2]
    4f22:	0a19      	lsrs	r1, r3, #8
    4f24:	4a15      	ldr	r2, [pc, #84]	; (4f7c <sync+0xd8>)
    4f26:	54a1      	strb	r1, [r4, r2]
    4f28:	0c19      	lsrs	r1, r3, #16
    4f2a:	4a15      	ldr	r2, [pc, #84]	; (4f80 <sync+0xdc>)
    4f2c:	54a1      	strb	r1, [r4, r2]
    4f2e:	0e1b      	lsrs	r3, r3, #24
    4f30:	4a14      	ldr	r2, [pc, #80]	; (4f84 <sync+0xe0>)
    4f32:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4f34:	68e3      	ldr	r3, [r4, #12]
    4f36:	3201      	adds	r2, #1
    4f38:	54a3      	strb	r3, [r4, r2]
    4f3a:	0a19      	lsrs	r1, r3, #8
    4f3c:	4a12      	ldr	r2, [pc, #72]	; (4f88 <sync+0xe4>)
    4f3e:	54a1      	strb	r1, [r4, r2]
    4f40:	0c19      	lsrs	r1, r3, #16
    4f42:	4a12      	ldr	r2, [pc, #72]	; (4f8c <sync+0xe8>)
    4f44:	54a1      	strb	r1, [r4, r2]
    4f46:	0e1b      	lsrs	r3, r3, #24
    4f48:	4a11      	ldr	r2, [pc, #68]	; (4f90 <sync+0xec>)
    4f4a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4f4c:	7860      	ldrb	r0, [r4, #1]
    4f4e:	2301      	movs	r3, #1
    4f50:	6962      	ldr	r2, [r4, #20]
    4f52:	0029      	movs	r1, r5
    4f54:	4d0f      	ldr	r5, [pc, #60]	; (4f94 <sync+0xf0>)
    4f56:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4f58:	7166      	strb	r6, [r4, #5]
    4f5a:	e7ad      	b.n	4eb8 <sync+0x14>
    4f5c:	0000444d 	.word	0x0000444d
    4f60:	00003eb1 	.word	0x00003eb1
    4f64:	00003f81 	.word	0x00003f81
    4f68:	0000022e 	.word	0x0000022e
    4f6c:	0000022f 	.word	0x0000022f
    4f70:	00000215 	.word	0x00000215
    4f74:	00000216 	.word	0x00000216
    4f78:	00000217 	.word	0x00000217
    4f7c:	00000219 	.word	0x00000219
    4f80:	0000021a 	.word	0x0000021a
    4f84:	0000021b 	.word	0x0000021b
    4f88:	0000021d 	.word	0x0000021d
    4f8c:	0000021e 	.word	0x0000021e
    4f90:	0000021f 	.word	0x0000021f
    4f94:	00003e2d 	.word	0x00003e2d

00004f98 <follow_path>:
{
    4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9a:	46de      	mov	lr, fp
    4f9c:	4657      	mov	r7, sl
    4f9e:	464e      	mov	r6, r9
    4fa0:	4645      	mov	r5, r8
    4fa2:	b5e0      	push	{r5, r6, r7, lr}
    4fa4:	b083      	sub	sp, #12
    4fa6:	4682      	mov	sl, r0
    4fa8:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4faa:	780b      	ldrb	r3, [r1, #0]
    4fac:	2b2f      	cmp	r3, #47	; 0x2f
    4fae:	d00f      	beq.n	4fd0 <follow_path+0x38>
    4fb0:	2b5c      	cmp	r3, #92	; 0x5c
    4fb2:	d00d      	beq.n	4fd0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4fb4:	2300      	movs	r3, #0
    4fb6:	4652      	mov	r2, sl
    4fb8:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4fba:	782b      	ldrb	r3, [r5, #0]
    4fbc:	4657      	mov	r7, sl
    4fbe:	2b1f      	cmp	r3, #31
    4fc0:	d809      	bhi.n	4fd6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4fc2:	2100      	movs	r1, #0
    4fc4:	4650      	mov	r0, sl
    4fc6:	4bb2      	ldr	r3, [pc, #712]	; (5290 <follow_path+0x2f8>)
    4fc8:	4798      	blx	r3
		dj->dir = 0;
    4fca:	2300      	movs	r3, #0
    4fcc:	617b      	str	r3, [r7, #20]
    4fce:	e13a      	b.n	5246 <follow_path+0x2ae>
		path++;
    4fd0:	3501      	adds	r5, #1
    4fd2:	e7ef      	b.n	4fb4 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4fd4:	3501      	adds	r5, #1
    4fd6:	7828      	ldrb	r0, [r5, #0]
    4fd8:	282f      	cmp	r0, #47	; 0x2f
    4fda:	d0fb      	beq.n	4fd4 <follow_path+0x3c>
    4fdc:	285c      	cmp	r0, #92	; 0x5c
    4fde:	d0f9      	beq.n	4fd4 <follow_path+0x3c>
	lfn = dj->lfn;
    4fe0:	69fb      	ldr	r3, [r7, #28]
    4fe2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4fe4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4fe6:	281f      	cmp	r0, #31
    4fe8:	d800      	bhi.n	4fec <follow_path+0x54>
    4fea:	e13b      	b.n	5264 <follow_path+0x2cc>
    4fec:	282f      	cmp	r0, #47	; 0x2f
    4fee:	d100      	bne.n	4ff2 <follow_path+0x5a>
    4ff0:	e13b      	b.n	526a <follow_path+0x2d2>
    4ff2:	285c      	cmp	r0, #92	; 0x5c
    4ff4:	d100      	bne.n	4ff8 <follow_path+0x60>
    4ff6:	e13b      	b.n	5270 <follow_path+0x2d8>
    4ff8:	1c6e      	adds	r6, r5, #1
    4ffa:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4ffc:	2380      	movs	r3, #128	; 0x80
    4ffe:	005b      	lsls	r3, r3, #1
    5000:	4698      	mov	r8, r3
    5002:	46bb      	mov	fp, r7
    5004:	002b      	movs	r3, r5
    5006:	0025      	movs	r5, r4
    5008:	0034      	movs	r4, r6
    500a:	4656      	mov	r6, sl
    500c:	4699      	mov	r9, r3
    500e:	e011      	b.n	5034 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    5010:	2b00      	cmp	r3, #0
    5012:	d135      	bne.n	5080 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    5014:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    5016:	1c6b      	adds	r3, r5, #1
    5018:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    501a:	281f      	cmp	r0, #31
    501c:	d91e      	bls.n	505c <follow_path+0xc4>
    501e:	282f      	cmp	r0, #47	; 0x2f
    5020:	d100      	bne.n	5024 <follow_path+0x8c>
    5022:	e128      	b.n	5276 <follow_path+0x2de>
    5024:	285c      	cmp	r0, #92	; 0x5c
    5026:	d100      	bne.n	502a <follow_path+0x92>
    5028:	e142      	b.n	52b0 <follow_path+0x318>
    502a:	3602      	adds	r6, #2
    502c:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    502e:	4543      	cmp	r3, r8
    5030:	d026      	beq.n	5080 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    5032:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5034:	2101      	movs	r1, #1
    5036:	4b97      	ldr	r3, [pc, #604]	; (5294 <follow_path+0x2fc>)
    5038:	4798      	blx	r3
    503a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    503c:	d020      	beq.n	5080 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    503e:	287f      	cmp	r0, #127	; 0x7f
    5040:	d8e8      	bhi.n	5014 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    5042:	2822      	cmp	r0, #34	; 0x22
    5044:	d100      	bne.n	5048 <follow_path+0xb0>
    5046:	e0fd      	b.n	5244 <follow_path+0x2ac>
    5048:	232a      	movs	r3, #42	; 0x2a
    504a:	4a93      	ldr	r2, [pc, #588]	; (5298 <follow_path+0x300>)
    504c:	b29f      	uxth	r7, r3
    504e:	428f      	cmp	r7, r1
    5050:	d0de      	beq.n	5010 <follow_path+0x78>
    5052:	3201      	adds	r2, #1
    5054:	7813      	ldrb	r3, [r2, #0]
    5056:	2b00      	cmp	r3, #0
    5058:	d1f8      	bne.n	504c <follow_path+0xb4>
    505a:	e7db      	b.n	5014 <follow_path+0x7c>
    505c:	002c      	movs	r4, r5
    505e:	465f      	mov	r7, fp
    5060:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5062:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5064:	2604      	movs	r6, #4
    5066:	e10b      	b.n	5280 <follow_path+0x2e8>
		di--;
    5068:	3c01      	subs	r4, #1
    506a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    506c:	2c00      	cmp	r4, #0
    506e:	d100      	bne.n	5072 <follow_path+0xda>
    5070:	e0e8      	b.n	5244 <follow_path+0x2ac>
		w = lfn[di-1];
    5072:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    5074:	2a20      	cmp	r2, #32
    5076:	d0f7      	beq.n	5068 <follow_path+0xd0>
    5078:	2a2e      	cmp	r2, #46	; 0x2e
    507a:	d0f5      	beq.n	5068 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    507c:	2c00      	cmp	r4, #0
    507e:	d101      	bne.n	5084 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5080:	2006      	movs	r0, #6
	return res;
    5082:	e0e0      	b.n	5246 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    5084:	0063      	lsls	r3, r4, #1
    5086:	4698      	mov	r8, r3
    5088:	2300      	movs	r3, #0
    508a:	4652      	mov	r2, sl
    508c:	4641      	mov	r1, r8
    508e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    5090:	220b      	movs	r2, #11
    5092:	2120      	movs	r1, #32
    5094:	69b8      	ldr	r0, [r7, #24]
    5096:	4b81      	ldr	r3, [pc, #516]	; (529c <follow_path+0x304>)
    5098:	4798      	blx	r3
    509a:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    509c:	2300      	movs	r3, #0
    509e:	e001      	b.n	50a4 <follow_path+0x10c>
    50a0:	3301      	adds	r3, #1
    50a2:	3202      	adds	r2, #2
    50a4:	8811      	ldrh	r1, [r2, #0]
    50a6:	2920      	cmp	r1, #32
    50a8:	d0fa      	beq.n	50a0 <follow_path+0x108>
    50aa:	292e      	cmp	r1, #46	; 0x2e
    50ac:	d0f8      	beq.n	50a0 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    50ae:	2b00      	cmp	r3, #0
    50b0:	d001      	beq.n	50b6 <follow_path+0x11e>
    50b2:	2203      	movs	r2, #3
    50b4:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    50b6:	4652      	mov	r2, sl
    50b8:	4442      	add	r2, r8
    50ba:	3a02      	subs	r2, #2
    50bc:	8812      	ldrh	r2, [r2, #0]
    50be:	2a2e      	cmp	r2, #46	; 0x2e
    50c0:	d009      	beq.n	50d6 <follow_path+0x13e>
    50c2:	4642      	mov	r2, r8
    50c4:	3a04      	subs	r2, #4
    50c6:	4452      	add	r2, sl
    50c8:	3c01      	subs	r4, #1
    50ca:	2c00      	cmp	r4, #0
    50cc:	d003      	beq.n	50d6 <follow_path+0x13e>
    50ce:	3a02      	subs	r2, #2
    50d0:	8851      	ldrh	r1, [r2, #2]
    50d2:	292e      	cmp	r1, #46	; 0x2e
    50d4:	d1f8      	bne.n	50c8 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    50d6:	2208      	movs	r2, #8
    50d8:	9201      	str	r2, [sp, #4]
    50da:	2200      	movs	r2, #0
    50dc:	4693      	mov	fp, r2
    50de:	4691      	mov	r9, r2
    50e0:	46a0      	mov	r8, r4
    50e2:	e006      	b.n	50f2 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    50e4:	4544      	cmp	r4, r8
    50e6:	d100      	bne.n	50ea <follow_path+0x152>
    50e8:	e0e6      	b.n	52b8 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    50ea:	2303      	movs	r3, #3
    50ec:	431e      	orrs	r6, r3
    50ee:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    50f0:	0023      	movs	r3, r4
    50f2:	1c5c      	adds	r4, r3, #1
    50f4:	005b      	lsls	r3, r3, #1
    50f6:	4652      	mov	r2, sl
    50f8:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    50fa:	2800      	cmp	r0, #0
    50fc:	d02c      	beq.n	5158 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    50fe:	2820      	cmp	r0, #32
    5100:	d0f3      	beq.n	50ea <follow_path+0x152>
    5102:	282e      	cmp	r0, #46	; 0x2e
    5104:	d0ee      	beq.n	50e4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    5106:	9b01      	ldr	r3, [sp, #4]
    5108:	459b      	cmp	fp, r3
    510a:	d219      	bcs.n	5140 <follow_path+0x1a8>
    510c:	4544      	cmp	r4, r8
    510e:	d100      	bne.n	5112 <follow_path+0x17a>
    5110:	e0d2      	b.n	52b8 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    5112:	287f      	cmp	r0, #127	; 0x7f
    5114:	d85e      	bhi.n	51d4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    5116:	282b      	cmp	r0, #43	; 0x2b
    5118:	d06e      	beq.n	51f8 <follow_path+0x260>
    511a:	232c      	movs	r3, #44	; 0x2c
    511c:	4a60      	ldr	r2, [pc, #384]	; (52a0 <follow_path+0x308>)
    511e:	b299      	uxth	r1, r3
    5120:	4281      	cmp	r1, r0
    5122:	d067      	beq.n	51f4 <follow_path+0x25c>
    5124:	3201      	adds	r2, #1
    5126:	7813      	ldrb	r3, [r2, #0]
    5128:	2b00      	cmp	r3, #0
    512a:	d1f8      	bne.n	511e <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    512c:	0003      	movs	r3, r0
    512e:	3b41      	subs	r3, #65	; 0x41
    5130:	b29b      	uxth	r3, r3
    5132:	2b19      	cmp	r3, #25
    5134:	d86c      	bhi.n	5210 <follow_path+0x278>
					b |= 2;
    5136:	2302      	movs	r3, #2
    5138:	464a      	mov	r2, r9
    513a:	431a      	orrs	r2, r3
    513c:	4691      	mov	r9, r2
    513e:	e05f      	b.n	5200 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    5140:	9b01      	ldr	r3, [sp, #4]
    5142:	2b0b      	cmp	r3, #11
    5144:	d03b      	beq.n	51be <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    5146:	4544      	cmp	r4, r8
    5148:	d100      	bne.n	514c <follow_path+0x1b4>
    514a:	e0b9      	b.n	52c0 <follow_path+0x328>
    514c:	2303      	movs	r3, #3
    514e:	431e      	orrs	r6, r3
    5150:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    5152:	4544      	cmp	r4, r8
    5154:	d800      	bhi.n	5158 <follow_path+0x1c0>
    5156:	e0b3      	b.n	52c0 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5158:	69bb      	ldr	r3, [r7, #24]
    515a:	781a      	ldrb	r2, [r3, #0]
    515c:	2ae5      	cmp	r2, #229	; 0xe5
    515e:	d036      	beq.n	51ce <follow_path+0x236>
	if (ni == 8) b <<= 2;
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	2b08      	cmp	r3, #8
    5164:	d060      	beq.n	5228 <follow_path+0x290>
    5166:	230c      	movs	r3, #12
    5168:	464a      	mov	r2, r9
    516a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    516c:	2b0c      	cmp	r3, #12
    516e:	d060      	beq.n	5232 <follow_path+0x29a>
    5170:	43d2      	mvns	r2, r2
    5172:	0792      	lsls	r2, r2, #30
    5174:	d05d      	beq.n	5232 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    5176:	07b2      	lsls	r2, r6, #30
    5178:	d406      	bmi.n	5188 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    517a:	2203      	movs	r2, #3
    517c:	4649      	mov	r1, r9
    517e:	400a      	ands	r2, r1
    5180:	2a01      	cmp	r2, #1
    5182:	d059      	beq.n	5238 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5184:	2b04      	cmp	r3, #4
    5186:	d05a      	beq.n	523e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    5188:	69bb      	ldr	r3, [r7, #24]
    518a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    518c:	0038      	movs	r0, r7
    518e:	4b45      	ldr	r3, [pc, #276]	; (52a4 <follow_path+0x30c>)
    5190:	4798      	blx	r3
			ns = *(dj->fn+NS);
    5192:	69bb      	ldr	r3, [r7, #24]
    5194:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    5196:	2800      	cmp	r0, #0
    5198:	d15c      	bne.n	5254 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    519a:	075b      	lsls	r3, r3, #29
    519c:	d453      	bmi.n	5246 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    519e:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    51a0:	7ad3      	ldrb	r3, [r2, #11]
    51a2:	06db      	lsls	r3, r3, #27
    51a4:	d55c      	bpl.n	5260 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    51a6:	7d51      	ldrb	r1, [r2, #21]
    51a8:	0209      	lsls	r1, r1, #8
    51aa:	7d13      	ldrb	r3, [r2, #20]
    51ac:	430b      	orrs	r3, r1
    51ae:	041b      	lsls	r3, r3, #16
    51b0:	7ed1      	ldrb	r1, [r2, #27]
    51b2:	0209      	lsls	r1, r1, #8
    51b4:	7e92      	ldrb	r2, [r2, #26]
    51b6:	430a      	orrs	r2, r1
    51b8:	4313      	orrs	r3, r2
    51ba:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    51bc:	e70b      	b.n	4fd6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    51be:	2303      	movs	r3, #3
    51c0:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    51c2:	69bb      	ldr	r3, [r7, #24]
    51c4:	781a      	ldrb	r2, [r3, #0]
    51c6:	2ae5      	cmp	r2, #229	; 0xe5
    51c8:	d1cd      	bne.n	5166 <follow_path+0x1ce>
    51ca:	220b      	movs	r2, #11
    51cc:	9201      	str	r2, [sp, #4]
    51ce:	2205      	movs	r2, #5
    51d0:	701a      	strb	r2, [r3, #0]
    51d2:	e7c5      	b.n	5160 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    51d4:	2100      	movs	r1, #0
    51d6:	4b2f      	ldr	r3, [pc, #188]	; (5294 <follow_path+0x2fc>)
    51d8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    51da:	2800      	cmp	r0, #0
    51dc:	d100      	bne.n	51e0 <follow_path+0x248>
    51de:	e079      	b.n	52d4 <follow_path+0x33c>
    51e0:	4b31      	ldr	r3, [pc, #196]	; (52a8 <follow_path+0x310>)
    51e2:	469c      	mov	ip, r3
    51e4:	4460      	add	r0, ip
    51e6:	3880      	subs	r0, #128	; 0x80
    51e8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    51ea:	2302      	movs	r3, #2
    51ec:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    51ee:	2800      	cmp	r0, #0
    51f0:	d002      	beq.n	51f8 <follow_path+0x260>
    51f2:	e790      	b.n	5116 <follow_path+0x17e>
    51f4:	2b00      	cmp	r3, #0
    51f6:	d099      	beq.n	512c <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    51f8:	2303      	movs	r3, #3
    51fa:	431e      	orrs	r6, r3
    51fc:	b2f6      	uxtb	r6, r6
    51fe:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    5200:	69bb      	ldr	r3, [r7, #24]
    5202:	465a      	mov	r2, fp
    5204:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    5206:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    5208:	2201      	movs	r2, #1
    520a:	4694      	mov	ip, r2
    520c:	44e3      	add	fp, ip
    520e:	e770      	b.n	50f2 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    5210:	0003      	movs	r3, r0
    5212:	3b61      	subs	r3, #97	; 0x61
    5214:	b29b      	uxth	r3, r3
    5216:	2b19      	cmp	r3, #25
    5218:	d8f2      	bhi.n	5200 <follow_path+0x268>
						b |= 1; w -= 0x20;
    521a:	2301      	movs	r3, #1
    521c:	464a      	mov	r2, r9
    521e:	431a      	orrs	r2, r3
    5220:	4691      	mov	r9, r2
    5222:	3820      	subs	r0, #32
    5224:	b280      	uxth	r0, r0
    5226:	e7eb      	b.n	5200 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    5228:	464b      	mov	r3, r9
    522a:	009b      	lsls	r3, r3, #2
    522c:	b2db      	uxtb	r3, r3
    522e:	4699      	mov	r9, r3
    5230:	e799      	b.n	5166 <follow_path+0x1ce>
		cf |= NS_LFN;
    5232:	2202      	movs	r2, #2
    5234:	4316      	orrs	r6, r2
    5236:	e79e      	b.n	5176 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5238:	320f      	adds	r2, #15
    523a:	4316      	orrs	r6, r2
    523c:	e7a2      	b.n	5184 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    523e:	3304      	adds	r3, #4
    5240:	431e      	orrs	r6, r3
    5242:	e7a1      	b.n	5188 <follow_path+0x1f0>
    5244:	2006      	movs	r0, #6
}
    5246:	b003      	add	sp, #12
    5248:	bc3c      	pop	{r2, r3, r4, r5}
    524a:	4690      	mov	r8, r2
    524c:	4699      	mov	r9, r3
    524e:	46a2      	mov	sl, r4
    5250:	46ab      	mov	fp, r5
    5252:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5254:	2804      	cmp	r0, #4
    5256:	d1f6      	bne.n	5246 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5258:	075b      	lsls	r3, r3, #29
    525a:	d4f4      	bmi.n	5246 <follow_path+0x2ae>
    525c:	3001      	adds	r0, #1
    525e:	e7f2      	b.n	5246 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    5260:	2005      	movs	r0, #5
    5262:	e7f0      	b.n	5246 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    5264:	2301      	movs	r3, #1
	si = di = 0;
    5266:	2400      	movs	r4, #0
    5268:	e6fb      	b.n	5062 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    526a:	2301      	movs	r3, #1
	si = di = 0;
    526c:	2400      	movs	r4, #0
    526e:	e005      	b.n	527c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    5270:	2301      	movs	r3, #1
	si = di = 0;
    5272:	2400      	movs	r4, #0
    5274:	e002      	b.n	527c <follow_path+0x2e4>
    5276:	002c      	movs	r4, r5
    5278:	465f      	mov	r7, fp
    527a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    527c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    527e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    5280:	2c00      	cmp	r4, #0
    5282:	d0df      	beq.n	5244 <follow_path+0x2ac>
    5284:	4b09      	ldr	r3, [pc, #36]	; (52ac <follow_path+0x314>)
    5286:	18e3      	adds	r3, r4, r3
    5288:	005b      	lsls	r3, r3, #1
    528a:	4453      	add	r3, sl
    528c:	e6f1      	b.n	5072 <follow_path+0xda>
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	000045e9 	.word	0x000045e9
    5294:	00005771 	.word	0x00005771
    5298:	0000aa8d 	.word	0x0000aa8d
    529c:	00003f81 	.word	0x00003f81
    52a0:	0000aa99 	.word	0x0000aa99
    52a4:	00004a29 	.word	0x00004a29
    52a8:	0000aa0c 	.word	0x0000aa0c
    52ac:	7fffffff 	.word	0x7fffffff
    52b0:	002c      	movs	r4, r5
    52b2:	465f      	mov	r7, fp
    52b4:	464d      	mov	r5, r9
    52b6:	e7e1      	b.n	527c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    52b8:	9b01      	ldr	r3, [sp, #4]
    52ba:	2b0b      	cmp	r3, #11
    52bc:	d100      	bne.n	52c0 <follow_path+0x328>
    52be:	e77e      	b.n	51be <follow_path+0x226>
			b <<= 2; continue;
    52c0:	464b      	mov	r3, r9
    52c2:	009b      	lsls	r3, r3, #2
    52c4:	b2db      	uxtb	r3, r3
    52c6:	4699      	mov	r9, r3
    52c8:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    52ca:	220b      	movs	r2, #11
    52cc:	9201      	str	r2, [sp, #4]
    52ce:	3a03      	subs	r2, #3
    52d0:	4693      	mov	fp, r2
    52d2:	e70e      	b.n	50f2 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    52d4:	2302      	movs	r3, #2
    52d6:	431e      	orrs	r6, r3
    52d8:	e78e      	b.n	51f8 <follow_path+0x260>
    52da:	46c0      	nop			; (mov r8, r8)

000052dc <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    52dc:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    52de:	2803      	cmp	r0, #3
    52e0:	d901      	bls.n	52e6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    52e2:	0018      	movs	r0, r3
    52e4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    52e6:	0083      	lsls	r3, r0, #2
    52e8:	4a07      	ldr	r2, [pc, #28]	; (5308 <f_mount+0x2c>)
    52ea:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    52ec:	2b00      	cmp	r3, #0
    52ee:	d001      	beq.n	52f4 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    52f0:	2200      	movs	r2, #0
    52f2:	701a      	strb	r2, [r3, #0]
	if (fs) {
    52f4:	2900      	cmp	r1, #0
    52f6:	d001      	beq.n	52fc <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    52f8:	2300      	movs	r3, #0
    52fa:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    52fc:	0080      	lsls	r0, r0, #2
    52fe:	4b02      	ldr	r3, [pc, #8]	; (5308 <f_mount+0x2c>)
    5300:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    5302:	2300      	movs	r3, #0
    5304:	e7ed      	b.n	52e2 <f_mount+0x6>
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	200002b8 	.word	0x200002b8

0000530c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    530c:	b5f0      	push	{r4, r5, r6, r7, lr}
    530e:	46c6      	mov	lr, r8
    5310:	b500      	push	{lr}
    5312:	4c59      	ldr	r4, [pc, #356]	; (5478 <f_open+0x16c>)
    5314:	44a5      	add	sp, r4
    5316:	0005      	movs	r5, r0
    5318:	9101      	str	r1, [sp, #4]
    531a:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    531c:	2300      	movs	r3, #0
    531e:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5320:	261f      	movs	r6, #31
    5322:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    5324:	221e      	movs	r2, #30
    5326:	403a      	ands	r2, r7
    5328:	a985      	add	r1, sp, #532	; 0x214
    532a:	a801      	add	r0, sp, #4
    532c:	4b53      	ldr	r3, [pc, #332]	; (547c <f_open+0x170>)
    532e:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    5330:	ab82      	add	r3, sp, #520	; 0x208
    5332:	938b      	str	r3, [sp, #556]	; 0x22c
    5334:	ab02      	add	r3, sp, #8
    5336:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    5338:	2800      	cmp	r0, #0
    533a:	d006      	beq.n	534a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    533c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    533e:	231c      	movs	r3, #28
    5340:	423b      	tst	r3, r7
    5342:	d145      	bne.n	53d0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    5344:	2800      	cmp	r0, #0
    5346:	d13d      	bne.n	53c4 <f_open+0xb8>
    5348:	e00c      	b.n	5364 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    534a:	9901      	ldr	r1, [sp, #4]
    534c:	a885      	add	r0, sp, #532	; 0x214
    534e:	4b4c      	ldr	r3, [pc, #304]	; (5480 <f_open+0x174>)
    5350:	4798      	blx	r3
	dir = dj.dir;
    5352:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    5354:	2800      	cmp	r0, #0
    5356:	d1f2      	bne.n	533e <f_open+0x32>
		if (!dir)	/* Current dir itself */
    5358:	2c00      	cmp	r4, #0
    535a:	d100      	bne.n	535e <f_open+0x52>
    535c:	e086      	b.n	546c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    535e:	231c      	movs	r3, #28
    5360:	423b      	tst	r3, r7
    5362:	d146      	bne.n	53f2 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5364:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    5366:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5368:	06da      	lsls	r2, r3, #27
    536a:	d42b      	bmi.n	53c4 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    536c:	07ba      	lsls	r2, r7, #30
    536e:	d502      	bpl.n	5376 <f_open+0x6a>
					res = FR_DENIED;
    5370:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5372:	07db      	lsls	r3, r3, #31
    5374:	d426      	bmi.n	53c4 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    5376:	073b      	lsls	r3, r7, #28
    5378:	d501      	bpl.n	537e <f_open+0x72>
			mode |= FA__WRITTEN;
    537a:	2320      	movs	r3, #32
    537c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    537e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5382:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    5384:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    5386:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5388:	7d62      	ldrb	r2, [r4, #21]
    538a:	0212      	lsls	r2, r2, #8
    538c:	7d23      	ldrb	r3, [r4, #20]
    538e:	4313      	orrs	r3, r2
    5390:	041b      	lsls	r3, r3, #16
    5392:	7ee1      	ldrb	r1, [r4, #27]
    5394:	0209      	lsls	r1, r1, #8
    5396:	7ea2      	ldrb	r2, [r4, #26]
    5398:	430a      	orrs	r2, r1
    539a:	4313      	orrs	r3, r2
    539c:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    539e:	7fe3      	ldrb	r3, [r4, #31]
    53a0:	061b      	lsls	r3, r3, #24
    53a2:	7fa2      	ldrb	r2, [r4, #30]
    53a4:	0412      	lsls	r2, r2, #16
    53a6:	4313      	orrs	r3, r2
    53a8:	7f22      	ldrb	r2, [r4, #28]
    53aa:	4313      	orrs	r3, r2
    53ac:	7f62      	ldrb	r2, [r4, #29]
    53ae:	0212      	lsls	r2, r2, #8
    53b0:	4313      	orrs	r3, r2
    53b2:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    53b4:	2300      	movs	r3, #0
    53b6:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    53b8:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    53ba:	9b85      	ldr	r3, [sp, #532]	; 0x214
    53bc:	602b      	str	r3, [r5, #0]
    53be:	88db      	ldrh	r3, [r3, #6]
    53c0:	80ab      	strh	r3, [r5, #4]
    53c2:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    53c4:	238e      	movs	r3, #142	; 0x8e
    53c6:	009b      	lsls	r3, r3, #2
    53c8:	449d      	add	sp, r3
    53ca:	bc04      	pop	{r2}
    53cc:	4690      	mov	r8, r2
    53ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    53d0:	2804      	cmp	r0, #4
    53d2:	d005      	beq.n	53e0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    53d4:	2308      	movs	r3, #8
    53d6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    53d8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    53da:	2800      	cmp	r0, #0
    53dc:	d0d3      	beq.n	5386 <f_open+0x7a>
    53de:	e7f1      	b.n	53c4 <f_open+0xb8>
				res = dir_register(&dj);
    53e0:	a885      	add	r0, sp, #532	; 0x214
    53e2:	4b28      	ldr	r3, [pc, #160]	; (5484 <f_open+0x178>)
    53e4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    53e6:	2308      	movs	r3, #8
    53e8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    53ea:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    53ec:	2800      	cmp	r0, #0
    53ee:	d008      	beq.n	5402 <f_open+0xf6>
    53f0:	e7e8      	b.n	53c4 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    53f2:	7ae3      	ldrb	r3, [r4, #11]
    53f4:	2211      	movs	r2, #17
				res = FR_DENIED;
    53f6:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    53f8:	421a      	tst	r2, r3
    53fa:	d1e3      	bne.n	53c4 <f_open+0xb8>
					res = FR_EXIST;
    53fc:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    53fe:	077b      	lsls	r3, r7, #29
    5400:	d4e0      	bmi.n	53c4 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    5402:	0733      	lsls	r3, r6, #28
    5404:	d5bb      	bpl.n	537e <f_open+0x72>
			dw = get_fattime();					/* Created time */
    5406:	4b20      	ldr	r3, [pc, #128]	; (5488 <f_open+0x17c>)
    5408:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    540a:	73a0      	strb	r0, [r4, #14]
    540c:	0a03      	lsrs	r3, r0, #8
    540e:	73e3      	strb	r3, [r4, #15]
    5410:	0c03      	lsrs	r3, r0, #16
    5412:	7423      	strb	r3, [r4, #16]
    5414:	0e00      	lsrs	r0, r0, #24
    5416:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    5418:	2300      	movs	r3, #0
    541a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    541c:	7723      	strb	r3, [r4, #28]
    541e:	7763      	strb	r3, [r4, #29]
    5420:	77a3      	strb	r3, [r4, #30]
    5422:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    5424:	7d62      	ldrb	r2, [r4, #21]
    5426:	0212      	lsls	r2, r2, #8
    5428:	7d27      	ldrb	r7, [r4, #20]
    542a:	4317      	orrs	r7, r2
    542c:	043f      	lsls	r7, r7, #16
    542e:	7ee1      	ldrb	r1, [r4, #27]
    5430:	0209      	lsls	r1, r1, #8
    5432:	7ea2      	ldrb	r2, [r4, #26]
    5434:	430a      	orrs	r2, r1
    5436:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    5438:	76a3      	strb	r3, [r4, #26]
    543a:	76e3      	strb	r3, [r4, #27]
    543c:	7523      	strb	r3, [r4, #20]
    543e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    5440:	9885      	ldr	r0, [sp, #532]	; 0x214
    5442:	3301      	adds	r3, #1
    5444:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    5446:	2f00      	cmp	r7, #0
    5448:	d097      	beq.n	537a <f_open+0x6e>
				dw = dj.fs->winsect;
    544a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    544c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    544e:	0039      	movs	r1, r7
    5450:	4b0e      	ldr	r3, [pc, #56]	; (548c <f_open+0x180>)
    5452:	4798      	blx	r3
				if (res == FR_OK) {
    5454:	2800      	cmp	r0, #0
    5456:	d1b5      	bne.n	53c4 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5458:	9885      	ldr	r0, [sp, #532]	; 0x214
    545a:	3f01      	subs	r7, #1
    545c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    545e:	4641      	mov	r1, r8
    5460:	4b0b      	ldr	r3, [pc, #44]	; (5490 <f_open+0x184>)
    5462:	4798      	blx	r3
	if (res == FR_OK) {
    5464:	2800      	cmp	r0, #0
    5466:	d100      	bne.n	546a <f_open+0x15e>
    5468:	e787      	b.n	537a <f_open+0x6e>
    546a:	e7ab      	b.n	53c4 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    546c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    546e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5470:	423b      	tst	r3, r7
    5472:	d0b2      	beq.n	53da <f_open+0xce>
			res = FR_INVALID_NAME;
    5474:	2006      	movs	r0, #6
    5476:	e7ad      	b.n	53d4 <f_open+0xc8>
    5478:	fffffdc8 	.word	0xfffffdc8
    547c:	0000409d 	.word	0x0000409d
    5480:	00004f99 	.word	0x00004f99
    5484:	00004bc1 	.word	0x00004bc1
    5488:	00003f1d 	.word	0x00003f1d
    548c:	0000488d 	.word	0x0000488d
    5490:	0000444d 	.word	0x0000444d

00005494 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5494:	b5f0      	push	{r4, r5, r6, r7, lr}
    5496:	46de      	mov	lr, fp
    5498:	4657      	mov	r7, sl
    549a:	464e      	mov	r6, r9
    549c:	4645      	mov	r5, r8
    549e:	b5e0      	push	{r5, r6, r7, lr}
    54a0:	b083      	sub	sp, #12
    54a2:	0004      	movs	r4, r0
    54a4:	000d      	movs	r5, r1
    54a6:	0016      	movs	r6, r2
    54a8:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    54aa:	2300      	movs	r3, #0
    54ac:	464a      	mov	r2, r9
    54ae:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    54b0:	8881      	ldrh	r1, [r0, #4]
    54b2:	6800      	ldr	r0, [r0, #0]
    54b4:	4b7f      	ldr	r3, [pc, #508]	; (56b4 <f_write+0x220>)
    54b6:	4798      	blx	r3
    54b8:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    54ba:	2800      	cmp	r0, #0
    54bc:	d000      	beq.n	54c0 <f_write+0x2c>
    54be:	e0f1      	b.n	56a4 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    54c0:	79a3      	ldrb	r3, [r4, #6]
    54c2:	b25a      	sxtb	r2, r3
    54c4:	2a00      	cmp	r2, #0
    54c6:	da00      	bge.n	54ca <f_write+0x36>
    54c8:	e0ea      	b.n	56a0 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    54ca:	079b      	lsls	r3, r3, #30
    54cc:	d402      	bmi.n	54d4 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    54ce:	2307      	movs	r3, #7
    54d0:	9300      	str	r3, [sp, #0]
    54d2:	e0e7      	b.n	56a4 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    54d4:	68e3      	ldr	r3, [r4, #12]
    54d6:	199a      	adds	r2, r3, r6
    54d8:	4293      	cmp	r3, r2
    54da:	d810      	bhi.n	54fe <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    54dc:	2e00      	cmp	r6, #0
    54de:	d00e      	beq.n	54fe <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    54e0:	002f      	movs	r7, r5
    54e2:	e07b      	b.n	55dc <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    54e4:	2100      	movs	r1, #0
    54e6:	4b74      	ldr	r3, [pc, #464]	; (56b8 <f_write+0x224>)
    54e8:	4798      	blx	r3
    54ea:	0003      	movs	r3, r0
    54ec:	6120      	str	r0, [r4, #16]
    54ee:	e003      	b.n	54f8 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    54f0:	6961      	ldr	r1, [r4, #20]
    54f2:	4b71      	ldr	r3, [pc, #452]	; (56b8 <f_write+0x224>)
    54f4:	4798      	blx	r3
    54f6:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    54f8:	2b00      	cmp	r3, #0
    54fa:	d000      	beq.n	54fe <f_write+0x6a>
    54fc:	e080      	b.n	5600 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    54fe:	68a3      	ldr	r3, [r4, #8]
    5500:	68e2      	ldr	r2, [r4, #12]
    5502:	4293      	cmp	r3, r2
    5504:	d900      	bls.n	5508 <f_write+0x74>
    5506:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    5508:	79a3      	ldrb	r3, [r4, #6]
    550a:	2220      	movs	r2, #32
    550c:	4313      	orrs	r3, r2
    550e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    5510:	e0c8      	b.n	56a4 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5512:	79a2      	ldrb	r2, [r4, #6]
    5514:	3b81      	subs	r3, #129	; 0x81
    5516:	4313      	orrs	r3, r2
    5518:	71a3      	strb	r3, [r4, #6]
    551a:	2302      	movs	r3, #2
    551c:	9300      	str	r3, [sp, #0]
    551e:	e0c1      	b.n	56a4 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5520:	79a2      	ldrb	r2, [r4, #6]
    5522:	3b7f      	subs	r3, #127	; 0x7f
    5524:	4313      	orrs	r3, r2
    5526:	71a3      	strb	r3, [r4, #6]
    5528:	2301      	movs	r3, #1
    552a:	9300      	str	r3, [sp, #0]
    552c:	e0ba      	b.n	56a4 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    552e:	2100      	movs	r1, #0
    5530:	4b62      	ldr	r3, [pc, #392]	; (56bc <f_write+0x228>)
    5532:	4798      	blx	r3
    5534:	2800      	cmp	r0, #0
    5536:	d06d      	beq.n	5614 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    5538:	79a2      	ldrb	r2, [r4, #6]
    553a:	2380      	movs	r3, #128	; 0x80
    553c:	425b      	negs	r3, r3
    553e:	4313      	orrs	r3, r2
    5540:	71a3      	strb	r3, [r4, #6]
    5542:	2301      	movs	r3, #1
    5544:	9300      	str	r3, [sp, #0]
    5546:	e0ad      	b.n	56a4 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5548:	79a2      	ldrb	r2, [r4, #6]
    554a:	2380      	movs	r3, #128	; 0x80
    554c:	425b      	negs	r3, r3
    554e:	4313      	orrs	r3, r2
    5550:	71a3      	strb	r3, [r4, #6]
    5552:	2302      	movs	r3, #2
    5554:	9300      	str	r3, [sp, #0]
    5556:	e0a5      	b.n	56a4 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5558:	79a2      	ldrb	r2, [r4, #6]
    555a:	2380      	movs	r3, #128	; 0x80
    555c:	425b      	negs	r3, r3
    555e:	4313      	orrs	r3, r2
    5560:	71a3      	strb	r3, [r4, #6]
    5562:	2301      	movs	r3, #1
    5564:	9300      	str	r3, [sp, #0]
    5566:	e09d      	b.n	56a4 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5568:	0240      	lsls	r0, r0, #9
    556a:	1839      	adds	r1, r7, r0
    556c:	3330      	adds	r3, #48	; 0x30
    556e:	0018      	movs	r0, r3
    5570:	2280      	movs	r2, #128	; 0x80
    5572:	0092      	lsls	r2, r2, #2
    5574:	4b52      	ldr	r3, [pc, #328]	; (56c0 <f_write+0x22c>)
    5576:	4798      	blx	r3
					fp->fs->wflag = 0;
    5578:	2300      	movs	r3, #0
    557a:	6822      	ldr	r2, [r4, #0]
    557c:	7113      	strb	r3, [r2, #4]
    557e:	e072      	b.n	5666 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5580:	68a3      	ldr	r3, [r4, #8]
    5582:	68e2      	ldr	r2, [r4, #12]
    5584:	4293      	cmp	r3, r2
    5586:	d271      	bcs.n	566c <f_write+0x1d8>
			fp->dsect = sect;
    5588:	4643      	mov	r3, r8
    558a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    558c:	68a3      	ldr	r3, [r4, #8]
    558e:	05dd      	lsls	r5, r3, #23
    5590:	0ded      	lsrs	r5, r5, #23
    5592:	2380      	movs	r3, #128	; 0x80
    5594:	009b      	lsls	r3, r3, #2
    5596:	1b5d      	subs	r5, r3, r5
    5598:	42b5      	cmp	r5, r6
    559a:	d900      	bls.n	559e <f_write+0x10a>
    559c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    559e:	69a1      	ldr	r1, [r4, #24]
    55a0:	6820      	ldr	r0, [r4, #0]
    55a2:	4b46      	ldr	r3, [pc, #280]	; (56bc <f_write+0x228>)
    55a4:	4798      	blx	r3
    55a6:	2800      	cmp	r0, #0
    55a8:	d172      	bne.n	5690 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    55aa:	68a3      	ldr	r3, [r4, #8]
    55ac:	05d8      	lsls	r0, r3, #23
    55ae:	0dc0      	lsrs	r0, r0, #23
    55b0:	3030      	adds	r0, #48	; 0x30
    55b2:	6823      	ldr	r3, [r4, #0]
    55b4:	469c      	mov	ip, r3
    55b6:	4460      	add	r0, ip
    55b8:	002a      	movs	r2, r5
    55ba:	0039      	movs	r1, r7
    55bc:	4b40      	ldr	r3, [pc, #256]	; (56c0 <f_write+0x22c>)
    55be:	4798      	blx	r3
		fp->fs->wflag = 1;
    55c0:	2301      	movs	r3, #1
    55c2:	6822      	ldr	r2, [r4, #0]
    55c4:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    55c6:	197f      	adds	r7, r7, r5
    55c8:	68a3      	ldr	r3, [r4, #8]
    55ca:	195b      	adds	r3, r3, r5
    55cc:	60a3      	str	r3, [r4, #8]
    55ce:	464b      	mov	r3, r9
    55d0:	681b      	ldr	r3, [r3, #0]
    55d2:	195b      	adds	r3, r3, r5
    55d4:	464a      	mov	r2, r9
    55d6:	6013      	str	r3, [r2, #0]
    55d8:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    55da:	d090      	beq.n	54fe <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    55dc:	68a3      	ldr	r3, [r4, #8]
    55de:	05da      	lsls	r2, r3, #23
    55e0:	d1d4      	bne.n	558c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    55e2:	6820      	ldr	r0, [r4, #0]
    55e4:	7882      	ldrb	r2, [r0, #2]
    55e6:	3a01      	subs	r2, #1
    55e8:	0a5d      	lsrs	r5, r3, #9
    55ea:	4015      	ands	r5, r2
    55ec:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    55ee:	2d00      	cmp	r5, #0
    55f0:	d10b      	bne.n	560a <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    55f2:	2b00      	cmp	r3, #0
    55f4:	d000      	beq.n	55f8 <f_write+0x164>
    55f6:	e77b      	b.n	54f0 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    55f8:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    55fa:	2b00      	cmp	r3, #0
    55fc:	d100      	bne.n	5600 <f_write+0x16c>
    55fe:	e771      	b.n	54e4 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5600:	2b01      	cmp	r3, #1
    5602:	d086      	beq.n	5512 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5604:	1c5a      	adds	r2, r3, #1
    5606:	d08b      	beq.n	5520 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    5608:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    560a:	6820      	ldr	r0, [r4, #0]
    560c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    560e:	69a2      	ldr	r2, [r4, #24]
    5610:	4293      	cmp	r3, r2
    5612:	d08c      	beq.n	552e <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5614:	6823      	ldr	r3, [r4, #0]
    5616:	469a      	mov	sl, r3
    5618:	6961      	ldr	r1, [r4, #20]
    561a:	0018      	movs	r0, r3
    561c:	4b29      	ldr	r3, [pc, #164]	; (56c4 <f_write+0x230>)
    561e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5620:	2800      	cmp	r0, #0
    5622:	d091      	beq.n	5548 <f_write+0xb4>
			sect += csect;
    5624:	4680      	mov	r8, r0
    5626:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    5628:	0a73      	lsrs	r3, r6, #9
    562a:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    562c:	d0a8      	beq.n	5580 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    562e:	4653      	mov	r3, sl
    5630:	789b      	ldrb	r3, [r3, #2]
    5632:	465a      	mov	r2, fp
    5634:	18aa      	adds	r2, r5, r2
    5636:	429a      	cmp	r2, r3
    5638:	d901      	bls.n	563e <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    563a:	1b5b      	subs	r3, r3, r5
    563c:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    563e:	465b      	mov	r3, fp
    5640:	466a      	mov	r2, sp
    5642:	71d3      	strb	r3, [r2, #7]
    5644:	79d3      	ldrb	r3, [r2, #7]
    5646:	4652      	mov	r2, sl
    5648:	7850      	ldrb	r0, [r2, #1]
    564a:	4642      	mov	r2, r8
    564c:	0039      	movs	r1, r7
    564e:	4d1e      	ldr	r5, [pc, #120]	; (56c8 <f_write+0x234>)
    5650:	47a8      	blx	r5
    5652:	2800      	cmp	r0, #0
    5654:	d000      	beq.n	5658 <f_write+0x1c4>
    5656:	e77f      	b.n	5558 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5658:	6823      	ldr	r3, [r4, #0]
    565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    565c:	4641      	mov	r1, r8
    565e:	1a50      	subs	r0, r2, r1
    5660:	4583      	cmp	fp, r0
    5662:	d900      	bls.n	5666 <f_write+0x1d2>
    5664:	e780      	b.n	5568 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5666:	465b      	mov	r3, fp
    5668:	025d      	lsls	r5, r3, #9
				continue;
    566a:	e7ac      	b.n	55c6 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    566c:	2100      	movs	r1, #0
    566e:	4650      	mov	r0, sl
    5670:	4b12      	ldr	r3, [pc, #72]	; (56bc <f_write+0x228>)
    5672:	4798      	blx	r3
    5674:	2800      	cmp	r0, #0
    5676:	d103      	bne.n	5680 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5678:	6823      	ldr	r3, [r4, #0]
    567a:	4642      	mov	r2, r8
    567c:	62da      	str	r2, [r3, #44]	; 0x2c
    567e:	e783      	b.n	5588 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5680:	79a2      	ldrb	r2, [r4, #6]
    5682:	2380      	movs	r3, #128	; 0x80
    5684:	425b      	negs	r3, r3
    5686:	4313      	orrs	r3, r2
    5688:	71a3      	strb	r3, [r4, #6]
    568a:	2301      	movs	r3, #1
    568c:	9300      	str	r3, [sp, #0]
    568e:	e009      	b.n	56a4 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5690:	79a2      	ldrb	r2, [r4, #6]
    5692:	2380      	movs	r3, #128	; 0x80
    5694:	425b      	negs	r3, r3
    5696:	4313      	orrs	r3, r2
    5698:	71a3      	strb	r3, [r4, #6]
    569a:	2301      	movs	r3, #1
    569c:	9300      	str	r3, [sp, #0]
    569e:	e001      	b.n	56a4 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    56a0:	2302      	movs	r3, #2
    56a2:	9300      	str	r3, [sp, #0]
}
    56a4:	9800      	ldr	r0, [sp, #0]
    56a6:	b003      	add	sp, #12
    56a8:	bc3c      	pop	{r2, r3, r4, r5}
    56aa:	4690      	mov	r8, r2
    56ac:	4699      	mov	r9, r3
    56ae:	46a2      	mov	sl, r4
    56b0:	46ab      	mov	fp, r5
    56b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56b4:	00003fc9 	.word	0x00003fc9
    56b8:	000047c9 	.word	0x000047c9
    56bc:	0000444d 	.word	0x0000444d
    56c0:	00003f6d 	.word	0x00003f6d
    56c4:	00003f93 	.word	0x00003f93
    56c8:	00003e2d 	.word	0x00003e2d

000056cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    56d0:	8881      	ldrh	r1, [r0, #4]
    56d2:	6800      	ldr	r0, [r0, #0]
    56d4:	4b1c      	ldr	r3, [pc, #112]	; (5748 <f_sync+0x7c>)
    56d6:	4798      	blx	r3
	if (res == FR_OK) {
    56d8:	2800      	cmp	r0, #0
    56da:	d102      	bne.n	56e2 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    56dc:	79a3      	ldrb	r3, [r4, #6]
    56de:	069b      	lsls	r3, r3, #26
    56e0:	d400      	bmi.n	56e4 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    56e2:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    56e4:	69e1      	ldr	r1, [r4, #28]
    56e6:	6820      	ldr	r0, [r4, #0]
    56e8:	4b18      	ldr	r3, [pc, #96]	; (574c <f_sync+0x80>)
    56ea:	4798      	blx	r3
			if (res == FR_OK) {
    56ec:	2800      	cmp	r0, #0
    56ee:	d1f8      	bne.n	56e2 <f_sync+0x16>
				dir = fp->dir_ptr;
    56f0:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    56f2:	7aeb      	ldrb	r3, [r5, #11]
    56f4:	2220      	movs	r2, #32
    56f6:	4313      	orrs	r3, r2
    56f8:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    56fa:	7b23      	ldrb	r3, [r4, #12]
    56fc:	772b      	strb	r3, [r5, #28]
    56fe:	89a3      	ldrh	r3, [r4, #12]
    5700:	0a1b      	lsrs	r3, r3, #8
    5702:	776b      	strb	r3, [r5, #29]
    5704:	89e3      	ldrh	r3, [r4, #14]
    5706:	77ab      	strb	r3, [r5, #30]
    5708:	7be3      	ldrb	r3, [r4, #15]
    570a:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    570c:	7c23      	ldrb	r3, [r4, #16]
    570e:	76ab      	strb	r3, [r5, #26]
    5710:	8a23      	ldrh	r3, [r4, #16]
    5712:	0a1b      	lsrs	r3, r3, #8
    5714:	76eb      	strb	r3, [r5, #27]
    5716:	8a63      	ldrh	r3, [r4, #18]
    5718:	752b      	strb	r3, [r5, #20]
    571a:	8a63      	ldrh	r3, [r4, #18]
    571c:	0a1b      	lsrs	r3, r3, #8
    571e:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    5720:	4b0b      	ldr	r3, [pc, #44]	; (5750 <f_sync+0x84>)
    5722:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    5724:	75a8      	strb	r0, [r5, #22]
    5726:	0a03      	lsrs	r3, r0, #8
    5728:	75eb      	strb	r3, [r5, #23]
    572a:	0c03      	lsrs	r3, r0, #16
    572c:	762b      	strb	r3, [r5, #24]
    572e:	0e00      	lsrs	r0, r0, #24
    5730:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    5732:	79a3      	ldrb	r3, [r4, #6]
    5734:	2220      	movs	r2, #32
    5736:	4393      	bics	r3, r2
    5738:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    573a:	2301      	movs	r3, #1
    573c:	6822      	ldr	r2, [r4, #0]
    573e:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5740:	6820      	ldr	r0, [r4, #0]
    5742:	4b04      	ldr	r3, [pc, #16]	; (5754 <f_sync+0x88>)
    5744:	4798      	blx	r3
    5746:	e7cc      	b.n	56e2 <f_sync+0x16>
    5748:	00003fc9 	.word	0x00003fc9
    574c:	0000444d 	.word	0x0000444d
    5750:	00003f1d 	.word	0x00003f1d
    5754:	00004ea5 	.word	0x00004ea5

00005758 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5758:	b510      	push	{r4, lr}
    575a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    575c:	4b03      	ldr	r3, [pc, #12]	; (576c <f_close+0x14>)
    575e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5760:	2800      	cmp	r0, #0
    5762:	d101      	bne.n	5768 <f_close+0x10>
    5764:	2300      	movs	r3, #0
    5766:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5768:	bd10      	pop	{r4, pc}
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	000056cd 	.word	0x000056cd

00005770 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5770:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5772:	287f      	cmp	r0, #127	; 0x7f
    5774:	d911      	bls.n	579a <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5776:	2900      	cmp	r1, #0
    5778:	d111      	bne.n	579e <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    577a:	28c7      	cmp	r0, #199	; 0xc7
    577c:	d017      	beq.n	57ae <ff_convert+0x3e>
    577e:	4a0d      	ldr	r2, [pc, #52]	; (57b4 <ff_convert+0x44>)
    5780:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5782:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5784:	8811      	ldrh	r1, [r2, #0]
    5786:	4281      	cmp	r1, r0
    5788:	d004      	beq.n	5794 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    578a:	3301      	adds	r3, #1
    578c:	b29b      	uxth	r3, r3
    578e:	3202      	adds	r2, #2
    5790:	2b80      	cmp	r3, #128	; 0x80
    5792:	d1f7      	bne.n	5784 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5794:	3380      	adds	r3, #128	; 0x80
    5796:	20ff      	movs	r0, #255	; 0xff
    5798:	4003      	ands	r3, r0
		}
	}

	return c;
}
    579a:	0018      	movs	r0, r3
    579c:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    579e:	2300      	movs	r3, #0
    57a0:	28ff      	cmp	r0, #255	; 0xff
    57a2:	d8fa      	bhi.n	579a <ff_convert+0x2a>
    57a4:	3880      	subs	r0, #128	; 0x80
    57a6:	0040      	lsls	r0, r0, #1
    57a8:	4b02      	ldr	r3, [pc, #8]	; (57b4 <ff_convert+0x44>)
    57aa:	5ac3      	ldrh	r3, [r0, r3]
    57ac:	e7f5      	b.n	579a <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    57ae:	2300      	movs	r3, #0
    57b0:	e7f0      	b.n	5794 <ff_convert+0x24>
    57b2:	46c0      	nop			; (mov r8, r8)
    57b4:	0000aaa0 	.word	0x0000aaa0

000057b8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    57b8:	2861      	cmp	r0, #97	; 0x61
    57ba:	d014      	beq.n	57e6 <ff_wtoupper+0x2e>
    57bc:	4b0b      	ldr	r3, [pc, #44]	; (57ec <ff_wtoupper+0x34>)
    57be:	3304      	adds	r3, #4
    57c0:	2101      	movs	r1, #1
    57c2:	2262      	movs	r2, #98	; 0x62
    57c4:	4290      	cmp	r0, r2
    57c6:	d007      	beq.n	57d8 <ff_wtoupper+0x20>
    57c8:	3101      	adds	r1, #1
    57ca:	3302      	adds	r3, #2
    57cc:	1e9a      	subs	r2, r3, #2
    57ce:	8812      	ldrh	r2, [r2, #0]
    57d0:	2a00      	cmp	r2, #0
    57d2:	d1f7      	bne.n	57c4 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    57d4:	0003      	movs	r3, r0
    57d6:	e004      	b.n	57e2 <ff_wtoupper+0x2a>
    57d8:	1e03      	subs	r3, r0, #0
    57da:	d002      	beq.n	57e2 <ff_wtoupper+0x2a>
    57dc:	0049      	lsls	r1, r1, #1
    57de:	4b04      	ldr	r3, [pc, #16]	; (57f0 <ff_wtoupper+0x38>)
    57e0:	5acb      	ldrh	r3, [r1, r3]
}
    57e2:	0018      	movs	r0, r3
    57e4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    57e6:	2100      	movs	r1, #0
    57e8:	e7f8      	b.n	57dc <ff_wtoupper+0x24>
    57ea:	46c0      	nop			; (mov r8, r8)
    57ec:	0000aba0 	.word	0x0000aba0
    57f0:	0000ad80 	.word	0x0000ad80

000057f4 <audio_sync_reached_callback>:
	return true;
}

static void audio_sync_reached_callback(void)
{
	syncing_reached = true;
    57f4:	2201      	movs	r2, #1
    57f6:	4b01      	ldr	r3, [pc, #4]	; (57fc <audio_sync_reached_callback+0x8>)
    57f8:	701a      	strb	r2, [r3, #0]
}
    57fa:	4770      	bx	lr
    57fc:	200002d6 	.word	0x200002d6

00005800 <audio_in_init>:
{
    5800:	b5f0      	push	{r4, r5, r6, r7, lr}
    5802:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
    5804:	a90f      	add	r1, sp, #60	; 0x3c
    5806:	2501      	movs	r5, #1
    5808:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    580a:	2600      	movs	r6, #0
    580c:	708e      	strb	r6, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    580e:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
    5810:	2014      	movs	r0, #20
    5812:	4f28      	ldr	r7, [pc, #160]	; (58b4 <audio_in_init+0xb4>)
    5814:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5816:	2280      	movs	r2, #128	; 0x80
    5818:	0352      	lsls	r2, r2, #13
    581a:	4b27      	ldr	r3, [pc, #156]	; (58b8 <audio_in_init+0xb8>)
    581c:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    581e:	4c27      	ldr	r4, [pc, #156]	; (58bc <audio_in_init+0xbc>)
    5820:	232f      	movs	r3, #47	; 0x2f
    5822:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5824:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
    5826:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5828:	466b      	mov	r3, sp
    582a:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    582c:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    582e:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5830:	4669      	mov	r1, sp
    5832:	202f      	movs	r0, #47	; 0x2f
    5834:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    5836:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5838:	09d1      	lsrs	r1, r2, #7
		return NULL;
    583a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    583c:	2900      	cmp	r1, #0
    583e:	d104      	bne.n	584a <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
    5840:	0953      	lsrs	r3, r2, #5
    5842:	01db      	lsls	r3, r3, #7
    5844:	491c      	ldr	r1, [pc, #112]	; (58b8 <audio_in_init+0xb8>)
    5846:	468c      	mov	ip, r1
    5848:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    584a:	211f      	movs	r1, #31
    584c:	4011      	ands	r1, r2
    584e:	2201      	movs	r2, #1
    5850:	0010      	movs	r0, r2
    5852:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    5854:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    5856:	ac01      	add	r4, sp, #4
    5858:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    585a:	2300      	movs	r3, #0
    585c:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    585e:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5860:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5862:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5864:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5866:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    5868:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    586a:	3223      	adds	r2, #35	; 0x23
    586c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    586e:	3a18      	subs	r2, #24
    5870:	2100      	movs	r1, #0
    5872:	a807      	add	r0, sp, #28
    5874:	4b12      	ldr	r3, [pc, #72]	; (58c0 <audio_in_init+0xc0>)
    5876:	4798      	blx	r3
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
    5878:	2380      	movs	r3, #128	; 0x80
    587a:	039b      	lsls	r3, r3, #14
    587c:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
    587e:	4b11      	ldr	r3, [pc, #68]	; (58c4 <audio_in_init+0xc4>)
    5880:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
    5882:	4b11      	ldr	r3, [pc, #68]	; (58c8 <audio_in_init+0xc8>)
    5884:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
    5886:	4b11      	ldr	r3, [pc, #68]	; (58cc <audio_in_init+0xcc>)
    5888:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
    588a:	2301      	movs	r3, #1
    588c:	425b      	negs	r3, r3
    588e:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
    5890:	4b0f      	ldr	r3, [pc, #60]	; (58d0 <audio_in_init+0xd0>)
    5892:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
    5894:	4d0f      	ldr	r5, [pc, #60]	; (58d4 <audio_in_init+0xd4>)
    5896:	0022      	movs	r2, r4
    5898:	490f      	ldr	r1, [pc, #60]	; (58d8 <audio_in_init+0xd8>)
    589a:	0028      	movs	r0, r5
    589c:	4b0f      	ldr	r3, [pc, #60]	; (58dc <audio_in_init+0xdc>)
    589e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    58a0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    58a2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    58a4:	2b00      	cmp	r3, #0
    58a6:	d1fc      	bne.n	58a2 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    58a8:	6813      	ldr	r3, [r2, #0]
    58aa:	2102      	movs	r1, #2
    58ac:	430b      	orrs	r3, r1
    58ae:	6013      	str	r3, [r2, #0]
}
    58b0:	b011      	add	sp, #68	; 0x44
    58b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58b4:	000088f9 	.word	0x000088f9
    58b8:	41004400 	.word	0x41004400
    58bc:	20000658 	.word	0x20000658
    58c0:	000093bf 	.word	0x000093bf
    58c4:	00100002 	.word	0x00100002
    58c8:	00110002 	.word	0x00110002
    58cc:	00120002 	.word	0x00120002
    58d0:	001e8480 	.word	0x001e8480
    58d4:	200005f4 	.word	0x200005f4
    58d8:	42000c00 	.word	0x42000c00
    58dc:	000075d1 	.word	0x000075d1

000058e0 <audio_record_init>:
bool audio_record_init(void) {
    58e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58e2:	46ce      	mov	lr, r9
    58e4:	b500      	push	{lr}
    58e6:	b086      	sub	sp, #24
	rtc_calendar_get_time(&rtc_instance, &current_time);
    58e8:	ae02      	add	r6, sp, #8
    58ea:	0031      	movs	r1, r6
    58ec:	4840      	ldr	r0, [pc, #256]	; (59f0 <audio_record_init+0x110>)
    58ee:	4b41      	ldr	r3, [pc, #260]	; (59f4 <audio_record_init+0x114>)
    58f0:	4798      	blx	r3
	char temp_str[4] = "";
    58f2:	ad01      	add	r5, sp, #4
    58f4:	2300      	movs	r3, #0
    58f6:	4699      	mov	r9, r3
    58f8:	9301      	str	r3, [sp, #4]
	sprintf(temp_str, "%d", SD_SLOT_NUMBER);
    58fa:	2200      	movs	r2, #0
    58fc:	493e      	ldr	r1, [pc, #248]	; (59f8 <audio_record_init+0x118>)
    58fe:	0028      	movs	r0, r5
    5900:	4f3e      	ldr	r7, [pc, #248]	; (59fc <audio_record_init+0x11c>)
    5902:	47b8      	blx	r7
	fn[0] = temp_str[0];
    5904:	ac05      	add	r4, sp, #20
    5906:	782b      	ldrb	r3, [r5, #0]
    5908:	7023      	strb	r3, [r4, #0]
	fn[1] = ':';
    590a:	233a      	movs	r3, #58	; 0x3a
    590c:	7063      	strb	r3, [r4, #1]
	sprintf(temp_str, "%02d", (current_time.year - 2000));
    590e:	88f2      	ldrh	r2, [r6, #6]
    5910:	4b3b      	ldr	r3, [pc, #236]	; (5a00 <audio_record_init+0x120>)
    5912:	469c      	mov	ip, r3
    5914:	4462      	add	r2, ip
    5916:	493b      	ldr	r1, [pc, #236]	; (5a04 <audio_record_init+0x124>)
    5918:	0028      	movs	r0, r5
    591a:	47b8      	blx	r7
	fn[2] = temp_str[0];
    591c:	782b      	ldrb	r3, [r5, #0]
    591e:	70a3      	strb	r3, [r4, #2]
	fn[3] = temp_str[1];
    5920:	786b      	ldrb	r3, [r5, #1]
    5922:	70e3      	strb	r3, [r4, #3]
	sprintf(temp_str, "%02d", current_time.month);
    5924:	7972      	ldrb	r2, [r6, #5]
    5926:	4937      	ldr	r1, [pc, #220]	; (5a04 <audio_record_init+0x124>)
    5928:	0028      	movs	r0, r5
    592a:	47b8      	blx	r7
	fn[4] = temp_str[0];
    592c:	782b      	ldrb	r3, [r5, #0]
    592e:	7123      	strb	r3, [r4, #4]
	fn[5] = temp_str[1];
    5930:	786b      	ldrb	r3, [r5, #1]
    5932:	7163      	strb	r3, [r4, #5]
	sprintf(temp_str, "%02d", current_time.day);
    5934:	7932      	ldrb	r2, [r6, #4]
    5936:	4933      	ldr	r1, [pc, #204]	; (5a04 <audio_record_init+0x124>)
    5938:	0028      	movs	r0, r5
    593a:	47b8      	blx	r7
	fn[6] = temp_str[0];
    593c:	782b      	ldrb	r3, [r5, #0]
    593e:	71a3      	strb	r3, [r4, #6]
	fn[7] = temp_str[1];
    5940:	786b      	ldrb	r3, [r5, #1]
    5942:	71e3      	strb	r3, [r4, #7]
	fn[8] = '_';
    5944:	235f      	movs	r3, #95	; 0x5f
    5946:	7223      	strb	r3, [r4, #8]
	sprintf(temp_str, "%02d", current_time.hour);
    5948:	78b2      	ldrb	r2, [r6, #2]
    594a:	492e      	ldr	r1, [pc, #184]	; (5a04 <audio_record_init+0x124>)
    594c:	0028      	movs	r0, r5
    594e:	47b8      	blx	r7
	fn[9] = temp_str[0];
    5950:	782b      	ldrb	r3, [r5, #0]
    5952:	7263      	strb	r3, [r4, #9]
	fn[10] = temp_str[1];
    5954:	786b      	ldrb	r3, [r5, #1]
    5956:	72a3      	strb	r3, [r4, #10]
	sprintf(temp_str, "%02d", current_time.minute);
    5958:	7872      	ldrb	r2, [r6, #1]
    595a:	492a      	ldr	r1, [pc, #168]	; (5a04 <audio_record_init+0x124>)
    595c:	0028      	movs	r0, r5
    595e:	47b8      	blx	r7
	fn[11] = temp_str[0];
    5960:	782b      	ldrb	r3, [r5, #0]
    5962:	72e3      	strb	r3, [r4, #11]
	fn[12] = temp_str[1];
    5964:	786b      	ldrb	r3, [r5, #1]
    5966:	7323      	strb	r3, [r4, #12]
	sprintf(temp_str, "%02d", current_time.second);
    5968:	7832      	ldrb	r2, [r6, #0]
    596a:	4926      	ldr	r1, [pc, #152]	; (5a04 <audio_record_init+0x124>)
    596c:	0028      	movs	r0, r5
    596e:	47b8      	blx	r7
	fn[13] = temp_str[0];
    5970:	782b      	ldrb	r3, [r5, #0]
    5972:	7363      	strb	r3, [r4, #13]
	fn[14] = temp_str[1];
    5974:	786b      	ldrb	r3, [r5, #1]
    5976:	73a3      	strb	r3, [r4, #14]
	fn[15] = '.';
    5978:	232e      	movs	r3, #46	; 0x2e
    597a:	73e3      	strb	r3, [r4, #15]
	fn[16] = 'w';
    597c:	3349      	adds	r3, #73	; 0x49
    597e:	7423      	strb	r3, [r4, #16]
	fn[17] = 'a';
    5980:	3b16      	subs	r3, #22
    5982:	7463      	strb	r3, [r4, #17]
	fn[18] = 'v';
    5984:	3315      	adds	r3, #21
    5986:	74a3      	strb	r3, [r4, #18]
	fn[19] = '\0';
    5988:	464b      	mov	r3, r9
    598a:	74e3      	strb	r3, [r4, #19]
	memset(&file_sys, 0, sizeof(FATFS));
    598c:	4c1e      	ldr	r4, [pc, #120]	; (5a08 <audio_record_init+0x128>)
    598e:	228c      	movs	r2, #140	; 0x8c
    5990:	0092      	lsls	r2, r2, #2
    5992:	2100      	movs	r1, #0
    5994:	0020      	movs	r0, r4
    5996:	4b1d      	ldr	r3, [pc, #116]	; (5a0c <audio_record_init+0x12c>)
    5998:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    599a:	0021      	movs	r1, r4
    599c:	2000      	movs	r0, #0
    599e:	4b1c      	ldr	r3, [pc, #112]	; (5a10 <audio_record_init+0x130>)
    59a0:	4798      	blx	r3
		return false;
    59a2:	2300      	movs	r3, #0
	if(res == FR_INVALID_DRIVE) {
    59a4:	280b      	cmp	r0, #11
    59a6:	d01d      	beq.n	59e4 <audio_record_init+0x104>
	res = f_open(&file_object, (char const *)&file_name, FA_CREATE_ALWAYS | FA_WRITE);
    59a8:	220a      	movs	r2, #10
    59aa:	a905      	add	r1, sp, #20
    59ac:	4819      	ldr	r0, [pc, #100]	; (5a14 <audio_record_init+0x134>)
    59ae:	4b1a      	ldr	r3, [pc, #104]	; (5a18 <audio_record_init+0x138>)
    59b0:	4798      	blx	r3
	if(res != FR_OK) {
    59b2:	2800      	cmp	r0, #0
    59b4:	d111      	bne.n	59da <audio_record_init+0xfa>
	res = f_write(&file_object, wave_header, 44, (UINT *)&bytes);
    59b6:	ab04      	add	r3, sp, #16
    59b8:	222c      	movs	r2, #44	; 0x2c
    59ba:	4918      	ldr	r1, [pc, #96]	; (5a1c <audio_record_init+0x13c>)
    59bc:	4815      	ldr	r0, [pc, #84]	; (5a14 <audio_record_init+0x134>)
    59be:	4c18      	ldr	r4, [pc, #96]	; (5a20 <audio_record_init+0x140>)
    59c0:	47a0      	blx	r4
	return true;
    59c2:	2301      	movs	r3, #1
	if(res != FR_OK) {
    59c4:	2800      	cmp	r0, #0
    59c6:	d00d      	beq.n	59e4 <audio_record_init+0x104>
		printf("Error while writing WAV header: #%d\n\r", res);
    59c8:	0001      	movs	r1, r0
    59ca:	4816      	ldr	r0, [pc, #88]	; (5a24 <audio_record_init+0x144>)
    59cc:	4b16      	ldr	r3, [pc, #88]	; (5a28 <audio_record_init+0x148>)
    59ce:	4798      	blx	r3
		f_close(&file_object);
    59d0:	4810      	ldr	r0, [pc, #64]	; (5a14 <audio_record_init+0x134>)
    59d2:	4b16      	ldr	r3, [pc, #88]	; (5a2c <audio_record_init+0x14c>)
    59d4:	4798      	blx	r3
		return false;
    59d6:	2300      	movs	r3, #0
    59d8:	e004      	b.n	59e4 <audio_record_init+0x104>
		printf("Error while opening file: #%d\n\r", res);
    59da:	0001      	movs	r1, r0
    59dc:	4814      	ldr	r0, [pc, #80]	; (5a30 <audio_record_init+0x150>)
    59de:	4b12      	ldr	r3, [pc, #72]	; (5a28 <audio_record_init+0x148>)
    59e0:	4798      	blx	r3
		return false;
    59e2:	2300      	movs	r3, #0
}
    59e4:	0018      	movs	r0, r3
    59e6:	b006      	add	sp, #24
    59e8:	bc04      	pop	{r2}
    59ea:	4691      	mov	r9, r2
    59ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	200005ec 	.word	0x200005ec
    59f4:	00002219 	.word	0x00002219
    59f8:	0000af60 	.word	0x0000af60
    59fc:	00009571 	.word	0x00009571
    5a00:	fffff830 	.word	0xfffff830
    5a04:	0000af64 	.word	0x0000af64
    5a08:	20001424 	.word	0x20001424
    5a0c:	000093bf 	.word	0x000093bf
    5a10:	000052dd 	.word	0x000052dd
    5a14:	20000600 	.word	0x20000600
    5a18:	0000530d 	.word	0x0000530d
    5a1c:	200000ac 	.word	0x200000ac
    5a20:	00005495 	.word	0x00005495
    5a24:	0000af8c 	.word	0x0000af8c
    5a28:	000093d1 	.word	0x000093d1
    5a2c:	00005759 	.word	0x00005759
    5a30:	0000af6c 	.word	0x0000af6c

00005a34 <audio_record_1samp>:
void audio_record_1samp(bool ub) {
    5a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a36:	b083      	sub	sp, #12
    5a38:	0004      	movs	r4, r0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5a3a:	4d18      	ldr	r5, [pc, #96]	; (5a9c <audio_record_1samp+0x68>)
    5a3c:	2680      	movs	r6, #128	; 0x80
    5a3e:	0376      	lsls	r6, r6, #13
    5a40:	616e      	str	r6, [r5, #20]
	spi_read_buffer_wait(&adc_spi_module, adc_vals, 2, 0xFF);
    5a42:	23ff      	movs	r3, #255	; 0xff
    5a44:	2202      	movs	r2, #2
    5a46:	a901      	add	r1, sp, #4
    5a48:	4815      	ldr	r0, [pc, #84]	; (5aa0 <audio_record_1samp+0x6c>)
    5a4a:	4f16      	ldr	r7, [pc, #88]	; (5aa4 <audio_record_1samp+0x70>)
    5a4c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    5a4e:	61ae      	str	r6, [r5, #24]
	if(ub) {
    5a50:	2c00      	cmp	r4, #0
    5a52:	d012      	beq.n	5a7a <audio_record_1samp+0x46>
		audio_buffer[1][audio_frame_cnt] = ((uint16_t)adc_vals[0] << 8) || (adc_vals[1]);
    5a54:	4b14      	ldr	r3, [pc, #80]	; (5aa8 <audio_record_1samp+0x74>)
    5a56:	681b      	ldr	r3, [r3, #0]
    5a58:	aa01      	add	r2, sp, #4
    5a5a:	7812      	ldrb	r2, [r2, #0]
    5a5c:	2a00      	cmp	r2, #0
    5a5e:	d104      	bne.n	5a6a <audio_record_1samp+0x36>
    5a60:	aa01      	add	r2, sp, #4
    5a62:	7854      	ldrb	r4, [r2, #1]
    5a64:	1e62      	subs	r2, r4, #1
    5a66:	4194      	sbcs	r4, r2
    5a68:	b2e4      	uxtb	r4, r4
    5a6a:	4a10      	ldr	r2, [pc, #64]	; (5aac <audio_record_1samp+0x78>)
    5a6c:	4694      	mov	ip, r2
    5a6e:	4463      	add	r3, ip
    5a70:	005b      	lsls	r3, r3, #1
    5a72:	4a0f      	ldr	r2, [pc, #60]	; (5ab0 <audio_record_1samp+0x7c>)
    5a74:	529c      	strh	r4, [r3, r2]
}
    5a76:	b003      	add	sp, #12
    5a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		audio_buffer[0][audio_frame_cnt] = ((uint16_t)adc_vals[0] << 8) || (adc_vals[1]);
    5a7a:	4b0b      	ldr	r3, [pc, #44]	; (5aa8 <audio_record_1samp+0x74>)
    5a7c:	681a      	ldr	r2, [r3, #0]
    5a7e:	ab01      	add	r3, sp, #4
    5a80:	7819      	ldrb	r1, [r3, #0]
    5a82:	2301      	movs	r3, #1
    5a84:	2900      	cmp	r1, #0
    5a86:	d104      	bne.n	5a92 <audio_record_1samp+0x5e>
    5a88:	ab01      	add	r3, sp, #4
    5a8a:	785b      	ldrb	r3, [r3, #1]
    5a8c:	1e59      	subs	r1, r3, #1
    5a8e:	418b      	sbcs	r3, r1
    5a90:	b2db      	uxtb	r3, r3
    5a92:	0052      	lsls	r2, r2, #1
    5a94:	4906      	ldr	r1, [pc, #24]	; (5ab0 <audio_record_1samp+0x7c>)
    5a96:	5253      	strh	r3, [r2, r1]
}
    5a98:	e7ed      	b.n	5a76 <audio_record_1samp+0x42>
    5a9a:	46c0      	nop			; (mov r8, r8)
    5a9c:	41004400 	.word	0x41004400
    5aa0:	200005f4 	.word	0x200005f4
    5aa4:	00007905 	.word	0x00007905
    5aa8:	200002cc 	.word	0x200002cc
    5aac:	00000372 	.word	0x00000372
    5ab0:	2000065c 	.word	0x2000065c

00005ab4 <audio_write_chunck>:
{
    5ab4:	b510      	push	{r4, lr}
    5ab6:	b082      	sub	sp, #8
	res = f_write(&file_object, audio_buffer[ub], 882, (UINT *)&bytes);
    5ab8:	490e      	ldr	r1, [pc, #56]	; (5af4 <audio_write_chunck+0x40>)
    5aba:	4341      	muls	r1, r0
    5abc:	480e      	ldr	r0, [pc, #56]	; (5af8 <audio_write_chunck+0x44>)
    5abe:	1809      	adds	r1, r1, r0
    5ac0:	ab01      	add	r3, sp, #4
    5ac2:	4a0e      	ldr	r2, [pc, #56]	; (5afc <audio_write_chunck+0x48>)
    5ac4:	480e      	ldr	r0, [pc, #56]	; (5b00 <audio_write_chunck+0x4c>)
    5ac6:	4c0f      	ldr	r4, [pc, #60]	; (5b04 <audio_write_chunck+0x50>)
    5ac8:	47a0      	blx	r4
	if(res != FR_OK) {
    5aca:	2800      	cmp	r0, #0
    5acc:	d10a      	bne.n	5ae4 <audio_write_chunck+0x30>
		res = f_sync(&file_object);
    5ace:	480c      	ldr	r0, [pc, #48]	; (5b00 <audio_write_chunck+0x4c>)
    5ad0:	4b0d      	ldr	r3, [pc, #52]	; (5b08 <audio_write_chunck+0x54>)
    5ad2:	4798      	blx	r3
	return true;
    5ad4:	2301      	movs	r3, #1
		if(res != FR_OK) {
    5ad6:	2800      	cmp	r0, #0
    5ad8:	d008      	beq.n	5aec <audio_write_chunck+0x38>
			f_close(&file_object);
    5ada:	4809      	ldr	r0, [pc, #36]	; (5b00 <audio_write_chunck+0x4c>)
    5adc:	4b0b      	ldr	r3, [pc, #44]	; (5b0c <audio_write_chunck+0x58>)
    5ade:	4798      	blx	r3
			return false;
    5ae0:	2300      	movs	r3, #0
    5ae2:	e003      	b.n	5aec <audio_write_chunck+0x38>
		f_close(&file_object);
    5ae4:	4806      	ldr	r0, [pc, #24]	; (5b00 <audio_write_chunck+0x4c>)
    5ae6:	4b09      	ldr	r3, [pc, #36]	; (5b0c <audio_write_chunck+0x58>)
    5ae8:	4798      	blx	r3
		return false;
    5aea:	2300      	movs	r3, #0
}
    5aec:	0018      	movs	r0, r3
    5aee:	b002      	add	sp, #8
    5af0:	bd10      	pop	{r4, pc}
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	000006e4 	.word	0x000006e4
    5af8:	2000065c 	.word	0x2000065c
    5afc:	00000372 	.word	0x00000372
    5b00:	20000600 	.word	0x20000600
    5b04:	00005495 	.word	0x00005495
    5b08:	000056cd 	.word	0x000056cd
    5b0c:	00005759 	.word	0x00005759

00005b10 <audio_sync_init>:

void audio_sync_init(void)
{
    5b10:	b570      	push	{r4, r5, r6, lr}
    5b12:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    5b14:	4d1f      	ldr	r5, [pc, #124]	; (5b94 <audio_sync_init+0x84>)
    5b16:	0029      	movs	r1, r5
    5b18:	a801      	add	r0, sp, #4
    5b1a:	4b1f      	ldr	r3, [pc, #124]	; (5b98 <audio_sync_init+0x88>)
    5b1c:	4798      	blx	r3
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
    5b1e:	4b1f      	ldr	r3, [pc, #124]	; (5b9c <audio_sync_init+0x8c>)
    5b20:	9302      	str	r3, [sp, #8]
	config_tcc.compare.match[0] = AUDIO_SYNC_CONV_CNT;
    5b22:	2301      	movs	r3, #1
    5b24:	9308      	str	r3, [sp, #32]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
    5b26:	4c1e      	ldr	r4, [pc, #120]	; (5ba0 <audio_sync_init+0x90>)
    5b28:	aa01      	add	r2, sp, #4
    5b2a:	0029      	movs	r1, r5
    5b2c:	0020      	movs	r0, r4
    5b2e:	4b1d      	ldr	r3, [pc, #116]	; (5ba4 <audio_sync_init+0x94>)
    5b30:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5b32:	6822      	ldr	r2, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5b34:	2102      	movs	r1, #2
    5b36:	6893      	ldr	r3, [r2, #8]
    5b38:	4219      	tst	r1, r3
    5b3a:	d1fc      	bne.n	5b36 <audio_sync_init+0x26>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5b3c:	6813      	ldr	r3, [r2, #0]
    5b3e:	2102      	movs	r1, #2
    5b40:	430b      	orrs	r3, r1
    5b42:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5b44:	4b16      	ldr	r3, [pc, #88]	; (5ba0 <audio_sync_init+0x90>)
    5b46:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5b48:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    5b4a:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    5b4c:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5b4e:	6893      	ldr	r3, [r2, #8]
    5b50:	4219      	tst	r1, r3
    5b52:	d1fc      	bne.n	5b4e <audio_sync_init+0x3e>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    5b54:	7953      	ldrb	r3, [r2, #5]
    5b56:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    5b58:	d005      	beq.n	5b66 <audio_sync_init+0x56>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    5b5a:	2b40      	cmp	r3, #64	; 0x40
    5b5c:	d005      	beq.n	5b6a <audio_sync_init+0x5a>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    5b5e:	2b20      	cmp	r3, #32
    5b60:	d1f5      	bne.n	5b4e <audio_sync_init+0x3e>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    5b62:	7114      	strb	r4, [r2, #4]
    5b64:	e7f3      	b.n	5b4e <audio_sync_init+0x3e>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
    5b66:	2340      	movs	r3, #64	; 0x40
    5b68:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, (tcc_callback_t)audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
    5b6a:	4e0f      	ldr	r6, [pc, #60]	; (5ba8 <audio_sync_init+0x98>)
    5b6c:	4c0c      	ldr	r4, [pc, #48]	; (5ba0 <audio_sync_init+0x90>)
    5b6e:	2200      	movs	r2, #0
    5b70:	0031      	movs	r1, r6
    5b72:	0020      	movs	r0, r4
    5b74:	4d0d      	ldr	r5, [pc, #52]	; (5bac <audio_sync_init+0x9c>)
    5b76:	47a8      	blx	r5
	tcc_register_callback(&audio_syncer_module, (tcc_callback_t)audio_sync_reached_callback, TCC_CALLBACK_CHANNEL_0);
    5b78:	2208      	movs	r2, #8
    5b7a:	0031      	movs	r1, r6
    5b7c:	0020      	movs	r0, r4
    5b7e:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
    5b80:	2100      	movs	r1, #0
    5b82:	0020      	movs	r0, r4
    5b84:	4d0a      	ldr	r5, [pc, #40]	; (5bb0 <audio_sync_init+0xa0>)
    5b86:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_CHANNEL_0);
    5b88:	2108      	movs	r1, #8
    5b8a:	0020      	movs	r0, r4
    5b8c:	47a8      	blx	r5
}
    5b8e:	b02a      	add	sp, #168	; 0xa8
    5b90:	bd70      	pop	{r4, r5, r6, pc}
    5b92:	46c0      	nop			; (mov r8, r8)
    5b94:	42002000 	.word	0x42002000
    5b98:	00000149 	.word	0x00000149
    5b9c:	0000042e 	.word	0x0000042e
    5ba0:	20001654 	.word	0x20001654
    5ba4:	00000295 	.word	0x00000295
    5ba8:	000057f5 	.word	0x000057f5
    5bac:	000006a1 	.word	0x000006a1
    5bb0:	000006b9 	.word	0x000006b9

00005bb4 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    5bb4:	b570      	push	{r4, r5, r6, lr}
    5bb6:	b088      	sub	sp, #32
		sleepmgr_locks[i] = 0;
    5bb8:	4b5c      	ldr	r3, [pc, #368]	; (5d2c <main+0x178>)
    5bba:	2400      	movs	r4, #0
    5bbc:	701c      	strb	r4, [r3, #0]
    5bbe:	705c      	strb	r4, [r3, #1]
    5bc0:	709c      	strb	r4, [r3, #2]
    5bc2:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5bc4:	2501      	movs	r5, #1
    5bc6:	711d      	strb	r5, [r3, #4]
	irq_initialize_vectors();

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    5bc8:	4b59      	ldr	r3, [pc, #356]	; (5d30 <main+0x17c>)
    5bca:	4798      	blx	r3
	
	delay_init();
    5bcc:	4b59      	ldr	r3, [pc, #356]	; (5d34 <main+0x180>)
    5bce:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    5bd0:	aa03      	add	r2, sp, #12
    5bd2:	23a0      	movs	r3, #160	; 0xa0
    5bd4:	011b      	lsls	r3, r3, #4
    5bd6:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    5bd8:	7094      	strb	r4, [r2, #2]
	config->continuously_update = false;
    5bda:	70d4      	strb	r4, [r2, #3]
	config->year_init_value     = 2000;
    5bdc:	23fa      	movs	r3, #250	; 0xfa
    5bde:	00db      	lsls	r3, r3, #3
    5be0:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    5be2:	7214      	strb	r4, [r2, #8]
    5be4:	7254      	strb	r4, [r2, #9]
    5be6:	7294      	strb	r4, [r2, #10]
    5be8:	72d4      	strb	r4, [r2, #11]
    5bea:	7315      	strb	r5, [r2, #12]
    5bec:	7355      	strb	r5, [r2, #13]
    5bee:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    5bf0:	2306      	movs	r3, #6
    5bf2:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    5bf4:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    5bf6:	4c50      	ldr	r4, [pc, #320]	; (5d38 <main+0x184>)
    5bf8:	4950      	ldr	r1, [pc, #320]	; (5d3c <main+0x188>)
    5bfa:	0020      	movs	r0, r4
    5bfc:	4b50      	ldr	r3, [pc, #320]	; (5d40 <main+0x18c>)
    5bfe:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5c00:	0020      	movs	r0, r4
    5c02:	4b50      	ldr	r3, [pc, #320]	; (5d44 <main+0x190>)
    5c04:	4798      	blx	r3
	current_time.year = 2018;
    5c06:	a901      	add	r1, sp, #4
    5c08:	4b4f      	ldr	r3, [pc, #316]	; (5d48 <main+0x194>)
    5c0a:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    5c0c:	2302      	movs	r3, #2
    5c0e:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    5c10:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    5c12:	3309      	adds	r3, #9
    5c14:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    5c16:	331c      	adds	r3, #28
    5c18:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    5c1a:	3303      	adds	r3, #3
    5c1c:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    5c1e:	0020      	movs	r0, r4
    5c20:	4b4a      	ldr	r3, [pc, #296]	; (5d4c <main+0x198>)
    5c22:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    5c24:	0020      	movs	r0, r4
    5c26:	4b4a      	ldr	r3, [pc, #296]	; (5d50 <main+0x19c>)
    5c28:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    5c2a:	4b4a      	ldr	r3, [pc, #296]	; (5d54 <main+0x1a0>)
    5c2c:	4798      	blx	r3
	ui_powerdown();
    5c2e:	4b4a      	ldr	r3, [pc, #296]	; (5d58 <main+0x1a4>)
    5c30:	4798      	blx	r3
	ui_cdc_init();
    5c32:	4b4a      	ldr	r3, [pc, #296]	; (5d5c <main+0x1a8>)
    5c34:	4798      	blx	r3
	ui_configure_callback();
    5c36:	4b4a      	ldr	r3, [pc, #296]	; (5d60 <main+0x1ac>)
    5c38:	4798      	blx	r3

	sd_mmc_init();
    5c3a:	4b4a      	ldr	r3, [pc, #296]	; (5d64 <main+0x1b0>)
    5c3c:	4798      	blx	r3
	memories_initialization();
    5c3e:	4b4a      	ldr	r3, [pc, #296]	; (5d68 <main+0x1b4>)
    5c40:	4798      	blx	r3
	
	audio_in_init();
    5c42:	4b4a      	ldr	r3, [pc, #296]	; (5d6c <main+0x1b8>)
    5c44:	4798      	blx	r3
	audio_sync_init();
    5c46:	4b4a      	ldr	r3, [pc, #296]	; (5d70 <main+0x1bc>)
    5c48:	4798      	blx	r3
	cpu_irq_enable();
    5c4a:	4b4a      	ldr	r3, [pc, #296]	; (5d74 <main+0x1c0>)
    5c4c:	701d      	strb	r5, [r3, #0]
    5c4e:	f3bf 8f5f 	dmb	sy
    5c52:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    5c54:	4b48      	ldr	r3, [pc, #288]	; (5d78 <main+0x1c4>)
    5c56:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_request) {
    5c58:	4d48      	ldr	r5, [pc, #288]	; (5d7c <main+0x1c8>)
			/* Testing if SD card is present */
			if(sd_test_availability()) {
    5c5a:	4c49      	ldr	r4, [pc, #292]	; (5d80 <main+0x1cc>)
    5c5c:	e03f      	b.n	5cde <main+0x12a>
    5c5e:	47a0      	blx	r4
    5c60:	2800      	cmp	r0, #0
    5c62:	d03f      	beq.n	5ce4 <main+0x130>
				if(audio_record_init()) {
    5c64:	4b47      	ldr	r3, [pc, #284]	; (5d84 <main+0x1d0>)
    5c66:	4798      	blx	r3
    5c68:	2800      	cmp	r0, #0
    5c6a:	d006      	beq.n	5c7a <main+0xc6>
					recording_ready = true;
    5c6c:	2201      	movs	r2, #1
    5c6e:	4b46      	ldr	r3, [pc, #280]	; (5d88 <main+0x1d4>)
    5c70:	701a      	strb	r2, [r3, #0]
				}
				else {
					printf("Error while initializing audio recording!!\n\r");
				}
				recording_request = false;
    5c72:	2300      	movs	r3, #0
    5c74:	4a41      	ldr	r2, [pc, #260]	; (5d7c <main+0x1c8>)
    5c76:	7013      	strb	r3, [r2, #0]
    5c78:	e034      	b.n	5ce4 <main+0x130>
					printf("Error while initializing audio recording!!\n\r");
    5c7a:	4844      	ldr	r0, [pc, #272]	; (5d8c <main+0x1d8>)
    5c7c:	4b44      	ldr	r3, [pc, #272]	; (5d90 <main+0x1dc>)
    5c7e:	4798      	blx	r3
    5c80:	e7f7      	b.n	5c72 <main+0xbe>
			}
		}
		
		if(recording_ready) {
			audio_frame_cnt = 0;
    5c82:	2200      	movs	r2, #0
    5c84:	4b43      	ldr	r3, [pc, #268]	; (5d94 <main+0x1e0>)
    5c86:	601a      	str	r2, [r3, #0]
			audio_record_1samp(false);
    5c88:	2000      	movs	r0, #0
    5c8a:	4b43      	ldr	r3, [pc, #268]	; (5d98 <main+0x1e4>)
    5c8c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5c8e:	4b43      	ldr	r3, [pc, #268]	; (5d9c <main+0x1e8>)
    5c90:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5c92:	2104      	movs	r1, #4
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    5c94:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Cancel STOP command and issue RETRIGGER */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    5c96:	26e0      	movs	r6, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5c98:	6893      	ldr	r3, [r2, #8]
    5c9a:	4219      	tst	r1, r3
    5c9c:	d1fc      	bne.n	5c98 <main+0xe4>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    5c9e:	7953      	ldrb	r3, [r2, #5]
    5ca0:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    5ca2:	d005      	beq.n	5cb0 <main+0xfc>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    5ca4:	2b20      	cmp	r3, #32
    5ca6:	d005      	beq.n	5cb4 <main+0x100>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    5ca8:	2b40      	cmp	r3, #64	; 0x40
    5caa:	d1f5      	bne.n	5c98 <main+0xe4>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    5cac:	7116      	strb	r6, [r2, #4]
    5cae:	e7f3      	b.n	5c98 <main+0xe4>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
    5cb0:	2320      	movs	r3, #32
    5cb2:	7153      	strb	r3, [r2, #5]
			tcc_restart_counter(&audio_syncer_module);
			recording_ready = false;
    5cb4:	2200      	movs	r2, #0
    5cb6:	4b34      	ldr	r3, [pc, #208]	; (5d88 <main+0x1d4>)
    5cb8:	701a      	strb	r2, [r3, #0]
			recording_running = true;
    5cba:	3201      	adds	r2, #1
    5cbc:	4b38      	ldr	r3, [pc, #224]	; (5da0 <main+0x1ec>)
    5cbe:	701a      	strb	r2, [r3, #0]
    5cc0:	e014      	b.n	5cec <main+0x138>
				audio_frame_cnt = 0;
				if(!audio_write_chunck(audio_upper_buffer)) {
					printf("Error writing chunck!\n\r");
					while(1) {}
				}
				audio_upper_buffer = (audio_upper_buffer) ? false : true;
    5cc2:	4a38      	ldr	r2, [pc, #224]	; (5da4 <main+0x1f0>)
    5cc4:	7813      	ldrb	r3, [r2, #0]
    5cc6:	2101      	movs	r1, #1
    5cc8:	404b      	eors	r3, r1
    5cca:	7013      	strb	r3, [r2, #0]
			}
			audio_record_1samp(audio_upper_buffer);
    5ccc:	4b35      	ldr	r3, [pc, #212]	; (5da4 <main+0x1f0>)
    5cce:	7818      	ldrb	r0, [r3, #0]
    5cd0:	b2c0      	uxtb	r0, r0
    5cd2:	4b31      	ldr	r3, [pc, #196]	; (5d98 <main+0x1e4>)
    5cd4:	4798      	blx	r3
			//tcc_restart_counter(&audio_syncer_module);
		}
		
		if (main_b_msc_enable) {
    5cd6:	4b34      	ldr	r3, [pc, #208]	; (5da8 <main+0x1f4>)
    5cd8:	781b      	ldrb	r3, [r3, #0]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d123      	bne.n	5d26 <main+0x172>
		if(recording_request) {
    5cde:	782b      	ldrb	r3, [r5, #0]
    5ce0:	2b00      	cmp	r3, #0
    5ce2:	d1bc      	bne.n	5c5e <main+0xaa>
		if(recording_ready) {
    5ce4:	4b28      	ldr	r3, [pc, #160]	; (5d88 <main+0x1d4>)
    5ce6:	781b      	ldrb	r3, [r3, #0]
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d1ca      	bne.n	5c82 <main+0xce>
		if(syncing_reached) {
    5cec:	4b2f      	ldr	r3, [pc, #188]	; (5dac <main+0x1f8>)
    5cee:	781b      	ldrb	r3, [r3, #0]
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	d0f0      	beq.n	5cd6 <main+0x122>
			syncing_reached = false;
    5cf4:	2200      	movs	r2, #0
    5cf6:	4b2d      	ldr	r3, [pc, #180]	; (5dac <main+0x1f8>)
    5cf8:	701a      	strb	r2, [r3, #0]
			audio_frame_cnt++;
    5cfa:	4b26      	ldr	r3, [pc, #152]	; (5d94 <main+0x1e0>)
    5cfc:	681a      	ldr	r2, [r3, #0]
    5cfe:	3201      	adds	r2, #1
    5d00:	601a      	str	r2, [r3, #0]
			if(audio_frame_cnt >= 882) {
    5d02:	681a      	ldr	r2, [r3, #0]
    5d04:	4b2a      	ldr	r3, [pc, #168]	; (5db0 <main+0x1fc>)
    5d06:	429a      	cmp	r2, r3
    5d08:	d9e0      	bls.n	5ccc <main+0x118>
				audio_frame_cnt = 0;
    5d0a:	2200      	movs	r2, #0
    5d0c:	4b21      	ldr	r3, [pc, #132]	; (5d94 <main+0x1e0>)
    5d0e:	601a      	str	r2, [r3, #0]
				if(!audio_write_chunck(audio_upper_buffer)) {
    5d10:	4b24      	ldr	r3, [pc, #144]	; (5da4 <main+0x1f0>)
    5d12:	7818      	ldrb	r0, [r3, #0]
    5d14:	b2c0      	uxtb	r0, r0
    5d16:	4b27      	ldr	r3, [pc, #156]	; (5db4 <main+0x200>)
    5d18:	4798      	blx	r3
    5d1a:	2800      	cmp	r0, #0
    5d1c:	d1d1      	bne.n	5cc2 <main+0x10e>
					printf("Error writing chunck!\n\r");
    5d1e:	4826      	ldr	r0, [pc, #152]	; (5db8 <main+0x204>)
    5d20:	4b1b      	ldr	r3, [pc, #108]	; (5d90 <main+0x1dc>)
    5d22:	4798      	blx	r3
    5d24:	e7fe      	b.n	5d24 <main+0x170>
			if (!udi_msc_process_trans()) {
    5d26:	4b25      	ldr	r3, [pc, #148]	; (5dbc <main+0x208>)
    5d28:	4798      	blx	r3
    5d2a:	e7d8      	b.n	5cde <main+0x12a>
    5d2c:	20001b98 	.word	0x20001b98
    5d30:	00008c81 	.word	0x00008c81
    5d34:	00007d15 	.word	0x00007d15
    5d38:	200005ec 	.word	0x200005ec
    5d3c:	40001400 	.word	0x40001400
    5d40:	00002291 	.word	0x00002291
    5d44:	00002135 	.word	0x00002135
    5d48:	000007e2 	.word	0x000007e2
    5d4c:	00002201 	.word	0x00002201
    5d50:	0000234d 	.word	0x0000234d
    5d54:	00006149 	.word	0x00006149
    5d58:	00006231 	.word	0x00006231
    5d5c:	00006055 	.word	0x00006055
    5d60:	000061e9 	.word	0x000061e9
    5d64:	0000098d 	.word	0x0000098d
    5d68:	00005e19 	.word	0x00005e19
    5d6c:	00005801 	.word	0x00005801
    5d70:	00005b11 	.word	0x00005b11
    5d74:	20000125 	.word	0x20000125
    5d78:	00001b35 	.word	0x00001b35
    5d7c:	200002d4 	.word	0x200002d4
    5d80:	00005e1d 	.word	0x00005e1d
    5d84:	000058e1 	.word	0x000058e1
    5d88:	200002d3 	.word	0x200002d3
    5d8c:	0000afb4 	.word	0x0000afb4
    5d90:	000093d1 	.word	0x000093d1
    5d94:	200002cc 	.word	0x200002cc
    5d98:	00005a35 	.word	0x00005a35
    5d9c:	20001654 	.word	0x20001654
    5da0:	200002d5 	.word	0x200002d5
    5da4:	200002d0 	.word	0x200002d0
    5da8:	200002d1 	.word	0x200002d1
    5dac:	200002d6 	.word	0x200002d6
    5db0:	00000371 	.word	0x00000371
    5db4:	00005ab5 	.word	0x00005ab5
    5db8:	0000afe4 	.word	0x0000afe4
    5dbc:	00001855 	.word	0x00001855

00005dc0 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    5dc0:	b510      	push	{r4, lr}
	ui_powerdown();
    5dc2:	4b01      	ldr	r3, [pc, #4]	; (5dc8 <main_suspend_action+0x8>)
    5dc4:	4798      	blx	r3
}
    5dc6:	bd10      	pop	{r4, pc}
    5dc8:	00006231 	.word	0x00006231

00005dcc <main_resume_action>:

void main_resume_action(void)
{
    5dcc:	b510      	push	{r4, lr}
	ui_wakeup();
    5dce:	4b01      	ldr	r3, [pc, #4]	; (5dd4 <main_resume_action+0x8>)
    5dd0:	4798      	blx	r3
}
    5dd2:	bd10      	pop	{r4, pc}
    5dd4:	00006241 	.word	0x00006241

00005dd8 <main_sof_action>:

void main_sof_action(void)
{
    5dd8:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    5dda:	4b05      	ldr	r3, [pc, #20]	; (5df0 <main_sof_action+0x18>)
    5ddc:	781b      	ldrb	r3, [r3, #0]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d100      	bne.n	5de4 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    5de2:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    5de4:	4b03      	ldr	r3, [pc, #12]	; (5df4 <main_sof_action+0x1c>)
    5de6:	4798      	blx	r3
    5de8:	4b03      	ldr	r3, [pc, #12]	; (5df8 <main_sof_action+0x20>)
    5dea:	4798      	blx	r3
    5dec:	e7f9      	b.n	5de2 <main_sof_action+0xa>
    5dee:	46c0      	nop			; (mov r8, r8)
    5df0:	200002d1 	.word	0x200002d1
    5df4:	00003531 	.word	0x00003531
    5df8:	00006259 	.word	0x00006259

00005dfc <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    5dfc:	2201      	movs	r2, #1
    5dfe:	4b02      	ldr	r3, [pc, #8]	; (5e08 <main_msc_enable+0xc>)
    5e00:	701a      	strb	r2, [r3, #0]
	return true;
}
    5e02:	2001      	movs	r0, #1
    5e04:	4770      	bx	lr
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	200002d1 	.word	0x200002d1

00005e0c <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    5e0c:	2200      	movs	r2, #0
    5e0e:	4b01      	ldr	r3, [pc, #4]	; (5e14 <main_msc_disable+0x8>)
    5e10:	701a      	strb	r2, [r3, #0]
}
    5e12:	4770      	bx	lr
    5e14:	200002d1 	.word	0x200002d1

00005e18 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    5e18:	4770      	bx	lr
	...

00005e1c <sd_test_availability>:
#include "sd_management.h"

extern volatile bool recording_request;

bool sd_test_availability(void)
{
    5e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    5e1e:	4c2c      	ldr	r4, [pc, #176]	; (5ed0 <sd_test_availability+0xb4>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    5e20:	4d2c      	ldr	r5, [pc, #176]	; (5ed4 <sd_test_availability+0xb8>)
    5e22:	e028      	b.n	5e76 <sd_test_availability+0x5a>
			printf("Card install fail!\n\r");
    5e24:	482c      	ldr	r0, [pc, #176]	; (5ed8 <sd_test_availability+0xbc>)
    5e26:	4e2d      	ldr	r6, [pc, #180]	; (5edc <sd_test_availability+0xc0>)
    5e28:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    5e2a:	482d      	ldr	r0, [pc, #180]	; (5ee0 <sd_test_availability+0xc4>)
    5e2c:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    5e2e:	4e2d      	ldr	r6, [pc, #180]	; (5ee4 <sd_test_availability+0xc8>)
    5e30:	2000      	movs	r0, #0
    5e32:	47b0      	blx	r6
    5e34:	2802      	cmp	r0, #2
    5e36:	d1fb      	bne.n	5e30 <sd_test_availability+0x14>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5e38:	4b2b      	ldr	r3, [pc, #172]	; (5ee8 <sd_test_availability+0xcc>)
    5e3a:	2280      	movs	r2, #128	; 0x80
    5e3c:	0152      	lsls	r2, r2, #5
    5e3e:	61da      	str	r2, [r3, #28]
    5e40:	2280      	movs	r2, #128	; 0x80
    5e42:	0212      	lsls	r2, r2, #8
    5e44:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    5e46:	2000      	movs	r0, #0
    5e48:	4b22      	ldr	r3, [pc, #136]	; (5ed4 <sd_test_availability+0xb8>)
    5e4a:	4798      	blx	r3
    5e4c:	2296      	movs	r2, #150	; 0x96
    5e4e:	0052      	lsls	r2, r2, #1
    5e50:	2300      	movs	r3, #0
    5e52:	2100      	movs	r1, #0
    5e54:	4e25      	ldr	r6, [pc, #148]	; (5eec <sd_test_availability+0xd0>)
    5e56:	47b0      	blx	r6
    5e58:	4a25      	ldr	r2, [pc, #148]	; (5ef0 <sd_test_availability+0xd4>)
    5e5a:	2300      	movs	r3, #0
    5e5c:	1880      	adds	r0, r0, r2
    5e5e:	4159      	adcs	r1, r3
    5e60:	4a24      	ldr	r2, [pc, #144]	; (5ef4 <sd_test_availability+0xd8>)
    5e62:	2300      	movs	r3, #0
    5e64:	4e24      	ldr	r6, [pc, #144]	; (5ef8 <sd_test_availability+0xdc>)
    5e66:	47b0      	blx	r6
    5e68:	4b24      	ldr	r3, [pc, #144]	; (5efc <sd_test_availability+0xe0>)
    5e6a:	4798      	blx	r3
		if(!recording_request) {
    5e6c:	4b24      	ldr	r3, [pc, #144]	; (5f00 <sd_test_availability+0xe4>)
    5e6e:	7818      	ldrb	r0, [r3, #0]
    5e70:	b2c0      	uxtb	r0, r0
    5e72:	2800      	cmp	r0, #0
    5e74:	d024      	beq.n	5ec0 <sd_test_availability+0xa4>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    5e76:	2000      	movs	r0, #0
    5e78:	47a0      	blx	r4
    5e7a:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    5e7c:	2801      	cmp	r0, #1
    5e7e:	d0d1      	beq.n	5e24 <sd_test_availability+0x8>
    5e80:	4b19      	ldr	r3, [pc, #100]	; (5ee8 <sd_test_availability+0xcc>)
    5e82:	2280      	movs	r2, #128	; 0x80
    5e84:	0152      	lsls	r2, r2, #5
    5e86:	61da      	str	r2, [r3, #28]
    5e88:	2280      	movs	r2, #128	; 0x80
    5e8a:	0212      	lsls	r2, r2, #8
    5e8c:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    5e8e:	2000      	movs	r0, #0
    5e90:	47a8      	blx	r5
    5e92:	2296      	movs	r2, #150	; 0x96
    5e94:	0052      	lsls	r2, r2, #1
    5e96:	2300      	movs	r3, #0
    5e98:	2100      	movs	r1, #0
    5e9a:	4f14      	ldr	r7, [pc, #80]	; (5eec <sd_test_availability+0xd0>)
    5e9c:	47b8      	blx	r7
    5e9e:	4a14      	ldr	r2, [pc, #80]	; (5ef0 <sd_test_availability+0xd4>)
    5ea0:	2300      	movs	r3, #0
    5ea2:	1880      	adds	r0, r0, r2
    5ea4:	4159      	adcs	r1, r3
    5ea6:	4a13      	ldr	r2, [pc, #76]	; (5ef4 <sd_test_availability+0xd8>)
    5ea8:	2300      	movs	r3, #0
    5eaa:	4f13      	ldr	r7, [pc, #76]	; (5ef8 <sd_test_availability+0xdc>)
    5eac:	47b8      	blx	r7
    5eae:	4b13      	ldr	r3, [pc, #76]	; (5efc <sd_test_availability+0xe0>)
    5eb0:	4798      	blx	r3
		if(!recording_request) {
    5eb2:	4b13      	ldr	r3, [pc, #76]	; (5f00 <sd_test_availability+0xe4>)
    5eb4:	7818      	ldrb	r0, [r3, #0]
    5eb6:	b2c0      	uxtb	r0, r0
    5eb8:	2800      	cmp	r0, #0
    5eba:	d001      	beq.n	5ec0 <sd_test_availability+0xa4>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    5ebc:	2e00      	cmp	r6, #0
    5ebe:	d1da      	bne.n	5e76 <sd_test_availability+0x5a>
		port_base->OUTSET.reg = pin_mask;
    5ec0:	4b09      	ldr	r3, [pc, #36]	; (5ee8 <sd_test_availability+0xcc>)
    5ec2:	2280      	movs	r2, #128	; 0x80
    5ec4:	0152      	lsls	r2, r2, #5
    5ec6:	619a      	str	r2, [r3, #24]
    5ec8:	2280      	movs	r2, #128	; 0x80
    5eca:	0212      	lsls	r2, r2, #8
    5ecc:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
    5ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ed0:	00007d19 	.word	0x00007d19
    5ed4:	00008a3d 	.word	0x00008a3d
    5ed8:	0000affc 	.word	0x0000affc
    5edc:	000093d1 	.word	0x000093d1
    5ee0:	0000b014 	.word	0x0000b014
    5ee4:	000009ad 	.word	0x000009ad
    5ee8:	41004400 	.word	0x41004400
    5eec:	00009179 	.word	0x00009179
    5ef0:	00001b57 	.word	0x00001b57
    5ef4:	00001b58 	.word	0x00001b58
    5ef8:	00009139 	.word	0x00009139
    5efc:	20000001 	.word	0x20000001
    5f00:	200002d4 	.word	0x200002d4

00005f04 <ui_button2_callback>:
	}
}

void ui_button2_callback(void)
{
}
    5f04:	4770      	bx	lr
	...

00005f08 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	0005      	movs	r5, r0
    5f0e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5f10:	2200      	movs	r2, #0
    5f12:	466b      	mov	r3, sp
    5f14:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5f16:	4c06      	ldr	r4, [pc, #24]	; (5f30 <usart_serial_getchar+0x28>)
    5f18:	466b      	mov	r3, sp
    5f1a:	1d99      	adds	r1, r3, #6
    5f1c:	0028      	movs	r0, r5
    5f1e:	47a0      	blx	r4
    5f20:	2800      	cmp	r0, #0
    5f22:	d1f9      	bne.n	5f18 <usart_serial_getchar+0x10>

	*c = temp;
    5f24:	466b      	mov	r3, sp
    5f26:	3306      	adds	r3, #6
    5f28:	881b      	ldrh	r3, [r3, #0]
    5f2a:	7033      	strb	r3, [r6, #0]
}
    5f2c:	b002      	add	sp, #8
    5f2e:	bd70      	pop	{r4, r5, r6, pc}
    5f30:	000028a9 	.word	0x000028a9

00005f34 <usart_serial_putchar>:
{
    5f34:	b570      	push	{r4, r5, r6, lr}
    5f36:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5f38:	b28c      	uxth	r4, r1
    5f3a:	4e03      	ldr	r6, [pc, #12]	; (5f48 <usart_serial_putchar+0x14>)
    5f3c:	0021      	movs	r1, r4
    5f3e:	0028      	movs	r0, r5
    5f40:	47b0      	blx	r6
    5f42:	2800      	cmp	r0, #0
    5f44:	d1fa      	bne.n	5f3c <usart_serial_putchar+0x8>
}
    5f46:	bd70      	pop	{r4, r5, r6, pc}
    5f48:	0000287d 	.word	0x0000287d

00005f4c <ui_button1_callback>:
{
    5f4c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    5f4e:	4b18      	ldr	r3, [pc, #96]	; (5fb0 <ui_button1_callback+0x64>)
    5f50:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    5f52:	00db      	lsls	r3, r3, #3
    5f54:	d500      	bpl.n	5f58 <ui_button1_callback+0xc>
}
    5f56:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    5f58:	2000      	movs	r0, #0
    5f5a:	4b16      	ldr	r3, [pc, #88]	; (5fb4 <ui_button1_callback+0x68>)
    5f5c:	4798      	blx	r3
    5f5e:	2264      	movs	r2, #100	; 0x64
    5f60:	2300      	movs	r3, #0
    5f62:	2100      	movs	r1, #0
    5f64:	4c14      	ldr	r4, [pc, #80]	; (5fb8 <ui_button1_callback+0x6c>)
    5f66:	47a0      	blx	r4
    5f68:	4a14      	ldr	r2, [pc, #80]	; (5fbc <ui_button1_callback+0x70>)
    5f6a:	2300      	movs	r3, #0
    5f6c:	1880      	adds	r0, r0, r2
    5f6e:	4159      	adcs	r1, r3
    5f70:	4a13      	ldr	r2, [pc, #76]	; (5fc0 <ui_button1_callback+0x74>)
    5f72:	2300      	movs	r3, #0
    5f74:	4c13      	ldr	r4, [pc, #76]	; (5fc4 <ui_button1_callback+0x78>)
    5f76:	47a0      	blx	r4
    5f78:	4b13      	ldr	r3, [pc, #76]	; (5fc8 <ui_button1_callback+0x7c>)
    5f7a:	4798      	blx	r3
    5f7c:	4b0c      	ldr	r3, [pc, #48]	; (5fb0 <ui_button1_callback+0x64>)
    5f7e:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    5f80:	00db      	lsls	r3, r3, #3
    5f82:	d4e8      	bmi.n	5f56 <ui_button1_callback+0xa>
		if(recording_running || recording_request) {
    5f84:	4b11      	ldr	r3, [pc, #68]	; (5fcc <ui_button1_callback+0x80>)
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d107      	bne.n	5f9c <ui_button1_callback+0x50>
    5f8c:	4b10      	ldr	r3, [pc, #64]	; (5fd0 <ui_button1_callback+0x84>)
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2b00      	cmp	r3, #0
    5f92:	d103      	bne.n	5f9c <ui_button1_callback+0x50>
			recording_request = true;
    5f94:	2201      	movs	r2, #1
    5f96:	4b0e      	ldr	r3, [pc, #56]	; (5fd0 <ui_button1_callback+0x84>)
    5f98:	701a      	strb	r2, [r3, #0]
}
    5f9a:	e7dc      	b.n	5f56 <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    5f9c:	2280      	movs	r2, #128	; 0x80
    5f9e:	0152      	lsls	r2, r2, #5
    5fa0:	4b03      	ldr	r3, [pc, #12]	; (5fb0 <ui_button1_callback+0x64>)
    5fa2:	619a      	str	r2, [r3, #24]
			recording_request = false;
    5fa4:	2300      	movs	r3, #0
    5fa6:	4a0a      	ldr	r2, [pc, #40]	; (5fd0 <ui_button1_callback+0x84>)
    5fa8:	7013      	strb	r3, [r2, #0]
			recording_running = false;
    5faa:	4a08      	ldr	r2, [pc, #32]	; (5fcc <ui_button1_callback+0x80>)
    5fac:	7013      	strb	r3, [r2, #0]
    5fae:	e7d2      	b.n	5f56 <ui_button1_callback+0xa>
    5fb0:	41004400 	.word	0x41004400
    5fb4:	00008a3d 	.word	0x00008a3d
    5fb8:	00009179 	.word	0x00009179
    5fbc:	00001b57 	.word	0x00001b57
    5fc0:	00001b58 	.word	0x00001b58
    5fc4:	00009139 	.word	0x00009139
    5fc8:	20000001 	.word	0x20000001
    5fcc:	200002d5 	.word	0x200002d5
    5fd0:	200002d4 	.word	0x200002d4

00005fd4 <ui_button3_callback>:

void ui_button3_callback(void)
{
    5fd4:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    5fd6:	4b17      	ldr	r3, [pc, #92]	; (6034 <ui_button3_callback+0x60>)
    5fd8:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    5fda:	071b      	lsls	r3, r3, #28
    5fdc:	d500      	bpl.n	5fe0 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    5fde:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    5fe0:	2000      	movs	r0, #0
    5fe2:	4b15      	ldr	r3, [pc, #84]	; (6038 <ui_button3_callback+0x64>)
    5fe4:	4798      	blx	r3
    5fe6:	2264      	movs	r2, #100	; 0x64
    5fe8:	2300      	movs	r3, #0
    5fea:	2100      	movs	r1, #0
    5fec:	4c13      	ldr	r4, [pc, #76]	; (603c <ui_button3_callback+0x68>)
    5fee:	47a0      	blx	r4
    5ff0:	4a13      	ldr	r2, [pc, #76]	; (6040 <ui_button3_callback+0x6c>)
    5ff2:	2300      	movs	r3, #0
    5ff4:	1880      	adds	r0, r0, r2
    5ff6:	4159      	adcs	r1, r3
    5ff8:	4a12      	ldr	r2, [pc, #72]	; (6044 <ui_button3_callback+0x70>)
    5ffa:	2300      	movs	r3, #0
    5ffc:	4c12      	ldr	r4, [pc, #72]	; (6048 <ui_button3_callback+0x74>)
    5ffe:	47a0      	blx	r4
    6000:	4b12      	ldr	r3, [pc, #72]	; (604c <ui_button3_callback+0x78>)
    6002:	4798      	blx	r3
    6004:	4b0b      	ldr	r3, [pc, #44]	; (6034 <ui_button3_callback+0x60>)
    6006:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    6008:	071b      	lsls	r3, r3, #28
    600a:	d4e8      	bmi.n	5fde <ui_button3_callback+0xa>
		if(monitoring_on) {
    600c:	4b10      	ldr	r3, [pc, #64]	; (6050 <ui_button3_callback+0x7c>)
    600e:	781b      	ldrb	r3, [r3, #0]
    6010:	2b00      	cmp	r3, #0
    6012:	d107      	bne.n	6024 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    6014:	2280      	movs	r2, #128	; 0x80
    6016:	0212      	lsls	r2, r2, #8
    6018:	4b06      	ldr	r3, [pc, #24]	; (6034 <ui_button3_callback+0x60>)
    601a:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    601c:	2201      	movs	r2, #1
    601e:	4b0c      	ldr	r3, [pc, #48]	; (6050 <ui_button3_callback+0x7c>)
    6020:	701a      	strb	r2, [r3, #0]
}
    6022:	e7dc      	b.n	5fde <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    6024:	2280      	movs	r2, #128	; 0x80
    6026:	0212      	lsls	r2, r2, #8
    6028:	4b02      	ldr	r3, [pc, #8]	; (6034 <ui_button3_callback+0x60>)
    602a:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    602c:	2200      	movs	r2, #0
    602e:	4b08      	ldr	r3, [pc, #32]	; (6050 <ui_button3_callback+0x7c>)
    6030:	701a      	strb	r2, [r3, #0]
    6032:	e7d4      	b.n	5fde <ui_button3_callback+0xa>
    6034:	41004400 	.word	0x41004400
    6038:	00008a3d 	.word	0x00008a3d
    603c:	00009179 	.word	0x00009179
    6040:	00001b57 	.word	0x00001b57
    6044:	00001b58 	.word	0x00001b58
    6048:	00009139 	.word	0x00009139
    604c:	20000001 	.word	0x20000001
    6050:	200002d2 	.word	0x200002d2

00006054 <ui_cdc_init>:
{
    6054:	b5f0      	push	{r4, r5, r6, r7, lr}
    6056:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6058:	2380      	movs	r3, #128	; 0x80
    605a:	05db      	lsls	r3, r3, #23
    605c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    605e:	2300      	movs	r3, #0
    6060:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6062:	22ff      	movs	r2, #255	; 0xff
    6064:	4669      	mov	r1, sp
    6066:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6068:	2200      	movs	r2, #0
    606a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    606c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    606e:	2401      	movs	r4, #1
    6070:	2124      	movs	r1, #36	; 0x24
    6072:	4668      	mov	r0, sp
    6074:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    6076:	3101      	adds	r1, #1
    6078:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    607a:	3101      	adds	r1, #1
    607c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    607e:	3101      	adds	r1, #1
    6080:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    6082:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6084:	3105      	adds	r1, #5
    6086:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    6088:	3101      	adds	r1, #1
    608a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    608c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    608e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6090:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6092:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6094:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6096:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    6098:	2313      	movs	r3, #19
    609a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    609c:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    609e:	2380      	movs	r3, #128	; 0x80
    60a0:	035b      	lsls	r3, r3, #13
    60a2:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    60a4:	4b1a      	ldr	r3, [pc, #104]	; (6110 <ui_cdc_init+0xbc>)
    60a6:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    60a8:	4b1a      	ldr	r3, [pc, #104]	; (6114 <ui_cdc_init+0xc0>)
    60aa:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    60ac:	2301      	movs	r3, #1
    60ae:	425b      	negs	r3, r3
    60b0:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    60b2:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    60b4:	23e1      	movs	r3, #225	; 0xe1
    60b6:	025b      	lsls	r3, r3, #9
    60b8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    60ba:	4d17      	ldr	r5, [pc, #92]	; (6118 <ui_cdc_init+0xc4>)
    60bc:	4b17      	ldr	r3, [pc, #92]	; (611c <ui_cdc_init+0xc8>)
    60be:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    60c0:	4a17      	ldr	r2, [pc, #92]	; (6120 <ui_cdc_init+0xcc>)
    60c2:	4b18      	ldr	r3, [pc, #96]	; (6124 <ui_cdc_init+0xd0>)
    60c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    60c6:	4a18      	ldr	r2, [pc, #96]	; (6128 <ui_cdc_init+0xd4>)
    60c8:	4b18      	ldr	r3, [pc, #96]	; (612c <ui_cdc_init+0xd8>)
    60ca:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    60cc:	466a      	mov	r2, sp
    60ce:	4918      	ldr	r1, [pc, #96]	; (6130 <ui_cdc_init+0xdc>)
    60d0:	0028      	movs	r0, r5
    60d2:	4b18      	ldr	r3, [pc, #96]	; (6134 <ui_cdc_init+0xe0>)
    60d4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    60d6:	4f18      	ldr	r7, [pc, #96]	; (6138 <ui_cdc_init+0xe4>)
    60d8:	683b      	ldr	r3, [r7, #0]
    60da:	6898      	ldr	r0, [r3, #8]
    60dc:	2100      	movs	r1, #0
    60de:	4e17      	ldr	r6, [pc, #92]	; (613c <ui_cdc_init+0xe8>)
    60e0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    60e2:	683b      	ldr	r3, [r7, #0]
    60e4:	6858      	ldr	r0, [r3, #4]
    60e6:	2100      	movs	r1, #0
    60e8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    60ea:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    60ec:	0030      	movs	r0, r6
    60ee:	4b14      	ldr	r3, [pc, #80]	; (6140 <ui_cdc_init+0xec>)
    60f0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    60f2:	231f      	movs	r3, #31
    60f4:	4018      	ands	r0, r3
    60f6:	4084      	lsls	r4, r0
    60f8:	4b12      	ldr	r3, [pc, #72]	; (6144 <ui_cdc_init+0xf0>)
    60fa:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    60fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    60fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6100:	2b00      	cmp	r3, #0
    6102:	d1fc      	bne.n	60fe <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6104:	6833      	ldr	r3, [r6, #0]
    6106:	2202      	movs	r2, #2
    6108:	4313      	orrs	r3, r2
    610a:	6033      	str	r3, [r6, #0]
}
    610c:	b011      	add	sp, #68	; 0x44
    610e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6110:	00160002 	.word	0x00160002
    6114:	00170002 	.word	0x00170002
    6118:	20000624 	.word	0x20000624
    611c:	200005e8 	.word	0x200005e8
    6120:	00005f35 	.word	0x00005f35
    6124:	200005e4 	.word	0x200005e4
    6128:	00005f09 	.word	0x00005f09
    612c:	200005e0 	.word	0x200005e0
    6130:	42001400 	.word	0x42001400
    6134:	00002539 	.word	0x00002539
    6138:	20000128 	.word	0x20000128
    613c:	00009405 	.word	0x00009405
    6140:	000024a9 	.word	0x000024a9
    6144:	e000e100 	.word	0xe000e100

00006148 <ui_lb_init>:
{
    6148:	b5f0      	push	{r4, r5, r6, r7, lr}
    614a:	46c6      	mov	lr, r8
    614c:	b500      	push	{lr}
    614e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    6150:	ac03      	add	r4, sp, #12
    6152:	2501      	movs	r5, #1
    6154:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6156:	2600      	movs	r6, #0
    6158:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    615a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    615c:	0021      	movs	r1, r4
    615e:	200c      	movs	r0, #12
    6160:	4b1c      	ldr	r3, [pc, #112]	; (61d4 <ui_lb_init+0x8c>)
    6162:	4698      	mov	r8, r3
    6164:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    6166:	4f1c      	ldr	r7, [pc, #112]	; (61d8 <ui_lb_init+0x90>)
    6168:	2380      	movs	r3, #128	; 0x80
    616a:	015b      	lsls	r3, r3, #5
    616c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    616e:	0021      	movs	r1, r4
    6170:	200d      	movs	r0, #13
    6172:	47c0      	blx	r8
    6174:	2380      	movs	r3, #128	; 0x80
    6176:	019b      	lsls	r3, r3, #6
    6178:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    617a:	0021      	movs	r1, r4
    617c:	200f      	movs	r0, #15
    617e:	47c0      	blx	r8
    6180:	2380      	movs	r3, #128	; 0x80
    6182:	021b      	lsls	r3, r3, #8
    6184:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    6186:	4668      	mov	r0, sp
    6188:	4b14      	ldr	r3, [pc, #80]	; (61dc <ui_lb_init+0x94>)
    618a:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    618c:	231c      	movs	r3, #28
    618e:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    6190:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    6192:	466b      	mov	r3, sp
    6194:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6196:	2403      	movs	r4, #3
    6198:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    619a:	4669      	mov	r1, sp
    619c:	2008      	movs	r0, #8
    619e:	4f10      	ldr	r7, [pc, #64]	; (61e0 <ui_lb_init+0x98>)
    61a0:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    61a2:	2302      	movs	r3, #2
    61a4:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    61a6:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    61a8:	466b      	mov	r3, sp
    61aa:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    61ac:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    61ae:	4669      	mov	r1, sp
    61b0:	2002      	movs	r0, #2
    61b2:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    61b4:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    61b6:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    61b8:	466b      	mov	r3, sp
    61ba:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    61bc:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    61be:	4669      	mov	r1, sp
    61c0:	2003      	movs	r0, #3
    61c2:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    61c4:	2280      	movs	r2, #128	; 0x80
    61c6:	05d2      	lsls	r2, r2, #23
    61c8:	4b06      	ldr	r3, [pc, #24]	; (61e4 <ui_lb_init+0x9c>)
    61ca:	615a      	str	r2, [r3, #20]
}
    61cc:	b004      	add	sp, #16
    61ce:	bc04      	pop	{r2}
    61d0:	4690      	mov	r8, r2
    61d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61d4:	000088f9 	.word	0x000088f9
    61d8:	41004400 	.word	0x41004400
    61dc:	000020a9 	.word	0x000020a9
    61e0:	000020bd 	.word	0x000020bd
    61e4:	41004480 	.word	0x41004480

000061e8 <ui_configure_callback>:
{
    61e8:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    61ea:	2200      	movs	r2, #0
    61ec:	2108      	movs	r1, #8
    61ee:	480b      	ldr	r0, [pc, #44]	; (621c <ui_configure_callback+0x34>)
    61f0:	4c0b      	ldr	r4, [pc, #44]	; (6220 <ui_configure_callback+0x38>)
    61f2:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    61f4:	2200      	movs	r2, #0
    61f6:	2102      	movs	r1, #2
    61f8:	480a      	ldr	r0, [pc, #40]	; (6224 <ui_configure_callback+0x3c>)
    61fa:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    61fc:	2200      	movs	r2, #0
    61fe:	2103      	movs	r1, #3
    6200:	4809      	ldr	r0, [pc, #36]	; (6228 <ui_configure_callback+0x40>)
    6202:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6204:	2100      	movs	r1, #0
    6206:	2008      	movs	r0, #8
    6208:	4c08      	ldr	r4, [pc, #32]	; (622c <ui_configure_callback+0x44>)
    620a:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    620c:	2100      	movs	r1, #0
    620e:	2002      	movs	r0, #2
    6210:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6212:	2100      	movs	r1, #0
    6214:	2003      	movs	r0, #3
    6216:	47a0      	blx	r4
}
    6218:	bd10      	pop	{r4, pc}
    621a:	46c0      	nop			; (mov r8, r8)
    621c:	00005f4d 	.word	0x00005f4d
    6220:	00007119 	.word	0x00007119
    6224:	00005f05 	.word	0x00005f05
    6228:	00005fd5 	.word	0x00005fd5
    622c:	00007145 	.word	0x00007145

00006230 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    6230:	2280      	movs	r2, #128	; 0x80
    6232:	05d2      	lsls	r2, r2, #23
    6234:	4b01      	ldr	r3, [pc, #4]	; (623c <ui_powerdown+0xc>)
    6236:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    6238:	4770      	bx	lr
    623a:	46c0      	nop			; (mov r8, r8)
    623c:	41004480 	.word	0x41004480

00006240 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    6240:	2280      	movs	r2, #128	; 0x80
    6242:	05d2      	lsls	r2, r2, #23
    6244:	4b01      	ldr	r3, [pc, #4]	; (624c <ui_wakeup+0xc>)
    6246:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    6248:	4770      	bx	lr
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	41004480 	.word	0x41004480

00006250 <ui_start_read>:

void ui_start_read(void)
{
}
    6250:	4770      	bx	lr

00006252 <ui_stop_read>:

void ui_stop_read(void)
{
}
    6252:	4770      	bx	lr

00006254 <ui_start_write>:

void ui_start_write(void)
{
}
    6254:	4770      	bx	lr

00006256 <ui_stop_write>:

void ui_stop_write(void)
{
}
    6256:	4770      	bx	lr

00006258 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    6258:	2800      	cmp	r0, #0
    625a:	d104      	bne.n	6266 <ui_process+0xe>
    625c:	2280      	movs	r2, #128	; 0x80
    625e:	05d2      	lsls	r2, r2, #23
    6260:	4b05      	ldr	r3, [pc, #20]	; (6278 <ui_process+0x20>)
    6262:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    6264:	4770      	bx	lr
	if (1000 == framenumber) {
    6266:	23fa      	movs	r3, #250	; 0xfa
    6268:	009b      	lsls	r3, r3, #2
    626a:	4298      	cmp	r0, r3
    626c:	d1fa      	bne.n	6264 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    626e:	2280      	movs	r2, #128	; 0x80
    6270:	05d2      	lsls	r2, r2, #23
    6272:	4b01      	ldr	r3, [pc, #4]	; (6278 <ui_process+0x20>)
    6274:	619a      	str	r2, [r3, #24]
}
    6276:	e7f5      	b.n	6264 <ui_process+0xc>
    6278:	41004480 	.word	0x41004480

0000627c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    627c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    627e:	000b      	movs	r3, r1
    6280:	332e      	adds	r3, #46	; 0x2e
    6282:	009b      	lsls	r3, r3, #2
    6284:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    6286:	22aa      	movs	r2, #170	; 0xaa
    6288:	0052      	lsls	r2, r2, #1
    628a:	0049      	lsls	r1, r1, #1
    628c:	5a83      	ldrh	r3, [r0, r2]
    628e:	4c03      	ldr	r4, [pc, #12]	; (629c <usb_device_register_callback+0x20>)
    6290:	5b09      	ldrh	r1, [r1, r4]
    6292:	430b      	orrs	r3, r1
    6294:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    6296:	2000      	movs	r0, #0
    6298:	bd10      	pop	{r4, pc}
    629a:	46c0      	nop			; (mov r8, r8)
    629c:	0000b050 	.word	0x0000b050

000062a0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    62a0:	0049      	lsls	r1, r1, #1
    62a2:	4b06      	ldr	r3, [pc, #24]	; (62bc <usb_device_enable_callback+0x1c>)
    62a4:	5acb      	ldrh	r3, [r1, r3]
    62a6:	6802      	ldr	r2, [r0, #0]
    62a8:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    62aa:	21ab      	movs	r1, #171	; 0xab
    62ac:	0049      	lsls	r1, r1, #1
    62ae:	5a42      	ldrh	r2, [r0, r1]
    62b0:	431a      	orrs	r2, r3
    62b2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    62b4:	6802      	ldr	r2, [r0, #0]
    62b6:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    62b8:	2000      	movs	r0, #0
    62ba:	4770      	bx	lr
    62bc:	0000b050 	.word	0x0000b050

000062c0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    62c0:	0049      	lsls	r1, r1, #1
    62c2:	4b05      	ldr	r3, [pc, #20]	; (62d8 <usb_device_disable_callback+0x18>)
    62c4:	5aca      	ldrh	r2, [r1, r3]
    62c6:	21ab      	movs	r1, #171	; 0xab
    62c8:	0049      	lsls	r1, r1, #1
    62ca:	5a43      	ldrh	r3, [r0, r1]
    62cc:	4393      	bics	r3, r2
    62ce:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    62d0:	6803      	ldr	r3, [r0, #0]
    62d2:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    62d4:	2000      	movs	r0, #0
    62d6:	4770      	bx	lr
    62d8:	0000b050 	.word	0x0000b050

000062dc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    62dc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    62de:	008c      	lsls	r4, r1, #2
    62e0:	18a4      	adds	r4, r4, r2
    62e2:	3434      	adds	r4, #52	; 0x34
    62e4:	00a4      	lsls	r4, r4, #2
    62e6:	1904      	adds	r4, r0, r4
    62e8:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    62ea:	1840      	adds	r0, r0, r1
    62ec:	3059      	adds	r0, #89	; 0x59
    62ee:	30ff      	adds	r0, #255	; 0xff
    62f0:	7803      	ldrb	r3, [r0, #0]
    62f2:	4903      	ldr	r1, [pc, #12]	; (6300 <usb_device_endpoint_register_callback+0x24>)
    62f4:	5c8a      	ldrb	r2, [r1, r2]
    62f6:	4313      	orrs	r3, r2
    62f8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    62fa:	2000      	movs	r0, #0
    62fc:	bd10      	pop	{r4, pc}
    62fe:	46c0      	nop			; (mov r8, r8)
    6300:	0000b060 	.word	0x0000b060

00006304 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    6304:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    6306:	008b      	lsls	r3, r1, #2
    6308:	189b      	adds	r3, r3, r2
    630a:	3334      	adds	r3, #52	; 0x34
    630c:	009b      	lsls	r3, r3, #2
    630e:	18c3      	adds	r3, r0, r3
    6310:	2400      	movs	r4, #0
    6312:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6314:	1840      	adds	r0, r0, r1
    6316:	3059      	adds	r0, #89	; 0x59
    6318:	30ff      	adds	r0, #255	; 0xff
    631a:	4b03      	ldr	r3, [pc, #12]	; (6328 <usb_device_endpoint_unregister_callback+0x24>)
    631c:	5c9a      	ldrb	r2, [r3, r2]
    631e:	7803      	ldrb	r3, [r0, #0]
    6320:	4393      	bics	r3, r2
    6322:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    6324:	2000      	movs	r0, #0
    6326:	bd10      	pop	{r4, pc}
    6328:	0000b060 	.word	0x0000b060

0000632c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    632c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    632e:	230f      	movs	r3, #15
    6330:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    6332:	18c4      	adds	r4, r0, r3
    6334:	3461      	adds	r4, #97	; 0x61
    6336:	34ff      	adds	r4, #255	; 0xff
    6338:	7825      	ldrb	r5, [r4, #0]
    633a:	4e2f      	ldr	r6, [pc, #188]	; (63f8 <usb_device_endpoint_enable_callback+0xcc>)
    633c:	5cb6      	ldrb	r6, [r6, r2]
    633e:	4335      	orrs	r5, r6
    6340:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6342:	2a00      	cmp	r2, #0
    6344:	d129      	bne.n	639a <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6346:	2b00      	cmp	r3, #0
    6348:	d112      	bne.n	6370 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    634a:	2503      	movs	r5, #3
    634c:	240a      	movs	r4, #10
    634e:	34ff      	adds	r4, #255	; 0xff
    6350:	6806      	ldr	r6, [r0, #0]
    6352:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6354:	2a03      	cmp	r2, #3
    6356:	d109      	bne.n	636c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6358:	b249      	sxtb	r1, r1
    635a:	2900      	cmp	r1, #0
    635c:	db44      	blt.n	63e8 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    635e:	6802      	ldr	r2, [r0, #0]
    6360:	015b      	lsls	r3, r3, #5
    6362:	18d3      	adds	r3, r2, r3
    6364:	330a      	adds	r3, #10
    6366:	33ff      	adds	r3, #255	; 0xff
    6368:	2220      	movs	r2, #32
    636a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    636c:	2000      	movs	r0, #0
    636e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6370:	b24c      	sxtb	r4, r1
    6372:	2c00      	cmp	r4, #0
    6374:	db08      	blt.n	6388 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    6376:	015c      	lsls	r4, r3, #5
    6378:	6805      	ldr	r5, [r0, #0]
    637a:	46ac      	mov	ip, r5
    637c:	4464      	add	r4, ip
    637e:	340a      	adds	r4, #10
    6380:	34ff      	adds	r4, #255	; 0xff
    6382:	2501      	movs	r5, #1
    6384:	7025      	strb	r5, [r4, #0]
    6386:	e7e5      	b.n	6354 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    6388:	015c      	lsls	r4, r3, #5
    638a:	6805      	ldr	r5, [r0, #0]
    638c:	46ac      	mov	ip, r5
    638e:	4464      	add	r4, ip
    6390:	340a      	adds	r4, #10
    6392:	34ff      	adds	r4, #255	; 0xff
    6394:	2502      	movs	r5, #2
    6396:	7025      	strb	r5, [r4, #0]
    6398:	e7dc      	b.n	6354 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    639a:	2a01      	cmp	r2, #1
    639c:	d11a      	bne.n	63d4 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    639e:	2b00      	cmp	r3, #0
    63a0:	d105      	bne.n	63ae <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    63a2:	6802      	ldr	r2, [r0, #0]
    63a4:	210c      	movs	r1, #12
    63a6:	230a      	movs	r3, #10
    63a8:	33ff      	adds	r3, #255	; 0xff
    63aa:	54d1      	strb	r1, [r2, r3]
    63ac:	e7de      	b.n	636c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    63ae:	b249      	sxtb	r1, r1
    63b0:	2900      	cmp	r1, #0
    63b2:	db07      	blt.n	63c4 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    63b4:	6802      	ldr	r2, [r0, #0]
    63b6:	015b      	lsls	r3, r3, #5
    63b8:	18d3      	adds	r3, r2, r3
    63ba:	330a      	adds	r3, #10
    63bc:	33ff      	adds	r3, #255	; 0xff
    63be:	2204      	movs	r2, #4
    63c0:	701a      	strb	r2, [r3, #0]
    63c2:	e7d3      	b.n	636c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    63c4:	6802      	ldr	r2, [r0, #0]
    63c6:	015b      	lsls	r3, r3, #5
    63c8:	18d3      	adds	r3, r2, r3
    63ca:	330a      	adds	r3, #10
    63cc:	33ff      	adds	r3, #255	; 0xff
    63ce:	2208      	movs	r2, #8
    63d0:	701a      	strb	r2, [r3, #0]
    63d2:	e7cb      	b.n	636c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    63d4:	2a02      	cmp	r2, #2
    63d6:	d1bd      	bne.n	6354 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    63d8:	6802      	ldr	r2, [r0, #0]
    63da:	015b      	lsls	r3, r3, #5
    63dc:	18d3      	adds	r3, r2, r3
    63de:	330a      	adds	r3, #10
    63e0:	33ff      	adds	r3, #255	; 0xff
    63e2:	2210      	movs	r2, #16
    63e4:	701a      	strb	r2, [r3, #0]
    63e6:	e7c1      	b.n	636c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    63e8:	6802      	ldr	r2, [r0, #0]
    63ea:	015b      	lsls	r3, r3, #5
    63ec:	18d3      	adds	r3, r2, r3
    63ee:	330a      	adds	r3, #10
    63f0:	33ff      	adds	r3, #255	; 0xff
    63f2:	2240      	movs	r2, #64	; 0x40
    63f4:	701a      	strb	r2, [r3, #0]
    63f6:	e7b9      	b.n	636c <usb_device_endpoint_enable_callback+0x40>
    63f8:	0000b060 	.word	0x0000b060

000063fc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    63fc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    63fe:	230f      	movs	r3, #15
    6400:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6402:	18c4      	adds	r4, r0, r3
    6404:	3461      	adds	r4, #97	; 0x61
    6406:	34ff      	adds	r4, #255	; 0xff
    6408:	4d2f      	ldr	r5, [pc, #188]	; (64c8 <usb_device_endpoint_disable_callback+0xcc>)
    640a:	5cae      	ldrb	r6, [r5, r2]
    640c:	7825      	ldrb	r5, [r4, #0]
    640e:	43b5      	bics	r5, r6
    6410:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6412:	2a00      	cmp	r2, #0
    6414:	d129      	bne.n	646a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6416:	2b00      	cmp	r3, #0
    6418:	d112      	bne.n	6440 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    641a:	2503      	movs	r5, #3
    641c:	2484      	movs	r4, #132	; 0x84
    641e:	0064      	lsls	r4, r4, #1
    6420:	6806      	ldr	r6, [r0, #0]
    6422:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6424:	2a03      	cmp	r2, #3
    6426:	d109      	bne.n	643c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6428:	b249      	sxtb	r1, r1
    642a:	2900      	cmp	r1, #0
    642c:	db44      	blt.n	64b8 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    642e:	6802      	ldr	r2, [r0, #0]
    6430:	015b      	lsls	r3, r3, #5
    6432:	18d3      	adds	r3, r2, r3
    6434:	3309      	adds	r3, #9
    6436:	33ff      	adds	r3, #255	; 0xff
    6438:	2220      	movs	r2, #32
    643a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    643c:	2000      	movs	r0, #0
    643e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6440:	b24c      	sxtb	r4, r1
    6442:	2c00      	cmp	r4, #0
    6444:	db08      	blt.n	6458 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    6446:	015c      	lsls	r4, r3, #5
    6448:	6805      	ldr	r5, [r0, #0]
    644a:	46ac      	mov	ip, r5
    644c:	4464      	add	r4, ip
    644e:	3409      	adds	r4, #9
    6450:	34ff      	adds	r4, #255	; 0xff
    6452:	2501      	movs	r5, #1
    6454:	7025      	strb	r5, [r4, #0]
    6456:	e7e5      	b.n	6424 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    6458:	015c      	lsls	r4, r3, #5
    645a:	6805      	ldr	r5, [r0, #0]
    645c:	46ac      	mov	ip, r5
    645e:	4464      	add	r4, ip
    6460:	3409      	adds	r4, #9
    6462:	34ff      	adds	r4, #255	; 0xff
    6464:	2502      	movs	r5, #2
    6466:	7025      	strb	r5, [r4, #0]
    6468:	e7dc      	b.n	6424 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    646a:	2a01      	cmp	r2, #1
    646c:	d11a      	bne.n	64a4 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    646e:	2b00      	cmp	r3, #0
    6470:	d105      	bne.n	647e <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    6472:	6802      	ldr	r2, [r0, #0]
    6474:	210c      	movs	r1, #12
    6476:	3309      	adds	r3, #9
    6478:	33ff      	adds	r3, #255	; 0xff
    647a:	54d1      	strb	r1, [r2, r3]
    647c:	e7de      	b.n	643c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    647e:	b249      	sxtb	r1, r1
    6480:	2900      	cmp	r1, #0
    6482:	db07      	blt.n	6494 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    6484:	6802      	ldr	r2, [r0, #0]
    6486:	015b      	lsls	r3, r3, #5
    6488:	18d3      	adds	r3, r2, r3
    648a:	3309      	adds	r3, #9
    648c:	33ff      	adds	r3, #255	; 0xff
    648e:	2204      	movs	r2, #4
    6490:	701a      	strb	r2, [r3, #0]
    6492:	e7d3      	b.n	643c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    6494:	6802      	ldr	r2, [r0, #0]
    6496:	015b      	lsls	r3, r3, #5
    6498:	18d3      	adds	r3, r2, r3
    649a:	3309      	adds	r3, #9
    649c:	33ff      	adds	r3, #255	; 0xff
    649e:	2208      	movs	r2, #8
    64a0:	701a      	strb	r2, [r3, #0]
    64a2:	e7cb      	b.n	643c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    64a4:	2a02      	cmp	r2, #2
    64a6:	d1bd      	bne.n	6424 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    64a8:	6802      	ldr	r2, [r0, #0]
    64aa:	015b      	lsls	r3, r3, #5
    64ac:	18d3      	adds	r3, r2, r3
    64ae:	3309      	adds	r3, #9
    64b0:	33ff      	adds	r3, #255	; 0xff
    64b2:	2210      	movs	r2, #16
    64b4:	701a      	strb	r2, [r3, #0]
    64b6:	e7c1      	b.n	643c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    64b8:	6802      	ldr	r2, [r0, #0]
    64ba:	015b      	lsls	r3, r3, #5
    64bc:	18d3      	adds	r3, r2, r3
    64be:	3309      	adds	r3, #9
    64c0:	33ff      	adds	r3, #255	; 0xff
    64c2:	2240      	movs	r2, #64	; 0x40
    64c4:	701a      	strb	r2, [r3, #0]
    64c6:	e7b9      	b.n	643c <usb_device_endpoint_disable_callback+0x40>
    64c8:	0000b060 	.word	0x0000b060

000064cc <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    64cc:	2300      	movs	r3, #0
    64ce:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    64d0:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    64d2:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    64d4:	3301      	adds	r3, #1
    64d6:	70c3      	strb	r3, [r0, #3]
}
    64d8:	4770      	bx	lr
	...

000064dc <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    64dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    64de:	780c      	ldrb	r4, [r1, #0]
    64e0:	230f      	movs	r3, #15
    64e2:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    64e4:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    64e6:	78ca      	ldrb	r2, [r1, #3]
    64e8:	2a04      	cmp	r2, #4
    64ea:	d870      	bhi.n	65ce <usb_device_endpoint_set_config+0xf2>
    64ec:	0092      	lsls	r2, r2, #2
    64ee:	4d89      	ldr	r5, [pc, #548]	; (6714 <usb_device_endpoint_set_config+0x238>)
    64f0:	58aa      	ldr	r2, [r5, r2]
    64f2:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    64f4:	6802      	ldr	r2, [r0, #0]
    64f6:	3308      	adds	r3, #8
    64f8:	015b      	lsls	r3, r3, #5
    64fa:	2100      	movs	r1, #0
    64fc:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    64fe:	2200      	movs	r2, #0
    6500:	e082      	b.n	6608 <usb_device_endpoint_set_config+0x12c>
    6502:	015c      	lsls	r4, r3, #5
    6504:	6802      	ldr	r2, [r0, #0]
    6506:	4694      	mov	ip, r2
    6508:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    650a:	2280      	movs	r2, #128	; 0x80
    650c:	0052      	lsls	r2, r2, #1
    650e:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    6510:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6512:	076d      	lsls	r5, r5, #29
    6514:	d178      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    6516:	32e4      	adds	r2, #228	; 0xe4
    6518:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    651a:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    651c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    651e:	422e      	tst	r6, r5
    6520:	d172      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    6522:	3d5f      	subs	r5, #95	; 0x5f
    6524:	32e4      	adds	r2, #228	; 0xe4
    6526:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6528:	001a      	movs	r2, r3
    652a:	3208      	adds	r2, #8
    652c:	0152      	lsls	r2, r2, #5
    652e:	6804      	ldr	r4, [r0, #0]
    6530:	18a4      	adds	r4, r4, r2
    6532:	352f      	adds	r5, #47	; 0x2f
    6534:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6536:	6800      	ldr	r0, [r0, #0]
    6538:	1882      	adds	r2, r0, r2
    653a:	2080      	movs	r0, #128	; 0x80
    653c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    653e:	788a      	ldrb	r2, [r1, #2]
    6540:	2a00      	cmp	r2, #0
    6542:	d01f      	beq.n	6584 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6544:	0158      	lsls	r0, r3, #5
    6546:	4a74      	ldr	r2, [pc, #464]	; (6718 <usb_device_endpoint_set_config+0x23c>)
    6548:	1812      	adds	r2, r2, r0
    654a:	6854      	ldr	r4, [r2, #4]
    654c:	2080      	movs	r0, #128	; 0x80
    654e:	0600      	lsls	r0, r0, #24
    6550:	4304      	orrs	r4, r0
    6552:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6554:	6954      	ldr	r4, [r2, #20]
    6556:	4320      	orrs	r0, r4
    6558:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    655a:	2507      	movs	r5, #7
    655c:	784c      	ldrb	r4, [r1, #1]
    655e:	015a      	lsls	r2, r3, #5
    6560:	4b6d      	ldr	r3, [pc, #436]	; (6718 <usb_device_endpoint_set_config+0x23c>)
    6562:	189b      	adds	r3, r3, r2
    6564:	6858      	ldr	r0, [r3, #4]
    6566:	402c      	ands	r4, r5
    6568:	0724      	lsls	r4, r4, #28
    656a:	4e6c      	ldr	r6, [pc, #432]	; (671c <usb_device_endpoint_set_config+0x240>)
    656c:	4030      	ands	r0, r6
    656e:	4320      	orrs	r0, r4
    6570:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6572:	7849      	ldrb	r1, [r1, #1]
    6574:	695a      	ldr	r2, [r3, #20]
    6576:	4029      	ands	r1, r5
    6578:	0709      	lsls	r1, r1, #28
    657a:	4032      	ands	r2, r6
    657c:	430a      	orrs	r2, r1
    657e:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6580:	2200      	movs	r2, #0
    6582:	e041      	b.n	6608 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6584:	0158      	lsls	r0, r3, #5
    6586:	4a64      	ldr	r2, [pc, #400]	; (6718 <usb_device_endpoint_set_config+0x23c>)
    6588:	1812      	adds	r2, r2, r0
    658a:	6850      	ldr	r0, [r2, #4]
    658c:	0040      	lsls	r0, r0, #1
    658e:	0840      	lsrs	r0, r0, #1
    6590:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6592:	6950      	ldr	r0, [r2, #20]
    6594:	0040      	lsls	r0, r0, #1
    6596:	0840      	lsrs	r0, r0, #1
    6598:	6150      	str	r0, [r2, #20]
    659a:	e7de      	b.n	655a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    659c:	2c00      	cmp	r4, #0
    659e:	db35      	blt.n	660c <usb_device_endpoint_set_config+0x130>
    65a0:	015d      	lsls	r5, r3, #5
    65a2:	6802      	ldr	r2, [r0, #0]
    65a4:	4694      	mov	ip, r2
    65a6:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65a8:	2280      	movs	r2, #128	; 0x80
    65aa:	0052      	lsls	r2, r2, #1
    65ac:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    65ae:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65b0:	0776      	lsls	r6, r6, #29
    65b2:	d129      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    65b4:	2680      	movs	r6, #128	; 0x80
    65b6:	0076      	lsls	r6, r6, #1
    65b8:	5daa      	ldrb	r2, [r5, r6]
    65ba:	2702      	movs	r7, #2
    65bc:	433a      	orrs	r2, r7
    65be:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    65c0:	6802      	ldr	r2, [r0, #0]
    65c2:	0018      	movs	r0, r3
    65c4:	3008      	adds	r0, #8
    65c6:	0140      	lsls	r0, r0, #5
    65c8:	1812      	adds	r2, r2, r0
    65ca:	2040      	movs	r0, #64	; 0x40
    65cc:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    65ce:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    65d0:	784f      	ldrb	r7, [r1, #1]
    65d2:	005d      	lsls	r5, r3, #1
    65d4:	18ad      	adds	r5, r5, r2
    65d6:	012d      	lsls	r5, r5, #4
    65d8:	4e4f      	ldr	r6, [pc, #316]	; (6718 <usb_device_endpoint_set_config+0x23c>)
    65da:	1975      	adds	r5, r6, r5
    65dc:	6868      	ldr	r0, [r5, #4]
    65de:	2407      	movs	r4, #7
    65e0:	403c      	ands	r4, r7
    65e2:	0724      	lsls	r4, r4, #28
    65e4:	4e4d      	ldr	r6, [pc, #308]	; (671c <usb_device_endpoint_set_config+0x240>)
    65e6:	4030      	ands	r0, r6
    65e8:	4320      	orrs	r0, r4
    65ea:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    65ec:	7889      	ldrb	r1, [r1, #2]
    65ee:	2900      	cmp	r1, #0
    65f0:	d000      	beq.n	65f4 <usb_device_endpoint_set_config+0x118>
    65f2:	e088      	b.n	6706 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    65f4:	005b      	lsls	r3, r3, #1
    65f6:	189b      	adds	r3, r3, r2
    65f8:	011b      	lsls	r3, r3, #4
    65fa:	4a47      	ldr	r2, [pc, #284]	; (6718 <usb_device_endpoint_set_config+0x23c>)
    65fc:	18d3      	adds	r3, r2, r3
    65fe:	685a      	ldr	r2, [r3, #4]
    6600:	0052      	lsls	r2, r2, #1
    6602:	0852      	lsrs	r2, r2, #1
    6604:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    6606:	2200      	movs	r2, #0
}
    6608:	0010      	movs	r0, r2
    660a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    660c:	015d      	lsls	r5, r3, #5
    660e:	6802      	ldr	r2, [r0, #0]
    6610:	4694      	mov	ip, r2
    6612:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6614:	2280      	movs	r2, #128	; 0x80
    6616:	0052      	lsls	r2, r2, #1
    6618:	5caf      	ldrb	r7, [r5, r2]
    661a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    661c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    661e:	4237      	tst	r7, r6
    6620:	d1f2      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6622:	3690      	adds	r6, #144	; 0x90
    6624:	5daa      	ldrb	r2, [r5, r6]
    6626:	2720      	movs	r7, #32
    6628:	433a      	orrs	r2, r7
    662a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    662c:	6802      	ldr	r2, [r0, #0]
    662e:	0018      	movs	r0, r3
    6630:	3008      	adds	r0, #8
    6632:	0140      	lsls	r0, r0, #5
    6634:	1812      	adds	r2, r2, r0
    6636:	2080      	movs	r0, #128	; 0x80
    6638:	7110      	strb	r0, [r2, #4]
    663a:	e7c8      	b.n	65ce <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    663c:	2c00      	cmp	r4, #0
    663e:	db17      	blt.n	6670 <usb_device_endpoint_set_config+0x194>
    6640:	015d      	lsls	r5, r3, #5
    6642:	6802      	ldr	r2, [r0, #0]
    6644:	4694      	mov	ip, r2
    6646:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6648:	2280      	movs	r2, #128	; 0x80
    664a:	0052      	lsls	r2, r2, #1
    664c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    664e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6650:	0776      	lsls	r6, r6, #29
    6652:	d1d9      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    6654:	2680      	movs	r6, #128	; 0x80
    6656:	0076      	lsls	r6, r6, #1
    6658:	5daa      	ldrb	r2, [r5, r6]
    665a:	2703      	movs	r7, #3
    665c:	433a      	orrs	r2, r7
    665e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6660:	6802      	ldr	r2, [r0, #0]
    6662:	0018      	movs	r0, r3
    6664:	3008      	adds	r0, #8
    6666:	0140      	lsls	r0, r0, #5
    6668:	1812      	adds	r2, r2, r0
    666a:	2040      	movs	r0, #64	; 0x40
    666c:	7150      	strb	r0, [r2, #5]
    666e:	e7ae      	b.n	65ce <usb_device_endpoint_set_config+0xf2>
    6670:	015d      	lsls	r5, r3, #5
    6672:	6802      	ldr	r2, [r0, #0]
    6674:	4694      	mov	ip, r2
    6676:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6678:	2280      	movs	r2, #128	; 0x80
    667a:	0052      	lsls	r2, r2, #1
    667c:	5caf      	ldrb	r7, [r5, r2]
    667e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6680:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6682:	4237      	tst	r7, r6
    6684:	d1c0      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    6686:	3690      	adds	r6, #144	; 0x90
    6688:	5daa      	ldrb	r2, [r5, r6]
    668a:	2730      	movs	r7, #48	; 0x30
    668c:	433a      	orrs	r2, r7
    668e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6690:	6802      	ldr	r2, [r0, #0]
    6692:	0018      	movs	r0, r3
    6694:	3008      	adds	r0, #8
    6696:	0140      	lsls	r0, r0, #5
    6698:	1812      	adds	r2, r2, r0
    669a:	2080      	movs	r0, #128	; 0x80
    669c:	7110      	strb	r0, [r2, #4]
    669e:	e796      	b.n	65ce <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    66a0:	2c00      	cmp	r4, #0
    66a2:	db17      	blt.n	66d4 <usb_device_endpoint_set_config+0x1f8>
    66a4:	015d      	lsls	r5, r3, #5
    66a6:	6802      	ldr	r2, [r0, #0]
    66a8:	4694      	mov	ip, r2
    66aa:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    66ac:	2280      	movs	r2, #128	; 0x80
    66ae:	0052      	lsls	r2, r2, #1
    66b0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    66b2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    66b4:	0776      	lsls	r6, r6, #29
    66b6:	d1a7      	bne.n	6608 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    66b8:	2680      	movs	r6, #128	; 0x80
    66ba:	0076      	lsls	r6, r6, #1
    66bc:	5daa      	ldrb	r2, [r5, r6]
    66be:	2704      	movs	r7, #4
    66c0:	433a      	orrs	r2, r7
    66c2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    66c4:	6802      	ldr	r2, [r0, #0]
    66c6:	0018      	movs	r0, r3
    66c8:	3008      	adds	r0, #8
    66ca:	0140      	lsls	r0, r0, #5
    66cc:	1812      	adds	r2, r2, r0
    66ce:	2040      	movs	r0, #64	; 0x40
    66d0:	7150      	strb	r0, [r2, #5]
    66d2:	e77c      	b.n	65ce <usb_device_endpoint_set_config+0xf2>
    66d4:	015d      	lsls	r5, r3, #5
    66d6:	6802      	ldr	r2, [r0, #0]
    66d8:	4694      	mov	ip, r2
    66da:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    66dc:	2280      	movs	r2, #128	; 0x80
    66de:	0052      	lsls	r2, r2, #1
    66e0:	5caf      	ldrb	r7, [r5, r2]
    66e2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    66e4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    66e6:	4237      	tst	r7, r6
    66e8:	d000      	beq.n	66ec <usb_device_endpoint_set_config+0x210>
    66ea:	e78d      	b.n	6608 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    66ec:	3690      	adds	r6, #144	; 0x90
    66ee:	5daa      	ldrb	r2, [r5, r6]
    66f0:	2740      	movs	r7, #64	; 0x40
    66f2:	433a      	orrs	r2, r7
    66f4:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    66f6:	6802      	ldr	r2, [r0, #0]
    66f8:	0018      	movs	r0, r3
    66fa:	3008      	adds	r0, #8
    66fc:	0140      	lsls	r0, r0, #5
    66fe:	1812      	adds	r2, r2, r0
    6700:	2080      	movs	r0, #128	; 0x80
    6702:	7110      	strb	r0, [r2, #4]
    6704:	e763      	b.n	65ce <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6706:	6869      	ldr	r1, [r5, #4]
    6708:	2380      	movs	r3, #128	; 0x80
    670a:	061b      	lsls	r3, r3, #24
    670c:	430b      	orrs	r3, r1
    670e:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    6710:	2200      	movs	r2, #0
    6712:	e779      	b.n	6608 <usb_device_endpoint_set_config+0x12c>
    6714:	0000b03c 	.word	0x0000b03c
    6718:	20001694 	.word	0x20001694
    671c:	8fffffff 	.word	0x8fffffff

00006720 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6720:	230f      	movs	r3, #15
    6722:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    6724:	b249      	sxtb	r1, r1
    6726:	2900      	cmp	r1, #0
    6728:	db09      	blt.n	673e <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    672a:	6802      	ldr	r2, [r0, #0]
    672c:	3308      	adds	r3, #8
    672e:	015b      	lsls	r3, r3, #5
    6730:	5c98      	ldrb	r0, [r3, r2]
    6732:	0740      	lsls	r0, r0, #29
    6734:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    6736:	1e43      	subs	r3, r0, #1
    6738:	4198      	sbcs	r0, r3
    673a:	b2c0      	uxtb	r0, r0
}
    673c:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    673e:	6802      	ldr	r2, [r0, #0]
    6740:	3308      	adds	r3, #8
    6742:	015b      	lsls	r3, r3, #5
    6744:	5c98      	ldrb	r0, [r3, r2]
    6746:	0640      	lsls	r0, r0, #25
    6748:	0f40      	lsrs	r0, r0, #29
    674a:	e7f4      	b.n	6736 <usb_device_endpoint_is_configured+0x16>

0000674c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    674c:	230f      	movs	r3, #15
    674e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    6750:	b249      	sxtb	r1, r1
    6752:	2900      	cmp	r1, #0
    6754:	db0a      	blt.n	676c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6756:	3308      	adds	r3, #8
    6758:	015b      	lsls	r3, r3, #5
    675a:	6802      	ldr	r2, [r0, #0]
    675c:	18d2      	adds	r2, r2, r3
    675e:	2140      	movs	r1, #64	; 0x40
    6760:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6762:	6802      	ldr	r2, [r0, #0]
    6764:	18d3      	adds	r3, r2, r3
    6766:	2201      	movs	r2, #1
    6768:	71da      	strb	r2, [r3, #7]
	}
}
    676a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    676c:	3308      	adds	r3, #8
    676e:	015b      	lsls	r3, r3, #5
    6770:	6802      	ldr	r2, [r0, #0]
    6772:	18d2      	adds	r2, r2, r3
    6774:	2180      	movs	r1, #128	; 0x80
    6776:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6778:	6802      	ldr	r2, [r0, #0]
    677a:	18d3      	adds	r3, r2, r3
    677c:	2202      	movs	r2, #2
    677e:	71da      	strb	r2, [r3, #7]
    6780:	e7f3      	b.n	676a <usb_device_endpoint_abort_job+0x1e>

00006782 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6782:	230f      	movs	r3, #15
    6784:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6786:	b249      	sxtb	r1, r1
    6788:	2900      	cmp	r1, #0
    678a:	db07      	blt.n	679c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    678c:	6802      	ldr	r2, [r0, #0]
    678e:	3308      	adds	r3, #8
    6790:	015b      	lsls	r3, r3, #5
    6792:	18d3      	adds	r3, r2, r3
    6794:	7998      	ldrb	r0, [r3, #6]
    6796:	06c0      	lsls	r0, r0, #27
    6798:	0fc0      	lsrs	r0, r0, #31
	}
}
    679a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    679c:	6802      	ldr	r2, [r0, #0]
    679e:	3308      	adds	r3, #8
    67a0:	015b      	lsls	r3, r3, #5
    67a2:	18d3      	adds	r3, r2, r3
    67a4:	7998      	ldrb	r0, [r3, #6]
    67a6:	0680      	lsls	r0, r0, #26
    67a8:	0fc0      	lsrs	r0, r0, #31
    67aa:	e7f6      	b.n	679a <usb_device_endpoint_is_halted+0x18>

000067ac <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    67ac:	230f      	movs	r3, #15
    67ae:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    67b0:	b249      	sxtb	r1, r1
    67b2:	2900      	cmp	r1, #0
    67b4:	db06      	blt.n	67c4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    67b6:	6802      	ldr	r2, [r0, #0]
    67b8:	3308      	adds	r3, #8
    67ba:	015b      	lsls	r3, r3, #5
    67bc:	18d3      	adds	r3, r2, r3
    67be:	2210      	movs	r2, #16
    67c0:	715a      	strb	r2, [r3, #5]
	}
}
    67c2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    67c4:	6802      	ldr	r2, [r0, #0]
    67c6:	3308      	adds	r3, #8
    67c8:	015b      	lsls	r3, r3, #5
    67ca:	18d3      	adds	r3, r2, r3
    67cc:	2220      	movs	r2, #32
    67ce:	715a      	strb	r2, [r3, #5]
    67d0:	e7f7      	b.n	67c2 <usb_device_endpoint_set_halt+0x16>

000067d2 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    67d2:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    67d4:	230f      	movs	r3, #15
    67d6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    67d8:	b249      	sxtb	r1, r1
    67da:	2900      	cmp	r1, #0
    67dc:	db1d      	blt.n	681a <usb_device_endpoint_clear_halt+0x48>
    67de:	0159      	lsls	r1, r3, #5
    67e0:	6802      	ldr	r2, [r0, #0]
    67e2:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    67e4:	2483      	movs	r4, #131	; 0x83
    67e6:	0064      	lsls	r4, r4, #1
    67e8:	5d14      	ldrb	r4, [r2, r4]
    67ea:	06e4      	lsls	r4, r4, #27
    67ec:	d514      	bpl.n	6818 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    67ee:	2510      	movs	r5, #16
    67f0:	2482      	movs	r4, #130	; 0x82
    67f2:	0064      	lsls	r4, r4, #1
    67f4:	5515      	strb	r5, [r2, r4]
    67f6:	6802      	ldr	r2, [r0, #0]
    67f8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    67fa:	2108      	movs	r1, #8
    67fc:	31ff      	adds	r1, #255	; 0xff
    67fe:	5c51      	ldrb	r1, [r2, r1]
    6800:	0689      	lsls	r1, r1, #26
    6802:	d509      	bpl.n	6818 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6804:	3ce4      	subs	r4, #228	; 0xe4
    6806:	2108      	movs	r1, #8
    6808:	31ff      	adds	r1, #255	; 0xff
    680a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    680c:	6802      	ldr	r2, [r0, #0]
    680e:	3308      	adds	r3, #8
    6810:	015b      	lsls	r3, r3, #5
    6812:	18d3      	adds	r3, r2, r3
    6814:	2201      	movs	r2, #1
    6816:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    6818:	bd30      	pop	{r4, r5, pc}
    681a:	0159      	lsls	r1, r3, #5
    681c:	6802      	ldr	r2, [r0, #0]
    681e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    6820:	2483      	movs	r4, #131	; 0x83
    6822:	0064      	lsls	r4, r4, #1
    6824:	5d14      	ldrb	r4, [r2, r4]
    6826:	06a4      	lsls	r4, r4, #26
    6828:	d5f6      	bpl.n	6818 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    682a:	2520      	movs	r5, #32
    682c:	2482      	movs	r4, #130	; 0x82
    682e:	0064      	lsls	r4, r4, #1
    6830:	5515      	strb	r5, [r2, r4]
    6832:	6802      	ldr	r2, [r0, #0]
    6834:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6836:	2108      	movs	r1, #8
    6838:	31ff      	adds	r1, #255	; 0xff
    683a:	5c51      	ldrb	r1, [r2, r1]
    683c:	0649      	lsls	r1, r1, #25
    683e:	d5eb      	bpl.n	6818 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6840:	3cc4      	subs	r4, #196	; 0xc4
    6842:	2108      	movs	r1, #8
    6844:	31ff      	adds	r1, #255	; 0xff
    6846:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    6848:	6802      	ldr	r2, [r0, #0]
    684a:	3308      	adds	r3, #8
    684c:	015b      	lsls	r3, r3, #5
    684e:	18d3      	adds	r3, r2, r3
    6850:	2202      	movs	r2, #2
    6852:	711a      	strb	r2, [r3, #4]
    6854:	e7e0      	b.n	6818 <usb_device_endpoint_clear_halt+0x46>
	...

00006858 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6858:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    685a:	000c      	movs	r4, r1
    685c:	3408      	adds	r4, #8
    685e:	0164      	lsls	r4, r4, #5
    6860:	6805      	ldr	r5, [r0, #0]
    6862:	5d64      	ldrb	r4, [r4, r5]
    6864:	0664      	lsls	r4, r4, #25
    6866:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6868:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    686a:	2c00      	cmp	r4, #0
    686c:	d101      	bne.n	6872 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    686e:	0028      	movs	r0, r5
    6870:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    6872:	014c      	lsls	r4, r1, #5
    6874:	4d0b      	ldr	r5, [pc, #44]	; (68a4 <usb_device_endpoint_write_buffer_job+0x4c>)
    6876:	192d      	adds	r5, r5, r4
    6878:	002c      	movs	r4, r5
    687a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    687c:	696a      	ldr	r2, [r5, #20]
    687e:	4d0a      	ldr	r5, [pc, #40]	; (68a8 <usb_device_endpoint_write_buffer_job+0x50>)
    6880:	402a      	ands	r2, r5
    6882:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    6884:	6962      	ldr	r2, [r4, #20]
    6886:	049b      	lsls	r3, r3, #18
    6888:	0c9b      	lsrs	r3, r3, #18
    688a:	0b92      	lsrs	r2, r2, #14
    688c:	0392      	lsls	r2, r2, #14
    688e:	4313      	orrs	r3, r2
    6890:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    6892:	6803      	ldr	r3, [r0, #0]
    6894:	3108      	adds	r1, #8
    6896:	0149      	lsls	r1, r1, #5
    6898:	1859      	adds	r1, r3, r1
    689a:	2380      	movs	r3, #128	; 0x80
    689c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    689e:	2500      	movs	r5, #0
    68a0:	e7e5      	b.n	686e <usb_device_endpoint_write_buffer_job+0x16>
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	20001694 	.word	0x20001694
    68a8:	f0003fff 	.word	0xf0003fff

000068ac <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    68ac:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    68ae:	000c      	movs	r4, r1
    68b0:	3408      	adds	r4, #8
    68b2:	0164      	lsls	r4, r4, #5
    68b4:	6805      	ldr	r5, [r0, #0]
    68b6:	5d64      	ldrb	r4, [r4, r5]
    68b8:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    68ba:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    68bc:	2c00      	cmp	r4, #0
    68be:	d101      	bne.n	68c4 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    68c0:	0028      	movs	r0, r5
    68c2:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    68c4:	4c0b      	ldr	r4, [pc, #44]	; (68f4 <usb_device_endpoint_read_buffer_job+0x48>)
    68c6:	014d      	lsls	r5, r1, #5
    68c8:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    68ca:	1962      	adds	r2, r4, r5
    68cc:	6854      	ldr	r4, [r2, #4]
    68ce:	049b      	lsls	r3, r3, #18
    68d0:	091b      	lsrs	r3, r3, #4
    68d2:	4d09      	ldr	r5, [pc, #36]	; (68f8 <usb_device_endpoint_read_buffer_job+0x4c>)
    68d4:	402c      	ands	r4, r5
    68d6:	4323      	orrs	r3, r4
    68d8:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    68da:	6853      	ldr	r3, [r2, #4]
    68dc:	0b9b      	lsrs	r3, r3, #14
    68de:	039b      	lsls	r3, r3, #14
    68e0:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    68e2:	6803      	ldr	r3, [r0, #0]
    68e4:	3108      	adds	r1, #8
    68e6:	0149      	lsls	r1, r1, #5
    68e8:	1859      	adds	r1, r3, r1
    68ea:	2340      	movs	r3, #64	; 0x40
    68ec:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    68ee:	2500      	movs	r5, #0
    68f0:	e7e6      	b.n	68c0 <usb_device_endpoint_read_buffer_job+0x14>
    68f2:	46c0      	nop			; (mov r8, r8)
    68f4:	20001694 	.word	0x20001694
    68f8:	f0003fff 	.word	0xf0003fff

000068fc <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    68fc:	4b09      	ldr	r3, [pc, #36]	; (6924 <usb_device_endpoint_setup_buffer_job+0x28>)
    68fe:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6900:	685a      	ldr	r2, [r3, #4]
    6902:	4909      	ldr	r1, [pc, #36]	; (6928 <usb_device_endpoint_setup_buffer_job+0x2c>)
    6904:	4011      	ands	r1, r2
    6906:	2280      	movs	r2, #128	; 0x80
    6908:	0292      	lsls	r2, r2, #10
    690a:	430a      	orrs	r2, r1
    690c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    690e:	685a      	ldr	r2, [r3, #4]
    6910:	0b92      	lsrs	r2, r2, #14
    6912:	0392      	lsls	r2, r2, #14
    6914:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6916:	6802      	ldr	r2, [r0, #0]
    6918:	2140      	movs	r1, #64	; 0x40
    691a:	2382      	movs	r3, #130	; 0x82
    691c:	005b      	lsls	r3, r3, #1
    691e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    6920:	2000      	movs	r0, #0
    6922:	4770      	bx	lr
    6924:	20001694 	.word	0x20001694
    6928:	f0003fff 	.word	0xf0003fff

0000692c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    692c:	6802      	ldr	r2, [r0, #0]
    692e:	7813      	ldrb	r3, [r2, #0]
    6930:	2102      	movs	r1, #2
    6932:	430b      	orrs	r3, r1
    6934:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    6936:	6802      	ldr	r2, [r0, #0]
    6938:	7893      	ldrb	r3, [r2, #2]
    693a:	2b02      	cmp	r3, #2
    693c:	d0fc      	beq.n	6938 <usb_enable+0xc>
}
    693e:	4770      	bx	lr

00006940 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6940:	b5f0      	push	{r4, r5, r6, r7, lr}
    6942:	46de      	mov	lr, fp
    6944:	4657      	mov	r7, sl
    6946:	464e      	mov	r6, r9
    6948:	4645      	mov	r5, r8
    694a:	b5e0      	push	{r5, r6, r7, lr}
    694c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    694e:	4bc2      	ldr	r3, [pc, #776]	; (6c58 <USB_Handler+0x318>)
    6950:	681f      	ldr	r7, [r3, #0]
    6952:	683d      	ldr	r5, [r7, #0]
    6954:	782b      	ldrb	r3, [r5, #0]
    6956:	09db      	lsrs	r3, r3, #7
    6958:	d114      	bne.n	6984 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    695a:	8c2e      	ldrh	r6, [r5, #32]
    695c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    695e:	2e00      	cmp	r6, #0
    6960:	d000      	beq.n	6964 <USB_Handler+0x24>
    6962:	e1a9      	b.n	6cb8 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    6964:	8bae      	ldrh	r6, [r5, #28]
    6966:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    6968:	23ab      	movs	r3, #171	; 0xab
    696a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    696c:	5afb      	ldrh	r3, [r7, r3]
    696e:	22aa      	movs	r2, #170	; 0xaa
    6970:	0052      	lsls	r2, r2, #1
    6972:	5abd      	ldrh	r5, [r7, r2]
    6974:	401d      	ands	r5, r3
    6976:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6978:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    697a:	4fb8      	ldr	r7, [pc, #736]	; (6c5c <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    697c:	4bb6      	ldr	r3, [pc, #728]	; (6c58 <USB_Handler+0x318>)
    697e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6980:	4698      	mov	r8, r3
    6982:	e184      	b.n	6c8e <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6984:	8c2b      	ldrh	r3, [r5, #32]
    6986:	b29b      	uxth	r3, r3
    6988:	2b00      	cmp	r3, #0
    698a:	d100      	bne.n	698e <USB_Handler+0x4e>
    698c:	e0de      	b.n	6b4c <USB_Handler+0x20c>
    698e:	8c28      	ldrh	r0, [r5, #32]
    6990:	b280      	uxth	r0, r0
    6992:	4bb3      	ldr	r3, [pc, #716]	; (6c60 <USB_Handler+0x320>)
    6994:	4798      	blx	r3
    6996:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    6998:	281f      	cmp	r0, #31
    699a:	d900      	bls.n	699e <USB_Handler+0x5e>
    699c:	e0d6      	b.n	6b4c <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    699e:	0003      	movs	r3, r0
    69a0:	3308      	adds	r3, #8
    69a2:	015b      	lsls	r3, r3, #5
    69a4:	18ed      	adds	r5, r5, r3
    69a6:	79ed      	ldrb	r5, [r5, #7]
    69a8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    69aa:	07ab      	lsls	r3, r5, #30
    69ac:	d041      	beq.n	6a32 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    69ae:	4aad      	ldr	r2, [pc, #692]	; (6c64 <USB_Handler+0x324>)
    69b0:	2301      	movs	r3, #1
    69b2:	4083      	lsls	r3, r0
    69b4:	6811      	ldr	r1, [r2, #0]
    69b6:	4399      	bics	r1, r3
    69b8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    69ba:	0003      	movs	r3, r0
    69bc:	3308      	adds	r3, #8
    69be:	015b      	lsls	r3, r3, #5
    69c0:	683a      	ldr	r2, [r7, #0]
    69c2:	4694      	mov	ip, r2
    69c4:	4463      	add	r3, ip
    69c6:	2203      	movs	r2, #3
    69c8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    69ca:	183b      	adds	r3, r7, r0
    69cc:	33ae      	adds	r3, #174	; 0xae
    69ce:	781b      	ldrb	r3, [r3, #0]
    69d0:	07db      	lsls	r3, r3, #31
    69d2:	d52e      	bpl.n	6a32 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    69d4:	4ba4      	ldr	r3, [pc, #656]	; (6c68 <USB_Handler+0x328>)
    69d6:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    69d8:	683a      	ldr	r2, [r7, #0]
    69da:	0003      	movs	r3, r0
    69dc:	3308      	adds	r3, #8
    69de:	015b      	lsls	r3, r3, #5
    69e0:	5c9b      	ldrb	r3, [r3, r2]
    69e2:	079b      	lsls	r3, r3, #30
    69e4:	0f9b      	lsrs	r3, r3, #30
    69e6:	2b01      	cmp	r3, #1
    69e8:	d100      	bne.n	69ec <USB_Handler+0xac>
    69ea:	e081      	b.n	6af0 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    69ec:	0142      	lsls	r2, r0, #5
    69ee:	4b9f      	ldr	r3, [pc, #636]	; (6c6c <USB_Handler+0x32c>)
    69f0:	189b      	adds	r3, r3, r2
    69f2:	685a      	ldr	r2, [r3, #4]
    69f4:	0112      	lsls	r2, r2, #4
    69f6:	0c92      	lsrs	r2, r2, #18
    69f8:	b290      	uxth	r0, r2
    69fa:	499b      	ldr	r1, [pc, #620]	; (6c68 <USB_Handler+0x328>)
    69fc:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    69fe:	685a      	ldr	r2, [r3, #4]
    6a00:	0492      	lsls	r2, r2, #18
    6a02:	0c92      	lsrs	r2, r2, #18
    6a04:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6a06:	685a      	ldr	r2, [r3, #4]
    6a08:	4999      	ldr	r1, [pc, #612]	; (6c70 <USB_Handler+0x330>)
    6a0a:	400a      	ands	r2, r1
    6a0c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6a0e:	2800      	cmp	r0, #0
    6a10:	d107      	bne.n	6a22 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6a12:	0162      	lsls	r2, r4, #5
    6a14:	4b95      	ldr	r3, [pc, #596]	; (6c6c <USB_Handler+0x32c>)
    6a16:	189b      	adds	r3, r3, r2
    6a18:	685b      	ldr	r3, [r3, #4]
    6a1a:	049b      	lsls	r3, r3, #18
    6a1c:	0c9b      	lsrs	r3, r3, #18
    6a1e:	4a92      	ldr	r2, [pc, #584]	; (6c68 <USB_Handler+0x328>)
    6a20:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6a22:	4b8d      	ldr	r3, [pc, #564]	; (6c58 <USB_Handler+0x318>)
    6a24:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6a26:	1ca3      	adds	r3, r4, #2
    6a28:	011b      	lsls	r3, r3, #4
    6a2a:	18c3      	adds	r3, r0, r3
    6a2c:	685b      	ldr	r3, [r3, #4]
    6a2e:	498e      	ldr	r1, [pc, #568]	; (6c68 <USB_Handler+0x328>)
    6a30:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6a32:	076b      	lsls	r3, r5, #29
    6a34:	d50e      	bpl.n	6a54 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a36:	4a8b      	ldr	r2, [pc, #556]	; (6c64 <USB_Handler+0x324>)
    6a38:	2301      	movs	r3, #1
    6a3a:	40a3      	lsls	r3, r4
    6a3c:	6811      	ldr	r1, [r2, #0]
    6a3e:	4399      	bics	r1, r3
    6a40:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a42:	4b85      	ldr	r3, [pc, #532]	; (6c58 <USB_Handler+0x318>)
    6a44:	681b      	ldr	r3, [r3, #0]
    6a46:	681b      	ldr	r3, [r3, #0]
    6a48:	0022      	movs	r2, r4
    6a4a:	3208      	adds	r2, #8
    6a4c:	0152      	lsls	r2, r2, #5
    6a4e:	189b      	adds	r3, r3, r2
    6a50:	2204      	movs	r2, #4
    6a52:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6a54:	072b      	lsls	r3, r5, #28
    6a56:	d514      	bpl.n	6a82 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a58:	4a82      	ldr	r2, [pc, #520]	; (6c64 <USB_Handler+0x324>)
    6a5a:	2301      	movs	r3, #1
    6a5c:	40a3      	lsls	r3, r4
    6a5e:	6811      	ldr	r1, [r2, #0]
    6a60:	4399      	bics	r1, r3
    6a62:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a64:	4b7c      	ldr	r3, [pc, #496]	; (6c58 <USB_Handler+0x318>)
    6a66:	6818      	ldr	r0, [r3, #0]
    6a68:	0023      	movs	r3, r4
    6a6a:	3308      	adds	r3, #8
    6a6c:	015b      	lsls	r3, r3, #5
    6a6e:	6802      	ldr	r2, [r0, #0]
    6a70:	4694      	mov	ip, r2
    6a72:	4463      	add	r3, ip
    6a74:	2208      	movs	r2, #8
    6a76:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6a78:	1903      	adds	r3, r0, r4
    6a7a:	33ae      	adds	r3, #174	; 0xae
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	079b      	lsls	r3, r3, #30
    6a80:	d447      	bmi.n	6b12 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6a82:	06eb      	lsls	r3, r5, #27
    6a84:	d514      	bpl.n	6ab0 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a86:	4a77      	ldr	r2, [pc, #476]	; (6c64 <USB_Handler+0x324>)
    6a88:	2301      	movs	r3, #1
    6a8a:	40a3      	lsls	r3, r4
    6a8c:	6811      	ldr	r1, [r2, #0]
    6a8e:	4399      	bics	r1, r3
    6a90:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a92:	4b71      	ldr	r3, [pc, #452]	; (6c58 <USB_Handler+0x318>)
    6a94:	6818      	ldr	r0, [r3, #0]
    6a96:	0023      	movs	r3, r4
    6a98:	3308      	adds	r3, #8
    6a9a:	015b      	lsls	r3, r3, #5
    6a9c:	6802      	ldr	r2, [r0, #0]
    6a9e:	4694      	mov	ip, r2
    6aa0:	4463      	add	r3, ip
    6aa2:	2210      	movs	r2, #16
    6aa4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6aa6:	1903      	adds	r3, r0, r4
    6aa8:	33ae      	adds	r3, #174	; 0xae
    6aaa:	781b      	ldrb	r3, [r3, #0]
    6aac:	075b      	lsls	r3, r3, #29
    6aae:	d43e      	bmi.n	6b2e <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6ab0:	06ab      	lsls	r3, r5, #26
    6ab2:	d400      	bmi.n	6ab6 <USB_Handler+0x176>
    6ab4:	e0b0      	b.n	6c18 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6ab6:	4a6b      	ldr	r2, [pc, #428]	; (6c64 <USB_Handler+0x324>)
    6ab8:	2301      	movs	r3, #1
    6aba:	40a3      	lsls	r3, r4
    6abc:	6811      	ldr	r1, [r2, #0]
    6abe:	4399      	bics	r1, r3
    6ac0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6ac2:	4b65      	ldr	r3, [pc, #404]	; (6c58 <USB_Handler+0x318>)
    6ac4:	6818      	ldr	r0, [r3, #0]
    6ac6:	0023      	movs	r3, r4
    6ac8:	3308      	adds	r3, #8
    6aca:	015b      	lsls	r3, r3, #5
    6acc:	6802      	ldr	r2, [r0, #0]
    6ace:	4694      	mov	ip, r2
    6ad0:	4463      	add	r3, ip
    6ad2:	2220      	movs	r2, #32
    6ad4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6ad6:	1903      	adds	r3, r0, r4
    6ad8:	33ae      	adds	r3, #174	; 0xae
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	071b      	lsls	r3, r3, #28
    6ade:	d400      	bmi.n	6ae2 <USB_Handler+0x1a2>
    6ae0:	e09a      	b.n	6c18 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    6ae2:	4961      	ldr	r1, [pc, #388]	; (6c68 <USB_Handler+0x328>)
    6ae4:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6ae6:	0124      	lsls	r4, r4, #4
    6ae8:	1904      	adds	r4, r0, r4
    6aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6aec:	4798      	blx	r3
    6aee:	e093      	b.n	6c18 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6af0:	0142      	lsls	r2, r0, #5
    6af2:	4b5e      	ldr	r3, [pc, #376]	; (6c6c <USB_Handler+0x32c>)
    6af4:	189b      	adds	r3, r3, r2
    6af6:	685a      	ldr	r2, [r3, #4]
    6af8:	0492      	lsls	r2, r2, #18
    6afa:	0c92      	lsrs	r2, r2, #18
    6afc:	495a      	ldr	r1, [pc, #360]	; (6c68 <USB_Handler+0x328>)
    6afe:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6b00:	685a      	ldr	r2, [r3, #4]
    6b02:	0112      	lsls	r2, r2, #4
    6b04:	0c92      	lsrs	r2, r2, #18
    6b06:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6b08:	685a      	ldr	r2, [r3, #4]
    6b0a:	0b92      	lsrs	r2, r2, #14
    6b0c:	0392      	lsls	r2, r2, #14
    6b0e:	605a      	str	r2, [r3, #4]
    6b10:	e787      	b.n	6a22 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    6b12:	4955      	ldr	r1, [pc, #340]	; (6c68 <USB_Handler+0x328>)
    6b14:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6b16:	0162      	lsls	r2, r4, #5
    6b18:	4b54      	ldr	r3, [pc, #336]	; (6c6c <USB_Handler+0x32c>)
    6b1a:	189b      	adds	r3, r3, r2
    6b1c:	89db      	ldrh	r3, [r3, #14]
    6b1e:	221f      	movs	r2, #31
    6b20:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    6b22:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6b24:	0123      	lsls	r3, r4, #4
    6b26:	18c3      	adds	r3, r0, r3
    6b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b2a:	4798      	blx	r3
    6b2c:	e7a9      	b.n	6a82 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    6b2e:	494e      	ldr	r1, [pc, #312]	; (6c68 <USB_Handler+0x328>)
    6b30:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6b32:	0162      	lsls	r2, r4, #5
    6b34:	4b4d      	ldr	r3, [pc, #308]	; (6c6c <USB_Handler+0x32c>)
    6b36:	189b      	adds	r3, r3, r2
    6b38:	685b      	ldr	r3, [r3, #4]
    6b3a:	011b      	lsls	r3, r3, #4
    6b3c:	0c9b      	lsrs	r3, r3, #18
    6b3e:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6b40:	0123      	lsls	r3, r4, #4
    6b42:	18c3      	adds	r3, r0, r3
    6b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6b46:	2100      	movs	r1, #0
    6b48:	4798      	blx	r3
    6b4a:	e7b1      	b.n	6ab0 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6b4c:	8bac      	ldrh	r4, [r5, #28]
    6b4e:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6b50:	0763      	lsls	r3, r4, #29
    6b52:	d505      	bpl.n	6b60 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6b54:	2304      	movs	r3, #4
    6b56:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6b58:	33a1      	adds	r3, #161	; 0xa1
    6b5a:	5cfb      	ldrb	r3, [r7, r3]
    6b5c:	07db      	lsls	r3, r3, #31
    6b5e:	d462      	bmi.n	6c26 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    6b60:	0723      	lsls	r3, r4, #28
    6b62:	d50b      	bpl.n	6b7c <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    6b64:	2200      	movs	r2, #0
    6b66:	4b3f      	ldr	r3, [pc, #252]	; (6c64 <USB_Handler+0x324>)
    6b68:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6b6a:	4b3b      	ldr	r3, [pc, #236]	; (6c58 <USB_Handler+0x318>)
    6b6c:	6818      	ldr	r0, [r3, #0]
    6b6e:	2308      	movs	r3, #8
    6b70:	6802      	ldr	r2, [r0, #0]
    6b72:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6b74:	339d      	adds	r3, #157	; 0x9d
    6b76:	5cc3      	ldrb	r3, [r0, r3]
    6b78:	079b      	lsls	r3, r3, #30
    6b7a:	d458      	bmi.n	6c2e <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6b7c:	0663      	lsls	r3, r4, #25
    6b7e:	d508      	bpl.n	6b92 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    6b80:	4b35      	ldr	r3, [pc, #212]	; (6c58 <USB_Handler+0x318>)
    6b82:	6818      	ldr	r0, [r3, #0]
    6b84:	2340      	movs	r3, #64	; 0x40
    6b86:	6802      	ldr	r2, [r0, #0]
    6b88:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6b8a:	3365      	adds	r3, #101	; 0x65
    6b8c:	5cc3      	ldrb	r3, [r0, r3]
    6b8e:	06db      	lsls	r3, r3, #27
    6b90:	d450      	bmi.n	6c34 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6b92:	06a3      	lsls	r3, r4, #26
    6b94:	d508      	bpl.n	6ba8 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6b96:	4b30      	ldr	r3, [pc, #192]	; (6c58 <USB_Handler+0x318>)
    6b98:	6818      	ldr	r0, [r3, #0]
    6b9a:	2320      	movs	r3, #32
    6b9c:	6802      	ldr	r2, [r0, #0]
    6b9e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6ba0:	3385      	adds	r3, #133	; 0x85
    6ba2:	5cc3      	ldrb	r3, [r0, r3]
    6ba4:	071b      	lsls	r3, r3, #28
    6ba6:	d448      	bmi.n	6c3a <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6ba8:	06e3      	lsls	r3, r4, #27
    6baa:	d508      	bpl.n	6bbe <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    6bac:	4b2a      	ldr	r3, [pc, #168]	; (6c58 <USB_Handler+0x318>)
    6bae:	6818      	ldr	r0, [r3, #0]
    6bb0:	2310      	movs	r3, #16
    6bb2:	6802      	ldr	r2, [r0, #0]
    6bb4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6bb6:	3395      	adds	r3, #149	; 0x95
    6bb8:	5cc3      	ldrb	r3, [r0, r3]
    6bba:	075b      	lsls	r3, r3, #29
    6bbc:	d440      	bmi.n	6c40 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6bbe:	0623      	lsls	r3, r4, #24
    6bc0:	d50b      	bpl.n	6bda <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    6bc2:	2200      	movs	r2, #0
    6bc4:	4b27      	ldr	r3, [pc, #156]	; (6c64 <USB_Handler+0x324>)
    6bc6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6bc8:	4b23      	ldr	r3, [pc, #140]	; (6c58 <USB_Handler+0x318>)
    6bca:	6818      	ldr	r0, [r3, #0]
    6bcc:	2380      	movs	r3, #128	; 0x80
    6bce:	6802      	ldr	r2, [r0, #0]
    6bd0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6bd2:	3325      	adds	r3, #37	; 0x25
    6bd4:	5cc3      	ldrb	r3, [r0, r3]
    6bd6:	069b      	lsls	r3, r3, #26
    6bd8:	d435      	bmi.n	6c46 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    6bda:	05e3      	lsls	r3, r4, #23
    6bdc:	d50c      	bpl.n	6bf8 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    6bde:	2200      	movs	r2, #0
    6be0:	4b20      	ldr	r3, [pc, #128]	; (6c64 <USB_Handler+0x324>)
    6be2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6be4:	4b1c      	ldr	r3, [pc, #112]	; (6c58 <USB_Handler+0x318>)
    6be6:	6818      	ldr	r0, [r3, #0]
    6be8:	2380      	movs	r3, #128	; 0x80
    6bea:	005b      	lsls	r3, r3, #1
    6bec:	6802      	ldr	r2, [r0, #0]
    6bee:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6bf0:	3b5b      	subs	r3, #91	; 0x5b
    6bf2:	5cc3      	ldrb	r3, [r0, r3]
    6bf4:	065b      	lsls	r3, r3, #25
    6bf6:	d429      	bmi.n	6c4c <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6bf8:	05a3      	lsls	r3, r4, #22
    6bfa:	d50d      	bpl.n	6c18 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    6bfc:	2200      	movs	r2, #0
    6bfe:	4b19      	ldr	r3, [pc, #100]	; (6c64 <USB_Handler+0x324>)
    6c00:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6c02:	4b15      	ldr	r3, [pc, #84]	; (6c58 <USB_Handler+0x318>)
    6c04:	6818      	ldr	r0, [r3, #0]
    6c06:	2380      	movs	r3, #128	; 0x80
    6c08:	009b      	lsls	r3, r3, #2
    6c0a:	6802      	ldr	r2, [r0, #0]
    6c0c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    6c0e:	3b5c      	subs	r3, #92	; 0x5c
    6c10:	3bff      	subs	r3, #255	; 0xff
    6c12:	5cc3      	ldrb	r3, [r0, r3]
    6c14:	2b7f      	cmp	r3, #127	; 0x7f
    6c16:	d81c      	bhi.n	6c52 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    6c18:	b003      	add	sp, #12
    6c1a:	bc3c      	pop	{r2, r3, r4, r5}
    6c1c:	4690      	mov	r8, r2
    6c1e:	4699      	mov	r9, r3
    6c20:	46a2      	mov	sl, r4
    6c22:	46ab      	mov	fp, r5
    6c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	0038      	movs	r0, r7
    6c2a:	4798      	blx	r3
    6c2c:	e798      	b.n	6b60 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6c2e:	6883      	ldr	r3, [r0, #8]
    6c30:	4798      	blx	r3
    6c32:	e7a3      	b.n	6b7c <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6c34:	6943      	ldr	r3, [r0, #20]
    6c36:	4798      	blx	r3
    6c38:	e7ab      	b.n	6b92 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6c3a:	6903      	ldr	r3, [r0, #16]
    6c3c:	4798      	blx	r3
    6c3e:	e7b3      	b.n	6ba8 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6c40:	68c3      	ldr	r3, [r0, #12]
    6c42:	4798      	blx	r3
    6c44:	e7bb      	b.n	6bbe <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6c46:	6983      	ldr	r3, [r0, #24]
    6c48:	4798      	blx	r3
    6c4a:	e7c6      	b.n	6bda <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6c4c:	69c3      	ldr	r3, [r0, #28]
    6c4e:	4798      	blx	r3
    6c50:	e7d2      	b.n	6bf8 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6c52:	6a03      	ldr	r3, [r0, #32]
    6c54:	4798      	blx	r3
    6c56:	e7df      	b.n	6c18 <USB_Handler+0x2d8>
    6c58:	200002d8 	.word	0x200002d8
    6c5c:	0000b050 	.word	0x0000b050
    6c60:	000090f9 	.word	0x000090f9
    6c64:	200002e8 	.word	0x200002e8
    6c68:	200002ec 	.word	0x200002ec
    6c6c:	20001694 	.word	0x20001694
    6c70:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6c74:	0023      	movs	r3, r4
    6c76:	332e      	adds	r3, #46	; 0x2e
    6c78:	009b      	lsls	r3, r3, #2
    6c7a:	4642      	mov	r2, r8
    6c7c:	6812      	ldr	r2, [r2, #0]
    6c7e:	589b      	ldr	r3, [r3, r2]
    6c80:	499e      	ldr	r1, [pc, #632]	; (6efc <USB_Handler+0x5bc>)
    6c82:	4642      	mov	r2, r8
    6c84:	6810      	ldr	r0, [r2, #0]
    6c86:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6c88:	3401      	adds	r4, #1
    6c8a:	2c07      	cmp	r4, #7
    6c8c:	d0c4      	beq.n	6c18 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    6c8e:	0063      	lsls	r3, r4, #1
    6c90:	5bdb      	ldrh	r3, [r3, r7]
    6c92:	4233      	tst	r3, r6
    6c94:	d003      	beq.n	6c9e <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6c96:	464a      	mov	r2, r9
    6c98:	6812      	ldr	r2, [r2, #0]
    6c9a:	6812      	ldr	r2, [r2, #0]
    6c9c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    6c9e:	422b      	tst	r3, r5
    6ca0:	d0f2      	beq.n	6c88 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    6ca2:	2c06      	cmp	r4, #6
    6ca4:	d1e6      	bne.n	6c74 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    6ca6:	4b96      	ldr	r3, [pc, #600]	; (6f00 <USB_Handler+0x5c0>)
    6ca8:	891b      	ldrh	r3, [r3, #8]
    6caa:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    6cac:	2280      	movs	r2, #128	; 0x80
    6cae:	0052      	lsls	r2, r2, #1
    6cb0:	4013      	ands	r3, r2
    6cb2:	4a92      	ldr	r2, [pc, #584]	; (6efc <USB_Handler+0x5bc>)
    6cb4:	6013      	str	r3, [r2, #0]
    6cb6:	e7dd      	b.n	6c74 <USB_Handler+0x334>
    6cb8:	003c      	movs	r4, r7
    6cba:	3459      	adds	r4, #89	; 0x59
    6cbc:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    6cbe:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    6cc0:	2201      	movs	r2, #1
    6cc2:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6cc4:	325f      	adds	r2, #95	; 0x5f
    6cc6:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6cc8:	3a50      	subs	r2, #80	; 0x50
    6cca:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6ccc:	3a0d      	subs	r2, #13
    6cce:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6cd0:	46b8      	mov	r8, r7
    6cd2:	002f      	movs	r7, r5
    6cd4:	e0b9      	b.n	6e4a <USB_Handler+0x50a>
    6cd6:	002a      	movs	r2, r5
    6cd8:	003d      	movs	r5, r7
    6cda:	4647      	mov	r7, r8
    6cdc:	4690      	mov	r8, r2
    6cde:	015b      	lsls	r3, r3, #5
    6ce0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6ce2:	2308      	movs	r3, #8
    6ce4:	33ff      	adds	r3, #255	; 0xff
    6ce6:	5ceb      	ldrb	r3, [r5, r3]
    6ce8:	065b      	lsls	r3, r3, #25
    6cea:	d516      	bpl.n	6d1a <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6cec:	2240      	movs	r2, #64	; 0x40
    6cee:	2308      	movs	r3, #8
    6cf0:	33ff      	adds	r3, #255	; 0xff
    6cf2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6cf4:	3b88      	subs	r3, #136	; 0x88
    6cf6:	3bff      	subs	r3, #255	; 0xff
    6cf8:	4642      	mov	r2, r8
    6cfa:	4313      	orrs	r3, r2
    6cfc:	4a81      	ldr	r2, [pc, #516]	; (6f04 <USB_Handler+0x5c4>)
    6cfe:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6d00:	2360      	movs	r3, #96	; 0x60
    6d02:	420b      	tst	r3, r1
    6d04:	d100      	bne.n	6d08 <USB_Handler+0x3c8>
    6d06:	e787      	b.n	6c18 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6d08:	9b01      	ldr	r3, [sp, #4]
    6d0a:	011b      	lsls	r3, r3, #4
    6d0c:	18fb      	adds	r3, r7, r3
    6d0e:	33e0      	adds	r3, #224	; 0xe0
    6d10:	681b      	ldr	r3, [r3, #0]
    6d12:	497c      	ldr	r1, [pc, #496]	; (6f04 <USB_Handler+0x5c4>)
    6d14:	0038      	movs	r0, r7
    6d16:	4798      	blx	r3
    6d18:	e77e      	b.n	6c18 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6d1a:	2308      	movs	r3, #8
    6d1c:	33ff      	adds	r3, #255	; 0xff
    6d1e:	5ceb      	ldrb	r3, [r5, r3]
    6d20:	069b      	lsls	r3, r3, #26
    6d22:	d5ed      	bpl.n	6d00 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6d24:	2220      	movs	r2, #32
    6d26:	2308      	movs	r3, #8
    6d28:	33ff      	adds	r3, #255	; 0xff
    6d2a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6d2c:	4b75      	ldr	r3, [pc, #468]	; (6f04 <USB_Handler+0x5c4>)
    6d2e:	4642      	mov	r2, r8
    6d30:	719a      	strb	r2, [r3, #6]
    6d32:	e7e5      	b.n	6d00 <USB_Handler+0x3c0>
    6d34:	003d      	movs	r5, r7
    6d36:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    6d38:	9a01      	ldr	r2, [sp, #4]
    6d3a:	0013      	movs	r3, r2
    6d3c:	3308      	adds	r3, #8
    6d3e:	015b      	lsls	r3, r3, #5
    6d40:	18ed      	adds	r5, r5, r3
    6d42:	2310      	movs	r3, #16
    6d44:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    6d46:	18bb      	adds	r3, r7, r2
    6d48:	3361      	adds	r3, #97	; 0x61
    6d4a:	33ff      	adds	r3, #255	; 0xff
    6d4c:	781b      	ldrb	r3, [r3, #0]
    6d4e:	06db      	lsls	r3, r3, #27
    6d50:	d400      	bmi.n	6d54 <USB_Handler+0x414>
    6d52:	e761      	b.n	6c18 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6d54:	0010      	movs	r0, r2
    6d56:	0152      	lsls	r2, r2, #5
    6d58:	4b69      	ldr	r3, [pc, #420]	; (6f00 <USB_Handler+0x5c0>)
    6d5a:	189b      	adds	r3, r3, r2
    6d5c:	685b      	ldr	r3, [r3, #4]
    6d5e:	049b      	lsls	r3, r3, #18
    6d60:	0c9b      	lsrs	r3, r3, #18
    6d62:	4968      	ldr	r1, [pc, #416]	; (6f04 <USB_Handler+0x5c4>)
    6d64:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    6d66:	0103      	lsls	r3, r0, #4
    6d68:	18fb      	adds	r3, r7, r3
    6d6a:	33dc      	adds	r3, #220	; 0xdc
    6d6c:	681b      	ldr	r3, [r3, #0]
    6d6e:	4640      	mov	r0, r8
    6d70:	4798      	blx	r3
    6d72:	e751      	b.n	6c18 <USB_Handler+0x2d8>
    6d74:	002a      	movs	r2, r5
    6d76:	003d      	movs	r5, r7
    6d78:	4647      	mov	r7, r8
    6d7a:	4690      	mov	r8, r2
    6d7c:	015b      	lsls	r3, r3, #5
    6d7e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6d80:	2308      	movs	r3, #8
    6d82:	33ff      	adds	r3, #255	; 0xff
    6d84:	5ceb      	ldrb	r3, [r5, r3]
    6d86:	079b      	lsls	r3, r3, #30
    6d88:	d51e      	bpl.n	6dc8 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6d8a:	2202      	movs	r2, #2
    6d8c:	2308      	movs	r3, #8
    6d8e:	33ff      	adds	r3, #255	; 0xff
    6d90:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6d92:	485c      	ldr	r0, [pc, #368]	; (6f04 <USB_Handler+0x5c4>)
    6d94:	3b88      	subs	r3, #136	; 0x88
    6d96:	3bff      	subs	r3, #255	; 0xff
    6d98:	4642      	mov	r2, r8
    6d9a:	4313      	orrs	r3, r2
    6d9c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    6d9e:	9b01      	ldr	r3, [sp, #4]
    6da0:	015a      	lsls	r2, r3, #5
    6da2:	4b57      	ldr	r3, [pc, #348]	; (6f00 <USB_Handler+0x5c0>)
    6da4:	189b      	adds	r3, r3, r2
    6da6:	3310      	adds	r3, #16
    6da8:	685b      	ldr	r3, [r3, #4]
    6daa:	049b      	lsls	r3, r3, #18
    6dac:	0c9b      	lsrs	r3, r3, #18
    6dae:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6db0:	078b      	lsls	r3, r1, #30
    6db2:	d100      	bne.n	6db6 <USB_Handler+0x476>
    6db4:	e730      	b.n	6c18 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6db6:	9b01      	ldr	r3, [sp, #4]
    6db8:	330d      	adds	r3, #13
    6dba:	011b      	lsls	r3, r3, #4
    6dbc:	18fb      	adds	r3, r7, r3
    6dbe:	685b      	ldr	r3, [r3, #4]
    6dc0:	4950      	ldr	r1, [pc, #320]	; (6f04 <USB_Handler+0x5c4>)
    6dc2:	0038      	movs	r0, r7
    6dc4:	4798      	blx	r3
    6dc6:	e727      	b.n	6c18 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6dc8:	2308      	movs	r3, #8
    6dca:	33ff      	adds	r3, #255	; 0xff
    6dcc:	5ceb      	ldrb	r3, [r5, r3]
    6dce:	07db      	lsls	r3, r3, #31
    6dd0:	d5ee      	bpl.n	6db0 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6dd2:	2201      	movs	r2, #1
    6dd4:	2308      	movs	r3, #8
    6dd6:	33ff      	adds	r3, #255	; 0xff
    6dd8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6dda:	484a      	ldr	r0, [pc, #296]	; (6f04 <USB_Handler+0x5c4>)
    6ddc:	4643      	mov	r3, r8
    6dde:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6de0:	9b01      	ldr	r3, [sp, #4]
    6de2:	015b      	lsls	r3, r3, #5
    6de4:	4a46      	ldr	r2, [pc, #280]	; (6f00 <USB_Handler+0x5c0>)
    6de6:	18d2      	adds	r2, r2, r3
    6de8:	6853      	ldr	r3, [r2, #4]
    6dea:	049b      	lsls	r3, r3, #18
    6dec:	0c9b      	lsrs	r3, r3, #18
    6dee:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    6df0:	6853      	ldr	r3, [r2, #4]
    6df2:	011b      	lsls	r3, r3, #4
    6df4:	0c9b      	lsrs	r3, r3, #18
    6df6:	8083      	strh	r3, [r0, #4]
    6df8:	e7da      	b.n	6db0 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6dfa:	2208      	movs	r2, #8
    6dfc:	32ff      	adds	r2, #255	; 0xff
    6dfe:	5c9a      	ldrb	r2, [r3, r2]
    6e00:	0752      	lsls	r2, r2, #29
    6e02:	d56e      	bpl.n	6ee2 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6e04:	2004      	movs	r0, #4
    6e06:	2208      	movs	r2, #8
    6e08:	32ff      	adds	r2, #255	; 0xff
    6e0a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6e0c:	9801      	ldr	r0, [sp, #4]
    6e0e:	0142      	lsls	r2, r0, #5
    6e10:	4b3b      	ldr	r3, [pc, #236]	; (6f00 <USB_Handler+0x5c0>)
    6e12:	189b      	adds	r3, r3, r2
    6e14:	7a9b      	ldrb	r3, [r3, #10]
    6e16:	079b      	lsls	r3, r3, #30
    6e18:	d505      	bpl.n	6e26 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6e1a:	4b39      	ldr	r3, [pc, #228]	; (6f00 <USB_Handler+0x5c0>)
    6e1c:	189b      	adds	r3, r3, r2
    6e1e:	7a9a      	ldrb	r2, [r3, #10]
    6e20:	2002      	movs	r0, #2
    6e22:	4382      	bics	r2, r0
    6e24:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6e26:	4b37      	ldr	r3, [pc, #220]	; (6f04 <USB_Handler+0x5c4>)
    6e28:	4642      	mov	r2, r8
    6e2a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6e2c:	9b01      	ldr	r3, [sp, #4]
    6e2e:	3308      	adds	r3, #8
    6e30:	015b      	lsls	r3, r3, #5
    6e32:	683a      	ldr	r2, [r7, #0]
    6e34:	4694      	mov	ip, r2
    6e36:	4463      	add	r3, ip
    6e38:	79db      	ldrb	r3, [r3, #7]
    6e3a:	07db      	lsls	r3, r3, #31
    6e3c:	d551      	bpl.n	6ee2 <USB_Handler+0x5a2>
    6e3e:	e6eb      	b.n	6c18 <USB_Handler+0x2d8>
    6e40:	3301      	adds	r3, #1
    6e42:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    6e44:	2b08      	cmp	r3, #8
    6e46:	d100      	bne.n	6e4a <USB_Handler+0x50a>
    6e48:	e6e6      	b.n	6c18 <USB_Handler+0x2d8>
    6e4a:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    6e4c:	9301      	str	r3, [sp, #4]
    6e4e:	0032      	movs	r2, r6
    6e50:	411a      	asrs	r2, r3
    6e52:	4661      	mov	r1, ip
    6e54:	4211      	tst	r1, r2
    6e56:	d0f3      	beq.n	6e40 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    6e58:	001a      	movs	r2, r3
    6e5a:	3208      	adds	r2, #8
    6e5c:	0152      	lsls	r2, r2, #5
    6e5e:	18ba      	adds	r2, r7, r2
    6e60:	79d2      	ldrb	r2, [r2, #7]
    6e62:	b2d2      	uxtb	r2, r2
    6e64:	7a21      	ldrb	r1, [r4, #8]
    6e66:	4011      	ands	r1, r2
    6e68:	7820      	ldrb	r0, [r4, #0]
    6e6a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6e6c:	4648      	mov	r0, r9
    6e6e:	4210      	tst	r0, r2
    6e70:	d000      	beq.n	6e74 <USB_Handler+0x534>
    6e72:	e730      	b.n	6cd6 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6e74:	4650      	mov	r0, sl
    6e76:	4210      	tst	r0, r2
    6e78:	d000      	beq.n	6e7c <USB_Handler+0x53c>
    6e7a:	e75b      	b.n	6d34 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6e7c:	4658      	mov	r0, fp
    6e7e:	4210      	tst	r0, r2
    6e80:	d000      	beq.n	6e84 <USB_Handler+0x544>
    6e82:	e777      	b.n	6d74 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6e84:	200c      	movs	r0, #12
    6e86:	4210      	tst	r0, r2
    6e88:	d0da      	beq.n	6e40 <USB_Handler+0x500>
    6e8a:	002a      	movs	r2, r5
    6e8c:	003d      	movs	r5, r7
    6e8e:	4647      	mov	r7, r8
    6e90:	4690      	mov	r8, r2
    6e92:	015b      	lsls	r3, r3, #5
    6e94:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6e96:	2208      	movs	r2, #8
    6e98:	32ff      	adds	r2, #255	; 0xff
    6e9a:	5c9a      	ldrb	r2, [r3, r2]
    6e9c:	0712      	lsls	r2, r2, #28
    6e9e:	d5ac      	bpl.n	6dfa <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    6ea0:	3804      	subs	r0, #4
    6ea2:	2208      	movs	r2, #8
    6ea4:	32ff      	adds	r2, #255	; 0xff
    6ea6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6ea8:	9801      	ldr	r0, [sp, #4]
    6eaa:	0142      	lsls	r2, r0, #5
    6eac:	4b14      	ldr	r3, [pc, #80]	; (6f00 <USB_Handler+0x5c0>)
    6eae:	189b      	adds	r3, r3, r2
    6eb0:	7e9b      	ldrb	r3, [r3, #26]
    6eb2:	079b      	lsls	r3, r3, #30
    6eb4:	d505      	bpl.n	6ec2 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6eb6:	4b12      	ldr	r3, [pc, #72]	; (6f00 <USB_Handler+0x5c0>)
    6eb8:	189b      	adds	r3, r3, r2
    6eba:	7e9a      	ldrb	r2, [r3, #26]
    6ebc:	2002      	movs	r0, #2
    6ebe:	4382      	bics	r2, r0
    6ec0:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6ec2:	2380      	movs	r3, #128	; 0x80
    6ec4:	425b      	negs	r3, r3
    6ec6:	4642      	mov	r2, r8
    6ec8:	4313      	orrs	r3, r2
    6eca:	4a0e      	ldr	r2, [pc, #56]	; (6f04 <USB_Handler+0x5c4>)
    6ecc:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6ece:	9b01      	ldr	r3, [sp, #4]
    6ed0:	3308      	adds	r3, #8
    6ed2:	015b      	lsls	r3, r3, #5
    6ed4:	683a      	ldr	r2, [r7, #0]
    6ed6:	4694      	mov	ip, r2
    6ed8:	4463      	add	r3, ip
    6eda:	79db      	ldrb	r3, [r3, #7]
    6edc:	079b      	lsls	r3, r3, #30
    6ede:	d500      	bpl.n	6ee2 <USB_Handler+0x5a2>
    6ee0:	e69a      	b.n	6c18 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6ee2:	230c      	movs	r3, #12
    6ee4:	420b      	tst	r3, r1
    6ee6:	d100      	bne.n	6eea <USB_Handler+0x5aa>
    6ee8:	e696      	b.n	6c18 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    6eea:	9b01      	ldr	r3, [sp, #4]
    6eec:	011b      	lsls	r3, r3, #4
    6eee:	18fb      	adds	r3, r7, r3
    6ef0:	33d8      	adds	r3, #216	; 0xd8
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	4903      	ldr	r1, [pc, #12]	; (6f04 <USB_Handler+0x5c4>)
    6ef6:	0038      	movs	r0, r7
    6ef8:	4798      	blx	r3
    6efa:	e68d      	b.n	6c18 <USB_Handler+0x2d8>
    6efc:	200002dc 	.word	0x200002dc
    6f00:	20001694 	.word	0x20001694
    6f04:	200002e0 	.word	0x200002e0

00006f08 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6f08:	2200      	movs	r2, #0
    6f0a:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    6f0c:	2301      	movs	r3, #1
    6f0e:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    6f10:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    6f12:	70c3      	strb	r3, [r0, #3]
}
    6f14:	4770      	bx	lr
	...

00006f18 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f1a:	46ce      	mov	lr, r9
    6f1c:	4647      	mov	r7, r8
    6f1e:	b580      	push	{r7, lr}
    6f20:	b083      	sub	sp, #12
    6f22:	0004      	movs	r4, r0
    6f24:	000d      	movs	r5, r1
    6f26:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6f28:	2300      	movs	r3, #0
    6f2a:	4a6e      	ldr	r2, [pc, #440]	; (70e4 <usb_init+0x1cc>)
    6f2c:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    6f2e:	4a6e      	ldr	r2, [pc, #440]	; (70e8 <usb_init+0x1d0>)
    6f30:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6f32:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    6f34:	496d      	ldr	r1, [pc, #436]	; (70ec <usb_init+0x1d4>)
    6f36:	69ca      	ldr	r2, [r1, #28]
    6f38:	2020      	movs	r0, #32
    6f3a:	4302      	orrs	r2, r0
    6f3c:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6f3e:	af01      	add	r7, sp, #4
    6f40:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6f42:	2201      	movs	r2, #1
    6f44:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    6f46:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    6f48:	3306      	adds	r3, #6
    6f4a:	4699      	mov	r9, r3
    6f4c:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    6f4e:	0039      	movs	r1, r7
    6f50:	3808      	subs	r0, #8
    6f52:	4b67      	ldr	r3, [pc, #412]	; (70f0 <usb_init+0x1d8>)
    6f54:	4698      	mov	r8, r3
    6f56:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6f58:	464b      	mov	r3, r9
    6f5a:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6f5c:	0039      	movs	r1, r7
    6f5e:	2019      	movs	r0, #25
    6f60:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    6f62:	78b3      	ldrb	r3, [r6, #2]
    6f64:	466a      	mov	r2, sp
    6f66:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6f68:	4669      	mov	r1, sp
    6f6a:	2006      	movs	r0, #6
    6f6c:	4b61      	ldr	r3, [pc, #388]	; (70f4 <usb_init+0x1dc>)
    6f6e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    6f70:	2006      	movs	r0, #6
    6f72:	4b61      	ldr	r3, [pc, #388]	; (70f8 <usb_init+0x1e0>)
    6f74:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6f76:	782b      	ldrb	r3, [r5, #0]
    6f78:	2201      	movs	r2, #1
    6f7a:	4313      	orrs	r3, r2
    6f7c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    6f7e:	78ab      	ldrb	r3, [r5, #2]
    6f80:	07db      	lsls	r3, r3, #31
    6f82:	d4fc      	bmi.n	6f7e <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6f84:	4a5d      	ldr	r2, [pc, #372]	; (70fc <usb_init+0x1e4>)
    6f86:	78d3      	ldrb	r3, [r2, #3]
    6f88:	2103      	movs	r1, #3
    6f8a:	438b      	bics	r3, r1
    6f8c:	2102      	movs	r1, #2
    6f8e:	430b      	orrs	r3, r1
    6f90:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6f92:	78d3      	ldrb	r3, [r2, #3]
    6f94:	210c      	movs	r1, #12
    6f96:	438b      	bics	r3, r1
    6f98:	2108      	movs	r1, #8
    6f9a:	430b      	orrs	r3, r1
    6f9c:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f9e:	4b58      	ldr	r3, [pc, #352]	; (7100 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    6fa0:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6fa2:	039b      	lsls	r3, r3, #14
    6fa4:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    6fa6:	2b1f      	cmp	r3, #31
    6fa8:	d100      	bne.n	6fac <usb_init+0x94>
    6faa:	e08f      	b.n	70cc <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6fac:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6fae:	019b      	lsls	r3, r3, #6
    6fb0:	4954      	ldr	r1, [pc, #336]	; (7104 <usb_init+0x1ec>)
    6fb2:	400a      	ands	r2, r1
    6fb4:	4313      	orrs	r3, r2
    6fb6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6fb8:	4b51      	ldr	r3, [pc, #324]	; (7100 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6fbe:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    6fc0:	2b1f      	cmp	r3, #31
    6fc2:	d100      	bne.n	6fc6 <usb_init+0xae>
    6fc4:	e084      	b.n	70d0 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    6fc6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6fc8:	211f      	movs	r1, #31
    6fca:	438a      	bics	r2, r1
    6fcc:	4313      	orrs	r3, r2
    6fce:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6fd0:	4b4b      	ldr	r3, [pc, #300]	; (7100 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    6fd2:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6fd4:	019b      	lsls	r3, r3, #6
    6fd6:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    6fd8:	2b07      	cmp	r3, #7
    6fda:	d100      	bne.n	6fde <usb_init+0xc6>
    6fdc:	e07a      	b.n	70d4 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    6fde:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6fe0:	031b      	lsls	r3, r3, #12
    6fe2:	4949      	ldr	r1, [pc, #292]	; (7108 <usb_init+0x1f0>)
    6fe4:	400a      	ands	r2, r1
    6fe6:	4313      	orrs	r3, r2
    6fe8:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6fea:	7832      	ldrb	r2, [r6, #0]
    6fec:	7829      	ldrb	r1, [r5, #0]
    6fee:	01d2      	lsls	r2, r2, #7
    6ff0:	237f      	movs	r3, #127	; 0x7f
    6ff2:	400b      	ands	r3, r1
    6ff4:	4313      	orrs	r3, r2
    6ff6:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6ff8:	7871      	ldrb	r1, [r6, #1]
    6ffa:	782b      	ldrb	r3, [r5, #0]
    6ffc:	2201      	movs	r2, #1
    6ffe:	400a      	ands	r2, r1
    7000:	0092      	lsls	r2, r2, #2
    7002:	2104      	movs	r1, #4
    7004:	438b      	bics	r3, r1
    7006:	4313      	orrs	r3, r2
    7008:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    700a:	4b40      	ldr	r3, [pc, #256]	; (710c <usb_init+0x1f4>)
    700c:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    700e:	78f3      	ldrb	r3, [r6, #3]
    7010:	2b01      	cmp	r3, #1
    7012:	d061      	beq.n	70d8 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    7014:	2b00      	cmp	r3, #0
    7016:	d106      	bne.n	7026 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    7018:	6822      	ldr	r2, [r4, #0]
    701a:	8913      	ldrh	r3, [r2, #8]
    701c:	210c      	movs	r1, #12
    701e:	438b      	bics	r3, r1
    7020:	2104      	movs	r1, #4
    7022:	430b      	orrs	r3, r1
    7024:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    7026:	2280      	movs	r2, #128	; 0x80
    7028:	0052      	lsls	r2, r2, #1
    702a:	2100      	movs	r1, #0
    702c:	4837      	ldr	r0, [pc, #220]	; (710c <usb_init+0x1f4>)
    702e:	4b38      	ldr	r3, [pc, #224]	; (7110 <usb_init+0x1f8>)
    7030:	4798      	blx	r3
    7032:	1d23      	adds	r3, r4, #4
    7034:	0021      	movs	r1, r4
    7036:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    7038:	2200      	movs	r2, #0
    703a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    703c:	428b      	cmp	r3, r1
    703e:	d1fc      	bne.n	703a <usb_init+0x122>
    7040:	0021      	movs	r1, r4
    7042:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    7044:	2200      	movs	r2, #0
    7046:	601a      	str	r2, [r3, #0]
    7048:	605a      	str	r2, [r3, #4]
    704a:	609a      	str	r2, [r3, #8]
    704c:	60da      	str	r2, [r3, #12]
    704e:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7050:	428b      	cmp	r3, r1
    7052:	d1f8      	bne.n	7046 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    7054:	2300      	movs	r3, #0
    7056:	22a4      	movs	r2, #164	; 0xa4
    7058:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    705a:	3201      	adds	r2, #1
    705c:	54a3      	strb	r3, [r4, r2]
    705e:	0023      	movs	r3, r4
    7060:	33a6      	adds	r3, #166	; 0xa6
    7062:	0021      	movs	r1, r4
    7064:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    7066:	2200      	movs	r2, #0
    7068:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    706a:	721a      	strb	r2, [r3, #8]
    706c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    706e:	4299      	cmp	r1, r3
    7070:	d1fa      	bne.n	7068 <usb_init+0x150>
    7072:	0023      	movs	r3, r4
    7074:	33b8      	adds	r3, #184	; 0xb8
    7076:	0021      	movs	r1, r4
    7078:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    707a:	2200      	movs	r2, #0
    707c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    707e:	428b      	cmp	r3, r1
    7080:	d1fc      	bne.n	707c <usb_init+0x164>
    7082:	0021      	movs	r1, r4
    7084:	3155      	adds	r1, #85	; 0x55
    7086:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    7088:	2200      	movs	r2, #0
    708a:	601a      	str	r2, [r3, #0]
    708c:	605a      	str	r2, [r3, #4]
    708e:	609a      	str	r2, [r3, #8]
    7090:	60da      	str	r2, [r3, #12]
    7092:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    7094:	428b      	cmp	r3, r1
    7096:	d1f8      	bne.n	708a <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    7098:	2300      	movs	r3, #0
    709a:	22aa      	movs	r2, #170	; 0xaa
    709c:	0052      	lsls	r2, r2, #1
    709e:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    70a0:	3202      	adds	r2, #2
    70a2:	52a3      	strh	r3, [r4, r2]
    70a4:	0023      	movs	r3, r4
    70a6:	3359      	adds	r3, #89	; 0x59
    70a8:	33ff      	adds	r3, #255	; 0xff
    70aa:	3461      	adds	r4, #97	; 0x61
    70ac:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    70ae:	2200      	movs	r2, #0
    70b0:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    70b2:	721a      	strb	r2, [r3, #8]
    70b4:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    70b6:	42a3      	cmp	r3, r4
    70b8:	d1fa      	bne.n	70b0 <usb_init+0x198>
    70ba:	2280      	movs	r2, #128	; 0x80
    70bc:	4b15      	ldr	r3, [pc, #84]	; (7114 <usb_init+0x1fc>)
    70be:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    70c0:	2000      	movs	r0, #0
    70c2:	b003      	add	sp, #12
    70c4:	bc0c      	pop	{r2, r3}
    70c6:	4690      	mov	r8, r2
    70c8:	4699      	mov	r9, r3
    70ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    70cc:	3b1a      	subs	r3, #26
    70ce:	e76d      	b.n	6fac <usb_init+0x94>
		pad_transp = 29;
    70d0:	3b02      	subs	r3, #2
    70d2:	e778      	b.n	6fc6 <usb_init+0xae>
		pad_trim = 3;
    70d4:	3b04      	subs	r3, #4
    70d6:	e782      	b.n	6fde <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    70d8:	6822      	ldr	r2, [r4, #0]
    70da:	8913      	ldrh	r3, [r2, #8]
    70dc:	3108      	adds	r1, #8
    70de:	438b      	bics	r3, r1
    70e0:	8113      	strh	r3, [r2, #8]
    70e2:	e7a0      	b.n	7026 <usb_init+0x10e>
    70e4:	200002e8 	.word	0x200002e8
    70e8:	200002d8 	.word	0x200002d8
    70ec:	40000400 	.word	0x40000400
    70f0:	00008c4d 	.word	0x00008c4d
    70f4:	00008b55 	.word	0x00008b55
    70f8:	00008ac9 	.word	0x00008ac9
    70fc:	41005000 	.word	0x41005000
    7100:	00806024 	.word	0x00806024
    7104:	fffff83f 	.word	0xfffff83f
    7108:	ffff8fff 	.word	0xffff8fff
    710c:	20001694 	.word	0x20001694
    7110:	000093bf 	.word	0x000093bf
    7114:	e000e100 	.word	0xe000e100

00007118 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7118:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    711a:	2a00      	cmp	r2, #0
    711c:	d001      	beq.n	7122 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    711e:	0018      	movs	r0, r3
    7120:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    7122:	008b      	lsls	r3, r1, #2
    7124:	4a06      	ldr	r2, [pc, #24]	; (7140 <extint_register_callback+0x28>)
    7126:	589b      	ldr	r3, [r3, r2]
    7128:	2b00      	cmp	r3, #0
    712a:	d003      	beq.n	7134 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    712c:	4283      	cmp	r3, r0
    712e:	d005      	beq.n	713c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    7130:	231d      	movs	r3, #29
    7132:	e7f4      	b.n	711e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    7134:	0089      	lsls	r1, r1, #2
    7136:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    7138:	2300      	movs	r3, #0
    713a:	e7f0      	b.n	711e <extint_register_callback+0x6>
		return STATUS_OK;
    713c:	2300      	movs	r3, #0
    713e:	e7ee      	b.n	711e <extint_register_callback+0x6>
    7140:	20000344 	.word	0x20000344

00007144 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7144:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7146:	2900      	cmp	r1, #0
    7148:	d001      	beq.n	714e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    714a:	0018      	movs	r0, r3
    714c:	4770      	bx	lr
		return NULL;
    714e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    7150:	281f      	cmp	r0, #31
    7152:	d800      	bhi.n	7156 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    7154:	4a02      	ldr	r2, [pc, #8]	; (7160 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    7156:	2301      	movs	r3, #1
    7158:	4083      	lsls	r3, r0
    715a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    715c:	2300      	movs	r3, #0
    715e:	e7f4      	b.n	714a <extint_chan_enable_callback+0x6>
    7160:	40001800 	.word	0x40001800

00007164 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7164:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7166:	2900      	cmp	r1, #0
    7168:	d001      	beq.n	716e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    716a:	0018      	movs	r0, r3
    716c:	4770      	bx	lr
		return NULL;
    716e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    7170:	281f      	cmp	r0, #31
    7172:	d800      	bhi.n	7176 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    7174:	4a02      	ldr	r2, [pc, #8]	; (7180 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    7176:	2301      	movs	r3, #1
    7178:	4083      	lsls	r3, r0
    717a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    717c:	2300      	movs	r3, #0
    717e:	e7f4      	b.n	716a <extint_chan_disable_callback+0x6>
    7180:	40001800 	.word	0x40001800

00007184 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    7184:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7186:	2200      	movs	r2, #0
    7188:	4b10      	ldr	r3, [pc, #64]	; (71cc <EIC_Handler+0x48>)
    718a:	701a      	strb	r2, [r3, #0]
    718c:	2300      	movs	r3, #0
    718e:	4910      	ldr	r1, [pc, #64]	; (71d0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    7190:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7192:	4e10      	ldr	r6, [pc, #64]	; (71d4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7194:	4c0d      	ldr	r4, [pc, #52]	; (71cc <EIC_Handler+0x48>)
    7196:	e00a      	b.n	71ae <EIC_Handler+0x2a>
		return eics[eic_index];
    7198:	490d      	ldr	r1, [pc, #52]	; (71d0 <EIC_Handler+0x4c>)
    719a:	e008      	b.n	71ae <EIC_Handler+0x2a>
    719c:	7823      	ldrb	r3, [r4, #0]
    719e:	3301      	adds	r3, #1
    71a0:	b2db      	uxtb	r3, r3
    71a2:	7023      	strb	r3, [r4, #0]
    71a4:	2b0f      	cmp	r3, #15
    71a6:	d810      	bhi.n	71ca <EIC_Handler+0x46>
		return NULL;
    71a8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    71aa:	2b1f      	cmp	r3, #31
    71ac:	d9f4      	bls.n	7198 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    71ae:	0028      	movs	r0, r5
    71b0:	4018      	ands	r0, r3
    71b2:	2201      	movs	r2, #1
    71b4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    71b6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    71b8:	4210      	tst	r0, r2
    71ba:	d0ef      	beq.n	719c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    71bc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    71be:	009b      	lsls	r3, r3, #2
    71c0:	599b      	ldr	r3, [r3, r6]
    71c2:	2b00      	cmp	r3, #0
    71c4:	d0ea      	beq.n	719c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    71c6:	4798      	blx	r3
    71c8:	e7e8      	b.n	719c <EIC_Handler+0x18>
			}
		}
	}
}
    71ca:	bd70      	pop	{r4, r5, r6, pc}
    71cc:	20001794 	.word	0x20001794
    71d0:	40001800 	.word	0x40001800
    71d4:	20000344 	.word	0x20000344

000071d8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    71d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71da:	46de      	mov	lr, fp
    71dc:	4657      	mov	r7, sl
    71de:	464e      	mov	r6, r9
    71e0:	4645      	mov	r5, r8
    71e2:	b5e0      	push	{r5, r6, r7, lr}
    71e4:	b087      	sub	sp, #28
    71e6:	4680      	mov	r8, r0
    71e8:	9104      	str	r1, [sp, #16]
    71ea:	0016      	movs	r6, r2
    71ec:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    71ee:	2200      	movs	r2, #0
    71f0:	2300      	movs	r3, #0
    71f2:	2100      	movs	r1, #0
    71f4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    71f6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    71f8:	2001      	movs	r0, #1
    71fa:	0021      	movs	r1, r4
    71fc:	9600      	str	r6, [sp, #0]
    71fe:	9701      	str	r7, [sp, #4]
    7200:	465c      	mov	r4, fp
    7202:	9403      	str	r4, [sp, #12]
    7204:	4644      	mov	r4, r8
    7206:	9405      	str	r4, [sp, #20]
    7208:	e013      	b.n	7232 <long_division+0x5a>
    720a:	2420      	movs	r4, #32
    720c:	1a64      	subs	r4, r4, r1
    720e:	0005      	movs	r5, r0
    7210:	40e5      	lsrs	r5, r4
    7212:	46a8      	mov	r8, r5
    7214:	e014      	b.n	7240 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    7216:	9c00      	ldr	r4, [sp, #0]
    7218:	9d01      	ldr	r5, [sp, #4]
    721a:	1b12      	subs	r2, r2, r4
    721c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    721e:	465c      	mov	r4, fp
    7220:	464d      	mov	r5, r9
    7222:	432c      	orrs	r4, r5
    7224:	46a3      	mov	fp, r4
    7226:	9c03      	ldr	r4, [sp, #12]
    7228:	4645      	mov	r5, r8
    722a:	432c      	orrs	r4, r5
    722c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    722e:	3901      	subs	r1, #1
    7230:	d325      	bcc.n	727e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    7232:	2420      	movs	r4, #32
    7234:	4264      	negs	r4, r4
    7236:	190c      	adds	r4, r1, r4
    7238:	d4e7      	bmi.n	720a <long_division+0x32>
    723a:	0005      	movs	r5, r0
    723c:	40a5      	lsls	r5, r4
    723e:	46a8      	mov	r8, r5
    7240:	0004      	movs	r4, r0
    7242:	408c      	lsls	r4, r1
    7244:	46a1      	mov	r9, r4
		r = r << 1;
    7246:	1892      	adds	r2, r2, r2
    7248:	415b      	adcs	r3, r3
    724a:	0014      	movs	r4, r2
    724c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    724e:	9e05      	ldr	r6, [sp, #20]
    7250:	464f      	mov	r7, r9
    7252:	403e      	ands	r6, r7
    7254:	46b4      	mov	ip, r6
    7256:	9e04      	ldr	r6, [sp, #16]
    7258:	4647      	mov	r7, r8
    725a:	403e      	ands	r6, r7
    725c:	46b2      	mov	sl, r6
    725e:	4666      	mov	r6, ip
    7260:	4657      	mov	r7, sl
    7262:	433e      	orrs	r6, r7
    7264:	d003      	beq.n	726e <long_division+0x96>
			r |= 0x01;
    7266:	0006      	movs	r6, r0
    7268:	4326      	orrs	r6, r4
    726a:	0032      	movs	r2, r6
    726c:	002b      	movs	r3, r5
		if (r >= d) {
    726e:	9c00      	ldr	r4, [sp, #0]
    7270:	9d01      	ldr	r5, [sp, #4]
    7272:	429d      	cmp	r5, r3
    7274:	d8db      	bhi.n	722e <long_division+0x56>
    7276:	d1ce      	bne.n	7216 <long_division+0x3e>
    7278:	4294      	cmp	r4, r2
    727a:	d8d8      	bhi.n	722e <long_division+0x56>
    727c:	e7cb      	b.n	7216 <long_division+0x3e>
    727e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7280:	4658      	mov	r0, fp
    7282:	0019      	movs	r1, r3
    7284:	b007      	add	sp, #28
    7286:	bc3c      	pop	{r2, r3, r4, r5}
    7288:	4690      	mov	r8, r2
    728a:	4699      	mov	r9, r3
    728c:	46a2      	mov	sl, r4
    728e:	46ab      	mov	fp, r5
    7290:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007292 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7292:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7294:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7296:	2340      	movs	r3, #64	; 0x40
    7298:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    729a:	4281      	cmp	r1, r0
    729c:	d202      	bcs.n	72a4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    729e:	0018      	movs	r0, r3
    72a0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    72a2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    72a4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    72a6:	1c63      	adds	r3, r4, #1
    72a8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    72aa:	4288      	cmp	r0, r1
    72ac:	d9f9      	bls.n	72a2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    72ae:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    72b0:	2cff      	cmp	r4, #255	; 0xff
    72b2:	d8f4      	bhi.n	729e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    72b4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    72b6:	2300      	movs	r3, #0
    72b8:	e7f1      	b.n	729e <_sercom_get_sync_baud_val+0xc>
	...

000072bc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    72bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72be:	b083      	sub	sp, #12
    72c0:	000f      	movs	r7, r1
    72c2:	0016      	movs	r6, r2
    72c4:	aa08      	add	r2, sp, #32
    72c6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    72c8:	0004      	movs	r4, r0
    72ca:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    72cc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    72ce:	42bc      	cmp	r4, r7
    72d0:	d902      	bls.n	72d8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    72d2:	0010      	movs	r0, r2
    72d4:	b003      	add	sp, #12
    72d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    72d8:	2b00      	cmp	r3, #0
    72da:	d114      	bne.n	7306 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    72dc:	0002      	movs	r2, r0
    72de:	0008      	movs	r0, r1
    72e0:	2100      	movs	r1, #0
    72e2:	4c19      	ldr	r4, [pc, #100]	; (7348 <_sercom_get_async_baud_val+0x8c>)
    72e4:	47a0      	blx	r4
    72e6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    72e8:	003a      	movs	r2, r7
    72ea:	2300      	movs	r3, #0
    72ec:	2000      	movs	r0, #0
    72ee:	4c17      	ldr	r4, [pc, #92]	; (734c <_sercom_get_async_baud_val+0x90>)
    72f0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    72f2:	2200      	movs	r2, #0
    72f4:	2301      	movs	r3, #1
    72f6:	1a12      	subs	r2, r2, r0
    72f8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    72fa:	0c12      	lsrs	r2, r2, #16
    72fc:	041b      	lsls	r3, r3, #16
    72fe:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    7300:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    7302:	2200      	movs	r2, #0
    7304:	e7e5      	b.n	72d2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    7306:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7308:	2b01      	cmp	r3, #1
    730a:	d1f9      	bne.n	7300 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    730c:	000a      	movs	r2, r1
    730e:	2300      	movs	r3, #0
    7310:	2100      	movs	r1, #0
    7312:	4c0d      	ldr	r4, [pc, #52]	; (7348 <_sercom_get_async_baud_val+0x8c>)
    7314:	47a0      	blx	r4
    7316:	0002      	movs	r2, r0
    7318:	000b      	movs	r3, r1
    731a:	9200      	str	r2, [sp, #0]
    731c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    731e:	0038      	movs	r0, r7
    7320:	2100      	movs	r1, #0
    7322:	4c0a      	ldr	r4, [pc, #40]	; (734c <_sercom_get_async_baud_val+0x90>)
    7324:	47a0      	blx	r4
    7326:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    7328:	2380      	movs	r3, #128	; 0x80
    732a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    732c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    732e:	4298      	cmp	r0, r3
    7330:	d8cf      	bhi.n	72d2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    7332:	0f79      	lsrs	r1, r7, #29
    7334:	00f8      	lsls	r0, r7, #3
    7336:	9a00      	ldr	r2, [sp, #0]
    7338:	9b01      	ldr	r3, [sp, #4]
    733a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    733c:	00ea      	lsls	r2, r5, #3
    733e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    7340:	b2d2      	uxtb	r2, r2
    7342:	0352      	lsls	r2, r2, #13
    7344:	432a      	orrs	r2, r5
    7346:	e7db      	b.n	7300 <_sercom_get_async_baud_val+0x44>
    7348:	00009179 	.word	0x00009179
    734c:	000071d9 	.word	0x000071d9

00007350 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7350:	b510      	push	{r4, lr}
    7352:	b082      	sub	sp, #8
    7354:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7356:	4b0e      	ldr	r3, [pc, #56]	; (7390 <sercom_set_gclk_generator+0x40>)
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d007      	beq.n	736e <sercom_set_gclk_generator+0x1e>
    735e:	2900      	cmp	r1, #0
    7360:	d105      	bne.n	736e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    7362:	4b0b      	ldr	r3, [pc, #44]	; (7390 <sercom_set_gclk_generator+0x40>)
    7364:	785b      	ldrb	r3, [r3, #1]
    7366:	4283      	cmp	r3, r0
    7368:	d010      	beq.n	738c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    736a:	201d      	movs	r0, #29
    736c:	e00c      	b.n	7388 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    736e:	a901      	add	r1, sp, #4
    7370:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7372:	2013      	movs	r0, #19
    7374:	4b07      	ldr	r3, [pc, #28]	; (7394 <sercom_set_gclk_generator+0x44>)
    7376:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7378:	2013      	movs	r0, #19
    737a:	4b07      	ldr	r3, [pc, #28]	; (7398 <sercom_set_gclk_generator+0x48>)
    737c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    737e:	4b04      	ldr	r3, [pc, #16]	; (7390 <sercom_set_gclk_generator+0x40>)
    7380:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    7382:	2201      	movs	r2, #1
    7384:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7386:	2000      	movs	r0, #0
}
    7388:	b002      	add	sp, #8
    738a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    738c:	2000      	movs	r0, #0
    738e:	e7fb      	b.n	7388 <sercom_set_gclk_generator+0x38>
    7390:	200002f4 	.word	0x200002f4
    7394:	00008b55 	.word	0x00008b55
    7398:	00008ac9 	.word	0x00008ac9

0000739c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    739c:	4b40      	ldr	r3, [pc, #256]	; (74a0 <_sercom_get_default_pad+0x104>)
    739e:	4298      	cmp	r0, r3
    73a0:	d031      	beq.n	7406 <_sercom_get_default_pad+0x6a>
    73a2:	d90a      	bls.n	73ba <_sercom_get_default_pad+0x1e>
    73a4:	4b3f      	ldr	r3, [pc, #252]	; (74a4 <_sercom_get_default_pad+0x108>)
    73a6:	4298      	cmp	r0, r3
    73a8:	d04d      	beq.n	7446 <_sercom_get_default_pad+0xaa>
    73aa:	4b3f      	ldr	r3, [pc, #252]	; (74a8 <_sercom_get_default_pad+0x10c>)
    73ac:	4298      	cmp	r0, r3
    73ae:	d05a      	beq.n	7466 <_sercom_get_default_pad+0xca>
    73b0:	4b3e      	ldr	r3, [pc, #248]	; (74ac <_sercom_get_default_pad+0x110>)
    73b2:	4298      	cmp	r0, r3
    73b4:	d037      	beq.n	7426 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    73b6:	2000      	movs	r0, #0
}
    73b8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    73ba:	4b3d      	ldr	r3, [pc, #244]	; (74b0 <_sercom_get_default_pad+0x114>)
    73bc:	4298      	cmp	r0, r3
    73be:	d00c      	beq.n	73da <_sercom_get_default_pad+0x3e>
    73c0:	4b3c      	ldr	r3, [pc, #240]	; (74b4 <_sercom_get_default_pad+0x118>)
    73c2:	4298      	cmp	r0, r3
    73c4:	d1f7      	bne.n	73b6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73c6:	2901      	cmp	r1, #1
    73c8:	d017      	beq.n	73fa <_sercom_get_default_pad+0x5e>
    73ca:	2900      	cmp	r1, #0
    73cc:	d05d      	beq.n	748a <_sercom_get_default_pad+0xee>
    73ce:	2902      	cmp	r1, #2
    73d0:	d015      	beq.n	73fe <_sercom_get_default_pad+0x62>
    73d2:	2903      	cmp	r1, #3
    73d4:	d015      	beq.n	7402 <_sercom_get_default_pad+0x66>
	return 0;
    73d6:	2000      	movs	r0, #0
    73d8:	e7ee      	b.n	73b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73da:	2901      	cmp	r1, #1
    73dc:	d007      	beq.n	73ee <_sercom_get_default_pad+0x52>
    73de:	2900      	cmp	r1, #0
    73e0:	d051      	beq.n	7486 <_sercom_get_default_pad+0xea>
    73e2:	2902      	cmp	r1, #2
    73e4:	d005      	beq.n	73f2 <_sercom_get_default_pad+0x56>
    73e6:	2903      	cmp	r1, #3
    73e8:	d005      	beq.n	73f6 <_sercom_get_default_pad+0x5a>
	return 0;
    73ea:	2000      	movs	r0, #0
    73ec:	e7e4      	b.n	73b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73ee:	4832      	ldr	r0, [pc, #200]	; (74b8 <_sercom_get_default_pad+0x11c>)
    73f0:	e7e2      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    73f2:	4832      	ldr	r0, [pc, #200]	; (74bc <_sercom_get_default_pad+0x120>)
    73f4:	e7e0      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    73f6:	4832      	ldr	r0, [pc, #200]	; (74c0 <_sercom_get_default_pad+0x124>)
    73f8:	e7de      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    73fa:	4832      	ldr	r0, [pc, #200]	; (74c4 <_sercom_get_default_pad+0x128>)
    73fc:	e7dc      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    73fe:	4832      	ldr	r0, [pc, #200]	; (74c8 <_sercom_get_default_pad+0x12c>)
    7400:	e7da      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7402:	4832      	ldr	r0, [pc, #200]	; (74cc <_sercom_get_default_pad+0x130>)
    7404:	e7d8      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7406:	2901      	cmp	r1, #1
    7408:	d007      	beq.n	741a <_sercom_get_default_pad+0x7e>
    740a:	2900      	cmp	r1, #0
    740c:	d03f      	beq.n	748e <_sercom_get_default_pad+0xf2>
    740e:	2902      	cmp	r1, #2
    7410:	d005      	beq.n	741e <_sercom_get_default_pad+0x82>
    7412:	2903      	cmp	r1, #3
    7414:	d005      	beq.n	7422 <_sercom_get_default_pad+0x86>
	return 0;
    7416:	2000      	movs	r0, #0
    7418:	e7ce      	b.n	73b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    741a:	482d      	ldr	r0, [pc, #180]	; (74d0 <_sercom_get_default_pad+0x134>)
    741c:	e7cc      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    741e:	482d      	ldr	r0, [pc, #180]	; (74d4 <_sercom_get_default_pad+0x138>)
    7420:	e7ca      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7422:	482d      	ldr	r0, [pc, #180]	; (74d8 <_sercom_get_default_pad+0x13c>)
    7424:	e7c8      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7426:	2901      	cmp	r1, #1
    7428:	d007      	beq.n	743a <_sercom_get_default_pad+0x9e>
    742a:	2900      	cmp	r1, #0
    742c:	d031      	beq.n	7492 <_sercom_get_default_pad+0xf6>
    742e:	2902      	cmp	r1, #2
    7430:	d005      	beq.n	743e <_sercom_get_default_pad+0xa2>
    7432:	2903      	cmp	r1, #3
    7434:	d005      	beq.n	7442 <_sercom_get_default_pad+0xa6>
	return 0;
    7436:	2000      	movs	r0, #0
    7438:	e7be      	b.n	73b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    743a:	4828      	ldr	r0, [pc, #160]	; (74dc <_sercom_get_default_pad+0x140>)
    743c:	e7bc      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    743e:	4828      	ldr	r0, [pc, #160]	; (74e0 <_sercom_get_default_pad+0x144>)
    7440:	e7ba      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7442:	4828      	ldr	r0, [pc, #160]	; (74e4 <_sercom_get_default_pad+0x148>)
    7444:	e7b8      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7446:	2901      	cmp	r1, #1
    7448:	d007      	beq.n	745a <_sercom_get_default_pad+0xbe>
    744a:	2900      	cmp	r1, #0
    744c:	d023      	beq.n	7496 <_sercom_get_default_pad+0xfa>
    744e:	2902      	cmp	r1, #2
    7450:	d005      	beq.n	745e <_sercom_get_default_pad+0xc2>
    7452:	2903      	cmp	r1, #3
    7454:	d005      	beq.n	7462 <_sercom_get_default_pad+0xc6>
	return 0;
    7456:	2000      	movs	r0, #0
    7458:	e7ae      	b.n	73b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    745a:	4823      	ldr	r0, [pc, #140]	; (74e8 <_sercom_get_default_pad+0x14c>)
    745c:	e7ac      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    745e:	4823      	ldr	r0, [pc, #140]	; (74ec <_sercom_get_default_pad+0x150>)
    7460:	e7aa      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7462:	4823      	ldr	r0, [pc, #140]	; (74f0 <_sercom_get_default_pad+0x154>)
    7464:	e7a8      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7466:	2901      	cmp	r1, #1
    7468:	d007      	beq.n	747a <_sercom_get_default_pad+0xde>
    746a:	2900      	cmp	r1, #0
    746c:	d015      	beq.n	749a <_sercom_get_default_pad+0xfe>
    746e:	2902      	cmp	r1, #2
    7470:	d005      	beq.n	747e <_sercom_get_default_pad+0xe2>
    7472:	2903      	cmp	r1, #3
    7474:	d005      	beq.n	7482 <_sercom_get_default_pad+0xe6>
	return 0;
    7476:	2000      	movs	r0, #0
    7478:	e79e      	b.n	73b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    747a:	481e      	ldr	r0, [pc, #120]	; (74f4 <_sercom_get_default_pad+0x158>)
    747c:	e79c      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    747e:	481e      	ldr	r0, [pc, #120]	; (74f8 <_sercom_get_default_pad+0x15c>)
    7480:	e79a      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7482:	481e      	ldr	r0, [pc, #120]	; (74fc <_sercom_get_default_pad+0x160>)
    7484:	e798      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7486:	481e      	ldr	r0, [pc, #120]	; (7500 <_sercom_get_default_pad+0x164>)
    7488:	e796      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    748a:	2003      	movs	r0, #3
    748c:	e794      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    748e:	481d      	ldr	r0, [pc, #116]	; (7504 <_sercom_get_default_pad+0x168>)
    7490:	e792      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7492:	481d      	ldr	r0, [pc, #116]	; (7508 <_sercom_get_default_pad+0x16c>)
    7494:	e790      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    7496:	481d      	ldr	r0, [pc, #116]	; (750c <_sercom_get_default_pad+0x170>)
    7498:	e78e      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    749a:	481d      	ldr	r0, [pc, #116]	; (7510 <_sercom_get_default_pad+0x174>)
    749c:	e78c      	b.n	73b8 <_sercom_get_default_pad+0x1c>
    749e:	46c0      	nop			; (mov r8, r8)
    74a0:	42001000 	.word	0x42001000
    74a4:	42001800 	.word	0x42001800
    74a8:	42001c00 	.word	0x42001c00
    74ac:	42001400 	.word	0x42001400
    74b0:	42000800 	.word	0x42000800
    74b4:	42000c00 	.word	0x42000c00
    74b8:	00050003 	.word	0x00050003
    74bc:	00060003 	.word	0x00060003
    74c0:	00070003 	.word	0x00070003
    74c4:	00010003 	.word	0x00010003
    74c8:	001e0003 	.word	0x001e0003
    74cc:	001f0003 	.word	0x001f0003
    74d0:	00090003 	.word	0x00090003
    74d4:	000a0003 	.word	0x000a0003
    74d8:	000b0003 	.word	0x000b0003
    74dc:	00110003 	.word	0x00110003
    74e0:	00120003 	.word	0x00120003
    74e4:	00130003 	.word	0x00130003
    74e8:	000d0003 	.word	0x000d0003
    74ec:	000e0003 	.word	0x000e0003
    74f0:	000f0003 	.word	0x000f0003
    74f4:	00170003 	.word	0x00170003
    74f8:	00180003 	.word	0x00180003
    74fc:	00190003 	.word	0x00190003
    7500:	00040003 	.word	0x00040003
    7504:	00080003 	.word	0x00080003
    7508:	00100003 	.word	0x00100003
    750c:	000c0003 	.word	0x000c0003
    7510:	00160003 	.word	0x00160003

00007514 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7514:	b530      	push	{r4, r5, lr}
    7516:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7518:	4b0b      	ldr	r3, [pc, #44]	; (7548 <_sercom_get_sercom_inst_index+0x34>)
    751a:	466a      	mov	r2, sp
    751c:	cb32      	ldmia	r3!, {r1, r4, r5}
    751e:	c232      	stmia	r2!, {r1, r4, r5}
    7520:	cb32      	ldmia	r3!, {r1, r4, r5}
    7522:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7524:	9b00      	ldr	r3, [sp, #0]
    7526:	4283      	cmp	r3, r0
    7528:	d00b      	beq.n	7542 <_sercom_get_sercom_inst_index+0x2e>
    752a:	2301      	movs	r3, #1
    752c:	009a      	lsls	r2, r3, #2
    752e:	4669      	mov	r1, sp
    7530:	5852      	ldr	r2, [r2, r1]
    7532:	4282      	cmp	r2, r0
    7534:	d006      	beq.n	7544 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7536:	3301      	adds	r3, #1
    7538:	2b06      	cmp	r3, #6
    753a:	d1f7      	bne.n	752c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    753c:	2000      	movs	r0, #0
}
    753e:	b007      	add	sp, #28
    7540:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7542:	2300      	movs	r3, #0
			return i;
    7544:	b2d8      	uxtb	r0, r3
    7546:	e7fa      	b.n	753e <_sercom_get_sercom_inst_index+0x2a>
    7548:	0000b064 	.word	0x0000b064

0000754c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    754c:	b570      	push	{r4, r5, r6, lr}
    754e:	b082      	sub	sp, #8
    7550:	0006      	movs	r6, r0
    7552:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7554:	2200      	movs	r2, #0
    7556:	466b      	mov	r3, sp
    7558:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    755a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    755c:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    755e:	2b00      	cmp	r3, #0
    7560:	d1fc      	bne.n	755c <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    7562:	338f      	adds	r3, #143	; 0x8f
    7564:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    7566:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7568:	6823      	ldr	r3, [r4, #0]
    756a:	2202      	movs	r2, #2
    756c:	4393      	bics	r3, r2
    756e:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7570:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    7572:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    7574:	2b00      	cmp	r3, #0
    7576:	d1fc      	bne.n	7572 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7578:	4b12      	ldr	r3, [pc, #72]	; (75c4 <spi_set_baudrate+0x78>)
    757a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    757c:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    757e:	b2c0      	uxtb	r0, r0
    7580:	4b11      	ldr	r3, [pc, #68]	; (75c8 <spi_set_baudrate+0x7c>)
    7582:	4798      	blx	r3
    7584:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    7586:	466b      	mov	r3, sp
    7588:	1d9a      	adds	r2, r3, #6
    758a:	0028      	movs	r0, r5
    758c:	4b0f      	ldr	r3, [pc, #60]	; (75cc <spi_set_baudrate+0x80>)
    758e:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    7590:	2800      	cmp	r0, #0
    7592:	d002      	beq.n	759a <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    7594:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    7596:	b002      	add	sp, #8
    7598:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    759a:	466b      	mov	r3, sp
    759c:	3306      	adds	r3, #6
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    75a2:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    75a4:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    75a6:	2a00      	cmp	r2, #0
    75a8:	d1fc      	bne.n	75a4 <spi_set_baudrate+0x58>
    75aa:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    75ac:	2a00      	cmp	r2, #0
    75ae:	d1fc      	bne.n	75aa <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    75b0:	681a      	ldr	r2, [r3, #0]
    75b2:	2102      	movs	r1, #2
    75b4:	430a      	orrs	r2, r1
    75b6:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    75b8:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    75ba:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    75bc:	2b00      	cmp	r3, #0
    75be:	d1fc      	bne.n	75ba <spi_set_baudrate+0x6e>
    75c0:	e7e9      	b.n	7596 <spi_set_baudrate+0x4a>
    75c2:	46c0      	nop			; (mov r8, r8)
    75c4:	00007515 	.word	0x00007515
    75c8:	00008b71 	.word	0x00008b71
    75cc:	00007293 	.word	0x00007293

000075d0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    75d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    75d2:	46d6      	mov	lr, sl
    75d4:	464f      	mov	r7, r9
    75d6:	b580      	push	{r7, lr}
    75d8:	b08b      	sub	sp, #44	; 0x2c
    75da:	4681      	mov	r9, r0
    75dc:	000f      	movs	r7, r1
    75de:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    75e0:	0003      	movs	r3, r0
    75e2:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    75e4:	680b      	ldr	r3, [r1, #0]
    75e6:	079b      	lsls	r3, r3, #30
    75e8:	d409      	bmi.n	75fe <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    75ea:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    75ec:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    75ee:	07db      	lsls	r3, r3, #31
    75f0:	d400      	bmi.n	75f4 <spi_init+0x24>
    75f2:	e0b1      	b.n	7758 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    75f4:	b00b      	add	sp, #44	; 0x2c
    75f6:	bc0c      	pop	{r2, r3}
    75f8:	4691      	mov	r9, r2
    75fa:	469a      	mov	sl, r3
    75fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    75fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7600:	9305      	str	r3, [sp, #20]
    7602:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7604:	9306      	str	r3, [sp, #24]
    7606:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7608:	9307      	str	r3, [sp, #28]
    760a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    760c:	9308      	str	r3, [sp, #32]
    760e:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7610:	ab05      	add	r3, sp, #20
    7612:	9301      	str	r3, [sp, #4]
    7614:	e00a      	b.n	762c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7616:	0038      	movs	r0, r7
    7618:	4baf      	ldr	r3, [pc, #700]	; (78d8 <spi_init+0x308>)
    761a:	4798      	blx	r3
    761c:	e00c      	b.n	7638 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    761e:	230f      	movs	r3, #15
    7620:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    7622:	4281      	cmp	r1, r0
    7624:	d12d      	bne.n	7682 <spi_init+0xb2>
    7626:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7628:	2e04      	cmp	r6, #4
    762a:	d02f      	beq.n	768c <spi_init+0xbc>
    762c:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    762e:	00b3      	lsls	r3, r6, #2
    7630:	9a01      	ldr	r2, [sp, #4]
    7632:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    7634:	2800      	cmp	r0, #0
    7636:	d0ee      	beq.n	7616 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    7638:	1c43      	adds	r3, r0, #1
    763a:	d0f4      	beq.n	7626 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    763c:	0401      	lsls	r1, r0, #16
    763e:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    7640:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    7642:	b2c3      	uxtb	r3, r0
    7644:	469c      	mov	ip, r3
		return NULL;
    7646:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7648:	0602      	lsls	r2, r0, #24
    764a:	d405      	bmi.n	7658 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    764c:	4663      	mov	r3, ip
    764e:	095b      	lsrs	r3, r3, #5
    7650:	01db      	lsls	r3, r3, #7
    7652:	4aa2      	ldr	r2, [pc, #648]	; (78dc <spi_init+0x30c>)
    7654:	4692      	mov	sl, r2
    7656:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    7658:	221f      	movs	r2, #31
    765a:	4660      	mov	r0, ip
    765c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    765e:	1898      	adds	r0, r3, r2
    7660:	3040      	adds	r0, #64	; 0x40
    7662:	7800      	ldrb	r0, [r0, #0]
    7664:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    7666:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7668:	4655      	mov	r5, sl
    766a:	07ed      	lsls	r5, r5, #31
    766c:	d5d9      	bpl.n	7622 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    766e:	0852      	lsrs	r2, r2, #1
    7670:	189b      	adds	r3, r3, r2
    7672:	3330      	adds	r3, #48	; 0x30
    7674:	7818      	ldrb	r0, [r3, #0]
    7676:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    7678:	4663      	mov	r3, ip
    767a:	07db      	lsls	r3, r3, #31
    767c:	d5cf      	bpl.n	761e <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    767e:	0900      	lsrs	r0, r0, #4
    7680:	e7cf      	b.n	7622 <spi_init+0x52>
			module->hw = NULL;
    7682:	2300      	movs	r3, #0
    7684:	464a      	mov	r2, r9
    7686:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    7688:	201c      	movs	r0, #28
    768a:	e7b3      	b.n	75f4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    768c:	2013      	movs	r0, #19
    768e:	4b94      	ldr	r3, [pc, #592]	; (78e0 <spi_init+0x310>)
    7690:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7692:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    7694:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    7696:	2a01      	cmp	r2, #1
    7698:	d016      	beq.n	76c8 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    769a:	7821      	ldrb	r1, [r4, #0]
    769c:	2900      	cmp	r1, #0
    769e:	d127      	bne.n	76f0 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    76a0:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    76a2:	7fe2      	ldrb	r2, [r4, #31]
    76a4:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    76a6:	7fa0      	ldrb	r0, [r4, #30]
    76a8:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    76aa:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    76ac:	429a      	cmp	r2, r3
    76ae:	d1a1      	bne.n	75f4 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    76b0:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    76b2:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    76b4:	3004      	adds	r0, #4
    76b6:	5c20      	ldrb	r0, [r4, r0]
    76b8:	2800      	cmp	r0, #0
    76ba:	d001      	beq.n	76c0 <spi_init+0xf0>
    76bc:	2040      	movs	r0, #64	; 0x40
    76be:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    76c0:	2008      	movs	r0, #8
    76c2:	4303      	orrs	r3, r0
    76c4:	431d      	orrs	r5, r3
    76c6:	e014      	b.n	76f2 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    76c8:	aa04      	add	r2, sp, #16
    76ca:	0001      	movs	r1, r0
    76cc:	69a0      	ldr	r0, [r4, #24]
    76ce:	4b85      	ldr	r3, [pc, #532]	; (78e4 <spi_init+0x314>)
    76d0:	4798      	blx	r3
    76d2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    76d4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    76d6:	2b00      	cmp	r3, #0
    76d8:	d000      	beq.n	76dc <spi_init+0x10c>
    76da:	e78b      	b.n	75f4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    76dc:	7b3b      	ldrb	r3, [r7, #12]
    76de:	b2db      	uxtb	r3, r3
    76e0:	aa04      	add	r2, sp, #16
    76e2:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    76e4:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    76e6:	429a      	cmp	r2, r3
    76e8:	d000      	beq.n	76ec <spi_init+0x11c>
    76ea:	e783      	b.n	75f4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    76ec:	350c      	adds	r5, #12
    76ee:	e7d4      	b.n	769a <spi_init+0xca>
	uint32_t ctrlb = 0;
    76f0:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    76f2:	6863      	ldr	r3, [r4, #4]
    76f4:	68a0      	ldr	r0, [r4, #8]
    76f6:	4303      	orrs	r3, r0
    76f8:	68e0      	ldr	r0, [r4, #12]
    76fa:	4303      	orrs	r3, r0
    76fc:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    76fe:	7c20      	ldrb	r0, [r4, #16]
    7700:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    7702:	7c60      	ldrb	r0, [r4, #17]
    7704:	2800      	cmp	r0, #0
    7706:	d001      	beq.n	770c <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7708:	2080      	movs	r0, #128	; 0x80
    770a:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    770c:	7ca0      	ldrb	r0, [r4, #18]
    770e:	2800      	cmp	r0, #0
    7710:	d002      	beq.n	7718 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7712:	2080      	movs	r0, #128	; 0x80
    7714:	0280      	lsls	r0, r0, #10
    7716:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    7718:	7ce0      	ldrb	r0, [r4, #19]
    771a:	2800      	cmp	r0, #0
    771c:	d002      	beq.n	7724 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    771e:	2080      	movs	r0, #128	; 0x80
    7720:	0080      	lsls	r0, r0, #2
    7722:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    7724:	7d20      	ldrb	r0, [r4, #20]
    7726:	2800      	cmp	r0, #0
    7728:	d002      	beq.n	7730 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    772a:	2080      	movs	r0, #128	; 0x80
    772c:	0180      	lsls	r0, r0, #6
    772e:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    7730:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    7732:	2502      	movs	r5, #2
    7734:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    7736:	4283      	cmp	r3, r0
    7738:	d004      	beq.n	7744 <spi_init+0x174>
	module->hw = NULL;
    773a:	2300      	movs	r3, #0
    773c:	464a      	mov	r2, r9
    773e:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    7740:	201c      	movs	r0, #28
    7742:	e757      	b.n	75f4 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    7744:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    7746:	4293      	cmp	r3, r2
    7748:	d1f7      	bne.n	773a <spi_init+0x16a>
		module->mode           = config->mode;
    774a:	464b      	mov	r3, r9
    774c:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    774e:	7c23      	ldrb	r3, [r4, #16]
    7750:	464a      	mov	r2, r9
    7752:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    7754:	2000      	movs	r0, #0
    7756:	e74d      	b.n	75f4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7758:	0008      	movs	r0, r1
    775a:	4b63      	ldr	r3, [pc, #396]	; (78e8 <spi_init+0x318>)
    775c:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    775e:	4a63      	ldr	r2, [pc, #396]	; (78ec <spi_init+0x31c>)
    7760:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7762:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7764:	2301      	movs	r3, #1
    7766:	40ab      	lsls	r3, r5
    7768:	430b      	orrs	r3, r1
    776a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    776c:	a909      	add	r1, sp, #36	; 0x24
    776e:	2624      	movs	r6, #36	; 0x24
    7770:	5da3      	ldrb	r3, [r4, r6]
    7772:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7774:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7776:	b2c5      	uxtb	r5, r0
    7778:	0028      	movs	r0, r5
    777a:	4b5d      	ldr	r3, [pc, #372]	; (78f0 <spi_init+0x320>)
    777c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    777e:	0028      	movs	r0, r5
    7780:	4b5c      	ldr	r3, [pc, #368]	; (78f4 <spi_init+0x324>)
    7782:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7784:	5da0      	ldrb	r0, [r4, r6]
    7786:	2100      	movs	r1, #0
    7788:	4b5b      	ldr	r3, [pc, #364]	; (78f8 <spi_init+0x328>)
    778a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    778c:	7823      	ldrb	r3, [r4, #0]
    778e:	2b01      	cmp	r3, #1
    7790:	d020      	beq.n	77d4 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    7792:	7823      	ldrb	r3, [r4, #0]
    7794:	2b00      	cmp	r3, #0
    7796:	d103      	bne.n	77a0 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7798:	683b      	ldr	r3, [r7, #0]
    779a:	2208      	movs	r2, #8
    779c:	4313      	orrs	r3, r2
    779e:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    77a0:	464b      	mov	r3, r9
    77a2:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    77a4:	ab04      	add	r3, sp, #16
    77a6:	2280      	movs	r2, #128	; 0x80
    77a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    77aa:	2200      	movs	r2, #0
    77ac:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    77ae:	2101      	movs	r1, #1
    77b0:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    77b2:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    77b4:	7823      	ldrb	r3, [r4, #0]
    77b6:	2b00      	cmp	r3, #0
    77b8:	d101      	bne.n	77be <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    77ba:	ab04      	add	r3, sp, #16
    77bc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    77be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    77c0:	9305      	str	r3, [sp, #20]
    77c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    77c4:	9306      	str	r3, [sp, #24]
    77c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    77c8:	9307      	str	r3, [sp, #28]
    77ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77cc:	9308      	str	r3, [sp, #32]
    77ce:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    77d0:	ad05      	add	r5, sp, #20
    77d2:	e011      	b.n	77f8 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    77d4:	683b      	ldr	r3, [r7, #0]
    77d6:	220c      	movs	r2, #12
    77d8:	4313      	orrs	r3, r2
    77da:	603b      	str	r3, [r7, #0]
    77dc:	e7d9      	b.n	7792 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    77de:	0030      	movs	r0, r6
    77e0:	4b3d      	ldr	r3, [pc, #244]	; (78d8 <spi_init+0x308>)
    77e2:	4798      	blx	r3
    77e4:	e00d      	b.n	7802 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    77e6:	a904      	add	r1, sp, #16
    77e8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    77ea:	0c00      	lsrs	r0, r0, #16
    77ec:	b2c0      	uxtb	r0, r0
    77ee:	4b43      	ldr	r3, [pc, #268]	; (78fc <spi_init+0x32c>)
    77f0:	4798      	blx	r3
    77f2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    77f4:	2f04      	cmp	r7, #4
    77f6:	d007      	beq.n	7808 <spi_init+0x238>
    77f8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    77fa:	00bb      	lsls	r3, r7, #2
    77fc:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    77fe:	2800      	cmp	r0, #0
    7800:	d0ed      	beq.n	77de <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    7802:	1c43      	adds	r3, r0, #1
    7804:	d1ef      	bne.n	77e6 <spi_init+0x216>
    7806:	e7f4      	b.n	77f2 <spi_init+0x222>
	module->mode             = config->mode;
    7808:	7823      	ldrb	r3, [r4, #0]
    780a:	464a      	mov	r2, r9
    780c:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    780e:	7c23      	ldrb	r3, [r4, #16]
    7810:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    7812:	7ca3      	ldrb	r3, [r4, #18]
    7814:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7816:	7d23      	ldrb	r3, [r4, #20]
    7818:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    781a:	2200      	movs	r2, #0
    781c:	ab02      	add	r3, sp, #8
    781e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7820:	7823      	ldrb	r3, [r4, #0]
    7822:	2b01      	cmp	r3, #1
    7824:	d012      	beq.n	784c <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    7826:	7823      	ldrb	r3, [r4, #0]
    7828:	2b00      	cmp	r3, #0
    782a:	d127      	bne.n	787c <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    782c:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    782e:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    7830:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7832:	7fe1      	ldrb	r1, [r4, #31]
    7834:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7836:	7fa5      	ldrb	r5, [r4, #30]
    7838:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    783a:	4319      	orrs	r1, r3
    783c:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    783e:	2320      	movs	r3, #32
    7840:	5ce3      	ldrb	r3, [r4, r3]
    7842:	2b00      	cmp	r3, #0
    7844:	d01c      	beq.n	7880 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    7846:	2340      	movs	r3, #64	; 0x40
    7848:	431a      	orrs	r2, r3
    784a:	e019      	b.n	7880 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    784c:	464b      	mov	r3, r9
    784e:	6818      	ldr	r0, [r3, #0]
    7850:	4b25      	ldr	r3, [pc, #148]	; (78e8 <spi_init+0x318>)
    7852:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7854:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7856:	b2c0      	uxtb	r0, r0
    7858:	4b21      	ldr	r3, [pc, #132]	; (78e0 <spi_init+0x310>)
    785a:	4798      	blx	r3
    785c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    785e:	ab02      	add	r3, sp, #8
    7860:	1d9a      	adds	r2, r3, #6
    7862:	69a0      	ldr	r0, [r4, #24]
    7864:	4b1f      	ldr	r3, [pc, #124]	; (78e4 <spi_init+0x314>)
    7866:	4798      	blx	r3
    7868:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    786a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    786c:	2b00      	cmp	r3, #0
    786e:	d000      	beq.n	7872 <spi_init+0x2a2>
    7870:	e6c0      	b.n	75f4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    7872:	ab02      	add	r3, sp, #8
    7874:	3306      	adds	r3, #6
    7876:	781b      	ldrb	r3, [r3, #0]
    7878:	7333      	strb	r3, [r6, #12]
    787a:	e7d4      	b.n	7826 <spi_init+0x256>
	uint32_t ctrlb = 0;
    787c:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    787e:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    7880:	6863      	ldr	r3, [r4, #4]
    7882:	68a1      	ldr	r1, [r4, #8]
    7884:	430b      	orrs	r3, r1
    7886:	68e1      	ldr	r1, [r4, #12]
    7888:	430b      	orrs	r3, r1
    788a:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    788c:	7c21      	ldrb	r1, [r4, #16]
    788e:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    7890:	7c61      	ldrb	r1, [r4, #17]
    7892:	2900      	cmp	r1, #0
    7894:	d103      	bne.n	789e <spi_init+0x2ce>
    7896:	491a      	ldr	r1, [pc, #104]	; (7900 <spi_init+0x330>)
    7898:	7889      	ldrb	r1, [r1, #2]
    789a:	0789      	lsls	r1, r1, #30
    789c:	d501      	bpl.n	78a2 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    789e:	2180      	movs	r1, #128	; 0x80
    78a0:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    78a2:	7ca1      	ldrb	r1, [r4, #18]
    78a4:	2900      	cmp	r1, #0
    78a6:	d002      	beq.n	78ae <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    78a8:	2180      	movs	r1, #128	; 0x80
    78aa:	0289      	lsls	r1, r1, #10
    78ac:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    78ae:	7ce1      	ldrb	r1, [r4, #19]
    78b0:	2900      	cmp	r1, #0
    78b2:	d002      	beq.n	78ba <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    78b4:	2180      	movs	r1, #128	; 0x80
    78b6:	0089      	lsls	r1, r1, #2
    78b8:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    78ba:	7d21      	ldrb	r1, [r4, #20]
    78bc:	2900      	cmp	r1, #0
    78be:	d002      	beq.n	78c6 <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    78c0:	2180      	movs	r1, #128	; 0x80
    78c2:	0189      	lsls	r1, r1, #6
    78c4:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    78c6:	6831      	ldr	r1, [r6, #0]
    78c8:	430b      	orrs	r3, r1
    78ca:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    78cc:	6873      	ldr	r3, [r6, #4]
    78ce:	431a      	orrs	r2, r3
    78d0:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    78d2:	2000      	movs	r0, #0
    78d4:	e68e      	b.n	75f4 <spi_init+0x24>
    78d6:	46c0      	nop			; (mov r8, r8)
    78d8:	0000739d 	.word	0x0000739d
    78dc:	41004400 	.word	0x41004400
    78e0:	00008b71 	.word	0x00008b71
    78e4:	00007293 	.word	0x00007293
    78e8:	00007515 	.word	0x00007515
    78ec:	40000400 	.word	0x40000400
    78f0:	00008b55 	.word	0x00008b55
    78f4:	00008ac9 	.word	0x00008ac9
    78f8:	00007351 	.word	0x00007351
    78fc:	00008c4d 	.word	0x00008c4d
    7900:	41002000 	.word	0x41002000

00007904 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7904:	b5f0      	push	{r4, r5, r6, r7, lr}
    7906:	46d6      	mov	lr, sl
    7908:	464f      	mov	r7, r9
    790a:	4646      	mov	r6, r8
    790c:	b5c0      	push	{r6, r7, lr}
    790e:	b082      	sub	sp, #8
    7910:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7912:	2717      	movs	r7, #23
	if (length == 0) {
    7914:	2a00      	cmp	r2, #0
    7916:	d073      	beq.n	7a00 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    7918:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    791a:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    791c:	2900      	cmp	r1, #0
    791e:	d06f      	beq.n	7a00 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7920:	7941      	ldrb	r1, [r0, #5]
    7922:	2900      	cmp	r1, #0
    7924:	d103      	bne.n	792e <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7926:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7928:	7e0c      	ldrb	r4, [r1, #24]
    792a:	07a4      	lsls	r4, r4, #30
    792c:	d40b      	bmi.n	7946 <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    792e:	3a01      	subs	r2, #1
    7930:	b294      	uxth	r4, r2
    7932:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    7934:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    7936:	2102      	movs	r1, #2
    7938:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    793a:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    793c:	05db      	lsls	r3, r3, #23
    793e:	0ddb      	lsrs	r3, r3, #23
    7940:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    7942:	46c4      	mov	ip, r8
    7944:	e037      	b.n	79b6 <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7946:	2402      	movs	r4, #2
    7948:	760c      	strb	r4, [r1, #24]
    794a:	e7f0      	b.n	792e <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    794c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    794e:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    7950:	4233      	tst	r3, r6
    7952:	d0fc      	beq.n	794e <spi_read_buffer_wait+0x4a>
    7954:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    7956:	4233      	tst	r3, r6
    7958:	d009      	beq.n	796e <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    795a:	4653      	mov	r3, sl
    795c:	628b      	str	r3, [r1, #40]	; 0x28
    795e:	e02d      	b.n	79bc <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7960:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    7962:	4649      	mov	r1, r9
    7964:	420b      	tst	r3, r1
    7966:	d138      	bne.n	79da <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7968:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    796a:	4213      	tst	r3, r2
    796c:	d045      	beq.n	79fa <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    796e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7970:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    7972:	4213      	tst	r3, r2
    7974:	d0fc      	beq.n	7970 <spi_read_buffer_wait+0x6c>
    7976:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    7978:	4213      	tst	r3, r2
    797a:	d040      	beq.n	79fe <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    797c:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    797e:	2700      	movs	r7, #0
    7980:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7982:	4213      	tst	r3, r2
    7984:	d002      	beq.n	798c <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7986:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    7988:	231e      	movs	r3, #30
    798a:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    798c:	7983      	ldrb	r3, [r0, #6]
    798e:	2b01      	cmp	r3, #1
    7990:	d027      	beq.n	79e2 <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7992:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7994:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    7996:	9901      	ldr	r1, [sp, #4]
    7998:	2900      	cmp	r1, #0
    799a:	d138      	bne.n	7a0e <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    799c:	1c6f      	adds	r7, r5, #1
    799e:	b2bf      	uxth	r7, r7
    79a0:	4661      	mov	r1, ip
    79a2:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    79a4:	7981      	ldrb	r1, [r0, #6]
    79a6:	2901      	cmp	r1, #1
    79a8:	d01f      	beq.n	79ea <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    79aa:	003d      	movs	r5, r7
	while (length--) {
    79ac:	3c01      	subs	r4, #1
    79ae:	b2a4      	uxth	r4, r4
    79b0:	4918      	ldr	r1, [pc, #96]	; (7a14 <spi_read_buffer_wait+0x110>)
    79b2:	428c      	cmp	r4, r1
    79b4:	d01f      	beq.n	79f6 <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    79b6:	7943      	ldrb	r3, [r0, #5]
    79b8:	2b01      	cmp	r3, #1
    79ba:	d0c7      	beq.n	794c <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    79bc:	7943      	ldrb	r3, [r0, #5]
    79be:	2b00      	cmp	r3, #0
    79c0:	d1d5      	bne.n	796e <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    79c2:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    79c4:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    79c6:	4213      	tst	r3, r2
    79c8:	d1ca      	bne.n	7960 <spi_read_buffer_wait+0x5c>
    79ca:	4b13      	ldr	r3, [pc, #76]	; (7a18 <spi_read_buffer_wait+0x114>)
    79cc:	7e39      	ldrb	r1, [r7, #24]
    79ce:	4211      	tst	r1, r2
    79d0:	d1c6      	bne.n	7960 <spi_read_buffer_wait+0x5c>
    79d2:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    79d4:	2b00      	cmp	r3, #0
    79d6:	d1f9      	bne.n	79cc <spi_read_buffer_wait+0xc8>
    79d8:	e7c2      	b.n	7960 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    79da:	2302      	movs	r3, #2
    79dc:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    79de:	2704      	movs	r7, #4
    79e0:	e00e      	b.n	7a00 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    79e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
    79e4:	05c9      	lsls	r1, r1, #23
    79e6:	0dcb      	lsrs	r3, r1, #23
    79e8:	e7d5      	b.n	7996 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    79ea:	3502      	adds	r5, #2
    79ec:	b2ad      	uxth	r5, r5
    79ee:	0a19      	lsrs	r1, r3, #8
    79f0:	4663      	mov	r3, ip
    79f2:	55d9      	strb	r1, [r3, r7]
    79f4:	e7da      	b.n	79ac <spi_read_buffer_wait+0xa8>
    79f6:	9f01      	ldr	r7, [sp, #4]
    79f8:	e002      	b.n	7a00 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    79fa:	2712      	movs	r7, #18
    79fc:	e000      	b.n	7a00 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    79fe:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    7a00:	0038      	movs	r0, r7
    7a02:	b002      	add	sp, #8
    7a04:	bc1c      	pop	{r2, r3, r4}
    7a06:	4690      	mov	r8, r2
    7a08:	4699      	mov	r9, r3
    7a0a:	46a2      	mov	sl, r4
    7a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a0e:	9f01      	ldr	r7, [sp, #4]
    7a10:	e7f6      	b.n	7a00 <spi_read_buffer_wait+0xfc>
    7a12:	46c0      	nop			; (mov r8, r8)
    7a14:	0000ffff 	.word	0x0000ffff
    7a18:	00002710 	.word	0x00002710

00007a1c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7a1c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7a1e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7a20:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7a22:	2c01      	cmp	r4, #1
    7a24:	d001      	beq.n	7a2a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7a26:	0018      	movs	r0, r3
    7a28:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7a2a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7a2c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7a2e:	2c00      	cmp	r4, #0
    7a30:	d1f9      	bne.n	7a26 <spi_select_slave+0xa>
		if (select) {
    7a32:	2a00      	cmp	r2, #0
    7a34:	d058      	beq.n	7ae8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7a36:	784b      	ldrb	r3, [r1, #1]
    7a38:	2b00      	cmp	r3, #0
    7a3a:	d044      	beq.n	7ac6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7a3c:	6803      	ldr	r3, [r0, #0]
    7a3e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7a40:	07db      	lsls	r3, r3, #31
    7a42:	d410      	bmi.n	7a66 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7a44:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a46:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7a48:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a4a:	2900      	cmp	r1, #0
    7a4c:	d104      	bne.n	7a58 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7a4e:	0953      	lsrs	r3, r2, #5
    7a50:	01db      	lsls	r3, r3, #7
    7a52:	492e      	ldr	r1, [pc, #184]	; (7b0c <spi_select_slave+0xf0>)
    7a54:	468c      	mov	ip, r1
    7a56:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a58:	211f      	movs	r1, #31
    7a5a:	4011      	ands	r1, r2
    7a5c:	2201      	movs	r2, #1
    7a5e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7a60:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7a62:	2305      	movs	r3, #5
    7a64:	e7df      	b.n	7a26 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7a66:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a68:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7a6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a6c:	2c00      	cmp	r4, #0
    7a6e:	d104      	bne.n	7a7a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7a70:	0953      	lsrs	r3, r2, #5
    7a72:	01db      	lsls	r3, r3, #7
    7a74:	4c25      	ldr	r4, [pc, #148]	; (7b0c <spi_select_slave+0xf0>)
    7a76:	46a4      	mov	ip, r4
    7a78:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a7a:	241f      	movs	r4, #31
    7a7c:	4014      	ands	r4, r2
    7a7e:	2201      	movs	r2, #1
    7a80:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7a82:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a84:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7a86:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7a88:	07d2      	lsls	r2, r2, #31
    7a8a:	d501      	bpl.n	7a90 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7a8c:	788a      	ldrb	r2, [r1, #2]
    7a8e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7a90:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7a92:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7a94:	2a00      	cmp	r2, #0
    7a96:	d1c6      	bne.n	7a26 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a98:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7a9a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7a9c:	7e13      	ldrb	r3, [r2, #24]
    7a9e:	420b      	tst	r3, r1
    7aa0:	d0fc      	beq.n	7a9c <spi_select_slave+0x80>
    7aa2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7aa4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7aa6:	0749      	lsls	r1, r1, #29
    7aa8:	d5bd      	bpl.n	7a26 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7aaa:	8b53      	ldrh	r3, [r2, #26]
    7aac:	075b      	lsls	r3, r3, #29
    7aae:	d501      	bpl.n	7ab4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7ab0:	2304      	movs	r3, #4
    7ab2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7ab4:	7983      	ldrb	r3, [r0, #6]
    7ab6:	2b01      	cmp	r3, #1
    7ab8:	d002      	beq.n	7ac0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7aba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7abc:	2300      	movs	r3, #0
    7abe:	e7b2      	b.n	7a26 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7ac0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7ac2:	2300      	movs	r3, #0
    7ac4:	e7af      	b.n	7a26 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7ac6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7ac8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7aca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7acc:	2900      	cmp	r1, #0
    7ace:	d104      	bne.n	7ada <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7ad0:	0953      	lsrs	r3, r2, #5
    7ad2:	01db      	lsls	r3, r3, #7
    7ad4:	490d      	ldr	r1, [pc, #52]	; (7b0c <spi_select_slave+0xf0>)
    7ad6:	468c      	mov	ip, r1
    7ad8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ada:	211f      	movs	r1, #31
    7adc:	4011      	ands	r1, r2
    7ade:	2201      	movs	r2, #1
    7ae0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7ae2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7ae4:	2300      	movs	r3, #0
    7ae6:	e79e      	b.n	7a26 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7ae8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7aea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7aec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7aee:	2900      	cmp	r1, #0
    7af0:	d104      	bne.n	7afc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7af2:	0953      	lsrs	r3, r2, #5
    7af4:	01db      	lsls	r3, r3, #7
    7af6:	4905      	ldr	r1, [pc, #20]	; (7b0c <spi_select_slave+0xf0>)
    7af8:	468c      	mov	ip, r1
    7afa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7afc:	211f      	movs	r1, #31
    7afe:	4011      	ands	r1, r2
    7b00:	2201      	movs	r2, #1
    7b02:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7b04:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7b06:	2300      	movs	r3, #0
    7b08:	e78d      	b.n	7a26 <spi_select_slave+0xa>
    7b0a:	46c0      	nop			; (mov r8, r8)
    7b0c:	41004400 	.word	0x41004400

00007b10 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b12:	46de      	mov	lr, fp
    7b14:	4657      	mov	r7, sl
    7b16:	464e      	mov	r6, r9
    7b18:	4645      	mov	r5, r8
    7b1a:	b5e0      	push	{r5, r6, r7, lr}
    7b1c:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7b1e:	2317      	movs	r3, #23
	if (length == 0) {
    7b20:	2a00      	cmp	r2, #0
    7b22:	d107      	bne.n	7b34 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7b24:	0018      	movs	r0, r3
    7b26:	b003      	add	sp, #12
    7b28:	bc3c      	pop	{r2, r3, r4, r5}
    7b2a:	4690      	mov	r8, r2
    7b2c:	4699      	mov	r9, r3
    7b2e:	46a2      	mov	sl, r4
    7b30:	46ab      	mov	fp, r5
    7b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7b34:	7943      	ldrb	r3, [r0, #5]
    7b36:	2b00      	cmp	r3, #0
    7b38:	d103      	bne.n	7b42 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b3a:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7b3c:	7e1c      	ldrb	r4, [r3, #24]
    7b3e:	07a4      	lsls	r4, r4, #30
    7b40:	d40a      	bmi.n	7b58 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    7b42:	4693      	mov	fp, r2
    7b44:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    7b46:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    7b48:	2502      	movs	r5, #2
    7b4a:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    7b4c:	3502      	adds	r5, #2
    7b4e:	46a8      	mov	r8, r5
    7b50:	3a01      	subs	r2, #1
    7b52:	b292      	uxth	r2, r2
    7b54:	468a      	mov	sl, r1
    7b56:	e023      	b.n	7ba0 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7b58:	2402      	movs	r4, #2
    7b5a:	761c      	strb	r4, [r3, #24]
    7b5c:	e7f1      	b.n	7b42 <spi_write_buffer_wait+0x32>
    7b5e:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    7b60:	4661      	mov	r1, ip
    7b62:	420d      	tst	r5, r1
    7b64:	d12e      	bne.n	7bc4 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b66:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    7b68:	421d      	tst	r5, r3
    7b6a:	d100      	bne.n	7b6e <spi_write_buffer_wait+0x5e>
    7b6c:	e0c2      	b.n	7cf4 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b6e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b70:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    7b72:	421d      	tst	r5, r3
    7b74:	d0fc      	beq.n	7b70 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    7b76:	1c67      	adds	r7, r4, #1
    7b78:	b2bf      	uxth	r7, r7
    7b7a:	4651      	mov	r1, sl
    7b7c:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7b7e:	7981      	ldrb	r1, [r0, #6]
    7b80:	2901      	cmp	r1, #1
    7b82:	d023      	beq.n	7bcc <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    7b84:	b2ad      	uxth	r5, r5
    7b86:	003c      	movs	r4, r7
    7b88:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7b8a:	421f      	tst	r7, r3
    7b8c:	d002      	beq.n	7b94 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7b8e:	05ed      	lsls	r5, r5, #23
    7b90:	0ded      	lsrs	r5, r5, #23
    7b92:	62b5      	str	r5, [r6, #40]	; 0x28
    7b94:	1e55      	subs	r5, r2, #1
    7b96:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    7b98:	79c6      	ldrb	r6, [r0, #7]
    7b9a:	2e00      	cmp	r6, #0
    7b9c:	d11d      	bne.n	7bda <spi_write_buffer_wait+0xca>
    7b9e:	002a      	movs	r2, r5
	while (length--) {
    7ba0:	4d59      	ldr	r5, [pc, #356]	; (7d08 <spi_write_buffer_wait+0x1f8>)
    7ba2:	42aa      	cmp	r2, r5
    7ba4:	d070      	beq.n	7c88 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    7ba6:	7945      	ldrb	r5, [r0, #5]
    7ba8:	2d00      	cmp	r5, #0
    7baa:	d1e0      	bne.n	7b6e <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7bac:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7bae:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    7bb0:	421d      	tst	r5, r3
    7bb2:	d1d4      	bne.n	7b5e <spi_write_buffer_wait+0x4e>
    7bb4:	4d55      	ldr	r5, [pc, #340]	; (7d0c <spi_write_buffer_wait+0x1fc>)
    7bb6:	7e37      	ldrb	r7, [r6, #24]
    7bb8:	421f      	tst	r7, r3
    7bba:	d1d0      	bne.n	7b5e <spi_write_buffer_wait+0x4e>
    7bbc:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7bbe:	2d00      	cmp	r5, #0
    7bc0:	d1f9      	bne.n	7bb6 <spi_write_buffer_wait+0xa6>
    7bc2:	e7cc      	b.n	7b5e <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7bc4:	2302      	movs	r3, #2
    7bc6:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    7bc8:	3302      	adds	r3, #2
    7bca:	e7ab      	b.n	7b24 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7bcc:	3402      	adds	r4, #2
    7bce:	b2a4      	uxth	r4, r4
    7bd0:	4651      	mov	r1, sl
    7bd2:	5dcf      	ldrb	r7, [r1, r7]
    7bd4:	023f      	lsls	r7, r7, #8
    7bd6:	433d      	orrs	r5, r7
    7bd8:	e7d6      	b.n	7b88 <spi_write_buffer_wait+0x78>
    7bda:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    7bdc:	7945      	ldrb	r5, [r0, #5]
    7bde:	2d00      	cmp	r5, #0
    7be0:	d137      	bne.n	7c52 <spi_write_buffer_wait+0x142>
    7be2:	4d4b      	ldr	r5, [pc, #300]	; (7d10 <spi_write_buffer_wait+0x200>)
    7be4:	9101      	str	r1, [sp, #4]
    7be6:	e012      	b.n	7c0e <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    7be8:	3402      	adds	r4, #2
    7bea:	b2a4      	uxth	r4, r4
    7bec:	4649      	mov	r1, r9
    7bee:	9f01      	ldr	r7, [sp, #4]
    7bf0:	5c79      	ldrb	r1, [r7, r1]
    7bf2:	0209      	lsls	r1, r1, #8
    7bf4:	9f00      	ldr	r7, [sp, #0]
    7bf6:	430f      	orrs	r7, r1
    7bf8:	e01b      	b.n	7c32 <spi_write_buffer_wait+0x122>
						length--;
    7bfa:	3a01      	subs	r2, #1
    7bfc:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    7bfe:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c00:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    7c02:	4641      	mov	r1, r8
    7c04:	420f      	tst	r7, r1
    7c06:	d11b      	bne.n	7c40 <spi_write_buffer_wait+0x130>
    7c08:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7c0a:	2d00      	cmp	r5, #0
    7c0c:	d018      	beq.n	7c40 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    7c0e:	2a00      	cmp	r2, #0
    7c10:	d0f5      	beq.n	7bfe <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c12:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7c14:	7e37      	ldrb	r7, [r6, #24]
    7c16:	421f      	tst	r7, r3
    7c18:	d0f1      	beq.n	7bfe <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    7c1a:	1c67      	adds	r7, r4, #1
    7c1c:	b2b9      	uxth	r1, r7
    7c1e:	4689      	mov	r9, r1
    7c20:	9901      	ldr	r1, [sp, #4]
    7c22:	5d09      	ldrb	r1, [r1, r4]
    7c24:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7c26:	7981      	ldrb	r1, [r0, #6]
    7c28:	2901      	cmp	r1, #1
    7c2a:	d0dd      	beq.n	7be8 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    7c2c:	4669      	mov	r1, sp
    7c2e:	880f      	ldrh	r7, [r1, #0]
    7c30:	464c      	mov	r4, r9
    7c32:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7c34:	4219      	tst	r1, r3
    7c36:	d0e0      	beq.n	7bfa <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7c38:	05ff      	lsls	r7, r7, #23
    7c3a:	0dff      	lsrs	r7, r7, #23
    7c3c:	62b7      	str	r7, [r6, #40]	; 0x28
    7c3e:	e7dc      	b.n	7bfa <spi_write_buffer_wait+0xea>
    7c40:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7c42:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    7c44:	4667      	mov	r7, ip
    7c46:	423d      	tst	r5, r7
    7c48:	d118      	bne.n	7c7c <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c4a:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    7c4c:	4646      	mov	r6, r8
    7c4e:	4235      	tst	r5, r6
    7c50:	d052      	beq.n	7cf8 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c52:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c54:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    7c56:	4647      	mov	r7, r8
    7c58:	423d      	tst	r5, r7
    7c5a:	d0fb      	beq.n	7c54 <spi_write_buffer_wait+0x144>
    7c5c:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    7c5e:	423d      	tst	r5, r7
    7c60:	d007      	beq.n	7c72 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7c62:	8b75      	ldrh	r5, [r6, #26]
    7c64:	423d      	tst	r5, r7
    7c66:	d000      	beq.n	7c6a <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7c68:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7c6a:	7985      	ldrb	r5, [r0, #6]
    7c6c:	2d01      	cmp	r5, #1
    7c6e:	d009      	beq.n	7c84 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7c70:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    7c72:	465d      	mov	r5, fp
    7c74:	3d01      	subs	r5, #1
    7c76:	b2ad      	uxth	r5, r5
    7c78:	46ab      	mov	fp, r5
    7c7a:	e769      	b.n	7b50 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7c7c:	2302      	movs	r3, #2
    7c7e:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    7c80:	3302      	adds	r3, #2
    7c82:	e74f      	b.n	7b24 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7c84:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    7c86:	e7f4      	b.n	7c72 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    7c88:	7943      	ldrb	r3, [r0, #5]
    7c8a:	2b01      	cmp	r3, #1
    7c8c:	d00b      	beq.n	7ca6 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d134      	bne.n	7cfc <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    7c92:	79c2      	ldrb	r2, [r0, #7]
    7c94:	2a00      	cmp	r2, #0
    7c96:	d100      	bne.n	7c9a <spi_write_buffer_wait+0x18a>
    7c98:	e744      	b.n	7b24 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    7c9a:	2404      	movs	r4, #4
			while (flush_length) {
    7c9c:	465b      	mov	r3, fp
    7c9e:	465d      	mov	r5, fp
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d119      	bne.n	7cd8 <spi_write_buffer_wait+0x1c8>
    7ca4:	e73e      	b.n	7b24 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ca6:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    7ca8:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7caa:	7e0b      	ldrb	r3, [r1, #24]
    7cac:	4213      	tst	r3, r2
    7cae:	d0fc      	beq.n	7caa <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    7cb0:	2300      	movs	r3, #0
    7cb2:	e737      	b.n	7b24 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7cb4:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    7cb6:	4223      	tst	r3, r4
    7cb8:	d022      	beq.n	7d00 <spi_write_buffer_wait+0x1f0>
    7cba:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    7cbc:	4223      	tst	r3, r4
    7cbe:	d007      	beq.n	7cd0 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7cc0:	8b4b      	ldrh	r3, [r1, #26]
    7cc2:	4223      	tst	r3, r4
    7cc4:	d000      	beq.n	7cc8 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7cc6:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7cc8:	7983      	ldrb	r3, [r0, #6]
    7cca:	2b01      	cmp	r3, #1
    7ccc:	d010      	beq.n	7cf0 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7cce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    7cd0:	3d01      	subs	r5, #1
    7cd2:	b2ad      	uxth	r5, r5
			while (flush_length) {
    7cd4:	2d00      	cmp	r5, #0
    7cd6:	d015      	beq.n	7d04 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7cd8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7cda:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    7cdc:	4223      	tst	r3, r4
    7cde:	d1e9      	bne.n	7cb4 <spi_write_buffer_wait+0x1a4>
    7ce0:	4b0a      	ldr	r3, [pc, #40]	; (7d0c <spi_write_buffer_wait+0x1fc>)
    7ce2:	7e0a      	ldrb	r2, [r1, #24]
    7ce4:	4222      	tst	r2, r4
    7ce6:	d1e5      	bne.n	7cb4 <spi_write_buffer_wait+0x1a4>
    7ce8:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7cea:	2b00      	cmp	r3, #0
    7cec:	d1f9      	bne.n	7ce2 <spi_write_buffer_wait+0x1d2>
    7cee:	e7e1      	b.n	7cb4 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7cf0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7cf2:	e7ed      	b.n	7cd0 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    7cf4:	2312      	movs	r3, #18
    7cf6:	e715      	b.n	7b24 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    7cf8:	2312      	movs	r3, #18
    7cfa:	e713      	b.n	7b24 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    7cfc:	2300      	movs	r3, #0
    7cfe:	e711      	b.n	7b24 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    7d00:	2312      	movs	r3, #18
    7d02:	e70f      	b.n	7b24 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    7d04:	2300      	movs	r3, #0
    7d06:	e70d      	b.n	7b24 <spi_write_buffer_wait+0x14>
    7d08:	0000ffff 	.word	0x0000ffff
    7d0c:	00002710 	.word	0x00002710
    7d10:	00002711 	.word	0x00002711

00007d14 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    7d14:	4770      	bx	lr
	...

00007d18 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    7d18:	b510      	push	{r4, lr}
    7d1a:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    7d1c:	4b0f      	ldr	r3, [pc, #60]	; (7d5c <sd_mmc_test_unit_ready+0x44>)
    7d1e:	4798      	blx	r3
    7d20:	2801      	cmp	r0, #1
    7d22:	d019      	beq.n	7d58 <sd_mmc_test_unit_ready+0x40>
    7d24:	2800      	cmp	r0, #0
    7d26:	d003      	beq.n	7d30 <sd_mmc_test_unit_ready+0x18>
    7d28:	2802      	cmp	r0, #2
    7d2a:	d010      	beq.n	7d4e <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    7d2c:	2001      	movs	r0, #1
	}
}
    7d2e:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    7d30:	4b0b      	ldr	r3, [pc, #44]	; (7d60 <sd_mmc_test_unit_ready+0x48>)
    7d32:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    7d34:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    7d36:	2b00      	cmp	r3, #0
    7d38:	d1f9      	bne.n	7d2e <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    7d3a:	0020      	movs	r0, r4
    7d3c:	4b09      	ldr	r3, [pc, #36]	; (7d64 <sd_mmc_test_unit_ready+0x4c>)
    7d3e:	4798      	blx	r3
    7d40:	0003      	movs	r3, r0
    7d42:	2003      	movs	r0, #3
    7d44:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    7d46:	4243      	negs	r3, r0
    7d48:	4158      	adcs	r0, r3
    7d4a:	0040      	lsls	r0, r0, #1
    7d4c:	e7ef      	b.n	7d2e <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    7d4e:	2200      	movs	r2, #0
    7d50:	4b03      	ldr	r3, [pc, #12]	; (7d60 <sd_mmc_test_unit_ready+0x48>)
    7d52:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    7d54:	2002      	movs	r0, #2
    7d56:	e7ea      	b.n	7d2e <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    7d58:	2003      	movs	r0, #3
    7d5a:	e7e8      	b.n	7d2e <sd_mmc_test_unit_ready+0x16>
    7d5c:	000009ad 	.word	0x000009ad
    7d60:	200002f8 	.word	0x200002f8
    7d64:	00000e5d 	.word	0x00000e5d

00007d68 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    7d68:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    7d6a:	2000      	movs	r0, #0
    7d6c:	4b01      	ldr	r3, [pc, #4]	; (7d74 <sd_mmc_test_unit_ready_0+0xc>)
    7d6e:	4798      	blx	r3
}
    7d70:	bd10      	pop	{r4, pc}
    7d72:	46c0      	nop			; (mov r8, r8)
    7d74:	00007d19 	.word	0x00007d19

00007d78 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    7d78:	b570      	push	{r4, r5, r6, lr}
    7d7a:	0004      	movs	r4, r0
    7d7c:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    7d7e:	4b04      	ldr	r3, [pc, #16]	; (7d90 <sd_mmc_read_capacity+0x18>)
    7d80:	4798      	blx	r3
    7d82:	0040      	lsls	r0, r0, #1
    7d84:	3801      	subs	r0, #1
    7d86:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    7d88:	0020      	movs	r0, r4
    7d8a:	4b02      	ldr	r3, [pc, #8]	; (7d94 <sd_mmc_read_capacity+0x1c>)
    7d8c:	4798      	blx	r3
}
    7d8e:	bd70      	pop	{r4, r5, r6, pc}
    7d90:	00000e85 	.word	0x00000e85
    7d94:	00007d19 	.word	0x00007d19

00007d98 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    7d98:	b510      	push	{r4, lr}
    7d9a:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    7d9c:	2000      	movs	r0, #0
    7d9e:	4b01      	ldr	r3, [pc, #4]	; (7da4 <sd_mmc_read_capacity_0+0xc>)
    7da0:	4798      	blx	r3
}
    7da2:	bd10      	pop	{r4, pc}
    7da4:	00007d79 	.word	0x00007d79

00007da8 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    7da8:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    7daa:	2000      	movs	r0, #0
    7dac:	4b01      	ldr	r3, [pc, #4]	; (7db4 <sd_mmc_wr_protect_0+0xc>)
    7dae:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    7db0:	bd10      	pop	{r4, pc}
    7db2:	46c0      	nop			; (mov r8, r8)
    7db4:	00000ead 	.word	0x00000ead

00007db8 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    7db8:	2001      	movs	r0, #1
    7dba:	4770      	bx	lr

00007dbc <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    7dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dbe:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    7dc0:	4b24      	ldr	r3, [pc, #144]	; (7e54 <sd_mmc_usb_read_10+0x98>)
    7dc2:	4798      	blx	r3
    7dc4:	2800      	cmp	r0, #0
    7dc6:	d004      	beq.n	7dd2 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7dc8:	3802      	subs	r0, #2
    7dca:	4243      	negs	r3, r0
    7dcc:	4158      	adcs	r0, r3
    7dce:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    7dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    7dd2:	3401      	adds	r4, #1
    7dd4:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    7dd6:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7dd8:	4e1f      	ldr	r6, [pc, #124]	; (7e58 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    7dda:	e008      	b.n	7dee <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7ddc:	481f      	ldr	r0, [pc, #124]	; (7e5c <sd_mmc_usb_read_10+0xa0>)
    7dde:	e010      	b.n	7e02 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    7de0:	2000      	movs	r0, #0
    7de2:	4b1f      	ldr	r3, [pc, #124]	; (7e60 <sd_mmc_usb_read_10+0xa4>)
    7de4:	4798      	blx	r3
    7de6:	2800      	cmp	r0, #0
    7de8:	d126      	bne.n	7e38 <sd_mmc_usb_read_10+0x7c>
    7dea:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7dec:	0022      	movs	r2, r4
	while (nb_step--) {
    7dee:	1e54      	subs	r4, r2, #1
    7df0:	b2a4      	uxth	r4, r4
    7df2:	2a00      	cmp	r2, #0
    7df4:	d01c      	beq.n	7e30 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    7df6:	2c00      	cmp	r4, #0
    7df8:	d020      	beq.n	7e3c <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7dfa:	2501      	movs	r5, #1
    7dfc:	4025      	ands	r5, r4
    7dfe:	d0ed      	beq.n	7ddc <sd_mmc_usb_read_10+0x20>
    7e00:	4818      	ldr	r0, [pc, #96]	; (7e64 <sd_mmc_usb_read_10+0xa8>)
    7e02:	2101      	movs	r1, #1
    7e04:	47b0      	blx	r6
    7e06:	2800      	cmp	r0, #0
    7e08:	d114      	bne.n	7e34 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    7e0a:	2f00      	cmp	r7, #0
    7e0c:	d1e8      	bne.n	7de0 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    7e0e:	4915      	ldr	r1, [pc, #84]	; (7e64 <sd_mmc_usb_read_10+0xa8>)
    7e10:	2d00      	cmp	r5, #0
    7e12:	d000      	beq.n	7e16 <sd_mmc_usb_read_10+0x5a>
    7e14:	4911      	ldr	r1, [pc, #68]	; (7e5c <sd_mmc_usb_read_10+0xa0>)
    7e16:	2300      	movs	r3, #0
    7e18:	2280      	movs	r2, #128	; 0x80
    7e1a:	0092      	lsls	r2, r2, #2
    7e1c:	2001      	movs	r0, #1
    7e1e:	4d12      	ldr	r5, [pc, #72]	; (7e68 <sd_mmc_usb_read_10+0xac>)
    7e20:	47a8      	blx	r5
    7e22:	2800      	cmp	r0, #0
    7e24:	d1dc      	bne.n	7de0 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    7e26:	2001      	movs	r0, #1
    7e28:	4b0d      	ldr	r3, [pc, #52]	; (7e60 <sd_mmc_usb_read_10+0xa4>)
    7e2a:	4798      	blx	r3
				return CTRL_FAIL;
    7e2c:	2001      	movs	r0, #1
    7e2e:	e7cf      	b.n	7dd0 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    7e30:	2000      	movs	r0, #0
    7e32:	e7cd      	b.n	7dd0 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    7e34:	2001      	movs	r0, #1
    7e36:	e7cb      	b.n	7dd0 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    7e38:	2001      	movs	r0, #1
    7e3a:	e7c9      	b.n	7dd0 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    7e3c:	2f00      	cmp	r7, #0
    7e3e:	d1d4      	bne.n	7dea <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    7e40:	2300      	movs	r3, #0
    7e42:	2280      	movs	r2, #128	; 0x80
    7e44:	0092      	lsls	r2, r2, #2
    7e46:	4907      	ldr	r1, [pc, #28]	; (7e64 <sd_mmc_usb_read_10+0xa8>)
    7e48:	2001      	movs	r0, #1
    7e4a:	4d07      	ldr	r5, [pc, #28]	; (7e68 <sd_mmc_usb_read_10+0xac>)
    7e4c:	47a8      	blx	r5
    7e4e:	2800      	cmp	r0, #0
    7e50:	d1cb      	bne.n	7dea <sd_mmc_usb_read_10+0x2e>
    7e52:	e7e8      	b.n	7e26 <sd_mmc_usb_read_10+0x6a>
    7e54:	00000eb1 	.word	0x00000eb1
    7e58:	00000f39 	.word	0x00000f39
    7e5c:	20001998 	.word	0x20001998
    7e60:	00000f65 	.word	0x00000f65
    7e64:	20001798 	.word	0x20001798
    7e68:	00001905 	.word	0x00001905

00007e6c <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    7e6c:	b510      	push	{r4, lr}
    7e6e:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    7e70:	0001      	movs	r1, r0
    7e72:	2000      	movs	r0, #0
    7e74:	4b01      	ldr	r3, [pc, #4]	; (7e7c <sd_mmc_usb_read_10_0+0x10>)
    7e76:	4798      	blx	r3
}
    7e78:	bd10      	pop	{r4, pc}
    7e7a:	46c0      	nop			; (mov r8, r8)
    7e7c:	00007dbd 	.word	0x00007dbd

00007e80 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    7e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e82:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    7e84:	4b20      	ldr	r3, [pc, #128]	; (7f08 <sd_mmc_usb_write_10+0x88>)
    7e86:	4798      	blx	r3
    7e88:	2800      	cmp	r0, #0
    7e8a:	d00d      	beq.n	7ea8 <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7e8c:	3802      	subs	r0, #2
    7e8e:	4243      	negs	r3, r0
    7e90:	4158      	adcs	r0, r3
    7e92:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    7e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    7e96:	481d      	ldr	r0, [pc, #116]	; (7f0c <sd_mmc_usb_write_10+0x8c>)
    7e98:	e01b      	b.n	7ed2 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    7e9a:	3001      	adds	r0, #1
				if (!b_first_step) {
    7e9c:	2d00      	cmp	r5, #0
    7e9e:	d1f9      	bne.n	7e94 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    7ea0:	4b1b      	ldr	r3, [pc, #108]	; (7f10 <sd_mmc_usb_write_10+0x90>)
    7ea2:	4798      	blx	r3
				return CTRL_FAIL;
    7ea4:	2001      	movs	r0, #1
    7ea6:	e7f5      	b.n	7e94 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    7ea8:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7eaa:	4f19      	ldr	r7, [pc, #100]	; (7f10 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    7eac:	4e19      	ldr	r6, [pc, #100]	; (7f14 <sd_mmc_usb_write_10+0x94>)
    7eae:	e008      	b.n	7ec2 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    7eb0:	2000      	movs	r0, #0
    7eb2:	e7ef      	b.n	7e94 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    7eb4:	2001      	movs	r0, #1
    7eb6:	e7ed      	b.n	7e94 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    7eb8:	2c00      	cmp	r4, #0
    7eba:	d111      	bne.n	7ee0 <sd_mmc_usb_write_10+0x60>
    7ebc:	3c01      	subs	r4, #1
    7ebe:	b2a4      	uxth	r4, r4
    7ec0:	2500      	movs	r5, #0
	while (nb_step--) {
    7ec2:	4b15      	ldr	r3, [pc, #84]	; (7f18 <sd_mmc_usb_write_10+0x98>)
    7ec4:	429c      	cmp	r4, r3
    7ec6:	d0f3      	beq.n	7eb0 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    7ec8:	2d00      	cmp	r5, #0
    7eca:	d1f5      	bne.n	7eb8 <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    7ecc:	07e3      	lsls	r3, r4, #31
    7ece:	d5e2      	bpl.n	7e96 <sd_mmc_usb_write_10+0x16>
    7ed0:	4812      	ldr	r0, [pc, #72]	; (7f1c <sd_mmc_usb_write_10+0x9c>)
    7ed2:	2101      	movs	r1, #1
    7ed4:	4b12      	ldr	r3, [pc, #72]	; (7f20 <sd_mmc_usb_write_10+0xa0>)
    7ed6:	4798      	blx	r3
    7ed8:	2800      	cmp	r0, #0
    7eda:	d1eb      	bne.n	7eb4 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    7edc:	2c00      	cmp	r4, #0
    7ede:	d00c      	beq.n	7efa <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    7ee0:	490e      	ldr	r1, [pc, #56]	; (7f1c <sd_mmc_usb_write_10+0x9c>)
    7ee2:	07e3      	lsls	r3, r4, #31
    7ee4:	d500      	bpl.n	7ee8 <sd_mmc_usb_write_10+0x68>
    7ee6:	4909      	ldr	r1, [pc, #36]	; (7f0c <sd_mmc_usb_write_10+0x8c>)
    7ee8:	2300      	movs	r3, #0
    7eea:	2280      	movs	r2, #128	; 0x80
    7eec:	0092      	lsls	r2, r2, #2
    7eee:	2000      	movs	r0, #0
    7ef0:	47b0      	blx	r6
    7ef2:	2800      	cmp	r0, #0
    7ef4:	d0d1      	beq.n	7e9a <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    7ef6:	2d00      	cmp	r5, #0
    7ef8:	d1e0      	bne.n	7ebc <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7efa:	2000      	movs	r0, #0
    7efc:	47b8      	blx	r7
    7efe:	2800      	cmp	r0, #0
    7f00:	d0dc      	beq.n	7ebc <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    7f02:	2001      	movs	r0, #1
    7f04:	e7c6      	b.n	7e94 <sd_mmc_usb_write_10+0x14>
    7f06:	46c0      	nop			; (mov r8, r8)
    7f08:	00000fd5 	.word	0x00000fd5
    7f0c:	20001998 	.word	0x20001998
    7f10:	00001071 	.word	0x00001071
    7f14:	00001905 	.word	0x00001905
    7f18:	0000ffff 	.word	0x0000ffff
    7f1c:	20001798 	.word	0x20001798
    7f20:	00001045 	.word	0x00001045

00007f24 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    7f24:	b510      	push	{r4, lr}
    7f26:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    7f28:	0001      	movs	r1, r0
    7f2a:	2000      	movs	r0, #0
    7f2c:	4b01      	ldr	r3, [pc, #4]	; (7f34 <sd_mmc_usb_write_10_0+0x10>)
    7f2e:	4798      	blx	r3
}
    7f30:	bd10      	pop	{r4, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	00007e81 	.word	0x00007e81

00007f38 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    7f38:	b510      	push	{r4, lr}
    7f3a:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    7f3c:	2201      	movs	r2, #1
    7f3e:	4b0c      	ldr	r3, [pc, #48]	; (7f70 <sd_mmc_mem_2_ram+0x38>)
    7f40:	4798      	blx	r3
    7f42:	2800      	cmp	r0, #0
    7f44:	d004      	beq.n	7f50 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7f46:	3802      	subs	r0, #2
    7f48:	4243      	negs	r3, r0
    7f4a:	4158      	adcs	r0, r3
    7f4c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7f4e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7f50:	2101      	movs	r1, #1
    7f52:	0020      	movs	r0, r4
    7f54:	4b07      	ldr	r3, [pc, #28]	; (7f74 <sd_mmc_mem_2_ram+0x3c>)
    7f56:	4798      	blx	r3
    7f58:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7f5a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d1f6      	bne.n	7f4e <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    7f60:	2000      	movs	r0, #0
    7f62:	4b05      	ldr	r3, [pc, #20]	; (7f78 <sd_mmc_mem_2_ram+0x40>)
    7f64:	4798      	blx	r3
    7f66:	1e43      	subs	r3, r0, #1
    7f68:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7f6a:	b2c0      	uxtb	r0, r0
    7f6c:	e7ef      	b.n	7f4e <sd_mmc_mem_2_ram+0x16>
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	00000eb1 	.word	0x00000eb1
    7f74:	00000f39 	.word	0x00000f39
    7f78:	00000f65 	.word	0x00000f65

00007f7c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    7f7c:	b510      	push	{r4, lr}
    7f7e:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    7f80:	0001      	movs	r1, r0
    7f82:	2000      	movs	r0, #0
    7f84:	4b01      	ldr	r3, [pc, #4]	; (7f8c <sd_mmc_mem_2_ram_0+0x10>)
    7f86:	4798      	blx	r3
}
    7f88:	bd10      	pop	{r4, pc}
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	00007f39 	.word	0x00007f39

00007f90 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    7f90:	b510      	push	{r4, lr}
    7f92:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    7f94:	2201      	movs	r2, #1
    7f96:	4b0c      	ldr	r3, [pc, #48]	; (7fc8 <sd_mmc_ram_2_mem+0x38>)
    7f98:	4798      	blx	r3
    7f9a:	2800      	cmp	r0, #0
    7f9c:	d004      	beq.n	7fa8 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7f9e:	3802      	subs	r0, #2
    7fa0:	4243      	negs	r3, r0
    7fa2:	4158      	adcs	r0, r3
    7fa4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7fa6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7fa8:	2101      	movs	r1, #1
    7faa:	0020      	movs	r0, r4
    7fac:	4b07      	ldr	r3, [pc, #28]	; (7fcc <sd_mmc_ram_2_mem+0x3c>)
    7fae:	4798      	blx	r3
    7fb0:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7fb2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7fb4:	2b00      	cmp	r3, #0
    7fb6:	d1f6      	bne.n	7fa6 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7fb8:	2000      	movs	r0, #0
    7fba:	4b05      	ldr	r3, [pc, #20]	; (7fd0 <sd_mmc_ram_2_mem+0x40>)
    7fbc:	4798      	blx	r3
    7fbe:	1e43      	subs	r3, r0, #1
    7fc0:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7fc2:	b2c0      	uxtb	r0, r0
    7fc4:	e7ef      	b.n	7fa6 <sd_mmc_ram_2_mem+0x16>
    7fc6:	46c0      	nop			; (mov r8, r8)
    7fc8:	00000fd5 	.word	0x00000fd5
    7fcc:	00001045 	.word	0x00001045
    7fd0:	00001071 	.word	0x00001071

00007fd4 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    7fd4:	b510      	push	{r4, lr}
    7fd6:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    7fd8:	0001      	movs	r1, r0
    7fda:	2000      	movs	r0, #0
    7fdc:	4b01      	ldr	r3, [pc, #4]	; (7fe4 <sd_mmc_ram_2_mem_0+0x10>)
    7fde:	4798      	blx	r3
}
    7fe0:	bd10      	pop	{r4, pc}
    7fe2:	46c0      	nop			; (mov r8, r8)
    7fe4:	00007f91 	.word	0x00007f91

00007fe8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    7fe8:	b500      	push	{lr}
    7fea:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    7fec:	466b      	mov	r3, sp
    7fee:	1dd9      	adds	r1, r3, #7
    7ff0:	23ff      	movs	r3, #255	; 0xff
    7ff2:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    7ff4:	2201      	movs	r2, #1
    7ff6:	480b      	ldr	r0, [pc, #44]	; (8024 <sd_mmc_spi_start_write_block+0x3c>)
    7ff8:	4b0b      	ldr	r3, [pc, #44]	; (8028 <sd_mmc_spi_start_write_block+0x40>)
    7ffa:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    7ffc:	4b0b      	ldr	r3, [pc, #44]	; (802c <sd_mmc_spi_start_write_block+0x44>)
    7ffe:	881b      	ldrh	r3, [r3, #0]
    8000:	2b01      	cmp	r3, #1
    8002:	d00a      	beq.n	801a <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    8004:	22fc      	movs	r2, #252	; 0xfc
    8006:	466b      	mov	r3, sp
    8008:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    800a:	2201      	movs	r2, #1
    800c:	466b      	mov	r3, sp
    800e:	1d99      	adds	r1, r3, #6
    8010:	4804      	ldr	r0, [pc, #16]	; (8024 <sd_mmc_spi_start_write_block+0x3c>)
    8012:	4b05      	ldr	r3, [pc, #20]	; (8028 <sd_mmc_spi_start_write_block+0x40>)
    8014:	4798      	blx	r3
}
    8016:	b003      	add	sp, #12
    8018:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    801a:	22fe      	movs	r2, #254	; 0xfe
    801c:	466b      	mov	r3, sp
    801e:	719a      	strb	r2, [r3, #6]
    8020:	e7f3      	b.n	800a <sd_mmc_spi_start_write_block+0x22>
    8022:	46c0      	nop			; (mov r8, r8)
    8024:	200002fc 	.word	0x200002fc
    8028:	00007b11 	.word	0x00007b11
    802c:	20000310 	.word	0x20000310

00008030 <sd_mmc_spi_wait_busy>:
{
    8030:	b5f0      	push	{r4, r5, r6, r7, lr}
    8032:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    8034:	466b      	mov	r3, sp
    8036:	1ddc      	adds	r4, r3, #7
    8038:	23ff      	movs	r3, #255	; 0xff
    803a:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    803c:	4e12      	ldr	r6, [pc, #72]	; (8088 <sd_mmc_spi_wait_busy+0x58>)
    803e:	2201      	movs	r2, #1
    8040:	0021      	movs	r1, r4
    8042:	0030      	movs	r0, r6
    8044:	4d11      	ldr	r5, [pc, #68]	; (808c <sd_mmc_spi_wait_busy+0x5c>)
    8046:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8048:	23ff      	movs	r3, #255	; 0xff
    804a:	2201      	movs	r2, #1
    804c:	0021      	movs	r1, r4
    804e:	0030      	movs	r0, r6
    8050:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8052:	23ff      	movs	r3, #255	; 0xff
    8054:	2201      	movs	r2, #1
    8056:	0021      	movs	r1, r4
    8058:	0030      	movs	r0, r6
    805a:	47a8      	blx	r5
    805c:	4c0c      	ldr	r4, [pc, #48]	; (8090 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    805e:	466b      	mov	r3, sp
    8060:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8062:	4e09      	ldr	r6, [pc, #36]	; (8088 <sd_mmc_spi_wait_busy+0x58>)
    8064:	4f09      	ldr	r7, [pc, #36]	; (808c <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    8066:	782b      	ldrb	r3, [r5, #0]
    8068:	2bff      	cmp	r3, #255	; 0xff
    806a:	d009      	beq.n	8080 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    806c:	23ff      	movs	r3, #255	; 0xff
    806e:	2201      	movs	r2, #1
    8070:	0029      	movs	r1, r5
    8072:	0030      	movs	r0, r6
    8074:	47b8      	blx	r7
    8076:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    8078:	2c00      	cmp	r4, #0
    807a:	d1f4      	bne.n	8066 <sd_mmc_spi_wait_busy+0x36>
			return false;
    807c:	2000      	movs	r0, #0
    807e:	e000      	b.n	8082 <sd_mmc_spi_wait_busy+0x52>
	return true;
    8080:	2001      	movs	r0, #1
}
    8082:	b003      	add	sp, #12
    8084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8086:	46c0      	nop			; (mov r8, r8)
    8088:	200002fc 	.word	0x200002fc
    808c:	00007905 	.word	0x00007905
    8090:	00030d40 	.word	0x00030d40

00008094 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    8094:	b570      	push	{r4, r5, r6, lr}
    8096:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    8098:	4b14      	ldr	r3, [pc, #80]	; (80ec <sd_mmc_spi_stop_multiwrite_block+0x58>)
    809a:	881c      	ldrh	r4, [r3, #0]
    809c:	2c01      	cmp	r4, #1
    809e:	d023      	beq.n	80e8 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    80a0:	4b13      	ldr	r3, [pc, #76]	; (80f0 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    80a2:	8819      	ldrh	r1, [r3, #0]
    80a4:	4b13      	ldr	r3, [pc, #76]	; (80f4 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    80a6:	6818      	ldr	r0, [r3, #0]
    80a8:	4b13      	ldr	r3, [pc, #76]	; (80f8 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    80aa:	4798      	blx	r3
		return true; // It is not the End of multi write
    80ac:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    80ae:	4284      	cmp	r4, r0
    80b0:	d902      	bls.n	80b8 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    80b2:	0018      	movs	r0, r3
    80b4:	b002      	add	sp, #8
    80b6:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    80b8:	466b      	mov	r3, sp
    80ba:	1ddc      	adds	r4, r3, #7
    80bc:	23ff      	movs	r3, #255	; 0xff
    80be:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    80c0:	4e0e      	ldr	r6, [pc, #56]	; (80fc <sd_mmc_spi_stop_multiwrite_block+0x68>)
    80c2:	2201      	movs	r2, #1
    80c4:	0021      	movs	r1, r4
    80c6:	0030      	movs	r0, r6
    80c8:	4d0d      	ldr	r5, [pc, #52]	; (8100 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    80ca:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    80cc:	23fd      	movs	r3, #253	; 0xfd
    80ce:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    80d0:	2201      	movs	r2, #1
    80d2:	0021      	movs	r1, r4
    80d4:	0030      	movs	r0, r6
    80d6:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    80d8:	4b0a      	ldr	r3, [pc, #40]	; (8104 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    80da:	4798      	blx	r3
    80dc:	1e03      	subs	r3, r0, #0
    80de:	d1e8      	bne.n	80b2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    80e0:	2105      	movs	r1, #5
    80e2:	4a09      	ldr	r2, [pc, #36]	; (8108 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    80e4:	7011      	strb	r1, [r2, #0]
		return false;
    80e6:	e7e4      	b.n	80b2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    80e8:	2301      	movs	r3, #1
    80ea:	e7e2      	b.n	80b2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    80ec:	20000310 	.word	0x20000310
    80f0:	20000308 	.word	0x20000308
    80f4:	20000318 	.word	0x20000318
    80f8:	00008dd1 	.word	0x00008dd1
    80fc:	200002fc 	.word	0x200002fc
    8100:	00007b11 	.word	0x00007b11
    8104:	00008031 	.word	0x00008031
    8108:	2000030f 	.word	0x2000030f

0000810c <sd_mmc_spi_start_read_block>:
{
    810c:	b5f0      	push	{r4, r5, r6, r7, lr}
    810e:	b083      	sub	sp, #12
	token = 0;
    8110:	2200      	movs	r2, #0
    8112:	466b      	mov	r3, sp
    8114:	71da      	strb	r2, [r3, #7]
    8116:	4c14      	ldr	r4, [pc, #80]	; (8168 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    8118:	466b      	mov	r3, sp
    811a:	1ddd      	adds	r5, r3, #7
    811c:	4e13      	ldr	r6, [pc, #76]	; (816c <sd_mmc_spi_start_read_block+0x60>)
    811e:	4f14      	ldr	r7, [pc, #80]	; (8170 <sd_mmc_spi_start_read_block+0x64>)
    8120:	23ff      	movs	r3, #255	; 0xff
    8122:	2201      	movs	r2, #1
    8124:	0029      	movs	r1, r5
    8126:	0030      	movs	r0, r6
    8128:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    812a:	782b      	ldrb	r3, [r5, #0]
    812c:	220f      	movs	r2, #15
    812e:	0019      	movs	r1, r3
    8130:	4391      	bics	r1, r2
    8132:	1e0a      	subs	r2, r1, #0
    8134:	d009      	beq.n	814a <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    8136:	2bfe      	cmp	r3, #254	; 0xfe
    8138:	d013      	beq.n	8162 <sd_mmc_spi_start_read_block+0x56>
    813a:	3c01      	subs	r4, #1
		if (i-- == 0) {
    813c:	2c00      	cmp	r4, #0
    813e:	d1ef      	bne.n	8120 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    8140:	2204      	movs	r2, #4
    8142:	4b0c      	ldr	r3, [pc, #48]	; (8174 <sd_mmc_spi_start_read_block+0x68>)
    8144:	701a      	strb	r2, [r3, #0]
			return false;
    8146:	2000      	movs	r0, #0
    8148:	e00c      	b.n	8164 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    814a:	075b      	lsls	r3, r3, #29
    814c:	d004      	beq.n	8158 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    814e:	3207      	adds	r2, #7
    8150:	4b08      	ldr	r3, [pc, #32]	; (8174 <sd_mmc_spi_start_read_block+0x68>)
    8152:	701a      	strb	r2, [r3, #0]
			return false;
    8154:	2000      	movs	r0, #0
    8156:	e005      	b.n	8164 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    8158:	220b      	movs	r2, #11
    815a:	4b06      	ldr	r3, [pc, #24]	; (8174 <sd_mmc_spi_start_read_block+0x68>)
    815c:	701a      	strb	r2, [r3, #0]
			return false;
    815e:	2000      	movs	r0, #0
    8160:	e000      	b.n	8164 <sd_mmc_spi_start_read_block+0x58>
	return true;
    8162:	2001      	movs	r0, #1
}
    8164:	b003      	add	sp, #12
    8166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8168:	0007a120 	.word	0x0007a120
    816c:	200002fc 	.word	0x200002fc
    8170:	00007905 	.word	0x00007905
    8174:	2000030f 	.word	0x2000030f

00008178 <sd_mmc_spi_stop_write_block>:
{
    8178:	b530      	push	{r4, r5, lr}
    817a:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    817c:	a901      	add	r1, sp, #4
    817e:	2301      	movs	r3, #1
    8180:	425b      	negs	r3, r3
    8182:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    8184:	4d14      	ldr	r5, [pc, #80]	; (81d8 <sd_mmc_spi_stop_write_block+0x60>)
    8186:	2202      	movs	r2, #2
    8188:	0028      	movs	r0, r5
    818a:	4b14      	ldr	r3, [pc, #80]	; (81dc <sd_mmc_spi_stop_write_block+0x64>)
    818c:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    818e:	466b      	mov	r3, sp
    8190:	1ddc      	adds	r4, r3, #7
    8192:	23ff      	movs	r3, #255	; 0xff
    8194:	2201      	movs	r2, #1
    8196:	0021      	movs	r1, r4
    8198:	0028      	movs	r0, r5
    819a:	4d11      	ldr	r5, [pc, #68]	; (81e0 <sd_mmc_spi_stop_write_block+0x68>)
    819c:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    819e:	7822      	ldrb	r2, [r4, #0]
    81a0:	2311      	movs	r3, #17
    81a2:	4013      	ands	r3, r2
    81a4:	2b01      	cmp	r3, #1
    81a6:	d005      	beq.n	81b4 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    81a8:	2201      	movs	r2, #1
    81aa:	4b0e      	ldr	r3, [pc, #56]	; (81e4 <sd_mmc_spi_stop_write_block+0x6c>)
    81ac:	701a      	strb	r2, [r3, #0]
		return false;
    81ae:	2000      	movs	r0, #0
}
    81b0:	b003      	add	sp, #12
    81b2:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    81b4:	231e      	movs	r3, #30
    81b6:	401a      	ands	r2, r3
    81b8:	2a04      	cmp	r2, #4
    81ba:	d00b      	beq.n	81d4 <sd_mmc_spi_stop_write_block+0x5c>
    81bc:	2a0a      	cmp	r2, #10
    81be:	d104      	bne.n	81ca <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    81c0:	3a02      	subs	r2, #2
    81c2:	4b08      	ldr	r3, [pc, #32]	; (81e4 <sd_mmc_spi_stop_write_block+0x6c>)
    81c4:	701a      	strb	r2, [r3, #0]
		return false;
    81c6:	2000      	movs	r0, #0
    81c8:	e7f2      	b.n	81b0 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    81ca:	220a      	movs	r2, #10
    81cc:	4b05      	ldr	r3, [pc, #20]	; (81e4 <sd_mmc_spi_stop_write_block+0x6c>)
    81ce:	701a      	strb	r2, [r3, #0]
		return false;
    81d0:	2000      	movs	r0, #0
    81d2:	e7ed      	b.n	81b0 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    81d4:	2001      	movs	r0, #1
    81d6:	e7eb      	b.n	81b0 <sd_mmc_spi_stop_write_block+0x38>
    81d8:	200002fc 	.word	0x200002fc
    81dc:	00007b11 	.word	0x00007b11
    81e0:	00007905 	.word	0x00007905
    81e4:	2000030f 	.word	0x2000030f

000081e8 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    81e8:	b570      	push	{r4, r5, r6, lr}
    81ea:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    81ec:	2500      	movs	r5, #0
    81ee:	4b2c      	ldr	r3, [pc, #176]	; (82a0 <sd_mmc_spi_init+0xb8>)
    81f0:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    81f2:	a90f      	add	r1, sp, #60	; 0x3c
    81f4:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    81f6:	2601      	movs	r6, #1
    81f8:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    81fa:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    81fc:	2025      	movs	r0, #37	; 0x25
    81fe:	4b29      	ldr	r3, [pc, #164]	; (82a4 <sd_mmc_spi_init+0xbc>)
    8200:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    8202:	ac01      	add	r4, sp, #4
    8204:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8206:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8208:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    820a:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    820c:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    820e:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    8210:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    8212:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    8214:	2324      	movs	r3, #36	; 0x24
    8216:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    8218:	220c      	movs	r2, #12
    821a:	2100      	movs	r1, #0
    821c:	a807      	add	r0, sp, #28
    821e:	4b22      	ldr	r3, [pc, #136]	; (82a8 <sd_mmc_spi_init+0xc0>)
    8220:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    8222:	2380      	movs	r3, #128	; 0x80
    8224:	025b      	lsls	r3, r3, #9
    8226:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    8228:	4b20      	ldr	r3, [pc, #128]	; (82ac <sd_mmc_spi_init+0xc4>)
    822a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    822c:	4b20      	ldr	r3, [pc, #128]	; (82b0 <sd_mmc_spi_init+0xc8>)
    822e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    8230:	4b20      	ldr	r3, [pc, #128]	; (82b4 <sd_mmc_spi_init+0xcc>)
    8232:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    8234:	4b20      	ldr	r3, [pc, #128]	; (82b8 <sd_mmc_spi_init+0xd0>)
    8236:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    8238:	4b20      	ldr	r3, [pc, #128]	; (82bc <sd_mmc_spi_init+0xd4>)
    823a:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    823c:	4d20      	ldr	r5, [pc, #128]	; (82c0 <sd_mmc_spi_init+0xd8>)
    823e:	0022      	movs	r2, r4
    8240:	4920      	ldr	r1, [pc, #128]	; (82c4 <sd_mmc_spi_init+0xdc>)
    8242:	0028      	movs	r0, r5
    8244:	4b20      	ldr	r3, [pc, #128]	; (82c8 <sd_mmc_spi_init+0xe0>)
    8246:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    8248:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    824a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    824c:	2b00      	cmp	r3, #0
    824e:	d1fc      	bne.n	824a <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    8250:	6813      	ldr	r3, [r2, #0]
    8252:	2102      	movs	r1, #2
    8254:	430b      	orrs	r3, r1
    8256:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    8258:	4a1c      	ldr	r2, [pc, #112]	; (82cc <sd_mmc_spi_init+0xe4>)
    825a:	2300      	movs	r3, #0
    825c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    825e:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    8260:	491b      	ldr	r1, [pc, #108]	; (82d0 <sd_mmc_spi_init+0xe8>)
    8262:	7808      	ldrb	r0, [r1, #0]
    8264:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    8266:	4c1b      	ldr	r4, [pc, #108]	; (82d4 <sd_mmc_spi_init+0xec>)
    8268:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    826a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    826c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    826e:	2201      	movs	r2, #1
    8270:	4669      	mov	r1, sp
    8272:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    8274:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8276:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8278:	4b0a      	ldr	r3, [pc, #40]	; (82a4 <sd_mmc_spi_init+0xbc>)
    827a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    827c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    827e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8280:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8282:	2900      	cmp	r1, #0
    8284:	d104      	bne.n	8290 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    8286:	0953      	lsrs	r3, r2, #5
    8288:	01db      	lsls	r3, r3, #7
    828a:	4913      	ldr	r1, [pc, #76]	; (82d8 <sd_mmc_spi_init+0xf0>)
    828c:	468c      	mov	ip, r1
    828e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8290:	211f      	movs	r1, #31
    8292:	4011      	ands	r1, r2
    8294:	2201      	movs	r2, #1
    8296:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8298:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    829a:	b010      	add	sp, #64	; 0x40
    829c:	bd70      	pop	{r4, r5, r6, pc}
    829e:	46c0      	nop			; (mov r8, r8)
    82a0:	2000030f 	.word	0x2000030f
    82a4:	000088f9 	.word	0x000088f9
    82a8:	000093bf 	.word	0x000093bf
    82ac:	00040003 	.word	0x00040003
    82b0:	00050003 	.word	0x00050003
    82b4:	00060003 	.word	0x00060003
    82b8:	00070003 	.word	0x00070003
    82bc:	00061a80 	.word	0x00061a80
    82c0:	200002fc 	.word	0x200002fc
    82c4:	42000800 	.word	0x42000800
    82c8:	000075d1 	.word	0x000075d1
    82cc:	2000031c 	.word	0x2000031c
    82d0:	20000124 	.word	0x20000124
    82d4:	2000030c 	.word	0x2000030c
    82d8:	41004400 	.word	0x41004400

000082dc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    82dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82de:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    82e0:	2200      	movs	r2, #0
    82e2:	4b0d      	ldr	r3, [pc, #52]	; (8318 <sd_mmc_spi_select_device+0x3c>)
    82e4:	701a      	strb	r2, [r3, #0]
    82e6:	000c      	movs	r4, r1
    82e8:	4b0c      	ldr	r3, [pc, #48]	; (831c <sd_mmc_spi_select_device+0x40>)
    82ea:	4299      	cmp	r1, r3
    82ec:	d900      	bls.n	82f0 <sd_mmc_spi_select_device+0x14>
    82ee:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    82f0:	4d0b      	ldr	r5, [pc, #44]	; (8320 <sd_mmc_spi_select_device+0x44>)
    82f2:	4e0c      	ldr	r6, [pc, #48]	; (8324 <sd_mmc_spi_select_device+0x48>)
    82f4:	e001      	b.n	82fa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    82f6:	08e3      	lsrs	r3, r4, #3
    82f8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    82fa:	0021      	movs	r1, r4
    82fc:	0028      	movs	r0, r5
    82fe:	47b0      	blx	r6
    8300:	2817      	cmp	r0, #23
    8302:	d0f8      	beq.n	82f6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    8304:	0079      	lsls	r1, r7, #1
    8306:	19cf      	adds	r7, r1, r7
    8308:	4907      	ldr	r1, [pc, #28]	; (8328 <sd_mmc_spi_select_device+0x4c>)
    830a:	19c9      	adds	r1, r1, r7
    830c:	2201      	movs	r2, #1
    830e:	4804      	ldr	r0, [pc, #16]	; (8320 <sd_mmc_spi_select_device+0x44>)
    8310:	4b06      	ldr	r3, [pc, #24]	; (832c <sd_mmc_spi_select_device+0x50>)
    8312:	4798      	blx	r3
}
    8314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	2000030f 	.word	0x2000030f
    831c:	003d0900 	.word	0x003d0900
    8320:	200002fc 	.word	0x200002fc
    8324:	0000754d 	.word	0x0000754d
    8328:	2000030c 	.word	0x2000030c
    832c:	00007a1d 	.word	0x00007a1d

00008330 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    8330:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8332:	2200      	movs	r2, #0
    8334:	4b04      	ldr	r3, [pc, #16]	; (8348 <sd_mmc_spi_deselect_device+0x18>)
    8336:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    8338:	0041      	lsls	r1, r0, #1
    833a:	1808      	adds	r0, r1, r0
    833c:	4903      	ldr	r1, [pc, #12]	; (834c <sd_mmc_spi_deselect_device+0x1c>)
    833e:	1809      	adds	r1, r1, r0
    8340:	4803      	ldr	r0, [pc, #12]	; (8350 <sd_mmc_spi_deselect_device+0x20>)
    8342:	4b04      	ldr	r3, [pc, #16]	; (8354 <sd_mmc_spi_deselect_device+0x24>)
    8344:	4798      	blx	r3
}
    8346:	bd10      	pop	{r4, pc}
    8348:	2000030f 	.word	0x2000030f
    834c:	2000030c 	.word	0x2000030c
    8350:	200002fc 	.word	0x200002fc
    8354:	00007a1d 	.word	0x00007a1d

00008358 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    8358:	b570      	push	{r4, r5, r6, lr}
    835a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    835c:	22ff      	movs	r2, #255	; 0xff
    835e:	466b      	mov	r3, sp
    8360:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8362:	2200      	movs	r2, #0
    8364:	4b07      	ldr	r3, [pc, #28]	; (8384 <sd_mmc_spi_send_clock+0x2c>)
    8366:	701a      	strb	r2, [r3, #0]
    8368:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    836a:	4e07      	ldr	r6, [pc, #28]	; (8388 <sd_mmc_spi_send_clock+0x30>)
    836c:	4d07      	ldr	r5, [pc, #28]	; (838c <sd_mmc_spi_send_clock+0x34>)
    836e:	2201      	movs	r2, #1
    8370:	466b      	mov	r3, sp
    8372:	1dd9      	adds	r1, r3, #7
    8374:	0030      	movs	r0, r6
    8376:	47a8      	blx	r5
    8378:	3c01      	subs	r4, #1
    837a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    837c:	2c00      	cmp	r4, #0
    837e:	d1f6      	bne.n	836e <sd_mmc_spi_send_clock+0x16>
	}
}
    8380:	b002      	add	sp, #8
    8382:	bd70      	pop	{r4, r5, r6, pc}
    8384:	2000030f 	.word	0x2000030f
    8388:	200002fc 	.word	0x200002fc
    838c:	00007b11 	.word	0x00007b11

00008390 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    8390:	b5f0      	push	{r4, r5, r6, r7, lr}
    8392:	46c6      	mov	lr, r8
    8394:	b500      	push	{lr}
    8396:	b086      	sub	sp, #24
    8398:	4680      	mov	r8, r0
    839a:	9200      	str	r2, [sp, #0]
    839c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    839e:	22ff      	movs	r2, #255	; 0xff
    83a0:	230f      	movs	r3, #15
    83a2:	a802      	add	r0, sp, #8
    83a4:	4684      	mov	ip, r0
    83a6:	4463      	add	r3, ip
    83a8:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    83aa:	2200      	movs	r2, #0
    83ac:	4b53      	ldr	r3, [pc, #332]	; (84fc <sd_mmc_spi_adtc_start+0x16c>)
    83ae:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    83b0:	ab04      	add	r3, sp, #16
    83b2:	323f      	adds	r2, #63	; 0x3f
    83b4:	4640      	mov	r0, r8
    83b6:	4002      	ands	r2, r0
    83b8:	2040      	movs	r0, #64	; 0x40
    83ba:	4302      	orrs	r2, r0
    83bc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    83be:	0e0a      	lsrs	r2, r1, #24
    83c0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    83c2:	0c0a      	lsrs	r2, r1, #16
    83c4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    83c6:	0a0a      	lsrs	r2, r1, #8
    83c8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    83ca:	7119      	strb	r1, [r3, #4]
    83cc:	2700      	movs	r7, #0
	crc = 0;
    83ce:	2300      	movs	r3, #0
		value = *buf++;
    83d0:	a904      	add	r1, sp, #16
    83d2:	2208      	movs	r2, #8
				crc ^= 0x09;
    83d4:	2409      	movs	r4, #9
    83d6:	e011      	b.n	83fc <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    83d8:	0076      	lsls	r6, r6, #1
    83da:	b2f6      	uxtb	r6, r6
    83dc:	3801      	subs	r0, #1
    83de:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    83e0:	2800      	cmp	r0, #0
    83e2:	d008      	beq.n	83f6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    83e4:	005b      	lsls	r3, r3, #1
    83e6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    83e8:	001d      	movs	r5, r3
    83ea:	4075      	eors	r5, r6
    83ec:	062d      	lsls	r5, r5, #24
    83ee:	d5f3      	bpl.n	83d8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    83f0:	4063      	eors	r3, r4
    83f2:	b2db      	uxtb	r3, r3
    83f4:	e7f0      	b.n	83d8 <sd_mmc_spi_adtc_start+0x48>
    83f6:	3701      	adds	r7, #1
	while (size--) {
    83f8:	2f05      	cmp	r7, #5
    83fa:	d002      	beq.n	8402 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    83fc:	5c7e      	ldrb	r6, [r7, r1]
    83fe:	0010      	movs	r0, r2
    8400:	e7f0      	b.n	83e4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    8402:	005b      	lsls	r3, r3, #1
    8404:	2201      	movs	r2, #1
    8406:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    8408:	ac04      	add	r4, sp, #16
    840a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    840c:	4e3c      	ldr	r6, [pc, #240]	; (8500 <sd_mmc_spi_adtc_start+0x170>)
    840e:	2201      	movs	r2, #1
    8410:	210f      	movs	r1, #15
    8412:	ab02      	add	r3, sp, #8
    8414:	469c      	mov	ip, r3
    8416:	4461      	add	r1, ip
    8418:	0030      	movs	r0, r6
    841a:	4f3a      	ldr	r7, [pc, #232]	; (8504 <sd_mmc_spi_adtc_start+0x174>)
    841c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    841e:	2206      	movs	r2, #6
    8420:	0021      	movs	r1, r4
    8422:	0030      	movs	r0, r6
    8424:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    8426:	ab02      	add	r3, sp, #8
    8428:	1dd9      	adds	r1, r3, #7
    842a:	23ff      	movs	r3, #255	; 0xff
    842c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    842e:	2201      	movs	r2, #1
    8430:	0030      	movs	r0, r6
    8432:	4e35      	ldr	r6, [pc, #212]	; (8508 <sd_mmc_spi_adtc_start+0x178>)
    8434:	47b0      	blx	r6
    8436:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    8438:	ab02      	add	r3, sp, #8
    843a:	1dde      	adds	r6, r3, #7
    843c:	4f30      	ldr	r7, [pc, #192]	; (8500 <sd_mmc_spi_adtc_start+0x170>)
    843e:	4d32      	ldr	r5, [pc, #200]	; (8508 <sd_mmc_spi_adtc_start+0x178>)
    8440:	23ff      	movs	r3, #255	; 0xff
    8442:	2201      	movs	r2, #1
    8444:	0031      	movs	r1, r6
    8446:	0038      	movs	r0, r7
    8448:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    844a:	7833      	ldrb	r3, [r6, #0]
    844c:	b25a      	sxtb	r2, r3
    844e:	2a00      	cmp	r2, #0
    8450:	da0b      	bge.n	846a <sd_mmc_spi_adtc_start+0xda>
    8452:	3c01      	subs	r4, #1
    8454:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    8456:	2c00      	cmp	r4, #0
    8458:	d1f2      	bne.n	8440 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    845a:	2202      	movs	r2, #2
    845c:	4b27      	ldr	r3, [pc, #156]	; (84fc <sd_mmc_spi_adtc_start+0x16c>)
    845e:	701a      	strb	r2, [r3, #0]
			return false;
    8460:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    8462:	b006      	add	sp, #24
    8464:	bc04      	pop	{r2}
    8466:	4690      	mov	r8, r2
    8468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    846a:	4a28      	ldr	r2, [pc, #160]	; (850c <sd_mmc_spi_adtc_start+0x17c>)
    846c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    846e:	071a      	lsls	r2, r3, #28
    8470:	d41a      	bmi.n	84a8 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    8472:	075a      	lsls	r2, r3, #29
    8474:	d41d      	bmi.n	84b2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    8476:	2201      	movs	r2, #1
    8478:	4393      	bics	r3, r2
    847a:	d11f      	bne.n	84bc <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    847c:	4643      	mov	r3, r8
    847e:	049b      	lsls	r3, r3, #18
    8480:	d420      	bmi.n	84c4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    8482:	4643      	mov	r3, r8
    8484:	059b      	lsls	r3, r3, #22
    8486:	d425      	bmi.n	84d4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    8488:	4643      	mov	r3, r8
    848a:	055b      	lsls	r3, r3, #21
    848c:	d42b      	bmi.n	84e6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    848e:	4b20      	ldr	r3, [pc, #128]	; (8510 <sd_mmc_spi_adtc_start+0x180>)
    8490:	466a      	mov	r2, sp
    8492:	8812      	ldrh	r2, [r2, #0]
    8494:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    8496:	4b1f      	ldr	r3, [pc, #124]	; (8514 <sd_mmc_spi_adtc_start+0x184>)
    8498:	466a      	mov	r2, sp
    849a:	8892      	ldrh	r2, [r2, #4]
    849c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    849e:	2200      	movs	r2, #0
    84a0:	4b1d      	ldr	r3, [pc, #116]	; (8518 <sd_mmc_spi_adtc_start+0x188>)
    84a2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    84a4:	2001      	movs	r0, #1
    84a6:	e7dc      	b.n	8462 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    84a8:	2206      	movs	r2, #6
    84aa:	4b14      	ldr	r3, [pc, #80]	; (84fc <sd_mmc_spi_adtc_start+0x16c>)
    84ac:	701a      	strb	r2, [r3, #0]
		return false;
    84ae:	2000      	movs	r0, #0
    84b0:	e7d7      	b.n	8462 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    84b2:	2209      	movs	r2, #9
    84b4:	4b11      	ldr	r3, [pc, #68]	; (84fc <sd_mmc_spi_adtc_start+0x16c>)
    84b6:	701a      	strb	r2, [r3, #0]
		return false;
    84b8:	2000      	movs	r0, #0
    84ba:	e7d2      	b.n	8462 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    84bc:	4b0f      	ldr	r3, [pc, #60]	; (84fc <sd_mmc_spi_adtc_start+0x16c>)
    84be:	701a      	strb	r2, [r3, #0]
		return false;
    84c0:	2000      	movs	r0, #0
    84c2:	e7ce      	b.n	8462 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    84c4:	4b15      	ldr	r3, [pc, #84]	; (851c <sd_mmc_spi_adtc_start+0x18c>)
    84c6:	4798      	blx	r3
    84c8:	2800      	cmp	r0, #0
    84ca:	d1da      	bne.n	8482 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    84cc:	2203      	movs	r2, #3
    84ce:	4b0b      	ldr	r3, [pc, #44]	; (84fc <sd_mmc_spi_adtc_start+0x16c>)
    84d0:	701a      	strb	r2, [r3, #0]
			return false;
    84d2:	e7c6      	b.n	8462 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    84d4:	490d      	ldr	r1, [pc, #52]	; (850c <sd_mmc_spi_adtc_start+0x17c>)
    84d6:	2300      	movs	r3, #0
    84d8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    84da:	33ff      	adds	r3, #255	; 0xff
    84dc:	2201      	movs	r2, #1
    84de:	4808      	ldr	r0, [pc, #32]	; (8500 <sd_mmc_spi_adtc_start+0x170>)
    84e0:	4e09      	ldr	r6, [pc, #36]	; (8508 <sd_mmc_spi_adtc_start+0x178>)
    84e2:	47b0      	blx	r6
    84e4:	e7d0      	b.n	8488 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    84e6:	4e09      	ldr	r6, [pc, #36]	; (850c <sd_mmc_spi_adtc_start+0x17c>)
    84e8:	23ff      	movs	r3, #255	; 0xff
    84ea:	2204      	movs	r2, #4
    84ec:	0031      	movs	r1, r6
    84ee:	4804      	ldr	r0, [pc, #16]	; (8500 <sd_mmc_spi_adtc_start+0x170>)
    84f0:	4f05      	ldr	r7, [pc, #20]	; (8508 <sd_mmc_spi_adtc_start+0x178>)
    84f2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    84f4:	6833      	ldr	r3, [r6, #0]
    84f6:	ba1b      	rev	r3, r3
    84f8:	6033      	str	r3, [r6, #0]
    84fa:	e7c8      	b.n	848e <sd_mmc_spi_adtc_start+0xfe>
    84fc:	2000030f 	.word	0x2000030f
    8500:	200002fc 	.word	0x200002fc
    8504:	00007b11 	.word	0x00007b11
    8508:	00007905 	.word	0x00007905
    850c:	20000314 	.word	0x20000314
    8510:	20000308 	.word	0x20000308
    8514:	20000310 	.word	0x20000310
    8518:	20000318 	.word	0x20000318
    851c:	00008031 	.word	0x00008031

00008520 <sd_mmc_spi_send_cmd>:
{
    8520:	b510      	push	{r4, lr}
    8522:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    8524:	2300      	movs	r3, #0
    8526:	9300      	str	r3, [sp, #0]
    8528:	2200      	movs	r2, #0
    852a:	4c02      	ldr	r4, [pc, #8]	; (8534 <sd_mmc_spi_send_cmd+0x14>)
    852c:	47a0      	blx	r4
}
    852e:	b002      	add	sp, #8
    8530:	bd10      	pop	{r4, pc}
    8532:	46c0      	nop			; (mov r8, r8)
    8534:	00008391 	.word	0x00008391

00008538 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    8538:	4b01      	ldr	r3, [pc, #4]	; (8540 <sd_mmc_spi_get_response+0x8>)
    853a:	6818      	ldr	r0, [r3, #0]
}
    853c:	4770      	bx	lr
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	20000314 	.word	0x20000314

00008544 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    8544:	b510      	push	{r4, lr}
    8546:	b084      	sub	sp, #16
    8548:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    854a:	2200      	movs	r2, #0
    854c:	4b14      	ldr	r3, [pc, #80]	; (85a0 <sd_mmc_spi_read_word+0x5c>)
    854e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8550:	4b14      	ldr	r3, [pc, #80]	; (85a4 <sd_mmc_spi_read_word+0x60>)
    8552:	8819      	ldrh	r1, [r3, #0]
    8554:	4b14      	ldr	r3, [pc, #80]	; (85a8 <sd_mmc_spi_read_word+0x64>)
    8556:	6818      	ldr	r0, [r3, #0]
    8558:	4b14      	ldr	r3, [pc, #80]	; (85ac <sd_mmc_spi_read_word+0x68>)
    855a:	4798      	blx	r3
    855c:	2900      	cmp	r1, #0
    855e:	d103      	bne.n	8568 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    8560:	4b13      	ldr	r3, [pc, #76]	; (85b0 <sd_mmc_spi_read_word+0x6c>)
    8562:	4798      	blx	r3
    8564:	2800      	cmp	r0, #0
    8566:	d010      	beq.n	858a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    8568:	23ff      	movs	r3, #255	; 0xff
    856a:	2204      	movs	r2, #4
    856c:	a901      	add	r1, sp, #4
    856e:	4811      	ldr	r0, [pc, #68]	; (85b4 <sd_mmc_spi_read_word+0x70>)
    8570:	4c11      	ldr	r4, [pc, #68]	; (85b8 <sd_mmc_spi_read_word+0x74>)
    8572:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    8574:	4b0c      	ldr	r3, [pc, #48]	; (85a8 <sd_mmc_spi_read_word+0x64>)
    8576:	681a      	ldr	r2, [r3, #0]
    8578:	1d10      	adds	r0, r2, #4
    857a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    857c:	4b09      	ldr	r3, [pc, #36]	; (85a4 <sd_mmc_spi_read_word+0x60>)
    857e:	8819      	ldrh	r1, [r3, #0]
    8580:	4b0a      	ldr	r3, [pc, #40]	; (85ac <sd_mmc_spi_read_word+0x68>)
    8582:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    8584:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8586:	2900      	cmp	r1, #0
    8588:	d001      	beq.n	858e <sd_mmc_spi_read_word+0x4a>
}
    858a:	b004      	add	sp, #16
    858c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    858e:	23ff      	movs	r3, #255	; 0xff
    8590:	2202      	movs	r2, #2
    8592:	a903      	add	r1, sp, #12
    8594:	4807      	ldr	r0, [pc, #28]	; (85b4 <sd_mmc_spi_read_word+0x70>)
    8596:	4c08      	ldr	r4, [pc, #32]	; (85b8 <sd_mmc_spi_read_word+0x74>)
    8598:	47a0      	blx	r4
	return true;
    859a:	2001      	movs	r0, #1
    859c:	e7f5      	b.n	858a <sd_mmc_spi_read_word+0x46>
    859e:	46c0      	nop			; (mov r8, r8)
    85a0:	2000030f 	.word	0x2000030f
    85a4:	20000308 	.word	0x20000308
    85a8:	20000318 	.word	0x20000318
    85ac:	00008edd 	.word	0x00008edd
    85b0:	0000810d 	.word	0x0000810d
    85b4:	200002fc 	.word	0x200002fc
    85b8:	00007905 	.word	0x00007905

000085bc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    85bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    85be:	46de      	mov	lr, fp
    85c0:	4657      	mov	r7, sl
    85c2:	4646      	mov	r6, r8
    85c4:	b5c0      	push	{r6, r7, lr}
    85c6:	b082      	sub	sp, #8
    85c8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    85ca:	2200      	movs	r2, #0
    85cc:	4b17      	ldr	r3, [pc, #92]	; (862c <sd_mmc_spi_start_read_blocks+0x70>)
    85ce:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    85d0:	1e4c      	subs	r4, r1, #1
    85d2:	b2a4      	uxth	r4, r4
    85d4:	2900      	cmp	r1, #0
    85d6:	d026      	beq.n	8626 <sd_mmc_spi_start_read_blocks+0x6a>
    85d8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    85da:	4b15      	ldr	r3, [pc, #84]	; (8630 <sd_mmc_spi_start_read_blocks+0x74>)
    85dc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    85de:	4f15      	ldr	r7, [pc, #84]	; (8634 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    85e0:	47d0      	blx	sl
    85e2:	4680      	mov	r8, r0
    85e4:	2800      	cmp	r0, #0
    85e6:	d017      	beq.n	8618 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    85e8:	883a      	ldrh	r2, [r7, #0]
    85ea:	465b      	mov	r3, fp
    85ec:	1999      	adds	r1, r3, r6
    85ee:	23ff      	movs	r3, #255	; 0xff
    85f0:	4811      	ldr	r0, [pc, #68]	; (8638 <sd_mmc_spi_start_read_blocks+0x7c>)
    85f2:	4d12      	ldr	r5, [pc, #72]	; (863c <sd_mmc_spi_start_read_blocks+0x80>)
    85f4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    85f6:	883b      	ldrh	r3, [r7, #0]
    85f8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    85fa:	4a11      	ldr	r2, [pc, #68]	; (8640 <sd_mmc_spi_start_read_blocks+0x84>)
    85fc:	6811      	ldr	r1, [r2, #0]
    85fe:	468c      	mov	ip, r1
    8600:	4463      	add	r3, ip
    8602:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8604:	23ff      	movs	r3, #255	; 0xff
    8606:	2202      	movs	r2, #2
    8608:	a901      	add	r1, sp, #4
    860a:	480b      	ldr	r0, [pc, #44]	; (8638 <sd_mmc_spi_start_read_blocks+0x7c>)
    860c:	47a8      	blx	r5
	while (nb_block--) {
    860e:	3c01      	subs	r4, #1
    8610:	b2a4      	uxth	r4, r4
    8612:	4b0c      	ldr	r3, [pc, #48]	; (8644 <sd_mmc_spi_start_read_blocks+0x88>)
    8614:	429c      	cmp	r4, r3
    8616:	d1e3      	bne.n	85e0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    8618:	4640      	mov	r0, r8
    861a:	b002      	add	sp, #8
    861c:	bc1c      	pop	{r2, r3, r4}
    861e:	4690      	mov	r8, r2
    8620:	469a      	mov	sl, r3
    8622:	46a3      	mov	fp, r4
    8624:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    8626:	2301      	movs	r3, #1
    8628:	4698      	mov	r8, r3
    862a:	e7f5      	b.n	8618 <sd_mmc_spi_start_read_blocks+0x5c>
    862c:	2000030f 	.word	0x2000030f
    8630:	0000810d 	.word	0x0000810d
    8634:	20000308 	.word	0x20000308
    8638:	200002fc 	.word	0x200002fc
    863c:	00007905 	.word	0x00007905
    8640:	20000318 	.word	0x20000318
    8644:	0000ffff 	.word	0x0000ffff

00008648 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    8648:	2001      	movs	r0, #1
    864a:	4770      	bx	lr

0000864c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    864c:	b5f0      	push	{r4, r5, r6, r7, lr}
    864e:	46c6      	mov	lr, r8
    8650:	b500      	push	{lr}
    8652:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8654:	2200      	movs	r2, #0
    8656:	4b15      	ldr	r3, [pc, #84]	; (86ac <sd_mmc_spi_start_write_blocks+0x60>)
    8658:	701a      	strb	r2, [r3, #0]
	pos = 0;
    865a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    865c:	4f14      	ldr	r7, [pc, #80]	; (86b0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    865e:	4e15      	ldr	r6, [pc, #84]	; (86b4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    8660:	e000      	b.n	8664 <sd_mmc_spi_start_write_blocks+0x18>
{
    8662:	0021      	movs	r1, r4
	while (nb_block--) {
    8664:	1e4c      	subs	r4, r1, #1
    8666:	b2a4      	uxth	r4, r4
    8668:	2900      	cmp	r1, #0
    866a:	d01b      	beq.n	86a4 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    866c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    866e:	8832      	ldrh	r2, [r6, #0]
    8670:	4643      	mov	r3, r8
    8672:	1959      	adds	r1, r3, r5
    8674:	4810      	ldr	r0, [pc, #64]	; (86b8 <sd_mmc_spi_start_write_blocks+0x6c>)
    8676:	4b11      	ldr	r3, [pc, #68]	; (86bc <sd_mmc_spi_start_write_blocks+0x70>)
    8678:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    867a:	8833      	ldrh	r3, [r6, #0]
    867c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    867e:	4a10      	ldr	r2, [pc, #64]	; (86c0 <sd_mmc_spi_start_write_blocks+0x74>)
    8680:	6811      	ldr	r1, [r2, #0]
    8682:	468c      	mov	ip, r1
    8684:	4463      	add	r3, ip
    8686:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    8688:	4b0e      	ldr	r3, [pc, #56]	; (86c4 <sd_mmc_spi_start_write_blocks+0x78>)
    868a:	4798      	blx	r3
    868c:	2800      	cmp	r0, #0
    868e:	d00a      	beq.n	86a6 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    8690:	2c00      	cmp	r4, #0
    8692:	d0e6      	beq.n	8662 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    8694:	4b0c      	ldr	r3, [pc, #48]	; (86c8 <sd_mmc_spi_start_write_blocks+0x7c>)
    8696:	4798      	blx	r3
    8698:	2800      	cmp	r0, #0
    869a:	d1e2      	bne.n	8662 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    869c:	2205      	movs	r2, #5
    869e:	4b03      	ldr	r3, [pc, #12]	; (86ac <sd_mmc_spi_start_write_blocks+0x60>)
    86a0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    86a2:	e000      	b.n	86a6 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    86a4:	2001      	movs	r0, #1
}
    86a6:	bc04      	pop	{r2}
    86a8:	4690      	mov	r8, r2
    86aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86ac:	2000030f 	.word	0x2000030f
    86b0:	00007fe9 	.word	0x00007fe9
    86b4:	20000308 	.word	0x20000308
    86b8:	200002fc 	.word	0x200002fc
    86bc:	00007b11 	.word	0x00007b11
    86c0:	20000318 	.word	0x20000318
    86c4:	00008179 	.word	0x00008179
    86c8:	00008031 	.word	0x00008031

000086cc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    86cc:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    86ce:	4b05      	ldr	r3, [pc, #20]	; (86e4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    86d0:	4798      	blx	r3
    86d2:	2800      	cmp	r0, #0
    86d4:	d103      	bne.n	86de <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    86d6:	2205      	movs	r2, #5
    86d8:	4b03      	ldr	r3, [pc, #12]	; (86e8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    86da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    86dc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    86de:	4b03      	ldr	r3, [pc, #12]	; (86ec <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    86e0:	4798      	blx	r3
    86e2:	e7fb      	b.n	86dc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    86e4:	00008031 	.word	0x00008031
    86e8:	2000030f 	.word	0x2000030f
    86ec:	00008095 	.word	0x00008095

000086f0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    86f0:	2001      	movs	r0, #1
    86f2:	4770      	bx	lr

000086f4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    86f4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    86f6:	2301      	movs	r3, #1
    86f8:	2800      	cmp	r0, #0
    86fa:	d001      	beq.n	8700 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    86fc:	0018      	movs	r0, r3
    86fe:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    8700:	4b01      	ldr	r3, [pc, #4]	; (8708 <mem_test_unit_ready+0x14>)
    8702:	4798      	blx	r3
    8704:	0003      	movs	r3, r0
    8706:	e7f9      	b.n	86fc <mem_test_unit_ready+0x8>
    8708:	00007d69 	.word	0x00007d69

0000870c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    870c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    870e:	2301      	movs	r3, #1
    8710:	2800      	cmp	r0, #0
    8712:	d001      	beq.n	8718 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8714:	0018      	movs	r0, r3
    8716:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8718:	0008      	movs	r0, r1
    871a:	4b02      	ldr	r3, [pc, #8]	; (8724 <mem_read_capacity+0x18>)
    871c:	4798      	blx	r3
    871e:	0003      	movs	r3, r0
    8720:	e7f8      	b.n	8714 <mem_read_capacity+0x8>
    8722:	46c0      	nop			; (mov r8, r8)
    8724:	00007d99 	.word	0x00007d99

00008728 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    8728:	4243      	negs	r3, r0
    872a:	4158      	adcs	r0, r3
    872c:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    872e:	4770      	bx	lr

00008730 <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    8730:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    8732:	2000      	movs	r0, #0
    8734:	2b00      	cmp	r3, #0
    8736:	d101      	bne.n	873c <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    8738:	3001      	adds	r0, #1
    873a:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    873c:	4770      	bx	lr
	...

00008740 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    8740:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8742:	2301      	movs	r3, #1
    8744:	2800      	cmp	r0, #0
    8746:	d001      	beq.n	874c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    8748:	0018      	movs	r0, r3
    874a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    874c:	4b01      	ldr	r3, [pc, #4]	; (8754 <mem_wr_protect+0x14>)
    874e:	4798      	blx	r3
    8750:	0003      	movs	r3, r0
    8752:	e7f9      	b.n	8748 <mem_wr_protect+0x8>
    8754:	00007da9 	.word	0x00007da9

00008758 <mem_removal>:


bool mem_removal(U8 lun)
{
    8758:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    875a:	2301      	movs	r3, #1
    875c:	2800      	cmp	r0, #0
    875e:	d001      	beq.n	8764 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    8760:	0018      	movs	r0, r3
    8762:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    8764:	4b01      	ldr	r3, [pc, #4]	; (876c <mem_removal+0x14>)
    8766:	4798      	blx	r3
    8768:	0003      	movs	r3, r0
    876a:	e7f9      	b.n	8760 <mem_removal+0x8>
    876c:	00007db9 	.word	0x00007db9

00008770 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8770:	2800      	cmp	r0, #0
    8772:	d101      	bne.n	8778 <mem_name+0x8>
    8774:	4801      	ldr	r0, [pc, #4]	; (877c <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    8776:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8778:	2000      	movs	r0, #0
    877a:	e7fc      	b.n	8776 <mem_name+0x6>
    877c:	0000b07c 	.word	0x0000b07c

00008780 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    8780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8782:	0005      	movs	r5, r0
    8784:	000e      	movs	r6, r1
    8786:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    8788:	4b07      	ldr	r3, [pc, #28]	; (87a8 <memory_2_usb+0x28>)
    878a:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    878c:	2401      	movs	r4, #1
    878e:	2d00      	cmp	r5, #0
    8790:	d003      	beq.n	879a <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    8792:	4b06      	ldr	r3, [pc, #24]	; (87ac <memory_2_usb+0x2c>)
    8794:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8796:	0020      	movs	r0, r4
    8798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    879a:	0039      	movs	r1, r7
    879c:	0030      	movs	r0, r6
    879e:	4b04      	ldr	r3, [pc, #16]	; (87b0 <memory_2_usb+0x30>)
    87a0:	4798      	blx	r3
    87a2:	0004      	movs	r4, r0
    87a4:	e7f5      	b.n	8792 <memory_2_usb+0x12>
    87a6:	46c0      	nop			; (mov r8, r8)
    87a8:	00006251 	.word	0x00006251
    87ac:	00006253 	.word	0x00006253
    87b0:	00007e6d 	.word	0x00007e6d

000087b4 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    87b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87b6:	0005      	movs	r5, r0
    87b8:	000e      	movs	r6, r1
    87ba:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    87bc:	4b07      	ldr	r3, [pc, #28]	; (87dc <usb_2_memory+0x28>)
    87be:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    87c0:	2401      	movs	r4, #1
    87c2:	2d00      	cmp	r5, #0
    87c4:	d003      	beq.n	87ce <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    87c6:	4b06      	ldr	r3, [pc, #24]	; (87e0 <usb_2_memory+0x2c>)
    87c8:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    87ca:	0020      	movs	r0, r4
    87cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    87ce:	0039      	movs	r1, r7
    87d0:	0030      	movs	r0, r6
    87d2:	4b04      	ldr	r3, [pc, #16]	; (87e4 <usb_2_memory+0x30>)
    87d4:	4798      	blx	r3
    87d6:	0004      	movs	r4, r0
    87d8:	e7f5      	b.n	87c6 <usb_2_memory+0x12>
    87da:	46c0      	nop			; (mov r8, r8)
    87dc:	00006255 	.word	0x00006255
    87e0:	00006257 	.word	0x00006257
    87e4:	00007f25 	.word	0x00007f25

000087e8 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    87e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ea:	0005      	movs	r5, r0
    87ec:	000e      	movs	r6, r1
    87ee:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    87f0:	4b07      	ldr	r3, [pc, #28]	; (8810 <memory_2_ram+0x28>)
    87f2:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    87f4:	2401      	movs	r4, #1
    87f6:	2d00      	cmp	r5, #0
    87f8:	d003      	beq.n	8802 <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    87fa:	4b06      	ldr	r3, [pc, #24]	; (8814 <memory_2_ram+0x2c>)
    87fc:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    87fe:	0020      	movs	r0, r4
    8800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8802:	0039      	movs	r1, r7
    8804:	0030      	movs	r0, r6
    8806:	4b04      	ldr	r3, [pc, #16]	; (8818 <memory_2_ram+0x30>)
    8808:	4798      	blx	r3
    880a:	0004      	movs	r4, r0
    880c:	e7f5      	b.n	87fa <memory_2_ram+0x12>
    880e:	46c0      	nop			; (mov r8, r8)
    8810:	00006251 	.word	0x00006251
    8814:	00006253 	.word	0x00006253
    8818:	00007f7d 	.word	0x00007f7d

0000881c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    881e:	0005      	movs	r5, r0
    8820:	000e      	movs	r6, r1
    8822:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    8824:	4b07      	ldr	r3, [pc, #28]	; (8844 <ram_2_memory+0x28>)
    8826:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    8828:	2401      	movs	r4, #1
    882a:	2d00      	cmp	r5, #0
    882c:	d003      	beq.n	8836 <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    882e:	4b06      	ldr	r3, [pc, #24]	; (8848 <ram_2_memory+0x2c>)
    8830:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8832:	0020      	movs	r0, r4
    8834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    8836:	0039      	movs	r1, r7
    8838:	0030      	movs	r0, r6
    883a:	4b04      	ldr	r3, [pc, #16]	; (884c <ram_2_memory+0x30>)
    883c:	4798      	blx	r3
    883e:	0004      	movs	r4, r0
    8840:	e7f5      	b.n	882e <ram_2_memory+0x12>
    8842:	46c0      	nop			; (mov r8, r8)
    8844:	00006255 	.word	0x00006255
    8848:	00006257 	.word	0x00006257
    884c:	00007fd5 	.word	0x00007fd5

00008850 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    8850:	4b0c      	ldr	r3, [pc, #48]	; (8884 <cpu_irq_enter_critical+0x34>)
    8852:	681b      	ldr	r3, [r3, #0]
    8854:	2b00      	cmp	r3, #0
    8856:	d106      	bne.n	8866 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8858:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    885c:	2b00      	cmp	r3, #0
    885e:	d007      	beq.n	8870 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    8860:	2200      	movs	r2, #0
    8862:	4b09      	ldr	r3, [pc, #36]	; (8888 <cpu_irq_enter_critical+0x38>)
    8864:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8866:	4a07      	ldr	r2, [pc, #28]	; (8884 <cpu_irq_enter_critical+0x34>)
    8868:	6813      	ldr	r3, [r2, #0]
    886a:	3301      	adds	r3, #1
    886c:	6013      	str	r3, [r2, #0]
}
    886e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    8870:	b672      	cpsid	i
    8872:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    8876:	2200      	movs	r2, #0
    8878:	4b04      	ldr	r3, [pc, #16]	; (888c <cpu_irq_enter_critical+0x3c>)
    887a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    887c:	3201      	adds	r2, #1
    887e:	4b02      	ldr	r3, [pc, #8]	; (8888 <cpu_irq_enter_critical+0x38>)
    8880:	701a      	strb	r2, [r3, #0]
    8882:	e7f0      	b.n	8866 <cpu_irq_enter_critical+0x16>
    8884:	20000320 	.word	0x20000320
    8888:	20000324 	.word	0x20000324
    888c:	20000125 	.word	0x20000125

00008890 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8890:	4b08      	ldr	r3, [pc, #32]	; (88b4 <cpu_irq_leave_critical+0x24>)
    8892:	681a      	ldr	r2, [r3, #0]
    8894:	3a01      	subs	r2, #1
    8896:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    8898:	681b      	ldr	r3, [r3, #0]
    889a:	2b00      	cmp	r3, #0
    889c:	d109      	bne.n	88b2 <cpu_irq_leave_critical+0x22>
    889e:	4b06      	ldr	r3, [pc, #24]	; (88b8 <cpu_irq_leave_critical+0x28>)
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d005      	beq.n	88b2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    88a6:	2201      	movs	r2, #1
    88a8:	4b04      	ldr	r3, [pc, #16]	; (88bc <cpu_irq_leave_critical+0x2c>)
    88aa:	701a      	strb	r2, [r3, #0]
    88ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    88b0:	b662      	cpsie	i
	}
}
    88b2:	4770      	bx	lr
    88b4:	20000320 	.word	0x20000320
    88b8:	20000324 	.word	0x20000324
    88bc:	20000125 	.word	0x20000125

000088c0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    88c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    88c2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    88c4:	ac01      	add	r4, sp, #4
    88c6:	2501      	movs	r5, #1
    88c8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    88ca:	2700      	movs	r7, #0
    88cc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    88ce:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    88d0:	0021      	movs	r1, r4
    88d2:	203e      	movs	r0, #62	; 0x3e
    88d4:	4e06      	ldr	r6, [pc, #24]	; (88f0 <system_board_init+0x30>)
    88d6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    88d8:	2280      	movs	r2, #128	; 0x80
    88da:	05d2      	lsls	r2, r2, #23
    88dc:	4b05      	ldr	r3, [pc, #20]	; (88f4 <system_board_init+0x34>)
    88de:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    88e0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    88e2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    88e4:	0021      	movs	r1, r4
    88e6:	200f      	movs	r0, #15
    88e8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    88ea:	b003      	add	sp, #12
    88ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88ee:	46c0      	nop			; (mov r8, r8)
    88f0:	000088f9 	.word	0x000088f9
    88f4:	41004480 	.word	0x41004480

000088f8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    88f8:	b500      	push	{lr}
    88fa:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    88fc:	ab01      	add	r3, sp, #4
    88fe:	2280      	movs	r2, #128	; 0x80
    8900:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8902:	780a      	ldrb	r2, [r1, #0]
    8904:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    8906:	784a      	ldrb	r2, [r1, #1]
    8908:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    890a:	788a      	ldrb	r2, [r1, #2]
    890c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    890e:	0019      	movs	r1, r3
    8910:	4b01      	ldr	r3, [pc, #4]	; (8918 <port_pin_set_config+0x20>)
    8912:	4798      	blx	r3
}
    8914:	b003      	add	sp, #12
    8916:	bd00      	pop	{pc}
    8918:	00008c4d 	.word	0x00008c4d

0000891c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    891c:	4a06      	ldr	r2, [pc, #24]	; (8938 <system_gclk_init+0x1c>)
    891e:	6993      	ldr	r3, [r2, #24]
    8920:	2108      	movs	r1, #8
    8922:	430b      	orrs	r3, r1
    8924:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8926:	2201      	movs	r2, #1
    8928:	4b04      	ldr	r3, [pc, #16]	; (893c <system_gclk_init+0x20>)
    892a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    892c:	0019      	movs	r1, r3
    892e:	780b      	ldrb	r3, [r1, #0]
    8930:	4213      	tst	r3, r2
    8932:	d1fc      	bne.n	892e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8934:	4770      	bx	lr
    8936:	46c0      	nop			; (mov r8, r8)
    8938:	40000400 	.word	0x40000400
    893c:	40000c00 	.word	0x40000c00

00008940 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8940:	b570      	push	{r4, r5, r6, lr}
    8942:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8944:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8946:	780d      	ldrb	r5, [r1, #0]
    8948:	022d      	lsls	r5, r5, #8
    894a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    894c:	784b      	ldrb	r3, [r1, #1]
    894e:	2b00      	cmp	r3, #0
    8950:	d002      	beq.n	8958 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8952:	2380      	movs	r3, #128	; 0x80
    8954:	02db      	lsls	r3, r3, #11
    8956:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8958:	7a4b      	ldrb	r3, [r1, #9]
    895a:	2b00      	cmp	r3, #0
    895c:	d002      	beq.n	8964 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    895e:	2380      	movs	r3, #128	; 0x80
    8960:	031b      	lsls	r3, r3, #12
    8962:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8964:	6848      	ldr	r0, [r1, #4]
    8966:	2801      	cmp	r0, #1
    8968:	d910      	bls.n	898c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    896a:	1e43      	subs	r3, r0, #1
    896c:	4218      	tst	r0, r3
    896e:	d134      	bne.n	89da <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8970:	2802      	cmp	r0, #2
    8972:	d930      	bls.n	89d6 <system_gclk_gen_set_config+0x96>
    8974:	2302      	movs	r3, #2
    8976:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    8978:	3201      	adds	r2, #1
						mask <<= 1) {
    897a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    897c:	4298      	cmp	r0, r3
    897e:	d8fb      	bhi.n	8978 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8980:	0212      	lsls	r2, r2, #8
    8982:	4332      	orrs	r2, r6
    8984:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8986:	2380      	movs	r3, #128	; 0x80
    8988:	035b      	lsls	r3, r3, #13
    898a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    898c:	7a0b      	ldrb	r3, [r1, #8]
    898e:	2b00      	cmp	r3, #0
    8990:	d002      	beq.n	8998 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8992:	2380      	movs	r3, #128	; 0x80
    8994:	039b      	lsls	r3, r3, #14
    8996:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8998:	4a13      	ldr	r2, [pc, #76]	; (89e8 <system_gclk_gen_set_config+0xa8>)
    899a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    899c:	b25b      	sxtb	r3, r3
    899e:	2b00      	cmp	r3, #0
    89a0:	dbfb      	blt.n	899a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    89a2:	4b12      	ldr	r3, [pc, #72]	; (89ec <system_gclk_gen_set_config+0xac>)
    89a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    89a6:	4b12      	ldr	r3, [pc, #72]	; (89f0 <system_gclk_gen_set_config+0xb0>)
    89a8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89aa:	4a0f      	ldr	r2, [pc, #60]	; (89e8 <system_gclk_gen_set_config+0xa8>)
    89ac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    89ae:	b25b      	sxtb	r3, r3
    89b0:	2b00      	cmp	r3, #0
    89b2:	dbfb      	blt.n	89ac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    89b4:	4b0c      	ldr	r3, [pc, #48]	; (89e8 <system_gclk_gen_set_config+0xa8>)
    89b6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89b8:	001a      	movs	r2, r3
    89ba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    89bc:	b25b      	sxtb	r3, r3
    89be:	2b00      	cmp	r3, #0
    89c0:	dbfb      	blt.n	89ba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    89c2:	4a09      	ldr	r2, [pc, #36]	; (89e8 <system_gclk_gen_set_config+0xa8>)
    89c4:	6853      	ldr	r3, [r2, #4]
    89c6:	2180      	movs	r1, #128	; 0x80
    89c8:	0249      	lsls	r1, r1, #9
    89ca:	400b      	ands	r3, r1
    89cc:	431d      	orrs	r5, r3
    89ce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    89d0:	4b08      	ldr	r3, [pc, #32]	; (89f4 <system_gclk_gen_set_config+0xb4>)
    89d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    89d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    89d6:	2200      	movs	r2, #0
    89d8:	e7d2      	b.n	8980 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    89da:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    89dc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    89de:	2380      	movs	r3, #128	; 0x80
    89e0:	029b      	lsls	r3, r3, #10
    89e2:	431d      	orrs	r5, r3
    89e4:	e7d2      	b.n	898c <system_gclk_gen_set_config+0x4c>
    89e6:	46c0      	nop			; (mov r8, r8)
    89e8:	40000c00 	.word	0x40000c00
    89ec:	00008851 	.word	0x00008851
    89f0:	40000c08 	.word	0x40000c08
    89f4:	00008891 	.word	0x00008891

000089f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    89f8:	b510      	push	{r4, lr}
    89fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89fc:	4a0b      	ldr	r2, [pc, #44]	; (8a2c <system_gclk_gen_enable+0x34>)
    89fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8a00:	b25b      	sxtb	r3, r3
    8a02:	2b00      	cmp	r3, #0
    8a04:	dbfb      	blt.n	89fe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8a06:	4b0a      	ldr	r3, [pc, #40]	; (8a30 <system_gclk_gen_enable+0x38>)
    8a08:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8a0a:	4b0a      	ldr	r3, [pc, #40]	; (8a34 <system_gclk_gen_enable+0x3c>)
    8a0c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8a0e:	4a07      	ldr	r2, [pc, #28]	; (8a2c <system_gclk_gen_enable+0x34>)
    8a10:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8a12:	b25b      	sxtb	r3, r3
    8a14:	2b00      	cmp	r3, #0
    8a16:	dbfb      	blt.n	8a10 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8a18:	4a04      	ldr	r2, [pc, #16]	; (8a2c <system_gclk_gen_enable+0x34>)
    8a1a:	6851      	ldr	r1, [r2, #4]
    8a1c:	2380      	movs	r3, #128	; 0x80
    8a1e:	025b      	lsls	r3, r3, #9
    8a20:	430b      	orrs	r3, r1
    8a22:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8a24:	4b04      	ldr	r3, [pc, #16]	; (8a38 <system_gclk_gen_enable+0x40>)
    8a26:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8a28:	bd10      	pop	{r4, pc}
    8a2a:	46c0      	nop			; (mov r8, r8)
    8a2c:	40000c00 	.word	0x40000c00
    8a30:	00008851 	.word	0x00008851
    8a34:	40000c04 	.word	0x40000c04
    8a38:	00008891 	.word	0x00008891

00008a3c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8a3c:	b570      	push	{r4, r5, r6, lr}
    8a3e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8a40:	4a1a      	ldr	r2, [pc, #104]	; (8aac <system_gclk_gen_get_hz+0x70>)
    8a42:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8a44:	b25b      	sxtb	r3, r3
    8a46:	2b00      	cmp	r3, #0
    8a48:	dbfb      	blt.n	8a42 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    8a4a:	4b19      	ldr	r3, [pc, #100]	; (8ab0 <system_gclk_gen_get_hz+0x74>)
    8a4c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8a4e:	4b19      	ldr	r3, [pc, #100]	; (8ab4 <system_gclk_gen_get_hz+0x78>)
    8a50:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8a52:	4a16      	ldr	r2, [pc, #88]	; (8aac <system_gclk_gen_get_hz+0x70>)
    8a54:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8a56:	b25b      	sxtb	r3, r3
    8a58:	2b00      	cmp	r3, #0
    8a5a:	dbfb      	blt.n	8a54 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8a5c:	4e13      	ldr	r6, [pc, #76]	; (8aac <system_gclk_gen_get_hz+0x70>)
    8a5e:	6870      	ldr	r0, [r6, #4]
    8a60:	04c0      	lsls	r0, r0, #19
    8a62:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8a64:	4b14      	ldr	r3, [pc, #80]	; (8ab8 <system_gclk_gen_get_hz+0x7c>)
    8a66:	4798      	blx	r3
    8a68:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8a6a:	4b12      	ldr	r3, [pc, #72]	; (8ab4 <system_gclk_gen_get_hz+0x78>)
    8a6c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8a6e:	6876      	ldr	r6, [r6, #4]
    8a70:	02f6      	lsls	r6, r6, #11
    8a72:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8a74:	4b11      	ldr	r3, [pc, #68]	; (8abc <system_gclk_gen_get_hz+0x80>)
    8a76:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8a78:	4a0c      	ldr	r2, [pc, #48]	; (8aac <system_gclk_gen_get_hz+0x70>)
    8a7a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8a7c:	b25b      	sxtb	r3, r3
    8a7e:	2b00      	cmp	r3, #0
    8a80:	dbfb      	blt.n	8a7a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8a82:	4b0a      	ldr	r3, [pc, #40]	; (8aac <system_gclk_gen_get_hz+0x70>)
    8a84:	689c      	ldr	r4, [r3, #8]
    8a86:	0224      	lsls	r4, r4, #8
    8a88:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8a8a:	4b0d      	ldr	r3, [pc, #52]	; (8ac0 <system_gclk_gen_get_hz+0x84>)
    8a8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8a8e:	2e00      	cmp	r6, #0
    8a90:	d107      	bne.n	8aa2 <system_gclk_gen_get_hz+0x66>
    8a92:	2c01      	cmp	r4, #1
    8a94:	d907      	bls.n	8aa6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8a96:	0021      	movs	r1, r4
    8a98:	0028      	movs	r0, r5
    8a9a:	4b0a      	ldr	r3, [pc, #40]	; (8ac4 <system_gclk_gen_get_hz+0x88>)
    8a9c:	4798      	blx	r3
    8a9e:	0005      	movs	r5, r0
    8aa0:	e001      	b.n	8aa6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8aa2:	3401      	adds	r4, #1
    8aa4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8aa6:	0028      	movs	r0, r5
    8aa8:	bd70      	pop	{r4, r5, r6, pc}
    8aaa:	46c0      	nop			; (mov r8, r8)
    8aac:	40000c00 	.word	0x40000c00
    8ab0:	00008851 	.word	0x00008851
    8ab4:	40000c04 	.word	0x40000c04
    8ab8:	00002aad 	.word	0x00002aad
    8abc:	40000c08 	.word	0x40000c08
    8ac0:	00008891 	.word	0x00008891
    8ac4:	00008dd1 	.word	0x00008dd1

00008ac8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8ac8:	b510      	push	{r4, lr}
    8aca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8acc:	4b06      	ldr	r3, [pc, #24]	; (8ae8 <system_gclk_chan_enable+0x20>)
    8ace:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8ad0:	4b06      	ldr	r3, [pc, #24]	; (8aec <system_gclk_chan_enable+0x24>)
    8ad2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8ad4:	4a06      	ldr	r2, [pc, #24]	; (8af0 <system_gclk_chan_enable+0x28>)
    8ad6:	8853      	ldrh	r3, [r2, #2]
    8ad8:	2180      	movs	r1, #128	; 0x80
    8ada:	01c9      	lsls	r1, r1, #7
    8adc:	430b      	orrs	r3, r1
    8ade:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8ae0:	4b04      	ldr	r3, [pc, #16]	; (8af4 <system_gclk_chan_enable+0x2c>)
    8ae2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8ae4:	bd10      	pop	{r4, pc}
    8ae6:	46c0      	nop			; (mov r8, r8)
    8ae8:	00008851 	.word	0x00008851
    8aec:	40000c02 	.word	0x40000c02
    8af0:	40000c00 	.word	0x40000c00
    8af4:	00008891 	.word	0x00008891

00008af8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8af8:	b510      	push	{r4, lr}
    8afa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8afc:	4b0f      	ldr	r3, [pc, #60]	; (8b3c <system_gclk_chan_disable+0x44>)
    8afe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8b00:	4b0f      	ldr	r3, [pc, #60]	; (8b40 <system_gclk_chan_disable+0x48>)
    8b02:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8b04:	4a0f      	ldr	r2, [pc, #60]	; (8b44 <system_gclk_chan_disable+0x4c>)
    8b06:	8853      	ldrh	r3, [r2, #2]
    8b08:	051b      	lsls	r3, r3, #20
    8b0a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8b0c:	8853      	ldrh	r3, [r2, #2]
    8b0e:	490e      	ldr	r1, [pc, #56]	; (8b48 <system_gclk_chan_disable+0x50>)
    8b10:	400b      	ands	r3, r1
    8b12:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8b14:	8853      	ldrh	r3, [r2, #2]
    8b16:	490d      	ldr	r1, [pc, #52]	; (8b4c <system_gclk_chan_disable+0x54>)
    8b18:	400b      	ands	r3, r1
    8b1a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8b1c:	0011      	movs	r1, r2
    8b1e:	2280      	movs	r2, #128	; 0x80
    8b20:	01d2      	lsls	r2, r2, #7
    8b22:	884b      	ldrh	r3, [r1, #2]
    8b24:	4213      	tst	r3, r2
    8b26:	d1fc      	bne.n	8b22 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8b28:	4906      	ldr	r1, [pc, #24]	; (8b44 <system_gclk_chan_disable+0x4c>)
    8b2a:	884a      	ldrh	r2, [r1, #2]
    8b2c:	0203      	lsls	r3, r0, #8
    8b2e:	4806      	ldr	r0, [pc, #24]	; (8b48 <system_gclk_chan_disable+0x50>)
    8b30:	4002      	ands	r2, r0
    8b32:	4313      	orrs	r3, r2
    8b34:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8b36:	4b06      	ldr	r3, [pc, #24]	; (8b50 <system_gclk_chan_disable+0x58>)
    8b38:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8b3a:	bd10      	pop	{r4, pc}
    8b3c:	00008851 	.word	0x00008851
    8b40:	40000c02 	.word	0x40000c02
    8b44:	40000c00 	.word	0x40000c00
    8b48:	fffff0ff 	.word	0xfffff0ff
    8b4c:	ffffbfff 	.word	0xffffbfff
    8b50:	00008891 	.word	0x00008891

00008b54 <system_gclk_chan_set_config>:
{
    8b54:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8b56:	780c      	ldrb	r4, [r1, #0]
    8b58:	0224      	lsls	r4, r4, #8
    8b5a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8b5c:	4b02      	ldr	r3, [pc, #8]	; (8b68 <system_gclk_chan_set_config+0x14>)
    8b5e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8b60:	b2a4      	uxth	r4, r4
    8b62:	4b02      	ldr	r3, [pc, #8]	; (8b6c <system_gclk_chan_set_config+0x18>)
    8b64:	805c      	strh	r4, [r3, #2]
}
    8b66:	bd10      	pop	{r4, pc}
    8b68:	00008af9 	.word	0x00008af9
    8b6c:	40000c00 	.word	0x40000c00

00008b70 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8b70:	b510      	push	{r4, lr}
    8b72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8b74:	4b06      	ldr	r3, [pc, #24]	; (8b90 <system_gclk_chan_get_hz+0x20>)
    8b76:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8b78:	4b06      	ldr	r3, [pc, #24]	; (8b94 <system_gclk_chan_get_hz+0x24>)
    8b7a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8b7c:	4b06      	ldr	r3, [pc, #24]	; (8b98 <system_gclk_chan_get_hz+0x28>)
    8b7e:	885c      	ldrh	r4, [r3, #2]
    8b80:	0524      	lsls	r4, r4, #20
    8b82:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8b84:	4b05      	ldr	r3, [pc, #20]	; (8b9c <system_gclk_chan_get_hz+0x2c>)
    8b86:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8b88:	0020      	movs	r0, r4
    8b8a:	4b05      	ldr	r3, [pc, #20]	; (8ba0 <system_gclk_chan_get_hz+0x30>)
    8b8c:	4798      	blx	r3
}
    8b8e:	bd10      	pop	{r4, pc}
    8b90:	00008851 	.word	0x00008851
    8b94:	40000c02 	.word	0x40000c02
    8b98:	40000c00 	.word	0x40000c00
    8b9c:	00008891 	.word	0x00008891
    8ba0:	00008a3d 	.word	0x00008a3d

00008ba4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8ba4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8ba6:	78d3      	ldrb	r3, [r2, #3]
    8ba8:	2b00      	cmp	r3, #0
    8baa:	d135      	bne.n	8c18 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8bac:	7813      	ldrb	r3, [r2, #0]
    8bae:	2b80      	cmp	r3, #128	; 0x80
    8bb0:	d029      	beq.n	8c06 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8bb2:	061b      	lsls	r3, r3, #24
    8bb4:	2480      	movs	r4, #128	; 0x80
    8bb6:	0264      	lsls	r4, r4, #9
    8bb8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8bba:	7854      	ldrb	r4, [r2, #1]
    8bbc:	2502      	movs	r5, #2
    8bbe:	43ac      	bics	r4, r5
    8bc0:	d106      	bne.n	8bd0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8bc2:	7894      	ldrb	r4, [r2, #2]
    8bc4:	2c00      	cmp	r4, #0
    8bc6:	d120      	bne.n	8c0a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8bc8:	2480      	movs	r4, #128	; 0x80
    8bca:	02a4      	lsls	r4, r4, #10
    8bcc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8bce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8bd0:	7854      	ldrb	r4, [r2, #1]
    8bd2:	3c01      	subs	r4, #1
    8bd4:	2c01      	cmp	r4, #1
    8bd6:	d91c      	bls.n	8c12 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8bd8:	040d      	lsls	r5, r1, #16
    8bda:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8bdc:	24a0      	movs	r4, #160	; 0xa0
    8bde:	05e4      	lsls	r4, r4, #23
    8be0:	432c      	orrs	r4, r5
    8be2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8be4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8be6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8be8:	24d0      	movs	r4, #208	; 0xd0
    8bea:	0624      	lsls	r4, r4, #24
    8bec:	432c      	orrs	r4, r5
    8bee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8bf0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8bf2:	78d4      	ldrb	r4, [r2, #3]
    8bf4:	2c00      	cmp	r4, #0
    8bf6:	d122      	bne.n	8c3e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8bf8:	035b      	lsls	r3, r3, #13
    8bfa:	d51c      	bpl.n	8c36 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8bfc:	7893      	ldrb	r3, [r2, #2]
    8bfe:	2b01      	cmp	r3, #1
    8c00:	d01e      	beq.n	8c40 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8c02:	6141      	str	r1, [r0, #20]
    8c04:	e017      	b.n	8c36 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8c06:	2300      	movs	r3, #0
    8c08:	e7d7      	b.n	8bba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8c0a:	24c0      	movs	r4, #192	; 0xc0
    8c0c:	02e4      	lsls	r4, r4, #11
    8c0e:	4323      	orrs	r3, r4
    8c10:	e7dd      	b.n	8bce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8c12:	4c0d      	ldr	r4, [pc, #52]	; (8c48 <_system_pinmux_config+0xa4>)
    8c14:	4023      	ands	r3, r4
    8c16:	e7df      	b.n	8bd8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8c18:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8c1a:	040c      	lsls	r4, r1, #16
    8c1c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8c1e:	23a0      	movs	r3, #160	; 0xa0
    8c20:	05db      	lsls	r3, r3, #23
    8c22:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8c24:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8c26:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8c28:	23d0      	movs	r3, #208	; 0xd0
    8c2a:	061b      	lsls	r3, r3, #24
    8c2c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8c2e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8c30:	78d3      	ldrb	r3, [r2, #3]
    8c32:	2b00      	cmp	r3, #0
    8c34:	d103      	bne.n	8c3e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8c36:	7853      	ldrb	r3, [r2, #1]
    8c38:	3b01      	subs	r3, #1
    8c3a:	2b01      	cmp	r3, #1
    8c3c:	d902      	bls.n	8c44 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8c3e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8c40:	6181      	str	r1, [r0, #24]
    8c42:	e7f8      	b.n	8c36 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8c44:	6081      	str	r1, [r0, #8]
}
    8c46:	e7fa      	b.n	8c3e <_system_pinmux_config+0x9a>
    8c48:	fffbffff 	.word	0xfffbffff

00008c4c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8c4c:	b510      	push	{r4, lr}
    8c4e:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8c50:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8c52:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8c54:	2900      	cmp	r1, #0
    8c56:	d104      	bne.n	8c62 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8c58:	0943      	lsrs	r3, r0, #5
    8c5a:	01db      	lsls	r3, r3, #7
    8c5c:	4905      	ldr	r1, [pc, #20]	; (8c74 <system_pinmux_pin_set_config+0x28>)
    8c5e:	468c      	mov	ip, r1
    8c60:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8c62:	241f      	movs	r4, #31
    8c64:	4020      	ands	r0, r4
    8c66:	2101      	movs	r1, #1
    8c68:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8c6a:	0018      	movs	r0, r3
    8c6c:	4b02      	ldr	r3, [pc, #8]	; (8c78 <system_pinmux_pin_set_config+0x2c>)
    8c6e:	4798      	blx	r3
}
    8c70:	bd10      	pop	{r4, pc}
    8c72:	46c0      	nop			; (mov r8, r8)
    8c74:	41004400 	.word	0x41004400
    8c78:	00008ba5 	.word	0x00008ba5

00008c7c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8c7c:	4770      	bx	lr
	...

00008c80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8c80:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8c82:	4b05      	ldr	r3, [pc, #20]	; (8c98 <system_init+0x18>)
    8c84:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8c86:	4b05      	ldr	r3, [pc, #20]	; (8c9c <system_init+0x1c>)
    8c88:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8c8a:	4b05      	ldr	r3, [pc, #20]	; (8ca0 <system_init+0x20>)
    8c8c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8c8e:	4b05      	ldr	r3, [pc, #20]	; (8ca4 <system_init+0x24>)
    8c90:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8c92:	4b05      	ldr	r3, [pc, #20]	; (8ca8 <system_init+0x28>)
    8c94:	4798      	blx	r3
}
    8c96:	bd10      	pop	{r4, pc}
    8c98:	00002d29 	.word	0x00002d29
    8c9c:	000088c1 	.word	0x000088c1
    8ca0:	00008c7d 	.word	0x00008c7d
    8ca4:	0000203d 	.word	0x0000203d
    8ca8:	00008c7d 	.word	0x00008c7d

00008cac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8cac:	e7fe      	b.n	8cac <Dummy_Handler>
	...

00008cb0 <Reset_Handler>:
{
    8cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8cb2:	4a2a      	ldr	r2, [pc, #168]	; (8d5c <Reset_Handler+0xac>)
    8cb4:	4b2a      	ldr	r3, [pc, #168]	; (8d60 <Reset_Handler+0xb0>)
    8cb6:	429a      	cmp	r2, r3
    8cb8:	d011      	beq.n	8cde <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8cba:	001a      	movs	r2, r3
    8cbc:	4b29      	ldr	r3, [pc, #164]	; (8d64 <Reset_Handler+0xb4>)
    8cbe:	429a      	cmp	r2, r3
    8cc0:	d20d      	bcs.n	8cde <Reset_Handler+0x2e>
    8cc2:	4a29      	ldr	r2, [pc, #164]	; (8d68 <Reset_Handler+0xb8>)
    8cc4:	3303      	adds	r3, #3
    8cc6:	1a9b      	subs	r3, r3, r2
    8cc8:	089b      	lsrs	r3, r3, #2
    8cca:	3301      	adds	r3, #1
    8ccc:	009b      	lsls	r3, r3, #2
    8cce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8cd0:	4823      	ldr	r0, [pc, #140]	; (8d60 <Reset_Handler+0xb0>)
    8cd2:	4922      	ldr	r1, [pc, #136]	; (8d5c <Reset_Handler+0xac>)
    8cd4:	588c      	ldr	r4, [r1, r2]
    8cd6:	5084      	str	r4, [r0, r2]
    8cd8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8cda:	429a      	cmp	r2, r3
    8cdc:	d1fa      	bne.n	8cd4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8cde:	4a23      	ldr	r2, [pc, #140]	; (8d6c <Reset_Handler+0xbc>)
    8ce0:	4b23      	ldr	r3, [pc, #140]	; (8d70 <Reset_Handler+0xc0>)
    8ce2:	429a      	cmp	r2, r3
    8ce4:	d20a      	bcs.n	8cfc <Reset_Handler+0x4c>
    8ce6:	43d3      	mvns	r3, r2
    8ce8:	4921      	ldr	r1, [pc, #132]	; (8d70 <Reset_Handler+0xc0>)
    8cea:	185b      	adds	r3, r3, r1
    8cec:	2103      	movs	r1, #3
    8cee:	438b      	bics	r3, r1
    8cf0:	3304      	adds	r3, #4
    8cf2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8cf4:	2100      	movs	r1, #0
    8cf6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8cf8:	4293      	cmp	r3, r2
    8cfa:	d1fc      	bne.n	8cf6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8cfc:	4a1d      	ldr	r2, [pc, #116]	; (8d74 <Reset_Handler+0xc4>)
    8cfe:	21ff      	movs	r1, #255	; 0xff
    8d00:	4b1d      	ldr	r3, [pc, #116]	; (8d78 <Reset_Handler+0xc8>)
    8d02:	438b      	bics	r3, r1
    8d04:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8d06:	39fd      	subs	r1, #253	; 0xfd
    8d08:	2390      	movs	r3, #144	; 0x90
    8d0a:	005b      	lsls	r3, r3, #1
    8d0c:	4a1b      	ldr	r2, [pc, #108]	; (8d7c <Reset_Handler+0xcc>)
    8d0e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8d10:	4a1b      	ldr	r2, [pc, #108]	; (8d80 <Reset_Handler+0xd0>)
    8d12:	78d3      	ldrb	r3, [r2, #3]
    8d14:	2503      	movs	r5, #3
    8d16:	43ab      	bics	r3, r5
    8d18:	2402      	movs	r4, #2
    8d1a:	4323      	orrs	r3, r4
    8d1c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8d1e:	78d3      	ldrb	r3, [r2, #3]
    8d20:	270c      	movs	r7, #12
    8d22:	43bb      	bics	r3, r7
    8d24:	2608      	movs	r6, #8
    8d26:	4333      	orrs	r3, r6
    8d28:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8d2a:	4b16      	ldr	r3, [pc, #88]	; (8d84 <Reset_Handler+0xd4>)
    8d2c:	7b98      	ldrb	r0, [r3, #14]
    8d2e:	2230      	movs	r2, #48	; 0x30
    8d30:	4390      	bics	r0, r2
    8d32:	2220      	movs	r2, #32
    8d34:	4310      	orrs	r0, r2
    8d36:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8d38:	7b99      	ldrb	r1, [r3, #14]
    8d3a:	43b9      	bics	r1, r7
    8d3c:	4331      	orrs	r1, r6
    8d3e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8d40:	7b9a      	ldrb	r2, [r3, #14]
    8d42:	43aa      	bics	r2, r5
    8d44:	4322      	orrs	r2, r4
    8d46:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8d48:	4a0f      	ldr	r2, [pc, #60]	; (8d88 <Reset_Handler+0xd8>)
    8d4a:	6853      	ldr	r3, [r2, #4]
    8d4c:	2180      	movs	r1, #128	; 0x80
    8d4e:	430b      	orrs	r3, r1
    8d50:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8d52:	4b0e      	ldr	r3, [pc, #56]	; (8d8c <Reset_Handler+0xdc>)
    8d54:	4798      	blx	r3
        main();
    8d56:	4b0e      	ldr	r3, [pc, #56]	; (8d90 <Reset_Handler+0xe0>)
    8d58:	4798      	blx	r3
    8d5a:	e7fe      	b.n	8d5a <Reset_Handler+0xaa>
    8d5c:	0000b154 	.word	0x0000b154
    8d60:	20000000 	.word	0x20000000
    8d64:	2000018c 	.word	0x2000018c
    8d68:	20000004 	.word	0x20000004
    8d6c:	2000018c 	.word	0x2000018c
    8d70:	20001ba4 	.word	0x20001ba4
    8d74:	e000ed00 	.word	0xe000ed00
    8d78:	00000000 	.word	0x00000000
    8d7c:	41007000 	.word	0x41007000
    8d80:	41005000 	.word	0x41005000
    8d84:	41004800 	.word	0x41004800
    8d88:	41004000 	.word	0x41004000
    8d8c:	00009365 	.word	0x00009365
    8d90:	00005bb5 	.word	0x00005bb5

00008d94 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8d94:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8d96:	4a06      	ldr	r2, [pc, #24]	; (8db0 <_sbrk+0x1c>)
    8d98:	6812      	ldr	r2, [r2, #0]
    8d9a:	2a00      	cmp	r2, #0
    8d9c:	d004      	beq.n	8da8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8d9e:	4a04      	ldr	r2, [pc, #16]	; (8db0 <_sbrk+0x1c>)
    8da0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8da2:	18c3      	adds	r3, r0, r3
    8da4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8da6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8da8:	4902      	ldr	r1, [pc, #8]	; (8db4 <_sbrk+0x20>)
    8daa:	4a01      	ldr	r2, [pc, #4]	; (8db0 <_sbrk+0x1c>)
    8dac:	6011      	str	r1, [r2, #0]
    8dae:	e7f6      	b.n	8d9e <_sbrk+0xa>
    8db0:	20000328 	.word	0x20000328
    8db4:	20003ba8 	.word	0x20003ba8

00008db8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8db8:	2001      	movs	r0, #1
    8dba:	4240      	negs	r0, r0
    8dbc:	4770      	bx	lr

00008dbe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8dbe:	2380      	movs	r3, #128	; 0x80
    8dc0:	019b      	lsls	r3, r3, #6
    8dc2:	604b      	str	r3, [r1, #4]

	return 0;
}
    8dc4:	2000      	movs	r0, #0
    8dc6:	4770      	bx	lr

00008dc8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8dc8:	2001      	movs	r0, #1
    8dca:	4770      	bx	lr

00008dcc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8dcc:	2000      	movs	r0, #0
    8dce:	4770      	bx	lr

00008dd0 <__udivsi3>:
    8dd0:	2200      	movs	r2, #0
    8dd2:	0843      	lsrs	r3, r0, #1
    8dd4:	428b      	cmp	r3, r1
    8dd6:	d374      	bcc.n	8ec2 <__udivsi3+0xf2>
    8dd8:	0903      	lsrs	r3, r0, #4
    8dda:	428b      	cmp	r3, r1
    8ddc:	d35f      	bcc.n	8e9e <__udivsi3+0xce>
    8dde:	0a03      	lsrs	r3, r0, #8
    8de0:	428b      	cmp	r3, r1
    8de2:	d344      	bcc.n	8e6e <__udivsi3+0x9e>
    8de4:	0b03      	lsrs	r3, r0, #12
    8de6:	428b      	cmp	r3, r1
    8de8:	d328      	bcc.n	8e3c <__udivsi3+0x6c>
    8dea:	0c03      	lsrs	r3, r0, #16
    8dec:	428b      	cmp	r3, r1
    8dee:	d30d      	bcc.n	8e0c <__udivsi3+0x3c>
    8df0:	22ff      	movs	r2, #255	; 0xff
    8df2:	0209      	lsls	r1, r1, #8
    8df4:	ba12      	rev	r2, r2
    8df6:	0c03      	lsrs	r3, r0, #16
    8df8:	428b      	cmp	r3, r1
    8dfa:	d302      	bcc.n	8e02 <__udivsi3+0x32>
    8dfc:	1212      	asrs	r2, r2, #8
    8dfe:	0209      	lsls	r1, r1, #8
    8e00:	d065      	beq.n	8ece <__udivsi3+0xfe>
    8e02:	0b03      	lsrs	r3, r0, #12
    8e04:	428b      	cmp	r3, r1
    8e06:	d319      	bcc.n	8e3c <__udivsi3+0x6c>
    8e08:	e000      	b.n	8e0c <__udivsi3+0x3c>
    8e0a:	0a09      	lsrs	r1, r1, #8
    8e0c:	0bc3      	lsrs	r3, r0, #15
    8e0e:	428b      	cmp	r3, r1
    8e10:	d301      	bcc.n	8e16 <__udivsi3+0x46>
    8e12:	03cb      	lsls	r3, r1, #15
    8e14:	1ac0      	subs	r0, r0, r3
    8e16:	4152      	adcs	r2, r2
    8e18:	0b83      	lsrs	r3, r0, #14
    8e1a:	428b      	cmp	r3, r1
    8e1c:	d301      	bcc.n	8e22 <__udivsi3+0x52>
    8e1e:	038b      	lsls	r3, r1, #14
    8e20:	1ac0      	subs	r0, r0, r3
    8e22:	4152      	adcs	r2, r2
    8e24:	0b43      	lsrs	r3, r0, #13
    8e26:	428b      	cmp	r3, r1
    8e28:	d301      	bcc.n	8e2e <__udivsi3+0x5e>
    8e2a:	034b      	lsls	r3, r1, #13
    8e2c:	1ac0      	subs	r0, r0, r3
    8e2e:	4152      	adcs	r2, r2
    8e30:	0b03      	lsrs	r3, r0, #12
    8e32:	428b      	cmp	r3, r1
    8e34:	d301      	bcc.n	8e3a <__udivsi3+0x6a>
    8e36:	030b      	lsls	r3, r1, #12
    8e38:	1ac0      	subs	r0, r0, r3
    8e3a:	4152      	adcs	r2, r2
    8e3c:	0ac3      	lsrs	r3, r0, #11
    8e3e:	428b      	cmp	r3, r1
    8e40:	d301      	bcc.n	8e46 <__udivsi3+0x76>
    8e42:	02cb      	lsls	r3, r1, #11
    8e44:	1ac0      	subs	r0, r0, r3
    8e46:	4152      	adcs	r2, r2
    8e48:	0a83      	lsrs	r3, r0, #10
    8e4a:	428b      	cmp	r3, r1
    8e4c:	d301      	bcc.n	8e52 <__udivsi3+0x82>
    8e4e:	028b      	lsls	r3, r1, #10
    8e50:	1ac0      	subs	r0, r0, r3
    8e52:	4152      	adcs	r2, r2
    8e54:	0a43      	lsrs	r3, r0, #9
    8e56:	428b      	cmp	r3, r1
    8e58:	d301      	bcc.n	8e5e <__udivsi3+0x8e>
    8e5a:	024b      	lsls	r3, r1, #9
    8e5c:	1ac0      	subs	r0, r0, r3
    8e5e:	4152      	adcs	r2, r2
    8e60:	0a03      	lsrs	r3, r0, #8
    8e62:	428b      	cmp	r3, r1
    8e64:	d301      	bcc.n	8e6a <__udivsi3+0x9a>
    8e66:	020b      	lsls	r3, r1, #8
    8e68:	1ac0      	subs	r0, r0, r3
    8e6a:	4152      	adcs	r2, r2
    8e6c:	d2cd      	bcs.n	8e0a <__udivsi3+0x3a>
    8e6e:	09c3      	lsrs	r3, r0, #7
    8e70:	428b      	cmp	r3, r1
    8e72:	d301      	bcc.n	8e78 <__udivsi3+0xa8>
    8e74:	01cb      	lsls	r3, r1, #7
    8e76:	1ac0      	subs	r0, r0, r3
    8e78:	4152      	adcs	r2, r2
    8e7a:	0983      	lsrs	r3, r0, #6
    8e7c:	428b      	cmp	r3, r1
    8e7e:	d301      	bcc.n	8e84 <__udivsi3+0xb4>
    8e80:	018b      	lsls	r3, r1, #6
    8e82:	1ac0      	subs	r0, r0, r3
    8e84:	4152      	adcs	r2, r2
    8e86:	0943      	lsrs	r3, r0, #5
    8e88:	428b      	cmp	r3, r1
    8e8a:	d301      	bcc.n	8e90 <__udivsi3+0xc0>
    8e8c:	014b      	lsls	r3, r1, #5
    8e8e:	1ac0      	subs	r0, r0, r3
    8e90:	4152      	adcs	r2, r2
    8e92:	0903      	lsrs	r3, r0, #4
    8e94:	428b      	cmp	r3, r1
    8e96:	d301      	bcc.n	8e9c <__udivsi3+0xcc>
    8e98:	010b      	lsls	r3, r1, #4
    8e9a:	1ac0      	subs	r0, r0, r3
    8e9c:	4152      	adcs	r2, r2
    8e9e:	08c3      	lsrs	r3, r0, #3
    8ea0:	428b      	cmp	r3, r1
    8ea2:	d301      	bcc.n	8ea8 <__udivsi3+0xd8>
    8ea4:	00cb      	lsls	r3, r1, #3
    8ea6:	1ac0      	subs	r0, r0, r3
    8ea8:	4152      	adcs	r2, r2
    8eaa:	0883      	lsrs	r3, r0, #2
    8eac:	428b      	cmp	r3, r1
    8eae:	d301      	bcc.n	8eb4 <__udivsi3+0xe4>
    8eb0:	008b      	lsls	r3, r1, #2
    8eb2:	1ac0      	subs	r0, r0, r3
    8eb4:	4152      	adcs	r2, r2
    8eb6:	0843      	lsrs	r3, r0, #1
    8eb8:	428b      	cmp	r3, r1
    8eba:	d301      	bcc.n	8ec0 <__udivsi3+0xf0>
    8ebc:	004b      	lsls	r3, r1, #1
    8ebe:	1ac0      	subs	r0, r0, r3
    8ec0:	4152      	adcs	r2, r2
    8ec2:	1a41      	subs	r1, r0, r1
    8ec4:	d200      	bcs.n	8ec8 <__udivsi3+0xf8>
    8ec6:	4601      	mov	r1, r0
    8ec8:	4152      	adcs	r2, r2
    8eca:	4610      	mov	r0, r2
    8ecc:	4770      	bx	lr
    8ece:	e7ff      	b.n	8ed0 <__udivsi3+0x100>
    8ed0:	b501      	push	{r0, lr}
    8ed2:	2000      	movs	r0, #0
    8ed4:	f000 f8f0 	bl	90b8 <__aeabi_idiv0>
    8ed8:	bd02      	pop	{r1, pc}
    8eda:	46c0      	nop			; (mov r8, r8)

00008edc <__aeabi_uidivmod>:
    8edc:	2900      	cmp	r1, #0
    8ede:	d0f7      	beq.n	8ed0 <__udivsi3+0x100>
    8ee0:	e776      	b.n	8dd0 <__udivsi3>
    8ee2:	4770      	bx	lr

00008ee4 <__divsi3>:
    8ee4:	4603      	mov	r3, r0
    8ee6:	430b      	orrs	r3, r1
    8ee8:	d47f      	bmi.n	8fea <__divsi3+0x106>
    8eea:	2200      	movs	r2, #0
    8eec:	0843      	lsrs	r3, r0, #1
    8eee:	428b      	cmp	r3, r1
    8ef0:	d374      	bcc.n	8fdc <__divsi3+0xf8>
    8ef2:	0903      	lsrs	r3, r0, #4
    8ef4:	428b      	cmp	r3, r1
    8ef6:	d35f      	bcc.n	8fb8 <__divsi3+0xd4>
    8ef8:	0a03      	lsrs	r3, r0, #8
    8efa:	428b      	cmp	r3, r1
    8efc:	d344      	bcc.n	8f88 <__divsi3+0xa4>
    8efe:	0b03      	lsrs	r3, r0, #12
    8f00:	428b      	cmp	r3, r1
    8f02:	d328      	bcc.n	8f56 <__divsi3+0x72>
    8f04:	0c03      	lsrs	r3, r0, #16
    8f06:	428b      	cmp	r3, r1
    8f08:	d30d      	bcc.n	8f26 <__divsi3+0x42>
    8f0a:	22ff      	movs	r2, #255	; 0xff
    8f0c:	0209      	lsls	r1, r1, #8
    8f0e:	ba12      	rev	r2, r2
    8f10:	0c03      	lsrs	r3, r0, #16
    8f12:	428b      	cmp	r3, r1
    8f14:	d302      	bcc.n	8f1c <__divsi3+0x38>
    8f16:	1212      	asrs	r2, r2, #8
    8f18:	0209      	lsls	r1, r1, #8
    8f1a:	d065      	beq.n	8fe8 <__divsi3+0x104>
    8f1c:	0b03      	lsrs	r3, r0, #12
    8f1e:	428b      	cmp	r3, r1
    8f20:	d319      	bcc.n	8f56 <__divsi3+0x72>
    8f22:	e000      	b.n	8f26 <__divsi3+0x42>
    8f24:	0a09      	lsrs	r1, r1, #8
    8f26:	0bc3      	lsrs	r3, r0, #15
    8f28:	428b      	cmp	r3, r1
    8f2a:	d301      	bcc.n	8f30 <__divsi3+0x4c>
    8f2c:	03cb      	lsls	r3, r1, #15
    8f2e:	1ac0      	subs	r0, r0, r3
    8f30:	4152      	adcs	r2, r2
    8f32:	0b83      	lsrs	r3, r0, #14
    8f34:	428b      	cmp	r3, r1
    8f36:	d301      	bcc.n	8f3c <__divsi3+0x58>
    8f38:	038b      	lsls	r3, r1, #14
    8f3a:	1ac0      	subs	r0, r0, r3
    8f3c:	4152      	adcs	r2, r2
    8f3e:	0b43      	lsrs	r3, r0, #13
    8f40:	428b      	cmp	r3, r1
    8f42:	d301      	bcc.n	8f48 <__divsi3+0x64>
    8f44:	034b      	lsls	r3, r1, #13
    8f46:	1ac0      	subs	r0, r0, r3
    8f48:	4152      	adcs	r2, r2
    8f4a:	0b03      	lsrs	r3, r0, #12
    8f4c:	428b      	cmp	r3, r1
    8f4e:	d301      	bcc.n	8f54 <__divsi3+0x70>
    8f50:	030b      	lsls	r3, r1, #12
    8f52:	1ac0      	subs	r0, r0, r3
    8f54:	4152      	adcs	r2, r2
    8f56:	0ac3      	lsrs	r3, r0, #11
    8f58:	428b      	cmp	r3, r1
    8f5a:	d301      	bcc.n	8f60 <__divsi3+0x7c>
    8f5c:	02cb      	lsls	r3, r1, #11
    8f5e:	1ac0      	subs	r0, r0, r3
    8f60:	4152      	adcs	r2, r2
    8f62:	0a83      	lsrs	r3, r0, #10
    8f64:	428b      	cmp	r3, r1
    8f66:	d301      	bcc.n	8f6c <__divsi3+0x88>
    8f68:	028b      	lsls	r3, r1, #10
    8f6a:	1ac0      	subs	r0, r0, r3
    8f6c:	4152      	adcs	r2, r2
    8f6e:	0a43      	lsrs	r3, r0, #9
    8f70:	428b      	cmp	r3, r1
    8f72:	d301      	bcc.n	8f78 <__divsi3+0x94>
    8f74:	024b      	lsls	r3, r1, #9
    8f76:	1ac0      	subs	r0, r0, r3
    8f78:	4152      	adcs	r2, r2
    8f7a:	0a03      	lsrs	r3, r0, #8
    8f7c:	428b      	cmp	r3, r1
    8f7e:	d301      	bcc.n	8f84 <__divsi3+0xa0>
    8f80:	020b      	lsls	r3, r1, #8
    8f82:	1ac0      	subs	r0, r0, r3
    8f84:	4152      	adcs	r2, r2
    8f86:	d2cd      	bcs.n	8f24 <__divsi3+0x40>
    8f88:	09c3      	lsrs	r3, r0, #7
    8f8a:	428b      	cmp	r3, r1
    8f8c:	d301      	bcc.n	8f92 <__divsi3+0xae>
    8f8e:	01cb      	lsls	r3, r1, #7
    8f90:	1ac0      	subs	r0, r0, r3
    8f92:	4152      	adcs	r2, r2
    8f94:	0983      	lsrs	r3, r0, #6
    8f96:	428b      	cmp	r3, r1
    8f98:	d301      	bcc.n	8f9e <__divsi3+0xba>
    8f9a:	018b      	lsls	r3, r1, #6
    8f9c:	1ac0      	subs	r0, r0, r3
    8f9e:	4152      	adcs	r2, r2
    8fa0:	0943      	lsrs	r3, r0, #5
    8fa2:	428b      	cmp	r3, r1
    8fa4:	d301      	bcc.n	8faa <__divsi3+0xc6>
    8fa6:	014b      	lsls	r3, r1, #5
    8fa8:	1ac0      	subs	r0, r0, r3
    8faa:	4152      	adcs	r2, r2
    8fac:	0903      	lsrs	r3, r0, #4
    8fae:	428b      	cmp	r3, r1
    8fb0:	d301      	bcc.n	8fb6 <__divsi3+0xd2>
    8fb2:	010b      	lsls	r3, r1, #4
    8fb4:	1ac0      	subs	r0, r0, r3
    8fb6:	4152      	adcs	r2, r2
    8fb8:	08c3      	lsrs	r3, r0, #3
    8fba:	428b      	cmp	r3, r1
    8fbc:	d301      	bcc.n	8fc2 <__divsi3+0xde>
    8fbe:	00cb      	lsls	r3, r1, #3
    8fc0:	1ac0      	subs	r0, r0, r3
    8fc2:	4152      	adcs	r2, r2
    8fc4:	0883      	lsrs	r3, r0, #2
    8fc6:	428b      	cmp	r3, r1
    8fc8:	d301      	bcc.n	8fce <__divsi3+0xea>
    8fca:	008b      	lsls	r3, r1, #2
    8fcc:	1ac0      	subs	r0, r0, r3
    8fce:	4152      	adcs	r2, r2
    8fd0:	0843      	lsrs	r3, r0, #1
    8fd2:	428b      	cmp	r3, r1
    8fd4:	d301      	bcc.n	8fda <__divsi3+0xf6>
    8fd6:	004b      	lsls	r3, r1, #1
    8fd8:	1ac0      	subs	r0, r0, r3
    8fda:	4152      	adcs	r2, r2
    8fdc:	1a41      	subs	r1, r0, r1
    8fde:	d200      	bcs.n	8fe2 <__divsi3+0xfe>
    8fe0:	4601      	mov	r1, r0
    8fe2:	4152      	adcs	r2, r2
    8fe4:	4610      	mov	r0, r2
    8fe6:	4770      	bx	lr
    8fe8:	e05d      	b.n	90a6 <__divsi3+0x1c2>
    8fea:	0fca      	lsrs	r2, r1, #31
    8fec:	d000      	beq.n	8ff0 <__divsi3+0x10c>
    8fee:	4249      	negs	r1, r1
    8ff0:	1003      	asrs	r3, r0, #32
    8ff2:	d300      	bcc.n	8ff6 <__divsi3+0x112>
    8ff4:	4240      	negs	r0, r0
    8ff6:	4053      	eors	r3, r2
    8ff8:	2200      	movs	r2, #0
    8ffa:	469c      	mov	ip, r3
    8ffc:	0903      	lsrs	r3, r0, #4
    8ffe:	428b      	cmp	r3, r1
    9000:	d32d      	bcc.n	905e <__divsi3+0x17a>
    9002:	0a03      	lsrs	r3, r0, #8
    9004:	428b      	cmp	r3, r1
    9006:	d312      	bcc.n	902e <__divsi3+0x14a>
    9008:	22fc      	movs	r2, #252	; 0xfc
    900a:	0189      	lsls	r1, r1, #6
    900c:	ba12      	rev	r2, r2
    900e:	0a03      	lsrs	r3, r0, #8
    9010:	428b      	cmp	r3, r1
    9012:	d30c      	bcc.n	902e <__divsi3+0x14a>
    9014:	0189      	lsls	r1, r1, #6
    9016:	1192      	asrs	r2, r2, #6
    9018:	428b      	cmp	r3, r1
    901a:	d308      	bcc.n	902e <__divsi3+0x14a>
    901c:	0189      	lsls	r1, r1, #6
    901e:	1192      	asrs	r2, r2, #6
    9020:	428b      	cmp	r3, r1
    9022:	d304      	bcc.n	902e <__divsi3+0x14a>
    9024:	0189      	lsls	r1, r1, #6
    9026:	d03a      	beq.n	909e <__divsi3+0x1ba>
    9028:	1192      	asrs	r2, r2, #6
    902a:	e000      	b.n	902e <__divsi3+0x14a>
    902c:	0989      	lsrs	r1, r1, #6
    902e:	09c3      	lsrs	r3, r0, #7
    9030:	428b      	cmp	r3, r1
    9032:	d301      	bcc.n	9038 <__divsi3+0x154>
    9034:	01cb      	lsls	r3, r1, #7
    9036:	1ac0      	subs	r0, r0, r3
    9038:	4152      	adcs	r2, r2
    903a:	0983      	lsrs	r3, r0, #6
    903c:	428b      	cmp	r3, r1
    903e:	d301      	bcc.n	9044 <__divsi3+0x160>
    9040:	018b      	lsls	r3, r1, #6
    9042:	1ac0      	subs	r0, r0, r3
    9044:	4152      	adcs	r2, r2
    9046:	0943      	lsrs	r3, r0, #5
    9048:	428b      	cmp	r3, r1
    904a:	d301      	bcc.n	9050 <__divsi3+0x16c>
    904c:	014b      	lsls	r3, r1, #5
    904e:	1ac0      	subs	r0, r0, r3
    9050:	4152      	adcs	r2, r2
    9052:	0903      	lsrs	r3, r0, #4
    9054:	428b      	cmp	r3, r1
    9056:	d301      	bcc.n	905c <__divsi3+0x178>
    9058:	010b      	lsls	r3, r1, #4
    905a:	1ac0      	subs	r0, r0, r3
    905c:	4152      	adcs	r2, r2
    905e:	08c3      	lsrs	r3, r0, #3
    9060:	428b      	cmp	r3, r1
    9062:	d301      	bcc.n	9068 <__divsi3+0x184>
    9064:	00cb      	lsls	r3, r1, #3
    9066:	1ac0      	subs	r0, r0, r3
    9068:	4152      	adcs	r2, r2
    906a:	0883      	lsrs	r3, r0, #2
    906c:	428b      	cmp	r3, r1
    906e:	d301      	bcc.n	9074 <__divsi3+0x190>
    9070:	008b      	lsls	r3, r1, #2
    9072:	1ac0      	subs	r0, r0, r3
    9074:	4152      	adcs	r2, r2
    9076:	d2d9      	bcs.n	902c <__divsi3+0x148>
    9078:	0843      	lsrs	r3, r0, #1
    907a:	428b      	cmp	r3, r1
    907c:	d301      	bcc.n	9082 <__divsi3+0x19e>
    907e:	004b      	lsls	r3, r1, #1
    9080:	1ac0      	subs	r0, r0, r3
    9082:	4152      	adcs	r2, r2
    9084:	1a41      	subs	r1, r0, r1
    9086:	d200      	bcs.n	908a <__divsi3+0x1a6>
    9088:	4601      	mov	r1, r0
    908a:	4663      	mov	r3, ip
    908c:	4152      	adcs	r2, r2
    908e:	105b      	asrs	r3, r3, #1
    9090:	4610      	mov	r0, r2
    9092:	d301      	bcc.n	9098 <__divsi3+0x1b4>
    9094:	4240      	negs	r0, r0
    9096:	2b00      	cmp	r3, #0
    9098:	d500      	bpl.n	909c <__divsi3+0x1b8>
    909a:	4249      	negs	r1, r1
    909c:	4770      	bx	lr
    909e:	4663      	mov	r3, ip
    90a0:	105b      	asrs	r3, r3, #1
    90a2:	d300      	bcc.n	90a6 <__divsi3+0x1c2>
    90a4:	4240      	negs	r0, r0
    90a6:	b501      	push	{r0, lr}
    90a8:	2000      	movs	r0, #0
    90aa:	f000 f805 	bl	90b8 <__aeabi_idiv0>
    90ae:	bd02      	pop	{r1, pc}

000090b0 <__aeabi_idivmod>:
    90b0:	2900      	cmp	r1, #0
    90b2:	d0f8      	beq.n	90a6 <__divsi3+0x1c2>
    90b4:	e716      	b.n	8ee4 <__divsi3>
    90b6:	4770      	bx	lr

000090b8 <__aeabi_idiv0>:
    90b8:	4770      	bx	lr
    90ba:	46c0      	nop			; (mov r8, r8)

000090bc <__clzsi2>:
    90bc:	211c      	movs	r1, #28
    90be:	2301      	movs	r3, #1
    90c0:	041b      	lsls	r3, r3, #16
    90c2:	4298      	cmp	r0, r3
    90c4:	d301      	bcc.n	90ca <__clzsi2+0xe>
    90c6:	0c00      	lsrs	r0, r0, #16
    90c8:	3910      	subs	r1, #16
    90ca:	0a1b      	lsrs	r3, r3, #8
    90cc:	4298      	cmp	r0, r3
    90ce:	d301      	bcc.n	90d4 <__clzsi2+0x18>
    90d0:	0a00      	lsrs	r0, r0, #8
    90d2:	3908      	subs	r1, #8
    90d4:	091b      	lsrs	r3, r3, #4
    90d6:	4298      	cmp	r0, r3
    90d8:	d301      	bcc.n	90de <__clzsi2+0x22>
    90da:	0900      	lsrs	r0, r0, #4
    90dc:	3904      	subs	r1, #4
    90de:	a202      	add	r2, pc, #8	; (adr r2, 90e8 <__clzsi2+0x2c>)
    90e0:	5c10      	ldrb	r0, [r2, r0]
    90e2:	1840      	adds	r0, r0, r1
    90e4:	4770      	bx	lr
    90e6:	46c0      	nop			; (mov r8, r8)
    90e8:	02020304 	.word	0x02020304
    90ec:	01010101 	.word	0x01010101
	...

000090f8 <__ctzsi2>:
    90f8:	4241      	negs	r1, r0
    90fa:	4008      	ands	r0, r1
    90fc:	211c      	movs	r1, #28
    90fe:	2301      	movs	r3, #1
    9100:	041b      	lsls	r3, r3, #16
    9102:	4298      	cmp	r0, r3
    9104:	d301      	bcc.n	910a <__ctzsi2+0x12>
    9106:	0c00      	lsrs	r0, r0, #16
    9108:	3910      	subs	r1, #16
    910a:	0a1b      	lsrs	r3, r3, #8
    910c:	4298      	cmp	r0, r3
    910e:	d301      	bcc.n	9114 <__ctzsi2+0x1c>
    9110:	0a00      	lsrs	r0, r0, #8
    9112:	3908      	subs	r1, #8
    9114:	091b      	lsrs	r3, r3, #4
    9116:	4298      	cmp	r0, r3
    9118:	d301      	bcc.n	911e <__ctzsi2+0x26>
    911a:	0900      	lsrs	r0, r0, #4
    911c:	3904      	subs	r1, #4
    911e:	a202      	add	r2, pc, #8	; (adr r2, 9128 <__ctzsi2+0x30>)
    9120:	5c10      	ldrb	r0, [r2, r0]
    9122:	1a40      	subs	r0, r0, r1
    9124:	4770      	bx	lr
    9126:	46c0      	nop			; (mov r8, r8)
    9128:	1d1d1c1b 	.word	0x1d1d1c1b
    912c:	1e1e1e1e 	.word	0x1e1e1e1e
    9130:	1f1f1f1f 	.word	0x1f1f1f1f
    9134:	1f1f1f1f 	.word	0x1f1f1f1f

00009138 <__aeabi_uldivmod>:
    9138:	2b00      	cmp	r3, #0
    913a:	d111      	bne.n	9160 <__aeabi_uldivmod+0x28>
    913c:	2a00      	cmp	r2, #0
    913e:	d10f      	bne.n	9160 <__aeabi_uldivmod+0x28>
    9140:	2900      	cmp	r1, #0
    9142:	d100      	bne.n	9146 <__aeabi_uldivmod+0xe>
    9144:	2800      	cmp	r0, #0
    9146:	d002      	beq.n	914e <__aeabi_uldivmod+0x16>
    9148:	2100      	movs	r1, #0
    914a:	43c9      	mvns	r1, r1
    914c:	1c08      	adds	r0, r1, #0
    914e:	b407      	push	{r0, r1, r2}
    9150:	4802      	ldr	r0, [pc, #8]	; (915c <__aeabi_uldivmod+0x24>)
    9152:	a102      	add	r1, pc, #8	; (adr r1, 915c <__aeabi_uldivmod+0x24>)
    9154:	1840      	adds	r0, r0, r1
    9156:	9002      	str	r0, [sp, #8]
    9158:	bd03      	pop	{r0, r1, pc}
    915a:	46c0      	nop			; (mov r8, r8)
    915c:	ffffff5d 	.word	0xffffff5d
    9160:	b403      	push	{r0, r1}
    9162:	4668      	mov	r0, sp
    9164:	b501      	push	{r0, lr}
    9166:	9802      	ldr	r0, [sp, #8]
    9168:	f000 f830 	bl	91cc <__udivmoddi4>
    916c:	9b01      	ldr	r3, [sp, #4]
    916e:	469e      	mov	lr, r3
    9170:	b002      	add	sp, #8
    9172:	bc0c      	pop	{r2, r3}
    9174:	4770      	bx	lr
    9176:	46c0      	nop			; (mov r8, r8)

00009178 <__aeabi_lmul>:
    9178:	b5f0      	push	{r4, r5, r6, r7, lr}
    917a:	46ce      	mov	lr, r9
    917c:	4647      	mov	r7, r8
    917e:	0415      	lsls	r5, r2, #16
    9180:	0c2d      	lsrs	r5, r5, #16
    9182:	002e      	movs	r6, r5
    9184:	b580      	push	{r7, lr}
    9186:	0407      	lsls	r7, r0, #16
    9188:	0c14      	lsrs	r4, r2, #16
    918a:	0c3f      	lsrs	r7, r7, #16
    918c:	4699      	mov	r9, r3
    918e:	0c03      	lsrs	r3, r0, #16
    9190:	437e      	muls	r6, r7
    9192:	435d      	muls	r5, r3
    9194:	4367      	muls	r7, r4
    9196:	4363      	muls	r3, r4
    9198:	197f      	adds	r7, r7, r5
    919a:	0c34      	lsrs	r4, r6, #16
    919c:	19e4      	adds	r4, r4, r7
    919e:	469c      	mov	ip, r3
    91a0:	42a5      	cmp	r5, r4
    91a2:	d903      	bls.n	91ac <__aeabi_lmul+0x34>
    91a4:	2380      	movs	r3, #128	; 0x80
    91a6:	025b      	lsls	r3, r3, #9
    91a8:	4698      	mov	r8, r3
    91aa:	44c4      	add	ip, r8
    91ac:	464b      	mov	r3, r9
    91ae:	4351      	muls	r1, r2
    91b0:	4343      	muls	r3, r0
    91b2:	0436      	lsls	r6, r6, #16
    91b4:	0c36      	lsrs	r6, r6, #16
    91b6:	0c25      	lsrs	r5, r4, #16
    91b8:	0424      	lsls	r4, r4, #16
    91ba:	4465      	add	r5, ip
    91bc:	19a4      	adds	r4, r4, r6
    91be:	1859      	adds	r1, r3, r1
    91c0:	1949      	adds	r1, r1, r5
    91c2:	0020      	movs	r0, r4
    91c4:	bc0c      	pop	{r2, r3}
    91c6:	4690      	mov	r8, r2
    91c8:	4699      	mov	r9, r3
    91ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000091cc <__udivmoddi4>:
    91cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ce:	4657      	mov	r7, sl
    91d0:	464e      	mov	r6, r9
    91d2:	4645      	mov	r5, r8
    91d4:	46de      	mov	lr, fp
    91d6:	b5e0      	push	{r5, r6, r7, lr}
    91d8:	0004      	movs	r4, r0
    91da:	b083      	sub	sp, #12
    91dc:	000d      	movs	r5, r1
    91de:	4692      	mov	sl, r2
    91e0:	4699      	mov	r9, r3
    91e2:	428b      	cmp	r3, r1
    91e4:	d82f      	bhi.n	9246 <__udivmoddi4+0x7a>
    91e6:	d02c      	beq.n	9242 <__udivmoddi4+0x76>
    91e8:	4649      	mov	r1, r9
    91ea:	4650      	mov	r0, sl
    91ec:	f000 f8ae 	bl	934c <__clzdi2>
    91f0:	0029      	movs	r1, r5
    91f2:	0006      	movs	r6, r0
    91f4:	0020      	movs	r0, r4
    91f6:	f000 f8a9 	bl	934c <__clzdi2>
    91fa:	1a33      	subs	r3, r6, r0
    91fc:	4698      	mov	r8, r3
    91fe:	3b20      	subs	r3, #32
    9200:	469b      	mov	fp, r3
    9202:	d500      	bpl.n	9206 <__udivmoddi4+0x3a>
    9204:	e074      	b.n	92f0 <__udivmoddi4+0x124>
    9206:	4653      	mov	r3, sl
    9208:	465a      	mov	r2, fp
    920a:	4093      	lsls	r3, r2
    920c:	001f      	movs	r7, r3
    920e:	4653      	mov	r3, sl
    9210:	4642      	mov	r2, r8
    9212:	4093      	lsls	r3, r2
    9214:	001e      	movs	r6, r3
    9216:	42af      	cmp	r7, r5
    9218:	d829      	bhi.n	926e <__udivmoddi4+0xa2>
    921a:	d026      	beq.n	926a <__udivmoddi4+0x9e>
    921c:	465b      	mov	r3, fp
    921e:	1ba4      	subs	r4, r4, r6
    9220:	41bd      	sbcs	r5, r7
    9222:	2b00      	cmp	r3, #0
    9224:	da00      	bge.n	9228 <__udivmoddi4+0x5c>
    9226:	e079      	b.n	931c <__udivmoddi4+0x150>
    9228:	2200      	movs	r2, #0
    922a:	2300      	movs	r3, #0
    922c:	9200      	str	r2, [sp, #0]
    922e:	9301      	str	r3, [sp, #4]
    9230:	2301      	movs	r3, #1
    9232:	465a      	mov	r2, fp
    9234:	4093      	lsls	r3, r2
    9236:	9301      	str	r3, [sp, #4]
    9238:	2301      	movs	r3, #1
    923a:	4642      	mov	r2, r8
    923c:	4093      	lsls	r3, r2
    923e:	9300      	str	r3, [sp, #0]
    9240:	e019      	b.n	9276 <__udivmoddi4+0xaa>
    9242:	4282      	cmp	r2, r0
    9244:	d9d0      	bls.n	91e8 <__udivmoddi4+0x1c>
    9246:	2200      	movs	r2, #0
    9248:	2300      	movs	r3, #0
    924a:	9200      	str	r2, [sp, #0]
    924c:	9301      	str	r3, [sp, #4]
    924e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9250:	2b00      	cmp	r3, #0
    9252:	d001      	beq.n	9258 <__udivmoddi4+0x8c>
    9254:	601c      	str	r4, [r3, #0]
    9256:	605d      	str	r5, [r3, #4]
    9258:	9800      	ldr	r0, [sp, #0]
    925a:	9901      	ldr	r1, [sp, #4]
    925c:	b003      	add	sp, #12
    925e:	bc3c      	pop	{r2, r3, r4, r5}
    9260:	4690      	mov	r8, r2
    9262:	4699      	mov	r9, r3
    9264:	46a2      	mov	sl, r4
    9266:	46ab      	mov	fp, r5
    9268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    926a:	42a3      	cmp	r3, r4
    926c:	d9d6      	bls.n	921c <__udivmoddi4+0x50>
    926e:	2200      	movs	r2, #0
    9270:	2300      	movs	r3, #0
    9272:	9200      	str	r2, [sp, #0]
    9274:	9301      	str	r3, [sp, #4]
    9276:	4643      	mov	r3, r8
    9278:	2b00      	cmp	r3, #0
    927a:	d0e8      	beq.n	924e <__udivmoddi4+0x82>
    927c:	07fb      	lsls	r3, r7, #31
    927e:	0872      	lsrs	r2, r6, #1
    9280:	431a      	orrs	r2, r3
    9282:	4646      	mov	r6, r8
    9284:	087b      	lsrs	r3, r7, #1
    9286:	e00e      	b.n	92a6 <__udivmoddi4+0xda>
    9288:	42ab      	cmp	r3, r5
    928a:	d101      	bne.n	9290 <__udivmoddi4+0xc4>
    928c:	42a2      	cmp	r2, r4
    928e:	d80c      	bhi.n	92aa <__udivmoddi4+0xde>
    9290:	1aa4      	subs	r4, r4, r2
    9292:	419d      	sbcs	r5, r3
    9294:	2001      	movs	r0, #1
    9296:	1924      	adds	r4, r4, r4
    9298:	416d      	adcs	r5, r5
    929a:	2100      	movs	r1, #0
    929c:	3e01      	subs	r6, #1
    929e:	1824      	adds	r4, r4, r0
    92a0:	414d      	adcs	r5, r1
    92a2:	2e00      	cmp	r6, #0
    92a4:	d006      	beq.n	92b4 <__udivmoddi4+0xe8>
    92a6:	42ab      	cmp	r3, r5
    92a8:	d9ee      	bls.n	9288 <__udivmoddi4+0xbc>
    92aa:	3e01      	subs	r6, #1
    92ac:	1924      	adds	r4, r4, r4
    92ae:	416d      	adcs	r5, r5
    92b0:	2e00      	cmp	r6, #0
    92b2:	d1f8      	bne.n	92a6 <__udivmoddi4+0xda>
    92b4:	465b      	mov	r3, fp
    92b6:	9800      	ldr	r0, [sp, #0]
    92b8:	9901      	ldr	r1, [sp, #4]
    92ba:	1900      	adds	r0, r0, r4
    92bc:	4169      	adcs	r1, r5
    92be:	2b00      	cmp	r3, #0
    92c0:	db22      	blt.n	9308 <__udivmoddi4+0x13c>
    92c2:	002b      	movs	r3, r5
    92c4:	465a      	mov	r2, fp
    92c6:	40d3      	lsrs	r3, r2
    92c8:	002a      	movs	r2, r5
    92ca:	4644      	mov	r4, r8
    92cc:	40e2      	lsrs	r2, r4
    92ce:	001c      	movs	r4, r3
    92d0:	465b      	mov	r3, fp
    92d2:	0015      	movs	r5, r2
    92d4:	2b00      	cmp	r3, #0
    92d6:	db2c      	blt.n	9332 <__udivmoddi4+0x166>
    92d8:	0026      	movs	r6, r4
    92da:	409e      	lsls	r6, r3
    92dc:	0033      	movs	r3, r6
    92de:	0026      	movs	r6, r4
    92e0:	4647      	mov	r7, r8
    92e2:	40be      	lsls	r6, r7
    92e4:	0032      	movs	r2, r6
    92e6:	1a80      	subs	r0, r0, r2
    92e8:	4199      	sbcs	r1, r3
    92ea:	9000      	str	r0, [sp, #0]
    92ec:	9101      	str	r1, [sp, #4]
    92ee:	e7ae      	b.n	924e <__udivmoddi4+0x82>
    92f0:	4642      	mov	r2, r8
    92f2:	2320      	movs	r3, #32
    92f4:	1a9b      	subs	r3, r3, r2
    92f6:	4652      	mov	r2, sl
    92f8:	40da      	lsrs	r2, r3
    92fa:	4641      	mov	r1, r8
    92fc:	0013      	movs	r3, r2
    92fe:	464a      	mov	r2, r9
    9300:	408a      	lsls	r2, r1
    9302:	0017      	movs	r7, r2
    9304:	431f      	orrs	r7, r3
    9306:	e782      	b.n	920e <__udivmoddi4+0x42>
    9308:	4642      	mov	r2, r8
    930a:	2320      	movs	r3, #32
    930c:	1a9b      	subs	r3, r3, r2
    930e:	002a      	movs	r2, r5
    9310:	4646      	mov	r6, r8
    9312:	409a      	lsls	r2, r3
    9314:	0023      	movs	r3, r4
    9316:	40f3      	lsrs	r3, r6
    9318:	4313      	orrs	r3, r2
    931a:	e7d5      	b.n	92c8 <__udivmoddi4+0xfc>
    931c:	4642      	mov	r2, r8
    931e:	2320      	movs	r3, #32
    9320:	2100      	movs	r1, #0
    9322:	1a9b      	subs	r3, r3, r2
    9324:	2200      	movs	r2, #0
    9326:	9100      	str	r1, [sp, #0]
    9328:	9201      	str	r2, [sp, #4]
    932a:	2201      	movs	r2, #1
    932c:	40da      	lsrs	r2, r3
    932e:	9201      	str	r2, [sp, #4]
    9330:	e782      	b.n	9238 <__udivmoddi4+0x6c>
    9332:	4642      	mov	r2, r8
    9334:	2320      	movs	r3, #32
    9336:	0026      	movs	r6, r4
    9338:	1a9b      	subs	r3, r3, r2
    933a:	40de      	lsrs	r6, r3
    933c:	002f      	movs	r7, r5
    933e:	46b4      	mov	ip, r6
    9340:	4097      	lsls	r7, r2
    9342:	4666      	mov	r6, ip
    9344:	003b      	movs	r3, r7
    9346:	4333      	orrs	r3, r6
    9348:	e7c9      	b.n	92de <__udivmoddi4+0x112>
    934a:	46c0      	nop			; (mov r8, r8)

0000934c <__clzdi2>:
    934c:	b510      	push	{r4, lr}
    934e:	2900      	cmp	r1, #0
    9350:	d103      	bne.n	935a <__clzdi2+0xe>
    9352:	f7ff feb3 	bl	90bc <__clzsi2>
    9356:	3020      	adds	r0, #32
    9358:	e002      	b.n	9360 <__clzdi2+0x14>
    935a:	1c08      	adds	r0, r1, #0
    935c:	f7ff feae 	bl	90bc <__clzsi2>
    9360:	bd10      	pop	{r4, pc}
    9362:	46c0      	nop			; (mov r8, r8)

00009364 <__libc_init_array>:
    9364:	b570      	push	{r4, r5, r6, lr}
    9366:	2600      	movs	r6, #0
    9368:	4d0c      	ldr	r5, [pc, #48]	; (939c <__libc_init_array+0x38>)
    936a:	4c0d      	ldr	r4, [pc, #52]	; (93a0 <__libc_init_array+0x3c>)
    936c:	1b64      	subs	r4, r4, r5
    936e:	10a4      	asrs	r4, r4, #2
    9370:	42a6      	cmp	r6, r4
    9372:	d109      	bne.n	9388 <__libc_init_array+0x24>
    9374:	2600      	movs	r6, #0
    9376:	f001 fed9 	bl	b12c <_init>
    937a:	4d0a      	ldr	r5, [pc, #40]	; (93a4 <__libc_init_array+0x40>)
    937c:	4c0a      	ldr	r4, [pc, #40]	; (93a8 <__libc_init_array+0x44>)
    937e:	1b64      	subs	r4, r4, r5
    9380:	10a4      	asrs	r4, r4, #2
    9382:	42a6      	cmp	r6, r4
    9384:	d105      	bne.n	9392 <__libc_init_array+0x2e>
    9386:	bd70      	pop	{r4, r5, r6, pc}
    9388:	00b3      	lsls	r3, r6, #2
    938a:	58eb      	ldr	r3, [r5, r3]
    938c:	4798      	blx	r3
    938e:	3601      	adds	r6, #1
    9390:	e7ee      	b.n	9370 <__libc_init_array+0xc>
    9392:	00b3      	lsls	r3, r6, #2
    9394:	58eb      	ldr	r3, [r5, r3]
    9396:	4798      	blx	r3
    9398:	3601      	adds	r6, #1
    939a:	e7f2      	b.n	9382 <__libc_init_array+0x1e>
    939c:	0000b138 	.word	0x0000b138
    93a0:	0000b138 	.word	0x0000b138
    93a4:	0000b138 	.word	0x0000b138
    93a8:	0000b13c 	.word	0x0000b13c

000093ac <memcpy>:
    93ac:	2300      	movs	r3, #0
    93ae:	b510      	push	{r4, lr}
    93b0:	429a      	cmp	r2, r3
    93b2:	d100      	bne.n	93b6 <memcpy+0xa>
    93b4:	bd10      	pop	{r4, pc}
    93b6:	5ccc      	ldrb	r4, [r1, r3]
    93b8:	54c4      	strb	r4, [r0, r3]
    93ba:	3301      	adds	r3, #1
    93bc:	e7f8      	b.n	93b0 <memcpy+0x4>

000093be <memset>:
    93be:	0003      	movs	r3, r0
    93c0:	1882      	adds	r2, r0, r2
    93c2:	4293      	cmp	r3, r2
    93c4:	d100      	bne.n	93c8 <memset+0xa>
    93c6:	4770      	bx	lr
    93c8:	7019      	strb	r1, [r3, #0]
    93ca:	3301      	adds	r3, #1
    93cc:	e7f9      	b.n	93c2 <memset+0x4>
	...

000093d0 <iprintf>:
    93d0:	b40f      	push	{r0, r1, r2, r3}
    93d2:	4b0b      	ldr	r3, [pc, #44]	; (9400 <iprintf+0x30>)
    93d4:	b513      	push	{r0, r1, r4, lr}
    93d6:	681c      	ldr	r4, [r3, #0]
    93d8:	2c00      	cmp	r4, #0
    93da:	d005      	beq.n	93e8 <iprintf+0x18>
    93dc:	69a3      	ldr	r3, [r4, #24]
    93de:	2b00      	cmp	r3, #0
    93e0:	d102      	bne.n	93e8 <iprintf+0x18>
    93e2:	0020      	movs	r0, r4
    93e4:	f000 f9de 	bl	97a4 <__sinit>
    93e8:	ab05      	add	r3, sp, #20
    93ea:	9a04      	ldr	r2, [sp, #16]
    93ec:	68a1      	ldr	r1, [r4, #8]
    93ee:	0020      	movs	r0, r4
    93f0:	9301      	str	r3, [sp, #4]
    93f2:	f000 fd19 	bl	9e28 <_vfiprintf_r>
    93f6:	bc16      	pop	{r1, r2, r4}
    93f8:	bc08      	pop	{r3}
    93fa:	b004      	add	sp, #16
    93fc:	4718      	bx	r3
    93fe:	46c0      	nop			; (mov r8, r8)
    9400:	20000128 	.word	0x20000128

00009404 <setbuf>:
    9404:	424a      	negs	r2, r1
    9406:	414a      	adcs	r2, r1
    9408:	2380      	movs	r3, #128	; 0x80
    940a:	b510      	push	{r4, lr}
    940c:	0052      	lsls	r2, r2, #1
    940e:	00db      	lsls	r3, r3, #3
    9410:	f000 f802 	bl	9418 <setvbuf>
    9414:	bd10      	pop	{r4, pc}
	...

00009418 <setvbuf>:
    9418:	b5f0      	push	{r4, r5, r6, r7, lr}
    941a:	001d      	movs	r5, r3
    941c:	4b4f      	ldr	r3, [pc, #316]	; (955c <setvbuf+0x144>)
    941e:	b085      	sub	sp, #20
    9420:	681e      	ldr	r6, [r3, #0]
    9422:	0004      	movs	r4, r0
    9424:	000f      	movs	r7, r1
    9426:	9200      	str	r2, [sp, #0]
    9428:	2e00      	cmp	r6, #0
    942a:	d005      	beq.n	9438 <setvbuf+0x20>
    942c:	69b3      	ldr	r3, [r6, #24]
    942e:	2b00      	cmp	r3, #0
    9430:	d102      	bne.n	9438 <setvbuf+0x20>
    9432:	0030      	movs	r0, r6
    9434:	f000 f9b6 	bl	97a4 <__sinit>
    9438:	4b49      	ldr	r3, [pc, #292]	; (9560 <setvbuf+0x148>)
    943a:	429c      	cmp	r4, r3
    943c:	d150      	bne.n	94e0 <setvbuf+0xc8>
    943e:	6874      	ldr	r4, [r6, #4]
    9440:	9b00      	ldr	r3, [sp, #0]
    9442:	2b02      	cmp	r3, #2
    9444:	d005      	beq.n	9452 <setvbuf+0x3a>
    9446:	2b01      	cmp	r3, #1
    9448:	d900      	bls.n	944c <setvbuf+0x34>
    944a:	e084      	b.n	9556 <setvbuf+0x13e>
    944c:	2d00      	cmp	r5, #0
    944e:	da00      	bge.n	9452 <setvbuf+0x3a>
    9450:	e081      	b.n	9556 <setvbuf+0x13e>
    9452:	0021      	movs	r1, r4
    9454:	0030      	movs	r0, r6
    9456:	f000 f937 	bl	96c8 <_fflush_r>
    945a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    945c:	2900      	cmp	r1, #0
    945e:	d008      	beq.n	9472 <setvbuf+0x5a>
    9460:	0023      	movs	r3, r4
    9462:	3344      	adds	r3, #68	; 0x44
    9464:	4299      	cmp	r1, r3
    9466:	d002      	beq.n	946e <setvbuf+0x56>
    9468:	0030      	movs	r0, r6
    946a:	f000 faa7 	bl	99bc <_free_r>
    946e:	2300      	movs	r3, #0
    9470:	6363      	str	r3, [r4, #52]	; 0x34
    9472:	2300      	movs	r3, #0
    9474:	61a3      	str	r3, [r4, #24]
    9476:	6063      	str	r3, [r4, #4]
    9478:	89a3      	ldrh	r3, [r4, #12]
    947a:	061b      	lsls	r3, r3, #24
    947c:	d503      	bpl.n	9486 <setvbuf+0x6e>
    947e:	6921      	ldr	r1, [r4, #16]
    9480:	0030      	movs	r0, r6
    9482:	f000 fa9b 	bl	99bc <_free_r>
    9486:	89a3      	ldrh	r3, [r4, #12]
    9488:	4a36      	ldr	r2, [pc, #216]	; (9564 <setvbuf+0x14c>)
    948a:	4013      	ands	r3, r2
    948c:	81a3      	strh	r3, [r4, #12]
    948e:	9b00      	ldr	r3, [sp, #0]
    9490:	2b02      	cmp	r3, #2
    9492:	d05a      	beq.n	954a <setvbuf+0x132>
    9494:	ab03      	add	r3, sp, #12
    9496:	aa02      	add	r2, sp, #8
    9498:	0021      	movs	r1, r4
    949a:	0030      	movs	r0, r6
    949c:	f000 fa18 	bl	98d0 <__swhatbuf_r>
    94a0:	89a3      	ldrh	r3, [r4, #12]
    94a2:	4318      	orrs	r0, r3
    94a4:	81a0      	strh	r0, [r4, #12]
    94a6:	2d00      	cmp	r5, #0
    94a8:	d124      	bne.n	94f4 <setvbuf+0xdc>
    94aa:	9d02      	ldr	r5, [sp, #8]
    94ac:	0028      	movs	r0, r5
    94ae:	f000 fa7b 	bl	99a8 <malloc>
    94b2:	9501      	str	r5, [sp, #4]
    94b4:	1e07      	subs	r7, r0, #0
    94b6:	d142      	bne.n	953e <setvbuf+0x126>
    94b8:	9b02      	ldr	r3, [sp, #8]
    94ba:	9301      	str	r3, [sp, #4]
    94bc:	42ab      	cmp	r3, r5
    94be:	d139      	bne.n	9534 <setvbuf+0x11c>
    94c0:	2001      	movs	r0, #1
    94c2:	4240      	negs	r0, r0
    94c4:	2302      	movs	r3, #2
    94c6:	89a2      	ldrh	r2, [r4, #12]
    94c8:	4313      	orrs	r3, r2
    94ca:	81a3      	strh	r3, [r4, #12]
    94cc:	2300      	movs	r3, #0
    94ce:	60a3      	str	r3, [r4, #8]
    94d0:	0023      	movs	r3, r4
    94d2:	3347      	adds	r3, #71	; 0x47
    94d4:	6023      	str	r3, [r4, #0]
    94d6:	6123      	str	r3, [r4, #16]
    94d8:	2301      	movs	r3, #1
    94da:	6163      	str	r3, [r4, #20]
    94dc:	b005      	add	sp, #20
    94de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94e0:	4b21      	ldr	r3, [pc, #132]	; (9568 <setvbuf+0x150>)
    94e2:	429c      	cmp	r4, r3
    94e4:	d101      	bne.n	94ea <setvbuf+0xd2>
    94e6:	68b4      	ldr	r4, [r6, #8]
    94e8:	e7aa      	b.n	9440 <setvbuf+0x28>
    94ea:	4b20      	ldr	r3, [pc, #128]	; (956c <setvbuf+0x154>)
    94ec:	429c      	cmp	r4, r3
    94ee:	d1a7      	bne.n	9440 <setvbuf+0x28>
    94f0:	68f4      	ldr	r4, [r6, #12]
    94f2:	e7a5      	b.n	9440 <setvbuf+0x28>
    94f4:	2f00      	cmp	r7, #0
    94f6:	d0d9      	beq.n	94ac <setvbuf+0x94>
    94f8:	69b3      	ldr	r3, [r6, #24]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d102      	bne.n	9504 <setvbuf+0xec>
    94fe:	0030      	movs	r0, r6
    9500:	f000 f950 	bl	97a4 <__sinit>
    9504:	9b00      	ldr	r3, [sp, #0]
    9506:	2b01      	cmp	r3, #1
    9508:	d103      	bne.n	9512 <setvbuf+0xfa>
    950a:	89a3      	ldrh	r3, [r4, #12]
    950c:	9a00      	ldr	r2, [sp, #0]
    950e:	431a      	orrs	r2, r3
    9510:	81a2      	strh	r2, [r4, #12]
    9512:	2008      	movs	r0, #8
    9514:	89a3      	ldrh	r3, [r4, #12]
    9516:	6027      	str	r7, [r4, #0]
    9518:	6127      	str	r7, [r4, #16]
    951a:	6165      	str	r5, [r4, #20]
    951c:	4018      	ands	r0, r3
    951e:	d018      	beq.n	9552 <setvbuf+0x13a>
    9520:	2001      	movs	r0, #1
    9522:	4018      	ands	r0, r3
    9524:	2300      	movs	r3, #0
    9526:	4298      	cmp	r0, r3
    9528:	d011      	beq.n	954e <setvbuf+0x136>
    952a:	426d      	negs	r5, r5
    952c:	60a3      	str	r3, [r4, #8]
    952e:	61a5      	str	r5, [r4, #24]
    9530:	0018      	movs	r0, r3
    9532:	e7d3      	b.n	94dc <setvbuf+0xc4>
    9534:	9801      	ldr	r0, [sp, #4]
    9536:	f000 fa37 	bl	99a8 <malloc>
    953a:	1e07      	subs	r7, r0, #0
    953c:	d0c0      	beq.n	94c0 <setvbuf+0xa8>
    953e:	2380      	movs	r3, #128	; 0x80
    9540:	89a2      	ldrh	r2, [r4, #12]
    9542:	9d01      	ldr	r5, [sp, #4]
    9544:	4313      	orrs	r3, r2
    9546:	81a3      	strh	r3, [r4, #12]
    9548:	e7d6      	b.n	94f8 <setvbuf+0xe0>
    954a:	2000      	movs	r0, #0
    954c:	e7ba      	b.n	94c4 <setvbuf+0xac>
    954e:	60a5      	str	r5, [r4, #8]
    9550:	e7c4      	b.n	94dc <setvbuf+0xc4>
    9552:	60a0      	str	r0, [r4, #8]
    9554:	e7c2      	b.n	94dc <setvbuf+0xc4>
    9556:	2001      	movs	r0, #1
    9558:	4240      	negs	r0, r0
    955a:	e7bf      	b.n	94dc <setvbuf+0xc4>
    955c:	20000128 	.word	0x20000128
    9560:	0000b0b8 	.word	0x0000b0b8
    9564:	fffff35c 	.word	0xfffff35c
    9568:	0000b0d8 	.word	0x0000b0d8
    956c:	0000b098 	.word	0x0000b098

00009570 <siprintf>:
    9570:	b40e      	push	{r1, r2, r3}
    9572:	b510      	push	{r4, lr}
    9574:	b09d      	sub	sp, #116	; 0x74
    9576:	a902      	add	r1, sp, #8
    9578:	9002      	str	r0, [sp, #8]
    957a:	6108      	str	r0, [r1, #16]
    957c:	480b      	ldr	r0, [pc, #44]	; (95ac <siprintf+0x3c>)
    957e:	2482      	movs	r4, #130	; 0x82
    9580:	6088      	str	r0, [r1, #8]
    9582:	6148      	str	r0, [r1, #20]
    9584:	2001      	movs	r0, #1
    9586:	4240      	negs	r0, r0
    9588:	ab1f      	add	r3, sp, #124	; 0x7c
    958a:	81c8      	strh	r0, [r1, #14]
    958c:	4808      	ldr	r0, [pc, #32]	; (95b0 <siprintf+0x40>)
    958e:	cb04      	ldmia	r3!, {r2}
    9590:	00a4      	lsls	r4, r4, #2
    9592:	6800      	ldr	r0, [r0, #0]
    9594:	9301      	str	r3, [sp, #4]
    9596:	818c      	strh	r4, [r1, #12]
    9598:	f000 fb1a 	bl	9bd0 <_svfiprintf_r>
    959c:	2300      	movs	r3, #0
    959e:	9a02      	ldr	r2, [sp, #8]
    95a0:	7013      	strb	r3, [r2, #0]
    95a2:	b01d      	add	sp, #116	; 0x74
    95a4:	bc10      	pop	{r4}
    95a6:	bc08      	pop	{r3}
    95a8:	b003      	add	sp, #12
    95aa:	4718      	bx	r3
    95ac:	7fffffff 	.word	0x7fffffff
    95b0:	20000128 	.word	0x20000128

000095b4 <__sflush_r>:
    95b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95b6:	898a      	ldrh	r2, [r1, #12]
    95b8:	0005      	movs	r5, r0
    95ba:	000c      	movs	r4, r1
    95bc:	0713      	lsls	r3, r2, #28
    95be:	d460      	bmi.n	9682 <__sflush_r+0xce>
    95c0:	684b      	ldr	r3, [r1, #4]
    95c2:	2b00      	cmp	r3, #0
    95c4:	dc04      	bgt.n	95d0 <__sflush_r+0x1c>
    95c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    95c8:	2b00      	cmp	r3, #0
    95ca:	dc01      	bgt.n	95d0 <__sflush_r+0x1c>
    95cc:	2000      	movs	r0, #0
    95ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    95d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    95d2:	2f00      	cmp	r7, #0
    95d4:	d0fa      	beq.n	95cc <__sflush_r+0x18>
    95d6:	2300      	movs	r3, #0
    95d8:	682e      	ldr	r6, [r5, #0]
    95da:	602b      	str	r3, [r5, #0]
    95dc:	2380      	movs	r3, #128	; 0x80
    95de:	015b      	lsls	r3, r3, #5
    95e0:	401a      	ands	r2, r3
    95e2:	d034      	beq.n	964e <__sflush_r+0x9a>
    95e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    95e6:	89a3      	ldrh	r3, [r4, #12]
    95e8:	075b      	lsls	r3, r3, #29
    95ea:	d506      	bpl.n	95fa <__sflush_r+0x46>
    95ec:	6863      	ldr	r3, [r4, #4]
    95ee:	1ac0      	subs	r0, r0, r3
    95f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    95f2:	2b00      	cmp	r3, #0
    95f4:	d001      	beq.n	95fa <__sflush_r+0x46>
    95f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    95f8:	1ac0      	subs	r0, r0, r3
    95fa:	0002      	movs	r2, r0
    95fc:	6a21      	ldr	r1, [r4, #32]
    95fe:	2300      	movs	r3, #0
    9600:	0028      	movs	r0, r5
    9602:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9604:	47b8      	blx	r7
    9606:	89a1      	ldrh	r1, [r4, #12]
    9608:	1c43      	adds	r3, r0, #1
    960a:	d106      	bne.n	961a <__sflush_r+0x66>
    960c:	682b      	ldr	r3, [r5, #0]
    960e:	2b1d      	cmp	r3, #29
    9610:	d831      	bhi.n	9676 <__sflush_r+0xc2>
    9612:	4a2c      	ldr	r2, [pc, #176]	; (96c4 <__sflush_r+0x110>)
    9614:	40da      	lsrs	r2, r3
    9616:	07d3      	lsls	r3, r2, #31
    9618:	d52d      	bpl.n	9676 <__sflush_r+0xc2>
    961a:	2300      	movs	r3, #0
    961c:	6063      	str	r3, [r4, #4]
    961e:	6923      	ldr	r3, [r4, #16]
    9620:	6023      	str	r3, [r4, #0]
    9622:	04cb      	lsls	r3, r1, #19
    9624:	d505      	bpl.n	9632 <__sflush_r+0x7e>
    9626:	1c43      	adds	r3, r0, #1
    9628:	d102      	bne.n	9630 <__sflush_r+0x7c>
    962a:	682b      	ldr	r3, [r5, #0]
    962c:	2b00      	cmp	r3, #0
    962e:	d100      	bne.n	9632 <__sflush_r+0x7e>
    9630:	6560      	str	r0, [r4, #84]	; 0x54
    9632:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9634:	602e      	str	r6, [r5, #0]
    9636:	2900      	cmp	r1, #0
    9638:	d0c8      	beq.n	95cc <__sflush_r+0x18>
    963a:	0023      	movs	r3, r4
    963c:	3344      	adds	r3, #68	; 0x44
    963e:	4299      	cmp	r1, r3
    9640:	d002      	beq.n	9648 <__sflush_r+0x94>
    9642:	0028      	movs	r0, r5
    9644:	f000 f9ba 	bl	99bc <_free_r>
    9648:	2000      	movs	r0, #0
    964a:	6360      	str	r0, [r4, #52]	; 0x34
    964c:	e7bf      	b.n	95ce <__sflush_r+0x1a>
    964e:	2301      	movs	r3, #1
    9650:	6a21      	ldr	r1, [r4, #32]
    9652:	0028      	movs	r0, r5
    9654:	47b8      	blx	r7
    9656:	1c43      	adds	r3, r0, #1
    9658:	d1c5      	bne.n	95e6 <__sflush_r+0x32>
    965a:	682b      	ldr	r3, [r5, #0]
    965c:	2b00      	cmp	r3, #0
    965e:	d0c2      	beq.n	95e6 <__sflush_r+0x32>
    9660:	2b1d      	cmp	r3, #29
    9662:	d001      	beq.n	9668 <__sflush_r+0xb4>
    9664:	2b16      	cmp	r3, #22
    9666:	d101      	bne.n	966c <__sflush_r+0xb8>
    9668:	602e      	str	r6, [r5, #0]
    966a:	e7af      	b.n	95cc <__sflush_r+0x18>
    966c:	2340      	movs	r3, #64	; 0x40
    966e:	89a2      	ldrh	r2, [r4, #12]
    9670:	4313      	orrs	r3, r2
    9672:	81a3      	strh	r3, [r4, #12]
    9674:	e7ab      	b.n	95ce <__sflush_r+0x1a>
    9676:	2340      	movs	r3, #64	; 0x40
    9678:	430b      	orrs	r3, r1
    967a:	2001      	movs	r0, #1
    967c:	81a3      	strh	r3, [r4, #12]
    967e:	4240      	negs	r0, r0
    9680:	e7a5      	b.n	95ce <__sflush_r+0x1a>
    9682:	690f      	ldr	r7, [r1, #16]
    9684:	2f00      	cmp	r7, #0
    9686:	d0a1      	beq.n	95cc <__sflush_r+0x18>
    9688:	680b      	ldr	r3, [r1, #0]
    968a:	600f      	str	r7, [r1, #0]
    968c:	1bdb      	subs	r3, r3, r7
    968e:	9301      	str	r3, [sp, #4]
    9690:	2300      	movs	r3, #0
    9692:	0792      	lsls	r2, r2, #30
    9694:	d100      	bne.n	9698 <__sflush_r+0xe4>
    9696:	694b      	ldr	r3, [r1, #20]
    9698:	60a3      	str	r3, [r4, #8]
    969a:	9b01      	ldr	r3, [sp, #4]
    969c:	2b00      	cmp	r3, #0
    969e:	dc00      	bgt.n	96a2 <__sflush_r+0xee>
    96a0:	e794      	b.n	95cc <__sflush_r+0x18>
    96a2:	9b01      	ldr	r3, [sp, #4]
    96a4:	003a      	movs	r2, r7
    96a6:	6a21      	ldr	r1, [r4, #32]
    96a8:	0028      	movs	r0, r5
    96aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    96ac:	47b0      	blx	r6
    96ae:	2800      	cmp	r0, #0
    96b0:	dc03      	bgt.n	96ba <__sflush_r+0x106>
    96b2:	2340      	movs	r3, #64	; 0x40
    96b4:	89a2      	ldrh	r2, [r4, #12]
    96b6:	4313      	orrs	r3, r2
    96b8:	e7df      	b.n	967a <__sflush_r+0xc6>
    96ba:	9b01      	ldr	r3, [sp, #4]
    96bc:	183f      	adds	r7, r7, r0
    96be:	1a1b      	subs	r3, r3, r0
    96c0:	9301      	str	r3, [sp, #4]
    96c2:	e7ea      	b.n	969a <__sflush_r+0xe6>
    96c4:	20400001 	.word	0x20400001

000096c8 <_fflush_r>:
    96c8:	690b      	ldr	r3, [r1, #16]
    96ca:	b570      	push	{r4, r5, r6, lr}
    96cc:	0005      	movs	r5, r0
    96ce:	000c      	movs	r4, r1
    96d0:	2b00      	cmp	r3, #0
    96d2:	d101      	bne.n	96d8 <_fflush_r+0x10>
    96d4:	2000      	movs	r0, #0
    96d6:	bd70      	pop	{r4, r5, r6, pc}
    96d8:	2800      	cmp	r0, #0
    96da:	d004      	beq.n	96e6 <_fflush_r+0x1e>
    96dc:	6983      	ldr	r3, [r0, #24]
    96de:	2b00      	cmp	r3, #0
    96e0:	d101      	bne.n	96e6 <_fflush_r+0x1e>
    96e2:	f000 f85f 	bl	97a4 <__sinit>
    96e6:	4b0b      	ldr	r3, [pc, #44]	; (9714 <_fflush_r+0x4c>)
    96e8:	429c      	cmp	r4, r3
    96ea:	d109      	bne.n	9700 <_fflush_r+0x38>
    96ec:	686c      	ldr	r4, [r5, #4]
    96ee:	220c      	movs	r2, #12
    96f0:	5ea3      	ldrsh	r3, [r4, r2]
    96f2:	2b00      	cmp	r3, #0
    96f4:	d0ee      	beq.n	96d4 <_fflush_r+0xc>
    96f6:	0021      	movs	r1, r4
    96f8:	0028      	movs	r0, r5
    96fa:	f7ff ff5b 	bl	95b4 <__sflush_r>
    96fe:	e7ea      	b.n	96d6 <_fflush_r+0xe>
    9700:	4b05      	ldr	r3, [pc, #20]	; (9718 <_fflush_r+0x50>)
    9702:	429c      	cmp	r4, r3
    9704:	d101      	bne.n	970a <_fflush_r+0x42>
    9706:	68ac      	ldr	r4, [r5, #8]
    9708:	e7f1      	b.n	96ee <_fflush_r+0x26>
    970a:	4b04      	ldr	r3, [pc, #16]	; (971c <_fflush_r+0x54>)
    970c:	429c      	cmp	r4, r3
    970e:	d1ee      	bne.n	96ee <_fflush_r+0x26>
    9710:	68ec      	ldr	r4, [r5, #12]
    9712:	e7ec      	b.n	96ee <_fflush_r+0x26>
    9714:	0000b0b8 	.word	0x0000b0b8
    9718:	0000b0d8 	.word	0x0000b0d8
    971c:	0000b098 	.word	0x0000b098

00009720 <_cleanup_r>:
    9720:	b510      	push	{r4, lr}
    9722:	4902      	ldr	r1, [pc, #8]	; (972c <_cleanup_r+0xc>)
    9724:	f000 f8b2 	bl	988c <_fwalk_reent>
    9728:	bd10      	pop	{r4, pc}
    972a:	46c0      	nop			; (mov r8, r8)
    972c:	000096c9 	.word	0x000096c9

00009730 <std.isra.0>:
    9730:	2300      	movs	r3, #0
    9732:	b510      	push	{r4, lr}
    9734:	0004      	movs	r4, r0
    9736:	6003      	str	r3, [r0, #0]
    9738:	6043      	str	r3, [r0, #4]
    973a:	6083      	str	r3, [r0, #8]
    973c:	8181      	strh	r1, [r0, #12]
    973e:	6643      	str	r3, [r0, #100]	; 0x64
    9740:	81c2      	strh	r2, [r0, #14]
    9742:	6103      	str	r3, [r0, #16]
    9744:	6143      	str	r3, [r0, #20]
    9746:	6183      	str	r3, [r0, #24]
    9748:	0019      	movs	r1, r3
    974a:	2208      	movs	r2, #8
    974c:	305c      	adds	r0, #92	; 0x5c
    974e:	f7ff fe36 	bl	93be <memset>
    9752:	4b05      	ldr	r3, [pc, #20]	; (9768 <std.isra.0+0x38>)
    9754:	6224      	str	r4, [r4, #32]
    9756:	6263      	str	r3, [r4, #36]	; 0x24
    9758:	4b04      	ldr	r3, [pc, #16]	; (976c <std.isra.0+0x3c>)
    975a:	62a3      	str	r3, [r4, #40]	; 0x28
    975c:	4b04      	ldr	r3, [pc, #16]	; (9770 <std.isra.0+0x40>)
    975e:	62e3      	str	r3, [r4, #44]	; 0x2c
    9760:	4b04      	ldr	r3, [pc, #16]	; (9774 <std.isra.0+0x44>)
    9762:	6323      	str	r3, [r4, #48]	; 0x30
    9764:	bd10      	pop	{r4, pc}
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	0000a395 	.word	0x0000a395
    976c:	0000a3bd 	.word	0x0000a3bd
    9770:	0000a3f5 	.word	0x0000a3f5
    9774:	0000a421 	.word	0x0000a421

00009778 <__sfmoreglue>:
    9778:	b570      	push	{r4, r5, r6, lr}
    977a:	2568      	movs	r5, #104	; 0x68
    977c:	1e4a      	subs	r2, r1, #1
    977e:	4355      	muls	r5, r2
    9780:	000e      	movs	r6, r1
    9782:	0029      	movs	r1, r5
    9784:	3174      	adds	r1, #116	; 0x74
    9786:	f000 f963 	bl	9a50 <_malloc_r>
    978a:	1e04      	subs	r4, r0, #0
    978c:	d008      	beq.n	97a0 <__sfmoreglue+0x28>
    978e:	2100      	movs	r1, #0
    9790:	002a      	movs	r2, r5
    9792:	6001      	str	r1, [r0, #0]
    9794:	6046      	str	r6, [r0, #4]
    9796:	300c      	adds	r0, #12
    9798:	60a0      	str	r0, [r4, #8]
    979a:	3268      	adds	r2, #104	; 0x68
    979c:	f7ff fe0f 	bl	93be <memset>
    97a0:	0020      	movs	r0, r4
    97a2:	bd70      	pop	{r4, r5, r6, pc}

000097a4 <__sinit>:
    97a4:	6983      	ldr	r3, [r0, #24]
    97a6:	b513      	push	{r0, r1, r4, lr}
    97a8:	0004      	movs	r4, r0
    97aa:	2b00      	cmp	r3, #0
    97ac:	d128      	bne.n	9800 <__sinit+0x5c>
    97ae:	6483      	str	r3, [r0, #72]	; 0x48
    97b0:	64c3      	str	r3, [r0, #76]	; 0x4c
    97b2:	6503      	str	r3, [r0, #80]	; 0x50
    97b4:	4b13      	ldr	r3, [pc, #76]	; (9804 <__sinit+0x60>)
    97b6:	4a14      	ldr	r2, [pc, #80]	; (9808 <__sinit+0x64>)
    97b8:	681b      	ldr	r3, [r3, #0]
    97ba:	6282      	str	r2, [r0, #40]	; 0x28
    97bc:	9301      	str	r3, [sp, #4]
    97be:	4298      	cmp	r0, r3
    97c0:	d101      	bne.n	97c6 <__sinit+0x22>
    97c2:	2301      	movs	r3, #1
    97c4:	6183      	str	r3, [r0, #24]
    97c6:	0020      	movs	r0, r4
    97c8:	f000 f820 	bl	980c <__sfp>
    97cc:	6060      	str	r0, [r4, #4]
    97ce:	0020      	movs	r0, r4
    97d0:	f000 f81c 	bl	980c <__sfp>
    97d4:	60a0      	str	r0, [r4, #8]
    97d6:	0020      	movs	r0, r4
    97d8:	f000 f818 	bl	980c <__sfp>
    97dc:	2200      	movs	r2, #0
    97de:	60e0      	str	r0, [r4, #12]
    97e0:	2104      	movs	r1, #4
    97e2:	6860      	ldr	r0, [r4, #4]
    97e4:	f7ff ffa4 	bl	9730 <std.isra.0>
    97e8:	2201      	movs	r2, #1
    97ea:	2109      	movs	r1, #9
    97ec:	68a0      	ldr	r0, [r4, #8]
    97ee:	f7ff ff9f 	bl	9730 <std.isra.0>
    97f2:	2202      	movs	r2, #2
    97f4:	2112      	movs	r1, #18
    97f6:	68e0      	ldr	r0, [r4, #12]
    97f8:	f7ff ff9a 	bl	9730 <std.isra.0>
    97fc:	2301      	movs	r3, #1
    97fe:	61a3      	str	r3, [r4, #24]
    9800:	bd13      	pop	{r0, r1, r4, pc}
    9802:	46c0      	nop			; (mov r8, r8)
    9804:	0000b094 	.word	0x0000b094
    9808:	00009721 	.word	0x00009721

0000980c <__sfp>:
    980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    980e:	4b1e      	ldr	r3, [pc, #120]	; (9888 <__sfp+0x7c>)
    9810:	0007      	movs	r7, r0
    9812:	681e      	ldr	r6, [r3, #0]
    9814:	69b3      	ldr	r3, [r6, #24]
    9816:	2b00      	cmp	r3, #0
    9818:	d102      	bne.n	9820 <__sfp+0x14>
    981a:	0030      	movs	r0, r6
    981c:	f7ff ffc2 	bl	97a4 <__sinit>
    9820:	3648      	adds	r6, #72	; 0x48
    9822:	68b4      	ldr	r4, [r6, #8]
    9824:	6873      	ldr	r3, [r6, #4]
    9826:	3b01      	subs	r3, #1
    9828:	d504      	bpl.n	9834 <__sfp+0x28>
    982a:	6833      	ldr	r3, [r6, #0]
    982c:	2b00      	cmp	r3, #0
    982e:	d007      	beq.n	9840 <__sfp+0x34>
    9830:	6836      	ldr	r6, [r6, #0]
    9832:	e7f6      	b.n	9822 <__sfp+0x16>
    9834:	220c      	movs	r2, #12
    9836:	5ea5      	ldrsh	r5, [r4, r2]
    9838:	2d00      	cmp	r5, #0
    983a:	d00d      	beq.n	9858 <__sfp+0x4c>
    983c:	3468      	adds	r4, #104	; 0x68
    983e:	e7f2      	b.n	9826 <__sfp+0x1a>
    9840:	2104      	movs	r1, #4
    9842:	0038      	movs	r0, r7
    9844:	f7ff ff98 	bl	9778 <__sfmoreglue>
    9848:	6030      	str	r0, [r6, #0]
    984a:	2800      	cmp	r0, #0
    984c:	d1f0      	bne.n	9830 <__sfp+0x24>
    984e:	230c      	movs	r3, #12
    9850:	0004      	movs	r4, r0
    9852:	603b      	str	r3, [r7, #0]
    9854:	0020      	movs	r0, r4
    9856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9858:	2301      	movs	r3, #1
    985a:	0020      	movs	r0, r4
    985c:	425b      	negs	r3, r3
    985e:	81e3      	strh	r3, [r4, #14]
    9860:	3302      	adds	r3, #2
    9862:	81a3      	strh	r3, [r4, #12]
    9864:	6665      	str	r5, [r4, #100]	; 0x64
    9866:	6025      	str	r5, [r4, #0]
    9868:	60a5      	str	r5, [r4, #8]
    986a:	6065      	str	r5, [r4, #4]
    986c:	6125      	str	r5, [r4, #16]
    986e:	6165      	str	r5, [r4, #20]
    9870:	61a5      	str	r5, [r4, #24]
    9872:	2208      	movs	r2, #8
    9874:	0029      	movs	r1, r5
    9876:	305c      	adds	r0, #92	; 0x5c
    9878:	f7ff fda1 	bl	93be <memset>
    987c:	6365      	str	r5, [r4, #52]	; 0x34
    987e:	63a5      	str	r5, [r4, #56]	; 0x38
    9880:	64a5      	str	r5, [r4, #72]	; 0x48
    9882:	64e5      	str	r5, [r4, #76]	; 0x4c
    9884:	e7e6      	b.n	9854 <__sfp+0x48>
    9886:	46c0      	nop			; (mov r8, r8)
    9888:	0000b094 	.word	0x0000b094

0000988c <_fwalk_reent>:
    988c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    988e:	0004      	movs	r4, r0
    9890:	0007      	movs	r7, r0
    9892:	2600      	movs	r6, #0
    9894:	9101      	str	r1, [sp, #4]
    9896:	3448      	adds	r4, #72	; 0x48
    9898:	2c00      	cmp	r4, #0
    989a:	d101      	bne.n	98a0 <_fwalk_reent+0x14>
    989c:	0030      	movs	r0, r6
    989e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    98a0:	6863      	ldr	r3, [r4, #4]
    98a2:	68a5      	ldr	r5, [r4, #8]
    98a4:	9300      	str	r3, [sp, #0]
    98a6:	9b00      	ldr	r3, [sp, #0]
    98a8:	3b01      	subs	r3, #1
    98aa:	9300      	str	r3, [sp, #0]
    98ac:	d501      	bpl.n	98b2 <_fwalk_reent+0x26>
    98ae:	6824      	ldr	r4, [r4, #0]
    98b0:	e7f2      	b.n	9898 <_fwalk_reent+0xc>
    98b2:	89ab      	ldrh	r3, [r5, #12]
    98b4:	2b01      	cmp	r3, #1
    98b6:	d908      	bls.n	98ca <_fwalk_reent+0x3e>
    98b8:	220e      	movs	r2, #14
    98ba:	5eab      	ldrsh	r3, [r5, r2]
    98bc:	3301      	adds	r3, #1
    98be:	d004      	beq.n	98ca <_fwalk_reent+0x3e>
    98c0:	0029      	movs	r1, r5
    98c2:	0038      	movs	r0, r7
    98c4:	9b01      	ldr	r3, [sp, #4]
    98c6:	4798      	blx	r3
    98c8:	4306      	orrs	r6, r0
    98ca:	3568      	adds	r5, #104	; 0x68
    98cc:	e7eb      	b.n	98a6 <_fwalk_reent+0x1a>
	...

000098d0 <__swhatbuf_r>:
    98d0:	b570      	push	{r4, r5, r6, lr}
    98d2:	000e      	movs	r6, r1
    98d4:	001d      	movs	r5, r3
    98d6:	230e      	movs	r3, #14
    98d8:	5ec9      	ldrsh	r1, [r1, r3]
    98da:	b090      	sub	sp, #64	; 0x40
    98dc:	0014      	movs	r4, r2
    98de:	2900      	cmp	r1, #0
    98e0:	da07      	bge.n	98f2 <__swhatbuf_r+0x22>
    98e2:	2300      	movs	r3, #0
    98e4:	602b      	str	r3, [r5, #0]
    98e6:	89b3      	ldrh	r3, [r6, #12]
    98e8:	061b      	lsls	r3, r3, #24
    98ea:	d411      	bmi.n	9910 <__swhatbuf_r+0x40>
    98ec:	2380      	movs	r3, #128	; 0x80
    98ee:	00db      	lsls	r3, r3, #3
    98f0:	e00f      	b.n	9912 <__swhatbuf_r+0x42>
    98f2:	aa01      	add	r2, sp, #4
    98f4:	f000 fe8c 	bl	a610 <_fstat_r>
    98f8:	2800      	cmp	r0, #0
    98fa:	dbf2      	blt.n	98e2 <__swhatbuf_r+0x12>
    98fc:	22f0      	movs	r2, #240	; 0xf0
    98fe:	9b02      	ldr	r3, [sp, #8]
    9900:	0212      	lsls	r2, r2, #8
    9902:	4013      	ands	r3, r2
    9904:	4a05      	ldr	r2, [pc, #20]	; (991c <__swhatbuf_r+0x4c>)
    9906:	189b      	adds	r3, r3, r2
    9908:	425a      	negs	r2, r3
    990a:	4153      	adcs	r3, r2
    990c:	602b      	str	r3, [r5, #0]
    990e:	e7ed      	b.n	98ec <__swhatbuf_r+0x1c>
    9910:	2340      	movs	r3, #64	; 0x40
    9912:	2000      	movs	r0, #0
    9914:	6023      	str	r3, [r4, #0]
    9916:	b010      	add	sp, #64	; 0x40
    9918:	bd70      	pop	{r4, r5, r6, pc}
    991a:	46c0      	nop			; (mov r8, r8)
    991c:	ffffe000 	.word	0xffffe000

00009920 <__smakebuf_r>:
    9920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9922:	2602      	movs	r6, #2
    9924:	898b      	ldrh	r3, [r1, #12]
    9926:	0005      	movs	r5, r0
    9928:	000c      	movs	r4, r1
    992a:	4233      	tst	r3, r6
    992c:	d006      	beq.n	993c <__smakebuf_r+0x1c>
    992e:	0023      	movs	r3, r4
    9930:	3347      	adds	r3, #71	; 0x47
    9932:	6023      	str	r3, [r4, #0]
    9934:	6123      	str	r3, [r4, #16]
    9936:	2301      	movs	r3, #1
    9938:	6163      	str	r3, [r4, #20]
    993a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    993c:	ab01      	add	r3, sp, #4
    993e:	466a      	mov	r2, sp
    9940:	f7ff ffc6 	bl	98d0 <__swhatbuf_r>
    9944:	9900      	ldr	r1, [sp, #0]
    9946:	0007      	movs	r7, r0
    9948:	0028      	movs	r0, r5
    994a:	f000 f881 	bl	9a50 <_malloc_r>
    994e:	2800      	cmp	r0, #0
    9950:	d108      	bne.n	9964 <__smakebuf_r+0x44>
    9952:	220c      	movs	r2, #12
    9954:	5ea3      	ldrsh	r3, [r4, r2]
    9956:	059a      	lsls	r2, r3, #22
    9958:	d4ef      	bmi.n	993a <__smakebuf_r+0x1a>
    995a:	2203      	movs	r2, #3
    995c:	4393      	bics	r3, r2
    995e:	431e      	orrs	r6, r3
    9960:	81a6      	strh	r6, [r4, #12]
    9962:	e7e4      	b.n	992e <__smakebuf_r+0xe>
    9964:	4b0f      	ldr	r3, [pc, #60]	; (99a4 <__smakebuf_r+0x84>)
    9966:	62ab      	str	r3, [r5, #40]	; 0x28
    9968:	2380      	movs	r3, #128	; 0x80
    996a:	89a2      	ldrh	r2, [r4, #12]
    996c:	6020      	str	r0, [r4, #0]
    996e:	4313      	orrs	r3, r2
    9970:	81a3      	strh	r3, [r4, #12]
    9972:	9b00      	ldr	r3, [sp, #0]
    9974:	6120      	str	r0, [r4, #16]
    9976:	6163      	str	r3, [r4, #20]
    9978:	9b01      	ldr	r3, [sp, #4]
    997a:	2b00      	cmp	r3, #0
    997c:	d00d      	beq.n	999a <__smakebuf_r+0x7a>
    997e:	230e      	movs	r3, #14
    9980:	5ee1      	ldrsh	r1, [r4, r3]
    9982:	0028      	movs	r0, r5
    9984:	f000 fe56 	bl	a634 <_isatty_r>
    9988:	2800      	cmp	r0, #0
    998a:	d006      	beq.n	999a <__smakebuf_r+0x7a>
    998c:	2203      	movs	r2, #3
    998e:	89a3      	ldrh	r3, [r4, #12]
    9990:	4393      	bics	r3, r2
    9992:	001a      	movs	r2, r3
    9994:	2301      	movs	r3, #1
    9996:	4313      	orrs	r3, r2
    9998:	81a3      	strh	r3, [r4, #12]
    999a:	89a0      	ldrh	r0, [r4, #12]
    999c:	4338      	orrs	r0, r7
    999e:	81a0      	strh	r0, [r4, #12]
    99a0:	e7cb      	b.n	993a <__smakebuf_r+0x1a>
    99a2:	46c0      	nop			; (mov r8, r8)
    99a4:	00009721 	.word	0x00009721

000099a8 <malloc>:
    99a8:	b510      	push	{r4, lr}
    99aa:	4b03      	ldr	r3, [pc, #12]	; (99b8 <malloc+0x10>)
    99ac:	0001      	movs	r1, r0
    99ae:	6818      	ldr	r0, [r3, #0]
    99b0:	f000 f84e 	bl	9a50 <_malloc_r>
    99b4:	bd10      	pop	{r4, pc}
    99b6:	46c0      	nop			; (mov r8, r8)
    99b8:	20000128 	.word	0x20000128

000099bc <_free_r>:
    99bc:	b570      	push	{r4, r5, r6, lr}
    99be:	0005      	movs	r5, r0
    99c0:	2900      	cmp	r1, #0
    99c2:	d010      	beq.n	99e6 <_free_r+0x2a>
    99c4:	1f0c      	subs	r4, r1, #4
    99c6:	6823      	ldr	r3, [r4, #0]
    99c8:	2b00      	cmp	r3, #0
    99ca:	da00      	bge.n	99ce <_free_r+0x12>
    99cc:	18e4      	adds	r4, r4, r3
    99ce:	0028      	movs	r0, r5
    99d0:	f000 fe73 	bl	a6ba <__malloc_lock>
    99d4:	4a1d      	ldr	r2, [pc, #116]	; (9a4c <_free_r+0x90>)
    99d6:	6813      	ldr	r3, [r2, #0]
    99d8:	2b00      	cmp	r3, #0
    99da:	d105      	bne.n	99e8 <_free_r+0x2c>
    99dc:	6063      	str	r3, [r4, #4]
    99de:	6014      	str	r4, [r2, #0]
    99e0:	0028      	movs	r0, r5
    99e2:	f000 fe6b 	bl	a6bc <__malloc_unlock>
    99e6:	bd70      	pop	{r4, r5, r6, pc}
    99e8:	42a3      	cmp	r3, r4
    99ea:	d909      	bls.n	9a00 <_free_r+0x44>
    99ec:	6821      	ldr	r1, [r4, #0]
    99ee:	1860      	adds	r0, r4, r1
    99f0:	4283      	cmp	r3, r0
    99f2:	d1f3      	bne.n	99dc <_free_r+0x20>
    99f4:	6818      	ldr	r0, [r3, #0]
    99f6:	685b      	ldr	r3, [r3, #4]
    99f8:	1841      	adds	r1, r0, r1
    99fa:	6021      	str	r1, [r4, #0]
    99fc:	e7ee      	b.n	99dc <_free_r+0x20>
    99fe:	0013      	movs	r3, r2
    9a00:	685a      	ldr	r2, [r3, #4]
    9a02:	2a00      	cmp	r2, #0
    9a04:	d001      	beq.n	9a0a <_free_r+0x4e>
    9a06:	42a2      	cmp	r2, r4
    9a08:	d9f9      	bls.n	99fe <_free_r+0x42>
    9a0a:	6819      	ldr	r1, [r3, #0]
    9a0c:	1858      	adds	r0, r3, r1
    9a0e:	42a0      	cmp	r0, r4
    9a10:	d10b      	bne.n	9a2a <_free_r+0x6e>
    9a12:	6820      	ldr	r0, [r4, #0]
    9a14:	1809      	adds	r1, r1, r0
    9a16:	1858      	adds	r0, r3, r1
    9a18:	6019      	str	r1, [r3, #0]
    9a1a:	4282      	cmp	r2, r0
    9a1c:	d1e0      	bne.n	99e0 <_free_r+0x24>
    9a1e:	6810      	ldr	r0, [r2, #0]
    9a20:	6852      	ldr	r2, [r2, #4]
    9a22:	1841      	adds	r1, r0, r1
    9a24:	6019      	str	r1, [r3, #0]
    9a26:	605a      	str	r2, [r3, #4]
    9a28:	e7da      	b.n	99e0 <_free_r+0x24>
    9a2a:	42a0      	cmp	r0, r4
    9a2c:	d902      	bls.n	9a34 <_free_r+0x78>
    9a2e:	230c      	movs	r3, #12
    9a30:	602b      	str	r3, [r5, #0]
    9a32:	e7d5      	b.n	99e0 <_free_r+0x24>
    9a34:	6821      	ldr	r1, [r4, #0]
    9a36:	1860      	adds	r0, r4, r1
    9a38:	4282      	cmp	r2, r0
    9a3a:	d103      	bne.n	9a44 <_free_r+0x88>
    9a3c:	6810      	ldr	r0, [r2, #0]
    9a3e:	6852      	ldr	r2, [r2, #4]
    9a40:	1841      	adds	r1, r0, r1
    9a42:	6021      	str	r1, [r4, #0]
    9a44:	6062      	str	r2, [r4, #4]
    9a46:	605c      	str	r4, [r3, #4]
    9a48:	e7ca      	b.n	99e0 <_free_r+0x24>
    9a4a:	46c0      	nop			; (mov r8, r8)
    9a4c:	2000032c 	.word	0x2000032c

00009a50 <_malloc_r>:
    9a50:	2303      	movs	r3, #3
    9a52:	b570      	push	{r4, r5, r6, lr}
    9a54:	1ccd      	adds	r5, r1, #3
    9a56:	439d      	bics	r5, r3
    9a58:	3508      	adds	r5, #8
    9a5a:	0006      	movs	r6, r0
    9a5c:	2d0c      	cmp	r5, #12
    9a5e:	d21e      	bcs.n	9a9e <_malloc_r+0x4e>
    9a60:	250c      	movs	r5, #12
    9a62:	42a9      	cmp	r1, r5
    9a64:	d81d      	bhi.n	9aa2 <_malloc_r+0x52>
    9a66:	0030      	movs	r0, r6
    9a68:	f000 fe27 	bl	a6ba <__malloc_lock>
    9a6c:	4a25      	ldr	r2, [pc, #148]	; (9b04 <_malloc_r+0xb4>)
    9a6e:	6814      	ldr	r4, [r2, #0]
    9a70:	0021      	movs	r1, r4
    9a72:	2900      	cmp	r1, #0
    9a74:	d119      	bne.n	9aaa <_malloc_r+0x5a>
    9a76:	4c24      	ldr	r4, [pc, #144]	; (9b08 <_malloc_r+0xb8>)
    9a78:	6823      	ldr	r3, [r4, #0]
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d103      	bne.n	9a86 <_malloc_r+0x36>
    9a7e:	0030      	movs	r0, r6
    9a80:	f000 fc76 	bl	a370 <_sbrk_r>
    9a84:	6020      	str	r0, [r4, #0]
    9a86:	0029      	movs	r1, r5
    9a88:	0030      	movs	r0, r6
    9a8a:	f000 fc71 	bl	a370 <_sbrk_r>
    9a8e:	1c43      	adds	r3, r0, #1
    9a90:	d12c      	bne.n	9aec <_malloc_r+0x9c>
    9a92:	230c      	movs	r3, #12
    9a94:	0030      	movs	r0, r6
    9a96:	6033      	str	r3, [r6, #0]
    9a98:	f000 fe10 	bl	a6bc <__malloc_unlock>
    9a9c:	e003      	b.n	9aa6 <_malloc_r+0x56>
    9a9e:	2d00      	cmp	r5, #0
    9aa0:	dadf      	bge.n	9a62 <_malloc_r+0x12>
    9aa2:	230c      	movs	r3, #12
    9aa4:	6033      	str	r3, [r6, #0]
    9aa6:	2000      	movs	r0, #0
    9aa8:	bd70      	pop	{r4, r5, r6, pc}
    9aaa:	680b      	ldr	r3, [r1, #0]
    9aac:	1b5b      	subs	r3, r3, r5
    9aae:	d41a      	bmi.n	9ae6 <_malloc_r+0x96>
    9ab0:	2b0b      	cmp	r3, #11
    9ab2:	d903      	bls.n	9abc <_malloc_r+0x6c>
    9ab4:	600b      	str	r3, [r1, #0]
    9ab6:	18cc      	adds	r4, r1, r3
    9ab8:	6025      	str	r5, [r4, #0]
    9aba:	e003      	b.n	9ac4 <_malloc_r+0x74>
    9abc:	428c      	cmp	r4, r1
    9abe:	d10e      	bne.n	9ade <_malloc_r+0x8e>
    9ac0:	6863      	ldr	r3, [r4, #4]
    9ac2:	6013      	str	r3, [r2, #0]
    9ac4:	0030      	movs	r0, r6
    9ac6:	f000 fdf9 	bl	a6bc <__malloc_unlock>
    9aca:	0020      	movs	r0, r4
    9acc:	2207      	movs	r2, #7
    9ace:	300b      	adds	r0, #11
    9ad0:	1d23      	adds	r3, r4, #4
    9ad2:	4390      	bics	r0, r2
    9ad4:	1ac3      	subs	r3, r0, r3
    9ad6:	d0e7      	beq.n	9aa8 <_malloc_r+0x58>
    9ad8:	425a      	negs	r2, r3
    9ada:	50e2      	str	r2, [r4, r3]
    9adc:	e7e4      	b.n	9aa8 <_malloc_r+0x58>
    9ade:	684b      	ldr	r3, [r1, #4]
    9ae0:	6063      	str	r3, [r4, #4]
    9ae2:	000c      	movs	r4, r1
    9ae4:	e7ee      	b.n	9ac4 <_malloc_r+0x74>
    9ae6:	000c      	movs	r4, r1
    9ae8:	6849      	ldr	r1, [r1, #4]
    9aea:	e7c2      	b.n	9a72 <_malloc_r+0x22>
    9aec:	2303      	movs	r3, #3
    9aee:	1cc4      	adds	r4, r0, #3
    9af0:	439c      	bics	r4, r3
    9af2:	42a0      	cmp	r0, r4
    9af4:	d0e0      	beq.n	9ab8 <_malloc_r+0x68>
    9af6:	1a21      	subs	r1, r4, r0
    9af8:	0030      	movs	r0, r6
    9afa:	f000 fc39 	bl	a370 <_sbrk_r>
    9afe:	1c43      	adds	r3, r0, #1
    9b00:	d1da      	bne.n	9ab8 <_malloc_r+0x68>
    9b02:	e7c6      	b.n	9a92 <_malloc_r+0x42>
    9b04:	2000032c 	.word	0x2000032c
    9b08:	20000330 	.word	0x20000330

00009b0c <__ssputs_r>:
    9b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b0e:	688e      	ldr	r6, [r1, #8]
    9b10:	b085      	sub	sp, #20
    9b12:	0007      	movs	r7, r0
    9b14:	000c      	movs	r4, r1
    9b16:	9203      	str	r2, [sp, #12]
    9b18:	9301      	str	r3, [sp, #4]
    9b1a:	429e      	cmp	r6, r3
    9b1c:	d839      	bhi.n	9b92 <__ssputs_r+0x86>
    9b1e:	2390      	movs	r3, #144	; 0x90
    9b20:	898a      	ldrh	r2, [r1, #12]
    9b22:	00db      	lsls	r3, r3, #3
    9b24:	421a      	tst	r2, r3
    9b26:	d034      	beq.n	9b92 <__ssputs_r+0x86>
    9b28:	2503      	movs	r5, #3
    9b2a:	6909      	ldr	r1, [r1, #16]
    9b2c:	6823      	ldr	r3, [r4, #0]
    9b2e:	1a5b      	subs	r3, r3, r1
    9b30:	9302      	str	r3, [sp, #8]
    9b32:	6963      	ldr	r3, [r4, #20]
    9b34:	9802      	ldr	r0, [sp, #8]
    9b36:	435d      	muls	r5, r3
    9b38:	0feb      	lsrs	r3, r5, #31
    9b3a:	195d      	adds	r5, r3, r5
    9b3c:	9b01      	ldr	r3, [sp, #4]
    9b3e:	106d      	asrs	r5, r5, #1
    9b40:	3301      	adds	r3, #1
    9b42:	181b      	adds	r3, r3, r0
    9b44:	42ab      	cmp	r3, r5
    9b46:	d900      	bls.n	9b4a <__ssputs_r+0x3e>
    9b48:	001d      	movs	r5, r3
    9b4a:	0553      	lsls	r3, r2, #21
    9b4c:	d532      	bpl.n	9bb4 <__ssputs_r+0xa8>
    9b4e:	0029      	movs	r1, r5
    9b50:	0038      	movs	r0, r7
    9b52:	f7ff ff7d 	bl	9a50 <_malloc_r>
    9b56:	1e06      	subs	r6, r0, #0
    9b58:	d109      	bne.n	9b6e <__ssputs_r+0x62>
    9b5a:	230c      	movs	r3, #12
    9b5c:	603b      	str	r3, [r7, #0]
    9b5e:	2340      	movs	r3, #64	; 0x40
    9b60:	2001      	movs	r0, #1
    9b62:	89a2      	ldrh	r2, [r4, #12]
    9b64:	4240      	negs	r0, r0
    9b66:	4313      	orrs	r3, r2
    9b68:	81a3      	strh	r3, [r4, #12]
    9b6a:	b005      	add	sp, #20
    9b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b6e:	9a02      	ldr	r2, [sp, #8]
    9b70:	6921      	ldr	r1, [r4, #16]
    9b72:	f7ff fc1b 	bl	93ac <memcpy>
    9b76:	89a3      	ldrh	r3, [r4, #12]
    9b78:	4a14      	ldr	r2, [pc, #80]	; (9bcc <__ssputs_r+0xc0>)
    9b7a:	401a      	ands	r2, r3
    9b7c:	2380      	movs	r3, #128	; 0x80
    9b7e:	4313      	orrs	r3, r2
    9b80:	81a3      	strh	r3, [r4, #12]
    9b82:	9b02      	ldr	r3, [sp, #8]
    9b84:	6126      	str	r6, [r4, #16]
    9b86:	18f6      	adds	r6, r6, r3
    9b88:	6026      	str	r6, [r4, #0]
    9b8a:	6165      	str	r5, [r4, #20]
    9b8c:	9e01      	ldr	r6, [sp, #4]
    9b8e:	1aed      	subs	r5, r5, r3
    9b90:	60a5      	str	r5, [r4, #8]
    9b92:	9b01      	ldr	r3, [sp, #4]
    9b94:	42b3      	cmp	r3, r6
    9b96:	d200      	bcs.n	9b9a <__ssputs_r+0x8e>
    9b98:	001e      	movs	r6, r3
    9b9a:	0032      	movs	r2, r6
    9b9c:	9903      	ldr	r1, [sp, #12]
    9b9e:	6820      	ldr	r0, [r4, #0]
    9ba0:	f000 fd79 	bl	a696 <memmove>
    9ba4:	68a3      	ldr	r3, [r4, #8]
    9ba6:	2000      	movs	r0, #0
    9ba8:	1b9b      	subs	r3, r3, r6
    9baa:	60a3      	str	r3, [r4, #8]
    9bac:	6823      	ldr	r3, [r4, #0]
    9bae:	199e      	adds	r6, r3, r6
    9bb0:	6026      	str	r6, [r4, #0]
    9bb2:	e7da      	b.n	9b6a <__ssputs_r+0x5e>
    9bb4:	002a      	movs	r2, r5
    9bb6:	0038      	movs	r0, r7
    9bb8:	f000 fd81 	bl	a6be <_realloc_r>
    9bbc:	1e06      	subs	r6, r0, #0
    9bbe:	d1e0      	bne.n	9b82 <__ssputs_r+0x76>
    9bc0:	6921      	ldr	r1, [r4, #16]
    9bc2:	0038      	movs	r0, r7
    9bc4:	f7ff fefa 	bl	99bc <_free_r>
    9bc8:	e7c7      	b.n	9b5a <__ssputs_r+0x4e>
    9bca:	46c0      	nop			; (mov r8, r8)
    9bcc:	fffffb7f 	.word	0xfffffb7f

00009bd0 <_svfiprintf_r>:
    9bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bd2:	b09f      	sub	sp, #124	; 0x7c
    9bd4:	9002      	str	r0, [sp, #8]
    9bd6:	9305      	str	r3, [sp, #20]
    9bd8:	898b      	ldrh	r3, [r1, #12]
    9bda:	000f      	movs	r7, r1
    9bdc:	0016      	movs	r6, r2
    9bde:	061b      	lsls	r3, r3, #24
    9be0:	d511      	bpl.n	9c06 <_svfiprintf_r+0x36>
    9be2:	690b      	ldr	r3, [r1, #16]
    9be4:	2b00      	cmp	r3, #0
    9be6:	d10e      	bne.n	9c06 <_svfiprintf_r+0x36>
    9be8:	2140      	movs	r1, #64	; 0x40
    9bea:	f7ff ff31 	bl	9a50 <_malloc_r>
    9bee:	6038      	str	r0, [r7, #0]
    9bf0:	6138      	str	r0, [r7, #16]
    9bf2:	2800      	cmp	r0, #0
    9bf4:	d105      	bne.n	9c02 <_svfiprintf_r+0x32>
    9bf6:	230c      	movs	r3, #12
    9bf8:	9a02      	ldr	r2, [sp, #8]
    9bfa:	3801      	subs	r0, #1
    9bfc:	6013      	str	r3, [r2, #0]
    9bfe:	b01f      	add	sp, #124	; 0x7c
    9c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c02:	2340      	movs	r3, #64	; 0x40
    9c04:	617b      	str	r3, [r7, #20]
    9c06:	2300      	movs	r3, #0
    9c08:	ad06      	add	r5, sp, #24
    9c0a:	616b      	str	r3, [r5, #20]
    9c0c:	3320      	adds	r3, #32
    9c0e:	766b      	strb	r3, [r5, #25]
    9c10:	3310      	adds	r3, #16
    9c12:	76ab      	strb	r3, [r5, #26]
    9c14:	0034      	movs	r4, r6
    9c16:	7823      	ldrb	r3, [r4, #0]
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d147      	bne.n	9cac <_svfiprintf_r+0xdc>
    9c1c:	1ba3      	subs	r3, r4, r6
    9c1e:	9304      	str	r3, [sp, #16]
    9c20:	d00d      	beq.n	9c3e <_svfiprintf_r+0x6e>
    9c22:	1ba3      	subs	r3, r4, r6
    9c24:	0032      	movs	r2, r6
    9c26:	0039      	movs	r1, r7
    9c28:	9802      	ldr	r0, [sp, #8]
    9c2a:	f7ff ff6f 	bl	9b0c <__ssputs_r>
    9c2e:	1c43      	adds	r3, r0, #1
    9c30:	d100      	bne.n	9c34 <_svfiprintf_r+0x64>
    9c32:	e0b5      	b.n	9da0 <_svfiprintf_r+0x1d0>
    9c34:	696a      	ldr	r2, [r5, #20]
    9c36:	9b04      	ldr	r3, [sp, #16]
    9c38:	4694      	mov	ip, r2
    9c3a:	4463      	add	r3, ip
    9c3c:	616b      	str	r3, [r5, #20]
    9c3e:	7823      	ldrb	r3, [r4, #0]
    9c40:	2b00      	cmp	r3, #0
    9c42:	d100      	bne.n	9c46 <_svfiprintf_r+0x76>
    9c44:	e0ac      	b.n	9da0 <_svfiprintf_r+0x1d0>
    9c46:	2201      	movs	r2, #1
    9c48:	2300      	movs	r3, #0
    9c4a:	4252      	negs	r2, r2
    9c4c:	606a      	str	r2, [r5, #4]
    9c4e:	a902      	add	r1, sp, #8
    9c50:	3254      	adds	r2, #84	; 0x54
    9c52:	1852      	adds	r2, r2, r1
    9c54:	3401      	adds	r4, #1
    9c56:	602b      	str	r3, [r5, #0]
    9c58:	60eb      	str	r3, [r5, #12]
    9c5a:	60ab      	str	r3, [r5, #8]
    9c5c:	7013      	strb	r3, [r2, #0]
    9c5e:	65ab      	str	r3, [r5, #88]	; 0x58
    9c60:	4e58      	ldr	r6, [pc, #352]	; (9dc4 <_svfiprintf_r+0x1f4>)
    9c62:	2205      	movs	r2, #5
    9c64:	7821      	ldrb	r1, [r4, #0]
    9c66:	0030      	movs	r0, r6
    9c68:	f000 fd0a 	bl	a680 <memchr>
    9c6c:	1c62      	adds	r2, r4, #1
    9c6e:	2800      	cmp	r0, #0
    9c70:	d120      	bne.n	9cb4 <_svfiprintf_r+0xe4>
    9c72:	6829      	ldr	r1, [r5, #0]
    9c74:	06cb      	lsls	r3, r1, #27
    9c76:	d504      	bpl.n	9c82 <_svfiprintf_r+0xb2>
    9c78:	2353      	movs	r3, #83	; 0x53
    9c7a:	ae02      	add	r6, sp, #8
    9c7c:	3020      	adds	r0, #32
    9c7e:	199b      	adds	r3, r3, r6
    9c80:	7018      	strb	r0, [r3, #0]
    9c82:	070b      	lsls	r3, r1, #28
    9c84:	d504      	bpl.n	9c90 <_svfiprintf_r+0xc0>
    9c86:	2353      	movs	r3, #83	; 0x53
    9c88:	202b      	movs	r0, #43	; 0x2b
    9c8a:	ae02      	add	r6, sp, #8
    9c8c:	199b      	adds	r3, r3, r6
    9c8e:	7018      	strb	r0, [r3, #0]
    9c90:	7823      	ldrb	r3, [r4, #0]
    9c92:	2b2a      	cmp	r3, #42	; 0x2a
    9c94:	d016      	beq.n	9cc4 <_svfiprintf_r+0xf4>
    9c96:	2000      	movs	r0, #0
    9c98:	210a      	movs	r1, #10
    9c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c9c:	7822      	ldrb	r2, [r4, #0]
    9c9e:	3a30      	subs	r2, #48	; 0x30
    9ca0:	2a09      	cmp	r2, #9
    9ca2:	d955      	bls.n	9d50 <_svfiprintf_r+0x180>
    9ca4:	2800      	cmp	r0, #0
    9ca6:	d015      	beq.n	9cd4 <_svfiprintf_r+0x104>
    9ca8:	9309      	str	r3, [sp, #36]	; 0x24
    9caa:	e013      	b.n	9cd4 <_svfiprintf_r+0x104>
    9cac:	2b25      	cmp	r3, #37	; 0x25
    9cae:	d0b5      	beq.n	9c1c <_svfiprintf_r+0x4c>
    9cb0:	3401      	adds	r4, #1
    9cb2:	e7b0      	b.n	9c16 <_svfiprintf_r+0x46>
    9cb4:	2301      	movs	r3, #1
    9cb6:	1b80      	subs	r0, r0, r6
    9cb8:	4083      	lsls	r3, r0
    9cba:	6829      	ldr	r1, [r5, #0]
    9cbc:	0014      	movs	r4, r2
    9cbe:	430b      	orrs	r3, r1
    9cc0:	602b      	str	r3, [r5, #0]
    9cc2:	e7cd      	b.n	9c60 <_svfiprintf_r+0x90>
    9cc4:	9b05      	ldr	r3, [sp, #20]
    9cc6:	1d18      	adds	r0, r3, #4
    9cc8:	681b      	ldr	r3, [r3, #0]
    9cca:	9005      	str	r0, [sp, #20]
    9ccc:	2b00      	cmp	r3, #0
    9cce:	db39      	blt.n	9d44 <_svfiprintf_r+0x174>
    9cd0:	9309      	str	r3, [sp, #36]	; 0x24
    9cd2:	0014      	movs	r4, r2
    9cd4:	7823      	ldrb	r3, [r4, #0]
    9cd6:	2b2e      	cmp	r3, #46	; 0x2e
    9cd8:	d10b      	bne.n	9cf2 <_svfiprintf_r+0x122>
    9cda:	7863      	ldrb	r3, [r4, #1]
    9cdc:	1c62      	adds	r2, r4, #1
    9cde:	2b2a      	cmp	r3, #42	; 0x2a
    9ce0:	d13e      	bne.n	9d60 <_svfiprintf_r+0x190>
    9ce2:	9b05      	ldr	r3, [sp, #20]
    9ce4:	3402      	adds	r4, #2
    9ce6:	1d1a      	adds	r2, r3, #4
    9ce8:	681b      	ldr	r3, [r3, #0]
    9cea:	9205      	str	r2, [sp, #20]
    9cec:	2b00      	cmp	r3, #0
    9cee:	db34      	blt.n	9d5a <_svfiprintf_r+0x18a>
    9cf0:	9307      	str	r3, [sp, #28]
    9cf2:	4e35      	ldr	r6, [pc, #212]	; (9dc8 <_svfiprintf_r+0x1f8>)
    9cf4:	7821      	ldrb	r1, [r4, #0]
    9cf6:	2203      	movs	r2, #3
    9cf8:	0030      	movs	r0, r6
    9cfa:	f000 fcc1 	bl	a680 <memchr>
    9cfe:	2800      	cmp	r0, #0
    9d00:	d006      	beq.n	9d10 <_svfiprintf_r+0x140>
    9d02:	2340      	movs	r3, #64	; 0x40
    9d04:	1b80      	subs	r0, r0, r6
    9d06:	4083      	lsls	r3, r0
    9d08:	682a      	ldr	r2, [r5, #0]
    9d0a:	3401      	adds	r4, #1
    9d0c:	4313      	orrs	r3, r2
    9d0e:	602b      	str	r3, [r5, #0]
    9d10:	7821      	ldrb	r1, [r4, #0]
    9d12:	2206      	movs	r2, #6
    9d14:	482d      	ldr	r0, [pc, #180]	; (9dcc <_svfiprintf_r+0x1fc>)
    9d16:	1c66      	adds	r6, r4, #1
    9d18:	7629      	strb	r1, [r5, #24]
    9d1a:	f000 fcb1 	bl	a680 <memchr>
    9d1e:	2800      	cmp	r0, #0
    9d20:	d046      	beq.n	9db0 <_svfiprintf_r+0x1e0>
    9d22:	4b2b      	ldr	r3, [pc, #172]	; (9dd0 <_svfiprintf_r+0x200>)
    9d24:	2b00      	cmp	r3, #0
    9d26:	d12f      	bne.n	9d88 <_svfiprintf_r+0x1b8>
    9d28:	6829      	ldr	r1, [r5, #0]
    9d2a:	9b05      	ldr	r3, [sp, #20]
    9d2c:	2207      	movs	r2, #7
    9d2e:	05c9      	lsls	r1, r1, #23
    9d30:	d528      	bpl.n	9d84 <_svfiprintf_r+0x1b4>
    9d32:	189b      	adds	r3, r3, r2
    9d34:	4393      	bics	r3, r2
    9d36:	3308      	adds	r3, #8
    9d38:	9305      	str	r3, [sp, #20]
    9d3a:	696b      	ldr	r3, [r5, #20]
    9d3c:	9a03      	ldr	r2, [sp, #12]
    9d3e:	189b      	adds	r3, r3, r2
    9d40:	616b      	str	r3, [r5, #20]
    9d42:	e767      	b.n	9c14 <_svfiprintf_r+0x44>
    9d44:	425b      	negs	r3, r3
    9d46:	60eb      	str	r3, [r5, #12]
    9d48:	2302      	movs	r3, #2
    9d4a:	430b      	orrs	r3, r1
    9d4c:	602b      	str	r3, [r5, #0]
    9d4e:	e7c0      	b.n	9cd2 <_svfiprintf_r+0x102>
    9d50:	434b      	muls	r3, r1
    9d52:	3401      	adds	r4, #1
    9d54:	189b      	adds	r3, r3, r2
    9d56:	2001      	movs	r0, #1
    9d58:	e7a0      	b.n	9c9c <_svfiprintf_r+0xcc>
    9d5a:	2301      	movs	r3, #1
    9d5c:	425b      	negs	r3, r3
    9d5e:	e7c7      	b.n	9cf0 <_svfiprintf_r+0x120>
    9d60:	2300      	movs	r3, #0
    9d62:	0014      	movs	r4, r2
    9d64:	200a      	movs	r0, #10
    9d66:	001a      	movs	r2, r3
    9d68:	606b      	str	r3, [r5, #4]
    9d6a:	7821      	ldrb	r1, [r4, #0]
    9d6c:	3930      	subs	r1, #48	; 0x30
    9d6e:	2909      	cmp	r1, #9
    9d70:	d903      	bls.n	9d7a <_svfiprintf_r+0x1aa>
    9d72:	2b00      	cmp	r3, #0
    9d74:	d0bd      	beq.n	9cf2 <_svfiprintf_r+0x122>
    9d76:	9207      	str	r2, [sp, #28]
    9d78:	e7bb      	b.n	9cf2 <_svfiprintf_r+0x122>
    9d7a:	4342      	muls	r2, r0
    9d7c:	3401      	adds	r4, #1
    9d7e:	1852      	adds	r2, r2, r1
    9d80:	2301      	movs	r3, #1
    9d82:	e7f2      	b.n	9d6a <_svfiprintf_r+0x19a>
    9d84:	3307      	adds	r3, #7
    9d86:	e7d5      	b.n	9d34 <_svfiprintf_r+0x164>
    9d88:	ab05      	add	r3, sp, #20
    9d8a:	9300      	str	r3, [sp, #0]
    9d8c:	003a      	movs	r2, r7
    9d8e:	4b11      	ldr	r3, [pc, #68]	; (9dd4 <_svfiprintf_r+0x204>)
    9d90:	0029      	movs	r1, r5
    9d92:	9802      	ldr	r0, [sp, #8]
    9d94:	e000      	b.n	9d98 <_svfiprintf_r+0x1c8>
    9d96:	bf00      	nop
    9d98:	9003      	str	r0, [sp, #12]
    9d9a:	9b03      	ldr	r3, [sp, #12]
    9d9c:	3301      	adds	r3, #1
    9d9e:	d1cc      	bne.n	9d3a <_svfiprintf_r+0x16a>
    9da0:	89bb      	ldrh	r3, [r7, #12]
    9da2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9da4:	065b      	lsls	r3, r3, #25
    9da6:	d400      	bmi.n	9daa <_svfiprintf_r+0x1da>
    9da8:	e729      	b.n	9bfe <_svfiprintf_r+0x2e>
    9daa:	2001      	movs	r0, #1
    9dac:	4240      	negs	r0, r0
    9dae:	e726      	b.n	9bfe <_svfiprintf_r+0x2e>
    9db0:	ab05      	add	r3, sp, #20
    9db2:	9300      	str	r3, [sp, #0]
    9db4:	003a      	movs	r2, r7
    9db6:	4b07      	ldr	r3, [pc, #28]	; (9dd4 <_svfiprintf_r+0x204>)
    9db8:	0029      	movs	r1, r5
    9dba:	9802      	ldr	r0, [sp, #8]
    9dbc:	f000 f9be 	bl	a13c <_printf_i>
    9dc0:	e7ea      	b.n	9d98 <_svfiprintf_r+0x1c8>
    9dc2:	46c0      	nop			; (mov r8, r8)
    9dc4:	0000b0f8 	.word	0x0000b0f8
    9dc8:	0000b0fe 	.word	0x0000b0fe
    9dcc:	0000b102 	.word	0x0000b102
    9dd0:	00000000 	.word	0x00000000
    9dd4:	00009b0d 	.word	0x00009b0d

00009dd8 <__sfputc_r>:
    9dd8:	6893      	ldr	r3, [r2, #8]
    9dda:	b510      	push	{r4, lr}
    9ddc:	3b01      	subs	r3, #1
    9dde:	6093      	str	r3, [r2, #8]
    9de0:	2b00      	cmp	r3, #0
    9de2:	da05      	bge.n	9df0 <__sfputc_r+0x18>
    9de4:	6994      	ldr	r4, [r2, #24]
    9de6:	42a3      	cmp	r3, r4
    9de8:	db08      	blt.n	9dfc <__sfputc_r+0x24>
    9dea:	b2cb      	uxtb	r3, r1
    9dec:	2b0a      	cmp	r3, #10
    9dee:	d005      	beq.n	9dfc <__sfputc_r+0x24>
    9df0:	6813      	ldr	r3, [r2, #0]
    9df2:	1c58      	adds	r0, r3, #1
    9df4:	6010      	str	r0, [r2, #0]
    9df6:	7019      	strb	r1, [r3, #0]
    9df8:	b2c8      	uxtb	r0, r1
    9dfa:	bd10      	pop	{r4, pc}
    9dfc:	f000 fb16 	bl	a42c <__swbuf_r>
    9e00:	e7fb      	b.n	9dfa <__sfputc_r+0x22>

00009e02 <__sfputs_r>:
    9e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e04:	0006      	movs	r6, r0
    9e06:	000f      	movs	r7, r1
    9e08:	0014      	movs	r4, r2
    9e0a:	18d5      	adds	r5, r2, r3
    9e0c:	42ac      	cmp	r4, r5
    9e0e:	d101      	bne.n	9e14 <__sfputs_r+0x12>
    9e10:	2000      	movs	r0, #0
    9e12:	e007      	b.n	9e24 <__sfputs_r+0x22>
    9e14:	7821      	ldrb	r1, [r4, #0]
    9e16:	003a      	movs	r2, r7
    9e18:	0030      	movs	r0, r6
    9e1a:	f7ff ffdd 	bl	9dd8 <__sfputc_r>
    9e1e:	3401      	adds	r4, #1
    9e20:	1c43      	adds	r3, r0, #1
    9e22:	d1f3      	bne.n	9e0c <__sfputs_r+0xa>
    9e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009e28 <_vfiprintf_r>:
    9e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e2a:	b09f      	sub	sp, #124	; 0x7c
    9e2c:	0006      	movs	r6, r0
    9e2e:	000f      	movs	r7, r1
    9e30:	0014      	movs	r4, r2
    9e32:	9305      	str	r3, [sp, #20]
    9e34:	2800      	cmp	r0, #0
    9e36:	d004      	beq.n	9e42 <_vfiprintf_r+0x1a>
    9e38:	6983      	ldr	r3, [r0, #24]
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d101      	bne.n	9e42 <_vfiprintf_r+0x1a>
    9e3e:	f7ff fcb1 	bl	97a4 <__sinit>
    9e42:	4b7f      	ldr	r3, [pc, #508]	; (a040 <_vfiprintf_r+0x218>)
    9e44:	429f      	cmp	r7, r3
    9e46:	d15c      	bne.n	9f02 <_vfiprintf_r+0xda>
    9e48:	6877      	ldr	r7, [r6, #4]
    9e4a:	89bb      	ldrh	r3, [r7, #12]
    9e4c:	071b      	lsls	r3, r3, #28
    9e4e:	d562      	bpl.n	9f16 <_vfiprintf_r+0xee>
    9e50:	693b      	ldr	r3, [r7, #16]
    9e52:	2b00      	cmp	r3, #0
    9e54:	d05f      	beq.n	9f16 <_vfiprintf_r+0xee>
    9e56:	2300      	movs	r3, #0
    9e58:	ad06      	add	r5, sp, #24
    9e5a:	616b      	str	r3, [r5, #20]
    9e5c:	3320      	adds	r3, #32
    9e5e:	766b      	strb	r3, [r5, #25]
    9e60:	3310      	adds	r3, #16
    9e62:	76ab      	strb	r3, [r5, #26]
    9e64:	9402      	str	r4, [sp, #8]
    9e66:	9c02      	ldr	r4, [sp, #8]
    9e68:	7823      	ldrb	r3, [r4, #0]
    9e6a:	2b00      	cmp	r3, #0
    9e6c:	d15d      	bne.n	9f2a <_vfiprintf_r+0x102>
    9e6e:	9b02      	ldr	r3, [sp, #8]
    9e70:	1ae3      	subs	r3, r4, r3
    9e72:	9304      	str	r3, [sp, #16]
    9e74:	d00d      	beq.n	9e92 <_vfiprintf_r+0x6a>
    9e76:	9b04      	ldr	r3, [sp, #16]
    9e78:	9a02      	ldr	r2, [sp, #8]
    9e7a:	0039      	movs	r1, r7
    9e7c:	0030      	movs	r0, r6
    9e7e:	f7ff ffc0 	bl	9e02 <__sfputs_r>
    9e82:	1c43      	adds	r3, r0, #1
    9e84:	d100      	bne.n	9e88 <_vfiprintf_r+0x60>
    9e86:	e0cc      	b.n	a022 <_vfiprintf_r+0x1fa>
    9e88:	696a      	ldr	r2, [r5, #20]
    9e8a:	9b04      	ldr	r3, [sp, #16]
    9e8c:	4694      	mov	ip, r2
    9e8e:	4463      	add	r3, ip
    9e90:	616b      	str	r3, [r5, #20]
    9e92:	7823      	ldrb	r3, [r4, #0]
    9e94:	2b00      	cmp	r3, #0
    9e96:	d100      	bne.n	9e9a <_vfiprintf_r+0x72>
    9e98:	e0c3      	b.n	a022 <_vfiprintf_r+0x1fa>
    9e9a:	2201      	movs	r2, #1
    9e9c:	2300      	movs	r3, #0
    9e9e:	4252      	negs	r2, r2
    9ea0:	606a      	str	r2, [r5, #4]
    9ea2:	a902      	add	r1, sp, #8
    9ea4:	3254      	adds	r2, #84	; 0x54
    9ea6:	1852      	adds	r2, r2, r1
    9ea8:	3401      	adds	r4, #1
    9eaa:	602b      	str	r3, [r5, #0]
    9eac:	60eb      	str	r3, [r5, #12]
    9eae:	60ab      	str	r3, [r5, #8]
    9eb0:	7013      	strb	r3, [r2, #0]
    9eb2:	65ab      	str	r3, [r5, #88]	; 0x58
    9eb4:	7821      	ldrb	r1, [r4, #0]
    9eb6:	2205      	movs	r2, #5
    9eb8:	4862      	ldr	r0, [pc, #392]	; (a044 <_vfiprintf_r+0x21c>)
    9eba:	f000 fbe1 	bl	a680 <memchr>
    9ebe:	1c63      	adds	r3, r4, #1
    9ec0:	469c      	mov	ip, r3
    9ec2:	2800      	cmp	r0, #0
    9ec4:	d135      	bne.n	9f32 <_vfiprintf_r+0x10a>
    9ec6:	6829      	ldr	r1, [r5, #0]
    9ec8:	06cb      	lsls	r3, r1, #27
    9eca:	d504      	bpl.n	9ed6 <_vfiprintf_r+0xae>
    9ecc:	2353      	movs	r3, #83	; 0x53
    9ece:	aa02      	add	r2, sp, #8
    9ed0:	3020      	adds	r0, #32
    9ed2:	189b      	adds	r3, r3, r2
    9ed4:	7018      	strb	r0, [r3, #0]
    9ed6:	070b      	lsls	r3, r1, #28
    9ed8:	d504      	bpl.n	9ee4 <_vfiprintf_r+0xbc>
    9eda:	2353      	movs	r3, #83	; 0x53
    9edc:	202b      	movs	r0, #43	; 0x2b
    9ede:	aa02      	add	r2, sp, #8
    9ee0:	189b      	adds	r3, r3, r2
    9ee2:	7018      	strb	r0, [r3, #0]
    9ee4:	7823      	ldrb	r3, [r4, #0]
    9ee6:	2b2a      	cmp	r3, #42	; 0x2a
    9ee8:	d02c      	beq.n	9f44 <_vfiprintf_r+0x11c>
    9eea:	2000      	movs	r0, #0
    9eec:	210a      	movs	r1, #10
    9eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ef0:	7822      	ldrb	r2, [r4, #0]
    9ef2:	3a30      	subs	r2, #48	; 0x30
    9ef4:	2a09      	cmp	r2, #9
    9ef6:	d800      	bhi.n	9efa <_vfiprintf_r+0xd2>
    9ef8:	e06b      	b.n	9fd2 <_vfiprintf_r+0x1aa>
    9efa:	2800      	cmp	r0, #0
    9efc:	d02a      	beq.n	9f54 <_vfiprintf_r+0x12c>
    9efe:	9309      	str	r3, [sp, #36]	; 0x24
    9f00:	e028      	b.n	9f54 <_vfiprintf_r+0x12c>
    9f02:	4b51      	ldr	r3, [pc, #324]	; (a048 <_vfiprintf_r+0x220>)
    9f04:	429f      	cmp	r7, r3
    9f06:	d101      	bne.n	9f0c <_vfiprintf_r+0xe4>
    9f08:	68b7      	ldr	r7, [r6, #8]
    9f0a:	e79e      	b.n	9e4a <_vfiprintf_r+0x22>
    9f0c:	4b4f      	ldr	r3, [pc, #316]	; (a04c <_vfiprintf_r+0x224>)
    9f0e:	429f      	cmp	r7, r3
    9f10:	d19b      	bne.n	9e4a <_vfiprintf_r+0x22>
    9f12:	68f7      	ldr	r7, [r6, #12]
    9f14:	e799      	b.n	9e4a <_vfiprintf_r+0x22>
    9f16:	0039      	movs	r1, r7
    9f18:	0030      	movs	r0, r6
    9f1a:	f000 faf1 	bl	a500 <__swsetup_r>
    9f1e:	2800      	cmp	r0, #0
    9f20:	d099      	beq.n	9e56 <_vfiprintf_r+0x2e>
    9f22:	2001      	movs	r0, #1
    9f24:	4240      	negs	r0, r0
    9f26:	b01f      	add	sp, #124	; 0x7c
    9f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f2a:	2b25      	cmp	r3, #37	; 0x25
    9f2c:	d09f      	beq.n	9e6e <_vfiprintf_r+0x46>
    9f2e:	3401      	adds	r4, #1
    9f30:	e79a      	b.n	9e68 <_vfiprintf_r+0x40>
    9f32:	4b44      	ldr	r3, [pc, #272]	; (a044 <_vfiprintf_r+0x21c>)
    9f34:	6829      	ldr	r1, [r5, #0]
    9f36:	1ac0      	subs	r0, r0, r3
    9f38:	2301      	movs	r3, #1
    9f3a:	4083      	lsls	r3, r0
    9f3c:	430b      	orrs	r3, r1
    9f3e:	602b      	str	r3, [r5, #0]
    9f40:	4664      	mov	r4, ip
    9f42:	e7b7      	b.n	9eb4 <_vfiprintf_r+0x8c>
    9f44:	9b05      	ldr	r3, [sp, #20]
    9f46:	1d18      	adds	r0, r3, #4
    9f48:	681b      	ldr	r3, [r3, #0]
    9f4a:	9005      	str	r0, [sp, #20]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	db3a      	blt.n	9fc6 <_vfiprintf_r+0x19e>
    9f50:	9309      	str	r3, [sp, #36]	; 0x24
    9f52:	4664      	mov	r4, ip
    9f54:	7823      	ldrb	r3, [r4, #0]
    9f56:	2b2e      	cmp	r3, #46	; 0x2e
    9f58:	d10b      	bne.n	9f72 <_vfiprintf_r+0x14a>
    9f5a:	7863      	ldrb	r3, [r4, #1]
    9f5c:	1c62      	adds	r2, r4, #1
    9f5e:	2b2a      	cmp	r3, #42	; 0x2a
    9f60:	d13f      	bne.n	9fe2 <_vfiprintf_r+0x1ba>
    9f62:	9b05      	ldr	r3, [sp, #20]
    9f64:	3402      	adds	r4, #2
    9f66:	1d1a      	adds	r2, r3, #4
    9f68:	681b      	ldr	r3, [r3, #0]
    9f6a:	9205      	str	r2, [sp, #20]
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	db35      	blt.n	9fdc <_vfiprintf_r+0x1b4>
    9f70:	9307      	str	r3, [sp, #28]
    9f72:	7821      	ldrb	r1, [r4, #0]
    9f74:	2203      	movs	r2, #3
    9f76:	4836      	ldr	r0, [pc, #216]	; (a050 <_vfiprintf_r+0x228>)
    9f78:	f000 fb82 	bl	a680 <memchr>
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d007      	beq.n	9f90 <_vfiprintf_r+0x168>
    9f80:	4b33      	ldr	r3, [pc, #204]	; (a050 <_vfiprintf_r+0x228>)
    9f82:	682a      	ldr	r2, [r5, #0]
    9f84:	1ac0      	subs	r0, r0, r3
    9f86:	2340      	movs	r3, #64	; 0x40
    9f88:	4083      	lsls	r3, r0
    9f8a:	4313      	orrs	r3, r2
    9f8c:	602b      	str	r3, [r5, #0]
    9f8e:	3401      	adds	r4, #1
    9f90:	7821      	ldrb	r1, [r4, #0]
    9f92:	1c63      	adds	r3, r4, #1
    9f94:	2206      	movs	r2, #6
    9f96:	482f      	ldr	r0, [pc, #188]	; (a054 <_vfiprintf_r+0x22c>)
    9f98:	9302      	str	r3, [sp, #8]
    9f9a:	7629      	strb	r1, [r5, #24]
    9f9c:	f000 fb70 	bl	a680 <memchr>
    9fa0:	2800      	cmp	r0, #0
    9fa2:	d044      	beq.n	a02e <_vfiprintf_r+0x206>
    9fa4:	4b2c      	ldr	r3, [pc, #176]	; (a058 <_vfiprintf_r+0x230>)
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d12f      	bne.n	a00a <_vfiprintf_r+0x1e2>
    9faa:	6829      	ldr	r1, [r5, #0]
    9fac:	9b05      	ldr	r3, [sp, #20]
    9fae:	2207      	movs	r2, #7
    9fb0:	05c9      	lsls	r1, r1, #23
    9fb2:	d528      	bpl.n	a006 <_vfiprintf_r+0x1de>
    9fb4:	189b      	adds	r3, r3, r2
    9fb6:	4393      	bics	r3, r2
    9fb8:	3308      	adds	r3, #8
    9fba:	9305      	str	r3, [sp, #20]
    9fbc:	696b      	ldr	r3, [r5, #20]
    9fbe:	9a03      	ldr	r2, [sp, #12]
    9fc0:	189b      	adds	r3, r3, r2
    9fc2:	616b      	str	r3, [r5, #20]
    9fc4:	e74f      	b.n	9e66 <_vfiprintf_r+0x3e>
    9fc6:	425b      	negs	r3, r3
    9fc8:	60eb      	str	r3, [r5, #12]
    9fca:	2302      	movs	r3, #2
    9fcc:	430b      	orrs	r3, r1
    9fce:	602b      	str	r3, [r5, #0]
    9fd0:	e7bf      	b.n	9f52 <_vfiprintf_r+0x12a>
    9fd2:	434b      	muls	r3, r1
    9fd4:	3401      	adds	r4, #1
    9fd6:	189b      	adds	r3, r3, r2
    9fd8:	2001      	movs	r0, #1
    9fda:	e789      	b.n	9ef0 <_vfiprintf_r+0xc8>
    9fdc:	2301      	movs	r3, #1
    9fde:	425b      	negs	r3, r3
    9fe0:	e7c6      	b.n	9f70 <_vfiprintf_r+0x148>
    9fe2:	2300      	movs	r3, #0
    9fe4:	0014      	movs	r4, r2
    9fe6:	200a      	movs	r0, #10
    9fe8:	001a      	movs	r2, r3
    9fea:	606b      	str	r3, [r5, #4]
    9fec:	7821      	ldrb	r1, [r4, #0]
    9fee:	3930      	subs	r1, #48	; 0x30
    9ff0:	2909      	cmp	r1, #9
    9ff2:	d903      	bls.n	9ffc <_vfiprintf_r+0x1d4>
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d0bc      	beq.n	9f72 <_vfiprintf_r+0x14a>
    9ff8:	9207      	str	r2, [sp, #28]
    9ffa:	e7ba      	b.n	9f72 <_vfiprintf_r+0x14a>
    9ffc:	4342      	muls	r2, r0
    9ffe:	3401      	adds	r4, #1
    a000:	1852      	adds	r2, r2, r1
    a002:	2301      	movs	r3, #1
    a004:	e7f2      	b.n	9fec <_vfiprintf_r+0x1c4>
    a006:	3307      	adds	r3, #7
    a008:	e7d5      	b.n	9fb6 <_vfiprintf_r+0x18e>
    a00a:	ab05      	add	r3, sp, #20
    a00c:	9300      	str	r3, [sp, #0]
    a00e:	003a      	movs	r2, r7
    a010:	4b12      	ldr	r3, [pc, #72]	; (a05c <_vfiprintf_r+0x234>)
    a012:	0029      	movs	r1, r5
    a014:	0030      	movs	r0, r6
    a016:	e000      	b.n	a01a <_vfiprintf_r+0x1f2>
    a018:	bf00      	nop
    a01a:	9003      	str	r0, [sp, #12]
    a01c:	9b03      	ldr	r3, [sp, #12]
    a01e:	3301      	adds	r3, #1
    a020:	d1cc      	bne.n	9fbc <_vfiprintf_r+0x194>
    a022:	89bb      	ldrh	r3, [r7, #12]
    a024:	065b      	lsls	r3, r3, #25
    a026:	d500      	bpl.n	a02a <_vfiprintf_r+0x202>
    a028:	e77b      	b.n	9f22 <_vfiprintf_r+0xfa>
    a02a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a02c:	e77b      	b.n	9f26 <_vfiprintf_r+0xfe>
    a02e:	ab05      	add	r3, sp, #20
    a030:	9300      	str	r3, [sp, #0]
    a032:	003a      	movs	r2, r7
    a034:	4b09      	ldr	r3, [pc, #36]	; (a05c <_vfiprintf_r+0x234>)
    a036:	0029      	movs	r1, r5
    a038:	0030      	movs	r0, r6
    a03a:	f000 f87f 	bl	a13c <_printf_i>
    a03e:	e7ec      	b.n	a01a <_vfiprintf_r+0x1f2>
    a040:	0000b0b8 	.word	0x0000b0b8
    a044:	0000b0f8 	.word	0x0000b0f8
    a048:	0000b0d8 	.word	0x0000b0d8
    a04c:	0000b098 	.word	0x0000b098
    a050:	0000b0fe 	.word	0x0000b0fe
    a054:	0000b102 	.word	0x0000b102
    a058:	00000000 	.word	0x00000000
    a05c:	00009e03 	.word	0x00009e03

0000a060 <_printf_common>:
    a060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a062:	0015      	movs	r5, r2
    a064:	9301      	str	r3, [sp, #4]
    a066:	688a      	ldr	r2, [r1, #8]
    a068:	690b      	ldr	r3, [r1, #16]
    a06a:	9000      	str	r0, [sp, #0]
    a06c:	000c      	movs	r4, r1
    a06e:	4293      	cmp	r3, r2
    a070:	da00      	bge.n	a074 <_printf_common+0x14>
    a072:	0013      	movs	r3, r2
    a074:	0022      	movs	r2, r4
    a076:	602b      	str	r3, [r5, #0]
    a078:	3243      	adds	r2, #67	; 0x43
    a07a:	7812      	ldrb	r2, [r2, #0]
    a07c:	2a00      	cmp	r2, #0
    a07e:	d001      	beq.n	a084 <_printf_common+0x24>
    a080:	3301      	adds	r3, #1
    a082:	602b      	str	r3, [r5, #0]
    a084:	6823      	ldr	r3, [r4, #0]
    a086:	069b      	lsls	r3, r3, #26
    a088:	d502      	bpl.n	a090 <_printf_common+0x30>
    a08a:	682b      	ldr	r3, [r5, #0]
    a08c:	3302      	adds	r3, #2
    a08e:	602b      	str	r3, [r5, #0]
    a090:	2706      	movs	r7, #6
    a092:	6823      	ldr	r3, [r4, #0]
    a094:	401f      	ands	r7, r3
    a096:	d027      	beq.n	a0e8 <_printf_common+0x88>
    a098:	0023      	movs	r3, r4
    a09a:	3343      	adds	r3, #67	; 0x43
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	1e5a      	subs	r2, r3, #1
    a0a0:	4193      	sbcs	r3, r2
    a0a2:	6822      	ldr	r2, [r4, #0]
    a0a4:	0692      	lsls	r2, r2, #26
    a0a6:	d430      	bmi.n	a10a <_printf_common+0xaa>
    a0a8:	0022      	movs	r2, r4
    a0aa:	9901      	ldr	r1, [sp, #4]
    a0ac:	3243      	adds	r2, #67	; 0x43
    a0ae:	9800      	ldr	r0, [sp, #0]
    a0b0:	9e08      	ldr	r6, [sp, #32]
    a0b2:	47b0      	blx	r6
    a0b4:	1c43      	adds	r3, r0, #1
    a0b6:	d025      	beq.n	a104 <_printf_common+0xa4>
    a0b8:	2306      	movs	r3, #6
    a0ba:	6820      	ldr	r0, [r4, #0]
    a0bc:	682a      	ldr	r2, [r5, #0]
    a0be:	68e1      	ldr	r1, [r4, #12]
    a0c0:	4003      	ands	r3, r0
    a0c2:	2500      	movs	r5, #0
    a0c4:	2b04      	cmp	r3, #4
    a0c6:	d103      	bne.n	a0d0 <_printf_common+0x70>
    a0c8:	1a8d      	subs	r5, r1, r2
    a0ca:	43eb      	mvns	r3, r5
    a0cc:	17db      	asrs	r3, r3, #31
    a0ce:	401d      	ands	r5, r3
    a0d0:	68a3      	ldr	r3, [r4, #8]
    a0d2:	6922      	ldr	r2, [r4, #16]
    a0d4:	4293      	cmp	r3, r2
    a0d6:	dd01      	ble.n	a0dc <_printf_common+0x7c>
    a0d8:	1a9b      	subs	r3, r3, r2
    a0da:	18ed      	adds	r5, r5, r3
    a0dc:	2700      	movs	r7, #0
    a0de:	42bd      	cmp	r5, r7
    a0e0:	d120      	bne.n	a124 <_printf_common+0xc4>
    a0e2:	2000      	movs	r0, #0
    a0e4:	e010      	b.n	a108 <_printf_common+0xa8>
    a0e6:	3701      	adds	r7, #1
    a0e8:	68e3      	ldr	r3, [r4, #12]
    a0ea:	682a      	ldr	r2, [r5, #0]
    a0ec:	1a9b      	subs	r3, r3, r2
    a0ee:	429f      	cmp	r7, r3
    a0f0:	dad2      	bge.n	a098 <_printf_common+0x38>
    a0f2:	0022      	movs	r2, r4
    a0f4:	2301      	movs	r3, #1
    a0f6:	3219      	adds	r2, #25
    a0f8:	9901      	ldr	r1, [sp, #4]
    a0fa:	9800      	ldr	r0, [sp, #0]
    a0fc:	9e08      	ldr	r6, [sp, #32]
    a0fe:	47b0      	blx	r6
    a100:	1c43      	adds	r3, r0, #1
    a102:	d1f0      	bne.n	a0e6 <_printf_common+0x86>
    a104:	2001      	movs	r0, #1
    a106:	4240      	negs	r0, r0
    a108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a10a:	2030      	movs	r0, #48	; 0x30
    a10c:	18e1      	adds	r1, r4, r3
    a10e:	3143      	adds	r1, #67	; 0x43
    a110:	7008      	strb	r0, [r1, #0]
    a112:	0021      	movs	r1, r4
    a114:	1c5a      	adds	r2, r3, #1
    a116:	3145      	adds	r1, #69	; 0x45
    a118:	7809      	ldrb	r1, [r1, #0]
    a11a:	18a2      	adds	r2, r4, r2
    a11c:	3243      	adds	r2, #67	; 0x43
    a11e:	3302      	adds	r3, #2
    a120:	7011      	strb	r1, [r2, #0]
    a122:	e7c1      	b.n	a0a8 <_printf_common+0x48>
    a124:	0022      	movs	r2, r4
    a126:	2301      	movs	r3, #1
    a128:	321a      	adds	r2, #26
    a12a:	9901      	ldr	r1, [sp, #4]
    a12c:	9800      	ldr	r0, [sp, #0]
    a12e:	9e08      	ldr	r6, [sp, #32]
    a130:	47b0      	blx	r6
    a132:	1c43      	adds	r3, r0, #1
    a134:	d0e6      	beq.n	a104 <_printf_common+0xa4>
    a136:	3701      	adds	r7, #1
    a138:	e7d1      	b.n	a0de <_printf_common+0x7e>
	...

0000a13c <_printf_i>:
    a13c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a13e:	b08b      	sub	sp, #44	; 0x2c
    a140:	9206      	str	r2, [sp, #24]
    a142:	000a      	movs	r2, r1
    a144:	3243      	adds	r2, #67	; 0x43
    a146:	9307      	str	r3, [sp, #28]
    a148:	9005      	str	r0, [sp, #20]
    a14a:	9204      	str	r2, [sp, #16]
    a14c:	7e0a      	ldrb	r2, [r1, #24]
    a14e:	000c      	movs	r4, r1
    a150:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a152:	2a6e      	cmp	r2, #110	; 0x6e
    a154:	d100      	bne.n	a158 <_printf_i+0x1c>
    a156:	e08f      	b.n	a278 <_printf_i+0x13c>
    a158:	d817      	bhi.n	a18a <_printf_i+0x4e>
    a15a:	2a63      	cmp	r2, #99	; 0x63
    a15c:	d02c      	beq.n	a1b8 <_printf_i+0x7c>
    a15e:	d808      	bhi.n	a172 <_printf_i+0x36>
    a160:	2a00      	cmp	r2, #0
    a162:	d100      	bne.n	a166 <_printf_i+0x2a>
    a164:	e099      	b.n	a29a <_printf_i+0x15e>
    a166:	2a58      	cmp	r2, #88	; 0x58
    a168:	d054      	beq.n	a214 <_printf_i+0xd8>
    a16a:	0026      	movs	r6, r4
    a16c:	3642      	adds	r6, #66	; 0x42
    a16e:	7032      	strb	r2, [r6, #0]
    a170:	e029      	b.n	a1c6 <_printf_i+0x8a>
    a172:	2a64      	cmp	r2, #100	; 0x64
    a174:	d001      	beq.n	a17a <_printf_i+0x3e>
    a176:	2a69      	cmp	r2, #105	; 0x69
    a178:	d1f7      	bne.n	a16a <_printf_i+0x2e>
    a17a:	6821      	ldr	r1, [r4, #0]
    a17c:	681a      	ldr	r2, [r3, #0]
    a17e:	0608      	lsls	r0, r1, #24
    a180:	d523      	bpl.n	a1ca <_printf_i+0x8e>
    a182:	1d11      	adds	r1, r2, #4
    a184:	6019      	str	r1, [r3, #0]
    a186:	6815      	ldr	r5, [r2, #0]
    a188:	e025      	b.n	a1d6 <_printf_i+0x9a>
    a18a:	2a73      	cmp	r2, #115	; 0x73
    a18c:	d100      	bne.n	a190 <_printf_i+0x54>
    a18e:	e088      	b.n	a2a2 <_printf_i+0x166>
    a190:	d808      	bhi.n	a1a4 <_printf_i+0x68>
    a192:	2a6f      	cmp	r2, #111	; 0x6f
    a194:	d029      	beq.n	a1ea <_printf_i+0xae>
    a196:	2a70      	cmp	r2, #112	; 0x70
    a198:	d1e7      	bne.n	a16a <_printf_i+0x2e>
    a19a:	2220      	movs	r2, #32
    a19c:	6809      	ldr	r1, [r1, #0]
    a19e:	430a      	orrs	r2, r1
    a1a0:	6022      	str	r2, [r4, #0]
    a1a2:	e003      	b.n	a1ac <_printf_i+0x70>
    a1a4:	2a75      	cmp	r2, #117	; 0x75
    a1a6:	d020      	beq.n	a1ea <_printf_i+0xae>
    a1a8:	2a78      	cmp	r2, #120	; 0x78
    a1aa:	d1de      	bne.n	a16a <_printf_i+0x2e>
    a1ac:	0022      	movs	r2, r4
    a1ae:	2178      	movs	r1, #120	; 0x78
    a1b0:	3245      	adds	r2, #69	; 0x45
    a1b2:	7011      	strb	r1, [r2, #0]
    a1b4:	4a6c      	ldr	r2, [pc, #432]	; (a368 <_printf_i+0x22c>)
    a1b6:	e030      	b.n	a21a <_printf_i+0xde>
    a1b8:	000e      	movs	r6, r1
    a1ba:	681a      	ldr	r2, [r3, #0]
    a1bc:	3642      	adds	r6, #66	; 0x42
    a1be:	1d11      	adds	r1, r2, #4
    a1c0:	6019      	str	r1, [r3, #0]
    a1c2:	6813      	ldr	r3, [r2, #0]
    a1c4:	7033      	strb	r3, [r6, #0]
    a1c6:	2301      	movs	r3, #1
    a1c8:	e079      	b.n	a2be <_printf_i+0x182>
    a1ca:	0649      	lsls	r1, r1, #25
    a1cc:	d5d9      	bpl.n	a182 <_printf_i+0x46>
    a1ce:	1d11      	adds	r1, r2, #4
    a1d0:	6019      	str	r1, [r3, #0]
    a1d2:	2300      	movs	r3, #0
    a1d4:	5ed5      	ldrsh	r5, [r2, r3]
    a1d6:	2d00      	cmp	r5, #0
    a1d8:	da03      	bge.n	a1e2 <_printf_i+0xa6>
    a1da:	232d      	movs	r3, #45	; 0x2d
    a1dc:	9a04      	ldr	r2, [sp, #16]
    a1de:	426d      	negs	r5, r5
    a1e0:	7013      	strb	r3, [r2, #0]
    a1e2:	4b62      	ldr	r3, [pc, #392]	; (a36c <_printf_i+0x230>)
    a1e4:	270a      	movs	r7, #10
    a1e6:	9303      	str	r3, [sp, #12]
    a1e8:	e02f      	b.n	a24a <_printf_i+0x10e>
    a1ea:	6820      	ldr	r0, [r4, #0]
    a1ec:	6819      	ldr	r1, [r3, #0]
    a1ee:	0605      	lsls	r5, r0, #24
    a1f0:	d503      	bpl.n	a1fa <_printf_i+0xbe>
    a1f2:	1d08      	adds	r0, r1, #4
    a1f4:	6018      	str	r0, [r3, #0]
    a1f6:	680d      	ldr	r5, [r1, #0]
    a1f8:	e005      	b.n	a206 <_printf_i+0xca>
    a1fa:	0640      	lsls	r0, r0, #25
    a1fc:	d5f9      	bpl.n	a1f2 <_printf_i+0xb6>
    a1fe:	680d      	ldr	r5, [r1, #0]
    a200:	1d08      	adds	r0, r1, #4
    a202:	6018      	str	r0, [r3, #0]
    a204:	b2ad      	uxth	r5, r5
    a206:	4b59      	ldr	r3, [pc, #356]	; (a36c <_printf_i+0x230>)
    a208:	2708      	movs	r7, #8
    a20a:	9303      	str	r3, [sp, #12]
    a20c:	2a6f      	cmp	r2, #111	; 0x6f
    a20e:	d018      	beq.n	a242 <_printf_i+0x106>
    a210:	270a      	movs	r7, #10
    a212:	e016      	b.n	a242 <_printf_i+0x106>
    a214:	3145      	adds	r1, #69	; 0x45
    a216:	700a      	strb	r2, [r1, #0]
    a218:	4a54      	ldr	r2, [pc, #336]	; (a36c <_printf_i+0x230>)
    a21a:	9203      	str	r2, [sp, #12]
    a21c:	681a      	ldr	r2, [r3, #0]
    a21e:	6821      	ldr	r1, [r4, #0]
    a220:	1d10      	adds	r0, r2, #4
    a222:	6018      	str	r0, [r3, #0]
    a224:	6815      	ldr	r5, [r2, #0]
    a226:	0608      	lsls	r0, r1, #24
    a228:	d522      	bpl.n	a270 <_printf_i+0x134>
    a22a:	07cb      	lsls	r3, r1, #31
    a22c:	d502      	bpl.n	a234 <_printf_i+0xf8>
    a22e:	2320      	movs	r3, #32
    a230:	4319      	orrs	r1, r3
    a232:	6021      	str	r1, [r4, #0]
    a234:	2710      	movs	r7, #16
    a236:	2d00      	cmp	r5, #0
    a238:	d103      	bne.n	a242 <_printf_i+0x106>
    a23a:	2320      	movs	r3, #32
    a23c:	6822      	ldr	r2, [r4, #0]
    a23e:	439a      	bics	r2, r3
    a240:	6022      	str	r2, [r4, #0]
    a242:	0023      	movs	r3, r4
    a244:	2200      	movs	r2, #0
    a246:	3343      	adds	r3, #67	; 0x43
    a248:	701a      	strb	r2, [r3, #0]
    a24a:	6863      	ldr	r3, [r4, #4]
    a24c:	60a3      	str	r3, [r4, #8]
    a24e:	2b00      	cmp	r3, #0
    a250:	db5c      	blt.n	a30c <_printf_i+0x1d0>
    a252:	2204      	movs	r2, #4
    a254:	6821      	ldr	r1, [r4, #0]
    a256:	4391      	bics	r1, r2
    a258:	6021      	str	r1, [r4, #0]
    a25a:	2d00      	cmp	r5, #0
    a25c:	d158      	bne.n	a310 <_printf_i+0x1d4>
    a25e:	9e04      	ldr	r6, [sp, #16]
    a260:	2b00      	cmp	r3, #0
    a262:	d064      	beq.n	a32e <_printf_i+0x1f2>
    a264:	0026      	movs	r6, r4
    a266:	9b03      	ldr	r3, [sp, #12]
    a268:	3642      	adds	r6, #66	; 0x42
    a26a:	781b      	ldrb	r3, [r3, #0]
    a26c:	7033      	strb	r3, [r6, #0]
    a26e:	e05e      	b.n	a32e <_printf_i+0x1f2>
    a270:	0648      	lsls	r0, r1, #25
    a272:	d5da      	bpl.n	a22a <_printf_i+0xee>
    a274:	b2ad      	uxth	r5, r5
    a276:	e7d8      	b.n	a22a <_printf_i+0xee>
    a278:	6809      	ldr	r1, [r1, #0]
    a27a:	681a      	ldr	r2, [r3, #0]
    a27c:	0608      	lsls	r0, r1, #24
    a27e:	d505      	bpl.n	a28c <_printf_i+0x150>
    a280:	1d11      	adds	r1, r2, #4
    a282:	6019      	str	r1, [r3, #0]
    a284:	6813      	ldr	r3, [r2, #0]
    a286:	6962      	ldr	r2, [r4, #20]
    a288:	601a      	str	r2, [r3, #0]
    a28a:	e006      	b.n	a29a <_printf_i+0x15e>
    a28c:	0649      	lsls	r1, r1, #25
    a28e:	d5f7      	bpl.n	a280 <_printf_i+0x144>
    a290:	1d11      	adds	r1, r2, #4
    a292:	6019      	str	r1, [r3, #0]
    a294:	6813      	ldr	r3, [r2, #0]
    a296:	8aa2      	ldrh	r2, [r4, #20]
    a298:	801a      	strh	r2, [r3, #0]
    a29a:	2300      	movs	r3, #0
    a29c:	9e04      	ldr	r6, [sp, #16]
    a29e:	6123      	str	r3, [r4, #16]
    a2a0:	e054      	b.n	a34c <_printf_i+0x210>
    a2a2:	681a      	ldr	r2, [r3, #0]
    a2a4:	1d11      	adds	r1, r2, #4
    a2a6:	6019      	str	r1, [r3, #0]
    a2a8:	6816      	ldr	r6, [r2, #0]
    a2aa:	2100      	movs	r1, #0
    a2ac:	6862      	ldr	r2, [r4, #4]
    a2ae:	0030      	movs	r0, r6
    a2b0:	f000 f9e6 	bl	a680 <memchr>
    a2b4:	2800      	cmp	r0, #0
    a2b6:	d001      	beq.n	a2bc <_printf_i+0x180>
    a2b8:	1b80      	subs	r0, r0, r6
    a2ba:	6060      	str	r0, [r4, #4]
    a2bc:	6863      	ldr	r3, [r4, #4]
    a2be:	6123      	str	r3, [r4, #16]
    a2c0:	2300      	movs	r3, #0
    a2c2:	9a04      	ldr	r2, [sp, #16]
    a2c4:	7013      	strb	r3, [r2, #0]
    a2c6:	e041      	b.n	a34c <_printf_i+0x210>
    a2c8:	6923      	ldr	r3, [r4, #16]
    a2ca:	0032      	movs	r2, r6
    a2cc:	9906      	ldr	r1, [sp, #24]
    a2ce:	9805      	ldr	r0, [sp, #20]
    a2d0:	9d07      	ldr	r5, [sp, #28]
    a2d2:	47a8      	blx	r5
    a2d4:	1c43      	adds	r3, r0, #1
    a2d6:	d043      	beq.n	a360 <_printf_i+0x224>
    a2d8:	6823      	ldr	r3, [r4, #0]
    a2da:	2500      	movs	r5, #0
    a2dc:	079b      	lsls	r3, r3, #30
    a2de:	d40f      	bmi.n	a300 <_printf_i+0x1c4>
    a2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2e2:	68e0      	ldr	r0, [r4, #12]
    a2e4:	4298      	cmp	r0, r3
    a2e6:	da3d      	bge.n	a364 <_printf_i+0x228>
    a2e8:	0018      	movs	r0, r3
    a2ea:	e03b      	b.n	a364 <_printf_i+0x228>
    a2ec:	0022      	movs	r2, r4
    a2ee:	2301      	movs	r3, #1
    a2f0:	3219      	adds	r2, #25
    a2f2:	9906      	ldr	r1, [sp, #24]
    a2f4:	9805      	ldr	r0, [sp, #20]
    a2f6:	9e07      	ldr	r6, [sp, #28]
    a2f8:	47b0      	blx	r6
    a2fa:	1c43      	adds	r3, r0, #1
    a2fc:	d030      	beq.n	a360 <_printf_i+0x224>
    a2fe:	3501      	adds	r5, #1
    a300:	68e3      	ldr	r3, [r4, #12]
    a302:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a304:	1a9b      	subs	r3, r3, r2
    a306:	429d      	cmp	r5, r3
    a308:	dbf0      	blt.n	a2ec <_printf_i+0x1b0>
    a30a:	e7e9      	b.n	a2e0 <_printf_i+0x1a4>
    a30c:	2d00      	cmp	r5, #0
    a30e:	d0a9      	beq.n	a264 <_printf_i+0x128>
    a310:	9e04      	ldr	r6, [sp, #16]
    a312:	0028      	movs	r0, r5
    a314:	0039      	movs	r1, r7
    a316:	f7fe fde1 	bl	8edc <__aeabi_uidivmod>
    a31a:	9b03      	ldr	r3, [sp, #12]
    a31c:	3e01      	subs	r6, #1
    a31e:	5c5b      	ldrb	r3, [r3, r1]
    a320:	0028      	movs	r0, r5
    a322:	7033      	strb	r3, [r6, #0]
    a324:	0039      	movs	r1, r7
    a326:	f7fe fd53 	bl	8dd0 <__udivsi3>
    a32a:	1e05      	subs	r5, r0, #0
    a32c:	d1f1      	bne.n	a312 <_printf_i+0x1d6>
    a32e:	2f08      	cmp	r7, #8
    a330:	d109      	bne.n	a346 <_printf_i+0x20a>
    a332:	6823      	ldr	r3, [r4, #0]
    a334:	07db      	lsls	r3, r3, #31
    a336:	d506      	bpl.n	a346 <_printf_i+0x20a>
    a338:	6863      	ldr	r3, [r4, #4]
    a33a:	6922      	ldr	r2, [r4, #16]
    a33c:	4293      	cmp	r3, r2
    a33e:	dc02      	bgt.n	a346 <_printf_i+0x20a>
    a340:	2330      	movs	r3, #48	; 0x30
    a342:	3e01      	subs	r6, #1
    a344:	7033      	strb	r3, [r6, #0]
    a346:	9b04      	ldr	r3, [sp, #16]
    a348:	1b9b      	subs	r3, r3, r6
    a34a:	6123      	str	r3, [r4, #16]
    a34c:	9b07      	ldr	r3, [sp, #28]
    a34e:	aa09      	add	r2, sp, #36	; 0x24
    a350:	9300      	str	r3, [sp, #0]
    a352:	0021      	movs	r1, r4
    a354:	9b06      	ldr	r3, [sp, #24]
    a356:	9805      	ldr	r0, [sp, #20]
    a358:	f7ff fe82 	bl	a060 <_printf_common>
    a35c:	1c43      	adds	r3, r0, #1
    a35e:	d1b3      	bne.n	a2c8 <_printf_i+0x18c>
    a360:	2001      	movs	r0, #1
    a362:	4240      	negs	r0, r0
    a364:	b00b      	add	sp, #44	; 0x2c
    a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a368:	0000b11a 	.word	0x0000b11a
    a36c:	0000b109 	.word	0x0000b109

0000a370 <_sbrk_r>:
    a370:	2300      	movs	r3, #0
    a372:	b570      	push	{r4, r5, r6, lr}
    a374:	4c06      	ldr	r4, [pc, #24]	; (a390 <_sbrk_r+0x20>)
    a376:	0005      	movs	r5, r0
    a378:	0008      	movs	r0, r1
    a37a:	6023      	str	r3, [r4, #0]
    a37c:	f7fe fd0a 	bl	8d94 <_sbrk>
    a380:	1c43      	adds	r3, r0, #1
    a382:	d103      	bne.n	a38c <_sbrk_r+0x1c>
    a384:	6823      	ldr	r3, [r4, #0]
    a386:	2b00      	cmp	r3, #0
    a388:	d000      	beq.n	a38c <_sbrk_r+0x1c>
    a38a:	602b      	str	r3, [r5, #0]
    a38c:	bd70      	pop	{r4, r5, r6, pc}
    a38e:	46c0      	nop			; (mov r8, r8)
    a390:	20001ba0 	.word	0x20001ba0

0000a394 <__sread>:
    a394:	b570      	push	{r4, r5, r6, lr}
    a396:	000c      	movs	r4, r1
    a398:	250e      	movs	r5, #14
    a39a:	5f49      	ldrsh	r1, [r1, r5]
    a39c:	f000 f9b6 	bl	a70c <_read_r>
    a3a0:	2800      	cmp	r0, #0
    a3a2:	db03      	blt.n	a3ac <__sread+0x18>
    a3a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a3a6:	181b      	adds	r3, r3, r0
    a3a8:	6563      	str	r3, [r4, #84]	; 0x54
    a3aa:	bd70      	pop	{r4, r5, r6, pc}
    a3ac:	89a3      	ldrh	r3, [r4, #12]
    a3ae:	4a02      	ldr	r2, [pc, #8]	; (a3b8 <__sread+0x24>)
    a3b0:	4013      	ands	r3, r2
    a3b2:	81a3      	strh	r3, [r4, #12]
    a3b4:	e7f9      	b.n	a3aa <__sread+0x16>
    a3b6:	46c0      	nop			; (mov r8, r8)
    a3b8:	ffffefff 	.word	0xffffefff

0000a3bc <__swrite>:
    a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3be:	001f      	movs	r7, r3
    a3c0:	898b      	ldrh	r3, [r1, #12]
    a3c2:	0005      	movs	r5, r0
    a3c4:	000c      	movs	r4, r1
    a3c6:	0016      	movs	r6, r2
    a3c8:	05db      	lsls	r3, r3, #23
    a3ca:	d505      	bpl.n	a3d8 <__swrite+0x1c>
    a3cc:	230e      	movs	r3, #14
    a3ce:	5ec9      	ldrsh	r1, [r1, r3]
    a3d0:	2200      	movs	r2, #0
    a3d2:	2302      	movs	r3, #2
    a3d4:	f000 f940 	bl	a658 <_lseek_r>
    a3d8:	89a3      	ldrh	r3, [r4, #12]
    a3da:	4a05      	ldr	r2, [pc, #20]	; (a3f0 <__swrite+0x34>)
    a3dc:	0028      	movs	r0, r5
    a3de:	4013      	ands	r3, r2
    a3e0:	81a3      	strh	r3, [r4, #12]
    a3e2:	0032      	movs	r2, r6
    a3e4:	230e      	movs	r3, #14
    a3e6:	5ee1      	ldrsh	r1, [r4, r3]
    a3e8:	003b      	movs	r3, r7
    a3ea:	f000 f875 	bl	a4d8 <_write_r>
    a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3f0:	ffffefff 	.word	0xffffefff

0000a3f4 <__sseek>:
    a3f4:	b570      	push	{r4, r5, r6, lr}
    a3f6:	000c      	movs	r4, r1
    a3f8:	250e      	movs	r5, #14
    a3fa:	5f49      	ldrsh	r1, [r1, r5]
    a3fc:	f000 f92c 	bl	a658 <_lseek_r>
    a400:	89a3      	ldrh	r3, [r4, #12]
    a402:	1c42      	adds	r2, r0, #1
    a404:	d103      	bne.n	a40e <__sseek+0x1a>
    a406:	4a05      	ldr	r2, [pc, #20]	; (a41c <__sseek+0x28>)
    a408:	4013      	ands	r3, r2
    a40a:	81a3      	strh	r3, [r4, #12]
    a40c:	bd70      	pop	{r4, r5, r6, pc}
    a40e:	2280      	movs	r2, #128	; 0x80
    a410:	0152      	lsls	r2, r2, #5
    a412:	4313      	orrs	r3, r2
    a414:	81a3      	strh	r3, [r4, #12]
    a416:	6560      	str	r0, [r4, #84]	; 0x54
    a418:	e7f8      	b.n	a40c <__sseek+0x18>
    a41a:	46c0      	nop			; (mov r8, r8)
    a41c:	ffffefff 	.word	0xffffefff

0000a420 <__sclose>:
    a420:	b510      	push	{r4, lr}
    a422:	230e      	movs	r3, #14
    a424:	5ec9      	ldrsh	r1, [r1, r3]
    a426:	f000 f8e1 	bl	a5ec <_close_r>
    a42a:	bd10      	pop	{r4, pc}

0000a42c <__swbuf_r>:
    a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a42e:	0005      	movs	r5, r0
    a430:	000e      	movs	r6, r1
    a432:	0014      	movs	r4, r2
    a434:	2800      	cmp	r0, #0
    a436:	d004      	beq.n	a442 <__swbuf_r+0x16>
    a438:	6983      	ldr	r3, [r0, #24]
    a43a:	2b00      	cmp	r3, #0
    a43c:	d101      	bne.n	a442 <__swbuf_r+0x16>
    a43e:	f7ff f9b1 	bl	97a4 <__sinit>
    a442:	4b22      	ldr	r3, [pc, #136]	; (a4cc <__swbuf_r+0xa0>)
    a444:	429c      	cmp	r4, r3
    a446:	d12d      	bne.n	a4a4 <__swbuf_r+0x78>
    a448:	686c      	ldr	r4, [r5, #4]
    a44a:	69a3      	ldr	r3, [r4, #24]
    a44c:	60a3      	str	r3, [r4, #8]
    a44e:	89a3      	ldrh	r3, [r4, #12]
    a450:	071b      	lsls	r3, r3, #28
    a452:	d531      	bpl.n	a4b8 <__swbuf_r+0x8c>
    a454:	6923      	ldr	r3, [r4, #16]
    a456:	2b00      	cmp	r3, #0
    a458:	d02e      	beq.n	a4b8 <__swbuf_r+0x8c>
    a45a:	6823      	ldr	r3, [r4, #0]
    a45c:	6922      	ldr	r2, [r4, #16]
    a45e:	b2f7      	uxtb	r7, r6
    a460:	1a98      	subs	r0, r3, r2
    a462:	6963      	ldr	r3, [r4, #20]
    a464:	b2f6      	uxtb	r6, r6
    a466:	4298      	cmp	r0, r3
    a468:	db05      	blt.n	a476 <__swbuf_r+0x4a>
    a46a:	0021      	movs	r1, r4
    a46c:	0028      	movs	r0, r5
    a46e:	f7ff f92b 	bl	96c8 <_fflush_r>
    a472:	2800      	cmp	r0, #0
    a474:	d126      	bne.n	a4c4 <__swbuf_r+0x98>
    a476:	68a3      	ldr	r3, [r4, #8]
    a478:	3001      	adds	r0, #1
    a47a:	3b01      	subs	r3, #1
    a47c:	60a3      	str	r3, [r4, #8]
    a47e:	6823      	ldr	r3, [r4, #0]
    a480:	1c5a      	adds	r2, r3, #1
    a482:	6022      	str	r2, [r4, #0]
    a484:	701f      	strb	r7, [r3, #0]
    a486:	6963      	ldr	r3, [r4, #20]
    a488:	4298      	cmp	r0, r3
    a48a:	d004      	beq.n	a496 <__swbuf_r+0x6a>
    a48c:	89a3      	ldrh	r3, [r4, #12]
    a48e:	07db      	lsls	r3, r3, #31
    a490:	d51a      	bpl.n	a4c8 <__swbuf_r+0x9c>
    a492:	2e0a      	cmp	r6, #10
    a494:	d118      	bne.n	a4c8 <__swbuf_r+0x9c>
    a496:	0021      	movs	r1, r4
    a498:	0028      	movs	r0, r5
    a49a:	f7ff f915 	bl	96c8 <_fflush_r>
    a49e:	2800      	cmp	r0, #0
    a4a0:	d012      	beq.n	a4c8 <__swbuf_r+0x9c>
    a4a2:	e00f      	b.n	a4c4 <__swbuf_r+0x98>
    a4a4:	4b0a      	ldr	r3, [pc, #40]	; (a4d0 <__swbuf_r+0xa4>)
    a4a6:	429c      	cmp	r4, r3
    a4a8:	d101      	bne.n	a4ae <__swbuf_r+0x82>
    a4aa:	68ac      	ldr	r4, [r5, #8]
    a4ac:	e7cd      	b.n	a44a <__swbuf_r+0x1e>
    a4ae:	4b09      	ldr	r3, [pc, #36]	; (a4d4 <__swbuf_r+0xa8>)
    a4b0:	429c      	cmp	r4, r3
    a4b2:	d1ca      	bne.n	a44a <__swbuf_r+0x1e>
    a4b4:	68ec      	ldr	r4, [r5, #12]
    a4b6:	e7c8      	b.n	a44a <__swbuf_r+0x1e>
    a4b8:	0021      	movs	r1, r4
    a4ba:	0028      	movs	r0, r5
    a4bc:	f000 f820 	bl	a500 <__swsetup_r>
    a4c0:	2800      	cmp	r0, #0
    a4c2:	d0ca      	beq.n	a45a <__swbuf_r+0x2e>
    a4c4:	2601      	movs	r6, #1
    a4c6:	4276      	negs	r6, r6
    a4c8:	0030      	movs	r0, r6
    a4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4cc:	0000b0b8 	.word	0x0000b0b8
    a4d0:	0000b0d8 	.word	0x0000b0d8
    a4d4:	0000b098 	.word	0x0000b098

0000a4d8 <_write_r>:
    a4d8:	b570      	push	{r4, r5, r6, lr}
    a4da:	0005      	movs	r5, r0
    a4dc:	0008      	movs	r0, r1
    a4de:	0011      	movs	r1, r2
    a4e0:	2200      	movs	r2, #0
    a4e2:	4c06      	ldr	r4, [pc, #24]	; (a4fc <_write_r+0x24>)
    a4e4:	6022      	str	r2, [r4, #0]
    a4e6:	001a      	movs	r2, r3
    a4e8:	f7f9 fbda 	bl	3ca0 <_write>
    a4ec:	1c43      	adds	r3, r0, #1
    a4ee:	d103      	bne.n	a4f8 <_write_r+0x20>
    a4f0:	6823      	ldr	r3, [r4, #0]
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d000      	beq.n	a4f8 <_write_r+0x20>
    a4f6:	602b      	str	r3, [r5, #0]
    a4f8:	bd70      	pop	{r4, r5, r6, pc}
    a4fa:	46c0      	nop			; (mov r8, r8)
    a4fc:	20001ba0 	.word	0x20001ba0

0000a500 <__swsetup_r>:
    a500:	4b36      	ldr	r3, [pc, #216]	; (a5dc <__swsetup_r+0xdc>)
    a502:	b570      	push	{r4, r5, r6, lr}
    a504:	681d      	ldr	r5, [r3, #0]
    a506:	0006      	movs	r6, r0
    a508:	000c      	movs	r4, r1
    a50a:	2d00      	cmp	r5, #0
    a50c:	d005      	beq.n	a51a <__swsetup_r+0x1a>
    a50e:	69ab      	ldr	r3, [r5, #24]
    a510:	2b00      	cmp	r3, #0
    a512:	d102      	bne.n	a51a <__swsetup_r+0x1a>
    a514:	0028      	movs	r0, r5
    a516:	f7ff f945 	bl	97a4 <__sinit>
    a51a:	4b31      	ldr	r3, [pc, #196]	; (a5e0 <__swsetup_r+0xe0>)
    a51c:	429c      	cmp	r4, r3
    a51e:	d10f      	bne.n	a540 <__swsetup_r+0x40>
    a520:	686c      	ldr	r4, [r5, #4]
    a522:	230c      	movs	r3, #12
    a524:	5ee2      	ldrsh	r2, [r4, r3]
    a526:	b293      	uxth	r3, r2
    a528:	0719      	lsls	r1, r3, #28
    a52a:	d42d      	bmi.n	a588 <__swsetup_r+0x88>
    a52c:	06d9      	lsls	r1, r3, #27
    a52e:	d411      	bmi.n	a554 <__swsetup_r+0x54>
    a530:	2309      	movs	r3, #9
    a532:	2001      	movs	r0, #1
    a534:	6033      	str	r3, [r6, #0]
    a536:	3337      	adds	r3, #55	; 0x37
    a538:	4313      	orrs	r3, r2
    a53a:	81a3      	strh	r3, [r4, #12]
    a53c:	4240      	negs	r0, r0
    a53e:	bd70      	pop	{r4, r5, r6, pc}
    a540:	4b28      	ldr	r3, [pc, #160]	; (a5e4 <__swsetup_r+0xe4>)
    a542:	429c      	cmp	r4, r3
    a544:	d101      	bne.n	a54a <__swsetup_r+0x4a>
    a546:	68ac      	ldr	r4, [r5, #8]
    a548:	e7eb      	b.n	a522 <__swsetup_r+0x22>
    a54a:	4b27      	ldr	r3, [pc, #156]	; (a5e8 <__swsetup_r+0xe8>)
    a54c:	429c      	cmp	r4, r3
    a54e:	d1e8      	bne.n	a522 <__swsetup_r+0x22>
    a550:	68ec      	ldr	r4, [r5, #12]
    a552:	e7e6      	b.n	a522 <__swsetup_r+0x22>
    a554:	075b      	lsls	r3, r3, #29
    a556:	d513      	bpl.n	a580 <__swsetup_r+0x80>
    a558:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a55a:	2900      	cmp	r1, #0
    a55c:	d008      	beq.n	a570 <__swsetup_r+0x70>
    a55e:	0023      	movs	r3, r4
    a560:	3344      	adds	r3, #68	; 0x44
    a562:	4299      	cmp	r1, r3
    a564:	d002      	beq.n	a56c <__swsetup_r+0x6c>
    a566:	0030      	movs	r0, r6
    a568:	f7ff fa28 	bl	99bc <_free_r>
    a56c:	2300      	movs	r3, #0
    a56e:	6363      	str	r3, [r4, #52]	; 0x34
    a570:	2224      	movs	r2, #36	; 0x24
    a572:	89a3      	ldrh	r3, [r4, #12]
    a574:	4393      	bics	r3, r2
    a576:	81a3      	strh	r3, [r4, #12]
    a578:	2300      	movs	r3, #0
    a57a:	6063      	str	r3, [r4, #4]
    a57c:	6923      	ldr	r3, [r4, #16]
    a57e:	6023      	str	r3, [r4, #0]
    a580:	2308      	movs	r3, #8
    a582:	89a2      	ldrh	r2, [r4, #12]
    a584:	4313      	orrs	r3, r2
    a586:	81a3      	strh	r3, [r4, #12]
    a588:	6923      	ldr	r3, [r4, #16]
    a58a:	2b00      	cmp	r3, #0
    a58c:	d10b      	bne.n	a5a6 <__swsetup_r+0xa6>
    a58e:	21a0      	movs	r1, #160	; 0xa0
    a590:	2280      	movs	r2, #128	; 0x80
    a592:	89a3      	ldrh	r3, [r4, #12]
    a594:	0089      	lsls	r1, r1, #2
    a596:	0092      	lsls	r2, r2, #2
    a598:	400b      	ands	r3, r1
    a59a:	4293      	cmp	r3, r2
    a59c:	d003      	beq.n	a5a6 <__swsetup_r+0xa6>
    a59e:	0021      	movs	r1, r4
    a5a0:	0030      	movs	r0, r6
    a5a2:	f7ff f9bd 	bl	9920 <__smakebuf_r>
    a5a6:	2301      	movs	r3, #1
    a5a8:	89a2      	ldrh	r2, [r4, #12]
    a5aa:	4013      	ands	r3, r2
    a5ac:	d011      	beq.n	a5d2 <__swsetup_r+0xd2>
    a5ae:	2300      	movs	r3, #0
    a5b0:	60a3      	str	r3, [r4, #8]
    a5b2:	6963      	ldr	r3, [r4, #20]
    a5b4:	425b      	negs	r3, r3
    a5b6:	61a3      	str	r3, [r4, #24]
    a5b8:	2000      	movs	r0, #0
    a5ba:	6923      	ldr	r3, [r4, #16]
    a5bc:	4283      	cmp	r3, r0
    a5be:	d1be      	bne.n	a53e <__swsetup_r+0x3e>
    a5c0:	230c      	movs	r3, #12
    a5c2:	5ee2      	ldrsh	r2, [r4, r3]
    a5c4:	0613      	lsls	r3, r2, #24
    a5c6:	d5ba      	bpl.n	a53e <__swsetup_r+0x3e>
    a5c8:	2340      	movs	r3, #64	; 0x40
    a5ca:	4313      	orrs	r3, r2
    a5cc:	81a3      	strh	r3, [r4, #12]
    a5ce:	3801      	subs	r0, #1
    a5d0:	e7b5      	b.n	a53e <__swsetup_r+0x3e>
    a5d2:	0792      	lsls	r2, r2, #30
    a5d4:	d400      	bmi.n	a5d8 <__swsetup_r+0xd8>
    a5d6:	6963      	ldr	r3, [r4, #20]
    a5d8:	60a3      	str	r3, [r4, #8]
    a5da:	e7ed      	b.n	a5b8 <__swsetup_r+0xb8>
    a5dc:	20000128 	.word	0x20000128
    a5e0:	0000b0b8 	.word	0x0000b0b8
    a5e4:	0000b0d8 	.word	0x0000b0d8
    a5e8:	0000b098 	.word	0x0000b098

0000a5ec <_close_r>:
    a5ec:	2300      	movs	r3, #0
    a5ee:	b570      	push	{r4, r5, r6, lr}
    a5f0:	4c06      	ldr	r4, [pc, #24]	; (a60c <_close_r+0x20>)
    a5f2:	0005      	movs	r5, r0
    a5f4:	0008      	movs	r0, r1
    a5f6:	6023      	str	r3, [r4, #0]
    a5f8:	f7fe fbde 	bl	8db8 <_close>
    a5fc:	1c43      	adds	r3, r0, #1
    a5fe:	d103      	bne.n	a608 <_close_r+0x1c>
    a600:	6823      	ldr	r3, [r4, #0]
    a602:	2b00      	cmp	r3, #0
    a604:	d000      	beq.n	a608 <_close_r+0x1c>
    a606:	602b      	str	r3, [r5, #0]
    a608:	bd70      	pop	{r4, r5, r6, pc}
    a60a:	46c0      	nop			; (mov r8, r8)
    a60c:	20001ba0 	.word	0x20001ba0

0000a610 <_fstat_r>:
    a610:	2300      	movs	r3, #0
    a612:	b570      	push	{r4, r5, r6, lr}
    a614:	4c06      	ldr	r4, [pc, #24]	; (a630 <_fstat_r+0x20>)
    a616:	0005      	movs	r5, r0
    a618:	0008      	movs	r0, r1
    a61a:	0011      	movs	r1, r2
    a61c:	6023      	str	r3, [r4, #0]
    a61e:	f7fe fbce 	bl	8dbe <_fstat>
    a622:	1c43      	adds	r3, r0, #1
    a624:	d103      	bne.n	a62e <_fstat_r+0x1e>
    a626:	6823      	ldr	r3, [r4, #0]
    a628:	2b00      	cmp	r3, #0
    a62a:	d000      	beq.n	a62e <_fstat_r+0x1e>
    a62c:	602b      	str	r3, [r5, #0]
    a62e:	bd70      	pop	{r4, r5, r6, pc}
    a630:	20001ba0 	.word	0x20001ba0

0000a634 <_isatty_r>:
    a634:	2300      	movs	r3, #0
    a636:	b570      	push	{r4, r5, r6, lr}
    a638:	4c06      	ldr	r4, [pc, #24]	; (a654 <_isatty_r+0x20>)
    a63a:	0005      	movs	r5, r0
    a63c:	0008      	movs	r0, r1
    a63e:	6023      	str	r3, [r4, #0]
    a640:	f7fe fbc2 	bl	8dc8 <_isatty>
    a644:	1c43      	adds	r3, r0, #1
    a646:	d103      	bne.n	a650 <_isatty_r+0x1c>
    a648:	6823      	ldr	r3, [r4, #0]
    a64a:	2b00      	cmp	r3, #0
    a64c:	d000      	beq.n	a650 <_isatty_r+0x1c>
    a64e:	602b      	str	r3, [r5, #0]
    a650:	bd70      	pop	{r4, r5, r6, pc}
    a652:	46c0      	nop			; (mov r8, r8)
    a654:	20001ba0 	.word	0x20001ba0

0000a658 <_lseek_r>:
    a658:	b570      	push	{r4, r5, r6, lr}
    a65a:	0005      	movs	r5, r0
    a65c:	0008      	movs	r0, r1
    a65e:	0011      	movs	r1, r2
    a660:	2200      	movs	r2, #0
    a662:	4c06      	ldr	r4, [pc, #24]	; (a67c <_lseek_r+0x24>)
    a664:	6022      	str	r2, [r4, #0]
    a666:	001a      	movs	r2, r3
    a668:	f7fe fbb0 	bl	8dcc <_lseek>
    a66c:	1c43      	adds	r3, r0, #1
    a66e:	d103      	bne.n	a678 <_lseek_r+0x20>
    a670:	6823      	ldr	r3, [r4, #0]
    a672:	2b00      	cmp	r3, #0
    a674:	d000      	beq.n	a678 <_lseek_r+0x20>
    a676:	602b      	str	r3, [r5, #0]
    a678:	bd70      	pop	{r4, r5, r6, pc}
    a67a:	46c0      	nop			; (mov r8, r8)
    a67c:	20001ba0 	.word	0x20001ba0

0000a680 <memchr>:
    a680:	b2c9      	uxtb	r1, r1
    a682:	1882      	adds	r2, r0, r2
    a684:	4290      	cmp	r0, r2
    a686:	d101      	bne.n	a68c <memchr+0xc>
    a688:	2000      	movs	r0, #0
    a68a:	4770      	bx	lr
    a68c:	7803      	ldrb	r3, [r0, #0]
    a68e:	428b      	cmp	r3, r1
    a690:	d0fb      	beq.n	a68a <memchr+0xa>
    a692:	3001      	adds	r0, #1
    a694:	e7f6      	b.n	a684 <memchr+0x4>

0000a696 <memmove>:
    a696:	b510      	push	{r4, lr}
    a698:	4288      	cmp	r0, r1
    a69a:	d902      	bls.n	a6a2 <memmove+0xc>
    a69c:	188b      	adds	r3, r1, r2
    a69e:	4298      	cmp	r0, r3
    a6a0:	d308      	bcc.n	a6b4 <memmove+0x1e>
    a6a2:	2300      	movs	r3, #0
    a6a4:	429a      	cmp	r2, r3
    a6a6:	d007      	beq.n	a6b8 <memmove+0x22>
    a6a8:	5ccc      	ldrb	r4, [r1, r3]
    a6aa:	54c4      	strb	r4, [r0, r3]
    a6ac:	3301      	adds	r3, #1
    a6ae:	e7f9      	b.n	a6a4 <memmove+0xe>
    a6b0:	5c8b      	ldrb	r3, [r1, r2]
    a6b2:	5483      	strb	r3, [r0, r2]
    a6b4:	3a01      	subs	r2, #1
    a6b6:	d2fb      	bcs.n	a6b0 <memmove+0x1a>
    a6b8:	bd10      	pop	{r4, pc}

0000a6ba <__malloc_lock>:
    a6ba:	4770      	bx	lr

0000a6bc <__malloc_unlock>:
    a6bc:	4770      	bx	lr

0000a6be <_realloc_r>:
    a6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6c0:	0007      	movs	r7, r0
    a6c2:	000d      	movs	r5, r1
    a6c4:	0016      	movs	r6, r2
    a6c6:	2900      	cmp	r1, #0
    a6c8:	d105      	bne.n	a6d6 <_realloc_r+0x18>
    a6ca:	0011      	movs	r1, r2
    a6cc:	f7ff f9c0 	bl	9a50 <_malloc_r>
    a6d0:	0004      	movs	r4, r0
    a6d2:	0020      	movs	r0, r4
    a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6d6:	2a00      	cmp	r2, #0
    a6d8:	d103      	bne.n	a6e2 <_realloc_r+0x24>
    a6da:	f7ff f96f 	bl	99bc <_free_r>
    a6de:	0034      	movs	r4, r6
    a6e0:	e7f7      	b.n	a6d2 <_realloc_r+0x14>
    a6e2:	f000 f827 	bl	a734 <_malloc_usable_size_r>
    a6e6:	002c      	movs	r4, r5
    a6e8:	4286      	cmp	r6, r0
    a6ea:	d9f2      	bls.n	a6d2 <_realloc_r+0x14>
    a6ec:	0031      	movs	r1, r6
    a6ee:	0038      	movs	r0, r7
    a6f0:	f7ff f9ae 	bl	9a50 <_malloc_r>
    a6f4:	1e04      	subs	r4, r0, #0
    a6f6:	d0ec      	beq.n	a6d2 <_realloc_r+0x14>
    a6f8:	0029      	movs	r1, r5
    a6fa:	0032      	movs	r2, r6
    a6fc:	f7fe fe56 	bl	93ac <memcpy>
    a700:	0029      	movs	r1, r5
    a702:	0038      	movs	r0, r7
    a704:	f7ff f95a 	bl	99bc <_free_r>
    a708:	e7e3      	b.n	a6d2 <_realloc_r+0x14>
	...

0000a70c <_read_r>:
    a70c:	b570      	push	{r4, r5, r6, lr}
    a70e:	0005      	movs	r5, r0
    a710:	0008      	movs	r0, r1
    a712:	0011      	movs	r1, r2
    a714:	2200      	movs	r2, #0
    a716:	4c06      	ldr	r4, [pc, #24]	; (a730 <_read_r+0x24>)
    a718:	6022      	str	r2, [r4, #0]
    a71a:	001a      	movs	r2, r3
    a71c:	f7f9 fa9e 	bl	3c5c <_read>
    a720:	1c43      	adds	r3, r0, #1
    a722:	d103      	bne.n	a72c <_read_r+0x20>
    a724:	6823      	ldr	r3, [r4, #0]
    a726:	2b00      	cmp	r3, #0
    a728:	d000      	beq.n	a72c <_read_r+0x20>
    a72a:	602b      	str	r3, [r5, #0]
    a72c:	bd70      	pop	{r4, r5, r6, pc}
    a72e:	46c0      	nop			; (mov r8, r8)
    a730:	20001ba0 	.word	0x20001ba0

0000a734 <_malloc_usable_size_r>:
    a734:	1f0b      	subs	r3, r1, #4
    a736:	681b      	ldr	r3, [r3, #0]
    a738:	1f18      	subs	r0, r3, #4
    a73a:	2b00      	cmp	r3, #0
    a73c:	da01      	bge.n	a742 <_malloc_usable_size_r+0xe>
    a73e:	580b      	ldr	r3, [r1, r0]
    a740:	18c0      	adds	r0, r0, r3
    a742:	4770      	bx	lr

0000a744 <_tcc_apbcmasks>:
    a744:	0100 0000 0200 0000 0400 0000               ............

0000a750 <_tcc_cc_nums>:
    a750:	0204 0002                                   ....

0000a754 <_tcc_gclk_ids>:
    a754:	1a1a 001b                                   ....

0000a758 <_tcc_maxs>:
    a758:	ffff 00ff ffff 00ff ffff 0000               ............

0000a764 <_tcc_ow_nums>:
    a764:	0408 0002                                   ....

0000a768 <_tcc_intflag>:
    a768:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    a778:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    a788:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000a798 <tcc_interrupt_vectors.12466>:
    a798:	100f 0011                                   ....

0000a79c <mmc_trans_multipliers>:
    a79c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    a7ac:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    a7bc:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    a7cc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000a7dc <sd_mmc_trans_units>:
    a7dc:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000a7f8 <sd_trans_multipliers>:
    a7f8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    a808:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    a818:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    a828:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    a838:	161a 0000 16f0 0000 16f0 0000 155c 0000     ............\...
    a848:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a858:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a868:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a878:	16f0 0000 16f0 0000 1580 0000 16f0 0000     ................
    a888:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a898:	16f0 0000 16f0 0000 160a 0000 169e 0000     ................
    a8a8:	16f0 0000 16f0 0000 16be 0000 16f0 0000     ................
    a8b8:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a8c8:	16f0 0000 1646 0000 16f0 0000 16f0 0000     ....F...........
    a8d8:	16e0 0000 16f0 0000 16e8 0000 16f0 0000     ................
    a8e8:	16f0 0000 16f0 0000 16f0 0000 16d6 0000     ................
    a8f8:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a908:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a918:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a928:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a938:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a948:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a958:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a968:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a978:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a988:	16f0 0000 16f0 0000 16f0 0000 16f0 0000     ................
    a998:	16f0 0000 16f0 0000 1612 0000 3231 3133     ............1231
    a9a8:	3332 3231 3133 3332 0000 0000 2abe 0000     23123123.....*..
    a9b8:	2aba 0000 2aba 0000 2b28 0000 2b28 0000     .*...*..(+..(+..
    a9c8:	2ad2 0000 2ac4 0000 2ad8 0000 2b16 0000     .*...*...*...+..
    a9d8:	2cac 0000 2c8c 0000 2c8c 0000 2d18 0000     .,...,...,...-..
    a9e8:	2c9e 0000 2cba 0000 2c90 0000 2cc8 0000     .,...,...,...,..
    a9f8:	2d08 0000                                   .-..

0000a9fc <LfnOfs>:
    a9fc:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000aa0c <excvt.4558>:
    aa0c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    aa1c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    aa2c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    aa3c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    aa4c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    aa5c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    aa6c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    aa7c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    aa8c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    aa9c:	5d5b 0000                                   []..

0000aaa0 <Tbl>:
    aaa0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    aab0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    aac0:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    aad0:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    aae0:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    aaf0:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    ab00:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    ab10:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    ab20:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    ab30:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    ab40:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    ab50:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    ab60:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    ab70:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    ab80:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    ab90:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000aba0 <tbl_lower.4308>:
    aba0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    abb0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    abc0:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    abd0:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    abe0:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    abf0:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    ac00:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    ac10:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    ac20:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    ac30:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    ac40:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    ac50:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    ac60:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    ac70:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    ac80:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    ac90:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    aca0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    acb0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    acc0:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    acd0:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    ace0:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    acf0:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    ad00:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    ad10:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    ad20:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    ad30:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    ad40:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    ad50:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    ad60:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    ad70:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000ad80 <tbl_upper.4309>:
    ad80:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    ad90:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    ada0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    adb0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    adc0:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    add0:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    ade0:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    adf0:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    ae00:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    ae10:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    ae20:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    ae30:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    ae40:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    ae50:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    ae60:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    ae70:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    ae80:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    ae90:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    aea0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    aeb0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    aec0:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    aed0:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    aee0:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    aef0:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    af00:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    af10:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    af20:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    af30:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    af40:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    af50:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    af60:	6425 0000 3025 6432 0000 0000 7245 6f72     %d..%02d....Erro
    af70:	2072 6877 6c69 2065 706f 6e65 6e69 2067     r while opening 
    af80:	6966 656c 203a 2523 0a64 000d 7245 6f72     file: #%d...Erro
    af90:	2072 6877 6c69 2065 7277 7469 6e69 2067     r while writing 
    afa0:	4157 2056 6568 6461 7265 203a 2523 0a64     WAV header: #%d.
    afb0:	000d 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
    afc0:	6e69 7469 6169 696c 697a 676e 6120 6475     initializing aud
    afd0:	6f69 7220 6365 726f 6964 676e 2121 0d0a     io recording!!..
    afe0:	0000 0000 7245 6f72 2072 7277 7469 6e69     ....Error writin
    aff0:	2067 6863 6e75 6b63 0a21 000d 6143 6472     g chunck!...Card
    b000:	6920 736e 6174 6c6c 6620 6961 216c 0d0a      install fail!..
    b010:	0000 0000 6c50 6165 6573 7520 706e 756c     ....Please unplu
    b020:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
    b030:	2065 6163 6472 0a2e 000d 0000 64f4 0000     e card.......d..
    b040:	6502 0000 659c 0000 663c 0000 66a0 0000     .e...e..<f...f..

0000b050 <_usb_device_irq_bits>:
    b050:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

0000b060 <_usb_endpoint_irq_bits>:
    b060:	0c03 6010 0800 4200 0c00 4200 1000 4200     ...`...B...B...B
    b070:	1400 4200 1800 4200 1c00 4200 5322 2f44     ...B...B...B"SD/
    b080:	4d4d 2043 6143 6472 6f20 6576 2072 5053     MMC Card over SP
    b090:	2249 0000                                   I"..

0000b094 <_global_impure_ptr>:
    b094:	012c 2000                                   ,.. 

0000b098 <__sf_fake_stderr>:
	...

0000b0b8 <__sf_fake_stdin>:
	...

0000b0d8 <__sf_fake_stdout>:
	...
    b0f8:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    b108:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    b118:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    b128:	6665 0000                                   ef..

0000b12c <_init>:
    b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b12e:	46c0      	nop			; (mov r8, r8)
    b130:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b132:	bc08      	pop	{r3}
    b134:	469e      	mov	lr, r3
    b136:	4770      	bx	lr

0000b138 <__init_array_start>:
    b138:	000000dd 	.word	0x000000dd

0000b13c <_fini>:
    b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b13e:	46c0      	nop			; (mov r8, r8)
    b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b142:	bc08      	pop	{r3}
    b144:	469e      	mov	lr, r3
    b146:	4770      	bx	lr

0000b148 <__fini_array_start>:
    b148:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	111d 0000 1791 0000 17b9 0000 10c1 0000     ................
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12608>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <wave_header>:
200000ac:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
200000bc:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
200000cc:	0004 0010 6164 6174 0000 0000               ....data....

200000d8 <udc_config>:
200000d8:	010c 2000 00e4 2000 0000 0000               ... ... ....

200000e4 <udc_config_lsfs>:
200000e4:	00ec 2000 0120 2000                         ...  .. 

200000ec <udc_desc_fs>:
200000ec:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000fc:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

2000010c <udc_device_desc>:
2000010c:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000011c:	0103 0000                                   ....

20000120 <udi_apis>:
20000120:	0030 2000                                   0.. 

20000124 <ss_pins>:
20000124:	0105                                             .

20000125 <g_interrupt_enabled>:
20000125:	0001 2c00                                        ...

20000128 <_impure_ptr>:
20000128:	012c 2000                                   ,.. 

2000012c <impure_data>:
2000012c:	0000 0000 b0b8 0000 b0d8 0000 b098 0000     ................
	...
