
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b10c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b10c  0000b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000018c  20000000  0000b114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000d14  2000018c  0000b2a0  0002018c  2**2
                  ALLOC
  4 .stack        00002000  20000ea0  0000bfb4  0002018c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006f3b2  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008bd2  00000000  00000000  0008f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000167c6  00000000  00000000  00098191  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010b8  00000000  00000000  000ae957  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001948  00000000  00000000  000afa0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026bc9  00000000  00000000  000b1357  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000201ff  00000000  00000000  000d7f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009fae7  00000000  00000000  000f811f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000035ac  00000000  00000000  00197c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 2e 00 20 35 8c 00 00 31 8c 00 00 31 8c 00 00     ... 5...1...1...
	...
      2c:	31 8c 00 00 00 00 00 00 00 00 00 00 31 8c 00 00     1...........1...
      3c:	31 8c 00 00 31 8c 00 00 31 8c 00 00 31 8c 00 00     1...1...1...1...
      4c:	31 8c 00 00 09 71 00 00 31 8c 00 00 31 8c 00 00     1....q..1...1...
      5c:	c5 68 00 00 31 8c 00 00 91 28 00 00 a1 28 00 00     .h..1....(...(..
      6c:	b1 28 00 00 c1 28 00 00 d1 28 00 00 e1 28 00 00     .(...(...(...(..
      7c:	45 07 00 00 55 07 00 00 65 07 00 00 31 8c 00 00     E...U...e...1...
      8c:	31 8c 00 00 31 8c 00 00 31 8c 00 00 31 8c 00 00     1...1...1...1...
      9c:	31 8c 00 00 31 8c 00 00 31 8c 00 00 31 8c 00 00     1...1...1...1...
      ac:	31 8c 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000018c 	.word	0x2000018c
      d4:	00000000 	.word	0x00000000
      d8:	0000b114 	.word	0x0000b114

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000190 	.word	0x20000190
     108:	0000b114 	.word	0x0000b114
     10c:	0000b114 	.word	0x0000b114
     110:	00000000 	.word	0x00000000

00000114 <_tcc_get_inst_index>:
	uint32_t ch;
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
     114:	4b09      	ldr	r3, [pc, #36]	; (13c <_tcc_get_inst_index+0x28>)
     116:	4298      	cmp	r0, r3
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
     118:	d00c      	beq.n	134 <_tcc_get_inst_index+0x20>
     11a:	4b09      	ldr	r3, [pc, #36]	; (140 <_tcc_get_inst_index+0x2c>)
     11c:	4298      	cmp	r0, r3
     11e:	d007      	beq.n	130 <_tcc_get_inst_index+0x1c>
		}
	}
	if (events->generate_event_on_counter_overflow) {
     120:	4a08      	ldr	r2, [pc, #32]	; (144 <_tcc_get_inst_index+0x30>)
     122:	2300      	movs	r3, #0
     124:	4290      	cmp	r0, r2
		evctrl |= TCC_EVCTRL_OVFEO;
     126:	d001      	beq.n	12c <_tcc_get_inst_index+0x18>
     128:	0018      	movs	r0, r3
     12a:	4770      	bx	lr
	}
	if (events->generate_event_on_counter_retrigger) {
     12c:	3302      	adds	r3, #2
     12e:	e002      	b.n	136 <_tcc_get_inst_index+0x22>
     130:	2301      	movs	r3, #1
		evctrl |= TCC_EVCTRL_TRGEO;
     132:	e000      	b.n	136 <_tcc_get_inst_index+0x22>
     134:	2300      	movs	r3, #0
     136:	b2db      	uxtb	r3, r3
	}
	if (events->generate_event_on_counter_event) {
     138:	e7f6      	b.n	128 <_tcc_get_inst_index+0x14>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	42002000 	.word	0x42002000
		evctrl |= TCC_EVCTRL_CNTEO;
     140:	42002400 	.word	0x42002400
	}

	tcc_module->EVCTRL.reg = evctrl;
     144:	42002800 	.word	0x42002800

00000148 <tcc_get_config_defaults>:

	return STATUS_OK;
     148:	b510      	push	{r4, lr}
			return STATUS_ERR_INVALID_ARG;
     14a:	0004      	movs	r4, r0
     14c:	0008      	movs	r0, r1
			return STATUS_ERR_INVALID_ARG;
     14e:	4b4f      	ldr	r3, [pc, #316]	; (28c <tcc_get_config_defaults+0x144>)
     150:	4798      	blx	r3
     152:	2300      	movs	r3, #0
     154:	6023      	str	r3, [r4, #0]
     156:	0080      	lsls	r0, r0, #2
     158:	4a4d      	ldr	r2, [pc, #308]	; (290 <tcc_get_config_defaults+0x148>)
     15a:	5882      	ldr	r2, [r0, r2]
     15c:	6062      	str	r2, [r4, #4]
     15e:	72a3      	strb	r3, [r4, #10]
     160:	72e3      	strb	r3, [r4, #11]
     162:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     166:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     168:	61e3      	str	r3, [r4, #28]
     16a:	6223      	str	r3, [r4, #32]
     16c:	6263      	str	r3, [r4, #36]	; 0x24
     16e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     170:	7523      	strb	r3, [r4, #20]
     172:	7563      	strb	r3, [r4, #21]
     174:	75a3      	strb	r3, [r4, #22]
     176:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     17a:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     17c:	7423      	strb	r3, [r4, #16]
     17e:	7463      	strb	r3, [r4, #17]
     180:	74a3      	strb	r3, [r4, #18]
     182:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     184:	222c      	movs	r2, #44	; 0x2c
     186:	54a3      	strb	r3, [r4, r2]
     188:	3201      	adds	r2, #1
     18a:	54a3      	strb	r3, [r4, r2]
     18c:	3201      	adds	r2, #1
     18e:	54a3      	strb	r3, [r4, r2]
     190:	3201      	adds	r2, #1
     192:	54a3      	strb	r3, [r4, r2]
     194:	3201      	adds	r2, #1
     196:	54a3      	strb	r3, [r4, r2]
     198:	3201      	adds	r2, #1
     19a:	54a3      	strb	r3, [r4, r2]
     19c:	3201      	adds	r2, #1
     19e:	54a3      	strb	r3, [r4, r2]
     1a0:	3201      	adds	r2, #1
     1a2:	54a3      	strb	r3, [r4, r2]
     1a4:	3201      	adds	r2, #1
     1a6:	54a3      	strb	r3, [r4, r2]
     1a8:	3201      	adds	r2, #1
     1aa:	54a3      	strb	r3, [r4, r2]
     1ac:	3201      	adds	r2, #1
     1ae:	54a3      	strb	r3, [r4, r2]
     1b0:	3201      	adds	r2, #1
     1b2:	54a3      	strb	r3, [r4, r2]
     1b4:	3201      	adds	r2, #1
     1b6:	54a3      	strb	r3, [r4, r2]
     1b8:	3201      	adds	r2, #1
     1ba:	54a3      	strb	r3, [r4, r2]
     1bc:	3201      	adds	r2, #1
     1be:	54a3      	strb	r3, [r4, r2]
     1c0:	3201      	adds	r2, #1
     1c2:	54a3      	strb	r3, [r4, r2]
     1c4:	3201      	adds	r2, #1
     1c6:	54a3      	strb	r3, [r4, r2]
     1c8:	3201      	adds	r2, #1
     1ca:	54a3      	strb	r3, [r4, r2]
     1cc:	3201      	adds	r2, #1
     1ce:	54a3      	strb	r3, [r4, r2]
     1d0:	3201      	adds	r2, #1
     1d2:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     1d4:	3201      	adds	r2, #1
     1d6:	54a3      	strb	r3, [r4, r2]
     1d8:	3201      	adds	r2, #1
     1da:	54a3      	strb	r3, [r4, r2]
     1dc:	3201      	adds	r2, #1
     1de:	54a3      	strb	r3, [r4, r2]
     1e0:	3201      	adds	r2, #1
     1e2:	54a3      	strb	r3, [r4, r2]
     1e4:	3201      	adds	r2, #1
     1e6:	54a3      	strb	r3, [r4, r2]
     1e8:	3201      	adds	r2, #1
     1ea:	54a3      	strb	r3, [r4, r2]
     1ec:	3201      	adds	r2, #1
     1ee:	54a3      	strb	r3, [r4, r2]
     1f0:	3201      	adds	r2, #1
     1f2:	54a3      	strb	r3, [r4, r2]
     1f4:	3201      	adds	r2, #1
     1f6:	54a3      	strb	r3, [r4, r2]
     1f8:	3201      	adds	r2, #1
     1fa:	54a3      	strb	r3, [r4, r2]
     1fc:	3201      	adds	r2, #1
     1fe:	54a3      	strb	r3, [r4, r2]
     200:	3201      	adds	r2, #1
     202:	54a3      	strb	r3, [r4, r2]
     204:	3201      	adds	r2, #1
     206:	54a3      	strb	r3, [r4, r2]
     208:	3201      	adds	r2, #1
     20a:	54a3      	strb	r3, [r4, r2]
     20c:	3201      	adds	r2, #1
     20e:	54a3      	strb	r3, [r4, r2]
     210:	3201      	adds	r2, #1
     212:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     214:	3201      	adds	r2, #1
     216:	54a3      	strb	r3, [r4, r2]
     218:	3201      	adds	r2, #1
     21a:	54a3      	strb	r3, [r4, r2]
     21c:	3201      	adds	r2, #1
     21e:	54a3      	strb	r3, [r4, r2]
     220:	3201      	adds	r2, #1
     222:	54a3      	strb	r3, [r4, r2]
     224:	3201      	adds	r2, #1
     226:	54a3      	strb	r3, [r4, r2]
     228:	3201      	adds	r2, #1
     22a:	54a3      	strb	r3, [r4, r2]
     22c:	3201      	adds	r2, #1
     22e:	54a3      	strb	r3, [r4, r2]
     230:	3201      	adds	r2, #1
     232:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     234:	3241      	adds	r2, #65	; 0x41
     236:	54a3      	strb	r3, [r4, r2]
     238:	65a3      	str	r3, [r4, #88]	; 0x58
     23a:	67a3      	str	r3, [r4, #120]	; 0x78
     23c:	3201      	adds	r2, #1
     23e:	54a3      	strb	r3, [r4, r2]
     240:	65e3      	str	r3, [r4, #92]	; 0x5c
     242:	67e3      	str	r3, [r4, #124]	; 0x7c
     244:	3201      	adds	r2, #1
     246:	54a3      	strb	r3, [r4, r2]
     248:	6623      	str	r3, [r4, #96]	; 0x60
     24a:	3a1a      	subs	r2, #26
     24c:	50a3      	str	r3, [r4, r2]
     24e:	321b      	adds	r2, #27
     250:	54a3      	strb	r3, [r4, r2]
     252:	6663      	str	r3, [r4, #100]	; 0x64
     254:	3a17      	subs	r2, #23
     256:	50a3      	str	r3, [r4, r2]
     258:	3218      	adds	r2, #24
     25a:	54a3      	strb	r3, [r4, r2]
     25c:	66a3      	str	r3, [r4, #104]	; 0x68
     25e:	3a14      	subs	r2, #20
     260:	50a3      	str	r3, [r4, r2]
     262:	3215      	adds	r2, #21
     264:	54a3      	strb	r3, [r4, r2]
     266:	66e3      	str	r3, [r4, #108]	; 0x6c
     268:	3a11      	subs	r2, #17
     26a:	50a3      	str	r3, [r4, r2]
     26c:	3212      	adds	r2, #18
     26e:	54a3      	strb	r3, [r4, r2]
     270:	6723      	str	r3, [r4, #112]	; 0x70
     272:	3a0e      	subs	r2, #14
     274:	50a3      	str	r3, [r4, r2]
     276:	320f      	adds	r2, #15
     278:	54a3      	strb	r3, [r4, r2]
     27a:	6763      	str	r3, [r4, #116]	; 0x74
     27c:	3a0b      	subs	r2, #11
     27e:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     280:	2101      	movs	r1, #1
     282:	320c      	adds	r2, #12
     284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     286:	3201      	adds	r2, #1
     288:	54a3      	strb	r3, [r4, r2]
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000115 	.word	0x00000115
     290:	0000a6dc 	.word	0x0000a6dc

00000294 <tcc_init>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
     2a0:	b091      	sub	sp, #68	; 0x44
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	000c      	movs	r4, r1
     2a6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     2a8:	0008      	movs	r0, r1
     2aa:	4bc3      	ldr	r3, [pc, #780]	; (5b8 <tcc_init+0x324>)
     2ac:	4798      	blx	r3
     2ae:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2b0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b2:	48c2      	ldr	r0, [pc, #776]	; (5bc <tcc_init+0x328>)
     2b4:	6a02      	ldr	r2, [r0, #32]
     2b6:	009e      	lsls	r6, r3, #2
     2b8:	4fc1      	ldr	r7, [pc, #772]	; (5c0 <tcc_init+0x32c>)
     2ba:	59f7      	ldr	r7, [r6, r7]
     2bc:	433a      	orrs	r2, r7
     2be:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     2c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d506      	bpl.n	2d6 <tcc_init+0x42>
}
     2c8:	b011      	add	sp, #68	; 0x44
     2ca:	bc3c      	pop	{r2, r3, r4, r5}
     2cc:	4690      	mov	r8, r2
     2ce:	4699      	mov	r9, r3
     2d0:	46a2      	mov	sl, r4
     2d2:	46ab      	mov	fp, r5
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     2d6:	6822      	ldr	r2, [r4, #0]
     2d8:	2701      	movs	r7, #1
     2da:	4017      	ands	r7, r2
     2dc:	d1f4      	bne.n	2c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     2de:	48b9      	ldr	r0, [pc, #740]	; (5c4 <tcc_init+0x330>)
     2e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     2e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     2e4:	682e      	ldr	r6, [r5, #0]
     2e6:	42b2      	cmp	r2, r6
     2e8:	d3ee      	bcc.n	2c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     2ea:	686e      	ldr	r6, [r5, #4]
     2ec:	42b2      	cmp	r2, r6
     2ee:	d3eb      	bcc.n	2c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     2f0:	69e8      	ldr	r0, [r5, #28]
     2f2:	4282      	cmp	r2, r0
     2f4:	d200      	bcs.n	2f8 <tcc_init+0x64>
     2f6:	e1b9      	b.n	66c <tcc_init+0x3d8>
     2f8:	6a28      	ldr	r0, [r5, #32]
     2fa:	4282      	cmp	r2, r0
     2fc:	d200      	bcs.n	300 <tcc_init+0x6c>
     2fe:	e1b7      	b.n	670 <tcc_init+0x3dc>
     300:	6a68      	ldr	r0, [r5, #36]	; 0x24
     302:	4282      	cmp	r2, r0
     304:	d200      	bcs.n	308 <tcc_init+0x74>
     306:	e1b5      	b.n	674 <tcc_init+0x3e0>
     308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     30a:	4282      	cmp	r2, r0
     30c:	d200      	bcs.n	310 <tcc_init+0x7c>
     30e:	e1b3      	b.n	678 <tcc_init+0x3e4>
     310:	2298      	movs	r2, #152	; 0x98
     312:	4694      	mov	ip, r2
     314:	44ac      	add	ip, r5
     316:	4662      	mov	r2, ip
     318:	9208      	str	r2, [sp, #32]
     31a:	2000      	movs	r0, #0
     31c:	e003      	b.n	326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     31e:	3001      	adds	r0, #1
     320:	3201      	adds	r2, #1
     322:	2808      	cmp	r0, #8
     324:	d008      	beq.n	338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     326:	7816      	ldrb	r6, [r2, #0]
     328:	2e00      	cmp	r6, #0
     32a:	d0f8      	beq.n	31e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     32c:	4ea6      	ldr	r6, [pc, #664]	; (5c8 <tcc_init+0x334>)
     32e:	5c76      	ldrb	r6, [r6, r1]
     330:	4286      	cmp	r6, r0
     332:	dcf4      	bgt.n	31e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     334:	2017      	movs	r0, #23
     336:	e7c7      	b.n	2c8 <tcc_init+0x34>
     338:	2200      	movs	r2, #0
     33a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	4684      	mov	ip, r0
     342:	e002      	b.n	34a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     344:	3201      	adds	r2, #1
     346:	2a04      	cmp	r2, #4
     348:	d00e      	beq.n	368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     34a:	18a8      	adds	r0, r5, r2
     34c:	7c00      	ldrb	r0, [r0, #16]
     34e:	2801      	cmp	r0, #1
     350:	d1f8      	bne.n	344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     352:	489e      	ldr	r0, [pc, #632]	; (5cc <tcc_init+0x338>)
     354:	5c40      	ldrb	r0, [r0, r1]
     356:	4290      	cmp	r0, r2
     358:	da00      	bge.n	35c <tcc_init+0xc8>
     35a:	e18f      	b.n	67c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     35c:	4660      	mov	r0, ip
     35e:	4090      	lsls	r0, r2
     360:	9e02      	ldr	r6, [sp, #8]
     362:	4306      	orrs	r6, r0
     364:	9602      	str	r6, [sp, #8]
     366:	e7ed      	b.n	344 <tcc_init+0xb0>
	if (config->run_in_standby) {
     368:	329d      	adds	r2, #157	; 0x9d
     36a:	5caa      	ldrb	r2, [r5, r2]
     36c:	2a00      	cmp	r2, #0
     36e:	d004      	beq.n	37a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     370:	2280      	movs	r2, #128	; 0x80
     372:	0112      	lsls	r2, r2, #4
     374:	9902      	ldr	r1, [sp, #8]
     376:	4311      	orrs	r1, r2
     378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     37a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     37c:	1e51      	subs	r1, r2, #1
     37e:	418a      	sbcs	r2, r1
     380:	0092      	lsls	r2, r2, #2
     382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     384:	7a6a      	ldrb	r2, [r5, #9]
     386:	2a01      	cmp	r2, #1
     388:	d022      	beq.n	3d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     38a:	4a90      	ldr	r2, [pc, #576]	; (5cc <tcc_init+0x338>)
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	0011      	movs	r1, r2
     390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     392:	2235      	movs	r2, #53	; 0x35
     394:	5caa      	ldrb	r2, [r5, r2]
     396:	428a      	cmp	r2, r1
     398:	d300      	bcc.n	39c <tcc_init+0x108>
     39a:	e179      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     39c:	212c      	movs	r1, #44	; 0x2c
     39e:	5c69      	ldrb	r1, [r5, r1]
     3a0:	290f      	cmp	r1, #15
     3a2:	d900      	bls.n	3a6 <tcc_init+0x112>
     3a4:	e174      	b.n	690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     3a6:	7b28      	ldrb	r0, [r5, #12]
     3a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     3aa:	7ae8      	ldrb	r0, [r5, #11]
     3ac:	900b      	str	r0, [sp, #44]	; 0x2c
     3ae:	202d      	movs	r0, #45	; 0x2d
     3b0:	4682      	mov	sl, r0
     3b2:	44aa      	add	sl, r5
     3b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     3b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     3b8:	ae0e      	add	r6, sp, #56	; 0x38
     3ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3bc:	26c0      	movs	r6, #192	; 0xc0
     3be:	0136      	lsls	r6, r6, #4
     3c0:	46b1      	mov	r9, r6
     3c2:	4684      	mov	ip, r0
     3c4:	46a0      	mov	r8, r4
     3c6:	0028      	movs	r0, r5
     3c8:	4655      	mov	r5, sl
     3ca:	9309      	str	r3, [sp, #36]	; 0x24
     3cc:	4682      	mov	sl, r0
     3ce:	e035      	b.n	43c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     3d0:	9906      	ldr	r1, [sp, #24]
     3d2:	4311      	orrs	r1, r2
     3d4:	9106      	str	r1, [sp, #24]
     3d6:	e7d8      	b.n	38a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3d8:	0292      	lsls	r2, r2, #10
     3da:	464f      	mov	r7, r9
     3dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     3e0:	7919      	ldrb	r1, [r3, #4]
     3e2:	468b      	mov	fp, r1
     3e4:	2103      	movs	r1, #3
     3e6:	465f      	mov	r7, fp
     3e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3ea:	430a      	orrs	r2, r1
     3ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     3ee:	795a      	ldrb	r2, [r3, #5]
     3f0:	0152      	lsls	r2, r2, #5
     3f2:	2160      	movs	r1, #96	; 0x60
     3f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     3f8:	7999      	ldrb	r1, [r3, #6]
     3fa:	0209      	lsls	r1, r1, #8
     3fc:	26c0      	movs	r6, #192	; 0xc0
     3fe:	00b6      	lsls	r6, r6, #2
     400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     404:	79da      	ldrb	r2, [r3, #7]
     406:	0312      	lsls	r2, r2, #12
     408:	21e0      	movs	r1, #224	; 0xe0
     40a:	01c9      	lsls	r1, r1, #7
     40c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     40e:	4316      	orrs	r6, r2
     410:	4334      	orrs	r4, r6
     412:	9a03      	ldr	r2, [sp, #12]
     414:	4314      	orrs	r4, r2
     416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     418:	4662      	mov	r2, ip
     41a:	9907      	ldr	r1, [sp, #28]
     41c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     41e:	2a04      	cmp	r2, #4
     420:	d02a      	beq.n	478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     422:	7c9a      	ldrb	r2, [r3, #18]
     424:	9905      	ldr	r1, [sp, #20]
     426:	4291      	cmp	r1, r2
     428:	d800      	bhi.n	42c <tcc_init+0x198>
     42a:	e131      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     42c:	7a59      	ldrb	r1, [r3, #9]
     42e:	350a      	adds	r5, #10
     430:	2304      	movs	r3, #4
     432:	469b      	mov	fp, r3
     434:	44dc      	add	ip, fp
     436:	290f      	cmp	r1, #15
     438:	d900      	bls.n	43c <tcc_init+0x1a8>
     43a:	e129      	b.n	690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     43c:	0609      	lsls	r1, r1, #24
     43e:	23f0      	movs	r3, #240	; 0xf0
     440:	051b      	lsls	r3, r3, #20
     442:	4019      	ands	r1, r3
     444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     446:	782e      	ldrb	r6, [r5, #0]
     448:	0436      	lsls	r6, r6, #16
     44a:	20ff      	movs	r0, #255	; 0xff
     44c:	0400      	lsls	r0, r0, #16
     44e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     450:	7868      	ldrb	r0, [r5, #1]
     452:	2480      	movs	r4, #128	; 0x80
     454:	2800      	cmp	r0, #0
     456:	d100      	bne.n	45a <tcc_init+0x1c6>
     458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     45a:	7898      	ldrb	r0, [r3, #2]
     45c:	2708      	movs	r7, #8
     45e:	9703      	str	r7, [sp, #12]
     460:	2800      	cmp	r0, #0
     462:	d101      	bne.n	468 <tcc_init+0x1d4>
     464:	9804      	ldr	r0, [sp, #16]
     466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     468:	78d8      	ldrb	r0, [r3, #3]
     46a:	4683      	mov	fp, r0
     46c:	2010      	movs	r0, #16
     46e:	465f      	mov	r7, fp
     470:	2f00      	cmp	r7, #0
     472:	d1b1      	bne.n	3d8 <tcc_init+0x144>
     474:	9804      	ldr	r0, [sp, #16]
     476:	e7af      	b.n	3d8 <tcc_init+0x144>
     478:	4644      	mov	r4, r8
     47a:	4655      	mov	r5, sl
     47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     47e:	4a52      	ldr	r2, [pc, #328]	; (5c8 <tcc_init+0x334>)
     480:	5cd2      	ldrb	r2, [r2, r3]
     482:	4691      	mov	r9, r2
     484:	4651      	mov	r1, sl
     486:	3150      	adds	r1, #80	; 0x50
     488:	4650      	mov	r0, sl
     48a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     48c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     48e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     490:	2601      	movs	r6, #1
     492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     494:	2602      	movs	r6, #2
     496:	36ff      	adds	r6, #255	; 0xff
     498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     49a:	2680      	movs	r6, #128	; 0x80
     49c:	0276      	lsls	r6, r6, #9
     49e:	46b0      	mov	r8, r6
     4a0:	46a4      	mov	ip, r4
     4a2:	001c      	movs	r4, r3
     4a4:	464b      	mov	r3, r9
     4a6:	e00f      	b.n	4c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4a8:	7806      	ldrb	r6, [r0, #0]
     4aa:	2e00      	cmp	r6, #0
     4ac:	d007      	beq.n	4be <tcc_init+0x22a>
			if (i >= ow_num) {
     4ae:	4293      	cmp	r3, r2
     4b0:	d800      	bhi.n	4b4 <tcc_init+0x220>
     4b2:	e0e7      	b.n	684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     4b4:	2e02      	cmp	r6, #2
     4b6:	d014      	beq.n	4e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     4b8:	4656      	mov	r6, sl
     4ba:	4096      	lsls	r6, r2
     4bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4be:	3201      	adds	r2, #1
     4c0:	3101      	adds	r1, #1
     4c2:	3002      	adds	r0, #2
     4c4:	2a08      	cmp	r2, #8
     4c6:	d010      	beq.n	4ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     4c8:	780e      	ldrb	r6, [r1, #0]
     4ca:	2e00      	cmp	r6, #0
     4cc:	d0ec      	beq.n	4a8 <tcc_init+0x214>
			if (i >= ow_num) {
     4ce:	4293      	cmp	r3, r2
     4d0:	d800      	bhi.n	4d4 <tcc_init+0x240>
     4d2:	e0d5      	b.n	680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     4d4:	4646      	mov	r6, r8
     4d6:	4096      	lsls	r6, r2
     4d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4da:	7806      	ldrb	r6, [r0, #0]
     4dc:	2e00      	cmp	r6, #0
     4de:	d1e9      	bne.n	4b4 <tcc_init+0x220>
     4e0:	e7ed      	b.n	4be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     4e2:	465e      	mov	r6, fp
     4e4:	4096      	lsls	r6, r2
     4e6:	4337      	orrs	r7, r6
     4e8:	e7e9      	b.n	4be <tcc_init+0x22a>
     4ea:	4699      	mov	r9, r3
     4ec:	0023      	movs	r3, r4
     4ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4f0:	7e6a      	ldrb	r2, [r5, #25]
     4f2:	0112      	lsls	r2, r2, #4
     4f4:	2130      	movs	r1, #48	; 0x30
     4f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     4f8:	7e28      	ldrb	r0, [r5, #24]
     4fa:	2207      	movs	r2, #7
     4fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     502:	2080      	movs	r0, #128	; 0x80
     504:	0240      	lsls	r0, r0, #9
     506:	000e      	movs	r6, r1
     508:	e002      	b.n	510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     50a:	3201      	adds	r2, #1
     50c:	2a04      	cmp	r2, #4
     50e:	d00b      	beq.n	528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     510:	18a9      	adds	r1, r5, r2
     512:	7d09      	ldrb	r1, [r1, #20]
     514:	2900      	cmp	r1, #0
     516:	d0f8      	beq.n	50a <tcc_init+0x276>
			if (n >= cc_num) {
     518:	9905      	ldr	r1, [sp, #20]
     51a:	4291      	cmp	r1, r2
     51c:	dc00      	bgt.n	520 <tcc_init+0x28c>
     51e:	e0b3      	b.n	688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     520:	0001      	movs	r1, r0
     522:	4091      	lsls	r1, r2
     524:	430e      	orrs	r6, r1
     526:	e7f0      	b.n	50a <tcc_init+0x276>
     528:	46b2      	mov	sl, r6
     52a:	9801      	ldr	r0, [sp, #4]
     52c:	0002      	movs	r2, r0
     52e:	3204      	adds	r2, #4
     530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     532:	2100      	movs	r1, #0
     534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     536:	4282      	cmp	r2, r0
     538:	d1fc      	bne.n	534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     53a:	2200      	movs	r2, #0
     53c:	9801      	ldr	r0, [sp, #4]
     53e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     542:	0099      	lsls	r1, r3, #2
     544:	4a22      	ldr	r2, [pc, #136]	; (5d0 <tcc_init+0x33c>)
     546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     54a:	22a0      	movs	r2, #160	; 0xa0
     54c:	5ca9      	ldrb	r1, [r5, r2]
     54e:	3a64      	subs	r2, #100	; 0x64
     550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     552:	a90d      	add	r1, sp, #52	; 0x34
     554:	7aaa      	ldrb	r2, [r5, #10]
     556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     558:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <tcc_init+0x340>)
     55a:	5cd6      	ldrb	r6, [r2, r3]
     55c:	0030      	movs	r0, r6
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <tcc_init+0x344>)
     560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     562:	0030      	movs	r0, r6
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <tcc_init+0x348>)
     566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     568:	464b      	mov	r3, r9
     56a:	2b00      	cmp	r3, #0
     56c:	dd3c      	ble.n	5e8 <tcc_init+0x354>
     56e:	002e      	movs	r6, r5
     570:	3658      	adds	r6, #88	; 0x58
     572:	3398      	adds	r3, #152	; 0x98
     574:	4698      	mov	r8, r3
     576:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     578:	2301      	movs	r3, #1
     57a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     57c:	46ab      	mov	fp, r5
     57e:	4645      	mov	r5, r8
     580:	46a0      	mov	r8, r4
     582:	9c08      	ldr	r4, [sp, #32]
     584:	e003      	b.n	58e <tcc_init+0x2fa>
     586:	3401      	adds	r4, #1
     588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     58a:	42ac      	cmp	r4, r5
     58c:	d02a      	beq.n	5e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0f8      	beq.n	586 <tcc_init+0x2f2>
     594:	ab0c      	add	r3, sp, #48	; 0x30
     596:	464a      	mov	r2, r9
     598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     59a:	2300      	movs	r3, #0
     59c:	aa0c      	add	r2, sp, #48	; 0x30
     59e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     5a0:	0013      	movs	r3, r2
     5a2:	2220      	movs	r2, #32
     5a4:	18b2      	adds	r2, r6, r2
     5a6:	7812      	ldrb	r2, [r2, #0]
     5a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5aa:	464a      	mov	r2, r9
     5ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	0019      	movs	r1, r3
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <tcc_init+0x34c>)
     5b4:	4798      	blx	r3
     5b6:	e7e6      	b.n	586 <tcc_init+0x2f2>
     5b8:	00000115 	.word	0x00000115
     5bc:	40000400 	.word	0x40000400
     5c0:	0000a6c8 	.word	0x0000a6c8
     5c4:	0000a6dc 	.word	0x0000a6dc
     5c8:	0000a6e8 	.word	0x0000a6e8
     5cc:	0000a6d4 	.word	0x0000a6d4
     5d0:	200003f8 	.word	0x200003f8
     5d4:	0000a6d8 	.word	0x0000a6d8
     5d8:	00008ad9 	.word	0x00008ad9
     5dc:	00008a4d 	.word	0x00008a4d
     5e0:	00008bd1 	.word	0x00008bd1
     5e4:	4644      	mov	r4, r8
     5e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     5ee:	0212      	lsls	r2, r2, #8
     5f0:	4313      	orrs	r3, r2
     5f2:	9a02      	ldr	r2, [sp, #8]
     5f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     5f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5f8:	2204      	movs	r2, #4
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	421a      	tst	r2, r3
     5fe:	d1fc      	bne.n	5fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     600:	23ff      	movs	r3, #255	; 0xff
     602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     604:	2204      	movs	r2, #4
     606:	68a3      	ldr	r3, [r4, #8]
     608:	421a      	tst	r2, r3
     60a:	d1fc      	bne.n	606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     60c:	466b      	mov	r3, sp
     60e:	7e1b      	ldrb	r3, [r3, #24]
     610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     61a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     61c:	4a1d      	ldr	r2, [pc, #116]	; (694 <tcc_init+0x400>)
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	4213      	tst	r3, r2
     622:	d1fc      	bne.n	61e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     624:	4653      	mov	r3, sl
     626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     628:	2210      	movs	r2, #16
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	421a      	tst	r2, r3
     62e:	d1fc      	bne.n	62a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     630:	682b      	ldr	r3, [r5, #0]
     632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     634:	4a18      	ldr	r2, [pc, #96]	; (698 <tcc_init+0x404>)
     636:	68a3      	ldr	r3, [r4, #8]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     63c:	686b      	ldr	r3, [r5, #4]
     63e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     640:	9805      	ldr	r0, [sp, #20]
     642:	2800      	cmp	r0, #0
     644:	dd22      	ble.n	68c <tcc_init+0x3f8>
     646:	351c      	adds	r5, #28
     648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     64a:	4e14      	ldr	r6, [pc, #80]	; (69c <tcc_init+0x408>)
     64c:	0032      	movs	r2, r6
     64e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     650:	68a3      	ldr	r3, [r4, #8]
     652:	421a      	tst	r2, r3
     654:	d1fc      	bne.n	650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     656:	cd04      	ldmia	r5!, {r2}
     658:	000b      	movs	r3, r1
     65a:	3310      	adds	r3, #16
     65c:	009b      	lsls	r3, r3, #2
     65e:	18e3      	adds	r3, r4, r3
     660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     662:	3101      	adds	r1, #1
     664:	4288      	cmp	r0, r1
     666:	dcf1      	bgt.n	64c <tcc_init+0x3b8>
	return STATUS_OK;
     668:	2000      	movs	r0, #0
     66a:	e62d      	b.n	2c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     66c:	2017      	movs	r0, #23
     66e:	e62b      	b.n	2c8 <tcc_init+0x34>
     670:	2017      	movs	r0, #23
     672:	e629      	b.n	2c8 <tcc_init+0x34>
     674:	2017      	movs	r0, #23
     676:	e627      	b.n	2c8 <tcc_init+0x34>
     678:	2017      	movs	r0, #23
     67a:	e625      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e623      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     680:	2017      	movs	r0, #23
     682:	e621      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     684:	2017      	movs	r0, #23
     686:	e61f      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     688:	2017      	movs	r0, #23
     68a:	e61d      	b.n	2c8 <tcc_init+0x34>
	return STATUS_OK;
     68c:	2000      	movs	r0, #0
     68e:	e61b      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e619      	b.n	2c8 <tcc_init+0x34>
     694:	00020040 	.word	0x00020040
     698:	00040080 	.word	0x00040080
     69c:	00080100 	.word	0x00080100

000006a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6a0:	0092      	lsls	r2, r2, #2
     6a2:	1883      	adds	r3, r0, r2
     6a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     6a6:	4b03      	ldr	r3, [pc, #12]	; (6b4 <tcc_register_callback+0x14>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
     6ac:	4313      	orrs	r3, r2
     6ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     6b0:	2000      	movs	r0, #0
     6b2:	4770      	bx	lr
     6b4:	0000a6ec 	.word	0x0000a6ec

000006b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     6be:	6800      	ldr	r0, [r0, #0]
     6c0:	4b09      	ldr	r3, [pc, #36]	; (6e8 <tcc_enable_callback+0x30>)
     6c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c6:	5c1b      	ldrb	r3, [r3, r0]
     6c8:	221f      	movs	r2, #31
     6ca:	401a      	ands	r2, r3
     6cc:	2301      	movs	r3, #1
     6ce:	4093      	lsls	r3, r2
     6d0:	4a07      	ldr	r2, [pc, #28]	; (6f0 <tcc_enable_callback+0x38>)
     6d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <tcc_enable_callback+0x3c>)
     6d8:	58ea      	ldr	r2, [r5, r3]
     6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6dc:	4313      	orrs	r3, r2
     6de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000115 	.word	0x00000115
     6ec:	0000a71c 	.word	0x0000a71c
     6f0:	e000e100 	.word	0xe000e100
     6f4:	0000a6ec 	.word	0x0000a6ec

000006f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6fe:	0080      	lsls	r0, r0, #2
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <_tcc_interrupt_handler+0x44>)
     702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     704:	683b      	ldr	r3, [r7, #0]
     706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     70c:	4013      	ands	r3, r2
     70e:	401e      	ands	r6, r3
     710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     712:	4b0b      	ldr	r3, [pc, #44]	; (740 <_tcc_interrupt_handler+0x48>)
     714:	4698      	mov	r8, r3
     716:	e002      	b.n	71e <_tcc_interrupt_handler+0x26>
     718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     71a:	2c30      	cmp	r4, #48	; 0x30
     71c:	d00a      	beq.n	734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     71e:	4643      	mov	r3, r8
     720:	58e5      	ldr	r5, [r4, r3]
     722:	4235      	tst	r5, r6
     724:	d0f8      	beq.n	718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     726:	193b      	adds	r3, r7, r4
     728:	685b      	ldr	r3, [r3, #4]
     72a:	0038      	movs	r0, r7
     72c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     72e:	683b      	ldr	r3, [r7, #0]
     730:	62dd      	str	r5, [r3, #44]	; 0x2c
     732:	e7f1      	b.n	718 <_tcc_interrupt_handler+0x20>
		}
	}
}
     734:	bc04      	pop	{r2}
     736:	4690      	mov	r8, r2
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	200003f8 	.word	0x200003f8
     740:	0000a6ec 	.word	0x0000a6ec

00000744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006f9 	.word	0x000006f9

00000754 <TCC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TCC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006f9 	.word	0x000006f9

00000764 <TCC2_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2002      	movs	r0, #2
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TCC2_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006f9 	.word	0x000006f9

00000774 <audio_in_init>:
	fn[19] = '\0';
	//printf("Generated fn: %s\n\r", fn);
}

void audio_in_init(void)
{
     774:	b5f0      	push	{r4, r5, r6, r7, lr}
     776:	b091      	sub	sp, #68	; 0x44
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     778:	a90f      	add	r1, sp, #60	; 0x3c
     77a:	2501      	movs	r5, #1
     77c:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     77e:	2600      	movs	r6, #0
     780:	708e      	strb	r6, [r1, #2]
	/* Initializing the CONV pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     782:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
     784:	2014      	movs	r0, #20
     786:	4f28      	ldr	r7, [pc, #160]	; (828 <audio_in_init+0xb4>)
     788:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0352      	lsls	r2, r2, #13
     78e:	4b27      	ldr	r3, [pc, #156]	; (82c <audio_in_init+0xb8>)
     790:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     792:	4c27      	ldr	r4, [pc, #156]	; (830 <audio_in_init+0xbc>)
     794:	232f      	movs	r3, #47	; 0x2f
     796:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     798:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
     79a:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     79c:	466b      	mov	r3, sp
     79e:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
     7a0:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     7a2:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     7a4:	4669      	mov	r1, sp
     7a6:	202f      	movs	r0, #47	; 0x2f
     7a8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
     7aa:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7ac:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7b0:	2900      	cmp	r1, #0
     7b2:	d104      	bne.n	7be <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
     7b4:	0953      	lsrs	r3, r2, #5
     7b6:	01db      	lsls	r3, r3, #7
     7b8:	491c      	ldr	r1, [pc, #112]	; (82c <audio_in_init+0xb8>)
     7ba:	468c      	mov	ip, r1
     7bc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7be:	211f      	movs	r1, #31
     7c0:	4011      	ands	r1, r2
     7c2:	2201      	movs	r2, #1
     7c4:	0010      	movs	r0, r2
     7c6:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     7c8:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     7ca:	ac01      	add	r4, sp, #4
     7cc:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     7ce:	2300      	movs	r3, #0
     7d0:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     7d2:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     7d4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     7d6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     7d8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     7da:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     7dc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     7de:	3223      	adds	r2, #35	; 0x23
     7e0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     7e2:	3a18      	subs	r2, #24
     7e4:	2100      	movs	r1, #0
     7e6:	a807      	add	r0, sp, #28
     7e8:	4b12      	ldr	r3, [pc, #72]	; (834 <audio_in_init+0xc0>)
     7ea:	4798      	blx	r3
	config_spi_slave.ss_pin = ADC_SPI_SS_PIN;
	spi_attach_slave(&adc_spi_slave, &config_spi_slave);
	
	/* Initializing the SPI master */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	039b      	lsls	r3, r3, #14
     7f0:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     7f2:	4b11      	ldr	r3, [pc, #68]	; (838 <audio_in_init+0xc4>)
     7f4:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     7f6:	4b11      	ldr	r3, [pc, #68]	; (83c <audio_in_init+0xc8>)
     7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     7fa:	4b11      	ldr	r3, [pc, #68]	; (840 <audio_in_init+0xcc>)
     7fc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     7fe:	2301      	movs	r3, #1
     800:	425b      	negs	r3, r3
     802:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <audio_in_init+0xd0>)
     806:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     808:	4d0f      	ldr	r5, [pc, #60]	; (848 <audio_in_init+0xd4>)
     80a:	0022      	movs	r2, r4
     80c:	490f      	ldr	r1, [pc, #60]	; (84c <audio_in_init+0xd8>)
     80e:	0028      	movs	r0, r5
     810:	4b0f      	ldr	r3, [pc, #60]	; (850 <audio_in_init+0xdc>)
     812:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     814:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     816:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     818:	2b00      	cmp	r3, #0
     81a:	d1fc      	bne.n	816 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     81c:	6813      	ldr	r3, [r2, #0]
     81e:	2102      	movs	r1, #2
     820:	430b      	orrs	r3, r1
     822:	6013      	str	r3, [r2, #0]
	spi_enable(&adc_spi_module);
}
     824:	b011      	add	sp, #68	; 0x44
     826:	bdf0      	pop	{r4, r5, r6, r7, pc}
     828:	0000887d 	.word	0x0000887d
     82c:	41004400 	.word	0x41004400
     830:	2000071c 	.word	0x2000071c
     834:	00009343 	.word	0x00009343
     838:	00100002 	.word	0x00100002
     83c:	00110002 	.word	0x00110002
     840:	00120002 	.word	0x00120002
     844:	001e8480 	.word	0x001e8480
     848:	200006b8 	.word	0x200006b8
     84c:	42000c00 	.word	0x42000c00
     850:	00007555 	.word	0x00007555

00000854 <audio_record_init>:

void audio_record_init(void) {
     854:	b5f0      	push	{r4, r5, r6, r7, lr}
     856:	46ce      	mov	lr, r9
     858:	b500      	push	{lr}
     85a:	b086      	sub	sp, #24
	rtc_calendar_get_time(&rtc_instance, &current_time);
     85c:	ae02      	add	r6, sp, #8
     85e:	0031      	movs	r1, r6
     860:	4858      	ldr	r0, [pc, #352]	; (9c4 <audio_record_init+0x170>)
     862:	4b59      	ldr	r3, [pc, #356]	; (9c8 <audio_record_init+0x174>)
     864:	4798      	blx	r3
	char temp_str[4] = "";
     866:	ad01      	add	r5, sp, #4
     868:	2300      	movs	r3, #0
     86a:	4699      	mov	r9, r3
     86c:	9301      	str	r3, [sp, #4]
	sprintf(temp_str, "%d", SD_SLOT_NUMBER);
     86e:	2200      	movs	r2, #0
     870:	4956      	ldr	r1, [pc, #344]	; (9cc <audio_record_init+0x178>)
     872:	0028      	movs	r0, r5
     874:	4f56      	ldr	r7, [pc, #344]	; (9d0 <audio_record_init+0x17c>)
     876:	47b8      	blx	r7
	fn[0] = temp_str[0];
     878:	ac05      	add	r4, sp, #20
     87a:	782b      	ldrb	r3, [r5, #0]
     87c:	7023      	strb	r3, [r4, #0]
	fn[1] = ':';
     87e:	233a      	movs	r3, #58	; 0x3a
     880:	7063      	strb	r3, [r4, #1]
	sprintf(temp_str, "%02d", (current_time.year - 2000));
     882:	88f2      	ldrh	r2, [r6, #6]
     884:	4b53      	ldr	r3, [pc, #332]	; (9d4 <audio_record_init+0x180>)
     886:	469c      	mov	ip, r3
     888:	4462      	add	r2, ip
     88a:	4953      	ldr	r1, [pc, #332]	; (9d8 <audio_record_init+0x184>)
     88c:	0028      	movs	r0, r5
     88e:	47b8      	blx	r7
	fn[2] = temp_str[0];
     890:	782b      	ldrb	r3, [r5, #0]
     892:	70a3      	strb	r3, [r4, #2]
	fn[3] = temp_str[1];
     894:	786b      	ldrb	r3, [r5, #1]
     896:	70e3      	strb	r3, [r4, #3]
	sprintf(temp_str, "%02d", current_time.month);
     898:	7972      	ldrb	r2, [r6, #5]
     89a:	494f      	ldr	r1, [pc, #316]	; (9d8 <audio_record_init+0x184>)
     89c:	0028      	movs	r0, r5
     89e:	47b8      	blx	r7
	fn[4] = temp_str[0];
     8a0:	782b      	ldrb	r3, [r5, #0]
     8a2:	7123      	strb	r3, [r4, #4]
	fn[5] = temp_str[1];
     8a4:	786b      	ldrb	r3, [r5, #1]
     8a6:	7163      	strb	r3, [r4, #5]
	sprintf(temp_str, "%02d", current_time.day);
     8a8:	7932      	ldrb	r2, [r6, #4]
     8aa:	494b      	ldr	r1, [pc, #300]	; (9d8 <audio_record_init+0x184>)
     8ac:	0028      	movs	r0, r5
     8ae:	47b8      	blx	r7
	fn[6] = temp_str[0];
     8b0:	782b      	ldrb	r3, [r5, #0]
     8b2:	71a3      	strb	r3, [r4, #6]
	fn[7] = temp_str[1];
     8b4:	786b      	ldrb	r3, [r5, #1]
     8b6:	71e3      	strb	r3, [r4, #7]
	fn[8] = '_';
     8b8:	235f      	movs	r3, #95	; 0x5f
     8ba:	7223      	strb	r3, [r4, #8]
	sprintf(temp_str, "%02d", current_time.hour);
     8bc:	78b2      	ldrb	r2, [r6, #2]
     8be:	4946      	ldr	r1, [pc, #280]	; (9d8 <audio_record_init+0x184>)
     8c0:	0028      	movs	r0, r5
     8c2:	47b8      	blx	r7
	fn[9] = temp_str[0];
     8c4:	782b      	ldrb	r3, [r5, #0]
     8c6:	7263      	strb	r3, [r4, #9]
	fn[10] = temp_str[1];
     8c8:	786b      	ldrb	r3, [r5, #1]
     8ca:	72a3      	strb	r3, [r4, #10]
	sprintf(temp_str, "%02d", current_time.minute);
     8cc:	7872      	ldrb	r2, [r6, #1]
     8ce:	4942      	ldr	r1, [pc, #264]	; (9d8 <audio_record_init+0x184>)
     8d0:	0028      	movs	r0, r5
     8d2:	47b8      	blx	r7
	fn[11] = temp_str[0];
     8d4:	782b      	ldrb	r3, [r5, #0]
     8d6:	72e3      	strb	r3, [r4, #11]
	fn[12] = temp_str[1];
     8d8:	786b      	ldrb	r3, [r5, #1]
     8da:	7323      	strb	r3, [r4, #12]
	sprintf(temp_str, "%02d", current_time.second);
     8dc:	7832      	ldrb	r2, [r6, #0]
     8de:	493e      	ldr	r1, [pc, #248]	; (9d8 <audio_record_init+0x184>)
     8e0:	0028      	movs	r0, r5
     8e2:	47b8      	blx	r7
	fn[13] = temp_str[0];
     8e4:	782b      	ldrb	r3, [r5, #0]
     8e6:	7363      	strb	r3, [r4, #13]
	fn[14] = temp_str[1];
     8e8:	786b      	ldrb	r3, [r5, #1]
     8ea:	73a3      	strb	r3, [r4, #14]
	fn[15] = '.';
     8ec:	232e      	movs	r3, #46	; 0x2e
     8ee:	73e3      	strb	r3, [r4, #15]
	fn[16] = 'w';
     8f0:	3349      	adds	r3, #73	; 0x49
     8f2:	7423      	strb	r3, [r4, #16]
	fn[17] = 'a';
     8f4:	3b16      	subs	r3, #22
     8f6:	7463      	strb	r3, [r4, #17]
	fn[18] = 'v';
     8f8:	3315      	adds	r3, #21
     8fa:	74a3      	strb	r3, [r4, #18]
	fn[19] = '\0';
     8fc:	464b      	mov	r3, r9
     8fe:	74e3      	strb	r3, [r4, #19]
	char *file_name;
	//char file_name[] = "0:my_file.wav";
	uint32_t bytes;
	
	generate_file_name(&file_name);
	printf("Generated file name: %s\n\r", &file_name);
     900:	0021      	movs	r1, r4
     902:	4836      	ldr	r0, [pc, #216]	; (9dc <audio_record_init+0x188>)
     904:	4b36      	ldr	r3, [pc, #216]	; (9e0 <audio_record_init+0x18c>)
     906:	4798      	blx	r3
	res = f_open(&file_object, (char const *)&file_name, FA_CREATE_ALWAYS | FA_WRITE);
     908:	220a      	movs	r2, #10
     90a:	0021      	movs	r1, r4
     90c:	4835      	ldr	r0, [pc, #212]	; (9e4 <audio_record_init+0x190>)
     90e:	4b36      	ldr	r3, [pc, #216]	; (9e8 <audio_record_init+0x194>)
     910:	4798      	blx	r3
	if(res != FR_OK) {
     912:	2800      	cmp	r0, #0
     914:	d12e      	bne.n	974 <audio_record_init+0x120>
		printf("Error while opening file: #%d\n\r", res);
	}
	res = f_write(&file_object, wave_header, 44, &bytes);
     916:	ab04      	add	r3, sp, #16
     918:	222c      	movs	r2, #44	; 0x2c
     91a:	4934      	ldr	r1, [pc, #208]	; (9ec <audio_record_init+0x198>)
     91c:	4831      	ldr	r0, [pc, #196]	; (9e4 <audio_record_init+0x190>)
     91e:	4c34      	ldr	r4, [pc, #208]	; (9f0 <audio_record_init+0x19c>)
     920:	47a0      	blx	r4
	if(res != FR_OK) {
     922:	2800      	cmp	r0, #0
     924:	d12b      	bne.n	97e <audio_record_init+0x12a>
		printf("Error while writing WAV header: #%d\n\r", res);
	}
	res = f_sync(&file_object);
     926:	482f      	ldr	r0, [pc, #188]	; (9e4 <audio_record_init+0x190>)
     928:	4b32      	ldr	r3, [pc, #200]	; (9f4 <audio_record_init+0x1a0>)
     92a:	4798      	blx	r3
	if(res != FR_OK) {
     92c:	2800      	cmp	r0, #0
     92e:	d12b      	bne.n	988 <audio_record_init+0x134>
		printf("Error while syncing file: #%d\n\r", res);
	}
	res = f_close(&file_object);
     930:	482c      	ldr	r0, [pc, #176]	; (9e4 <audio_record_init+0x190>)
     932:	4b31      	ldr	r3, [pc, #196]	; (9f8 <audio_record_init+0x1a4>)
     934:	4798      	blx	r3
	if(res != FR_OK) {
     936:	2800      	cmp	r0, #0
     938:	d12b      	bne.n	992 <audio_record_init+0x13e>
		printf("Error while closing file: #%d\n\r", res);
	}
	
	res = f_open(&file_object, (char const *)file_name, FA_CREATE_ALWAYS | FA_WRITE);
     93a:	220a      	movs	r2, #10
     93c:	9905      	ldr	r1, [sp, #20]
     93e:	4829      	ldr	r0, [pc, #164]	; (9e4 <audio_record_init+0x190>)
     940:	4b29      	ldr	r3, [pc, #164]	; (9e8 <audio_record_init+0x194>)
     942:	4798      	blx	r3
	if(res != FR_OK) {
     944:	2800      	cmp	r0, #0
     946:	d129      	bne.n	99c <audio_record_init+0x148>
		printf("Error while opening file: #%d\n\r", res);
	}
	res = f_write(&file_object, wave_header, 44, &bytes);
     948:	ab04      	add	r3, sp, #16
     94a:	222c      	movs	r2, #44	; 0x2c
     94c:	4927      	ldr	r1, [pc, #156]	; (9ec <audio_record_init+0x198>)
     94e:	4825      	ldr	r0, [pc, #148]	; (9e4 <audio_record_init+0x190>)
     950:	4c27      	ldr	r4, [pc, #156]	; (9f0 <audio_record_init+0x19c>)
     952:	47a0      	blx	r4
	if(res != FR_OK) {
     954:	2800      	cmp	r0, #0
     956:	d126      	bne.n	9a6 <audio_record_init+0x152>
		printf("Error while writing WAV header: #%d\n\r", res);
	}
	res = f_sync(&file_object);
     958:	4822      	ldr	r0, [pc, #136]	; (9e4 <audio_record_init+0x190>)
     95a:	4b26      	ldr	r3, [pc, #152]	; (9f4 <audio_record_init+0x1a0>)
     95c:	4798      	blx	r3
	if(res != FR_OK) {
     95e:	2800      	cmp	r0, #0
     960:	d126      	bne.n	9b0 <audio_record_init+0x15c>
		printf("Error while syncing file: #%d\n\r", res);
	}
	res = f_close(&file_object);
     962:	4820      	ldr	r0, [pc, #128]	; (9e4 <audio_record_init+0x190>)
     964:	4b24      	ldr	r3, [pc, #144]	; (9f8 <audio_record_init+0x1a4>)
     966:	4798      	blx	r3
	if(res != FR_OK) {
     968:	2800      	cmp	r0, #0
     96a:	d126      	bne.n	9ba <audio_record_init+0x166>
		printf("Error while closing file: #%d\n\r", res);
	}
}
     96c:	b006      	add	sp, #24
     96e:	bc04      	pop	{r2}
     970:	4691      	mov	r9, r2
     972:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Error while opening file: #%d\n\r", res);
     974:	0001      	movs	r1, r0
     976:	4821      	ldr	r0, [pc, #132]	; (9fc <audio_record_init+0x1a8>)
     978:	4b19      	ldr	r3, [pc, #100]	; (9e0 <audio_record_init+0x18c>)
     97a:	4798      	blx	r3
     97c:	e7cb      	b.n	916 <audio_record_init+0xc2>
		printf("Error while writing WAV header: #%d\n\r", res);
     97e:	0001      	movs	r1, r0
     980:	481f      	ldr	r0, [pc, #124]	; (a00 <audio_record_init+0x1ac>)
     982:	4b17      	ldr	r3, [pc, #92]	; (9e0 <audio_record_init+0x18c>)
     984:	4798      	blx	r3
     986:	e7ce      	b.n	926 <audio_record_init+0xd2>
		printf("Error while syncing file: #%d\n\r", res);
     988:	0001      	movs	r1, r0
     98a:	481e      	ldr	r0, [pc, #120]	; (a04 <audio_record_init+0x1b0>)
     98c:	4b14      	ldr	r3, [pc, #80]	; (9e0 <audio_record_init+0x18c>)
     98e:	4798      	blx	r3
     990:	e7ce      	b.n	930 <audio_record_init+0xdc>
		printf("Error while closing file: #%d\n\r", res);
     992:	0001      	movs	r1, r0
     994:	481c      	ldr	r0, [pc, #112]	; (a08 <audio_record_init+0x1b4>)
     996:	4b12      	ldr	r3, [pc, #72]	; (9e0 <audio_record_init+0x18c>)
     998:	4798      	blx	r3
     99a:	e7ce      	b.n	93a <audio_record_init+0xe6>
		printf("Error while opening file: #%d\n\r", res);
     99c:	0001      	movs	r1, r0
     99e:	4817      	ldr	r0, [pc, #92]	; (9fc <audio_record_init+0x1a8>)
     9a0:	4b0f      	ldr	r3, [pc, #60]	; (9e0 <audio_record_init+0x18c>)
     9a2:	4798      	blx	r3
     9a4:	e7d0      	b.n	948 <audio_record_init+0xf4>
		printf("Error while writing WAV header: #%d\n\r", res);
     9a6:	0001      	movs	r1, r0
     9a8:	4815      	ldr	r0, [pc, #84]	; (a00 <audio_record_init+0x1ac>)
     9aa:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <audio_record_init+0x18c>)
     9ac:	4798      	blx	r3
     9ae:	e7d3      	b.n	958 <audio_record_init+0x104>
		printf("Error while syncing file: #%d\n\r", res);
     9b0:	0001      	movs	r1, r0
     9b2:	4814      	ldr	r0, [pc, #80]	; (a04 <audio_record_init+0x1b0>)
     9b4:	4b0a      	ldr	r3, [pc, #40]	; (9e0 <audio_record_init+0x18c>)
     9b6:	4798      	blx	r3
     9b8:	e7d3      	b.n	962 <audio_record_init+0x10e>
		printf("Error while closing file: #%d\n\r", res);
     9ba:	0001      	movs	r1, r0
     9bc:	4812      	ldr	r0, [pc, #72]	; (a08 <audio_record_init+0x1b4>)
     9be:	4b08      	ldr	r3, [pc, #32]	; (9e0 <audio_record_init+0x18c>)
     9c0:	4798      	blx	r3
}
     9c2:	e7d3      	b.n	96c <audio_record_init+0x118>
     9c4:	200006b0 	.word	0x200006b0
     9c8:	000025d1 	.word	0x000025d1
     9cc:	0000a720 	.word	0x0000a720
     9d0:	000094f5 	.word	0x000094f5
     9d4:	fffff830 	.word	0xfffff830
     9d8:	0000a724 	.word	0x0000a724
     9dc:	0000a72c 	.word	0x0000a72c
     9e0:	00009355 	.word	0x00009355
     9e4:	200006c4 	.word	0x200006c4
     9e8:	000056c5 	.word	0x000056c5
     9ec:	2000000c 	.word	0x2000000c
     9f0:	0000584d 	.word	0x0000584d
     9f4:	00005a85 	.word	0x00005a85
     9f8:	00005b11 	.word	0x00005b11
     9fc:	0000a748 	.word	0x0000a748
     a00:	0000a768 	.word	0x0000a768
     a04:	0000a790 	.word	0x0000a790
     a08:	0000a7b0 	.word	0x0000a7b0

00000a0c <audio_record_1samp>:

void audio_record_1samp(void) {
     a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0e:	b083      	sub	sp, #12
     a10:	2332      	movs	r3, #50	; 0x32
     a12:	3b01      	subs	r3, #1
	uint8_t adc_vals[2];
	for(uint32_t i = 0; i < 50; i++) {
     a14:	2b00      	cmp	r3, #0
     a16:	d1fc      	bne.n	a12 <audio_record_1samp+0x6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a18:	4d0c      	ldr	r5, [pc, #48]	; (a4c <audio_record_1samp+0x40>)
     a1a:	2680      	movs	r6, #128	; 0x80
     a1c:	0376      	lsls	r6, r6, #13
     a1e:	616e      	str	r6, [r5, #20]
		
	}
	port_pin_set_output_level(ADC_CONV_PIN, false);
	spi_read_buffer_wait(&adc_spi_module, adc_vals, 2, 0xFF);
     a20:	ac01      	add	r4, sp, #4
     a22:	33ff      	adds	r3, #255	; 0xff
     a24:	2202      	movs	r2, #2
     a26:	0021      	movs	r1, r4
     a28:	4809      	ldr	r0, [pc, #36]	; (a50 <audio_record_1samp+0x44>)
     a2a:	4f0a      	ldr	r7, [pc, #40]	; (a54 <audio_record_1samp+0x48>)
     a2c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
     a2e:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
	audio_buffer[0] = ((uint16_t)adc_vals[0] << 8) || (adc_vals[1]);
     a30:	7822      	ldrb	r2, [r4, #0]
     a32:	2301      	movs	r3, #1
     a34:	2a00      	cmp	r2, #0
     a36:	d104      	bne.n	a42 <audio_record_1samp+0x36>
     a38:	ab01      	add	r3, sp, #4
     a3a:	785b      	ldrb	r3, [r3, #1]
     a3c:	1e5a      	subs	r2, r3, #1
     a3e:	4193      	sbcs	r3, r2
     a40:	b2db      	uxtb	r3, r3
     a42:	4a05      	ldr	r2, [pc, #20]	; (a58 <audio_record_1samp+0x4c>)
     a44:	8013      	strh	r3, [r2, #0]
}
     a46:	b003      	add	sp, #12
     a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	41004400 	.word	0x41004400
     a50:	200006b8 	.word	0x200006b8
     a54:	00007889 	.word	0x00007889
     a58:	200002d0 	.word	0x200002d0

00000a5c <audio_sync_reached_callback>:

static void audio_sync_reached_callback(void) {
     a5c:	b510      	push	{r4, lr}
	audio_record_1samp();
     a5e:	4b07      	ldr	r3, [pc, #28]	; (a7c <audio_sync_reached_callback+0x20>)
     a60:	4798      	blx	r3
	audio_frame_cnt++;
     a62:	4b07      	ldr	r3, [pc, #28]	; (a80 <audio_sync_reached_callback+0x24>)
     a64:	681a      	ldr	r2, [r3, #0]
     a66:	3201      	adds	r2, #1
     a68:	601a      	str	r2, [r3, #0]
	if(audio_frame_cnt >= 10000) {
     a6a:	681a      	ldr	r2, [r3, #0]
     a6c:	4b05      	ldr	r3, [pc, #20]	; (a84 <audio_sync_reached_callback+0x28>)
     a6e:	429a      	cmp	r2, r3
     a70:	d902      	bls.n	a78 <audio_sync_reached_callback+0x1c>
		audio_frame_cnt = 0;
     a72:	2200      	movs	r2, #0
     a74:	4b02      	ldr	r3, [pc, #8]	; (a80 <audio_sync_reached_callback+0x24>)
     a76:	601a      	str	r2, [r3, #0]
	}
}
     a78:	bd10      	pop	{r4, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	00000a0d 	.word	0x00000a0d
     a80:	200001a8 	.word	0x200001a8
     a84:	0000270f 	.word	0x0000270f

00000a88 <audio_sync_init>:

void audio_sync_init(void) {
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     a8c:	4d1f      	ldr	r5, [pc, #124]	; (b0c <audio_sync_init+0x84>)
     a8e:	0029      	movs	r1, r5
     a90:	a801      	add	r0, sp, #4
     a92:	4b1f      	ldr	r3, [pc, #124]	; (b10 <audio_sync_init+0x88>)
     a94:	4798      	blx	r3
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
     a96:	4b1f      	ldr	r3, [pc, #124]	; (b14 <audio_sync_init+0x8c>)
     a98:	9302      	str	r3, [sp, #8]
	config_tcc.compare.match[0] = AUDIO_SYNC_CONV_CNT;
     a9a:	2332      	movs	r3, #50	; 0x32
     a9c:	9308      	str	r3, [sp, #32]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
     a9e:	4c1e      	ldr	r4, [pc, #120]	; (b18 <audio_sync_init+0x90>)
     aa0:	aa01      	add	r2, sp, #4
     aa2:	0029      	movs	r1, r5
     aa4:	0020      	movs	r0, r4
     aa6:	4b1d      	ldr	r3, [pc, #116]	; (b1c <audio_sync_init+0x94>)
     aa8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     aaa:	6822      	ldr	r2, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     aac:	2102      	movs	r1, #2
     aae:	6893      	ldr	r3, [r2, #8]
     ab0:	4219      	tst	r1, r3
     ab2:	d1fc      	bne.n	aae <audio_sync_init+0x26>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     ab4:	6813      	ldr	r3, [r2, #0]
     ab6:	2102      	movs	r1, #2
     ab8:	430b      	orrs	r3, r1
     aba:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     abc:	4b16      	ldr	r3, [pc, #88]	; (b18 <audio_sync_init+0x90>)
     abe:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     ac0:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     ac2:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     ac4:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     ac6:	6893      	ldr	r3, [r2, #8]
     ac8:	4219      	tst	r1, r3
     aca:	d1fc      	bne.n	ac6 <audio_sync_init+0x3e>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     acc:	7953      	ldrb	r3, [r2, #5]
     ace:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     ad0:	d005      	beq.n	ade <audio_sync_init+0x56>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
     ad2:	2b40      	cmp	r3, #64	; 0x40
     ad4:	d005      	beq.n	ae2 <audio_sync_init+0x5a>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
     ad6:	2b20      	cmp	r3, #32
     ad8:	d1f5      	bne.n	ac6 <audio_sync_init+0x3e>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     ada:	7114      	strb	r4, [r2, #4]
     adc:	e7f3      	b.n	ac6 <audio_sync_init+0x3e>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
     ade:	2340      	movs	r3, #64	; 0x40
     ae0:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
     ae2:	4e0f      	ldr	r6, [pc, #60]	; (b20 <audio_sync_init+0x98>)
     ae4:	4c0c      	ldr	r4, [pc, #48]	; (b18 <audio_sync_init+0x90>)
     ae6:	2200      	movs	r2, #0
     ae8:	0031      	movs	r1, r6
     aea:	0020      	movs	r0, r4
     aec:	4d0d      	ldr	r5, [pc, #52]	; (b24 <audio_sync_init+0x9c>)
     aee:	47a8      	blx	r5
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_CHANNEL_0);
     af0:	2208      	movs	r2, #8
     af2:	0031      	movs	r1, r6
     af4:	0020      	movs	r0, r4
     af6:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
     af8:	2100      	movs	r1, #0
     afa:	0020      	movs	r0, r4
     afc:	4d0a      	ldr	r5, [pc, #40]	; (b28 <audio_sync_init+0xa0>)
     afe:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_CHANNEL_0);
     b00:	2108      	movs	r1, #8
     b02:	0020      	movs	r0, r4
     b04:	47a8      	blx	r5
     b06:	b02a      	add	sp, #168	; 0xa8
     b08:	bd70      	pop	{r4, r5, r6, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	42002000 	.word	0x42002000
     b10:	00000149 	.word	0x00000149
     b14:	00000424 	.word	0x00000424
     b18:	20000950 	.word	0x20000950
     b1c:	00000295 	.word	0x00000295
     b20:	00000a5d 	.word	0x00000a5d
     b24:	000006a1 	.word	0x000006a1
     b28:	000006b9 	.word	0x000006b9

00000b2c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     b2c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <sd_mmc_configure_slot+0x20>)
     b30:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     b32:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     b34:	5ccb      	ldrb	r3, [r1, r3]
     b36:	1e5a      	subs	r2, r3, #1
     b38:	4193      	sbcs	r3, r2
     b3a:	b2db      	uxtb	r3, r3
     b3c:	7c4a      	ldrb	r2, [r1, #17]
     b3e:	6809      	ldr	r1, [r1, #0]
     b40:	4803      	ldr	r0, [pc, #12]	; (b50 <sd_mmc_configure_slot+0x24>)
     b42:	7800      	ldrb	r0, [r0, #0]
     b44:	4c03      	ldr	r4, [pc, #12]	; (b54 <sd_mmc_configure_slot+0x28>)
     b46:	47a0      	blx	r4
}
     b48:	bd10      	pop	{r4, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	200001ac 	.word	0x200001ac
     b50:	200001b5 	.word	0x200001b5
     b54:	00008261 	.word	0x00008261

00000b58 <sd_mmc_select_slot>:
{
     b58:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     b5a:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     b5c:	2800      	cmp	r0, #0
     b5e:	d001      	beq.n	b64 <sd_mmc_select_slot+0xc>
}
     b60:	0018      	movs	r0, r3
     b62:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     b64:	4b40      	ldr	r3, [pc, #256]	; (c68 <sd_mmc_select_slot+0x110>)
     b66:	7a19      	ldrb	r1, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     b68:	09ca      	lsrs	r2, r1, #7
		return NULL;
     b6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b6c:	2a00      	cmp	r2, #0
     b6e:	d104      	bne.n	b7a <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     b70:	094b      	lsrs	r3, r1, #5
     b72:	01db      	lsls	r3, r3, #7
     b74:	4a3d      	ldr	r2, [pc, #244]	; (c6c <sd_mmc_select_slot+0x114>)
     b76:	4694      	mov	ip, r2
     b78:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     b7a:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b7c:	221f      	movs	r2, #31
     b7e:	400a      	ands	r2, r1
     b80:	2301      	movs	r3, #1
     b82:	4093      	lsls	r3, r2
     b84:	4218      	tst	r0, r3
     b86:	d010      	beq.n	baa <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     b88:	4b37      	ldr	r3, [pc, #220]	; (c68 <sd_mmc_select_slot+0x110>)
     b8a:	7b9b      	ldrb	r3, [r3, #14]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d004      	beq.n	b9a <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     b90:	2204      	movs	r2, #4
     b92:	4b35      	ldr	r3, [pc, #212]	; (c68 <sd_mmc_select_slot+0x110>)
     b94:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     b96:	2302      	movs	r3, #2
     b98:	e7e2      	b.n	b60 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     b9a:	4b35      	ldr	r3, [pc, #212]	; (c70 <sd_mmc_select_slot+0x118>)
     b9c:	781b      	ldrb	r3, [r3, #0]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d0f6      	beq.n	b90 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     ba2:	2200      	movs	r2, #0
     ba4:	4b33      	ldr	r3, [pc, #204]	; (c74 <sd_mmc_select_slot+0x11c>)
     ba6:	601a      	str	r2, [r3, #0]
     ba8:	e7f2      	b.n	b90 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     baa:	4b2f      	ldr	r3, [pc, #188]	; (c68 <sd_mmc_select_slot+0x110>)
     bac:	7b9a      	ldrb	r2, [r3, #14]
     bae:	2a04      	cmp	r2, #4
     bb0:	d005      	beq.n	bbe <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     bb2:	2a01      	cmp	r2, #1
     bb4:	d033      	beq.n	c1e <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     bb6:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     bb8:	2a03      	cmp	r2, #3
     bba:	d0d1      	beq.n	b60 <sd_mmc_select_slot+0x8>
     bbc:	e045      	b.n	c4a <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     bbe:	3a03      	subs	r2, #3
     bc0:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     bc2:	4b2c      	ldr	r3, [pc, #176]	; (c74 <sd_mmc_select_slot+0x11c>)
     bc4:	681b      	ldr	r3, [r3, #0]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d017      	beq.n	bfa <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     bca:	2200      	movs	r2, #0
     bcc:	4b28      	ldr	r3, [pc, #160]	; (c70 <sd_mmc_select_slot+0x118>)
     bce:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     bd0:	2000      	movs	r0, #0
     bd2:	4b29      	ldr	r3, [pc, #164]	; (c78 <sd_mmc_select_slot+0x120>)
     bd4:	4798      	blx	r3
     bd6:	22fa      	movs	r2, #250	; 0xfa
     bd8:	0092      	lsls	r2, r2, #2
     bda:	2300      	movs	r3, #0
     bdc:	2100      	movs	r1, #0
     bde:	4c27      	ldr	r4, [pc, #156]	; (c7c <sd_mmc_select_slot+0x124>)
     be0:	47a0      	blx	r4
     be2:	4a27      	ldr	r2, [pc, #156]	; (c80 <sd_mmc_select_slot+0x128>)
     be4:	2300      	movs	r3, #0
     be6:	1880      	adds	r0, r0, r2
     be8:	4159      	adcs	r1, r3
     bea:	4a26      	ldr	r2, [pc, #152]	; (c84 <sd_mmc_select_slot+0x12c>)
     bec:	2300      	movs	r3, #0
     bee:	4c26      	ldr	r4, [pc, #152]	; (c88 <sd_mmc_select_slot+0x130>)
     bf0:	47a0      	blx	r4
     bf2:	4b26      	ldr	r3, [pc, #152]	; (c8c <sd_mmc_select_slot+0x134>)
     bf4:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     bf6:	2302      	movs	r3, #2
     bf8:	e7b2      	b.n	b60 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     bfa:	2401      	movs	r4, #1
     bfc:	4b1c      	ldr	r3, [pc, #112]	; (c70 <sd_mmc_select_slot+0x118>)
     bfe:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     c00:	2000      	movs	r0, #0
     c02:	4b1d      	ldr	r3, [pc, #116]	; (c78 <sd_mmc_select_slot+0x120>)
     c04:	4798      	blx	r3
     c06:	21fa      	movs	r1, #250	; 0xfa
     c08:	0149      	lsls	r1, r1, #5
     c0a:	4b21      	ldr	r3, [pc, #132]	; (c90 <sd_mmc_select_slot+0x138>)
     c0c:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     c0e:	23fa      	movs	r3, #250	; 0xfa
     c10:	009b      	lsls	r3, r3, #2
     c12:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     c14:	4b17      	ldr	r3, [pc, #92]	; (c74 <sd_mmc_select_slot+0x11c>)
     c16:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     c18:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     c1a:	2302      	movs	r3, #2
     c1c:	e7a0      	b.n	b60 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     c1e:	4b14      	ldr	r3, [pc, #80]	; (c70 <sd_mmc_select_slot+0x118>)
     c20:	781b      	ldrb	r3, [r3, #0]
     c22:	2b00      	cmp	r3, #0
     c24:	d007      	beq.n	c36 <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     c26:	4b13      	ldr	r3, [pc, #76]	; (c74 <sd_mmc_select_slot+0x11c>)
     c28:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     c2a:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     c2c:	03d2      	lsls	r2, r2, #15
     c2e:	d597      	bpl.n	b60 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     c30:	2200      	movs	r2, #0
     c32:	4b10      	ldr	r3, [pc, #64]	; (c74 <sd_mmc_select_slot+0x11c>)
     c34:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     c36:	4b0c      	ldr	r3, [pc, #48]	; (c68 <sd_mmc_select_slot+0x110>)
     c38:	2202      	movs	r2, #2
     c3a:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     c3c:	4a15      	ldr	r2, [pc, #84]	; (c94 <sd_mmc_select_slot+0x13c>)
     c3e:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     c40:	2201      	movs	r2, #1
     c42:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     c44:	2100      	movs	r1, #0
     c46:	3221      	adds	r2, #33	; 0x21
     c48:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     c4a:	2200      	movs	r2, #0
     c4c:	4b12      	ldr	r3, [pc, #72]	; (c98 <sd_mmc_select_slot+0x140>)
     c4e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     c50:	4c05      	ldr	r4, [pc, #20]	; (c68 <sd_mmc_select_slot+0x110>)
     c52:	4b12      	ldr	r3, [pc, #72]	; (c9c <sd_mmc_select_slot+0x144>)
     c54:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     c56:	4b12      	ldr	r3, [pc, #72]	; (ca0 <sd_mmc_select_slot+0x148>)
     c58:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     c5a:	7ba3      	ldrb	r3, [r4, #14]
     c5c:	3b02      	subs	r3, #2
     c5e:	425a      	negs	r2, r3
     c60:	4153      	adcs	r3, r2
     c62:	b2db      	uxtb	r3, r3
     c64:	e77c      	b.n	b60 <sd_mmc_select_slot+0x8>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	20000038 	.word	0x20000038
     c6c:	41004400 	.word	0x41004400
     c70:	200001b4 	.word	0x200001b4
     c74:	e000e010 	.word	0xe000e010
     c78:	000089c1 	.word	0x000089c1
     c7c:	000090fd 	.word	0x000090fd
     c80:	00001b57 	.word	0x00001b57
     c84:	00001b58 	.word	0x00001b58
     c88:	000090bd 	.word	0x000090bd
     c8c:	20000001 	.word	0x20000001
     c90:	00008d55 	.word	0x00008d55
     c94:	00061a80 	.word	0x00061a80
     c98:	200001b5 	.word	0x200001b5
     c9c:	200001ac 	.word	0x200001ac
     ca0:	00000b2d 	.word	0x00000b2d

00000ca4 <sd_mmc_cmd13>:
{
     ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ca6:	4d09      	ldr	r5, [pc, #36]	; (ccc <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     ca8:	4f09      	ldr	r7, [pc, #36]	; (cd0 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     caa:	4e0a      	ldr	r6, [pc, #40]	; (cd4 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     cac:	2100      	movs	r1, #0
     cae:	480a      	ldr	r0, [pc, #40]	; (cd8 <sd_mmc_cmd13+0x34>)
     cb0:	47b8      	blx	r7
     cb2:	1e04      	subs	r4, r0, #0
     cb4:	d007      	beq.n	cc6 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     cb6:	47b0      	blx	r6
     cb8:	23ff      	movs	r3, #255	; 0xff
     cba:	4203      	tst	r3, r0
     cbc:	d003      	beq.n	cc6 <sd_mmc_cmd13+0x22>
     cbe:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     cc0:	2d00      	cmp	r5, #0
     cc2:	d1f3      	bne.n	cac <sd_mmc_cmd13+0x8>
			return false;
     cc4:	2400      	movs	r4, #0
}
     cc6:	0020      	movs	r0, r4
     cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	00030d41 	.word	0x00030d41
     cd0:	000084a5 	.word	0x000084a5
     cd4:	000084bd 	.word	0x000084bd
     cd8:	00001b0d 	.word	0x00001b0d

00000cdc <sd_mmc_cmd9_spi>:
{
     cdc:	b510      	push	{r4, lr}
     cde:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     ce0:	4b0c      	ldr	r3, [pc, #48]	; (d14 <sd_mmc_cmd9_spi+0x38>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	8999      	ldrh	r1, [r3, #12]
     ce6:	0409      	lsls	r1, r1, #16
     ce8:	2301      	movs	r3, #1
     cea:	9300      	str	r3, [sp, #0]
     cec:	2210      	movs	r2, #16
     cee:	480a      	ldr	r0, [pc, #40]	; (d18 <sd_mmc_cmd9_spi+0x3c>)
     cf0:	4c0a      	ldr	r4, [pc, #40]	; (d1c <sd_mmc_cmd9_spi+0x40>)
     cf2:	47a0      	blx	r4
     cf4:	2800      	cmp	r0, #0
     cf6:	d101      	bne.n	cfc <sd_mmc_cmd9_spi+0x20>
}
     cf8:	b002      	add	sp, #8
     cfa:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     cfc:	4b05      	ldr	r3, [pc, #20]	; (d14 <sd_mmc_cmd9_spi+0x38>)
     cfe:	6818      	ldr	r0, [r3, #0]
     d00:	3012      	adds	r0, #18
     d02:	2101      	movs	r1, #1
     d04:	4b06      	ldr	r3, [pc, #24]	; (d20 <sd_mmc_cmd9_spi+0x44>)
     d06:	4798      	blx	r3
     d08:	2800      	cmp	r0, #0
     d0a:	d0f5      	beq.n	cf8 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     d0c:	4b05      	ldr	r3, [pc, #20]	; (d24 <sd_mmc_cmd9_spi+0x48>)
     d0e:	4798      	blx	r3
     d10:	e7f2      	b.n	cf8 <sd_mmc_cmd9_spi+0x1c>
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	200001ac 	.word	0x200001ac
     d18:	00081109 	.word	0x00081109
     d1c:	00008315 	.word	0x00008315
     d20:	00008541 	.word	0x00008541
     d24:	000085cd 	.word	0x000085cd

00000d28 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     d28:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     d2a:	4b04      	ldr	r3, [pc, #16]	; (d3c <sd_mmc_deselect_slot+0x14>)
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	2b00      	cmp	r3, #0
     d30:	d000      	beq.n	d34 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     d32:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     d34:	2000      	movs	r0, #0
     d36:	4b02      	ldr	r3, [pc, #8]	; (d40 <sd_mmc_deselect_slot+0x18>)
     d38:	4798      	blx	r3
}
     d3a:	e7fa      	b.n	d32 <sd_mmc_deselect_slot+0xa>
     d3c:	200001b5 	.word	0x200001b5
     d40:	000082b5 	.word	0x000082b5

00000d44 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     d44:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     d46:	2204      	movs	r2, #4
     d48:	4b03      	ldr	r3, [pc, #12]	; (d58 <sd_mmc_init+0x14>)
     d4a:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     d4c:	32fb      	adds	r2, #251	; 0xfb
     d4e:	4b03      	ldr	r3, [pc, #12]	; (d5c <sd_mmc_init+0x18>)
     d50:	701a      	strb	r2, [r3, #0]
	driver_init();
     d52:	4b03      	ldr	r3, [pc, #12]	; (d60 <sd_mmc_init+0x1c>)
     d54:	4798      	blx	r3
}
     d56:	bd10      	pop	{r4, pc}
     d58:	20000038 	.word	0x20000038
     d5c:	200001b5 	.word	0x200001b5
     d60:	0000816d 	.word	0x0000816d

00000d64 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     d64:	b5f0      	push	{r4, r5, r6, r7, lr}
     d66:	46c6      	mov	lr, r8
     d68:	b500      	push	{lr}
     d6a:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     d6c:	4bcb      	ldr	r3, [pc, #812]	; (109c <sd_mmc_check+0x338>)
     d6e:	4798      	blx	r3
     d70:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     d72:	2801      	cmp	r0, #1
     d74:	d006      	beq.n	d84 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     d76:	4bca      	ldr	r3, [pc, #808]	; (10a0 <sd_mmc_check+0x33c>)
     d78:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     d7a:	0020      	movs	r0, r4
     d7c:	b008      	add	sp, #32
     d7e:	bc04      	pop	{r2}
     d80:	4690      	mov	r8, r2
     d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     d84:	4bc7      	ldr	r3, [pc, #796]	; (10a4 <sd_mmc_check+0x340>)
     d86:	681b      	ldr	r3, [r3, #0]
     d88:	2201      	movs	r2, #1
     d8a:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     d8c:	2200      	movs	r2, #0
     d8e:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     d90:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     d92:	4bc5      	ldr	r3, [pc, #788]	; (10a8 <sd_mmc_check+0x344>)
     d94:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     d96:	2100      	movs	r1, #0
     d98:	2088      	movs	r0, #136	; 0x88
     d9a:	0140      	lsls	r0, r0, #5
     d9c:	4bc3      	ldr	r3, [pc, #780]	; (10ac <sd_mmc_check+0x348>)
     d9e:	4798      	blx	r3
     da0:	2800      	cmp	r0, #0
     da2:	d107      	bne.n	db4 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     da4:	4bbf      	ldr	r3, [pc, #764]	; (10a4 <sd_mmc_check+0x340>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	2203      	movs	r2, #3
     daa:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     dac:	4bbc      	ldr	r3, [pc, #752]	; (10a0 <sd_mmc_check+0x33c>)
     dae:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     db0:	2403      	movs	r4, #3
     db2:	e7e2      	b.n	d7a <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     db4:	21d5      	movs	r1, #213	; 0xd5
     db6:	0049      	lsls	r1, r1, #1
     db8:	48bd      	ldr	r0, [pc, #756]	; (10b0 <sd_mmc_check+0x34c>)
     dba:	4bbc      	ldr	r3, [pc, #752]	; (10ac <sd_mmc_check+0x348>)
     dbc:	4798      	blx	r3
	*v2 = 0;
     dbe:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     dc0:	2800      	cmp	r0, #0
     dc2:	d125      	bne.n	e10 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     dc4:	4bb7      	ldr	r3, [pc, #732]	; (10a4 <sd_mmc_check+0x340>)
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	7bdb      	ldrb	r3, [r3, #15]
     dca:	07db      	lsls	r3, r3, #31
     dcc:	d500      	bpl.n	dd0 <sd_mmc_check+0x6c>
     dce:	e1eb      	b.n	11a8 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dd0:	4bb4      	ldr	r3, [pc, #720]	; (10a4 <sd_mmc_check+0x340>)
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	7bda      	ldrb	r2, [r3, #15]
     dd6:	2309      	movs	r3, #9
     dd8:	4013      	ands	r3, r2
     dda:	2b01      	cmp	r3, #1
     ddc:	d10f      	bne.n	dfe <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     dde:	2180      	movs	r1, #128	; 0x80
     de0:	0089      	lsls	r1, r1, #2
     de2:	48b4      	ldr	r0, [pc, #720]	; (10b4 <sd_mmc_check+0x350>)
     de4:	4bb1      	ldr	r3, [pc, #708]	; (10ac <sd_mmc_check+0x348>)
     de6:	4798      	blx	r3
     de8:	2800      	cmp	r0, #0
     dea:	d0db      	beq.n	da4 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     dec:	4bad      	ldr	r3, [pc, #692]	; (10a4 <sd_mmc_check+0x340>)
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	7bdb      	ldrb	r3, [r3, #15]
     df2:	07db      	lsls	r3, r3, #31
     df4:	d503      	bpl.n	dfe <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     df6:	4bb0      	ldr	r3, [pc, #704]	; (10b8 <sd_mmc_check+0x354>)
     df8:	4798      	blx	r3
     dfa:	2800      	cmp	r0, #0
     dfc:	d0d2      	beq.n	da4 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     dfe:	4baf      	ldr	r3, [pc, #700]	; (10bc <sd_mmc_check+0x358>)
     e00:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     e02:	4ba8      	ldr	r3, [pc, #672]	; (10a4 <sd_mmc_check+0x340>)
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	2200      	movs	r2, #0
     e08:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     e0a:	4ba5      	ldr	r3, [pc, #660]	; (10a0 <sd_mmc_check+0x33c>)
     e0c:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     e0e:	e7b4      	b.n	d7a <sd_mmc_check+0x16>
	resp = driver_get_response();
     e10:	4bab      	ldr	r3, [pc, #684]	; (10c0 <sd_mmc_check+0x35c>)
     e12:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     e14:	1c43      	adds	r3, r0, #1
     e16:	d100      	bne.n	e1a <sd_mmc_check+0xb6>
     e18:	e1c4      	b.n	11a4 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     e1a:	0500      	lsls	r0, r0, #20
     e1c:	0d00      	lsrs	r0, r0, #20
     e1e:	23d5      	movs	r3, #213	; 0xd5
     e20:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     e22:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     e24:	4298      	cmp	r0, r3
     e26:	d1bd      	bne.n	da4 <sd_mmc_check+0x40>
     e28:	e7cc      	b.n	dc4 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     e2a:	2100      	movs	r1, #0
     e2c:	48a5      	ldr	r0, [pc, #660]	; (10c4 <sd_mmc_check+0x360>)
     e2e:	4b9f      	ldr	r3, [pc, #636]	; (10ac <sd_mmc_check+0x348>)
     e30:	4798      	blx	r3
     e32:	2800      	cmp	r0, #0
     e34:	d119      	bne.n	e6a <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     e36:	4b9b      	ldr	r3, [pc, #620]	; (10a4 <sd_mmc_check+0x340>)
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	2202      	movs	r2, #2
     e3c:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     e3e:	2100      	movs	r1, #0
     e40:	2088      	movs	r0, #136	; 0x88
     e42:	0140      	lsls	r0, r0, #5
     e44:	4b99      	ldr	r3, [pc, #612]	; (10ac <sd_mmc_check+0x348>)
     e46:	4798      	blx	r3
     e48:	2800      	cmp	r0, #0
     e4a:	d0ab      	beq.n	da4 <sd_mmc_check+0x40>
     e4c:	4d9e      	ldr	r5, [pc, #632]	; (10c8 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     e4e:	4f97      	ldr	r7, [pc, #604]	; (10ac <sd_mmc_check+0x348>)
		resp = driver_get_response();
     e50:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     e52:	2100      	movs	r1, #0
     e54:	489d      	ldr	r0, [pc, #628]	; (10cc <sd_mmc_check+0x368>)
     e56:	47b8      	blx	r7
     e58:	2800      	cmp	r0, #0
     e5a:	d0a3      	beq.n	da4 <sd_mmc_check+0x40>
		resp = driver_get_response();
     e5c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e5e:	07c3      	lsls	r3, r0, #31
     e60:	d57d      	bpl.n	f5e <sd_mmc_check+0x1fa>
     e62:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e64:	2d00      	cmp	r5, #0
     e66:	d1f4      	bne.n	e52 <sd_mmc_check+0xee>
     e68:	e79c      	b.n	da4 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     e6a:	4b95      	ldr	r3, [pc, #596]	; (10c0 <sd_mmc_check+0x35c>)
     e6c:	4798      	blx	r3
     e6e:	0043      	lsls	r3, r0, #1
     e70:	d505      	bpl.n	e7e <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     e72:	4b8c      	ldr	r3, [pc, #560]	; (10a4 <sd_mmc_check+0x340>)
     e74:	681a      	ldr	r2, [r3, #0]
     e76:	7bd3      	ldrb	r3, [r2, #15]
     e78:	2108      	movs	r1, #8
     e7a:	430b      	orrs	r3, r1
     e7c:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     e7e:	2100      	movs	r1, #0
     e80:	4893      	ldr	r0, [pc, #588]	; (10d0 <sd_mmc_check+0x36c>)
     e82:	4b8a      	ldr	r3, [pc, #552]	; (10ac <sd_mmc_check+0x348>)
     e84:	4798      	blx	r3
     e86:	2800      	cmp	r0, #0
     e88:	d08c      	beq.n	da4 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e8a:	4b86      	ldr	r3, [pc, #536]	; (10a4 <sd_mmc_check+0x340>)
     e8c:	681b      	ldr	r3, [r3, #0]
     e8e:	7bdb      	ldrb	r3, [r3, #15]
     e90:	07da      	lsls	r2, r3, #31
     e92:	d400      	bmi.n	e96 <sd_mmc_check+0x132>
     e94:	e1a4      	b.n	11e0 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     e96:	4b8f      	ldr	r3, [pc, #572]	; (10d4 <sd_mmc_check+0x370>)
     e98:	4798      	blx	r3
     e9a:	2800      	cmp	r0, #0
     e9c:	d082      	beq.n	da4 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     e9e:	4b81      	ldr	r3, [pc, #516]	; (10a4 <sd_mmc_check+0x340>)
     ea0:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ea2:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     ea4:	2107      	movs	r1, #7
     ea6:	4019      	ands	r1, r3
     ea8:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     eaa:	488b      	ldr	r0, [pc, #556]	; (10d8 <sd_mmc_check+0x374>)
     eac:	5808      	ldr	r0, [r1, r0]
     eae:	21fa      	movs	r1, #250	; 0xfa
     eb0:	0089      	lsls	r1, r1, #2
     eb2:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     eb4:	065b      	lsls	r3, r3, #25
     eb6:	0f1b      	lsrs	r3, r3, #28
     eb8:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     eba:	4888      	ldr	r0, [pc, #544]	; (10dc <sd_mmc_check+0x378>)
     ebc:	581b      	ldr	r3, [r3, r0]
     ebe:	434b      	muls	r3, r1
     ec0:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     ec2:	7c93      	ldrb	r3, [r2, #18]
     ec4:	099b      	lsrs	r3, r3, #6
     ec6:	d000      	beq.n	eca <sd_mmc_check+0x166>
     ec8:	e13c      	b.n	1144 <sd_mmc_check+0x3e0>
     eca:	7e91      	ldrb	r1, [r2, #26]
     ecc:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ece:	7e53      	ldrb	r3, [r2, #25]
     ed0:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ed2:	7e10      	ldrb	r0, [r2, #24]
     ed4:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ed6:	4303      	orrs	r3, r0
     ed8:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     eda:	7f10      	ldrb	r0, [r2, #28]
     edc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ede:	7ed1      	ldrb	r1, [r2, #27]
     ee0:	0049      	lsls	r1, r1, #1
     ee2:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     ee4:	051b      	lsls	r3, r3, #20
     ee6:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     ee8:	3301      	adds	r3, #1
     eea:	2107      	movs	r1, #7
     eec:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     eee:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     ef0:	408b      	lsls	r3, r1
     ef2:	7dd0      	ldrb	r0, [r2, #23]
     ef4:	210f      	movs	r1, #15
     ef6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     ef8:	408b      	lsls	r3, r1
				/ 1024;
     efa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     efc:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     efe:	8991      	ldrh	r1, [r2, #12]
     f00:	0409      	lsls	r1, r1, #16
     f02:	4877      	ldr	r0, [pc, #476]	; (10e0 <sd_mmc_check+0x37c>)
     f04:	4b69      	ldr	r3, [pc, #420]	; (10ac <sd_mmc_check+0x348>)
     f06:	4798      	blx	r3
     f08:	2800      	cmp	r0, #0
     f0a:	d100      	bne.n	f0e <sd_mmc_check+0x1aa>
     f0c:	e74a      	b.n	da4 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     f0e:	2301      	movs	r3, #1
     f10:	9300      	str	r3, [sp, #0]
     f12:	2208      	movs	r2, #8
     f14:	2100      	movs	r1, #0
     f16:	4873      	ldr	r0, [pc, #460]	; (10e4 <sd_mmc_check+0x380>)
     f18:	4d73      	ldr	r5, [pc, #460]	; (10e8 <sd_mmc_check+0x384>)
     f1a:	47a8      	blx	r5
     f1c:	2800      	cmp	r0, #0
     f1e:	d100      	bne.n	f22 <sd_mmc_check+0x1be>
     f20:	e740      	b.n	da4 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     f22:	2101      	movs	r1, #1
     f24:	a806      	add	r0, sp, #24
     f26:	4b71      	ldr	r3, [pc, #452]	; (10ec <sd_mmc_check+0x388>)
     f28:	4798      	blx	r3
     f2a:	2800      	cmp	r0, #0
     f2c:	d100      	bne.n	f30 <sd_mmc_check+0x1cc>
     f2e:	e739      	b.n	da4 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     f30:	4b6f      	ldr	r3, [pc, #444]	; (10f0 <sd_mmc_check+0x38c>)
     f32:	4798      	blx	r3
     f34:	2800      	cmp	r0, #0
     f36:	d100      	bne.n	f3a <sd_mmc_check+0x1d6>
     f38:	e734      	b.n	da4 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f3a:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	220f      	movs	r2, #15
     f40:	4013      	ands	r3, r2
     f42:	2b01      	cmp	r3, #1
     f44:	d100      	bne.n	f48 <sd_mmc_check+0x1e4>
     f46:	e119      	b.n	117c <sd_mmc_check+0x418>
     f48:	2b00      	cmp	r3, #0
     f4a:	d100      	bne.n	f4e <sd_mmc_check+0x1ea>
     f4c:	e109      	b.n	1162 <sd_mmc_check+0x3fe>
     f4e:	2b02      	cmp	r3, #2
     f50:	d100      	bne.n	f54 <sd_mmc_check+0x1f0>
     f52:	e118      	b.n	1186 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     f54:	4b53      	ldr	r3, [pc, #332]	; (10a4 <sd_mmc_check+0x340>)
     f56:	681b      	ldr	r3, [r3, #0]
     f58:	2210      	movs	r2, #16
     f5a:	741a      	strb	r2, [r3, #16]
     f5c:	e105      	b.n	116a <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     f5e:	2100      	movs	r1, #0
     f60:	4858      	ldr	r0, [pc, #352]	; (10c4 <sd_mmc_check+0x360>)
     f62:	4b52      	ldr	r3, [pc, #328]	; (10ac <sd_mmc_check+0x348>)
     f64:	4798      	blx	r3
     f66:	2800      	cmp	r0, #0
     f68:	d100      	bne.n	f6c <sd_mmc_check+0x208>
     f6a:	e71b      	b.n	da4 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     f6c:	4b54      	ldr	r3, [pc, #336]	; (10c0 <sd_mmc_check+0x35c>)
     f6e:	4798      	blx	r3
     f70:	23c0      	movs	r3, #192	; 0xc0
     f72:	05db      	lsls	r3, r3, #23
     f74:	4018      	ands	r0, r3
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	05db      	lsls	r3, r3, #23
     f7a:	4298      	cmp	r0, r3
     f7c:	d105      	bne.n	f8a <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     f7e:	4b49      	ldr	r3, [pc, #292]	; (10a4 <sd_mmc_check+0x340>)
     f80:	681a      	ldr	r2, [r3, #0]
     f82:	7bd1      	ldrb	r1, [r2, #15]
     f84:	2308      	movs	r3, #8
     f86:	430b      	orrs	r3, r1
     f88:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     f8a:	2100      	movs	r1, #0
     f8c:	4850      	ldr	r0, [pc, #320]	; (10d0 <sd_mmc_check+0x36c>)
     f8e:	4b47      	ldr	r3, [pc, #284]	; (10ac <sd_mmc_check+0x348>)
     f90:	4798      	blx	r3
     f92:	2800      	cmp	r0, #0
     f94:	d100      	bne.n	f98 <sd_mmc_check+0x234>
     f96:	e705      	b.n	da4 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     f98:	4b4e      	ldr	r3, [pc, #312]	; (10d4 <sd_mmc_check+0x370>)
     f9a:	4798      	blx	r3
     f9c:	2800      	cmp	r0, #0
     f9e:	d100      	bne.n	fa2 <sd_mmc_check+0x23e>
     fa0:	e700      	b.n	da4 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     fa2:	4b40      	ldr	r3, [pc, #256]	; (10a4 <sd_mmc_check+0x340>)
     fa4:	681a      	ldr	r2, [r3, #0]
     fa6:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     fa8:	069b      	lsls	r3, r3, #26
     faa:	0f1b      	lsrs	r3, r3, #28
     fac:	2b02      	cmp	r3, #2
     fae:	d100      	bne.n	fb2 <sd_mmc_check+0x24e>
     fb0:	e0a8      	b.n	1104 <sd_mmc_check+0x3a0>
     fb2:	d907      	bls.n	fc4 <sd_mmc_check+0x260>
     fb4:	2b03      	cmp	r3, #3
     fb6:	d100      	bne.n	fba <sd_mmc_check+0x256>
     fb8:	e0a7      	b.n	110a <sd_mmc_check+0x3a6>
     fba:	2b04      	cmp	r3, #4
     fbc:	d104      	bne.n	fc8 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     fbe:	2340      	movs	r3, #64	; 0x40
     fc0:	7413      	strb	r3, [r2, #16]
     fc2:	e003      	b.n	fcc <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     fc4:	2b01      	cmp	r3, #1
     fc6:	d066      	beq.n	1096 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     fc8:	2312      	movs	r3, #18
     fca:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     fcc:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     fce:	0659      	lsls	r1, r3, #25
     fd0:	0f09      	lsrs	r1, r1, #28
     fd2:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     fd4:	2007      	movs	r0, #7
     fd6:	4003      	ands	r3, r0
     fd8:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     fda:	483f      	ldr	r0, [pc, #252]	; (10d8 <sd_mmc_check+0x374>)
     fdc:	5818      	ldr	r0, [r3, r0]
     fde:	23fa      	movs	r3, #250	; 0xfa
     fe0:	009b      	lsls	r3, r3, #2
     fe2:	4343      	muls	r3, r0
     fe4:	4843      	ldr	r0, [pc, #268]	; (10f4 <sd_mmc_check+0x390>)
     fe6:	5809      	ldr	r1, [r1, r0]
     fe8:	434b      	muls	r3, r1
     fea:	6013      	str	r3, [r2, #0]
     fec:	7e91      	ldrb	r1, [r2, #26]
     fee:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ff0:	7e53      	ldrb	r3, [r2, #25]
     ff2:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ff4:	7e10      	ldrb	r0, [r2, #24]
     ff6:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ff8:	4303      	orrs	r3, r0
     ffa:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     ffc:	051b      	lsls	r3, r3, #20
     ffe:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    1000:	493d      	ldr	r1, [pc, #244]	; (10f8 <sd_mmc_check+0x394>)
    1002:	428b      	cmp	r3, r1
    1004:	d00f      	beq.n	1026 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    1006:	7f10      	ldrb	r0, [r2, #28]
    1008:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    100a:	7ed1      	ldrb	r1, [r2, #27]
    100c:	0049      	lsls	r1, r1, #1
    100e:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1010:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    1012:	2007      	movs	r0, #7
    1014:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1016:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1018:	408b      	lsls	r3, r1
    101a:	7dd1      	ldrb	r1, [r2, #23]
    101c:	3008      	adds	r0, #8
    101e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    1020:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1022:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1024:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1026:	7c13      	ldrb	r3, [r2, #16]
    1028:	2b3f      	cmp	r3, #63	; 0x3f
    102a:	d97b      	bls.n	1124 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    102c:	2100      	movs	r1, #0
    102e:	9100      	str	r1, [sp, #0]
    1030:	2301      	movs	r3, #1
    1032:	2280      	movs	r2, #128	; 0x80
    1034:	0092      	lsls	r2, r2, #2
    1036:	4831      	ldr	r0, [pc, #196]	; (10fc <sd_mmc_check+0x398>)
    1038:	4d2b      	ldr	r5, [pc, #172]	; (10e8 <sd_mmc_check+0x384>)
    103a:	47a8      	blx	r5
    103c:	2800      	cmp	r0, #0
    103e:	d100      	bne.n	1042 <sd_mmc_check+0x2de>
    1040:	e6b0      	b.n	da4 <sd_mmc_check+0x40>
    1042:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    1044:	4e2e      	ldr	r6, [pc, #184]	; (1100 <sd_mmc_check+0x39c>)
    1046:	a805      	add	r0, sp, #20
    1048:	47b0      	blx	r6
    104a:	2800      	cmp	r0, #0
    104c:	d100      	bne.n	1050 <sd_mmc_check+0x2ec>
    104e:	e6a9      	b.n	da4 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1050:	3501      	adds	r5, #1
    1052:	b2ad      	uxth	r5, r5
    1054:	2d32      	cmp	r5, #50	; 0x32
    1056:	d1f6      	bne.n	1046 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1058:	4b12      	ldr	r3, [pc, #72]	; (10a4 <sd_mmc_check+0x340>)
    105a:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    105c:	7e8a      	ldrb	r2, [r1, #26]
    105e:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    1060:	7e4b      	ldrb	r3, [r1, #25]
    1062:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1064:	7e09      	ldrb	r1, [r1, #24]
    1066:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1068:	430b      	orrs	r3, r1
    106a:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    106c:	051b      	lsls	r3, r3, #20
    106e:	0d1b      	lsrs	r3, r3, #20
    1070:	4a21      	ldr	r2, [pc, #132]	; (10f8 <sd_mmc_check+0x394>)
    1072:	4293      	cmp	r3, r2
    1074:	d154      	bne.n	1120 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    1076:	4e22      	ldr	r6, [pc, #136]	; (1100 <sd_mmc_check+0x39c>)
    1078:	a806      	add	r0, sp, #24
    107a:	47b0      	blx	r6
    107c:	2800      	cmp	r0, #0
    107e:	d100      	bne.n	1082 <sd_mmc_check+0x31e>
    1080:	e690      	b.n	da4 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1082:	3501      	adds	r5, #1
    1084:	b2ad      	uxth	r5, r5
    1086:	2d35      	cmp	r5, #53	; 0x35
    1088:	d9f6      	bls.n	1078 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    108a:	4b06      	ldr	r3, [pc, #24]	; (10a4 <sd_mmc_check+0x340>)
    108c:	681a      	ldr	r2, [r3, #0]
    108e:	9b06      	ldr	r3, [sp, #24]
    1090:	085b      	lsrs	r3, r3, #1
    1092:	6053      	str	r3, [r2, #4]
    1094:	e044      	b.n	1120 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    1096:	2314      	movs	r3, #20
    1098:	7413      	strb	r3, [r2, #16]
    109a:	e797      	b.n	fcc <sd_mmc_check+0x268>
    109c:	00000b59 	.word	0x00000b59
    10a0:	00000d29 	.word	0x00000d29
    10a4:	200001ac 	.word	0x200001ac
    10a8:	000082dd 	.word	0x000082dd
    10ac:	000084a5 	.word	0x000084a5
    10b0:	00005508 	.word	0x00005508
    10b4:	00001110 	.word	0x00001110
    10b8:	00000ca5 	.word	0x00000ca5
    10bc:	00000b2d 	.word	0x00000b2d
    10c0:	000084bd 	.word	0x000084bd
    10c4:	0000053a 	.word	0x0000053a
    10c8:	00001bef 	.word	0x00001bef
    10cc:	00001101 	.word	0x00001101
    10d0:	0000113b 	.word	0x0000113b
    10d4:	00000cdd 	.word	0x00000cdd
    10d8:	0000a810 	.word	0x0000a810
    10dc:	0000a82c 	.word	0x0000a82c
    10e0:	00001137 	.word	0x00001137
    10e4:	00081133 	.word	0x00081133
    10e8:	00008315 	.word	0x00008315
    10ec:	00008541 	.word	0x00008541
    10f0:	000085cd 	.word	0x000085cd
    10f4:	0000a7d0 	.word	0x0000a7d0
    10f8:	00000fff 	.word	0x00000fff
    10fc:	00081108 	.word	0x00081108
    1100:	000084c9 	.word	0x000084c9
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    1104:	2322      	movs	r3, #34	; 0x22
    1106:	7413      	strb	r3, [r2, #16]
    1108:	e760      	b.n	fcc <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    110a:	2330      	movs	r3, #48	; 0x30
    110c:	7413      	strb	r3, [r2, #16]
    110e:	e75d      	b.n	fcc <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    1110:	a806      	add	r0, sp, #24
    1112:	4b36      	ldr	r3, [pc, #216]	; (11ec <sd_mmc_check+0x488>)
    1114:	4798      	blx	r3
    1116:	2800      	cmp	r0, #0
    1118:	d100      	bne.n	111c <sd_mmc_check+0x3b8>
    111a:	e643      	b.n	da4 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    111c:	3501      	adds	r5, #1
    111e:	b2ad      	uxth	r5, r5
    1120:	2d7f      	cmp	r5, #127	; 0x7f
    1122:	d9f5      	bls.n	1110 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1124:	2180      	movs	r1, #128	; 0x80
    1126:	0089      	lsls	r1, r1, #2
    1128:	4831      	ldr	r0, [pc, #196]	; (11f0 <sd_mmc_check+0x48c>)
    112a:	4b32      	ldr	r3, [pc, #200]	; (11f4 <sd_mmc_check+0x490>)
    112c:	4798      	blx	r3
    112e:	2800      	cmp	r0, #0
    1130:	d100      	bne.n	1134 <sd_mmc_check+0x3d0>
    1132:	e637      	b.n	da4 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    1134:	4b30      	ldr	r3, [pc, #192]	; (11f8 <sd_mmc_check+0x494>)
    1136:	4798      	blx	r3
    1138:	2800      	cmp	r0, #0
    113a:	d100      	bne.n	113e <sd_mmc_check+0x3da>
    113c:	e632      	b.n	da4 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    113e:	4b2f      	ldr	r3, [pc, #188]	; (11fc <sd_mmc_check+0x498>)
    1140:	4798      	blx	r3
    1142:	e65e      	b.n	e02 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    1144:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    1146:	7e93      	ldrb	r3, [r2, #26]
    1148:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    114a:	7e51      	ldrb	r1, [r2, #25]
    114c:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    114e:	430b      	orrs	r3, r1
    1150:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    1152:	029b      	lsls	r3, r3, #10
				* 512;
    1154:	085b      	lsrs	r3, r3, #1
    1156:	2180      	movs	r1, #128	; 0x80
    1158:	0089      	lsls	r1, r1, #2
    115a:	468c      	mov	ip, r1
    115c:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    115e:	6053      	str	r3, [r2, #4]
    1160:	e6cd      	b.n	efe <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1162:	4b27      	ldr	r3, [pc, #156]	; (1200 <sd_mmc_check+0x49c>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	2210      	movs	r2, #16
    1168:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    116a:	4b25      	ldr	r3, [pc, #148]	; (1200 <sd_mmc_check+0x49c>)
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	7bdb      	ldrb	r3, [r3, #15]
    1170:	2209      	movs	r2, #9
    1172:	4013      	ands	r3, r2
    1174:	2b01      	cmp	r3, #1
    1176:	d000      	beq.n	117a <sd_mmc_check+0x416>
    1178:	e638      	b.n	dec <sd_mmc_check+0x88>
    117a:	e630      	b.n	dde <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    117c:	4b20      	ldr	r3, [pc, #128]	; (1200 <sd_mmc_check+0x49c>)
    117e:	681b      	ldr	r3, [r3, #0]
    1180:	221a      	movs	r2, #26
    1182:	741a      	strb	r2, [r3, #16]
    1184:	e7f1      	b.n	116a <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    1186:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1188:	789b      	ldrb	r3, [r3, #2]
    118a:	09db      	lsrs	r3, r3, #7
    118c:	2b01      	cmp	r3, #1
    118e:	d104      	bne.n	119a <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1190:	4b1b      	ldr	r3, [pc, #108]	; (1200 <sd_mmc_check+0x49c>)
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	2230      	movs	r2, #48	; 0x30
    1196:	741a      	strb	r2, [r3, #16]
    1198:	e7e7      	b.n	116a <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    119a:	4b19      	ldr	r3, [pc, #100]	; (1200 <sd_mmc_check+0x49c>)
    119c:	681b      	ldr	r3, [r3, #0]
    119e:	2220      	movs	r2, #32
    11a0:	741a      	strb	r2, [r3, #16]
    11a2:	e7e2      	b.n	116a <sd_mmc_check+0x406>
	*v2 = 0;
    11a4:	2600      	movs	r6, #0
    11a6:	e60d      	b.n	dc4 <sd_mmc_check+0x60>
    11a8:	1e73      	subs	r3, r6, #1
    11aa:	419e      	sbcs	r6, r3
    11ac:	07b3      	lsls	r3, r6, #30
    11ae:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    11b0:	4d14      	ldr	r5, [pc, #80]	; (1204 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    11b2:	4f10      	ldr	r7, [pc, #64]	; (11f4 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    11b4:	46b8      	mov	r8, r7
		resp = driver_get_response();
    11b6:	4e14      	ldr	r6, [pc, #80]	; (1208 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    11b8:	2100      	movs	r1, #0
    11ba:	4814      	ldr	r0, [pc, #80]	; (120c <sd_mmc_check+0x4a8>)
    11bc:	47b8      	blx	r7
    11be:	2800      	cmp	r0, #0
    11c0:	d100      	bne.n	11c4 <sd_mmc_check+0x460>
    11c2:	e638      	b.n	e36 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    11c4:	9903      	ldr	r1, [sp, #12]
    11c6:	4812      	ldr	r0, [pc, #72]	; (1210 <sd_mmc_check+0x4ac>)
    11c8:	47c0      	blx	r8
    11ca:	2800      	cmp	r0, #0
    11cc:	d100      	bne.n	11d0 <sd_mmc_check+0x46c>
    11ce:	e632      	b.n	e36 <sd_mmc_check+0xd2>
		resp = driver_get_response();
    11d0:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    11d2:	07c3      	lsls	r3, r0, #31
    11d4:	d400      	bmi.n	11d8 <sd_mmc_check+0x474>
    11d6:	e628      	b.n	e2a <sd_mmc_check+0xc6>
    11d8:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    11da:	2d00      	cmp	r5, #0
    11dc:	d1ec      	bne.n	11b8 <sd_mmc_check+0x454>
    11de:	e62a      	b.n	e36 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    11e0:	2209      	movs	r2, #9
    11e2:	4013      	ands	r3, r2
    11e4:	2b01      	cmp	r3, #1
    11e6:	d000      	beq.n	11ea <sd_mmc_check+0x486>
    11e8:	e609      	b.n	dfe <sd_mmc_check+0x9a>
    11ea:	e5f8      	b.n	dde <sd_mmc_check+0x7a>
    11ec:	000084c9 	.word	0x000084c9
    11f0:	00001110 	.word	0x00001110
    11f4:	000084a5 	.word	0x000084a5
    11f8:	00000ca5 	.word	0x00000ca5
    11fc:	00000b2d 	.word	0x00000b2d
    1200:	200001ac 	.word	0x200001ac
    1204:	00001bef 	.word	0x00001bef
    1208:	000084bd 	.word	0x000084bd
    120c:	00001137 	.word	0x00001137
    1210:	00001129 	.word	0x00001129

00001214 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1214:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1216:	4b06      	ldr	r3, [pc, #24]	; (1230 <sd_mmc_get_type+0x1c>)
    1218:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    121a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    121c:	2800      	cmp	r0, #0
    121e:	d001      	beq.n	1224 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    1220:	0018      	movs	r0, r3
    1222:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1224:	4b03      	ldr	r3, [pc, #12]	; (1234 <sd_mmc_get_type+0x20>)
    1226:	4798      	blx	r3
	return sd_mmc_card->type;
    1228:	4b03      	ldr	r3, [pc, #12]	; (1238 <sd_mmc_get_type+0x24>)
    122a:	681b      	ldr	r3, [r3, #0]
    122c:	7bdb      	ldrb	r3, [r3, #15]
    122e:	e7f7      	b.n	1220 <sd_mmc_get_type+0xc>
    1230:	00000b59 	.word	0x00000b59
    1234:	00000d29 	.word	0x00000d29
    1238:	200001ac 	.word	0x200001ac

0000123c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    123c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    123e:	4b06      	ldr	r3, [pc, #24]	; (1258 <sd_mmc_get_capacity+0x1c>)
    1240:	4798      	blx	r3
		return 0;
    1242:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1244:	2800      	cmp	r0, #0
    1246:	d001      	beq.n	124c <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    1248:	0018      	movs	r0, r3
    124a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    124c:	4b03      	ldr	r3, [pc, #12]	; (125c <sd_mmc_get_capacity+0x20>)
    124e:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1250:	4b03      	ldr	r3, [pc, #12]	; (1260 <sd_mmc_get_capacity+0x24>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	685b      	ldr	r3, [r3, #4]
    1256:	e7f7      	b.n	1248 <sd_mmc_get_capacity+0xc>
    1258:	00000b59 	.word	0x00000b59
    125c:	00000d29 	.word	0x00000d29
    1260:	200001ac 	.word	0x200001ac

00001264 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    1264:	2000      	movs	r0, #0
    1266:	4770      	bx	lr

00001268 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1268:	b570      	push	{r4, r5, r6, lr}
    126a:	b082      	sub	sp, #8
    126c:	000e      	movs	r6, r1
    126e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1270:	4b16      	ldr	r3, [pc, #88]	; (12cc <sd_mmc_init_read_blocks+0x64>)
    1272:	4798      	blx	r3
    1274:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    1276:	d002      	beq.n	127e <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    1278:	0020      	movs	r0, r4
    127a:	b002      	add	sp, #8
    127c:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    127e:	4b14      	ldr	r3, [pc, #80]	; (12d0 <sd_mmc_init_read_blocks+0x68>)
    1280:	4798      	blx	r3
    1282:	2800      	cmp	r0, #0
    1284:	d017      	beq.n	12b6 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    1286:	2d01      	cmp	r5, #1
    1288:	d919      	bls.n	12be <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    128a:	4812      	ldr	r0, [pc, #72]	; (12d4 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    128c:	4b12      	ldr	r3, [pc, #72]	; (12d8 <sd_mmc_init_read_blocks+0x70>)
    128e:	681b      	ldr	r3, [r3, #0]
    1290:	7bdb      	ldrb	r3, [r3, #15]
    1292:	071b      	lsls	r3, r3, #28
    1294:	d400      	bmi.n	1298 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    1296:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1298:	2301      	movs	r3, #1
    129a:	9300      	str	r3, [sp, #0]
    129c:	002b      	movs	r3, r5
    129e:	2280      	movs	r2, #128	; 0x80
    12a0:	0092      	lsls	r2, r2, #2
    12a2:	0031      	movs	r1, r6
    12a4:	4e0d      	ldr	r6, [pc, #52]	; (12dc <sd_mmc_init_read_blocks+0x74>)
    12a6:	47b0      	blx	r6
    12a8:	2800      	cmp	r0, #0
    12aa:	d00a      	beq.n	12c2 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    12ac:	4b0c      	ldr	r3, [pc, #48]	; (12e0 <sd_mmc_init_read_blocks+0x78>)
    12ae:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    12b0:	4b0c      	ldr	r3, [pc, #48]	; (12e4 <sd_mmc_init_read_blocks+0x7c>)
    12b2:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    12b4:	e7e0      	b.n	1278 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    12b6:	4b0c      	ldr	r3, [pc, #48]	; (12e8 <sd_mmc_init_read_blocks+0x80>)
    12b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    12ba:	3405      	adds	r4, #5
    12bc:	e7dc      	b.n	1278 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    12be:	480b      	ldr	r0, [pc, #44]	; (12ec <sd_mmc_init_read_blocks+0x84>)
    12c0:	e7e4      	b.n	128c <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    12c2:	4b09      	ldr	r3, [pc, #36]	; (12e8 <sd_mmc_init_read_blocks+0x80>)
    12c4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    12c6:	2405      	movs	r4, #5
    12c8:	e7d6      	b.n	1278 <sd_mmc_init_read_blocks+0x10>
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	00000b59 	.word	0x00000b59
    12d0:	00000ca5 	.word	0x00000ca5
    12d4:	00101112 	.word	0x00101112
    12d8:	200001ac 	.word	0x200001ac
    12dc:	00008315 	.word	0x00008315
    12e0:	200001b0 	.word	0x200001b0
    12e4:	200001b2 	.word	0x200001b2
    12e8:	00000d29 	.word	0x00000d29
    12ec:	00081111 	.word	0x00081111

000012f0 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    12f0:	b510      	push	{r4, lr}
    12f2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    12f4:	4b07      	ldr	r3, [pc, #28]	; (1314 <sd_mmc_start_read_blocks+0x24>)
    12f6:	4798      	blx	r3
    12f8:	2800      	cmp	r0, #0
    12fa:	d104      	bne.n	1306 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    12fc:	2200      	movs	r2, #0
    12fe:	4b06      	ldr	r3, [pc, #24]	; (1318 <sd_mmc_start_read_blocks+0x28>)
    1300:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1302:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1304:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1306:	4a04      	ldr	r2, [pc, #16]	; (1318 <sd_mmc_start_read_blocks+0x28>)
    1308:	8813      	ldrh	r3, [r2, #0]
    130a:	1b1c      	subs	r4, r3, r4
    130c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    130e:	2000      	movs	r0, #0
    1310:	e7f8      	b.n	1304 <sd_mmc_start_read_blocks+0x14>
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	00008541 	.word	0x00008541
    1318:	200001b0 	.word	0x200001b0

0000131c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    131c:	b510      	push	{r4, lr}
    131e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    1320:	4b14      	ldr	r3, [pc, #80]	; (1374 <sd_mmc_wait_end_of_read_blocks+0x58>)
    1322:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1324:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    1326:	2800      	cmp	r0, #0
    1328:	d101      	bne.n	132e <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    132a:	0018      	movs	r0, r3
    132c:	bd10      	pop	{r4, pc}
	if (abort) {
    132e:	2c00      	cmp	r4, #0
    1330:	d010      	beq.n	1354 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    1332:	2200      	movs	r2, #0
    1334:	4b10      	ldr	r3, [pc, #64]	; (1378 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1336:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1338:	4b10      	ldr	r3, [pc, #64]	; (137c <sd_mmc_wait_end_of_read_blocks+0x60>)
    133a:	881b      	ldrh	r3, [r3, #0]
    133c:	2b01      	cmp	r3, #1
    133e:	d00f      	beq.n	1360 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1340:	2100      	movs	r1, #0
    1342:	480f      	ldr	r0, [pc, #60]	; (1380 <sd_mmc_wait_end_of_read_blocks+0x64>)
    1344:	4b0f      	ldr	r3, [pc, #60]	; (1384 <sd_mmc_wait_end_of_read_blocks+0x68>)
    1346:	4798      	blx	r3
    1348:	2800      	cmp	r0, #0
    134a:	d00d      	beq.n	1368 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    134c:	4b0e      	ldr	r3, [pc, #56]	; (1388 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    134e:	4798      	blx	r3
	return SD_MMC_OK;
    1350:	2300      	movs	r3, #0
    1352:	e7ea      	b.n	132a <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1354:	4b08      	ldr	r3, [pc, #32]	; (1378 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1356:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1358:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    135a:	2a00      	cmp	r2, #0
    135c:	d0ec      	beq.n	1338 <sd_mmc_wait_end_of_read_blocks+0x1c>
    135e:	e7e4      	b.n	132a <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    1360:	4b09      	ldr	r3, [pc, #36]	; (1388 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1362:	4798      	blx	r3
		return SD_MMC_OK;
    1364:	2300      	movs	r3, #0
    1366:	e7e0      	b.n	132a <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1368:	2100      	movs	r1, #0
    136a:	4805      	ldr	r0, [pc, #20]	; (1380 <sd_mmc_wait_end_of_read_blocks+0x64>)
    136c:	4b05      	ldr	r3, [pc, #20]	; (1384 <sd_mmc_wait_end_of_read_blocks+0x68>)
    136e:	4798      	blx	r3
    1370:	e7ec      	b.n	134c <sd_mmc_wait_end_of_read_blocks+0x30>
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	000085cd 	.word	0x000085cd
    1378:	200001b0 	.word	0x200001b0
    137c:	200001b2 	.word	0x200001b2
    1380:	0000310c 	.word	0x0000310c
    1384:	000084a5 	.word	0x000084a5
    1388:	00000d29 	.word	0x00000d29

0000138c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    138c:	b570      	push	{r4, r5, r6, lr}
    138e:	b082      	sub	sp, #8
    1390:	000e      	movs	r6, r1
    1392:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1394:	4b11      	ldr	r3, [pc, #68]	; (13dc <sd_mmc_init_write_blocks+0x50>)
    1396:	4798      	blx	r3
    1398:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    139a:	d116      	bne.n	13ca <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    139c:	2d01      	cmp	r5, #1
    139e:	d917      	bls.n	13d0 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    13a0:	480f      	ldr	r0, [pc, #60]	; (13e0 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    13a2:	4b10      	ldr	r3, [pc, #64]	; (13e4 <sd_mmc_init_write_blocks+0x58>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	7bdb      	ldrb	r3, [r3, #15]
    13a8:	071b      	lsls	r3, r3, #28
    13aa:	d400      	bmi.n	13ae <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    13ac:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    13ae:	2301      	movs	r3, #1
    13b0:	9300      	str	r3, [sp, #0]
    13b2:	002b      	movs	r3, r5
    13b4:	2280      	movs	r2, #128	; 0x80
    13b6:	0092      	lsls	r2, r2, #2
    13b8:	0031      	movs	r1, r6
    13ba:	4e0b      	ldr	r6, [pc, #44]	; (13e8 <sd_mmc_init_write_blocks+0x5c>)
    13bc:	47b0      	blx	r6
    13be:	2800      	cmp	r0, #0
    13c0:	d008      	beq.n	13d4 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    13c2:	4b0a      	ldr	r3, [pc, #40]	; (13ec <sd_mmc_init_write_blocks+0x60>)
    13c4:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    13c6:	4b0a      	ldr	r3, [pc, #40]	; (13f0 <sd_mmc_init_write_blocks+0x64>)
    13c8:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    13ca:	0020      	movs	r0, r4
    13cc:	b002      	add	sp, #8
    13ce:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    13d0:	4808      	ldr	r0, [pc, #32]	; (13f4 <sd_mmc_init_write_blocks+0x68>)
    13d2:	e7e6      	b.n	13a2 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    13d4:	4b08      	ldr	r3, [pc, #32]	; (13f8 <sd_mmc_init_write_blocks+0x6c>)
    13d6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    13d8:	2405      	movs	r4, #5
    13da:	e7f6      	b.n	13ca <sd_mmc_init_write_blocks+0x3e>
    13dc:	00000b59 	.word	0x00000b59
    13e0:	00109119 	.word	0x00109119
    13e4:	200001ac 	.word	0x200001ac
    13e8:	00008315 	.word	0x00008315
    13ec:	200001b0 	.word	0x200001b0
    13f0:	200001b2 	.word	0x200001b2
    13f4:	00089118 	.word	0x00089118
    13f8:	00000d29 	.word	0x00000d29

000013fc <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    13fc:	b510      	push	{r4, lr}
    13fe:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1400:	4b07      	ldr	r3, [pc, #28]	; (1420 <sd_mmc_start_write_blocks+0x24>)
    1402:	4798      	blx	r3
    1404:	2800      	cmp	r0, #0
    1406:	d104      	bne.n	1412 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1408:	2200      	movs	r2, #0
    140a:	4b06      	ldr	r3, [pc, #24]	; (1424 <sd_mmc_start_write_blocks+0x28>)
    140c:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    140e:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1410:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1412:	4a04      	ldr	r2, [pc, #16]	; (1424 <sd_mmc_start_write_blocks+0x28>)
    1414:	8813      	ldrh	r3, [r2, #0]
    1416:	1b1c      	subs	r4, r3, r4
    1418:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    141a:	2000      	movs	r0, #0
    141c:	e7f8      	b.n	1410 <sd_mmc_start_write_blocks+0x14>
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	000085d1 	.word	0x000085d1
    1424:	200001b0 	.word	0x200001b0

00001428 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1428:	b510      	push	{r4, lr}
    142a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    142c:	4b0e      	ldr	r3, [pc, #56]	; (1468 <sd_mmc_wait_end_of_write_blocks+0x40>)
    142e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1430:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    1432:	2800      	cmp	r0, #0
    1434:	d101      	bne.n	143a <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1436:	0018      	movs	r0, r3
    1438:	bd10      	pop	{r4, pc}
	if (abort) {
    143a:	2c00      	cmp	r4, #0
    143c:	d00a      	beq.n	1454 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    143e:	2200      	movs	r2, #0
    1440:	4b0a      	ldr	r3, [pc, #40]	; (146c <sd_mmc_wait_end_of_write_blocks+0x44>)
    1442:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1444:	4b0a      	ldr	r3, [pc, #40]	; (1470 <sd_mmc_wait_end_of_write_blocks+0x48>)
    1446:	881b      	ldrh	r3, [r3, #0]
    1448:	2b01      	cmp	r3, #1
    144a:	d009      	beq.n	1460 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    144c:	4b09      	ldr	r3, [pc, #36]	; (1474 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    144e:	4798      	blx	r3
	return SD_MMC_OK;
    1450:	2300      	movs	r3, #0
    1452:	e7f0      	b.n	1436 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1454:	4b05      	ldr	r3, [pc, #20]	; (146c <sd_mmc_wait_end_of_write_blocks+0x44>)
    1456:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1458:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    145a:	2a00      	cmp	r2, #0
    145c:	d0f2      	beq.n	1444 <sd_mmc_wait_end_of_write_blocks+0x1c>
    145e:	e7ea      	b.n	1436 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1460:	4b04      	ldr	r3, [pc, #16]	; (1474 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1462:	4798      	blx	r3
		return SD_MMC_OK;
    1464:	2300      	movs	r3, #0
    1466:	e7e6      	b.n	1436 <sd_mmc_wait_end_of_write_blocks+0xe>
    1468:	00008651 	.word	0x00008651
    146c:	200001b0 	.word	0x200001b0
    1470:	200001b2 	.word	0x200001b2
    1474:	00000d29 	.word	0x00000d29

00001478 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    1478:	2000      	movs	r0, #0
    147a:	4770      	bx	lr

0000147c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    147c:	1e43      	subs	r3, r0, #1
    147e:	4198      	sbcs	r0, r3
    1480:	b2c0      	uxtb	r0, r0
    1482:	4b03      	ldr	r3, [pc, #12]	; (1490 <udi_msc_trans_ack+0x14>)
    1484:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
    1486:	2201      	movs	r2, #1
    1488:	4b02      	ldr	r3, [pc, #8]	; (1494 <udi_msc_trans_ack+0x18>)
    148a:	701a      	strb	r2, [r3, #0]
}
    148c:	4770      	bx	lr
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	20000404 	.word	0x20000404
    1494:	20000070 	.word	0x20000070

00001498 <udi_msc_cbw_wait>:
{
    1498:	b510      	push	{r4, lr}
    149a:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    149c:	4b08      	ldr	r3, [pc, #32]	; (14c0 <udi_msc_cbw_wait+0x28>)
    149e:	9300      	str	r3, [sp, #0]
    14a0:	231f      	movs	r3, #31
    14a2:	4a08      	ldr	r2, [pc, #32]	; (14c4 <udi_msc_cbw_wait+0x2c>)
    14a4:	2101      	movs	r1, #1
    14a6:	2002      	movs	r0, #2
    14a8:	4c07      	ldr	r4, [pc, #28]	; (14c8 <udi_msc_cbw_wait+0x30>)
    14aa:	47a0      	blx	r4
    14ac:	2800      	cmp	r0, #0
    14ae:	d001      	beq.n	14b4 <udi_msc_cbw_wait+0x1c>
}
    14b0:	b002      	add	sp, #8
    14b2:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    14b4:	4905      	ldr	r1, [pc, #20]	; (14cc <udi_msc_cbw_wait+0x34>)
    14b6:	3002      	adds	r0, #2
    14b8:	4b05      	ldr	r3, [pc, #20]	; (14d0 <udi_msc_cbw_wait+0x38>)
    14ba:	4798      	blx	r3
}
    14bc:	e7f8      	b.n	14b0 <udi_msc_cbw_wait+0x18>
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	000018bd 	.word	0x000018bd
    14c4:	200001dc 	.word	0x200001dc
    14c8:	00003c39 	.word	0x00003c39
    14cc:	00001499 	.word	0x00001499
    14d0:	00003be1 	.word	0x00003be1

000014d4 <udi_msc_enable>:
{
    14d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    14d6:	2300      	movs	r3, #0
    14d8:	4a13      	ldr	r2, [pc, #76]	; (1528 <udi_msc_enable+0x54>)
    14da:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    14dc:	4a13      	ldr	r2, [pc, #76]	; (152c <udi_msc_enable+0x58>)
    14de:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    14e0:	3301      	adds	r3, #1
    14e2:	4a13      	ldr	r2, [pc, #76]	; (1530 <udi_msc_enable+0x5c>)
    14e4:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    14e6:	4a13      	ldr	r2, [pc, #76]	; (1534 <udi_msc_enable+0x60>)
    14e8:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    14ea:	4b13      	ldr	r3, [pc, #76]	; (1538 <udi_msc_enable+0x64>)
    14ec:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    14ee:	2800      	cmp	r0, #0
    14f0:	d105      	bne.n	14fe <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    14f2:	2200      	movs	r2, #0
    14f4:	4b11      	ldr	r3, [pc, #68]	; (153c <udi_msc_enable+0x68>)
    14f6:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    14f8:	2500      	movs	r5, #0
}
    14fa:	0028      	movs	r0, r5
    14fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    14fe:	3801      	subs	r0, #1
    1500:	4b0e      	ldr	r3, [pc, #56]	; (153c <udi_msc_enable+0x68>)
    1502:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    1504:	4b0e      	ldr	r3, [pc, #56]	; (1540 <udi_msc_enable+0x6c>)
    1506:	4798      	blx	r3
    1508:	1e05      	subs	r5, r0, #0
    150a:	d0f6      	beq.n	14fa <udi_msc_enable+0x26>
    150c:	2400      	movs	r4, #0
		mem_unload(lun, false);
    150e:	4f0d      	ldr	r7, [pc, #52]	; (1544 <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1510:	4e0a      	ldr	r6, [pc, #40]	; (153c <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    1512:	2100      	movs	r1, #0
    1514:	0020      	movs	r0, r4
    1516:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1518:	3401      	adds	r4, #1
    151a:	b2e4      	uxtb	r4, r4
    151c:	7833      	ldrb	r3, [r6, #0]
    151e:	42a3      	cmp	r3, r4
    1520:	d2f7      	bcs.n	1512 <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    1522:	4b09      	ldr	r3, [pc, #36]	; (1548 <udi_msc_enable+0x74>)
    1524:	4798      	blx	r3
	return true;
    1526:	e7e8      	b.n	14fa <udi_msc_enable+0x26>
    1528:	200001d2 	.word	0x200001d2
    152c:	200001d0 	.word	0x200001d0
    1530:	20000070 	.word	0x20000070
    1534:	20000071 	.word	0x20000071
    1538:	00008675 	.word	0x00008675
    153c:	20000200 	.word	0x20000200
    1540:	00005d55 	.word	0x00005d55
    1544:	000086b5 	.word	0x000086b5
    1548:	00001499 	.word	0x00001499

0000154c <udi_msc_csw_sent>:
{
    154c:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
    154e:	4b01      	ldr	r3, [pc, #4]	; (1554 <udi_msc_csw_sent+0x8>)
    1550:	4798      	blx	r3
}
    1552:	bd10      	pop	{r4, pc}
    1554:	00001499 	.word	0x00001499

00001558 <udi_msc_csw_send>:
{
    1558:	b510      	push	{r4, lr}
    155a:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    155c:	4b08      	ldr	r3, [pc, #32]	; (1580 <udi_msc_csw_send+0x28>)
    155e:	9300      	str	r3, [sp, #0]
    1560:	230d      	movs	r3, #13
    1562:	4a08      	ldr	r2, [pc, #32]	; (1584 <udi_msc_csw_send+0x2c>)
    1564:	2100      	movs	r1, #0
    1566:	2081      	movs	r0, #129	; 0x81
    1568:	4c07      	ldr	r4, [pc, #28]	; (1588 <udi_msc_csw_send+0x30>)
    156a:	47a0      	blx	r4
    156c:	2800      	cmp	r0, #0
    156e:	d001      	beq.n	1574 <udi_msc_csw_send+0x1c>
}
    1570:	b002      	add	sp, #8
    1572:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    1574:	4905      	ldr	r1, [pc, #20]	; (158c <udi_msc_csw_send+0x34>)
    1576:	3081      	adds	r0, #129	; 0x81
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <udi_msc_csw_send+0x38>)
    157a:	4798      	blx	r3
}
    157c:	e7f8      	b.n	1570 <udi_msc_csw_send+0x18>
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	0000154d 	.word	0x0000154d
    1584:	20000074 	.word	0x20000074
    1588:	00003c39 	.word	0x00003c39
    158c:	00001559 	.word	0x00001559
    1590:	00003be1 	.word	0x00003be1

00001594 <udi_msc_cbw_invalid>:
{
    1594:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    1596:	4b06      	ldr	r3, [pc, #24]	; (15b0 <udi_msc_cbw_invalid+0x1c>)
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	2b00      	cmp	r3, #0
    159c:	d100      	bne.n	15a0 <udi_msc_cbw_invalid+0xc>
}
    159e:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    15a0:	2002      	movs	r0, #2
    15a2:	4b04      	ldr	r3, [pc, #16]	; (15b4 <udi_msc_cbw_invalid+0x20>)
    15a4:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    15a6:	4904      	ldr	r1, [pc, #16]	; (15b8 <udi_msc_cbw_invalid+0x24>)
    15a8:	2002      	movs	r0, #2
    15aa:	4b04      	ldr	r3, [pc, #16]	; (15bc <udi_msc_cbw_invalid+0x28>)
    15ac:	4798      	blx	r3
    15ae:	e7f6      	b.n	159e <udi_msc_cbw_invalid+0xa>
    15b0:	200001d0 	.word	0x200001d0
    15b4:	00003a6d 	.word	0x00003a6d
    15b8:	00001595 	.word	0x00001595
    15bc:	00003be1 	.word	0x00003be1

000015c0 <udi_msc_csw_invalid>:
{
    15c0:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    15c2:	4b06      	ldr	r3, [pc, #24]	; (15dc <udi_msc_csw_invalid+0x1c>)
    15c4:	781b      	ldrb	r3, [r3, #0]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d100      	bne.n	15cc <udi_msc_csw_invalid+0xc>
}
    15ca:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    15cc:	2081      	movs	r0, #129	; 0x81
    15ce:	4b04      	ldr	r3, [pc, #16]	; (15e0 <udi_msc_csw_invalid+0x20>)
    15d0:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    15d2:	4904      	ldr	r1, [pc, #16]	; (15e4 <udi_msc_csw_invalid+0x24>)
    15d4:	2081      	movs	r0, #129	; 0x81
    15d6:	4b04      	ldr	r3, [pc, #16]	; (15e8 <udi_msc_csw_invalid+0x28>)
    15d8:	4798      	blx	r3
    15da:	e7f6      	b.n	15ca <udi_msc_csw_invalid+0xa>
    15dc:	200001d0 	.word	0x200001d0
    15e0:	00003a6d 	.word	0x00003a6d
    15e4:	000015c1 	.word	0x000015c1
    15e8:	00003be1 	.word	0x00003be1

000015ec <udi_msc_csw_process>:
{
    15ec:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    15ee:	4b0b      	ldr	r3, [pc, #44]	; (161c <udi_msc_csw_process+0x30>)
    15f0:	689b      	ldr	r3, [r3, #8]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d006      	beq.n	1604 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <udi_msc_csw_process+0x34>)
    15f8:	7b1b      	ldrb	r3, [r3, #12]
    15fa:	2b7f      	cmp	r3, #127	; 0x7f
    15fc:	d809      	bhi.n	1612 <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    15fe:	2002      	movs	r0, #2
    1600:	4b08      	ldr	r3, [pc, #32]	; (1624 <udi_msc_csw_process+0x38>)
    1602:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    1604:	4b06      	ldr	r3, [pc, #24]	; (1620 <udi_msc_csw_process+0x34>)
    1606:	685a      	ldr	r2, [r3, #4]
    1608:	4b04      	ldr	r3, [pc, #16]	; (161c <udi_msc_csw_process+0x30>)
    160a:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    160c:	4b06      	ldr	r3, [pc, #24]	; (1628 <udi_msc_csw_process+0x3c>)
    160e:	4798      	blx	r3
}
    1610:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    1612:	2081      	movs	r0, #129	; 0x81
    1614:	4b03      	ldr	r3, [pc, #12]	; (1624 <udi_msc_csw_process+0x38>)
    1616:	4798      	blx	r3
    1618:	e7f4      	b.n	1604 <udi_msc_csw_process+0x18>
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	20000074 	.word	0x20000074
    1620:	200001dc 	.word	0x200001dc
    1624:	00003a6d 	.word	0x00003a6d
    1628:	00001559 	.word	0x00001559

0000162c <udi_msc_clear_sense>:
{
    162c:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    162e:	4c05      	ldr	r4, [pc, #20]	; (1644 <udi_msc_clear_sense+0x18>)
    1630:	2212      	movs	r2, #18
    1632:	2100      	movs	r1, #0
    1634:	0020      	movs	r0, r4
    1636:	4b04      	ldr	r3, [pc, #16]	; (1648 <udi_msc_clear_sense+0x1c>)
    1638:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    163a:	23f0      	movs	r3, #240	; 0xf0
    163c:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    163e:	3be6      	subs	r3, #230	; 0xe6
    1640:	71e3      	strb	r3, [r4, #7]
}
    1642:	bd10      	pop	{r4, pc}
    1644:	20000204 	.word	0x20000204
    1648:	00009343 	.word	0x00009343

0000164c <udi_msc_sense_fail>:
{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	0006      	movs	r6, r0
    1650:	000d      	movs	r5, r1
    1652:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    1654:	4b08      	ldr	r3, [pc, #32]	; (1678 <udi_msc_sense_fail+0x2c>)
    1656:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    1658:	2201      	movs	r2, #1
    165a:	4b08      	ldr	r3, [pc, #32]	; (167c <udi_msc_sense_fail+0x30>)
    165c:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    165e:	4b08      	ldr	r3, [pc, #32]	; (1680 <udi_msc_sense_fail+0x34>)
    1660:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    1662:	0e22      	lsrs	r2, r4, #24
    1664:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    1666:	0c22      	lsrs	r2, r4, #16
    1668:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    166a:	0a22      	lsrs	r2, r4, #8
    166c:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    166e:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    1670:	0a2a      	lsrs	r2, r5, #8
    1672:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    1674:	735d      	strb	r5, [r3, #13]
}
    1676:	bd70      	pop	{r4, r5, r6, pc}
    1678:	0000162d 	.word	0x0000162d
    167c:	20000074 	.word	0x20000074
    1680:	20000204 	.word	0x20000204

00001684 <udi_msc_sense_fail_cdb_invalid>:
{
    1684:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1686:	2200      	movs	r2, #0
    1688:	2190      	movs	r1, #144	; 0x90
    168a:	0189      	lsls	r1, r1, #6
    168c:	2005      	movs	r0, #5
    168e:	4b01      	ldr	r3, [pc, #4]	; (1694 <udi_msc_sense_fail_cdb_invalid+0x10>)
    1690:	4798      	blx	r3
}
    1692:	bd10      	pop	{r4, pc}
    1694:	0000164d 	.word	0x0000164d

00001698 <udi_msc_cbw_validate>:
{
    1698:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    169a:	4b09      	ldr	r3, [pc, #36]	; (16c0 <udi_msc_cbw_validate+0x28>)
    169c:	7b1b      	ldrb	r3, [r3, #12]
    169e:	4059      	eors	r1, r3
    16a0:	b249      	sxtb	r1, r1
    16a2:	2900      	cmp	r1, #0
    16a4:	db04      	blt.n	16b0 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    16a6:	4b07      	ldr	r3, [pc, #28]	; (16c4 <udi_msc_cbw_validate+0x2c>)
    16a8:	689a      	ldr	r2, [r3, #8]
	return true;
    16aa:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    16ac:	4282      	cmp	r2, r0
    16ae:	d204      	bcs.n	16ba <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    16b0:	4b05      	ldr	r3, [pc, #20]	; (16c8 <udi_msc_cbw_validate+0x30>)
    16b2:	4798      	blx	r3
		udi_msc_csw_process();
    16b4:	4b05      	ldr	r3, [pc, #20]	; (16cc <udi_msc_cbw_validate+0x34>)
    16b6:	4798      	blx	r3
		return false;
    16b8:	2300      	movs	r3, #0
}
    16ba:	0018      	movs	r0, r3
    16bc:	bd10      	pop	{r4, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	200001dc 	.word	0x200001dc
    16c4:	20000074 	.word	0x20000074
    16c8:	00001685 	.word	0x00001685
    16cc:	000015ed 	.word	0x000015ed

000016d0 <udi_msc_sense_fail_hardware>:
{
    16d0:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    16d2:	2200      	movs	r2, #0
    16d4:	2100      	movs	r1, #0
    16d6:	2004      	movs	r0, #4
    16d8:	4b01      	ldr	r3, [pc, #4]	; (16e0 <udi_msc_sense_fail_hardware+0x10>)
    16da:	4798      	blx	r3
}
    16dc:	bd10      	pop	{r4, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	0000164d 	.word	0x0000164d

000016e4 <udi_msc_data_send>:
{
    16e4:	b510      	push	{r4, lr}
    16e6:	b082      	sub	sp, #8
    16e8:	0002      	movs	r2, r0
    16ea:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    16ec:	4907      	ldr	r1, [pc, #28]	; (170c <udi_msc_data_send+0x28>)
    16ee:	9100      	str	r1, [sp, #0]
    16f0:	2101      	movs	r1, #1
    16f2:	2081      	movs	r0, #129	; 0x81
    16f4:	4c06      	ldr	r4, [pc, #24]	; (1710 <udi_msc_data_send+0x2c>)
    16f6:	47a0      	blx	r4
    16f8:	2800      	cmp	r0, #0
    16fa:	d001      	beq.n	1700 <udi_msc_data_send+0x1c>
}
    16fc:	b002      	add	sp, #8
    16fe:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1700:	4b04      	ldr	r3, [pc, #16]	; (1714 <udi_msc_data_send+0x30>)
    1702:	4798      	blx	r3
		udi_msc_csw_process();
    1704:	4b04      	ldr	r3, [pc, #16]	; (1718 <udi_msc_data_send+0x34>)
    1706:	4798      	blx	r3
}
    1708:	e7f8      	b.n	16fc <udi_msc_data_send+0x18>
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	0000175d 	.word	0x0000175d
    1710:	00003c39 	.word	0x00003c39
    1714:	000016d1 	.word	0x000016d1
    1718:	000015ed 	.word	0x000015ed

0000171c <udi_msc_sense_fail_busy_or_change>:
{
    171c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    171e:	2200      	movs	r2, #0
    1720:	21a0      	movs	r1, #160	; 0xa0
    1722:	0189      	lsls	r1, r1, #6
    1724:	2006      	movs	r0, #6
    1726:	4b01      	ldr	r3, [pc, #4]	; (172c <udi_msc_sense_fail_busy_or_change+0x10>)
    1728:	4798      	blx	r3
}
    172a:	bd10      	pop	{r4, pc}
    172c:	0000164d 	.word	0x0000164d

00001730 <udi_msc_sense_fail_not_present>:
{
    1730:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    1732:	2200      	movs	r2, #0
    1734:	21e8      	movs	r1, #232	; 0xe8
    1736:	0189      	lsls	r1, r1, #6
    1738:	2002      	movs	r0, #2
    173a:	4b01      	ldr	r3, [pc, #4]	; (1740 <udi_msc_sense_fail_not_present+0x10>)
    173c:	4798      	blx	r3
}
    173e:	bd10      	pop	{r4, pc}
    1740:	0000164d 	.word	0x0000164d

00001744 <udi_msc_sense_pass>:
{
    1744:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    1746:	4b03      	ldr	r3, [pc, #12]	; (1754 <udi_msc_sense_pass+0x10>)
    1748:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    174a:	2200      	movs	r2, #0
    174c:	4b02      	ldr	r3, [pc, #8]	; (1758 <udi_msc_sense_pass+0x14>)
    174e:	731a      	strb	r2, [r3, #12]
}
    1750:	bd10      	pop	{r4, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	0000162d 	.word	0x0000162d
    1758:	20000074 	.word	0x20000074

0000175c <udi_msc_data_sent>:
{
    175c:	b510      	push	{r4, lr}
    175e:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    1760:	2800      	cmp	r0, #0
    1762:	d000      	beq.n	1766 <udi_msc_data_sent+0xa>
}
    1764:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    1766:	4b04      	ldr	r3, [pc, #16]	; (1778 <udi_msc_data_sent+0x1c>)
    1768:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    176a:	4b04      	ldr	r3, [pc, #16]	; (177c <udi_msc_data_sent+0x20>)
    176c:	689a      	ldr	r2, [r3, #8]
    176e:	1b14      	subs	r4, r2, r4
    1770:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    1772:	4b03      	ldr	r3, [pc, #12]	; (1780 <udi_msc_data_sent+0x24>)
    1774:	4798      	blx	r3
    1776:	e7f5      	b.n	1764 <udi_msc_data_sent+0x8>
    1778:	00001745 	.word	0x00001745
    177c:	20000074 	.word	0x20000074
    1780:	000015ed 	.word	0x000015ed

00001784 <udi_msc_spc_mode_sense>:
{
    1784:	b570      	push	{r4, r5, r6, lr}
    1786:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    1788:	2214      	movs	r2, #20
    178a:	2100      	movs	r1, #0
    178c:	4823      	ldr	r0, [pc, #140]	; (181c <udi_msc_spc_mode_sense+0x98>)
    178e:	4b24      	ldr	r3, [pc, #144]	; (1820 <udi_msc_spc_mode_sense+0x9c>)
    1790:	4798      	blx	r3
	if (b_sense10) {
    1792:	2d00      	cmp	r5, #0
    1794:	d018      	beq.n	17c8 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    1796:	4b23      	ldr	r3, [pc, #140]	; (1824 <udi_msc_spc_mode_sense+0xa0>)
    1798:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    179a:	4a20      	ldr	r2, [pc, #128]	; (181c <udi_msc_spc_mode_sense+0x98>)
    179c:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    179e:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    17a0:	4b20      	ldr	r3, [pc, #128]	; (1824 <udi_msc_spc_mode_sense+0xa0>)
    17a2:	7c58      	ldrb	r0, [r3, #17]
    17a4:	233f      	movs	r3, #63	; 0x3f
    17a6:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    17a8:	2b1c      	cmp	r3, #28
    17aa:	d013      	beq.n	17d4 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    17ac:	2b3f      	cmp	r3, #63	; 0x3f
    17ae:	d011      	beq.n	17d4 <udi_msc_spc_mode_sense+0x50>
    17b0:	1c20      	adds	r0, r4, #0
    17b2:	428c      	cmp	r4, r1
    17b4:	d900      	bls.n	17b8 <udi_msc_spc_mode_sense+0x34>
    17b6:	1c08      	adds	r0, r1, #0
    17b8:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    17ba:	2180      	movs	r1, #128	; 0x80
    17bc:	0030      	movs	r0, r6
    17be:	4b1a      	ldr	r3, [pc, #104]	; (1828 <udi_msc_spc_mode_sense+0xa4>)
    17c0:	4798      	blx	r3
    17c2:	2800      	cmp	r0, #0
    17c4:	d10f      	bne.n	17e6 <udi_msc_spc_mode_sense+0x62>
}
    17c6:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    17c8:	4b16      	ldr	r3, [pc, #88]	; (1824 <udi_msc_spc_mode_sense+0xa0>)
    17ca:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    17cc:	4a13      	ldr	r2, [pc, #76]	; (181c <udi_msc_spc_mode_sense+0x98>)
    17ce:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    17d0:	2404      	movs	r4, #4
    17d2:	e7e5      	b.n	17a0 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    17d4:	231c      	movs	r3, #28
    17d6:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    17d8:	3b12      	subs	r3, #18
    17da:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    17dc:	3b05      	subs	r3, #5
    17de:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    17e0:	340c      	adds	r4, #12
    17e2:	b2e4      	uxtb	r4, r4
    17e4:	e7e4      	b.n	17b0 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    17e6:	4b0f      	ldr	r3, [pc, #60]	; (1824 <udi_msc_spc_mode_sense+0xa0>)
    17e8:	7b58      	ldrb	r0, [r3, #13]
    17ea:	4b10      	ldr	r3, [pc, #64]	; (182c <udi_msc_spc_mode_sense+0xa8>)
    17ec:	4798      	blx	r3
    17ee:	1e43      	subs	r3, r0, #1
    17f0:	4198      	sbcs	r0, r3
    17f2:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    17f4:	2d00      	cmp	r5, #0
    17f6:	d00c      	beq.n	1812 <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    17f8:	3c02      	subs	r4, #2
    17fa:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    17fc:	4a07      	ldr	r2, [pc, #28]	; (181c <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    17fe:	0a23      	lsrs	r3, r4, #8
    1800:	0224      	lsls	r4, r4, #8
    1802:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    1804:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    1806:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1808:	0031      	movs	r1, r6
    180a:	4804      	ldr	r0, [pc, #16]	; (181c <udi_msc_spc_mode_sense+0x98>)
    180c:	4b08      	ldr	r3, [pc, #32]	; (1830 <udi_msc_spc_mode_sense+0xac>)
    180e:	4798      	blx	r3
    1810:	e7d9      	b.n	17c6 <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    1812:	4b02      	ldr	r3, [pc, #8]	; (181c <udi_msc_spc_mode_sense+0x98>)
    1814:	3c01      	subs	r4, #1
    1816:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1818:	7098      	strb	r0, [r3, #2]
    181a:	e7f5      	b.n	1808 <udi_msc_spc_mode_sense+0x84>
    181c:	200001b8 	.word	0x200001b8
    1820:	00009343 	.word	0x00009343
    1824:	200001dc 	.word	0x200001dc
    1828:	00001699 	.word	0x00001699
    182c:	000086c5 	.word	0x000086c5
    1830:	000016e5 	.word	0x000016e5

00001834 <udi_msc_sbc_trans>:
{
    1834:	b510      	push	{r4, lr}
    1836:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    1838:	d01e      	beq.n	1878 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    183a:	4a17      	ldr	r2, [pc, #92]	; (1898 <udi_msc_sbc_trans+0x64>)
    183c:	4b17      	ldr	r3, [pc, #92]	; (189c <udi_msc_sbc_trans+0x68>)
    183e:	7c59      	ldrb	r1, [r3, #17]
    1840:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    1842:	7c99      	ldrb	r1, [r3, #18]
    1844:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    1846:	7cd9      	ldrb	r1, [r3, #19]
    1848:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    184a:	7d19      	ldrb	r1, [r3, #20]
    184c:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    184e:	4a14      	ldr	r2, [pc, #80]	; (18a0 <udi_msc_sbc_trans+0x6c>)
    1850:	7d99      	ldrb	r1, [r3, #22]
    1852:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    1854:	7ddb      	ldrb	r3, [r3, #23]
    1856:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1858:	8810      	ldrh	r0, [r2, #0]
    185a:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    185c:	0021      	movs	r1, r4
    185e:	1e4b      	subs	r3, r1, #1
    1860:	4199      	sbcs	r1, r3
    1862:	01c9      	lsls	r1, r1, #7
    1864:	4b0f      	ldr	r3, [pc, #60]	; (18a4 <udi_msc_sbc_trans+0x70>)
    1866:	4798      	blx	r3
    1868:	2800      	cmp	r0, #0
    186a:	d004      	beq.n	1876 <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    186c:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <udi_msc_sbc_trans+0x74>)
    186e:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    1870:	2201      	movs	r2, #1
    1872:	4b0e      	ldr	r3, [pc, #56]	; (18ac <udi_msc_sbc_trans+0x78>)
    1874:	701a      	strb	r2, [r3, #0]
}
    1876:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    1878:	4b08      	ldr	r3, [pc, #32]	; (189c <udi_msc_sbc_trans+0x68>)
    187a:	7b58      	ldrb	r0, [r3, #13]
    187c:	4b0c      	ldr	r3, [pc, #48]	; (18b0 <udi_msc_sbc_trans+0x7c>)
    187e:	4798      	blx	r3
    1880:	2800      	cmp	r0, #0
    1882:	d0da      	beq.n	183a <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    1884:	2200      	movs	r2, #0
    1886:	219c      	movs	r1, #156	; 0x9c
    1888:	0189      	lsls	r1, r1, #6
    188a:	2007      	movs	r0, #7
    188c:	4b09      	ldr	r3, [pc, #36]	; (18b4 <udi_msc_sbc_trans+0x80>)
    188e:	4798      	blx	r3
			udi_msc_csw_process();
    1890:	4b09      	ldr	r3, [pc, #36]	; (18b8 <udi_msc_sbc_trans+0x84>)
    1892:	4798      	blx	r3
			return;
    1894:	e7ef      	b.n	1876 <udi_msc_sbc_trans+0x42>
    1896:	46c0      	nop			; (mov r8, r8)
    1898:	200001cc 	.word	0x200001cc
    189c:	200001dc 	.word	0x200001dc
    18a0:	200001fc 	.word	0x200001fc
    18a4:	00001699 	.word	0x00001699
    18a8:	200001d1 	.word	0x200001d1
    18ac:	200001d2 	.word	0x200001d2
    18b0:	000086c5 	.word	0x000086c5
    18b4:	0000164d 	.word	0x0000164d
    18b8:	000015ed 	.word	0x000015ed

000018bc <udi_msc_cbw_received>:
{
    18bc:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    18be:	2800      	cmp	r0, #0
    18c0:	d10d      	bne.n	18de <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    18c2:	291f      	cmp	r1, #31
    18c4:	d104      	bne.n	18d0 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    18c6:	4b84      	ldr	r3, [pc, #528]	; (1ad8 <udi_msc_cbw_received+0x21c>)
    18c8:	4a84      	ldr	r2, [pc, #528]	; (1adc <udi_msc_cbw_received+0x220>)
    18ca:	6812      	ldr	r2, [r2, #0]
    18cc:	429a      	cmp	r2, r3
    18ce:	d007      	beq.n	18e0 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    18d0:	2201      	movs	r2, #1
    18d2:	4b83      	ldr	r3, [pc, #524]	; (1ae0 <udi_msc_cbw_received+0x224>)
    18d4:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    18d6:	4b83      	ldr	r3, [pc, #524]	; (1ae4 <udi_msc_cbw_received+0x228>)
    18d8:	4798      	blx	r3
		udi_msc_csw_invalid();
    18da:	4b83      	ldr	r3, [pc, #524]	; (1ae8 <udi_msc_cbw_received+0x22c>)
    18dc:	4798      	blx	r3
}
    18de:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    18e0:	4b7e      	ldr	r3, [pc, #504]	; (1adc <udi_msc_cbw_received+0x220>)
    18e2:	7b58      	ldrb	r0, [r3, #13]
    18e4:	220f      	movs	r2, #15
    18e6:	4010      	ands	r0, r2
    18e8:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    18ea:	4b80      	ldr	r3, [pc, #512]	; (1aec <udi_msc_cbw_received+0x230>)
    18ec:	781b      	ldrb	r3, [r3, #0]
    18ee:	4283      	cmp	r3, r0
    18f0:	d30b      	bcc.n	190a <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    18f2:	4b7a      	ldr	r3, [pc, #488]	; (1adc <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    18f4:	4a7e      	ldr	r2, [pc, #504]	; (1af0 <udi_msc_cbw_received+0x234>)
    18f6:	6899      	ldr	r1, [r3, #8]
    18f8:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    18fa:	7bda      	ldrb	r2, [r3, #15]
    18fc:	2a5a      	cmp	r2, #90	; 0x5a
    18fe:	d900      	bls.n	1902 <udi_msc_cbw_received+0x46>
    1900:	e0d2      	b.n	1aa8 <udi_msc_cbw_received+0x1ec>
    1902:	0093      	lsls	r3, r2, #2
    1904:	4a7b      	ldr	r2, [pc, #492]	; (1af4 <udi_msc_cbw_received+0x238>)
    1906:	58d3      	ldr	r3, [r2, r3]
    1908:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    190a:	4b7b      	ldr	r3, [pc, #492]	; (1af8 <udi_msc_cbw_received+0x23c>)
    190c:	4798      	blx	r3
		udi_msc_csw_process();
    190e:	4b7b      	ldr	r3, [pc, #492]	; (1afc <udi_msc_cbw_received+0x240>)
    1910:	4798      	blx	r3
		return;
    1912:	e7e4      	b.n	18de <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    1914:	4b71      	ldr	r3, [pc, #452]	; (1adc <udi_msc_cbw_received+0x220>)
    1916:	7cda      	ldrb	r2, [r3, #19]
    1918:	1c13      	adds	r3, r2, #0
    191a:	2a12      	cmp	r2, #18
    191c:	d900      	bls.n	1920 <udi_msc_cbw_received+0x64>
    191e:	2312      	movs	r3, #18
    1920:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1922:	2180      	movs	r1, #128	; 0x80
    1924:	0020      	movs	r0, r4
    1926:	4b76      	ldr	r3, [pc, #472]	; (1b00 <udi_msc_cbw_received+0x244>)
    1928:	4798      	blx	r3
    192a:	2800      	cmp	r0, #0
    192c:	d0d7      	beq.n	18de <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    192e:	0021      	movs	r1, r4
    1930:	4874      	ldr	r0, [pc, #464]	; (1b04 <udi_msc_cbw_received+0x248>)
    1932:	4b75      	ldr	r3, [pc, #468]	; (1b08 <udi_msc_cbw_received+0x24c>)
    1934:	4798      	blx	r3
    1936:	e7d2      	b.n	18de <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1938:	4b68      	ldr	r3, [pc, #416]	; (1adc <udi_msc_cbw_received+0x220>)
    193a:	7cdb      	ldrb	r3, [r3, #19]
    193c:	1c1a      	adds	r2, r3, #0
    193e:	2b24      	cmp	r3, #36	; 0x24
    1940:	d900      	bls.n	1944 <udi_msc_cbw_received+0x88>
    1942:	2224      	movs	r2, #36	; 0x24
    1944:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1946:	2180      	movs	r1, #128	; 0x80
    1948:	0020      	movs	r0, r4
    194a:	4b6d      	ldr	r3, [pc, #436]	; (1b00 <udi_msc_cbw_received+0x244>)
    194c:	4798      	blx	r3
    194e:	2800      	cmp	r0, #0
    1950:	d0c5      	beq.n	18de <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    1952:	4b62      	ldr	r3, [pc, #392]	; (1adc <udi_msc_cbw_received+0x220>)
    1954:	7c1b      	ldrb	r3, [r3, #16]
    1956:	079b      	lsls	r3, r3, #30
    1958:	d103      	bne.n	1962 <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    195a:	4b60      	ldr	r3, [pc, #384]	; (1adc <udi_msc_cbw_received+0x220>)
    195c:	7c5d      	ldrb	r5, [r3, #17]
    195e:	2d00      	cmp	r5, #0
    1960:	d004      	beq.n	196c <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1962:	4b65      	ldr	r3, [pc, #404]	; (1af8 <udi_msc_cbw_received+0x23c>)
    1964:	4798      	blx	r3
		udi_msc_csw_process();
    1966:	4b65      	ldr	r3, [pc, #404]	; (1afc <udi_msc_cbw_received+0x240>)
    1968:	4798      	blx	r3
    196a:	e7b8      	b.n	18de <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    196c:	4b5b      	ldr	r3, [pc, #364]	; (1adc <udi_msc_cbw_received+0x220>)
    196e:	7b58      	ldrb	r0, [r3, #13]
    1970:	4b66      	ldr	r3, [pc, #408]	; (1b0c <udi_msc_cbw_received+0x250>)
    1972:	4798      	blx	r3
    1974:	2380      	movs	r3, #128	; 0x80
    1976:	2800      	cmp	r0, #0
    1978:	d100      	bne.n	197c <udi_msc_cbw_received+0xc0>
    197a:	002b      	movs	r3, r5
    197c:	4e64      	ldr	r6, [pc, #400]	; (1b10 <udi_msc_cbw_received+0x254>)
    197e:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    1980:	4b56      	ldr	r3, [pc, #344]	; (1adc <udi_msc_cbw_received+0x220>)
    1982:	7b58      	ldrb	r0, [r3, #13]
    1984:	4b63      	ldr	r3, [pc, #396]	; (1b14 <udi_msc_cbw_received+0x258>)
    1986:	4798      	blx	r3
    1988:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    198a:	0030      	movs	r0, r6
    198c:	3010      	adds	r0, #16
    198e:	3101      	adds	r1, #1
    1990:	2210      	movs	r2, #16
    1992:	4b61      	ldr	r3, [pc, #388]	; (1b18 <udi_msc_cbw_received+0x25c>)
    1994:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    1996:	7c33      	ldrb	r3, [r6, #16]
    1998:	2b00      	cmp	r3, #0
    199a:	d100      	bne.n	199e <udi_msc_cbw_received+0xe2>
    199c:	e08e      	b.n	1abc <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    199e:	2b22      	cmp	r3, #34	; 0x22
    19a0:	d100      	bne.n	19a4 <udi_msc_cbw_received+0xe8>
    19a2:	e08a      	b.n	1aba <udi_msc_cbw_received+0x1fe>
    19a4:	495a      	ldr	r1, [pc, #360]	; (1b10 <udi_msc_cbw_received+0x254>)
		i++;
    19a6:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    19a8:	7c4a      	ldrb	r2, [r1, #17]
    19aa:	2a00      	cmp	r2, #0
    19ac:	d100      	bne.n	19b0 <udi_msc_cbw_received+0xf4>
    19ae:	e085      	b.n	1abc <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    19b0:	2a22      	cmp	r2, #34	; 0x22
    19b2:	d100      	bne.n	19b6 <udi_msc_cbw_received+0xfa>
    19b4:	e082      	b.n	1abc <udi_msc_cbw_received+0x200>
		i++;
    19b6:	3301      	adds	r3, #1
    19b8:	b2db      	uxtb	r3, r3
    19ba:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    19bc:	2b10      	cmp	r3, #16
    19be:	d1f3      	bne.n	19a8 <udi_msc_cbw_received+0xec>
    19c0:	e084      	b.n	1acc <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    19c2:	2000      	movs	r0, #0
    19c4:	4b55      	ldr	r3, [pc, #340]	; (1b1c <udi_msc_cbw_received+0x260>)
    19c6:	4798      	blx	r3
		break;
    19c8:	e789      	b.n	18de <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    19ca:	2001      	movs	r0, #1
    19cc:	4b53      	ldr	r3, [pc, #332]	; (1b1c <udi_msc_cbw_received+0x260>)
    19ce:	4798      	blx	r3
		break;
    19d0:	e785      	b.n	18de <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    19d2:	4b53      	ldr	r3, [pc, #332]	; (1b20 <udi_msc_cbw_received+0x264>)
    19d4:	4798      	blx	r3
    19d6:	2802      	cmp	r0, #2
    19d8:	d009      	beq.n	19ee <udi_msc_cbw_received+0x132>
    19da:	2803      	cmp	r0, #3
    19dc:	d004      	beq.n	19e8 <udi_msc_cbw_received+0x12c>
    19de:	2800      	cmp	r0, #0
    19e0:	d008      	beq.n	19f4 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    19e2:	4b50      	ldr	r3, [pc, #320]	; (1b24 <udi_msc_cbw_received+0x268>)
    19e4:	4798      	blx	r3
    19e6:	e007      	b.n	19f8 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    19e8:	4b4f      	ldr	r3, [pc, #316]	; (1b28 <udi_msc_cbw_received+0x26c>)
    19ea:	4798      	blx	r3
    19ec:	e004      	b.n	19f8 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    19ee:	4b4f      	ldr	r3, [pc, #316]	; (1b2c <udi_msc_cbw_received+0x270>)
    19f0:	4798      	blx	r3
    19f2:	e001      	b.n	19f8 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    19f4:	4b4e      	ldr	r3, [pc, #312]	; (1b30 <udi_msc_cbw_received+0x274>)
    19f6:	4798      	blx	r3
	udi_msc_csw_process();
    19f8:	4b40      	ldr	r3, [pc, #256]	; (1afc <udi_msc_cbw_received+0x240>)
    19fa:	4798      	blx	r3
    19fc:	e76f      	b.n	18de <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    19fe:	2180      	movs	r1, #128	; 0x80
    1a00:	2008      	movs	r0, #8
    1a02:	4b3f      	ldr	r3, [pc, #252]	; (1b00 <udi_msc_cbw_received+0x244>)
    1a04:	4798      	blx	r3
    1a06:	2800      	cmp	r0, #0
    1a08:	d100      	bne.n	1a0c <udi_msc_cbw_received+0x150>
    1a0a:	e768      	b.n	18de <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1a0c:	4b33      	ldr	r3, [pc, #204]	; (1adc <udi_msc_cbw_received+0x220>)
    1a0e:	7b58      	ldrb	r0, [r3, #13]
    1a10:	4948      	ldr	r1, [pc, #288]	; (1b34 <udi_msc_cbw_received+0x278>)
    1a12:	4b49      	ldr	r3, [pc, #292]	; (1b38 <udi_msc_cbw_received+0x27c>)
    1a14:	4798      	blx	r3
    1a16:	2802      	cmp	r0, #2
    1a18:	d00d      	beq.n	1a36 <udi_msc_cbw_received+0x17a>
    1a1a:	2803      	cmp	r0, #3
    1a1c:	d006      	beq.n	1a2c <udi_msc_cbw_received+0x170>
    1a1e:	2800      	cmp	r0, #0
    1a20:	d00e      	beq.n	1a40 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    1a22:	4b40      	ldr	r3, [pc, #256]	; (1b24 <udi_msc_cbw_received+0x268>)
    1a24:	4798      	blx	r3
		udi_msc_csw_process();
    1a26:	4b35      	ldr	r3, [pc, #212]	; (1afc <udi_msc_cbw_received+0x240>)
    1a28:	4798      	blx	r3
    1a2a:	e758      	b.n	18de <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1a2c:	4b3e      	ldr	r3, [pc, #248]	; (1b28 <udi_msc_cbw_received+0x26c>)
    1a2e:	4798      	blx	r3
		udi_msc_csw_process();
    1a30:	4b32      	ldr	r3, [pc, #200]	; (1afc <udi_msc_cbw_received+0x240>)
    1a32:	4798      	blx	r3
    1a34:	e753      	b.n	18de <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    1a36:	4b3d      	ldr	r3, [pc, #244]	; (1b2c <udi_msc_cbw_received+0x270>)
    1a38:	4798      	blx	r3
		udi_msc_csw_process();
    1a3a:	4b30      	ldr	r3, [pc, #192]	; (1afc <udi_msc_cbw_received+0x240>)
    1a3c:	4798      	blx	r3
    1a3e:	e74e      	b.n	18de <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1a40:	483c      	ldr	r0, [pc, #240]	; (1b34 <udi_msc_cbw_received+0x278>)
    1a42:	2380      	movs	r3, #128	; 0x80
    1a44:	029b      	lsls	r3, r3, #10
    1a46:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1a48:	6803      	ldr	r3, [r0, #0]
    1a4a:	ba1b      	rev	r3, r3
    1a4c:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1a4e:	2108      	movs	r1, #8
    1a50:	4b2d      	ldr	r3, [pc, #180]	; (1b08 <udi_msc_cbw_received+0x24c>)
    1a52:	4798      	blx	r3
    1a54:	e743      	b.n	18de <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    1a56:	4b21      	ldr	r3, [pc, #132]	; (1adc <udi_msc_cbw_received+0x220>)
    1a58:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1a5a:	079a      	lsls	r2, r3, #30
    1a5c:	d404      	bmi.n	1a68 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    1a5e:	4b34      	ldr	r3, [pc, #208]	; (1b30 <udi_msc_cbw_received+0x274>)
    1a60:	4798      	blx	r3
	udi_msc_csw_process();
    1a62:	4b26      	ldr	r3, [pc, #152]	; (1afc <udi_msc_cbw_received+0x240>)
    1a64:	4798      	blx	r3
    1a66:	e73a      	b.n	18de <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1a68:	2101      	movs	r1, #1
    1a6a:	404b      	eors	r3, r1
    1a6c:	2101      	movs	r1, #1
    1a6e:	4019      	ands	r1, r3
    1a70:	4b32      	ldr	r3, [pc, #200]	; (1b3c <udi_msc_cbw_received+0x280>)
    1a72:	4798      	blx	r3
    1a74:	e7f3      	b.n	1a5e <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    1a76:	4b19      	ldr	r3, [pc, #100]	; (1adc <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1a78:	7cdb      	ldrb	r3, [r3, #19]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d004      	beq.n	1a88 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1a7e:	4b1e      	ldr	r3, [pc, #120]	; (1af8 <udi_msc_cbw_received+0x23c>)
    1a80:	4798      	blx	r3
	udi_msc_csw_process();
    1a82:	4b1e      	ldr	r3, [pc, #120]	; (1afc <udi_msc_cbw_received+0x240>)
    1a84:	4798      	blx	r3
    1a86:	e72a      	b.n	18de <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1a88:	4b29      	ldr	r3, [pc, #164]	; (1b30 <udi_msc_cbw_received+0x274>)
    1a8a:	4798      	blx	r3
    1a8c:	e7f9      	b.n	1a82 <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    1a8e:	4b28      	ldr	r3, [pc, #160]	; (1b30 <udi_msc_cbw_received+0x274>)
    1a90:	4798      	blx	r3
		udi_msc_csw_process();
    1a92:	4b1a      	ldr	r3, [pc, #104]	; (1afc <udi_msc_cbw_received+0x240>)
    1a94:	4798      	blx	r3
		break;
    1a96:	e722      	b.n	18de <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    1a98:	2001      	movs	r0, #1
    1a9a:	4b29      	ldr	r3, [pc, #164]	; (1b40 <udi_msc_cbw_received+0x284>)
    1a9c:	4798      	blx	r3
		break;
    1a9e:	e71e      	b.n	18de <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    1aa0:	2000      	movs	r0, #0
    1aa2:	4b27      	ldr	r3, [pc, #156]	; (1b40 <udi_msc_cbw_received+0x284>)
    1aa4:	4798      	blx	r3
		break;
    1aa6:	e71a      	b.n	18de <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1aa8:	2200      	movs	r2, #0
    1aaa:	2180      	movs	r1, #128	; 0x80
    1aac:	0189      	lsls	r1, r1, #6
    1aae:	2005      	movs	r0, #5
    1ab0:	4b24      	ldr	r3, [pc, #144]	; (1b44 <udi_msc_cbw_received+0x288>)
    1ab2:	4798      	blx	r3
		udi_msc_csw_process();
    1ab4:	4b11      	ldr	r3, [pc, #68]	; (1afc <udi_msc_cbw_received+0x240>)
    1ab6:	4798      	blx	r3
		break;
    1ab8:	e711      	b.n	18de <udi_msc_cbw_received+0x22>
	i = 0;
    1aba:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1abc:	4814      	ldr	r0, [pc, #80]	; (1b10 <udi_msc_cbw_received+0x254>)
    1abe:	2120      	movs	r1, #32
    1ac0:	18c2      	adds	r2, r0, r3
    1ac2:	7411      	strb	r1, [r2, #16]
		i++;
    1ac4:	3301      	adds	r3, #1
    1ac6:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1ac8:	2b10      	cmp	r3, #16
    1aca:	d1f9      	bne.n	1ac0 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1acc:	0021      	movs	r1, r4
    1ace:	4810      	ldr	r0, [pc, #64]	; (1b10 <udi_msc_cbw_received+0x254>)
    1ad0:	4b0d      	ldr	r3, [pc, #52]	; (1b08 <udi_msc_cbw_received+0x24c>)
    1ad2:	4798      	blx	r3
    1ad4:	e703      	b.n	18de <udi_msc_cbw_received+0x22>
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	43425355 	.word	0x43425355
    1adc:	200001dc 	.word	0x200001dc
    1ae0:	200001d0 	.word	0x200001d0
    1ae4:	00001595 	.word	0x00001595
    1ae8:	000015c1 	.word	0x000015c1
    1aec:	20000200 	.word	0x20000200
    1af0:	20000074 	.word	0x20000074
    1af4:	0000a86c 	.word	0x0000a86c
    1af8:	00001685 	.word	0x00001685
    1afc:	000015ed 	.word	0x000015ed
    1b00:	00001699 	.word	0x00001699
    1b04:	20000204 	.word	0x20000204
    1b08:	000016e5 	.word	0x000016e5
    1b0c:	000086dd 	.word	0x000086dd
    1b10:	20000084 	.word	0x20000084
    1b14:	000086f5 	.word	0x000086f5
    1b18:	00009331 	.word	0x00009331
    1b1c:	00001785 	.word	0x00001785
    1b20:	00008679 	.word	0x00008679
    1b24:	000016d1 	.word	0x000016d1
    1b28:	0000171d 	.word	0x0000171d
    1b2c:	00001731 	.word	0x00001731
    1b30:	00001745 	.word	0x00001745
    1b34:	200001d4 	.word	0x200001d4
    1b38:	00008691 	.word	0x00008691
    1b3c:	000086b5 	.word	0x000086b5
    1b40:	00001835 	.word	0x00001835
    1b44:	0000164d 	.word	0x0000164d

00001b48 <udi_msc_disable>:
{
    1b48:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1b4a:	2200      	movs	r2, #0
    1b4c:	4b04      	ldr	r3, [pc, #16]	; (1b60 <udi_msc_disable+0x18>)
    1b4e:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1b50:	2301      	movs	r3, #1
    1b52:	4a04      	ldr	r2, [pc, #16]	; (1b64 <udi_msc_disable+0x1c>)
    1b54:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1b56:	4a04      	ldr	r2, [pc, #16]	; (1b68 <udi_msc_disable+0x20>)
    1b58:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1b5a:	4b04      	ldr	r3, [pc, #16]	; (1b6c <udi_msc_disable+0x24>)
    1b5c:	4798      	blx	r3
}
    1b5e:	bd10      	pop	{r4, pc}
    1b60:	200001d2 	.word	0x200001d2
    1b64:	20000070 	.word	0x20000070
    1b68:	20000071 	.word	0x20000071
    1b6c:	00005d65 	.word	0x00005d65

00001b70 <udi_msc_setup>:
{
    1b70:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    1b72:	4b20      	ldr	r3, [pc, #128]	; (1bf4 <udi_msc_setup+0x84>)
    1b74:	781a      	ldrb	r2, [r3, #0]
    1b76:	b253      	sxtb	r3, r2
    1b78:	2b00      	cmp	r3, #0
    1b7a:	db05      	blt.n	1b88 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1b7c:	2360      	movs	r3, #96	; 0x60
    1b7e:	4013      	ands	r3, r2
	return false;	// Not supported request
    1b80:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1b82:	2b20      	cmp	r3, #32
    1b84:	d018      	beq.n	1bb8 <udi_msc_setup+0x48>
}
    1b86:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1b88:	2360      	movs	r3, #96	; 0x60
    1b8a:	4013      	ands	r3, r2
	return false;	// Not supported request
    1b8c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1b8e:	2b20      	cmp	r3, #32
    1b90:	d1f9      	bne.n	1b86 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b92:	4b18      	ldr	r3, [pc, #96]	; (1bf4 <udi_msc_setup+0x84>)
    1b94:	785b      	ldrb	r3, [r3, #1]
    1b96:	2bfe      	cmp	r3, #254	; 0xfe
    1b98:	d127      	bne.n	1bea <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1b9a:	4b16      	ldr	r3, [pc, #88]	; (1bf4 <udi_msc_setup+0x84>)
    1b9c:	88db      	ldrh	r3, [r3, #6]
    1b9e:	2b01      	cmp	r3, #1
    1ba0:	d1f1      	bne.n	1b86 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1ba2:	4b14      	ldr	r3, [pc, #80]	; (1bf4 <udi_msc_setup+0x84>)
    1ba4:	885b      	ldrh	r3, [r3, #2]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d1ed      	bne.n	1b86 <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1baa:	4b12      	ldr	r3, [pc, #72]	; (1bf4 <udi_msc_setup+0x84>)
    1bac:	4a12      	ldr	r2, [pc, #72]	; (1bf8 <udi_msc_setup+0x88>)
    1bae:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1bb0:	2201      	movs	r2, #1
    1bb2:	819a      	strh	r2, [r3, #12]
				return true;
    1bb4:	3001      	adds	r0, #1
    1bb6:	e7e6      	b.n	1b86 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1bb8:	4b0e      	ldr	r3, [pc, #56]	; (1bf4 <udi_msc_setup+0x84>)
    1bba:	785b      	ldrb	r3, [r3, #1]
    1bbc:	2bff      	cmp	r3, #255	; 0xff
    1bbe:	d116      	bne.n	1bee <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1bc0:	4b0c      	ldr	r3, [pc, #48]	; (1bf4 <udi_msc_setup+0x84>)
    1bc2:	88db      	ldrh	r3, [r3, #6]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d1de      	bne.n	1b86 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1bc8:	4b0a      	ldr	r3, [pc, #40]	; (1bf4 <udi_msc_setup+0x84>)
    1bca:	885b      	ldrh	r3, [r3, #2]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d1da      	bne.n	1b86 <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1bd0:	4a0a      	ldr	r2, [pc, #40]	; (1bfc <udi_msc_setup+0x8c>)
    1bd2:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1bd4:	4a0a      	ldr	r2, [pc, #40]	; (1c00 <udi_msc_setup+0x90>)
    1bd6:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1bd8:	3002      	adds	r0, #2
    1bda:	4c0a      	ldr	r4, [pc, #40]	; (1c04 <udi_msc_setup+0x94>)
    1bdc:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1bde:	2081      	movs	r0, #129	; 0x81
    1be0:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1be2:	4b09      	ldr	r3, [pc, #36]	; (1c08 <udi_msc_setup+0x98>)
    1be4:	4798      	blx	r3
				return true;
    1be6:	2001      	movs	r0, #1
    1be8:	e7cd      	b.n	1b86 <udi_msc_setup+0x16>
	return false;	// Not supported request
    1bea:	2000      	movs	r0, #0
    1bec:	e7cb      	b.n	1b86 <udi_msc_setup+0x16>
    1bee:	2000      	movs	r0, #0
    1bf0:	e7c9      	b.n	1b86 <udi_msc_setup+0x16>
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	2000064c 	.word	0x2000064c
    1bf8:	20000200 	.word	0x20000200
    1bfc:	200001d0 	.word	0x200001d0
    1c00:	200001d2 	.word	0x200001d2
    1c04:	000038ad 	.word	0x000038ad
    1c08:	00001499 	.word	0x00001499

00001c0c <udi_msc_process_trans>:
{
    1c0c:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    1c0e:	4b1e      	ldr	r3, [pc, #120]	; (1c88 <udi_msc_process_trans+0x7c>)
    1c10:	781c      	ldrb	r4, [r3, #0]
    1c12:	2c00      	cmp	r4, #0
    1c14:	d030      	beq.n	1c78 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    1c16:	2300      	movs	r3, #0
    1c18:	4a1b      	ldr	r2, [pc, #108]	; (1c88 <udi_msc_process_trans+0x7c>)
    1c1a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    1c1c:	4a1b      	ldr	r2, [pc, #108]	; (1c8c <udi_msc_process_trans+0x80>)
    1c1e:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    1c20:	4b1b      	ldr	r3, [pc, #108]	; (1c90 <udi_msc_process_trans+0x84>)
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d015      	beq.n	1c54 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1c28:	4b1a      	ldr	r3, [pc, #104]	; (1c94 <udi_msc_process_trans+0x88>)
    1c2a:	881a      	ldrh	r2, [r3, #0]
    1c2c:	4b1a      	ldr	r3, [pc, #104]	; (1c98 <udi_msc_process_trans+0x8c>)
    1c2e:	6819      	ldr	r1, [r3, #0]
    1c30:	4b1a      	ldr	r3, [pc, #104]	; (1c9c <udi_msc_process_trans+0x90>)
    1c32:	7b58      	ldrb	r0, [r3, #13]
    1c34:	4b1a      	ldr	r3, [pc, #104]	; (1ca0 <udi_msc_process_trans+0x94>)
    1c36:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1c38:	4b14      	ldr	r3, [pc, #80]	; (1c8c <udi_msc_process_trans+0x80>)
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	b2db      	uxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d111      	bne.n	1c66 <udi_msc_process_trans+0x5a>
	switch (status) {
    1c42:	2802      	cmp	r0, #2
    1c44:	d01d      	beq.n	1c82 <udi_msc_process_trans+0x76>
    1c46:	2803      	cmp	r0, #3
    1c48:	d018      	beq.n	1c7c <udi_msc_process_trans+0x70>
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d010      	beq.n	1c70 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1c4e:	4b15      	ldr	r3, [pc, #84]	; (1ca4 <udi_msc_process_trans+0x98>)
    1c50:	4798      	blx	r3
		break;
    1c52:	e00f      	b.n	1c74 <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1c54:	4b0f      	ldr	r3, [pc, #60]	; (1c94 <udi_msc_process_trans+0x88>)
    1c56:	881a      	ldrh	r2, [r3, #0]
    1c58:	4b0f      	ldr	r3, [pc, #60]	; (1c98 <udi_msc_process_trans+0x8c>)
    1c5a:	6819      	ldr	r1, [r3, #0]
    1c5c:	4b0f      	ldr	r3, [pc, #60]	; (1c9c <udi_msc_process_trans+0x90>)
    1c5e:	7b58      	ldrb	r0, [r3, #13]
    1c60:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <udi_msc_process_trans+0x9c>)
    1c62:	4798      	blx	r3
    1c64:	e7e8      	b.n	1c38 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    1c66:	2100      	movs	r1, #0
    1c68:	4a08      	ldr	r2, [pc, #32]	; (1c8c <udi_msc_process_trans+0x80>)
    1c6a:	7011      	strb	r1, [r2, #0]
		return true;
    1c6c:	001c      	movs	r4, r3
    1c6e:	e003      	b.n	1c78 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1c70:	4b0e      	ldr	r3, [pc, #56]	; (1cac <udi_msc_process_trans+0xa0>)
    1c72:	4798      	blx	r3
	udi_msc_csw_process();
    1c74:	4b0e      	ldr	r3, [pc, #56]	; (1cb0 <udi_msc_process_trans+0xa4>)
    1c76:	4798      	blx	r3
}
    1c78:	0020      	movs	r0, r4
    1c7a:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1c7c:	4b0d      	ldr	r3, [pc, #52]	; (1cb4 <udi_msc_process_trans+0xa8>)
    1c7e:	4798      	blx	r3
		break;
    1c80:	e7f8      	b.n	1c74 <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    1c82:	4b0d      	ldr	r3, [pc, #52]	; (1cb8 <udi_msc_process_trans+0xac>)
    1c84:	4798      	blx	r3
		break;
    1c86:	e7f5      	b.n	1c74 <udi_msc_process_trans+0x68>
    1c88:	200001d2 	.word	0x200001d2
    1c8c:	20000071 	.word	0x20000071
    1c90:	200001d1 	.word	0x200001d1
    1c94:	200001fc 	.word	0x200001fc
    1c98:	200001cc 	.word	0x200001cc
    1c9c:	200001dc 	.word	0x200001dc
    1ca0:	00008705 	.word	0x00008705
    1ca4:	000016d1 	.word	0x000016d1
    1ca8:	00008739 	.word	0x00008739
    1cac:	00001745 	.word	0x00001745
    1cb0:	000015ed 	.word	0x000015ed
    1cb4:	0000171d 	.word	0x0000171d
    1cb8:	00001731 	.word	0x00001731

00001cbc <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1cbc:	b530      	push	{r4, r5, lr}
    1cbe:	b083      	sub	sp, #12
    1cc0:	0005      	movs	r5, r0
    1cc2:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    1cc4:	4a1d      	ldr	r2, [pc, #116]	; (1d3c <udi_msc_trans_block+0x80>)
    1cc6:	7810      	ldrb	r0, [r2, #0]
    1cc8:	b2c0      	uxtb	r0, r0
    1cca:	2800      	cmp	r0, #0
    1ccc:	d013      	beq.n	1cf6 <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1cce:	2000      	movs	r0, #0
    1cd0:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1cd2:	3081      	adds	r0, #129	; 0x81
    1cd4:	2d00      	cmp	r5, #0
    1cd6:	d100      	bne.n	1cda <udi_msc_trans_block+0x1e>
    1cd8:	387f      	subs	r0, #127	; 0x7f
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d00d      	beq.n	1cfa <udi_msc_trans_block+0x3e>
    1cde:	9300      	str	r3, [sp, #0]
    1ce0:	0023      	movs	r3, r4
    1ce2:	000a      	movs	r2, r1
    1ce4:	2100      	movs	r1, #0
    1ce6:	4d16      	ldr	r5, [pc, #88]	; (1d40 <udi_msc_trans_block+0x84>)
    1ce8:	47a8      	blx	r5
    1cea:	2800      	cmp	r0, #0
    1cec:	d020      	beq.n	1d30 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1cee:	4b15      	ldr	r3, [pc, #84]	; (1d44 <udi_msc_trans_block+0x88>)
    1cf0:	689a      	ldr	r2, [r3, #8]
    1cf2:	1b14      	subs	r4, r2, r4
    1cf4:	609c      	str	r4, [r3, #8]
	return true;
}
    1cf6:	b003      	add	sp, #12
    1cf8:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1cfa:	4b13      	ldr	r3, [pc, #76]	; (1d48 <udi_msc_trans_block+0x8c>)
    1cfc:	9300      	str	r3, [sp, #0]
    1cfe:	0023      	movs	r3, r4
    1d00:	000a      	movs	r2, r1
    1d02:	2100      	movs	r1, #0
    1d04:	4d0e      	ldr	r5, [pc, #56]	; (1d40 <udi_msc_trans_block+0x84>)
    1d06:	47a8      	blx	r5
    1d08:	2800      	cmp	r0, #0
    1d0a:	d011      	beq.n	1d30 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1d0c:	4a0b      	ldr	r2, [pc, #44]	; (1d3c <udi_msc_trans_block+0x80>)
    1d0e:	7813      	ldrb	r3, [r2, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	d0fc      	beq.n	1d0e <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    1d14:	4b0d      	ldr	r3, [pc, #52]	; (1d4c <udi_msc_trans_block+0x90>)
    1d16:	781b      	ldrb	r3, [r3, #0]
			return false;
    1d18:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d1eb      	bne.n	1cf6 <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1d1e:	4b09      	ldr	r3, [pc, #36]	; (1d44 <udi_msc_trans_block+0x88>)
    1d20:	689a      	ldr	r2, [r3, #8]
    1d22:	1b14      	subs	r4, r2, r4
    1d24:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    1d26:	4b09      	ldr	r3, [pc, #36]	; (1d4c <udi_msc_trans_block+0x90>)
    1d28:	7818      	ldrb	r0, [r3, #0]
    1d2a:	2301      	movs	r3, #1
    1d2c:	4058      	eors	r0, r3
    1d2e:	e7e2      	b.n	1cf6 <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1d30:	2201      	movs	r2, #1
    1d32:	4b02      	ldr	r3, [pc, #8]	; (1d3c <udi_msc_trans_block+0x80>)
    1d34:	701a      	strb	r2, [r3, #0]
		return false;
    1d36:	2000      	movs	r0, #0
    1d38:	e7dd      	b.n	1cf6 <udi_msc_trans_block+0x3a>
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	20000070 	.word	0x20000070
    1d40:	00003c39 	.word	0x00003c39
    1d44:	20000074 	.word	0x20000074
    1d48:	0000147d 	.word	0x0000147d
    1d4c:	20000404 	.word	0x20000404

00001d50 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1d50:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1d52:	4b11      	ldr	r3, [pc, #68]	; (1d98 <udc_next_desc_in_iface+0x48>)
    1d54:	681b      	ldr	r3, [r3, #0]
    1d56:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1d58:	7894      	ldrb	r4, [r2, #2]
    1d5a:	78d3      	ldrb	r3, [r2, #3]
    1d5c:	021b      	lsls	r3, r3, #8
    1d5e:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1d60:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1d62:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1d64:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1d66:	4290      	cmp	r0, r2
    1d68:	d210      	bcs.n	1d8c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1d6a:	7843      	ldrb	r3, [r0, #1]
    1d6c:	2b04      	cmp	r3, #4
    1d6e:	d00f      	beq.n	1d90 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1d70:	428b      	cmp	r3, r1
    1d72:	d00a      	beq.n	1d8a <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1d74:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1d76:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1d78:	4290      	cmp	r0, r2
    1d7a:	d205      	bcs.n	1d88 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1d7c:	7843      	ldrb	r3, [r0, #1]
    1d7e:	2b04      	cmp	r3, #4
    1d80:	d008      	beq.n	1d94 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1d82:	428b      	cmp	r3, r1
    1d84:	d1f6      	bne.n	1d74 <udc_next_desc_in_iface+0x24>
    1d86:	e000      	b.n	1d8a <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1d88:	2000      	movs	r0, #0
}
    1d8a:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1d8c:	2000      	movs	r0, #0
    1d8e:	e7fc      	b.n	1d8a <udc_next_desc_in_iface+0x3a>
    1d90:	2000      	movs	r0, #0
    1d92:	e7fa      	b.n	1d8a <udc_next_desc_in_iface+0x3a>
    1d94:	2000      	movs	r0, #0
    1d96:	e7f8      	b.n	1d8a <udc_next_desc_in_iface+0x3a>
    1d98:	20000224 	.word	0x20000224

00001d9c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1d9c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1d9e:	4b03      	ldr	r3, [pc, #12]	; (1dac <udc_valid_address+0x10>)
    1da0:	885b      	ldrh	r3, [r3, #2]
    1da2:	207f      	movs	r0, #127	; 0x7f
    1da4:	4018      	ands	r0, r3
    1da6:	4b02      	ldr	r3, [pc, #8]	; (1db0 <udc_valid_address+0x14>)
    1da8:	4798      	blx	r3
}
    1daa:	bd10      	pop	{r4, pc}
    1dac:	2000064c 	.word	0x2000064c
    1db0:	00003e11 	.word	0x00003e11

00001db4 <udc_update_iface_desc>:
{
    1db4:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1db6:	4b19      	ldr	r3, [pc, #100]	; (1e1c <udc_update_iface_desc+0x68>)
    1db8:	781b      	ldrb	r3, [r3, #0]
		return false;
    1dba:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d029      	beq.n	1e14 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1dc0:	4b17      	ldr	r3, [pc, #92]	; (1e20 <udc_update_iface_desc+0x6c>)
    1dc2:	681b      	ldr	r3, [r3, #0]
    1dc4:	681b      	ldr	r3, [r3, #0]
    1dc6:	791c      	ldrb	r4, [r3, #4]
    1dc8:	4284      	cmp	r4, r0
    1dca:	d923      	bls.n	1e14 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1dcc:	4a15      	ldr	r2, [pc, #84]	; (1e24 <udc_update_iface_desc+0x70>)
    1dce:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1dd0:	789a      	ldrb	r2, [r3, #2]
    1dd2:	78dc      	ldrb	r4, [r3, #3]
    1dd4:	0224      	lsls	r4, r4, #8
    1dd6:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1dd8:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1dda:	42a3      	cmp	r3, r4
    1ddc:	d21c      	bcs.n	1e18 <udc_update_iface_desc+0x64>
    1dde:	2500      	movs	r5, #0
    1de0:	2601      	movs	r6, #1
    1de2:	e007      	b.n	1df4 <udc_update_iface_desc+0x40>
    1de4:	4a0f      	ldr	r2, [pc, #60]	; (1e24 <udc_update_iface_desc+0x70>)
    1de6:	6013      	str	r3, [r2, #0]
    1de8:	e00f      	b.n	1e0a <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1dea:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1dec:	189b      	adds	r3, r3, r2
    1dee:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1df0:	42a3      	cmp	r3, r4
    1df2:	d20c      	bcs.n	1e0e <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1df4:	785a      	ldrb	r2, [r3, #1]
    1df6:	2a04      	cmp	r2, #4
    1df8:	d1f7      	bne.n	1dea <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1dfa:	789a      	ldrb	r2, [r3, #2]
    1dfc:	4282      	cmp	r2, r0
    1dfe:	d1f4      	bne.n	1dea <udc_update_iface_desc+0x36>
    1e00:	78da      	ldrb	r2, [r3, #3]
    1e02:	428a      	cmp	r2, r1
    1e04:	d1f1      	bne.n	1dea <udc_update_iface_desc+0x36>
    1e06:	2d00      	cmp	r5, #0
    1e08:	d1ec      	bne.n	1de4 <udc_update_iface_desc+0x30>
				return true; // Interface found
    1e0a:	2201      	movs	r2, #1
    1e0c:	e002      	b.n	1e14 <udc_update_iface_desc+0x60>
    1e0e:	4a05      	ldr	r2, [pc, #20]	; (1e24 <udc_update_iface_desc+0x70>)
    1e10:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1e12:	2200      	movs	r2, #0
}
    1e14:	0010      	movs	r0, r2
    1e16:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1e18:	2200      	movs	r2, #0
    1e1a:	e7fb      	b.n	1e14 <udc_update_iface_desc+0x60>
    1e1c:	20000220 	.word	0x20000220
    1e20:	20000224 	.word	0x20000224
    1e24:	20000228 	.word	0x20000228

00001e28 <udc_iface_disable>:
{
    1e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e2a:	46c6      	mov	lr, r8
    1e2c:	b500      	push	{lr}
    1e2e:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1e30:	2100      	movs	r1, #0
    1e32:	4b13      	ldr	r3, [pc, #76]	; (1e80 <udc_iface_disable+0x58>)
    1e34:	4798      	blx	r3
    1e36:	1e05      	subs	r5, r0, #0
    1e38:	d103      	bne.n	1e42 <udc_iface_disable+0x1a>
}
    1e3a:	0028      	movs	r0, r5
    1e3c:	bc04      	pop	{r2}
    1e3e:	4690      	mov	r8, r2
    1e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e42:	4b10      	ldr	r3, [pc, #64]	; (1e84 <udc_iface_disable+0x5c>)
    1e44:	681b      	ldr	r3, [r3, #0]
    1e46:	685b      	ldr	r3, [r3, #4]
    1e48:	00a2      	lsls	r2, r4, #2
    1e4a:	58d3      	ldr	r3, [r2, r3]
    1e4c:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e4e:	68db      	ldr	r3, [r3, #12]
    1e50:	4798      	blx	r3
    1e52:	0001      	movs	r1, r0
    1e54:	0020      	movs	r0, r4
    1e56:	4b0a      	ldr	r3, [pc, #40]	; (1e80 <udc_iface_disable+0x58>)
    1e58:	4798      	blx	r3
    1e5a:	1e05      	subs	r5, r0, #0
    1e5c:	d0ed      	beq.n	1e3a <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1e5e:	4b0a      	ldr	r3, [pc, #40]	; (1e88 <udc_iface_disable+0x60>)
    1e60:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1e62:	4e0a      	ldr	r6, [pc, #40]	; (1e8c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1e64:	4f0a      	ldr	r7, [pc, #40]	; (1e90 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1e66:	2105      	movs	r1, #5
    1e68:	0020      	movs	r0, r4
    1e6a:	47b0      	blx	r6
    1e6c:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1e6e:	d002      	beq.n	1e76 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1e70:	7880      	ldrb	r0, [r0, #2]
    1e72:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1e74:	e7f7      	b.n	1e66 <udc_iface_disable+0x3e>
	udi_api->disable();
    1e76:	4643      	mov	r3, r8
    1e78:	685b      	ldr	r3, [r3, #4]
    1e7a:	4798      	blx	r3
	return true;
    1e7c:	e7dd      	b.n	1e3a <udc_iface_disable+0x12>
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	00001db5 	.word	0x00001db5
    1e84:	20000224 	.word	0x20000224
    1e88:	20000228 	.word	0x20000228
    1e8c:	00001d51 	.word	0x00001d51
    1e90:	000038f9 	.word	0x000038f9

00001e94 <udc_iface_enable>:
{
    1e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e96:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1e98:	4b0f      	ldr	r3, [pc, #60]	; (1ed8 <udc_iface_enable+0x44>)
    1e9a:	4798      	blx	r3
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d019      	beq.n	1ed4 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1ea0:	4b0e      	ldr	r3, [pc, #56]	; (1edc <udc_iface_enable+0x48>)
    1ea2:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1ea4:	4e0e      	ldr	r6, [pc, #56]	; (1ee0 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1ea6:	4f0f      	ldr	r7, [pc, #60]	; (1ee4 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1ea8:	2105      	movs	r1, #5
    1eaa:	0020      	movs	r0, r4
    1eac:	47b0      	blx	r6
    1eae:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1eb0:	d009      	beq.n	1ec6 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1eb2:	7903      	ldrb	r3, [r0, #4]
    1eb4:	7942      	ldrb	r2, [r0, #5]
    1eb6:	0212      	lsls	r2, r2, #8
    1eb8:	431a      	orrs	r2, r3
    1eba:	78c1      	ldrb	r1, [r0, #3]
    1ebc:	7880      	ldrb	r0, [r0, #2]
    1ebe:	47b8      	blx	r7
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d1f1      	bne.n	1ea8 <udc_iface_enable+0x14>
    1ec4:	e006      	b.n	1ed4 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1ec6:	4b08      	ldr	r3, [pc, #32]	; (1ee8 <udc_iface_enable+0x54>)
    1ec8:	681b      	ldr	r3, [r3, #0]
    1eca:	685b      	ldr	r3, [r3, #4]
    1ecc:	00ad      	lsls	r5, r5, #2
    1ece:	58eb      	ldr	r3, [r5, r3]
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	4798      	blx	r3
}
    1ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	00001db5 	.word	0x00001db5
    1edc:	20000228 	.word	0x20000228
    1ee0:	00001d51 	.word	0x00001d51
    1ee4:	00003951 	.word	0x00003951
    1ee8:	20000224 	.word	0x20000224

00001eec <udc_start>:
{
    1eec:	b510      	push	{r4, lr}
	udd_enable();
    1eee:	4b01      	ldr	r3, [pc, #4]	; (1ef4 <udc_start+0x8>)
    1ef0:	4798      	blx	r3
}
    1ef2:	bd10      	pop	{r4, pc}
    1ef4:	00003f1d 	.word	0x00003f1d

00001ef8 <udc_reset>:
{
    1ef8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1efa:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <udc_reset+0x3c>)
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	2b00      	cmp	r3, #0
    1f00:	d011      	beq.n	1f26 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f02:	4b0d      	ldr	r3, [pc, #52]	; (1f38 <udc_reset+0x40>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1f08:	791b      	ldrb	r3, [r3, #4]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d00b      	beq.n	1f26 <udc_reset+0x2e>
    1f0e:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1f10:	4e0a      	ldr	r6, [pc, #40]	; (1f3c <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f12:	4d09      	ldr	r5, [pc, #36]	; (1f38 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1f14:	0020      	movs	r0, r4
    1f16:	47b0      	blx	r6
				iface_num++) {
    1f18:	3401      	adds	r4, #1
    1f1a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f1c:	682b      	ldr	r3, [r5, #0]
    1f1e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1f20:	791b      	ldrb	r3, [r3, #4]
    1f22:	42a3      	cmp	r3, r4
    1f24:	d8f6      	bhi.n	1f14 <udc_reset+0x1c>
	udc_num_configuration = 0;
    1f26:	2200      	movs	r2, #0
    1f28:	4b02      	ldr	r3, [pc, #8]	; (1f34 <udc_reset+0x3c>)
    1f2a:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1f2c:	3201      	adds	r2, #1
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <udc_reset+0x48>)
    1f30:	801a      	strh	r2, [r3, #0]
}
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    1f34:	20000220 	.word	0x20000220
    1f38:	20000224 	.word	0x20000224
    1f3c:	00001e29 	.word	0x00001e29
    1f40:	20000216 	.word	0x20000216

00001f44 <udc_sof_notify>:
{
    1f44:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1f46:	4b0e      	ldr	r3, [pc, #56]	; (1f80 <udc_sof_notify+0x3c>)
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d017      	beq.n	1f7e <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f4e:	4b0d      	ldr	r3, [pc, #52]	; (1f84 <udc_sof_notify+0x40>)
    1f50:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1f52:	681a      	ldr	r2, [r3, #0]
    1f54:	7912      	ldrb	r2, [r2, #4]
    1f56:	2a00      	cmp	r2, #0
    1f58:	d011      	beq.n	1f7e <udc_sof_notify+0x3a>
    1f5a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f5c:	4d09      	ldr	r5, [pc, #36]	; (1f84 <udc_sof_notify+0x40>)
    1f5e:	e006      	b.n	1f6e <udc_sof_notify+0x2a>
				iface_num++) {
    1f60:	3401      	adds	r4, #1
    1f62:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f64:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1f66:	681a      	ldr	r2, [r3, #0]
    1f68:	7912      	ldrb	r2, [r2, #4]
    1f6a:	42a2      	cmp	r2, r4
    1f6c:	d907      	bls.n	1f7e <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1f6e:	685b      	ldr	r3, [r3, #4]
    1f70:	00a2      	lsls	r2, r4, #2
    1f72:	58d3      	ldr	r3, [r2, r3]
    1f74:	691b      	ldr	r3, [r3, #16]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d0f2      	beq.n	1f60 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1f7a:	4798      	blx	r3
    1f7c:	e7f0      	b.n	1f60 <udc_sof_notify+0x1c>
}
    1f7e:	bd70      	pop	{r4, r5, r6, pc}
    1f80:	20000220 	.word	0x20000220
    1f84:	20000224 	.word	0x20000224

00001f88 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1f8a:	4bac      	ldr	r3, [pc, #688]	; (223c <STACK_SIZE+0x23c>)
    1f8c:	2200      	movs	r2, #0
    1f8e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1f90:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1f92:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	b25a      	sxtb	r2, r3
    1f98:	2a00      	cmp	r2, #0
    1f9a:	db13      	blt.n	1fc4 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1f9c:	2260      	movs	r2, #96	; 0x60
    1f9e:	421a      	tst	r2, r3
    1fa0:	d100      	bne.n	1fa4 <udc_process_setup+0x1c>
    1fa2:	e0da      	b.n	215a <STACK_SIZE+0x15a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1fa4:	4ba5      	ldr	r3, [pc, #660]	; (223c <STACK_SIZE+0x23c>)
    1fa6:	781a      	ldrb	r2, [r3, #0]
    1fa8:	231f      	movs	r3, #31
    1faa:	4013      	ands	r3, r2
    1fac:	2b01      	cmp	r3, #1
    1fae:	d100      	bne.n	1fb2 <udc_process_setup+0x2a>
    1fb0:	e176      	b.n	22a0 <STACK_SIZE+0x2a0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1fb2:	4ba2      	ldr	r3, [pc, #648]	; (223c <STACK_SIZE+0x23c>)
    1fb4:	781a      	ldrb	r2, [r3, #0]
    1fb6:	231f      	movs	r3, #31
    1fb8:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1fba:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1fbc:	2b02      	cmp	r3, #2
    1fbe:	d100      	bne.n	1fc2 <udc_process_setup+0x3a>
    1fc0:	e1cc      	b.n	235c <STACK_SIZE+0x35c>
#endif
}
    1fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1fc4:	4a9d      	ldr	r2, [pc, #628]	; (223c <STACK_SIZE+0x23c>)
    1fc6:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1fc8:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1fca:	2a00      	cmp	r2, #0
    1fcc:	d0f9      	beq.n	1fc2 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1fce:	2160      	movs	r1, #96	; 0x60
    1fd0:	4219      	tst	r1, r3
    1fd2:	d1e7      	bne.n	1fa4 <udc_process_setup+0x1c>
    1fd4:	211f      	movs	r1, #31
    1fd6:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1fd8:	d108      	bne.n	1fec <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1fda:	4998      	ldr	r1, [pc, #608]	; (223c <STACK_SIZE+0x23c>)
    1fdc:	7849      	ldrb	r1, [r1, #1]
    1fde:	2906      	cmp	r1, #6
    1fe0:	d023      	beq.n	202a <STACK_SIZE+0x2a>
    1fe2:	2908      	cmp	r1, #8
    1fe4:	d100      	bne.n	1fe8 <udc_process_setup+0x60>
    1fe6:	e087      	b.n	20f8 <STACK_SIZE+0xf8>
    1fe8:	2900      	cmp	r1, #0
    1fea:	d017      	beq.n	201c <STACK_SIZE+0x1c>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1fec:	2b01      	cmp	r3, #1
    1fee:	d100      	bne.n	1ff2 <udc_process_setup+0x6a>
    1ff0:	e08a      	b.n	2108 <STACK_SIZE+0x108>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1ff2:	2b02      	cmp	r3, #2
    1ff4:	d1d6      	bne.n	1fa4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ff6:	4b91      	ldr	r3, [pc, #580]	; (223c <STACK_SIZE+0x23c>)
    1ff8:	785b      	ldrb	r3, [r3, #1]
	return false;
    1ffa:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1ffc:	2b00      	cmp	r3, #0
    1ffe:	d000      	beq.n	2002 <STACK_SIZE+0x2>
    2000:	e1a8      	b.n	2354 <STACK_SIZE+0x354>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    2002:	2a02      	cmp	r2, #2
    2004:	d1d5      	bne.n	1fb2 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    2006:	4b8d      	ldr	r3, [pc, #564]	; (223c <STACK_SIZE+0x23c>)
    2008:	7918      	ldrb	r0, [r3, #4]
    200a:	4b8d      	ldr	r3, [pc, #564]	; (2240 <STACK_SIZE+0x240>)
    200c:	4798      	blx	r3
    200e:	4b8d      	ldr	r3, [pc, #564]	; (2244 <STACK_SIZE+0x244>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    2010:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    2012:	2102      	movs	r1, #2
    2014:	0018      	movs	r0, r3
    2016:	4b8c      	ldr	r3, [pc, #560]	; (2248 <STACK_SIZE+0x248>)
    2018:	4798      	blx	r3
    201a:	e0ff      	b.n	221c <STACK_SIZE+0x21c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    201c:	2a02      	cmp	r2, #2
    201e:	d1c8      	bne.n	1fb2 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    2020:	3102      	adds	r1, #2
    2022:	488a      	ldr	r0, [pc, #552]	; (224c <STACK_SIZE+0x24c>)
    2024:	4b88      	ldr	r3, [pc, #544]	; (2248 <STACK_SIZE+0x248>)
    2026:	4798      	blx	r3
    2028:	e0f8      	b.n	221c <STACK_SIZE+0x21c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    202a:	4b84      	ldr	r3, [pc, #528]	; (223c <STACK_SIZE+0x23c>)
    202c:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    202e:	0a13      	lsrs	r3, r2, #8
    2030:	2b02      	cmp	r3, #2
    2032:	d023      	beq.n	207c <STACK_SIZE+0x7c>
    2034:	b2d9      	uxtb	r1, r3
    2036:	2902      	cmp	r1, #2
    2038:	d90f      	bls.n	205a <STACK_SIZE+0x5a>
    203a:	2b03      	cmp	r3, #3
    203c:	d034      	beq.n	20a8 <STACK_SIZE+0xa8>
    203e:	2b0f      	cmp	r3, #15
    2040:	d000      	beq.n	2044 <STACK_SIZE+0x44>
    2042:	e184      	b.n	234e <STACK_SIZE+0x34e>
		if (udc_config.conf_bos == NULL) {
    2044:	4b82      	ldr	r3, [pc, #520]	; (2250 <STACK_SIZE+0x250>)
    2046:	6898      	ldr	r0, [r3, #8]
    2048:	2800      	cmp	r0, #0
    204a:	d0b2      	beq.n	1fb2 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    204c:	7883      	ldrb	r3, [r0, #2]
    204e:	78c1      	ldrb	r1, [r0, #3]
    2050:	0209      	lsls	r1, r1, #8
    2052:	4319      	orrs	r1, r3
    2054:	4b7c      	ldr	r3, [pc, #496]	; (2248 <STACK_SIZE+0x248>)
    2056:	4798      	blx	r3
    2058:	e007      	b.n	206a <STACK_SIZE+0x6a>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    205a:	2b01      	cmp	r3, #1
    205c:	d000      	beq.n	2060 <STACK_SIZE+0x60>
    205e:	e176      	b.n	234e <STACK_SIZE+0x34e>
				(uint8_t *) udc_config.confdev_lsfs,
    2060:	4b7b      	ldr	r3, [pc, #492]	; (2250 <STACK_SIZE+0x250>)
    2062:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    2064:	7801      	ldrb	r1, [r0, #0]
    2066:	4b78      	ldr	r3, [pc, #480]	; (2248 <STACK_SIZE+0x248>)
    2068:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    206a:	4b74      	ldr	r3, [pc, #464]	; (223c <STACK_SIZE+0x23c>)
    206c:	88da      	ldrh	r2, [r3, #6]
    206e:	899b      	ldrh	r3, [r3, #12]
    2070:	4293      	cmp	r3, r2
    2072:	d800      	bhi.n	2076 <STACK_SIZE+0x76>
    2074:	e0d2      	b.n	221c <STACK_SIZE+0x21c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    2076:	4b71      	ldr	r3, [pc, #452]	; (223c <STACK_SIZE+0x23c>)
    2078:	819a      	strh	r2, [r3, #12]
    207a:	e0cf      	b.n	221c <STACK_SIZE+0x21c>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    207c:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    207e:	4b74      	ldr	r3, [pc, #464]	; (2250 <STACK_SIZE+0x250>)
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	7c5b      	ldrb	r3, [r3, #17]
    2084:	4293      	cmp	r3, r2
    2086:	d800      	bhi.n	208a <STACK_SIZE+0x8a>
    2088:	e793      	b.n	1fb2 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    208a:	4b71      	ldr	r3, [pc, #452]	; (2250 <STACK_SIZE+0x250>)
    208c:	685b      	ldr	r3, [r3, #4]
    208e:	00d2      	lsls	r2, r2, #3
    2090:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    2092:	7883      	ldrb	r3, [r0, #2]
    2094:	78c1      	ldrb	r1, [r0, #3]
    2096:	0209      	lsls	r1, r1, #8
    2098:	4319      	orrs	r1, r3
    209a:	4b6b      	ldr	r3, [pc, #428]	; (2248 <STACK_SIZE+0x248>)
    209c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    209e:	4b67      	ldr	r3, [pc, #412]	; (223c <STACK_SIZE+0x23c>)
    20a0:	689b      	ldr	r3, [r3, #8]
    20a2:	2202      	movs	r2, #2
    20a4:	705a      	strb	r2, [r3, #1]
    20a6:	e7e0      	b.n	206a <STACK_SIZE+0x6a>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    20a8:	23ff      	movs	r3, #255	; 0xff
    20aa:	401a      	ands	r2, r3
    20ac:	2a01      	cmp	r2, #1
    20ae:	d020      	beq.n	20f2 <STACK_SIZE+0xf2>
    20b0:	2a00      	cmp	r2, #0
    20b2:	d019      	beq.n	20e8 <STACK_SIZE+0xe8>
    20b4:	2a02      	cmp	r2, #2
    20b6:	d100      	bne.n	20ba <STACK_SIZE+0xba>
    20b8:	e178      	b.n	23ac <STACK_SIZE+0x3ac>
    20ba:	2a03      	cmp	r2, #3
    20bc:	d000      	beq.n	20c0 <STACK_SIZE+0xc0>
    20be:	e771      	b.n	1fa4 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    20c0:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    20c2:	4c64      	ldr	r4, [pc, #400]	; (2254 <STACK_SIZE+0x254>)
    20c4:	4a64      	ldr	r2, [pc, #400]	; (2258 <STACK_SIZE+0x258>)
    20c6:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    20c8:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    20ca:	5ce0      	ldrb	r0, [r4, r3]
    20cc:	8010      	strh	r0, [r2, #0]
    20ce:	3301      	adds	r3, #1
    20d0:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    20d2:	b2d8      	uxtb	r0, r3
    20d4:	4281      	cmp	r1, r0
    20d6:	d8f8      	bhi.n	20ca <STACK_SIZE+0xca>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    20d8:	0049      	lsls	r1, r1, #1
    20da:	3102      	adds	r1, #2
    20dc:	485e      	ldr	r0, [pc, #376]	; (2258 <STACK_SIZE+0x258>)
    20de:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    20e0:	b289      	uxth	r1, r1
    20e2:	4b59      	ldr	r3, [pc, #356]	; (2248 <STACK_SIZE+0x248>)
    20e4:	4798      	blx	r3
    20e6:	e7c0      	b.n	206a <STACK_SIZE+0x6a>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    20e8:	2104      	movs	r1, #4
    20ea:	485c      	ldr	r0, [pc, #368]	; (225c <STACK_SIZE+0x25c>)
    20ec:	4b56      	ldr	r3, [pc, #344]	; (2248 <STACK_SIZE+0x248>)
    20ee:	4798      	blx	r3
    20f0:	e7bb      	b.n	206a <STACK_SIZE+0x6a>
		str = udc_string_manufacturer_name;
    20f2:	4c5b      	ldr	r4, [pc, #364]	; (2260 <STACK_SIZE+0x260>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    20f4:	2109      	movs	r1, #9
    20f6:	e7e5      	b.n	20c4 <STACK_SIZE+0xc4>
	if (udd_g_ctrlreq.req.wLength != 1) {
    20f8:	2a01      	cmp	r2, #1
    20fa:	d000      	beq.n	20fe <STACK_SIZE+0xfe>
    20fc:	e759      	b.n	1fb2 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    20fe:	2101      	movs	r1, #1
    2100:	4858      	ldr	r0, [pc, #352]	; (2264 <STACK_SIZE+0x264>)
    2102:	4b51      	ldr	r3, [pc, #324]	; (2248 <STACK_SIZE+0x248>)
    2104:	4798      	blx	r3
    2106:	e089      	b.n	221c <STACK_SIZE+0x21c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2108:	494c      	ldr	r1, [pc, #304]	; (223c <STACK_SIZE+0x23c>)
    210a:	7849      	ldrb	r1, [r1, #1]
    210c:	290a      	cmp	r1, #10
    210e:	d000      	beq.n	2112 <STACK_SIZE+0x112>
    2110:	e76f      	b.n	1ff2 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2112:	2a01      	cmp	r2, #1
    2114:	d000      	beq.n	2118 <STACK_SIZE+0x118>
    2116:	e0c3      	b.n	22a0 <STACK_SIZE+0x2a0>
	if (!udc_num_configuration) {
    2118:	4b52      	ldr	r3, [pc, #328]	; (2264 <STACK_SIZE+0x264>)
    211a:	781b      	ldrb	r3, [r3, #0]
    211c:	2b00      	cmp	r3, #0
    211e:	d100      	bne.n	2122 <STACK_SIZE+0x122>
    2120:	e0be      	b.n	22a0 <STACK_SIZE+0x2a0>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2122:	4b46      	ldr	r3, [pc, #280]	; (223c <STACK_SIZE+0x23c>)
    2124:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2126:	4b50      	ldr	r3, [pc, #320]	; (2268 <STACK_SIZE+0x268>)
    2128:	681d      	ldr	r5, [r3, #0]
    212a:	682b      	ldr	r3, [r5, #0]
    212c:	791b      	ldrb	r3, [r3, #4]
    212e:	42a3      	cmp	r3, r4
    2130:	d800      	bhi.n	2134 <STACK_SIZE+0x134>
    2132:	e0b5      	b.n	22a0 <STACK_SIZE+0x2a0>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2134:	2100      	movs	r1, #0
    2136:	0020      	movs	r0, r4
    2138:	4b4c      	ldr	r3, [pc, #304]	; (226c <STACK_SIZE+0x26c>)
    213a:	4798      	blx	r3
    213c:	2800      	cmp	r0, #0
    213e:	d100      	bne.n	2142 <STACK_SIZE+0x142>
    2140:	e730      	b.n	1fa4 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2142:	686b      	ldr	r3, [r5, #4]
    2144:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    2146:	58e3      	ldr	r3, [r4, r3]
    2148:	68db      	ldr	r3, [r3, #12]
    214a:	4798      	blx	r3
    214c:	4b48      	ldr	r3, [pc, #288]	; (2270 <STACK_SIZE+0x270>)
    214e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    2150:	2101      	movs	r1, #1
    2152:	0018      	movs	r0, r3
    2154:	4b3c      	ldr	r3, [pc, #240]	; (2248 <STACK_SIZE+0x248>)
    2156:	4798      	blx	r3
    2158:	e060      	b.n	221c <STACK_SIZE+0x21c>
    215a:	221f      	movs	r2, #31
    215c:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    215e:	d15f      	bne.n	2220 <STACK_SIZE+0x220>
			switch (udd_g_ctrlreq.req.bRequest) {
    2160:	4a36      	ldr	r2, [pc, #216]	; (223c <STACK_SIZE+0x23c>)
    2162:	7852      	ldrb	r2, [r2, #1]
    2164:	2a03      	cmp	r2, #3
    2166:	d100      	bne.n	216a <STACK_SIZE+0x16a>
    2168:	e0f3      	b.n	2352 <STACK_SIZE+0x352>
    216a:	b2d1      	uxtb	r1, r2
    216c:	2903      	cmp	r1, #3
    216e:	d93b      	bls.n	21e8 <STACK_SIZE+0x1e8>
    2170:	2a05      	cmp	r2, #5
    2172:	d04b      	beq.n	220c <STACK_SIZE+0x20c>
    2174:	2a09      	cmp	r2, #9
    2176:	d153      	bne.n	2220 <STACK_SIZE+0x220>
	if (udd_g_ctrlreq.req.wLength) {
    2178:	4b30      	ldr	r3, [pc, #192]	; (223c <STACK_SIZE+0x23c>)
    217a:	88db      	ldrh	r3, [r3, #6]
    217c:	2b00      	cmp	r3, #0
    217e:	d000      	beq.n	2182 <STACK_SIZE+0x182>
    2180:	e717      	b.n	1fb2 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    2182:	4b3c      	ldr	r3, [pc, #240]	; (2274 <STACK_SIZE+0x274>)
    2184:	4798      	blx	r3
    2186:	2800      	cmp	r0, #0
    2188:	d100      	bne.n	218c <STACK_SIZE+0x18c>
    218a:	e70b      	b.n	1fa4 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    218c:	4b2b      	ldr	r3, [pc, #172]	; (223c <STACK_SIZE+0x23c>)
    218e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    2190:	4b2f      	ldr	r3, [pc, #188]	; (2250 <STACK_SIZE+0x250>)
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    2196:	429a      	cmp	r2, r3
    2198:	dd00      	ble.n	219c <STACK_SIZE+0x19c>
    219a:	e703      	b.n	1fa4 <udc_process_setup+0x1c>
	udc_reset();
    219c:	4b36      	ldr	r3, [pc, #216]	; (2278 <STACK_SIZE+0x278>)
    219e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    21a0:	4b26      	ldr	r3, [pc, #152]	; (223c <STACK_SIZE+0x23c>)
    21a2:	789b      	ldrb	r3, [r3, #2]
    21a4:	4a2f      	ldr	r2, [pc, #188]	; (2264 <STACK_SIZE+0x264>)
    21a6:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    21a8:	2b00      	cmp	r3, #0
    21aa:	d037      	beq.n	221c <STACK_SIZE+0x21c>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    21ac:	4a33      	ldr	r2, [pc, #204]	; (227c <STACK_SIZE+0x27c>)
    21ae:	4694      	mov	ip, r2
    21b0:	4463      	add	r3, ip
    21b2:	00db      	lsls	r3, r3, #3
    21b4:	4a26      	ldr	r2, [pc, #152]	; (2250 <STACK_SIZE+0x250>)
    21b6:	6852      	ldr	r2, [r2, #4]
    21b8:	18d3      	adds	r3, r2, r3
    21ba:	4a2b      	ldr	r2, [pc, #172]	; (2268 <STACK_SIZE+0x268>)
    21bc:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21be:	681b      	ldr	r3, [r3, #0]
    21c0:	791b      	ldrb	r3, [r3, #4]
    21c2:	2b00      	cmp	r3, #0
    21c4:	d02a      	beq.n	221c <STACK_SIZE+0x21c>
    21c6:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    21c8:	4d2d      	ldr	r5, [pc, #180]	; (2280 <STACK_SIZE+0x280>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21ca:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    21cc:	2100      	movs	r1, #0
    21ce:	0020      	movs	r0, r4
    21d0:	47a8      	blx	r5
    21d2:	2800      	cmp	r0, #0
    21d4:	d100      	bne.n	21d8 <STACK_SIZE+0x1d8>
    21d6:	e6e5      	b.n	1fa4 <udc_process_setup+0x1c>
			iface_num++) {
    21d8:	3401      	adds	r4, #1
    21da:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    21dc:	6833      	ldr	r3, [r6, #0]
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	791b      	ldrb	r3, [r3, #4]
    21e2:	42a3      	cmp	r3, r4
    21e4:	d8f2      	bhi.n	21cc <STACK_SIZE+0x1cc>
    21e6:	e019      	b.n	221c <STACK_SIZE+0x21c>
			switch (udd_g_ctrlreq.req.bRequest) {
    21e8:	2a01      	cmp	r2, #1
    21ea:	d119      	bne.n	2220 <STACK_SIZE+0x220>
	if (udd_g_ctrlreq.req.wLength) {
    21ec:	4b13      	ldr	r3, [pc, #76]	; (223c <STACK_SIZE+0x23c>)
    21ee:	88db      	ldrh	r3, [r3, #6]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d000      	beq.n	21f6 <STACK_SIZE+0x1f6>
    21f4:	e6dd      	b.n	1fb2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    21f6:	4b11      	ldr	r3, [pc, #68]	; (223c <STACK_SIZE+0x23c>)
    21f8:	885b      	ldrh	r3, [r3, #2]
    21fa:	2b01      	cmp	r3, #1
    21fc:	d000      	beq.n	2200 <STACK_SIZE+0x200>
    21fe:	e6d8      	b.n	1fb2 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2200:	4a12      	ldr	r2, [pc, #72]	; (224c <STACK_SIZE+0x24c>)
    2202:	8813      	ldrh	r3, [r2, #0]
    2204:	2102      	movs	r1, #2
    2206:	438b      	bics	r3, r1
    2208:	8013      	strh	r3, [r2, #0]
    220a:	e007      	b.n	221c <STACK_SIZE+0x21c>
	if (udd_g_ctrlreq.req.wLength) {
    220c:	4b0b      	ldr	r3, [pc, #44]	; (223c <STACK_SIZE+0x23c>)
    220e:	88db      	ldrh	r3, [r3, #6]
    2210:	2b00      	cmp	r3, #0
    2212:	d000      	beq.n	2216 <STACK_SIZE+0x216>
    2214:	e6cd      	b.n	1fb2 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    2216:	4a1b      	ldr	r2, [pc, #108]	; (2284 <STACK_SIZE+0x284>)
    2218:	4b08      	ldr	r3, [pc, #32]	; (223c <STACK_SIZE+0x23c>)
    221a:	611a      	str	r2, [r3, #16]
			return true;
    221c:	2001      	movs	r0, #1
    221e:	e6d0      	b.n	1fc2 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2220:	2b01      	cmp	r3, #1
    2222:	d031      	beq.n	2288 <STACK_SIZE+0x288>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2224:	2b02      	cmp	r3, #2
    2226:	d000      	beq.n	222a <STACK_SIZE+0x22a>
    2228:	e6bc      	b.n	1fa4 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    222a:	4b04      	ldr	r3, [pc, #16]	; (223c <STACK_SIZE+0x23c>)
    222c:	785b      	ldrb	r3, [r3, #1]
    222e:	2b01      	cmp	r3, #1
    2230:	d06c      	beq.n	230c <STACK_SIZE+0x30c>
    2232:	2b03      	cmp	r3, #3
    2234:	d100      	bne.n	2238 <STACK_SIZE+0x238>
    2236:	e078      	b.n	232a <STACK_SIZE+0x32a>
	return false;
    2238:	2000      	movs	r0, #0
    223a:	e08b      	b.n	2354 <STACK_SIZE+0x354>
    223c:	2000064c 	.word	0x2000064c
    2240:	00003a59 	.word	0x00003a59
    2244:	20000218 	.word	0x20000218
    2248:	00003e31 	.word	0x00003e31
    224c:	20000216 	.word	0x20000216
    2250:	200000d8 	.word	0x200000d8
    2254:	0000a9d8 	.word	0x0000a9d8
    2258:	200000a8 	.word	0x200000a8
    225c:	200000c4 	.word	0x200000c4
    2260:	200000c8 	.word	0x200000c8
    2264:	20000220 	.word	0x20000220
    2268:	20000224 	.word	0x20000224
    226c:	00001db5 	.word	0x00001db5
    2270:	2000021c 	.word	0x2000021c
    2274:	00003e21 	.word	0x00003e21
    2278:	00001ef9 	.word	0x00001ef9
    227c:	1fffffff 	.word	0x1fffffff
    2280:	00001e95 	.word	0x00001e95
    2284:	00001d9d 	.word	0x00001d9d
			switch (udd_g_ctrlreq.req.bRequest) {
    2288:	4a4a      	ldr	r2, [pc, #296]	; (23b4 <STACK_SIZE+0x3b4>)
    228a:	7852      	ldrb	r2, [r2, #1]
    228c:	2a0b      	cmp	r2, #11
    228e:	d1c9      	bne.n	2224 <STACK_SIZE+0x224>
	if (udd_g_ctrlreq.req.wLength) {
    2290:	4b48      	ldr	r3, [pc, #288]	; (23b4 <STACK_SIZE+0x3b4>)
    2292:	88db      	ldrh	r3, [r3, #6]
    2294:	2b00      	cmp	r3, #0
    2296:	d103      	bne.n	22a0 <STACK_SIZE+0x2a0>
	if (!udc_num_configuration) {
    2298:	4b47      	ldr	r3, [pc, #284]	; (23b8 <STACK_SIZE+0x3b8>)
    229a:	781b      	ldrb	r3, [r3, #0]
    229c:	2b00      	cmp	r3, #0
    229e:	d127      	bne.n	22f0 <STACK_SIZE+0x2f0>
	if (0 == udc_num_configuration) {
    22a0:	4b45      	ldr	r3, [pc, #276]	; (23b8 <STACK_SIZE+0x3b8>)
    22a2:	781b      	ldrb	r3, [r3, #0]
	return false;
    22a4:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    22a6:	2b00      	cmp	r3, #0
    22a8:	d100      	bne.n	22ac <STACK_SIZE+0x2ac>
    22aa:	e68a      	b.n	1fc2 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    22ac:	4b41      	ldr	r3, [pc, #260]	; (23b4 <STACK_SIZE+0x3b4>)
    22ae:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    22b0:	4b42      	ldr	r3, [pc, #264]	; (23bc <STACK_SIZE+0x3bc>)
    22b2:	681d      	ldr	r5, [r3, #0]
    22b4:	682b      	ldr	r3, [r5, #0]
    22b6:	791b      	ldrb	r3, [r3, #4]
    22b8:	42a3      	cmp	r3, r4
    22ba:	d800      	bhi.n	22be <STACK_SIZE+0x2be>
    22bc:	e681      	b.n	1fc2 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    22be:	2100      	movs	r1, #0
    22c0:	0020      	movs	r0, r4
    22c2:	4b3f      	ldr	r3, [pc, #252]	; (23c0 <STACK_SIZE+0x3c0>)
    22c4:	4798      	blx	r3
    22c6:	2800      	cmp	r0, #0
    22c8:	d100      	bne.n	22cc <STACK_SIZE+0x2cc>
    22ca:	e672      	b.n	1fb2 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    22cc:	686b      	ldr	r3, [r5, #4]
    22ce:	00a2      	lsls	r2, r4, #2
    22d0:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    22d2:	68eb      	ldr	r3, [r5, #12]
    22d4:	4798      	blx	r3
    22d6:	0001      	movs	r1, r0
    22d8:	0020      	movs	r0, r4
    22da:	4b39      	ldr	r3, [pc, #228]	; (23c0 <STACK_SIZE+0x3c0>)
    22dc:	4798      	blx	r3
    22de:	2800      	cmp	r0, #0
    22e0:	d100      	bne.n	22e4 <STACK_SIZE+0x2e4>
    22e2:	e666      	b.n	1fb2 <udc_process_setup+0x2a>
	return udi_api->setup();
    22e4:	68ab      	ldr	r3, [r5, #8]
    22e6:	4798      	blx	r3
		if (udc_req_iface()) {
    22e8:	2800      	cmp	r0, #0
    22ea:	d000      	beq.n	22ee <STACK_SIZE+0x2ee>
    22ec:	e669      	b.n	1fc2 <udc_process_setup+0x3a>
    22ee:	e660      	b.n	1fb2 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    22f0:	4b30      	ldr	r3, [pc, #192]	; (23b4 <STACK_SIZE+0x3b4>)
    22f2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    22f4:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    22f6:	0028      	movs	r0, r5
    22f8:	4b32      	ldr	r3, [pc, #200]	; (23c4 <STACK_SIZE+0x3c4>)
    22fa:	4798      	blx	r3
    22fc:	2800      	cmp	r0, #0
    22fe:	d100      	bne.n	2302 <STACK_SIZE+0x302>
    2300:	e650      	b.n	1fa4 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    2302:	b2e1      	uxtb	r1, r4
    2304:	0028      	movs	r0, r5
    2306:	4b30      	ldr	r3, [pc, #192]	; (23c8 <STACK_SIZE+0x3c8>)
    2308:	4798      	blx	r3
    230a:	e023      	b.n	2354 <STACK_SIZE+0x354>
	if (udd_g_ctrlreq.req.wLength) {
    230c:	4b29      	ldr	r3, [pc, #164]	; (23b4 <STACK_SIZE+0x3b4>)
    230e:	88db      	ldrh	r3, [r3, #6]
    2310:	2b00      	cmp	r3, #0
    2312:	d000      	beq.n	2316 <STACK_SIZE+0x316>
    2314:	e64d      	b.n	1fb2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2316:	4b27      	ldr	r3, [pc, #156]	; (23b4 <STACK_SIZE+0x3b4>)
    2318:	885b      	ldrh	r3, [r3, #2]
    231a:	2b00      	cmp	r3, #0
    231c:	d000      	beq.n	2320 <STACK_SIZE+0x320>
    231e:	e648      	b.n	1fb2 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2320:	4b24      	ldr	r3, [pc, #144]	; (23b4 <STACK_SIZE+0x3b4>)
    2322:	7918      	ldrb	r0, [r3, #4]
    2324:	4b29      	ldr	r3, [pc, #164]	; (23cc <STACK_SIZE+0x3cc>)
    2326:	4798      	blx	r3
    2328:	e014      	b.n	2354 <STACK_SIZE+0x354>
	if (udd_g_ctrlreq.req.wLength) {
    232a:	4b22      	ldr	r3, [pc, #136]	; (23b4 <STACK_SIZE+0x3b4>)
    232c:	88db      	ldrh	r3, [r3, #6]
    232e:	2b00      	cmp	r3, #0
    2330:	d000      	beq.n	2334 <STACK_SIZE+0x334>
    2332:	e63e      	b.n	1fb2 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2334:	4b1f      	ldr	r3, [pc, #124]	; (23b4 <STACK_SIZE+0x3b4>)
    2336:	885b      	ldrh	r3, [r3, #2]
    2338:	2b00      	cmp	r3, #0
    233a:	d000      	beq.n	233e <STACK_SIZE+0x33e>
    233c:	e639      	b.n	1fb2 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    233e:	4c1d      	ldr	r4, [pc, #116]	; (23b4 <STACK_SIZE+0x3b4>)
    2340:	7920      	ldrb	r0, [r4, #4]
    2342:	4b23      	ldr	r3, [pc, #140]	; (23d0 <STACK_SIZE+0x3d0>)
    2344:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2346:	7920      	ldrb	r0, [r4, #4]
    2348:	4b22      	ldr	r3, [pc, #136]	; (23d4 <STACK_SIZE+0x3d4>)
    234a:	4798      	blx	r3
    234c:	e002      	b.n	2354 <STACK_SIZE+0x354>
		return false;
    234e:	2000      	movs	r0, #0
    2350:	e000      	b.n	2354 <STACK_SIZE+0x354>
				return udc_req_std_dev_set_feature();
    2352:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2354:	2800      	cmp	r0, #0
    2356:	d000      	beq.n	235a <STACK_SIZE+0x35a>
    2358:	e633      	b.n	1fc2 <udc_process_setup+0x3a>
    235a:	e623      	b.n	1fa4 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    235c:	4b16      	ldr	r3, [pc, #88]	; (23b8 <STACK_SIZE+0x3b8>)
    235e:	781b      	ldrb	r3, [r3, #0]
    2360:	2b00      	cmp	r3, #0
    2362:	d100      	bne.n	2366 <STACK_SIZE+0x366>
    2364:	e62d      	b.n	1fc2 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2366:	4b15      	ldr	r3, [pc, #84]	; (23bc <STACK_SIZE+0x3bc>)
    2368:	681b      	ldr	r3, [r3, #0]
    236a:	681a      	ldr	r2, [r3, #0]
    236c:	7912      	ldrb	r2, [r2, #4]
    236e:	2a00      	cmp	r2, #0
    2370:	d01a      	beq.n	23a8 <STACK_SIZE+0x3a8>
    2372:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2374:	4e12      	ldr	r6, [pc, #72]	; (23c0 <STACK_SIZE+0x3c0>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2376:	4f11      	ldr	r7, [pc, #68]	; (23bc <STACK_SIZE+0x3bc>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2378:	685b      	ldr	r3, [r3, #4]
    237a:	00aa      	lsls	r2, r5, #2
    237c:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    237e:	68e3      	ldr	r3, [r4, #12]
    2380:	4798      	blx	r3
    2382:	0001      	movs	r1, r0
    2384:	0028      	movs	r0, r5
    2386:	47b0      	blx	r6
    2388:	2800      	cmp	r0, #0
    238a:	d100      	bne.n	238e <STACK_SIZE+0x38e>
    238c:	e619      	b.n	1fc2 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    238e:	68a3      	ldr	r3, [r4, #8]
    2390:	4798      	blx	r3
    2392:	2800      	cmp	r0, #0
    2394:	d000      	beq.n	2398 <STACK_SIZE+0x398>
    2396:	e614      	b.n	1fc2 <udc_process_setup+0x3a>
			iface_num++) {
    2398:	3501      	adds	r5, #1
    239a:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	681a      	ldr	r2, [r3, #0]
    23a0:	7912      	ldrb	r2, [r2, #4]
    23a2:	42aa      	cmp	r2, r5
    23a4:	d8e8      	bhi.n	2378 <STACK_SIZE+0x378>
    23a6:	e60c      	b.n	1fc2 <udc_process_setup+0x3a>
	return false;
    23a8:	2000      	movs	r0, #0
    23aa:	e60a      	b.n	1fc2 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    23ac:	2103      	movs	r1, #3
		str = udc_string_product_name;
    23ae:	4c0a      	ldr	r4, [pc, #40]	; (23d8 <STACK_SIZE+0x3d8>)
    23b0:	e688      	b.n	20c4 <STACK_SIZE+0xc4>
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	2000064c 	.word	0x2000064c
    23b8:	20000220 	.word	0x20000220
    23bc:	20000224 	.word	0x20000224
    23c0:	00001db5 	.word	0x00001db5
    23c4:	00001e29 	.word	0x00001e29
    23c8:	00001e95 	.word	0x00001e95
    23cc:	00003b9d 	.word	0x00003b9d
    23d0:	000038ad 	.word	0x000038ad
    23d4:	00003a6d 	.word	0x00003a6d
    23d8:	200000d4 	.word	0x200000d4

000023dc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    23dc:	4a04      	ldr	r2, [pc, #16]	; (23f0 <_extint_enable+0x14>)
    23de:	7813      	ldrb	r3, [r2, #0]
    23e0:	2102      	movs	r1, #2
    23e2:	430b      	orrs	r3, r1
    23e4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    23e6:	7853      	ldrb	r3, [r2, #1]
    23e8:	b25b      	sxtb	r3, r3
    23ea:	2b00      	cmp	r3, #0
    23ec:	dbfb      	blt.n	23e6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    23ee:	4770      	bx	lr
    23f0:	40001800 	.word	0x40001800

000023f4 <_system_extint_init>:
{
    23f4:	b500      	push	{lr}
    23f6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    23f8:	4a12      	ldr	r2, [pc, #72]	; (2444 <_system_extint_init+0x50>)
    23fa:	6993      	ldr	r3, [r2, #24]
    23fc:	2140      	movs	r1, #64	; 0x40
    23fe:	430b      	orrs	r3, r1
    2400:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2402:	a901      	add	r1, sp, #4
    2404:	2300      	movs	r3, #0
    2406:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2408:	2005      	movs	r0, #5
    240a:	4b0f      	ldr	r3, [pc, #60]	; (2448 <_system_extint_init+0x54>)
    240c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    240e:	2005      	movs	r0, #5
    2410:	4b0e      	ldr	r3, [pc, #56]	; (244c <_system_extint_init+0x58>)
    2412:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2414:	4a0e      	ldr	r2, [pc, #56]	; (2450 <_system_extint_init+0x5c>)
    2416:	7813      	ldrb	r3, [r2, #0]
    2418:	2101      	movs	r1, #1
    241a:	430b      	orrs	r3, r1
    241c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    241e:	7853      	ldrb	r3, [r2, #1]
    2420:	b25b      	sxtb	r3, r3
    2422:	2b00      	cmp	r3, #0
    2424:	dbfb      	blt.n	241e <_system_extint_init+0x2a>
    2426:	4b0b      	ldr	r3, [pc, #44]	; (2454 <_system_extint_init+0x60>)
    2428:	0019      	movs	r1, r3
    242a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    242c:	2200      	movs	r2, #0
    242e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2430:	4299      	cmp	r1, r3
    2432:	d1fc      	bne.n	242e <_system_extint_init+0x3a>
    2434:	2210      	movs	r2, #16
    2436:	4b08      	ldr	r3, [pc, #32]	; (2458 <_system_extint_init+0x64>)
    2438:	601a      	str	r2, [r3, #0]
	_extint_enable();
    243a:	4b08      	ldr	r3, [pc, #32]	; (245c <_system_extint_init+0x68>)
    243c:	4798      	blx	r3
}
    243e:	b003      	add	sp, #12
    2440:	bd00      	pop	{pc}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	40000400 	.word	0x40000400
    2448:	00008ad9 	.word	0x00008ad9
    244c:	00008a4d 	.word	0x00008a4d
    2450:	40001800 	.word	0x40001800
    2454:	20000408 	.word	0x20000408
    2458:	e000e100 	.word	0xe000e100
    245c:	000023dd 	.word	0x000023dd

00002460 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2460:	2300      	movs	r3, #0
    2462:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2464:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2466:	2201      	movs	r2, #1
    2468:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    246a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    246c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    246e:	3302      	adds	r3, #2
    2470:	72c3      	strb	r3, [r0, #11]
}
    2472:	4770      	bx	lr

00002474 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2474:	b5f0      	push	{r4, r5, r6, r7, lr}
    2476:	b083      	sub	sp, #12
    2478:	0005      	movs	r5, r0
    247a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    247c:	a901      	add	r1, sp, #4
    247e:	2300      	movs	r3, #0
    2480:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2482:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2484:	7923      	ldrb	r3, [r4, #4]
    2486:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2488:	7a23      	ldrb	r3, [r4, #8]
    248a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    248c:	7820      	ldrb	r0, [r4, #0]
    248e:	4b15      	ldr	r3, [pc, #84]	; (24e4 <extint_chan_set_config+0x70>)
    2490:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2492:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    2494:	2d1f      	cmp	r5, #31
    2496:	d800      	bhi.n	249a <extint_chan_set_config+0x26>
		return eics[eic_index];
    2498:	4813      	ldr	r0, [pc, #76]	; (24e8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    249a:	2207      	movs	r2, #7
    249c:	402a      	ands	r2, r5
    249e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    24a0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    24a2:	7aa3      	ldrb	r3, [r4, #10]
    24a4:	2b00      	cmp	r3, #0
    24a6:	d001      	beq.n	24ac <extint_chan_set_config+0x38>
    24a8:	2308      	movs	r3, #8
    24aa:	431f      	orrs	r7, r3
    24ac:	08eb      	lsrs	r3, r5, #3
    24ae:	009b      	lsls	r3, r3, #2
    24b0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    24b2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    24b4:	260f      	movs	r6, #15
    24b6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    24b8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    24ba:	4097      	lsls	r7, r2
    24bc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    24be:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    24c0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    24c2:	7a63      	ldrb	r3, [r4, #9]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d106      	bne.n	24d6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    24c8:	6943      	ldr	r3, [r0, #20]
    24ca:	2201      	movs	r2, #1
    24cc:	40aa      	lsls	r2, r5
    24ce:	4393      	bics	r3, r2
    24d0:	6143      	str	r3, [r0, #20]
	}
}
    24d2:	b003      	add	sp, #12
    24d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    24d6:	6942      	ldr	r2, [r0, #20]
    24d8:	2301      	movs	r3, #1
    24da:	40ab      	lsls	r3, r5
    24dc:	4313      	orrs	r3, r2
    24de:	6143      	str	r3, [r0, #20]
    24e0:	e7f7      	b.n	24d2 <extint_chan_set_config+0x5e>
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	00008bd1 	.word	0x00008bd1
    24e8:	40001800 	.word	0x40001800

000024ec <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    24ec:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    24ee:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    24f0:	b25b      	sxtb	r3, r3
    24f2:	2b00      	cmp	r3, #0
    24f4:	dbfb      	blt.n	24ee <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    24f6:	8813      	ldrh	r3, [r2, #0]
    24f8:	2102      	movs	r1, #2
    24fa:	430b      	orrs	r3, r1
    24fc:	8013      	strh	r3, [r2, #0]
}
    24fe:	4770      	bx	lr

00002500 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2500:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2502:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2504:	b25b      	sxtb	r3, r3
    2506:	2b00      	cmp	r3, #0
    2508:	dbfb      	blt.n	2502 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    250a:	23c1      	movs	r3, #193	; 0xc1
    250c:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    250e:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    2510:	8813      	ldrh	r3, [r2, #0]
    2512:	2102      	movs	r1, #2
    2514:	438b      	bics	r3, r1
    2516:	8013      	strh	r3, [r2, #0]
}
    2518:	4770      	bx	lr
	...

0000251c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    251c:	b570      	push	{r4, r5, r6, lr}
    251e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2520:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    2522:	4b06      	ldr	r3, [pc, #24]	; (253c <rtc_calendar_reset+0x20>)
    2524:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    2526:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2528:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    252a:	b25b      	sxtb	r3, r3
    252c:	2b00      	cmp	r3, #0
    252e:	dbfb      	blt.n	2528 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    2530:	882b      	ldrh	r3, [r5, #0]
    2532:	2201      	movs	r2, #1
    2534:	4313      	orrs	r3, r2
    2536:	802b      	strh	r3, [r5, #0]
}
    2538:	bd70      	pop	{r4, r5, r6, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	00002501 	.word	0x00002501

00002540 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2540:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    2542:	88cb      	ldrh	r3, [r1, #6]
    2544:	88c2      	ldrh	r2, [r0, #6]
    2546:	1a9a      	subs	r2, r3, r2
    2548:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    254a:	794b      	ldrb	r3, [r1, #5]
    254c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    254e:	790c      	ldrb	r4, [r1, #4]
    2550:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    2552:	4323      	orrs	r3, r4
    2554:	788c      	ldrb	r4, [r1, #2]
    2556:	0324      	lsls	r4, r4, #12
    2558:	4323      	orrs	r3, r4
    255a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    255c:	7902      	ldrb	r2, [r0, #4]
    255e:	2a00      	cmp	r2, #0
    2560:	d105      	bne.n	256e <rtc_calendar_time_to_register_value+0x2e>
    2562:	78ca      	ldrb	r2, [r1, #3]
    2564:	2a00      	cmp	r2, #0
    2566:	d002      	beq.n	256e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    2568:	2280      	movs	r2, #128	; 0x80
    256a:	0252      	lsls	r2, r2, #9
    256c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    256e:	7848      	ldrb	r0, [r1, #1]
    2570:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    2572:	780a      	ldrb	r2, [r1, #0]
    2574:	4310      	orrs	r0, r2
    2576:	4318      	orrs	r0, r3

	return register_value;
}
    2578:	bd10      	pop	{r4, pc}

0000257a <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    257a:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    257c:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    257e:	88c4      	ldrh	r4, [r0, #6]
    2580:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2582:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    2584:	018b      	lsls	r3, r1, #6
    2586:	0f1b      	lsrs	r3, r3, #28
    2588:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    258a:	028b      	lsls	r3, r1, #10
    258c:	0edb      	lsrs	r3, r3, #27
    258e:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    2590:	7903      	ldrb	r3, [r0, #4]
    2592:	2b00      	cmp	r3, #0
    2594:	d10c      	bne.n	25b0 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    2596:	040b      	lsls	r3, r1, #16
    2598:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    259a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    259c:	03cb      	lsls	r3, r1, #15
    259e:	0fdb      	lsrs	r3, r3, #31
    25a0:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    25a2:	0988      	lsrs	r0, r1, #6
    25a4:	233f      	movs	r3, #63	; 0x3f
    25a6:	4018      	ands	r0, r3
    25a8:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    25aa:	4019      	ands	r1, r3
    25ac:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    25ae:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    25b0:	03cb      	lsls	r3, r1, #15
    25b2:	0edb      	lsrs	r3, r3, #27
    25b4:	7093      	strb	r3, [r2, #2]
    25b6:	e7f4      	b.n	25a2 <rtc_calendar_register_value_to_time+0x28>

000025b8 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    25b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    25ba:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    25bc:	4b03      	ldr	r3, [pc, #12]	; (25cc <rtc_calendar_set_time+0x14>)
    25be:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    25c0:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    25c2:	b25b      	sxtb	r3, r3
    25c4:	2b00      	cmp	r3, #0
    25c6:	dbfb      	blt.n	25c0 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    25c8:	6120      	str	r0, [r4, #16]
}
    25ca:	bd10      	pop	{r4, pc}
    25cc:	00002541 	.word	0x00002541

000025d0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    25d0:	b510      	push	{r4, lr}
    25d2:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    25d4:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    25d6:	7941      	ldrb	r1, [r0, #5]
    25d8:	2900      	cmp	r1, #0
    25da:	d006      	beq.n	25ea <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    25dc:	8859      	ldrh	r1, [r3, #2]
    25de:	0449      	lsls	r1, r1, #17
    25e0:	d50b      	bpl.n	25fa <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    25e2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    25e4:	4b0a      	ldr	r3, [pc, #40]	; (2610 <rtc_calendar_get_time+0x40>)
    25e6:	4798      	blx	r3
}
    25e8:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    25ea:	490a      	ldr	r1, [pc, #40]	; (2614 <rtc_calendar_get_time+0x44>)
    25ec:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    25ee:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    25f0:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    25f2:	b249      	sxtb	r1, r1
    25f4:	2900      	cmp	r1, #0
    25f6:	dbfb      	blt.n	25f0 <rtc_calendar_get_time+0x20>
    25f8:	e7f3      	b.n	25e2 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    25fa:	8859      	ldrh	r1, [r3, #2]
    25fc:	24c0      	movs	r4, #192	; 0xc0
    25fe:	0224      	lsls	r4, r4, #8
    2600:	4321      	orrs	r1, r4
    2602:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    2604:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2606:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    2608:	b249      	sxtb	r1, r1
    260a:	2900      	cmp	r1, #0
    260c:	dbfb      	blt.n	2606 <rtc_calendar_get_time+0x36>
    260e:	e7e8      	b.n	25e2 <rtc_calendar_get_time+0x12>
    2610:	0000257b 	.word	0x0000257b
    2614:	ffff8000 	.word	0xffff8000

00002618 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2618:	b570      	push	{r4, r5, r6, lr}
    261a:	000d      	movs	r5, r1
    261c:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    261e:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    2620:	2a01      	cmp	r2, #1
    2622:	d901      	bls.n	2628 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    2624:	0018      	movs	r0, r3
    2626:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    2628:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    262a:	4b06      	ldr	r3, [pc, #24]	; (2644 <rtc_calendar_set_alarm+0x2c>)
    262c:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    262e:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    2630:	b25b      	sxtb	r3, r3
    2632:	2b00      	cmp	r3, #0
    2634:	dbfb      	blt.n	262e <rtc_calendar_set_alarm+0x16>
    2636:	00e4      	lsls	r4, r4, #3
    2638:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    263a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    263c:	7a2b      	ldrb	r3, [r5, #8]
    263e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    2640:	2300      	movs	r3, #0
    2642:	e7ef      	b.n	2624 <rtc_calendar_set_alarm+0xc>
    2644:	00002541 	.word	0x00002541

00002648 <rtc_calendar_init>:
{
    2648:	b530      	push	{r4, r5, lr}
    264a:	b083      	sub	sp, #12
    264c:	0005      	movs	r5, r0
    264e:	0014      	movs	r4, r2
	module->hw = hw;
    2650:	6001      	str	r1, [r0, #0]
    2652:	4a1c      	ldr	r2, [pc, #112]	; (26c4 <rtc_calendar_init+0x7c>)
    2654:	6993      	ldr	r3, [r2, #24]
    2656:	2120      	movs	r1, #32
    2658:	430b      	orrs	r3, r1
    265a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    265c:	a901      	add	r1, sp, #4
    265e:	2302      	movs	r3, #2
    2660:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    2662:	2004      	movs	r0, #4
    2664:	4b18      	ldr	r3, [pc, #96]	; (26c8 <rtc_calendar_init+0x80>)
    2666:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    2668:	2004      	movs	r0, #4
    266a:	4b18      	ldr	r3, [pc, #96]	; (26cc <rtc_calendar_init+0x84>)
    266c:	4798      	blx	r3
	rtc_calendar_reset(module);
    266e:	0028      	movs	r0, r5
    2670:	4b17      	ldr	r3, [pc, #92]	; (26d0 <rtc_calendar_init+0x88>)
    2672:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    2674:	7923      	ldrb	r3, [r4, #4]
    2676:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    2678:	78e3      	ldrb	r3, [r4, #3]
    267a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    267c:	88e3      	ldrh	r3, [r4, #6]
    267e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    2680:	4b14      	ldr	r3, [pc, #80]	; (26d4 <rtc_calendar_init+0x8c>)
    2682:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    2684:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    2686:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    2688:	7921      	ldrb	r1, [r4, #4]
    268a:	2900      	cmp	r1, #0
    268c:	d017      	beq.n	26be <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    268e:	2108      	movs	r1, #8
    2690:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    2692:	78a1      	ldrb	r1, [r4, #2]
    2694:	2900      	cmp	r1, #0
    2696:	d001      	beq.n	269c <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    2698:	2180      	movs	r1, #128	; 0x80
    269a:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    269c:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    269e:	78e3      	ldrb	r3, [r4, #3]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d004      	beq.n	26ae <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    26a4:	8853      	ldrh	r3, [r2, #2]
    26a6:	2180      	movs	r1, #128	; 0x80
    26a8:	01c9      	lsls	r1, r1, #7
    26aa:	430b      	orrs	r3, r1
    26ac:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    26ae:	0021      	movs	r1, r4
    26b0:	3108      	adds	r1, #8
    26b2:	2200      	movs	r2, #0
    26b4:	0028      	movs	r0, r5
    26b6:	4b08      	ldr	r3, [pc, #32]	; (26d8 <rtc_calendar_init+0x90>)
    26b8:	4798      	blx	r3
}
    26ba:	b003      	add	sp, #12
    26bc:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    26be:	2148      	movs	r1, #72	; 0x48
    26c0:	430b      	orrs	r3, r1
    26c2:	e7e6      	b.n	2692 <rtc_calendar_init+0x4a>
    26c4:	40000400 	.word	0x40000400
    26c8:	00008ad9 	.word	0x00008ad9
    26cc:	00008a4d 	.word	0x00008a4d
    26d0:	0000251d 	.word	0x0000251d
    26d4:	20000448 	.word	0x20000448
    26d8:	00002619 	.word	0x00002619

000026dc <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    26dc:	b570      	push	{r4, r5, r6, lr}
    26de:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    26e0:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    26e2:	2a01      	cmp	r2, #1
    26e4:	d901      	bls.n	26ea <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    26e6:	0018      	movs	r0, r3
    26e8:	bd70      	pop	{r4, r5, r6, pc}
    26ea:	00d2      	lsls	r2, r2, #3
    26ec:	6803      	ldr	r3, [r0, #0]
    26ee:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    26f0:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    26f2:	0022      	movs	r2, r4
    26f4:	4b02      	ldr	r3, [pc, #8]	; (2700 <rtc_calendar_get_alarm+0x24>)
    26f6:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    26f8:	7f2b      	ldrb	r3, [r5, #28]
    26fa:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    26fc:	2300      	movs	r3, #0
    26fe:	e7f2      	b.n	26e6 <rtc_calendar_get_alarm+0xa>
    2700:	0000257b 	.word	0x0000257b

00002704 <rtc_calendar_swap_time_mode>:
{
    2704:	b570      	push	{r4, r5, r6, lr}
    2706:	b086      	sub	sp, #24
    2708:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    270a:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    270c:	a904      	add	r1, sp, #16
    270e:	4b3d      	ldr	r3, [pc, #244]	; (2804 <rtc_calendar_swap_time_mode+0x100>)
    2710:	4798      	blx	r3
	if (module->clock_24h) {
    2712:	7923      	ldrb	r3, [r4, #4]
    2714:	2b00      	cmp	r3, #0
    2716:	d042      	beq.n	279e <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    2718:	aa04      	add	r2, sp, #16
    271a:	7890      	ldrb	r0, [r2, #2]
    271c:	230b      	movs	r3, #11
    271e:	4283      	cmp	r3, r0
    2720:	419b      	sbcs	r3, r3
    2722:	425b      	negs	r3, r3
    2724:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    2726:	210c      	movs	r1, #12
    2728:	4b37      	ldr	r3, [pc, #220]	; (2808 <rtc_calendar_swap_time_mode+0x104>)
    272a:	4798      	blx	r3
    272c:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    272e:	2900      	cmp	r1, #0
    2730:	d016      	beq.n	2760 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    2732:	ab04      	add	r3, sp, #16
    2734:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2736:	ad01      	add	r5, sp, #4
    2738:	2200      	movs	r2, #0
    273a:	0029      	movs	r1, r5
    273c:	0020      	movs	r0, r4
    273e:	4b33      	ldr	r3, [pc, #204]	; (280c <rtc_calendar_swap_time_mode+0x108>)
    2740:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    2742:	78a8      	ldrb	r0, [r5, #2]
    2744:	230b      	movs	r3, #11
    2746:	4283      	cmp	r3, r0
    2748:	419b      	sbcs	r3, r3
    274a:	425b      	negs	r3, r3
    274c:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    274e:	210c      	movs	r1, #12
    2750:	4b2d      	ldr	r3, [pc, #180]	; (2808 <rtc_calendar_swap_time_mode+0x104>)
    2752:	4798      	blx	r3
    2754:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    2756:	2900      	cmp	r1, #0
    2758:	d006      	beq.n	2768 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    275a:	ab01      	add	r3, sp, #4
    275c:	7099      	strb	r1, [r3, #2]
    275e:	e006      	b.n	276e <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    2760:	220c      	movs	r2, #12
    2762:	ab04      	add	r3, sp, #16
    2764:	709a      	strb	r2, [r3, #2]
    2766:	e7e6      	b.n	2736 <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    2768:	220c      	movs	r2, #12
    276a:	ab01      	add	r3, sp, #4
    276c:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    276e:	2500      	movs	r5, #0
    2770:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2772:	2200      	movs	r2, #0
    2774:	a901      	add	r1, sp, #4
    2776:	0020      	movs	r0, r4
    2778:	4b25      	ldr	r3, [pc, #148]	; (2810 <rtc_calendar_swap_time_mode+0x10c>)
    277a:	4798      	blx	r3
		module->clock_24h = false;
    277c:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    277e:	0020      	movs	r0, r4
    2780:	4b24      	ldr	r3, [pc, #144]	; (2814 <rtc_calendar_swap_time_mode+0x110>)
    2782:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    2784:	8833      	ldrh	r3, [r6, #0]
    2786:	2240      	movs	r2, #64	; 0x40
    2788:	4053      	eors	r3, r2
    278a:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    278c:	0020      	movs	r0, r4
    278e:	4b22      	ldr	r3, [pc, #136]	; (2818 <rtc_calendar_swap_time_mode+0x114>)
    2790:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    2792:	a904      	add	r1, sp, #16
    2794:	0020      	movs	r0, r4
    2796:	4b21      	ldr	r3, [pc, #132]	; (281c <rtc_calendar_swap_time_mode+0x118>)
    2798:	4798      	blx	r3
}
    279a:	b006      	add	sp, #24
    279c:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    279e:	ab04      	add	r3, sp, #16
    27a0:	78db      	ldrb	r3, [r3, #3]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d015      	beq.n	27d2 <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    27a6:	ab04      	add	r3, sp, #16
    27a8:	789a      	ldrb	r2, [r3, #2]
    27aa:	320c      	adds	r2, #12
    27ac:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    27ae:	2200      	movs	r2, #0
    27b0:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    27b2:	ad01      	add	r5, sp, #4
    27b4:	2200      	movs	r2, #0
    27b6:	0029      	movs	r1, r5
    27b8:	0020      	movs	r0, r4
    27ba:	4b14      	ldr	r3, [pc, #80]	; (280c <rtc_calendar_swap_time_mode+0x108>)
    27bc:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    27be:	78eb      	ldrb	r3, [r5, #3]
    27c0:	2b00      	cmp	r3, #0
    27c2:	d10e      	bne.n	27e2 <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    27c4:	ab01      	add	r3, sp, #4
    27c6:	789b      	ldrb	r3, [r3, #2]
    27c8:	2b0c      	cmp	r3, #12
    27ca:	d017      	beq.n	27fc <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    27cc:	2301      	movs	r3, #1
    27ce:	7123      	strb	r3, [r4, #4]
    27d0:	e7d5      	b.n	277e <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    27d2:	ab04      	add	r3, sp, #16
    27d4:	789b      	ldrb	r3, [r3, #2]
    27d6:	2b0c      	cmp	r3, #12
    27d8:	d1eb      	bne.n	27b2 <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    27da:	2200      	movs	r2, #0
    27dc:	ab04      	add	r3, sp, #16
    27de:	709a      	strb	r2, [r3, #2]
    27e0:	e7e7      	b.n	27b2 <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    27e2:	a901      	add	r1, sp, #4
    27e4:	788b      	ldrb	r3, [r1, #2]
    27e6:	330c      	adds	r3, #12
    27e8:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    27ea:	2300      	movs	r3, #0
    27ec:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    27ee:	3301      	adds	r3, #1
    27f0:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    27f2:	2200      	movs	r2, #0
    27f4:	0020      	movs	r0, r4
    27f6:	4b06      	ldr	r3, [pc, #24]	; (2810 <rtc_calendar_swap_time_mode+0x10c>)
    27f8:	4798      	blx	r3
    27fa:	e7e7      	b.n	27cc <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    27fc:	2200      	movs	r2, #0
    27fe:	ab01      	add	r3, sp, #4
    2800:	709a      	strb	r2, [r3, #2]
    2802:	e7e3      	b.n	27cc <rtc_calendar_swap_time_mode+0xc8>
    2804:	000025d1 	.word	0x000025d1
    2808:	00008e61 	.word	0x00008e61
    280c:	000026dd 	.word	0x000026dd
    2810:	00002619 	.word	0x00002619
    2814:	00002501 	.word	0x00002501
    2818:	000024ed 	.word	0x000024ed
    281c:	000025b9 	.word	0x000025b9

00002820 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2820:	4770      	bx	lr
	...

00002824 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2824:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2826:	4b0a      	ldr	r3, [pc, #40]	; (2850 <_sercom_set_handler+0x2c>)
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	2b00      	cmp	r3, #0
    282c:	d10c      	bne.n	2848 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    282e:	4f09      	ldr	r7, [pc, #36]	; (2854 <_sercom_set_handler+0x30>)
    2830:	4e09      	ldr	r6, [pc, #36]	; (2858 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2832:	4d0a      	ldr	r5, [pc, #40]	; (285c <_sercom_set_handler+0x38>)
    2834:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2836:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2838:	195a      	adds	r2, r3, r5
    283a:	6014      	str	r4, [r2, #0]
    283c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    283e:	2b18      	cmp	r3, #24
    2840:	d1f9      	bne.n	2836 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2842:	2201      	movs	r2, #1
    2844:	4b02      	ldr	r3, [pc, #8]	; (2850 <_sercom_set_handler+0x2c>)
    2846:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2848:	0080      	lsls	r0, r0, #2
    284a:	4b02      	ldr	r3, [pc, #8]	; (2854 <_sercom_set_handler+0x30>)
    284c:	50c1      	str	r1, [r0, r3]
}
    284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2850:	2000022c 	.word	0x2000022c
    2854:	20000230 	.word	0x20000230
    2858:	00002821 	.word	0x00002821
    285c:	2000044c 	.word	0x2000044c

00002860 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2860:	b500      	push	{lr}
    2862:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2864:	2309      	movs	r3, #9
    2866:	466a      	mov	r2, sp
    2868:	7013      	strb	r3, [r2, #0]
    286a:	3301      	adds	r3, #1
    286c:	7053      	strb	r3, [r2, #1]
    286e:	3301      	adds	r3, #1
    2870:	7093      	strb	r3, [r2, #2]
    2872:	3301      	adds	r3, #1
    2874:	70d3      	strb	r3, [r2, #3]
    2876:	3301      	adds	r3, #1
    2878:	7113      	strb	r3, [r2, #4]
    287a:	3301      	adds	r3, #1
    287c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    287e:	4b03      	ldr	r3, [pc, #12]	; (288c <_sercom_get_interrupt_vector+0x2c>)
    2880:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2882:	466b      	mov	r3, sp
    2884:	5618      	ldrsb	r0, [r3, r0]
}
    2886:	b003      	add	sp, #12
    2888:	bd00      	pop	{pc}
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	00007499 	.word	0x00007499

00002890 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2890:	b510      	push	{r4, lr}
    2892:	4b02      	ldr	r3, [pc, #8]	; (289c <SERCOM0_Handler+0xc>)
    2894:	681b      	ldr	r3, [r3, #0]
    2896:	2000      	movs	r0, #0
    2898:	4798      	blx	r3
    289a:	bd10      	pop	{r4, pc}
    289c:	20000230 	.word	0x20000230

000028a0 <SERCOM1_Handler>:
    28a0:	b510      	push	{r4, lr}
    28a2:	4b02      	ldr	r3, [pc, #8]	; (28ac <SERCOM1_Handler+0xc>)
    28a4:	685b      	ldr	r3, [r3, #4]
    28a6:	2001      	movs	r0, #1
    28a8:	4798      	blx	r3
    28aa:	bd10      	pop	{r4, pc}
    28ac:	20000230 	.word	0x20000230

000028b0 <SERCOM2_Handler>:
    28b0:	b510      	push	{r4, lr}
    28b2:	4b02      	ldr	r3, [pc, #8]	; (28bc <SERCOM2_Handler+0xc>)
    28b4:	689b      	ldr	r3, [r3, #8]
    28b6:	2002      	movs	r0, #2
    28b8:	4798      	blx	r3
    28ba:	bd10      	pop	{r4, pc}
    28bc:	20000230 	.word	0x20000230

000028c0 <SERCOM3_Handler>:
    28c0:	b510      	push	{r4, lr}
    28c2:	4b02      	ldr	r3, [pc, #8]	; (28cc <SERCOM3_Handler+0xc>)
    28c4:	68db      	ldr	r3, [r3, #12]
    28c6:	2003      	movs	r0, #3
    28c8:	4798      	blx	r3
    28ca:	bd10      	pop	{r4, pc}
    28cc:	20000230 	.word	0x20000230

000028d0 <SERCOM4_Handler>:
    28d0:	b510      	push	{r4, lr}
    28d2:	4b02      	ldr	r3, [pc, #8]	; (28dc <SERCOM4_Handler+0xc>)
    28d4:	691b      	ldr	r3, [r3, #16]
    28d6:	2004      	movs	r0, #4
    28d8:	4798      	blx	r3
    28da:	bd10      	pop	{r4, pc}
    28dc:	20000230 	.word	0x20000230

000028e0 <SERCOM5_Handler>:
    28e0:	b510      	push	{r4, lr}
    28e2:	4b02      	ldr	r3, [pc, #8]	; (28ec <SERCOM5_Handler+0xc>)
    28e4:	695b      	ldr	r3, [r3, #20]
    28e6:	2005      	movs	r0, #5
    28e8:	4798      	blx	r3
    28ea:	bd10      	pop	{r4, pc}
    28ec:	20000230 	.word	0x20000230

000028f0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	46de      	mov	lr, fp
    28f4:	4657      	mov	r7, sl
    28f6:	464e      	mov	r6, r9
    28f8:	4645      	mov	r5, r8
    28fa:	b5e0      	push	{r5, r6, r7, lr}
    28fc:	b091      	sub	sp, #68	; 0x44
    28fe:	0005      	movs	r5, r0
    2900:	000c      	movs	r4, r1
    2902:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2904:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2906:	0008      	movs	r0, r1
    2908:	4bbc      	ldr	r3, [pc, #752]	; (2bfc <usart_init+0x30c>)
    290a:	4798      	blx	r3
    290c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    290e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2910:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2912:	07db      	lsls	r3, r3, #31
    2914:	d506      	bpl.n	2924 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2916:	b011      	add	sp, #68	; 0x44
    2918:	bc3c      	pop	{r2, r3, r4, r5}
    291a:	4690      	mov	r8, r2
    291c:	4699      	mov	r9, r3
    291e:	46a2      	mov	sl, r4
    2920:	46ab      	mov	fp, r5
    2922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2924:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2926:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2928:	079b      	lsls	r3, r3, #30
    292a:	d4f4      	bmi.n	2916 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    292c:	49b4      	ldr	r1, [pc, #720]	; (2c00 <usart_init+0x310>)
    292e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2930:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2932:	2301      	movs	r3, #1
    2934:	40bb      	lsls	r3, r7
    2936:	4303      	orrs	r3, r0
    2938:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    293a:	a90f      	add	r1, sp, #60	; 0x3c
    293c:	272d      	movs	r7, #45	; 0x2d
    293e:	5df3      	ldrb	r3, [r6, r7]
    2940:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2942:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2944:	b2d3      	uxtb	r3, r2
    2946:	9302      	str	r3, [sp, #8]
    2948:	0018      	movs	r0, r3
    294a:	4bae      	ldr	r3, [pc, #696]	; (2c04 <usart_init+0x314>)
    294c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    294e:	9802      	ldr	r0, [sp, #8]
    2950:	4bad      	ldr	r3, [pc, #692]	; (2c08 <usart_init+0x318>)
    2952:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2954:	5df0      	ldrb	r0, [r6, r7]
    2956:	2100      	movs	r1, #0
    2958:	4bac      	ldr	r3, [pc, #688]	; (2c0c <usart_init+0x31c>)
    295a:	4798      	blx	r3
	module->character_size = config->character_size;
    295c:	7af3      	ldrb	r3, [r6, #11]
    295e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2960:	2324      	movs	r3, #36	; 0x24
    2962:	5cf3      	ldrb	r3, [r6, r3]
    2964:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2966:	2325      	movs	r3, #37	; 0x25
    2968:	5cf3      	ldrb	r3, [r6, r3]
    296a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    296c:	7ef3      	ldrb	r3, [r6, #27]
    296e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2970:	7f33      	ldrb	r3, [r6, #28]
    2972:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2974:	682b      	ldr	r3, [r5, #0]
    2976:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2978:	0018      	movs	r0, r3
    297a:	4ba0      	ldr	r3, [pc, #640]	; (2bfc <usart_init+0x30c>)
    297c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    297e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2980:	2200      	movs	r2, #0
    2982:	230e      	movs	r3, #14
    2984:	a906      	add	r1, sp, #24
    2986:	468c      	mov	ip, r1
    2988:	4463      	add	r3, ip
    298a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    298c:	8a32      	ldrh	r2, [r6, #16]
    298e:	9202      	str	r2, [sp, #8]
    2990:	2380      	movs	r3, #128	; 0x80
    2992:	01db      	lsls	r3, r3, #7
    2994:	429a      	cmp	r2, r3
    2996:	d100      	bne.n	299a <usart_init+0xaa>
    2998:	e09e      	b.n	2ad8 <usart_init+0x1e8>
    299a:	d90f      	bls.n	29bc <usart_init+0xcc>
    299c:	23c0      	movs	r3, #192	; 0xc0
    299e:	01db      	lsls	r3, r3, #7
    29a0:	9a02      	ldr	r2, [sp, #8]
    29a2:	429a      	cmp	r2, r3
    29a4:	d100      	bne.n	29a8 <usart_init+0xb8>
    29a6:	e092      	b.n	2ace <usart_init+0x1de>
    29a8:	2380      	movs	r3, #128	; 0x80
    29aa:	021b      	lsls	r3, r3, #8
    29ac:	429a      	cmp	r2, r3
    29ae:	d000      	beq.n	29b2 <usart_init+0xc2>
    29b0:	e11f      	b.n	2bf2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    29b2:	2303      	movs	r3, #3
    29b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    29b6:	2300      	movs	r3, #0
    29b8:	9307      	str	r3, [sp, #28]
    29ba:	e008      	b.n	29ce <usart_init+0xde>
	switch (config->sample_rate) {
    29bc:	2380      	movs	r3, #128	; 0x80
    29be:	019b      	lsls	r3, r3, #6
    29c0:	429a      	cmp	r2, r3
    29c2:	d000      	beq.n	29c6 <usart_init+0xd6>
    29c4:	e115      	b.n	2bf2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    29c6:	2310      	movs	r3, #16
    29c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    29ca:	3b0f      	subs	r3, #15
    29cc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    29ce:	6833      	ldr	r3, [r6, #0]
    29d0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    29d2:	68f3      	ldr	r3, [r6, #12]
    29d4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    29d6:	6973      	ldr	r3, [r6, #20]
    29d8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    29da:	7e33      	ldrb	r3, [r6, #24]
    29dc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    29de:	2326      	movs	r3, #38	; 0x26
    29e0:	5cf3      	ldrb	r3, [r6, r3]
    29e2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    29e4:	6873      	ldr	r3, [r6, #4]
    29e6:	4699      	mov	r9, r3
	switch (transfer_mode)
    29e8:	2b00      	cmp	r3, #0
    29ea:	d100      	bne.n	29ee <usart_init+0xfe>
    29ec:	e0a0      	b.n	2b30 <usart_init+0x240>
    29ee:	2380      	movs	r3, #128	; 0x80
    29f0:	055b      	lsls	r3, r3, #21
    29f2:	4599      	cmp	r9, r3
    29f4:	d100      	bne.n	29f8 <usart_init+0x108>
    29f6:	e084      	b.n	2b02 <usart_init+0x212>
	if(config->encoding_format_enable) {
    29f8:	7e73      	ldrb	r3, [r6, #25]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d002      	beq.n	2a04 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    29fe:	7eb3      	ldrb	r3, [r6, #26]
    2a00:	4642      	mov	r2, r8
    2a02:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2a04:	682a      	ldr	r2, [r5, #0]
    2a06:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2a08:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d1fc      	bne.n	2a08 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2a0e:	330e      	adds	r3, #14
    2a10:	aa06      	add	r2, sp, #24
    2a12:	4694      	mov	ip, r2
    2a14:	4463      	add	r3, ip
    2a16:	881b      	ldrh	r3, [r3, #0]
    2a18:	4642      	mov	r2, r8
    2a1a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2a1c:	9b05      	ldr	r3, [sp, #20]
    2a1e:	9a03      	ldr	r2, [sp, #12]
    2a20:	4313      	orrs	r3, r2
    2a22:	9a04      	ldr	r2, [sp, #16]
    2a24:	4313      	orrs	r3, r2
    2a26:	464a      	mov	r2, r9
    2a28:	4313      	orrs	r3, r2
    2a2a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2a2c:	465b      	mov	r3, fp
    2a2e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2a30:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a32:	4653      	mov	r3, sl
    2a34:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2a36:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2a38:	2327      	movs	r3, #39	; 0x27
    2a3a:	5cf3      	ldrb	r3, [r6, r3]
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d101      	bne.n	2a44 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2a40:	3304      	adds	r3, #4
    2a42:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2a44:	7e73      	ldrb	r3, [r6, #25]
    2a46:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2a48:	7f32      	ldrb	r2, [r6, #28]
    2a4a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2a4c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2a4e:	7f72      	ldrb	r2, [r6, #29]
    2a50:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2a52:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2a54:	2224      	movs	r2, #36	; 0x24
    2a56:	5cb2      	ldrb	r2, [r6, r2]
    2a58:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2a5a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2a5c:	2225      	movs	r2, #37	; 0x25
    2a5e:	5cb2      	ldrb	r2, [r6, r2]
    2a60:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2a62:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2a64:	7ab1      	ldrb	r1, [r6, #10]
    2a66:	7af2      	ldrb	r2, [r6, #11]
    2a68:	4311      	orrs	r1, r2
    2a6a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2a6c:	8933      	ldrh	r3, [r6, #8]
    2a6e:	2bff      	cmp	r3, #255	; 0xff
    2a70:	d100      	bne.n	2a74 <usart_init+0x184>
    2a72:	e081      	b.n	2b78 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2a74:	2280      	movs	r2, #128	; 0x80
    2a76:	0452      	lsls	r2, r2, #17
    2a78:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2a7a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2a7c:	232c      	movs	r3, #44	; 0x2c
    2a7e:	5cf3      	ldrb	r3, [r6, r3]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d103      	bne.n	2a8c <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2a84:	4b62      	ldr	r3, [pc, #392]	; (2c10 <usart_init+0x320>)
    2a86:	789b      	ldrb	r3, [r3, #2]
    2a88:	079b      	lsls	r3, r3, #30
    2a8a:	d501      	bpl.n	2a90 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2a8c:	2380      	movs	r3, #128	; 0x80
    2a8e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a90:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a92:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2a94:	2b00      	cmp	r3, #0
    2a96:	d1fc      	bne.n	2a92 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2a98:	4643      	mov	r3, r8
    2a9a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a9c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a9e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d1fc      	bne.n	2a9e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2aa4:	4643      	mov	r3, r8
    2aa6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2aa8:	ab0e      	add	r3, sp, #56	; 0x38
    2aaa:	2280      	movs	r2, #128	; 0x80
    2aac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2aae:	2200      	movs	r2, #0
    2ab0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2ab2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ab4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2ab6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2ab8:	930a      	str	r3, [sp, #40]	; 0x28
    2aba:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2abc:	930b      	str	r3, [sp, #44]	; 0x2c
    2abe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2ac0:	930c      	str	r3, [sp, #48]	; 0x30
    2ac2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2ac4:	9302      	str	r3, [sp, #8]
    2ac6:	930d      	str	r3, [sp, #52]	; 0x34
    2ac8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2aca:	ae0a      	add	r6, sp, #40	; 0x28
    2acc:	e063      	b.n	2b96 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2ace:	2308      	movs	r3, #8
    2ad0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2ad2:	3b07      	subs	r3, #7
    2ad4:	9307      	str	r3, [sp, #28]
    2ad6:	e77a      	b.n	29ce <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2ad8:	6833      	ldr	r3, [r6, #0]
    2ada:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2adc:	68f3      	ldr	r3, [r6, #12]
    2ade:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2ae0:	6973      	ldr	r3, [r6, #20]
    2ae2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2ae4:	7e33      	ldrb	r3, [r6, #24]
    2ae6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2ae8:	2326      	movs	r3, #38	; 0x26
    2aea:	5cf3      	ldrb	r3, [r6, r3]
    2aec:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2aee:	6873      	ldr	r3, [r6, #4]
    2af0:	4699      	mov	r9, r3
	switch (transfer_mode)
    2af2:	2b00      	cmp	r3, #0
    2af4:	d018      	beq.n	2b28 <usart_init+0x238>
    2af6:	2380      	movs	r3, #128	; 0x80
    2af8:	055b      	lsls	r3, r3, #21
    2afa:	4599      	cmp	r9, r3
    2afc:	d001      	beq.n	2b02 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2afe:	2000      	movs	r0, #0
    2b00:	e025      	b.n	2b4e <usart_init+0x25e>
			if (!config->use_external_clock) {
    2b02:	2327      	movs	r3, #39	; 0x27
    2b04:	5cf3      	ldrb	r3, [r6, r3]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d000      	beq.n	2b0c <usart_init+0x21c>
    2b0a:	e775      	b.n	29f8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2b0c:	6a33      	ldr	r3, [r6, #32]
    2b0e:	001f      	movs	r7, r3
    2b10:	b2c0      	uxtb	r0, r0
    2b12:	4b40      	ldr	r3, [pc, #256]	; (2c14 <usart_init+0x324>)
    2b14:	4798      	blx	r3
    2b16:	0001      	movs	r1, r0
    2b18:	220e      	movs	r2, #14
    2b1a:	ab06      	add	r3, sp, #24
    2b1c:	469c      	mov	ip, r3
    2b1e:	4462      	add	r2, ip
    2b20:	0038      	movs	r0, r7
    2b22:	4b3d      	ldr	r3, [pc, #244]	; (2c18 <usart_init+0x328>)
    2b24:	4798      	blx	r3
    2b26:	e012      	b.n	2b4e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2b28:	2308      	movs	r3, #8
    2b2a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2b2c:	2300      	movs	r3, #0
    2b2e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2b30:	2327      	movs	r3, #39	; 0x27
    2b32:	5cf3      	ldrb	r3, [r6, r3]
    2b34:	2b00      	cmp	r3, #0
    2b36:	d00e      	beq.n	2b56 <usart_init+0x266>
				status_code =
    2b38:	9b06      	ldr	r3, [sp, #24]
    2b3a:	9300      	str	r3, [sp, #0]
    2b3c:	9b07      	ldr	r3, [sp, #28]
    2b3e:	220e      	movs	r2, #14
    2b40:	a906      	add	r1, sp, #24
    2b42:	468c      	mov	ip, r1
    2b44:	4462      	add	r2, ip
    2b46:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2b48:	6a30      	ldr	r0, [r6, #32]
    2b4a:	4f34      	ldr	r7, [pc, #208]	; (2c1c <usart_init+0x32c>)
    2b4c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2b4e:	2800      	cmp	r0, #0
    2b50:	d000      	beq.n	2b54 <usart_init+0x264>
    2b52:	e6e0      	b.n	2916 <usart_init+0x26>
    2b54:	e750      	b.n	29f8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2b56:	6a33      	ldr	r3, [r6, #32]
    2b58:	001f      	movs	r7, r3
    2b5a:	b2c0      	uxtb	r0, r0
    2b5c:	4b2d      	ldr	r3, [pc, #180]	; (2c14 <usart_init+0x324>)
    2b5e:	4798      	blx	r3
    2b60:	0001      	movs	r1, r0
				status_code =
    2b62:	9b06      	ldr	r3, [sp, #24]
    2b64:	9300      	str	r3, [sp, #0]
    2b66:	9b07      	ldr	r3, [sp, #28]
    2b68:	220e      	movs	r2, #14
    2b6a:	a806      	add	r0, sp, #24
    2b6c:	4684      	mov	ip, r0
    2b6e:	4462      	add	r2, ip
    2b70:	0038      	movs	r0, r7
    2b72:	4f2a      	ldr	r7, [pc, #168]	; (2c1c <usart_init+0x32c>)
    2b74:	47b8      	blx	r7
    2b76:	e7ea      	b.n	2b4e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2b78:	7ef3      	ldrb	r3, [r6, #27]
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d100      	bne.n	2b80 <usart_init+0x290>
    2b7e:	e77d      	b.n	2a7c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2b80:	2380      	movs	r3, #128	; 0x80
    2b82:	04db      	lsls	r3, r3, #19
    2b84:	431f      	orrs	r7, r3
    2b86:	e779      	b.n	2a7c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2b88:	0020      	movs	r0, r4
    2b8a:	4b25      	ldr	r3, [pc, #148]	; (2c20 <usart_init+0x330>)
    2b8c:	4798      	blx	r3
    2b8e:	e007      	b.n	2ba0 <usart_init+0x2b0>
    2b90:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2b92:	2f04      	cmp	r7, #4
    2b94:	d00d      	beq.n	2bb2 <usart_init+0x2c2>
    2b96:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2b98:	00bb      	lsls	r3, r7, #2
    2b9a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d0f3      	beq.n	2b88 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2ba0:	1c43      	adds	r3, r0, #1
    2ba2:	d0f5      	beq.n	2b90 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2ba4:	a90e      	add	r1, sp, #56	; 0x38
    2ba6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2ba8:	0c00      	lsrs	r0, r0, #16
    2baa:	b2c0      	uxtb	r0, r0
    2bac:	4b1d      	ldr	r3, [pc, #116]	; (2c24 <usart_init+0x334>)
    2bae:	4798      	blx	r3
    2bb0:	e7ee      	b.n	2b90 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2bb2:	2300      	movs	r3, #0
    2bb4:	60eb      	str	r3, [r5, #12]
    2bb6:	612b      	str	r3, [r5, #16]
    2bb8:	616b      	str	r3, [r5, #20]
    2bba:	61ab      	str	r3, [r5, #24]
    2bbc:	61eb      	str	r3, [r5, #28]
    2bbe:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2bc0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2bc2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2bc4:	2200      	movs	r2, #0
    2bc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2bc8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2bca:	3330      	adds	r3, #48	; 0x30
    2bcc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2bce:	3301      	adds	r3, #1
    2bd0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2bd2:	3301      	adds	r3, #1
    2bd4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2bd6:	3301      	adds	r3, #1
    2bd8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2bda:	6828      	ldr	r0, [r5, #0]
    2bdc:	4b07      	ldr	r3, [pc, #28]	; (2bfc <usart_init+0x30c>)
    2bde:	4798      	blx	r3
    2be0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2be2:	4911      	ldr	r1, [pc, #68]	; (2c28 <usart_init+0x338>)
    2be4:	4b11      	ldr	r3, [pc, #68]	; (2c2c <usart_init+0x33c>)
    2be6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2be8:	00a4      	lsls	r4, r4, #2
    2bea:	4b11      	ldr	r3, [pc, #68]	; (2c30 <usart_init+0x340>)
    2bec:	50e5      	str	r5, [r4, r3]
	return status_code;
    2bee:	2000      	movs	r0, #0
    2bf0:	e691      	b.n	2916 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2bf2:	2310      	movs	r3, #16
    2bf4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2bf6:	2300      	movs	r3, #0
    2bf8:	9307      	str	r3, [sp, #28]
    2bfa:	e6e8      	b.n	29ce <usart_init+0xde>
    2bfc:	00007499 	.word	0x00007499
    2c00:	40000400 	.word	0x40000400
    2c04:	00008ad9 	.word	0x00008ad9
    2c08:	00008a4d 	.word	0x00008a4d
    2c0c:	000072d5 	.word	0x000072d5
    2c10:	41002000 	.word	0x41002000
    2c14:	00008af5 	.word	0x00008af5
    2c18:	00007217 	.word	0x00007217
    2c1c:	00007241 	.word	0x00007241
    2c20:	00007321 	.word	0x00007321
    2c24:	00008bd1 	.word	0x00008bd1
    2c28:	00002cd1 	.word	0x00002cd1
    2c2c:	00002825 	.word	0x00002825
    2c30:	2000044c 	.word	0x2000044c

00002c34 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2c34:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2c36:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2c38:	2a00      	cmp	r2, #0
    2c3a:	d101      	bne.n	2c40 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2c3c:	0018      	movs	r0, r3
    2c3e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2c40:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2c42:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2c44:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2c46:	2a00      	cmp	r2, #0
    2c48:	d1f8      	bne.n	2c3c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c4a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c4c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2c4e:	2a00      	cmp	r2, #0
    2c50:	d1fc      	bne.n	2c4c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2c52:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2c54:	2102      	movs	r1, #2
    2c56:	7e1a      	ldrb	r2, [r3, #24]
    2c58:	420a      	tst	r2, r1
    2c5a:	d0fc      	beq.n	2c56 <usart_write_wait+0x22>
	return STATUS_OK;
    2c5c:	2300      	movs	r3, #0
    2c5e:	e7ed      	b.n	2c3c <usart_write_wait+0x8>

00002c60 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2c60:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2c62:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2c64:	2a00      	cmp	r2, #0
    2c66:	d101      	bne.n	2c6c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2c68:	0018      	movs	r0, r3
    2c6a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2c6c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2c6e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2c70:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2c72:	2a00      	cmp	r2, #0
    2c74:	d1f8      	bne.n	2c68 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c76:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2c78:	7e10      	ldrb	r0, [r2, #24]
    2c7a:	0740      	lsls	r0, r0, #29
    2c7c:	d5f4      	bpl.n	2c68 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2c7e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2c80:	2b00      	cmp	r3, #0
    2c82:	d1fc      	bne.n	2c7e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c84:	8b53      	ldrh	r3, [r2, #26]
    2c86:	b2db      	uxtb	r3, r3
	if (error_code) {
    2c88:	0698      	lsls	r0, r3, #26
    2c8a:	d01d      	beq.n	2cc8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2c8c:	0798      	lsls	r0, r3, #30
    2c8e:	d503      	bpl.n	2c98 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c90:	2302      	movs	r3, #2
    2c92:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2c94:	3318      	adds	r3, #24
    2c96:	e7e7      	b.n	2c68 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c98:	0758      	lsls	r0, r3, #29
    2c9a:	d503      	bpl.n	2ca4 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2c9c:	2304      	movs	r3, #4
    2c9e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2ca0:	331a      	adds	r3, #26
    2ca2:	e7e1      	b.n	2c68 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2ca4:	07d8      	lsls	r0, r3, #31
    2ca6:	d503      	bpl.n	2cb0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2ca8:	2301      	movs	r3, #1
    2caa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2cac:	3312      	adds	r3, #18
    2cae:	e7db      	b.n	2c68 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2cb0:	06d8      	lsls	r0, r3, #27
    2cb2:	d503      	bpl.n	2cbc <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cb4:	2310      	movs	r3, #16
    2cb6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2cb8:	3332      	adds	r3, #50	; 0x32
    2cba:	e7d5      	b.n	2c68 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2cbc:	069b      	lsls	r3, r3, #26
    2cbe:	d503      	bpl.n	2cc8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2cc0:	2320      	movs	r3, #32
    2cc2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2cc4:	3321      	adds	r3, #33	; 0x21
    2cc6:	e7cf      	b.n	2c68 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2cc8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2cca:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2ccc:	2300      	movs	r3, #0
    2cce:	e7cb      	b.n	2c68 <usart_read_wait+0x8>

00002cd0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2cd2:	0080      	lsls	r0, r0, #2
    2cd4:	4b62      	ldr	r3, [pc, #392]	; (2e60 <_usart_interrupt_handler+0x190>)
    2cd6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2cd8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2cda:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d1fc      	bne.n	2cda <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ce0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2ce2:	7da6      	ldrb	r6, [r4, #22]
    2ce4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2ce6:	2330      	movs	r3, #48	; 0x30
    2ce8:	5ceb      	ldrb	r3, [r5, r3]
    2cea:	2231      	movs	r2, #49	; 0x31
    2cec:	5caf      	ldrb	r7, [r5, r2]
    2cee:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2cf0:	07f3      	lsls	r3, r6, #31
    2cf2:	d522      	bpl.n	2d3a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2cf4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2cf6:	b29b      	uxth	r3, r3
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d01c      	beq.n	2d36 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cfc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2cfe:	7813      	ldrb	r3, [r2, #0]
    2d00:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2d02:	1c51      	adds	r1, r2, #1
    2d04:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d06:	7969      	ldrb	r1, [r5, #5]
    2d08:	2901      	cmp	r1, #1
    2d0a:	d00e      	beq.n	2d2a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2d0c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2d0e:	05db      	lsls	r3, r3, #23
    2d10:	0ddb      	lsrs	r3, r3, #23
    2d12:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2d14:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2d16:	3b01      	subs	r3, #1
    2d18:	b29b      	uxth	r3, r3
    2d1a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d10c      	bne.n	2d3a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d20:	3301      	adds	r3, #1
    2d22:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2d24:	3301      	adds	r3, #1
    2d26:	75a3      	strb	r3, [r4, #22]
    2d28:	e007      	b.n	2d3a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2d2a:	7851      	ldrb	r1, [r2, #1]
    2d2c:	0209      	lsls	r1, r1, #8
    2d2e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2d30:	3202      	adds	r2, #2
    2d32:	62aa      	str	r2, [r5, #40]	; 0x28
    2d34:	e7eb      	b.n	2d0e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2d36:	2301      	movs	r3, #1
    2d38:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2d3a:	07b3      	lsls	r3, r6, #30
    2d3c:	d506      	bpl.n	2d4c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2d3e:	2302      	movs	r3, #2
    2d40:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2d42:	2200      	movs	r2, #0
    2d44:	3331      	adds	r3, #49	; 0x31
    2d46:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2d48:	07fb      	lsls	r3, r7, #31
    2d4a:	d41a      	bmi.n	2d82 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2d4c:	0773      	lsls	r3, r6, #29
    2d4e:	d565      	bpl.n	2e1c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2d50:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2d52:	b29b      	uxth	r3, r3
    2d54:	2b00      	cmp	r3, #0
    2d56:	d05f      	beq.n	2e18 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d58:	8b63      	ldrh	r3, [r4, #26]
    2d5a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2d5c:	071a      	lsls	r2, r3, #28
    2d5e:	d414      	bmi.n	2d8a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d60:	223f      	movs	r2, #63	; 0x3f
    2d62:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2d64:	2b00      	cmp	r3, #0
    2d66:	d034      	beq.n	2dd2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2d68:	079a      	lsls	r2, r3, #30
    2d6a:	d511      	bpl.n	2d90 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2d6c:	221a      	movs	r2, #26
    2d6e:	2332      	movs	r3, #50	; 0x32
    2d70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2d72:	3b30      	subs	r3, #48	; 0x30
    2d74:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2d76:	077b      	lsls	r3, r7, #29
    2d78:	d550      	bpl.n	2e1c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2d7a:	0028      	movs	r0, r5
    2d7c:	696b      	ldr	r3, [r5, #20]
    2d7e:	4798      	blx	r3
    2d80:	e04c      	b.n	2e1c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2d82:	0028      	movs	r0, r5
    2d84:	68eb      	ldr	r3, [r5, #12]
    2d86:	4798      	blx	r3
    2d88:	e7e0      	b.n	2d4c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2d8a:	2237      	movs	r2, #55	; 0x37
    2d8c:	4013      	ands	r3, r2
    2d8e:	e7e9      	b.n	2d64 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2d90:	075a      	lsls	r2, r3, #29
    2d92:	d505      	bpl.n	2da0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2d94:	221e      	movs	r2, #30
    2d96:	2332      	movs	r3, #50	; 0x32
    2d98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2d9a:	3b2e      	subs	r3, #46	; 0x2e
    2d9c:	8363      	strh	r3, [r4, #26]
    2d9e:	e7ea      	b.n	2d76 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2da0:	07da      	lsls	r2, r3, #31
    2da2:	d505      	bpl.n	2db0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2da4:	2213      	movs	r2, #19
    2da6:	2332      	movs	r3, #50	; 0x32
    2da8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2daa:	3b31      	subs	r3, #49	; 0x31
    2dac:	8363      	strh	r3, [r4, #26]
    2dae:	e7e2      	b.n	2d76 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2db0:	06da      	lsls	r2, r3, #27
    2db2:	d505      	bpl.n	2dc0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2db4:	2242      	movs	r2, #66	; 0x42
    2db6:	2332      	movs	r3, #50	; 0x32
    2db8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2dba:	3b22      	subs	r3, #34	; 0x22
    2dbc:	8363      	strh	r3, [r4, #26]
    2dbe:	e7da      	b.n	2d76 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2dc0:	2220      	movs	r2, #32
    2dc2:	421a      	tst	r2, r3
    2dc4:	d0d7      	beq.n	2d76 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2dc6:	3221      	adds	r2, #33	; 0x21
    2dc8:	2332      	movs	r3, #50	; 0x32
    2dca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2dcc:	3b12      	subs	r3, #18
    2dce:	8363      	strh	r3, [r4, #26]
    2dd0:	e7d1      	b.n	2d76 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2dd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2dd4:	05db      	lsls	r3, r3, #23
    2dd6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2dd8:	b2da      	uxtb	r2, r3
    2dda:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2ddc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2dde:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2de0:	1c51      	adds	r1, r2, #1
    2de2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2de4:	7969      	ldrb	r1, [r5, #5]
    2de6:	2901      	cmp	r1, #1
    2de8:	d010      	beq.n	2e0c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2dea:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2dec:	3b01      	subs	r3, #1
    2dee:	b29b      	uxth	r3, r3
    2df0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2df2:	2b00      	cmp	r3, #0
    2df4:	d112      	bne.n	2e1c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2df6:	3304      	adds	r3, #4
    2df8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2dfa:	2200      	movs	r2, #0
    2dfc:	332e      	adds	r3, #46	; 0x2e
    2dfe:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2e00:	07bb      	lsls	r3, r7, #30
    2e02:	d50b      	bpl.n	2e1c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2e04:	0028      	movs	r0, r5
    2e06:	692b      	ldr	r3, [r5, #16]
    2e08:	4798      	blx	r3
    2e0a:	e007      	b.n	2e1c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2e0c:	0a1b      	lsrs	r3, r3, #8
    2e0e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2e10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2e12:	3301      	adds	r3, #1
    2e14:	626b      	str	r3, [r5, #36]	; 0x24
    2e16:	e7e8      	b.n	2dea <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2e18:	2304      	movs	r3, #4
    2e1a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2e1c:	06f3      	lsls	r3, r6, #27
    2e1e:	d504      	bpl.n	2e2a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2e20:	2310      	movs	r3, #16
    2e22:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2e24:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2e26:	06fb      	lsls	r3, r7, #27
    2e28:	d40e      	bmi.n	2e48 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2e2a:	06b3      	lsls	r3, r6, #26
    2e2c:	d504      	bpl.n	2e38 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2e2e:	2320      	movs	r3, #32
    2e30:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e32:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2e34:	073b      	lsls	r3, r7, #28
    2e36:	d40b      	bmi.n	2e50 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2e38:	0733      	lsls	r3, r6, #28
    2e3a:	d504      	bpl.n	2e46 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2e3c:	2308      	movs	r3, #8
    2e3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2e40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2e42:	06bb      	lsls	r3, r7, #26
    2e44:	d408      	bmi.n	2e58 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2e48:	0028      	movs	r0, r5
    2e4a:	69eb      	ldr	r3, [r5, #28]
    2e4c:	4798      	blx	r3
    2e4e:	e7ec      	b.n	2e2a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2e50:	0028      	movs	r0, r5
    2e52:	69ab      	ldr	r3, [r5, #24]
    2e54:	4798      	blx	r3
    2e56:	e7ef      	b.n	2e38 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2e58:	6a2b      	ldr	r3, [r5, #32]
    2e5a:	0028      	movs	r0, r5
    2e5c:	4798      	blx	r3
}
    2e5e:	e7f2      	b.n	2e46 <_usart_interrupt_handler+0x176>
    2e60:	2000044c 	.word	0x2000044c

00002e64 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2e64:	b510      	push	{r4, lr}
	switch (clock_source) {
    2e66:	2808      	cmp	r0, #8
    2e68:	d803      	bhi.n	2e72 <system_clock_source_get_hz+0xe>
    2e6a:	0080      	lsls	r0, r0, #2
    2e6c:	4b1e      	ldr	r3, [pc, #120]	; (2ee8 <system_clock_source_get_hz+0x84>)
    2e6e:	581b      	ldr	r3, [r3, r0]
    2e70:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2e72:	2000      	movs	r0, #0
    2e74:	e036      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    2e76:	4b1d      	ldr	r3, [pc, #116]	; (2eec <system_clock_source_get_hz+0x88>)
    2e78:	6918      	ldr	r0, [r3, #16]
    2e7a:	e033      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2e7c:	4b1c      	ldr	r3, [pc, #112]	; (2ef0 <system_clock_source_get_hz+0x8c>)
    2e7e:	6a1b      	ldr	r3, [r3, #32]
    2e80:	059b      	lsls	r3, r3, #22
    2e82:	0f9b      	lsrs	r3, r3, #30
    2e84:	481b      	ldr	r0, [pc, #108]	; (2ef4 <system_clock_source_get_hz+0x90>)
    2e86:	40d8      	lsrs	r0, r3
    2e88:	e02c      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2e8a:	4b18      	ldr	r3, [pc, #96]	; (2eec <system_clock_source_get_hz+0x88>)
    2e8c:	6958      	ldr	r0, [r3, #20]
    2e8e:	e029      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e90:	4b16      	ldr	r3, [pc, #88]	; (2eec <system_clock_source_get_hz+0x88>)
    2e92:	681b      	ldr	r3, [r3, #0]
			return 0;
    2e94:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2e96:	079b      	lsls	r3, r3, #30
    2e98:	d524      	bpl.n	2ee4 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e9a:	4915      	ldr	r1, [pc, #84]	; (2ef0 <system_clock_source_get_hz+0x8c>)
    2e9c:	2210      	movs	r2, #16
    2e9e:	68cb      	ldr	r3, [r1, #12]
    2ea0:	421a      	tst	r2, r3
    2ea2:	d0fc      	beq.n	2e9e <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2ea4:	4b11      	ldr	r3, [pc, #68]	; (2eec <system_clock_source_get_hz+0x88>)
    2ea6:	681b      	ldr	r3, [r3, #0]
    2ea8:	075b      	lsls	r3, r3, #29
    2eaa:	d401      	bmi.n	2eb0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2eac:	4812      	ldr	r0, [pc, #72]	; (2ef8 <system_clock_source_get_hz+0x94>)
    2eae:	e019      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2eb0:	4b0e      	ldr	r3, [pc, #56]	; (2eec <system_clock_source_get_hz+0x88>)
    2eb2:	681b      	ldr	r3, [r3, #0]
    2eb4:	069b      	lsls	r3, r3, #26
    2eb6:	d501      	bpl.n	2ebc <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2eb8:	480f      	ldr	r0, [pc, #60]	; (2ef8 <system_clock_source_get_hz+0x94>)
    2eba:	e013      	b.n	2ee4 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2ebc:	2000      	movs	r0, #0
    2ebe:	4b0f      	ldr	r3, [pc, #60]	; (2efc <system_clock_source_get_hz+0x98>)
    2ec0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2ec2:	4b0a      	ldr	r3, [pc, #40]	; (2eec <system_clock_source_get_hz+0x88>)
    2ec4:	689b      	ldr	r3, [r3, #8]
    2ec6:	041b      	lsls	r3, r3, #16
    2ec8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2eca:	4358      	muls	r0, r3
    2ecc:	e00a      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ece:	2350      	movs	r3, #80	; 0x50
    2ed0:	4a07      	ldr	r2, [pc, #28]	; (2ef0 <system_clock_source_get_hz+0x8c>)
    2ed2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2ed4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ed6:	075b      	lsls	r3, r3, #29
    2ed8:	d504      	bpl.n	2ee4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2eda:	4b04      	ldr	r3, [pc, #16]	; (2eec <system_clock_source_get_hz+0x88>)
    2edc:	68d8      	ldr	r0, [r3, #12]
    2ede:	e001      	b.n	2ee4 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2ee0:	2080      	movs	r0, #128	; 0x80
    2ee2:	0200      	lsls	r0, r0, #8
	}
}
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	0000a9e8 	.word	0x0000a9e8
    2eec:	20000248 	.word	0x20000248
    2ef0:	40000800 	.word	0x40000800
    2ef4:	007a1200 	.word	0x007a1200
    2ef8:	02dc6c00 	.word	0x02dc6c00
    2efc:	00008af5 	.word	0x00008af5

00002f00 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2f00:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2f02:	490c      	ldr	r1, [pc, #48]	; (2f34 <system_clock_source_osc8m_set_config+0x34>)
    2f04:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2f06:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f08:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2f0a:	7840      	ldrb	r0, [r0, #1]
    2f0c:	2201      	movs	r2, #1
    2f0e:	4010      	ands	r0, r2
    2f10:	0180      	lsls	r0, r0, #6
    2f12:	2640      	movs	r6, #64	; 0x40
    2f14:	43b3      	bics	r3, r6
    2f16:	4303      	orrs	r3, r0
    2f18:	402a      	ands	r2, r5
    2f1a:	01d2      	lsls	r2, r2, #7
    2f1c:	2080      	movs	r0, #128	; 0x80
    2f1e:	4383      	bics	r3, r0
    2f20:	4313      	orrs	r3, r2
    2f22:	2203      	movs	r2, #3
    2f24:	4022      	ands	r2, r4
    2f26:	0212      	lsls	r2, r2, #8
    2f28:	4803      	ldr	r0, [pc, #12]	; (2f38 <system_clock_source_osc8m_set_config+0x38>)
    2f2a:	4003      	ands	r3, r0
    2f2c:	4313      	orrs	r3, r2
    2f2e:	620b      	str	r3, [r1, #32]
}
    2f30:	bd70      	pop	{r4, r5, r6, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	40000800 	.word	0x40000800
    2f38:	fffffcff 	.word	0xfffffcff

00002f3c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f3e:	46ce      	mov	lr, r9
    2f40:	4647      	mov	r7, r8
    2f42:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2f44:	4b19      	ldr	r3, [pc, #100]	; (2fac <system_clock_source_osc32k_set_config+0x70>)
    2f46:	4699      	mov	r9, r3
    2f48:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2f4a:	7841      	ldrb	r1, [r0, #1]
    2f4c:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2f4e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2f50:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2f52:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2f54:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2f56:	7880      	ldrb	r0, [r0, #2]
    2f58:	2101      	movs	r1, #1
    2f5a:	4008      	ands	r0, r1
    2f5c:	0080      	lsls	r0, r0, #2
    2f5e:	2204      	movs	r2, #4
    2f60:	4393      	bics	r3, r2
    2f62:	4303      	orrs	r3, r0
    2f64:	4660      	mov	r0, ip
    2f66:	4008      	ands	r0, r1
    2f68:	00c0      	lsls	r0, r0, #3
    2f6a:	3204      	adds	r2, #4
    2f6c:	4393      	bics	r3, r2
    2f6e:	4303      	orrs	r3, r0
    2f70:	0038      	movs	r0, r7
    2f72:	4008      	ands	r0, r1
    2f74:	0180      	lsls	r0, r0, #6
    2f76:	2740      	movs	r7, #64	; 0x40
    2f78:	43bb      	bics	r3, r7
    2f7a:	4303      	orrs	r3, r0
    2f7c:	0030      	movs	r0, r6
    2f7e:	4008      	ands	r0, r1
    2f80:	01c0      	lsls	r0, r0, #7
    2f82:	2680      	movs	r6, #128	; 0x80
    2f84:	43b3      	bics	r3, r6
    2f86:	4303      	orrs	r3, r0
    2f88:	2007      	movs	r0, #7
    2f8a:	4005      	ands	r5, r0
    2f8c:	022d      	lsls	r5, r5, #8
    2f8e:	4808      	ldr	r0, [pc, #32]	; (2fb0 <system_clock_source_osc32k_set_config+0x74>)
    2f90:	4003      	ands	r3, r0
    2f92:	432b      	orrs	r3, r5
    2f94:	4021      	ands	r1, r4
    2f96:	0309      	lsls	r1, r1, #12
    2f98:	4806      	ldr	r0, [pc, #24]	; (2fb4 <system_clock_source_osc32k_set_config+0x78>)
    2f9a:	4003      	ands	r3, r0
    2f9c:	430b      	orrs	r3, r1
    2f9e:	464a      	mov	r2, r9
    2fa0:	6193      	str	r3, [r2, #24]
}
    2fa2:	bc0c      	pop	{r2, r3}
    2fa4:	4690      	mov	r8, r2
    2fa6:	4699      	mov	r9, r3
    2fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	40000800 	.word	0x40000800
    2fb0:	fffff8ff 	.word	0xfffff8ff
    2fb4:	ffffefff 	.word	0xffffefff

00002fb8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2fb8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2fba:	7a03      	ldrb	r3, [r0, #8]
    2fbc:	069b      	lsls	r3, r3, #26
    2fbe:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2fc0:	8942      	ldrh	r2, [r0, #10]
    2fc2:	0592      	lsls	r2, r2, #22
    2fc4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2fc6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2fc8:	4918      	ldr	r1, [pc, #96]	; (302c <system_clock_source_dfll_set_config+0x74>)
    2fca:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2fcc:	7983      	ldrb	r3, [r0, #6]
    2fce:	79c2      	ldrb	r2, [r0, #7]
    2fd0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2fd2:	8842      	ldrh	r2, [r0, #2]
    2fd4:	8884      	ldrh	r4, [r0, #4]
    2fd6:	4322      	orrs	r2, r4
    2fd8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2fda:	7842      	ldrb	r2, [r0, #1]
    2fdc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2fde:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2fe0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2fe2:	7803      	ldrb	r3, [r0, #0]
    2fe4:	2b04      	cmp	r3, #4
    2fe6:	d011      	beq.n	300c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2fe8:	2b20      	cmp	r3, #32
    2fea:	d10e      	bne.n	300a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fec:	7b03      	ldrb	r3, [r0, #12]
    2fee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ff0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ff2:	4313      	orrs	r3, r2
    2ff4:	89c2      	ldrh	r2, [r0, #14]
    2ff6:	0412      	lsls	r2, r2, #16
    2ff8:	490d      	ldr	r1, [pc, #52]	; (3030 <system_clock_source_dfll_set_config+0x78>)
    2ffa:	400a      	ands	r2, r1
    2ffc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ffe:	4a0b      	ldr	r2, [pc, #44]	; (302c <system_clock_source_dfll_set_config+0x74>)
    3000:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3002:	6811      	ldr	r1, [r2, #0]
    3004:	4b0b      	ldr	r3, [pc, #44]	; (3034 <system_clock_source_dfll_set_config+0x7c>)
    3006:	430b      	orrs	r3, r1
    3008:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    300a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    300c:	7b03      	ldrb	r3, [r0, #12]
    300e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3010:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3012:	4313      	orrs	r3, r2
    3014:	89c2      	ldrh	r2, [r0, #14]
    3016:	0412      	lsls	r2, r2, #16
    3018:	4905      	ldr	r1, [pc, #20]	; (3030 <system_clock_source_dfll_set_config+0x78>)
    301a:	400a      	ands	r2, r1
    301c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    301e:	4a03      	ldr	r2, [pc, #12]	; (302c <system_clock_source_dfll_set_config+0x74>)
    3020:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    3022:	6813      	ldr	r3, [r2, #0]
    3024:	2104      	movs	r1, #4
    3026:	430b      	orrs	r3, r1
    3028:	6013      	str	r3, [r2, #0]
    302a:	e7ee      	b.n	300a <system_clock_source_dfll_set_config+0x52>
    302c:	20000248 	.word	0x20000248
    3030:	03ff0000 	.word	0x03ff0000
    3034:	00000424 	.word	0x00000424

00003038 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3038:	2808      	cmp	r0, #8
    303a:	d803      	bhi.n	3044 <system_clock_source_enable+0xc>
    303c:	0080      	lsls	r0, r0, #2
    303e:	4b25      	ldr	r3, [pc, #148]	; (30d4 <system_clock_source_enable+0x9c>)
    3040:	581b      	ldr	r3, [r3, r0]
    3042:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3044:	2017      	movs	r0, #23
    3046:	e044      	b.n	30d2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3048:	4a23      	ldr	r2, [pc, #140]	; (30d8 <system_clock_source_enable+0xa0>)
    304a:	6a13      	ldr	r3, [r2, #32]
    304c:	2102      	movs	r1, #2
    304e:	430b      	orrs	r3, r1
    3050:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3052:	2000      	movs	r0, #0
    3054:	e03d      	b.n	30d2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3056:	4a20      	ldr	r2, [pc, #128]	; (30d8 <system_clock_source_enable+0xa0>)
    3058:	6993      	ldr	r3, [r2, #24]
    305a:	2102      	movs	r1, #2
    305c:	430b      	orrs	r3, r1
    305e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3060:	2000      	movs	r0, #0
		break;
    3062:	e036      	b.n	30d2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3064:	4a1c      	ldr	r2, [pc, #112]	; (30d8 <system_clock_source_enable+0xa0>)
    3066:	8a13      	ldrh	r3, [r2, #16]
    3068:	2102      	movs	r1, #2
    306a:	430b      	orrs	r3, r1
    306c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    306e:	2000      	movs	r0, #0
		break;
    3070:	e02f      	b.n	30d2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3072:	4a19      	ldr	r2, [pc, #100]	; (30d8 <system_clock_source_enable+0xa0>)
    3074:	8a93      	ldrh	r3, [r2, #20]
    3076:	2102      	movs	r1, #2
    3078:	430b      	orrs	r3, r1
    307a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    307c:	2000      	movs	r0, #0
		break;
    307e:	e028      	b.n	30d2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3080:	4916      	ldr	r1, [pc, #88]	; (30dc <system_clock_source_enable+0xa4>)
    3082:	680b      	ldr	r3, [r1, #0]
    3084:	2202      	movs	r2, #2
    3086:	4313      	orrs	r3, r2
    3088:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    308a:	4b13      	ldr	r3, [pc, #76]	; (30d8 <system_clock_source_enable+0xa0>)
    308c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    308e:	0019      	movs	r1, r3
    3090:	320e      	adds	r2, #14
    3092:	68cb      	ldr	r3, [r1, #12]
    3094:	421a      	tst	r2, r3
    3096:	d0fc      	beq.n	3092 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3098:	4a10      	ldr	r2, [pc, #64]	; (30dc <system_clock_source_enable+0xa4>)
    309a:	6891      	ldr	r1, [r2, #8]
    309c:	4b0e      	ldr	r3, [pc, #56]	; (30d8 <system_clock_source_enable+0xa0>)
    309e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    30a0:	6852      	ldr	r2, [r2, #4]
    30a2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    30a4:	2200      	movs	r2, #0
    30a6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    30a8:	0019      	movs	r1, r3
    30aa:	3210      	adds	r2, #16
    30ac:	68cb      	ldr	r3, [r1, #12]
    30ae:	421a      	tst	r2, r3
    30b0:	d0fc      	beq.n	30ac <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    30b2:	4b0a      	ldr	r3, [pc, #40]	; (30dc <system_clock_source_enable+0xa4>)
    30b4:	681b      	ldr	r3, [r3, #0]
    30b6:	b29b      	uxth	r3, r3
    30b8:	4a07      	ldr	r2, [pc, #28]	; (30d8 <system_clock_source_enable+0xa0>)
    30ba:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    30bc:	2000      	movs	r0, #0
    30be:	e008      	b.n	30d2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    30c0:	4905      	ldr	r1, [pc, #20]	; (30d8 <system_clock_source_enable+0xa0>)
    30c2:	2244      	movs	r2, #68	; 0x44
    30c4:	5c8b      	ldrb	r3, [r1, r2]
    30c6:	2002      	movs	r0, #2
    30c8:	4303      	orrs	r3, r0
    30ca:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    30cc:	2000      	movs	r0, #0
		break;
    30ce:	e000      	b.n	30d2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    30d0:	2000      	movs	r0, #0
}
    30d2:	4770      	bx	lr
    30d4:	0000aa0c 	.word	0x0000aa0c
    30d8:	40000800 	.word	0x40000800
    30dc:	20000248 	.word	0x20000248

000030e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    30e0:	b570      	push	{r4, r5, r6, lr}
    30e2:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    30e4:	22c2      	movs	r2, #194	; 0xc2
    30e6:	00d2      	lsls	r2, r2, #3
    30e8:	4b42      	ldr	r3, [pc, #264]	; (31f4 <system_clock_init+0x114>)
    30ea:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    30ec:	4a42      	ldr	r2, [pc, #264]	; (31f8 <system_clock_init+0x118>)
    30ee:	6853      	ldr	r3, [r2, #4]
    30f0:	211e      	movs	r1, #30
    30f2:	438b      	bics	r3, r1
    30f4:	391a      	subs	r1, #26
    30f6:	430b      	orrs	r3, r1
    30f8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    30fa:	2201      	movs	r2, #1
    30fc:	ab01      	add	r3, sp, #4
    30fe:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3100:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3102:	4d3e      	ldr	r5, [pc, #248]	; (31fc <system_clock_init+0x11c>)
    3104:	b2e0      	uxtb	r0, r4
    3106:	a901      	add	r1, sp, #4
    3108:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    310a:	3401      	adds	r4, #1
    310c:	2c25      	cmp	r4, #37	; 0x25
    310e:	d1f9      	bne.n	3104 <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    3110:	4c3b      	ldr	r4, [pc, #236]	; (3200 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    3112:	6823      	ldr	r3, [r4, #0]
    3114:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    3116:	4937      	ldr	r1, [pc, #220]	; (31f4 <system_clock_init+0x114>)
    3118:	698a      	ldr	r2, [r1, #24]
    311a:	0e5b      	lsrs	r3, r3, #25
    311c:	041b      	lsls	r3, r3, #16
    311e:	4839      	ldr	r0, [pc, #228]	; (3204 <system_clock_init+0x124>)
    3120:	4002      	ands	r2, r0
    3122:	4313      	orrs	r3, r2
    3124:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    3126:	a80a      	add	r0, sp, #40	; 0x28
    3128:	2301      	movs	r3, #1
    312a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    312c:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    312e:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3130:	2207      	movs	r2, #7
    3132:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    3134:	2500      	movs	r5, #0
    3136:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    3138:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    313a:	4b33      	ldr	r3, [pc, #204]	; (3208 <system_clock_init+0x128>)
    313c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    313e:	2004      	movs	r0, #4
    3140:	4b32      	ldr	r3, [pc, #200]	; (320c <system_clock_init+0x12c>)
    3142:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3144:	ab05      	add	r3, sp, #20
    3146:	2200      	movs	r2, #0
    3148:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    314a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    314c:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    314e:	2120      	movs	r1, #32
    3150:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3152:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3154:	6823      	ldr	r3, [r4, #0]
    3156:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3158:	2b3f      	cmp	r3, #63	; 0x3f
    315a:	d049      	beq.n	31f0 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    315c:	a805      	add	r0, sp, #20
    315e:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3160:	2307      	movs	r3, #7
    3162:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    3164:	3303      	adds	r3, #3
    3166:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    3168:	4b29      	ldr	r3, [pc, #164]	; (3210 <system_clock_init+0x130>)
    316a:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    316c:	3bff      	subs	r3, #255	; 0xff
    316e:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    3170:	4b28      	ldr	r3, [pc, #160]	; (3214 <system_clock_init+0x134>)
    3172:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3174:	4b28      	ldr	r3, [pc, #160]	; (3218 <system_clock_init+0x138>)
    3176:	4798      	blx	r3
	config->run_in_standby  = false;
    3178:	a804      	add	r0, sp, #16
    317a:	2400      	movs	r4, #0
    317c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    317e:	2501      	movs	r5, #1
    3180:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3182:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3184:	4b25      	ldr	r3, [pc, #148]	; (321c <system_clock_init+0x13c>)
    3186:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3188:	2006      	movs	r0, #6
    318a:	4e20      	ldr	r6, [pc, #128]	; (320c <system_clock_init+0x12c>)
    318c:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    318e:	4b24      	ldr	r3, [pc, #144]	; (3220 <system_clock_init+0x140>)
    3190:	4798      	blx	r3
	config->division_factor    = 1;
    3192:	a901      	add	r1, sp, #4
    3194:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    3196:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    3198:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    319a:	2304      	movs	r3, #4
    319c:	700b      	strb	r3, [r1, #0]
    319e:	720d      	strb	r5, [r1, #8]
    31a0:	2007      	movs	r0, #7
    31a2:	4b20      	ldr	r3, [pc, #128]	; (3224 <system_clock_init+0x144>)
    31a4:	4798      	blx	r3
    31a6:	2007      	movs	r0, #7
    31a8:	4b1f      	ldr	r3, [pc, #124]	; (3228 <system_clock_init+0x148>)
    31aa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    31ac:	2007      	movs	r0, #7
    31ae:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    31b0:	4910      	ldr	r1, [pc, #64]	; (31f4 <system_clock_init+0x114>)
    31b2:	2210      	movs	r2, #16
    31b4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    31b6:	421a      	tst	r2, r3
    31b8:	d0fc      	beq.n	31b4 <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    31ba:	4a0e      	ldr	r2, [pc, #56]	; (31f4 <system_clock_init+0x114>)
    31bc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    31be:	2180      	movs	r1, #128	; 0x80
    31c0:	430b      	orrs	r3, r1
    31c2:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    31c4:	4a19      	ldr	r2, [pc, #100]	; (322c <system_clock_init+0x14c>)
    31c6:	2300      	movs	r3, #0
    31c8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    31ca:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    31cc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    31ce:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    31d0:	a901      	add	r1, sp, #4
    31d2:	2201      	movs	r2, #1
    31d4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    31d6:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    31d8:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    31da:	3307      	adds	r3, #7
    31dc:	700b      	strb	r3, [r1, #0]
    31de:	720a      	strb	r2, [r1, #8]
    31e0:	2000      	movs	r0, #0
    31e2:	4b10      	ldr	r3, [pc, #64]	; (3224 <system_clock_init+0x144>)
    31e4:	4798      	blx	r3
    31e6:	2000      	movs	r0, #0
    31e8:	4b0f      	ldr	r3, [pc, #60]	; (3228 <system_clock_init+0x148>)
    31ea:	4798      	blx	r3
#endif
}
    31ec:	b00c      	add	sp, #48	; 0x30
    31ee:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    31f0:	3b20      	subs	r3, #32
    31f2:	e7b3      	b.n	315c <system_clock_init+0x7c>
    31f4:	40000800 	.word	0x40000800
    31f8:	41004000 	.word	0x41004000
    31fc:	00008ad9 	.word	0x00008ad9
    3200:	00806024 	.word	0x00806024
    3204:	ff80ffff 	.word	0xff80ffff
    3208:	00002f3d 	.word	0x00002f3d
    320c:	00003039 	.word	0x00003039
    3210:	000001ff 	.word	0x000001ff
    3214:	ffffbb80 	.word	0xffffbb80
    3218:	00002fb9 	.word	0x00002fb9
    321c:	00002f01 	.word	0x00002f01
    3220:	000088a1 	.word	0x000088a1
    3224:	000088c5 	.word	0x000088c5
    3228:	0000897d 	.word	0x0000897d
    322c:	40000400 	.word	0x40000400

00003230 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3230:	b510      	push	{r4, lr}
    3232:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    3234:	ab03      	add	r3, sp, #12
    3236:	2200      	movs	r2, #0
    3238:	701a      	strb	r2, [r3, #0]
    323a:	3203      	adds	r2, #3
    323c:	705a      	strb	r2, [r3, #1]
    323e:	3a01      	subs	r2, #1
    3240:	709a      	strb	r2, [r3, #2]
    3242:	3a01      	subs	r2, #1
    3244:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    3246:	4b27      	ldr	r3, [pc, #156]	; (32e4 <udd_sleep_mode+0xb4>)
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	4283      	cmp	r3, r0
    324c:	d007      	beq.n	325e <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    324e:	2800      	cmp	r0, #0
    3250:	d107      	bne.n	3262 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    3252:	4b24      	ldr	r3, [pc, #144]	; (32e4 <udd_sleep_mode+0xb4>)
    3254:	781b      	ldrb	r3, [r3, #0]
    3256:	2b00      	cmp	r3, #0
    3258:	d123      	bne.n	32a2 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    325a:	4b22      	ldr	r3, [pc, #136]	; (32e4 <udd_sleep_mode+0xb4>)
    325c:	7018      	strb	r0, [r3, #0]
}
    325e:	b004      	add	sp, #16
    3260:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    3262:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3264:	5c1b      	ldrb	r3, [r3, r0]
    3266:	4a20      	ldr	r2, [pc, #128]	; (32e8 <udd_sleep_mode+0xb8>)
    3268:	5cd2      	ldrb	r2, [r2, r3]
    326a:	2aff      	cmp	r2, #255	; 0xff
    326c:	d100      	bne.n	3270 <udd_sleep_mode+0x40>
    326e:	e7fe      	b.n	326e <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3270:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3274:	4251      	negs	r1, r2
    3276:	414a      	adcs	r2, r1
    3278:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    327a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    327c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3280:	2100      	movs	r1, #0
    3282:	4a1a      	ldr	r2, [pc, #104]	; (32ec <udd_sleep_mode+0xbc>)
    3284:	7011      	strb	r1, [r2, #0]
	return flags;
    3286:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3288:	4917      	ldr	r1, [pc, #92]	; (32e8 <udd_sleep_mode+0xb8>)
    328a:	5cca      	ldrb	r2, [r1, r3]
    328c:	3201      	adds	r2, #1
    328e:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3290:	2c00      	cmp	r4, #0
    3292:	d0de      	beq.n	3252 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    3294:	2201      	movs	r2, #1
    3296:	4b15      	ldr	r3, [pc, #84]	; (32ec <udd_sleep_mode+0xbc>)
    3298:	701a      	strb	r2, [r3, #0]
    329a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    329e:	b662      	cpsie	i
    32a0:	e7d7      	b.n	3252 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    32a2:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    32a4:	5cd3      	ldrb	r3, [r2, r3]
    32a6:	4a10      	ldr	r2, [pc, #64]	; (32e8 <udd_sleep_mode+0xb8>)
    32a8:	5cd2      	ldrb	r2, [r2, r3]
    32aa:	2a00      	cmp	r2, #0
    32ac:	d100      	bne.n	32b0 <udd_sleep_mode+0x80>
    32ae:	e7fe      	b.n	32ae <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32b0:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    32b4:	4251      	negs	r1, r2
    32b6:	414a      	adcs	r2, r1
    32b8:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    32ba:	b672      	cpsid	i
    32bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    32c0:	2100      	movs	r1, #0
    32c2:	4a0a      	ldr	r2, [pc, #40]	; (32ec <udd_sleep_mode+0xbc>)
    32c4:	7011      	strb	r1, [r2, #0]
	return flags;
    32c6:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    32c8:	4907      	ldr	r1, [pc, #28]	; (32e8 <udd_sleep_mode+0xb8>)
    32ca:	5cca      	ldrb	r2, [r1, r3]
    32cc:	3a01      	subs	r2, #1
    32ce:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    32d0:	2c00      	cmp	r4, #0
    32d2:	d0c2      	beq.n	325a <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    32d4:	2201      	movs	r2, #1
    32d6:	4b05      	ldr	r3, [pc, #20]	; (32ec <udd_sleep_mode+0xbc>)
    32d8:	701a      	strb	r2, [r3, #0]
    32da:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32de:	b662      	cpsie	i
    32e0:	e7bb      	b.n	325a <udd_sleep_mode+0x2a>
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	200002b8 	.word	0x200002b8
    32e8:	20000e94 	.word	0x20000e94
    32ec:	20000125 	.word	0x20000125

000032f0 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    32f0:	0643      	lsls	r3, r0, #25
    32f2:	d00b      	beq.n	330c <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    32f4:	230f      	movs	r3, #15
    32f6:	4003      	ands	r3, r0
    32f8:	005b      	lsls	r3, r3, #1
    32fa:	09c0      	lsrs	r0, r0, #7
    32fc:	1818      	adds	r0, r3, r0
    32fe:	3802      	subs	r0, #2
    3300:	0083      	lsls	r3, r0, #2
    3302:	1818      	adds	r0, r3, r0
    3304:	0080      	lsls	r0, r0, #2
    3306:	4b02      	ldr	r3, [pc, #8]	; (3310 <udd_ep_get_job+0x20>)
    3308:	1818      	adds	r0, r3, r0
	}
}
    330a:	4770      	bx	lr
		return NULL;
    330c:	2000      	movs	r0, #0
    330e:	e7fc      	b.n	330a <udd_ep_get_job+0x1a>
    3310:	20000268 	.word	0x20000268

00003314 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    3314:	b5f0      	push	{r4, r5, r6, r7, lr}
    3316:	46d6      	mov	lr, sl
    3318:	464f      	mov	r7, r9
    331a:	4646      	mov	r6, r8
    331c:	b5c0      	push	{r6, r7, lr}
    331e:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    3320:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    3322:	b26b      	sxtb	r3, r5
    3324:	2b00      	cmp	r3, #0
    3326:	db26      	blt.n	3376 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    3328:	0028      	movs	r0, r5
    332a:	4b5e      	ldr	r3, [pc, #376]	; (34a4 <udd_ep_transfer_process+0x190>)
    332c:	4798      	blx	r3
    332e:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    3330:	270f      	movs	r7, #15
    3332:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    3334:	8a03      	ldrh	r3, [r0, #16]
    3336:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    3338:	464b      	mov	r3, r9
    333a:	881b      	ldrh	r3, [r3, #0]
    333c:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    333e:	7c83      	ldrb	r3, [r0, #18]
    3340:	075b      	lsls	r3, r3, #29
    3342:	d46a      	bmi.n	341a <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    3344:	68e3      	ldr	r3, [r4, #12]
    3346:	4453      	add	r3, sl
    3348:	001e      	movs	r6, r3
    334a:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    334c:	68a3      	ldr	r3, [r4, #8]
    334e:	429e      	cmp	r6, r3
    3350:	d800      	bhi.n	3354 <udd_ep_transfer_process+0x40>
    3352:	e074      	b.n	343e <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    3354:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    3356:	7ca3      	ldrb	r3, [r4, #18]
    3358:	2201      	movs	r2, #1
    335a:	4393      	bics	r3, r2
    335c:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    335e:	6823      	ldr	r3, [r4, #0]
    3360:	2b00      	cmp	r3, #0
    3362:	d003      	beq.n	336c <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3364:	68e1      	ldr	r1, [r4, #12]
    3366:	002a      	movs	r2, r5
    3368:	2000      	movs	r0, #0
    336a:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    336c:	bc1c      	pop	{r2, r3, r4}
    336e:	4690      	mov	r8, r2
    3370:	4699      	mov	r9, r3
    3372:	46a2      	mov	sl, r4
    3374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    3376:	0028      	movs	r0, r5
    3378:	4b4a      	ldr	r3, [pc, #296]	; (34a4 <udd_ep_transfer_process+0x190>)
    337a:	4798      	blx	r3
    337c:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    337e:	270f      	movs	r7, #15
    3380:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    3382:	8a03      	ldrh	r3, [r0, #16]
    3384:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    3386:	464b      	mov	r3, r9
    3388:	885e      	ldrh	r6, [r3, #2]
    338a:	68c3      	ldr	r3, [r0, #12]
    338c:	469c      	mov	ip, r3
    338e:	4466      	add	r6, ip
    3390:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    3392:	6881      	ldr	r1, [r0, #8]
    3394:	428e      	cmp	r6, r1
    3396:	d025      	beq.n	33e4 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3398:	1b8d      	subs	r5, r1, r6
    339a:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    339c:	4b42      	ldr	r3, [pc, #264]	; (34a8 <udd_ep_transfer_process+0x194>)
    339e:	429d      	cmp	r5, r3
    33a0:	d906      	bls.n	33b0 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    33a2:	001d      	movs	r5, r3
    33a4:	4641      	mov	r1, r8
    33a6:	0018      	movs	r0, r3
    33a8:	4b40      	ldr	r3, [pc, #256]	; (34ac <udd_ep_transfer_process+0x198>)
    33aa:	4798      	blx	r3
    33ac:	1a6d      	subs	r5, r5, r1
    33ae:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    33b0:	7ca2      	ldrb	r2, [r4, #18]
    33b2:	2300      	movs	r3, #0
    33b4:	0792      	lsls	r2, r2, #30
    33b6:	d507      	bpl.n	33c8 <udd_ep_transfer_process+0xb4>
    33b8:	4641      	mov	r1, r8
    33ba:	0028      	movs	r0, r5
    33bc:	4b3c      	ldr	r3, [pc, #240]	; (34b0 <udd_ep_transfer_process+0x19c>)
    33be:	4798      	blx	r3
    33c0:	b289      	uxth	r1, r1
    33c2:	424b      	negs	r3, r1
    33c4:	414b      	adcs	r3, r1
    33c6:	b2db      	uxtb	r3, r3
    33c8:	005b      	lsls	r3, r3, #1
    33ca:	7ca2      	ldrb	r2, [r4, #18]
    33cc:	2102      	movs	r1, #2
    33ce:	438a      	bics	r2, r1
    33d0:	4313      	orrs	r3, r2
    33d2:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    33d4:	6862      	ldr	r2, [r4, #4]
    33d6:	1992      	adds	r2, r2, r6
    33d8:	002b      	movs	r3, r5
    33da:	0039      	movs	r1, r7
    33dc:	4835      	ldr	r0, [pc, #212]	; (34b4 <udd_ep_transfer_process+0x1a0>)
    33de:	4c36      	ldr	r4, [pc, #216]	; (34b8 <udd_ep_transfer_process+0x1a4>)
    33e0:	47a0      	blx	r4
    33e2:	e7c3      	b.n	336c <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    33e4:	7c83      	ldrb	r3, [r0, #18]
    33e6:	079b      	lsls	r3, r3, #30
    33e8:	d40b      	bmi.n	3402 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    33ea:	7c83      	ldrb	r3, [r0, #18]
    33ec:	2201      	movs	r2, #1
    33ee:	4393      	bics	r3, r2
    33f0:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    33f2:	6803      	ldr	r3, [r0, #0]
    33f4:	2b00      	cmp	r3, #0
    33f6:	d0b9      	beq.n	336c <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    33f8:	002a      	movs	r2, r5
    33fa:	0031      	movs	r1, r6
    33fc:	2000      	movs	r0, #0
    33fe:	4798      	blx	r3
    3400:	e7b4      	b.n	336c <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    3402:	7c83      	ldrb	r3, [r0, #18]
    3404:	2202      	movs	r2, #2
    3406:	4393      	bics	r3, r2
    3408:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    340a:	6842      	ldr	r2, [r0, #4]
    340c:	1992      	adds	r2, r2, r6
    340e:	2300      	movs	r3, #0
    3410:	0039      	movs	r1, r7
    3412:	4828      	ldr	r0, [pc, #160]	; (34b4 <udd_ep_transfer_process+0x1a0>)
    3414:	4c28      	ldr	r4, [pc, #160]	; (34b8 <udd_ep_transfer_process+0x1a4>)
    3416:	47a0      	blx	r4
    3418:	e7a8      	b.n	336c <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    341a:	6843      	ldr	r3, [r0, #4]
    341c:	68c2      	ldr	r2, [r0, #12]
    341e:	4694      	mov	ip, r2
    3420:	4463      	add	r3, ip
    3422:	001e      	movs	r6, r3
    3424:	4641      	mov	r1, r8
    3426:	6880      	ldr	r0, [r0, #8]
    3428:	4b21      	ldr	r3, [pc, #132]	; (34b0 <udd_ep_transfer_process+0x19c>)
    342a:	4798      	blx	r3
    342c:	000a      	movs	r2, r1
    342e:	1e7b      	subs	r3, r7, #1
    3430:	019b      	lsls	r3, r3, #6
    3432:	4922      	ldr	r1, [pc, #136]	; (34bc <udd_ep_transfer_process+0x1a8>)
    3434:	1859      	adds	r1, r3, r1
    3436:	0030      	movs	r0, r6
    3438:	4b21      	ldr	r3, [pc, #132]	; (34c0 <udd_ep_transfer_process+0x1ac>)
    343a:	4798      	blx	r3
    343c:	e782      	b.n	3344 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    343e:	464a      	mov	r2, r9
    3440:	8892      	ldrh	r2, [r2, #4]
    3442:	4552      	cmp	r2, sl
    3444:	d000      	beq.n	3448 <udd_ep_transfer_process+0x134>
    3446:	e786      	b.n	3356 <udd_ep_transfer_process+0x42>
    3448:	429e      	cmp	r6, r3
    344a:	d100      	bne.n	344e <udd_ep_transfer_process+0x13a>
    344c:	e783      	b.n	3356 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    344e:	1b9b      	subs	r3, r3, r6
    3450:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3452:	4b15      	ldr	r3, [pc, #84]	; (34a8 <udd_ep_transfer_process+0x194>)
    3454:	429d      	cmp	r5, r3
    3456:	d916      	bls.n	3486 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3458:	001d      	movs	r5, r3
    345a:	4641      	mov	r1, r8
    345c:	0018      	movs	r0, r3
    345e:	4b13      	ldr	r3, [pc, #76]	; (34ac <udd_ep_transfer_process+0x198>)
    3460:	4798      	blx	r3
    3462:	1a6b      	subs	r3, r5, r1
    3464:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    3466:	4598      	cmp	r8, r3
    3468:	d914      	bls.n	3494 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    346a:	7ca3      	ldrb	r3, [r4, #18]
    346c:	2204      	movs	r2, #4
    346e:	4313      	orrs	r3, r2
    3470:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    3472:	1e7a      	subs	r2, r7, #1
    3474:	0192      	lsls	r2, r2, #6
    3476:	4b11      	ldr	r3, [pc, #68]	; (34bc <udd_ep_transfer_process+0x1a8>)
    3478:	18d2      	adds	r2, r2, r3
    347a:	4643      	mov	r3, r8
    347c:	0039      	movs	r1, r7
    347e:	480d      	ldr	r0, [pc, #52]	; (34b4 <udd_ep_transfer_process+0x1a0>)
    3480:	4c10      	ldr	r4, [pc, #64]	; (34c4 <udd_ep_transfer_process+0x1b0>)
    3482:	47a0      	blx	r4
    3484:	e772      	b.n	336c <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    3486:	4641      	mov	r1, r8
    3488:	0028      	movs	r0, r5
    348a:	4b09      	ldr	r3, [pc, #36]	; (34b0 <udd_ep_transfer_process+0x19c>)
    348c:	4798      	blx	r3
    348e:	1a6b      	subs	r3, r5, r1
    3490:	b29b      	uxth	r3, r3
    3492:	e7e8      	b.n	3466 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3494:	6862      	ldr	r2, [r4, #4]
    3496:	1992      	adds	r2, r2, r6
    3498:	0039      	movs	r1, r7
    349a:	4806      	ldr	r0, [pc, #24]	; (34b4 <udd_ep_transfer_process+0x1a0>)
    349c:	4c09      	ldr	r4, [pc, #36]	; (34c4 <udd_ep_transfer_process+0x1b0>)
    349e:	47a0      	blx	r4
    34a0:	e764      	b.n	336c <udd_ep_transfer_process+0x58>
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	000032f1 	.word	0x000032f1
    34a8:	00001fff 	.word	0x00001fff
    34ac:	00009035 	.word	0x00009035
    34b0:	00008e61 	.word	0x00008e61
    34b4:	200004e4 	.word	0x200004e4
    34b8:	000067dd 	.word	0x000067dd
    34bc:	20000464 	.word	0x20000464
    34c0:	00009331 	.word	0x00009331
    34c4:	00006831 	.word	0x00006831

000034c8 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    34c8:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    34ca:	2205      	movs	r2, #5
    34cc:	4b05      	ldr	r3, [pc, #20]	; (34e4 <udd_ctrl_stall_data+0x1c>)
    34ce:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    34d0:	4c05      	ldr	r4, [pc, #20]	; (34e8 <udd_ctrl_stall_data+0x20>)
    34d2:	2180      	movs	r1, #128	; 0x80
    34d4:	0020      	movs	r0, r4
    34d6:	4b05      	ldr	r3, [pc, #20]	; (34ec <udd_ctrl_stall_data+0x24>)
    34d8:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    34da:	2100      	movs	r1, #0
    34dc:	0020      	movs	r0, r4
    34de:	4b04      	ldr	r3, [pc, #16]	; (34f0 <udd_ctrl_stall_data+0x28>)
    34e0:	4798      	blx	r3
}
    34e2:	bd10      	pop	{r4, pc}
    34e4:	20000266 	.word	0x20000266
    34e8:	200004e4 	.word	0x200004e4
    34ec:	00006731 	.word	0x00006731
    34f0:	00006757 	.word	0x00006757

000034f4 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    34f4:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    34f6:	4c08      	ldr	r4, [pc, #32]	; (3518 <_usb_device_lpm_suspend+0x24>)
    34f8:	2106      	movs	r1, #6
    34fa:	0020      	movs	r0, r4
    34fc:	4d07      	ldr	r5, [pc, #28]	; (351c <_usb_device_lpm_suspend+0x28>)
    34fe:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3500:	2104      	movs	r1, #4
    3502:	0020      	movs	r0, r4
    3504:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3506:	2102      	movs	r1, #2
    3508:	0020      	movs	r0, r4
    350a:	4b05      	ldr	r3, [pc, #20]	; (3520 <_usb_device_lpm_suspend+0x2c>)
    350c:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    350e:	2002      	movs	r0, #2
    3510:	4b04      	ldr	r3, [pc, #16]	; (3524 <_usb_device_lpm_suspend+0x30>)
    3512:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3514:	bd70      	pop	{r4, r5, r6, pc}
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	200004e4 	.word	0x200004e4
    351c:	00006245 	.word	0x00006245
    3520:	00006225 	.word	0x00006225
    3524:	00003231 	.word	0x00003231

00003528 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3528:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    352a:	4b13      	ldr	r3, [pc, #76]	; (3578 <_usb_on_wakeup+0x50>)
    352c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    352e:	069b      	lsls	r3, r3, #26
    3530:	d41c      	bmi.n	356c <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3532:	4911      	ldr	r1, [pc, #68]	; (3578 <_usb_on_wakeup+0x50>)
    3534:	22d0      	movs	r2, #208	; 0xd0
    3536:	68cb      	ldr	r3, [r1, #12]
    3538:	4013      	ands	r3, r2
    353a:	2bd0      	cmp	r3, #208	; 0xd0
    353c:	d1fb      	bne.n	3536 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    353e:	4c0f      	ldr	r4, [pc, #60]	; (357c <_usb_on_wakeup+0x54>)
    3540:	2102      	movs	r1, #2
    3542:	0020      	movs	r0, r4
    3544:	4b0e      	ldr	r3, [pc, #56]	; (3580 <_usb_on_wakeup+0x58>)
    3546:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3548:	2104      	movs	r1, #4
    354a:	0020      	movs	r0, r4
    354c:	4d0d      	ldr	r5, [pc, #52]	; (3584 <_usb_on_wakeup+0x5c>)
    354e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3550:	4a0d      	ldr	r2, [pc, #52]	; (3588 <_usb_on_wakeup+0x60>)
    3552:	2106      	movs	r1, #6
    3554:	0020      	movs	r0, r4
    3556:	4b0d      	ldr	r3, [pc, #52]	; (358c <_usb_on_wakeup+0x64>)
    3558:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    355a:	2106      	movs	r1, #6
    355c:	0020      	movs	r0, r4
    355e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3560:	2003      	movs	r0, #3
    3562:	4b0b      	ldr	r3, [pc, #44]	; (3590 <_usb_on_wakeup+0x68>)
    3564:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3566:	4b0b      	ldr	r3, [pc, #44]	; (3594 <_usb_on_wakeup+0x6c>)
    3568:	4798      	blx	r3
#endif
}
    356a:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    356c:	4902      	ldr	r1, [pc, #8]	; (3578 <_usb_on_wakeup+0x50>)
    356e:	2210      	movs	r2, #16
    3570:	68cb      	ldr	r3, [r1, #12]
    3572:	421a      	tst	r2, r3
    3574:	d0fc      	beq.n	3570 <_usb_on_wakeup+0x48>
    3576:	e7e2      	b.n	353e <_usb_on_wakeup+0x16>
    3578:	40000800 	.word	0x40000800
    357c:	200004e4 	.word	0x200004e4
    3580:	00006245 	.word	0x00006245
    3584:	00006225 	.word	0x00006225
    3588:	000034f5 	.word	0x000034f5
    358c:	00006201 	.word	0x00006201
    3590:	00003231 	.word	0x00003231
    3594:	00005d25 	.word	0x00005d25

00003598 <_usb_on_bus_reset>:
{
    3598:	b530      	push	{r4, r5, lr}
    359a:	b083      	sub	sp, #12
    359c:	0004      	movs	r4, r0
	udc_reset();
    359e:	4b1e      	ldr	r3, [pc, #120]	; (3618 <_usb_on_bus_reset+0x80>)
    35a0:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    35a2:	2380      	movs	r3, #128	; 0x80
    35a4:	6822      	ldr	r2, [r4, #0]
    35a6:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    35a8:	ad01      	add	r5, sp, #4
    35aa:	0028      	movs	r0, r5
    35ac:	4b1b      	ldr	r3, [pc, #108]	; (361c <_usb_on_bus_reset+0x84>)
    35ae:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    35b0:	2303      	movs	r3, #3
    35b2:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    35b4:	0029      	movs	r1, r5
    35b6:	0020      	movs	r0, r4
    35b8:	4b19      	ldr	r3, [pc, #100]	; (3620 <_usb_on_bus_reset+0x88>)
    35ba:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    35bc:	4919      	ldr	r1, [pc, #100]	; (3624 <_usb_on_bus_reset+0x8c>)
    35be:	0020      	movs	r0, r4
    35c0:	4b19      	ldr	r3, [pc, #100]	; (3628 <_usb_on_bus_reset+0x90>)
    35c2:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    35c4:	4b19      	ldr	r3, [pc, #100]	; (362c <_usb_on_bus_reset+0x94>)
    35c6:	2202      	movs	r2, #2
    35c8:	2100      	movs	r1, #0
    35ca:	0020      	movs	r0, r4
    35cc:	4d18      	ldr	r5, [pc, #96]	; (3630 <_usb_on_bus_reset+0x98>)
    35ce:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    35d0:	4b18      	ldr	r3, [pc, #96]	; (3634 <_usb_on_bus_reset+0x9c>)
    35d2:	2200      	movs	r2, #0
    35d4:	2100      	movs	r1, #0
    35d6:	0020      	movs	r0, r4
    35d8:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    35da:	4b17      	ldr	r3, [pc, #92]	; (3638 <_usb_on_bus_reset+0xa0>)
    35dc:	2201      	movs	r2, #1
    35de:	2100      	movs	r1, #0
    35e0:	0020      	movs	r0, r4
    35e2:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    35e4:	2202      	movs	r2, #2
    35e6:	2100      	movs	r1, #0
    35e8:	0020      	movs	r0, r4
    35ea:	4d14      	ldr	r5, [pc, #80]	; (363c <_usb_on_bus_reset+0xa4>)
    35ec:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    35ee:	2200      	movs	r2, #0
    35f0:	2100      	movs	r1, #0
    35f2:	0020      	movs	r0, r4
    35f4:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    35f6:	2201      	movs	r2, #1
    35f8:	2100      	movs	r1, #0
    35fa:	0020      	movs	r0, r4
    35fc:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    35fe:	6821      	ldr	r1, [r4, #0]
    3600:	890b      	ldrh	r3, [r1, #8]
    3602:	4a0f      	ldr	r2, [pc, #60]	; (3640 <_usb_on_bus_reset+0xa8>)
    3604:	401a      	ands	r2, r3
    3606:	2380      	movs	r3, #128	; 0x80
    3608:	00db      	lsls	r3, r3, #3
    360a:	4313      	orrs	r3, r2
    360c:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    360e:	2200      	movs	r2, #0
    3610:	4b0c      	ldr	r3, [pc, #48]	; (3644 <_usb_on_bus_reset+0xac>)
    3612:	701a      	strb	r2, [r3, #0]
}
    3614:	b003      	add	sp, #12
    3616:	bd30      	pop	{r4, r5, pc}
    3618:	00001ef9 	.word	0x00001ef9
    361c:	00006451 	.word	0x00006451
    3620:	00006461 	.word	0x00006461
    3624:	20000664 	.word	0x20000664
    3628:	00006881 	.word	0x00006881
    362c:	00003781 	.word	0x00003781
    3630:	00006261 	.word	0x00006261
    3634:	00003a9d 	.word	0x00003a9d
    3638:	00003685 	.word	0x00003685
    363c:	000062b1 	.word	0x000062b1
    3640:	fffff3ff 	.word	0xfffff3ff
    3644:	20000266 	.word	0x20000266

00003648 <udd_ctrl_send_zlp_in>:
{
    3648:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    364a:	2203      	movs	r2, #3
    364c:	4b07      	ldr	r3, [pc, #28]	; (366c <udd_ctrl_send_zlp_in+0x24>)
    364e:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3650:	4c07      	ldr	r4, [pc, #28]	; (3670 <udd_ctrl_send_zlp_in+0x28>)
    3652:	4908      	ldr	r1, [pc, #32]	; (3674 <udd_ctrl_send_zlp_in+0x2c>)
    3654:	0020      	movs	r0, r4
    3656:	4b08      	ldr	r3, [pc, #32]	; (3678 <udd_ctrl_send_zlp_in+0x30>)
    3658:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    365a:	4b08      	ldr	r3, [pc, #32]	; (367c <udd_ctrl_send_zlp_in+0x34>)
    365c:	689a      	ldr	r2, [r3, #8]
    365e:	2300      	movs	r3, #0
    3660:	2100      	movs	r1, #0
    3662:	0020      	movs	r0, r4
    3664:	4c06      	ldr	r4, [pc, #24]	; (3680 <udd_ctrl_send_zlp_in+0x38>)
    3666:	47a0      	blx	r4
}
    3668:	bd10      	pop	{r4, pc}
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	20000266 	.word	0x20000266
    3670:	200004e4 	.word	0x200004e4
    3674:	20000664 	.word	0x20000664
    3678:	00006881 	.word	0x00006881
    367c:	2000064c 	.word	0x2000064c
    3680:	000067dd 	.word	0x000067dd

00003684 <_usb_ep0_on_tansfer_fail>:
{
    3684:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    3686:	7989      	ldrb	r1, [r1, #6]
    3688:	b24b      	sxtb	r3, r1
    368a:	2b00      	cmp	r3, #0
    368c:	db06      	blt.n	369c <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    368e:	4b0e      	ldr	r3, [pc, #56]	; (36c8 <_usb_ep0_on_tansfer_fail+0x44>)
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	2b02      	cmp	r3, #2
    3694:	d00f      	beq.n	36b6 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3696:	2b03      	cmp	r3, #3
    3698:	d011      	beq.n	36be <_usb_ep0_on_tansfer_fail+0x3a>
}
    369a:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    369c:	4b0a      	ldr	r3, [pc, #40]	; (36c8 <_usb_ep0_on_tansfer_fail+0x44>)
    369e:	781b      	ldrb	r3, [r3, #0]
    36a0:	2b01      	cmp	r3, #1
    36a2:	d005      	beq.n	36b0 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    36a4:	2b04      	cmp	r3, #4
    36a6:	d1f8      	bne.n	369a <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    36a8:	4808      	ldr	r0, [pc, #32]	; (36cc <_usb_ep0_on_tansfer_fail+0x48>)
    36aa:	4b09      	ldr	r3, [pc, #36]	; (36d0 <_usb_ep0_on_tansfer_fail+0x4c>)
    36ac:	4798      	blx	r3
    36ae:	e7f4      	b.n	369a <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    36b0:	4b08      	ldr	r3, [pc, #32]	; (36d4 <_usb_ep0_on_tansfer_fail+0x50>)
    36b2:	4798      	blx	r3
    36b4:	e7f1      	b.n	369a <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    36b6:	2204      	movs	r2, #4
    36b8:	4b03      	ldr	r3, [pc, #12]	; (36c8 <_usb_ep0_on_tansfer_fail+0x44>)
    36ba:	701a      	strb	r2, [r3, #0]
    36bc:	e7ed      	b.n	369a <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    36be:	4803      	ldr	r0, [pc, #12]	; (36cc <_usb_ep0_on_tansfer_fail+0x48>)
    36c0:	4b03      	ldr	r3, [pc, #12]	; (36d0 <_usb_ep0_on_tansfer_fail+0x4c>)
    36c2:	4798      	blx	r3
}
    36c4:	e7e9      	b.n	369a <_usb_ep0_on_tansfer_fail+0x16>
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	20000266 	.word	0x20000266
    36cc:	200004e4 	.word	0x200004e4
    36d0:	00006731 	.word	0x00006731
    36d4:	00003649 	.word	0x00003649

000036d8 <udd_ctrl_in_sent>:
{
    36d8:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    36da:	4b20      	ldr	r3, [pc, #128]	; (375c <udd_ctrl_in_sent+0x84>)
    36dc:	881b      	ldrh	r3, [r3, #0]
    36de:	4a20      	ldr	r2, [pc, #128]	; (3760 <udd_ctrl_in_sent+0x88>)
    36e0:	8994      	ldrh	r4, [r2, #12]
    36e2:	1ae4      	subs	r4, r4, r3
    36e4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    36e6:	2c00      	cmp	r4, #0
    36e8:	d118      	bne.n	371c <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    36ea:	4a1e      	ldr	r2, [pc, #120]	; (3764 <udd_ctrl_in_sent+0x8c>)
    36ec:	8811      	ldrh	r1, [r2, #0]
    36ee:	185b      	adds	r3, r3, r1
    36f0:	b29b      	uxth	r3, r3
    36f2:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    36f4:	4a1a      	ldr	r2, [pc, #104]	; (3760 <udd_ctrl_in_sent+0x88>)
    36f6:	88d2      	ldrh	r2, [r2, #6]
    36f8:	429a      	cmp	r2, r3
    36fa:	d023      	beq.n	3744 <udd_ctrl_in_sent+0x6c>
    36fc:	4b1a      	ldr	r3, [pc, #104]	; (3768 <udd_ctrl_in_sent+0x90>)
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	2b00      	cmp	r3, #0
    3702:	d11f      	bne.n	3744 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3704:	4b16      	ldr	r3, [pc, #88]	; (3760 <udd_ctrl_in_sent+0x88>)
    3706:	695b      	ldr	r3, [r3, #20]
    3708:	2b00      	cmp	r3, #0
    370a:	d023      	beq.n	3754 <udd_ctrl_in_sent+0x7c>
    370c:	4798      	blx	r3
    370e:	2800      	cmp	r0, #0
    3710:	d020      	beq.n	3754 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    3712:	2200      	movs	r2, #0
    3714:	4b11      	ldr	r3, [pc, #68]	; (375c <udd_ctrl_in_sent+0x84>)
    3716:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3718:	4b11      	ldr	r3, [pc, #68]	; (3760 <udd_ctrl_in_sent+0x88>)
    371a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    371c:	2c3f      	cmp	r4, #63	; 0x3f
    371e:	d919      	bls.n	3754 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3720:	2200      	movs	r2, #0
    3722:	4b11      	ldr	r3, [pc, #68]	; (3768 <udd_ctrl_in_sent+0x90>)
    3724:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    3726:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3728:	4d0c      	ldr	r5, [pc, #48]	; (375c <udd_ctrl_in_sent+0x84>)
    372a:	882b      	ldrh	r3, [r5, #0]
    372c:	4a0c      	ldr	r2, [pc, #48]	; (3760 <udd_ctrl_in_sent+0x88>)
    372e:	6892      	ldr	r2, [r2, #8]
    3730:	18d2      	adds	r2, r2, r3
    3732:	0023      	movs	r3, r4
    3734:	2100      	movs	r1, #0
    3736:	480d      	ldr	r0, [pc, #52]	; (376c <udd_ctrl_in_sent+0x94>)
    3738:	4e0d      	ldr	r6, [pc, #52]	; (3770 <udd_ctrl_in_sent+0x98>)
    373a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    373c:	882b      	ldrh	r3, [r5, #0]
    373e:	18e4      	adds	r4, r4, r3
    3740:	802c      	strh	r4, [r5, #0]
}
    3742:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3744:	2204      	movs	r2, #4
    3746:	4b0b      	ldr	r3, [pc, #44]	; (3774 <udd_ctrl_in_sent+0x9c>)
    3748:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    374a:	490b      	ldr	r1, [pc, #44]	; (3778 <udd_ctrl_in_sent+0xa0>)
    374c:	4807      	ldr	r0, [pc, #28]	; (376c <udd_ctrl_in_sent+0x94>)
    374e:	4b0b      	ldr	r3, [pc, #44]	; (377c <udd_ctrl_in_sent+0xa4>)
    3750:	4798      	blx	r3
			return;
    3752:	e7f6      	b.n	3742 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3754:	2201      	movs	r2, #1
    3756:	4b04      	ldr	r3, [pc, #16]	; (3768 <udd_ctrl_in_sent+0x90>)
    3758:	701a      	strb	r2, [r3, #0]
    375a:	e7e5      	b.n	3728 <udd_ctrl_in_sent+0x50>
    375c:	20000262 	.word	0x20000262
    3760:	2000064c 	.word	0x2000064c
    3764:	20000264 	.word	0x20000264
    3768:	20000260 	.word	0x20000260
    376c:	200004e4 	.word	0x200004e4
    3770:	000067dd 	.word	0x000067dd
    3774:	20000266 	.word	0x20000266
    3778:	20000664 	.word	0x20000664
    377c:	00006881 	.word	0x00006881

00003780 <_usb_ep0_on_setup>:
{
    3780:	b510      	push	{r4, lr}
    3782:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3784:	4b2c      	ldr	r3, [pc, #176]	; (3838 <_usb_ep0_on_setup+0xb8>)
    3786:	781b      	ldrb	r3, [r3, #0]
    3788:	2b00      	cmp	r3, #0
    378a:	d007      	beq.n	379c <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    378c:	4b2b      	ldr	r3, [pc, #172]	; (383c <_usb_ep0_on_setup+0xbc>)
    378e:	691b      	ldr	r3, [r3, #16]
    3790:	2b00      	cmp	r3, #0
    3792:	d000      	beq.n	3796 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    3794:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    3796:	2200      	movs	r2, #0
    3798:	4b27      	ldr	r3, [pc, #156]	; (3838 <_usb_ep0_on_setup+0xb8>)
    379a:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    379c:	8823      	ldrh	r3, [r4, #0]
    379e:	2b08      	cmp	r3, #8
    37a0:	d002      	beq.n	37a8 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    37a2:	4b27      	ldr	r3, [pc, #156]	; (3840 <_usb_ep0_on_setup+0xc0>)
    37a4:	4798      	blx	r3
}
    37a6:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    37a8:	4a24      	ldr	r2, [pc, #144]	; (383c <_usb_ep0_on_setup+0xbc>)
    37aa:	4b26      	ldr	r3, [pc, #152]	; (3844 <_usb_ep0_on_setup+0xc4>)
    37ac:	7819      	ldrb	r1, [r3, #0]
    37ae:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    37b0:	7859      	ldrb	r1, [r3, #1]
    37b2:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    37b4:	78d8      	ldrb	r0, [r3, #3]
    37b6:	0200      	lsls	r0, r0, #8
    37b8:	7899      	ldrb	r1, [r3, #2]
    37ba:	1809      	adds	r1, r1, r0
    37bc:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    37be:	7958      	ldrb	r0, [r3, #5]
    37c0:	0200      	lsls	r0, r0, #8
    37c2:	7919      	ldrb	r1, [r3, #4]
    37c4:	1809      	adds	r1, r1, r0
    37c6:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    37c8:	79d9      	ldrb	r1, [r3, #7]
    37ca:	0209      	lsls	r1, r1, #8
    37cc:	799b      	ldrb	r3, [r3, #6]
    37ce:	185b      	adds	r3, r3, r1
    37d0:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    37d2:	4b1d      	ldr	r3, [pc, #116]	; (3848 <_usb_ep0_on_setup+0xc8>)
    37d4:	4798      	blx	r3
    37d6:	2800      	cmp	r0, #0
    37d8:	d016      	beq.n	3808 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    37da:	4b18      	ldr	r3, [pc, #96]	; (383c <_usb_ep0_on_setup+0xbc>)
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	2b7f      	cmp	r3, #127	; 0x7f
    37e0:	d815      	bhi.n	380e <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    37e2:	4b16      	ldr	r3, [pc, #88]	; (383c <_usb_ep0_on_setup+0xbc>)
    37e4:	88db      	ldrh	r3, [r3, #6]
    37e6:	2b00      	cmp	r3, #0
    37e8:	d022      	beq.n	3830 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    37ea:	2300      	movs	r3, #0
    37ec:	4a17      	ldr	r2, [pc, #92]	; (384c <_usb_ep0_on_setup+0xcc>)
    37ee:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    37f0:	4a17      	ldr	r2, [pc, #92]	; (3850 <_usb_ep0_on_setup+0xd0>)
    37f2:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    37f4:	2201      	movs	r2, #1
    37f6:	4b10      	ldr	r3, [pc, #64]	; (3838 <_usb_ep0_on_setup+0xb8>)
    37f8:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    37fa:	2340      	movs	r3, #64	; 0x40
    37fc:	4a11      	ldr	r2, [pc, #68]	; (3844 <_usb_ep0_on_setup+0xc4>)
    37fe:	2100      	movs	r1, #0
    3800:	4814      	ldr	r0, [pc, #80]	; (3854 <_usb_ep0_on_setup+0xd4>)
    3802:	4c15      	ldr	r4, [pc, #84]	; (3858 <_usb_ep0_on_setup+0xd8>)
    3804:	47a0      	blx	r4
    3806:	e7ce      	b.n	37a6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    3808:	4b0d      	ldr	r3, [pc, #52]	; (3840 <_usb_ep0_on_setup+0xc0>)
    380a:	4798      	blx	r3
			return;
    380c:	e7cb      	b.n	37a6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    380e:	2300      	movs	r3, #0
    3810:	4a0e      	ldr	r2, [pc, #56]	; (384c <_usb_ep0_on_setup+0xcc>)
    3812:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3814:	4a0e      	ldr	r2, [pc, #56]	; (3850 <_usb_ep0_on_setup+0xd0>)
    3816:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3818:	2202      	movs	r2, #2
    381a:	4b07      	ldr	r3, [pc, #28]	; (3838 <_usb_ep0_on_setup+0xb8>)
    381c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    381e:	2340      	movs	r3, #64	; 0x40
    3820:	4a08      	ldr	r2, [pc, #32]	; (3844 <_usb_ep0_on_setup+0xc4>)
    3822:	2100      	movs	r1, #0
    3824:	480b      	ldr	r0, [pc, #44]	; (3854 <_usb_ep0_on_setup+0xd4>)
    3826:	4c0c      	ldr	r4, [pc, #48]	; (3858 <_usb_ep0_on_setup+0xd8>)
    3828:	47a0      	blx	r4
			udd_ctrl_in_sent();
    382a:	4b0c      	ldr	r3, [pc, #48]	; (385c <_usb_ep0_on_setup+0xdc>)
    382c:	4798      	blx	r3
    382e:	e7ba      	b.n	37a6 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3830:	4b0b      	ldr	r3, [pc, #44]	; (3860 <_usb_ep0_on_setup+0xe0>)
    3832:	4798      	blx	r3
				return;
    3834:	e7b7      	b.n	37a6 <_usb_ep0_on_setup+0x26>
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	20000266 	.word	0x20000266
    383c:	2000064c 	.word	0x2000064c
    3840:	000034c9 	.word	0x000034c9
    3844:	20000664 	.word	0x20000664
    3848:	00001f89 	.word	0x00001f89
    384c:	20000264 	.word	0x20000264
    3850:	20000262 	.word	0x20000262
    3854:	200004e4 	.word	0x200004e4
    3858:	00006831 	.word	0x00006831
    385c:	000036d9 	.word	0x000036d9
    3860:	00003649 	.word	0x00003649

00003864 <_usb_on_sof_notify>:
{
    3864:	b510      	push	{r4, lr}
	udc_sof_notify();
    3866:	4b02      	ldr	r3, [pc, #8]	; (3870 <_usb_on_sof_notify+0xc>)
    3868:	4798      	blx	r3
	UDC_SOF_EVENT();
    386a:	4b02      	ldr	r3, [pc, #8]	; (3874 <_usb_on_sof_notify+0x10>)
    386c:	4798      	blx	r3
}
    386e:	bd10      	pop	{r4, pc}
    3870:	00001f45 	.word	0x00001f45
    3874:	00005d31 	.word	0x00005d31

00003878 <_usb_on_suspend>:
{
    3878:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    387a:	4c07      	ldr	r4, [pc, #28]	; (3898 <_usb_on_suspend+0x20>)
    387c:	2104      	movs	r1, #4
    387e:	0020      	movs	r0, r4
    3880:	4b06      	ldr	r3, [pc, #24]	; (389c <_usb_on_suspend+0x24>)
    3882:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3884:	2102      	movs	r1, #2
    3886:	0020      	movs	r0, r4
    3888:	4b05      	ldr	r3, [pc, #20]	; (38a0 <_usb_on_suspend+0x28>)
    388a:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    388c:	2001      	movs	r0, #1
    388e:	4b05      	ldr	r3, [pc, #20]	; (38a4 <_usb_on_suspend+0x2c>)
    3890:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    3892:	4b05      	ldr	r3, [pc, #20]	; (38a8 <_usb_on_suspend+0x30>)
    3894:	4798      	blx	r3
}
    3896:	bd10      	pop	{r4, pc}
    3898:	200004e4 	.word	0x200004e4
    389c:	00006245 	.word	0x00006245
    38a0:	00006225 	.word	0x00006225
    38a4:	00003231 	.word	0x00003231
    38a8:	00005d19 	.word	0x00005d19

000038ac <udd_ep_abort>:
{
    38ac:	b510      	push	{r4, lr}
    38ae:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    38b0:	0001      	movs	r1, r0
    38b2:	480a      	ldr	r0, [pc, #40]	; (38dc <udd_ep_abort+0x30>)
    38b4:	4b0a      	ldr	r3, [pc, #40]	; (38e0 <udd_ep_abort+0x34>)
    38b6:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    38b8:	0020      	movs	r0, r4
    38ba:	4b0a      	ldr	r3, [pc, #40]	; (38e4 <udd_ep_abort+0x38>)
    38bc:	4798      	blx	r3
	if (!ptr_job->busy) {
    38be:	7c83      	ldrb	r3, [r0, #18]
    38c0:	07db      	lsls	r3, r3, #31
    38c2:	d50a      	bpl.n	38da <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    38c4:	7c83      	ldrb	r3, [r0, #18]
    38c6:	2201      	movs	r2, #1
    38c8:	4393      	bics	r3, r2
    38ca:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    38cc:	6803      	ldr	r3, [r0, #0]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d003      	beq.n	38da <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    38d2:	68c1      	ldr	r1, [r0, #12]
    38d4:	0022      	movs	r2, r4
    38d6:	2001      	movs	r0, #1
    38d8:	4798      	blx	r3
}
    38da:	bd10      	pop	{r4, pc}
    38dc:	200004e4 	.word	0x200004e4
    38e0:	000066d1 	.word	0x000066d1
    38e4:	000032f1 	.word	0x000032f1

000038e8 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    38e8:	4b02      	ldr	r3, [pc, #8]	; (38f4 <udd_get_frame_number+0xc>)
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	8a18      	ldrh	r0, [r3, #16]
    38ee:	0480      	lsls	r0, r0, #18
    38f0:	0d40      	lsrs	r0, r0, #21
}
    38f2:	4770      	bx	lr
    38f4:	200004e4 	.word	0x200004e4

000038f8 <udd_ep_free>:
{
    38f8:	b570      	push	{r4, r5, r6, lr}
    38fa:	b082      	sub	sp, #8
    38fc:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    38fe:	ad01      	add	r5, sp, #4
    3900:	0028      	movs	r0, r5
    3902:	4b0d      	ldr	r3, [pc, #52]	; (3938 <udd_ep_free+0x40>)
    3904:	4798      	blx	r3
	udd_ep_abort(ep);
    3906:	0020      	movs	r0, r4
    3908:	4b0c      	ldr	r3, [pc, #48]	; (393c <udd_ep_free+0x44>)
    390a:	4798      	blx	r3
	config_ep.ep_address = ep;
    390c:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    390e:	2300      	movs	r3, #0
    3910:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3912:	4e0b      	ldr	r6, [pc, #44]	; (3940 <udd_ep_free+0x48>)
    3914:	0029      	movs	r1, r5
    3916:	0030      	movs	r0, r6
    3918:	4b0a      	ldr	r3, [pc, #40]	; (3944 <udd_ep_free+0x4c>)
    391a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    391c:	210f      	movs	r1, #15
    391e:	4021      	ands	r1, r4
    3920:	2200      	movs	r2, #0
    3922:	0030      	movs	r0, r6
    3924:	4b08      	ldr	r3, [pc, #32]	; (3948 <udd_ep_free+0x50>)
    3926:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3928:	2200      	movs	r2, #0
    392a:	0021      	movs	r1, r4
    392c:	0030      	movs	r0, r6
    392e:	4b07      	ldr	r3, [pc, #28]	; (394c <udd_ep_free+0x54>)
    3930:	4798      	blx	r3
}
    3932:	b002      	add	sp, #8
    3934:	bd70      	pop	{r4, r5, r6, pc}
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	00006451 	.word	0x00006451
    393c:	000038ad 	.word	0x000038ad
    3940:	200004e4 	.word	0x200004e4
    3944:	00006461 	.word	0x00006461
    3948:	00006289 	.word	0x00006289
    394c:	00006381 	.word	0x00006381

00003950 <udd_ep_alloc>:
{
    3950:	b5f0      	push	{r4, r5, r6, r7, lr}
    3952:	b083      	sub	sp, #12
    3954:	0005      	movs	r5, r0
    3956:	000f      	movs	r7, r1
    3958:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    395a:	ae01      	add	r6, sp, #4
    395c:	0030      	movs	r0, r6
    395e:	4b36      	ldr	r3, [pc, #216]	; (3a38 <udd_ep_alloc+0xe8>)
    3960:	4798      	blx	r3
	config_ep.ep_address = ep;
    3962:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    3964:	2c08      	cmp	r4, #8
    3966:	d813      	bhi.n	3990 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3968:	2200      	movs	r2, #0
    396a:	ab01      	add	r3, sp, #4
    396c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    396e:	0028      	movs	r0, r5
    3970:	4b32      	ldr	r3, [pc, #200]	; (3a3c <udd_ep_alloc+0xec>)
    3972:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3974:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    3976:	2103      	movs	r1, #3
    3978:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    397a:	2901      	cmp	r1, #1
    397c:	d038      	beq.n	39f0 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    397e:	2902      	cmp	r1, #2
    3980:	d043      	beq.n	3a0a <udd_ep_alloc+0xba>
		return false;
    3982:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3984:	2903      	cmp	r1, #3
    3986:	d13d      	bne.n	3a04 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3988:	2204      	movs	r2, #4
    398a:	ab01      	add	r3, sp, #4
    398c:	70da      	strb	r2, [r3, #3]
    398e:	e032      	b.n	39f6 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    3990:	2c10      	cmp	r4, #16
    3992:	d803      	bhi.n	399c <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    3994:	2201      	movs	r2, #1
    3996:	ab01      	add	r3, sp, #4
    3998:	705a      	strb	r2, [r3, #1]
    399a:	e7e8      	b.n	396e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    399c:	2c20      	cmp	r4, #32
    399e:	d803      	bhi.n	39a8 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    39a0:	2202      	movs	r2, #2
    39a2:	ab01      	add	r3, sp, #4
    39a4:	705a      	strb	r2, [r3, #1]
    39a6:	e7e2      	b.n	396e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    39a8:	2c40      	cmp	r4, #64	; 0x40
    39aa:	d803      	bhi.n	39b4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    39ac:	2203      	movs	r2, #3
    39ae:	ab01      	add	r3, sp, #4
    39b0:	705a      	strb	r2, [r3, #1]
    39b2:	e7dc      	b.n	396e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    39b4:	2c80      	cmp	r4, #128	; 0x80
    39b6:	d803      	bhi.n	39c0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    39b8:	2204      	movs	r2, #4
    39ba:	ab01      	add	r3, sp, #4
    39bc:	705a      	strb	r2, [r3, #1]
    39be:	e7d6      	b.n	396e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    39c0:	2380      	movs	r3, #128	; 0x80
    39c2:	005b      	lsls	r3, r3, #1
    39c4:	429c      	cmp	r4, r3
    39c6:	d803      	bhi.n	39d0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    39c8:	2205      	movs	r2, #5
    39ca:	ab01      	add	r3, sp, #4
    39cc:	705a      	strb	r2, [r3, #1]
    39ce:	e7ce      	b.n	396e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    39d0:	2380      	movs	r3, #128	; 0x80
    39d2:	009b      	lsls	r3, r3, #2
    39d4:	429c      	cmp	r4, r3
    39d6:	d803      	bhi.n	39e0 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    39d8:	2206      	movs	r2, #6
    39da:	ab01      	add	r3, sp, #4
    39dc:	705a      	strb	r2, [r3, #1]
    39de:	e7c6      	b.n	396e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    39e0:	4a17      	ldr	r2, [pc, #92]	; (3a40 <udd_ep_alloc+0xf0>)
		return false;
    39e2:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    39e4:	4294      	cmp	r4, r2
    39e6:	d80d      	bhi.n	3a04 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    39e8:	2207      	movs	r2, #7
    39ea:	ab01      	add	r3, sp, #4
    39ec:	705a      	strb	r2, [r3, #1]
    39ee:	e7be      	b.n	396e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    39f0:	2202      	movs	r2, #2
    39f2:	ab01      	add	r3, sp, #4
    39f4:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    39f6:	a901      	add	r1, sp, #4
    39f8:	4812      	ldr	r0, [pc, #72]	; (3a44 <udd_ep_alloc+0xf4>)
    39fa:	4b13      	ldr	r3, [pc, #76]	; (3a48 <udd_ep_alloc+0xf8>)
    39fc:	4798      	blx	r3
		return false;
    39fe:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3a00:	2800      	cmp	r0, #0
    3a02:	d006      	beq.n	3a12 <udd_ep_alloc+0xc2>
}
    3a04:	0018      	movs	r0, r3
    3a06:	b003      	add	sp, #12
    3a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3a0a:	2203      	movs	r2, #3
    3a0c:	ab01      	add	r3, sp, #4
    3a0e:	70da      	strb	r2, [r3, #3]
    3a10:	e7f1      	b.n	39f6 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3a12:	210f      	movs	r1, #15
    3a14:	4029      	ands	r1, r5
    3a16:	4c0b      	ldr	r4, [pc, #44]	; (3a44 <udd_ep_alloc+0xf4>)
    3a18:	4b0c      	ldr	r3, [pc, #48]	; (3a4c <udd_ep_alloc+0xfc>)
    3a1a:	2200      	movs	r2, #0
    3a1c:	0020      	movs	r0, r4
    3a1e:	4e0c      	ldr	r6, [pc, #48]	; (3a50 <udd_ep_alloc+0x100>)
    3a20:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3a22:	2200      	movs	r2, #0
    3a24:	0029      	movs	r1, r5
    3a26:	0020      	movs	r0, r4
    3a28:	4e0a      	ldr	r6, [pc, #40]	; (3a54 <udd_ep_alloc+0x104>)
    3a2a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3a2c:	2201      	movs	r2, #1
    3a2e:	0029      	movs	r1, r5
    3a30:	0020      	movs	r0, r4
    3a32:	47b0      	blx	r6
	return true;
    3a34:	2301      	movs	r3, #1
    3a36:	e7e5      	b.n	3a04 <udd_ep_alloc+0xb4>
    3a38:	00006451 	.word	0x00006451
    3a3c:	000032f1 	.word	0x000032f1
    3a40:	000003ff 	.word	0x000003ff
    3a44:	200004e4 	.word	0x200004e4
    3a48:	00006461 	.word	0x00006461
    3a4c:	00003315 	.word	0x00003315
    3a50:	00006261 	.word	0x00006261
    3a54:	000062b1 	.word	0x000062b1

00003a58 <udd_ep_is_halted>:
{
    3a58:	b510      	push	{r4, lr}
    3a5a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3a5c:	4801      	ldr	r0, [pc, #4]	; (3a64 <udd_ep_is_halted+0xc>)
    3a5e:	4b02      	ldr	r3, [pc, #8]	; (3a68 <udd_ep_is_halted+0x10>)
    3a60:	4798      	blx	r3
}
    3a62:	bd10      	pop	{r4, pc}
    3a64:	200004e4 	.word	0x200004e4
    3a68:	00006707 	.word	0x00006707

00003a6c <udd_ep_set_halt>:
{
    3a6c:	b510      	push	{r4, lr}
    3a6e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3a70:	230f      	movs	r3, #15
    3a72:	4003      	ands	r3, r0
		return false;
    3a74:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3a76:	2b02      	cmp	r3, #2
    3a78:	d900      	bls.n	3a7c <udd_ep_set_halt+0x10>
}
    3a7a:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    3a7c:	0021      	movs	r1, r4
    3a7e:	4804      	ldr	r0, [pc, #16]	; (3a90 <udd_ep_set_halt+0x24>)
    3a80:	4b04      	ldr	r3, [pc, #16]	; (3a94 <udd_ep_set_halt+0x28>)
    3a82:	4798      	blx	r3
	udd_ep_abort(ep);
    3a84:	0020      	movs	r0, r4
    3a86:	4b04      	ldr	r3, [pc, #16]	; (3a98 <udd_ep_set_halt+0x2c>)
    3a88:	4798      	blx	r3
	return true;
    3a8a:	2001      	movs	r0, #1
    3a8c:	e7f5      	b.n	3a7a <udd_ep_set_halt+0xe>
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	200004e4 	.word	0x200004e4
    3a94:	00006731 	.word	0x00006731
    3a98:	000038ad 	.word	0x000038ad

00003a9c <_usb_ep0_on_tansfer_ok>:
{
    3a9c:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    3a9e:	4b34      	ldr	r3, [pc, #208]	; (3b70 <_usb_ep0_on_tansfer_ok+0xd4>)
    3aa0:	781b      	ldrb	r3, [r3, #0]
    3aa2:	2b01      	cmp	r3, #1
    3aa4:	d00a      	beq.n	3abc <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    3aa6:	2b02      	cmp	r3, #2
    3aa8:	d05f      	beq.n	3b6a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    3aaa:	4b32      	ldr	r3, [pc, #200]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3aac:	691b      	ldr	r3, [r3, #16]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d000      	beq.n	3ab4 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    3ab2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3ab4:	2200      	movs	r2, #0
    3ab6:	4b2e      	ldr	r3, [pc, #184]	; (3b70 <_usb_ep0_on_tansfer_ok+0xd4>)
    3ab8:	701a      	strb	r2, [r3, #0]
}
    3aba:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3abc:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3abe:	4b2d      	ldr	r3, [pc, #180]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3ac0:	899b      	ldrh	r3, [r3, #12]
    3ac2:	4a2d      	ldr	r2, [pc, #180]	; (3b78 <_usb_ep0_on_tansfer_ok+0xdc>)
    3ac4:	8814      	ldrh	r4, [r2, #0]
    3ac6:	1962      	adds	r2, r4, r5
    3ac8:	4293      	cmp	r3, r2
    3aca:	da01      	bge.n	3ad0 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3acc:	1b1d      	subs	r5, r3, r4
    3ace:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3ad0:	4b28      	ldr	r3, [pc, #160]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3ad2:	6898      	ldr	r0, [r3, #8]
    3ad4:	1900      	adds	r0, r0, r4
    3ad6:	002a      	movs	r2, r5
    3ad8:	4928      	ldr	r1, [pc, #160]	; (3b7c <_usb_ep0_on_tansfer_ok+0xe0>)
    3ada:	4b29      	ldr	r3, [pc, #164]	; (3b80 <_usb_ep0_on_tansfer_ok+0xe4>)
    3adc:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3ade:	1964      	adds	r4, r4, r5
    3ae0:	b2a4      	uxth	r4, r4
    3ae2:	4b25      	ldr	r3, [pc, #148]	; (3b78 <_usb_ep0_on_tansfer_ok+0xdc>)
    3ae4:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3ae6:	2d40      	cmp	r5, #64	; 0x40
    3ae8:	d00a      	beq.n	3b00 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3aea:	4b22      	ldr	r3, [pc, #136]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3aec:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3aee:	695b      	ldr	r3, [r3, #20]
    3af0:	2b00      	cmp	r3, #0
    3af2:	d002      	beq.n	3afa <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3af4:	4798      	blx	r3
    3af6:	2800      	cmp	r0, #0
    3af8:	d014      	beq.n	3b24 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    3afa:	4b22      	ldr	r3, [pc, #136]	; (3b84 <_usb_ep0_on_tansfer_ok+0xe8>)
    3afc:	4798      	blx	r3
    3afe:	e7dc      	b.n	3aba <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3b00:	4b1c      	ldr	r3, [pc, #112]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3b02:	88da      	ldrh	r2, [r3, #6]
    3b04:	4b20      	ldr	r3, [pc, #128]	; (3b88 <_usb_ep0_on_tansfer_ok+0xec>)
    3b06:	881b      	ldrh	r3, [r3, #0]
    3b08:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3b0a:	429a      	cmp	r2, r3
    3b0c:	dded      	ble.n	3aea <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3b0e:	4b19      	ldr	r3, [pc, #100]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3b10:	899b      	ldrh	r3, [r3, #12]
    3b12:	42a3      	cmp	r3, r4
    3b14:	d00c      	beq.n	3b30 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3b16:	2340      	movs	r3, #64	; 0x40
    3b18:	4a18      	ldr	r2, [pc, #96]	; (3b7c <_usb_ep0_on_tansfer_ok+0xe0>)
    3b1a:	2100      	movs	r1, #0
    3b1c:	481b      	ldr	r0, [pc, #108]	; (3b8c <_usb_ep0_on_tansfer_ok+0xf0>)
    3b1e:	4c1c      	ldr	r4, [pc, #112]	; (3b90 <_usb_ep0_on_tansfer_ok+0xf4>)
    3b20:	47a0      	blx	r4
    3b22:	e7ca      	b.n	3aba <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3b24:	2205      	movs	r2, #5
    3b26:	4b12      	ldr	r3, [pc, #72]	; (3b70 <_usb_ep0_on_tansfer_ok+0xd4>)
    3b28:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    3b2a:	4b1a      	ldr	r3, [pc, #104]	; (3b94 <_usb_ep0_on_tansfer_ok+0xf8>)
    3b2c:	4798      	blx	r3
    3b2e:	e7c4      	b.n	3aba <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3b30:	4b10      	ldr	r3, [pc, #64]	; (3b74 <_usb_ep0_on_tansfer_ok+0xd8>)
    3b32:	695b      	ldr	r3, [r3, #20]
    3b34:	2b00      	cmp	r3, #0
    3b36:	d00b      	beq.n	3b50 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3b38:	4798      	blx	r3
    3b3a:	2800      	cmp	r0, #0
    3b3c:	d00f      	beq.n	3b5e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3b3e:	4912      	ldr	r1, [pc, #72]	; (3b88 <_usb_ep0_on_tansfer_ok+0xec>)
    3b40:	4a0d      	ldr	r2, [pc, #52]	; (3b78 <_usb_ep0_on_tansfer_ok+0xdc>)
    3b42:	880b      	ldrh	r3, [r1, #0]
    3b44:	8810      	ldrh	r0, [r2, #0]
    3b46:	181b      	adds	r3, r3, r0
    3b48:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    3b4a:	2300      	movs	r3, #0
    3b4c:	8013      	strh	r3, [r2, #0]
    3b4e:	e7e2      	b.n	3b16 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3b50:	2205      	movs	r2, #5
    3b52:	4b07      	ldr	r3, [pc, #28]	; (3b70 <_usb_ep0_on_tansfer_ok+0xd4>)
    3b54:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3b56:	2000      	movs	r0, #0
    3b58:	4b0e      	ldr	r3, [pc, #56]	; (3b94 <_usb_ep0_on_tansfer_ok+0xf8>)
    3b5a:	4798      	blx	r3
    3b5c:	e7ad      	b.n	3aba <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3b5e:	2205      	movs	r2, #5
    3b60:	4b03      	ldr	r3, [pc, #12]	; (3b70 <_usb_ep0_on_tansfer_ok+0xd4>)
    3b62:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3b64:	4b0b      	ldr	r3, [pc, #44]	; (3b94 <_usb_ep0_on_tansfer_ok+0xf8>)
    3b66:	4798      	blx	r3
    3b68:	e7a7      	b.n	3aba <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    3b6a:	4b0b      	ldr	r3, [pc, #44]	; (3b98 <_usb_ep0_on_tansfer_ok+0xfc>)
    3b6c:	4798      	blx	r3
    3b6e:	e7a4      	b.n	3aba <_usb_ep0_on_tansfer_ok+0x1e>
    3b70:	20000266 	.word	0x20000266
    3b74:	2000064c 	.word	0x2000064c
    3b78:	20000262 	.word	0x20000262
    3b7c:	20000664 	.word	0x20000664
    3b80:	00009331 	.word	0x00009331
    3b84:	00003649 	.word	0x00003649
    3b88:	20000264 	.word	0x20000264
    3b8c:	200004e4 	.word	0x200004e4
    3b90:	00006831 	.word	0x00006831
    3b94:	00003a6d 	.word	0x00003a6d
    3b98:	000036d9 	.word	0x000036d9

00003b9c <udd_ep_clear_halt>:
{
    3b9c:	b570      	push	{r4, r5, r6, lr}
    3b9e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ba0:	230f      	movs	r3, #15
    3ba2:	4003      	ands	r3, r0
		return false;
    3ba4:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ba6:	2b02      	cmp	r3, #2
    3ba8:	d900      	bls.n	3bac <udd_ep_clear_halt+0x10>
}
    3baa:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3bac:	0020      	movs	r0, r4
    3bae:	4b09      	ldr	r3, [pc, #36]	; (3bd4 <udd_ep_clear_halt+0x38>)
    3bb0:	4798      	blx	r3
    3bb2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3bb4:	0021      	movs	r1, r4
    3bb6:	4808      	ldr	r0, [pc, #32]	; (3bd8 <udd_ep_clear_halt+0x3c>)
    3bb8:	4b08      	ldr	r3, [pc, #32]	; (3bdc <udd_ep_clear_halt+0x40>)
    3bba:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3bbc:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3bbe:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3bc0:	07db      	lsls	r3, r3, #31
    3bc2:	d5f2      	bpl.n	3baa <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3bc4:	7cab      	ldrb	r3, [r5, #18]
    3bc6:	2201      	movs	r2, #1
    3bc8:	4393      	bics	r3, r2
    3bca:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3bcc:	682b      	ldr	r3, [r5, #0]
    3bce:	4798      	blx	r3
	return true;
    3bd0:	2001      	movs	r0, #1
    3bd2:	e7ea      	b.n	3baa <udd_ep_clear_halt+0xe>
    3bd4:	000032f1 	.word	0x000032f1
    3bd8:	200004e4 	.word	0x200004e4
    3bdc:	00006757 	.word	0x00006757

00003be0 <udd_ep_wait_stall_clear>:
{
    3be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3be2:	0004      	movs	r4, r0
    3be4:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    3be6:	230f      	movs	r3, #15
    3be8:	4003      	ands	r3, r0
		return false;
    3bea:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3bec:	2b02      	cmp	r3, #2
    3bee:	d805      	bhi.n	3bfc <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3bf0:	4b0d      	ldr	r3, [pc, #52]	; (3c28 <udd_ep_wait_stall_clear+0x48>)
    3bf2:	4798      	blx	r3
    3bf4:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    3bf6:	7c83      	ldrb	r3, [r0, #18]
    3bf8:	07db      	lsls	r3, r3, #31
    3bfa:	d501      	bpl.n	3c00 <udd_ep_wait_stall_clear+0x20>
}
    3bfc:	0030      	movs	r0, r6
    3bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3c00:	0021      	movs	r1, r4
    3c02:	480a      	ldr	r0, [pc, #40]	; (3c2c <udd_ep_wait_stall_clear+0x4c>)
    3c04:	4b0a      	ldr	r3, [pc, #40]	; (3c30 <udd_ep_wait_stall_clear+0x50>)
    3c06:	4798      	blx	r3
    3c08:	1e06      	subs	r6, r0, #0
    3c0a:	d005      	beq.n	3c18 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3c0c:	7cbb      	ldrb	r3, [r7, #18]
    3c0e:	2201      	movs	r2, #1
    3c10:	4313      	orrs	r3, r2
    3c12:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3c14:	603d      	str	r5, [r7, #0]
		return true;
    3c16:	e7f1      	b.n	3bfc <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3c18:	0021      	movs	r1, r4
    3c1a:	4804      	ldr	r0, [pc, #16]	; (3c2c <udd_ep_wait_stall_clear+0x4c>)
    3c1c:	4b05      	ldr	r3, [pc, #20]	; (3c34 <udd_ep_wait_stall_clear+0x54>)
    3c1e:	4798      	blx	r3
    3c20:	1e06      	subs	r6, r0, #0
    3c22:	d0eb      	beq.n	3bfc <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3c24:	47a8      	blx	r5
		return true;
    3c26:	e7e9      	b.n	3bfc <udd_ep_wait_stall_clear+0x1c>
    3c28:	000032f1 	.word	0x000032f1
    3c2c:	200004e4 	.word	0x200004e4
    3c30:	00006707 	.word	0x00006707
    3c34:	000066a5 	.word	0x000066a5

00003c38 <udd_ep_run>:
{
    3c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c3a:	b087      	sub	sp, #28
    3c3c:	0005      	movs	r5, r0
    3c3e:	9103      	str	r1, [sp, #12]
    3c40:	9202      	str	r2, [sp, #8]
    3c42:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3c44:	260f      	movs	r6, #15
    3c46:	4006      	ands	r6, r0
		return false;
    3c48:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3c4a:	2e02      	cmp	r6, #2
    3c4c:	d902      	bls.n	3c54 <udd_ep_run+0x1c>
}
    3c4e:	0020      	movs	r0, r4
    3c50:	b007      	add	sp, #28
    3c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3c54:	4b64      	ldr	r3, [pc, #400]	; (3de8 <udd_ep_run+0x1b0>)
    3c56:	4798      	blx	r3
    3c58:	1e04      	subs	r4, r0, #0
    3c5a:	d000      	beq.n	3c5e <udd_ep_run+0x26>
    3c5c:	e0bd      	b.n	3dda <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3c5e:	0028      	movs	r0, r5
    3c60:	4b62      	ldr	r3, [pc, #392]	; (3dec <udd_ep_run+0x1b4>)
    3c62:	4798      	blx	r3
    3c64:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c66:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c6a:	425a      	negs	r2, r3
    3c6c:	4153      	adcs	r3, r2
    3c6e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3c70:	b672      	cpsid	i
    3c72:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c76:	2200      	movs	r2, #0
    3c78:	4b5d      	ldr	r3, [pc, #372]	; (3df0 <udd_ep_run+0x1b8>)
    3c7a:	701a      	strb	r2, [r3, #0]
	return flags;
    3c7c:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3c7e:	7c83      	ldrb	r3, [r0, #18]
    3c80:	07db      	lsls	r3, r3, #31
    3c82:	d508      	bpl.n	3c96 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3c84:	2a00      	cmp	r2, #0
    3c86:	d0e2      	beq.n	3c4e <udd_ep_run+0x16>
		cpu_irq_enable();
    3c88:	2201      	movs	r2, #1
    3c8a:	4b59      	ldr	r3, [pc, #356]	; (3df0 <udd_ep_run+0x1b8>)
    3c8c:	701a      	strb	r2, [r3, #0]
    3c8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3c92:	b662      	cpsie	i
    3c94:	e7db      	b.n	3c4e <udd_ep_run+0x16>
	ptr_job->busy = true;
    3c96:	7c83      	ldrb	r3, [r0, #18]
    3c98:	2101      	movs	r1, #1
    3c9a:	430b      	orrs	r3, r1
    3c9c:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3c9e:	2a00      	cmp	r2, #0
    3ca0:	d005      	beq.n	3cae <udd_ep_run+0x76>
		cpu_irq_enable();
    3ca2:	2201      	movs	r2, #1
    3ca4:	4b52      	ldr	r3, [pc, #328]	; (3df0 <udd_ep_run+0x1b8>)
    3ca6:	701a      	strb	r2, [r3, #0]
    3ca8:	f3bf 8f5f 	dmb	sy
    3cac:	b662      	cpsie	i
	ptr_job->buf = buf;
    3cae:	9b02      	ldr	r3, [sp, #8]
    3cb0:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3cb2:	9b01      	ldr	r3, [sp, #4]
    3cb4:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3cb6:	2300      	movs	r3, #0
    3cb8:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cbc:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3cbe:	2301      	movs	r3, #1
    3cc0:	9a03      	ldr	r2, [sp, #12]
    3cc2:	4013      	ands	r3, r2
    3cc4:	005a      	lsls	r2, r3, #1
    3cc6:	7cbb      	ldrb	r3, [r7, #18]
    3cc8:	2102      	movs	r1, #2
    3cca:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3ccc:	4313      	orrs	r3, r2
    3cce:	2204      	movs	r2, #4
    3cd0:	4393      	bics	r3, r2
    3cd2:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3cd4:	b26b      	sxtb	r3, r5
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	db20      	blt.n	3d1c <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3cda:	9b01      	ldr	r3, [sp, #4]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d06f      	beq.n	3dc0 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3ce0:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3ce2:	4b44      	ldr	r3, [pc, #272]	; (3df4 <udd_ep_run+0x1bc>)
    3ce4:	429c      	cmp	r4, r3
    3ce6:	d95a      	bls.n	3d9e <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3ce8:	8a39      	ldrh	r1, [r7, #16]
    3cea:	001c      	movs	r4, r3
    3cec:	0018      	movs	r0, r3
    3cee:	4b42      	ldr	r3, [pc, #264]	; (3df8 <udd_ep_run+0x1c0>)
    3cf0:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3cf2:	1a63      	subs	r3, r4, r1
    3cf4:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3cf6:	8a3b      	ldrh	r3, [r7, #16]
    3cf8:	429a      	cmp	r2, r3
    3cfa:	d257      	bcs.n	3dac <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3cfc:	7cba      	ldrb	r2, [r7, #18]
    3cfe:	2104      	movs	r1, #4
    3d00:	430a      	orrs	r2, r1
    3d02:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3d04:	1e72      	subs	r2, r6, #1
    3d06:	0192      	lsls	r2, r2, #6
    3d08:	493c      	ldr	r1, [pc, #240]	; (3dfc <udd_ep_run+0x1c4>)
    3d0a:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3d0c:	0031      	movs	r1, r6
    3d0e:	483c      	ldr	r0, [pc, #240]	; (3e00 <udd_ep_run+0x1c8>)
    3d10:	4c3c      	ldr	r4, [pc, #240]	; (3e04 <udd_ep_run+0x1cc>)
    3d12:	47a0      	blx	r4
				return (STATUS_OK ==
    3d14:	4244      	negs	r4, r0
    3d16:	4144      	adcs	r4, r0
    3d18:	b2e4      	uxtb	r4, r4
    3d1a:	e798      	b.n	3c4e <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3d1c:	9b01      	ldr	r3, [sp, #4]
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d027      	beq.n	3d72 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3d22:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3d24:	4b33      	ldr	r3, [pc, #204]	; (3df4 <udd_ep_run+0x1bc>)
    3d26:	429d      	cmp	r5, r3
    3d28:	d906      	bls.n	3d38 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3d2a:	8a39      	ldrh	r1, [r7, #16]
    3d2c:	001d      	movs	r5, r3
    3d2e:	0018      	movs	r0, r3
    3d30:	4b31      	ldr	r3, [pc, #196]	; (3df8 <udd_ep_run+0x1c0>)
    3d32:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3d34:	1a6b      	subs	r3, r5, r1
    3d36:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3d38:	7cbb      	ldrb	r3, [r7, #18]
    3d3a:	079b      	lsls	r3, r3, #30
    3d3c:	d507      	bpl.n	3d4e <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3d3e:	8a39      	ldrh	r1, [r7, #16]
    3d40:	0028      	movs	r0, r5
    3d42:	4b31      	ldr	r3, [pc, #196]	; (3e08 <udd_ep_run+0x1d0>)
    3d44:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3d46:	b289      	uxth	r1, r1
    3d48:	424c      	negs	r4, r1
    3d4a:	414c      	adcs	r4, r1
    3d4c:	b2e4      	uxtb	r4, r4
    3d4e:	2001      	movs	r0, #1
    3d50:	4020      	ands	r0, r4
    3d52:	0040      	lsls	r0, r0, #1
    3d54:	7cbc      	ldrb	r4, [r7, #18]
    3d56:	2302      	movs	r3, #2
    3d58:	439c      	bics	r4, r3
    3d5a:	4304      	orrs	r4, r0
    3d5c:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3d5e:	002b      	movs	r3, r5
    3d60:	9a02      	ldr	r2, [sp, #8]
    3d62:	0031      	movs	r1, r6
    3d64:	4826      	ldr	r0, [pc, #152]	; (3e00 <udd_ep_run+0x1c8>)
    3d66:	4c29      	ldr	r4, [pc, #164]	; (3e0c <udd_ep_run+0x1d4>)
    3d68:	47a0      	blx	r4
		return (STATUS_OK ==
    3d6a:	4244      	negs	r4, r0
    3d6c:	4144      	adcs	r4, r0
    3d6e:	b2e4      	uxtb	r4, r4
    3d70:	e76d      	b.n	3c4e <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3d72:	7cbb      	ldrb	r3, [r7, #18]
    3d74:	079b      	lsls	r3, r3, #30
    3d76:	d505      	bpl.n	3d84 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3d78:	7cbb      	ldrb	r3, [r7, #18]
    3d7a:	2202      	movs	r2, #2
    3d7c:	4393      	bics	r3, r2
    3d7e:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3d80:	2500      	movs	r5, #0
    3d82:	e7ec      	b.n	3d5e <udd_ep_run+0x126>
			ptr_job->busy = false;
    3d84:	7cbb      	ldrb	r3, [r7, #18]
    3d86:	2201      	movs	r2, #1
    3d88:	4393      	bics	r3, r2
    3d8a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d025      	beq.n	3dde <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3d92:	002a      	movs	r2, r5
    3d94:	2100      	movs	r1, #0
    3d96:	2000      	movs	r0, #0
    3d98:	4798      	blx	r3
			return true;
    3d9a:	2401      	movs	r4, #1
    3d9c:	e757      	b.n	3c4e <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3d9e:	8a39      	ldrh	r1, [r7, #16]
    3da0:	0020      	movs	r0, r4
    3da2:	4b19      	ldr	r3, [pc, #100]	; (3e08 <udd_ep_run+0x1d0>)
    3da4:	4798      	blx	r3
    3da6:	1a63      	subs	r3, r4, r1
    3da8:	b29a      	uxth	r2, r3
    3daa:	e7a4      	b.n	3cf6 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3dac:	0013      	movs	r3, r2
    3dae:	9a02      	ldr	r2, [sp, #8]
    3db0:	0031      	movs	r1, r6
    3db2:	4813      	ldr	r0, [pc, #76]	; (3e00 <udd_ep_run+0x1c8>)
    3db4:	4c13      	ldr	r4, [pc, #76]	; (3e04 <udd_ep_run+0x1cc>)
    3db6:	47a0      	blx	r4
				return (STATUS_OK ==
    3db8:	4244      	negs	r4, r0
    3dba:	4144      	adcs	r4, r0
    3dbc:	b2e4      	uxtb	r4, r4
    3dbe:	e746      	b.n	3c4e <udd_ep_run+0x16>
			ptr_job->busy = false;
    3dc0:	7cbb      	ldrb	r3, [r7, #18]
    3dc2:	2201      	movs	r2, #1
    3dc4:	4393      	bics	r3, r2
    3dc6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3dca:	2b00      	cmp	r3, #0
    3dcc:	d009      	beq.n	3de2 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3dce:	002a      	movs	r2, r5
    3dd0:	2100      	movs	r1, #0
    3dd2:	2000      	movs	r0, #0
    3dd4:	4798      	blx	r3
			return true;
    3dd6:	2401      	movs	r4, #1
    3dd8:	e739      	b.n	3c4e <udd_ep_run+0x16>
		return false;
    3dda:	2400      	movs	r4, #0
    3ddc:	e737      	b.n	3c4e <udd_ep_run+0x16>
			return true;
    3dde:	2401      	movs	r4, #1
    3de0:	e735      	b.n	3c4e <udd_ep_run+0x16>
			return true;
    3de2:	2401      	movs	r4, #1
    3de4:	e733      	b.n	3c4e <udd_ep_run+0x16>
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	00003a59 	.word	0x00003a59
    3dec:	000032f1 	.word	0x000032f1
    3df0:	20000125 	.word	0x20000125
    3df4:	00001fff 	.word	0x00001fff
    3df8:	00009035 	.word	0x00009035
    3dfc:	20000464 	.word	0x20000464
    3e00:	200004e4 	.word	0x200004e4
    3e04:	00006831 	.word	0x00006831
    3e08:	00008e61 	.word	0x00008e61
    3e0c:	000067dd 	.word	0x000067dd

00003e10 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3e10:	4b02      	ldr	r3, [pc, #8]	; (3e1c <udd_set_address+0xc>)
    3e12:	681b      	ldr	r3, [r3, #0]
    3e14:	2280      	movs	r2, #128	; 0x80
    3e16:	4310      	orrs	r0, r2
    3e18:	7298      	strb	r0, [r3, #10]
}
    3e1a:	4770      	bx	lr
    3e1c:	200004e4 	.word	0x200004e4

00003e20 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3e20:	4b02      	ldr	r3, [pc, #8]	; (3e2c <udd_getaddress+0xc>)
    3e22:	681b      	ldr	r3, [r3, #0]
    3e24:	7a98      	ldrb	r0, [r3, #10]
    3e26:	0640      	lsls	r0, r0, #25
    3e28:	0e40      	lsrs	r0, r0, #25
}
    3e2a:	4770      	bx	lr
    3e2c:	200004e4 	.word	0x200004e4

00003e30 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3e30:	4b01      	ldr	r3, [pc, #4]	; (3e38 <udd_set_setup_payload+0x8>)
    3e32:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3e34:	8199      	strh	r1, [r3, #12]
}
    3e36:	4770      	bx	lr
    3e38:	2000064c 	.word	0x2000064c

00003e3c <udd_detach>:

void udd_detach(void)
{
    3e3c:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3e3e:	4b05      	ldr	r3, [pc, #20]	; (3e54 <udd_detach+0x18>)
    3e40:	681a      	ldr	r2, [r3, #0]
    3e42:	8913      	ldrh	r3, [r2, #8]
    3e44:	2101      	movs	r1, #1
    3e46:	430b      	orrs	r3, r1
    3e48:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3e4a:	2001      	movs	r0, #1
    3e4c:	4b02      	ldr	r3, [pc, #8]	; (3e58 <udd_detach+0x1c>)
    3e4e:	4798      	blx	r3
}
    3e50:	bd10      	pop	{r4, pc}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	200004e4 	.word	0x200004e4
    3e58:	00003231 	.word	0x00003231

00003e5c <udd_attach>:

void udd_attach(void)
{
    3e5c:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3e5e:	2003      	movs	r0, #3
    3e60:	4b16      	ldr	r3, [pc, #88]	; (3ebc <udd_attach+0x60>)
    3e62:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3e64:	4c16      	ldr	r4, [pc, #88]	; (3ec0 <udd_attach+0x64>)
    3e66:	6822      	ldr	r2, [r4, #0]
    3e68:	8913      	ldrh	r3, [r2, #8]
    3e6a:	2101      	movs	r1, #1
    3e6c:	438b      	bics	r3, r1
    3e6e:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3e70:	4a14      	ldr	r2, [pc, #80]	; (3ec4 <udd_attach+0x68>)
    3e72:	3103      	adds	r1, #3
    3e74:	0020      	movs	r0, r4
    3e76:	4e14      	ldr	r6, [pc, #80]	; (3ec8 <udd_attach+0x6c>)
    3e78:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3e7a:	4a14      	ldr	r2, [pc, #80]	; (3ecc <udd_attach+0x70>)
    3e7c:	2100      	movs	r1, #0
    3e7e:	0020      	movs	r0, r4
    3e80:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3e82:	4a13      	ldr	r2, [pc, #76]	; (3ed0 <udd_attach+0x74>)
    3e84:	2101      	movs	r1, #1
    3e86:	0020      	movs	r0, r4
    3e88:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3e8a:	4a12      	ldr	r2, [pc, #72]	; (3ed4 <udd_attach+0x78>)
    3e8c:	2102      	movs	r1, #2
    3e8e:	0020      	movs	r0, r4
    3e90:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3e92:	2104      	movs	r1, #4
    3e94:	0020      	movs	r0, r4
    3e96:	4d10      	ldr	r5, [pc, #64]	; (3ed8 <udd_attach+0x7c>)
    3e98:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3e9a:	2100      	movs	r1, #0
    3e9c:	0020      	movs	r0, r4
    3e9e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3ea0:	2101      	movs	r1, #1
    3ea2:	0020      	movs	r0, r4
    3ea4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3ea6:	2102      	movs	r1, #2
    3ea8:	0020      	movs	r0, r4
    3eaa:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3eac:	4a0b      	ldr	r2, [pc, #44]	; (3edc <udd_attach+0x80>)
    3eae:	2106      	movs	r1, #6
    3eb0:	0020      	movs	r0, r4
    3eb2:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3eb4:	2106      	movs	r1, #6
    3eb6:	0020      	movs	r0, r4
    3eb8:	47a8      	blx	r5
#endif
}
    3eba:	bd70      	pop	{r4, r5, r6, pc}
    3ebc:	00003231 	.word	0x00003231
    3ec0:	200004e4 	.word	0x200004e4
    3ec4:	00003879 	.word	0x00003879
    3ec8:	00006201 	.word	0x00006201
    3ecc:	00003865 	.word	0x00003865
    3ed0:	00003599 	.word	0x00003599
    3ed4:	00003529 	.word	0x00003529
    3ed8:	00006225 	.word	0x00006225
    3edc:	000034f5 	.word	0x000034f5

00003ee0 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3ee0:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3ee2:	2100      	movs	r1, #0
    3ee4:	200e      	movs	r0, #14
    3ee6:	4b08      	ldr	r3, [pc, #32]	; (3f08 <_uhd_vbus_handler+0x28>)
    3ee8:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3eea:	4b08      	ldr	r3, [pc, #32]	; (3f0c <_uhd_vbus_handler+0x2c>)
    3eec:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3eee:	045b      	lsls	r3, r3, #17
    3ef0:	d406      	bmi.n	3f00 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3ef2:	4b07      	ldr	r3, [pc, #28]	; (3f10 <_uhd_vbus_handler+0x30>)
    3ef4:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3ef6:	2100      	movs	r1, #0
    3ef8:	200e      	movs	r0, #14
    3efa:	4b06      	ldr	r3, [pc, #24]	; (3f14 <_uhd_vbus_handler+0x34>)
    3efc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3efe:	bd10      	pop	{r4, pc}
		udd_attach();
    3f00:	4b05      	ldr	r3, [pc, #20]	; (3f18 <_uhd_vbus_handler+0x38>)
    3f02:	4798      	blx	r3
    3f04:	e7f7      	b.n	3ef6 <_uhd_vbus_handler+0x16>
    3f06:	46c0      	nop			; (mov r8, r8)
    3f08:	000070e9 	.word	0x000070e9
    3f0c:	41004400 	.word	0x41004400
    3f10:	00003e3d 	.word	0x00003e3d
    3f14:	000070c9 	.word	0x000070c9
    3f18:	00003e5d 	.word	0x00003e5d

00003f1c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3f1c:	b570      	push	{r4, r5, r6, lr}
    3f1e:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f20:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3f24:	425a      	negs	r2, r3
    3f26:	4153      	adcs	r3, r2
    3f28:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3f2a:	b672      	cpsid	i
    3f2c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3f30:	2600      	movs	r6, #0
    3f32:	4b29      	ldr	r3, [pc, #164]	; (3fd8 <udd_enable+0xbc>)
    3f34:	701e      	strb	r6, [r3, #0]
	return flags;
    3f36:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3f38:	ac05      	add	r4, sp, #20
    3f3a:	0020      	movs	r0, r4
    3f3c:	4b27      	ldr	r3, [pc, #156]	; (3fdc <udd_enable+0xc0>)
    3f3e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3f40:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3f42:	4e27      	ldr	r6, [pc, #156]	; (3fe0 <udd_enable+0xc4>)
    3f44:	0022      	movs	r2, r4
    3f46:	4927      	ldr	r1, [pc, #156]	; (3fe4 <udd_enable+0xc8>)
    3f48:	0030      	movs	r0, r6
    3f4a:	4b27      	ldr	r3, [pc, #156]	; (3fe8 <udd_enable+0xcc>)
    3f4c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3f4e:	0030      	movs	r0, r6
    3f50:	4b26      	ldr	r3, [pc, #152]	; (3fec <udd_enable+0xd0>)
    3f52:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3f54:	4b26      	ldr	r3, [pc, #152]	; (3ff0 <udd_enable+0xd4>)
    3f56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3f58:	069b      	lsls	r3, r3, #26
    3f5a:	d434      	bmi.n	3fc6 <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3f5c:	4924      	ldr	r1, [pc, #144]	; (3ff0 <udd_enable+0xd4>)
    3f5e:	22d0      	movs	r2, #208	; 0xd0
    3f60:	68cb      	ldr	r3, [r1, #12]
    3f62:	4013      	ands	r3, r2
    3f64:	2bd0      	cmp	r3, #208	; 0xd0
    3f66:	d1fb      	bne.n	3f60 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3f68:	2001      	movs	r0, #1
    3f6a:	4b22      	ldr	r3, [pc, #136]	; (3ff4 <udd_enable+0xd8>)
    3f6c:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3f6e:	ac02      	add	r4, sp, #8
    3f70:	0020      	movs	r0, r4
    3f72:	4b21      	ldr	r3, [pc, #132]	; (3ff8 <udd_enable+0xdc>)
    3f74:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3f76:	230e      	movs	r3, #14
    3f78:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3f7a:	2300      	movs	r3, #0
    3f7c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3f7e:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3f80:	3303      	adds	r3, #3
    3f82:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3f84:	3b02      	subs	r3, #2
    3f86:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3f88:	2100      	movs	r1, #0
    3f8a:	200e      	movs	r0, #14
    3f8c:	4b1b      	ldr	r3, [pc, #108]	; (3ffc <udd_enable+0xe0>)
    3f8e:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3f90:	0021      	movs	r1, r4
    3f92:	200e      	movs	r0, #14
    3f94:	4b1a      	ldr	r3, [pc, #104]	; (4000 <udd_enable+0xe4>)
    3f96:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3f98:	2200      	movs	r2, #0
    3f9a:	210e      	movs	r1, #14
    3f9c:	4819      	ldr	r0, [pc, #100]	; (4004 <udd_enable+0xe8>)
    3f9e:	4b1a      	ldr	r3, [pc, #104]	; (4008 <udd_enable+0xec>)
    3fa0:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3fa2:	2100      	movs	r1, #0
    3fa4:	200e      	movs	r0, #14
    3fa6:	4b19      	ldr	r3, [pc, #100]	; (400c <udd_enable+0xf0>)
    3fa8:	4798      	blx	r3
    3faa:	4b19      	ldr	r3, [pc, #100]	; (4010 <udd_enable+0xf4>)
    3fac:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3fae:	045b      	lsls	r3, r3, #17
    3fb0:	d40f      	bmi.n	3fd2 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3fb2:	2d00      	cmp	r5, #0
    3fb4:	d005      	beq.n	3fc2 <udd_enable+0xa6>
		cpu_irq_enable();
    3fb6:	2201      	movs	r2, #1
    3fb8:	4b07      	ldr	r3, [pc, #28]	; (3fd8 <udd_enable+0xbc>)
    3fba:	701a      	strb	r2, [r3, #0]
    3fbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3fc0:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3fc2:	b006      	add	sp, #24
    3fc4:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3fc6:	490a      	ldr	r1, [pc, #40]	; (3ff0 <udd_enable+0xd4>)
    3fc8:	2210      	movs	r2, #16
    3fca:	68cb      	ldr	r3, [r1, #12]
    3fcc:	421a      	tst	r2, r3
    3fce:	d0fc      	beq.n	3fca <udd_enable+0xae>
    3fd0:	e7ca      	b.n	3f68 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3fd2:	4b0c      	ldr	r3, [pc, #48]	; (4004 <udd_enable+0xe8>)
    3fd4:	4798      	blx	r3
    3fd6:	e7ec      	b.n	3fb2 <udd_enable+0x96>
    3fd8:	20000125 	.word	0x20000125
    3fdc:	00006e8d 	.word	0x00006e8d
    3fe0:	200004e4 	.word	0x200004e4
    3fe4:	41005000 	.word	0x41005000
    3fe8:	00006e9d 	.word	0x00006e9d
    3fec:	000068b1 	.word	0x000068b1
    3ff0:	40000800 	.word	0x40000800
    3ff4:	00003231 	.word	0x00003231
    3ff8:	00002461 	.word	0x00002461
    3ffc:	000070e9 	.word	0x000070e9
    4000:	00002475 	.word	0x00002475
    4004:	00003ee1 	.word	0x00003ee1
    4008:	0000709d 	.word	0x0000709d
    400c:	000070c9 	.word	0x000070c9
    4010:	41004400 	.word	0x41004400

00004014 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4014:	b5f0      	push	{r4, r5, r6, r7, lr}
    4016:	46c6      	mov	lr, r8
    4018:	b500      	push	{lr}
    401a:	000c      	movs	r4, r1
    401c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    401e:	2800      	cmp	r0, #0
    4020:	d10f      	bne.n	4042 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    4022:	2a00      	cmp	r2, #0
    4024:	dd11      	ble.n	404a <_read+0x36>
    4026:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4028:	4e09      	ldr	r6, [pc, #36]	; (4050 <_read+0x3c>)
    402a:	4d0a      	ldr	r5, [pc, #40]	; (4054 <_read+0x40>)
    402c:	6830      	ldr	r0, [r6, #0]
    402e:	0021      	movs	r1, r4
    4030:	682b      	ldr	r3, [r5, #0]
    4032:	4798      	blx	r3
		ptr++;
    4034:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4036:	42bc      	cmp	r4, r7
    4038:	d1f8      	bne.n	402c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    403a:	4640      	mov	r0, r8
    403c:	bc04      	pop	{r2}
    403e:	4690      	mov	r8, r2
    4040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4042:	2301      	movs	r3, #1
    4044:	425b      	negs	r3, r3
    4046:	4698      	mov	r8, r3
    4048:	e7f7      	b.n	403a <_read+0x26>
	for (; len > 0; --len) {
    404a:	4680      	mov	r8, r0
    404c:	e7f5      	b.n	403a <_read+0x26>
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	200006ac 	.word	0x200006ac
    4054:	200006a4 	.word	0x200006a4

00004058 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4058:	b5f0      	push	{r4, r5, r6, r7, lr}
    405a:	46c6      	mov	lr, r8
    405c:	b500      	push	{lr}
    405e:	000e      	movs	r6, r1
    4060:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4062:	3801      	subs	r0, #1
    4064:	2802      	cmp	r0, #2
    4066:	d810      	bhi.n	408a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4068:	2a00      	cmp	r2, #0
    406a:	d011      	beq.n	4090 <_write+0x38>
    406c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    406e:	4b0c      	ldr	r3, [pc, #48]	; (40a0 <_write+0x48>)
    4070:	4698      	mov	r8, r3
    4072:	4f0c      	ldr	r7, [pc, #48]	; (40a4 <_write+0x4c>)
    4074:	4643      	mov	r3, r8
    4076:	6818      	ldr	r0, [r3, #0]
    4078:	5d31      	ldrb	r1, [r6, r4]
    407a:	683b      	ldr	r3, [r7, #0]
    407c:	4798      	blx	r3
    407e:	2800      	cmp	r0, #0
    4080:	db08      	blt.n	4094 <_write+0x3c>
			return -1;
		}
		++nChars;
    4082:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    4084:	42a5      	cmp	r5, r4
    4086:	d1f5      	bne.n	4074 <_write+0x1c>
    4088:	e006      	b.n	4098 <_write+0x40>
		return -1;
    408a:	2401      	movs	r4, #1
    408c:	4264      	negs	r4, r4
    408e:	e003      	b.n	4098 <_write+0x40>
	for (; len != 0; --len) {
    4090:	0014      	movs	r4, r2
    4092:	e001      	b.n	4098 <_write+0x40>
			return -1;
    4094:	2401      	movs	r4, #1
    4096:	4264      	negs	r4, r4
	}
	return nChars;
}
    4098:	0020      	movs	r0, r4
    409a:	bc04      	pop	{r2}
    409c:	4690      	mov	r8, r2
    409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40a0:	200006ac 	.word	0x200006ac
    40a4:	200006a8 	.word	0x200006a8

000040a8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    40a8:	b530      	push	{r4, r5, lr}
    40aa:	b087      	sub	sp, #28
    40ac:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    40ae:	aa01      	add	r2, sp, #4
    40b0:	23a0      	movs	r3, #160	; 0xa0
    40b2:	011b      	lsls	r3, r3, #4
    40b4:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    40b6:	2300      	movs	r3, #0
    40b8:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    40ba:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    40bc:	21fa      	movs	r1, #250	; 0xfa
    40be:	00c9      	lsls	r1, r1, #3
    40c0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    40c2:	2101      	movs	r1, #1
    40c4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    40c6:	2004      	movs	r0, #4
    40c8:	7210      	strb	r0, [r2, #8]
    40ca:	7253      	strb	r3, [r2, #9]
    40cc:	7293      	strb	r3, [r2, #10]
    40ce:	72d3      	strb	r3, [r2, #11]
    40d0:	7311      	strb	r1, [r2, #12]
    40d2:	7351      	strb	r1, [r2, #13]
    40d4:	4b14      	ldr	r3, [pc, #80]	; (4128 <disk_initialize+0x80>)
    40d6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    40d8:	2306      	movs	r3, #6
    40da:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    40dc:	4d13      	ldr	r5, [pc, #76]	; (412c <disk_initialize+0x84>)
    40de:	4914      	ldr	r1, [pc, #80]	; (4130 <disk_initialize+0x88>)
    40e0:	0028      	movs	r0, r5
    40e2:	4b14      	ldr	r3, [pc, #80]	; (4134 <disk_initialize+0x8c>)
    40e4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    40e6:	0028      	movs	r0, r5
    40e8:	4b13      	ldr	r3, [pc, #76]	; (4138 <disk_initialize+0x90>)
    40ea:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    40ec:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    40ee:	2c01      	cmp	r4, #1
    40f0:	d901      	bls.n	40f6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    40f2:	b007      	add	sp, #28
    40f4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    40f6:	0020      	movs	r0, r4
    40f8:	4b10      	ldr	r3, [pc, #64]	; (413c <disk_initialize+0x94>)
    40fa:	4798      	blx	r3
    40fc:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    40fe:	2803      	cmp	r0, #3
    4100:	d106      	bne.n	4110 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    4102:	0020      	movs	r0, r4
    4104:	4b0d      	ldr	r3, [pc, #52]	; (413c <disk_initialize+0x94>)
    4106:	4798      	blx	r3
    4108:	0003      	movs	r3, r0
		return STA_NOINIT;
    410a:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    410c:	2b03      	cmp	r3, #3
    410e:	d0f0      	beq.n	40f2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    4110:	2b00      	cmp	r3, #0
    4112:	d106      	bne.n	4122 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    4114:	0020      	movs	r0, r4
    4116:	4b0a      	ldr	r3, [pc, #40]	; (4140 <disk_initialize+0x98>)
    4118:	4798      	blx	r3
	return 0;
    411a:	1e43      	subs	r3, r0, #1
    411c:	4198      	sbcs	r0, r3
    411e:	0080      	lsls	r0, r0, #2
    4120:	e7e7      	b.n	40f2 <disk_initialize+0x4a>
		return STA_NOINIT;
    4122:	2001      	movs	r0, #1
    4124:	e7e5      	b.n	40f2 <disk_initialize+0x4a>
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	000007de 	.word	0x000007de
    412c:	200006b0 	.word	0x200006b0
    4130:	40001400 	.word	0x40001400
    4134:	00002649 	.word	0x00002649
    4138:	000024ed 	.word	0x000024ed
    413c:	00008679 	.word	0x00008679
    4140:	000086c5 	.word	0x000086c5

00004144 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    4144:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    4146:	4b05      	ldr	r3, [pc, #20]	; (415c <disk_status+0x18>)
    4148:	4798      	blx	r3
    414a:	1e03      	subs	r3, r0, #0
    414c:	d004      	beq.n	4158 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    414e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    4150:	2b02      	cmp	r3, #2
    4152:	d000      	beq.n	4156 <disk_status+0x12>
	default:
		return STA_NOINIT;
    4154:	3802      	subs	r0, #2
	}
}
    4156:	bd10      	pop	{r4, pc}
		return 0;
    4158:	2000      	movs	r0, #0
    415a:	e7fc      	b.n	4156 <disk_status+0x12>
    415c:	00008679 	.word	0x00008679

00004160 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    4160:	b5f0      	push	{r4, r5, r6, r7, lr}
    4162:	46de      	mov	lr, fp
    4164:	464f      	mov	r7, r9
    4166:	4646      	mov	r6, r8
    4168:	b5c0      	push	{r6, r7, lr}
    416a:	b084      	sub	sp, #16
    416c:	9001      	str	r0, [sp, #4]
    416e:	000d      	movs	r5, r1
    4170:	0014      	movs	r4, r2
    4172:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    4174:	4b18      	ldr	r3, [pc, #96]	; (41d8 <disk_read+0x78>)
    4176:	4798      	blx	r3
    4178:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    417a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    417c:	2e00      	cmp	r6, #0
    417e:	d105      	bne.n	418c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    4180:	b004      	add	sp, #16
    4182:	bc1c      	pop	{r2, r3, r4}
    4184:	4690      	mov	r8, r2
    4186:	4699      	mov	r9, r3
    4188:	46a3      	mov	fp, r4
    418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    418c:	a903      	add	r1, sp, #12
    418e:	9801      	ldr	r0, [sp, #4]
    4190:	4b12      	ldr	r3, [pc, #72]	; (41dc <disk_read+0x7c>)
    4192:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    4194:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    4196:	0032      	movs	r2, r6
    4198:	437a      	muls	r2, r7
    419a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    419c:	9b03      	ldr	r3, [sp, #12]
    419e:	3301      	adds	r3, #1
    41a0:	4373      	muls	r3, r6
		return RES_PARERR;
    41a2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    41a4:	429a      	cmp	r2, r3
    41a6:	d8eb      	bhi.n	4180 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    41a8:	2f00      	cmp	r7, #0
    41aa:	d011      	beq.n	41d0 <disk_read+0x70>
    41ac:	0273      	lsls	r3, r6, #9
    41ae:	4698      	mov	r8, r3
    41b0:	1c7b      	adds	r3, r7, #1
    41b2:	469b      	mov	fp, r3
    41b4:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    41b6:	4e0a      	ldr	r6, [pc, #40]	; (41e0 <disk_read+0x80>)
    41b8:	002a      	movs	r2, r5
    41ba:	0021      	movs	r1, r4
    41bc:	9801      	ldr	r0, [sp, #4]
    41be:	47b0      	blx	r6
    41c0:	2800      	cmp	r0, #0
    41c2:	d107      	bne.n	41d4 <disk_read+0x74>
    41c4:	3701      	adds	r7, #1
    41c6:	444c      	add	r4, r9
    41c8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    41ca:	455f      	cmp	r7, fp
    41cc:	d1f4      	bne.n	41b8 <disk_read+0x58>
    41ce:	e7d7      	b.n	4180 <disk_read+0x20>
	return RES_OK;
    41d0:	2000      	movs	r0, #0
    41d2:	e7d5      	b.n	4180 <disk_read+0x20>
			return RES_ERROR;
    41d4:	2001      	movs	r0, #1
    41d6:	e7d3      	b.n	4180 <disk_read+0x20>
    41d8:	000086ad 	.word	0x000086ad
    41dc:	00008691 	.word	0x00008691
    41e0:	0000876d 	.word	0x0000876d

000041e4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    41e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41e6:	46de      	mov	lr, fp
    41e8:	464f      	mov	r7, r9
    41ea:	4646      	mov	r6, r8
    41ec:	b5c0      	push	{r6, r7, lr}
    41ee:	b084      	sub	sp, #16
    41f0:	9001      	str	r0, [sp, #4]
    41f2:	000d      	movs	r5, r1
    41f4:	0014      	movs	r4, r2
    41f6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    41f8:	4b18      	ldr	r3, [pc, #96]	; (425c <disk_write+0x78>)
    41fa:	4798      	blx	r3
    41fc:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    41fe:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    4200:	2e00      	cmp	r6, #0
    4202:	d105      	bne.n	4210 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    4204:	b004      	add	sp, #16
    4206:	bc1c      	pop	{r2, r3, r4}
    4208:	4690      	mov	r8, r2
    420a:	4699      	mov	r9, r3
    420c:	46a3      	mov	fp, r4
    420e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    4210:	a903      	add	r1, sp, #12
    4212:	9801      	ldr	r0, [sp, #4]
    4214:	4b12      	ldr	r3, [pc, #72]	; (4260 <disk_write+0x7c>)
    4216:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    4218:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    421a:	0032      	movs	r2, r6
    421c:	437a      	muls	r2, r7
    421e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    4220:	9b03      	ldr	r3, [sp, #12]
    4222:	3301      	adds	r3, #1
    4224:	4373      	muls	r3, r6
		return RES_PARERR;
    4226:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    4228:	429a      	cmp	r2, r3
    422a:	d8eb      	bhi.n	4204 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    422c:	2f00      	cmp	r7, #0
    422e:	d011      	beq.n	4254 <disk_write+0x70>
    4230:	0273      	lsls	r3, r6, #9
    4232:	4698      	mov	r8, r3
    4234:	1c7b      	adds	r3, r7, #1
    4236:	469b      	mov	fp, r3
    4238:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    423a:	4e0a      	ldr	r6, [pc, #40]	; (4264 <disk_write+0x80>)
    423c:	002a      	movs	r2, r5
    423e:	0021      	movs	r1, r4
    4240:	9801      	ldr	r0, [sp, #4]
    4242:	47b0      	blx	r6
    4244:	2800      	cmp	r0, #0
    4246:	d107      	bne.n	4258 <disk_write+0x74>
    4248:	3701      	adds	r7, #1
    424a:	444c      	add	r4, r9
    424c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    424e:	455f      	cmp	r7, fp
    4250:	d1f4      	bne.n	423c <disk_write+0x58>
    4252:	e7d7      	b.n	4204 <disk_write+0x20>
	return RES_OK;
    4254:	2000      	movs	r0, #0
    4256:	e7d5      	b.n	4204 <disk_write+0x20>
			return RES_ERROR;
    4258:	2001      	movs	r0, #1
    425a:	e7d3      	b.n	4204 <disk_write+0x20>
    425c:	000086ad 	.word	0x000086ad
    4260:	00008691 	.word	0x00008691
    4264:	000087a1 	.word	0x000087a1

00004268 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    4268:	b510      	push	{r4, lr}
    426a:	b082      	sub	sp, #8
    426c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    426e:	2901      	cmp	r1, #1
    4270:	d00b      	beq.n	428a <disk_ioctl+0x22>
    4272:	2900      	cmp	r1, #0
    4274:	d020      	beq.n	42b8 <disk_ioctl+0x50>
    4276:	2902      	cmp	r1, #2
    4278:	d00f      	beq.n	429a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    427a:	2004      	movs	r0, #4
	switch (ctrl) {
    427c:	2903      	cmp	r1, #3
    427e:	d102      	bne.n	4286 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    4280:	2301      	movs	r3, #1
    4282:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    4284:	2000      	movs	r0, #0
	}

	return res;
}
    4286:	b002      	add	sp, #8
    4288:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    428a:	a901      	add	r1, sp, #4
    428c:	4b0e      	ldr	r3, [pc, #56]	; (42c8 <disk_ioctl+0x60>)
    428e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    4290:	9b01      	ldr	r3, [sp, #4]
    4292:	3301      	adds	r3, #1
    4294:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    4296:	2000      	movs	r0, #0
	break;
    4298:	e7f5      	b.n	4286 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    429a:	4b0c      	ldr	r3, [pc, #48]	; (42cc <disk_ioctl+0x64>)
    429c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    429e:	1e43      	subs	r3, r0, #1
    42a0:	b2db      	uxtb	r3, r3
    42a2:	2b01      	cmp	r3, #1
    42a4:	d904      	bls.n	42b0 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    42a6:	1f03      	subs	r3, r0, #4
    42a8:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    42aa:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    42ac:	4213      	tst	r3, r2
    42ae:	d1ea      	bne.n	4286 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    42b0:	2300      	movs	r3, #0
    42b2:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    42b4:	2000      	movs	r0, #0
	break;
    42b6:	e7e6      	b.n	4286 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    42b8:	4b05      	ldr	r3, [pc, #20]	; (42d0 <disk_ioctl+0x68>)
    42ba:	4798      	blx	r3
    42bc:	2800      	cmp	r0, #0
    42be:	d001      	beq.n	42c4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    42c0:	2003      	movs	r0, #3
    42c2:	e7e0      	b.n	4286 <disk_ioctl+0x1e>
			res = RES_OK;
    42c4:	2000      	movs	r0, #0
    42c6:	e7de      	b.n	4286 <disk_ioctl+0x1e>
    42c8:	00008691 	.word	0x00008691
    42cc:	000086ad 	.word	0x000086ad
    42d0:	00008679 	.word	0x00008679

000042d4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    42d4:	b500      	push	{lr}
    42d6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    42d8:	4669      	mov	r1, sp
    42da:	480f      	ldr	r0, [pc, #60]	; (4318 <get_fattime+0x44>)
    42dc:	4b0f      	ldr	r3, [pc, #60]	; (431c <get_fattime+0x48>)
    42de:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    42e0:	466b      	mov	r3, sp
    42e2:	7958      	ldrb	r0, [r3, #5]
    42e4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    42e6:	791b      	ldrb	r3, [r3, #4]
    42e8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    42ea:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    42ec:	466b      	mov	r3, sp
    42ee:	789b      	ldrb	r3, [r3, #2]
    42f0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    42f2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    42f4:	466b      	mov	r3, sp
    42f6:	785b      	ldrb	r3, [r3, #1]
    42f8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    42fa:	4318      	orrs	r0, r3
    42fc:	466b      	mov	r3, sp
    42fe:	781b      	ldrb	r3, [r3, #0]
    4300:	085b      	lsrs	r3, r3, #1
    4302:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    4304:	466b      	mov	r3, sp
    4306:	88db      	ldrh	r3, [r3, #6]
    4308:	4a05      	ldr	r2, [pc, #20]	; (4320 <get_fattime+0x4c>)
    430a:	4694      	mov	ip, r2
    430c:	4463      	add	r3, ip
    430e:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    4310:	4318      	orrs	r0, r3

	return ul_time;
}
    4312:	b003      	add	sp, #12
    4314:	bd00      	pop	{pc}
    4316:	46c0      	nop			; (mov r8, r8)
    4318:	200006b0 	.word	0x200006b0
    431c:	000025d1 	.word	0x000025d1
    4320:	fffff844 	.word	0xfffff844

00004324 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    4324:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    4326:	2a00      	cmp	r2, #0
    4328:	d005      	beq.n	4336 <mem_cpy+0x12>
    432a:	2300      	movs	r3, #0
		*d++ = *s++;
    432c:	5ccc      	ldrb	r4, [r1, r3]
    432e:	54c4      	strb	r4, [r0, r3]
    4330:	3301      	adds	r3, #1
	while (cnt--)
    4332:	4293      	cmp	r3, r2
    4334:	d1fa      	bne.n	432c <mem_cpy+0x8>
}
    4336:	bd10      	pop	{r4, pc}

00004338 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4338:	2a00      	cmp	r2, #0
    433a:	d005      	beq.n	4348 <mem_set+0x10>
    433c:	0003      	movs	r3, r0
    433e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    4340:	7019      	strb	r1, [r3, #0]
    4342:	3301      	adds	r3, #1
	while (cnt--)
    4344:	4293      	cmp	r3, r2
    4346:	d1fb      	bne.n	4340 <mem_set+0x8>
}
    4348:	4770      	bx	lr

0000434a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    434a:	0002      	movs	r2, r0
	clst -= 2;
    434c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    434e:	6983      	ldr	r3, [r0, #24]
    4350:	3b02      	subs	r3, #2
    4352:	2000      	movs	r0, #0
    4354:	4299      	cmp	r1, r3
    4356:	d203      	bcs.n	4360 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    4358:	7890      	ldrb	r0, [r2, #2]
    435a:	4341      	muls	r1, r0
    435c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    435e:	1808      	adds	r0, r1, r0
}
    4360:	4770      	bx	lr

00004362 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    4362:	0002      	movs	r2, r0
    4364:	0001      	movs	r1, r0
    4366:	310b      	adds	r1, #11
	BYTE sum = 0;
    4368:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    436a:	0843      	lsrs	r3, r0, #1
    436c:	01c0      	lsls	r0, r0, #7
    436e:	4303      	orrs	r3, r0
    4370:	7810      	ldrb	r0, [r2, #0]
    4372:	1818      	adds	r0, r3, r0
    4374:	b2c0      	uxtb	r0, r0
    4376:	3201      	adds	r2, #1
    4378:	428a      	cmp	r2, r1
    437a:	d1f6      	bne.n	436a <sum_sfn+0x8>
	return sum;
}
    437c:	4770      	bx	lr
	...

00004380 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    4380:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    4382:	2800      	cmp	r0, #0
    4384:	d010      	beq.n	43a8 <validate+0x28>
    4386:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    4388:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    438a:	2a00      	cmp	r2, #0
    438c:	d101      	bne.n	4392 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    438e:	0018      	movs	r0, r3
    4390:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    4392:	88c2      	ldrh	r2, [r0, #6]
    4394:	428a      	cmp	r2, r1
    4396:	d1fa      	bne.n	438e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    4398:	7840      	ldrb	r0, [r0, #1]
    439a:	4b04      	ldr	r3, [pc, #16]	; (43ac <validate+0x2c>)
    439c:	4798      	blx	r3
		return FR_NOT_READY;
    439e:	2303      	movs	r3, #3
	return FR_OK;
    43a0:	07c0      	lsls	r0, r0, #31
    43a2:	17c0      	asrs	r0, r0, #31
    43a4:	4003      	ands	r3, r0
    43a6:	e7f2      	b.n	438e <validate+0xe>
		return FR_INVALID_OBJECT;
    43a8:	2309      	movs	r3, #9
    43aa:	e7f0      	b.n	438e <validate+0xe>
    43ac:	00004145 	.word	0x00004145

000043b0 <check_fs>:
{
    43b0:	b570      	push	{r4, r5, r6, lr}
    43b2:	0004      	movs	r4, r0
    43b4:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    43b6:	0001      	movs	r1, r0
    43b8:	3130      	adds	r1, #48	; 0x30
    43ba:	7840      	ldrb	r0, [r0, #1]
    43bc:	2301      	movs	r3, #1
    43be:	4d1f      	ldr	r5, [pc, #124]	; (443c <check_fs+0x8c>)
    43c0:	47a8      	blx	r5
		return 3;
    43c2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    43c4:	2800      	cmp	r0, #0
    43c6:	d001      	beq.n	43cc <check_fs+0x1c>
}
    43c8:	0018      	movs	r0, r3
    43ca:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    43cc:	4b1c      	ldr	r3, [pc, #112]	; (4440 <check_fs+0x90>)
    43ce:	5ce3      	ldrb	r3, [r4, r3]
    43d0:	021b      	lsls	r3, r3, #8
    43d2:	4a1c      	ldr	r2, [pc, #112]	; (4444 <check_fs+0x94>)
    43d4:	5ca2      	ldrb	r2, [r4, r2]
    43d6:	431a      	orrs	r2, r3
    43d8:	491b      	ldr	r1, [pc, #108]	; (4448 <check_fs+0x98>)
    43da:	b212      	sxth	r2, r2
		return 2;
    43dc:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    43de:	428a      	cmp	r2, r1
    43e0:	d1f2      	bne.n	43c8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    43e2:	3367      	adds	r3, #103	; 0x67
    43e4:	5ce3      	ldrb	r3, [r4, r3]
    43e6:	061b      	lsls	r3, r3, #24
    43e8:	2268      	movs	r2, #104	; 0x68
    43ea:	5ca2      	ldrb	r2, [r4, r2]
    43ec:	0412      	lsls	r2, r2, #16
    43ee:	4313      	orrs	r3, r2
    43f0:	2266      	movs	r2, #102	; 0x66
    43f2:	5ca2      	ldrb	r2, [r4, r2]
    43f4:	4313      	orrs	r3, r2
    43f6:	2267      	movs	r2, #103	; 0x67
    43f8:	5ca2      	ldrb	r2, [r4, r2]
    43fa:	0212      	lsls	r2, r2, #8
    43fc:	4313      	orrs	r3, r2
    43fe:	021b      	lsls	r3, r3, #8
    4400:	0a1b      	lsrs	r3, r3, #8
    4402:	4a12      	ldr	r2, [pc, #72]	; (444c <check_fs+0x9c>)
    4404:	4293      	cmp	r3, r2
    4406:	d016      	beq.n	4436 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    4408:	2385      	movs	r3, #133	; 0x85
    440a:	5ce3      	ldrb	r3, [r4, r3]
    440c:	061b      	lsls	r3, r3, #24
    440e:	2284      	movs	r2, #132	; 0x84
    4410:	5ca2      	ldrb	r2, [r4, r2]
    4412:	0412      	lsls	r2, r2, #16
    4414:	4313      	orrs	r3, r2
    4416:	2282      	movs	r2, #130	; 0x82
    4418:	5ca2      	ldrb	r2, [r4, r2]
    441a:	4313      	orrs	r3, r2
    441c:	2283      	movs	r2, #131	; 0x83
    441e:	5ca2      	ldrb	r2, [r4, r2]
    4420:	0212      	lsls	r2, r2, #8
    4422:	4313      	orrs	r3, r2
    4424:	021b      	lsls	r3, r3, #8
    4426:	0a1b      	lsrs	r3, r3, #8
    4428:	4a09      	ldr	r2, [pc, #36]	; (4450 <check_fs+0xa0>)
    442a:	4694      	mov	ip, r2
    442c:	4463      	add	r3, ip
    442e:	1e58      	subs	r0, r3, #1
    4430:	4183      	sbcs	r3, r0
		return 3;
    4432:	b2db      	uxtb	r3, r3
    4434:	e7c8      	b.n	43c8 <check_fs+0x18>
		return 0;
    4436:	2300      	movs	r3, #0
    4438:	e7c6      	b.n	43c8 <check_fs+0x18>
    443a:	46c0      	nop			; (mov r8, r8)
    443c:	00004161 	.word	0x00004161
    4440:	0000022f 	.word	0x0000022f
    4444:	0000022e 	.word	0x0000022e
    4448:	ffffaa55 	.word	0xffffaa55
    444c:	00544146 	.word	0x00544146
    4450:	ffabbeba 	.word	0xffabbeba

00004454 <chk_mounted>:
{
    4454:	b5f0      	push	{r4, r5, r6, r7, lr}
    4456:	46d6      	mov	lr, sl
    4458:	464f      	mov	r7, r9
    445a:	4646      	mov	r6, r8
    445c:	b5c0      	push	{r6, r7, lr}
    445e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    4460:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    4462:	781c      	ldrb	r4, [r3, #0]
    4464:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    4466:	2c09      	cmp	r4, #9
    4468:	d80e      	bhi.n	4488 <chk_mounted+0x34>
    446a:	785a      	ldrb	r2, [r3, #1]
    446c:	2a3a      	cmp	r2, #58	; 0x3a
    446e:	d001      	beq.n	4474 <chk_mounted+0x20>
    4470:	2400      	movs	r4, #0
    4472:	e00a      	b.n	448a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    4474:	3302      	adds	r3, #2
    4476:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    4478:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    447a:	2c03      	cmp	r4, #3
    447c:	d905      	bls.n	448a <chk_mounted+0x36>
}
    447e:	bc1c      	pop	{r2, r3, r4}
    4480:	4690      	mov	r8, r2
    4482:	4699      	mov	r9, r3
    4484:	46a2      	mov	sl, r4
    4486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4488:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    448a:	00a3      	lsls	r3, r4, #2
    448c:	4ac5      	ldr	r2, [pc, #788]	; (47a4 <chk_mounted+0x350>)
    448e:	589e      	ldr	r6, [r3, r2]
    4490:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    4492:	2e00      	cmp	r6, #0
    4494:	d100      	bne.n	4498 <chk_mounted+0x44>
    4496:	e0e8      	b.n	466a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    4498:	7833      	ldrb	r3, [r6, #0]
    449a:	2b00      	cmp	r3, #0
    449c:	d00d      	beq.n	44ba <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    449e:	7870      	ldrb	r0, [r6, #1]
    44a0:	4bc1      	ldr	r3, [pc, #772]	; (47a8 <chk_mounted+0x354>)
    44a2:	4798      	blx	r3
    44a4:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    44a6:	07c2      	lsls	r2, r0, #31
    44a8:	d407      	bmi.n	44ba <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    44aa:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    44ac:	2d00      	cmp	r5, #0
    44ae:	d0e6      	beq.n	447e <chk_mounted+0x2a>
    44b0:	075b      	lsls	r3, r3, #29
    44b2:	d400      	bmi.n	44b6 <chk_mounted+0x62>
    44b4:	e0db      	b.n	466e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    44b6:	300a      	adds	r0, #10
    44b8:	e7e1      	b.n	447e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    44ba:	2300      	movs	r3, #0
    44bc:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    44be:	b2e0      	uxtb	r0, r4
    44c0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    44c2:	4bba      	ldr	r3, [pc, #744]	; (47ac <chk_mounted+0x358>)
    44c4:	4798      	blx	r3
    44c6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    44c8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    44ca:	07da      	lsls	r2, r3, #31
    44cc:	d4d7      	bmi.n	447e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    44ce:	2d00      	cmp	r5, #0
    44d0:	d002      	beq.n	44d8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    44d2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    44d4:	075b      	lsls	r3, r3, #29
    44d6:	d4d2      	bmi.n	447e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    44d8:	2100      	movs	r1, #0
    44da:	0030      	movs	r0, r6
    44dc:	4bb4      	ldr	r3, [pc, #720]	; (47b0 <chk_mounted+0x35c>)
    44de:	4798      	blx	r3
    44e0:	0003      	movs	r3, r0
    44e2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    44e4:	2801      	cmp	r0, #1
    44e6:	d100      	bne.n	44ea <chk_mounted+0x96>
    44e8:	e09a      	b.n	4620 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    44ea:	2b03      	cmp	r3, #3
    44ec:	d100      	bne.n	44f0 <chk_mounted+0x9c>
    44ee:	e0c0      	b.n	4672 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    44f0:	200d      	movs	r0, #13
    44f2:	2b00      	cmp	r3, #0
    44f4:	d1c3      	bne.n	447e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    44f6:	333c      	adds	r3, #60	; 0x3c
    44f8:	5cf2      	ldrb	r2, [r6, r3]
    44fa:	0212      	lsls	r2, r2, #8
    44fc:	3b01      	subs	r3, #1
    44fe:	5cf3      	ldrb	r3, [r6, r3]
    4500:	4313      	orrs	r3, r2
    4502:	2280      	movs	r2, #128	; 0x80
    4504:	0092      	lsls	r2, r2, #2
    4506:	b21b      	sxth	r3, r3
    4508:	4293      	cmp	r3, r2
    450a:	d1b8      	bne.n	447e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    450c:	2347      	movs	r3, #71	; 0x47
    450e:	5cf3      	ldrb	r3, [r6, r3]
    4510:	021b      	lsls	r3, r3, #8
    4512:	3abb      	subs	r2, #187	; 0xbb
    4514:	3aff      	subs	r2, #255	; 0xff
    4516:	5cb5      	ldrb	r5, [r6, r2]
    4518:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    451a:	d10d      	bne.n	4538 <chk_mounted+0xe4>
    451c:	2357      	movs	r3, #87	; 0x57
    451e:	5cf5      	ldrb	r5, [r6, r3]
    4520:	062d      	lsls	r5, r5, #24
    4522:	3b01      	subs	r3, #1
    4524:	5cf3      	ldrb	r3, [r6, r3]
    4526:	041b      	lsls	r3, r3, #16
    4528:	431d      	orrs	r5, r3
    452a:	2354      	movs	r3, #84	; 0x54
    452c:	5cf3      	ldrb	r3, [r6, r3]
    452e:	431d      	orrs	r5, r3
    4530:	2355      	movs	r3, #85	; 0x55
    4532:	5cf3      	ldrb	r3, [r6, r3]
    4534:	021b      	lsls	r3, r3, #8
    4536:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    4538:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    453a:	2340      	movs	r3, #64	; 0x40
    453c:	5cf2      	ldrb	r2, [r6, r3]
    453e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    4540:	1e53      	subs	r3, r2, #1
    4542:	200d      	movs	r0, #13
    4544:	2b01      	cmp	r3, #1
    4546:	d89a      	bhi.n	447e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    4548:	233d      	movs	r3, #61	; 0x3d
    454a:	5cf1      	ldrb	r1, [r6, r3]
    454c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    454e:	2900      	cmp	r1, #0
    4550:	d095      	beq.n	447e <chk_mounted+0x2a>
    4552:	1e4b      	subs	r3, r1, #1
    4554:	4219      	tst	r1, r3
    4556:	d192      	bne.n	447e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    4558:	2342      	movs	r3, #66	; 0x42
    455a:	5cf3      	ldrb	r3, [r6, r3]
    455c:	021b      	lsls	r3, r3, #8
    455e:	3034      	adds	r0, #52	; 0x34
    4560:	5c30      	ldrb	r0, [r6, r0]
    4562:	4318      	orrs	r0, r3
    4564:	4680      	mov	r8, r0
    4566:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    4568:	200d      	movs	r0, #13
    456a:	4643      	mov	r3, r8
    456c:	071b      	lsls	r3, r3, #28
    456e:	d000      	beq.n	4572 <chk_mounted+0x11e>
    4570:	e785      	b.n	447e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    4572:	2344      	movs	r3, #68	; 0x44
    4574:	5cf3      	ldrb	r3, [r6, r3]
    4576:	021b      	lsls	r3, r3, #8
    4578:	3036      	adds	r0, #54	; 0x36
    457a:	5c30      	ldrb	r0, [r6, r0]
    457c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    457e:	d10d      	bne.n	459c <chk_mounted+0x148>
    4580:	3353      	adds	r3, #83	; 0x53
    4582:	5cf3      	ldrb	r3, [r6, r3]
    4584:	061b      	lsls	r3, r3, #24
    4586:	2052      	movs	r0, #82	; 0x52
    4588:	5c30      	ldrb	r0, [r6, r0]
    458a:	0400      	lsls	r0, r0, #16
    458c:	4303      	orrs	r3, r0
    458e:	2050      	movs	r0, #80	; 0x50
    4590:	5c30      	ldrb	r0, [r6, r0]
    4592:	4303      	orrs	r3, r0
    4594:	2051      	movs	r0, #81	; 0x51
    4596:	5c30      	ldrb	r0, [r6, r0]
    4598:	0200      	lsls	r0, r0, #8
    459a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    459c:	203f      	movs	r0, #63	; 0x3f
    459e:	5c30      	ldrb	r0, [r6, r0]
    45a0:	0200      	lsls	r0, r0, #8
    45a2:	273e      	movs	r7, #62	; 0x3e
    45a4:	5df7      	ldrb	r7, [r6, r7]
    45a6:	4307      	orrs	r7, r0
    45a8:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    45aa:	200d      	movs	r0, #13
    45ac:	2f00      	cmp	r7, #0
    45ae:	d100      	bne.n	45b2 <chk_mounted+0x15e>
    45b0:	e765      	b.n	447e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    45b2:	436a      	muls	r2, r5
    45b4:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    45b6:	4642      	mov	r2, r8
    45b8:	0917      	lsrs	r7, r2, #4
    45ba:	4457      	add	r7, sl
    45bc:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    45be:	42bb      	cmp	r3, r7
    45c0:	d200      	bcs.n	45c4 <chk_mounted+0x170>
    45c2:	e75c      	b.n	447e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    45c4:	1bd8      	subs	r0, r3, r7
    45c6:	4b7b      	ldr	r3, [pc, #492]	; (47b4 <chk_mounted+0x360>)
    45c8:	4798      	blx	r3
    45ca:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    45cc:	200d      	movs	r0, #13
    45ce:	2b00      	cmp	r3, #0
    45d0:	d100      	bne.n	45d4 <chk_mounted+0x180>
    45d2:	e754      	b.n	447e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    45d4:	4a78      	ldr	r2, [pc, #480]	; (47b8 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    45d6:	429a      	cmp	r2, r3
    45d8:	4192      	sbcs	r2, r2
    45da:	4252      	negs	r2, r2
    45dc:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    45de:	4977      	ldr	r1, [pc, #476]	; (47bc <chk_mounted+0x368>)
    45e0:	428b      	cmp	r3, r1
    45e2:	d848      	bhi.n	4676 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    45e4:	3302      	adds	r3, #2
    45e6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    45e8:	19e7      	adds	r7, r4, r7
    45ea:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    45ec:	4454      	add	r4, sl
    45ee:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    45f0:	200d      	movs	r0, #13
    45f2:	4641      	mov	r1, r8
    45f4:	2900      	cmp	r1, #0
    45f6:	d100      	bne.n	45fa <chk_mounted+0x1a6>
    45f8:	e741      	b.n	447e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    45fa:	444c      	add	r4, r9
    45fc:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    45fe:	2a02      	cmp	r2, #2
    4600:	d12c      	bne.n	465c <chk_mounted+0x208>
    4602:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4604:	496e      	ldr	r1, [pc, #440]	; (47c0 <chk_mounted+0x36c>)
    4606:	468c      	mov	ip, r1
    4608:	4463      	add	r3, ip
    460a:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    460c:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    460e:	429d      	cmp	r5, r3
    4610:	d200      	bcs.n	4614 <chk_mounted+0x1c0>
    4612:	e734      	b.n	447e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    4614:	2301      	movs	r3, #1
    4616:	425b      	negs	r3, r3
    4618:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    461a:	2300      	movs	r3, #0
    461c:	60f3      	str	r3, [r6, #12]
    461e:	e0b6      	b.n	478e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    4620:	33f2      	adds	r3, #242	; 0xf2
    4622:	33ff      	adds	r3, #255	; 0xff
    4624:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4626:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    4628:	2b00      	cmp	r3, #0
    462a:	d100      	bne.n	462e <chk_mounted+0x1da>
    462c:	e727      	b.n	447e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    462e:	23fa      	movs	r3, #250	; 0xfa
    4630:	33ff      	adds	r3, #255	; 0xff
    4632:	5cf4      	ldrb	r4, [r6, r3]
    4634:	0624      	lsls	r4, r4, #24
    4636:	3b01      	subs	r3, #1
    4638:	5cf3      	ldrb	r3, [r6, r3]
    463a:	041b      	lsls	r3, r3, #16
    463c:	431c      	orrs	r4, r3
    463e:	23fb      	movs	r3, #251	; 0xfb
    4640:	005b      	lsls	r3, r3, #1
    4642:	5cf3      	ldrb	r3, [r6, r3]
    4644:	431c      	orrs	r4, r3
    4646:	23f8      	movs	r3, #248	; 0xf8
    4648:	33ff      	adds	r3, #255	; 0xff
    464a:	5cf2      	ldrb	r2, [r6, r3]
    464c:	0212      	lsls	r2, r2, #8
    464e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    4650:	0021      	movs	r1, r4
    4652:	0030      	movs	r0, r6
    4654:	4b56      	ldr	r3, [pc, #344]	; (47b0 <chk_mounted+0x35c>)
    4656:	4798      	blx	r3
    4658:	0003      	movs	r3, r0
    465a:	e746      	b.n	44ea <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    465c:	2103      	movs	r1, #3
    465e:	4359      	muls	r1, r3
    4660:	0849      	lsrs	r1, r1, #1
    4662:	2001      	movs	r0, #1
    4664:	4003      	ands	r3, r0
    4666:	18cb      	adds	r3, r1, r3
    4668:	e7cc      	b.n	4604 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    466a:	200c      	movs	r0, #12
    466c:	e707      	b.n	447e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    466e:	2000      	movs	r0, #0
    4670:	e705      	b.n	447e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    4672:	2001      	movs	r0, #1
    4674:	e703      	b.n	447e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    4676:	3302      	adds	r3, #2
    4678:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    467a:	19e7      	adds	r7, r4, r7
    467c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    467e:	4652      	mov	r2, sl
    4680:	18a2      	adds	r2, r4, r2
    4682:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    4684:	200d      	movs	r0, #13
    4686:	4642      	mov	r2, r8
    4688:	2a00      	cmp	r2, #0
    468a:	d000      	beq.n	468e <chk_mounted+0x23a>
    468c:	e6f7      	b.n	447e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    468e:	225f      	movs	r2, #95	; 0x5f
    4690:	5cb2      	ldrb	r2, [r6, r2]
    4692:	0612      	lsls	r2, r2, #24
    4694:	215e      	movs	r1, #94	; 0x5e
    4696:	5c71      	ldrb	r1, [r6, r1]
    4698:	0409      	lsls	r1, r1, #16
    469a:	430a      	orrs	r2, r1
    469c:	215c      	movs	r1, #92	; 0x5c
    469e:	5c71      	ldrb	r1, [r6, r1]
    46a0:	430a      	orrs	r2, r1
    46a2:	215d      	movs	r1, #93	; 0x5d
    46a4:	5c71      	ldrb	r1, [r6, r1]
    46a6:	0209      	lsls	r1, r1, #8
    46a8:	430a      	orrs	r2, r1
    46aa:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    46ac:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    46ae:	4a44      	ldr	r2, [pc, #272]	; (47c0 <chk_mounted+0x36c>)
    46b0:	4694      	mov	ip, r2
    46b2:	4463      	add	r3, ip
    46b4:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    46b6:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    46b8:	429d      	cmp	r5, r3
    46ba:	d200      	bcs.n	46be <chk_mounted+0x26a>
    46bc:	e6df      	b.n	447e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    46be:	2301      	movs	r3, #1
    46c0:	425b      	negs	r3, r3
    46c2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    46c4:	2300      	movs	r3, #0
    46c6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    46c8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    46ca:	3361      	adds	r3, #97	; 0x61
    46cc:	5cf3      	ldrb	r3, [r6, r3]
    46ce:	021b      	lsls	r3, r3, #8
    46d0:	2260      	movs	r2, #96	; 0x60
    46d2:	5cb2      	ldrb	r2, [r6, r2]
    46d4:	431a      	orrs	r2, r3
    46d6:	1912      	adds	r2, r2, r4
    46d8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    46da:	0031      	movs	r1, r6
    46dc:	3130      	adds	r1, #48	; 0x30
    46de:	7870      	ldrb	r0, [r6, #1]
    46e0:	2301      	movs	r3, #1
    46e2:	4c38      	ldr	r4, [pc, #224]	; (47c4 <chk_mounted+0x370>)
    46e4:	47a0      	blx	r4
    46e6:	2203      	movs	r2, #3
    46e8:	2800      	cmp	r0, #0
    46ea:	d150      	bne.n	478e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    46ec:	4b36      	ldr	r3, [pc, #216]	; (47c8 <chk_mounted+0x374>)
    46ee:	5cf2      	ldrb	r2, [r6, r3]
    46f0:	0212      	lsls	r2, r2, #8
    46f2:	4b36      	ldr	r3, [pc, #216]	; (47cc <chk_mounted+0x378>)
    46f4:	5cf3      	ldrb	r3, [r6, r3]
    46f6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    46f8:	4935      	ldr	r1, [pc, #212]	; (47d0 <chk_mounted+0x37c>)
    46fa:	b21b      	sxth	r3, r3
    46fc:	2203      	movs	r2, #3
    46fe:	428b      	cmp	r3, r1
    4700:	d145      	bne.n	478e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4702:	2333      	movs	r3, #51	; 0x33
    4704:	5cf3      	ldrb	r3, [r6, r3]
    4706:	061b      	lsls	r3, r3, #24
    4708:	322f      	adds	r2, #47	; 0x2f
    470a:	5cb2      	ldrb	r2, [r6, r2]
    470c:	0412      	lsls	r2, r2, #16
    470e:	4313      	orrs	r3, r2
    4710:	2230      	movs	r2, #48	; 0x30
    4712:	5cb2      	ldrb	r2, [r6, r2]
    4714:	4313      	orrs	r3, r2
    4716:	2231      	movs	r2, #49	; 0x31
    4718:	5cb2      	ldrb	r2, [r6, r2]
    471a:	0212      	lsls	r2, r2, #8
    471c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    471e:	492d      	ldr	r1, [pc, #180]	; (47d4 <chk_mounted+0x380>)
    4720:	2203      	movs	r2, #3
    4722:	428b      	cmp	r3, r1
    4724:	d133      	bne.n	478e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    4726:	4b2c      	ldr	r3, [pc, #176]	; (47d8 <chk_mounted+0x384>)
    4728:	5cf3      	ldrb	r3, [r6, r3]
    472a:	061b      	lsls	r3, r3, #24
    472c:	4a2b      	ldr	r2, [pc, #172]	; (47dc <chk_mounted+0x388>)
    472e:	5cb2      	ldrb	r2, [r6, r2]
    4730:	0412      	lsls	r2, r2, #16
    4732:	4313      	orrs	r3, r2
    4734:	2285      	movs	r2, #133	; 0x85
    4736:	0092      	lsls	r2, r2, #2
    4738:	5cb2      	ldrb	r2, [r6, r2]
    473a:	4313      	orrs	r3, r2
    473c:	4a28      	ldr	r2, [pc, #160]	; (47e0 <chk_mounted+0x38c>)
    473e:	5cb2      	ldrb	r2, [r6, r2]
    4740:	0212      	lsls	r2, r2, #8
    4742:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4744:	4927      	ldr	r1, [pc, #156]	; (47e4 <chk_mounted+0x390>)
    4746:	2203      	movs	r2, #3
    4748:	428b      	cmp	r3, r1
    474a:	d120      	bne.n	478e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    474c:	4b26      	ldr	r3, [pc, #152]	; (47e8 <chk_mounted+0x394>)
    474e:	5cf3      	ldrb	r3, [r6, r3]
    4750:	061b      	lsls	r3, r3, #24
    4752:	4a26      	ldr	r2, [pc, #152]	; (47ec <chk_mounted+0x398>)
    4754:	5cb2      	ldrb	r2, [r6, r2]
    4756:	0412      	lsls	r2, r2, #16
    4758:	4313      	orrs	r3, r2
    475a:	2287      	movs	r2, #135	; 0x87
    475c:	0092      	lsls	r2, r2, #2
    475e:	5cb2      	ldrb	r2, [r6, r2]
    4760:	4313      	orrs	r3, r2
    4762:	4a23      	ldr	r2, [pc, #140]	; (47f0 <chk_mounted+0x39c>)
    4764:	5cb2      	ldrb	r2, [r6, r2]
    4766:	0212      	lsls	r2, r2, #8
    4768:	4313      	orrs	r3, r2
    476a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    476c:	4b21      	ldr	r3, [pc, #132]	; (47f4 <chk_mounted+0x3a0>)
    476e:	5cf3      	ldrb	r3, [r6, r3]
    4770:	061b      	lsls	r3, r3, #24
    4772:	4a21      	ldr	r2, [pc, #132]	; (47f8 <chk_mounted+0x3a4>)
    4774:	5cb2      	ldrb	r2, [r6, r2]
    4776:	0412      	lsls	r2, r2, #16
    4778:	4313      	orrs	r3, r2
    477a:	2286      	movs	r2, #134	; 0x86
    477c:	0092      	lsls	r2, r2, #2
    477e:	5cb2      	ldrb	r2, [r6, r2]
    4780:	4313      	orrs	r3, r2
    4782:	4a1e      	ldr	r2, [pc, #120]	; (47fc <chk_mounted+0x3a8>)
    4784:	5cb2      	ldrb	r2, [r6, r2]
    4786:	0212      	lsls	r2, r2, #8
    4788:	4313      	orrs	r3, r2
    478a:	6133      	str	r3, [r6, #16]
    478c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    478e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    4790:	4a1b      	ldr	r2, [pc, #108]	; (4800 <chk_mounted+0x3ac>)
    4792:	8813      	ldrh	r3, [r2, #0]
    4794:	3301      	adds	r3, #1
    4796:	b29b      	uxth	r3, r3
    4798:	8013      	strh	r3, [r2, #0]
    479a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    479c:	2000      	movs	r0, #0
    479e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    47a0:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    47a2:	e66c      	b.n	447e <chk_mounted+0x2a>
    47a4:	200002bc 	.word	0x200002bc
    47a8:	00004145 	.word	0x00004145
    47ac:	000040a9 	.word	0x000040a9
    47b0:	000043b1 	.word	0x000043b1
    47b4:	00008d55 	.word	0x00008d55
    47b8:	00000ff5 	.word	0x00000ff5
    47bc:	0000fff5 	.word	0x0000fff5
    47c0:	000001ff 	.word	0x000001ff
    47c4:	00004161 	.word	0x00004161
    47c8:	0000022f 	.word	0x0000022f
    47cc:	0000022e 	.word	0x0000022e
    47d0:	ffffaa55 	.word	0xffffaa55
    47d4:	41615252 	.word	0x41615252
    47d8:	00000217 	.word	0x00000217
    47dc:	00000216 	.word	0x00000216
    47e0:	00000215 	.word	0x00000215
    47e4:	61417272 	.word	0x61417272
    47e8:	0000021f 	.word	0x0000021f
    47ec:	0000021e 	.word	0x0000021e
    47f0:	0000021d 	.word	0x0000021d
    47f4:	0000021b 	.word	0x0000021b
    47f8:	0000021a 	.word	0x0000021a
    47fc:	00000219 	.word	0x00000219
    4800:	200002cc 	.word	0x200002cc

00004804 <move_window>:
{
    4804:	b5f0      	push	{r4, r5, r6, r7, lr}
    4806:	46ce      	mov	lr, r9
    4808:	b500      	push	{lr}
    480a:	b082      	sub	sp, #8
    480c:	0004      	movs	r4, r0
    480e:	000f      	movs	r7, r1
	wsect = fs->winsect;
    4810:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    4812:	428d      	cmp	r5, r1
    4814:	d03f      	beq.n	4896 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4816:	7903      	ldrb	r3, [r0, #4]
    4818:	2b00      	cmp	r3, #0
    481a:	d107      	bne.n	482c <move_window+0x28>
	return FR_OK;
    481c:	2300      	movs	r3, #0
		if (sector) {
    481e:	2f00      	cmp	r7, #0
    4820:	d12c      	bne.n	487c <move_window+0x78>
}
    4822:	0018      	movs	r0, r3
    4824:	b002      	add	sp, #8
    4826:	bc04      	pop	{r2}
    4828:	4691      	mov	r9, r2
    482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    482c:	2330      	movs	r3, #48	; 0x30
    482e:	469c      	mov	ip, r3
    4830:	4484      	add	ip, r0
    4832:	4663      	mov	r3, ip
    4834:	4661      	mov	r1, ip
    4836:	9301      	str	r3, [sp, #4]
    4838:	7840      	ldrb	r0, [r0, #1]
    483a:	2301      	movs	r3, #1
    483c:	002a      	movs	r2, r5
    483e:	4e17      	ldr	r6, [pc, #92]	; (489c <move_window+0x98>)
    4840:	47b0      	blx	r6
				return FR_DISK_ERR;
    4842:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4844:	2800      	cmp	r0, #0
    4846:	d1ec      	bne.n	4822 <move_window+0x1e>
			fs->wflag = 0;
    4848:	2300      	movs	r3, #0
    484a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    484c:	6a23      	ldr	r3, [r4, #32]
    484e:	69e2      	ldr	r2, [r4, #28]
    4850:	4694      	mov	ip, r2
    4852:	4463      	add	r3, ip
    4854:	429d      	cmp	r5, r3
    4856:	d2e1      	bcs.n	481c <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4858:	78e6      	ldrb	r6, [r4, #3]
    485a:	2e01      	cmp	r6, #1
    485c:	d9de      	bls.n	481c <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    485e:	4b0f      	ldr	r3, [pc, #60]	; (489c <move_window+0x98>)
    4860:	4699      	mov	r9, r3
					wsect += fs->fsize;
    4862:	69e3      	ldr	r3, [r4, #28]
    4864:	469c      	mov	ip, r3
    4866:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    4868:	7860      	ldrb	r0, [r4, #1]
    486a:	2301      	movs	r3, #1
    486c:	002a      	movs	r2, r5
    486e:	9901      	ldr	r1, [sp, #4]
    4870:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4872:	3e01      	subs	r6, #1
    4874:	b2f6      	uxtb	r6, r6
    4876:	2e01      	cmp	r6, #1
    4878:	d1f3      	bne.n	4862 <move_window+0x5e>
    487a:	e7cf      	b.n	481c <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    487c:	0021      	movs	r1, r4
    487e:	3130      	adds	r1, #48	; 0x30
    4880:	7860      	ldrb	r0, [r4, #1]
    4882:	3301      	adds	r3, #1
    4884:	003a      	movs	r2, r7
    4886:	4d06      	ldr	r5, [pc, #24]	; (48a0 <move_window+0x9c>)
    4888:	47a8      	blx	r5
				return FR_DISK_ERR;
    488a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    488c:	2800      	cmp	r0, #0
    488e:	d1c8      	bne.n	4822 <move_window+0x1e>
			fs->winsect = sector;
    4890:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    4892:	2300      	movs	r3, #0
    4894:	e7c5      	b.n	4822 <move_window+0x1e>
    4896:	2300      	movs	r3, #0
    4898:	e7c3      	b.n	4822 <move_window+0x1e>
    489a:	46c0      	nop			; (mov r8, r8)
    489c:	000041e5 	.word	0x000041e5
    48a0:	00004161 	.word	0x00004161

000048a4 <get_fat>:
{
    48a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48a6:	0005      	movs	r5, r0
    48a8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    48aa:	2901      	cmp	r1, #1
    48ac:	d974      	bls.n	4998 <get_fat+0xf4>
		return 1;
    48ae:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    48b0:	69ab      	ldr	r3, [r5, #24]
    48b2:	4299      	cmp	r1, r3
    48b4:	d271      	bcs.n	499a <get_fat+0xf6>
	switch (fs->fs_type) {
    48b6:	782b      	ldrb	r3, [r5, #0]
    48b8:	2b02      	cmp	r3, #2
    48ba:	d034      	beq.n	4926 <get_fat+0x82>
    48bc:	2b03      	cmp	r3, #3
    48be:	d049      	beq.n	4954 <get_fat+0xb0>
    48c0:	2b01      	cmp	r3, #1
    48c2:	d002      	beq.n	48ca <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    48c4:	2001      	movs	r0, #1
    48c6:	4240      	negs	r0, r0
    48c8:	e067      	b.n	499a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    48ca:	084e      	lsrs	r6, r1, #1
    48cc:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    48ce:	0a71      	lsrs	r1, r6, #9
    48d0:	6a2b      	ldr	r3, [r5, #32]
    48d2:	469c      	mov	ip, r3
    48d4:	4461      	add	r1, ip
    48d6:	0028      	movs	r0, r5
    48d8:	4b30      	ldr	r3, [pc, #192]	; (499c <get_fat+0xf8>)
    48da:	4798      	blx	r3
    48dc:	2800      	cmp	r0, #0
    48de:	d002      	beq.n	48e6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    48e0:	2001      	movs	r0, #1
    48e2:	4240      	negs	r0, r0
    48e4:	e059      	b.n	499a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    48e6:	05f3      	lsls	r3, r6, #23
    48e8:	0ddb      	lsrs	r3, r3, #23
    48ea:	18eb      	adds	r3, r5, r3
    48ec:	3330      	adds	r3, #48	; 0x30
    48ee:	781f      	ldrb	r7, [r3, #0]
    48f0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    48f2:	0a71      	lsrs	r1, r6, #9
    48f4:	6a2b      	ldr	r3, [r5, #32]
    48f6:	469c      	mov	ip, r3
    48f8:	4461      	add	r1, ip
    48fa:	0028      	movs	r0, r5
    48fc:	4b27      	ldr	r3, [pc, #156]	; (499c <get_fat+0xf8>)
    48fe:	4798      	blx	r3
    4900:	2800      	cmp	r0, #0
    4902:	d002      	beq.n	490a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4904:	2001      	movs	r0, #1
    4906:	4240      	negs	r0, r0
    4908:	e047      	b.n	499a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    490a:	05f6      	lsls	r6, r6, #23
    490c:	0df6      	lsrs	r6, r6, #23
    490e:	19ad      	adds	r5, r5, r6
    4910:	3530      	adds	r5, #48	; 0x30
    4912:	7828      	ldrb	r0, [r5, #0]
    4914:	0200      	lsls	r0, r0, #8
    4916:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4918:	07e3      	lsls	r3, r4, #31
    491a:	d501      	bpl.n	4920 <get_fat+0x7c>
    491c:	0900      	lsrs	r0, r0, #4
    491e:	e03c      	b.n	499a <get_fat+0xf6>
    4920:	0500      	lsls	r0, r0, #20
    4922:	0d00      	lsrs	r0, r0, #20
    4924:	e039      	b.n	499a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4926:	0a09      	lsrs	r1, r1, #8
    4928:	6a2b      	ldr	r3, [r5, #32]
    492a:	469c      	mov	ip, r3
    492c:	4461      	add	r1, ip
    492e:	0028      	movs	r0, r5
    4930:	4b1a      	ldr	r3, [pc, #104]	; (499c <get_fat+0xf8>)
    4932:	4798      	blx	r3
    4934:	2800      	cmp	r0, #0
    4936:	d002      	beq.n	493e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4938:	2001      	movs	r0, #1
    493a:	4240      	negs	r0, r0
    493c:	e02d      	b.n	499a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    493e:	0064      	lsls	r4, r4, #1
    4940:	23ff      	movs	r3, #255	; 0xff
    4942:	005b      	lsls	r3, r3, #1
    4944:	401c      	ands	r4, r3
		return LD_WORD(p);
    4946:	192d      	adds	r5, r5, r4
    4948:	3530      	adds	r5, #48	; 0x30
    494a:	786b      	ldrb	r3, [r5, #1]
    494c:	021b      	lsls	r3, r3, #8
    494e:	7828      	ldrb	r0, [r5, #0]
    4950:	4318      	orrs	r0, r3
    4952:	e022      	b.n	499a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4954:	09c9      	lsrs	r1, r1, #7
    4956:	6a2b      	ldr	r3, [r5, #32]
    4958:	469c      	mov	ip, r3
    495a:	4461      	add	r1, ip
    495c:	0028      	movs	r0, r5
    495e:	4b0f      	ldr	r3, [pc, #60]	; (499c <get_fat+0xf8>)
    4960:	4798      	blx	r3
    4962:	2800      	cmp	r0, #0
    4964:	d002      	beq.n	496c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4966:	2001      	movs	r0, #1
    4968:	4240      	negs	r0, r0
    496a:	e016      	b.n	499a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    496c:	00a4      	lsls	r4, r4, #2
    496e:	23fe      	movs	r3, #254	; 0xfe
    4970:	005b      	lsls	r3, r3, #1
    4972:	401c      	ands	r4, r3
    4974:	0023      	movs	r3, r4
    4976:	3330      	adds	r3, #48	; 0x30
    4978:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    497a:	78d8      	ldrb	r0, [r3, #3]
    497c:	0600      	lsls	r0, r0, #24
    497e:	789a      	ldrb	r2, [r3, #2]
    4980:	0412      	lsls	r2, r2, #16
    4982:	4310      	orrs	r0, r2
    4984:	192c      	adds	r4, r5, r4
    4986:	3430      	adds	r4, #48	; 0x30
    4988:	7822      	ldrb	r2, [r4, #0]
    498a:	4310      	orrs	r0, r2
    498c:	785b      	ldrb	r3, [r3, #1]
    498e:	021b      	lsls	r3, r3, #8
    4990:	4318      	orrs	r0, r3
    4992:	0100      	lsls	r0, r0, #4
    4994:	0900      	lsrs	r0, r0, #4
    4996:	e000      	b.n	499a <get_fat+0xf6>
		return 1;
    4998:	2001      	movs	r0, #1
}
    499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    499c:	00004805 	.word	0x00004805

000049a0 <dir_sdi>:
{
    49a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49a2:	0004      	movs	r4, r0
    49a4:	000d      	movs	r5, r1
	dj->index = idx;
    49a6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    49a8:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    49aa:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    49ac:	2901      	cmp	r1, #1
    49ae:	d003      	beq.n	49b8 <dir_sdi+0x18>
    49b0:	6823      	ldr	r3, [r4, #0]
    49b2:	699a      	ldr	r2, [r3, #24]
    49b4:	4291      	cmp	r1, r2
    49b6:	d300      	bcc.n	49ba <dir_sdi+0x1a>
}
    49b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    49ba:	2900      	cmp	r1, #0
    49bc:	d119      	bne.n	49f2 <dir_sdi+0x52>
    49be:	781a      	ldrb	r2, [r3, #0]
    49c0:	2a03      	cmp	r2, #3
    49c2:	d013      	beq.n	49ec <dir_sdi+0x4c>
		dj->clust = clst;
    49c4:	2200      	movs	r2, #0
    49c6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    49c8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    49ca:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    49cc:	42aa      	cmp	r2, r5
    49ce:	d9f3      	bls.n	49b8 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    49d0:	092a      	lsrs	r2, r5, #4
    49d2:	b292      	uxth	r2, r2
    49d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49d6:	189b      	adds	r3, r3, r2
    49d8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    49da:	6823      	ldr	r3, [r4, #0]
    49dc:	3330      	adds	r3, #48	; 0x30
    49de:	220f      	movs	r2, #15
    49e0:	4015      	ands	r5, r2
    49e2:	016d      	lsls	r5, r5, #5
    49e4:	195d      	adds	r5, r3, r5
    49e6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    49e8:	2000      	movs	r0, #0
    49ea:	e7e5      	b.n	49b8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    49ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    49ee:	2900      	cmp	r1, #0
    49f0:	d0e8      	beq.n	49c4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    49f2:	789e      	ldrb	r6, [r3, #2]
    49f4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    49f6:	42b5      	cmp	r5, r6
    49f8:	d313      	bcc.n	4a22 <dir_sdi+0x82>
    49fa:	1bad      	subs	r5, r5, r6
    49fc:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    49fe:	4f10      	ldr	r7, [pc, #64]	; (4a40 <dir_sdi+0xa0>)
    4a00:	e000      	b.n	4a04 <dir_sdi+0x64>
    4a02:	001d      	movs	r5, r3
    4a04:	6820      	ldr	r0, [r4, #0]
    4a06:	47b8      	blx	r7
    4a08:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4a0a:	1c43      	adds	r3, r0, #1
    4a0c:	d012      	beq.n	4a34 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4a0e:	2801      	cmp	r0, #1
    4a10:	d912      	bls.n	4a38 <dir_sdi+0x98>
    4a12:	6823      	ldr	r3, [r4, #0]
    4a14:	699b      	ldr	r3, [r3, #24]
    4a16:	4298      	cmp	r0, r3
    4a18:	d210      	bcs.n	4a3c <dir_sdi+0x9c>
    4a1a:	1bab      	subs	r3, r5, r6
    4a1c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    4a1e:	42b5      	cmp	r5, r6
    4a20:	d2ef      	bcs.n	4a02 <dir_sdi+0x62>
		dj->clust = clst;
    4a22:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4a24:	6820      	ldr	r0, [r4, #0]
    4a26:	4b07      	ldr	r3, [pc, #28]	; (4a44 <dir_sdi+0xa4>)
    4a28:	4798      	blx	r3
    4a2a:	092b      	lsrs	r3, r5, #4
    4a2c:	b29b      	uxth	r3, r3
    4a2e:	1818      	adds	r0, r3, r0
    4a30:	6120      	str	r0, [r4, #16]
    4a32:	e7d2      	b.n	49da <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4a34:	2001      	movs	r0, #1
    4a36:	e7bf      	b.n	49b8 <dir_sdi+0x18>
				return FR_INT_ERR;
    4a38:	2002      	movs	r0, #2
    4a3a:	e7bd      	b.n	49b8 <dir_sdi+0x18>
    4a3c:	2002      	movs	r0, #2
    4a3e:	e7bb      	b.n	49b8 <dir_sdi+0x18>
    4a40:	000048a5 	.word	0x000048a5
    4a44:	0000434b 	.word	0x0000434b

00004a48 <put_fat>:
{
    4a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a4a:	46c6      	mov	lr, r8
    4a4c:	b500      	push	{lr}
    4a4e:	0007      	movs	r7, r0
    4a50:	000c      	movs	r4, r1
    4a52:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    4a54:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4a56:	2901      	cmp	r1, #1
    4a58:	d902      	bls.n	4a60 <put_fat+0x18>
    4a5a:	6983      	ldr	r3, [r0, #24]
    4a5c:	4299      	cmp	r1, r3
    4a5e:	d303      	bcc.n	4a68 <put_fat+0x20>
}
    4a60:	0028      	movs	r0, r5
    4a62:	bc04      	pop	{r2}
    4a64:	4690      	mov	r8, r2
    4a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    4a68:	7803      	ldrb	r3, [r0, #0]
    4a6a:	2b02      	cmp	r3, #2
    4a6c:	d053      	beq.n	4b16 <put_fat+0xce>
    4a6e:	2b03      	cmp	r3, #3
    4a70:	d063      	beq.n	4b3a <put_fat+0xf2>
			res = FR_INT_ERR;
    4a72:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    4a74:	2b01      	cmp	r3, #1
    4a76:	d002      	beq.n	4a7e <put_fat+0x36>
		fs->wflag = 1;
    4a78:	2301      	movs	r3, #1
    4a7a:	713b      	strb	r3, [r7, #4]
    4a7c:	e7f0      	b.n	4a60 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    4a7e:	084b      	lsrs	r3, r1, #1
    4a80:	4698      	mov	r8, r3
    4a82:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a84:	4643      	mov	r3, r8
    4a86:	0a59      	lsrs	r1, r3, #9
    4a88:	6a03      	ldr	r3, [r0, #32]
    4a8a:	469c      	mov	ip, r3
    4a8c:	4461      	add	r1, ip
    4a8e:	4b3b      	ldr	r3, [pc, #236]	; (4b7c <put_fat+0x134>)
    4a90:	4798      	blx	r3
    4a92:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4a94:	d1f0      	bne.n	4a78 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    4a96:	4643      	mov	r3, r8
    4a98:	05db      	lsls	r3, r3, #23
    4a9a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4a9c:	07e2      	lsls	r2, r4, #31
    4a9e:	d51f      	bpl.n	4ae0 <put_fat+0x98>
    4aa0:	18fb      	adds	r3, r7, r3
    4aa2:	3330      	adds	r3, #48	; 0x30
    4aa4:	7819      	ldrb	r1, [r3, #0]
    4aa6:	220f      	movs	r2, #15
    4aa8:	400a      	ands	r2, r1
    4aaa:	0131      	lsls	r1, r6, #4
    4aac:	20ff      	movs	r0, #255	; 0xff
    4aae:	0100      	lsls	r0, r0, #4
    4ab0:	4001      	ands	r1, r0
    4ab2:	430a      	orrs	r2, r1
    4ab4:	701a      	strb	r2, [r3, #0]
			bc++;
    4ab6:	4644      	mov	r4, r8
    4ab8:	3401      	adds	r4, #1
			fs->wflag = 1;
    4aba:	2301      	movs	r3, #1
    4abc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4abe:	0a61      	lsrs	r1, r4, #9
    4ac0:	6a3b      	ldr	r3, [r7, #32]
    4ac2:	469c      	mov	ip, r3
    4ac4:	4461      	add	r1, ip
    4ac6:	0038      	movs	r0, r7
    4ac8:	4b2c      	ldr	r3, [pc, #176]	; (4b7c <put_fat+0x134>)
    4aca:	4798      	blx	r3
			if (res != FR_OK) break;
    4acc:	2800      	cmp	r0, #0
    4ace:	d151      	bne.n	4b74 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    4ad0:	05e4      	lsls	r4, r4, #23
    4ad2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4ad4:	0936      	lsrs	r6, r6, #4
    4ad6:	b2f6      	uxtb	r6, r6
    4ad8:	193c      	adds	r4, r7, r4
    4ada:	3430      	adds	r4, #48	; 0x30
    4adc:	7026      	strb	r6, [r4, #0]
			break;
    4ade:	e7cb      	b.n	4a78 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4ae0:	18fb      	adds	r3, r7, r3
    4ae2:	3330      	adds	r3, #48	; 0x30
    4ae4:	701e      	strb	r6, [r3, #0]
			bc++;
    4ae6:	4644      	mov	r4, r8
    4ae8:	3401      	adds	r4, #1
			fs->wflag = 1;
    4aea:	2301      	movs	r3, #1
    4aec:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4aee:	0a61      	lsrs	r1, r4, #9
    4af0:	6a3b      	ldr	r3, [r7, #32]
    4af2:	469c      	mov	ip, r3
    4af4:	4461      	add	r1, ip
    4af6:	0038      	movs	r0, r7
    4af8:	4b20      	ldr	r3, [pc, #128]	; (4b7c <put_fat+0x134>)
    4afa:	4798      	blx	r3
			if (res != FR_OK) break;
    4afc:	2800      	cmp	r0, #0
    4afe:	d13b      	bne.n	4b78 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    4b00:	05e4      	lsls	r4, r4, #23
    4b02:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4b04:	193b      	adds	r3, r7, r4
    4b06:	3330      	adds	r3, #48	; 0x30
    4b08:	781b      	ldrb	r3, [r3, #0]
    4b0a:	220f      	movs	r2, #15
    4b0c:	4393      	bics	r3, r2
    4b0e:	0536      	lsls	r6, r6, #20
    4b10:	0f36      	lsrs	r6, r6, #28
    4b12:	431e      	orrs	r6, r3
    4b14:	e7e0      	b.n	4ad8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4b16:	0a09      	lsrs	r1, r1, #8
    4b18:	6a03      	ldr	r3, [r0, #32]
    4b1a:	469c      	mov	ip, r3
    4b1c:	4461      	add	r1, ip
    4b1e:	4b17      	ldr	r3, [pc, #92]	; (4b7c <put_fat+0x134>)
    4b20:	4798      	blx	r3
    4b22:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4b24:	d1a8      	bne.n	4a78 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4b26:	0063      	lsls	r3, r4, #1
    4b28:	24ff      	movs	r4, #255	; 0xff
    4b2a:	0064      	lsls	r4, r4, #1
    4b2c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    4b2e:	18fb      	adds	r3, r7, r3
    4b30:	3330      	adds	r3, #48	; 0x30
    4b32:	701e      	strb	r6, [r3, #0]
    4b34:	0a36      	lsrs	r6, r6, #8
    4b36:	705e      	strb	r6, [r3, #1]
			break;
    4b38:	e79e      	b.n	4a78 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4b3a:	09c9      	lsrs	r1, r1, #7
    4b3c:	6a03      	ldr	r3, [r0, #32]
    4b3e:	469c      	mov	ip, r3
    4b40:	4461      	add	r1, ip
    4b42:	4b0e      	ldr	r3, [pc, #56]	; (4b7c <put_fat+0x134>)
    4b44:	4798      	blx	r3
    4b46:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4b48:	d196      	bne.n	4a78 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    4b4a:	00a4      	lsls	r4, r4, #2
    4b4c:	23fe      	movs	r3, #254	; 0xfe
    4b4e:	005b      	lsls	r3, r3, #1
    4b50:	401c      	ands	r4, r3
    4b52:	0022      	movs	r2, r4
    4b54:	3230      	adds	r2, #48	; 0x30
    4b56:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4b58:	78d3      	ldrb	r3, [r2, #3]
    4b5a:	193c      	adds	r4, r7, r4
    4b5c:	3430      	adds	r4, #48	; 0x30
    4b5e:	091b      	lsrs	r3, r3, #4
    4b60:	071b      	lsls	r3, r3, #28
    4b62:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4b64:	7026      	strb	r6, [r4, #0]
    4b66:	0a33      	lsrs	r3, r6, #8
    4b68:	7053      	strb	r3, [r2, #1]
    4b6a:	0c33      	lsrs	r3, r6, #16
    4b6c:	7093      	strb	r3, [r2, #2]
    4b6e:	0e36      	lsrs	r6, r6, #24
    4b70:	70d6      	strb	r6, [r2, #3]
			break;
    4b72:	e781      	b.n	4a78 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4b74:	0005      	movs	r5, r0
    4b76:	e77f      	b.n	4a78 <put_fat+0x30>
    4b78:	0005      	movs	r5, r0
    4b7a:	e77d      	b.n	4a78 <put_fat+0x30>
    4b7c:	00004805 	.word	0x00004805

00004b80 <create_chain>:
{
    4b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b82:	46c6      	mov	lr, r8
    4b84:	b500      	push	{lr}
    4b86:	0005      	movs	r5, r0
    4b88:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    4b8a:	2900      	cmp	r1, #0
    4b8c:	d107      	bne.n	4b9e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    4b8e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4b90:	2e00      	cmp	r6, #0
    4b92:	d00d      	beq.n	4bb0 <create_chain+0x30>
    4b94:	6983      	ldr	r3, [r0, #24]
    4b96:	429e      	cmp	r6, r3
    4b98:	d30b      	bcc.n	4bb2 <create_chain+0x32>
    4b9a:	2601      	movs	r6, #1
    4b9c:	e009      	b.n	4bb2 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    4b9e:	4b26      	ldr	r3, [pc, #152]	; (4c38 <create_chain+0xb8>)
    4ba0:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4ba2:	2801      	cmp	r0, #1
    4ba4:	d93d      	bls.n	4c22 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4ba6:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4ba8:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4baa:	4298      	cmp	r0, r3
    4bac:	d201      	bcs.n	4bb2 <create_chain+0x32>
    4bae:	e03d      	b.n	4c2c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4bb0:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4bb2:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4bb4:	4f20      	ldr	r7, [pc, #128]	; (4c38 <create_chain+0xb8>)
    4bb6:	e00a      	b.n	4bce <create_chain+0x4e>
    4bb8:	0021      	movs	r1, r4
    4bba:	0028      	movs	r0, r5
    4bbc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d00d      	beq.n	4bde <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4bc2:	1c43      	adds	r3, r0, #1
    4bc4:	d032      	beq.n	4c2c <create_chain+0xac>
    4bc6:	2801      	cmp	r0, #1
    4bc8:	d030      	beq.n	4c2c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4bca:	42b4      	cmp	r4, r6
    4bcc:	d02d      	beq.n	4c2a <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4bce:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4bd0:	69ab      	ldr	r3, [r5, #24]
    4bd2:	429c      	cmp	r4, r3
    4bd4:	d3f0      	bcc.n	4bb8 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4bd6:	2e01      	cmp	r6, #1
    4bd8:	d925      	bls.n	4c26 <create_chain+0xa6>
			ncl = 2;
    4bda:	2402      	movs	r4, #2
    4bdc:	e7ec      	b.n	4bb8 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4bde:	4a17      	ldr	r2, [pc, #92]	; (4c3c <create_chain+0xbc>)
    4be0:	0021      	movs	r1, r4
    4be2:	0028      	movs	r0, r5
    4be4:	4b16      	ldr	r3, [pc, #88]	; (4c40 <create_chain+0xc0>)
    4be6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4be8:	2800      	cmp	r0, #0
    4bea:	d113      	bne.n	4c14 <create_chain+0x94>
    4bec:	4643      	mov	r3, r8
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d109      	bne.n	4c06 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    4bf2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4bf4:	692b      	ldr	r3, [r5, #16]
    4bf6:	1c5a      	adds	r2, r3, #1
    4bf8:	d01b      	beq.n	4c32 <create_chain+0xb2>
			fs->free_clust--;
    4bfa:	3b01      	subs	r3, #1
    4bfc:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4bfe:	2301      	movs	r3, #1
    4c00:	716b      	strb	r3, [r5, #5]
    4c02:	0020      	movs	r0, r4
    4c04:	e012      	b.n	4c2c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4c06:	0022      	movs	r2, r4
    4c08:	4641      	mov	r1, r8
    4c0a:	0028      	movs	r0, r5
    4c0c:	4b0c      	ldr	r3, [pc, #48]	; (4c40 <create_chain+0xc0>)
    4c0e:	4798      	blx	r3
	if (res == FR_OK) {
    4c10:	2800      	cmp	r0, #0
    4c12:	d0ee      	beq.n	4bf2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4c14:	3801      	subs	r0, #1
    4c16:	4242      	negs	r2, r0
    4c18:	4142      	adcs	r2, r0
    4c1a:	4250      	negs	r0, r2
    4c1c:	2301      	movs	r3, #1
    4c1e:	4318      	orrs	r0, r3
    4c20:	e004      	b.n	4c2c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4c22:	2001      	movs	r0, #1
    4c24:	e002      	b.n	4c2c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4c26:	2000      	movs	r0, #0
    4c28:	e000      	b.n	4c2c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4c2a:	2000      	movs	r0, #0
}
    4c2c:	bc04      	pop	{r2}
    4c2e:	4690      	mov	r8, r2
    4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c32:	0020      	movs	r0, r4
    4c34:	e7fa      	b.n	4c2c <create_chain+0xac>
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	000048a5 	.word	0x000048a5
    4c3c:	0fffffff 	.word	0x0fffffff
    4c40:	00004a49 	.word	0x00004a49

00004c44 <remove_chain>:
{
    4c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c46:	46ce      	mov	lr, r9
    4c48:	4647      	mov	r7, r8
    4c4a:	b580      	push	{r7, lr}
    4c4c:	0004      	movs	r4, r0
    4c4e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4c50:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4c52:	2901      	cmp	r1, #1
    4c54:	d902      	bls.n	4c5c <remove_chain+0x18>
    4c56:	69a3      	ldr	r3, [r4, #24]
    4c58:	4299      	cmp	r1, r3
    4c5a:	d303      	bcc.n	4c64 <remove_chain+0x20>
}
    4c5c:	bc0c      	pop	{r2, r3}
    4c5e:	4690      	mov	r8, r2
    4c60:	4699      	mov	r9, r3
    4c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4c64:	4f13      	ldr	r7, [pc, #76]	; (4cb4 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4c66:	4b14      	ldr	r3, [pc, #80]	; (4cb8 <remove_chain+0x74>)
    4c68:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    4c6a:	2301      	movs	r3, #1
    4c6c:	4699      	mov	r9, r3
    4c6e:	e003      	b.n	4c78 <remove_chain+0x34>
    4c70:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4c72:	69a3      	ldr	r3, [r4, #24]
    4c74:	42b3      	cmp	r3, r6
    4c76:	d9f1      	bls.n	4c5c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4c78:	0029      	movs	r1, r5
    4c7a:	0020      	movs	r0, r4
    4c7c:	47b8      	blx	r7
    4c7e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4c80:	d011      	beq.n	4ca6 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4c82:	2801      	cmp	r0, #1
    4c84:	d011      	beq.n	4caa <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4c86:	1c43      	adds	r3, r0, #1
    4c88:	d011      	beq.n	4cae <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4c8a:	2200      	movs	r2, #0
    4c8c:	0029      	movs	r1, r5
    4c8e:	0020      	movs	r0, r4
    4c90:	47c0      	blx	r8
			if (res != FR_OK) break;
    4c92:	2800      	cmp	r0, #0
    4c94:	d1e2      	bne.n	4c5c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4c96:	6923      	ldr	r3, [r4, #16]
    4c98:	1c5a      	adds	r2, r3, #1
    4c9a:	d0e9      	beq.n	4c70 <remove_chain+0x2c>
				fs->free_clust++;
    4c9c:	3301      	adds	r3, #1
    4c9e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4ca0:	464b      	mov	r3, r9
    4ca2:	7163      	strb	r3, [r4, #5]
    4ca4:	e7e4      	b.n	4c70 <remove_chain+0x2c>
    4ca6:	2000      	movs	r0, #0
    4ca8:	e7d8      	b.n	4c5c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4caa:	2002      	movs	r0, #2
    4cac:	e7d6      	b.n	4c5c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4cae:	2001      	movs	r0, #1
    4cb0:	e7d4      	b.n	4c5c <remove_chain+0x18>
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	000048a5 	.word	0x000048a5
    4cb8:	00004a49 	.word	0x00004a49

00004cbc <dir_next>:
{
    4cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cbe:	46d6      	mov	lr, sl
    4cc0:	4647      	mov	r7, r8
    4cc2:	b580      	push	{r7, lr}
    4cc4:	0006      	movs	r6, r0
    4cc6:	000d      	movs	r5, r1
	i = dj->index + 1;
    4cc8:	88c4      	ldrh	r4, [r0, #6]
    4cca:	3401      	adds	r4, #1
    4ccc:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4cce:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4cd0:	2c00      	cmp	r4, #0
    4cd2:	d103      	bne.n	4cdc <dir_next+0x20>
}
    4cd4:	bc0c      	pop	{r2, r3}
    4cd6:	4690      	mov	r8, r2
    4cd8:	469a      	mov	sl, r3
    4cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4cdc:	6933      	ldr	r3, [r6, #16]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d0f8      	beq.n	4cd4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4ce2:	270f      	movs	r7, #15
    4ce4:	4027      	ands	r7, r4
    4ce6:	d10f      	bne.n	4d08 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4ce8:	3301      	adds	r3, #1
    4cea:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4cec:	68f1      	ldr	r1, [r6, #12]
    4cee:	2900      	cmp	r1, #0
    4cf0:	d104      	bne.n	4cfc <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4cf2:	6833      	ldr	r3, [r6, #0]
    4cf4:	891b      	ldrh	r3, [r3, #8]
    4cf6:	42a3      	cmp	r3, r4
    4cf8:	d9ec      	bls.n	4cd4 <dir_next+0x18>
    4cfa:	e005      	b.n	4d08 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4cfc:	6830      	ldr	r0, [r6, #0]
    4cfe:	7883      	ldrb	r3, [r0, #2]
    4d00:	3b01      	subs	r3, #1
    4d02:	0922      	lsrs	r2, r4, #4
    4d04:	421a      	tst	r2, r3
    4d06:	d007      	beq.n	4d18 <dir_next+0x5c>
	dj->index = i;
    4d08:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4d0a:	6833      	ldr	r3, [r6, #0]
    4d0c:	3330      	adds	r3, #48	; 0x30
    4d0e:	017f      	lsls	r7, r7, #5
    4d10:	19df      	adds	r7, r3, r7
    4d12:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4d14:	2000      	movs	r0, #0
    4d16:	e7dd      	b.n	4cd4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4d18:	4b2c      	ldr	r3, [pc, #176]	; (4dcc <dir_next+0x110>)
    4d1a:	4798      	blx	r3
    4d1c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    4d1e:	2002      	movs	r0, #2
    4d20:	4643      	mov	r3, r8
    4d22:	2b01      	cmp	r3, #1
    4d24:	d9d6      	bls.n	4cd4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4d26:	3301      	adds	r3, #1
    4d28:	d04b      	beq.n	4dc2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4d2a:	6833      	ldr	r3, [r6, #0]
    4d2c:	699a      	ldr	r2, [r3, #24]
    4d2e:	4590      	cmp	r8, r2
    4d30:	d33f      	bcc.n	4db2 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4d32:	3002      	adds	r0, #2
    4d34:	2d00      	cmp	r5, #0
    4d36:	d0cd      	beq.n	4cd4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4d38:	68f1      	ldr	r1, [r6, #12]
    4d3a:	0018      	movs	r0, r3
    4d3c:	4b24      	ldr	r3, [pc, #144]	; (4dd0 <dir_next+0x114>)
    4d3e:	4798      	blx	r3
    4d40:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4d42:	2007      	movs	r0, #7
    4d44:	4643      	mov	r3, r8
    4d46:	2b00      	cmp	r3, #0
    4d48:	d0c4      	beq.n	4cd4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4d4a:	3805      	subs	r0, #5
    4d4c:	2b01      	cmp	r3, #1
    4d4e:	d0c1      	beq.n	4cd4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4d50:	3801      	subs	r0, #1
    4d52:	3301      	adds	r3, #1
    4d54:	d0be      	beq.n	4cd4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4d56:	2100      	movs	r1, #0
    4d58:	6830      	ldr	r0, [r6, #0]
    4d5a:	4b1e      	ldr	r3, [pc, #120]	; (4dd4 <dir_next+0x118>)
    4d5c:	4798      	blx	r3
    4d5e:	0003      	movs	r3, r0
    4d60:	2001      	movs	r0, #1
    4d62:	2b00      	cmp	r3, #0
    4d64:	d1b6      	bne.n	4cd4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4d66:	6830      	ldr	r0, [r6, #0]
    4d68:	3030      	adds	r0, #48	; 0x30
    4d6a:	2280      	movs	r2, #128	; 0x80
    4d6c:	0092      	lsls	r2, r2, #2
    4d6e:	2100      	movs	r1, #0
    4d70:	4b19      	ldr	r3, [pc, #100]	; (4dd8 <dir_next+0x11c>)
    4d72:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4d74:	6835      	ldr	r5, [r6, #0]
    4d76:	4641      	mov	r1, r8
    4d78:	0028      	movs	r0, r5
    4d7a:	4b18      	ldr	r3, [pc, #96]	; (4ddc <dir_next+0x120>)
    4d7c:	4798      	blx	r3
    4d7e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4d80:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4d82:	2301      	movs	r3, #1
    4d84:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4d86:	6833      	ldr	r3, [r6, #0]
    4d88:	789a      	ldrb	r2, [r3, #2]
    4d8a:	42aa      	cmp	r2, r5
    4d8c:	d90e      	bls.n	4dac <dir_next+0xf0>
						dj->fs->wflag = 1;
    4d8e:	4652      	mov	r2, sl
    4d90:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4d92:	2100      	movs	r1, #0
    4d94:	6830      	ldr	r0, [r6, #0]
    4d96:	4b0f      	ldr	r3, [pc, #60]	; (4dd4 <dir_next+0x118>)
    4d98:	4798      	blx	r3
    4d9a:	2800      	cmp	r0, #0
    4d9c:	d113      	bne.n	4dc6 <dir_next+0x10a>
						dj->fs->winsect++;
    4d9e:	6832      	ldr	r2, [r6, #0]
    4da0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4da2:	3301      	adds	r3, #1
    4da4:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4da6:	3501      	adds	r5, #1
    4da8:	b2ed      	uxtb	r5, r5
    4daa:	e7ec      	b.n	4d86 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dae:	1b52      	subs	r2, r2, r5
    4db0:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4db2:	4643      	mov	r3, r8
    4db4:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4db6:	4641      	mov	r1, r8
    4db8:	6830      	ldr	r0, [r6, #0]
    4dba:	4b08      	ldr	r3, [pc, #32]	; (4ddc <dir_next+0x120>)
    4dbc:	4798      	blx	r3
    4dbe:	6130      	str	r0, [r6, #16]
    4dc0:	e7a2      	b.n	4d08 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4dc2:	2001      	movs	r0, #1
    4dc4:	e786      	b.n	4cd4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4dc6:	2001      	movs	r0, #1
    4dc8:	e784      	b.n	4cd4 <dir_next+0x18>
    4dca:	46c0      	nop			; (mov r8, r8)
    4dcc:	000048a5 	.word	0x000048a5
    4dd0:	00004b81 	.word	0x00004b81
    4dd4:	00004805 	.word	0x00004805
    4dd8:	00004339 	.word	0x00004339
    4ddc:	0000434b 	.word	0x0000434b

00004de0 <dir_find>:
{
    4de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4de2:	46de      	mov	lr, fp
    4de4:	4657      	mov	r7, sl
    4de6:	464e      	mov	r6, r9
    4de8:	4645      	mov	r5, r8
    4dea:	b5e0      	push	{r5, r6, r7, lr}
    4dec:	b083      	sub	sp, #12
    4dee:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4df0:	2100      	movs	r1, #0
    4df2:	4b5a      	ldr	r3, [pc, #360]	; (4f5c <dir_find+0x17c>)
    4df4:	4798      	blx	r3
    4df6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4df8:	d000      	beq.n	4dfc <dir_find+0x1c>
    4dfa:	e09e      	b.n	4f3a <dir_find+0x15a>
    4dfc:	23ff      	movs	r3, #255	; 0xff
    4dfe:	4699      	mov	r9, r3
    4e00:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4e02:	4b57      	ldr	r3, [pc, #348]	; (4f60 <dir_find+0x180>)
    4e04:	469b      	mov	fp, r3
    4e06:	e01b      	b.n	4e40 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4e08:	2b0f      	cmp	r3, #15
    4e0a:	d030      	beq.n	4e6e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4e0c:	4653      	mov	r3, sl
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d105      	bne.n	4e1e <dir_find+0x3e>
    4e12:	0020      	movs	r0, r4
    4e14:	4b53      	ldr	r3, [pc, #332]	; (4f64 <dir_find+0x184>)
    4e16:	4798      	blx	r3
    4e18:	4581      	cmp	r9, r0
    4e1a:	d100      	bne.n	4e1e <dir_find+0x3e>
    4e1c:	e08d      	b.n	4f3a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4e1e:	2301      	movs	r3, #1
    4e20:	425b      	negs	r3, r3
    4e22:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4e24:	69a8      	ldr	r0, [r5, #24]
    4e26:	7ac3      	ldrb	r3, [r0, #11]
    4e28:	07db      	lsls	r3, r3, #31
    4e2a:	d400      	bmi.n	4e2e <dir_find+0x4e>
    4e2c:	e07d      	b.n	4f2a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4e2e:	23ff      	movs	r3, #255	; 0xff
    4e30:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4e32:	2100      	movs	r1, #0
    4e34:	0028      	movs	r0, r5
    4e36:	4b4c      	ldr	r3, [pc, #304]	; (4f68 <dir_find+0x188>)
    4e38:	4798      	blx	r3
    4e3a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4e3c:	d000      	beq.n	4e40 <dir_find+0x60>
    4e3e:	e07c      	b.n	4f3a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4e40:	6929      	ldr	r1, [r5, #16]
    4e42:	6828      	ldr	r0, [r5, #0]
    4e44:	47d8      	blx	fp
    4e46:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4e48:	d177      	bne.n	4f3a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4e4a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4e4c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4e4e:	2e00      	cmp	r6, #0
    4e50:	d100      	bne.n	4e54 <dir_find+0x74>
    4e52:	e080      	b.n	4f56 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4e54:	7ae2      	ldrb	r2, [r4, #11]
    4e56:	233f      	movs	r3, #63	; 0x3f
    4e58:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4e5a:	2ee5      	cmp	r6, #229	; 0xe5
    4e5c:	d100      	bne.n	4e60 <dir_find+0x80>
    4e5e:	e077      	b.n	4f50 <dir_find+0x170>
    4e60:	0712      	lsls	r2, r2, #28
    4e62:	d5d1      	bpl.n	4e08 <dir_find+0x28>
    4e64:	2b0f      	cmp	r3, #15
    4e66:	d002      	beq.n	4e6e <dir_find+0x8e>
			ord = 0xFF;
    4e68:	23ff      	movs	r3, #255	; 0xff
    4e6a:	469a      	mov	sl, r3
    4e6c:	e7e1      	b.n	4e32 <dir_find+0x52>
				if (dj->lfn) {
    4e6e:	69ef      	ldr	r7, [r5, #28]
    4e70:	2f00      	cmp	r7, #0
    4e72:	d0de      	beq.n	4e32 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4e74:	0673      	lsls	r3, r6, #25
    4e76:	d518      	bpl.n	4eaa <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4e78:	7b63      	ldrb	r3, [r4, #13]
    4e7a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4e7c:	2340      	movs	r3, #64	; 0x40
    4e7e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4e80:	88eb      	ldrh	r3, [r5, #6]
    4e82:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4e84:	7b63      	ldrb	r3, [r4, #13]
    4e86:	9300      	str	r3, [sp, #0]
    4e88:	22ff      	movs	r2, #255	; 0xff
    4e8a:	4692      	mov	sl, r2
    4e8c:	454b      	cmp	r3, r9
    4e8e:	d1d0      	bne.n	4e32 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4e90:	7823      	ldrb	r3, [r4, #0]
    4e92:	3abf      	subs	r2, #191	; 0xbf
    4e94:	4393      	bics	r3, r2
    4e96:	3b01      	subs	r3, #1
    4e98:	005a      	lsls	r2, r3, #1
    4e9a:	18d2      	adds	r2, r2, r3
    4e9c:	0092      	lsls	r2, r2, #2
    4e9e:	4692      	mov	sl, r2
    4ea0:	449a      	add	sl, r3
	s = 0; wc = 1;
    4ea2:	2201      	movs	r2, #1
    4ea4:	2300      	movs	r3, #0
    4ea6:	4699      	mov	r9, r3
    4ea8:	e01d      	b.n	4ee6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4eaa:	45b2      	cmp	sl, r6
    4eac:	d0ea      	beq.n	4e84 <dir_find+0xa4>
    4eae:	23ff      	movs	r3, #255	; 0xff
    4eb0:	469a      	mov	sl, r3
    4eb2:	e7be      	b.n	4e32 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4eb4:	4b2d      	ldr	r3, [pc, #180]	; (4f6c <dir_find+0x18c>)
    4eb6:	4798      	blx	r3
    4eb8:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4eba:	4653      	mov	r3, sl
    4ebc:	2bfe      	cmp	r3, #254	; 0xfe
    4ebe:	d81f      	bhi.n	4f00 <dir_find+0x120>
    4ec0:	2301      	movs	r3, #1
    4ec2:	4453      	add	r3, sl
    4ec4:	4698      	mov	r8, r3
    4ec6:	4653      	mov	r3, sl
    4ec8:	005b      	lsls	r3, r3, #1
    4eca:	5bd8      	ldrh	r0, [r3, r7]
    4ecc:	4b27      	ldr	r3, [pc, #156]	; (4f6c <dir_find+0x18c>)
    4ece:	4798      	blx	r3
    4ed0:	0002      	movs	r2, r0
    4ed2:	9b01      	ldr	r3, [sp, #4]
    4ed4:	4283      	cmp	r3, r0
    4ed6:	d113      	bne.n	4f00 <dir_find+0x120>
    4ed8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4eda:	2301      	movs	r3, #1
    4edc:	469c      	mov	ip, r3
    4ede:	44e1      	add	r9, ip
    4ee0:	464b      	mov	r3, r9
    4ee2:	2b0d      	cmp	r3, #13
    4ee4:	d011      	beq.n	4f0a <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4ee6:	4b22      	ldr	r3, [pc, #136]	; (4f70 <dir_find+0x190>)
    4ee8:	4649      	mov	r1, r9
    4eea:	5cc9      	ldrb	r1, [r1, r3]
    4eec:	1863      	adds	r3, r4, r1
    4eee:	785b      	ldrb	r3, [r3, #1]
    4ef0:	021b      	lsls	r3, r3, #8
    4ef2:	5c60      	ldrb	r0, [r4, r1]
    4ef4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4ef6:	2a00      	cmp	r2, #0
    4ef8:	d1dc      	bne.n	4eb4 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4efa:	4b1e      	ldr	r3, [pc, #120]	; (4f74 <dir_find+0x194>)
    4efc:	4298      	cmp	r0, r3
    4efe:	d0ec      	beq.n	4eda <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4f00:	9b00      	ldr	r3, [sp, #0]
    4f02:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4f04:	23ff      	movs	r3, #255	; 0xff
    4f06:	469a      	mov	sl, r3
    4f08:	e793      	b.n	4e32 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4f0a:	7823      	ldrb	r3, [r4, #0]
    4f0c:	065b      	lsls	r3, r3, #25
    4f0e:	d506      	bpl.n	4f1e <dir_find+0x13e>
    4f10:	2a00      	cmp	r2, #0
    4f12:	d004      	beq.n	4f1e <dir_find+0x13e>
    4f14:	4653      	mov	r3, sl
    4f16:	005b      	lsls	r3, r3, #1
    4f18:	5bdb      	ldrh	r3, [r3, r7]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d1f0      	bne.n	4f00 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4f1e:	3e01      	subs	r6, #1
    4f20:	b2f3      	uxtb	r3, r6
    4f22:	469a      	mov	sl, r3
    4f24:	9b00      	ldr	r3, [sp, #0]
    4f26:	4699      	mov	r9, r3
    4f28:	e783      	b.n	4e32 <dir_find+0x52>
    4f2a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4f2c:	5ce1      	ldrb	r1, [r4, r3]
    4f2e:	5cc2      	ldrb	r2, [r0, r3]
    4f30:	4291      	cmp	r1, r2
    4f32:	d10a      	bne.n	4f4a <dir_find+0x16a>
    4f34:	3301      	adds	r3, #1
    4f36:	2b0b      	cmp	r3, #11
    4f38:	d1f8      	bne.n	4f2c <dir_find+0x14c>
}
    4f3a:	0038      	movs	r0, r7
    4f3c:	b003      	add	sp, #12
    4f3e:	bc3c      	pop	{r2, r3, r4, r5}
    4f40:	4690      	mov	r8, r2
    4f42:	4699      	mov	r9, r3
    4f44:	46a2      	mov	sl, r4
    4f46:	46ab      	mov	fp, r5
    4f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4f4a:	23ff      	movs	r3, #255	; 0xff
    4f4c:	469a      	mov	sl, r3
    4f4e:	e770      	b.n	4e32 <dir_find+0x52>
			ord = 0xFF;
    4f50:	23ff      	movs	r3, #255	; 0xff
    4f52:	469a      	mov	sl, r3
    4f54:	e76d      	b.n	4e32 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4f56:	2704      	movs	r7, #4
    4f58:	e7ef      	b.n	4f3a <dir_find+0x15a>
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	000049a1 	.word	0x000049a1
    4f60:	00004805 	.word	0x00004805
    4f64:	00004363 	.word	0x00004363
    4f68:	00004cbd 	.word	0x00004cbd
    4f6c:	00005b71 	.word	0x00005b71
    4f70:	0000aa30 	.word	0x0000aa30
    4f74:	0000ffff 	.word	0x0000ffff

00004f78 <dir_register>:
{
    4f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7a:	46de      	mov	lr, fp
    4f7c:	4657      	mov	r7, sl
    4f7e:	464e      	mov	r6, r9
    4f80:	4645      	mov	r5, r8
    4f82:	b5e0      	push	{r5, r6, r7, lr}
    4f84:	b089      	sub	sp, #36	; 0x24
    4f86:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4f88:	6987      	ldr	r7, [r0, #24]
    4f8a:	69c3      	ldr	r3, [r0, #28]
    4f8c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4f8e:	ad05      	add	r5, sp, #20
    4f90:	220c      	movs	r2, #12
    4f92:	0039      	movs	r1, r7
    4f94:	0028      	movs	r0, r5
    4f96:	4ba7      	ldr	r3, [pc, #668]	; (5234 <dir_register+0x2bc>)
    4f98:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4f9a:	7aeb      	ldrb	r3, [r5, #11]
    4f9c:	07db      	lsls	r3, r3, #31
    4f9e:	d400      	bmi.n	4fa2 <dir_register+0x2a>
    4fa0:	e070      	b.n	5084 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4fa2:	2300      	movs	r3, #0
    4fa4:	72fb      	strb	r3, [r7, #11]
    4fa6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4fa8:	220b      	movs	r2, #11
    4faa:	a905      	add	r1, sp, #20
    4fac:	0038      	movs	r0, r7
    4fae:	4ba1      	ldr	r3, [pc, #644]	; (5234 <dir_register+0x2bc>)
    4fb0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4fb2:	2301      	movs	r3, #1
		ns[i--] = c;
    4fb4:	ad03      	add	r5, sp, #12
    4fb6:	001e      	movs	r6, r3
    4fb8:	46a0      	mov	r8, r4
    4fba:	e049      	b.n	5050 <dir_register+0xd8>
    4fbc:	3801      	subs	r0, #1
    4fbe:	1829      	adds	r1, r5, r0
    4fc0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4fc2:	091b      	lsrs	r3, r3, #4
    4fc4:	b29b      	uxth	r3, r3
	} while (seq);
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d007      	beq.n	4fda <dir_register+0x62>
		c = (seq % 16) + '0';
    4fca:	0021      	movs	r1, r4
    4fcc:	4019      	ands	r1, r3
    4fce:	000a      	movs	r2, r1
    4fd0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4fd2:	2a39      	cmp	r2, #57	; 0x39
    4fd4:	d9f2      	bls.n	4fbc <dir_register+0x44>
    4fd6:	3207      	adds	r2, #7
    4fd8:	e7f0      	b.n	4fbc <dir_register+0x44>
	ns[i] = '~';
    4fda:	337e      	adds	r3, #126	; 0x7e
    4fdc:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4fde:	2800      	cmp	r0, #0
    4fe0:	d00a      	beq.n	4ff8 <dir_register+0x80>
    4fe2:	783b      	ldrb	r3, [r7, #0]
    4fe4:	2b20      	cmp	r3, #32
    4fe6:	d009      	beq.n	4ffc <dir_register+0x84>
    4fe8:	2300      	movs	r3, #0
    4fea:	3301      	adds	r3, #1
    4fec:	4298      	cmp	r0, r3
    4fee:	d007      	beq.n	5000 <dir_register+0x88>
    4ff0:	5cfa      	ldrb	r2, [r7, r3]
    4ff2:	2a20      	cmp	r2, #32
    4ff4:	d1f9      	bne.n	4fea <dir_register+0x72>
    4ff6:	e009      	b.n	500c <dir_register+0x94>
    4ff8:	0003      	movs	r3, r0
    4ffa:	e007      	b.n	500c <dir_register+0x94>
    4ffc:	2300      	movs	r3, #0
    4ffe:	e005      	b.n	500c <dir_register+0x94>
    5000:	0003      	movs	r3, r0
    5002:	e003      	b.n	500c <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    5004:	54fa      	strb	r2, [r7, r3]
    5006:	3301      	adds	r3, #1
	} while (j < 8);
    5008:	2b07      	cmp	r3, #7
    500a:	d805      	bhi.n	5018 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    500c:	2220      	movs	r2, #32
    500e:	2807      	cmp	r0, #7
    5010:	d8f8      	bhi.n	5004 <dir_register+0x8c>
    5012:	5c2a      	ldrb	r2, [r5, r0]
    5014:	3001      	adds	r0, #1
    5016:	e7f5      	b.n	5004 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    5018:	4640      	mov	r0, r8
    501a:	4b87      	ldr	r3, [pc, #540]	; (5238 <dir_register+0x2c0>)
    501c:	4798      	blx	r3
			if (res != FR_OK) break;
    501e:	2800      	cmp	r0, #0
    5020:	d11c      	bne.n	505c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    5022:	3601      	adds	r6, #1
    5024:	b2b6      	uxth	r6, r6
    5026:	2e64      	cmp	r6, #100	; 0x64
    5028:	d015      	beq.n	5056 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    502a:	220b      	movs	r2, #11
    502c:	a905      	add	r1, sp, #20
    502e:	0038      	movs	r0, r7
    5030:	4b80      	ldr	r3, [pc, #512]	; (5234 <dir_register+0x2bc>)
    5032:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    5034:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    5036:	2e05      	cmp	r6, #5
    5038:	d90a      	bls.n	5050 <dir_register+0xd8>
    503a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    503c:	085a      	lsrs	r2, r3, #1
    503e:	03db      	lsls	r3, r3, #15
    5040:	4313      	orrs	r3, r2
    5042:	880a      	ldrh	r2, [r1, #0]
    5044:	189b      	adds	r3, r3, r2
    5046:	b29b      	uxth	r3, r3
    5048:	3102      	adds	r1, #2
    504a:	880a      	ldrh	r2, [r1, #0]
    504c:	2a00      	cmp	r2, #0
    504e:	d1f5      	bne.n	503c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    5050:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    5052:	240f      	movs	r4, #15
    5054:	e7b9      	b.n	4fca <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    5056:	2307      	movs	r3, #7
    5058:	4698      	mov	r8, r3
    505a:	e006      	b.n	506a <dir_register+0xf2>
    505c:	4644      	mov	r4, r8
    505e:	4680      	mov	r8, r0
    5060:	2e64      	cmp	r6, #100	; 0x64
    5062:	d100      	bne.n	5066 <dir_register+0xee>
    5064:	e0a5      	b.n	51b2 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    5066:	2804      	cmp	r0, #4
    5068:	d007      	beq.n	507a <dir_register+0x102>
}
    506a:	4640      	mov	r0, r8
    506c:	b009      	add	sp, #36	; 0x24
    506e:	bc3c      	pop	{r2, r3, r4, r5}
    5070:	4690      	mov	r8, r2
    5072:	4699      	mov	r9, r3
    5074:	46a2      	mov	sl, r4
    5076:	46ab      	mov	fp, r5
    5078:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    507a:	ab05      	add	r3, sp, #20
    507c:	7adb      	ldrb	r3, [r3, #11]
    507e:	72fb      	strb	r3, [r7, #11]
    5080:	4653      	mov	r3, sl
    5082:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    5084:	ab05      	add	r3, sp, #20
    5086:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    5088:	2201      	movs	r2, #1
    508a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    508c:	079b      	lsls	r3, r3, #30
    508e:	d511      	bpl.n	50b4 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    5090:	4653      	mov	r3, sl
    5092:	881b      	ldrh	r3, [r3, #0]
    5094:	2b00      	cmp	r3, #0
    5096:	d01b      	beq.n	50d0 <dir_register+0x158>
    5098:	2000      	movs	r0, #0
    509a:	4652      	mov	r2, sl
    509c:	3001      	adds	r0, #1
    509e:	b280      	uxth	r0, r0
    50a0:	0043      	lsls	r3, r0, #1
    50a2:	5a9b      	ldrh	r3, [r3, r2]
    50a4:	2b00      	cmp	r3, #0
    50a6:	d1f9      	bne.n	509c <dir_register+0x124>
		ne = (ne + 25) / 13;
    50a8:	3019      	adds	r0, #25
    50aa:	210d      	movs	r1, #13
    50ac:	4b63      	ldr	r3, [pc, #396]	; (523c <dir_register+0x2c4>)
    50ae:	4798      	blx	r3
    50b0:	b283      	uxth	r3, r0
    50b2:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    50b4:	2100      	movs	r1, #0
    50b6:	0020      	movs	r0, r4
    50b8:	4b61      	ldr	r3, [pc, #388]	; (5240 <dir_register+0x2c8>)
    50ba:	4798      	blx	r3
    50bc:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    50be:	2800      	cmp	r0, #0
    50c0:	d1d3      	bne.n	506a <dir_register+0xf2>
    50c2:	4682      	mov	sl, r0
    50c4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    50c6:	4f5f      	ldr	r7, [pc, #380]	; (5244 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    50c8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    50ca:	4b5f      	ldr	r3, [pc, #380]	; (5248 <dir_register+0x2d0>)
    50cc:	4699      	mov	r9, r3
    50ce:	e00b      	b.n	50e8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    50d0:	2000      	movs	r0, #0
    50d2:	e7e9      	b.n	50a8 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    50d4:	1c6b      	adds	r3, r5, #1
    50d6:	b29b      	uxth	r3, r3
    50d8:	459b      	cmp	fp, r3
    50da:	d06d      	beq.n	51b8 <dir_register+0x240>
    50dc:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    50de:	2101      	movs	r1, #1
    50e0:	0020      	movs	r0, r4
    50e2:	47c8      	blx	r9
	} while (res == FR_OK);
    50e4:	2800      	cmp	r0, #0
    50e6:	d112      	bne.n	510e <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    50e8:	6921      	ldr	r1, [r4, #16]
    50ea:	6820      	ldr	r0, [r4, #0]
    50ec:	47b8      	blx	r7
		if (res != FR_OK) break;
    50ee:	2800      	cmp	r0, #0
    50f0:	d000      	beq.n	50f4 <dir_register+0x17c>
    50f2:	e098      	b.n	5226 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    50f4:	6963      	ldr	r3, [r4, #20]
    50f6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    50f8:	2be5      	cmp	r3, #229	; 0xe5
    50fa:	d001      	beq.n	5100 <dir_register+0x188>
    50fc:	2b00      	cmp	r3, #0
    50fe:	d104      	bne.n	510a <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    5100:	2d00      	cmp	r5, #0
    5102:	d1e7      	bne.n	50d4 <dir_register+0x15c>
    5104:	88e3      	ldrh	r3, [r4, #6]
    5106:	469a      	mov	sl, r3
    5108:	e7e4      	b.n	50d4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    510a:	0035      	movs	r5, r6
    510c:	e7e7      	b.n	50de <dir_register+0x166>
    510e:	4680      	mov	r8, r0
    5110:	e7ab      	b.n	506a <dir_register+0xf2>
		res = dir_sdi(dj, is);
    5112:	4651      	mov	r1, sl
    5114:	0020      	movs	r0, r4
    5116:	4b4a      	ldr	r3, [pc, #296]	; (5240 <dir_register+0x2c8>)
    5118:	4798      	blx	r3
    511a:	4680      	mov	r8, r0
		if (res == FR_OK) {
    511c:	2800      	cmp	r0, #0
    511e:	d1a4      	bne.n	506a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    5120:	69a0      	ldr	r0, [r4, #24]
    5122:	4b4a      	ldr	r3, [pc, #296]	; (524c <dir_register+0x2d4>)
    5124:	4798      	blx	r3
    5126:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5128:	46a8      	mov	r8, r5
    512a:	e01f      	b.n	516c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    512c:	0022      	movs	r2, r4
    512e:	e067      	b.n	5200 <dir_register+0x288>
    5130:	465e      	mov	r6, fp
    5132:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    5134:	4946      	ldr	r1, [pc, #280]	; (5250 <dir_register+0x2d8>)
    5136:	428b      	cmp	r3, r1
    5138:	d003      	beq.n	5142 <dir_register+0x1ca>
    513a:	0052      	lsls	r2, r2, #1
    513c:	5b93      	ldrh	r3, [r2, r6]
    513e:	2b00      	cmp	r3, #0
    5140:	d103      	bne.n	514a <dir_register+0x1d2>
    5142:	2340      	movs	r3, #64	; 0x40
    5144:	464a      	mov	r2, r9
    5146:	431a      	orrs	r2, r3
    5148:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    514a:	464b      	mov	r3, r9
    514c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    514e:	2301      	movs	r3, #1
    5150:	6822      	ldr	r2, [r4, #0]
    5152:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    5154:	2100      	movs	r1, #0
    5156:	0020      	movs	r0, r4
    5158:	4b3b      	ldr	r3, [pc, #236]	; (5248 <dir_register+0x2d0>)
    515a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    515c:	2800      	cmp	r0, #0
    515e:	d166      	bne.n	522e <dir_register+0x2b6>
    5160:	4645      	mov	r5, r8
    5162:	3d01      	subs	r5, #1
    5164:	b2ab      	uxth	r3, r5
    5166:	4698      	mov	r8, r3
    5168:	2b00      	cmp	r3, #0
    516a:	d027      	beq.n	51bc <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    516c:	6921      	ldr	r1, [r4, #16]
    516e:	6820      	ldr	r0, [r4, #0]
    5170:	4b34      	ldr	r3, [pc, #208]	; (5244 <dir_register+0x2cc>)
    5172:	4798      	blx	r3
				if (res != FR_OK) break;
    5174:	2800      	cmp	r0, #0
    5176:	d158      	bne.n	522a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    5178:	69e6      	ldr	r6, [r4, #28]
    517a:	6960      	ldr	r0, [r4, #20]
    517c:	4643      	mov	r3, r8
    517e:	466a      	mov	r2, sp
    5180:	70d3      	strb	r3, [r2, #3]
    5182:	78d3      	ldrb	r3, [r2, #3]
    5184:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    5186:	7913      	ldrb	r3, [r2, #4]
    5188:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    518a:	230f      	movs	r3, #15
    518c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    518e:	2300      	movs	r3, #0
    5190:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    5192:	7683      	strb	r3, [r0, #26]
    5194:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    5196:	464b      	mov	r3, r9
    5198:	3b01      	subs	r3, #1
    519a:	005a      	lsls	r2, r3, #1
    519c:	18d2      	adds	r2, r2, r3
    519e:	0092      	lsls	r2, r2, #2
    51a0:	18d2      	adds	r2, r2, r3
    51a2:	492c      	ldr	r1, [pc, #176]	; (5254 <dir_register+0x2dc>)
    51a4:	000d      	movs	r5, r1
    51a6:	350d      	adds	r5, #13
	s = wc = 0;
    51a8:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    51aa:	4f29      	ldr	r7, [pc, #164]	; (5250 <dir_register+0x2d8>)
    51ac:	46b3      	mov	fp, r6
    51ae:	46a4      	mov	ip, r4
    51b0:	e029      	b.n	5206 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    51b2:	2307      	movs	r3, #7
    51b4:	4698      	mov	r8, r3
    51b6:	e758      	b.n	506a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    51b8:	2b01      	cmp	r3, #1
    51ba:	d8aa      	bhi.n	5112 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    51bc:	6921      	ldr	r1, [r4, #16]
    51be:	6820      	ldr	r0, [r4, #0]
    51c0:	4b20      	ldr	r3, [pc, #128]	; (5244 <dir_register+0x2cc>)
    51c2:	4798      	blx	r3
    51c4:	4680      	mov	r8, r0
		if (res == FR_OK) {
    51c6:	2800      	cmp	r0, #0
    51c8:	d000      	beq.n	51cc <dir_register+0x254>
    51ca:	e74e      	b.n	506a <dir_register+0xf2>
			dir = dj->dir;
    51cc:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    51ce:	2220      	movs	r2, #32
    51d0:	2100      	movs	r1, #0
    51d2:	0028      	movs	r0, r5
    51d4:	4b20      	ldr	r3, [pc, #128]	; (5258 <dir_register+0x2e0>)
    51d6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    51d8:	220b      	movs	r2, #11
    51da:	69a1      	ldr	r1, [r4, #24]
    51dc:	0028      	movs	r0, r5
    51de:	4b15      	ldr	r3, [pc, #84]	; (5234 <dir_register+0x2bc>)
    51e0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    51e2:	69a3      	ldr	r3, [r4, #24]
    51e4:	7ada      	ldrb	r2, [r3, #11]
    51e6:	2318      	movs	r3, #24
    51e8:	4013      	ands	r3, r2
    51ea:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    51ec:	6823      	ldr	r3, [r4, #0]
    51ee:	2201      	movs	r2, #1
    51f0:	711a      	strb	r2, [r3, #4]
    51f2:	e73a      	b.n	506a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    51f4:	780c      	ldrb	r4, [r1, #0]
    51f6:	26ff      	movs	r6, #255	; 0xff
    51f8:	5506      	strb	r6, [r0, r4]
    51fa:	1904      	adds	r4, r0, r4
    51fc:	26ff      	movs	r6, #255	; 0xff
    51fe:	7066      	strb	r6, [r4, #1]
    5200:	3101      	adds	r1, #1
	} while (++s < 13);
    5202:	42a9      	cmp	r1, r5
    5204:	d094      	beq.n	5130 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5206:	42bb      	cmp	r3, r7
    5208:	d0f4      	beq.n	51f4 <dir_register+0x27c>
    520a:	1c54      	adds	r4, r2, #1
    520c:	0052      	lsls	r2, r2, #1
    520e:	465b      	mov	r3, fp
    5210:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5212:	780a      	ldrb	r2, [r1, #0]
    5214:	5483      	strb	r3, [r0, r2]
    5216:	1882      	adds	r2, r0, r2
    5218:	0a1e      	lsrs	r6, r3, #8
    521a:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    521c:	2b00      	cmp	r3, #0
    521e:	d185      	bne.n	512c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5220:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5222:	003b      	movs	r3, r7
    5224:	e7ec      	b.n	5200 <dir_register+0x288>
    5226:	4680      	mov	r8, r0
    5228:	e71f      	b.n	506a <dir_register+0xf2>
    522a:	4680      	mov	r8, r0
    522c:	e71d      	b.n	506a <dir_register+0xf2>
    522e:	4680      	mov	r8, r0
    5230:	e71b      	b.n	506a <dir_register+0xf2>
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	00004325 	.word	0x00004325
    5238:	00004de1 	.word	0x00004de1
    523c:	00008e69 	.word	0x00008e69
    5240:	000049a1 	.word	0x000049a1
    5244:	00004805 	.word	0x00004805
    5248:	00004cbd 	.word	0x00004cbd
    524c:	00004363 	.word	0x00004363
    5250:	0000ffff 	.word	0x0000ffff
    5254:	0000aa30 	.word	0x0000aa30
    5258:	00004339 	.word	0x00004339

0000525c <sync>:
{
    525c:	b570      	push	{r4, r5, r6, lr}
    525e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    5260:	2100      	movs	r1, #0
    5262:	4b2c      	ldr	r3, [pc, #176]	; (5314 <sync+0xb8>)
    5264:	4798      	blx	r3
	if (res == FR_OK) {
    5266:	2800      	cmp	r0, #0
    5268:	d10a      	bne.n	5280 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    526a:	7823      	ldrb	r3, [r4, #0]
    526c:	2b03      	cmp	r3, #3
    526e:	d008      	beq.n	5282 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    5270:	7860      	ldrb	r0, [r4, #1]
    5272:	2200      	movs	r2, #0
    5274:	2100      	movs	r1, #0
    5276:	4b28      	ldr	r3, [pc, #160]	; (5318 <sync+0xbc>)
    5278:	4798      	blx	r3
    527a:	1e43      	subs	r3, r0, #1
    527c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    527e:	b2c0      	uxtb	r0, r0
}
    5280:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    5282:	7963      	ldrb	r3, [r4, #5]
    5284:	2b00      	cmp	r3, #0
    5286:	d0f3      	beq.n	5270 <sync+0x14>
			fs->winsect = 0;
    5288:	2600      	movs	r6, #0
    528a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    528c:	0025      	movs	r5, r4
    528e:	3530      	adds	r5, #48	; 0x30
    5290:	2280      	movs	r2, #128	; 0x80
    5292:	0092      	lsls	r2, r2, #2
    5294:	2100      	movs	r1, #0
    5296:	0028      	movs	r0, r5
    5298:	4b20      	ldr	r3, [pc, #128]	; (531c <sync+0xc0>)
    529a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    529c:	2255      	movs	r2, #85	; 0x55
    529e:	4b20      	ldr	r3, [pc, #128]	; (5320 <sync+0xc4>)
    52a0:	54e2      	strb	r2, [r4, r3]
    52a2:	3255      	adds	r2, #85	; 0x55
    52a4:	4b1f      	ldr	r3, [pc, #124]	; (5324 <sync+0xc8>)
    52a6:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    52a8:	3bde      	subs	r3, #222	; 0xde
    52aa:	3bff      	subs	r3, #255	; 0xff
    52ac:	3a7a      	subs	r2, #122	; 0x7a
    52ae:	54a3      	strb	r3, [r4, r2]
    52b0:	3201      	adds	r2, #1
    52b2:	54a3      	strb	r3, [r4, r2]
    52b4:	330f      	adds	r3, #15
    52b6:	3201      	adds	r2, #1
    52b8:	54a3      	strb	r3, [r4, r2]
    52ba:	320f      	adds	r2, #15
    52bc:	2133      	movs	r1, #51	; 0x33
    52be:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    52c0:	313f      	adds	r1, #63	; 0x3f
    52c2:	2085      	movs	r0, #133	; 0x85
    52c4:	0080      	lsls	r0, r0, #2
    52c6:	5421      	strb	r1, [r4, r0]
    52c8:	4817      	ldr	r0, [pc, #92]	; (5328 <sync+0xcc>)
    52ca:	5421      	strb	r1, [r4, r0]
    52cc:	4917      	ldr	r1, [pc, #92]	; (532c <sync+0xd0>)
    52ce:	5462      	strb	r2, [r4, r1]
    52d0:	4a17      	ldr	r2, [pc, #92]	; (5330 <sync+0xd4>)
    52d2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    52d4:	6923      	ldr	r3, [r4, #16]
    52d6:	3201      	adds	r2, #1
    52d8:	54a3      	strb	r3, [r4, r2]
    52da:	0a19      	lsrs	r1, r3, #8
    52dc:	4a15      	ldr	r2, [pc, #84]	; (5334 <sync+0xd8>)
    52de:	54a1      	strb	r1, [r4, r2]
    52e0:	0c19      	lsrs	r1, r3, #16
    52e2:	4a15      	ldr	r2, [pc, #84]	; (5338 <sync+0xdc>)
    52e4:	54a1      	strb	r1, [r4, r2]
    52e6:	0e1b      	lsrs	r3, r3, #24
    52e8:	4a14      	ldr	r2, [pc, #80]	; (533c <sync+0xe0>)
    52ea:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    52ec:	68e3      	ldr	r3, [r4, #12]
    52ee:	3201      	adds	r2, #1
    52f0:	54a3      	strb	r3, [r4, r2]
    52f2:	0a19      	lsrs	r1, r3, #8
    52f4:	4a12      	ldr	r2, [pc, #72]	; (5340 <sync+0xe4>)
    52f6:	54a1      	strb	r1, [r4, r2]
    52f8:	0c19      	lsrs	r1, r3, #16
    52fa:	4a12      	ldr	r2, [pc, #72]	; (5344 <sync+0xe8>)
    52fc:	54a1      	strb	r1, [r4, r2]
    52fe:	0e1b      	lsrs	r3, r3, #24
    5300:	4a11      	ldr	r2, [pc, #68]	; (5348 <sync+0xec>)
    5302:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    5304:	7860      	ldrb	r0, [r4, #1]
    5306:	2301      	movs	r3, #1
    5308:	6962      	ldr	r2, [r4, #20]
    530a:	0029      	movs	r1, r5
    530c:	4d0f      	ldr	r5, [pc, #60]	; (534c <sync+0xf0>)
    530e:	47a8      	blx	r5
			fs->fsi_flag = 0;
    5310:	7166      	strb	r6, [r4, #5]
    5312:	e7ad      	b.n	5270 <sync+0x14>
    5314:	00004805 	.word	0x00004805
    5318:	00004269 	.word	0x00004269
    531c:	00004339 	.word	0x00004339
    5320:	0000022e 	.word	0x0000022e
    5324:	0000022f 	.word	0x0000022f
    5328:	00000215 	.word	0x00000215
    532c:	00000216 	.word	0x00000216
    5330:	00000217 	.word	0x00000217
    5334:	00000219 	.word	0x00000219
    5338:	0000021a 	.word	0x0000021a
    533c:	0000021b 	.word	0x0000021b
    5340:	0000021d 	.word	0x0000021d
    5344:	0000021e 	.word	0x0000021e
    5348:	0000021f 	.word	0x0000021f
    534c:	000041e5 	.word	0x000041e5

00005350 <follow_path>:
{
    5350:	b5f0      	push	{r4, r5, r6, r7, lr}
    5352:	46de      	mov	lr, fp
    5354:	4657      	mov	r7, sl
    5356:	464e      	mov	r6, r9
    5358:	4645      	mov	r5, r8
    535a:	b5e0      	push	{r5, r6, r7, lr}
    535c:	b083      	sub	sp, #12
    535e:	4682      	mov	sl, r0
    5360:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    5362:	780b      	ldrb	r3, [r1, #0]
    5364:	2b2f      	cmp	r3, #47	; 0x2f
    5366:	d00f      	beq.n	5388 <follow_path+0x38>
    5368:	2b5c      	cmp	r3, #92	; 0x5c
    536a:	d00d      	beq.n	5388 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    536c:	2300      	movs	r3, #0
    536e:	4652      	mov	r2, sl
    5370:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    5372:	782b      	ldrb	r3, [r5, #0]
    5374:	4657      	mov	r7, sl
    5376:	2b1f      	cmp	r3, #31
    5378:	d809      	bhi.n	538e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    537a:	2100      	movs	r1, #0
    537c:	4650      	mov	r0, sl
    537e:	4bb2      	ldr	r3, [pc, #712]	; (5648 <follow_path+0x2f8>)
    5380:	4798      	blx	r3
		dj->dir = 0;
    5382:	2300      	movs	r3, #0
    5384:	617b      	str	r3, [r7, #20]
    5386:	e13a      	b.n	55fe <follow_path+0x2ae>
		path++;
    5388:	3501      	adds	r5, #1
    538a:	e7ef      	b.n	536c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    538c:	3501      	adds	r5, #1
    538e:	7828      	ldrb	r0, [r5, #0]
    5390:	282f      	cmp	r0, #47	; 0x2f
    5392:	d0fb      	beq.n	538c <follow_path+0x3c>
    5394:	285c      	cmp	r0, #92	; 0x5c
    5396:	d0f9      	beq.n	538c <follow_path+0x3c>
	lfn = dj->lfn;
    5398:	69fb      	ldr	r3, [r7, #28]
    539a:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    539c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    539e:	281f      	cmp	r0, #31
    53a0:	d800      	bhi.n	53a4 <follow_path+0x54>
    53a2:	e13b      	b.n	561c <follow_path+0x2cc>
    53a4:	282f      	cmp	r0, #47	; 0x2f
    53a6:	d100      	bne.n	53aa <follow_path+0x5a>
    53a8:	e13b      	b.n	5622 <follow_path+0x2d2>
    53aa:	285c      	cmp	r0, #92	; 0x5c
    53ac:	d100      	bne.n	53b0 <follow_path+0x60>
    53ae:	e13b      	b.n	5628 <follow_path+0x2d8>
    53b0:	1c6e      	adds	r6, r5, #1
    53b2:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    53b4:	2380      	movs	r3, #128	; 0x80
    53b6:	005b      	lsls	r3, r3, #1
    53b8:	4698      	mov	r8, r3
    53ba:	46bb      	mov	fp, r7
    53bc:	002b      	movs	r3, r5
    53be:	0025      	movs	r5, r4
    53c0:	0034      	movs	r4, r6
    53c2:	4656      	mov	r6, sl
    53c4:	4699      	mov	r9, r3
    53c6:	e011      	b.n	53ec <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    53c8:	2b00      	cmp	r3, #0
    53ca:	d135      	bne.n	5438 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    53cc:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    53ce:	1c6b      	adds	r3, r5, #1
    53d0:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    53d2:	281f      	cmp	r0, #31
    53d4:	d91e      	bls.n	5414 <follow_path+0xc4>
    53d6:	282f      	cmp	r0, #47	; 0x2f
    53d8:	d100      	bne.n	53dc <follow_path+0x8c>
    53da:	e128      	b.n	562e <follow_path+0x2de>
    53dc:	285c      	cmp	r0, #92	; 0x5c
    53de:	d100      	bne.n	53e2 <follow_path+0x92>
    53e0:	e142      	b.n	5668 <follow_path+0x318>
    53e2:	3602      	adds	r6, #2
    53e4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    53e6:	4543      	cmp	r3, r8
    53e8:	d026      	beq.n	5438 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    53ea:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    53ec:	2101      	movs	r1, #1
    53ee:	4b97      	ldr	r3, [pc, #604]	; (564c <follow_path+0x2fc>)
    53f0:	4798      	blx	r3
    53f2:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    53f4:	d020      	beq.n	5438 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    53f6:	287f      	cmp	r0, #127	; 0x7f
    53f8:	d8e8      	bhi.n	53cc <follow_path+0x7c>
	while (*str && *str != chr) str++;
    53fa:	2822      	cmp	r0, #34	; 0x22
    53fc:	d100      	bne.n	5400 <follow_path+0xb0>
    53fe:	e0fd      	b.n	55fc <follow_path+0x2ac>
    5400:	232a      	movs	r3, #42	; 0x2a
    5402:	4a93      	ldr	r2, [pc, #588]	; (5650 <follow_path+0x300>)
    5404:	b29f      	uxth	r7, r3
    5406:	428f      	cmp	r7, r1
    5408:	d0de      	beq.n	53c8 <follow_path+0x78>
    540a:	3201      	adds	r2, #1
    540c:	7813      	ldrb	r3, [r2, #0]
    540e:	2b00      	cmp	r3, #0
    5410:	d1f8      	bne.n	5404 <follow_path+0xb4>
    5412:	e7db      	b.n	53cc <follow_path+0x7c>
    5414:	002c      	movs	r4, r5
    5416:	465f      	mov	r7, fp
    5418:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    541a:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    541c:	2604      	movs	r6, #4
    541e:	e10b      	b.n	5638 <follow_path+0x2e8>
		di--;
    5420:	3c01      	subs	r4, #1
    5422:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    5424:	2c00      	cmp	r4, #0
    5426:	d100      	bne.n	542a <follow_path+0xda>
    5428:	e0e8      	b.n	55fc <follow_path+0x2ac>
		w = lfn[di-1];
    542a:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    542c:	2a20      	cmp	r2, #32
    542e:	d0f7      	beq.n	5420 <follow_path+0xd0>
    5430:	2a2e      	cmp	r2, #46	; 0x2e
    5432:	d0f5      	beq.n	5420 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    5434:	2c00      	cmp	r4, #0
    5436:	d101      	bne.n	543c <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5438:	2006      	movs	r0, #6
	return res;
    543a:	e0e0      	b.n	55fe <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    543c:	0063      	lsls	r3, r4, #1
    543e:	4698      	mov	r8, r3
    5440:	2300      	movs	r3, #0
    5442:	4652      	mov	r2, sl
    5444:	4641      	mov	r1, r8
    5446:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    5448:	220b      	movs	r2, #11
    544a:	2120      	movs	r1, #32
    544c:	69b8      	ldr	r0, [r7, #24]
    544e:	4b81      	ldr	r3, [pc, #516]	; (5654 <follow_path+0x304>)
    5450:	4798      	blx	r3
    5452:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    5454:	2300      	movs	r3, #0
    5456:	e001      	b.n	545c <follow_path+0x10c>
    5458:	3301      	adds	r3, #1
    545a:	3202      	adds	r2, #2
    545c:	8811      	ldrh	r1, [r2, #0]
    545e:	2920      	cmp	r1, #32
    5460:	d0fa      	beq.n	5458 <follow_path+0x108>
    5462:	292e      	cmp	r1, #46	; 0x2e
    5464:	d0f8      	beq.n	5458 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    5466:	2b00      	cmp	r3, #0
    5468:	d001      	beq.n	546e <follow_path+0x11e>
    546a:	2203      	movs	r2, #3
    546c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    546e:	4652      	mov	r2, sl
    5470:	4442      	add	r2, r8
    5472:	3a02      	subs	r2, #2
    5474:	8812      	ldrh	r2, [r2, #0]
    5476:	2a2e      	cmp	r2, #46	; 0x2e
    5478:	d009      	beq.n	548e <follow_path+0x13e>
    547a:	4642      	mov	r2, r8
    547c:	3a04      	subs	r2, #4
    547e:	4452      	add	r2, sl
    5480:	3c01      	subs	r4, #1
    5482:	2c00      	cmp	r4, #0
    5484:	d003      	beq.n	548e <follow_path+0x13e>
    5486:	3a02      	subs	r2, #2
    5488:	8851      	ldrh	r1, [r2, #2]
    548a:	292e      	cmp	r1, #46	; 0x2e
    548c:	d1f8      	bne.n	5480 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    548e:	2208      	movs	r2, #8
    5490:	9201      	str	r2, [sp, #4]
    5492:	2200      	movs	r2, #0
    5494:	4693      	mov	fp, r2
    5496:	4691      	mov	r9, r2
    5498:	46a0      	mov	r8, r4
    549a:	e006      	b.n	54aa <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    549c:	4544      	cmp	r4, r8
    549e:	d100      	bne.n	54a2 <follow_path+0x152>
    54a0:	e0e6      	b.n	5670 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    54a2:	2303      	movs	r3, #3
    54a4:	431e      	orrs	r6, r3
    54a6:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    54a8:	0023      	movs	r3, r4
    54aa:	1c5c      	adds	r4, r3, #1
    54ac:	005b      	lsls	r3, r3, #1
    54ae:	4652      	mov	r2, sl
    54b0:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    54b2:	2800      	cmp	r0, #0
    54b4:	d02c      	beq.n	5510 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    54b6:	2820      	cmp	r0, #32
    54b8:	d0f3      	beq.n	54a2 <follow_path+0x152>
    54ba:	282e      	cmp	r0, #46	; 0x2e
    54bc:	d0ee      	beq.n	549c <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    54be:	9b01      	ldr	r3, [sp, #4]
    54c0:	459b      	cmp	fp, r3
    54c2:	d219      	bcs.n	54f8 <follow_path+0x1a8>
    54c4:	4544      	cmp	r4, r8
    54c6:	d100      	bne.n	54ca <follow_path+0x17a>
    54c8:	e0d2      	b.n	5670 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    54ca:	287f      	cmp	r0, #127	; 0x7f
    54cc:	d85e      	bhi.n	558c <follow_path+0x23c>
	while (*str && *str != chr) str++;
    54ce:	282b      	cmp	r0, #43	; 0x2b
    54d0:	d06e      	beq.n	55b0 <follow_path+0x260>
    54d2:	232c      	movs	r3, #44	; 0x2c
    54d4:	4a60      	ldr	r2, [pc, #384]	; (5658 <follow_path+0x308>)
    54d6:	b299      	uxth	r1, r3
    54d8:	4281      	cmp	r1, r0
    54da:	d067      	beq.n	55ac <follow_path+0x25c>
    54dc:	3201      	adds	r2, #1
    54de:	7813      	ldrb	r3, [r2, #0]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d1f8      	bne.n	54d6 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    54e4:	0003      	movs	r3, r0
    54e6:	3b41      	subs	r3, #65	; 0x41
    54e8:	b29b      	uxth	r3, r3
    54ea:	2b19      	cmp	r3, #25
    54ec:	d86c      	bhi.n	55c8 <follow_path+0x278>
					b |= 2;
    54ee:	2302      	movs	r3, #2
    54f0:	464a      	mov	r2, r9
    54f2:	431a      	orrs	r2, r3
    54f4:	4691      	mov	r9, r2
    54f6:	e05f      	b.n	55b8 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    54f8:	9b01      	ldr	r3, [sp, #4]
    54fa:	2b0b      	cmp	r3, #11
    54fc:	d03b      	beq.n	5576 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    54fe:	4544      	cmp	r4, r8
    5500:	d100      	bne.n	5504 <follow_path+0x1b4>
    5502:	e0b9      	b.n	5678 <follow_path+0x328>
    5504:	2303      	movs	r3, #3
    5506:	431e      	orrs	r6, r3
    5508:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    550a:	4544      	cmp	r4, r8
    550c:	d800      	bhi.n	5510 <follow_path+0x1c0>
    550e:	e0b3      	b.n	5678 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5510:	69bb      	ldr	r3, [r7, #24]
    5512:	781a      	ldrb	r2, [r3, #0]
    5514:	2ae5      	cmp	r2, #229	; 0xe5
    5516:	d036      	beq.n	5586 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    5518:	9b01      	ldr	r3, [sp, #4]
    551a:	2b08      	cmp	r3, #8
    551c:	d060      	beq.n	55e0 <follow_path+0x290>
    551e:	230c      	movs	r3, #12
    5520:	464a      	mov	r2, r9
    5522:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5524:	2b0c      	cmp	r3, #12
    5526:	d060      	beq.n	55ea <follow_path+0x29a>
    5528:	43d2      	mvns	r2, r2
    552a:	0792      	lsls	r2, r2, #30
    552c:	d05d      	beq.n	55ea <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    552e:	07b2      	lsls	r2, r6, #30
    5530:	d406      	bmi.n	5540 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5532:	2203      	movs	r2, #3
    5534:	4649      	mov	r1, r9
    5536:	400a      	ands	r2, r1
    5538:	2a01      	cmp	r2, #1
    553a:	d059      	beq.n	55f0 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    553c:	2b04      	cmp	r3, #4
    553e:	d05a      	beq.n	55f6 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    5540:	69bb      	ldr	r3, [r7, #24]
    5542:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    5544:	0038      	movs	r0, r7
    5546:	4b45      	ldr	r3, [pc, #276]	; (565c <follow_path+0x30c>)
    5548:	4798      	blx	r3
			ns = *(dj->fn+NS);
    554a:	69bb      	ldr	r3, [r7, #24]
    554c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    554e:	2800      	cmp	r0, #0
    5550:	d15c      	bne.n	560c <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    5552:	075b      	lsls	r3, r3, #29
    5554:	d453      	bmi.n	55fe <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    5556:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    5558:	7ad3      	ldrb	r3, [r2, #11]
    555a:	06db      	lsls	r3, r3, #27
    555c:	d55c      	bpl.n	5618 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    555e:	7d51      	ldrb	r1, [r2, #21]
    5560:	0209      	lsls	r1, r1, #8
    5562:	7d13      	ldrb	r3, [r2, #20]
    5564:	430b      	orrs	r3, r1
    5566:	041b      	lsls	r3, r3, #16
    5568:	7ed1      	ldrb	r1, [r2, #27]
    556a:	0209      	lsls	r1, r1, #8
    556c:	7e92      	ldrb	r2, [r2, #26]
    556e:	430a      	orrs	r2, r1
    5570:	4313      	orrs	r3, r2
    5572:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5574:	e70b      	b.n	538e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    5576:	2303      	movs	r3, #3
    5578:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    557a:	69bb      	ldr	r3, [r7, #24]
    557c:	781a      	ldrb	r2, [r3, #0]
    557e:	2ae5      	cmp	r2, #229	; 0xe5
    5580:	d1cd      	bne.n	551e <follow_path+0x1ce>
    5582:	220b      	movs	r2, #11
    5584:	9201      	str	r2, [sp, #4]
    5586:	2205      	movs	r2, #5
    5588:	701a      	strb	r2, [r3, #0]
    558a:	e7c5      	b.n	5518 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    558c:	2100      	movs	r1, #0
    558e:	4b2f      	ldr	r3, [pc, #188]	; (564c <follow_path+0x2fc>)
    5590:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    5592:	2800      	cmp	r0, #0
    5594:	d100      	bne.n	5598 <follow_path+0x248>
    5596:	e079      	b.n	568c <follow_path+0x33c>
    5598:	4b31      	ldr	r3, [pc, #196]	; (5660 <follow_path+0x310>)
    559a:	469c      	mov	ip, r3
    559c:	4460      	add	r0, ip
    559e:	3880      	subs	r0, #128	; 0x80
    55a0:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    55a2:	2302      	movs	r3, #2
    55a4:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    55a6:	2800      	cmp	r0, #0
    55a8:	d002      	beq.n	55b0 <follow_path+0x260>
    55aa:	e790      	b.n	54ce <follow_path+0x17e>
    55ac:	2b00      	cmp	r3, #0
    55ae:	d099      	beq.n	54e4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    55b0:	2303      	movs	r3, #3
    55b2:	431e      	orrs	r6, r3
    55b4:	b2f6      	uxtb	r6, r6
    55b6:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    55b8:	69bb      	ldr	r3, [r7, #24]
    55ba:	465a      	mov	r2, fp
    55bc:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    55be:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    55c0:	2201      	movs	r2, #1
    55c2:	4694      	mov	ip, r2
    55c4:	44e3      	add	fp, ip
    55c6:	e770      	b.n	54aa <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    55c8:	0003      	movs	r3, r0
    55ca:	3b61      	subs	r3, #97	; 0x61
    55cc:	b29b      	uxth	r3, r3
    55ce:	2b19      	cmp	r3, #25
    55d0:	d8f2      	bhi.n	55b8 <follow_path+0x268>
						b |= 1; w -= 0x20;
    55d2:	2301      	movs	r3, #1
    55d4:	464a      	mov	r2, r9
    55d6:	431a      	orrs	r2, r3
    55d8:	4691      	mov	r9, r2
    55da:	3820      	subs	r0, #32
    55dc:	b280      	uxth	r0, r0
    55de:	e7eb      	b.n	55b8 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    55e0:	464b      	mov	r3, r9
    55e2:	009b      	lsls	r3, r3, #2
    55e4:	b2db      	uxtb	r3, r3
    55e6:	4699      	mov	r9, r3
    55e8:	e799      	b.n	551e <follow_path+0x1ce>
		cf |= NS_LFN;
    55ea:	2202      	movs	r2, #2
    55ec:	4316      	orrs	r6, r2
    55ee:	e79e      	b.n	552e <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    55f0:	320f      	adds	r2, #15
    55f2:	4316      	orrs	r6, r2
    55f4:	e7a2      	b.n	553c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    55f6:	3304      	adds	r3, #4
    55f8:	431e      	orrs	r6, r3
    55fa:	e7a1      	b.n	5540 <follow_path+0x1f0>
    55fc:	2006      	movs	r0, #6
}
    55fe:	b003      	add	sp, #12
    5600:	bc3c      	pop	{r2, r3, r4, r5}
    5602:	4690      	mov	r8, r2
    5604:	4699      	mov	r9, r3
    5606:	46a2      	mov	sl, r4
    5608:	46ab      	mov	fp, r5
    560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    560c:	2804      	cmp	r0, #4
    560e:	d1f6      	bne.n	55fe <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5610:	075b      	lsls	r3, r3, #29
    5612:	d4f4      	bmi.n	55fe <follow_path+0x2ae>
    5614:	3001      	adds	r0, #1
    5616:	e7f2      	b.n	55fe <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    5618:	2005      	movs	r0, #5
    561a:	e7f0      	b.n	55fe <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    561c:	2301      	movs	r3, #1
	si = di = 0;
    561e:	2400      	movs	r4, #0
    5620:	e6fb      	b.n	541a <follow_path+0xca>
		w = p[si++];					/* Get a character */
    5622:	2301      	movs	r3, #1
	si = di = 0;
    5624:	2400      	movs	r4, #0
    5626:	e005      	b.n	5634 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    5628:	2301      	movs	r3, #1
	si = di = 0;
    562a:	2400      	movs	r4, #0
    562c:	e002      	b.n	5634 <follow_path+0x2e4>
    562e:	002c      	movs	r4, r5
    5630:	465f      	mov	r7, fp
    5632:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5634:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5636:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    5638:	2c00      	cmp	r4, #0
    563a:	d0df      	beq.n	55fc <follow_path+0x2ac>
    563c:	4b09      	ldr	r3, [pc, #36]	; (5664 <follow_path+0x314>)
    563e:	18e3      	adds	r3, r4, r3
    5640:	005b      	lsls	r3, r3, #1
    5642:	4453      	add	r3, sl
    5644:	e6f1      	b.n	542a <follow_path+0xda>
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	000049a1 	.word	0x000049a1
    564c:	00005b29 	.word	0x00005b29
    5650:	0000aac1 	.word	0x0000aac1
    5654:	00004339 	.word	0x00004339
    5658:	0000aacd 	.word	0x0000aacd
    565c:	00004de1 	.word	0x00004de1
    5660:	0000aa40 	.word	0x0000aa40
    5664:	7fffffff 	.word	0x7fffffff
    5668:	002c      	movs	r4, r5
    566a:	465f      	mov	r7, fp
    566c:	464d      	mov	r5, r9
    566e:	e7e1      	b.n	5634 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    5670:	9b01      	ldr	r3, [sp, #4]
    5672:	2b0b      	cmp	r3, #11
    5674:	d100      	bne.n	5678 <follow_path+0x328>
    5676:	e77e      	b.n	5576 <follow_path+0x226>
			b <<= 2; continue;
    5678:	464b      	mov	r3, r9
    567a:	009b      	lsls	r3, r3, #2
    567c:	b2db      	uxtb	r3, r3
    567e:	4699      	mov	r9, r3
    5680:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    5682:	220b      	movs	r2, #11
    5684:	9201      	str	r2, [sp, #4]
    5686:	3a03      	subs	r2, #3
    5688:	4693      	mov	fp, r2
    568a:	e70e      	b.n	54aa <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    568c:	2302      	movs	r3, #2
    568e:	431e      	orrs	r6, r3
    5690:	e78e      	b.n	55b0 <follow_path+0x260>
    5692:	46c0      	nop			; (mov r8, r8)

00005694 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    5694:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    5696:	2803      	cmp	r0, #3
    5698:	d901      	bls.n	569e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    569a:	0018      	movs	r0, r3
    569c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    569e:	0083      	lsls	r3, r0, #2
    56a0:	4a07      	ldr	r2, [pc, #28]	; (56c0 <f_mount+0x2c>)
    56a2:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    56a4:	2b00      	cmp	r3, #0
    56a6:	d001      	beq.n	56ac <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    56a8:	2200      	movs	r2, #0
    56aa:	701a      	strb	r2, [r3, #0]
	if (fs) {
    56ac:	2900      	cmp	r1, #0
    56ae:	d001      	beq.n	56b4 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    56b0:	2300      	movs	r3, #0
    56b2:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    56b4:	0080      	lsls	r0, r0, #2
    56b6:	4b02      	ldr	r3, [pc, #8]	; (56c0 <f_mount+0x2c>)
    56b8:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    56ba:	2300      	movs	r3, #0
    56bc:	e7ed      	b.n	569a <f_mount+0x6>
    56be:	46c0      	nop			; (mov r8, r8)
    56c0:	200002bc 	.word	0x200002bc

000056c4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    56c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56c6:	46c6      	mov	lr, r8
    56c8:	b500      	push	{lr}
    56ca:	4c59      	ldr	r4, [pc, #356]	; (5830 <f_open+0x16c>)
    56cc:	44a5      	add	sp, r4
    56ce:	0005      	movs	r5, r0
    56d0:	9101      	str	r1, [sp, #4]
    56d2:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    56d4:	2300      	movs	r3, #0
    56d6:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    56d8:	261f      	movs	r6, #31
    56da:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    56dc:	221e      	movs	r2, #30
    56de:	403a      	ands	r2, r7
    56e0:	a985      	add	r1, sp, #532	; 0x214
    56e2:	a801      	add	r0, sp, #4
    56e4:	4b53      	ldr	r3, [pc, #332]	; (5834 <f_open+0x170>)
    56e6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    56e8:	ab82      	add	r3, sp, #520	; 0x208
    56ea:	938b      	str	r3, [sp, #556]	; 0x22c
    56ec:	ab02      	add	r3, sp, #8
    56ee:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    56f0:	2800      	cmp	r0, #0
    56f2:	d006      	beq.n	5702 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    56f4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    56f6:	231c      	movs	r3, #28
    56f8:	423b      	tst	r3, r7
    56fa:	d145      	bne.n	5788 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    56fc:	2800      	cmp	r0, #0
    56fe:	d13d      	bne.n	577c <f_open+0xb8>
    5700:	e00c      	b.n	571c <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    5702:	9901      	ldr	r1, [sp, #4]
    5704:	a885      	add	r0, sp, #532	; 0x214
    5706:	4b4c      	ldr	r3, [pc, #304]	; (5838 <f_open+0x174>)
    5708:	4798      	blx	r3
	dir = dj.dir;
    570a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    570c:	2800      	cmp	r0, #0
    570e:	d1f2      	bne.n	56f6 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    5710:	2c00      	cmp	r4, #0
    5712:	d100      	bne.n	5716 <f_open+0x52>
    5714:	e086      	b.n	5824 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5716:	231c      	movs	r3, #28
    5718:	423b      	tst	r3, r7
    571a:	d146      	bne.n	57aa <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    571c:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    571e:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5720:	06da      	lsls	r2, r3, #27
    5722:	d42b      	bmi.n	577c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5724:	07ba      	lsls	r2, r7, #30
    5726:	d502      	bpl.n	572e <f_open+0x6a>
					res = FR_DENIED;
    5728:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    572a:	07db      	lsls	r3, r3, #31
    572c:	d426      	bmi.n	577c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    572e:	073b      	lsls	r3, r7, #28
    5730:	d501      	bpl.n	5736 <f_open+0x72>
			mode |= FA__WRITTEN;
    5732:	2320      	movs	r3, #32
    5734:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    5736:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    573a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    573c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    573e:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5740:	7d62      	ldrb	r2, [r4, #21]
    5742:	0212      	lsls	r2, r2, #8
    5744:	7d23      	ldrb	r3, [r4, #20]
    5746:	4313      	orrs	r3, r2
    5748:	041b      	lsls	r3, r3, #16
    574a:	7ee1      	ldrb	r1, [r4, #27]
    574c:	0209      	lsls	r1, r1, #8
    574e:	7ea2      	ldrb	r2, [r4, #26]
    5750:	430a      	orrs	r2, r1
    5752:	4313      	orrs	r3, r2
    5754:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    5756:	7fe3      	ldrb	r3, [r4, #31]
    5758:	061b      	lsls	r3, r3, #24
    575a:	7fa2      	ldrb	r2, [r4, #30]
    575c:	0412      	lsls	r2, r2, #16
    575e:	4313      	orrs	r3, r2
    5760:	7f22      	ldrb	r2, [r4, #28]
    5762:	4313      	orrs	r3, r2
    5764:	7f62      	ldrb	r2, [r4, #29]
    5766:	0212      	lsls	r2, r2, #8
    5768:	4313      	orrs	r3, r2
    576a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    576c:	2300      	movs	r3, #0
    576e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    5770:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    5772:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5774:	602b      	str	r3, [r5, #0]
    5776:	88db      	ldrh	r3, [r3, #6]
    5778:	80ab      	strh	r3, [r5, #4]
    577a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    577c:	238e      	movs	r3, #142	; 0x8e
    577e:	009b      	lsls	r3, r3, #2
    5780:	449d      	add	sp, r3
    5782:	bc04      	pop	{r2}
    5784:	4690      	mov	r8, r2
    5786:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    5788:	2804      	cmp	r0, #4
    578a:	d005      	beq.n	5798 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    578c:	2308      	movs	r3, #8
    578e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    5790:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    5792:	2800      	cmp	r0, #0
    5794:	d0d3      	beq.n	573e <f_open+0x7a>
    5796:	e7f1      	b.n	577c <f_open+0xb8>
				res = dir_register(&dj);
    5798:	a885      	add	r0, sp, #532	; 0x214
    579a:	4b28      	ldr	r3, [pc, #160]	; (583c <f_open+0x178>)
    579c:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    579e:	2308      	movs	r3, #8
    57a0:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    57a2:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    57a4:	2800      	cmp	r0, #0
    57a6:	d008      	beq.n	57ba <f_open+0xf6>
    57a8:	e7e8      	b.n	577c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    57aa:	7ae3      	ldrb	r3, [r4, #11]
    57ac:	2211      	movs	r2, #17
				res = FR_DENIED;
    57ae:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    57b0:	421a      	tst	r2, r3
    57b2:	d1e3      	bne.n	577c <f_open+0xb8>
					res = FR_EXIST;
    57b4:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    57b6:	077b      	lsls	r3, r7, #29
    57b8:	d4e0      	bmi.n	577c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    57ba:	0733      	lsls	r3, r6, #28
    57bc:	d5bb      	bpl.n	5736 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    57be:	4b20      	ldr	r3, [pc, #128]	; (5840 <f_open+0x17c>)
    57c0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    57c2:	73a0      	strb	r0, [r4, #14]
    57c4:	0a03      	lsrs	r3, r0, #8
    57c6:	73e3      	strb	r3, [r4, #15]
    57c8:	0c03      	lsrs	r3, r0, #16
    57ca:	7423      	strb	r3, [r4, #16]
    57cc:	0e00      	lsrs	r0, r0, #24
    57ce:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    57d0:	2300      	movs	r3, #0
    57d2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    57d4:	7723      	strb	r3, [r4, #28]
    57d6:	7763      	strb	r3, [r4, #29]
    57d8:	77a3      	strb	r3, [r4, #30]
    57da:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    57dc:	7d62      	ldrb	r2, [r4, #21]
    57de:	0212      	lsls	r2, r2, #8
    57e0:	7d27      	ldrb	r7, [r4, #20]
    57e2:	4317      	orrs	r7, r2
    57e4:	043f      	lsls	r7, r7, #16
    57e6:	7ee1      	ldrb	r1, [r4, #27]
    57e8:	0209      	lsls	r1, r1, #8
    57ea:	7ea2      	ldrb	r2, [r4, #26]
    57ec:	430a      	orrs	r2, r1
    57ee:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    57f0:	76a3      	strb	r3, [r4, #26]
    57f2:	76e3      	strb	r3, [r4, #27]
    57f4:	7523      	strb	r3, [r4, #20]
    57f6:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    57f8:	9885      	ldr	r0, [sp, #532]	; 0x214
    57fa:	3301      	adds	r3, #1
    57fc:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    57fe:	2f00      	cmp	r7, #0
    5800:	d097      	beq.n	5732 <f_open+0x6e>
				dw = dj.fs->winsect;
    5802:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5804:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    5806:	0039      	movs	r1, r7
    5808:	4b0e      	ldr	r3, [pc, #56]	; (5844 <f_open+0x180>)
    580a:	4798      	blx	r3
				if (res == FR_OK) {
    580c:	2800      	cmp	r0, #0
    580e:	d1b5      	bne.n	577c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5810:	9885      	ldr	r0, [sp, #532]	; 0x214
    5812:	3f01      	subs	r7, #1
    5814:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    5816:	4641      	mov	r1, r8
    5818:	4b0b      	ldr	r3, [pc, #44]	; (5848 <f_open+0x184>)
    581a:	4798      	blx	r3
	if (res == FR_OK) {
    581c:	2800      	cmp	r0, #0
    581e:	d100      	bne.n	5822 <f_open+0x15e>
    5820:	e787      	b.n	5732 <f_open+0x6e>
    5822:	e7ab      	b.n	577c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5824:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    5826:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5828:	423b      	tst	r3, r7
    582a:	d0b2      	beq.n	5792 <f_open+0xce>
			res = FR_INVALID_NAME;
    582c:	2006      	movs	r0, #6
    582e:	e7ad      	b.n	578c <f_open+0xc8>
    5830:	fffffdc8 	.word	0xfffffdc8
    5834:	00004455 	.word	0x00004455
    5838:	00005351 	.word	0x00005351
    583c:	00004f79 	.word	0x00004f79
    5840:	000042d5 	.word	0x000042d5
    5844:	00004c45 	.word	0x00004c45
    5848:	00004805 	.word	0x00004805

0000584c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    584c:	b5f0      	push	{r4, r5, r6, r7, lr}
    584e:	46de      	mov	lr, fp
    5850:	4657      	mov	r7, sl
    5852:	464e      	mov	r6, r9
    5854:	4645      	mov	r5, r8
    5856:	b5e0      	push	{r5, r6, r7, lr}
    5858:	b083      	sub	sp, #12
    585a:	0004      	movs	r4, r0
    585c:	000d      	movs	r5, r1
    585e:	0016      	movs	r6, r2
    5860:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    5862:	2300      	movs	r3, #0
    5864:	464a      	mov	r2, r9
    5866:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5868:	8881      	ldrh	r1, [r0, #4]
    586a:	6800      	ldr	r0, [r0, #0]
    586c:	4b7f      	ldr	r3, [pc, #508]	; (5a6c <f_write+0x220>)
    586e:	4798      	blx	r3
    5870:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5872:	2800      	cmp	r0, #0
    5874:	d000      	beq.n	5878 <f_write+0x2c>
    5876:	e0f1      	b.n	5a5c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5878:	79a3      	ldrb	r3, [r4, #6]
    587a:	b25a      	sxtb	r2, r3
    587c:	2a00      	cmp	r2, #0
    587e:	da00      	bge.n	5882 <f_write+0x36>
    5880:	e0ea      	b.n	5a58 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    5882:	079b      	lsls	r3, r3, #30
    5884:	d402      	bmi.n	588c <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    5886:	2307      	movs	r3, #7
    5888:	9300      	str	r3, [sp, #0]
    588a:	e0e7      	b.n	5a5c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    588c:	68e3      	ldr	r3, [r4, #12]
    588e:	199a      	adds	r2, r3, r6
    5890:	4293      	cmp	r3, r2
    5892:	d810      	bhi.n	58b6 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    5894:	2e00      	cmp	r6, #0
    5896:	d00e      	beq.n	58b6 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5898:	002f      	movs	r7, r5
    589a:	e07b      	b.n	5994 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    589c:	2100      	movs	r1, #0
    589e:	4b74      	ldr	r3, [pc, #464]	; (5a70 <f_write+0x224>)
    58a0:	4798      	blx	r3
    58a2:	0003      	movs	r3, r0
    58a4:	6120      	str	r0, [r4, #16]
    58a6:	e003      	b.n	58b0 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    58a8:	6961      	ldr	r1, [r4, #20]
    58aa:	4b71      	ldr	r3, [pc, #452]	; (5a70 <f_write+0x224>)
    58ac:	4798      	blx	r3
    58ae:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    58b0:	2b00      	cmp	r3, #0
    58b2:	d000      	beq.n	58b6 <f_write+0x6a>
    58b4:	e080      	b.n	59b8 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    58b6:	68a3      	ldr	r3, [r4, #8]
    58b8:	68e2      	ldr	r2, [r4, #12]
    58ba:	4293      	cmp	r3, r2
    58bc:	d900      	bls.n	58c0 <f_write+0x74>
    58be:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    58c0:	79a3      	ldrb	r3, [r4, #6]
    58c2:	2220      	movs	r2, #32
    58c4:	4313      	orrs	r3, r2
    58c6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    58c8:	e0c8      	b.n	5a5c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    58ca:	79a2      	ldrb	r2, [r4, #6]
    58cc:	3b81      	subs	r3, #129	; 0x81
    58ce:	4313      	orrs	r3, r2
    58d0:	71a3      	strb	r3, [r4, #6]
    58d2:	2302      	movs	r3, #2
    58d4:	9300      	str	r3, [sp, #0]
    58d6:	e0c1      	b.n	5a5c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    58d8:	79a2      	ldrb	r2, [r4, #6]
    58da:	3b7f      	subs	r3, #127	; 0x7f
    58dc:	4313      	orrs	r3, r2
    58de:	71a3      	strb	r3, [r4, #6]
    58e0:	2301      	movs	r3, #1
    58e2:	9300      	str	r3, [sp, #0]
    58e4:	e0ba      	b.n	5a5c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    58e6:	2100      	movs	r1, #0
    58e8:	4b62      	ldr	r3, [pc, #392]	; (5a74 <f_write+0x228>)
    58ea:	4798      	blx	r3
    58ec:	2800      	cmp	r0, #0
    58ee:	d06d      	beq.n	59cc <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    58f0:	79a2      	ldrb	r2, [r4, #6]
    58f2:	2380      	movs	r3, #128	; 0x80
    58f4:	425b      	negs	r3, r3
    58f6:	4313      	orrs	r3, r2
    58f8:	71a3      	strb	r3, [r4, #6]
    58fa:	2301      	movs	r3, #1
    58fc:	9300      	str	r3, [sp, #0]
    58fe:	e0ad      	b.n	5a5c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5900:	79a2      	ldrb	r2, [r4, #6]
    5902:	2380      	movs	r3, #128	; 0x80
    5904:	425b      	negs	r3, r3
    5906:	4313      	orrs	r3, r2
    5908:	71a3      	strb	r3, [r4, #6]
    590a:	2302      	movs	r3, #2
    590c:	9300      	str	r3, [sp, #0]
    590e:	e0a5      	b.n	5a5c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5910:	79a2      	ldrb	r2, [r4, #6]
    5912:	2380      	movs	r3, #128	; 0x80
    5914:	425b      	negs	r3, r3
    5916:	4313      	orrs	r3, r2
    5918:	71a3      	strb	r3, [r4, #6]
    591a:	2301      	movs	r3, #1
    591c:	9300      	str	r3, [sp, #0]
    591e:	e09d      	b.n	5a5c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5920:	0240      	lsls	r0, r0, #9
    5922:	1839      	adds	r1, r7, r0
    5924:	3330      	adds	r3, #48	; 0x30
    5926:	0018      	movs	r0, r3
    5928:	2280      	movs	r2, #128	; 0x80
    592a:	0092      	lsls	r2, r2, #2
    592c:	4b52      	ldr	r3, [pc, #328]	; (5a78 <f_write+0x22c>)
    592e:	4798      	blx	r3
					fp->fs->wflag = 0;
    5930:	2300      	movs	r3, #0
    5932:	6822      	ldr	r2, [r4, #0]
    5934:	7113      	strb	r3, [r2, #4]
    5936:	e072      	b.n	5a1e <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5938:	68a3      	ldr	r3, [r4, #8]
    593a:	68e2      	ldr	r2, [r4, #12]
    593c:	4293      	cmp	r3, r2
    593e:	d271      	bcs.n	5a24 <f_write+0x1d8>
			fp->dsect = sect;
    5940:	4643      	mov	r3, r8
    5942:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5944:	68a3      	ldr	r3, [r4, #8]
    5946:	05dd      	lsls	r5, r3, #23
    5948:	0ded      	lsrs	r5, r5, #23
    594a:	2380      	movs	r3, #128	; 0x80
    594c:	009b      	lsls	r3, r3, #2
    594e:	1b5d      	subs	r5, r3, r5
    5950:	42b5      	cmp	r5, r6
    5952:	d900      	bls.n	5956 <f_write+0x10a>
    5954:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    5956:	69a1      	ldr	r1, [r4, #24]
    5958:	6820      	ldr	r0, [r4, #0]
    595a:	4b46      	ldr	r3, [pc, #280]	; (5a74 <f_write+0x228>)
    595c:	4798      	blx	r3
    595e:	2800      	cmp	r0, #0
    5960:	d172      	bne.n	5a48 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    5962:	68a3      	ldr	r3, [r4, #8]
    5964:	05d8      	lsls	r0, r3, #23
    5966:	0dc0      	lsrs	r0, r0, #23
    5968:	3030      	adds	r0, #48	; 0x30
    596a:	6823      	ldr	r3, [r4, #0]
    596c:	469c      	mov	ip, r3
    596e:	4460      	add	r0, ip
    5970:	002a      	movs	r2, r5
    5972:	0039      	movs	r1, r7
    5974:	4b40      	ldr	r3, [pc, #256]	; (5a78 <f_write+0x22c>)
    5976:	4798      	blx	r3
		fp->fs->wflag = 1;
    5978:	2301      	movs	r3, #1
    597a:	6822      	ldr	r2, [r4, #0]
    597c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    597e:	197f      	adds	r7, r7, r5
    5980:	68a3      	ldr	r3, [r4, #8]
    5982:	195b      	adds	r3, r3, r5
    5984:	60a3      	str	r3, [r4, #8]
    5986:	464b      	mov	r3, r9
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	195b      	adds	r3, r3, r5
    598c:	464a      	mov	r2, r9
    598e:	6013      	str	r3, [r2, #0]
    5990:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    5992:	d090      	beq.n	58b6 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    5994:	68a3      	ldr	r3, [r4, #8]
    5996:	05da      	lsls	r2, r3, #23
    5998:	d1d4      	bne.n	5944 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    599a:	6820      	ldr	r0, [r4, #0]
    599c:	7882      	ldrb	r2, [r0, #2]
    599e:	3a01      	subs	r2, #1
    59a0:	0a5d      	lsrs	r5, r3, #9
    59a2:	4015      	ands	r5, r2
    59a4:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    59a6:	2d00      	cmp	r5, #0
    59a8:	d10b      	bne.n	59c2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    59aa:	2b00      	cmp	r3, #0
    59ac:	d000      	beq.n	59b0 <f_write+0x164>
    59ae:	e77b      	b.n	58a8 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    59b0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    59b2:	2b00      	cmp	r3, #0
    59b4:	d100      	bne.n	59b8 <f_write+0x16c>
    59b6:	e771      	b.n	589c <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    59b8:	2b01      	cmp	r3, #1
    59ba:	d086      	beq.n	58ca <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    59bc:	1c5a      	adds	r2, r3, #1
    59be:	d08b      	beq.n	58d8 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    59c0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    59c2:	6820      	ldr	r0, [r4, #0]
    59c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    59c6:	69a2      	ldr	r2, [r4, #24]
    59c8:	4293      	cmp	r3, r2
    59ca:	d08c      	beq.n	58e6 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    59cc:	6823      	ldr	r3, [r4, #0]
    59ce:	469a      	mov	sl, r3
    59d0:	6961      	ldr	r1, [r4, #20]
    59d2:	0018      	movs	r0, r3
    59d4:	4b29      	ldr	r3, [pc, #164]	; (5a7c <f_write+0x230>)
    59d6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    59d8:	2800      	cmp	r0, #0
    59da:	d091      	beq.n	5900 <f_write+0xb4>
			sect += csect;
    59dc:	4680      	mov	r8, r0
    59de:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    59e0:	0a73      	lsrs	r3, r6, #9
    59e2:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    59e4:	d0a8      	beq.n	5938 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    59e6:	4653      	mov	r3, sl
    59e8:	789b      	ldrb	r3, [r3, #2]
    59ea:	465a      	mov	r2, fp
    59ec:	18aa      	adds	r2, r5, r2
    59ee:	429a      	cmp	r2, r3
    59f0:	d901      	bls.n	59f6 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    59f2:	1b5b      	subs	r3, r3, r5
    59f4:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    59f6:	465b      	mov	r3, fp
    59f8:	466a      	mov	r2, sp
    59fa:	71d3      	strb	r3, [r2, #7]
    59fc:	79d3      	ldrb	r3, [r2, #7]
    59fe:	4652      	mov	r2, sl
    5a00:	7850      	ldrb	r0, [r2, #1]
    5a02:	4642      	mov	r2, r8
    5a04:	0039      	movs	r1, r7
    5a06:	4d1e      	ldr	r5, [pc, #120]	; (5a80 <f_write+0x234>)
    5a08:	47a8      	blx	r5
    5a0a:	2800      	cmp	r0, #0
    5a0c:	d000      	beq.n	5a10 <f_write+0x1c4>
    5a0e:	e77f      	b.n	5910 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5a10:	6823      	ldr	r3, [r4, #0]
    5a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a14:	4641      	mov	r1, r8
    5a16:	1a50      	subs	r0, r2, r1
    5a18:	4583      	cmp	fp, r0
    5a1a:	d900      	bls.n	5a1e <f_write+0x1d2>
    5a1c:	e780      	b.n	5920 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5a1e:	465b      	mov	r3, fp
    5a20:	025d      	lsls	r5, r3, #9
				continue;
    5a22:	e7ac      	b.n	597e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5a24:	2100      	movs	r1, #0
    5a26:	4650      	mov	r0, sl
    5a28:	4b12      	ldr	r3, [pc, #72]	; (5a74 <f_write+0x228>)
    5a2a:	4798      	blx	r3
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d103      	bne.n	5a38 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5a30:	6823      	ldr	r3, [r4, #0]
    5a32:	4642      	mov	r2, r8
    5a34:	62da      	str	r2, [r3, #44]	; 0x2c
    5a36:	e783      	b.n	5940 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5a38:	79a2      	ldrb	r2, [r4, #6]
    5a3a:	2380      	movs	r3, #128	; 0x80
    5a3c:	425b      	negs	r3, r3
    5a3e:	4313      	orrs	r3, r2
    5a40:	71a3      	strb	r3, [r4, #6]
    5a42:	2301      	movs	r3, #1
    5a44:	9300      	str	r3, [sp, #0]
    5a46:	e009      	b.n	5a5c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5a48:	79a2      	ldrb	r2, [r4, #6]
    5a4a:	2380      	movs	r3, #128	; 0x80
    5a4c:	425b      	negs	r3, r3
    5a4e:	4313      	orrs	r3, r2
    5a50:	71a3      	strb	r3, [r4, #6]
    5a52:	2301      	movs	r3, #1
    5a54:	9300      	str	r3, [sp, #0]
    5a56:	e001      	b.n	5a5c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5a58:	2302      	movs	r3, #2
    5a5a:	9300      	str	r3, [sp, #0]
}
    5a5c:	9800      	ldr	r0, [sp, #0]
    5a5e:	b003      	add	sp, #12
    5a60:	bc3c      	pop	{r2, r3, r4, r5}
    5a62:	4690      	mov	r8, r2
    5a64:	4699      	mov	r9, r3
    5a66:	46a2      	mov	sl, r4
    5a68:	46ab      	mov	fp, r5
    5a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a6c:	00004381 	.word	0x00004381
    5a70:	00004b81 	.word	0x00004b81
    5a74:	00004805 	.word	0x00004805
    5a78:	00004325 	.word	0x00004325
    5a7c:	0000434b 	.word	0x0000434b
    5a80:	000041e5 	.word	0x000041e5

00005a84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    5a84:	b570      	push	{r4, r5, r6, lr}
    5a86:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5a88:	8881      	ldrh	r1, [r0, #4]
    5a8a:	6800      	ldr	r0, [r0, #0]
    5a8c:	4b1c      	ldr	r3, [pc, #112]	; (5b00 <f_sync+0x7c>)
    5a8e:	4798      	blx	r3
	if (res == FR_OK) {
    5a90:	2800      	cmp	r0, #0
    5a92:	d102      	bne.n	5a9a <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5a94:	79a3      	ldrb	r3, [r4, #6]
    5a96:	069b      	lsls	r3, r3, #26
    5a98:	d400      	bmi.n	5a9c <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    5a9a:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    5a9c:	69e1      	ldr	r1, [r4, #28]
    5a9e:	6820      	ldr	r0, [r4, #0]
    5aa0:	4b18      	ldr	r3, [pc, #96]	; (5b04 <f_sync+0x80>)
    5aa2:	4798      	blx	r3
			if (res == FR_OK) {
    5aa4:	2800      	cmp	r0, #0
    5aa6:	d1f8      	bne.n	5a9a <f_sync+0x16>
				dir = fp->dir_ptr;
    5aa8:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    5aaa:	7aeb      	ldrb	r3, [r5, #11]
    5aac:	2220      	movs	r2, #32
    5aae:	4313      	orrs	r3, r2
    5ab0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    5ab2:	7b23      	ldrb	r3, [r4, #12]
    5ab4:	772b      	strb	r3, [r5, #28]
    5ab6:	89a3      	ldrh	r3, [r4, #12]
    5ab8:	0a1b      	lsrs	r3, r3, #8
    5aba:	776b      	strb	r3, [r5, #29]
    5abc:	89e3      	ldrh	r3, [r4, #14]
    5abe:	77ab      	strb	r3, [r5, #30]
    5ac0:	7be3      	ldrb	r3, [r4, #15]
    5ac2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    5ac4:	7c23      	ldrb	r3, [r4, #16]
    5ac6:	76ab      	strb	r3, [r5, #26]
    5ac8:	8a23      	ldrh	r3, [r4, #16]
    5aca:	0a1b      	lsrs	r3, r3, #8
    5acc:	76eb      	strb	r3, [r5, #27]
    5ace:	8a63      	ldrh	r3, [r4, #18]
    5ad0:	752b      	strb	r3, [r5, #20]
    5ad2:	8a63      	ldrh	r3, [r4, #18]
    5ad4:	0a1b      	lsrs	r3, r3, #8
    5ad6:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    5ad8:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <f_sync+0x84>)
    5ada:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    5adc:	75a8      	strb	r0, [r5, #22]
    5ade:	0a03      	lsrs	r3, r0, #8
    5ae0:	75eb      	strb	r3, [r5, #23]
    5ae2:	0c03      	lsrs	r3, r0, #16
    5ae4:	762b      	strb	r3, [r5, #24]
    5ae6:	0e00      	lsrs	r0, r0, #24
    5ae8:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    5aea:	79a3      	ldrb	r3, [r4, #6]
    5aec:	2220      	movs	r2, #32
    5aee:	4393      	bics	r3, r2
    5af0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    5af2:	2301      	movs	r3, #1
    5af4:	6822      	ldr	r2, [r4, #0]
    5af6:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5af8:	6820      	ldr	r0, [r4, #0]
    5afa:	4b04      	ldr	r3, [pc, #16]	; (5b0c <f_sync+0x88>)
    5afc:	4798      	blx	r3
    5afe:	e7cc      	b.n	5a9a <f_sync+0x16>
    5b00:	00004381 	.word	0x00004381
    5b04:	00004805 	.word	0x00004805
    5b08:	000042d5 	.word	0x000042d5
    5b0c:	0000525d 	.word	0x0000525d

00005b10 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5b10:	b510      	push	{r4, lr}
    5b12:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5b14:	4b03      	ldr	r3, [pc, #12]	; (5b24 <f_close+0x14>)
    5b16:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5b18:	2800      	cmp	r0, #0
    5b1a:	d101      	bne.n	5b20 <f_close+0x10>
    5b1c:	2300      	movs	r3, #0
    5b1e:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5b20:	bd10      	pop	{r4, pc}
    5b22:	46c0      	nop			; (mov r8, r8)
    5b24:	00005a85 	.word	0x00005a85

00005b28 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5b28:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5b2a:	287f      	cmp	r0, #127	; 0x7f
    5b2c:	d911      	bls.n	5b52 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5b2e:	2900      	cmp	r1, #0
    5b30:	d111      	bne.n	5b56 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    5b32:	28c7      	cmp	r0, #199	; 0xc7
    5b34:	d017      	beq.n	5b66 <ff_convert+0x3e>
    5b36:	4a0d      	ldr	r2, [pc, #52]	; (5b6c <ff_convert+0x44>)
    5b38:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5b3a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5b3c:	8811      	ldrh	r1, [r2, #0]
    5b3e:	4281      	cmp	r1, r0
    5b40:	d004      	beq.n	5b4c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    5b42:	3301      	adds	r3, #1
    5b44:	b29b      	uxth	r3, r3
    5b46:	3202      	adds	r2, #2
    5b48:	2b80      	cmp	r3, #128	; 0x80
    5b4a:	d1f7      	bne.n	5b3c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5b4c:	3380      	adds	r3, #128	; 0x80
    5b4e:	20ff      	movs	r0, #255	; 0xff
    5b50:	4003      	ands	r3, r0
		}
	}

	return c;
}
    5b52:	0018      	movs	r0, r3
    5b54:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5b56:	2300      	movs	r3, #0
    5b58:	28ff      	cmp	r0, #255	; 0xff
    5b5a:	d8fa      	bhi.n	5b52 <ff_convert+0x2a>
    5b5c:	3880      	subs	r0, #128	; 0x80
    5b5e:	0040      	lsls	r0, r0, #1
    5b60:	4b02      	ldr	r3, [pc, #8]	; (5b6c <ff_convert+0x44>)
    5b62:	5ac3      	ldrh	r3, [r0, r3]
    5b64:	e7f5      	b.n	5b52 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5b66:	2300      	movs	r3, #0
    5b68:	e7f0      	b.n	5b4c <ff_convert+0x24>
    5b6a:	46c0      	nop			; (mov r8, r8)
    5b6c:	0000aad4 	.word	0x0000aad4

00005b70 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5b70:	2861      	cmp	r0, #97	; 0x61
    5b72:	d014      	beq.n	5b9e <ff_wtoupper+0x2e>
    5b74:	4b0b      	ldr	r3, [pc, #44]	; (5ba4 <ff_wtoupper+0x34>)
    5b76:	3304      	adds	r3, #4
    5b78:	2101      	movs	r1, #1
    5b7a:	2262      	movs	r2, #98	; 0x62
    5b7c:	4290      	cmp	r0, r2
    5b7e:	d007      	beq.n	5b90 <ff_wtoupper+0x20>
    5b80:	3101      	adds	r1, #1
    5b82:	3302      	adds	r3, #2
    5b84:	1e9a      	subs	r2, r3, #2
    5b86:	8812      	ldrh	r2, [r2, #0]
    5b88:	2a00      	cmp	r2, #0
    5b8a:	d1f7      	bne.n	5b7c <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5b8c:	0003      	movs	r3, r0
    5b8e:	e004      	b.n	5b9a <ff_wtoupper+0x2a>
    5b90:	1e03      	subs	r3, r0, #0
    5b92:	d002      	beq.n	5b9a <ff_wtoupper+0x2a>
    5b94:	0049      	lsls	r1, r1, #1
    5b96:	4b04      	ldr	r3, [pc, #16]	; (5ba8 <ff_wtoupper+0x38>)
    5b98:	5acb      	ldrh	r3, [r1, r3]
}
    5b9a:	0018      	movs	r0, r3
    5b9c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5b9e:	2100      	movs	r1, #0
    5ba0:	e7f8      	b.n	5b94 <ff_wtoupper+0x24>
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	0000abd4 	.word	0x0000abd4
    5ba8:	0000adb4 	.word	0x0000adb4

00005bac <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    5bac:	b570      	push	{r4, r5, r6, lr}
    5bae:	b088      	sub	sp, #32
	irq_initialize_vectors();
	cpu_irq_enable();
    5bb0:	2501      	movs	r5, #1
    5bb2:	4b3b      	ldr	r3, [pc, #236]	; (5ca0 <main+0xf4>)
    5bb4:	701d      	strb	r5, [r3, #0]
    5bb6:	f3bf 8f5f 	dmb	sy
    5bba:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    5bbc:	4b39      	ldr	r3, [pc, #228]	; (5ca4 <main+0xf8>)
    5bbe:	2400      	movs	r4, #0
    5bc0:	701c      	strb	r4, [r3, #0]
    5bc2:	705c      	strb	r4, [r3, #1]
    5bc4:	709c      	strb	r4, [r3, #2]
    5bc6:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5bc8:	711d      	strb	r5, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    5bca:	4b37      	ldr	r3, [pc, #220]	; (5ca8 <main+0xfc>)
    5bcc:	4798      	blx	r3
	
	delay_init();
    5bce:	4b37      	ldr	r3, [pc, #220]	; (5cac <main+0x100>)
    5bd0:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    5bd2:	aa03      	add	r2, sp, #12
    5bd4:	23a0      	movs	r3, #160	; 0xa0
    5bd6:	011b      	lsls	r3, r3, #4
    5bd8:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    5bda:	7094      	strb	r4, [r2, #2]
	config->continuously_update = false;
    5bdc:	70d4      	strb	r4, [r2, #3]
	config->year_init_value     = 2000;
    5bde:	23fa      	movs	r3, #250	; 0xfa
    5be0:	00db      	lsls	r3, r3, #3
    5be2:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    5be4:	7214      	strb	r4, [r2, #8]
    5be6:	7254      	strb	r4, [r2, #9]
    5be8:	7294      	strb	r4, [r2, #10]
    5bea:	72d4      	strb	r4, [r2, #11]
    5bec:	7315      	strb	r5, [r2, #12]
    5bee:	7355      	strb	r5, [r2, #13]
    5bf0:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    5bf2:	2306      	movs	r3, #6
    5bf4:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    5bf6:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    5bf8:	4c2d      	ldr	r4, [pc, #180]	; (5cb0 <main+0x104>)
    5bfa:	492e      	ldr	r1, [pc, #184]	; (5cb4 <main+0x108>)
    5bfc:	0020      	movs	r0, r4
    5bfe:	4b2e      	ldr	r3, [pc, #184]	; (5cb8 <main+0x10c>)
    5c00:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5c02:	0020      	movs	r0, r4
    5c04:	4b2d      	ldr	r3, [pc, #180]	; (5cbc <main+0x110>)
    5c06:	4798      	blx	r3
	current_time.year = 2018;
    5c08:	a901      	add	r1, sp, #4
    5c0a:	4b2d      	ldr	r3, [pc, #180]	; (5cc0 <main+0x114>)
    5c0c:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    5c0e:	2302      	movs	r3, #2
    5c10:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    5c12:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    5c14:	3309      	adds	r3, #9
    5c16:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    5c18:	331c      	adds	r3, #28
    5c1a:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    5c1c:	3303      	adds	r3, #3
    5c1e:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    5c20:	0020      	movs	r0, r4
    5c22:	4b28      	ldr	r3, [pc, #160]	; (5cc4 <main+0x118>)
    5c24:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    5c26:	0020      	movs	r0, r4
    5c28:	4b27      	ldr	r3, [pc, #156]	; (5cc8 <main+0x11c>)
    5c2a:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    5c2c:	4b27      	ldr	r3, [pc, #156]	; (5ccc <main+0x120>)
    5c2e:	4798      	blx	r3
	ui_powerdown();
    5c30:	4b27      	ldr	r3, [pc, #156]	; (5cd0 <main+0x124>)
    5c32:	4798      	blx	r3
	ui_cdc_init();
    5c34:	4b27      	ldr	r3, [pc, #156]	; (5cd4 <main+0x128>)
    5c36:	4798      	blx	r3
	
	audio_in_init();
    5c38:	4b27      	ldr	r3, [pc, #156]	; (5cd8 <main+0x12c>)
    5c3a:	4798      	blx	r3
	audio_sync_init();
    5c3c:	4b27      	ldr	r3, [pc, #156]	; (5cdc <main+0x130>)
    5c3e:	4798      	blx	r3
	
	sd_mmc_init();
    5c40:	4b27      	ldr	r3, [pc, #156]	; (5ce0 <main+0x134>)
    5c42:	4798      	blx	r3

	memories_initialization();
    5c44:	4b27      	ldr	r3, [pc, #156]	; (5ce4 <main+0x138>)
    5c46:	4798      	blx	r3

	ui_configure_callback();
    5c48:	4b27      	ldr	r3, [pc, #156]	; (5ce8 <main+0x13c>)
    5c4a:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    5c4c:	4b27      	ldr	r3, [pc, #156]	; (5cec <main+0x140>)
    5c4e:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_request) {
    5c50:	4c27      	ldr	r4, [pc, #156]	; (5cf0 <main+0x144>)
				}
				recording_request = false;
			}
		}
		
		else if(recording_on) {
    5c52:	4d28      	ldr	r5, [pc, #160]	; (5cf4 <main+0x148>)

		}
		
		else if (main_b_msc_enable) {
    5c54:	4e28      	ldr	r6, [pc, #160]	; (5cf8 <main+0x14c>)
    5c56:	e003      	b.n	5c60 <main+0xb4>
			if(sd_test_availability()) {
    5c58:	4b28      	ldr	r3, [pc, #160]	; (5cfc <main+0x150>)
    5c5a:	4798      	blx	r3
    5c5c:	2800      	cmp	r0, #0
    5c5e:	d10b      	bne.n	5c78 <main+0xcc>
		if(recording_request) {
    5c60:	7823      	ldrb	r3, [r4, #0]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d1f8      	bne.n	5c58 <main+0xac>
		else if(recording_on) {
    5c66:	782b      	ldrb	r3, [r5, #0]
    5c68:	2b00      	cmp	r3, #0
    5c6a:	d1f9      	bne.n	5c60 <main+0xb4>
		else if (main_b_msc_enable) {
    5c6c:	7833      	ldrb	r3, [r6, #0]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d0f6      	beq.n	5c60 <main+0xb4>
			if (!udi_msc_process_trans()) {
    5c72:	4b23      	ldr	r3, [pc, #140]	; (5d00 <main+0x154>)
    5c74:	4798      	blx	r3
    5c76:	e7f3      	b.n	5c60 <main+0xb4>
				if(sd_mount_fs()) {
    5c78:	4b22      	ldr	r3, [pc, #136]	; (5d04 <main+0x158>)
    5c7a:	4798      	blx	r3
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d00b      	beq.n	5c98 <main+0xec>
					printf("SD card mounted!\n\r");
    5c80:	4821      	ldr	r0, [pc, #132]	; (5d08 <main+0x15c>)
    5c82:	4b22      	ldr	r3, [pc, #136]	; (5d0c <main+0x160>)
    5c84:	4798      	blx	r3
					audio_record_init();
    5c86:	4b22      	ldr	r3, [pc, #136]	; (5d10 <main+0x164>)
    5c88:	4798      	blx	r3
					recording_on = true;
    5c8a:	2201      	movs	r2, #1
    5c8c:	4b19      	ldr	r3, [pc, #100]	; (5cf4 <main+0x148>)
    5c8e:	701a      	strb	r2, [r3, #0]
				recording_request = false;
    5c90:	2200      	movs	r2, #0
    5c92:	4b17      	ldr	r3, [pc, #92]	; (5cf0 <main+0x144>)
    5c94:	701a      	strb	r2, [r3, #0]
    5c96:	e7e3      	b.n	5c60 <main+0xb4>
					printf("Invalid drive!!\n\r");
    5c98:	481e      	ldr	r0, [pc, #120]	; (5d14 <main+0x168>)
    5c9a:	4b1c      	ldr	r3, [pc, #112]	; (5d0c <main+0x160>)
    5c9c:	4798      	blx	r3
    5c9e:	e7f7      	b.n	5c90 <main+0xe4>
    5ca0:	20000125 	.word	0x20000125
    5ca4:	20000e94 	.word	0x20000e94
    5ca8:	00008c05 	.word	0x00008c05
    5cac:	00007c99 	.word	0x00007c99
    5cb0:	200006b0 	.word	0x200006b0
    5cb4:	40001400 	.word	0x40001400
    5cb8:	00002649 	.word	0x00002649
    5cbc:	000024ed 	.word	0x000024ed
    5cc0:	000007e2 	.word	0x000007e2
    5cc4:	000025b9 	.word	0x000025b9
    5cc8:	00002705 	.word	0x00002705
    5ccc:	000060cd 	.word	0x000060cd
    5cd0:	000061b5 	.word	0x000061b5
    5cd4:	00005fd9 	.word	0x00005fd9
    5cd8:	00000775 	.word	0x00000775
    5cdc:	00000a89 	.word	0x00000a89
    5ce0:	00000d45 	.word	0x00000d45
    5ce4:	00005d71 	.word	0x00005d71
    5ce8:	0000616d 	.word	0x0000616d
    5cec:	00001eed 	.word	0x00001eed
    5cf0:	2000039b 	.word	0x2000039b
    5cf4:	2000039a 	.word	0x2000039a
    5cf8:	20000398 	.word	0x20000398
    5cfc:	00005d75 	.word	0x00005d75
    5d00:	00001c0d 	.word	0x00001c0d
    5d04:	00005e59 	.word	0x00005e59
    5d08:	0000af94 	.word	0x0000af94
    5d0c:	00009355 	.word	0x00009355
    5d10:	00000855 	.word	0x00000855
    5d14:	0000afa8 	.word	0x0000afa8

00005d18 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    5d18:	b510      	push	{r4, lr}
	ui_powerdown();
    5d1a:	4b01      	ldr	r3, [pc, #4]	; (5d20 <main_suspend_action+0x8>)
    5d1c:	4798      	blx	r3
}
    5d1e:	bd10      	pop	{r4, pc}
    5d20:	000061b5 	.word	0x000061b5

00005d24 <main_resume_action>:

void main_resume_action(void)
{
    5d24:	b510      	push	{r4, lr}
	ui_wakeup();
    5d26:	4b01      	ldr	r3, [pc, #4]	; (5d2c <main_resume_action+0x8>)
    5d28:	4798      	blx	r3
}
    5d2a:	bd10      	pop	{r4, pc}
    5d2c:	000061c5 	.word	0x000061c5

00005d30 <main_sof_action>:

void main_sof_action(void)
{
    5d30:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    5d32:	4b05      	ldr	r3, [pc, #20]	; (5d48 <main_sof_action+0x18>)
    5d34:	781b      	ldrb	r3, [r3, #0]
    5d36:	2b00      	cmp	r3, #0
    5d38:	d100      	bne.n	5d3c <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    5d3a:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    5d3c:	4b03      	ldr	r3, [pc, #12]	; (5d4c <main_sof_action+0x1c>)
    5d3e:	4798      	blx	r3
    5d40:	4b03      	ldr	r3, [pc, #12]	; (5d50 <main_sof_action+0x20>)
    5d42:	4798      	blx	r3
    5d44:	e7f9      	b.n	5d3a <main_sof_action+0xa>
    5d46:	46c0      	nop			; (mov r8, r8)
    5d48:	20000398 	.word	0x20000398
    5d4c:	000038e9 	.word	0x000038e9
    5d50:	000061dd 	.word	0x000061dd

00005d54 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    5d54:	2201      	movs	r2, #1
    5d56:	4b02      	ldr	r3, [pc, #8]	; (5d60 <main_msc_enable+0xc>)
    5d58:	701a      	strb	r2, [r3, #0]
	return true;
}
    5d5a:	2001      	movs	r0, #1
    5d5c:	4770      	bx	lr
    5d5e:	46c0      	nop			; (mov r8, r8)
    5d60:	20000398 	.word	0x20000398

00005d64 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    5d64:	2200      	movs	r2, #0
    5d66:	4b01      	ldr	r3, [pc, #4]	; (5d6c <main_msc_disable+0x8>)
    5d68:	701a      	strb	r2, [r3, #0]
}
    5d6a:	4770      	bx	lr
    5d6c:	20000398 	.word	0x20000398

00005d70 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    5d70:	4770      	bx	lr
	...

00005d74 <sd_test_availability>:
extern FIL file_object;

extern bool recording_request;

bool sd_test_availability(void)
{
    5d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    5d76:	4c2b      	ldr	r4, [pc, #172]	; (5e24 <sd_test_availability+0xb0>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    5d78:	4d2b      	ldr	r5, [pc, #172]	; (5e28 <sd_test_availability+0xb4>)
    5d7a:	e027      	b.n	5dcc <sd_test_availability+0x58>
			printf("Card install fail!\n\r");
    5d7c:	482b      	ldr	r0, [pc, #172]	; (5e2c <sd_test_availability+0xb8>)
    5d7e:	4e2c      	ldr	r6, [pc, #176]	; (5e30 <sd_test_availability+0xbc>)
    5d80:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    5d82:	482c      	ldr	r0, [pc, #176]	; (5e34 <sd_test_availability+0xc0>)
    5d84:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    5d86:	4e2c      	ldr	r6, [pc, #176]	; (5e38 <sd_test_availability+0xc4>)
    5d88:	2000      	movs	r0, #0
    5d8a:	47b0      	blx	r6
    5d8c:	2802      	cmp	r0, #2
    5d8e:	d1fb      	bne.n	5d88 <sd_test_availability+0x14>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5d90:	4b2a      	ldr	r3, [pc, #168]	; (5e3c <sd_test_availability+0xc8>)
    5d92:	2280      	movs	r2, #128	; 0x80
    5d94:	0152      	lsls	r2, r2, #5
    5d96:	61da      	str	r2, [r3, #28]
    5d98:	2280      	movs	r2, #128	; 0x80
    5d9a:	0212      	lsls	r2, r2, #8
    5d9c:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    5d9e:	2000      	movs	r0, #0
    5da0:	4b21      	ldr	r3, [pc, #132]	; (5e28 <sd_test_availability+0xb4>)
    5da2:	4798      	blx	r3
    5da4:	2296      	movs	r2, #150	; 0x96
    5da6:	0052      	lsls	r2, r2, #1
    5da8:	2300      	movs	r3, #0
    5daa:	2100      	movs	r1, #0
    5dac:	4e24      	ldr	r6, [pc, #144]	; (5e40 <sd_test_availability+0xcc>)
    5dae:	47b0      	blx	r6
    5db0:	4a24      	ldr	r2, [pc, #144]	; (5e44 <sd_test_availability+0xd0>)
    5db2:	2300      	movs	r3, #0
    5db4:	1880      	adds	r0, r0, r2
    5db6:	4159      	adcs	r1, r3
    5db8:	4a23      	ldr	r2, [pc, #140]	; (5e48 <sd_test_availability+0xd4>)
    5dba:	2300      	movs	r3, #0
    5dbc:	4e23      	ldr	r6, [pc, #140]	; (5e4c <sd_test_availability+0xd8>)
    5dbe:	47b0      	blx	r6
    5dc0:	4b23      	ldr	r3, [pc, #140]	; (5e50 <sd_test_availability+0xdc>)
    5dc2:	4798      	blx	r3
		if(!recording_request) {
    5dc4:	4b23      	ldr	r3, [pc, #140]	; (5e54 <sd_test_availability+0xe0>)
    5dc6:	7818      	ldrb	r0, [r3, #0]
    5dc8:	2800      	cmp	r0, #0
    5dca:	d023      	beq.n	5e14 <sd_test_availability+0xa0>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    5dcc:	2000      	movs	r0, #0
    5dce:	47a0      	blx	r4
    5dd0:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    5dd2:	2801      	cmp	r0, #1
    5dd4:	d0d2      	beq.n	5d7c <sd_test_availability+0x8>
    5dd6:	4b19      	ldr	r3, [pc, #100]	; (5e3c <sd_test_availability+0xc8>)
    5dd8:	2280      	movs	r2, #128	; 0x80
    5dda:	0152      	lsls	r2, r2, #5
    5ddc:	61da      	str	r2, [r3, #28]
    5dde:	2280      	movs	r2, #128	; 0x80
    5de0:	0212      	lsls	r2, r2, #8
    5de2:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    5de4:	2000      	movs	r0, #0
    5de6:	47a8      	blx	r5
    5de8:	2296      	movs	r2, #150	; 0x96
    5dea:	0052      	lsls	r2, r2, #1
    5dec:	2300      	movs	r3, #0
    5dee:	2100      	movs	r1, #0
    5df0:	4f13      	ldr	r7, [pc, #76]	; (5e40 <sd_test_availability+0xcc>)
    5df2:	47b8      	blx	r7
    5df4:	4a13      	ldr	r2, [pc, #76]	; (5e44 <sd_test_availability+0xd0>)
    5df6:	2300      	movs	r3, #0
    5df8:	1880      	adds	r0, r0, r2
    5dfa:	4159      	adcs	r1, r3
    5dfc:	4a12      	ldr	r2, [pc, #72]	; (5e48 <sd_test_availability+0xd4>)
    5dfe:	2300      	movs	r3, #0
    5e00:	4f12      	ldr	r7, [pc, #72]	; (5e4c <sd_test_availability+0xd8>)
    5e02:	47b8      	blx	r7
    5e04:	4b12      	ldr	r3, [pc, #72]	; (5e50 <sd_test_availability+0xdc>)
    5e06:	4798      	blx	r3
		if(!recording_request) {
    5e08:	4b12      	ldr	r3, [pc, #72]	; (5e54 <sd_test_availability+0xe0>)
    5e0a:	7818      	ldrb	r0, [r3, #0]
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d001      	beq.n	5e14 <sd_test_availability+0xa0>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    5e10:	2e00      	cmp	r6, #0
    5e12:	d1db      	bne.n	5dcc <sd_test_availability+0x58>
		port_base->OUTSET.reg = pin_mask;
    5e14:	4b09      	ldr	r3, [pc, #36]	; (5e3c <sd_test_availability+0xc8>)
    5e16:	2280      	movs	r2, #128	; 0x80
    5e18:	0152      	lsls	r2, r2, #5
    5e1a:	619a      	str	r2, [r3, #24]
    5e1c:	2280      	movs	r2, #128	; 0x80
    5e1e:	0212      	lsls	r2, r2, #8
    5e20:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
}
    5e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e24:	00007c9d 	.word	0x00007c9d
    5e28:	000089c1 	.word	0x000089c1
    5e2c:	0000afbc 	.word	0x0000afbc
    5e30:	00009355 	.word	0x00009355
    5e34:	0000afd4 	.word	0x0000afd4
    5e38:	00000d65 	.word	0x00000d65
    5e3c:	41004400 	.word	0x41004400
    5e40:	000090fd 	.word	0x000090fd
    5e44:	00001b57 	.word	0x00001b57
    5e48:	00001b58 	.word	0x00001b58
    5e4c:	000090bd 	.word	0x000090bd
    5e50:	20000001 	.word	0x20000001
    5e54:	2000039b 	.word	0x2000039b

00005e58 <sd_mount_fs>:

bool sd_mount_fs(void)
{
    5e58:	b510      	push	{r4, lr}
	FRESULT res;
	memset(&file_sys, 0, sizeof(FATFS));
    5e5a:	4c08      	ldr	r4, [pc, #32]	; (5e7c <sd_mount_fs+0x24>)
    5e5c:	228c      	movs	r2, #140	; 0x8c
    5e5e:	0092      	lsls	r2, r2, #2
    5e60:	2100      	movs	r1, #0
    5e62:	0020      	movs	r0, r4
    5e64:	4b06      	ldr	r3, [pc, #24]	; (5e80 <sd_mount_fs+0x28>)
    5e66:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    5e68:	0021      	movs	r1, r4
    5e6a:	2000      	movs	r0, #0
    5e6c:	4b05      	ldr	r3, [pc, #20]	; (5e84 <sd_mount_fs+0x2c>)
    5e6e:	4798      	blx	r3
	if(res == FR_INVALID_DRIVE) {
    5e70:	380b      	subs	r0, #11
    5e72:	1e43      	subs	r3, r0, #1
    5e74:	4198      	sbcs	r0, r3
    5e76:	b2c0      	uxtb	r0, r0
		return false;
	}
	return true;
    5e78:	bd10      	pop	{r4, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	20000720 	.word	0x20000720
    5e80:	00009343 	.word	0x00009343
    5e84:	00005695 	.word	0x00005695

00005e88 <ui_button2_callback>:
	}
}

void ui_button2_callback(void)
{
}
    5e88:	4770      	bx	lr
	...

00005e8c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5e8c:	b570      	push	{r4, r5, r6, lr}
    5e8e:	b082      	sub	sp, #8
    5e90:	0005      	movs	r5, r0
    5e92:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5e94:	2200      	movs	r2, #0
    5e96:	466b      	mov	r3, sp
    5e98:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5e9a:	4c06      	ldr	r4, [pc, #24]	; (5eb4 <usart_serial_getchar+0x28>)
    5e9c:	466b      	mov	r3, sp
    5e9e:	1d99      	adds	r1, r3, #6
    5ea0:	0028      	movs	r0, r5
    5ea2:	47a0      	blx	r4
    5ea4:	2800      	cmp	r0, #0
    5ea6:	d1f9      	bne.n	5e9c <usart_serial_getchar+0x10>

	*c = temp;
    5ea8:	466b      	mov	r3, sp
    5eaa:	3306      	adds	r3, #6
    5eac:	881b      	ldrh	r3, [r3, #0]
    5eae:	7033      	strb	r3, [r6, #0]
}
    5eb0:	b002      	add	sp, #8
    5eb2:	bd70      	pop	{r4, r5, r6, pc}
    5eb4:	00002c61 	.word	0x00002c61

00005eb8 <usart_serial_putchar>:
{
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5ebc:	b28c      	uxth	r4, r1
    5ebe:	4e03      	ldr	r6, [pc, #12]	; (5ecc <usart_serial_putchar+0x14>)
    5ec0:	0021      	movs	r1, r4
    5ec2:	0028      	movs	r0, r5
    5ec4:	47b0      	blx	r6
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d1fa      	bne.n	5ec0 <usart_serial_putchar+0x8>
}
    5eca:	bd70      	pop	{r4, r5, r6, pc}
    5ecc:	00002c35 	.word	0x00002c35

00005ed0 <ui_button1_callback>:
{
    5ed0:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    5ed2:	4b18      	ldr	r3, [pc, #96]	; (5f34 <ui_button1_callback+0x64>)
    5ed4:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    5ed6:	00db      	lsls	r3, r3, #3
    5ed8:	d500      	bpl.n	5edc <ui_button1_callback+0xc>
}
    5eda:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    5edc:	2000      	movs	r0, #0
    5ede:	4b16      	ldr	r3, [pc, #88]	; (5f38 <ui_button1_callback+0x68>)
    5ee0:	4798      	blx	r3
    5ee2:	2264      	movs	r2, #100	; 0x64
    5ee4:	2300      	movs	r3, #0
    5ee6:	2100      	movs	r1, #0
    5ee8:	4c14      	ldr	r4, [pc, #80]	; (5f3c <ui_button1_callback+0x6c>)
    5eea:	47a0      	blx	r4
    5eec:	4a14      	ldr	r2, [pc, #80]	; (5f40 <ui_button1_callback+0x70>)
    5eee:	2300      	movs	r3, #0
    5ef0:	1880      	adds	r0, r0, r2
    5ef2:	4159      	adcs	r1, r3
    5ef4:	4a13      	ldr	r2, [pc, #76]	; (5f44 <ui_button1_callback+0x74>)
    5ef6:	2300      	movs	r3, #0
    5ef8:	4c13      	ldr	r4, [pc, #76]	; (5f48 <ui_button1_callback+0x78>)
    5efa:	47a0      	blx	r4
    5efc:	4b13      	ldr	r3, [pc, #76]	; (5f4c <ui_button1_callback+0x7c>)
    5efe:	4798      	blx	r3
    5f00:	4b0c      	ldr	r3, [pc, #48]	; (5f34 <ui_button1_callback+0x64>)
    5f02:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    5f04:	00db      	lsls	r3, r3, #3
    5f06:	d4e8      	bmi.n	5eda <ui_button1_callback+0xa>
		if(recording_on || recording_request) {
    5f08:	4b11      	ldr	r3, [pc, #68]	; (5f50 <ui_button1_callback+0x80>)
    5f0a:	781b      	ldrb	r3, [r3, #0]
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	d107      	bne.n	5f20 <ui_button1_callback+0x50>
    5f10:	4b10      	ldr	r3, [pc, #64]	; (5f54 <ui_button1_callback+0x84>)
    5f12:	781b      	ldrb	r3, [r3, #0]
    5f14:	2b00      	cmp	r3, #0
    5f16:	d103      	bne.n	5f20 <ui_button1_callback+0x50>
			recording_request = true;
    5f18:	2201      	movs	r2, #1
    5f1a:	4b0e      	ldr	r3, [pc, #56]	; (5f54 <ui_button1_callback+0x84>)
    5f1c:	701a      	strb	r2, [r3, #0]
}
    5f1e:	e7dc      	b.n	5eda <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    5f20:	2280      	movs	r2, #128	; 0x80
    5f22:	0152      	lsls	r2, r2, #5
    5f24:	4b03      	ldr	r3, [pc, #12]	; (5f34 <ui_button1_callback+0x64>)
    5f26:	619a      	str	r2, [r3, #24]
			recording_request = false;
    5f28:	2300      	movs	r3, #0
    5f2a:	4a0a      	ldr	r2, [pc, #40]	; (5f54 <ui_button1_callback+0x84>)
    5f2c:	7013      	strb	r3, [r2, #0]
			recording_on = false;
    5f2e:	4a08      	ldr	r2, [pc, #32]	; (5f50 <ui_button1_callback+0x80>)
    5f30:	7013      	strb	r3, [r2, #0]
    5f32:	e7d2      	b.n	5eda <ui_button1_callback+0xa>
    5f34:	41004400 	.word	0x41004400
    5f38:	000089c1 	.word	0x000089c1
    5f3c:	000090fd 	.word	0x000090fd
    5f40:	00001b57 	.word	0x00001b57
    5f44:	00001b58 	.word	0x00001b58
    5f48:	000090bd 	.word	0x000090bd
    5f4c:	20000001 	.word	0x20000001
    5f50:	2000039a 	.word	0x2000039a
    5f54:	2000039b 	.word	0x2000039b

00005f58 <ui_button3_callback>:

void ui_button3_callback(void)
{
    5f58:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    5f5a:	4b17      	ldr	r3, [pc, #92]	; (5fb8 <ui_button3_callback+0x60>)
    5f5c:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    5f5e:	071b      	lsls	r3, r3, #28
    5f60:	d500      	bpl.n	5f64 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    5f62:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    5f64:	2000      	movs	r0, #0
    5f66:	4b15      	ldr	r3, [pc, #84]	; (5fbc <ui_button3_callback+0x64>)
    5f68:	4798      	blx	r3
    5f6a:	2264      	movs	r2, #100	; 0x64
    5f6c:	2300      	movs	r3, #0
    5f6e:	2100      	movs	r1, #0
    5f70:	4c13      	ldr	r4, [pc, #76]	; (5fc0 <ui_button3_callback+0x68>)
    5f72:	47a0      	blx	r4
    5f74:	4a13      	ldr	r2, [pc, #76]	; (5fc4 <ui_button3_callback+0x6c>)
    5f76:	2300      	movs	r3, #0
    5f78:	1880      	adds	r0, r0, r2
    5f7a:	4159      	adcs	r1, r3
    5f7c:	4a12      	ldr	r2, [pc, #72]	; (5fc8 <ui_button3_callback+0x70>)
    5f7e:	2300      	movs	r3, #0
    5f80:	4c12      	ldr	r4, [pc, #72]	; (5fcc <ui_button3_callback+0x74>)
    5f82:	47a0      	blx	r4
    5f84:	4b12      	ldr	r3, [pc, #72]	; (5fd0 <ui_button3_callback+0x78>)
    5f86:	4798      	blx	r3
    5f88:	4b0b      	ldr	r3, [pc, #44]	; (5fb8 <ui_button3_callback+0x60>)
    5f8a:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    5f8c:	071b      	lsls	r3, r3, #28
    5f8e:	d4e8      	bmi.n	5f62 <ui_button3_callback+0xa>
		if(monitoring_on) {
    5f90:	4b10      	ldr	r3, [pc, #64]	; (5fd4 <ui_button3_callback+0x7c>)
    5f92:	781b      	ldrb	r3, [r3, #0]
    5f94:	2b00      	cmp	r3, #0
    5f96:	d107      	bne.n	5fa8 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    5f98:	2280      	movs	r2, #128	; 0x80
    5f9a:	0212      	lsls	r2, r2, #8
    5f9c:	4b06      	ldr	r3, [pc, #24]	; (5fb8 <ui_button3_callback+0x60>)
    5f9e:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    5fa0:	2201      	movs	r2, #1
    5fa2:	4b0c      	ldr	r3, [pc, #48]	; (5fd4 <ui_button3_callback+0x7c>)
    5fa4:	701a      	strb	r2, [r3, #0]
}
    5fa6:	e7dc      	b.n	5f62 <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    5fa8:	2280      	movs	r2, #128	; 0x80
    5faa:	0212      	lsls	r2, r2, #8
    5fac:	4b02      	ldr	r3, [pc, #8]	; (5fb8 <ui_button3_callback+0x60>)
    5fae:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    5fb0:	2200      	movs	r2, #0
    5fb2:	4b08      	ldr	r3, [pc, #32]	; (5fd4 <ui_button3_callback+0x7c>)
    5fb4:	701a      	strb	r2, [r3, #0]
    5fb6:	e7d4      	b.n	5f62 <ui_button3_callback+0xa>
    5fb8:	41004400 	.word	0x41004400
    5fbc:	000089c1 	.word	0x000089c1
    5fc0:	000090fd 	.word	0x000090fd
    5fc4:	00001b57 	.word	0x00001b57
    5fc8:	00001b58 	.word	0x00001b58
    5fcc:	000090bd 	.word	0x000090bd
    5fd0:	20000001 	.word	0x20000001
    5fd4:	20000399 	.word	0x20000399

00005fd8 <ui_cdc_init>:
{
    5fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fda:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5fdc:	2380      	movs	r3, #128	; 0x80
    5fde:	05db      	lsls	r3, r3, #23
    5fe0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5fe2:	2300      	movs	r3, #0
    5fe4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    5fe6:	22ff      	movs	r2, #255	; 0xff
    5fe8:	4669      	mov	r1, sp
    5fea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    5fec:	2200      	movs	r2, #0
    5fee:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5ff0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5ff2:	2401      	movs	r4, #1
    5ff4:	2124      	movs	r1, #36	; 0x24
    5ff6:	4668      	mov	r0, sp
    5ff8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    5ffa:	3101      	adds	r1, #1
    5ffc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    5ffe:	3101      	adds	r1, #1
    6000:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    6002:	3101      	adds	r1, #1
    6004:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    6006:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6008:	3105      	adds	r1, #5
    600a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    600c:	3101      	adds	r1, #1
    600e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6010:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6012:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6014:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6016:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6018:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    601a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    601c:	2313      	movs	r3, #19
    601e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6020:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    6022:	2380      	movs	r3, #128	; 0x80
    6024:	035b      	lsls	r3, r3, #13
    6026:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    6028:	4b1a      	ldr	r3, [pc, #104]	; (6094 <ui_cdc_init+0xbc>)
    602a:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    602c:	4b1a      	ldr	r3, [pc, #104]	; (6098 <ui_cdc_init+0xc0>)
    602e:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    6030:	2301      	movs	r3, #1
    6032:	425b      	negs	r3, r3
    6034:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    6036:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    6038:	23e1      	movs	r3, #225	; 0xe1
    603a:	025b      	lsls	r3, r3, #9
    603c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    603e:	4d17      	ldr	r5, [pc, #92]	; (609c <ui_cdc_init+0xc4>)
    6040:	4b17      	ldr	r3, [pc, #92]	; (60a0 <ui_cdc_init+0xc8>)
    6042:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6044:	4a17      	ldr	r2, [pc, #92]	; (60a4 <ui_cdc_init+0xcc>)
    6046:	4b18      	ldr	r3, [pc, #96]	; (60a8 <ui_cdc_init+0xd0>)
    6048:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    604a:	4a18      	ldr	r2, [pc, #96]	; (60ac <ui_cdc_init+0xd4>)
    604c:	4b18      	ldr	r3, [pc, #96]	; (60b0 <ui_cdc_init+0xd8>)
    604e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    6050:	466a      	mov	r2, sp
    6052:	4918      	ldr	r1, [pc, #96]	; (60b4 <ui_cdc_init+0xdc>)
    6054:	0028      	movs	r0, r5
    6056:	4b18      	ldr	r3, [pc, #96]	; (60b8 <ui_cdc_init+0xe0>)
    6058:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    605a:	4f18      	ldr	r7, [pc, #96]	; (60bc <ui_cdc_init+0xe4>)
    605c:	683b      	ldr	r3, [r7, #0]
    605e:	6898      	ldr	r0, [r3, #8]
    6060:	2100      	movs	r1, #0
    6062:	4e17      	ldr	r6, [pc, #92]	; (60c0 <ui_cdc_init+0xe8>)
    6064:	47b0      	blx	r6
	setbuf(stdin, NULL);
    6066:	683b      	ldr	r3, [r7, #0]
    6068:	6858      	ldr	r0, [r3, #4]
    606a:	2100      	movs	r1, #0
    606c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    606e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6070:	0030      	movs	r0, r6
    6072:	4b14      	ldr	r3, [pc, #80]	; (60c4 <ui_cdc_init+0xec>)
    6074:	4798      	blx	r3
    6076:	231f      	movs	r3, #31
    6078:	4018      	ands	r0, r3
    607a:	4084      	lsls	r4, r0
    607c:	4b12      	ldr	r3, [pc, #72]	; (60c8 <ui_cdc_init+0xf0>)
    607e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6080:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6082:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6084:	2b00      	cmp	r3, #0
    6086:	d1fc      	bne.n	6082 <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6088:	6833      	ldr	r3, [r6, #0]
    608a:	2202      	movs	r2, #2
    608c:	4313      	orrs	r3, r2
    608e:	6033      	str	r3, [r6, #0]
}
    6090:	b011      	add	sp, #68	; 0x44
    6092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6094:	00160002 	.word	0x00160002
    6098:	00170002 	.word	0x00170002
    609c:	200006e8 	.word	0x200006e8
    60a0:	200006ac 	.word	0x200006ac
    60a4:	00005eb9 	.word	0x00005eb9
    60a8:	200006a8 	.word	0x200006a8
    60ac:	00005e8d 	.word	0x00005e8d
    60b0:	200006a4 	.word	0x200006a4
    60b4:	42001400 	.word	0x42001400
    60b8:	000028f1 	.word	0x000028f1
    60bc:	20000128 	.word	0x20000128
    60c0:	00009389 	.word	0x00009389
    60c4:	00002861 	.word	0x00002861
    60c8:	e000e100 	.word	0xe000e100

000060cc <ui_lb_init>:
{
    60cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60ce:	46c6      	mov	lr, r8
    60d0:	b500      	push	{lr}
    60d2:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    60d4:	ac03      	add	r4, sp, #12
    60d6:	2501      	movs	r5, #1
    60d8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    60da:	2600      	movs	r6, #0
    60dc:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    60de:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    60e0:	0021      	movs	r1, r4
    60e2:	200c      	movs	r0, #12
    60e4:	4b1c      	ldr	r3, [pc, #112]	; (6158 <ui_lb_init+0x8c>)
    60e6:	4698      	mov	r8, r3
    60e8:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    60ea:	4f1c      	ldr	r7, [pc, #112]	; (615c <ui_lb_init+0x90>)
    60ec:	2380      	movs	r3, #128	; 0x80
    60ee:	015b      	lsls	r3, r3, #5
    60f0:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    60f2:	0021      	movs	r1, r4
    60f4:	200d      	movs	r0, #13
    60f6:	47c0      	blx	r8
    60f8:	2380      	movs	r3, #128	; 0x80
    60fa:	019b      	lsls	r3, r3, #6
    60fc:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    60fe:	0021      	movs	r1, r4
    6100:	200f      	movs	r0, #15
    6102:	47c0      	blx	r8
    6104:	2380      	movs	r3, #128	; 0x80
    6106:	021b      	lsls	r3, r3, #8
    6108:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    610a:	4668      	mov	r0, sp
    610c:	4b14      	ldr	r3, [pc, #80]	; (6160 <ui_lb_init+0x94>)
    610e:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    6110:	231c      	movs	r3, #28
    6112:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    6114:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    6116:	466b      	mov	r3, sp
    6118:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    611a:	2403      	movs	r4, #3
    611c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    611e:	4669      	mov	r1, sp
    6120:	2008      	movs	r0, #8
    6122:	4f10      	ldr	r7, [pc, #64]	; (6164 <ui_lb_init+0x98>)
    6124:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    6126:	2302      	movs	r3, #2
    6128:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    612a:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    612c:	466b      	mov	r3, sp
    612e:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6130:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    6132:	4669      	mov	r1, sp
    6134:	2002      	movs	r0, #2
    6136:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    6138:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    613a:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    613c:	466b      	mov	r3, sp
    613e:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6140:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    6142:	4669      	mov	r1, sp
    6144:	2003      	movs	r0, #3
    6146:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    6148:	2280      	movs	r2, #128	; 0x80
    614a:	05d2      	lsls	r2, r2, #23
    614c:	4b06      	ldr	r3, [pc, #24]	; (6168 <ui_lb_init+0x9c>)
    614e:	615a      	str	r2, [r3, #20]
}
    6150:	b004      	add	sp, #16
    6152:	bc04      	pop	{r2}
    6154:	4690      	mov	r8, r2
    6156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6158:	0000887d 	.word	0x0000887d
    615c:	41004400 	.word	0x41004400
    6160:	00002461 	.word	0x00002461
    6164:	00002475 	.word	0x00002475
    6168:	41004480 	.word	0x41004480

0000616c <ui_configure_callback>:
{
    616c:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    616e:	2200      	movs	r2, #0
    6170:	2108      	movs	r1, #8
    6172:	480b      	ldr	r0, [pc, #44]	; (61a0 <ui_configure_callback+0x34>)
    6174:	4c0b      	ldr	r4, [pc, #44]	; (61a4 <ui_configure_callback+0x38>)
    6176:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6178:	2200      	movs	r2, #0
    617a:	2102      	movs	r1, #2
    617c:	480a      	ldr	r0, [pc, #40]	; (61a8 <ui_configure_callback+0x3c>)
    617e:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6180:	2200      	movs	r2, #0
    6182:	2103      	movs	r1, #3
    6184:	4809      	ldr	r0, [pc, #36]	; (61ac <ui_configure_callback+0x40>)
    6186:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6188:	2100      	movs	r1, #0
    618a:	2008      	movs	r0, #8
    618c:	4c08      	ldr	r4, [pc, #32]	; (61b0 <ui_configure_callback+0x44>)
    618e:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6190:	2100      	movs	r1, #0
    6192:	2002      	movs	r0, #2
    6194:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6196:	2100      	movs	r1, #0
    6198:	2003      	movs	r0, #3
    619a:	47a0      	blx	r4
}
    619c:	bd10      	pop	{r4, pc}
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	00005ed1 	.word	0x00005ed1
    61a4:	0000709d 	.word	0x0000709d
    61a8:	00005e89 	.word	0x00005e89
    61ac:	00005f59 	.word	0x00005f59
    61b0:	000070c9 	.word	0x000070c9

000061b4 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    61b4:	2280      	movs	r2, #128	; 0x80
    61b6:	05d2      	lsls	r2, r2, #23
    61b8:	4b01      	ldr	r3, [pc, #4]	; (61c0 <ui_powerdown+0xc>)
    61ba:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    61bc:	4770      	bx	lr
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	41004480 	.word	0x41004480

000061c4 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    61c4:	2280      	movs	r2, #128	; 0x80
    61c6:	05d2      	lsls	r2, r2, #23
    61c8:	4b01      	ldr	r3, [pc, #4]	; (61d0 <ui_wakeup+0xc>)
    61ca:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    61cc:	4770      	bx	lr
    61ce:	46c0      	nop			; (mov r8, r8)
    61d0:	41004480 	.word	0x41004480

000061d4 <ui_start_read>:

void ui_start_read(void)
{
}
    61d4:	4770      	bx	lr

000061d6 <ui_stop_read>:

void ui_stop_read(void)
{
}
    61d6:	4770      	bx	lr

000061d8 <ui_start_write>:

void ui_start_write(void)
{
}
    61d8:	4770      	bx	lr

000061da <ui_stop_write>:

void ui_stop_write(void)
{
}
    61da:	4770      	bx	lr

000061dc <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    61dc:	2800      	cmp	r0, #0
    61de:	d104      	bne.n	61ea <ui_process+0xe>
    61e0:	2280      	movs	r2, #128	; 0x80
    61e2:	05d2      	lsls	r2, r2, #23
    61e4:	4b05      	ldr	r3, [pc, #20]	; (61fc <ui_process+0x20>)
    61e6:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    61e8:	4770      	bx	lr
	if (1000 == framenumber) {
    61ea:	23fa      	movs	r3, #250	; 0xfa
    61ec:	009b      	lsls	r3, r3, #2
    61ee:	4298      	cmp	r0, r3
    61f0:	d1fa      	bne.n	61e8 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    61f2:	2280      	movs	r2, #128	; 0x80
    61f4:	05d2      	lsls	r2, r2, #23
    61f6:	4b01      	ldr	r3, [pc, #4]	; (61fc <ui_process+0x20>)
    61f8:	619a      	str	r2, [r3, #24]
}
    61fa:	e7f5      	b.n	61e8 <ui_process+0xc>
    61fc:	41004480 	.word	0x41004480

00006200 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    6200:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    6202:	000b      	movs	r3, r1
    6204:	332e      	adds	r3, #46	; 0x2e
    6206:	009b      	lsls	r3, r3, #2
    6208:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    620a:	22aa      	movs	r2, #170	; 0xaa
    620c:	0052      	lsls	r2, r2, #1
    620e:	0049      	lsls	r1, r1, #1
    6210:	5a83      	ldrh	r3, [r0, r2]
    6212:	4c03      	ldr	r4, [pc, #12]	; (6220 <usb_device_register_callback+0x20>)
    6214:	5b09      	ldrh	r1, [r1, r4]
    6216:	430b      	orrs	r3, r1
    6218:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    621a:	2000      	movs	r0, #0
    621c:	bd10      	pop	{r4, pc}
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	0000b010 	.word	0x0000b010

00006224 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    6224:	0049      	lsls	r1, r1, #1
    6226:	4b06      	ldr	r3, [pc, #24]	; (6240 <usb_device_enable_callback+0x1c>)
    6228:	5acb      	ldrh	r3, [r1, r3]
    622a:	6802      	ldr	r2, [r0, #0]
    622c:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    622e:	21ab      	movs	r1, #171	; 0xab
    6230:	0049      	lsls	r1, r1, #1
    6232:	5a42      	ldrh	r2, [r0, r1]
    6234:	431a      	orrs	r2, r3
    6236:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    6238:	6802      	ldr	r2, [r0, #0]
    623a:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    623c:	2000      	movs	r0, #0
    623e:	4770      	bx	lr
    6240:	0000b010 	.word	0x0000b010

00006244 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    6244:	0049      	lsls	r1, r1, #1
    6246:	4b05      	ldr	r3, [pc, #20]	; (625c <usb_device_disable_callback+0x18>)
    6248:	5aca      	ldrh	r2, [r1, r3]
    624a:	21ab      	movs	r1, #171	; 0xab
    624c:	0049      	lsls	r1, r1, #1
    624e:	5a43      	ldrh	r3, [r0, r1]
    6250:	4393      	bics	r3, r2
    6252:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    6254:	6803      	ldr	r3, [r0, #0]
    6256:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    6258:	2000      	movs	r0, #0
    625a:	4770      	bx	lr
    625c:	0000b010 	.word	0x0000b010

00006260 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    6260:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    6262:	008c      	lsls	r4, r1, #2
    6264:	18a4      	adds	r4, r4, r2
    6266:	3434      	adds	r4, #52	; 0x34
    6268:	00a4      	lsls	r4, r4, #2
    626a:	1904      	adds	r4, r0, r4
    626c:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    626e:	1840      	adds	r0, r0, r1
    6270:	3059      	adds	r0, #89	; 0x59
    6272:	30ff      	adds	r0, #255	; 0xff
    6274:	7803      	ldrb	r3, [r0, #0]
    6276:	4903      	ldr	r1, [pc, #12]	; (6284 <usb_device_endpoint_register_callback+0x24>)
    6278:	5c8a      	ldrb	r2, [r1, r2]
    627a:	4313      	orrs	r3, r2
    627c:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    627e:	2000      	movs	r0, #0
    6280:	bd10      	pop	{r4, pc}
    6282:	46c0      	nop			; (mov r8, r8)
    6284:	0000b020 	.word	0x0000b020

00006288 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    6288:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    628a:	008b      	lsls	r3, r1, #2
    628c:	189b      	adds	r3, r3, r2
    628e:	3334      	adds	r3, #52	; 0x34
    6290:	009b      	lsls	r3, r3, #2
    6292:	18c3      	adds	r3, r0, r3
    6294:	2400      	movs	r4, #0
    6296:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6298:	1840      	adds	r0, r0, r1
    629a:	3059      	adds	r0, #89	; 0x59
    629c:	30ff      	adds	r0, #255	; 0xff
    629e:	4b03      	ldr	r3, [pc, #12]	; (62ac <usb_device_endpoint_unregister_callback+0x24>)
    62a0:	5c9a      	ldrb	r2, [r3, r2]
    62a2:	7803      	ldrb	r3, [r0, #0]
    62a4:	4393      	bics	r3, r2
    62a6:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    62a8:	2000      	movs	r0, #0
    62aa:	bd10      	pop	{r4, pc}
    62ac:	0000b020 	.word	0x0000b020

000062b0 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    62b0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    62b2:	230f      	movs	r3, #15
    62b4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    62b6:	18c4      	adds	r4, r0, r3
    62b8:	3461      	adds	r4, #97	; 0x61
    62ba:	34ff      	adds	r4, #255	; 0xff
    62bc:	7825      	ldrb	r5, [r4, #0]
    62be:	4e2f      	ldr	r6, [pc, #188]	; (637c <usb_device_endpoint_enable_callback+0xcc>)
    62c0:	5cb6      	ldrb	r6, [r6, r2]
    62c2:	4335      	orrs	r5, r6
    62c4:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    62c6:	2a00      	cmp	r2, #0
    62c8:	d129      	bne.n	631e <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    62ca:	2b00      	cmp	r3, #0
    62cc:	d112      	bne.n	62f4 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    62ce:	2503      	movs	r5, #3
    62d0:	240a      	movs	r4, #10
    62d2:	34ff      	adds	r4, #255	; 0xff
    62d4:	6806      	ldr	r6, [r0, #0]
    62d6:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    62d8:	2a03      	cmp	r2, #3
    62da:	d109      	bne.n	62f0 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    62dc:	b249      	sxtb	r1, r1
    62de:	2900      	cmp	r1, #0
    62e0:	db44      	blt.n	636c <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    62e2:	6802      	ldr	r2, [r0, #0]
    62e4:	015b      	lsls	r3, r3, #5
    62e6:	18d3      	adds	r3, r2, r3
    62e8:	330a      	adds	r3, #10
    62ea:	33ff      	adds	r3, #255	; 0xff
    62ec:	2220      	movs	r2, #32
    62ee:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    62f0:	2000      	movs	r0, #0
    62f2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    62f4:	b24c      	sxtb	r4, r1
    62f6:	2c00      	cmp	r4, #0
    62f8:	db08      	blt.n	630c <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    62fa:	015c      	lsls	r4, r3, #5
    62fc:	6805      	ldr	r5, [r0, #0]
    62fe:	46ac      	mov	ip, r5
    6300:	4464      	add	r4, ip
    6302:	340a      	adds	r4, #10
    6304:	34ff      	adds	r4, #255	; 0xff
    6306:	2501      	movs	r5, #1
    6308:	7025      	strb	r5, [r4, #0]
    630a:	e7e5      	b.n	62d8 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    630c:	015c      	lsls	r4, r3, #5
    630e:	6805      	ldr	r5, [r0, #0]
    6310:	46ac      	mov	ip, r5
    6312:	4464      	add	r4, ip
    6314:	340a      	adds	r4, #10
    6316:	34ff      	adds	r4, #255	; 0xff
    6318:	2502      	movs	r5, #2
    631a:	7025      	strb	r5, [r4, #0]
    631c:	e7dc      	b.n	62d8 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    631e:	2a01      	cmp	r2, #1
    6320:	d11a      	bne.n	6358 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    6322:	2b00      	cmp	r3, #0
    6324:	d105      	bne.n	6332 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    6326:	6802      	ldr	r2, [r0, #0]
    6328:	210c      	movs	r1, #12
    632a:	230a      	movs	r3, #10
    632c:	33ff      	adds	r3, #255	; 0xff
    632e:	54d1      	strb	r1, [r2, r3]
    6330:	e7de      	b.n	62f0 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    6332:	b249      	sxtb	r1, r1
    6334:	2900      	cmp	r1, #0
    6336:	db07      	blt.n	6348 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    6338:	6802      	ldr	r2, [r0, #0]
    633a:	015b      	lsls	r3, r3, #5
    633c:	18d3      	adds	r3, r2, r3
    633e:	330a      	adds	r3, #10
    6340:	33ff      	adds	r3, #255	; 0xff
    6342:	2204      	movs	r2, #4
    6344:	701a      	strb	r2, [r3, #0]
    6346:	e7d3      	b.n	62f0 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    6348:	6802      	ldr	r2, [r0, #0]
    634a:	015b      	lsls	r3, r3, #5
    634c:	18d3      	adds	r3, r2, r3
    634e:	330a      	adds	r3, #10
    6350:	33ff      	adds	r3, #255	; 0xff
    6352:	2208      	movs	r2, #8
    6354:	701a      	strb	r2, [r3, #0]
    6356:	e7cb      	b.n	62f0 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6358:	2a02      	cmp	r2, #2
    635a:	d1bd      	bne.n	62d8 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    635c:	6802      	ldr	r2, [r0, #0]
    635e:	015b      	lsls	r3, r3, #5
    6360:	18d3      	adds	r3, r2, r3
    6362:	330a      	adds	r3, #10
    6364:	33ff      	adds	r3, #255	; 0xff
    6366:	2210      	movs	r2, #16
    6368:	701a      	strb	r2, [r3, #0]
    636a:	e7c1      	b.n	62f0 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    636c:	6802      	ldr	r2, [r0, #0]
    636e:	015b      	lsls	r3, r3, #5
    6370:	18d3      	adds	r3, r2, r3
    6372:	330a      	adds	r3, #10
    6374:	33ff      	adds	r3, #255	; 0xff
    6376:	2240      	movs	r2, #64	; 0x40
    6378:	701a      	strb	r2, [r3, #0]
    637a:	e7b9      	b.n	62f0 <usb_device_endpoint_enable_callback+0x40>
    637c:	0000b020 	.word	0x0000b020

00006380 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    6380:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6382:	230f      	movs	r3, #15
    6384:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6386:	18c4      	adds	r4, r0, r3
    6388:	3461      	adds	r4, #97	; 0x61
    638a:	34ff      	adds	r4, #255	; 0xff
    638c:	4d2f      	ldr	r5, [pc, #188]	; (644c <usb_device_endpoint_disable_callback+0xcc>)
    638e:	5cae      	ldrb	r6, [r5, r2]
    6390:	7825      	ldrb	r5, [r4, #0]
    6392:	43b5      	bics	r5, r6
    6394:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6396:	2a00      	cmp	r2, #0
    6398:	d129      	bne.n	63ee <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    639a:	2b00      	cmp	r3, #0
    639c:	d112      	bne.n	63c4 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    639e:	2503      	movs	r5, #3
    63a0:	2484      	movs	r4, #132	; 0x84
    63a2:	0064      	lsls	r4, r4, #1
    63a4:	6806      	ldr	r6, [r0, #0]
    63a6:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    63a8:	2a03      	cmp	r2, #3
    63aa:	d109      	bne.n	63c0 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    63ac:	b249      	sxtb	r1, r1
    63ae:	2900      	cmp	r1, #0
    63b0:	db44      	blt.n	643c <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    63b2:	6802      	ldr	r2, [r0, #0]
    63b4:	015b      	lsls	r3, r3, #5
    63b6:	18d3      	adds	r3, r2, r3
    63b8:	3309      	adds	r3, #9
    63ba:	33ff      	adds	r3, #255	; 0xff
    63bc:	2220      	movs	r2, #32
    63be:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    63c0:	2000      	movs	r0, #0
    63c2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    63c4:	b24c      	sxtb	r4, r1
    63c6:	2c00      	cmp	r4, #0
    63c8:	db08      	blt.n	63dc <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    63ca:	015c      	lsls	r4, r3, #5
    63cc:	6805      	ldr	r5, [r0, #0]
    63ce:	46ac      	mov	ip, r5
    63d0:	4464      	add	r4, ip
    63d2:	3409      	adds	r4, #9
    63d4:	34ff      	adds	r4, #255	; 0xff
    63d6:	2501      	movs	r5, #1
    63d8:	7025      	strb	r5, [r4, #0]
    63da:	e7e5      	b.n	63a8 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    63dc:	015c      	lsls	r4, r3, #5
    63de:	6805      	ldr	r5, [r0, #0]
    63e0:	46ac      	mov	ip, r5
    63e2:	4464      	add	r4, ip
    63e4:	3409      	adds	r4, #9
    63e6:	34ff      	adds	r4, #255	; 0xff
    63e8:	2502      	movs	r5, #2
    63ea:	7025      	strb	r5, [r4, #0]
    63ec:	e7dc      	b.n	63a8 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    63ee:	2a01      	cmp	r2, #1
    63f0:	d11a      	bne.n	6428 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    63f2:	2b00      	cmp	r3, #0
    63f4:	d105      	bne.n	6402 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    63f6:	6802      	ldr	r2, [r0, #0]
    63f8:	210c      	movs	r1, #12
    63fa:	3309      	adds	r3, #9
    63fc:	33ff      	adds	r3, #255	; 0xff
    63fe:	54d1      	strb	r1, [r2, r3]
    6400:	e7de      	b.n	63c0 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    6402:	b249      	sxtb	r1, r1
    6404:	2900      	cmp	r1, #0
    6406:	db07      	blt.n	6418 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    6408:	6802      	ldr	r2, [r0, #0]
    640a:	015b      	lsls	r3, r3, #5
    640c:	18d3      	adds	r3, r2, r3
    640e:	3309      	adds	r3, #9
    6410:	33ff      	adds	r3, #255	; 0xff
    6412:	2204      	movs	r2, #4
    6414:	701a      	strb	r2, [r3, #0]
    6416:	e7d3      	b.n	63c0 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    6418:	6802      	ldr	r2, [r0, #0]
    641a:	015b      	lsls	r3, r3, #5
    641c:	18d3      	adds	r3, r2, r3
    641e:	3309      	adds	r3, #9
    6420:	33ff      	adds	r3, #255	; 0xff
    6422:	2208      	movs	r2, #8
    6424:	701a      	strb	r2, [r3, #0]
    6426:	e7cb      	b.n	63c0 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6428:	2a02      	cmp	r2, #2
    642a:	d1bd      	bne.n	63a8 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    642c:	6802      	ldr	r2, [r0, #0]
    642e:	015b      	lsls	r3, r3, #5
    6430:	18d3      	adds	r3, r2, r3
    6432:	3309      	adds	r3, #9
    6434:	33ff      	adds	r3, #255	; 0xff
    6436:	2210      	movs	r2, #16
    6438:	701a      	strb	r2, [r3, #0]
    643a:	e7c1      	b.n	63c0 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    643c:	6802      	ldr	r2, [r0, #0]
    643e:	015b      	lsls	r3, r3, #5
    6440:	18d3      	adds	r3, r2, r3
    6442:	3309      	adds	r3, #9
    6444:	33ff      	adds	r3, #255	; 0xff
    6446:	2240      	movs	r2, #64	; 0x40
    6448:	701a      	strb	r2, [r3, #0]
    644a:	e7b9      	b.n	63c0 <usb_device_endpoint_disable_callback+0x40>
    644c:	0000b020 	.word	0x0000b020

00006450 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    6450:	2300      	movs	r3, #0
    6452:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    6454:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    6456:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    6458:	3301      	adds	r3, #1
    645a:	70c3      	strb	r3, [r0, #3]
}
    645c:	4770      	bx	lr
	...

00006460 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    6460:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    6462:	780c      	ldrb	r4, [r1, #0]
    6464:	230f      	movs	r3, #15
    6466:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6468:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    646a:	78ca      	ldrb	r2, [r1, #3]
    646c:	2a04      	cmp	r2, #4
    646e:	d870      	bhi.n	6552 <usb_device_endpoint_set_config+0xf2>
    6470:	0092      	lsls	r2, r2, #2
    6472:	4d89      	ldr	r5, [pc, #548]	; (6698 <usb_device_endpoint_set_config+0x238>)
    6474:	58aa      	ldr	r2, [r5, r2]
    6476:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    6478:	6802      	ldr	r2, [r0, #0]
    647a:	3308      	adds	r3, #8
    647c:	015b      	lsls	r3, r3, #5
    647e:	2100      	movs	r1, #0
    6480:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    6482:	2200      	movs	r2, #0
    6484:	e082      	b.n	658c <usb_device_endpoint_set_config+0x12c>
    6486:	015c      	lsls	r4, r3, #5
    6488:	6802      	ldr	r2, [r0, #0]
    648a:	4694      	mov	ip, r2
    648c:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    648e:	2280      	movs	r2, #128	; 0x80
    6490:	0052      	lsls	r2, r2, #1
    6492:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    6494:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6496:	076d      	lsls	r5, r5, #29
    6498:	d178      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    649a:	32e4      	adds	r2, #228	; 0xe4
    649c:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    649e:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    64a0:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    64a2:	422e      	tst	r6, r5
    64a4:	d172      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    64a6:	3d5f      	subs	r5, #95	; 0x5f
    64a8:	32e4      	adds	r2, #228	; 0xe4
    64aa:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    64ac:	001a      	movs	r2, r3
    64ae:	3208      	adds	r2, #8
    64b0:	0152      	lsls	r2, r2, #5
    64b2:	6804      	ldr	r4, [r0, #0]
    64b4:	18a4      	adds	r4, r4, r2
    64b6:	352f      	adds	r5, #47	; 0x2f
    64b8:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    64ba:	6800      	ldr	r0, [r0, #0]
    64bc:	1882      	adds	r2, r0, r2
    64be:	2080      	movs	r0, #128	; 0x80
    64c0:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    64c2:	788a      	ldrb	r2, [r1, #2]
    64c4:	2a00      	cmp	r2, #0
    64c6:	d01f      	beq.n	6508 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64c8:	0158      	lsls	r0, r3, #5
    64ca:	4a74      	ldr	r2, [pc, #464]	; (669c <usb_device_endpoint_set_config+0x23c>)
    64cc:	1812      	adds	r2, r2, r0
    64ce:	6854      	ldr	r4, [r2, #4]
    64d0:	2080      	movs	r0, #128	; 0x80
    64d2:	0600      	lsls	r0, r0, #24
    64d4:	4304      	orrs	r4, r0
    64d6:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64d8:	6954      	ldr	r4, [r2, #20]
    64da:	4320      	orrs	r0, r4
    64dc:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    64de:	2507      	movs	r5, #7
    64e0:	784c      	ldrb	r4, [r1, #1]
    64e2:	015a      	lsls	r2, r3, #5
    64e4:	4b6d      	ldr	r3, [pc, #436]	; (669c <usb_device_endpoint_set_config+0x23c>)
    64e6:	189b      	adds	r3, r3, r2
    64e8:	6858      	ldr	r0, [r3, #4]
    64ea:	402c      	ands	r4, r5
    64ec:	0724      	lsls	r4, r4, #28
    64ee:	4e6c      	ldr	r6, [pc, #432]	; (66a0 <usb_device_endpoint_set_config+0x240>)
    64f0:	4030      	ands	r0, r6
    64f2:	4320      	orrs	r0, r4
    64f4:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    64f6:	7849      	ldrb	r1, [r1, #1]
    64f8:	695a      	ldr	r2, [r3, #20]
    64fa:	4029      	ands	r1, r5
    64fc:	0709      	lsls	r1, r1, #28
    64fe:	4032      	ands	r2, r6
    6500:	430a      	orrs	r2, r1
    6502:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6504:	2200      	movs	r2, #0
    6506:	e041      	b.n	658c <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6508:	0158      	lsls	r0, r3, #5
    650a:	4a64      	ldr	r2, [pc, #400]	; (669c <usb_device_endpoint_set_config+0x23c>)
    650c:	1812      	adds	r2, r2, r0
    650e:	6850      	ldr	r0, [r2, #4]
    6510:	0040      	lsls	r0, r0, #1
    6512:	0840      	lsrs	r0, r0, #1
    6514:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6516:	6950      	ldr	r0, [r2, #20]
    6518:	0040      	lsls	r0, r0, #1
    651a:	0840      	lsrs	r0, r0, #1
    651c:	6150      	str	r0, [r2, #20]
    651e:	e7de      	b.n	64de <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6520:	2c00      	cmp	r4, #0
    6522:	db35      	blt.n	6590 <usb_device_endpoint_set_config+0x130>
    6524:	015d      	lsls	r5, r3, #5
    6526:	6802      	ldr	r2, [r0, #0]
    6528:	4694      	mov	ip, r2
    652a:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    652c:	2280      	movs	r2, #128	; 0x80
    652e:	0052      	lsls	r2, r2, #1
    6530:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    6532:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6534:	0776      	lsls	r6, r6, #29
    6536:	d129      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6538:	2680      	movs	r6, #128	; 0x80
    653a:	0076      	lsls	r6, r6, #1
    653c:	5daa      	ldrb	r2, [r5, r6]
    653e:	2702      	movs	r7, #2
    6540:	433a      	orrs	r2, r7
    6542:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6544:	6802      	ldr	r2, [r0, #0]
    6546:	0018      	movs	r0, r3
    6548:	3008      	adds	r0, #8
    654a:	0140      	lsls	r0, r0, #5
    654c:	1812      	adds	r2, r2, r0
    654e:	2040      	movs	r0, #64	; 0x40
    6550:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6552:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6554:	784f      	ldrb	r7, [r1, #1]
    6556:	005d      	lsls	r5, r3, #1
    6558:	18ad      	adds	r5, r5, r2
    655a:	012d      	lsls	r5, r5, #4
    655c:	4e4f      	ldr	r6, [pc, #316]	; (669c <usb_device_endpoint_set_config+0x23c>)
    655e:	1975      	adds	r5, r6, r5
    6560:	6868      	ldr	r0, [r5, #4]
    6562:	2407      	movs	r4, #7
    6564:	403c      	ands	r4, r7
    6566:	0724      	lsls	r4, r4, #28
    6568:	4e4d      	ldr	r6, [pc, #308]	; (66a0 <usb_device_endpoint_set_config+0x240>)
    656a:	4030      	ands	r0, r6
    656c:	4320      	orrs	r0, r4
    656e:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    6570:	7889      	ldrb	r1, [r1, #2]
    6572:	2900      	cmp	r1, #0
    6574:	d000      	beq.n	6578 <usb_device_endpoint_set_config+0x118>
    6576:	e088      	b.n	668a <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6578:	005b      	lsls	r3, r3, #1
    657a:	189b      	adds	r3, r3, r2
    657c:	011b      	lsls	r3, r3, #4
    657e:	4a47      	ldr	r2, [pc, #284]	; (669c <usb_device_endpoint_set_config+0x23c>)
    6580:	18d3      	adds	r3, r2, r3
    6582:	685a      	ldr	r2, [r3, #4]
    6584:	0052      	lsls	r2, r2, #1
    6586:	0852      	lsrs	r2, r2, #1
    6588:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    658a:	2200      	movs	r2, #0
}
    658c:	0010      	movs	r0, r2
    658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6590:	015d      	lsls	r5, r3, #5
    6592:	6802      	ldr	r2, [r0, #0]
    6594:	4694      	mov	ip, r2
    6596:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6598:	2280      	movs	r2, #128	; 0x80
    659a:	0052      	lsls	r2, r2, #1
    659c:	5caf      	ldrb	r7, [r5, r2]
    659e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    65a0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    65a2:	4237      	tst	r7, r6
    65a4:	d1f2      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    65a6:	3690      	adds	r6, #144	; 0x90
    65a8:	5daa      	ldrb	r2, [r5, r6]
    65aa:	2720      	movs	r7, #32
    65ac:	433a      	orrs	r2, r7
    65ae:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    65b0:	6802      	ldr	r2, [r0, #0]
    65b2:	0018      	movs	r0, r3
    65b4:	3008      	adds	r0, #8
    65b6:	0140      	lsls	r0, r0, #5
    65b8:	1812      	adds	r2, r2, r0
    65ba:	2080      	movs	r0, #128	; 0x80
    65bc:	7110      	strb	r0, [r2, #4]
    65be:	e7c8      	b.n	6552 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    65c0:	2c00      	cmp	r4, #0
    65c2:	db17      	blt.n	65f4 <usb_device_endpoint_set_config+0x194>
    65c4:	015d      	lsls	r5, r3, #5
    65c6:	6802      	ldr	r2, [r0, #0]
    65c8:	4694      	mov	ip, r2
    65ca:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65cc:	2280      	movs	r2, #128	; 0x80
    65ce:	0052      	lsls	r2, r2, #1
    65d0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    65d2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65d4:	0776      	lsls	r6, r6, #29
    65d6:	d1d9      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    65d8:	2680      	movs	r6, #128	; 0x80
    65da:	0076      	lsls	r6, r6, #1
    65dc:	5daa      	ldrb	r2, [r5, r6]
    65de:	2703      	movs	r7, #3
    65e0:	433a      	orrs	r2, r7
    65e2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    65e4:	6802      	ldr	r2, [r0, #0]
    65e6:	0018      	movs	r0, r3
    65e8:	3008      	adds	r0, #8
    65ea:	0140      	lsls	r0, r0, #5
    65ec:	1812      	adds	r2, r2, r0
    65ee:	2040      	movs	r0, #64	; 0x40
    65f0:	7150      	strb	r0, [r2, #5]
    65f2:	e7ae      	b.n	6552 <usb_device_endpoint_set_config+0xf2>
    65f4:	015d      	lsls	r5, r3, #5
    65f6:	6802      	ldr	r2, [r0, #0]
    65f8:	4694      	mov	ip, r2
    65fa:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    65fc:	2280      	movs	r2, #128	; 0x80
    65fe:	0052      	lsls	r2, r2, #1
    6600:	5caf      	ldrb	r7, [r5, r2]
    6602:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6604:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6606:	4237      	tst	r7, r6
    6608:	d1c0      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    660a:	3690      	adds	r6, #144	; 0x90
    660c:	5daa      	ldrb	r2, [r5, r6]
    660e:	2730      	movs	r7, #48	; 0x30
    6610:	433a      	orrs	r2, r7
    6612:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6614:	6802      	ldr	r2, [r0, #0]
    6616:	0018      	movs	r0, r3
    6618:	3008      	adds	r0, #8
    661a:	0140      	lsls	r0, r0, #5
    661c:	1812      	adds	r2, r2, r0
    661e:	2080      	movs	r0, #128	; 0x80
    6620:	7110      	strb	r0, [r2, #4]
    6622:	e796      	b.n	6552 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6624:	2c00      	cmp	r4, #0
    6626:	db17      	blt.n	6658 <usb_device_endpoint_set_config+0x1f8>
    6628:	015d      	lsls	r5, r3, #5
    662a:	6802      	ldr	r2, [r0, #0]
    662c:	4694      	mov	ip, r2
    662e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6630:	2280      	movs	r2, #128	; 0x80
    6632:	0052      	lsls	r2, r2, #1
    6634:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6636:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6638:	0776      	lsls	r6, r6, #29
    663a:	d1a7      	bne.n	658c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    663c:	2680      	movs	r6, #128	; 0x80
    663e:	0076      	lsls	r6, r6, #1
    6640:	5daa      	ldrb	r2, [r5, r6]
    6642:	2704      	movs	r7, #4
    6644:	433a      	orrs	r2, r7
    6646:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6648:	6802      	ldr	r2, [r0, #0]
    664a:	0018      	movs	r0, r3
    664c:	3008      	adds	r0, #8
    664e:	0140      	lsls	r0, r0, #5
    6650:	1812      	adds	r2, r2, r0
    6652:	2040      	movs	r0, #64	; 0x40
    6654:	7150      	strb	r0, [r2, #5]
    6656:	e77c      	b.n	6552 <usb_device_endpoint_set_config+0xf2>
    6658:	015d      	lsls	r5, r3, #5
    665a:	6802      	ldr	r2, [r0, #0]
    665c:	4694      	mov	ip, r2
    665e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6660:	2280      	movs	r2, #128	; 0x80
    6662:	0052      	lsls	r2, r2, #1
    6664:	5caf      	ldrb	r7, [r5, r2]
    6666:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6668:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    666a:	4237      	tst	r7, r6
    666c:	d000      	beq.n	6670 <usb_device_endpoint_set_config+0x210>
    666e:	e78d      	b.n	658c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    6670:	3690      	adds	r6, #144	; 0x90
    6672:	5daa      	ldrb	r2, [r5, r6]
    6674:	2740      	movs	r7, #64	; 0x40
    6676:	433a      	orrs	r2, r7
    6678:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    667a:	6802      	ldr	r2, [r0, #0]
    667c:	0018      	movs	r0, r3
    667e:	3008      	adds	r0, #8
    6680:	0140      	lsls	r0, r0, #5
    6682:	1812      	adds	r2, r2, r0
    6684:	2080      	movs	r0, #128	; 0x80
    6686:	7110      	strb	r0, [r2, #4]
    6688:	e763      	b.n	6552 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    668a:	6869      	ldr	r1, [r5, #4]
    668c:	2380      	movs	r3, #128	; 0x80
    668e:	061b      	lsls	r3, r3, #24
    6690:	430b      	orrs	r3, r1
    6692:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    6694:	2200      	movs	r2, #0
    6696:	e779      	b.n	658c <usb_device_endpoint_set_config+0x12c>
    6698:	0000affc 	.word	0x0000affc
    669c:	20000990 	.word	0x20000990
    66a0:	8fffffff 	.word	0x8fffffff

000066a4 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    66a4:	230f      	movs	r3, #15
    66a6:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    66a8:	b249      	sxtb	r1, r1
    66aa:	2900      	cmp	r1, #0
    66ac:	db09      	blt.n	66c2 <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    66ae:	6802      	ldr	r2, [r0, #0]
    66b0:	3308      	adds	r3, #8
    66b2:	015b      	lsls	r3, r3, #5
    66b4:	5c98      	ldrb	r0, [r3, r2]
    66b6:	0740      	lsls	r0, r0, #29
    66b8:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    66ba:	1e43      	subs	r3, r0, #1
    66bc:	4198      	sbcs	r0, r3
    66be:	b2c0      	uxtb	r0, r0
}
    66c0:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    66c2:	6802      	ldr	r2, [r0, #0]
    66c4:	3308      	adds	r3, #8
    66c6:	015b      	lsls	r3, r3, #5
    66c8:	5c98      	ldrb	r0, [r3, r2]
    66ca:	0640      	lsls	r0, r0, #25
    66cc:	0f40      	lsrs	r0, r0, #29
    66ce:	e7f4      	b.n	66ba <usb_device_endpoint_is_configured+0x16>

000066d0 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    66d0:	230f      	movs	r3, #15
    66d2:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    66d4:	b249      	sxtb	r1, r1
    66d6:	2900      	cmp	r1, #0
    66d8:	db0a      	blt.n	66f0 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    66da:	3308      	adds	r3, #8
    66dc:	015b      	lsls	r3, r3, #5
    66de:	6802      	ldr	r2, [r0, #0]
    66e0:	18d2      	adds	r2, r2, r3
    66e2:	2140      	movs	r1, #64	; 0x40
    66e4:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    66e6:	6802      	ldr	r2, [r0, #0]
    66e8:	18d3      	adds	r3, r2, r3
    66ea:	2201      	movs	r2, #1
    66ec:	71da      	strb	r2, [r3, #7]
	}
}
    66ee:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    66f0:	3308      	adds	r3, #8
    66f2:	015b      	lsls	r3, r3, #5
    66f4:	6802      	ldr	r2, [r0, #0]
    66f6:	18d2      	adds	r2, r2, r3
    66f8:	2180      	movs	r1, #128	; 0x80
    66fa:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    66fc:	6802      	ldr	r2, [r0, #0]
    66fe:	18d3      	adds	r3, r2, r3
    6700:	2202      	movs	r2, #2
    6702:	71da      	strb	r2, [r3, #7]
    6704:	e7f3      	b.n	66ee <usb_device_endpoint_abort_job+0x1e>

00006706 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6706:	230f      	movs	r3, #15
    6708:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    670a:	b249      	sxtb	r1, r1
    670c:	2900      	cmp	r1, #0
    670e:	db07      	blt.n	6720 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6710:	6802      	ldr	r2, [r0, #0]
    6712:	3308      	adds	r3, #8
    6714:	015b      	lsls	r3, r3, #5
    6716:	18d3      	adds	r3, r2, r3
    6718:	7998      	ldrb	r0, [r3, #6]
    671a:	06c0      	lsls	r0, r0, #27
    671c:	0fc0      	lsrs	r0, r0, #31
	}
}
    671e:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    6720:	6802      	ldr	r2, [r0, #0]
    6722:	3308      	adds	r3, #8
    6724:	015b      	lsls	r3, r3, #5
    6726:	18d3      	adds	r3, r2, r3
    6728:	7998      	ldrb	r0, [r3, #6]
    672a:	0680      	lsls	r0, r0, #26
    672c:	0fc0      	lsrs	r0, r0, #31
    672e:	e7f6      	b.n	671e <usb_device_endpoint_is_halted+0x18>

00006730 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6730:	230f      	movs	r3, #15
    6732:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    6734:	b249      	sxtb	r1, r1
    6736:	2900      	cmp	r1, #0
    6738:	db06      	blt.n	6748 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    673a:	6802      	ldr	r2, [r0, #0]
    673c:	3308      	adds	r3, #8
    673e:	015b      	lsls	r3, r3, #5
    6740:	18d3      	adds	r3, r2, r3
    6742:	2210      	movs	r2, #16
    6744:	715a      	strb	r2, [r3, #5]
	}
}
    6746:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    6748:	6802      	ldr	r2, [r0, #0]
    674a:	3308      	adds	r3, #8
    674c:	015b      	lsls	r3, r3, #5
    674e:	18d3      	adds	r3, r2, r3
    6750:	2220      	movs	r2, #32
    6752:	715a      	strb	r2, [r3, #5]
    6754:	e7f7      	b.n	6746 <usb_device_endpoint_set_halt+0x16>

00006756 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    6756:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6758:	230f      	movs	r3, #15
    675a:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    675c:	b249      	sxtb	r1, r1
    675e:	2900      	cmp	r1, #0
    6760:	db1d      	blt.n	679e <usb_device_endpoint_clear_halt+0x48>
    6762:	0159      	lsls	r1, r3, #5
    6764:	6802      	ldr	r2, [r0, #0]
    6766:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    6768:	2483      	movs	r4, #131	; 0x83
    676a:	0064      	lsls	r4, r4, #1
    676c:	5d14      	ldrb	r4, [r2, r4]
    676e:	06e4      	lsls	r4, r4, #27
    6770:	d514      	bpl.n	679c <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    6772:	2510      	movs	r5, #16
    6774:	2482      	movs	r4, #130	; 0x82
    6776:	0064      	lsls	r4, r4, #1
    6778:	5515      	strb	r5, [r2, r4]
    677a:	6802      	ldr	r2, [r0, #0]
    677c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    677e:	2108      	movs	r1, #8
    6780:	31ff      	adds	r1, #255	; 0xff
    6782:	5c51      	ldrb	r1, [r2, r1]
    6784:	0689      	lsls	r1, r1, #26
    6786:	d509      	bpl.n	679c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6788:	3ce4      	subs	r4, #228	; 0xe4
    678a:	2108      	movs	r1, #8
    678c:	31ff      	adds	r1, #255	; 0xff
    678e:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    6790:	6802      	ldr	r2, [r0, #0]
    6792:	3308      	adds	r3, #8
    6794:	015b      	lsls	r3, r3, #5
    6796:	18d3      	adds	r3, r2, r3
    6798:	2201      	movs	r2, #1
    679a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    679c:	bd30      	pop	{r4, r5, pc}
    679e:	0159      	lsls	r1, r3, #5
    67a0:	6802      	ldr	r2, [r0, #0]
    67a2:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    67a4:	2483      	movs	r4, #131	; 0x83
    67a6:	0064      	lsls	r4, r4, #1
    67a8:	5d14      	ldrb	r4, [r2, r4]
    67aa:	06a4      	lsls	r4, r4, #26
    67ac:	d5f6      	bpl.n	679c <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    67ae:	2520      	movs	r5, #32
    67b0:	2482      	movs	r4, #130	; 0x82
    67b2:	0064      	lsls	r4, r4, #1
    67b4:	5515      	strb	r5, [r2, r4]
    67b6:	6802      	ldr	r2, [r0, #0]
    67b8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    67ba:	2108      	movs	r1, #8
    67bc:	31ff      	adds	r1, #255	; 0xff
    67be:	5c51      	ldrb	r1, [r2, r1]
    67c0:	0649      	lsls	r1, r1, #25
    67c2:	d5eb      	bpl.n	679c <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    67c4:	3cc4      	subs	r4, #196	; 0xc4
    67c6:	2108      	movs	r1, #8
    67c8:	31ff      	adds	r1, #255	; 0xff
    67ca:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    67cc:	6802      	ldr	r2, [r0, #0]
    67ce:	3308      	adds	r3, #8
    67d0:	015b      	lsls	r3, r3, #5
    67d2:	18d3      	adds	r3, r2, r3
    67d4:	2202      	movs	r2, #2
    67d6:	711a      	strb	r2, [r3, #4]
    67d8:	e7e0      	b.n	679c <usb_device_endpoint_clear_halt+0x46>
	...

000067dc <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    67dc:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    67de:	000c      	movs	r4, r1
    67e0:	3408      	adds	r4, #8
    67e2:	0164      	lsls	r4, r4, #5
    67e4:	6805      	ldr	r5, [r0, #0]
    67e6:	5d64      	ldrb	r4, [r4, r5]
    67e8:	0664      	lsls	r4, r4, #25
    67ea:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    67ec:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    67ee:	2c00      	cmp	r4, #0
    67f0:	d101      	bne.n	67f6 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    67f2:	0028      	movs	r0, r5
    67f4:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    67f6:	014c      	lsls	r4, r1, #5
    67f8:	4d0b      	ldr	r5, [pc, #44]	; (6828 <usb_device_endpoint_write_buffer_job+0x4c>)
    67fa:	192d      	adds	r5, r5, r4
    67fc:	002c      	movs	r4, r5
    67fe:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6800:	696a      	ldr	r2, [r5, #20]
    6802:	4d0a      	ldr	r5, [pc, #40]	; (682c <usb_device_endpoint_write_buffer_job+0x50>)
    6804:	402a      	ands	r2, r5
    6806:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    6808:	6962      	ldr	r2, [r4, #20]
    680a:	049b      	lsls	r3, r3, #18
    680c:	0c9b      	lsrs	r3, r3, #18
    680e:	0b92      	lsrs	r2, r2, #14
    6810:	0392      	lsls	r2, r2, #14
    6812:	4313      	orrs	r3, r2
    6814:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    6816:	6803      	ldr	r3, [r0, #0]
    6818:	3108      	adds	r1, #8
    681a:	0149      	lsls	r1, r1, #5
    681c:	1859      	adds	r1, r3, r1
    681e:	2380      	movs	r3, #128	; 0x80
    6820:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    6822:	2500      	movs	r5, #0
    6824:	e7e5      	b.n	67f2 <usb_device_endpoint_write_buffer_job+0x16>
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	20000990 	.word	0x20000990
    682c:	f0003fff 	.word	0xf0003fff

00006830 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6830:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6832:	000c      	movs	r4, r1
    6834:	3408      	adds	r4, #8
    6836:	0164      	lsls	r4, r4, #5
    6838:	6805      	ldr	r5, [r0, #0]
    683a:	5d64      	ldrb	r4, [r4, r5]
    683c:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    683e:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6840:	2c00      	cmp	r4, #0
    6842:	d101      	bne.n	6848 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    6844:	0028      	movs	r0, r5
    6846:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6848:	4c0b      	ldr	r4, [pc, #44]	; (6878 <usb_device_endpoint_read_buffer_job+0x48>)
    684a:	014d      	lsls	r5, r1, #5
    684c:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    684e:	1962      	adds	r2, r4, r5
    6850:	6854      	ldr	r4, [r2, #4]
    6852:	049b      	lsls	r3, r3, #18
    6854:	091b      	lsrs	r3, r3, #4
    6856:	4d09      	ldr	r5, [pc, #36]	; (687c <usb_device_endpoint_read_buffer_job+0x4c>)
    6858:	402c      	ands	r4, r5
    685a:	4323      	orrs	r3, r4
    685c:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    685e:	6853      	ldr	r3, [r2, #4]
    6860:	0b9b      	lsrs	r3, r3, #14
    6862:	039b      	lsls	r3, r3, #14
    6864:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6866:	6803      	ldr	r3, [r0, #0]
    6868:	3108      	adds	r1, #8
    686a:	0149      	lsls	r1, r1, #5
    686c:	1859      	adds	r1, r3, r1
    686e:	2340      	movs	r3, #64	; 0x40
    6870:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6872:	2500      	movs	r5, #0
    6874:	e7e6      	b.n	6844 <usb_device_endpoint_read_buffer_job+0x14>
    6876:	46c0      	nop			; (mov r8, r8)
    6878:	20000990 	.word	0x20000990
    687c:	f0003fff 	.word	0xf0003fff

00006880 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6880:	4b09      	ldr	r3, [pc, #36]	; (68a8 <usb_device_endpoint_setup_buffer_job+0x28>)
    6882:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6884:	685a      	ldr	r2, [r3, #4]
    6886:	4909      	ldr	r1, [pc, #36]	; (68ac <usb_device_endpoint_setup_buffer_job+0x2c>)
    6888:	4011      	ands	r1, r2
    688a:	2280      	movs	r2, #128	; 0x80
    688c:	0292      	lsls	r2, r2, #10
    688e:	430a      	orrs	r2, r1
    6890:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6892:	685a      	ldr	r2, [r3, #4]
    6894:	0b92      	lsrs	r2, r2, #14
    6896:	0392      	lsls	r2, r2, #14
    6898:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    689a:	6802      	ldr	r2, [r0, #0]
    689c:	2140      	movs	r1, #64	; 0x40
    689e:	2382      	movs	r3, #130	; 0x82
    68a0:	005b      	lsls	r3, r3, #1
    68a2:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    68a4:	2000      	movs	r0, #0
    68a6:	4770      	bx	lr
    68a8:	20000990 	.word	0x20000990
    68ac:	f0003fff 	.word	0xf0003fff

000068b0 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    68b0:	6802      	ldr	r2, [r0, #0]
    68b2:	7813      	ldrb	r3, [r2, #0]
    68b4:	2102      	movs	r1, #2
    68b6:	430b      	orrs	r3, r1
    68b8:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    68ba:	6802      	ldr	r2, [r0, #0]
    68bc:	7893      	ldrb	r3, [r2, #2]
    68be:	2b02      	cmp	r3, #2
    68c0:	d0fc      	beq.n	68bc <usb_enable+0xc>
}
    68c2:	4770      	bx	lr

000068c4 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    68c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c6:	46de      	mov	lr, fp
    68c8:	4657      	mov	r7, sl
    68ca:	464e      	mov	r6, r9
    68cc:	4645      	mov	r5, r8
    68ce:	b5e0      	push	{r5, r6, r7, lr}
    68d0:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    68d2:	4bc2      	ldr	r3, [pc, #776]	; (6bdc <USB_Handler+0x318>)
    68d4:	681f      	ldr	r7, [r3, #0]
    68d6:	683d      	ldr	r5, [r7, #0]
    68d8:	782b      	ldrb	r3, [r5, #0]
    68da:	09db      	lsrs	r3, r3, #7
    68dc:	d114      	bne.n	6908 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    68de:	8c2e      	ldrh	r6, [r5, #32]
    68e0:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    68e2:	2e00      	cmp	r6, #0
    68e4:	d000      	beq.n	68e8 <USB_Handler+0x24>
    68e6:	e1a9      	b.n	6c3c <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    68e8:	8bae      	ldrh	r6, [r5, #28]
    68ea:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    68ec:	23ab      	movs	r3, #171	; 0xab
    68ee:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    68f0:	5afb      	ldrh	r3, [r7, r3]
    68f2:	22aa      	movs	r2, #170	; 0xaa
    68f4:	0052      	lsls	r2, r2, #1
    68f6:	5abd      	ldrh	r5, [r7, r2]
    68f8:	401d      	ands	r5, r3
    68fa:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    68fc:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    68fe:	4fb8      	ldr	r7, [pc, #736]	; (6be0 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6900:	4bb6      	ldr	r3, [pc, #728]	; (6bdc <USB_Handler+0x318>)
    6902:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6904:	4698      	mov	r8, r3
    6906:	e184      	b.n	6c12 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6908:	8c2b      	ldrh	r3, [r5, #32]
    690a:	b29b      	uxth	r3, r3
    690c:	2b00      	cmp	r3, #0
    690e:	d100      	bne.n	6912 <USB_Handler+0x4e>
    6910:	e0de      	b.n	6ad0 <USB_Handler+0x20c>
    6912:	8c28      	ldrh	r0, [r5, #32]
    6914:	b280      	uxth	r0, r0
    6916:	4bb3      	ldr	r3, [pc, #716]	; (6be4 <USB_Handler+0x320>)
    6918:	4798      	blx	r3
    691a:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    691c:	281f      	cmp	r0, #31
    691e:	d900      	bls.n	6922 <USB_Handler+0x5e>
    6920:	e0d6      	b.n	6ad0 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6922:	0003      	movs	r3, r0
    6924:	3308      	adds	r3, #8
    6926:	015b      	lsls	r3, r3, #5
    6928:	18ed      	adds	r5, r5, r3
    692a:	79ed      	ldrb	r5, [r5, #7]
    692c:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    692e:	07ab      	lsls	r3, r5, #30
    6930:	d041      	beq.n	69b6 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6932:	4aad      	ldr	r2, [pc, #692]	; (6be8 <USB_Handler+0x324>)
    6934:	2301      	movs	r3, #1
    6936:	4083      	lsls	r3, r0
    6938:	6811      	ldr	r1, [r2, #0]
    693a:	4399      	bics	r1, r3
    693c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    693e:	0003      	movs	r3, r0
    6940:	3308      	adds	r3, #8
    6942:	015b      	lsls	r3, r3, #5
    6944:	683a      	ldr	r2, [r7, #0]
    6946:	4694      	mov	ip, r2
    6948:	4463      	add	r3, ip
    694a:	2203      	movs	r2, #3
    694c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    694e:	183b      	adds	r3, r7, r0
    6950:	33ae      	adds	r3, #174	; 0xae
    6952:	781b      	ldrb	r3, [r3, #0]
    6954:	07db      	lsls	r3, r3, #31
    6956:	d52e      	bpl.n	69b6 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    6958:	4ba4      	ldr	r3, [pc, #656]	; (6bec <USB_Handler+0x328>)
    695a:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    695c:	683a      	ldr	r2, [r7, #0]
    695e:	0003      	movs	r3, r0
    6960:	3308      	adds	r3, #8
    6962:	015b      	lsls	r3, r3, #5
    6964:	5c9b      	ldrb	r3, [r3, r2]
    6966:	079b      	lsls	r3, r3, #30
    6968:	0f9b      	lsrs	r3, r3, #30
    696a:	2b01      	cmp	r3, #1
    696c:	d100      	bne.n	6970 <USB_Handler+0xac>
    696e:	e081      	b.n	6a74 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6970:	0142      	lsls	r2, r0, #5
    6972:	4b9f      	ldr	r3, [pc, #636]	; (6bf0 <USB_Handler+0x32c>)
    6974:	189b      	adds	r3, r3, r2
    6976:	685a      	ldr	r2, [r3, #4]
    6978:	0112      	lsls	r2, r2, #4
    697a:	0c92      	lsrs	r2, r2, #18
    697c:	b290      	uxth	r0, r2
    697e:	499b      	ldr	r1, [pc, #620]	; (6bec <USB_Handler+0x328>)
    6980:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6982:	685a      	ldr	r2, [r3, #4]
    6984:	0492      	lsls	r2, r2, #18
    6986:	0c92      	lsrs	r2, r2, #18
    6988:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    698a:	685a      	ldr	r2, [r3, #4]
    698c:	4999      	ldr	r1, [pc, #612]	; (6bf4 <USB_Handler+0x330>)
    698e:	400a      	ands	r2, r1
    6990:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6992:	2800      	cmp	r0, #0
    6994:	d107      	bne.n	69a6 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6996:	0162      	lsls	r2, r4, #5
    6998:	4b95      	ldr	r3, [pc, #596]	; (6bf0 <USB_Handler+0x32c>)
    699a:	189b      	adds	r3, r3, r2
    699c:	685b      	ldr	r3, [r3, #4]
    699e:	049b      	lsls	r3, r3, #18
    69a0:	0c9b      	lsrs	r3, r3, #18
    69a2:	4a92      	ldr	r2, [pc, #584]	; (6bec <USB_Handler+0x328>)
    69a4:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    69a6:	4b8d      	ldr	r3, [pc, #564]	; (6bdc <USB_Handler+0x318>)
    69a8:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    69aa:	1ca3      	adds	r3, r4, #2
    69ac:	011b      	lsls	r3, r3, #4
    69ae:	18c3      	adds	r3, r0, r3
    69b0:	685b      	ldr	r3, [r3, #4]
    69b2:	498e      	ldr	r1, [pc, #568]	; (6bec <USB_Handler+0x328>)
    69b4:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    69b6:	076b      	lsls	r3, r5, #29
    69b8:	d50e      	bpl.n	69d8 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    69ba:	4a8b      	ldr	r2, [pc, #556]	; (6be8 <USB_Handler+0x324>)
    69bc:	2301      	movs	r3, #1
    69be:	40a3      	lsls	r3, r4
    69c0:	6811      	ldr	r1, [r2, #0]
    69c2:	4399      	bics	r1, r3
    69c4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    69c6:	4b85      	ldr	r3, [pc, #532]	; (6bdc <USB_Handler+0x318>)
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	681b      	ldr	r3, [r3, #0]
    69cc:	0022      	movs	r2, r4
    69ce:	3208      	adds	r2, #8
    69d0:	0152      	lsls	r2, r2, #5
    69d2:	189b      	adds	r3, r3, r2
    69d4:	2204      	movs	r2, #4
    69d6:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    69d8:	072b      	lsls	r3, r5, #28
    69da:	d514      	bpl.n	6a06 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    69dc:	4a82      	ldr	r2, [pc, #520]	; (6be8 <USB_Handler+0x324>)
    69de:	2301      	movs	r3, #1
    69e0:	40a3      	lsls	r3, r4
    69e2:	6811      	ldr	r1, [r2, #0]
    69e4:	4399      	bics	r1, r3
    69e6:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    69e8:	4b7c      	ldr	r3, [pc, #496]	; (6bdc <USB_Handler+0x318>)
    69ea:	6818      	ldr	r0, [r3, #0]
    69ec:	0023      	movs	r3, r4
    69ee:	3308      	adds	r3, #8
    69f0:	015b      	lsls	r3, r3, #5
    69f2:	6802      	ldr	r2, [r0, #0]
    69f4:	4694      	mov	ip, r2
    69f6:	4463      	add	r3, ip
    69f8:	2208      	movs	r2, #8
    69fa:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    69fc:	1903      	adds	r3, r0, r4
    69fe:	33ae      	adds	r3, #174	; 0xae
    6a00:	781b      	ldrb	r3, [r3, #0]
    6a02:	079b      	lsls	r3, r3, #30
    6a04:	d447      	bmi.n	6a96 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6a06:	06eb      	lsls	r3, r5, #27
    6a08:	d514      	bpl.n	6a34 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a0a:	4a77      	ldr	r2, [pc, #476]	; (6be8 <USB_Handler+0x324>)
    6a0c:	2301      	movs	r3, #1
    6a0e:	40a3      	lsls	r3, r4
    6a10:	6811      	ldr	r1, [r2, #0]
    6a12:	4399      	bics	r1, r3
    6a14:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a16:	4b71      	ldr	r3, [pc, #452]	; (6bdc <USB_Handler+0x318>)
    6a18:	6818      	ldr	r0, [r3, #0]
    6a1a:	0023      	movs	r3, r4
    6a1c:	3308      	adds	r3, #8
    6a1e:	015b      	lsls	r3, r3, #5
    6a20:	6802      	ldr	r2, [r0, #0]
    6a22:	4694      	mov	ip, r2
    6a24:	4463      	add	r3, ip
    6a26:	2210      	movs	r2, #16
    6a28:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6a2a:	1903      	adds	r3, r0, r4
    6a2c:	33ae      	adds	r3, #174	; 0xae
    6a2e:	781b      	ldrb	r3, [r3, #0]
    6a30:	075b      	lsls	r3, r3, #29
    6a32:	d43e      	bmi.n	6ab2 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6a34:	06ab      	lsls	r3, r5, #26
    6a36:	d400      	bmi.n	6a3a <USB_Handler+0x176>
    6a38:	e0b0      	b.n	6b9c <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a3a:	4a6b      	ldr	r2, [pc, #428]	; (6be8 <USB_Handler+0x324>)
    6a3c:	2301      	movs	r3, #1
    6a3e:	40a3      	lsls	r3, r4
    6a40:	6811      	ldr	r1, [r2, #0]
    6a42:	4399      	bics	r1, r3
    6a44:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a46:	4b65      	ldr	r3, [pc, #404]	; (6bdc <USB_Handler+0x318>)
    6a48:	6818      	ldr	r0, [r3, #0]
    6a4a:	0023      	movs	r3, r4
    6a4c:	3308      	adds	r3, #8
    6a4e:	015b      	lsls	r3, r3, #5
    6a50:	6802      	ldr	r2, [r0, #0]
    6a52:	4694      	mov	ip, r2
    6a54:	4463      	add	r3, ip
    6a56:	2220      	movs	r2, #32
    6a58:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6a5a:	1903      	adds	r3, r0, r4
    6a5c:	33ae      	adds	r3, #174	; 0xae
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	071b      	lsls	r3, r3, #28
    6a62:	d400      	bmi.n	6a66 <USB_Handler+0x1a2>
    6a64:	e09a      	b.n	6b9c <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    6a66:	4961      	ldr	r1, [pc, #388]	; (6bec <USB_Handler+0x328>)
    6a68:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6a6a:	0124      	lsls	r4, r4, #4
    6a6c:	1904      	adds	r4, r0, r4
    6a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6a70:	4798      	blx	r3
    6a72:	e093      	b.n	6b9c <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6a74:	0142      	lsls	r2, r0, #5
    6a76:	4b5e      	ldr	r3, [pc, #376]	; (6bf0 <USB_Handler+0x32c>)
    6a78:	189b      	adds	r3, r3, r2
    6a7a:	685a      	ldr	r2, [r3, #4]
    6a7c:	0492      	lsls	r2, r2, #18
    6a7e:	0c92      	lsrs	r2, r2, #18
    6a80:	495a      	ldr	r1, [pc, #360]	; (6bec <USB_Handler+0x328>)
    6a82:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6a84:	685a      	ldr	r2, [r3, #4]
    6a86:	0112      	lsls	r2, r2, #4
    6a88:	0c92      	lsrs	r2, r2, #18
    6a8a:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6a8c:	685a      	ldr	r2, [r3, #4]
    6a8e:	0b92      	lsrs	r2, r2, #14
    6a90:	0392      	lsls	r2, r2, #14
    6a92:	605a      	str	r2, [r3, #4]
    6a94:	e787      	b.n	69a6 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    6a96:	4955      	ldr	r1, [pc, #340]	; (6bec <USB_Handler+0x328>)
    6a98:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6a9a:	0162      	lsls	r2, r4, #5
    6a9c:	4b54      	ldr	r3, [pc, #336]	; (6bf0 <USB_Handler+0x32c>)
    6a9e:	189b      	adds	r3, r3, r2
    6aa0:	89db      	ldrh	r3, [r3, #14]
    6aa2:	221f      	movs	r2, #31
    6aa4:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    6aa6:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6aa8:	0123      	lsls	r3, r4, #4
    6aaa:	18c3      	adds	r3, r0, r3
    6aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6aae:	4798      	blx	r3
    6ab0:	e7a9      	b.n	6a06 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    6ab2:	494e      	ldr	r1, [pc, #312]	; (6bec <USB_Handler+0x328>)
    6ab4:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6ab6:	0162      	lsls	r2, r4, #5
    6ab8:	4b4d      	ldr	r3, [pc, #308]	; (6bf0 <USB_Handler+0x32c>)
    6aba:	189b      	adds	r3, r3, r2
    6abc:	685b      	ldr	r3, [r3, #4]
    6abe:	011b      	lsls	r3, r3, #4
    6ac0:	0c9b      	lsrs	r3, r3, #18
    6ac2:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6ac4:	0123      	lsls	r3, r4, #4
    6ac6:	18c3      	adds	r3, r0, r3
    6ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6aca:	2100      	movs	r1, #0
    6acc:	4798      	blx	r3
    6ace:	e7b1      	b.n	6a34 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6ad0:	8bac      	ldrh	r4, [r5, #28]
    6ad2:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6ad4:	0763      	lsls	r3, r4, #29
    6ad6:	d505      	bpl.n	6ae4 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6ad8:	2304      	movs	r3, #4
    6ada:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6adc:	33a1      	adds	r3, #161	; 0xa1
    6ade:	5cfb      	ldrb	r3, [r7, r3]
    6ae0:	07db      	lsls	r3, r3, #31
    6ae2:	d462      	bmi.n	6baa <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    6ae4:	0723      	lsls	r3, r4, #28
    6ae6:	d50b      	bpl.n	6b00 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    6ae8:	2200      	movs	r2, #0
    6aea:	4b3f      	ldr	r3, [pc, #252]	; (6be8 <USB_Handler+0x324>)
    6aec:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6aee:	4b3b      	ldr	r3, [pc, #236]	; (6bdc <USB_Handler+0x318>)
    6af0:	6818      	ldr	r0, [r3, #0]
    6af2:	2308      	movs	r3, #8
    6af4:	6802      	ldr	r2, [r0, #0]
    6af6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6af8:	339d      	adds	r3, #157	; 0x9d
    6afa:	5cc3      	ldrb	r3, [r0, r3]
    6afc:	079b      	lsls	r3, r3, #30
    6afe:	d458      	bmi.n	6bb2 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6b00:	0663      	lsls	r3, r4, #25
    6b02:	d508      	bpl.n	6b16 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    6b04:	4b35      	ldr	r3, [pc, #212]	; (6bdc <USB_Handler+0x318>)
    6b06:	6818      	ldr	r0, [r3, #0]
    6b08:	2340      	movs	r3, #64	; 0x40
    6b0a:	6802      	ldr	r2, [r0, #0]
    6b0c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6b0e:	3365      	adds	r3, #101	; 0x65
    6b10:	5cc3      	ldrb	r3, [r0, r3]
    6b12:	06db      	lsls	r3, r3, #27
    6b14:	d450      	bmi.n	6bb8 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6b16:	06a3      	lsls	r3, r4, #26
    6b18:	d508      	bpl.n	6b2c <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6b1a:	4b30      	ldr	r3, [pc, #192]	; (6bdc <USB_Handler+0x318>)
    6b1c:	6818      	ldr	r0, [r3, #0]
    6b1e:	2320      	movs	r3, #32
    6b20:	6802      	ldr	r2, [r0, #0]
    6b22:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6b24:	3385      	adds	r3, #133	; 0x85
    6b26:	5cc3      	ldrb	r3, [r0, r3]
    6b28:	071b      	lsls	r3, r3, #28
    6b2a:	d448      	bmi.n	6bbe <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6b2c:	06e3      	lsls	r3, r4, #27
    6b2e:	d508      	bpl.n	6b42 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    6b30:	4b2a      	ldr	r3, [pc, #168]	; (6bdc <USB_Handler+0x318>)
    6b32:	6818      	ldr	r0, [r3, #0]
    6b34:	2310      	movs	r3, #16
    6b36:	6802      	ldr	r2, [r0, #0]
    6b38:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6b3a:	3395      	adds	r3, #149	; 0x95
    6b3c:	5cc3      	ldrb	r3, [r0, r3]
    6b3e:	075b      	lsls	r3, r3, #29
    6b40:	d440      	bmi.n	6bc4 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6b42:	0623      	lsls	r3, r4, #24
    6b44:	d50b      	bpl.n	6b5e <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    6b46:	2200      	movs	r2, #0
    6b48:	4b27      	ldr	r3, [pc, #156]	; (6be8 <USB_Handler+0x324>)
    6b4a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6b4c:	4b23      	ldr	r3, [pc, #140]	; (6bdc <USB_Handler+0x318>)
    6b4e:	6818      	ldr	r0, [r3, #0]
    6b50:	2380      	movs	r3, #128	; 0x80
    6b52:	6802      	ldr	r2, [r0, #0]
    6b54:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6b56:	3325      	adds	r3, #37	; 0x25
    6b58:	5cc3      	ldrb	r3, [r0, r3]
    6b5a:	069b      	lsls	r3, r3, #26
    6b5c:	d435      	bmi.n	6bca <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    6b5e:	05e3      	lsls	r3, r4, #23
    6b60:	d50c      	bpl.n	6b7c <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    6b62:	2200      	movs	r2, #0
    6b64:	4b20      	ldr	r3, [pc, #128]	; (6be8 <USB_Handler+0x324>)
    6b66:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6b68:	4b1c      	ldr	r3, [pc, #112]	; (6bdc <USB_Handler+0x318>)
    6b6a:	6818      	ldr	r0, [r3, #0]
    6b6c:	2380      	movs	r3, #128	; 0x80
    6b6e:	005b      	lsls	r3, r3, #1
    6b70:	6802      	ldr	r2, [r0, #0]
    6b72:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6b74:	3b5b      	subs	r3, #91	; 0x5b
    6b76:	5cc3      	ldrb	r3, [r0, r3]
    6b78:	065b      	lsls	r3, r3, #25
    6b7a:	d429      	bmi.n	6bd0 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6b7c:	05a3      	lsls	r3, r4, #22
    6b7e:	d50d      	bpl.n	6b9c <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    6b80:	2200      	movs	r2, #0
    6b82:	4b19      	ldr	r3, [pc, #100]	; (6be8 <USB_Handler+0x324>)
    6b84:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6b86:	4b15      	ldr	r3, [pc, #84]	; (6bdc <USB_Handler+0x318>)
    6b88:	6818      	ldr	r0, [r3, #0]
    6b8a:	2380      	movs	r3, #128	; 0x80
    6b8c:	009b      	lsls	r3, r3, #2
    6b8e:	6802      	ldr	r2, [r0, #0]
    6b90:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    6b92:	3b5c      	subs	r3, #92	; 0x5c
    6b94:	3bff      	subs	r3, #255	; 0xff
    6b96:	5cc3      	ldrb	r3, [r0, r3]
    6b98:	2b7f      	cmp	r3, #127	; 0x7f
    6b9a:	d81c      	bhi.n	6bd6 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    6b9c:	b003      	add	sp, #12
    6b9e:	bc3c      	pop	{r2, r3, r4, r5}
    6ba0:	4690      	mov	r8, r2
    6ba2:	4699      	mov	r9, r3
    6ba4:	46a2      	mov	sl, r4
    6ba6:	46ab      	mov	fp, r5
    6ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	0038      	movs	r0, r7
    6bae:	4798      	blx	r3
    6bb0:	e798      	b.n	6ae4 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6bb2:	6883      	ldr	r3, [r0, #8]
    6bb4:	4798      	blx	r3
    6bb6:	e7a3      	b.n	6b00 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6bb8:	6943      	ldr	r3, [r0, #20]
    6bba:	4798      	blx	r3
    6bbc:	e7ab      	b.n	6b16 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6bbe:	6903      	ldr	r3, [r0, #16]
    6bc0:	4798      	blx	r3
    6bc2:	e7b3      	b.n	6b2c <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6bc4:	68c3      	ldr	r3, [r0, #12]
    6bc6:	4798      	blx	r3
    6bc8:	e7bb      	b.n	6b42 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6bca:	6983      	ldr	r3, [r0, #24]
    6bcc:	4798      	blx	r3
    6bce:	e7c6      	b.n	6b5e <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6bd0:	69c3      	ldr	r3, [r0, #28]
    6bd2:	4798      	blx	r3
    6bd4:	e7d2      	b.n	6b7c <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6bd6:	6a03      	ldr	r3, [r0, #32]
    6bd8:	4798      	blx	r3
    6bda:	e7df      	b.n	6b9c <USB_Handler+0x2d8>
    6bdc:	2000039c 	.word	0x2000039c
    6be0:	0000b010 	.word	0x0000b010
    6be4:	0000907d 	.word	0x0000907d
    6be8:	200003ac 	.word	0x200003ac
    6bec:	200003b0 	.word	0x200003b0
    6bf0:	20000990 	.word	0x20000990
    6bf4:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6bf8:	0023      	movs	r3, r4
    6bfa:	332e      	adds	r3, #46	; 0x2e
    6bfc:	009b      	lsls	r3, r3, #2
    6bfe:	4642      	mov	r2, r8
    6c00:	6812      	ldr	r2, [r2, #0]
    6c02:	589b      	ldr	r3, [r3, r2]
    6c04:	499e      	ldr	r1, [pc, #632]	; (6e80 <USB_Handler+0x5bc>)
    6c06:	4642      	mov	r2, r8
    6c08:	6810      	ldr	r0, [r2, #0]
    6c0a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6c0c:	3401      	adds	r4, #1
    6c0e:	2c07      	cmp	r4, #7
    6c10:	d0c4      	beq.n	6b9c <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    6c12:	0063      	lsls	r3, r4, #1
    6c14:	5bdb      	ldrh	r3, [r3, r7]
    6c16:	4233      	tst	r3, r6
    6c18:	d003      	beq.n	6c22 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6c1a:	464a      	mov	r2, r9
    6c1c:	6812      	ldr	r2, [r2, #0]
    6c1e:	6812      	ldr	r2, [r2, #0]
    6c20:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    6c22:	422b      	tst	r3, r5
    6c24:	d0f2      	beq.n	6c0c <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    6c26:	2c06      	cmp	r4, #6
    6c28:	d1e6      	bne.n	6bf8 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    6c2a:	4b96      	ldr	r3, [pc, #600]	; (6e84 <USB_Handler+0x5c0>)
    6c2c:	891b      	ldrh	r3, [r3, #8]
    6c2e:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    6c30:	2280      	movs	r2, #128	; 0x80
    6c32:	0052      	lsls	r2, r2, #1
    6c34:	4013      	ands	r3, r2
    6c36:	4a92      	ldr	r2, [pc, #584]	; (6e80 <USB_Handler+0x5bc>)
    6c38:	6013      	str	r3, [r2, #0]
    6c3a:	e7dd      	b.n	6bf8 <USB_Handler+0x334>
    6c3c:	003c      	movs	r4, r7
    6c3e:	3459      	adds	r4, #89	; 0x59
    6c40:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    6c42:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    6c44:	2201      	movs	r2, #1
    6c46:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6c48:	325f      	adds	r2, #95	; 0x5f
    6c4a:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6c4c:	3a50      	subs	r2, #80	; 0x50
    6c4e:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6c50:	3a0d      	subs	r2, #13
    6c52:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6c54:	46b8      	mov	r8, r7
    6c56:	002f      	movs	r7, r5
    6c58:	e0b9      	b.n	6dce <USB_Handler+0x50a>
    6c5a:	002a      	movs	r2, r5
    6c5c:	003d      	movs	r5, r7
    6c5e:	4647      	mov	r7, r8
    6c60:	4690      	mov	r8, r2
    6c62:	015b      	lsls	r3, r3, #5
    6c64:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6c66:	2308      	movs	r3, #8
    6c68:	33ff      	adds	r3, #255	; 0xff
    6c6a:	5ceb      	ldrb	r3, [r5, r3]
    6c6c:	065b      	lsls	r3, r3, #25
    6c6e:	d516      	bpl.n	6c9e <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6c70:	2240      	movs	r2, #64	; 0x40
    6c72:	2308      	movs	r3, #8
    6c74:	33ff      	adds	r3, #255	; 0xff
    6c76:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6c78:	3b88      	subs	r3, #136	; 0x88
    6c7a:	3bff      	subs	r3, #255	; 0xff
    6c7c:	4642      	mov	r2, r8
    6c7e:	4313      	orrs	r3, r2
    6c80:	4a81      	ldr	r2, [pc, #516]	; (6e88 <USB_Handler+0x5c4>)
    6c82:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6c84:	2360      	movs	r3, #96	; 0x60
    6c86:	420b      	tst	r3, r1
    6c88:	d100      	bne.n	6c8c <USB_Handler+0x3c8>
    6c8a:	e787      	b.n	6b9c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	011b      	lsls	r3, r3, #4
    6c90:	18fb      	adds	r3, r7, r3
    6c92:	33e0      	adds	r3, #224	; 0xe0
    6c94:	681b      	ldr	r3, [r3, #0]
    6c96:	497c      	ldr	r1, [pc, #496]	; (6e88 <USB_Handler+0x5c4>)
    6c98:	0038      	movs	r0, r7
    6c9a:	4798      	blx	r3
    6c9c:	e77e      	b.n	6b9c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6c9e:	2308      	movs	r3, #8
    6ca0:	33ff      	adds	r3, #255	; 0xff
    6ca2:	5ceb      	ldrb	r3, [r5, r3]
    6ca4:	069b      	lsls	r3, r3, #26
    6ca6:	d5ed      	bpl.n	6c84 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6ca8:	2220      	movs	r2, #32
    6caa:	2308      	movs	r3, #8
    6cac:	33ff      	adds	r3, #255	; 0xff
    6cae:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6cb0:	4b75      	ldr	r3, [pc, #468]	; (6e88 <USB_Handler+0x5c4>)
    6cb2:	4642      	mov	r2, r8
    6cb4:	719a      	strb	r2, [r3, #6]
    6cb6:	e7e5      	b.n	6c84 <USB_Handler+0x3c0>
    6cb8:	003d      	movs	r5, r7
    6cba:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    6cbc:	9a01      	ldr	r2, [sp, #4]
    6cbe:	0013      	movs	r3, r2
    6cc0:	3308      	adds	r3, #8
    6cc2:	015b      	lsls	r3, r3, #5
    6cc4:	18ed      	adds	r5, r5, r3
    6cc6:	2310      	movs	r3, #16
    6cc8:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    6cca:	18bb      	adds	r3, r7, r2
    6ccc:	3361      	adds	r3, #97	; 0x61
    6cce:	33ff      	adds	r3, #255	; 0xff
    6cd0:	781b      	ldrb	r3, [r3, #0]
    6cd2:	06db      	lsls	r3, r3, #27
    6cd4:	d400      	bmi.n	6cd8 <USB_Handler+0x414>
    6cd6:	e761      	b.n	6b9c <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6cd8:	0010      	movs	r0, r2
    6cda:	0152      	lsls	r2, r2, #5
    6cdc:	4b69      	ldr	r3, [pc, #420]	; (6e84 <USB_Handler+0x5c0>)
    6cde:	189b      	adds	r3, r3, r2
    6ce0:	685b      	ldr	r3, [r3, #4]
    6ce2:	049b      	lsls	r3, r3, #18
    6ce4:	0c9b      	lsrs	r3, r3, #18
    6ce6:	4968      	ldr	r1, [pc, #416]	; (6e88 <USB_Handler+0x5c4>)
    6ce8:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    6cea:	0103      	lsls	r3, r0, #4
    6cec:	18fb      	adds	r3, r7, r3
    6cee:	33dc      	adds	r3, #220	; 0xdc
    6cf0:	681b      	ldr	r3, [r3, #0]
    6cf2:	4640      	mov	r0, r8
    6cf4:	4798      	blx	r3
    6cf6:	e751      	b.n	6b9c <USB_Handler+0x2d8>
    6cf8:	002a      	movs	r2, r5
    6cfa:	003d      	movs	r5, r7
    6cfc:	4647      	mov	r7, r8
    6cfe:	4690      	mov	r8, r2
    6d00:	015b      	lsls	r3, r3, #5
    6d02:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6d04:	2308      	movs	r3, #8
    6d06:	33ff      	adds	r3, #255	; 0xff
    6d08:	5ceb      	ldrb	r3, [r5, r3]
    6d0a:	079b      	lsls	r3, r3, #30
    6d0c:	d51e      	bpl.n	6d4c <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6d0e:	2202      	movs	r2, #2
    6d10:	2308      	movs	r3, #8
    6d12:	33ff      	adds	r3, #255	; 0xff
    6d14:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6d16:	485c      	ldr	r0, [pc, #368]	; (6e88 <USB_Handler+0x5c4>)
    6d18:	3b88      	subs	r3, #136	; 0x88
    6d1a:	3bff      	subs	r3, #255	; 0xff
    6d1c:	4642      	mov	r2, r8
    6d1e:	4313      	orrs	r3, r2
    6d20:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    6d22:	9b01      	ldr	r3, [sp, #4]
    6d24:	015a      	lsls	r2, r3, #5
    6d26:	4b57      	ldr	r3, [pc, #348]	; (6e84 <USB_Handler+0x5c0>)
    6d28:	189b      	adds	r3, r3, r2
    6d2a:	3310      	adds	r3, #16
    6d2c:	685b      	ldr	r3, [r3, #4]
    6d2e:	049b      	lsls	r3, r3, #18
    6d30:	0c9b      	lsrs	r3, r3, #18
    6d32:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6d34:	078b      	lsls	r3, r1, #30
    6d36:	d100      	bne.n	6d3a <USB_Handler+0x476>
    6d38:	e730      	b.n	6b9c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6d3a:	9b01      	ldr	r3, [sp, #4]
    6d3c:	330d      	adds	r3, #13
    6d3e:	011b      	lsls	r3, r3, #4
    6d40:	18fb      	adds	r3, r7, r3
    6d42:	685b      	ldr	r3, [r3, #4]
    6d44:	4950      	ldr	r1, [pc, #320]	; (6e88 <USB_Handler+0x5c4>)
    6d46:	0038      	movs	r0, r7
    6d48:	4798      	blx	r3
    6d4a:	e727      	b.n	6b9c <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6d4c:	2308      	movs	r3, #8
    6d4e:	33ff      	adds	r3, #255	; 0xff
    6d50:	5ceb      	ldrb	r3, [r5, r3]
    6d52:	07db      	lsls	r3, r3, #31
    6d54:	d5ee      	bpl.n	6d34 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6d56:	2201      	movs	r2, #1
    6d58:	2308      	movs	r3, #8
    6d5a:	33ff      	adds	r3, #255	; 0xff
    6d5c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6d5e:	484a      	ldr	r0, [pc, #296]	; (6e88 <USB_Handler+0x5c4>)
    6d60:	4643      	mov	r3, r8
    6d62:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6d64:	9b01      	ldr	r3, [sp, #4]
    6d66:	015b      	lsls	r3, r3, #5
    6d68:	4a46      	ldr	r2, [pc, #280]	; (6e84 <USB_Handler+0x5c0>)
    6d6a:	18d2      	adds	r2, r2, r3
    6d6c:	6853      	ldr	r3, [r2, #4]
    6d6e:	049b      	lsls	r3, r3, #18
    6d70:	0c9b      	lsrs	r3, r3, #18
    6d72:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    6d74:	6853      	ldr	r3, [r2, #4]
    6d76:	011b      	lsls	r3, r3, #4
    6d78:	0c9b      	lsrs	r3, r3, #18
    6d7a:	8083      	strh	r3, [r0, #4]
    6d7c:	e7da      	b.n	6d34 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6d7e:	2208      	movs	r2, #8
    6d80:	32ff      	adds	r2, #255	; 0xff
    6d82:	5c9a      	ldrb	r2, [r3, r2]
    6d84:	0752      	lsls	r2, r2, #29
    6d86:	d56e      	bpl.n	6e66 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6d88:	2004      	movs	r0, #4
    6d8a:	2208      	movs	r2, #8
    6d8c:	32ff      	adds	r2, #255	; 0xff
    6d8e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6d90:	9801      	ldr	r0, [sp, #4]
    6d92:	0142      	lsls	r2, r0, #5
    6d94:	4b3b      	ldr	r3, [pc, #236]	; (6e84 <USB_Handler+0x5c0>)
    6d96:	189b      	adds	r3, r3, r2
    6d98:	7a9b      	ldrb	r3, [r3, #10]
    6d9a:	079b      	lsls	r3, r3, #30
    6d9c:	d505      	bpl.n	6daa <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6d9e:	4b39      	ldr	r3, [pc, #228]	; (6e84 <USB_Handler+0x5c0>)
    6da0:	189b      	adds	r3, r3, r2
    6da2:	7a9a      	ldrb	r2, [r3, #10]
    6da4:	2002      	movs	r0, #2
    6da6:	4382      	bics	r2, r0
    6da8:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6daa:	4b37      	ldr	r3, [pc, #220]	; (6e88 <USB_Handler+0x5c4>)
    6dac:	4642      	mov	r2, r8
    6dae:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6db0:	9b01      	ldr	r3, [sp, #4]
    6db2:	3308      	adds	r3, #8
    6db4:	015b      	lsls	r3, r3, #5
    6db6:	683a      	ldr	r2, [r7, #0]
    6db8:	4694      	mov	ip, r2
    6dba:	4463      	add	r3, ip
    6dbc:	79db      	ldrb	r3, [r3, #7]
    6dbe:	07db      	lsls	r3, r3, #31
    6dc0:	d551      	bpl.n	6e66 <USB_Handler+0x5a2>
    6dc2:	e6eb      	b.n	6b9c <USB_Handler+0x2d8>
    6dc4:	3301      	adds	r3, #1
    6dc6:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    6dc8:	2b08      	cmp	r3, #8
    6dca:	d100      	bne.n	6dce <USB_Handler+0x50a>
    6dcc:	e6e6      	b.n	6b9c <USB_Handler+0x2d8>
    6dce:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    6dd0:	9301      	str	r3, [sp, #4]
    6dd2:	0032      	movs	r2, r6
    6dd4:	411a      	asrs	r2, r3
    6dd6:	4661      	mov	r1, ip
    6dd8:	4211      	tst	r1, r2
    6dda:	d0f3      	beq.n	6dc4 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    6ddc:	001a      	movs	r2, r3
    6dde:	3208      	adds	r2, #8
    6de0:	0152      	lsls	r2, r2, #5
    6de2:	18ba      	adds	r2, r7, r2
    6de4:	79d2      	ldrb	r2, [r2, #7]
    6de6:	b2d2      	uxtb	r2, r2
    6de8:	7a21      	ldrb	r1, [r4, #8]
    6dea:	4011      	ands	r1, r2
    6dec:	7820      	ldrb	r0, [r4, #0]
    6dee:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6df0:	4648      	mov	r0, r9
    6df2:	4210      	tst	r0, r2
    6df4:	d000      	beq.n	6df8 <USB_Handler+0x534>
    6df6:	e730      	b.n	6c5a <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6df8:	4650      	mov	r0, sl
    6dfa:	4210      	tst	r0, r2
    6dfc:	d000      	beq.n	6e00 <USB_Handler+0x53c>
    6dfe:	e75b      	b.n	6cb8 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6e00:	4658      	mov	r0, fp
    6e02:	4210      	tst	r0, r2
    6e04:	d000      	beq.n	6e08 <USB_Handler+0x544>
    6e06:	e777      	b.n	6cf8 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6e08:	200c      	movs	r0, #12
    6e0a:	4210      	tst	r0, r2
    6e0c:	d0da      	beq.n	6dc4 <USB_Handler+0x500>
    6e0e:	002a      	movs	r2, r5
    6e10:	003d      	movs	r5, r7
    6e12:	4647      	mov	r7, r8
    6e14:	4690      	mov	r8, r2
    6e16:	015b      	lsls	r3, r3, #5
    6e18:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6e1a:	2208      	movs	r2, #8
    6e1c:	32ff      	adds	r2, #255	; 0xff
    6e1e:	5c9a      	ldrb	r2, [r3, r2]
    6e20:	0712      	lsls	r2, r2, #28
    6e22:	d5ac      	bpl.n	6d7e <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    6e24:	3804      	subs	r0, #4
    6e26:	2208      	movs	r2, #8
    6e28:	32ff      	adds	r2, #255	; 0xff
    6e2a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6e2c:	9801      	ldr	r0, [sp, #4]
    6e2e:	0142      	lsls	r2, r0, #5
    6e30:	4b14      	ldr	r3, [pc, #80]	; (6e84 <USB_Handler+0x5c0>)
    6e32:	189b      	adds	r3, r3, r2
    6e34:	7e9b      	ldrb	r3, [r3, #26]
    6e36:	079b      	lsls	r3, r3, #30
    6e38:	d505      	bpl.n	6e46 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6e3a:	4b12      	ldr	r3, [pc, #72]	; (6e84 <USB_Handler+0x5c0>)
    6e3c:	189b      	adds	r3, r3, r2
    6e3e:	7e9a      	ldrb	r2, [r3, #26]
    6e40:	2002      	movs	r0, #2
    6e42:	4382      	bics	r2, r0
    6e44:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6e46:	2380      	movs	r3, #128	; 0x80
    6e48:	425b      	negs	r3, r3
    6e4a:	4642      	mov	r2, r8
    6e4c:	4313      	orrs	r3, r2
    6e4e:	4a0e      	ldr	r2, [pc, #56]	; (6e88 <USB_Handler+0x5c4>)
    6e50:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6e52:	9b01      	ldr	r3, [sp, #4]
    6e54:	3308      	adds	r3, #8
    6e56:	015b      	lsls	r3, r3, #5
    6e58:	683a      	ldr	r2, [r7, #0]
    6e5a:	4694      	mov	ip, r2
    6e5c:	4463      	add	r3, ip
    6e5e:	79db      	ldrb	r3, [r3, #7]
    6e60:	079b      	lsls	r3, r3, #30
    6e62:	d500      	bpl.n	6e66 <USB_Handler+0x5a2>
    6e64:	e69a      	b.n	6b9c <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6e66:	230c      	movs	r3, #12
    6e68:	420b      	tst	r3, r1
    6e6a:	d100      	bne.n	6e6e <USB_Handler+0x5aa>
    6e6c:	e696      	b.n	6b9c <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    6e6e:	9b01      	ldr	r3, [sp, #4]
    6e70:	011b      	lsls	r3, r3, #4
    6e72:	18fb      	adds	r3, r7, r3
    6e74:	33d8      	adds	r3, #216	; 0xd8
    6e76:	681b      	ldr	r3, [r3, #0]
    6e78:	4903      	ldr	r1, [pc, #12]	; (6e88 <USB_Handler+0x5c4>)
    6e7a:	0038      	movs	r0, r7
    6e7c:	4798      	blx	r3
    6e7e:	e68d      	b.n	6b9c <USB_Handler+0x2d8>
    6e80:	200003a0 	.word	0x200003a0
    6e84:	20000990 	.word	0x20000990
    6e88:	200003a4 	.word	0x200003a4

00006e8c <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6e8c:	2200      	movs	r2, #0
    6e8e:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    6e90:	2301      	movs	r3, #1
    6e92:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    6e94:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    6e96:	70c3      	strb	r3, [r0, #3]
}
    6e98:	4770      	bx	lr
	...

00006e9c <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e9e:	46ce      	mov	lr, r9
    6ea0:	4647      	mov	r7, r8
    6ea2:	b580      	push	{r7, lr}
    6ea4:	b083      	sub	sp, #12
    6ea6:	0004      	movs	r4, r0
    6ea8:	000d      	movs	r5, r1
    6eaa:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6eac:	2300      	movs	r3, #0
    6eae:	4a6e      	ldr	r2, [pc, #440]	; (7068 <usb_init+0x1cc>)
    6eb0:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    6eb2:	4a6e      	ldr	r2, [pc, #440]	; (706c <usb_init+0x1d0>)
    6eb4:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6eb6:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    6eb8:	496d      	ldr	r1, [pc, #436]	; (7070 <usb_init+0x1d4>)
    6eba:	69ca      	ldr	r2, [r1, #28]
    6ebc:	2020      	movs	r0, #32
    6ebe:	4302      	orrs	r2, r0
    6ec0:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6ec2:	af01      	add	r7, sp, #4
    6ec4:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ec6:	2201      	movs	r2, #1
    6ec8:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    6eca:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    6ecc:	3306      	adds	r3, #6
    6ece:	4699      	mov	r9, r3
    6ed0:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    6ed2:	0039      	movs	r1, r7
    6ed4:	3808      	subs	r0, #8
    6ed6:	4b67      	ldr	r3, [pc, #412]	; (7074 <usb_init+0x1d8>)
    6ed8:	4698      	mov	r8, r3
    6eda:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6edc:	464b      	mov	r3, r9
    6ede:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6ee0:	0039      	movs	r1, r7
    6ee2:	2019      	movs	r0, #25
    6ee4:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    6ee6:	78b3      	ldrb	r3, [r6, #2]
    6ee8:	466a      	mov	r2, sp
    6eea:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6eec:	4669      	mov	r1, sp
    6eee:	2006      	movs	r0, #6
    6ef0:	4b61      	ldr	r3, [pc, #388]	; (7078 <usb_init+0x1dc>)
    6ef2:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    6ef4:	2006      	movs	r0, #6
    6ef6:	4b61      	ldr	r3, [pc, #388]	; (707c <usb_init+0x1e0>)
    6ef8:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6efa:	782b      	ldrb	r3, [r5, #0]
    6efc:	2201      	movs	r2, #1
    6efe:	4313      	orrs	r3, r2
    6f00:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    6f02:	78ab      	ldrb	r3, [r5, #2]
    6f04:	07db      	lsls	r3, r3, #31
    6f06:	d4fc      	bmi.n	6f02 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6f08:	4a5d      	ldr	r2, [pc, #372]	; (7080 <usb_init+0x1e4>)
    6f0a:	78d3      	ldrb	r3, [r2, #3]
    6f0c:	2103      	movs	r1, #3
    6f0e:	438b      	bics	r3, r1
    6f10:	2102      	movs	r1, #2
    6f12:	430b      	orrs	r3, r1
    6f14:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6f16:	78d3      	ldrb	r3, [r2, #3]
    6f18:	210c      	movs	r1, #12
    6f1a:	438b      	bics	r3, r1
    6f1c:	2108      	movs	r1, #8
    6f1e:	430b      	orrs	r3, r1
    6f20:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f22:	4b58      	ldr	r3, [pc, #352]	; (7084 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    6f24:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f26:	039b      	lsls	r3, r3, #14
    6f28:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    6f2a:	2b1f      	cmp	r3, #31
    6f2c:	d100      	bne.n	6f30 <usb_init+0x94>
    6f2e:	e08f      	b.n	7050 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6f30:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6f32:	019b      	lsls	r3, r3, #6
    6f34:	4954      	ldr	r1, [pc, #336]	; (7088 <usb_init+0x1ec>)
    6f36:	400a      	ands	r2, r1
    6f38:	4313      	orrs	r3, r2
    6f3a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6f3c:	4b51      	ldr	r3, [pc, #324]	; (7084 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6f42:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    6f44:	2b1f      	cmp	r3, #31
    6f46:	d100      	bne.n	6f4a <usb_init+0xae>
    6f48:	e084      	b.n	7054 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    6f4a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6f4c:	211f      	movs	r1, #31
    6f4e:	438a      	bics	r2, r1
    6f50:	4313      	orrs	r3, r2
    6f52:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6f54:	4b4b      	ldr	r3, [pc, #300]	; (7084 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    6f56:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6f58:	019b      	lsls	r3, r3, #6
    6f5a:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    6f5c:	2b07      	cmp	r3, #7
    6f5e:	d100      	bne.n	6f62 <usb_init+0xc6>
    6f60:	e07a      	b.n	7058 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    6f62:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6f64:	031b      	lsls	r3, r3, #12
    6f66:	4949      	ldr	r1, [pc, #292]	; (708c <usb_init+0x1f0>)
    6f68:	400a      	ands	r2, r1
    6f6a:	4313      	orrs	r3, r2
    6f6c:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6f6e:	7832      	ldrb	r2, [r6, #0]
    6f70:	7829      	ldrb	r1, [r5, #0]
    6f72:	01d2      	lsls	r2, r2, #7
    6f74:	237f      	movs	r3, #127	; 0x7f
    6f76:	400b      	ands	r3, r1
    6f78:	4313      	orrs	r3, r2
    6f7a:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6f7c:	7871      	ldrb	r1, [r6, #1]
    6f7e:	782b      	ldrb	r3, [r5, #0]
    6f80:	2201      	movs	r2, #1
    6f82:	400a      	ands	r2, r1
    6f84:	0092      	lsls	r2, r2, #2
    6f86:	2104      	movs	r1, #4
    6f88:	438b      	bics	r3, r1
    6f8a:	4313      	orrs	r3, r2
    6f8c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    6f8e:	4b40      	ldr	r3, [pc, #256]	; (7090 <usb_init+0x1f4>)
    6f90:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    6f92:	78f3      	ldrb	r3, [r6, #3]
    6f94:	2b01      	cmp	r3, #1
    6f96:	d061      	beq.n	705c <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d106      	bne.n	6faa <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    6f9c:	6822      	ldr	r2, [r4, #0]
    6f9e:	8913      	ldrh	r3, [r2, #8]
    6fa0:	210c      	movs	r1, #12
    6fa2:	438b      	bics	r3, r1
    6fa4:	2104      	movs	r1, #4
    6fa6:	430b      	orrs	r3, r1
    6fa8:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    6faa:	2280      	movs	r2, #128	; 0x80
    6fac:	0052      	lsls	r2, r2, #1
    6fae:	2100      	movs	r1, #0
    6fb0:	4837      	ldr	r0, [pc, #220]	; (7090 <usb_init+0x1f4>)
    6fb2:	4b38      	ldr	r3, [pc, #224]	; (7094 <usb_init+0x1f8>)
    6fb4:	4798      	blx	r3
    6fb6:	1d23      	adds	r3, r4, #4
    6fb8:	0021      	movs	r1, r4
    6fba:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    6fbc:	2200      	movs	r2, #0
    6fbe:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    6fc0:	428b      	cmp	r3, r1
    6fc2:	d1fc      	bne.n	6fbe <usb_init+0x122>
    6fc4:	0021      	movs	r1, r4
    6fc6:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    6fc8:	2200      	movs	r2, #0
    6fca:	601a      	str	r2, [r3, #0]
    6fcc:	605a      	str	r2, [r3, #4]
    6fce:	609a      	str	r2, [r3, #8]
    6fd0:	60da      	str	r2, [r3, #12]
    6fd2:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6fd4:	428b      	cmp	r3, r1
    6fd6:	d1f8      	bne.n	6fca <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    6fd8:	2300      	movs	r3, #0
    6fda:	22a4      	movs	r2, #164	; 0xa4
    6fdc:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    6fde:	3201      	adds	r2, #1
    6fe0:	54a3      	strb	r3, [r4, r2]
    6fe2:	0023      	movs	r3, r4
    6fe4:	33a6      	adds	r3, #166	; 0xa6
    6fe6:	0021      	movs	r1, r4
    6fe8:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    6fea:	2200      	movs	r2, #0
    6fec:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    6fee:	721a      	strb	r2, [r3, #8]
    6ff0:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6ff2:	4299      	cmp	r1, r3
    6ff4:	d1fa      	bne.n	6fec <usb_init+0x150>
    6ff6:	0023      	movs	r3, r4
    6ff8:	33b8      	adds	r3, #184	; 0xb8
    6ffa:	0021      	movs	r1, r4
    6ffc:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    6ffe:	2200      	movs	r2, #0
    7000:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    7002:	428b      	cmp	r3, r1
    7004:	d1fc      	bne.n	7000 <usb_init+0x164>
    7006:	0021      	movs	r1, r4
    7008:	3155      	adds	r1, #85	; 0x55
    700a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    700c:	2200      	movs	r2, #0
    700e:	601a      	str	r2, [r3, #0]
    7010:	605a      	str	r2, [r3, #4]
    7012:	609a      	str	r2, [r3, #8]
    7014:	60da      	str	r2, [r3, #12]
    7016:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    7018:	428b      	cmp	r3, r1
    701a:	d1f8      	bne.n	700e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    701c:	2300      	movs	r3, #0
    701e:	22aa      	movs	r2, #170	; 0xaa
    7020:	0052      	lsls	r2, r2, #1
    7022:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    7024:	3202      	adds	r2, #2
    7026:	52a3      	strh	r3, [r4, r2]
    7028:	0023      	movs	r3, r4
    702a:	3359      	adds	r3, #89	; 0x59
    702c:	33ff      	adds	r3, #255	; 0xff
    702e:	3461      	adds	r4, #97	; 0x61
    7030:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    7032:	2200      	movs	r2, #0
    7034:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    7036:	721a      	strb	r2, [r3, #8]
    7038:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    703a:	42a3      	cmp	r3, r4
    703c:	d1fa      	bne.n	7034 <usb_init+0x198>
    703e:	2280      	movs	r2, #128	; 0x80
    7040:	4b15      	ldr	r3, [pc, #84]	; (7098 <usb_init+0x1fc>)
    7042:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    7044:	2000      	movs	r0, #0
    7046:	b003      	add	sp, #12
    7048:	bc0c      	pop	{r2, r3}
    704a:	4690      	mov	r8, r2
    704c:	4699      	mov	r9, r3
    704e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    7050:	3b1a      	subs	r3, #26
    7052:	e76d      	b.n	6f30 <usb_init+0x94>
		pad_transp = 29;
    7054:	3b02      	subs	r3, #2
    7056:	e778      	b.n	6f4a <usb_init+0xae>
		pad_trim = 3;
    7058:	3b04      	subs	r3, #4
    705a:	e782      	b.n	6f62 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    705c:	6822      	ldr	r2, [r4, #0]
    705e:	8913      	ldrh	r3, [r2, #8]
    7060:	3108      	adds	r1, #8
    7062:	438b      	bics	r3, r1
    7064:	8113      	strh	r3, [r2, #8]
    7066:	e7a0      	b.n	6faa <usb_init+0x10e>
    7068:	200003ac 	.word	0x200003ac
    706c:	2000039c 	.word	0x2000039c
    7070:	40000400 	.word	0x40000400
    7074:	00008bd1 	.word	0x00008bd1
    7078:	00008ad9 	.word	0x00008ad9
    707c:	00008a4d 	.word	0x00008a4d
    7080:	41005000 	.word	0x41005000
    7084:	00806024 	.word	0x00806024
    7088:	fffff83f 	.word	0xfffff83f
    708c:	ffff8fff 	.word	0xffff8fff
    7090:	20000990 	.word	0x20000990
    7094:	00009343 	.word	0x00009343
    7098:	e000e100 	.word	0xe000e100

0000709c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    709c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    709e:	2a00      	cmp	r2, #0
    70a0:	d001      	beq.n	70a6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    70a2:	0018      	movs	r0, r3
    70a4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    70a6:	008b      	lsls	r3, r1, #2
    70a8:	4a06      	ldr	r2, [pc, #24]	; (70c4 <extint_register_callback+0x28>)
    70aa:	589b      	ldr	r3, [r3, r2]
    70ac:	2b00      	cmp	r3, #0
    70ae:	d003      	beq.n	70b8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    70b0:	4283      	cmp	r3, r0
    70b2:	d005      	beq.n	70c0 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    70b4:	231d      	movs	r3, #29
    70b6:	e7f4      	b.n	70a2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    70b8:	0089      	lsls	r1, r1, #2
    70ba:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    70bc:	2300      	movs	r3, #0
    70be:	e7f0      	b.n	70a2 <extint_register_callback+0x6>
		return STATUS_OK;
    70c0:	2300      	movs	r3, #0
    70c2:	e7ee      	b.n	70a2 <extint_register_callback+0x6>
    70c4:	20000408 	.word	0x20000408

000070c8 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    70c8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    70ca:	2900      	cmp	r1, #0
    70cc:	d001      	beq.n	70d2 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    70ce:	0018      	movs	r0, r3
    70d0:	4770      	bx	lr
		return NULL;
    70d2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    70d4:	281f      	cmp	r0, #31
    70d6:	d800      	bhi.n	70da <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    70d8:	4a02      	ldr	r2, [pc, #8]	; (70e4 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    70da:	2301      	movs	r3, #1
    70dc:	4083      	lsls	r3, r0
    70de:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    70e0:	2300      	movs	r3, #0
    70e2:	e7f4      	b.n	70ce <extint_chan_enable_callback+0x6>
    70e4:	40001800 	.word	0x40001800

000070e8 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    70e8:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    70ea:	2900      	cmp	r1, #0
    70ec:	d001      	beq.n	70f2 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    70ee:	0018      	movs	r0, r3
    70f0:	4770      	bx	lr
		return NULL;
    70f2:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    70f4:	281f      	cmp	r0, #31
    70f6:	d800      	bhi.n	70fa <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    70f8:	4a02      	ldr	r2, [pc, #8]	; (7104 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    70fa:	2301      	movs	r3, #1
    70fc:	4083      	lsls	r3, r0
    70fe:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    7100:	2300      	movs	r3, #0
    7102:	e7f4      	b.n	70ee <extint_chan_disable_callback+0x6>
    7104:	40001800 	.word	0x40001800

00007108 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    7108:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    710a:	2200      	movs	r2, #0
    710c:	4b10      	ldr	r3, [pc, #64]	; (7150 <EIC_Handler+0x48>)
    710e:	701a      	strb	r2, [r3, #0]
    7110:	2300      	movs	r3, #0
    7112:	4910      	ldr	r1, [pc, #64]	; (7154 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    7114:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7116:	4e10      	ldr	r6, [pc, #64]	; (7158 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7118:	4c0d      	ldr	r4, [pc, #52]	; (7150 <EIC_Handler+0x48>)
    711a:	e00a      	b.n	7132 <EIC_Handler+0x2a>
		return eics[eic_index];
    711c:	490d      	ldr	r1, [pc, #52]	; (7154 <EIC_Handler+0x4c>)
    711e:	e008      	b.n	7132 <EIC_Handler+0x2a>
    7120:	7823      	ldrb	r3, [r4, #0]
    7122:	3301      	adds	r3, #1
    7124:	b2db      	uxtb	r3, r3
    7126:	7023      	strb	r3, [r4, #0]
    7128:	2b0f      	cmp	r3, #15
    712a:	d810      	bhi.n	714e <EIC_Handler+0x46>
		return NULL;
    712c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    712e:	2b1f      	cmp	r3, #31
    7130:	d9f4      	bls.n	711c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    7132:	0028      	movs	r0, r5
    7134:	4018      	ands	r0, r3
    7136:	2201      	movs	r2, #1
    7138:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    713a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    713c:	4210      	tst	r0, r2
    713e:	d0ef      	beq.n	7120 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    7140:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7142:	009b      	lsls	r3, r3, #2
    7144:	599b      	ldr	r3, [r3, r6]
    7146:	2b00      	cmp	r3, #0
    7148:	d0ea      	beq.n	7120 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    714a:	4798      	blx	r3
    714c:	e7e8      	b.n	7120 <EIC_Handler+0x18>
			}
		}
	}
}
    714e:	bd70      	pop	{r4, r5, r6, pc}
    7150:	20000a90 	.word	0x20000a90
    7154:	40001800 	.word	0x40001800
    7158:	20000408 	.word	0x20000408

0000715c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    715c:	b5f0      	push	{r4, r5, r6, r7, lr}
    715e:	46de      	mov	lr, fp
    7160:	4657      	mov	r7, sl
    7162:	464e      	mov	r6, r9
    7164:	4645      	mov	r5, r8
    7166:	b5e0      	push	{r5, r6, r7, lr}
    7168:	b087      	sub	sp, #28
    716a:	4680      	mov	r8, r0
    716c:	9104      	str	r1, [sp, #16]
    716e:	0016      	movs	r6, r2
    7170:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7172:	2200      	movs	r2, #0
    7174:	2300      	movs	r3, #0
    7176:	2100      	movs	r1, #0
    7178:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    717a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    717c:	2001      	movs	r0, #1
    717e:	0021      	movs	r1, r4
    7180:	9600      	str	r6, [sp, #0]
    7182:	9701      	str	r7, [sp, #4]
    7184:	465c      	mov	r4, fp
    7186:	9403      	str	r4, [sp, #12]
    7188:	4644      	mov	r4, r8
    718a:	9405      	str	r4, [sp, #20]
    718c:	e013      	b.n	71b6 <long_division+0x5a>
    718e:	2420      	movs	r4, #32
    7190:	1a64      	subs	r4, r4, r1
    7192:	0005      	movs	r5, r0
    7194:	40e5      	lsrs	r5, r4
    7196:	46a8      	mov	r8, r5
    7198:	e014      	b.n	71c4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    719a:	9c00      	ldr	r4, [sp, #0]
    719c:	9d01      	ldr	r5, [sp, #4]
    719e:	1b12      	subs	r2, r2, r4
    71a0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    71a2:	465c      	mov	r4, fp
    71a4:	464d      	mov	r5, r9
    71a6:	432c      	orrs	r4, r5
    71a8:	46a3      	mov	fp, r4
    71aa:	9c03      	ldr	r4, [sp, #12]
    71ac:	4645      	mov	r5, r8
    71ae:	432c      	orrs	r4, r5
    71b0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    71b2:	3901      	subs	r1, #1
    71b4:	d325      	bcc.n	7202 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    71b6:	2420      	movs	r4, #32
    71b8:	4264      	negs	r4, r4
    71ba:	190c      	adds	r4, r1, r4
    71bc:	d4e7      	bmi.n	718e <long_division+0x32>
    71be:	0005      	movs	r5, r0
    71c0:	40a5      	lsls	r5, r4
    71c2:	46a8      	mov	r8, r5
    71c4:	0004      	movs	r4, r0
    71c6:	408c      	lsls	r4, r1
    71c8:	46a1      	mov	r9, r4
		r = r << 1;
    71ca:	1892      	adds	r2, r2, r2
    71cc:	415b      	adcs	r3, r3
    71ce:	0014      	movs	r4, r2
    71d0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    71d2:	9e05      	ldr	r6, [sp, #20]
    71d4:	464f      	mov	r7, r9
    71d6:	403e      	ands	r6, r7
    71d8:	46b4      	mov	ip, r6
    71da:	9e04      	ldr	r6, [sp, #16]
    71dc:	4647      	mov	r7, r8
    71de:	403e      	ands	r6, r7
    71e0:	46b2      	mov	sl, r6
    71e2:	4666      	mov	r6, ip
    71e4:	4657      	mov	r7, sl
    71e6:	433e      	orrs	r6, r7
    71e8:	d003      	beq.n	71f2 <long_division+0x96>
			r |= 0x01;
    71ea:	0006      	movs	r6, r0
    71ec:	4326      	orrs	r6, r4
    71ee:	0032      	movs	r2, r6
    71f0:	002b      	movs	r3, r5
		if (r >= d) {
    71f2:	9c00      	ldr	r4, [sp, #0]
    71f4:	9d01      	ldr	r5, [sp, #4]
    71f6:	429d      	cmp	r5, r3
    71f8:	d8db      	bhi.n	71b2 <long_division+0x56>
    71fa:	d1ce      	bne.n	719a <long_division+0x3e>
    71fc:	4294      	cmp	r4, r2
    71fe:	d8d8      	bhi.n	71b2 <long_division+0x56>
    7200:	e7cb      	b.n	719a <long_division+0x3e>
    7202:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7204:	4658      	mov	r0, fp
    7206:	0019      	movs	r1, r3
    7208:	b007      	add	sp, #28
    720a:	bc3c      	pop	{r2, r3, r4, r5}
    720c:	4690      	mov	r8, r2
    720e:	4699      	mov	r9, r3
    7210:	46a2      	mov	sl, r4
    7212:	46ab      	mov	fp, r5
    7214:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007216 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7216:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7218:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    721a:	2340      	movs	r3, #64	; 0x40
    721c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    721e:	4281      	cmp	r1, r0
    7220:	d202      	bcs.n	7228 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    7222:	0018      	movs	r0, r3
    7224:	bd10      	pop	{r4, pc}
		baud_calculated++;
    7226:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    7228:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    722a:	1c63      	adds	r3, r4, #1
    722c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    722e:	4288      	cmp	r0, r1
    7230:	d9f9      	bls.n	7226 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7232:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    7234:	2cff      	cmp	r4, #255	; 0xff
    7236:	d8f4      	bhi.n	7222 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    7238:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    723a:	2300      	movs	r3, #0
    723c:	e7f1      	b.n	7222 <_sercom_get_sync_baud_val+0xc>
	...

00007240 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7240:	b5f0      	push	{r4, r5, r6, r7, lr}
    7242:	b083      	sub	sp, #12
    7244:	000f      	movs	r7, r1
    7246:	0016      	movs	r6, r2
    7248:	aa08      	add	r2, sp, #32
    724a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    724c:	0004      	movs	r4, r0
    724e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7250:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    7252:	42bc      	cmp	r4, r7
    7254:	d902      	bls.n	725c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    7256:	0010      	movs	r0, r2
    7258:	b003      	add	sp, #12
    725a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    725c:	2b00      	cmp	r3, #0
    725e:	d114      	bne.n	728a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7260:	0002      	movs	r2, r0
    7262:	0008      	movs	r0, r1
    7264:	2100      	movs	r1, #0
    7266:	4c19      	ldr	r4, [pc, #100]	; (72cc <_sercom_get_async_baud_val+0x8c>)
    7268:	47a0      	blx	r4
    726a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    726c:	003a      	movs	r2, r7
    726e:	2300      	movs	r3, #0
    7270:	2000      	movs	r0, #0
    7272:	4c17      	ldr	r4, [pc, #92]	; (72d0 <_sercom_get_async_baud_val+0x90>)
    7274:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    7276:	2200      	movs	r2, #0
    7278:	2301      	movs	r3, #1
    727a:	1a12      	subs	r2, r2, r0
    727c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    727e:	0c12      	lsrs	r2, r2, #16
    7280:	041b      	lsls	r3, r3, #16
    7282:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    7284:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    7286:	2200      	movs	r2, #0
    7288:	e7e5      	b.n	7256 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    728a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    728c:	2b01      	cmp	r3, #1
    728e:	d1f9      	bne.n	7284 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    7290:	000a      	movs	r2, r1
    7292:	2300      	movs	r3, #0
    7294:	2100      	movs	r1, #0
    7296:	4c0d      	ldr	r4, [pc, #52]	; (72cc <_sercom_get_async_baud_val+0x8c>)
    7298:	47a0      	blx	r4
    729a:	0002      	movs	r2, r0
    729c:	000b      	movs	r3, r1
    729e:	9200      	str	r2, [sp, #0]
    72a0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    72a2:	0038      	movs	r0, r7
    72a4:	2100      	movs	r1, #0
    72a6:	4c0a      	ldr	r4, [pc, #40]	; (72d0 <_sercom_get_async_baud_val+0x90>)
    72a8:	47a0      	blx	r4
    72aa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    72ac:	2380      	movs	r3, #128	; 0x80
    72ae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    72b0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    72b2:	4298      	cmp	r0, r3
    72b4:	d8cf      	bhi.n	7256 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    72b6:	0f79      	lsrs	r1, r7, #29
    72b8:	00f8      	lsls	r0, r7, #3
    72ba:	9a00      	ldr	r2, [sp, #0]
    72bc:	9b01      	ldr	r3, [sp, #4]
    72be:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    72c0:	00ea      	lsls	r2, r5, #3
    72c2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    72c4:	b2d2      	uxtb	r2, r2
    72c6:	0352      	lsls	r2, r2, #13
    72c8:	432a      	orrs	r2, r5
    72ca:	e7db      	b.n	7284 <_sercom_get_async_baud_val+0x44>
    72cc:	000090fd 	.word	0x000090fd
    72d0:	0000715d 	.word	0x0000715d

000072d4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    72d4:	b510      	push	{r4, lr}
    72d6:	b082      	sub	sp, #8
    72d8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    72da:	4b0e      	ldr	r3, [pc, #56]	; (7314 <sercom_set_gclk_generator+0x40>)
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	2b00      	cmp	r3, #0
    72e0:	d007      	beq.n	72f2 <sercom_set_gclk_generator+0x1e>
    72e2:	2900      	cmp	r1, #0
    72e4:	d105      	bne.n	72f2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    72e6:	4b0b      	ldr	r3, [pc, #44]	; (7314 <sercom_set_gclk_generator+0x40>)
    72e8:	785b      	ldrb	r3, [r3, #1]
    72ea:	4283      	cmp	r3, r0
    72ec:	d010      	beq.n	7310 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    72ee:	201d      	movs	r0, #29
    72f0:	e00c      	b.n	730c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    72f2:	a901      	add	r1, sp, #4
    72f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    72f6:	2013      	movs	r0, #19
    72f8:	4b07      	ldr	r3, [pc, #28]	; (7318 <sercom_set_gclk_generator+0x44>)
    72fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    72fc:	2013      	movs	r0, #19
    72fe:	4b07      	ldr	r3, [pc, #28]	; (731c <sercom_set_gclk_generator+0x48>)
    7300:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    7302:	4b04      	ldr	r3, [pc, #16]	; (7314 <sercom_set_gclk_generator+0x40>)
    7304:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    7306:	2201      	movs	r2, #1
    7308:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    730a:	2000      	movs	r0, #0
}
    730c:	b002      	add	sp, #8
    730e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7310:	2000      	movs	r0, #0
    7312:	e7fb      	b.n	730c <sercom_set_gclk_generator+0x38>
    7314:	200003b8 	.word	0x200003b8
    7318:	00008ad9 	.word	0x00008ad9
    731c:	00008a4d 	.word	0x00008a4d

00007320 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7320:	4b40      	ldr	r3, [pc, #256]	; (7424 <_sercom_get_default_pad+0x104>)
    7322:	4298      	cmp	r0, r3
    7324:	d031      	beq.n	738a <_sercom_get_default_pad+0x6a>
    7326:	d90a      	bls.n	733e <_sercom_get_default_pad+0x1e>
    7328:	4b3f      	ldr	r3, [pc, #252]	; (7428 <_sercom_get_default_pad+0x108>)
    732a:	4298      	cmp	r0, r3
    732c:	d04d      	beq.n	73ca <_sercom_get_default_pad+0xaa>
    732e:	4b3f      	ldr	r3, [pc, #252]	; (742c <_sercom_get_default_pad+0x10c>)
    7330:	4298      	cmp	r0, r3
    7332:	d05a      	beq.n	73ea <_sercom_get_default_pad+0xca>
    7334:	4b3e      	ldr	r3, [pc, #248]	; (7430 <_sercom_get_default_pad+0x110>)
    7336:	4298      	cmp	r0, r3
    7338:	d037      	beq.n	73aa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    733a:	2000      	movs	r0, #0
}
    733c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    733e:	4b3d      	ldr	r3, [pc, #244]	; (7434 <_sercom_get_default_pad+0x114>)
    7340:	4298      	cmp	r0, r3
    7342:	d00c      	beq.n	735e <_sercom_get_default_pad+0x3e>
    7344:	4b3c      	ldr	r3, [pc, #240]	; (7438 <_sercom_get_default_pad+0x118>)
    7346:	4298      	cmp	r0, r3
    7348:	d1f7      	bne.n	733a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    734a:	2901      	cmp	r1, #1
    734c:	d017      	beq.n	737e <_sercom_get_default_pad+0x5e>
    734e:	2900      	cmp	r1, #0
    7350:	d05d      	beq.n	740e <_sercom_get_default_pad+0xee>
    7352:	2902      	cmp	r1, #2
    7354:	d015      	beq.n	7382 <_sercom_get_default_pad+0x62>
    7356:	2903      	cmp	r1, #3
    7358:	d015      	beq.n	7386 <_sercom_get_default_pad+0x66>
	return 0;
    735a:	2000      	movs	r0, #0
    735c:	e7ee      	b.n	733c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    735e:	2901      	cmp	r1, #1
    7360:	d007      	beq.n	7372 <_sercom_get_default_pad+0x52>
    7362:	2900      	cmp	r1, #0
    7364:	d051      	beq.n	740a <_sercom_get_default_pad+0xea>
    7366:	2902      	cmp	r1, #2
    7368:	d005      	beq.n	7376 <_sercom_get_default_pad+0x56>
    736a:	2903      	cmp	r1, #3
    736c:	d005      	beq.n	737a <_sercom_get_default_pad+0x5a>
	return 0;
    736e:	2000      	movs	r0, #0
    7370:	e7e4      	b.n	733c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7372:	4832      	ldr	r0, [pc, #200]	; (743c <_sercom_get_default_pad+0x11c>)
    7374:	e7e2      	b.n	733c <_sercom_get_default_pad+0x1c>
    7376:	4832      	ldr	r0, [pc, #200]	; (7440 <_sercom_get_default_pad+0x120>)
    7378:	e7e0      	b.n	733c <_sercom_get_default_pad+0x1c>
    737a:	4832      	ldr	r0, [pc, #200]	; (7444 <_sercom_get_default_pad+0x124>)
    737c:	e7de      	b.n	733c <_sercom_get_default_pad+0x1c>
    737e:	4832      	ldr	r0, [pc, #200]	; (7448 <_sercom_get_default_pad+0x128>)
    7380:	e7dc      	b.n	733c <_sercom_get_default_pad+0x1c>
    7382:	4832      	ldr	r0, [pc, #200]	; (744c <_sercom_get_default_pad+0x12c>)
    7384:	e7da      	b.n	733c <_sercom_get_default_pad+0x1c>
    7386:	4832      	ldr	r0, [pc, #200]	; (7450 <_sercom_get_default_pad+0x130>)
    7388:	e7d8      	b.n	733c <_sercom_get_default_pad+0x1c>
    738a:	2901      	cmp	r1, #1
    738c:	d007      	beq.n	739e <_sercom_get_default_pad+0x7e>
    738e:	2900      	cmp	r1, #0
    7390:	d03f      	beq.n	7412 <_sercom_get_default_pad+0xf2>
    7392:	2902      	cmp	r1, #2
    7394:	d005      	beq.n	73a2 <_sercom_get_default_pad+0x82>
    7396:	2903      	cmp	r1, #3
    7398:	d005      	beq.n	73a6 <_sercom_get_default_pad+0x86>
	return 0;
    739a:	2000      	movs	r0, #0
    739c:	e7ce      	b.n	733c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    739e:	482d      	ldr	r0, [pc, #180]	; (7454 <_sercom_get_default_pad+0x134>)
    73a0:	e7cc      	b.n	733c <_sercom_get_default_pad+0x1c>
    73a2:	482d      	ldr	r0, [pc, #180]	; (7458 <_sercom_get_default_pad+0x138>)
    73a4:	e7ca      	b.n	733c <_sercom_get_default_pad+0x1c>
    73a6:	482d      	ldr	r0, [pc, #180]	; (745c <_sercom_get_default_pad+0x13c>)
    73a8:	e7c8      	b.n	733c <_sercom_get_default_pad+0x1c>
    73aa:	2901      	cmp	r1, #1
    73ac:	d007      	beq.n	73be <_sercom_get_default_pad+0x9e>
    73ae:	2900      	cmp	r1, #0
    73b0:	d031      	beq.n	7416 <_sercom_get_default_pad+0xf6>
    73b2:	2902      	cmp	r1, #2
    73b4:	d005      	beq.n	73c2 <_sercom_get_default_pad+0xa2>
    73b6:	2903      	cmp	r1, #3
    73b8:	d005      	beq.n	73c6 <_sercom_get_default_pad+0xa6>
	return 0;
    73ba:	2000      	movs	r0, #0
    73bc:	e7be      	b.n	733c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73be:	4828      	ldr	r0, [pc, #160]	; (7460 <_sercom_get_default_pad+0x140>)
    73c0:	e7bc      	b.n	733c <_sercom_get_default_pad+0x1c>
    73c2:	4828      	ldr	r0, [pc, #160]	; (7464 <_sercom_get_default_pad+0x144>)
    73c4:	e7ba      	b.n	733c <_sercom_get_default_pad+0x1c>
    73c6:	4828      	ldr	r0, [pc, #160]	; (7468 <_sercom_get_default_pad+0x148>)
    73c8:	e7b8      	b.n	733c <_sercom_get_default_pad+0x1c>
    73ca:	2901      	cmp	r1, #1
    73cc:	d007      	beq.n	73de <_sercom_get_default_pad+0xbe>
    73ce:	2900      	cmp	r1, #0
    73d0:	d023      	beq.n	741a <_sercom_get_default_pad+0xfa>
    73d2:	2902      	cmp	r1, #2
    73d4:	d005      	beq.n	73e2 <_sercom_get_default_pad+0xc2>
    73d6:	2903      	cmp	r1, #3
    73d8:	d005      	beq.n	73e6 <_sercom_get_default_pad+0xc6>
	return 0;
    73da:	2000      	movs	r0, #0
    73dc:	e7ae      	b.n	733c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73de:	4823      	ldr	r0, [pc, #140]	; (746c <_sercom_get_default_pad+0x14c>)
    73e0:	e7ac      	b.n	733c <_sercom_get_default_pad+0x1c>
    73e2:	4823      	ldr	r0, [pc, #140]	; (7470 <_sercom_get_default_pad+0x150>)
    73e4:	e7aa      	b.n	733c <_sercom_get_default_pad+0x1c>
    73e6:	4823      	ldr	r0, [pc, #140]	; (7474 <_sercom_get_default_pad+0x154>)
    73e8:	e7a8      	b.n	733c <_sercom_get_default_pad+0x1c>
    73ea:	2901      	cmp	r1, #1
    73ec:	d007      	beq.n	73fe <_sercom_get_default_pad+0xde>
    73ee:	2900      	cmp	r1, #0
    73f0:	d015      	beq.n	741e <_sercom_get_default_pad+0xfe>
    73f2:	2902      	cmp	r1, #2
    73f4:	d005      	beq.n	7402 <_sercom_get_default_pad+0xe2>
    73f6:	2903      	cmp	r1, #3
    73f8:	d005      	beq.n	7406 <_sercom_get_default_pad+0xe6>
	return 0;
    73fa:	2000      	movs	r0, #0
    73fc:	e79e      	b.n	733c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73fe:	481e      	ldr	r0, [pc, #120]	; (7478 <_sercom_get_default_pad+0x158>)
    7400:	e79c      	b.n	733c <_sercom_get_default_pad+0x1c>
    7402:	481e      	ldr	r0, [pc, #120]	; (747c <_sercom_get_default_pad+0x15c>)
    7404:	e79a      	b.n	733c <_sercom_get_default_pad+0x1c>
    7406:	481e      	ldr	r0, [pc, #120]	; (7480 <_sercom_get_default_pad+0x160>)
    7408:	e798      	b.n	733c <_sercom_get_default_pad+0x1c>
    740a:	481e      	ldr	r0, [pc, #120]	; (7484 <_sercom_get_default_pad+0x164>)
    740c:	e796      	b.n	733c <_sercom_get_default_pad+0x1c>
    740e:	2003      	movs	r0, #3
    7410:	e794      	b.n	733c <_sercom_get_default_pad+0x1c>
    7412:	481d      	ldr	r0, [pc, #116]	; (7488 <_sercom_get_default_pad+0x168>)
    7414:	e792      	b.n	733c <_sercom_get_default_pad+0x1c>
    7416:	481d      	ldr	r0, [pc, #116]	; (748c <_sercom_get_default_pad+0x16c>)
    7418:	e790      	b.n	733c <_sercom_get_default_pad+0x1c>
    741a:	481d      	ldr	r0, [pc, #116]	; (7490 <_sercom_get_default_pad+0x170>)
    741c:	e78e      	b.n	733c <_sercom_get_default_pad+0x1c>
    741e:	481d      	ldr	r0, [pc, #116]	; (7494 <_sercom_get_default_pad+0x174>)
    7420:	e78c      	b.n	733c <_sercom_get_default_pad+0x1c>
    7422:	46c0      	nop			; (mov r8, r8)
    7424:	42001000 	.word	0x42001000
    7428:	42001800 	.word	0x42001800
    742c:	42001c00 	.word	0x42001c00
    7430:	42001400 	.word	0x42001400
    7434:	42000800 	.word	0x42000800
    7438:	42000c00 	.word	0x42000c00
    743c:	00050003 	.word	0x00050003
    7440:	00060003 	.word	0x00060003
    7444:	00070003 	.word	0x00070003
    7448:	00010003 	.word	0x00010003
    744c:	001e0003 	.word	0x001e0003
    7450:	001f0003 	.word	0x001f0003
    7454:	00090003 	.word	0x00090003
    7458:	000a0003 	.word	0x000a0003
    745c:	000b0003 	.word	0x000b0003
    7460:	00110003 	.word	0x00110003
    7464:	00120003 	.word	0x00120003
    7468:	00130003 	.word	0x00130003
    746c:	000d0003 	.word	0x000d0003
    7470:	000e0003 	.word	0x000e0003
    7474:	000f0003 	.word	0x000f0003
    7478:	00170003 	.word	0x00170003
    747c:	00180003 	.word	0x00180003
    7480:	00190003 	.word	0x00190003
    7484:	00040003 	.word	0x00040003
    7488:	00080003 	.word	0x00080003
    748c:	00100003 	.word	0x00100003
    7490:	000c0003 	.word	0x000c0003
    7494:	00160003 	.word	0x00160003

00007498 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7498:	b530      	push	{r4, r5, lr}
    749a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    749c:	4b0b      	ldr	r3, [pc, #44]	; (74cc <_sercom_get_sercom_inst_index+0x34>)
    749e:	466a      	mov	r2, sp
    74a0:	cb32      	ldmia	r3!, {r1, r4, r5}
    74a2:	c232      	stmia	r2!, {r1, r4, r5}
    74a4:	cb32      	ldmia	r3!, {r1, r4, r5}
    74a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    74a8:	9b00      	ldr	r3, [sp, #0]
    74aa:	4283      	cmp	r3, r0
    74ac:	d00b      	beq.n	74c6 <_sercom_get_sercom_inst_index+0x2e>
    74ae:	2301      	movs	r3, #1
    74b0:	009a      	lsls	r2, r3, #2
    74b2:	4669      	mov	r1, sp
    74b4:	5852      	ldr	r2, [r2, r1]
    74b6:	4282      	cmp	r2, r0
    74b8:	d006      	beq.n	74c8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    74ba:	3301      	adds	r3, #1
    74bc:	2b06      	cmp	r3, #6
    74be:	d1f7      	bne.n	74b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    74c0:	2000      	movs	r0, #0
}
    74c2:	b007      	add	sp, #28
    74c4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    74c6:	2300      	movs	r3, #0
			return i;
    74c8:	b2d8      	uxtb	r0, r3
    74ca:	e7fa      	b.n	74c2 <_sercom_get_sercom_inst_index+0x2a>
    74cc:	0000b024 	.word	0x0000b024

000074d0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    74d0:	b570      	push	{r4, r5, r6, lr}
    74d2:	b082      	sub	sp, #8
    74d4:	0006      	movs	r6, r0
    74d6:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    74d8:	2200      	movs	r2, #0
    74da:	466b      	mov	r3, sp
    74dc:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    74de:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    74e0:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    74e2:	2b00      	cmp	r3, #0
    74e4:	d1fc      	bne.n	74e0 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    74e6:	338f      	adds	r3, #143	; 0x8f
    74e8:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    74ea:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    74ec:	6823      	ldr	r3, [r4, #0]
    74ee:	2202      	movs	r2, #2
    74f0:	4393      	bics	r3, r2
    74f2:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    74f4:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    74f6:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    74f8:	2b00      	cmp	r3, #0
    74fa:	d1fc      	bne.n	74f6 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    74fc:	4b12      	ldr	r3, [pc, #72]	; (7548 <spi_set_baudrate+0x78>)
    74fe:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7500:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7502:	b2c0      	uxtb	r0, r0
    7504:	4b11      	ldr	r3, [pc, #68]	; (754c <spi_set_baudrate+0x7c>)
    7506:	4798      	blx	r3
    7508:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    750a:	466b      	mov	r3, sp
    750c:	1d9a      	adds	r2, r3, #6
    750e:	0028      	movs	r0, r5
    7510:	4b0f      	ldr	r3, [pc, #60]	; (7550 <spi_set_baudrate+0x80>)
    7512:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    7514:	2800      	cmp	r0, #0
    7516:	d002      	beq.n	751e <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    7518:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    751a:	b002      	add	sp, #8
    751c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    751e:	466b      	mov	r3, sp
    7520:	3306      	adds	r3, #6
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7526:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    7528:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    752a:	2a00      	cmp	r2, #0
    752c:	d1fc      	bne.n	7528 <spi_set_baudrate+0x58>
    752e:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    7530:	2a00      	cmp	r2, #0
    7532:	d1fc      	bne.n	752e <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7534:	681a      	ldr	r2, [r3, #0]
    7536:	2102      	movs	r1, #2
    7538:	430a      	orrs	r2, r1
    753a:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    753c:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    753e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7540:	2b00      	cmp	r3, #0
    7542:	d1fc      	bne.n	753e <spi_set_baudrate+0x6e>
    7544:	e7e9      	b.n	751a <spi_set_baudrate+0x4a>
    7546:	46c0      	nop			; (mov r8, r8)
    7548:	00007499 	.word	0x00007499
    754c:	00008af5 	.word	0x00008af5
    7550:	00007217 	.word	0x00007217

00007554 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7554:	b5f0      	push	{r4, r5, r6, r7, lr}
    7556:	46d6      	mov	lr, sl
    7558:	464f      	mov	r7, r9
    755a:	b580      	push	{r7, lr}
    755c:	b08b      	sub	sp, #44	; 0x2c
    755e:	4681      	mov	r9, r0
    7560:	000f      	movs	r7, r1
    7562:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7564:	0003      	movs	r3, r0
    7566:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7568:	680b      	ldr	r3, [r1, #0]
    756a:	079b      	lsls	r3, r3, #30
    756c:	d409      	bmi.n	7582 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    756e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7570:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7572:	07db      	lsls	r3, r3, #31
    7574:	d400      	bmi.n	7578 <spi_init+0x24>
    7576:	e0b1      	b.n	76dc <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7578:	b00b      	add	sp, #44	; 0x2c
    757a:	bc0c      	pop	{r2, r3}
    757c:	4691      	mov	r9, r2
    757e:	469a      	mov	sl, r3
    7580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    7582:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7584:	9305      	str	r3, [sp, #20]
    7586:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7588:	9306      	str	r3, [sp, #24]
    758a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    758c:	9307      	str	r3, [sp, #28]
    758e:	6b53      	ldr	r3, [r2, #52]	; 0x34
    7590:	9308      	str	r3, [sp, #32]
    7592:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7594:	ab05      	add	r3, sp, #20
    7596:	9301      	str	r3, [sp, #4]
    7598:	e00a      	b.n	75b0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    759a:	0038      	movs	r0, r7
    759c:	4baf      	ldr	r3, [pc, #700]	; (785c <spi_init+0x308>)
    759e:	4798      	blx	r3
    75a0:	e00c      	b.n	75bc <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    75a2:	230f      	movs	r3, #15
    75a4:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    75a6:	4281      	cmp	r1, r0
    75a8:	d12d      	bne.n	7606 <spi_init+0xb2>
    75aa:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    75ac:	2e04      	cmp	r6, #4
    75ae:	d02f      	beq.n	7610 <spi_init+0xbc>
    75b0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    75b2:	00b3      	lsls	r3, r6, #2
    75b4:	9a01      	ldr	r2, [sp, #4]
    75b6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    75b8:	2800      	cmp	r0, #0
    75ba:	d0ee      	beq.n	759a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    75bc:	1c43      	adds	r3, r0, #1
    75be:	d0f4      	beq.n	75aa <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    75c0:	0401      	lsls	r1, r0, #16
    75c2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    75c4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    75c6:	b2c3      	uxtb	r3, r0
    75c8:	469c      	mov	ip, r3
		return NULL;
    75ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    75cc:	0602      	lsls	r2, r0, #24
    75ce:	d405      	bmi.n	75dc <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    75d0:	4663      	mov	r3, ip
    75d2:	095b      	lsrs	r3, r3, #5
    75d4:	01db      	lsls	r3, r3, #7
    75d6:	4aa2      	ldr	r2, [pc, #648]	; (7860 <spi_init+0x30c>)
    75d8:	4692      	mov	sl, r2
    75da:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    75dc:	221f      	movs	r2, #31
    75de:	4660      	mov	r0, ip
    75e0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    75e2:	1898      	adds	r0, r3, r2
    75e4:	3040      	adds	r0, #64	; 0x40
    75e6:	7800      	ldrb	r0, [r0, #0]
    75e8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    75ea:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    75ec:	4655      	mov	r5, sl
    75ee:	07ed      	lsls	r5, r5, #31
    75f0:	d5d9      	bpl.n	75a6 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    75f2:	0852      	lsrs	r2, r2, #1
    75f4:	189b      	adds	r3, r3, r2
    75f6:	3330      	adds	r3, #48	; 0x30
    75f8:	7818      	ldrb	r0, [r3, #0]
    75fa:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    75fc:	4663      	mov	r3, ip
    75fe:	07db      	lsls	r3, r3, #31
    7600:	d5cf      	bpl.n	75a2 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7602:	0900      	lsrs	r0, r0, #4
    7604:	e7cf      	b.n	75a6 <spi_init+0x52>
			module->hw = NULL;
    7606:	2300      	movs	r3, #0
    7608:	464a      	mov	r2, r9
    760a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    760c:	201c      	movs	r0, #28
    760e:	e7b3      	b.n	7578 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    7610:	2013      	movs	r0, #19
    7612:	4b94      	ldr	r3, [pc, #592]	; (7864 <spi_init+0x310>)
    7614:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7616:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    7618:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    761a:	2a01      	cmp	r2, #1
    761c:	d016      	beq.n	764c <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    761e:	7821      	ldrb	r1, [r4, #0]
    7620:	2900      	cmp	r1, #0
    7622:	d127      	bne.n	7674 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    7624:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7626:	7fe2      	ldrb	r2, [r4, #31]
    7628:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    762a:	7fa0      	ldrb	r0, [r4, #30]
    762c:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    762e:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    7630:	429a      	cmp	r2, r3
    7632:	d1a1      	bne.n	7578 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    7634:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    7636:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    7638:	3004      	adds	r0, #4
    763a:	5c20      	ldrb	r0, [r4, r0]
    763c:	2800      	cmp	r0, #0
    763e:	d001      	beq.n	7644 <spi_init+0xf0>
    7640:	2040      	movs	r0, #64	; 0x40
    7642:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    7644:	2008      	movs	r0, #8
    7646:	4303      	orrs	r3, r0
    7648:	431d      	orrs	r5, r3
    764a:	e014      	b.n	7676 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    764c:	aa04      	add	r2, sp, #16
    764e:	0001      	movs	r1, r0
    7650:	69a0      	ldr	r0, [r4, #24]
    7652:	4b85      	ldr	r3, [pc, #532]	; (7868 <spi_init+0x314>)
    7654:	4798      	blx	r3
    7656:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7658:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    765a:	2b00      	cmp	r3, #0
    765c:	d000      	beq.n	7660 <spi_init+0x10c>
    765e:	e78b      	b.n	7578 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    7660:	7b3b      	ldrb	r3, [r7, #12]
    7662:	b2db      	uxtb	r3, r3
    7664:	aa04      	add	r2, sp, #16
    7666:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    7668:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    766a:	429a      	cmp	r2, r3
    766c:	d000      	beq.n	7670 <spi_init+0x11c>
    766e:	e783      	b.n	7578 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    7670:	350c      	adds	r5, #12
    7672:	e7d4      	b.n	761e <spi_init+0xca>
	uint32_t ctrlb = 0;
    7674:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    7676:	6863      	ldr	r3, [r4, #4]
    7678:	68a0      	ldr	r0, [r4, #8]
    767a:	4303      	orrs	r3, r0
    767c:	68e0      	ldr	r0, [r4, #12]
    767e:	4303      	orrs	r3, r0
    7680:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    7682:	7c20      	ldrb	r0, [r4, #16]
    7684:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    7686:	7c60      	ldrb	r0, [r4, #17]
    7688:	2800      	cmp	r0, #0
    768a:	d001      	beq.n	7690 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    768c:	2080      	movs	r0, #128	; 0x80
    768e:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    7690:	7ca0      	ldrb	r0, [r4, #18]
    7692:	2800      	cmp	r0, #0
    7694:	d002      	beq.n	769c <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7696:	2080      	movs	r0, #128	; 0x80
    7698:	0280      	lsls	r0, r0, #10
    769a:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    769c:	7ce0      	ldrb	r0, [r4, #19]
    769e:	2800      	cmp	r0, #0
    76a0:	d002      	beq.n	76a8 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    76a2:	2080      	movs	r0, #128	; 0x80
    76a4:	0080      	lsls	r0, r0, #2
    76a6:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    76a8:	7d20      	ldrb	r0, [r4, #20]
    76aa:	2800      	cmp	r0, #0
    76ac:	d002      	beq.n	76b4 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    76ae:	2080      	movs	r0, #128	; 0x80
    76b0:	0180      	lsls	r0, r0, #6
    76b2:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    76b4:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    76b6:	2502      	movs	r5, #2
    76b8:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    76ba:	4283      	cmp	r3, r0
    76bc:	d004      	beq.n	76c8 <spi_init+0x174>
	module->hw = NULL;
    76be:	2300      	movs	r3, #0
    76c0:	464a      	mov	r2, r9
    76c2:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    76c4:	201c      	movs	r0, #28
    76c6:	e757      	b.n	7578 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    76c8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    76ca:	4293      	cmp	r3, r2
    76cc:	d1f7      	bne.n	76be <spi_init+0x16a>
		module->mode           = config->mode;
    76ce:	464b      	mov	r3, r9
    76d0:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    76d2:	7c23      	ldrb	r3, [r4, #16]
    76d4:	464a      	mov	r2, r9
    76d6:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    76d8:	2000      	movs	r0, #0
    76da:	e74d      	b.n	7578 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    76dc:	0008      	movs	r0, r1
    76de:	4b63      	ldr	r3, [pc, #396]	; (786c <spi_init+0x318>)
    76e0:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    76e2:	4a63      	ldr	r2, [pc, #396]	; (7870 <spi_init+0x31c>)
    76e4:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    76e6:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    76e8:	2301      	movs	r3, #1
    76ea:	40ab      	lsls	r3, r5
    76ec:	430b      	orrs	r3, r1
    76ee:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    76f0:	a909      	add	r1, sp, #36	; 0x24
    76f2:	2624      	movs	r6, #36	; 0x24
    76f4:	5da3      	ldrb	r3, [r4, r6]
    76f6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    76f8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    76fa:	b2c5      	uxtb	r5, r0
    76fc:	0028      	movs	r0, r5
    76fe:	4b5d      	ldr	r3, [pc, #372]	; (7874 <spi_init+0x320>)
    7700:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7702:	0028      	movs	r0, r5
    7704:	4b5c      	ldr	r3, [pc, #368]	; (7878 <spi_init+0x324>)
    7706:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7708:	5da0      	ldrb	r0, [r4, r6]
    770a:	2100      	movs	r1, #0
    770c:	4b5b      	ldr	r3, [pc, #364]	; (787c <spi_init+0x328>)
    770e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7710:	7823      	ldrb	r3, [r4, #0]
    7712:	2b01      	cmp	r3, #1
    7714:	d020      	beq.n	7758 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    7716:	7823      	ldrb	r3, [r4, #0]
    7718:	2b00      	cmp	r3, #0
    771a:	d103      	bne.n	7724 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    771c:	683b      	ldr	r3, [r7, #0]
    771e:	2208      	movs	r2, #8
    7720:	4313      	orrs	r3, r2
    7722:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7724:	464b      	mov	r3, r9
    7726:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7728:	ab04      	add	r3, sp, #16
    772a:	2280      	movs	r2, #128	; 0x80
    772c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    772e:	2200      	movs	r2, #0
    7730:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7732:	2101      	movs	r1, #1
    7734:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    7736:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7738:	7823      	ldrb	r3, [r4, #0]
    773a:	2b00      	cmp	r3, #0
    773c:	d101      	bne.n	7742 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    773e:	ab04      	add	r3, sp, #16
    7740:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7744:	9305      	str	r3, [sp, #20]
    7746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7748:	9306      	str	r3, [sp, #24]
    774a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    774c:	9307      	str	r3, [sp, #28]
    774e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7750:	9308      	str	r3, [sp, #32]
    7752:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7754:	ad05      	add	r5, sp, #20
    7756:	e011      	b.n	777c <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7758:	683b      	ldr	r3, [r7, #0]
    775a:	220c      	movs	r2, #12
    775c:	4313      	orrs	r3, r2
    775e:	603b      	str	r3, [r7, #0]
    7760:	e7d9      	b.n	7716 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7762:	0030      	movs	r0, r6
    7764:	4b3d      	ldr	r3, [pc, #244]	; (785c <spi_init+0x308>)
    7766:	4798      	blx	r3
    7768:	e00d      	b.n	7786 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    776a:	a904      	add	r1, sp, #16
    776c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    776e:	0c00      	lsrs	r0, r0, #16
    7770:	b2c0      	uxtb	r0, r0
    7772:	4b43      	ldr	r3, [pc, #268]	; (7880 <spi_init+0x32c>)
    7774:	4798      	blx	r3
    7776:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7778:	2f04      	cmp	r7, #4
    777a:	d007      	beq.n	778c <spi_init+0x238>
    777c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    777e:	00bb      	lsls	r3, r7, #2
    7780:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    7782:	2800      	cmp	r0, #0
    7784:	d0ed      	beq.n	7762 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    7786:	1c43      	adds	r3, r0, #1
    7788:	d1ef      	bne.n	776a <spi_init+0x216>
    778a:	e7f4      	b.n	7776 <spi_init+0x222>
	module->mode             = config->mode;
    778c:	7823      	ldrb	r3, [r4, #0]
    778e:	464a      	mov	r2, r9
    7790:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    7792:	7c23      	ldrb	r3, [r4, #16]
    7794:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    7796:	7ca3      	ldrb	r3, [r4, #18]
    7798:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    779a:	7d23      	ldrb	r3, [r4, #20]
    779c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    779e:	2200      	movs	r2, #0
    77a0:	ab02      	add	r3, sp, #8
    77a2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    77a4:	7823      	ldrb	r3, [r4, #0]
    77a6:	2b01      	cmp	r3, #1
    77a8:	d012      	beq.n	77d0 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    77aa:	7823      	ldrb	r3, [r4, #0]
    77ac:	2b00      	cmp	r3, #0
    77ae:	d127      	bne.n	7800 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    77b0:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    77b2:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    77b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    77b6:	7fe1      	ldrb	r1, [r4, #31]
    77b8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    77ba:	7fa5      	ldrb	r5, [r4, #30]
    77bc:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    77be:	4319      	orrs	r1, r3
    77c0:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    77c2:	2320      	movs	r3, #32
    77c4:	5ce3      	ldrb	r3, [r4, r3]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d01c      	beq.n	7804 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    77ca:	2340      	movs	r3, #64	; 0x40
    77cc:	431a      	orrs	r2, r3
    77ce:	e019      	b.n	7804 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    77d0:	464b      	mov	r3, r9
    77d2:	6818      	ldr	r0, [r3, #0]
    77d4:	4b25      	ldr	r3, [pc, #148]	; (786c <spi_init+0x318>)
    77d6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    77d8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    77da:	b2c0      	uxtb	r0, r0
    77dc:	4b21      	ldr	r3, [pc, #132]	; (7864 <spi_init+0x310>)
    77de:	4798      	blx	r3
    77e0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    77e2:	ab02      	add	r3, sp, #8
    77e4:	1d9a      	adds	r2, r3, #6
    77e6:	69a0      	ldr	r0, [r4, #24]
    77e8:	4b1f      	ldr	r3, [pc, #124]	; (7868 <spi_init+0x314>)
    77ea:	4798      	blx	r3
    77ec:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    77ee:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    77f0:	2b00      	cmp	r3, #0
    77f2:	d000      	beq.n	77f6 <spi_init+0x2a2>
    77f4:	e6c0      	b.n	7578 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    77f6:	ab02      	add	r3, sp, #8
    77f8:	3306      	adds	r3, #6
    77fa:	781b      	ldrb	r3, [r3, #0]
    77fc:	7333      	strb	r3, [r6, #12]
    77fe:	e7d4      	b.n	77aa <spi_init+0x256>
	uint32_t ctrlb = 0;
    7800:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    7802:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    7804:	6863      	ldr	r3, [r4, #4]
    7806:	68a1      	ldr	r1, [r4, #8]
    7808:	430b      	orrs	r3, r1
    780a:	68e1      	ldr	r1, [r4, #12]
    780c:	430b      	orrs	r3, r1
    780e:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    7810:	7c21      	ldrb	r1, [r4, #16]
    7812:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    7814:	7c61      	ldrb	r1, [r4, #17]
    7816:	2900      	cmp	r1, #0
    7818:	d103      	bne.n	7822 <spi_init+0x2ce>
    781a:	491a      	ldr	r1, [pc, #104]	; (7884 <spi_init+0x330>)
    781c:	7889      	ldrb	r1, [r1, #2]
    781e:	0789      	lsls	r1, r1, #30
    7820:	d501      	bpl.n	7826 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7822:	2180      	movs	r1, #128	; 0x80
    7824:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    7826:	7ca1      	ldrb	r1, [r4, #18]
    7828:	2900      	cmp	r1, #0
    782a:	d002      	beq.n	7832 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    782c:	2180      	movs	r1, #128	; 0x80
    782e:	0289      	lsls	r1, r1, #10
    7830:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7832:	7ce1      	ldrb	r1, [r4, #19]
    7834:	2900      	cmp	r1, #0
    7836:	d002      	beq.n	783e <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7838:	2180      	movs	r1, #128	; 0x80
    783a:	0089      	lsls	r1, r1, #2
    783c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    783e:	7d21      	ldrb	r1, [r4, #20]
    7840:	2900      	cmp	r1, #0
    7842:	d002      	beq.n	784a <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7844:	2180      	movs	r1, #128	; 0x80
    7846:	0189      	lsls	r1, r1, #6
    7848:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    784a:	6831      	ldr	r1, [r6, #0]
    784c:	430b      	orrs	r3, r1
    784e:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7850:	6873      	ldr	r3, [r6, #4]
    7852:	431a      	orrs	r2, r3
    7854:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    7856:	2000      	movs	r0, #0
    7858:	e68e      	b.n	7578 <spi_init+0x24>
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	00007321 	.word	0x00007321
    7860:	41004400 	.word	0x41004400
    7864:	00008af5 	.word	0x00008af5
    7868:	00007217 	.word	0x00007217
    786c:	00007499 	.word	0x00007499
    7870:	40000400 	.word	0x40000400
    7874:	00008ad9 	.word	0x00008ad9
    7878:	00008a4d 	.word	0x00008a4d
    787c:	000072d5 	.word	0x000072d5
    7880:	00008bd1 	.word	0x00008bd1
    7884:	41002000 	.word	0x41002000

00007888 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7888:	b5f0      	push	{r4, r5, r6, r7, lr}
    788a:	46d6      	mov	lr, sl
    788c:	464f      	mov	r7, r9
    788e:	4646      	mov	r6, r8
    7890:	b5c0      	push	{r6, r7, lr}
    7892:	b082      	sub	sp, #8
    7894:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7896:	2717      	movs	r7, #23
	if (length == 0) {
    7898:	2a00      	cmp	r2, #0
    789a:	d073      	beq.n	7984 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    789c:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    789e:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    78a0:	2900      	cmp	r1, #0
    78a2:	d06f      	beq.n	7984 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    78a4:	7941      	ldrb	r1, [r0, #5]
    78a6:	2900      	cmp	r1, #0
    78a8:	d103      	bne.n	78b2 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    78aa:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    78ac:	7e0c      	ldrb	r4, [r1, #24]
    78ae:	07a4      	lsls	r4, r4, #30
    78b0:	d40b      	bmi.n	78ca <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    78b2:	3a01      	subs	r2, #1
    78b4:	b294      	uxth	r4, r2
    78b6:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    78b8:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    78ba:	2102      	movs	r1, #2
    78bc:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    78be:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    78c0:	05db      	lsls	r3, r3, #23
    78c2:	0ddb      	lsrs	r3, r3, #23
    78c4:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    78c6:	46c4      	mov	ip, r8
    78c8:	e037      	b.n	793a <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    78ca:	2402      	movs	r4, #2
    78cc:	760c      	strb	r4, [r1, #24]
    78ce:	e7f0      	b.n	78b2 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    78d0:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    78d2:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    78d4:	4233      	tst	r3, r6
    78d6:	d0fc      	beq.n	78d2 <spi_read_buffer_wait+0x4a>
    78d8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    78da:	4233      	tst	r3, r6
    78dc:	d009      	beq.n	78f2 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    78de:	4653      	mov	r3, sl
    78e0:	628b      	str	r3, [r1, #40]	; 0x28
    78e2:	e02d      	b.n	7940 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    78e4:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    78e6:	4649      	mov	r1, r9
    78e8:	420b      	tst	r3, r1
    78ea:	d138      	bne.n	795e <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    78ec:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    78ee:	4213      	tst	r3, r2
    78f0:	d045      	beq.n	797e <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    78f2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    78f4:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    78f6:	4213      	tst	r3, r2
    78f8:	d0fc      	beq.n	78f4 <spi_read_buffer_wait+0x6c>
    78fa:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    78fc:	4213      	tst	r3, r2
    78fe:	d040      	beq.n	7982 <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7900:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    7902:	2700      	movs	r7, #0
    7904:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7906:	4213      	tst	r3, r2
    7908:	d002      	beq.n	7910 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    790a:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    790c:	231e      	movs	r3, #30
    790e:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7910:	7983      	ldrb	r3, [r0, #6]
    7912:	2b01      	cmp	r3, #1
    7914:	d027      	beq.n	7966 <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7916:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7918:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    791a:	9901      	ldr	r1, [sp, #4]
    791c:	2900      	cmp	r1, #0
    791e:	d138      	bne.n	7992 <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    7920:	1c6f      	adds	r7, r5, #1
    7922:	b2bf      	uxth	r7, r7
    7924:	4661      	mov	r1, ip
    7926:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7928:	7981      	ldrb	r1, [r0, #6]
    792a:	2901      	cmp	r1, #1
    792c:	d01f      	beq.n	796e <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    792e:	003d      	movs	r5, r7
	while (length--) {
    7930:	3c01      	subs	r4, #1
    7932:	b2a4      	uxth	r4, r4
    7934:	4918      	ldr	r1, [pc, #96]	; (7998 <spi_read_buffer_wait+0x110>)
    7936:	428c      	cmp	r4, r1
    7938:	d01f      	beq.n	797a <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    793a:	7943      	ldrb	r3, [r0, #5]
    793c:	2b01      	cmp	r3, #1
    793e:	d0c7      	beq.n	78d0 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    7940:	7943      	ldrb	r3, [r0, #5]
    7942:	2b00      	cmp	r3, #0
    7944:	d1d5      	bne.n	78f2 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7946:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7948:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    794a:	4213      	tst	r3, r2
    794c:	d1ca      	bne.n	78e4 <spi_read_buffer_wait+0x5c>
    794e:	4b13      	ldr	r3, [pc, #76]	; (799c <spi_read_buffer_wait+0x114>)
    7950:	7e39      	ldrb	r1, [r7, #24]
    7952:	4211      	tst	r1, r2
    7954:	d1c6      	bne.n	78e4 <spi_read_buffer_wait+0x5c>
    7956:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7958:	2b00      	cmp	r3, #0
    795a:	d1f9      	bne.n	7950 <spi_read_buffer_wait+0xc8>
    795c:	e7c2      	b.n	78e4 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    795e:	2302      	movs	r3, #2
    7960:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    7962:	2704      	movs	r7, #4
    7964:	e00e      	b.n	7984 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7966:	6a89      	ldr	r1, [r1, #40]	; 0x28
    7968:	05c9      	lsls	r1, r1, #23
    796a:	0dcb      	lsrs	r3, r1, #23
    796c:	e7d5      	b.n	791a <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    796e:	3502      	adds	r5, #2
    7970:	b2ad      	uxth	r5, r5
    7972:	0a19      	lsrs	r1, r3, #8
    7974:	4663      	mov	r3, ip
    7976:	55d9      	strb	r1, [r3, r7]
    7978:	e7da      	b.n	7930 <spi_read_buffer_wait+0xa8>
    797a:	9f01      	ldr	r7, [sp, #4]
    797c:	e002      	b.n	7984 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    797e:	2712      	movs	r7, #18
    7980:	e000      	b.n	7984 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    7982:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    7984:	0038      	movs	r0, r7
    7986:	b002      	add	sp, #8
    7988:	bc1c      	pop	{r2, r3, r4}
    798a:	4690      	mov	r8, r2
    798c:	4699      	mov	r9, r3
    798e:	46a2      	mov	sl, r4
    7990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7992:	9f01      	ldr	r7, [sp, #4]
    7994:	e7f6      	b.n	7984 <spi_read_buffer_wait+0xfc>
    7996:	46c0      	nop			; (mov r8, r8)
    7998:	0000ffff 	.word	0x0000ffff
    799c:	00002710 	.word	0x00002710

000079a0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    79a0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    79a2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    79a4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    79a6:	2c01      	cmp	r4, #1
    79a8:	d001      	beq.n	79ae <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    79aa:	0018      	movs	r0, r3
    79ac:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    79ae:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    79b0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    79b2:	2c00      	cmp	r4, #0
    79b4:	d1f9      	bne.n	79aa <spi_select_slave+0xa>
		if (select) {
    79b6:	2a00      	cmp	r2, #0
    79b8:	d058      	beq.n	7a6c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    79ba:	784b      	ldrb	r3, [r1, #1]
    79bc:	2b00      	cmp	r3, #0
    79be:	d044      	beq.n	7a4a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    79c0:	6803      	ldr	r3, [r0, #0]
    79c2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    79c4:	07db      	lsls	r3, r3, #31
    79c6:	d410      	bmi.n	79ea <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    79c8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    79ca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    79cc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    79ce:	2900      	cmp	r1, #0
    79d0:	d104      	bne.n	79dc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    79d2:	0953      	lsrs	r3, r2, #5
    79d4:	01db      	lsls	r3, r3, #7
    79d6:	492e      	ldr	r1, [pc, #184]	; (7a90 <spi_select_slave+0xf0>)
    79d8:	468c      	mov	ip, r1
    79da:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    79dc:	211f      	movs	r1, #31
    79de:	4011      	ands	r1, r2
    79e0:	2201      	movs	r2, #1
    79e2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    79e4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    79e6:	2305      	movs	r3, #5
    79e8:	e7df      	b.n	79aa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    79ea:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    79ec:	09d4      	lsrs	r4, r2, #7
		return NULL;
    79ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    79f0:	2c00      	cmp	r4, #0
    79f2:	d104      	bne.n	79fe <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    79f4:	0953      	lsrs	r3, r2, #5
    79f6:	01db      	lsls	r3, r3, #7
    79f8:	4c25      	ldr	r4, [pc, #148]	; (7a90 <spi_select_slave+0xf0>)
    79fa:	46a4      	mov	ip, r4
    79fc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    79fe:	241f      	movs	r4, #31
    7a00:	4014      	ands	r4, r2
    7a02:	2201      	movs	r2, #1
    7a04:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7a06:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a08:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7a0a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7a0c:	07d2      	lsls	r2, r2, #31
    7a0e:	d501      	bpl.n	7a14 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7a10:	788a      	ldrb	r2, [r1, #2]
    7a12:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7a14:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7a16:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7a18:	2a00      	cmp	r2, #0
    7a1a:	d1c6      	bne.n	79aa <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a1c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7a1e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7a20:	7e13      	ldrb	r3, [r2, #24]
    7a22:	420b      	tst	r3, r1
    7a24:	d0fc      	beq.n	7a20 <spi_select_slave+0x80>
    7a26:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7a28:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7a2a:	0749      	lsls	r1, r1, #29
    7a2c:	d5bd      	bpl.n	79aa <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7a2e:	8b53      	ldrh	r3, [r2, #26]
    7a30:	075b      	lsls	r3, r3, #29
    7a32:	d501      	bpl.n	7a38 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7a34:	2304      	movs	r3, #4
    7a36:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7a38:	7983      	ldrb	r3, [r0, #6]
    7a3a:	2b01      	cmp	r3, #1
    7a3c:	d002      	beq.n	7a44 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7a3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a40:	2300      	movs	r3, #0
    7a42:	e7b2      	b.n	79aa <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7a44:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a46:	2300      	movs	r3, #0
    7a48:	e7af      	b.n	79aa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7a4a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a4c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7a4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a50:	2900      	cmp	r1, #0
    7a52:	d104      	bne.n	7a5e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7a54:	0953      	lsrs	r3, r2, #5
    7a56:	01db      	lsls	r3, r3, #7
    7a58:	490d      	ldr	r1, [pc, #52]	; (7a90 <spi_select_slave+0xf0>)
    7a5a:	468c      	mov	ip, r1
    7a5c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a5e:	211f      	movs	r1, #31
    7a60:	4011      	ands	r1, r2
    7a62:	2201      	movs	r2, #1
    7a64:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7a66:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7a68:	2300      	movs	r3, #0
    7a6a:	e79e      	b.n	79aa <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7a6c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a6e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7a70:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a72:	2900      	cmp	r1, #0
    7a74:	d104      	bne.n	7a80 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7a76:	0953      	lsrs	r3, r2, #5
    7a78:	01db      	lsls	r3, r3, #7
    7a7a:	4905      	ldr	r1, [pc, #20]	; (7a90 <spi_select_slave+0xf0>)
    7a7c:	468c      	mov	ip, r1
    7a7e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a80:	211f      	movs	r1, #31
    7a82:	4011      	ands	r1, r2
    7a84:	2201      	movs	r2, #1
    7a86:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7a88:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7a8a:	2300      	movs	r3, #0
    7a8c:	e78d      	b.n	79aa <spi_select_slave+0xa>
    7a8e:	46c0      	nop			; (mov r8, r8)
    7a90:	41004400 	.word	0x41004400

00007a94 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a96:	46de      	mov	lr, fp
    7a98:	4657      	mov	r7, sl
    7a9a:	464e      	mov	r6, r9
    7a9c:	4645      	mov	r5, r8
    7a9e:	b5e0      	push	{r5, r6, r7, lr}
    7aa0:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7aa2:	2317      	movs	r3, #23
	if (length == 0) {
    7aa4:	2a00      	cmp	r2, #0
    7aa6:	d107      	bne.n	7ab8 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7aa8:	0018      	movs	r0, r3
    7aaa:	b003      	add	sp, #12
    7aac:	bc3c      	pop	{r2, r3, r4, r5}
    7aae:	4690      	mov	r8, r2
    7ab0:	4699      	mov	r9, r3
    7ab2:	46a2      	mov	sl, r4
    7ab4:	46ab      	mov	fp, r5
    7ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7ab8:	7943      	ldrb	r3, [r0, #5]
    7aba:	2b00      	cmp	r3, #0
    7abc:	d103      	bne.n	7ac6 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7abe:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7ac0:	7e1c      	ldrb	r4, [r3, #24]
    7ac2:	07a4      	lsls	r4, r4, #30
    7ac4:	d40a      	bmi.n	7adc <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    7ac6:	4693      	mov	fp, r2
    7ac8:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    7aca:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    7acc:	2502      	movs	r5, #2
    7ace:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    7ad0:	3502      	adds	r5, #2
    7ad2:	46a8      	mov	r8, r5
    7ad4:	3a01      	subs	r2, #1
    7ad6:	b292      	uxth	r2, r2
    7ad8:	468a      	mov	sl, r1
    7ada:	e023      	b.n	7b24 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7adc:	2402      	movs	r4, #2
    7ade:	761c      	strb	r4, [r3, #24]
    7ae0:	e7f1      	b.n	7ac6 <spi_write_buffer_wait+0x32>
    7ae2:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    7ae4:	4661      	mov	r1, ip
    7ae6:	420d      	tst	r5, r1
    7ae8:	d12e      	bne.n	7b48 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7aea:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    7aec:	421d      	tst	r5, r3
    7aee:	d100      	bne.n	7af2 <spi_write_buffer_wait+0x5e>
    7af0:	e0c2      	b.n	7c78 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7af2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7af4:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    7af6:	421d      	tst	r5, r3
    7af8:	d0fc      	beq.n	7af4 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    7afa:	1c67      	adds	r7, r4, #1
    7afc:	b2bf      	uxth	r7, r7
    7afe:	4651      	mov	r1, sl
    7b00:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7b02:	7981      	ldrb	r1, [r0, #6]
    7b04:	2901      	cmp	r1, #1
    7b06:	d023      	beq.n	7b50 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    7b08:	b2ad      	uxth	r5, r5
    7b0a:	003c      	movs	r4, r7
    7b0c:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7b0e:	421f      	tst	r7, r3
    7b10:	d002      	beq.n	7b18 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7b12:	05ed      	lsls	r5, r5, #23
    7b14:	0ded      	lsrs	r5, r5, #23
    7b16:	62b5      	str	r5, [r6, #40]	; 0x28
    7b18:	1e55      	subs	r5, r2, #1
    7b1a:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    7b1c:	79c6      	ldrb	r6, [r0, #7]
    7b1e:	2e00      	cmp	r6, #0
    7b20:	d11d      	bne.n	7b5e <spi_write_buffer_wait+0xca>
    7b22:	002a      	movs	r2, r5
	while (length--) {
    7b24:	4d59      	ldr	r5, [pc, #356]	; (7c8c <spi_write_buffer_wait+0x1f8>)
    7b26:	42aa      	cmp	r2, r5
    7b28:	d070      	beq.n	7c0c <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    7b2a:	7945      	ldrb	r5, [r0, #5]
    7b2c:	2d00      	cmp	r5, #0
    7b2e:	d1e0      	bne.n	7af2 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b30:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b32:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    7b34:	421d      	tst	r5, r3
    7b36:	d1d4      	bne.n	7ae2 <spi_write_buffer_wait+0x4e>
    7b38:	4d55      	ldr	r5, [pc, #340]	; (7c90 <spi_write_buffer_wait+0x1fc>)
    7b3a:	7e37      	ldrb	r7, [r6, #24]
    7b3c:	421f      	tst	r7, r3
    7b3e:	d1d0      	bne.n	7ae2 <spi_write_buffer_wait+0x4e>
    7b40:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7b42:	2d00      	cmp	r5, #0
    7b44:	d1f9      	bne.n	7b3a <spi_write_buffer_wait+0xa6>
    7b46:	e7cc      	b.n	7ae2 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7b48:	2302      	movs	r3, #2
    7b4a:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    7b4c:	3302      	adds	r3, #2
    7b4e:	e7ab      	b.n	7aa8 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7b50:	3402      	adds	r4, #2
    7b52:	b2a4      	uxth	r4, r4
    7b54:	4651      	mov	r1, sl
    7b56:	5dcf      	ldrb	r7, [r1, r7]
    7b58:	023f      	lsls	r7, r7, #8
    7b5a:	433d      	orrs	r5, r7
    7b5c:	e7d6      	b.n	7b0c <spi_write_buffer_wait+0x78>
    7b5e:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    7b60:	7945      	ldrb	r5, [r0, #5]
    7b62:	2d00      	cmp	r5, #0
    7b64:	d137      	bne.n	7bd6 <spi_write_buffer_wait+0x142>
    7b66:	4d4b      	ldr	r5, [pc, #300]	; (7c94 <spi_write_buffer_wait+0x200>)
    7b68:	9101      	str	r1, [sp, #4]
    7b6a:	e012      	b.n	7b92 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    7b6c:	3402      	adds	r4, #2
    7b6e:	b2a4      	uxth	r4, r4
    7b70:	4649      	mov	r1, r9
    7b72:	9f01      	ldr	r7, [sp, #4]
    7b74:	5c79      	ldrb	r1, [r7, r1]
    7b76:	0209      	lsls	r1, r1, #8
    7b78:	9f00      	ldr	r7, [sp, #0]
    7b7a:	430f      	orrs	r7, r1
    7b7c:	e01b      	b.n	7bb6 <spi_write_buffer_wait+0x122>
						length--;
    7b7e:	3a01      	subs	r2, #1
    7b80:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b82:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7b84:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    7b86:	4641      	mov	r1, r8
    7b88:	420f      	tst	r7, r1
    7b8a:	d11b      	bne.n	7bc4 <spi_write_buffer_wait+0x130>
    7b8c:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7b8e:	2d00      	cmp	r5, #0
    7b90:	d018      	beq.n	7bc4 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    7b92:	2a00      	cmp	r2, #0
    7b94:	d0f5      	beq.n	7b82 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b96:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b98:	7e37      	ldrb	r7, [r6, #24]
    7b9a:	421f      	tst	r7, r3
    7b9c:	d0f1      	beq.n	7b82 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    7b9e:	1c67      	adds	r7, r4, #1
    7ba0:	b2b9      	uxth	r1, r7
    7ba2:	4689      	mov	r9, r1
    7ba4:	9901      	ldr	r1, [sp, #4]
    7ba6:	5d09      	ldrb	r1, [r1, r4]
    7ba8:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7baa:	7981      	ldrb	r1, [r0, #6]
    7bac:	2901      	cmp	r1, #1
    7bae:	d0dd      	beq.n	7b6c <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    7bb0:	4669      	mov	r1, sp
    7bb2:	880f      	ldrh	r7, [r1, #0]
    7bb4:	464c      	mov	r4, r9
    7bb6:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7bb8:	4219      	tst	r1, r3
    7bba:	d0e0      	beq.n	7b7e <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7bbc:	05ff      	lsls	r7, r7, #23
    7bbe:	0dff      	lsrs	r7, r7, #23
    7bc0:	62b7      	str	r7, [r6, #40]	; 0x28
    7bc2:	e7dc      	b.n	7b7e <spi_write_buffer_wait+0xea>
    7bc4:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7bc6:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    7bc8:	4667      	mov	r7, ip
    7bca:	423d      	tst	r5, r7
    7bcc:	d118      	bne.n	7c00 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7bce:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    7bd0:	4646      	mov	r6, r8
    7bd2:	4235      	tst	r5, r6
    7bd4:	d052      	beq.n	7c7c <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7bd6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7bd8:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    7bda:	4647      	mov	r7, r8
    7bdc:	423d      	tst	r5, r7
    7bde:	d0fb      	beq.n	7bd8 <spi_write_buffer_wait+0x144>
    7be0:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    7be2:	423d      	tst	r5, r7
    7be4:	d007      	beq.n	7bf6 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7be6:	8b75      	ldrh	r5, [r6, #26]
    7be8:	423d      	tst	r5, r7
    7bea:	d000      	beq.n	7bee <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7bec:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7bee:	7985      	ldrb	r5, [r0, #6]
    7bf0:	2d01      	cmp	r5, #1
    7bf2:	d009      	beq.n	7c08 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7bf4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    7bf6:	465d      	mov	r5, fp
    7bf8:	3d01      	subs	r5, #1
    7bfa:	b2ad      	uxth	r5, r5
    7bfc:	46ab      	mov	fp, r5
    7bfe:	e769      	b.n	7ad4 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7c00:	2302      	movs	r3, #2
    7c02:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    7c04:	3302      	adds	r3, #2
    7c06:	e74f      	b.n	7aa8 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7c08:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    7c0a:	e7f4      	b.n	7bf6 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    7c0c:	7943      	ldrb	r3, [r0, #5]
    7c0e:	2b01      	cmp	r3, #1
    7c10:	d00b      	beq.n	7c2a <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    7c12:	2b00      	cmp	r3, #0
    7c14:	d134      	bne.n	7c80 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    7c16:	79c2      	ldrb	r2, [r0, #7]
    7c18:	2a00      	cmp	r2, #0
    7c1a:	d100      	bne.n	7c1e <spi_write_buffer_wait+0x18a>
    7c1c:	e744      	b.n	7aa8 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    7c1e:	2404      	movs	r4, #4
			while (flush_length) {
    7c20:	465b      	mov	r3, fp
    7c22:	465d      	mov	r5, fp
    7c24:	2b00      	cmp	r3, #0
    7c26:	d119      	bne.n	7c5c <spi_write_buffer_wait+0x1c8>
    7c28:	e73e      	b.n	7aa8 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c2a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    7c2c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7c2e:	7e0b      	ldrb	r3, [r1, #24]
    7c30:	4213      	tst	r3, r2
    7c32:	d0fc      	beq.n	7c2e <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    7c34:	2300      	movs	r3, #0
    7c36:	e737      	b.n	7aa8 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c38:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    7c3a:	4223      	tst	r3, r4
    7c3c:	d022      	beq.n	7c84 <spi_write_buffer_wait+0x1f0>
    7c3e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    7c40:	4223      	tst	r3, r4
    7c42:	d007      	beq.n	7c54 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7c44:	8b4b      	ldrh	r3, [r1, #26]
    7c46:	4223      	tst	r3, r4
    7c48:	d000      	beq.n	7c4c <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7c4a:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7c4c:	7983      	ldrb	r3, [r0, #6]
    7c4e:	2b01      	cmp	r3, #1
    7c50:	d010      	beq.n	7c74 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7c52:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    7c54:	3d01      	subs	r5, #1
    7c56:	b2ad      	uxth	r5, r5
			while (flush_length) {
    7c58:	2d00      	cmp	r5, #0
    7c5a:	d015      	beq.n	7c88 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c5c:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c5e:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    7c60:	4223      	tst	r3, r4
    7c62:	d1e9      	bne.n	7c38 <spi_write_buffer_wait+0x1a4>
    7c64:	4b0a      	ldr	r3, [pc, #40]	; (7c90 <spi_write_buffer_wait+0x1fc>)
    7c66:	7e0a      	ldrb	r2, [r1, #24]
    7c68:	4222      	tst	r2, r4
    7c6a:	d1e5      	bne.n	7c38 <spi_write_buffer_wait+0x1a4>
    7c6c:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d1f9      	bne.n	7c66 <spi_write_buffer_wait+0x1d2>
    7c72:	e7e1      	b.n	7c38 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7c74:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7c76:	e7ed      	b.n	7c54 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    7c78:	2312      	movs	r3, #18
    7c7a:	e715      	b.n	7aa8 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    7c7c:	2312      	movs	r3, #18
    7c7e:	e713      	b.n	7aa8 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    7c80:	2300      	movs	r3, #0
    7c82:	e711      	b.n	7aa8 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    7c84:	2312      	movs	r3, #18
    7c86:	e70f      	b.n	7aa8 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    7c88:	2300      	movs	r3, #0
    7c8a:	e70d      	b.n	7aa8 <spi_write_buffer_wait+0x14>
    7c8c:	0000ffff 	.word	0x0000ffff
    7c90:	00002710 	.word	0x00002710
    7c94:	00002711 	.word	0x00002711

00007c98 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    7c98:	4770      	bx	lr
	...

00007c9c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    7c9c:	b510      	push	{r4, lr}
    7c9e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    7ca0:	4b0f      	ldr	r3, [pc, #60]	; (7ce0 <sd_mmc_test_unit_ready+0x44>)
    7ca2:	4798      	blx	r3
    7ca4:	2801      	cmp	r0, #1
    7ca6:	d019      	beq.n	7cdc <sd_mmc_test_unit_ready+0x40>
    7ca8:	2800      	cmp	r0, #0
    7caa:	d003      	beq.n	7cb4 <sd_mmc_test_unit_ready+0x18>
    7cac:	2802      	cmp	r0, #2
    7cae:	d010      	beq.n	7cd2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    7cb0:	2001      	movs	r0, #1
	}
}
    7cb2:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    7cb4:	4b0b      	ldr	r3, [pc, #44]	; (7ce4 <sd_mmc_test_unit_ready+0x48>)
    7cb6:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    7cb8:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d1f9      	bne.n	7cb2 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    7cbe:	0020      	movs	r0, r4
    7cc0:	4b09      	ldr	r3, [pc, #36]	; (7ce8 <sd_mmc_test_unit_ready+0x4c>)
    7cc2:	4798      	blx	r3
    7cc4:	0003      	movs	r3, r0
    7cc6:	2003      	movs	r0, #3
    7cc8:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    7cca:	4243      	negs	r3, r0
    7ccc:	4158      	adcs	r0, r3
    7cce:	0040      	lsls	r0, r0, #1
    7cd0:	e7ef      	b.n	7cb2 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    7cd2:	2200      	movs	r2, #0
    7cd4:	4b03      	ldr	r3, [pc, #12]	; (7ce4 <sd_mmc_test_unit_ready+0x48>)
    7cd6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    7cd8:	2002      	movs	r0, #2
    7cda:	e7ea      	b.n	7cb2 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    7cdc:	2003      	movs	r0, #3
    7cde:	e7e8      	b.n	7cb2 <sd_mmc_test_unit_ready+0x16>
    7ce0:	00000d65 	.word	0x00000d65
    7ce4:	200003bc 	.word	0x200003bc
    7ce8:	00001215 	.word	0x00001215

00007cec <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    7cec:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    7cee:	2000      	movs	r0, #0
    7cf0:	4b01      	ldr	r3, [pc, #4]	; (7cf8 <sd_mmc_test_unit_ready_0+0xc>)
    7cf2:	4798      	blx	r3
}
    7cf4:	bd10      	pop	{r4, pc}
    7cf6:	46c0      	nop			; (mov r8, r8)
    7cf8:	00007c9d 	.word	0x00007c9d

00007cfc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    7cfc:	b570      	push	{r4, r5, r6, lr}
    7cfe:	0004      	movs	r4, r0
    7d00:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    7d02:	4b04      	ldr	r3, [pc, #16]	; (7d14 <sd_mmc_read_capacity+0x18>)
    7d04:	4798      	blx	r3
    7d06:	0040      	lsls	r0, r0, #1
    7d08:	3801      	subs	r0, #1
    7d0a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    7d0c:	0020      	movs	r0, r4
    7d0e:	4b02      	ldr	r3, [pc, #8]	; (7d18 <sd_mmc_read_capacity+0x1c>)
    7d10:	4798      	blx	r3
}
    7d12:	bd70      	pop	{r4, r5, r6, pc}
    7d14:	0000123d 	.word	0x0000123d
    7d18:	00007c9d 	.word	0x00007c9d

00007d1c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    7d1c:	b510      	push	{r4, lr}
    7d1e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    7d20:	2000      	movs	r0, #0
    7d22:	4b01      	ldr	r3, [pc, #4]	; (7d28 <sd_mmc_read_capacity_0+0xc>)
    7d24:	4798      	blx	r3
}
    7d26:	bd10      	pop	{r4, pc}
    7d28:	00007cfd 	.word	0x00007cfd

00007d2c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    7d2c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    7d2e:	2000      	movs	r0, #0
    7d30:	4b01      	ldr	r3, [pc, #4]	; (7d38 <sd_mmc_wr_protect_0+0xc>)
    7d32:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    7d34:	bd10      	pop	{r4, pc}
    7d36:	46c0      	nop			; (mov r8, r8)
    7d38:	00001265 	.word	0x00001265

00007d3c <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    7d3c:	2001      	movs	r0, #1
    7d3e:	4770      	bx	lr

00007d40 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    7d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d42:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    7d44:	4b24      	ldr	r3, [pc, #144]	; (7dd8 <sd_mmc_usb_read_10+0x98>)
    7d46:	4798      	blx	r3
    7d48:	2800      	cmp	r0, #0
    7d4a:	d004      	beq.n	7d56 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7d4c:	3802      	subs	r0, #2
    7d4e:	4243      	negs	r3, r0
    7d50:	4158      	adcs	r0, r3
    7d52:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    7d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    7d56:	3401      	adds	r4, #1
    7d58:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    7d5a:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7d5c:	4e1f      	ldr	r6, [pc, #124]	; (7ddc <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    7d5e:	e008      	b.n	7d72 <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7d60:	481f      	ldr	r0, [pc, #124]	; (7de0 <sd_mmc_usb_read_10+0xa0>)
    7d62:	e010      	b.n	7d86 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    7d64:	2000      	movs	r0, #0
    7d66:	4b1f      	ldr	r3, [pc, #124]	; (7de4 <sd_mmc_usb_read_10+0xa4>)
    7d68:	4798      	blx	r3
    7d6a:	2800      	cmp	r0, #0
    7d6c:	d126      	bne.n	7dbc <sd_mmc_usb_read_10+0x7c>
    7d6e:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7d70:	0022      	movs	r2, r4
	while (nb_step--) {
    7d72:	1e54      	subs	r4, r2, #1
    7d74:	b2a4      	uxth	r4, r4
    7d76:	2a00      	cmp	r2, #0
    7d78:	d01c      	beq.n	7db4 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    7d7a:	2c00      	cmp	r4, #0
    7d7c:	d020      	beq.n	7dc0 <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    7d7e:	2501      	movs	r5, #1
    7d80:	4025      	ands	r5, r4
    7d82:	d0ed      	beq.n	7d60 <sd_mmc_usb_read_10+0x20>
    7d84:	4818      	ldr	r0, [pc, #96]	; (7de8 <sd_mmc_usb_read_10+0xa8>)
    7d86:	2101      	movs	r1, #1
    7d88:	47b0      	blx	r6
    7d8a:	2800      	cmp	r0, #0
    7d8c:	d114      	bne.n	7db8 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    7d8e:	2f00      	cmp	r7, #0
    7d90:	d1e8      	bne.n	7d64 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    7d92:	4915      	ldr	r1, [pc, #84]	; (7de8 <sd_mmc_usb_read_10+0xa8>)
    7d94:	2d00      	cmp	r5, #0
    7d96:	d000      	beq.n	7d9a <sd_mmc_usb_read_10+0x5a>
    7d98:	4911      	ldr	r1, [pc, #68]	; (7de0 <sd_mmc_usb_read_10+0xa0>)
    7d9a:	2300      	movs	r3, #0
    7d9c:	2280      	movs	r2, #128	; 0x80
    7d9e:	0092      	lsls	r2, r2, #2
    7da0:	2001      	movs	r0, #1
    7da2:	4d12      	ldr	r5, [pc, #72]	; (7dec <sd_mmc_usb_read_10+0xac>)
    7da4:	47a8      	blx	r5
    7da6:	2800      	cmp	r0, #0
    7da8:	d1dc      	bne.n	7d64 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    7daa:	2001      	movs	r0, #1
    7dac:	4b0d      	ldr	r3, [pc, #52]	; (7de4 <sd_mmc_usb_read_10+0xa4>)
    7dae:	4798      	blx	r3
				return CTRL_FAIL;
    7db0:	2001      	movs	r0, #1
    7db2:	e7cf      	b.n	7d54 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    7db4:	2000      	movs	r0, #0
    7db6:	e7cd      	b.n	7d54 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    7db8:	2001      	movs	r0, #1
    7dba:	e7cb      	b.n	7d54 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    7dbc:	2001      	movs	r0, #1
    7dbe:	e7c9      	b.n	7d54 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    7dc0:	2f00      	cmp	r7, #0
    7dc2:	d1d4      	bne.n	7d6e <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    7dc4:	2300      	movs	r3, #0
    7dc6:	2280      	movs	r2, #128	; 0x80
    7dc8:	0092      	lsls	r2, r2, #2
    7dca:	4907      	ldr	r1, [pc, #28]	; (7de8 <sd_mmc_usb_read_10+0xa8>)
    7dcc:	2001      	movs	r0, #1
    7dce:	4d07      	ldr	r5, [pc, #28]	; (7dec <sd_mmc_usb_read_10+0xac>)
    7dd0:	47a8      	blx	r5
    7dd2:	2800      	cmp	r0, #0
    7dd4:	d1cb      	bne.n	7d6e <sd_mmc_usb_read_10+0x2e>
    7dd6:	e7e8      	b.n	7daa <sd_mmc_usb_read_10+0x6a>
    7dd8:	00001269 	.word	0x00001269
    7ddc:	000012f1 	.word	0x000012f1
    7de0:	20000c94 	.word	0x20000c94
    7de4:	0000131d 	.word	0x0000131d
    7de8:	20000a94 	.word	0x20000a94
    7dec:	00001cbd 	.word	0x00001cbd

00007df0 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    7df0:	b510      	push	{r4, lr}
    7df2:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    7df4:	0001      	movs	r1, r0
    7df6:	2000      	movs	r0, #0
    7df8:	4b01      	ldr	r3, [pc, #4]	; (7e00 <sd_mmc_usb_read_10_0+0x10>)
    7dfa:	4798      	blx	r3
}
    7dfc:	bd10      	pop	{r4, pc}
    7dfe:	46c0      	nop			; (mov r8, r8)
    7e00:	00007d41 	.word	0x00007d41

00007e04 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    7e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e06:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    7e08:	4b20      	ldr	r3, [pc, #128]	; (7e8c <sd_mmc_usb_write_10+0x88>)
    7e0a:	4798      	blx	r3
    7e0c:	2800      	cmp	r0, #0
    7e0e:	d00d      	beq.n	7e2c <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7e10:	3802      	subs	r0, #2
    7e12:	4243      	negs	r3, r0
    7e14:	4158      	adcs	r0, r3
    7e16:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    7e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    7e1a:	481d      	ldr	r0, [pc, #116]	; (7e90 <sd_mmc_usb_write_10+0x8c>)
    7e1c:	e01b      	b.n	7e56 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    7e1e:	3001      	adds	r0, #1
				if (!b_first_step) {
    7e20:	2d00      	cmp	r5, #0
    7e22:	d1f9      	bne.n	7e18 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    7e24:	4b1b      	ldr	r3, [pc, #108]	; (7e94 <sd_mmc_usb_write_10+0x90>)
    7e26:	4798      	blx	r3
				return CTRL_FAIL;
    7e28:	2001      	movs	r0, #1
    7e2a:	e7f5      	b.n	7e18 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    7e2c:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7e2e:	4f19      	ldr	r7, [pc, #100]	; (7e94 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    7e30:	4e19      	ldr	r6, [pc, #100]	; (7e98 <sd_mmc_usb_write_10+0x94>)
    7e32:	e008      	b.n	7e46 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    7e34:	2000      	movs	r0, #0
    7e36:	e7ef      	b.n	7e18 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    7e38:	2001      	movs	r0, #1
    7e3a:	e7ed      	b.n	7e18 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    7e3c:	2c00      	cmp	r4, #0
    7e3e:	d111      	bne.n	7e64 <sd_mmc_usb_write_10+0x60>
    7e40:	3c01      	subs	r4, #1
    7e42:	b2a4      	uxth	r4, r4
    7e44:	2500      	movs	r5, #0
	while (nb_step--) {
    7e46:	4b15      	ldr	r3, [pc, #84]	; (7e9c <sd_mmc_usb_write_10+0x98>)
    7e48:	429c      	cmp	r4, r3
    7e4a:	d0f3      	beq.n	7e34 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    7e4c:	2d00      	cmp	r5, #0
    7e4e:	d1f5      	bne.n	7e3c <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    7e50:	07e3      	lsls	r3, r4, #31
    7e52:	d5e2      	bpl.n	7e1a <sd_mmc_usb_write_10+0x16>
    7e54:	4812      	ldr	r0, [pc, #72]	; (7ea0 <sd_mmc_usb_write_10+0x9c>)
    7e56:	2101      	movs	r1, #1
    7e58:	4b12      	ldr	r3, [pc, #72]	; (7ea4 <sd_mmc_usb_write_10+0xa0>)
    7e5a:	4798      	blx	r3
    7e5c:	2800      	cmp	r0, #0
    7e5e:	d1eb      	bne.n	7e38 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    7e60:	2c00      	cmp	r4, #0
    7e62:	d00c      	beq.n	7e7e <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    7e64:	490e      	ldr	r1, [pc, #56]	; (7ea0 <sd_mmc_usb_write_10+0x9c>)
    7e66:	07e3      	lsls	r3, r4, #31
    7e68:	d500      	bpl.n	7e6c <sd_mmc_usb_write_10+0x68>
    7e6a:	4909      	ldr	r1, [pc, #36]	; (7e90 <sd_mmc_usb_write_10+0x8c>)
    7e6c:	2300      	movs	r3, #0
    7e6e:	2280      	movs	r2, #128	; 0x80
    7e70:	0092      	lsls	r2, r2, #2
    7e72:	2000      	movs	r0, #0
    7e74:	47b0      	blx	r6
    7e76:	2800      	cmp	r0, #0
    7e78:	d0d1      	beq.n	7e1e <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    7e7a:	2d00      	cmp	r5, #0
    7e7c:	d1e0      	bne.n	7e40 <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7e7e:	2000      	movs	r0, #0
    7e80:	47b8      	blx	r7
    7e82:	2800      	cmp	r0, #0
    7e84:	d0dc      	beq.n	7e40 <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    7e86:	2001      	movs	r0, #1
    7e88:	e7c6      	b.n	7e18 <sd_mmc_usb_write_10+0x14>
    7e8a:	46c0      	nop			; (mov r8, r8)
    7e8c:	0000138d 	.word	0x0000138d
    7e90:	20000c94 	.word	0x20000c94
    7e94:	00001429 	.word	0x00001429
    7e98:	00001cbd 	.word	0x00001cbd
    7e9c:	0000ffff 	.word	0x0000ffff
    7ea0:	20000a94 	.word	0x20000a94
    7ea4:	000013fd 	.word	0x000013fd

00007ea8 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    7ea8:	b510      	push	{r4, lr}
    7eaa:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    7eac:	0001      	movs	r1, r0
    7eae:	2000      	movs	r0, #0
    7eb0:	4b01      	ldr	r3, [pc, #4]	; (7eb8 <sd_mmc_usb_write_10_0+0x10>)
    7eb2:	4798      	blx	r3
}
    7eb4:	bd10      	pop	{r4, pc}
    7eb6:	46c0      	nop			; (mov r8, r8)
    7eb8:	00007e05 	.word	0x00007e05

00007ebc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    7ebc:	b510      	push	{r4, lr}
    7ebe:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    7ec0:	2201      	movs	r2, #1
    7ec2:	4b0c      	ldr	r3, [pc, #48]	; (7ef4 <sd_mmc_mem_2_ram+0x38>)
    7ec4:	4798      	blx	r3
    7ec6:	2800      	cmp	r0, #0
    7ec8:	d004      	beq.n	7ed4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7eca:	3802      	subs	r0, #2
    7ecc:	4243      	negs	r3, r0
    7ece:	4158      	adcs	r0, r3
    7ed0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7ed2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7ed4:	2101      	movs	r1, #1
    7ed6:	0020      	movs	r0, r4
    7ed8:	4b07      	ldr	r3, [pc, #28]	; (7ef8 <sd_mmc_mem_2_ram+0x3c>)
    7eda:	4798      	blx	r3
    7edc:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7ede:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	d1f6      	bne.n	7ed2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    7ee4:	2000      	movs	r0, #0
    7ee6:	4b05      	ldr	r3, [pc, #20]	; (7efc <sd_mmc_mem_2_ram+0x40>)
    7ee8:	4798      	blx	r3
    7eea:	1e43      	subs	r3, r0, #1
    7eec:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7eee:	b2c0      	uxtb	r0, r0
    7ef0:	e7ef      	b.n	7ed2 <sd_mmc_mem_2_ram+0x16>
    7ef2:	46c0      	nop			; (mov r8, r8)
    7ef4:	00001269 	.word	0x00001269
    7ef8:	000012f1 	.word	0x000012f1
    7efc:	0000131d 	.word	0x0000131d

00007f00 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    7f00:	b510      	push	{r4, lr}
    7f02:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    7f04:	0001      	movs	r1, r0
    7f06:	2000      	movs	r0, #0
    7f08:	4b01      	ldr	r3, [pc, #4]	; (7f10 <sd_mmc_mem_2_ram_0+0x10>)
    7f0a:	4798      	blx	r3
}
    7f0c:	bd10      	pop	{r4, pc}
    7f0e:	46c0      	nop			; (mov r8, r8)
    7f10:	00007ebd 	.word	0x00007ebd

00007f14 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    7f14:	b510      	push	{r4, lr}
    7f16:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    7f18:	2201      	movs	r2, #1
    7f1a:	4b0c      	ldr	r3, [pc, #48]	; (7f4c <sd_mmc_ram_2_mem+0x38>)
    7f1c:	4798      	blx	r3
    7f1e:	2800      	cmp	r0, #0
    7f20:	d004      	beq.n	7f2c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7f22:	3802      	subs	r0, #2
    7f24:	4243      	negs	r3, r0
    7f26:	4158      	adcs	r0, r3
    7f28:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7f2a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7f2c:	2101      	movs	r1, #1
    7f2e:	0020      	movs	r0, r4
    7f30:	4b07      	ldr	r3, [pc, #28]	; (7f50 <sd_mmc_ram_2_mem+0x3c>)
    7f32:	4798      	blx	r3
    7f34:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7f36:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d1f6      	bne.n	7f2a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7f3c:	2000      	movs	r0, #0
    7f3e:	4b05      	ldr	r3, [pc, #20]	; (7f54 <sd_mmc_ram_2_mem+0x40>)
    7f40:	4798      	blx	r3
    7f42:	1e43      	subs	r3, r0, #1
    7f44:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7f46:	b2c0      	uxtb	r0, r0
    7f48:	e7ef      	b.n	7f2a <sd_mmc_ram_2_mem+0x16>
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	0000138d 	.word	0x0000138d
    7f50:	000013fd 	.word	0x000013fd
    7f54:	00001429 	.word	0x00001429

00007f58 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    7f58:	b510      	push	{r4, lr}
    7f5a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    7f5c:	0001      	movs	r1, r0
    7f5e:	2000      	movs	r0, #0
    7f60:	4b01      	ldr	r3, [pc, #4]	; (7f68 <sd_mmc_ram_2_mem_0+0x10>)
    7f62:	4798      	blx	r3
}
    7f64:	bd10      	pop	{r4, pc}
    7f66:	46c0      	nop			; (mov r8, r8)
    7f68:	00007f15 	.word	0x00007f15

00007f6c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    7f6c:	b500      	push	{lr}
    7f6e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    7f70:	466b      	mov	r3, sp
    7f72:	1dd9      	adds	r1, r3, #7
    7f74:	23ff      	movs	r3, #255	; 0xff
    7f76:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    7f78:	2201      	movs	r2, #1
    7f7a:	480b      	ldr	r0, [pc, #44]	; (7fa8 <sd_mmc_spi_start_write_block+0x3c>)
    7f7c:	4b0b      	ldr	r3, [pc, #44]	; (7fac <sd_mmc_spi_start_write_block+0x40>)
    7f7e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    7f80:	4b0b      	ldr	r3, [pc, #44]	; (7fb0 <sd_mmc_spi_start_write_block+0x44>)
    7f82:	881b      	ldrh	r3, [r3, #0]
    7f84:	2b01      	cmp	r3, #1
    7f86:	d00a      	beq.n	7f9e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    7f88:	22fc      	movs	r2, #252	; 0xfc
    7f8a:	466b      	mov	r3, sp
    7f8c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    7f8e:	2201      	movs	r2, #1
    7f90:	466b      	mov	r3, sp
    7f92:	1d99      	adds	r1, r3, #6
    7f94:	4804      	ldr	r0, [pc, #16]	; (7fa8 <sd_mmc_spi_start_write_block+0x3c>)
    7f96:	4b05      	ldr	r3, [pc, #20]	; (7fac <sd_mmc_spi_start_write_block+0x40>)
    7f98:	4798      	blx	r3
}
    7f9a:	b003      	add	sp, #12
    7f9c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    7f9e:	22fe      	movs	r2, #254	; 0xfe
    7fa0:	466b      	mov	r3, sp
    7fa2:	719a      	strb	r2, [r3, #6]
    7fa4:	e7f3      	b.n	7f8e <sd_mmc_spi_start_write_block+0x22>
    7fa6:	46c0      	nop			; (mov r8, r8)
    7fa8:	200003c0 	.word	0x200003c0
    7fac:	00007a95 	.word	0x00007a95
    7fb0:	200003d4 	.word	0x200003d4

00007fb4 <sd_mmc_spi_wait_busy>:
{
    7fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fb6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    7fb8:	466b      	mov	r3, sp
    7fba:	1ddc      	adds	r4, r3, #7
    7fbc:	23ff      	movs	r3, #255	; 0xff
    7fbe:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7fc0:	4e12      	ldr	r6, [pc, #72]	; (800c <sd_mmc_spi_wait_busy+0x58>)
    7fc2:	2201      	movs	r2, #1
    7fc4:	0021      	movs	r1, r4
    7fc6:	0030      	movs	r0, r6
    7fc8:	4d11      	ldr	r5, [pc, #68]	; (8010 <sd_mmc_spi_wait_busy+0x5c>)
    7fca:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7fcc:	23ff      	movs	r3, #255	; 0xff
    7fce:	2201      	movs	r2, #1
    7fd0:	0021      	movs	r1, r4
    7fd2:	0030      	movs	r0, r6
    7fd4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7fd6:	23ff      	movs	r3, #255	; 0xff
    7fd8:	2201      	movs	r2, #1
    7fda:	0021      	movs	r1, r4
    7fdc:	0030      	movs	r0, r6
    7fde:	47a8      	blx	r5
    7fe0:	4c0c      	ldr	r4, [pc, #48]	; (8014 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    7fe2:	466b      	mov	r3, sp
    7fe4:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7fe6:	4e09      	ldr	r6, [pc, #36]	; (800c <sd_mmc_spi_wait_busy+0x58>)
    7fe8:	4f09      	ldr	r7, [pc, #36]	; (8010 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    7fea:	782b      	ldrb	r3, [r5, #0]
    7fec:	2bff      	cmp	r3, #255	; 0xff
    7fee:	d009      	beq.n	8004 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7ff0:	23ff      	movs	r3, #255	; 0xff
    7ff2:	2201      	movs	r2, #1
    7ff4:	0029      	movs	r1, r5
    7ff6:	0030      	movs	r0, r6
    7ff8:	47b8      	blx	r7
    7ffa:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    7ffc:	2c00      	cmp	r4, #0
    7ffe:	d1f4      	bne.n	7fea <sd_mmc_spi_wait_busy+0x36>
			return false;
    8000:	2000      	movs	r0, #0
    8002:	e000      	b.n	8006 <sd_mmc_spi_wait_busy+0x52>
	return true;
    8004:	2001      	movs	r0, #1
}
    8006:	b003      	add	sp, #12
    8008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    800a:	46c0      	nop			; (mov r8, r8)
    800c:	200003c0 	.word	0x200003c0
    8010:	00007889 	.word	0x00007889
    8014:	00030d40 	.word	0x00030d40

00008018 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    8018:	b570      	push	{r4, r5, r6, lr}
    801a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    801c:	4b14      	ldr	r3, [pc, #80]	; (8070 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    801e:	881c      	ldrh	r4, [r3, #0]
    8020:	2c01      	cmp	r4, #1
    8022:	d023      	beq.n	806c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    8024:	4b13      	ldr	r3, [pc, #76]	; (8074 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    8026:	8819      	ldrh	r1, [r3, #0]
    8028:	4b13      	ldr	r3, [pc, #76]	; (8078 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    802a:	6818      	ldr	r0, [r3, #0]
    802c:	4b13      	ldr	r3, [pc, #76]	; (807c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    802e:	4798      	blx	r3
		return true; // It is not the End of multi write
    8030:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    8032:	4284      	cmp	r4, r0
    8034:	d902      	bls.n	803c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    8036:	0018      	movs	r0, r3
    8038:	b002      	add	sp, #8
    803a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    803c:	466b      	mov	r3, sp
    803e:	1ddc      	adds	r4, r3, #7
    8040:	23ff      	movs	r3, #255	; 0xff
    8042:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8044:	4e0e      	ldr	r6, [pc, #56]	; (8080 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    8046:	2201      	movs	r2, #1
    8048:	0021      	movs	r1, r4
    804a:	0030      	movs	r0, r6
    804c:	4d0d      	ldr	r5, [pc, #52]	; (8084 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    804e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    8050:	23fd      	movs	r3, #253	; 0xfd
    8052:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8054:	2201      	movs	r2, #1
    8056:	0021      	movs	r1, r4
    8058:	0030      	movs	r0, r6
    805a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    805c:	4b0a      	ldr	r3, [pc, #40]	; (8088 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    805e:	4798      	blx	r3
    8060:	1e03      	subs	r3, r0, #0
    8062:	d1e8      	bne.n	8036 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8064:	2105      	movs	r1, #5
    8066:	4a09      	ldr	r2, [pc, #36]	; (808c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    8068:	7011      	strb	r1, [r2, #0]
		return false;
    806a:	e7e4      	b.n	8036 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    806c:	2301      	movs	r3, #1
    806e:	e7e2      	b.n	8036 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    8070:	200003d4 	.word	0x200003d4
    8074:	200003cc 	.word	0x200003cc
    8078:	200003dc 	.word	0x200003dc
    807c:	00008d55 	.word	0x00008d55
    8080:	200003c0 	.word	0x200003c0
    8084:	00007a95 	.word	0x00007a95
    8088:	00007fb5 	.word	0x00007fb5
    808c:	200003d3 	.word	0x200003d3

00008090 <sd_mmc_spi_start_read_block>:
{
    8090:	b5f0      	push	{r4, r5, r6, r7, lr}
    8092:	b083      	sub	sp, #12
	token = 0;
    8094:	2200      	movs	r2, #0
    8096:	466b      	mov	r3, sp
    8098:	71da      	strb	r2, [r3, #7]
    809a:	4c14      	ldr	r4, [pc, #80]	; (80ec <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    809c:	466b      	mov	r3, sp
    809e:	1ddd      	adds	r5, r3, #7
    80a0:	4e13      	ldr	r6, [pc, #76]	; (80f0 <sd_mmc_spi_start_read_block+0x60>)
    80a2:	4f14      	ldr	r7, [pc, #80]	; (80f4 <sd_mmc_spi_start_read_block+0x64>)
    80a4:	23ff      	movs	r3, #255	; 0xff
    80a6:	2201      	movs	r2, #1
    80a8:	0029      	movs	r1, r5
    80aa:	0030      	movs	r0, r6
    80ac:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    80ae:	782b      	ldrb	r3, [r5, #0]
    80b0:	220f      	movs	r2, #15
    80b2:	0019      	movs	r1, r3
    80b4:	4391      	bics	r1, r2
    80b6:	1e0a      	subs	r2, r1, #0
    80b8:	d009      	beq.n	80ce <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    80ba:	2bfe      	cmp	r3, #254	; 0xfe
    80bc:	d013      	beq.n	80e6 <sd_mmc_spi_start_read_block+0x56>
    80be:	3c01      	subs	r4, #1
		if (i-- == 0) {
    80c0:	2c00      	cmp	r4, #0
    80c2:	d1ef      	bne.n	80a4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    80c4:	2204      	movs	r2, #4
    80c6:	4b0c      	ldr	r3, [pc, #48]	; (80f8 <sd_mmc_spi_start_read_block+0x68>)
    80c8:	701a      	strb	r2, [r3, #0]
			return false;
    80ca:	2000      	movs	r0, #0
    80cc:	e00c      	b.n	80e8 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    80ce:	075b      	lsls	r3, r3, #29
    80d0:	d004      	beq.n	80dc <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    80d2:	3207      	adds	r2, #7
    80d4:	4b08      	ldr	r3, [pc, #32]	; (80f8 <sd_mmc_spi_start_read_block+0x68>)
    80d6:	701a      	strb	r2, [r3, #0]
			return false;
    80d8:	2000      	movs	r0, #0
    80da:	e005      	b.n	80e8 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    80dc:	220b      	movs	r2, #11
    80de:	4b06      	ldr	r3, [pc, #24]	; (80f8 <sd_mmc_spi_start_read_block+0x68>)
    80e0:	701a      	strb	r2, [r3, #0]
			return false;
    80e2:	2000      	movs	r0, #0
    80e4:	e000      	b.n	80e8 <sd_mmc_spi_start_read_block+0x58>
	return true;
    80e6:	2001      	movs	r0, #1
}
    80e8:	b003      	add	sp, #12
    80ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80ec:	0007a120 	.word	0x0007a120
    80f0:	200003c0 	.word	0x200003c0
    80f4:	00007889 	.word	0x00007889
    80f8:	200003d3 	.word	0x200003d3

000080fc <sd_mmc_spi_stop_write_block>:
{
    80fc:	b530      	push	{r4, r5, lr}
    80fe:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    8100:	a901      	add	r1, sp, #4
    8102:	2301      	movs	r3, #1
    8104:	425b      	negs	r3, r3
    8106:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    8108:	4d14      	ldr	r5, [pc, #80]	; (815c <sd_mmc_spi_stop_write_block+0x60>)
    810a:	2202      	movs	r2, #2
    810c:	0028      	movs	r0, r5
    810e:	4b14      	ldr	r3, [pc, #80]	; (8160 <sd_mmc_spi_stop_write_block+0x64>)
    8110:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    8112:	466b      	mov	r3, sp
    8114:	1ddc      	adds	r4, r3, #7
    8116:	23ff      	movs	r3, #255	; 0xff
    8118:	2201      	movs	r2, #1
    811a:	0021      	movs	r1, r4
    811c:	0028      	movs	r0, r5
    811e:	4d11      	ldr	r5, [pc, #68]	; (8164 <sd_mmc_spi_stop_write_block+0x68>)
    8120:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    8122:	7822      	ldrb	r2, [r4, #0]
    8124:	2311      	movs	r3, #17
    8126:	4013      	ands	r3, r2
    8128:	2b01      	cmp	r3, #1
    812a:	d005      	beq.n	8138 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    812c:	2201      	movs	r2, #1
    812e:	4b0e      	ldr	r3, [pc, #56]	; (8168 <sd_mmc_spi_stop_write_block+0x6c>)
    8130:	701a      	strb	r2, [r3, #0]
		return false;
    8132:	2000      	movs	r0, #0
}
    8134:	b003      	add	sp, #12
    8136:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    8138:	231e      	movs	r3, #30
    813a:	401a      	ands	r2, r3
    813c:	2a04      	cmp	r2, #4
    813e:	d00b      	beq.n	8158 <sd_mmc_spi_stop_write_block+0x5c>
    8140:	2a0a      	cmp	r2, #10
    8142:	d104      	bne.n	814e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    8144:	3a02      	subs	r2, #2
    8146:	4b08      	ldr	r3, [pc, #32]	; (8168 <sd_mmc_spi_stop_write_block+0x6c>)
    8148:	701a      	strb	r2, [r3, #0]
		return false;
    814a:	2000      	movs	r0, #0
    814c:	e7f2      	b.n	8134 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    814e:	220a      	movs	r2, #10
    8150:	4b05      	ldr	r3, [pc, #20]	; (8168 <sd_mmc_spi_stop_write_block+0x6c>)
    8152:	701a      	strb	r2, [r3, #0]
		return false;
    8154:	2000      	movs	r0, #0
    8156:	e7ed      	b.n	8134 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    8158:	2001      	movs	r0, #1
    815a:	e7eb      	b.n	8134 <sd_mmc_spi_stop_write_block+0x38>
    815c:	200003c0 	.word	0x200003c0
    8160:	00007a95 	.word	0x00007a95
    8164:	00007889 	.word	0x00007889
    8168:	200003d3 	.word	0x200003d3

0000816c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    816c:	b570      	push	{r4, r5, r6, lr}
    816e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8170:	2500      	movs	r5, #0
    8172:	4b2c      	ldr	r3, [pc, #176]	; (8224 <sd_mmc_spi_init+0xb8>)
    8174:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    8176:	a90f      	add	r1, sp, #60	; 0x3c
    8178:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    817a:	2601      	movs	r6, #1
    817c:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    817e:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    8180:	2025      	movs	r0, #37	; 0x25
    8182:	4b29      	ldr	r3, [pc, #164]	; (8228 <sd_mmc_spi_init+0xbc>)
    8184:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    8186:	ac01      	add	r4, sp, #4
    8188:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    818a:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    818c:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    818e:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    8190:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    8192:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    8194:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    8196:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    8198:	2324      	movs	r3, #36	; 0x24
    819a:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    819c:	220c      	movs	r2, #12
    819e:	2100      	movs	r1, #0
    81a0:	a807      	add	r0, sp, #28
    81a2:	4b22      	ldr	r3, [pc, #136]	; (822c <sd_mmc_spi_init+0xc0>)
    81a4:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    81a6:	2380      	movs	r3, #128	; 0x80
    81a8:	025b      	lsls	r3, r3, #9
    81aa:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    81ac:	4b20      	ldr	r3, [pc, #128]	; (8230 <sd_mmc_spi_init+0xc4>)
    81ae:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    81b0:	4b20      	ldr	r3, [pc, #128]	; (8234 <sd_mmc_spi_init+0xc8>)
    81b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    81b4:	4b20      	ldr	r3, [pc, #128]	; (8238 <sd_mmc_spi_init+0xcc>)
    81b6:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    81b8:	4b20      	ldr	r3, [pc, #128]	; (823c <sd_mmc_spi_init+0xd0>)
    81ba:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    81bc:	4b20      	ldr	r3, [pc, #128]	; (8240 <sd_mmc_spi_init+0xd4>)
    81be:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    81c0:	4d20      	ldr	r5, [pc, #128]	; (8244 <sd_mmc_spi_init+0xd8>)
    81c2:	0022      	movs	r2, r4
    81c4:	4920      	ldr	r1, [pc, #128]	; (8248 <sd_mmc_spi_init+0xdc>)
    81c6:	0028      	movs	r0, r5
    81c8:	4b20      	ldr	r3, [pc, #128]	; (824c <sd_mmc_spi_init+0xe0>)
    81ca:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    81cc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    81ce:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    81d0:	2b00      	cmp	r3, #0
    81d2:	d1fc      	bne.n	81ce <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    81d4:	6813      	ldr	r3, [r2, #0]
    81d6:	2102      	movs	r1, #2
    81d8:	430b      	orrs	r3, r1
    81da:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    81dc:	4a1c      	ldr	r2, [pc, #112]	; (8250 <sd_mmc_spi_init+0xe4>)
    81de:	2300      	movs	r3, #0
    81e0:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    81e2:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    81e4:	491b      	ldr	r1, [pc, #108]	; (8254 <sd_mmc_spi_init+0xe8>)
    81e6:	7808      	ldrb	r0, [r1, #0]
    81e8:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    81ea:	4c1b      	ldr	r4, [pc, #108]	; (8258 <sd_mmc_spi_init+0xec>)
    81ec:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    81ee:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    81f0:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    81f2:	2201      	movs	r2, #1
    81f4:	4669      	mov	r1, sp
    81f6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    81f8:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    81fa:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    81fc:	4b0a      	ldr	r3, [pc, #40]	; (8228 <sd_mmc_spi_init+0xbc>)
    81fe:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8200:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    8202:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8204:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8206:	2900      	cmp	r1, #0
    8208:	d104      	bne.n	8214 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    820a:	0953      	lsrs	r3, r2, #5
    820c:	01db      	lsls	r3, r3, #7
    820e:	4913      	ldr	r1, [pc, #76]	; (825c <sd_mmc_spi_init+0xf0>)
    8210:	468c      	mov	ip, r1
    8212:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8214:	211f      	movs	r1, #31
    8216:	4011      	ands	r1, r2
    8218:	2201      	movs	r2, #1
    821a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    821c:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    821e:	b010      	add	sp, #64	; 0x40
    8220:	bd70      	pop	{r4, r5, r6, pc}
    8222:	46c0      	nop			; (mov r8, r8)
    8224:	200003d3 	.word	0x200003d3
    8228:	0000887d 	.word	0x0000887d
    822c:	00009343 	.word	0x00009343
    8230:	00040003 	.word	0x00040003
    8234:	00050003 	.word	0x00050003
    8238:	00060003 	.word	0x00060003
    823c:	00070003 	.word	0x00070003
    8240:	00061a80 	.word	0x00061a80
    8244:	200003c0 	.word	0x200003c0
    8248:	42000800 	.word	0x42000800
    824c:	00007555 	.word	0x00007555
    8250:	200003e0 	.word	0x200003e0
    8254:	20000124 	.word	0x20000124
    8258:	200003d0 	.word	0x200003d0
    825c:	41004400 	.word	0x41004400

00008260 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    8260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8262:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8264:	2200      	movs	r2, #0
    8266:	4b0d      	ldr	r3, [pc, #52]	; (829c <sd_mmc_spi_select_device+0x3c>)
    8268:	701a      	strb	r2, [r3, #0]
    826a:	000c      	movs	r4, r1
    826c:	4b0c      	ldr	r3, [pc, #48]	; (82a0 <sd_mmc_spi_select_device+0x40>)
    826e:	4299      	cmp	r1, r3
    8270:	d900      	bls.n	8274 <sd_mmc_spi_select_device+0x14>
    8272:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    8274:	4d0b      	ldr	r5, [pc, #44]	; (82a4 <sd_mmc_spi_select_device+0x44>)
    8276:	4e0c      	ldr	r6, [pc, #48]	; (82a8 <sd_mmc_spi_select_device+0x48>)
    8278:	e001      	b.n	827e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    827a:	08e3      	lsrs	r3, r4, #3
    827c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    827e:	0021      	movs	r1, r4
    8280:	0028      	movs	r0, r5
    8282:	47b0      	blx	r6
    8284:	2817      	cmp	r0, #23
    8286:	d0f8      	beq.n	827a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    8288:	0079      	lsls	r1, r7, #1
    828a:	19cf      	adds	r7, r1, r7
    828c:	4907      	ldr	r1, [pc, #28]	; (82ac <sd_mmc_spi_select_device+0x4c>)
    828e:	19c9      	adds	r1, r1, r7
    8290:	2201      	movs	r2, #1
    8292:	4804      	ldr	r0, [pc, #16]	; (82a4 <sd_mmc_spi_select_device+0x44>)
    8294:	4b06      	ldr	r3, [pc, #24]	; (82b0 <sd_mmc_spi_select_device+0x50>)
    8296:	4798      	blx	r3
}
    8298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    829a:	46c0      	nop			; (mov r8, r8)
    829c:	200003d3 	.word	0x200003d3
    82a0:	003d0900 	.word	0x003d0900
    82a4:	200003c0 	.word	0x200003c0
    82a8:	000074d1 	.word	0x000074d1
    82ac:	200003d0 	.word	0x200003d0
    82b0:	000079a1 	.word	0x000079a1

000082b4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    82b4:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    82b6:	2200      	movs	r2, #0
    82b8:	4b04      	ldr	r3, [pc, #16]	; (82cc <sd_mmc_spi_deselect_device+0x18>)
    82ba:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    82bc:	0041      	lsls	r1, r0, #1
    82be:	1808      	adds	r0, r1, r0
    82c0:	4903      	ldr	r1, [pc, #12]	; (82d0 <sd_mmc_spi_deselect_device+0x1c>)
    82c2:	1809      	adds	r1, r1, r0
    82c4:	4803      	ldr	r0, [pc, #12]	; (82d4 <sd_mmc_spi_deselect_device+0x20>)
    82c6:	4b04      	ldr	r3, [pc, #16]	; (82d8 <sd_mmc_spi_deselect_device+0x24>)
    82c8:	4798      	blx	r3
}
    82ca:	bd10      	pop	{r4, pc}
    82cc:	200003d3 	.word	0x200003d3
    82d0:	200003d0 	.word	0x200003d0
    82d4:	200003c0 	.word	0x200003c0
    82d8:	000079a1 	.word	0x000079a1

000082dc <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    82dc:	b570      	push	{r4, r5, r6, lr}
    82de:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    82e0:	22ff      	movs	r2, #255	; 0xff
    82e2:	466b      	mov	r3, sp
    82e4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    82e6:	2200      	movs	r2, #0
    82e8:	4b07      	ldr	r3, [pc, #28]	; (8308 <sd_mmc_spi_send_clock+0x2c>)
    82ea:	701a      	strb	r2, [r3, #0]
    82ec:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    82ee:	4e07      	ldr	r6, [pc, #28]	; (830c <sd_mmc_spi_send_clock+0x30>)
    82f0:	4d07      	ldr	r5, [pc, #28]	; (8310 <sd_mmc_spi_send_clock+0x34>)
    82f2:	2201      	movs	r2, #1
    82f4:	466b      	mov	r3, sp
    82f6:	1dd9      	adds	r1, r3, #7
    82f8:	0030      	movs	r0, r6
    82fa:	47a8      	blx	r5
    82fc:	3c01      	subs	r4, #1
    82fe:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    8300:	2c00      	cmp	r4, #0
    8302:	d1f6      	bne.n	82f2 <sd_mmc_spi_send_clock+0x16>
	}
}
    8304:	b002      	add	sp, #8
    8306:	bd70      	pop	{r4, r5, r6, pc}
    8308:	200003d3 	.word	0x200003d3
    830c:	200003c0 	.word	0x200003c0
    8310:	00007a95 	.word	0x00007a95

00008314 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    8314:	b5f0      	push	{r4, r5, r6, r7, lr}
    8316:	46c6      	mov	lr, r8
    8318:	b500      	push	{lr}
    831a:	b086      	sub	sp, #24
    831c:	4680      	mov	r8, r0
    831e:	9200      	str	r2, [sp, #0]
    8320:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    8322:	22ff      	movs	r2, #255	; 0xff
    8324:	230f      	movs	r3, #15
    8326:	a802      	add	r0, sp, #8
    8328:	4684      	mov	ip, r0
    832a:	4463      	add	r3, ip
    832c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    832e:	2200      	movs	r2, #0
    8330:	4b53      	ldr	r3, [pc, #332]	; (8480 <sd_mmc_spi_adtc_start+0x16c>)
    8332:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    8334:	ab04      	add	r3, sp, #16
    8336:	323f      	adds	r2, #63	; 0x3f
    8338:	4640      	mov	r0, r8
    833a:	4002      	ands	r2, r0
    833c:	2040      	movs	r0, #64	; 0x40
    833e:	4302      	orrs	r2, r0
    8340:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    8342:	0e0a      	lsrs	r2, r1, #24
    8344:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    8346:	0c0a      	lsrs	r2, r1, #16
    8348:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    834a:	0a0a      	lsrs	r2, r1, #8
    834c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    834e:	7119      	strb	r1, [r3, #4]
    8350:	2700      	movs	r7, #0
	crc = 0;
    8352:	2300      	movs	r3, #0
		value = *buf++;
    8354:	a904      	add	r1, sp, #16
    8356:	2208      	movs	r2, #8
				crc ^= 0x09;
    8358:	2409      	movs	r4, #9
    835a:	e011      	b.n	8380 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    835c:	0076      	lsls	r6, r6, #1
    835e:	b2f6      	uxtb	r6, r6
    8360:	3801      	subs	r0, #1
    8362:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    8364:	2800      	cmp	r0, #0
    8366:	d008      	beq.n	837a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    8368:	005b      	lsls	r3, r3, #1
    836a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    836c:	001d      	movs	r5, r3
    836e:	4075      	eors	r5, r6
    8370:	062d      	lsls	r5, r5, #24
    8372:	d5f3      	bpl.n	835c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    8374:	4063      	eors	r3, r4
    8376:	b2db      	uxtb	r3, r3
    8378:	e7f0      	b.n	835c <sd_mmc_spi_adtc_start+0x48>
    837a:	3701      	adds	r7, #1
	while (size--) {
    837c:	2f05      	cmp	r7, #5
    837e:	d002      	beq.n	8386 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    8380:	5c7e      	ldrb	r6, [r7, r1]
    8382:	0010      	movs	r0, r2
    8384:	e7f0      	b.n	8368 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    8386:	005b      	lsls	r3, r3, #1
    8388:	2201      	movs	r2, #1
    838a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    838c:	ac04      	add	r4, sp, #16
    838e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    8390:	4e3c      	ldr	r6, [pc, #240]	; (8484 <sd_mmc_spi_adtc_start+0x170>)
    8392:	2201      	movs	r2, #1
    8394:	210f      	movs	r1, #15
    8396:	ab02      	add	r3, sp, #8
    8398:	469c      	mov	ip, r3
    839a:	4461      	add	r1, ip
    839c:	0030      	movs	r0, r6
    839e:	4f3a      	ldr	r7, [pc, #232]	; (8488 <sd_mmc_spi_adtc_start+0x174>)
    83a0:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    83a2:	2206      	movs	r2, #6
    83a4:	0021      	movs	r1, r4
    83a6:	0030      	movs	r0, r6
    83a8:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    83aa:	ab02      	add	r3, sp, #8
    83ac:	1dd9      	adds	r1, r3, #7
    83ae:	23ff      	movs	r3, #255	; 0xff
    83b0:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    83b2:	2201      	movs	r2, #1
    83b4:	0030      	movs	r0, r6
    83b6:	4e35      	ldr	r6, [pc, #212]	; (848c <sd_mmc_spi_adtc_start+0x178>)
    83b8:	47b0      	blx	r6
    83ba:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    83bc:	ab02      	add	r3, sp, #8
    83be:	1dde      	adds	r6, r3, #7
    83c0:	4f30      	ldr	r7, [pc, #192]	; (8484 <sd_mmc_spi_adtc_start+0x170>)
    83c2:	4d32      	ldr	r5, [pc, #200]	; (848c <sd_mmc_spi_adtc_start+0x178>)
    83c4:	23ff      	movs	r3, #255	; 0xff
    83c6:	2201      	movs	r2, #1
    83c8:	0031      	movs	r1, r6
    83ca:	0038      	movs	r0, r7
    83cc:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    83ce:	7833      	ldrb	r3, [r6, #0]
    83d0:	b25a      	sxtb	r2, r3
    83d2:	2a00      	cmp	r2, #0
    83d4:	da0b      	bge.n	83ee <sd_mmc_spi_adtc_start+0xda>
    83d6:	3c01      	subs	r4, #1
    83d8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    83da:	2c00      	cmp	r4, #0
    83dc:	d1f2      	bne.n	83c4 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    83de:	2202      	movs	r2, #2
    83e0:	4b27      	ldr	r3, [pc, #156]	; (8480 <sd_mmc_spi_adtc_start+0x16c>)
    83e2:	701a      	strb	r2, [r3, #0]
			return false;
    83e4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    83e6:	b006      	add	sp, #24
    83e8:	bc04      	pop	{r2}
    83ea:	4690      	mov	r8, r2
    83ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    83ee:	4a28      	ldr	r2, [pc, #160]	; (8490 <sd_mmc_spi_adtc_start+0x17c>)
    83f0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    83f2:	071a      	lsls	r2, r3, #28
    83f4:	d41a      	bmi.n	842c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    83f6:	075a      	lsls	r2, r3, #29
    83f8:	d41d      	bmi.n	8436 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    83fa:	2201      	movs	r2, #1
    83fc:	4393      	bics	r3, r2
    83fe:	d11f      	bne.n	8440 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    8400:	4643      	mov	r3, r8
    8402:	049b      	lsls	r3, r3, #18
    8404:	d420      	bmi.n	8448 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    8406:	4643      	mov	r3, r8
    8408:	059b      	lsls	r3, r3, #22
    840a:	d425      	bmi.n	8458 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    840c:	4643      	mov	r3, r8
    840e:	055b      	lsls	r3, r3, #21
    8410:	d42b      	bmi.n	846a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    8412:	4b20      	ldr	r3, [pc, #128]	; (8494 <sd_mmc_spi_adtc_start+0x180>)
    8414:	466a      	mov	r2, sp
    8416:	8812      	ldrh	r2, [r2, #0]
    8418:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    841a:	4b1f      	ldr	r3, [pc, #124]	; (8498 <sd_mmc_spi_adtc_start+0x184>)
    841c:	466a      	mov	r2, sp
    841e:	8892      	ldrh	r2, [r2, #4]
    8420:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    8422:	2200      	movs	r2, #0
    8424:	4b1d      	ldr	r3, [pc, #116]	; (849c <sd_mmc_spi_adtc_start+0x188>)
    8426:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    8428:	2001      	movs	r0, #1
    842a:	e7dc      	b.n	83e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    842c:	2206      	movs	r2, #6
    842e:	4b14      	ldr	r3, [pc, #80]	; (8480 <sd_mmc_spi_adtc_start+0x16c>)
    8430:	701a      	strb	r2, [r3, #0]
		return false;
    8432:	2000      	movs	r0, #0
    8434:	e7d7      	b.n	83e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    8436:	2209      	movs	r2, #9
    8438:	4b11      	ldr	r3, [pc, #68]	; (8480 <sd_mmc_spi_adtc_start+0x16c>)
    843a:	701a      	strb	r2, [r3, #0]
		return false;
    843c:	2000      	movs	r0, #0
    843e:	e7d2      	b.n	83e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    8440:	4b0f      	ldr	r3, [pc, #60]	; (8480 <sd_mmc_spi_adtc_start+0x16c>)
    8442:	701a      	strb	r2, [r3, #0]
		return false;
    8444:	2000      	movs	r0, #0
    8446:	e7ce      	b.n	83e6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    8448:	4b15      	ldr	r3, [pc, #84]	; (84a0 <sd_mmc_spi_adtc_start+0x18c>)
    844a:	4798      	blx	r3
    844c:	2800      	cmp	r0, #0
    844e:	d1da      	bne.n	8406 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    8450:	2203      	movs	r2, #3
    8452:	4b0b      	ldr	r3, [pc, #44]	; (8480 <sd_mmc_spi_adtc_start+0x16c>)
    8454:	701a      	strb	r2, [r3, #0]
			return false;
    8456:	e7c6      	b.n	83e6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    8458:	490d      	ldr	r1, [pc, #52]	; (8490 <sd_mmc_spi_adtc_start+0x17c>)
    845a:	2300      	movs	r3, #0
    845c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    845e:	33ff      	adds	r3, #255	; 0xff
    8460:	2201      	movs	r2, #1
    8462:	4808      	ldr	r0, [pc, #32]	; (8484 <sd_mmc_spi_adtc_start+0x170>)
    8464:	4e09      	ldr	r6, [pc, #36]	; (848c <sd_mmc_spi_adtc_start+0x178>)
    8466:	47b0      	blx	r6
    8468:	e7d0      	b.n	840c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    846a:	4e09      	ldr	r6, [pc, #36]	; (8490 <sd_mmc_spi_adtc_start+0x17c>)
    846c:	23ff      	movs	r3, #255	; 0xff
    846e:	2204      	movs	r2, #4
    8470:	0031      	movs	r1, r6
    8472:	4804      	ldr	r0, [pc, #16]	; (8484 <sd_mmc_spi_adtc_start+0x170>)
    8474:	4f05      	ldr	r7, [pc, #20]	; (848c <sd_mmc_spi_adtc_start+0x178>)
    8476:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    8478:	6833      	ldr	r3, [r6, #0]
    847a:	ba1b      	rev	r3, r3
    847c:	6033      	str	r3, [r6, #0]
    847e:	e7c8      	b.n	8412 <sd_mmc_spi_adtc_start+0xfe>
    8480:	200003d3 	.word	0x200003d3
    8484:	200003c0 	.word	0x200003c0
    8488:	00007a95 	.word	0x00007a95
    848c:	00007889 	.word	0x00007889
    8490:	200003d8 	.word	0x200003d8
    8494:	200003cc 	.word	0x200003cc
    8498:	200003d4 	.word	0x200003d4
    849c:	200003dc 	.word	0x200003dc
    84a0:	00007fb5 	.word	0x00007fb5

000084a4 <sd_mmc_spi_send_cmd>:
{
    84a4:	b510      	push	{r4, lr}
    84a6:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    84a8:	2300      	movs	r3, #0
    84aa:	9300      	str	r3, [sp, #0]
    84ac:	2200      	movs	r2, #0
    84ae:	4c02      	ldr	r4, [pc, #8]	; (84b8 <sd_mmc_spi_send_cmd+0x14>)
    84b0:	47a0      	blx	r4
}
    84b2:	b002      	add	sp, #8
    84b4:	bd10      	pop	{r4, pc}
    84b6:	46c0      	nop			; (mov r8, r8)
    84b8:	00008315 	.word	0x00008315

000084bc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    84bc:	4b01      	ldr	r3, [pc, #4]	; (84c4 <sd_mmc_spi_get_response+0x8>)
    84be:	6818      	ldr	r0, [r3, #0]
}
    84c0:	4770      	bx	lr
    84c2:	46c0      	nop			; (mov r8, r8)
    84c4:	200003d8 	.word	0x200003d8

000084c8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    84c8:	b510      	push	{r4, lr}
    84ca:	b084      	sub	sp, #16
    84cc:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    84ce:	2200      	movs	r2, #0
    84d0:	4b14      	ldr	r3, [pc, #80]	; (8524 <sd_mmc_spi_read_word+0x5c>)
    84d2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    84d4:	4b14      	ldr	r3, [pc, #80]	; (8528 <sd_mmc_spi_read_word+0x60>)
    84d6:	8819      	ldrh	r1, [r3, #0]
    84d8:	4b14      	ldr	r3, [pc, #80]	; (852c <sd_mmc_spi_read_word+0x64>)
    84da:	6818      	ldr	r0, [r3, #0]
    84dc:	4b14      	ldr	r3, [pc, #80]	; (8530 <sd_mmc_spi_read_word+0x68>)
    84de:	4798      	blx	r3
    84e0:	2900      	cmp	r1, #0
    84e2:	d103      	bne.n	84ec <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    84e4:	4b13      	ldr	r3, [pc, #76]	; (8534 <sd_mmc_spi_read_word+0x6c>)
    84e6:	4798      	blx	r3
    84e8:	2800      	cmp	r0, #0
    84ea:	d010      	beq.n	850e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    84ec:	23ff      	movs	r3, #255	; 0xff
    84ee:	2204      	movs	r2, #4
    84f0:	a901      	add	r1, sp, #4
    84f2:	4811      	ldr	r0, [pc, #68]	; (8538 <sd_mmc_spi_read_word+0x70>)
    84f4:	4c11      	ldr	r4, [pc, #68]	; (853c <sd_mmc_spi_read_word+0x74>)
    84f6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    84f8:	4b0c      	ldr	r3, [pc, #48]	; (852c <sd_mmc_spi_read_word+0x64>)
    84fa:	681a      	ldr	r2, [r3, #0]
    84fc:	1d10      	adds	r0, r2, #4
    84fe:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8500:	4b09      	ldr	r3, [pc, #36]	; (8528 <sd_mmc_spi_read_word+0x60>)
    8502:	8819      	ldrh	r1, [r3, #0]
    8504:	4b0a      	ldr	r3, [pc, #40]	; (8530 <sd_mmc_spi_read_word+0x68>)
    8506:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    8508:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    850a:	2900      	cmp	r1, #0
    850c:	d001      	beq.n	8512 <sd_mmc_spi_read_word+0x4a>
}
    850e:	b004      	add	sp, #16
    8510:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8512:	23ff      	movs	r3, #255	; 0xff
    8514:	2202      	movs	r2, #2
    8516:	a903      	add	r1, sp, #12
    8518:	4807      	ldr	r0, [pc, #28]	; (8538 <sd_mmc_spi_read_word+0x70>)
    851a:	4c08      	ldr	r4, [pc, #32]	; (853c <sd_mmc_spi_read_word+0x74>)
    851c:	47a0      	blx	r4
	return true;
    851e:	2001      	movs	r0, #1
    8520:	e7f5      	b.n	850e <sd_mmc_spi_read_word+0x46>
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	200003d3 	.word	0x200003d3
    8528:	200003cc 	.word	0x200003cc
    852c:	200003dc 	.word	0x200003dc
    8530:	00008e61 	.word	0x00008e61
    8534:	00008091 	.word	0x00008091
    8538:	200003c0 	.word	0x200003c0
    853c:	00007889 	.word	0x00007889

00008540 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    8540:	b5f0      	push	{r4, r5, r6, r7, lr}
    8542:	46de      	mov	lr, fp
    8544:	4657      	mov	r7, sl
    8546:	4646      	mov	r6, r8
    8548:	b5c0      	push	{r6, r7, lr}
    854a:	b082      	sub	sp, #8
    854c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    854e:	2200      	movs	r2, #0
    8550:	4b17      	ldr	r3, [pc, #92]	; (85b0 <sd_mmc_spi_start_read_blocks+0x70>)
    8552:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    8554:	1e4c      	subs	r4, r1, #1
    8556:	b2a4      	uxth	r4, r4
    8558:	2900      	cmp	r1, #0
    855a:	d026      	beq.n	85aa <sd_mmc_spi_start_read_blocks+0x6a>
    855c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    855e:	4b15      	ldr	r3, [pc, #84]	; (85b4 <sd_mmc_spi_start_read_blocks+0x74>)
    8560:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    8562:	4f15      	ldr	r7, [pc, #84]	; (85b8 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    8564:	47d0      	blx	sl
    8566:	4680      	mov	r8, r0
    8568:	2800      	cmp	r0, #0
    856a:	d017      	beq.n	859c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    856c:	883a      	ldrh	r2, [r7, #0]
    856e:	465b      	mov	r3, fp
    8570:	1999      	adds	r1, r3, r6
    8572:	23ff      	movs	r3, #255	; 0xff
    8574:	4811      	ldr	r0, [pc, #68]	; (85bc <sd_mmc_spi_start_read_blocks+0x7c>)
    8576:	4d12      	ldr	r5, [pc, #72]	; (85c0 <sd_mmc_spi_start_read_blocks+0x80>)
    8578:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    857a:	883b      	ldrh	r3, [r7, #0]
    857c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    857e:	4a11      	ldr	r2, [pc, #68]	; (85c4 <sd_mmc_spi_start_read_blocks+0x84>)
    8580:	6811      	ldr	r1, [r2, #0]
    8582:	468c      	mov	ip, r1
    8584:	4463      	add	r3, ip
    8586:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8588:	23ff      	movs	r3, #255	; 0xff
    858a:	2202      	movs	r2, #2
    858c:	a901      	add	r1, sp, #4
    858e:	480b      	ldr	r0, [pc, #44]	; (85bc <sd_mmc_spi_start_read_blocks+0x7c>)
    8590:	47a8      	blx	r5
	while (nb_block--) {
    8592:	3c01      	subs	r4, #1
    8594:	b2a4      	uxth	r4, r4
    8596:	4b0c      	ldr	r3, [pc, #48]	; (85c8 <sd_mmc_spi_start_read_blocks+0x88>)
    8598:	429c      	cmp	r4, r3
    859a:	d1e3      	bne.n	8564 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    859c:	4640      	mov	r0, r8
    859e:	b002      	add	sp, #8
    85a0:	bc1c      	pop	{r2, r3, r4}
    85a2:	4690      	mov	r8, r2
    85a4:	469a      	mov	sl, r3
    85a6:	46a3      	mov	fp, r4
    85a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    85aa:	2301      	movs	r3, #1
    85ac:	4698      	mov	r8, r3
    85ae:	e7f5      	b.n	859c <sd_mmc_spi_start_read_blocks+0x5c>
    85b0:	200003d3 	.word	0x200003d3
    85b4:	00008091 	.word	0x00008091
    85b8:	200003cc 	.word	0x200003cc
    85bc:	200003c0 	.word	0x200003c0
    85c0:	00007889 	.word	0x00007889
    85c4:	200003dc 	.word	0x200003dc
    85c8:	0000ffff 	.word	0x0000ffff

000085cc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    85cc:	2001      	movs	r0, #1
    85ce:	4770      	bx	lr

000085d0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    85d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85d2:	46c6      	mov	lr, r8
    85d4:	b500      	push	{lr}
    85d6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    85d8:	2200      	movs	r2, #0
    85da:	4b15      	ldr	r3, [pc, #84]	; (8630 <sd_mmc_spi_start_write_blocks+0x60>)
    85dc:	701a      	strb	r2, [r3, #0]
	pos = 0;
    85de:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    85e0:	4f14      	ldr	r7, [pc, #80]	; (8634 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    85e2:	4e15      	ldr	r6, [pc, #84]	; (8638 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    85e4:	e000      	b.n	85e8 <sd_mmc_spi_start_write_blocks+0x18>
{
    85e6:	0021      	movs	r1, r4
	while (nb_block--) {
    85e8:	1e4c      	subs	r4, r1, #1
    85ea:	b2a4      	uxth	r4, r4
    85ec:	2900      	cmp	r1, #0
    85ee:	d01b      	beq.n	8628 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    85f0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    85f2:	8832      	ldrh	r2, [r6, #0]
    85f4:	4643      	mov	r3, r8
    85f6:	1959      	adds	r1, r3, r5
    85f8:	4810      	ldr	r0, [pc, #64]	; (863c <sd_mmc_spi_start_write_blocks+0x6c>)
    85fa:	4b11      	ldr	r3, [pc, #68]	; (8640 <sd_mmc_spi_start_write_blocks+0x70>)
    85fc:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    85fe:	8833      	ldrh	r3, [r6, #0]
    8600:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    8602:	4a10      	ldr	r2, [pc, #64]	; (8644 <sd_mmc_spi_start_write_blocks+0x74>)
    8604:	6811      	ldr	r1, [r2, #0]
    8606:	468c      	mov	ip, r1
    8608:	4463      	add	r3, ip
    860a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    860c:	4b0e      	ldr	r3, [pc, #56]	; (8648 <sd_mmc_spi_start_write_blocks+0x78>)
    860e:	4798      	blx	r3
    8610:	2800      	cmp	r0, #0
    8612:	d00a      	beq.n	862a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    8614:	2c00      	cmp	r4, #0
    8616:	d0e6      	beq.n	85e6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    8618:	4b0c      	ldr	r3, [pc, #48]	; (864c <sd_mmc_spi_start_write_blocks+0x7c>)
    861a:	4798      	blx	r3
    861c:	2800      	cmp	r0, #0
    861e:	d1e2      	bne.n	85e6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8620:	2205      	movs	r2, #5
    8622:	4b03      	ldr	r3, [pc, #12]	; (8630 <sd_mmc_spi_start_write_blocks+0x60>)
    8624:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    8626:	e000      	b.n	862a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    8628:	2001      	movs	r0, #1
}
    862a:	bc04      	pop	{r2}
    862c:	4690      	mov	r8, r2
    862e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8630:	200003d3 	.word	0x200003d3
    8634:	00007f6d 	.word	0x00007f6d
    8638:	200003cc 	.word	0x200003cc
    863c:	200003c0 	.word	0x200003c0
    8640:	00007a95 	.word	0x00007a95
    8644:	200003dc 	.word	0x200003dc
    8648:	000080fd 	.word	0x000080fd
    864c:	00007fb5 	.word	0x00007fb5

00008650 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    8650:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    8652:	4b05      	ldr	r3, [pc, #20]	; (8668 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    8654:	4798      	blx	r3
    8656:	2800      	cmp	r0, #0
    8658:	d103      	bne.n	8662 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    865a:	2205      	movs	r2, #5
    865c:	4b03      	ldr	r3, [pc, #12]	; (866c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    865e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    8660:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    8662:	4b03      	ldr	r3, [pc, #12]	; (8670 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    8664:	4798      	blx	r3
    8666:	e7fb      	b.n	8660 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    8668:	00007fb5 	.word	0x00007fb5
    866c:	200003d3 	.word	0x200003d3
    8670:	00008019 	.word	0x00008019

00008674 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    8674:	2001      	movs	r0, #1
    8676:	4770      	bx	lr

00008678 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    8678:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    867a:	2301      	movs	r3, #1
    867c:	2800      	cmp	r0, #0
    867e:	d001      	beq.n	8684 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8680:	0018      	movs	r0, r3
    8682:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    8684:	4b01      	ldr	r3, [pc, #4]	; (868c <mem_test_unit_ready+0x14>)
    8686:	4798      	blx	r3
    8688:	0003      	movs	r3, r0
    868a:	e7f9      	b.n	8680 <mem_test_unit_ready+0x8>
    868c:	00007ced 	.word	0x00007ced

00008690 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    8690:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8692:	2301      	movs	r3, #1
    8694:	2800      	cmp	r0, #0
    8696:	d001      	beq.n	869c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8698:	0018      	movs	r0, r3
    869a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    869c:	0008      	movs	r0, r1
    869e:	4b02      	ldr	r3, [pc, #8]	; (86a8 <mem_read_capacity+0x18>)
    86a0:	4798      	blx	r3
    86a2:	0003      	movs	r3, r0
    86a4:	e7f8      	b.n	8698 <mem_read_capacity+0x8>
    86a6:	46c0      	nop			; (mov r8, r8)
    86a8:	00007d1d 	.word	0x00007d1d

000086ac <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    86ac:	4243      	negs	r3, r0
    86ae:	4158      	adcs	r0, r3
    86b0:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    86b2:	4770      	bx	lr

000086b4 <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    86b4:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    86b6:	2000      	movs	r0, #0
    86b8:	2b00      	cmp	r3, #0
    86ba:	d101      	bne.n	86c0 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    86bc:	3001      	adds	r0, #1
    86be:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    86c0:	4770      	bx	lr
	...

000086c4 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    86c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    86c6:	2301      	movs	r3, #1
    86c8:	2800      	cmp	r0, #0
    86ca:	d001      	beq.n	86d0 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    86cc:	0018      	movs	r0, r3
    86ce:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    86d0:	4b01      	ldr	r3, [pc, #4]	; (86d8 <mem_wr_protect+0x14>)
    86d2:	4798      	blx	r3
    86d4:	0003      	movs	r3, r0
    86d6:	e7f9      	b.n	86cc <mem_wr_protect+0x8>
    86d8:	00007d2d 	.word	0x00007d2d

000086dc <mem_removal>:


bool mem_removal(U8 lun)
{
    86dc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    86de:	2301      	movs	r3, #1
    86e0:	2800      	cmp	r0, #0
    86e2:	d001      	beq.n	86e8 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    86e4:	0018      	movs	r0, r3
    86e6:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    86e8:	4b01      	ldr	r3, [pc, #4]	; (86f0 <mem_removal+0x14>)
    86ea:	4798      	blx	r3
    86ec:	0003      	movs	r3, r0
    86ee:	e7f9      	b.n	86e4 <mem_removal+0x8>
    86f0:	00007d3d 	.word	0x00007d3d

000086f4 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    86f4:	2800      	cmp	r0, #0
    86f6:	d101      	bne.n	86fc <mem_name+0x8>
    86f8:	4801      	ldr	r0, [pc, #4]	; (8700 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    86fa:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    86fc:	2000      	movs	r0, #0
    86fe:	e7fc      	b.n	86fa <mem_name+0x6>
    8700:	0000b03c 	.word	0x0000b03c

00008704 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    8704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8706:	0005      	movs	r5, r0
    8708:	000e      	movs	r6, r1
    870a:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    870c:	4b07      	ldr	r3, [pc, #28]	; (872c <memory_2_usb+0x28>)
    870e:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    8710:	2401      	movs	r4, #1
    8712:	2d00      	cmp	r5, #0
    8714:	d003      	beq.n	871e <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    8716:	4b06      	ldr	r3, [pc, #24]	; (8730 <memory_2_usb+0x2c>)
    8718:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    871a:	0020      	movs	r0, r4
    871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    871e:	0039      	movs	r1, r7
    8720:	0030      	movs	r0, r6
    8722:	4b04      	ldr	r3, [pc, #16]	; (8734 <memory_2_usb+0x30>)
    8724:	4798      	blx	r3
    8726:	0004      	movs	r4, r0
    8728:	e7f5      	b.n	8716 <memory_2_usb+0x12>
    872a:	46c0      	nop			; (mov r8, r8)
    872c:	000061d5 	.word	0x000061d5
    8730:	000061d7 	.word	0x000061d7
    8734:	00007df1 	.word	0x00007df1

00008738 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    8738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    873a:	0005      	movs	r5, r0
    873c:	000e      	movs	r6, r1
    873e:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    8740:	4b07      	ldr	r3, [pc, #28]	; (8760 <usb_2_memory+0x28>)
    8742:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    8744:	2401      	movs	r4, #1
    8746:	2d00      	cmp	r5, #0
    8748:	d003      	beq.n	8752 <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    874a:	4b06      	ldr	r3, [pc, #24]	; (8764 <usb_2_memory+0x2c>)
    874c:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    874e:	0020      	movs	r0, r4
    8750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    8752:	0039      	movs	r1, r7
    8754:	0030      	movs	r0, r6
    8756:	4b04      	ldr	r3, [pc, #16]	; (8768 <usb_2_memory+0x30>)
    8758:	4798      	blx	r3
    875a:	0004      	movs	r4, r0
    875c:	e7f5      	b.n	874a <usb_2_memory+0x12>
    875e:	46c0      	nop			; (mov r8, r8)
    8760:	000061d9 	.word	0x000061d9
    8764:	000061db 	.word	0x000061db
    8768:	00007ea9 	.word	0x00007ea9

0000876c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    876e:	0005      	movs	r5, r0
    8770:	000e      	movs	r6, r1
    8772:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    8774:	4b07      	ldr	r3, [pc, #28]	; (8794 <memory_2_ram+0x28>)
    8776:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8778:	2401      	movs	r4, #1
    877a:	2d00      	cmp	r5, #0
    877c:	d003      	beq.n	8786 <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    877e:	4b06      	ldr	r3, [pc, #24]	; (8798 <memory_2_ram+0x2c>)
    8780:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8782:	0020      	movs	r0, r4
    8784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8786:	0039      	movs	r1, r7
    8788:	0030      	movs	r0, r6
    878a:	4b04      	ldr	r3, [pc, #16]	; (879c <memory_2_ram+0x30>)
    878c:	4798      	blx	r3
    878e:	0004      	movs	r4, r0
    8790:	e7f5      	b.n	877e <memory_2_ram+0x12>
    8792:	46c0      	nop			; (mov r8, r8)
    8794:	000061d5 	.word	0x000061d5
    8798:	000061d7 	.word	0x000061d7
    879c:	00007f01 	.word	0x00007f01

000087a0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    87a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87a2:	0005      	movs	r5, r0
    87a4:	000e      	movs	r6, r1
    87a6:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    87a8:	4b07      	ldr	r3, [pc, #28]	; (87c8 <ram_2_memory+0x28>)
    87aa:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    87ac:	2401      	movs	r4, #1
    87ae:	2d00      	cmp	r5, #0
    87b0:	d003      	beq.n	87ba <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    87b2:	4b06      	ldr	r3, [pc, #24]	; (87cc <ram_2_memory+0x2c>)
    87b4:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    87b6:	0020      	movs	r0, r4
    87b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    87ba:	0039      	movs	r1, r7
    87bc:	0030      	movs	r0, r6
    87be:	4b04      	ldr	r3, [pc, #16]	; (87d0 <ram_2_memory+0x30>)
    87c0:	4798      	blx	r3
    87c2:	0004      	movs	r4, r0
    87c4:	e7f5      	b.n	87b2 <ram_2_memory+0x12>
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	000061d9 	.word	0x000061d9
    87cc:	000061db 	.word	0x000061db
    87d0:	00007f59 	.word	0x00007f59

000087d4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    87d4:	4b0c      	ldr	r3, [pc, #48]	; (8808 <cpu_irq_enter_critical+0x34>)
    87d6:	681b      	ldr	r3, [r3, #0]
    87d8:	2b00      	cmp	r3, #0
    87da:	d106      	bne.n	87ea <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    87dc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    87e0:	2b00      	cmp	r3, #0
    87e2:	d007      	beq.n	87f4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    87e4:	2200      	movs	r2, #0
    87e6:	4b09      	ldr	r3, [pc, #36]	; (880c <cpu_irq_enter_critical+0x38>)
    87e8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    87ea:	4a07      	ldr	r2, [pc, #28]	; (8808 <cpu_irq_enter_critical+0x34>)
    87ec:	6813      	ldr	r3, [r2, #0]
    87ee:	3301      	adds	r3, #1
    87f0:	6013      	str	r3, [r2, #0]
}
    87f2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    87f4:	b672      	cpsid	i
    87f6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    87fa:	2200      	movs	r2, #0
    87fc:	4b04      	ldr	r3, [pc, #16]	; (8810 <cpu_irq_enter_critical+0x3c>)
    87fe:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8800:	3201      	adds	r2, #1
    8802:	4b02      	ldr	r3, [pc, #8]	; (880c <cpu_irq_enter_critical+0x38>)
    8804:	701a      	strb	r2, [r3, #0]
    8806:	e7f0      	b.n	87ea <cpu_irq_enter_critical+0x16>
    8808:	200003e4 	.word	0x200003e4
    880c:	200003e8 	.word	0x200003e8
    8810:	20000125 	.word	0x20000125

00008814 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8814:	4b08      	ldr	r3, [pc, #32]	; (8838 <cpu_irq_leave_critical+0x24>)
    8816:	681a      	ldr	r2, [r3, #0]
    8818:	3a01      	subs	r2, #1
    881a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    881c:	681b      	ldr	r3, [r3, #0]
    881e:	2b00      	cmp	r3, #0
    8820:	d109      	bne.n	8836 <cpu_irq_leave_critical+0x22>
    8822:	4b06      	ldr	r3, [pc, #24]	; (883c <cpu_irq_leave_critical+0x28>)
    8824:	781b      	ldrb	r3, [r3, #0]
    8826:	2b00      	cmp	r3, #0
    8828:	d005      	beq.n	8836 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    882a:	2201      	movs	r2, #1
    882c:	4b04      	ldr	r3, [pc, #16]	; (8840 <cpu_irq_leave_critical+0x2c>)
    882e:	701a      	strb	r2, [r3, #0]
    8830:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8834:	b662      	cpsie	i
	}
}
    8836:	4770      	bx	lr
    8838:	200003e4 	.word	0x200003e4
    883c:	200003e8 	.word	0x200003e8
    8840:	20000125 	.word	0x20000125

00008844 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8844:	b5f0      	push	{r4, r5, r6, r7, lr}
    8846:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    8848:	ac01      	add	r4, sp, #4
    884a:	2501      	movs	r5, #1
    884c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    884e:	2700      	movs	r7, #0
    8850:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8852:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    8854:	0021      	movs	r1, r4
    8856:	203e      	movs	r0, #62	; 0x3e
    8858:	4e06      	ldr	r6, [pc, #24]	; (8874 <system_board_init+0x30>)
    885a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    885c:	2280      	movs	r2, #128	; 0x80
    885e:	05d2      	lsls	r2, r2, #23
    8860:	4b05      	ldr	r3, [pc, #20]	; (8878 <system_board_init+0x34>)
    8862:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8864:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    8866:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    8868:	0021      	movs	r1, r4
    886a:	200f      	movs	r0, #15
    886c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    886e:	b003      	add	sp, #12
    8870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8872:	46c0      	nop			; (mov r8, r8)
    8874:	0000887d 	.word	0x0000887d
    8878:	41004480 	.word	0x41004480

0000887c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    887c:	b500      	push	{lr}
    887e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8880:	ab01      	add	r3, sp, #4
    8882:	2280      	movs	r2, #128	; 0x80
    8884:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8886:	780a      	ldrb	r2, [r1, #0]
    8888:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    888a:	784a      	ldrb	r2, [r1, #1]
    888c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    888e:	788a      	ldrb	r2, [r1, #2]
    8890:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8892:	0019      	movs	r1, r3
    8894:	4b01      	ldr	r3, [pc, #4]	; (889c <port_pin_set_config+0x20>)
    8896:	4798      	blx	r3
}
    8898:	b003      	add	sp, #12
    889a:	bd00      	pop	{pc}
    889c:	00008bd1 	.word	0x00008bd1

000088a0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    88a0:	4a06      	ldr	r2, [pc, #24]	; (88bc <system_gclk_init+0x1c>)
    88a2:	6993      	ldr	r3, [r2, #24]
    88a4:	2108      	movs	r1, #8
    88a6:	430b      	orrs	r3, r1
    88a8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    88aa:	2201      	movs	r2, #1
    88ac:	4b04      	ldr	r3, [pc, #16]	; (88c0 <system_gclk_init+0x20>)
    88ae:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    88b0:	0019      	movs	r1, r3
    88b2:	780b      	ldrb	r3, [r1, #0]
    88b4:	4213      	tst	r3, r2
    88b6:	d1fc      	bne.n	88b2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    88b8:	4770      	bx	lr
    88ba:	46c0      	nop			; (mov r8, r8)
    88bc:	40000400 	.word	0x40000400
    88c0:	40000c00 	.word	0x40000c00

000088c4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    88c4:	b570      	push	{r4, r5, r6, lr}
    88c6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    88c8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    88ca:	780d      	ldrb	r5, [r1, #0]
    88cc:	022d      	lsls	r5, r5, #8
    88ce:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    88d0:	784b      	ldrb	r3, [r1, #1]
    88d2:	2b00      	cmp	r3, #0
    88d4:	d002      	beq.n	88dc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    88d6:	2380      	movs	r3, #128	; 0x80
    88d8:	02db      	lsls	r3, r3, #11
    88da:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    88dc:	7a4b      	ldrb	r3, [r1, #9]
    88de:	2b00      	cmp	r3, #0
    88e0:	d002      	beq.n	88e8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    88e2:	2380      	movs	r3, #128	; 0x80
    88e4:	031b      	lsls	r3, r3, #12
    88e6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    88e8:	6848      	ldr	r0, [r1, #4]
    88ea:	2801      	cmp	r0, #1
    88ec:	d910      	bls.n	8910 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    88ee:	1e43      	subs	r3, r0, #1
    88f0:	4218      	tst	r0, r3
    88f2:	d134      	bne.n	895e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    88f4:	2802      	cmp	r0, #2
    88f6:	d930      	bls.n	895a <system_gclk_gen_set_config+0x96>
    88f8:	2302      	movs	r3, #2
    88fa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    88fc:	3201      	adds	r2, #1
						mask <<= 1) {
    88fe:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8900:	4298      	cmp	r0, r3
    8902:	d8fb      	bhi.n	88fc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8904:	0212      	lsls	r2, r2, #8
    8906:	4332      	orrs	r2, r6
    8908:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    890a:	2380      	movs	r3, #128	; 0x80
    890c:	035b      	lsls	r3, r3, #13
    890e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8910:	7a0b      	ldrb	r3, [r1, #8]
    8912:	2b00      	cmp	r3, #0
    8914:	d002      	beq.n	891c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8916:	2380      	movs	r3, #128	; 0x80
    8918:	039b      	lsls	r3, r3, #14
    891a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    891c:	4a13      	ldr	r2, [pc, #76]	; (896c <system_gclk_gen_set_config+0xa8>)
    891e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8920:	b25b      	sxtb	r3, r3
    8922:	2b00      	cmp	r3, #0
    8924:	dbfb      	blt.n	891e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8926:	4b12      	ldr	r3, [pc, #72]	; (8970 <system_gclk_gen_set_config+0xac>)
    8928:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    892a:	4b12      	ldr	r3, [pc, #72]	; (8974 <system_gclk_gen_set_config+0xb0>)
    892c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    892e:	4a0f      	ldr	r2, [pc, #60]	; (896c <system_gclk_gen_set_config+0xa8>)
    8930:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8932:	b25b      	sxtb	r3, r3
    8934:	2b00      	cmp	r3, #0
    8936:	dbfb      	blt.n	8930 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8938:	4b0c      	ldr	r3, [pc, #48]	; (896c <system_gclk_gen_set_config+0xa8>)
    893a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    893c:	001a      	movs	r2, r3
    893e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8940:	b25b      	sxtb	r3, r3
    8942:	2b00      	cmp	r3, #0
    8944:	dbfb      	blt.n	893e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8946:	4a09      	ldr	r2, [pc, #36]	; (896c <system_gclk_gen_set_config+0xa8>)
    8948:	6853      	ldr	r3, [r2, #4]
    894a:	2180      	movs	r1, #128	; 0x80
    894c:	0249      	lsls	r1, r1, #9
    894e:	400b      	ands	r3, r1
    8950:	431d      	orrs	r5, r3
    8952:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8954:	4b08      	ldr	r3, [pc, #32]	; (8978 <system_gclk_gen_set_config+0xb4>)
    8956:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8958:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    895a:	2200      	movs	r2, #0
    895c:	e7d2      	b.n	8904 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    895e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8960:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8962:	2380      	movs	r3, #128	; 0x80
    8964:	029b      	lsls	r3, r3, #10
    8966:	431d      	orrs	r5, r3
    8968:	e7d2      	b.n	8910 <system_gclk_gen_set_config+0x4c>
    896a:	46c0      	nop			; (mov r8, r8)
    896c:	40000c00 	.word	0x40000c00
    8970:	000087d5 	.word	0x000087d5
    8974:	40000c08 	.word	0x40000c08
    8978:	00008815 	.word	0x00008815

0000897c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    897c:	b510      	push	{r4, lr}
    897e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8980:	4a0b      	ldr	r2, [pc, #44]	; (89b0 <system_gclk_gen_enable+0x34>)
    8982:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8984:	b25b      	sxtb	r3, r3
    8986:	2b00      	cmp	r3, #0
    8988:	dbfb      	blt.n	8982 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    898a:	4b0a      	ldr	r3, [pc, #40]	; (89b4 <system_gclk_gen_enable+0x38>)
    898c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    898e:	4b0a      	ldr	r3, [pc, #40]	; (89b8 <system_gclk_gen_enable+0x3c>)
    8990:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8992:	4a07      	ldr	r2, [pc, #28]	; (89b0 <system_gclk_gen_enable+0x34>)
    8994:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8996:	b25b      	sxtb	r3, r3
    8998:	2b00      	cmp	r3, #0
    899a:	dbfb      	blt.n	8994 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    899c:	4a04      	ldr	r2, [pc, #16]	; (89b0 <system_gclk_gen_enable+0x34>)
    899e:	6851      	ldr	r1, [r2, #4]
    89a0:	2380      	movs	r3, #128	; 0x80
    89a2:	025b      	lsls	r3, r3, #9
    89a4:	430b      	orrs	r3, r1
    89a6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    89a8:	4b04      	ldr	r3, [pc, #16]	; (89bc <system_gclk_gen_enable+0x40>)
    89aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    89ac:	bd10      	pop	{r4, pc}
    89ae:	46c0      	nop			; (mov r8, r8)
    89b0:	40000c00 	.word	0x40000c00
    89b4:	000087d5 	.word	0x000087d5
    89b8:	40000c04 	.word	0x40000c04
    89bc:	00008815 	.word	0x00008815

000089c0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    89c0:	b570      	push	{r4, r5, r6, lr}
    89c2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89c4:	4a1a      	ldr	r2, [pc, #104]	; (8a30 <system_gclk_gen_get_hz+0x70>)
    89c6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    89c8:	b25b      	sxtb	r3, r3
    89ca:	2b00      	cmp	r3, #0
    89cc:	dbfb      	blt.n	89c6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    89ce:	4b19      	ldr	r3, [pc, #100]	; (8a34 <system_gclk_gen_get_hz+0x74>)
    89d0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    89d2:	4b19      	ldr	r3, [pc, #100]	; (8a38 <system_gclk_gen_get_hz+0x78>)
    89d4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89d6:	4a16      	ldr	r2, [pc, #88]	; (8a30 <system_gclk_gen_get_hz+0x70>)
    89d8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    89da:	b25b      	sxtb	r3, r3
    89dc:	2b00      	cmp	r3, #0
    89de:	dbfb      	blt.n	89d8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    89e0:	4e13      	ldr	r6, [pc, #76]	; (8a30 <system_gclk_gen_get_hz+0x70>)
    89e2:	6870      	ldr	r0, [r6, #4]
    89e4:	04c0      	lsls	r0, r0, #19
    89e6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    89e8:	4b14      	ldr	r3, [pc, #80]	; (8a3c <system_gclk_gen_get_hz+0x7c>)
    89ea:	4798      	blx	r3
    89ec:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    89ee:	4b12      	ldr	r3, [pc, #72]	; (8a38 <system_gclk_gen_get_hz+0x78>)
    89f0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    89f2:	6876      	ldr	r6, [r6, #4]
    89f4:	02f6      	lsls	r6, r6, #11
    89f6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    89f8:	4b11      	ldr	r3, [pc, #68]	; (8a40 <system_gclk_gen_get_hz+0x80>)
    89fa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89fc:	4a0c      	ldr	r2, [pc, #48]	; (8a30 <system_gclk_gen_get_hz+0x70>)
    89fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8a00:	b25b      	sxtb	r3, r3
    8a02:	2b00      	cmp	r3, #0
    8a04:	dbfb      	blt.n	89fe <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8a06:	4b0a      	ldr	r3, [pc, #40]	; (8a30 <system_gclk_gen_get_hz+0x70>)
    8a08:	689c      	ldr	r4, [r3, #8]
    8a0a:	0224      	lsls	r4, r4, #8
    8a0c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8a0e:	4b0d      	ldr	r3, [pc, #52]	; (8a44 <system_gclk_gen_get_hz+0x84>)
    8a10:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8a12:	2e00      	cmp	r6, #0
    8a14:	d107      	bne.n	8a26 <system_gclk_gen_get_hz+0x66>
    8a16:	2c01      	cmp	r4, #1
    8a18:	d907      	bls.n	8a2a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8a1a:	0021      	movs	r1, r4
    8a1c:	0028      	movs	r0, r5
    8a1e:	4b0a      	ldr	r3, [pc, #40]	; (8a48 <system_gclk_gen_get_hz+0x88>)
    8a20:	4798      	blx	r3
    8a22:	0005      	movs	r5, r0
    8a24:	e001      	b.n	8a2a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8a26:	3401      	adds	r4, #1
    8a28:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8a2a:	0028      	movs	r0, r5
    8a2c:	bd70      	pop	{r4, r5, r6, pc}
    8a2e:	46c0      	nop			; (mov r8, r8)
    8a30:	40000c00 	.word	0x40000c00
    8a34:	000087d5 	.word	0x000087d5
    8a38:	40000c04 	.word	0x40000c04
    8a3c:	00002e65 	.word	0x00002e65
    8a40:	40000c08 	.word	0x40000c08
    8a44:	00008815 	.word	0x00008815
    8a48:	00008d55 	.word	0x00008d55

00008a4c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8a4c:	b510      	push	{r4, lr}
    8a4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8a50:	4b06      	ldr	r3, [pc, #24]	; (8a6c <system_gclk_chan_enable+0x20>)
    8a52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8a54:	4b06      	ldr	r3, [pc, #24]	; (8a70 <system_gclk_chan_enable+0x24>)
    8a56:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8a58:	4a06      	ldr	r2, [pc, #24]	; (8a74 <system_gclk_chan_enable+0x28>)
    8a5a:	8853      	ldrh	r3, [r2, #2]
    8a5c:	2180      	movs	r1, #128	; 0x80
    8a5e:	01c9      	lsls	r1, r1, #7
    8a60:	430b      	orrs	r3, r1
    8a62:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8a64:	4b04      	ldr	r3, [pc, #16]	; (8a78 <system_gclk_chan_enable+0x2c>)
    8a66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8a68:	bd10      	pop	{r4, pc}
    8a6a:	46c0      	nop			; (mov r8, r8)
    8a6c:	000087d5 	.word	0x000087d5
    8a70:	40000c02 	.word	0x40000c02
    8a74:	40000c00 	.word	0x40000c00
    8a78:	00008815 	.word	0x00008815

00008a7c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8a7c:	b510      	push	{r4, lr}
    8a7e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8a80:	4b0f      	ldr	r3, [pc, #60]	; (8ac0 <system_gclk_chan_disable+0x44>)
    8a82:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8a84:	4b0f      	ldr	r3, [pc, #60]	; (8ac4 <system_gclk_chan_disable+0x48>)
    8a86:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8a88:	4a0f      	ldr	r2, [pc, #60]	; (8ac8 <system_gclk_chan_disable+0x4c>)
    8a8a:	8853      	ldrh	r3, [r2, #2]
    8a8c:	051b      	lsls	r3, r3, #20
    8a8e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8a90:	8853      	ldrh	r3, [r2, #2]
    8a92:	490e      	ldr	r1, [pc, #56]	; (8acc <system_gclk_chan_disable+0x50>)
    8a94:	400b      	ands	r3, r1
    8a96:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8a98:	8853      	ldrh	r3, [r2, #2]
    8a9a:	490d      	ldr	r1, [pc, #52]	; (8ad0 <system_gclk_chan_disable+0x54>)
    8a9c:	400b      	ands	r3, r1
    8a9e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8aa0:	0011      	movs	r1, r2
    8aa2:	2280      	movs	r2, #128	; 0x80
    8aa4:	01d2      	lsls	r2, r2, #7
    8aa6:	884b      	ldrh	r3, [r1, #2]
    8aa8:	4213      	tst	r3, r2
    8aaa:	d1fc      	bne.n	8aa6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8aac:	4906      	ldr	r1, [pc, #24]	; (8ac8 <system_gclk_chan_disable+0x4c>)
    8aae:	884a      	ldrh	r2, [r1, #2]
    8ab0:	0203      	lsls	r3, r0, #8
    8ab2:	4806      	ldr	r0, [pc, #24]	; (8acc <system_gclk_chan_disable+0x50>)
    8ab4:	4002      	ands	r2, r0
    8ab6:	4313      	orrs	r3, r2
    8ab8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8aba:	4b06      	ldr	r3, [pc, #24]	; (8ad4 <system_gclk_chan_disable+0x58>)
    8abc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8abe:	bd10      	pop	{r4, pc}
    8ac0:	000087d5 	.word	0x000087d5
    8ac4:	40000c02 	.word	0x40000c02
    8ac8:	40000c00 	.word	0x40000c00
    8acc:	fffff0ff 	.word	0xfffff0ff
    8ad0:	ffffbfff 	.word	0xffffbfff
    8ad4:	00008815 	.word	0x00008815

00008ad8 <system_gclk_chan_set_config>:
{
    8ad8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8ada:	780c      	ldrb	r4, [r1, #0]
    8adc:	0224      	lsls	r4, r4, #8
    8ade:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8ae0:	4b02      	ldr	r3, [pc, #8]	; (8aec <system_gclk_chan_set_config+0x14>)
    8ae2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8ae4:	b2a4      	uxth	r4, r4
    8ae6:	4b02      	ldr	r3, [pc, #8]	; (8af0 <system_gclk_chan_set_config+0x18>)
    8ae8:	805c      	strh	r4, [r3, #2]
}
    8aea:	bd10      	pop	{r4, pc}
    8aec:	00008a7d 	.word	0x00008a7d
    8af0:	40000c00 	.word	0x40000c00

00008af4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8af4:	b510      	push	{r4, lr}
    8af6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8af8:	4b06      	ldr	r3, [pc, #24]	; (8b14 <system_gclk_chan_get_hz+0x20>)
    8afa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8afc:	4b06      	ldr	r3, [pc, #24]	; (8b18 <system_gclk_chan_get_hz+0x24>)
    8afe:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8b00:	4b06      	ldr	r3, [pc, #24]	; (8b1c <system_gclk_chan_get_hz+0x28>)
    8b02:	885c      	ldrh	r4, [r3, #2]
    8b04:	0524      	lsls	r4, r4, #20
    8b06:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8b08:	4b05      	ldr	r3, [pc, #20]	; (8b20 <system_gclk_chan_get_hz+0x2c>)
    8b0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8b0c:	0020      	movs	r0, r4
    8b0e:	4b05      	ldr	r3, [pc, #20]	; (8b24 <system_gclk_chan_get_hz+0x30>)
    8b10:	4798      	blx	r3
}
    8b12:	bd10      	pop	{r4, pc}
    8b14:	000087d5 	.word	0x000087d5
    8b18:	40000c02 	.word	0x40000c02
    8b1c:	40000c00 	.word	0x40000c00
    8b20:	00008815 	.word	0x00008815
    8b24:	000089c1 	.word	0x000089c1

00008b28 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8b28:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8b2a:	78d3      	ldrb	r3, [r2, #3]
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	d135      	bne.n	8b9c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8b30:	7813      	ldrb	r3, [r2, #0]
    8b32:	2b80      	cmp	r3, #128	; 0x80
    8b34:	d029      	beq.n	8b8a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8b36:	061b      	lsls	r3, r3, #24
    8b38:	2480      	movs	r4, #128	; 0x80
    8b3a:	0264      	lsls	r4, r4, #9
    8b3c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8b3e:	7854      	ldrb	r4, [r2, #1]
    8b40:	2502      	movs	r5, #2
    8b42:	43ac      	bics	r4, r5
    8b44:	d106      	bne.n	8b54 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8b46:	7894      	ldrb	r4, [r2, #2]
    8b48:	2c00      	cmp	r4, #0
    8b4a:	d120      	bne.n	8b8e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8b4c:	2480      	movs	r4, #128	; 0x80
    8b4e:	02a4      	lsls	r4, r4, #10
    8b50:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8b52:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8b54:	7854      	ldrb	r4, [r2, #1]
    8b56:	3c01      	subs	r4, #1
    8b58:	2c01      	cmp	r4, #1
    8b5a:	d91c      	bls.n	8b96 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8b5c:	040d      	lsls	r5, r1, #16
    8b5e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8b60:	24a0      	movs	r4, #160	; 0xa0
    8b62:	05e4      	lsls	r4, r4, #23
    8b64:	432c      	orrs	r4, r5
    8b66:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b68:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8b6a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8b6c:	24d0      	movs	r4, #208	; 0xd0
    8b6e:	0624      	lsls	r4, r4, #24
    8b70:	432c      	orrs	r4, r5
    8b72:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b74:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8b76:	78d4      	ldrb	r4, [r2, #3]
    8b78:	2c00      	cmp	r4, #0
    8b7a:	d122      	bne.n	8bc2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8b7c:	035b      	lsls	r3, r3, #13
    8b7e:	d51c      	bpl.n	8bba <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8b80:	7893      	ldrb	r3, [r2, #2]
    8b82:	2b01      	cmp	r3, #1
    8b84:	d01e      	beq.n	8bc4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8b86:	6141      	str	r1, [r0, #20]
    8b88:	e017      	b.n	8bba <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8b8a:	2300      	movs	r3, #0
    8b8c:	e7d7      	b.n	8b3e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8b8e:	24c0      	movs	r4, #192	; 0xc0
    8b90:	02e4      	lsls	r4, r4, #11
    8b92:	4323      	orrs	r3, r4
    8b94:	e7dd      	b.n	8b52 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8b96:	4c0d      	ldr	r4, [pc, #52]	; (8bcc <_system_pinmux_config+0xa4>)
    8b98:	4023      	ands	r3, r4
    8b9a:	e7df      	b.n	8b5c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8b9c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8b9e:	040c      	lsls	r4, r1, #16
    8ba0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8ba2:	23a0      	movs	r3, #160	; 0xa0
    8ba4:	05db      	lsls	r3, r3, #23
    8ba6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8ba8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8baa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8bac:	23d0      	movs	r3, #208	; 0xd0
    8bae:	061b      	lsls	r3, r3, #24
    8bb0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8bb2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8bb4:	78d3      	ldrb	r3, [r2, #3]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d103      	bne.n	8bc2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8bba:	7853      	ldrb	r3, [r2, #1]
    8bbc:	3b01      	subs	r3, #1
    8bbe:	2b01      	cmp	r3, #1
    8bc0:	d902      	bls.n	8bc8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8bc2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8bc4:	6181      	str	r1, [r0, #24]
    8bc6:	e7f8      	b.n	8bba <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8bc8:	6081      	str	r1, [r0, #8]
}
    8bca:	e7fa      	b.n	8bc2 <_system_pinmux_config+0x9a>
    8bcc:	fffbffff 	.word	0xfffbffff

00008bd0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8bd0:	b510      	push	{r4, lr}
    8bd2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8bd4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8bd6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8bd8:	2900      	cmp	r1, #0
    8bda:	d104      	bne.n	8be6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8bdc:	0943      	lsrs	r3, r0, #5
    8bde:	01db      	lsls	r3, r3, #7
    8be0:	4905      	ldr	r1, [pc, #20]	; (8bf8 <system_pinmux_pin_set_config+0x28>)
    8be2:	468c      	mov	ip, r1
    8be4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8be6:	241f      	movs	r4, #31
    8be8:	4020      	ands	r0, r4
    8bea:	2101      	movs	r1, #1
    8bec:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8bee:	0018      	movs	r0, r3
    8bf0:	4b02      	ldr	r3, [pc, #8]	; (8bfc <system_pinmux_pin_set_config+0x2c>)
    8bf2:	4798      	blx	r3
}
    8bf4:	bd10      	pop	{r4, pc}
    8bf6:	46c0      	nop			; (mov r8, r8)
    8bf8:	41004400 	.word	0x41004400
    8bfc:	00008b29 	.word	0x00008b29

00008c00 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8c00:	4770      	bx	lr
	...

00008c04 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8c04:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8c06:	4b05      	ldr	r3, [pc, #20]	; (8c1c <system_init+0x18>)
    8c08:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8c0a:	4b05      	ldr	r3, [pc, #20]	; (8c20 <system_init+0x1c>)
    8c0c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8c0e:	4b05      	ldr	r3, [pc, #20]	; (8c24 <system_init+0x20>)
    8c10:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8c12:	4b05      	ldr	r3, [pc, #20]	; (8c28 <system_init+0x24>)
    8c14:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8c16:	4b05      	ldr	r3, [pc, #20]	; (8c2c <system_init+0x28>)
    8c18:	4798      	blx	r3
}
    8c1a:	bd10      	pop	{r4, pc}
    8c1c:	000030e1 	.word	0x000030e1
    8c20:	00008845 	.word	0x00008845
    8c24:	00008c01 	.word	0x00008c01
    8c28:	000023f5 	.word	0x000023f5
    8c2c:	00008c01 	.word	0x00008c01

00008c30 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8c30:	e7fe      	b.n	8c30 <Dummy_Handler>
	...

00008c34 <Reset_Handler>:
{
    8c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8c36:	4a2a      	ldr	r2, [pc, #168]	; (8ce0 <Reset_Handler+0xac>)
    8c38:	4b2a      	ldr	r3, [pc, #168]	; (8ce4 <Reset_Handler+0xb0>)
    8c3a:	429a      	cmp	r2, r3
    8c3c:	d011      	beq.n	8c62 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8c3e:	001a      	movs	r2, r3
    8c40:	4b29      	ldr	r3, [pc, #164]	; (8ce8 <Reset_Handler+0xb4>)
    8c42:	429a      	cmp	r2, r3
    8c44:	d20d      	bcs.n	8c62 <Reset_Handler+0x2e>
    8c46:	4a29      	ldr	r2, [pc, #164]	; (8cec <Reset_Handler+0xb8>)
    8c48:	3303      	adds	r3, #3
    8c4a:	1a9b      	subs	r3, r3, r2
    8c4c:	089b      	lsrs	r3, r3, #2
    8c4e:	3301      	adds	r3, #1
    8c50:	009b      	lsls	r3, r3, #2
    8c52:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8c54:	4823      	ldr	r0, [pc, #140]	; (8ce4 <Reset_Handler+0xb0>)
    8c56:	4922      	ldr	r1, [pc, #136]	; (8ce0 <Reset_Handler+0xac>)
    8c58:	588c      	ldr	r4, [r1, r2]
    8c5a:	5084      	str	r4, [r0, r2]
    8c5c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8c5e:	429a      	cmp	r2, r3
    8c60:	d1fa      	bne.n	8c58 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8c62:	4a23      	ldr	r2, [pc, #140]	; (8cf0 <Reset_Handler+0xbc>)
    8c64:	4b23      	ldr	r3, [pc, #140]	; (8cf4 <Reset_Handler+0xc0>)
    8c66:	429a      	cmp	r2, r3
    8c68:	d20a      	bcs.n	8c80 <Reset_Handler+0x4c>
    8c6a:	43d3      	mvns	r3, r2
    8c6c:	4921      	ldr	r1, [pc, #132]	; (8cf4 <Reset_Handler+0xc0>)
    8c6e:	185b      	adds	r3, r3, r1
    8c70:	2103      	movs	r1, #3
    8c72:	438b      	bics	r3, r1
    8c74:	3304      	adds	r3, #4
    8c76:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8c78:	2100      	movs	r1, #0
    8c7a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8c7c:	4293      	cmp	r3, r2
    8c7e:	d1fc      	bne.n	8c7a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8c80:	4a1d      	ldr	r2, [pc, #116]	; (8cf8 <Reset_Handler+0xc4>)
    8c82:	21ff      	movs	r1, #255	; 0xff
    8c84:	4b1d      	ldr	r3, [pc, #116]	; (8cfc <Reset_Handler+0xc8>)
    8c86:	438b      	bics	r3, r1
    8c88:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8c8a:	39fd      	subs	r1, #253	; 0xfd
    8c8c:	2390      	movs	r3, #144	; 0x90
    8c8e:	005b      	lsls	r3, r3, #1
    8c90:	4a1b      	ldr	r2, [pc, #108]	; (8d00 <Reset_Handler+0xcc>)
    8c92:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8c94:	4a1b      	ldr	r2, [pc, #108]	; (8d04 <Reset_Handler+0xd0>)
    8c96:	78d3      	ldrb	r3, [r2, #3]
    8c98:	2503      	movs	r5, #3
    8c9a:	43ab      	bics	r3, r5
    8c9c:	2402      	movs	r4, #2
    8c9e:	4323      	orrs	r3, r4
    8ca0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8ca2:	78d3      	ldrb	r3, [r2, #3]
    8ca4:	270c      	movs	r7, #12
    8ca6:	43bb      	bics	r3, r7
    8ca8:	2608      	movs	r6, #8
    8caa:	4333      	orrs	r3, r6
    8cac:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8cae:	4b16      	ldr	r3, [pc, #88]	; (8d08 <Reset_Handler+0xd4>)
    8cb0:	7b98      	ldrb	r0, [r3, #14]
    8cb2:	2230      	movs	r2, #48	; 0x30
    8cb4:	4390      	bics	r0, r2
    8cb6:	2220      	movs	r2, #32
    8cb8:	4310      	orrs	r0, r2
    8cba:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8cbc:	7b99      	ldrb	r1, [r3, #14]
    8cbe:	43b9      	bics	r1, r7
    8cc0:	4331      	orrs	r1, r6
    8cc2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8cc4:	7b9a      	ldrb	r2, [r3, #14]
    8cc6:	43aa      	bics	r2, r5
    8cc8:	4322      	orrs	r2, r4
    8cca:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8ccc:	4a0f      	ldr	r2, [pc, #60]	; (8d0c <Reset_Handler+0xd8>)
    8cce:	6853      	ldr	r3, [r2, #4]
    8cd0:	2180      	movs	r1, #128	; 0x80
    8cd2:	430b      	orrs	r3, r1
    8cd4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8cd6:	4b0e      	ldr	r3, [pc, #56]	; (8d10 <Reset_Handler+0xdc>)
    8cd8:	4798      	blx	r3
        main();
    8cda:	4b0e      	ldr	r3, [pc, #56]	; (8d14 <Reset_Handler+0xe0>)
    8cdc:	4798      	blx	r3
    8cde:	e7fe      	b.n	8cde <Reset_Handler+0xaa>
    8ce0:	0000b114 	.word	0x0000b114
    8ce4:	20000000 	.word	0x20000000
    8ce8:	2000018c 	.word	0x2000018c
    8cec:	20000004 	.word	0x20000004
    8cf0:	2000018c 	.word	0x2000018c
    8cf4:	20000ea0 	.word	0x20000ea0
    8cf8:	e000ed00 	.word	0xe000ed00
    8cfc:	00000000 	.word	0x00000000
    8d00:	41007000 	.word	0x41007000
    8d04:	41005000 	.word	0x41005000
    8d08:	41004800 	.word	0x41004800
    8d0c:	41004000 	.word	0x41004000
    8d10:	000092e9 	.word	0x000092e9
    8d14:	00005bad 	.word	0x00005bad

00008d18 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8d18:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8d1a:	4a06      	ldr	r2, [pc, #24]	; (8d34 <_sbrk+0x1c>)
    8d1c:	6812      	ldr	r2, [r2, #0]
    8d1e:	2a00      	cmp	r2, #0
    8d20:	d004      	beq.n	8d2c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8d22:	4a04      	ldr	r2, [pc, #16]	; (8d34 <_sbrk+0x1c>)
    8d24:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8d26:	18c3      	adds	r3, r0, r3
    8d28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8d2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8d2c:	4902      	ldr	r1, [pc, #8]	; (8d38 <_sbrk+0x20>)
    8d2e:	4a01      	ldr	r2, [pc, #4]	; (8d34 <_sbrk+0x1c>)
    8d30:	6011      	str	r1, [r2, #0]
    8d32:	e7f6      	b.n	8d22 <_sbrk+0xa>
    8d34:	200003ec 	.word	0x200003ec
    8d38:	20002ea0 	.word	0x20002ea0

00008d3c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8d3c:	2001      	movs	r0, #1
    8d3e:	4240      	negs	r0, r0
    8d40:	4770      	bx	lr

00008d42 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8d42:	2380      	movs	r3, #128	; 0x80
    8d44:	019b      	lsls	r3, r3, #6
    8d46:	604b      	str	r3, [r1, #4]

	return 0;
}
    8d48:	2000      	movs	r0, #0
    8d4a:	4770      	bx	lr

00008d4c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8d4c:	2001      	movs	r0, #1
    8d4e:	4770      	bx	lr

00008d50 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8d50:	2000      	movs	r0, #0
    8d52:	4770      	bx	lr

00008d54 <__udivsi3>:
    8d54:	2200      	movs	r2, #0
    8d56:	0843      	lsrs	r3, r0, #1
    8d58:	428b      	cmp	r3, r1
    8d5a:	d374      	bcc.n	8e46 <__udivsi3+0xf2>
    8d5c:	0903      	lsrs	r3, r0, #4
    8d5e:	428b      	cmp	r3, r1
    8d60:	d35f      	bcc.n	8e22 <__udivsi3+0xce>
    8d62:	0a03      	lsrs	r3, r0, #8
    8d64:	428b      	cmp	r3, r1
    8d66:	d344      	bcc.n	8df2 <__udivsi3+0x9e>
    8d68:	0b03      	lsrs	r3, r0, #12
    8d6a:	428b      	cmp	r3, r1
    8d6c:	d328      	bcc.n	8dc0 <__udivsi3+0x6c>
    8d6e:	0c03      	lsrs	r3, r0, #16
    8d70:	428b      	cmp	r3, r1
    8d72:	d30d      	bcc.n	8d90 <__udivsi3+0x3c>
    8d74:	22ff      	movs	r2, #255	; 0xff
    8d76:	0209      	lsls	r1, r1, #8
    8d78:	ba12      	rev	r2, r2
    8d7a:	0c03      	lsrs	r3, r0, #16
    8d7c:	428b      	cmp	r3, r1
    8d7e:	d302      	bcc.n	8d86 <__udivsi3+0x32>
    8d80:	1212      	asrs	r2, r2, #8
    8d82:	0209      	lsls	r1, r1, #8
    8d84:	d065      	beq.n	8e52 <__udivsi3+0xfe>
    8d86:	0b03      	lsrs	r3, r0, #12
    8d88:	428b      	cmp	r3, r1
    8d8a:	d319      	bcc.n	8dc0 <__udivsi3+0x6c>
    8d8c:	e000      	b.n	8d90 <__udivsi3+0x3c>
    8d8e:	0a09      	lsrs	r1, r1, #8
    8d90:	0bc3      	lsrs	r3, r0, #15
    8d92:	428b      	cmp	r3, r1
    8d94:	d301      	bcc.n	8d9a <__udivsi3+0x46>
    8d96:	03cb      	lsls	r3, r1, #15
    8d98:	1ac0      	subs	r0, r0, r3
    8d9a:	4152      	adcs	r2, r2
    8d9c:	0b83      	lsrs	r3, r0, #14
    8d9e:	428b      	cmp	r3, r1
    8da0:	d301      	bcc.n	8da6 <__udivsi3+0x52>
    8da2:	038b      	lsls	r3, r1, #14
    8da4:	1ac0      	subs	r0, r0, r3
    8da6:	4152      	adcs	r2, r2
    8da8:	0b43      	lsrs	r3, r0, #13
    8daa:	428b      	cmp	r3, r1
    8dac:	d301      	bcc.n	8db2 <__udivsi3+0x5e>
    8dae:	034b      	lsls	r3, r1, #13
    8db0:	1ac0      	subs	r0, r0, r3
    8db2:	4152      	adcs	r2, r2
    8db4:	0b03      	lsrs	r3, r0, #12
    8db6:	428b      	cmp	r3, r1
    8db8:	d301      	bcc.n	8dbe <__udivsi3+0x6a>
    8dba:	030b      	lsls	r3, r1, #12
    8dbc:	1ac0      	subs	r0, r0, r3
    8dbe:	4152      	adcs	r2, r2
    8dc0:	0ac3      	lsrs	r3, r0, #11
    8dc2:	428b      	cmp	r3, r1
    8dc4:	d301      	bcc.n	8dca <__udivsi3+0x76>
    8dc6:	02cb      	lsls	r3, r1, #11
    8dc8:	1ac0      	subs	r0, r0, r3
    8dca:	4152      	adcs	r2, r2
    8dcc:	0a83      	lsrs	r3, r0, #10
    8dce:	428b      	cmp	r3, r1
    8dd0:	d301      	bcc.n	8dd6 <__udivsi3+0x82>
    8dd2:	028b      	lsls	r3, r1, #10
    8dd4:	1ac0      	subs	r0, r0, r3
    8dd6:	4152      	adcs	r2, r2
    8dd8:	0a43      	lsrs	r3, r0, #9
    8dda:	428b      	cmp	r3, r1
    8ddc:	d301      	bcc.n	8de2 <__udivsi3+0x8e>
    8dde:	024b      	lsls	r3, r1, #9
    8de0:	1ac0      	subs	r0, r0, r3
    8de2:	4152      	adcs	r2, r2
    8de4:	0a03      	lsrs	r3, r0, #8
    8de6:	428b      	cmp	r3, r1
    8de8:	d301      	bcc.n	8dee <__udivsi3+0x9a>
    8dea:	020b      	lsls	r3, r1, #8
    8dec:	1ac0      	subs	r0, r0, r3
    8dee:	4152      	adcs	r2, r2
    8df0:	d2cd      	bcs.n	8d8e <__udivsi3+0x3a>
    8df2:	09c3      	lsrs	r3, r0, #7
    8df4:	428b      	cmp	r3, r1
    8df6:	d301      	bcc.n	8dfc <__udivsi3+0xa8>
    8df8:	01cb      	lsls	r3, r1, #7
    8dfa:	1ac0      	subs	r0, r0, r3
    8dfc:	4152      	adcs	r2, r2
    8dfe:	0983      	lsrs	r3, r0, #6
    8e00:	428b      	cmp	r3, r1
    8e02:	d301      	bcc.n	8e08 <__udivsi3+0xb4>
    8e04:	018b      	lsls	r3, r1, #6
    8e06:	1ac0      	subs	r0, r0, r3
    8e08:	4152      	adcs	r2, r2
    8e0a:	0943      	lsrs	r3, r0, #5
    8e0c:	428b      	cmp	r3, r1
    8e0e:	d301      	bcc.n	8e14 <__udivsi3+0xc0>
    8e10:	014b      	lsls	r3, r1, #5
    8e12:	1ac0      	subs	r0, r0, r3
    8e14:	4152      	adcs	r2, r2
    8e16:	0903      	lsrs	r3, r0, #4
    8e18:	428b      	cmp	r3, r1
    8e1a:	d301      	bcc.n	8e20 <__udivsi3+0xcc>
    8e1c:	010b      	lsls	r3, r1, #4
    8e1e:	1ac0      	subs	r0, r0, r3
    8e20:	4152      	adcs	r2, r2
    8e22:	08c3      	lsrs	r3, r0, #3
    8e24:	428b      	cmp	r3, r1
    8e26:	d301      	bcc.n	8e2c <__udivsi3+0xd8>
    8e28:	00cb      	lsls	r3, r1, #3
    8e2a:	1ac0      	subs	r0, r0, r3
    8e2c:	4152      	adcs	r2, r2
    8e2e:	0883      	lsrs	r3, r0, #2
    8e30:	428b      	cmp	r3, r1
    8e32:	d301      	bcc.n	8e38 <__udivsi3+0xe4>
    8e34:	008b      	lsls	r3, r1, #2
    8e36:	1ac0      	subs	r0, r0, r3
    8e38:	4152      	adcs	r2, r2
    8e3a:	0843      	lsrs	r3, r0, #1
    8e3c:	428b      	cmp	r3, r1
    8e3e:	d301      	bcc.n	8e44 <__udivsi3+0xf0>
    8e40:	004b      	lsls	r3, r1, #1
    8e42:	1ac0      	subs	r0, r0, r3
    8e44:	4152      	adcs	r2, r2
    8e46:	1a41      	subs	r1, r0, r1
    8e48:	d200      	bcs.n	8e4c <__udivsi3+0xf8>
    8e4a:	4601      	mov	r1, r0
    8e4c:	4152      	adcs	r2, r2
    8e4e:	4610      	mov	r0, r2
    8e50:	4770      	bx	lr
    8e52:	e7ff      	b.n	8e54 <__udivsi3+0x100>
    8e54:	b501      	push	{r0, lr}
    8e56:	2000      	movs	r0, #0
    8e58:	f000 f8f0 	bl	903c <__aeabi_idiv0>
    8e5c:	bd02      	pop	{r1, pc}
    8e5e:	46c0      	nop			; (mov r8, r8)

00008e60 <__aeabi_uidivmod>:
    8e60:	2900      	cmp	r1, #0
    8e62:	d0f7      	beq.n	8e54 <__udivsi3+0x100>
    8e64:	e776      	b.n	8d54 <__udivsi3>
    8e66:	4770      	bx	lr

00008e68 <__divsi3>:
    8e68:	4603      	mov	r3, r0
    8e6a:	430b      	orrs	r3, r1
    8e6c:	d47f      	bmi.n	8f6e <__divsi3+0x106>
    8e6e:	2200      	movs	r2, #0
    8e70:	0843      	lsrs	r3, r0, #1
    8e72:	428b      	cmp	r3, r1
    8e74:	d374      	bcc.n	8f60 <__divsi3+0xf8>
    8e76:	0903      	lsrs	r3, r0, #4
    8e78:	428b      	cmp	r3, r1
    8e7a:	d35f      	bcc.n	8f3c <__divsi3+0xd4>
    8e7c:	0a03      	lsrs	r3, r0, #8
    8e7e:	428b      	cmp	r3, r1
    8e80:	d344      	bcc.n	8f0c <__divsi3+0xa4>
    8e82:	0b03      	lsrs	r3, r0, #12
    8e84:	428b      	cmp	r3, r1
    8e86:	d328      	bcc.n	8eda <__divsi3+0x72>
    8e88:	0c03      	lsrs	r3, r0, #16
    8e8a:	428b      	cmp	r3, r1
    8e8c:	d30d      	bcc.n	8eaa <__divsi3+0x42>
    8e8e:	22ff      	movs	r2, #255	; 0xff
    8e90:	0209      	lsls	r1, r1, #8
    8e92:	ba12      	rev	r2, r2
    8e94:	0c03      	lsrs	r3, r0, #16
    8e96:	428b      	cmp	r3, r1
    8e98:	d302      	bcc.n	8ea0 <__divsi3+0x38>
    8e9a:	1212      	asrs	r2, r2, #8
    8e9c:	0209      	lsls	r1, r1, #8
    8e9e:	d065      	beq.n	8f6c <__divsi3+0x104>
    8ea0:	0b03      	lsrs	r3, r0, #12
    8ea2:	428b      	cmp	r3, r1
    8ea4:	d319      	bcc.n	8eda <__divsi3+0x72>
    8ea6:	e000      	b.n	8eaa <__divsi3+0x42>
    8ea8:	0a09      	lsrs	r1, r1, #8
    8eaa:	0bc3      	lsrs	r3, r0, #15
    8eac:	428b      	cmp	r3, r1
    8eae:	d301      	bcc.n	8eb4 <__divsi3+0x4c>
    8eb0:	03cb      	lsls	r3, r1, #15
    8eb2:	1ac0      	subs	r0, r0, r3
    8eb4:	4152      	adcs	r2, r2
    8eb6:	0b83      	lsrs	r3, r0, #14
    8eb8:	428b      	cmp	r3, r1
    8eba:	d301      	bcc.n	8ec0 <__divsi3+0x58>
    8ebc:	038b      	lsls	r3, r1, #14
    8ebe:	1ac0      	subs	r0, r0, r3
    8ec0:	4152      	adcs	r2, r2
    8ec2:	0b43      	lsrs	r3, r0, #13
    8ec4:	428b      	cmp	r3, r1
    8ec6:	d301      	bcc.n	8ecc <__divsi3+0x64>
    8ec8:	034b      	lsls	r3, r1, #13
    8eca:	1ac0      	subs	r0, r0, r3
    8ecc:	4152      	adcs	r2, r2
    8ece:	0b03      	lsrs	r3, r0, #12
    8ed0:	428b      	cmp	r3, r1
    8ed2:	d301      	bcc.n	8ed8 <__divsi3+0x70>
    8ed4:	030b      	lsls	r3, r1, #12
    8ed6:	1ac0      	subs	r0, r0, r3
    8ed8:	4152      	adcs	r2, r2
    8eda:	0ac3      	lsrs	r3, r0, #11
    8edc:	428b      	cmp	r3, r1
    8ede:	d301      	bcc.n	8ee4 <__divsi3+0x7c>
    8ee0:	02cb      	lsls	r3, r1, #11
    8ee2:	1ac0      	subs	r0, r0, r3
    8ee4:	4152      	adcs	r2, r2
    8ee6:	0a83      	lsrs	r3, r0, #10
    8ee8:	428b      	cmp	r3, r1
    8eea:	d301      	bcc.n	8ef0 <__divsi3+0x88>
    8eec:	028b      	lsls	r3, r1, #10
    8eee:	1ac0      	subs	r0, r0, r3
    8ef0:	4152      	adcs	r2, r2
    8ef2:	0a43      	lsrs	r3, r0, #9
    8ef4:	428b      	cmp	r3, r1
    8ef6:	d301      	bcc.n	8efc <__divsi3+0x94>
    8ef8:	024b      	lsls	r3, r1, #9
    8efa:	1ac0      	subs	r0, r0, r3
    8efc:	4152      	adcs	r2, r2
    8efe:	0a03      	lsrs	r3, r0, #8
    8f00:	428b      	cmp	r3, r1
    8f02:	d301      	bcc.n	8f08 <__divsi3+0xa0>
    8f04:	020b      	lsls	r3, r1, #8
    8f06:	1ac0      	subs	r0, r0, r3
    8f08:	4152      	adcs	r2, r2
    8f0a:	d2cd      	bcs.n	8ea8 <__divsi3+0x40>
    8f0c:	09c3      	lsrs	r3, r0, #7
    8f0e:	428b      	cmp	r3, r1
    8f10:	d301      	bcc.n	8f16 <__divsi3+0xae>
    8f12:	01cb      	lsls	r3, r1, #7
    8f14:	1ac0      	subs	r0, r0, r3
    8f16:	4152      	adcs	r2, r2
    8f18:	0983      	lsrs	r3, r0, #6
    8f1a:	428b      	cmp	r3, r1
    8f1c:	d301      	bcc.n	8f22 <__divsi3+0xba>
    8f1e:	018b      	lsls	r3, r1, #6
    8f20:	1ac0      	subs	r0, r0, r3
    8f22:	4152      	adcs	r2, r2
    8f24:	0943      	lsrs	r3, r0, #5
    8f26:	428b      	cmp	r3, r1
    8f28:	d301      	bcc.n	8f2e <__divsi3+0xc6>
    8f2a:	014b      	lsls	r3, r1, #5
    8f2c:	1ac0      	subs	r0, r0, r3
    8f2e:	4152      	adcs	r2, r2
    8f30:	0903      	lsrs	r3, r0, #4
    8f32:	428b      	cmp	r3, r1
    8f34:	d301      	bcc.n	8f3a <__divsi3+0xd2>
    8f36:	010b      	lsls	r3, r1, #4
    8f38:	1ac0      	subs	r0, r0, r3
    8f3a:	4152      	adcs	r2, r2
    8f3c:	08c3      	lsrs	r3, r0, #3
    8f3e:	428b      	cmp	r3, r1
    8f40:	d301      	bcc.n	8f46 <__divsi3+0xde>
    8f42:	00cb      	lsls	r3, r1, #3
    8f44:	1ac0      	subs	r0, r0, r3
    8f46:	4152      	adcs	r2, r2
    8f48:	0883      	lsrs	r3, r0, #2
    8f4a:	428b      	cmp	r3, r1
    8f4c:	d301      	bcc.n	8f52 <__divsi3+0xea>
    8f4e:	008b      	lsls	r3, r1, #2
    8f50:	1ac0      	subs	r0, r0, r3
    8f52:	4152      	adcs	r2, r2
    8f54:	0843      	lsrs	r3, r0, #1
    8f56:	428b      	cmp	r3, r1
    8f58:	d301      	bcc.n	8f5e <__divsi3+0xf6>
    8f5a:	004b      	lsls	r3, r1, #1
    8f5c:	1ac0      	subs	r0, r0, r3
    8f5e:	4152      	adcs	r2, r2
    8f60:	1a41      	subs	r1, r0, r1
    8f62:	d200      	bcs.n	8f66 <__divsi3+0xfe>
    8f64:	4601      	mov	r1, r0
    8f66:	4152      	adcs	r2, r2
    8f68:	4610      	mov	r0, r2
    8f6a:	4770      	bx	lr
    8f6c:	e05d      	b.n	902a <__divsi3+0x1c2>
    8f6e:	0fca      	lsrs	r2, r1, #31
    8f70:	d000      	beq.n	8f74 <__divsi3+0x10c>
    8f72:	4249      	negs	r1, r1
    8f74:	1003      	asrs	r3, r0, #32
    8f76:	d300      	bcc.n	8f7a <__divsi3+0x112>
    8f78:	4240      	negs	r0, r0
    8f7a:	4053      	eors	r3, r2
    8f7c:	2200      	movs	r2, #0
    8f7e:	469c      	mov	ip, r3
    8f80:	0903      	lsrs	r3, r0, #4
    8f82:	428b      	cmp	r3, r1
    8f84:	d32d      	bcc.n	8fe2 <__divsi3+0x17a>
    8f86:	0a03      	lsrs	r3, r0, #8
    8f88:	428b      	cmp	r3, r1
    8f8a:	d312      	bcc.n	8fb2 <__divsi3+0x14a>
    8f8c:	22fc      	movs	r2, #252	; 0xfc
    8f8e:	0189      	lsls	r1, r1, #6
    8f90:	ba12      	rev	r2, r2
    8f92:	0a03      	lsrs	r3, r0, #8
    8f94:	428b      	cmp	r3, r1
    8f96:	d30c      	bcc.n	8fb2 <__divsi3+0x14a>
    8f98:	0189      	lsls	r1, r1, #6
    8f9a:	1192      	asrs	r2, r2, #6
    8f9c:	428b      	cmp	r3, r1
    8f9e:	d308      	bcc.n	8fb2 <__divsi3+0x14a>
    8fa0:	0189      	lsls	r1, r1, #6
    8fa2:	1192      	asrs	r2, r2, #6
    8fa4:	428b      	cmp	r3, r1
    8fa6:	d304      	bcc.n	8fb2 <__divsi3+0x14a>
    8fa8:	0189      	lsls	r1, r1, #6
    8faa:	d03a      	beq.n	9022 <__divsi3+0x1ba>
    8fac:	1192      	asrs	r2, r2, #6
    8fae:	e000      	b.n	8fb2 <__divsi3+0x14a>
    8fb0:	0989      	lsrs	r1, r1, #6
    8fb2:	09c3      	lsrs	r3, r0, #7
    8fb4:	428b      	cmp	r3, r1
    8fb6:	d301      	bcc.n	8fbc <__divsi3+0x154>
    8fb8:	01cb      	lsls	r3, r1, #7
    8fba:	1ac0      	subs	r0, r0, r3
    8fbc:	4152      	adcs	r2, r2
    8fbe:	0983      	lsrs	r3, r0, #6
    8fc0:	428b      	cmp	r3, r1
    8fc2:	d301      	bcc.n	8fc8 <__divsi3+0x160>
    8fc4:	018b      	lsls	r3, r1, #6
    8fc6:	1ac0      	subs	r0, r0, r3
    8fc8:	4152      	adcs	r2, r2
    8fca:	0943      	lsrs	r3, r0, #5
    8fcc:	428b      	cmp	r3, r1
    8fce:	d301      	bcc.n	8fd4 <__divsi3+0x16c>
    8fd0:	014b      	lsls	r3, r1, #5
    8fd2:	1ac0      	subs	r0, r0, r3
    8fd4:	4152      	adcs	r2, r2
    8fd6:	0903      	lsrs	r3, r0, #4
    8fd8:	428b      	cmp	r3, r1
    8fda:	d301      	bcc.n	8fe0 <__divsi3+0x178>
    8fdc:	010b      	lsls	r3, r1, #4
    8fde:	1ac0      	subs	r0, r0, r3
    8fe0:	4152      	adcs	r2, r2
    8fe2:	08c3      	lsrs	r3, r0, #3
    8fe4:	428b      	cmp	r3, r1
    8fe6:	d301      	bcc.n	8fec <__divsi3+0x184>
    8fe8:	00cb      	lsls	r3, r1, #3
    8fea:	1ac0      	subs	r0, r0, r3
    8fec:	4152      	adcs	r2, r2
    8fee:	0883      	lsrs	r3, r0, #2
    8ff0:	428b      	cmp	r3, r1
    8ff2:	d301      	bcc.n	8ff8 <__divsi3+0x190>
    8ff4:	008b      	lsls	r3, r1, #2
    8ff6:	1ac0      	subs	r0, r0, r3
    8ff8:	4152      	adcs	r2, r2
    8ffa:	d2d9      	bcs.n	8fb0 <__divsi3+0x148>
    8ffc:	0843      	lsrs	r3, r0, #1
    8ffe:	428b      	cmp	r3, r1
    9000:	d301      	bcc.n	9006 <__divsi3+0x19e>
    9002:	004b      	lsls	r3, r1, #1
    9004:	1ac0      	subs	r0, r0, r3
    9006:	4152      	adcs	r2, r2
    9008:	1a41      	subs	r1, r0, r1
    900a:	d200      	bcs.n	900e <__divsi3+0x1a6>
    900c:	4601      	mov	r1, r0
    900e:	4663      	mov	r3, ip
    9010:	4152      	adcs	r2, r2
    9012:	105b      	asrs	r3, r3, #1
    9014:	4610      	mov	r0, r2
    9016:	d301      	bcc.n	901c <__divsi3+0x1b4>
    9018:	4240      	negs	r0, r0
    901a:	2b00      	cmp	r3, #0
    901c:	d500      	bpl.n	9020 <__divsi3+0x1b8>
    901e:	4249      	negs	r1, r1
    9020:	4770      	bx	lr
    9022:	4663      	mov	r3, ip
    9024:	105b      	asrs	r3, r3, #1
    9026:	d300      	bcc.n	902a <__divsi3+0x1c2>
    9028:	4240      	negs	r0, r0
    902a:	b501      	push	{r0, lr}
    902c:	2000      	movs	r0, #0
    902e:	f000 f805 	bl	903c <__aeabi_idiv0>
    9032:	bd02      	pop	{r1, pc}

00009034 <__aeabi_idivmod>:
    9034:	2900      	cmp	r1, #0
    9036:	d0f8      	beq.n	902a <__divsi3+0x1c2>
    9038:	e716      	b.n	8e68 <__divsi3>
    903a:	4770      	bx	lr

0000903c <__aeabi_idiv0>:
    903c:	4770      	bx	lr
    903e:	46c0      	nop			; (mov r8, r8)

00009040 <__clzsi2>:
    9040:	211c      	movs	r1, #28
    9042:	2301      	movs	r3, #1
    9044:	041b      	lsls	r3, r3, #16
    9046:	4298      	cmp	r0, r3
    9048:	d301      	bcc.n	904e <__clzsi2+0xe>
    904a:	0c00      	lsrs	r0, r0, #16
    904c:	3910      	subs	r1, #16
    904e:	0a1b      	lsrs	r3, r3, #8
    9050:	4298      	cmp	r0, r3
    9052:	d301      	bcc.n	9058 <__clzsi2+0x18>
    9054:	0a00      	lsrs	r0, r0, #8
    9056:	3908      	subs	r1, #8
    9058:	091b      	lsrs	r3, r3, #4
    905a:	4298      	cmp	r0, r3
    905c:	d301      	bcc.n	9062 <__clzsi2+0x22>
    905e:	0900      	lsrs	r0, r0, #4
    9060:	3904      	subs	r1, #4
    9062:	a202      	add	r2, pc, #8	; (adr r2, 906c <__clzsi2+0x2c>)
    9064:	5c10      	ldrb	r0, [r2, r0]
    9066:	1840      	adds	r0, r0, r1
    9068:	4770      	bx	lr
    906a:	46c0      	nop			; (mov r8, r8)
    906c:	02020304 	.word	0x02020304
    9070:	01010101 	.word	0x01010101
	...

0000907c <__ctzsi2>:
    907c:	4241      	negs	r1, r0
    907e:	4008      	ands	r0, r1
    9080:	211c      	movs	r1, #28
    9082:	2301      	movs	r3, #1
    9084:	041b      	lsls	r3, r3, #16
    9086:	4298      	cmp	r0, r3
    9088:	d301      	bcc.n	908e <__ctzsi2+0x12>
    908a:	0c00      	lsrs	r0, r0, #16
    908c:	3910      	subs	r1, #16
    908e:	0a1b      	lsrs	r3, r3, #8
    9090:	4298      	cmp	r0, r3
    9092:	d301      	bcc.n	9098 <__ctzsi2+0x1c>
    9094:	0a00      	lsrs	r0, r0, #8
    9096:	3908      	subs	r1, #8
    9098:	091b      	lsrs	r3, r3, #4
    909a:	4298      	cmp	r0, r3
    909c:	d301      	bcc.n	90a2 <__ctzsi2+0x26>
    909e:	0900      	lsrs	r0, r0, #4
    90a0:	3904      	subs	r1, #4
    90a2:	a202      	add	r2, pc, #8	; (adr r2, 90ac <__ctzsi2+0x30>)
    90a4:	5c10      	ldrb	r0, [r2, r0]
    90a6:	1a40      	subs	r0, r0, r1
    90a8:	4770      	bx	lr
    90aa:	46c0      	nop			; (mov r8, r8)
    90ac:	1d1d1c1b 	.word	0x1d1d1c1b
    90b0:	1e1e1e1e 	.word	0x1e1e1e1e
    90b4:	1f1f1f1f 	.word	0x1f1f1f1f
    90b8:	1f1f1f1f 	.word	0x1f1f1f1f

000090bc <__aeabi_uldivmod>:
    90bc:	2b00      	cmp	r3, #0
    90be:	d111      	bne.n	90e4 <__aeabi_uldivmod+0x28>
    90c0:	2a00      	cmp	r2, #0
    90c2:	d10f      	bne.n	90e4 <__aeabi_uldivmod+0x28>
    90c4:	2900      	cmp	r1, #0
    90c6:	d100      	bne.n	90ca <__aeabi_uldivmod+0xe>
    90c8:	2800      	cmp	r0, #0
    90ca:	d002      	beq.n	90d2 <__aeabi_uldivmod+0x16>
    90cc:	2100      	movs	r1, #0
    90ce:	43c9      	mvns	r1, r1
    90d0:	1c08      	adds	r0, r1, #0
    90d2:	b407      	push	{r0, r1, r2}
    90d4:	4802      	ldr	r0, [pc, #8]	; (90e0 <__aeabi_uldivmod+0x24>)
    90d6:	a102      	add	r1, pc, #8	; (adr r1, 90e0 <__aeabi_uldivmod+0x24>)
    90d8:	1840      	adds	r0, r0, r1
    90da:	9002      	str	r0, [sp, #8]
    90dc:	bd03      	pop	{r0, r1, pc}
    90de:	46c0      	nop			; (mov r8, r8)
    90e0:	ffffff5d 	.word	0xffffff5d
    90e4:	b403      	push	{r0, r1}
    90e6:	4668      	mov	r0, sp
    90e8:	b501      	push	{r0, lr}
    90ea:	9802      	ldr	r0, [sp, #8]
    90ec:	f000 f830 	bl	9150 <__udivmoddi4>
    90f0:	9b01      	ldr	r3, [sp, #4]
    90f2:	469e      	mov	lr, r3
    90f4:	b002      	add	sp, #8
    90f6:	bc0c      	pop	{r2, r3}
    90f8:	4770      	bx	lr
    90fa:	46c0      	nop			; (mov r8, r8)

000090fc <__aeabi_lmul>:
    90fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90fe:	46ce      	mov	lr, r9
    9100:	4647      	mov	r7, r8
    9102:	0415      	lsls	r5, r2, #16
    9104:	0c2d      	lsrs	r5, r5, #16
    9106:	002e      	movs	r6, r5
    9108:	b580      	push	{r7, lr}
    910a:	0407      	lsls	r7, r0, #16
    910c:	0c14      	lsrs	r4, r2, #16
    910e:	0c3f      	lsrs	r7, r7, #16
    9110:	4699      	mov	r9, r3
    9112:	0c03      	lsrs	r3, r0, #16
    9114:	437e      	muls	r6, r7
    9116:	435d      	muls	r5, r3
    9118:	4367      	muls	r7, r4
    911a:	4363      	muls	r3, r4
    911c:	197f      	adds	r7, r7, r5
    911e:	0c34      	lsrs	r4, r6, #16
    9120:	19e4      	adds	r4, r4, r7
    9122:	469c      	mov	ip, r3
    9124:	42a5      	cmp	r5, r4
    9126:	d903      	bls.n	9130 <__aeabi_lmul+0x34>
    9128:	2380      	movs	r3, #128	; 0x80
    912a:	025b      	lsls	r3, r3, #9
    912c:	4698      	mov	r8, r3
    912e:	44c4      	add	ip, r8
    9130:	464b      	mov	r3, r9
    9132:	4351      	muls	r1, r2
    9134:	4343      	muls	r3, r0
    9136:	0436      	lsls	r6, r6, #16
    9138:	0c36      	lsrs	r6, r6, #16
    913a:	0c25      	lsrs	r5, r4, #16
    913c:	0424      	lsls	r4, r4, #16
    913e:	4465      	add	r5, ip
    9140:	19a4      	adds	r4, r4, r6
    9142:	1859      	adds	r1, r3, r1
    9144:	1949      	adds	r1, r1, r5
    9146:	0020      	movs	r0, r4
    9148:	bc0c      	pop	{r2, r3}
    914a:	4690      	mov	r8, r2
    914c:	4699      	mov	r9, r3
    914e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009150 <__udivmoddi4>:
    9150:	b5f0      	push	{r4, r5, r6, r7, lr}
    9152:	4657      	mov	r7, sl
    9154:	464e      	mov	r6, r9
    9156:	4645      	mov	r5, r8
    9158:	46de      	mov	lr, fp
    915a:	b5e0      	push	{r5, r6, r7, lr}
    915c:	0004      	movs	r4, r0
    915e:	b083      	sub	sp, #12
    9160:	000d      	movs	r5, r1
    9162:	4692      	mov	sl, r2
    9164:	4699      	mov	r9, r3
    9166:	428b      	cmp	r3, r1
    9168:	d82f      	bhi.n	91ca <__udivmoddi4+0x7a>
    916a:	d02c      	beq.n	91c6 <__udivmoddi4+0x76>
    916c:	4649      	mov	r1, r9
    916e:	4650      	mov	r0, sl
    9170:	f000 f8ae 	bl	92d0 <__clzdi2>
    9174:	0029      	movs	r1, r5
    9176:	0006      	movs	r6, r0
    9178:	0020      	movs	r0, r4
    917a:	f000 f8a9 	bl	92d0 <__clzdi2>
    917e:	1a33      	subs	r3, r6, r0
    9180:	4698      	mov	r8, r3
    9182:	3b20      	subs	r3, #32
    9184:	469b      	mov	fp, r3
    9186:	d500      	bpl.n	918a <__udivmoddi4+0x3a>
    9188:	e074      	b.n	9274 <__udivmoddi4+0x124>
    918a:	4653      	mov	r3, sl
    918c:	465a      	mov	r2, fp
    918e:	4093      	lsls	r3, r2
    9190:	001f      	movs	r7, r3
    9192:	4653      	mov	r3, sl
    9194:	4642      	mov	r2, r8
    9196:	4093      	lsls	r3, r2
    9198:	001e      	movs	r6, r3
    919a:	42af      	cmp	r7, r5
    919c:	d829      	bhi.n	91f2 <__udivmoddi4+0xa2>
    919e:	d026      	beq.n	91ee <__udivmoddi4+0x9e>
    91a0:	465b      	mov	r3, fp
    91a2:	1ba4      	subs	r4, r4, r6
    91a4:	41bd      	sbcs	r5, r7
    91a6:	2b00      	cmp	r3, #0
    91a8:	da00      	bge.n	91ac <__udivmoddi4+0x5c>
    91aa:	e079      	b.n	92a0 <__udivmoddi4+0x150>
    91ac:	2200      	movs	r2, #0
    91ae:	2300      	movs	r3, #0
    91b0:	9200      	str	r2, [sp, #0]
    91b2:	9301      	str	r3, [sp, #4]
    91b4:	2301      	movs	r3, #1
    91b6:	465a      	mov	r2, fp
    91b8:	4093      	lsls	r3, r2
    91ba:	9301      	str	r3, [sp, #4]
    91bc:	2301      	movs	r3, #1
    91be:	4642      	mov	r2, r8
    91c0:	4093      	lsls	r3, r2
    91c2:	9300      	str	r3, [sp, #0]
    91c4:	e019      	b.n	91fa <__udivmoddi4+0xaa>
    91c6:	4282      	cmp	r2, r0
    91c8:	d9d0      	bls.n	916c <__udivmoddi4+0x1c>
    91ca:	2200      	movs	r2, #0
    91cc:	2300      	movs	r3, #0
    91ce:	9200      	str	r2, [sp, #0]
    91d0:	9301      	str	r3, [sp, #4]
    91d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    91d4:	2b00      	cmp	r3, #0
    91d6:	d001      	beq.n	91dc <__udivmoddi4+0x8c>
    91d8:	601c      	str	r4, [r3, #0]
    91da:	605d      	str	r5, [r3, #4]
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	9901      	ldr	r1, [sp, #4]
    91e0:	b003      	add	sp, #12
    91e2:	bc3c      	pop	{r2, r3, r4, r5}
    91e4:	4690      	mov	r8, r2
    91e6:	4699      	mov	r9, r3
    91e8:	46a2      	mov	sl, r4
    91ea:	46ab      	mov	fp, r5
    91ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91ee:	42a3      	cmp	r3, r4
    91f0:	d9d6      	bls.n	91a0 <__udivmoddi4+0x50>
    91f2:	2200      	movs	r2, #0
    91f4:	2300      	movs	r3, #0
    91f6:	9200      	str	r2, [sp, #0]
    91f8:	9301      	str	r3, [sp, #4]
    91fa:	4643      	mov	r3, r8
    91fc:	2b00      	cmp	r3, #0
    91fe:	d0e8      	beq.n	91d2 <__udivmoddi4+0x82>
    9200:	07fb      	lsls	r3, r7, #31
    9202:	0872      	lsrs	r2, r6, #1
    9204:	431a      	orrs	r2, r3
    9206:	4646      	mov	r6, r8
    9208:	087b      	lsrs	r3, r7, #1
    920a:	e00e      	b.n	922a <__udivmoddi4+0xda>
    920c:	42ab      	cmp	r3, r5
    920e:	d101      	bne.n	9214 <__udivmoddi4+0xc4>
    9210:	42a2      	cmp	r2, r4
    9212:	d80c      	bhi.n	922e <__udivmoddi4+0xde>
    9214:	1aa4      	subs	r4, r4, r2
    9216:	419d      	sbcs	r5, r3
    9218:	2001      	movs	r0, #1
    921a:	1924      	adds	r4, r4, r4
    921c:	416d      	adcs	r5, r5
    921e:	2100      	movs	r1, #0
    9220:	3e01      	subs	r6, #1
    9222:	1824      	adds	r4, r4, r0
    9224:	414d      	adcs	r5, r1
    9226:	2e00      	cmp	r6, #0
    9228:	d006      	beq.n	9238 <__udivmoddi4+0xe8>
    922a:	42ab      	cmp	r3, r5
    922c:	d9ee      	bls.n	920c <__udivmoddi4+0xbc>
    922e:	3e01      	subs	r6, #1
    9230:	1924      	adds	r4, r4, r4
    9232:	416d      	adcs	r5, r5
    9234:	2e00      	cmp	r6, #0
    9236:	d1f8      	bne.n	922a <__udivmoddi4+0xda>
    9238:	465b      	mov	r3, fp
    923a:	9800      	ldr	r0, [sp, #0]
    923c:	9901      	ldr	r1, [sp, #4]
    923e:	1900      	adds	r0, r0, r4
    9240:	4169      	adcs	r1, r5
    9242:	2b00      	cmp	r3, #0
    9244:	db22      	blt.n	928c <__udivmoddi4+0x13c>
    9246:	002b      	movs	r3, r5
    9248:	465a      	mov	r2, fp
    924a:	40d3      	lsrs	r3, r2
    924c:	002a      	movs	r2, r5
    924e:	4644      	mov	r4, r8
    9250:	40e2      	lsrs	r2, r4
    9252:	001c      	movs	r4, r3
    9254:	465b      	mov	r3, fp
    9256:	0015      	movs	r5, r2
    9258:	2b00      	cmp	r3, #0
    925a:	db2c      	blt.n	92b6 <__udivmoddi4+0x166>
    925c:	0026      	movs	r6, r4
    925e:	409e      	lsls	r6, r3
    9260:	0033      	movs	r3, r6
    9262:	0026      	movs	r6, r4
    9264:	4647      	mov	r7, r8
    9266:	40be      	lsls	r6, r7
    9268:	0032      	movs	r2, r6
    926a:	1a80      	subs	r0, r0, r2
    926c:	4199      	sbcs	r1, r3
    926e:	9000      	str	r0, [sp, #0]
    9270:	9101      	str	r1, [sp, #4]
    9272:	e7ae      	b.n	91d2 <__udivmoddi4+0x82>
    9274:	4642      	mov	r2, r8
    9276:	2320      	movs	r3, #32
    9278:	1a9b      	subs	r3, r3, r2
    927a:	4652      	mov	r2, sl
    927c:	40da      	lsrs	r2, r3
    927e:	4641      	mov	r1, r8
    9280:	0013      	movs	r3, r2
    9282:	464a      	mov	r2, r9
    9284:	408a      	lsls	r2, r1
    9286:	0017      	movs	r7, r2
    9288:	431f      	orrs	r7, r3
    928a:	e782      	b.n	9192 <__udivmoddi4+0x42>
    928c:	4642      	mov	r2, r8
    928e:	2320      	movs	r3, #32
    9290:	1a9b      	subs	r3, r3, r2
    9292:	002a      	movs	r2, r5
    9294:	4646      	mov	r6, r8
    9296:	409a      	lsls	r2, r3
    9298:	0023      	movs	r3, r4
    929a:	40f3      	lsrs	r3, r6
    929c:	4313      	orrs	r3, r2
    929e:	e7d5      	b.n	924c <__udivmoddi4+0xfc>
    92a0:	4642      	mov	r2, r8
    92a2:	2320      	movs	r3, #32
    92a4:	2100      	movs	r1, #0
    92a6:	1a9b      	subs	r3, r3, r2
    92a8:	2200      	movs	r2, #0
    92aa:	9100      	str	r1, [sp, #0]
    92ac:	9201      	str	r2, [sp, #4]
    92ae:	2201      	movs	r2, #1
    92b0:	40da      	lsrs	r2, r3
    92b2:	9201      	str	r2, [sp, #4]
    92b4:	e782      	b.n	91bc <__udivmoddi4+0x6c>
    92b6:	4642      	mov	r2, r8
    92b8:	2320      	movs	r3, #32
    92ba:	0026      	movs	r6, r4
    92bc:	1a9b      	subs	r3, r3, r2
    92be:	40de      	lsrs	r6, r3
    92c0:	002f      	movs	r7, r5
    92c2:	46b4      	mov	ip, r6
    92c4:	4097      	lsls	r7, r2
    92c6:	4666      	mov	r6, ip
    92c8:	003b      	movs	r3, r7
    92ca:	4333      	orrs	r3, r6
    92cc:	e7c9      	b.n	9262 <__udivmoddi4+0x112>
    92ce:	46c0      	nop			; (mov r8, r8)

000092d0 <__clzdi2>:
    92d0:	b510      	push	{r4, lr}
    92d2:	2900      	cmp	r1, #0
    92d4:	d103      	bne.n	92de <__clzdi2+0xe>
    92d6:	f7ff feb3 	bl	9040 <__clzsi2>
    92da:	3020      	adds	r0, #32
    92dc:	e002      	b.n	92e4 <__clzdi2+0x14>
    92de:	1c08      	adds	r0, r1, #0
    92e0:	f7ff feae 	bl	9040 <__clzsi2>
    92e4:	bd10      	pop	{r4, pc}
    92e6:	46c0      	nop			; (mov r8, r8)

000092e8 <__libc_init_array>:
    92e8:	b570      	push	{r4, r5, r6, lr}
    92ea:	2600      	movs	r6, #0
    92ec:	4d0c      	ldr	r5, [pc, #48]	; (9320 <__libc_init_array+0x38>)
    92ee:	4c0d      	ldr	r4, [pc, #52]	; (9324 <__libc_init_array+0x3c>)
    92f0:	1b64      	subs	r4, r4, r5
    92f2:	10a4      	asrs	r4, r4, #2
    92f4:	42a6      	cmp	r6, r4
    92f6:	d109      	bne.n	930c <__libc_init_array+0x24>
    92f8:	2600      	movs	r6, #0
    92fa:	f001 fef7 	bl	b0ec <_init>
    92fe:	4d0a      	ldr	r5, [pc, #40]	; (9328 <__libc_init_array+0x40>)
    9300:	4c0a      	ldr	r4, [pc, #40]	; (932c <__libc_init_array+0x44>)
    9302:	1b64      	subs	r4, r4, r5
    9304:	10a4      	asrs	r4, r4, #2
    9306:	42a6      	cmp	r6, r4
    9308:	d105      	bne.n	9316 <__libc_init_array+0x2e>
    930a:	bd70      	pop	{r4, r5, r6, pc}
    930c:	00b3      	lsls	r3, r6, #2
    930e:	58eb      	ldr	r3, [r5, r3]
    9310:	4798      	blx	r3
    9312:	3601      	adds	r6, #1
    9314:	e7ee      	b.n	92f4 <__libc_init_array+0xc>
    9316:	00b3      	lsls	r3, r6, #2
    9318:	58eb      	ldr	r3, [r5, r3]
    931a:	4798      	blx	r3
    931c:	3601      	adds	r6, #1
    931e:	e7f2      	b.n	9306 <__libc_init_array+0x1e>
    9320:	0000b0f8 	.word	0x0000b0f8
    9324:	0000b0f8 	.word	0x0000b0f8
    9328:	0000b0f8 	.word	0x0000b0f8
    932c:	0000b0fc 	.word	0x0000b0fc

00009330 <memcpy>:
    9330:	2300      	movs	r3, #0
    9332:	b510      	push	{r4, lr}
    9334:	429a      	cmp	r2, r3
    9336:	d100      	bne.n	933a <memcpy+0xa>
    9338:	bd10      	pop	{r4, pc}
    933a:	5ccc      	ldrb	r4, [r1, r3]
    933c:	54c4      	strb	r4, [r0, r3]
    933e:	3301      	adds	r3, #1
    9340:	e7f8      	b.n	9334 <memcpy+0x4>

00009342 <memset>:
    9342:	0003      	movs	r3, r0
    9344:	1882      	adds	r2, r0, r2
    9346:	4293      	cmp	r3, r2
    9348:	d100      	bne.n	934c <memset+0xa>
    934a:	4770      	bx	lr
    934c:	7019      	strb	r1, [r3, #0]
    934e:	3301      	adds	r3, #1
    9350:	e7f9      	b.n	9346 <memset+0x4>
	...

00009354 <iprintf>:
    9354:	b40f      	push	{r0, r1, r2, r3}
    9356:	4b0b      	ldr	r3, [pc, #44]	; (9384 <iprintf+0x30>)
    9358:	b513      	push	{r0, r1, r4, lr}
    935a:	681c      	ldr	r4, [r3, #0]
    935c:	2c00      	cmp	r4, #0
    935e:	d005      	beq.n	936c <iprintf+0x18>
    9360:	69a3      	ldr	r3, [r4, #24]
    9362:	2b00      	cmp	r3, #0
    9364:	d102      	bne.n	936c <iprintf+0x18>
    9366:	0020      	movs	r0, r4
    9368:	f000 f9de 	bl	9728 <__sinit>
    936c:	ab05      	add	r3, sp, #20
    936e:	9a04      	ldr	r2, [sp, #16]
    9370:	68a1      	ldr	r1, [r4, #8]
    9372:	0020      	movs	r0, r4
    9374:	9301      	str	r3, [sp, #4]
    9376:	f000 fd19 	bl	9dac <_vfiprintf_r>
    937a:	bc16      	pop	{r1, r2, r4}
    937c:	bc08      	pop	{r3}
    937e:	b004      	add	sp, #16
    9380:	4718      	bx	r3
    9382:	46c0      	nop			; (mov r8, r8)
    9384:	20000128 	.word	0x20000128

00009388 <setbuf>:
    9388:	424a      	negs	r2, r1
    938a:	414a      	adcs	r2, r1
    938c:	2380      	movs	r3, #128	; 0x80
    938e:	b510      	push	{r4, lr}
    9390:	0052      	lsls	r2, r2, #1
    9392:	00db      	lsls	r3, r3, #3
    9394:	f000 f802 	bl	939c <setvbuf>
    9398:	bd10      	pop	{r4, pc}
	...

0000939c <setvbuf>:
    939c:	b5f0      	push	{r4, r5, r6, r7, lr}
    939e:	001d      	movs	r5, r3
    93a0:	4b4f      	ldr	r3, [pc, #316]	; (94e0 <setvbuf+0x144>)
    93a2:	b085      	sub	sp, #20
    93a4:	681e      	ldr	r6, [r3, #0]
    93a6:	0004      	movs	r4, r0
    93a8:	000f      	movs	r7, r1
    93aa:	9200      	str	r2, [sp, #0]
    93ac:	2e00      	cmp	r6, #0
    93ae:	d005      	beq.n	93bc <setvbuf+0x20>
    93b0:	69b3      	ldr	r3, [r6, #24]
    93b2:	2b00      	cmp	r3, #0
    93b4:	d102      	bne.n	93bc <setvbuf+0x20>
    93b6:	0030      	movs	r0, r6
    93b8:	f000 f9b6 	bl	9728 <__sinit>
    93bc:	4b49      	ldr	r3, [pc, #292]	; (94e4 <setvbuf+0x148>)
    93be:	429c      	cmp	r4, r3
    93c0:	d150      	bne.n	9464 <setvbuf+0xc8>
    93c2:	6874      	ldr	r4, [r6, #4]
    93c4:	9b00      	ldr	r3, [sp, #0]
    93c6:	2b02      	cmp	r3, #2
    93c8:	d005      	beq.n	93d6 <setvbuf+0x3a>
    93ca:	2b01      	cmp	r3, #1
    93cc:	d900      	bls.n	93d0 <setvbuf+0x34>
    93ce:	e084      	b.n	94da <setvbuf+0x13e>
    93d0:	2d00      	cmp	r5, #0
    93d2:	da00      	bge.n	93d6 <setvbuf+0x3a>
    93d4:	e081      	b.n	94da <setvbuf+0x13e>
    93d6:	0021      	movs	r1, r4
    93d8:	0030      	movs	r0, r6
    93da:	f000 f937 	bl	964c <_fflush_r>
    93de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    93e0:	2900      	cmp	r1, #0
    93e2:	d008      	beq.n	93f6 <setvbuf+0x5a>
    93e4:	0023      	movs	r3, r4
    93e6:	3344      	adds	r3, #68	; 0x44
    93e8:	4299      	cmp	r1, r3
    93ea:	d002      	beq.n	93f2 <setvbuf+0x56>
    93ec:	0030      	movs	r0, r6
    93ee:	f000 faa7 	bl	9940 <_free_r>
    93f2:	2300      	movs	r3, #0
    93f4:	6363      	str	r3, [r4, #52]	; 0x34
    93f6:	2300      	movs	r3, #0
    93f8:	61a3      	str	r3, [r4, #24]
    93fa:	6063      	str	r3, [r4, #4]
    93fc:	89a3      	ldrh	r3, [r4, #12]
    93fe:	061b      	lsls	r3, r3, #24
    9400:	d503      	bpl.n	940a <setvbuf+0x6e>
    9402:	6921      	ldr	r1, [r4, #16]
    9404:	0030      	movs	r0, r6
    9406:	f000 fa9b 	bl	9940 <_free_r>
    940a:	89a3      	ldrh	r3, [r4, #12]
    940c:	4a36      	ldr	r2, [pc, #216]	; (94e8 <setvbuf+0x14c>)
    940e:	4013      	ands	r3, r2
    9410:	81a3      	strh	r3, [r4, #12]
    9412:	9b00      	ldr	r3, [sp, #0]
    9414:	2b02      	cmp	r3, #2
    9416:	d05a      	beq.n	94ce <setvbuf+0x132>
    9418:	ab03      	add	r3, sp, #12
    941a:	aa02      	add	r2, sp, #8
    941c:	0021      	movs	r1, r4
    941e:	0030      	movs	r0, r6
    9420:	f000 fa18 	bl	9854 <__swhatbuf_r>
    9424:	89a3      	ldrh	r3, [r4, #12]
    9426:	4318      	orrs	r0, r3
    9428:	81a0      	strh	r0, [r4, #12]
    942a:	2d00      	cmp	r5, #0
    942c:	d124      	bne.n	9478 <setvbuf+0xdc>
    942e:	9d02      	ldr	r5, [sp, #8]
    9430:	0028      	movs	r0, r5
    9432:	f000 fa7b 	bl	992c <malloc>
    9436:	9501      	str	r5, [sp, #4]
    9438:	1e07      	subs	r7, r0, #0
    943a:	d142      	bne.n	94c2 <setvbuf+0x126>
    943c:	9b02      	ldr	r3, [sp, #8]
    943e:	9301      	str	r3, [sp, #4]
    9440:	42ab      	cmp	r3, r5
    9442:	d139      	bne.n	94b8 <setvbuf+0x11c>
    9444:	2001      	movs	r0, #1
    9446:	4240      	negs	r0, r0
    9448:	2302      	movs	r3, #2
    944a:	89a2      	ldrh	r2, [r4, #12]
    944c:	4313      	orrs	r3, r2
    944e:	81a3      	strh	r3, [r4, #12]
    9450:	2300      	movs	r3, #0
    9452:	60a3      	str	r3, [r4, #8]
    9454:	0023      	movs	r3, r4
    9456:	3347      	adds	r3, #71	; 0x47
    9458:	6023      	str	r3, [r4, #0]
    945a:	6123      	str	r3, [r4, #16]
    945c:	2301      	movs	r3, #1
    945e:	6163      	str	r3, [r4, #20]
    9460:	b005      	add	sp, #20
    9462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9464:	4b21      	ldr	r3, [pc, #132]	; (94ec <setvbuf+0x150>)
    9466:	429c      	cmp	r4, r3
    9468:	d101      	bne.n	946e <setvbuf+0xd2>
    946a:	68b4      	ldr	r4, [r6, #8]
    946c:	e7aa      	b.n	93c4 <setvbuf+0x28>
    946e:	4b20      	ldr	r3, [pc, #128]	; (94f0 <setvbuf+0x154>)
    9470:	429c      	cmp	r4, r3
    9472:	d1a7      	bne.n	93c4 <setvbuf+0x28>
    9474:	68f4      	ldr	r4, [r6, #12]
    9476:	e7a5      	b.n	93c4 <setvbuf+0x28>
    9478:	2f00      	cmp	r7, #0
    947a:	d0d9      	beq.n	9430 <setvbuf+0x94>
    947c:	69b3      	ldr	r3, [r6, #24]
    947e:	2b00      	cmp	r3, #0
    9480:	d102      	bne.n	9488 <setvbuf+0xec>
    9482:	0030      	movs	r0, r6
    9484:	f000 f950 	bl	9728 <__sinit>
    9488:	9b00      	ldr	r3, [sp, #0]
    948a:	2b01      	cmp	r3, #1
    948c:	d103      	bne.n	9496 <setvbuf+0xfa>
    948e:	89a3      	ldrh	r3, [r4, #12]
    9490:	9a00      	ldr	r2, [sp, #0]
    9492:	431a      	orrs	r2, r3
    9494:	81a2      	strh	r2, [r4, #12]
    9496:	2008      	movs	r0, #8
    9498:	89a3      	ldrh	r3, [r4, #12]
    949a:	6027      	str	r7, [r4, #0]
    949c:	6127      	str	r7, [r4, #16]
    949e:	6165      	str	r5, [r4, #20]
    94a0:	4018      	ands	r0, r3
    94a2:	d018      	beq.n	94d6 <setvbuf+0x13a>
    94a4:	2001      	movs	r0, #1
    94a6:	4018      	ands	r0, r3
    94a8:	2300      	movs	r3, #0
    94aa:	4298      	cmp	r0, r3
    94ac:	d011      	beq.n	94d2 <setvbuf+0x136>
    94ae:	426d      	negs	r5, r5
    94b0:	60a3      	str	r3, [r4, #8]
    94b2:	61a5      	str	r5, [r4, #24]
    94b4:	0018      	movs	r0, r3
    94b6:	e7d3      	b.n	9460 <setvbuf+0xc4>
    94b8:	9801      	ldr	r0, [sp, #4]
    94ba:	f000 fa37 	bl	992c <malloc>
    94be:	1e07      	subs	r7, r0, #0
    94c0:	d0c0      	beq.n	9444 <setvbuf+0xa8>
    94c2:	2380      	movs	r3, #128	; 0x80
    94c4:	89a2      	ldrh	r2, [r4, #12]
    94c6:	9d01      	ldr	r5, [sp, #4]
    94c8:	4313      	orrs	r3, r2
    94ca:	81a3      	strh	r3, [r4, #12]
    94cc:	e7d6      	b.n	947c <setvbuf+0xe0>
    94ce:	2000      	movs	r0, #0
    94d0:	e7ba      	b.n	9448 <setvbuf+0xac>
    94d2:	60a5      	str	r5, [r4, #8]
    94d4:	e7c4      	b.n	9460 <setvbuf+0xc4>
    94d6:	60a0      	str	r0, [r4, #8]
    94d8:	e7c2      	b.n	9460 <setvbuf+0xc4>
    94da:	2001      	movs	r0, #1
    94dc:	4240      	negs	r0, r0
    94de:	e7bf      	b.n	9460 <setvbuf+0xc4>
    94e0:	20000128 	.word	0x20000128
    94e4:	0000b078 	.word	0x0000b078
    94e8:	fffff35c 	.word	0xfffff35c
    94ec:	0000b098 	.word	0x0000b098
    94f0:	0000b058 	.word	0x0000b058

000094f4 <siprintf>:
    94f4:	b40e      	push	{r1, r2, r3}
    94f6:	b510      	push	{r4, lr}
    94f8:	b09d      	sub	sp, #116	; 0x74
    94fa:	a902      	add	r1, sp, #8
    94fc:	9002      	str	r0, [sp, #8]
    94fe:	6108      	str	r0, [r1, #16]
    9500:	480b      	ldr	r0, [pc, #44]	; (9530 <siprintf+0x3c>)
    9502:	2482      	movs	r4, #130	; 0x82
    9504:	6088      	str	r0, [r1, #8]
    9506:	6148      	str	r0, [r1, #20]
    9508:	2001      	movs	r0, #1
    950a:	4240      	negs	r0, r0
    950c:	ab1f      	add	r3, sp, #124	; 0x7c
    950e:	81c8      	strh	r0, [r1, #14]
    9510:	4808      	ldr	r0, [pc, #32]	; (9534 <siprintf+0x40>)
    9512:	cb04      	ldmia	r3!, {r2}
    9514:	00a4      	lsls	r4, r4, #2
    9516:	6800      	ldr	r0, [r0, #0]
    9518:	9301      	str	r3, [sp, #4]
    951a:	818c      	strh	r4, [r1, #12]
    951c:	f000 fb1a 	bl	9b54 <_svfiprintf_r>
    9520:	2300      	movs	r3, #0
    9522:	9a02      	ldr	r2, [sp, #8]
    9524:	7013      	strb	r3, [r2, #0]
    9526:	b01d      	add	sp, #116	; 0x74
    9528:	bc10      	pop	{r4}
    952a:	bc08      	pop	{r3}
    952c:	b003      	add	sp, #12
    952e:	4718      	bx	r3
    9530:	7fffffff 	.word	0x7fffffff
    9534:	20000128 	.word	0x20000128

00009538 <__sflush_r>:
    9538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    953a:	898a      	ldrh	r2, [r1, #12]
    953c:	0005      	movs	r5, r0
    953e:	000c      	movs	r4, r1
    9540:	0713      	lsls	r3, r2, #28
    9542:	d460      	bmi.n	9606 <__sflush_r+0xce>
    9544:	684b      	ldr	r3, [r1, #4]
    9546:	2b00      	cmp	r3, #0
    9548:	dc04      	bgt.n	9554 <__sflush_r+0x1c>
    954a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    954c:	2b00      	cmp	r3, #0
    954e:	dc01      	bgt.n	9554 <__sflush_r+0x1c>
    9550:	2000      	movs	r0, #0
    9552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9554:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9556:	2f00      	cmp	r7, #0
    9558:	d0fa      	beq.n	9550 <__sflush_r+0x18>
    955a:	2300      	movs	r3, #0
    955c:	682e      	ldr	r6, [r5, #0]
    955e:	602b      	str	r3, [r5, #0]
    9560:	2380      	movs	r3, #128	; 0x80
    9562:	015b      	lsls	r3, r3, #5
    9564:	401a      	ands	r2, r3
    9566:	d034      	beq.n	95d2 <__sflush_r+0x9a>
    9568:	6d60      	ldr	r0, [r4, #84]	; 0x54
    956a:	89a3      	ldrh	r3, [r4, #12]
    956c:	075b      	lsls	r3, r3, #29
    956e:	d506      	bpl.n	957e <__sflush_r+0x46>
    9570:	6863      	ldr	r3, [r4, #4]
    9572:	1ac0      	subs	r0, r0, r3
    9574:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9576:	2b00      	cmp	r3, #0
    9578:	d001      	beq.n	957e <__sflush_r+0x46>
    957a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    957c:	1ac0      	subs	r0, r0, r3
    957e:	0002      	movs	r2, r0
    9580:	6a21      	ldr	r1, [r4, #32]
    9582:	2300      	movs	r3, #0
    9584:	0028      	movs	r0, r5
    9586:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9588:	47b8      	blx	r7
    958a:	89a1      	ldrh	r1, [r4, #12]
    958c:	1c43      	adds	r3, r0, #1
    958e:	d106      	bne.n	959e <__sflush_r+0x66>
    9590:	682b      	ldr	r3, [r5, #0]
    9592:	2b1d      	cmp	r3, #29
    9594:	d831      	bhi.n	95fa <__sflush_r+0xc2>
    9596:	4a2c      	ldr	r2, [pc, #176]	; (9648 <__sflush_r+0x110>)
    9598:	40da      	lsrs	r2, r3
    959a:	07d3      	lsls	r3, r2, #31
    959c:	d52d      	bpl.n	95fa <__sflush_r+0xc2>
    959e:	2300      	movs	r3, #0
    95a0:	6063      	str	r3, [r4, #4]
    95a2:	6923      	ldr	r3, [r4, #16]
    95a4:	6023      	str	r3, [r4, #0]
    95a6:	04cb      	lsls	r3, r1, #19
    95a8:	d505      	bpl.n	95b6 <__sflush_r+0x7e>
    95aa:	1c43      	adds	r3, r0, #1
    95ac:	d102      	bne.n	95b4 <__sflush_r+0x7c>
    95ae:	682b      	ldr	r3, [r5, #0]
    95b0:	2b00      	cmp	r3, #0
    95b2:	d100      	bne.n	95b6 <__sflush_r+0x7e>
    95b4:	6560      	str	r0, [r4, #84]	; 0x54
    95b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    95b8:	602e      	str	r6, [r5, #0]
    95ba:	2900      	cmp	r1, #0
    95bc:	d0c8      	beq.n	9550 <__sflush_r+0x18>
    95be:	0023      	movs	r3, r4
    95c0:	3344      	adds	r3, #68	; 0x44
    95c2:	4299      	cmp	r1, r3
    95c4:	d002      	beq.n	95cc <__sflush_r+0x94>
    95c6:	0028      	movs	r0, r5
    95c8:	f000 f9ba 	bl	9940 <_free_r>
    95cc:	2000      	movs	r0, #0
    95ce:	6360      	str	r0, [r4, #52]	; 0x34
    95d0:	e7bf      	b.n	9552 <__sflush_r+0x1a>
    95d2:	2301      	movs	r3, #1
    95d4:	6a21      	ldr	r1, [r4, #32]
    95d6:	0028      	movs	r0, r5
    95d8:	47b8      	blx	r7
    95da:	1c43      	adds	r3, r0, #1
    95dc:	d1c5      	bne.n	956a <__sflush_r+0x32>
    95de:	682b      	ldr	r3, [r5, #0]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d0c2      	beq.n	956a <__sflush_r+0x32>
    95e4:	2b1d      	cmp	r3, #29
    95e6:	d001      	beq.n	95ec <__sflush_r+0xb4>
    95e8:	2b16      	cmp	r3, #22
    95ea:	d101      	bne.n	95f0 <__sflush_r+0xb8>
    95ec:	602e      	str	r6, [r5, #0]
    95ee:	e7af      	b.n	9550 <__sflush_r+0x18>
    95f0:	2340      	movs	r3, #64	; 0x40
    95f2:	89a2      	ldrh	r2, [r4, #12]
    95f4:	4313      	orrs	r3, r2
    95f6:	81a3      	strh	r3, [r4, #12]
    95f8:	e7ab      	b.n	9552 <__sflush_r+0x1a>
    95fa:	2340      	movs	r3, #64	; 0x40
    95fc:	430b      	orrs	r3, r1
    95fe:	2001      	movs	r0, #1
    9600:	81a3      	strh	r3, [r4, #12]
    9602:	4240      	negs	r0, r0
    9604:	e7a5      	b.n	9552 <__sflush_r+0x1a>
    9606:	690f      	ldr	r7, [r1, #16]
    9608:	2f00      	cmp	r7, #0
    960a:	d0a1      	beq.n	9550 <__sflush_r+0x18>
    960c:	680b      	ldr	r3, [r1, #0]
    960e:	600f      	str	r7, [r1, #0]
    9610:	1bdb      	subs	r3, r3, r7
    9612:	9301      	str	r3, [sp, #4]
    9614:	2300      	movs	r3, #0
    9616:	0792      	lsls	r2, r2, #30
    9618:	d100      	bne.n	961c <__sflush_r+0xe4>
    961a:	694b      	ldr	r3, [r1, #20]
    961c:	60a3      	str	r3, [r4, #8]
    961e:	9b01      	ldr	r3, [sp, #4]
    9620:	2b00      	cmp	r3, #0
    9622:	dc00      	bgt.n	9626 <__sflush_r+0xee>
    9624:	e794      	b.n	9550 <__sflush_r+0x18>
    9626:	9b01      	ldr	r3, [sp, #4]
    9628:	003a      	movs	r2, r7
    962a:	6a21      	ldr	r1, [r4, #32]
    962c:	0028      	movs	r0, r5
    962e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9630:	47b0      	blx	r6
    9632:	2800      	cmp	r0, #0
    9634:	dc03      	bgt.n	963e <__sflush_r+0x106>
    9636:	2340      	movs	r3, #64	; 0x40
    9638:	89a2      	ldrh	r2, [r4, #12]
    963a:	4313      	orrs	r3, r2
    963c:	e7df      	b.n	95fe <__sflush_r+0xc6>
    963e:	9b01      	ldr	r3, [sp, #4]
    9640:	183f      	adds	r7, r7, r0
    9642:	1a1b      	subs	r3, r3, r0
    9644:	9301      	str	r3, [sp, #4]
    9646:	e7ea      	b.n	961e <__sflush_r+0xe6>
    9648:	20400001 	.word	0x20400001

0000964c <_fflush_r>:
    964c:	690b      	ldr	r3, [r1, #16]
    964e:	b570      	push	{r4, r5, r6, lr}
    9650:	0005      	movs	r5, r0
    9652:	000c      	movs	r4, r1
    9654:	2b00      	cmp	r3, #0
    9656:	d101      	bne.n	965c <_fflush_r+0x10>
    9658:	2000      	movs	r0, #0
    965a:	bd70      	pop	{r4, r5, r6, pc}
    965c:	2800      	cmp	r0, #0
    965e:	d004      	beq.n	966a <_fflush_r+0x1e>
    9660:	6983      	ldr	r3, [r0, #24]
    9662:	2b00      	cmp	r3, #0
    9664:	d101      	bne.n	966a <_fflush_r+0x1e>
    9666:	f000 f85f 	bl	9728 <__sinit>
    966a:	4b0b      	ldr	r3, [pc, #44]	; (9698 <_fflush_r+0x4c>)
    966c:	429c      	cmp	r4, r3
    966e:	d109      	bne.n	9684 <_fflush_r+0x38>
    9670:	686c      	ldr	r4, [r5, #4]
    9672:	220c      	movs	r2, #12
    9674:	5ea3      	ldrsh	r3, [r4, r2]
    9676:	2b00      	cmp	r3, #0
    9678:	d0ee      	beq.n	9658 <_fflush_r+0xc>
    967a:	0021      	movs	r1, r4
    967c:	0028      	movs	r0, r5
    967e:	f7ff ff5b 	bl	9538 <__sflush_r>
    9682:	e7ea      	b.n	965a <_fflush_r+0xe>
    9684:	4b05      	ldr	r3, [pc, #20]	; (969c <_fflush_r+0x50>)
    9686:	429c      	cmp	r4, r3
    9688:	d101      	bne.n	968e <_fflush_r+0x42>
    968a:	68ac      	ldr	r4, [r5, #8]
    968c:	e7f1      	b.n	9672 <_fflush_r+0x26>
    968e:	4b04      	ldr	r3, [pc, #16]	; (96a0 <_fflush_r+0x54>)
    9690:	429c      	cmp	r4, r3
    9692:	d1ee      	bne.n	9672 <_fflush_r+0x26>
    9694:	68ec      	ldr	r4, [r5, #12]
    9696:	e7ec      	b.n	9672 <_fflush_r+0x26>
    9698:	0000b078 	.word	0x0000b078
    969c:	0000b098 	.word	0x0000b098
    96a0:	0000b058 	.word	0x0000b058

000096a4 <_cleanup_r>:
    96a4:	b510      	push	{r4, lr}
    96a6:	4902      	ldr	r1, [pc, #8]	; (96b0 <_cleanup_r+0xc>)
    96a8:	f000 f8b2 	bl	9810 <_fwalk_reent>
    96ac:	bd10      	pop	{r4, pc}
    96ae:	46c0      	nop			; (mov r8, r8)
    96b0:	0000964d 	.word	0x0000964d

000096b4 <std.isra.0>:
    96b4:	2300      	movs	r3, #0
    96b6:	b510      	push	{r4, lr}
    96b8:	0004      	movs	r4, r0
    96ba:	6003      	str	r3, [r0, #0]
    96bc:	6043      	str	r3, [r0, #4]
    96be:	6083      	str	r3, [r0, #8]
    96c0:	8181      	strh	r1, [r0, #12]
    96c2:	6643      	str	r3, [r0, #100]	; 0x64
    96c4:	81c2      	strh	r2, [r0, #14]
    96c6:	6103      	str	r3, [r0, #16]
    96c8:	6143      	str	r3, [r0, #20]
    96ca:	6183      	str	r3, [r0, #24]
    96cc:	0019      	movs	r1, r3
    96ce:	2208      	movs	r2, #8
    96d0:	305c      	adds	r0, #92	; 0x5c
    96d2:	f7ff fe36 	bl	9342 <memset>
    96d6:	4b05      	ldr	r3, [pc, #20]	; (96ec <std.isra.0+0x38>)
    96d8:	6224      	str	r4, [r4, #32]
    96da:	6263      	str	r3, [r4, #36]	; 0x24
    96dc:	4b04      	ldr	r3, [pc, #16]	; (96f0 <std.isra.0+0x3c>)
    96de:	62a3      	str	r3, [r4, #40]	; 0x28
    96e0:	4b04      	ldr	r3, [pc, #16]	; (96f4 <std.isra.0+0x40>)
    96e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    96e4:	4b04      	ldr	r3, [pc, #16]	; (96f8 <std.isra.0+0x44>)
    96e6:	6323      	str	r3, [r4, #48]	; 0x30
    96e8:	bd10      	pop	{r4, pc}
    96ea:	46c0      	nop			; (mov r8, r8)
    96ec:	0000a319 	.word	0x0000a319
    96f0:	0000a341 	.word	0x0000a341
    96f4:	0000a379 	.word	0x0000a379
    96f8:	0000a3a5 	.word	0x0000a3a5

000096fc <__sfmoreglue>:
    96fc:	b570      	push	{r4, r5, r6, lr}
    96fe:	2568      	movs	r5, #104	; 0x68
    9700:	1e4a      	subs	r2, r1, #1
    9702:	4355      	muls	r5, r2
    9704:	000e      	movs	r6, r1
    9706:	0029      	movs	r1, r5
    9708:	3174      	adds	r1, #116	; 0x74
    970a:	f000 f963 	bl	99d4 <_malloc_r>
    970e:	1e04      	subs	r4, r0, #0
    9710:	d008      	beq.n	9724 <__sfmoreglue+0x28>
    9712:	2100      	movs	r1, #0
    9714:	002a      	movs	r2, r5
    9716:	6001      	str	r1, [r0, #0]
    9718:	6046      	str	r6, [r0, #4]
    971a:	300c      	adds	r0, #12
    971c:	60a0      	str	r0, [r4, #8]
    971e:	3268      	adds	r2, #104	; 0x68
    9720:	f7ff fe0f 	bl	9342 <memset>
    9724:	0020      	movs	r0, r4
    9726:	bd70      	pop	{r4, r5, r6, pc}

00009728 <__sinit>:
    9728:	6983      	ldr	r3, [r0, #24]
    972a:	b513      	push	{r0, r1, r4, lr}
    972c:	0004      	movs	r4, r0
    972e:	2b00      	cmp	r3, #0
    9730:	d128      	bne.n	9784 <__sinit+0x5c>
    9732:	6483      	str	r3, [r0, #72]	; 0x48
    9734:	64c3      	str	r3, [r0, #76]	; 0x4c
    9736:	6503      	str	r3, [r0, #80]	; 0x50
    9738:	4b13      	ldr	r3, [pc, #76]	; (9788 <__sinit+0x60>)
    973a:	4a14      	ldr	r2, [pc, #80]	; (978c <__sinit+0x64>)
    973c:	681b      	ldr	r3, [r3, #0]
    973e:	6282      	str	r2, [r0, #40]	; 0x28
    9740:	9301      	str	r3, [sp, #4]
    9742:	4298      	cmp	r0, r3
    9744:	d101      	bne.n	974a <__sinit+0x22>
    9746:	2301      	movs	r3, #1
    9748:	6183      	str	r3, [r0, #24]
    974a:	0020      	movs	r0, r4
    974c:	f000 f820 	bl	9790 <__sfp>
    9750:	6060      	str	r0, [r4, #4]
    9752:	0020      	movs	r0, r4
    9754:	f000 f81c 	bl	9790 <__sfp>
    9758:	60a0      	str	r0, [r4, #8]
    975a:	0020      	movs	r0, r4
    975c:	f000 f818 	bl	9790 <__sfp>
    9760:	2200      	movs	r2, #0
    9762:	60e0      	str	r0, [r4, #12]
    9764:	2104      	movs	r1, #4
    9766:	6860      	ldr	r0, [r4, #4]
    9768:	f7ff ffa4 	bl	96b4 <std.isra.0>
    976c:	2201      	movs	r2, #1
    976e:	2109      	movs	r1, #9
    9770:	68a0      	ldr	r0, [r4, #8]
    9772:	f7ff ff9f 	bl	96b4 <std.isra.0>
    9776:	2202      	movs	r2, #2
    9778:	2112      	movs	r1, #18
    977a:	68e0      	ldr	r0, [r4, #12]
    977c:	f7ff ff9a 	bl	96b4 <std.isra.0>
    9780:	2301      	movs	r3, #1
    9782:	61a3      	str	r3, [r4, #24]
    9784:	bd13      	pop	{r0, r1, r4, pc}
    9786:	46c0      	nop			; (mov r8, r8)
    9788:	0000b054 	.word	0x0000b054
    978c:	000096a5 	.word	0x000096a5

00009790 <__sfp>:
    9790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9792:	4b1e      	ldr	r3, [pc, #120]	; (980c <__sfp+0x7c>)
    9794:	0007      	movs	r7, r0
    9796:	681e      	ldr	r6, [r3, #0]
    9798:	69b3      	ldr	r3, [r6, #24]
    979a:	2b00      	cmp	r3, #0
    979c:	d102      	bne.n	97a4 <__sfp+0x14>
    979e:	0030      	movs	r0, r6
    97a0:	f7ff ffc2 	bl	9728 <__sinit>
    97a4:	3648      	adds	r6, #72	; 0x48
    97a6:	68b4      	ldr	r4, [r6, #8]
    97a8:	6873      	ldr	r3, [r6, #4]
    97aa:	3b01      	subs	r3, #1
    97ac:	d504      	bpl.n	97b8 <__sfp+0x28>
    97ae:	6833      	ldr	r3, [r6, #0]
    97b0:	2b00      	cmp	r3, #0
    97b2:	d007      	beq.n	97c4 <__sfp+0x34>
    97b4:	6836      	ldr	r6, [r6, #0]
    97b6:	e7f6      	b.n	97a6 <__sfp+0x16>
    97b8:	220c      	movs	r2, #12
    97ba:	5ea5      	ldrsh	r5, [r4, r2]
    97bc:	2d00      	cmp	r5, #0
    97be:	d00d      	beq.n	97dc <__sfp+0x4c>
    97c0:	3468      	adds	r4, #104	; 0x68
    97c2:	e7f2      	b.n	97aa <__sfp+0x1a>
    97c4:	2104      	movs	r1, #4
    97c6:	0038      	movs	r0, r7
    97c8:	f7ff ff98 	bl	96fc <__sfmoreglue>
    97cc:	6030      	str	r0, [r6, #0]
    97ce:	2800      	cmp	r0, #0
    97d0:	d1f0      	bne.n	97b4 <__sfp+0x24>
    97d2:	230c      	movs	r3, #12
    97d4:	0004      	movs	r4, r0
    97d6:	603b      	str	r3, [r7, #0]
    97d8:	0020      	movs	r0, r4
    97da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97dc:	2301      	movs	r3, #1
    97de:	0020      	movs	r0, r4
    97e0:	425b      	negs	r3, r3
    97e2:	81e3      	strh	r3, [r4, #14]
    97e4:	3302      	adds	r3, #2
    97e6:	81a3      	strh	r3, [r4, #12]
    97e8:	6665      	str	r5, [r4, #100]	; 0x64
    97ea:	6025      	str	r5, [r4, #0]
    97ec:	60a5      	str	r5, [r4, #8]
    97ee:	6065      	str	r5, [r4, #4]
    97f0:	6125      	str	r5, [r4, #16]
    97f2:	6165      	str	r5, [r4, #20]
    97f4:	61a5      	str	r5, [r4, #24]
    97f6:	2208      	movs	r2, #8
    97f8:	0029      	movs	r1, r5
    97fa:	305c      	adds	r0, #92	; 0x5c
    97fc:	f7ff fda1 	bl	9342 <memset>
    9800:	6365      	str	r5, [r4, #52]	; 0x34
    9802:	63a5      	str	r5, [r4, #56]	; 0x38
    9804:	64a5      	str	r5, [r4, #72]	; 0x48
    9806:	64e5      	str	r5, [r4, #76]	; 0x4c
    9808:	e7e6      	b.n	97d8 <__sfp+0x48>
    980a:	46c0      	nop			; (mov r8, r8)
    980c:	0000b054 	.word	0x0000b054

00009810 <_fwalk_reent>:
    9810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9812:	0004      	movs	r4, r0
    9814:	0007      	movs	r7, r0
    9816:	2600      	movs	r6, #0
    9818:	9101      	str	r1, [sp, #4]
    981a:	3448      	adds	r4, #72	; 0x48
    981c:	2c00      	cmp	r4, #0
    981e:	d101      	bne.n	9824 <_fwalk_reent+0x14>
    9820:	0030      	movs	r0, r6
    9822:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9824:	6863      	ldr	r3, [r4, #4]
    9826:	68a5      	ldr	r5, [r4, #8]
    9828:	9300      	str	r3, [sp, #0]
    982a:	9b00      	ldr	r3, [sp, #0]
    982c:	3b01      	subs	r3, #1
    982e:	9300      	str	r3, [sp, #0]
    9830:	d501      	bpl.n	9836 <_fwalk_reent+0x26>
    9832:	6824      	ldr	r4, [r4, #0]
    9834:	e7f2      	b.n	981c <_fwalk_reent+0xc>
    9836:	89ab      	ldrh	r3, [r5, #12]
    9838:	2b01      	cmp	r3, #1
    983a:	d908      	bls.n	984e <_fwalk_reent+0x3e>
    983c:	220e      	movs	r2, #14
    983e:	5eab      	ldrsh	r3, [r5, r2]
    9840:	3301      	adds	r3, #1
    9842:	d004      	beq.n	984e <_fwalk_reent+0x3e>
    9844:	0029      	movs	r1, r5
    9846:	0038      	movs	r0, r7
    9848:	9b01      	ldr	r3, [sp, #4]
    984a:	4798      	blx	r3
    984c:	4306      	orrs	r6, r0
    984e:	3568      	adds	r5, #104	; 0x68
    9850:	e7eb      	b.n	982a <_fwalk_reent+0x1a>
	...

00009854 <__swhatbuf_r>:
    9854:	b570      	push	{r4, r5, r6, lr}
    9856:	000e      	movs	r6, r1
    9858:	001d      	movs	r5, r3
    985a:	230e      	movs	r3, #14
    985c:	5ec9      	ldrsh	r1, [r1, r3]
    985e:	b090      	sub	sp, #64	; 0x40
    9860:	0014      	movs	r4, r2
    9862:	2900      	cmp	r1, #0
    9864:	da07      	bge.n	9876 <__swhatbuf_r+0x22>
    9866:	2300      	movs	r3, #0
    9868:	602b      	str	r3, [r5, #0]
    986a:	89b3      	ldrh	r3, [r6, #12]
    986c:	061b      	lsls	r3, r3, #24
    986e:	d411      	bmi.n	9894 <__swhatbuf_r+0x40>
    9870:	2380      	movs	r3, #128	; 0x80
    9872:	00db      	lsls	r3, r3, #3
    9874:	e00f      	b.n	9896 <__swhatbuf_r+0x42>
    9876:	aa01      	add	r2, sp, #4
    9878:	f000 fe8c 	bl	a594 <_fstat_r>
    987c:	2800      	cmp	r0, #0
    987e:	dbf2      	blt.n	9866 <__swhatbuf_r+0x12>
    9880:	22f0      	movs	r2, #240	; 0xf0
    9882:	9b02      	ldr	r3, [sp, #8]
    9884:	0212      	lsls	r2, r2, #8
    9886:	4013      	ands	r3, r2
    9888:	4a05      	ldr	r2, [pc, #20]	; (98a0 <__swhatbuf_r+0x4c>)
    988a:	189b      	adds	r3, r3, r2
    988c:	425a      	negs	r2, r3
    988e:	4153      	adcs	r3, r2
    9890:	602b      	str	r3, [r5, #0]
    9892:	e7ed      	b.n	9870 <__swhatbuf_r+0x1c>
    9894:	2340      	movs	r3, #64	; 0x40
    9896:	2000      	movs	r0, #0
    9898:	6023      	str	r3, [r4, #0]
    989a:	b010      	add	sp, #64	; 0x40
    989c:	bd70      	pop	{r4, r5, r6, pc}
    989e:	46c0      	nop			; (mov r8, r8)
    98a0:	ffffe000 	.word	0xffffe000

000098a4 <__smakebuf_r>:
    98a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    98a6:	2602      	movs	r6, #2
    98a8:	898b      	ldrh	r3, [r1, #12]
    98aa:	0005      	movs	r5, r0
    98ac:	000c      	movs	r4, r1
    98ae:	4233      	tst	r3, r6
    98b0:	d006      	beq.n	98c0 <__smakebuf_r+0x1c>
    98b2:	0023      	movs	r3, r4
    98b4:	3347      	adds	r3, #71	; 0x47
    98b6:	6023      	str	r3, [r4, #0]
    98b8:	6123      	str	r3, [r4, #16]
    98ba:	2301      	movs	r3, #1
    98bc:	6163      	str	r3, [r4, #20]
    98be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    98c0:	ab01      	add	r3, sp, #4
    98c2:	466a      	mov	r2, sp
    98c4:	f7ff ffc6 	bl	9854 <__swhatbuf_r>
    98c8:	9900      	ldr	r1, [sp, #0]
    98ca:	0007      	movs	r7, r0
    98cc:	0028      	movs	r0, r5
    98ce:	f000 f881 	bl	99d4 <_malloc_r>
    98d2:	2800      	cmp	r0, #0
    98d4:	d108      	bne.n	98e8 <__smakebuf_r+0x44>
    98d6:	220c      	movs	r2, #12
    98d8:	5ea3      	ldrsh	r3, [r4, r2]
    98da:	059a      	lsls	r2, r3, #22
    98dc:	d4ef      	bmi.n	98be <__smakebuf_r+0x1a>
    98de:	2203      	movs	r2, #3
    98e0:	4393      	bics	r3, r2
    98e2:	431e      	orrs	r6, r3
    98e4:	81a6      	strh	r6, [r4, #12]
    98e6:	e7e4      	b.n	98b2 <__smakebuf_r+0xe>
    98e8:	4b0f      	ldr	r3, [pc, #60]	; (9928 <__smakebuf_r+0x84>)
    98ea:	62ab      	str	r3, [r5, #40]	; 0x28
    98ec:	2380      	movs	r3, #128	; 0x80
    98ee:	89a2      	ldrh	r2, [r4, #12]
    98f0:	6020      	str	r0, [r4, #0]
    98f2:	4313      	orrs	r3, r2
    98f4:	81a3      	strh	r3, [r4, #12]
    98f6:	9b00      	ldr	r3, [sp, #0]
    98f8:	6120      	str	r0, [r4, #16]
    98fa:	6163      	str	r3, [r4, #20]
    98fc:	9b01      	ldr	r3, [sp, #4]
    98fe:	2b00      	cmp	r3, #0
    9900:	d00d      	beq.n	991e <__smakebuf_r+0x7a>
    9902:	230e      	movs	r3, #14
    9904:	5ee1      	ldrsh	r1, [r4, r3]
    9906:	0028      	movs	r0, r5
    9908:	f000 fe56 	bl	a5b8 <_isatty_r>
    990c:	2800      	cmp	r0, #0
    990e:	d006      	beq.n	991e <__smakebuf_r+0x7a>
    9910:	2203      	movs	r2, #3
    9912:	89a3      	ldrh	r3, [r4, #12]
    9914:	4393      	bics	r3, r2
    9916:	001a      	movs	r2, r3
    9918:	2301      	movs	r3, #1
    991a:	4313      	orrs	r3, r2
    991c:	81a3      	strh	r3, [r4, #12]
    991e:	89a0      	ldrh	r0, [r4, #12]
    9920:	4338      	orrs	r0, r7
    9922:	81a0      	strh	r0, [r4, #12]
    9924:	e7cb      	b.n	98be <__smakebuf_r+0x1a>
    9926:	46c0      	nop			; (mov r8, r8)
    9928:	000096a5 	.word	0x000096a5

0000992c <malloc>:
    992c:	b510      	push	{r4, lr}
    992e:	4b03      	ldr	r3, [pc, #12]	; (993c <malloc+0x10>)
    9930:	0001      	movs	r1, r0
    9932:	6818      	ldr	r0, [r3, #0]
    9934:	f000 f84e 	bl	99d4 <_malloc_r>
    9938:	bd10      	pop	{r4, pc}
    993a:	46c0      	nop			; (mov r8, r8)
    993c:	20000128 	.word	0x20000128

00009940 <_free_r>:
    9940:	b570      	push	{r4, r5, r6, lr}
    9942:	0005      	movs	r5, r0
    9944:	2900      	cmp	r1, #0
    9946:	d010      	beq.n	996a <_free_r+0x2a>
    9948:	1f0c      	subs	r4, r1, #4
    994a:	6823      	ldr	r3, [r4, #0]
    994c:	2b00      	cmp	r3, #0
    994e:	da00      	bge.n	9952 <_free_r+0x12>
    9950:	18e4      	adds	r4, r4, r3
    9952:	0028      	movs	r0, r5
    9954:	f000 fe73 	bl	a63e <__malloc_lock>
    9958:	4a1d      	ldr	r2, [pc, #116]	; (99d0 <_free_r+0x90>)
    995a:	6813      	ldr	r3, [r2, #0]
    995c:	2b00      	cmp	r3, #0
    995e:	d105      	bne.n	996c <_free_r+0x2c>
    9960:	6063      	str	r3, [r4, #4]
    9962:	6014      	str	r4, [r2, #0]
    9964:	0028      	movs	r0, r5
    9966:	f000 fe6b 	bl	a640 <__malloc_unlock>
    996a:	bd70      	pop	{r4, r5, r6, pc}
    996c:	42a3      	cmp	r3, r4
    996e:	d909      	bls.n	9984 <_free_r+0x44>
    9970:	6821      	ldr	r1, [r4, #0]
    9972:	1860      	adds	r0, r4, r1
    9974:	4283      	cmp	r3, r0
    9976:	d1f3      	bne.n	9960 <_free_r+0x20>
    9978:	6818      	ldr	r0, [r3, #0]
    997a:	685b      	ldr	r3, [r3, #4]
    997c:	1841      	adds	r1, r0, r1
    997e:	6021      	str	r1, [r4, #0]
    9980:	e7ee      	b.n	9960 <_free_r+0x20>
    9982:	0013      	movs	r3, r2
    9984:	685a      	ldr	r2, [r3, #4]
    9986:	2a00      	cmp	r2, #0
    9988:	d001      	beq.n	998e <_free_r+0x4e>
    998a:	42a2      	cmp	r2, r4
    998c:	d9f9      	bls.n	9982 <_free_r+0x42>
    998e:	6819      	ldr	r1, [r3, #0]
    9990:	1858      	adds	r0, r3, r1
    9992:	42a0      	cmp	r0, r4
    9994:	d10b      	bne.n	99ae <_free_r+0x6e>
    9996:	6820      	ldr	r0, [r4, #0]
    9998:	1809      	adds	r1, r1, r0
    999a:	1858      	adds	r0, r3, r1
    999c:	6019      	str	r1, [r3, #0]
    999e:	4282      	cmp	r2, r0
    99a0:	d1e0      	bne.n	9964 <_free_r+0x24>
    99a2:	6810      	ldr	r0, [r2, #0]
    99a4:	6852      	ldr	r2, [r2, #4]
    99a6:	1841      	adds	r1, r0, r1
    99a8:	6019      	str	r1, [r3, #0]
    99aa:	605a      	str	r2, [r3, #4]
    99ac:	e7da      	b.n	9964 <_free_r+0x24>
    99ae:	42a0      	cmp	r0, r4
    99b0:	d902      	bls.n	99b8 <_free_r+0x78>
    99b2:	230c      	movs	r3, #12
    99b4:	602b      	str	r3, [r5, #0]
    99b6:	e7d5      	b.n	9964 <_free_r+0x24>
    99b8:	6821      	ldr	r1, [r4, #0]
    99ba:	1860      	adds	r0, r4, r1
    99bc:	4282      	cmp	r2, r0
    99be:	d103      	bne.n	99c8 <_free_r+0x88>
    99c0:	6810      	ldr	r0, [r2, #0]
    99c2:	6852      	ldr	r2, [r2, #4]
    99c4:	1841      	adds	r1, r0, r1
    99c6:	6021      	str	r1, [r4, #0]
    99c8:	6062      	str	r2, [r4, #4]
    99ca:	605c      	str	r4, [r3, #4]
    99cc:	e7ca      	b.n	9964 <_free_r+0x24>
    99ce:	46c0      	nop			; (mov r8, r8)
    99d0:	200003f0 	.word	0x200003f0

000099d4 <_malloc_r>:
    99d4:	2303      	movs	r3, #3
    99d6:	b570      	push	{r4, r5, r6, lr}
    99d8:	1ccd      	adds	r5, r1, #3
    99da:	439d      	bics	r5, r3
    99dc:	3508      	adds	r5, #8
    99de:	0006      	movs	r6, r0
    99e0:	2d0c      	cmp	r5, #12
    99e2:	d21e      	bcs.n	9a22 <_malloc_r+0x4e>
    99e4:	250c      	movs	r5, #12
    99e6:	42a9      	cmp	r1, r5
    99e8:	d81d      	bhi.n	9a26 <_malloc_r+0x52>
    99ea:	0030      	movs	r0, r6
    99ec:	f000 fe27 	bl	a63e <__malloc_lock>
    99f0:	4a25      	ldr	r2, [pc, #148]	; (9a88 <_malloc_r+0xb4>)
    99f2:	6814      	ldr	r4, [r2, #0]
    99f4:	0021      	movs	r1, r4
    99f6:	2900      	cmp	r1, #0
    99f8:	d119      	bne.n	9a2e <_malloc_r+0x5a>
    99fa:	4c24      	ldr	r4, [pc, #144]	; (9a8c <_malloc_r+0xb8>)
    99fc:	6823      	ldr	r3, [r4, #0]
    99fe:	2b00      	cmp	r3, #0
    9a00:	d103      	bne.n	9a0a <_malloc_r+0x36>
    9a02:	0030      	movs	r0, r6
    9a04:	f000 fc76 	bl	a2f4 <_sbrk_r>
    9a08:	6020      	str	r0, [r4, #0]
    9a0a:	0029      	movs	r1, r5
    9a0c:	0030      	movs	r0, r6
    9a0e:	f000 fc71 	bl	a2f4 <_sbrk_r>
    9a12:	1c43      	adds	r3, r0, #1
    9a14:	d12c      	bne.n	9a70 <_malloc_r+0x9c>
    9a16:	230c      	movs	r3, #12
    9a18:	0030      	movs	r0, r6
    9a1a:	6033      	str	r3, [r6, #0]
    9a1c:	f000 fe10 	bl	a640 <__malloc_unlock>
    9a20:	e003      	b.n	9a2a <_malloc_r+0x56>
    9a22:	2d00      	cmp	r5, #0
    9a24:	dadf      	bge.n	99e6 <_malloc_r+0x12>
    9a26:	230c      	movs	r3, #12
    9a28:	6033      	str	r3, [r6, #0]
    9a2a:	2000      	movs	r0, #0
    9a2c:	bd70      	pop	{r4, r5, r6, pc}
    9a2e:	680b      	ldr	r3, [r1, #0]
    9a30:	1b5b      	subs	r3, r3, r5
    9a32:	d41a      	bmi.n	9a6a <_malloc_r+0x96>
    9a34:	2b0b      	cmp	r3, #11
    9a36:	d903      	bls.n	9a40 <_malloc_r+0x6c>
    9a38:	600b      	str	r3, [r1, #0]
    9a3a:	18cc      	adds	r4, r1, r3
    9a3c:	6025      	str	r5, [r4, #0]
    9a3e:	e003      	b.n	9a48 <_malloc_r+0x74>
    9a40:	428c      	cmp	r4, r1
    9a42:	d10e      	bne.n	9a62 <_malloc_r+0x8e>
    9a44:	6863      	ldr	r3, [r4, #4]
    9a46:	6013      	str	r3, [r2, #0]
    9a48:	0030      	movs	r0, r6
    9a4a:	f000 fdf9 	bl	a640 <__malloc_unlock>
    9a4e:	0020      	movs	r0, r4
    9a50:	2207      	movs	r2, #7
    9a52:	300b      	adds	r0, #11
    9a54:	1d23      	adds	r3, r4, #4
    9a56:	4390      	bics	r0, r2
    9a58:	1ac3      	subs	r3, r0, r3
    9a5a:	d0e7      	beq.n	9a2c <_malloc_r+0x58>
    9a5c:	425a      	negs	r2, r3
    9a5e:	50e2      	str	r2, [r4, r3]
    9a60:	e7e4      	b.n	9a2c <_malloc_r+0x58>
    9a62:	684b      	ldr	r3, [r1, #4]
    9a64:	6063      	str	r3, [r4, #4]
    9a66:	000c      	movs	r4, r1
    9a68:	e7ee      	b.n	9a48 <_malloc_r+0x74>
    9a6a:	000c      	movs	r4, r1
    9a6c:	6849      	ldr	r1, [r1, #4]
    9a6e:	e7c2      	b.n	99f6 <_malloc_r+0x22>
    9a70:	2303      	movs	r3, #3
    9a72:	1cc4      	adds	r4, r0, #3
    9a74:	439c      	bics	r4, r3
    9a76:	42a0      	cmp	r0, r4
    9a78:	d0e0      	beq.n	9a3c <_malloc_r+0x68>
    9a7a:	1a21      	subs	r1, r4, r0
    9a7c:	0030      	movs	r0, r6
    9a7e:	f000 fc39 	bl	a2f4 <_sbrk_r>
    9a82:	1c43      	adds	r3, r0, #1
    9a84:	d1da      	bne.n	9a3c <_malloc_r+0x68>
    9a86:	e7c6      	b.n	9a16 <_malloc_r+0x42>
    9a88:	200003f0 	.word	0x200003f0
    9a8c:	200003f4 	.word	0x200003f4

00009a90 <__ssputs_r>:
    9a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a92:	688e      	ldr	r6, [r1, #8]
    9a94:	b085      	sub	sp, #20
    9a96:	0007      	movs	r7, r0
    9a98:	000c      	movs	r4, r1
    9a9a:	9203      	str	r2, [sp, #12]
    9a9c:	9301      	str	r3, [sp, #4]
    9a9e:	429e      	cmp	r6, r3
    9aa0:	d839      	bhi.n	9b16 <__ssputs_r+0x86>
    9aa2:	2390      	movs	r3, #144	; 0x90
    9aa4:	898a      	ldrh	r2, [r1, #12]
    9aa6:	00db      	lsls	r3, r3, #3
    9aa8:	421a      	tst	r2, r3
    9aaa:	d034      	beq.n	9b16 <__ssputs_r+0x86>
    9aac:	2503      	movs	r5, #3
    9aae:	6909      	ldr	r1, [r1, #16]
    9ab0:	6823      	ldr	r3, [r4, #0]
    9ab2:	1a5b      	subs	r3, r3, r1
    9ab4:	9302      	str	r3, [sp, #8]
    9ab6:	6963      	ldr	r3, [r4, #20]
    9ab8:	9802      	ldr	r0, [sp, #8]
    9aba:	435d      	muls	r5, r3
    9abc:	0feb      	lsrs	r3, r5, #31
    9abe:	195d      	adds	r5, r3, r5
    9ac0:	9b01      	ldr	r3, [sp, #4]
    9ac2:	106d      	asrs	r5, r5, #1
    9ac4:	3301      	adds	r3, #1
    9ac6:	181b      	adds	r3, r3, r0
    9ac8:	42ab      	cmp	r3, r5
    9aca:	d900      	bls.n	9ace <__ssputs_r+0x3e>
    9acc:	001d      	movs	r5, r3
    9ace:	0553      	lsls	r3, r2, #21
    9ad0:	d532      	bpl.n	9b38 <__ssputs_r+0xa8>
    9ad2:	0029      	movs	r1, r5
    9ad4:	0038      	movs	r0, r7
    9ad6:	f7ff ff7d 	bl	99d4 <_malloc_r>
    9ada:	1e06      	subs	r6, r0, #0
    9adc:	d109      	bne.n	9af2 <__ssputs_r+0x62>
    9ade:	230c      	movs	r3, #12
    9ae0:	603b      	str	r3, [r7, #0]
    9ae2:	2340      	movs	r3, #64	; 0x40
    9ae4:	2001      	movs	r0, #1
    9ae6:	89a2      	ldrh	r2, [r4, #12]
    9ae8:	4240      	negs	r0, r0
    9aea:	4313      	orrs	r3, r2
    9aec:	81a3      	strh	r3, [r4, #12]
    9aee:	b005      	add	sp, #20
    9af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9af2:	9a02      	ldr	r2, [sp, #8]
    9af4:	6921      	ldr	r1, [r4, #16]
    9af6:	f7ff fc1b 	bl	9330 <memcpy>
    9afa:	89a3      	ldrh	r3, [r4, #12]
    9afc:	4a14      	ldr	r2, [pc, #80]	; (9b50 <__ssputs_r+0xc0>)
    9afe:	401a      	ands	r2, r3
    9b00:	2380      	movs	r3, #128	; 0x80
    9b02:	4313      	orrs	r3, r2
    9b04:	81a3      	strh	r3, [r4, #12]
    9b06:	9b02      	ldr	r3, [sp, #8]
    9b08:	6126      	str	r6, [r4, #16]
    9b0a:	18f6      	adds	r6, r6, r3
    9b0c:	6026      	str	r6, [r4, #0]
    9b0e:	6165      	str	r5, [r4, #20]
    9b10:	9e01      	ldr	r6, [sp, #4]
    9b12:	1aed      	subs	r5, r5, r3
    9b14:	60a5      	str	r5, [r4, #8]
    9b16:	9b01      	ldr	r3, [sp, #4]
    9b18:	42b3      	cmp	r3, r6
    9b1a:	d200      	bcs.n	9b1e <__ssputs_r+0x8e>
    9b1c:	001e      	movs	r6, r3
    9b1e:	0032      	movs	r2, r6
    9b20:	9903      	ldr	r1, [sp, #12]
    9b22:	6820      	ldr	r0, [r4, #0]
    9b24:	f000 fd79 	bl	a61a <memmove>
    9b28:	68a3      	ldr	r3, [r4, #8]
    9b2a:	2000      	movs	r0, #0
    9b2c:	1b9b      	subs	r3, r3, r6
    9b2e:	60a3      	str	r3, [r4, #8]
    9b30:	6823      	ldr	r3, [r4, #0]
    9b32:	199e      	adds	r6, r3, r6
    9b34:	6026      	str	r6, [r4, #0]
    9b36:	e7da      	b.n	9aee <__ssputs_r+0x5e>
    9b38:	002a      	movs	r2, r5
    9b3a:	0038      	movs	r0, r7
    9b3c:	f000 fd81 	bl	a642 <_realloc_r>
    9b40:	1e06      	subs	r6, r0, #0
    9b42:	d1e0      	bne.n	9b06 <__ssputs_r+0x76>
    9b44:	6921      	ldr	r1, [r4, #16]
    9b46:	0038      	movs	r0, r7
    9b48:	f7ff fefa 	bl	9940 <_free_r>
    9b4c:	e7c7      	b.n	9ade <__ssputs_r+0x4e>
    9b4e:	46c0      	nop			; (mov r8, r8)
    9b50:	fffffb7f 	.word	0xfffffb7f

00009b54 <_svfiprintf_r>:
    9b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b56:	b09f      	sub	sp, #124	; 0x7c
    9b58:	9002      	str	r0, [sp, #8]
    9b5a:	9305      	str	r3, [sp, #20]
    9b5c:	898b      	ldrh	r3, [r1, #12]
    9b5e:	000f      	movs	r7, r1
    9b60:	0016      	movs	r6, r2
    9b62:	061b      	lsls	r3, r3, #24
    9b64:	d511      	bpl.n	9b8a <_svfiprintf_r+0x36>
    9b66:	690b      	ldr	r3, [r1, #16]
    9b68:	2b00      	cmp	r3, #0
    9b6a:	d10e      	bne.n	9b8a <_svfiprintf_r+0x36>
    9b6c:	2140      	movs	r1, #64	; 0x40
    9b6e:	f7ff ff31 	bl	99d4 <_malloc_r>
    9b72:	6038      	str	r0, [r7, #0]
    9b74:	6138      	str	r0, [r7, #16]
    9b76:	2800      	cmp	r0, #0
    9b78:	d105      	bne.n	9b86 <_svfiprintf_r+0x32>
    9b7a:	230c      	movs	r3, #12
    9b7c:	9a02      	ldr	r2, [sp, #8]
    9b7e:	3801      	subs	r0, #1
    9b80:	6013      	str	r3, [r2, #0]
    9b82:	b01f      	add	sp, #124	; 0x7c
    9b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b86:	2340      	movs	r3, #64	; 0x40
    9b88:	617b      	str	r3, [r7, #20]
    9b8a:	2300      	movs	r3, #0
    9b8c:	ad06      	add	r5, sp, #24
    9b8e:	616b      	str	r3, [r5, #20]
    9b90:	3320      	adds	r3, #32
    9b92:	766b      	strb	r3, [r5, #25]
    9b94:	3310      	adds	r3, #16
    9b96:	76ab      	strb	r3, [r5, #26]
    9b98:	0034      	movs	r4, r6
    9b9a:	7823      	ldrb	r3, [r4, #0]
    9b9c:	2b00      	cmp	r3, #0
    9b9e:	d147      	bne.n	9c30 <_svfiprintf_r+0xdc>
    9ba0:	1ba3      	subs	r3, r4, r6
    9ba2:	9304      	str	r3, [sp, #16]
    9ba4:	d00d      	beq.n	9bc2 <_svfiprintf_r+0x6e>
    9ba6:	1ba3      	subs	r3, r4, r6
    9ba8:	0032      	movs	r2, r6
    9baa:	0039      	movs	r1, r7
    9bac:	9802      	ldr	r0, [sp, #8]
    9bae:	f7ff ff6f 	bl	9a90 <__ssputs_r>
    9bb2:	1c43      	adds	r3, r0, #1
    9bb4:	d100      	bne.n	9bb8 <_svfiprintf_r+0x64>
    9bb6:	e0b5      	b.n	9d24 <_svfiprintf_r+0x1d0>
    9bb8:	696a      	ldr	r2, [r5, #20]
    9bba:	9b04      	ldr	r3, [sp, #16]
    9bbc:	4694      	mov	ip, r2
    9bbe:	4463      	add	r3, ip
    9bc0:	616b      	str	r3, [r5, #20]
    9bc2:	7823      	ldrb	r3, [r4, #0]
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	d100      	bne.n	9bca <_svfiprintf_r+0x76>
    9bc8:	e0ac      	b.n	9d24 <_svfiprintf_r+0x1d0>
    9bca:	2201      	movs	r2, #1
    9bcc:	2300      	movs	r3, #0
    9bce:	4252      	negs	r2, r2
    9bd0:	606a      	str	r2, [r5, #4]
    9bd2:	a902      	add	r1, sp, #8
    9bd4:	3254      	adds	r2, #84	; 0x54
    9bd6:	1852      	adds	r2, r2, r1
    9bd8:	3401      	adds	r4, #1
    9bda:	602b      	str	r3, [r5, #0]
    9bdc:	60eb      	str	r3, [r5, #12]
    9bde:	60ab      	str	r3, [r5, #8]
    9be0:	7013      	strb	r3, [r2, #0]
    9be2:	65ab      	str	r3, [r5, #88]	; 0x58
    9be4:	4e58      	ldr	r6, [pc, #352]	; (9d48 <_svfiprintf_r+0x1f4>)
    9be6:	2205      	movs	r2, #5
    9be8:	7821      	ldrb	r1, [r4, #0]
    9bea:	0030      	movs	r0, r6
    9bec:	f000 fd0a 	bl	a604 <memchr>
    9bf0:	1c62      	adds	r2, r4, #1
    9bf2:	2800      	cmp	r0, #0
    9bf4:	d120      	bne.n	9c38 <_svfiprintf_r+0xe4>
    9bf6:	6829      	ldr	r1, [r5, #0]
    9bf8:	06cb      	lsls	r3, r1, #27
    9bfa:	d504      	bpl.n	9c06 <_svfiprintf_r+0xb2>
    9bfc:	2353      	movs	r3, #83	; 0x53
    9bfe:	ae02      	add	r6, sp, #8
    9c00:	3020      	adds	r0, #32
    9c02:	199b      	adds	r3, r3, r6
    9c04:	7018      	strb	r0, [r3, #0]
    9c06:	070b      	lsls	r3, r1, #28
    9c08:	d504      	bpl.n	9c14 <_svfiprintf_r+0xc0>
    9c0a:	2353      	movs	r3, #83	; 0x53
    9c0c:	202b      	movs	r0, #43	; 0x2b
    9c0e:	ae02      	add	r6, sp, #8
    9c10:	199b      	adds	r3, r3, r6
    9c12:	7018      	strb	r0, [r3, #0]
    9c14:	7823      	ldrb	r3, [r4, #0]
    9c16:	2b2a      	cmp	r3, #42	; 0x2a
    9c18:	d016      	beq.n	9c48 <_svfiprintf_r+0xf4>
    9c1a:	2000      	movs	r0, #0
    9c1c:	210a      	movs	r1, #10
    9c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c20:	7822      	ldrb	r2, [r4, #0]
    9c22:	3a30      	subs	r2, #48	; 0x30
    9c24:	2a09      	cmp	r2, #9
    9c26:	d955      	bls.n	9cd4 <_svfiprintf_r+0x180>
    9c28:	2800      	cmp	r0, #0
    9c2a:	d015      	beq.n	9c58 <_svfiprintf_r+0x104>
    9c2c:	9309      	str	r3, [sp, #36]	; 0x24
    9c2e:	e013      	b.n	9c58 <_svfiprintf_r+0x104>
    9c30:	2b25      	cmp	r3, #37	; 0x25
    9c32:	d0b5      	beq.n	9ba0 <_svfiprintf_r+0x4c>
    9c34:	3401      	adds	r4, #1
    9c36:	e7b0      	b.n	9b9a <_svfiprintf_r+0x46>
    9c38:	2301      	movs	r3, #1
    9c3a:	1b80      	subs	r0, r0, r6
    9c3c:	4083      	lsls	r3, r0
    9c3e:	6829      	ldr	r1, [r5, #0]
    9c40:	0014      	movs	r4, r2
    9c42:	430b      	orrs	r3, r1
    9c44:	602b      	str	r3, [r5, #0]
    9c46:	e7cd      	b.n	9be4 <_svfiprintf_r+0x90>
    9c48:	9b05      	ldr	r3, [sp, #20]
    9c4a:	1d18      	adds	r0, r3, #4
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	9005      	str	r0, [sp, #20]
    9c50:	2b00      	cmp	r3, #0
    9c52:	db39      	blt.n	9cc8 <_svfiprintf_r+0x174>
    9c54:	9309      	str	r3, [sp, #36]	; 0x24
    9c56:	0014      	movs	r4, r2
    9c58:	7823      	ldrb	r3, [r4, #0]
    9c5a:	2b2e      	cmp	r3, #46	; 0x2e
    9c5c:	d10b      	bne.n	9c76 <_svfiprintf_r+0x122>
    9c5e:	7863      	ldrb	r3, [r4, #1]
    9c60:	1c62      	adds	r2, r4, #1
    9c62:	2b2a      	cmp	r3, #42	; 0x2a
    9c64:	d13e      	bne.n	9ce4 <_svfiprintf_r+0x190>
    9c66:	9b05      	ldr	r3, [sp, #20]
    9c68:	3402      	adds	r4, #2
    9c6a:	1d1a      	adds	r2, r3, #4
    9c6c:	681b      	ldr	r3, [r3, #0]
    9c6e:	9205      	str	r2, [sp, #20]
    9c70:	2b00      	cmp	r3, #0
    9c72:	db34      	blt.n	9cde <_svfiprintf_r+0x18a>
    9c74:	9307      	str	r3, [sp, #28]
    9c76:	4e35      	ldr	r6, [pc, #212]	; (9d4c <_svfiprintf_r+0x1f8>)
    9c78:	7821      	ldrb	r1, [r4, #0]
    9c7a:	2203      	movs	r2, #3
    9c7c:	0030      	movs	r0, r6
    9c7e:	f000 fcc1 	bl	a604 <memchr>
    9c82:	2800      	cmp	r0, #0
    9c84:	d006      	beq.n	9c94 <_svfiprintf_r+0x140>
    9c86:	2340      	movs	r3, #64	; 0x40
    9c88:	1b80      	subs	r0, r0, r6
    9c8a:	4083      	lsls	r3, r0
    9c8c:	682a      	ldr	r2, [r5, #0]
    9c8e:	3401      	adds	r4, #1
    9c90:	4313      	orrs	r3, r2
    9c92:	602b      	str	r3, [r5, #0]
    9c94:	7821      	ldrb	r1, [r4, #0]
    9c96:	2206      	movs	r2, #6
    9c98:	482d      	ldr	r0, [pc, #180]	; (9d50 <_svfiprintf_r+0x1fc>)
    9c9a:	1c66      	adds	r6, r4, #1
    9c9c:	7629      	strb	r1, [r5, #24]
    9c9e:	f000 fcb1 	bl	a604 <memchr>
    9ca2:	2800      	cmp	r0, #0
    9ca4:	d046      	beq.n	9d34 <_svfiprintf_r+0x1e0>
    9ca6:	4b2b      	ldr	r3, [pc, #172]	; (9d54 <_svfiprintf_r+0x200>)
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d12f      	bne.n	9d0c <_svfiprintf_r+0x1b8>
    9cac:	6829      	ldr	r1, [r5, #0]
    9cae:	9b05      	ldr	r3, [sp, #20]
    9cb0:	2207      	movs	r2, #7
    9cb2:	05c9      	lsls	r1, r1, #23
    9cb4:	d528      	bpl.n	9d08 <_svfiprintf_r+0x1b4>
    9cb6:	189b      	adds	r3, r3, r2
    9cb8:	4393      	bics	r3, r2
    9cba:	3308      	adds	r3, #8
    9cbc:	9305      	str	r3, [sp, #20]
    9cbe:	696b      	ldr	r3, [r5, #20]
    9cc0:	9a03      	ldr	r2, [sp, #12]
    9cc2:	189b      	adds	r3, r3, r2
    9cc4:	616b      	str	r3, [r5, #20]
    9cc6:	e767      	b.n	9b98 <_svfiprintf_r+0x44>
    9cc8:	425b      	negs	r3, r3
    9cca:	60eb      	str	r3, [r5, #12]
    9ccc:	2302      	movs	r3, #2
    9cce:	430b      	orrs	r3, r1
    9cd0:	602b      	str	r3, [r5, #0]
    9cd2:	e7c0      	b.n	9c56 <_svfiprintf_r+0x102>
    9cd4:	434b      	muls	r3, r1
    9cd6:	3401      	adds	r4, #1
    9cd8:	189b      	adds	r3, r3, r2
    9cda:	2001      	movs	r0, #1
    9cdc:	e7a0      	b.n	9c20 <_svfiprintf_r+0xcc>
    9cde:	2301      	movs	r3, #1
    9ce0:	425b      	negs	r3, r3
    9ce2:	e7c7      	b.n	9c74 <_svfiprintf_r+0x120>
    9ce4:	2300      	movs	r3, #0
    9ce6:	0014      	movs	r4, r2
    9ce8:	200a      	movs	r0, #10
    9cea:	001a      	movs	r2, r3
    9cec:	606b      	str	r3, [r5, #4]
    9cee:	7821      	ldrb	r1, [r4, #0]
    9cf0:	3930      	subs	r1, #48	; 0x30
    9cf2:	2909      	cmp	r1, #9
    9cf4:	d903      	bls.n	9cfe <_svfiprintf_r+0x1aa>
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d0bd      	beq.n	9c76 <_svfiprintf_r+0x122>
    9cfa:	9207      	str	r2, [sp, #28]
    9cfc:	e7bb      	b.n	9c76 <_svfiprintf_r+0x122>
    9cfe:	4342      	muls	r2, r0
    9d00:	3401      	adds	r4, #1
    9d02:	1852      	adds	r2, r2, r1
    9d04:	2301      	movs	r3, #1
    9d06:	e7f2      	b.n	9cee <_svfiprintf_r+0x19a>
    9d08:	3307      	adds	r3, #7
    9d0a:	e7d5      	b.n	9cb8 <_svfiprintf_r+0x164>
    9d0c:	ab05      	add	r3, sp, #20
    9d0e:	9300      	str	r3, [sp, #0]
    9d10:	003a      	movs	r2, r7
    9d12:	4b11      	ldr	r3, [pc, #68]	; (9d58 <_svfiprintf_r+0x204>)
    9d14:	0029      	movs	r1, r5
    9d16:	9802      	ldr	r0, [sp, #8]
    9d18:	e000      	b.n	9d1c <_svfiprintf_r+0x1c8>
    9d1a:	bf00      	nop
    9d1c:	9003      	str	r0, [sp, #12]
    9d1e:	9b03      	ldr	r3, [sp, #12]
    9d20:	3301      	adds	r3, #1
    9d22:	d1cc      	bne.n	9cbe <_svfiprintf_r+0x16a>
    9d24:	89bb      	ldrh	r3, [r7, #12]
    9d26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9d28:	065b      	lsls	r3, r3, #25
    9d2a:	d400      	bmi.n	9d2e <_svfiprintf_r+0x1da>
    9d2c:	e729      	b.n	9b82 <_svfiprintf_r+0x2e>
    9d2e:	2001      	movs	r0, #1
    9d30:	4240      	negs	r0, r0
    9d32:	e726      	b.n	9b82 <_svfiprintf_r+0x2e>
    9d34:	ab05      	add	r3, sp, #20
    9d36:	9300      	str	r3, [sp, #0]
    9d38:	003a      	movs	r2, r7
    9d3a:	4b07      	ldr	r3, [pc, #28]	; (9d58 <_svfiprintf_r+0x204>)
    9d3c:	0029      	movs	r1, r5
    9d3e:	9802      	ldr	r0, [sp, #8]
    9d40:	f000 f9be 	bl	a0c0 <_printf_i>
    9d44:	e7ea      	b.n	9d1c <_svfiprintf_r+0x1c8>
    9d46:	46c0      	nop			; (mov r8, r8)
    9d48:	0000b0b8 	.word	0x0000b0b8
    9d4c:	0000b0be 	.word	0x0000b0be
    9d50:	0000b0c2 	.word	0x0000b0c2
    9d54:	00000000 	.word	0x00000000
    9d58:	00009a91 	.word	0x00009a91

00009d5c <__sfputc_r>:
    9d5c:	6893      	ldr	r3, [r2, #8]
    9d5e:	b510      	push	{r4, lr}
    9d60:	3b01      	subs	r3, #1
    9d62:	6093      	str	r3, [r2, #8]
    9d64:	2b00      	cmp	r3, #0
    9d66:	da05      	bge.n	9d74 <__sfputc_r+0x18>
    9d68:	6994      	ldr	r4, [r2, #24]
    9d6a:	42a3      	cmp	r3, r4
    9d6c:	db08      	blt.n	9d80 <__sfputc_r+0x24>
    9d6e:	b2cb      	uxtb	r3, r1
    9d70:	2b0a      	cmp	r3, #10
    9d72:	d005      	beq.n	9d80 <__sfputc_r+0x24>
    9d74:	6813      	ldr	r3, [r2, #0]
    9d76:	1c58      	adds	r0, r3, #1
    9d78:	6010      	str	r0, [r2, #0]
    9d7a:	7019      	strb	r1, [r3, #0]
    9d7c:	b2c8      	uxtb	r0, r1
    9d7e:	bd10      	pop	{r4, pc}
    9d80:	f000 fb16 	bl	a3b0 <__swbuf_r>
    9d84:	e7fb      	b.n	9d7e <__sfputc_r+0x22>

00009d86 <__sfputs_r>:
    9d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d88:	0006      	movs	r6, r0
    9d8a:	000f      	movs	r7, r1
    9d8c:	0014      	movs	r4, r2
    9d8e:	18d5      	adds	r5, r2, r3
    9d90:	42ac      	cmp	r4, r5
    9d92:	d101      	bne.n	9d98 <__sfputs_r+0x12>
    9d94:	2000      	movs	r0, #0
    9d96:	e007      	b.n	9da8 <__sfputs_r+0x22>
    9d98:	7821      	ldrb	r1, [r4, #0]
    9d9a:	003a      	movs	r2, r7
    9d9c:	0030      	movs	r0, r6
    9d9e:	f7ff ffdd 	bl	9d5c <__sfputc_r>
    9da2:	3401      	adds	r4, #1
    9da4:	1c43      	adds	r3, r0, #1
    9da6:	d1f3      	bne.n	9d90 <__sfputs_r+0xa>
    9da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009dac <_vfiprintf_r>:
    9dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dae:	b09f      	sub	sp, #124	; 0x7c
    9db0:	0006      	movs	r6, r0
    9db2:	000f      	movs	r7, r1
    9db4:	0014      	movs	r4, r2
    9db6:	9305      	str	r3, [sp, #20]
    9db8:	2800      	cmp	r0, #0
    9dba:	d004      	beq.n	9dc6 <_vfiprintf_r+0x1a>
    9dbc:	6983      	ldr	r3, [r0, #24]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d101      	bne.n	9dc6 <_vfiprintf_r+0x1a>
    9dc2:	f7ff fcb1 	bl	9728 <__sinit>
    9dc6:	4b7f      	ldr	r3, [pc, #508]	; (9fc4 <_vfiprintf_r+0x218>)
    9dc8:	429f      	cmp	r7, r3
    9dca:	d15c      	bne.n	9e86 <_vfiprintf_r+0xda>
    9dcc:	6877      	ldr	r7, [r6, #4]
    9dce:	89bb      	ldrh	r3, [r7, #12]
    9dd0:	071b      	lsls	r3, r3, #28
    9dd2:	d562      	bpl.n	9e9a <_vfiprintf_r+0xee>
    9dd4:	693b      	ldr	r3, [r7, #16]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d05f      	beq.n	9e9a <_vfiprintf_r+0xee>
    9dda:	2300      	movs	r3, #0
    9ddc:	ad06      	add	r5, sp, #24
    9dde:	616b      	str	r3, [r5, #20]
    9de0:	3320      	adds	r3, #32
    9de2:	766b      	strb	r3, [r5, #25]
    9de4:	3310      	adds	r3, #16
    9de6:	76ab      	strb	r3, [r5, #26]
    9de8:	9402      	str	r4, [sp, #8]
    9dea:	9c02      	ldr	r4, [sp, #8]
    9dec:	7823      	ldrb	r3, [r4, #0]
    9dee:	2b00      	cmp	r3, #0
    9df0:	d15d      	bne.n	9eae <_vfiprintf_r+0x102>
    9df2:	9b02      	ldr	r3, [sp, #8]
    9df4:	1ae3      	subs	r3, r4, r3
    9df6:	9304      	str	r3, [sp, #16]
    9df8:	d00d      	beq.n	9e16 <_vfiprintf_r+0x6a>
    9dfa:	9b04      	ldr	r3, [sp, #16]
    9dfc:	9a02      	ldr	r2, [sp, #8]
    9dfe:	0039      	movs	r1, r7
    9e00:	0030      	movs	r0, r6
    9e02:	f7ff ffc0 	bl	9d86 <__sfputs_r>
    9e06:	1c43      	adds	r3, r0, #1
    9e08:	d100      	bne.n	9e0c <_vfiprintf_r+0x60>
    9e0a:	e0cc      	b.n	9fa6 <_vfiprintf_r+0x1fa>
    9e0c:	696a      	ldr	r2, [r5, #20]
    9e0e:	9b04      	ldr	r3, [sp, #16]
    9e10:	4694      	mov	ip, r2
    9e12:	4463      	add	r3, ip
    9e14:	616b      	str	r3, [r5, #20]
    9e16:	7823      	ldrb	r3, [r4, #0]
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d100      	bne.n	9e1e <_vfiprintf_r+0x72>
    9e1c:	e0c3      	b.n	9fa6 <_vfiprintf_r+0x1fa>
    9e1e:	2201      	movs	r2, #1
    9e20:	2300      	movs	r3, #0
    9e22:	4252      	negs	r2, r2
    9e24:	606a      	str	r2, [r5, #4]
    9e26:	a902      	add	r1, sp, #8
    9e28:	3254      	adds	r2, #84	; 0x54
    9e2a:	1852      	adds	r2, r2, r1
    9e2c:	3401      	adds	r4, #1
    9e2e:	602b      	str	r3, [r5, #0]
    9e30:	60eb      	str	r3, [r5, #12]
    9e32:	60ab      	str	r3, [r5, #8]
    9e34:	7013      	strb	r3, [r2, #0]
    9e36:	65ab      	str	r3, [r5, #88]	; 0x58
    9e38:	7821      	ldrb	r1, [r4, #0]
    9e3a:	2205      	movs	r2, #5
    9e3c:	4862      	ldr	r0, [pc, #392]	; (9fc8 <_vfiprintf_r+0x21c>)
    9e3e:	f000 fbe1 	bl	a604 <memchr>
    9e42:	1c63      	adds	r3, r4, #1
    9e44:	469c      	mov	ip, r3
    9e46:	2800      	cmp	r0, #0
    9e48:	d135      	bne.n	9eb6 <_vfiprintf_r+0x10a>
    9e4a:	6829      	ldr	r1, [r5, #0]
    9e4c:	06cb      	lsls	r3, r1, #27
    9e4e:	d504      	bpl.n	9e5a <_vfiprintf_r+0xae>
    9e50:	2353      	movs	r3, #83	; 0x53
    9e52:	aa02      	add	r2, sp, #8
    9e54:	3020      	adds	r0, #32
    9e56:	189b      	adds	r3, r3, r2
    9e58:	7018      	strb	r0, [r3, #0]
    9e5a:	070b      	lsls	r3, r1, #28
    9e5c:	d504      	bpl.n	9e68 <_vfiprintf_r+0xbc>
    9e5e:	2353      	movs	r3, #83	; 0x53
    9e60:	202b      	movs	r0, #43	; 0x2b
    9e62:	aa02      	add	r2, sp, #8
    9e64:	189b      	adds	r3, r3, r2
    9e66:	7018      	strb	r0, [r3, #0]
    9e68:	7823      	ldrb	r3, [r4, #0]
    9e6a:	2b2a      	cmp	r3, #42	; 0x2a
    9e6c:	d02c      	beq.n	9ec8 <_vfiprintf_r+0x11c>
    9e6e:	2000      	movs	r0, #0
    9e70:	210a      	movs	r1, #10
    9e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e74:	7822      	ldrb	r2, [r4, #0]
    9e76:	3a30      	subs	r2, #48	; 0x30
    9e78:	2a09      	cmp	r2, #9
    9e7a:	d800      	bhi.n	9e7e <_vfiprintf_r+0xd2>
    9e7c:	e06b      	b.n	9f56 <_vfiprintf_r+0x1aa>
    9e7e:	2800      	cmp	r0, #0
    9e80:	d02a      	beq.n	9ed8 <_vfiprintf_r+0x12c>
    9e82:	9309      	str	r3, [sp, #36]	; 0x24
    9e84:	e028      	b.n	9ed8 <_vfiprintf_r+0x12c>
    9e86:	4b51      	ldr	r3, [pc, #324]	; (9fcc <_vfiprintf_r+0x220>)
    9e88:	429f      	cmp	r7, r3
    9e8a:	d101      	bne.n	9e90 <_vfiprintf_r+0xe4>
    9e8c:	68b7      	ldr	r7, [r6, #8]
    9e8e:	e79e      	b.n	9dce <_vfiprintf_r+0x22>
    9e90:	4b4f      	ldr	r3, [pc, #316]	; (9fd0 <_vfiprintf_r+0x224>)
    9e92:	429f      	cmp	r7, r3
    9e94:	d19b      	bne.n	9dce <_vfiprintf_r+0x22>
    9e96:	68f7      	ldr	r7, [r6, #12]
    9e98:	e799      	b.n	9dce <_vfiprintf_r+0x22>
    9e9a:	0039      	movs	r1, r7
    9e9c:	0030      	movs	r0, r6
    9e9e:	f000 faf1 	bl	a484 <__swsetup_r>
    9ea2:	2800      	cmp	r0, #0
    9ea4:	d099      	beq.n	9dda <_vfiprintf_r+0x2e>
    9ea6:	2001      	movs	r0, #1
    9ea8:	4240      	negs	r0, r0
    9eaa:	b01f      	add	sp, #124	; 0x7c
    9eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9eae:	2b25      	cmp	r3, #37	; 0x25
    9eb0:	d09f      	beq.n	9df2 <_vfiprintf_r+0x46>
    9eb2:	3401      	adds	r4, #1
    9eb4:	e79a      	b.n	9dec <_vfiprintf_r+0x40>
    9eb6:	4b44      	ldr	r3, [pc, #272]	; (9fc8 <_vfiprintf_r+0x21c>)
    9eb8:	6829      	ldr	r1, [r5, #0]
    9eba:	1ac0      	subs	r0, r0, r3
    9ebc:	2301      	movs	r3, #1
    9ebe:	4083      	lsls	r3, r0
    9ec0:	430b      	orrs	r3, r1
    9ec2:	602b      	str	r3, [r5, #0]
    9ec4:	4664      	mov	r4, ip
    9ec6:	e7b7      	b.n	9e38 <_vfiprintf_r+0x8c>
    9ec8:	9b05      	ldr	r3, [sp, #20]
    9eca:	1d18      	adds	r0, r3, #4
    9ecc:	681b      	ldr	r3, [r3, #0]
    9ece:	9005      	str	r0, [sp, #20]
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	db3a      	blt.n	9f4a <_vfiprintf_r+0x19e>
    9ed4:	9309      	str	r3, [sp, #36]	; 0x24
    9ed6:	4664      	mov	r4, ip
    9ed8:	7823      	ldrb	r3, [r4, #0]
    9eda:	2b2e      	cmp	r3, #46	; 0x2e
    9edc:	d10b      	bne.n	9ef6 <_vfiprintf_r+0x14a>
    9ede:	7863      	ldrb	r3, [r4, #1]
    9ee0:	1c62      	adds	r2, r4, #1
    9ee2:	2b2a      	cmp	r3, #42	; 0x2a
    9ee4:	d13f      	bne.n	9f66 <_vfiprintf_r+0x1ba>
    9ee6:	9b05      	ldr	r3, [sp, #20]
    9ee8:	3402      	adds	r4, #2
    9eea:	1d1a      	adds	r2, r3, #4
    9eec:	681b      	ldr	r3, [r3, #0]
    9eee:	9205      	str	r2, [sp, #20]
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	db35      	blt.n	9f60 <_vfiprintf_r+0x1b4>
    9ef4:	9307      	str	r3, [sp, #28]
    9ef6:	7821      	ldrb	r1, [r4, #0]
    9ef8:	2203      	movs	r2, #3
    9efa:	4836      	ldr	r0, [pc, #216]	; (9fd4 <_vfiprintf_r+0x228>)
    9efc:	f000 fb82 	bl	a604 <memchr>
    9f00:	2800      	cmp	r0, #0
    9f02:	d007      	beq.n	9f14 <_vfiprintf_r+0x168>
    9f04:	4b33      	ldr	r3, [pc, #204]	; (9fd4 <_vfiprintf_r+0x228>)
    9f06:	682a      	ldr	r2, [r5, #0]
    9f08:	1ac0      	subs	r0, r0, r3
    9f0a:	2340      	movs	r3, #64	; 0x40
    9f0c:	4083      	lsls	r3, r0
    9f0e:	4313      	orrs	r3, r2
    9f10:	602b      	str	r3, [r5, #0]
    9f12:	3401      	adds	r4, #1
    9f14:	7821      	ldrb	r1, [r4, #0]
    9f16:	1c63      	adds	r3, r4, #1
    9f18:	2206      	movs	r2, #6
    9f1a:	482f      	ldr	r0, [pc, #188]	; (9fd8 <_vfiprintf_r+0x22c>)
    9f1c:	9302      	str	r3, [sp, #8]
    9f1e:	7629      	strb	r1, [r5, #24]
    9f20:	f000 fb70 	bl	a604 <memchr>
    9f24:	2800      	cmp	r0, #0
    9f26:	d044      	beq.n	9fb2 <_vfiprintf_r+0x206>
    9f28:	4b2c      	ldr	r3, [pc, #176]	; (9fdc <_vfiprintf_r+0x230>)
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	d12f      	bne.n	9f8e <_vfiprintf_r+0x1e2>
    9f2e:	6829      	ldr	r1, [r5, #0]
    9f30:	9b05      	ldr	r3, [sp, #20]
    9f32:	2207      	movs	r2, #7
    9f34:	05c9      	lsls	r1, r1, #23
    9f36:	d528      	bpl.n	9f8a <_vfiprintf_r+0x1de>
    9f38:	189b      	adds	r3, r3, r2
    9f3a:	4393      	bics	r3, r2
    9f3c:	3308      	adds	r3, #8
    9f3e:	9305      	str	r3, [sp, #20]
    9f40:	696b      	ldr	r3, [r5, #20]
    9f42:	9a03      	ldr	r2, [sp, #12]
    9f44:	189b      	adds	r3, r3, r2
    9f46:	616b      	str	r3, [r5, #20]
    9f48:	e74f      	b.n	9dea <_vfiprintf_r+0x3e>
    9f4a:	425b      	negs	r3, r3
    9f4c:	60eb      	str	r3, [r5, #12]
    9f4e:	2302      	movs	r3, #2
    9f50:	430b      	orrs	r3, r1
    9f52:	602b      	str	r3, [r5, #0]
    9f54:	e7bf      	b.n	9ed6 <_vfiprintf_r+0x12a>
    9f56:	434b      	muls	r3, r1
    9f58:	3401      	adds	r4, #1
    9f5a:	189b      	adds	r3, r3, r2
    9f5c:	2001      	movs	r0, #1
    9f5e:	e789      	b.n	9e74 <_vfiprintf_r+0xc8>
    9f60:	2301      	movs	r3, #1
    9f62:	425b      	negs	r3, r3
    9f64:	e7c6      	b.n	9ef4 <_vfiprintf_r+0x148>
    9f66:	2300      	movs	r3, #0
    9f68:	0014      	movs	r4, r2
    9f6a:	200a      	movs	r0, #10
    9f6c:	001a      	movs	r2, r3
    9f6e:	606b      	str	r3, [r5, #4]
    9f70:	7821      	ldrb	r1, [r4, #0]
    9f72:	3930      	subs	r1, #48	; 0x30
    9f74:	2909      	cmp	r1, #9
    9f76:	d903      	bls.n	9f80 <_vfiprintf_r+0x1d4>
    9f78:	2b00      	cmp	r3, #0
    9f7a:	d0bc      	beq.n	9ef6 <_vfiprintf_r+0x14a>
    9f7c:	9207      	str	r2, [sp, #28]
    9f7e:	e7ba      	b.n	9ef6 <_vfiprintf_r+0x14a>
    9f80:	4342      	muls	r2, r0
    9f82:	3401      	adds	r4, #1
    9f84:	1852      	adds	r2, r2, r1
    9f86:	2301      	movs	r3, #1
    9f88:	e7f2      	b.n	9f70 <_vfiprintf_r+0x1c4>
    9f8a:	3307      	adds	r3, #7
    9f8c:	e7d5      	b.n	9f3a <_vfiprintf_r+0x18e>
    9f8e:	ab05      	add	r3, sp, #20
    9f90:	9300      	str	r3, [sp, #0]
    9f92:	003a      	movs	r2, r7
    9f94:	4b12      	ldr	r3, [pc, #72]	; (9fe0 <_vfiprintf_r+0x234>)
    9f96:	0029      	movs	r1, r5
    9f98:	0030      	movs	r0, r6
    9f9a:	e000      	b.n	9f9e <_vfiprintf_r+0x1f2>
    9f9c:	bf00      	nop
    9f9e:	9003      	str	r0, [sp, #12]
    9fa0:	9b03      	ldr	r3, [sp, #12]
    9fa2:	3301      	adds	r3, #1
    9fa4:	d1cc      	bne.n	9f40 <_vfiprintf_r+0x194>
    9fa6:	89bb      	ldrh	r3, [r7, #12]
    9fa8:	065b      	lsls	r3, r3, #25
    9faa:	d500      	bpl.n	9fae <_vfiprintf_r+0x202>
    9fac:	e77b      	b.n	9ea6 <_vfiprintf_r+0xfa>
    9fae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9fb0:	e77b      	b.n	9eaa <_vfiprintf_r+0xfe>
    9fb2:	ab05      	add	r3, sp, #20
    9fb4:	9300      	str	r3, [sp, #0]
    9fb6:	003a      	movs	r2, r7
    9fb8:	4b09      	ldr	r3, [pc, #36]	; (9fe0 <_vfiprintf_r+0x234>)
    9fba:	0029      	movs	r1, r5
    9fbc:	0030      	movs	r0, r6
    9fbe:	f000 f87f 	bl	a0c0 <_printf_i>
    9fc2:	e7ec      	b.n	9f9e <_vfiprintf_r+0x1f2>
    9fc4:	0000b078 	.word	0x0000b078
    9fc8:	0000b0b8 	.word	0x0000b0b8
    9fcc:	0000b098 	.word	0x0000b098
    9fd0:	0000b058 	.word	0x0000b058
    9fd4:	0000b0be 	.word	0x0000b0be
    9fd8:	0000b0c2 	.word	0x0000b0c2
    9fdc:	00000000 	.word	0x00000000
    9fe0:	00009d87 	.word	0x00009d87

00009fe4 <_printf_common>:
    9fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9fe6:	0015      	movs	r5, r2
    9fe8:	9301      	str	r3, [sp, #4]
    9fea:	688a      	ldr	r2, [r1, #8]
    9fec:	690b      	ldr	r3, [r1, #16]
    9fee:	9000      	str	r0, [sp, #0]
    9ff0:	000c      	movs	r4, r1
    9ff2:	4293      	cmp	r3, r2
    9ff4:	da00      	bge.n	9ff8 <_printf_common+0x14>
    9ff6:	0013      	movs	r3, r2
    9ff8:	0022      	movs	r2, r4
    9ffa:	602b      	str	r3, [r5, #0]
    9ffc:	3243      	adds	r2, #67	; 0x43
    9ffe:	7812      	ldrb	r2, [r2, #0]
    a000:	2a00      	cmp	r2, #0
    a002:	d001      	beq.n	a008 <_printf_common+0x24>
    a004:	3301      	adds	r3, #1
    a006:	602b      	str	r3, [r5, #0]
    a008:	6823      	ldr	r3, [r4, #0]
    a00a:	069b      	lsls	r3, r3, #26
    a00c:	d502      	bpl.n	a014 <_printf_common+0x30>
    a00e:	682b      	ldr	r3, [r5, #0]
    a010:	3302      	adds	r3, #2
    a012:	602b      	str	r3, [r5, #0]
    a014:	2706      	movs	r7, #6
    a016:	6823      	ldr	r3, [r4, #0]
    a018:	401f      	ands	r7, r3
    a01a:	d027      	beq.n	a06c <_printf_common+0x88>
    a01c:	0023      	movs	r3, r4
    a01e:	3343      	adds	r3, #67	; 0x43
    a020:	781b      	ldrb	r3, [r3, #0]
    a022:	1e5a      	subs	r2, r3, #1
    a024:	4193      	sbcs	r3, r2
    a026:	6822      	ldr	r2, [r4, #0]
    a028:	0692      	lsls	r2, r2, #26
    a02a:	d430      	bmi.n	a08e <_printf_common+0xaa>
    a02c:	0022      	movs	r2, r4
    a02e:	9901      	ldr	r1, [sp, #4]
    a030:	3243      	adds	r2, #67	; 0x43
    a032:	9800      	ldr	r0, [sp, #0]
    a034:	9e08      	ldr	r6, [sp, #32]
    a036:	47b0      	blx	r6
    a038:	1c43      	adds	r3, r0, #1
    a03a:	d025      	beq.n	a088 <_printf_common+0xa4>
    a03c:	2306      	movs	r3, #6
    a03e:	6820      	ldr	r0, [r4, #0]
    a040:	682a      	ldr	r2, [r5, #0]
    a042:	68e1      	ldr	r1, [r4, #12]
    a044:	4003      	ands	r3, r0
    a046:	2500      	movs	r5, #0
    a048:	2b04      	cmp	r3, #4
    a04a:	d103      	bne.n	a054 <_printf_common+0x70>
    a04c:	1a8d      	subs	r5, r1, r2
    a04e:	43eb      	mvns	r3, r5
    a050:	17db      	asrs	r3, r3, #31
    a052:	401d      	ands	r5, r3
    a054:	68a3      	ldr	r3, [r4, #8]
    a056:	6922      	ldr	r2, [r4, #16]
    a058:	4293      	cmp	r3, r2
    a05a:	dd01      	ble.n	a060 <_printf_common+0x7c>
    a05c:	1a9b      	subs	r3, r3, r2
    a05e:	18ed      	adds	r5, r5, r3
    a060:	2700      	movs	r7, #0
    a062:	42bd      	cmp	r5, r7
    a064:	d120      	bne.n	a0a8 <_printf_common+0xc4>
    a066:	2000      	movs	r0, #0
    a068:	e010      	b.n	a08c <_printf_common+0xa8>
    a06a:	3701      	adds	r7, #1
    a06c:	68e3      	ldr	r3, [r4, #12]
    a06e:	682a      	ldr	r2, [r5, #0]
    a070:	1a9b      	subs	r3, r3, r2
    a072:	429f      	cmp	r7, r3
    a074:	dad2      	bge.n	a01c <_printf_common+0x38>
    a076:	0022      	movs	r2, r4
    a078:	2301      	movs	r3, #1
    a07a:	3219      	adds	r2, #25
    a07c:	9901      	ldr	r1, [sp, #4]
    a07e:	9800      	ldr	r0, [sp, #0]
    a080:	9e08      	ldr	r6, [sp, #32]
    a082:	47b0      	blx	r6
    a084:	1c43      	adds	r3, r0, #1
    a086:	d1f0      	bne.n	a06a <_printf_common+0x86>
    a088:	2001      	movs	r0, #1
    a08a:	4240      	negs	r0, r0
    a08c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a08e:	2030      	movs	r0, #48	; 0x30
    a090:	18e1      	adds	r1, r4, r3
    a092:	3143      	adds	r1, #67	; 0x43
    a094:	7008      	strb	r0, [r1, #0]
    a096:	0021      	movs	r1, r4
    a098:	1c5a      	adds	r2, r3, #1
    a09a:	3145      	adds	r1, #69	; 0x45
    a09c:	7809      	ldrb	r1, [r1, #0]
    a09e:	18a2      	adds	r2, r4, r2
    a0a0:	3243      	adds	r2, #67	; 0x43
    a0a2:	3302      	adds	r3, #2
    a0a4:	7011      	strb	r1, [r2, #0]
    a0a6:	e7c1      	b.n	a02c <_printf_common+0x48>
    a0a8:	0022      	movs	r2, r4
    a0aa:	2301      	movs	r3, #1
    a0ac:	321a      	adds	r2, #26
    a0ae:	9901      	ldr	r1, [sp, #4]
    a0b0:	9800      	ldr	r0, [sp, #0]
    a0b2:	9e08      	ldr	r6, [sp, #32]
    a0b4:	47b0      	blx	r6
    a0b6:	1c43      	adds	r3, r0, #1
    a0b8:	d0e6      	beq.n	a088 <_printf_common+0xa4>
    a0ba:	3701      	adds	r7, #1
    a0bc:	e7d1      	b.n	a062 <_printf_common+0x7e>
	...

0000a0c0 <_printf_i>:
    a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0c2:	b08b      	sub	sp, #44	; 0x2c
    a0c4:	9206      	str	r2, [sp, #24]
    a0c6:	000a      	movs	r2, r1
    a0c8:	3243      	adds	r2, #67	; 0x43
    a0ca:	9307      	str	r3, [sp, #28]
    a0cc:	9005      	str	r0, [sp, #20]
    a0ce:	9204      	str	r2, [sp, #16]
    a0d0:	7e0a      	ldrb	r2, [r1, #24]
    a0d2:	000c      	movs	r4, r1
    a0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a0d6:	2a6e      	cmp	r2, #110	; 0x6e
    a0d8:	d100      	bne.n	a0dc <_printf_i+0x1c>
    a0da:	e08f      	b.n	a1fc <_printf_i+0x13c>
    a0dc:	d817      	bhi.n	a10e <_printf_i+0x4e>
    a0de:	2a63      	cmp	r2, #99	; 0x63
    a0e0:	d02c      	beq.n	a13c <_printf_i+0x7c>
    a0e2:	d808      	bhi.n	a0f6 <_printf_i+0x36>
    a0e4:	2a00      	cmp	r2, #0
    a0e6:	d100      	bne.n	a0ea <_printf_i+0x2a>
    a0e8:	e099      	b.n	a21e <_printf_i+0x15e>
    a0ea:	2a58      	cmp	r2, #88	; 0x58
    a0ec:	d054      	beq.n	a198 <_printf_i+0xd8>
    a0ee:	0026      	movs	r6, r4
    a0f0:	3642      	adds	r6, #66	; 0x42
    a0f2:	7032      	strb	r2, [r6, #0]
    a0f4:	e029      	b.n	a14a <_printf_i+0x8a>
    a0f6:	2a64      	cmp	r2, #100	; 0x64
    a0f8:	d001      	beq.n	a0fe <_printf_i+0x3e>
    a0fa:	2a69      	cmp	r2, #105	; 0x69
    a0fc:	d1f7      	bne.n	a0ee <_printf_i+0x2e>
    a0fe:	6821      	ldr	r1, [r4, #0]
    a100:	681a      	ldr	r2, [r3, #0]
    a102:	0608      	lsls	r0, r1, #24
    a104:	d523      	bpl.n	a14e <_printf_i+0x8e>
    a106:	1d11      	adds	r1, r2, #4
    a108:	6019      	str	r1, [r3, #0]
    a10a:	6815      	ldr	r5, [r2, #0]
    a10c:	e025      	b.n	a15a <_printf_i+0x9a>
    a10e:	2a73      	cmp	r2, #115	; 0x73
    a110:	d100      	bne.n	a114 <_printf_i+0x54>
    a112:	e088      	b.n	a226 <_printf_i+0x166>
    a114:	d808      	bhi.n	a128 <_printf_i+0x68>
    a116:	2a6f      	cmp	r2, #111	; 0x6f
    a118:	d029      	beq.n	a16e <_printf_i+0xae>
    a11a:	2a70      	cmp	r2, #112	; 0x70
    a11c:	d1e7      	bne.n	a0ee <_printf_i+0x2e>
    a11e:	2220      	movs	r2, #32
    a120:	6809      	ldr	r1, [r1, #0]
    a122:	430a      	orrs	r2, r1
    a124:	6022      	str	r2, [r4, #0]
    a126:	e003      	b.n	a130 <_printf_i+0x70>
    a128:	2a75      	cmp	r2, #117	; 0x75
    a12a:	d020      	beq.n	a16e <_printf_i+0xae>
    a12c:	2a78      	cmp	r2, #120	; 0x78
    a12e:	d1de      	bne.n	a0ee <_printf_i+0x2e>
    a130:	0022      	movs	r2, r4
    a132:	2178      	movs	r1, #120	; 0x78
    a134:	3245      	adds	r2, #69	; 0x45
    a136:	7011      	strb	r1, [r2, #0]
    a138:	4a6c      	ldr	r2, [pc, #432]	; (a2ec <_printf_i+0x22c>)
    a13a:	e030      	b.n	a19e <_printf_i+0xde>
    a13c:	000e      	movs	r6, r1
    a13e:	681a      	ldr	r2, [r3, #0]
    a140:	3642      	adds	r6, #66	; 0x42
    a142:	1d11      	adds	r1, r2, #4
    a144:	6019      	str	r1, [r3, #0]
    a146:	6813      	ldr	r3, [r2, #0]
    a148:	7033      	strb	r3, [r6, #0]
    a14a:	2301      	movs	r3, #1
    a14c:	e079      	b.n	a242 <_printf_i+0x182>
    a14e:	0649      	lsls	r1, r1, #25
    a150:	d5d9      	bpl.n	a106 <_printf_i+0x46>
    a152:	1d11      	adds	r1, r2, #4
    a154:	6019      	str	r1, [r3, #0]
    a156:	2300      	movs	r3, #0
    a158:	5ed5      	ldrsh	r5, [r2, r3]
    a15a:	2d00      	cmp	r5, #0
    a15c:	da03      	bge.n	a166 <_printf_i+0xa6>
    a15e:	232d      	movs	r3, #45	; 0x2d
    a160:	9a04      	ldr	r2, [sp, #16]
    a162:	426d      	negs	r5, r5
    a164:	7013      	strb	r3, [r2, #0]
    a166:	4b62      	ldr	r3, [pc, #392]	; (a2f0 <_printf_i+0x230>)
    a168:	270a      	movs	r7, #10
    a16a:	9303      	str	r3, [sp, #12]
    a16c:	e02f      	b.n	a1ce <_printf_i+0x10e>
    a16e:	6820      	ldr	r0, [r4, #0]
    a170:	6819      	ldr	r1, [r3, #0]
    a172:	0605      	lsls	r5, r0, #24
    a174:	d503      	bpl.n	a17e <_printf_i+0xbe>
    a176:	1d08      	adds	r0, r1, #4
    a178:	6018      	str	r0, [r3, #0]
    a17a:	680d      	ldr	r5, [r1, #0]
    a17c:	e005      	b.n	a18a <_printf_i+0xca>
    a17e:	0640      	lsls	r0, r0, #25
    a180:	d5f9      	bpl.n	a176 <_printf_i+0xb6>
    a182:	680d      	ldr	r5, [r1, #0]
    a184:	1d08      	adds	r0, r1, #4
    a186:	6018      	str	r0, [r3, #0]
    a188:	b2ad      	uxth	r5, r5
    a18a:	4b59      	ldr	r3, [pc, #356]	; (a2f0 <_printf_i+0x230>)
    a18c:	2708      	movs	r7, #8
    a18e:	9303      	str	r3, [sp, #12]
    a190:	2a6f      	cmp	r2, #111	; 0x6f
    a192:	d018      	beq.n	a1c6 <_printf_i+0x106>
    a194:	270a      	movs	r7, #10
    a196:	e016      	b.n	a1c6 <_printf_i+0x106>
    a198:	3145      	adds	r1, #69	; 0x45
    a19a:	700a      	strb	r2, [r1, #0]
    a19c:	4a54      	ldr	r2, [pc, #336]	; (a2f0 <_printf_i+0x230>)
    a19e:	9203      	str	r2, [sp, #12]
    a1a0:	681a      	ldr	r2, [r3, #0]
    a1a2:	6821      	ldr	r1, [r4, #0]
    a1a4:	1d10      	adds	r0, r2, #4
    a1a6:	6018      	str	r0, [r3, #0]
    a1a8:	6815      	ldr	r5, [r2, #0]
    a1aa:	0608      	lsls	r0, r1, #24
    a1ac:	d522      	bpl.n	a1f4 <_printf_i+0x134>
    a1ae:	07cb      	lsls	r3, r1, #31
    a1b0:	d502      	bpl.n	a1b8 <_printf_i+0xf8>
    a1b2:	2320      	movs	r3, #32
    a1b4:	4319      	orrs	r1, r3
    a1b6:	6021      	str	r1, [r4, #0]
    a1b8:	2710      	movs	r7, #16
    a1ba:	2d00      	cmp	r5, #0
    a1bc:	d103      	bne.n	a1c6 <_printf_i+0x106>
    a1be:	2320      	movs	r3, #32
    a1c0:	6822      	ldr	r2, [r4, #0]
    a1c2:	439a      	bics	r2, r3
    a1c4:	6022      	str	r2, [r4, #0]
    a1c6:	0023      	movs	r3, r4
    a1c8:	2200      	movs	r2, #0
    a1ca:	3343      	adds	r3, #67	; 0x43
    a1cc:	701a      	strb	r2, [r3, #0]
    a1ce:	6863      	ldr	r3, [r4, #4]
    a1d0:	60a3      	str	r3, [r4, #8]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	db5c      	blt.n	a290 <_printf_i+0x1d0>
    a1d6:	2204      	movs	r2, #4
    a1d8:	6821      	ldr	r1, [r4, #0]
    a1da:	4391      	bics	r1, r2
    a1dc:	6021      	str	r1, [r4, #0]
    a1de:	2d00      	cmp	r5, #0
    a1e0:	d158      	bne.n	a294 <_printf_i+0x1d4>
    a1e2:	9e04      	ldr	r6, [sp, #16]
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d064      	beq.n	a2b2 <_printf_i+0x1f2>
    a1e8:	0026      	movs	r6, r4
    a1ea:	9b03      	ldr	r3, [sp, #12]
    a1ec:	3642      	adds	r6, #66	; 0x42
    a1ee:	781b      	ldrb	r3, [r3, #0]
    a1f0:	7033      	strb	r3, [r6, #0]
    a1f2:	e05e      	b.n	a2b2 <_printf_i+0x1f2>
    a1f4:	0648      	lsls	r0, r1, #25
    a1f6:	d5da      	bpl.n	a1ae <_printf_i+0xee>
    a1f8:	b2ad      	uxth	r5, r5
    a1fa:	e7d8      	b.n	a1ae <_printf_i+0xee>
    a1fc:	6809      	ldr	r1, [r1, #0]
    a1fe:	681a      	ldr	r2, [r3, #0]
    a200:	0608      	lsls	r0, r1, #24
    a202:	d505      	bpl.n	a210 <_printf_i+0x150>
    a204:	1d11      	adds	r1, r2, #4
    a206:	6019      	str	r1, [r3, #0]
    a208:	6813      	ldr	r3, [r2, #0]
    a20a:	6962      	ldr	r2, [r4, #20]
    a20c:	601a      	str	r2, [r3, #0]
    a20e:	e006      	b.n	a21e <_printf_i+0x15e>
    a210:	0649      	lsls	r1, r1, #25
    a212:	d5f7      	bpl.n	a204 <_printf_i+0x144>
    a214:	1d11      	adds	r1, r2, #4
    a216:	6019      	str	r1, [r3, #0]
    a218:	6813      	ldr	r3, [r2, #0]
    a21a:	8aa2      	ldrh	r2, [r4, #20]
    a21c:	801a      	strh	r2, [r3, #0]
    a21e:	2300      	movs	r3, #0
    a220:	9e04      	ldr	r6, [sp, #16]
    a222:	6123      	str	r3, [r4, #16]
    a224:	e054      	b.n	a2d0 <_printf_i+0x210>
    a226:	681a      	ldr	r2, [r3, #0]
    a228:	1d11      	adds	r1, r2, #4
    a22a:	6019      	str	r1, [r3, #0]
    a22c:	6816      	ldr	r6, [r2, #0]
    a22e:	2100      	movs	r1, #0
    a230:	6862      	ldr	r2, [r4, #4]
    a232:	0030      	movs	r0, r6
    a234:	f000 f9e6 	bl	a604 <memchr>
    a238:	2800      	cmp	r0, #0
    a23a:	d001      	beq.n	a240 <_printf_i+0x180>
    a23c:	1b80      	subs	r0, r0, r6
    a23e:	6060      	str	r0, [r4, #4]
    a240:	6863      	ldr	r3, [r4, #4]
    a242:	6123      	str	r3, [r4, #16]
    a244:	2300      	movs	r3, #0
    a246:	9a04      	ldr	r2, [sp, #16]
    a248:	7013      	strb	r3, [r2, #0]
    a24a:	e041      	b.n	a2d0 <_printf_i+0x210>
    a24c:	6923      	ldr	r3, [r4, #16]
    a24e:	0032      	movs	r2, r6
    a250:	9906      	ldr	r1, [sp, #24]
    a252:	9805      	ldr	r0, [sp, #20]
    a254:	9d07      	ldr	r5, [sp, #28]
    a256:	47a8      	blx	r5
    a258:	1c43      	adds	r3, r0, #1
    a25a:	d043      	beq.n	a2e4 <_printf_i+0x224>
    a25c:	6823      	ldr	r3, [r4, #0]
    a25e:	2500      	movs	r5, #0
    a260:	079b      	lsls	r3, r3, #30
    a262:	d40f      	bmi.n	a284 <_printf_i+0x1c4>
    a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a266:	68e0      	ldr	r0, [r4, #12]
    a268:	4298      	cmp	r0, r3
    a26a:	da3d      	bge.n	a2e8 <_printf_i+0x228>
    a26c:	0018      	movs	r0, r3
    a26e:	e03b      	b.n	a2e8 <_printf_i+0x228>
    a270:	0022      	movs	r2, r4
    a272:	2301      	movs	r3, #1
    a274:	3219      	adds	r2, #25
    a276:	9906      	ldr	r1, [sp, #24]
    a278:	9805      	ldr	r0, [sp, #20]
    a27a:	9e07      	ldr	r6, [sp, #28]
    a27c:	47b0      	blx	r6
    a27e:	1c43      	adds	r3, r0, #1
    a280:	d030      	beq.n	a2e4 <_printf_i+0x224>
    a282:	3501      	adds	r5, #1
    a284:	68e3      	ldr	r3, [r4, #12]
    a286:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a288:	1a9b      	subs	r3, r3, r2
    a28a:	429d      	cmp	r5, r3
    a28c:	dbf0      	blt.n	a270 <_printf_i+0x1b0>
    a28e:	e7e9      	b.n	a264 <_printf_i+0x1a4>
    a290:	2d00      	cmp	r5, #0
    a292:	d0a9      	beq.n	a1e8 <_printf_i+0x128>
    a294:	9e04      	ldr	r6, [sp, #16]
    a296:	0028      	movs	r0, r5
    a298:	0039      	movs	r1, r7
    a29a:	f7fe fde1 	bl	8e60 <__aeabi_uidivmod>
    a29e:	9b03      	ldr	r3, [sp, #12]
    a2a0:	3e01      	subs	r6, #1
    a2a2:	5c5b      	ldrb	r3, [r3, r1]
    a2a4:	0028      	movs	r0, r5
    a2a6:	7033      	strb	r3, [r6, #0]
    a2a8:	0039      	movs	r1, r7
    a2aa:	f7fe fd53 	bl	8d54 <__udivsi3>
    a2ae:	1e05      	subs	r5, r0, #0
    a2b0:	d1f1      	bne.n	a296 <_printf_i+0x1d6>
    a2b2:	2f08      	cmp	r7, #8
    a2b4:	d109      	bne.n	a2ca <_printf_i+0x20a>
    a2b6:	6823      	ldr	r3, [r4, #0]
    a2b8:	07db      	lsls	r3, r3, #31
    a2ba:	d506      	bpl.n	a2ca <_printf_i+0x20a>
    a2bc:	6863      	ldr	r3, [r4, #4]
    a2be:	6922      	ldr	r2, [r4, #16]
    a2c0:	4293      	cmp	r3, r2
    a2c2:	dc02      	bgt.n	a2ca <_printf_i+0x20a>
    a2c4:	2330      	movs	r3, #48	; 0x30
    a2c6:	3e01      	subs	r6, #1
    a2c8:	7033      	strb	r3, [r6, #0]
    a2ca:	9b04      	ldr	r3, [sp, #16]
    a2cc:	1b9b      	subs	r3, r3, r6
    a2ce:	6123      	str	r3, [r4, #16]
    a2d0:	9b07      	ldr	r3, [sp, #28]
    a2d2:	aa09      	add	r2, sp, #36	; 0x24
    a2d4:	9300      	str	r3, [sp, #0]
    a2d6:	0021      	movs	r1, r4
    a2d8:	9b06      	ldr	r3, [sp, #24]
    a2da:	9805      	ldr	r0, [sp, #20]
    a2dc:	f7ff fe82 	bl	9fe4 <_printf_common>
    a2e0:	1c43      	adds	r3, r0, #1
    a2e2:	d1b3      	bne.n	a24c <_printf_i+0x18c>
    a2e4:	2001      	movs	r0, #1
    a2e6:	4240      	negs	r0, r0
    a2e8:	b00b      	add	sp, #44	; 0x2c
    a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2ec:	0000b0da 	.word	0x0000b0da
    a2f0:	0000b0c9 	.word	0x0000b0c9

0000a2f4 <_sbrk_r>:
    a2f4:	2300      	movs	r3, #0
    a2f6:	b570      	push	{r4, r5, r6, lr}
    a2f8:	4c06      	ldr	r4, [pc, #24]	; (a314 <_sbrk_r+0x20>)
    a2fa:	0005      	movs	r5, r0
    a2fc:	0008      	movs	r0, r1
    a2fe:	6023      	str	r3, [r4, #0]
    a300:	f7fe fd0a 	bl	8d18 <_sbrk>
    a304:	1c43      	adds	r3, r0, #1
    a306:	d103      	bne.n	a310 <_sbrk_r+0x1c>
    a308:	6823      	ldr	r3, [r4, #0]
    a30a:	2b00      	cmp	r3, #0
    a30c:	d000      	beq.n	a310 <_sbrk_r+0x1c>
    a30e:	602b      	str	r3, [r5, #0]
    a310:	bd70      	pop	{r4, r5, r6, pc}
    a312:	46c0      	nop			; (mov r8, r8)
    a314:	20000e9c 	.word	0x20000e9c

0000a318 <__sread>:
    a318:	b570      	push	{r4, r5, r6, lr}
    a31a:	000c      	movs	r4, r1
    a31c:	250e      	movs	r5, #14
    a31e:	5f49      	ldrsh	r1, [r1, r5]
    a320:	f000 f9b6 	bl	a690 <_read_r>
    a324:	2800      	cmp	r0, #0
    a326:	db03      	blt.n	a330 <__sread+0x18>
    a328:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a32a:	181b      	adds	r3, r3, r0
    a32c:	6563      	str	r3, [r4, #84]	; 0x54
    a32e:	bd70      	pop	{r4, r5, r6, pc}
    a330:	89a3      	ldrh	r3, [r4, #12]
    a332:	4a02      	ldr	r2, [pc, #8]	; (a33c <__sread+0x24>)
    a334:	4013      	ands	r3, r2
    a336:	81a3      	strh	r3, [r4, #12]
    a338:	e7f9      	b.n	a32e <__sread+0x16>
    a33a:	46c0      	nop			; (mov r8, r8)
    a33c:	ffffefff 	.word	0xffffefff

0000a340 <__swrite>:
    a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a342:	001f      	movs	r7, r3
    a344:	898b      	ldrh	r3, [r1, #12]
    a346:	0005      	movs	r5, r0
    a348:	000c      	movs	r4, r1
    a34a:	0016      	movs	r6, r2
    a34c:	05db      	lsls	r3, r3, #23
    a34e:	d505      	bpl.n	a35c <__swrite+0x1c>
    a350:	230e      	movs	r3, #14
    a352:	5ec9      	ldrsh	r1, [r1, r3]
    a354:	2200      	movs	r2, #0
    a356:	2302      	movs	r3, #2
    a358:	f000 f940 	bl	a5dc <_lseek_r>
    a35c:	89a3      	ldrh	r3, [r4, #12]
    a35e:	4a05      	ldr	r2, [pc, #20]	; (a374 <__swrite+0x34>)
    a360:	0028      	movs	r0, r5
    a362:	4013      	ands	r3, r2
    a364:	81a3      	strh	r3, [r4, #12]
    a366:	0032      	movs	r2, r6
    a368:	230e      	movs	r3, #14
    a36a:	5ee1      	ldrsh	r1, [r4, r3]
    a36c:	003b      	movs	r3, r7
    a36e:	f000 f875 	bl	a45c <_write_r>
    a372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a374:	ffffefff 	.word	0xffffefff

0000a378 <__sseek>:
    a378:	b570      	push	{r4, r5, r6, lr}
    a37a:	000c      	movs	r4, r1
    a37c:	250e      	movs	r5, #14
    a37e:	5f49      	ldrsh	r1, [r1, r5]
    a380:	f000 f92c 	bl	a5dc <_lseek_r>
    a384:	89a3      	ldrh	r3, [r4, #12]
    a386:	1c42      	adds	r2, r0, #1
    a388:	d103      	bne.n	a392 <__sseek+0x1a>
    a38a:	4a05      	ldr	r2, [pc, #20]	; (a3a0 <__sseek+0x28>)
    a38c:	4013      	ands	r3, r2
    a38e:	81a3      	strh	r3, [r4, #12]
    a390:	bd70      	pop	{r4, r5, r6, pc}
    a392:	2280      	movs	r2, #128	; 0x80
    a394:	0152      	lsls	r2, r2, #5
    a396:	4313      	orrs	r3, r2
    a398:	81a3      	strh	r3, [r4, #12]
    a39a:	6560      	str	r0, [r4, #84]	; 0x54
    a39c:	e7f8      	b.n	a390 <__sseek+0x18>
    a39e:	46c0      	nop			; (mov r8, r8)
    a3a0:	ffffefff 	.word	0xffffefff

0000a3a4 <__sclose>:
    a3a4:	b510      	push	{r4, lr}
    a3a6:	230e      	movs	r3, #14
    a3a8:	5ec9      	ldrsh	r1, [r1, r3]
    a3aa:	f000 f8e1 	bl	a570 <_close_r>
    a3ae:	bd10      	pop	{r4, pc}

0000a3b0 <__swbuf_r>:
    a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3b2:	0005      	movs	r5, r0
    a3b4:	000e      	movs	r6, r1
    a3b6:	0014      	movs	r4, r2
    a3b8:	2800      	cmp	r0, #0
    a3ba:	d004      	beq.n	a3c6 <__swbuf_r+0x16>
    a3bc:	6983      	ldr	r3, [r0, #24]
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d101      	bne.n	a3c6 <__swbuf_r+0x16>
    a3c2:	f7ff f9b1 	bl	9728 <__sinit>
    a3c6:	4b22      	ldr	r3, [pc, #136]	; (a450 <__swbuf_r+0xa0>)
    a3c8:	429c      	cmp	r4, r3
    a3ca:	d12d      	bne.n	a428 <__swbuf_r+0x78>
    a3cc:	686c      	ldr	r4, [r5, #4]
    a3ce:	69a3      	ldr	r3, [r4, #24]
    a3d0:	60a3      	str	r3, [r4, #8]
    a3d2:	89a3      	ldrh	r3, [r4, #12]
    a3d4:	071b      	lsls	r3, r3, #28
    a3d6:	d531      	bpl.n	a43c <__swbuf_r+0x8c>
    a3d8:	6923      	ldr	r3, [r4, #16]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	d02e      	beq.n	a43c <__swbuf_r+0x8c>
    a3de:	6823      	ldr	r3, [r4, #0]
    a3e0:	6922      	ldr	r2, [r4, #16]
    a3e2:	b2f7      	uxtb	r7, r6
    a3e4:	1a98      	subs	r0, r3, r2
    a3e6:	6963      	ldr	r3, [r4, #20]
    a3e8:	b2f6      	uxtb	r6, r6
    a3ea:	4298      	cmp	r0, r3
    a3ec:	db05      	blt.n	a3fa <__swbuf_r+0x4a>
    a3ee:	0021      	movs	r1, r4
    a3f0:	0028      	movs	r0, r5
    a3f2:	f7ff f92b 	bl	964c <_fflush_r>
    a3f6:	2800      	cmp	r0, #0
    a3f8:	d126      	bne.n	a448 <__swbuf_r+0x98>
    a3fa:	68a3      	ldr	r3, [r4, #8]
    a3fc:	3001      	adds	r0, #1
    a3fe:	3b01      	subs	r3, #1
    a400:	60a3      	str	r3, [r4, #8]
    a402:	6823      	ldr	r3, [r4, #0]
    a404:	1c5a      	adds	r2, r3, #1
    a406:	6022      	str	r2, [r4, #0]
    a408:	701f      	strb	r7, [r3, #0]
    a40a:	6963      	ldr	r3, [r4, #20]
    a40c:	4298      	cmp	r0, r3
    a40e:	d004      	beq.n	a41a <__swbuf_r+0x6a>
    a410:	89a3      	ldrh	r3, [r4, #12]
    a412:	07db      	lsls	r3, r3, #31
    a414:	d51a      	bpl.n	a44c <__swbuf_r+0x9c>
    a416:	2e0a      	cmp	r6, #10
    a418:	d118      	bne.n	a44c <__swbuf_r+0x9c>
    a41a:	0021      	movs	r1, r4
    a41c:	0028      	movs	r0, r5
    a41e:	f7ff f915 	bl	964c <_fflush_r>
    a422:	2800      	cmp	r0, #0
    a424:	d012      	beq.n	a44c <__swbuf_r+0x9c>
    a426:	e00f      	b.n	a448 <__swbuf_r+0x98>
    a428:	4b0a      	ldr	r3, [pc, #40]	; (a454 <__swbuf_r+0xa4>)
    a42a:	429c      	cmp	r4, r3
    a42c:	d101      	bne.n	a432 <__swbuf_r+0x82>
    a42e:	68ac      	ldr	r4, [r5, #8]
    a430:	e7cd      	b.n	a3ce <__swbuf_r+0x1e>
    a432:	4b09      	ldr	r3, [pc, #36]	; (a458 <__swbuf_r+0xa8>)
    a434:	429c      	cmp	r4, r3
    a436:	d1ca      	bne.n	a3ce <__swbuf_r+0x1e>
    a438:	68ec      	ldr	r4, [r5, #12]
    a43a:	e7c8      	b.n	a3ce <__swbuf_r+0x1e>
    a43c:	0021      	movs	r1, r4
    a43e:	0028      	movs	r0, r5
    a440:	f000 f820 	bl	a484 <__swsetup_r>
    a444:	2800      	cmp	r0, #0
    a446:	d0ca      	beq.n	a3de <__swbuf_r+0x2e>
    a448:	2601      	movs	r6, #1
    a44a:	4276      	negs	r6, r6
    a44c:	0030      	movs	r0, r6
    a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a450:	0000b078 	.word	0x0000b078
    a454:	0000b098 	.word	0x0000b098
    a458:	0000b058 	.word	0x0000b058

0000a45c <_write_r>:
    a45c:	b570      	push	{r4, r5, r6, lr}
    a45e:	0005      	movs	r5, r0
    a460:	0008      	movs	r0, r1
    a462:	0011      	movs	r1, r2
    a464:	2200      	movs	r2, #0
    a466:	4c06      	ldr	r4, [pc, #24]	; (a480 <_write_r+0x24>)
    a468:	6022      	str	r2, [r4, #0]
    a46a:	001a      	movs	r2, r3
    a46c:	f7f9 fdf4 	bl	4058 <_write>
    a470:	1c43      	adds	r3, r0, #1
    a472:	d103      	bne.n	a47c <_write_r+0x20>
    a474:	6823      	ldr	r3, [r4, #0]
    a476:	2b00      	cmp	r3, #0
    a478:	d000      	beq.n	a47c <_write_r+0x20>
    a47a:	602b      	str	r3, [r5, #0]
    a47c:	bd70      	pop	{r4, r5, r6, pc}
    a47e:	46c0      	nop			; (mov r8, r8)
    a480:	20000e9c 	.word	0x20000e9c

0000a484 <__swsetup_r>:
    a484:	4b36      	ldr	r3, [pc, #216]	; (a560 <__swsetup_r+0xdc>)
    a486:	b570      	push	{r4, r5, r6, lr}
    a488:	681d      	ldr	r5, [r3, #0]
    a48a:	0006      	movs	r6, r0
    a48c:	000c      	movs	r4, r1
    a48e:	2d00      	cmp	r5, #0
    a490:	d005      	beq.n	a49e <__swsetup_r+0x1a>
    a492:	69ab      	ldr	r3, [r5, #24]
    a494:	2b00      	cmp	r3, #0
    a496:	d102      	bne.n	a49e <__swsetup_r+0x1a>
    a498:	0028      	movs	r0, r5
    a49a:	f7ff f945 	bl	9728 <__sinit>
    a49e:	4b31      	ldr	r3, [pc, #196]	; (a564 <__swsetup_r+0xe0>)
    a4a0:	429c      	cmp	r4, r3
    a4a2:	d10f      	bne.n	a4c4 <__swsetup_r+0x40>
    a4a4:	686c      	ldr	r4, [r5, #4]
    a4a6:	230c      	movs	r3, #12
    a4a8:	5ee2      	ldrsh	r2, [r4, r3]
    a4aa:	b293      	uxth	r3, r2
    a4ac:	0719      	lsls	r1, r3, #28
    a4ae:	d42d      	bmi.n	a50c <__swsetup_r+0x88>
    a4b0:	06d9      	lsls	r1, r3, #27
    a4b2:	d411      	bmi.n	a4d8 <__swsetup_r+0x54>
    a4b4:	2309      	movs	r3, #9
    a4b6:	2001      	movs	r0, #1
    a4b8:	6033      	str	r3, [r6, #0]
    a4ba:	3337      	adds	r3, #55	; 0x37
    a4bc:	4313      	orrs	r3, r2
    a4be:	81a3      	strh	r3, [r4, #12]
    a4c0:	4240      	negs	r0, r0
    a4c2:	bd70      	pop	{r4, r5, r6, pc}
    a4c4:	4b28      	ldr	r3, [pc, #160]	; (a568 <__swsetup_r+0xe4>)
    a4c6:	429c      	cmp	r4, r3
    a4c8:	d101      	bne.n	a4ce <__swsetup_r+0x4a>
    a4ca:	68ac      	ldr	r4, [r5, #8]
    a4cc:	e7eb      	b.n	a4a6 <__swsetup_r+0x22>
    a4ce:	4b27      	ldr	r3, [pc, #156]	; (a56c <__swsetup_r+0xe8>)
    a4d0:	429c      	cmp	r4, r3
    a4d2:	d1e8      	bne.n	a4a6 <__swsetup_r+0x22>
    a4d4:	68ec      	ldr	r4, [r5, #12]
    a4d6:	e7e6      	b.n	a4a6 <__swsetup_r+0x22>
    a4d8:	075b      	lsls	r3, r3, #29
    a4da:	d513      	bpl.n	a504 <__swsetup_r+0x80>
    a4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a4de:	2900      	cmp	r1, #0
    a4e0:	d008      	beq.n	a4f4 <__swsetup_r+0x70>
    a4e2:	0023      	movs	r3, r4
    a4e4:	3344      	adds	r3, #68	; 0x44
    a4e6:	4299      	cmp	r1, r3
    a4e8:	d002      	beq.n	a4f0 <__swsetup_r+0x6c>
    a4ea:	0030      	movs	r0, r6
    a4ec:	f7ff fa28 	bl	9940 <_free_r>
    a4f0:	2300      	movs	r3, #0
    a4f2:	6363      	str	r3, [r4, #52]	; 0x34
    a4f4:	2224      	movs	r2, #36	; 0x24
    a4f6:	89a3      	ldrh	r3, [r4, #12]
    a4f8:	4393      	bics	r3, r2
    a4fa:	81a3      	strh	r3, [r4, #12]
    a4fc:	2300      	movs	r3, #0
    a4fe:	6063      	str	r3, [r4, #4]
    a500:	6923      	ldr	r3, [r4, #16]
    a502:	6023      	str	r3, [r4, #0]
    a504:	2308      	movs	r3, #8
    a506:	89a2      	ldrh	r2, [r4, #12]
    a508:	4313      	orrs	r3, r2
    a50a:	81a3      	strh	r3, [r4, #12]
    a50c:	6923      	ldr	r3, [r4, #16]
    a50e:	2b00      	cmp	r3, #0
    a510:	d10b      	bne.n	a52a <__swsetup_r+0xa6>
    a512:	21a0      	movs	r1, #160	; 0xa0
    a514:	2280      	movs	r2, #128	; 0x80
    a516:	89a3      	ldrh	r3, [r4, #12]
    a518:	0089      	lsls	r1, r1, #2
    a51a:	0092      	lsls	r2, r2, #2
    a51c:	400b      	ands	r3, r1
    a51e:	4293      	cmp	r3, r2
    a520:	d003      	beq.n	a52a <__swsetup_r+0xa6>
    a522:	0021      	movs	r1, r4
    a524:	0030      	movs	r0, r6
    a526:	f7ff f9bd 	bl	98a4 <__smakebuf_r>
    a52a:	2301      	movs	r3, #1
    a52c:	89a2      	ldrh	r2, [r4, #12]
    a52e:	4013      	ands	r3, r2
    a530:	d011      	beq.n	a556 <__swsetup_r+0xd2>
    a532:	2300      	movs	r3, #0
    a534:	60a3      	str	r3, [r4, #8]
    a536:	6963      	ldr	r3, [r4, #20]
    a538:	425b      	negs	r3, r3
    a53a:	61a3      	str	r3, [r4, #24]
    a53c:	2000      	movs	r0, #0
    a53e:	6923      	ldr	r3, [r4, #16]
    a540:	4283      	cmp	r3, r0
    a542:	d1be      	bne.n	a4c2 <__swsetup_r+0x3e>
    a544:	230c      	movs	r3, #12
    a546:	5ee2      	ldrsh	r2, [r4, r3]
    a548:	0613      	lsls	r3, r2, #24
    a54a:	d5ba      	bpl.n	a4c2 <__swsetup_r+0x3e>
    a54c:	2340      	movs	r3, #64	; 0x40
    a54e:	4313      	orrs	r3, r2
    a550:	81a3      	strh	r3, [r4, #12]
    a552:	3801      	subs	r0, #1
    a554:	e7b5      	b.n	a4c2 <__swsetup_r+0x3e>
    a556:	0792      	lsls	r2, r2, #30
    a558:	d400      	bmi.n	a55c <__swsetup_r+0xd8>
    a55a:	6963      	ldr	r3, [r4, #20]
    a55c:	60a3      	str	r3, [r4, #8]
    a55e:	e7ed      	b.n	a53c <__swsetup_r+0xb8>
    a560:	20000128 	.word	0x20000128
    a564:	0000b078 	.word	0x0000b078
    a568:	0000b098 	.word	0x0000b098
    a56c:	0000b058 	.word	0x0000b058

0000a570 <_close_r>:
    a570:	2300      	movs	r3, #0
    a572:	b570      	push	{r4, r5, r6, lr}
    a574:	4c06      	ldr	r4, [pc, #24]	; (a590 <_close_r+0x20>)
    a576:	0005      	movs	r5, r0
    a578:	0008      	movs	r0, r1
    a57a:	6023      	str	r3, [r4, #0]
    a57c:	f7fe fbde 	bl	8d3c <_close>
    a580:	1c43      	adds	r3, r0, #1
    a582:	d103      	bne.n	a58c <_close_r+0x1c>
    a584:	6823      	ldr	r3, [r4, #0]
    a586:	2b00      	cmp	r3, #0
    a588:	d000      	beq.n	a58c <_close_r+0x1c>
    a58a:	602b      	str	r3, [r5, #0]
    a58c:	bd70      	pop	{r4, r5, r6, pc}
    a58e:	46c0      	nop			; (mov r8, r8)
    a590:	20000e9c 	.word	0x20000e9c

0000a594 <_fstat_r>:
    a594:	2300      	movs	r3, #0
    a596:	b570      	push	{r4, r5, r6, lr}
    a598:	4c06      	ldr	r4, [pc, #24]	; (a5b4 <_fstat_r+0x20>)
    a59a:	0005      	movs	r5, r0
    a59c:	0008      	movs	r0, r1
    a59e:	0011      	movs	r1, r2
    a5a0:	6023      	str	r3, [r4, #0]
    a5a2:	f7fe fbce 	bl	8d42 <_fstat>
    a5a6:	1c43      	adds	r3, r0, #1
    a5a8:	d103      	bne.n	a5b2 <_fstat_r+0x1e>
    a5aa:	6823      	ldr	r3, [r4, #0]
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d000      	beq.n	a5b2 <_fstat_r+0x1e>
    a5b0:	602b      	str	r3, [r5, #0]
    a5b2:	bd70      	pop	{r4, r5, r6, pc}
    a5b4:	20000e9c 	.word	0x20000e9c

0000a5b8 <_isatty_r>:
    a5b8:	2300      	movs	r3, #0
    a5ba:	b570      	push	{r4, r5, r6, lr}
    a5bc:	4c06      	ldr	r4, [pc, #24]	; (a5d8 <_isatty_r+0x20>)
    a5be:	0005      	movs	r5, r0
    a5c0:	0008      	movs	r0, r1
    a5c2:	6023      	str	r3, [r4, #0]
    a5c4:	f7fe fbc2 	bl	8d4c <_isatty>
    a5c8:	1c43      	adds	r3, r0, #1
    a5ca:	d103      	bne.n	a5d4 <_isatty_r+0x1c>
    a5cc:	6823      	ldr	r3, [r4, #0]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d000      	beq.n	a5d4 <_isatty_r+0x1c>
    a5d2:	602b      	str	r3, [r5, #0]
    a5d4:	bd70      	pop	{r4, r5, r6, pc}
    a5d6:	46c0      	nop			; (mov r8, r8)
    a5d8:	20000e9c 	.word	0x20000e9c

0000a5dc <_lseek_r>:
    a5dc:	b570      	push	{r4, r5, r6, lr}
    a5de:	0005      	movs	r5, r0
    a5e0:	0008      	movs	r0, r1
    a5e2:	0011      	movs	r1, r2
    a5e4:	2200      	movs	r2, #0
    a5e6:	4c06      	ldr	r4, [pc, #24]	; (a600 <_lseek_r+0x24>)
    a5e8:	6022      	str	r2, [r4, #0]
    a5ea:	001a      	movs	r2, r3
    a5ec:	f7fe fbb0 	bl	8d50 <_lseek>
    a5f0:	1c43      	adds	r3, r0, #1
    a5f2:	d103      	bne.n	a5fc <_lseek_r+0x20>
    a5f4:	6823      	ldr	r3, [r4, #0]
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d000      	beq.n	a5fc <_lseek_r+0x20>
    a5fa:	602b      	str	r3, [r5, #0]
    a5fc:	bd70      	pop	{r4, r5, r6, pc}
    a5fe:	46c0      	nop			; (mov r8, r8)
    a600:	20000e9c 	.word	0x20000e9c

0000a604 <memchr>:
    a604:	b2c9      	uxtb	r1, r1
    a606:	1882      	adds	r2, r0, r2
    a608:	4290      	cmp	r0, r2
    a60a:	d101      	bne.n	a610 <memchr+0xc>
    a60c:	2000      	movs	r0, #0
    a60e:	4770      	bx	lr
    a610:	7803      	ldrb	r3, [r0, #0]
    a612:	428b      	cmp	r3, r1
    a614:	d0fb      	beq.n	a60e <memchr+0xa>
    a616:	3001      	adds	r0, #1
    a618:	e7f6      	b.n	a608 <memchr+0x4>

0000a61a <memmove>:
    a61a:	b510      	push	{r4, lr}
    a61c:	4288      	cmp	r0, r1
    a61e:	d902      	bls.n	a626 <memmove+0xc>
    a620:	188b      	adds	r3, r1, r2
    a622:	4298      	cmp	r0, r3
    a624:	d308      	bcc.n	a638 <memmove+0x1e>
    a626:	2300      	movs	r3, #0
    a628:	429a      	cmp	r2, r3
    a62a:	d007      	beq.n	a63c <memmove+0x22>
    a62c:	5ccc      	ldrb	r4, [r1, r3]
    a62e:	54c4      	strb	r4, [r0, r3]
    a630:	3301      	adds	r3, #1
    a632:	e7f9      	b.n	a628 <memmove+0xe>
    a634:	5c8b      	ldrb	r3, [r1, r2]
    a636:	5483      	strb	r3, [r0, r2]
    a638:	3a01      	subs	r2, #1
    a63a:	d2fb      	bcs.n	a634 <memmove+0x1a>
    a63c:	bd10      	pop	{r4, pc}

0000a63e <__malloc_lock>:
    a63e:	4770      	bx	lr

0000a640 <__malloc_unlock>:
    a640:	4770      	bx	lr

0000a642 <_realloc_r>:
    a642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a644:	0007      	movs	r7, r0
    a646:	000d      	movs	r5, r1
    a648:	0016      	movs	r6, r2
    a64a:	2900      	cmp	r1, #0
    a64c:	d105      	bne.n	a65a <_realloc_r+0x18>
    a64e:	0011      	movs	r1, r2
    a650:	f7ff f9c0 	bl	99d4 <_malloc_r>
    a654:	0004      	movs	r4, r0
    a656:	0020      	movs	r0, r4
    a658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a65a:	2a00      	cmp	r2, #0
    a65c:	d103      	bne.n	a666 <_realloc_r+0x24>
    a65e:	f7ff f96f 	bl	9940 <_free_r>
    a662:	0034      	movs	r4, r6
    a664:	e7f7      	b.n	a656 <_realloc_r+0x14>
    a666:	f000 f827 	bl	a6b8 <_malloc_usable_size_r>
    a66a:	002c      	movs	r4, r5
    a66c:	4286      	cmp	r6, r0
    a66e:	d9f2      	bls.n	a656 <_realloc_r+0x14>
    a670:	0031      	movs	r1, r6
    a672:	0038      	movs	r0, r7
    a674:	f7ff f9ae 	bl	99d4 <_malloc_r>
    a678:	1e04      	subs	r4, r0, #0
    a67a:	d0ec      	beq.n	a656 <_realloc_r+0x14>
    a67c:	0029      	movs	r1, r5
    a67e:	0032      	movs	r2, r6
    a680:	f7fe fe56 	bl	9330 <memcpy>
    a684:	0029      	movs	r1, r5
    a686:	0038      	movs	r0, r7
    a688:	f7ff f95a 	bl	9940 <_free_r>
    a68c:	e7e3      	b.n	a656 <_realloc_r+0x14>
	...

0000a690 <_read_r>:
    a690:	b570      	push	{r4, r5, r6, lr}
    a692:	0005      	movs	r5, r0
    a694:	0008      	movs	r0, r1
    a696:	0011      	movs	r1, r2
    a698:	2200      	movs	r2, #0
    a69a:	4c06      	ldr	r4, [pc, #24]	; (a6b4 <_read_r+0x24>)
    a69c:	6022      	str	r2, [r4, #0]
    a69e:	001a      	movs	r2, r3
    a6a0:	f7f9 fcb8 	bl	4014 <_read>
    a6a4:	1c43      	adds	r3, r0, #1
    a6a6:	d103      	bne.n	a6b0 <_read_r+0x20>
    a6a8:	6823      	ldr	r3, [r4, #0]
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	d000      	beq.n	a6b0 <_read_r+0x20>
    a6ae:	602b      	str	r3, [r5, #0]
    a6b0:	bd70      	pop	{r4, r5, r6, pc}
    a6b2:	46c0      	nop			; (mov r8, r8)
    a6b4:	20000e9c 	.word	0x20000e9c

0000a6b8 <_malloc_usable_size_r>:
    a6b8:	1f0b      	subs	r3, r1, #4
    a6ba:	681b      	ldr	r3, [r3, #0]
    a6bc:	1f18      	subs	r0, r3, #4
    a6be:	2b00      	cmp	r3, #0
    a6c0:	da01      	bge.n	a6c6 <_malloc_usable_size_r+0xe>
    a6c2:	580b      	ldr	r3, [r1, r0]
    a6c4:	18c0      	adds	r0, r0, r3
    a6c6:	4770      	bx	lr

0000a6c8 <_tcc_apbcmasks>:
    a6c8:	0100 0000 0200 0000 0400 0000               ............

0000a6d4 <_tcc_cc_nums>:
    a6d4:	0204 0002                                   ....

0000a6d8 <_tcc_gclk_ids>:
    a6d8:	1a1a 001b                                   ....

0000a6dc <_tcc_maxs>:
    a6dc:	ffff 00ff ffff 00ff ffff 0000               ............

0000a6e8 <_tcc_ow_nums>:
    a6e8:	0408 0002                                   ....

0000a6ec <_tcc_intflag>:
    a6ec:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    a6fc:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    a70c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000a71c <tcc_interrupt_vectors.12466>:
    a71c:	100f 0011 6425 0000 3025 6432 0000 0000     ....%d..%02d....
    a72c:	6547 656e 6172 6574 2064 6966 656c 6e20     Generated file n
    a73c:	6d61 3a65 2520 0a73 000d 0000 7245 6f72     ame: %s.....Erro
    a74c:	2072 6877 6c69 2065 706f 6e65 6e69 2067     r while opening 
    a75c:	6966 656c 203a 2523 0a64 000d 7245 6f72     file: #%d...Erro
    a76c:	2072 6877 6c69 2065 7277 7469 6e69 2067     r while writing 
    a77c:	4157 2056 6568 6461 7265 203a 2523 0a64     WAV header: #%d.
    a78c:	000d 0000 7245 6f72 2072 6877 6c69 2065     ....Error while 
    a79c:	7973 636e 6e69 2067 6966 656c 203a 2523     syncing file: #%
    a7ac:	0a64 000d 7245 6f72 2072 6877 6c69 2065     d...Error while 
    a7bc:	6c63 736f 6e69 2067 6966 656c 203a 2523     closing file: #%
    a7cc:	0a64 000d                                   d...

0000a7d0 <mmc_trans_multipliers>:
    a7d0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    a7e0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    a7f0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    a800:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000a810 <sd_mmc_trans_units>:
    a810:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000a82c <sd_trans_multipliers>:
    a82c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    a83c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    a84c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    a85c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    a86c:	19d2 0000 1aa8 0000 1aa8 0000 1914 0000     ................
    a87c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a88c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a89c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a8ac:	1aa8 0000 1aa8 0000 1938 0000 1aa8 0000     ........8.......
    a8bc:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a8cc:	1aa8 0000 1aa8 0000 19c2 0000 1a56 0000     ............V...
    a8dc:	1aa8 0000 1aa8 0000 1a76 0000 1aa8 0000     ........v.......
    a8ec:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a8fc:	1aa8 0000 19fe 0000 1aa8 0000 1aa8 0000     ................
    a90c:	1a98 0000 1aa8 0000 1aa0 0000 1aa8 0000     ................
    a91c:	1aa8 0000 1aa8 0000 1aa8 0000 1a8e 0000     ................
    a92c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a93c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a94c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a95c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a96c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a97c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a98c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a99c:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a9ac:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a9bc:	1aa8 0000 1aa8 0000 1aa8 0000 1aa8 0000     ................
    a9cc:	1aa8 0000 1aa8 0000 19ca 0000 3231 3133     ............1231
    a9dc:	3332 3231 3133 3332 0000 0000 2e76 0000     23123123....v...
    a9ec:	2e72 0000 2e72 0000 2ee0 0000 2ee0 0000     r...r...........
    a9fc:	2e8a 0000 2e7c 0000 2e90 0000 2ece 0000     ....|...........
    aa0c:	3064 0000 3044 0000 3044 0000 30d0 0000     d0..D0..D0...0..
    aa1c:	3056 0000 3072 0000 3048 0000 3080 0000     V0..r0..H0...0..
    aa2c:	30c0 0000                                   .0..

0000aa30 <LfnOfs>:
    aa30:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000aa40 <excvt.4558>:
    aa40:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    aa50:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    aa60:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    aa70:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    aa80:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    aa90:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    aaa0:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    aab0:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    aac0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    aad0:	5d5b 0000                                   []..

0000aad4 <Tbl>:
    aad4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    aae4:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    aaf4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    ab04:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    ab14:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    ab24:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    ab34:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    ab44:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    ab54:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    ab64:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    ab74:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    ab84:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    ab94:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    aba4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    abb4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    abc4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000abd4 <tbl_lower.4308>:
    abd4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    abe4:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    abf4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    ac04:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    ac14:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    ac24:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    ac34:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    ac44:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    ac54:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    ac64:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    ac74:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    ac84:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    ac94:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    aca4:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    acb4:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    acc4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    acd4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    ace4:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    acf4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    ad04:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    ad14:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    ad24:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    ad34:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    ad44:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    ad54:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    ad64:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    ad74:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    ad84:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    ad94:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    ada4:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000adb4 <tbl_upper.4309>:
    adb4:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    adc4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    add4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    ade4:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    adf4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    ae04:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    ae14:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    ae24:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    ae34:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    ae44:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    ae54:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    ae64:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    ae74:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    ae84:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    ae94:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    aea4:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    aeb4:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    aec4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    aed4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    aee4:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    aef4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    af04:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    af14:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    af24:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    af34:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    af44:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    af54:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    af64:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    af74:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    af84:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    af94:	4453 6320 7261 2064 6f6d 6e75 6574 2164     SD card mounted!
    afa4:	0d0a 0000 6e49 6176 696c 2064 7264 7669     ....Invalid driv
    afb4:	2165 0a21 000d 0000 6143 6472 6920 736e     e!!.....Card ins
    afc4:	6174 6c6c 6620 6961 216c 0d0a 0000 0000     tall fail!......
    afd4:	6c50 6165 6573 7520 706e 756c 2067 6e61     Please unplug an
    afe4:	2064 6572 702d 756c 2067 6874 2065 6163     d re-plug the ca
    aff4:	6472 0a2e 000d 0000 6478 0000 6486 0000     rd......xd...d..
    b004:	6520 0000 65c0 0000 6624 0000                e...e..$f..

0000b010 <_usb_device_irq_bits>:
    b010:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

0000b020 <_usb_endpoint_irq_bits>:
    b020:	0c03 6010 0800 4200 0c00 4200 1000 4200     ...`...B...B...B
    b030:	1400 4200 1800 4200 1c00 4200 5322 2f44     ...B...B...B"SD/
    b040:	4d4d 2043 6143 6472 6f20 6576 2072 5053     MMC Card over SP
    b050:	2249 0000                                   I"..

0000b054 <_global_impure_ptr>:
    b054:	012c 2000                                   ,.. 

0000b058 <__sf_fake_stderr>:
	...

0000b078 <__sf_fake_stdin>:
	...

0000b098 <__sf_fake_stdout>:
	...
    b0b8:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    b0c8:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    b0d8:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    b0e8:	6665 0000                                   ef..

0000b0ec <_init>:
    b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0ee:	46c0      	nop			; (mov r8, r8)
    b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b0f2:	bc08      	pop	{r3}
    b0f4:	469e      	mov	lr, r3
    b0f6:	4770      	bx	lr

0000b0f8 <__init_array_start>:
    b0f8:	000000dd 	.word	0x000000dd

0000b0fc <_fini>:
    b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b102:	bc08      	pop	{r3}
    b104:	469e      	mov	lr, r3
    b106:	4770      	bx	lr

0000b108 <__fini_array_start>:
    b108:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <wave_header>:
2000000c:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
2000001c:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
2000002c:	0004 0010 6164 6174 0000 0000               ....data....

20000038 <sd_mmc_cards>:
	...
20000040:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

2000005c <udi_api_msc>:
2000005c:	14d5 0000 1b49 0000 1b71 0000 1479 0000     ....I...q...y...
2000006c:	0000 0000                                   ....

20000070 <udi_msc_b_ack_trans>:
20000070:	0101                                             .

20000071 <udi_msc_b_reset_trans>:
20000071:	0001 5500                                        ...

20000074 <udi_msc_csw>:
20000074:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000084 <udi_msc_inquiry_data.12608>:
20000084:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
200000a4:	2e31 3030                                   1.00

200000a8 <udc_string_desc>:
200000a8:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000c4 <udc_string_desc_languageid>:
200000c4:	0304 0409                                   ....

200000c8 <udc_string_manufacturer_name>:
200000c8:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000d4 <udc_string_product_name>:
200000d4:	534d 0043                                   MSC.

200000d8 <udc_config>:
200000d8:	010c 2000 00e4 2000 0000 0000               ... ... ....

200000e4 <udc_config_lsfs>:
200000e4:	00ec 2000 0120 2000                         ...  .. 

200000ec <udc_desc_fs>:
200000ec:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000fc:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

2000010c <udc_device_desc>:
2000010c:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000011c:	0103 0000                                   ....

20000120 <udi_apis>:
20000120:	005c 2000                                   \.. 

20000124 <ss_pins>:
20000124:	0105                                             .

20000125 <g_interrupt_enabled>:
20000125:	0001 2c00                                        ...

20000128 <_impure_ptr>:
20000128:	012c 2000                                   ,.. 

2000012c <impure_data>:
2000012c:	0000 0000 b078 0000 b098 0000 b058 0000     ....x.......X...
	...
