
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007718  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007718  00007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  00007720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000994  20000160  00007880  00020160  2**2
                  ALLOC
  4 .stack        00002004  20000af4  00008214  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005556e  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007396  00000000  00000000  0007574f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ea2d  00000000  00000000  0007cae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d20  00000000  00000000  0008b512  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001408  00000000  00000000  0008c232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024668  00000000  00000000  0008d63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b085  00000000  00000000  000b1ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c154  00000000  00000000  000ccd27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026c8  00000000  00000000  00168e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 2a 00 20 e9 64 00 00 e5 64 00 00 e5 64 00 00     .*. .d...d...d..
	...
      2c:	e5 64 00 00 00 00 00 00 00 00 00 00 e5 64 00 00     .d...........d..
      3c:	e5 64 00 00 e5 64 00 00 e5 64 00 00 e5 64 00 00     .d...d...d...d..
      4c:	e5 64 00 00 dd 4a 00 00 e5 64 00 00 e5 64 00 00     .d...J...d...d..
      5c:	99 42 00 00 e5 64 00 00 e5 1e 00 00 f5 1e 00 00     .B...d..........
      6c:	05 1f 00 00 15 1f 00 00 25 1f 00 00 35 1f 00 00     ........%...5...
      7c:	e5 64 00 00 e5 64 00 00 e5 64 00 00 e5 64 00 00     .d...d...d...d..
      8c:	e5 64 00 00 e5 64 00 00 e5 64 00 00 e5 64 00 00     .d...d...d...d..
      9c:	e5 64 00 00 e5 64 00 00 e5 64 00 00 e5 64 00 00     .d...d...d...d..
      ac:	e5 64 00 00 00 00 00 00                             .d......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	00007720 	.word	0x00007720

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	00007720 	.word	0x00007720
     10c:	00007720 	.word	0x00007720
     110:	00000000 	.word	0x00000000

00000114 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     118:	a901      	add	r1, sp, #4
     11a:	4b0c      	ldr	r3, [pc, #48]	; (14c <_tc_get_inst_index+0x38>)
     11c:	000a      	movs	r2, r1
     11e:	cb32      	ldmia	r3!, {r1, r4, r5}
     120:	c232      	stmia	r2!, {r1, r4, r5}
     122:	cb12      	ldmia	r3!, {r1, r4}
     124:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     126:	9b01      	ldr	r3, [sp, #4]
     128:	4298      	cmp	r0, r3
     12a:	d00b      	beq.n	144 <_tc_get_inst_index+0x30>
     12c:	2301      	movs	r3, #1
     12e:	a901      	add	r1, sp, #4
     130:	009a      	lsls	r2, r3, #2
     132:	5852      	ldr	r2, [r2, r1]
     134:	4282      	cmp	r2, r0
     136:	d006      	beq.n	146 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     138:	3301      	adds	r3, #1
     13a:	2b05      	cmp	r3, #5
     13c:	d1f8      	bne.n	130 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     13e:	2000      	movs	r0, #0
}
     140:	b007      	add	sp, #28
     142:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     144:	2300      	movs	r3, #0
			return i;
     146:	b2d8      	uxtb	r0, r3
     148:	e7fa      	b.n	140 <_tc_get_inst_index+0x2c>
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	000073bc 	.word	0x000073bc

00000150 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     150:	b5f0      	push	{r4, r5, r6, r7, lr}
     152:	b089      	sub	sp, #36	; 0x24
     154:	0006      	movs	r6, r0
     156:	000d      	movs	r5, r1
     158:	0017      	movs	r7, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     15a:	0008      	movs	r0, r1
     15c:	4b80      	ldr	r3, [pc, #512]	; (360 <tc_init+0x210>)
     15e:	4798      	blx	r3
     160:	0004      	movs	r4, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     162:	ab06      	add	r3, sp, #24
     164:	221b      	movs	r2, #27
     166:	701a      	strb	r2, [r3, #0]
     168:	3201      	adds	r2, #1
     16a:	705a      	strb	r2, [r3, #1]
     16c:	709a      	strb	r2, [r3, #2]
     16e:	3201      	adds	r2, #1
     170:	70da      	strb	r2, [r3, #3]
     172:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     174:	aa03      	add	r2, sp, #12
     176:	4b7b      	ldr	r3, [pc, #492]	; (364 <tc_init+0x214>)
     178:	3314      	adds	r3, #20
     17a:	cb03      	ldmia	r3!, {r0, r1}
     17c:	c203      	stmia	r2!, {r0, r1}
     17e:	881b      	ldrh	r3, [r3, #0]
     180:	8013      	strh	r3, [r2, #0]
	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     182:	6035      	str	r5, [r6, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     184:	78bb      	ldrb	r3, [r7, #2]
     186:	2b08      	cmp	r3, #8
     188:	d006      	beq.n	198 <tc_init+0x48>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     18a:	7133      	strb	r3, [r6, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     18c:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     18e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     190:	07db      	lsls	r3, r3, #31
     192:	d505      	bpl.n	1a0 <tc_init+0x50>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     194:	b009      	add	sp, #36	; 0x24
     196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     198:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     19a:	07e2      	lsls	r2, r4, #31
     19c:	d5fa      	bpl.n	194 <tc_init+0x44>
     19e:	e7f4      	b.n	18a <tc_init+0x3a>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1a0:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     1a2:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     1a4:	06db      	lsls	r3, r3, #27
     1a6:	d4f5      	bmi.n	194 <tc_init+0x44>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     1a8:	882b      	ldrh	r3, [r5, #0]
     1aa:	079b      	lsls	r3, r3, #30
     1ac:	d4f2      	bmi.n	194 <tc_init+0x44>
	if (config->pwm_channel[0].enabled) {
     1ae:	7c3b      	ldrb	r3, [r7, #16]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d179      	bne.n	2a8 <tc_init+0x158>
	if (config->pwm_channel[1].enabled) {
     1b4:	7f3b      	ldrb	r3, [r7, #28]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d000      	beq.n	1bc <tc_init+0x6c>
     1ba:	e081      	b.n	2c0 <tc_init+0x170>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     1bc:	496a      	ldr	r1, [pc, #424]	; (368 <tc_init+0x218>)
     1be:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     1c0:	0062      	lsls	r2, r4, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     1c2:	ab03      	add	r3, sp, #12
     1c4:	5ad3      	ldrh	r3, [r2, r3]
     1c6:	4303      	orrs	r3, r0
     1c8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     1ca:	78bb      	ldrb	r3, [r7, #2]
     1cc:	2b08      	cmp	r3, #8
     1ce:	d100      	bne.n	1d2 <tc_init+0x82>
     1d0:	e086      	b.n	2e0 <tc_init+0x190>
	gclk_chan_config.source_generator = config->clock_source;
     1d2:	a901      	add	r1, sp, #4
     1d4:	783b      	ldrb	r3, [r7, #0]
     1d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     1d8:	ab06      	add	r3, sp, #24
     1da:	5d1c      	ldrb	r4, [r3, r4]
     1dc:	0020      	movs	r0, r4
     1de:	4b63      	ldr	r3, [pc, #396]	; (36c <tc_init+0x21c>)
     1e0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     1e2:	0020      	movs	r0, r4
     1e4:	4b62      	ldr	r3, [pc, #392]	; (370 <tc_init+0x220>)
     1e6:	4798      	blx	r3
	ctrla_tmp =
     1e8:	8939      	ldrh	r1, [r7, #8]
     1ea:	88bb      	ldrh	r3, [r7, #4]
     1ec:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     1ee:	78b9      	ldrb	r1, [r7, #2]
     1f0:	79ba      	ldrb	r2, [r7, #6]
     1f2:	4311      	orrs	r1, r2
	ctrla_tmp =
     1f4:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     1f6:	787b      	ldrb	r3, [r7, #1]
     1f8:	2b00      	cmp	r3, #0
     1fa:	d002      	beq.n	202 <tc_init+0xb2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	011b      	lsls	r3, r3, #4
     200:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     202:	6832      	ldr	r2, [r6, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     204:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     206:	b25b      	sxtb	r3, r3
     208:	2b00      	cmp	r3, #0
     20a:	dbfb      	blt.n	204 <tc_init+0xb4>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     20c:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     20e:	7b79      	ldrb	r1, [r7, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     210:	1e4b      	subs	r3, r1, #1
     212:	4199      	sbcs	r1, r3
     214:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     216:	7bbb      	ldrb	r3, [r7, #14]
     218:	2b00      	cmp	r3, #0
     21a:	d001      	beq.n	220 <tc_init+0xd0>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     21c:	2301      	movs	r3, #1
     21e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     220:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     222:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     224:	b25b      	sxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	dbfb      	blt.n	222 <tc_init+0xd2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     22a:	23ff      	movs	r3, #255	; 0xff
     22c:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     22e:	2900      	cmp	r1, #0
     230:	d005      	beq.n	23e <tc_init+0xee>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     232:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     234:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     236:	b25b      	sxtb	r3, r3
     238:	2b00      	cmp	r3, #0
     23a:	dbfb      	blt.n	234 <tc_init+0xe4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     23c:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     23e:	7ab9      	ldrb	r1, [r7, #10]
		if (config->enable_capture_on_channel[i] == true) {
     240:	7afb      	ldrb	r3, [r7, #11]
     242:	2b00      	cmp	r3, #0
     244:	d001      	beq.n	24a <tc_init+0xfa>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     246:	2310      	movs	r3, #16
     248:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     24a:	7b3b      	ldrb	r3, [r7, #12]
     24c:	2b00      	cmp	r3, #0
     24e:	d001      	beq.n	254 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     250:	2320      	movs	r3, #32
     252:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     254:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     256:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     258:	b25b      	sxtb	r3, r3
     25a:	2b00      	cmp	r3, #0
     25c:	dbfb      	blt.n	256 <tc_init+0x106>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     25e:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     260:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     262:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     264:	b25b      	sxtb	r3, r3
     266:	2b00      	cmp	r3, #0
     268:	dbfb      	blt.n	262 <tc_init+0x112>
	switch (module_inst->counter_size) {
     26a:	7933      	ldrb	r3, [r6, #4]
     26c:	2b04      	cmp	r3, #4
     26e:	d03f      	beq.n	2f0 <tc_init+0x1a0>
     270:	2b08      	cmp	r3, #8
     272:	d05e      	beq.n	332 <tc_init+0x1e2>
	return STATUS_ERR_INVALID_ARG;
     274:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     276:	2b00      	cmp	r3, #0
     278:	d000      	beq.n	27c <tc_init+0x12c>
     27a:	e78b      	b.n	194 <tc_init+0x44>
     27c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     27e:	b25b      	sxtb	r3, r3
     280:	2b00      	cmp	r3, #0
     282:	dbfb      	blt.n	27c <tc_init+0x12c>
				= config->counter_16_bit.value;
     284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
     286:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     288:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     28a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     28c:	b25b      	sxtb	r3, r3
     28e:	2b00      	cmp	r3, #0
     290:	dbfb      	blt.n	28a <tc_init+0x13a>
					config->counter_16_bit.compare_capture_channel[0];
     292:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     294:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     296:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     298:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     29a:	b25b      	sxtb	r3, r3
     29c:	2b00      	cmp	r3, #0
     29e:	dbfb      	blt.n	298 <tc_init+0x148>
					config->counter_16_bit.compare_capture_channel[1];
     2a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     2a2:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     2a4:	2000      	movs	r0, #0
     2a6:	e775      	b.n	194 <tc_init+0x44>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2a8:	a902      	add	r1, sp, #8
     2aa:	2301      	movs	r3, #1
     2ac:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2ae:	2200      	movs	r2, #0
     2b0:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     2b2:	7e3a      	ldrb	r2, [r7, #24]
     2b4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2b6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2b8:	7d38      	ldrb	r0, [r7, #20]
     2ba:	4b2e      	ldr	r3, [pc, #184]	; (374 <tc_init+0x224>)
     2bc:	4798      	blx	r3
     2be:	e779      	b.n	1b4 <tc_init+0x64>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2c0:	a902      	add	r1, sp, #8
     2c2:	2301      	movs	r3, #1
     2c4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     2c6:	2200      	movs	r2, #0
     2c8:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     2ca:	3224      	adds	r2, #36	; 0x24
     2cc:	18ba      	adds	r2, r7, r2
     2ce:	7812      	ldrb	r2, [r2, #0]
     2d0:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     2d2:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     2d4:	331f      	adds	r3, #31
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	7818      	ldrb	r0, [r3, #0]
     2da:	4b26      	ldr	r3, [pc, #152]	; (374 <tc_init+0x224>)
     2dc:	4798      	blx	r3
     2de:	e76d      	b.n	1bc <tc_init+0x6c>
     2e0:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     2e2:	1c62      	adds	r2, r4, #1
     2e4:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2e6:	ab03      	add	r3, sp, #12
     2e8:	5ad3      	ldrh	r3, [r2, r3]
     2ea:	4303      	orrs	r3, r0
     2ec:	620b      	str	r3, [r1, #32]
     2ee:	e770      	b.n	1d2 <tc_init+0x82>
     2f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     2f2:	b25b      	sxtb	r3, r3
     2f4:	2b00      	cmp	r3, #0
     2f6:	dbfb      	blt.n	2f0 <tc_init+0x1a0>
					config->counter_8_bit.value;
     2f8:	2328      	movs	r3, #40	; 0x28
     2fa:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.COUNT.reg =
     2fc:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2fe:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     300:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     302:	b25b      	sxtb	r3, r3
     304:	2b00      	cmp	r3, #0
     306:	dbfb      	blt.n	300 <tc_init+0x1b0>
					config->counter_8_bit.period;
     308:	2329      	movs	r3, #41	; 0x29
     30a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.PER.reg =
     30c:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     30e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     310:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     312:	b25b      	sxtb	r3, r3
     314:	2b00      	cmp	r3, #0
     316:	dbfb      	blt.n	310 <tc_init+0x1c0>
					config->counter_8_bit.compare_capture_channel[0];
     318:	232a      	movs	r3, #42	; 0x2a
     31a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[0].reg =
     31c:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     31e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     320:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     322:	b25b      	sxtb	r3, r3
     324:	2b00      	cmp	r3, #0
     326:	dbfb      	blt.n	320 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[1];
     328:	232b      	movs	r3, #43	; 0x2b
     32a:	5cfb      	ldrb	r3, [r7, r3]
			hw->COUNT8.CC[1].reg =
     32c:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     32e:	2000      	movs	r0, #0
     330:	e730      	b.n	194 <tc_init+0x44>
     332:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     334:	b25b      	sxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	dbfb      	blt.n	332 <tc_init+0x1e2>
				= config->counter_32_bit.value;
     33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     33c:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     33e:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     340:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     342:	b25b      	sxtb	r3, r3
     344:	2b00      	cmp	r3, #0
     346:	dbfb      	blt.n	340 <tc_init+0x1f0>
			hw->COUNT32.CC[0].reg =
     348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     34a:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     34c:	6832      	ldr	r2, [r6, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     34e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     350:	b25b      	sxtb	r3, r3
     352:	2b00      	cmp	r3, #0
     354:	dbfb      	blt.n	34e <tc_init+0x1fe>
					config->counter_32_bit.compare_capture_channel[1];
     356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     358:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     35a:	2000      	movs	r0, #0
     35c:	e71a      	b.n	194 <tc_init+0x44>
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000115 	.word	0x00000115
     364:	000073bc 	.word	0x000073bc
     368:	40000400 	.word	0x40000400
     36c:	0000638d 	.word	0x0000638d
     370:	00006301 	.word	0x00006301
     374:	00006485 	.word	0x00006485

00000378 <audio_in_init>:
extern struct spi_module adc_spi_module;
extern struct spi_slave_inst adc_spi_slave;
extern uint8_t adc_values[2];

void audio_in_init(void)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b091      	sub	sp, #68	; 0x44
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     37c:	a90f      	add	r1, sp, #60	; 0x3c
     37e:	2501      	movs	r5, #1
     380:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     382:	2600      	movs	r6, #0
     384:	708e      	strb	r6, [r1, #2]
	/* Initializing the CONV pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     386:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
     388:	2014      	movs	r0, #20
     38a:	4f28      	ldr	r7, [pc, #160]	; (42c <audio_in_init+0xb4>)
     38c:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     38e:	2280      	movs	r2, #128	; 0x80
     390:	0352      	lsls	r2, r2, #13
     392:	4b27      	ldr	r3, [pc, #156]	; (430 <audio_in_init+0xb8>)
     394:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     396:	4c27      	ldr	r4, [pc, #156]	; (434 <audio_in_init+0xbc>)
     398:	232f      	movs	r3, #47	; 0x2f
     39a:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     39c:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
     39e:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     3a0:	466b      	mov	r3, sp
     3a2:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
     3a4:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     3a6:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     3a8:	4669      	mov	r1, sp
     3aa:	202f      	movs	r0, #47	; 0x2f
     3ac:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
     3ae:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     3b0:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     3b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3b4:	2900      	cmp	r1, #0
     3b6:	d104      	bne.n	3c2 <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
     3b8:	0953      	lsrs	r3, r2, #5
     3ba:	01db      	lsls	r3, r3, #7
     3bc:	491c      	ldr	r1, [pc, #112]	; (430 <audio_in_init+0xb8>)
     3be:	468c      	mov	ip, r1
     3c0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3c2:	211f      	movs	r1, #31
     3c4:	4011      	ands	r1, r2
     3c6:	2201      	movs	r2, #1
     3c8:	0010      	movs	r0, r2
     3ca:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     3cc:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     3ce:	ac01      	add	r4, sp, #4
     3d0:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     3d2:	2300      	movs	r3, #0
     3d4:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     3d6:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     3d8:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     3da:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     3dc:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     3de:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     3e0:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     3e2:	3223      	adds	r2, #35	; 0x23
     3e4:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     3e6:	3a18      	subs	r2, #24
     3e8:	2100      	movs	r1, #0
     3ea:	a807      	add	r0, sp, #28
     3ec:	4b12      	ldr	r3, [pc, #72]	; (438 <audio_in_init+0xc0>)
     3ee:	4798      	blx	r3
	config_spi_slave.ss_pin = ADC_SPI_SS_PIN;
	spi_attach_slave(&adc_spi_slave, &config_spi_slave);
	
	/* Initializing the SPI master */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     3f0:	2380      	movs	r3, #128	; 0x80
     3f2:	039b      	lsls	r3, r3, #14
     3f4:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     3f6:	4b11      	ldr	r3, [pc, #68]	; (43c <audio_in_init+0xc4>)
     3f8:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     3fa:	4b11      	ldr	r3, [pc, #68]	; (440 <audio_in_init+0xc8>)
     3fc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     3fe:	4b11      	ldr	r3, [pc, #68]	; (444 <audio_in_init+0xcc>)
     400:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     402:	2301      	movs	r3, #1
     404:	425b      	negs	r3, r3
     406:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
     408:	4b0f      	ldr	r3, [pc, #60]	; (448 <audio_in_init+0xd0>)
     40a:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     40c:	4d0f      	ldr	r5, [pc, #60]	; (44c <audio_in_init+0xd4>)
     40e:	0022      	movs	r2, r4
     410:	490f      	ldr	r1, [pc, #60]	; (450 <audio_in_init+0xd8>)
     412:	0028      	movs	r0, r5
     414:	4b0f      	ldr	r3, [pc, #60]	; (454 <audio_in_init+0xdc>)
     416:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     418:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     41a:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     41c:	2b00      	cmp	r3, #0
     41e:	d1fc      	bne.n	41a <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     420:	6813      	ldr	r3, [r2, #0]
     422:	2102      	movs	r1, #2
     424:	430b      	orrs	r3, r1
     426:	6013      	str	r3, [r2, #0]
	
	spi_enable(&adc_spi_module);
}
     428:	b011      	add	sp, #68	; 0x44
     42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     42c:	00006131 	.word	0x00006131
     430:	41004400 	.word	0x41004400
     434:	200005e0 	.word	0x200005e0
     438:	00006bf3 	.word	0x00006bf3
     43c:	00100002 	.word	0x00100002
     440:	00110002 	.word	0x00110002
     444:	00120002 	.word	0x00120002
     448:	001e8480 	.word	0x001e8480
     44c:	20000598 	.word	0x20000598
     450:	42000c00 	.word	0x42000c00
     454:	00004f29 	.word	0x00004f29

00000458 <audio_record_1samp>:


void audio_record_1samp(void) {
     458:	b570      	push	{r4, r5, r6, lr}
	delay_us(1);
     45a:	2000      	movs	r0, #0
     45c:	4b0c      	ldr	r3, [pc, #48]	; (490 <audio_record_1samp+0x38>)
     45e:	4798      	blx	r3
     460:	0002      	movs	r2, r0
     462:	2300      	movs	r3, #0
     464:	480b      	ldr	r0, [pc, #44]	; (494 <audio_record_1samp+0x3c>)
     466:	2100      	movs	r1, #0
     468:	1880      	adds	r0, r0, r2
     46a:	4159      	adcs	r1, r3
     46c:	4a0a      	ldr	r2, [pc, #40]	; (498 <audio_record_1samp+0x40>)
     46e:	2300      	movs	r3, #0
     470:	4c0a      	ldr	r4, [pc, #40]	; (49c <audio_record_1samp+0x44>)
     472:	47a0      	blx	r4
     474:	4b0a      	ldr	r3, [pc, #40]	; (4a0 <audio_record_1samp+0x48>)
     476:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
     478:	4c0a      	ldr	r4, [pc, #40]	; (4a4 <audio_record_1samp+0x4c>)
     47a:	2580      	movs	r5, #128	; 0x80
     47c:	036d      	lsls	r5, r5, #13
     47e:	6165      	str	r5, [r4, #20]
	port_pin_set_output_level(ADC_CONV_PIN, false);
	spi_read_buffer_wait(&adc_spi_module, adc_values, 2, 0xFF);
     480:	23ff      	movs	r3, #255	; 0xff
     482:	2202      	movs	r2, #2
     484:	4908      	ldr	r1, [pc, #32]	; (4a8 <audio_record_1samp+0x50>)
     486:	4809      	ldr	r0, [pc, #36]	; (4ac <audio_record_1samp+0x54>)
     488:	4e09      	ldr	r6, [pc, #36]	; (4b0 <audio_record_1samp+0x58>)
     48a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     48c:	61a5      	str	r5, [r4, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
     48e:	bd70      	pop	{r4, r5, r6, pc}
     490:	00006275 	.word	0x00006275
     494:	006acfbf 	.word	0x006acfbf
     498:	006acfc0 	.word	0x006acfc0
     49c:	0000696d 	.word	0x0000696d
     4a0:	20000001 	.word	0x20000001
     4a4:	41004400 	.word	0x41004400
     4a8:	2000028c 	.word	0x2000028c
     4ac:	20000598 	.word	0x20000598
     4b0:	0000525d 	.word	0x0000525d

000004b4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     4b4:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     4b6:	4b07      	ldr	r3, [pc, #28]	; (4d4 <sd_mmc_configure_slot+0x20>)
     4b8:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     4ba:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     4bc:	5ccb      	ldrb	r3, [r1, r3]
     4be:	1e5a      	subs	r2, r3, #1
     4c0:	4193      	sbcs	r3, r2
     4c2:	b2db      	uxtb	r3, r3
     4c4:	7c4a      	ldrb	r2, [r1, #17]
     4c6:	6809      	ldr	r1, [r1, #0]
     4c8:	4803      	ldr	r0, [pc, #12]	; (4d8 <sd_mmc_configure_slot+0x24>)
     4ca:	7800      	ldrb	r0, [r0, #0]
     4cc:	4c03      	ldr	r4, [pc, #12]	; (4dc <sd_mmc_configure_slot+0x28>)
     4ce:	47a0      	blx	r4
}
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	2000017c 	.word	0x2000017c
     4d8:	20000185 	.word	0x20000185
     4dc:	00005b85 	.word	0x00005b85

000004e0 <sd_mmc_select_slot>:
{
     4e0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     4e2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     4e4:	2800      	cmp	r0, #0
     4e6:	d001      	beq.n	4ec <sd_mmc_select_slot+0xc>
}
     4e8:	0018      	movs	r0, r3
     4ea:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     4ec:	4b40      	ldr	r3, [pc, #256]	; (5f0 <sd_mmc_select_slot+0x110>)
     4ee:	7a19      	ldrb	r1, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     4f0:	09ca      	lsrs	r2, r1, #7
		return NULL;
     4f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     4f4:	2a00      	cmp	r2, #0
     4f6:	d104      	bne.n	502 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     4f8:	094b      	lsrs	r3, r1, #5
     4fa:	01db      	lsls	r3, r3, #7
     4fc:	4a3d      	ldr	r2, [pc, #244]	; (5f4 <sd_mmc_select_slot+0x114>)
     4fe:	4694      	mov	ip, r2
     500:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     502:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     504:	221f      	movs	r2, #31
     506:	400a      	ands	r2, r1
     508:	2301      	movs	r3, #1
     50a:	4093      	lsls	r3, r2
     50c:	4218      	tst	r0, r3
     50e:	d010      	beq.n	532 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     510:	4b37      	ldr	r3, [pc, #220]	; (5f0 <sd_mmc_select_slot+0x110>)
     512:	7b9b      	ldrb	r3, [r3, #14]
     514:	2b01      	cmp	r3, #1
     516:	d004      	beq.n	522 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     518:	2204      	movs	r2, #4
     51a:	4b35      	ldr	r3, [pc, #212]	; (5f0 <sd_mmc_select_slot+0x110>)
     51c:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     51e:	2302      	movs	r3, #2
     520:	e7e2      	b.n	4e8 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     522:	4b35      	ldr	r3, [pc, #212]	; (5f8 <sd_mmc_select_slot+0x118>)
     524:	781b      	ldrb	r3, [r3, #0]
     526:	2b00      	cmp	r3, #0
     528:	d0f6      	beq.n	518 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     52a:	2200      	movs	r2, #0
     52c:	4b33      	ldr	r3, [pc, #204]	; (5fc <sd_mmc_select_slot+0x11c>)
     52e:	601a      	str	r2, [r3, #0]
     530:	e7f2      	b.n	518 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     532:	4b2f      	ldr	r3, [pc, #188]	; (5f0 <sd_mmc_select_slot+0x110>)
     534:	7b9a      	ldrb	r2, [r3, #14]
     536:	2a04      	cmp	r2, #4
     538:	d005      	beq.n	546 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     53a:	2a01      	cmp	r2, #1
     53c:	d033      	beq.n	5a6 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     53e:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     540:	2a03      	cmp	r2, #3
     542:	d0d1      	beq.n	4e8 <sd_mmc_select_slot+0x8>
     544:	e045      	b.n	5d2 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     546:	3a03      	subs	r2, #3
     548:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     54a:	4b2c      	ldr	r3, [pc, #176]	; (5fc <sd_mmc_select_slot+0x11c>)
     54c:	681b      	ldr	r3, [r3, #0]
     54e:	2b00      	cmp	r3, #0
     550:	d017      	beq.n	582 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     552:	2200      	movs	r2, #0
     554:	4b28      	ldr	r3, [pc, #160]	; (5f8 <sd_mmc_select_slot+0x118>)
     556:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     558:	2000      	movs	r0, #0
     55a:	4b29      	ldr	r3, [pc, #164]	; (600 <sd_mmc_select_slot+0x120>)
     55c:	4798      	blx	r3
     55e:	22fa      	movs	r2, #250	; 0xfa
     560:	0092      	lsls	r2, r2, #2
     562:	2300      	movs	r3, #0
     564:	2100      	movs	r1, #0
     566:	4c27      	ldr	r4, [pc, #156]	; (604 <sd_mmc_select_slot+0x124>)
     568:	47a0      	blx	r4
     56a:	4a27      	ldr	r2, [pc, #156]	; (608 <sd_mmc_select_slot+0x128>)
     56c:	2300      	movs	r3, #0
     56e:	1880      	adds	r0, r0, r2
     570:	4159      	adcs	r1, r3
     572:	4a26      	ldr	r2, [pc, #152]	; (60c <sd_mmc_select_slot+0x12c>)
     574:	2300      	movs	r3, #0
     576:	4c26      	ldr	r4, [pc, #152]	; (610 <sd_mmc_select_slot+0x130>)
     578:	47a0      	blx	r4
     57a:	4b26      	ldr	r3, [pc, #152]	; (614 <sd_mmc_select_slot+0x134>)
     57c:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     57e:	2302      	movs	r3, #2
     580:	e7b2      	b.n	4e8 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     582:	2401      	movs	r4, #1
     584:	4b1c      	ldr	r3, [pc, #112]	; (5f8 <sd_mmc_select_slot+0x118>)
     586:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     588:	2000      	movs	r0, #0
     58a:	4b1d      	ldr	r3, [pc, #116]	; (600 <sd_mmc_select_slot+0x120>)
     58c:	4798      	blx	r3
     58e:	21fa      	movs	r1, #250	; 0xfa
     590:	0149      	lsls	r1, r1, #5
     592:	4b21      	ldr	r3, [pc, #132]	; (618 <sd_mmc_select_slot+0x138>)
     594:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     596:	23fa      	movs	r3, #250	; 0xfa
     598:	009b      	lsls	r3, r3, #2
     59a:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     59c:	4b17      	ldr	r3, [pc, #92]	; (5fc <sd_mmc_select_slot+0x11c>)
     59e:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     5a0:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     5a2:	2302      	movs	r3, #2
     5a4:	e7a0      	b.n	4e8 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     5a6:	4b14      	ldr	r3, [pc, #80]	; (5f8 <sd_mmc_select_slot+0x118>)
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	2b00      	cmp	r3, #0
     5ac:	d007      	beq.n	5be <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     5ae:	4b13      	ldr	r3, [pc, #76]	; (5fc <sd_mmc_select_slot+0x11c>)
     5b0:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     5b2:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     5b4:	03d2      	lsls	r2, r2, #15
     5b6:	d597      	bpl.n	4e8 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     5b8:	2200      	movs	r2, #0
     5ba:	4b10      	ldr	r3, [pc, #64]	; (5fc <sd_mmc_select_slot+0x11c>)
     5bc:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     5be:	4b0c      	ldr	r3, [pc, #48]	; (5f0 <sd_mmc_select_slot+0x110>)
     5c0:	2202      	movs	r2, #2
     5c2:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     5c4:	4a15      	ldr	r2, [pc, #84]	; (61c <sd_mmc_select_slot+0x13c>)
     5c6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     5c8:	2201      	movs	r2, #1
     5ca:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     5cc:	2100      	movs	r1, #0
     5ce:	3221      	adds	r2, #33	; 0x21
     5d0:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     5d2:	2200      	movs	r2, #0
     5d4:	4b12      	ldr	r3, [pc, #72]	; (620 <sd_mmc_select_slot+0x140>)
     5d6:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     5d8:	4c05      	ldr	r4, [pc, #20]	; (5f0 <sd_mmc_select_slot+0x110>)
     5da:	4b12      	ldr	r3, [pc, #72]	; (624 <sd_mmc_select_slot+0x144>)
     5dc:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     5de:	4b12      	ldr	r3, [pc, #72]	; (628 <sd_mmc_select_slot+0x148>)
     5e0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     5e2:	7ba3      	ldrb	r3, [r4, #14]
     5e4:	3b02      	subs	r3, #2
     5e6:	425a      	negs	r2, r3
     5e8:	4153      	adcs	r3, r2
     5ea:	b2db      	uxtb	r3, r3
     5ec:	e77c      	b.n	4e8 <sd_mmc_select_slot+0x8>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	2000000c 	.word	0x2000000c
     5f4:	41004400 	.word	0x41004400
     5f8:	20000184 	.word	0x20000184
     5fc:	e000e010 	.word	0xe000e010
     600:	00006275 	.word	0x00006275
     604:	000069ad 	.word	0x000069ad
     608:	00001b57 	.word	0x00001b57
     60c:	00001b58 	.word	0x00001b58
     610:	0000696d 	.word	0x0000696d
     614:	20000001 	.word	0x20000001
     618:	00006605 	.word	0x00006605
     61c:	00061a80 	.word	0x00061a80
     620:	20000185 	.word	0x20000185
     624:	2000017c 	.word	0x2000017c
     628:	000004b5 	.word	0x000004b5

0000062c <sd_mmc_cmd13>:
{
     62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     62e:	4d09      	ldr	r5, [pc, #36]	; (654 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     630:	4f09      	ldr	r7, [pc, #36]	; (658 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     632:	4e0a      	ldr	r6, [pc, #40]	; (65c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     634:	2100      	movs	r1, #0
     636:	480a      	ldr	r0, [pc, #40]	; (660 <sd_mmc_cmd13+0x34>)
     638:	47b8      	blx	r7
     63a:	1e04      	subs	r4, r0, #0
     63c:	d007      	beq.n	64e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     63e:	47b0      	blx	r6
     640:	23ff      	movs	r3, #255	; 0xff
     642:	4203      	tst	r3, r0
     644:	d003      	beq.n	64e <sd_mmc_cmd13+0x22>
     646:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     648:	2d00      	cmp	r5, #0
     64a:	d1f3      	bne.n	634 <sd_mmc_cmd13+0x8>
			return false;
     64c:	2400      	movs	r4, #0
}
     64e:	0020      	movs	r0, r4
     650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     652:	46c0      	nop			; (mov r8, r8)
     654:	00030d41 	.word	0x00030d41
     658:	00005dc9 	.word	0x00005dc9
     65c:	00005de1 	.word	0x00005de1
     660:	00001b0d 	.word	0x00001b0d

00000664 <sd_mmc_cmd9_spi>:
{
     664:	b510      	push	{r4, lr}
     666:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     668:	4b0c      	ldr	r3, [pc, #48]	; (69c <sd_mmc_cmd9_spi+0x38>)
     66a:	681b      	ldr	r3, [r3, #0]
     66c:	8999      	ldrh	r1, [r3, #12]
     66e:	0409      	lsls	r1, r1, #16
     670:	2301      	movs	r3, #1
     672:	9300      	str	r3, [sp, #0]
     674:	2210      	movs	r2, #16
     676:	480a      	ldr	r0, [pc, #40]	; (6a0 <sd_mmc_cmd9_spi+0x3c>)
     678:	4c0a      	ldr	r4, [pc, #40]	; (6a4 <sd_mmc_cmd9_spi+0x40>)
     67a:	47a0      	blx	r4
     67c:	2800      	cmp	r0, #0
     67e:	d101      	bne.n	684 <sd_mmc_cmd9_spi+0x20>
}
     680:	b002      	add	sp, #8
     682:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     684:	4b05      	ldr	r3, [pc, #20]	; (69c <sd_mmc_cmd9_spi+0x38>)
     686:	6818      	ldr	r0, [r3, #0]
     688:	3012      	adds	r0, #18
     68a:	2101      	movs	r1, #1
     68c:	4b06      	ldr	r3, [pc, #24]	; (6a8 <sd_mmc_cmd9_spi+0x44>)
     68e:	4798      	blx	r3
     690:	2800      	cmp	r0, #0
     692:	d0f5      	beq.n	680 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     694:	4b05      	ldr	r3, [pc, #20]	; (6ac <sd_mmc_cmd9_spi+0x48>)
     696:	4798      	blx	r3
     698:	e7f2      	b.n	680 <sd_mmc_cmd9_spi+0x1c>
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	2000017c 	.word	0x2000017c
     6a0:	00081109 	.word	0x00081109
     6a4:	00005c39 	.word	0x00005c39
     6a8:	00005e65 	.word	0x00005e65
     6ac:	00005ef1 	.word	0x00005ef1

000006b0 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     6b0:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     6b2:	4b04      	ldr	r3, [pc, #16]	; (6c4 <sd_mmc_deselect_slot+0x14>)
     6b4:	781b      	ldrb	r3, [r3, #0]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d000      	beq.n	6bc <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     6ba:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     6bc:	2000      	movs	r0, #0
     6be:	4b02      	ldr	r3, [pc, #8]	; (6c8 <sd_mmc_deselect_slot+0x18>)
     6c0:	4798      	blx	r3
}
     6c2:	e7fa      	b.n	6ba <sd_mmc_deselect_slot+0xa>
     6c4:	20000185 	.word	0x20000185
     6c8:	00005bd9 	.word	0x00005bd9

000006cc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     6cc:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     6ce:	2204      	movs	r2, #4
     6d0:	4b03      	ldr	r3, [pc, #12]	; (6e0 <sd_mmc_init+0x14>)
     6d2:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     6d4:	32fb      	adds	r2, #251	; 0xfb
     6d6:	4b03      	ldr	r3, [pc, #12]	; (6e4 <sd_mmc_init+0x18>)
     6d8:	701a      	strb	r2, [r3, #0]
	driver_init();
     6da:	4b03      	ldr	r3, [pc, #12]	; (6e8 <sd_mmc_init+0x1c>)
     6dc:	4798      	blx	r3
}
     6de:	bd10      	pop	{r4, pc}
     6e0:	2000000c 	.word	0x2000000c
     6e4:	20000185 	.word	0x20000185
     6e8:	00005a91 	.word	0x00005a91

000006ec <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ee:	46c6      	mov	lr, r8
     6f0:	b500      	push	{lr}
     6f2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     6f4:	4bcb      	ldr	r3, [pc, #812]	; (a24 <sd_mmc_check+0x338>)
     6f6:	4798      	blx	r3
     6f8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     6fa:	2801      	cmp	r0, #1
     6fc:	d006      	beq.n	70c <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     6fe:	4bca      	ldr	r3, [pc, #808]	; (a28 <sd_mmc_check+0x33c>)
     700:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     702:	0020      	movs	r0, r4
     704:	b008      	add	sp, #32
     706:	bc04      	pop	{r2}
     708:	4690      	mov	r8, r2
     70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     70c:	4bc7      	ldr	r3, [pc, #796]	; (a2c <sd_mmc_check+0x340>)
     70e:	681b      	ldr	r3, [r3, #0]
     710:	2201      	movs	r2, #1
     712:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     714:	2200      	movs	r2, #0
     716:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     718:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     71a:	4bc5      	ldr	r3, [pc, #788]	; (a30 <sd_mmc_check+0x344>)
     71c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     71e:	2100      	movs	r1, #0
     720:	2088      	movs	r0, #136	; 0x88
     722:	0140      	lsls	r0, r0, #5
     724:	4bc3      	ldr	r3, [pc, #780]	; (a34 <sd_mmc_check+0x348>)
     726:	4798      	blx	r3
     728:	2800      	cmp	r0, #0
     72a:	d107      	bne.n	73c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     72c:	4bbf      	ldr	r3, [pc, #764]	; (a2c <sd_mmc_check+0x340>)
     72e:	681b      	ldr	r3, [r3, #0]
     730:	2203      	movs	r2, #3
     732:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     734:	4bbc      	ldr	r3, [pc, #752]	; (a28 <sd_mmc_check+0x33c>)
     736:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     738:	2403      	movs	r4, #3
     73a:	e7e2      	b.n	702 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     73c:	21d5      	movs	r1, #213	; 0xd5
     73e:	0049      	lsls	r1, r1, #1
     740:	48bd      	ldr	r0, [pc, #756]	; (a38 <sd_mmc_check+0x34c>)
     742:	4bbc      	ldr	r3, [pc, #752]	; (a34 <sd_mmc_check+0x348>)
     744:	4798      	blx	r3
	*v2 = 0;
     746:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     748:	2800      	cmp	r0, #0
     74a:	d125      	bne.n	798 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     74c:	4bb7      	ldr	r3, [pc, #732]	; (a2c <sd_mmc_check+0x340>)
     74e:	681b      	ldr	r3, [r3, #0]
     750:	7bdb      	ldrb	r3, [r3, #15]
     752:	07db      	lsls	r3, r3, #31
     754:	d500      	bpl.n	758 <sd_mmc_check+0x6c>
     756:	e1eb      	b.n	b30 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     758:	4bb4      	ldr	r3, [pc, #720]	; (a2c <sd_mmc_check+0x340>)
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	7bda      	ldrb	r2, [r3, #15]
     75e:	2309      	movs	r3, #9
     760:	4013      	ands	r3, r2
     762:	2b01      	cmp	r3, #1
     764:	d10f      	bne.n	786 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     766:	2180      	movs	r1, #128	; 0x80
     768:	0089      	lsls	r1, r1, #2
     76a:	48b4      	ldr	r0, [pc, #720]	; (a3c <sd_mmc_check+0x350>)
     76c:	4bb1      	ldr	r3, [pc, #708]	; (a34 <sd_mmc_check+0x348>)
     76e:	4798      	blx	r3
     770:	2800      	cmp	r0, #0
     772:	d0db      	beq.n	72c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     774:	4bad      	ldr	r3, [pc, #692]	; (a2c <sd_mmc_check+0x340>)
     776:	681b      	ldr	r3, [r3, #0]
     778:	7bdb      	ldrb	r3, [r3, #15]
     77a:	07db      	lsls	r3, r3, #31
     77c:	d503      	bpl.n	786 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     77e:	4bb0      	ldr	r3, [pc, #704]	; (a40 <sd_mmc_check+0x354>)
     780:	4798      	blx	r3
     782:	2800      	cmp	r0, #0
     784:	d0d2      	beq.n	72c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     786:	4baf      	ldr	r3, [pc, #700]	; (a44 <sd_mmc_check+0x358>)
     788:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     78a:	4ba8      	ldr	r3, [pc, #672]	; (a2c <sd_mmc_check+0x340>)
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	2200      	movs	r2, #0
     790:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     792:	4ba5      	ldr	r3, [pc, #660]	; (a28 <sd_mmc_check+0x33c>)
     794:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     796:	e7b4      	b.n	702 <sd_mmc_check+0x16>
	resp = driver_get_response();
     798:	4bab      	ldr	r3, [pc, #684]	; (a48 <sd_mmc_check+0x35c>)
     79a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     79c:	1c43      	adds	r3, r0, #1
     79e:	d100      	bne.n	7a2 <sd_mmc_check+0xb6>
     7a0:	e1c4      	b.n	b2c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     7a2:	0500      	lsls	r0, r0, #20
     7a4:	0d00      	lsrs	r0, r0, #20
     7a6:	23d5      	movs	r3, #213	; 0xd5
     7a8:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     7aa:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     7ac:	4298      	cmp	r0, r3
     7ae:	d1bd      	bne.n	72c <sd_mmc_check+0x40>
     7b0:	e7cc      	b.n	74c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     7b2:	2100      	movs	r1, #0
     7b4:	48a5      	ldr	r0, [pc, #660]	; (a4c <sd_mmc_check+0x360>)
     7b6:	4b9f      	ldr	r3, [pc, #636]	; (a34 <sd_mmc_check+0x348>)
     7b8:	4798      	blx	r3
     7ba:	2800      	cmp	r0, #0
     7bc:	d119      	bne.n	7f2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     7be:	4b9b      	ldr	r3, [pc, #620]	; (a2c <sd_mmc_check+0x340>)
     7c0:	681b      	ldr	r3, [r3, #0]
     7c2:	2202      	movs	r2, #2
     7c4:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     7c6:	2100      	movs	r1, #0
     7c8:	2088      	movs	r0, #136	; 0x88
     7ca:	0140      	lsls	r0, r0, #5
     7cc:	4b99      	ldr	r3, [pc, #612]	; (a34 <sd_mmc_check+0x348>)
     7ce:	4798      	blx	r3
     7d0:	2800      	cmp	r0, #0
     7d2:	d0ab      	beq.n	72c <sd_mmc_check+0x40>
     7d4:	4d9e      	ldr	r5, [pc, #632]	; (a50 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     7d6:	4f97      	ldr	r7, [pc, #604]	; (a34 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     7d8:	4e9b      	ldr	r6, [pc, #620]	; (a48 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     7da:	2100      	movs	r1, #0
     7dc:	489d      	ldr	r0, [pc, #628]	; (a54 <sd_mmc_check+0x368>)
     7de:	47b8      	blx	r7
     7e0:	2800      	cmp	r0, #0
     7e2:	d0a3      	beq.n	72c <sd_mmc_check+0x40>
		resp = driver_get_response();
     7e4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     7e6:	07c3      	lsls	r3, r0, #31
     7e8:	d57d      	bpl.n	8e6 <sd_mmc_check+0x1fa>
     7ea:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     7ec:	2d00      	cmp	r5, #0
     7ee:	d1f4      	bne.n	7da <sd_mmc_check+0xee>
     7f0:	e79c      	b.n	72c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     7f2:	4b95      	ldr	r3, [pc, #596]	; (a48 <sd_mmc_check+0x35c>)
     7f4:	4798      	blx	r3
     7f6:	0043      	lsls	r3, r0, #1
     7f8:	d505      	bpl.n	806 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     7fa:	4b8c      	ldr	r3, [pc, #560]	; (a2c <sd_mmc_check+0x340>)
     7fc:	681a      	ldr	r2, [r3, #0]
     7fe:	7bd3      	ldrb	r3, [r2, #15]
     800:	2108      	movs	r1, #8
     802:	430b      	orrs	r3, r1
     804:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     806:	2100      	movs	r1, #0
     808:	4893      	ldr	r0, [pc, #588]	; (a58 <sd_mmc_check+0x36c>)
     80a:	4b8a      	ldr	r3, [pc, #552]	; (a34 <sd_mmc_check+0x348>)
     80c:	4798      	blx	r3
     80e:	2800      	cmp	r0, #0
     810:	d08c      	beq.n	72c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     812:	4b86      	ldr	r3, [pc, #536]	; (a2c <sd_mmc_check+0x340>)
     814:	681b      	ldr	r3, [r3, #0]
     816:	7bdb      	ldrb	r3, [r3, #15]
     818:	07da      	lsls	r2, r3, #31
     81a:	d400      	bmi.n	81e <sd_mmc_check+0x132>
     81c:	e1a4      	b.n	b68 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     81e:	4b8f      	ldr	r3, [pc, #572]	; (a5c <sd_mmc_check+0x370>)
     820:	4798      	blx	r3
     822:	2800      	cmp	r0, #0
     824:	d082      	beq.n	72c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     826:	4b81      	ldr	r3, [pc, #516]	; (a2c <sd_mmc_check+0x340>)
     828:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     82a:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     82c:	2107      	movs	r1, #7
     82e:	4019      	ands	r1, r3
     830:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     832:	488b      	ldr	r0, [pc, #556]	; (a60 <sd_mmc_check+0x374>)
     834:	5808      	ldr	r0, [r1, r0]
     836:	21fa      	movs	r1, #250	; 0xfa
     838:	0089      	lsls	r1, r1, #2
     83a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     83c:	065b      	lsls	r3, r3, #25
     83e:	0f1b      	lsrs	r3, r3, #28
     840:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     842:	4888      	ldr	r0, [pc, #544]	; (a64 <sd_mmc_check+0x378>)
     844:	581b      	ldr	r3, [r3, r0]
     846:	434b      	muls	r3, r1
     848:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     84a:	7c93      	ldrb	r3, [r2, #18]
     84c:	099b      	lsrs	r3, r3, #6
     84e:	d000      	beq.n	852 <sd_mmc_check+0x166>
     850:	e13c      	b.n	acc <sd_mmc_check+0x3e0>
     852:	7e91      	ldrb	r1, [r2, #26]
     854:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     856:	7e53      	ldrb	r3, [r2, #25]
     858:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     85a:	7e10      	ldrb	r0, [r2, #24]
     85c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     85e:	4303      	orrs	r3, r0
     860:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     862:	7f10      	ldrb	r0, [r2, #28]
     864:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     866:	7ed1      	ldrb	r1, [r2, #27]
     868:	0049      	lsls	r1, r1, #1
     86a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     86c:	051b      	lsls	r3, r3, #20
     86e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     870:	3301      	adds	r3, #1
     872:	2107      	movs	r1, #7
     874:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     876:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     878:	408b      	lsls	r3, r1
     87a:	7dd0      	ldrb	r0, [r2, #23]
     87c:	210f      	movs	r1, #15
     87e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     880:	408b      	lsls	r3, r1
				/ 1024;
     882:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     884:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     886:	8991      	ldrh	r1, [r2, #12]
     888:	0409      	lsls	r1, r1, #16
     88a:	4877      	ldr	r0, [pc, #476]	; (a68 <sd_mmc_check+0x37c>)
     88c:	4b69      	ldr	r3, [pc, #420]	; (a34 <sd_mmc_check+0x348>)
     88e:	4798      	blx	r3
     890:	2800      	cmp	r0, #0
     892:	d100      	bne.n	896 <sd_mmc_check+0x1aa>
     894:	e74a      	b.n	72c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     896:	2301      	movs	r3, #1
     898:	9300      	str	r3, [sp, #0]
     89a:	2208      	movs	r2, #8
     89c:	2100      	movs	r1, #0
     89e:	4873      	ldr	r0, [pc, #460]	; (a6c <sd_mmc_check+0x380>)
     8a0:	4d73      	ldr	r5, [pc, #460]	; (a70 <sd_mmc_check+0x384>)
     8a2:	47a8      	blx	r5
     8a4:	2800      	cmp	r0, #0
     8a6:	d100      	bne.n	8aa <sd_mmc_check+0x1be>
     8a8:	e740      	b.n	72c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     8aa:	2101      	movs	r1, #1
     8ac:	a806      	add	r0, sp, #24
     8ae:	4b71      	ldr	r3, [pc, #452]	; (a74 <sd_mmc_check+0x388>)
     8b0:	4798      	blx	r3
     8b2:	2800      	cmp	r0, #0
     8b4:	d100      	bne.n	8b8 <sd_mmc_check+0x1cc>
     8b6:	e739      	b.n	72c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     8b8:	4b6f      	ldr	r3, [pc, #444]	; (a78 <sd_mmc_check+0x38c>)
     8ba:	4798      	blx	r3
     8bc:	2800      	cmp	r0, #0
     8be:	d100      	bne.n	8c2 <sd_mmc_check+0x1d6>
     8c0:	e734      	b.n	72c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     8c2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	220f      	movs	r2, #15
     8c8:	4013      	ands	r3, r2
     8ca:	2b01      	cmp	r3, #1
     8cc:	d100      	bne.n	8d0 <sd_mmc_check+0x1e4>
     8ce:	e119      	b.n	b04 <sd_mmc_check+0x418>
     8d0:	2b00      	cmp	r3, #0
     8d2:	d100      	bne.n	8d6 <sd_mmc_check+0x1ea>
     8d4:	e109      	b.n	aea <sd_mmc_check+0x3fe>
     8d6:	2b02      	cmp	r3, #2
     8d8:	d100      	bne.n	8dc <sd_mmc_check+0x1f0>
     8da:	e118      	b.n	b0e <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     8dc:	4b53      	ldr	r3, [pc, #332]	; (a2c <sd_mmc_check+0x340>)
     8de:	681b      	ldr	r3, [r3, #0]
     8e0:	2210      	movs	r2, #16
     8e2:	741a      	strb	r2, [r3, #16]
     8e4:	e105      	b.n	af2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     8e6:	2100      	movs	r1, #0
     8e8:	4858      	ldr	r0, [pc, #352]	; (a4c <sd_mmc_check+0x360>)
     8ea:	4b52      	ldr	r3, [pc, #328]	; (a34 <sd_mmc_check+0x348>)
     8ec:	4798      	blx	r3
     8ee:	2800      	cmp	r0, #0
     8f0:	d100      	bne.n	8f4 <sd_mmc_check+0x208>
     8f2:	e71b      	b.n	72c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     8f4:	4b54      	ldr	r3, [pc, #336]	; (a48 <sd_mmc_check+0x35c>)
     8f6:	4798      	blx	r3
     8f8:	23c0      	movs	r3, #192	; 0xc0
     8fa:	05db      	lsls	r3, r3, #23
     8fc:	4018      	ands	r0, r3
     8fe:	2380      	movs	r3, #128	; 0x80
     900:	05db      	lsls	r3, r3, #23
     902:	4298      	cmp	r0, r3
     904:	d105      	bne.n	912 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     906:	4b49      	ldr	r3, [pc, #292]	; (a2c <sd_mmc_check+0x340>)
     908:	681a      	ldr	r2, [r3, #0]
     90a:	7bd1      	ldrb	r1, [r2, #15]
     90c:	2308      	movs	r3, #8
     90e:	430b      	orrs	r3, r1
     910:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     912:	2100      	movs	r1, #0
     914:	4850      	ldr	r0, [pc, #320]	; (a58 <sd_mmc_check+0x36c>)
     916:	4b47      	ldr	r3, [pc, #284]	; (a34 <sd_mmc_check+0x348>)
     918:	4798      	blx	r3
     91a:	2800      	cmp	r0, #0
     91c:	d100      	bne.n	920 <sd_mmc_check+0x234>
     91e:	e705      	b.n	72c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     920:	4b4e      	ldr	r3, [pc, #312]	; (a5c <sd_mmc_check+0x370>)
     922:	4798      	blx	r3
     924:	2800      	cmp	r0, #0
     926:	d100      	bne.n	92a <sd_mmc_check+0x23e>
     928:	e700      	b.n	72c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     92a:	4b40      	ldr	r3, [pc, #256]	; (a2c <sd_mmc_check+0x340>)
     92c:	681a      	ldr	r2, [r3, #0]
     92e:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     930:	069b      	lsls	r3, r3, #26
     932:	0f1b      	lsrs	r3, r3, #28
     934:	2b02      	cmp	r3, #2
     936:	d100      	bne.n	93a <sd_mmc_check+0x24e>
     938:	e0a8      	b.n	a8c <sd_mmc_check+0x3a0>
     93a:	d907      	bls.n	94c <sd_mmc_check+0x260>
     93c:	2b03      	cmp	r3, #3
     93e:	d100      	bne.n	942 <sd_mmc_check+0x256>
     940:	e0a7      	b.n	a92 <sd_mmc_check+0x3a6>
     942:	2b04      	cmp	r3, #4
     944:	d104      	bne.n	950 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     946:	2340      	movs	r3, #64	; 0x40
     948:	7413      	strb	r3, [r2, #16]
     94a:	e003      	b.n	954 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     94c:	2b01      	cmp	r3, #1
     94e:	d066      	beq.n	a1e <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     950:	2312      	movs	r3, #18
     952:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     954:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     956:	0659      	lsls	r1, r3, #25
     958:	0f09      	lsrs	r1, r1, #28
     95a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     95c:	2007      	movs	r0, #7
     95e:	4003      	ands	r3, r0
     960:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     962:	483f      	ldr	r0, [pc, #252]	; (a60 <sd_mmc_check+0x374>)
     964:	5818      	ldr	r0, [r3, r0]
     966:	23fa      	movs	r3, #250	; 0xfa
     968:	009b      	lsls	r3, r3, #2
     96a:	4343      	muls	r3, r0
     96c:	4843      	ldr	r0, [pc, #268]	; (a7c <sd_mmc_check+0x390>)
     96e:	5809      	ldr	r1, [r1, r0]
     970:	434b      	muls	r3, r1
     972:	6013      	str	r3, [r2, #0]
     974:	7e91      	ldrb	r1, [r2, #26]
     976:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     978:	7e53      	ldrb	r3, [r2, #25]
     97a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     97c:	7e10      	ldrb	r0, [r2, #24]
     97e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     980:	4303      	orrs	r3, r0
     982:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     984:	051b      	lsls	r3, r3, #20
     986:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     988:	493d      	ldr	r1, [pc, #244]	; (a80 <sd_mmc_check+0x394>)
     98a:	428b      	cmp	r3, r1
     98c:	d00f      	beq.n	9ae <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     98e:	7f10      	ldrb	r0, [r2, #28]
     990:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     992:	7ed1      	ldrb	r1, [r2, #27]
     994:	0049      	lsls	r1, r1, #1
     996:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     998:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     99a:	2007      	movs	r0, #7
     99c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     99e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     9a0:	408b      	lsls	r3, r1
     9a2:	7dd1      	ldrb	r1, [r2, #23]
     9a4:	3008      	adds	r0, #8
     9a6:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     9a8:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     9aa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     9ac:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     9ae:	7c13      	ldrb	r3, [r2, #16]
     9b0:	2b3f      	cmp	r3, #63	; 0x3f
     9b2:	d97b      	bls.n	aac <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     9b4:	2100      	movs	r1, #0
     9b6:	9100      	str	r1, [sp, #0]
     9b8:	2301      	movs	r3, #1
     9ba:	2280      	movs	r2, #128	; 0x80
     9bc:	0092      	lsls	r2, r2, #2
     9be:	4831      	ldr	r0, [pc, #196]	; (a84 <sd_mmc_check+0x398>)
     9c0:	4d2b      	ldr	r5, [pc, #172]	; (a70 <sd_mmc_check+0x384>)
     9c2:	47a8      	blx	r5
     9c4:	2800      	cmp	r0, #0
     9c6:	d100      	bne.n	9ca <sd_mmc_check+0x2de>
     9c8:	e6b0      	b.n	72c <sd_mmc_check+0x40>
     9ca:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     9cc:	4e2e      	ldr	r6, [pc, #184]	; (a88 <sd_mmc_check+0x39c>)
     9ce:	a805      	add	r0, sp, #20
     9d0:	47b0      	blx	r6
     9d2:	2800      	cmp	r0, #0
     9d4:	d100      	bne.n	9d8 <sd_mmc_check+0x2ec>
     9d6:	e6a9      	b.n	72c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     9d8:	3501      	adds	r5, #1
     9da:	b2ad      	uxth	r5, r5
     9dc:	2d32      	cmp	r5, #50	; 0x32
     9de:	d1f6      	bne.n	9ce <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     9e0:	4b12      	ldr	r3, [pc, #72]	; (a2c <sd_mmc_check+0x340>)
     9e2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     9e4:	7e8a      	ldrb	r2, [r1, #26]
     9e6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     9e8:	7e4b      	ldrb	r3, [r1, #25]
     9ea:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     9ec:	7e09      	ldrb	r1, [r1, #24]
     9ee:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     9f0:	430b      	orrs	r3, r1
     9f2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     9f4:	051b      	lsls	r3, r3, #20
     9f6:	0d1b      	lsrs	r3, r3, #20
     9f8:	4a21      	ldr	r2, [pc, #132]	; (a80 <sd_mmc_check+0x394>)
     9fa:	4293      	cmp	r3, r2
     9fc:	d154      	bne.n	aa8 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     9fe:	4e22      	ldr	r6, [pc, #136]	; (a88 <sd_mmc_check+0x39c>)
     a00:	a806      	add	r0, sp, #24
     a02:	47b0      	blx	r6
     a04:	2800      	cmp	r0, #0
     a06:	d100      	bne.n	a0a <sd_mmc_check+0x31e>
     a08:	e690      	b.n	72c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     a0a:	3501      	adds	r5, #1
     a0c:	b2ad      	uxth	r5, r5
     a0e:	2d35      	cmp	r5, #53	; 0x35
     a10:	d9f6      	bls.n	a00 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     a12:	4b06      	ldr	r3, [pc, #24]	; (a2c <sd_mmc_check+0x340>)
     a14:	681a      	ldr	r2, [r3, #0]
     a16:	9b06      	ldr	r3, [sp, #24]
     a18:	085b      	lsrs	r3, r3, #1
     a1a:	6053      	str	r3, [r2, #4]
     a1c:	e044      	b.n	aa8 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     a1e:	2314      	movs	r3, #20
     a20:	7413      	strb	r3, [r2, #16]
     a22:	e797      	b.n	954 <sd_mmc_check+0x268>
     a24:	000004e1 	.word	0x000004e1
     a28:	000006b1 	.word	0x000006b1
     a2c:	2000017c 	.word	0x2000017c
     a30:	00005c01 	.word	0x00005c01
     a34:	00005dc9 	.word	0x00005dc9
     a38:	00005508 	.word	0x00005508
     a3c:	00001110 	.word	0x00001110
     a40:	0000062d 	.word	0x0000062d
     a44:	000004b5 	.word	0x000004b5
     a48:	00005de1 	.word	0x00005de1
     a4c:	0000053a 	.word	0x0000053a
     a50:	00001bef 	.word	0x00001bef
     a54:	00001101 	.word	0x00001101
     a58:	0000113b 	.word	0x0000113b
     a5c:	00000665 	.word	0x00000665
     a60:	0000741c 	.word	0x0000741c
     a64:	00007438 	.word	0x00007438
     a68:	00001137 	.word	0x00001137
     a6c:	00081133 	.word	0x00081133
     a70:	00005c39 	.word	0x00005c39
     a74:	00005e65 	.word	0x00005e65
     a78:	00005ef1 	.word	0x00005ef1
     a7c:	000073dc 	.word	0x000073dc
     a80:	00000fff 	.word	0x00000fff
     a84:	00081108 	.word	0x00081108
     a88:	00005ded 	.word	0x00005ded
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     a8c:	2322      	movs	r3, #34	; 0x22
     a8e:	7413      	strb	r3, [r2, #16]
     a90:	e760      	b.n	954 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     a92:	2330      	movs	r3, #48	; 0x30
     a94:	7413      	strb	r3, [r2, #16]
     a96:	e75d      	b.n	954 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     a98:	a806      	add	r0, sp, #24
     a9a:	4b36      	ldr	r3, [pc, #216]	; (b74 <sd_mmc_check+0x488>)
     a9c:	4798      	blx	r3
     a9e:	2800      	cmp	r0, #0
     aa0:	d100      	bne.n	aa4 <sd_mmc_check+0x3b8>
     aa2:	e643      	b.n	72c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     aa4:	3501      	adds	r5, #1
     aa6:	b2ad      	uxth	r5, r5
     aa8:	2d7f      	cmp	r5, #127	; 0x7f
     aaa:	d9f5      	bls.n	a98 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     aac:	2180      	movs	r1, #128	; 0x80
     aae:	0089      	lsls	r1, r1, #2
     ab0:	4831      	ldr	r0, [pc, #196]	; (b78 <sd_mmc_check+0x48c>)
     ab2:	4b32      	ldr	r3, [pc, #200]	; (b7c <sd_mmc_check+0x490>)
     ab4:	4798      	blx	r3
     ab6:	2800      	cmp	r0, #0
     ab8:	d100      	bne.n	abc <sd_mmc_check+0x3d0>
     aba:	e637      	b.n	72c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     abc:	4b30      	ldr	r3, [pc, #192]	; (b80 <sd_mmc_check+0x494>)
     abe:	4798      	blx	r3
     ac0:	2800      	cmp	r0, #0
     ac2:	d100      	bne.n	ac6 <sd_mmc_check+0x3da>
     ac4:	e632      	b.n	72c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     ac6:	4b2f      	ldr	r3, [pc, #188]	; (b84 <sd_mmc_check+0x498>)
     ac8:	4798      	blx	r3
     aca:	e65e      	b.n	78a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     acc:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ace:	7e93      	ldrb	r3, [r2, #26]
     ad0:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ad2:	7e51      	ldrb	r1, [r2, #25]
     ad4:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ad6:	430b      	orrs	r3, r1
     ad8:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     ada:	029b      	lsls	r3, r3, #10
				* 512;
     adc:	085b      	lsrs	r3, r3, #1
     ade:	2180      	movs	r1, #128	; 0x80
     ae0:	0089      	lsls	r1, r1, #2
     ae2:	468c      	mov	ip, r1
     ae4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     ae6:	6053      	str	r3, [r2, #4]
     ae8:	e6cd      	b.n	886 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     aea:	4b27      	ldr	r3, [pc, #156]	; (b88 <sd_mmc_check+0x49c>)
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	2210      	movs	r2, #16
     af0:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     af2:	4b25      	ldr	r3, [pc, #148]	; (b88 <sd_mmc_check+0x49c>)
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	7bdb      	ldrb	r3, [r3, #15]
     af8:	2209      	movs	r2, #9
     afa:	4013      	ands	r3, r2
     afc:	2b01      	cmp	r3, #1
     afe:	d000      	beq.n	b02 <sd_mmc_check+0x416>
     b00:	e638      	b.n	774 <sd_mmc_check+0x88>
     b02:	e630      	b.n	766 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     b04:	4b20      	ldr	r3, [pc, #128]	; (b88 <sd_mmc_check+0x49c>)
     b06:	681b      	ldr	r3, [r3, #0]
     b08:	221a      	movs	r2, #26
     b0a:	741a      	strb	r2, [r3, #16]
     b0c:	e7f1      	b.n	af2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b0e:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     b10:	789b      	ldrb	r3, [r3, #2]
     b12:	09db      	lsrs	r3, r3, #7
     b14:	2b01      	cmp	r3, #1
     b16:	d104      	bne.n	b22 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     b18:	4b1b      	ldr	r3, [pc, #108]	; (b88 <sd_mmc_check+0x49c>)
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	2230      	movs	r2, #48	; 0x30
     b1e:	741a      	strb	r2, [r3, #16]
     b20:	e7e7      	b.n	af2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     b22:	4b19      	ldr	r3, [pc, #100]	; (b88 <sd_mmc_check+0x49c>)
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	2220      	movs	r2, #32
     b28:	741a      	strb	r2, [r3, #16]
     b2a:	e7e2      	b.n	af2 <sd_mmc_check+0x406>
	*v2 = 0;
     b2c:	2600      	movs	r6, #0
     b2e:	e60d      	b.n	74c <sd_mmc_check+0x60>
     b30:	1e73      	subs	r3, r6, #1
     b32:	419e      	sbcs	r6, r3
     b34:	07b3      	lsls	r3, r6, #30
     b36:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b38:	4d14      	ldr	r5, [pc, #80]	; (b8c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b3a:	4f10      	ldr	r7, [pc, #64]	; (b7c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b3c:	46b8      	mov	r8, r7
		resp = driver_get_response();
     b3e:	4e14      	ldr	r6, [pc, #80]	; (b90 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b40:	2100      	movs	r1, #0
     b42:	4814      	ldr	r0, [pc, #80]	; (b94 <sd_mmc_check+0x4a8>)
     b44:	47b8      	blx	r7
     b46:	2800      	cmp	r0, #0
     b48:	d100      	bne.n	b4c <sd_mmc_check+0x460>
     b4a:	e638      	b.n	7be <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b4c:	9903      	ldr	r1, [sp, #12]
     b4e:	4812      	ldr	r0, [pc, #72]	; (b98 <sd_mmc_check+0x4ac>)
     b50:	47c0      	blx	r8
     b52:	2800      	cmp	r0, #0
     b54:	d100      	bne.n	b58 <sd_mmc_check+0x46c>
     b56:	e632      	b.n	7be <sd_mmc_check+0xd2>
		resp = driver_get_response();
     b58:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     b5a:	07c3      	lsls	r3, r0, #31
     b5c:	d400      	bmi.n	b60 <sd_mmc_check+0x474>
     b5e:	e628      	b.n	7b2 <sd_mmc_check+0xc6>
     b60:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     b62:	2d00      	cmp	r5, #0
     b64:	d1ec      	bne.n	b40 <sd_mmc_check+0x454>
     b66:	e62a      	b.n	7be <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     b68:	2209      	movs	r2, #9
     b6a:	4013      	ands	r3, r2
     b6c:	2b01      	cmp	r3, #1
     b6e:	d000      	beq.n	b72 <sd_mmc_check+0x486>
     b70:	e609      	b.n	786 <sd_mmc_check+0x9a>
     b72:	e5f8      	b.n	766 <sd_mmc_check+0x7a>
     b74:	00005ded 	.word	0x00005ded
     b78:	00001110 	.word	0x00001110
     b7c:	00005dc9 	.word	0x00005dc9
     b80:	0000062d 	.word	0x0000062d
     b84:	000004b5 	.word	0x000004b5
     b88:	2000017c 	.word	0x2000017c
     b8c:	00001bef 	.word	0x00001bef
     b90:	00005de1 	.word	0x00005de1
     b94:	00001137 	.word	0x00001137
     b98:	00001129 	.word	0x00001129

00000b9c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     b9c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     b9e:	4b06      	ldr	r3, [pc, #24]	; (bb8 <sd_mmc_get_type+0x1c>)
     ba0:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     ba2:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     ba4:	2800      	cmp	r0, #0
     ba6:	d001      	beq.n	bac <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     ba8:	0018      	movs	r0, r3
     baa:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     bac:	4b03      	ldr	r3, [pc, #12]	; (bbc <sd_mmc_get_type+0x20>)
     bae:	4798      	blx	r3
	return sd_mmc_card->type;
     bb0:	4b03      	ldr	r3, [pc, #12]	; (bc0 <sd_mmc_get_type+0x24>)
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	7bdb      	ldrb	r3, [r3, #15]
     bb6:	e7f7      	b.n	ba8 <sd_mmc_get_type+0xc>
     bb8:	000004e1 	.word	0x000004e1
     bbc:	000006b1 	.word	0x000006b1
     bc0:	2000017c 	.word	0x2000017c

00000bc4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     bc4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     bc6:	4b06      	ldr	r3, [pc, #24]	; (be0 <sd_mmc_get_capacity+0x1c>)
     bc8:	4798      	blx	r3
		return 0;
     bca:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     bcc:	2800      	cmp	r0, #0
     bce:	d001      	beq.n	bd4 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     bd0:	0018      	movs	r0, r3
     bd2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     bd4:	4b03      	ldr	r3, [pc, #12]	; (be4 <sd_mmc_get_capacity+0x20>)
     bd6:	4798      	blx	r3
	return sd_mmc_card->capacity;
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <sd_mmc_get_capacity+0x24>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	685b      	ldr	r3, [r3, #4]
     bde:	e7f7      	b.n	bd0 <sd_mmc_get_capacity+0xc>
     be0:	000004e1 	.word	0x000004e1
     be4:	000006b1 	.word	0x000006b1
     be8:	2000017c 	.word	0x2000017c

00000bec <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     bec:	2000      	movs	r0, #0
     bee:	4770      	bx	lr

00000bf0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     bf0:	b570      	push	{r4, r5, r6, lr}
     bf2:	b082      	sub	sp, #8
     bf4:	000e      	movs	r6, r1
     bf6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     bf8:	4b16      	ldr	r3, [pc, #88]	; (c54 <sd_mmc_init_read_blocks+0x64>)
     bfa:	4798      	blx	r3
     bfc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     bfe:	d002      	beq.n	c06 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     c00:	0020      	movs	r0, r4
     c02:	b002      	add	sp, #8
     c04:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     c06:	4b14      	ldr	r3, [pc, #80]	; (c58 <sd_mmc_init_read_blocks+0x68>)
     c08:	4798      	blx	r3
     c0a:	2800      	cmp	r0, #0
     c0c:	d017      	beq.n	c3e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     c0e:	2d01      	cmp	r5, #1
     c10:	d919      	bls.n	c46 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     c12:	4812      	ldr	r0, [pc, #72]	; (c5c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     c14:	4b12      	ldr	r3, [pc, #72]	; (c60 <sd_mmc_init_read_blocks+0x70>)
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	7bdb      	ldrb	r3, [r3, #15]
     c1a:	071b      	lsls	r3, r3, #28
     c1c:	d400      	bmi.n	c20 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     c1e:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     c20:	2301      	movs	r3, #1
     c22:	9300      	str	r3, [sp, #0]
     c24:	002b      	movs	r3, r5
     c26:	2280      	movs	r2, #128	; 0x80
     c28:	0092      	lsls	r2, r2, #2
     c2a:	0031      	movs	r1, r6
     c2c:	4e0d      	ldr	r6, [pc, #52]	; (c64 <sd_mmc_init_read_blocks+0x74>)
     c2e:	47b0      	blx	r6
     c30:	2800      	cmp	r0, #0
     c32:	d00a      	beq.n	c4a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     c34:	4b0c      	ldr	r3, [pc, #48]	; (c68 <sd_mmc_init_read_blocks+0x78>)
     c36:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     c38:	4b0c      	ldr	r3, [pc, #48]	; (c6c <sd_mmc_init_read_blocks+0x7c>)
     c3a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     c3c:	e7e0      	b.n	c00 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     c3e:	4b0c      	ldr	r3, [pc, #48]	; (c70 <sd_mmc_init_read_blocks+0x80>)
     c40:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c42:	3405      	adds	r4, #5
     c44:	e7dc      	b.n	c00 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     c46:	480b      	ldr	r0, [pc, #44]	; (c74 <sd_mmc_init_read_blocks+0x84>)
     c48:	e7e4      	b.n	c14 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     c4a:	4b09      	ldr	r3, [pc, #36]	; (c70 <sd_mmc_init_read_blocks+0x80>)
     c4c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c4e:	2405      	movs	r4, #5
     c50:	e7d6      	b.n	c00 <sd_mmc_init_read_blocks+0x10>
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	000004e1 	.word	0x000004e1
     c58:	0000062d 	.word	0x0000062d
     c5c:	00101112 	.word	0x00101112
     c60:	2000017c 	.word	0x2000017c
     c64:	00005c39 	.word	0x00005c39
     c68:	20000180 	.word	0x20000180
     c6c:	20000182 	.word	0x20000182
     c70:	000006b1 	.word	0x000006b1
     c74:	00081111 	.word	0x00081111

00000c78 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     c78:	b510      	push	{r4, lr}
     c7a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     c7c:	4b07      	ldr	r3, [pc, #28]	; (c9c <sd_mmc_start_read_blocks+0x24>)
     c7e:	4798      	blx	r3
     c80:	2800      	cmp	r0, #0
     c82:	d104      	bne.n	c8e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     c84:	2200      	movs	r2, #0
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <sd_mmc_start_read_blocks+0x28>)
     c88:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     c8a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     c8c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     c8e:	4a04      	ldr	r2, [pc, #16]	; (ca0 <sd_mmc_start_read_blocks+0x28>)
     c90:	8813      	ldrh	r3, [r2, #0]
     c92:	1b1c      	subs	r4, r3, r4
     c94:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     c96:	2000      	movs	r0, #0
     c98:	e7f8      	b.n	c8c <sd_mmc_start_read_blocks+0x14>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	00005e65 	.word	0x00005e65
     ca0:	20000180 	.word	0x20000180

00000ca4 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     ca4:	b510      	push	{r4, lr}
     ca6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     ca8:	4b14      	ldr	r3, [pc, #80]	; (cfc <sd_mmc_wait_end_of_read_blocks+0x58>)
     caa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     cac:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     cae:	2800      	cmp	r0, #0
     cb0:	d101      	bne.n	cb6 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     cb2:	0018      	movs	r0, r3
     cb4:	bd10      	pop	{r4, pc}
	if (abort) {
     cb6:	2c00      	cmp	r4, #0
     cb8:	d010      	beq.n	cdc <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     cba:	2200      	movs	r2, #0
     cbc:	4b10      	ldr	r3, [pc, #64]	; (d00 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     cbe:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     cc0:	4b10      	ldr	r3, [pc, #64]	; (d04 <sd_mmc_wait_end_of_read_blocks+0x60>)
     cc2:	881b      	ldrh	r3, [r3, #0]
     cc4:	2b01      	cmp	r3, #1
     cc6:	d00f      	beq.n	ce8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     cc8:	2100      	movs	r1, #0
     cca:	480f      	ldr	r0, [pc, #60]	; (d08 <sd_mmc_wait_end_of_read_blocks+0x64>)
     ccc:	4b0f      	ldr	r3, [pc, #60]	; (d0c <sd_mmc_wait_end_of_read_blocks+0x68>)
     cce:	4798      	blx	r3
     cd0:	2800      	cmp	r0, #0
     cd2:	d00d      	beq.n	cf0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     cd4:	4b0e      	ldr	r3, [pc, #56]	; (d10 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     cd6:	4798      	blx	r3
	return SD_MMC_OK;
     cd8:	2300      	movs	r3, #0
     cda:	e7ea      	b.n	cb2 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     cdc:	4b08      	ldr	r3, [pc, #32]	; (d00 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     cde:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     ce0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     ce2:	2a00      	cmp	r2, #0
     ce4:	d0ec      	beq.n	cc0 <sd_mmc_wait_end_of_read_blocks+0x1c>
     ce6:	e7e4      	b.n	cb2 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     ce8:	4b09      	ldr	r3, [pc, #36]	; (d10 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     cea:	4798      	blx	r3
		return SD_MMC_OK;
     cec:	2300      	movs	r3, #0
     cee:	e7e0      	b.n	cb2 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     cf0:	2100      	movs	r1, #0
     cf2:	4805      	ldr	r0, [pc, #20]	; (d08 <sd_mmc_wait_end_of_read_blocks+0x64>)
     cf4:	4b05      	ldr	r3, [pc, #20]	; (d0c <sd_mmc_wait_end_of_read_blocks+0x68>)
     cf6:	4798      	blx	r3
     cf8:	e7ec      	b.n	cd4 <sd_mmc_wait_end_of_read_blocks+0x30>
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	00005ef1 	.word	0x00005ef1
     d00:	20000180 	.word	0x20000180
     d04:	20000182 	.word	0x20000182
     d08:	0000310c 	.word	0x0000310c
     d0c:	00005dc9 	.word	0x00005dc9
     d10:	000006b1 	.word	0x000006b1

00000d14 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     d14:	b570      	push	{r4, r5, r6, lr}
     d16:	b082      	sub	sp, #8
     d18:	000e      	movs	r6, r1
     d1a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     d1c:	4b11      	ldr	r3, [pc, #68]	; (d64 <sd_mmc_init_write_blocks+0x50>)
     d1e:	4798      	blx	r3
     d20:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     d22:	d116      	bne.n	d52 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     d24:	2d01      	cmp	r5, #1
     d26:	d917      	bls.n	d58 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     d28:	480f      	ldr	r0, [pc, #60]	; (d68 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     d2a:	4b10      	ldr	r3, [pc, #64]	; (d6c <sd_mmc_init_write_blocks+0x58>)
     d2c:	681b      	ldr	r3, [r3, #0]
     d2e:	7bdb      	ldrb	r3, [r3, #15]
     d30:	071b      	lsls	r3, r3, #28
     d32:	d400      	bmi.n	d36 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     d34:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     d36:	2301      	movs	r3, #1
     d38:	9300      	str	r3, [sp, #0]
     d3a:	002b      	movs	r3, r5
     d3c:	2280      	movs	r2, #128	; 0x80
     d3e:	0092      	lsls	r2, r2, #2
     d40:	0031      	movs	r1, r6
     d42:	4e0b      	ldr	r6, [pc, #44]	; (d70 <sd_mmc_init_write_blocks+0x5c>)
     d44:	47b0      	blx	r6
     d46:	2800      	cmp	r0, #0
     d48:	d008      	beq.n	d5c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     d4a:	4b0a      	ldr	r3, [pc, #40]	; (d74 <sd_mmc_init_write_blocks+0x60>)
     d4c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     d4e:	4b0a      	ldr	r3, [pc, #40]	; (d78 <sd_mmc_init_write_blocks+0x64>)
     d50:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     d52:	0020      	movs	r0, r4
     d54:	b002      	add	sp, #8
     d56:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     d58:	4808      	ldr	r0, [pc, #32]	; (d7c <sd_mmc_init_write_blocks+0x68>)
     d5a:	e7e6      	b.n	d2a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     d5c:	4b08      	ldr	r3, [pc, #32]	; (d80 <sd_mmc_init_write_blocks+0x6c>)
     d5e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     d60:	2405      	movs	r4, #5
     d62:	e7f6      	b.n	d52 <sd_mmc_init_write_blocks+0x3e>
     d64:	000004e1 	.word	0x000004e1
     d68:	00109119 	.word	0x00109119
     d6c:	2000017c 	.word	0x2000017c
     d70:	00005c39 	.word	0x00005c39
     d74:	20000180 	.word	0x20000180
     d78:	20000182 	.word	0x20000182
     d7c:	00089118 	.word	0x00089118
     d80:	000006b1 	.word	0x000006b1

00000d84 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     d84:	b510      	push	{r4, lr}
     d86:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <sd_mmc_start_write_blocks+0x24>)
     d8a:	4798      	blx	r3
     d8c:	2800      	cmp	r0, #0
     d8e:	d104      	bne.n	d9a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     d90:	2200      	movs	r2, #0
     d92:	4b06      	ldr	r3, [pc, #24]	; (dac <sd_mmc_start_write_blocks+0x28>)
     d94:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     d96:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     d98:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     d9a:	4a04      	ldr	r2, [pc, #16]	; (dac <sd_mmc_start_write_blocks+0x28>)
     d9c:	8813      	ldrh	r3, [r2, #0]
     d9e:	1b1c      	subs	r4, r3, r4
     da0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     da2:	2000      	movs	r0, #0
     da4:	e7f8      	b.n	d98 <sd_mmc_start_write_blocks+0x14>
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	00005ef5 	.word	0x00005ef5
     dac:	20000180 	.word	0x20000180

00000db0 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     db0:	b510      	push	{r4, lr}
     db2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     db4:	4b0e      	ldr	r3, [pc, #56]	; (df0 <sd_mmc_wait_end_of_write_blocks+0x40>)
     db6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     db8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     dba:	2800      	cmp	r0, #0
     dbc:	d101      	bne.n	dc2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     dbe:	0018      	movs	r0, r3
     dc0:	bd10      	pop	{r4, pc}
	if (abort) {
     dc2:	2c00      	cmp	r4, #0
     dc4:	d00a      	beq.n	ddc <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     dc6:	2200      	movs	r2, #0
     dc8:	4b0a      	ldr	r3, [pc, #40]	; (df4 <sd_mmc_wait_end_of_write_blocks+0x44>)
     dca:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     dcc:	4b0a      	ldr	r3, [pc, #40]	; (df8 <sd_mmc_wait_end_of_write_blocks+0x48>)
     dce:	881b      	ldrh	r3, [r3, #0]
     dd0:	2b01      	cmp	r3, #1
     dd2:	d009      	beq.n	de8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     dd4:	4b09      	ldr	r3, [pc, #36]	; (dfc <sd_mmc_wait_end_of_write_blocks+0x4c>)
     dd6:	4798      	blx	r3
	return SD_MMC_OK;
     dd8:	2300      	movs	r3, #0
     dda:	e7f0      	b.n	dbe <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     ddc:	4b05      	ldr	r3, [pc, #20]	; (df4 <sd_mmc_wait_end_of_write_blocks+0x44>)
     dde:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     de0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     de2:	2a00      	cmp	r2, #0
     de4:	d0f2      	beq.n	dcc <sd_mmc_wait_end_of_write_blocks+0x1c>
     de6:	e7ea      	b.n	dbe <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     de8:	4b04      	ldr	r3, [pc, #16]	; (dfc <sd_mmc_wait_end_of_write_blocks+0x4c>)
     dea:	4798      	blx	r3
		return SD_MMC_OK;
     dec:	2300      	movs	r3, #0
     dee:	e7e6      	b.n	dbe <sd_mmc_wait_end_of_write_blocks+0xe>
     df0:	00005f75 	.word	0x00005f75
     df4:	20000180 	.word	0x20000180
     df8:	20000182 	.word	0x20000182
     dfc:	000006b1 	.word	0x000006b1

00000e00 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     e00:	2000      	movs	r0, #0
     e02:	4770      	bx	lr

00000e04 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     e04:	1e43      	subs	r3, r0, #1
     e06:	4198      	sbcs	r0, r3
     e08:	b2c0      	uxtb	r0, r0
     e0a:	4b03      	ldr	r3, [pc, #12]	; (e18 <udi_msc_trans_ack+0x14>)
     e0c:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
     e0e:	2201      	movs	r2, #1
     e10:	4b02      	ldr	r3, [pc, #8]	; (e1c <udi_msc_trans_ack+0x18>)
     e12:	701a      	strb	r2, [r3, #0]
}
     e14:	4770      	bx	lr
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	200002f0 	.word	0x200002f0
     e1c:	20000044 	.word	0x20000044

00000e20 <udi_msc_cbw_wait>:
{
     e20:	b510      	push	{r4, lr}
     e22:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <udi_msc_cbw_wait+0x28>)
     e26:	9300      	str	r3, [sp, #0]
     e28:	231f      	movs	r3, #31
     e2a:	4a08      	ldr	r2, [pc, #32]	; (e4c <udi_msc_cbw_wait+0x2c>)
     e2c:	2101      	movs	r1, #1
     e2e:	2002      	movs	r0, #2
     e30:	4c07      	ldr	r4, [pc, #28]	; (e50 <udi_msc_cbw_wait+0x30>)
     e32:	47a0      	blx	r4
     e34:	2800      	cmp	r0, #0
     e36:	d001      	beq.n	e3c <udi_msc_cbw_wait+0x1c>
}
     e38:	b002      	add	sp, #8
     e3a:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     e3c:	4905      	ldr	r1, [pc, #20]	; (e54 <udi_msc_cbw_wait+0x34>)
     e3e:	3002      	adds	r0, #2
     e40:	4b05      	ldr	r3, [pc, #20]	; (e58 <udi_msc_cbw_wait+0x38>)
     e42:	4798      	blx	r3
}
     e44:	e7f8      	b.n	e38 <udi_msc_cbw_wait+0x18>
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00001245 	.word	0x00001245
     e4c:	200001ac 	.word	0x200001ac
     e50:	0000328d 	.word	0x0000328d
     e54:	00000e21 	.word	0x00000e21
     e58:	00003235 	.word	0x00003235

00000e5c <udi_msc_enable>:
{
     e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
     e5e:	2300      	movs	r3, #0
     e60:	4a13      	ldr	r2, [pc, #76]	; (eb0 <udi_msc_enable+0x54>)
     e62:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
     e64:	4a13      	ldr	r2, [pc, #76]	; (eb4 <udi_msc_enable+0x58>)
     e66:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
     e68:	3301      	adds	r3, #1
     e6a:	4a13      	ldr	r2, [pc, #76]	; (eb8 <udi_msc_enable+0x5c>)
     e6c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
     e6e:	4a13      	ldr	r2, [pc, #76]	; (ebc <udi_msc_enable+0x60>)
     e70:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
     e72:	4b13      	ldr	r3, [pc, #76]	; (ec0 <udi_msc_enable+0x64>)
     e74:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
     e76:	2800      	cmp	r0, #0
     e78:	d105      	bne.n	e86 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
     e7a:	2200      	movs	r2, #0
     e7c:	4b11      	ldr	r3, [pc, #68]	; (ec4 <udi_msc_enable+0x68>)
     e7e:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
     e80:	2500      	movs	r5, #0
}
     e82:	0028      	movs	r0, r5
     e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
     e86:	3801      	subs	r0, #1
     e88:	4b0e      	ldr	r3, [pc, #56]	; (ec4 <udi_msc_enable+0x68>)
     e8a:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
     e8c:	4b0e      	ldr	r3, [pc, #56]	; (ec8 <udi_msc_enable+0x6c>)
     e8e:	4798      	blx	r3
     e90:	1e05      	subs	r5, r0, #0
     e92:	d0f6      	beq.n	e82 <udi_msc_enable+0x26>
     e94:	2400      	movs	r4, #0
		mem_unload(lun, false);
     e96:	4f0d      	ldr	r7, [pc, #52]	; (ecc <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     e98:	4e0a      	ldr	r6, [pc, #40]	; (ec4 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
     e9a:	2100      	movs	r1, #0
     e9c:	0020      	movs	r0, r4
     e9e:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     ea0:	3401      	adds	r4, #1
     ea2:	b2e4      	uxtb	r4, r4
     ea4:	7833      	ldrb	r3, [r6, #0]
     ea6:	42a3      	cmp	r3, r4
     ea8:	d2f7      	bcs.n	e9a <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
     eaa:	4b09      	ldr	r3, [pc, #36]	; (ed0 <udi_msc_enable+0x74>)
     eac:	4798      	blx	r3
	return true;
     eae:	e7e8      	b.n	e82 <udi_msc_enable+0x26>
     eb0:	200001a2 	.word	0x200001a2
     eb4:	200001a0 	.word	0x200001a0
     eb8:	20000044 	.word	0x20000044
     ebc:	20000045 	.word	0x20000045
     ec0:	00005f99 	.word	0x00005f99
     ec4:	200001d0 	.word	0x200001d0
     ec8:	000037e1 	.word	0x000037e1
     ecc:	00005fd1 	.word	0x00005fd1
     ed0:	00000e21 	.word	0x00000e21

00000ed4 <udi_msc_csw_sent>:
{
     ed4:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
     ed6:	4b01      	ldr	r3, [pc, #4]	; (edc <udi_msc_csw_sent+0x8>)
     ed8:	4798      	blx	r3
}
     eda:	bd10      	pop	{r4, pc}
     edc:	00000e21 	.word	0x00000e21

00000ee0 <udi_msc_csw_send>:
{
     ee0:	b510      	push	{r4, lr}
     ee2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <udi_msc_csw_send+0x28>)
     ee6:	9300      	str	r3, [sp, #0]
     ee8:	230d      	movs	r3, #13
     eea:	4a08      	ldr	r2, [pc, #32]	; (f0c <udi_msc_csw_send+0x2c>)
     eec:	2100      	movs	r1, #0
     eee:	2081      	movs	r0, #129	; 0x81
     ef0:	4c07      	ldr	r4, [pc, #28]	; (f10 <udi_msc_csw_send+0x30>)
     ef2:	47a0      	blx	r4
     ef4:	2800      	cmp	r0, #0
     ef6:	d001      	beq.n	efc <udi_msc_csw_send+0x1c>
}
     ef8:	b002      	add	sp, #8
     efa:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     efc:	4905      	ldr	r1, [pc, #20]	; (f14 <udi_msc_csw_send+0x34>)
     efe:	3081      	adds	r0, #129	; 0x81
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <udi_msc_csw_send+0x38>)
     f02:	4798      	blx	r3
}
     f04:	e7f8      	b.n	ef8 <udi_msc_csw_send+0x18>
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	00000ed5 	.word	0x00000ed5
     f0c:	20000048 	.word	0x20000048
     f10:	0000328d 	.word	0x0000328d
     f14:	00000ee1 	.word	0x00000ee1
     f18:	00003235 	.word	0x00003235

00000f1c <udi_msc_cbw_invalid>:
{
     f1c:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     f1e:	4b06      	ldr	r3, [pc, #24]	; (f38 <udi_msc_cbw_invalid+0x1c>)
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	2b00      	cmp	r3, #0
     f24:	d100      	bne.n	f28 <udi_msc_cbw_invalid+0xc>
}
     f26:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     f28:	2002      	movs	r0, #2
     f2a:	4b04      	ldr	r3, [pc, #16]	; (f3c <udi_msc_cbw_invalid+0x20>)
     f2c:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     f2e:	4904      	ldr	r1, [pc, #16]	; (f40 <udi_msc_cbw_invalid+0x24>)
     f30:	2002      	movs	r0, #2
     f32:	4b04      	ldr	r3, [pc, #16]	; (f44 <udi_msc_cbw_invalid+0x28>)
     f34:	4798      	blx	r3
     f36:	e7f6      	b.n	f26 <udi_msc_cbw_invalid+0xa>
     f38:	200001a0 	.word	0x200001a0
     f3c:	000030c1 	.word	0x000030c1
     f40:	00000f1d 	.word	0x00000f1d
     f44:	00003235 	.word	0x00003235

00000f48 <udi_msc_csw_invalid>:
{
     f48:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
     f4a:	4b06      	ldr	r3, [pc, #24]	; (f64 <udi_msc_csw_invalid+0x1c>)
     f4c:	781b      	ldrb	r3, [r3, #0]
     f4e:	2b00      	cmp	r3, #0
     f50:	d100      	bne.n	f54 <udi_msc_csw_invalid+0xc>
}
     f52:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
     f54:	2081      	movs	r0, #129	; 0x81
     f56:	4b04      	ldr	r3, [pc, #16]	; (f68 <udi_msc_csw_invalid+0x20>)
     f58:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     f5a:	4904      	ldr	r1, [pc, #16]	; (f6c <udi_msc_csw_invalid+0x24>)
     f5c:	2081      	movs	r0, #129	; 0x81
     f5e:	4b04      	ldr	r3, [pc, #16]	; (f70 <udi_msc_csw_invalid+0x28>)
     f60:	4798      	blx	r3
     f62:	e7f6      	b.n	f52 <udi_msc_csw_invalid+0xa>
     f64:	200001a0 	.word	0x200001a0
     f68:	000030c1 	.word	0x000030c1
     f6c:	00000f49 	.word	0x00000f49
     f70:	00003235 	.word	0x00003235

00000f74 <udi_msc_csw_process>:
{
     f74:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
     f76:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <udi_msc_csw_process+0x30>)
     f78:	689b      	ldr	r3, [r3, #8]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d006      	beq.n	f8c <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     f7e:	4b0a      	ldr	r3, [pc, #40]	; (fa8 <udi_msc_csw_process+0x34>)
     f80:	7b1b      	ldrb	r3, [r3, #12]
     f82:	2b7f      	cmp	r3, #127	; 0x7f
     f84:	d809      	bhi.n	f9a <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     f86:	2002      	movs	r0, #2
     f88:	4b08      	ldr	r3, [pc, #32]	; (fac <udi_msc_csw_process+0x38>)
     f8a:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     f8c:	4b06      	ldr	r3, [pc, #24]	; (fa8 <udi_msc_csw_process+0x34>)
     f8e:	685a      	ldr	r2, [r3, #4]
     f90:	4b04      	ldr	r3, [pc, #16]	; (fa4 <udi_msc_csw_process+0x30>)
     f92:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
     f94:	4b06      	ldr	r3, [pc, #24]	; (fb0 <udi_msc_csw_process+0x3c>)
     f96:	4798      	blx	r3
}
     f98:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
     f9a:	2081      	movs	r0, #129	; 0x81
     f9c:	4b03      	ldr	r3, [pc, #12]	; (fac <udi_msc_csw_process+0x38>)
     f9e:	4798      	blx	r3
     fa0:	e7f4      	b.n	f8c <udi_msc_csw_process+0x18>
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	20000048 	.word	0x20000048
     fa8:	200001ac 	.word	0x200001ac
     fac:	000030c1 	.word	0x000030c1
     fb0:	00000ee1 	.word	0x00000ee1

00000fb4 <udi_msc_clear_sense>:
{
     fb4:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
     fb6:	4c05      	ldr	r4, [pc, #20]	; (fcc <udi_msc_clear_sense+0x18>)
     fb8:	2212      	movs	r2, #18
     fba:	2100      	movs	r1, #0
     fbc:	0020      	movs	r0, r4
     fbe:	4b04      	ldr	r3, [pc, #16]	; (fd0 <udi_msc_clear_sense+0x1c>)
     fc0:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
     fc2:	23f0      	movs	r3, #240	; 0xf0
     fc4:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
     fc6:	3be6      	subs	r3, #230	; 0xe6
     fc8:	71e3      	strb	r3, [r4, #7]
}
     fca:	bd10      	pop	{r4, pc}
     fcc:	200001d4 	.word	0x200001d4
     fd0:	00006bf3 	.word	0x00006bf3

00000fd4 <udi_msc_sense_fail>:
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	0006      	movs	r6, r0
     fd8:	000d      	movs	r5, r1
     fda:	0014      	movs	r4, r2
	udi_msc_clear_sense();
     fdc:	4b08      	ldr	r3, [pc, #32]	; (1000 <udi_msc_sense_fail+0x2c>)
     fde:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
     fe0:	2201      	movs	r2, #1
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <udi_msc_sense_fail+0x30>)
     fe4:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
     fe6:	4b08      	ldr	r3, [pc, #32]	; (1008 <udi_msc_sense_fail+0x34>)
     fe8:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
     fea:	0e22      	lsrs	r2, r4, #24
     fec:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
     fee:	0c22      	lsrs	r2, r4, #16
     ff0:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
     ff2:	0a22      	lsrs	r2, r4, #8
     ff4:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
     ff6:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
     ff8:	0a2a      	lsrs	r2, r5, #8
     ffa:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
     ffc:	735d      	strb	r5, [r3, #13]
}
     ffe:	bd70      	pop	{r4, r5, r6, pc}
    1000:	00000fb5 	.word	0x00000fb5
    1004:	20000048 	.word	0x20000048
    1008:	200001d4 	.word	0x200001d4

0000100c <udi_msc_sense_fail_cdb_invalid>:
{
    100c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    100e:	2200      	movs	r2, #0
    1010:	2190      	movs	r1, #144	; 0x90
    1012:	0189      	lsls	r1, r1, #6
    1014:	2005      	movs	r0, #5
    1016:	4b01      	ldr	r3, [pc, #4]	; (101c <udi_msc_sense_fail_cdb_invalid+0x10>)
    1018:	4798      	blx	r3
}
    101a:	bd10      	pop	{r4, pc}
    101c:	00000fd5 	.word	0x00000fd5

00001020 <udi_msc_cbw_validate>:
{
    1020:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    1022:	4b09      	ldr	r3, [pc, #36]	; (1048 <udi_msc_cbw_validate+0x28>)
    1024:	7b1b      	ldrb	r3, [r3, #12]
    1026:	4059      	eors	r1, r3
    1028:	b249      	sxtb	r1, r1
    102a:	2900      	cmp	r1, #0
    102c:	db04      	blt.n	1038 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <udi_msc_cbw_validate+0x2c>)
    1030:	689a      	ldr	r2, [r3, #8]
	return true;
    1032:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    1034:	4282      	cmp	r2, r0
    1036:	d204      	bcs.n	1042 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    1038:	4b05      	ldr	r3, [pc, #20]	; (1050 <udi_msc_cbw_validate+0x30>)
    103a:	4798      	blx	r3
		udi_msc_csw_process();
    103c:	4b05      	ldr	r3, [pc, #20]	; (1054 <udi_msc_cbw_validate+0x34>)
    103e:	4798      	blx	r3
		return false;
    1040:	2300      	movs	r3, #0
}
    1042:	0018      	movs	r0, r3
    1044:	bd10      	pop	{r4, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	200001ac 	.word	0x200001ac
    104c:	20000048 	.word	0x20000048
    1050:	0000100d 	.word	0x0000100d
    1054:	00000f75 	.word	0x00000f75

00001058 <udi_msc_sense_fail_hardware>:
{
    1058:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    105a:	2200      	movs	r2, #0
    105c:	2100      	movs	r1, #0
    105e:	2004      	movs	r0, #4
    1060:	4b01      	ldr	r3, [pc, #4]	; (1068 <udi_msc_sense_fail_hardware+0x10>)
    1062:	4798      	blx	r3
}
    1064:	bd10      	pop	{r4, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00000fd5 	.word	0x00000fd5

0000106c <udi_msc_data_send>:
{
    106c:	b510      	push	{r4, lr}
    106e:	b082      	sub	sp, #8
    1070:	0002      	movs	r2, r0
    1072:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1074:	4907      	ldr	r1, [pc, #28]	; (1094 <udi_msc_data_send+0x28>)
    1076:	9100      	str	r1, [sp, #0]
    1078:	2101      	movs	r1, #1
    107a:	2081      	movs	r0, #129	; 0x81
    107c:	4c06      	ldr	r4, [pc, #24]	; (1098 <udi_msc_data_send+0x2c>)
    107e:	47a0      	blx	r4
    1080:	2800      	cmp	r0, #0
    1082:	d001      	beq.n	1088 <udi_msc_data_send+0x1c>
}
    1084:	b002      	add	sp, #8
    1086:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1088:	4b04      	ldr	r3, [pc, #16]	; (109c <udi_msc_data_send+0x30>)
    108a:	4798      	blx	r3
		udi_msc_csw_process();
    108c:	4b04      	ldr	r3, [pc, #16]	; (10a0 <udi_msc_data_send+0x34>)
    108e:	4798      	blx	r3
}
    1090:	e7f8      	b.n	1084 <udi_msc_data_send+0x18>
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	000010e5 	.word	0x000010e5
    1098:	0000328d 	.word	0x0000328d
    109c:	00001059 	.word	0x00001059
    10a0:	00000f75 	.word	0x00000f75

000010a4 <udi_msc_sense_fail_busy_or_change>:
{
    10a4:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    10a6:	2200      	movs	r2, #0
    10a8:	21a0      	movs	r1, #160	; 0xa0
    10aa:	0189      	lsls	r1, r1, #6
    10ac:	2006      	movs	r0, #6
    10ae:	4b01      	ldr	r3, [pc, #4]	; (10b4 <udi_msc_sense_fail_busy_or_change+0x10>)
    10b0:	4798      	blx	r3
}
    10b2:	bd10      	pop	{r4, pc}
    10b4:	00000fd5 	.word	0x00000fd5

000010b8 <udi_msc_sense_fail_not_present>:
{
    10b8:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    10ba:	2200      	movs	r2, #0
    10bc:	21e8      	movs	r1, #232	; 0xe8
    10be:	0189      	lsls	r1, r1, #6
    10c0:	2002      	movs	r0, #2
    10c2:	4b01      	ldr	r3, [pc, #4]	; (10c8 <udi_msc_sense_fail_not_present+0x10>)
    10c4:	4798      	blx	r3
}
    10c6:	bd10      	pop	{r4, pc}
    10c8:	00000fd5 	.word	0x00000fd5

000010cc <udi_msc_sense_pass>:
{
    10cc:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    10ce:	4b03      	ldr	r3, [pc, #12]	; (10dc <udi_msc_sense_pass+0x10>)
    10d0:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    10d2:	2200      	movs	r2, #0
    10d4:	4b02      	ldr	r3, [pc, #8]	; (10e0 <udi_msc_sense_pass+0x14>)
    10d6:	731a      	strb	r2, [r3, #12]
}
    10d8:	bd10      	pop	{r4, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00000fb5 	.word	0x00000fb5
    10e0:	20000048 	.word	0x20000048

000010e4 <udi_msc_data_sent>:
{
    10e4:	b510      	push	{r4, lr}
    10e6:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    10e8:	2800      	cmp	r0, #0
    10ea:	d000      	beq.n	10ee <udi_msc_data_sent+0xa>
}
    10ec:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    10ee:	4b04      	ldr	r3, [pc, #16]	; (1100 <udi_msc_data_sent+0x1c>)
    10f0:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    10f2:	4b04      	ldr	r3, [pc, #16]	; (1104 <udi_msc_data_sent+0x20>)
    10f4:	689a      	ldr	r2, [r3, #8]
    10f6:	1b14      	subs	r4, r2, r4
    10f8:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    10fa:	4b03      	ldr	r3, [pc, #12]	; (1108 <udi_msc_data_sent+0x24>)
    10fc:	4798      	blx	r3
    10fe:	e7f5      	b.n	10ec <udi_msc_data_sent+0x8>
    1100:	000010cd 	.word	0x000010cd
    1104:	20000048 	.word	0x20000048
    1108:	00000f75 	.word	0x00000f75

0000110c <udi_msc_spc_mode_sense>:
{
    110c:	b570      	push	{r4, r5, r6, lr}
    110e:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    1110:	2214      	movs	r2, #20
    1112:	2100      	movs	r1, #0
    1114:	4823      	ldr	r0, [pc, #140]	; (11a4 <udi_msc_spc_mode_sense+0x98>)
    1116:	4b24      	ldr	r3, [pc, #144]	; (11a8 <udi_msc_spc_mode_sense+0x9c>)
    1118:	4798      	blx	r3
	if (b_sense10) {
    111a:	2d00      	cmp	r5, #0
    111c:	d018      	beq.n	1150 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    111e:	4b23      	ldr	r3, [pc, #140]	; (11ac <udi_msc_spc_mode_sense+0xa0>)
    1120:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    1122:	4a20      	ldr	r2, [pc, #128]	; (11a4 <udi_msc_spc_mode_sense+0x98>)
    1124:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    1126:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    1128:	4b20      	ldr	r3, [pc, #128]	; (11ac <udi_msc_spc_mode_sense+0xa0>)
    112a:	7c58      	ldrb	r0, [r3, #17]
    112c:	233f      	movs	r3, #63	; 0x3f
    112e:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    1130:	2b1c      	cmp	r3, #28
    1132:	d013      	beq.n	115c <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    1134:	2b3f      	cmp	r3, #63	; 0x3f
    1136:	d011      	beq.n	115c <udi_msc_spc_mode_sense+0x50>
    1138:	1c20      	adds	r0, r4, #0
    113a:	428c      	cmp	r4, r1
    113c:	d900      	bls.n	1140 <udi_msc_spc_mode_sense+0x34>
    113e:	1c08      	adds	r0, r1, #0
    1140:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    1142:	2180      	movs	r1, #128	; 0x80
    1144:	0030      	movs	r0, r6
    1146:	4b1a      	ldr	r3, [pc, #104]	; (11b0 <udi_msc_spc_mode_sense+0xa4>)
    1148:	4798      	blx	r3
    114a:	2800      	cmp	r0, #0
    114c:	d10f      	bne.n	116e <udi_msc_spc_mode_sense+0x62>
}
    114e:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    1150:	4b16      	ldr	r3, [pc, #88]	; (11ac <udi_msc_spc_mode_sense+0xa0>)
    1152:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    1154:	4a13      	ldr	r2, [pc, #76]	; (11a4 <udi_msc_spc_mode_sense+0x98>)
    1156:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1158:	2404      	movs	r4, #4
    115a:	e7e5      	b.n	1128 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    115c:	231c      	movs	r3, #28
    115e:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    1160:	3b12      	subs	r3, #18
    1162:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    1164:	3b05      	subs	r3, #5
    1166:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1168:	340c      	adds	r4, #12
    116a:	b2e4      	uxtb	r4, r4
    116c:	e7e4      	b.n	1138 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    116e:	4b0f      	ldr	r3, [pc, #60]	; (11ac <udi_msc_spc_mode_sense+0xa0>)
    1170:	7b58      	ldrb	r0, [r3, #13]
    1172:	4b10      	ldr	r3, [pc, #64]	; (11b4 <udi_msc_spc_mode_sense+0xa8>)
    1174:	4798      	blx	r3
    1176:	1e43      	subs	r3, r0, #1
    1178:	4198      	sbcs	r0, r3
    117a:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    117c:	2d00      	cmp	r5, #0
    117e:	d00c      	beq.n	119a <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1180:	3c02      	subs	r4, #2
    1182:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1184:	4a07      	ldr	r2, [pc, #28]	; (11a4 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1186:	0a23      	lsrs	r3, r4, #8
    1188:	0224      	lsls	r4, r4, #8
    118a:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    118c:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    118e:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1190:	0031      	movs	r1, r6
    1192:	4804      	ldr	r0, [pc, #16]	; (11a4 <udi_msc_spc_mode_sense+0x98>)
    1194:	4b08      	ldr	r3, [pc, #32]	; (11b8 <udi_msc_spc_mode_sense+0xac>)
    1196:	4798      	blx	r3
    1198:	e7d9      	b.n	114e <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    119a:	4b02      	ldr	r3, [pc, #8]	; (11a4 <udi_msc_spc_mode_sense+0x98>)
    119c:	3c01      	subs	r4, #1
    119e:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    11a0:	7098      	strb	r0, [r3, #2]
    11a2:	e7f5      	b.n	1190 <udi_msc_spc_mode_sense+0x84>
    11a4:	20000188 	.word	0x20000188
    11a8:	00006bf3 	.word	0x00006bf3
    11ac:	200001ac 	.word	0x200001ac
    11b0:	00001021 	.word	0x00001021
    11b4:	00005fe1 	.word	0x00005fe1
    11b8:	0000106d 	.word	0x0000106d

000011bc <udi_msc_sbc_trans>:
{
    11bc:	b510      	push	{r4, lr}
    11be:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    11c0:	d01e      	beq.n	1200 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    11c2:	4a17      	ldr	r2, [pc, #92]	; (1220 <udi_msc_sbc_trans+0x64>)
    11c4:	4b17      	ldr	r3, [pc, #92]	; (1224 <udi_msc_sbc_trans+0x68>)
    11c6:	7c59      	ldrb	r1, [r3, #17]
    11c8:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    11ca:	7c99      	ldrb	r1, [r3, #18]
    11cc:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    11ce:	7cd9      	ldrb	r1, [r3, #19]
    11d0:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    11d2:	7d19      	ldrb	r1, [r3, #20]
    11d4:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    11d6:	4a14      	ldr	r2, [pc, #80]	; (1228 <udi_msc_sbc_trans+0x6c>)
    11d8:	7d99      	ldrb	r1, [r3, #22]
    11da:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    11dc:	7ddb      	ldrb	r3, [r3, #23]
    11de:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    11e0:	8810      	ldrh	r0, [r2, #0]
    11e2:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    11e4:	0021      	movs	r1, r4
    11e6:	1e4b      	subs	r3, r1, #1
    11e8:	4199      	sbcs	r1, r3
    11ea:	01c9      	lsls	r1, r1, #7
    11ec:	4b0f      	ldr	r3, [pc, #60]	; (122c <udi_msc_sbc_trans+0x70>)
    11ee:	4798      	blx	r3
    11f0:	2800      	cmp	r0, #0
    11f2:	d004      	beq.n	11fe <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    11f4:	4b0e      	ldr	r3, [pc, #56]	; (1230 <udi_msc_sbc_trans+0x74>)
    11f6:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    11f8:	2201      	movs	r2, #1
    11fa:	4b0e      	ldr	r3, [pc, #56]	; (1234 <udi_msc_sbc_trans+0x78>)
    11fc:	701a      	strb	r2, [r3, #0]
}
    11fe:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    1200:	4b08      	ldr	r3, [pc, #32]	; (1224 <udi_msc_sbc_trans+0x68>)
    1202:	7b58      	ldrb	r0, [r3, #13]
    1204:	4b0c      	ldr	r3, [pc, #48]	; (1238 <udi_msc_sbc_trans+0x7c>)
    1206:	4798      	blx	r3
    1208:	2800      	cmp	r0, #0
    120a:	d0da      	beq.n	11c2 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    120c:	2200      	movs	r2, #0
    120e:	219c      	movs	r1, #156	; 0x9c
    1210:	0189      	lsls	r1, r1, #6
    1212:	2007      	movs	r0, #7
    1214:	4b09      	ldr	r3, [pc, #36]	; (123c <udi_msc_sbc_trans+0x80>)
    1216:	4798      	blx	r3
			udi_msc_csw_process();
    1218:	4b09      	ldr	r3, [pc, #36]	; (1240 <udi_msc_sbc_trans+0x84>)
    121a:	4798      	blx	r3
			return;
    121c:	e7ef      	b.n	11fe <udi_msc_sbc_trans+0x42>
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	2000019c 	.word	0x2000019c
    1224:	200001ac 	.word	0x200001ac
    1228:	200001cc 	.word	0x200001cc
    122c:	00001021 	.word	0x00001021
    1230:	200001a1 	.word	0x200001a1
    1234:	200001a2 	.word	0x200001a2
    1238:	00005fe1 	.word	0x00005fe1
    123c:	00000fd5 	.word	0x00000fd5
    1240:	00000f75 	.word	0x00000f75

00001244 <udi_msc_cbw_received>:
{
    1244:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    1246:	2800      	cmp	r0, #0
    1248:	d10d      	bne.n	1266 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    124a:	291f      	cmp	r1, #31
    124c:	d104      	bne.n	1258 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    124e:	4b84      	ldr	r3, [pc, #528]	; (1460 <udi_msc_cbw_received+0x21c>)
    1250:	4a84      	ldr	r2, [pc, #528]	; (1464 <udi_msc_cbw_received+0x220>)
    1252:	6812      	ldr	r2, [r2, #0]
    1254:	429a      	cmp	r2, r3
    1256:	d007      	beq.n	1268 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1258:	2201      	movs	r2, #1
    125a:	4b83      	ldr	r3, [pc, #524]	; (1468 <udi_msc_cbw_received+0x224>)
    125c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    125e:	4b83      	ldr	r3, [pc, #524]	; (146c <udi_msc_cbw_received+0x228>)
    1260:	4798      	blx	r3
		udi_msc_csw_invalid();
    1262:	4b83      	ldr	r3, [pc, #524]	; (1470 <udi_msc_cbw_received+0x22c>)
    1264:	4798      	blx	r3
}
    1266:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    1268:	4b7e      	ldr	r3, [pc, #504]	; (1464 <udi_msc_cbw_received+0x220>)
    126a:	7b58      	ldrb	r0, [r3, #13]
    126c:	220f      	movs	r2, #15
    126e:	4010      	ands	r0, r2
    1270:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    1272:	4b80      	ldr	r3, [pc, #512]	; (1474 <udi_msc_cbw_received+0x230>)
    1274:	781b      	ldrb	r3, [r3, #0]
    1276:	4283      	cmp	r3, r0
    1278:	d30b      	bcc.n	1292 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    127a:	4b7a      	ldr	r3, [pc, #488]	; (1464 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    127c:	4a7e      	ldr	r2, [pc, #504]	; (1478 <udi_msc_cbw_received+0x234>)
    127e:	6899      	ldr	r1, [r3, #8]
    1280:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    1282:	7bda      	ldrb	r2, [r3, #15]
    1284:	2a5a      	cmp	r2, #90	; 0x5a
    1286:	d900      	bls.n	128a <udi_msc_cbw_received+0x46>
    1288:	e0d2      	b.n	1430 <udi_msc_cbw_received+0x1ec>
    128a:	0093      	lsls	r3, r2, #2
    128c:	4a7b      	ldr	r2, [pc, #492]	; (147c <udi_msc_cbw_received+0x238>)
    128e:	58d3      	ldr	r3, [r2, r3]
    1290:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    1292:	4b7b      	ldr	r3, [pc, #492]	; (1480 <udi_msc_cbw_received+0x23c>)
    1294:	4798      	blx	r3
		udi_msc_csw_process();
    1296:	4b7b      	ldr	r3, [pc, #492]	; (1484 <udi_msc_cbw_received+0x240>)
    1298:	4798      	blx	r3
		return;
    129a:	e7e4      	b.n	1266 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    129c:	4b71      	ldr	r3, [pc, #452]	; (1464 <udi_msc_cbw_received+0x220>)
    129e:	7cda      	ldrb	r2, [r3, #19]
    12a0:	1c13      	adds	r3, r2, #0
    12a2:	2a12      	cmp	r2, #18
    12a4:	d900      	bls.n	12a8 <udi_msc_cbw_received+0x64>
    12a6:	2312      	movs	r3, #18
    12a8:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    12aa:	2180      	movs	r1, #128	; 0x80
    12ac:	0020      	movs	r0, r4
    12ae:	4b76      	ldr	r3, [pc, #472]	; (1488 <udi_msc_cbw_received+0x244>)
    12b0:	4798      	blx	r3
    12b2:	2800      	cmp	r0, #0
    12b4:	d0d7      	beq.n	1266 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    12b6:	0021      	movs	r1, r4
    12b8:	4874      	ldr	r0, [pc, #464]	; (148c <udi_msc_cbw_received+0x248>)
    12ba:	4b75      	ldr	r3, [pc, #468]	; (1490 <udi_msc_cbw_received+0x24c>)
    12bc:	4798      	blx	r3
    12be:	e7d2      	b.n	1266 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    12c0:	4b68      	ldr	r3, [pc, #416]	; (1464 <udi_msc_cbw_received+0x220>)
    12c2:	7cdb      	ldrb	r3, [r3, #19]
    12c4:	1c1a      	adds	r2, r3, #0
    12c6:	2b24      	cmp	r3, #36	; 0x24
    12c8:	d900      	bls.n	12cc <udi_msc_cbw_received+0x88>
    12ca:	2224      	movs	r2, #36	; 0x24
    12cc:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    12ce:	2180      	movs	r1, #128	; 0x80
    12d0:	0020      	movs	r0, r4
    12d2:	4b6d      	ldr	r3, [pc, #436]	; (1488 <udi_msc_cbw_received+0x244>)
    12d4:	4798      	blx	r3
    12d6:	2800      	cmp	r0, #0
    12d8:	d0c5      	beq.n	1266 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    12da:	4b62      	ldr	r3, [pc, #392]	; (1464 <udi_msc_cbw_received+0x220>)
    12dc:	7c1b      	ldrb	r3, [r3, #16]
    12de:	079b      	lsls	r3, r3, #30
    12e0:	d103      	bne.n	12ea <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    12e2:	4b60      	ldr	r3, [pc, #384]	; (1464 <udi_msc_cbw_received+0x220>)
    12e4:	7c5d      	ldrb	r5, [r3, #17]
    12e6:	2d00      	cmp	r5, #0
    12e8:	d004      	beq.n	12f4 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    12ea:	4b65      	ldr	r3, [pc, #404]	; (1480 <udi_msc_cbw_received+0x23c>)
    12ec:	4798      	blx	r3
		udi_msc_csw_process();
    12ee:	4b65      	ldr	r3, [pc, #404]	; (1484 <udi_msc_cbw_received+0x240>)
    12f0:	4798      	blx	r3
    12f2:	e7b8      	b.n	1266 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    12f4:	4b5b      	ldr	r3, [pc, #364]	; (1464 <udi_msc_cbw_received+0x220>)
    12f6:	7b58      	ldrb	r0, [r3, #13]
    12f8:	4b66      	ldr	r3, [pc, #408]	; (1494 <udi_msc_cbw_received+0x250>)
    12fa:	4798      	blx	r3
    12fc:	2380      	movs	r3, #128	; 0x80
    12fe:	2800      	cmp	r0, #0
    1300:	d100      	bne.n	1304 <udi_msc_cbw_received+0xc0>
    1302:	002b      	movs	r3, r5
    1304:	4e64      	ldr	r6, [pc, #400]	; (1498 <udi_msc_cbw_received+0x254>)
    1306:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    1308:	4b56      	ldr	r3, [pc, #344]	; (1464 <udi_msc_cbw_received+0x220>)
    130a:	7b58      	ldrb	r0, [r3, #13]
    130c:	4b63      	ldr	r3, [pc, #396]	; (149c <udi_msc_cbw_received+0x258>)
    130e:	4798      	blx	r3
    1310:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    1312:	0030      	movs	r0, r6
    1314:	3010      	adds	r0, #16
    1316:	3101      	adds	r1, #1
    1318:	2210      	movs	r2, #16
    131a:	4b61      	ldr	r3, [pc, #388]	; (14a0 <udi_msc_cbw_received+0x25c>)
    131c:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    131e:	7c33      	ldrb	r3, [r6, #16]
    1320:	2b00      	cmp	r3, #0
    1322:	d100      	bne.n	1326 <udi_msc_cbw_received+0xe2>
    1324:	e08e      	b.n	1444 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1326:	2b22      	cmp	r3, #34	; 0x22
    1328:	d100      	bne.n	132c <udi_msc_cbw_received+0xe8>
    132a:	e08a      	b.n	1442 <udi_msc_cbw_received+0x1fe>
    132c:	495a      	ldr	r1, [pc, #360]	; (1498 <udi_msc_cbw_received+0x254>)
		i++;
    132e:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    1330:	7c4a      	ldrb	r2, [r1, #17]
    1332:	2a00      	cmp	r2, #0
    1334:	d100      	bne.n	1338 <udi_msc_cbw_received+0xf4>
    1336:	e085      	b.n	1444 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1338:	2a22      	cmp	r2, #34	; 0x22
    133a:	d100      	bne.n	133e <udi_msc_cbw_received+0xfa>
    133c:	e082      	b.n	1444 <udi_msc_cbw_received+0x200>
		i++;
    133e:	3301      	adds	r3, #1
    1340:	b2db      	uxtb	r3, r3
    1342:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1344:	2b10      	cmp	r3, #16
    1346:	d1f3      	bne.n	1330 <udi_msc_cbw_received+0xec>
    1348:	e084      	b.n	1454 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    134a:	2000      	movs	r0, #0
    134c:	4b55      	ldr	r3, [pc, #340]	; (14a4 <udi_msc_cbw_received+0x260>)
    134e:	4798      	blx	r3
		break;
    1350:	e789      	b.n	1266 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    1352:	2001      	movs	r0, #1
    1354:	4b53      	ldr	r3, [pc, #332]	; (14a4 <udi_msc_cbw_received+0x260>)
    1356:	4798      	blx	r3
		break;
    1358:	e785      	b.n	1266 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    135a:	4b53      	ldr	r3, [pc, #332]	; (14a8 <udi_msc_cbw_received+0x264>)
    135c:	4798      	blx	r3
    135e:	2802      	cmp	r0, #2
    1360:	d009      	beq.n	1376 <udi_msc_cbw_received+0x132>
    1362:	2803      	cmp	r0, #3
    1364:	d004      	beq.n	1370 <udi_msc_cbw_received+0x12c>
    1366:	2800      	cmp	r0, #0
    1368:	d008      	beq.n	137c <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    136a:	4b50      	ldr	r3, [pc, #320]	; (14ac <udi_msc_cbw_received+0x268>)
    136c:	4798      	blx	r3
    136e:	e007      	b.n	1380 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    1370:	4b4f      	ldr	r3, [pc, #316]	; (14b0 <udi_msc_cbw_received+0x26c>)
    1372:	4798      	blx	r3
    1374:	e004      	b.n	1380 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    1376:	4b4f      	ldr	r3, [pc, #316]	; (14b4 <udi_msc_cbw_received+0x270>)
    1378:	4798      	blx	r3
    137a:	e001      	b.n	1380 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    137c:	4b4e      	ldr	r3, [pc, #312]	; (14b8 <udi_msc_cbw_received+0x274>)
    137e:	4798      	blx	r3
	udi_msc_csw_process();
    1380:	4b40      	ldr	r3, [pc, #256]	; (1484 <udi_msc_cbw_received+0x240>)
    1382:	4798      	blx	r3
    1384:	e76f      	b.n	1266 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1386:	2180      	movs	r1, #128	; 0x80
    1388:	2008      	movs	r0, #8
    138a:	4b3f      	ldr	r3, [pc, #252]	; (1488 <udi_msc_cbw_received+0x244>)
    138c:	4798      	blx	r3
    138e:	2800      	cmp	r0, #0
    1390:	d100      	bne.n	1394 <udi_msc_cbw_received+0x150>
    1392:	e768      	b.n	1266 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1394:	4b33      	ldr	r3, [pc, #204]	; (1464 <udi_msc_cbw_received+0x220>)
    1396:	7b58      	ldrb	r0, [r3, #13]
    1398:	4948      	ldr	r1, [pc, #288]	; (14bc <udi_msc_cbw_received+0x278>)
    139a:	4b49      	ldr	r3, [pc, #292]	; (14c0 <udi_msc_cbw_received+0x27c>)
    139c:	4798      	blx	r3
    139e:	2802      	cmp	r0, #2
    13a0:	d00d      	beq.n	13be <udi_msc_cbw_received+0x17a>
    13a2:	2803      	cmp	r0, #3
    13a4:	d006      	beq.n	13b4 <udi_msc_cbw_received+0x170>
    13a6:	2800      	cmp	r0, #0
    13a8:	d00e      	beq.n	13c8 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    13aa:	4b40      	ldr	r3, [pc, #256]	; (14ac <udi_msc_cbw_received+0x268>)
    13ac:	4798      	blx	r3
		udi_msc_csw_process();
    13ae:	4b35      	ldr	r3, [pc, #212]	; (1484 <udi_msc_cbw_received+0x240>)
    13b0:	4798      	blx	r3
    13b2:	e758      	b.n	1266 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    13b4:	4b3e      	ldr	r3, [pc, #248]	; (14b0 <udi_msc_cbw_received+0x26c>)
    13b6:	4798      	blx	r3
		udi_msc_csw_process();
    13b8:	4b32      	ldr	r3, [pc, #200]	; (1484 <udi_msc_cbw_received+0x240>)
    13ba:	4798      	blx	r3
    13bc:	e753      	b.n	1266 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    13be:	4b3d      	ldr	r3, [pc, #244]	; (14b4 <udi_msc_cbw_received+0x270>)
    13c0:	4798      	blx	r3
		udi_msc_csw_process();
    13c2:	4b30      	ldr	r3, [pc, #192]	; (1484 <udi_msc_cbw_received+0x240>)
    13c4:	4798      	blx	r3
    13c6:	e74e      	b.n	1266 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    13c8:	483c      	ldr	r0, [pc, #240]	; (14bc <udi_msc_cbw_received+0x278>)
    13ca:	2380      	movs	r3, #128	; 0x80
    13cc:	029b      	lsls	r3, r3, #10
    13ce:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    13d0:	6803      	ldr	r3, [r0, #0]
    13d2:	ba1b      	rev	r3, r3
    13d4:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    13d6:	2108      	movs	r1, #8
    13d8:	4b2d      	ldr	r3, [pc, #180]	; (1490 <udi_msc_cbw_received+0x24c>)
    13da:	4798      	blx	r3
    13dc:	e743      	b.n	1266 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    13de:	4b21      	ldr	r3, [pc, #132]	; (1464 <udi_msc_cbw_received+0x220>)
    13e0:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    13e2:	079a      	lsls	r2, r3, #30
    13e4:	d404      	bmi.n	13f0 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    13e6:	4b34      	ldr	r3, [pc, #208]	; (14b8 <udi_msc_cbw_received+0x274>)
    13e8:	4798      	blx	r3
	udi_msc_csw_process();
    13ea:	4b26      	ldr	r3, [pc, #152]	; (1484 <udi_msc_cbw_received+0x240>)
    13ec:	4798      	blx	r3
    13ee:	e73a      	b.n	1266 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    13f0:	2101      	movs	r1, #1
    13f2:	404b      	eors	r3, r1
    13f4:	2101      	movs	r1, #1
    13f6:	4019      	ands	r1, r3
    13f8:	4b32      	ldr	r3, [pc, #200]	; (14c4 <udi_msc_cbw_received+0x280>)
    13fa:	4798      	blx	r3
    13fc:	e7f3      	b.n	13e6 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    13fe:	4b19      	ldr	r3, [pc, #100]	; (1464 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1400:	7cdb      	ldrb	r3, [r3, #19]
    1402:	2b00      	cmp	r3, #0
    1404:	d004      	beq.n	1410 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1406:	4b1e      	ldr	r3, [pc, #120]	; (1480 <udi_msc_cbw_received+0x23c>)
    1408:	4798      	blx	r3
	udi_msc_csw_process();
    140a:	4b1e      	ldr	r3, [pc, #120]	; (1484 <udi_msc_cbw_received+0x240>)
    140c:	4798      	blx	r3
    140e:	e72a      	b.n	1266 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1410:	4b29      	ldr	r3, [pc, #164]	; (14b8 <udi_msc_cbw_received+0x274>)
    1412:	4798      	blx	r3
    1414:	e7f9      	b.n	140a <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    1416:	4b28      	ldr	r3, [pc, #160]	; (14b8 <udi_msc_cbw_received+0x274>)
    1418:	4798      	blx	r3
		udi_msc_csw_process();
    141a:	4b1a      	ldr	r3, [pc, #104]	; (1484 <udi_msc_cbw_received+0x240>)
    141c:	4798      	blx	r3
		break;
    141e:	e722      	b.n	1266 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    1420:	2001      	movs	r0, #1
    1422:	4b29      	ldr	r3, [pc, #164]	; (14c8 <udi_msc_cbw_received+0x284>)
    1424:	4798      	blx	r3
		break;
    1426:	e71e      	b.n	1266 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    1428:	2000      	movs	r0, #0
    142a:	4b27      	ldr	r3, [pc, #156]	; (14c8 <udi_msc_cbw_received+0x284>)
    142c:	4798      	blx	r3
		break;
    142e:	e71a      	b.n	1266 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1430:	2200      	movs	r2, #0
    1432:	2180      	movs	r1, #128	; 0x80
    1434:	0189      	lsls	r1, r1, #6
    1436:	2005      	movs	r0, #5
    1438:	4b24      	ldr	r3, [pc, #144]	; (14cc <udi_msc_cbw_received+0x288>)
    143a:	4798      	blx	r3
		udi_msc_csw_process();
    143c:	4b11      	ldr	r3, [pc, #68]	; (1484 <udi_msc_cbw_received+0x240>)
    143e:	4798      	blx	r3
		break;
    1440:	e711      	b.n	1266 <udi_msc_cbw_received+0x22>
	i = 0;
    1442:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1444:	4814      	ldr	r0, [pc, #80]	; (1498 <udi_msc_cbw_received+0x254>)
    1446:	2120      	movs	r1, #32
    1448:	18c2      	adds	r2, r0, r3
    144a:	7411      	strb	r1, [r2, #16]
		i++;
    144c:	3301      	adds	r3, #1
    144e:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1450:	2b10      	cmp	r3, #16
    1452:	d1f9      	bne.n	1448 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1454:	0021      	movs	r1, r4
    1456:	4810      	ldr	r0, [pc, #64]	; (1498 <udi_msc_cbw_received+0x254>)
    1458:	4b0d      	ldr	r3, [pc, #52]	; (1490 <udi_msc_cbw_received+0x24c>)
    145a:	4798      	blx	r3
    145c:	e703      	b.n	1266 <udi_msc_cbw_received+0x22>
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	43425355 	.word	0x43425355
    1464:	200001ac 	.word	0x200001ac
    1468:	200001a0 	.word	0x200001a0
    146c:	00000f1d 	.word	0x00000f1d
    1470:	00000f49 	.word	0x00000f49
    1474:	200001d0 	.word	0x200001d0
    1478:	20000048 	.word	0x20000048
    147c:	00007478 	.word	0x00007478
    1480:	0000100d 	.word	0x0000100d
    1484:	00000f75 	.word	0x00000f75
    1488:	00001021 	.word	0x00001021
    148c:	200001d4 	.word	0x200001d4
    1490:	0000106d 	.word	0x0000106d
    1494:	00005ff9 	.word	0x00005ff9
    1498:	20000058 	.word	0x20000058
    149c:	00006011 	.word	0x00006011
    14a0:	00006be1 	.word	0x00006be1
    14a4:	0000110d 	.word	0x0000110d
    14a8:	00005f9d 	.word	0x00005f9d
    14ac:	00001059 	.word	0x00001059
    14b0:	000010a5 	.word	0x000010a5
    14b4:	000010b9 	.word	0x000010b9
    14b8:	000010cd 	.word	0x000010cd
    14bc:	200001a4 	.word	0x200001a4
    14c0:	00005fb5 	.word	0x00005fb5
    14c4:	00005fd1 	.word	0x00005fd1
    14c8:	000011bd 	.word	0x000011bd
    14cc:	00000fd5 	.word	0x00000fd5

000014d0 <udi_msc_disable>:
{
    14d0:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    14d2:	2200      	movs	r2, #0
    14d4:	4b04      	ldr	r3, [pc, #16]	; (14e8 <udi_msc_disable+0x18>)
    14d6:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    14d8:	2301      	movs	r3, #1
    14da:	4a04      	ldr	r2, [pc, #16]	; (14ec <udi_msc_disable+0x1c>)
    14dc:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    14de:	4a04      	ldr	r2, [pc, #16]	; (14f0 <udi_msc_disable+0x20>)
    14e0:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    14e2:	4b04      	ldr	r3, [pc, #16]	; (14f4 <udi_msc_disable+0x24>)
    14e4:	4798      	blx	r3
}
    14e6:	bd10      	pop	{r4, pc}
    14e8:	200001a2 	.word	0x200001a2
    14ec:	20000044 	.word	0x20000044
    14f0:	20000045 	.word	0x20000045
    14f4:	000037f1 	.word	0x000037f1

000014f8 <udi_msc_setup>:
{
    14f8:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    14fa:	4b20      	ldr	r3, [pc, #128]	; (157c <udi_msc_setup+0x84>)
    14fc:	781a      	ldrb	r2, [r3, #0]
    14fe:	b253      	sxtb	r3, r2
    1500:	2b00      	cmp	r3, #0
    1502:	db05      	blt.n	1510 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1504:	2360      	movs	r3, #96	; 0x60
    1506:	4013      	ands	r3, r2
	return false;	// Not supported request
    1508:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    150a:	2b20      	cmp	r3, #32
    150c:	d018      	beq.n	1540 <udi_msc_setup+0x48>
}
    150e:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1510:	2360      	movs	r3, #96	; 0x60
    1512:	4013      	ands	r3, r2
	return false;	// Not supported request
    1514:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1516:	2b20      	cmp	r3, #32
    1518:	d1f9      	bne.n	150e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    151a:	4b18      	ldr	r3, [pc, #96]	; (157c <udi_msc_setup+0x84>)
    151c:	785b      	ldrb	r3, [r3, #1]
    151e:	2bfe      	cmp	r3, #254	; 0xfe
    1520:	d127      	bne.n	1572 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1522:	4b16      	ldr	r3, [pc, #88]	; (157c <udi_msc_setup+0x84>)
    1524:	88db      	ldrh	r3, [r3, #6]
    1526:	2b01      	cmp	r3, #1
    1528:	d1f1      	bne.n	150e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    152a:	4b14      	ldr	r3, [pc, #80]	; (157c <udi_msc_setup+0x84>)
    152c:	885b      	ldrh	r3, [r3, #2]
    152e:	2b00      	cmp	r3, #0
    1530:	d1ed      	bne.n	150e <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1532:	4b12      	ldr	r3, [pc, #72]	; (157c <udi_msc_setup+0x84>)
    1534:	4a12      	ldr	r2, [pc, #72]	; (1580 <udi_msc_setup+0x88>)
    1536:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1538:	2201      	movs	r2, #1
    153a:	819a      	strh	r2, [r3, #12]
				return true;
    153c:	3001      	adds	r0, #1
    153e:	e7e6      	b.n	150e <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1540:	4b0e      	ldr	r3, [pc, #56]	; (157c <udi_msc_setup+0x84>)
    1542:	785b      	ldrb	r3, [r3, #1]
    1544:	2bff      	cmp	r3, #255	; 0xff
    1546:	d116      	bne.n	1576 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1548:	4b0c      	ldr	r3, [pc, #48]	; (157c <udi_msc_setup+0x84>)
    154a:	88db      	ldrh	r3, [r3, #6]
    154c:	2b00      	cmp	r3, #0
    154e:	d1de      	bne.n	150e <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1550:	4b0a      	ldr	r3, [pc, #40]	; (157c <udi_msc_setup+0x84>)
    1552:	885b      	ldrh	r3, [r3, #2]
    1554:	2b00      	cmp	r3, #0
    1556:	d1da      	bne.n	150e <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1558:	4a0a      	ldr	r2, [pc, #40]	; (1584 <udi_msc_setup+0x8c>)
    155a:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    155c:	4a0a      	ldr	r2, [pc, #40]	; (1588 <udi_msc_setup+0x90>)
    155e:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1560:	3002      	adds	r0, #2
    1562:	4c0a      	ldr	r4, [pc, #40]	; (158c <udi_msc_setup+0x94>)
    1564:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1566:	2081      	movs	r0, #129	; 0x81
    1568:	47a0      	blx	r4
				udi_msc_cbw_wait();
    156a:	4b09      	ldr	r3, [pc, #36]	; (1590 <udi_msc_setup+0x98>)
    156c:	4798      	blx	r3
				return true;
    156e:	2001      	movs	r0, #1
    1570:	e7cd      	b.n	150e <udi_msc_setup+0x16>
	return false;	// Not supported request
    1572:	2000      	movs	r0, #0
    1574:	e7cb      	b.n	150e <udi_msc_setup+0x16>
    1576:	2000      	movs	r0, #0
    1578:	e7c9      	b.n	150e <udi_msc_setup+0x16>
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	20000534 	.word	0x20000534
    1580:	200001d0 	.word	0x200001d0
    1584:	200001a0 	.word	0x200001a0
    1588:	200001a2 	.word	0x200001a2
    158c:	00002f01 	.word	0x00002f01
    1590:	00000e21 	.word	0x00000e21

00001594 <udi_msc_process_trans>:
{
    1594:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    1596:	4b1e      	ldr	r3, [pc, #120]	; (1610 <udi_msc_process_trans+0x7c>)
    1598:	781c      	ldrb	r4, [r3, #0]
    159a:	2c00      	cmp	r4, #0
    159c:	d030      	beq.n	1600 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    159e:	2300      	movs	r3, #0
    15a0:	4a1b      	ldr	r2, [pc, #108]	; (1610 <udi_msc_process_trans+0x7c>)
    15a2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    15a4:	4a1b      	ldr	r2, [pc, #108]	; (1614 <udi_msc_process_trans+0x80>)
    15a6:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    15a8:	4b1b      	ldr	r3, [pc, #108]	; (1618 <udi_msc_process_trans+0x84>)
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d015      	beq.n	15dc <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    15b0:	4b1a      	ldr	r3, [pc, #104]	; (161c <udi_msc_process_trans+0x88>)
    15b2:	881a      	ldrh	r2, [r3, #0]
    15b4:	4b1a      	ldr	r3, [pc, #104]	; (1620 <udi_msc_process_trans+0x8c>)
    15b6:	6819      	ldr	r1, [r3, #0]
    15b8:	4b1a      	ldr	r3, [pc, #104]	; (1624 <udi_msc_process_trans+0x90>)
    15ba:	7b58      	ldrb	r0, [r3, #13]
    15bc:	4b1a      	ldr	r3, [pc, #104]	; (1628 <udi_msc_process_trans+0x94>)
    15be:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    15c0:	4b14      	ldr	r3, [pc, #80]	; (1614 <udi_msc_process_trans+0x80>)
    15c2:	781b      	ldrb	r3, [r3, #0]
    15c4:	b2db      	uxtb	r3, r3
    15c6:	2b00      	cmp	r3, #0
    15c8:	d111      	bne.n	15ee <udi_msc_process_trans+0x5a>
	switch (status) {
    15ca:	2802      	cmp	r0, #2
    15cc:	d01d      	beq.n	160a <udi_msc_process_trans+0x76>
    15ce:	2803      	cmp	r0, #3
    15d0:	d018      	beq.n	1604 <udi_msc_process_trans+0x70>
    15d2:	2800      	cmp	r0, #0
    15d4:	d010      	beq.n	15f8 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    15d6:	4b15      	ldr	r3, [pc, #84]	; (162c <udi_msc_process_trans+0x98>)
    15d8:	4798      	blx	r3
		break;
    15da:	e00f      	b.n	15fc <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    15dc:	4b0f      	ldr	r3, [pc, #60]	; (161c <udi_msc_process_trans+0x88>)
    15de:	881a      	ldrh	r2, [r3, #0]
    15e0:	4b0f      	ldr	r3, [pc, #60]	; (1620 <udi_msc_process_trans+0x8c>)
    15e2:	6819      	ldr	r1, [r3, #0]
    15e4:	4b0f      	ldr	r3, [pc, #60]	; (1624 <udi_msc_process_trans+0x90>)
    15e6:	7b58      	ldrb	r0, [r3, #13]
    15e8:	4b11      	ldr	r3, [pc, #68]	; (1630 <udi_msc_process_trans+0x9c>)
    15ea:	4798      	blx	r3
    15ec:	e7e8      	b.n	15c0 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    15ee:	2100      	movs	r1, #0
    15f0:	4a08      	ldr	r2, [pc, #32]	; (1614 <udi_msc_process_trans+0x80>)
    15f2:	7011      	strb	r1, [r2, #0]
		return true;
    15f4:	001c      	movs	r4, r3
    15f6:	e003      	b.n	1600 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    15f8:	4b0e      	ldr	r3, [pc, #56]	; (1634 <udi_msc_process_trans+0xa0>)
    15fa:	4798      	blx	r3
	udi_msc_csw_process();
    15fc:	4b0e      	ldr	r3, [pc, #56]	; (1638 <udi_msc_process_trans+0xa4>)
    15fe:	4798      	blx	r3
}
    1600:	0020      	movs	r0, r4
    1602:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1604:	4b0d      	ldr	r3, [pc, #52]	; (163c <udi_msc_process_trans+0xa8>)
    1606:	4798      	blx	r3
		break;
    1608:	e7f8      	b.n	15fc <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    160a:	4b0d      	ldr	r3, [pc, #52]	; (1640 <udi_msc_process_trans+0xac>)
    160c:	4798      	blx	r3
		break;
    160e:	e7f5      	b.n	15fc <udi_msc_process_trans+0x68>
    1610:	200001a2 	.word	0x200001a2
    1614:	20000045 	.word	0x20000045
    1618:	200001a1 	.word	0x200001a1
    161c:	200001cc 	.word	0x200001cc
    1620:	2000019c 	.word	0x2000019c
    1624:	200001ac 	.word	0x200001ac
    1628:	00006021 	.word	0x00006021
    162c:	00001059 	.word	0x00001059
    1630:	00006055 	.word	0x00006055
    1634:	000010cd 	.word	0x000010cd
    1638:	00000f75 	.word	0x00000f75
    163c:	000010a5 	.word	0x000010a5
    1640:	000010b9 	.word	0x000010b9

00001644 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1644:	b530      	push	{r4, r5, lr}
    1646:	b083      	sub	sp, #12
    1648:	0005      	movs	r5, r0
    164a:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    164c:	4a1d      	ldr	r2, [pc, #116]	; (16c4 <udi_msc_trans_block+0x80>)
    164e:	7810      	ldrb	r0, [r2, #0]
    1650:	b2c0      	uxtb	r0, r0
    1652:	2800      	cmp	r0, #0
    1654:	d013      	beq.n	167e <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1656:	2000      	movs	r0, #0
    1658:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    165a:	3081      	adds	r0, #129	; 0x81
    165c:	2d00      	cmp	r5, #0
    165e:	d100      	bne.n	1662 <udi_msc_trans_block+0x1e>
    1660:	387f      	subs	r0, #127	; 0x7f
    1662:	2b00      	cmp	r3, #0
    1664:	d00d      	beq.n	1682 <udi_msc_trans_block+0x3e>
    1666:	9300      	str	r3, [sp, #0]
    1668:	0023      	movs	r3, r4
    166a:	000a      	movs	r2, r1
    166c:	2100      	movs	r1, #0
    166e:	4d16      	ldr	r5, [pc, #88]	; (16c8 <udi_msc_trans_block+0x84>)
    1670:	47a8      	blx	r5
    1672:	2800      	cmp	r0, #0
    1674:	d020      	beq.n	16b8 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1676:	4b15      	ldr	r3, [pc, #84]	; (16cc <udi_msc_trans_block+0x88>)
    1678:	689a      	ldr	r2, [r3, #8]
    167a:	1b14      	subs	r4, r2, r4
    167c:	609c      	str	r4, [r3, #8]
	return true;
}
    167e:	b003      	add	sp, #12
    1680:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1682:	4b13      	ldr	r3, [pc, #76]	; (16d0 <udi_msc_trans_block+0x8c>)
    1684:	9300      	str	r3, [sp, #0]
    1686:	0023      	movs	r3, r4
    1688:	000a      	movs	r2, r1
    168a:	2100      	movs	r1, #0
    168c:	4d0e      	ldr	r5, [pc, #56]	; (16c8 <udi_msc_trans_block+0x84>)
    168e:	47a8      	blx	r5
    1690:	2800      	cmp	r0, #0
    1692:	d011      	beq.n	16b8 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1694:	4a0b      	ldr	r2, [pc, #44]	; (16c4 <udi_msc_trans_block+0x80>)
    1696:	7813      	ldrb	r3, [r2, #0]
    1698:	2b00      	cmp	r3, #0
    169a:	d0fc      	beq.n	1696 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    169c:	4b0d      	ldr	r3, [pc, #52]	; (16d4 <udi_msc_trans_block+0x90>)
    169e:	781b      	ldrb	r3, [r3, #0]
			return false;
    16a0:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    16a2:	2b00      	cmp	r3, #0
    16a4:	d1eb      	bne.n	167e <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    16a6:	4b09      	ldr	r3, [pc, #36]	; (16cc <udi_msc_trans_block+0x88>)
    16a8:	689a      	ldr	r2, [r3, #8]
    16aa:	1b14      	subs	r4, r2, r4
    16ac:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    16ae:	4b09      	ldr	r3, [pc, #36]	; (16d4 <udi_msc_trans_block+0x90>)
    16b0:	7818      	ldrb	r0, [r3, #0]
    16b2:	2301      	movs	r3, #1
    16b4:	4058      	eors	r0, r3
    16b6:	e7e2      	b.n	167e <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    16b8:	2201      	movs	r2, #1
    16ba:	4b02      	ldr	r3, [pc, #8]	; (16c4 <udi_msc_trans_block+0x80>)
    16bc:	701a      	strb	r2, [r3, #0]
		return false;
    16be:	2000      	movs	r0, #0
    16c0:	e7dd      	b.n	167e <udi_msc_trans_block+0x3a>
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	20000044 	.word	0x20000044
    16c8:	0000328d 	.word	0x0000328d
    16cc:	20000048 	.word	0x20000048
    16d0:	00000e05 	.word	0x00000e05
    16d4:	200002f0 	.word	0x200002f0

000016d8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    16d8:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    16da:	4b11      	ldr	r3, [pc, #68]	; (1720 <udc_next_desc_in_iface+0x48>)
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    16e0:	7894      	ldrb	r4, [r2, #2]
    16e2:	78d3      	ldrb	r3, [r2, #3]
    16e4:	021b      	lsls	r3, r3, #8
    16e6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    16e8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    16ea:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    16ec:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    16ee:	4290      	cmp	r0, r2
    16f0:	d210      	bcs.n	1714 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    16f2:	7843      	ldrb	r3, [r0, #1]
    16f4:	2b04      	cmp	r3, #4
    16f6:	d00f      	beq.n	1718 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    16f8:	428b      	cmp	r3, r1
    16fa:	d00a      	beq.n	1712 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    16fc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    16fe:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1700:	4290      	cmp	r0, r2
    1702:	d205      	bcs.n	1710 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1704:	7843      	ldrb	r3, [r0, #1]
    1706:	2b04      	cmp	r3, #4
    1708:	d008      	beq.n	171c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    170a:	428b      	cmp	r3, r1
    170c:	d1f6      	bne.n	16fc <udc_next_desc_in_iface+0x24>
    170e:	e000      	b.n	1712 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1710:	2000      	movs	r0, #0
}
    1712:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1714:	2000      	movs	r0, #0
    1716:	e7fc      	b.n	1712 <udc_next_desc_in_iface+0x3a>
    1718:	2000      	movs	r0, #0
    171a:	e7fa      	b.n	1712 <udc_next_desc_in_iface+0x3a>
    171c:	2000      	movs	r0, #0
    171e:	e7f8      	b.n	1712 <udc_next_desc_in_iface+0x3a>
    1720:	200001f4 	.word	0x200001f4

00001724 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1724:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1726:	4b03      	ldr	r3, [pc, #12]	; (1734 <udc_valid_address+0x10>)
    1728:	885b      	ldrh	r3, [r3, #2]
    172a:	207f      	movs	r0, #127	; 0x7f
    172c:	4018      	ands	r0, r3
    172e:	4b02      	ldr	r3, [pc, #8]	; (1738 <udc_valid_address+0x14>)
    1730:	4798      	blx	r3
}
    1732:	bd10      	pop	{r4, pc}
    1734:	20000534 	.word	0x20000534
    1738:	00003465 	.word	0x00003465

0000173c <udc_update_iface_desc>:
{
    173c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    173e:	4b19      	ldr	r3, [pc, #100]	; (17a4 <udc_update_iface_desc+0x68>)
    1740:	781b      	ldrb	r3, [r3, #0]
		return false;
    1742:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1744:	2b00      	cmp	r3, #0
    1746:	d029      	beq.n	179c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1748:	4b17      	ldr	r3, [pc, #92]	; (17a8 <udc_update_iface_desc+0x6c>)
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	791c      	ldrb	r4, [r3, #4]
    1750:	4284      	cmp	r4, r0
    1752:	d923      	bls.n	179c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1754:	4a15      	ldr	r2, [pc, #84]	; (17ac <udc_update_iface_desc+0x70>)
    1756:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1758:	789a      	ldrb	r2, [r3, #2]
    175a:	78dc      	ldrb	r4, [r3, #3]
    175c:	0224      	lsls	r4, r4, #8
    175e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1760:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1762:	42a3      	cmp	r3, r4
    1764:	d21c      	bcs.n	17a0 <udc_update_iface_desc+0x64>
    1766:	2500      	movs	r5, #0
    1768:	2601      	movs	r6, #1
    176a:	e007      	b.n	177c <udc_update_iface_desc+0x40>
    176c:	4a0f      	ldr	r2, [pc, #60]	; (17ac <udc_update_iface_desc+0x70>)
    176e:	6013      	str	r3, [r2, #0]
    1770:	e00f      	b.n	1792 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1772:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1774:	189b      	adds	r3, r3, r2
    1776:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1778:	42a3      	cmp	r3, r4
    177a:	d20c      	bcs.n	1796 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    177c:	785a      	ldrb	r2, [r3, #1]
    177e:	2a04      	cmp	r2, #4
    1780:	d1f7      	bne.n	1772 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1782:	789a      	ldrb	r2, [r3, #2]
    1784:	4282      	cmp	r2, r0
    1786:	d1f4      	bne.n	1772 <udc_update_iface_desc+0x36>
    1788:	78da      	ldrb	r2, [r3, #3]
    178a:	428a      	cmp	r2, r1
    178c:	d1f1      	bne.n	1772 <udc_update_iface_desc+0x36>
    178e:	2d00      	cmp	r5, #0
    1790:	d1ec      	bne.n	176c <udc_update_iface_desc+0x30>
				return true; // Interface found
    1792:	2201      	movs	r2, #1
    1794:	e002      	b.n	179c <udc_update_iface_desc+0x60>
    1796:	4a05      	ldr	r2, [pc, #20]	; (17ac <udc_update_iface_desc+0x70>)
    1798:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    179a:	2200      	movs	r2, #0
}
    179c:	0010      	movs	r0, r2
    179e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    17a0:	2200      	movs	r2, #0
    17a2:	e7fb      	b.n	179c <udc_update_iface_desc+0x60>
    17a4:	200001f0 	.word	0x200001f0
    17a8:	200001f4 	.word	0x200001f4
    17ac:	200001f8 	.word	0x200001f8

000017b0 <udc_iface_disable>:
{
    17b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17b2:	46c6      	mov	lr, r8
    17b4:	b500      	push	{lr}
    17b6:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    17b8:	2100      	movs	r1, #0
    17ba:	4b13      	ldr	r3, [pc, #76]	; (1808 <udc_iface_disable+0x58>)
    17bc:	4798      	blx	r3
    17be:	1e05      	subs	r5, r0, #0
    17c0:	d103      	bne.n	17ca <udc_iface_disable+0x1a>
}
    17c2:	0028      	movs	r0, r5
    17c4:	bc04      	pop	{r2}
    17c6:	4690      	mov	r8, r2
    17c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    17ca:	4b10      	ldr	r3, [pc, #64]	; (180c <udc_iface_disable+0x5c>)
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	685b      	ldr	r3, [r3, #4]
    17d0:	00a2      	lsls	r2, r4, #2
    17d2:	58d3      	ldr	r3, [r2, r3]
    17d4:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    17d6:	68db      	ldr	r3, [r3, #12]
    17d8:	4798      	blx	r3
    17da:	0001      	movs	r1, r0
    17dc:	0020      	movs	r0, r4
    17de:	4b0a      	ldr	r3, [pc, #40]	; (1808 <udc_iface_disable+0x58>)
    17e0:	4798      	blx	r3
    17e2:	1e05      	subs	r5, r0, #0
    17e4:	d0ed      	beq.n	17c2 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    17e6:	4b0a      	ldr	r3, [pc, #40]	; (1810 <udc_iface_disable+0x60>)
    17e8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17ea:	4e0a      	ldr	r6, [pc, #40]	; (1814 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    17ec:	4f0a      	ldr	r7, [pc, #40]	; (1818 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17ee:	2105      	movs	r1, #5
    17f0:	0020      	movs	r0, r4
    17f2:	47b0      	blx	r6
    17f4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    17f6:	d002      	beq.n	17fe <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    17f8:	7880      	ldrb	r0, [r0, #2]
    17fa:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    17fc:	e7f7      	b.n	17ee <udc_iface_disable+0x3e>
	udi_api->disable();
    17fe:	4643      	mov	r3, r8
    1800:	685b      	ldr	r3, [r3, #4]
    1802:	4798      	blx	r3
	return true;
    1804:	e7dd      	b.n	17c2 <udc_iface_disable+0x12>
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	0000173d 	.word	0x0000173d
    180c:	200001f4 	.word	0x200001f4
    1810:	200001f8 	.word	0x200001f8
    1814:	000016d9 	.word	0x000016d9
    1818:	00002f4d 	.word	0x00002f4d

0000181c <udc_iface_enable>:
{
    181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    181e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1820:	4b0f      	ldr	r3, [pc, #60]	; (1860 <udc_iface_enable+0x44>)
    1822:	4798      	blx	r3
    1824:	2800      	cmp	r0, #0
    1826:	d019      	beq.n	185c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1828:	4b0e      	ldr	r3, [pc, #56]	; (1864 <udc_iface_enable+0x48>)
    182a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    182c:	4e0e      	ldr	r6, [pc, #56]	; (1868 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    182e:	4f0f      	ldr	r7, [pc, #60]	; (186c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1830:	2105      	movs	r1, #5
    1832:	0020      	movs	r0, r4
    1834:	47b0      	blx	r6
    1836:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1838:	d009      	beq.n	184e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    183a:	7903      	ldrb	r3, [r0, #4]
    183c:	7942      	ldrb	r2, [r0, #5]
    183e:	0212      	lsls	r2, r2, #8
    1840:	431a      	orrs	r2, r3
    1842:	78c1      	ldrb	r1, [r0, #3]
    1844:	7880      	ldrb	r0, [r0, #2]
    1846:	47b8      	blx	r7
    1848:	2800      	cmp	r0, #0
    184a:	d1f1      	bne.n	1830 <udc_iface_enable+0x14>
    184c:	e006      	b.n	185c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    184e:	4b08      	ldr	r3, [pc, #32]	; (1870 <udc_iface_enable+0x54>)
    1850:	681b      	ldr	r3, [r3, #0]
    1852:	685b      	ldr	r3, [r3, #4]
    1854:	00ad      	lsls	r5, r5, #2
    1856:	58eb      	ldr	r3, [r5, r3]
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	4798      	blx	r3
}
    185c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	0000173d 	.word	0x0000173d
    1864:	200001f8 	.word	0x200001f8
    1868:	000016d9 	.word	0x000016d9
    186c:	00002fa5 	.word	0x00002fa5
    1870:	200001f4 	.word	0x200001f4

00001874 <udc_start>:
{
    1874:	b510      	push	{r4, lr}
	udd_enable();
    1876:	4b01      	ldr	r3, [pc, #4]	; (187c <udc_start+0x8>)
    1878:	4798      	blx	r3
}
    187a:	bd10      	pop	{r4, pc}
    187c:	00003571 	.word	0x00003571

00001880 <udc_reset>:
{
    1880:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1882:	4b0e      	ldr	r3, [pc, #56]	; (18bc <udc_reset+0x3c>)
    1884:	781b      	ldrb	r3, [r3, #0]
    1886:	2b00      	cmp	r3, #0
    1888:	d011      	beq.n	18ae <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    188a:	4b0d      	ldr	r3, [pc, #52]	; (18c0 <udc_reset+0x40>)
    188c:	681b      	ldr	r3, [r3, #0]
    188e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1890:	791b      	ldrb	r3, [r3, #4]
    1892:	2b00      	cmp	r3, #0
    1894:	d00b      	beq.n	18ae <udc_reset+0x2e>
    1896:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1898:	4e0a      	ldr	r6, [pc, #40]	; (18c4 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    189a:	4d09      	ldr	r5, [pc, #36]	; (18c0 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    189c:	0020      	movs	r0, r4
    189e:	47b0      	blx	r6
				iface_num++) {
    18a0:	3401      	adds	r4, #1
    18a2:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18a4:	682b      	ldr	r3, [r5, #0]
    18a6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    18a8:	791b      	ldrb	r3, [r3, #4]
    18aa:	42a3      	cmp	r3, r4
    18ac:	d8f6      	bhi.n	189c <udc_reset+0x1c>
	udc_num_configuration = 0;
    18ae:	2200      	movs	r2, #0
    18b0:	4b02      	ldr	r3, [pc, #8]	; (18bc <udc_reset+0x3c>)
    18b2:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    18b4:	3201      	adds	r2, #1
    18b6:	4b04      	ldr	r3, [pc, #16]	; (18c8 <udc_reset+0x48>)
    18b8:	801a      	strh	r2, [r3, #0]
}
    18ba:	bd70      	pop	{r4, r5, r6, pc}
    18bc:	200001f0 	.word	0x200001f0
    18c0:	200001f4 	.word	0x200001f4
    18c4:	000017b1 	.word	0x000017b1
    18c8:	200001e6 	.word	0x200001e6

000018cc <udc_sof_notify>:
{
    18cc:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    18ce:	4b0e      	ldr	r3, [pc, #56]	; (1908 <udc_sof_notify+0x3c>)
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	2b00      	cmp	r3, #0
    18d4:	d017      	beq.n	1906 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18d6:	4b0d      	ldr	r3, [pc, #52]	; (190c <udc_sof_notify+0x40>)
    18d8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    18da:	681a      	ldr	r2, [r3, #0]
    18dc:	7912      	ldrb	r2, [r2, #4]
    18de:	2a00      	cmp	r2, #0
    18e0:	d011      	beq.n	1906 <udc_sof_notify+0x3a>
    18e2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18e4:	4d09      	ldr	r5, [pc, #36]	; (190c <udc_sof_notify+0x40>)
    18e6:	e006      	b.n	18f6 <udc_sof_notify+0x2a>
				iface_num++) {
    18e8:	3401      	adds	r4, #1
    18ea:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    18ec:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    18ee:	681a      	ldr	r2, [r3, #0]
    18f0:	7912      	ldrb	r2, [r2, #4]
    18f2:	42a2      	cmp	r2, r4
    18f4:	d907      	bls.n	1906 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    18f6:	685b      	ldr	r3, [r3, #4]
    18f8:	00a2      	lsls	r2, r4, #2
    18fa:	58d3      	ldr	r3, [r2, r3]
    18fc:	691b      	ldr	r3, [r3, #16]
    18fe:	2b00      	cmp	r3, #0
    1900:	d0f2      	beq.n	18e8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1902:	4798      	blx	r3
    1904:	e7f0      	b.n	18e8 <udc_sof_notify+0x1c>
}
    1906:	bd70      	pop	{r4, r5, r6, pc}
    1908:	200001f0 	.word	0x200001f0
    190c:	200001f4 	.word	0x200001f4

00001910 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1912:	4bac      	ldr	r3, [pc, #688]	; (1bc4 <udc_process_setup+0x2b4>)
    1914:	2200      	movs	r2, #0
    1916:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1918:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    191a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    191c:	781b      	ldrb	r3, [r3, #0]
    191e:	b25a      	sxtb	r2, r3
    1920:	2a00      	cmp	r2, #0
    1922:	db13      	blt.n	194c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1924:	2260      	movs	r2, #96	; 0x60
    1926:	421a      	tst	r2, r3
    1928:	d100      	bne.n	192c <udc_process_setup+0x1c>
    192a:	e0da      	b.n	1ae2 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    192c:	4ba5      	ldr	r3, [pc, #660]	; (1bc4 <udc_process_setup+0x2b4>)
    192e:	781a      	ldrb	r2, [r3, #0]
    1930:	231f      	movs	r3, #31
    1932:	4013      	ands	r3, r2
    1934:	2b01      	cmp	r3, #1
    1936:	d100      	bne.n	193a <udc_process_setup+0x2a>
    1938:	e176      	b.n	1c28 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    193a:	4ba2      	ldr	r3, [pc, #648]	; (1bc4 <udc_process_setup+0x2b4>)
    193c:	781a      	ldrb	r2, [r3, #0]
    193e:	231f      	movs	r3, #31
    1940:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1942:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1944:	2b02      	cmp	r3, #2
    1946:	d100      	bne.n	194a <udc_process_setup+0x3a>
    1948:	e1cc      	b.n	1ce4 <udc_process_setup+0x3d4>
#endif
}
    194a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    194c:	4a9d      	ldr	r2, [pc, #628]	; (1bc4 <udc_process_setup+0x2b4>)
    194e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1950:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1952:	2a00      	cmp	r2, #0
    1954:	d0f9      	beq.n	194a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1956:	2160      	movs	r1, #96	; 0x60
    1958:	4219      	tst	r1, r3
    195a:	d1e7      	bne.n	192c <udc_process_setup+0x1c>
    195c:	211f      	movs	r1, #31
    195e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1960:	d108      	bne.n	1974 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1962:	4998      	ldr	r1, [pc, #608]	; (1bc4 <udc_process_setup+0x2b4>)
    1964:	7849      	ldrb	r1, [r1, #1]
    1966:	2906      	cmp	r1, #6
    1968:	d023      	beq.n	19b2 <udc_process_setup+0xa2>
    196a:	2908      	cmp	r1, #8
    196c:	d100      	bne.n	1970 <udc_process_setup+0x60>
    196e:	e087      	b.n	1a80 <udc_process_setup+0x170>
    1970:	2900      	cmp	r1, #0
    1972:	d017      	beq.n	19a4 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1974:	2b01      	cmp	r3, #1
    1976:	d100      	bne.n	197a <udc_process_setup+0x6a>
    1978:	e08a      	b.n	1a90 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    197a:	2b02      	cmp	r3, #2
    197c:	d1d6      	bne.n	192c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    197e:	4b91      	ldr	r3, [pc, #580]	; (1bc4 <udc_process_setup+0x2b4>)
    1980:	785b      	ldrb	r3, [r3, #1]
	return false;
    1982:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1984:	2b00      	cmp	r3, #0
    1986:	d000      	beq.n	198a <udc_process_setup+0x7a>
    1988:	e1a8      	b.n	1cdc <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    198a:	2a02      	cmp	r2, #2
    198c:	d1d5      	bne.n	193a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    198e:	4b8d      	ldr	r3, [pc, #564]	; (1bc4 <udc_process_setup+0x2b4>)
    1990:	7918      	ldrb	r0, [r3, #4]
    1992:	4b8d      	ldr	r3, [pc, #564]	; (1bc8 <udc_process_setup+0x2b8>)
    1994:	4798      	blx	r3
    1996:	4b8d      	ldr	r3, [pc, #564]	; (1bcc <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1998:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    199a:	2102      	movs	r1, #2
    199c:	0018      	movs	r0, r3
    199e:	4b8c      	ldr	r3, [pc, #560]	; (1bd0 <udc_process_setup+0x2c0>)
    19a0:	4798      	blx	r3
    19a2:	e0ff      	b.n	1ba4 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    19a4:	2a02      	cmp	r2, #2
    19a6:	d1c8      	bne.n	193a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    19a8:	3102      	adds	r1, #2
    19aa:	488a      	ldr	r0, [pc, #552]	; (1bd4 <udc_process_setup+0x2c4>)
    19ac:	4b88      	ldr	r3, [pc, #544]	; (1bd0 <udc_process_setup+0x2c0>)
    19ae:	4798      	blx	r3
    19b0:	e0f8      	b.n	1ba4 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    19b2:	4b84      	ldr	r3, [pc, #528]	; (1bc4 <udc_process_setup+0x2b4>)
    19b4:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    19b6:	0a13      	lsrs	r3, r2, #8
    19b8:	2b02      	cmp	r3, #2
    19ba:	d023      	beq.n	1a04 <udc_process_setup+0xf4>
    19bc:	b2d9      	uxtb	r1, r3
    19be:	2902      	cmp	r1, #2
    19c0:	d90f      	bls.n	19e2 <udc_process_setup+0xd2>
    19c2:	2b03      	cmp	r3, #3
    19c4:	d034      	beq.n	1a30 <udc_process_setup+0x120>
    19c6:	2b0f      	cmp	r3, #15
    19c8:	d000      	beq.n	19cc <udc_process_setup+0xbc>
    19ca:	e184      	b.n	1cd6 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    19cc:	4b82      	ldr	r3, [pc, #520]	; (1bd8 <udc_process_setup+0x2c8>)
    19ce:	6898      	ldr	r0, [r3, #8]
    19d0:	2800      	cmp	r0, #0
    19d2:	d0b2      	beq.n	193a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    19d4:	7883      	ldrb	r3, [r0, #2]
    19d6:	78c1      	ldrb	r1, [r0, #3]
    19d8:	0209      	lsls	r1, r1, #8
    19da:	4319      	orrs	r1, r3
    19dc:	4b7c      	ldr	r3, [pc, #496]	; (1bd0 <udc_process_setup+0x2c0>)
    19de:	4798      	blx	r3
    19e0:	e007      	b.n	19f2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    19e2:	2b01      	cmp	r3, #1
    19e4:	d000      	beq.n	19e8 <udc_process_setup+0xd8>
    19e6:	e176      	b.n	1cd6 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    19e8:	4b7b      	ldr	r3, [pc, #492]	; (1bd8 <udc_process_setup+0x2c8>)
    19ea:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    19ec:	7801      	ldrb	r1, [r0, #0]
    19ee:	4b78      	ldr	r3, [pc, #480]	; (1bd0 <udc_process_setup+0x2c0>)
    19f0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    19f2:	4b74      	ldr	r3, [pc, #464]	; (1bc4 <udc_process_setup+0x2b4>)
    19f4:	88da      	ldrh	r2, [r3, #6]
    19f6:	899b      	ldrh	r3, [r3, #12]
    19f8:	4293      	cmp	r3, r2
    19fa:	d800      	bhi.n	19fe <udc_process_setup+0xee>
    19fc:	e0d2      	b.n	1ba4 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    19fe:	4b71      	ldr	r3, [pc, #452]	; (1bc4 <udc_process_setup+0x2b4>)
    1a00:	819a      	strh	r2, [r3, #12]
    1a02:	e0cf      	b.n	1ba4 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1a04:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1a06:	4b74      	ldr	r3, [pc, #464]	; (1bd8 <udc_process_setup+0x2c8>)
    1a08:	681b      	ldr	r3, [r3, #0]
    1a0a:	7c5b      	ldrb	r3, [r3, #17]
    1a0c:	4293      	cmp	r3, r2
    1a0e:	d800      	bhi.n	1a12 <udc_process_setup+0x102>
    1a10:	e793      	b.n	193a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1a12:	4b71      	ldr	r3, [pc, #452]	; (1bd8 <udc_process_setup+0x2c8>)
    1a14:	685b      	ldr	r3, [r3, #4]
    1a16:	00d2      	lsls	r2, r2, #3
    1a18:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1a1a:	7883      	ldrb	r3, [r0, #2]
    1a1c:	78c1      	ldrb	r1, [r0, #3]
    1a1e:	0209      	lsls	r1, r1, #8
    1a20:	4319      	orrs	r1, r3
    1a22:	4b6b      	ldr	r3, [pc, #428]	; (1bd0 <udc_process_setup+0x2c0>)
    1a24:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1a26:	4b67      	ldr	r3, [pc, #412]	; (1bc4 <udc_process_setup+0x2b4>)
    1a28:	689b      	ldr	r3, [r3, #8]
    1a2a:	2202      	movs	r2, #2
    1a2c:	705a      	strb	r2, [r3, #1]
    1a2e:	e7e0      	b.n	19f2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a30:	23ff      	movs	r3, #255	; 0xff
    1a32:	401a      	ands	r2, r3
    1a34:	2a01      	cmp	r2, #1
    1a36:	d020      	beq.n	1a7a <udc_process_setup+0x16a>
    1a38:	2a00      	cmp	r2, #0
    1a3a:	d019      	beq.n	1a70 <udc_process_setup+0x160>
    1a3c:	2a02      	cmp	r2, #2
    1a3e:	d100      	bne.n	1a42 <udc_process_setup+0x132>
    1a40:	e178      	b.n	1d34 <udc_process_setup+0x424>
    1a42:	2a03      	cmp	r2, #3
    1a44:	d000      	beq.n	1a48 <udc_process_setup+0x138>
    1a46:	e771      	b.n	192c <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1a48:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1a4a:	4c64      	ldr	r4, [pc, #400]	; (1bdc <udc_process_setup+0x2cc>)
    1a4c:	4a64      	ldr	r2, [pc, #400]	; (1be0 <udc_process_setup+0x2d0>)
    1a4e:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a50:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1a52:	5ce0      	ldrb	r0, [r4, r3]
    1a54:	8010      	strh	r0, [r2, #0]
    1a56:	3301      	adds	r3, #1
    1a58:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1a5a:	b2d8      	uxtb	r0, r3
    1a5c:	4281      	cmp	r1, r0
    1a5e:	d8f8      	bhi.n	1a52 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1a60:	0049      	lsls	r1, r1, #1
    1a62:	3102      	adds	r1, #2
    1a64:	485e      	ldr	r0, [pc, #376]	; (1be0 <udc_process_setup+0x2d0>)
    1a66:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1a68:	b289      	uxth	r1, r1
    1a6a:	4b59      	ldr	r3, [pc, #356]	; (1bd0 <udc_process_setup+0x2c0>)
    1a6c:	4798      	blx	r3
    1a6e:	e7c0      	b.n	19f2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a70:	2104      	movs	r1, #4
    1a72:	485c      	ldr	r0, [pc, #368]	; (1be4 <udc_process_setup+0x2d4>)
    1a74:	4b56      	ldr	r3, [pc, #344]	; (1bd0 <udc_process_setup+0x2c0>)
    1a76:	4798      	blx	r3
    1a78:	e7bb      	b.n	19f2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1a7a:	4c5b      	ldr	r4, [pc, #364]	; (1be8 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a7c:	2109      	movs	r1, #9
    1a7e:	e7e5      	b.n	1a4c <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a80:	2a01      	cmp	r2, #1
    1a82:	d000      	beq.n	1a86 <udc_process_setup+0x176>
    1a84:	e759      	b.n	193a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1a86:	2101      	movs	r1, #1
    1a88:	4858      	ldr	r0, [pc, #352]	; (1bec <udc_process_setup+0x2dc>)
    1a8a:	4b51      	ldr	r3, [pc, #324]	; (1bd0 <udc_process_setup+0x2c0>)
    1a8c:	4798      	blx	r3
    1a8e:	e089      	b.n	1ba4 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a90:	494c      	ldr	r1, [pc, #304]	; (1bc4 <udc_process_setup+0x2b4>)
    1a92:	7849      	ldrb	r1, [r1, #1]
    1a94:	290a      	cmp	r1, #10
    1a96:	d000      	beq.n	1a9a <udc_process_setup+0x18a>
    1a98:	e76f      	b.n	197a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1a9a:	2a01      	cmp	r2, #1
    1a9c:	d000      	beq.n	1aa0 <udc_process_setup+0x190>
    1a9e:	e0c3      	b.n	1c28 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1aa0:	4b52      	ldr	r3, [pc, #328]	; (1bec <udc_process_setup+0x2dc>)
    1aa2:	781b      	ldrb	r3, [r3, #0]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d100      	bne.n	1aaa <udc_process_setup+0x19a>
    1aa8:	e0be      	b.n	1c28 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1aaa:	4b46      	ldr	r3, [pc, #280]	; (1bc4 <udc_process_setup+0x2b4>)
    1aac:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1aae:	4b50      	ldr	r3, [pc, #320]	; (1bf0 <udc_process_setup+0x2e0>)
    1ab0:	681d      	ldr	r5, [r3, #0]
    1ab2:	682b      	ldr	r3, [r5, #0]
    1ab4:	791b      	ldrb	r3, [r3, #4]
    1ab6:	42a3      	cmp	r3, r4
    1ab8:	d800      	bhi.n	1abc <udc_process_setup+0x1ac>
    1aba:	e0b5      	b.n	1c28 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1abc:	2100      	movs	r1, #0
    1abe:	0020      	movs	r0, r4
    1ac0:	4b4c      	ldr	r3, [pc, #304]	; (1bf4 <udc_process_setup+0x2e4>)
    1ac2:	4798      	blx	r3
    1ac4:	2800      	cmp	r0, #0
    1ac6:	d100      	bne.n	1aca <udc_process_setup+0x1ba>
    1ac8:	e730      	b.n	192c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1aca:	686b      	ldr	r3, [r5, #4]
    1acc:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1ace:	58e3      	ldr	r3, [r4, r3]
    1ad0:	68db      	ldr	r3, [r3, #12]
    1ad2:	4798      	blx	r3
    1ad4:	4b48      	ldr	r3, [pc, #288]	; (1bf8 <udc_process_setup+0x2e8>)
    1ad6:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1ad8:	2101      	movs	r1, #1
    1ada:	0018      	movs	r0, r3
    1adc:	4b3c      	ldr	r3, [pc, #240]	; (1bd0 <udc_process_setup+0x2c0>)
    1ade:	4798      	blx	r3
    1ae0:	e060      	b.n	1ba4 <udc_process_setup+0x294>
    1ae2:	221f      	movs	r2, #31
    1ae4:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ae6:	d15f      	bne.n	1ba8 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ae8:	4a36      	ldr	r2, [pc, #216]	; (1bc4 <udc_process_setup+0x2b4>)
    1aea:	7852      	ldrb	r2, [r2, #1]
    1aec:	2a03      	cmp	r2, #3
    1aee:	d100      	bne.n	1af2 <udc_process_setup+0x1e2>
    1af0:	e0f3      	b.n	1cda <udc_process_setup+0x3ca>
    1af2:	b2d1      	uxtb	r1, r2
    1af4:	2903      	cmp	r1, #3
    1af6:	d93b      	bls.n	1b70 <udc_process_setup+0x260>
    1af8:	2a05      	cmp	r2, #5
    1afa:	d04b      	beq.n	1b94 <udc_process_setup+0x284>
    1afc:	2a09      	cmp	r2, #9
    1afe:	d153      	bne.n	1ba8 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1b00:	4b30      	ldr	r3, [pc, #192]	; (1bc4 <udc_process_setup+0x2b4>)
    1b02:	88db      	ldrh	r3, [r3, #6]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d000      	beq.n	1b0a <udc_process_setup+0x1fa>
    1b08:	e717      	b.n	193a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1b0a:	4b3c      	ldr	r3, [pc, #240]	; (1bfc <udc_process_setup+0x2ec>)
    1b0c:	4798      	blx	r3
    1b0e:	2800      	cmp	r0, #0
    1b10:	d100      	bne.n	1b14 <udc_process_setup+0x204>
    1b12:	e70b      	b.n	192c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b14:	4b2b      	ldr	r3, [pc, #172]	; (1bc4 <udc_process_setup+0x2b4>)
    1b16:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1b18:	4b2f      	ldr	r3, [pc, #188]	; (1bd8 <udc_process_setup+0x2c8>)
    1b1a:	681b      	ldr	r3, [r3, #0]
    1b1c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1b1e:	429a      	cmp	r2, r3
    1b20:	dd00      	ble.n	1b24 <udc_process_setup+0x214>
    1b22:	e703      	b.n	192c <udc_process_setup+0x1c>
	udc_reset();
    1b24:	4b36      	ldr	r3, [pc, #216]	; (1c00 <udc_process_setup+0x2f0>)
    1b26:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1b28:	4b26      	ldr	r3, [pc, #152]	; (1bc4 <udc_process_setup+0x2b4>)
    1b2a:	789b      	ldrb	r3, [r3, #2]
    1b2c:	4a2f      	ldr	r2, [pc, #188]	; (1bec <udc_process_setup+0x2dc>)
    1b2e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1b30:	2b00      	cmp	r3, #0
    1b32:	d037      	beq.n	1ba4 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1b34:	4a33      	ldr	r2, [pc, #204]	; (1c04 <udc_process_setup+0x2f4>)
    1b36:	4694      	mov	ip, r2
    1b38:	4463      	add	r3, ip
    1b3a:	00db      	lsls	r3, r3, #3
    1b3c:	4a26      	ldr	r2, [pc, #152]	; (1bd8 <udc_process_setup+0x2c8>)
    1b3e:	6852      	ldr	r2, [r2, #4]
    1b40:	18d3      	adds	r3, r2, r3
    1b42:	4a2b      	ldr	r2, [pc, #172]	; (1bf0 <udc_process_setup+0x2e0>)
    1b44:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	791b      	ldrb	r3, [r3, #4]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d02a      	beq.n	1ba4 <udc_process_setup+0x294>
    1b4e:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1b50:	4d2d      	ldr	r5, [pc, #180]	; (1c08 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b52:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1b54:	2100      	movs	r1, #0
    1b56:	0020      	movs	r0, r4
    1b58:	47a8      	blx	r5
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d100      	bne.n	1b60 <udc_process_setup+0x250>
    1b5e:	e6e5      	b.n	192c <udc_process_setup+0x1c>
			iface_num++) {
    1b60:	3401      	adds	r4, #1
    1b62:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1b64:	6833      	ldr	r3, [r6, #0]
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	791b      	ldrb	r3, [r3, #4]
    1b6a:	42a3      	cmp	r3, r4
    1b6c:	d8f2      	bhi.n	1b54 <udc_process_setup+0x244>
    1b6e:	e019      	b.n	1ba4 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1b70:	2a01      	cmp	r2, #1
    1b72:	d119      	bne.n	1ba8 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1b74:	4b13      	ldr	r3, [pc, #76]	; (1bc4 <udc_process_setup+0x2b4>)
    1b76:	88db      	ldrh	r3, [r3, #6]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	d000      	beq.n	1b7e <udc_process_setup+0x26e>
    1b7c:	e6dd      	b.n	193a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1b7e:	4b11      	ldr	r3, [pc, #68]	; (1bc4 <udc_process_setup+0x2b4>)
    1b80:	885b      	ldrh	r3, [r3, #2]
    1b82:	2b01      	cmp	r3, #1
    1b84:	d000      	beq.n	1b88 <udc_process_setup+0x278>
    1b86:	e6d8      	b.n	193a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1b88:	4a12      	ldr	r2, [pc, #72]	; (1bd4 <udc_process_setup+0x2c4>)
    1b8a:	8813      	ldrh	r3, [r2, #0]
    1b8c:	2102      	movs	r1, #2
    1b8e:	438b      	bics	r3, r1
    1b90:	8013      	strh	r3, [r2, #0]
    1b92:	e007      	b.n	1ba4 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1b94:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <udc_process_setup+0x2b4>)
    1b96:	88db      	ldrh	r3, [r3, #6]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d000      	beq.n	1b9e <udc_process_setup+0x28e>
    1b9c:	e6cd      	b.n	193a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1b9e:	4a1b      	ldr	r2, [pc, #108]	; (1c0c <udc_process_setup+0x2fc>)
    1ba0:	4b08      	ldr	r3, [pc, #32]	; (1bc4 <udc_process_setup+0x2b4>)
    1ba2:	611a      	str	r2, [r3, #16]
			return true;
    1ba4:	2001      	movs	r0, #1
    1ba6:	e6d0      	b.n	194a <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ba8:	2b01      	cmp	r3, #1
    1baa:	d031      	beq.n	1c10 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1bac:	2b02      	cmp	r3, #2
    1bae:	d000      	beq.n	1bb2 <udc_process_setup+0x2a2>
    1bb0:	e6bc      	b.n	192c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <udc_process_setup+0x2b4>)
    1bb4:	785b      	ldrb	r3, [r3, #1]
    1bb6:	2b01      	cmp	r3, #1
    1bb8:	d06c      	beq.n	1c94 <udc_process_setup+0x384>
    1bba:	2b03      	cmp	r3, #3
    1bbc:	d100      	bne.n	1bc0 <udc_process_setup+0x2b0>
    1bbe:	e078      	b.n	1cb2 <udc_process_setup+0x3a2>
	return false;
    1bc0:	2000      	movs	r0, #0
    1bc2:	e08b      	b.n	1cdc <udc_process_setup+0x3cc>
    1bc4:	20000534 	.word	0x20000534
    1bc8:	000030ad 	.word	0x000030ad
    1bcc:	200001e8 	.word	0x200001e8
    1bd0:	00003485 	.word	0x00003485
    1bd4:	200001e6 	.word	0x200001e6
    1bd8:	200000ac 	.word	0x200000ac
    1bdc:	000075e4 	.word	0x000075e4
    1be0:	2000007c 	.word	0x2000007c
    1be4:	20000098 	.word	0x20000098
    1be8:	2000009c 	.word	0x2000009c
    1bec:	200001f0 	.word	0x200001f0
    1bf0:	200001f4 	.word	0x200001f4
    1bf4:	0000173d 	.word	0x0000173d
    1bf8:	200001ec 	.word	0x200001ec
    1bfc:	00003475 	.word	0x00003475
    1c00:	00001881 	.word	0x00001881
    1c04:	1fffffff 	.word	0x1fffffff
    1c08:	0000181d 	.word	0x0000181d
    1c0c:	00001725 	.word	0x00001725
			switch (udd_g_ctrlreq.req.bRequest) {
    1c10:	4a4a      	ldr	r2, [pc, #296]	; (1d3c <udc_process_setup+0x42c>)
    1c12:	7852      	ldrb	r2, [r2, #1]
    1c14:	2a0b      	cmp	r2, #11
    1c16:	d1c9      	bne.n	1bac <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1c18:	4b48      	ldr	r3, [pc, #288]	; (1d3c <udc_process_setup+0x42c>)
    1c1a:	88db      	ldrh	r3, [r3, #6]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d103      	bne.n	1c28 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1c20:	4b47      	ldr	r3, [pc, #284]	; (1d40 <udc_process_setup+0x430>)
    1c22:	781b      	ldrb	r3, [r3, #0]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d127      	bne.n	1c78 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1c28:	4b45      	ldr	r3, [pc, #276]	; (1d40 <udc_process_setup+0x430>)
    1c2a:	781b      	ldrb	r3, [r3, #0]
	return false;
    1c2c:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d100      	bne.n	1c34 <udc_process_setup+0x324>
    1c32:	e68a      	b.n	194a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c34:	4b41      	ldr	r3, [pc, #260]	; (1d3c <udc_process_setup+0x42c>)
    1c36:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c38:	4b42      	ldr	r3, [pc, #264]	; (1d44 <udc_process_setup+0x434>)
    1c3a:	681d      	ldr	r5, [r3, #0]
    1c3c:	682b      	ldr	r3, [r5, #0]
    1c3e:	791b      	ldrb	r3, [r3, #4]
    1c40:	42a3      	cmp	r3, r4
    1c42:	d800      	bhi.n	1c46 <udc_process_setup+0x336>
    1c44:	e681      	b.n	194a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c46:	2100      	movs	r1, #0
    1c48:	0020      	movs	r0, r4
    1c4a:	4b3f      	ldr	r3, [pc, #252]	; (1d48 <udc_process_setup+0x438>)
    1c4c:	4798      	blx	r3
    1c4e:	2800      	cmp	r0, #0
    1c50:	d100      	bne.n	1c54 <udc_process_setup+0x344>
    1c52:	e672      	b.n	193a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c54:	686b      	ldr	r3, [r5, #4]
    1c56:	00a2      	lsls	r2, r4, #2
    1c58:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c5a:	68eb      	ldr	r3, [r5, #12]
    1c5c:	4798      	blx	r3
    1c5e:	0001      	movs	r1, r0
    1c60:	0020      	movs	r0, r4
    1c62:	4b39      	ldr	r3, [pc, #228]	; (1d48 <udc_process_setup+0x438>)
    1c64:	4798      	blx	r3
    1c66:	2800      	cmp	r0, #0
    1c68:	d100      	bne.n	1c6c <udc_process_setup+0x35c>
    1c6a:	e666      	b.n	193a <udc_process_setup+0x2a>
	return udi_api->setup();
    1c6c:	68ab      	ldr	r3, [r5, #8]
    1c6e:	4798      	blx	r3
		if (udc_req_iface()) {
    1c70:	2800      	cmp	r0, #0
    1c72:	d000      	beq.n	1c76 <udc_process_setup+0x366>
    1c74:	e669      	b.n	194a <udc_process_setup+0x3a>
    1c76:	e660      	b.n	193a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c78:	4b30      	ldr	r3, [pc, #192]	; (1d3c <udc_process_setup+0x42c>)
    1c7a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1c7c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1c7e:	0028      	movs	r0, r5
    1c80:	4b32      	ldr	r3, [pc, #200]	; (1d4c <udc_process_setup+0x43c>)
    1c82:	4798      	blx	r3
    1c84:	2800      	cmp	r0, #0
    1c86:	d100      	bne.n	1c8a <udc_process_setup+0x37a>
    1c88:	e650      	b.n	192c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1c8a:	b2e1      	uxtb	r1, r4
    1c8c:	0028      	movs	r0, r5
    1c8e:	4b30      	ldr	r3, [pc, #192]	; (1d50 <udc_process_setup+0x440>)
    1c90:	4798      	blx	r3
    1c92:	e023      	b.n	1cdc <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1c94:	4b29      	ldr	r3, [pc, #164]	; (1d3c <udc_process_setup+0x42c>)
    1c96:	88db      	ldrh	r3, [r3, #6]
    1c98:	2b00      	cmp	r3, #0
    1c9a:	d000      	beq.n	1c9e <udc_process_setup+0x38e>
    1c9c:	e64d      	b.n	193a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1c9e:	4b27      	ldr	r3, [pc, #156]	; (1d3c <udc_process_setup+0x42c>)
    1ca0:	885b      	ldrh	r3, [r3, #2]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d000      	beq.n	1ca8 <udc_process_setup+0x398>
    1ca6:	e648      	b.n	193a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1ca8:	4b24      	ldr	r3, [pc, #144]	; (1d3c <udc_process_setup+0x42c>)
    1caa:	7918      	ldrb	r0, [r3, #4]
    1cac:	4b29      	ldr	r3, [pc, #164]	; (1d54 <udc_process_setup+0x444>)
    1cae:	4798      	blx	r3
    1cb0:	e014      	b.n	1cdc <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1cb2:	4b22      	ldr	r3, [pc, #136]	; (1d3c <udc_process_setup+0x42c>)
    1cb4:	88db      	ldrh	r3, [r3, #6]
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	d000      	beq.n	1cbc <udc_process_setup+0x3ac>
    1cba:	e63e      	b.n	193a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1cbc:	4b1f      	ldr	r3, [pc, #124]	; (1d3c <udc_process_setup+0x42c>)
    1cbe:	885b      	ldrh	r3, [r3, #2]
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d000      	beq.n	1cc6 <udc_process_setup+0x3b6>
    1cc4:	e639      	b.n	193a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cc6:	4c1d      	ldr	r4, [pc, #116]	; (1d3c <udc_process_setup+0x42c>)
    1cc8:	7920      	ldrb	r0, [r4, #4]
    1cca:	4b23      	ldr	r3, [pc, #140]	; (1d58 <udc_process_setup+0x448>)
    1ccc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1cce:	7920      	ldrb	r0, [r4, #4]
    1cd0:	4b22      	ldr	r3, [pc, #136]	; (1d5c <udc_process_setup+0x44c>)
    1cd2:	4798      	blx	r3
    1cd4:	e002      	b.n	1cdc <udc_process_setup+0x3cc>
		return false;
    1cd6:	2000      	movs	r0, #0
    1cd8:	e000      	b.n	1cdc <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    1cda:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1cdc:	2800      	cmp	r0, #0
    1cde:	d000      	beq.n	1ce2 <udc_process_setup+0x3d2>
    1ce0:	e633      	b.n	194a <udc_process_setup+0x3a>
    1ce2:	e623      	b.n	192c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1ce4:	4b16      	ldr	r3, [pc, #88]	; (1d40 <udc_process_setup+0x430>)
    1ce6:	781b      	ldrb	r3, [r3, #0]
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d100      	bne.n	1cee <udc_process_setup+0x3de>
    1cec:	e62d      	b.n	194a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cee:	4b15      	ldr	r3, [pc, #84]	; (1d44 <udc_process_setup+0x434>)
    1cf0:	681b      	ldr	r3, [r3, #0]
    1cf2:	681a      	ldr	r2, [r3, #0]
    1cf4:	7912      	ldrb	r2, [r2, #4]
    1cf6:	2a00      	cmp	r2, #0
    1cf8:	d01a      	beq.n	1d30 <udc_process_setup+0x420>
    1cfa:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1cfc:	4e12      	ldr	r6, [pc, #72]	; (1d48 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cfe:	4f11      	ldr	r7, [pc, #68]	; (1d44 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d00:	685b      	ldr	r3, [r3, #4]
    1d02:	00aa      	lsls	r2, r5, #2
    1d04:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d06:	68e3      	ldr	r3, [r4, #12]
    1d08:	4798      	blx	r3
    1d0a:	0001      	movs	r1, r0
    1d0c:	0028      	movs	r0, r5
    1d0e:	47b0      	blx	r6
    1d10:	2800      	cmp	r0, #0
    1d12:	d100      	bne.n	1d16 <udc_process_setup+0x406>
    1d14:	e619      	b.n	194a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1d16:	68a3      	ldr	r3, [r4, #8]
    1d18:	4798      	blx	r3
    1d1a:	2800      	cmp	r0, #0
    1d1c:	d000      	beq.n	1d20 <udc_process_setup+0x410>
    1d1e:	e614      	b.n	194a <udc_process_setup+0x3a>
			iface_num++) {
    1d20:	3501      	adds	r5, #1
    1d22:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d24:	683b      	ldr	r3, [r7, #0]
    1d26:	681a      	ldr	r2, [r3, #0]
    1d28:	7912      	ldrb	r2, [r2, #4]
    1d2a:	42aa      	cmp	r2, r5
    1d2c:	d8e8      	bhi.n	1d00 <udc_process_setup+0x3f0>
    1d2e:	e60c      	b.n	194a <udc_process_setup+0x3a>
	return false;
    1d30:	2000      	movs	r0, #0
    1d32:	e60a      	b.n	194a <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1d34:	2103      	movs	r1, #3
		str = udc_string_product_name;
    1d36:	4c0a      	ldr	r4, [pc, #40]	; (1d60 <udc_process_setup+0x450>)
    1d38:	e688      	b.n	1a4c <udc_process_setup+0x13c>
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	20000534 	.word	0x20000534
    1d40:	200001f0 	.word	0x200001f0
    1d44:	200001f4 	.word	0x200001f4
    1d48:	0000173d 	.word	0x0000173d
    1d4c:	000017b1 	.word	0x000017b1
    1d50:	0000181d 	.word	0x0000181d
    1d54:	000031f1 	.word	0x000031f1
    1d58:	00002f01 	.word	0x00002f01
    1d5c:	000030c1 	.word	0x000030c1
    1d60:	200000a8 	.word	0x200000a8

00001d64 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1d64:	4a04      	ldr	r2, [pc, #16]	; (1d78 <_extint_enable+0x14>)
    1d66:	7813      	ldrb	r3, [r2, #0]
    1d68:	2102      	movs	r1, #2
    1d6a:	430b      	orrs	r3, r1
    1d6c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1d6e:	7853      	ldrb	r3, [r2, #1]
    1d70:	b25b      	sxtb	r3, r3
    1d72:	2b00      	cmp	r3, #0
    1d74:	dbfb      	blt.n	1d6e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1d76:	4770      	bx	lr
    1d78:	40001800 	.word	0x40001800

00001d7c <_system_extint_init>:
{
    1d7c:	b500      	push	{lr}
    1d7e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1d80:	4a12      	ldr	r2, [pc, #72]	; (1dcc <_system_extint_init+0x50>)
    1d82:	6993      	ldr	r3, [r2, #24]
    1d84:	2140      	movs	r1, #64	; 0x40
    1d86:	430b      	orrs	r3, r1
    1d88:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1d8a:	a901      	add	r1, sp, #4
    1d8c:	2300      	movs	r3, #0
    1d8e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1d90:	2005      	movs	r0, #5
    1d92:	4b0f      	ldr	r3, [pc, #60]	; (1dd0 <_system_extint_init+0x54>)
    1d94:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1d96:	2005      	movs	r0, #5
    1d98:	4b0e      	ldr	r3, [pc, #56]	; (1dd4 <_system_extint_init+0x58>)
    1d9a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1d9c:	4a0e      	ldr	r2, [pc, #56]	; (1dd8 <_system_extint_init+0x5c>)
    1d9e:	7813      	ldrb	r3, [r2, #0]
    1da0:	2101      	movs	r1, #1
    1da2:	430b      	orrs	r3, r1
    1da4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1da6:	7853      	ldrb	r3, [r2, #1]
    1da8:	b25b      	sxtb	r3, r3
    1daa:	2b00      	cmp	r3, #0
    1dac:	dbfb      	blt.n	1da6 <_system_extint_init+0x2a>
    1dae:	4b0b      	ldr	r3, [pc, #44]	; (1ddc <_system_extint_init+0x60>)
    1db0:	0019      	movs	r1, r3
    1db2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1db4:	2200      	movs	r2, #0
    1db6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1db8:	4299      	cmp	r1, r3
    1dba:	d1fc      	bne.n	1db6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1dbc:	2210      	movs	r2, #16
    1dbe:	4b08      	ldr	r3, [pc, #32]	; (1de0 <_system_extint_init+0x64>)
    1dc0:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1dc2:	4b08      	ldr	r3, [pc, #32]	; (1de4 <_system_extint_init+0x68>)
    1dc4:	4798      	blx	r3
}
    1dc6:	b003      	add	sp, #12
    1dc8:	bd00      	pop	{pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	40000400 	.word	0x40000400
    1dd0:	0000638d 	.word	0x0000638d
    1dd4:	00006301 	.word	0x00006301
    1dd8:	40001800 	.word	0x40001800
    1ddc:	200002f4 	.word	0x200002f4
    1de0:	e000e100 	.word	0xe000e100
    1de4:	00001d65 	.word	0x00001d65

00001de8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1de8:	2300      	movs	r3, #0
    1dea:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1dec:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1dee:	2201      	movs	r2, #1
    1df0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1df2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1df4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1df6:	3302      	adds	r3, #2
    1df8:	72c3      	strb	r3, [r0, #11]
}
    1dfa:	4770      	bx	lr

00001dfc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dfe:	b083      	sub	sp, #12
    1e00:	0005      	movs	r5, r0
    1e02:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e04:	a901      	add	r1, sp, #4
    1e06:	2300      	movs	r3, #0
    1e08:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e0a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1e0c:	7923      	ldrb	r3, [r4, #4]
    1e0e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1e10:	7a23      	ldrb	r3, [r4, #8]
    1e12:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1e14:	7820      	ldrb	r0, [r4, #0]
    1e16:	4b15      	ldr	r3, [pc, #84]	; (1e6c <extint_chan_set_config+0x70>)
    1e18:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1e1a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1e1c:	2d1f      	cmp	r5, #31
    1e1e:	d800      	bhi.n	1e22 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1e20:	4813      	ldr	r0, [pc, #76]	; (1e70 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1e22:	2207      	movs	r2, #7
    1e24:	402a      	ands	r2, r5
    1e26:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1e28:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1e2a:	7aa3      	ldrb	r3, [r4, #10]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d001      	beq.n	1e34 <extint_chan_set_config+0x38>
    1e30:	2308      	movs	r3, #8
    1e32:	431f      	orrs	r7, r3
    1e34:	08eb      	lsrs	r3, r5, #3
    1e36:	009b      	lsls	r3, r3, #2
    1e38:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1e3a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1e3c:	260f      	movs	r6, #15
    1e3e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1e40:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1e42:	4097      	lsls	r7, r2
    1e44:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1e46:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1e48:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1e4a:	7a63      	ldrb	r3, [r4, #9]
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d106      	bne.n	1e5e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1e50:	6943      	ldr	r3, [r0, #20]
    1e52:	2201      	movs	r2, #1
    1e54:	40aa      	lsls	r2, r5
    1e56:	4393      	bics	r3, r2
    1e58:	6143      	str	r3, [r0, #20]
	}
}
    1e5a:	b003      	add	sp, #12
    1e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1e5e:	6942      	ldr	r2, [r0, #20]
    1e60:	2301      	movs	r3, #1
    1e62:	40ab      	lsls	r3, r5
    1e64:	4313      	orrs	r3, r2
    1e66:	6143      	str	r3, [r0, #20]
    1e68:	e7f7      	b.n	1e5a <extint_chan_set_config+0x5e>
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00006485 	.word	0x00006485
    1e70:	40001800 	.word	0x40001800

00001e74 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1e74:	4770      	bx	lr
	...

00001e78 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e78:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1e7a:	4b0a      	ldr	r3, [pc, #40]	; (1ea4 <_sercom_set_handler+0x2c>)
    1e7c:	781b      	ldrb	r3, [r3, #0]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d10c      	bne.n	1e9c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e82:	4f09      	ldr	r7, [pc, #36]	; (1ea8 <_sercom_set_handler+0x30>)
    1e84:	4e09      	ldr	r6, [pc, #36]	; (1eac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1e86:	4d0a      	ldr	r5, [pc, #40]	; (1eb0 <_sercom_set_handler+0x38>)
    1e88:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e8a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1e8c:	195a      	adds	r2, r3, r5
    1e8e:	6014      	str	r4, [r2, #0]
    1e90:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e92:	2b18      	cmp	r3, #24
    1e94:	d1f9      	bne.n	1e8a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1e96:	2201      	movs	r2, #1
    1e98:	4b02      	ldr	r3, [pc, #8]	; (1ea4 <_sercom_set_handler+0x2c>)
    1e9a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1e9c:	0080      	lsls	r0, r0, #2
    1e9e:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <_sercom_set_handler+0x30>)
    1ea0:	50c1      	str	r1, [r0, r3]
}
    1ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea4:	200001fc 	.word	0x200001fc
    1ea8:	20000200 	.word	0x20000200
    1eac:	00001e75 	.word	0x00001e75
    1eb0:	20000334 	.word	0x20000334

00001eb4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1eb4:	b500      	push	{lr}
    1eb6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1eb8:	2309      	movs	r3, #9
    1eba:	466a      	mov	r2, sp
    1ebc:	7013      	strb	r3, [r2, #0]
    1ebe:	3301      	adds	r3, #1
    1ec0:	7053      	strb	r3, [r2, #1]
    1ec2:	3301      	adds	r3, #1
    1ec4:	7093      	strb	r3, [r2, #2]
    1ec6:	3301      	adds	r3, #1
    1ec8:	70d3      	strb	r3, [r2, #3]
    1eca:	3301      	adds	r3, #1
    1ecc:	7113      	strb	r3, [r2, #4]
    1ece:	3301      	adds	r3, #1
    1ed0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ed2:	4b03      	ldr	r3, [pc, #12]	; (1ee0 <_sercom_get_interrupt_vector+0x2c>)
    1ed4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ed6:	466b      	mov	r3, sp
    1ed8:	5618      	ldrsb	r0, [r3, r0]
}
    1eda:	b003      	add	sp, #12
    1edc:	bd00      	pop	{pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00004e6d 	.word	0x00004e6d

00001ee4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ee4:	b510      	push	{r4, lr}
    1ee6:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <SERCOM0_Handler+0xc>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2000      	movs	r0, #0
    1eec:	4798      	blx	r3
    1eee:	bd10      	pop	{r4, pc}
    1ef0:	20000200 	.word	0x20000200

00001ef4 <SERCOM1_Handler>:
    1ef4:	b510      	push	{r4, lr}
    1ef6:	4b02      	ldr	r3, [pc, #8]	; (1f00 <SERCOM1_Handler+0xc>)
    1ef8:	685b      	ldr	r3, [r3, #4]
    1efa:	2001      	movs	r0, #1
    1efc:	4798      	blx	r3
    1efe:	bd10      	pop	{r4, pc}
    1f00:	20000200 	.word	0x20000200

00001f04 <SERCOM2_Handler>:
    1f04:	b510      	push	{r4, lr}
    1f06:	4b02      	ldr	r3, [pc, #8]	; (1f10 <SERCOM2_Handler+0xc>)
    1f08:	689b      	ldr	r3, [r3, #8]
    1f0a:	2002      	movs	r0, #2
    1f0c:	4798      	blx	r3
    1f0e:	bd10      	pop	{r4, pc}
    1f10:	20000200 	.word	0x20000200

00001f14 <SERCOM3_Handler>:
    1f14:	b510      	push	{r4, lr}
    1f16:	4b02      	ldr	r3, [pc, #8]	; (1f20 <SERCOM3_Handler+0xc>)
    1f18:	68db      	ldr	r3, [r3, #12]
    1f1a:	2003      	movs	r0, #3
    1f1c:	4798      	blx	r3
    1f1e:	bd10      	pop	{r4, pc}
    1f20:	20000200 	.word	0x20000200

00001f24 <SERCOM4_Handler>:
    1f24:	b510      	push	{r4, lr}
    1f26:	4b02      	ldr	r3, [pc, #8]	; (1f30 <SERCOM4_Handler+0xc>)
    1f28:	691b      	ldr	r3, [r3, #16]
    1f2a:	2004      	movs	r0, #4
    1f2c:	4798      	blx	r3
    1f2e:	bd10      	pop	{r4, pc}
    1f30:	20000200 	.word	0x20000200

00001f34 <SERCOM5_Handler>:
    1f34:	b510      	push	{r4, lr}
    1f36:	4b02      	ldr	r3, [pc, #8]	; (1f40 <SERCOM5_Handler+0xc>)
    1f38:	695b      	ldr	r3, [r3, #20]
    1f3a:	2005      	movs	r0, #5
    1f3c:	4798      	blx	r3
    1f3e:	bd10      	pop	{r4, pc}
    1f40:	20000200 	.word	0x20000200

00001f44 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f46:	46de      	mov	lr, fp
    1f48:	4657      	mov	r7, sl
    1f4a:	464e      	mov	r6, r9
    1f4c:	4645      	mov	r5, r8
    1f4e:	b5e0      	push	{r5, r6, r7, lr}
    1f50:	b091      	sub	sp, #68	; 0x44
    1f52:	0005      	movs	r5, r0
    1f54:	000c      	movs	r4, r1
    1f56:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1f58:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f5a:	0008      	movs	r0, r1
    1f5c:	4bbc      	ldr	r3, [pc, #752]	; (2250 <STACK_SIZE+0x250>)
    1f5e:	4798      	blx	r3
    1f60:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f62:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1f64:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1f66:	07db      	lsls	r3, r3, #31
    1f68:	d506      	bpl.n	1f78 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1f6a:	b011      	add	sp, #68	; 0x44
    1f6c:	bc3c      	pop	{r2, r3, r4, r5}
    1f6e:	4690      	mov	r8, r2
    1f70:	4699      	mov	r9, r3
    1f72:	46a2      	mov	sl, r4
    1f74:	46ab      	mov	fp, r5
    1f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f78:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1f7a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1f7c:	079b      	lsls	r3, r3, #30
    1f7e:	d4f4      	bmi.n	1f6a <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    1f80:	49b4      	ldr	r1, [pc, #720]	; (2254 <STACK_SIZE+0x254>)
    1f82:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f84:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f86:	2301      	movs	r3, #1
    1f88:	40bb      	lsls	r3, r7
    1f8a:	4303      	orrs	r3, r0
    1f8c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f8e:	a90f      	add	r1, sp, #60	; 0x3c
    1f90:	272d      	movs	r7, #45	; 0x2d
    1f92:	5df3      	ldrb	r3, [r6, r7]
    1f94:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f96:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1f98:	b2d3      	uxtb	r3, r2
    1f9a:	9302      	str	r3, [sp, #8]
    1f9c:	0018      	movs	r0, r3
    1f9e:	4bae      	ldr	r3, [pc, #696]	; (2258 <STACK_SIZE+0x258>)
    1fa0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1fa2:	9802      	ldr	r0, [sp, #8]
    1fa4:	4bad      	ldr	r3, [pc, #692]	; (225c <STACK_SIZE+0x25c>)
    1fa6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1fa8:	5df0      	ldrb	r0, [r6, r7]
    1faa:	2100      	movs	r1, #0
    1fac:	4bac      	ldr	r3, [pc, #688]	; (2260 <STACK_SIZE+0x260>)
    1fae:	4798      	blx	r3
	module->character_size = config->character_size;
    1fb0:	7af3      	ldrb	r3, [r6, #11]
    1fb2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1fb4:	2324      	movs	r3, #36	; 0x24
    1fb6:	5cf3      	ldrb	r3, [r6, r3]
    1fb8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1fba:	2325      	movs	r3, #37	; 0x25
    1fbc:	5cf3      	ldrb	r3, [r6, r3]
    1fbe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1fc0:	7ef3      	ldrb	r3, [r6, #27]
    1fc2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1fc4:	7f33      	ldrb	r3, [r6, #28]
    1fc6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1fc8:	682b      	ldr	r3, [r5, #0]
    1fca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1fcc:	0018      	movs	r0, r3
    1fce:	4ba0      	ldr	r3, [pc, #640]	; (2250 <STACK_SIZE+0x250>)
    1fd0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1fd2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1fd4:	2200      	movs	r2, #0
    1fd6:	230e      	movs	r3, #14
    1fd8:	a906      	add	r1, sp, #24
    1fda:	468c      	mov	ip, r1
    1fdc:	4463      	add	r3, ip
    1fde:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1fe0:	8a32      	ldrh	r2, [r6, #16]
    1fe2:	9202      	str	r2, [sp, #8]
    1fe4:	2380      	movs	r3, #128	; 0x80
    1fe6:	01db      	lsls	r3, r3, #7
    1fe8:	429a      	cmp	r2, r3
    1fea:	d100      	bne.n	1fee <usart_init+0xaa>
    1fec:	e09e      	b.n	212c <STACK_SIZE+0x12c>
    1fee:	d90f      	bls.n	2010 <STACK_SIZE+0x10>
    1ff0:	23c0      	movs	r3, #192	; 0xc0
    1ff2:	01db      	lsls	r3, r3, #7
    1ff4:	9a02      	ldr	r2, [sp, #8]
    1ff6:	429a      	cmp	r2, r3
    1ff8:	d100      	bne.n	1ffc <usart_init+0xb8>
    1ffa:	e092      	b.n	2122 <STACK_SIZE+0x122>
    1ffc:	2380      	movs	r3, #128	; 0x80
    1ffe:	021b      	lsls	r3, r3, #8
    2000:	429a      	cmp	r2, r3
    2002:	d000      	beq.n	2006 <STACK_SIZE+0x6>
    2004:	e11f      	b.n	2246 <STACK_SIZE+0x246>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2006:	2303      	movs	r3, #3
    2008:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    200a:	2300      	movs	r3, #0
    200c:	9307      	str	r3, [sp, #28]
    200e:	e008      	b.n	2022 <STACK_SIZE+0x22>
	switch (config->sample_rate) {
    2010:	2380      	movs	r3, #128	; 0x80
    2012:	019b      	lsls	r3, r3, #6
    2014:	429a      	cmp	r2, r3
    2016:	d000      	beq.n	201a <STACK_SIZE+0x1a>
    2018:	e115      	b.n	2246 <STACK_SIZE+0x246>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    201a:	2310      	movs	r3, #16
    201c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    201e:	3b0f      	subs	r3, #15
    2020:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2022:	6833      	ldr	r3, [r6, #0]
    2024:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2026:	68f3      	ldr	r3, [r6, #12]
    2028:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    202a:	6973      	ldr	r3, [r6, #20]
    202c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    202e:	7e33      	ldrb	r3, [r6, #24]
    2030:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2032:	2326      	movs	r3, #38	; 0x26
    2034:	5cf3      	ldrb	r3, [r6, r3]
    2036:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2038:	6873      	ldr	r3, [r6, #4]
    203a:	4699      	mov	r9, r3
	switch (transfer_mode)
    203c:	2b00      	cmp	r3, #0
    203e:	d100      	bne.n	2042 <STACK_SIZE+0x42>
    2040:	e0a0      	b.n	2184 <STACK_SIZE+0x184>
    2042:	2380      	movs	r3, #128	; 0x80
    2044:	055b      	lsls	r3, r3, #21
    2046:	4599      	cmp	r9, r3
    2048:	d100      	bne.n	204c <STACK_SIZE+0x4c>
    204a:	e084      	b.n	2156 <STACK_SIZE+0x156>
	if(config->encoding_format_enable) {
    204c:	7e73      	ldrb	r3, [r6, #25]
    204e:	2b00      	cmp	r3, #0
    2050:	d002      	beq.n	2058 <STACK_SIZE+0x58>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2052:	7eb3      	ldrb	r3, [r6, #26]
    2054:	4642      	mov	r2, r8
    2056:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2058:	682a      	ldr	r2, [r5, #0]
    205a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    205c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    205e:	2b00      	cmp	r3, #0
    2060:	d1fc      	bne.n	205c <STACK_SIZE+0x5c>
	usart_hw->BAUD.reg = baud;
    2062:	330e      	adds	r3, #14
    2064:	aa06      	add	r2, sp, #24
    2066:	4694      	mov	ip, r2
    2068:	4463      	add	r3, ip
    206a:	881b      	ldrh	r3, [r3, #0]
    206c:	4642      	mov	r2, r8
    206e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2070:	9b05      	ldr	r3, [sp, #20]
    2072:	9a03      	ldr	r2, [sp, #12]
    2074:	4313      	orrs	r3, r2
    2076:	9a04      	ldr	r2, [sp, #16]
    2078:	4313      	orrs	r3, r2
    207a:	464a      	mov	r2, r9
    207c:	4313      	orrs	r3, r2
    207e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2080:	465b      	mov	r3, fp
    2082:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2084:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2086:	4653      	mov	r3, sl
    2088:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    208a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    208c:	2327      	movs	r3, #39	; 0x27
    208e:	5cf3      	ldrb	r3, [r6, r3]
    2090:	2b00      	cmp	r3, #0
    2092:	d101      	bne.n	2098 <STACK_SIZE+0x98>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2094:	3304      	adds	r3, #4
    2096:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2098:	7e73      	ldrb	r3, [r6, #25]
    209a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    209c:	7f32      	ldrb	r2, [r6, #28]
    209e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    20a0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20a2:	7f72      	ldrb	r2, [r6, #29]
    20a4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    20a6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20a8:	2224      	movs	r2, #36	; 0x24
    20aa:	5cb2      	ldrb	r2, [r6, r2]
    20ac:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    20ae:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    20b0:	2225      	movs	r2, #37	; 0x25
    20b2:	5cb2      	ldrb	r2, [r6, r2]
    20b4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    20b6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    20b8:	7ab1      	ldrb	r1, [r6, #10]
    20ba:	7af2      	ldrb	r2, [r6, #11]
    20bc:	4311      	orrs	r1, r2
    20be:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    20c0:	8933      	ldrh	r3, [r6, #8]
    20c2:	2bff      	cmp	r3, #255	; 0xff
    20c4:	d100      	bne.n	20c8 <STACK_SIZE+0xc8>
    20c6:	e081      	b.n	21cc <STACK_SIZE+0x1cc>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    20c8:	2280      	movs	r2, #128	; 0x80
    20ca:	0452      	lsls	r2, r2, #17
    20cc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    20ce:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    20d0:	232c      	movs	r3, #44	; 0x2c
    20d2:	5cf3      	ldrb	r3, [r6, r3]
    20d4:	2b00      	cmp	r3, #0
    20d6:	d103      	bne.n	20e0 <STACK_SIZE+0xe0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    20d8:	4b62      	ldr	r3, [pc, #392]	; (2264 <STACK_SIZE+0x264>)
    20da:	789b      	ldrb	r3, [r3, #2]
    20dc:	079b      	lsls	r3, r3, #30
    20de:	d501      	bpl.n	20e4 <STACK_SIZE+0xe4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    20e0:	2380      	movs	r3, #128	; 0x80
    20e2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    20e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    20e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    20e8:	2b00      	cmp	r3, #0
    20ea:	d1fc      	bne.n	20e6 <STACK_SIZE+0xe6>
	usart_hw->CTRLB.reg = ctrlb;
    20ec:	4643      	mov	r3, r8
    20ee:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    20f0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    20f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    20f4:	2b00      	cmp	r3, #0
    20f6:	d1fc      	bne.n	20f2 <STACK_SIZE+0xf2>
	usart_hw->CTRLA.reg = ctrla;
    20f8:	4643      	mov	r3, r8
    20fa:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20fc:	ab0e      	add	r3, sp, #56	; 0x38
    20fe:	2280      	movs	r2, #128	; 0x80
    2100:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2102:	2200      	movs	r2, #0
    2104:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2106:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2108:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    210a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    210c:	930a      	str	r3, [sp, #40]	; 0x28
    210e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2110:	930b      	str	r3, [sp, #44]	; 0x2c
    2112:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2114:	930c      	str	r3, [sp, #48]	; 0x30
    2116:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2118:	9302      	str	r3, [sp, #8]
    211a:	930d      	str	r3, [sp, #52]	; 0x34
    211c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    211e:	ae0a      	add	r6, sp, #40	; 0x28
    2120:	e063      	b.n	21ea <STACK_SIZE+0x1ea>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2122:	2308      	movs	r3, #8
    2124:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2126:	3b07      	subs	r3, #7
    2128:	9307      	str	r3, [sp, #28]
    212a:	e77a      	b.n	2022 <STACK_SIZE+0x22>
	ctrla = (uint32_t)config->data_order |
    212c:	6833      	ldr	r3, [r6, #0]
    212e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2130:	68f3      	ldr	r3, [r6, #12]
    2132:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2134:	6973      	ldr	r3, [r6, #20]
    2136:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2138:	7e33      	ldrb	r3, [r6, #24]
    213a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    213c:	2326      	movs	r3, #38	; 0x26
    213e:	5cf3      	ldrb	r3, [r6, r3]
    2140:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2142:	6873      	ldr	r3, [r6, #4]
    2144:	4699      	mov	r9, r3
	switch (transfer_mode)
    2146:	2b00      	cmp	r3, #0
    2148:	d018      	beq.n	217c <STACK_SIZE+0x17c>
    214a:	2380      	movs	r3, #128	; 0x80
    214c:	055b      	lsls	r3, r3, #21
    214e:	4599      	cmp	r9, r3
    2150:	d001      	beq.n	2156 <STACK_SIZE+0x156>
	enum status_code status_code = STATUS_OK;
    2152:	2000      	movs	r0, #0
    2154:	e025      	b.n	21a2 <STACK_SIZE+0x1a2>
			if (!config->use_external_clock) {
    2156:	2327      	movs	r3, #39	; 0x27
    2158:	5cf3      	ldrb	r3, [r6, r3]
    215a:	2b00      	cmp	r3, #0
    215c:	d000      	beq.n	2160 <STACK_SIZE+0x160>
    215e:	e775      	b.n	204c <STACK_SIZE+0x4c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2160:	6a33      	ldr	r3, [r6, #32]
    2162:	001f      	movs	r7, r3
    2164:	b2c0      	uxtb	r0, r0
    2166:	4b40      	ldr	r3, [pc, #256]	; (2268 <STACK_SIZE+0x268>)
    2168:	4798      	blx	r3
    216a:	0001      	movs	r1, r0
    216c:	220e      	movs	r2, #14
    216e:	ab06      	add	r3, sp, #24
    2170:	469c      	mov	ip, r3
    2172:	4462      	add	r2, ip
    2174:	0038      	movs	r0, r7
    2176:	4b3d      	ldr	r3, [pc, #244]	; (226c <STACK_SIZE+0x26c>)
    2178:	4798      	blx	r3
    217a:	e012      	b.n	21a2 <STACK_SIZE+0x1a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    217c:	2308      	movs	r3, #8
    217e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2180:	2300      	movs	r3, #0
    2182:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2184:	2327      	movs	r3, #39	; 0x27
    2186:	5cf3      	ldrb	r3, [r6, r3]
    2188:	2b00      	cmp	r3, #0
    218a:	d00e      	beq.n	21aa <STACK_SIZE+0x1aa>
				status_code =
    218c:	9b06      	ldr	r3, [sp, #24]
    218e:	9300      	str	r3, [sp, #0]
    2190:	9b07      	ldr	r3, [sp, #28]
    2192:	220e      	movs	r2, #14
    2194:	a906      	add	r1, sp, #24
    2196:	468c      	mov	ip, r1
    2198:	4462      	add	r2, ip
    219a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    219c:	6a30      	ldr	r0, [r6, #32]
    219e:	4f34      	ldr	r7, [pc, #208]	; (2270 <STACK_SIZE+0x270>)
    21a0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    21a2:	2800      	cmp	r0, #0
    21a4:	d000      	beq.n	21a8 <STACK_SIZE+0x1a8>
    21a6:	e6e0      	b.n	1f6a <usart_init+0x26>
    21a8:	e750      	b.n	204c <STACK_SIZE+0x4c>
						_sercom_get_async_baud_val(config->baudrate,
    21aa:	6a33      	ldr	r3, [r6, #32]
    21ac:	001f      	movs	r7, r3
    21ae:	b2c0      	uxtb	r0, r0
    21b0:	4b2d      	ldr	r3, [pc, #180]	; (2268 <STACK_SIZE+0x268>)
    21b2:	4798      	blx	r3
    21b4:	0001      	movs	r1, r0
				status_code =
    21b6:	9b06      	ldr	r3, [sp, #24]
    21b8:	9300      	str	r3, [sp, #0]
    21ba:	9b07      	ldr	r3, [sp, #28]
    21bc:	220e      	movs	r2, #14
    21be:	a806      	add	r0, sp, #24
    21c0:	4684      	mov	ip, r0
    21c2:	4462      	add	r2, ip
    21c4:	0038      	movs	r0, r7
    21c6:	4f2a      	ldr	r7, [pc, #168]	; (2270 <STACK_SIZE+0x270>)
    21c8:	47b8      	blx	r7
    21ca:	e7ea      	b.n	21a2 <STACK_SIZE+0x1a2>
		if(config->lin_slave_enable) {
    21cc:	7ef3      	ldrb	r3, [r6, #27]
    21ce:	2b00      	cmp	r3, #0
    21d0:	d100      	bne.n	21d4 <STACK_SIZE+0x1d4>
    21d2:	e77d      	b.n	20d0 <STACK_SIZE+0xd0>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    21d4:	2380      	movs	r3, #128	; 0x80
    21d6:	04db      	lsls	r3, r3, #19
    21d8:	431f      	orrs	r7, r3
    21da:	e779      	b.n	20d0 <STACK_SIZE+0xd0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    21dc:	0020      	movs	r0, r4
    21de:	4b25      	ldr	r3, [pc, #148]	; (2274 <STACK_SIZE+0x274>)
    21e0:	4798      	blx	r3
    21e2:	e007      	b.n	21f4 <STACK_SIZE+0x1f4>
    21e4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    21e6:	2f04      	cmp	r7, #4
    21e8:	d00d      	beq.n	2206 <STACK_SIZE+0x206>
    21ea:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    21ec:	00bb      	lsls	r3, r7, #2
    21ee:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    21f0:	2800      	cmp	r0, #0
    21f2:	d0f3      	beq.n	21dc <STACK_SIZE+0x1dc>
		if (current_pinmux != PINMUX_UNUSED) {
    21f4:	1c43      	adds	r3, r0, #1
    21f6:	d0f5      	beq.n	21e4 <STACK_SIZE+0x1e4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    21f8:	a90e      	add	r1, sp, #56	; 0x38
    21fa:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    21fc:	0c00      	lsrs	r0, r0, #16
    21fe:	b2c0      	uxtb	r0, r0
    2200:	4b1d      	ldr	r3, [pc, #116]	; (2278 <STACK_SIZE+0x278>)
    2202:	4798      	blx	r3
    2204:	e7ee      	b.n	21e4 <STACK_SIZE+0x1e4>
		module->callback[i]            = NULL;
    2206:	2300      	movs	r3, #0
    2208:	60eb      	str	r3, [r5, #12]
    220a:	612b      	str	r3, [r5, #16]
    220c:	616b      	str	r3, [r5, #20]
    220e:	61ab      	str	r3, [r5, #24]
    2210:	61eb      	str	r3, [r5, #28]
    2212:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2214:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2216:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2218:	2200      	movs	r2, #0
    221a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    221c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    221e:	3330      	adds	r3, #48	; 0x30
    2220:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2222:	3301      	adds	r3, #1
    2224:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2226:	3301      	adds	r3, #1
    2228:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    222a:	3301      	adds	r3, #1
    222c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    222e:	6828      	ldr	r0, [r5, #0]
    2230:	4b07      	ldr	r3, [pc, #28]	; (2250 <STACK_SIZE+0x250>)
    2232:	4798      	blx	r3
    2234:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2236:	4911      	ldr	r1, [pc, #68]	; (227c <STACK_SIZE+0x27c>)
    2238:	4b11      	ldr	r3, [pc, #68]	; (2280 <STACK_SIZE+0x280>)
    223a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    223c:	00a4      	lsls	r4, r4, #2
    223e:	4b11      	ldr	r3, [pc, #68]	; (2284 <STACK_SIZE+0x284>)
    2240:	50e5      	str	r5, [r4, r3]
	return status_code;
    2242:	2000      	movs	r0, #0
    2244:	e691      	b.n	1f6a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2246:	2310      	movs	r3, #16
    2248:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    224a:	2300      	movs	r3, #0
    224c:	9307      	str	r3, [sp, #28]
    224e:	e6e8      	b.n	2022 <STACK_SIZE+0x22>
    2250:	00004e6d 	.word	0x00004e6d
    2254:	40000400 	.word	0x40000400
    2258:	0000638d 	.word	0x0000638d
    225c:	00006301 	.word	0x00006301
    2260:	00004ca9 	.word	0x00004ca9
    2264:	41002000 	.word	0x41002000
    2268:	000063a9 	.word	0x000063a9
    226c:	00004beb 	.word	0x00004beb
    2270:	00004c15 	.word	0x00004c15
    2274:	00004cf5 	.word	0x00004cf5
    2278:	00006485 	.word	0x00006485
    227c:	00002325 	.word	0x00002325
    2280:	00001e79 	.word	0x00001e79
    2284:	20000334 	.word	0x20000334

00002288 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2288:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    228a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    228c:	2a00      	cmp	r2, #0
    228e:	d101      	bne.n	2294 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2290:	0018      	movs	r0, r3
    2292:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2294:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2296:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2298:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    229a:	2a00      	cmp	r2, #0
    229c:	d1f8      	bne.n	2290 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    229e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    22a0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    22a2:	2a00      	cmp	r2, #0
    22a4:	d1fc      	bne.n	22a0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    22a6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    22a8:	2102      	movs	r1, #2
    22aa:	7e1a      	ldrb	r2, [r3, #24]
    22ac:	420a      	tst	r2, r1
    22ae:	d0fc      	beq.n	22aa <usart_write_wait+0x22>
	return STATUS_OK;
    22b0:	2300      	movs	r3, #0
    22b2:	e7ed      	b.n	2290 <usart_write_wait+0x8>

000022b4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    22b4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    22b6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    22b8:	2a00      	cmp	r2, #0
    22ba:	d101      	bne.n	22c0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    22bc:	0018      	movs	r0, r3
    22be:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    22c0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    22c2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    22c4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    22c6:	2a00      	cmp	r2, #0
    22c8:	d1f8      	bne.n	22bc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    22ca:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    22cc:	7e10      	ldrb	r0, [r2, #24]
    22ce:	0740      	lsls	r0, r0, #29
    22d0:	d5f4      	bpl.n	22bc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    22d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    22d4:	2b00      	cmp	r3, #0
    22d6:	d1fc      	bne.n	22d2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    22d8:	8b53      	ldrh	r3, [r2, #26]
    22da:	b2db      	uxtb	r3, r3
	if (error_code) {
    22dc:	0698      	lsls	r0, r3, #26
    22de:	d01d      	beq.n	231c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    22e0:	0798      	lsls	r0, r3, #30
    22e2:	d503      	bpl.n	22ec <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    22e4:	2302      	movs	r3, #2
    22e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    22e8:	3318      	adds	r3, #24
    22ea:	e7e7      	b.n	22bc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    22ec:	0758      	lsls	r0, r3, #29
    22ee:	d503      	bpl.n	22f8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    22f0:	2304      	movs	r3, #4
    22f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    22f4:	331a      	adds	r3, #26
    22f6:	e7e1      	b.n	22bc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    22f8:	07d8      	lsls	r0, r3, #31
    22fa:	d503      	bpl.n	2304 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    22fc:	2301      	movs	r3, #1
    22fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2300:	3312      	adds	r3, #18
    2302:	e7db      	b.n	22bc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2304:	06d8      	lsls	r0, r3, #27
    2306:	d503      	bpl.n	2310 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2308:	2310      	movs	r3, #16
    230a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    230c:	3332      	adds	r3, #50	; 0x32
    230e:	e7d5      	b.n	22bc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2310:	069b      	lsls	r3, r3, #26
    2312:	d503      	bpl.n	231c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2314:	2320      	movs	r3, #32
    2316:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2318:	3321      	adds	r3, #33	; 0x21
    231a:	e7cf      	b.n	22bc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    231c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    231e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2320:	2300      	movs	r3, #0
    2322:	e7cb      	b.n	22bc <usart_read_wait+0x8>

00002324 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2326:	0080      	lsls	r0, r0, #2
    2328:	4b62      	ldr	r3, [pc, #392]	; (24b4 <_usart_interrupt_handler+0x190>)
    232a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    232c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    232e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2330:	2b00      	cmp	r3, #0
    2332:	d1fc      	bne.n	232e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2334:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2336:	7da6      	ldrb	r6, [r4, #22]
    2338:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    233a:	2330      	movs	r3, #48	; 0x30
    233c:	5ceb      	ldrb	r3, [r5, r3]
    233e:	2231      	movs	r2, #49	; 0x31
    2340:	5caf      	ldrb	r7, [r5, r2]
    2342:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2344:	07f3      	lsls	r3, r6, #31
    2346:	d522      	bpl.n	238e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2348:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    234a:	b29b      	uxth	r3, r3
    234c:	2b00      	cmp	r3, #0
    234e:	d01c      	beq.n	238a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2350:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2352:	7813      	ldrb	r3, [r2, #0]
    2354:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2356:	1c51      	adds	r1, r2, #1
    2358:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    235a:	7969      	ldrb	r1, [r5, #5]
    235c:	2901      	cmp	r1, #1
    235e:	d00e      	beq.n	237e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2360:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2362:	05db      	lsls	r3, r3, #23
    2364:	0ddb      	lsrs	r3, r3, #23
    2366:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2368:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    236a:	3b01      	subs	r3, #1
    236c:	b29b      	uxth	r3, r3
    236e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2370:	2b00      	cmp	r3, #0
    2372:	d10c      	bne.n	238e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2374:	3301      	adds	r3, #1
    2376:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2378:	3301      	adds	r3, #1
    237a:	75a3      	strb	r3, [r4, #22]
    237c:	e007      	b.n	238e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    237e:	7851      	ldrb	r1, [r2, #1]
    2380:	0209      	lsls	r1, r1, #8
    2382:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2384:	3202      	adds	r2, #2
    2386:	62aa      	str	r2, [r5, #40]	; 0x28
    2388:	e7eb      	b.n	2362 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    238a:	2301      	movs	r3, #1
    238c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    238e:	07b3      	lsls	r3, r6, #30
    2390:	d506      	bpl.n	23a0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2392:	2302      	movs	r3, #2
    2394:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2396:	2200      	movs	r2, #0
    2398:	3331      	adds	r3, #49	; 0x31
    239a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    239c:	07fb      	lsls	r3, r7, #31
    239e:	d41a      	bmi.n	23d6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    23a0:	0773      	lsls	r3, r6, #29
    23a2:	d565      	bpl.n	2470 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    23a4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    23a6:	b29b      	uxth	r3, r3
    23a8:	2b00      	cmp	r3, #0
    23aa:	d05f      	beq.n	246c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    23ac:	8b63      	ldrh	r3, [r4, #26]
    23ae:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    23b0:	071a      	lsls	r2, r3, #28
    23b2:	d414      	bmi.n	23de <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    23b4:	223f      	movs	r2, #63	; 0x3f
    23b6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    23b8:	2b00      	cmp	r3, #0
    23ba:	d034      	beq.n	2426 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    23bc:	079a      	lsls	r2, r3, #30
    23be:	d511      	bpl.n	23e4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    23c0:	221a      	movs	r2, #26
    23c2:	2332      	movs	r3, #50	; 0x32
    23c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    23c6:	3b30      	subs	r3, #48	; 0x30
    23c8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    23ca:	077b      	lsls	r3, r7, #29
    23cc:	d550      	bpl.n	2470 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    23ce:	0028      	movs	r0, r5
    23d0:	696b      	ldr	r3, [r5, #20]
    23d2:	4798      	blx	r3
    23d4:	e04c      	b.n	2470 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    23d6:	0028      	movs	r0, r5
    23d8:	68eb      	ldr	r3, [r5, #12]
    23da:	4798      	blx	r3
    23dc:	e7e0      	b.n	23a0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    23de:	2237      	movs	r2, #55	; 0x37
    23e0:	4013      	ands	r3, r2
    23e2:	e7e9      	b.n	23b8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    23e4:	075a      	lsls	r2, r3, #29
    23e6:	d505      	bpl.n	23f4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    23e8:	221e      	movs	r2, #30
    23ea:	2332      	movs	r3, #50	; 0x32
    23ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    23ee:	3b2e      	subs	r3, #46	; 0x2e
    23f0:	8363      	strh	r3, [r4, #26]
    23f2:	e7ea      	b.n	23ca <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    23f4:	07da      	lsls	r2, r3, #31
    23f6:	d505      	bpl.n	2404 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    23f8:	2213      	movs	r2, #19
    23fa:	2332      	movs	r3, #50	; 0x32
    23fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    23fe:	3b31      	subs	r3, #49	; 0x31
    2400:	8363      	strh	r3, [r4, #26]
    2402:	e7e2      	b.n	23ca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2404:	06da      	lsls	r2, r3, #27
    2406:	d505      	bpl.n	2414 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2408:	2242      	movs	r2, #66	; 0x42
    240a:	2332      	movs	r3, #50	; 0x32
    240c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    240e:	3b22      	subs	r3, #34	; 0x22
    2410:	8363      	strh	r3, [r4, #26]
    2412:	e7da      	b.n	23ca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2414:	2220      	movs	r2, #32
    2416:	421a      	tst	r2, r3
    2418:	d0d7      	beq.n	23ca <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    241a:	3221      	adds	r2, #33	; 0x21
    241c:	2332      	movs	r3, #50	; 0x32
    241e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2420:	3b12      	subs	r3, #18
    2422:	8363      	strh	r3, [r4, #26]
    2424:	e7d1      	b.n	23ca <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2426:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2428:	05db      	lsls	r3, r3, #23
    242a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    242c:	b2da      	uxtb	r2, r3
    242e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2430:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2432:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2434:	1c51      	adds	r1, r2, #1
    2436:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2438:	7969      	ldrb	r1, [r5, #5]
    243a:	2901      	cmp	r1, #1
    243c:	d010      	beq.n	2460 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    243e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2440:	3b01      	subs	r3, #1
    2442:	b29b      	uxth	r3, r3
    2444:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2446:	2b00      	cmp	r3, #0
    2448:	d112      	bne.n	2470 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    244a:	3304      	adds	r3, #4
    244c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    244e:	2200      	movs	r2, #0
    2450:	332e      	adds	r3, #46	; 0x2e
    2452:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2454:	07bb      	lsls	r3, r7, #30
    2456:	d50b      	bpl.n	2470 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2458:	0028      	movs	r0, r5
    245a:	692b      	ldr	r3, [r5, #16]
    245c:	4798      	blx	r3
    245e:	e007      	b.n	2470 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2460:	0a1b      	lsrs	r3, r3, #8
    2462:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2464:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2466:	3301      	adds	r3, #1
    2468:	626b      	str	r3, [r5, #36]	; 0x24
    246a:	e7e8      	b.n	243e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    246c:	2304      	movs	r3, #4
    246e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2470:	06f3      	lsls	r3, r6, #27
    2472:	d504      	bpl.n	247e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2474:	2310      	movs	r3, #16
    2476:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2478:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    247a:	06fb      	lsls	r3, r7, #27
    247c:	d40e      	bmi.n	249c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    247e:	06b3      	lsls	r3, r6, #26
    2480:	d504      	bpl.n	248c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2482:	2320      	movs	r3, #32
    2484:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2486:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2488:	073b      	lsls	r3, r7, #28
    248a:	d40b      	bmi.n	24a4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    248c:	0733      	lsls	r3, r6, #28
    248e:	d504      	bpl.n	249a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2490:	2308      	movs	r3, #8
    2492:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2494:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2496:	06bb      	lsls	r3, r7, #26
    2498:	d408      	bmi.n	24ac <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    249c:	0028      	movs	r0, r5
    249e:	69eb      	ldr	r3, [r5, #28]
    24a0:	4798      	blx	r3
    24a2:	e7ec      	b.n	247e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    24a4:	0028      	movs	r0, r5
    24a6:	69ab      	ldr	r3, [r5, #24]
    24a8:	4798      	blx	r3
    24aa:	e7ef      	b.n	248c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    24ac:	6a2b      	ldr	r3, [r5, #32]
    24ae:	0028      	movs	r0, r5
    24b0:	4798      	blx	r3
}
    24b2:	e7f2      	b.n	249a <_usart_interrupt_handler+0x176>
    24b4:	20000334 	.word	0x20000334

000024b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    24b8:	b510      	push	{r4, lr}
	switch (clock_source) {
    24ba:	2808      	cmp	r0, #8
    24bc:	d803      	bhi.n	24c6 <system_clock_source_get_hz+0xe>
    24be:	0080      	lsls	r0, r0, #2
    24c0:	4b1e      	ldr	r3, [pc, #120]	; (253c <system_clock_source_get_hz+0x84>)
    24c2:	581b      	ldr	r3, [r3, r0]
    24c4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    24c6:	2000      	movs	r0, #0
    24c8:	e036      	b.n	2538 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    24ca:	4b1d      	ldr	r3, [pc, #116]	; (2540 <system_clock_source_get_hz+0x88>)
    24cc:	6918      	ldr	r0, [r3, #16]
    24ce:	e033      	b.n	2538 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    24d0:	4b1c      	ldr	r3, [pc, #112]	; (2544 <system_clock_source_get_hz+0x8c>)
    24d2:	6a1b      	ldr	r3, [r3, #32]
    24d4:	059b      	lsls	r3, r3, #22
    24d6:	0f9b      	lsrs	r3, r3, #30
    24d8:	481b      	ldr	r0, [pc, #108]	; (2548 <system_clock_source_get_hz+0x90>)
    24da:	40d8      	lsrs	r0, r3
    24dc:	e02c      	b.n	2538 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    24de:	4b18      	ldr	r3, [pc, #96]	; (2540 <system_clock_source_get_hz+0x88>)
    24e0:	6958      	ldr	r0, [r3, #20]
    24e2:	e029      	b.n	2538 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24e4:	4b16      	ldr	r3, [pc, #88]	; (2540 <system_clock_source_get_hz+0x88>)
    24e6:	681b      	ldr	r3, [r3, #0]
			return 0;
    24e8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    24ea:	079b      	lsls	r3, r3, #30
    24ec:	d524      	bpl.n	2538 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    24ee:	4915      	ldr	r1, [pc, #84]	; (2544 <system_clock_source_get_hz+0x8c>)
    24f0:	2210      	movs	r2, #16
    24f2:	68cb      	ldr	r3, [r1, #12]
    24f4:	421a      	tst	r2, r3
    24f6:	d0fc      	beq.n	24f2 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    24f8:	4b11      	ldr	r3, [pc, #68]	; (2540 <system_clock_source_get_hz+0x88>)
    24fa:	681b      	ldr	r3, [r3, #0]
    24fc:	075b      	lsls	r3, r3, #29
    24fe:	d401      	bmi.n	2504 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2500:	4812      	ldr	r0, [pc, #72]	; (254c <system_clock_source_get_hz+0x94>)
    2502:	e019      	b.n	2538 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2504:	4b0e      	ldr	r3, [pc, #56]	; (2540 <system_clock_source_get_hz+0x88>)
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	069b      	lsls	r3, r3, #26
    250a:	d501      	bpl.n	2510 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    250c:	480f      	ldr	r0, [pc, #60]	; (254c <system_clock_source_get_hz+0x94>)
    250e:	e013      	b.n	2538 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2510:	2000      	movs	r0, #0
    2512:	4b0f      	ldr	r3, [pc, #60]	; (2550 <system_clock_source_get_hz+0x98>)
    2514:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2516:	4b0a      	ldr	r3, [pc, #40]	; (2540 <system_clock_source_get_hz+0x88>)
    2518:	689b      	ldr	r3, [r3, #8]
    251a:	041b      	lsls	r3, r3, #16
    251c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    251e:	4358      	muls	r0, r3
    2520:	e00a      	b.n	2538 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2522:	2350      	movs	r3, #80	; 0x50
    2524:	4a07      	ldr	r2, [pc, #28]	; (2544 <system_clock_source_get_hz+0x8c>)
    2526:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2528:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    252a:	075b      	lsls	r3, r3, #29
    252c:	d504      	bpl.n	2538 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    252e:	4b04      	ldr	r3, [pc, #16]	; (2540 <system_clock_source_get_hz+0x88>)
    2530:	68d8      	ldr	r0, [r3, #12]
    2532:	e001      	b.n	2538 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2534:	2080      	movs	r0, #128	; 0x80
    2536:	0200      	lsls	r0, r0, #8
	}
}
    2538:	bd10      	pop	{r4, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	000075f4 	.word	0x000075f4
    2540:	20000218 	.word	0x20000218
    2544:	40000800 	.word	0x40000800
    2548:	007a1200 	.word	0x007a1200
    254c:	02dc6c00 	.word	0x02dc6c00
    2550:	000063a9 	.word	0x000063a9

00002554 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2554:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2556:	490c      	ldr	r1, [pc, #48]	; (2588 <system_clock_source_osc8m_set_config+0x34>)
    2558:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    255a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    255c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    255e:	7840      	ldrb	r0, [r0, #1]
    2560:	2201      	movs	r2, #1
    2562:	4010      	ands	r0, r2
    2564:	0180      	lsls	r0, r0, #6
    2566:	2640      	movs	r6, #64	; 0x40
    2568:	43b3      	bics	r3, r6
    256a:	4303      	orrs	r3, r0
    256c:	402a      	ands	r2, r5
    256e:	01d2      	lsls	r2, r2, #7
    2570:	2080      	movs	r0, #128	; 0x80
    2572:	4383      	bics	r3, r0
    2574:	4313      	orrs	r3, r2
    2576:	2203      	movs	r2, #3
    2578:	4022      	ands	r2, r4
    257a:	0212      	lsls	r2, r2, #8
    257c:	4803      	ldr	r0, [pc, #12]	; (258c <system_clock_source_osc8m_set_config+0x38>)
    257e:	4003      	ands	r3, r0
    2580:	4313      	orrs	r3, r2
    2582:	620b      	str	r3, [r1, #32]
}
    2584:	bd70      	pop	{r4, r5, r6, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	40000800 	.word	0x40000800
    258c:	fffffcff 	.word	0xfffffcff

00002590 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
    2592:	46ce      	mov	lr, r9
    2594:	4647      	mov	r7, r8
    2596:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2598:	4b19      	ldr	r3, [pc, #100]	; (2600 <system_clock_source_osc32k_set_config+0x70>)
    259a:	4699      	mov	r9, r3
    259c:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    259e:	7841      	ldrb	r1, [r0, #1]
    25a0:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    25a2:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    25a4:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    25a6:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    25a8:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    25aa:	7880      	ldrb	r0, [r0, #2]
    25ac:	2101      	movs	r1, #1
    25ae:	4008      	ands	r0, r1
    25b0:	0080      	lsls	r0, r0, #2
    25b2:	2204      	movs	r2, #4
    25b4:	4393      	bics	r3, r2
    25b6:	4303      	orrs	r3, r0
    25b8:	4660      	mov	r0, ip
    25ba:	4008      	ands	r0, r1
    25bc:	00c0      	lsls	r0, r0, #3
    25be:	3204      	adds	r2, #4
    25c0:	4393      	bics	r3, r2
    25c2:	4303      	orrs	r3, r0
    25c4:	0038      	movs	r0, r7
    25c6:	4008      	ands	r0, r1
    25c8:	0180      	lsls	r0, r0, #6
    25ca:	2740      	movs	r7, #64	; 0x40
    25cc:	43bb      	bics	r3, r7
    25ce:	4303      	orrs	r3, r0
    25d0:	0030      	movs	r0, r6
    25d2:	4008      	ands	r0, r1
    25d4:	01c0      	lsls	r0, r0, #7
    25d6:	2680      	movs	r6, #128	; 0x80
    25d8:	43b3      	bics	r3, r6
    25da:	4303      	orrs	r3, r0
    25dc:	2007      	movs	r0, #7
    25de:	4005      	ands	r5, r0
    25e0:	022d      	lsls	r5, r5, #8
    25e2:	4808      	ldr	r0, [pc, #32]	; (2604 <system_clock_source_osc32k_set_config+0x74>)
    25e4:	4003      	ands	r3, r0
    25e6:	432b      	orrs	r3, r5
    25e8:	4021      	ands	r1, r4
    25ea:	0309      	lsls	r1, r1, #12
    25ec:	4806      	ldr	r0, [pc, #24]	; (2608 <system_clock_source_osc32k_set_config+0x78>)
    25ee:	4003      	ands	r3, r0
    25f0:	430b      	orrs	r3, r1
    25f2:	464a      	mov	r2, r9
    25f4:	6193      	str	r3, [r2, #24]
}
    25f6:	bc0c      	pop	{r2, r3}
    25f8:	4690      	mov	r8, r2
    25fa:	4699      	mov	r9, r3
    25fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	40000800 	.word	0x40000800
    2604:	fffff8ff 	.word	0xfffff8ff
    2608:	ffffefff 	.word	0xffffefff

0000260c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    260c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    260e:	7a03      	ldrb	r3, [r0, #8]
    2610:	069b      	lsls	r3, r3, #26
    2612:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2614:	8942      	ldrh	r2, [r0, #10]
    2616:	0592      	lsls	r2, r2, #22
    2618:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    261a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    261c:	4918      	ldr	r1, [pc, #96]	; (2680 <system_clock_source_dfll_set_config+0x74>)
    261e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2620:	7983      	ldrb	r3, [r0, #6]
    2622:	79c2      	ldrb	r2, [r0, #7]
    2624:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2626:	8842      	ldrh	r2, [r0, #2]
    2628:	8884      	ldrh	r4, [r0, #4]
    262a:	4322      	orrs	r2, r4
    262c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    262e:	7842      	ldrb	r2, [r0, #1]
    2630:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2632:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2634:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2636:	7803      	ldrb	r3, [r0, #0]
    2638:	2b04      	cmp	r3, #4
    263a:	d011      	beq.n	2660 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    263c:	2b20      	cmp	r3, #32
    263e:	d10e      	bne.n	265e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2640:	7b03      	ldrb	r3, [r0, #12]
    2642:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2644:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2646:	4313      	orrs	r3, r2
    2648:	89c2      	ldrh	r2, [r0, #14]
    264a:	0412      	lsls	r2, r2, #16
    264c:	490d      	ldr	r1, [pc, #52]	; (2684 <system_clock_source_dfll_set_config+0x78>)
    264e:	400a      	ands	r2, r1
    2650:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2652:	4a0b      	ldr	r2, [pc, #44]	; (2680 <system_clock_source_dfll_set_config+0x74>)
    2654:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2656:	6811      	ldr	r1, [r2, #0]
    2658:	4b0b      	ldr	r3, [pc, #44]	; (2688 <system_clock_source_dfll_set_config+0x7c>)
    265a:	430b      	orrs	r3, r1
    265c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    265e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2660:	7b03      	ldrb	r3, [r0, #12]
    2662:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2664:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2666:	4313      	orrs	r3, r2
    2668:	89c2      	ldrh	r2, [r0, #14]
    266a:	0412      	lsls	r2, r2, #16
    266c:	4905      	ldr	r1, [pc, #20]	; (2684 <system_clock_source_dfll_set_config+0x78>)
    266e:	400a      	ands	r2, r1
    2670:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2672:	4a03      	ldr	r2, [pc, #12]	; (2680 <system_clock_source_dfll_set_config+0x74>)
    2674:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2676:	6813      	ldr	r3, [r2, #0]
    2678:	2104      	movs	r1, #4
    267a:	430b      	orrs	r3, r1
    267c:	6013      	str	r3, [r2, #0]
    267e:	e7ee      	b.n	265e <system_clock_source_dfll_set_config+0x52>
    2680:	20000218 	.word	0x20000218
    2684:	03ff0000 	.word	0x03ff0000
    2688:	00000424 	.word	0x00000424

0000268c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    268c:	2808      	cmp	r0, #8
    268e:	d803      	bhi.n	2698 <system_clock_source_enable+0xc>
    2690:	0080      	lsls	r0, r0, #2
    2692:	4b25      	ldr	r3, [pc, #148]	; (2728 <system_clock_source_enable+0x9c>)
    2694:	581b      	ldr	r3, [r3, r0]
    2696:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2698:	2017      	movs	r0, #23
    269a:	e044      	b.n	2726 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    269c:	4a23      	ldr	r2, [pc, #140]	; (272c <system_clock_source_enable+0xa0>)
    269e:	6a13      	ldr	r3, [r2, #32]
    26a0:	2102      	movs	r1, #2
    26a2:	430b      	orrs	r3, r1
    26a4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    26a6:	2000      	movs	r0, #0
    26a8:	e03d      	b.n	2726 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    26aa:	4a20      	ldr	r2, [pc, #128]	; (272c <system_clock_source_enable+0xa0>)
    26ac:	6993      	ldr	r3, [r2, #24]
    26ae:	2102      	movs	r1, #2
    26b0:	430b      	orrs	r3, r1
    26b2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    26b4:	2000      	movs	r0, #0
		break;
    26b6:	e036      	b.n	2726 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    26b8:	4a1c      	ldr	r2, [pc, #112]	; (272c <system_clock_source_enable+0xa0>)
    26ba:	8a13      	ldrh	r3, [r2, #16]
    26bc:	2102      	movs	r1, #2
    26be:	430b      	orrs	r3, r1
    26c0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    26c2:	2000      	movs	r0, #0
		break;
    26c4:	e02f      	b.n	2726 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    26c6:	4a19      	ldr	r2, [pc, #100]	; (272c <system_clock_source_enable+0xa0>)
    26c8:	8a93      	ldrh	r3, [r2, #20]
    26ca:	2102      	movs	r1, #2
    26cc:	430b      	orrs	r3, r1
    26ce:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    26d0:	2000      	movs	r0, #0
		break;
    26d2:	e028      	b.n	2726 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    26d4:	4916      	ldr	r1, [pc, #88]	; (2730 <system_clock_source_enable+0xa4>)
    26d6:	680b      	ldr	r3, [r1, #0]
    26d8:	2202      	movs	r2, #2
    26da:	4313      	orrs	r3, r2
    26dc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    26de:	4b13      	ldr	r3, [pc, #76]	; (272c <system_clock_source_enable+0xa0>)
    26e0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    26e2:	0019      	movs	r1, r3
    26e4:	320e      	adds	r2, #14
    26e6:	68cb      	ldr	r3, [r1, #12]
    26e8:	421a      	tst	r2, r3
    26ea:	d0fc      	beq.n	26e6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    26ec:	4a10      	ldr	r2, [pc, #64]	; (2730 <system_clock_source_enable+0xa4>)
    26ee:	6891      	ldr	r1, [r2, #8]
    26f0:	4b0e      	ldr	r3, [pc, #56]	; (272c <system_clock_source_enable+0xa0>)
    26f2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    26f4:	6852      	ldr	r2, [r2, #4]
    26f6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    26f8:	2200      	movs	r2, #0
    26fa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    26fc:	0019      	movs	r1, r3
    26fe:	3210      	adds	r2, #16
    2700:	68cb      	ldr	r3, [r1, #12]
    2702:	421a      	tst	r2, r3
    2704:	d0fc      	beq.n	2700 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2706:	4b0a      	ldr	r3, [pc, #40]	; (2730 <system_clock_source_enable+0xa4>)
    2708:	681b      	ldr	r3, [r3, #0]
    270a:	b29b      	uxth	r3, r3
    270c:	4a07      	ldr	r2, [pc, #28]	; (272c <system_clock_source_enable+0xa0>)
    270e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2710:	2000      	movs	r0, #0
    2712:	e008      	b.n	2726 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2714:	4905      	ldr	r1, [pc, #20]	; (272c <system_clock_source_enable+0xa0>)
    2716:	2244      	movs	r2, #68	; 0x44
    2718:	5c8b      	ldrb	r3, [r1, r2]
    271a:	2002      	movs	r0, #2
    271c:	4303      	orrs	r3, r0
    271e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2720:	2000      	movs	r0, #0
		break;
    2722:	e000      	b.n	2726 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2724:	2000      	movs	r0, #0
}
    2726:	4770      	bx	lr
    2728:	00007618 	.word	0x00007618
    272c:	40000800 	.word	0x40000800
    2730:	20000218 	.word	0x20000218

00002734 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2738:	22c2      	movs	r2, #194	; 0xc2
    273a:	00d2      	lsls	r2, r2, #3
    273c:	4b42      	ldr	r3, [pc, #264]	; (2848 <system_clock_init+0x114>)
    273e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2740:	4a42      	ldr	r2, [pc, #264]	; (284c <system_clock_init+0x118>)
    2742:	6853      	ldr	r3, [r2, #4]
    2744:	211e      	movs	r1, #30
    2746:	438b      	bics	r3, r1
    2748:	391a      	subs	r1, #26
    274a:	430b      	orrs	r3, r1
    274c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    274e:	2201      	movs	r2, #1
    2750:	ab01      	add	r3, sp, #4
    2752:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2754:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2756:	4d3e      	ldr	r5, [pc, #248]	; (2850 <system_clock_init+0x11c>)
    2758:	b2e0      	uxtb	r0, r4
    275a:	a901      	add	r1, sp, #4
    275c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    275e:	3401      	adds	r4, #1
    2760:	2c25      	cmp	r4, #37	; 0x25
    2762:	d1f9      	bne.n	2758 <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2764:	4c3b      	ldr	r4, [pc, #236]	; (2854 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2766:	6823      	ldr	r3, [r4, #0]
    2768:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    276a:	4937      	ldr	r1, [pc, #220]	; (2848 <system_clock_init+0x114>)
    276c:	698a      	ldr	r2, [r1, #24]
    276e:	0e5b      	lsrs	r3, r3, #25
    2770:	041b      	lsls	r3, r3, #16
    2772:	4839      	ldr	r0, [pc, #228]	; (2858 <system_clock_init+0x124>)
    2774:	4002      	ands	r2, r0
    2776:	4313      	orrs	r3, r2
    2778:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    277a:	a80a      	add	r0, sp, #40	; 0x28
    277c:	2301      	movs	r3, #1
    277e:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2780:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2782:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2784:	2207      	movs	r2, #7
    2786:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2788:	2500      	movs	r5, #0
    278a:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    278c:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    278e:	4b33      	ldr	r3, [pc, #204]	; (285c <system_clock_init+0x128>)
    2790:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2792:	2004      	movs	r0, #4
    2794:	4b32      	ldr	r3, [pc, #200]	; (2860 <system_clock_init+0x12c>)
    2796:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2798:	ab05      	add	r3, sp, #20
    279a:	2200      	movs	r2, #0
    279c:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    279e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    27a0:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    27a2:	2120      	movs	r1, #32
    27a4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    27a6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    27a8:	6823      	ldr	r3, [r4, #0]
    27aa:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    27ac:	2b3f      	cmp	r3, #63	; 0x3f
    27ae:	d049      	beq.n	2844 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    27b0:	a805      	add	r0, sp, #20
    27b2:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    27b4:	2307      	movs	r3, #7
    27b6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    27b8:	3303      	adds	r3, #3
    27ba:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    27bc:	4b29      	ldr	r3, [pc, #164]	; (2864 <system_clock_init+0x130>)
    27be:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    27c0:	3bff      	subs	r3, #255	; 0xff
    27c2:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    27c4:	4b28      	ldr	r3, [pc, #160]	; (2868 <system_clock_init+0x134>)
    27c6:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    27c8:	4b28      	ldr	r3, [pc, #160]	; (286c <system_clock_init+0x138>)
    27ca:	4798      	blx	r3
	config->run_in_standby  = false;
    27cc:	a804      	add	r0, sp, #16
    27ce:	2400      	movs	r4, #0
    27d0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    27d2:	2501      	movs	r5, #1
    27d4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    27d6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    27d8:	4b25      	ldr	r3, [pc, #148]	; (2870 <system_clock_init+0x13c>)
    27da:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    27dc:	2006      	movs	r0, #6
    27de:	4e20      	ldr	r6, [pc, #128]	; (2860 <system_clock_init+0x12c>)
    27e0:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    27e2:	4b24      	ldr	r3, [pc, #144]	; (2874 <system_clock_init+0x140>)
    27e4:	4798      	blx	r3
	config->division_factor    = 1;
    27e6:	a901      	add	r1, sp, #4
    27e8:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    27ea:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    27ec:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    27ee:	2304      	movs	r3, #4
    27f0:	700b      	strb	r3, [r1, #0]
    27f2:	720d      	strb	r5, [r1, #8]
    27f4:	2007      	movs	r0, #7
    27f6:	4b20      	ldr	r3, [pc, #128]	; (2878 <system_clock_init+0x144>)
    27f8:	4798      	blx	r3
    27fa:	2007      	movs	r0, #7
    27fc:	4b1f      	ldr	r3, [pc, #124]	; (287c <system_clock_init+0x148>)
    27fe:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2800:	2007      	movs	r0, #7
    2802:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2804:	4910      	ldr	r1, [pc, #64]	; (2848 <system_clock_init+0x114>)
    2806:	2210      	movs	r2, #16
    2808:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    280a:	421a      	tst	r2, r3
    280c:	d0fc      	beq.n	2808 <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    280e:	4a0e      	ldr	r2, [pc, #56]	; (2848 <system_clock_init+0x114>)
    2810:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2812:	2180      	movs	r1, #128	; 0x80
    2814:	430b      	orrs	r3, r1
    2816:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2818:	4a19      	ldr	r2, [pc, #100]	; (2880 <system_clock_init+0x14c>)
    281a:	2300      	movs	r3, #0
    281c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    281e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2820:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2822:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2824:	a901      	add	r1, sp, #4
    2826:	2201      	movs	r2, #1
    2828:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    282a:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    282c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    282e:	3307      	adds	r3, #7
    2830:	700b      	strb	r3, [r1, #0]
    2832:	720a      	strb	r2, [r1, #8]
    2834:	2000      	movs	r0, #0
    2836:	4b10      	ldr	r3, [pc, #64]	; (2878 <system_clock_init+0x144>)
    2838:	4798      	blx	r3
    283a:	2000      	movs	r0, #0
    283c:	4b0f      	ldr	r3, [pc, #60]	; (287c <system_clock_init+0x148>)
    283e:	4798      	blx	r3
#endif
}
    2840:	b00c      	add	sp, #48	; 0x30
    2842:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    2844:	3b20      	subs	r3, #32
    2846:	e7b3      	b.n	27b0 <system_clock_init+0x7c>
    2848:	40000800 	.word	0x40000800
    284c:	41004000 	.word	0x41004000
    2850:	0000638d 	.word	0x0000638d
    2854:	00806024 	.word	0x00806024
    2858:	ff80ffff 	.word	0xff80ffff
    285c:	00002591 	.word	0x00002591
    2860:	0000268d 	.word	0x0000268d
    2864:	000001ff 	.word	0x000001ff
    2868:	ffffbb80 	.word	0xffffbb80
    286c:	0000260d 	.word	0x0000260d
    2870:	00002555 	.word	0x00002555
    2874:	00006155 	.word	0x00006155
    2878:	00006179 	.word	0x00006179
    287c:	00006231 	.word	0x00006231
    2880:	40000400 	.word	0x40000400

00002884 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2884:	b510      	push	{r4, lr}
    2886:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2888:	ab03      	add	r3, sp, #12
    288a:	2200      	movs	r2, #0
    288c:	701a      	strb	r2, [r3, #0]
    288e:	3203      	adds	r2, #3
    2890:	705a      	strb	r2, [r3, #1]
    2892:	3a01      	subs	r2, #1
    2894:	709a      	strb	r2, [r3, #2]
    2896:	3a01      	subs	r2, #1
    2898:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    289a:	4b27      	ldr	r3, [pc, #156]	; (2938 <udd_sleep_mode+0xb4>)
    289c:	781b      	ldrb	r3, [r3, #0]
    289e:	4283      	cmp	r3, r0
    28a0:	d007      	beq.n	28b2 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    28a2:	2800      	cmp	r0, #0
    28a4:	d107      	bne.n	28b6 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    28a6:	4b24      	ldr	r3, [pc, #144]	; (2938 <udd_sleep_mode+0xb4>)
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d123      	bne.n	28f6 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    28ae:	4b22      	ldr	r3, [pc, #136]	; (2938 <udd_sleep_mode+0xb4>)
    28b0:	7018      	strb	r0, [r3, #0]
}
    28b2:	b004      	add	sp, #16
    28b4:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    28b6:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    28b8:	5c1b      	ldrb	r3, [r3, r0]
    28ba:	4a20      	ldr	r2, [pc, #128]	; (293c <udd_sleep_mode+0xb8>)
    28bc:	5cd2      	ldrb	r2, [r2, r3]
    28be:	2aff      	cmp	r2, #255	; 0xff
    28c0:	d100      	bne.n	28c4 <udd_sleep_mode+0x40>
    28c2:	e7fe      	b.n	28c2 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    28c4:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    28c8:	4251      	negs	r1, r2
    28ca:	414a      	adcs	r2, r1
    28cc:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    28ce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    28d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    28d4:	2100      	movs	r1, #0
    28d6:	4a1a      	ldr	r2, [pc, #104]	; (2940 <udd_sleep_mode+0xbc>)
    28d8:	7011      	strb	r1, [r2, #0]
	return flags;
    28da:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    28dc:	4917      	ldr	r1, [pc, #92]	; (293c <udd_sleep_mode+0xb8>)
    28de:	5cca      	ldrb	r2, [r1, r3]
    28e0:	3201      	adds	r2, #1
    28e2:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    28e4:	2c00      	cmp	r4, #0
    28e6:	d0de      	beq.n	28a6 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    28e8:	2201      	movs	r2, #1
    28ea:	4b15      	ldr	r3, [pc, #84]	; (2940 <udd_sleep_mode+0xbc>)
    28ec:	701a      	strb	r2, [r3, #0]
    28ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    28f2:	b662      	cpsie	i
    28f4:	e7d7      	b.n	28a6 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    28f6:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    28f8:	5cd3      	ldrb	r3, [r2, r3]
    28fa:	4a10      	ldr	r2, [pc, #64]	; (293c <udd_sleep_mode+0xb8>)
    28fc:	5cd2      	ldrb	r2, [r2, r3]
    28fe:	2a00      	cmp	r2, #0
    2900:	d100      	bne.n	2904 <udd_sleep_mode+0x80>
    2902:	e7fe      	b.n	2902 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2904:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2908:	4251      	negs	r1, r2
    290a:	414a      	adcs	r2, r1
    290c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    290e:	b672      	cpsid	i
    2910:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2914:	2100      	movs	r1, #0
    2916:	4a0a      	ldr	r2, [pc, #40]	; (2940 <udd_sleep_mode+0xbc>)
    2918:	7011      	strb	r1, [r2, #0]
	return flags;
    291a:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    291c:	4907      	ldr	r1, [pc, #28]	; (293c <udd_sleep_mode+0xb8>)
    291e:	5cca      	ldrb	r2, [r1, r3]
    2920:	3a01      	subs	r2, #1
    2922:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2924:	2c00      	cmp	r4, #0
    2926:	d0c2      	beq.n	28ae <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2928:	2201      	movs	r2, #1
    292a:	4b05      	ldr	r3, [pc, #20]	; (2940 <udd_sleep_mode+0xbc>)
    292c:	701a      	strb	r2, [r3, #0]
    292e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2932:	b662      	cpsie	i
    2934:	e7bb      	b.n	28ae <udd_sleep_mode+0x2a>
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	20000288 	.word	0x20000288
    293c:	20000ae8 	.word	0x20000ae8
    2940:	200000f9 	.word	0x200000f9

00002944 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2944:	0643      	lsls	r3, r0, #25
    2946:	d00b      	beq.n	2960 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2948:	230f      	movs	r3, #15
    294a:	4003      	ands	r3, r0
    294c:	005b      	lsls	r3, r3, #1
    294e:	09c0      	lsrs	r0, r0, #7
    2950:	1818      	adds	r0, r3, r0
    2952:	3802      	subs	r0, #2
    2954:	0083      	lsls	r3, r0, #2
    2956:	1818      	adds	r0, r3, r0
    2958:	0080      	lsls	r0, r0, #2
    295a:	4b02      	ldr	r3, [pc, #8]	; (2964 <udd_ep_get_job+0x20>)
    295c:	1818      	adds	r0, r3, r0
	}
}
    295e:	4770      	bx	lr
		return NULL;
    2960:	2000      	movs	r0, #0
    2962:	e7fc      	b.n	295e <udd_ep_get_job+0x1a>
    2964:	20000238 	.word	0x20000238

00002968 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2968:	b5f0      	push	{r4, r5, r6, r7, lr}
    296a:	46d6      	mov	lr, sl
    296c:	464f      	mov	r7, r9
    296e:	4646      	mov	r6, r8
    2970:	b5c0      	push	{r6, r7, lr}
    2972:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2974:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2976:	b26b      	sxtb	r3, r5
    2978:	2b00      	cmp	r3, #0
    297a:	db26      	blt.n	29ca <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    297c:	0028      	movs	r0, r5
    297e:	4b5e      	ldr	r3, [pc, #376]	; (2af8 <udd_ep_transfer_process+0x190>)
    2980:	4798      	blx	r3
    2982:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2984:	270f      	movs	r7, #15
    2986:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2988:	8a03      	ldrh	r3, [r0, #16]
    298a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    298c:	464b      	mov	r3, r9
    298e:	881b      	ldrh	r3, [r3, #0]
    2990:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2992:	7c83      	ldrb	r3, [r0, #18]
    2994:	075b      	lsls	r3, r3, #29
    2996:	d46a      	bmi.n	2a6e <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2998:	68e3      	ldr	r3, [r4, #12]
    299a:	4453      	add	r3, sl
    299c:	001e      	movs	r6, r3
    299e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    29a0:	68a3      	ldr	r3, [r4, #8]
    29a2:	429e      	cmp	r6, r3
    29a4:	d800      	bhi.n	29a8 <udd_ep_transfer_process+0x40>
    29a6:	e074      	b.n	2a92 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    29a8:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    29aa:	7ca3      	ldrb	r3, [r4, #18]
    29ac:	2201      	movs	r2, #1
    29ae:	4393      	bics	r3, r2
    29b0:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    29b2:	6823      	ldr	r3, [r4, #0]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d003      	beq.n	29c0 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    29b8:	68e1      	ldr	r1, [r4, #12]
    29ba:	002a      	movs	r2, r5
    29bc:	2000      	movs	r0, #0
    29be:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    29c0:	bc1c      	pop	{r2, r3, r4}
    29c2:	4690      	mov	r8, r2
    29c4:	4699      	mov	r9, r3
    29c6:	46a2      	mov	sl, r4
    29c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    29ca:	0028      	movs	r0, r5
    29cc:	4b4a      	ldr	r3, [pc, #296]	; (2af8 <udd_ep_transfer_process+0x190>)
    29ce:	4798      	blx	r3
    29d0:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    29d2:	270f      	movs	r7, #15
    29d4:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    29d6:	8a03      	ldrh	r3, [r0, #16]
    29d8:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    29da:	464b      	mov	r3, r9
    29dc:	885e      	ldrh	r6, [r3, #2]
    29de:	68c3      	ldr	r3, [r0, #12]
    29e0:	469c      	mov	ip, r3
    29e2:	4466      	add	r6, ip
    29e4:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    29e6:	6881      	ldr	r1, [r0, #8]
    29e8:	428e      	cmp	r6, r1
    29ea:	d025      	beq.n	2a38 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    29ec:	1b8d      	subs	r5, r1, r6
    29ee:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    29f0:	4b42      	ldr	r3, [pc, #264]	; (2afc <udd_ep_transfer_process+0x194>)
    29f2:	429d      	cmp	r5, r3
    29f4:	d906      	bls.n	2a04 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    29f6:	001d      	movs	r5, r3
    29f8:	4641      	mov	r1, r8
    29fa:	0018      	movs	r0, r3
    29fc:	4b40      	ldr	r3, [pc, #256]	; (2b00 <udd_ep_transfer_process+0x198>)
    29fe:	4798      	blx	r3
    2a00:	1a6d      	subs	r5, r5, r1
    2a02:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2a04:	7ca2      	ldrb	r2, [r4, #18]
    2a06:	2300      	movs	r3, #0
    2a08:	0792      	lsls	r2, r2, #30
    2a0a:	d507      	bpl.n	2a1c <udd_ep_transfer_process+0xb4>
    2a0c:	4641      	mov	r1, r8
    2a0e:	0028      	movs	r0, r5
    2a10:	4b3c      	ldr	r3, [pc, #240]	; (2b04 <udd_ep_transfer_process+0x19c>)
    2a12:	4798      	blx	r3
    2a14:	b289      	uxth	r1, r1
    2a16:	424b      	negs	r3, r1
    2a18:	414b      	adcs	r3, r1
    2a1a:	b2db      	uxtb	r3, r3
    2a1c:	005b      	lsls	r3, r3, #1
    2a1e:	7ca2      	ldrb	r2, [r4, #18]
    2a20:	2102      	movs	r1, #2
    2a22:	438a      	bics	r2, r1
    2a24:	4313      	orrs	r3, r2
    2a26:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2a28:	6862      	ldr	r2, [r4, #4]
    2a2a:	1992      	adds	r2, r2, r6
    2a2c:	002b      	movs	r3, r5
    2a2e:	0039      	movs	r1, r7
    2a30:	4835      	ldr	r0, [pc, #212]	; (2b08 <udd_ep_transfer_process+0x1a0>)
    2a32:	4c36      	ldr	r4, [pc, #216]	; (2b0c <udd_ep_transfer_process+0x1a4>)
    2a34:	47a0      	blx	r4
    2a36:	e7c3      	b.n	29c0 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2a38:	7c83      	ldrb	r3, [r0, #18]
    2a3a:	079b      	lsls	r3, r3, #30
    2a3c:	d40b      	bmi.n	2a56 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2a3e:	7c83      	ldrb	r3, [r0, #18]
    2a40:	2201      	movs	r2, #1
    2a42:	4393      	bics	r3, r2
    2a44:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2a46:	6803      	ldr	r3, [r0, #0]
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d0b9      	beq.n	29c0 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2a4c:	002a      	movs	r2, r5
    2a4e:	0031      	movs	r1, r6
    2a50:	2000      	movs	r0, #0
    2a52:	4798      	blx	r3
    2a54:	e7b4      	b.n	29c0 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2a56:	7c83      	ldrb	r3, [r0, #18]
    2a58:	2202      	movs	r2, #2
    2a5a:	4393      	bics	r3, r2
    2a5c:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2a5e:	6842      	ldr	r2, [r0, #4]
    2a60:	1992      	adds	r2, r2, r6
    2a62:	2300      	movs	r3, #0
    2a64:	0039      	movs	r1, r7
    2a66:	4828      	ldr	r0, [pc, #160]	; (2b08 <udd_ep_transfer_process+0x1a0>)
    2a68:	4c28      	ldr	r4, [pc, #160]	; (2b0c <udd_ep_transfer_process+0x1a4>)
    2a6a:	47a0      	blx	r4
    2a6c:	e7a8      	b.n	29c0 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2a6e:	6843      	ldr	r3, [r0, #4]
    2a70:	68c2      	ldr	r2, [r0, #12]
    2a72:	4694      	mov	ip, r2
    2a74:	4463      	add	r3, ip
    2a76:	001e      	movs	r6, r3
    2a78:	4641      	mov	r1, r8
    2a7a:	6880      	ldr	r0, [r0, #8]
    2a7c:	4b21      	ldr	r3, [pc, #132]	; (2b04 <udd_ep_transfer_process+0x19c>)
    2a7e:	4798      	blx	r3
    2a80:	000a      	movs	r2, r1
    2a82:	1e7b      	subs	r3, r7, #1
    2a84:	019b      	lsls	r3, r3, #6
    2a86:	4922      	ldr	r1, [pc, #136]	; (2b10 <udd_ep_transfer_process+0x1a8>)
    2a88:	1859      	adds	r1, r3, r1
    2a8a:	0030      	movs	r0, r6
    2a8c:	4b21      	ldr	r3, [pc, #132]	; (2b14 <udd_ep_transfer_process+0x1ac>)
    2a8e:	4798      	blx	r3
    2a90:	e782      	b.n	2998 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2a92:	464a      	mov	r2, r9
    2a94:	8892      	ldrh	r2, [r2, #4]
    2a96:	4552      	cmp	r2, sl
    2a98:	d000      	beq.n	2a9c <udd_ep_transfer_process+0x134>
    2a9a:	e786      	b.n	29aa <udd_ep_transfer_process+0x42>
    2a9c:	429e      	cmp	r6, r3
    2a9e:	d100      	bne.n	2aa2 <udd_ep_transfer_process+0x13a>
    2aa0:	e783      	b.n	29aa <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2aa2:	1b9b      	subs	r3, r3, r6
    2aa4:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2aa6:	4b15      	ldr	r3, [pc, #84]	; (2afc <udd_ep_transfer_process+0x194>)
    2aa8:	429d      	cmp	r5, r3
    2aaa:	d916      	bls.n	2ada <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2aac:	001d      	movs	r5, r3
    2aae:	4641      	mov	r1, r8
    2ab0:	0018      	movs	r0, r3
    2ab2:	4b13      	ldr	r3, [pc, #76]	; (2b00 <udd_ep_transfer_process+0x198>)
    2ab4:	4798      	blx	r3
    2ab6:	1a6b      	subs	r3, r5, r1
    2ab8:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2aba:	4598      	cmp	r8, r3
    2abc:	d914      	bls.n	2ae8 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2abe:	7ca3      	ldrb	r3, [r4, #18]
    2ac0:	2204      	movs	r2, #4
    2ac2:	4313      	orrs	r3, r2
    2ac4:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2ac6:	1e7a      	subs	r2, r7, #1
    2ac8:	0192      	lsls	r2, r2, #6
    2aca:	4b11      	ldr	r3, [pc, #68]	; (2b10 <udd_ep_transfer_process+0x1a8>)
    2acc:	18d2      	adds	r2, r2, r3
    2ace:	4643      	mov	r3, r8
    2ad0:	0039      	movs	r1, r7
    2ad2:	480d      	ldr	r0, [pc, #52]	; (2b08 <udd_ep_transfer_process+0x1a0>)
    2ad4:	4c10      	ldr	r4, [pc, #64]	; (2b18 <udd_ep_transfer_process+0x1b0>)
    2ad6:	47a0      	blx	r4
    2ad8:	e772      	b.n	29c0 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2ada:	4641      	mov	r1, r8
    2adc:	0028      	movs	r0, r5
    2ade:	4b09      	ldr	r3, [pc, #36]	; (2b04 <udd_ep_transfer_process+0x19c>)
    2ae0:	4798      	blx	r3
    2ae2:	1a6b      	subs	r3, r5, r1
    2ae4:	b29b      	uxth	r3, r3
    2ae6:	e7e8      	b.n	2aba <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2ae8:	6862      	ldr	r2, [r4, #4]
    2aea:	1992      	adds	r2, r2, r6
    2aec:	0039      	movs	r1, r7
    2aee:	4806      	ldr	r0, [pc, #24]	; (2b08 <udd_ep_transfer_process+0x1a0>)
    2af0:	4c09      	ldr	r4, [pc, #36]	; (2b18 <udd_ep_transfer_process+0x1b0>)
    2af2:	47a0      	blx	r4
    2af4:	e764      	b.n	29c0 <udd_ep_transfer_process+0x58>
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002945 	.word	0x00002945
    2afc:	00001fff 	.word	0x00001fff
    2b00:	000068e5 	.word	0x000068e5
    2b04:	00006711 	.word	0x00006711
    2b08:	200003cc 	.word	0x200003cc
    2b0c:	000041b1 	.word	0x000041b1
    2b10:	2000034c 	.word	0x2000034c
    2b14:	00006be1 	.word	0x00006be1
    2b18:	00004205 	.word	0x00004205

00002b1c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2b1c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2b1e:	2205      	movs	r2, #5
    2b20:	4b05      	ldr	r3, [pc, #20]	; (2b38 <udd_ctrl_stall_data+0x1c>)
    2b22:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2b24:	4c05      	ldr	r4, [pc, #20]	; (2b3c <udd_ctrl_stall_data+0x20>)
    2b26:	2180      	movs	r1, #128	; 0x80
    2b28:	0020      	movs	r0, r4
    2b2a:	4b05      	ldr	r3, [pc, #20]	; (2b40 <udd_ctrl_stall_data+0x24>)
    2b2c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2b2e:	2100      	movs	r1, #0
    2b30:	0020      	movs	r0, r4
    2b32:	4b04      	ldr	r3, [pc, #16]	; (2b44 <udd_ctrl_stall_data+0x28>)
    2b34:	4798      	blx	r3
}
    2b36:	bd10      	pop	{r4, pc}
    2b38:	20000236 	.word	0x20000236
    2b3c:	200003cc 	.word	0x200003cc
    2b40:	00004105 	.word	0x00004105
    2b44:	0000412b 	.word	0x0000412b

00002b48 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2b48:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2b4a:	4c08      	ldr	r4, [pc, #32]	; (2b6c <_usb_device_lpm_suspend+0x24>)
    2b4c:	2106      	movs	r1, #6
    2b4e:	0020      	movs	r0, r4
    2b50:	4d07      	ldr	r5, [pc, #28]	; (2b70 <_usb_device_lpm_suspend+0x28>)
    2b52:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2b54:	2104      	movs	r1, #4
    2b56:	0020      	movs	r0, r4
    2b58:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2b5a:	2102      	movs	r1, #2
    2b5c:	0020      	movs	r0, r4
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <_usb_device_lpm_suspend+0x2c>)
    2b60:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2b62:	2002      	movs	r0, #2
    2b64:	4b04      	ldr	r3, [pc, #16]	; (2b78 <_usb_device_lpm_suspend+0x30>)
    2b66:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    2b68:	bd70      	pop	{r4, r5, r6, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	200003cc 	.word	0x200003cc
    2b70:	00003c19 	.word	0x00003c19
    2b74:	00003bf9 	.word	0x00003bf9
    2b78:	00002885 	.word	0x00002885

00002b7c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2b7c:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2b7e:	4b13      	ldr	r3, [pc, #76]	; (2bcc <_usb_on_wakeup+0x50>)
    2b80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2b82:	069b      	lsls	r3, r3, #26
    2b84:	d41c      	bmi.n	2bc0 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2b86:	4911      	ldr	r1, [pc, #68]	; (2bcc <_usb_on_wakeup+0x50>)
    2b88:	22d0      	movs	r2, #208	; 0xd0
    2b8a:	68cb      	ldr	r3, [r1, #12]
    2b8c:	4013      	ands	r3, r2
    2b8e:	2bd0      	cmp	r3, #208	; 0xd0
    2b90:	d1fb      	bne.n	2b8a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2b92:	4c0f      	ldr	r4, [pc, #60]	; (2bd0 <_usb_on_wakeup+0x54>)
    2b94:	2102      	movs	r1, #2
    2b96:	0020      	movs	r0, r4
    2b98:	4b0e      	ldr	r3, [pc, #56]	; (2bd4 <_usb_on_wakeup+0x58>)
    2b9a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2b9c:	2104      	movs	r1, #4
    2b9e:	0020      	movs	r0, r4
    2ba0:	4d0d      	ldr	r5, [pc, #52]	; (2bd8 <_usb_on_wakeup+0x5c>)
    2ba2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2ba4:	4a0d      	ldr	r2, [pc, #52]	; (2bdc <_usb_on_wakeup+0x60>)
    2ba6:	2106      	movs	r1, #6
    2ba8:	0020      	movs	r0, r4
    2baa:	4b0d      	ldr	r3, [pc, #52]	; (2be0 <_usb_on_wakeup+0x64>)
    2bac:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2bae:	2106      	movs	r1, #6
    2bb0:	0020      	movs	r0, r4
    2bb2:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    2bb4:	2003      	movs	r0, #3
    2bb6:	4b0b      	ldr	r3, [pc, #44]	; (2be4 <_usb_on_wakeup+0x68>)
    2bb8:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    2bba:	4b0b      	ldr	r3, [pc, #44]	; (2be8 <_usb_on_wakeup+0x6c>)
    2bbc:	4798      	blx	r3
#endif
}
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2bc0:	4902      	ldr	r1, [pc, #8]	; (2bcc <_usb_on_wakeup+0x50>)
    2bc2:	2210      	movs	r2, #16
    2bc4:	68cb      	ldr	r3, [r1, #12]
    2bc6:	421a      	tst	r2, r3
    2bc8:	d0fc      	beq.n	2bc4 <_usb_on_wakeup+0x48>
    2bca:	e7e2      	b.n	2b92 <_usb_on_wakeup+0x16>
    2bcc:	40000800 	.word	0x40000800
    2bd0:	200003cc 	.word	0x200003cc
    2bd4:	00003c19 	.word	0x00003c19
    2bd8:	00003bf9 	.word	0x00003bf9
    2bdc:	00002b49 	.word	0x00002b49
    2be0:	00003bd5 	.word	0x00003bd5
    2be4:	00002885 	.word	0x00002885
    2be8:	000037b1 	.word	0x000037b1

00002bec <_usb_on_bus_reset>:
{
    2bec:	b530      	push	{r4, r5, lr}
    2bee:	b083      	sub	sp, #12
    2bf0:	0004      	movs	r4, r0
	udc_reset();
    2bf2:	4b1e      	ldr	r3, [pc, #120]	; (2c6c <_usb_on_bus_reset+0x80>)
    2bf4:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    2bf6:	2380      	movs	r3, #128	; 0x80
    2bf8:	6822      	ldr	r2, [r4, #0]
    2bfa:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    2bfc:	ad01      	add	r5, sp, #4
    2bfe:	0028      	movs	r0, r5
    2c00:	4b1b      	ldr	r3, [pc, #108]	; (2c70 <_usb_on_bus_reset+0x84>)
    2c02:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    2c04:	2303      	movs	r3, #3
    2c06:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    2c08:	0029      	movs	r1, r5
    2c0a:	0020      	movs	r0, r4
    2c0c:	4b19      	ldr	r3, [pc, #100]	; (2c74 <_usb_on_bus_reset+0x88>)
    2c0e:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    2c10:	4919      	ldr	r1, [pc, #100]	; (2c78 <_usb_on_bus_reset+0x8c>)
    2c12:	0020      	movs	r0, r4
    2c14:	4b19      	ldr	r3, [pc, #100]	; (2c7c <_usb_on_bus_reset+0x90>)
    2c16:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    2c18:	4b19      	ldr	r3, [pc, #100]	; (2c80 <_usb_on_bus_reset+0x94>)
    2c1a:	2202      	movs	r2, #2
    2c1c:	2100      	movs	r1, #0
    2c1e:	0020      	movs	r0, r4
    2c20:	4d18      	ldr	r5, [pc, #96]	; (2c84 <_usb_on_bus_reset+0x98>)
    2c22:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    2c24:	4b18      	ldr	r3, [pc, #96]	; (2c88 <_usb_on_bus_reset+0x9c>)
    2c26:	2200      	movs	r2, #0
    2c28:	2100      	movs	r1, #0
    2c2a:	0020      	movs	r0, r4
    2c2c:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    2c2e:	4b17      	ldr	r3, [pc, #92]	; (2c8c <_usb_on_bus_reset+0xa0>)
    2c30:	2201      	movs	r2, #1
    2c32:	2100      	movs	r1, #0
    2c34:	0020      	movs	r0, r4
    2c36:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    2c38:	2202      	movs	r2, #2
    2c3a:	2100      	movs	r1, #0
    2c3c:	0020      	movs	r0, r4
    2c3e:	4d14      	ldr	r5, [pc, #80]	; (2c90 <_usb_on_bus_reset+0xa4>)
    2c40:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2c42:	2200      	movs	r2, #0
    2c44:	2100      	movs	r1, #0
    2c46:	0020      	movs	r0, r4
    2c48:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2c4a:	2201      	movs	r2, #1
    2c4c:	2100      	movs	r1, #0
    2c4e:	0020      	movs	r0, r4
    2c50:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    2c52:	6821      	ldr	r1, [r4, #0]
    2c54:	890b      	ldrh	r3, [r1, #8]
    2c56:	4a0f      	ldr	r2, [pc, #60]	; (2c94 <_usb_on_bus_reset+0xa8>)
    2c58:	401a      	ands	r2, r3
    2c5a:	2380      	movs	r3, #128	; 0x80
    2c5c:	00db      	lsls	r3, r3, #3
    2c5e:	4313      	orrs	r3, r2
    2c60:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    2c62:	2200      	movs	r2, #0
    2c64:	4b0c      	ldr	r3, [pc, #48]	; (2c98 <_usb_on_bus_reset+0xac>)
    2c66:	701a      	strb	r2, [r3, #0]
}
    2c68:	b003      	add	sp, #12
    2c6a:	bd30      	pop	{r4, r5, pc}
    2c6c:	00001881 	.word	0x00001881
    2c70:	00003e25 	.word	0x00003e25
    2c74:	00003e35 	.word	0x00003e35
    2c78:	2000054c 	.word	0x2000054c
    2c7c:	00004255 	.word	0x00004255
    2c80:	00002dd5 	.word	0x00002dd5
    2c84:	00003c35 	.word	0x00003c35
    2c88:	000030f1 	.word	0x000030f1
    2c8c:	00002cd9 	.word	0x00002cd9
    2c90:	00003c85 	.word	0x00003c85
    2c94:	fffff3ff 	.word	0xfffff3ff
    2c98:	20000236 	.word	0x20000236

00002c9c <udd_ctrl_send_zlp_in>:
{
    2c9c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2c9e:	2203      	movs	r2, #3
    2ca0:	4b07      	ldr	r3, [pc, #28]	; (2cc0 <udd_ctrl_send_zlp_in+0x24>)
    2ca2:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2ca4:	4c07      	ldr	r4, [pc, #28]	; (2cc4 <udd_ctrl_send_zlp_in+0x28>)
    2ca6:	4908      	ldr	r1, [pc, #32]	; (2cc8 <udd_ctrl_send_zlp_in+0x2c>)
    2ca8:	0020      	movs	r0, r4
    2caa:	4b08      	ldr	r3, [pc, #32]	; (2ccc <udd_ctrl_send_zlp_in+0x30>)
    2cac:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2cae:	4b08      	ldr	r3, [pc, #32]	; (2cd0 <udd_ctrl_send_zlp_in+0x34>)
    2cb0:	689a      	ldr	r2, [r3, #8]
    2cb2:	2300      	movs	r3, #0
    2cb4:	2100      	movs	r1, #0
    2cb6:	0020      	movs	r0, r4
    2cb8:	4c06      	ldr	r4, [pc, #24]	; (2cd4 <udd_ctrl_send_zlp_in+0x38>)
    2cba:	47a0      	blx	r4
}
    2cbc:	bd10      	pop	{r4, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	20000236 	.word	0x20000236
    2cc4:	200003cc 	.word	0x200003cc
    2cc8:	2000054c 	.word	0x2000054c
    2ccc:	00004255 	.word	0x00004255
    2cd0:	20000534 	.word	0x20000534
    2cd4:	000041b1 	.word	0x000041b1

00002cd8 <_usb_ep0_on_tansfer_fail>:
{
    2cd8:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2cda:	7989      	ldrb	r1, [r1, #6]
    2cdc:	b24b      	sxtb	r3, r1
    2cde:	2b00      	cmp	r3, #0
    2ce0:	db06      	blt.n	2cf0 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2ce2:	4b0e      	ldr	r3, [pc, #56]	; (2d1c <_usb_ep0_on_tansfer_fail+0x44>)
    2ce4:	781b      	ldrb	r3, [r3, #0]
    2ce6:	2b02      	cmp	r3, #2
    2ce8:	d00f      	beq.n	2d0a <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2cea:	2b03      	cmp	r3, #3
    2cec:	d011      	beq.n	2d12 <_usb_ep0_on_tansfer_fail+0x3a>
}
    2cee:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2cf0:	4b0a      	ldr	r3, [pc, #40]	; (2d1c <_usb_ep0_on_tansfer_fail+0x44>)
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	2b01      	cmp	r3, #1
    2cf6:	d005      	beq.n	2d04 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cf8:	2b04      	cmp	r3, #4
    2cfa:	d1f8      	bne.n	2cee <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2cfc:	4808      	ldr	r0, [pc, #32]	; (2d20 <_usb_ep0_on_tansfer_fail+0x48>)
    2cfe:	4b09      	ldr	r3, [pc, #36]	; (2d24 <_usb_ep0_on_tansfer_fail+0x4c>)
    2d00:	4798      	blx	r3
    2d02:	e7f4      	b.n	2cee <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    2d04:	4b08      	ldr	r3, [pc, #32]	; (2d28 <_usb_ep0_on_tansfer_fail+0x50>)
    2d06:	4798      	blx	r3
    2d08:	e7f1      	b.n	2cee <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d0a:	2204      	movs	r2, #4
    2d0c:	4b03      	ldr	r3, [pc, #12]	; (2d1c <_usb_ep0_on_tansfer_fail+0x44>)
    2d0e:	701a      	strb	r2, [r3, #0]
    2d10:	e7ed      	b.n	2cee <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2d12:	4803      	ldr	r0, [pc, #12]	; (2d20 <_usb_ep0_on_tansfer_fail+0x48>)
    2d14:	4b03      	ldr	r3, [pc, #12]	; (2d24 <_usb_ep0_on_tansfer_fail+0x4c>)
    2d16:	4798      	blx	r3
}
    2d18:	e7e9      	b.n	2cee <_usb_ep0_on_tansfer_fail+0x16>
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	20000236 	.word	0x20000236
    2d20:	200003cc 	.word	0x200003cc
    2d24:	00004105 	.word	0x00004105
    2d28:	00002c9d 	.word	0x00002c9d

00002d2c <udd_ctrl_in_sent>:
{
    2d2c:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2d2e:	4b20      	ldr	r3, [pc, #128]	; (2db0 <udd_ctrl_in_sent+0x84>)
    2d30:	881b      	ldrh	r3, [r3, #0]
    2d32:	4a20      	ldr	r2, [pc, #128]	; (2db4 <udd_ctrl_in_sent+0x88>)
    2d34:	8994      	ldrh	r4, [r2, #12]
    2d36:	1ae4      	subs	r4, r4, r3
    2d38:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    2d3a:	2c00      	cmp	r4, #0
    2d3c:	d118      	bne.n	2d70 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2d3e:	4a1e      	ldr	r2, [pc, #120]	; (2db8 <udd_ctrl_in_sent+0x8c>)
    2d40:	8811      	ldrh	r1, [r2, #0]
    2d42:	185b      	adds	r3, r3, r1
    2d44:	b29b      	uxth	r3, r3
    2d46:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2d48:	4a1a      	ldr	r2, [pc, #104]	; (2db4 <udd_ctrl_in_sent+0x88>)
    2d4a:	88d2      	ldrh	r2, [r2, #6]
    2d4c:	429a      	cmp	r2, r3
    2d4e:	d023      	beq.n	2d98 <udd_ctrl_in_sent+0x6c>
    2d50:	4b1a      	ldr	r3, [pc, #104]	; (2dbc <udd_ctrl_in_sent+0x90>)
    2d52:	781b      	ldrb	r3, [r3, #0]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d11f      	bne.n	2d98 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2d58:	4b16      	ldr	r3, [pc, #88]	; (2db4 <udd_ctrl_in_sent+0x88>)
    2d5a:	695b      	ldr	r3, [r3, #20]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d023      	beq.n	2da8 <udd_ctrl_in_sent+0x7c>
    2d60:	4798      	blx	r3
    2d62:	2800      	cmp	r0, #0
    2d64:	d020      	beq.n	2da8 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    2d66:	2200      	movs	r2, #0
    2d68:	4b11      	ldr	r3, [pc, #68]	; (2db0 <udd_ctrl_in_sent+0x84>)
    2d6a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2d6c:	4b11      	ldr	r3, [pc, #68]	; (2db4 <udd_ctrl_in_sent+0x88>)
    2d6e:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2d70:	2c3f      	cmp	r4, #63	; 0x3f
    2d72:	d919      	bls.n	2da8 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    2d74:	2200      	movs	r2, #0
    2d76:	4b11      	ldr	r3, [pc, #68]	; (2dbc <udd_ctrl_in_sent+0x90>)
    2d78:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2d7a:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2d7c:	4d0c      	ldr	r5, [pc, #48]	; (2db0 <udd_ctrl_in_sent+0x84>)
    2d7e:	882b      	ldrh	r3, [r5, #0]
    2d80:	4a0c      	ldr	r2, [pc, #48]	; (2db4 <udd_ctrl_in_sent+0x88>)
    2d82:	6892      	ldr	r2, [r2, #8]
    2d84:	18d2      	adds	r2, r2, r3
    2d86:	0023      	movs	r3, r4
    2d88:	2100      	movs	r1, #0
    2d8a:	480d      	ldr	r0, [pc, #52]	; (2dc0 <udd_ctrl_in_sent+0x94>)
    2d8c:	4e0d      	ldr	r6, [pc, #52]	; (2dc4 <udd_ctrl_in_sent+0x98>)
    2d8e:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    2d90:	882b      	ldrh	r3, [r5, #0]
    2d92:	18e4      	adds	r4, r4, r3
    2d94:	802c      	strh	r4, [r5, #0]
}
    2d96:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d98:	2204      	movs	r2, #4
    2d9a:	4b0b      	ldr	r3, [pc, #44]	; (2dc8 <udd_ctrl_in_sent+0x9c>)
    2d9c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2d9e:	490b      	ldr	r1, [pc, #44]	; (2dcc <udd_ctrl_in_sent+0xa0>)
    2da0:	4807      	ldr	r0, [pc, #28]	; (2dc0 <udd_ctrl_in_sent+0x94>)
    2da2:	4b0b      	ldr	r3, [pc, #44]	; (2dd0 <udd_ctrl_in_sent+0xa4>)
    2da4:	4798      	blx	r3
			return;
    2da6:	e7f6      	b.n	2d96 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2da8:	2201      	movs	r2, #1
    2daa:	4b04      	ldr	r3, [pc, #16]	; (2dbc <udd_ctrl_in_sent+0x90>)
    2dac:	701a      	strb	r2, [r3, #0]
    2dae:	e7e5      	b.n	2d7c <udd_ctrl_in_sent+0x50>
    2db0:	20000232 	.word	0x20000232
    2db4:	20000534 	.word	0x20000534
    2db8:	20000234 	.word	0x20000234
    2dbc:	20000230 	.word	0x20000230
    2dc0:	200003cc 	.word	0x200003cc
    2dc4:	000041b1 	.word	0x000041b1
    2dc8:	20000236 	.word	0x20000236
    2dcc:	2000054c 	.word	0x2000054c
    2dd0:	00004255 	.word	0x00004255

00002dd4 <_usb_ep0_on_setup>:
{
    2dd4:	b510      	push	{r4, lr}
    2dd6:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2dd8:	4b2c      	ldr	r3, [pc, #176]	; (2e8c <_usb_ep0_on_setup+0xb8>)
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d007      	beq.n	2df0 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2de0:	4b2b      	ldr	r3, [pc, #172]	; (2e90 <_usb_ep0_on_setup+0xbc>)
    2de2:	691b      	ldr	r3, [r3, #16]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d000      	beq.n	2dea <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2de8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2dea:	2200      	movs	r2, #0
    2dec:	4b27      	ldr	r3, [pc, #156]	; (2e8c <_usb_ep0_on_setup+0xb8>)
    2dee:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2df0:	8823      	ldrh	r3, [r4, #0]
    2df2:	2b08      	cmp	r3, #8
    2df4:	d002      	beq.n	2dfc <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2df6:	4b27      	ldr	r3, [pc, #156]	; (2e94 <_usb_ep0_on_setup+0xc0>)
    2df8:	4798      	blx	r3
}
    2dfa:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2dfc:	4a24      	ldr	r2, [pc, #144]	; (2e90 <_usb_ep0_on_setup+0xbc>)
    2dfe:	4b26      	ldr	r3, [pc, #152]	; (2e98 <_usb_ep0_on_setup+0xc4>)
    2e00:	7819      	ldrb	r1, [r3, #0]
    2e02:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2e04:	7859      	ldrb	r1, [r3, #1]
    2e06:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2e08:	78d8      	ldrb	r0, [r3, #3]
    2e0a:	0200      	lsls	r0, r0, #8
    2e0c:	7899      	ldrb	r1, [r3, #2]
    2e0e:	1809      	adds	r1, r1, r0
    2e10:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2e12:	7958      	ldrb	r0, [r3, #5]
    2e14:	0200      	lsls	r0, r0, #8
    2e16:	7919      	ldrb	r1, [r3, #4]
    2e18:	1809      	adds	r1, r1, r0
    2e1a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2e1c:	79d9      	ldrb	r1, [r3, #7]
    2e1e:	0209      	lsls	r1, r1, #8
    2e20:	799b      	ldrb	r3, [r3, #6]
    2e22:	185b      	adds	r3, r3, r1
    2e24:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2e26:	4b1d      	ldr	r3, [pc, #116]	; (2e9c <_usb_ep0_on_setup+0xc8>)
    2e28:	4798      	blx	r3
    2e2a:	2800      	cmp	r0, #0
    2e2c:	d016      	beq.n	2e5c <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    2e2e:	4b18      	ldr	r3, [pc, #96]	; (2e90 <_usb_ep0_on_setup+0xbc>)
    2e30:	781b      	ldrb	r3, [r3, #0]
    2e32:	2b7f      	cmp	r3, #127	; 0x7f
    2e34:	d815      	bhi.n	2e62 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2e36:	4b16      	ldr	r3, [pc, #88]	; (2e90 <_usb_ep0_on_setup+0xbc>)
    2e38:	88db      	ldrh	r3, [r3, #6]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d022      	beq.n	2e84 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    2e3e:	2300      	movs	r3, #0
    2e40:	4a17      	ldr	r2, [pc, #92]	; (2ea0 <_usb_ep0_on_setup+0xcc>)
    2e42:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    2e44:	4a17      	ldr	r2, [pc, #92]	; (2ea4 <_usb_ep0_on_setup+0xd0>)
    2e46:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2e48:	2201      	movs	r2, #1
    2e4a:	4b10      	ldr	r3, [pc, #64]	; (2e8c <_usb_ep0_on_setup+0xb8>)
    2e4c:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2e4e:	2340      	movs	r3, #64	; 0x40
    2e50:	4a11      	ldr	r2, [pc, #68]	; (2e98 <_usb_ep0_on_setup+0xc4>)
    2e52:	2100      	movs	r1, #0
    2e54:	4814      	ldr	r0, [pc, #80]	; (2ea8 <_usb_ep0_on_setup+0xd4>)
    2e56:	4c15      	ldr	r4, [pc, #84]	; (2eac <_usb_ep0_on_setup+0xd8>)
    2e58:	47a0      	blx	r4
    2e5a:	e7ce      	b.n	2dfa <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    2e5c:	4b0d      	ldr	r3, [pc, #52]	; (2e94 <_usb_ep0_on_setup+0xc0>)
    2e5e:	4798      	blx	r3
			return;
    2e60:	e7cb      	b.n	2dfa <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    2e62:	2300      	movs	r3, #0
    2e64:	4a0e      	ldr	r2, [pc, #56]	; (2ea0 <_usb_ep0_on_setup+0xcc>)
    2e66:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    2e68:	4a0e      	ldr	r2, [pc, #56]	; (2ea4 <_usb_ep0_on_setup+0xd0>)
    2e6a:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2e6c:	2202      	movs	r2, #2
    2e6e:	4b07      	ldr	r3, [pc, #28]	; (2e8c <_usb_ep0_on_setup+0xb8>)
    2e70:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2e72:	2340      	movs	r3, #64	; 0x40
    2e74:	4a08      	ldr	r2, [pc, #32]	; (2e98 <_usb_ep0_on_setup+0xc4>)
    2e76:	2100      	movs	r1, #0
    2e78:	480b      	ldr	r0, [pc, #44]	; (2ea8 <_usb_ep0_on_setup+0xd4>)
    2e7a:	4c0c      	ldr	r4, [pc, #48]	; (2eac <_usb_ep0_on_setup+0xd8>)
    2e7c:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2e7e:	4b0c      	ldr	r3, [pc, #48]	; (2eb0 <_usb_ep0_on_setup+0xdc>)
    2e80:	4798      	blx	r3
    2e82:	e7ba      	b.n	2dfa <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    2e84:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <_usb_ep0_on_setup+0xe0>)
    2e86:	4798      	blx	r3
				return;
    2e88:	e7b7      	b.n	2dfa <_usb_ep0_on_setup+0x26>
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	20000236 	.word	0x20000236
    2e90:	20000534 	.word	0x20000534
    2e94:	00002b1d 	.word	0x00002b1d
    2e98:	2000054c 	.word	0x2000054c
    2e9c:	00001911 	.word	0x00001911
    2ea0:	20000234 	.word	0x20000234
    2ea4:	20000232 	.word	0x20000232
    2ea8:	200003cc 	.word	0x200003cc
    2eac:	00004205 	.word	0x00004205
    2eb0:	00002d2d 	.word	0x00002d2d
    2eb4:	00002c9d 	.word	0x00002c9d

00002eb8 <_usb_on_sof_notify>:
{
    2eb8:	b510      	push	{r4, lr}
	udc_sof_notify();
    2eba:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <_usb_on_sof_notify+0xc>)
    2ebc:	4798      	blx	r3
	UDC_SOF_EVENT();
    2ebe:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <_usb_on_sof_notify+0x10>)
    2ec0:	4798      	blx	r3
}
    2ec2:	bd10      	pop	{r4, pc}
    2ec4:	000018cd 	.word	0x000018cd
    2ec8:	000037bd 	.word	0x000037bd

00002ecc <_usb_on_suspend>:
{
    2ecc:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2ece:	4c07      	ldr	r4, [pc, #28]	; (2eec <_usb_on_suspend+0x20>)
    2ed0:	2104      	movs	r1, #4
    2ed2:	0020      	movs	r0, r4
    2ed4:	4b06      	ldr	r3, [pc, #24]	; (2ef0 <_usb_on_suspend+0x24>)
    2ed6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2ed8:	2102      	movs	r1, #2
    2eda:	0020      	movs	r0, r4
    2edc:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <_usb_on_suspend+0x28>)
    2ede:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2ee0:	2001      	movs	r0, #1
    2ee2:	4b05      	ldr	r3, [pc, #20]	; (2ef8 <_usb_on_suspend+0x2c>)
    2ee4:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2ee6:	4b05      	ldr	r3, [pc, #20]	; (2efc <_usb_on_suspend+0x30>)
    2ee8:	4798      	blx	r3
}
    2eea:	bd10      	pop	{r4, pc}
    2eec:	200003cc 	.word	0x200003cc
    2ef0:	00003c19 	.word	0x00003c19
    2ef4:	00003bf9 	.word	0x00003bf9
    2ef8:	00002885 	.word	0x00002885
    2efc:	000037a5 	.word	0x000037a5

00002f00 <udd_ep_abort>:
{
    2f00:	b510      	push	{r4, lr}
    2f02:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2f04:	0001      	movs	r1, r0
    2f06:	480a      	ldr	r0, [pc, #40]	; (2f30 <udd_ep_abort+0x30>)
    2f08:	4b0a      	ldr	r3, [pc, #40]	; (2f34 <udd_ep_abort+0x34>)
    2f0a:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    2f0c:	0020      	movs	r0, r4
    2f0e:	4b0a      	ldr	r3, [pc, #40]	; (2f38 <udd_ep_abort+0x38>)
    2f10:	4798      	blx	r3
	if (!ptr_job->busy) {
    2f12:	7c83      	ldrb	r3, [r0, #18]
    2f14:	07db      	lsls	r3, r3, #31
    2f16:	d50a      	bpl.n	2f2e <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2f18:	7c83      	ldrb	r3, [r0, #18]
    2f1a:	2201      	movs	r2, #1
    2f1c:	4393      	bics	r3, r2
    2f1e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2f20:	6803      	ldr	r3, [r0, #0]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d003      	beq.n	2f2e <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2f26:	68c1      	ldr	r1, [r0, #12]
    2f28:	0022      	movs	r2, r4
    2f2a:	2001      	movs	r0, #1
    2f2c:	4798      	blx	r3
}
    2f2e:	bd10      	pop	{r4, pc}
    2f30:	200003cc 	.word	0x200003cc
    2f34:	000040a5 	.word	0x000040a5
    2f38:	00002945 	.word	0x00002945

00002f3c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    2f3c:	4b02      	ldr	r3, [pc, #8]	; (2f48 <udd_get_frame_number+0xc>)
    2f3e:	681b      	ldr	r3, [r3, #0]
    2f40:	8a18      	ldrh	r0, [r3, #16]
    2f42:	0480      	lsls	r0, r0, #18
    2f44:	0d40      	lsrs	r0, r0, #21
}
    2f46:	4770      	bx	lr
    2f48:	200003cc 	.word	0x200003cc

00002f4c <udd_ep_free>:
{
    2f4c:	b570      	push	{r4, r5, r6, lr}
    2f4e:	b082      	sub	sp, #8
    2f50:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    2f52:	ad01      	add	r5, sp, #4
    2f54:	0028      	movs	r0, r5
    2f56:	4b0d      	ldr	r3, [pc, #52]	; (2f8c <udd_ep_free+0x40>)
    2f58:	4798      	blx	r3
	udd_ep_abort(ep);
    2f5a:	0020      	movs	r0, r4
    2f5c:	4b0c      	ldr	r3, [pc, #48]	; (2f90 <udd_ep_free+0x44>)
    2f5e:	4798      	blx	r3
	config_ep.ep_address = ep;
    2f60:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    2f62:	2300      	movs	r3, #0
    2f64:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    2f66:	4e0b      	ldr	r6, [pc, #44]	; (2f94 <udd_ep_free+0x48>)
    2f68:	0029      	movs	r1, r5
    2f6a:	0030      	movs	r0, r6
    2f6c:	4b0a      	ldr	r3, [pc, #40]	; (2f98 <udd_ep_free+0x4c>)
    2f6e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2f70:	210f      	movs	r1, #15
    2f72:	4021      	ands	r1, r4
    2f74:	2200      	movs	r2, #0
    2f76:	0030      	movs	r0, r6
    2f78:	4b08      	ldr	r3, [pc, #32]	; (2f9c <udd_ep_free+0x50>)
    2f7a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2f7c:	2200      	movs	r2, #0
    2f7e:	0021      	movs	r1, r4
    2f80:	0030      	movs	r0, r6
    2f82:	4b07      	ldr	r3, [pc, #28]	; (2fa0 <udd_ep_free+0x54>)
    2f84:	4798      	blx	r3
}
    2f86:	b002      	add	sp, #8
    2f88:	bd70      	pop	{r4, r5, r6, pc}
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	00003e25 	.word	0x00003e25
    2f90:	00002f01 	.word	0x00002f01
    2f94:	200003cc 	.word	0x200003cc
    2f98:	00003e35 	.word	0x00003e35
    2f9c:	00003c5d 	.word	0x00003c5d
    2fa0:	00003d55 	.word	0x00003d55

00002fa4 <udd_ep_alloc>:
{
    2fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa6:	b083      	sub	sp, #12
    2fa8:	0005      	movs	r5, r0
    2faa:	000f      	movs	r7, r1
    2fac:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    2fae:	ae01      	add	r6, sp, #4
    2fb0:	0030      	movs	r0, r6
    2fb2:	4b36      	ldr	r3, [pc, #216]	; (308c <udd_ep_alloc+0xe8>)
    2fb4:	4798      	blx	r3
	config_ep.ep_address = ep;
    2fb6:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2fb8:	2c08      	cmp	r4, #8
    2fba:	d813      	bhi.n	2fe4 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    2fbc:	2200      	movs	r2, #0
    2fbe:	ab01      	add	r3, sp, #4
    2fc0:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2fc2:	0028      	movs	r0, r5
    2fc4:	4b32      	ldr	r3, [pc, #200]	; (3090 <udd_ep_alloc+0xec>)
    2fc6:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2fc8:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    2fca:	2103      	movs	r1, #3
    2fcc:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    2fce:	2901      	cmp	r1, #1
    2fd0:	d038      	beq.n	3044 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2fd2:	2902      	cmp	r1, #2
    2fd4:	d043      	beq.n	305e <udd_ep_alloc+0xba>
		return false;
    2fd6:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2fd8:	2903      	cmp	r1, #3
    2fda:	d13d      	bne.n	3058 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2fdc:	2204      	movs	r2, #4
    2fde:	ab01      	add	r3, sp, #4
    2fe0:	70da      	strb	r2, [r3, #3]
    2fe2:	e032      	b.n	304a <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2fe4:	2c10      	cmp	r4, #16
    2fe6:	d803      	bhi.n	2ff0 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2fe8:	2201      	movs	r2, #1
    2fea:	ab01      	add	r3, sp, #4
    2fec:	705a      	strb	r2, [r3, #1]
    2fee:	e7e8      	b.n	2fc2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2ff0:	2c20      	cmp	r4, #32
    2ff2:	d803      	bhi.n	2ffc <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2ff4:	2202      	movs	r2, #2
    2ff6:	ab01      	add	r3, sp, #4
    2ff8:	705a      	strb	r2, [r3, #1]
    2ffa:	e7e2      	b.n	2fc2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    2ffc:	2c40      	cmp	r4, #64	; 0x40
    2ffe:	d803      	bhi.n	3008 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    3000:	2203      	movs	r2, #3
    3002:	ab01      	add	r3, sp, #4
    3004:	705a      	strb	r2, [r3, #1]
    3006:	e7dc      	b.n	2fc2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    3008:	2c80      	cmp	r4, #128	; 0x80
    300a:	d803      	bhi.n	3014 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    300c:	2204      	movs	r2, #4
    300e:	ab01      	add	r3, sp, #4
    3010:	705a      	strb	r2, [r3, #1]
    3012:	e7d6      	b.n	2fc2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3014:	2380      	movs	r3, #128	; 0x80
    3016:	005b      	lsls	r3, r3, #1
    3018:	429c      	cmp	r4, r3
    301a:	d803      	bhi.n	3024 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    301c:	2205      	movs	r2, #5
    301e:	ab01      	add	r3, sp, #4
    3020:	705a      	strb	r2, [r3, #1]
    3022:	e7ce      	b.n	2fc2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3024:	2380      	movs	r3, #128	; 0x80
    3026:	009b      	lsls	r3, r3, #2
    3028:	429c      	cmp	r4, r3
    302a:	d803      	bhi.n	3034 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    302c:	2206      	movs	r2, #6
    302e:	ab01      	add	r3, sp, #4
    3030:	705a      	strb	r2, [r3, #1]
    3032:	e7c6      	b.n	2fc2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3034:	4a17      	ldr	r2, [pc, #92]	; (3094 <udd_ep_alloc+0xf0>)
		return false;
    3036:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    3038:	4294      	cmp	r4, r2
    303a:	d80d      	bhi.n	3058 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    303c:	2207      	movs	r2, #7
    303e:	ab01      	add	r3, sp, #4
    3040:	705a      	strb	r2, [r3, #1]
    3042:	e7be      	b.n	2fc2 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3044:	2202      	movs	r2, #2
    3046:	ab01      	add	r3, sp, #4
    3048:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    304a:	a901      	add	r1, sp, #4
    304c:	4812      	ldr	r0, [pc, #72]	; (3098 <udd_ep_alloc+0xf4>)
    304e:	4b13      	ldr	r3, [pc, #76]	; (309c <udd_ep_alloc+0xf8>)
    3050:	4798      	blx	r3
		return false;
    3052:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3054:	2800      	cmp	r0, #0
    3056:	d006      	beq.n	3066 <udd_ep_alloc+0xc2>
}
    3058:	0018      	movs	r0, r3
    305a:	b003      	add	sp, #12
    305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    305e:	2203      	movs	r2, #3
    3060:	ab01      	add	r3, sp, #4
    3062:	70da      	strb	r2, [r3, #3]
    3064:	e7f1      	b.n	304a <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3066:	210f      	movs	r1, #15
    3068:	4029      	ands	r1, r5
    306a:	4c0b      	ldr	r4, [pc, #44]	; (3098 <udd_ep_alloc+0xf4>)
    306c:	4b0c      	ldr	r3, [pc, #48]	; (30a0 <udd_ep_alloc+0xfc>)
    306e:	2200      	movs	r2, #0
    3070:	0020      	movs	r0, r4
    3072:	4e0c      	ldr	r6, [pc, #48]	; (30a4 <udd_ep_alloc+0x100>)
    3074:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3076:	2200      	movs	r2, #0
    3078:	0029      	movs	r1, r5
    307a:	0020      	movs	r0, r4
    307c:	4e0a      	ldr	r6, [pc, #40]	; (30a8 <udd_ep_alloc+0x104>)
    307e:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3080:	2201      	movs	r2, #1
    3082:	0029      	movs	r1, r5
    3084:	0020      	movs	r0, r4
    3086:	47b0      	blx	r6
	return true;
    3088:	2301      	movs	r3, #1
    308a:	e7e5      	b.n	3058 <udd_ep_alloc+0xb4>
    308c:	00003e25 	.word	0x00003e25
    3090:	00002945 	.word	0x00002945
    3094:	000003ff 	.word	0x000003ff
    3098:	200003cc 	.word	0x200003cc
    309c:	00003e35 	.word	0x00003e35
    30a0:	00002969 	.word	0x00002969
    30a4:	00003c35 	.word	0x00003c35
    30a8:	00003c85 	.word	0x00003c85

000030ac <udd_ep_is_halted>:
{
    30ac:	b510      	push	{r4, lr}
    30ae:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    30b0:	4801      	ldr	r0, [pc, #4]	; (30b8 <udd_ep_is_halted+0xc>)
    30b2:	4b02      	ldr	r3, [pc, #8]	; (30bc <udd_ep_is_halted+0x10>)
    30b4:	4798      	blx	r3
}
    30b6:	bd10      	pop	{r4, pc}
    30b8:	200003cc 	.word	0x200003cc
    30bc:	000040db 	.word	0x000040db

000030c0 <udd_ep_set_halt>:
{
    30c0:	b510      	push	{r4, lr}
    30c2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    30c4:	230f      	movs	r3, #15
    30c6:	4003      	ands	r3, r0
		return false;
    30c8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    30ca:	2b02      	cmp	r3, #2
    30cc:	d900      	bls.n	30d0 <udd_ep_set_halt+0x10>
}
    30ce:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    30d0:	0021      	movs	r1, r4
    30d2:	4804      	ldr	r0, [pc, #16]	; (30e4 <udd_ep_set_halt+0x24>)
    30d4:	4b04      	ldr	r3, [pc, #16]	; (30e8 <udd_ep_set_halt+0x28>)
    30d6:	4798      	blx	r3
	udd_ep_abort(ep);
    30d8:	0020      	movs	r0, r4
    30da:	4b04      	ldr	r3, [pc, #16]	; (30ec <udd_ep_set_halt+0x2c>)
    30dc:	4798      	blx	r3
	return true;
    30de:	2001      	movs	r0, #1
    30e0:	e7f5      	b.n	30ce <udd_ep_set_halt+0xe>
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	200003cc 	.word	0x200003cc
    30e8:	00004105 	.word	0x00004105
    30ec:	00002f01 	.word	0x00002f01

000030f0 <_usb_ep0_on_tansfer_ok>:
{
    30f0:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    30f2:	4b34      	ldr	r3, [pc, #208]	; (31c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    30f4:	781b      	ldrb	r3, [r3, #0]
    30f6:	2b01      	cmp	r3, #1
    30f8:	d00a      	beq.n	3110 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    30fa:	2b02      	cmp	r3, #2
    30fc:	d05f      	beq.n	31be <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    30fe:	4b32      	ldr	r3, [pc, #200]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3100:	691b      	ldr	r3, [r3, #16]
    3102:	2b00      	cmp	r3, #0
    3104:	d000      	beq.n	3108 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    3106:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3108:	2200      	movs	r2, #0
    310a:	4b2e      	ldr	r3, [pc, #184]	; (31c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    310c:	701a      	strb	r2, [r3, #0]
}
    310e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3110:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3112:	4b2d      	ldr	r3, [pc, #180]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3114:	899b      	ldrh	r3, [r3, #12]
    3116:	4a2d      	ldr	r2, [pc, #180]	; (31cc <_usb_ep0_on_tansfer_ok+0xdc>)
    3118:	8814      	ldrh	r4, [r2, #0]
    311a:	1962      	adds	r2, r4, r5
    311c:	4293      	cmp	r3, r2
    311e:	da01      	bge.n	3124 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3120:	1b1d      	subs	r5, r3, r4
    3122:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3124:	4b28      	ldr	r3, [pc, #160]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3126:	6898      	ldr	r0, [r3, #8]
    3128:	1900      	adds	r0, r0, r4
    312a:	002a      	movs	r2, r5
    312c:	4928      	ldr	r1, [pc, #160]	; (31d0 <_usb_ep0_on_tansfer_ok+0xe0>)
    312e:	4b29      	ldr	r3, [pc, #164]	; (31d4 <_usb_ep0_on_tansfer_ok+0xe4>)
    3130:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3132:	1964      	adds	r4, r4, r5
    3134:	b2a4      	uxth	r4, r4
    3136:	4b25      	ldr	r3, [pc, #148]	; (31cc <_usb_ep0_on_tansfer_ok+0xdc>)
    3138:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    313a:	2d40      	cmp	r5, #64	; 0x40
    313c:	d00a      	beq.n	3154 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    313e:	4b22      	ldr	r3, [pc, #136]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3140:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3142:	695b      	ldr	r3, [r3, #20]
    3144:	2b00      	cmp	r3, #0
    3146:	d002      	beq.n	314e <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3148:	4798      	blx	r3
    314a:	2800      	cmp	r0, #0
    314c:	d014      	beq.n	3178 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    314e:	4b22      	ldr	r3, [pc, #136]	; (31d8 <_usb_ep0_on_tansfer_ok+0xe8>)
    3150:	4798      	blx	r3
    3152:	e7dc      	b.n	310e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3154:	4b1c      	ldr	r3, [pc, #112]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3156:	88da      	ldrh	r2, [r3, #6]
    3158:	4b20      	ldr	r3, [pc, #128]	; (31dc <_usb_ep0_on_tansfer_ok+0xec>)
    315a:	881b      	ldrh	r3, [r3, #0]
    315c:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    315e:	429a      	cmp	r2, r3
    3160:	dded      	ble.n	313e <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3162:	4b19      	ldr	r3, [pc, #100]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3164:	899b      	ldrh	r3, [r3, #12]
    3166:	42a3      	cmp	r3, r4
    3168:	d00c      	beq.n	3184 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    316a:	2340      	movs	r3, #64	; 0x40
    316c:	4a18      	ldr	r2, [pc, #96]	; (31d0 <_usb_ep0_on_tansfer_ok+0xe0>)
    316e:	2100      	movs	r1, #0
    3170:	481b      	ldr	r0, [pc, #108]	; (31e0 <_usb_ep0_on_tansfer_ok+0xf0>)
    3172:	4c1c      	ldr	r4, [pc, #112]	; (31e4 <_usb_ep0_on_tansfer_ok+0xf4>)
    3174:	47a0      	blx	r4
    3176:	e7ca      	b.n	310e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3178:	2205      	movs	r2, #5
    317a:	4b12      	ldr	r3, [pc, #72]	; (31c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    317c:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    317e:	4b1a      	ldr	r3, [pc, #104]	; (31e8 <_usb_ep0_on_tansfer_ok+0xf8>)
    3180:	4798      	blx	r3
    3182:	e7c4      	b.n	310e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3184:	4b10      	ldr	r3, [pc, #64]	; (31c8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3186:	695b      	ldr	r3, [r3, #20]
    3188:	2b00      	cmp	r3, #0
    318a:	d00b      	beq.n	31a4 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    318c:	4798      	blx	r3
    318e:	2800      	cmp	r0, #0
    3190:	d00f      	beq.n	31b2 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3192:	4912      	ldr	r1, [pc, #72]	; (31dc <_usb_ep0_on_tansfer_ok+0xec>)
    3194:	4a0d      	ldr	r2, [pc, #52]	; (31cc <_usb_ep0_on_tansfer_ok+0xdc>)
    3196:	880b      	ldrh	r3, [r1, #0]
    3198:	8810      	ldrh	r0, [r2, #0]
    319a:	181b      	adds	r3, r3, r0
    319c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    319e:	2300      	movs	r3, #0
    31a0:	8013      	strh	r3, [r2, #0]
    31a2:	e7e2      	b.n	316a <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    31a4:	2205      	movs	r2, #5
    31a6:	4b07      	ldr	r3, [pc, #28]	; (31c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    31a8:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    31aa:	2000      	movs	r0, #0
    31ac:	4b0e      	ldr	r3, [pc, #56]	; (31e8 <_usb_ep0_on_tansfer_ok+0xf8>)
    31ae:	4798      	blx	r3
    31b0:	e7ad      	b.n	310e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    31b2:	2205      	movs	r2, #5
    31b4:	4b03      	ldr	r3, [pc, #12]	; (31c4 <_usb_ep0_on_tansfer_ok+0xd4>)
    31b6:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    31b8:	4b0b      	ldr	r3, [pc, #44]	; (31e8 <_usb_ep0_on_tansfer_ok+0xf8>)
    31ba:	4798      	blx	r3
    31bc:	e7a7      	b.n	310e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    31be:	4b0b      	ldr	r3, [pc, #44]	; (31ec <_usb_ep0_on_tansfer_ok+0xfc>)
    31c0:	4798      	blx	r3
    31c2:	e7a4      	b.n	310e <_usb_ep0_on_tansfer_ok+0x1e>
    31c4:	20000236 	.word	0x20000236
    31c8:	20000534 	.word	0x20000534
    31cc:	20000232 	.word	0x20000232
    31d0:	2000054c 	.word	0x2000054c
    31d4:	00006be1 	.word	0x00006be1
    31d8:	00002c9d 	.word	0x00002c9d
    31dc:	20000234 	.word	0x20000234
    31e0:	200003cc 	.word	0x200003cc
    31e4:	00004205 	.word	0x00004205
    31e8:	000030c1 	.word	0x000030c1
    31ec:	00002d2d 	.word	0x00002d2d

000031f0 <udd_ep_clear_halt>:
{
    31f0:	b570      	push	{r4, r5, r6, lr}
    31f2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    31f4:	230f      	movs	r3, #15
    31f6:	4003      	ands	r3, r0
		return false;
    31f8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    31fa:	2b02      	cmp	r3, #2
    31fc:	d900      	bls.n	3200 <udd_ep_clear_halt+0x10>
}
    31fe:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3200:	0020      	movs	r0, r4
    3202:	4b09      	ldr	r3, [pc, #36]	; (3228 <udd_ep_clear_halt+0x38>)
    3204:	4798      	blx	r3
    3206:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3208:	0021      	movs	r1, r4
    320a:	4808      	ldr	r0, [pc, #32]	; (322c <udd_ep_clear_halt+0x3c>)
    320c:	4b08      	ldr	r3, [pc, #32]	; (3230 <udd_ep_clear_halt+0x40>)
    320e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3210:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3212:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3214:	07db      	lsls	r3, r3, #31
    3216:	d5f2      	bpl.n	31fe <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3218:	7cab      	ldrb	r3, [r5, #18]
    321a:	2201      	movs	r2, #1
    321c:	4393      	bics	r3, r2
    321e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3220:	682b      	ldr	r3, [r5, #0]
    3222:	4798      	blx	r3
	return true;
    3224:	2001      	movs	r0, #1
    3226:	e7ea      	b.n	31fe <udd_ep_clear_halt+0xe>
    3228:	00002945 	.word	0x00002945
    322c:	200003cc 	.word	0x200003cc
    3230:	0000412b 	.word	0x0000412b

00003234 <udd_ep_wait_stall_clear>:
{
    3234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3236:	0004      	movs	r4, r0
    3238:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    323a:	230f      	movs	r3, #15
    323c:	4003      	ands	r3, r0
		return false;
    323e:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3240:	2b02      	cmp	r3, #2
    3242:	d805      	bhi.n	3250 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3244:	4b0d      	ldr	r3, [pc, #52]	; (327c <udd_ep_wait_stall_clear+0x48>)
    3246:	4798      	blx	r3
    3248:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    324a:	7c83      	ldrb	r3, [r0, #18]
    324c:	07db      	lsls	r3, r3, #31
    324e:	d501      	bpl.n	3254 <udd_ep_wait_stall_clear+0x20>
}
    3250:	0030      	movs	r0, r6
    3252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3254:	0021      	movs	r1, r4
    3256:	480a      	ldr	r0, [pc, #40]	; (3280 <udd_ep_wait_stall_clear+0x4c>)
    3258:	4b0a      	ldr	r3, [pc, #40]	; (3284 <udd_ep_wait_stall_clear+0x50>)
    325a:	4798      	blx	r3
    325c:	1e06      	subs	r6, r0, #0
    325e:	d005      	beq.n	326c <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3260:	7cbb      	ldrb	r3, [r7, #18]
    3262:	2201      	movs	r2, #1
    3264:	4313      	orrs	r3, r2
    3266:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3268:	603d      	str	r5, [r7, #0]
		return true;
    326a:	e7f1      	b.n	3250 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    326c:	0021      	movs	r1, r4
    326e:	4804      	ldr	r0, [pc, #16]	; (3280 <udd_ep_wait_stall_clear+0x4c>)
    3270:	4b05      	ldr	r3, [pc, #20]	; (3288 <udd_ep_wait_stall_clear+0x54>)
    3272:	4798      	blx	r3
    3274:	1e06      	subs	r6, r0, #0
    3276:	d0eb      	beq.n	3250 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3278:	47a8      	blx	r5
		return true;
    327a:	e7e9      	b.n	3250 <udd_ep_wait_stall_clear+0x1c>
    327c:	00002945 	.word	0x00002945
    3280:	200003cc 	.word	0x200003cc
    3284:	000040db 	.word	0x000040db
    3288:	00004079 	.word	0x00004079

0000328c <udd_ep_run>:
{
    328c:	b5f0      	push	{r4, r5, r6, r7, lr}
    328e:	b087      	sub	sp, #28
    3290:	0005      	movs	r5, r0
    3292:	9103      	str	r1, [sp, #12]
    3294:	9202      	str	r2, [sp, #8]
    3296:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3298:	260f      	movs	r6, #15
    329a:	4006      	ands	r6, r0
		return false;
    329c:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    329e:	2e02      	cmp	r6, #2
    32a0:	d902      	bls.n	32a8 <udd_ep_run+0x1c>
}
    32a2:	0020      	movs	r0, r4
    32a4:	b007      	add	sp, #28
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    32a8:	4b64      	ldr	r3, [pc, #400]	; (343c <udd_ep_run+0x1b0>)
    32aa:	4798      	blx	r3
    32ac:	1e04      	subs	r4, r0, #0
    32ae:	d000      	beq.n	32b2 <udd_ep_run+0x26>
    32b0:	e0bd      	b.n	342e <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    32b2:	0028      	movs	r0, r5
    32b4:	4b62      	ldr	r3, [pc, #392]	; (3440 <udd_ep_run+0x1b4>)
    32b6:	4798      	blx	r3
    32b8:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    32ba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    32be:	425a      	negs	r2, r3
    32c0:	4153      	adcs	r3, r2
    32c2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    32c4:	b672      	cpsid	i
    32c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    32ca:	2200      	movs	r2, #0
    32cc:	4b5d      	ldr	r3, [pc, #372]	; (3444 <udd_ep_run+0x1b8>)
    32ce:	701a      	strb	r2, [r3, #0]
	return flags;
    32d0:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    32d2:	7c83      	ldrb	r3, [r0, #18]
    32d4:	07db      	lsls	r3, r3, #31
    32d6:	d508      	bpl.n	32ea <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    32d8:	2a00      	cmp	r2, #0
    32da:	d0e2      	beq.n	32a2 <udd_ep_run+0x16>
		cpu_irq_enable();
    32dc:	2201      	movs	r2, #1
    32de:	4b59      	ldr	r3, [pc, #356]	; (3444 <udd_ep_run+0x1b8>)
    32e0:	701a      	strb	r2, [r3, #0]
    32e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32e6:	b662      	cpsie	i
    32e8:	e7db      	b.n	32a2 <udd_ep_run+0x16>
	ptr_job->busy = true;
    32ea:	7c83      	ldrb	r3, [r0, #18]
    32ec:	2101      	movs	r1, #1
    32ee:	430b      	orrs	r3, r1
    32f0:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    32f2:	2a00      	cmp	r2, #0
    32f4:	d005      	beq.n	3302 <udd_ep_run+0x76>
		cpu_irq_enable();
    32f6:	2201      	movs	r2, #1
    32f8:	4b52      	ldr	r3, [pc, #328]	; (3444 <udd_ep_run+0x1b8>)
    32fa:	701a      	strb	r2, [r3, #0]
    32fc:	f3bf 8f5f 	dmb	sy
    3300:	b662      	cpsie	i
	ptr_job->buf = buf;
    3302:	9b02      	ldr	r3, [sp, #8]
    3304:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3306:	9b01      	ldr	r3, [sp, #4]
    3308:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    330a:	2300      	movs	r3, #0
    330c:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    330e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3310:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3312:	2301      	movs	r3, #1
    3314:	9a03      	ldr	r2, [sp, #12]
    3316:	4013      	ands	r3, r2
    3318:	005a      	lsls	r2, r3, #1
    331a:	7cbb      	ldrb	r3, [r7, #18]
    331c:	2102      	movs	r1, #2
    331e:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3320:	4313      	orrs	r3, r2
    3322:	2204      	movs	r2, #4
    3324:	4393      	bics	r3, r2
    3326:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3328:	b26b      	sxtb	r3, r5
    332a:	2b00      	cmp	r3, #0
    332c:	db20      	blt.n	3370 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    332e:	9b01      	ldr	r3, [sp, #4]
    3330:	2b00      	cmp	r3, #0
    3332:	d06f      	beq.n	3414 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3334:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3336:	4b44      	ldr	r3, [pc, #272]	; (3448 <udd_ep_run+0x1bc>)
    3338:	429c      	cmp	r4, r3
    333a:	d95a      	bls.n	33f2 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    333c:	8a39      	ldrh	r1, [r7, #16]
    333e:	001c      	movs	r4, r3
    3340:	0018      	movs	r0, r3
    3342:	4b42      	ldr	r3, [pc, #264]	; (344c <udd_ep_run+0x1c0>)
    3344:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3346:	1a63      	subs	r3, r4, r1
    3348:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    334a:	8a3b      	ldrh	r3, [r7, #16]
    334c:	429a      	cmp	r2, r3
    334e:	d257      	bcs.n	3400 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3350:	7cba      	ldrb	r2, [r7, #18]
    3352:	2104      	movs	r1, #4
    3354:	430a      	orrs	r2, r1
    3356:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3358:	1e72      	subs	r2, r6, #1
    335a:	0192      	lsls	r2, r2, #6
    335c:	493c      	ldr	r1, [pc, #240]	; (3450 <udd_ep_run+0x1c4>)
    335e:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3360:	0031      	movs	r1, r6
    3362:	483c      	ldr	r0, [pc, #240]	; (3454 <udd_ep_run+0x1c8>)
    3364:	4c3c      	ldr	r4, [pc, #240]	; (3458 <udd_ep_run+0x1cc>)
    3366:	47a0      	blx	r4
				return (STATUS_OK ==
    3368:	4244      	negs	r4, r0
    336a:	4144      	adcs	r4, r0
    336c:	b2e4      	uxtb	r4, r4
    336e:	e798      	b.n	32a2 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3370:	9b01      	ldr	r3, [sp, #4]
    3372:	2b00      	cmp	r3, #0
    3374:	d027      	beq.n	33c6 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3376:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3378:	4b33      	ldr	r3, [pc, #204]	; (3448 <udd_ep_run+0x1bc>)
    337a:	429d      	cmp	r5, r3
    337c:	d906      	bls.n	338c <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    337e:	8a39      	ldrh	r1, [r7, #16]
    3380:	001d      	movs	r5, r3
    3382:	0018      	movs	r0, r3
    3384:	4b31      	ldr	r3, [pc, #196]	; (344c <udd_ep_run+0x1c0>)
    3386:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3388:	1a6b      	subs	r3, r5, r1
    338a:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    338c:	7cbb      	ldrb	r3, [r7, #18]
    338e:	079b      	lsls	r3, r3, #30
    3390:	d507      	bpl.n	33a2 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3392:	8a39      	ldrh	r1, [r7, #16]
    3394:	0028      	movs	r0, r5
    3396:	4b31      	ldr	r3, [pc, #196]	; (345c <udd_ep_run+0x1d0>)
    3398:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    339a:	b289      	uxth	r1, r1
    339c:	424c      	negs	r4, r1
    339e:	414c      	adcs	r4, r1
    33a0:	b2e4      	uxtb	r4, r4
    33a2:	2001      	movs	r0, #1
    33a4:	4020      	ands	r0, r4
    33a6:	0040      	lsls	r0, r0, #1
    33a8:	7cbc      	ldrb	r4, [r7, #18]
    33aa:	2302      	movs	r3, #2
    33ac:	439c      	bics	r4, r3
    33ae:	4304      	orrs	r4, r0
    33b0:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    33b2:	002b      	movs	r3, r5
    33b4:	9a02      	ldr	r2, [sp, #8]
    33b6:	0031      	movs	r1, r6
    33b8:	4826      	ldr	r0, [pc, #152]	; (3454 <udd_ep_run+0x1c8>)
    33ba:	4c29      	ldr	r4, [pc, #164]	; (3460 <udd_ep_run+0x1d4>)
    33bc:	47a0      	blx	r4
		return (STATUS_OK ==
    33be:	4244      	negs	r4, r0
    33c0:	4144      	adcs	r4, r0
    33c2:	b2e4      	uxtb	r4, r4
    33c4:	e76d      	b.n	32a2 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    33c6:	7cbb      	ldrb	r3, [r7, #18]
    33c8:	079b      	lsls	r3, r3, #30
    33ca:	d505      	bpl.n	33d8 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    33cc:	7cbb      	ldrb	r3, [r7, #18]
    33ce:	2202      	movs	r2, #2
    33d0:	4393      	bics	r3, r2
    33d2:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    33d4:	2500      	movs	r5, #0
    33d6:	e7ec      	b.n	33b2 <udd_ep_run+0x126>
			ptr_job->busy = false;
    33d8:	7cbb      	ldrb	r3, [r7, #18]
    33da:	2201      	movs	r2, #1
    33dc:	4393      	bics	r3, r2
    33de:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    33e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33e2:	2b00      	cmp	r3, #0
    33e4:	d025      	beq.n	3432 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    33e6:	002a      	movs	r2, r5
    33e8:	2100      	movs	r1, #0
    33ea:	2000      	movs	r0, #0
    33ec:	4798      	blx	r3
			return true;
    33ee:	2401      	movs	r4, #1
    33f0:	e757      	b.n	32a2 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    33f2:	8a39      	ldrh	r1, [r7, #16]
    33f4:	0020      	movs	r0, r4
    33f6:	4b19      	ldr	r3, [pc, #100]	; (345c <udd_ep_run+0x1d0>)
    33f8:	4798      	blx	r3
    33fa:	1a63      	subs	r3, r4, r1
    33fc:	b29a      	uxth	r2, r3
    33fe:	e7a4      	b.n	334a <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3400:	0013      	movs	r3, r2
    3402:	9a02      	ldr	r2, [sp, #8]
    3404:	0031      	movs	r1, r6
    3406:	4813      	ldr	r0, [pc, #76]	; (3454 <udd_ep_run+0x1c8>)
    3408:	4c13      	ldr	r4, [pc, #76]	; (3458 <udd_ep_run+0x1cc>)
    340a:	47a0      	blx	r4
				return (STATUS_OK ==
    340c:	4244      	negs	r4, r0
    340e:	4144      	adcs	r4, r0
    3410:	b2e4      	uxtb	r4, r4
    3412:	e746      	b.n	32a2 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3414:	7cbb      	ldrb	r3, [r7, #18]
    3416:	2201      	movs	r2, #1
    3418:	4393      	bics	r3, r2
    341a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    341c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    341e:	2b00      	cmp	r3, #0
    3420:	d009      	beq.n	3436 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3422:	002a      	movs	r2, r5
    3424:	2100      	movs	r1, #0
    3426:	2000      	movs	r0, #0
    3428:	4798      	blx	r3
			return true;
    342a:	2401      	movs	r4, #1
    342c:	e739      	b.n	32a2 <udd_ep_run+0x16>
		return false;
    342e:	2400      	movs	r4, #0
    3430:	e737      	b.n	32a2 <udd_ep_run+0x16>
			return true;
    3432:	2401      	movs	r4, #1
    3434:	e735      	b.n	32a2 <udd_ep_run+0x16>
			return true;
    3436:	2401      	movs	r4, #1
    3438:	e733      	b.n	32a2 <udd_ep_run+0x16>
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	000030ad 	.word	0x000030ad
    3440:	00002945 	.word	0x00002945
    3444:	200000f9 	.word	0x200000f9
    3448:	00001fff 	.word	0x00001fff
    344c:	000068e5 	.word	0x000068e5
    3450:	2000034c 	.word	0x2000034c
    3454:	200003cc 	.word	0x200003cc
    3458:	00004205 	.word	0x00004205
    345c:	00006711 	.word	0x00006711
    3460:	000041b1 	.word	0x000041b1

00003464 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3464:	4b02      	ldr	r3, [pc, #8]	; (3470 <udd_set_address+0xc>)
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	2280      	movs	r2, #128	; 0x80
    346a:	4310      	orrs	r0, r2
    346c:	7298      	strb	r0, [r3, #10]
}
    346e:	4770      	bx	lr
    3470:	200003cc 	.word	0x200003cc

00003474 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3474:	4b02      	ldr	r3, [pc, #8]	; (3480 <udd_getaddress+0xc>)
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	7a98      	ldrb	r0, [r3, #10]
    347a:	0640      	lsls	r0, r0, #25
    347c:	0e40      	lsrs	r0, r0, #25
}
    347e:	4770      	bx	lr
    3480:	200003cc 	.word	0x200003cc

00003484 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3484:	4b01      	ldr	r3, [pc, #4]	; (348c <udd_set_setup_payload+0x8>)
    3486:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3488:	8199      	strh	r1, [r3, #12]
}
    348a:	4770      	bx	lr
    348c:	20000534 	.word	0x20000534

00003490 <udd_detach>:

void udd_detach(void)
{
    3490:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3492:	4b05      	ldr	r3, [pc, #20]	; (34a8 <udd_detach+0x18>)
    3494:	681a      	ldr	r2, [r3, #0]
    3496:	8913      	ldrh	r3, [r2, #8]
    3498:	2101      	movs	r1, #1
    349a:	430b      	orrs	r3, r1
    349c:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    349e:	2001      	movs	r0, #1
    34a0:	4b02      	ldr	r3, [pc, #8]	; (34ac <udd_detach+0x1c>)
    34a2:	4798      	blx	r3
}
    34a4:	bd10      	pop	{r4, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	200003cc 	.word	0x200003cc
    34ac:	00002885 	.word	0x00002885

000034b0 <udd_attach>:

void udd_attach(void)
{
    34b0:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    34b2:	2003      	movs	r0, #3
    34b4:	4b16      	ldr	r3, [pc, #88]	; (3510 <udd_attach+0x60>)
    34b6:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    34b8:	4c16      	ldr	r4, [pc, #88]	; (3514 <udd_attach+0x64>)
    34ba:	6822      	ldr	r2, [r4, #0]
    34bc:	8913      	ldrh	r3, [r2, #8]
    34be:	2101      	movs	r1, #1
    34c0:	438b      	bics	r3, r1
    34c2:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    34c4:	4a14      	ldr	r2, [pc, #80]	; (3518 <udd_attach+0x68>)
    34c6:	3103      	adds	r1, #3
    34c8:	0020      	movs	r0, r4
    34ca:	4e14      	ldr	r6, [pc, #80]	; (351c <udd_attach+0x6c>)
    34cc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    34ce:	4a14      	ldr	r2, [pc, #80]	; (3520 <udd_attach+0x70>)
    34d0:	2100      	movs	r1, #0
    34d2:	0020      	movs	r0, r4
    34d4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    34d6:	4a13      	ldr	r2, [pc, #76]	; (3524 <udd_attach+0x74>)
    34d8:	2101      	movs	r1, #1
    34da:	0020      	movs	r0, r4
    34dc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    34de:	4a12      	ldr	r2, [pc, #72]	; (3528 <udd_attach+0x78>)
    34e0:	2102      	movs	r1, #2
    34e2:	0020      	movs	r0, r4
    34e4:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    34e6:	2104      	movs	r1, #4
    34e8:	0020      	movs	r0, r4
    34ea:	4d10      	ldr	r5, [pc, #64]	; (352c <udd_attach+0x7c>)
    34ec:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    34ee:	2100      	movs	r1, #0
    34f0:	0020      	movs	r0, r4
    34f2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    34f4:	2101      	movs	r1, #1
    34f6:	0020      	movs	r0, r4
    34f8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    34fa:	2102      	movs	r1, #2
    34fc:	0020      	movs	r0, r4
    34fe:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3500:	4a0b      	ldr	r2, [pc, #44]	; (3530 <udd_attach+0x80>)
    3502:	2106      	movs	r1, #6
    3504:	0020      	movs	r0, r4
    3506:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3508:	2106      	movs	r1, #6
    350a:	0020      	movs	r0, r4
    350c:	47a8      	blx	r5
#endif
}
    350e:	bd70      	pop	{r4, r5, r6, pc}
    3510:	00002885 	.word	0x00002885
    3514:	200003cc 	.word	0x200003cc
    3518:	00002ecd 	.word	0x00002ecd
    351c:	00003bd5 	.word	0x00003bd5
    3520:	00002eb9 	.word	0x00002eb9
    3524:	00002bed 	.word	0x00002bed
    3528:	00002b7d 	.word	0x00002b7d
    352c:	00003bf9 	.word	0x00003bf9
    3530:	00002b49 	.word	0x00002b49

00003534 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3534:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3536:	2100      	movs	r1, #0
    3538:	200e      	movs	r0, #14
    353a:	4b08      	ldr	r3, [pc, #32]	; (355c <_uhd_vbus_handler+0x28>)
    353c:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    353e:	4b08      	ldr	r3, [pc, #32]	; (3560 <_uhd_vbus_handler+0x2c>)
    3540:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3542:	045b      	lsls	r3, r3, #17
    3544:	d406      	bmi.n	3554 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3546:	4b07      	ldr	r3, [pc, #28]	; (3564 <_uhd_vbus_handler+0x30>)
    3548:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    354a:	2100      	movs	r1, #0
    354c:	200e      	movs	r0, #14
    354e:	4b06      	ldr	r3, [pc, #24]	; (3568 <_uhd_vbus_handler+0x34>)
    3550:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3552:	bd10      	pop	{r4, pc}
		udd_attach();
    3554:	4b05      	ldr	r3, [pc, #20]	; (356c <_uhd_vbus_handler+0x38>)
    3556:	4798      	blx	r3
    3558:	e7f7      	b.n	354a <_uhd_vbus_handler+0x16>
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	00004abd 	.word	0x00004abd
    3560:	41004400 	.word	0x41004400
    3564:	00003491 	.word	0x00003491
    3568:	00004a9d 	.word	0x00004a9d
    356c:	000034b1 	.word	0x000034b1

00003570 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3570:	b570      	push	{r4, r5, r6, lr}
    3572:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3574:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3578:	425a      	negs	r2, r3
    357a:	4153      	adcs	r3, r2
    357c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    357e:	b672      	cpsid	i
    3580:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3584:	2600      	movs	r6, #0
    3586:	4b29      	ldr	r3, [pc, #164]	; (362c <udd_enable+0xbc>)
    3588:	701e      	strb	r6, [r3, #0]
	return flags;
    358a:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    358c:	ac05      	add	r4, sp, #20
    358e:	0020      	movs	r0, r4
    3590:	4b27      	ldr	r3, [pc, #156]	; (3630 <udd_enable+0xc0>)
    3592:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3594:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3596:	4e27      	ldr	r6, [pc, #156]	; (3634 <udd_enable+0xc4>)
    3598:	0022      	movs	r2, r4
    359a:	4927      	ldr	r1, [pc, #156]	; (3638 <udd_enable+0xc8>)
    359c:	0030      	movs	r0, r6
    359e:	4b27      	ldr	r3, [pc, #156]	; (363c <udd_enable+0xcc>)
    35a0:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    35a2:	0030      	movs	r0, r6
    35a4:	4b26      	ldr	r3, [pc, #152]	; (3640 <udd_enable+0xd0>)
    35a6:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    35a8:	4b26      	ldr	r3, [pc, #152]	; (3644 <udd_enable+0xd4>)
    35aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    35ac:	069b      	lsls	r3, r3, #26
    35ae:	d434      	bmi.n	361a <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    35b0:	4924      	ldr	r1, [pc, #144]	; (3644 <udd_enable+0xd4>)
    35b2:	22d0      	movs	r2, #208	; 0xd0
    35b4:	68cb      	ldr	r3, [r1, #12]
    35b6:	4013      	ands	r3, r2
    35b8:	2bd0      	cmp	r3, #208	; 0xd0
    35ba:	d1fb      	bne.n	35b4 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    35bc:	2001      	movs	r0, #1
    35be:	4b22      	ldr	r3, [pc, #136]	; (3648 <udd_enable+0xd8>)
    35c0:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    35c2:	ac02      	add	r4, sp, #8
    35c4:	0020      	movs	r0, r4
    35c6:	4b21      	ldr	r3, [pc, #132]	; (364c <udd_enable+0xdc>)
    35c8:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    35ca:	230e      	movs	r3, #14
    35cc:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    35ce:	2300      	movs	r3, #0
    35d0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    35d2:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    35d4:	3303      	adds	r3, #3
    35d6:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    35d8:	3b02      	subs	r3, #2
    35da:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    35dc:	2100      	movs	r1, #0
    35de:	200e      	movs	r0, #14
    35e0:	4b1b      	ldr	r3, [pc, #108]	; (3650 <udd_enable+0xe0>)
    35e2:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    35e4:	0021      	movs	r1, r4
    35e6:	200e      	movs	r0, #14
    35e8:	4b1a      	ldr	r3, [pc, #104]	; (3654 <udd_enable+0xe4>)
    35ea:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    35ec:	2200      	movs	r2, #0
    35ee:	210e      	movs	r1, #14
    35f0:	4819      	ldr	r0, [pc, #100]	; (3658 <udd_enable+0xe8>)
    35f2:	4b1a      	ldr	r3, [pc, #104]	; (365c <udd_enable+0xec>)
    35f4:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    35f6:	2100      	movs	r1, #0
    35f8:	200e      	movs	r0, #14
    35fa:	4b19      	ldr	r3, [pc, #100]	; (3660 <udd_enable+0xf0>)
    35fc:	4798      	blx	r3
    35fe:	4b19      	ldr	r3, [pc, #100]	; (3664 <udd_enable+0xf4>)
    3600:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3602:	045b      	lsls	r3, r3, #17
    3604:	d40f      	bmi.n	3626 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3606:	2d00      	cmp	r5, #0
    3608:	d005      	beq.n	3616 <udd_enable+0xa6>
		cpu_irq_enable();
    360a:	2201      	movs	r2, #1
    360c:	4b07      	ldr	r3, [pc, #28]	; (362c <udd_enable+0xbc>)
    360e:	701a      	strb	r2, [r3, #0]
    3610:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3614:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3616:	b006      	add	sp, #24
    3618:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    361a:	490a      	ldr	r1, [pc, #40]	; (3644 <udd_enable+0xd4>)
    361c:	2210      	movs	r2, #16
    361e:	68cb      	ldr	r3, [r1, #12]
    3620:	421a      	tst	r2, r3
    3622:	d0fc      	beq.n	361e <udd_enable+0xae>
    3624:	e7ca      	b.n	35bc <udd_enable+0x4c>
		_uhd_vbus_handler();
    3626:	4b0c      	ldr	r3, [pc, #48]	; (3658 <udd_enable+0xe8>)
    3628:	4798      	blx	r3
    362a:	e7ec      	b.n	3606 <udd_enable+0x96>
    362c:	200000f9 	.word	0x200000f9
    3630:	00004861 	.word	0x00004861
    3634:	200003cc 	.word	0x200003cc
    3638:	41005000 	.word	0x41005000
    363c:	00004871 	.word	0x00004871
    3640:	00004285 	.word	0x00004285
    3644:	40000800 	.word	0x40000800
    3648:	00002885 	.word	0x00002885
    364c:	00001de9 	.word	0x00001de9
    3650:	00004abd 	.word	0x00004abd
    3654:	00001dfd 	.word	0x00001dfd
    3658:	00003535 	.word	0x00003535
    365c:	00004a71 	.word	0x00004a71
    3660:	00004a9d 	.word	0x00004a9d
    3664:	41004400 	.word	0x41004400

00003668 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3668:	b5f0      	push	{r4, r5, r6, r7, lr}
    366a:	46c6      	mov	lr, r8
    366c:	b500      	push	{lr}
    366e:	000c      	movs	r4, r1
    3670:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3672:	2800      	cmp	r0, #0
    3674:	d10f      	bne.n	3696 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3676:	2a00      	cmp	r2, #0
    3678:	dd11      	ble.n	369e <_read+0x36>
    367a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    367c:	4e09      	ldr	r6, [pc, #36]	; (36a4 <_read+0x3c>)
    367e:	4d0a      	ldr	r5, [pc, #40]	; (36a8 <_read+0x40>)
    3680:	6830      	ldr	r0, [r6, #0]
    3682:	0021      	movs	r1, r4
    3684:	682b      	ldr	r3, [r5, #0]
    3686:	4798      	blx	r3
		ptr++;
    3688:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    368a:	42bc      	cmp	r4, r7
    368c:	d1f8      	bne.n	3680 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    368e:	4640      	mov	r0, r8
    3690:	bc04      	pop	{r2}
    3692:	4690      	mov	r8, r2
    3694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3696:	2301      	movs	r3, #1
    3698:	425b      	negs	r3, r3
    369a:	4698      	mov	r8, r3
    369c:	e7f7      	b.n	368e <_read+0x26>
	for (; len > 0; --len) {
    369e:	4680      	mov	r8, r0
    36a0:	e7f5      	b.n	368e <_read+0x26>
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	20000594 	.word	0x20000594
    36a8:	2000058c 	.word	0x2000058c

000036ac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    36ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ae:	46c6      	mov	lr, r8
    36b0:	b500      	push	{lr}
    36b2:	000e      	movs	r6, r1
    36b4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    36b6:	3801      	subs	r0, #1
    36b8:	2802      	cmp	r0, #2
    36ba:	d810      	bhi.n	36de <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    36bc:	2a00      	cmp	r2, #0
    36be:	d011      	beq.n	36e4 <_write+0x38>
    36c0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    36c2:	4b0c      	ldr	r3, [pc, #48]	; (36f4 <_write+0x48>)
    36c4:	4698      	mov	r8, r3
    36c6:	4f0c      	ldr	r7, [pc, #48]	; (36f8 <_write+0x4c>)
    36c8:	4643      	mov	r3, r8
    36ca:	6818      	ldr	r0, [r3, #0]
    36cc:	5d31      	ldrb	r1, [r6, r4]
    36ce:	683b      	ldr	r3, [r7, #0]
    36d0:	4798      	blx	r3
    36d2:	2800      	cmp	r0, #0
    36d4:	db08      	blt.n	36e8 <_write+0x3c>
			return -1;
		}
		++nChars;
    36d6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    36d8:	42a5      	cmp	r5, r4
    36da:	d1f5      	bne.n	36c8 <_write+0x1c>
    36dc:	e006      	b.n	36ec <_write+0x40>
		return -1;
    36de:	2401      	movs	r4, #1
    36e0:	4264      	negs	r4, r4
    36e2:	e003      	b.n	36ec <_write+0x40>
	for (; len != 0; --len) {
    36e4:	0014      	movs	r4, r2
    36e6:	e001      	b.n	36ec <_write+0x40>
			return -1;
    36e8:	2401      	movs	r4, #1
    36ea:	4264      	negs	r4, r4
	}
	return nChars;
}
    36ec:	0020      	movs	r0, r4
    36ee:	bc04      	pop	{r2}
    36f0:	4690      	mov	r8, r2
    36f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36f4:	20000594 	.word	0x20000594
    36f8:	20000590 	.word	0x20000590

000036fc <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    36fc:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    36fe:	2101      	movs	r1, #1
    3700:	4b17      	ldr	r3, [pc, #92]	; (3760 <main+0x64>)
    3702:	7019      	strb	r1, [r3, #0]
    3704:	f3bf 8f5f 	dmb	sy
    3708:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    370a:	4b16      	ldr	r3, [pc, #88]	; (3764 <main+0x68>)
    370c:	2200      	movs	r2, #0
    370e:	701a      	strb	r2, [r3, #0]
    3710:	705a      	strb	r2, [r3, #1]
    3712:	709a      	strb	r2, [r3, #2]
    3714:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3716:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    3718:	4b13      	ldr	r3, [pc, #76]	; (3768 <main+0x6c>)
    371a:	4798      	blx	r3
	
	delay_init();
    371c:	4b13      	ldr	r3, [pc, #76]	; (376c <main+0x70>)
    371e:	4798      	blx	r3
	
	ui_lb_init();
    3720:	4b13      	ldr	r3, [pc, #76]	; (3770 <main+0x74>)
    3722:	4798      	blx	r3
	ui_debouncer_init();
    3724:	4b13      	ldr	r3, [pc, #76]	; (3774 <main+0x78>)
    3726:	4798      	blx	r3
	ui_powerdown();
    3728:	4b13      	ldr	r3, [pc, #76]	; (3778 <main+0x7c>)
    372a:	4798      	blx	r3
	ui_cdc_init();
    372c:	4b13      	ldr	r3, [pc, #76]	; (377c <main+0x80>)
    372e:	4798      	blx	r3
	
	audio_in_init();
    3730:	4b13      	ldr	r3, [pc, #76]	; (3780 <main+0x84>)
    3732:	4798      	blx	r3
	
	sd_mmc_init();
    3734:	4b13      	ldr	r3, [pc, #76]	; (3784 <main+0x88>)
    3736:	4798      	blx	r3

	memories_initialization();
    3738:	4b13      	ldr	r3, [pc, #76]	; (3788 <main+0x8c>)
    373a:	4798      	blx	r3

	ui_configure_callback();
    373c:	4b13      	ldr	r3, [pc, #76]	; (378c <main+0x90>)
    373e:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    3740:	4b13      	ldr	r3, [pc, #76]	; (3790 <main+0x94>)
    3742:	4798      	blx	r3

	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_on) {
    3744:	4c13      	ldr	r4, [pc, #76]	; (3794 <main+0x98>)
			audio_record_1samp();
		}
		else if (main_b_msc_enable) {
    3746:	4d14      	ldr	r5, [pc, #80]	; (3798 <main+0x9c>)
			if (!udi_msc_process_trans()) {
    3748:	4e14      	ldr	r6, [pc, #80]	; (379c <main+0xa0>)
    374a:	e001      	b.n	3750 <main+0x54>
			audio_record_1samp();
    374c:	4b14      	ldr	r3, [pc, #80]	; (37a0 <main+0xa4>)
    374e:	4798      	blx	r3
		if(recording_on) {
    3750:	7823      	ldrb	r3, [r4, #0]
    3752:	2b00      	cmp	r3, #0
    3754:	d1fa      	bne.n	374c <main+0x50>
		else if (main_b_msc_enable) {
    3756:	782b      	ldrb	r3, [r5, #0]
    3758:	2b00      	cmp	r3, #0
    375a:	d0f9      	beq.n	3750 <main+0x54>
			if (!udi_msc_process_trans()) {
    375c:	47b0      	blx	r6
    375e:	e7f7      	b.n	3750 <main+0x54>
    3760:	200000f9 	.word	0x200000f9
    3764:	20000ae8 	.word	0x20000ae8
    3768:	000064b9 	.word	0x000064b9
    376c:	0000566d 	.word	0x0000566d
    3770:	00003a39 	.word	0x00003a39
    3774:	00003ad9 	.word	0x00003ad9
    3778:	00003b89 	.word	0x00003b89
    377c:	00003945 	.word	0x00003945
    3780:	00000379 	.word	0x00000379
    3784:	000006cd 	.word	0x000006cd
    3788:	000037fd 	.word	0x000037fd
    378c:	00003b41 	.word	0x00003b41
    3790:	00001875 	.word	0x00001875
    3794:	20000290 	.word	0x20000290
    3798:	2000028e 	.word	0x2000028e
    379c:	00001595 	.word	0x00001595
    37a0:	00000459 	.word	0x00000459

000037a4 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    37a4:	b510      	push	{r4, lr}
	ui_powerdown();
    37a6:	4b01      	ldr	r3, [pc, #4]	; (37ac <main_suspend_action+0x8>)
    37a8:	4798      	blx	r3
}
    37aa:	bd10      	pop	{r4, pc}
    37ac:	00003b89 	.word	0x00003b89

000037b0 <main_resume_action>:

void main_resume_action(void)
{
    37b0:	b510      	push	{r4, lr}
	ui_wakeup();
    37b2:	4b01      	ldr	r3, [pc, #4]	; (37b8 <main_resume_action+0x8>)
    37b4:	4798      	blx	r3
}
    37b6:	bd10      	pop	{r4, pc}
    37b8:	00003b99 	.word	0x00003b99

000037bc <main_sof_action>:

void main_sof_action(void)
{
    37bc:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    37be:	4b05      	ldr	r3, [pc, #20]	; (37d4 <main_sof_action+0x18>)
    37c0:	781b      	ldrb	r3, [r3, #0]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d100      	bne.n	37c8 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    37c6:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    37c8:	4b03      	ldr	r3, [pc, #12]	; (37d8 <main_sof_action+0x1c>)
    37ca:	4798      	blx	r3
    37cc:	4b03      	ldr	r3, [pc, #12]	; (37dc <main_sof_action+0x20>)
    37ce:	4798      	blx	r3
    37d0:	e7f9      	b.n	37c6 <main_sof_action+0xa>
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	2000028e 	.word	0x2000028e
    37d8:	00002f3d 	.word	0x00002f3d
    37dc:	00003bb1 	.word	0x00003bb1

000037e0 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    37e0:	2201      	movs	r2, #1
    37e2:	4b02      	ldr	r3, [pc, #8]	; (37ec <main_msc_enable+0xc>)
    37e4:	701a      	strb	r2, [r3, #0]
	return true;
}
    37e6:	2001      	movs	r0, #1
    37e8:	4770      	bx	lr
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	2000028e 	.word	0x2000028e

000037f0 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    37f0:	2200      	movs	r2, #0
    37f2:	4b01      	ldr	r3, [pc, #4]	; (37f8 <main_msc_disable+0x8>)
    37f4:	701a      	strb	r2, [r3, #0]
}
    37f6:	4770      	bx	lr
    37f8:	2000028e 	.word	0x2000028e

000037fc <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    37fc:	4770      	bx	lr

000037fe <ui_button2_callback>:
	//}
}

void ui_button2_callback(void)
{
}
    37fe:	4770      	bx	lr

00003800 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3800:	b570      	push	{r4, r5, r6, lr}
    3802:	b082      	sub	sp, #8
    3804:	0005      	movs	r5, r0
    3806:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3808:	2200      	movs	r2, #0
    380a:	466b      	mov	r3, sp
    380c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    380e:	4c06      	ldr	r4, [pc, #24]	; (3828 <usart_serial_getchar+0x28>)
    3810:	466b      	mov	r3, sp
    3812:	1d99      	adds	r1, r3, #6
    3814:	0028      	movs	r0, r5
    3816:	47a0      	blx	r4
    3818:	2800      	cmp	r0, #0
    381a:	d1f9      	bne.n	3810 <usart_serial_getchar+0x10>

	*c = temp;
    381c:	466b      	mov	r3, sp
    381e:	3306      	adds	r3, #6
    3820:	881b      	ldrh	r3, [r3, #0]
    3822:	7033      	strb	r3, [r6, #0]
}
    3824:	b002      	add	sp, #8
    3826:	bd70      	pop	{r4, r5, r6, pc}
    3828:	000022b5 	.word	0x000022b5

0000382c <usart_serial_putchar>:
{
    382c:	b570      	push	{r4, r5, r6, lr}
    382e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3830:	b28c      	uxth	r4, r1
    3832:	4e03      	ldr	r6, [pc, #12]	; (3840 <usart_serial_putchar+0x14>)
    3834:	0021      	movs	r1, r4
    3836:	0028      	movs	r0, r5
    3838:	47b0      	blx	r6
    383a:	2800      	cmp	r0, #0
    383c:	d1fa      	bne.n	3834 <usart_serial_putchar+0x8>
}
    383e:	bd70      	pop	{r4, r5, r6, pc}
    3840:	00002289 	.word	0x00002289

00003844 <ui_button1_callback>:
{
    3844:	b510      	push	{r4, lr}
    3846:	4b17      	ldr	r3, [pc, #92]	; (38a4 <ui_button1_callback+0x60>)
    3848:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    384a:	00db      	lsls	r3, r3, #3
    384c:	d500      	bpl.n	3850 <ui_button1_callback+0xc>
}
    384e:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3850:	2000      	movs	r0, #0
    3852:	4b15      	ldr	r3, [pc, #84]	; (38a8 <ui_button1_callback+0x64>)
    3854:	4798      	blx	r3
    3856:	2264      	movs	r2, #100	; 0x64
    3858:	2300      	movs	r3, #0
    385a:	2100      	movs	r1, #0
    385c:	4c13      	ldr	r4, [pc, #76]	; (38ac <ui_button1_callback+0x68>)
    385e:	47a0      	blx	r4
    3860:	4a13      	ldr	r2, [pc, #76]	; (38b0 <ui_button1_callback+0x6c>)
    3862:	2300      	movs	r3, #0
    3864:	1880      	adds	r0, r0, r2
    3866:	4159      	adcs	r1, r3
    3868:	4a12      	ldr	r2, [pc, #72]	; (38b4 <ui_button1_callback+0x70>)
    386a:	2300      	movs	r3, #0
    386c:	4c12      	ldr	r4, [pc, #72]	; (38b8 <ui_button1_callback+0x74>)
    386e:	47a0      	blx	r4
    3870:	4b12      	ldr	r3, [pc, #72]	; (38bc <ui_button1_callback+0x78>)
    3872:	4798      	blx	r3
    3874:	4b0b      	ldr	r3, [pc, #44]	; (38a4 <ui_button1_callback+0x60>)
    3876:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3878:	00db      	lsls	r3, r3, #3
    387a:	d4e8      	bmi.n	384e <ui_button1_callback+0xa>
		if(recording_on) {
    387c:	4b10      	ldr	r3, [pc, #64]	; (38c0 <ui_button1_callback+0x7c>)
    387e:	781b      	ldrb	r3, [r3, #0]
    3880:	2b00      	cmp	r3, #0
    3882:	d107      	bne.n	3894 <ui_button1_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    3884:	2280      	movs	r2, #128	; 0x80
    3886:	0152      	lsls	r2, r2, #5
    3888:	4b06      	ldr	r3, [pc, #24]	; (38a4 <ui_button1_callback+0x60>)
    388a:	615a      	str	r2, [r3, #20]
			recording_on = true;
    388c:	2201      	movs	r2, #1
    388e:	4b0c      	ldr	r3, [pc, #48]	; (38c0 <ui_button1_callback+0x7c>)
    3890:	701a      	strb	r2, [r3, #0]
}
    3892:	e7dc      	b.n	384e <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3894:	2280      	movs	r2, #128	; 0x80
    3896:	0152      	lsls	r2, r2, #5
    3898:	4b02      	ldr	r3, [pc, #8]	; (38a4 <ui_button1_callback+0x60>)
    389a:	619a      	str	r2, [r3, #24]
			recording_on = false;
    389c:	2200      	movs	r2, #0
    389e:	4b08      	ldr	r3, [pc, #32]	; (38c0 <ui_button1_callback+0x7c>)
    38a0:	701a      	strb	r2, [r3, #0]
    38a2:	e7d4      	b.n	384e <ui_button1_callback+0xa>
    38a4:	41004400 	.word	0x41004400
    38a8:	00006275 	.word	0x00006275
    38ac:	000069ad 	.word	0x000069ad
    38b0:	00001b57 	.word	0x00001b57
    38b4:	00001b58 	.word	0x00001b58
    38b8:	0000696d 	.word	0x0000696d
    38bc:	20000001 	.word	0x20000001
    38c0:	20000290 	.word	0x20000290

000038c4 <ui_button3_callback>:

void ui_button3_callback(void)
{
    38c4:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    38c6:	4b17      	ldr	r3, [pc, #92]	; (3924 <ui_button3_callback+0x60>)
    38c8:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    38ca:	071b      	lsls	r3, r3, #28
    38cc:	d500      	bpl.n	38d0 <ui_button3_callback+0xc>
				//port_pin_set_output_level(UI_LED_3_PIN, UI_LED_ACTIVE);
				//monitoring_on = true;
			//}
		//}
	//}
}
    38ce:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    38d0:	2000      	movs	r0, #0
    38d2:	4b15      	ldr	r3, [pc, #84]	; (3928 <ui_button3_callback+0x64>)
    38d4:	4798      	blx	r3
    38d6:	2264      	movs	r2, #100	; 0x64
    38d8:	2300      	movs	r3, #0
    38da:	2100      	movs	r1, #0
    38dc:	4c13      	ldr	r4, [pc, #76]	; (392c <ui_button3_callback+0x68>)
    38de:	47a0      	blx	r4
    38e0:	4a13      	ldr	r2, [pc, #76]	; (3930 <ui_button3_callback+0x6c>)
    38e2:	2300      	movs	r3, #0
    38e4:	1880      	adds	r0, r0, r2
    38e6:	4159      	adcs	r1, r3
    38e8:	4a12      	ldr	r2, [pc, #72]	; (3934 <ui_button3_callback+0x70>)
    38ea:	2300      	movs	r3, #0
    38ec:	4c12      	ldr	r4, [pc, #72]	; (3938 <ui_button3_callback+0x74>)
    38ee:	47a0      	blx	r4
    38f0:	4b12      	ldr	r3, [pc, #72]	; (393c <ui_button3_callback+0x78>)
    38f2:	4798      	blx	r3
    38f4:	4b0b      	ldr	r3, [pc, #44]	; (3924 <ui_button3_callback+0x60>)
    38f6:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    38f8:	071b      	lsls	r3, r3, #28
    38fa:	d4e8      	bmi.n	38ce <ui_button3_callback+0xa>
		if(monitoring_on) {
    38fc:	4b10      	ldr	r3, [pc, #64]	; (3940 <ui_button3_callback+0x7c>)
    38fe:	781b      	ldrb	r3, [r3, #0]
    3900:	2b00      	cmp	r3, #0
    3902:	d107      	bne.n	3914 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    3904:	2280      	movs	r2, #128	; 0x80
    3906:	0212      	lsls	r2, r2, #8
    3908:	4b06      	ldr	r3, [pc, #24]	; (3924 <ui_button3_callback+0x60>)
    390a:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    390c:	2201      	movs	r2, #1
    390e:	4b0c      	ldr	r3, [pc, #48]	; (3940 <ui_button3_callback+0x7c>)
    3910:	701a      	strb	r2, [r3, #0]
}
    3912:	e7dc      	b.n	38ce <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3914:	2280      	movs	r2, #128	; 0x80
    3916:	0212      	lsls	r2, r2, #8
    3918:	4b02      	ldr	r3, [pc, #8]	; (3924 <ui_button3_callback+0x60>)
    391a:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    391c:	2200      	movs	r2, #0
    391e:	4b08      	ldr	r3, [pc, #32]	; (3940 <ui_button3_callback+0x7c>)
    3920:	701a      	strb	r2, [r3, #0]
    3922:	e7d4      	b.n	38ce <ui_button3_callback+0xa>
    3924:	41004400 	.word	0x41004400
    3928:	00006275 	.word	0x00006275
    392c:	000069ad 	.word	0x000069ad
    3930:	00001b57 	.word	0x00001b57
    3934:	00001b58 	.word	0x00001b58
    3938:	0000696d 	.word	0x0000696d
    393c:	20000001 	.word	0x20000001
    3940:	2000028f 	.word	0x2000028f

00003944 <ui_cdc_init>:
{
    3944:	b5f0      	push	{r4, r5, r6, r7, lr}
    3946:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3948:	2380      	movs	r3, #128	; 0x80
    394a:	05db      	lsls	r3, r3, #23
    394c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    394e:	2300      	movs	r3, #0
    3950:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3952:	22ff      	movs	r2, #255	; 0xff
    3954:	4669      	mov	r1, sp
    3956:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3958:	2200      	movs	r2, #0
    395a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    395c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    395e:	2401      	movs	r4, #1
    3960:	2124      	movs	r1, #36	; 0x24
    3962:	4668      	mov	r0, sp
    3964:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3966:	3101      	adds	r1, #1
    3968:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    396a:	3101      	adds	r1, #1
    396c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    396e:	3101      	adds	r1, #1
    3970:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3972:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3974:	3105      	adds	r1, #5
    3976:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3978:	3101      	adds	r1, #1
    397a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    397c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    397e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3980:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3982:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3984:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3986:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3988:	2313      	movs	r3, #19
    398a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    398c:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    398e:	2380      	movs	r3, #128	; 0x80
    3990:	035b      	lsls	r3, r3, #13
    3992:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    3994:	4b1a      	ldr	r3, [pc, #104]	; (3a00 <ui_cdc_init+0xbc>)
    3996:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    3998:	4b1a      	ldr	r3, [pc, #104]	; (3a04 <ui_cdc_init+0xc0>)
    399a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    399c:	2301      	movs	r3, #1
    399e:	425b      	negs	r3, r3
    39a0:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    39a2:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    39a4:	23e1      	movs	r3, #225	; 0xe1
    39a6:	025b      	lsls	r3, r3, #9
    39a8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    39aa:	4d17      	ldr	r5, [pc, #92]	; (3a08 <ui_cdc_init+0xc4>)
    39ac:	4b17      	ldr	r3, [pc, #92]	; (3a0c <ui_cdc_init+0xc8>)
    39ae:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    39b0:	4a17      	ldr	r2, [pc, #92]	; (3a10 <ui_cdc_init+0xcc>)
    39b2:	4b18      	ldr	r3, [pc, #96]	; (3a14 <ui_cdc_init+0xd0>)
    39b4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    39b6:	4a18      	ldr	r2, [pc, #96]	; (3a18 <ui_cdc_init+0xd4>)
    39b8:	4b18      	ldr	r3, [pc, #96]	; (3a1c <ui_cdc_init+0xd8>)
    39ba:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    39bc:	466a      	mov	r2, sp
    39be:	4918      	ldr	r1, [pc, #96]	; (3a20 <ui_cdc_init+0xdc>)
    39c0:	0028      	movs	r0, r5
    39c2:	4b18      	ldr	r3, [pc, #96]	; (3a24 <ui_cdc_init+0xe0>)
    39c4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    39c6:	4f18      	ldr	r7, [pc, #96]	; (3a28 <ui_cdc_init+0xe4>)
    39c8:	683b      	ldr	r3, [r7, #0]
    39ca:	6898      	ldr	r0, [r3, #8]
    39cc:	2100      	movs	r1, #0
    39ce:	4e17      	ldr	r6, [pc, #92]	; (3a2c <ui_cdc_init+0xe8>)
    39d0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    39d2:	683b      	ldr	r3, [r7, #0]
    39d4:	6858      	ldr	r0, [r3, #4]
    39d6:	2100      	movs	r1, #0
    39d8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    39da:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    39dc:	0030      	movs	r0, r6
    39de:	4b14      	ldr	r3, [pc, #80]	; (3a30 <ui_cdc_init+0xec>)
    39e0:	4798      	blx	r3
    39e2:	231f      	movs	r3, #31
    39e4:	4018      	ands	r0, r3
    39e6:	4084      	lsls	r4, r0
    39e8:	4b12      	ldr	r3, [pc, #72]	; (3a34 <ui_cdc_init+0xf0>)
    39ea:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    39ec:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    39ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    39f0:	2b00      	cmp	r3, #0
    39f2:	d1fc      	bne.n	39ee <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    39f4:	6833      	ldr	r3, [r6, #0]
    39f6:	2202      	movs	r2, #2
    39f8:	4313      	orrs	r3, r2
    39fa:	6033      	str	r3, [r6, #0]
}
    39fc:	b011      	add	sp, #68	; 0x44
    39fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a00:	00160002 	.word	0x00160002
    3a04:	00170002 	.word	0x00170002
    3a08:	200005a4 	.word	0x200005a4
    3a0c:	20000594 	.word	0x20000594
    3a10:	0000382d 	.word	0x0000382d
    3a14:	20000590 	.word	0x20000590
    3a18:	00003801 	.word	0x00003801
    3a1c:	2000058c 	.word	0x2000058c
    3a20:	42001400 	.word	0x42001400
    3a24:	00001f45 	.word	0x00001f45
    3a28:	200000fc 	.word	0x200000fc
    3a2c:	00006c03 	.word	0x00006c03
    3a30:	00001eb5 	.word	0x00001eb5
    3a34:	e000e100 	.word	0xe000e100

00003a38 <ui_lb_init>:
{
    3a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3a:	46c6      	mov	lr, r8
    3a3c:	b500      	push	{lr}
    3a3e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    3a40:	ac03      	add	r4, sp, #12
    3a42:	2501      	movs	r5, #1
    3a44:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3a46:	2600      	movs	r6, #0
    3a48:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3a4a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    3a4c:	0021      	movs	r1, r4
    3a4e:	200c      	movs	r0, #12
    3a50:	4b1c      	ldr	r3, [pc, #112]	; (3ac4 <ui_lb_init+0x8c>)
    3a52:	4698      	mov	r8, r3
    3a54:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3a56:	4f1c      	ldr	r7, [pc, #112]	; (3ac8 <ui_lb_init+0x90>)
    3a58:	2380      	movs	r3, #128	; 0x80
    3a5a:	015b      	lsls	r3, r3, #5
    3a5c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    3a5e:	0021      	movs	r1, r4
    3a60:	200d      	movs	r0, #13
    3a62:	47c0      	blx	r8
    3a64:	2380      	movs	r3, #128	; 0x80
    3a66:	019b      	lsls	r3, r3, #6
    3a68:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    3a6a:	0021      	movs	r1, r4
    3a6c:	200f      	movs	r0, #15
    3a6e:	47c0      	blx	r8
    3a70:	2380      	movs	r3, #128	; 0x80
    3a72:	021b      	lsls	r3, r3, #8
    3a74:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    3a76:	4668      	mov	r0, sp
    3a78:	4b14      	ldr	r3, [pc, #80]	; (3acc <ui_lb_init+0x94>)
    3a7a:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    3a7c:	231c      	movs	r3, #28
    3a7e:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    3a80:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3a82:	466b      	mov	r3, sp
    3a84:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3a86:	2403      	movs	r4, #3
    3a88:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    3a8a:	4669      	mov	r1, sp
    3a8c:	2008      	movs	r0, #8
    3a8e:	4f10      	ldr	r7, [pc, #64]	; (3ad0 <ui_lb_init+0x98>)
    3a90:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    3a92:	2302      	movs	r3, #2
    3a94:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    3a96:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3a98:	466b      	mov	r3, sp
    3a9a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3a9c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    3a9e:	4669      	mov	r1, sp
    3aa0:	2002      	movs	r0, #2
    3aa2:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    3aa4:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    3aa6:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3aa8:	466b      	mov	r3, sp
    3aaa:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3aac:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    3aae:	4669      	mov	r1, sp
    3ab0:	2003      	movs	r0, #3
    3ab2:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3ab4:	2280      	movs	r2, #128	; 0x80
    3ab6:	05d2      	lsls	r2, r2, #23
    3ab8:	4b06      	ldr	r3, [pc, #24]	; (3ad4 <ui_lb_init+0x9c>)
    3aba:	615a      	str	r2, [r3, #20]
}
    3abc:	b004      	add	sp, #16
    3abe:	bc04      	pop	{r2}
    3ac0:	4690      	mov	r8, r2
    3ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ac4:	00006131 	.word	0x00006131
    3ac8:	41004400 	.word	0x41004400
    3acc:	00001de9 	.word	0x00001de9
    3ad0:	00001dfd 	.word	0x00001dfd
    3ad4:	41004480 	.word	0x41004480

00003ad8 <ui_debouncer_init>:
{
    3ad8:	b510      	push	{r4, lr}
    3ada:	b08e      	sub	sp, #56	; 0x38
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    3adc:	aa01      	add	r2, sp, #4
    3ade:	2300      	movs	r3, #0
    3ae0:	2100      	movs	r1, #0
    3ae2:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    3ae4:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    3ae6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    3ae8:	2000      	movs	r0, #0
    3aea:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    3aec:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    3aee:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    3af0:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    3af2:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    3af4:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    3af6:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    3af8:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    3afa:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    3afc:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    3afe:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    3b00:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    3b02:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    3b04:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    3b06:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_source = GCLK_GENERATOR_7; // GCKL7 driven by the internal 32 kHz oscillator
    3b08:	3307      	adds	r3, #7
    3b0a:	7013      	strb	r3, [r2, #0]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256; // Counter running @ 128 Hz (7.8 ms accuracy)
    3b0c:	23c0      	movs	r3, #192	; 0xc0
    3b0e:	00db      	lsls	r3, r3, #3
    3b10:	8093      	strh	r3, [r2, #4]
	tc_init(&debounce_timer_module, TC3, &config_tc);
    3b12:	4c08      	ldr	r4, [pc, #32]	; (3b34 <ui_debouncer_init+0x5c>)
    3b14:	4908      	ldr	r1, [pc, #32]	; (3b38 <ui_debouncer_init+0x60>)
    3b16:	0020      	movs	r0, r4
    3b18:	4b08      	ldr	r3, [pc, #32]	; (3b3c <ui_debouncer_init+0x64>)
    3b1a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3b1c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    3b1e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    3b20:	b25b      	sxtb	r3, r3
    3b22:	2b00      	cmp	r3, #0
    3b24:	dbfb      	blt.n	3b1e <ui_debouncer_init+0x46>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3b26:	8813      	ldrh	r3, [r2, #0]
    3b28:	2102      	movs	r1, #2
    3b2a:	430b      	orrs	r3, r1
    3b2c:	8013      	strh	r3, [r2, #0]
}
    3b2e:	b00e      	add	sp, #56	; 0x38
    3b30:	bd10      	pop	{r4, pc}
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	200005d8 	.word	0x200005d8
    3b38:	42002c00 	.word	0x42002c00
    3b3c:	00000151 	.word	0x00000151

00003b40 <ui_configure_callback>:
{
    3b40:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3b42:	2200      	movs	r2, #0
    3b44:	2108      	movs	r1, #8
    3b46:	480b      	ldr	r0, [pc, #44]	; (3b74 <ui_configure_callback+0x34>)
    3b48:	4c0b      	ldr	r4, [pc, #44]	; (3b78 <ui_configure_callback+0x38>)
    3b4a:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3b4c:	2200      	movs	r2, #0
    3b4e:	2102      	movs	r1, #2
    3b50:	480a      	ldr	r0, [pc, #40]	; (3b7c <ui_configure_callback+0x3c>)
    3b52:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3b54:	2200      	movs	r2, #0
    3b56:	2103      	movs	r1, #3
    3b58:	4809      	ldr	r0, [pc, #36]	; (3b80 <ui_configure_callback+0x40>)
    3b5a:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3b5c:	2100      	movs	r1, #0
    3b5e:	2008      	movs	r0, #8
    3b60:	4c08      	ldr	r4, [pc, #32]	; (3b84 <ui_configure_callback+0x44>)
    3b62:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3b64:	2100      	movs	r1, #0
    3b66:	2002      	movs	r0, #2
    3b68:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3b6a:	2100      	movs	r1, #0
    3b6c:	2003      	movs	r0, #3
    3b6e:	47a0      	blx	r4
}
    3b70:	bd10      	pop	{r4, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	00003845 	.word	0x00003845
    3b78:	00004a71 	.word	0x00004a71
    3b7c:	000037ff 	.word	0x000037ff
    3b80:	000038c5 	.word	0x000038c5
    3b84:	00004a9d 	.word	0x00004a9d

00003b88 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    3b88:	2280      	movs	r2, #128	; 0x80
    3b8a:	05d2      	lsls	r2, r2, #23
    3b8c:	4b01      	ldr	r3, [pc, #4]	; (3b94 <ui_powerdown+0xc>)
    3b8e:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    3b90:	4770      	bx	lr
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	41004480 	.word	0x41004480

00003b98 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    3b98:	2280      	movs	r2, #128	; 0x80
    3b9a:	05d2      	lsls	r2, r2, #23
    3b9c:	4b01      	ldr	r3, [pc, #4]	; (3ba4 <ui_wakeup+0xc>)
    3b9e:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    3ba0:	4770      	bx	lr
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	41004480 	.word	0x41004480

00003ba8 <ui_start_read>:

void ui_start_read(void)
{
}
    3ba8:	4770      	bx	lr

00003baa <ui_stop_read>:

void ui_stop_read(void)
{
}
    3baa:	4770      	bx	lr

00003bac <ui_start_write>:

void ui_start_write(void)
{
}
    3bac:	4770      	bx	lr

00003bae <ui_stop_write>:

void ui_stop_write(void)
{
}
    3bae:	4770      	bx	lr

00003bb0 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d104      	bne.n	3bbe <ui_process+0xe>
    3bb4:	2280      	movs	r2, #128	; 0x80
    3bb6:	05d2      	lsls	r2, r2, #23
    3bb8:	4b05      	ldr	r3, [pc, #20]	; (3bd0 <ui_process+0x20>)
    3bba:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    3bbc:	4770      	bx	lr
	if (1000 == framenumber) {
    3bbe:	23fa      	movs	r3, #250	; 0xfa
    3bc0:	009b      	lsls	r3, r3, #2
    3bc2:	4298      	cmp	r0, r3
    3bc4:	d1fa      	bne.n	3bbc <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    3bc6:	2280      	movs	r2, #128	; 0x80
    3bc8:	05d2      	lsls	r2, r2, #23
    3bca:	4b01      	ldr	r3, [pc, #4]	; (3bd0 <ui_process+0x20>)
    3bcc:	619a      	str	r2, [r3, #24]
}
    3bce:	e7f5      	b.n	3bbc <ui_process+0xc>
    3bd0:	41004480 	.word	0x41004480

00003bd4 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3bd4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3bd6:	000b      	movs	r3, r1
    3bd8:	332e      	adds	r3, #46	; 0x2e
    3bda:	009b      	lsls	r3, r3, #2
    3bdc:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3bde:	22aa      	movs	r2, #170	; 0xaa
    3be0:	0052      	lsls	r2, r2, #1
    3be2:	0049      	lsls	r1, r1, #1
    3be4:	5a83      	ldrh	r3, [r0, r2]
    3be6:	4c03      	ldr	r4, [pc, #12]	; (3bf4 <usb_device_register_callback+0x20>)
    3be8:	5b09      	ldrh	r1, [r1, r4]
    3bea:	430b      	orrs	r3, r1
    3bec:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    3bee:	2000      	movs	r0, #0
    3bf0:	bd10      	pop	{r4, pc}
    3bf2:	46c0      	nop			; (mov r8, r8)
    3bf4:	00007650 	.word	0x00007650

00003bf8 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3bf8:	0049      	lsls	r1, r1, #1
    3bfa:	4b06      	ldr	r3, [pc, #24]	; (3c14 <usb_device_enable_callback+0x1c>)
    3bfc:	5acb      	ldrh	r3, [r1, r3]
    3bfe:	6802      	ldr	r2, [r0, #0]
    3c00:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3c02:	21ab      	movs	r1, #171	; 0xab
    3c04:	0049      	lsls	r1, r1, #1
    3c06:	5a42      	ldrh	r2, [r0, r1]
    3c08:	431a      	orrs	r2, r3
    3c0a:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3c0c:	6802      	ldr	r2, [r0, #0]
    3c0e:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    3c10:	2000      	movs	r0, #0
    3c12:	4770      	bx	lr
    3c14:	00007650 	.word	0x00007650

00003c18 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3c18:	0049      	lsls	r1, r1, #1
    3c1a:	4b05      	ldr	r3, [pc, #20]	; (3c30 <usb_device_disable_callback+0x18>)
    3c1c:	5aca      	ldrh	r2, [r1, r3]
    3c1e:	21ab      	movs	r1, #171	; 0xab
    3c20:	0049      	lsls	r1, r1, #1
    3c22:	5a43      	ldrh	r3, [r0, r1]
    3c24:	4393      	bics	r3, r2
    3c26:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3c28:	6803      	ldr	r3, [r0, #0]
    3c2a:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    3c2c:	2000      	movs	r0, #0
    3c2e:	4770      	bx	lr
    3c30:	00007650 	.word	0x00007650

00003c34 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3c34:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3c36:	008c      	lsls	r4, r1, #2
    3c38:	18a4      	adds	r4, r4, r2
    3c3a:	3434      	adds	r4, #52	; 0x34
    3c3c:	00a4      	lsls	r4, r4, #2
    3c3e:	1904      	adds	r4, r0, r4
    3c40:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3c42:	1840      	adds	r0, r0, r1
    3c44:	3059      	adds	r0, #89	; 0x59
    3c46:	30ff      	adds	r0, #255	; 0xff
    3c48:	7803      	ldrb	r3, [r0, #0]
    3c4a:	4903      	ldr	r1, [pc, #12]	; (3c58 <usb_device_endpoint_register_callback+0x24>)
    3c4c:	5c8a      	ldrb	r2, [r1, r2]
    3c4e:	4313      	orrs	r3, r2
    3c50:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3c52:	2000      	movs	r0, #0
    3c54:	bd10      	pop	{r4, pc}
    3c56:	46c0      	nop			; (mov r8, r8)
    3c58:	00007660 	.word	0x00007660

00003c5c <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3c5c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3c5e:	008b      	lsls	r3, r1, #2
    3c60:	189b      	adds	r3, r3, r2
    3c62:	3334      	adds	r3, #52	; 0x34
    3c64:	009b      	lsls	r3, r3, #2
    3c66:	18c3      	adds	r3, r0, r3
    3c68:	2400      	movs	r4, #0
    3c6a:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3c6c:	1840      	adds	r0, r0, r1
    3c6e:	3059      	adds	r0, #89	; 0x59
    3c70:	30ff      	adds	r0, #255	; 0xff
    3c72:	4b03      	ldr	r3, [pc, #12]	; (3c80 <usb_device_endpoint_unregister_callback+0x24>)
    3c74:	5c9a      	ldrb	r2, [r3, r2]
    3c76:	7803      	ldrb	r3, [r0, #0]
    3c78:	4393      	bics	r3, r2
    3c7a:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    3c7c:	2000      	movs	r0, #0
    3c7e:	bd10      	pop	{r4, pc}
    3c80:	00007660 	.word	0x00007660

00003c84 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3c84:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c86:	230f      	movs	r3, #15
    3c88:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3c8a:	18c4      	adds	r4, r0, r3
    3c8c:	3461      	adds	r4, #97	; 0x61
    3c8e:	34ff      	adds	r4, #255	; 0xff
    3c90:	7825      	ldrb	r5, [r4, #0]
    3c92:	4e2f      	ldr	r6, [pc, #188]	; (3d50 <usb_device_endpoint_enable_callback+0xcc>)
    3c94:	5cb6      	ldrb	r6, [r6, r2]
    3c96:	4335      	orrs	r5, r6
    3c98:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3c9a:	2a00      	cmp	r2, #0
    3c9c:	d129      	bne.n	3cf2 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d112      	bne.n	3cc8 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3ca2:	2503      	movs	r5, #3
    3ca4:	240a      	movs	r4, #10
    3ca6:	34ff      	adds	r4, #255	; 0xff
    3ca8:	6806      	ldr	r6, [r0, #0]
    3caa:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3cac:	2a03      	cmp	r2, #3
    3cae:	d109      	bne.n	3cc4 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3cb0:	b249      	sxtb	r1, r1
    3cb2:	2900      	cmp	r1, #0
    3cb4:	db44      	blt.n	3d40 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3cb6:	6802      	ldr	r2, [r0, #0]
    3cb8:	015b      	lsls	r3, r3, #5
    3cba:	18d3      	adds	r3, r2, r3
    3cbc:	330a      	adds	r3, #10
    3cbe:	33ff      	adds	r3, #255	; 0xff
    3cc0:	2220      	movs	r2, #32
    3cc2:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3cc4:	2000      	movs	r0, #0
    3cc6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3cc8:	b24c      	sxtb	r4, r1
    3cca:	2c00      	cmp	r4, #0
    3ccc:	db08      	blt.n	3ce0 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3cce:	015c      	lsls	r4, r3, #5
    3cd0:	6805      	ldr	r5, [r0, #0]
    3cd2:	46ac      	mov	ip, r5
    3cd4:	4464      	add	r4, ip
    3cd6:	340a      	adds	r4, #10
    3cd8:	34ff      	adds	r4, #255	; 0xff
    3cda:	2501      	movs	r5, #1
    3cdc:	7025      	strb	r5, [r4, #0]
    3cde:	e7e5      	b.n	3cac <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3ce0:	015c      	lsls	r4, r3, #5
    3ce2:	6805      	ldr	r5, [r0, #0]
    3ce4:	46ac      	mov	ip, r5
    3ce6:	4464      	add	r4, ip
    3ce8:	340a      	adds	r4, #10
    3cea:	34ff      	adds	r4, #255	; 0xff
    3cec:	2502      	movs	r5, #2
    3cee:	7025      	strb	r5, [r4, #0]
    3cf0:	e7dc      	b.n	3cac <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3cf2:	2a01      	cmp	r2, #1
    3cf4:	d11a      	bne.n	3d2c <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d105      	bne.n	3d06 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3cfa:	6802      	ldr	r2, [r0, #0]
    3cfc:	210c      	movs	r1, #12
    3cfe:	230a      	movs	r3, #10
    3d00:	33ff      	adds	r3, #255	; 0xff
    3d02:	54d1      	strb	r1, [r2, r3]
    3d04:	e7de      	b.n	3cc4 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3d06:	b249      	sxtb	r1, r1
    3d08:	2900      	cmp	r1, #0
    3d0a:	db07      	blt.n	3d1c <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3d0c:	6802      	ldr	r2, [r0, #0]
    3d0e:	015b      	lsls	r3, r3, #5
    3d10:	18d3      	adds	r3, r2, r3
    3d12:	330a      	adds	r3, #10
    3d14:	33ff      	adds	r3, #255	; 0xff
    3d16:	2204      	movs	r2, #4
    3d18:	701a      	strb	r2, [r3, #0]
    3d1a:	e7d3      	b.n	3cc4 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3d1c:	6802      	ldr	r2, [r0, #0]
    3d1e:	015b      	lsls	r3, r3, #5
    3d20:	18d3      	adds	r3, r2, r3
    3d22:	330a      	adds	r3, #10
    3d24:	33ff      	adds	r3, #255	; 0xff
    3d26:	2208      	movs	r2, #8
    3d28:	701a      	strb	r2, [r3, #0]
    3d2a:	e7cb      	b.n	3cc4 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3d2c:	2a02      	cmp	r2, #2
    3d2e:	d1bd      	bne.n	3cac <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3d30:	6802      	ldr	r2, [r0, #0]
    3d32:	015b      	lsls	r3, r3, #5
    3d34:	18d3      	adds	r3, r2, r3
    3d36:	330a      	adds	r3, #10
    3d38:	33ff      	adds	r3, #255	; 0xff
    3d3a:	2210      	movs	r2, #16
    3d3c:	701a      	strb	r2, [r3, #0]
    3d3e:	e7c1      	b.n	3cc4 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3d40:	6802      	ldr	r2, [r0, #0]
    3d42:	015b      	lsls	r3, r3, #5
    3d44:	18d3      	adds	r3, r2, r3
    3d46:	330a      	adds	r3, #10
    3d48:	33ff      	adds	r3, #255	; 0xff
    3d4a:	2240      	movs	r2, #64	; 0x40
    3d4c:	701a      	strb	r2, [r3, #0]
    3d4e:	e7b9      	b.n	3cc4 <usb_device_endpoint_enable_callback+0x40>
    3d50:	00007660 	.word	0x00007660

00003d54 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3d54:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3d56:	230f      	movs	r3, #15
    3d58:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3d5a:	18c4      	adds	r4, r0, r3
    3d5c:	3461      	adds	r4, #97	; 0x61
    3d5e:	34ff      	adds	r4, #255	; 0xff
    3d60:	4d2f      	ldr	r5, [pc, #188]	; (3e20 <usb_device_endpoint_disable_callback+0xcc>)
    3d62:	5cae      	ldrb	r6, [r5, r2]
    3d64:	7825      	ldrb	r5, [r4, #0]
    3d66:	43b5      	bics	r5, r6
    3d68:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3d6a:	2a00      	cmp	r2, #0
    3d6c:	d129      	bne.n	3dc2 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d112      	bne.n	3d98 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3d72:	2503      	movs	r5, #3
    3d74:	2484      	movs	r4, #132	; 0x84
    3d76:	0064      	lsls	r4, r4, #1
    3d78:	6806      	ldr	r6, [r0, #0]
    3d7a:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3d7c:	2a03      	cmp	r2, #3
    3d7e:	d109      	bne.n	3d94 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    3d80:	b249      	sxtb	r1, r1
    3d82:	2900      	cmp	r1, #0
    3d84:	db44      	blt.n	3e10 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3d86:	6802      	ldr	r2, [r0, #0]
    3d88:	015b      	lsls	r3, r3, #5
    3d8a:	18d3      	adds	r3, r2, r3
    3d8c:	3309      	adds	r3, #9
    3d8e:	33ff      	adds	r3, #255	; 0xff
    3d90:	2220      	movs	r2, #32
    3d92:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    3d94:	2000      	movs	r0, #0
    3d96:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    3d98:	b24c      	sxtb	r4, r1
    3d9a:	2c00      	cmp	r4, #0
    3d9c:	db08      	blt.n	3db0 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3d9e:	015c      	lsls	r4, r3, #5
    3da0:	6805      	ldr	r5, [r0, #0]
    3da2:	46ac      	mov	ip, r5
    3da4:	4464      	add	r4, ip
    3da6:	3409      	adds	r4, #9
    3da8:	34ff      	adds	r4, #255	; 0xff
    3daa:	2501      	movs	r5, #1
    3dac:	7025      	strb	r5, [r4, #0]
    3dae:	e7e5      	b.n	3d7c <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3db0:	015c      	lsls	r4, r3, #5
    3db2:	6805      	ldr	r5, [r0, #0]
    3db4:	46ac      	mov	ip, r5
    3db6:	4464      	add	r4, ip
    3db8:	3409      	adds	r4, #9
    3dba:	34ff      	adds	r4, #255	; 0xff
    3dbc:	2502      	movs	r5, #2
    3dbe:	7025      	strb	r5, [r4, #0]
    3dc0:	e7dc      	b.n	3d7c <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3dc2:	2a01      	cmp	r2, #1
    3dc4:	d11a      	bne.n	3dfc <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d105      	bne.n	3dd6 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3dca:	6802      	ldr	r2, [r0, #0]
    3dcc:	210c      	movs	r1, #12
    3dce:	3309      	adds	r3, #9
    3dd0:	33ff      	adds	r3, #255	; 0xff
    3dd2:	54d1      	strb	r1, [r2, r3]
    3dd4:	e7de      	b.n	3d94 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    3dd6:	b249      	sxtb	r1, r1
    3dd8:	2900      	cmp	r1, #0
    3dda:	db07      	blt.n	3dec <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3ddc:	6802      	ldr	r2, [r0, #0]
    3dde:	015b      	lsls	r3, r3, #5
    3de0:	18d3      	adds	r3, r2, r3
    3de2:	3309      	adds	r3, #9
    3de4:	33ff      	adds	r3, #255	; 0xff
    3de6:	2204      	movs	r2, #4
    3de8:	701a      	strb	r2, [r3, #0]
    3dea:	e7d3      	b.n	3d94 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3dec:	6802      	ldr	r2, [r0, #0]
    3dee:	015b      	lsls	r3, r3, #5
    3df0:	18d3      	adds	r3, r2, r3
    3df2:	3309      	adds	r3, #9
    3df4:	33ff      	adds	r3, #255	; 0xff
    3df6:	2208      	movs	r2, #8
    3df8:	701a      	strb	r2, [r3, #0]
    3dfa:	e7cb      	b.n	3d94 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3dfc:	2a02      	cmp	r2, #2
    3dfe:	d1bd      	bne.n	3d7c <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3e00:	6802      	ldr	r2, [r0, #0]
    3e02:	015b      	lsls	r3, r3, #5
    3e04:	18d3      	adds	r3, r2, r3
    3e06:	3309      	adds	r3, #9
    3e08:	33ff      	adds	r3, #255	; 0xff
    3e0a:	2210      	movs	r2, #16
    3e0c:	701a      	strb	r2, [r3, #0]
    3e0e:	e7c1      	b.n	3d94 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3e10:	6802      	ldr	r2, [r0, #0]
    3e12:	015b      	lsls	r3, r3, #5
    3e14:	18d3      	adds	r3, r2, r3
    3e16:	3309      	adds	r3, #9
    3e18:	33ff      	adds	r3, #255	; 0xff
    3e1a:	2240      	movs	r2, #64	; 0x40
    3e1c:	701a      	strb	r2, [r3, #0]
    3e1e:	e7b9      	b.n	3d94 <usb_device_endpoint_disable_callback+0x40>
    3e20:	00007660 	.word	0x00007660

00003e24 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3e24:	2300      	movs	r3, #0
    3e26:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3e28:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    3e2a:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3e2c:	3301      	adds	r3, #1
    3e2e:	70c3      	strb	r3, [r0, #3]
}
    3e30:	4770      	bx	lr
	...

00003e34 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3e36:	780c      	ldrb	r4, [r1, #0]
    3e38:	230f      	movs	r3, #15
    3e3a:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3e3c:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    3e3e:	78ca      	ldrb	r2, [r1, #3]
    3e40:	2a04      	cmp	r2, #4
    3e42:	d870      	bhi.n	3f26 <usb_device_endpoint_set_config+0xf2>
    3e44:	0092      	lsls	r2, r2, #2
    3e46:	4d89      	ldr	r5, [pc, #548]	; (406c <usb_device_endpoint_set_config+0x238>)
    3e48:	58aa      	ldr	r2, [r5, r2]
    3e4a:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3e4c:	6802      	ldr	r2, [r0, #0]
    3e4e:	3308      	adds	r3, #8
    3e50:	015b      	lsls	r3, r3, #5
    3e52:	2100      	movs	r1, #0
    3e54:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    3e56:	2200      	movs	r2, #0
    3e58:	e082      	b.n	3f60 <usb_device_endpoint_set_config+0x12c>
    3e5a:	015c      	lsls	r4, r3, #5
    3e5c:	6802      	ldr	r2, [r0, #0]
    3e5e:	4694      	mov	ip, r2
    3e60:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3e62:	2280      	movs	r2, #128	; 0x80
    3e64:	0052      	lsls	r2, r2, #1
    3e66:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    3e68:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3e6a:	076d      	lsls	r5, r5, #29
    3e6c:	d178      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3e6e:	32e4      	adds	r2, #228	; 0xe4
    3e70:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3e72:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    3e74:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3e76:	422e      	tst	r6, r5
    3e78:	d172      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3e7a:	3d5f      	subs	r5, #95	; 0x5f
    3e7c:	32e4      	adds	r2, #228	; 0xe4
    3e7e:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3e80:	001a      	movs	r2, r3
    3e82:	3208      	adds	r2, #8
    3e84:	0152      	lsls	r2, r2, #5
    3e86:	6804      	ldr	r4, [r0, #0]
    3e88:	18a4      	adds	r4, r4, r2
    3e8a:	352f      	adds	r5, #47	; 0x2f
    3e8c:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3e8e:	6800      	ldr	r0, [r0, #0]
    3e90:	1882      	adds	r2, r0, r2
    3e92:	2080      	movs	r0, #128	; 0x80
    3e94:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    3e96:	788a      	ldrb	r2, [r1, #2]
    3e98:	2a00      	cmp	r2, #0
    3e9a:	d01f      	beq.n	3edc <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3e9c:	0158      	lsls	r0, r3, #5
    3e9e:	4a74      	ldr	r2, [pc, #464]	; (4070 <usb_device_endpoint_set_config+0x23c>)
    3ea0:	1812      	adds	r2, r2, r0
    3ea2:	6854      	ldr	r4, [r2, #4]
    3ea4:	2080      	movs	r0, #128	; 0x80
    3ea6:	0600      	lsls	r0, r0, #24
    3ea8:	4304      	orrs	r4, r0
    3eaa:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3eac:	6954      	ldr	r4, [r2, #20]
    3eae:	4320      	orrs	r0, r4
    3eb0:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3eb2:	2507      	movs	r5, #7
    3eb4:	784c      	ldrb	r4, [r1, #1]
    3eb6:	015a      	lsls	r2, r3, #5
    3eb8:	4b6d      	ldr	r3, [pc, #436]	; (4070 <usb_device_endpoint_set_config+0x23c>)
    3eba:	189b      	adds	r3, r3, r2
    3ebc:	6858      	ldr	r0, [r3, #4]
    3ebe:	402c      	ands	r4, r5
    3ec0:	0724      	lsls	r4, r4, #28
    3ec2:	4e6c      	ldr	r6, [pc, #432]	; (4074 <usb_device_endpoint_set_config+0x240>)
    3ec4:	4030      	ands	r0, r6
    3ec6:	4320      	orrs	r0, r4
    3ec8:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3eca:	7849      	ldrb	r1, [r1, #1]
    3ecc:	695a      	ldr	r2, [r3, #20]
    3ece:	4029      	ands	r1, r5
    3ed0:	0709      	lsls	r1, r1, #28
    3ed2:	4032      	ands	r2, r6
    3ed4:	430a      	orrs	r2, r1
    3ed6:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    3ed8:	2200      	movs	r2, #0
    3eda:	e041      	b.n	3f60 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3edc:	0158      	lsls	r0, r3, #5
    3ede:	4a64      	ldr	r2, [pc, #400]	; (4070 <usb_device_endpoint_set_config+0x23c>)
    3ee0:	1812      	adds	r2, r2, r0
    3ee2:	6850      	ldr	r0, [r2, #4]
    3ee4:	0040      	lsls	r0, r0, #1
    3ee6:	0840      	lsrs	r0, r0, #1
    3ee8:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3eea:	6950      	ldr	r0, [r2, #20]
    3eec:	0040      	lsls	r0, r0, #1
    3eee:	0840      	lsrs	r0, r0, #1
    3ef0:	6150      	str	r0, [r2, #20]
    3ef2:	e7de      	b.n	3eb2 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    3ef4:	2c00      	cmp	r4, #0
    3ef6:	db35      	blt.n	3f64 <usb_device_endpoint_set_config+0x130>
    3ef8:	015d      	lsls	r5, r3, #5
    3efa:	6802      	ldr	r2, [r0, #0]
    3efc:	4694      	mov	ip, r2
    3efe:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3f00:	2280      	movs	r2, #128	; 0x80
    3f02:	0052      	lsls	r2, r2, #1
    3f04:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    3f06:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3f08:	0776      	lsls	r6, r6, #29
    3f0a:	d129      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    3f0c:	2680      	movs	r6, #128	; 0x80
    3f0e:	0076      	lsls	r6, r6, #1
    3f10:	5daa      	ldrb	r2, [r5, r6]
    3f12:	2702      	movs	r7, #2
    3f14:	433a      	orrs	r2, r7
    3f16:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3f18:	6802      	ldr	r2, [r0, #0]
    3f1a:	0018      	movs	r0, r3
    3f1c:	3008      	adds	r0, #8
    3f1e:	0140      	lsls	r0, r0, #5
    3f20:	1812      	adds	r2, r2, r0
    3f22:	2040      	movs	r0, #64	; 0x40
    3f24:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3f26:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    3f28:	784f      	ldrb	r7, [r1, #1]
    3f2a:	005d      	lsls	r5, r3, #1
    3f2c:	18ad      	adds	r5, r5, r2
    3f2e:	012d      	lsls	r5, r5, #4
    3f30:	4e4f      	ldr	r6, [pc, #316]	; (4070 <usb_device_endpoint_set_config+0x23c>)
    3f32:	1975      	adds	r5, r6, r5
    3f34:	6868      	ldr	r0, [r5, #4]
    3f36:	2407      	movs	r4, #7
    3f38:	403c      	ands	r4, r7
    3f3a:	0724      	lsls	r4, r4, #28
    3f3c:	4e4d      	ldr	r6, [pc, #308]	; (4074 <usb_device_endpoint_set_config+0x240>)
    3f3e:	4030      	ands	r0, r6
    3f40:	4320      	orrs	r0, r4
    3f42:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    3f44:	7889      	ldrb	r1, [r1, #2]
    3f46:	2900      	cmp	r1, #0
    3f48:	d000      	beq.n	3f4c <usb_device_endpoint_set_config+0x118>
    3f4a:	e088      	b.n	405e <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    3f4c:	005b      	lsls	r3, r3, #1
    3f4e:	189b      	adds	r3, r3, r2
    3f50:	011b      	lsls	r3, r3, #4
    3f52:	4a47      	ldr	r2, [pc, #284]	; (4070 <usb_device_endpoint_set_config+0x23c>)
    3f54:	18d3      	adds	r3, r2, r3
    3f56:	685a      	ldr	r2, [r3, #4]
    3f58:	0052      	lsls	r2, r2, #1
    3f5a:	0852      	lsrs	r2, r2, #1
    3f5c:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    3f5e:	2200      	movs	r2, #0
}
    3f60:	0010      	movs	r0, r2
    3f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f64:	015d      	lsls	r5, r3, #5
    3f66:	6802      	ldr	r2, [r0, #0]
    3f68:	4694      	mov	ip, r2
    3f6a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3f6c:	2280      	movs	r2, #128	; 0x80
    3f6e:	0052      	lsls	r2, r2, #1
    3f70:	5caf      	ldrb	r7, [r5, r2]
    3f72:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3f74:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3f76:	4237      	tst	r7, r6
    3f78:	d1f2      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    3f7a:	3690      	adds	r6, #144	; 0x90
    3f7c:	5daa      	ldrb	r2, [r5, r6]
    3f7e:	2720      	movs	r7, #32
    3f80:	433a      	orrs	r2, r7
    3f82:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3f84:	6802      	ldr	r2, [r0, #0]
    3f86:	0018      	movs	r0, r3
    3f88:	3008      	adds	r0, #8
    3f8a:	0140      	lsls	r0, r0, #5
    3f8c:	1812      	adds	r2, r2, r0
    3f8e:	2080      	movs	r0, #128	; 0x80
    3f90:	7110      	strb	r0, [r2, #4]
    3f92:	e7c8      	b.n	3f26 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3f94:	2c00      	cmp	r4, #0
    3f96:	db17      	blt.n	3fc8 <usb_device_endpoint_set_config+0x194>
    3f98:	015d      	lsls	r5, r3, #5
    3f9a:	6802      	ldr	r2, [r0, #0]
    3f9c:	4694      	mov	ip, r2
    3f9e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3fa0:	2280      	movs	r2, #128	; 0x80
    3fa2:	0052      	lsls	r2, r2, #1
    3fa4:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    3fa6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    3fa8:	0776      	lsls	r6, r6, #29
    3faa:	d1d9      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    3fac:	2680      	movs	r6, #128	; 0x80
    3fae:	0076      	lsls	r6, r6, #1
    3fb0:	5daa      	ldrb	r2, [r5, r6]
    3fb2:	2703      	movs	r7, #3
    3fb4:	433a      	orrs	r2, r7
    3fb6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3fb8:	6802      	ldr	r2, [r0, #0]
    3fba:	0018      	movs	r0, r3
    3fbc:	3008      	adds	r0, #8
    3fbe:	0140      	lsls	r0, r0, #5
    3fc0:	1812      	adds	r2, r2, r0
    3fc2:	2040      	movs	r0, #64	; 0x40
    3fc4:	7150      	strb	r0, [r2, #5]
    3fc6:	e7ae      	b.n	3f26 <usb_device_endpoint_set_config+0xf2>
    3fc8:	015d      	lsls	r5, r3, #5
    3fca:	6802      	ldr	r2, [r0, #0]
    3fcc:	4694      	mov	ip, r2
    3fce:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3fd0:	2280      	movs	r2, #128	; 0x80
    3fd2:	0052      	lsls	r2, r2, #1
    3fd4:	5caf      	ldrb	r7, [r5, r2]
    3fd6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    3fd8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    3fda:	4237      	tst	r7, r6
    3fdc:	d1c0      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    3fde:	3690      	adds	r6, #144	; 0x90
    3fe0:	5daa      	ldrb	r2, [r5, r6]
    3fe2:	2730      	movs	r7, #48	; 0x30
    3fe4:	433a      	orrs	r2, r7
    3fe6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    3fe8:	6802      	ldr	r2, [r0, #0]
    3fea:	0018      	movs	r0, r3
    3fec:	3008      	adds	r0, #8
    3fee:	0140      	lsls	r0, r0, #5
    3ff0:	1812      	adds	r2, r2, r0
    3ff2:	2080      	movs	r0, #128	; 0x80
    3ff4:	7110      	strb	r0, [r2, #4]
    3ff6:	e796      	b.n	3f26 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    3ff8:	2c00      	cmp	r4, #0
    3ffa:	db17      	blt.n	402c <usb_device_endpoint_set_config+0x1f8>
    3ffc:	015d      	lsls	r5, r3, #5
    3ffe:	6802      	ldr	r2, [r0, #0]
    4000:	4694      	mov	ip, r2
    4002:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4004:	2280      	movs	r2, #128	; 0x80
    4006:	0052      	lsls	r2, r2, #1
    4008:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    400a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    400c:	0776      	lsls	r6, r6, #29
    400e:	d1a7      	bne.n	3f60 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4010:	2680      	movs	r6, #128	; 0x80
    4012:	0076      	lsls	r6, r6, #1
    4014:	5daa      	ldrb	r2, [r5, r6]
    4016:	2704      	movs	r7, #4
    4018:	433a      	orrs	r2, r7
    401a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    401c:	6802      	ldr	r2, [r0, #0]
    401e:	0018      	movs	r0, r3
    4020:	3008      	adds	r0, #8
    4022:	0140      	lsls	r0, r0, #5
    4024:	1812      	adds	r2, r2, r0
    4026:	2040      	movs	r0, #64	; 0x40
    4028:	7150      	strb	r0, [r2, #5]
    402a:	e77c      	b.n	3f26 <usb_device_endpoint_set_config+0xf2>
    402c:	015d      	lsls	r5, r3, #5
    402e:	6802      	ldr	r2, [r0, #0]
    4030:	4694      	mov	ip, r2
    4032:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4034:	2280      	movs	r2, #128	; 0x80
    4036:	0052      	lsls	r2, r2, #1
    4038:	5caf      	ldrb	r7, [r5, r2]
    403a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    403c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    403e:	4237      	tst	r7, r6
    4040:	d000      	beq.n	4044 <usb_device_endpoint_set_config+0x210>
    4042:	e78d      	b.n	3f60 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4044:	3690      	adds	r6, #144	; 0x90
    4046:	5daa      	ldrb	r2, [r5, r6]
    4048:	2740      	movs	r7, #64	; 0x40
    404a:	433a      	orrs	r2, r7
    404c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    404e:	6802      	ldr	r2, [r0, #0]
    4050:	0018      	movs	r0, r3
    4052:	3008      	adds	r0, #8
    4054:	0140      	lsls	r0, r0, #5
    4056:	1812      	adds	r2, r2, r0
    4058:	2080      	movs	r0, #128	; 0x80
    405a:	7110      	strb	r0, [r2, #4]
    405c:	e763      	b.n	3f26 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    405e:	6869      	ldr	r1, [r5, #4]
    4060:	2380      	movs	r3, #128	; 0x80
    4062:	061b      	lsls	r3, r3, #24
    4064:	430b      	orrs	r3, r1
    4066:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    4068:	2200      	movs	r2, #0
    406a:	e779      	b.n	3f60 <usb_device_endpoint_set_config+0x12c>
    406c:	0000763c 	.word	0x0000763c
    4070:	200005e4 	.word	0x200005e4
    4074:	8fffffff 	.word	0x8fffffff

00004078 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4078:	230f      	movs	r3, #15
    407a:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    407c:	b249      	sxtb	r1, r1
    407e:	2900      	cmp	r1, #0
    4080:	db09      	blt.n	4096 <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4082:	6802      	ldr	r2, [r0, #0]
    4084:	3308      	adds	r3, #8
    4086:	015b      	lsls	r3, r3, #5
    4088:	5c98      	ldrb	r0, [r3, r2]
    408a:	0740      	lsls	r0, r0, #29
    408c:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    408e:	1e43      	subs	r3, r0, #1
    4090:	4198      	sbcs	r0, r3
    4092:	b2c0      	uxtb	r0, r0
}
    4094:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4096:	6802      	ldr	r2, [r0, #0]
    4098:	3308      	adds	r3, #8
    409a:	015b      	lsls	r3, r3, #5
    409c:	5c98      	ldrb	r0, [r3, r2]
    409e:	0640      	lsls	r0, r0, #25
    40a0:	0f40      	lsrs	r0, r0, #29
    40a2:	e7f4      	b.n	408e <usb_device_endpoint_is_configured+0x16>

000040a4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    40a4:	230f      	movs	r3, #15
    40a6:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    40a8:	b249      	sxtb	r1, r1
    40aa:	2900      	cmp	r1, #0
    40ac:	db0a      	blt.n	40c4 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    40ae:	3308      	adds	r3, #8
    40b0:	015b      	lsls	r3, r3, #5
    40b2:	6802      	ldr	r2, [r0, #0]
    40b4:	18d2      	adds	r2, r2, r3
    40b6:	2140      	movs	r1, #64	; 0x40
    40b8:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    40ba:	6802      	ldr	r2, [r0, #0]
    40bc:	18d3      	adds	r3, r2, r3
    40be:	2201      	movs	r2, #1
    40c0:	71da      	strb	r2, [r3, #7]
	}
}
    40c2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    40c4:	3308      	adds	r3, #8
    40c6:	015b      	lsls	r3, r3, #5
    40c8:	6802      	ldr	r2, [r0, #0]
    40ca:	18d2      	adds	r2, r2, r3
    40cc:	2180      	movs	r1, #128	; 0x80
    40ce:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    40d0:	6802      	ldr	r2, [r0, #0]
    40d2:	18d3      	adds	r3, r2, r3
    40d4:	2202      	movs	r2, #2
    40d6:	71da      	strb	r2, [r3, #7]
    40d8:	e7f3      	b.n	40c2 <usb_device_endpoint_abort_job+0x1e>

000040da <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    40da:	230f      	movs	r3, #15
    40dc:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    40de:	b249      	sxtb	r1, r1
    40e0:	2900      	cmp	r1, #0
    40e2:	db07      	blt.n	40f4 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    40e4:	6802      	ldr	r2, [r0, #0]
    40e6:	3308      	adds	r3, #8
    40e8:	015b      	lsls	r3, r3, #5
    40ea:	18d3      	adds	r3, r2, r3
    40ec:	7998      	ldrb	r0, [r3, #6]
    40ee:	06c0      	lsls	r0, r0, #27
    40f0:	0fc0      	lsrs	r0, r0, #31
	}
}
    40f2:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    40f4:	6802      	ldr	r2, [r0, #0]
    40f6:	3308      	adds	r3, #8
    40f8:	015b      	lsls	r3, r3, #5
    40fa:	18d3      	adds	r3, r2, r3
    40fc:	7998      	ldrb	r0, [r3, #6]
    40fe:	0680      	lsls	r0, r0, #26
    4100:	0fc0      	lsrs	r0, r0, #31
    4102:	e7f6      	b.n	40f2 <usb_device_endpoint_is_halted+0x18>

00004104 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4104:	230f      	movs	r3, #15
    4106:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4108:	b249      	sxtb	r1, r1
    410a:	2900      	cmp	r1, #0
    410c:	db06      	blt.n	411c <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    410e:	6802      	ldr	r2, [r0, #0]
    4110:	3308      	adds	r3, #8
    4112:	015b      	lsls	r3, r3, #5
    4114:	18d3      	adds	r3, r2, r3
    4116:	2210      	movs	r2, #16
    4118:	715a      	strb	r2, [r3, #5]
	}
}
    411a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    411c:	6802      	ldr	r2, [r0, #0]
    411e:	3308      	adds	r3, #8
    4120:	015b      	lsls	r3, r3, #5
    4122:	18d3      	adds	r3, r2, r3
    4124:	2220      	movs	r2, #32
    4126:	715a      	strb	r2, [r3, #5]
    4128:	e7f7      	b.n	411a <usb_device_endpoint_set_halt+0x16>

0000412a <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    412a:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    412c:	230f      	movs	r3, #15
    412e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4130:	b249      	sxtb	r1, r1
    4132:	2900      	cmp	r1, #0
    4134:	db1d      	blt.n	4172 <usb_device_endpoint_clear_halt+0x48>
    4136:	0159      	lsls	r1, r3, #5
    4138:	6802      	ldr	r2, [r0, #0]
    413a:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    413c:	2483      	movs	r4, #131	; 0x83
    413e:	0064      	lsls	r4, r4, #1
    4140:	5d14      	ldrb	r4, [r2, r4]
    4142:	06e4      	lsls	r4, r4, #27
    4144:	d514      	bpl.n	4170 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4146:	2510      	movs	r5, #16
    4148:	2482      	movs	r4, #130	; 0x82
    414a:	0064      	lsls	r4, r4, #1
    414c:	5515      	strb	r5, [r2, r4]
    414e:	6802      	ldr	r2, [r0, #0]
    4150:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4152:	2108      	movs	r1, #8
    4154:	31ff      	adds	r1, #255	; 0xff
    4156:	5c51      	ldrb	r1, [r2, r1]
    4158:	0689      	lsls	r1, r1, #26
    415a:	d509      	bpl.n	4170 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    415c:	3ce4      	subs	r4, #228	; 0xe4
    415e:	2108      	movs	r1, #8
    4160:	31ff      	adds	r1, #255	; 0xff
    4162:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4164:	6802      	ldr	r2, [r0, #0]
    4166:	3308      	adds	r3, #8
    4168:	015b      	lsls	r3, r3, #5
    416a:	18d3      	adds	r3, r2, r3
    416c:	2201      	movs	r2, #1
    416e:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    4170:	bd30      	pop	{r4, r5, pc}
    4172:	0159      	lsls	r1, r3, #5
    4174:	6802      	ldr	r2, [r0, #0]
    4176:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4178:	2483      	movs	r4, #131	; 0x83
    417a:	0064      	lsls	r4, r4, #1
    417c:	5d14      	ldrb	r4, [r2, r4]
    417e:	06a4      	lsls	r4, r4, #26
    4180:	d5f6      	bpl.n	4170 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    4182:	2520      	movs	r5, #32
    4184:	2482      	movs	r4, #130	; 0x82
    4186:	0064      	lsls	r4, r4, #1
    4188:	5515      	strb	r5, [r2, r4]
    418a:	6802      	ldr	r2, [r0, #0]
    418c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    418e:	2108      	movs	r1, #8
    4190:	31ff      	adds	r1, #255	; 0xff
    4192:	5c51      	ldrb	r1, [r2, r1]
    4194:	0649      	lsls	r1, r1, #25
    4196:	d5eb      	bpl.n	4170 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4198:	3cc4      	subs	r4, #196	; 0xc4
    419a:	2108      	movs	r1, #8
    419c:	31ff      	adds	r1, #255	; 0xff
    419e:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    41a0:	6802      	ldr	r2, [r0, #0]
    41a2:	3308      	adds	r3, #8
    41a4:	015b      	lsls	r3, r3, #5
    41a6:	18d3      	adds	r3, r2, r3
    41a8:	2202      	movs	r2, #2
    41aa:	711a      	strb	r2, [r3, #4]
    41ac:	e7e0      	b.n	4170 <usb_device_endpoint_clear_halt+0x46>
	...

000041b0 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    41b0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    41b2:	000c      	movs	r4, r1
    41b4:	3408      	adds	r4, #8
    41b6:	0164      	lsls	r4, r4, #5
    41b8:	6805      	ldr	r5, [r0, #0]
    41ba:	5d64      	ldrb	r4, [r4, r5]
    41bc:	0664      	lsls	r4, r4, #25
    41be:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    41c0:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    41c2:	2c00      	cmp	r4, #0
    41c4:	d101      	bne.n	41ca <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    41c6:	0028      	movs	r0, r5
    41c8:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    41ca:	014c      	lsls	r4, r1, #5
    41cc:	4d0b      	ldr	r5, [pc, #44]	; (41fc <usb_device_endpoint_write_buffer_job+0x4c>)
    41ce:	192d      	adds	r5, r5, r4
    41d0:	002c      	movs	r4, r5
    41d2:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    41d4:	696a      	ldr	r2, [r5, #20]
    41d6:	4d0a      	ldr	r5, [pc, #40]	; (4200 <usb_device_endpoint_write_buffer_job+0x50>)
    41d8:	402a      	ands	r2, r5
    41da:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    41dc:	6962      	ldr	r2, [r4, #20]
    41de:	049b      	lsls	r3, r3, #18
    41e0:	0c9b      	lsrs	r3, r3, #18
    41e2:	0b92      	lsrs	r2, r2, #14
    41e4:	0392      	lsls	r2, r2, #14
    41e6:	4313      	orrs	r3, r2
    41e8:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    41ea:	6803      	ldr	r3, [r0, #0]
    41ec:	3108      	adds	r1, #8
    41ee:	0149      	lsls	r1, r1, #5
    41f0:	1859      	adds	r1, r3, r1
    41f2:	2380      	movs	r3, #128	; 0x80
    41f4:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    41f6:	2500      	movs	r5, #0
    41f8:	e7e5      	b.n	41c6 <usb_device_endpoint_write_buffer_job+0x16>
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	200005e4 	.word	0x200005e4
    4200:	f0003fff 	.word	0xf0003fff

00004204 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4204:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4206:	000c      	movs	r4, r1
    4208:	3408      	adds	r4, #8
    420a:	0164      	lsls	r4, r4, #5
    420c:	6805      	ldr	r5, [r0, #0]
    420e:	5d64      	ldrb	r4, [r4, r5]
    4210:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4212:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4214:	2c00      	cmp	r4, #0
    4216:	d101      	bne.n	421c <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4218:	0028      	movs	r0, r5
    421a:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    421c:	4c0b      	ldr	r4, [pc, #44]	; (424c <usb_device_endpoint_read_buffer_job+0x48>)
    421e:	014d      	lsls	r5, r1, #5
    4220:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4222:	1962      	adds	r2, r4, r5
    4224:	6854      	ldr	r4, [r2, #4]
    4226:	049b      	lsls	r3, r3, #18
    4228:	091b      	lsrs	r3, r3, #4
    422a:	4d09      	ldr	r5, [pc, #36]	; (4250 <usb_device_endpoint_read_buffer_job+0x4c>)
    422c:	402c      	ands	r4, r5
    422e:	4323      	orrs	r3, r4
    4230:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4232:	6853      	ldr	r3, [r2, #4]
    4234:	0b9b      	lsrs	r3, r3, #14
    4236:	039b      	lsls	r3, r3, #14
    4238:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    423a:	6803      	ldr	r3, [r0, #0]
    423c:	3108      	adds	r1, #8
    423e:	0149      	lsls	r1, r1, #5
    4240:	1859      	adds	r1, r3, r1
    4242:	2340      	movs	r3, #64	; 0x40
    4244:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    4246:	2500      	movs	r5, #0
    4248:	e7e6      	b.n	4218 <usb_device_endpoint_read_buffer_job+0x14>
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	200005e4 	.word	0x200005e4
    4250:	f0003fff 	.word	0xf0003fff

00004254 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4254:	4b09      	ldr	r3, [pc, #36]	; (427c <usb_device_endpoint_setup_buffer_job+0x28>)
    4256:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4258:	685a      	ldr	r2, [r3, #4]
    425a:	4909      	ldr	r1, [pc, #36]	; (4280 <usb_device_endpoint_setup_buffer_job+0x2c>)
    425c:	4011      	ands	r1, r2
    425e:	2280      	movs	r2, #128	; 0x80
    4260:	0292      	lsls	r2, r2, #10
    4262:	430a      	orrs	r2, r1
    4264:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4266:	685a      	ldr	r2, [r3, #4]
    4268:	0b92      	lsrs	r2, r2, #14
    426a:	0392      	lsls	r2, r2, #14
    426c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    426e:	6802      	ldr	r2, [r0, #0]
    4270:	2140      	movs	r1, #64	; 0x40
    4272:	2382      	movs	r3, #130	; 0x82
    4274:	005b      	lsls	r3, r3, #1
    4276:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    4278:	2000      	movs	r0, #0
    427a:	4770      	bx	lr
    427c:	200005e4 	.word	0x200005e4
    4280:	f0003fff 	.word	0xf0003fff

00004284 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4284:	6802      	ldr	r2, [r0, #0]
    4286:	7813      	ldrb	r3, [r2, #0]
    4288:	2102      	movs	r1, #2
    428a:	430b      	orrs	r3, r1
    428c:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    428e:	6802      	ldr	r2, [r0, #0]
    4290:	7893      	ldrb	r3, [r2, #2]
    4292:	2b02      	cmp	r3, #2
    4294:	d0fc      	beq.n	4290 <usb_enable+0xc>
}
    4296:	4770      	bx	lr

00004298 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4298:	b5f0      	push	{r4, r5, r6, r7, lr}
    429a:	46de      	mov	lr, fp
    429c:	4657      	mov	r7, sl
    429e:	464e      	mov	r6, r9
    42a0:	4645      	mov	r5, r8
    42a2:	b5e0      	push	{r5, r6, r7, lr}
    42a4:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    42a6:	4bc2      	ldr	r3, [pc, #776]	; (45b0 <USB_Handler+0x318>)
    42a8:	681f      	ldr	r7, [r3, #0]
    42aa:	683d      	ldr	r5, [r7, #0]
    42ac:	782b      	ldrb	r3, [r5, #0]
    42ae:	09db      	lsrs	r3, r3, #7
    42b0:	d114      	bne.n	42dc <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    42b2:	8c2e      	ldrh	r6, [r5, #32]
    42b4:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    42b6:	2e00      	cmp	r6, #0
    42b8:	d000      	beq.n	42bc <USB_Handler+0x24>
    42ba:	e1a9      	b.n	4610 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    42bc:	8bae      	ldrh	r6, [r5, #28]
    42be:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    42c0:	23ab      	movs	r3, #171	; 0xab
    42c2:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    42c4:	5afb      	ldrh	r3, [r7, r3]
    42c6:	22aa      	movs	r2, #170	; 0xaa
    42c8:	0052      	lsls	r2, r2, #1
    42ca:	5abd      	ldrh	r5, [r7, r2]
    42cc:	401d      	ands	r5, r3
    42ce:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    42d0:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    42d2:	4fb8      	ldr	r7, [pc, #736]	; (45b4 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    42d4:	4bb6      	ldr	r3, [pc, #728]	; (45b0 <USB_Handler+0x318>)
    42d6:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    42d8:	4698      	mov	r8, r3
    42da:	e184      	b.n	45e6 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    42dc:	8c2b      	ldrh	r3, [r5, #32]
    42de:	b29b      	uxth	r3, r3
    42e0:	2b00      	cmp	r3, #0
    42e2:	d100      	bne.n	42e6 <USB_Handler+0x4e>
    42e4:	e0de      	b.n	44a4 <USB_Handler+0x20c>
    42e6:	8c28      	ldrh	r0, [r5, #32]
    42e8:	b280      	uxth	r0, r0
    42ea:	4bb3      	ldr	r3, [pc, #716]	; (45b8 <USB_Handler+0x320>)
    42ec:	4798      	blx	r3
    42ee:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    42f0:	281f      	cmp	r0, #31
    42f2:	d900      	bls.n	42f6 <USB_Handler+0x5e>
    42f4:	e0d6      	b.n	44a4 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    42f6:	0003      	movs	r3, r0
    42f8:	3308      	adds	r3, #8
    42fa:	015b      	lsls	r3, r3, #5
    42fc:	18ed      	adds	r5, r5, r3
    42fe:	79ed      	ldrb	r5, [r5, #7]
    4300:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4302:	07ab      	lsls	r3, r5, #30
    4304:	d041      	beq.n	438a <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4306:	4aad      	ldr	r2, [pc, #692]	; (45bc <USB_Handler+0x324>)
    4308:	2301      	movs	r3, #1
    430a:	4083      	lsls	r3, r0
    430c:	6811      	ldr	r1, [r2, #0]
    430e:	4399      	bics	r1, r3
    4310:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4312:	0003      	movs	r3, r0
    4314:	3308      	adds	r3, #8
    4316:	015b      	lsls	r3, r3, #5
    4318:	683a      	ldr	r2, [r7, #0]
    431a:	4694      	mov	ip, r2
    431c:	4463      	add	r3, ip
    431e:	2203      	movs	r2, #3
    4320:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4322:	183b      	adds	r3, r7, r0
    4324:	33ae      	adds	r3, #174	; 0xae
    4326:	781b      	ldrb	r3, [r3, #0]
    4328:	07db      	lsls	r3, r3, #31
    432a:	d52e      	bpl.n	438a <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    432c:	4ba4      	ldr	r3, [pc, #656]	; (45c0 <USB_Handler+0x328>)
    432e:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4330:	683a      	ldr	r2, [r7, #0]
    4332:	0003      	movs	r3, r0
    4334:	3308      	adds	r3, #8
    4336:	015b      	lsls	r3, r3, #5
    4338:	5c9b      	ldrb	r3, [r3, r2]
    433a:	079b      	lsls	r3, r3, #30
    433c:	0f9b      	lsrs	r3, r3, #30
    433e:	2b01      	cmp	r3, #1
    4340:	d100      	bne.n	4344 <USB_Handler+0xac>
    4342:	e081      	b.n	4448 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4344:	0142      	lsls	r2, r0, #5
    4346:	4b9f      	ldr	r3, [pc, #636]	; (45c4 <USB_Handler+0x32c>)
    4348:	189b      	adds	r3, r3, r2
    434a:	685a      	ldr	r2, [r3, #4]
    434c:	0112      	lsls	r2, r2, #4
    434e:	0c92      	lsrs	r2, r2, #18
    4350:	b290      	uxth	r0, r2
    4352:	499b      	ldr	r1, [pc, #620]	; (45c0 <USB_Handler+0x328>)
    4354:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4356:	685a      	ldr	r2, [r3, #4]
    4358:	0492      	lsls	r2, r2, #18
    435a:	0c92      	lsrs	r2, r2, #18
    435c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    435e:	685a      	ldr	r2, [r3, #4]
    4360:	4999      	ldr	r1, [pc, #612]	; (45c8 <USB_Handler+0x330>)
    4362:	400a      	ands	r2, r1
    4364:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4366:	2800      	cmp	r0, #0
    4368:	d107      	bne.n	437a <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    436a:	0162      	lsls	r2, r4, #5
    436c:	4b95      	ldr	r3, [pc, #596]	; (45c4 <USB_Handler+0x32c>)
    436e:	189b      	adds	r3, r3, r2
    4370:	685b      	ldr	r3, [r3, #4]
    4372:	049b      	lsls	r3, r3, #18
    4374:	0c9b      	lsrs	r3, r3, #18
    4376:	4a92      	ldr	r2, [pc, #584]	; (45c0 <USB_Handler+0x328>)
    4378:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    437a:	4b8d      	ldr	r3, [pc, #564]	; (45b0 <USB_Handler+0x318>)
    437c:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    437e:	1ca3      	adds	r3, r4, #2
    4380:	011b      	lsls	r3, r3, #4
    4382:	18c3      	adds	r3, r0, r3
    4384:	685b      	ldr	r3, [r3, #4]
    4386:	498e      	ldr	r1, [pc, #568]	; (45c0 <USB_Handler+0x328>)
    4388:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    438a:	076b      	lsls	r3, r5, #29
    438c:	d50e      	bpl.n	43ac <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    438e:	4a8b      	ldr	r2, [pc, #556]	; (45bc <USB_Handler+0x324>)
    4390:	2301      	movs	r3, #1
    4392:	40a3      	lsls	r3, r4
    4394:	6811      	ldr	r1, [r2, #0]
    4396:	4399      	bics	r1, r3
    4398:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    439a:	4b85      	ldr	r3, [pc, #532]	; (45b0 <USB_Handler+0x318>)
    439c:	681b      	ldr	r3, [r3, #0]
    439e:	681b      	ldr	r3, [r3, #0]
    43a0:	0022      	movs	r2, r4
    43a2:	3208      	adds	r2, #8
    43a4:	0152      	lsls	r2, r2, #5
    43a6:	189b      	adds	r3, r3, r2
    43a8:	2204      	movs	r2, #4
    43aa:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    43ac:	072b      	lsls	r3, r5, #28
    43ae:	d514      	bpl.n	43da <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    43b0:	4a82      	ldr	r2, [pc, #520]	; (45bc <USB_Handler+0x324>)
    43b2:	2301      	movs	r3, #1
    43b4:	40a3      	lsls	r3, r4
    43b6:	6811      	ldr	r1, [r2, #0]
    43b8:	4399      	bics	r1, r3
    43ba:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    43bc:	4b7c      	ldr	r3, [pc, #496]	; (45b0 <USB_Handler+0x318>)
    43be:	6818      	ldr	r0, [r3, #0]
    43c0:	0023      	movs	r3, r4
    43c2:	3308      	adds	r3, #8
    43c4:	015b      	lsls	r3, r3, #5
    43c6:	6802      	ldr	r2, [r0, #0]
    43c8:	4694      	mov	ip, r2
    43ca:	4463      	add	r3, ip
    43cc:	2208      	movs	r2, #8
    43ce:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    43d0:	1903      	adds	r3, r0, r4
    43d2:	33ae      	adds	r3, #174	; 0xae
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	079b      	lsls	r3, r3, #30
    43d8:	d447      	bmi.n	446a <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    43da:	06eb      	lsls	r3, r5, #27
    43dc:	d514      	bpl.n	4408 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    43de:	4a77      	ldr	r2, [pc, #476]	; (45bc <USB_Handler+0x324>)
    43e0:	2301      	movs	r3, #1
    43e2:	40a3      	lsls	r3, r4
    43e4:	6811      	ldr	r1, [r2, #0]
    43e6:	4399      	bics	r1, r3
    43e8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    43ea:	4b71      	ldr	r3, [pc, #452]	; (45b0 <USB_Handler+0x318>)
    43ec:	6818      	ldr	r0, [r3, #0]
    43ee:	0023      	movs	r3, r4
    43f0:	3308      	adds	r3, #8
    43f2:	015b      	lsls	r3, r3, #5
    43f4:	6802      	ldr	r2, [r0, #0]
    43f6:	4694      	mov	ip, r2
    43f8:	4463      	add	r3, ip
    43fa:	2210      	movs	r2, #16
    43fc:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    43fe:	1903      	adds	r3, r0, r4
    4400:	33ae      	adds	r3, #174	; 0xae
    4402:	781b      	ldrb	r3, [r3, #0]
    4404:	075b      	lsls	r3, r3, #29
    4406:	d43e      	bmi.n	4486 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4408:	06ab      	lsls	r3, r5, #26
    440a:	d400      	bmi.n	440e <USB_Handler+0x176>
    440c:	e0b0      	b.n	4570 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    440e:	4a6b      	ldr	r2, [pc, #428]	; (45bc <USB_Handler+0x324>)
    4410:	2301      	movs	r3, #1
    4412:	40a3      	lsls	r3, r4
    4414:	6811      	ldr	r1, [r2, #0]
    4416:	4399      	bics	r1, r3
    4418:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    441a:	4b65      	ldr	r3, [pc, #404]	; (45b0 <USB_Handler+0x318>)
    441c:	6818      	ldr	r0, [r3, #0]
    441e:	0023      	movs	r3, r4
    4420:	3308      	adds	r3, #8
    4422:	015b      	lsls	r3, r3, #5
    4424:	6802      	ldr	r2, [r0, #0]
    4426:	4694      	mov	ip, r2
    4428:	4463      	add	r3, ip
    442a:	2220      	movs	r2, #32
    442c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    442e:	1903      	adds	r3, r0, r4
    4430:	33ae      	adds	r3, #174	; 0xae
    4432:	781b      	ldrb	r3, [r3, #0]
    4434:	071b      	lsls	r3, r3, #28
    4436:	d400      	bmi.n	443a <USB_Handler+0x1a2>
    4438:	e09a      	b.n	4570 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    443a:	4961      	ldr	r1, [pc, #388]	; (45c0 <USB_Handler+0x328>)
    443c:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    443e:	0124      	lsls	r4, r4, #4
    4440:	1904      	adds	r4, r0, r4
    4442:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4444:	4798      	blx	r3
    4446:	e093      	b.n	4570 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4448:	0142      	lsls	r2, r0, #5
    444a:	4b5e      	ldr	r3, [pc, #376]	; (45c4 <USB_Handler+0x32c>)
    444c:	189b      	adds	r3, r3, r2
    444e:	685a      	ldr	r2, [r3, #4]
    4450:	0492      	lsls	r2, r2, #18
    4452:	0c92      	lsrs	r2, r2, #18
    4454:	495a      	ldr	r1, [pc, #360]	; (45c0 <USB_Handler+0x328>)
    4456:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4458:	685a      	ldr	r2, [r3, #4]
    445a:	0112      	lsls	r2, r2, #4
    445c:	0c92      	lsrs	r2, r2, #18
    445e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4460:	685a      	ldr	r2, [r3, #4]
    4462:	0b92      	lsrs	r2, r2, #14
    4464:	0392      	lsls	r2, r2, #14
    4466:	605a      	str	r2, [r3, #4]
    4468:	e787      	b.n	437a <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    446a:	4955      	ldr	r1, [pc, #340]	; (45c0 <USB_Handler+0x328>)
    446c:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    446e:	0162      	lsls	r2, r4, #5
    4470:	4b54      	ldr	r3, [pc, #336]	; (45c4 <USB_Handler+0x32c>)
    4472:	189b      	adds	r3, r3, r2
    4474:	89db      	ldrh	r3, [r3, #14]
    4476:	221f      	movs	r2, #31
    4478:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    447a:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    447c:	0123      	lsls	r3, r4, #4
    447e:	18c3      	adds	r3, r0, r3
    4480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4482:	4798      	blx	r3
    4484:	e7a9      	b.n	43da <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    4486:	494e      	ldr	r1, [pc, #312]	; (45c0 <USB_Handler+0x328>)
    4488:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    448a:	0162      	lsls	r2, r4, #5
    448c:	4b4d      	ldr	r3, [pc, #308]	; (45c4 <USB_Handler+0x32c>)
    448e:	189b      	adds	r3, r3, r2
    4490:	685b      	ldr	r3, [r3, #4]
    4492:	011b      	lsls	r3, r3, #4
    4494:	0c9b      	lsrs	r3, r3, #18
    4496:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4498:	0123      	lsls	r3, r4, #4
    449a:	18c3      	adds	r3, r0, r3
    449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    449e:	2100      	movs	r1, #0
    44a0:	4798      	blx	r3
    44a2:	e7b1      	b.n	4408 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    44a4:	8bac      	ldrh	r4, [r5, #28]
    44a6:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    44a8:	0763      	lsls	r3, r4, #29
    44aa:	d505      	bpl.n	44b8 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    44ac:	2304      	movs	r3, #4
    44ae:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    44b0:	33a1      	adds	r3, #161	; 0xa1
    44b2:	5cfb      	ldrb	r3, [r7, r3]
    44b4:	07db      	lsls	r3, r3, #31
    44b6:	d462      	bmi.n	457e <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    44b8:	0723      	lsls	r3, r4, #28
    44ba:	d50b      	bpl.n	44d4 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    44bc:	2200      	movs	r2, #0
    44be:	4b3f      	ldr	r3, [pc, #252]	; (45bc <USB_Handler+0x324>)
    44c0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    44c2:	4b3b      	ldr	r3, [pc, #236]	; (45b0 <USB_Handler+0x318>)
    44c4:	6818      	ldr	r0, [r3, #0]
    44c6:	2308      	movs	r3, #8
    44c8:	6802      	ldr	r2, [r0, #0]
    44ca:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    44cc:	339d      	adds	r3, #157	; 0x9d
    44ce:	5cc3      	ldrb	r3, [r0, r3]
    44d0:	079b      	lsls	r3, r3, #30
    44d2:	d458      	bmi.n	4586 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    44d4:	0663      	lsls	r3, r4, #25
    44d6:	d508      	bpl.n	44ea <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    44d8:	4b35      	ldr	r3, [pc, #212]	; (45b0 <USB_Handler+0x318>)
    44da:	6818      	ldr	r0, [r3, #0]
    44dc:	2340      	movs	r3, #64	; 0x40
    44de:	6802      	ldr	r2, [r0, #0]
    44e0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    44e2:	3365      	adds	r3, #101	; 0x65
    44e4:	5cc3      	ldrb	r3, [r0, r3]
    44e6:	06db      	lsls	r3, r3, #27
    44e8:	d450      	bmi.n	458c <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    44ea:	06a3      	lsls	r3, r4, #26
    44ec:	d508      	bpl.n	4500 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    44ee:	4b30      	ldr	r3, [pc, #192]	; (45b0 <USB_Handler+0x318>)
    44f0:	6818      	ldr	r0, [r3, #0]
    44f2:	2320      	movs	r3, #32
    44f4:	6802      	ldr	r2, [r0, #0]
    44f6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    44f8:	3385      	adds	r3, #133	; 0x85
    44fa:	5cc3      	ldrb	r3, [r0, r3]
    44fc:	071b      	lsls	r3, r3, #28
    44fe:	d448      	bmi.n	4592 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4500:	06e3      	lsls	r3, r4, #27
    4502:	d508      	bpl.n	4516 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4504:	4b2a      	ldr	r3, [pc, #168]	; (45b0 <USB_Handler+0x318>)
    4506:	6818      	ldr	r0, [r3, #0]
    4508:	2310      	movs	r3, #16
    450a:	6802      	ldr	r2, [r0, #0]
    450c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    450e:	3395      	adds	r3, #149	; 0x95
    4510:	5cc3      	ldrb	r3, [r0, r3]
    4512:	075b      	lsls	r3, r3, #29
    4514:	d440      	bmi.n	4598 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4516:	0623      	lsls	r3, r4, #24
    4518:	d50b      	bpl.n	4532 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    451a:	2200      	movs	r2, #0
    451c:	4b27      	ldr	r3, [pc, #156]	; (45bc <USB_Handler+0x324>)
    451e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4520:	4b23      	ldr	r3, [pc, #140]	; (45b0 <USB_Handler+0x318>)
    4522:	6818      	ldr	r0, [r3, #0]
    4524:	2380      	movs	r3, #128	; 0x80
    4526:	6802      	ldr	r2, [r0, #0]
    4528:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    452a:	3325      	adds	r3, #37	; 0x25
    452c:	5cc3      	ldrb	r3, [r0, r3]
    452e:	069b      	lsls	r3, r3, #26
    4530:	d435      	bmi.n	459e <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4532:	05e3      	lsls	r3, r4, #23
    4534:	d50c      	bpl.n	4550 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4536:	2200      	movs	r2, #0
    4538:	4b20      	ldr	r3, [pc, #128]	; (45bc <USB_Handler+0x324>)
    453a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    453c:	4b1c      	ldr	r3, [pc, #112]	; (45b0 <USB_Handler+0x318>)
    453e:	6818      	ldr	r0, [r3, #0]
    4540:	2380      	movs	r3, #128	; 0x80
    4542:	005b      	lsls	r3, r3, #1
    4544:	6802      	ldr	r2, [r0, #0]
    4546:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4548:	3b5b      	subs	r3, #91	; 0x5b
    454a:	5cc3      	ldrb	r3, [r0, r3]
    454c:	065b      	lsls	r3, r3, #25
    454e:	d429      	bmi.n	45a4 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4550:	05a3      	lsls	r3, r4, #22
    4552:	d50d      	bpl.n	4570 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4554:	2200      	movs	r2, #0
    4556:	4b19      	ldr	r3, [pc, #100]	; (45bc <USB_Handler+0x324>)
    4558:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    455a:	4b15      	ldr	r3, [pc, #84]	; (45b0 <USB_Handler+0x318>)
    455c:	6818      	ldr	r0, [r3, #0]
    455e:	2380      	movs	r3, #128	; 0x80
    4560:	009b      	lsls	r3, r3, #2
    4562:	6802      	ldr	r2, [r0, #0]
    4564:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4566:	3b5c      	subs	r3, #92	; 0x5c
    4568:	3bff      	subs	r3, #255	; 0xff
    456a:	5cc3      	ldrb	r3, [r0, r3]
    456c:	2b7f      	cmp	r3, #127	; 0x7f
    456e:	d81c      	bhi.n	45aa <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4570:	b003      	add	sp, #12
    4572:	bc3c      	pop	{r2, r3, r4, r5}
    4574:	4690      	mov	r8, r2
    4576:	4699      	mov	r9, r3
    4578:	46a2      	mov	sl, r4
    457a:	46ab      	mov	fp, r5
    457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	0038      	movs	r0, r7
    4582:	4798      	blx	r3
    4584:	e798      	b.n	44b8 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    4586:	6883      	ldr	r3, [r0, #8]
    4588:	4798      	blx	r3
    458a:	e7a3      	b.n	44d4 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    458c:	6943      	ldr	r3, [r0, #20]
    458e:	4798      	blx	r3
    4590:	e7ab      	b.n	44ea <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4592:	6903      	ldr	r3, [r0, #16]
    4594:	4798      	blx	r3
    4596:	e7b3      	b.n	4500 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    4598:	68c3      	ldr	r3, [r0, #12]
    459a:	4798      	blx	r3
    459c:	e7bb      	b.n	4516 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    459e:	6983      	ldr	r3, [r0, #24]
    45a0:	4798      	blx	r3
    45a2:	e7c6      	b.n	4532 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    45a4:	69c3      	ldr	r3, [r0, #28]
    45a6:	4798      	blx	r3
    45a8:	e7d2      	b.n	4550 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    45aa:	6a03      	ldr	r3, [r0, #32]
    45ac:	4798      	blx	r3
    45ae:	e7df      	b.n	4570 <USB_Handler+0x2d8>
    45b0:	20000294 	.word	0x20000294
    45b4:	00007650 	.word	0x00007650
    45b8:	0000692d 	.word	0x0000692d
    45bc:	200002a4 	.word	0x200002a4
    45c0:	200002a8 	.word	0x200002a8
    45c4:	200005e4 	.word	0x200005e4
    45c8:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    45cc:	0023      	movs	r3, r4
    45ce:	332e      	adds	r3, #46	; 0x2e
    45d0:	009b      	lsls	r3, r3, #2
    45d2:	4642      	mov	r2, r8
    45d4:	6812      	ldr	r2, [r2, #0]
    45d6:	589b      	ldr	r3, [r3, r2]
    45d8:	499e      	ldr	r1, [pc, #632]	; (4854 <USB_Handler+0x5bc>)
    45da:	4642      	mov	r2, r8
    45dc:	6810      	ldr	r0, [r2, #0]
    45de:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    45e0:	3401      	adds	r4, #1
    45e2:	2c07      	cmp	r4, #7
    45e4:	d0c4      	beq.n	4570 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    45e6:	0063      	lsls	r3, r4, #1
    45e8:	5bdb      	ldrh	r3, [r3, r7]
    45ea:	4233      	tst	r3, r6
    45ec:	d003      	beq.n	45f6 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    45ee:	464a      	mov	r2, r9
    45f0:	6812      	ldr	r2, [r2, #0]
    45f2:	6812      	ldr	r2, [r2, #0]
    45f4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    45f6:	422b      	tst	r3, r5
    45f8:	d0f2      	beq.n	45e0 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    45fa:	2c06      	cmp	r4, #6
    45fc:	d1e6      	bne.n	45cc <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    45fe:	4b96      	ldr	r3, [pc, #600]	; (4858 <USB_Handler+0x5c0>)
    4600:	891b      	ldrh	r3, [r3, #8]
    4602:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4604:	2280      	movs	r2, #128	; 0x80
    4606:	0052      	lsls	r2, r2, #1
    4608:	4013      	ands	r3, r2
    460a:	4a92      	ldr	r2, [pc, #584]	; (4854 <USB_Handler+0x5bc>)
    460c:	6013      	str	r3, [r2, #0]
    460e:	e7dd      	b.n	45cc <USB_Handler+0x334>
    4610:	003c      	movs	r4, r7
    4612:	3459      	adds	r4, #89	; 0x59
    4614:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    4616:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    4618:	2201      	movs	r2, #1
    461a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    461c:	325f      	adds	r2, #95	; 0x5f
    461e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4620:	3a50      	subs	r2, #80	; 0x50
    4622:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4624:	3a0d      	subs	r2, #13
    4626:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4628:	46b8      	mov	r8, r7
    462a:	002f      	movs	r7, r5
    462c:	e0b9      	b.n	47a2 <USB_Handler+0x50a>
    462e:	002a      	movs	r2, r5
    4630:	003d      	movs	r5, r7
    4632:	4647      	mov	r7, r8
    4634:	4690      	mov	r8, r2
    4636:	015b      	lsls	r3, r3, #5
    4638:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    463a:	2308      	movs	r3, #8
    463c:	33ff      	adds	r3, #255	; 0xff
    463e:	5ceb      	ldrb	r3, [r5, r3]
    4640:	065b      	lsls	r3, r3, #25
    4642:	d516      	bpl.n	4672 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4644:	2240      	movs	r2, #64	; 0x40
    4646:	2308      	movs	r3, #8
    4648:	33ff      	adds	r3, #255	; 0xff
    464a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    464c:	3b88      	subs	r3, #136	; 0x88
    464e:	3bff      	subs	r3, #255	; 0xff
    4650:	4642      	mov	r2, r8
    4652:	4313      	orrs	r3, r2
    4654:	4a81      	ldr	r2, [pc, #516]	; (485c <USB_Handler+0x5c4>)
    4656:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4658:	2360      	movs	r3, #96	; 0x60
    465a:	420b      	tst	r3, r1
    465c:	d100      	bne.n	4660 <USB_Handler+0x3c8>
    465e:	e787      	b.n	4570 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4660:	9b01      	ldr	r3, [sp, #4]
    4662:	011b      	lsls	r3, r3, #4
    4664:	18fb      	adds	r3, r7, r3
    4666:	33e0      	adds	r3, #224	; 0xe0
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	497c      	ldr	r1, [pc, #496]	; (485c <USB_Handler+0x5c4>)
    466c:	0038      	movs	r0, r7
    466e:	4798      	blx	r3
    4670:	e77e      	b.n	4570 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4672:	2308      	movs	r3, #8
    4674:	33ff      	adds	r3, #255	; 0xff
    4676:	5ceb      	ldrb	r3, [r5, r3]
    4678:	069b      	lsls	r3, r3, #26
    467a:	d5ed      	bpl.n	4658 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    467c:	2220      	movs	r2, #32
    467e:	2308      	movs	r3, #8
    4680:	33ff      	adds	r3, #255	; 0xff
    4682:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4684:	4b75      	ldr	r3, [pc, #468]	; (485c <USB_Handler+0x5c4>)
    4686:	4642      	mov	r2, r8
    4688:	719a      	strb	r2, [r3, #6]
    468a:	e7e5      	b.n	4658 <USB_Handler+0x3c0>
    468c:	003d      	movs	r5, r7
    468e:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4690:	9a01      	ldr	r2, [sp, #4]
    4692:	0013      	movs	r3, r2
    4694:	3308      	adds	r3, #8
    4696:	015b      	lsls	r3, r3, #5
    4698:	18ed      	adds	r5, r5, r3
    469a:	2310      	movs	r3, #16
    469c:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    469e:	18bb      	adds	r3, r7, r2
    46a0:	3361      	adds	r3, #97	; 0x61
    46a2:	33ff      	adds	r3, #255	; 0xff
    46a4:	781b      	ldrb	r3, [r3, #0]
    46a6:	06db      	lsls	r3, r3, #27
    46a8:	d400      	bmi.n	46ac <USB_Handler+0x414>
    46aa:	e761      	b.n	4570 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    46ac:	0010      	movs	r0, r2
    46ae:	0152      	lsls	r2, r2, #5
    46b0:	4b69      	ldr	r3, [pc, #420]	; (4858 <USB_Handler+0x5c0>)
    46b2:	189b      	adds	r3, r3, r2
    46b4:	685b      	ldr	r3, [r3, #4]
    46b6:	049b      	lsls	r3, r3, #18
    46b8:	0c9b      	lsrs	r3, r3, #18
    46ba:	4968      	ldr	r1, [pc, #416]	; (485c <USB_Handler+0x5c4>)
    46bc:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    46be:	0103      	lsls	r3, r0, #4
    46c0:	18fb      	adds	r3, r7, r3
    46c2:	33dc      	adds	r3, #220	; 0xdc
    46c4:	681b      	ldr	r3, [r3, #0]
    46c6:	4640      	mov	r0, r8
    46c8:	4798      	blx	r3
    46ca:	e751      	b.n	4570 <USB_Handler+0x2d8>
    46cc:	002a      	movs	r2, r5
    46ce:	003d      	movs	r5, r7
    46d0:	4647      	mov	r7, r8
    46d2:	4690      	mov	r8, r2
    46d4:	015b      	lsls	r3, r3, #5
    46d6:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    46d8:	2308      	movs	r3, #8
    46da:	33ff      	adds	r3, #255	; 0xff
    46dc:	5ceb      	ldrb	r3, [r5, r3]
    46de:	079b      	lsls	r3, r3, #30
    46e0:	d51e      	bpl.n	4720 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    46e2:	2202      	movs	r2, #2
    46e4:	2308      	movs	r3, #8
    46e6:	33ff      	adds	r3, #255	; 0xff
    46e8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    46ea:	485c      	ldr	r0, [pc, #368]	; (485c <USB_Handler+0x5c4>)
    46ec:	3b88      	subs	r3, #136	; 0x88
    46ee:	3bff      	subs	r3, #255	; 0xff
    46f0:	4642      	mov	r2, r8
    46f2:	4313      	orrs	r3, r2
    46f4:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    46f6:	9b01      	ldr	r3, [sp, #4]
    46f8:	015a      	lsls	r2, r3, #5
    46fa:	4b57      	ldr	r3, [pc, #348]	; (4858 <USB_Handler+0x5c0>)
    46fc:	189b      	adds	r3, r3, r2
    46fe:	3310      	adds	r3, #16
    4700:	685b      	ldr	r3, [r3, #4]
    4702:	049b      	lsls	r3, r3, #18
    4704:	0c9b      	lsrs	r3, r3, #18
    4706:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4708:	078b      	lsls	r3, r1, #30
    470a:	d100      	bne.n	470e <USB_Handler+0x476>
    470c:	e730      	b.n	4570 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    470e:	9b01      	ldr	r3, [sp, #4]
    4710:	330d      	adds	r3, #13
    4712:	011b      	lsls	r3, r3, #4
    4714:	18fb      	adds	r3, r7, r3
    4716:	685b      	ldr	r3, [r3, #4]
    4718:	4950      	ldr	r1, [pc, #320]	; (485c <USB_Handler+0x5c4>)
    471a:	0038      	movs	r0, r7
    471c:	4798      	blx	r3
    471e:	e727      	b.n	4570 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4720:	2308      	movs	r3, #8
    4722:	33ff      	adds	r3, #255	; 0xff
    4724:	5ceb      	ldrb	r3, [r5, r3]
    4726:	07db      	lsls	r3, r3, #31
    4728:	d5ee      	bpl.n	4708 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    472a:	2201      	movs	r2, #1
    472c:	2308      	movs	r3, #8
    472e:	33ff      	adds	r3, #255	; 0xff
    4730:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4732:	484a      	ldr	r0, [pc, #296]	; (485c <USB_Handler+0x5c4>)
    4734:	4643      	mov	r3, r8
    4736:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4738:	9b01      	ldr	r3, [sp, #4]
    473a:	015b      	lsls	r3, r3, #5
    473c:	4a46      	ldr	r2, [pc, #280]	; (4858 <USB_Handler+0x5c0>)
    473e:	18d2      	adds	r2, r2, r3
    4740:	6853      	ldr	r3, [r2, #4]
    4742:	049b      	lsls	r3, r3, #18
    4744:	0c9b      	lsrs	r3, r3, #18
    4746:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4748:	6853      	ldr	r3, [r2, #4]
    474a:	011b      	lsls	r3, r3, #4
    474c:	0c9b      	lsrs	r3, r3, #18
    474e:	8083      	strh	r3, [r0, #4]
    4750:	e7da      	b.n	4708 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4752:	2208      	movs	r2, #8
    4754:	32ff      	adds	r2, #255	; 0xff
    4756:	5c9a      	ldrb	r2, [r3, r2]
    4758:	0752      	lsls	r2, r2, #29
    475a:	d56e      	bpl.n	483a <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    475c:	2004      	movs	r0, #4
    475e:	2208      	movs	r2, #8
    4760:	32ff      	adds	r2, #255	; 0xff
    4762:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4764:	9801      	ldr	r0, [sp, #4]
    4766:	0142      	lsls	r2, r0, #5
    4768:	4b3b      	ldr	r3, [pc, #236]	; (4858 <USB_Handler+0x5c0>)
    476a:	189b      	adds	r3, r3, r2
    476c:	7a9b      	ldrb	r3, [r3, #10]
    476e:	079b      	lsls	r3, r3, #30
    4770:	d505      	bpl.n	477e <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4772:	4b39      	ldr	r3, [pc, #228]	; (4858 <USB_Handler+0x5c0>)
    4774:	189b      	adds	r3, r3, r2
    4776:	7a9a      	ldrb	r2, [r3, #10]
    4778:	2002      	movs	r0, #2
    477a:	4382      	bics	r2, r0
    477c:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    477e:	4b37      	ldr	r3, [pc, #220]	; (485c <USB_Handler+0x5c4>)
    4780:	4642      	mov	r2, r8
    4782:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4784:	9b01      	ldr	r3, [sp, #4]
    4786:	3308      	adds	r3, #8
    4788:	015b      	lsls	r3, r3, #5
    478a:	683a      	ldr	r2, [r7, #0]
    478c:	4694      	mov	ip, r2
    478e:	4463      	add	r3, ip
    4790:	79db      	ldrb	r3, [r3, #7]
    4792:	07db      	lsls	r3, r3, #31
    4794:	d551      	bpl.n	483a <USB_Handler+0x5a2>
    4796:	e6eb      	b.n	4570 <USB_Handler+0x2d8>
    4798:	3301      	adds	r3, #1
    479a:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    479c:	2b08      	cmp	r3, #8
    479e:	d100      	bne.n	47a2 <USB_Handler+0x50a>
    47a0:	e6e6      	b.n	4570 <USB_Handler+0x2d8>
    47a2:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    47a4:	9301      	str	r3, [sp, #4]
    47a6:	0032      	movs	r2, r6
    47a8:	411a      	asrs	r2, r3
    47aa:	4661      	mov	r1, ip
    47ac:	4211      	tst	r1, r2
    47ae:	d0f3      	beq.n	4798 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    47b0:	001a      	movs	r2, r3
    47b2:	3208      	adds	r2, #8
    47b4:	0152      	lsls	r2, r2, #5
    47b6:	18ba      	adds	r2, r7, r2
    47b8:	79d2      	ldrb	r2, [r2, #7]
    47ba:	b2d2      	uxtb	r2, r2
    47bc:	7a21      	ldrb	r1, [r4, #8]
    47be:	4011      	ands	r1, r2
    47c0:	7820      	ldrb	r0, [r4, #0]
    47c2:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    47c4:	4648      	mov	r0, r9
    47c6:	4210      	tst	r0, r2
    47c8:	d000      	beq.n	47cc <USB_Handler+0x534>
    47ca:	e730      	b.n	462e <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    47cc:	4650      	mov	r0, sl
    47ce:	4210      	tst	r0, r2
    47d0:	d000      	beq.n	47d4 <USB_Handler+0x53c>
    47d2:	e75b      	b.n	468c <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    47d4:	4658      	mov	r0, fp
    47d6:	4210      	tst	r0, r2
    47d8:	d000      	beq.n	47dc <USB_Handler+0x544>
    47da:	e777      	b.n	46cc <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    47dc:	200c      	movs	r0, #12
    47de:	4210      	tst	r0, r2
    47e0:	d0da      	beq.n	4798 <USB_Handler+0x500>
    47e2:	002a      	movs	r2, r5
    47e4:	003d      	movs	r5, r7
    47e6:	4647      	mov	r7, r8
    47e8:	4690      	mov	r8, r2
    47ea:	015b      	lsls	r3, r3, #5
    47ec:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    47ee:	2208      	movs	r2, #8
    47f0:	32ff      	adds	r2, #255	; 0xff
    47f2:	5c9a      	ldrb	r2, [r3, r2]
    47f4:	0712      	lsls	r2, r2, #28
    47f6:	d5ac      	bpl.n	4752 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    47f8:	3804      	subs	r0, #4
    47fa:	2208      	movs	r2, #8
    47fc:	32ff      	adds	r2, #255	; 0xff
    47fe:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4800:	9801      	ldr	r0, [sp, #4]
    4802:	0142      	lsls	r2, r0, #5
    4804:	4b14      	ldr	r3, [pc, #80]	; (4858 <USB_Handler+0x5c0>)
    4806:	189b      	adds	r3, r3, r2
    4808:	7e9b      	ldrb	r3, [r3, #26]
    480a:	079b      	lsls	r3, r3, #30
    480c:	d505      	bpl.n	481a <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    480e:	4b12      	ldr	r3, [pc, #72]	; (4858 <USB_Handler+0x5c0>)
    4810:	189b      	adds	r3, r3, r2
    4812:	7e9a      	ldrb	r2, [r3, #26]
    4814:	2002      	movs	r0, #2
    4816:	4382      	bics	r2, r0
    4818:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    481a:	2380      	movs	r3, #128	; 0x80
    481c:	425b      	negs	r3, r3
    481e:	4642      	mov	r2, r8
    4820:	4313      	orrs	r3, r2
    4822:	4a0e      	ldr	r2, [pc, #56]	; (485c <USB_Handler+0x5c4>)
    4824:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4826:	9b01      	ldr	r3, [sp, #4]
    4828:	3308      	adds	r3, #8
    482a:	015b      	lsls	r3, r3, #5
    482c:	683a      	ldr	r2, [r7, #0]
    482e:	4694      	mov	ip, r2
    4830:	4463      	add	r3, ip
    4832:	79db      	ldrb	r3, [r3, #7]
    4834:	079b      	lsls	r3, r3, #30
    4836:	d500      	bpl.n	483a <USB_Handler+0x5a2>
    4838:	e69a      	b.n	4570 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    483a:	230c      	movs	r3, #12
    483c:	420b      	tst	r3, r1
    483e:	d100      	bne.n	4842 <USB_Handler+0x5aa>
    4840:	e696      	b.n	4570 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4842:	9b01      	ldr	r3, [sp, #4]
    4844:	011b      	lsls	r3, r3, #4
    4846:	18fb      	adds	r3, r7, r3
    4848:	33d8      	adds	r3, #216	; 0xd8
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	4903      	ldr	r1, [pc, #12]	; (485c <USB_Handler+0x5c4>)
    484e:	0038      	movs	r0, r7
    4850:	4798      	blx	r3
    4852:	e68d      	b.n	4570 <USB_Handler+0x2d8>
    4854:	20000298 	.word	0x20000298
    4858:	200005e4 	.word	0x200005e4
    485c:	2000029c 	.word	0x2000029c

00004860 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4860:	2200      	movs	r2, #0
    4862:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4864:	2301      	movs	r3, #1
    4866:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4868:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    486a:	70c3      	strb	r3, [r0, #3]
}
    486c:	4770      	bx	lr
	...

00004870 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4870:	b5f0      	push	{r4, r5, r6, r7, lr}
    4872:	46ce      	mov	lr, r9
    4874:	4647      	mov	r7, r8
    4876:	b580      	push	{r7, lr}
    4878:	b083      	sub	sp, #12
    487a:	0004      	movs	r4, r0
    487c:	000d      	movs	r5, r1
    487e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4880:	2300      	movs	r3, #0
    4882:	4a6e      	ldr	r2, [pc, #440]	; (4a3c <usb_init+0x1cc>)
    4884:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4886:	4a6e      	ldr	r2, [pc, #440]	; (4a40 <usb_init+0x1d0>)
    4888:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    488a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    488c:	496d      	ldr	r1, [pc, #436]	; (4a44 <usb_init+0x1d4>)
    488e:	69ca      	ldr	r2, [r1, #28]
    4890:	2020      	movs	r0, #32
    4892:	4302      	orrs	r2, r0
    4894:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4896:	af01      	add	r7, sp, #4
    4898:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    489a:	2201      	movs	r2, #1
    489c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    489e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    48a0:	3306      	adds	r3, #6
    48a2:	4699      	mov	r9, r3
    48a4:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    48a6:	0039      	movs	r1, r7
    48a8:	3808      	subs	r0, #8
    48aa:	4b67      	ldr	r3, [pc, #412]	; (4a48 <usb_init+0x1d8>)
    48ac:	4698      	mov	r8, r3
    48ae:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    48b0:	464b      	mov	r3, r9
    48b2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    48b4:	0039      	movs	r1, r7
    48b6:	2019      	movs	r0, #25
    48b8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    48ba:	78b3      	ldrb	r3, [r6, #2]
    48bc:	466a      	mov	r2, sp
    48be:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    48c0:	4669      	mov	r1, sp
    48c2:	2006      	movs	r0, #6
    48c4:	4b61      	ldr	r3, [pc, #388]	; (4a4c <usb_init+0x1dc>)
    48c6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    48c8:	2006      	movs	r0, #6
    48ca:	4b61      	ldr	r3, [pc, #388]	; (4a50 <usb_init+0x1e0>)
    48cc:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    48ce:	782b      	ldrb	r3, [r5, #0]
    48d0:	2201      	movs	r2, #1
    48d2:	4313      	orrs	r3, r2
    48d4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    48d6:	78ab      	ldrb	r3, [r5, #2]
    48d8:	07db      	lsls	r3, r3, #31
    48da:	d4fc      	bmi.n	48d6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    48dc:	4a5d      	ldr	r2, [pc, #372]	; (4a54 <usb_init+0x1e4>)
    48de:	78d3      	ldrb	r3, [r2, #3]
    48e0:	2103      	movs	r1, #3
    48e2:	438b      	bics	r3, r1
    48e4:	2102      	movs	r1, #2
    48e6:	430b      	orrs	r3, r1
    48e8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    48ea:	78d3      	ldrb	r3, [r2, #3]
    48ec:	210c      	movs	r1, #12
    48ee:	438b      	bics	r3, r1
    48f0:	2108      	movs	r1, #8
    48f2:	430b      	orrs	r3, r1
    48f4:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    48f6:	4b58      	ldr	r3, [pc, #352]	; (4a58 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    48f8:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    48fa:	039b      	lsls	r3, r3, #14
    48fc:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    48fe:	2b1f      	cmp	r3, #31
    4900:	d100      	bne.n	4904 <usb_init+0x94>
    4902:	e08f      	b.n	4a24 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4904:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4906:	019b      	lsls	r3, r3, #6
    4908:	4954      	ldr	r1, [pc, #336]	; (4a5c <usb_init+0x1ec>)
    490a:	400a      	ands	r2, r1
    490c:	4313      	orrs	r3, r2
    490e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4910:	4b51      	ldr	r3, [pc, #324]	; (4a58 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4916:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4918:	2b1f      	cmp	r3, #31
    491a:	d100      	bne.n	491e <usb_init+0xae>
    491c:	e084      	b.n	4a28 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    491e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4920:	211f      	movs	r1, #31
    4922:	438a      	bics	r2, r1
    4924:	4313      	orrs	r3, r2
    4926:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4928:	4b4b      	ldr	r3, [pc, #300]	; (4a58 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    492a:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    492c:	019b      	lsls	r3, r3, #6
    492e:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4930:	2b07      	cmp	r3, #7
    4932:	d100      	bne.n	4936 <usb_init+0xc6>
    4934:	e07a      	b.n	4a2c <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4936:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4938:	031b      	lsls	r3, r3, #12
    493a:	4949      	ldr	r1, [pc, #292]	; (4a60 <usb_init+0x1f0>)
    493c:	400a      	ands	r2, r1
    493e:	4313      	orrs	r3, r2
    4940:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4942:	7832      	ldrb	r2, [r6, #0]
    4944:	7829      	ldrb	r1, [r5, #0]
    4946:	01d2      	lsls	r2, r2, #7
    4948:	237f      	movs	r3, #127	; 0x7f
    494a:	400b      	ands	r3, r1
    494c:	4313      	orrs	r3, r2
    494e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4950:	7871      	ldrb	r1, [r6, #1]
    4952:	782b      	ldrb	r3, [r5, #0]
    4954:	2201      	movs	r2, #1
    4956:	400a      	ands	r2, r1
    4958:	0092      	lsls	r2, r2, #2
    495a:	2104      	movs	r1, #4
    495c:	438b      	bics	r3, r1
    495e:	4313      	orrs	r3, r2
    4960:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4962:	4b40      	ldr	r3, [pc, #256]	; (4a64 <usb_init+0x1f4>)
    4964:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4966:	78f3      	ldrb	r3, [r6, #3]
    4968:	2b01      	cmp	r3, #1
    496a:	d061      	beq.n	4a30 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    496c:	2b00      	cmp	r3, #0
    496e:	d106      	bne.n	497e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4970:	6822      	ldr	r2, [r4, #0]
    4972:	8913      	ldrh	r3, [r2, #8]
    4974:	210c      	movs	r1, #12
    4976:	438b      	bics	r3, r1
    4978:	2104      	movs	r1, #4
    497a:	430b      	orrs	r3, r1
    497c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    497e:	2280      	movs	r2, #128	; 0x80
    4980:	0052      	lsls	r2, r2, #1
    4982:	2100      	movs	r1, #0
    4984:	4837      	ldr	r0, [pc, #220]	; (4a64 <usb_init+0x1f4>)
    4986:	4b38      	ldr	r3, [pc, #224]	; (4a68 <usb_init+0x1f8>)
    4988:	4798      	blx	r3
    498a:	1d23      	adds	r3, r4, #4
    498c:	0021      	movs	r1, r4
    498e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4990:	2200      	movs	r2, #0
    4992:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4994:	428b      	cmp	r3, r1
    4996:	d1fc      	bne.n	4992 <usb_init+0x122>
    4998:	0021      	movs	r1, r4
    499a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    499c:	2200      	movs	r2, #0
    499e:	601a      	str	r2, [r3, #0]
    49a0:	605a      	str	r2, [r3, #4]
    49a2:	609a      	str	r2, [r3, #8]
    49a4:	60da      	str	r2, [r3, #12]
    49a6:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    49a8:	428b      	cmp	r3, r1
    49aa:	d1f8      	bne.n	499e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    49ac:	2300      	movs	r3, #0
    49ae:	22a4      	movs	r2, #164	; 0xa4
    49b0:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    49b2:	3201      	adds	r2, #1
    49b4:	54a3      	strb	r3, [r4, r2]
    49b6:	0023      	movs	r3, r4
    49b8:	33a6      	adds	r3, #166	; 0xa6
    49ba:	0021      	movs	r1, r4
    49bc:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    49be:	2200      	movs	r2, #0
    49c0:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    49c2:	721a      	strb	r2, [r3, #8]
    49c4:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    49c6:	4299      	cmp	r1, r3
    49c8:	d1fa      	bne.n	49c0 <usb_init+0x150>
    49ca:	0023      	movs	r3, r4
    49cc:	33b8      	adds	r3, #184	; 0xb8
    49ce:	0021      	movs	r1, r4
    49d0:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    49d2:	2200      	movs	r2, #0
    49d4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    49d6:	428b      	cmp	r3, r1
    49d8:	d1fc      	bne.n	49d4 <usb_init+0x164>
    49da:	0021      	movs	r1, r4
    49dc:	3155      	adds	r1, #85	; 0x55
    49de:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    49e0:	2200      	movs	r2, #0
    49e2:	601a      	str	r2, [r3, #0]
    49e4:	605a      	str	r2, [r3, #4]
    49e6:	609a      	str	r2, [r3, #8]
    49e8:	60da      	str	r2, [r3, #12]
    49ea:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    49ec:	428b      	cmp	r3, r1
    49ee:	d1f8      	bne.n	49e2 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    49f0:	2300      	movs	r3, #0
    49f2:	22aa      	movs	r2, #170	; 0xaa
    49f4:	0052      	lsls	r2, r2, #1
    49f6:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    49f8:	3202      	adds	r2, #2
    49fa:	52a3      	strh	r3, [r4, r2]
    49fc:	0023      	movs	r3, r4
    49fe:	3359      	adds	r3, #89	; 0x59
    4a00:	33ff      	adds	r3, #255	; 0xff
    4a02:	3461      	adds	r4, #97	; 0x61
    4a04:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4a06:	2200      	movs	r2, #0
    4a08:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4a0a:	721a      	strb	r2, [r3, #8]
    4a0c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4a0e:	42a3      	cmp	r3, r4
    4a10:	d1fa      	bne.n	4a08 <usb_init+0x198>
    4a12:	2280      	movs	r2, #128	; 0x80
    4a14:	4b15      	ldr	r3, [pc, #84]	; (4a6c <usb_init+0x1fc>)
    4a16:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4a18:	2000      	movs	r0, #0
    4a1a:	b003      	add	sp, #12
    4a1c:	bc0c      	pop	{r2, r3}
    4a1e:	4690      	mov	r8, r2
    4a20:	4699      	mov	r9, r3
    4a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4a24:	3b1a      	subs	r3, #26
    4a26:	e76d      	b.n	4904 <usb_init+0x94>
		pad_transp = 29;
    4a28:	3b02      	subs	r3, #2
    4a2a:	e778      	b.n	491e <usb_init+0xae>
		pad_trim = 3;
    4a2c:	3b04      	subs	r3, #4
    4a2e:	e782      	b.n	4936 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4a30:	6822      	ldr	r2, [r4, #0]
    4a32:	8913      	ldrh	r3, [r2, #8]
    4a34:	3108      	adds	r1, #8
    4a36:	438b      	bics	r3, r1
    4a38:	8113      	strh	r3, [r2, #8]
    4a3a:	e7a0      	b.n	497e <usb_init+0x10e>
    4a3c:	200002a4 	.word	0x200002a4
    4a40:	20000294 	.word	0x20000294
    4a44:	40000400 	.word	0x40000400
    4a48:	00006485 	.word	0x00006485
    4a4c:	0000638d 	.word	0x0000638d
    4a50:	00006301 	.word	0x00006301
    4a54:	41005000 	.word	0x41005000
    4a58:	00806024 	.word	0x00806024
    4a5c:	fffff83f 	.word	0xfffff83f
    4a60:	ffff8fff 	.word	0xffff8fff
    4a64:	200005e4 	.word	0x200005e4
    4a68:	00006bf3 	.word	0x00006bf3
    4a6c:	e000e100 	.word	0xe000e100

00004a70 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4a70:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4a72:	2a00      	cmp	r2, #0
    4a74:	d001      	beq.n	4a7a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4a76:	0018      	movs	r0, r3
    4a78:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4a7a:	008b      	lsls	r3, r1, #2
    4a7c:	4a06      	ldr	r2, [pc, #24]	; (4a98 <extint_register_callback+0x28>)
    4a7e:	589b      	ldr	r3, [r3, r2]
    4a80:	2b00      	cmp	r3, #0
    4a82:	d003      	beq.n	4a8c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4a84:	4283      	cmp	r3, r0
    4a86:	d005      	beq.n	4a94 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4a88:	231d      	movs	r3, #29
    4a8a:	e7f4      	b.n	4a76 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4a8c:	0089      	lsls	r1, r1, #2
    4a8e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4a90:	2300      	movs	r3, #0
    4a92:	e7f0      	b.n	4a76 <extint_register_callback+0x6>
		return STATUS_OK;
    4a94:	2300      	movs	r3, #0
    4a96:	e7ee      	b.n	4a76 <extint_register_callback+0x6>
    4a98:	200002f4 	.word	0x200002f4

00004a9c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4a9c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4a9e:	2900      	cmp	r1, #0
    4aa0:	d001      	beq.n	4aa6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4aa2:	0018      	movs	r0, r3
    4aa4:	4770      	bx	lr
		return NULL;
    4aa6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4aa8:	281f      	cmp	r0, #31
    4aaa:	d800      	bhi.n	4aae <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4aac:	4a02      	ldr	r2, [pc, #8]	; (4ab8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4aae:	2301      	movs	r3, #1
    4ab0:	4083      	lsls	r3, r0
    4ab2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4ab4:	2300      	movs	r3, #0
    4ab6:	e7f4      	b.n	4aa2 <extint_chan_enable_callback+0x6>
    4ab8:	40001800 	.word	0x40001800

00004abc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4abc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4abe:	2900      	cmp	r1, #0
    4ac0:	d001      	beq.n	4ac6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4ac2:	0018      	movs	r0, r3
    4ac4:	4770      	bx	lr
		return NULL;
    4ac6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4ac8:	281f      	cmp	r0, #31
    4aca:	d800      	bhi.n	4ace <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4acc:	4a02      	ldr	r2, [pc, #8]	; (4ad8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    4ace:	2301      	movs	r3, #1
    4ad0:	4083      	lsls	r3, r0
    4ad2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4ad4:	2300      	movs	r3, #0
    4ad6:	e7f4      	b.n	4ac2 <extint_chan_disable_callback+0x6>
    4ad8:	40001800 	.word	0x40001800

00004adc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4adc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4ade:	2200      	movs	r2, #0
    4ae0:	4b10      	ldr	r3, [pc, #64]	; (4b24 <EIC_Handler+0x48>)
    4ae2:	701a      	strb	r2, [r3, #0]
    4ae4:	2300      	movs	r3, #0
    4ae6:	4910      	ldr	r1, [pc, #64]	; (4b28 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4ae8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4aea:	4e10      	ldr	r6, [pc, #64]	; (4b2c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4aec:	4c0d      	ldr	r4, [pc, #52]	; (4b24 <EIC_Handler+0x48>)
    4aee:	e00a      	b.n	4b06 <EIC_Handler+0x2a>
		return eics[eic_index];
    4af0:	490d      	ldr	r1, [pc, #52]	; (4b28 <EIC_Handler+0x4c>)
    4af2:	e008      	b.n	4b06 <EIC_Handler+0x2a>
    4af4:	7823      	ldrb	r3, [r4, #0]
    4af6:	3301      	adds	r3, #1
    4af8:	b2db      	uxtb	r3, r3
    4afa:	7023      	strb	r3, [r4, #0]
    4afc:	2b0f      	cmp	r3, #15
    4afe:	d810      	bhi.n	4b22 <EIC_Handler+0x46>
		return NULL;
    4b00:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4b02:	2b1f      	cmp	r3, #31
    4b04:	d9f4      	bls.n	4af0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4b06:	0028      	movs	r0, r5
    4b08:	4018      	ands	r0, r3
    4b0a:	2201      	movs	r2, #1
    4b0c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4b0e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4b10:	4210      	tst	r0, r2
    4b12:	d0ef      	beq.n	4af4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4b14:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4b16:	009b      	lsls	r3, r3, #2
    4b18:	599b      	ldr	r3, [r3, r6]
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d0ea      	beq.n	4af4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4b1e:	4798      	blx	r3
    4b20:	e7e8      	b.n	4af4 <EIC_Handler+0x18>
			}
		}
	}
}
    4b22:	bd70      	pop	{r4, r5, r6, pc}
    4b24:	200006e4 	.word	0x200006e4
    4b28:	40001800 	.word	0x40001800
    4b2c:	200002f4 	.word	0x200002f4

00004b30 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b32:	46de      	mov	lr, fp
    4b34:	4657      	mov	r7, sl
    4b36:	464e      	mov	r6, r9
    4b38:	4645      	mov	r5, r8
    4b3a:	b5e0      	push	{r5, r6, r7, lr}
    4b3c:	b087      	sub	sp, #28
    4b3e:	4680      	mov	r8, r0
    4b40:	9104      	str	r1, [sp, #16]
    4b42:	0016      	movs	r6, r2
    4b44:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4b46:	2200      	movs	r2, #0
    4b48:	2300      	movs	r3, #0
    4b4a:	2100      	movs	r1, #0
    4b4c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4b4e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4b50:	2001      	movs	r0, #1
    4b52:	0021      	movs	r1, r4
    4b54:	9600      	str	r6, [sp, #0]
    4b56:	9701      	str	r7, [sp, #4]
    4b58:	465c      	mov	r4, fp
    4b5a:	9403      	str	r4, [sp, #12]
    4b5c:	4644      	mov	r4, r8
    4b5e:	9405      	str	r4, [sp, #20]
    4b60:	e013      	b.n	4b8a <long_division+0x5a>
    4b62:	2420      	movs	r4, #32
    4b64:	1a64      	subs	r4, r4, r1
    4b66:	0005      	movs	r5, r0
    4b68:	40e5      	lsrs	r5, r4
    4b6a:	46a8      	mov	r8, r5
    4b6c:	e014      	b.n	4b98 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4b6e:	9c00      	ldr	r4, [sp, #0]
    4b70:	9d01      	ldr	r5, [sp, #4]
    4b72:	1b12      	subs	r2, r2, r4
    4b74:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4b76:	465c      	mov	r4, fp
    4b78:	464d      	mov	r5, r9
    4b7a:	432c      	orrs	r4, r5
    4b7c:	46a3      	mov	fp, r4
    4b7e:	9c03      	ldr	r4, [sp, #12]
    4b80:	4645      	mov	r5, r8
    4b82:	432c      	orrs	r4, r5
    4b84:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4b86:	3901      	subs	r1, #1
    4b88:	d325      	bcc.n	4bd6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4b8a:	2420      	movs	r4, #32
    4b8c:	4264      	negs	r4, r4
    4b8e:	190c      	adds	r4, r1, r4
    4b90:	d4e7      	bmi.n	4b62 <long_division+0x32>
    4b92:	0005      	movs	r5, r0
    4b94:	40a5      	lsls	r5, r4
    4b96:	46a8      	mov	r8, r5
    4b98:	0004      	movs	r4, r0
    4b9a:	408c      	lsls	r4, r1
    4b9c:	46a1      	mov	r9, r4
		r = r << 1;
    4b9e:	1892      	adds	r2, r2, r2
    4ba0:	415b      	adcs	r3, r3
    4ba2:	0014      	movs	r4, r2
    4ba4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4ba6:	9e05      	ldr	r6, [sp, #20]
    4ba8:	464f      	mov	r7, r9
    4baa:	403e      	ands	r6, r7
    4bac:	46b4      	mov	ip, r6
    4bae:	9e04      	ldr	r6, [sp, #16]
    4bb0:	4647      	mov	r7, r8
    4bb2:	403e      	ands	r6, r7
    4bb4:	46b2      	mov	sl, r6
    4bb6:	4666      	mov	r6, ip
    4bb8:	4657      	mov	r7, sl
    4bba:	433e      	orrs	r6, r7
    4bbc:	d003      	beq.n	4bc6 <long_division+0x96>
			r |= 0x01;
    4bbe:	0006      	movs	r6, r0
    4bc0:	4326      	orrs	r6, r4
    4bc2:	0032      	movs	r2, r6
    4bc4:	002b      	movs	r3, r5
		if (r >= d) {
    4bc6:	9c00      	ldr	r4, [sp, #0]
    4bc8:	9d01      	ldr	r5, [sp, #4]
    4bca:	429d      	cmp	r5, r3
    4bcc:	d8db      	bhi.n	4b86 <long_division+0x56>
    4bce:	d1ce      	bne.n	4b6e <long_division+0x3e>
    4bd0:	4294      	cmp	r4, r2
    4bd2:	d8d8      	bhi.n	4b86 <long_division+0x56>
    4bd4:	e7cb      	b.n	4b6e <long_division+0x3e>
    4bd6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4bd8:	4658      	mov	r0, fp
    4bda:	0019      	movs	r1, r3
    4bdc:	b007      	add	sp, #28
    4bde:	bc3c      	pop	{r2, r3, r4, r5}
    4be0:	4690      	mov	r8, r2
    4be2:	4699      	mov	r9, r3
    4be4:	46a2      	mov	sl, r4
    4be6:	46ab      	mov	fp, r5
    4be8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004bea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4bea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4bec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4bee:	2340      	movs	r3, #64	; 0x40
    4bf0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4bf2:	4281      	cmp	r1, r0
    4bf4:	d202      	bcs.n	4bfc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4bf6:	0018      	movs	r0, r3
    4bf8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4bfa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4bfc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4bfe:	1c63      	adds	r3, r4, #1
    4c00:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4c02:	4288      	cmp	r0, r1
    4c04:	d9f9      	bls.n	4bfa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4c06:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4c08:	2cff      	cmp	r4, #255	; 0xff
    4c0a:	d8f4      	bhi.n	4bf6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4c0c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4c0e:	2300      	movs	r3, #0
    4c10:	e7f1      	b.n	4bf6 <_sercom_get_sync_baud_val+0xc>
	...

00004c14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c16:	b083      	sub	sp, #12
    4c18:	000f      	movs	r7, r1
    4c1a:	0016      	movs	r6, r2
    4c1c:	aa08      	add	r2, sp, #32
    4c1e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4c20:	0004      	movs	r4, r0
    4c22:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4c24:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4c26:	42bc      	cmp	r4, r7
    4c28:	d902      	bls.n	4c30 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4c2a:	0010      	movs	r0, r2
    4c2c:	b003      	add	sp, #12
    4c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4c30:	2b00      	cmp	r3, #0
    4c32:	d114      	bne.n	4c5e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4c34:	0002      	movs	r2, r0
    4c36:	0008      	movs	r0, r1
    4c38:	2100      	movs	r1, #0
    4c3a:	4c19      	ldr	r4, [pc, #100]	; (4ca0 <_sercom_get_async_baud_val+0x8c>)
    4c3c:	47a0      	blx	r4
    4c3e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4c40:	003a      	movs	r2, r7
    4c42:	2300      	movs	r3, #0
    4c44:	2000      	movs	r0, #0
    4c46:	4c17      	ldr	r4, [pc, #92]	; (4ca4 <_sercom_get_async_baud_val+0x90>)
    4c48:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4c4a:	2200      	movs	r2, #0
    4c4c:	2301      	movs	r3, #1
    4c4e:	1a12      	subs	r2, r2, r0
    4c50:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4c52:	0c12      	lsrs	r2, r2, #16
    4c54:	041b      	lsls	r3, r3, #16
    4c56:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4c58:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4c5a:	2200      	movs	r2, #0
    4c5c:	e7e5      	b.n	4c2a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4c5e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4c60:	2b01      	cmp	r3, #1
    4c62:	d1f9      	bne.n	4c58 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4c64:	000a      	movs	r2, r1
    4c66:	2300      	movs	r3, #0
    4c68:	2100      	movs	r1, #0
    4c6a:	4c0d      	ldr	r4, [pc, #52]	; (4ca0 <_sercom_get_async_baud_val+0x8c>)
    4c6c:	47a0      	blx	r4
    4c6e:	0002      	movs	r2, r0
    4c70:	000b      	movs	r3, r1
    4c72:	9200      	str	r2, [sp, #0]
    4c74:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4c76:	0038      	movs	r0, r7
    4c78:	2100      	movs	r1, #0
    4c7a:	4c0a      	ldr	r4, [pc, #40]	; (4ca4 <_sercom_get_async_baud_val+0x90>)
    4c7c:	47a0      	blx	r4
    4c7e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4c80:	2380      	movs	r3, #128	; 0x80
    4c82:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4c84:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4c86:	4298      	cmp	r0, r3
    4c88:	d8cf      	bhi.n	4c2a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4c8a:	0f79      	lsrs	r1, r7, #29
    4c8c:	00f8      	lsls	r0, r7, #3
    4c8e:	9a00      	ldr	r2, [sp, #0]
    4c90:	9b01      	ldr	r3, [sp, #4]
    4c92:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4c94:	00ea      	lsls	r2, r5, #3
    4c96:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4c98:	b2d2      	uxtb	r2, r2
    4c9a:	0352      	lsls	r2, r2, #13
    4c9c:	432a      	orrs	r2, r5
    4c9e:	e7db      	b.n	4c58 <_sercom_get_async_baud_val+0x44>
    4ca0:	000069ad 	.word	0x000069ad
    4ca4:	00004b31 	.word	0x00004b31

00004ca8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4ca8:	b510      	push	{r4, lr}
    4caa:	b082      	sub	sp, #8
    4cac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4cae:	4b0e      	ldr	r3, [pc, #56]	; (4ce8 <sercom_set_gclk_generator+0x40>)
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d007      	beq.n	4cc6 <sercom_set_gclk_generator+0x1e>
    4cb6:	2900      	cmp	r1, #0
    4cb8:	d105      	bne.n	4cc6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4cba:	4b0b      	ldr	r3, [pc, #44]	; (4ce8 <sercom_set_gclk_generator+0x40>)
    4cbc:	785b      	ldrb	r3, [r3, #1]
    4cbe:	4283      	cmp	r3, r0
    4cc0:	d010      	beq.n	4ce4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4cc2:	201d      	movs	r0, #29
    4cc4:	e00c      	b.n	4ce0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4cc6:	a901      	add	r1, sp, #4
    4cc8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4cca:	2013      	movs	r0, #19
    4ccc:	4b07      	ldr	r3, [pc, #28]	; (4cec <sercom_set_gclk_generator+0x44>)
    4cce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4cd0:	2013      	movs	r0, #19
    4cd2:	4b07      	ldr	r3, [pc, #28]	; (4cf0 <sercom_set_gclk_generator+0x48>)
    4cd4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4cd6:	4b04      	ldr	r3, [pc, #16]	; (4ce8 <sercom_set_gclk_generator+0x40>)
    4cd8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4cda:	2201      	movs	r2, #1
    4cdc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4cde:	2000      	movs	r0, #0
}
    4ce0:	b002      	add	sp, #8
    4ce2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4ce4:	2000      	movs	r0, #0
    4ce6:	e7fb      	b.n	4ce0 <sercom_set_gclk_generator+0x38>
    4ce8:	200002b0 	.word	0x200002b0
    4cec:	0000638d 	.word	0x0000638d
    4cf0:	00006301 	.word	0x00006301

00004cf4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4cf4:	4b40      	ldr	r3, [pc, #256]	; (4df8 <_sercom_get_default_pad+0x104>)
    4cf6:	4298      	cmp	r0, r3
    4cf8:	d031      	beq.n	4d5e <_sercom_get_default_pad+0x6a>
    4cfa:	d90a      	bls.n	4d12 <_sercom_get_default_pad+0x1e>
    4cfc:	4b3f      	ldr	r3, [pc, #252]	; (4dfc <_sercom_get_default_pad+0x108>)
    4cfe:	4298      	cmp	r0, r3
    4d00:	d04d      	beq.n	4d9e <_sercom_get_default_pad+0xaa>
    4d02:	4b3f      	ldr	r3, [pc, #252]	; (4e00 <_sercom_get_default_pad+0x10c>)
    4d04:	4298      	cmp	r0, r3
    4d06:	d05a      	beq.n	4dbe <_sercom_get_default_pad+0xca>
    4d08:	4b3e      	ldr	r3, [pc, #248]	; (4e04 <_sercom_get_default_pad+0x110>)
    4d0a:	4298      	cmp	r0, r3
    4d0c:	d037      	beq.n	4d7e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4d0e:	2000      	movs	r0, #0
}
    4d10:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4d12:	4b3d      	ldr	r3, [pc, #244]	; (4e08 <_sercom_get_default_pad+0x114>)
    4d14:	4298      	cmp	r0, r3
    4d16:	d00c      	beq.n	4d32 <_sercom_get_default_pad+0x3e>
    4d18:	4b3c      	ldr	r3, [pc, #240]	; (4e0c <_sercom_get_default_pad+0x118>)
    4d1a:	4298      	cmp	r0, r3
    4d1c:	d1f7      	bne.n	4d0e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4d1e:	2901      	cmp	r1, #1
    4d20:	d017      	beq.n	4d52 <_sercom_get_default_pad+0x5e>
    4d22:	2900      	cmp	r1, #0
    4d24:	d05d      	beq.n	4de2 <_sercom_get_default_pad+0xee>
    4d26:	2902      	cmp	r1, #2
    4d28:	d015      	beq.n	4d56 <_sercom_get_default_pad+0x62>
    4d2a:	2903      	cmp	r1, #3
    4d2c:	d015      	beq.n	4d5a <_sercom_get_default_pad+0x66>
	return 0;
    4d2e:	2000      	movs	r0, #0
    4d30:	e7ee      	b.n	4d10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4d32:	2901      	cmp	r1, #1
    4d34:	d007      	beq.n	4d46 <_sercom_get_default_pad+0x52>
    4d36:	2900      	cmp	r1, #0
    4d38:	d051      	beq.n	4dde <_sercom_get_default_pad+0xea>
    4d3a:	2902      	cmp	r1, #2
    4d3c:	d005      	beq.n	4d4a <_sercom_get_default_pad+0x56>
    4d3e:	2903      	cmp	r1, #3
    4d40:	d005      	beq.n	4d4e <_sercom_get_default_pad+0x5a>
	return 0;
    4d42:	2000      	movs	r0, #0
    4d44:	e7e4      	b.n	4d10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4d46:	4832      	ldr	r0, [pc, #200]	; (4e10 <_sercom_get_default_pad+0x11c>)
    4d48:	e7e2      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d4a:	4832      	ldr	r0, [pc, #200]	; (4e14 <_sercom_get_default_pad+0x120>)
    4d4c:	e7e0      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d4e:	4832      	ldr	r0, [pc, #200]	; (4e18 <_sercom_get_default_pad+0x124>)
    4d50:	e7de      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d52:	4832      	ldr	r0, [pc, #200]	; (4e1c <_sercom_get_default_pad+0x128>)
    4d54:	e7dc      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d56:	4832      	ldr	r0, [pc, #200]	; (4e20 <_sercom_get_default_pad+0x12c>)
    4d58:	e7da      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d5a:	4832      	ldr	r0, [pc, #200]	; (4e24 <_sercom_get_default_pad+0x130>)
    4d5c:	e7d8      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d5e:	2901      	cmp	r1, #1
    4d60:	d007      	beq.n	4d72 <_sercom_get_default_pad+0x7e>
    4d62:	2900      	cmp	r1, #0
    4d64:	d03f      	beq.n	4de6 <_sercom_get_default_pad+0xf2>
    4d66:	2902      	cmp	r1, #2
    4d68:	d005      	beq.n	4d76 <_sercom_get_default_pad+0x82>
    4d6a:	2903      	cmp	r1, #3
    4d6c:	d005      	beq.n	4d7a <_sercom_get_default_pad+0x86>
	return 0;
    4d6e:	2000      	movs	r0, #0
    4d70:	e7ce      	b.n	4d10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4d72:	482d      	ldr	r0, [pc, #180]	; (4e28 <_sercom_get_default_pad+0x134>)
    4d74:	e7cc      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d76:	482d      	ldr	r0, [pc, #180]	; (4e2c <_sercom_get_default_pad+0x138>)
    4d78:	e7ca      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d7a:	482d      	ldr	r0, [pc, #180]	; (4e30 <_sercom_get_default_pad+0x13c>)
    4d7c:	e7c8      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d7e:	2901      	cmp	r1, #1
    4d80:	d007      	beq.n	4d92 <_sercom_get_default_pad+0x9e>
    4d82:	2900      	cmp	r1, #0
    4d84:	d031      	beq.n	4dea <_sercom_get_default_pad+0xf6>
    4d86:	2902      	cmp	r1, #2
    4d88:	d005      	beq.n	4d96 <_sercom_get_default_pad+0xa2>
    4d8a:	2903      	cmp	r1, #3
    4d8c:	d005      	beq.n	4d9a <_sercom_get_default_pad+0xa6>
	return 0;
    4d8e:	2000      	movs	r0, #0
    4d90:	e7be      	b.n	4d10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4d92:	4828      	ldr	r0, [pc, #160]	; (4e34 <_sercom_get_default_pad+0x140>)
    4d94:	e7bc      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d96:	4828      	ldr	r0, [pc, #160]	; (4e38 <_sercom_get_default_pad+0x144>)
    4d98:	e7ba      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d9a:	4828      	ldr	r0, [pc, #160]	; (4e3c <_sercom_get_default_pad+0x148>)
    4d9c:	e7b8      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4d9e:	2901      	cmp	r1, #1
    4da0:	d007      	beq.n	4db2 <_sercom_get_default_pad+0xbe>
    4da2:	2900      	cmp	r1, #0
    4da4:	d023      	beq.n	4dee <_sercom_get_default_pad+0xfa>
    4da6:	2902      	cmp	r1, #2
    4da8:	d005      	beq.n	4db6 <_sercom_get_default_pad+0xc2>
    4daa:	2903      	cmp	r1, #3
    4dac:	d005      	beq.n	4dba <_sercom_get_default_pad+0xc6>
	return 0;
    4dae:	2000      	movs	r0, #0
    4db0:	e7ae      	b.n	4d10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4db2:	4823      	ldr	r0, [pc, #140]	; (4e40 <_sercom_get_default_pad+0x14c>)
    4db4:	e7ac      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4db6:	4823      	ldr	r0, [pc, #140]	; (4e44 <_sercom_get_default_pad+0x150>)
    4db8:	e7aa      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dba:	4823      	ldr	r0, [pc, #140]	; (4e48 <_sercom_get_default_pad+0x154>)
    4dbc:	e7a8      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dbe:	2901      	cmp	r1, #1
    4dc0:	d007      	beq.n	4dd2 <_sercom_get_default_pad+0xde>
    4dc2:	2900      	cmp	r1, #0
    4dc4:	d015      	beq.n	4df2 <_sercom_get_default_pad+0xfe>
    4dc6:	2902      	cmp	r1, #2
    4dc8:	d005      	beq.n	4dd6 <_sercom_get_default_pad+0xe2>
    4dca:	2903      	cmp	r1, #3
    4dcc:	d005      	beq.n	4dda <_sercom_get_default_pad+0xe6>
	return 0;
    4dce:	2000      	movs	r0, #0
    4dd0:	e79e      	b.n	4d10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4dd2:	481e      	ldr	r0, [pc, #120]	; (4e4c <_sercom_get_default_pad+0x158>)
    4dd4:	e79c      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dd6:	481e      	ldr	r0, [pc, #120]	; (4e50 <_sercom_get_default_pad+0x15c>)
    4dd8:	e79a      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dda:	481e      	ldr	r0, [pc, #120]	; (4e54 <_sercom_get_default_pad+0x160>)
    4ddc:	e798      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dde:	481e      	ldr	r0, [pc, #120]	; (4e58 <_sercom_get_default_pad+0x164>)
    4de0:	e796      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4de2:	2003      	movs	r0, #3
    4de4:	e794      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4de6:	481d      	ldr	r0, [pc, #116]	; (4e5c <_sercom_get_default_pad+0x168>)
    4de8:	e792      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dea:	481d      	ldr	r0, [pc, #116]	; (4e60 <_sercom_get_default_pad+0x16c>)
    4dec:	e790      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4dee:	481d      	ldr	r0, [pc, #116]	; (4e64 <_sercom_get_default_pad+0x170>)
    4df0:	e78e      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4df2:	481d      	ldr	r0, [pc, #116]	; (4e68 <_sercom_get_default_pad+0x174>)
    4df4:	e78c      	b.n	4d10 <_sercom_get_default_pad+0x1c>
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	42001000 	.word	0x42001000
    4dfc:	42001800 	.word	0x42001800
    4e00:	42001c00 	.word	0x42001c00
    4e04:	42001400 	.word	0x42001400
    4e08:	42000800 	.word	0x42000800
    4e0c:	42000c00 	.word	0x42000c00
    4e10:	00050003 	.word	0x00050003
    4e14:	00060003 	.word	0x00060003
    4e18:	00070003 	.word	0x00070003
    4e1c:	00010003 	.word	0x00010003
    4e20:	001e0003 	.word	0x001e0003
    4e24:	001f0003 	.word	0x001f0003
    4e28:	00090003 	.word	0x00090003
    4e2c:	000a0003 	.word	0x000a0003
    4e30:	000b0003 	.word	0x000b0003
    4e34:	00110003 	.word	0x00110003
    4e38:	00120003 	.word	0x00120003
    4e3c:	00130003 	.word	0x00130003
    4e40:	000d0003 	.word	0x000d0003
    4e44:	000e0003 	.word	0x000e0003
    4e48:	000f0003 	.word	0x000f0003
    4e4c:	00170003 	.word	0x00170003
    4e50:	00180003 	.word	0x00180003
    4e54:	00190003 	.word	0x00190003
    4e58:	00040003 	.word	0x00040003
    4e5c:	00080003 	.word	0x00080003
    4e60:	00100003 	.word	0x00100003
    4e64:	000c0003 	.word	0x000c0003
    4e68:	00160003 	.word	0x00160003

00004e6c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4e6c:	b530      	push	{r4, r5, lr}
    4e6e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4e70:	4b0b      	ldr	r3, [pc, #44]	; (4ea0 <_sercom_get_sercom_inst_index+0x34>)
    4e72:	466a      	mov	r2, sp
    4e74:	cb32      	ldmia	r3!, {r1, r4, r5}
    4e76:	c232      	stmia	r2!, {r1, r4, r5}
    4e78:	cb32      	ldmia	r3!, {r1, r4, r5}
    4e7a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4e7c:	9b00      	ldr	r3, [sp, #0]
    4e7e:	4283      	cmp	r3, r0
    4e80:	d00b      	beq.n	4e9a <_sercom_get_sercom_inst_index+0x2e>
    4e82:	2301      	movs	r3, #1
    4e84:	009a      	lsls	r2, r3, #2
    4e86:	4669      	mov	r1, sp
    4e88:	5852      	ldr	r2, [r2, r1]
    4e8a:	4282      	cmp	r2, r0
    4e8c:	d006      	beq.n	4e9c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4e8e:	3301      	adds	r3, #1
    4e90:	2b06      	cmp	r3, #6
    4e92:	d1f7      	bne.n	4e84 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4e94:	2000      	movs	r0, #0
}
    4e96:	b007      	add	sp, #28
    4e98:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4e9a:	2300      	movs	r3, #0
			return i;
    4e9c:	b2d8      	uxtb	r0, r3
    4e9e:	e7fa      	b.n	4e96 <_sercom_get_sercom_inst_index+0x2a>
    4ea0:	00007664 	.word	0x00007664

00004ea4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4ea4:	b570      	push	{r4, r5, r6, lr}
    4ea6:	b082      	sub	sp, #8
    4ea8:	0006      	movs	r6, r0
    4eaa:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4eac:	2200      	movs	r2, #0
    4eae:	466b      	mov	r3, sp
    4eb0:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4eb2:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    4eb4:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d1fc      	bne.n	4eb4 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4eba:	338f      	adds	r3, #143	; 0x8f
    4ebc:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4ebe:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4ec0:	6823      	ldr	r3, [r4, #0]
    4ec2:	2202      	movs	r2, #2
    4ec4:	4393      	bics	r3, r2
    4ec6:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ec8:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4eca:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d1fc      	bne.n	4eca <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4ed0:	4b12      	ldr	r3, [pc, #72]	; (4f1c <spi_set_baudrate+0x78>)
    4ed2:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4ed4:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4ed6:	b2c0      	uxtb	r0, r0
    4ed8:	4b11      	ldr	r3, [pc, #68]	; (4f20 <spi_set_baudrate+0x7c>)
    4eda:	4798      	blx	r3
    4edc:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4ede:	466b      	mov	r3, sp
    4ee0:	1d9a      	adds	r2, r3, #6
    4ee2:	0028      	movs	r0, r5
    4ee4:	4b0f      	ldr	r3, [pc, #60]	; (4f24 <spi_set_baudrate+0x80>)
    4ee6:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4ee8:	2800      	cmp	r0, #0
    4eea:	d002      	beq.n	4ef2 <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4eec:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4eee:	b002      	add	sp, #8
    4ef0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4ef2:	466b      	mov	r3, sp
    4ef4:	3306      	adds	r3, #6
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4efa:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4efc:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4efe:	2a00      	cmp	r2, #0
    4f00:	d1fc      	bne.n	4efc <spi_set_baudrate+0x58>
    4f02:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4f04:	2a00      	cmp	r2, #0
    4f06:	d1fc      	bne.n	4f02 <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4f08:	681a      	ldr	r2, [r3, #0]
    4f0a:	2102      	movs	r1, #2
    4f0c:	430a      	orrs	r2, r1
    4f0e:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f10:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4f12:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4f14:	2b00      	cmp	r3, #0
    4f16:	d1fc      	bne.n	4f12 <spi_set_baudrate+0x6e>
    4f18:	e7e9      	b.n	4eee <spi_set_baudrate+0x4a>
    4f1a:	46c0      	nop			; (mov r8, r8)
    4f1c:	00004e6d 	.word	0x00004e6d
    4f20:	000063a9 	.word	0x000063a9
    4f24:	00004beb 	.word	0x00004beb

00004f28 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2a:	46d6      	mov	lr, sl
    4f2c:	464f      	mov	r7, r9
    4f2e:	b580      	push	{r7, lr}
    4f30:	b08b      	sub	sp, #44	; 0x2c
    4f32:	4681      	mov	r9, r0
    4f34:	000f      	movs	r7, r1
    4f36:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4f38:	0003      	movs	r3, r0
    4f3a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4f3c:	680b      	ldr	r3, [r1, #0]
    4f3e:	079b      	lsls	r3, r3, #30
    4f40:	d409      	bmi.n	4f56 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4f42:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4f44:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4f46:	07db      	lsls	r3, r3, #31
    4f48:	d400      	bmi.n	4f4c <spi_init+0x24>
    4f4a:	e0b1      	b.n	50b0 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4f4c:	b00b      	add	sp, #44	; 0x2c
    4f4e:	bc0c      	pop	{r2, r3}
    4f50:	4691      	mov	r9, r2
    4f52:	469a      	mov	sl, r3
    4f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    4f56:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4f58:	9305      	str	r3, [sp, #20]
    4f5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4f5c:	9306      	str	r3, [sp, #24]
    4f5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4f60:	9307      	str	r3, [sp, #28]
    4f62:	6b53      	ldr	r3, [r2, #52]	; 0x34
    4f64:	9308      	str	r3, [sp, #32]
    4f66:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4f68:	ab05      	add	r3, sp, #20
    4f6a:	9301      	str	r3, [sp, #4]
    4f6c:	e00a      	b.n	4f84 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4f6e:	0038      	movs	r0, r7
    4f70:	4baf      	ldr	r3, [pc, #700]	; (5230 <spi_init+0x308>)
    4f72:	4798      	blx	r3
    4f74:	e00c      	b.n	4f90 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    4f76:	230f      	movs	r3, #15
    4f78:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    4f7a:	4281      	cmp	r1, r0
    4f7c:	d12d      	bne.n	4fda <spi_init+0xb2>
    4f7e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f80:	2e04      	cmp	r6, #4
    4f82:	d02f      	beq.n	4fe4 <spi_init+0xbc>
    4f84:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4f86:	00b3      	lsls	r3, r6, #2
    4f88:	9a01      	ldr	r2, [sp, #4]
    4f8a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    4f8c:	2800      	cmp	r0, #0
    4f8e:	d0ee      	beq.n	4f6e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    4f90:	1c43      	adds	r3, r0, #1
    4f92:	d0f4      	beq.n	4f7e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    4f94:	0401      	lsls	r1, r0, #16
    4f96:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4f98:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    4f9a:	b2c3      	uxtb	r3, r0
    4f9c:	469c      	mov	ip, r3
		return NULL;
    4f9e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4fa0:	0602      	lsls	r2, r0, #24
    4fa2:	d405      	bmi.n	4fb0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    4fa4:	4663      	mov	r3, ip
    4fa6:	095b      	lsrs	r3, r3, #5
    4fa8:	01db      	lsls	r3, r3, #7
    4faa:	4aa2      	ldr	r2, [pc, #648]	; (5234 <spi_init+0x30c>)
    4fac:	4692      	mov	sl, r2
    4fae:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    4fb0:	221f      	movs	r2, #31
    4fb2:	4660      	mov	r0, ip
    4fb4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    4fb6:	1898      	adds	r0, r3, r2
    4fb8:	3040      	adds	r0, #64	; 0x40
    4fba:	7800      	ldrb	r0, [r0, #0]
    4fbc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    4fbe:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    4fc0:	4655      	mov	r5, sl
    4fc2:	07ed      	lsls	r5, r5, #31
    4fc4:	d5d9      	bpl.n	4f7a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    4fc6:	0852      	lsrs	r2, r2, #1
    4fc8:	189b      	adds	r3, r3, r2
    4fca:	3330      	adds	r3, #48	; 0x30
    4fcc:	7818      	ldrb	r0, [r3, #0]
    4fce:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    4fd0:	4663      	mov	r3, ip
    4fd2:	07db      	lsls	r3, r3, #31
    4fd4:	d5cf      	bpl.n	4f76 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    4fd6:	0900      	lsrs	r0, r0, #4
    4fd8:	e7cf      	b.n	4f7a <spi_init+0x52>
			module->hw = NULL;
    4fda:	2300      	movs	r3, #0
    4fdc:	464a      	mov	r2, r9
    4fde:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    4fe0:	201c      	movs	r0, #28
    4fe2:	e7b3      	b.n	4f4c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    4fe4:	2013      	movs	r0, #19
    4fe6:	4b94      	ldr	r3, [pc, #592]	; (5238 <spi_init+0x310>)
    4fe8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4fea:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    4fec:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    4fee:	2a01      	cmp	r2, #1
    4ff0:	d016      	beq.n	5020 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    4ff2:	7821      	ldrb	r1, [r4, #0]
    4ff4:	2900      	cmp	r1, #0
    4ff6:	d127      	bne.n	5048 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    4ff8:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4ffa:	7fe2      	ldrb	r2, [r4, #31]
    4ffc:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4ffe:	7fa0      	ldrb	r0, [r4, #30]
    5000:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5002:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5004:	429a      	cmp	r2, r3
    5006:	d1a1      	bne.n	4f4c <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5008:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    500a:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    500c:	3004      	adds	r0, #4
    500e:	5c20      	ldrb	r0, [r4, r0]
    5010:	2800      	cmp	r0, #0
    5012:	d001      	beq.n	5018 <spi_init+0xf0>
    5014:	2040      	movs	r0, #64	; 0x40
    5016:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5018:	2008      	movs	r0, #8
    501a:	4303      	orrs	r3, r0
    501c:	431d      	orrs	r5, r3
    501e:	e014      	b.n	504a <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5020:	aa04      	add	r2, sp, #16
    5022:	0001      	movs	r1, r0
    5024:	69a0      	ldr	r0, [r4, #24]
    5026:	4b85      	ldr	r3, [pc, #532]	; (523c <spi_init+0x314>)
    5028:	4798      	blx	r3
    502a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    502c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    502e:	2b00      	cmp	r3, #0
    5030:	d000      	beq.n	5034 <spi_init+0x10c>
    5032:	e78b      	b.n	4f4c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5034:	7b3b      	ldrb	r3, [r7, #12]
    5036:	b2db      	uxtb	r3, r3
    5038:	aa04      	add	r2, sp, #16
    503a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    503c:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    503e:	429a      	cmp	r2, r3
    5040:	d000      	beq.n	5044 <spi_init+0x11c>
    5042:	e783      	b.n	4f4c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5044:	350c      	adds	r5, #12
    5046:	e7d4      	b.n	4ff2 <spi_init+0xca>
	uint32_t ctrlb = 0;
    5048:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    504a:	6863      	ldr	r3, [r4, #4]
    504c:	68a0      	ldr	r0, [r4, #8]
    504e:	4303      	orrs	r3, r0
    5050:	68e0      	ldr	r0, [r4, #12]
    5052:	4303      	orrs	r3, r0
    5054:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5056:	7c20      	ldrb	r0, [r4, #16]
    5058:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    505a:	7c60      	ldrb	r0, [r4, #17]
    505c:	2800      	cmp	r0, #0
    505e:	d001      	beq.n	5064 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5060:	2080      	movs	r0, #128	; 0x80
    5062:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    5064:	7ca0      	ldrb	r0, [r4, #18]
    5066:	2800      	cmp	r0, #0
    5068:	d002      	beq.n	5070 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    506a:	2080      	movs	r0, #128	; 0x80
    506c:	0280      	lsls	r0, r0, #10
    506e:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5070:	7ce0      	ldrb	r0, [r4, #19]
    5072:	2800      	cmp	r0, #0
    5074:	d002      	beq.n	507c <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5076:	2080      	movs	r0, #128	; 0x80
    5078:	0080      	lsls	r0, r0, #2
    507a:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    507c:	7d20      	ldrb	r0, [r4, #20]
    507e:	2800      	cmp	r0, #0
    5080:	d002      	beq.n	5088 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5082:	2080      	movs	r0, #128	; 0x80
    5084:	0180      	lsls	r0, r0, #6
    5086:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5088:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    508a:	2502      	movs	r5, #2
    508c:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    508e:	4283      	cmp	r3, r0
    5090:	d004      	beq.n	509c <spi_init+0x174>
	module->hw = NULL;
    5092:	2300      	movs	r3, #0
    5094:	464a      	mov	r2, r9
    5096:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    5098:	201c      	movs	r0, #28
    509a:	e757      	b.n	4f4c <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    509c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    509e:	4293      	cmp	r3, r2
    50a0:	d1f7      	bne.n	5092 <spi_init+0x16a>
		module->mode           = config->mode;
    50a2:	464b      	mov	r3, r9
    50a4:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    50a6:	7c23      	ldrb	r3, [r4, #16]
    50a8:	464a      	mov	r2, r9
    50aa:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    50ac:	2000      	movs	r0, #0
    50ae:	e74d      	b.n	4f4c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    50b0:	0008      	movs	r0, r1
    50b2:	4b63      	ldr	r3, [pc, #396]	; (5240 <spi_init+0x318>)
    50b4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    50b6:	4a63      	ldr	r2, [pc, #396]	; (5244 <spi_init+0x31c>)
    50b8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    50ba:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    50bc:	2301      	movs	r3, #1
    50be:	40ab      	lsls	r3, r5
    50c0:	430b      	orrs	r3, r1
    50c2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    50c4:	a909      	add	r1, sp, #36	; 0x24
    50c6:	2624      	movs	r6, #36	; 0x24
    50c8:	5da3      	ldrb	r3, [r4, r6]
    50ca:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    50cc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    50ce:	b2c5      	uxtb	r5, r0
    50d0:	0028      	movs	r0, r5
    50d2:	4b5d      	ldr	r3, [pc, #372]	; (5248 <spi_init+0x320>)
    50d4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    50d6:	0028      	movs	r0, r5
    50d8:	4b5c      	ldr	r3, [pc, #368]	; (524c <spi_init+0x324>)
    50da:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    50dc:	5da0      	ldrb	r0, [r4, r6]
    50de:	2100      	movs	r1, #0
    50e0:	4b5b      	ldr	r3, [pc, #364]	; (5250 <spi_init+0x328>)
    50e2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    50e4:	7823      	ldrb	r3, [r4, #0]
    50e6:	2b01      	cmp	r3, #1
    50e8:	d020      	beq.n	512c <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    50ea:	7823      	ldrb	r3, [r4, #0]
    50ec:	2b00      	cmp	r3, #0
    50ee:	d103      	bne.n	50f8 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    50f0:	683b      	ldr	r3, [r7, #0]
    50f2:	2208      	movs	r2, #8
    50f4:	4313      	orrs	r3, r2
    50f6:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    50f8:	464b      	mov	r3, r9
    50fa:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    50fc:	ab04      	add	r3, sp, #16
    50fe:	2280      	movs	r2, #128	; 0x80
    5100:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5102:	2200      	movs	r2, #0
    5104:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5106:	2101      	movs	r1, #1
    5108:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    510a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    510c:	7823      	ldrb	r3, [r4, #0]
    510e:	2b00      	cmp	r3, #0
    5110:	d101      	bne.n	5116 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5112:	ab04      	add	r3, sp, #16
    5114:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5118:	9305      	str	r3, [sp, #20]
    511a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    511c:	9306      	str	r3, [sp, #24]
    511e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5120:	9307      	str	r3, [sp, #28]
    5122:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5124:	9308      	str	r3, [sp, #32]
    5126:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5128:	ad05      	add	r5, sp, #20
    512a:	e011      	b.n	5150 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    512c:	683b      	ldr	r3, [r7, #0]
    512e:	220c      	movs	r2, #12
    5130:	4313      	orrs	r3, r2
    5132:	603b      	str	r3, [r7, #0]
    5134:	e7d9      	b.n	50ea <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5136:	0030      	movs	r0, r6
    5138:	4b3d      	ldr	r3, [pc, #244]	; (5230 <spi_init+0x308>)
    513a:	4798      	blx	r3
    513c:	e00d      	b.n	515a <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    513e:	a904      	add	r1, sp, #16
    5140:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5142:	0c00      	lsrs	r0, r0, #16
    5144:	b2c0      	uxtb	r0, r0
    5146:	4b43      	ldr	r3, [pc, #268]	; (5254 <spi_init+0x32c>)
    5148:	4798      	blx	r3
    514a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    514c:	2f04      	cmp	r7, #4
    514e:	d007      	beq.n	5160 <spi_init+0x238>
    5150:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5152:	00bb      	lsls	r3, r7, #2
    5154:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5156:	2800      	cmp	r0, #0
    5158:	d0ed      	beq.n	5136 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    515a:	1c43      	adds	r3, r0, #1
    515c:	d1ef      	bne.n	513e <spi_init+0x216>
    515e:	e7f4      	b.n	514a <spi_init+0x222>
	module->mode             = config->mode;
    5160:	7823      	ldrb	r3, [r4, #0]
    5162:	464a      	mov	r2, r9
    5164:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    5166:	7c23      	ldrb	r3, [r4, #16]
    5168:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    516a:	7ca3      	ldrb	r3, [r4, #18]
    516c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    516e:	7d23      	ldrb	r3, [r4, #20]
    5170:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    5172:	2200      	movs	r2, #0
    5174:	ab02      	add	r3, sp, #8
    5176:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5178:	7823      	ldrb	r3, [r4, #0]
    517a:	2b01      	cmp	r3, #1
    517c:	d012      	beq.n	51a4 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    517e:	7823      	ldrb	r3, [r4, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d127      	bne.n	51d4 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    5184:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5186:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5188:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    518a:	7fe1      	ldrb	r1, [r4, #31]
    518c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    518e:	7fa5      	ldrb	r5, [r4, #30]
    5190:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5192:	4319      	orrs	r1, r3
    5194:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5196:	2320      	movs	r3, #32
    5198:	5ce3      	ldrb	r3, [r4, r3]
    519a:	2b00      	cmp	r3, #0
    519c:	d01c      	beq.n	51d8 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    519e:	2340      	movs	r3, #64	; 0x40
    51a0:	431a      	orrs	r2, r3
    51a2:	e019      	b.n	51d8 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    51a4:	464b      	mov	r3, r9
    51a6:	6818      	ldr	r0, [r3, #0]
    51a8:	4b25      	ldr	r3, [pc, #148]	; (5240 <spi_init+0x318>)
    51aa:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    51ac:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    51ae:	b2c0      	uxtb	r0, r0
    51b0:	4b21      	ldr	r3, [pc, #132]	; (5238 <spi_init+0x310>)
    51b2:	4798      	blx	r3
    51b4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    51b6:	ab02      	add	r3, sp, #8
    51b8:	1d9a      	adds	r2, r3, #6
    51ba:	69a0      	ldr	r0, [r4, #24]
    51bc:	4b1f      	ldr	r3, [pc, #124]	; (523c <spi_init+0x314>)
    51be:	4798      	blx	r3
    51c0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    51c2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    51c4:	2b00      	cmp	r3, #0
    51c6:	d000      	beq.n	51ca <spi_init+0x2a2>
    51c8:	e6c0      	b.n	4f4c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    51ca:	ab02      	add	r3, sp, #8
    51cc:	3306      	adds	r3, #6
    51ce:	781b      	ldrb	r3, [r3, #0]
    51d0:	7333      	strb	r3, [r6, #12]
    51d2:	e7d4      	b.n	517e <spi_init+0x256>
	uint32_t ctrlb = 0;
    51d4:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    51d6:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    51d8:	6863      	ldr	r3, [r4, #4]
    51da:	68a1      	ldr	r1, [r4, #8]
    51dc:	430b      	orrs	r3, r1
    51de:	68e1      	ldr	r1, [r4, #12]
    51e0:	430b      	orrs	r3, r1
    51e2:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    51e4:	7c21      	ldrb	r1, [r4, #16]
    51e6:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    51e8:	7c61      	ldrb	r1, [r4, #17]
    51ea:	2900      	cmp	r1, #0
    51ec:	d103      	bne.n	51f6 <spi_init+0x2ce>
    51ee:	491a      	ldr	r1, [pc, #104]	; (5258 <spi_init+0x330>)
    51f0:	7889      	ldrb	r1, [r1, #2]
    51f2:	0789      	lsls	r1, r1, #30
    51f4:	d501      	bpl.n	51fa <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    51f6:	2180      	movs	r1, #128	; 0x80
    51f8:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    51fa:	7ca1      	ldrb	r1, [r4, #18]
    51fc:	2900      	cmp	r1, #0
    51fe:	d002      	beq.n	5206 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5200:	2180      	movs	r1, #128	; 0x80
    5202:	0289      	lsls	r1, r1, #10
    5204:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5206:	7ce1      	ldrb	r1, [r4, #19]
    5208:	2900      	cmp	r1, #0
    520a:	d002      	beq.n	5212 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    520c:	2180      	movs	r1, #128	; 0x80
    520e:	0089      	lsls	r1, r1, #2
    5210:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5212:	7d21      	ldrb	r1, [r4, #20]
    5214:	2900      	cmp	r1, #0
    5216:	d002      	beq.n	521e <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5218:	2180      	movs	r1, #128	; 0x80
    521a:	0189      	lsls	r1, r1, #6
    521c:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    521e:	6831      	ldr	r1, [r6, #0]
    5220:	430b      	orrs	r3, r1
    5222:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5224:	6873      	ldr	r3, [r6, #4]
    5226:	431a      	orrs	r2, r3
    5228:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    522a:	2000      	movs	r0, #0
    522c:	e68e      	b.n	4f4c <spi_init+0x24>
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	00004cf5 	.word	0x00004cf5
    5234:	41004400 	.word	0x41004400
    5238:	000063a9 	.word	0x000063a9
    523c:	00004beb 	.word	0x00004beb
    5240:	00004e6d 	.word	0x00004e6d
    5244:	40000400 	.word	0x40000400
    5248:	0000638d 	.word	0x0000638d
    524c:	00006301 	.word	0x00006301
    5250:	00004ca9 	.word	0x00004ca9
    5254:	00006485 	.word	0x00006485
    5258:	41002000 	.word	0x41002000

0000525c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    525c:	b5f0      	push	{r4, r5, r6, r7, lr}
    525e:	46d6      	mov	lr, sl
    5260:	464f      	mov	r7, r9
    5262:	4646      	mov	r6, r8
    5264:	b5c0      	push	{r6, r7, lr}
    5266:	b082      	sub	sp, #8
    5268:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    526a:	2717      	movs	r7, #23
	if (length == 0) {
    526c:	2a00      	cmp	r2, #0
    526e:	d073      	beq.n	5358 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    5270:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    5272:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    5274:	2900      	cmp	r1, #0
    5276:	d06f      	beq.n	5358 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5278:	7941      	ldrb	r1, [r0, #5]
    527a:	2900      	cmp	r1, #0
    527c:	d103      	bne.n	5286 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    527e:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5280:	7e0c      	ldrb	r4, [r1, #24]
    5282:	07a4      	lsls	r4, r4, #30
    5284:	d40b      	bmi.n	529e <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    5286:	3a01      	subs	r2, #1
    5288:	b294      	uxth	r4, r2
    528a:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    528c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    528e:	2102      	movs	r1, #2
    5290:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    5292:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5294:	05db      	lsls	r3, r3, #23
    5296:	0ddb      	lsrs	r3, r3, #23
    5298:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    529a:	46c4      	mov	ip, r8
    529c:	e037      	b.n	530e <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    529e:	2402      	movs	r4, #2
    52a0:	760c      	strb	r4, [r1, #24]
    52a2:	e7f0      	b.n	5286 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    52a4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    52a6:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    52a8:	4233      	tst	r3, r6
    52aa:	d0fc      	beq.n	52a6 <spi_read_buffer_wait+0x4a>
    52ac:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    52ae:	4233      	tst	r3, r6
    52b0:	d009      	beq.n	52c6 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    52b2:	4653      	mov	r3, sl
    52b4:	628b      	str	r3, [r1, #40]	; 0x28
    52b6:	e02d      	b.n	5314 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    52b8:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    52ba:	4649      	mov	r1, r9
    52bc:	420b      	tst	r3, r1
    52be:	d138      	bne.n	5332 <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    52c0:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    52c2:	4213      	tst	r3, r2
    52c4:	d045      	beq.n	5352 <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    52c6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    52c8:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    52ca:	4213      	tst	r3, r2
    52cc:	d0fc      	beq.n	52c8 <spi_read_buffer_wait+0x6c>
    52ce:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    52d0:	4213      	tst	r3, r2
    52d2:	d040      	beq.n	5356 <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52d4:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    52d6:	2700      	movs	r7, #0
    52d8:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52da:	4213      	tst	r3, r2
    52dc:	d002      	beq.n	52e4 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    52de:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    52e0:	231e      	movs	r3, #30
    52e2:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52e4:	7983      	ldrb	r3, [r0, #6]
    52e6:	2b01      	cmp	r3, #1
    52e8:	d027      	beq.n	533a <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    52ea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    52ec:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    52ee:	9901      	ldr	r1, [sp, #4]
    52f0:	2900      	cmp	r1, #0
    52f2:	d138      	bne.n	5366 <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    52f4:	1c6f      	adds	r7, r5, #1
    52f6:	b2bf      	uxth	r7, r7
    52f8:	4661      	mov	r1, ip
    52fa:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52fc:	7981      	ldrb	r1, [r0, #6]
    52fe:	2901      	cmp	r1, #1
    5300:	d01f      	beq.n	5342 <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    5302:	003d      	movs	r5, r7
	while (length--) {
    5304:	3c01      	subs	r4, #1
    5306:	b2a4      	uxth	r4, r4
    5308:	4918      	ldr	r1, [pc, #96]	; (536c <spi_read_buffer_wait+0x110>)
    530a:	428c      	cmp	r4, r1
    530c:	d01f      	beq.n	534e <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    530e:	7943      	ldrb	r3, [r0, #5]
    5310:	2b01      	cmp	r3, #1
    5312:	d0c7      	beq.n	52a4 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    5314:	7943      	ldrb	r3, [r0, #5]
    5316:	2b00      	cmp	r3, #0
    5318:	d1d5      	bne.n	52c6 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    531a:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    531c:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    531e:	4213      	tst	r3, r2
    5320:	d1ca      	bne.n	52b8 <spi_read_buffer_wait+0x5c>
    5322:	4b13      	ldr	r3, [pc, #76]	; (5370 <spi_read_buffer_wait+0x114>)
    5324:	7e39      	ldrb	r1, [r7, #24]
    5326:	4211      	tst	r1, r2
    5328:	d1c6      	bne.n	52b8 <spi_read_buffer_wait+0x5c>
    532a:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    532c:	2b00      	cmp	r3, #0
    532e:	d1f9      	bne.n	5324 <spi_read_buffer_wait+0xc8>
    5330:	e7c2      	b.n	52b8 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5332:	2302      	movs	r3, #2
    5334:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    5336:	2704      	movs	r7, #4
    5338:	e00e      	b.n	5358 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    533a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    533c:	05c9      	lsls	r1, r1, #23
    533e:	0dcb      	lsrs	r3, r1, #23
    5340:	e7d5      	b.n	52ee <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    5342:	3502      	adds	r5, #2
    5344:	b2ad      	uxth	r5, r5
    5346:	0a19      	lsrs	r1, r3, #8
    5348:	4663      	mov	r3, ip
    534a:	55d9      	strb	r1, [r3, r7]
    534c:	e7da      	b.n	5304 <spi_read_buffer_wait+0xa8>
    534e:	9f01      	ldr	r7, [sp, #4]
    5350:	e002      	b.n	5358 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    5352:	2712      	movs	r7, #18
    5354:	e000      	b.n	5358 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    5356:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    5358:	0038      	movs	r0, r7
    535a:	b002      	add	sp, #8
    535c:	bc1c      	pop	{r2, r3, r4}
    535e:	4690      	mov	r8, r2
    5360:	4699      	mov	r9, r3
    5362:	46a2      	mov	sl, r4
    5364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5366:	9f01      	ldr	r7, [sp, #4]
    5368:	e7f6      	b.n	5358 <spi_read_buffer_wait+0xfc>
    536a:	46c0      	nop			; (mov r8, r8)
    536c:	0000ffff 	.word	0x0000ffff
    5370:	00002710 	.word	0x00002710

00005374 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5374:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5376:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5378:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    537a:	2c01      	cmp	r4, #1
    537c:	d001      	beq.n	5382 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    537e:	0018      	movs	r0, r3
    5380:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5382:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5384:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5386:	2c00      	cmp	r4, #0
    5388:	d1f9      	bne.n	537e <spi_select_slave+0xa>
		if (select) {
    538a:	2a00      	cmp	r2, #0
    538c:	d058      	beq.n	5440 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    538e:	784b      	ldrb	r3, [r1, #1]
    5390:	2b00      	cmp	r3, #0
    5392:	d044      	beq.n	541e <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5394:	6803      	ldr	r3, [r0, #0]
    5396:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5398:	07db      	lsls	r3, r3, #31
    539a:	d410      	bmi.n	53be <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    539c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    539e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    53a0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    53a2:	2900      	cmp	r1, #0
    53a4:	d104      	bne.n	53b0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    53a6:	0953      	lsrs	r3, r2, #5
    53a8:	01db      	lsls	r3, r3, #7
    53aa:	492e      	ldr	r1, [pc, #184]	; (5464 <spi_select_slave+0xf0>)
    53ac:	468c      	mov	ip, r1
    53ae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    53b0:	211f      	movs	r1, #31
    53b2:	4011      	ands	r1, r2
    53b4:	2201      	movs	r2, #1
    53b6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    53b8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    53ba:	2305      	movs	r3, #5
    53bc:	e7df      	b.n	537e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    53be:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    53c0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    53c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    53c4:	2c00      	cmp	r4, #0
    53c6:	d104      	bne.n	53d2 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    53c8:	0953      	lsrs	r3, r2, #5
    53ca:	01db      	lsls	r3, r3, #7
    53cc:	4c25      	ldr	r4, [pc, #148]	; (5464 <spi_select_slave+0xf0>)
    53ce:	46a4      	mov	ip, r4
    53d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    53d2:	241f      	movs	r4, #31
    53d4:	4014      	ands	r4, r2
    53d6:	2201      	movs	r2, #1
    53d8:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    53da:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    53dc:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    53de:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    53e0:	07d2      	lsls	r2, r2, #31
    53e2:	d501      	bpl.n	53e8 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    53e4:	788a      	ldrb	r2, [r1, #2]
    53e6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    53e8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    53ea:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    53ec:	2a00      	cmp	r2, #0
    53ee:	d1c6      	bne.n	537e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    53f0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    53f2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    53f4:	7e13      	ldrb	r3, [r2, #24]
    53f6:	420b      	tst	r3, r1
    53f8:	d0fc      	beq.n	53f4 <spi_select_slave+0x80>
    53fa:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    53fc:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    53fe:	0749      	lsls	r1, r1, #29
    5400:	d5bd      	bpl.n	537e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5402:	8b53      	ldrh	r3, [r2, #26]
    5404:	075b      	lsls	r3, r3, #29
    5406:	d501      	bpl.n	540c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5408:	2304      	movs	r3, #4
    540a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    540c:	7983      	ldrb	r3, [r0, #6]
    540e:	2b01      	cmp	r3, #1
    5410:	d002      	beq.n	5418 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5412:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5414:	2300      	movs	r3, #0
    5416:	e7b2      	b.n	537e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5418:	6a93      	ldr	r3, [r2, #40]	; 0x28
    541a:	2300      	movs	r3, #0
    541c:	e7af      	b.n	537e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    541e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5420:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5422:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5424:	2900      	cmp	r1, #0
    5426:	d104      	bne.n	5432 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5428:	0953      	lsrs	r3, r2, #5
    542a:	01db      	lsls	r3, r3, #7
    542c:	490d      	ldr	r1, [pc, #52]	; (5464 <spi_select_slave+0xf0>)
    542e:	468c      	mov	ip, r1
    5430:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5432:	211f      	movs	r1, #31
    5434:	4011      	ands	r1, r2
    5436:	2201      	movs	r2, #1
    5438:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    543a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    543c:	2300      	movs	r3, #0
    543e:	e79e      	b.n	537e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5440:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5442:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5444:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5446:	2900      	cmp	r1, #0
    5448:	d104      	bne.n	5454 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    544a:	0953      	lsrs	r3, r2, #5
    544c:	01db      	lsls	r3, r3, #7
    544e:	4905      	ldr	r1, [pc, #20]	; (5464 <spi_select_slave+0xf0>)
    5450:	468c      	mov	ip, r1
    5452:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5454:	211f      	movs	r1, #31
    5456:	4011      	ands	r1, r2
    5458:	2201      	movs	r2, #1
    545a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    545c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    545e:	2300      	movs	r3, #0
    5460:	e78d      	b.n	537e <spi_select_slave+0xa>
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	41004400 	.word	0x41004400

00005468 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5468:	b5f0      	push	{r4, r5, r6, r7, lr}
    546a:	46de      	mov	lr, fp
    546c:	4657      	mov	r7, sl
    546e:	464e      	mov	r6, r9
    5470:	4645      	mov	r5, r8
    5472:	b5e0      	push	{r5, r6, r7, lr}
    5474:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5476:	2317      	movs	r3, #23
	if (length == 0) {
    5478:	2a00      	cmp	r2, #0
    547a:	d107      	bne.n	548c <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    547c:	0018      	movs	r0, r3
    547e:	b003      	add	sp, #12
    5480:	bc3c      	pop	{r2, r3, r4, r5}
    5482:	4690      	mov	r8, r2
    5484:	4699      	mov	r9, r3
    5486:	46a2      	mov	sl, r4
    5488:	46ab      	mov	fp, r5
    548a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    548c:	7943      	ldrb	r3, [r0, #5]
    548e:	2b00      	cmp	r3, #0
    5490:	d103      	bne.n	549a <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5492:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5494:	7e1c      	ldrb	r4, [r3, #24]
    5496:	07a4      	lsls	r4, r4, #30
    5498:	d40a      	bmi.n	54b0 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    549a:	4693      	mov	fp, r2
    549c:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    549e:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    54a0:	2502      	movs	r5, #2
    54a2:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    54a4:	3502      	adds	r5, #2
    54a6:	46a8      	mov	r8, r5
    54a8:	3a01      	subs	r2, #1
    54aa:	b292      	uxth	r2, r2
    54ac:	468a      	mov	sl, r1
    54ae:	e023      	b.n	54f8 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    54b0:	2402      	movs	r4, #2
    54b2:	761c      	strb	r4, [r3, #24]
    54b4:	e7f1      	b.n	549a <spi_write_buffer_wait+0x32>
    54b6:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    54b8:	4661      	mov	r1, ip
    54ba:	420d      	tst	r5, r1
    54bc:	d12e      	bne.n	551c <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54be:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    54c0:	421d      	tst	r5, r3
    54c2:	d100      	bne.n	54c6 <spi_write_buffer_wait+0x5e>
    54c4:	e0c2      	b.n	564c <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    54c6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    54c8:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    54ca:	421d      	tst	r5, r3
    54cc:	d0fc      	beq.n	54c8 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    54ce:	1c67      	adds	r7, r4, #1
    54d0:	b2bf      	uxth	r7, r7
    54d2:	4651      	mov	r1, sl
    54d4:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    54d6:	7981      	ldrb	r1, [r0, #6]
    54d8:	2901      	cmp	r1, #1
    54da:	d023      	beq.n	5524 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    54dc:	b2ad      	uxth	r5, r5
    54de:	003c      	movs	r4, r7
    54e0:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    54e2:	421f      	tst	r7, r3
    54e4:	d002      	beq.n	54ec <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    54e6:	05ed      	lsls	r5, r5, #23
    54e8:	0ded      	lsrs	r5, r5, #23
    54ea:	62b5      	str	r5, [r6, #40]	; 0x28
    54ec:	1e55      	subs	r5, r2, #1
    54ee:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    54f0:	79c6      	ldrb	r6, [r0, #7]
    54f2:	2e00      	cmp	r6, #0
    54f4:	d11d      	bne.n	5532 <spi_write_buffer_wait+0xca>
    54f6:	002a      	movs	r2, r5
	while (length--) {
    54f8:	4d59      	ldr	r5, [pc, #356]	; (5660 <spi_write_buffer_wait+0x1f8>)
    54fa:	42aa      	cmp	r2, r5
    54fc:	d070      	beq.n	55e0 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    54fe:	7945      	ldrb	r5, [r0, #5]
    5500:	2d00      	cmp	r5, #0
    5502:	d1e0      	bne.n	54c6 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5504:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5506:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    5508:	421d      	tst	r5, r3
    550a:	d1d4      	bne.n	54b6 <spi_write_buffer_wait+0x4e>
    550c:	4d55      	ldr	r5, [pc, #340]	; (5664 <spi_write_buffer_wait+0x1fc>)
    550e:	7e37      	ldrb	r7, [r6, #24]
    5510:	421f      	tst	r7, r3
    5512:	d1d0      	bne.n	54b6 <spi_write_buffer_wait+0x4e>
    5514:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5516:	2d00      	cmp	r5, #0
    5518:	d1f9      	bne.n	550e <spi_write_buffer_wait+0xa6>
    551a:	e7cc      	b.n	54b6 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    551c:	2302      	movs	r3, #2
    551e:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5520:	3302      	adds	r3, #2
    5522:	e7ab      	b.n	547c <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5524:	3402      	adds	r4, #2
    5526:	b2a4      	uxth	r4, r4
    5528:	4651      	mov	r1, sl
    552a:	5dcf      	ldrb	r7, [r1, r7]
    552c:	023f      	lsls	r7, r7, #8
    552e:	433d      	orrs	r5, r7
    5530:	e7d6      	b.n	54e0 <spi_write_buffer_wait+0x78>
    5532:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5534:	7945      	ldrb	r5, [r0, #5]
    5536:	2d00      	cmp	r5, #0
    5538:	d137      	bne.n	55aa <spi_write_buffer_wait+0x142>
    553a:	4d4b      	ldr	r5, [pc, #300]	; (5668 <spi_write_buffer_wait+0x200>)
    553c:	9101      	str	r1, [sp, #4]
    553e:	e012      	b.n	5566 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5540:	3402      	adds	r4, #2
    5542:	b2a4      	uxth	r4, r4
    5544:	4649      	mov	r1, r9
    5546:	9f01      	ldr	r7, [sp, #4]
    5548:	5c79      	ldrb	r1, [r7, r1]
    554a:	0209      	lsls	r1, r1, #8
    554c:	9f00      	ldr	r7, [sp, #0]
    554e:	430f      	orrs	r7, r1
    5550:	e01b      	b.n	558a <spi_write_buffer_wait+0x122>
						length--;
    5552:	3a01      	subs	r2, #1
    5554:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5556:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5558:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    555a:	4641      	mov	r1, r8
    555c:	420f      	tst	r7, r1
    555e:	d11b      	bne.n	5598 <spi_write_buffer_wait+0x130>
    5560:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5562:	2d00      	cmp	r5, #0
    5564:	d018      	beq.n	5598 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5566:	2a00      	cmp	r2, #0
    5568:	d0f5      	beq.n	5556 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    556a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    556c:	7e37      	ldrb	r7, [r6, #24]
    556e:	421f      	tst	r7, r3
    5570:	d0f1      	beq.n	5556 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5572:	1c67      	adds	r7, r4, #1
    5574:	b2b9      	uxth	r1, r7
    5576:	4689      	mov	r9, r1
    5578:	9901      	ldr	r1, [sp, #4]
    557a:	5d09      	ldrb	r1, [r1, r4]
    557c:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    557e:	7981      	ldrb	r1, [r0, #6]
    5580:	2901      	cmp	r1, #1
    5582:	d0dd      	beq.n	5540 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5584:	4669      	mov	r1, sp
    5586:	880f      	ldrh	r7, [r1, #0]
    5588:	464c      	mov	r4, r9
    558a:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    558c:	4219      	tst	r1, r3
    558e:	d0e0      	beq.n	5552 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5590:	05ff      	lsls	r7, r7, #23
    5592:	0dff      	lsrs	r7, r7, #23
    5594:	62b7      	str	r7, [r6, #40]	; 0x28
    5596:	e7dc      	b.n	5552 <spi_write_buffer_wait+0xea>
    5598:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    559a:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    559c:	4667      	mov	r7, ip
    559e:	423d      	tst	r5, r7
    55a0:	d118      	bne.n	55d4 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    55a2:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    55a4:	4646      	mov	r6, r8
    55a6:	4235      	tst	r5, r6
    55a8:	d052      	beq.n	5650 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    55aa:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    55ac:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    55ae:	4647      	mov	r7, r8
    55b0:	423d      	tst	r5, r7
    55b2:	d0fb      	beq.n	55ac <spi_write_buffer_wait+0x144>
    55b4:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    55b6:	423d      	tst	r5, r7
    55b8:	d007      	beq.n	55ca <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    55ba:	8b75      	ldrh	r5, [r6, #26]
    55bc:	423d      	tst	r5, r7
    55be:	d000      	beq.n	55c2 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    55c0:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    55c2:	7985      	ldrb	r5, [r0, #6]
    55c4:	2d01      	cmp	r5, #1
    55c6:	d009      	beq.n	55dc <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    55c8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    55ca:	465d      	mov	r5, fp
    55cc:	3d01      	subs	r5, #1
    55ce:	b2ad      	uxth	r5, r5
    55d0:	46ab      	mov	fp, r5
    55d2:	e769      	b.n	54a8 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    55d4:	2302      	movs	r3, #2
    55d6:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    55d8:	3302      	adds	r3, #2
    55da:	e74f      	b.n	547c <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    55dc:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    55de:	e7f4      	b.n	55ca <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    55e0:	7943      	ldrb	r3, [r0, #5]
    55e2:	2b01      	cmp	r3, #1
    55e4:	d00b      	beq.n	55fe <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    55e6:	2b00      	cmp	r3, #0
    55e8:	d134      	bne.n	5654 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    55ea:	79c2      	ldrb	r2, [r0, #7]
    55ec:	2a00      	cmp	r2, #0
    55ee:	d100      	bne.n	55f2 <spi_write_buffer_wait+0x18a>
    55f0:	e744      	b.n	547c <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    55f2:	2404      	movs	r4, #4
			while (flush_length) {
    55f4:	465b      	mov	r3, fp
    55f6:	465d      	mov	r5, fp
    55f8:	2b00      	cmp	r3, #0
    55fa:	d119      	bne.n	5630 <spi_write_buffer_wait+0x1c8>
    55fc:	e73e      	b.n	547c <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    55fe:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5600:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5602:	7e0b      	ldrb	r3, [r1, #24]
    5604:	4213      	tst	r3, r2
    5606:	d0fc      	beq.n	5602 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    5608:	2300      	movs	r3, #0
    560a:	e737      	b.n	547c <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    560c:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    560e:	4223      	tst	r3, r4
    5610:	d022      	beq.n	5658 <spi_write_buffer_wait+0x1f0>
    5612:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5614:	4223      	tst	r3, r4
    5616:	d007      	beq.n	5628 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5618:	8b4b      	ldrh	r3, [r1, #26]
    561a:	4223      	tst	r3, r4
    561c:	d000      	beq.n	5620 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    561e:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5620:	7983      	ldrb	r3, [r0, #6]
    5622:	2b01      	cmp	r3, #1
    5624:	d010      	beq.n	5648 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5626:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    5628:	3d01      	subs	r5, #1
    562a:	b2ad      	uxth	r5, r5
			while (flush_length) {
    562c:	2d00      	cmp	r5, #0
    562e:	d015      	beq.n	565c <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5630:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5632:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5634:	4223      	tst	r3, r4
    5636:	d1e9      	bne.n	560c <spi_write_buffer_wait+0x1a4>
    5638:	4b0a      	ldr	r3, [pc, #40]	; (5664 <spi_write_buffer_wait+0x1fc>)
    563a:	7e0a      	ldrb	r2, [r1, #24]
    563c:	4222      	tst	r2, r4
    563e:	d1e5      	bne.n	560c <spi_write_buffer_wait+0x1a4>
    5640:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5642:	2b00      	cmp	r3, #0
    5644:	d1f9      	bne.n	563a <spi_write_buffer_wait+0x1d2>
    5646:	e7e1      	b.n	560c <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5648:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    564a:	e7ed      	b.n	5628 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    564c:	2312      	movs	r3, #18
    564e:	e715      	b.n	547c <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5650:	2312      	movs	r3, #18
    5652:	e713      	b.n	547c <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5654:	2300      	movs	r3, #0
    5656:	e711      	b.n	547c <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5658:	2312      	movs	r3, #18
    565a:	e70f      	b.n	547c <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    565c:	2300      	movs	r3, #0
    565e:	e70d      	b.n	547c <spi_write_buffer_wait+0x14>
    5660:	0000ffff 	.word	0x0000ffff
    5664:	00002710 	.word	0x00002710
    5668:	00002711 	.word	0x00002711

0000566c <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    566c:	4770      	bx	lr
	...

00005670 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    5670:	b510      	push	{r4, lr}
    5672:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    5674:	4b0f      	ldr	r3, [pc, #60]	; (56b4 <sd_mmc_test_unit_ready+0x44>)
    5676:	4798      	blx	r3
    5678:	2801      	cmp	r0, #1
    567a:	d019      	beq.n	56b0 <sd_mmc_test_unit_ready+0x40>
    567c:	2800      	cmp	r0, #0
    567e:	d003      	beq.n	5688 <sd_mmc_test_unit_ready+0x18>
    5680:	2802      	cmp	r0, #2
    5682:	d010      	beq.n	56a6 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    5684:	2001      	movs	r0, #1
	}
}
    5686:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    5688:	4b0b      	ldr	r3, [pc, #44]	; (56b8 <sd_mmc_test_unit_ready+0x48>)
    568a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    568c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    568e:	2b00      	cmp	r3, #0
    5690:	d1f9      	bne.n	5686 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    5692:	0020      	movs	r0, r4
    5694:	4b09      	ldr	r3, [pc, #36]	; (56bc <sd_mmc_test_unit_ready+0x4c>)
    5696:	4798      	blx	r3
    5698:	0003      	movs	r3, r0
    569a:	2003      	movs	r0, #3
    569c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    569e:	4243      	negs	r3, r0
    56a0:	4158      	adcs	r0, r3
    56a2:	0040      	lsls	r0, r0, #1
    56a4:	e7ef      	b.n	5686 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    56a6:	2200      	movs	r2, #0
    56a8:	4b03      	ldr	r3, [pc, #12]	; (56b8 <sd_mmc_test_unit_ready+0x48>)
    56aa:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    56ac:	2002      	movs	r0, #2
    56ae:	e7ea      	b.n	5686 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    56b0:	2003      	movs	r0, #3
    56b2:	e7e8      	b.n	5686 <sd_mmc_test_unit_ready+0x16>
    56b4:	000006ed 	.word	0x000006ed
    56b8:	200002b4 	.word	0x200002b4
    56bc:	00000b9d 	.word	0x00000b9d

000056c0 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    56c0:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    56c2:	2000      	movs	r0, #0
    56c4:	4b01      	ldr	r3, [pc, #4]	; (56cc <sd_mmc_test_unit_ready_0+0xc>)
    56c6:	4798      	blx	r3
}
    56c8:	bd10      	pop	{r4, pc}
    56ca:	46c0      	nop			; (mov r8, r8)
    56cc:	00005671 	.word	0x00005671

000056d0 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    56d0:	b570      	push	{r4, r5, r6, lr}
    56d2:	0004      	movs	r4, r0
    56d4:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    56d6:	4b04      	ldr	r3, [pc, #16]	; (56e8 <sd_mmc_read_capacity+0x18>)
    56d8:	4798      	blx	r3
    56da:	0040      	lsls	r0, r0, #1
    56dc:	3801      	subs	r0, #1
    56de:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    56e0:	0020      	movs	r0, r4
    56e2:	4b02      	ldr	r3, [pc, #8]	; (56ec <sd_mmc_read_capacity+0x1c>)
    56e4:	4798      	blx	r3
}
    56e6:	bd70      	pop	{r4, r5, r6, pc}
    56e8:	00000bc5 	.word	0x00000bc5
    56ec:	00005671 	.word	0x00005671

000056f0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    56f0:	b510      	push	{r4, lr}
    56f2:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    56f4:	2000      	movs	r0, #0
    56f6:	4b01      	ldr	r3, [pc, #4]	; (56fc <sd_mmc_read_capacity_0+0xc>)
    56f8:	4798      	blx	r3
}
    56fa:	bd10      	pop	{r4, pc}
    56fc:	000056d1 	.word	0x000056d1

00005700 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    5700:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    5702:	2000      	movs	r0, #0
    5704:	4b01      	ldr	r3, [pc, #4]	; (570c <sd_mmc_wr_protect_0+0xc>)
    5706:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    5708:	bd10      	pop	{r4, pc}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	00000bed 	.word	0x00000bed

00005710 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    5710:	2001      	movs	r0, #1
    5712:	4770      	bx	lr

00005714 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5716:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    5718:	4b24      	ldr	r3, [pc, #144]	; (57ac <sd_mmc_usb_read_10+0x98>)
    571a:	4798      	blx	r3
    571c:	2800      	cmp	r0, #0
    571e:	d004      	beq.n	572a <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5720:	3802      	subs	r0, #2
    5722:	4243      	negs	r3, r0
    5724:	4158      	adcs	r0, r3
    5726:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    5728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    572a:	3401      	adds	r4, #1
    572c:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    572e:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5730:	4e1f      	ldr	r6, [pc, #124]	; (57b0 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    5732:	e008      	b.n	5746 <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5734:	481f      	ldr	r0, [pc, #124]	; (57b4 <sd_mmc_usb_read_10+0xa0>)
    5736:	e010      	b.n	575a <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    5738:	2000      	movs	r0, #0
    573a:	4b1f      	ldr	r3, [pc, #124]	; (57b8 <sd_mmc_usb_read_10+0xa4>)
    573c:	4798      	blx	r3
    573e:	2800      	cmp	r0, #0
    5740:	d126      	bne.n	5790 <sd_mmc_usb_read_10+0x7c>
    5742:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5744:	0022      	movs	r2, r4
	while (nb_step--) {
    5746:	1e54      	subs	r4, r2, #1
    5748:	b2a4      	uxth	r4, r4
    574a:	2a00      	cmp	r2, #0
    574c:	d01c      	beq.n	5788 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    574e:	2c00      	cmp	r4, #0
    5750:	d020      	beq.n	5794 <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5752:	2501      	movs	r5, #1
    5754:	4025      	ands	r5, r4
    5756:	d0ed      	beq.n	5734 <sd_mmc_usb_read_10+0x20>
    5758:	4818      	ldr	r0, [pc, #96]	; (57bc <sd_mmc_usb_read_10+0xa8>)
    575a:	2101      	movs	r1, #1
    575c:	47b0      	blx	r6
    575e:	2800      	cmp	r0, #0
    5760:	d114      	bne.n	578c <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    5762:	2f00      	cmp	r7, #0
    5764:	d1e8      	bne.n	5738 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    5766:	4915      	ldr	r1, [pc, #84]	; (57bc <sd_mmc_usb_read_10+0xa8>)
    5768:	2d00      	cmp	r5, #0
    576a:	d000      	beq.n	576e <sd_mmc_usb_read_10+0x5a>
    576c:	4911      	ldr	r1, [pc, #68]	; (57b4 <sd_mmc_usb_read_10+0xa0>)
    576e:	2300      	movs	r3, #0
    5770:	2280      	movs	r2, #128	; 0x80
    5772:	0092      	lsls	r2, r2, #2
    5774:	2001      	movs	r0, #1
    5776:	4d12      	ldr	r5, [pc, #72]	; (57c0 <sd_mmc_usb_read_10+0xac>)
    5778:	47a8      	blx	r5
    577a:	2800      	cmp	r0, #0
    577c:	d1dc      	bne.n	5738 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    577e:	2001      	movs	r0, #1
    5780:	4b0d      	ldr	r3, [pc, #52]	; (57b8 <sd_mmc_usb_read_10+0xa4>)
    5782:	4798      	blx	r3
				return CTRL_FAIL;
    5784:	2001      	movs	r0, #1
    5786:	e7cf      	b.n	5728 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    5788:	2000      	movs	r0, #0
    578a:	e7cd      	b.n	5728 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    578c:	2001      	movs	r0, #1
    578e:	e7cb      	b.n	5728 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5790:	2001      	movs	r0, #1
    5792:	e7c9      	b.n	5728 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    5794:	2f00      	cmp	r7, #0
    5796:	d1d4      	bne.n	5742 <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    5798:	2300      	movs	r3, #0
    579a:	2280      	movs	r2, #128	; 0x80
    579c:	0092      	lsls	r2, r2, #2
    579e:	4907      	ldr	r1, [pc, #28]	; (57bc <sd_mmc_usb_read_10+0xa8>)
    57a0:	2001      	movs	r0, #1
    57a2:	4d07      	ldr	r5, [pc, #28]	; (57c0 <sd_mmc_usb_read_10+0xac>)
    57a4:	47a8      	blx	r5
    57a6:	2800      	cmp	r0, #0
    57a8:	d1cb      	bne.n	5742 <sd_mmc_usb_read_10+0x2e>
    57aa:	e7e8      	b.n	577e <sd_mmc_usb_read_10+0x6a>
    57ac:	00000bf1 	.word	0x00000bf1
    57b0:	00000c79 	.word	0x00000c79
    57b4:	200008e8 	.word	0x200008e8
    57b8:	00000ca5 	.word	0x00000ca5
    57bc:	200006e8 	.word	0x200006e8
    57c0:	00001645 	.word	0x00001645

000057c4 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    57c4:	b510      	push	{r4, lr}
    57c6:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    57c8:	0001      	movs	r1, r0
    57ca:	2000      	movs	r0, #0
    57cc:	4b01      	ldr	r3, [pc, #4]	; (57d4 <sd_mmc_usb_read_10_0+0x10>)
    57ce:	4798      	blx	r3
}
    57d0:	bd10      	pop	{r4, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	00005715 	.word	0x00005715

000057d8 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    57d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57da:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    57dc:	4b20      	ldr	r3, [pc, #128]	; (5860 <sd_mmc_usb_write_10+0x88>)
    57de:	4798      	blx	r3
    57e0:	2800      	cmp	r0, #0
    57e2:	d00d      	beq.n	5800 <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    57e4:	3802      	subs	r0, #2
    57e6:	4243      	negs	r3, r0
    57e8:	4158      	adcs	r0, r3
    57ea:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    57ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    57ee:	481d      	ldr	r0, [pc, #116]	; (5864 <sd_mmc_usb_write_10+0x8c>)
    57f0:	e01b      	b.n	582a <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    57f2:	3001      	adds	r0, #1
				if (!b_first_step) {
    57f4:	2d00      	cmp	r5, #0
    57f6:	d1f9      	bne.n	57ec <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    57f8:	4b1b      	ldr	r3, [pc, #108]	; (5868 <sd_mmc_usb_write_10+0x90>)
    57fa:	4798      	blx	r3
				return CTRL_FAIL;
    57fc:	2001      	movs	r0, #1
    57fe:	e7f5      	b.n	57ec <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    5800:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5802:	4f19      	ldr	r7, [pc, #100]	; (5868 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    5804:	4e19      	ldr	r6, [pc, #100]	; (586c <sd_mmc_usb_write_10+0x94>)
    5806:	e008      	b.n	581a <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    5808:	2000      	movs	r0, #0
    580a:	e7ef      	b.n	57ec <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    580c:	2001      	movs	r0, #1
    580e:	e7ed      	b.n	57ec <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    5810:	2c00      	cmp	r4, #0
    5812:	d111      	bne.n	5838 <sd_mmc_usb_write_10+0x60>
    5814:	3c01      	subs	r4, #1
    5816:	b2a4      	uxth	r4, r4
    5818:	2500      	movs	r5, #0
	while (nb_step--) {
    581a:	4b15      	ldr	r3, [pc, #84]	; (5870 <sd_mmc_usb_write_10+0x98>)
    581c:	429c      	cmp	r4, r3
    581e:	d0f3      	beq.n	5808 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    5820:	2d00      	cmp	r5, #0
    5822:	d1f5      	bne.n	5810 <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    5824:	07e3      	lsls	r3, r4, #31
    5826:	d5e2      	bpl.n	57ee <sd_mmc_usb_write_10+0x16>
    5828:	4812      	ldr	r0, [pc, #72]	; (5874 <sd_mmc_usb_write_10+0x9c>)
    582a:	2101      	movs	r1, #1
    582c:	4b12      	ldr	r3, [pc, #72]	; (5878 <sd_mmc_usb_write_10+0xa0>)
    582e:	4798      	blx	r3
    5830:	2800      	cmp	r0, #0
    5832:	d1eb      	bne.n	580c <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    5834:	2c00      	cmp	r4, #0
    5836:	d00c      	beq.n	5852 <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    5838:	490e      	ldr	r1, [pc, #56]	; (5874 <sd_mmc_usb_write_10+0x9c>)
    583a:	07e3      	lsls	r3, r4, #31
    583c:	d500      	bpl.n	5840 <sd_mmc_usb_write_10+0x68>
    583e:	4909      	ldr	r1, [pc, #36]	; (5864 <sd_mmc_usb_write_10+0x8c>)
    5840:	2300      	movs	r3, #0
    5842:	2280      	movs	r2, #128	; 0x80
    5844:	0092      	lsls	r2, r2, #2
    5846:	2000      	movs	r0, #0
    5848:	47b0      	blx	r6
    584a:	2800      	cmp	r0, #0
    584c:	d0d1      	beq.n	57f2 <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    584e:	2d00      	cmp	r5, #0
    5850:	d1e0      	bne.n	5814 <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5852:	2000      	movs	r0, #0
    5854:	47b8      	blx	r7
    5856:	2800      	cmp	r0, #0
    5858:	d0dc      	beq.n	5814 <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    585a:	2001      	movs	r0, #1
    585c:	e7c6      	b.n	57ec <sd_mmc_usb_write_10+0x14>
    585e:	46c0      	nop			; (mov r8, r8)
    5860:	00000d15 	.word	0x00000d15
    5864:	200008e8 	.word	0x200008e8
    5868:	00000db1 	.word	0x00000db1
    586c:	00001645 	.word	0x00001645
    5870:	0000ffff 	.word	0x0000ffff
    5874:	200006e8 	.word	0x200006e8
    5878:	00000d85 	.word	0x00000d85

0000587c <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    587c:	b510      	push	{r4, lr}
    587e:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    5880:	0001      	movs	r1, r0
    5882:	2000      	movs	r0, #0
    5884:	4b01      	ldr	r3, [pc, #4]	; (588c <sd_mmc_usb_write_10_0+0x10>)
    5886:	4798      	blx	r3
}
    5888:	bd10      	pop	{r4, pc}
    588a:	46c0      	nop			; (mov r8, r8)
    588c:	000057d9 	.word	0x000057d9

00005890 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5890:	b500      	push	{lr}
    5892:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    5894:	466b      	mov	r3, sp
    5896:	1dd9      	adds	r1, r3, #7
    5898:	23ff      	movs	r3, #255	; 0xff
    589a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    589c:	2201      	movs	r2, #1
    589e:	480b      	ldr	r0, [pc, #44]	; (58cc <sd_mmc_spi_start_write_block+0x3c>)
    58a0:	4b0b      	ldr	r3, [pc, #44]	; (58d0 <sd_mmc_spi_start_write_block+0x40>)
    58a2:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    58a4:	4b0b      	ldr	r3, [pc, #44]	; (58d4 <sd_mmc_spi_start_write_block+0x44>)
    58a6:	881b      	ldrh	r3, [r3, #0]
    58a8:	2b01      	cmp	r3, #1
    58aa:	d00a      	beq.n	58c2 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    58ac:	22fc      	movs	r2, #252	; 0xfc
    58ae:	466b      	mov	r3, sp
    58b0:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    58b2:	2201      	movs	r2, #1
    58b4:	466b      	mov	r3, sp
    58b6:	1d99      	adds	r1, r3, #6
    58b8:	4804      	ldr	r0, [pc, #16]	; (58cc <sd_mmc_spi_start_write_block+0x3c>)
    58ba:	4b05      	ldr	r3, [pc, #20]	; (58d0 <sd_mmc_spi_start_write_block+0x40>)
    58bc:	4798      	blx	r3
}
    58be:	b003      	add	sp, #12
    58c0:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    58c2:	22fe      	movs	r2, #254	; 0xfe
    58c4:	466b      	mov	r3, sp
    58c6:	719a      	strb	r2, [r3, #6]
    58c8:	e7f3      	b.n	58b2 <sd_mmc_spi_start_write_block+0x22>
    58ca:	46c0      	nop			; (mov r8, r8)
    58cc:	200002b8 	.word	0x200002b8
    58d0:	00005469 	.word	0x00005469
    58d4:	200002cc 	.word	0x200002cc

000058d8 <sd_mmc_spi_wait_busy>:
{
    58d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58da:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    58dc:	466b      	mov	r3, sp
    58de:	1ddc      	adds	r4, r3, #7
    58e0:	23ff      	movs	r3, #255	; 0xff
    58e2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    58e4:	4e12      	ldr	r6, [pc, #72]	; (5930 <sd_mmc_spi_wait_busy+0x58>)
    58e6:	2201      	movs	r2, #1
    58e8:	0021      	movs	r1, r4
    58ea:	0030      	movs	r0, r6
    58ec:	4d11      	ldr	r5, [pc, #68]	; (5934 <sd_mmc_spi_wait_busy+0x5c>)
    58ee:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    58f0:	23ff      	movs	r3, #255	; 0xff
    58f2:	2201      	movs	r2, #1
    58f4:	0021      	movs	r1, r4
    58f6:	0030      	movs	r0, r6
    58f8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    58fa:	23ff      	movs	r3, #255	; 0xff
    58fc:	2201      	movs	r2, #1
    58fe:	0021      	movs	r1, r4
    5900:	0030      	movs	r0, r6
    5902:	47a8      	blx	r5
    5904:	4c0c      	ldr	r4, [pc, #48]	; (5938 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    5906:	466b      	mov	r3, sp
    5908:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    590a:	4e09      	ldr	r6, [pc, #36]	; (5930 <sd_mmc_spi_wait_busy+0x58>)
    590c:	4f09      	ldr	r7, [pc, #36]	; (5934 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    590e:	782b      	ldrb	r3, [r5, #0]
    5910:	2bff      	cmp	r3, #255	; 0xff
    5912:	d009      	beq.n	5928 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5914:	23ff      	movs	r3, #255	; 0xff
    5916:	2201      	movs	r2, #1
    5918:	0029      	movs	r1, r5
    591a:	0030      	movs	r0, r6
    591c:	47b8      	blx	r7
    591e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    5920:	2c00      	cmp	r4, #0
    5922:	d1f4      	bne.n	590e <sd_mmc_spi_wait_busy+0x36>
			return false;
    5924:	2000      	movs	r0, #0
    5926:	e000      	b.n	592a <sd_mmc_spi_wait_busy+0x52>
	return true;
    5928:	2001      	movs	r0, #1
}
    592a:	b003      	add	sp, #12
    592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	200002b8 	.word	0x200002b8
    5934:	0000525d 	.word	0x0000525d
    5938:	00030d40 	.word	0x00030d40

0000593c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    593c:	b570      	push	{r4, r5, r6, lr}
    593e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5940:	4b14      	ldr	r3, [pc, #80]	; (5994 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    5942:	881c      	ldrh	r4, [r3, #0]
    5944:	2c01      	cmp	r4, #1
    5946:	d023      	beq.n	5990 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5948:	4b13      	ldr	r3, [pc, #76]	; (5998 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    594a:	8819      	ldrh	r1, [r3, #0]
    594c:	4b13      	ldr	r3, [pc, #76]	; (599c <sd_mmc_spi_stop_multiwrite_block+0x60>)
    594e:	6818      	ldr	r0, [r3, #0]
    5950:	4b13      	ldr	r3, [pc, #76]	; (59a0 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    5952:	4798      	blx	r3
		return true; // It is not the End of multi write
    5954:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    5956:	4284      	cmp	r4, r0
    5958:	d902      	bls.n	5960 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    595a:	0018      	movs	r0, r3
    595c:	b002      	add	sp, #8
    595e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5960:	466b      	mov	r3, sp
    5962:	1ddc      	adds	r4, r3, #7
    5964:	23ff      	movs	r3, #255	; 0xff
    5966:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5968:	4e0e      	ldr	r6, [pc, #56]	; (59a4 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    596a:	2201      	movs	r2, #1
    596c:	0021      	movs	r1, r4
    596e:	0030      	movs	r0, r6
    5970:	4d0d      	ldr	r5, [pc, #52]	; (59a8 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    5972:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    5974:	23fd      	movs	r3, #253	; 0xfd
    5976:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5978:	2201      	movs	r2, #1
    597a:	0021      	movs	r1, r4
    597c:	0030      	movs	r0, r6
    597e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5980:	4b0a      	ldr	r3, [pc, #40]	; (59ac <sd_mmc_spi_stop_multiwrite_block+0x70>)
    5982:	4798      	blx	r3
    5984:	1e03      	subs	r3, r0, #0
    5986:	d1e8      	bne.n	595a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5988:	2105      	movs	r1, #5
    598a:	4a09      	ldr	r2, [pc, #36]	; (59b0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    598c:	7011      	strb	r1, [r2, #0]
		return false;
    598e:	e7e4      	b.n	595a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5990:	2301      	movs	r3, #1
    5992:	e7e2      	b.n	595a <sd_mmc_spi_stop_multiwrite_block+0x1e>
    5994:	200002cc 	.word	0x200002cc
    5998:	200002c4 	.word	0x200002c4
    599c:	200002d4 	.word	0x200002d4
    59a0:	00006605 	.word	0x00006605
    59a4:	200002b8 	.word	0x200002b8
    59a8:	00005469 	.word	0x00005469
    59ac:	000058d9 	.word	0x000058d9
    59b0:	200002cb 	.word	0x200002cb

000059b4 <sd_mmc_spi_start_read_block>:
{
    59b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59b6:	b083      	sub	sp, #12
	token = 0;
    59b8:	2200      	movs	r2, #0
    59ba:	466b      	mov	r3, sp
    59bc:	71da      	strb	r2, [r3, #7]
    59be:	4c14      	ldr	r4, [pc, #80]	; (5a10 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    59c0:	466b      	mov	r3, sp
    59c2:	1ddd      	adds	r5, r3, #7
    59c4:	4e13      	ldr	r6, [pc, #76]	; (5a14 <sd_mmc_spi_start_read_block+0x60>)
    59c6:	4f14      	ldr	r7, [pc, #80]	; (5a18 <sd_mmc_spi_start_read_block+0x64>)
    59c8:	23ff      	movs	r3, #255	; 0xff
    59ca:	2201      	movs	r2, #1
    59cc:	0029      	movs	r1, r5
    59ce:	0030      	movs	r0, r6
    59d0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    59d2:	782b      	ldrb	r3, [r5, #0]
    59d4:	220f      	movs	r2, #15
    59d6:	0019      	movs	r1, r3
    59d8:	4391      	bics	r1, r2
    59da:	1e0a      	subs	r2, r1, #0
    59dc:	d009      	beq.n	59f2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    59de:	2bfe      	cmp	r3, #254	; 0xfe
    59e0:	d013      	beq.n	5a0a <sd_mmc_spi_start_read_block+0x56>
    59e2:	3c01      	subs	r4, #1
		if (i-- == 0) {
    59e4:	2c00      	cmp	r4, #0
    59e6:	d1ef      	bne.n	59c8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    59e8:	2204      	movs	r2, #4
    59ea:	4b0c      	ldr	r3, [pc, #48]	; (5a1c <sd_mmc_spi_start_read_block+0x68>)
    59ec:	701a      	strb	r2, [r3, #0]
			return false;
    59ee:	2000      	movs	r0, #0
    59f0:	e00c      	b.n	5a0c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    59f2:	075b      	lsls	r3, r3, #29
    59f4:	d004      	beq.n	5a00 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    59f6:	3207      	adds	r2, #7
    59f8:	4b08      	ldr	r3, [pc, #32]	; (5a1c <sd_mmc_spi_start_read_block+0x68>)
    59fa:	701a      	strb	r2, [r3, #0]
			return false;
    59fc:	2000      	movs	r0, #0
    59fe:	e005      	b.n	5a0c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    5a00:	220b      	movs	r2, #11
    5a02:	4b06      	ldr	r3, [pc, #24]	; (5a1c <sd_mmc_spi_start_read_block+0x68>)
    5a04:	701a      	strb	r2, [r3, #0]
			return false;
    5a06:	2000      	movs	r0, #0
    5a08:	e000      	b.n	5a0c <sd_mmc_spi_start_read_block+0x58>
	return true;
    5a0a:	2001      	movs	r0, #1
}
    5a0c:	b003      	add	sp, #12
    5a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a10:	0007a120 	.word	0x0007a120
    5a14:	200002b8 	.word	0x200002b8
    5a18:	0000525d 	.word	0x0000525d
    5a1c:	200002cb 	.word	0x200002cb

00005a20 <sd_mmc_spi_stop_write_block>:
{
    5a20:	b530      	push	{r4, r5, lr}
    5a22:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    5a24:	a901      	add	r1, sp, #4
    5a26:	2301      	movs	r3, #1
    5a28:	425b      	negs	r3, r3
    5a2a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5a2c:	4d14      	ldr	r5, [pc, #80]	; (5a80 <sd_mmc_spi_stop_write_block+0x60>)
    5a2e:	2202      	movs	r2, #2
    5a30:	0028      	movs	r0, r5
    5a32:	4b14      	ldr	r3, [pc, #80]	; (5a84 <sd_mmc_spi_stop_write_block+0x64>)
    5a34:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    5a36:	466b      	mov	r3, sp
    5a38:	1ddc      	adds	r4, r3, #7
    5a3a:	23ff      	movs	r3, #255	; 0xff
    5a3c:	2201      	movs	r2, #1
    5a3e:	0021      	movs	r1, r4
    5a40:	0028      	movs	r0, r5
    5a42:	4d11      	ldr	r5, [pc, #68]	; (5a88 <sd_mmc_spi_stop_write_block+0x68>)
    5a44:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    5a46:	7822      	ldrb	r2, [r4, #0]
    5a48:	2311      	movs	r3, #17
    5a4a:	4013      	ands	r3, r2
    5a4c:	2b01      	cmp	r3, #1
    5a4e:	d005      	beq.n	5a5c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5a50:	2201      	movs	r2, #1
    5a52:	4b0e      	ldr	r3, [pc, #56]	; (5a8c <sd_mmc_spi_stop_write_block+0x6c>)
    5a54:	701a      	strb	r2, [r3, #0]
		return false;
    5a56:	2000      	movs	r0, #0
}
    5a58:	b003      	add	sp, #12
    5a5a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5a5c:	231e      	movs	r3, #30
    5a5e:	401a      	ands	r2, r3
    5a60:	2a04      	cmp	r2, #4
    5a62:	d00b      	beq.n	5a7c <sd_mmc_spi_stop_write_block+0x5c>
    5a64:	2a0a      	cmp	r2, #10
    5a66:	d104      	bne.n	5a72 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5a68:	3a02      	subs	r2, #2
    5a6a:	4b08      	ldr	r3, [pc, #32]	; (5a8c <sd_mmc_spi_stop_write_block+0x6c>)
    5a6c:	701a      	strb	r2, [r3, #0]
		return false;
    5a6e:	2000      	movs	r0, #0
    5a70:	e7f2      	b.n	5a58 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5a72:	220a      	movs	r2, #10
    5a74:	4b05      	ldr	r3, [pc, #20]	; (5a8c <sd_mmc_spi_stop_write_block+0x6c>)
    5a76:	701a      	strb	r2, [r3, #0]
		return false;
    5a78:	2000      	movs	r0, #0
    5a7a:	e7ed      	b.n	5a58 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5a7c:	2001      	movs	r0, #1
    5a7e:	e7eb      	b.n	5a58 <sd_mmc_spi_stop_write_block+0x38>
    5a80:	200002b8 	.word	0x200002b8
    5a84:	00005469 	.word	0x00005469
    5a88:	0000525d 	.word	0x0000525d
    5a8c:	200002cb 	.word	0x200002cb

00005a90 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5a90:	b570      	push	{r4, r5, r6, lr}
    5a92:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5a94:	2500      	movs	r5, #0
    5a96:	4b2c      	ldr	r3, [pc, #176]	; (5b48 <sd_mmc_spi_init+0xb8>)
    5a98:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    5a9a:	a90f      	add	r1, sp, #60	; 0x3c
    5a9c:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5a9e:	2601      	movs	r6, #1
    5aa0:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    5aa2:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    5aa4:	2025      	movs	r0, #37	; 0x25
    5aa6:	4b29      	ldr	r3, [pc, #164]	; (5b4c <sd_mmc_spi_init+0xbc>)
    5aa8:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    5aaa:	ac01      	add	r4, sp, #4
    5aac:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5aae:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5ab0:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5ab2:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    5ab4:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    5ab6:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5ab8:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    5aba:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5abc:	2324      	movs	r3, #36	; 0x24
    5abe:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5ac0:	220c      	movs	r2, #12
    5ac2:	2100      	movs	r1, #0
    5ac4:	a807      	add	r0, sp, #28
    5ac6:	4b22      	ldr	r3, [pc, #136]	; (5b50 <sd_mmc_spi_init+0xc0>)
    5ac8:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    5aca:	2380      	movs	r3, #128	; 0x80
    5acc:	025b      	lsls	r3, r3, #9
    5ace:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    5ad0:	4b20      	ldr	r3, [pc, #128]	; (5b54 <sd_mmc_spi_init+0xc4>)
    5ad2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    5ad4:	4b20      	ldr	r3, [pc, #128]	; (5b58 <sd_mmc_spi_init+0xc8>)
    5ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    5ad8:	4b20      	ldr	r3, [pc, #128]	; (5b5c <sd_mmc_spi_init+0xcc>)
    5ada:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    5adc:	4b20      	ldr	r3, [pc, #128]	; (5b60 <sd_mmc_spi_init+0xd0>)
    5ade:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    5ae0:	4b20      	ldr	r3, [pc, #128]	; (5b64 <sd_mmc_spi_init+0xd4>)
    5ae2:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    5ae4:	4d20      	ldr	r5, [pc, #128]	; (5b68 <sd_mmc_spi_init+0xd8>)
    5ae6:	0022      	movs	r2, r4
    5ae8:	4920      	ldr	r1, [pc, #128]	; (5b6c <sd_mmc_spi_init+0xdc>)
    5aea:	0028      	movs	r0, r5
    5aec:	4b20      	ldr	r3, [pc, #128]	; (5b70 <sd_mmc_spi_init+0xe0>)
    5aee:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5af0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5af2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5af4:	2b00      	cmp	r3, #0
    5af6:	d1fc      	bne.n	5af2 <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5af8:	6813      	ldr	r3, [r2, #0]
    5afa:	2102      	movs	r1, #2
    5afc:	430b      	orrs	r3, r1
    5afe:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    5b00:	4a1c      	ldr	r2, [pc, #112]	; (5b74 <sd_mmc_spi_init+0xe4>)
    5b02:	2300      	movs	r3, #0
    5b04:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    5b06:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    5b08:	491b      	ldr	r1, [pc, #108]	; (5b78 <sd_mmc_spi_init+0xe8>)
    5b0a:	7808      	ldrb	r0, [r1, #0]
    5b0c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    5b0e:	4c1b      	ldr	r4, [pc, #108]	; (5b7c <sd_mmc_spi_init+0xec>)
    5b10:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5b12:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5b14:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5b16:	2201      	movs	r2, #1
    5b18:	4669      	mov	r1, sp
    5b1a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5b1c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5b1e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5b20:	4b0a      	ldr	r3, [pc, #40]	; (5b4c <sd_mmc_spi_init+0xbc>)
    5b22:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5b24:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5b26:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b28:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b2a:	2900      	cmp	r1, #0
    5b2c:	d104      	bne.n	5b38 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    5b2e:	0953      	lsrs	r3, r2, #5
    5b30:	01db      	lsls	r3, r3, #7
    5b32:	4913      	ldr	r1, [pc, #76]	; (5b80 <sd_mmc_spi_init+0xf0>)
    5b34:	468c      	mov	ip, r1
    5b36:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b38:	211f      	movs	r1, #31
    5b3a:	4011      	ands	r1, r2
    5b3c:	2201      	movs	r2, #1
    5b3e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b40:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    5b42:	b010      	add	sp, #64	; 0x40
    5b44:	bd70      	pop	{r4, r5, r6, pc}
    5b46:	46c0      	nop			; (mov r8, r8)
    5b48:	200002cb 	.word	0x200002cb
    5b4c:	00006131 	.word	0x00006131
    5b50:	00006bf3 	.word	0x00006bf3
    5b54:	00040003 	.word	0x00040003
    5b58:	00050003 	.word	0x00050003
    5b5c:	00060003 	.word	0x00060003
    5b60:	00070003 	.word	0x00070003
    5b64:	00061a80 	.word	0x00061a80
    5b68:	200002b8 	.word	0x200002b8
    5b6c:	42000800 	.word	0x42000800
    5b70:	00004f29 	.word	0x00004f29
    5b74:	200002d8 	.word	0x200002d8
    5b78:	200000f8 	.word	0x200000f8
    5b7c:	200002c8 	.word	0x200002c8
    5b80:	41004400 	.word	0x41004400

00005b84 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    5b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b86:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5b88:	2200      	movs	r2, #0
    5b8a:	4b0d      	ldr	r3, [pc, #52]	; (5bc0 <sd_mmc_spi_select_device+0x3c>)
    5b8c:	701a      	strb	r2, [r3, #0]
    5b8e:	000c      	movs	r4, r1
    5b90:	4b0c      	ldr	r3, [pc, #48]	; (5bc4 <sd_mmc_spi_select_device+0x40>)
    5b92:	4299      	cmp	r1, r3
    5b94:	d900      	bls.n	5b98 <sd_mmc_spi_select_device+0x14>
    5b96:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5b98:	4d0b      	ldr	r5, [pc, #44]	; (5bc8 <sd_mmc_spi_select_device+0x44>)
    5b9a:	4e0c      	ldr	r6, [pc, #48]	; (5bcc <sd_mmc_spi_select_device+0x48>)
    5b9c:	e001      	b.n	5ba2 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    5b9e:	08e3      	lsrs	r3, r4, #3
    5ba0:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5ba2:	0021      	movs	r1, r4
    5ba4:	0028      	movs	r0, r5
    5ba6:	47b0      	blx	r6
    5ba8:	2817      	cmp	r0, #23
    5baa:	d0f8      	beq.n	5b9e <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    5bac:	0079      	lsls	r1, r7, #1
    5bae:	19cf      	adds	r7, r1, r7
    5bb0:	4907      	ldr	r1, [pc, #28]	; (5bd0 <sd_mmc_spi_select_device+0x4c>)
    5bb2:	19c9      	adds	r1, r1, r7
    5bb4:	2201      	movs	r2, #1
    5bb6:	4804      	ldr	r0, [pc, #16]	; (5bc8 <sd_mmc_spi_select_device+0x44>)
    5bb8:	4b06      	ldr	r3, [pc, #24]	; (5bd4 <sd_mmc_spi_select_device+0x50>)
    5bba:	4798      	blx	r3
}
    5bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bbe:	46c0      	nop			; (mov r8, r8)
    5bc0:	200002cb 	.word	0x200002cb
    5bc4:	003d0900 	.word	0x003d0900
    5bc8:	200002b8 	.word	0x200002b8
    5bcc:	00004ea5 	.word	0x00004ea5
    5bd0:	200002c8 	.word	0x200002c8
    5bd4:	00005375 	.word	0x00005375

00005bd8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    5bd8:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5bda:	2200      	movs	r2, #0
    5bdc:	4b04      	ldr	r3, [pc, #16]	; (5bf0 <sd_mmc_spi_deselect_device+0x18>)
    5bde:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    5be0:	0041      	lsls	r1, r0, #1
    5be2:	1808      	adds	r0, r1, r0
    5be4:	4903      	ldr	r1, [pc, #12]	; (5bf4 <sd_mmc_spi_deselect_device+0x1c>)
    5be6:	1809      	adds	r1, r1, r0
    5be8:	4803      	ldr	r0, [pc, #12]	; (5bf8 <sd_mmc_spi_deselect_device+0x20>)
    5bea:	4b04      	ldr	r3, [pc, #16]	; (5bfc <sd_mmc_spi_deselect_device+0x24>)
    5bec:	4798      	blx	r3
}
    5bee:	bd10      	pop	{r4, pc}
    5bf0:	200002cb 	.word	0x200002cb
    5bf4:	200002c8 	.word	0x200002c8
    5bf8:	200002b8 	.word	0x200002b8
    5bfc:	00005375 	.word	0x00005375

00005c00 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    5c00:	b570      	push	{r4, r5, r6, lr}
    5c02:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    5c04:	22ff      	movs	r2, #255	; 0xff
    5c06:	466b      	mov	r3, sp
    5c08:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5c0a:	2200      	movs	r2, #0
    5c0c:	4b07      	ldr	r3, [pc, #28]	; (5c2c <sd_mmc_spi_send_clock+0x2c>)
    5c0e:	701a      	strb	r2, [r3, #0]
    5c10:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    5c12:	4e07      	ldr	r6, [pc, #28]	; (5c30 <sd_mmc_spi_send_clock+0x30>)
    5c14:	4d07      	ldr	r5, [pc, #28]	; (5c34 <sd_mmc_spi_send_clock+0x34>)
    5c16:	2201      	movs	r2, #1
    5c18:	466b      	mov	r3, sp
    5c1a:	1dd9      	adds	r1, r3, #7
    5c1c:	0030      	movs	r0, r6
    5c1e:	47a8      	blx	r5
    5c20:	3c01      	subs	r4, #1
    5c22:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    5c24:	2c00      	cmp	r4, #0
    5c26:	d1f6      	bne.n	5c16 <sd_mmc_spi_send_clock+0x16>
	}
}
    5c28:	b002      	add	sp, #8
    5c2a:	bd70      	pop	{r4, r5, r6, pc}
    5c2c:	200002cb 	.word	0x200002cb
    5c30:	200002b8 	.word	0x200002b8
    5c34:	00005469 	.word	0x00005469

00005c38 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    5c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c3a:	46c6      	mov	lr, r8
    5c3c:	b500      	push	{lr}
    5c3e:	b086      	sub	sp, #24
    5c40:	4680      	mov	r8, r0
    5c42:	9200      	str	r2, [sp, #0]
    5c44:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    5c46:	22ff      	movs	r2, #255	; 0xff
    5c48:	230f      	movs	r3, #15
    5c4a:	a802      	add	r0, sp, #8
    5c4c:	4684      	mov	ip, r0
    5c4e:	4463      	add	r3, ip
    5c50:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5c52:	2200      	movs	r2, #0
    5c54:	4b53      	ldr	r3, [pc, #332]	; (5da4 <sd_mmc_spi_adtc_start+0x16c>)
    5c56:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    5c58:	ab04      	add	r3, sp, #16
    5c5a:	323f      	adds	r2, #63	; 0x3f
    5c5c:	4640      	mov	r0, r8
    5c5e:	4002      	ands	r2, r0
    5c60:	2040      	movs	r0, #64	; 0x40
    5c62:	4302      	orrs	r2, r0
    5c64:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    5c66:	0e0a      	lsrs	r2, r1, #24
    5c68:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    5c6a:	0c0a      	lsrs	r2, r1, #16
    5c6c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    5c6e:	0a0a      	lsrs	r2, r1, #8
    5c70:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    5c72:	7119      	strb	r1, [r3, #4]
    5c74:	2700      	movs	r7, #0
	crc = 0;
    5c76:	2300      	movs	r3, #0
		value = *buf++;
    5c78:	a904      	add	r1, sp, #16
    5c7a:	2208      	movs	r2, #8
				crc ^= 0x09;
    5c7c:	2409      	movs	r4, #9
    5c7e:	e011      	b.n	5ca4 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    5c80:	0076      	lsls	r6, r6, #1
    5c82:	b2f6      	uxtb	r6, r6
    5c84:	3801      	subs	r0, #1
    5c86:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    5c88:	2800      	cmp	r0, #0
    5c8a:	d008      	beq.n	5c9e <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    5c8c:	005b      	lsls	r3, r3, #1
    5c8e:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    5c90:	001d      	movs	r5, r3
    5c92:	4075      	eors	r5, r6
    5c94:	062d      	lsls	r5, r5, #24
    5c96:	d5f3      	bpl.n	5c80 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    5c98:	4063      	eors	r3, r4
    5c9a:	b2db      	uxtb	r3, r3
    5c9c:	e7f0      	b.n	5c80 <sd_mmc_spi_adtc_start+0x48>
    5c9e:	3701      	adds	r7, #1
	while (size--) {
    5ca0:	2f05      	cmp	r7, #5
    5ca2:	d002      	beq.n	5caa <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    5ca4:	5c7e      	ldrb	r6, [r7, r1]
    5ca6:	0010      	movs	r0, r2
    5ca8:	e7f0      	b.n	5c8c <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    5caa:	005b      	lsls	r3, r3, #1
    5cac:	2201      	movs	r2, #1
    5cae:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    5cb0:	ac04      	add	r4, sp, #16
    5cb2:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    5cb4:	4e3c      	ldr	r6, [pc, #240]	; (5da8 <sd_mmc_spi_adtc_start+0x170>)
    5cb6:	2201      	movs	r2, #1
    5cb8:	210f      	movs	r1, #15
    5cba:	ab02      	add	r3, sp, #8
    5cbc:	469c      	mov	ip, r3
    5cbe:	4461      	add	r1, ip
    5cc0:	0030      	movs	r0, r6
    5cc2:	4f3a      	ldr	r7, [pc, #232]	; (5dac <sd_mmc_spi_adtc_start+0x174>)
    5cc4:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    5cc6:	2206      	movs	r2, #6
    5cc8:	0021      	movs	r1, r4
    5cca:	0030      	movs	r0, r6
    5ccc:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    5cce:	ab02      	add	r3, sp, #8
    5cd0:	1dd9      	adds	r1, r3, #7
    5cd2:	23ff      	movs	r3, #255	; 0xff
    5cd4:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5cd6:	2201      	movs	r2, #1
    5cd8:	0030      	movs	r0, r6
    5cda:	4e35      	ldr	r6, [pc, #212]	; (5db0 <sd_mmc_spi_adtc_start+0x178>)
    5cdc:	47b0      	blx	r6
    5cde:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5ce0:	ab02      	add	r3, sp, #8
    5ce2:	1dde      	adds	r6, r3, #7
    5ce4:	4f30      	ldr	r7, [pc, #192]	; (5da8 <sd_mmc_spi_adtc_start+0x170>)
    5ce6:	4d32      	ldr	r5, [pc, #200]	; (5db0 <sd_mmc_spi_adtc_start+0x178>)
    5ce8:	23ff      	movs	r3, #255	; 0xff
    5cea:	2201      	movs	r2, #1
    5cec:	0031      	movs	r1, r6
    5cee:	0038      	movs	r0, r7
    5cf0:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    5cf2:	7833      	ldrb	r3, [r6, #0]
    5cf4:	b25a      	sxtb	r2, r3
    5cf6:	2a00      	cmp	r2, #0
    5cf8:	da0b      	bge.n	5d12 <sd_mmc_spi_adtc_start+0xda>
    5cfa:	3c01      	subs	r4, #1
    5cfc:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    5cfe:	2c00      	cmp	r4, #0
    5d00:	d1f2      	bne.n	5ce8 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    5d02:	2202      	movs	r2, #2
    5d04:	4b27      	ldr	r3, [pc, #156]	; (5da4 <sd_mmc_spi_adtc_start+0x16c>)
    5d06:	701a      	strb	r2, [r3, #0]
			return false;
    5d08:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    5d0a:	b006      	add	sp, #24
    5d0c:	bc04      	pop	{r2}
    5d0e:	4690      	mov	r8, r2
    5d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    5d12:	4a28      	ldr	r2, [pc, #160]	; (5db4 <sd_mmc_spi_adtc_start+0x17c>)
    5d14:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    5d16:	071a      	lsls	r2, r3, #28
    5d18:	d41a      	bmi.n	5d50 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    5d1a:	075a      	lsls	r2, r3, #29
    5d1c:	d41d      	bmi.n	5d5a <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    5d1e:	2201      	movs	r2, #1
    5d20:	4393      	bics	r3, r2
    5d22:	d11f      	bne.n	5d64 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    5d24:	4643      	mov	r3, r8
    5d26:	049b      	lsls	r3, r3, #18
    5d28:	d420      	bmi.n	5d6c <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    5d2a:	4643      	mov	r3, r8
    5d2c:	059b      	lsls	r3, r3, #22
    5d2e:	d425      	bmi.n	5d7c <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    5d30:	4643      	mov	r3, r8
    5d32:	055b      	lsls	r3, r3, #21
    5d34:	d42b      	bmi.n	5d8e <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    5d36:	4b20      	ldr	r3, [pc, #128]	; (5db8 <sd_mmc_spi_adtc_start+0x180>)
    5d38:	466a      	mov	r2, sp
    5d3a:	8812      	ldrh	r2, [r2, #0]
    5d3c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    5d3e:	4b1f      	ldr	r3, [pc, #124]	; (5dbc <sd_mmc_spi_adtc_start+0x184>)
    5d40:	466a      	mov	r2, sp
    5d42:	8892      	ldrh	r2, [r2, #4]
    5d44:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    5d46:	2200      	movs	r2, #0
    5d48:	4b1d      	ldr	r3, [pc, #116]	; (5dc0 <sd_mmc_spi_adtc_start+0x188>)
    5d4a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    5d4c:	2001      	movs	r0, #1
    5d4e:	e7dc      	b.n	5d0a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    5d50:	2206      	movs	r2, #6
    5d52:	4b14      	ldr	r3, [pc, #80]	; (5da4 <sd_mmc_spi_adtc_start+0x16c>)
    5d54:	701a      	strb	r2, [r3, #0]
		return false;
    5d56:	2000      	movs	r0, #0
    5d58:	e7d7      	b.n	5d0a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    5d5a:	2209      	movs	r2, #9
    5d5c:	4b11      	ldr	r3, [pc, #68]	; (5da4 <sd_mmc_spi_adtc_start+0x16c>)
    5d5e:	701a      	strb	r2, [r3, #0]
		return false;
    5d60:	2000      	movs	r0, #0
    5d62:	e7d2      	b.n	5d0a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5d64:	4b0f      	ldr	r3, [pc, #60]	; (5da4 <sd_mmc_spi_adtc_start+0x16c>)
    5d66:	701a      	strb	r2, [r3, #0]
		return false;
    5d68:	2000      	movs	r0, #0
    5d6a:	e7ce      	b.n	5d0a <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    5d6c:	4b15      	ldr	r3, [pc, #84]	; (5dc4 <sd_mmc_spi_adtc_start+0x18c>)
    5d6e:	4798      	blx	r3
    5d70:	2800      	cmp	r0, #0
    5d72:	d1da      	bne.n	5d2a <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    5d74:	2203      	movs	r2, #3
    5d76:	4b0b      	ldr	r3, [pc, #44]	; (5da4 <sd_mmc_spi_adtc_start+0x16c>)
    5d78:	701a      	strb	r2, [r3, #0]
			return false;
    5d7a:	e7c6      	b.n	5d0a <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    5d7c:	490d      	ldr	r1, [pc, #52]	; (5db4 <sd_mmc_spi_adtc_start+0x17c>)
    5d7e:	2300      	movs	r3, #0
    5d80:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    5d82:	33ff      	adds	r3, #255	; 0xff
    5d84:	2201      	movs	r2, #1
    5d86:	4808      	ldr	r0, [pc, #32]	; (5da8 <sd_mmc_spi_adtc_start+0x170>)
    5d88:	4e09      	ldr	r6, [pc, #36]	; (5db0 <sd_mmc_spi_adtc_start+0x178>)
    5d8a:	47b0      	blx	r6
    5d8c:	e7d0      	b.n	5d30 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    5d8e:	4e09      	ldr	r6, [pc, #36]	; (5db4 <sd_mmc_spi_adtc_start+0x17c>)
    5d90:	23ff      	movs	r3, #255	; 0xff
    5d92:	2204      	movs	r2, #4
    5d94:	0031      	movs	r1, r6
    5d96:	4804      	ldr	r0, [pc, #16]	; (5da8 <sd_mmc_spi_adtc_start+0x170>)
    5d98:	4f05      	ldr	r7, [pc, #20]	; (5db0 <sd_mmc_spi_adtc_start+0x178>)
    5d9a:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    5d9c:	6833      	ldr	r3, [r6, #0]
    5d9e:	ba1b      	rev	r3, r3
    5da0:	6033      	str	r3, [r6, #0]
    5da2:	e7c8      	b.n	5d36 <sd_mmc_spi_adtc_start+0xfe>
    5da4:	200002cb 	.word	0x200002cb
    5da8:	200002b8 	.word	0x200002b8
    5dac:	00005469 	.word	0x00005469
    5db0:	0000525d 	.word	0x0000525d
    5db4:	200002d0 	.word	0x200002d0
    5db8:	200002c4 	.word	0x200002c4
    5dbc:	200002cc 	.word	0x200002cc
    5dc0:	200002d4 	.word	0x200002d4
    5dc4:	000058d9 	.word	0x000058d9

00005dc8 <sd_mmc_spi_send_cmd>:
{
    5dc8:	b510      	push	{r4, lr}
    5dca:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    5dcc:	2300      	movs	r3, #0
    5dce:	9300      	str	r3, [sp, #0]
    5dd0:	2200      	movs	r2, #0
    5dd2:	4c02      	ldr	r4, [pc, #8]	; (5ddc <sd_mmc_spi_send_cmd+0x14>)
    5dd4:	47a0      	blx	r4
}
    5dd6:	b002      	add	sp, #8
    5dd8:	bd10      	pop	{r4, pc}
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	00005c39 	.word	0x00005c39

00005de0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    5de0:	4b01      	ldr	r3, [pc, #4]	; (5de8 <sd_mmc_spi_get_response+0x8>)
    5de2:	6818      	ldr	r0, [r3, #0]
}
    5de4:	4770      	bx	lr
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	200002d0 	.word	0x200002d0

00005dec <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    5dec:	b510      	push	{r4, lr}
    5dee:	b084      	sub	sp, #16
    5df0:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5df2:	2200      	movs	r2, #0
    5df4:	4b14      	ldr	r3, [pc, #80]	; (5e48 <sd_mmc_spi_read_word+0x5c>)
    5df6:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5df8:	4b14      	ldr	r3, [pc, #80]	; (5e4c <sd_mmc_spi_read_word+0x60>)
    5dfa:	8819      	ldrh	r1, [r3, #0]
    5dfc:	4b14      	ldr	r3, [pc, #80]	; (5e50 <sd_mmc_spi_read_word+0x64>)
    5dfe:	6818      	ldr	r0, [r3, #0]
    5e00:	4b14      	ldr	r3, [pc, #80]	; (5e54 <sd_mmc_spi_read_word+0x68>)
    5e02:	4798      	blx	r3
    5e04:	2900      	cmp	r1, #0
    5e06:	d103      	bne.n	5e10 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    5e08:	4b13      	ldr	r3, [pc, #76]	; (5e58 <sd_mmc_spi_read_word+0x6c>)
    5e0a:	4798      	blx	r3
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d010      	beq.n	5e32 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    5e10:	23ff      	movs	r3, #255	; 0xff
    5e12:	2204      	movs	r2, #4
    5e14:	a901      	add	r1, sp, #4
    5e16:	4811      	ldr	r0, [pc, #68]	; (5e5c <sd_mmc_spi_read_word+0x70>)
    5e18:	4c11      	ldr	r4, [pc, #68]	; (5e60 <sd_mmc_spi_read_word+0x74>)
    5e1a:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    5e1c:	4b0c      	ldr	r3, [pc, #48]	; (5e50 <sd_mmc_spi_read_word+0x64>)
    5e1e:	681a      	ldr	r2, [r3, #0]
    5e20:	1d10      	adds	r0, r2, #4
    5e22:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5e24:	4b09      	ldr	r3, [pc, #36]	; (5e4c <sd_mmc_spi_read_word+0x60>)
    5e26:	8819      	ldrh	r1, [r3, #0]
    5e28:	4b0a      	ldr	r3, [pc, #40]	; (5e54 <sd_mmc_spi_read_word+0x68>)
    5e2a:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    5e2c:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5e2e:	2900      	cmp	r1, #0
    5e30:	d001      	beq.n	5e36 <sd_mmc_spi_read_word+0x4a>
}
    5e32:	b004      	add	sp, #16
    5e34:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5e36:	23ff      	movs	r3, #255	; 0xff
    5e38:	2202      	movs	r2, #2
    5e3a:	a903      	add	r1, sp, #12
    5e3c:	4807      	ldr	r0, [pc, #28]	; (5e5c <sd_mmc_spi_read_word+0x70>)
    5e3e:	4c08      	ldr	r4, [pc, #32]	; (5e60 <sd_mmc_spi_read_word+0x74>)
    5e40:	47a0      	blx	r4
	return true;
    5e42:	2001      	movs	r0, #1
    5e44:	e7f5      	b.n	5e32 <sd_mmc_spi_read_word+0x46>
    5e46:	46c0      	nop			; (mov r8, r8)
    5e48:	200002cb 	.word	0x200002cb
    5e4c:	200002c4 	.word	0x200002c4
    5e50:	200002d4 	.word	0x200002d4
    5e54:	00006711 	.word	0x00006711
    5e58:	000059b5 	.word	0x000059b5
    5e5c:	200002b8 	.word	0x200002b8
    5e60:	0000525d 	.word	0x0000525d

00005e64 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    5e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e66:	46de      	mov	lr, fp
    5e68:	4657      	mov	r7, sl
    5e6a:	4646      	mov	r6, r8
    5e6c:	b5c0      	push	{r6, r7, lr}
    5e6e:	b082      	sub	sp, #8
    5e70:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5e72:	2200      	movs	r2, #0
    5e74:	4b17      	ldr	r3, [pc, #92]	; (5ed4 <sd_mmc_spi_start_read_blocks+0x70>)
    5e76:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    5e78:	1e4c      	subs	r4, r1, #1
    5e7a:	b2a4      	uxth	r4, r4
    5e7c:	2900      	cmp	r1, #0
    5e7e:	d026      	beq.n	5ece <sd_mmc_spi_start_read_blocks+0x6a>
    5e80:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    5e82:	4b15      	ldr	r3, [pc, #84]	; (5ed8 <sd_mmc_spi_start_read_blocks+0x74>)
    5e84:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5e86:	4f15      	ldr	r7, [pc, #84]	; (5edc <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    5e88:	47d0      	blx	sl
    5e8a:	4680      	mov	r8, r0
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d017      	beq.n	5ec0 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5e90:	883a      	ldrh	r2, [r7, #0]
    5e92:	465b      	mov	r3, fp
    5e94:	1999      	adds	r1, r3, r6
    5e96:	23ff      	movs	r3, #255	; 0xff
    5e98:	4811      	ldr	r0, [pc, #68]	; (5ee0 <sd_mmc_spi_start_read_blocks+0x7c>)
    5e9a:	4d12      	ldr	r5, [pc, #72]	; (5ee4 <sd_mmc_spi_start_read_blocks+0x80>)
    5e9c:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    5e9e:	883b      	ldrh	r3, [r7, #0]
    5ea0:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5ea2:	4a11      	ldr	r2, [pc, #68]	; (5ee8 <sd_mmc_spi_start_read_blocks+0x84>)
    5ea4:	6811      	ldr	r1, [r2, #0]
    5ea6:	468c      	mov	ip, r1
    5ea8:	4463      	add	r3, ip
    5eaa:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5eac:	23ff      	movs	r3, #255	; 0xff
    5eae:	2202      	movs	r2, #2
    5eb0:	a901      	add	r1, sp, #4
    5eb2:	480b      	ldr	r0, [pc, #44]	; (5ee0 <sd_mmc_spi_start_read_blocks+0x7c>)
    5eb4:	47a8      	blx	r5
	while (nb_block--) {
    5eb6:	3c01      	subs	r4, #1
    5eb8:	b2a4      	uxth	r4, r4
    5eba:	4b0c      	ldr	r3, [pc, #48]	; (5eec <sd_mmc_spi_start_read_blocks+0x88>)
    5ebc:	429c      	cmp	r4, r3
    5ebe:	d1e3      	bne.n	5e88 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    5ec0:	4640      	mov	r0, r8
    5ec2:	b002      	add	sp, #8
    5ec4:	bc1c      	pop	{r2, r3, r4}
    5ec6:	4690      	mov	r8, r2
    5ec8:	469a      	mov	sl, r3
    5eca:	46a3      	mov	fp, r4
    5ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    5ece:	2301      	movs	r3, #1
    5ed0:	4698      	mov	r8, r3
    5ed2:	e7f5      	b.n	5ec0 <sd_mmc_spi_start_read_blocks+0x5c>
    5ed4:	200002cb 	.word	0x200002cb
    5ed8:	000059b5 	.word	0x000059b5
    5edc:	200002c4 	.word	0x200002c4
    5ee0:	200002b8 	.word	0x200002b8
    5ee4:	0000525d 	.word	0x0000525d
    5ee8:	200002d4 	.word	0x200002d4
    5eec:	0000ffff 	.word	0x0000ffff

00005ef0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    5ef0:	2001      	movs	r0, #1
    5ef2:	4770      	bx	lr

00005ef4 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    5ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef6:	46c6      	mov	lr, r8
    5ef8:	b500      	push	{lr}
    5efa:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5efc:	2200      	movs	r2, #0
    5efe:	4b15      	ldr	r3, [pc, #84]	; (5f54 <sd_mmc_spi_start_write_blocks+0x60>)
    5f00:	701a      	strb	r2, [r3, #0]
	pos = 0;
    5f02:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    5f04:	4f14      	ldr	r7, [pc, #80]	; (5f58 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5f06:	4e15      	ldr	r6, [pc, #84]	; (5f5c <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    5f08:	e000      	b.n	5f0c <sd_mmc_spi_start_write_blocks+0x18>
{
    5f0a:	0021      	movs	r1, r4
	while (nb_block--) {
    5f0c:	1e4c      	subs	r4, r1, #1
    5f0e:	b2a4      	uxth	r4, r4
    5f10:	2900      	cmp	r1, #0
    5f12:	d01b      	beq.n	5f4c <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    5f14:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5f16:	8832      	ldrh	r2, [r6, #0]
    5f18:	4643      	mov	r3, r8
    5f1a:	1959      	adds	r1, r3, r5
    5f1c:	4810      	ldr	r0, [pc, #64]	; (5f60 <sd_mmc_spi_start_write_blocks+0x6c>)
    5f1e:	4b11      	ldr	r3, [pc, #68]	; (5f64 <sd_mmc_spi_start_write_blocks+0x70>)
    5f20:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    5f22:	8833      	ldrh	r3, [r6, #0]
    5f24:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5f26:	4a10      	ldr	r2, [pc, #64]	; (5f68 <sd_mmc_spi_start_write_blocks+0x74>)
    5f28:	6811      	ldr	r1, [r2, #0]
    5f2a:	468c      	mov	ip, r1
    5f2c:	4463      	add	r3, ip
    5f2e:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    5f30:	4b0e      	ldr	r3, [pc, #56]	; (5f6c <sd_mmc_spi_start_write_blocks+0x78>)
    5f32:	4798      	blx	r3
    5f34:	2800      	cmp	r0, #0
    5f36:	d00a      	beq.n	5f4e <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    5f38:	2c00      	cmp	r4, #0
    5f3a:	d0e6      	beq.n	5f0a <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    5f3c:	4b0c      	ldr	r3, [pc, #48]	; (5f70 <sd_mmc_spi_start_write_blocks+0x7c>)
    5f3e:	4798      	blx	r3
    5f40:	2800      	cmp	r0, #0
    5f42:	d1e2      	bne.n	5f0a <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5f44:	2205      	movs	r2, #5
    5f46:	4b03      	ldr	r3, [pc, #12]	; (5f54 <sd_mmc_spi_start_write_blocks+0x60>)
    5f48:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    5f4a:	e000      	b.n	5f4e <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    5f4c:	2001      	movs	r0, #1
}
    5f4e:	bc04      	pop	{r2}
    5f50:	4690      	mov	r8, r2
    5f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f54:	200002cb 	.word	0x200002cb
    5f58:	00005891 	.word	0x00005891
    5f5c:	200002c4 	.word	0x200002c4
    5f60:	200002b8 	.word	0x200002b8
    5f64:	00005469 	.word	0x00005469
    5f68:	200002d4 	.word	0x200002d4
    5f6c:	00005a21 	.word	0x00005a21
    5f70:	000058d9 	.word	0x000058d9

00005f74 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    5f74:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    5f76:	4b05      	ldr	r3, [pc, #20]	; (5f8c <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    5f78:	4798      	blx	r3
    5f7a:	2800      	cmp	r0, #0
    5f7c:	d103      	bne.n	5f86 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5f7e:	2205      	movs	r2, #5
    5f80:	4b03      	ldr	r3, [pc, #12]	; (5f90 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    5f82:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    5f84:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    5f86:	4b03      	ldr	r3, [pc, #12]	; (5f94 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    5f88:	4798      	blx	r3
    5f8a:	e7fb      	b.n	5f84 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    5f8c:	000058d9 	.word	0x000058d9
    5f90:	200002cb 	.word	0x200002cb
    5f94:	0000593d 	.word	0x0000593d

00005f98 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    5f98:	2001      	movs	r0, #1
    5f9a:	4770      	bx	lr

00005f9c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    5f9c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    5f9e:	2301      	movs	r3, #1
    5fa0:	2800      	cmp	r0, #0
    5fa2:	d001      	beq.n	5fa8 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    5fa4:	0018      	movs	r0, r3
    5fa6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    5fa8:	4b01      	ldr	r3, [pc, #4]	; (5fb0 <mem_test_unit_ready+0x14>)
    5faa:	4798      	blx	r3
    5fac:	0003      	movs	r3, r0
    5fae:	e7f9      	b.n	5fa4 <mem_test_unit_ready+0x8>
    5fb0:	000056c1 	.word	0x000056c1

00005fb4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    5fb4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    5fb6:	2301      	movs	r3, #1
    5fb8:	2800      	cmp	r0, #0
    5fba:	d001      	beq.n	5fc0 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    5fbc:	0018      	movs	r0, r3
    5fbe:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    5fc0:	0008      	movs	r0, r1
    5fc2:	4b02      	ldr	r3, [pc, #8]	; (5fcc <mem_read_capacity+0x18>)
    5fc4:	4798      	blx	r3
    5fc6:	0003      	movs	r3, r0
    5fc8:	e7f8      	b.n	5fbc <mem_read_capacity+0x8>
    5fca:	46c0      	nop			; (mov r8, r8)
    5fcc:	000056f1 	.word	0x000056f1

00005fd0 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    5fd0:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    5fd2:	2000      	movs	r0, #0
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d101      	bne.n	5fdc <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    5fd8:	3001      	adds	r0, #1
    5fda:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    5fdc:	4770      	bx	lr
	...

00005fe0 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    5fe0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    5fe2:	2301      	movs	r3, #1
    5fe4:	2800      	cmp	r0, #0
    5fe6:	d001      	beq.n	5fec <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    5fe8:	0018      	movs	r0, r3
    5fea:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    5fec:	4b01      	ldr	r3, [pc, #4]	; (5ff4 <mem_wr_protect+0x14>)
    5fee:	4798      	blx	r3
    5ff0:	0003      	movs	r3, r0
    5ff2:	e7f9      	b.n	5fe8 <mem_wr_protect+0x8>
    5ff4:	00005701 	.word	0x00005701

00005ff8 <mem_removal>:


bool mem_removal(U8 lun)
{
    5ff8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    5ffa:	2301      	movs	r3, #1
    5ffc:	2800      	cmp	r0, #0
    5ffe:	d001      	beq.n	6004 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    6000:	0018      	movs	r0, r3
    6002:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    6004:	4b01      	ldr	r3, [pc, #4]	; (600c <mem_removal+0x14>)
    6006:	4798      	blx	r3
    6008:	0003      	movs	r3, r0
    600a:	e7f9      	b.n	6000 <mem_removal+0x8>
    600c:	00005711 	.word	0x00005711

00006010 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6010:	2800      	cmp	r0, #0
    6012:	d101      	bne.n	6018 <mem_name+0x8>
    6014:	4801      	ldr	r0, [pc, #4]	; (601c <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    6016:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6018:	2000      	movs	r0, #0
    601a:	e7fc      	b.n	6016 <mem_name+0x6>
    601c:	0000767c 	.word	0x0000767c

00006020 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    6020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6022:	0005      	movs	r5, r0
    6024:	000e      	movs	r6, r1
    6026:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    6028:	4b07      	ldr	r3, [pc, #28]	; (6048 <memory_2_usb+0x28>)
    602a:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    602c:	2401      	movs	r4, #1
    602e:	2d00      	cmp	r5, #0
    6030:	d003      	beq.n	603a <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    6032:	4b06      	ldr	r3, [pc, #24]	; (604c <memory_2_usb+0x2c>)
    6034:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    6036:	0020      	movs	r0, r4
    6038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    603a:	0039      	movs	r1, r7
    603c:	0030      	movs	r0, r6
    603e:	4b04      	ldr	r3, [pc, #16]	; (6050 <memory_2_usb+0x30>)
    6040:	4798      	blx	r3
    6042:	0004      	movs	r4, r0
    6044:	e7f5      	b.n	6032 <memory_2_usb+0x12>
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	00003ba9 	.word	0x00003ba9
    604c:	00003bab 	.word	0x00003bab
    6050:	000057c5 	.word	0x000057c5

00006054 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    6054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6056:	0005      	movs	r5, r0
    6058:	000e      	movs	r6, r1
    605a:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    605c:	4b07      	ldr	r3, [pc, #28]	; (607c <usb_2_memory+0x28>)
    605e:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    6060:	2401      	movs	r4, #1
    6062:	2d00      	cmp	r5, #0
    6064:	d003      	beq.n	606e <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    6066:	4b06      	ldr	r3, [pc, #24]	; (6080 <usb_2_memory+0x2c>)
    6068:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    606a:	0020      	movs	r0, r4
    606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    606e:	0039      	movs	r1, r7
    6070:	0030      	movs	r0, r6
    6072:	4b04      	ldr	r3, [pc, #16]	; (6084 <usb_2_memory+0x30>)
    6074:	4798      	blx	r3
    6076:	0004      	movs	r4, r0
    6078:	e7f5      	b.n	6066 <usb_2_memory+0x12>
    607a:	46c0      	nop			; (mov r8, r8)
    607c:	00003bad 	.word	0x00003bad
    6080:	00003baf 	.word	0x00003baf
    6084:	0000587d 	.word	0x0000587d

00006088 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6088:	4b0c      	ldr	r3, [pc, #48]	; (60bc <cpu_irq_enter_critical+0x34>)
    608a:	681b      	ldr	r3, [r3, #0]
    608c:	2b00      	cmp	r3, #0
    608e:	d106      	bne.n	609e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6090:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6094:	2b00      	cmp	r3, #0
    6096:	d007      	beq.n	60a8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6098:	2200      	movs	r2, #0
    609a:	4b09      	ldr	r3, [pc, #36]	; (60c0 <cpu_irq_enter_critical+0x38>)
    609c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    609e:	4a07      	ldr	r2, [pc, #28]	; (60bc <cpu_irq_enter_critical+0x34>)
    60a0:	6813      	ldr	r3, [r2, #0]
    60a2:	3301      	adds	r3, #1
    60a4:	6013      	str	r3, [r2, #0]
}
    60a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    60a8:	b672      	cpsid	i
    60aa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    60ae:	2200      	movs	r2, #0
    60b0:	4b04      	ldr	r3, [pc, #16]	; (60c4 <cpu_irq_enter_critical+0x3c>)
    60b2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    60b4:	3201      	adds	r2, #1
    60b6:	4b02      	ldr	r3, [pc, #8]	; (60c0 <cpu_irq_enter_critical+0x38>)
    60b8:	701a      	strb	r2, [r3, #0]
    60ba:	e7f0      	b.n	609e <cpu_irq_enter_critical+0x16>
    60bc:	200002dc 	.word	0x200002dc
    60c0:	200002e0 	.word	0x200002e0
    60c4:	200000f9 	.word	0x200000f9

000060c8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    60c8:	4b08      	ldr	r3, [pc, #32]	; (60ec <cpu_irq_leave_critical+0x24>)
    60ca:	681a      	ldr	r2, [r3, #0]
    60cc:	3a01      	subs	r2, #1
    60ce:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    60d0:	681b      	ldr	r3, [r3, #0]
    60d2:	2b00      	cmp	r3, #0
    60d4:	d109      	bne.n	60ea <cpu_irq_leave_critical+0x22>
    60d6:	4b06      	ldr	r3, [pc, #24]	; (60f0 <cpu_irq_leave_critical+0x28>)
    60d8:	781b      	ldrb	r3, [r3, #0]
    60da:	2b00      	cmp	r3, #0
    60dc:	d005      	beq.n	60ea <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    60de:	2201      	movs	r2, #1
    60e0:	4b04      	ldr	r3, [pc, #16]	; (60f4 <cpu_irq_leave_critical+0x2c>)
    60e2:	701a      	strb	r2, [r3, #0]
    60e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    60e8:	b662      	cpsie	i
	}
}
    60ea:	4770      	bx	lr
    60ec:	200002dc 	.word	0x200002dc
    60f0:	200002e0 	.word	0x200002e0
    60f4:	200000f9 	.word	0x200000f9

000060f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    60f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60fa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    60fc:	ac01      	add	r4, sp, #4
    60fe:	2501      	movs	r5, #1
    6100:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6102:	2700      	movs	r7, #0
    6104:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6106:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6108:	0021      	movs	r1, r4
    610a:	203e      	movs	r0, #62	; 0x3e
    610c:	4e06      	ldr	r6, [pc, #24]	; (6128 <system_board_init+0x30>)
    610e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6110:	2280      	movs	r2, #128	; 0x80
    6112:	05d2      	lsls	r2, r2, #23
    6114:	4b05      	ldr	r3, [pc, #20]	; (612c <system_board_init+0x34>)
    6116:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6118:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    611a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    611c:	0021      	movs	r1, r4
    611e:	200f      	movs	r0, #15
    6120:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    6122:	b003      	add	sp, #12
    6124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	00006131 	.word	0x00006131
    612c:	41004480 	.word	0x41004480

00006130 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6130:	b500      	push	{lr}
    6132:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6134:	ab01      	add	r3, sp, #4
    6136:	2280      	movs	r2, #128	; 0x80
    6138:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    613a:	780a      	ldrb	r2, [r1, #0]
    613c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    613e:	784a      	ldrb	r2, [r1, #1]
    6140:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6142:	788a      	ldrb	r2, [r1, #2]
    6144:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6146:	0019      	movs	r1, r3
    6148:	4b01      	ldr	r3, [pc, #4]	; (6150 <port_pin_set_config+0x20>)
    614a:	4798      	blx	r3
}
    614c:	b003      	add	sp, #12
    614e:	bd00      	pop	{pc}
    6150:	00006485 	.word	0x00006485

00006154 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    6154:	4a06      	ldr	r2, [pc, #24]	; (6170 <system_gclk_init+0x1c>)
    6156:	6993      	ldr	r3, [r2, #24]
    6158:	2108      	movs	r1, #8
    615a:	430b      	orrs	r3, r1
    615c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    615e:	2201      	movs	r2, #1
    6160:	4b04      	ldr	r3, [pc, #16]	; (6174 <system_gclk_init+0x20>)
    6162:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6164:	0019      	movs	r1, r3
    6166:	780b      	ldrb	r3, [r1, #0]
    6168:	4213      	tst	r3, r2
    616a:	d1fc      	bne.n	6166 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    616c:	4770      	bx	lr
    616e:	46c0      	nop			; (mov r8, r8)
    6170:	40000400 	.word	0x40000400
    6174:	40000c00 	.word	0x40000c00

00006178 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6178:	b570      	push	{r4, r5, r6, lr}
    617a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    617c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    617e:	780d      	ldrb	r5, [r1, #0]
    6180:	022d      	lsls	r5, r5, #8
    6182:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6184:	784b      	ldrb	r3, [r1, #1]
    6186:	2b00      	cmp	r3, #0
    6188:	d002      	beq.n	6190 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    618a:	2380      	movs	r3, #128	; 0x80
    618c:	02db      	lsls	r3, r3, #11
    618e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6190:	7a4b      	ldrb	r3, [r1, #9]
    6192:	2b00      	cmp	r3, #0
    6194:	d002      	beq.n	619c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6196:	2380      	movs	r3, #128	; 0x80
    6198:	031b      	lsls	r3, r3, #12
    619a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    619c:	6848      	ldr	r0, [r1, #4]
    619e:	2801      	cmp	r0, #1
    61a0:	d910      	bls.n	61c4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    61a2:	1e43      	subs	r3, r0, #1
    61a4:	4218      	tst	r0, r3
    61a6:	d134      	bne.n	6212 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    61a8:	2802      	cmp	r0, #2
    61aa:	d930      	bls.n	620e <system_gclk_gen_set_config+0x96>
    61ac:	2302      	movs	r3, #2
    61ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    61b0:	3201      	adds	r2, #1
						mask <<= 1) {
    61b2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    61b4:	4298      	cmp	r0, r3
    61b6:	d8fb      	bhi.n	61b0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    61b8:	0212      	lsls	r2, r2, #8
    61ba:	4332      	orrs	r2, r6
    61bc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    61be:	2380      	movs	r3, #128	; 0x80
    61c0:	035b      	lsls	r3, r3, #13
    61c2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    61c4:	7a0b      	ldrb	r3, [r1, #8]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d002      	beq.n	61d0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    61ca:	2380      	movs	r3, #128	; 0x80
    61cc:	039b      	lsls	r3, r3, #14
    61ce:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    61d0:	4a13      	ldr	r2, [pc, #76]	; (6220 <system_gclk_gen_set_config+0xa8>)
    61d2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    61d4:	b25b      	sxtb	r3, r3
    61d6:	2b00      	cmp	r3, #0
    61d8:	dbfb      	blt.n	61d2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    61da:	4b12      	ldr	r3, [pc, #72]	; (6224 <system_gclk_gen_set_config+0xac>)
    61dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    61de:	4b12      	ldr	r3, [pc, #72]	; (6228 <system_gclk_gen_set_config+0xb0>)
    61e0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    61e2:	4a0f      	ldr	r2, [pc, #60]	; (6220 <system_gclk_gen_set_config+0xa8>)
    61e4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    61e6:	b25b      	sxtb	r3, r3
    61e8:	2b00      	cmp	r3, #0
    61ea:	dbfb      	blt.n	61e4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    61ec:	4b0c      	ldr	r3, [pc, #48]	; (6220 <system_gclk_gen_set_config+0xa8>)
    61ee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    61f0:	001a      	movs	r2, r3
    61f2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    61f4:	b25b      	sxtb	r3, r3
    61f6:	2b00      	cmp	r3, #0
    61f8:	dbfb      	blt.n	61f2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    61fa:	4a09      	ldr	r2, [pc, #36]	; (6220 <system_gclk_gen_set_config+0xa8>)
    61fc:	6853      	ldr	r3, [r2, #4]
    61fe:	2180      	movs	r1, #128	; 0x80
    6200:	0249      	lsls	r1, r1, #9
    6202:	400b      	ands	r3, r1
    6204:	431d      	orrs	r5, r3
    6206:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6208:	4b08      	ldr	r3, [pc, #32]	; (622c <system_gclk_gen_set_config+0xb4>)
    620a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    620c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    620e:	2200      	movs	r2, #0
    6210:	e7d2      	b.n	61b8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6212:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    6214:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6216:	2380      	movs	r3, #128	; 0x80
    6218:	029b      	lsls	r3, r3, #10
    621a:	431d      	orrs	r5, r3
    621c:	e7d2      	b.n	61c4 <system_gclk_gen_set_config+0x4c>
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	40000c00 	.word	0x40000c00
    6224:	00006089 	.word	0x00006089
    6228:	40000c08 	.word	0x40000c08
    622c:	000060c9 	.word	0x000060c9

00006230 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6230:	b510      	push	{r4, lr}
    6232:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6234:	4a0b      	ldr	r2, [pc, #44]	; (6264 <system_gclk_gen_enable+0x34>)
    6236:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6238:	b25b      	sxtb	r3, r3
    623a:	2b00      	cmp	r3, #0
    623c:	dbfb      	blt.n	6236 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    623e:	4b0a      	ldr	r3, [pc, #40]	; (6268 <system_gclk_gen_enable+0x38>)
    6240:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6242:	4b0a      	ldr	r3, [pc, #40]	; (626c <system_gclk_gen_enable+0x3c>)
    6244:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6246:	4a07      	ldr	r2, [pc, #28]	; (6264 <system_gclk_gen_enable+0x34>)
    6248:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    624a:	b25b      	sxtb	r3, r3
    624c:	2b00      	cmp	r3, #0
    624e:	dbfb      	blt.n	6248 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6250:	4a04      	ldr	r2, [pc, #16]	; (6264 <system_gclk_gen_enable+0x34>)
    6252:	6851      	ldr	r1, [r2, #4]
    6254:	2380      	movs	r3, #128	; 0x80
    6256:	025b      	lsls	r3, r3, #9
    6258:	430b      	orrs	r3, r1
    625a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    625c:	4b04      	ldr	r3, [pc, #16]	; (6270 <system_gclk_gen_enable+0x40>)
    625e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6260:	bd10      	pop	{r4, pc}
    6262:	46c0      	nop			; (mov r8, r8)
    6264:	40000c00 	.word	0x40000c00
    6268:	00006089 	.word	0x00006089
    626c:	40000c04 	.word	0x40000c04
    6270:	000060c9 	.word	0x000060c9

00006274 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6274:	b570      	push	{r4, r5, r6, lr}
    6276:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6278:	4a1a      	ldr	r2, [pc, #104]	; (62e4 <system_gclk_gen_get_hz+0x70>)
    627a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    627c:	b25b      	sxtb	r3, r3
    627e:	2b00      	cmp	r3, #0
    6280:	dbfb      	blt.n	627a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    6282:	4b19      	ldr	r3, [pc, #100]	; (62e8 <system_gclk_gen_get_hz+0x74>)
    6284:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6286:	4b19      	ldr	r3, [pc, #100]	; (62ec <system_gclk_gen_get_hz+0x78>)
    6288:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    628a:	4a16      	ldr	r2, [pc, #88]	; (62e4 <system_gclk_gen_get_hz+0x70>)
    628c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    628e:	b25b      	sxtb	r3, r3
    6290:	2b00      	cmp	r3, #0
    6292:	dbfb      	blt.n	628c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6294:	4e13      	ldr	r6, [pc, #76]	; (62e4 <system_gclk_gen_get_hz+0x70>)
    6296:	6870      	ldr	r0, [r6, #4]
    6298:	04c0      	lsls	r0, r0, #19
    629a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    629c:	4b14      	ldr	r3, [pc, #80]	; (62f0 <system_gclk_gen_get_hz+0x7c>)
    629e:	4798      	blx	r3
    62a0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    62a2:	4b12      	ldr	r3, [pc, #72]	; (62ec <system_gclk_gen_get_hz+0x78>)
    62a4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    62a6:	6876      	ldr	r6, [r6, #4]
    62a8:	02f6      	lsls	r6, r6, #11
    62aa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    62ac:	4b11      	ldr	r3, [pc, #68]	; (62f4 <system_gclk_gen_get_hz+0x80>)
    62ae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    62b0:	4a0c      	ldr	r2, [pc, #48]	; (62e4 <system_gclk_gen_get_hz+0x70>)
    62b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    62b4:	b25b      	sxtb	r3, r3
    62b6:	2b00      	cmp	r3, #0
    62b8:	dbfb      	blt.n	62b2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    62ba:	4b0a      	ldr	r3, [pc, #40]	; (62e4 <system_gclk_gen_get_hz+0x70>)
    62bc:	689c      	ldr	r4, [r3, #8]
    62be:	0224      	lsls	r4, r4, #8
    62c0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    62c2:	4b0d      	ldr	r3, [pc, #52]	; (62f8 <system_gclk_gen_get_hz+0x84>)
    62c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    62c6:	2e00      	cmp	r6, #0
    62c8:	d107      	bne.n	62da <system_gclk_gen_get_hz+0x66>
    62ca:	2c01      	cmp	r4, #1
    62cc:	d907      	bls.n	62de <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    62ce:	0021      	movs	r1, r4
    62d0:	0028      	movs	r0, r5
    62d2:	4b0a      	ldr	r3, [pc, #40]	; (62fc <system_gclk_gen_get_hz+0x88>)
    62d4:	4798      	blx	r3
    62d6:	0005      	movs	r5, r0
    62d8:	e001      	b.n	62de <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    62da:	3401      	adds	r4, #1
    62dc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    62de:	0028      	movs	r0, r5
    62e0:	bd70      	pop	{r4, r5, r6, pc}
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	40000c00 	.word	0x40000c00
    62e8:	00006089 	.word	0x00006089
    62ec:	40000c04 	.word	0x40000c04
    62f0:	000024b9 	.word	0x000024b9
    62f4:	40000c08 	.word	0x40000c08
    62f8:	000060c9 	.word	0x000060c9
    62fc:	00006605 	.word	0x00006605

00006300 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6300:	b510      	push	{r4, lr}
    6302:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6304:	4b06      	ldr	r3, [pc, #24]	; (6320 <system_gclk_chan_enable+0x20>)
    6306:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6308:	4b06      	ldr	r3, [pc, #24]	; (6324 <system_gclk_chan_enable+0x24>)
    630a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    630c:	4a06      	ldr	r2, [pc, #24]	; (6328 <system_gclk_chan_enable+0x28>)
    630e:	8853      	ldrh	r3, [r2, #2]
    6310:	2180      	movs	r1, #128	; 0x80
    6312:	01c9      	lsls	r1, r1, #7
    6314:	430b      	orrs	r3, r1
    6316:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6318:	4b04      	ldr	r3, [pc, #16]	; (632c <system_gclk_chan_enable+0x2c>)
    631a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    631c:	bd10      	pop	{r4, pc}
    631e:	46c0      	nop			; (mov r8, r8)
    6320:	00006089 	.word	0x00006089
    6324:	40000c02 	.word	0x40000c02
    6328:	40000c00 	.word	0x40000c00
    632c:	000060c9 	.word	0x000060c9

00006330 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6330:	b510      	push	{r4, lr}
    6332:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6334:	4b0f      	ldr	r3, [pc, #60]	; (6374 <system_gclk_chan_disable+0x44>)
    6336:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6338:	4b0f      	ldr	r3, [pc, #60]	; (6378 <system_gclk_chan_disable+0x48>)
    633a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    633c:	4a0f      	ldr	r2, [pc, #60]	; (637c <system_gclk_chan_disable+0x4c>)
    633e:	8853      	ldrh	r3, [r2, #2]
    6340:	051b      	lsls	r3, r3, #20
    6342:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    6344:	8853      	ldrh	r3, [r2, #2]
    6346:	490e      	ldr	r1, [pc, #56]	; (6380 <system_gclk_chan_disable+0x50>)
    6348:	400b      	ands	r3, r1
    634a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    634c:	8853      	ldrh	r3, [r2, #2]
    634e:	490d      	ldr	r1, [pc, #52]	; (6384 <system_gclk_chan_disable+0x54>)
    6350:	400b      	ands	r3, r1
    6352:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6354:	0011      	movs	r1, r2
    6356:	2280      	movs	r2, #128	; 0x80
    6358:	01d2      	lsls	r2, r2, #7
    635a:	884b      	ldrh	r3, [r1, #2]
    635c:	4213      	tst	r3, r2
    635e:	d1fc      	bne.n	635a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6360:	4906      	ldr	r1, [pc, #24]	; (637c <system_gclk_chan_disable+0x4c>)
    6362:	884a      	ldrh	r2, [r1, #2]
    6364:	0203      	lsls	r3, r0, #8
    6366:	4806      	ldr	r0, [pc, #24]	; (6380 <system_gclk_chan_disable+0x50>)
    6368:	4002      	ands	r2, r0
    636a:	4313      	orrs	r3, r2
    636c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    636e:	4b06      	ldr	r3, [pc, #24]	; (6388 <system_gclk_chan_disable+0x58>)
    6370:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6372:	bd10      	pop	{r4, pc}
    6374:	00006089 	.word	0x00006089
    6378:	40000c02 	.word	0x40000c02
    637c:	40000c00 	.word	0x40000c00
    6380:	fffff0ff 	.word	0xfffff0ff
    6384:	ffffbfff 	.word	0xffffbfff
    6388:	000060c9 	.word	0x000060c9

0000638c <system_gclk_chan_set_config>:
{
    638c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    638e:	780c      	ldrb	r4, [r1, #0]
    6390:	0224      	lsls	r4, r4, #8
    6392:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    6394:	4b02      	ldr	r3, [pc, #8]	; (63a0 <system_gclk_chan_set_config+0x14>)
    6396:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6398:	b2a4      	uxth	r4, r4
    639a:	4b02      	ldr	r3, [pc, #8]	; (63a4 <system_gclk_chan_set_config+0x18>)
    639c:	805c      	strh	r4, [r3, #2]
}
    639e:	bd10      	pop	{r4, pc}
    63a0:	00006331 	.word	0x00006331
    63a4:	40000c00 	.word	0x40000c00

000063a8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    63a8:	b510      	push	{r4, lr}
    63aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    63ac:	4b06      	ldr	r3, [pc, #24]	; (63c8 <system_gclk_chan_get_hz+0x20>)
    63ae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    63b0:	4b06      	ldr	r3, [pc, #24]	; (63cc <system_gclk_chan_get_hz+0x24>)
    63b2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    63b4:	4b06      	ldr	r3, [pc, #24]	; (63d0 <system_gclk_chan_get_hz+0x28>)
    63b6:	885c      	ldrh	r4, [r3, #2]
    63b8:	0524      	lsls	r4, r4, #20
    63ba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    63bc:	4b05      	ldr	r3, [pc, #20]	; (63d4 <system_gclk_chan_get_hz+0x2c>)
    63be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    63c0:	0020      	movs	r0, r4
    63c2:	4b05      	ldr	r3, [pc, #20]	; (63d8 <system_gclk_chan_get_hz+0x30>)
    63c4:	4798      	blx	r3
}
    63c6:	bd10      	pop	{r4, pc}
    63c8:	00006089 	.word	0x00006089
    63cc:	40000c02 	.word	0x40000c02
    63d0:	40000c00 	.word	0x40000c00
    63d4:	000060c9 	.word	0x000060c9
    63d8:	00006275 	.word	0x00006275

000063dc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    63dc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    63de:	78d3      	ldrb	r3, [r2, #3]
    63e0:	2b00      	cmp	r3, #0
    63e2:	d135      	bne.n	6450 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    63e4:	7813      	ldrb	r3, [r2, #0]
    63e6:	2b80      	cmp	r3, #128	; 0x80
    63e8:	d029      	beq.n	643e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    63ea:	061b      	lsls	r3, r3, #24
    63ec:	2480      	movs	r4, #128	; 0x80
    63ee:	0264      	lsls	r4, r4, #9
    63f0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    63f2:	7854      	ldrb	r4, [r2, #1]
    63f4:	2502      	movs	r5, #2
    63f6:	43ac      	bics	r4, r5
    63f8:	d106      	bne.n	6408 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    63fa:	7894      	ldrb	r4, [r2, #2]
    63fc:	2c00      	cmp	r4, #0
    63fe:	d120      	bne.n	6442 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6400:	2480      	movs	r4, #128	; 0x80
    6402:	02a4      	lsls	r4, r4, #10
    6404:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6406:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6408:	7854      	ldrb	r4, [r2, #1]
    640a:	3c01      	subs	r4, #1
    640c:	2c01      	cmp	r4, #1
    640e:	d91c      	bls.n	644a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6410:	040d      	lsls	r5, r1, #16
    6412:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6414:	24a0      	movs	r4, #160	; 0xa0
    6416:	05e4      	lsls	r4, r4, #23
    6418:	432c      	orrs	r4, r5
    641a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    641c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    641e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6420:	24d0      	movs	r4, #208	; 0xd0
    6422:	0624      	lsls	r4, r4, #24
    6424:	432c      	orrs	r4, r5
    6426:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6428:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    642a:	78d4      	ldrb	r4, [r2, #3]
    642c:	2c00      	cmp	r4, #0
    642e:	d122      	bne.n	6476 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6430:	035b      	lsls	r3, r3, #13
    6432:	d51c      	bpl.n	646e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6434:	7893      	ldrb	r3, [r2, #2]
    6436:	2b01      	cmp	r3, #1
    6438:	d01e      	beq.n	6478 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    643a:	6141      	str	r1, [r0, #20]
    643c:	e017      	b.n	646e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    643e:	2300      	movs	r3, #0
    6440:	e7d7      	b.n	63f2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6442:	24c0      	movs	r4, #192	; 0xc0
    6444:	02e4      	lsls	r4, r4, #11
    6446:	4323      	orrs	r3, r4
    6448:	e7dd      	b.n	6406 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    644a:	4c0d      	ldr	r4, [pc, #52]	; (6480 <_system_pinmux_config+0xa4>)
    644c:	4023      	ands	r3, r4
    644e:	e7df      	b.n	6410 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6450:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6452:	040c      	lsls	r4, r1, #16
    6454:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6456:	23a0      	movs	r3, #160	; 0xa0
    6458:	05db      	lsls	r3, r3, #23
    645a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    645c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    645e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6460:	23d0      	movs	r3, #208	; 0xd0
    6462:	061b      	lsls	r3, r3, #24
    6464:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6466:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6468:	78d3      	ldrb	r3, [r2, #3]
    646a:	2b00      	cmp	r3, #0
    646c:	d103      	bne.n	6476 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    646e:	7853      	ldrb	r3, [r2, #1]
    6470:	3b01      	subs	r3, #1
    6472:	2b01      	cmp	r3, #1
    6474:	d902      	bls.n	647c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6476:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6478:	6181      	str	r1, [r0, #24]
    647a:	e7f8      	b.n	646e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    647c:	6081      	str	r1, [r0, #8]
}
    647e:	e7fa      	b.n	6476 <_system_pinmux_config+0x9a>
    6480:	fffbffff 	.word	0xfffbffff

00006484 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6484:	b510      	push	{r4, lr}
    6486:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6488:	09c1      	lsrs	r1, r0, #7
		return NULL;
    648a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    648c:	2900      	cmp	r1, #0
    648e:	d104      	bne.n	649a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6490:	0943      	lsrs	r3, r0, #5
    6492:	01db      	lsls	r3, r3, #7
    6494:	4905      	ldr	r1, [pc, #20]	; (64ac <system_pinmux_pin_set_config+0x28>)
    6496:	468c      	mov	ip, r1
    6498:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    649a:	241f      	movs	r4, #31
    649c:	4020      	ands	r0, r4
    649e:	2101      	movs	r1, #1
    64a0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    64a2:	0018      	movs	r0, r3
    64a4:	4b02      	ldr	r3, [pc, #8]	; (64b0 <system_pinmux_pin_set_config+0x2c>)
    64a6:	4798      	blx	r3
}
    64a8:	bd10      	pop	{r4, pc}
    64aa:	46c0      	nop			; (mov r8, r8)
    64ac:	41004400 	.word	0x41004400
    64b0:	000063dd 	.word	0x000063dd

000064b4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    64b4:	4770      	bx	lr
	...

000064b8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    64b8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    64ba:	4b05      	ldr	r3, [pc, #20]	; (64d0 <system_init+0x18>)
    64bc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    64be:	4b05      	ldr	r3, [pc, #20]	; (64d4 <system_init+0x1c>)
    64c0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    64c2:	4b05      	ldr	r3, [pc, #20]	; (64d8 <system_init+0x20>)
    64c4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    64c6:	4b05      	ldr	r3, [pc, #20]	; (64dc <system_init+0x24>)
    64c8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    64ca:	4b05      	ldr	r3, [pc, #20]	; (64e0 <system_init+0x28>)
    64cc:	4798      	blx	r3
}
    64ce:	bd10      	pop	{r4, pc}
    64d0:	00002735 	.word	0x00002735
    64d4:	000060f9 	.word	0x000060f9
    64d8:	000064b5 	.word	0x000064b5
    64dc:	00001d7d 	.word	0x00001d7d
    64e0:	000064b5 	.word	0x000064b5

000064e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    64e4:	e7fe      	b.n	64e4 <Dummy_Handler>
	...

000064e8 <Reset_Handler>:
{
    64e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    64ea:	4a2a      	ldr	r2, [pc, #168]	; (6594 <Reset_Handler+0xac>)
    64ec:	4b2a      	ldr	r3, [pc, #168]	; (6598 <Reset_Handler+0xb0>)
    64ee:	429a      	cmp	r2, r3
    64f0:	d011      	beq.n	6516 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    64f2:	001a      	movs	r2, r3
    64f4:	4b29      	ldr	r3, [pc, #164]	; (659c <Reset_Handler+0xb4>)
    64f6:	429a      	cmp	r2, r3
    64f8:	d20d      	bcs.n	6516 <Reset_Handler+0x2e>
    64fa:	4a29      	ldr	r2, [pc, #164]	; (65a0 <Reset_Handler+0xb8>)
    64fc:	3303      	adds	r3, #3
    64fe:	1a9b      	subs	r3, r3, r2
    6500:	089b      	lsrs	r3, r3, #2
    6502:	3301      	adds	r3, #1
    6504:	009b      	lsls	r3, r3, #2
    6506:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6508:	4823      	ldr	r0, [pc, #140]	; (6598 <Reset_Handler+0xb0>)
    650a:	4922      	ldr	r1, [pc, #136]	; (6594 <Reset_Handler+0xac>)
    650c:	588c      	ldr	r4, [r1, r2]
    650e:	5084      	str	r4, [r0, r2]
    6510:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6512:	429a      	cmp	r2, r3
    6514:	d1fa      	bne.n	650c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6516:	4a23      	ldr	r2, [pc, #140]	; (65a4 <Reset_Handler+0xbc>)
    6518:	4b23      	ldr	r3, [pc, #140]	; (65a8 <Reset_Handler+0xc0>)
    651a:	429a      	cmp	r2, r3
    651c:	d20a      	bcs.n	6534 <Reset_Handler+0x4c>
    651e:	43d3      	mvns	r3, r2
    6520:	4921      	ldr	r1, [pc, #132]	; (65a8 <Reset_Handler+0xc0>)
    6522:	185b      	adds	r3, r3, r1
    6524:	2103      	movs	r1, #3
    6526:	438b      	bics	r3, r1
    6528:	3304      	adds	r3, #4
    652a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    652c:	2100      	movs	r1, #0
    652e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6530:	4293      	cmp	r3, r2
    6532:	d1fc      	bne.n	652e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6534:	4a1d      	ldr	r2, [pc, #116]	; (65ac <Reset_Handler+0xc4>)
    6536:	21ff      	movs	r1, #255	; 0xff
    6538:	4b1d      	ldr	r3, [pc, #116]	; (65b0 <Reset_Handler+0xc8>)
    653a:	438b      	bics	r3, r1
    653c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    653e:	39fd      	subs	r1, #253	; 0xfd
    6540:	2390      	movs	r3, #144	; 0x90
    6542:	005b      	lsls	r3, r3, #1
    6544:	4a1b      	ldr	r2, [pc, #108]	; (65b4 <Reset_Handler+0xcc>)
    6546:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6548:	4a1b      	ldr	r2, [pc, #108]	; (65b8 <Reset_Handler+0xd0>)
    654a:	78d3      	ldrb	r3, [r2, #3]
    654c:	2503      	movs	r5, #3
    654e:	43ab      	bics	r3, r5
    6550:	2402      	movs	r4, #2
    6552:	4323      	orrs	r3, r4
    6554:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6556:	78d3      	ldrb	r3, [r2, #3]
    6558:	270c      	movs	r7, #12
    655a:	43bb      	bics	r3, r7
    655c:	2608      	movs	r6, #8
    655e:	4333      	orrs	r3, r6
    6560:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6562:	4b16      	ldr	r3, [pc, #88]	; (65bc <Reset_Handler+0xd4>)
    6564:	7b98      	ldrb	r0, [r3, #14]
    6566:	2230      	movs	r2, #48	; 0x30
    6568:	4390      	bics	r0, r2
    656a:	2220      	movs	r2, #32
    656c:	4310      	orrs	r0, r2
    656e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6570:	7b99      	ldrb	r1, [r3, #14]
    6572:	43b9      	bics	r1, r7
    6574:	4331      	orrs	r1, r6
    6576:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6578:	7b9a      	ldrb	r2, [r3, #14]
    657a:	43aa      	bics	r2, r5
    657c:	4322      	orrs	r2, r4
    657e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6580:	4a0f      	ldr	r2, [pc, #60]	; (65c0 <Reset_Handler+0xd8>)
    6582:	6853      	ldr	r3, [r2, #4]
    6584:	2180      	movs	r1, #128	; 0x80
    6586:	430b      	orrs	r3, r1
    6588:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    658a:	4b0e      	ldr	r3, [pc, #56]	; (65c4 <Reset_Handler+0xdc>)
    658c:	4798      	blx	r3
        main();
    658e:	4b0e      	ldr	r3, [pc, #56]	; (65c8 <Reset_Handler+0xe0>)
    6590:	4798      	blx	r3
    6592:	e7fe      	b.n	6592 <Reset_Handler+0xaa>
    6594:	00007720 	.word	0x00007720
    6598:	20000000 	.word	0x20000000
    659c:	20000160 	.word	0x20000160
    65a0:	20000004 	.word	0x20000004
    65a4:	20000160 	.word	0x20000160
    65a8:	20000af4 	.word	0x20000af4
    65ac:	e000ed00 	.word	0xe000ed00
    65b0:	00000000 	.word	0x00000000
    65b4:	41007000 	.word	0x41007000
    65b8:	41005000 	.word	0x41005000
    65bc:	41004800 	.word	0x41004800
    65c0:	41004000 	.word	0x41004000
    65c4:	00006b99 	.word	0x00006b99
    65c8:	000036fd 	.word	0x000036fd

000065cc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    65cc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    65ce:	4a06      	ldr	r2, [pc, #24]	; (65e8 <_sbrk+0x1c>)
    65d0:	6812      	ldr	r2, [r2, #0]
    65d2:	2a00      	cmp	r2, #0
    65d4:	d004      	beq.n	65e0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    65d6:	4a04      	ldr	r2, [pc, #16]	; (65e8 <_sbrk+0x1c>)
    65d8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    65da:	18c3      	adds	r3, r0, r3
    65dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    65de:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    65e0:	4902      	ldr	r1, [pc, #8]	; (65ec <_sbrk+0x20>)
    65e2:	4a01      	ldr	r2, [pc, #4]	; (65e8 <_sbrk+0x1c>)
    65e4:	6011      	str	r1, [r2, #0]
    65e6:	e7f6      	b.n	65d6 <_sbrk+0xa>
    65e8:	200002e4 	.word	0x200002e4
    65ec:	20002af8 	.word	0x20002af8

000065f0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    65f0:	2001      	movs	r0, #1
    65f2:	4240      	negs	r0, r0
    65f4:	4770      	bx	lr

000065f6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    65f6:	2380      	movs	r3, #128	; 0x80
    65f8:	019b      	lsls	r3, r3, #6
    65fa:	604b      	str	r3, [r1, #4]

	return 0;
}
    65fc:	2000      	movs	r0, #0
    65fe:	4770      	bx	lr

00006600 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6600:	2000      	movs	r0, #0
    6602:	4770      	bx	lr

00006604 <__udivsi3>:
    6604:	2200      	movs	r2, #0
    6606:	0843      	lsrs	r3, r0, #1
    6608:	428b      	cmp	r3, r1
    660a:	d374      	bcc.n	66f6 <__udivsi3+0xf2>
    660c:	0903      	lsrs	r3, r0, #4
    660e:	428b      	cmp	r3, r1
    6610:	d35f      	bcc.n	66d2 <__udivsi3+0xce>
    6612:	0a03      	lsrs	r3, r0, #8
    6614:	428b      	cmp	r3, r1
    6616:	d344      	bcc.n	66a2 <__udivsi3+0x9e>
    6618:	0b03      	lsrs	r3, r0, #12
    661a:	428b      	cmp	r3, r1
    661c:	d328      	bcc.n	6670 <__udivsi3+0x6c>
    661e:	0c03      	lsrs	r3, r0, #16
    6620:	428b      	cmp	r3, r1
    6622:	d30d      	bcc.n	6640 <__udivsi3+0x3c>
    6624:	22ff      	movs	r2, #255	; 0xff
    6626:	0209      	lsls	r1, r1, #8
    6628:	ba12      	rev	r2, r2
    662a:	0c03      	lsrs	r3, r0, #16
    662c:	428b      	cmp	r3, r1
    662e:	d302      	bcc.n	6636 <__udivsi3+0x32>
    6630:	1212      	asrs	r2, r2, #8
    6632:	0209      	lsls	r1, r1, #8
    6634:	d065      	beq.n	6702 <__udivsi3+0xfe>
    6636:	0b03      	lsrs	r3, r0, #12
    6638:	428b      	cmp	r3, r1
    663a:	d319      	bcc.n	6670 <__udivsi3+0x6c>
    663c:	e000      	b.n	6640 <__udivsi3+0x3c>
    663e:	0a09      	lsrs	r1, r1, #8
    6640:	0bc3      	lsrs	r3, r0, #15
    6642:	428b      	cmp	r3, r1
    6644:	d301      	bcc.n	664a <__udivsi3+0x46>
    6646:	03cb      	lsls	r3, r1, #15
    6648:	1ac0      	subs	r0, r0, r3
    664a:	4152      	adcs	r2, r2
    664c:	0b83      	lsrs	r3, r0, #14
    664e:	428b      	cmp	r3, r1
    6650:	d301      	bcc.n	6656 <__udivsi3+0x52>
    6652:	038b      	lsls	r3, r1, #14
    6654:	1ac0      	subs	r0, r0, r3
    6656:	4152      	adcs	r2, r2
    6658:	0b43      	lsrs	r3, r0, #13
    665a:	428b      	cmp	r3, r1
    665c:	d301      	bcc.n	6662 <__udivsi3+0x5e>
    665e:	034b      	lsls	r3, r1, #13
    6660:	1ac0      	subs	r0, r0, r3
    6662:	4152      	adcs	r2, r2
    6664:	0b03      	lsrs	r3, r0, #12
    6666:	428b      	cmp	r3, r1
    6668:	d301      	bcc.n	666e <__udivsi3+0x6a>
    666a:	030b      	lsls	r3, r1, #12
    666c:	1ac0      	subs	r0, r0, r3
    666e:	4152      	adcs	r2, r2
    6670:	0ac3      	lsrs	r3, r0, #11
    6672:	428b      	cmp	r3, r1
    6674:	d301      	bcc.n	667a <__udivsi3+0x76>
    6676:	02cb      	lsls	r3, r1, #11
    6678:	1ac0      	subs	r0, r0, r3
    667a:	4152      	adcs	r2, r2
    667c:	0a83      	lsrs	r3, r0, #10
    667e:	428b      	cmp	r3, r1
    6680:	d301      	bcc.n	6686 <__udivsi3+0x82>
    6682:	028b      	lsls	r3, r1, #10
    6684:	1ac0      	subs	r0, r0, r3
    6686:	4152      	adcs	r2, r2
    6688:	0a43      	lsrs	r3, r0, #9
    668a:	428b      	cmp	r3, r1
    668c:	d301      	bcc.n	6692 <__udivsi3+0x8e>
    668e:	024b      	lsls	r3, r1, #9
    6690:	1ac0      	subs	r0, r0, r3
    6692:	4152      	adcs	r2, r2
    6694:	0a03      	lsrs	r3, r0, #8
    6696:	428b      	cmp	r3, r1
    6698:	d301      	bcc.n	669e <__udivsi3+0x9a>
    669a:	020b      	lsls	r3, r1, #8
    669c:	1ac0      	subs	r0, r0, r3
    669e:	4152      	adcs	r2, r2
    66a0:	d2cd      	bcs.n	663e <__udivsi3+0x3a>
    66a2:	09c3      	lsrs	r3, r0, #7
    66a4:	428b      	cmp	r3, r1
    66a6:	d301      	bcc.n	66ac <__udivsi3+0xa8>
    66a8:	01cb      	lsls	r3, r1, #7
    66aa:	1ac0      	subs	r0, r0, r3
    66ac:	4152      	adcs	r2, r2
    66ae:	0983      	lsrs	r3, r0, #6
    66b0:	428b      	cmp	r3, r1
    66b2:	d301      	bcc.n	66b8 <__udivsi3+0xb4>
    66b4:	018b      	lsls	r3, r1, #6
    66b6:	1ac0      	subs	r0, r0, r3
    66b8:	4152      	adcs	r2, r2
    66ba:	0943      	lsrs	r3, r0, #5
    66bc:	428b      	cmp	r3, r1
    66be:	d301      	bcc.n	66c4 <__udivsi3+0xc0>
    66c0:	014b      	lsls	r3, r1, #5
    66c2:	1ac0      	subs	r0, r0, r3
    66c4:	4152      	adcs	r2, r2
    66c6:	0903      	lsrs	r3, r0, #4
    66c8:	428b      	cmp	r3, r1
    66ca:	d301      	bcc.n	66d0 <__udivsi3+0xcc>
    66cc:	010b      	lsls	r3, r1, #4
    66ce:	1ac0      	subs	r0, r0, r3
    66d0:	4152      	adcs	r2, r2
    66d2:	08c3      	lsrs	r3, r0, #3
    66d4:	428b      	cmp	r3, r1
    66d6:	d301      	bcc.n	66dc <__udivsi3+0xd8>
    66d8:	00cb      	lsls	r3, r1, #3
    66da:	1ac0      	subs	r0, r0, r3
    66dc:	4152      	adcs	r2, r2
    66de:	0883      	lsrs	r3, r0, #2
    66e0:	428b      	cmp	r3, r1
    66e2:	d301      	bcc.n	66e8 <__udivsi3+0xe4>
    66e4:	008b      	lsls	r3, r1, #2
    66e6:	1ac0      	subs	r0, r0, r3
    66e8:	4152      	adcs	r2, r2
    66ea:	0843      	lsrs	r3, r0, #1
    66ec:	428b      	cmp	r3, r1
    66ee:	d301      	bcc.n	66f4 <__udivsi3+0xf0>
    66f0:	004b      	lsls	r3, r1, #1
    66f2:	1ac0      	subs	r0, r0, r3
    66f4:	4152      	adcs	r2, r2
    66f6:	1a41      	subs	r1, r0, r1
    66f8:	d200      	bcs.n	66fc <__udivsi3+0xf8>
    66fa:	4601      	mov	r1, r0
    66fc:	4152      	adcs	r2, r2
    66fe:	4610      	mov	r0, r2
    6700:	4770      	bx	lr
    6702:	e7ff      	b.n	6704 <__udivsi3+0x100>
    6704:	b501      	push	{r0, lr}
    6706:	2000      	movs	r0, #0
    6708:	f000 f8f0 	bl	68ec <__aeabi_idiv0>
    670c:	bd02      	pop	{r1, pc}
    670e:	46c0      	nop			; (mov r8, r8)

00006710 <__aeabi_uidivmod>:
    6710:	2900      	cmp	r1, #0
    6712:	d0f7      	beq.n	6704 <__udivsi3+0x100>
    6714:	e776      	b.n	6604 <__udivsi3>
    6716:	4770      	bx	lr

00006718 <__divsi3>:
    6718:	4603      	mov	r3, r0
    671a:	430b      	orrs	r3, r1
    671c:	d47f      	bmi.n	681e <__divsi3+0x106>
    671e:	2200      	movs	r2, #0
    6720:	0843      	lsrs	r3, r0, #1
    6722:	428b      	cmp	r3, r1
    6724:	d374      	bcc.n	6810 <__divsi3+0xf8>
    6726:	0903      	lsrs	r3, r0, #4
    6728:	428b      	cmp	r3, r1
    672a:	d35f      	bcc.n	67ec <__divsi3+0xd4>
    672c:	0a03      	lsrs	r3, r0, #8
    672e:	428b      	cmp	r3, r1
    6730:	d344      	bcc.n	67bc <__divsi3+0xa4>
    6732:	0b03      	lsrs	r3, r0, #12
    6734:	428b      	cmp	r3, r1
    6736:	d328      	bcc.n	678a <__divsi3+0x72>
    6738:	0c03      	lsrs	r3, r0, #16
    673a:	428b      	cmp	r3, r1
    673c:	d30d      	bcc.n	675a <__divsi3+0x42>
    673e:	22ff      	movs	r2, #255	; 0xff
    6740:	0209      	lsls	r1, r1, #8
    6742:	ba12      	rev	r2, r2
    6744:	0c03      	lsrs	r3, r0, #16
    6746:	428b      	cmp	r3, r1
    6748:	d302      	bcc.n	6750 <__divsi3+0x38>
    674a:	1212      	asrs	r2, r2, #8
    674c:	0209      	lsls	r1, r1, #8
    674e:	d065      	beq.n	681c <__divsi3+0x104>
    6750:	0b03      	lsrs	r3, r0, #12
    6752:	428b      	cmp	r3, r1
    6754:	d319      	bcc.n	678a <__divsi3+0x72>
    6756:	e000      	b.n	675a <__divsi3+0x42>
    6758:	0a09      	lsrs	r1, r1, #8
    675a:	0bc3      	lsrs	r3, r0, #15
    675c:	428b      	cmp	r3, r1
    675e:	d301      	bcc.n	6764 <__divsi3+0x4c>
    6760:	03cb      	lsls	r3, r1, #15
    6762:	1ac0      	subs	r0, r0, r3
    6764:	4152      	adcs	r2, r2
    6766:	0b83      	lsrs	r3, r0, #14
    6768:	428b      	cmp	r3, r1
    676a:	d301      	bcc.n	6770 <__divsi3+0x58>
    676c:	038b      	lsls	r3, r1, #14
    676e:	1ac0      	subs	r0, r0, r3
    6770:	4152      	adcs	r2, r2
    6772:	0b43      	lsrs	r3, r0, #13
    6774:	428b      	cmp	r3, r1
    6776:	d301      	bcc.n	677c <__divsi3+0x64>
    6778:	034b      	lsls	r3, r1, #13
    677a:	1ac0      	subs	r0, r0, r3
    677c:	4152      	adcs	r2, r2
    677e:	0b03      	lsrs	r3, r0, #12
    6780:	428b      	cmp	r3, r1
    6782:	d301      	bcc.n	6788 <__divsi3+0x70>
    6784:	030b      	lsls	r3, r1, #12
    6786:	1ac0      	subs	r0, r0, r3
    6788:	4152      	adcs	r2, r2
    678a:	0ac3      	lsrs	r3, r0, #11
    678c:	428b      	cmp	r3, r1
    678e:	d301      	bcc.n	6794 <__divsi3+0x7c>
    6790:	02cb      	lsls	r3, r1, #11
    6792:	1ac0      	subs	r0, r0, r3
    6794:	4152      	adcs	r2, r2
    6796:	0a83      	lsrs	r3, r0, #10
    6798:	428b      	cmp	r3, r1
    679a:	d301      	bcc.n	67a0 <__divsi3+0x88>
    679c:	028b      	lsls	r3, r1, #10
    679e:	1ac0      	subs	r0, r0, r3
    67a0:	4152      	adcs	r2, r2
    67a2:	0a43      	lsrs	r3, r0, #9
    67a4:	428b      	cmp	r3, r1
    67a6:	d301      	bcc.n	67ac <__divsi3+0x94>
    67a8:	024b      	lsls	r3, r1, #9
    67aa:	1ac0      	subs	r0, r0, r3
    67ac:	4152      	adcs	r2, r2
    67ae:	0a03      	lsrs	r3, r0, #8
    67b0:	428b      	cmp	r3, r1
    67b2:	d301      	bcc.n	67b8 <__divsi3+0xa0>
    67b4:	020b      	lsls	r3, r1, #8
    67b6:	1ac0      	subs	r0, r0, r3
    67b8:	4152      	adcs	r2, r2
    67ba:	d2cd      	bcs.n	6758 <__divsi3+0x40>
    67bc:	09c3      	lsrs	r3, r0, #7
    67be:	428b      	cmp	r3, r1
    67c0:	d301      	bcc.n	67c6 <__divsi3+0xae>
    67c2:	01cb      	lsls	r3, r1, #7
    67c4:	1ac0      	subs	r0, r0, r3
    67c6:	4152      	adcs	r2, r2
    67c8:	0983      	lsrs	r3, r0, #6
    67ca:	428b      	cmp	r3, r1
    67cc:	d301      	bcc.n	67d2 <__divsi3+0xba>
    67ce:	018b      	lsls	r3, r1, #6
    67d0:	1ac0      	subs	r0, r0, r3
    67d2:	4152      	adcs	r2, r2
    67d4:	0943      	lsrs	r3, r0, #5
    67d6:	428b      	cmp	r3, r1
    67d8:	d301      	bcc.n	67de <__divsi3+0xc6>
    67da:	014b      	lsls	r3, r1, #5
    67dc:	1ac0      	subs	r0, r0, r3
    67de:	4152      	adcs	r2, r2
    67e0:	0903      	lsrs	r3, r0, #4
    67e2:	428b      	cmp	r3, r1
    67e4:	d301      	bcc.n	67ea <__divsi3+0xd2>
    67e6:	010b      	lsls	r3, r1, #4
    67e8:	1ac0      	subs	r0, r0, r3
    67ea:	4152      	adcs	r2, r2
    67ec:	08c3      	lsrs	r3, r0, #3
    67ee:	428b      	cmp	r3, r1
    67f0:	d301      	bcc.n	67f6 <__divsi3+0xde>
    67f2:	00cb      	lsls	r3, r1, #3
    67f4:	1ac0      	subs	r0, r0, r3
    67f6:	4152      	adcs	r2, r2
    67f8:	0883      	lsrs	r3, r0, #2
    67fa:	428b      	cmp	r3, r1
    67fc:	d301      	bcc.n	6802 <__divsi3+0xea>
    67fe:	008b      	lsls	r3, r1, #2
    6800:	1ac0      	subs	r0, r0, r3
    6802:	4152      	adcs	r2, r2
    6804:	0843      	lsrs	r3, r0, #1
    6806:	428b      	cmp	r3, r1
    6808:	d301      	bcc.n	680e <__divsi3+0xf6>
    680a:	004b      	lsls	r3, r1, #1
    680c:	1ac0      	subs	r0, r0, r3
    680e:	4152      	adcs	r2, r2
    6810:	1a41      	subs	r1, r0, r1
    6812:	d200      	bcs.n	6816 <__divsi3+0xfe>
    6814:	4601      	mov	r1, r0
    6816:	4152      	adcs	r2, r2
    6818:	4610      	mov	r0, r2
    681a:	4770      	bx	lr
    681c:	e05d      	b.n	68da <__divsi3+0x1c2>
    681e:	0fca      	lsrs	r2, r1, #31
    6820:	d000      	beq.n	6824 <__divsi3+0x10c>
    6822:	4249      	negs	r1, r1
    6824:	1003      	asrs	r3, r0, #32
    6826:	d300      	bcc.n	682a <__divsi3+0x112>
    6828:	4240      	negs	r0, r0
    682a:	4053      	eors	r3, r2
    682c:	2200      	movs	r2, #0
    682e:	469c      	mov	ip, r3
    6830:	0903      	lsrs	r3, r0, #4
    6832:	428b      	cmp	r3, r1
    6834:	d32d      	bcc.n	6892 <__divsi3+0x17a>
    6836:	0a03      	lsrs	r3, r0, #8
    6838:	428b      	cmp	r3, r1
    683a:	d312      	bcc.n	6862 <__divsi3+0x14a>
    683c:	22fc      	movs	r2, #252	; 0xfc
    683e:	0189      	lsls	r1, r1, #6
    6840:	ba12      	rev	r2, r2
    6842:	0a03      	lsrs	r3, r0, #8
    6844:	428b      	cmp	r3, r1
    6846:	d30c      	bcc.n	6862 <__divsi3+0x14a>
    6848:	0189      	lsls	r1, r1, #6
    684a:	1192      	asrs	r2, r2, #6
    684c:	428b      	cmp	r3, r1
    684e:	d308      	bcc.n	6862 <__divsi3+0x14a>
    6850:	0189      	lsls	r1, r1, #6
    6852:	1192      	asrs	r2, r2, #6
    6854:	428b      	cmp	r3, r1
    6856:	d304      	bcc.n	6862 <__divsi3+0x14a>
    6858:	0189      	lsls	r1, r1, #6
    685a:	d03a      	beq.n	68d2 <__divsi3+0x1ba>
    685c:	1192      	asrs	r2, r2, #6
    685e:	e000      	b.n	6862 <__divsi3+0x14a>
    6860:	0989      	lsrs	r1, r1, #6
    6862:	09c3      	lsrs	r3, r0, #7
    6864:	428b      	cmp	r3, r1
    6866:	d301      	bcc.n	686c <__divsi3+0x154>
    6868:	01cb      	lsls	r3, r1, #7
    686a:	1ac0      	subs	r0, r0, r3
    686c:	4152      	adcs	r2, r2
    686e:	0983      	lsrs	r3, r0, #6
    6870:	428b      	cmp	r3, r1
    6872:	d301      	bcc.n	6878 <__divsi3+0x160>
    6874:	018b      	lsls	r3, r1, #6
    6876:	1ac0      	subs	r0, r0, r3
    6878:	4152      	adcs	r2, r2
    687a:	0943      	lsrs	r3, r0, #5
    687c:	428b      	cmp	r3, r1
    687e:	d301      	bcc.n	6884 <__divsi3+0x16c>
    6880:	014b      	lsls	r3, r1, #5
    6882:	1ac0      	subs	r0, r0, r3
    6884:	4152      	adcs	r2, r2
    6886:	0903      	lsrs	r3, r0, #4
    6888:	428b      	cmp	r3, r1
    688a:	d301      	bcc.n	6890 <__divsi3+0x178>
    688c:	010b      	lsls	r3, r1, #4
    688e:	1ac0      	subs	r0, r0, r3
    6890:	4152      	adcs	r2, r2
    6892:	08c3      	lsrs	r3, r0, #3
    6894:	428b      	cmp	r3, r1
    6896:	d301      	bcc.n	689c <__divsi3+0x184>
    6898:	00cb      	lsls	r3, r1, #3
    689a:	1ac0      	subs	r0, r0, r3
    689c:	4152      	adcs	r2, r2
    689e:	0883      	lsrs	r3, r0, #2
    68a0:	428b      	cmp	r3, r1
    68a2:	d301      	bcc.n	68a8 <__divsi3+0x190>
    68a4:	008b      	lsls	r3, r1, #2
    68a6:	1ac0      	subs	r0, r0, r3
    68a8:	4152      	adcs	r2, r2
    68aa:	d2d9      	bcs.n	6860 <__divsi3+0x148>
    68ac:	0843      	lsrs	r3, r0, #1
    68ae:	428b      	cmp	r3, r1
    68b0:	d301      	bcc.n	68b6 <__divsi3+0x19e>
    68b2:	004b      	lsls	r3, r1, #1
    68b4:	1ac0      	subs	r0, r0, r3
    68b6:	4152      	adcs	r2, r2
    68b8:	1a41      	subs	r1, r0, r1
    68ba:	d200      	bcs.n	68be <__divsi3+0x1a6>
    68bc:	4601      	mov	r1, r0
    68be:	4663      	mov	r3, ip
    68c0:	4152      	adcs	r2, r2
    68c2:	105b      	asrs	r3, r3, #1
    68c4:	4610      	mov	r0, r2
    68c6:	d301      	bcc.n	68cc <__divsi3+0x1b4>
    68c8:	4240      	negs	r0, r0
    68ca:	2b00      	cmp	r3, #0
    68cc:	d500      	bpl.n	68d0 <__divsi3+0x1b8>
    68ce:	4249      	negs	r1, r1
    68d0:	4770      	bx	lr
    68d2:	4663      	mov	r3, ip
    68d4:	105b      	asrs	r3, r3, #1
    68d6:	d300      	bcc.n	68da <__divsi3+0x1c2>
    68d8:	4240      	negs	r0, r0
    68da:	b501      	push	{r0, lr}
    68dc:	2000      	movs	r0, #0
    68de:	f000 f805 	bl	68ec <__aeabi_idiv0>
    68e2:	bd02      	pop	{r1, pc}

000068e4 <__aeabi_idivmod>:
    68e4:	2900      	cmp	r1, #0
    68e6:	d0f8      	beq.n	68da <__divsi3+0x1c2>
    68e8:	e716      	b.n	6718 <__divsi3>
    68ea:	4770      	bx	lr

000068ec <__aeabi_idiv0>:
    68ec:	4770      	bx	lr
    68ee:	46c0      	nop			; (mov r8, r8)

000068f0 <__clzsi2>:
    68f0:	211c      	movs	r1, #28
    68f2:	2301      	movs	r3, #1
    68f4:	041b      	lsls	r3, r3, #16
    68f6:	4298      	cmp	r0, r3
    68f8:	d301      	bcc.n	68fe <__clzsi2+0xe>
    68fa:	0c00      	lsrs	r0, r0, #16
    68fc:	3910      	subs	r1, #16
    68fe:	0a1b      	lsrs	r3, r3, #8
    6900:	4298      	cmp	r0, r3
    6902:	d301      	bcc.n	6908 <__clzsi2+0x18>
    6904:	0a00      	lsrs	r0, r0, #8
    6906:	3908      	subs	r1, #8
    6908:	091b      	lsrs	r3, r3, #4
    690a:	4298      	cmp	r0, r3
    690c:	d301      	bcc.n	6912 <__clzsi2+0x22>
    690e:	0900      	lsrs	r0, r0, #4
    6910:	3904      	subs	r1, #4
    6912:	a202      	add	r2, pc, #8	; (adr r2, 691c <__clzsi2+0x2c>)
    6914:	5c10      	ldrb	r0, [r2, r0]
    6916:	1840      	adds	r0, r0, r1
    6918:	4770      	bx	lr
    691a:	46c0      	nop			; (mov r8, r8)
    691c:	02020304 	.word	0x02020304
    6920:	01010101 	.word	0x01010101
	...

0000692c <__ctzsi2>:
    692c:	4241      	negs	r1, r0
    692e:	4008      	ands	r0, r1
    6930:	211c      	movs	r1, #28
    6932:	2301      	movs	r3, #1
    6934:	041b      	lsls	r3, r3, #16
    6936:	4298      	cmp	r0, r3
    6938:	d301      	bcc.n	693e <__ctzsi2+0x12>
    693a:	0c00      	lsrs	r0, r0, #16
    693c:	3910      	subs	r1, #16
    693e:	0a1b      	lsrs	r3, r3, #8
    6940:	4298      	cmp	r0, r3
    6942:	d301      	bcc.n	6948 <__ctzsi2+0x1c>
    6944:	0a00      	lsrs	r0, r0, #8
    6946:	3908      	subs	r1, #8
    6948:	091b      	lsrs	r3, r3, #4
    694a:	4298      	cmp	r0, r3
    694c:	d301      	bcc.n	6952 <__ctzsi2+0x26>
    694e:	0900      	lsrs	r0, r0, #4
    6950:	3904      	subs	r1, #4
    6952:	a202      	add	r2, pc, #8	; (adr r2, 695c <__ctzsi2+0x30>)
    6954:	5c10      	ldrb	r0, [r2, r0]
    6956:	1a40      	subs	r0, r0, r1
    6958:	4770      	bx	lr
    695a:	46c0      	nop			; (mov r8, r8)
    695c:	1d1d1c1b 	.word	0x1d1d1c1b
    6960:	1e1e1e1e 	.word	0x1e1e1e1e
    6964:	1f1f1f1f 	.word	0x1f1f1f1f
    6968:	1f1f1f1f 	.word	0x1f1f1f1f

0000696c <__aeabi_uldivmod>:
    696c:	2b00      	cmp	r3, #0
    696e:	d111      	bne.n	6994 <__aeabi_uldivmod+0x28>
    6970:	2a00      	cmp	r2, #0
    6972:	d10f      	bne.n	6994 <__aeabi_uldivmod+0x28>
    6974:	2900      	cmp	r1, #0
    6976:	d100      	bne.n	697a <__aeabi_uldivmod+0xe>
    6978:	2800      	cmp	r0, #0
    697a:	d002      	beq.n	6982 <__aeabi_uldivmod+0x16>
    697c:	2100      	movs	r1, #0
    697e:	43c9      	mvns	r1, r1
    6980:	1c08      	adds	r0, r1, #0
    6982:	b407      	push	{r0, r1, r2}
    6984:	4802      	ldr	r0, [pc, #8]	; (6990 <__aeabi_uldivmod+0x24>)
    6986:	a102      	add	r1, pc, #8	; (adr r1, 6990 <__aeabi_uldivmod+0x24>)
    6988:	1840      	adds	r0, r0, r1
    698a:	9002      	str	r0, [sp, #8]
    698c:	bd03      	pop	{r0, r1, pc}
    698e:	46c0      	nop			; (mov r8, r8)
    6990:	ffffff5d 	.word	0xffffff5d
    6994:	b403      	push	{r0, r1}
    6996:	4668      	mov	r0, sp
    6998:	b501      	push	{r0, lr}
    699a:	9802      	ldr	r0, [sp, #8]
    699c:	f000 f830 	bl	6a00 <__udivmoddi4>
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	469e      	mov	lr, r3
    69a4:	b002      	add	sp, #8
    69a6:	bc0c      	pop	{r2, r3}
    69a8:	4770      	bx	lr
    69aa:	46c0      	nop			; (mov r8, r8)

000069ac <__aeabi_lmul>:
    69ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    69ae:	46ce      	mov	lr, r9
    69b0:	4647      	mov	r7, r8
    69b2:	0415      	lsls	r5, r2, #16
    69b4:	0c2d      	lsrs	r5, r5, #16
    69b6:	002e      	movs	r6, r5
    69b8:	b580      	push	{r7, lr}
    69ba:	0407      	lsls	r7, r0, #16
    69bc:	0c14      	lsrs	r4, r2, #16
    69be:	0c3f      	lsrs	r7, r7, #16
    69c0:	4699      	mov	r9, r3
    69c2:	0c03      	lsrs	r3, r0, #16
    69c4:	437e      	muls	r6, r7
    69c6:	435d      	muls	r5, r3
    69c8:	4367      	muls	r7, r4
    69ca:	4363      	muls	r3, r4
    69cc:	197f      	adds	r7, r7, r5
    69ce:	0c34      	lsrs	r4, r6, #16
    69d0:	19e4      	adds	r4, r4, r7
    69d2:	469c      	mov	ip, r3
    69d4:	42a5      	cmp	r5, r4
    69d6:	d903      	bls.n	69e0 <__aeabi_lmul+0x34>
    69d8:	2380      	movs	r3, #128	; 0x80
    69da:	025b      	lsls	r3, r3, #9
    69dc:	4698      	mov	r8, r3
    69de:	44c4      	add	ip, r8
    69e0:	464b      	mov	r3, r9
    69e2:	4351      	muls	r1, r2
    69e4:	4343      	muls	r3, r0
    69e6:	0436      	lsls	r6, r6, #16
    69e8:	0c36      	lsrs	r6, r6, #16
    69ea:	0c25      	lsrs	r5, r4, #16
    69ec:	0424      	lsls	r4, r4, #16
    69ee:	4465      	add	r5, ip
    69f0:	19a4      	adds	r4, r4, r6
    69f2:	1859      	adds	r1, r3, r1
    69f4:	1949      	adds	r1, r1, r5
    69f6:	0020      	movs	r0, r4
    69f8:	bc0c      	pop	{r2, r3}
    69fa:	4690      	mov	r8, r2
    69fc:	4699      	mov	r9, r3
    69fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a00 <__udivmoddi4>:
    6a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a02:	4657      	mov	r7, sl
    6a04:	464e      	mov	r6, r9
    6a06:	4645      	mov	r5, r8
    6a08:	46de      	mov	lr, fp
    6a0a:	b5e0      	push	{r5, r6, r7, lr}
    6a0c:	0004      	movs	r4, r0
    6a0e:	b083      	sub	sp, #12
    6a10:	000d      	movs	r5, r1
    6a12:	4692      	mov	sl, r2
    6a14:	4699      	mov	r9, r3
    6a16:	428b      	cmp	r3, r1
    6a18:	d82f      	bhi.n	6a7a <__udivmoddi4+0x7a>
    6a1a:	d02c      	beq.n	6a76 <__udivmoddi4+0x76>
    6a1c:	4649      	mov	r1, r9
    6a1e:	4650      	mov	r0, sl
    6a20:	f000 f8ae 	bl	6b80 <__clzdi2>
    6a24:	0029      	movs	r1, r5
    6a26:	0006      	movs	r6, r0
    6a28:	0020      	movs	r0, r4
    6a2a:	f000 f8a9 	bl	6b80 <__clzdi2>
    6a2e:	1a33      	subs	r3, r6, r0
    6a30:	4698      	mov	r8, r3
    6a32:	3b20      	subs	r3, #32
    6a34:	469b      	mov	fp, r3
    6a36:	d500      	bpl.n	6a3a <__udivmoddi4+0x3a>
    6a38:	e074      	b.n	6b24 <__udivmoddi4+0x124>
    6a3a:	4653      	mov	r3, sl
    6a3c:	465a      	mov	r2, fp
    6a3e:	4093      	lsls	r3, r2
    6a40:	001f      	movs	r7, r3
    6a42:	4653      	mov	r3, sl
    6a44:	4642      	mov	r2, r8
    6a46:	4093      	lsls	r3, r2
    6a48:	001e      	movs	r6, r3
    6a4a:	42af      	cmp	r7, r5
    6a4c:	d829      	bhi.n	6aa2 <__udivmoddi4+0xa2>
    6a4e:	d026      	beq.n	6a9e <__udivmoddi4+0x9e>
    6a50:	465b      	mov	r3, fp
    6a52:	1ba4      	subs	r4, r4, r6
    6a54:	41bd      	sbcs	r5, r7
    6a56:	2b00      	cmp	r3, #0
    6a58:	da00      	bge.n	6a5c <__udivmoddi4+0x5c>
    6a5a:	e079      	b.n	6b50 <__udivmoddi4+0x150>
    6a5c:	2200      	movs	r2, #0
    6a5e:	2300      	movs	r3, #0
    6a60:	9200      	str	r2, [sp, #0]
    6a62:	9301      	str	r3, [sp, #4]
    6a64:	2301      	movs	r3, #1
    6a66:	465a      	mov	r2, fp
    6a68:	4093      	lsls	r3, r2
    6a6a:	9301      	str	r3, [sp, #4]
    6a6c:	2301      	movs	r3, #1
    6a6e:	4642      	mov	r2, r8
    6a70:	4093      	lsls	r3, r2
    6a72:	9300      	str	r3, [sp, #0]
    6a74:	e019      	b.n	6aaa <__udivmoddi4+0xaa>
    6a76:	4282      	cmp	r2, r0
    6a78:	d9d0      	bls.n	6a1c <__udivmoddi4+0x1c>
    6a7a:	2200      	movs	r2, #0
    6a7c:	2300      	movs	r3, #0
    6a7e:	9200      	str	r2, [sp, #0]
    6a80:	9301      	str	r3, [sp, #4]
    6a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a84:	2b00      	cmp	r3, #0
    6a86:	d001      	beq.n	6a8c <__udivmoddi4+0x8c>
    6a88:	601c      	str	r4, [r3, #0]
    6a8a:	605d      	str	r5, [r3, #4]
    6a8c:	9800      	ldr	r0, [sp, #0]
    6a8e:	9901      	ldr	r1, [sp, #4]
    6a90:	b003      	add	sp, #12
    6a92:	bc3c      	pop	{r2, r3, r4, r5}
    6a94:	4690      	mov	r8, r2
    6a96:	4699      	mov	r9, r3
    6a98:	46a2      	mov	sl, r4
    6a9a:	46ab      	mov	fp, r5
    6a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a9e:	42a3      	cmp	r3, r4
    6aa0:	d9d6      	bls.n	6a50 <__udivmoddi4+0x50>
    6aa2:	2200      	movs	r2, #0
    6aa4:	2300      	movs	r3, #0
    6aa6:	9200      	str	r2, [sp, #0]
    6aa8:	9301      	str	r3, [sp, #4]
    6aaa:	4643      	mov	r3, r8
    6aac:	2b00      	cmp	r3, #0
    6aae:	d0e8      	beq.n	6a82 <__udivmoddi4+0x82>
    6ab0:	07fb      	lsls	r3, r7, #31
    6ab2:	0872      	lsrs	r2, r6, #1
    6ab4:	431a      	orrs	r2, r3
    6ab6:	4646      	mov	r6, r8
    6ab8:	087b      	lsrs	r3, r7, #1
    6aba:	e00e      	b.n	6ada <__udivmoddi4+0xda>
    6abc:	42ab      	cmp	r3, r5
    6abe:	d101      	bne.n	6ac4 <__udivmoddi4+0xc4>
    6ac0:	42a2      	cmp	r2, r4
    6ac2:	d80c      	bhi.n	6ade <__udivmoddi4+0xde>
    6ac4:	1aa4      	subs	r4, r4, r2
    6ac6:	419d      	sbcs	r5, r3
    6ac8:	2001      	movs	r0, #1
    6aca:	1924      	adds	r4, r4, r4
    6acc:	416d      	adcs	r5, r5
    6ace:	2100      	movs	r1, #0
    6ad0:	3e01      	subs	r6, #1
    6ad2:	1824      	adds	r4, r4, r0
    6ad4:	414d      	adcs	r5, r1
    6ad6:	2e00      	cmp	r6, #0
    6ad8:	d006      	beq.n	6ae8 <__udivmoddi4+0xe8>
    6ada:	42ab      	cmp	r3, r5
    6adc:	d9ee      	bls.n	6abc <__udivmoddi4+0xbc>
    6ade:	3e01      	subs	r6, #1
    6ae0:	1924      	adds	r4, r4, r4
    6ae2:	416d      	adcs	r5, r5
    6ae4:	2e00      	cmp	r6, #0
    6ae6:	d1f8      	bne.n	6ada <__udivmoddi4+0xda>
    6ae8:	465b      	mov	r3, fp
    6aea:	9800      	ldr	r0, [sp, #0]
    6aec:	9901      	ldr	r1, [sp, #4]
    6aee:	1900      	adds	r0, r0, r4
    6af0:	4169      	adcs	r1, r5
    6af2:	2b00      	cmp	r3, #0
    6af4:	db22      	blt.n	6b3c <__udivmoddi4+0x13c>
    6af6:	002b      	movs	r3, r5
    6af8:	465a      	mov	r2, fp
    6afa:	40d3      	lsrs	r3, r2
    6afc:	002a      	movs	r2, r5
    6afe:	4644      	mov	r4, r8
    6b00:	40e2      	lsrs	r2, r4
    6b02:	001c      	movs	r4, r3
    6b04:	465b      	mov	r3, fp
    6b06:	0015      	movs	r5, r2
    6b08:	2b00      	cmp	r3, #0
    6b0a:	db2c      	blt.n	6b66 <__udivmoddi4+0x166>
    6b0c:	0026      	movs	r6, r4
    6b0e:	409e      	lsls	r6, r3
    6b10:	0033      	movs	r3, r6
    6b12:	0026      	movs	r6, r4
    6b14:	4647      	mov	r7, r8
    6b16:	40be      	lsls	r6, r7
    6b18:	0032      	movs	r2, r6
    6b1a:	1a80      	subs	r0, r0, r2
    6b1c:	4199      	sbcs	r1, r3
    6b1e:	9000      	str	r0, [sp, #0]
    6b20:	9101      	str	r1, [sp, #4]
    6b22:	e7ae      	b.n	6a82 <__udivmoddi4+0x82>
    6b24:	4642      	mov	r2, r8
    6b26:	2320      	movs	r3, #32
    6b28:	1a9b      	subs	r3, r3, r2
    6b2a:	4652      	mov	r2, sl
    6b2c:	40da      	lsrs	r2, r3
    6b2e:	4641      	mov	r1, r8
    6b30:	0013      	movs	r3, r2
    6b32:	464a      	mov	r2, r9
    6b34:	408a      	lsls	r2, r1
    6b36:	0017      	movs	r7, r2
    6b38:	431f      	orrs	r7, r3
    6b3a:	e782      	b.n	6a42 <__udivmoddi4+0x42>
    6b3c:	4642      	mov	r2, r8
    6b3e:	2320      	movs	r3, #32
    6b40:	1a9b      	subs	r3, r3, r2
    6b42:	002a      	movs	r2, r5
    6b44:	4646      	mov	r6, r8
    6b46:	409a      	lsls	r2, r3
    6b48:	0023      	movs	r3, r4
    6b4a:	40f3      	lsrs	r3, r6
    6b4c:	4313      	orrs	r3, r2
    6b4e:	e7d5      	b.n	6afc <__udivmoddi4+0xfc>
    6b50:	4642      	mov	r2, r8
    6b52:	2320      	movs	r3, #32
    6b54:	2100      	movs	r1, #0
    6b56:	1a9b      	subs	r3, r3, r2
    6b58:	2200      	movs	r2, #0
    6b5a:	9100      	str	r1, [sp, #0]
    6b5c:	9201      	str	r2, [sp, #4]
    6b5e:	2201      	movs	r2, #1
    6b60:	40da      	lsrs	r2, r3
    6b62:	9201      	str	r2, [sp, #4]
    6b64:	e782      	b.n	6a6c <__udivmoddi4+0x6c>
    6b66:	4642      	mov	r2, r8
    6b68:	2320      	movs	r3, #32
    6b6a:	0026      	movs	r6, r4
    6b6c:	1a9b      	subs	r3, r3, r2
    6b6e:	40de      	lsrs	r6, r3
    6b70:	002f      	movs	r7, r5
    6b72:	46b4      	mov	ip, r6
    6b74:	4097      	lsls	r7, r2
    6b76:	4666      	mov	r6, ip
    6b78:	003b      	movs	r3, r7
    6b7a:	4333      	orrs	r3, r6
    6b7c:	e7c9      	b.n	6b12 <__udivmoddi4+0x112>
    6b7e:	46c0      	nop			; (mov r8, r8)

00006b80 <__clzdi2>:
    6b80:	b510      	push	{r4, lr}
    6b82:	2900      	cmp	r1, #0
    6b84:	d103      	bne.n	6b8e <__clzdi2+0xe>
    6b86:	f7ff feb3 	bl	68f0 <__clzsi2>
    6b8a:	3020      	adds	r0, #32
    6b8c:	e002      	b.n	6b94 <__clzdi2+0x14>
    6b8e:	1c08      	adds	r0, r1, #0
    6b90:	f7ff feae 	bl	68f0 <__clzsi2>
    6b94:	bd10      	pop	{r4, pc}
    6b96:	46c0      	nop			; (mov r8, r8)

00006b98 <__libc_init_array>:
    6b98:	b570      	push	{r4, r5, r6, lr}
    6b9a:	2600      	movs	r6, #0
    6b9c:	4d0c      	ldr	r5, [pc, #48]	; (6bd0 <__libc_init_array+0x38>)
    6b9e:	4c0d      	ldr	r4, [pc, #52]	; (6bd4 <__libc_init_array+0x3c>)
    6ba0:	1b64      	subs	r4, r4, r5
    6ba2:	10a4      	asrs	r4, r4, #2
    6ba4:	42a6      	cmp	r6, r4
    6ba6:	d109      	bne.n	6bbc <__libc_init_array+0x24>
    6ba8:	2600      	movs	r6, #0
    6baa:	f000 fda5 	bl	76f8 <_init>
    6bae:	4d0a      	ldr	r5, [pc, #40]	; (6bd8 <__libc_init_array+0x40>)
    6bb0:	4c0a      	ldr	r4, [pc, #40]	; (6bdc <__libc_init_array+0x44>)
    6bb2:	1b64      	subs	r4, r4, r5
    6bb4:	10a4      	asrs	r4, r4, #2
    6bb6:	42a6      	cmp	r6, r4
    6bb8:	d105      	bne.n	6bc6 <__libc_init_array+0x2e>
    6bba:	bd70      	pop	{r4, r5, r6, pc}
    6bbc:	00b3      	lsls	r3, r6, #2
    6bbe:	58eb      	ldr	r3, [r5, r3]
    6bc0:	4798      	blx	r3
    6bc2:	3601      	adds	r6, #1
    6bc4:	e7ee      	b.n	6ba4 <__libc_init_array+0xc>
    6bc6:	00b3      	lsls	r3, r6, #2
    6bc8:	58eb      	ldr	r3, [r5, r3]
    6bca:	4798      	blx	r3
    6bcc:	3601      	adds	r6, #1
    6bce:	e7f2      	b.n	6bb6 <__libc_init_array+0x1e>
    6bd0:	00007704 	.word	0x00007704
    6bd4:	00007704 	.word	0x00007704
    6bd8:	00007704 	.word	0x00007704
    6bdc:	00007708 	.word	0x00007708

00006be0 <memcpy>:
    6be0:	2300      	movs	r3, #0
    6be2:	b510      	push	{r4, lr}
    6be4:	429a      	cmp	r2, r3
    6be6:	d100      	bne.n	6bea <memcpy+0xa>
    6be8:	bd10      	pop	{r4, pc}
    6bea:	5ccc      	ldrb	r4, [r1, r3]
    6bec:	54c4      	strb	r4, [r0, r3]
    6bee:	3301      	adds	r3, #1
    6bf0:	e7f8      	b.n	6be4 <memcpy+0x4>

00006bf2 <memset>:
    6bf2:	0003      	movs	r3, r0
    6bf4:	1882      	adds	r2, r0, r2
    6bf6:	4293      	cmp	r3, r2
    6bf8:	d100      	bne.n	6bfc <memset+0xa>
    6bfa:	4770      	bx	lr
    6bfc:	7019      	strb	r1, [r3, #0]
    6bfe:	3301      	adds	r3, #1
    6c00:	e7f9      	b.n	6bf6 <memset+0x4>

00006c02 <setbuf>:
    6c02:	424a      	negs	r2, r1
    6c04:	414a      	adcs	r2, r1
    6c06:	2380      	movs	r3, #128	; 0x80
    6c08:	b510      	push	{r4, lr}
    6c0a:	0052      	lsls	r2, r2, #1
    6c0c:	00db      	lsls	r3, r3, #3
    6c0e:	f000 f801 	bl	6c14 <setvbuf>
    6c12:	bd10      	pop	{r4, pc}

00006c14 <setvbuf>:
    6c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c16:	001d      	movs	r5, r3
    6c18:	4b4f      	ldr	r3, [pc, #316]	; (6d58 <setvbuf+0x144>)
    6c1a:	b085      	sub	sp, #20
    6c1c:	681e      	ldr	r6, [r3, #0]
    6c1e:	0004      	movs	r4, r0
    6c20:	000f      	movs	r7, r1
    6c22:	9200      	str	r2, [sp, #0]
    6c24:	2e00      	cmp	r6, #0
    6c26:	d005      	beq.n	6c34 <setvbuf+0x20>
    6c28:	69b3      	ldr	r3, [r6, #24]
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d102      	bne.n	6c34 <setvbuf+0x20>
    6c2e:	0030      	movs	r0, r6
    6c30:	f000 f994 	bl	6f5c <__sinit>
    6c34:	4b49      	ldr	r3, [pc, #292]	; (6d5c <setvbuf+0x148>)
    6c36:	429c      	cmp	r4, r3
    6c38:	d150      	bne.n	6cdc <setvbuf+0xc8>
    6c3a:	6874      	ldr	r4, [r6, #4]
    6c3c:	9b00      	ldr	r3, [sp, #0]
    6c3e:	2b02      	cmp	r3, #2
    6c40:	d005      	beq.n	6c4e <setvbuf+0x3a>
    6c42:	2b01      	cmp	r3, #1
    6c44:	d900      	bls.n	6c48 <setvbuf+0x34>
    6c46:	e084      	b.n	6d52 <setvbuf+0x13e>
    6c48:	2d00      	cmp	r5, #0
    6c4a:	da00      	bge.n	6c4e <setvbuf+0x3a>
    6c4c:	e081      	b.n	6d52 <setvbuf+0x13e>
    6c4e:	0021      	movs	r1, r4
    6c50:	0030      	movs	r0, r6
    6c52:	f000 f915 	bl	6e80 <_fflush_r>
    6c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c58:	2900      	cmp	r1, #0
    6c5a:	d008      	beq.n	6c6e <setvbuf+0x5a>
    6c5c:	0023      	movs	r3, r4
    6c5e:	3344      	adds	r3, #68	; 0x44
    6c60:	4299      	cmp	r1, r3
    6c62:	d002      	beq.n	6c6a <setvbuf+0x56>
    6c64:	0030      	movs	r0, r6
    6c66:	f000 fa41 	bl	70ec <_free_r>
    6c6a:	2300      	movs	r3, #0
    6c6c:	6363      	str	r3, [r4, #52]	; 0x34
    6c6e:	2300      	movs	r3, #0
    6c70:	61a3      	str	r3, [r4, #24]
    6c72:	6063      	str	r3, [r4, #4]
    6c74:	89a3      	ldrh	r3, [r4, #12]
    6c76:	061b      	lsls	r3, r3, #24
    6c78:	d503      	bpl.n	6c82 <setvbuf+0x6e>
    6c7a:	6921      	ldr	r1, [r4, #16]
    6c7c:	0030      	movs	r0, r6
    6c7e:	f000 fa35 	bl	70ec <_free_r>
    6c82:	89a3      	ldrh	r3, [r4, #12]
    6c84:	4a36      	ldr	r2, [pc, #216]	; (6d60 <setvbuf+0x14c>)
    6c86:	4013      	ands	r3, r2
    6c88:	81a3      	strh	r3, [r4, #12]
    6c8a:	9b00      	ldr	r3, [sp, #0]
    6c8c:	2b02      	cmp	r3, #2
    6c8e:	d05a      	beq.n	6d46 <setvbuf+0x132>
    6c90:	ab03      	add	r3, sp, #12
    6c92:	aa02      	add	r2, sp, #8
    6c94:	0021      	movs	r1, r4
    6c96:	0030      	movs	r0, r6
    6c98:	f000 f9f6 	bl	7088 <__swhatbuf_r>
    6c9c:	89a3      	ldrh	r3, [r4, #12]
    6c9e:	4318      	orrs	r0, r3
    6ca0:	81a0      	strh	r0, [r4, #12]
    6ca2:	2d00      	cmp	r5, #0
    6ca4:	d124      	bne.n	6cf0 <setvbuf+0xdc>
    6ca6:	9d02      	ldr	r5, [sp, #8]
    6ca8:	0028      	movs	r0, r5
    6caa:	f000 fa15 	bl	70d8 <malloc>
    6cae:	9501      	str	r5, [sp, #4]
    6cb0:	1e07      	subs	r7, r0, #0
    6cb2:	d142      	bne.n	6d3a <setvbuf+0x126>
    6cb4:	9b02      	ldr	r3, [sp, #8]
    6cb6:	9301      	str	r3, [sp, #4]
    6cb8:	42ab      	cmp	r3, r5
    6cba:	d139      	bne.n	6d30 <setvbuf+0x11c>
    6cbc:	2001      	movs	r0, #1
    6cbe:	4240      	negs	r0, r0
    6cc0:	2302      	movs	r3, #2
    6cc2:	89a2      	ldrh	r2, [r4, #12]
    6cc4:	4313      	orrs	r3, r2
    6cc6:	81a3      	strh	r3, [r4, #12]
    6cc8:	2300      	movs	r3, #0
    6cca:	60a3      	str	r3, [r4, #8]
    6ccc:	0023      	movs	r3, r4
    6cce:	3347      	adds	r3, #71	; 0x47
    6cd0:	6023      	str	r3, [r4, #0]
    6cd2:	6123      	str	r3, [r4, #16]
    6cd4:	2301      	movs	r3, #1
    6cd6:	6163      	str	r3, [r4, #20]
    6cd8:	b005      	add	sp, #20
    6cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cdc:	4b21      	ldr	r3, [pc, #132]	; (6d64 <setvbuf+0x150>)
    6cde:	429c      	cmp	r4, r3
    6ce0:	d101      	bne.n	6ce6 <setvbuf+0xd2>
    6ce2:	68b4      	ldr	r4, [r6, #8]
    6ce4:	e7aa      	b.n	6c3c <setvbuf+0x28>
    6ce6:	4b20      	ldr	r3, [pc, #128]	; (6d68 <setvbuf+0x154>)
    6ce8:	429c      	cmp	r4, r3
    6cea:	d1a7      	bne.n	6c3c <setvbuf+0x28>
    6cec:	68f4      	ldr	r4, [r6, #12]
    6cee:	e7a5      	b.n	6c3c <setvbuf+0x28>
    6cf0:	2f00      	cmp	r7, #0
    6cf2:	d0d9      	beq.n	6ca8 <setvbuf+0x94>
    6cf4:	69b3      	ldr	r3, [r6, #24]
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d102      	bne.n	6d00 <setvbuf+0xec>
    6cfa:	0030      	movs	r0, r6
    6cfc:	f000 f92e 	bl	6f5c <__sinit>
    6d00:	9b00      	ldr	r3, [sp, #0]
    6d02:	2b01      	cmp	r3, #1
    6d04:	d103      	bne.n	6d0e <setvbuf+0xfa>
    6d06:	89a3      	ldrh	r3, [r4, #12]
    6d08:	9a00      	ldr	r2, [sp, #0]
    6d0a:	431a      	orrs	r2, r3
    6d0c:	81a2      	strh	r2, [r4, #12]
    6d0e:	2008      	movs	r0, #8
    6d10:	89a3      	ldrh	r3, [r4, #12]
    6d12:	6027      	str	r7, [r4, #0]
    6d14:	6127      	str	r7, [r4, #16]
    6d16:	6165      	str	r5, [r4, #20]
    6d18:	4018      	ands	r0, r3
    6d1a:	d018      	beq.n	6d4e <setvbuf+0x13a>
    6d1c:	2001      	movs	r0, #1
    6d1e:	4018      	ands	r0, r3
    6d20:	2300      	movs	r3, #0
    6d22:	4298      	cmp	r0, r3
    6d24:	d011      	beq.n	6d4a <setvbuf+0x136>
    6d26:	426d      	negs	r5, r5
    6d28:	60a3      	str	r3, [r4, #8]
    6d2a:	61a5      	str	r5, [r4, #24]
    6d2c:	0018      	movs	r0, r3
    6d2e:	e7d3      	b.n	6cd8 <setvbuf+0xc4>
    6d30:	9801      	ldr	r0, [sp, #4]
    6d32:	f000 f9d1 	bl	70d8 <malloc>
    6d36:	1e07      	subs	r7, r0, #0
    6d38:	d0c0      	beq.n	6cbc <setvbuf+0xa8>
    6d3a:	2380      	movs	r3, #128	; 0x80
    6d3c:	89a2      	ldrh	r2, [r4, #12]
    6d3e:	9d01      	ldr	r5, [sp, #4]
    6d40:	4313      	orrs	r3, r2
    6d42:	81a3      	strh	r3, [r4, #12]
    6d44:	e7d6      	b.n	6cf4 <setvbuf+0xe0>
    6d46:	2000      	movs	r0, #0
    6d48:	e7ba      	b.n	6cc0 <setvbuf+0xac>
    6d4a:	60a5      	str	r5, [r4, #8]
    6d4c:	e7c4      	b.n	6cd8 <setvbuf+0xc4>
    6d4e:	60a0      	str	r0, [r4, #8]
    6d50:	e7c2      	b.n	6cd8 <setvbuf+0xc4>
    6d52:	2001      	movs	r0, #1
    6d54:	4240      	negs	r0, r0
    6d56:	e7bf      	b.n	6cd8 <setvbuf+0xc4>
    6d58:	200000fc 	.word	0x200000fc
    6d5c:	000076b8 	.word	0x000076b8
    6d60:	fffff35c 	.word	0xfffff35c
    6d64:	000076d8 	.word	0x000076d8
    6d68:	00007698 	.word	0x00007698

00006d6c <__sflush_r>:
    6d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d6e:	898a      	ldrh	r2, [r1, #12]
    6d70:	0005      	movs	r5, r0
    6d72:	000c      	movs	r4, r1
    6d74:	0713      	lsls	r3, r2, #28
    6d76:	d460      	bmi.n	6e3a <__sflush_r+0xce>
    6d78:	684b      	ldr	r3, [r1, #4]
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	dc04      	bgt.n	6d88 <__sflush_r+0x1c>
    6d7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6d80:	2b00      	cmp	r3, #0
    6d82:	dc01      	bgt.n	6d88 <__sflush_r+0x1c>
    6d84:	2000      	movs	r0, #0
    6d86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6d8a:	2f00      	cmp	r7, #0
    6d8c:	d0fa      	beq.n	6d84 <__sflush_r+0x18>
    6d8e:	2300      	movs	r3, #0
    6d90:	682e      	ldr	r6, [r5, #0]
    6d92:	602b      	str	r3, [r5, #0]
    6d94:	2380      	movs	r3, #128	; 0x80
    6d96:	015b      	lsls	r3, r3, #5
    6d98:	401a      	ands	r2, r3
    6d9a:	d034      	beq.n	6e06 <__sflush_r+0x9a>
    6d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6d9e:	89a3      	ldrh	r3, [r4, #12]
    6da0:	075b      	lsls	r3, r3, #29
    6da2:	d506      	bpl.n	6db2 <__sflush_r+0x46>
    6da4:	6863      	ldr	r3, [r4, #4]
    6da6:	1ac0      	subs	r0, r0, r3
    6da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6daa:	2b00      	cmp	r3, #0
    6dac:	d001      	beq.n	6db2 <__sflush_r+0x46>
    6dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6db0:	1ac0      	subs	r0, r0, r3
    6db2:	0002      	movs	r2, r0
    6db4:	6a21      	ldr	r1, [r4, #32]
    6db6:	2300      	movs	r3, #0
    6db8:	0028      	movs	r0, r5
    6dba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6dbc:	47b8      	blx	r7
    6dbe:	89a1      	ldrh	r1, [r4, #12]
    6dc0:	1c43      	adds	r3, r0, #1
    6dc2:	d106      	bne.n	6dd2 <__sflush_r+0x66>
    6dc4:	682b      	ldr	r3, [r5, #0]
    6dc6:	2b1d      	cmp	r3, #29
    6dc8:	d831      	bhi.n	6e2e <__sflush_r+0xc2>
    6dca:	4a2c      	ldr	r2, [pc, #176]	; (6e7c <__sflush_r+0x110>)
    6dcc:	40da      	lsrs	r2, r3
    6dce:	07d3      	lsls	r3, r2, #31
    6dd0:	d52d      	bpl.n	6e2e <__sflush_r+0xc2>
    6dd2:	2300      	movs	r3, #0
    6dd4:	6063      	str	r3, [r4, #4]
    6dd6:	6923      	ldr	r3, [r4, #16]
    6dd8:	6023      	str	r3, [r4, #0]
    6dda:	04cb      	lsls	r3, r1, #19
    6ddc:	d505      	bpl.n	6dea <__sflush_r+0x7e>
    6dde:	1c43      	adds	r3, r0, #1
    6de0:	d102      	bne.n	6de8 <__sflush_r+0x7c>
    6de2:	682b      	ldr	r3, [r5, #0]
    6de4:	2b00      	cmp	r3, #0
    6de6:	d100      	bne.n	6dea <__sflush_r+0x7e>
    6de8:	6560      	str	r0, [r4, #84]	; 0x54
    6dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6dec:	602e      	str	r6, [r5, #0]
    6dee:	2900      	cmp	r1, #0
    6df0:	d0c8      	beq.n	6d84 <__sflush_r+0x18>
    6df2:	0023      	movs	r3, r4
    6df4:	3344      	adds	r3, #68	; 0x44
    6df6:	4299      	cmp	r1, r3
    6df8:	d002      	beq.n	6e00 <__sflush_r+0x94>
    6dfa:	0028      	movs	r0, r5
    6dfc:	f000 f976 	bl	70ec <_free_r>
    6e00:	2000      	movs	r0, #0
    6e02:	6360      	str	r0, [r4, #52]	; 0x34
    6e04:	e7bf      	b.n	6d86 <__sflush_r+0x1a>
    6e06:	2301      	movs	r3, #1
    6e08:	6a21      	ldr	r1, [r4, #32]
    6e0a:	0028      	movs	r0, r5
    6e0c:	47b8      	blx	r7
    6e0e:	1c43      	adds	r3, r0, #1
    6e10:	d1c5      	bne.n	6d9e <__sflush_r+0x32>
    6e12:	682b      	ldr	r3, [r5, #0]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d0c2      	beq.n	6d9e <__sflush_r+0x32>
    6e18:	2b1d      	cmp	r3, #29
    6e1a:	d001      	beq.n	6e20 <__sflush_r+0xb4>
    6e1c:	2b16      	cmp	r3, #22
    6e1e:	d101      	bne.n	6e24 <__sflush_r+0xb8>
    6e20:	602e      	str	r6, [r5, #0]
    6e22:	e7af      	b.n	6d84 <__sflush_r+0x18>
    6e24:	2340      	movs	r3, #64	; 0x40
    6e26:	89a2      	ldrh	r2, [r4, #12]
    6e28:	4313      	orrs	r3, r2
    6e2a:	81a3      	strh	r3, [r4, #12]
    6e2c:	e7ab      	b.n	6d86 <__sflush_r+0x1a>
    6e2e:	2340      	movs	r3, #64	; 0x40
    6e30:	430b      	orrs	r3, r1
    6e32:	2001      	movs	r0, #1
    6e34:	81a3      	strh	r3, [r4, #12]
    6e36:	4240      	negs	r0, r0
    6e38:	e7a5      	b.n	6d86 <__sflush_r+0x1a>
    6e3a:	690f      	ldr	r7, [r1, #16]
    6e3c:	2f00      	cmp	r7, #0
    6e3e:	d0a1      	beq.n	6d84 <__sflush_r+0x18>
    6e40:	680b      	ldr	r3, [r1, #0]
    6e42:	600f      	str	r7, [r1, #0]
    6e44:	1bdb      	subs	r3, r3, r7
    6e46:	9301      	str	r3, [sp, #4]
    6e48:	2300      	movs	r3, #0
    6e4a:	0792      	lsls	r2, r2, #30
    6e4c:	d100      	bne.n	6e50 <__sflush_r+0xe4>
    6e4e:	694b      	ldr	r3, [r1, #20]
    6e50:	60a3      	str	r3, [r4, #8]
    6e52:	9b01      	ldr	r3, [sp, #4]
    6e54:	2b00      	cmp	r3, #0
    6e56:	dc00      	bgt.n	6e5a <__sflush_r+0xee>
    6e58:	e794      	b.n	6d84 <__sflush_r+0x18>
    6e5a:	9b01      	ldr	r3, [sp, #4]
    6e5c:	003a      	movs	r2, r7
    6e5e:	6a21      	ldr	r1, [r4, #32]
    6e60:	0028      	movs	r0, r5
    6e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6e64:	47b0      	blx	r6
    6e66:	2800      	cmp	r0, #0
    6e68:	dc03      	bgt.n	6e72 <__sflush_r+0x106>
    6e6a:	2340      	movs	r3, #64	; 0x40
    6e6c:	89a2      	ldrh	r2, [r4, #12]
    6e6e:	4313      	orrs	r3, r2
    6e70:	e7df      	b.n	6e32 <__sflush_r+0xc6>
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	183f      	adds	r7, r7, r0
    6e76:	1a1b      	subs	r3, r3, r0
    6e78:	9301      	str	r3, [sp, #4]
    6e7a:	e7ea      	b.n	6e52 <__sflush_r+0xe6>
    6e7c:	20400001 	.word	0x20400001

00006e80 <_fflush_r>:
    6e80:	690b      	ldr	r3, [r1, #16]
    6e82:	b570      	push	{r4, r5, r6, lr}
    6e84:	0005      	movs	r5, r0
    6e86:	000c      	movs	r4, r1
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d101      	bne.n	6e90 <_fflush_r+0x10>
    6e8c:	2000      	movs	r0, #0
    6e8e:	bd70      	pop	{r4, r5, r6, pc}
    6e90:	2800      	cmp	r0, #0
    6e92:	d004      	beq.n	6e9e <_fflush_r+0x1e>
    6e94:	6983      	ldr	r3, [r0, #24]
    6e96:	2b00      	cmp	r3, #0
    6e98:	d101      	bne.n	6e9e <_fflush_r+0x1e>
    6e9a:	f000 f85f 	bl	6f5c <__sinit>
    6e9e:	4b0b      	ldr	r3, [pc, #44]	; (6ecc <_fflush_r+0x4c>)
    6ea0:	429c      	cmp	r4, r3
    6ea2:	d109      	bne.n	6eb8 <_fflush_r+0x38>
    6ea4:	686c      	ldr	r4, [r5, #4]
    6ea6:	220c      	movs	r2, #12
    6ea8:	5ea3      	ldrsh	r3, [r4, r2]
    6eaa:	2b00      	cmp	r3, #0
    6eac:	d0ee      	beq.n	6e8c <_fflush_r+0xc>
    6eae:	0021      	movs	r1, r4
    6eb0:	0028      	movs	r0, r5
    6eb2:	f7ff ff5b 	bl	6d6c <__sflush_r>
    6eb6:	e7ea      	b.n	6e8e <_fflush_r+0xe>
    6eb8:	4b05      	ldr	r3, [pc, #20]	; (6ed0 <_fflush_r+0x50>)
    6eba:	429c      	cmp	r4, r3
    6ebc:	d101      	bne.n	6ec2 <_fflush_r+0x42>
    6ebe:	68ac      	ldr	r4, [r5, #8]
    6ec0:	e7f1      	b.n	6ea6 <_fflush_r+0x26>
    6ec2:	4b04      	ldr	r3, [pc, #16]	; (6ed4 <_fflush_r+0x54>)
    6ec4:	429c      	cmp	r4, r3
    6ec6:	d1ee      	bne.n	6ea6 <_fflush_r+0x26>
    6ec8:	68ec      	ldr	r4, [r5, #12]
    6eca:	e7ec      	b.n	6ea6 <_fflush_r+0x26>
    6ecc:	000076b8 	.word	0x000076b8
    6ed0:	000076d8 	.word	0x000076d8
    6ed4:	00007698 	.word	0x00007698

00006ed8 <_cleanup_r>:
    6ed8:	b510      	push	{r4, lr}
    6eda:	4902      	ldr	r1, [pc, #8]	; (6ee4 <_cleanup_r+0xc>)
    6edc:	f000 f8b2 	bl	7044 <_fwalk_reent>
    6ee0:	bd10      	pop	{r4, pc}
    6ee2:	46c0      	nop			; (mov r8, r8)
    6ee4:	00006e81 	.word	0x00006e81

00006ee8 <std.isra.0>:
    6ee8:	2300      	movs	r3, #0
    6eea:	b510      	push	{r4, lr}
    6eec:	0004      	movs	r4, r0
    6eee:	6003      	str	r3, [r0, #0]
    6ef0:	6043      	str	r3, [r0, #4]
    6ef2:	6083      	str	r3, [r0, #8]
    6ef4:	8181      	strh	r1, [r0, #12]
    6ef6:	6643      	str	r3, [r0, #100]	; 0x64
    6ef8:	81c2      	strh	r2, [r0, #14]
    6efa:	6103      	str	r3, [r0, #16]
    6efc:	6143      	str	r3, [r0, #20]
    6efe:	6183      	str	r3, [r0, #24]
    6f00:	0019      	movs	r1, r3
    6f02:	2208      	movs	r2, #8
    6f04:	305c      	adds	r0, #92	; 0x5c
    6f06:	f7ff fe74 	bl	6bf2 <memset>
    6f0a:	4b05      	ldr	r3, [pc, #20]	; (6f20 <std.isra.0+0x38>)
    6f0c:	6224      	str	r4, [r4, #32]
    6f0e:	6263      	str	r3, [r4, #36]	; 0x24
    6f10:	4b04      	ldr	r3, [pc, #16]	; (6f24 <std.isra.0+0x3c>)
    6f12:	62a3      	str	r3, [r4, #40]	; 0x28
    6f14:	4b04      	ldr	r3, [pc, #16]	; (6f28 <std.isra.0+0x40>)
    6f16:	62e3      	str	r3, [r4, #44]	; 0x2c
    6f18:	4b04      	ldr	r3, [pc, #16]	; (6f2c <std.isra.0+0x44>)
    6f1a:	6323      	str	r3, [r4, #48]	; 0x30
    6f1c:	bd10      	pop	{r4, pc}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	00007261 	.word	0x00007261
    6f24:	00007289 	.word	0x00007289
    6f28:	000072c1 	.word	0x000072c1
    6f2c:	000072ed 	.word	0x000072ed

00006f30 <__sfmoreglue>:
    6f30:	b570      	push	{r4, r5, r6, lr}
    6f32:	2568      	movs	r5, #104	; 0x68
    6f34:	1e4a      	subs	r2, r1, #1
    6f36:	4355      	muls	r5, r2
    6f38:	000e      	movs	r6, r1
    6f3a:	0029      	movs	r1, r5
    6f3c:	3174      	adds	r1, #116	; 0x74
    6f3e:	f000 f91f 	bl	7180 <_malloc_r>
    6f42:	1e04      	subs	r4, r0, #0
    6f44:	d008      	beq.n	6f58 <__sfmoreglue+0x28>
    6f46:	2100      	movs	r1, #0
    6f48:	002a      	movs	r2, r5
    6f4a:	6001      	str	r1, [r0, #0]
    6f4c:	6046      	str	r6, [r0, #4]
    6f4e:	300c      	adds	r0, #12
    6f50:	60a0      	str	r0, [r4, #8]
    6f52:	3268      	adds	r2, #104	; 0x68
    6f54:	f7ff fe4d 	bl	6bf2 <memset>
    6f58:	0020      	movs	r0, r4
    6f5a:	bd70      	pop	{r4, r5, r6, pc}

00006f5c <__sinit>:
    6f5c:	6983      	ldr	r3, [r0, #24]
    6f5e:	b513      	push	{r0, r1, r4, lr}
    6f60:	0004      	movs	r4, r0
    6f62:	2b00      	cmp	r3, #0
    6f64:	d128      	bne.n	6fb8 <__sinit+0x5c>
    6f66:	6483      	str	r3, [r0, #72]	; 0x48
    6f68:	64c3      	str	r3, [r0, #76]	; 0x4c
    6f6a:	6503      	str	r3, [r0, #80]	; 0x50
    6f6c:	4b13      	ldr	r3, [pc, #76]	; (6fbc <__sinit+0x60>)
    6f6e:	4a14      	ldr	r2, [pc, #80]	; (6fc0 <__sinit+0x64>)
    6f70:	681b      	ldr	r3, [r3, #0]
    6f72:	6282      	str	r2, [r0, #40]	; 0x28
    6f74:	9301      	str	r3, [sp, #4]
    6f76:	4298      	cmp	r0, r3
    6f78:	d101      	bne.n	6f7e <__sinit+0x22>
    6f7a:	2301      	movs	r3, #1
    6f7c:	6183      	str	r3, [r0, #24]
    6f7e:	0020      	movs	r0, r4
    6f80:	f000 f820 	bl	6fc4 <__sfp>
    6f84:	6060      	str	r0, [r4, #4]
    6f86:	0020      	movs	r0, r4
    6f88:	f000 f81c 	bl	6fc4 <__sfp>
    6f8c:	60a0      	str	r0, [r4, #8]
    6f8e:	0020      	movs	r0, r4
    6f90:	f000 f818 	bl	6fc4 <__sfp>
    6f94:	2200      	movs	r2, #0
    6f96:	60e0      	str	r0, [r4, #12]
    6f98:	2104      	movs	r1, #4
    6f9a:	6860      	ldr	r0, [r4, #4]
    6f9c:	f7ff ffa4 	bl	6ee8 <std.isra.0>
    6fa0:	2201      	movs	r2, #1
    6fa2:	2109      	movs	r1, #9
    6fa4:	68a0      	ldr	r0, [r4, #8]
    6fa6:	f7ff ff9f 	bl	6ee8 <std.isra.0>
    6faa:	2202      	movs	r2, #2
    6fac:	2112      	movs	r1, #18
    6fae:	68e0      	ldr	r0, [r4, #12]
    6fb0:	f7ff ff9a 	bl	6ee8 <std.isra.0>
    6fb4:	2301      	movs	r3, #1
    6fb6:	61a3      	str	r3, [r4, #24]
    6fb8:	bd13      	pop	{r0, r1, r4, pc}
    6fba:	46c0      	nop			; (mov r8, r8)
    6fbc:	00007694 	.word	0x00007694
    6fc0:	00006ed9 	.word	0x00006ed9

00006fc4 <__sfp>:
    6fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc6:	4b1e      	ldr	r3, [pc, #120]	; (7040 <__sfp+0x7c>)
    6fc8:	0007      	movs	r7, r0
    6fca:	681e      	ldr	r6, [r3, #0]
    6fcc:	69b3      	ldr	r3, [r6, #24]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d102      	bne.n	6fd8 <__sfp+0x14>
    6fd2:	0030      	movs	r0, r6
    6fd4:	f7ff ffc2 	bl	6f5c <__sinit>
    6fd8:	3648      	adds	r6, #72	; 0x48
    6fda:	68b4      	ldr	r4, [r6, #8]
    6fdc:	6873      	ldr	r3, [r6, #4]
    6fde:	3b01      	subs	r3, #1
    6fe0:	d504      	bpl.n	6fec <__sfp+0x28>
    6fe2:	6833      	ldr	r3, [r6, #0]
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d007      	beq.n	6ff8 <__sfp+0x34>
    6fe8:	6836      	ldr	r6, [r6, #0]
    6fea:	e7f6      	b.n	6fda <__sfp+0x16>
    6fec:	220c      	movs	r2, #12
    6fee:	5ea5      	ldrsh	r5, [r4, r2]
    6ff0:	2d00      	cmp	r5, #0
    6ff2:	d00d      	beq.n	7010 <__sfp+0x4c>
    6ff4:	3468      	adds	r4, #104	; 0x68
    6ff6:	e7f2      	b.n	6fde <__sfp+0x1a>
    6ff8:	2104      	movs	r1, #4
    6ffa:	0038      	movs	r0, r7
    6ffc:	f7ff ff98 	bl	6f30 <__sfmoreglue>
    7000:	6030      	str	r0, [r6, #0]
    7002:	2800      	cmp	r0, #0
    7004:	d1f0      	bne.n	6fe8 <__sfp+0x24>
    7006:	230c      	movs	r3, #12
    7008:	0004      	movs	r4, r0
    700a:	603b      	str	r3, [r7, #0]
    700c:	0020      	movs	r0, r4
    700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7010:	2301      	movs	r3, #1
    7012:	0020      	movs	r0, r4
    7014:	425b      	negs	r3, r3
    7016:	81e3      	strh	r3, [r4, #14]
    7018:	3302      	adds	r3, #2
    701a:	81a3      	strh	r3, [r4, #12]
    701c:	6665      	str	r5, [r4, #100]	; 0x64
    701e:	6025      	str	r5, [r4, #0]
    7020:	60a5      	str	r5, [r4, #8]
    7022:	6065      	str	r5, [r4, #4]
    7024:	6125      	str	r5, [r4, #16]
    7026:	6165      	str	r5, [r4, #20]
    7028:	61a5      	str	r5, [r4, #24]
    702a:	2208      	movs	r2, #8
    702c:	0029      	movs	r1, r5
    702e:	305c      	adds	r0, #92	; 0x5c
    7030:	f7ff fddf 	bl	6bf2 <memset>
    7034:	6365      	str	r5, [r4, #52]	; 0x34
    7036:	63a5      	str	r5, [r4, #56]	; 0x38
    7038:	64a5      	str	r5, [r4, #72]	; 0x48
    703a:	64e5      	str	r5, [r4, #76]	; 0x4c
    703c:	e7e6      	b.n	700c <__sfp+0x48>
    703e:	46c0      	nop			; (mov r8, r8)
    7040:	00007694 	.word	0x00007694

00007044 <_fwalk_reent>:
    7044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7046:	0004      	movs	r4, r0
    7048:	0007      	movs	r7, r0
    704a:	2600      	movs	r6, #0
    704c:	9101      	str	r1, [sp, #4]
    704e:	3448      	adds	r4, #72	; 0x48
    7050:	2c00      	cmp	r4, #0
    7052:	d101      	bne.n	7058 <_fwalk_reent+0x14>
    7054:	0030      	movs	r0, r6
    7056:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7058:	6863      	ldr	r3, [r4, #4]
    705a:	68a5      	ldr	r5, [r4, #8]
    705c:	9300      	str	r3, [sp, #0]
    705e:	9b00      	ldr	r3, [sp, #0]
    7060:	3b01      	subs	r3, #1
    7062:	9300      	str	r3, [sp, #0]
    7064:	d501      	bpl.n	706a <_fwalk_reent+0x26>
    7066:	6824      	ldr	r4, [r4, #0]
    7068:	e7f2      	b.n	7050 <_fwalk_reent+0xc>
    706a:	89ab      	ldrh	r3, [r5, #12]
    706c:	2b01      	cmp	r3, #1
    706e:	d908      	bls.n	7082 <_fwalk_reent+0x3e>
    7070:	220e      	movs	r2, #14
    7072:	5eab      	ldrsh	r3, [r5, r2]
    7074:	3301      	adds	r3, #1
    7076:	d004      	beq.n	7082 <_fwalk_reent+0x3e>
    7078:	0029      	movs	r1, r5
    707a:	0038      	movs	r0, r7
    707c:	9b01      	ldr	r3, [sp, #4]
    707e:	4798      	blx	r3
    7080:	4306      	orrs	r6, r0
    7082:	3568      	adds	r5, #104	; 0x68
    7084:	e7eb      	b.n	705e <_fwalk_reent+0x1a>
	...

00007088 <__swhatbuf_r>:
    7088:	b570      	push	{r4, r5, r6, lr}
    708a:	000e      	movs	r6, r1
    708c:	001d      	movs	r5, r3
    708e:	230e      	movs	r3, #14
    7090:	5ec9      	ldrsh	r1, [r1, r3]
    7092:	b090      	sub	sp, #64	; 0x40
    7094:	0014      	movs	r4, r2
    7096:	2900      	cmp	r1, #0
    7098:	da07      	bge.n	70aa <__swhatbuf_r+0x22>
    709a:	2300      	movs	r3, #0
    709c:	602b      	str	r3, [r5, #0]
    709e:	89b3      	ldrh	r3, [r6, #12]
    70a0:	061b      	lsls	r3, r3, #24
    70a2:	d411      	bmi.n	70c8 <__swhatbuf_r+0x40>
    70a4:	2380      	movs	r3, #128	; 0x80
    70a6:	00db      	lsls	r3, r3, #3
    70a8:	e00f      	b.n	70ca <__swhatbuf_r+0x42>
    70aa:	aa01      	add	r2, sp, #4
    70ac:	f000 f94a 	bl	7344 <_fstat_r>
    70b0:	2800      	cmp	r0, #0
    70b2:	dbf2      	blt.n	709a <__swhatbuf_r+0x12>
    70b4:	22f0      	movs	r2, #240	; 0xf0
    70b6:	9b02      	ldr	r3, [sp, #8]
    70b8:	0212      	lsls	r2, r2, #8
    70ba:	4013      	ands	r3, r2
    70bc:	4a05      	ldr	r2, [pc, #20]	; (70d4 <__swhatbuf_r+0x4c>)
    70be:	189b      	adds	r3, r3, r2
    70c0:	425a      	negs	r2, r3
    70c2:	4153      	adcs	r3, r2
    70c4:	602b      	str	r3, [r5, #0]
    70c6:	e7ed      	b.n	70a4 <__swhatbuf_r+0x1c>
    70c8:	2340      	movs	r3, #64	; 0x40
    70ca:	2000      	movs	r0, #0
    70cc:	6023      	str	r3, [r4, #0]
    70ce:	b010      	add	sp, #64	; 0x40
    70d0:	bd70      	pop	{r4, r5, r6, pc}
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	ffffe000 	.word	0xffffe000

000070d8 <malloc>:
    70d8:	b510      	push	{r4, lr}
    70da:	4b03      	ldr	r3, [pc, #12]	; (70e8 <malloc+0x10>)
    70dc:	0001      	movs	r1, r0
    70de:	6818      	ldr	r0, [r3, #0]
    70e0:	f000 f84e 	bl	7180 <_malloc_r>
    70e4:	bd10      	pop	{r4, pc}
    70e6:	46c0      	nop			; (mov r8, r8)
    70e8:	200000fc 	.word	0x200000fc

000070ec <_free_r>:
    70ec:	b570      	push	{r4, r5, r6, lr}
    70ee:	0005      	movs	r5, r0
    70f0:	2900      	cmp	r1, #0
    70f2:	d010      	beq.n	7116 <_free_r+0x2a>
    70f4:	1f0c      	subs	r4, r1, #4
    70f6:	6823      	ldr	r3, [r4, #0]
    70f8:	2b00      	cmp	r3, #0
    70fa:	da00      	bge.n	70fe <_free_r+0x12>
    70fc:	18e4      	adds	r4, r4, r3
    70fe:	0028      	movs	r0, r5
    7100:	f000 f946 	bl	7390 <__malloc_lock>
    7104:	4a1d      	ldr	r2, [pc, #116]	; (717c <_free_r+0x90>)
    7106:	6813      	ldr	r3, [r2, #0]
    7108:	2b00      	cmp	r3, #0
    710a:	d105      	bne.n	7118 <_free_r+0x2c>
    710c:	6063      	str	r3, [r4, #4]
    710e:	6014      	str	r4, [r2, #0]
    7110:	0028      	movs	r0, r5
    7112:	f000 f93e 	bl	7392 <__malloc_unlock>
    7116:	bd70      	pop	{r4, r5, r6, pc}
    7118:	42a3      	cmp	r3, r4
    711a:	d909      	bls.n	7130 <_free_r+0x44>
    711c:	6821      	ldr	r1, [r4, #0]
    711e:	1860      	adds	r0, r4, r1
    7120:	4283      	cmp	r3, r0
    7122:	d1f3      	bne.n	710c <_free_r+0x20>
    7124:	6818      	ldr	r0, [r3, #0]
    7126:	685b      	ldr	r3, [r3, #4]
    7128:	1841      	adds	r1, r0, r1
    712a:	6021      	str	r1, [r4, #0]
    712c:	e7ee      	b.n	710c <_free_r+0x20>
    712e:	0013      	movs	r3, r2
    7130:	685a      	ldr	r2, [r3, #4]
    7132:	2a00      	cmp	r2, #0
    7134:	d001      	beq.n	713a <_free_r+0x4e>
    7136:	42a2      	cmp	r2, r4
    7138:	d9f9      	bls.n	712e <_free_r+0x42>
    713a:	6819      	ldr	r1, [r3, #0]
    713c:	1858      	adds	r0, r3, r1
    713e:	42a0      	cmp	r0, r4
    7140:	d10b      	bne.n	715a <_free_r+0x6e>
    7142:	6820      	ldr	r0, [r4, #0]
    7144:	1809      	adds	r1, r1, r0
    7146:	1858      	adds	r0, r3, r1
    7148:	6019      	str	r1, [r3, #0]
    714a:	4282      	cmp	r2, r0
    714c:	d1e0      	bne.n	7110 <_free_r+0x24>
    714e:	6810      	ldr	r0, [r2, #0]
    7150:	6852      	ldr	r2, [r2, #4]
    7152:	1841      	adds	r1, r0, r1
    7154:	6019      	str	r1, [r3, #0]
    7156:	605a      	str	r2, [r3, #4]
    7158:	e7da      	b.n	7110 <_free_r+0x24>
    715a:	42a0      	cmp	r0, r4
    715c:	d902      	bls.n	7164 <_free_r+0x78>
    715e:	230c      	movs	r3, #12
    7160:	602b      	str	r3, [r5, #0]
    7162:	e7d5      	b.n	7110 <_free_r+0x24>
    7164:	6821      	ldr	r1, [r4, #0]
    7166:	1860      	adds	r0, r4, r1
    7168:	4282      	cmp	r2, r0
    716a:	d103      	bne.n	7174 <_free_r+0x88>
    716c:	6810      	ldr	r0, [r2, #0]
    716e:	6852      	ldr	r2, [r2, #4]
    7170:	1841      	adds	r1, r0, r1
    7172:	6021      	str	r1, [r4, #0]
    7174:	6062      	str	r2, [r4, #4]
    7176:	605c      	str	r4, [r3, #4]
    7178:	e7ca      	b.n	7110 <_free_r+0x24>
    717a:	46c0      	nop			; (mov r8, r8)
    717c:	200002e8 	.word	0x200002e8

00007180 <_malloc_r>:
    7180:	2303      	movs	r3, #3
    7182:	b570      	push	{r4, r5, r6, lr}
    7184:	1ccd      	adds	r5, r1, #3
    7186:	439d      	bics	r5, r3
    7188:	3508      	adds	r5, #8
    718a:	0006      	movs	r6, r0
    718c:	2d0c      	cmp	r5, #12
    718e:	d21e      	bcs.n	71ce <_malloc_r+0x4e>
    7190:	250c      	movs	r5, #12
    7192:	42a9      	cmp	r1, r5
    7194:	d81d      	bhi.n	71d2 <_malloc_r+0x52>
    7196:	0030      	movs	r0, r6
    7198:	f000 f8fa 	bl	7390 <__malloc_lock>
    719c:	4a25      	ldr	r2, [pc, #148]	; (7234 <_malloc_r+0xb4>)
    719e:	6814      	ldr	r4, [r2, #0]
    71a0:	0021      	movs	r1, r4
    71a2:	2900      	cmp	r1, #0
    71a4:	d119      	bne.n	71da <_malloc_r+0x5a>
    71a6:	4c24      	ldr	r4, [pc, #144]	; (7238 <_malloc_r+0xb8>)
    71a8:	6823      	ldr	r3, [r4, #0]
    71aa:	2b00      	cmp	r3, #0
    71ac:	d103      	bne.n	71b6 <_malloc_r+0x36>
    71ae:	0030      	movs	r0, r6
    71b0:	f000 f844 	bl	723c <_sbrk_r>
    71b4:	6020      	str	r0, [r4, #0]
    71b6:	0029      	movs	r1, r5
    71b8:	0030      	movs	r0, r6
    71ba:	f000 f83f 	bl	723c <_sbrk_r>
    71be:	1c43      	adds	r3, r0, #1
    71c0:	d12c      	bne.n	721c <_malloc_r+0x9c>
    71c2:	230c      	movs	r3, #12
    71c4:	0030      	movs	r0, r6
    71c6:	6033      	str	r3, [r6, #0]
    71c8:	f000 f8e3 	bl	7392 <__malloc_unlock>
    71cc:	e003      	b.n	71d6 <_malloc_r+0x56>
    71ce:	2d00      	cmp	r5, #0
    71d0:	dadf      	bge.n	7192 <_malloc_r+0x12>
    71d2:	230c      	movs	r3, #12
    71d4:	6033      	str	r3, [r6, #0]
    71d6:	2000      	movs	r0, #0
    71d8:	bd70      	pop	{r4, r5, r6, pc}
    71da:	680b      	ldr	r3, [r1, #0]
    71dc:	1b5b      	subs	r3, r3, r5
    71de:	d41a      	bmi.n	7216 <_malloc_r+0x96>
    71e0:	2b0b      	cmp	r3, #11
    71e2:	d903      	bls.n	71ec <_malloc_r+0x6c>
    71e4:	600b      	str	r3, [r1, #0]
    71e6:	18cc      	adds	r4, r1, r3
    71e8:	6025      	str	r5, [r4, #0]
    71ea:	e003      	b.n	71f4 <_malloc_r+0x74>
    71ec:	428c      	cmp	r4, r1
    71ee:	d10e      	bne.n	720e <_malloc_r+0x8e>
    71f0:	6863      	ldr	r3, [r4, #4]
    71f2:	6013      	str	r3, [r2, #0]
    71f4:	0030      	movs	r0, r6
    71f6:	f000 f8cc 	bl	7392 <__malloc_unlock>
    71fa:	0020      	movs	r0, r4
    71fc:	2207      	movs	r2, #7
    71fe:	300b      	adds	r0, #11
    7200:	1d23      	adds	r3, r4, #4
    7202:	4390      	bics	r0, r2
    7204:	1ac3      	subs	r3, r0, r3
    7206:	d0e7      	beq.n	71d8 <_malloc_r+0x58>
    7208:	425a      	negs	r2, r3
    720a:	50e2      	str	r2, [r4, r3]
    720c:	e7e4      	b.n	71d8 <_malloc_r+0x58>
    720e:	684b      	ldr	r3, [r1, #4]
    7210:	6063      	str	r3, [r4, #4]
    7212:	000c      	movs	r4, r1
    7214:	e7ee      	b.n	71f4 <_malloc_r+0x74>
    7216:	000c      	movs	r4, r1
    7218:	6849      	ldr	r1, [r1, #4]
    721a:	e7c2      	b.n	71a2 <_malloc_r+0x22>
    721c:	2303      	movs	r3, #3
    721e:	1cc4      	adds	r4, r0, #3
    7220:	439c      	bics	r4, r3
    7222:	42a0      	cmp	r0, r4
    7224:	d0e0      	beq.n	71e8 <_malloc_r+0x68>
    7226:	1a21      	subs	r1, r4, r0
    7228:	0030      	movs	r0, r6
    722a:	f000 f807 	bl	723c <_sbrk_r>
    722e:	1c43      	adds	r3, r0, #1
    7230:	d1da      	bne.n	71e8 <_malloc_r+0x68>
    7232:	e7c6      	b.n	71c2 <_malloc_r+0x42>
    7234:	200002e8 	.word	0x200002e8
    7238:	200002ec 	.word	0x200002ec

0000723c <_sbrk_r>:
    723c:	2300      	movs	r3, #0
    723e:	b570      	push	{r4, r5, r6, lr}
    7240:	4c06      	ldr	r4, [pc, #24]	; (725c <_sbrk_r+0x20>)
    7242:	0005      	movs	r5, r0
    7244:	0008      	movs	r0, r1
    7246:	6023      	str	r3, [r4, #0]
    7248:	f7ff f9c0 	bl	65cc <_sbrk>
    724c:	1c43      	adds	r3, r0, #1
    724e:	d103      	bne.n	7258 <_sbrk_r+0x1c>
    7250:	6823      	ldr	r3, [r4, #0]
    7252:	2b00      	cmp	r3, #0
    7254:	d000      	beq.n	7258 <_sbrk_r+0x1c>
    7256:	602b      	str	r3, [r5, #0]
    7258:	bd70      	pop	{r4, r5, r6, pc}
    725a:	46c0      	nop			; (mov r8, r8)
    725c:	20000af0 	.word	0x20000af0

00007260 <__sread>:
    7260:	b570      	push	{r4, r5, r6, lr}
    7262:	000c      	movs	r4, r1
    7264:	250e      	movs	r5, #14
    7266:	5f49      	ldrsh	r1, [r1, r5]
    7268:	f000 f894 	bl	7394 <_read_r>
    726c:	2800      	cmp	r0, #0
    726e:	db03      	blt.n	7278 <__sread+0x18>
    7270:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7272:	181b      	adds	r3, r3, r0
    7274:	6563      	str	r3, [r4, #84]	; 0x54
    7276:	bd70      	pop	{r4, r5, r6, pc}
    7278:	89a3      	ldrh	r3, [r4, #12]
    727a:	4a02      	ldr	r2, [pc, #8]	; (7284 <__sread+0x24>)
    727c:	4013      	ands	r3, r2
    727e:	81a3      	strh	r3, [r4, #12]
    7280:	e7f9      	b.n	7276 <__sread+0x16>
    7282:	46c0      	nop			; (mov r8, r8)
    7284:	ffffefff 	.word	0xffffefff

00007288 <__swrite>:
    7288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    728a:	001f      	movs	r7, r3
    728c:	898b      	ldrh	r3, [r1, #12]
    728e:	0005      	movs	r5, r0
    7290:	000c      	movs	r4, r1
    7292:	0016      	movs	r6, r2
    7294:	05db      	lsls	r3, r3, #23
    7296:	d505      	bpl.n	72a4 <__swrite+0x1c>
    7298:	230e      	movs	r3, #14
    729a:	5ec9      	ldrsh	r1, [r1, r3]
    729c:	2200      	movs	r2, #0
    729e:	2302      	movs	r3, #2
    72a0:	f000 f862 	bl	7368 <_lseek_r>
    72a4:	89a3      	ldrh	r3, [r4, #12]
    72a6:	4a05      	ldr	r2, [pc, #20]	; (72bc <__swrite+0x34>)
    72a8:	0028      	movs	r0, r5
    72aa:	4013      	ands	r3, r2
    72ac:	81a3      	strh	r3, [r4, #12]
    72ae:	0032      	movs	r2, r6
    72b0:	230e      	movs	r3, #14
    72b2:	5ee1      	ldrsh	r1, [r4, r3]
    72b4:	003b      	movs	r3, r7
    72b6:	f000 f81f 	bl	72f8 <_write_r>
    72ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72bc:	ffffefff 	.word	0xffffefff

000072c0 <__sseek>:
    72c0:	b570      	push	{r4, r5, r6, lr}
    72c2:	000c      	movs	r4, r1
    72c4:	250e      	movs	r5, #14
    72c6:	5f49      	ldrsh	r1, [r1, r5]
    72c8:	f000 f84e 	bl	7368 <_lseek_r>
    72cc:	89a3      	ldrh	r3, [r4, #12]
    72ce:	1c42      	adds	r2, r0, #1
    72d0:	d103      	bne.n	72da <__sseek+0x1a>
    72d2:	4a05      	ldr	r2, [pc, #20]	; (72e8 <__sseek+0x28>)
    72d4:	4013      	ands	r3, r2
    72d6:	81a3      	strh	r3, [r4, #12]
    72d8:	bd70      	pop	{r4, r5, r6, pc}
    72da:	2280      	movs	r2, #128	; 0x80
    72dc:	0152      	lsls	r2, r2, #5
    72de:	4313      	orrs	r3, r2
    72e0:	81a3      	strh	r3, [r4, #12]
    72e2:	6560      	str	r0, [r4, #84]	; 0x54
    72e4:	e7f8      	b.n	72d8 <__sseek+0x18>
    72e6:	46c0      	nop			; (mov r8, r8)
    72e8:	ffffefff 	.word	0xffffefff

000072ec <__sclose>:
    72ec:	b510      	push	{r4, lr}
    72ee:	230e      	movs	r3, #14
    72f0:	5ec9      	ldrsh	r1, [r1, r3]
    72f2:	f000 f815 	bl	7320 <_close_r>
    72f6:	bd10      	pop	{r4, pc}

000072f8 <_write_r>:
    72f8:	b570      	push	{r4, r5, r6, lr}
    72fa:	0005      	movs	r5, r0
    72fc:	0008      	movs	r0, r1
    72fe:	0011      	movs	r1, r2
    7300:	2200      	movs	r2, #0
    7302:	4c06      	ldr	r4, [pc, #24]	; (731c <_write_r+0x24>)
    7304:	6022      	str	r2, [r4, #0]
    7306:	001a      	movs	r2, r3
    7308:	f7fc f9d0 	bl	36ac <_write>
    730c:	1c43      	adds	r3, r0, #1
    730e:	d103      	bne.n	7318 <_write_r+0x20>
    7310:	6823      	ldr	r3, [r4, #0]
    7312:	2b00      	cmp	r3, #0
    7314:	d000      	beq.n	7318 <_write_r+0x20>
    7316:	602b      	str	r3, [r5, #0]
    7318:	bd70      	pop	{r4, r5, r6, pc}
    731a:	46c0      	nop			; (mov r8, r8)
    731c:	20000af0 	.word	0x20000af0

00007320 <_close_r>:
    7320:	2300      	movs	r3, #0
    7322:	b570      	push	{r4, r5, r6, lr}
    7324:	4c06      	ldr	r4, [pc, #24]	; (7340 <_close_r+0x20>)
    7326:	0005      	movs	r5, r0
    7328:	0008      	movs	r0, r1
    732a:	6023      	str	r3, [r4, #0]
    732c:	f7ff f960 	bl	65f0 <_close>
    7330:	1c43      	adds	r3, r0, #1
    7332:	d103      	bne.n	733c <_close_r+0x1c>
    7334:	6823      	ldr	r3, [r4, #0]
    7336:	2b00      	cmp	r3, #0
    7338:	d000      	beq.n	733c <_close_r+0x1c>
    733a:	602b      	str	r3, [r5, #0]
    733c:	bd70      	pop	{r4, r5, r6, pc}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	20000af0 	.word	0x20000af0

00007344 <_fstat_r>:
    7344:	2300      	movs	r3, #0
    7346:	b570      	push	{r4, r5, r6, lr}
    7348:	4c06      	ldr	r4, [pc, #24]	; (7364 <_fstat_r+0x20>)
    734a:	0005      	movs	r5, r0
    734c:	0008      	movs	r0, r1
    734e:	0011      	movs	r1, r2
    7350:	6023      	str	r3, [r4, #0]
    7352:	f7ff f950 	bl	65f6 <_fstat>
    7356:	1c43      	adds	r3, r0, #1
    7358:	d103      	bne.n	7362 <_fstat_r+0x1e>
    735a:	6823      	ldr	r3, [r4, #0]
    735c:	2b00      	cmp	r3, #0
    735e:	d000      	beq.n	7362 <_fstat_r+0x1e>
    7360:	602b      	str	r3, [r5, #0]
    7362:	bd70      	pop	{r4, r5, r6, pc}
    7364:	20000af0 	.word	0x20000af0

00007368 <_lseek_r>:
    7368:	b570      	push	{r4, r5, r6, lr}
    736a:	0005      	movs	r5, r0
    736c:	0008      	movs	r0, r1
    736e:	0011      	movs	r1, r2
    7370:	2200      	movs	r2, #0
    7372:	4c06      	ldr	r4, [pc, #24]	; (738c <_lseek_r+0x24>)
    7374:	6022      	str	r2, [r4, #0]
    7376:	001a      	movs	r2, r3
    7378:	f7ff f942 	bl	6600 <_lseek>
    737c:	1c43      	adds	r3, r0, #1
    737e:	d103      	bne.n	7388 <_lseek_r+0x20>
    7380:	6823      	ldr	r3, [r4, #0]
    7382:	2b00      	cmp	r3, #0
    7384:	d000      	beq.n	7388 <_lseek_r+0x20>
    7386:	602b      	str	r3, [r5, #0]
    7388:	bd70      	pop	{r4, r5, r6, pc}
    738a:	46c0      	nop			; (mov r8, r8)
    738c:	20000af0 	.word	0x20000af0

00007390 <__malloc_lock>:
    7390:	4770      	bx	lr

00007392 <__malloc_unlock>:
    7392:	4770      	bx	lr

00007394 <_read_r>:
    7394:	b570      	push	{r4, r5, r6, lr}
    7396:	0005      	movs	r5, r0
    7398:	0008      	movs	r0, r1
    739a:	0011      	movs	r1, r2
    739c:	2200      	movs	r2, #0
    739e:	4c06      	ldr	r4, [pc, #24]	; (73b8 <_read_r+0x24>)
    73a0:	6022      	str	r2, [r4, #0]
    73a2:	001a      	movs	r2, r3
    73a4:	f7fc f960 	bl	3668 <_read>
    73a8:	1c43      	adds	r3, r0, #1
    73aa:	d103      	bne.n	73b4 <_read_r+0x20>
    73ac:	6823      	ldr	r3, [r4, #0]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d000      	beq.n	73b4 <_read_r+0x20>
    73b2:	602b      	str	r3, [r5, #0]
    73b4:	bd70      	pop	{r4, r5, r6, pc}
    73b6:	46c0      	nop			; (mov r8, r8)
    73b8:	20000af0 	.word	0x20000af0
    73bc:	42002c00 	.word	0x42002c00
    73c0:	42003000 	.word	0x42003000
    73c4:	42003400 	.word	0x42003400
    73c8:	42003800 	.word	0x42003800
    73cc:	42003c00 	.word	0x42003c00
    73d0:	10000800 	.word	0x10000800
    73d4:	40002000 	.word	0x40002000
    73d8:	00008000 	.word	0x00008000

000073dc <mmc_trans_multipliers>:
    73dc:	00000000 0000000a 0000000c 0000000d     ................
    73ec:	0000000f 00000014 0000001a 0000001e     ................
    73fc:	00000023 00000028 0000002d 00000034     #...(...-...4...
    740c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000741c <sd_mmc_trans_units>:
    741c:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00007438 <sd_trans_multipliers>:
    7438:	00000000 0000000a 0000000c 0000000d     ................
    7448:	0000000f 00000014 00000019 0000001e     ................
    7458:	00000023 00000028 0000002d 00000032     #...(...-...2...
    7468:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7478:	0000135a 00001430 00001430 0000129c     Z...0...0.......
    7488:	00001430 00001430 00001430 00001430     0...0...0...0...
    7498:	00001430 00001430 00001430 00001430     0...0...0...0...
    74a8:	00001430 00001430 00001430 00001430     0...0...0...0...
    74b8:	00001430 00001430 000012c0 00001430     0...0.......0...
    74c8:	00001430 00001430 00001430 00001430     0...0...0...0...
    74d8:	00001430 00001430 0000134a 000013de     0...0...J.......
    74e8:	00001430 00001430 000013fe 00001430     0...0.......0...
    74f8:	00001430 00001430 00001430 00001430     0...0...0...0...
    7508:	00001430 00001386 00001430 00001430     0.......0...0...
    7518:	00001420 00001430 00001428 00001430      ...0...(...0...
    7528:	00001430 00001430 00001430 00001416     0...0...0.......
    7538:	00001430 00001430 00001430 00001430     0...0...0...0...
    7548:	00001430 00001430 00001430 00001430     0...0...0...0...
    7558:	00001430 00001430 00001430 00001430     0...0...0...0...
    7568:	00001430 00001430 00001430 00001430     0...0...0...0...
    7578:	00001430 00001430 00001430 00001430     0...0...0...0...
    7588:	00001430 00001430 00001430 00001430     0...0...0...0...
    7598:	00001430 00001430 00001430 00001430     0...0...0...0...
    75a8:	00001430 00001430 00001430 00001430     0...0...0...0...
    75b8:	00001430 00001430 00001430 00001430     0...0...0...0...
    75c8:	00001430 00001430 00001430 00001430     0...0...0...0...
    75d8:	00001430 00001430 00001352 31333231     0...0...R...1231
    75e8:	32313332 33323133 00000000 000024ca     23123123.....$..
    75f8:	000024c6 000024c6 00002534 00002534     .$...$..4%..4%..
    7608:	000024de 000024d0 000024e4 00002522     .$...$...$.."%..
    7618:	000026b8 00002698 00002698 00002724     .&...&...&..$'..
    7628:	000026aa 000026c6 0000269c 000026d4     .&...&...&...&..
    7638:	00002714 00003e4c 00003e5a 00003ef4     .'..L>..Z>...>..
    7648:	00003f94 00003ff8                       .?...?..

00007650 <_usb_device_irq_bits>:
    7650:	00080004 00800070 01000001 00000200     ....p...........

00007660 <_usb_endpoint_irq_bits>:
    7660:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    7670:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    7680:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    7690:	00002249                                I"..

00007694 <_global_impure_ptr>:
    7694:	20000100                                ... 

00007698 <__sf_fake_stderr>:
	...

000076b8 <__sf_fake_stdin>:
	...

000076d8 <__sf_fake_stdout>:
	...

000076f8 <_init>:
    76f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76fa:	46c0      	nop			; (mov r8, r8)
    76fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    76fe:	bc08      	pop	{r3}
    7700:	469e      	mov	lr, r3
    7702:	4770      	bx	lr

00007704 <__init_array_start>:
    7704:	000000dd 	.word	0x000000dd

00007708 <_fini>:
    7708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    770a:	46c0      	nop			; (mov r8, r8)
    770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    770e:	bc08      	pop	{r3}
    7710:	469e      	mov	lr, r3
    7712:	4770      	bx	lr

00007714 <__fini_array_start>:
    7714:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	0e5d 0000 14d1 0000 14f9 0000 0e01 0000     ]...............
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12580>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 76b8 0000 76d8 0000 7698 0000     .....v...v...v..
	...
