
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e5c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00008e5c  00008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  00008e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000f04  20000160  00008fc4  00020160  2**2
                  ALLOC
  4 .stack        00002004  20001064  00009ec8  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006c306  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000087f3  00000000  00000000  0008c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015292  00000000  00000000  00094cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001000  00000000  00000000  000a9f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000018b0  00000000  00000000  000aaf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002658f  00000000  00000000  000ac81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f348  00000000  00000000  000d2dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009f87b  00000000  00000000  000f20f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000337c  00000000  00000000  00191970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
       0:	68 30 00 20 75 6f 00 00 71 6f 00 00 71 6f 00 00     h0. uo..qo..qo..
	...
	config_rtc_calendar.alarm[0].time = init_time;
      2c:	71 6f 00 00 00 00 00 00 00 00 00 00 71 6f 00 00     qo..........qo..
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
      3c:	71 6f 00 00 71 6f 00 00 71 6f 00 00 71 6f 00 00     qo..qo..qo..qo..
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
      4c:	71 6f 00 00 69 55 00 00 71 6f 00 00 71 6f 00 00     qo..iU..qo..qo..
		mem_status = mem_test_unit_ready(drv);
      5c:	25 4d 00 00 71 6f 00 00 c9 27 00 00 d9 27 00 00     %M..qo...'...'..
	if (mem_wr_protect(drv)) {
      6c:	e9 27 00 00 f9 27 00 00 09 28 00 00 19 28 00 00     .'...'...(...(..
		return STA_NOINIT;
      7c:	45 07 00 00 55 07 00 00 65 07 00 00 71 6f 00 00     E...U...e...qo..
      8c:	71 6f 00 00 71 6f 00 00 71 6f 00 00 71 6f 00 00     qo..qo..qo..qo..
      9c:	71 6f 00 00 71 6f 00 00 71 6f 00 00 71 6f 00 00     qo..qo..qo..qo..
      ac:	71 6f 00 00 00 00 00 00                             qo......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	00008e64 	.word	0x00008e64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	00008e64 	.word	0x00008e64
     10c:	00008e64 	.word	0x00008e64
     110:	00000000 	.word	0x00000000

00000114 <_tcc_get_inst_index>:
	uint32_t ch;
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
     114:	4b09      	ldr	r3, [pc, #36]	; (13c <_tcc_get_inst_index+0x28>)
     116:	4298      	cmp	r0, r3
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
     118:	d00c      	beq.n	134 <_tcc_get_inst_index+0x20>
     11a:	4b09      	ldr	r3, [pc, #36]	; (140 <_tcc_get_inst_index+0x2c>)
     11c:	4298      	cmp	r0, r3
     11e:	d007      	beq.n	130 <_tcc_get_inst_index+0x1c>
		}
	}
	if (events->generate_event_on_counter_overflow) {
     120:	4a08      	ldr	r2, [pc, #32]	; (144 <_tcc_get_inst_index+0x30>)
     122:	2300      	movs	r3, #0
     124:	4290      	cmp	r0, r2
		evctrl |= TCC_EVCTRL_OVFEO;
     126:	d001      	beq.n	12c <_tcc_get_inst_index+0x18>
     128:	0018      	movs	r0, r3
     12a:	4770      	bx	lr
	}
	if (events->generate_event_on_counter_retrigger) {
     12c:	3302      	adds	r3, #2
     12e:	e002      	b.n	136 <_tcc_get_inst_index+0x22>
     130:	2301      	movs	r3, #1
		evctrl |= TCC_EVCTRL_TRGEO;
     132:	e000      	b.n	136 <_tcc_get_inst_index+0x22>
     134:	2300      	movs	r3, #0
     136:	b2db      	uxtb	r3, r3
	}
	if (events->generate_event_on_counter_event) {
     138:	e7f6      	b.n	128 <_tcc_get_inst_index+0x14>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	42002000 	.word	0x42002000
		evctrl |= TCC_EVCTRL_CNTEO;
     140:	42002400 	.word	0x42002400
	}

	tcc_module->EVCTRL.reg = evctrl;
     144:	42002800 	.word	0x42002800

00000148 <tcc_get_config_defaults>:

	return STATUS_OK;
     148:	b510      	push	{r4, lr}
			return STATUS_ERR_INVALID_ARG;
     14a:	0004      	movs	r4, r0
     14c:	0008      	movs	r0, r1
			return STATUS_ERR_INVALID_ARG;
     14e:	4b4f      	ldr	r3, [pc, #316]	; (28c <tcc_get_config_defaults+0x144>)
     150:	4798      	blx	r3
     152:	2300      	movs	r3, #0
     154:	6023      	str	r3, [r4, #0]
     156:	0080      	lsls	r0, r0, #2
     158:	4a4d      	ldr	r2, [pc, #308]	; (290 <tcc_get_config_defaults+0x148>)
     15a:	5882      	ldr	r2, [r0, r2]
     15c:	6062      	str	r2, [r4, #4]
     15e:	72a3      	strb	r3, [r4, #10]
     160:	72e3      	strb	r3, [r4, #11]
     162:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     166:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     168:	61e3      	str	r3, [r4, #28]
     16a:	6223      	str	r3, [r4, #32]
     16c:	6263      	str	r3, [r4, #36]	; 0x24
     16e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     170:	7523      	strb	r3, [r4, #20]
     172:	7563      	strb	r3, [r4, #21]
     174:	75a3      	strb	r3, [r4, #22]
     176:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     17a:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     17c:	7423      	strb	r3, [r4, #16]
     17e:	7463      	strb	r3, [r4, #17]
     180:	74a3      	strb	r3, [r4, #18]
     182:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     184:	222c      	movs	r2, #44	; 0x2c
     186:	54a3      	strb	r3, [r4, r2]
     188:	3201      	adds	r2, #1
     18a:	54a3      	strb	r3, [r4, r2]
     18c:	3201      	adds	r2, #1
     18e:	54a3      	strb	r3, [r4, r2]
     190:	3201      	adds	r2, #1
     192:	54a3      	strb	r3, [r4, r2]
     194:	3201      	adds	r2, #1
     196:	54a3      	strb	r3, [r4, r2]
     198:	3201      	adds	r2, #1
     19a:	54a3      	strb	r3, [r4, r2]
     19c:	3201      	adds	r2, #1
     19e:	54a3      	strb	r3, [r4, r2]
     1a0:	3201      	adds	r2, #1
     1a2:	54a3      	strb	r3, [r4, r2]
     1a4:	3201      	adds	r2, #1
     1a6:	54a3      	strb	r3, [r4, r2]
     1a8:	3201      	adds	r2, #1
     1aa:	54a3      	strb	r3, [r4, r2]
     1ac:	3201      	adds	r2, #1
     1ae:	54a3      	strb	r3, [r4, r2]
     1b0:	3201      	adds	r2, #1
     1b2:	54a3      	strb	r3, [r4, r2]
     1b4:	3201      	adds	r2, #1
     1b6:	54a3      	strb	r3, [r4, r2]
     1b8:	3201      	adds	r2, #1
     1ba:	54a3      	strb	r3, [r4, r2]
     1bc:	3201      	adds	r2, #1
     1be:	54a3      	strb	r3, [r4, r2]
     1c0:	3201      	adds	r2, #1
     1c2:	54a3      	strb	r3, [r4, r2]
     1c4:	3201      	adds	r2, #1
     1c6:	54a3      	strb	r3, [r4, r2]
     1c8:	3201      	adds	r2, #1
     1ca:	54a3      	strb	r3, [r4, r2]
     1cc:	3201      	adds	r2, #1
     1ce:	54a3      	strb	r3, [r4, r2]
     1d0:	3201      	adds	r2, #1
     1d2:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     1d4:	3201      	adds	r2, #1
     1d6:	54a3      	strb	r3, [r4, r2]
     1d8:	3201      	adds	r2, #1
     1da:	54a3      	strb	r3, [r4, r2]
     1dc:	3201      	adds	r2, #1
     1de:	54a3      	strb	r3, [r4, r2]
     1e0:	3201      	adds	r2, #1
     1e2:	54a3      	strb	r3, [r4, r2]
     1e4:	3201      	adds	r2, #1
     1e6:	54a3      	strb	r3, [r4, r2]
     1e8:	3201      	adds	r2, #1
     1ea:	54a3      	strb	r3, [r4, r2]
     1ec:	3201      	adds	r2, #1
     1ee:	54a3      	strb	r3, [r4, r2]
     1f0:	3201      	adds	r2, #1
     1f2:	54a3      	strb	r3, [r4, r2]
     1f4:	3201      	adds	r2, #1
     1f6:	54a3      	strb	r3, [r4, r2]
     1f8:	3201      	adds	r2, #1
     1fa:	54a3      	strb	r3, [r4, r2]
     1fc:	3201      	adds	r2, #1
     1fe:	54a3      	strb	r3, [r4, r2]
     200:	3201      	adds	r2, #1
     202:	54a3      	strb	r3, [r4, r2]
     204:	3201      	adds	r2, #1
     206:	54a3      	strb	r3, [r4, r2]
     208:	3201      	adds	r2, #1
     20a:	54a3      	strb	r3, [r4, r2]
     20c:	3201      	adds	r2, #1
     20e:	54a3      	strb	r3, [r4, r2]
     210:	3201      	adds	r2, #1
     212:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     214:	3201      	adds	r2, #1
     216:	54a3      	strb	r3, [r4, r2]
     218:	3201      	adds	r2, #1
     21a:	54a3      	strb	r3, [r4, r2]
     21c:	3201      	adds	r2, #1
     21e:	54a3      	strb	r3, [r4, r2]
     220:	3201      	adds	r2, #1
     222:	54a3      	strb	r3, [r4, r2]
     224:	3201      	adds	r2, #1
     226:	54a3      	strb	r3, [r4, r2]
     228:	3201      	adds	r2, #1
     22a:	54a3      	strb	r3, [r4, r2]
     22c:	3201      	adds	r2, #1
     22e:	54a3      	strb	r3, [r4, r2]
     230:	3201      	adds	r2, #1
     232:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     234:	3241      	adds	r2, #65	; 0x41
     236:	54a3      	strb	r3, [r4, r2]
     238:	65a3      	str	r3, [r4, #88]	; 0x58
     23a:	67a3      	str	r3, [r4, #120]	; 0x78
     23c:	3201      	adds	r2, #1
     23e:	54a3      	strb	r3, [r4, r2]
     240:	65e3      	str	r3, [r4, #92]	; 0x5c
     242:	67e3      	str	r3, [r4, #124]	; 0x7c
     244:	3201      	adds	r2, #1
     246:	54a3      	strb	r3, [r4, r2]
     248:	6623      	str	r3, [r4, #96]	; 0x60
     24a:	3a1a      	subs	r2, #26
     24c:	50a3      	str	r3, [r4, r2]
     24e:	321b      	adds	r2, #27
     250:	54a3      	strb	r3, [r4, r2]
     252:	6663      	str	r3, [r4, #100]	; 0x64
     254:	3a17      	subs	r2, #23
     256:	50a3      	str	r3, [r4, r2]
     258:	3218      	adds	r2, #24
     25a:	54a3      	strb	r3, [r4, r2]
     25c:	66a3      	str	r3, [r4, #104]	; 0x68
     25e:	3a14      	subs	r2, #20
     260:	50a3      	str	r3, [r4, r2]
     262:	3215      	adds	r2, #21
     264:	54a3      	strb	r3, [r4, r2]
     266:	66e3      	str	r3, [r4, #108]	; 0x6c
     268:	3a11      	subs	r2, #17
     26a:	50a3      	str	r3, [r4, r2]
     26c:	3212      	adds	r2, #18
     26e:	54a3      	strb	r3, [r4, r2]
     270:	6723      	str	r3, [r4, #112]	; 0x70
     272:	3a0e      	subs	r2, #14
     274:	50a3      	str	r3, [r4, r2]
     276:	320f      	adds	r2, #15
     278:	54a3      	strb	r3, [r4, r2]
     27a:	6763      	str	r3, [r4, #116]	; 0x74
     27c:	3a0b      	subs	r2, #11
     27e:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     280:	2101      	movs	r1, #1
     282:	320c      	adds	r2, #12
     284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     286:	3201      	adds	r2, #1
     288:	54a3      	strb	r3, [r4, r2]
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000115 	.word	0x00000115
     290:	00008a1c 	.word	0x00008a1c

00000294 <tcc_init>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
     2a0:	b091      	sub	sp, #68	; 0x44
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	000c      	movs	r4, r1
     2a6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     2a8:	0008      	movs	r0, r1
     2aa:	4bc3      	ldr	r3, [pc, #780]	; (5b8 <tcc_init+0x324>)
     2ac:	4798      	blx	r3
     2ae:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2b0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b2:	48c2      	ldr	r0, [pc, #776]	; (5bc <tcc_init+0x328>)
     2b4:	6a02      	ldr	r2, [r0, #32]
     2b6:	009e      	lsls	r6, r3, #2
     2b8:	4fc1      	ldr	r7, [pc, #772]	; (5c0 <tcc_init+0x32c>)
     2ba:	59f7      	ldr	r7, [r6, r7]
     2bc:	433a      	orrs	r2, r7
     2be:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     2c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d506      	bpl.n	2d6 <tcc_init+0x42>
}
     2c8:	b011      	add	sp, #68	; 0x44
     2ca:	bc3c      	pop	{r2, r3, r4, r5}
     2cc:	4690      	mov	r8, r2
     2ce:	4699      	mov	r9, r3
     2d0:	46a2      	mov	sl, r4
     2d2:	46ab      	mov	fp, r5
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     2d6:	6822      	ldr	r2, [r4, #0]
     2d8:	2701      	movs	r7, #1
     2da:	4017      	ands	r7, r2
     2dc:	d1f4      	bne.n	2c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     2de:	48b9      	ldr	r0, [pc, #740]	; (5c4 <tcc_init+0x330>)
     2e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     2e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     2e4:	682e      	ldr	r6, [r5, #0]
     2e6:	42b2      	cmp	r2, r6
     2e8:	d3ee      	bcc.n	2c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     2ea:	686e      	ldr	r6, [r5, #4]
     2ec:	42b2      	cmp	r2, r6
     2ee:	d3eb      	bcc.n	2c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     2f0:	69e8      	ldr	r0, [r5, #28]
     2f2:	4282      	cmp	r2, r0
     2f4:	d200      	bcs.n	2f8 <tcc_init+0x64>
     2f6:	e1b9      	b.n	66c <tcc_init+0x3d8>
     2f8:	6a28      	ldr	r0, [r5, #32]
     2fa:	4282      	cmp	r2, r0
     2fc:	d200      	bcs.n	300 <tcc_init+0x6c>
     2fe:	e1b7      	b.n	670 <tcc_init+0x3dc>
     300:	6a68      	ldr	r0, [r5, #36]	; 0x24
     302:	4282      	cmp	r2, r0
     304:	d200      	bcs.n	308 <tcc_init+0x74>
     306:	e1b5      	b.n	674 <tcc_init+0x3e0>
     308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     30a:	4282      	cmp	r2, r0
     30c:	d200      	bcs.n	310 <tcc_init+0x7c>
     30e:	e1b3      	b.n	678 <tcc_init+0x3e4>
     310:	2298      	movs	r2, #152	; 0x98
     312:	4694      	mov	ip, r2
     314:	44ac      	add	ip, r5
     316:	4662      	mov	r2, ip
     318:	9208      	str	r2, [sp, #32]
     31a:	2000      	movs	r0, #0
     31c:	e003      	b.n	326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     31e:	3001      	adds	r0, #1
     320:	3201      	adds	r2, #1
     322:	2808      	cmp	r0, #8
     324:	d008      	beq.n	338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     326:	7816      	ldrb	r6, [r2, #0]
     328:	2e00      	cmp	r6, #0
     32a:	d0f8      	beq.n	31e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     32c:	4ea6      	ldr	r6, [pc, #664]	; (5c8 <tcc_init+0x334>)
     32e:	5c76      	ldrb	r6, [r6, r1]
     330:	4286      	cmp	r6, r0
     332:	dcf4      	bgt.n	31e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     334:	2017      	movs	r0, #23
     336:	e7c7      	b.n	2c8 <tcc_init+0x34>
     338:	2200      	movs	r2, #0
     33a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	4684      	mov	ip, r0
     342:	e002      	b.n	34a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     344:	3201      	adds	r2, #1
     346:	2a04      	cmp	r2, #4
     348:	d00e      	beq.n	368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     34a:	18a8      	adds	r0, r5, r2
     34c:	7c00      	ldrb	r0, [r0, #16]
     34e:	2801      	cmp	r0, #1
     350:	d1f8      	bne.n	344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     352:	489e      	ldr	r0, [pc, #632]	; (5cc <tcc_init+0x338>)
     354:	5c40      	ldrb	r0, [r0, r1]
     356:	4290      	cmp	r0, r2
     358:	da00      	bge.n	35c <tcc_init+0xc8>
     35a:	e18f      	b.n	67c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     35c:	4660      	mov	r0, ip
     35e:	4090      	lsls	r0, r2
     360:	9e02      	ldr	r6, [sp, #8]
     362:	4306      	orrs	r6, r0
     364:	9602      	str	r6, [sp, #8]
     366:	e7ed      	b.n	344 <tcc_init+0xb0>
	if (config->run_in_standby) {
     368:	329d      	adds	r2, #157	; 0x9d
     36a:	5caa      	ldrb	r2, [r5, r2]
     36c:	2a00      	cmp	r2, #0
     36e:	d004      	beq.n	37a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     370:	2280      	movs	r2, #128	; 0x80
     372:	0112      	lsls	r2, r2, #4
     374:	9902      	ldr	r1, [sp, #8]
     376:	4311      	orrs	r1, r2
     378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     37a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     37c:	1e51      	subs	r1, r2, #1
     37e:	418a      	sbcs	r2, r1
     380:	0092      	lsls	r2, r2, #2
     382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     384:	7a6a      	ldrb	r2, [r5, #9]
     386:	2a01      	cmp	r2, #1
     388:	d022      	beq.n	3d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     38a:	4a90      	ldr	r2, [pc, #576]	; (5cc <tcc_init+0x338>)
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	0011      	movs	r1, r2
     390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     392:	2235      	movs	r2, #53	; 0x35
     394:	5caa      	ldrb	r2, [r5, r2]
     396:	428a      	cmp	r2, r1
     398:	d300      	bcc.n	39c <tcc_init+0x108>
     39a:	e179      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     39c:	212c      	movs	r1, #44	; 0x2c
     39e:	5c69      	ldrb	r1, [r5, r1]
     3a0:	290f      	cmp	r1, #15
     3a2:	d900      	bls.n	3a6 <tcc_init+0x112>
     3a4:	e174      	b.n	690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     3a6:	7b28      	ldrb	r0, [r5, #12]
     3a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     3aa:	7ae8      	ldrb	r0, [r5, #11]
     3ac:	900b      	str	r0, [sp, #44]	; 0x2c
     3ae:	202d      	movs	r0, #45	; 0x2d
     3b0:	4682      	mov	sl, r0
     3b2:	44aa      	add	sl, r5
     3b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     3b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     3b8:	ae0e      	add	r6, sp, #56	; 0x38
     3ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3bc:	26c0      	movs	r6, #192	; 0xc0
     3be:	0136      	lsls	r6, r6, #4
     3c0:	46b1      	mov	r9, r6
     3c2:	4684      	mov	ip, r0
     3c4:	46a0      	mov	r8, r4
     3c6:	0028      	movs	r0, r5
     3c8:	4655      	mov	r5, sl
     3ca:	9309      	str	r3, [sp, #36]	; 0x24
     3cc:	4682      	mov	sl, r0
     3ce:	e035      	b.n	43c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     3d0:	9906      	ldr	r1, [sp, #24]
     3d2:	4311      	orrs	r1, r2
     3d4:	9106      	str	r1, [sp, #24]
     3d6:	e7d8      	b.n	38a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3d8:	0292      	lsls	r2, r2, #10
     3da:	464f      	mov	r7, r9
     3dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     3e0:	7919      	ldrb	r1, [r3, #4]
     3e2:	468b      	mov	fp, r1
     3e4:	2103      	movs	r1, #3
     3e6:	465f      	mov	r7, fp
     3e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3ea:	430a      	orrs	r2, r1
     3ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     3ee:	795a      	ldrb	r2, [r3, #5]
     3f0:	0152      	lsls	r2, r2, #5
     3f2:	2160      	movs	r1, #96	; 0x60
     3f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     3f8:	7999      	ldrb	r1, [r3, #6]
     3fa:	0209      	lsls	r1, r1, #8
     3fc:	26c0      	movs	r6, #192	; 0xc0
     3fe:	00b6      	lsls	r6, r6, #2
     400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     404:	79da      	ldrb	r2, [r3, #7]
     406:	0312      	lsls	r2, r2, #12
     408:	21e0      	movs	r1, #224	; 0xe0
     40a:	01c9      	lsls	r1, r1, #7
     40c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     40e:	4316      	orrs	r6, r2
     410:	4334      	orrs	r4, r6
     412:	9a03      	ldr	r2, [sp, #12]
     414:	4314      	orrs	r4, r2
     416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     418:	4662      	mov	r2, ip
     41a:	9907      	ldr	r1, [sp, #28]
     41c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     41e:	2a04      	cmp	r2, #4
     420:	d02a      	beq.n	478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     422:	7c9a      	ldrb	r2, [r3, #18]
     424:	9905      	ldr	r1, [sp, #20]
     426:	4291      	cmp	r1, r2
     428:	d800      	bhi.n	42c <tcc_init+0x198>
     42a:	e131      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     42c:	7a59      	ldrb	r1, [r3, #9]
     42e:	350a      	adds	r5, #10
     430:	2304      	movs	r3, #4
     432:	469b      	mov	fp, r3
     434:	44dc      	add	ip, fp
     436:	290f      	cmp	r1, #15
     438:	d900      	bls.n	43c <tcc_init+0x1a8>
     43a:	e129      	b.n	690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     43c:	0609      	lsls	r1, r1, #24
     43e:	23f0      	movs	r3, #240	; 0xf0
     440:	051b      	lsls	r3, r3, #20
     442:	4019      	ands	r1, r3
     444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     446:	782e      	ldrb	r6, [r5, #0]
     448:	0436      	lsls	r6, r6, #16
     44a:	20ff      	movs	r0, #255	; 0xff
     44c:	0400      	lsls	r0, r0, #16
     44e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     450:	7868      	ldrb	r0, [r5, #1]
     452:	2480      	movs	r4, #128	; 0x80
     454:	2800      	cmp	r0, #0
     456:	d100      	bne.n	45a <tcc_init+0x1c6>
     458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     45a:	7898      	ldrb	r0, [r3, #2]
     45c:	2708      	movs	r7, #8
     45e:	9703      	str	r7, [sp, #12]
     460:	2800      	cmp	r0, #0
     462:	d101      	bne.n	468 <tcc_init+0x1d4>
     464:	9804      	ldr	r0, [sp, #16]
     466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     468:	78d8      	ldrb	r0, [r3, #3]
     46a:	4683      	mov	fp, r0
     46c:	2010      	movs	r0, #16
     46e:	465f      	mov	r7, fp
     470:	2f00      	cmp	r7, #0
     472:	d1b1      	bne.n	3d8 <tcc_init+0x144>
     474:	9804      	ldr	r0, [sp, #16]
     476:	e7af      	b.n	3d8 <tcc_init+0x144>
     478:	4644      	mov	r4, r8
     47a:	4655      	mov	r5, sl
     47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     47e:	4a52      	ldr	r2, [pc, #328]	; (5c8 <tcc_init+0x334>)
     480:	5cd2      	ldrb	r2, [r2, r3]
     482:	4691      	mov	r9, r2
     484:	4651      	mov	r1, sl
     486:	3150      	adds	r1, #80	; 0x50
     488:	4650      	mov	r0, sl
     48a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     48c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     48e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     490:	2601      	movs	r6, #1
     492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     494:	2602      	movs	r6, #2
     496:	36ff      	adds	r6, #255	; 0xff
     498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     49a:	2680      	movs	r6, #128	; 0x80
     49c:	0276      	lsls	r6, r6, #9
     49e:	46b0      	mov	r8, r6
     4a0:	46a4      	mov	ip, r4
     4a2:	001c      	movs	r4, r3
     4a4:	464b      	mov	r3, r9
     4a6:	e00f      	b.n	4c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4a8:	7806      	ldrb	r6, [r0, #0]
     4aa:	2e00      	cmp	r6, #0
     4ac:	d007      	beq.n	4be <tcc_init+0x22a>
			if (i >= ow_num) {
     4ae:	4293      	cmp	r3, r2
     4b0:	d800      	bhi.n	4b4 <tcc_init+0x220>
     4b2:	e0e7      	b.n	684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     4b4:	2e02      	cmp	r6, #2
     4b6:	d014      	beq.n	4e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     4b8:	4656      	mov	r6, sl
     4ba:	4096      	lsls	r6, r2
     4bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4be:	3201      	adds	r2, #1
     4c0:	3101      	adds	r1, #1
     4c2:	3002      	adds	r0, #2
     4c4:	2a08      	cmp	r2, #8
     4c6:	d010      	beq.n	4ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     4c8:	780e      	ldrb	r6, [r1, #0]
     4ca:	2e00      	cmp	r6, #0
     4cc:	d0ec      	beq.n	4a8 <tcc_init+0x214>
			if (i >= ow_num) {
     4ce:	4293      	cmp	r3, r2
     4d0:	d800      	bhi.n	4d4 <tcc_init+0x240>
     4d2:	e0d5      	b.n	680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     4d4:	4646      	mov	r6, r8
     4d6:	4096      	lsls	r6, r2
     4d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4da:	7806      	ldrb	r6, [r0, #0]
     4dc:	2e00      	cmp	r6, #0
     4de:	d1e9      	bne.n	4b4 <tcc_init+0x220>
     4e0:	e7ed      	b.n	4be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     4e2:	465e      	mov	r6, fp
     4e4:	4096      	lsls	r6, r2
     4e6:	4337      	orrs	r7, r6
     4e8:	e7e9      	b.n	4be <tcc_init+0x22a>
     4ea:	4699      	mov	r9, r3
     4ec:	0023      	movs	r3, r4
     4ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4f0:	7e6a      	ldrb	r2, [r5, #25]
     4f2:	0112      	lsls	r2, r2, #4
     4f4:	2130      	movs	r1, #48	; 0x30
     4f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     4f8:	7e28      	ldrb	r0, [r5, #24]
     4fa:	2207      	movs	r2, #7
     4fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     502:	2080      	movs	r0, #128	; 0x80
     504:	0240      	lsls	r0, r0, #9
     506:	000e      	movs	r6, r1
     508:	e002      	b.n	510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     50a:	3201      	adds	r2, #1
     50c:	2a04      	cmp	r2, #4
     50e:	d00b      	beq.n	528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     510:	18a9      	adds	r1, r5, r2
     512:	7d09      	ldrb	r1, [r1, #20]
     514:	2900      	cmp	r1, #0
     516:	d0f8      	beq.n	50a <tcc_init+0x276>
			if (n >= cc_num) {
     518:	9905      	ldr	r1, [sp, #20]
     51a:	4291      	cmp	r1, r2
     51c:	dc00      	bgt.n	520 <tcc_init+0x28c>
     51e:	e0b3      	b.n	688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     520:	0001      	movs	r1, r0
     522:	4091      	lsls	r1, r2
     524:	430e      	orrs	r6, r1
     526:	e7f0      	b.n	50a <tcc_init+0x276>
     528:	46b2      	mov	sl, r6
     52a:	9801      	ldr	r0, [sp, #4]
     52c:	0002      	movs	r2, r0
     52e:	3204      	adds	r2, #4
     530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     532:	2100      	movs	r1, #0
     534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     536:	4282      	cmp	r2, r0
     538:	d1fc      	bne.n	534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     53a:	2200      	movs	r2, #0
     53c:	9801      	ldr	r0, [sp, #4]
     53e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     542:	0099      	lsls	r1, r3, #2
     544:	4a22      	ldr	r2, [pc, #136]	; (5d0 <tcc_init+0x33c>)
     546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     54a:	22a0      	movs	r2, #160	; 0xa0
     54c:	5ca9      	ldrb	r1, [r5, r2]
     54e:	3a64      	subs	r2, #100	; 0x64
     550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     552:	a90d      	add	r1, sp, #52	; 0x34
     554:	7aaa      	ldrb	r2, [r5, #10]
     556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     558:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <tcc_init+0x340>)
     55a:	5cd6      	ldrb	r6, [r2, r3]
     55c:	0030      	movs	r0, r6
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <tcc_init+0x344>)
     560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     562:	0030      	movs	r0, r6
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <tcc_init+0x348>)
     566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     568:	464b      	mov	r3, r9
     56a:	2b00      	cmp	r3, #0
     56c:	dd3c      	ble.n	5e8 <tcc_init+0x354>
     56e:	002e      	movs	r6, r5
     570:	3658      	adds	r6, #88	; 0x58
     572:	3398      	adds	r3, #152	; 0x98
     574:	4698      	mov	r8, r3
     576:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     578:	2301      	movs	r3, #1
     57a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     57c:	46ab      	mov	fp, r5
     57e:	4645      	mov	r5, r8
     580:	46a0      	mov	r8, r4
     582:	9c08      	ldr	r4, [sp, #32]
     584:	e003      	b.n	58e <tcc_init+0x2fa>
     586:	3401      	adds	r4, #1
     588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     58a:	42ac      	cmp	r4, r5
     58c:	d02a      	beq.n	5e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0f8      	beq.n	586 <tcc_init+0x2f2>
     594:	ab0c      	add	r3, sp, #48	; 0x30
     596:	464a      	mov	r2, r9
     598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     59a:	2300      	movs	r3, #0
     59c:	aa0c      	add	r2, sp, #48	; 0x30
     59e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     5a0:	0013      	movs	r3, r2
     5a2:	2220      	movs	r2, #32
     5a4:	18b2      	adds	r2, r6, r2
     5a6:	7812      	ldrb	r2, [r2, #0]
     5a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5aa:	464a      	mov	r2, r9
     5ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	0019      	movs	r1, r3
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <tcc_init+0x34c>)
     5b4:	4798      	blx	r3
     5b6:	e7e6      	b.n	586 <tcc_init+0x2f2>
     5b8:	00000115 	.word	0x00000115
     5bc:	40000400 	.word	0x40000400
     5c0:	00008a08 	.word	0x00008a08
     5c4:	00008a1c 	.word	0x00008a1c
     5c8:	00008a28 	.word	0x00008a28
     5cc:	00008a14 	.word	0x00008a14
     5d0:	200003bc 	.word	0x200003bc
     5d4:	00008a18 	.word	0x00008a18
     5d8:	00006e19 	.word	0x00006e19
     5dc:	00006d8d 	.word	0x00006d8d
     5e0:	00006f11 	.word	0x00006f11
     5e4:	4644      	mov	r4, r8
     5e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     5ee:	0212      	lsls	r2, r2, #8
     5f0:	4313      	orrs	r3, r2
     5f2:	9a02      	ldr	r2, [sp, #8]
     5f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     5f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5f8:	2204      	movs	r2, #4
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	421a      	tst	r2, r3
     5fe:	d1fc      	bne.n	5fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     600:	23ff      	movs	r3, #255	; 0xff
     602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     604:	2204      	movs	r2, #4
     606:	68a3      	ldr	r3, [r4, #8]
     608:	421a      	tst	r2, r3
     60a:	d1fc      	bne.n	606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     60c:	466b      	mov	r3, sp
     60e:	7e1b      	ldrb	r3, [r3, #24]
     610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     61a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     61c:	4a1d      	ldr	r2, [pc, #116]	; (694 <tcc_init+0x400>)
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	4213      	tst	r3, r2
     622:	d1fc      	bne.n	61e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     624:	4653      	mov	r3, sl
     626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     628:	2210      	movs	r2, #16
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	421a      	tst	r2, r3
     62e:	d1fc      	bne.n	62a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     630:	682b      	ldr	r3, [r5, #0]
     632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     634:	4a18      	ldr	r2, [pc, #96]	; (698 <tcc_init+0x404>)
     636:	68a3      	ldr	r3, [r4, #8]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     63c:	686b      	ldr	r3, [r5, #4]
     63e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     640:	9805      	ldr	r0, [sp, #20]
     642:	2800      	cmp	r0, #0
     644:	dd22      	ble.n	68c <tcc_init+0x3f8>
     646:	351c      	adds	r5, #28
     648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     64a:	4e14      	ldr	r6, [pc, #80]	; (69c <tcc_init+0x408>)
     64c:	0032      	movs	r2, r6
     64e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     650:	68a3      	ldr	r3, [r4, #8]
     652:	421a      	tst	r2, r3
     654:	d1fc      	bne.n	650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     656:	cd04      	ldmia	r5!, {r2}
     658:	000b      	movs	r3, r1
     65a:	3310      	adds	r3, #16
     65c:	009b      	lsls	r3, r3, #2
     65e:	18e3      	adds	r3, r4, r3
     660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     662:	3101      	adds	r1, #1
     664:	4288      	cmp	r0, r1
     666:	dcf1      	bgt.n	64c <tcc_init+0x3b8>
	return STATUS_OK;
     668:	2000      	movs	r0, #0
     66a:	e62d      	b.n	2c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     66c:	2017      	movs	r0, #23
     66e:	e62b      	b.n	2c8 <tcc_init+0x34>
     670:	2017      	movs	r0, #23
     672:	e629      	b.n	2c8 <tcc_init+0x34>
     674:	2017      	movs	r0, #23
     676:	e627      	b.n	2c8 <tcc_init+0x34>
     678:	2017      	movs	r0, #23
     67a:	e625      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e623      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     680:	2017      	movs	r0, #23
     682:	e621      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     684:	2017      	movs	r0, #23
     686:	e61f      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     688:	2017      	movs	r0, #23
     68a:	e61d      	b.n	2c8 <tcc_init+0x34>
	return STATUS_OK;
     68c:	2000      	movs	r0, #0
     68e:	e61b      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e619      	b.n	2c8 <tcc_init+0x34>
     694:	00020040 	.word	0x00020040
     698:	00040080 	.word	0x00040080
     69c:	00080100 	.word	0x00080100

000006a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6a0:	0092      	lsls	r2, r2, #2
     6a2:	1883      	adds	r3, r0, r2
     6a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     6a6:	4b03      	ldr	r3, [pc, #12]	; (6b4 <tcc_register_callback+0x14>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
     6ac:	4313      	orrs	r3, r2
     6ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     6b0:	2000      	movs	r0, #0
     6b2:	4770      	bx	lr
     6b4:	00008a2c 	.word	0x00008a2c

000006b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     6be:	6800      	ldr	r0, [r0, #0]
     6c0:	4b09      	ldr	r3, [pc, #36]	; (6e8 <tcc_enable_callback+0x30>)
     6c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c6:	5c1b      	ldrb	r3, [r3, r0]
     6c8:	221f      	movs	r2, #31
     6ca:	401a      	ands	r2, r3
     6cc:	2301      	movs	r3, #1
     6ce:	4093      	lsls	r3, r2
     6d0:	4a07      	ldr	r2, [pc, #28]	; (6f0 <tcc_enable_callback+0x38>)
     6d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <tcc_enable_callback+0x3c>)
     6d8:	58ea      	ldr	r2, [r5, r3]
     6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6dc:	4313      	orrs	r3, r2
     6de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000115 	.word	0x00000115
     6ec:	00008a5c 	.word	0x00008a5c
     6f0:	e000e100 	.word	0xe000e100
     6f4:	00008a2c 	.word	0x00008a2c

000006f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6fe:	0080      	lsls	r0, r0, #2
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <_tcc_interrupt_handler+0x44>)
     702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     704:	683b      	ldr	r3, [r7, #0]
     706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     70c:	4013      	ands	r3, r2
     70e:	401e      	ands	r6, r3
     710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     712:	4b0b      	ldr	r3, [pc, #44]	; (740 <_tcc_interrupt_handler+0x48>)
     714:	4698      	mov	r8, r3
     716:	e002      	b.n	71e <_tcc_interrupt_handler+0x26>
     718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     71a:	2c30      	cmp	r4, #48	; 0x30
     71c:	d00a      	beq.n	734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     71e:	4643      	mov	r3, r8
     720:	58e5      	ldr	r5, [r4, r3]
     722:	4235      	tst	r5, r6
     724:	d0f8      	beq.n	718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     726:	193b      	adds	r3, r7, r4
     728:	685b      	ldr	r3, [r3, #4]
     72a:	0038      	movs	r0, r7
     72c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     72e:	683b      	ldr	r3, [r7, #0]
     730:	62dd      	str	r5, [r3, #44]	; 0x2c
     732:	e7f1      	b.n	718 <_tcc_interrupt_handler+0x20>
		}
	}
}
     734:	bc04      	pop	{r2}
     736:	4690      	mov	r8, r2
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	200003bc 	.word	0x200003bc
     740:	00008a2c 	.word	0x00008a2c

00000744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006f9 	.word	0x000006f9

00000754 <TCC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TCC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006f9 	.word	0x000006f9

00000764 <TCC2_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2002      	movs	r0, #2
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TCC2_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006f9 	.word	0x000006f9

00000774 <audio_in_init>:
extern struct rtc_module rtc_instance;

volatile uint32_t audio_frame_cnt = 0;

void audio_in_init(void)
{
     774:	b5f0      	push	{r4, r5, r6, r7, lr}
     776:	b091      	sub	sp, #68	; 0x44
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     778:	a90f      	add	r1, sp, #60	; 0x3c
     77a:	2501      	movs	r5, #1
     77c:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     77e:	2600      	movs	r6, #0
     780:	708e      	strb	r6, [r1, #2]
	/* Initializing the CONV pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     782:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
     784:	2014      	movs	r0, #20
     786:	4f28      	ldr	r7, [pc, #160]	; (828 <audio_in_init+0xb4>)
     788:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0352      	lsls	r2, r2, #13
     78e:	4b27      	ldr	r3, [pc, #156]	; (82c <audio_in_init+0xb8>)
     790:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     792:	4c27      	ldr	r4, [pc, #156]	; (830 <audio_in_init+0xbc>)
     794:	232f      	movs	r3, #47	; 0x2f
     796:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     798:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
     79a:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     79c:	466b      	mov	r3, sp
     79e:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
     7a0:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     7a2:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     7a4:	4669      	mov	r1, sp
     7a6:	202f      	movs	r0, #47	; 0x2f
     7a8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
     7aa:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7ac:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7b0:	2900      	cmp	r1, #0
     7b2:	d104      	bne.n	7be <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
     7b4:	0953      	lsrs	r3, r2, #5
     7b6:	01db      	lsls	r3, r3, #7
     7b8:	491c      	ldr	r1, [pc, #112]	; (82c <audio_in_init+0xb8>)
     7ba:	468c      	mov	ip, r1
     7bc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7be:	211f      	movs	r1, #31
     7c0:	4011      	ands	r1, r2
     7c2:	2201      	movs	r2, #1
     7c4:	0010      	movs	r0, r2
     7c6:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     7c8:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     7ca:	ac01      	add	r4, sp, #4
     7cc:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     7ce:	2300      	movs	r3, #0
     7d0:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     7d2:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     7d4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     7d6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     7d8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     7da:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     7dc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     7de:	3223      	adds	r2, #35	; 0x23
     7e0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     7e2:	3a18      	subs	r2, #24
     7e4:	2100      	movs	r1, #0
     7e6:	a807      	add	r0, sp, #28
     7e8:	4b12      	ldr	r3, [pc, #72]	; (834 <audio_in_init+0xc0>)
     7ea:	4798      	blx	r3
	config_spi_slave.ss_pin = ADC_SPI_SS_PIN;
	spi_attach_slave(&adc_spi_slave, &config_spi_slave);
	
	/* Initializing the SPI master */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     7ec:	2380      	movs	r3, #128	; 0x80
     7ee:	039b      	lsls	r3, r3, #14
     7f0:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     7f2:	4b11      	ldr	r3, [pc, #68]	; (838 <audio_in_init+0xc4>)
     7f4:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     7f6:	4b11      	ldr	r3, [pc, #68]	; (83c <audio_in_init+0xc8>)
     7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     7fa:	4b11      	ldr	r3, [pc, #68]	; (840 <audio_in_init+0xcc>)
     7fc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     7fe:	2301      	movs	r3, #1
     800:	425b      	negs	r3, r3
     802:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <audio_in_init+0xd0>)
     806:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     808:	4d0f      	ldr	r5, [pc, #60]	; (848 <audio_in_init+0xd4>)
     80a:	0022      	movs	r2, r4
     80c:	490f      	ldr	r1, [pc, #60]	; (84c <audio_in_init+0xd8>)
     80e:	0028      	movs	r0, r5
     810:	4b0f      	ldr	r3, [pc, #60]	; (850 <audio_in_init+0xdc>)
     812:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     814:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     816:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     818:	2b00      	cmp	r3, #0
     81a:	d1fc      	bne.n	816 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     81c:	6813      	ldr	r3, [r2, #0]
     81e:	2102      	movs	r1, #2
     820:	430b      	orrs	r3, r1
     822:	6013      	str	r3, [r2, #0]
	spi_enable(&adc_spi_module);
}
     824:	b011      	add	sp, #68	; 0x44
     826:	bdf0      	pop	{r4, r5, r6, r7, pc}
     828:	00006bbd 	.word	0x00006bbd
     82c:	41004400 	.word	0x41004400
     830:	200006bc 	.word	0x200006bc
     834:	00007683 	.word	0x00007683
     838:	00100002 	.word	0x00100002
     83c:	00110002 	.word	0x00110002
     840:	00120002 	.word	0x00120002
     844:	001e8480 	.word	0x001e8480
     848:	2000067c 	.word	0x2000067c
     84c:	42000c00 	.word	0x42000c00
     850:	000059b5 	.word	0x000059b5

00000854 <audio_record_init>:

void audio_record_init(void) {
     854:	b5f0      	push	{r4, r5, r6, r7, lr}
     856:	46c6      	mov	lr, r8
     858:	b500      	push	{lr}
     85a:	b08a      	sub	sp, #40	; 0x28
	struct rtc_calendar_time current_time;
	rtc_calendar_get_time(&rtc_instance, &current_time);
     85c:	ae08      	add	r6, sp, #32
     85e:	0031      	movs	r1, r6
     860:	482f      	ldr	r0, [pc, #188]	; (920 <audio_record_init+0xcc>)
     862:	4b30      	ldr	r3, [pc, #192]	; (924 <audio_record_init+0xd0>)
     864:	4798      	blx	r3
	char file_name[24] = "";
     866:	ac02      	add	r4, sp, #8
     868:	2300      	movs	r3, #0
     86a:	4698      	mov	r8, r3
     86c:	9302      	str	r3, [sp, #8]
     86e:	2214      	movs	r2, #20
     870:	2100      	movs	r1, #0
     872:	a803      	add	r0, sp, #12
     874:	4b2c      	ldr	r3, [pc, #176]	; (928 <audio_record_init+0xd4>)
     876:	4798      	blx	r3
	char temp_str[4] = "";
     878:	ad01      	add	r5, sp, #4
     87a:	4643      	mov	r3, r8
     87c:	9301      	str	r3, [sp, #4]
	sprintf(temp_str, "%d", SD_SLOT_NUMBER);
     87e:	2200      	movs	r2, #0
     880:	492a      	ldr	r1, [pc, #168]	; (92c <audio_record_init+0xd8>)
     882:	0028      	movs	r0, r5
     884:	4f2a      	ldr	r7, [pc, #168]	; (930 <audio_record_init+0xdc>)
     886:	47b8      	blx	r7
	file_name[0] = temp_str[0];
     888:	782b      	ldrb	r3, [r5, #0]
     88a:	7023      	strb	r3, [r4, #0]
	file_name[1] = ':';
     88c:	233a      	movs	r3, #58	; 0x3a
     88e:	7063      	strb	r3, [r4, #1]
	sprintf(temp_str, "%02d", (current_time.year - 2000));
     890:	88f2      	ldrh	r2, [r6, #6]
     892:	4b28      	ldr	r3, [pc, #160]	; (934 <audio_record_init+0xe0>)
     894:	469c      	mov	ip, r3
     896:	4462      	add	r2, ip
     898:	4927      	ldr	r1, [pc, #156]	; (938 <audio_record_init+0xe4>)
     89a:	0028      	movs	r0, r5
     89c:	47b8      	blx	r7
	file_name[2] = temp_str[0];
     89e:	782b      	ldrb	r3, [r5, #0]
     8a0:	70a3      	strb	r3, [r4, #2]
	file_name[3] = temp_str[1];
     8a2:	786b      	ldrb	r3, [r5, #1]
     8a4:	70e3      	strb	r3, [r4, #3]
	sprintf(temp_str, "%02d", current_time.month);
     8a6:	7972      	ldrb	r2, [r6, #5]
     8a8:	4923      	ldr	r1, [pc, #140]	; (938 <audio_record_init+0xe4>)
     8aa:	0028      	movs	r0, r5
     8ac:	47b8      	blx	r7
	file_name[4] = temp_str[0];
     8ae:	782b      	ldrb	r3, [r5, #0]
     8b0:	7123      	strb	r3, [r4, #4]
	file_name[5] = temp_str[1];
     8b2:	786b      	ldrb	r3, [r5, #1]
     8b4:	7163      	strb	r3, [r4, #5]
	sprintf(temp_str, "%02d", current_time.day);
     8b6:	7932      	ldrb	r2, [r6, #4]
     8b8:	491f      	ldr	r1, [pc, #124]	; (938 <audio_record_init+0xe4>)
     8ba:	0028      	movs	r0, r5
     8bc:	47b8      	blx	r7
	file_name[6] = temp_str[0];
     8be:	782b      	ldrb	r3, [r5, #0]
     8c0:	71a3      	strb	r3, [r4, #6]
	file_name[7] = temp_str[1];
     8c2:	786b      	ldrb	r3, [r5, #1]
     8c4:	71e3      	strb	r3, [r4, #7]
	file_name[8] = '_';
     8c6:	235f      	movs	r3, #95	; 0x5f
     8c8:	7223      	strb	r3, [r4, #8]
	sprintf(temp_str, "%02d", current_time.hour);
     8ca:	78b2      	ldrb	r2, [r6, #2]
     8cc:	491a      	ldr	r1, [pc, #104]	; (938 <audio_record_init+0xe4>)
     8ce:	0028      	movs	r0, r5
     8d0:	47b8      	blx	r7
	file_name[9] = temp_str[0];
     8d2:	782b      	ldrb	r3, [r5, #0]
     8d4:	7263      	strb	r3, [r4, #9]
	file_name[10] = temp_str[1];
     8d6:	786b      	ldrb	r3, [r5, #1]
     8d8:	72a3      	strb	r3, [r4, #10]
	sprintf(temp_str, "%02d", current_time.minute);
     8da:	7872      	ldrb	r2, [r6, #1]
     8dc:	4916      	ldr	r1, [pc, #88]	; (938 <audio_record_init+0xe4>)
     8de:	0028      	movs	r0, r5
     8e0:	47b8      	blx	r7
	file_name[11] = temp_str[0];
     8e2:	782b      	ldrb	r3, [r5, #0]
     8e4:	72e3      	strb	r3, [r4, #11]
	file_name[12] = temp_str[1];
     8e6:	786b      	ldrb	r3, [r5, #1]
     8e8:	7323      	strb	r3, [r4, #12]
	sprintf(temp_str, "%02d", current_time.second);
     8ea:	7832      	ldrb	r2, [r6, #0]
     8ec:	4912      	ldr	r1, [pc, #72]	; (938 <audio_record_init+0xe4>)
     8ee:	0028      	movs	r0, r5
     8f0:	47b8      	blx	r7
	file_name[13] = temp_str[0];
     8f2:	782b      	ldrb	r3, [r5, #0]
     8f4:	7363      	strb	r3, [r4, #13]
	file_name[14] = temp_str[1];
     8f6:	786b      	ldrb	r3, [r5, #1]
     8f8:	73a3      	strb	r3, [r4, #14]
	file_name[15] = '.';
     8fa:	232e      	movs	r3, #46	; 0x2e
     8fc:	73e3      	strb	r3, [r4, #15]
	file_name[16] = 'w';
     8fe:	3349      	adds	r3, #73	; 0x49
     900:	7423      	strb	r3, [r4, #16]
	file_name[17] = 'a';
     902:	3b16      	subs	r3, #22
     904:	7463      	strb	r3, [r4, #17]
	file_name[18] = 'v';
     906:	3315      	adds	r3, #21
     908:	74a3      	strb	r3, [r4, #18]
	file_name[19] = '\0';
     90a:	4643      	mov	r3, r8
     90c:	74e3      	strb	r3, [r4, #19]
	printf("Generated file name: %s", file_name);
     90e:	0021      	movs	r1, r4
     910:	480a      	ldr	r0, [pc, #40]	; (93c <audio_record_init+0xe8>)
     912:	4b0b      	ldr	r3, [pc, #44]	; (940 <audio_record_init+0xec>)
     914:	4798      	blx	r3
}
     916:	b00a      	add	sp, #40	; 0x28
     918:	bc04      	pop	{r2}
     91a:	4690      	mov	r8, r2
     91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	20000674 	.word	0x20000674
     924:	00002509 	.word	0x00002509
     928:	00007683 	.word	0x00007683
     92c:	00008a60 	.word	0x00008a60
     930:	00007835 	.word	0x00007835
     934:	fffff830 	.word	0xfffff830
     938:	00008a64 	.word	0x00008a64
     93c:	00008a6c 	.word	0x00008a6c
     940:	00007695 	.word	0x00007695

00000944 <audio_record_1samp>:

void audio_record_1samp(void) {
     944:	b5f0      	push	{r4, r5, r6, r7, lr}
     946:	b083      	sub	sp, #12
     948:	2332      	movs	r3, #50	; 0x32
     94a:	3b01      	subs	r3, #1
	uint8_t adc_vals[2];
	for(uint32_t i = 0; i < 50; i++) {
     94c:	2b00      	cmp	r3, #0
     94e:	d1fc      	bne.n	94a <audio_record_1samp+0x6>
	} else {
		port_base->OUTCLR.reg = pin_mask;
     950:	4d0c      	ldr	r5, [pc, #48]	; (984 <audio_record_1samp+0x40>)
     952:	2680      	movs	r6, #128	; 0x80
     954:	0376      	lsls	r6, r6, #13
     956:	616e      	str	r6, [r5, #20]
		
	}
	port_pin_set_output_level(ADC_CONV_PIN, false);
	spi_read_buffer_wait(&adc_spi_module, adc_vals, 2, 0xFF);
     958:	ac01      	add	r4, sp, #4
     95a:	33ff      	adds	r3, #255	; 0xff
     95c:	2202      	movs	r2, #2
     95e:	0021      	movs	r1, r4
     960:	4809      	ldr	r0, [pc, #36]	; (988 <audio_record_1samp+0x44>)
     962:	4f0a      	ldr	r7, [pc, #40]	; (98c <audio_record_1samp+0x48>)
     964:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
     966:	61ae      	str	r6, [r5, #24]
	port_pin_set_output_level(ADC_CONV_PIN, true);
	audio_buffer[0] = ((uint16_t)adc_vals[0] << 8) || (adc_vals[1]);
     968:	7822      	ldrb	r2, [r4, #0]
     96a:	2301      	movs	r3, #1
     96c:	2a00      	cmp	r2, #0
     96e:	d104      	bne.n	97a <audio_record_1samp+0x36>
     970:	ab01      	add	r3, sp, #4
     972:	785b      	ldrb	r3, [r3, #1]
     974:	1e5a      	subs	r2, r3, #1
     976:	4193      	sbcs	r3, r2
     978:	b2db      	uxtb	r3, r3
     97a:	4a05      	ldr	r2, [pc, #20]	; (990 <audio_record_1samp+0x4c>)
     97c:	8013      	strh	r3, [r2, #0]
}
     97e:	b003      	add	sp, #12
     980:	bdf0      	pop	{r4, r5, r6, r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	41004400 	.word	0x41004400
     988:	2000067c 	.word	0x2000067c
     98c:	00005ce9 	.word	0x00005ce9
     990:	20000294 	.word	0x20000294

00000994 <audio_sync_reached_callback>:

static void audio_sync_reached_callback(void) {
     994:	b510      	push	{r4, lr}
	audio_record_1samp();
     996:	4b07      	ldr	r3, [pc, #28]	; (9b4 <audio_sync_reached_callback+0x20>)
     998:	4798      	blx	r3
	audio_frame_cnt++;
     99a:	4b07      	ldr	r3, [pc, #28]	; (9b8 <audio_sync_reached_callback+0x24>)
     99c:	681a      	ldr	r2, [r3, #0]
     99e:	3201      	adds	r2, #1
     9a0:	601a      	str	r2, [r3, #0]
	if(audio_frame_cnt >= 10000) {
     9a2:	681a      	ldr	r2, [r3, #0]
     9a4:	4b05      	ldr	r3, [pc, #20]	; (9bc <audio_sync_reached_callback+0x28>)
     9a6:	429a      	cmp	r2, r3
     9a8:	d902      	bls.n	9b0 <audio_sync_reached_callback+0x1c>
		audio_frame_cnt = 0;
     9aa:	2200      	movs	r2, #0
     9ac:	4b02      	ldr	r3, [pc, #8]	; (9b8 <audio_sync_reached_callback+0x24>)
     9ae:	601a      	str	r2, [r3, #0]
	}
}
     9b0:	bd10      	pop	{r4, pc}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	00000945 	.word	0x00000945
     9b8:	2000017c 	.word	0x2000017c
     9bc:	0000270f 	.word	0x0000270f

000009c0 <audio_sync_init>:

void audio_sync_init(void) {
     9c0:	b570      	push	{r4, r5, r6, lr}
     9c2:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     9c4:	4d1f      	ldr	r5, [pc, #124]	; (a44 <audio_sync_init+0x84>)
     9c6:	0029      	movs	r1, r5
     9c8:	a801      	add	r0, sp, #4
     9ca:	4b1f      	ldr	r3, [pc, #124]	; (a48 <audio_sync_init+0x88>)
     9cc:	4798      	blx	r3
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
     9ce:	4b1f      	ldr	r3, [pc, #124]	; (a4c <audio_sync_init+0x8c>)
     9d0:	9302      	str	r3, [sp, #8]
	config_tcc.compare.match[0] = AUDIO_SYNC_CONV_CNT;
     9d2:	2332      	movs	r3, #50	; 0x32
     9d4:	9308      	str	r3, [sp, #32]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
     9d6:	4c1e      	ldr	r4, [pc, #120]	; (a50 <audio_sync_init+0x90>)
     9d8:	aa01      	add	r2, sp, #4
     9da:	0029      	movs	r1, r5
     9dc:	0020      	movs	r0, r4
     9de:	4b1d      	ldr	r3, [pc, #116]	; (a54 <audio_sync_init+0x94>)
     9e0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     9e2:	6822      	ldr	r2, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     9e4:	2102      	movs	r1, #2
     9e6:	6893      	ldr	r3, [r2, #8]
     9e8:	4219      	tst	r1, r3
     9ea:	d1fc      	bne.n	9e6 <audio_sync_init+0x26>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     9ec:	6813      	ldr	r3, [r2, #0]
     9ee:	2102      	movs	r1, #2
     9f0:	430b      	orrs	r3, r1
     9f2:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     9f4:	4b16      	ldr	r3, [pc, #88]	; (a50 <audio_sync_init+0x90>)
     9f6:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     9f8:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     9fa:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     9fc:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     9fe:	6893      	ldr	r3, [r2, #8]
     a00:	4219      	tst	r1, r3
     a02:	d1fc      	bne.n	9fe <audio_sync_init+0x3e>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     a04:	7953      	ldrb	r3, [r2, #5]
     a06:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     a08:	d005      	beq.n	a16 <audio_sync_init+0x56>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
     a0a:	2b40      	cmp	r3, #64	; 0x40
     a0c:	d005      	beq.n	a1a <audio_sync_init+0x5a>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
     a0e:	2b20      	cmp	r3, #32
     a10:	d1f5      	bne.n	9fe <audio_sync_init+0x3e>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     a12:	7114      	strb	r4, [r2, #4]
     a14:	e7f3      	b.n	9fe <audio_sync_init+0x3e>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
     a16:	2340      	movs	r3, #64	; 0x40
     a18:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
     a1a:	4e0f      	ldr	r6, [pc, #60]	; (a58 <audio_sync_init+0x98>)
     a1c:	4c0c      	ldr	r4, [pc, #48]	; (a50 <audio_sync_init+0x90>)
     a1e:	2200      	movs	r2, #0
     a20:	0031      	movs	r1, r6
     a22:	0020      	movs	r0, r4
     a24:	4d0d      	ldr	r5, [pc, #52]	; (a5c <audio_sync_init+0x9c>)
     a26:	47a8      	blx	r5
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_CHANNEL_0);
     a28:	2208      	movs	r2, #8
     a2a:	0031      	movs	r1, r6
     a2c:	0020      	movs	r0, r4
     a2e:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
     a30:	2100      	movs	r1, #0
     a32:	0020      	movs	r0, r4
     a34:	4d0a      	ldr	r5, [pc, #40]	; (a60 <audio_sync_init+0xa0>)
     a36:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_CHANNEL_0);
     a38:	2108      	movs	r1, #8
     a3a:	0020      	movs	r0, r4
     a3c:	47a8      	blx	r5
     a3e:	b02a      	add	sp, #168	; 0xa8
     a40:	bd70      	pop	{r4, r5, r6, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	42002000 	.word	0x42002000
     a48:	00000149 	.word	0x00000149
     a4c:	00000424 	.word	0x00000424
     a50:	200006c0 	.word	0x200006c0
     a54:	00000295 	.word	0x00000295
     a58:	00000995 	.word	0x00000995
     a5c:	000006a1 	.word	0x000006a1
     a60:	000006b9 	.word	0x000006b9

00000a64 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     a64:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     a66:	4b07      	ldr	r3, [pc, #28]	; (a84 <sd_mmc_configure_slot+0x20>)
     a68:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     a6a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     a6c:	5ccb      	ldrb	r3, [r1, r3]
     a6e:	1e5a      	subs	r2, r3, #1
     a70:	4193      	sbcs	r3, r2
     a72:	b2db      	uxtb	r3, r3
     a74:	7c4a      	ldrb	r2, [r1, #17]
     a76:	6809      	ldr	r1, [r1, #0]
     a78:	4803      	ldr	r0, [pc, #12]	; (a88 <sd_mmc_configure_slot+0x24>)
     a7a:	7800      	ldrb	r0, [r0, #0]
     a7c:	4c03      	ldr	r4, [pc, #12]	; (a8c <sd_mmc_configure_slot+0x28>)
     a7e:	47a0      	blx	r4
}
     a80:	bd10      	pop	{r4, pc}
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	20000180 	.word	0x20000180
     a88:	20000189 	.word	0x20000189
     a8c:	00006611 	.word	0x00006611

00000a90 <sd_mmc_select_slot>:
{
     a90:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     a92:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     a94:	2800      	cmp	r0, #0
     a96:	d001      	beq.n	a9c <sd_mmc_select_slot+0xc>
}
     a98:	0018      	movs	r0, r3
     a9a:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     a9c:	4b40      	ldr	r3, [pc, #256]	; (ba0 <sd_mmc_select_slot+0x110>)
     a9e:	7a19      	ldrb	r1, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     aa0:	09ca      	lsrs	r2, r1, #7
		return NULL;
     aa2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     aa4:	2a00      	cmp	r2, #0
     aa6:	d104      	bne.n	ab2 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     aa8:	094b      	lsrs	r3, r1, #5
     aaa:	01db      	lsls	r3, r3, #7
     aac:	4a3d      	ldr	r2, [pc, #244]	; (ba4 <sd_mmc_select_slot+0x114>)
     aae:	4694      	mov	ip, r2
     ab0:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     ab2:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ab4:	221f      	movs	r2, #31
     ab6:	400a      	ands	r2, r1
     ab8:	2301      	movs	r3, #1
     aba:	4093      	lsls	r3, r2
     abc:	4218      	tst	r0, r3
     abe:	d010      	beq.n	ae2 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     ac0:	4b37      	ldr	r3, [pc, #220]	; (ba0 <sd_mmc_select_slot+0x110>)
     ac2:	7b9b      	ldrb	r3, [r3, #14]
     ac4:	2b01      	cmp	r3, #1
     ac6:	d004      	beq.n	ad2 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     ac8:	2204      	movs	r2, #4
     aca:	4b35      	ldr	r3, [pc, #212]	; (ba0 <sd_mmc_select_slot+0x110>)
     acc:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     ace:	2302      	movs	r3, #2
     ad0:	e7e2      	b.n	a98 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     ad2:	4b35      	ldr	r3, [pc, #212]	; (ba8 <sd_mmc_select_slot+0x118>)
     ad4:	781b      	ldrb	r3, [r3, #0]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d0f6      	beq.n	ac8 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     ada:	2200      	movs	r2, #0
     adc:	4b33      	ldr	r3, [pc, #204]	; (bac <sd_mmc_select_slot+0x11c>)
     ade:	601a      	str	r2, [r3, #0]
     ae0:	e7f2      	b.n	ac8 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     ae2:	4b2f      	ldr	r3, [pc, #188]	; (ba0 <sd_mmc_select_slot+0x110>)
     ae4:	7b9a      	ldrb	r2, [r3, #14]
     ae6:	2a04      	cmp	r2, #4
     ae8:	d005      	beq.n	af6 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     aea:	2a01      	cmp	r2, #1
     aec:	d033      	beq.n	b56 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     aee:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     af0:	2a03      	cmp	r2, #3
     af2:	d0d1      	beq.n	a98 <sd_mmc_select_slot+0x8>
     af4:	e045      	b.n	b82 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     af6:	3a03      	subs	r2, #3
     af8:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     afa:	4b2c      	ldr	r3, [pc, #176]	; (bac <sd_mmc_select_slot+0x11c>)
     afc:	681b      	ldr	r3, [r3, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d017      	beq.n	b32 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     b02:	2200      	movs	r2, #0
     b04:	4b28      	ldr	r3, [pc, #160]	; (ba8 <sd_mmc_select_slot+0x118>)
     b06:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     b08:	2000      	movs	r0, #0
     b0a:	4b29      	ldr	r3, [pc, #164]	; (bb0 <sd_mmc_select_slot+0x120>)
     b0c:	4798      	blx	r3
     b0e:	22fa      	movs	r2, #250	; 0xfa
     b10:	0092      	lsls	r2, r2, #2
     b12:	2300      	movs	r3, #0
     b14:	2100      	movs	r1, #0
     b16:	4c27      	ldr	r4, [pc, #156]	; (bb4 <sd_mmc_select_slot+0x124>)
     b18:	47a0      	blx	r4
     b1a:	4a27      	ldr	r2, [pc, #156]	; (bb8 <sd_mmc_select_slot+0x128>)
     b1c:	2300      	movs	r3, #0
     b1e:	1880      	adds	r0, r0, r2
     b20:	4159      	adcs	r1, r3
     b22:	4a26      	ldr	r2, [pc, #152]	; (bbc <sd_mmc_select_slot+0x12c>)
     b24:	2300      	movs	r3, #0
     b26:	4c26      	ldr	r4, [pc, #152]	; (bc0 <sd_mmc_select_slot+0x130>)
     b28:	47a0      	blx	r4
     b2a:	4b26      	ldr	r3, [pc, #152]	; (bc4 <sd_mmc_select_slot+0x134>)
     b2c:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     b2e:	2302      	movs	r3, #2
     b30:	e7b2      	b.n	a98 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     b32:	2401      	movs	r4, #1
     b34:	4b1c      	ldr	r3, [pc, #112]	; (ba8 <sd_mmc_select_slot+0x118>)
     b36:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     b38:	2000      	movs	r0, #0
     b3a:	4b1d      	ldr	r3, [pc, #116]	; (bb0 <sd_mmc_select_slot+0x120>)
     b3c:	4798      	blx	r3
     b3e:	21fa      	movs	r1, #250	; 0xfa
     b40:	0149      	lsls	r1, r1, #5
     b42:	4b21      	ldr	r3, [pc, #132]	; (bc8 <sd_mmc_select_slot+0x138>)
     b44:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     b46:	23fa      	movs	r3, #250	; 0xfa
     b48:	009b      	lsls	r3, r3, #2
     b4a:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     b4c:	4b17      	ldr	r3, [pc, #92]	; (bac <sd_mmc_select_slot+0x11c>)
     b4e:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     b50:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     b52:	2302      	movs	r3, #2
     b54:	e7a0      	b.n	a98 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     b56:	4b14      	ldr	r3, [pc, #80]	; (ba8 <sd_mmc_select_slot+0x118>)
     b58:	781b      	ldrb	r3, [r3, #0]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d007      	beq.n	b6e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     b5e:	4b13      	ldr	r3, [pc, #76]	; (bac <sd_mmc_select_slot+0x11c>)
     b60:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     b62:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     b64:	03d2      	lsls	r2, r2, #15
     b66:	d597      	bpl.n	a98 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     b68:	2200      	movs	r2, #0
     b6a:	4b10      	ldr	r3, [pc, #64]	; (bac <sd_mmc_select_slot+0x11c>)
     b6c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     b6e:	4b0c      	ldr	r3, [pc, #48]	; (ba0 <sd_mmc_select_slot+0x110>)
     b70:	2202      	movs	r2, #2
     b72:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     b74:	4a15      	ldr	r2, [pc, #84]	; (bcc <sd_mmc_select_slot+0x13c>)
     b76:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     b78:	2201      	movs	r2, #1
     b7a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     b7c:	2100      	movs	r1, #0
     b7e:	3221      	adds	r2, #33	; 0x21
     b80:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     b82:	2200      	movs	r2, #0
     b84:	4b12      	ldr	r3, [pc, #72]	; (bd0 <sd_mmc_select_slot+0x140>)
     b86:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     b88:	4c05      	ldr	r4, [pc, #20]	; (ba0 <sd_mmc_select_slot+0x110>)
     b8a:	4b12      	ldr	r3, [pc, #72]	; (bd4 <sd_mmc_select_slot+0x144>)
     b8c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     b8e:	4b12      	ldr	r3, [pc, #72]	; (bd8 <sd_mmc_select_slot+0x148>)
     b90:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     b92:	7ba3      	ldrb	r3, [r4, #14]
     b94:	3b02      	subs	r3, #2
     b96:	425a      	negs	r2, r3
     b98:	4153      	adcs	r3, r2
     b9a:	b2db      	uxtb	r3, r3
     b9c:	e77c      	b.n	a98 <sd_mmc_select_slot+0x8>
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	2000000c 	.word	0x2000000c
     ba4:	41004400 	.word	0x41004400
     ba8:	20000188 	.word	0x20000188
     bac:	e000e010 	.word	0xe000e010
     bb0:	00006d01 	.word	0x00006d01
     bb4:	0000743d 	.word	0x0000743d
     bb8:	00001b57 	.word	0x00001b57
     bbc:	00001b58 	.word	0x00001b58
     bc0:	000073fd 	.word	0x000073fd
     bc4:	20000001 	.word	0x20000001
     bc8:	00007095 	.word	0x00007095
     bcc:	00061a80 	.word	0x00061a80
     bd0:	20000189 	.word	0x20000189
     bd4:	20000180 	.word	0x20000180
     bd8:	00000a65 	.word	0x00000a65

00000bdc <sd_mmc_cmd13>:
{
     bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bde:	4d09      	ldr	r5, [pc, #36]	; (c04 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     be0:	4f09      	ldr	r7, [pc, #36]	; (c08 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     be2:	4e0a      	ldr	r6, [pc, #40]	; (c0c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     be4:	2100      	movs	r1, #0
     be6:	480a      	ldr	r0, [pc, #40]	; (c10 <sd_mmc_cmd13+0x34>)
     be8:	47b8      	blx	r7
     bea:	1e04      	subs	r4, r0, #0
     bec:	d007      	beq.n	bfe <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     bee:	47b0      	blx	r6
     bf0:	23ff      	movs	r3, #255	; 0xff
     bf2:	4203      	tst	r3, r0
     bf4:	d003      	beq.n	bfe <sd_mmc_cmd13+0x22>
     bf6:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     bf8:	2d00      	cmp	r5, #0
     bfa:	d1f3      	bne.n	be4 <sd_mmc_cmd13+0x8>
			return false;
     bfc:	2400      	movs	r4, #0
}
     bfe:	0020      	movs	r0, r4
     c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c02:	46c0      	nop			; (mov r8, r8)
     c04:	00030d41 	.word	0x00030d41
     c08:	00006855 	.word	0x00006855
     c0c:	0000686d 	.word	0x0000686d
     c10:	00001b0d 	.word	0x00001b0d

00000c14 <sd_mmc_cmd9_spi>:
{
     c14:	b510      	push	{r4, lr}
     c16:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     c18:	4b0c      	ldr	r3, [pc, #48]	; (c4c <sd_mmc_cmd9_spi+0x38>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	8999      	ldrh	r1, [r3, #12]
     c1e:	0409      	lsls	r1, r1, #16
     c20:	2301      	movs	r3, #1
     c22:	9300      	str	r3, [sp, #0]
     c24:	2210      	movs	r2, #16
     c26:	480a      	ldr	r0, [pc, #40]	; (c50 <sd_mmc_cmd9_spi+0x3c>)
     c28:	4c0a      	ldr	r4, [pc, #40]	; (c54 <sd_mmc_cmd9_spi+0x40>)
     c2a:	47a0      	blx	r4
     c2c:	2800      	cmp	r0, #0
     c2e:	d101      	bne.n	c34 <sd_mmc_cmd9_spi+0x20>
}
     c30:	b002      	add	sp, #8
     c32:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     c34:	4b05      	ldr	r3, [pc, #20]	; (c4c <sd_mmc_cmd9_spi+0x38>)
     c36:	6818      	ldr	r0, [r3, #0]
     c38:	3012      	adds	r0, #18
     c3a:	2101      	movs	r1, #1
     c3c:	4b06      	ldr	r3, [pc, #24]	; (c58 <sd_mmc_cmd9_spi+0x44>)
     c3e:	4798      	blx	r3
     c40:	2800      	cmp	r0, #0
     c42:	d0f5      	beq.n	c30 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     c44:	4b05      	ldr	r3, [pc, #20]	; (c5c <sd_mmc_cmd9_spi+0x48>)
     c46:	4798      	blx	r3
     c48:	e7f2      	b.n	c30 <sd_mmc_cmd9_spi+0x1c>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	20000180 	.word	0x20000180
     c50:	00081109 	.word	0x00081109
     c54:	000066c5 	.word	0x000066c5
     c58:	000068f1 	.word	0x000068f1
     c5c:	0000697d 	.word	0x0000697d

00000c60 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     c60:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     c62:	4b04      	ldr	r3, [pc, #16]	; (c74 <sd_mmc_deselect_slot+0x14>)
     c64:	781b      	ldrb	r3, [r3, #0]
     c66:	2b00      	cmp	r3, #0
     c68:	d000      	beq.n	c6c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     c6a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     c6c:	2000      	movs	r0, #0
     c6e:	4b02      	ldr	r3, [pc, #8]	; (c78 <sd_mmc_deselect_slot+0x18>)
     c70:	4798      	blx	r3
}
     c72:	e7fa      	b.n	c6a <sd_mmc_deselect_slot+0xa>
     c74:	20000189 	.word	0x20000189
     c78:	00006665 	.word	0x00006665

00000c7c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     c7c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     c7e:	2204      	movs	r2, #4
     c80:	4b03      	ldr	r3, [pc, #12]	; (c90 <sd_mmc_init+0x14>)
     c82:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     c84:	32fb      	adds	r2, #251	; 0xfb
     c86:	4b03      	ldr	r3, [pc, #12]	; (c94 <sd_mmc_init+0x18>)
     c88:	701a      	strb	r2, [r3, #0]
	driver_init();
     c8a:	4b03      	ldr	r3, [pc, #12]	; (c98 <sd_mmc_init+0x1c>)
     c8c:	4798      	blx	r3
}
     c8e:	bd10      	pop	{r4, pc}
     c90:	2000000c 	.word	0x2000000c
     c94:	20000189 	.word	0x20000189
     c98:	0000651d 	.word	0x0000651d

00000c9c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9e:	46c6      	mov	lr, r8
     ca0:	b500      	push	{lr}
     ca2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     ca4:	4bcb      	ldr	r3, [pc, #812]	; (fd4 <sd_mmc_check+0x338>)
     ca6:	4798      	blx	r3
     ca8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     caa:	2801      	cmp	r0, #1
     cac:	d006      	beq.n	cbc <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     cae:	4bca      	ldr	r3, [pc, #808]	; (fd8 <sd_mmc_check+0x33c>)
     cb0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     cb2:	0020      	movs	r0, r4
     cb4:	b008      	add	sp, #32
     cb6:	bc04      	pop	{r2}
     cb8:	4690      	mov	r8, r2
     cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     cbc:	4bc7      	ldr	r3, [pc, #796]	; (fdc <sd_mmc_check+0x340>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	2201      	movs	r2, #1
     cc2:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     cc4:	2200      	movs	r2, #0
     cc6:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     cc8:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     cca:	4bc5      	ldr	r3, [pc, #788]	; (fe0 <sd_mmc_check+0x344>)
     ccc:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     cce:	2100      	movs	r1, #0
     cd0:	2088      	movs	r0, #136	; 0x88
     cd2:	0140      	lsls	r0, r0, #5
     cd4:	4bc3      	ldr	r3, [pc, #780]	; (fe4 <sd_mmc_check+0x348>)
     cd6:	4798      	blx	r3
     cd8:	2800      	cmp	r0, #0
     cda:	d107      	bne.n	cec <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     cdc:	4bbf      	ldr	r3, [pc, #764]	; (fdc <sd_mmc_check+0x340>)
     cde:	681b      	ldr	r3, [r3, #0]
     ce0:	2203      	movs	r2, #3
     ce2:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     ce4:	4bbc      	ldr	r3, [pc, #752]	; (fd8 <sd_mmc_check+0x33c>)
     ce6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     ce8:	2403      	movs	r4, #3
     cea:	e7e2      	b.n	cb2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     cec:	21d5      	movs	r1, #213	; 0xd5
     cee:	0049      	lsls	r1, r1, #1
     cf0:	48bd      	ldr	r0, [pc, #756]	; (fe8 <sd_mmc_check+0x34c>)
     cf2:	4bbc      	ldr	r3, [pc, #752]	; (fe4 <sd_mmc_check+0x348>)
     cf4:	4798      	blx	r3
	*v2 = 0;
     cf6:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     cf8:	2800      	cmp	r0, #0
     cfa:	d125      	bne.n	d48 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     cfc:	4bb7      	ldr	r3, [pc, #732]	; (fdc <sd_mmc_check+0x340>)
     cfe:	681b      	ldr	r3, [r3, #0]
     d00:	7bdb      	ldrb	r3, [r3, #15]
     d02:	07db      	lsls	r3, r3, #31
     d04:	d500      	bpl.n	d08 <sd_mmc_check+0x6c>
     d06:	e1eb      	b.n	10e0 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     d08:	4bb4      	ldr	r3, [pc, #720]	; (fdc <sd_mmc_check+0x340>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	7bda      	ldrb	r2, [r3, #15]
     d0e:	2309      	movs	r3, #9
     d10:	4013      	ands	r3, r2
     d12:	2b01      	cmp	r3, #1
     d14:	d10f      	bne.n	d36 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d16:	2180      	movs	r1, #128	; 0x80
     d18:	0089      	lsls	r1, r1, #2
     d1a:	48b4      	ldr	r0, [pc, #720]	; (fec <sd_mmc_check+0x350>)
     d1c:	4bb1      	ldr	r3, [pc, #708]	; (fe4 <sd_mmc_check+0x348>)
     d1e:	4798      	blx	r3
     d20:	2800      	cmp	r0, #0
     d22:	d0db      	beq.n	cdc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d24:	4bad      	ldr	r3, [pc, #692]	; (fdc <sd_mmc_check+0x340>)
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	7bdb      	ldrb	r3, [r3, #15]
     d2a:	07db      	lsls	r3, r3, #31
     d2c:	d503      	bpl.n	d36 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     d2e:	4bb0      	ldr	r3, [pc, #704]	; (ff0 <sd_mmc_check+0x354>)
     d30:	4798      	blx	r3
     d32:	2800      	cmp	r0, #0
     d34:	d0d2      	beq.n	cdc <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d36:	4baf      	ldr	r3, [pc, #700]	; (ff4 <sd_mmc_check+0x358>)
     d38:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     d3a:	4ba8      	ldr	r3, [pc, #672]	; (fdc <sd_mmc_check+0x340>)
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	2200      	movs	r2, #0
     d40:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     d42:	4ba5      	ldr	r3, [pc, #660]	; (fd8 <sd_mmc_check+0x33c>)
     d44:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     d46:	e7b4      	b.n	cb2 <sd_mmc_check+0x16>
	resp = driver_get_response();
     d48:	4bab      	ldr	r3, [pc, #684]	; (ff8 <sd_mmc_check+0x35c>)
     d4a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     d4c:	1c43      	adds	r3, r0, #1
     d4e:	d100      	bne.n	d52 <sd_mmc_check+0xb6>
     d50:	e1c4      	b.n	10dc <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     d52:	0500      	lsls	r0, r0, #20
     d54:	0d00      	lsrs	r0, r0, #20
     d56:	23d5      	movs	r3, #213	; 0xd5
     d58:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     d5a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     d5c:	4298      	cmp	r0, r3
     d5e:	d1bd      	bne.n	cdc <sd_mmc_check+0x40>
     d60:	e7cc      	b.n	cfc <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     d62:	2100      	movs	r1, #0
     d64:	48a5      	ldr	r0, [pc, #660]	; (ffc <sd_mmc_check+0x360>)
     d66:	4b9f      	ldr	r3, [pc, #636]	; (fe4 <sd_mmc_check+0x348>)
     d68:	4798      	blx	r3
     d6a:	2800      	cmp	r0, #0
     d6c:	d119      	bne.n	da2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     d6e:	4b9b      	ldr	r3, [pc, #620]	; (fdc <sd_mmc_check+0x340>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	2202      	movs	r2, #2
     d74:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     d76:	2100      	movs	r1, #0
     d78:	2088      	movs	r0, #136	; 0x88
     d7a:	0140      	lsls	r0, r0, #5
     d7c:	4b99      	ldr	r3, [pc, #612]	; (fe4 <sd_mmc_check+0x348>)
     d7e:	4798      	blx	r3
     d80:	2800      	cmp	r0, #0
     d82:	d0ab      	beq.n	cdc <sd_mmc_check+0x40>
     d84:	4d9e      	ldr	r5, [pc, #632]	; (1000 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d86:	4f97      	ldr	r7, [pc, #604]	; (fe4 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     d88:	4e9b      	ldr	r6, [pc, #620]	; (ff8 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d8a:	2100      	movs	r1, #0
     d8c:	489d      	ldr	r0, [pc, #628]	; (1004 <sd_mmc_check+0x368>)
     d8e:	47b8      	blx	r7
     d90:	2800      	cmp	r0, #0
     d92:	d0a3      	beq.n	cdc <sd_mmc_check+0x40>
		resp = driver_get_response();
     d94:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     d96:	07c3      	lsls	r3, r0, #31
     d98:	d57d      	bpl.n	e96 <sd_mmc_check+0x1fa>
     d9a:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     d9c:	2d00      	cmp	r5, #0
     d9e:	d1f4      	bne.n	d8a <sd_mmc_check+0xee>
     da0:	e79c      	b.n	cdc <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     da2:	4b95      	ldr	r3, [pc, #596]	; (ff8 <sd_mmc_check+0x35c>)
     da4:	4798      	blx	r3
     da6:	0043      	lsls	r3, r0, #1
     da8:	d505      	bpl.n	db6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     daa:	4b8c      	ldr	r3, [pc, #560]	; (fdc <sd_mmc_check+0x340>)
     dac:	681a      	ldr	r2, [r3, #0]
     dae:	7bd3      	ldrb	r3, [r2, #15]
     db0:	2108      	movs	r1, #8
     db2:	430b      	orrs	r3, r1
     db4:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     db6:	2100      	movs	r1, #0
     db8:	4893      	ldr	r0, [pc, #588]	; (1008 <sd_mmc_check+0x36c>)
     dba:	4b8a      	ldr	r3, [pc, #552]	; (fe4 <sd_mmc_check+0x348>)
     dbc:	4798      	blx	r3
     dbe:	2800      	cmp	r0, #0
     dc0:	d08c      	beq.n	cdc <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     dc2:	4b86      	ldr	r3, [pc, #536]	; (fdc <sd_mmc_check+0x340>)
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	7bdb      	ldrb	r3, [r3, #15]
     dc8:	07da      	lsls	r2, r3, #31
     dca:	d400      	bmi.n	dce <sd_mmc_check+0x132>
     dcc:	e1a4      	b.n	1118 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     dce:	4b8f      	ldr	r3, [pc, #572]	; (100c <sd_mmc_check+0x370>)
     dd0:	4798      	blx	r3
     dd2:	2800      	cmp	r0, #0
     dd4:	d082      	beq.n	cdc <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     dd6:	4b81      	ldr	r3, [pc, #516]	; (fdc <sd_mmc_check+0x340>)
     dd8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dda:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     ddc:	2107      	movs	r1, #7
     dde:	4019      	ands	r1, r3
     de0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     de2:	488b      	ldr	r0, [pc, #556]	; (1010 <sd_mmc_check+0x374>)
     de4:	5808      	ldr	r0, [r1, r0]
     de6:	21fa      	movs	r1, #250	; 0xfa
     de8:	0089      	lsls	r1, r1, #2
     dea:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     dec:	065b      	lsls	r3, r3, #25
     dee:	0f1b      	lsrs	r3, r3, #28
     df0:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     df2:	4888      	ldr	r0, [pc, #544]	; (1014 <sd_mmc_check+0x378>)
     df4:	581b      	ldr	r3, [r3, r0]
     df6:	434b      	muls	r3, r1
     df8:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     dfa:	7c93      	ldrb	r3, [r2, #18]
     dfc:	099b      	lsrs	r3, r3, #6
     dfe:	d000      	beq.n	e02 <sd_mmc_check+0x166>
     e00:	e13c      	b.n	107c <sd_mmc_check+0x3e0>
     e02:	7e91      	ldrb	r1, [r2, #26]
     e04:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e06:	7e53      	ldrb	r3, [r2, #25]
     e08:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e0a:	7e10      	ldrb	r0, [r2, #24]
     e0c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e0e:	4303      	orrs	r3, r0
     e10:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e12:	7f10      	ldrb	r0, [r2, #28]
     e14:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e16:	7ed1      	ldrb	r1, [r2, #27]
     e18:	0049      	lsls	r1, r1, #1
     e1a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     e1c:	051b      	lsls	r3, r3, #20
     e1e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     e20:	3301      	adds	r3, #1
     e22:	2107      	movs	r1, #7
     e24:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     e26:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     e28:	408b      	lsls	r3, r1
     e2a:	7dd0      	ldrb	r0, [r2, #23]
     e2c:	210f      	movs	r1, #15
     e2e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     e30:	408b      	lsls	r3, r1
				/ 1024;
     e32:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     e34:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     e36:	8991      	ldrh	r1, [r2, #12]
     e38:	0409      	lsls	r1, r1, #16
     e3a:	4877      	ldr	r0, [pc, #476]	; (1018 <sd_mmc_check+0x37c>)
     e3c:	4b69      	ldr	r3, [pc, #420]	; (fe4 <sd_mmc_check+0x348>)
     e3e:	4798      	blx	r3
     e40:	2800      	cmp	r0, #0
     e42:	d100      	bne.n	e46 <sd_mmc_check+0x1aa>
     e44:	e74a      	b.n	cdc <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     e46:	2301      	movs	r3, #1
     e48:	9300      	str	r3, [sp, #0]
     e4a:	2208      	movs	r2, #8
     e4c:	2100      	movs	r1, #0
     e4e:	4873      	ldr	r0, [pc, #460]	; (101c <sd_mmc_check+0x380>)
     e50:	4d73      	ldr	r5, [pc, #460]	; (1020 <sd_mmc_check+0x384>)
     e52:	47a8      	blx	r5
     e54:	2800      	cmp	r0, #0
     e56:	d100      	bne.n	e5a <sd_mmc_check+0x1be>
     e58:	e740      	b.n	cdc <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     e5a:	2101      	movs	r1, #1
     e5c:	a806      	add	r0, sp, #24
     e5e:	4b71      	ldr	r3, [pc, #452]	; (1024 <sd_mmc_check+0x388>)
     e60:	4798      	blx	r3
     e62:	2800      	cmp	r0, #0
     e64:	d100      	bne.n	e68 <sd_mmc_check+0x1cc>
     e66:	e739      	b.n	cdc <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     e68:	4b6f      	ldr	r3, [pc, #444]	; (1028 <sd_mmc_check+0x38c>)
     e6a:	4798      	blx	r3
     e6c:	2800      	cmp	r0, #0
     e6e:	d100      	bne.n	e72 <sd_mmc_check+0x1d6>
     e70:	e734      	b.n	cdc <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e72:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	220f      	movs	r2, #15
     e78:	4013      	ands	r3, r2
     e7a:	2b01      	cmp	r3, #1
     e7c:	d100      	bne.n	e80 <sd_mmc_check+0x1e4>
     e7e:	e119      	b.n	10b4 <sd_mmc_check+0x418>
     e80:	2b00      	cmp	r3, #0
     e82:	d100      	bne.n	e86 <sd_mmc_check+0x1ea>
     e84:	e109      	b.n	109a <sd_mmc_check+0x3fe>
     e86:	2b02      	cmp	r3, #2
     e88:	d100      	bne.n	e8c <sd_mmc_check+0x1f0>
     e8a:	e118      	b.n	10be <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     e8c:	4b53      	ldr	r3, [pc, #332]	; (fdc <sd_mmc_check+0x340>)
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	2210      	movs	r2, #16
     e92:	741a      	strb	r2, [r3, #16]
     e94:	e105      	b.n	10a2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     e96:	2100      	movs	r1, #0
     e98:	4858      	ldr	r0, [pc, #352]	; (ffc <sd_mmc_check+0x360>)
     e9a:	4b52      	ldr	r3, [pc, #328]	; (fe4 <sd_mmc_check+0x348>)
     e9c:	4798      	blx	r3
     e9e:	2800      	cmp	r0, #0
     ea0:	d100      	bne.n	ea4 <sd_mmc_check+0x208>
     ea2:	e71b      	b.n	cdc <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     ea4:	4b54      	ldr	r3, [pc, #336]	; (ff8 <sd_mmc_check+0x35c>)
     ea6:	4798      	blx	r3
     ea8:	23c0      	movs	r3, #192	; 0xc0
     eaa:	05db      	lsls	r3, r3, #23
     eac:	4018      	ands	r0, r3
     eae:	2380      	movs	r3, #128	; 0x80
     eb0:	05db      	lsls	r3, r3, #23
     eb2:	4298      	cmp	r0, r3
     eb4:	d105      	bne.n	ec2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     eb6:	4b49      	ldr	r3, [pc, #292]	; (fdc <sd_mmc_check+0x340>)
     eb8:	681a      	ldr	r2, [r3, #0]
     eba:	7bd1      	ldrb	r1, [r2, #15]
     ebc:	2308      	movs	r3, #8
     ebe:	430b      	orrs	r3, r1
     ec0:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ec2:	2100      	movs	r1, #0
     ec4:	4850      	ldr	r0, [pc, #320]	; (1008 <sd_mmc_check+0x36c>)
     ec6:	4b47      	ldr	r3, [pc, #284]	; (fe4 <sd_mmc_check+0x348>)
     ec8:	4798      	blx	r3
     eca:	2800      	cmp	r0, #0
     ecc:	d100      	bne.n	ed0 <sd_mmc_check+0x234>
     ece:	e705      	b.n	cdc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     ed0:	4b4e      	ldr	r3, [pc, #312]	; (100c <sd_mmc_check+0x370>)
     ed2:	4798      	blx	r3
     ed4:	2800      	cmp	r0, #0
     ed6:	d100      	bne.n	eda <sd_mmc_check+0x23e>
     ed8:	e700      	b.n	cdc <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     eda:	4b40      	ldr	r3, [pc, #256]	; (fdc <sd_mmc_check+0x340>)
     edc:	681a      	ldr	r2, [r3, #0]
     ede:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     ee0:	069b      	lsls	r3, r3, #26
     ee2:	0f1b      	lsrs	r3, r3, #28
     ee4:	2b02      	cmp	r3, #2
     ee6:	d100      	bne.n	eea <sd_mmc_check+0x24e>
     ee8:	e0a8      	b.n	103c <sd_mmc_check+0x3a0>
     eea:	d907      	bls.n	efc <sd_mmc_check+0x260>
     eec:	2b03      	cmp	r3, #3
     eee:	d100      	bne.n	ef2 <sd_mmc_check+0x256>
     ef0:	e0a7      	b.n	1042 <sd_mmc_check+0x3a6>
     ef2:	2b04      	cmp	r3, #4
     ef4:	d104      	bne.n	f00 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     ef6:	2340      	movs	r3, #64	; 0x40
     ef8:	7413      	strb	r3, [r2, #16]
     efa:	e003      	b.n	f04 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     efc:	2b01      	cmp	r3, #1
     efe:	d066      	beq.n	fce <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     f00:	2312      	movs	r3, #18
     f02:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f04:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     f06:	0659      	lsls	r1, r3, #25
     f08:	0f09      	lsrs	r1, r1, #28
     f0a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     f0c:	2007      	movs	r0, #7
     f0e:	4003      	ands	r3, r0
     f10:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     f12:	483f      	ldr	r0, [pc, #252]	; (1010 <sd_mmc_check+0x374>)
     f14:	5818      	ldr	r0, [r3, r0]
     f16:	23fa      	movs	r3, #250	; 0xfa
     f18:	009b      	lsls	r3, r3, #2
     f1a:	4343      	muls	r3, r0
     f1c:	4843      	ldr	r0, [pc, #268]	; (102c <sd_mmc_check+0x390>)
     f1e:	5809      	ldr	r1, [r1, r0]
     f20:	434b      	muls	r3, r1
     f22:	6013      	str	r3, [r2, #0]
     f24:	7e91      	ldrb	r1, [r2, #26]
     f26:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f28:	7e53      	ldrb	r3, [r2, #25]
     f2a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f2c:	7e10      	ldrb	r0, [r2, #24]
     f2e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f30:	4303      	orrs	r3, r0
     f32:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     f34:	051b      	lsls	r3, r3, #20
     f36:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     f38:	493d      	ldr	r1, [pc, #244]	; (1030 <sd_mmc_check+0x394>)
     f3a:	428b      	cmp	r3, r1
     f3c:	d00f      	beq.n	f5e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f3e:	7f10      	ldrb	r0, [r2, #28]
     f40:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f42:	7ed1      	ldrb	r1, [r2, #27]
     f44:	0049      	lsls	r1, r1, #1
     f46:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     f48:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     f4a:	2007      	movs	r0, #7
     f4c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     f4e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     f50:	408b      	lsls	r3, r1
     f52:	7dd1      	ldrb	r1, [r2, #23]
     f54:	3008      	adds	r0, #8
     f56:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     f58:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     f5a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     f5c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     f5e:	7c13      	ldrb	r3, [r2, #16]
     f60:	2b3f      	cmp	r3, #63	; 0x3f
     f62:	d97b      	bls.n	105c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     f64:	2100      	movs	r1, #0
     f66:	9100      	str	r1, [sp, #0]
     f68:	2301      	movs	r3, #1
     f6a:	2280      	movs	r2, #128	; 0x80
     f6c:	0092      	lsls	r2, r2, #2
     f6e:	4831      	ldr	r0, [pc, #196]	; (1034 <sd_mmc_check+0x398>)
     f70:	4d2b      	ldr	r5, [pc, #172]	; (1020 <sd_mmc_check+0x384>)
     f72:	47a8      	blx	r5
     f74:	2800      	cmp	r0, #0
     f76:	d100      	bne.n	f7a <sd_mmc_check+0x2de>
     f78:	e6b0      	b.n	cdc <sd_mmc_check+0x40>
     f7a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     f7c:	4e2e      	ldr	r6, [pc, #184]	; (1038 <sd_mmc_check+0x39c>)
     f7e:	a805      	add	r0, sp, #20
     f80:	47b0      	blx	r6
     f82:	2800      	cmp	r0, #0
     f84:	d100      	bne.n	f88 <sd_mmc_check+0x2ec>
     f86:	e6a9      	b.n	cdc <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     f88:	3501      	adds	r5, #1
     f8a:	b2ad      	uxth	r5, r5
     f8c:	2d32      	cmp	r5, #50	; 0x32
     f8e:	d1f6      	bne.n	f7e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     f90:	4b12      	ldr	r3, [pc, #72]	; (fdc <sd_mmc_check+0x340>)
     f92:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f94:	7e8a      	ldrb	r2, [r1, #26]
     f96:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f98:	7e4b      	ldrb	r3, [r1, #25]
     f9a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f9c:	7e09      	ldrb	r1, [r1, #24]
     f9e:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     fa0:	430b      	orrs	r3, r1
     fa2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     fa4:	051b      	lsls	r3, r3, #20
     fa6:	0d1b      	lsrs	r3, r3, #20
     fa8:	4a21      	ldr	r2, [pc, #132]	; (1030 <sd_mmc_check+0x394>)
     faa:	4293      	cmp	r3, r2
     fac:	d154      	bne.n	1058 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     fae:	4e22      	ldr	r6, [pc, #136]	; (1038 <sd_mmc_check+0x39c>)
     fb0:	a806      	add	r0, sp, #24
     fb2:	47b0      	blx	r6
     fb4:	2800      	cmp	r0, #0
     fb6:	d100      	bne.n	fba <sd_mmc_check+0x31e>
     fb8:	e690      	b.n	cdc <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     fba:	3501      	adds	r5, #1
     fbc:	b2ad      	uxth	r5, r5
     fbe:	2d35      	cmp	r5, #53	; 0x35
     fc0:	d9f6      	bls.n	fb0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     fc2:	4b06      	ldr	r3, [pc, #24]	; (fdc <sd_mmc_check+0x340>)
     fc4:	681a      	ldr	r2, [r3, #0]
     fc6:	9b06      	ldr	r3, [sp, #24]
     fc8:	085b      	lsrs	r3, r3, #1
     fca:	6053      	str	r3, [r2, #4]
     fcc:	e044      	b.n	1058 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     fce:	2314      	movs	r3, #20
     fd0:	7413      	strb	r3, [r2, #16]
     fd2:	e797      	b.n	f04 <sd_mmc_check+0x268>
     fd4:	00000a91 	.word	0x00000a91
     fd8:	00000c61 	.word	0x00000c61
     fdc:	20000180 	.word	0x20000180
     fe0:	0000668d 	.word	0x0000668d
     fe4:	00006855 	.word	0x00006855
     fe8:	00005508 	.word	0x00005508
     fec:	00001110 	.word	0x00001110
     ff0:	00000bdd 	.word	0x00000bdd
     ff4:	00000a65 	.word	0x00000a65
     ff8:	0000686d 	.word	0x0000686d
     ffc:	0000053a 	.word	0x0000053a
    1000:	00001bef 	.word	0x00001bef
    1004:	00001101 	.word	0x00001101
    1008:	0000113b 	.word	0x0000113b
    100c:	00000c15 	.word	0x00000c15
    1010:	00008ac4 	.word	0x00008ac4
    1014:	00008ae0 	.word	0x00008ae0
    1018:	00001137 	.word	0x00001137
    101c:	00081133 	.word	0x00081133
    1020:	000066c5 	.word	0x000066c5
    1024:	000068f1 	.word	0x000068f1
    1028:	0000697d 	.word	0x0000697d
    102c:	00008a84 	.word	0x00008a84
    1030:	00000fff 	.word	0x00000fff
    1034:	00081108 	.word	0x00081108
    1038:	00006879 	.word	0x00006879
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    103c:	2322      	movs	r3, #34	; 0x22
    103e:	7413      	strb	r3, [r2, #16]
    1040:	e760      	b.n	f04 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    1042:	2330      	movs	r3, #48	; 0x30
    1044:	7413      	strb	r3, [r2, #16]
    1046:	e75d      	b.n	f04 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    1048:	a806      	add	r0, sp, #24
    104a:	4b36      	ldr	r3, [pc, #216]	; (1124 <sd_mmc_check+0x488>)
    104c:	4798      	blx	r3
    104e:	2800      	cmp	r0, #0
    1050:	d100      	bne.n	1054 <sd_mmc_check+0x3b8>
    1052:	e643      	b.n	cdc <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1054:	3501      	adds	r5, #1
    1056:	b2ad      	uxth	r5, r5
    1058:	2d7f      	cmp	r5, #127	; 0x7f
    105a:	d9f5      	bls.n	1048 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    105c:	2180      	movs	r1, #128	; 0x80
    105e:	0089      	lsls	r1, r1, #2
    1060:	4831      	ldr	r0, [pc, #196]	; (1128 <sd_mmc_check+0x48c>)
    1062:	4b32      	ldr	r3, [pc, #200]	; (112c <sd_mmc_check+0x490>)
    1064:	4798      	blx	r3
    1066:	2800      	cmp	r0, #0
    1068:	d100      	bne.n	106c <sd_mmc_check+0x3d0>
    106a:	e637      	b.n	cdc <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    106c:	4b30      	ldr	r3, [pc, #192]	; (1130 <sd_mmc_check+0x494>)
    106e:	4798      	blx	r3
    1070:	2800      	cmp	r0, #0
    1072:	d100      	bne.n	1076 <sd_mmc_check+0x3da>
    1074:	e632      	b.n	cdc <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    1076:	4b2f      	ldr	r3, [pc, #188]	; (1134 <sd_mmc_check+0x498>)
    1078:	4798      	blx	r3
    107a:	e65e      	b.n	d3a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    107c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    107e:	7e93      	ldrb	r3, [r2, #26]
    1080:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1082:	7e51      	ldrb	r1, [r2, #25]
    1084:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1086:	430b      	orrs	r3, r1
    1088:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    108a:	029b      	lsls	r3, r3, #10
				* 512;
    108c:	085b      	lsrs	r3, r3, #1
    108e:	2180      	movs	r1, #128	; 0x80
    1090:	0089      	lsls	r1, r1, #2
    1092:	468c      	mov	ip, r1
    1094:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    1096:	6053      	str	r3, [r2, #4]
    1098:	e6cd      	b.n	e36 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    109a:	4b27      	ldr	r3, [pc, #156]	; (1138 <sd_mmc_check+0x49c>)
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	2210      	movs	r2, #16
    10a0:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    10a2:	4b25      	ldr	r3, [pc, #148]	; (1138 <sd_mmc_check+0x49c>)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	7bdb      	ldrb	r3, [r3, #15]
    10a8:	2209      	movs	r2, #9
    10aa:	4013      	ands	r3, r2
    10ac:	2b01      	cmp	r3, #1
    10ae:	d000      	beq.n	10b2 <sd_mmc_check+0x416>
    10b0:	e638      	b.n	d24 <sd_mmc_check+0x88>
    10b2:	e630      	b.n	d16 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    10b4:	4b20      	ldr	r3, [pc, #128]	; (1138 <sd_mmc_check+0x49c>)
    10b6:	681b      	ldr	r3, [r3, #0]
    10b8:	221a      	movs	r2, #26
    10ba:	741a      	strb	r2, [r3, #16]
    10bc:	e7f1      	b.n	10a2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    10be:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    10c0:	789b      	ldrb	r3, [r3, #2]
    10c2:	09db      	lsrs	r3, r3, #7
    10c4:	2b01      	cmp	r3, #1
    10c6:	d104      	bne.n	10d2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    10c8:	4b1b      	ldr	r3, [pc, #108]	; (1138 <sd_mmc_check+0x49c>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	2230      	movs	r2, #48	; 0x30
    10ce:	741a      	strb	r2, [r3, #16]
    10d0:	e7e7      	b.n	10a2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    10d2:	4b19      	ldr	r3, [pc, #100]	; (1138 <sd_mmc_check+0x49c>)
    10d4:	681b      	ldr	r3, [r3, #0]
    10d6:	2220      	movs	r2, #32
    10d8:	741a      	strb	r2, [r3, #16]
    10da:	e7e2      	b.n	10a2 <sd_mmc_check+0x406>
	*v2 = 0;
    10dc:	2600      	movs	r6, #0
    10de:	e60d      	b.n	cfc <sd_mmc_check+0x60>
    10e0:	1e73      	subs	r3, r6, #1
    10e2:	419e      	sbcs	r6, r3
    10e4:	07b3      	lsls	r3, r6, #30
    10e6:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    10e8:	4d14      	ldr	r5, [pc, #80]	; (113c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    10ea:	4f10      	ldr	r7, [pc, #64]	; (112c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    10ec:	46b8      	mov	r8, r7
		resp = driver_get_response();
    10ee:	4e14      	ldr	r6, [pc, #80]	; (1140 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    10f0:	2100      	movs	r1, #0
    10f2:	4814      	ldr	r0, [pc, #80]	; (1144 <sd_mmc_check+0x4a8>)
    10f4:	47b8      	blx	r7
    10f6:	2800      	cmp	r0, #0
    10f8:	d100      	bne.n	10fc <sd_mmc_check+0x460>
    10fa:	e638      	b.n	d6e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    10fc:	9903      	ldr	r1, [sp, #12]
    10fe:	4812      	ldr	r0, [pc, #72]	; (1148 <sd_mmc_check+0x4ac>)
    1100:	47c0      	blx	r8
    1102:	2800      	cmp	r0, #0
    1104:	d100      	bne.n	1108 <sd_mmc_check+0x46c>
    1106:	e632      	b.n	d6e <sd_mmc_check+0xd2>
		resp = driver_get_response();
    1108:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    110a:	07c3      	lsls	r3, r0, #31
    110c:	d400      	bmi.n	1110 <sd_mmc_check+0x474>
    110e:	e628      	b.n	d62 <sd_mmc_check+0xc6>
    1110:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    1112:	2d00      	cmp	r5, #0
    1114:	d1ec      	bne.n	10f0 <sd_mmc_check+0x454>
    1116:	e62a      	b.n	d6e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1118:	2209      	movs	r2, #9
    111a:	4013      	ands	r3, r2
    111c:	2b01      	cmp	r3, #1
    111e:	d000      	beq.n	1122 <sd_mmc_check+0x486>
    1120:	e609      	b.n	d36 <sd_mmc_check+0x9a>
    1122:	e5f8      	b.n	d16 <sd_mmc_check+0x7a>
    1124:	00006879 	.word	0x00006879
    1128:	00001110 	.word	0x00001110
    112c:	00006855 	.word	0x00006855
    1130:	00000bdd 	.word	0x00000bdd
    1134:	00000a65 	.word	0x00000a65
    1138:	20000180 	.word	0x20000180
    113c:	00001bef 	.word	0x00001bef
    1140:	0000686d 	.word	0x0000686d
    1144:	00001137 	.word	0x00001137
    1148:	00001129 	.word	0x00001129

0000114c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    114c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    114e:	4b06      	ldr	r3, [pc, #24]	; (1168 <sd_mmc_get_type+0x1c>)
    1150:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    1152:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1154:	2800      	cmp	r0, #0
    1156:	d001      	beq.n	115c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    1158:	0018      	movs	r0, r3
    115a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <sd_mmc_get_type+0x20>)
    115e:	4798      	blx	r3
	return sd_mmc_card->type;
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <sd_mmc_get_type+0x24>)
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	7bdb      	ldrb	r3, [r3, #15]
    1166:	e7f7      	b.n	1158 <sd_mmc_get_type+0xc>
    1168:	00000a91 	.word	0x00000a91
    116c:	00000c61 	.word	0x00000c61
    1170:	20000180 	.word	0x20000180

00001174 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1174:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1176:	4b06      	ldr	r3, [pc, #24]	; (1190 <sd_mmc_get_capacity+0x1c>)
    1178:	4798      	blx	r3
		return 0;
    117a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    117c:	2800      	cmp	r0, #0
    117e:	d001      	beq.n	1184 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    1180:	0018      	movs	r0, r3
    1182:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1184:	4b03      	ldr	r3, [pc, #12]	; (1194 <sd_mmc_get_capacity+0x20>)
    1186:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1188:	4b03      	ldr	r3, [pc, #12]	; (1198 <sd_mmc_get_capacity+0x24>)
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	685b      	ldr	r3, [r3, #4]
    118e:	e7f7      	b.n	1180 <sd_mmc_get_capacity+0xc>
    1190:	00000a91 	.word	0x00000a91
    1194:	00000c61 	.word	0x00000c61
    1198:	20000180 	.word	0x20000180

0000119c <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    119c:	2000      	movs	r0, #0
    119e:	4770      	bx	lr

000011a0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	b082      	sub	sp, #8
    11a4:	000e      	movs	r6, r1
    11a6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    11a8:	4b16      	ldr	r3, [pc, #88]	; (1204 <sd_mmc_init_read_blocks+0x64>)
    11aa:	4798      	blx	r3
    11ac:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    11ae:	d002      	beq.n	11b6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    11b0:	0020      	movs	r0, r4
    11b2:	b002      	add	sp, #8
    11b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    11b6:	4b14      	ldr	r3, [pc, #80]	; (1208 <sd_mmc_init_read_blocks+0x68>)
    11b8:	4798      	blx	r3
    11ba:	2800      	cmp	r0, #0
    11bc:	d017      	beq.n	11ee <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    11be:	2d01      	cmp	r5, #1
    11c0:	d919      	bls.n	11f6 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    11c2:	4812      	ldr	r0, [pc, #72]	; (120c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    11c4:	4b12      	ldr	r3, [pc, #72]	; (1210 <sd_mmc_init_read_blocks+0x70>)
    11c6:	681b      	ldr	r3, [r3, #0]
    11c8:	7bdb      	ldrb	r3, [r3, #15]
    11ca:	071b      	lsls	r3, r3, #28
    11cc:	d400      	bmi.n	11d0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    11ce:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    11d0:	2301      	movs	r3, #1
    11d2:	9300      	str	r3, [sp, #0]
    11d4:	002b      	movs	r3, r5
    11d6:	2280      	movs	r2, #128	; 0x80
    11d8:	0092      	lsls	r2, r2, #2
    11da:	0031      	movs	r1, r6
    11dc:	4e0d      	ldr	r6, [pc, #52]	; (1214 <sd_mmc_init_read_blocks+0x74>)
    11de:	47b0      	blx	r6
    11e0:	2800      	cmp	r0, #0
    11e2:	d00a      	beq.n	11fa <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    11e4:	4b0c      	ldr	r3, [pc, #48]	; (1218 <sd_mmc_init_read_blocks+0x78>)
    11e6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    11e8:	4b0c      	ldr	r3, [pc, #48]	; (121c <sd_mmc_init_read_blocks+0x7c>)
    11ea:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    11ec:	e7e0      	b.n	11b0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    11ee:	4b0c      	ldr	r3, [pc, #48]	; (1220 <sd_mmc_init_read_blocks+0x80>)
    11f0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11f2:	3405      	adds	r4, #5
    11f4:	e7dc      	b.n	11b0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    11f6:	480b      	ldr	r0, [pc, #44]	; (1224 <sd_mmc_init_read_blocks+0x84>)
    11f8:	e7e4      	b.n	11c4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    11fa:	4b09      	ldr	r3, [pc, #36]	; (1220 <sd_mmc_init_read_blocks+0x80>)
    11fc:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11fe:	2405      	movs	r4, #5
    1200:	e7d6      	b.n	11b0 <sd_mmc_init_read_blocks+0x10>
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	00000a91 	.word	0x00000a91
    1208:	00000bdd 	.word	0x00000bdd
    120c:	00101112 	.word	0x00101112
    1210:	20000180 	.word	0x20000180
    1214:	000066c5 	.word	0x000066c5
    1218:	20000184 	.word	0x20000184
    121c:	20000186 	.word	0x20000186
    1220:	00000c61 	.word	0x00000c61
    1224:	00081111 	.word	0x00081111

00001228 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1228:	b510      	push	{r4, lr}
    122a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    122c:	4b07      	ldr	r3, [pc, #28]	; (124c <sd_mmc_start_read_blocks+0x24>)
    122e:	4798      	blx	r3
    1230:	2800      	cmp	r0, #0
    1232:	d104      	bne.n	123e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1234:	2200      	movs	r2, #0
    1236:	4b06      	ldr	r3, [pc, #24]	; (1250 <sd_mmc_start_read_blocks+0x28>)
    1238:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    123a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    123c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    123e:	4a04      	ldr	r2, [pc, #16]	; (1250 <sd_mmc_start_read_blocks+0x28>)
    1240:	8813      	ldrh	r3, [r2, #0]
    1242:	1b1c      	subs	r4, r3, r4
    1244:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1246:	2000      	movs	r0, #0
    1248:	e7f8      	b.n	123c <sd_mmc_start_read_blocks+0x14>
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	000068f1 	.word	0x000068f1
    1250:	20000184 	.word	0x20000184

00001254 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1254:	b510      	push	{r4, lr}
    1256:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    1258:	4b14      	ldr	r3, [pc, #80]	; (12ac <sd_mmc_wait_end_of_read_blocks+0x58>)
    125a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    125c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    125e:	2800      	cmp	r0, #0
    1260:	d101      	bne.n	1266 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1262:	0018      	movs	r0, r3
    1264:	bd10      	pop	{r4, pc}
	if (abort) {
    1266:	2c00      	cmp	r4, #0
    1268:	d010      	beq.n	128c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    126a:	2200      	movs	r2, #0
    126c:	4b10      	ldr	r3, [pc, #64]	; (12b0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    126e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1270:	4b10      	ldr	r3, [pc, #64]	; (12b4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    1272:	881b      	ldrh	r3, [r3, #0]
    1274:	2b01      	cmp	r3, #1
    1276:	d00f      	beq.n	1298 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1278:	2100      	movs	r1, #0
    127a:	480f      	ldr	r0, [pc, #60]	; (12b8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    127c:	4b0f      	ldr	r3, [pc, #60]	; (12bc <sd_mmc_wait_end_of_read_blocks+0x68>)
    127e:	4798      	blx	r3
    1280:	2800      	cmp	r0, #0
    1282:	d00d      	beq.n	12a0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    1284:	4b0e      	ldr	r3, [pc, #56]	; (12c0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1286:	4798      	blx	r3
	return SD_MMC_OK;
    1288:	2300      	movs	r3, #0
    128a:	e7ea      	b.n	1262 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    128c:	4b08      	ldr	r3, [pc, #32]	; (12b0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    128e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1290:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1292:	2a00      	cmp	r2, #0
    1294:	d0ec      	beq.n	1270 <sd_mmc_wait_end_of_read_blocks+0x1c>
    1296:	e7e4      	b.n	1262 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    1298:	4b09      	ldr	r3, [pc, #36]	; (12c0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    129a:	4798      	blx	r3
		return SD_MMC_OK;
    129c:	2300      	movs	r3, #0
    129e:	e7e0      	b.n	1262 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    12a0:	2100      	movs	r1, #0
    12a2:	4805      	ldr	r0, [pc, #20]	; (12b8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    12a4:	4b05      	ldr	r3, [pc, #20]	; (12bc <sd_mmc_wait_end_of_read_blocks+0x68>)
    12a6:	4798      	blx	r3
    12a8:	e7ec      	b.n	1284 <sd_mmc_wait_end_of_read_blocks+0x30>
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	0000697d 	.word	0x0000697d
    12b0:	20000184 	.word	0x20000184
    12b4:	20000186 	.word	0x20000186
    12b8:	0000310c 	.word	0x0000310c
    12bc:	00006855 	.word	0x00006855
    12c0:	00000c61 	.word	0x00000c61

000012c4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    12c4:	b570      	push	{r4, r5, r6, lr}
    12c6:	b082      	sub	sp, #8
    12c8:	000e      	movs	r6, r1
    12ca:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    12cc:	4b11      	ldr	r3, [pc, #68]	; (1314 <sd_mmc_init_write_blocks+0x50>)
    12ce:	4798      	blx	r3
    12d0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    12d2:	d116      	bne.n	1302 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    12d4:	2d01      	cmp	r5, #1
    12d6:	d917      	bls.n	1308 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    12d8:	480f      	ldr	r0, [pc, #60]	; (1318 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    12da:	4b10      	ldr	r3, [pc, #64]	; (131c <sd_mmc_init_write_blocks+0x58>)
    12dc:	681b      	ldr	r3, [r3, #0]
    12de:	7bdb      	ldrb	r3, [r3, #15]
    12e0:	071b      	lsls	r3, r3, #28
    12e2:	d400      	bmi.n	12e6 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    12e4:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    12e6:	2301      	movs	r3, #1
    12e8:	9300      	str	r3, [sp, #0]
    12ea:	002b      	movs	r3, r5
    12ec:	2280      	movs	r2, #128	; 0x80
    12ee:	0092      	lsls	r2, r2, #2
    12f0:	0031      	movs	r1, r6
    12f2:	4e0b      	ldr	r6, [pc, #44]	; (1320 <sd_mmc_init_write_blocks+0x5c>)
    12f4:	47b0      	blx	r6
    12f6:	2800      	cmp	r0, #0
    12f8:	d008      	beq.n	130c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    12fa:	4b0a      	ldr	r3, [pc, #40]	; (1324 <sd_mmc_init_write_blocks+0x60>)
    12fc:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    12fe:	4b0a      	ldr	r3, [pc, #40]	; (1328 <sd_mmc_init_write_blocks+0x64>)
    1300:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1302:	0020      	movs	r0, r4
    1304:	b002      	add	sp, #8
    1306:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1308:	4808      	ldr	r0, [pc, #32]	; (132c <sd_mmc_init_write_blocks+0x68>)
    130a:	e7e6      	b.n	12da <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    130c:	4b08      	ldr	r3, [pc, #32]	; (1330 <sd_mmc_init_write_blocks+0x6c>)
    130e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1310:	2405      	movs	r4, #5
    1312:	e7f6      	b.n	1302 <sd_mmc_init_write_blocks+0x3e>
    1314:	00000a91 	.word	0x00000a91
    1318:	00109119 	.word	0x00109119
    131c:	20000180 	.word	0x20000180
    1320:	000066c5 	.word	0x000066c5
    1324:	20000184 	.word	0x20000184
    1328:	20000186 	.word	0x20000186
    132c:	00089118 	.word	0x00089118
    1330:	00000c61 	.word	0x00000c61

00001334 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1334:	b510      	push	{r4, lr}
    1336:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1338:	4b07      	ldr	r3, [pc, #28]	; (1358 <sd_mmc_start_write_blocks+0x24>)
    133a:	4798      	blx	r3
    133c:	2800      	cmp	r0, #0
    133e:	d104      	bne.n	134a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1340:	2200      	movs	r2, #0
    1342:	4b06      	ldr	r3, [pc, #24]	; (135c <sd_mmc_start_write_blocks+0x28>)
    1344:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1346:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1348:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    134a:	4a04      	ldr	r2, [pc, #16]	; (135c <sd_mmc_start_write_blocks+0x28>)
    134c:	8813      	ldrh	r3, [r2, #0]
    134e:	1b1c      	subs	r4, r3, r4
    1350:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1352:	2000      	movs	r0, #0
    1354:	e7f8      	b.n	1348 <sd_mmc_start_write_blocks+0x14>
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	00006981 	.word	0x00006981
    135c:	20000184 	.word	0x20000184

00001360 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1360:	b510      	push	{r4, lr}
    1362:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1364:	4b0e      	ldr	r3, [pc, #56]	; (13a0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    1366:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1368:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    136a:	2800      	cmp	r0, #0
    136c:	d101      	bne.n	1372 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    136e:	0018      	movs	r0, r3
    1370:	bd10      	pop	{r4, pc}
	if (abort) {
    1372:	2c00      	cmp	r4, #0
    1374:	d00a      	beq.n	138c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1376:	2200      	movs	r2, #0
    1378:	4b0a      	ldr	r3, [pc, #40]	; (13a4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    137a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    137c:	4b0a      	ldr	r3, [pc, #40]	; (13a8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    137e:	881b      	ldrh	r3, [r3, #0]
    1380:	2b01      	cmp	r3, #1
    1382:	d009      	beq.n	1398 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1384:	4b09      	ldr	r3, [pc, #36]	; (13ac <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1386:	4798      	blx	r3
	return SD_MMC_OK;
    1388:	2300      	movs	r3, #0
    138a:	e7f0      	b.n	136e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    138e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1390:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1392:	2a00      	cmp	r2, #0
    1394:	d0f2      	beq.n	137c <sd_mmc_wait_end_of_write_blocks+0x1c>
    1396:	e7ea      	b.n	136e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1398:	4b04      	ldr	r3, [pc, #16]	; (13ac <sd_mmc_wait_end_of_write_blocks+0x4c>)
    139a:	4798      	blx	r3
		return SD_MMC_OK;
    139c:	2300      	movs	r3, #0
    139e:	e7e6      	b.n	136e <sd_mmc_wait_end_of_write_blocks+0xe>
    13a0:	00006a01 	.word	0x00006a01
    13a4:	20000184 	.word	0x20000184
    13a8:	20000186 	.word	0x20000186
    13ac:	00000c61 	.word	0x00000c61

000013b0 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    13b0:	2000      	movs	r0, #0
    13b2:	4770      	bx	lr

000013b4 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    13b4:	1e43      	subs	r3, r0, #1
    13b6:	4198      	sbcs	r0, r3
    13b8:	b2c0      	uxtb	r0, r0
    13ba:	4b03      	ldr	r3, [pc, #12]	; (13c8 <udi_msc_trans_ack+0x14>)
    13bc:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
    13be:	2201      	movs	r2, #1
    13c0:	4b02      	ldr	r3, [pc, #8]	; (13cc <udi_msc_trans_ack+0x18>)
    13c2:	701a      	strb	r2, [r3, #0]
}
    13c4:	4770      	bx	lr
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	200003c8 	.word	0x200003c8
    13cc:	20000044 	.word	0x20000044

000013d0 <udi_msc_cbw_wait>:
{
    13d0:	b510      	push	{r4, lr}
    13d2:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    13d4:	4b08      	ldr	r3, [pc, #32]	; (13f8 <udi_msc_cbw_wait+0x28>)
    13d6:	9300      	str	r3, [sp, #0]
    13d8:	231f      	movs	r3, #31
    13da:	4a08      	ldr	r2, [pc, #32]	; (13fc <udi_msc_cbw_wait+0x2c>)
    13dc:	2101      	movs	r1, #1
    13de:	2002      	movs	r0, #2
    13e0:	4c07      	ldr	r4, [pc, #28]	; (1400 <udi_msc_cbw_wait+0x30>)
    13e2:	47a0      	blx	r4
    13e4:	2800      	cmp	r0, #0
    13e6:	d001      	beq.n	13ec <udi_msc_cbw_wait+0x1c>
}
    13e8:	b002      	add	sp, #8
    13ea:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    13ec:	4905      	ldr	r1, [pc, #20]	; (1404 <udi_msc_cbw_wait+0x34>)
    13ee:	3002      	adds	r0, #2
    13f0:	4b05      	ldr	r3, [pc, #20]	; (1408 <udi_msc_cbw_wait+0x38>)
    13f2:	4798      	blx	r3
}
    13f4:	e7f8      	b.n	13e8 <udi_msc_cbw_wait+0x18>
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	000017f5 	.word	0x000017f5
    13fc:	200001b0 	.word	0x200001b0
    1400:	00003b71 	.word	0x00003b71
    1404:	000013d1 	.word	0x000013d1
    1408:	00003b19 	.word	0x00003b19

0000140c <udi_msc_enable>:
{
    140c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    140e:	2300      	movs	r3, #0
    1410:	4a13      	ldr	r2, [pc, #76]	; (1460 <udi_msc_enable+0x54>)
    1412:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    1414:	4a13      	ldr	r2, [pc, #76]	; (1464 <udi_msc_enable+0x58>)
    1416:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    1418:	3301      	adds	r3, #1
    141a:	4a13      	ldr	r2, [pc, #76]	; (1468 <udi_msc_enable+0x5c>)
    141c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    141e:	4a13      	ldr	r2, [pc, #76]	; (146c <udi_msc_enable+0x60>)
    1420:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    1422:	4b13      	ldr	r3, [pc, #76]	; (1470 <udi_msc_enable+0x64>)
    1424:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    1426:	2800      	cmp	r0, #0
    1428:	d105      	bne.n	1436 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    142a:	2200      	movs	r2, #0
    142c:	4b11      	ldr	r3, [pc, #68]	; (1474 <udi_msc_enable+0x68>)
    142e:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    1430:	2500      	movs	r5, #0
}
    1432:	0028      	movs	r0, r5
    1434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    1436:	3801      	subs	r0, #1
    1438:	4b0e      	ldr	r3, [pc, #56]	; (1474 <udi_msc_enable+0x68>)
    143a:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    143c:	4b0e      	ldr	r3, [pc, #56]	; (1478 <udi_msc_enable+0x6c>)
    143e:	4798      	blx	r3
    1440:	1e05      	subs	r5, r0, #0
    1442:	d0f6      	beq.n	1432 <udi_msc_enable+0x26>
    1444:	2400      	movs	r4, #0
		mem_unload(lun, false);
    1446:	4f0d      	ldr	r7, [pc, #52]	; (147c <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1448:	4e0a      	ldr	r6, [pc, #40]	; (1474 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    144a:	2100      	movs	r1, #0
    144c:	0020      	movs	r0, r4
    144e:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1450:	3401      	adds	r4, #1
    1452:	b2e4      	uxtb	r4, r4
    1454:	7833      	ldrb	r3, [r6, #0]
    1456:	42a3      	cmp	r3, r4
    1458:	d2f7      	bcs.n	144a <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    145a:	4b09      	ldr	r3, [pc, #36]	; (1480 <udi_msc_enable+0x74>)
    145c:	4798      	blx	r3
	return true;
    145e:	e7e8      	b.n	1432 <udi_msc_enable+0x26>
    1460:	200001a6 	.word	0x200001a6
    1464:	200001a4 	.word	0x200001a4
    1468:	20000044 	.word	0x20000044
    146c:	20000045 	.word	0x20000045
    1470:	00006a25 	.word	0x00006a25
    1474:	200001d4 	.word	0x200001d4
    1478:	000041b5 	.word	0x000041b5
    147c:	00006a5d 	.word	0x00006a5d
    1480:	000013d1 	.word	0x000013d1

00001484 <udi_msc_csw_sent>:
{
    1484:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
    1486:	4b01      	ldr	r3, [pc, #4]	; (148c <udi_msc_csw_sent+0x8>)
    1488:	4798      	blx	r3
}
    148a:	bd10      	pop	{r4, pc}
    148c:	000013d1 	.word	0x000013d1

00001490 <udi_msc_csw_send>:
{
    1490:	b510      	push	{r4, lr}
    1492:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    1494:	4b08      	ldr	r3, [pc, #32]	; (14b8 <udi_msc_csw_send+0x28>)
    1496:	9300      	str	r3, [sp, #0]
    1498:	230d      	movs	r3, #13
    149a:	4a08      	ldr	r2, [pc, #32]	; (14bc <udi_msc_csw_send+0x2c>)
    149c:	2100      	movs	r1, #0
    149e:	2081      	movs	r0, #129	; 0x81
    14a0:	4c07      	ldr	r4, [pc, #28]	; (14c0 <udi_msc_csw_send+0x30>)
    14a2:	47a0      	blx	r4
    14a4:	2800      	cmp	r0, #0
    14a6:	d001      	beq.n	14ac <udi_msc_csw_send+0x1c>
}
    14a8:	b002      	add	sp, #8
    14aa:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    14ac:	4905      	ldr	r1, [pc, #20]	; (14c4 <udi_msc_csw_send+0x34>)
    14ae:	3081      	adds	r0, #129	; 0x81
    14b0:	4b05      	ldr	r3, [pc, #20]	; (14c8 <udi_msc_csw_send+0x38>)
    14b2:	4798      	blx	r3
}
    14b4:	e7f8      	b.n	14a8 <udi_msc_csw_send+0x18>
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	00001485 	.word	0x00001485
    14bc:	20000048 	.word	0x20000048
    14c0:	00003b71 	.word	0x00003b71
    14c4:	00001491 	.word	0x00001491
    14c8:	00003b19 	.word	0x00003b19

000014cc <udi_msc_cbw_invalid>:
{
    14cc:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    14ce:	4b06      	ldr	r3, [pc, #24]	; (14e8 <udi_msc_cbw_invalid+0x1c>)
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d100      	bne.n	14d8 <udi_msc_cbw_invalid+0xc>
}
    14d6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    14d8:	2002      	movs	r0, #2
    14da:	4b04      	ldr	r3, [pc, #16]	; (14ec <udi_msc_cbw_invalid+0x20>)
    14dc:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    14de:	4904      	ldr	r1, [pc, #16]	; (14f0 <udi_msc_cbw_invalid+0x24>)
    14e0:	2002      	movs	r0, #2
    14e2:	4b04      	ldr	r3, [pc, #16]	; (14f4 <udi_msc_cbw_invalid+0x28>)
    14e4:	4798      	blx	r3
    14e6:	e7f6      	b.n	14d6 <udi_msc_cbw_invalid+0xa>
    14e8:	200001a4 	.word	0x200001a4
    14ec:	000039a5 	.word	0x000039a5
    14f0:	000014cd 	.word	0x000014cd
    14f4:	00003b19 	.word	0x00003b19

000014f8 <udi_msc_csw_invalid>:
{
    14f8:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    14fa:	4b06      	ldr	r3, [pc, #24]	; (1514 <udi_msc_csw_invalid+0x1c>)
    14fc:	781b      	ldrb	r3, [r3, #0]
    14fe:	2b00      	cmp	r3, #0
    1500:	d100      	bne.n	1504 <udi_msc_csw_invalid+0xc>
}
    1502:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    1504:	2081      	movs	r0, #129	; 0x81
    1506:	4b04      	ldr	r3, [pc, #16]	; (1518 <udi_msc_csw_invalid+0x20>)
    1508:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    150a:	4904      	ldr	r1, [pc, #16]	; (151c <udi_msc_csw_invalid+0x24>)
    150c:	2081      	movs	r0, #129	; 0x81
    150e:	4b04      	ldr	r3, [pc, #16]	; (1520 <udi_msc_csw_invalid+0x28>)
    1510:	4798      	blx	r3
    1512:	e7f6      	b.n	1502 <udi_msc_csw_invalid+0xa>
    1514:	200001a4 	.word	0x200001a4
    1518:	000039a5 	.word	0x000039a5
    151c:	000014f9 	.word	0x000014f9
    1520:	00003b19 	.word	0x00003b19

00001524 <udi_msc_csw_process>:
{
    1524:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    1526:	4b0b      	ldr	r3, [pc, #44]	; (1554 <udi_msc_csw_process+0x30>)
    1528:	689b      	ldr	r3, [r3, #8]
    152a:	2b00      	cmp	r3, #0
    152c:	d006      	beq.n	153c <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    152e:	4b0a      	ldr	r3, [pc, #40]	; (1558 <udi_msc_csw_process+0x34>)
    1530:	7b1b      	ldrb	r3, [r3, #12]
    1532:	2b7f      	cmp	r3, #127	; 0x7f
    1534:	d809      	bhi.n	154a <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    1536:	2002      	movs	r0, #2
    1538:	4b08      	ldr	r3, [pc, #32]	; (155c <udi_msc_csw_process+0x38>)
    153a:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    153c:	4b06      	ldr	r3, [pc, #24]	; (1558 <udi_msc_csw_process+0x34>)
    153e:	685a      	ldr	r2, [r3, #4]
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <udi_msc_csw_process+0x30>)
    1542:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    1544:	4b06      	ldr	r3, [pc, #24]	; (1560 <udi_msc_csw_process+0x3c>)
    1546:	4798      	blx	r3
}
    1548:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    154a:	2081      	movs	r0, #129	; 0x81
    154c:	4b03      	ldr	r3, [pc, #12]	; (155c <udi_msc_csw_process+0x38>)
    154e:	4798      	blx	r3
    1550:	e7f4      	b.n	153c <udi_msc_csw_process+0x18>
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	20000048 	.word	0x20000048
    1558:	200001b0 	.word	0x200001b0
    155c:	000039a5 	.word	0x000039a5
    1560:	00001491 	.word	0x00001491

00001564 <udi_msc_clear_sense>:
{
    1564:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    1566:	4c05      	ldr	r4, [pc, #20]	; (157c <udi_msc_clear_sense+0x18>)
    1568:	2212      	movs	r2, #18
    156a:	2100      	movs	r1, #0
    156c:	0020      	movs	r0, r4
    156e:	4b04      	ldr	r3, [pc, #16]	; (1580 <udi_msc_clear_sense+0x1c>)
    1570:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    1572:	23f0      	movs	r3, #240	; 0xf0
    1574:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    1576:	3be6      	subs	r3, #230	; 0xe6
    1578:	71e3      	strb	r3, [r4, #7]
}
    157a:	bd10      	pop	{r4, pc}
    157c:	200001d8 	.word	0x200001d8
    1580:	00007683 	.word	0x00007683

00001584 <udi_msc_sense_fail>:
{
    1584:	b570      	push	{r4, r5, r6, lr}
    1586:	0006      	movs	r6, r0
    1588:	000d      	movs	r5, r1
    158a:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    158c:	4b08      	ldr	r3, [pc, #32]	; (15b0 <udi_msc_sense_fail+0x2c>)
    158e:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    1590:	2201      	movs	r2, #1
    1592:	4b08      	ldr	r3, [pc, #32]	; (15b4 <udi_msc_sense_fail+0x30>)
    1594:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    1596:	4b08      	ldr	r3, [pc, #32]	; (15b8 <udi_msc_sense_fail+0x34>)
    1598:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    159a:	0e22      	lsrs	r2, r4, #24
    159c:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    159e:	0c22      	lsrs	r2, r4, #16
    15a0:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    15a2:	0a22      	lsrs	r2, r4, #8
    15a4:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    15a6:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    15a8:	0a2a      	lsrs	r2, r5, #8
    15aa:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    15ac:	735d      	strb	r5, [r3, #13]
}
    15ae:	bd70      	pop	{r4, r5, r6, pc}
    15b0:	00001565 	.word	0x00001565
    15b4:	20000048 	.word	0x20000048
    15b8:	200001d8 	.word	0x200001d8

000015bc <udi_msc_sense_fail_cdb_invalid>:
{
    15bc:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    15be:	2200      	movs	r2, #0
    15c0:	2190      	movs	r1, #144	; 0x90
    15c2:	0189      	lsls	r1, r1, #6
    15c4:	2005      	movs	r0, #5
    15c6:	4b01      	ldr	r3, [pc, #4]	; (15cc <udi_msc_sense_fail_cdb_invalid+0x10>)
    15c8:	4798      	blx	r3
}
    15ca:	bd10      	pop	{r4, pc}
    15cc:	00001585 	.word	0x00001585

000015d0 <udi_msc_cbw_validate>:
{
    15d0:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    15d2:	4b09      	ldr	r3, [pc, #36]	; (15f8 <udi_msc_cbw_validate+0x28>)
    15d4:	7b1b      	ldrb	r3, [r3, #12]
    15d6:	4059      	eors	r1, r3
    15d8:	b249      	sxtb	r1, r1
    15da:	2900      	cmp	r1, #0
    15dc:	db04      	blt.n	15e8 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    15de:	4b07      	ldr	r3, [pc, #28]	; (15fc <udi_msc_cbw_validate+0x2c>)
    15e0:	689a      	ldr	r2, [r3, #8]
	return true;
    15e2:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    15e4:	4282      	cmp	r2, r0
    15e6:	d204      	bcs.n	15f2 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    15e8:	4b05      	ldr	r3, [pc, #20]	; (1600 <udi_msc_cbw_validate+0x30>)
    15ea:	4798      	blx	r3
		udi_msc_csw_process();
    15ec:	4b05      	ldr	r3, [pc, #20]	; (1604 <udi_msc_cbw_validate+0x34>)
    15ee:	4798      	blx	r3
		return false;
    15f0:	2300      	movs	r3, #0
}
    15f2:	0018      	movs	r0, r3
    15f4:	bd10      	pop	{r4, pc}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	200001b0 	.word	0x200001b0
    15fc:	20000048 	.word	0x20000048
    1600:	000015bd 	.word	0x000015bd
    1604:	00001525 	.word	0x00001525

00001608 <udi_msc_sense_fail_hardware>:
{
    1608:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    160a:	2200      	movs	r2, #0
    160c:	2100      	movs	r1, #0
    160e:	2004      	movs	r0, #4
    1610:	4b01      	ldr	r3, [pc, #4]	; (1618 <udi_msc_sense_fail_hardware+0x10>)
    1612:	4798      	blx	r3
}
    1614:	bd10      	pop	{r4, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	00001585 	.word	0x00001585

0000161c <udi_msc_data_send>:
{
    161c:	b510      	push	{r4, lr}
    161e:	b082      	sub	sp, #8
    1620:	0002      	movs	r2, r0
    1622:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1624:	4907      	ldr	r1, [pc, #28]	; (1644 <udi_msc_data_send+0x28>)
    1626:	9100      	str	r1, [sp, #0]
    1628:	2101      	movs	r1, #1
    162a:	2081      	movs	r0, #129	; 0x81
    162c:	4c06      	ldr	r4, [pc, #24]	; (1648 <udi_msc_data_send+0x2c>)
    162e:	47a0      	blx	r4
    1630:	2800      	cmp	r0, #0
    1632:	d001      	beq.n	1638 <udi_msc_data_send+0x1c>
}
    1634:	b002      	add	sp, #8
    1636:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1638:	4b04      	ldr	r3, [pc, #16]	; (164c <udi_msc_data_send+0x30>)
    163a:	4798      	blx	r3
		udi_msc_csw_process();
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <udi_msc_data_send+0x34>)
    163e:	4798      	blx	r3
}
    1640:	e7f8      	b.n	1634 <udi_msc_data_send+0x18>
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	00001695 	.word	0x00001695
    1648:	00003b71 	.word	0x00003b71
    164c:	00001609 	.word	0x00001609
    1650:	00001525 	.word	0x00001525

00001654 <udi_msc_sense_fail_busy_or_change>:
{
    1654:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    1656:	2200      	movs	r2, #0
    1658:	21a0      	movs	r1, #160	; 0xa0
    165a:	0189      	lsls	r1, r1, #6
    165c:	2006      	movs	r0, #6
    165e:	4b01      	ldr	r3, [pc, #4]	; (1664 <udi_msc_sense_fail_busy_or_change+0x10>)
    1660:	4798      	blx	r3
}
    1662:	bd10      	pop	{r4, pc}
    1664:	00001585 	.word	0x00001585

00001668 <udi_msc_sense_fail_not_present>:
{
    1668:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    166a:	2200      	movs	r2, #0
    166c:	21e8      	movs	r1, #232	; 0xe8
    166e:	0189      	lsls	r1, r1, #6
    1670:	2002      	movs	r0, #2
    1672:	4b01      	ldr	r3, [pc, #4]	; (1678 <udi_msc_sense_fail_not_present+0x10>)
    1674:	4798      	blx	r3
}
    1676:	bd10      	pop	{r4, pc}
    1678:	00001585 	.word	0x00001585

0000167c <udi_msc_sense_pass>:
{
    167c:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    167e:	4b03      	ldr	r3, [pc, #12]	; (168c <udi_msc_sense_pass+0x10>)
    1680:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1682:	2200      	movs	r2, #0
    1684:	4b02      	ldr	r3, [pc, #8]	; (1690 <udi_msc_sense_pass+0x14>)
    1686:	731a      	strb	r2, [r3, #12]
}
    1688:	bd10      	pop	{r4, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	00001565 	.word	0x00001565
    1690:	20000048 	.word	0x20000048

00001694 <udi_msc_data_sent>:
{
    1694:	b510      	push	{r4, lr}
    1696:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    1698:	2800      	cmp	r0, #0
    169a:	d000      	beq.n	169e <udi_msc_data_sent+0xa>
}
    169c:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    169e:	4b04      	ldr	r3, [pc, #16]	; (16b0 <udi_msc_data_sent+0x1c>)
    16a0:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <udi_msc_data_sent+0x20>)
    16a4:	689a      	ldr	r2, [r3, #8]
    16a6:	1b14      	subs	r4, r2, r4
    16a8:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    16aa:	4b03      	ldr	r3, [pc, #12]	; (16b8 <udi_msc_data_sent+0x24>)
    16ac:	4798      	blx	r3
    16ae:	e7f5      	b.n	169c <udi_msc_data_sent+0x8>
    16b0:	0000167d 	.word	0x0000167d
    16b4:	20000048 	.word	0x20000048
    16b8:	00001525 	.word	0x00001525

000016bc <udi_msc_spc_mode_sense>:
{
    16bc:	b570      	push	{r4, r5, r6, lr}
    16be:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    16c0:	2214      	movs	r2, #20
    16c2:	2100      	movs	r1, #0
    16c4:	4823      	ldr	r0, [pc, #140]	; (1754 <udi_msc_spc_mode_sense+0x98>)
    16c6:	4b24      	ldr	r3, [pc, #144]	; (1758 <udi_msc_spc_mode_sense+0x9c>)
    16c8:	4798      	blx	r3
	if (b_sense10) {
    16ca:	2d00      	cmp	r5, #0
    16cc:	d018      	beq.n	1700 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    16ce:	4b23      	ldr	r3, [pc, #140]	; (175c <udi_msc_spc_mode_sense+0xa0>)
    16d0:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    16d2:	4a20      	ldr	r2, [pc, #128]	; (1754 <udi_msc_spc_mode_sense+0x98>)
    16d4:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    16d6:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    16d8:	4b20      	ldr	r3, [pc, #128]	; (175c <udi_msc_spc_mode_sense+0xa0>)
    16da:	7c58      	ldrb	r0, [r3, #17]
    16dc:	233f      	movs	r3, #63	; 0x3f
    16de:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    16e0:	2b1c      	cmp	r3, #28
    16e2:	d013      	beq.n	170c <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    16e4:	2b3f      	cmp	r3, #63	; 0x3f
    16e6:	d011      	beq.n	170c <udi_msc_spc_mode_sense+0x50>
    16e8:	1c20      	adds	r0, r4, #0
    16ea:	428c      	cmp	r4, r1
    16ec:	d900      	bls.n	16f0 <udi_msc_spc_mode_sense+0x34>
    16ee:	1c08      	adds	r0, r1, #0
    16f0:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    16f2:	2180      	movs	r1, #128	; 0x80
    16f4:	0030      	movs	r0, r6
    16f6:	4b1a      	ldr	r3, [pc, #104]	; (1760 <udi_msc_spc_mode_sense+0xa4>)
    16f8:	4798      	blx	r3
    16fa:	2800      	cmp	r0, #0
    16fc:	d10f      	bne.n	171e <udi_msc_spc_mode_sense+0x62>
}
    16fe:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    1700:	4b16      	ldr	r3, [pc, #88]	; (175c <udi_msc_spc_mode_sense+0xa0>)
    1702:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    1704:	4a13      	ldr	r2, [pc, #76]	; (1754 <udi_msc_spc_mode_sense+0x98>)
    1706:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1708:	2404      	movs	r4, #4
    170a:	e7e5      	b.n	16d8 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    170c:	231c      	movs	r3, #28
    170e:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    1710:	3b12      	subs	r3, #18
    1712:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    1714:	3b05      	subs	r3, #5
    1716:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1718:	340c      	adds	r4, #12
    171a:	b2e4      	uxtb	r4, r4
    171c:	e7e4      	b.n	16e8 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    171e:	4b0f      	ldr	r3, [pc, #60]	; (175c <udi_msc_spc_mode_sense+0xa0>)
    1720:	7b58      	ldrb	r0, [r3, #13]
    1722:	4b10      	ldr	r3, [pc, #64]	; (1764 <udi_msc_spc_mode_sense+0xa8>)
    1724:	4798      	blx	r3
    1726:	1e43      	subs	r3, r0, #1
    1728:	4198      	sbcs	r0, r3
    172a:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    172c:	2d00      	cmp	r5, #0
    172e:	d00c      	beq.n	174a <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1730:	3c02      	subs	r4, #2
    1732:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1734:	4a07      	ldr	r2, [pc, #28]	; (1754 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1736:	0a23      	lsrs	r3, r4, #8
    1738:	0224      	lsls	r4, r4, #8
    173a:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    173c:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    173e:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1740:	0031      	movs	r1, r6
    1742:	4804      	ldr	r0, [pc, #16]	; (1754 <udi_msc_spc_mode_sense+0x98>)
    1744:	4b08      	ldr	r3, [pc, #32]	; (1768 <udi_msc_spc_mode_sense+0xac>)
    1746:	4798      	blx	r3
    1748:	e7d9      	b.n	16fe <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    174a:	4b02      	ldr	r3, [pc, #8]	; (1754 <udi_msc_spc_mode_sense+0x98>)
    174c:	3c01      	subs	r4, #1
    174e:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1750:	7098      	strb	r0, [r3, #2]
    1752:	e7f5      	b.n	1740 <udi_msc_spc_mode_sense+0x84>
    1754:	2000018c 	.word	0x2000018c
    1758:	00007683 	.word	0x00007683
    175c:	200001b0 	.word	0x200001b0
    1760:	000015d1 	.word	0x000015d1
    1764:	00006a6d 	.word	0x00006a6d
    1768:	0000161d 	.word	0x0000161d

0000176c <udi_msc_sbc_trans>:
{
    176c:	b510      	push	{r4, lr}
    176e:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    1770:	d01e      	beq.n	17b0 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1772:	4a17      	ldr	r2, [pc, #92]	; (17d0 <udi_msc_sbc_trans+0x64>)
    1774:	4b17      	ldr	r3, [pc, #92]	; (17d4 <udi_msc_sbc_trans+0x68>)
    1776:	7c59      	ldrb	r1, [r3, #17]
    1778:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    177a:	7c99      	ldrb	r1, [r3, #18]
    177c:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    177e:	7cd9      	ldrb	r1, [r3, #19]
    1780:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1782:	7d19      	ldrb	r1, [r3, #20]
    1784:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1786:	4a14      	ldr	r2, [pc, #80]	; (17d8 <udi_msc_sbc_trans+0x6c>)
    1788:	7d99      	ldrb	r1, [r3, #22]
    178a:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    178c:	7ddb      	ldrb	r3, [r3, #23]
    178e:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1790:	8810      	ldrh	r0, [r2, #0]
    1792:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    1794:	0021      	movs	r1, r4
    1796:	1e4b      	subs	r3, r1, #1
    1798:	4199      	sbcs	r1, r3
    179a:	01c9      	lsls	r1, r1, #7
    179c:	4b0f      	ldr	r3, [pc, #60]	; (17dc <udi_msc_sbc_trans+0x70>)
    179e:	4798      	blx	r3
    17a0:	2800      	cmp	r0, #0
    17a2:	d004      	beq.n	17ae <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    17a4:	4b0e      	ldr	r3, [pc, #56]	; (17e0 <udi_msc_sbc_trans+0x74>)
    17a6:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    17a8:	2201      	movs	r2, #1
    17aa:	4b0e      	ldr	r3, [pc, #56]	; (17e4 <udi_msc_sbc_trans+0x78>)
    17ac:	701a      	strb	r2, [r3, #0]
}
    17ae:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    17b0:	4b08      	ldr	r3, [pc, #32]	; (17d4 <udi_msc_sbc_trans+0x68>)
    17b2:	7b58      	ldrb	r0, [r3, #13]
    17b4:	4b0c      	ldr	r3, [pc, #48]	; (17e8 <udi_msc_sbc_trans+0x7c>)
    17b6:	4798      	blx	r3
    17b8:	2800      	cmp	r0, #0
    17ba:	d0da      	beq.n	1772 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    17bc:	2200      	movs	r2, #0
    17be:	219c      	movs	r1, #156	; 0x9c
    17c0:	0189      	lsls	r1, r1, #6
    17c2:	2007      	movs	r0, #7
    17c4:	4b09      	ldr	r3, [pc, #36]	; (17ec <udi_msc_sbc_trans+0x80>)
    17c6:	4798      	blx	r3
			udi_msc_csw_process();
    17c8:	4b09      	ldr	r3, [pc, #36]	; (17f0 <udi_msc_sbc_trans+0x84>)
    17ca:	4798      	blx	r3
			return;
    17cc:	e7ef      	b.n	17ae <udi_msc_sbc_trans+0x42>
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	200001a0 	.word	0x200001a0
    17d4:	200001b0 	.word	0x200001b0
    17d8:	200001d0 	.word	0x200001d0
    17dc:	000015d1 	.word	0x000015d1
    17e0:	200001a5 	.word	0x200001a5
    17e4:	200001a6 	.word	0x200001a6
    17e8:	00006a6d 	.word	0x00006a6d
    17ec:	00001585 	.word	0x00001585
    17f0:	00001525 	.word	0x00001525

000017f4 <udi_msc_cbw_received>:
{
    17f4:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    17f6:	2800      	cmp	r0, #0
    17f8:	d10d      	bne.n	1816 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    17fa:	291f      	cmp	r1, #31
    17fc:	d104      	bne.n	1808 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    17fe:	4b84      	ldr	r3, [pc, #528]	; (1a10 <udi_msc_cbw_received+0x21c>)
    1800:	4a84      	ldr	r2, [pc, #528]	; (1a14 <udi_msc_cbw_received+0x220>)
    1802:	6812      	ldr	r2, [r2, #0]
    1804:	429a      	cmp	r2, r3
    1806:	d007      	beq.n	1818 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1808:	2201      	movs	r2, #1
    180a:	4b83      	ldr	r3, [pc, #524]	; (1a18 <udi_msc_cbw_received+0x224>)
    180c:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    180e:	4b83      	ldr	r3, [pc, #524]	; (1a1c <udi_msc_cbw_received+0x228>)
    1810:	4798      	blx	r3
		udi_msc_csw_invalid();
    1812:	4b83      	ldr	r3, [pc, #524]	; (1a20 <udi_msc_cbw_received+0x22c>)
    1814:	4798      	blx	r3
}
    1816:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    1818:	4b7e      	ldr	r3, [pc, #504]	; (1a14 <udi_msc_cbw_received+0x220>)
    181a:	7b58      	ldrb	r0, [r3, #13]
    181c:	220f      	movs	r2, #15
    181e:	4010      	ands	r0, r2
    1820:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    1822:	4b80      	ldr	r3, [pc, #512]	; (1a24 <udi_msc_cbw_received+0x230>)
    1824:	781b      	ldrb	r3, [r3, #0]
    1826:	4283      	cmp	r3, r0
    1828:	d30b      	bcc.n	1842 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    182a:	4b7a      	ldr	r3, [pc, #488]	; (1a14 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    182c:	4a7e      	ldr	r2, [pc, #504]	; (1a28 <udi_msc_cbw_received+0x234>)
    182e:	6899      	ldr	r1, [r3, #8]
    1830:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    1832:	7bda      	ldrb	r2, [r3, #15]
    1834:	2a5a      	cmp	r2, #90	; 0x5a
    1836:	d900      	bls.n	183a <udi_msc_cbw_received+0x46>
    1838:	e0d2      	b.n	19e0 <udi_msc_cbw_received+0x1ec>
    183a:	0093      	lsls	r3, r2, #2
    183c:	4a7b      	ldr	r2, [pc, #492]	; (1a2c <udi_msc_cbw_received+0x238>)
    183e:	58d3      	ldr	r3, [r2, r3]
    1840:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    1842:	4b7b      	ldr	r3, [pc, #492]	; (1a30 <udi_msc_cbw_received+0x23c>)
    1844:	4798      	blx	r3
		udi_msc_csw_process();
    1846:	4b7b      	ldr	r3, [pc, #492]	; (1a34 <udi_msc_cbw_received+0x240>)
    1848:	4798      	blx	r3
		return;
    184a:	e7e4      	b.n	1816 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    184c:	4b71      	ldr	r3, [pc, #452]	; (1a14 <udi_msc_cbw_received+0x220>)
    184e:	7cda      	ldrb	r2, [r3, #19]
    1850:	1c13      	adds	r3, r2, #0
    1852:	2a12      	cmp	r2, #18
    1854:	d900      	bls.n	1858 <udi_msc_cbw_received+0x64>
    1856:	2312      	movs	r3, #18
    1858:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    185a:	2180      	movs	r1, #128	; 0x80
    185c:	0020      	movs	r0, r4
    185e:	4b76      	ldr	r3, [pc, #472]	; (1a38 <udi_msc_cbw_received+0x244>)
    1860:	4798      	blx	r3
    1862:	2800      	cmp	r0, #0
    1864:	d0d7      	beq.n	1816 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    1866:	0021      	movs	r1, r4
    1868:	4874      	ldr	r0, [pc, #464]	; (1a3c <udi_msc_cbw_received+0x248>)
    186a:	4b75      	ldr	r3, [pc, #468]	; (1a40 <udi_msc_cbw_received+0x24c>)
    186c:	4798      	blx	r3
    186e:	e7d2      	b.n	1816 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1870:	4b68      	ldr	r3, [pc, #416]	; (1a14 <udi_msc_cbw_received+0x220>)
    1872:	7cdb      	ldrb	r3, [r3, #19]
    1874:	1c1a      	adds	r2, r3, #0
    1876:	2b24      	cmp	r3, #36	; 0x24
    1878:	d900      	bls.n	187c <udi_msc_cbw_received+0x88>
    187a:	2224      	movs	r2, #36	; 0x24
    187c:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    187e:	2180      	movs	r1, #128	; 0x80
    1880:	0020      	movs	r0, r4
    1882:	4b6d      	ldr	r3, [pc, #436]	; (1a38 <udi_msc_cbw_received+0x244>)
    1884:	4798      	blx	r3
    1886:	2800      	cmp	r0, #0
    1888:	d0c5      	beq.n	1816 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    188a:	4b62      	ldr	r3, [pc, #392]	; (1a14 <udi_msc_cbw_received+0x220>)
    188c:	7c1b      	ldrb	r3, [r3, #16]
    188e:	079b      	lsls	r3, r3, #30
    1890:	d103      	bne.n	189a <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    1892:	4b60      	ldr	r3, [pc, #384]	; (1a14 <udi_msc_cbw_received+0x220>)
    1894:	7c5d      	ldrb	r5, [r3, #17]
    1896:	2d00      	cmp	r5, #0
    1898:	d004      	beq.n	18a4 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    189a:	4b65      	ldr	r3, [pc, #404]	; (1a30 <udi_msc_cbw_received+0x23c>)
    189c:	4798      	blx	r3
		udi_msc_csw_process();
    189e:	4b65      	ldr	r3, [pc, #404]	; (1a34 <udi_msc_cbw_received+0x240>)
    18a0:	4798      	blx	r3
    18a2:	e7b8      	b.n	1816 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    18a4:	4b5b      	ldr	r3, [pc, #364]	; (1a14 <udi_msc_cbw_received+0x220>)
    18a6:	7b58      	ldrb	r0, [r3, #13]
    18a8:	4b66      	ldr	r3, [pc, #408]	; (1a44 <udi_msc_cbw_received+0x250>)
    18aa:	4798      	blx	r3
    18ac:	2380      	movs	r3, #128	; 0x80
    18ae:	2800      	cmp	r0, #0
    18b0:	d100      	bne.n	18b4 <udi_msc_cbw_received+0xc0>
    18b2:	002b      	movs	r3, r5
    18b4:	4e64      	ldr	r6, [pc, #400]	; (1a48 <udi_msc_cbw_received+0x254>)
    18b6:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    18b8:	4b56      	ldr	r3, [pc, #344]	; (1a14 <udi_msc_cbw_received+0x220>)
    18ba:	7b58      	ldrb	r0, [r3, #13]
    18bc:	4b63      	ldr	r3, [pc, #396]	; (1a4c <udi_msc_cbw_received+0x258>)
    18be:	4798      	blx	r3
    18c0:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    18c2:	0030      	movs	r0, r6
    18c4:	3010      	adds	r0, #16
    18c6:	3101      	adds	r1, #1
    18c8:	2210      	movs	r2, #16
    18ca:	4b61      	ldr	r3, [pc, #388]	; (1a50 <udi_msc_cbw_received+0x25c>)
    18cc:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    18ce:	7c33      	ldrb	r3, [r6, #16]
    18d0:	2b00      	cmp	r3, #0
    18d2:	d100      	bne.n	18d6 <udi_msc_cbw_received+0xe2>
    18d4:	e08e      	b.n	19f4 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    18d6:	2b22      	cmp	r3, #34	; 0x22
    18d8:	d100      	bne.n	18dc <udi_msc_cbw_received+0xe8>
    18da:	e08a      	b.n	19f2 <udi_msc_cbw_received+0x1fe>
    18dc:	495a      	ldr	r1, [pc, #360]	; (1a48 <udi_msc_cbw_received+0x254>)
		i++;
    18de:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    18e0:	7c4a      	ldrb	r2, [r1, #17]
    18e2:	2a00      	cmp	r2, #0
    18e4:	d100      	bne.n	18e8 <udi_msc_cbw_received+0xf4>
    18e6:	e085      	b.n	19f4 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    18e8:	2a22      	cmp	r2, #34	; 0x22
    18ea:	d100      	bne.n	18ee <udi_msc_cbw_received+0xfa>
    18ec:	e082      	b.n	19f4 <udi_msc_cbw_received+0x200>
		i++;
    18ee:	3301      	adds	r3, #1
    18f0:	b2db      	uxtb	r3, r3
    18f2:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    18f4:	2b10      	cmp	r3, #16
    18f6:	d1f3      	bne.n	18e0 <udi_msc_cbw_received+0xec>
    18f8:	e084      	b.n	1a04 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    18fa:	2000      	movs	r0, #0
    18fc:	4b55      	ldr	r3, [pc, #340]	; (1a54 <udi_msc_cbw_received+0x260>)
    18fe:	4798      	blx	r3
		break;
    1900:	e789      	b.n	1816 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    1902:	2001      	movs	r0, #1
    1904:	4b53      	ldr	r3, [pc, #332]	; (1a54 <udi_msc_cbw_received+0x260>)
    1906:	4798      	blx	r3
		break;
    1908:	e785      	b.n	1816 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    190a:	4b53      	ldr	r3, [pc, #332]	; (1a58 <udi_msc_cbw_received+0x264>)
    190c:	4798      	blx	r3
    190e:	2802      	cmp	r0, #2
    1910:	d009      	beq.n	1926 <udi_msc_cbw_received+0x132>
    1912:	2803      	cmp	r0, #3
    1914:	d004      	beq.n	1920 <udi_msc_cbw_received+0x12c>
    1916:	2800      	cmp	r0, #0
    1918:	d008      	beq.n	192c <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    191a:	4b50      	ldr	r3, [pc, #320]	; (1a5c <udi_msc_cbw_received+0x268>)
    191c:	4798      	blx	r3
    191e:	e007      	b.n	1930 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    1920:	4b4f      	ldr	r3, [pc, #316]	; (1a60 <udi_msc_cbw_received+0x26c>)
    1922:	4798      	blx	r3
    1924:	e004      	b.n	1930 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    1926:	4b4f      	ldr	r3, [pc, #316]	; (1a64 <udi_msc_cbw_received+0x270>)
    1928:	4798      	blx	r3
    192a:	e001      	b.n	1930 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    192c:	4b4e      	ldr	r3, [pc, #312]	; (1a68 <udi_msc_cbw_received+0x274>)
    192e:	4798      	blx	r3
	udi_msc_csw_process();
    1930:	4b40      	ldr	r3, [pc, #256]	; (1a34 <udi_msc_cbw_received+0x240>)
    1932:	4798      	blx	r3
    1934:	e76f      	b.n	1816 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1936:	2180      	movs	r1, #128	; 0x80
    1938:	2008      	movs	r0, #8
    193a:	4b3f      	ldr	r3, [pc, #252]	; (1a38 <udi_msc_cbw_received+0x244>)
    193c:	4798      	blx	r3
    193e:	2800      	cmp	r0, #0
    1940:	d100      	bne.n	1944 <udi_msc_cbw_received+0x150>
    1942:	e768      	b.n	1816 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1944:	4b33      	ldr	r3, [pc, #204]	; (1a14 <udi_msc_cbw_received+0x220>)
    1946:	7b58      	ldrb	r0, [r3, #13]
    1948:	4948      	ldr	r1, [pc, #288]	; (1a6c <udi_msc_cbw_received+0x278>)
    194a:	4b49      	ldr	r3, [pc, #292]	; (1a70 <udi_msc_cbw_received+0x27c>)
    194c:	4798      	blx	r3
    194e:	2802      	cmp	r0, #2
    1950:	d00d      	beq.n	196e <udi_msc_cbw_received+0x17a>
    1952:	2803      	cmp	r0, #3
    1954:	d006      	beq.n	1964 <udi_msc_cbw_received+0x170>
    1956:	2800      	cmp	r0, #0
    1958:	d00e      	beq.n	1978 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    195a:	4b40      	ldr	r3, [pc, #256]	; (1a5c <udi_msc_cbw_received+0x268>)
    195c:	4798      	blx	r3
		udi_msc_csw_process();
    195e:	4b35      	ldr	r3, [pc, #212]	; (1a34 <udi_msc_cbw_received+0x240>)
    1960:	4798      	blx	r3
    1962:	e758      	b.n	1816 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1964:	4b3e      	ldr	r3, [pc, #248]	; (1a60 <udi_msc_cbw_received+0x26c>)
    1966:	4798      	blx	r3
		udi_msc_csw_process();
    1968:	4b32      	ldr	r3, [pc, #200]	; (1a34 <udi_msc_cbw_received+0x240>)
    196a:	4798      	blx	r3
    196c:	e753      	b.n	1816 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    196e:	4b3d      	ldr	r3, [pc, #244]	; (1a64 <udi_msc_cbw_received+0x270>)
    1970:	4798      	blx	r3
		udi_msc_csw_process();
    1972:	4b30      	ldr	r3, [pc, #192]	; (1a34 <udi_msc_cbw_received+0x240>)
    1974:	4798      	blx	r3
    1976:	e74e      	b.n	1816 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1978:	483c      	ldr	r0, [pc, #240]	; (1a6c <udi_msc_cbw_received+0x278>)
    197a:	2380      	movs	r3, #128	; 0x80
    197c:	029b      	lsls	r3, r3, #10
    197e:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1980:	6803      	ldr	r3, [r0, #0]
    1982:	ba1b      	rev	r3, r3
    1984:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1986:	2108      	movs	r1, #8
    1988:	4b2d      	ldr	r3, [pc, #180]	; (1a40 <udi_msc_cbw_received+0x24c>)
    198a:	4798      	blx	r3
    198c:	e743      	b.n	1816 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    198e:	4b21      	ldr	r3, [pc, #132]	; (1a14 <udi_msc_cbw_received+0x220>)
    1990:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1992:	079a      	lsls	r2, r3, #30
    1994:	d404      	bmi.n	19a0 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    1996:	4b34      	ldr	r3, [pc, #208]	; (1a68 <udi_msc_cbw_received+0x274>)
    1998:	4798      	blx	r3
	udi_msc_csw_process();
    199a:	4b26      	ldr	r3, [pc, #152]	; (1a34 <udi_msc_cbw_received+0x240>)
    199c:	4798      	blx	r3
    199e:	e73a      	b.n	1816 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    19a0:	2101      	movs	r1, #1
    19a2:	404b      	eors	r3, r1
    19a4:	2101      	movs	r1, #1
    19a6:	4019      	ands	r1, r3
    19a8:	4b32      	ldr	r3, [pc, #200]	; (1a74 <udi_msc_cbw_received+0x280>)
    19aa:	4798      	blx	r3
    19ac:	e7f3      	b.n	1996 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    19ae:	4b19      	ldr	r3, [pc, #100]	; (1a14 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    19b0:	7cdb      	ldrb	r3, [r3, #19]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d004      	beq.n	19c0 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    19b6:	4b1e      	ldr	r3, [pc, #120]	; (1a30 <udi_msc_cbw_received+0x23c>)
    19b8:	4798      	blx	r3
	udi_msc_csw_process();
    19ba:	4b1e      	ldr	r3, [pc, #120]	; (1a34 <udi_msc_cbw_received+0x240>)
    19bc:	4798      	blx	r3
    19be:	e72a      	b.n	1816 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    19c0:	4b29      	ldr	r3, [pc, #164]	; (1a68 <udi_msc_cbw_received+0x274>)
    19c2:	4798      	blx	r3
    19c4:	e7f9      	b.n	19ba <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    19c6:	4b28      	ldr	r3, [pc, #160]	; (1a68 <udi_msc_cbw_received+0x274>)
    19c8:	4798      	blx	r3
		udi_msc_csw_process();
    19ca:	4b1a      	ldr	r3, [pc, #104]	; (1a34 <udi_msc_cbw_received+0x240>)
    19cc:	4798      	blx	r3
		break;
    19ce:	e722      	b.n	1816 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    19d0:	2001      	movs	r0, #1
    19d2:	4b29      	ldr	r3, [pc, #164]	; (1a78 <udi_msc_cbw_received+0x284>)
    19d4:	4798      	blx	r3
		break;
    19d6:	e71e      	b.n	1816 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    19d8:	2000      	movs	r0, #0
    19da:	4b27      	ldr	r3, [pc, #156]	; (1a78 <udi_msc_cbw_received+0x284>)
    19dc:	4798      	blx	r3
		break;
    19de:	e71a      	b.n	1816 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    19e0:	2200      	movs	r2, #0
    19e2:	2180      	movs	r1, #128	; 0x80
    19e4:	0189      	lsls	r1, r1, #6
    19e6:	2005      	movs	r0, #5
    19e8:	4b24      	ldr	r3, [pc, #144]	; (1a7c <udi_msc_cbw_received+0x288>)
    19ea:	4798      	blx	r3
		udi_msc_csw_process();
    19ec:	4b11      	ldr	r3, [pc, #68]	; (1a34 <udi_msc_cbw_received+0x240>)
    19ee:	4798      	blx	r3
		break;
    19f0:	e711      	b.n	1816 <udi_msc_cbw_received+0x22>
	i = 0;
    19f2:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    19f4:	4814      	ldr	r0, [pc, #80]	; (1a48 <udi_msc_cbw_received+0x254>)
    19f6:	2120      	movs	r1, #32
    19f8:	18c2      	adds	r2, r0, r3
    19fa:	7411      	strb	r1, [r2, #16]
		i++;
    19fc:	3301      	adds	r3, #1
    19fe:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1a00:	2b10      	cmp	r3, #16
    1a02:	d1f9      	bne.n	19f8 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    1a04:	0021      	movs	r1, r4
    1a06:	4810      	ldr	r0, [pc, #64]	; (1a48 <udi_msc_cbw_received+0x254>)
    1a08:	4b0d      	ldr	r3, [pc, #52]	; (1a40 <udi_msc_cbw_received+0x24c>)
    1a0a:	4798      	blx	r3
    1a0c:	e703      	b.n	1816 <udi_msc_cbw_received+0x22>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	43425355 	.word	0x43425355
    1a14:	200001b0 	.word	0x200001b0
    1a18:	200001a4 	.word	0x200001a4
    1a1c:	000014cd 	.word	0x000014cd
    1a20:	000014f9 	.word	0x000014f9
    1a24:	200001d4 	.word	0x200001d4
    1a28:	20000048 	.word	0x20000048
    1a2c:	00008b20 	.word	0x00008b20
    1a30:	000015bd 	.word	0x000015bd
    1a34:	00001525 	.word	0x00001525
    1a38:	000015d1 	.word	0x000015d1
    1a3c:	200001d8 	.word	0x200001d8
    1a40:	0000161d 	.word	0x0000161d
    1a44:	00006a85 	.word	0x00006a85
    1a48:	20000058 	.word	0x20000058
    1a4c:	00006a9d 	.word	0x00006a9d
    1a50:	00007671 	.word	0x00007671
    1a54:	000016bd 	.word	0x000016bd
    1a58:	00006a29 	.word	0x00006a29
    1a5c:	00001609 	.word	0x00001609
    1a60:	00001655 	.word	0x00001655
    1a64:	00001669 	.word	0x00001669
    1a68:	0000167d 	.word	0x0000167d
    1a6c:	200001a8 	.word	0x200001a8
    1a70:	00006a41 	.word	0x00006a41
    1a74:	00006a5d 	.word	0x00006a5d
    1a78:	0000176d 	.word	0x0000176d
    1a7c:	00001585 	.word	0x00001585

00001a80 <udi_msc_disable>:
{
    1a80:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1a82:	2200      	movs	r2, #0
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <udi_msc_disable+0x18>)
    1a86:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1a88:	2301      	movs	r3, #1
    1a8a:	4a04      	ldr	r2, [pc, #16]	; (1a9c <udi_msc_disable+0x1c>)
    1a8c:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1a8e:	4a04      	ldr	r2, [pc, #16]	; (1aa0 <udi_msc_disable+0x20>)
    1a90:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1a92:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <udi_msc_disable+0x24>)
    1a94:	4798      	blx	r3
}
    1a96:	bd10      	pop	{r4, pc}
    1a98:	200001a6 	.word	0x200001a6
    1a9c:	20000044 	.word	0x20000044
    1aa0:	20000045 	.word	0x20000045
    1aa4:	000041c5 	.word	0x000041c5

00001aa8 <udi_msc_setup>:
{
    1aa8:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    1aaa:	4b20      	ldr	r3, [pc, #128]	; (1b2c <udi_msc_setup+0x84>)
    1aac:	781a      	ldrb	r2, [r3, #0]
    1aae:	b253      	sxtb	r3, r2
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	db05      	blt.n	1ac0 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1ab4:	2360      	movs	r3, #96	; 0x60
    1ab6:	4013      	ands	r3, r2
	return false;	// Not supported request
    1ab8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1aba:	2b20      	cmp	r3, #32
    1abc:	d018      	beq.n	1af0 <udi_msc_setup+0x48>
}
    1abe:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1ac0:	2360      	movs	r3, #96	; 0x60
    1ac2:	4013      	ands	r3, r2
	return false;	// Not supported request
    1ac4:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1ac6:	2b20      	cmp	r3, #32
    1ac8:	d1f9      	bne.n	1abe <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1aca:	4b18      	ldr	r3, [pc, #96]	; (1b2c <udi_msc_setup+0x84>)
    1acc:	785b      	ldrb	r3, [r3, #1]
    1ace:	2bfe      	cmp	r3, #254	; 0xfe
    1ad0:	d127      	bne.n	1b22 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1ad2:	4b16      	ldr	r3, [pc, #88]	; (1b2c <udi_msc_setup+0x84>)
    1ad4:	88db      	ldrh	r3, [r3, #6]
    1ad6:	2b01      	cmp	r3, #1
    1ad8:	d1f1      	bne.n	1abe <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1ada:	4b14      	ldr	r3, [pc, #80]	; (1b2c <udi_msc_setup+0x84>)
    1adc:	885b      	ldrh	r3, [r3, #2]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	d1ed      	bne.n	1abe <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1ae2:	4b12      	ldr	r3, [pc, #72]	; (1b2c <udi_msc_setup+0x84>)
    1ae4:	4a12      	ldr	r2, [pc, #72]	; (1b30 <udi_msc_setup+0x88>)
    1ae6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1ae8:	2201      	movs	r2, #1
    1aea:	819a      	strh	r2, [r3, #12]
				return true;
    1aec:	3001      	adds	r0, #1
    1aee:	e7e6      	b.n	1abe <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1af0:	4b0e      	ldr	r3, [pc, #56]	; (1b2c <udi_msc_setup+0x84>)
    1af2:	785b      	ldrb	r3, [r3, #1]
    1af4:	2bff      	cmp	r3, #255	; 0xff
    1af6:	d116      	bne.n	1b26 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1af8:	4b0c      	ldr	r3, [pc, #48]	; (1b2c <udi_msc_setup+0x84>)
    1afa:	88db      	ldrh	r3, [r3, #6]
    1afc:	2b00      	cmp	r3, #0
    1afe:	d1de      	bne.n	1abe <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1b00:	4b0a      	ldr	r3, [pc, #40]	; (1b2c <udi_msc_setup+0x84>)
    1b02:	885b      	ldrh	r3, [r3, #2]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d1da      	bne.n	1abe <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1b08:	4a0a      	ldr	r2, [pc, #40]	; (1b34 <udi_msc_setup+0x8c>)
    1b0a:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1b0c:	4a0a      	ldr	r2, [pc, #40]	; (1b38 <udi_msc_setup+0x90>)
    1b0e:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1b10:	3002      	adds	r0, #2
    1b12:	4c0a      	ldr	r4, [pc, #40]	; (1b3c <udi_msc_setup+0x94>)
    1b14:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1b16:	2081      	movs	r0, #129	; 0x81
    1b18:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1b1a:	4b09      	ldr	r3, [pc, #36]	; (1b40 <udi_msc_setup+0x98>)
    1b1c:	4798      	blx	r3
				return true;
    1b1e:	2001      	movs	r0, #1
    1b20:	e7cd      	b.n	1abe <udi_msc_setup+0x16>
	return false;	// Not supported request
    1b22:	2000      	movs	r0, #0
    1b24:	e7cb      	b.n	1abe <udi_msc_setup+0x16>
    1b26:	2000      	movs	r0, #0
    1b28:	e7c9      	b.n	1abe <udi_msc_setup+0x16>
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	20000610 	.word	0x20000610
    1b30:	200001d4 	.word	0x200001d4
    1b34:	200001a4 	.word	0x200001a4
    1b38:	200001a6 	.word	0x200001a6
    1b3c:	000037e5 	.word	0x000037e5
    1b40:	000013d1 	.word	0x000013d1

00001b44 <udi_msc_process_trans>:
{
    1b44:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    1b46:	4b1e      	ldr	r3, [pc, #120]	; (1bc0 <udi_msc_process_trans+0x7c>)
    1b48:	781c      	ldrb	r4, [r3, #0]
    1b4a:	2c00      	cmp	r4, #0
    1b4c:	d030      	beq.n	1bb0 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    1b4e:	2300      	movs	r3, #0
    1b50:	4a1b      	ldr	r2, [pc, #108]	; (1bc0 <udi_msc_process_trans+0x7c>)
    1b52:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    1b54:	4a1b      	ldr	r2, [pc, #108]	; (1bc4 <udi_msc_process_trans+0x80>)
    1b56:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    1b58:	4b1b      	ldr	r3, [pc, #108]	; (1bc8 <udi_msc_process_trans+0x84>)
    1b5a:	781b      	ldrb	r3, [r3, #0]
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d015      	beq.n	1b8c <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1b60:	4b1a      	ldr	r3, [pc, #104]	; (1bcc <udi_msc_process_trans+0x88>)
    1b62:	881a      	ldrh	r2, [r3, #0]
    1b64:	4b1a      	ldr	r3, [pc, #104]	; (1bd0 <udi_msc_process_trans+0x8c>)
    1b66:	6819      	ldr	r1, [r3, #0]
    1b68:	4b1a      	ldr	r3, [pc, #104]	; (1bd4 <udi_msc_process_trans+0x90>)
    1b6a:	7b58      	ldrb	r0, [r3, #13]
    1b6c:	4b1a      	ldr	r3, [pc, #104]	; (1bd8 <udi_msc_process_trans+0x94>)
    1b6e:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <udi_msc_process_trans+0x80>)
    1b72:	781b      	ldrb	r3, [r3, #0]
    1b74:	b2db      	uxtb	r3, r3
    1b76:	2b00      	cmp	r3, #0
    1b78:	d111      	bne.n	1b9e <udi_msc_process_trans+0x5a>
	switch (status) {
    1b7a:	2802      	cmp	r0, #2
    1b7c:	d01d      	beq.n	1bba <udi_msc_process_trans+0x76>
    1b7e:	2803      	cmp	r0, #3
    1b80:	d018      	beq.n	1bb4 <udi_msc_process_trans+0x70>
    1b82:	2800      	cmp	r0, #0
    1b84:	d010      	beq.n	1ba8 <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1b86:	4b15      	ldr	r3, [pc, #84]	; (1bdc <udi_msc_process_trans+0x98>)
    1b88:	4798      	blx	r3
		break;
    1b8a:	e00f      	b.n	1bac <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1b8c:	4b0f      	ldr	r3, [pc, #60]	; (1bcc <udi_msc_process_trans+0x88>)
    1b8e:	881a      	ldrh	r2, [r3, #0]
    1b90:	4b0f      	ldr	r3, [pc, #60]	; (1bd0 <udi_msc_process_trans+0x8c>)
    1b92:	6819      	ldr	r1, [r3, #0]
    1b94:	4b0f      	ldr	r3, [pc, #60]	; (1bd4 <udi_msc_process_trans+0x90>)
    1b96:	7b58      	ldrb	r0, [r3, #13]
    1b98:	4b11      	ldr	r3, [pc, #68]	; (1be0 <udi_msc_process_trans+0x9c>)
    1b9a:	4798      	blx	r3
    1b9c:	e7e8      	b.n	1b70 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    1b9e:	2100      	movs	r1, #0
    1ba0:	4a08      	ldr	r2, [pc, #32]	; (1bc4 <udi_msc_process_trans+0x80>)
    1ba2:	7011      	strb	r1, [r2, #0]
		return true;
    1ba4:	001c      	movs	r4, r3
    1ba6:	e003      	b.n	1bb0 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1ba8:	4b0e      	ldr	r3, [pc, #56]	; (1be4 <udi_msc_process_trans+0xa0>)
    1baa:	4798      	blx	r3
	udi_msc_csw_process();
    1bac:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <udi_msc_process_trans+0xa4>)
    1bae:	4798      	blx	r3
}
    1bb0:	0020      	movs	r0, r4
    1bb2:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1bb4:	4b0d      	ldr	r3, [pc, #52]	; (1bec <udi_msc_process_trans+0xa8>)
    1bb6:	4798      	blx	r3
		break;
    1bb8:	e7f8      	b.n	1bac <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    1bba:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <udi_msc_process_trans+0xac>)
    1bbc:	4798      	blx	r3
		break;
    1bbe:	e7f5      	b.n	1bac <udi_msc_process_trans+0x68>
    1bc0:	200001a6 	.word	0x200001a6
    1bc4:	20000045 	.word	0x20000045
    1bc8:	200001a5 	.word	0x200001a5
    1bcc:	200001d0 	.word	0x200001d0
    1bd0:	200001a0 	.word	0x200001a0
    1bd4:	200001b0 	.word	0x200001b0
    1bd8:	00006aad 	.word	0x00006aad
    1bdc:	00001609 	.word	0x00001609
    1be0:	00006ae1 	.word	0x00006ae1
    1be4:	0000167d 	.word	0x0000167d
    1be8:	00001525 	.word	0x00001525
    1bec:	00001655 	.word	0x00001655
    1bf0:	00001669 	.word	0x00001669

00001bf4 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1bf4:	b530      	push	{r4, r5, lr}
    1bf6:	b083      	sub	sp, #12
    1bf8:	0005      	movs	r5, r0
    1bfa:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    1bfc:	4a1d      	ldr	r2, [pc, #116]	; (1c74 <udi_msc_trans_block+0x80>)
    1bfe:	7810      	ldrb	r0, [r2, #0]
    1c00:	b2c0      	uxtb	r0, r0
    1c02:	2800      	cmp	r0, #0
    1c04:	d013      	beq.n	1c2e <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1c06:	2000      	movs	r0, #0
    1c08:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1c0a:	3081      	adds	r0, #129	; 0x81
    1c0c:	2d00      	cmp	r5, #0
    1c0e:	d100      	bne.n	1c12 <udi_msc_trans_block+0x1e>
    1c10:	387f      	subs	r0, #127	; 0x7f
    1c12:	2b00      	cmp	r3, #0
    1c14:	d00d      	beq.n	1c32 <udi_msc_trans_block+0x3e>
    1c16:	9300      	str	r3, [sp, #0]
    1c18:	0023      	movs	r3, r4
    1c1a:	000a      	movs	r2, r1
    1c1c:	2100      	movs	r1, #0
    1c1e:	4d16      	ldr	r5, [pc, #88]	; (1c78 <udi_msc_trans_block+0x84>)
    1c20:	47a8      	blx	r5
    1c22:	2800      	cmp	r0, #0
    1c24:	d020      	beq.n	1c68 <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1c26:	4b15      	ldr	r3, [pc, #84]	; (1c7c <udi_msc_trans_block+0x88>)
    1c28:	689a      	ldr	r2, [r3, #8]
    1c2a:	1b14      	subs	r4, r2, r4
    1c2c:	609c      	str	r4, [r3, #8]
	return true;
}
    1c2e:	b003      	add	sp, #12
    1c30:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1c32:	4b13      	ldr	r3, [pc, #76]	; (1c80 <udi_msc_trans_block+0x8c>)
    1c34:	9300      	str	r3, [sp, #0]
    1c36:	0023      	movs	r3, r4
    1c38:	000a      	movs	r2, r1
    1c3a:	2100      	movs	r1, #0
    1c3c:	4d0e      	ldr	r5, [pc, #56]	; (1c78 <udi_msc_trans_block+0x84>)
    1c3e:	47a8      	blx	r5
    1c40:	2800      	cmp	r0, #0
    1c42:	d011      	beq.n	1c68 <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1c44:	4a0b      	ldr	r2, [pc, #44]	; (1c74 <udi_msc_trans_block+0x80>)
    1c46:	7813      	ldrb	r3, [r2, #0]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d0fc      	beq.n	1c46 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    1c4c:	4b0d      	ldr	r3, [pc, #52]	; (1c84 <udi_msc_trans_block+0x90>)
    1c4e:	781b      	ldrb	r3, [r3, #0]
			return false;
    1c50:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1c52:	2b00      	cmp	r3, #0
    1c54:	d1eb      	bne.n	1c2e <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1c56:	4b09      	ldr	r3, [pc, #36]	; (1c7c <udi_msc_trans_block+0x88>)
    1c58:	689a      	ldr	r2, [r3, #8]
    1c5a:	1b14      	subs	r4, r2, r4
    1c5c:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    1c5e:	4b09      	ldr	r3, [pc, #36]	; (1c84 <udi_msc_trans_block+0x90>)
    1c60:	7818      	ldrb	r0, [r3, #0]
    1c62:	2301      	movs	r3, #1
    1c64:	4058      	eors	r0, r3
    1c66:	e7e2      	b.n	1c2e <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1c68:	2201      	movs	r2, #1
    1c6a:	4b02      	ldr	r3, [pc, #8]	; (1c74 <udi_msc_trans_block+0x80>)
    1c6c:	701a      	strb	r2, [r3, #0]
		return false;
    1c6e:	2000      	movs	r0, #0
    1c70:	e7dd      	b.n	1c2e <udi_msc_trans_block+0x3a>
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	20000044 	.word	0x20000044
    1c78:	00003b71 	.word	0x00003b71
    1c7c:	20000048 	.word	0x20000048
    1c80:	000013b5 	.word	0x000013b5
    1c84:	200003c8 	.word	0x200003c8

00001c88 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1c88:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1c8a:	4b11      	ldr	r3, [pc, #68]	; (1cd0 <udc_next_desc_in_iface+0x48>)
    1c8c:	681b      	ldr	r3, [r3, #0]
    1c8e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1c90:	7894      	ldrb	r4, [r2, #2]
    1c92:	78d3      	ldrb	r3, [r2, #3]
    1c94:	021b      	lsls	r3, r3, #8
    1c96:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1c98:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1c9a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1c9c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1c9e:	4290      	cmp	r0, r2
    1ca0:	d210      	bcs.n	1cc4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1ca2:	7843      	ldrb	r3, [r0, #1]
    1ca4:	2b04      	cmp	r3, #4
    1ca6:	d00f      	beq.n	1cc8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1ca8:	428b      	cmp	r3, r1
    1caa:	d00a      	beq.n	1cc2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1cac:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1cae:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1cb0:	4290      	cmp	r0, r2
    1cb2:	d205      	bcs.n	1cc0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1cb4:	7843      	ldrb	r3, [r0, #1]
    1cb6:	2b04      	cmp	r3, #4
    1cb8:	d008      	beq.n	1ccc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1cba:	428b      	cmp	r3, r1
    1cbc:	d1f6      	bne.n	1cac <udc_next_desc_in_iface+0x24>
    1cbe:	e000      	b.n	1cc2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1cc0:	2000      	movs	r0, #0
}
    1cc2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1cc4:	2000      	movs	r0, #0
    1cc6:	e7fc      	b.n	1cc2 <udc_next_desc_in_iface+0x3a>
    1cc8:	2000      	movs	r0, #0
    1cca:	e7fa      	b.n	1cc2 <udc_next_desc_in_iface+0x3a>
    1ccc:	2000      	movs	r0, #0
    1cce:	e7f8      	b.n	1cc2 <udc_next_desc_in_iface+0x3a>
    1cd0:	200001f8 	.word	0x200001f8

00001cd4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1cd4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1cd6:	4b03      	ldr	r3, [pc, #12]	; (1ce4 <udc_valid_address+0x10>)
    1cd8:	885b      	ldrh	r3, [r3, #2]
    1cda:	207f      	movs	r0, #127	; 0x7f
    1cdc:	4018      	ands	r0, r3
    1cde:	4b02      	ldr	r3, [pc, #8]	; (1ce8 <udc_valid_address+0x14>)
    1ce0:	4798      	blx	r3
}
    1ce2:	bd10      	pop	{r4, pc}
    1ce4:	20000610 	.word	0x20000610
    1ce8:	00003d49 	.word	0x00003d49

00001cec <udc_update_iface_desc>:
{
    1cec:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1cee:	4b19      	ldr	r3, [pc, #100]	; (1d54 <udc_update_iface_desc+0x68>)
    1cf0:	781b      	ldrb	r3, [r3, #0]
		return false;
    1cf2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d029      	beq.n	1d4c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1cf8:	4b17      	ldr	r3, [pc, #92]	; (1d58 <udc_update_iface_desc+0x6c>)
    1cfa:	681b      	ldr	r3, [r3, #0]
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	791c      	ldrb	r4, [r3, #4]
    1d00:	4284      	cmp	r4, r0
    1d02:	d923      	bls.n	1d4c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1d04:	4a15      	ldr	r2, [pc, #84]	; (1d5c <udc_update_iface_desc+0x70>)
    1d06:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1d08:	789a      	ldrb	r2, [r3, #2]
    1d0a:	78dc      	ldrb	r4, [r3, #3]
    1d0c:	0224      	lsls	r4, r4, #8
    1d0e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1d10:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1d12:	42a3      	cmp	r3, r4
    1d14:	d21c      	bcs.n	1d50 <udc_update_iface_desc+0x64>
    1d16:	2500      	movs	r5, #0
    1d18:	2601      	movs	r6, #1
    1d1a:	e007      	b.n	1d2c <udc_update_iface_desc+0x40>
    1d1c:	4a0f      	ldr	r2, [pc, #60]	; (1d5c <udc_update_iface_desc+0x70>)
    1d1e:	6013      	str	r3, [r2, #0]
    1d20:	e00f      	b.n	1d42 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1d22:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1d24:	189b      	adds	r3, r3, r2
    1d26:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1d28:	42a3      	cmp	r3, r4
    1d2a:	d20c      	bcs.n	1d46 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1d2c:	785a      	ldrb	r2, [r3, #1]
    1d2e:	2a04      	cmp	r2, #4
    1d30:	d1f7      	bne.n	1d22 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1d32:	789a      	ldrb	r2, [r3, #2]
    1d34:	4282      	cmp	r2, r0
    1d36:	d1f4      	bne.n	1d22 <udc_update_iface_desc+0x36>
    1d38:	78da      	ldrb	r2, [r3, #3]
    1d3a:	428a      	cmp	r2, r1
    1d3c:	d1f1      	bne.n	1d22 <udc_update_iface_desc+0x36>
    1d3e:	2d00      	cmp	r5, #0
    1d40:	d1ec      	bne.n	1d1c <udc_update_iface_desc+0x30>
				return true; // Interface found
    1d42:	2201      	movs	r2, #1
    1d44:	e002      	b.n	1d4c <udc_update_iface_desc+0x60>
    1d46:	4a05      	ldr	r2, [pc, #20]	; (1d5c <udc_update_iface_desc+0x70>)
    1d48:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1d4a:	2200      	movs	r2, #0
}
    1d4c:	0010      	movs	r0, r2
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1d50:	2200      	movs	r2, #0
    1d52:	e7fb      	b.n	1d4c <udc_update_iface_desc+0x60>
    1d54:	200001f4 	.word	0x200001f4
    1d58:	200001f8 	.word	0x200001f8
    1d5c:	200001fc 	.word	0x200001fc

00001d60 <udc_iface_disable>:
{
    1d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d62:	46c6      	mov	lr, r8
    1d64:	b500      	push	{lr}
    1d66:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d68:	2100      	movs	r1, #0
    1d6a:	4b13      	ldr	r3, [pc, #76]	; (1db8 <udc_iface_disable+0x58>)
    1d6c:	4798      	blx	r3
    1d6e:	1e05      	subs	r5, r0, #0
    1d70:	d103      	bne.n	1d7a <udc_iface_disable+0x1a>
}
    1d72:	0028      	movs	r0, r5
    1d74:	bc04      	pop	{r2}
    1d76:	4690      	mov	r8, r2
    1d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d7a:	4b10      	ldr	r3, [pc, #64]	; (1dbc <udc_iface_disable+0x5c>)
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	685b      	ldr	r3, [r3, #4]
    1d80:	00a2      	lsls	r2, r4, #2
    1d82:	58d3      	ldr	r3, [r2, r3]
    1d84:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1d86:	68db      	ldr	r3, [r3, #12]
    1d88:	4798      	blx	r3
    1d8a:	0001      	movs	r1, r0
    1d8c:	0020      	movs	r0, r4
    1d8e:	4b0a      	ldr	r3, [pc, #40]	; (1db8 <udc_iface_disable+0x58>)
    1d90:	4798      	blx	r3
    1d92:	1e05      	subs	r5, r0, #0
    1d94:	d0ed      	beq.n	1d72 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1d96:	4b0a      	ldr	r3, [pc, #40]	; (1dc0 <udc_iface_disable+0x60>)
    1d98:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1d9a:	4e0a      	ldr	r6, [pc, #40]	; (1dc4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1d9c:	4f0a      	ldr	r7, [pc, #40]	; (1dc8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1d9e:	2105      	movs	r1, #5
    1da0:	0020      	movs	r0, r4
    1da2:	47b0      	blx	r6
    1da4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1da6:	d002      	beq.n	1dae <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1da8:	7880      	ldrb	r0, [r0, #2]
    1daa:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1dac:	e7f7      	b.n	1d9e <udc_iface_disable+0x3e>
	udi_api->disable();
    1dae:	4643      	mov	r3, r8
    1db0:	685b      	ldr	r3, [r3, #4]
    1db2:	4798      	blx	r3
	return true;
    1db4:	e7dd      	b.n	1d72 <udc_iface_disable+0x12>
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00001ced 	.word	0x00001ced
    1dbc:	200001f8 	.word	0x200001f8
    1dc0:	200001fc 	.word	0x200001fc
    1dc4:	00001c89 	.word	0x00001c89
    1dc8:	00003831 	.word	0x00003831

00001dcc <udc_iface_enable>:
{
    1dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dce:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1dd0:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <udc_iface_enable+0x44>)
    1dd2:	4798      	blx	r3
    1dd4:	2800      	cmp	r0, #0
    1dd6:	d019      	beq.n	1e0c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1dd8:	4b0e      	ldr	r3, [pc, #56]	; (1e14 <udc_iface_enable+0x48>)
    1dda:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1ddc:	4e0e      	ldr	r6, [pc, #56]	; (1e18 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1dde:	4f0f      	ldr	r7, [pc, #60]	; (1e1c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1de0:	2105      	movs	r1, #5
    1de2:	0020      	movs	r0, r4
    1de4:	47b0      	blx	r6
    1de6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1de8:	d009      	beq.n	1dfe <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1dea:	7903      	ldrb	r3, [r0, #4]
    1dec:	7942      	ldrb	r2, [r0, #5]
    1dee:	0212      	lsls	r2, r2, #8
    1df0:	431a      	orrs	r2, r3
    1df2:	78c1      	ldrb	r1, [r0, #3]
    1df4:	7880      	ldrb	r0, [r0, #2]
    1df6:	47b8      	blx	r7
    1df8:	2800      	cmp	r0, #0
    1dfa:	d1f1      	bne.n	1de0 <udc_iface_enable+0x14>
    1dfc:	e006      	b.n	1e0c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1dfe:	4b08      	ldr	r3, [pc, #32]	; (1e20 <udc_iface_enable+0x54>)
    1e00:	681b      	ldr	r3, [r3, #0]
    1e02:	685b      	ldr	r3, [r3, #4]
    1e04:	00ad      	lsls	r5, r5, #2
    1e06:	58eb      	ldr	r3, [r5, r3]
    1e08:	681b      	ldr	r3, [r3, #0]
    1e0a:	4798      	blx	r3
}
    1e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	00001ced 	.word	0x00001ced
    1e14:	200001fc 	.word	0x200001fc
    1e18:	00001c89 	.word	0x00001c89
    1e1c:	00003889 	.word	0x00003889
    1e20:	200001f8 	.word	0x200001f8

00001e24 <udc_start>:
{
    1e24:	b510      	push	{r4, lr}
	udd_enable();
    1e26:	4b01      	ldr	r3, [pc, #4]	; (1e2c <udc_start+0x8>)
    1e28:	4798      	blx	r3
}
    1e2a:	bd10      	pop	{r4, pc}
    1e2c:	00003e55 	.word	0x00003e55

00001e30 <udc_reset>:
{
    1e30:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1e32:	4b0e      	ldr	r3, [pc, #56]	; (1e6c <udc_reset+0x3c>)
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d011      	beq.n	1e5e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e3a:	4b0d      	ldr	r3, [pc, #52]	; (1e70 <udc_reset+0x40>)
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1e40:	791b      	ldrb	r3, [r3, #4]
    1e42:	2b00      	cmp	r3, #0
    1e44:	d00b      	beq.n	1e5e <udc_reset+0x2e>
    1e46:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1e48:	4e0a      	ldr	r6, [pc, #40]	; (1e74 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e4a:	4d09      	ldr	r5, [pc, #36]	; (1e70 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1e4c:	0020      	movs	r0, r4
    1e4e:	47b0      	blx	r6
				iface_num++) {
    1e50:	3401      	adds	r4, #1
    1e52:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e54:	682b      	ldr	r3, [r5, #0]
    1e56:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1e58:	791b      	ldrb	r3, [r3, #4]
    1e5a:	42a3      	cmp	r3, r4
    1e5c:	d8f6      	bhi.n	1e4c <udc_reset+0x1c>
	udc_num_configuration = 0;
    1e5e:	2200      	movs	r2, #0
    1e60:	4b02      	ldr	r3, [pc, #8]	; (1e6c <udc_reset+0x3c>)
    1e62:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1e64:	3201      	adds	r2, #1
    1e66:	4b04      	ldr	r3, [pc, #16]	; (1e78 <udc_reset+0x48>)
    1e68:	801a      	strh	r2, [r3, #0]
}
    1e6a:	bd70      	pop	{r4, r5, r6, pc}
    1e6c:	200001f4 	.word	0x200001f4
    1e70:	200001f8 	.word	0x200001f8
    1e74:	00001d61 	.word	0x00001d61
    1e78:	200001ea 	.word	0x200001ea

00001e7c <udc_sof_notify>:
{
    1e7c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1e7e:	4b0e      	ldr	r3, [pc, #56]	; (1eb8 <udc_sof_notify+0x3c>)
    1e80:	781b      	ldrb	r3, [r3, #0]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d017      	beq.n	1eb6 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e86:	4b0d      	ldr	r3, [pc, #52]	; (1ebc <udc_sof_notify+0x40>)
    1e88:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1e8a:	681a      	ldr	r2, [r3, #0]
    1e8c:	7912      	ldrb	r2, [r2, #4]
    1e8e:	2a00      	cmp	r2, #0
    1e90:	d011      	beq.n	1eb6 <udc_sof_notify+0x3a>
    1e92:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e94:	4d09      	ldr	r5, [pc, #36]	; (1ebc <udc_sof_notify+0x40>)
    1e96:	e006      	b.n	1ea6 <udc_sof_notify+0x2a>
				iface_num++) {
    1e98:	3401      	adds	r4, #1
    1e9a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e9c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1e9e:	681a      	ldr	r2, [r3, #0]
    1ea0:	7912      	ldrb	r2, [r2, #4]
    1ea2:	42a2      	cmp	r2, r4
    1ea4:	d907      	bls.n	1eb6 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1ea6:	685b      	ldr	r3, [r3, #4]
    1ea8:	00a2      	lsls	r2, r4, #2
    1eaa:	58d3      	ldr	r3, [r2, r3]
    1eac:	691b      	ldr	r3, [r3, #16]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d0f2      	beq.n	1e98 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1eb2:	4798      	blx	r3
    1eb4:	e7f0      	b.n	1e98 <udc_sof_notify+0x1c>
}
    1eb6:	bd70      	pop	{r4, r5, r6, pc}
    1eb8:	200001f4 	.word	0x200001f4
    1ebc:	200001f8 	.word	0x200001f8

00001ec0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1ec2:	4bac      	ldr	r3, [pc, #688]	; (2174 <STACK_SIZE+0x174>)
    1ec4:	2200      	movs	r2, #0
    1ec6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1ec8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1eca:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1ecc:	781b      	ldrb	r3, [r3, #0]
    1ece:	b25a      	sxtb	r2, r3
    1ed0:	2a00      	cmp	r2, #0
    1ed2:	db13      	blt.n	1efc <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ed4:	2260      	movs	r2, #96	; 0x60
    1ed6:	421a      	tst	r2, r3
    1ed8:	d100      	bne.n	1edc <udc_process_setup+0x1c>
    1eda:	e0da      	b.n	2092 <STACK_SIZE+0x92>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1edc:	4ba5      	ldr	r3, [pc, #660]	; (2174 <STACK_SIZE+0x174>)
    1ede:	781a      	ldrb	r2, [r3, #0]
    1ee0:	231f      	movs	r3, #31
    1ee2:	4013      	ands	r3, r2
    1ee4:	2b01      	cmp	r3, #1
    1ee6:	d100      	bne.n	1eea <udc_process_setup+0x2a>
    1ee8:	e176      	b.n	21d8 <STACK_SIZE+0x1d8>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1eea:	4ba2      	ldr	r3, [pc, #648]	; (2174 <STACK_SIZE+0x174>)
    1eec:	781a      	ldrb	r2, [r3, #0]
    1eee:	231f      	movs	r3, #31
    1ef0:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1ef2:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1ef4:	2b02      	cmp	r3, #2
    1ef6:	d100      	bne.n	1efa <udc_process_setup+0x3a>
    1ef8:	e1cc      	b.n	2294 <STACK_SIZE+0x294>
#endif
}
    1efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1efc:	4a9d      	ldr	r2, [pc, #628]	; (2174 <STACK_SIZE+0x174>)
    1efe:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1f00:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1f02:	2a00      	cmp	r2, #0
    1f04:	d0f9      	beq.n	1efa <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1f06:	2160      	movs	r1, #96	; 0x60
    1f08:	4219      	tst	r1, r3
    1f0a:	d1e7      	bne.n	1edc <udc_process_setup+0x1c>
    1f0c:	211f      	movs	r1, #31
    1f0e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1f10:	d108      	bne.n	1f24 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f12:	4998      	ldr	r1, [pc, #608]	; (2174 <STACK_SIZE+0x174>)
    1f14:	7849      	ldrb	r1, [r1, #1]
    1f16:	2906      	cmp	r1, #6
    1f18:	d023      	beq.n	1f62 <udc_process_setup+0xa2>
    1f1a:	2908      	cmp	r1, #8
    1f1c:	d100      	bne.n	1f20 <udc_process_setup+0x60>
    1f1e:	e087      	b.n	2030 <STACK_SIZE+0x30>
    1f20:	2900      	cmp	r1, #0
    1f22:	d017      	beq.n	1f54 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1f24:	2b01      	cmp	r3, #1
    1f26:	d100      	bne.n	1f2a <udc_process_setup+0x6a>
    1f28:	e08a      	b.n	2040 <STACK_SIZE+0x40>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1f2a:	2b02      	cmp	r3, #2
    1f2c:	d1d6      	bne.n	1edc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f2e:	4b91      	ldr	r3, [pc, #580]	; (2174 <STACK_SIZE+0x174>)
    1f30:	785b      	ldrb	r3, [r3, #1]
	return false;
    1f32:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1f34:	2b00      	cmp	r3, #0
    1f36:	d000      	beq.n	1f3a <udc_process_setup+0x7a>
    1f38:	e1a8      	b.n	228c <STACK_SIZE+0x28c>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1f3a:	2a02      	cmp	r2, #2
    1f3c:	d1d5      	bne.n	1eea <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1f3e:	4b8d      	ldr	r3, [pc, #564]	; (2174 <STACK_SIZE+0x174>)
    1f40:	7918      	ldrb	r0, [r3, #4]
    1f42:	4b8d      	ldr	r3, [pc, #564]	; (2178 <STACK_SIZE+0x178>)
    1f44:	4798      	blx	r3
    1f46:	4b8d      	ldr	r3, [pc, #564]	; (217c <STACK_SIZE+0x17c>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1f48:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1f4a:	2102      	movs	r1, #2
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b8c      	ldr	r3, [pc, #560]	; (2180 <STACK_SIZE+0x180>)
    1f50:	4798      	blx	r3
    1f52:	e0ff      	b.n	2154 <STACK_SIZE+0x154>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1f54:	2a02      	cmp	r2, #2
    1f56:	d1c8      	bne.n	1eea <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1f58:	3102      	adds	r1, #2
    1f5a:	488a      	ldr	r0, [pc, #552]	; (2184 <STACK_SIZE+0x184>)
    1f5c:	4b88      	ldr	r3, [pc, #544]	; (2180 <STACK_SIZE+0x180>)
    1f5e:	4798      	blx	r3
    1f60:	e0f8      	b.n	2154 <STACK_SIZE+0x154>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1f62:	4b84      	ldr	r3, [pc, #528]	; (2174 <STACK_SIZE+0x174>)
    1f64:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1f66:	0a13      	lsrs	r3, r2, #8
    1f68:	2b02      	cmp	r3, #2
    1f6a:	d023      	beq.n	1fb4 <udc_process_setup+0xf4>
    1f6c:	b2d9      	uxtb	r1, r3
    1f6e:	2902      	cmp	r1, #2
    1f70:	d90f      	bls.n	1f92 <udc_process_setup+0xd2>
    1f72:	2b03      	cmp	r3, #3
    1f74:	d034      	beq.n	1fe0 <udc_process_setup+0x120>
    1f76:	2b0f      	cmp	r3, #15
    1f78:	d000      	beq.n	1f7c <udc_process_setup+0xbc>
    1f7a:	e184      	b.n	2286 <STACK_SIZE+0x286>
		if (udc_config.conf_bos == NULL) {
    1f7c:	4b82      	ldr	r3, [pc, #520]	; (2188 <STACK_SIZE+0x188>)
    1f7e:	6898      	ldr	r0, [r3, #8]
    1f80:	2800      	cmp	r0, #0
    1f82:	d0b2      	beq.n	1eea <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1f84:	7883      	ldrb	r3, [r0, #2]
    1f86:	78c1      	ldrb	r1, [r0, #3]
    1f88:	0209      	lsls	r1, r1, #8
    1f8a:	4319      	orrs	r1, r3
    1f8c:	4b7c      	ldr	r3, [pc, #496]	; (2180 <STACK_SIZE+0x180>)
    1f8e:	4798      	blx	r3
    1f90:	e007      	b.n	1fa2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1f92:	2b01      	cmp	r3, #1
    1f94:	d000      	beq.n	1f98 <udc_process_setup+0xd8>
    1f96:	e176      	b.n	2286 <STACK_SIZE+0x286>
				(uint8_t *) udc_config.confdev_lsfs,
    1f98:	4b7b      	ldr	r3, [pc, #492]	; (2188 <STACK_SIZE+0x188>)
    1f9a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1f9c:	7801      	ldrb	r1, [r0, #0]
    1f9e:	4b78      	ldr	r3, [pc, #480]	; (2180 <STACK_SIZE+0x180>)
    1fa0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1fa2:	4b74      	ldr	r3, [pc, #464]	; (2174 <STACK_SIZE+0x174>)
    1fa4:	88da      	ldrh	r2, [r3, #6]
    1fa6:	899b      	ldrh	r3, [r3, #12]
    1fa8:	4293      	cmp	r3, r2
    1faa:	d800      	bhi.n	1fae <udc_process_setup+0xee>
    1fac:	e0d2      	b.n	2154 <STACK_SIZE+0x154>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1fae:	4b71      	ldr	r3, [pc, #452]	; (2174 <STACK_SIZE+0x174>)
    1fb0:	819a      	strh	r2, [r3, #12]
    1fb2:	e0cf      	b.n	2154 <STACK_SIZE+0x154>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1fb4:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1fb6:	4b74      	ldr	r3, [pc, #464]	; (2188 <STACK_SIZE+0x188>)
    1fb8:	681b      	ldr	r3, [r3, #0]
    1fba:	7c5b      	ldrb	r3, [r3, #17]
    1fbc:	4293      	cmp	r3, r2
    1fbe:	d800      	bhi.n	1fc2 <udc_process_setup+0x102>
    1fc0:	e793      	b.n	1eea <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1fc2:	4b71      	ldr	r3, [pc, #452]	; (2188 <STACK_SIZE+0x188>)
    1fc4:	685b      	ldr	r3, [r3, #4]
    1fc6:	00d2      	lsls	r2, r2, #3
    1fc8:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1fca:	7883      	ldrb	r3, [r0, #2]
    1fcc:	78c1      	ldrb	r1, [r0, #3]
    1fce:	0209      	lsls	r1, r1, #8
    1fd0:	4319      	orrs	r1, r3
    1fd2:	4b6b      	ldr	r3, [pc, #428]	; (2180 <STACK_SIZE+0x180>)
    1fd4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1fd6:	4b67      	ldr	r3, [pc, #412]	; (2174 <STACK_SIZE+0x174>)
    1fd8:	689b      	ldr	r3, [r3, #8]
    1fda:	2202      	movs	r2, #2
    1fdc:	705a      	strb	r2, [r3, #1]
    1fde:	e7e0      	b.n	1fa2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1fe0:	23ff      	movs	r3, #255	; 0xff
    1fe2:	401a      	ands	r2, r3
    1fe4:	2a01      	cmp	r2, #1
    1fe6:	d020      	beq.n	202a <STACK_SIZE+0x2a>
    1fe8:	2a00      	cmp	r2, #0
    1fea:	d019      	beq.n	2020 <STACK_SIZE+0x20>
    1fec:	2a02      	cmp	r2, #2
    1fee:	d100      	bne.n	1ff2 <udc_process_setup+0x132>
    1ff0:	e178      	b.n	22e4 <STACK_SIZE+0x2e4>
    1ff2:	2a03      	cmp	r2, #3
    1ff4:	d000      	beq.n	1ff8 <udc_process_setup+0x138>
    1ff6:	e771      	b.n	1edc <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1ff8:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1ffa:	4c64      	ldr	r4, [pc, #400]	; (218c <STACK_SIZE+0x18c>)
    1ffc:	4a64      	ldr	r2, [pc, #400]	; (2190 <STACK_SIZE+0x190>)
    1ffe:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2000:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    2002:	5ce0      	ldrb	r0, [r4, r3]
    2004:	8010      	strh	r0, [r2, #0]
    2006:	3301      	adds	r3, #1
    2008:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    200a:	b2d8      	uxtb	r0, r3
    200c:	4281      	cmp	r1, r0
    200e:	d8f8      	bhi.n	2002 <STACK_SIZE+0x2>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    2010:	0049      	lsls	r1, r1, #1
    2012:	3102      	adds	r1, #2
    2014:	485e      	ldr	r0, [pc, #376]	; (2190 <STACK_SIZE+0x190>)
    2016:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    2018:	b289      	uxth	r1, r1
    201a:	4b59      	ldr	r3, [pc, #356]	; (2180 <STACK_SIZE+0x180>)
    201c:	4798      	blx	r3
    201e:	e7c0      	b.n	1fa2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    2020:	2104      	movs	r1, #4
    2022:	485c      	ldr	r0, [pc, #368]	; (2194 <STACK_SIZE+0x194>)
    2024:	4b56      	ldr	r3, [pc, #344]	; (2180 <STACK_SIZE+0x180>)
    2026:	4798      	blx	r3
    2028:	e7bb      	b.n	1fa2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    202a:	4c5b      	ldr	r4, [pc, #364]	; (2198 <STACK_SIZE+0x198>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    202c:	2109      	movs	r1, #9
    202e:	e7e5      	b.n	1ffc <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2030:	2a01      	cmp	r2, #1
    2032:	d000      	beq.n	2036 <STACK_SIZE+0x36>
    2034:	e759      	b.n	1eea <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    2036:	2101      	movs	r1, #1
    2038:	4858      	ldr	r0, [pc, #352]	; (219c <STACK_SIZE+0x19c>)
    203a:	4b51      	ldr	r3, [pc, #324]	; (2180 <STACK_SIZE+0x180>)
    203c:	4798      	blx	r3
    203e:	e089      	b.n	2154 <STACK_SIZE+0x154>
			switch (udd_g_ctrlreq.req.bRequest) {
    2040:	494c      	ldr	r1, [pc, #304]	; (2174 <STACK_SIZE+0x174>)
    2042:	7849      	ldrb	r1, [r1, #1]
    2044:	290a      	cmp	r1, #10
    2046:	d000      	beq.n	204a <STACK_SIZE+0x4a>
    2048:	e76f      	b.n	1f2a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    204a:	2a01      	cmp	r2, #1
    204c:	d000      	beq.n	2050 <STACK_SIZE+0x50>
    204e:	e0c3      	b.n	21d8 <STACK_SIZE+0x1d8>
	if (!udc_num_configuration) {
    2050:	4b52      	ldr	r3, [pc, #328]	; (219c <STACK_SIZE+0x19c>)
    2052:	781b      	ldrb	r3, [r3, #0]
    2054:	2b00      	cmp	r3, #0
    2056:	d100      	bne.n	205a <STACK_SIZE+0x5a>
    2058:	e0be      	b.n	21d8 <STACK_SIZE+0x1d8>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    205a:	4b46      	ldr	r3, [pc, #280]	; (2174 <STACK_SIZE+0x174>)
    205c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    205e:	4b50      	ldr	r3, [pc, #320]	; (21a0 <STACK_SIZE+0x1a0>)
    2060:	681d      	ldr	r5, [r3, #0]
    2062:	682b      	ldr	r3, [r5, #0]
    2064:	791b      	ldrb	r3, [r3, #4]
    2066:	42a3      	cmp	r3, r4
    2068:	d800      	bhi.n	206c <STACK_SIZE+0x6c>
    206a:	e0b5      	b.n	21d8 <STACK_SIZE+0x1d8>
	if (!udc_update_iface_desc(iface_num, 0)) {
    206c:	2100      	movs	r1, #0
    206e:	0020      	movs	r0, r4
    2070:	4b4c      	ldr	r3, [pc, #304]	; (21a4 <STACK_SIZE+0x1a4>)
    2072:	4798      	blx	r3
    2074:	2800      	cmp	r0, #0
    2076:	d100      	bne.n	207a <STACK_SIZE+0x7a>
    2078:	e730      	b.n	1edc <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    207a:	686b      	ldr	r3, [r5, #4]
    207c:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    207e:	58e3      	ldr	r3, [r4, r3]
    2080:	68db      	ldr	r3, [r3, #12]
    2082:	4798      	blx	r3
    2084:	4b48      	ldr	r3, [pc, #288]	; (21a8 <STACK_SIZE+0x1a8>)
    2086:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    2088:	2101      	movs	r1, #1
    208a:	0018      	movs	r0, r3
    208c:	4b3c      	ldr	r3, [pc, #240]	; (2180 <STACK_SIZE+0x180>)
    208e:	4798      	blx	r3
    2090:	e060      	b.n	2154 <STACK_SIZE+0x154>
    2092:	221f      	movs	r2, #31
    2094:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2096:	d15f      	bne.n	2158 <STACK_SIZE+0x158>
			switch (udd_g_ctrlreq.req.bRequest) {
    2098:	4a36      	ldr	r2, [pc, #216]	; (2174 <STACK_SIZE+0x174>)
    209a:	7852      	ldrb	r2, [r2, #1]
    209c:	2a03      	cmp	r2, #3
    209e:	d100      	bne.n	20a2 <STACK_SIZE+0xa2>
    20a0:	e0f3      	b.n	228a <STACK_SIZE+0x28a>
    20a2:	b2d1      	uxtb	r1, r2
    20a4:	2903      	cmp	r1, #3
    20a6:	d93b      	bls.n	2120 <STACK_SIZE+0x120>
    20a8:	2a05      	cmp	r2, #5
    20aa:	d04b      	beq.n	2144 <STACK_SIZE+0x144>
    20ac:	2a09      	cmp	r2, #9
    20ae:	d153      	bne.n	2158 <STACK_SIZE+0x158>
	if (udd_g_ctrlreq.req.wLength) {
    20b0:	4b30      	ldr	r3, [pc, #192]	; (2174 <STACK_SIZE+0x174>)
    20b2:	88db      	ldrh	r3, [r3, #6]
    20b4:	2b00      	cmp	r3, #0
    20b6:	d000      	beq.n	20ba <STACK_SIZE+0xba>
    20b8:	e717      	b.n	1eea <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    20ba:	4b3c      	ldr	r3, [pc, #240]	; (21ac <STACK_SIZE+0x1ac>)
    20bc:	4798      	blx	r3
    20be:	2800      	cmp	r0, #0
    20c0:	d100      	bne.n	20c4 <STACK_SIZE+0xc4>
    20c2:	e70b      	b.n	1edc <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    20c4:	4b2b      	ldr	r3, [pc, #172]	; (2174 <STACK_SIZE+0x174>)
    20c6:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    20c8:	4b2f      	ldr	r3, [pc, #188]	; (2188 <STACK_SIZE+0x188>)
    20ca:	681b      	ldr	r3, [r3, #0]
    20cc:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    20ce:	429a      	cmp	r2, r3
    20d0:	dd00      	ble.n	20d4 <STACK_SIZE+0xd4>
    20d2:	e703      	b.n	1edc <udc_process_setup+0x1c>
	udc_reset();
    20d4:	4b36      	ldr	r3, [pc, #216]	; (21b0 <STACK_SIZE+0x1b0>)
    20d6:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    20d8:	4b26      	ldr	r3, [pc, #152]	; (2174 <STACK_SIZE+0x174>)
    20da:	789b      	ldrb	r3, [r3, #2]
    20dc:	4a2f      	ldr	r2, [pc, #188]	; (219c <STACK_SIZE+0x19c>)
    20de:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    20e0:	2b00      	cmp	r3, #0
    20e2:	d037      	beq.n	2154 <STACK_SIZE+0x154>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    20e4:	4a33      	ldr	r2, [pc, #204]	; (21b4 <STACK_SIZE+0x1b4>)
    20e6:	4694      	mov	ip, r2
    20e8:	4463      	add	r3, ip
    20ea:	00db      	lsls	r3, r3, #3
    20ec:	4a26      	ldr	r2, [pc, #152]	; (2188 <STACK_SIZE+0x188>)
    20ee:	6852      	ldr	r2, [r2, #4]
    20f0:	18d3      	adds	r3, r2, r3
    20f2:	4a2b      	ldr	r2, [pc, #172]	; (21a0 <STACK_SIZE+0x1a0>)
    20f4:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    20f6:	681b      	ldr	r3, [r3, #0]
    20f8:	791b      	ldrb	r3, [r3, #4]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d02a      	beq.n	2154 <STACK_SIZE+0x154>
    20fe:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    2100:	4d2d      	ldr	r5, [pc, #180]	; (21b8 <STACK_SIZE+0x1b8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2102:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    2104:	2100      	movs	r1, #0
    2106:	0020      	movs	r0, r4
    2108:	47a8      	blx	r5
    210a:	2800      	cmp	r0, #0
    210c:	d100      	bne.n	2110 <STACK_SIZE+0x110>
    210e:	e6e5      	b.n	1edc <udc_process_setup+0x1c>
			iface_num++) {
    2110:	3401      	adds	r4, #1
    2112:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2114:	6833      	ldr	r3, [r6, #0]
    2116:	681b      	ldr	r3, [r3, #0]
    2118:	791b      	ldrb	r3, [r3, #4]
    211a:	42a3      	cmp	r3, r4
    211c:	d8f2      	bhi.n	2104 <STACK_SIZE+0x104>
    211e:	e019      	b.n	2154 <STACK_SIZE+0x154>
			switch (udd_g_ctrlreq.req.bRequest) {
    2120:	2a01      	cmp	r2, #1
    2122:	d119      	bne.n	2158 <STACK_SIZE+0x158>
	if (udd_g_ctrlreq.req.wLength) {
    2124:	4b13      	ldr	r3, [pc, #76]	; (2174 <STACK_SIZE+0x174>)
    2126:	88db      	ldrh	r3, [r3, #6]
    2128:	2b00      	cmp	r3, #0
    212a:	d000      	beq.n	212e <STACK_SIZE+0x12e>
    212c:	e6dd      	b.n	1eea <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    212e:	4b11      	ldr	r3, [pc, #68]	; (2174 <STACK_SIZE+0x174>)
    2130:	885b      	ldrh	r3, [r3, #2]
    2132:	2b01      	cmp	r3, #1
    2134:	d000      	beq.n	2138 <STACK_SIZE+0x138>
    2136:	e6d8      	b.n	1eea <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2138:	4a12      	ldr	r2, [pc, #72]	; (2184 <STACK_SIZE+0x184>)
    213a:	8813      	ldrh	r3, [r2, #0]
    213c:	2102      	movs	r1, #2
    213e:	438b      	bics	r3, r1
    2140:	8013      	strh	r3, [r2, #0]
    2142:	e007      	b.n	2154 <STACK_SIZE+0x154>
	if (udd_g_ctrlreq.req.wLength) {
    2144:	4b0b      	ldr	r3, [pc, #44]	; (2174 <STACK_SIZE+0x174>)
    2146:	88db      	ldrh	r3, [r3, #6]
    2148:	2b00      	cmp	r3, #0
    214a:	d000      	beq.n	214e <STACK_SIZE+0x14e>
    214c:	e6cd      	b.n	1eea <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    214e:	4a1b      	ldr	r2, [pc, #108]	; (21bc <STACK_SIZE+0x1bc>)
    2150:	4b08      	ldr	r3, [pc, #32]	; (2174 <STACK_SIZE+0x174>)
    2152:	611a      	str	r2, [r3, #16]
			return true;
    2154:	2001      	movs	r0, #1
    2156:	e6d0      	b.n	1efa <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2158:	2b01      	cmp	r3, #1
    215a:	d031      	beq.n	21c0 <STACK_SIZE+0x1c0>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    215c:	2b02      	cmp	r3, #2
    215e:	d000      	beq.n	2162 <STACK_SIZE+0x162>
    2160:	e6bc      	b.n	1edc <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2162:	4b04      	ldr	r3, [pc, #16]	; (2174 <STACK_SIZE+0x174>)
    2164:	785b      	ldrb	r3, [r3, #1]
    2166:	2b01      	cmp	r3, #1
    2168:	d06c      	beq.n	2244 <STACK_SIZE+0x244>
    216a:	2b03      	cmp	r3, #3
    216c:	d100      	bne.n	2170 <STACK_SIZE+0x170>
    216e:	e078      	b.n	2262 <STACK_SIZE+0x262>
	return false;
    2170:	2000      	movs	r0, #0
    2172:	e08b      	b.n	228c <STACK_SIZE+0x28c>
    2174:	20000610 	.word	0x20000610
    2178:	00003991 	.word	0x00003991
    217c:	200001ec 	.word	0x200001ec
    2180:	00003d69 	.word	0x00003d69
    2184:	200001ea 	.word	0x200001ea
    2188:	200000ac 	.word	0x200000ac
    218c:	00008c8c 	.word	0x00008c8c
    2190:	2000007c 	.word	0x2000007c
    2194:	20000098 	.word	0x20000098
    2198:	2000009c 	.word	0x2000009c
    219c:	200001f4 	.word	0x200001f4
    21a0:	200001f8 	.word	0x200001f8
    21a4:	00001ced 	.word	0x00001ced
    21a8:	200001f0 	.word	0x200001f0
    21ac:	00003d59 	.word	0x00003d59
    21b0:	00001e31 	.word	0x00001e31
    21b4:	1fffffff 	.word	0x1fffffff
    21b8:	00001dcd 	.word	0x00001dcd
    21bc:	00001cd5 	.word	0x00001cd5
			switch (udd_g_ctrlreq.req.bRequest) {
    21c0:	4a4a      	ldr	r2, [pc, #296]	; (22ec <STACK_SIZE+0x2ec>)
    21c2:	7852      	ldrb	r2, [r2, #1]
    21c4:	2a0b      	cmp	r2, #11
    21c6:	d1c9      	bne.n	215c <STACK_SIZE+0x15c>
	if (udd_g_ctrlreq.req.wLength) {
    21c8:	4b48      	ldr	r3, [pc, #288]	; (22ec <STACK_SIZE+0x2ec>)
    21ca:	88db      	ldrh	r3, [r3, #6]
    21cc:	2b00      	cmp	r3, #0
    21ce:	d103      	bne.n	21d8 <STACK_SIZE+0x1d8>
	if (!udc_num_configuration) {
    21d0:	4b47      	ldr	r3, [pc, #284]	; (22f0 <STACK_SIZE+0x2f0>)
    21d2:	781b      	ldrb	r3, [r3, #0]
    21d4:	2b00      	cmp	r3, #0
    21d6:	d127      	bne.n	2228 <STACK_SIZE+0x228>
	if (0 == udc_num_configuration) {
    21d8:	4b45      	ldr	r3, [pc, #276]	; (22f0 <STACK_SIZE+0x2f0>)
    21da:	781b      	ldrb	r3, [r3, #0]
	return false;
    21dc:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    21de:	2b00      	cmp	r3, #0
    21e0:	d100      	bne.n	21e4 <STACK_SIZE+0x1e4>
    21e2:	e68a      	b.n	1efa <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    21e4:	4b41      	ldr	r3, [pc, #260]	; (22ec <STACK_SIZE+0x2ec>)
    21e6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    21e8:	4b42      	ldr	r3, [pc, #264]	; (22f4 <STACK_SIZE+0x2f4>)
    21ea:	681d      	ldr	r5, [r3, #0]
    21ec:	682b      	ldr	r3, [r5, #0]
    21ee:	791b      	ldrb	r3, [r3, #4]
    21f0:	42a3      	cmp	r3, r4
    21f2:	d800      	bhi.n	21f6 <STACK_SIZE+0x1f6>
    21f4:	e681      	b.n	1efa <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    21f6:	2100      	movs	r1, #0
    21f8:	0020      	movs	r0, r4
    21fa:	4b3f      	ldr	r3, [pc, #252]	; (22f8 <STACK_SIZE+0x2f8>)
    21fc:	4798      	blx	r3
    21fe:	2800      	cmp	r0, #0
    2200:	d100      	bne.n	2204 <STACK_SIZE+0x204>
    2202:	e672      	b.n	1eea <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2204:	686b      	ldr	r3, [r5, #4]
    2206:	00a2      	lsls	r2, r4, #2
    2208:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    220a:	68eb      	ldr	r3, [r5, #12]
    220c:	4798      	blx	r3
    220e:	0001      	movs	r1, r0
    2210:	0020      	movs	r0, r4
    2212:	4b39      	ldr	r3, [pc, #228]	; (22f8 <STACK_SIZE+0x2f8>)
    2214:	4798      	blx	r3
    2216:	2800      	cmp	r0, #0
    2218:	d100      	bne.n	221c <STACK_SIZE+0x21c>
    221a:	e666      	b.n	1eea <udc_process_setup+0x2a>
	return udi_api->setup();
    221c:	68ab      	ldr	r3, [r5, #8]
    221e:	4798      	blx	r3
		if (udc_req_iface()) {
    2220:	2800      	cmp	r0, #0
    2222:	d000      	beq.n	2226 <STACK_SIZE+0x226>
    2224:	e669      	b.n	1efa <udc_process_setup+0x3a>
    2226:	e660      	b.n	1eea <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2228:	4b30      	ldr	r3, [pc, #192]	; (22ec <STACK_SIZE+0x2ec>)
    222a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    222c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    222e:	0028      	movs	r0, r5
    2230:	4b32      	ldr	r3, [pc, #200]	; (22fc <STACK_SIZE+0x2fc>)
    2232:	4798      	blx	r3
    2234:	2800      	cmp	r0, #0
    2236:	d100      	bne.n	223a <STACK_SIZE+0x23a>
    2238:	e650      	b.n	1edc <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    223a:	b2e1      	uxtb	r1, r4
    223c:	0028      	movs	r0, r5
    223e:	4b30      	ldr	r3, [pc, #192]	; (2300 <STACK_SIZE+0x300>)
    2240:	4798      	blx	r3
    2242:	e023      	b.n	228c <STACK_SIZE+0x28c>
	if (udd_g_ctrlreq.req.wLength) {
    2244:	4b29      	ldr	r3, [pc, #164]	; (22ec <STACK_SIZE+0x2ec>)
    2246:	88db      	ldrh	r3, [r3, #6]
    2248:	2b00      	cmp	r3, #0
    224a:	d000      	beq.n	224e <STACK_SIZE+0x24e>
    224c:	e64d      	b.n	1eea <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    224e:	4b27      	ldr	r3, [pc, #156]	; (22ec <STACK_SIZE+0x2ec>)
    2250:	885b      	ldrh	r3, [r3, #2]
    2252:	2b00      	cmp	r3, #0
    2254:	d000      	beq.n	2258 <STACK_SIZE+0x258>
    2256:	e648      	b.n	1eea <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2258:	4b24      	ldr	r3, [pc, #144]	; (22ec <STACK_SIZE+0x2ec>)
    225a:	7918      	ldrb	r0, [r3, #4]
    225c:	4b29      	ldr	r3, [pc, #164]	; (2304 <STACK_SIZE+0x304>)
    225e:	4798      	blx	r3
    2260:	e014      	b.n	228c <STACK_SIZE+0x28c>
	if (udd_g_ctrlreq.req.wLength) {
    2262:	4b22      	ldr	r3, [pc, #136]	; (22ec <STACK_SIZE+0x2ec>)
    2264:	88db      	ldrh	r3, [r3, #6]
    2266:	2b00      	cmp	r3, #0
    2268:	d000      	beq.n	226c <STACK_SIZE+0x26c>
    226a:	e63e      	b.n	1eea <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    226c:	4b1f      	ldr	r3, [pc, #124]	; (22ec <STACK_SIZE+0x2ec>)
    226e:	885b      	ldrh	r3, [r3, #2]
    2270:	2b00      	cmp	r3, #0
    2272:	d000      	beq.n	2276 <STACK_SIZE+0x276>
    2274:	e639      	b.n	1eea <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2276:	4c1d      	ldr	r4, [pc, #116]	; (22ec <STACK_SIZE+0x2ec>)
    2278:	7920      	ldrb	r0, [r4, #4]
    227a:	4b23      	ldr	r3, [pc, #140]	; (2308 <STACK_SIZE+0x308>)
    227c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    227e:	7920      	ldrb	r0, [r4, #4]
    2280:	4b22      	ldr	r3, [pc, #136]	; (230c <STACK_SIZE+0x30c>)
    2282:	4798      	blx	r3
    2284:	e002      	b.n	228c <STACK_SIZE+0x28c>
		return false;
    2286:	2000      	movs	r0, #0
    2288:	e000      	b.n	228c <STACK_SIZE+0x28c>
				return udc_req_std_dev_set_feature();
    228a:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    228c:	2800      	cmp	r0, #0
    228e:	d000      	beq.n	2292 <STACK_SIZE+0x292>
    2290:	e633      	b.n	1efa <udc_process_setup+0x3a>
    2292:	e623      	b.n	1edc <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    2294:	4b16      	ldr	r3, [pc, #88]	; (22f0 <STACK_SIZE+0x2f0>)
    2296:	781b      	ldrb	r3, [r3, #0]
    2298:	2b00      	cmp	r3, #0
    229a:	d100      	bne.n	229e <STACK_SIZE+0x29e>
    229c:	e62d      	b.n	1efa <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    229e:	4b15      	ldr	r3, [pc, #84]	; (22f4 <STACK_SIZE+0x2f4>)
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	681a      	ldr	r2, [r3, #0]
    22a4:	7912      	ldrb	r2, [r2, #4]
    22a6:	2a00      	cmp	r2, #0
    22a8:	d01a      	beq.n	22e0 <STACK_SIZE+0x2e0>
    22aa:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    22ac:	4e12      	ldr	r6, [pc, #72]	; (22f8 <STACK_SIZE+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    22ae:	4f11      	ldr	r7, [pc, #68]	; (22f4 <STACK_SIZE+0x2f4>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    22b0:	685b      	ldr	r3, [r3, #4]
    22b2:	00aa      	lsls	r2, r5, #2
    22b4:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    22b6:	68e3      	ldr	r3, [r4, #12]
    22b8:	4798      	blx	r3
    22ba:	0001      	movs	r1, r0
    22bc:	0028      	movs	r0, r5
    22be:	47b0      	blx	r6
    22c0:	2800      	cmp	r0, #0
    22c2:	d100      	bne.n	22c6 <STACK_SIZE+0x2c6>
    22c4:	e619      	b.n	1efa <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    22c6:	68a3      	ldr	r3, [r4, #8]
    22c8:	4798      	blx	r3
    22ca:	2800      	cmp	r0, #0
    22cc:	d000      	beq.n	22d0 <STACK_SIZE+0x2d0>
    22ce:	e614      	b.n	1efa <udc_process_setup+0x3a>
			iface_num++) {
    22d0:	3501      	adds	r5, #1
    22d2:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    22d4:	683b      	ldr	r3, [r7, #0]
    22d6:	681a      	ldr	r2, [r3, #0]
    22d8:	7912      	ldrb	r2, [r2, #4]
    22da:	42aa      	cmp	r2, r5
    22dc:	d8e8      	bhi.n	22b0 <STACK_SIZE+0x2b0>
    22de:	e60c      	b.n	1efa <udc_process_setup+0x3a>
	return false;
    22e0:	2000      	movs	r0, #0
    22e2:	e60a      	b.n	1efa <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    22e4:	2103      	movs	r1, #3
		str = udc_string_product_name;
    22e6:	4c0a      	ldr	r4, [pc, #40]	; (2310 <STACK_SIZE+0x310>)
    22e8:	e688      	b.n	1ffc <udc_process_setup+0x13c>
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	20000610 	.word	0x20000610
    22f0:	200001f4 	.word	0x200001f4
    22f4:	200001f8 	.word	0x200001f8
    22f8:	00001ced 	.word	0x00001ced
    22fc:	00001d61 	.word	0x00001d61
    2300:	00001dcd 	.word	0x00001dcd
    2304:	00003ad5 	.word	0x00003ad5
    2308:	000037e5 	.word	0x000037e5
    230c:	000039a5 	.word	0x000039a5
    2310:	200000a8 	.word	0x200000a8

00002314 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2314:	4a04      	ldr	r2, [pc, #16]	; (2328 <_extint_enable+0x14>)
    2316:	7813      	ldrb	r3, [r2, #0]
    2318:	2102      	movs	r1, #2
    231a:	430b      	orrs	r3, r1
    231c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    231e:	7853      	ldrb	r3, [r2, #1]
    2320:	b25b      	sxtb	r3, r3
    2322:	2b00      	cmp	r3, #0
    2324:	dbfb      	blt.n	231e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2326:	4770      	bx	lr
    2328:	40001800 	.word	0x40001800

0000232c <_system_extint_init>:
{
    232c:	b500      	push	{lr}
    232e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    2330:	4a12      	ldr	r2, [pc, #72]	; (237c <_system_extint_init+0x50>)
    2332:	6993      	ldr	r3, [r2, #24]
    2334:	2140      	movs	r1, #64	; 0x40
    2336:	430b      	orrs	r3, r1
    2338:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    233a:	a901      	add	r1, sp, #4
    233c:	2300      	movs	r3, #0
    233e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2340:	2005      	movs	r0, #5
    2342:	4b0f      	ldr	r3, [pc, #60]	; (2380 <_system_extint_init+0x54>)
    2344:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2346:	2005      	movs	r0, #5
    2348:	4b0e      	ldr	r3, [pc, #56]	; (2384 <_system_extint_init+0x58>)
    234a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    234c:	4a0e      	ldr	r2, [pc, #56]	; (2388 <_system_extint_init+0x5c>)
    234e:	7813      	ldrb	r3, [r2, #0]
    2350:	2101      	movs	r1, #1
    2352:	430b      	orrs	r3, r1
    2354:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2356:	7853      	ldrb	r3, [r2, #1]
    2358:	b25b      	sxtb	r3, r3
    235a:	2b00      	cmp	r3, #0
    235c:	dbfb      	blt.n	2356 <_system_extint_init+0x2a>
    235e:	4b0b      	ldr	r3, [pc, #44]	; (238c <_system_extint_init+0x60>)
    2360:	0019      	movs	r1, r3
    2362:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2364:	2200      	movs	r2, #0
    2366:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2368:	4299      	cmp	r1, r3
    236a:	d1fc      	bne.n	2366 <_system_extint_init+0x3a>
    236c:	2210      	movs	r2, #16
    236e:	4b08      	ldr	r3, [pc, #32]	; (2390 <_system_extint_init+0x64>)
    2370:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2372:	4b08      	ldr	r3, [pc, #32]	; (2394 <_system_extint_init+0x68>)
    2374:	4798      	blx	r3
}
    2376:	b003      	add	sp, #12
    2378:	bd00      	pop	{pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	40000400 	.word	0x40000400
    2380:	00006e19 	.word	0x00006e19
    2384:	00006d8d 	.word	0x00006d8d
    2388:	40001800 	.word	0x40001800
    238c:	200003cc 	.word	0x200003cc
    2390:	e000e100 	.word	0xe000e100
    2394:	00002315 	.word	0x00002315

00002398 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2398:	2300      	movs	r3, #0
    239a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    239c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    239e:	2201      	movs	r2, #1
    23a0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    23a2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    23a4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    23a6:	3302      	adds	r3, #2
    23a8:	72c3      	strb	r3, [r0, #11]
}
    23aa:	4770      	bx	lr

000023ac <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    23ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ae:	b083      	sub	sp, #12
    23b0:	0005      	movs	r5, r0
    23b2:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    23b4:	a901      	add	r1, sp, #4
    23b6:	2300      	movs	r3, #0
    23b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    23ba:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    23bc:	7923      	ldrb	r3, [r4, #4]
    23be:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    23c0:	7a23      	ldrb	r3, [r4, #8]
    23c2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    23c4:	7820      	ldrb	r0, [r4, #0]
    23c6:	4b15      	ldr	r3, [pc, #84]	; (241c <extint_chan_set_config+0x70>)
    23c8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    23ca:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    23cc:	2d1f      	cmp	r5, #31
    23ce:	d800      	bhi.n	23d2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    23d0:	4813      	ldr	r0, [pc, #76]	; (2420 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    23d2:	2207      	movs	r2, #7
    23d4:	402a      	ands	r2, r5
    23d6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    23d8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    23da:	7aa3      	ldrb	r3, [r4, #10]
    23dc:	2b00      	cmp	r3, #0
    23de:	d001      	beq.n	23e4 <extint_chan_set_config+0x38>
    23e0:	2308      	movs	r3, #8
    23e2:	431f      	orrs	r7, r3
    23e4:	08eb      	lsrs	r3, r5, #3
    23e6:	009b      	lsls	r3, r3, #2
    23e8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    23ea:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    23ec:	260f      	movs	r6, #15
    23ee:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    23f0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    23f2:	4097      	lsls	r7, r2
    23f4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    23f6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    23f8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    23fa:	7a63      	ldrb	r3, [r4, #9]
    23fc:	2b00      	cmp	r3, #0
    23fe:	d106      	bne.n	240e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2400:	6943      	ldr	r3, [r0, #20]
    2402:	2201      	movs	r2, #1
    2404:	40aa      	lsls	r2, r5
    2406:	4393      	bics	r3, r2
    2408:	6143      	str	r3, [r0, #20]
	}
}
    240a:	b003      	add	sp, #12
    240c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    240e:	6942      	ldr	r2, [r0, #20]
    2410:	2301      	movs	r3, #1
    2412:	40ab      	lsls	r3, r5
    2414:	4313      	orrs	r3, r2
    2416:	6143      	str	r3, [r0, #20]
    2418:	e7f7      	b.n	240a <extint_chan_set_config+0x5e>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	00006f11 	.word	0x00006f11
    2420:	40001800 	.word	0x40001800

00002424 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2424:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2426:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2428:	b25b      	sxtb	r3, r3
    242a:	2b00      	cmp	r3, #0
    242c:	dbfb      	blt.n	2426 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    242e:	8813      	ldrh	r3, [r2, #0]
    2430:	2102      	movs	r1, #2
    2432:	430b      	orrs	r3, r1
    2434:	8013      	strh	r3, [r2, #0]
}
    2436:	4770      	bx	lr

00002438 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2438:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    243a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    243c:	b25b      	sxtb	r3, r3
    243e:	2b00      	cmp	r3, #0
    2440:	dbfb      	blt.n	243a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    2442:	23c1      	movs	r3, #193	; 0xc1
    2444:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    2446:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    2448:	8813      	ldrh	r3, [r2, #0]
    244a:	2102      	movs	r1, #2
    244c:	438b      	bics	r3, r1
    244e:	8013      	strh	r3, [r2, #0]
}
    2450:	4770      	bx	lr
	...

00002454 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2458:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    245a:	4b06      	ldr	r3, [pc, #24]	; (2474 <rtc_calendar_reset+0x20>)
    245c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    245e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2460:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    2462:	b25b      	sxtb	r3, r3
    2464:	2b00      	cmp	r3, #0
    2466:	dbfb      	blt.n	2460 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    2468:	882b      	ldrh	r3, [r5, #0]
    246a:	2201      	movs	r2, #1
    246c:	4313      	orrs	r3, r2
    246e:	802b      	strh	r3, [r5, #0]
}
    2470:	bd70      	pop	{r4, r5, r6, pc}
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	00002439 	.word	0x00002439

00002478 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2478:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    247a:	88cb      	ldrh	r3, [r1, #6]
    247c:	88c2      	ldrh	r2, [r0, #6]
    247e:	1a9a      	subs	r2, r3, r2
    2480:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    2482:	794b      	ldrb	r3, [r1, #5]
    2484:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    2486:	790c      	ldrb	r4, [r1, #4]
    2488:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    248a:	4323      	orrs	r3, r4
    248c:	788c      	ldrb	r4, [r1, #2]
    248e:	0324      	lsls	r4, r4, #12
    2490:	4323      	orrs	r3, r4
    2492:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    2494:	7902      	ldrb	r2, [r0, #4]
    2496:	2a00      	cmp	r2, #0
    2498:	d105      	bne.n	24a6 <rtc_calendar_time_to_register_value+0x2e>
    249a:	78ca      	ldrb	r2, [r1, #3]
    249c:	2a00      	cmp	r2, #0
    249e:	d002      	beq.n	24a6 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    24a0:	2280      	movs	r2, #128	; 0x80
    24a2:	0252      	lsls	r2, r2, #9
    24a4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    24a6:	7848      	ldrb	r0, [r1, #1]
    24a8:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    24aa:	780a      	ldrb	r2, [r1, #0]
    24ac:	4310      	orrs	r0, r2
    24ae:	4318      	orrs	r0, r3

	return register_value;
}
    24b0:	bd10      	pop	{r4, pc}

000024b2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    24b2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    24b4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    24b6:	88c4      	ldrh	r4, [r0, #6]
    24b8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    24ba:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    24bc:	018b      	lsls	r3, r1, #6
    24be:	0f1b      	lsrs	r3, r3, #28
    24c0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    24c2:	028b      	lsls	r3, r1, #10
    24c4:	0edb      	lsrs	r3, r3, #27
    24c6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    24c8:	7903      	ldrb	r3, [r0, #4]
    24ca:	2b00      	cmp	r3, #0
    24cc:	d10c      	bne.n	24e8 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    24ce:	040b      	lsls	r3, r1, #16
    24d0:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    24d2:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    24d4:	03cb      	lsls	r3, r1, #15
    24d6:	0fdb      	lsrs	r3, r3, #31
    24d8:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    24da:	0988      	lsrs	r0, r1, #6
    24dc:	233f      	movs	r3, #63	; 0x3f
    24de:	4018      	ands	r0, r3
    24e0:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    24e2:	4019      	ands	r1, r3
    24e4:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    24e6:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    24e8:	03cb      	lsls	r3, r1, #15
    24ea:	0edb      	lsrs	r3, r3, #27
    24ec:	7093      	strb	r3, [r2, #2]
    24ee:	e7f4      	b.n	24da <rtc_calendar_register_value_to_time+0x28>

000024f0 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    24f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    24f2:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    24f4:	4b03      	ldr	r3, [pc, #12]	; (2504 <rtc_calendar_set_time+0x14>)
    24f6:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    24f8:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    24fa:	b25b      	sxtb	r3, r3
    24fc:	2b00      	cmp	r3, #0
    24fe:	dbfb      	blt.n	24f8 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    2500:	6120      	str	r0, [r4, #16]
}
    2502:	bd10      	pop	{r4, pc}
    2504:	00002479 	.word	0x00002479

00002508 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    2508:	b510      	push	{r4, lr}
    250a:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    250c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    250e:	7941      	ldrb	r1, [r0, #5]
    2510:	2900      	cmp	r1, #0
    2512:	d006      	beq.n	2522 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    2514:	8859      	ldrh	r1, [r3, #2]
    2516:	0449      	lsls	r1, r1, #17
    2518:	d50b      	bpl.n	2532 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    251a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    251c:	4b0a      	ldr	r3, [pc, #40]	; (2548 <rtc_calendar_get_time+0x40>)
    251e:	4798      	blx	r3
}
    2520:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    2522:	490a      	ldr	r1, [pc, #40]	; (254c <rtc_calendar_get_time+0x44>)
    2524:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    2526:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2528:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    252a:	b249      	sxtb	r1, r1
    252c:	2900      	cmp	r1, #0
    252e:	dbfb      	blt.n	2528 <rtc_calendar_get_time+0x20>
    2530:	e7f3      	b.n	251a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    2532:	8859      	ldrh	r1, [r3, #2]
    2534:	24c0      	movs	r4, #192	; 0xc0
    2536:	0224      	lsls	r4, r4, #8
    2538:	4321      	orrs	r1, r4
    253a:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    253c:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    253e:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    2540:	b249      	sxtb	r1, r1
    2542:	2900      	cmp	r1, #0
    2544:	dbfb      	blt.n	253e <rtc_calendar_get_time+0x36>
    2546:	e7e8      	b.n	251a <rtc_calendar_get_time+0x12>
    2548:	000024b3 	.word	0x000024b3
    254c:	ffff8000 	.word	0xffff8000

00002550 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	000d      	movs	r5, r1
    2554:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    2556:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    2558:	2a01      	cmp	r2, #1
    255a:	d901      	bls.n	2560 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    255c:	0018      	movs	r0, r3
    255e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    2560:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    2562:	4b06      	ldr	r3, [pc, #24]	; (257c <rtc_calendar_set_alarm+0x2c>)
    2564:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2566:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    2568:	b25b      	sxtb	r3, r3
    256a:	2b00      	cmp	r3, #0
    256c:	dbfb      	blt.n	2566 <rtc_calendar_set_alarm+0x16>
    256e:	00e4      	lsls	r4, r4, #3
    2570:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    2572:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    2574:	7a2b      	ldrb	r3, [r5, #8]
    2576:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    2578:	2300      	movs	r3, #0
    257a:	e7ef      	b.n	255c <rtc_calendar_set_alarm+0xc>
    257c:	00002479 	.word	0x00002479

00002580 <rtc_calendar_init>:
{
    2580:	b530      	push	{r4, r5, lr}
    2582:	b083      	sub	sp, #12
    2584:	0005      	movs	r5, r0
    2586:	0014      	movs	r4, r2
	module->hw = hw;
    2588:	6001      	str	r1, [r0, #0]
    258a:	4a1c      	ldr	r2, [pc, #112]	; (25fc <rtc_calendar_init+0x7c>)
    258c:	6993      	ldr	r3, [r2, #24]
    258e:	2120      	movs	r1, #32
    2590:	430b      	orrs	r3, r1
    2592:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    2594:	a901      	add	r1, sp, #4
    2596:	2302      	movs	r3, #2
    2598:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    259a:	2004      	movs	r0, #4
    259c:	4b18      	ldr	r3, [pc, #96]	; (2600 <rtc_calendar_init+0x80>)
    259e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    25a0:	2004      	movs	r0, #4
    25a2:	4b18      	ldr	r3, [pc, #96]	; (2604 <rtc_calendar_init+0x84>)
    25a4:	4798      	blx	r3
	rtc_calendar_reset(module);
    25a6:	0028      	movs	r0, r5
    25a8:	4b17      	ldr	r3, [pc, #92]	; (2608 <rtc_calendar_init+0x88>)
    25aa:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    25ac:	7923      	ldrb	r3, [r4, #4]
    25ae:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    25b0:	78e3      	ldrb	r3, [r4, #3]
    25b2:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    25b4:	88e3      	ldrh	r3, [r4, #6]
    25b6:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    25b8:	4b14      	ldr	r3, [pc, #80]	; (260c <rtc_calendar_init+0x8c>)
    25ba:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    25bc:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    25be:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    25c0:	7921      	ldrb	r1, [r4, #4]
    25c2:	2900      	cmp	r1, #0
    25c4:	d017      	beq.n	25f6 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    25c6:	2108      	movs	r1, #8
    25c8:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    25ca:	78a1      	ldrb	r1, [r4, #2]
    25cc:	2900      	cmp	r1, #0
    25ce:	d001      	beq.n	25d4 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    25d0:	2180      	movs	r1, #128	; 0x80
    25d2:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    25d4:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    25d6:	78e3      	ldrb	r3, [r4, #3]
    25d8:	2b00      	cmp	r3, #0
    25da:	d004      	beq.n	25e6 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    25dc:	8853      	ldrh	r3, [r2, #2]
    25de:	2180      	movs	r1, #128	; 0x80
    25e0:	01c9      	lsls	r1, r1, #7
    25e2:	430b      	orrs	r3, r1
    25e4:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    25e6:	0021      	movs	r1, r4
    25e8:	3108      	adds	r1, #8
    25ea:	2200      	movs	r2, #0
    25ec:	0028      	movs	r0, r5
    25ee:	4b08      	ldr	r3, [pc, #32]	; (2610 <rtc_calendar_init+0x90>)
    25f0:	4798      	blx	r3
}
    25f2:	b003      	add	sp, #12
    25f4:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    25f6:	2148      	movs	r1, #72	; 0x48
    25f8:	430b      	orrs	r3, r1
    25fa:	e7e6      	b.n	25ca <rtc_calendar_init+0x4a>
    25fc:	40000400 	.word	0x40000400
    2600:	00006e19 	.word	0x00006e19
    2604:	00006d8d 	.word	0x00006d8d
    2608:	00002455 	.word	0x00002455
    260c:	2000040c 	.word	0x2000040c
    2610:	00002551 	.word	0x00002551

00002614 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    2618:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    261a:	2a01      	cmp	r2, #1
    261c:	d901      	bls.n	2622 <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    261e:	0018      	movs	r0, r3
    2620:	bd70      	pop	{r4, r5, r6, pc}
    2622:	00d2      	lsls	r2, r2, #3
    2624:	6803      	ldr	r3, [r0, #0]
    2626:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    2628:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    262a:	0022      	movs	r2, r4
    262c:	4b02      	ldr	r3, [pc, #8]	; (2638 <rtc_calendar_get_alarm+0x24>)
    262e:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    2630:	7f2b      	ldrb	r3, [r5, #28]
    2632:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    2634:	2300      	movs	r3, #0
    2636:	e7f2      	b.n	261e <rtc_calendar_get_alarm+0xa>
    2638:	000024b3 	.word	0x000024b3

0000263c <rtc_calendar_swap_time_mode>:
{
    263c:	b570      	push	{r4, r5, r6, lr}
    263e:	b086      	sub	sp, #24
    2640:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    2642:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    2644:	a904      	add	r1, sp, #16
    2646:	4b3d      	ldr	r3, [pc, #244]	; (273c <rtc_calendar_swap_time_mode+0x100>)
    2648:	4798      	blx	r3
	if (module->clock_24h) {
    264a:	7923      	ldrb	r3, [r4, #4]
    264c:	2b00      	cmp	r3, #0
    264e:	d042      	beq.n	26d6 <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    2650:	aa04      	add	r2, sp, #16
    2652:	7890      	ldrb	r0, [r2, #2]
    2654:	230b      	movs	r3, #11
    2656:	4283      	cmp	r3, r0
    2658:	419b      	sbcs	r3, r3
    265a:	425b      	negs	r3, r3
    265c:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    265e:	210c      	movs	r1, #12
    2660:	4b37      	ldr	r3, [pc, #220]	; (2740 <rtc_calendar_swap_time_mode+0x104>)
    2662:	4798      	blx	r3
    2664:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    2666:	2900      	cmp	r1, #0
    2668:	d016      	beq.n	2698 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    266a:	ab04      	add	r3, sp, #16
    266c:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    266e:	ad01      	add	r5, sp, #4
    2670:	2200      	movs	r2, #0
    2672:	0029      	movs	r1, r5
    2674:	0020      	movs	r0, r4
    2676:	4b33      	ldr	r3, [pc, #204]	; (2744 <rtc_calendar_swap_time_mode+0x108>)
    2678:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    267a:	78a8      	ldrb	r0, [r5, #2]
    267c:	230b      	movs	r3, #11
    267e:	4283      	cmp	r3, r0
    2680:	419b      	sbcs	r3, r3
    2682:	425b      	negs	r3, r3
    2684:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    2686:	210c      	movs	r1, #12
    2688:	4b2d      	ldr	r3, [pc, #180]	; (2740 <rtc_calendar_swap_time_mode+0x104>)
    268a:	4798      	blx	r3
    268c:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    268e:	2900      	cmp	r1, #0
    2690:	d006      	beq.n	26a0 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    2692:	ab01      	add	r3, sp, #4
    2694:	7099      	strb	r1, [r3, #2]
    2696:	e006      	b.n	26a6 <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    2698:	220c      	movs	r2, #12
    269a:	ab04      	add	r3, sp, #16
    269c:	709a      	strb	r2, [r3, #2]
    269e:	e7e6      	b.n	266e <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    26a0:	220c      	movs	r2, #12
    26a2:	ab01      	add	r3, sp, #4
    26a4:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    26a6:	2500      	movs	r5, #0
    26a8:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    26aa:	2200      	movs	r2, #0
    26ac:	a901      	add	r1, sp, #4
    26ae:	0020      	movs	r0, r4
    26b0:	4b25      	ldr	r3, [pc, #148]	; (2748 <rtc_calendar_swap_time_mode+0x10c>)
    26b2:	4798      	blx	r3
		module->clock_24h = false;
    26b4:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    26b6:	0020      	movs	r0, r4
    26b8:	4b24      	ldr	r3, [pc, #144]	; (274c <rtc_calendar_swap_time_mode+0x110>)
    26ba:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    26bc:	8833      	ldrh	r3, [r6, #0]
    26be:	2240      	movs	r2, #64	; 0x40
    26c0:	4053      	eors	r3, r2
    26c2:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    26c4:	0020      	movs	r0, r4
    26c6:	4b22      	ldr	r3, [pc, #136]	; (2750 <rtc_calendar_swap_time_mode+0x114>)
    26c8:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    26ca:	a904      	add	r1, sp, #16
    26cc:	0020      	movs	r0, r4
    26ce:	4b21      	ldr	r3, [pc, #132]	; (2754 <rtc_calendar_swap_time_mode+0x118>)
    26d0:	4798      	blx	r3
}
    26d2:	b006      	add	sp, #24
    26d4:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    26d6:	ab04      	add	r3, sp, #16
    26d8:	78db      	ldrb	r3, [r3, #3]
    26da:	2b00      	cmp	r3, #0
    26dc:	d015      	beq.n	270a <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    26de:	ab04      	add	r3, sp, #16
    26e0:	789a      	ldrb	r2, [r3, #2]
    26e2:	320c      	adds	r2, #12
    26e4:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    26e6:	2200      	movs	r2, #0
    26e8:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    26ea:	ad01      	add	r5, sp, #4
    26ec:	2200      	movs	r2, #0
    26ee:	0029      	movs	r1, r5
    26f0:	0020      	movs	r0, r4
    26f2:	4b14      	ldr	r3, [pc, #80]	; (2744 <rtc_calendar_swap_time_mode+0x108>)
    26f4:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    26f6:	78eb      	ldrb	r3, [r5, #3]
    26f8:	2b00      	cmp	r3, #0
    26fa:	d10e      	bne.n	271a <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    26fc:	ab01      	add	r3, sp, #4
    26fe:	789b      	ldrb	r3, [r3, #2]
    2700:	2b0c      	cmp	r3, #12
    2702:	d017      	beq.n	2734 <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    2704:	2301      	movs	r3, #1
    2706:	7123      	strb	r3, [r4, #4]
    2708:	e7d5      	b.n	26b6 <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    270a:	ab04      	add	r3, sp, #16
    270c:	789b      	ldrb	r3, [r3, #2]
    270e:	2b0c      	cmp	r3, #12
    2710:	d1eb      	bne.n	26ea <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    2712:	2200      	movs	r2, #0
    2714:	ab04      	add	r3, sp, #16
    2716:	709a      	strb	r2, [r3, #2]
    2718:	e7e7      	b.n	26ea <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    271a:	a901      	add	r1, sp, #4
    271c:	788b      	ldrb	r3, [r1, #2]
    271e:	330c      	adds	r3, #12
    2720:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    2722:	2300      	movs	r3, #0
    2724:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    2726:	3301      	adds	r3, #1
    2728:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    272a:	2200      	movs	r2, #0
    272c:	0020      	movs	r0, r4
    272e:	4b06      	ldr	r3, [pc, #24]	; (2748 <rtc_calendar_swap_time_mode+0x10c>)
    2730:	4798      	blx	r3
    2732:	e7e7      	b.n	2704 <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    2734:	2200      	movs	r2, #0
    2736:	ab01      	add	r3, sp, #4
    2738:	709a      	strb	r2, [r3, #2]
    273a:	e7e3      	b.n	2704 <rtc_calendar_swap_time_mode+0xc8>
    273c:	00002509 	.word	0x00002509
    2740:	000071a1 	.word	0x000071a1
    2744:	00002615 	.word	0x00002615
    2748:	00002551 	.word	0x00002551
    274c:	00002439 	.word	0x00002439
    2750:	00002425 	.word	0x00002425
    2754:	000024f1 	.word	0x000024f1

00002758 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2758:	4770      	bx	lr
	...

0000275c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    275c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <_sercom_set_handler+0x2c>)
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d10c      	bne.n	2780 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2766:	4f09      	ldr	r7, [pc, #36]	; (278c <_sercom_set_handler+0x30>)
    2768:	4e09      	ldr	r6, [pc, #36]	; (2790 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    276a:	4d0a      	ldr	r5, [pc, #40]	; (2794 <_sercom_set_handler+0x38>)
    276c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    276e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2770:	195a      	adds	r2, r3, r5
    2772:	6014      	str	r4, [r2, #0]
    2774:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2776:	2b18      	cmp	r3, #24
    2778:	d1f9      	bne.n	276e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    277a:	2201      	movs	r2, #1
    277c:	4b02      	ldr	r3, [pc, #8]	; (2788 <_sercom_set_handler+0x2c>)
    277e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2780:	0080      	lsls	r0, r0, #2
    2782:	4b02      	ldr	r3, [pc, #8]	; (278c <_sercom_set_handler+0x30>)
    2784:	50c1      	str	r1, [r0, r3]
}
    2786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2788:	20000200 	.word	0x20000200
    278c:	20000204 	.word	0x20000204
    2790:	00002759 	.word	0x00002759
    2794:	20000410 	.word	0x20000410

00002798 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2798:	b500      	push	{lr}
    279a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    279c:	2309      	movs	r3, #9
    279e:	466a      	mov	r2, sp
    27a0:	7013      	strb	r3, [r2, #0]
    27a2:	3301      	adds	r3, #1
    27a4:	7053      	strb	r3, [r2, #1]
    27a6:	3301      	adds	r3, #1
    27a8:	7093      	strb	r3, [r2, #2]
    27aa:	3301      	adds	r3, #1
    27ac:	70d3      	strb	r3, [r2, #3]
    27ae:	3301      	adds	r3, #1
    27b0:	7113      	strb	r3, [r2, #4]
    27b2:	3301      	adds	r3, #1
    27b4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    27b6:	4b03      	ldr	r3, [pc, #12]	; (27c4 <_sercom_get_interrupt_vector+0x2c>)
    27b8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    27ba:	466b      	mov	r3, sp
    27bc:	5618      	ldrsb	r0, [r3, r0]
}
    27be:	b003      	add	sp, #12
    27c0:	bd00      	pop	{pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	000058f9 	.word	0x000058f9

000027c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    27c8:	b510      	push	{r4, lr}
    27ca:	4b02      	ldr	r3, [pc, #8]	; (27d4 <SERCOM0_Handler+0xc>)
    27cc:	681b      	ldr	r3, [r3, #0]
    27ce:	2000      	movs	r0, #0
    27d0:	4798      	blx	r3
    27d2:	bd10      	pop	{r4, pc}
    27d4:	20000204 	.word	0x20000204

000027d8 <SERCOM1_Handler>:
    27d8:	b510      	push	{r4, lr}
    27da:	4b02      	ldr	r3, [pc, #8]	; (27e4 <SERCOM1_Handler+0xc>)
    27dc:	685b      	ldr	r3, [r3, #4]
    27de:	2001      	movs	r0, #1
    27e0:	4798      	blx	r3
    27e2:	bd10      	pop	{r4, pc}
    27e4:	20000204 	.word	0x20000204

000027e8 <SERCOM2_Handler>:
    27e8:	b510      	push	{r4, lr}
    27ea:	4b02      	ldr	r3, [pc, #8]	; (27f4 <SERCOM2_Handler+0xc>)
    27ec:	689b      	ldr	r3, [r3, #8]
    27ee:	2002      	movs	r0, #2
    27f0:	4798      	blx	r3
    27f2:	bd10      	pop	{r4, pc}
    27f4:	20000204 	.word	0x20000204

000027f8 <SERCOM3_Handler>:
    27f8:	b510      	push	{r4, lr}
    27fa:	4b02      	ldr	r3, [pc, #8]	; (2804 <SERCOM3_Handler+0xc>)
    27fc:	68db      	ldr	r3, [r3, #12]
    27fe:	2003      	movs	r0, #3
    2800:	4798      	blx	r3
    2802:	bd10      	pop	{r4, pc}
    2804:	20000204 	.word	0x20000204

00002808 <SERCOM4_Handler>:
    2808:	b510      	push	{r4, lr}
    280a:	4b02      	ldr	r3, [pc, #8]	; (2814 <SERCOM4_Handler+0xc>)
    280c:	691b      	ldr	r3, [r3, #16]
    280e:	2004      	movs	r0, #4
    2810:	4798      	blx	r3
    2812:	bd10      	pop	{r4, pc}
    2814:	20000204 	.word	0x20000204

00002818 <SERCOM5_Handler>:
    2818:	b510      	push	{r4, lr}
    281a:	4b02      	ldr	r3, [pc, #8]	; (2824 <SERCOM5_Handler+0xc>)
    281c:	695b      	ldr	r3, [r3, #20]
    281e:	2005      	movs	r0, #5
    2820:	4798      	blx	r3
    2822:	bd10      	pop	{r4, pc}
    2824:	20000204 	.word	0x20000204

00002828 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2828:	b5f0      	push	{r4, r5, r6, r7, lr}
    282a:	46de      	mov	lr, fp
    282c:	4657      	mov	r7, sl
    282e:	464e      	mov	r6, r9
    2830:	4645      	mov	r5, r8
    2832:	b5e0      	push	{r5, r6, r7, lr}
    2834:	b091      	sub	sp, #68	; 0x44
    2836:	0005      	movs	r5, r0
    2838:	000c      	movs	r4, r1
    283a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    283c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    283e:	0008      	movs	r0, r1
    2840:	4bbc      	ldr	r3, [pc, #752]	; (2b34 <usart_init+0x30c>)
    2842:	4798      	blx	r3
    2844:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2846:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2848:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    284a:	07db      	lsls	r3, r3, #31
    284c:	d506      	bpl.n	285c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    284e:	b011      	add	sp, #68	; 0x44
    2850:	bc3c      	pop	{r2, r3, r4, r5}
    2852:	4690      	mov	r8, r2
    2854:	4699      	mov	r9, r3
    2856:	46a2      	mov	sl, r4
    2858:	46ab      	mov	fp, r5
    285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    285c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    285e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2860:	079b      	lsls	r3, r3, #30
    2862:	d4f4      	bmi.n	284e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    2864:	49b4      	ldr	r1, [pc, #720]	; (2b38 <usart_init+0x310>)
    2866:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2868:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    286a:	2301      	movs	r3, #1
    286c:	40bb      	lsls	r3, r7
    286e:	4303      	orrs	r3, r0
    2870:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2872:	a90f      	add	r1, sp, #60	; 0x3c
    2874:	272d      	movs	r7, #45	; 0x2d
    2876:	5df3      	ldrb	r3, [r6, r7]
    2878:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    287a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    287c:	b2d3      	uxtb	r3, r2
    287e:	9302      	str	r3, [sp, #8]
    2880:	0018      	movs	r0, r3
    2882:	4bae      	ldr	r3, [pc, #696]	; (2b3c <usart_init+0x314>)
    2884:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2886:	9802      	ldr	r0, [sp, #8]
    2888:	4bad      	ldr	r3, [pc, #692]	; (2b40 <usart_init+0x318>)
    288a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    288c:	5df0      	ldrb	r0, [r6, r7]
    288e:	2100      	movs	r1, #0
    2890:	4bac      	ldr	r3, [pc, #688]	; (2b44 <usart_init+0x31c>)
    2892:	4798      	blx	r3
	module->character_size = config->character_size;
    2894:	7af3      	ldrb	r3, [r6, #11]
    2896:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2898:	2324      	movs	r3, #36	; 0x24
    289a:	5cf3      	ldrb	r3, [r6, r3]
    289c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    289e:	2325      	movs	r3, #37	; 0x25
    28a0:	5cf3      	ldrb	r3, [r6, r3]
    28a2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    28a4:	7ef3      	ldrb	r3, [r6, #27]
    28a6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    28a8:	7f33      	ldrb	r3, [r6, #28]
    28aa:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28ac:	682b      	ldr	r3, [r5, #0]
    28ae:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    28b0:	0018      	movs	r0, r3
    28b2:	4ba0      	ldr	r3, [pc, #640]	; (2b34 <usart_init+0x30c>)
    28b4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    28b6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    28b8:	2200      	movs	r2, #0
    28ba:	230e      	movs	r3, #14
    28bc:	a906      	add	r1, sp, #24
    28be:	468c      	mov	ip, r1
    28c0:	4463      	add	r3, ip
    28c2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    28c4:	8a32      	ldrh	r2, [r6, #16]
    28c6:	9202      	str	r2, [sp, #8]
    28c8:	2380      	movs	r3, #128	; 0x80
    28ca:	01db      	lsls	r3, r3, #7
    28cc:	429a      	cmp	r2, r3
    28ce:	d100      	bne.n	28d2 <usart_init+0xaa>
    28d0:	e09e      	b.n	2a10 <usart_init+0x1e8>
    28d2:	d90f      	bls.n	28f4 <usart_init+0xcc>
    28d4:	23c0      	movs	r3, #192	; 0xc0
    28d6:	01db      	lsls	r3, r3, #7
    28d8:	9a02      	ldr	r2, [sp, #8]
    28da:	429a      	cmp	r2, r3
    28dc:	d100      	bne.n	28e0 <usart_init+0xb8>
    28de:	e092      	b.n	2a06 <usart_init+0x1de>
    28e0:	2380      	movs	r3, #128	; 0x80
    28e2:	021b      	lsls	r3, r3, #8
    28e4:	429a      	cmp	r2, r3
    28e6:	d000      	beq.n	28ea <usart_init+0xc2>
    28e8:	e11f      	b.n	2b2a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    28ea:	2303      	movs	r3, #3
    28ec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28ee:	2300      	movs	r3, #0
    28f0:	9307      	str	r3, [sp, #28]
    28f2:	e008      	b.n	2906 <usart_init+0xde>
	switch (config->sample_rate) {
    28f4:	2380      	movs	r3, #128	; 0x80
    28f6:	019b      	lsls	r3, r3, #6
    28f8:	429a      	cmp	r2, r3
    28fa:	d000      	beq.n	28fe <usart_init+0xd6>
    28fc:	e115      	b.n	2b2a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28fe:	2310      	movs	r3, #16
    2900:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2902:	3b0f      	subs	r3, #15
    2904:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2906:	6833      	ldr	r3, [r6, #0]
    2908:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    290a:	68f3      	ldr	r3, [r6, #12]
    290c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    290e:	6973      	ldr	r3, [r6, #20]
    2910:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2912:	7e33      	ldrb	r3, [r6, #24]
    2914:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2916:	2326      	movs	r3, #38	; 0x26
    2918:	5cf3      	ldrb	r3, [r6, r3]
    291a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    291c:	6873      	ldr	r3, [r6, #4]
    291e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2920:	2b00      	cmp	r3, #0
    2922:	d100      	bne.n	2926 <usart_init+0xfe>
    2924:	e0a0      	b.n	2a68 <usart_init+0x240>
    2926:	2380      	movs	r3, #128	; 0x80
    2928:	055b      	lsls	r3, r3, #21
    292a:	4599      	cmp	r9, r3
    292c:	d100      	bne.n	2930 <usart_init+0x108>
    292e:	e084      	b.n	2a3a <usart_init+0x212>
	if(config->encoding_format_enable) {
    2930:	7e73      	ldrb	r3, [r6, #25]
    2932:	2b00      	cmp	r3, #0
    2934:	d002      	beq.n	293c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2936:	7eb3      	ldrb	r3, [r6, #26]
    2938:	4642      	mov	r2, r8
    293a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    293c:	682a      	ldr	r2, [r5, #0]
    293e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2940:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2942:	2b00      	cmp	r3, #0
    2944:	d1fc      	bne.n	2940 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    2946:	330e      	adds	r3, #14
    2948:	aa06      	add	r2, sp, #24
    294a:	4694      	mov	ip, r2
    294c:	4463      	add	r3, ip
    294e:	881b      	ldrh	r3, [r3, #0]
    2950:	4642      	mov	r2, r8
    2952:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2954:	9b05      	ldr	r3, [sp, #20]
    2956:	9a03      	ldr	r2, [sp, #12]
    2958:	4313      	orrs	r3, r2
    295a:	9a04      	ldr	r2, [sp, #16]
    295c:	4313      	orrs	r3, r2
    295e:	464a      	mov	r2, r9
    2960:	4313      	orrs	r3, r2
    2962:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2964:	465b      	mov	r3, fp
    2966:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2968:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    296a:	4653      	mov	r3, sl
    296c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    296e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2970:	2327      	movs	r3, #39	; 0x27
    2972:	5cf3      	ldrb	r3, [r6, r3]
    2974:	2b00      	cmp	r3, #0
    2976:	d101      	bne.n	297c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2978:	3304      	adds	r3, #4
    297a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    297c:	7e73      	ldrb	r3, [r6, #25]
    297e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2980:	7f32      	ldrb	r2, [r6, #28]
    2982:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2984:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2986:	7f72      	ldrb	r2, [r6, #29]
    2988:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    298a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    298c:	2224      	movs	r2, #36	; 0x24
    298e:	5cb2      	ldrb	r2, [r6, r2]
    2990:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2992:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2994:	2225      	movs	r2, #37	; 0x25
    2996:	5cb2      	ldrb	r2, [r6, r2]
    2998:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    299a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    299c:	7ab1      	ldrb	r1, [r6, #10]
    299e:	7af2      	ldrb	r2, [r6, #11]
    29a0:	4311      	orrs	r1, r2
    29a2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    29a4:	8933      	ldrh	r3, [r6, #8]
    29a6:	2bff      	cmp	r3, #255	; 0xff
    29a8:	d100      	bne.n	29ac <usart_init+0x184>
    29aa:	e081      	b.n	2ab0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    29ac:	2280      	movs	r2, #128	; 0x80
    29ae:	0452      	lsls	r2, r2, #17
    29b0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    29b2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    29b4:	232c      	movs	r3, #44	; 0x2c
    29b6:	5cf3      	ldrb	r3, [r6, r3]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d103      	bne.n	29c4 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    29bc:	4b62      	ldr	r3, [pc, #392]	; (2b48 <usart_init+0x320>)
    29be:	789b      	ldrb	r3, [r3, #2]
    29c0:	079b      	lsls	r3, r3, #30
    29c2:	d501      	bpl.n	29c8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    29c4:	2380      	movs	r3, #128	; 0x80
    29c6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    29c8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29ca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    29cc:	2b00      	cmp	r3, #0
    29ce:	d1fc      	bne.n	29ca <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    29d0:	4643      	mov	r3, r8
    29d2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    29d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    29d8:	2b00      	cmp	r3, #0
    29da:	d1fc      	bne.n	29d6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    29dc:	4643      	mov	r3, r8
    29de:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    29e0:	ab0e      	add	r3, sp, #56	; 0x38
    29e2:	2280      	movs	r2, #128	; 0x80
    29e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29e6:	2200      	movs	r2, #0
    29e8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    29ea:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    29ec:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    29ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    29f0:	930a      	str	r3, [sp, #40]	; 0x28
    29f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    29f4:	930b      	str	r3, [sp, #44]	; 0x2c
    29f6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    29f8:	930c      	str	r3, [sp, #48]	; 0x30
    29fa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    29fc:	9302      	str	r3, [sp, #8]
    29fe:	930d      	str	r3, [sp, #52]	; 0x34
    2a00:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a02:	ae0a      	add	r6, sp, #40	; 0x28
    2a04:	e063      	b.n	2ace <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a06:	2308      	movs	r3, #8
    2a08:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2a0a:	3b07      	subs	r3, #7
    2a0c:	9307      	str	r3, [sp, #28]
    2a0e:	e77a      	b.n	2906 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2a10:	6833      	ldr	r3, [r6, #0]
    2a12:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2a14:	68f3      	ldr	r3, [r6, #12]
    2a16:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2a18:	6973      	ldr	r3, [r6, #20]
    2a1a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2a1c:	7e33      	ldrb	r3, [r6, #24]
    2a1e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2a20:	2326      	movs	r3, #38	; 0x26
    2a22:	5cf3      	ldrb	r3, [r6, r3]
    2a24:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2a26:	6873      	ldr	r3, [r6, #4]
    2a28:	4699      	mov	r9, r3
	switch (transfer_mode)
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d018      	beq.n	2a60 <usart_init+0x238>
    2a2e:	2380      	movs	r3, #128	; 0x80
    2a30:	055b      	lsls	r3, r3, #21
    2a32:	4599      	cmp	r9, r3
    2a34:	d001      	beq.n	2a3a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    2a36:	2000      	movs	r0, #0
    2a38:	e025      	b.n	2a86 <usart_init+0x25e>
			if (!config->use_external_clock) {
    2a3a:	2327      	movs	r3, #39	; 0x27
    2a3c:	5cf3      	ldrb	r3, [r6, r3]
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d000      	beq.n	2a44 <usart_init+0x21c>
    2a42:	e775      	b.n	2930 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2a44:	6a33      	ldr	r3, [r6, #32]
    2a46:	001f      	movs	r7, r3
    2a48:	b2c0      	uxtb	r0, r0
    2a4a:	4b40      	ldr	r3, [pc, #256]	; (2b4c <usart_init+0x324>)
    2a4c:	4798      	blx	r3
    2a4e:	0001      	movs	r1, r0
    2a50:	220e      	movs	r2, #14
    2a52:	ab06      	add	r3, sp, #24
    2a54:	469c      	mov	ip, r3
    2a56:	4462      	add	r2, ip
    2a58:	0038      	movs	r0, r7
    2a5a:	4b3d      	ldr	r3, [pc, #244]	; (2b50 <usart_init+0x328>)
    2a5c:	4798      	blx	r3
    2a5e:	e012      	b.n	2a86 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2a60:	2308      	movs	r3, #8
    2a62:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a64:	2300      	movs	r3, #0
    2a66:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2a68:	2327      	movs	r3, #39	; 0x27
    2a6a:	5cf3      	ldrb	r3, [r6, r3]
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d00e      	beq.n	2a8e <usart_init+0x266>
				status_code =
    2a70:	9b06      	ldr	r3, [sp, #24]
    2a72:	9300      	str	r3, [sp, #0]
    2a74:	9b07      	ldr	r3, [sp, #28]
    2a76:	220e      	movs	r2, #14
    2a78:	a906      	add	r1, sp, #24
    2a7a:	468c      	mov	ip, r1
    2a7c:	4462      	add	r2, ip
    2a7e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2a80:	6a30      	ldr	r0, [r6, #32]
    2a82:	4f34      	ldr	r7, [pc, #208]	; (2b54 <usart_init+0x32c>)
    2a84:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2a86:	2800      	cmp	r0, #0
    2a88:	d000      	beq.n	2a8c <usart_init+0x264>
    2a8a:	e6e0      	b.n	284e <usart_init+0x26>
    2a8c:	e750      	b.n	2930 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2a8e:	6a33      	ldr	r3, [r6, #32]
    2a90:	001f      	movs	r7, r3
    2a92:	b2c0      	uxtb	r0, r0
    2a94:	4b2d      	ldr	r3, [pc, #180]	; (2b4c <usart_init+0x324>)
    2a96:	4798      	blx	r3
    2a98:	0001      	movs	r1, r0
				status_code =
    2a9a:	9b06      	ldr	r3, [sp, #24]
    2a9c:	9300      	str	r3, [sp, #0]
    2a9e:	9b07      	ldr	r3, [sp, #28]
    2aa0:	220e      	movs	r2, #14
    2aa2:	a806      	add	r0, sp, #24
    2aa4:	4684      	mov	ip, r0
    2aa6:	4462      	add	r2, ip
    2aa8:	0038      	movs	r0, r7
    2aaa:	4f2a      	ldr	r7, [pc, #168]	; (2b54 <usart_init+0x32c>)
    2aac:	47b8      	blx	r7
    2aae:	e7ea      	b.n	2a86 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2ab0:	7ef3      	ldrb	r3, [r6, #27]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d100      	bne.n	2ab8 <usart_init+0x290>
    2ab6:	e77d      	b.n	29b4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2ab8:	2380      	movs	r3, #128	; 0x80
    2aba:	04db      	lsls	r3, r3, #19
    2abc:	431f      	orrs	r7, r3
    2abe:	e779      	b.n	29b4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2ac0:	0020      	movs	r0, r4
    2ac2:	4b25      	ldr	r3, [pc, #148]	; (2b58 <usart_init+0x330>)
    2ac4:	4798      	blx	r3
    2ac6:	e007      	b.n	2ad8 <usart_init+0x2b0>
    2ac8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2aca:	2f04      	cmp	r7, #4
    2acc:	d00d      	beq.n	2aea <usart_init+0x2c2>
    2ace:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2ad0:	00bb      	lsls	r3, r7, #2
    2ad2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2ad4:	2800      	cmp	r0, #0
    2ad6:	d0f3      	beq.n	2ac0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2ad8:	1c43      	adds	r3, r0, #1
    2ada:	d0f5      	beq.n	2ac8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2adc:	a90e      	add	r1, sp, #56	; 0x38
    2ade:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2ae0:	0c00      	lsrs	r0, r0, #16
    2ae2:	b2c0      	uxtb	r0, r0
    2ae4:	4b1d      	ldr	r3, [pc, #116]	; (2b5c <usart_init+0x334>)
    2ae6:	4798      	blx	r3
    2ae8:	e7ee      	b.n	2ac8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2aea:	2300      	movs	r3, #0
    2aec:	60eb      	str	r3, [r5, #12]
    2aee:	612b      	str	r3, [r5, #16]
    2af0:	616b      	str	r3, [r5, #20]
    2af2:	61ab      	str	r3, [r5, #24]
    2af4:	61eb      	str	r3, [r5, #28]
    2af6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2af8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2afa:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2afc:	2200      	movs	r2, #0
    2afe:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2b00:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2b02:	3330      	adds	r3, #48	; 0x30
    2b04:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2b06:	3301      	adds	r3, #1
    2b08:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2b0a:	3301      	adds	r3, #1
    2b0c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2b0e:	3301      	adds	r3, #1
    2b10:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2b12:	6828      	ldr	r0, [r5, #0]
    2b14:	4b07      	ldr	r3, [pc, #28]	; (2b34 <usart_init+0x30c>)
    2b16:	4798      	blx	r3
    2b18:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2b1a:	4911      	ldr	r1, [pc, #68]	; (2b60 <usart_init+0x338>)
    2b1c:	4b11      	ldr	r3, [pc, #68]	; (2b64 <usart_init+0x33c>)
    2b1e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2b20:	00a4      	lsls	r4, r4, #2
    2b22:	4b11      	ldr	r3, [pc, #68]	; (2b68 <usart_init+0x340>)
    2b24:	50e5      	str	r5, [r4, r3]
	return status_code;
    2b26:	2000      	movs	r0, #0
    2b28:	e691      	b.n	284e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2b2a:	2310      	movs	r3, #16
    2b2c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2b2e:	2300      	movs	r3, #0
    2b30:	9307      	str	r3, [sp, #28]
    2b32:	e6e8      	b.n	2906 <usart_init+0xde>
    2b34:	000058f9 	.word	0x000058f9
    2b38:	40000400 	.word	0x40000400
    2b3c:	00006e19 	.word	0x00006e19
    2b40:	00006d8d 	.word	0x00006d8d
    2b44:	00005735 	.word	0x00005735
    2b48:	41002000 	.word	0x41002000
    2b4c:	00006e35 	.word	0x00006e35
    2b50:	00005677 	.word	0x00005677
    2b54:	000056a1 	.word	0x000056a1
    2b58:	00005781 	.word	0x00005781
    2b5c:	00006f11 	.word	0x00006f11
    2b60:	00002c09 	.word	0x00002c09
    2b64:	0000275d 	.word	0x0000275d
    2b68:	20000410 	.word	0x20000410

00002b6c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2b6c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2b6e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2b70:	2a00      	cmp	r2, #0
    2b72:	d101      	bne.n	2b78 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2b74:	0018      	movs	r0, r3
    2b76:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2b78:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2b7a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2b7c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2b7e:	2a00      	cmp	r2, #0
    2b80:	d1f8      	bne.n	2b74 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b82:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b84:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2b86:	2a00      	cmp	r2, #0
    2b88:	d1fc      	bne.n	2b84 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2b8a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2b8c:	2102      	movs	r1, #2
    2b8e:	7e1a      	ldrb	r2, [r3, #24]
    2b90:	420a      	tst	r2, r1
    2b92:	d0fc      	beq.n	2b8e <usart_write_wait+0x22>
	return STATUS_OK;
    2b94:	2300      	movs	r3, #0
    2b96:	e7ed      	b.n	2b74 <usart_write_wait+0x8>

00002b98 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2b98:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2b9a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2b9c:	2a00      	cmp	r2, #0
    2b9e:	d101      	bne.n	2ba4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2ba0:	0018      	movs	r0, r3
    2ba2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2ba4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2ba6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2ba8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2baa:	2a00      	cmp	r2, #0
    2bac:	d1f8      	bne.n	2ba0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bae:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2bb0:	7e10      	ldrb	r0, [r2, #24]
    2bb2:	0740      	lsls	r0, r0, #29
    2bb4:	d5f4      	bpl.n	2ba0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2bb6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d1fc      	bne.n	2bb6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2bbc:	8b53      	ldrh	r3, [r2, #26]
    2bbe:	b2db      	uxtb	r3, r3
	if (error_code) {
    2bc0:	0698      	lsls	r0, r3, #26
    2bc2:	d01d      	beq.n	2c00 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2bc4:	0798      	lsls	r0, r3, #30
    2bc6:	d503      	bpl.n	2bd0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2bc8:	2302      	movs	r3, #2
    2bca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2bcc:	3318      	adds	r3, #24
    2bce:	e7e7      	b.n	2ba0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2bd0:	0758      	lsls	r0, r3, #29
    2bd2:	d503      	bpl.n	2bdc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2bd4:	2304      	movs	r3, #4
    2bd6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2bd8:	331a      	adds	r3, #26
    2bda:	e7e1      	b.n	2ba0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2bdc:	07d8      	lsls	r0, r3, #31
    2bde:	d503      	bpl.n	2be8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2be0:	2301      	movs	r3, #1
    2be2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2be4:	3312      	adds	r3, #18
    2be6:	e7db      	b.n	2ba0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2be8:	06d8      	lsls	r0, r3, #27
    2bea:	d503      	bpl.n	2bf4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2bec:	2310      	movs	r3, #16
    2bee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2bf0:	3332      	adds	r3, #50	; 0x32
    2bf2:	e7d5      	b.n	2ba0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2bf4:	069b      	lsls	r3, r3, #26
    2bf6:	d503      	bpl.n	2c00 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2bf8:	2320      	movs	r3, #32
    2bfa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2bfc:	3321      	adds	r3, #33	; 0x21
    2bfe:	e7cf      	b.n	2ba0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2c00:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2c02:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2c04:	2300      	movs	r3, #0
    2c06:	e7cb      	b.n	2ba0 <usart_read_wait+0x8>

00002c08 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2c0a:	0080      	lsls	r0, r0, #2
    2c0c:	4b62      	ldr	r3, [pc, #392]	; (2d98 <_usart_interrupt_handler+0x190>)
    2c0e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2c10:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c12:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2c14:	2b00      	cmp	r3, #0
    2c16:	d1fc      	bne.n	2c12 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2c18:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2c1a:	7da6      	ldrb	r6, [r4, #22]
    2c1c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2c1e:	2330      	movs	r3, #48	; 0x30
    2c20:	5ceb      	ldrb	r3, [r5, r3]
    2c22:	2231      	movs	r2, #49	; 0x31
    2c24:	5caf      	ldrb	r7, [r5, r2]
    2c26:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2c28:	07f3      	lsls	r3, r6, #31
    2c2a:	d522      	bpl.n	2c72 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2c2c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2c2e:	b29b      	uxth	r3, r3
    2c30:	2b00      	cmp	r3, #0
    2c32:	d01c      	beq.n	2c6e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2c34:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2c36:	7813      	ldrb	r3, [r2, #0]
    2c38:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2c3a:	1c51      	adds	r1, r2, #1
    2c3c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2c3e:	7969      	ldrb	r1, [r5, #5]
    2c40:	2901      	cmp	r1, #1
    2c42:	d00e      	beq.n	2c62 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2c44:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2c46:	05db      	lsls	r3, r3, #23
    2c48:	0ddb      	lsrs	r3, r3, #23
    2c4a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2c4c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2c4e:	3b01      	subs	r3, #1
    2c50:	b29b      	uxth	r3, r3
    2c52:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2c54:	2b00      	cmp	r3, #0
    2c56:	d10c      	bne.n	2c72 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c58:	3301      	adds	r3, #1
    2c5a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2c5c:	3301      	adds	r3, #1
    2c5e:	75a3      	strb	r3, [r4, #22]
    2c60:	e007      	b.n	2c72 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2c62:	7851      	ldrb	r1, [r2, #1]
    2c64:	0209      	lsls	r1, r1, #8
    2c66:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2c68:	3202      	adds	r2, #2
    2c6a:	62aa      	str	r2, [r5, #40]	; 0x28
    2c6c:	e7eb      	b.n	2c46 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c6e:	2301      	movs	r3, #1
    2c70:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2c72:	07b3      	lsls	r3, r6, #30
    2c74:	d506      	bpl.n	2c84 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2c76:	2302      	movs	r3, #2
    2c78:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2c7a:	2200      	movs	r2, #0
    2c7c:	3331      	adds	r3, #49	; 0x31
    2c7e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2c80:	07fb      	lsls	r3, r7, #31
    2c82:	d41a      	bmi.n	2cba <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2c84:	0773      	lsls	r3, r6, #29
    2c86:	d565      	bpl.n	2d54 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2c88:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2c8a:	b29b      	uxth	r3, r3
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d05f      	beq.n	2d50 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c90:	8b63      	ldrh	r3, [r4, #26]
    2c92:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c94:	071a      	lsls	r2, r3, #28
    2c96:	d414      	bmi.n	2cc2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c98:	223f      	movs	r2, #63	; 0x3f
    2c9a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d034      	beq.n	2d0a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2ca0:	079a      	lsls	r2, r3, #30
    2ca2:	d511      	bpl.n	2cc8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2ca4:	221a      	movs	r2, #26
    2ca6:	2332      	movs	r3, #50	; 0x32
    2ca8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2caa:	3b30      	subs	r3, #48	; 0x30
    2cac:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2cae:	077b      	lsls	r3, r7, #29
    2cb0:	d550      	bpl.n	2d54 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2cb2:	0028      	movs	r0, r5
    2cb4:	696b      	ldr	r3, [r5, #20]
    2cb6:	4798      	blx	r3
    2cb8:	e04c      	b.n	2d54 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2cba:	0028      	movs	r0, r5
    2cbc:	68eb      	ldr	r3, [r5, #12]
    2cbe:	4798      	blx	r3
    2cc0:	e7e0      	b.n	2c84 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2cc2:	2237      	movs	r2, #55	; 0x37
    2cc4:	4013      	ands	r3, r2
    2cc6:	e7e9      	b.n	2c9c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2cc8:	075a      	lsls	r2, r3, #29
    2cca:	d505      	bpl.n	2cd8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2ccc:	221e      	movs	r2, #30
    2cce:	2332      	movs	r3, #50	; 0x32
    2cd0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2cd2:	3b2e      	subs	r3, #46	; 0x2e
    2cd4:	8363      	strh	r3, [r4, #26]
    2cd6:	e7ea      	b.n	2cae <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2cd8:	07da      	lsls	r2, r3, #31
    2cda:	d505      	bpl.n	2ce8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2cdc:	2213      	movs	r2, #19
    2cde:	2332      	movs	r3, #50	; 0x32
    2ce0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2ce2:	3b31      	subs	r3, #49	; 0x31
    2ce4:	8363      	strh	r3, [r4, #26]
    2ce6:	e7e2      	b.n	2cae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2ce8:	06da      	lsls	r2, r3, #27
    2cea:	d505      	bpl.n	2cf8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2cec:	2242      	movs	r2, #66	; 0x42
    2cee:	2332      	movs	r3, #50	; 0x32
    2cf0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cf2:	3b22      	subs	r3, #34	; 0x22
    2cf4:	8363      	strh	r3, [r4, #26]
    2cf6:	e7da      	b.n	2cae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2cf8:	2220      	movs	r2, #32
    2cfa:	421a      	tst	r2, r3
    2cfc:	d0d7      	beq.n	2cae <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2cfe:	3221      	adds	r2, #33	; 0x21
    2d00:	2332      	movs	r3, #50	; 0x32
    2d02:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2d04:	3b12      	subs	r3, #18
    2d06:	8363      	strh	r3, [r4, #26]
    2d08:	e7d1      	b.n	2cae <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2d0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2d0c:	05db      	lsls	r3, r3, #23
    2d0e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2d10:	b2da      	uxtb	r2, r3
    2d12:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2d14:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2d16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2d18:	1c51      	adds	r1, r2, #1
    2d1a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d1c:	7969      	ldrb	r1, [r5, #5]
    2d1e:	2901      	cmp	r1, #1
    2d20:	d010      	beq.n	2d44 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2d22:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2d24:	3b01      	subs	r3, #1
    2d26:	b29b      	uxth	r3, r3
    2d28:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d112      	bne.n	2d54 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d2e:	3304      	adds	r3, #4
    2d30:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2d32:	2200      	movs	r2, #0
    2d34:	332e      	adds	r3, #46	; 0x2e
    2d36:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2d38:	07bb      	lsls	r3, r7, #30
    2d3a:	d50b      	bpl.n	2d54 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2d3c:	0028      	movs	r0, r5
    2d3e:	692b      	ldr	r3, [r5, #16]
    2d40:	4798      	blx	r3
    2d42:	e007      	b.n	2d54 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2d44:	0a1b      	lsrs	r3, r3, #8
    2d46:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2d4a:	3301      	adds	r3, #1
    2d4c:	626b      	str	r3, [r5, #36]	; 0x24
    2d4e:	e7e8      	b.n	2d22 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d50:	2304      	movs	r3, #4
    2d52:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2d54:	06f3      	lsls	r3, r6, #27
    2d56:	d504      	bpl.n	2d62 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2d58:	2310      	movs	r3, #16
    2d5a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2d5c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2d5e:	06fb      	lsls	r3, r7, #27
    2d60:	d40e      	bmi.n	2d80 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2d62:	06b3      	lsls	r3, r6, #26
    2d64:	d504      	bpl.n	2d70 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2d66:	2320      	movs	r3, #32
    2d68:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2d6a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2d6c:	073b      	lsls	r3, r7, #28
    2d6e:	d40b      	bmi.n	2d88 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2d70:	0733      	lsls	r3, r6, #28
    2d72:	d504      	bpl.n	2d7e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2d74:	2308      	movs	r3, #8
    2d76:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2d78:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2d7a:	06bb      	lsls	r3, r7, #26
    2d7c:	d408      	bmi.n	2d90 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2d80:	0028      	movs	r0, r5
    2d82:	69eb      	ldr	r3, [r5, #28]
    2d84:	4798      	blx	r3
    2d86:	e7ec      	b.n	2d62 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2d88:	0028      	movs	r0, r5
    2d8a:	69ab      	ldr	r3, [r5, #24]
    2d8c:	4798      	blx	r3
    2d8e:	e7ef      	b.n	2d70 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2d90:	6a2b      	ldr	r3, [r5, #32]
    2d92:	0028      	movs	r0, r5
    2d94:	4798      	blx	r3
}
    2d96:	e7f2      	b.n	2d7e <_usart_interrupt_handler+0x176>
    2d98:	20000410 	.word	0x20000410

00002d9c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d9c:	b510      	push	{r4, lr}
	switch (clock_source) {
    2d9e:	2808      	cmp	r0, #8
    2da0:	d803      	bhi.n	2daa <system_clock_source_get_hz+0xe>
    2da2:	0080      	lsls	r0, r0, #2
    2da4:	4b1e      	ldr	r3, [pc, #120]	; (2e20 <system_clock_source_get_hz+0x84>)
    2da6:	581b      	ldr	r3, [r3, r0]
    2da8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2daa:	2000      	movs	r0, #0
    2dac:	e036      	b.n	2e1c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    2dae:	4b1d      	ldr	r3, [pc, #116]	; (2e24 <system_clock_source_get_hz+0x88>)
    2db0:	6918      	ldr	r0, [r3, #16]
    2db2:	e033      	b.n	2e1c <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2db4:	4b1c      	ldr	r3, [pc, #112]	; (2e28 <system_clock_source_get_hz+0x8c>)
    2db6:	6a1b      	ldr	r3, [r3, #32]
    2db8:	059b      	lsls	r3, r3, #22
    2dba:	0f9b      	lsrs	r3, r3, #30
    2dbc:	481b      	ldr	r0, [pc, #108]	; (2e2c <system_clock_source_get_hz+0x90>)
    2dbe:	40d8      	lsrs	r0, r3
    2dc0:	e02c      	b.n	2e1c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2dc2:	4b18      	ldr	r3, [pc, #96]	; (2e24 <system_clock_source_get_hz+0x88>)
    2dc4:	6958      	ldr	r0, [r3, #20]
    2dc6:	e029      	b.n	2e1c <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2dc8:	4b16      	ldr	r3, [pc, #88]	; (2e24 <system_clock_source_get_hz+0x88>)
    2dca:	681b      	ldr	r3, [r3, #0]
			return 0;
    2dcc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2dce:	079b      	lsls	r3, r3, #30
    2dd0:	d524      	bpl.n	2e1c <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2dd2:	4915      	ldr	r1, [pc, #84]	; (2e28 <system_clock_source_get_hz+0x8c>)
    2dd4:	2210      	movs	r2, #16
    2dd6:	68cb      	ldr	r3, [r1, #12]
    2dd8:	421a      	tst	r2, r3
    2dda:	d0fc      	beq.n	2dd6 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2ddc:	4b11      	ldr	r3, [pc, #68]	; (2e24 <system_clock_source_get_hz+0x88>)
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	075b      	lsls	r3, r3, #29
    2de2:	d401      	bmi.n	2de8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2de4:	4812      	ldr	r0, [pc, #72]	; (2e30 <system_clock_source_get_hz+0x94>)
    2de6:	e019      	b.n	2e1c <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2de8:	4b0e      	ldr	r3, [pc, #56]	; (2e24 <system_clock_source_get_hz+0x88>)
    2dea:	681b      	ldr	r3, [r3, #0]
    2dec:	069b      	lsls	r3, r3, #26
    2dee:	d501      	bpl.n	2df4 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2df0:	480f      	ldr	r0, [pc, #60]	; (2e30 <system_clock_source_get_hz+0x94>)
    2df2:	e013      	b.n	2e1c <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2df4:	2000      	movs	r0, #0
    2df6:	4b0f      	ldr	r3, [pc, #60]	; (2e34 <system_clock_source_get_hz+0x98>)
    2df8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2dfa:	4b0a      	ldr	r3, [pc, #40]	; (2e24 <system_clock_source_get_hz+0x88>)
    2dfc:	689b      	ldr	r3, [r3, #8]
    2dfe:	041b      	lsls	r3, r3, #16
    2e00:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2e02:	4358      	muls	r0, r3
    2e04:	e00a      	b.n	2e1c <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2e06:	2350      	movs	r3, #80	; 0x50
    2e08:	4a07      	ldr	r2, [pc, #28]	; (2e28 <system_clock_source_get_hz+0x8c>)
    2e0a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2e0c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2e0e:	075b      	lsls	r3, r3, #29
    2e10:	d504      	bpl.n	2e1c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2e12:	4b04      	ldr	r3, [pc, #16]	; (2e24 <system_clock_source_get_hz+0x88>)
    2e14:	68d8      	ldr	r0, [r3, #12]
    2e16:	e001      	b.n	2e1c <system_clock_source_get_hz+0x80>
		return 32768UL;
    2e18:	2080      	movs	r0, #128	; 0x80
    2e1a:	0200      	lsls	r0, r0, #8
	}
}
    2e1c:	bd10      	pop	{r4, pc}
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	00008c9c 	.word	0x00008c9c
    2e24:	2000021c 	.word	0x2000021c
    2e28:	40000800 	.word	0x40000800
    2e2c:	007a1200 	.word	0x007a1200
    2e30:	02dc6c00 	.word	0x02dc6c00
    2e34:	00006e35 	.word	0x00006e35

00002e38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2e38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2e3a:	490c      	ldr	r1, [pc, #48]	; (2e6c <system_clock_source_osc8m_set_config+0x34>)
    2e3c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2e3e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2e40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2e42:	7840      	ldrb	r0, [r0, #1]
    2e44:	2201      	movs	r2, #1
    2e46:	4010      	ands	r0, r2
    2e48:	0180      	lsls	r0, r0, #6
    2e4a:	2640      	movs	r6, #64	; 0x40
    2e4c:	43b3      	bics	r3, r6
    2e4e:	4303      	orrs	r3, r0
    2e50:	402a      	ands	r2, r5
    2e52:	01d2      	lsls	r2, r2, #7
    2e54:	2080      	movs	r0, #128	; 0x80
    2e56:	4383      	bics	r3, r0
    2e58:	4313      	orrs	r3, r2
    2e5a:	2203      	movs	r2, #3
    2e5c:	4022      	ands	r2, r4
    2e5e:	0212      	lsls	r2, r2, #8
    2e60:	4803      	ldr	r0, [pc, #12]	; (2e70 <system_clock_source_osc8m_set_config+0x38>)
    2e62:	4003      	ands	r3, r0
    2e64:	4313      	orrs	r3, r2
    2e66:	620b      	str	r3, [r1, #32]
}
    2e68:	bd70      	pop	{r4, r5, r6, pc}
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	40000800 	.word	0x40000800
    2e70:	fffffcff 	.word	0xfffffcff

00002e74 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e76:	46ce      	mov	lr, r9
    2e78:	4647      	mov	r7, r8
    2e7a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2e7c:	4b19      	ldr	r3, [pc, #100]	; (2ee4 <system_clock_source_osc32k_set_config+0x70>)
    2e7e:	4699      	mov	r9, r3
    2e80:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2e82:	7841      	ldrb	r1, [r0, #1]
    2e84:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2e86:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2e88:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2e8a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2e8c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2e8e:	7880      	ldrb	r0, [r0, #2]
    2e90:	2101      	movs	r1, #1
    2e92:	4008      	ands	r0, r1
    2e94:	0080      	lsls	r0, r0, #2
    2e96:	2204      	movs	r2, #4
    2e98:	4393      	bics	r3, r2
    2e9a:	4303      	orrs	r3, r0
    2e9c:	4660      	mov	r0, ip
    2e9e:	4008      	ands	r0, r1
    2ea0:	00c0      	lsls	r0, r0, #3
    2ea2:	3204      	adds	r2, #4
    2ea4:	4393      	bics	r3, r2
    2ea6:	4303      	orrs	r3, r0
    2ea8:	0038      	movs	r0, r7
    2eaa:	4008      	ands	r0, r1
    2eac:	0180      	lsls	r0, r0, #6
    2eae:	2740      	movs	r7, #64	; 0x40
    2eb0:	43bb      	bics	r3, r7
    2eb2:	4303      	orrs	r3, r0
    2eb4:	0030      	movs	r0, r6
    2eb6:	4008      	ands	r0, r1
    2eb8:	01c0      	lsls	r0, r0, #7
    2eba:	2680      	movs	r6, #128	; 0x80
    2ebc:	43b3      	bics	r3, r6
    2ebe:	4303      	orrs	r3, r0
    2ec0:	2007      	movs	r0, #7
    2ec2:	4005      	ands	r5, r0
    2ec4:	022d      	lsls	r5, r5, #8
    2ec6:	4808      	ldr	r0, [pc, #32]	; (2ee8 <system_clock_source_osc32k_set_config+0x74>)
    2ec8:	4003      	ands	r3, r0
    2eca:	432b      	orrs	r3, r5
    2ecc:	4021      	ands	r1, r4
    2ece:	0309      	lsls	r1, r1, #12
    2ed0:	4806      	ldr	r0, [pc, #24]	; (2eec <system_clock_source_osc32k_set_config+0x78>)
    2ed2:	4003      	ands	r3, r0
    2ed4:	430b      	orrs	r3, r1
    2ed6:	464a      	mov	r2, r9
    2ed8:	6193      	str	r3, [r2, #24]
}
    2eda:	bc0c      	pop	{r2, r3}
    2edc:	4690      	mov	r8, r2
    2ede:	4699      	mov	r9, r3
    2ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	40000800 	.word	0x40000800
    2ee8:	fffff8ff 	.word	0xfffff8ff
    2eec:	ffffefff 	.word	0xffffefff

00002ef0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2ef0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2ef2:	7a03      	ldrb	r3, [r0, #8]
    2ef4:	069b      	lsls	r3, r3, #26
    2ef6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2ef8:	8942      	ldrh	r2, [r0, #10]
    2efa:	0592      	lsls	r2, r2, #22
    2efc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2efe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2f00:	4918      	ldr	r1, [pc, #96]	; (2f64 <system_clock_source_dfll_set_config+0x74>)
    2f02:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2f04:	7983      	ldrb	r3, [r0, #6]
    2f06:	79c2      	ldrb	r2, [r0, #7]
    2f08:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2f0a:	8842      	ldrh	r2, [r0, #2]
    2f0c:	8884      	ldrh	r4, [r0, #4]
    2f0e:	4322      	orrs	r2, r4
    2f10:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2f12:	7842      	ldrb	r2, [r0, #1]
    2f14:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2f16:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2f18:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2f1a:	7803      	ldrb	r3, [r0, #0]
    2f1c:	2b04      	cmp	r3, #4
    2f1e:	d011      	beq.n	2f44 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2f20:	2b20      	cmp	r3, #32
    2f22:	d10e      	bne.n	2f42 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2f24:	7b03      	ldrb	r3, [r0, #12]
    2f26:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2f28:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2f2a:	4313      	orrs	r3, r2
    2f2c:	89c2      	ldrh	r2, [r0, #14]
    2f2e:	0412      	lsls	r2, r2, #16
    2f30:	490d      	ldr	r1, [pc, #52]	; (2f68 <system_clock_source_dfll_set_config+0x78>)
    2f32:	400a      	ands	r2, r1
    2f34:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2f36:	4a0b      	ldr	r2, [pc, #44]	; (2f64 <system_clock_source_dfll_set_config+0x74>)
    2f38:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2f3a:	6811      	ldr	r1, [r2, #0]
    2f3c:	4b0b      	ldr	r3, [pc, #44]	; (2f6c <system_clock_source_dfll_set_config+0x7c>)
    2f3e:	430b      	orrs	r3, r1
    2f40:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2f42:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2f44:	7b03      	ldrb	r3, [r0, #12]
    2f46:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2f48:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2f4a:	4313      	orrs	r3, r2
    2f4c:	89c2      	ldrh	r2, [r0, #14]
    2f4e:	0412      	lsls	r2, r2, #16
    2f50:	4905      	ldr	r1, [pc, #20]	; (2f68 <system_clock_source_dfll_set_config+0x78>)
    2f52:	400a      	ands	r2, r1
    2f54:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2f56:	4a03      	ldr	r2, [pc, #12]	; (2f64 <system_clock_source_dfll_set_config+0x74>)
    2f58:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2f5a:	6813      	ldr	r3, [r2, #0]
    2f5c:	2104      	movs	r1, #4
    2f5e:	430b      	orrs	r3, r1
    2f60:	6013      	str	r3, [r2, #0]
    2f62:	e7ee      	b.n	2f42 <system_clock_source_dfll_set_config+0x52>
    2f64:	2000021c 	.word	0x2000021c
    2f68:	03ff0000 	.word	0x03ff0000
    2f6c:	00000424 	.word	0x00000424

00002f70 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f70:	2808      	cmp	r0, #8
    2f72:	d803      	bhi.n	2f7c <system_clock_source_enable+0xc>
    2f74:	0080      	lsls	r0, r0, #2
    2f76:	4b25      	ldr	r3, [pc, #148]	; (300c <system_clock_source_enable+0x9c>)
    2f78:	581b      	ldr	r3, [r3, r0]
    2f7a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f7c:	2017      	movs	r0, #23
    2f7e:	e044      	b.n	300a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f80:	4a23      	ldr	r2, [pc, #140]	; (3010 <system_clock_source_enable+0xa0>)
    2f82:	6a13      	ldr	r3, [r2, #32]
    2f84:	2102      	movs	r1, #2
    2f86:	430b      	orrs	r3, r1
    2f88:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f8a:	2000      	movs	r0, #0
    2f8c:	e03d      	b.n	300a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f8e:	4a20      	ldr	r2, [pc, #128]	; (3010 <system_clock_source_enable+0xa0>)
    2f90:	6993      	ldr	r3, [r2, #24]
    2f92:	2102      	movs	r1, #2
    2f94:	430b      	orrs	r3, r1
    2f96:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f98:	2000      	movs	r0, #0
		break;
    2f9a:	e036      	b.n	300a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f9c:	4a1c      	ldr	r2, [pc, #112]	; (3010 <system_clock_source_enable+0xa0>)
    2f9e:	8a13      	ldrh	r3, [r2, #16]
    2fa0:	2102      	movs	r1, #2
    2fa2:	430b      	orrs	r3, r1
    2fa4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2fa6:	2000      	movs	r0, #0
		break;
    2fa8:	e02f      	b.n	300a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2faa:	4a19      	ldr	r2, [pc, #100]	; (3010 <system_clock_source_enable+0xa0>)
    2fac:	8a93      	ldrh	r3, [r2, #20]
    2fae:	2102      	movs	r1, #2
    2fb0:	430b      	orrs	r3, r1
    2fb2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2fb4:	2000      	movs	r0, #0
		break;
    2fb6:	e028      	b.n	300a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2fb8:	4916      	ldr	r1, [pc, #88]	; (3014 <system_clock_source_enable+0xa4>)
    2fba:	680b      	ldr	r3, [r1, #0]
    2fbc:	2202      	movs	r2, #2
    2fbe:	4313      	orrs	r3, r2
    2fc0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2fc2:	4b13      	ldr	r3, [pc, #76]	; (3010 <system_clock_source_enable+0xa0>)
    2fc4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2fc6:	0019      	movs	r1, r3
    2fc8:	320e      	adds	r2, #14
    2fca:	68cb      	ldr	r3, [r1, #12]
    2fcc:	421a      	tst	r2, r3
    2fce:	d0fc      	beq.n	2fca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2fd0:	4a10      	ldr	r2, [pc, #64]	; (3014 <system_clock_source_enable+0xa4>)
    2fd2:	6891      	ldr	r1, [r2, #8]
    2fd4:	4b0e      	ldr	r3, [pc, #56]	; (3010 <system_clock_source_enable+0xa0>)
    2fd6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2fd8:	6852      	ldr	r2, [r2, #4]
    2fda:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2fdc:	2200      	movs	r2, #0
    2fde:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2fe0:	0019      	movs	r1, r3
    2fe2:	3210      	adds	r2, #16
    2fe4:	68cb      	ldr	r3, [r1, #12]
    2fe6:	421a      	tst	r2, r3
    2fe8:	d0fc      	beq.n	2fe4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2fea:	4b0a      	ldr	r3, [pc, #40]	; (3014 <system_clock_source_enable+0xa4>)
    2fec:	681b      	ldr	r3, [r3, #0]
    2fee:	b29b      	uxth	r3, r3
    2ff0:	4a07      	ldr	r2, [pc, #28]	; (3010 <system_clock_source_enable+0xa0>)
    2ff2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2ff4:	2000      	movs	r0, #0
    2ff6:	e008      	b.n	300a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2ff8:	4905      	ldr	r1, [pc, #20]	; (3010 <system_clock_source_enable+0xa0>)
    2ffa:	2244      	movs	r2, #68	; 0x44
    2ffc:	5c8b      	ldrb	r3, [r1, r2]
    2ffe:	2002      	movs	r0, #2
    3000:	4303      	orrs	r3, r0
    3002:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3004:	2000      	movs	r0, #0
		break;
    3006:	e000      	b.n	300a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3008:	2000      	movs	r0, #0
}
    300a:	4770      	bx	lr
    300c:	00008cc0 	.word	0x00008cc0
    3010:	40000800 	.word	0x40000800
    3014:	2000021c 	.word	0x2000021c

00003018 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    301c:	22c2      	movs	r2, #194	; 0xc2
    301e:	00d2      	lsls	r2, r2, #3
    3020:	4b42      	ldr	r3, [pc, #264]	; (312c <system_clock_init+0x114>)
    3022:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3024:	4a42      	ldr	r2, [pc, #264]	; (3130 <system_clock_init+0x118>)
    3026:	6853      	ldr	r3, [r2, #4]
    3028:	211e      	movs	r1, #30
    302a:	438b      	bics	r3, r1
    302c:	391a      	subs	r1, #26
    302e:	430b      	orrs	r3, r1
    3030:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3032:	2201      	movs	r2, #1
    3034:	ab01      	add	r3, sp, #4
    3036:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3038:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    303a:	4d3e      	ldr	r5, [pc, #248]	; (3134 <system_clock_init+0x11c>)
    303c:	b2e0      	uxtb	r0, r4
    303e:	a901      	add	r1, sp, #4
    3040:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3042:	3401      	adds	r4, #1
    3044:	2c25      	cmp	r4, #37	; 0x25
    3046:	d1f9      	bne.n	303c <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    3048:	4c3b      	ldr	r4, [pc, #236]	; (3138 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    304a:	6823      	ldr	r3, [r4, #0]
    304c:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    304e:	4937      	ldr	r1, [pc, #220]	; (312c <system_clock_init+0x114>)
    3050:	698a      	ldr	r2, [r1, #24]
    3052:	0e5b      	lsrs	r3, r3, #25
    3054:	041b      	lsls	r3, r3, #16
    3056:	4839      	ldr	r0, [pc, #228]	; (313c <system_clock_init+0x124>)
    3058:	4002      	ands	r2, r0
    305a:	4313      	orrs	r3, r2
    305c:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    305e:	a80a      	add	r0, sp, #40	; 0x28
    3060:	2301      	movs	r3, #1
    3062:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    3064:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    3066:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    3068:	2207      	movs	r2, #7
    306a:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    306c:	2500      	movs	r5, #0
    306e:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    3070:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    3072:	4b33      	ldr	r3, [pc, #204]	; (3140 <system_clock_init+0x128>)
    3074:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    3076:	2004      	movs	r0, #4
    3078:	4b32      	ldr	r3, [pc, #200]	; (3144 <system_clock_init+0x12c>)
    307a:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    307c:	ab05      	add	r3, sp, #20
    307e:	2200      	movs	r2, #0
    3080:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3082:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3084:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3086:	2120      	movs	r1, #32
    3088:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    308a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    308c:	6823      	ldr	r3, [r4, #0]
    308e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3090:	2b3f      	cmp	r3, #63	; 0x3f
    3092:	d049      	beq.n	3128 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3094:	a805      	add	r0, sp, #20
    3096:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3098:	2307      	movs	r3, #7
    309a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    309c:	3303      	adds	r3, #3
    309e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    30a0:	4b29      	ldr	r3, [pc, #164]	; (3148 <system_clock_init+0x130>)
    30a2:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    30a4:	3bff      	subs	r3, #255	; 0xff
    30a6:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    30a8:	4b28      	ldr	r3, [pc, #160]	; (314c <system_clock_init+0x134>)
    30aa:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    30ac:	4b28      	ldr	r3, [pc, #160]	; (3150 <system_clock_init+0x138>)
    30ae:	4798      	blx	r3
	config->run_in_standby  = false;
    30b0:	a804      	add	r0, sp, #16
    30b2:	2400      	movs	r4, #0
    30b4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    30b6:	2501      	movs	r5, #1
    30b8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    30ba:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    30bc:	4b25      	ldr	r3, [pc, #148]	; (3154 <system_clock_init+0x13c>)
    30be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    30c0:	2006      	movs	r0, #6
    30c2:	4e20      	ldr	r6, [pc, #128]	; (3144 <system_clock_init+0x12c>)
    30c4:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    30c6:	4b24      	ldr	r3, [pc, #144]	; (3158 <system_clock_init+0x140>)
    30c8:	4798      	blx	r3
	config->division_factor    = 1;
    30ca:	a901      	add	r1, sp, #4
    30cc:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    30ce:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    30d0:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    30d2:	2304      	movs	r3, #4
    30d4:	700b      	strb	r3, [r1, #0]
    30d6:	720d      	strb	r5, [r1, #8]
    30d8:	2007      	movs	r0, #7
    30da:	4b20      	ldr	r3, [pc, #128]	; (315c <system_clock_init+0x144>)
    30dc:	4798      	blx	r3
    30de:	2007      	movs	r0, #7
    30e0:	4b1f      	ldr	r3, [pc, #124]	; (3160 <system_clock_init+0x148>)
    30e2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    30e4:	2007      	movs	r0, #7
    30e6:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    30e8:	4910      	ldr	r1, [pc, #64]	; (312c <system_clock_init+0x114>)
    30ea:	2210      	movs	r2, #16
    30ec:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    30ee:	421a      	tst	r2, r3
    30f0:	d0fc      	beq.n	30ec <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    30f2:	4a0e      	ldr	r2, [pc, #56]	; (312c <system_clock_init+0x114>)
    30f4:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    30f6:	2180      	movs	r1, #128	; 0x80
    30f8:	430b      	orrs	r3, r1
    30fa:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    30fc:	4a19      	ldr	r2, [pc, #100]	; (3164 <system_clock_init+0x14c>)
    30fe:	2300      	movs	r3, #0
    3100:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3102:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3104:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3106:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3108:	a901      	add	r1, sp, #4
    310a:	2201      	movs	r2, #1
    310c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    310e:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    3110:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3112:	3307      	adds	r3, #7
    3114:	700b      	strb	r3, [r1, #0]
    3116:	720a      	strb	r2, [r1, #8]
    3118:	2000      	movs	r0, #0
    311a:	4b10      	ldr	r3, [pc, #64]	; (315c <system_clock_init+0x144>)
    311c:	4798      	blx	r3
    311e:	2000      	movs	r0, #0
    3120:	4b0f      	ldr	r3, [pc, #60]	; (3160 <system_clock_init+0x148>)
    3122:	4798      	blx	r3
#endif
}
    3124:	b00c      	add	sp, #48	; 0x30
    3126:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    3128:	3b20      	subs	r3, #32
    312a:	e7b3      	b.n	3094 <system_clock_init+0x7c>
    312c:	40000800 	.word	0x40000800
    3130:	41004000 	.word	0x41004000
    3134:	00006e19 	.word	0x00006e19
    3138:	00806024 	.word	0x00806024
    313c:	ff80ffff 	.word	0xff80ffff
    3140:	00002e75 	.word	0x00002e75
    3144:	00002f71 	.word	0x00002f71
    3148:	000001ff 	.word	0x000001ff
    314c:	ffffbb80 	.word	0xffffbb80
    3150:	00002ef1 	.word	0x00002ef1
    3154:	00002e39 	.word	0x00002e39
    3158:	00006be1 	.word	0x00006be1
    315c:	00006c05 	.word	0x00006c05
    3160:	00006cbd 	.word	0x00006cbd
    3164:	40000400 	.word	0x40000400

00003168 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3168:	b510      	push	{r4, lr}
    316a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    316c:	ab03      	add	r3, sp, #12
    316e:	2200      	movs	r2, #0
    3170:	701a      	strb	r2, [r3, #0]
    3172:	3203      	adds	r2, #3
    3174:	705a      	strb	r2, [r3, #1]
    3176:	3a01      	subs	r2, #1
    3178:	709a      	strb	r2, [r3, #2]
    317a:	3a01      	subs	r2, #1
    317c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    317e:	4b27      	ldr	r3, [pc, #156]	; (321c <udd_sleep_mode+0xb4>)
    3180:	781b      	ldrb	r3, [r3, #0]
    3182:	4283      	cmp	r3, r0
    3184:	d007      	beq.n	3196 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    3186:	2800      	cmp	r0, #0
    3188:	d107      	bne.n	319a <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    318a:	4b24      	ldr	r3, [pc, #144]	; (321c <udd_sleep_mode+0xb4>)
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	2b00      	cmp	r3, #0
    3190:	d123      	bne.n	31da <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    3192:	4b22      	ldr	r3, [pc, #136]	; (321c <udd_sleep_mode+0xb4>)
    3194:	7018      	strb	r0, [r3, #0]
}
    3196:	b004      	add	sp, #16
    3198:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    319a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    319c:	5c1b      	ldrb	r3, [r3, r0]
    319e:	4a20      	ldr	r2, [pc, #128]	; (3220 <udd_sleep_mode+0xb8>)
    31a0:	5cd2      	ldrb	r2, [r2, r3]
    31a2:	2aff      	cmp	r2, #255	; 0xff
    31a4:	d100      	bne.n	31a8 <udd_sleep_mode+0x40>
    31a6:	e7fe      	b.n	31a6 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31a8:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31ac:	4251      	negs	r1, r2
    31ae:	414a      	adcs	r2, r1
    31b0:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    31b2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    31b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    31b8:	2100      	movs	r1, #0
    31ba:	4a1a      	ldr	r2, [pc, #104]	; (3224 <udd_sleep_mode+0xbc>)
    31bc:	7011      	strb	r1, [r2, #0]
	return flags;
    31be:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    31c0:	4917      	ldr	r1, [pc, #92]	; (3220 <udd_sleep_mode+0xb8>)
    31c2:	5cca      	ldrb	r2, [r1, r3]
    31c4:	3201      	adds	r2, #1
    31c6:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    31c8:	2c00      	cmp	r4, #0
    31ca:	d0de      	beq.n	318a <udd_sleep_mode+0x22>
		cpu_irq_enable();
    31cc:	2201      	movs	r2, #1
    31ce:	4b15      	ldr	r3, [pc, #84]	; (3224 <udd_sleep_mode+0xbc>)
    31d0:	701a      	strb	r2, [r3, #0]
    31d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31d6:	b662      	cpsie	i
    31d8:	e7d7      	b.n	318a <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    31da:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    31dc:	5cd3      	ldrb	r3, [r2, r3]
    31de:	4a10      	ldr	r2, [pc, #64]	; (3220 <udd_sleep_mode+0xb8>)
    31e0:	5cd2      	ldrb	r2, [r2, r3]
    31e2:	2a00      	cmp	r2, #0
    31e4:	d100      	bne.n	31e8 <udd_sleep_mode+0x80>
    31e6:	e7fe      	b.n	31e6 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31e8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31ec:	4251      	negs	r1, r2
    31ee:	414a      	adcs	r2, r1
    31f0:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    31f2:	b672      	cpsid	i
    31f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    31f8:	2100      	movs	r1, #0
    31fa:	4a0a      	ldr	r2, [pc, #40]	; (3224 <udd_sleep_mode+0xbc>)
    31fc:	7011      	strb	r1, [r2, #0]
	return flags;
    31fe:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3200:	4907      	ldr	r1, [pc, #28]	; (3220 <udd_sleep_mode+0xb8>)
    3202:	5cca      	ldrb	r2, [r1, r3]
    3204:	3a01      	subs	r2, #1
    3206:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    3208:	2c00      	cmp	r4, #0
    320a:	d0c2      	beq.n	3192 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    320c:	2201      	movs	r2, #1
    320e:	4b05      	ldr	r3, [pc, #20]	; (3224 <udd_sleep_mode+0xbc>)
    3210:	701a      	strb	r2, [r3, #0]
    3212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3216:	b662      	cpsie	i
    3218:	e7bb      	b.n	3192 <udd_sleep_mode+0x2a>
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	2000028c 	.word	0x2000028c
    3220:	20001058 	.word	0x20001058
    3224:	200000f9 	.word	0x200000f9

00003228 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    3228:	0643      	lsls	r3, r0, #25
    322a:	d00b      	beq.n	3244 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    322c:	230f      	movs	r3, #15
    322e:	4003      	ands	r3, r0
    3230:	005b      	lsls	r3, r3, #1
    3232:	09c0      	lsrs	r0, r0, #7
    3234:	1818      	adds	r0, r3, r0
    3236:	3802      	subs	r0, #2
    3238:	0083      	lsls	r3, r0, #2
    323a:	1818      	adds	r0, r3, r0
    323c:	0080      	lsls	r0, r0, #2
    323e:	4b02      	ldr	r3, [pc, #8]	; (3248 <udd_ep_get_job+0x20>)
    3240:	1818      	adds	r0, r3, r0
	}
}
    3242:	4770      	bx	lr
		return NULL;
    3244:	2000      	movs	r0, #0
    3246:	e7fc      	b.n	3242 <udd_ep_get_job+0x1a>
    3248:	2000023c 	.word	0x2000023c

0000324c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    324c:	b5f0      	push	{r4, r5, r6, r7, lr}
    324e:	46d6      	mov	lr, sl
    3250:	464f      	mov	r7, r9
    3252:	4646      	mov	r6, r8
    3254:	b5c0      	push	{r6, r7, lr}
    3256:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    3258:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    325a:	b26b      	sxtb	r3, r5
    325c:	2b00      	cmp	r3, #0
    325e:	db26      	blt.n	32ae <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    3260:	0028      	movs	r0, r5
    3262:	4b5e      	ldr	r3, [pc, #376]	; (33dc <udd_ep_transfer_process+0x190>)
    3264:	4798      	blx	r3
    3266:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    3268:	270f      	movs	r7, #15
    326a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    326c:	8a03      	ldrh	r3, [r0, #16]
    326e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    3270:	464b      	mov	r3, r9
    3272:	881b      	ldrh	r3, [r3, #0]
    3274:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    3276:	7c83      	ldrb	r3, [r0, #18]
    3278:	075b      	lsls	r3, r3, #29
    327a:	d46a      	bmi.n	3352 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    327c:	68e3      	ldr	r3, [r4, #12]
    327e:	4453      	add	r3, sl
    3280:	001e      	movs	r6, r3
    3282:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    3284:	68a3      	ldr	r3, [r4, #8]
    3286:	429e      	cmp	r6, r3
    3288:	d800      	bhi.n	328c <udd_ep_transfer_process+0x40>
    328a:	e074      	b.n	3376 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    328c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    328e:	7ca3      	ldrb	r3, [r4, #18]
    3290:	2201      	movs	r2, #1
    3292:	4393      	bics	r3, r2
    3294:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    3296:	6823      	ldr	r3, [r4, #0]
    3298:	2b00      	cmp	r3, #0
    329a:	d003      	beq.n	32a4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    329c:	68e1      	ldr	r1, [r4, #12]
    329e:	002a      	movs	r2, r5
    32a0:	2000      	movs	r0, #0
    32a2:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    32a4:	bc1c      	pop	{r2, r3, r4}
    32a6:	4690      	mov	r8, r2
    32a8:	4699      	mov	r9, r3
    32aa:	46a2      	mov	sl, r4
    32ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    32ae:	0028      	movs	r0, r5
    32b0:	4b4a      	ldr	r3, [pc, #296]	; (33dc <udd_ep_transfer_process+0x190>)
    32b2:	4798      	blx	r3
    32b4:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    32b6:	270f      	movs	r7, #15
    32b8:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    32ba:	8a03      	ldrh	r3, [r0, #16]
    32bc:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    32be:	464b      	mov	r3, r9
    32c0:	885e      	ldrh	r6, [r3, #2]
    32c2:	68c3      	ldr	r3, [r0, #12]
    32c4:	469c      	mov	ip, r3
    32c6:	4466      	add	r6, ip
    32c8:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    32ca:	6881      	ldr	r1, [r0, #8]
    32cc:	428e      	cmp	r6, r1
    32ce:	d025      	beq.n	331c <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    32d0:	1b8d      	subs	r5, r1, r6
    32d2:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    32d4:	4b42      	ldr	r3, [pc, #264]	; (33e0 <udd_ep_transfer_process+0x194>)
    32d6:	429d      	cmp	r5, r3
    32d8:	d906      	bls.n	32e8 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    32da:	001d      	movs	r5, r3
    32dc:	4641      	mov	r1, r8
    32de:	0018      	movs	r0, r3
    32e0:	4b40      	ldr	r3, [pc, #256]	; (33e4 <udd_ep_transfer_process+0x198>)
    32e2:	4798      	blx	r3
    32e4:	1a6d      	subs	r5, r5, r1
    32e6:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    32e8:	7ca2      	ldrb	r2, [r4, #18]
    32ea:	2300      	movs	r3, #0
    32ec:	0792      	lsls	r2, r2, #30
    32ee:	d507      	bpl.n	3300 <udd_ep_transfer_process+0xb4>
    32f0:	4641      	mov	r1, r8
    32f2:	0028      	movs	r0, r5
    32f4:	4b3c      	ldr	r3, [pc, #240]	; (33e8 <udd_ep_transfer_process+0x19c>)
    32f6:	4798      	blx	r3
    32f8:	b289      	uxth	r1, r1
    32fa:	424b      	negs	r3, r1
    32fc:	414b      	adcs	r3, r1
    32fe:	b2db      	uxtb	r3, r3
    3300:	005b      	lsls	r3, r3, #1
    3302:	7ca2      	ldrb	r2, [r4, #18]
    3304:	2102      	movs	r1, #2
    3306:	438a      	bics	r2, r1
    3308:	4313      	orrs	r3, r2
    330a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    330c:	6862      	ldr	r2, [r4, #4]
    330e:	1992      	adds	r2, r2, r6
    3310:	002b      	movs	r3, r5
    3312:	0039      	movs	r1, r7
    3314:	4835      	ldr	r0, [pc, #212]	; (33ec <udd_ep_transfer_process+0x1a0>)
    3316:	4c36      	ldr	r4, [pc, #216]	; (33f0 <udd_ep_transfer_process+0x1a4>)
    3318:	47a0      	blx	r4
    331a:	e7c3      	b.n	32a4 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    331c:	7c83      	ldrb	r3, [r0, #18]
    331e:	079b      	lsls	r3, r3, #30
    3320:	d40b      	bmi.n	333a <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    3322:	7c83      	ldrb	r3, [r0, #18]
    3324:	2201      	movs	r2, #1
    3326:	4393      	bics	r3, r2
    3328:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    332a:	6803      	ldr	r3, [r0, #0]
    332c:	2b00      	cmp	r3, #0
    332e:	d0b9      	beq.n	32a4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3330:	002a      	movs	r2, r5
    3332:	0031      	movs	r1, r6
    3334:	2000      	movs	r0, #0
    3336:	4798      	blx	r3
    3338:	e7b4      	b.n	32a4 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    333a:	7c83      	ldrb	r3, [r0, #18]
    333c:	2202      	movs	r2, #2
    333e:	4393      	bics	r3, r2
    3340:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3342:	6842      	ldr	r2, [r0, #4]
    3344:	1992      	adds	r2, r2, r6
    3346:	2300      	movs	r3, #0
    3348:	0039      	movs	r1, r7
    334a:	4828      	ldr	r0, [pc, #160]	; (33ec <udd_ep_transfer_process+0x1a0>)
    334c:	4c28      	ldr	r4, [pc, #160]	; (33f0 <udd_ep_transfer_process+0x1a4>)
    334e:	47a0      	blx	r4
    3350:	e7a8      	b.n	32a4 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    3352:	6843      	ldr	r3, [r0, #4]
    3354:	68c2      	ldr	r2, [r0, #12]
    3356:	4694      	mov	ip, r2
    3358:	4463      	add	r3, ip
    335a:	001e      	movs	r6, r3
    335c:	4641      	mov	r1, r8
    335e:	6880      	ldr	r0, [r0, #8]
    3360:	4b21      	ldr	r3, [pc, #132]	; (33e8 <udd_ep_transfer_process+0x19c>)
    3362:	4798      	blx	r3
    3364:	000a      	movs	r2, r1
    3366:	1e7b      	subs	r3, r7, #1
    3368:	019b      	lsls	r3, r3, #6
    336a:	4922      	ldr	r1, [pc, #136]	; (33f4 <udd_ep_transfer_process+0x1a8>)
    336c:	1859      	adds	r1, r3, r1
    336e:	0030      	movs	r0, r6
    3370:	4b21      	ldr	r3, [pc, #132]	; (33f8 <udd_ep_transfer_process+0x1ac>)
    3372:	4798      	blx	r3
    3374:	e782      	b.n	327c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3376:	464a      	mov	r2, r9
    3378:	8892      	ldrh	r2, [r2, #4]
    337a:	4552      	cmp	r2, sl
    337c:	d000      	beq.n	3380 <udd_ep_transfer_process+0x134>
    337e:	e786      	b.n	328e <udd_ep_transfer_process+0x42>
    3380:	429e      	cmp	r6, r3
    3382:	d100      	bne.n	3386 <udd_ep_transfer_process+0x13a>
    3384:	e783      	b.n	328e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3386:	1b9b      	subs	r3, r3, r6
    3388:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    338a:	4b15      	ldr	r3, [pc, #84]	; (33e0 <udd_ep_transfer_process+0x194>)
    338c:	429d      	cmp	r5, r3
    338e:	d916      	bls.n	33be <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3390:	001d      	movs	r5, r3
    3392:	4641      	mov	r1, r8
    3394:	0018      	movs	r0, r3
    3396:	4b13      	ldr	r3, [pc, #76]	; (33e4 <udd_ep_transfer_process+0x198>)
    3398:	4798      	blx	r3
    339a:	1a6b      	subs	r3, r5, r1
    339c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    339e:	4598      	cmp	r8, r3
    33a0:	d914      	bls.n	33cc <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    33a2:	7ca3      	ldrb	r3, [r4, #18]
    33a4:	2204      	movs	r2, #4
    33a6:	4313      	orrs	r3, r2
    33a8:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    33aa:	1e7a      	subs	r2, r7, #1
    33ac:	0192      	lsls	r2, r2, #6
    33ae:	4b11      	ldr	r3, [pc, #68]	; (33f4 <udd_ep_transfer_process+0x1a8>)
    33b0:	18d2      	adds	r2, r2, r3
    33b2:	4643      	mov	r3, r8
    33b4:	0039      	movs	r1, r7
    33b6:	480d      	ldr	r0, [pc, #52]	; (33ec <udd_ep_transfer_process+0x1a0>)
    33b8:	4c10      	ldr	r4, [pc, #64]	; (33fc <udd_ep_transfer_process+0x1b0>)
    33ba:	47a0      	blx	r4
    33bc:	e772      	b.n	32a4 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    33be:	4641      	mov	r1, r8
    33c0:	0028      	movs	r0, r5
    33c2:	4b09      	ldr	r3, [pc, #36]	; (33e8 <udd_ep_transfer_process+0x19c>)
    33c4:	4798      	blx	r3
    33c6:	1a6b      	subs	r3, r5, r1
    33c8:	b29b      	uxth	r3, r3
    33ca:	e7e8      	b.n	339e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    33cc:	6862      	ldr	r2, [r4, #4]
    33ce:	1992      	adds	r2, r2, r6
    33d0:	0039      	movs	r1, r7
    33d2:	4806      	ldr	r0, [pc, #24]	; (33ec <udd_ep_transfer_process+0x1a0>)
    33d4:	4c09      	ldr	r4, [pc, #36]	; (33fc <udd_ep_transfer_process+0x1b0>)
    33d6:	47a0      	blx	r4
    33d8:	e764      	b.n	32a4 <udd_ep_transfer_process+0x58>
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	00003229 	.word	0x00003229
    33e0:	00001fff 	.word	0x00001fff
    33e4:	00007375 	.word	0x00007375
    33e8:	000071a1 	.word	0x000071a1
    33ec:	200004a8 	.word	0x200004a8
    33f0:	00004c3d 	.word	0x00004c3d
    33f4:	20000428 	.word	0x20000428
    33f8:	00007671 	.word	0x00007671
    33fc:	00004c91 	.word	0x00004c91

00003400 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    3400:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3402:	2205      	movs	r2, #5
    3404:	4b05      	ldr	r3, [pc, #20]	; (341c <udd_ctrl_stall_data+0x1c>)
    3406:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3408:	4c05      	ldr	r4, [pc, #20]	; (3420 <udd_ctrl_stall_data+0x20>)
    340a:	2180      	movs	r1, #128	; 0x80
    340c:	0020      	movs	r0, r4
    340e:	4b05      	ldr	r3, [pc, #20]	; (3424 <udd_ctrl_stall_data+0x24>)
    3410:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    3412:	2100      	movs	r1, #0
    3414:	0020      	movs	r0, r4
    3416:	4b04      	ldr	r3, [pc, #16]	; (3428 <udd_ctrl_stall_data+0x28>)
    3418:	4798      	blx	r3
}
    341a:	bd10      	pop	{r4, pc}
    341c:	2000023a 	.word	0x2000023a
    3420:	200004a8 	.word	0x200004a8
    3424:	00004b91 	.word	0x00004b91
    3428:	00004bb7 	.word	0x00004bb7

0000342c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    342c:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    342e:	4c08      	ldr	r4, [pc, #32]	; (3450 <_usb_device_lpm_suspend+0x24>)
    3430:	2106      	movs	r1, #6
    3432:	0020      	movs	r0, r4
    3434:	4d07      	ldr	r5, [pc, #28]	; (3454 <_usb_device_lpm_suspend+0x28>)
    3436:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3438:	2104      	movs	r1, #4
    343a:	0020      	movs	r0, r4
    343c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    343e:	2102      	movs	r1, #2
    3440:	0020      	movs	r0, r4
    3442:	4b05      	ldr	r3, [pc, #20]	; (3458 <_usb_device_lpm_suspend+0x2c>)
    3444:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3446:	2002      	movs	r0, #2
    3448:	4b04      	ldr	r3, [pc, #16]	; (345c <_usb_device_lpm_suspend+0x30>)
    344a:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    344c:	bd70      	pop	{r4, r5, r6, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	200004a8 	.word	0x200004a8
    3454:	000046a5 	.word	0x000046a5
    3458:	00004685 	.word	0x00004685
    345c:	00003169 	.word	0x00003169

00003460 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3460:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3462:	4b13      	ldr	r3, [pc, #76]	; (34b0 <_usb_on_wakeup+0x50>)
    3464:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3466:	069b      	lsls	r3, r3, #26
    3468:	d41c      	bmi.n	34a4 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    346a:	4911      	ldr	r1, [pc, #68]	; (34b0 <_usb_on_wakeup+0x50>)
    346c:	22d0      	movs	r2, #208	; 0xd0
    346e:	68cb      	ldr	r3, [r1, #12]
    3470:	4013      	ands	r3, r2
    3472:	2bd0      	cmp	r3, #208	; 0xd0
    3474:	d1fb      	bne.n	346e <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3476:	4c0f      	ldr	r4, [pc, #60]	; (34b4 <_usb_on_wakeup+0x54>)
    3478:	2102      	movs	r1, #2
    347a:	0020      	movs	r0, r4
    347c:	4b0e      	ldr	r3, [pc, #56]	; (34b8 <_usb_on_wakeup+0x58>)
    347e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3480:	2104      	movs	r1, #4
    3482:	0020      	movs	r0, r4
    3484:	4d0d      	ldr	r5, [pc, #52]	; (34bc <_usb_on_wakeup+0x5c>)
    3486:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3488:	4a0d      	ldr	r2, [pc, #52]	; (34c0 <_usb_on_wakeup+0x60>)
    348a:	2106      	movs	r1, #6
    348c:	0020      	movs	r0, r4
    348e:	4b0d      	ldr	r3, [pc, #52]	; (34c4 <_usb_on_wakeup+0x64>)
    3490:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3492:	2106      	movs	r1, #6
    3494:	0020      	movs	r0, r4
    3496:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3498:	2003      	movs	r0, #3
    349a:	4b0b      	ldr	r3, [pc, #44]	; (34c8 <_usb_on_wakeup+0x68>)
    349c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    349e:	4b0b      	ldr	r3, [pc, #44]	; (34cc <_usb_on_wakeup+0x6c>)
    34a0:	4798      	blx	r3
#endif
}
    34a2:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    34a4:	4902      	ldr	r1, [pc, #8]	; (34b0 <_usb_on_wakeup+0x50>)
    34a6:	2210      	movs	r2, #16
    34a8:	68cb      	ldr	r3, [r1, #12]
    34aa:	421a      	tst	r2, r3
    34ac:	d0fc      	beq.n	34a8 <_usb_on_wakeup+0x48>
    34ae:	e7e2      	b.n	3476 <_usb_on_wakeup+0x16>
    34b0:	40000800 	.word	0x40000800
    34b4:	200004a8 	.word	0x200004a8
    34b8:	000046a5 	.word	0x000046a5
    34bc:	00004685 	.word	0x00004685
    34c0:	0000342d 	.word	0x0000342d
    34c4:	00004661 	.word	0x00004661
    34c8:	00003169 	.word	0x00003169
    34cc:	00004185 	.word	0x00004185

000034d0 <_usb_on_bus_reset>:
{
    34d0:	b530      	push	{r4, r5, lr}
    34d2:	b083      	sub	sp, #12
    34d4:	0004      	movs	r4, r0
	udc_reset();
    34d6:	4b1e      	ldr	r3, [pc, #120]	; (3550 <_usb_on_bus_reset+0x80>)
    34d8:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    34da:	2380      	movs	r3, #128	; 0x80
    34dc:	6822      	ldr	r2, [r4, #0]
    34de:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    34e0:	ad01      	add	r5, sp, #4
    34e2:	0028      	movs	r0, r5
    34e4:	4b1b      	ldr	r3, [pc, #108]	; (3554 <_usb_on_bus_reset+0x84>)
    34e6:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    34e8:	2303      	movs	r3, #3
    34ea:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    34ec:	0029      	movs	r1, r5
    34ee:	0020      	movs	r0, r4
    34f0:	4b19      	ldr	r3, [pc, #100]	; (3558 <_usb_on_bus_reset+0x88>)
    34f2:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    34f4:	4919      	ldr	r1, [pc, #100]	; (355c <_usb_on_bus_reset+0x8c>)
    34f6:	0020      	movs	r0, r4
    34f8:	4b19      	ldr	r3, [pc, #100]	; (3560 <_usb_on_bus_reset+0x90>)
    34fa:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    34fc:	4b19      	ldr	r3, [pc, #100]	; (3564 <_usb_on_bus_reset+0x94>)
    34fe:	2202      	movs	r2, #2
    3500:	2100      	movs	r1, #0
    3502:	0020      	movs	r0, r4
    3504:	4d18      	ldr	r5, [pc, #96]	; (3568 <_usb_on_bus_reset+0x98>)
    3506:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3508:	4b18      	ldr	r3, [pc, #96]	; (356c <_usb_on_bus_reset+0x9c>)
    350a:	2200      	movs	r2, #0
    350c:	2100      	movs	r1, #0
    350e:	0020      	movs	r0, r4
    3510:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3512:	4b17      	ldr	r3, [pc, #92]	; (3570 <_usb_on_bus_reset+0xa0>)
    3514:	2201      	movs	r2, #1
    3516:	2100      	movs	r1, #0
    3518:	0020      	movs	r0, r4
    351a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    351c:	2202      	movs	r2, #2
    351e:	2100      	movs	r1, #0
    3520:	0020      	movs	r0, r4
    3522:	4d14      	ldr	r5, [pc, #80]	; (3574 <_usb_on_bus_reset+0xa4>)
    3524:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3526:	2200      	movs	r2, #0
    3528:	2100      	movs	r1, #0
    352a:	0020      	movs	r0, r4
    352c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    352e:	2201      	movs	r2, #1
    3530:	2100      	movs	r1, #0
    3532:	0020      	movs	r0, r4
    3534:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3536:	6821      	ldr	r1, [r4, #0]
    3538:	890b      	ldrh	r3, [r1, #8]
    353a:	4a0f      	ldr	r2, [pc, #60]	; (3578 <_usb_on_bus_reset+0xa8>)
    353c:	401a      	ands	r2, r3
    353e:	2380      	movs	r3, #128	; 0x80
    3540:	00db      	lsls	r3, r3, #3
    3542:	4313      	orrs	r3, r2
    3544:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3546:	2200      	movs	r2, #0
    3548:	4b0c      	ldr	r3, [pc, #48]	; (357c <_usb_on_bus_reset+0xac>)
    354a:	701a      	strb	r2, [r3, #0]
}
    354c:	b003      	add	sp, #12
    354e:	bd30      	pop	{r4, r5, pc}
    3550:	00001e31 	.word	0x00001e31
    3554:	000048b1 	.word	0x000048b1
    3558:	000048c1 	.word	0x000048c1
    355c:	20000628 	.word	0x20000628
    3560:	00004ce1 	.word	0x00004ce1
    3564:	000036b9 	.word	0x000036b9
    3568:	000046c1 	.word	0x000046c1
    356c:	000039d5 	.word	0x000039d5
    3570:	000035bd 	.word	0x000035bd
    3574:	00004711 	.word	0x00004711
    3578:	fffff3ff 	.word	0xfffff3ff
    357c:	2000023a 	.word	0x2000023a

00003580 <udd_ctrl_send_zlp_in>:
{
    3580:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3582:	2203      	movs	r2, #3
    3584:	4b07      	ldr	r3, [pc, #28]	; (35a4 <udd_ctrl_send_zlp_in+0x24>)
    3586:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3588:	4c07      	ldr	r4, [pc, #28]	; (35a8 <udd_ctrl_send_zlp_in+0x28>)
    358a:	4908      	ldr	r1, [pc, #32]	; (35ac <udd_ctrl_send_zlp_in+0x2c>)
    358c:	0020      	movs	r0, r4
    358e:	4b08      	ldr	r3, [pc, #32]	; (35b0 <udd_ctrl_send_zlp_in+0x30>)
    3590:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    3592:	4b08      	ldr	r3, [pc, #32]	; (35b4 <udd_ctrl_send_zlp_in+0x34>)
    3594:	689a      	ldr	r2, [r3, #8]
    3596:	2300      	movs	r3, #0
    3598:	2100      	movs	r1, #0
    359a:	0020      	movs	r0, r4
    359c:	4c06      	ldr	r4, [pc, #24]	; (35b8 <udd_ctrl_send_zlp_in+0x38>)
    359e:	47a0      	blx	r4
}
    35a0:	bd10      	pop	{r4, pc}
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	2000023a 	.word	0x2000023a
    35a8:	200004a8 	.word	0x200004a8
    35ac:	20000628 	.word	0x20000628
    35b0:	00004ce1 	.word	0x00004ce1
    35b4:	20000610 	.word	0x20000610
    35b8:	00004c3d 	.word	0x00004c3d

000035bc <_usb_ep0_on_tansfer_fail>:
{
    35bc:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    35be:	7989      	ldrb	r1, [r1, #6]
    35c0:	b24b      	sxtb	r3, r1
    35c2:	2b00      	cmp	r3, #0
    35c4:	db06      	blt.n	35d4 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    35c6:	4b0e      	ldr	r3, [pc, #56]	; (3600 <_usb_ep0_on_tansfer_fail+0x44>)
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	2b02      	cmp	r3, #2
    35cc:	d00f      	beq.n	35ee <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    35ce:	2b03      	cmp	r3, #3
    35d0:	d011      	beq.n	35f6 <_usb_ep0_on_tansfer_fail+0x3a>
}
    35d2:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    35d4:	4b0a      	ldr	r3, [pc, #40]	; (3600 <_usb_ep0_on_tansfer_fail+0x44>)
    35d6:	781b      	ldrb	r3, [r3, #0]
    35d8:	2b01      	cmp	r3, #1
    35da:	d005      	beq.n	35e8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    35dc:	2b04      	cmp	r3, #4
    35de:	d1f8      	bne.n	35d2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    35e0:	4808      	ldr	r0, [pc, #32]	; (3604 <_usb_ep0_on_tansfer_fail+0x48>)
    35e2:	4b09      	ldr	r3, [pc, #36]	; (3608 <_usb_ep0_on_tansfer_fail+0x4c>)
    35e4:	4798      	blx	r3
    35e6:	e7f4      	b.n	35d2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    35e8:	4b08      	ldr	r3, [pc, #32]	; (360c <_usb_ep0_on_tansfer_fail+0x50>)
    35ea:	4798      	blx	r3
    35ec:	e7f1      	b.n	35d2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    35ee:	2204      	movs	r2, #4
    35f0:	4b03      	ldr	r3, [pc, #12]	; (3600 <_usb_ep0_on_tansfer_fail+0x44>)
    35f2:	701a      	strb	r2, [r3, #0]
    35f4:	e7ed      	b.n	35d2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    35f6:	4803      	ldr	r0, [pc, #12]	; (3604 <_usb_ep0_on_tansfer_fail+0x48>)
    35f8:	4b03      	ldr	r3, [pc, #12]	; (3608 <_usb_ep0_on_tansfer_fail+0x4c>)
    35fa:	4798      	blx	r3
}
    35fc:	e7e9      	b.n	35d2 <_usb_ep0_on_tansfer_fail+0x16>
    35fe:	46c0      	nop			; (mov r8, r8)
    3600:	2000023a 	.word	0x2000023a
    3604:	200004a8 	.word	0x200004a8
    3608:	00004b91 	.word	0x00004b91
    360c:	00003581 	.word	0x00003581

00003610 <udd_ctrl_in_sent>:
{
    3610:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3612:	4b20      	ldr	r3, [pc, #128]	; (3694 <udd_ctrl_in_sent+0x84>)
    3614:	881b      	ldrh	r3, [r3, #0]
    3616:	4a20      	ldr	r2, [pc, #128]	; (3698 <udd_ctrl_in_sent+0x88>)
    3618:	8994      	ldrh	r4, [r2, #12]
    361a:	1ae4      	subs	r4, r4, r3
    361c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    361e:	2c00      	cmp	r4, #0
    3620:	d118      	bne.n	3654 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3622:	4a1e      	ldr	r2, [pc, #120]	; (369c <udd_ctrl_in_sent+0x8c>)
    3624:	8811      	ldrh	r1, [r2, #0]
    3626:	185b      	adds	r3, r3, r1
    3628:	b29b      	uxth	r3, r3
    362a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    362c:	4a1a      	ldr	r2, [pc, #104]	; (3698 <udd_ctrl_in_sent+0x88>)
    362e:	88d2      	ldrh	r2, [r2, #6]
    3630:	429a      	cmp	r2, r3
    3632:	d023      	beq.n	367c <udd_ctrl_in_sent+0x6c>
    3634:	4b1a      	ldr	r3, [pc, #104]	; (36a0 <udd_ctrl_in_sent+0x90>)
    3636:	781b      	ldrb	r3, [r3, #0]
    3638:	2b00      	cmp	r3, #0
    363a:	d11f      	bne.n	367c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    363c:	4b16      	ldr	r3, [pc, #88]	; (3698 <udd_ctrl_in_sent+0x88>)
    363e:	695b      	ldr	r3, [r3, #20]
    3640:	2b00      	cmp	r3, #0
    3642:	d023      	beq.n	368c <udd_ctrl_in_sent+0x7c>
    3644:	4798      	blx	r3
    3646:	2800      	cmp	r0, #0
    3648:	d020      	beq.n	368c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    364a:	2200      	movs	r2, #0
    364c:	4b11      	ldr	r3, [pc, #68]	; (3694 <udd_ctrl_in_sent+0x84>)
    364e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3650:	4b11      	ldr	r3, [pc, #68]	; (3698 <udd_ctrl_in_sent+0x88>)
    3652:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3654:	2c3f      	cmp	r4, #63	; 0x3f
    3656:	d919      	bls.n	368c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3658:	2200      	movs	r2, #0
    365a:	4b11      	ldr	r3, [pc, #68]	; (36a0 <udd_ctrl_in_sent+0x90>)
    365c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    365e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3660:	4d0c      	ldr	r5, [pc, #48]	; (3694 <udd_ctrl_in_sent+0x84>)
    3662:	882b      	ldrh	r3, [r5, #0]
    3664:	4a0c      	ldr	r2, [pc, #48]	; (3698 <udd_ctrl_in_sent+0x88>)
    3666:	6892      	ldr	r2, [r2, #8]
    3668:	18d2      	adds	r2, r2, r3
    366a:	0023      	movs	r3, r4
    366c:	2100      	movs	r1, #0
    366e:	480d      	ldr	r0, [pc, #52]	; (36a4 <udd_ctrl_in_sent+0x94>)
    3670:	4e0d      	ldr	r6, [pc, #52]	; (36a8 <udd_ctrl_in_sent+0x98>)
    3672:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3674:	882b      	ldrh	r3, [r5, #0]
    3676:	18e4      	adds	r4, r4, r3
    3678:	802c      	strh	r4, [r5, #0]
}
    367a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    367c:	2204      	movs	r2, #4
    367e:	4b0b      	ldr	r3, [pc, #44]	; (36ac <udd_ctrl_in_sent+0x9c>)
    3680:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3682:	490b      	ldr	r1, [pc, #44]	; (36b0 <udd_ctrl_in_sent+0xa0>)
    3684:	4807      	ldr	r0, [pc, #28]	; (36a4 <udd_ctrl_in_sent+0x94>)
    3686:	4b0b      	ldr	r3, [pc, #44]	; (36b4 <udd_ctrl_in_sent+0xa4>)
    3688:	4798      	blx	r3
			return;
    368a:	e7f6      	b.n	367a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    368c:	2201      	movs	r2, #1
    368e:	4b04      	ldr	r3, [pc, #16]	; (36a0 <udd_ctrl_in_sent+0x90>)
    3690:	701a      	strb	r2, [r3, #0]
    3692:	e7e5      	b.n	3660 <udd_ctrl_in_sent+0x50>
    3694:	20000236 	.word	0x20000236
    3698:	20000610 	.word	0x20000610
    369c:	20000238 	.word	0x20000238
    36a0:	20000234 	.word	0x20000234
    36a4:	200004a8 	.word	0x200004a8
    36a8:	00004c3d 	.word	0x00004c3d
    36ac:	2000023a 	.word	0x2000023a
    36b0:	20000628 	.word	0x20000628
    36b4:	00004ce1 	.word	0x00004ce1

000036b8 <_usb_ep0_on_setup>:
{
    36b8:	b510      	push	{r4, lr}
    36ba:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    36bc:	4b2c      	ldr	r3, [pc, #176]	; (3770 <_usb_ep0_on_setup+0xb8>)
    36be:	781b      	ldrb	r3, [r3, #0]
    36c0:	2b00      	cmp	r3, #0
    36c2:	d007      	beq.n	36d4 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    36c4:	4b2b      	ldr	r3, [pc, #172]	; (3774 <_usb_ep0_on_setup+0xbc>)
    36c6:	691b      	ldr	r3, [r3, #16]
    36c8:	2b00      	cmp	r3, #0
    36ca:	d000      	beq.n	36ce <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    36cc:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    36ce:	2200      	movs	r2, #0
    36d0:	4b27      	ldr	r3, [pc, #156]	; (3770 <_usb_ep0_on_setup+0xb8>)
    36d2:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    36d4:	8823      	ldrh	r3, [r4, #0]
    36d6:	2b08      	cmp	r3, #8
    36d8:	d002      	beq.n	36e0 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    36da:	4b27      	ldr	r3, [pc, #156]	; (3778 <_usb_ep0_on_setup+0xc0>)
    36dc:	4798      	blx	r3
}
    36de:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    36e0:	4a24      	ldr	r2, [pc, #144]	; (3774 <_usb_ep0_on_setup+0xbc>)
    36e2:	4b26      	ldr	r3, [pc, #152]	; (377c <_usb_ep0_on_setup+0xc4>)
    36e4:	7819      	ldrb	r1, [r3, #0]
    36e6:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    36e8:	7859      	ldrb	r1, [r3, #1]
    36ea:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    36ec:	78d8      	ldrb	r0, [r3, #3]
    36ee:	0200      	lsls	r0, r0, #8
    36f0:	7899      	ldrb	r1, [r3, #2]
    36f2:	1809      	adds	r1, r1, r0
    36f4:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    36f6:	7958      	ldrb	r0, [r3, #5]
    36f8:	0200      	lsls	r0, r0, #8
    36fa:	7919      	ldrb	r1, [r3, #4]
    36fc:	1809      	adds	r1, r1, r0
    36fe:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3700:	79d9      	ldrb	r1, [r3, #7]
    3702:	0209      	lsls	r1, r1, #8
    3704:	799b      	ldrb	r3, [r3, #6]
    3706:	185b      	adds	r3, r3, r1
    3708:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    370a:	4b1d      	ldr	r3, [pc, #116]	; (3780 <_usb_ep0_on_setup+0xc8>)
    370c:	4798      	blx	r3
    370e:	2800      	cmp	r0, #0
    3710:	d016      	beq.n	3740 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    3712:	4b18      	ldr	r3, [pc, #96]	; (3774 <_usb_ep0_on_setup+0xbc>)
    3714:	781b      	ldrb	r3, [r3, #0]
    3716:	2b7f      	cmp	r3, #127	; 0x7f
    3718:	d815      	bhi.n	3746 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    371a:	4b16      	ldr	r3, [pc, #88]	; (3774 <_usb_ep0_on_setup+0xbc>)
    371c:	88db      	ldrh	r3, [r3, #6]
    371e:	2b00      	cmp	r3, #0
    3720:	d022      	beq.n	3768 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    3722:	2300      	movs	r3, #0
    3724:	4a17      	ldr	r2, [pc, #92]	; (3784 <_usb_ep0_on_setup+0xcc>)
    3726:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3728:	4a17      	ldr	r2, [pc, #92]	; (3788 <_usb_ep0_on_setup+0xd0>)
    372a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    372c:	2201      	movs	r2, #1
    372e:	4b10      	ldr	r3, [pc, #64]	; (3770 <_usb_ep0_on_setup+0xb8>)
    3730:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3732:	2340      	movs	r3, #64	; 0x40
    3734:	4a11      	ldr	r2, [pc, #68]	; (377c <_usb_ep0_on_setup+0xc4>)
    3736:	2100      	movs	r1, #0
    3738:	4814      	ldr	r0, [pc, #80]	; (378c <_usb_ep0_on_setup+0xd4>)
    373a:	4c15      	ldr	r4, [pc, #84]	; (3790 <_usb_ep0_on_setup+0xd8>)
    373c:	47a0      	blx	r4
    373e:	e7ce      	b.n	36de <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    3740:	4b0d      	ldr	r3, [pc, #52]	; (3778 <_usb_ep0_on_setup+0xc0>)
    3742:	4798      	blx	r3
			return;
    3744:	e7cb      	b.n	36de <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    3746:	2300      	movs	r3, #0
    3748:	4a0e      	ldr	r2, [pc, #56]	; (3784 <_usb_ep0_on_setup+0xcc>)
    374a:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    374c:	4a0e      	ldr	r2, [pc, #56]	; (3788 <_usb_ep0_on_setup+0xd0>)
    374e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3750:	2202      	movs	r2, #2
    3752:	4b07      	ldr	r3, [pc, #28]	; (3770 <_usb_ep0_on_setup+0xb8>)
    3754:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3756:	2340      	movs	r3, #64	; 0x40
    3758:	4a08      	ldr	r2, [pc, #32]	; (377c <_usb_ep0_on_setup+0xc4>)
    375a:	2100      	movs	r1, #0
    375c:	480b      	ldr	r0, [pc, #44]	; (378c <_usb_ep0_on_setup+0xd4>)
    375e:	4c0c      	ldr	r4, [pc, #48]	; (3790 <_usb_ep0_on_setup+0xd8>)
    3760:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3762:	4b0c      	ldr	r3, [pc, #48]	; (3794 <_usb_ep0_on_setup+0xdc>)
    3764:	4798      	blx	r3
    3766:	e7ba      	b.n	36de <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3768:	4b0b      	ldr	r3, [pc, #44]	; (3798 <_usb_ep0_on_setup+0xe0>)
    376a:	4798      	blx	r3
				return;
    376c:	e7b7      	b.n	36de <_usb_ep0_on_setup+0x26>
    376e:	46c0      	nop			; (mov r8, r8)
    3770:	2000023a 	.word	0x2000023a
    3774:	20000610 	.word	0x20000610
    3778:	00003401 	.word	0x00003401
    377c:	20000628 	.word	0x20000628
    3780:	00001ec1 	.word	0x00001ec1
    3784:	20000238 	.word	0x20000238
    3788:	20000236 	.word	0x20000236
    378c:	200004a8 	.word	0x200004a8
    3790:	00004c91 	.word	0x00004c91
    3794:	00003611 	.word	0x00003611
    3798:	00003581 	.word	0x00003581

0000379c <_usb_on_sof_notify>:
{
    379c:	b510      	push	{r4, lr}
	udc_sof_notify();
    379e:	4b02      	ldr	r3, [pc, #8]	; (37a8 <_usb_on_sof_notify+0xc>)
    37a0:	4798      	blx	r3
	UDC_SOF_EVENT();
    37a2:	4b02      	ldr	r3, [pc, #8]	; (37ac <_usb_on_sof_notify+0x10>)
    37a4:	4798      	blx	r3
}
    37a6:	bd10      	pop	{r4, pc}
    37a8:	00001e7d 	.word	0x00001e7d
    37ac:	00004191 	.word	0x00004191

000037b0 <_usb_on_suspend>:
{
    37b0:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    37b2:	4c07      	ldr	r4, [pc, #28]	; (37d0 <_usb_on_suspend+0x20>)
    37b4:	2104      	movs	r1, #4
    37b6:	0020      	movs	r0, r4
    37b8:	4b06      	ldr	r3, [pc, #24]	; (37d4 <_usb_on_suspend+0x24>)
    37ba:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    37bc:	2102      	movs	r1, #2
    37be:	0020      	movs	r0, r4
    37c0:	4b05      	ldr	r3, [pc, #20]	; (37d8 <_usb_on_suspend+0x28>)
    37c2:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    37c4:	2001      	movs	r0, #1
    37c6:	4b05      	ldr	r3, [pc, #20]	; (37dc <_usb_on_suspend+0x2c>)
    37c8:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    37ca:	4b05      	ldr	r3, [pc, #20]	; (37e0 <_usb_on_suspend+0x30>)
    37cc:	4798      	blx	r3
}
    37ce:	bd10      	pop	{r4, pc}
    37d0:	200004a8 	.word	0x200004a8
    37d4:	000046a5 	.word	0x000046a5
    37d8:	00004685 	.word	0x00004685
    37dc:	00003169 	.word	0x00003169
    37e0:	00004179 	.word	0x00004179

000037e4 <udd_ep_abort>:
{
    37e4:	b510      	push	{r4, lr}
    37e6:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    37e8:	0001      	movs	r1, r0
    37ea:	480a      	ldr	r0, [pc, #40]	; (3814 <udd_ep_abort+0x30>)
    37ec:	4b0a      	ldr	r3, [pc, #40]	; (3818 <udd_ep_abort+0x34>)
    37ee:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    37f0:	0020      	movs	r0, r4
    37f2:	4b0a      	ldr	r3, [pc, #40]	; (381c <udd_ep_abort+0x38>)
    37f4:	4798      	blx	r3
	if (!ptr_job->busy) {
    37f6:	7c83      	ldrb	r3, [r0, #18]
    37f8:	07db      	lsls	r3, r3, #31
    37fa:	d50a      	bpl.n	3812 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    37fc:	7c83      	ldrb	r3, [r0, #18]
    37fe:	2201      	movs	r2, #1
    3800:	4393      	bics	r3, r2
    3802:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3804:	6803      	ldr	r3, [r0, #0]
    3806:	2b00      	cmp	r3, #0
    3808:	d003      	beq.n	3812 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    380a:	68c1      	ldr	r1, [r0, #12]
    380c:	0022      	movs	r2, r4
    380e:	2001      	movs	r0, #1
    3810:	4798      	blx	r3
}
    3812:	bd10      	pop	{r4, pc}
    3814:	200004a8 	.word	0x200004a8
    3818:	00004b31 	.word	0x00004b31
    381c:	00003229 	.word	0x00003229

00003820 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3820:	4b02      	ldr	r3, [pc, #8]	; (382c <udd_get_frame_number+0xc>)
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	8a18      	ldrh	r0, [r3, #16]
    3826:	0480      	lsls	r0, r0, #18
    3828:	0d40      	lsrs	r0, r0, #21
}
    382a:	4770      	bx	lr
    382c:	200004a8 	.word	0x200004a8

00003830 <udd_ep_free>:
{
    3830:	b570      	push	{r4, r5, r6, lr}
    3832:	b082      	sub	sp, #8
    3834:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3836:	ad01      	add	r5, sp, #4
    3838:	0028      	movs	r0, r5
    383a:	4b0d      	ldr	r3, [pc, #52]	; (3870 <udd_ep_free+0x40>)
    383c:	4798      	blx	r3
	udd_ep_abort(ep);
    383e:	0020      	movs	r0, r4
    3840:	4b0c      	ldr	r3, [pc, #48]	; (3874 <udd_ep_free+0x44>)
    3842:	4798      	blx	r3
	config_ep.ep_address = ep;
    3844:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3846:	2300      	movs	r3, #0
    3848:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    384a:	4e0b      	ldr	r6, [pc, #44]	; (3878 <udd_ep_free+0x48>)
    384c:	0029      	movs	r1, r5
    384e:	0030      	movs	r0, r6
    3850:	4b0a      	ldr	r3, [pc, #40]	; (387c <udd_ep_free+0x4c>)
    3852:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3854:	210f      	movs	r1, #15
    3856:	4021      	ands	r1, r4
    3858:	2200      	movs	r2, #0
    385a:	0030      	movs	r0, r6
    385c:	4b08      	ldr	r3, [pc, #32]	; (3880 <udd_ep_free+0x50>)
    385e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3860:	2200      	movs	r2, #0
    3862:	0021      	movs	r1, r4
    3864:	0030      	movs	r0, r6
    3866:	4b07      	ldr	r3, [pc, #28]	; (3884 <udd_ep_free+0x54>)
    3868:	4798      	blx	r3
}
    386a:	b002      	add	sp, #8
    386c:	bd70      	pop	{r4, r5, r6, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	000048b1 	.word	0x000048b1
    3874:	000037e5 	.word	0x000037e5
    3878:	200004a8 	.word	0x200004a8
    387c:	000048c1 	.word	0x000048c1
    3880:	000046e9 	.word	0x000046e9
    3884:	000047e1 	.word	0x000047e1

00003888 <udd_ep_alloc>:
{
    3888:	b5f0      	push	{r4, r5, r6, r7, lr}
    388a:	b083      	sub	sp, #12
    388c:	0005      	movs	r5, r0
    388e:	000f      	movs	r7, r1
    3890:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    3892:	ae01      	add	r6, sp, #4
    3894:	0030      	movs	r0, r6
    3896:	4b36      	ldr	r3, [pc, #216]	; (3970 <udd_ep_alloc+0xe8>)
    3898:	4798      	blx	r3
	config_ep.ep_address = ep;
    389a:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    389c:	2c08      	cmp	r4, #8
    389e:	d813      	bhi.n	38c8 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    38a0:	2200      	movs	r2, #0
    38a2:	ab01      	add	r3, sp, #4
    38a4:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    38a6:	0028      	movs	r0, r5
    38a8:	4b32      	ldr	r3, [pc, #200]	; (3974 <udd_ep_alloc+0xec>)
    38aa:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    38ac:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    38ae:	2103      	movs	r1, #3
    38b0:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    38b2:	2901      	cmp	r1, #1
    38b4:	d038      	beq.n	3928 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    38b6:	2902      	cmp	r1, #2
    38b8:	d043      	beq.n	3942 <udd_ep_alloc+0xba>
		return false;
    38ba:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    38bc:	2903      	cmp	r1, #3
    38be:	d13d      	bne.n	393c <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    38c0:	2204      	movs	r2, #4
    38c2:	ab01      	add	r3, sp, #4
    38c4:	70da      	strb	r2, [r3, #3]
    38c6:	e032      	b.n	392e <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    38c8:	2c10      	cmp	r4, #16
    38ca:	d803      	bhi.n	38d4 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    38cc:	2201      	movs	r2, #1
    38ce:	ab01      	add	r3, sp, #4
    38d0:	705a      	strb	r2, [r3, #1]
    38d2:	e7e8      	b.n	38a6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    38d4:	2c20      	cmp	r4, #32
    38d6:	d803      	bhi.n	38e0 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    38d8:	2202      	movs	r2, #2
    38da:	ab01      	add	r3, sp, #4
    38dc:	705a      	strb	r2, [r3, #1]
    38de:	e7e2      	b.n	38a6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    38e0:	2c40      	cmp	r4, #64	; 0x40
    38e2:	d803      	bhi.n	38ec <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    38e4:	2203      	movs	r2, #3
    38e6:	ab01      	add	r3, sp, #4
    38e8:	705a      	strb	r2, [r3, #1]
    38ea:	e7dc      	b.n	38a6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    38ec:	2c80      	cmp	r4, #128	; 0x80
    38ee:	d803      	bhi.n	38f8 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    38f0:	2204      	movs	r2, #4
    38f2:	ab01      	add	r3, sp, #4
    38f4:	705a      	strb	r2, [r3, #1]
    38f6:	e7d6      	b.n	38a6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    38f8:	2380      	movs	r3, #128	; 0x80
    38fa:	005b      	lsls	r3, r3, #1
    38fc:	429c      	cmp	r4, r3
    38fe:	d803      	bhi.n	3908 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3900:	2205      	movs	r2, #5
    3902:	ab01      	add	r3, sp, #4
    3904:	705a      	strb	r2, [r3, #1]
    3906:	e7ce      	b.n	38a6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3908:	2380      	movs	r3, #128	; 0x80
    390a:	009b      	lsls	r3, r3, #2
    390c:	429c      	cmp	r4, r3
    390e:	d803      	bhi.n	3918 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3910:	2206      	movs	r2, #6
    3912:	ab01      	add	r3, sp, #4
    3914:	705a      	strb	r2, [r3, #1]
    3916:	e7c6      	b.n	38a6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3918:	4a17      	ldr	r2, [pc, #92]	; (3978 <udd_ep_alloc+0xf0>)
		return false;
    391a:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    391c:	4294      	cmp	r4, r2
    391e:	d80d      	bhi.n	393c <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3920:	2207      	movs	r2, #7
    3922:	ab01      	add	r3, sp, #4
    3924:	705a      	strb	r2, [r3, #1]
    3926:	e7be      	b.n	38a6 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3928:	2202      	movs	r2, #2
    392a:	ab01      	add	r3, sp, #4
    392c:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    392e:	a901      	add	r1, sp, #4
    3930:	4812      	ldr	r0, [pc, #72]	; (397c <udd_ep_alloc+0xf4>)
    3932:	4b13      	ldr	r3, [pc, #76]	; (3980 <udd_ep_alloc+0xf8>)
    3934:	4798      	blx	r3
		return false;
    3936:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3938:	2800      	cmp	r0, #0
    393a:	d006      	beq.n	394a <udd_ep_alloc+0xc2>
}
    393c:	0018      	movs	r0, r3
    393e:	b003      	add	sp, #12
    3940:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3942:	2203      	movs	r2, #3
    3944:	ab01      	add	r3, sp, #4
    3946:	70da      	strb	r2, [r3, #3]
    3948:	e7f1      	b.n	392e <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    394a:	210f      	movs	r1, #15
    394c:	4029      	ands	r1, r5
    394e:	4c0b      	ldr	r4, [pc, #44]	; (397c <udd_ep_alloc+0xf4>)
    3950:	4b0c      	ldr	r3, [pc, #48]	; (3984 <udd_ep_alloc+0xfc>)
    3952:	2200      	movs	r2, #0
    3954:	0020      	movs	r0, r4
    3956:	4e0c      	ldr	r6, [pc, #48]	; (3988 <udd_ep_alloc+0x100>)
    3958:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    395a:	2200      	movs	r2, #0
    395c:	0029      	movs	r1, r5
    395e:	0020      	movs	r0, r4
    3960:	4e0a      	ldr	r6, [pc, #40]	; (398c <udd_ep_alloc+0x104>)
    3962:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3964:	2201      	movs	r2, #1
    3966:	0029      	movs	r1, r5
    3968:	0020      	movs	r0, r4
    396a:	47b0      	blx	r6
	return true;
    396c:	2301      	movs	r3, #1
    396e:	e7e5      	b.n	393c <udd_ep_alloc+0xb4>
    3970:	000048b1 	.word	0x000048b1
    3974:	00003229 	.word	0x00003229
    3978:	000003ff 	.word	0x000003ff
    397c:	200004a8 	.word	0x200004a8
    3980:	000048c1 	.word	0x000048c1
    3984:	0000324d 	.word	0x0000324d
    3988:	000046c1 	.word	0x000046c1
    398c:	00004711 	.word	0x00004711

00003990 <udd_ep_is_halted>:
{
    3990:	b510      	push	{r4, lr}
    3992:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3994:	4801      	ldr	r0, [pc, #4]	; (399c <udd_ep_is_halted+0xc>)
    3996:	4b02      	ldr	r3, [pc, #8]	; (39a0 <udd_ep_is_halted+0x10>)
    3998:	4798      	blx	r3
}
    399a:	bd10      	pop	{r4, pc}
    399c:	200004a8 	.word	0x200004a8
    39a0:	00004b67 	.word	0x00004b67

000039a4 <udd_ep_set_halt>:
{
    39a4:	b510      	push	{r4, lr}
    39a6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    39a8:	230f      	movs	r3, #15
    39aa:	4003      	ands	r3, r0
		return false;
    39ac:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    39ae:	2b02      	cmp	r3, #2
    39b0:	d900      	bls.n	39b4 <udd_ep_set_halt+0x10>
}
    39b2:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    39b4:	0021      	movs	r1, r4
    39b6:	4804      	ldr	r0, [pc, #16]	; (39c8 <udd_ep_set_halt+0x24>)
    39b8:	4b04      	ldr	r3, [pc, #16]	; (39cc <udd_ep_set_halt+0x28>)
    39ba:	4798      	blx	r3
	udd_ep_abort(ep);
    39bc:	0020      	movs	r0, r4
    39be:	4b04      	ldr	r3, [pc, #16]	; (39d0 <udd_ep_set_halt+0x2c>)
    39c0:	4798      	blx	r3
	return true;
    39c2:	2001      	movs	r0, #1
    39c4:	e7f5      	b.n	39b2 <udd_ep_set_halt+0xe>
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	200004a8 	.word	0x200004a8
    39cc:	00004b91 	.word	0x00004b91
    39d0:	000037e5 	.word	0x000037e5

000039d4 <_usb_ep0_on_tansfer_ok>:
{
    39d4:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    39d6:	4b34      	ldr	r3, [pc, #208]	; (3aa8 <_usb_ep0_on_tansfer_ok+0xd4>)
    39d8:	781b      	ldrb	r3, [r3, #0]
    39da:	2b01      	cmp	r3, #1
    39dc:	d00a      	beq.n	39f4 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    39de:	2b02      	cmp	r3, #2
    39e0:	d05f      	beq.n	3aa2 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    39e2:	4b32      	ldr	r3, [pc, #200]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    39e4:	691b      	ldr	r3, [r3, #16]
    39e6:	2b00      	cmp	r3, #0
    39e8:	d000      	beq.n	39ec <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    39ea:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    39ec:	2200      	movs	r2, #0
    39ee:	4b2e      	ldr	r3, [pc, #184]	; (3aa8 <_usb_ep0_on_tansfer_ok+0xd4>)
    39f0:	701a      	strb	r2, [r3, #0]
}
    39f2:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    39f4:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    39f6:	4b2d      	ldr	r3, [pc, #180]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    39f8:	899b      	ldrh	r3, [r3, #12]
    39fa:	4a2d      	ldr	r2, [pc, #180]	; (3ab0 <_usb_ep0_on_tansfer_ok+0xdc>)
    39fc:	8814      	ldrh	r4, [r2, #0]
    39fe:	1962      	adds	r2, r4, r5
    3a00:	4293      	cmp	r3, r2
    3a02:	da01      	bge.n	3a08 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3a04:	1b1d      	subs	r5, r3, r4
    3a06:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3a08:	4b28      	ldr	r3, [pc, #160]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    3a0a:	6898      	ldr	r0, [r3, #8]
    3a0c:	1900      	adds	r0, r0, r4
    3a0e:	002a      	movs	r2, r5
    3a10:	4928      	ldr	r1, [pc, #160]	; (3ab4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3a12:	4b29      	ldr	r3, [pc, #164]	; (3ab8 <_usb_ep0_on_tansfer_ok+0xe4>)
    3a14:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3a16:	1964      	adds	r4, r4, r5
    3a18:	b2a4      	uxth	r4, r4
    3a1a:	4b25      	ldr	r3, [pc, #148]	; (3ab0 <_usb_ep0_on_tansfer_ok+0xdc>)
    3a1c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3a1e:	2d40      	cmp	r5, #64	; 0x40
    3a20:	d00a      	beq.n	3a38 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3a22:	4b22      	ldr	r3, [pc, #136]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    3a24:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3a26:	695b      	ldr	r3, [r3, #20]
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d002      	beq.n	3a32 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3a2c:	4798      	blx	r3
    3a2e:	2800      	cmp	r0, #0
    3a30:	d014      	beq.n	3a5c <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    3a32:	4b22      	ldr	r3, [pc, #136]	; (3abc <_usb_ep0_on_tansfer_ok+0xe8>)
    3a34:	4798      	blx	r3
    3a36:	e7dc      	b.n	39f2 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3a38:	4b1c      	ldr	r3, [pc, #112]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    3a3a:	88da      	ldrh	r2, [r3, #6]
    3a3c:	4b20      	ldr	r3, [pc, #128]	; (3ac0 <_usb_ep0_on_tansfer_ok+0xec>)
    3a3e:	881b      	ldrh	r3, [r3, #0]
    3a40:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3a42:	429a      	cmp	r2, r3
    3a44:	dded      	ble.n	3a22 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3a46:	4b19      	ldr	r3, [pc, #100]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    3a48:	899b      	ldrh	r3, [r3, #12]
    3a4a:	42a3      	cmp	r3, r4
    3a4c:	d00c      	beq.n	3a68 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3a4e:	2340      	movs	r3, #64	; 0x40
    3a50:	4a18      	ldr	r2, [pc, #96]	; (3ab4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3a52:	2100      	movs	r1, #0
    3a54:	481b      	ldr	r0, [pc, #108]	; (3ac4 <_usb_ep0_on_tansfer_ok+0xf0>)
    3a56:	4c1c      	ldr	r4, [pc, #112]	; (3ac8 <_usb_ep0_on_tansfer_ok+0xf4>)
    3a58:	47a0      	blx	r4
    3a5a:	e7ca      	b.n	39f2 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a5c:	2205      	movs	r2, #5
    3a5e:	4b12      	ldr	r3, [pc, #72]	; (3aa8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3a60:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    3a62:	4b1a      	ldr	r3, [pc, #104]	; (3acc <_usb_ep0_on_tansfer_ok+0xf8>)
    3a64:	4798      	blx	r3
    3a66:	e7c4      	b.n	39f2 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3a68:	4b10      	ldr	r3, [pc, #64]	; (3aac <_usb_ep0_on_tansfer_ok+0xd8>)
    3a6a:	695b      	ldr	r3, [r3, #20]
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d00b      	beq.n	3a88 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3a70:	4798      	blx	r3
    3a72:	2800      	cmp	r0, #0
    3a74:	d00f      	beq.n	3a96 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3a76:	4912      	ldr	r1, [pc, #72]	; (3ac0 <_usb_ep0_on_tansfer_ok+0xec>)
    3a78:	4a0d      	ldr	r2, [pc, #52]	; (3ab0 <_usb_ep0_on_tansfer_ok+0xdc>)
    3a7a:	880b      	ldrh	r3, [r1, #0]
    3a7c:	8810      	ldrh	r0, [r2, #0]
    3a7e:	181b      	adds	r3, r3, r0
    3a80:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    3a82:	2300      	movs	r3, #0
    3a84:	8013      	strh	r3, [r2, #0]
    3a86:	e7e2      	b.n	3a4e <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a88:	2205      	movs	r2, #5
    3a8a:	4b07      	ldr	r3, [pc, #28]	; (3aa8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3a8c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3a8e:	2000      	movs	r0, #0
    3a90:	4b0e      	ldr	r3, [pc, #56]	; (3acc <_usb_ep0_on_tansfer_ok+0xf8>)
    3a92:	4798      	blx	r3
    3a94:	e7ad      	b.n	39f2 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a96:	2205      	movs	r2, #5
    3a98:	4b03      	ldr	r3, [pc, #12]	; (3aa8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3a9a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3a9c:	4b0b      	ldr	r3, [pc, #44]	; (3acc <_usb_ep0_on_tansfer_ok+0xf8>)
    3a9e:	4798      	blx	r3
    3aa0:	e7a7      	b.n	39f2 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    3aa2:	4b0b      	ldr	r3, [pc, #44]	; (3ad0 <_usb_ep0_on_tansfer_ok+0xfc>)
    3aa4:	4798      	blx	r3
    3aa6:	e7a4      	b.n	39f2 <_usb_ep0_on_tansfer_ok+0x1e>
    3aa8:	2000023a 	.word	0x2000023a
    3aac:	20000610 	.word	0x20000610
    3ab0:	20000236 	.word	0x20000236
    3ab4:	20000628 	.word	0x20000628
    3ab8:	00007671 	.word	0x00007671
    3abc:	00003581 	.word	0x00003581
    3ac0:	20000238 	.word	0x20000238
    3ac4:	200004a8 	.word	0x200004a8
    3ac8:	00004c91 	.word	0x00004c91
    3acc:	000039a5 	.word	0x000039a5
    3ad0:	00003611 	.word	0x00003611

00003ad4 <udd_ep_clear_halt>:
{
    3ad4:	b570      	push	{r4, r5, r6, lr}
    3ad6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ad8:	230f      	movs	r3, #15
    3ada:	4003      	ands	r3, r0
		return false;
    3adc:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ade:	2b02      	cmp	r3, #2
    3ae0:	d900      	bls.n	3ae4 <udd_ep_clear_halt+0x10>
}
    3ae2:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3ae4:	0020      	movs	r0, r4
    3ae6:	4b09      	ldr	r3, [pc, #36]	; (3b0c <udd_ep_clear_halt+0x38>)
    3ae8:	4798      	blx	r3
    3aea:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3aec:	0021      	movs	r1, r4
    3aee:	4808      	ldr	r0, [pc, #32]	; (3b10 <udd_ep_clear_halt+0x3c>)
    3af0:	4b08      	ldr	r3, [pc, #32]	; (3b14 <udd_ep_clear_halt+0x40>)
    3af2:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3af4:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3af6:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3af8:	07db      	lsls	r3, r3, #31
    3afa:	d5f2      	bpl.n	3ae2 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3afc:	7cab      	ldrb	r3, [r5, #18]
    3afe:	2201      	movs	r2, #1
    3b00:	4393      	bics	r3, r2
    3b02:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3b04:	682b      	ldr	r3, [r5, #0]
    3b06:	4798      	blx	r3
	return true;
    3b08:	2001      	movs	r0, #1
    3b0a:	e7ea      	b.n	3ae2 <udd_ep_clear_halt+0xe>
    3b0c:	00003229 	.word	0x00003229
    3b10:	200004a8 	.word	0x200004a8
    3b14:	00004bb7 	.word	0x00004bb7

00003b18 <udd_ep_wait_stall_clear>:
{
    3b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1a:	0004      	movs	r4, r0
    3b1c:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    3b1e:	230f      	movs	r3, #15
    3b20:	4003      	ands	r3, r0
		return false;
    3b22:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3b24:	2b02      	cmp	r3, #2
    3b26:	d805      	bhi.n	3b34 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3b28:	4b0d      	ldr	r3, [pc, #52]	; (3b60 <udd_ep_wait_stall_clear+0x48>)
    3b2a:	4798      	blx	r3
    3b2c:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    3b2e:	7c83      	ldrb	r3, [r0, #18]
    3b30:	07db      	lsls	r3, r3, #31
    3b32:	d501      	bpl.n	3b38 <udd_ep_wait_stall_clear+0x20>
}
    3b34:	0030      	movs	r0, r6
    3b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3b38:	0021      	movs	r1, r4
    3b3a:	480a      	ldr	r0, [pc, #40]	; (3b64 <udd_ep_wait_stall_clear+0x4c>)
    3b3c:	4b0a      	ldr	r3, [pc, #40]	; (3b68 <udd_ep_wait_stall_clear+0x50>)
    3b3e:	4798      	blx	r3
    3b40:	1e06      	subs	r6, r0, #0
    3b42:	d005      	beq.n	3b50 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3b44:	7cbb      	ldrb	r3, [r7, #18]
    3b46:	2201      	movs	r2, #1
    3b48:	4313      	orrs	r3, r2
    3b4a:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3b4c:	603d      	str	r5, [r7, #0]
		return true;
    3b4e:	e7f1      	b.n	3b34 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3b50:	0021      	movs	r1, r4
    3b52:	4804      	ldr	r0, [pc, #16]	; (3b64 <udd_ep_wait_stall_clear+0x4c>)
    3b54:	4b05      	ldr	r3, [pc, #20]	; (3b6c <udd_ep_wait_stall_clear+0x54>)
    3b56:	4798      	blx	r3
    3b58:	1e06      	subs	r6, r0, #0
    3b5a:	d0eb      	beq.n	3b34 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3b5c:	47a8      	blx	r5
		return true;
    3b5e:	e7e9      	b.n	3b34 <udd_ep_wait_stall_clear+0x1c>
    3b60:	00003229 	.word	0x00003229
    3b64:	200004a8 	.word	0x200004a8
    3b68:	00004b67 	.word	0x00004b67
    3b6c:	00004b05 	.word	0x00004b05

00003b70 <udd_ep_run>:
{
    3b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b72:	b087      	sub	sp, #28
    3b74:	0005      	movs	r5, r0
    3b76:	9103      	str	r1, [sp, #12]
    3b78:	9202      	str	r2, [sp, #8]
    3b7a:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3b7c:	260f      	movs	r6, #15
    3b7e:	4006      	ands	r6, r0
		return false;
    3b80:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3b82:	2e02      	cmp	r6, #2
    3b84:	d902      	bls.n	3b8c <udd_ep_run+0x1c>
}
    3b86:	0020      	movs	r0, r4
    3b88:	b007      	add	sp, #28
    3b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3b8c:	4b64      	ldr	r3, [pc, #400]	; (3d20 <udd_ep_run+0x1b0>)
    3b8e:	4798      	blx	r3
    3b90:	1e04      	subs	r4, r0, #0
    3b92:	d000      	beq.n	3b96 <udd_ep_run+0x26>
    3b94:	e0bd      	b.n	3d12 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3b96:	0028      	movs	r0, r5
    3b98:	4b62      	ldr	r3, [pc, #392]	; (3d24 <udd_ep_run+0x1b4>)
    3b9a:	4798      	blx	r3
    3b9c:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b9e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3ba2:	425a      	negs	r2, r3
    3ba4:	4153      	adcs	r3, r2
    3ba6:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3ba8:	b672      	cpsid	i
    3baa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3bae:	2200      	movs	r2, #0
    3bb0:	4b5d      	ldr	r3, [pc, #372]	; (3d28 <udd_ep_run+0x1b8>)
    3bb2:	701a      	strb	r2, [r3, #0]
	return flags;
    3bb4:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3bb6:	7c83      	ldrb	r3, [r0, #18]
    3bb8:	07db      	lsls	r3, r3, #31
    3bba:	d508      	bpl.n	3bce <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3bbc:	2a00      	cmp	r2, #0
    3bbe:	d0e2      	beq.n	3b86 <udd_ep_run+0x16>
		cpu_irq_enable();
    3bc0:	2201      	movs	r2, #1
    3bc2:	4b59      	ldr	r3, [pc, #356]	; (3d28 <udd_ep_run+0x1b8>)
    3bc4:	701a      	strb	r2, [r3, #0]
    3bc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3bca:	b662      	cpsie	i
    3bcc:	e7db      	b.n	3b86 <udd_ep_run+0x16>
	ptr_job->busy = true;
    3bce:	7c83      	ldrb	r3, [r0, #18]
    3bd0:	2101      	movs	r1, #1
    3bd2:	430b      	orrs	r3, r1
    3bd4:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3bd6:	2a00      	cmp	r2, #0
    3bd8:	d005      	beq.n	3be6 <udd_ep_run+0x76>
		cpu_irq_enable();
    3bda:	2201      	movs	r2, #1
    3bdc:	4b52      	ldr	r3, [pc, #328]	; (3d28 <udd_ep_run+0x1b8>)
    3bde:	701a      	strb	r2, [r3, #0]
    3be0:	f3bf 8f5f 	dmb	sy
    3be4:	b662      	cpsie	i
	ptr_job->buf = buf;
    3be6:	9b02      	ldr	r3, [sp, #8]
    3be8:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3bea:	9b01      	ldr	r3, [sp, #4]
    3bec:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3bee:	2300      	movs	r3, #0
    3bf0:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bf4:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3bf6:	2301      	movs	r3, #1
    3bf8:	9a03      	ldr	r2, [sp, #12]
    3bfa:	4013      	ands	r3, r2
    3bfc:	005a      	lsls	r2, r3, #1
    3bfe:	7cbb      	ldrb	r3, [r7, #18]
    3c00:	2102      	movs	r1, #2
    3c02:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3c04:	4313      	orrs	r3, r2
    3c06:	2204      	movs	r2, #4
    3c08:	4393      	bics	r3, r2
    3c0a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3c0c:	b26b      	sxtb	r3, r5
    3c0e:	2b00      	cmp	r3, #0
    3c10:	db20      	blt.n	3c54 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3c12:	9b01      	ldr	r3, [sp, #4]
    3c14:	2b00      	cmp	r3, #0
    3c16:	d06f      	beq.n	3cf8 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3c18:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3c1a:	4b44      	ldr	r3, [pc, #272]	; (3d2c <udd_ep_run+0x1bc>)
    3c1c:	429c      	cmp	r4, r3
    3c1e:	d95a      	bls.n	3cd6 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3c20:	8a39      	ldrh	r1, [r7, #16]
    3c22:	001c      	movs	r4, r3
    3c24:	0018      	movs	r0, r3
    3c26:	4b42      	ldr	r3, [pc, #264]	; (3d30 <udd_ep_run+0x1c0>)
    3c28:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3c2a:	1a63      	subs	r3, r4, r1
    3c2c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3c2e:	8a3b      	ldrh	r3, [r7, #16]
    3c30:	429a      	cmp	r2, r3
    3c32:	d257      	bcs.n	3ce4 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3c34:	7cba      	ldrb	r2, [r7, #18]
    3c36:	2104      	movs	r1, #4
    3c38:	430a      	orrs	r2, r1
    3c3a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3c3c:	1e72      	subs	r2, r6, #1
    3c3e:	0192      	lsls	r2, r2, #6
    3c40:	493c      	ldr	r1, [pc, #240]	; (3d34 <udd_ep_run+0x1c4>)
    3c42:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3c44:	0031      	movs	r1, r6
    3c46:	483c      	ldr	r0, [pc, #240]	; (3d38 <udd_ep_run+0x1c8>)
    3c48:	4c3c      	ldr	r4, [pc, #240]	; (3d3c <udd_ep_run+0x1cc>)
    3c4a:	47a0      	blx	r4
				return (STATUS_OK ==
    3c4c:	4244      	negs	r4, r0
    3c4e:	4144      	adcs	r4, r0
    3c50:	b2e4      	uxtb	r4, r4
    3c52:	e798      	b.n	3b86 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3c54:	9b01      	ldr	r3, [sp, #4]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d027      	beq.n	3caa <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3c5a:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3c5c:	4b33      	ldr	r3, [pc, #204]	; (3d2c <udd_ep_run+0x1bc>)
    3c5e:	429d      	cmp	r5, r3
    3c60:	d906      	bls.n	3c70 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3c62:	8a39      	ldrh	r1, [r7, #16]
    3c64:	001d      	movs	r5, r3
    3c66:	0018      	movs	r0, r3
    3c68:	4b31      	ldr	r3, [pc, #196]	; (3d30 <udd_ep_run+0x1c0>)
    3c6a:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3c6c:	1a6b      	subs	r3, r5, r1
    3c6e:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3c70:	7cbb      	ldrb	r3, [r7, #18]
    3c72:	079b      	lsls	r3, r3, #30
    3c74:	d507      	bpl.n	3c86 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3c76:	8a39      	ldrh	r1, [r7, #16]
    3c78:	0028      	movs	r0, r5
    3c7a:	4b31      	ldr	r3, [pc, #196]	; (3d40 <udd_ep_run+0x1d0>)
    3c7c:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3c7e:	b289      	uxth	r1, r1
    3c80:	424c      	negs	r4, r1
    3c82:	414c      	adcs	r4, r1
    3c84:	b2e4      	uxtb	r4, r4
    3c86:	2001      	movs	r0, #1
    3c88:	4020      	ands	r0, r4
    3c8a:	0040      	lsls	r0, r0, #1
    3c8c:	7cbc      	ldrb	r4, [r7, #18]
    3c8e:	2302      	movs	r3, #2
    3c90:	439c      	bics	r4, r3
    3c92:	4304      	orrs	r4, r0
    3c94:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3c96:	002b      	movs	r3, r5
    3c98:	9a02      	ldr	r2, [sp, #8]
    3c9a:	0031      	movs	r1, r6
    3c9c:	4826      	ldr	r0, [pc, #152]	; (3d38 <udd_ep_run+0x1c8>)
    3c9e:	4c29      	ldr	r4, [pc, #164]	; (3d44 <udd_ep_run+0x1d4>)
    3ca0:	47a0      	blx	r4
		return (STATUS_OK ==
    3ca2:	4244      	negs	r4, r0
    3ca4:	4144      	adcs	r4, r0
    3ca6:	b2e4      	uxtb	r4, r4
    3ca8:	e76d      	b.n	3b86 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3caa:	7cbb      	ldrb	r3, [r7, #18]
    3cac:	079b      	lsls	r3, r3, #30
    3cae:	d505      	bpl.n	3cbc <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3cb0:	7cbb      	ldrb	r3, [r7, #18]
    3cb2:	2202      	movs	r2, #2
    3cb4:	4393      	bics	r3, r2
    3cb6:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3cb8:	2500      	movs	r5, #0
    3cba:	e7ec      	b.n	3c96 <udd_ep_run+0x126>
			ptr_job->busy = false;
    3cbc:	7cbb      	ldrb	r3, [r7, #18]
    3cbe:	2201      	movs	r2, #1
    3cc0:	4393      	bics	r3, r2
    3cc2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d025      	beq.n	3d16 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3cca:	002a      	movs	r2, r5
    3ccc:	2100      	movs	r1, #0
    3cce:	2000      	movs	r0, #0
    3cd0:	4798      	blx	r3
			return true;
    3cd2:	2401      	movs	r4, #1
    3cd4:	e757      	b.n	3b86 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3cd6:	8a39      	ldrh	r1, [r7, #16]
    3cd8:	0020      	movs	r0, r4
    3cda:	4b19      	ldr	r3, [pc, #100]	; (3d40 <udd_ep_run+0x1d0>)
    3cdc:	4798      	blx	r3
    3cde:	1a63      	subs	r3, r4, r1
    3ce0:	b29a      	uxth	r2, r3
    3ce2:	e7a4      	b.n	3c2e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3ce4:	0013      	movs	r3, r2
    3ce6:	9a02      	ldr	r2, [sp, #8]
    3ce8:	0031      	movs	r1, r6
    3cea:	4813      	ldr	r0, [pc, #76]	; (3d38 <udd_ep_run+0x1c8>)
    3cec:	4c13      	ldr	r4, [pc, #76]	; (3d3c <udd_ep_run+0x1cc>)
    3cee:	47a0      	blx	r4
				return (STATUS_OK ==
    3cf0:	4244      	negs	r4, r0
    3cf2:	4144      	adcs	r4, r0
    3cf4:	b2e4      	uxtb	r4, r4
    3cf6:	e746      	b.n	3b86 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3cf8:	7cbb      	ldrb	r3, [r7, #18]
    3cfa:	2201      	movs	r2, #1
    3cfc:	4393      	bics	r3, r2
    3cfe:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d02:	2b00      	cmp	r3, #0
    3d04:	d009      	beq.n	3d1a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3d06:	002a      	movs	r2, r5
    3d08:	2100      	movs	r1, #0
    3d0a:	2000      	movs	r0, #0
    3d0c:	4798      	blx	r3
			return true;
    3d0e:	2401      	movs	r4, #1
    3d10:	e739      	b.n	3b86 <udd_ep_run+0x16>
		return false;
    3d12:	2400      	movs	r4, #0
    3d14:	e737      	b.n	3b86 <udd_ep_run+0x16>
			return true;
    3d16:	2401      	movs	r4, #1
    3d18:	e735      	b.n	3b86 <udd_ep_run+0x16>
			return true;
    3d1a:	2401      	movs	r4, #1
    3d1c:	e733      	b.n	3b86 <udd_ep_run+0x16>
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	00003991 	.word	0x00003991
    3d24:	00003229 	.word	0x00003229
    3d28:	200000f9 	.word	0x200000f9
    3d2c:	00001fff 	.word	0x00001fff
    3d30:	00007375 	.word	0x00007375
    3d34:	20000428 	.word	0x20000428
    3d38:	200004a8 	.word	0x200004a8
    3d3c:	00004c91 	.word	0x00004c91
    3d40:	000071a1 	.word	0x000071a1
    3d44:	00004c3d 	.word	0x00004c3d

00003d48 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3d48:	4b02      	ldr	r3, [pc, #8]	; (3d54 <udd_set_address+0xc>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	2280      	movs	r2, #128	; 0x80
    3d4e:	4310      	orrs	r0, r2
    3d50:	7298      	strb	r0, [r3, #10]
}
    3d52:	4770      	bx	lr
    3d54:	200004a8 	.word	0x200004a8

00003d58 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3d58:	4b02      	ldr	r3, [pc, #8]	; (3d64 <udd_getaddress+0xc>)
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	7a98      	ldrb	r0, [r3, #10]
    3d5e:	0640      	lsls	r0, r0, #25
    3d60:	0e40      	lsrs	r0, r0, #25
}
    3d62:	4770      	bx	lr
    3d64:	200004a8 	.word	0x200004a8

00003d68 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3d68:	4b01      	ldr	r3, [pc, #4]	; (3d70 <udd_set_setup_payload+0x8>)
    3d6a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3d6c:	8199      	strh	r1, [r3, #12]
}
    3d6e:	4770      	bx	lr
    3d70:	20000610 	.word	0x20000610

00003d74 <udd_detach>:

void udd_detach(void)
{
    3d74:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3d76:	4b05      	ldr	r3, [pc, #20]	; (3d8c <udd_detach+0x18>)
    3d78:	681a      	ldr	r2, [r3, #0]
    3d7a:	8913      	ldrh	r3, [r2, #8]
    3d7c:	2101      	movs	r1, #1
    3d7e:	430b      	orrs	r3, r1
    3d80:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3d82:	2001      	movs	r0, #1
    3d84:	4b02      	ldr	r3, [pc, #8]	; (3d90 <udd_detach+0x1c>)
    3d86:	4798      	blx	r3
}
    3d88:	bd10      	pop	{r4, pc}
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	200004a8 	.word	0x200004a8
    3d90:	00003169 	.word	0x00003169

00003d94 <udd_attach>:

void udd_attach(void)
{
    3d94:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3d96:	2003      	movs	r0, #3
    3d98:	4b16      	ldr	r3, [pc, #88]	; (3df4 <udd_attach+0x60>)
    3d9a:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3d9c:	4c16      	ldr	r4, [pc, #88]	; (3df8 <udd_attach+0x64>)
    3d9e:	6822      	ldr	r2, [r4, #0]
    3da0:	8913      	ldrh	r3, [r2, #8]
    3da2:	2101      	movs	r1, #1
    3da4:	438b      	bics	r3, r1
    3da6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3da8:	4a14      	ldr	r2, [pc, #80]	; (3dfc <udd_attach+0x68>)
    3daa:	3103      	adds	r1, #3
    3dac:	0020      	movs	r0, r4
    3dae:	4e14      	ldr	r6, [pc, #80]	; (3e00 <udd_attach+0x6c>)
    3db0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3db2:	4a14      	ldr	r2, [pc, #80]	; (3e04 <udd_attach+0x70>)
    3db4:	2100      	movs	r1, #0
    3db6:	0020      	movs	r0, r4
    3db8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3dba:	4a13      	ldr	r2, [pc, #76]	; (3e08 <udd_attach+0x74>)
    3dbc:	2101      	movs	r1, #1
    3dbe:	0020      	movs	r0, r4
    3dc0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3dc2:	4a12      	ldr	r2, [pc, #72]	; (3e0c <udd_attach+0x78>)
    3dc4:	2102      	movs	r1, #2
    3dc6:	0020      	movs	r0, r4
    3dc8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3dca:	2104      	movs	r1, #4
    3dcc:	0020      	movs	r0, r4
    3dce:	4d10      	ldr	r5, [pc, #64]	; (3e10 <udd_attach+0x7c>)
    3dd0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3dd2:	2100      	movs	r1, #0
    3dd4:	0020      	movs	r0, r4
    3dd6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3dd8:	2101      	movs	r1, #1
    3dda:	0020      	movs	r0, r4
    3ddc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3dde:	2102      	movs	r1, #2
    3de0:	0020      	movs	r0, r4
    3de2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3de4:	4a0b      	ldr	r2, [pc, #44]	; (3e14 <udd_attach+0x80>)
    3de6:	2106      	movs	r1, #6
    3de8:	0020      	movs	r0, r4
    3dea:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3dec:	2106      	movs	r1, #6
    3dee:	0020      	movs	r0, r4
    3df0:	47a8      	blx	r5
#endif
}
    3df2:	bd70      	pop	{r4, r5, r6, pc}
    3df4:	00003169 	.word	0x00003169
    3df8:	200004a8 	.word	0x200004a8
    3dfc:	000037b1 	.word	0x000037b1
    3e00:	00004661 	.word	0x00004661
    3e04:	0000379d 	.word	0x0000379d
    3e08:	000034d1 	.word	0x000034d1
    3e0c:	00003461 	.word	0x00003461
    3e10:	00004685 	.word	0x00004685
    3e14:	0000342d 	.word	0x0000342d

00003e18 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3e18:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3e1a:	2100      	movs	r1, #0
    3e1c:	200e      	movs	r0, #14
    3e1e:	4b08      	ldr	r3, [pc, #32]	; (3e40 <_uhd_vbus_handler+0x28>)
    3e20:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3e22:	4b08      	ldr	r3, [pc, #32]	; (3e44 <_uhd_vbus_handler+0x2c>)
    3e24:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3e26:	045b      	lsls	r3, r3, #17
    3e28:	d406      	bmi.n	3e38 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3e2a:	4b07      	ldr	r3, [pc, #28]	; (3e48 <_uhd_vbus_handler+0x30>)
    3e2c:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3e2e:	2100      	movs	r1, #0
    3e30:	200e      	movs	r0, #14
    3e32:	4b06      	ldr	r3, [pc, #24]	; (3e4c <_uhd_vbus_handler+0x34>)
    3e34:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3e36:	bd10      	pop	{r4, pc}
		udd_attach();
    3e38:	4b05      	ldr	r3, [pc, #20]	; (3e50 <_uhd_vbus_handler+0x38>)
    3e3a:	4798      	blx	r3
    3e3c:	e7f7      	b.n	3e2e <_uhd_vbus_handler+0x16>
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	00005549 	.word	0x00005549
    3e44:	41004400 	.word	0x41004400
    3e48:	00003d75 	.word	0x00003d75
    3e4c:	00005529 	.word	0x00005529
    3e50:	00003d95 	.word	0x00003d95

00003e54 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3e54:	b570      	push	{r4, r5, r6, lr}
    3e56:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e58:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3e5c:	425a      	negs	r2, r3
    3e5e:	4153      	adcs	r3, r2
    3e60:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3e62:	b672      	cpsid	i
    3e64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e68:	2600      	movs	r6, #0
    3e6a:	4b29      	ldr	r3, [pc, #164]	; (3f10 <udd_enable+0xbc>)
    3e6c:	701e      	strb	r6, [r3, #0]
	return flags;
    3e6e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3e70:	ac05      	add	r4, sp, #20
    3e72:	0020      	movs	r0, r4
    3e74:	4b27      	ldr	r3, [pc, #156]	; (3f14 <udd_enable+0xc0>)
    3e76:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3e78:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3e7a:	4e27      	ldr	r6, [pc, #156]	; (3f18 <udd_enable+0xc4>)
    3e7c:	0022      	movs	r2, r4
    3e7e:	4927      	ldr	r1, [pc, #156]	; (3f1c <udd_enable+0xc8>)
    3e80:	0030      	movs	r0, r6
    3e82:	4b27      	ldr	r3, [pc, #156]	; (3f20 <udd_enable+0xcc>)
    3e84:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3e86:	0030      	movs	r0, r6
    3e88:	4b26      	ldr	r3, [pc, #152]	; (3f24 <udd_enable+0xd0>)
    3e8a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3e8c:	4b26      	ldr	r3, [pc, #152]	; (3f28 <udd_enable+0xd4>)
    3e8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3e90:	069b      	lsls	r3, r3, #26
    3e92:	d434      	bmi.n	3efe <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3e94:	4924      	ldr	r1, [pc, #144]	; (3f28 <udd_enable+0xd4>)
    3e96:	22d0      	movs	r2, #208	; 0xd0
    3e98:	68cb      	ldr	r3, [r1, #12]
    3e9a:	4013      	ands	r3, r2
    3e9c:	2bd0      	cmp	r3, #208	; 0xd0
    3e9e:	d1fb      	bne.n	3e98 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3ea0:	2001      	movs	r0, #1
    3ea2:	4b22      	ldr	r3, [pc, #136]	; (3f2c <udd_enable+0xd8>)
    3ea4:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3ea6:	ac02      	add	r4, sp, #8
    3ea8:	0020      	movs	r0, r4
    3eaa:	4b21      	ldr	r3, [pc, #132]	; (3f30 <udd_enable+0xdc>)
    3eac:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3eae:	230e      	movs	r3, #14
    3eb0:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3eb2:	2300      	movs	r3, #0
    3eb4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3eb6:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3eb8:	3303      	adds	r3, #3
    3eba:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3ebc:	3b02      	subs	r3, #2
    3ebe:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3ec0:	2100      	movs	r1, #0
    3ec2:	200e      	movs	r0, #14
    3ec4:	4b1b      	ldr	r3, [pc, #108]	; (3f34 <udd_enable+0xe0>)
    3ec6:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3ec8:	0021      	movs	r1, r4
    3eca:	200e      	movs	r0, #14
    3ecc:	4b1a      	ldr	r3, [pc, #104]	; (3f38 <udd_enable+0xe4>)
    3ece:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3ed0:	2200      	movs	r2, #0
    3ed2:	210e      	movs	r1, #14
    3ed4:	4819      	ldr	r0, [pc, #100]	; (3f3c <udd_enable+0xe8>)
    3ed6:	4b1a      	ldr	r3, [pc, #104]	; (3f40 <udd_enable+0xec>)
    3ed8:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3eda:	2100      	movs	r1, #0
    3edc:	200e      	movs	r0, #14
    3ede:	4b19      	ldr	r3, [pc, #100]	; (3f44 <udd_enable+0xf0>)
    3ee0:	4798      	blx	r3
    3ee2:	4b19      	ldr	r3, [pc, #100]	; (3f48 <udd_enable+0xf4>)
    3ee4:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3ee6:	045b      	lsls	r3, r3, #17
    3ee8:	d40f      	bmi.n	3f0a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3eea:	2d00      	cmp	r5, #0
    3eec:	d005      	beq.n	3efa <udd_enable+0xa6>
		cpu_irq_enable();
    3eee:	2201      	movs	r2, #1
    3ef0:	4b07      	ldr	r3, [pc, #28]	; (3f10 <udd_enable+0xbc>)
    3ef2:	701a      	strb	r2, [r3, #0]
    3ef4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ef8:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3efa:	b006      	add	sp, #24
    3efc:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3efe:	490a      	ldr	r1, [pc, #40]	; (3f28 <udd_enable+0xd4>)
    3f00:	2210      	movs	r2, #16
    3f02:	68cb      	ldr	r3, [r1, #12]
    3f04:	421a      	tst	r2, r3
    3f06:	d0fc      	beq.n	3f02 <udd_enable+0xae>
    3f08:	e7ca      	b.n	3ea0 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3f0a:	4b0c      	ldr	r3, [pc, #48]	; (3f3c <udd_enable+0xe8>)
    3f0c:	4798      	blx	r3
    3f0e:	e7ec      	b.n	3eea <udd_enable+0x96>
    3f10:	200000f9 	.word	0x200000f9
    3f14:	000052ed 	.word	0x000052ed
    3f18:	200004a8 	.word	0x200004a8
    3f1c:	41005000 	.word	0x41005000
    3f20:	000052fd 	.word	0x000052fd
    3f24:	00004d11 	.word	0x00004d11
    3f28:	40000800 	.word	0x40000800
    3f2c:	00003169 	.word	0x00003169
    3f30:	00002399 	.word	0x00002399
    3f34:	00005549 	.word	0x00005549
    3f38:	000023ad 	.word	0x000023ad
    3f3c:	00003e19 	.word	0x00003e19
    3f40:	000054fd 	.word	0x000054fd
    3f44:	00005529 	.word	0x00005529
    3f48:	41004400 	.word	0x41004400

00003f4c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f4e:	46c6      	mov	lr, r8
    3f50:	b500      	push	{lr}
    3f52:	000c      	movs	r4, r1
    3f54:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3f56:	2800      	cmp	r0, #0
    3f58:	d10f      	bne.n	3f7a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3f5a:	2a00      	cmp	r2, #0
    3f5c:	dd11      	ble.n	3f82 <_read+0x36>
    3f5e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3f60:	4e09      	ldr	r6, [pc, #36]	; (3f88 <_read+0x3c>)
    3f62:	4d0a      	ldr	r5, [pc, #40]	; (3f8c <_read+0x40>)
    3f64:	6830      	ldr	r0, [r6, #0]
    3f66:	0021      	movs	r1, r4
    3f68:	682b      	ldr	r3, [r5, #0]
    3f6a:	4798      	blx	r3
		ptr++;
    3f6c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3f6e:	42bc      	cmp	r4, r7
    3f70:	d1f8      	bne.n	3f64 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3f72:	4640      	mov	r0, r8
    3f74:	bc04      	pop	{r2}
    3f76:	4690      	mov	r8, r2
    3f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3f7a:	2301      	movs	r3, #1
    3f7c:	425b      	negs	r3, r3
    3f7e:	4698      	mov	r8, r3
    3f80:	e7f7      	b.n	3f72 <_read+0x26>
	for (; len > 0; --len) {
    3f82:	4680      	mov	r8, r0
    3f84:	e7f5      	b.n	3f72 <_read+0x26>
    3f86:	46c0      	nop			; (mov r8, r8)
    3f88:	20000670 	.word	0x20000670
    3f8c:	20000668 	.word	0x20000668

00003f90 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	46c6      	mov	lr, r8
    3f94:	b500      	push	{lr}
    3f96:	000e      	movs	r6, r1
    3f98:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3f9a:	3801      	subs	r0, #1
    3f9c:	2802      	cmp	r0, #2
    3f9e:	d810      	bhi.n	3fc2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3fa0:	2a00      	cmp	r2, #0
    3fa2:	d011      	beq.n	3fc8 <_write+0x38>
    3fa4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3fa6:	4b0c      	ldr	r3, [pc, #48]	; (3fd8 <_write+0x48>)
    3fa8:	4698      	mov	r8, r3
    3faa:	4f0c      	ldr	r7, [pc, #48]	; (3fdc <_write+0x4c>)
    3fac:	4643      	mov	r3, r8
    3fae:	6818      	ldr	r0, [r3, #0]
    3fb0:	5d31      	ldrb	r1, [r6, r4]
    3fb2:	683b      	ldr	r3, [r7, #0]
    3fb4:	4798      	blx	r3
    3fb6:	2800      	cmp	r0, #0
    3fb8:	db08      	blt.n	3fcc <_write+0x3c>
			return -1;
		}
		++nChars;
    3fba:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3fbc:	42a5      	cmp	r5, r4
    3fbe:	d1f5      	bne.n	3fac <_write+0x1c>
    3fc0:	e006      	b.n	3fd0 <_write+0x40>
		return -1;
    3fc2:	2401      	movs	r4, #1
    3fc4:	4264      	negs	r4, r4
    3fc6:	e003      	b.n	3fd0 <_write+0x40>
	for (; len != 0; --len) {
    3fc8:	0014      	movs	r4, r2
    3fca:	e001      	b.n	3fd0 <_write+0x40>
			return -1;
    3fcc:	2401      	movs	r4, #1
    3fce:	4264      	negs	r4, r4
	}
	return nChars;
}
    3fd0:	0020      	movs	r0, r4
    3fd2:	bc04      	pop	{r2}
    3fd4:	4690      	mov	r8, r2
    3fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd8:	20000670 	.word	0x20000670
    3fdc:	2000066c 	.word	0x2000066c

00003fe0 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    3fe0:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d001      	beq.n	3fea <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    3fe6:	0018      	movs	r0, r3
    3fe8:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    3fea:	4b07      	ldr	r3, [pc, #28]	; (4008 <f_mount+0x28>)
    3fec:	681b      	ldr	r3, [r3, #0]
	if (rfs) {
    3fee:	2b00      	cmp	r3, #0
    3ff0:	d001      	beq.n	3ff6 <f_mount+0x16>
		rfs->fs_type = 0;		/* Clear old fs object */
    3ff2:	2200      	movs	r2, #0
    3ff4:	701a      	strb	r2, [r3, #0]
	if (fs) {
    3ff6:	2900      	cmp	r1, #0
    3ff8:	d001      	beq.n	3ffe <f_mount+0x1e>
		fs->fs_type = 0;		/* Clear new fs object */
    3ffa:	2300      	movs	r3, #0
    3ffc:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    3ffe:	4b02      	ldr	r3, [pc, #8]	; (4008 <f_mount+0x28>)
    4000:	6019      	str	r1, [r3, #0]
	return FR_OK;
    4002:	2300      	movs	r3, #0
    4004:	e7ef      	b.n	3fe6 <f_mount+0x6>
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	20000290 	.word	0x20000290

0000400c <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    400c:	b570      	push	{r4, r5, r6, lr}
    400e:	b088      	sub	sp, #32
	irq_initialize_vectors();
	cpu_irq_enable();
    4010:	2501      	movs	r5, #1
    4012:	4b3b      	ldr	r3, [pc, #236]	; (4100 <main+0xf4>)
    4014:	701d      	strb	r5, [r3, #0]
    4016:	f3bf 8f5f 	dmb	sy
    401a:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    401c:	4b39      	ldr	r3, [pc, #228]	; (4104 <main+0xf8>)
    401e:	2400      	movs	r4, #0
    4020:	701c      	strb	r4, [r3, #0]
    4022:	705c      	strb	r4, [r3, #1]
    4024:	709c      	strb	r4, [r3, #2]
    4026:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    4028:	711d      	strb	r5, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    402a:	4b37      	ldr	r3, [pc, #220]	; (4108 <main+0xfc>)
    402c:	4798      	blx	r3
	
	delay_init();
    402e:	4b37      	ldr	r3, [pc, #220]	; (410c <main+0x100>)
    4030:	4798      	blx	r3
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    4032:	aa03      	add	r2, sp, #12
    4034:	23a0      	movs	r3, #160	; 0xa0
    4036:	011b      	lsls	r3, r3, #4
    4038:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    403a:	7094      	strb	r4, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    403c:	70d4      	strb	r4, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    403e:	23fa      	movs	r3, #250	; 0xfa
    4040:	00db      	lsls	r3, r3, #3
    4042:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    4044:	7214      	strb	r4, [r2, #8]
    4046:	7254      	strb	r4, [r2, #9]
    4048:	7294      	strb	r4, [r2, #10]
    404a:	72d4      	strb	r4, [r2, #11]
    404c:	7315      	strb	r5, [r2, #12]
    404e:	7355      	strb	r5, [r2, #13]
    4050:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    4052:	2306      	movs	r3, #6
    4054:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    4056:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    4058:	4c2d      	ldr	r4, [pc, #180]	; (4110 <main+0x104>)
    405a:	492e      	ldr	r1, [pc, #184]	; (4114 <main+0x108>)
    405c:	0020      	movs	r0, r4
    405e:	4b2e      	ldr	r3, [pc, #184]	; (4118 <main+0x10c>)
    4060:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    4062:	0020      	movs	r0, r4
    4064:	4b2d      	ldr	r3, [pc, #180]	; (411c <main+0x110>)
    4066:	4798      	blx	r3
	current_time.year = 2018;
    4068:	a901      	add	r1, sp, #4
    406a:	4b2d      	ldr	r3, [pc, #180]	; (4120 <main+0x114>)
    406c:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    406e:	2302      	movs	r3, #2
    4070:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    4072:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    4074:	3309      	adds	r3, #9
    4076:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    4078:	331c      	adds	r3, #28
    407a:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    407c:	3303      	adds	r3, #3
    407e:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    4080:	0020      	movs	r0, r4
    4082:	4b28      	ldr	r3, [pc, #160]	; (4124 <main+0x118>)
    4084:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    4086:	0020      	movs	r0, r4
    4088:	4b27      	ldr	r3, [pc, #156]	; (4128 <main+0x11c>)
    408a:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    408c:	4b27      	ldr	r3, [pc, #156]	; (412c <main+0x120>)
    408e:	4798      	blx	r3
	ui_powerdown();
    4090:	4b27      	ldr	r3, [pc, #156]	; (4130 <main+0x124>)
    4092:	4798      	blx	r3
	ui_cdc_init();
    4094:	4b27      	ldr	r3, [pc, #156]	; (4134 <main+0x128>)
    4096:	4798      	blx	r3
	
	audio_in_init();
    4098:	4b27      	ldr	r3, [pc, #156]	; (4138 <main+0x12c>)
    409a:	4798      	blx	r3
	audio_sync_init();
    409c:	4b27      	ldr	r3, [pc, #156]	; (413c <main+0x130>)
    409e:	4798      	blx	r3
	
	sd_mmc_init();
    40a0:	4b27      	ldr	r3, [pc, #156]	; (4140 <main+0x134>)
    40a2:	4798      	blx	r3

	memories_initialization();
    40a4:	4b27      	ldr	r3, [pc, #156]	; (4144 <main+0x138>)
    40a6:	4798      	blx	r3

	ui_configure_callback();
    40a8:	4b27      	ldr	r3, [pc, #156]	; (4148 <main+0x13c>)
    40aa:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    40ac:	4b27      	ldr	r3, [pc, #156]	; (414c <main+0x140>)
    40ae:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_request) {
    40b0:	4c27      	ldr	r4, [pc, #156]	; (4150 <main+0x144>)
				}
				recording_request = false;
			}
		}
		
		else if(recording_on) {
    40b2:	4d28      	ldr	r5, [pc, #160]	; (4154 <main+0x148>)

		}
		
		else if (main_b_msc_enable) {
    40b4:	4e28      	ldr	r6, [pc, #160]	; (4158 <main+0x14c>)
    40b6:	e003      	b.n	40c0 <main+0xb4>
			if(sd_test_availability()) {
    40b8:	4b28      	ldr	r3, [pc, #160]	; (415c <main+0x150>)
    40ba:	4798      	blx	r3
    40bc:	2800      	cmp	r0, #0
    40be:	d10b      	bne.n	40d8 <main+0xcc>
		if(recording_request) {
    40c0:	7823      	ldrb	r3, [r4, #0]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d1f8      	bne.n	40b8 <main+0xac>
		else if(recording_on) {
    40c6:	782b      	ldrb	r3, [r5, #0]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d1f9      	bne.n	40c0 <main+0xb4>
		else if (main_b_msc_enable) {
    40cc:	7833      	ldrb	r3, [r6, #0]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d0f6      	beq.n	40c0 <main+0xb4>
			if (!udi_msc_process_trans()) {
    40d2:	4b23      	ldr	r3, [pc, #140]	; (4160 <main+0x154>)
    40d4:	4798      	blx	r3
    40d6:	e7f3      	b.n	40c0 <main+0xb4>
				if(sd_mount_fs()) {
    40d8:	4b22      	ldr	r3, [pc, #136]	; (4164 <main+0x158>)
    40da:	4798      	blx	r3
    40dc:	2800      	cmp	r0, #0
    40de:	d00b      	beq.n	40f8 <main+0xec>
					printf("SD card mounted!\n\r");
    40e0:	4821      	ldr	r0, [pc, #132]	; (4168 <main+0x15c>)
    40e2:	4b22      	ldr	r3, [pc, #136]	; (416c <main+0x160>)
    40e4:	4798      	blx	r3
					audio_record_init();
    40e6:	4b22      	ldr	r3, [pc, #136]	; (4170 <main+0x164>)
    40e8:	4798      	blx	r3
					recording_on = true;
    40ea:	2201      	movs	r2, #1
    40ec:	4b19      	ldr	r3, [pc, #100]	; (4154 <main+0x148>)
    40ee:	701a      	strb	r2, [r3, #0]
				recording_request = false;
    40f0:	2200      	movs	r2, #0
    40f2:	4b17      	ldr	r3, [pc, #92]	; (4150 <main+0x144>)
    40f4:	701a      	strb	r2, [r3, #0]
    40f6:	e7e3      	b.n	40c0 <main+0xb4>
					printf("Invalid drive!!\n\r");
    40f8:	481e      	ldr	r0, [pc, #120]	; (4174 <main+0x168>)
    40fa:	4b1c      	ldr	r3, [pc, #112]	; (416c <main+0x160>)
    40fc:	4798      	blx	r3
    40fe:	e7f7      	b.n	40f0 <main+0xe4>
    4100:	200000f9 	.word	0x200000f9
    4104:	20001058 	.word	0x20001058
    4108:	00006f45 	.word	0x00006f45
    410c:	000060f9 	.word	0x000060f9
    4110:	20000674 	.word	0x20000674
    4114:	40001400 	.word	0x40001400
    4118:	00002581 	.word	0x00002581
    411c:	00002425 	.word	0x00002425
    4120:	000007e2 	.word	0x000007e2
    4124:	000024f1 	.word	0x000024f1
    4128:	0000263d 	.word	0x0000263d
    412c:	0000452d 	.word	0x0000452d
    4130:	00004615 	.word	0x00004615
    4134:	00004439 	.word	0x00004439
    4138:	00000775 	.word	0x00000775
    413c:	000009c1 	.word	0x000009c1
    4140:	00000c7d 	.word	0x00000c7d
    4144:	000041d1 	.word	0x000041d1
    4148:	000045cd 	.word	0x000045cd
    414c:	00001e25 	.word	0x00001e25
    4150:	2000035f 	.word	0x2000035f
    4154:	2000035e 	.word	0x2000035e
    4158:	2000035c 	.word	0x2000035c
    415c:	000041d5 	.word	0x000041d5
    4160:	00001b45 	.word	0x00001b45
    4164:	000042b9 	.word	0x000042b9
    4168:	00008ce4 	.word	0x00008ce4
    416c:	00007695 	.word	0x00007695
    4170:	00000855 	.word	0x00000855
    4174:	00008cf8 	.word	0x00008cf8

00004178 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    4178:	b510      	push	{r4, lr}
	ui_powerdown();
    417a:	4b01      	ldr	r3, [pc, #4]	; (4180 <main_suspend_action+0x8>)
    417c:	4798      	blx	r3
}
    417e:	bd10      	pop	{r4, pc}
    4180:	00004615 	.word	0x00004615

00004184 <main_resume_action>:

void main_resume_action(void)
{
    4184:	b510      	push	{r4, lr}
	ui_wakeup();
    4186:	4b01      	ldr	r3, [pc, #4]	; (418c <main_resume_action+0x8>)
    4188:	4798      	blx	r3
}
    418a:	bd10      	pop	{r4, pc}
    418c:	00004625 	.word	0x00004625

00004190 <main_sof_action>:

void main_sof_action(void)
{
    4190:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    4192:	4b05      	ldr	r3, [pc, #20]	; (41a8 <main_sof_action+0x18>)
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	2b00      	cmp	r3, #0
    4198:	d100      	bne.n	419c <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    419a:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    419c:	4b03      	ldr	r3, [pc, #12]	; (41ac <main_sof_action+0x1c>)
    419e:	4798      	blx	r3
    41a0:	4b03      	ldr	r3, [pc, #12]	; (41b0 <main_sof_action+0x20>)
    41a2:	4798      	blx	r3
    41a4:	e7f9      	b.n	419a <main_sof_action+0xa>
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	2000035c 	.word	0x2000035c
    41ac:	00003821 	.word	0x00003821
    41b0:	0000463d 	.word	0x0000463d

000041b4 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    41b4:	2201      	movs	r2, #1
    41b6:	4b02      	ldr	r3, [pc, #8]	; (41c0 <main_msc_enable+0xc>)
    41b8:	701a      	strb	r2, [r3, #0]
	return true;
}
    41ba:	2001      	movs	r0, #1
    41bc:	4770      	bx	lr
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	2000035c 	.word	0x2000035c

000041c4 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    41c4:	2200      	movs	r2, #0
    41c6:	4b01      	ldr	r3, [pc, #4]	; (41cc <main_msc_disable+0x8>)
    41c8:	701a      	strb	r2, [r3, #0]
}
    41ca:	4770      	bx	lr
    41cc:	2000035c 	.word	0x2000035c

000041d0 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    41d0:	4770      	bx	lr
	...

000041d4 <sd_test_availability>:
FIL file_object;

extern bool recording_request;

bool sd_test_availability(void)
{
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    41d6:	4c2b      	ldr	r4, [pc, #172]	; (4284 <sd_test_availability+0xb0>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    41d8:	4d2b      	ldr	r5, [pc, #172]	; (4288 <sd_test_availability+0xb4>)
    41da:	e027      	b.n	422c <sd_test_availability+0x58>
			printf("Card install fail!\n\r");
    41dc:	482b      	ldr	r0, [pc, #172]	; (428c <sd_test_availability+0xb8>)
    41de:	4e2c      	ldr	r6, [pc, #176]	; (4290 <sd_test_availability+0xbc>)
    41e0:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    41e2:	482c      	ldr	r0, [pc, #176]	; (4294 <sd_test_availability+0xc0>)
    41e4:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    41e6:	4e2c      	ldr	r6, [pc, #176]	; (4298 <sd_test_availability+0xc4>)
    41e8:	2000      	movs	r0, #0
    41ea:	47b0      	blx	r6
    41ec:	2802      	cmp	r0, #2
    41ee:	d1fb      	bne.n	41e8 <sd_test_availability+0x14>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    41f0:	4b2a      	ldr	r3, [pc, #168]	; (429c <sd_test_availability+0xc8>)
    41f2:	2280      	movs	r2, #128	; 0x80
    41f4:	0152      	lsls	r2, r2, #5
    41f6:	61da      	str	r2, [r3, #28]
    41f8:	2280      	movs	r2, #128	; 0x80
    41fa:	0212      	lsls	r2, r2, #8
    41fc:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    41fe:	2000      	movs	r0, #0
    4200:	4b21      	ldr	r3, [pc, #132]	; (4288 <sd_test_availability+0xb4>)
    4202:	4798      	blx	r3
    4204:	2296      	movs	r2, #150	; 0x96
    4206:	0052      	lsls	r2, r2, #1
    4208:	2300      	movs	r3, #0
    420a:	2100      	movs	r1, #0
    420c:	4e24      	ldr	r6, [pc, #144]	; (42a0 <sd_test_availability+0xcc>)
    420e:	47b0      	blx	r6
    4210:	4a24      	ldr	r2, [pc, #144]	; (42a4 <sd_test_availability+0xd0>)
    4212:	2300      	movs	r3, #0
    4214:	1880      	adds	r0, r0, r2
    4216:	4159      	adcs	r1, r3
    4218:	4a23      	ldr	r2, [pc, #140]	; (42a8 <sd_test_availability+0xd4>)
    421a:	2300      	movs	r3, #0
    421c:	4e23      	ldr	r6, [pc, #140]	; (42ac <sd_test_availability+0xd8>)
    421e:	47b0      	blx	r6
    4220:	4b23      	ldr	r3, [pc, #140]	; (42b0 <sd_test_availability+0xdc>)
    4222:	4798      	blx	r3
		if(!recording_request) {
    4224:	4b23      	ldr	r3, [pc, #140]	; (42b4 <sd_test_availability+0xe0>)
    4226:	7818      	ldrb	r0, [r3, #0]
    4228:	2800      	cmp	r0, #0
    422a:	d023      	beq.n	4274 <sd_test_availability+0xa0>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    422c:	2000      	movs	r0, #0
    422e:	47a0      	blx	r4
    4230:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    4232:	2801      	cmp	r0, #1
    4234:	d0d2      	beq.n	41dc <sd_test_availability+0x8>
    4236:	4b19      	ldr	r3, [pc, #100]	; (429c <sd_test_availability+0xc8>)
    4238:	2280      	movs	r2, #128	; 0x80
    423a:	0152      	lsls	r2, r2, #5
    423c:	61da      	str	r2, [r3, #28]
    423e:	2280      	movs	r2, #128	; 0x80
    4240:	0212      	lsls	r2, r2, #8
    4242:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    4244:	2000      	movs	r0, #0
    4246:	47a8      	blx	r5
    4248:	2296      	movs	r2, #150	; 0x96
    424a:	0052      	lsls	r2, r2, #1
    424c:	2300      	movs	r3, #0
    424e:	2100      	movs	r1, #0
    4250:	4f13      	ldr	r7, [pc, #76]	; (42a0 <sd_test_availability+0xcc>)
    4252:	47b8      	blx	r7
    4254:	4a13      	ldr	r2, [pc, #76]	; (42a4 <sd_test_availability+0xd0>)
    4256:	2300      	movs	r3, #0
    4258:	1880      	adds	r0, r0, r2
    425a:	4159      	adcs	r1, r3
    425c:	4a12      	ldr	r2, [pc, #72]	; (42a8 <sd_test_availability+0xd4>)
    425e:	2300      	movs	r3, #0
    4260:	4f12      	ldr	r7, [pc, #72]	; (42ac <sd_test_availability+0xd8>)
    4262:	47b8      	blx	r7
    4264:	4b12      	ldr	r3, [pc, #72]	; (42b0 <sd_test_availability+0xdc>)
    4266:	4798      	blx	r3
		if(!recording_request) {
    4268:	4b12      	ldr	r3, [pc, #72]	; (42b4 <sd_test_availability+0xe0>)
    426a:	7818      	ldrb	r0, [r3, #0]
    426c:	2800      	cmp	r0, #0
    426e:	d001      	beq.n	4274 <sd_test_availability+0xa0>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    4270:	2e00      	cmp	r6, #0
    4272:	d1db      	bne.n	422c <sd_test_availability+0x58>
		port_base->OUTSET.reg = pin_mask;
    4274:	4b09      	ldr	r3, [pc, #36]	; (429c <sd_test_availability+0xc8>)
    4276:	2280      	movs	r2, #128	; 0x80
    4278:	0152      	lsls	r2, r2, #5
    427a:	619a      	str	r2, [r3, #24]
    427c:	2280      	movs	r2, #128	; 0x80
    427e:	0212      	lsls	r2, r2, #8
    4280:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
}
    4282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4284:	000060fd 	.word	0x000060fd
    4288:	00006d01 	.word	0x00006d01
    428c:	00008d0c 	.word	0x00008d0c
    4290:	00007695 	.word	0x00007695
    4294:	00008d24 	.word	0x00008d24
    4298:	00000c9d 	.word	0x00000c9d
    429c:	41004400 	.word	0x41004400
    42a0:	0000743d 	.word	0x0000743d
    42a4:	00001b57 	.word	0x00001b57
    42a8:	00001b58 	.word	0x00001b58
    42ac:	000073fd 	.word	0x000073fd
    42b0:	20000001 	.word	0x20000001
    42b4:	2000035f 	.word	0x2000035f

000042b8 <sd_mount_fs>:

bool sd_mount_fs(void)
{
    42b8:	b510      	push	{r4, lr}
	FRESULT res;
	memset(&file_sys, 0, sizeof(FATFS));
    42ba:	4c08      	ldr	r4, [pc, #32]	; (42dc <sd_mount_fs+0x24>)
    42bc:	228c      	movs	r2, #140	; 0x8c
    42be:	0092      	lsls	r2, r2, #2
    42c0:	2100      	movs	r1, #0
    42c2:	0020      	movs	r0, r4
    42c4:	4b06      	ldr	r3, [pc, #24]	; (42e0 <sd_mount_fs+0x28>)
    42c6:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    42c8:	0021      	movs	r1, r4
    42ca:	2000      	movs	r0, #0
    42cc:	4b05      	ldr	r3, [pc, #20]	; (42e4 <sd_mount_fs+0x2c>)
    42ce:	4798      	blx	r3
	if(res == FR_INVALID_DRIVE) {
    42d0:	380b      	subs	r0, #11
    42d2:	1e43      	subs	r3, r0, #1
    42d4:	4198      	sbcs	r0, r3
    42d6:	b2c0      	uxtb	r0, r0
		return false;
	}
	return true;
    42d8:	bd10      	pop	{r4, pc}
    42da:	46c0      	nop			; (mov r8, r8)
    42dc:	20000924 	.word	0x20000924
    42e0:	00007683 	.word	0x00007683
    42e4:	00003fe1 	.word	0x00003fe1

000042e8 <ui_button2_callback>:
	}
}

void ui_button2_callback(void)
{
}
    42e8:	4770      	bx	lr
	...

000042ec <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    42ec:	b570      	push	{r4, r5, r6, lr}
    42ee:	b082      	sub	sp, #8
    42f0:	0005      	movs	r5, r0
    42f2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    42f4:	2200      	movs	r2, #0
    42f6:	466b      	mov	r3, sp
    42f8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    42fa:	4c06      	ldr	r4, [pc, #24]	; (4314 <usart_serial_getchar+0x28>)
    42fc:	466b      	mov	r3, sp
    42fe:	1d99      	adds	r1, r3, #6
    4300:	0028      	movs	r0, r5
    4302:	47a0      	blx	r4
    4304:	2800      	cmp	r0, #0
    4306:	d1f9      	bne.n	42fc <usart_serial_getchar+0x10>

	*c = temp;
    4308:	466b      	mov	r3, sp
    430a:	3306      	adds	r3, #6
    430c:	881b      	ldrh	r3, [r3, #0]
    430e:	7033      	strb	r3, [r6, #0]
}
    4310:	b002      	add	sp, #8
    4312:	bd70      	pop	{r4, r5, r6, pc}
    4314:	00002b99 	.word	0x00002b99

00004318 <usart_serial_putchar>:
{
    4318:	b570      	push	{r4, r5, r6, lr}
    431a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    431c:	b28c      	uxth	r4, r1
    431e:	4e03      	ldr	r6, [pc, #12]	; (432c <usart_serial_putchar+0x14>)
    4320:	0021      	movs	r1, r4
    4322:	0028      	movs	r0, r5
    4324:	47b0      	blx	r6
    4326:	2800      	cmp	r0, #0
    4328:	d1fa      	bne.n	4320 <usart_serial_putchar+0x8>
}
    432a:	bd70      	pop	{r4, r5, r6, pc}
    432c:	00002b6d 	.word	0x00002b6d

00004330 <ui_button1_callback>:
{
    4330:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    4332:	4b18      	ldr	r3, [pc, #96]	; (4394 <ui_button1_callback+0x64>)
    4334:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    4336:	00db      	lsls	r3, r3, #3
    4338:	d500      	bpl.n	433c <ui_button1_callback+0xc>
}
    433a:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    433c:	2000      	movs	r0, #0
    433e:	4b16      	ldr	r3, [pc, #88]	; (4398 <ui_button1_callback+0x68>)
    4340:	4798      	blx	r3
    4342:	2264      	movs	r2, #100	; 0x64
    4344:	2300      	movs	r3, #0
    4346:	2100      	movs	r1, #0
    4348:	4c14      	ldr	r4, [pc, #80]	; (439c <ui_button1_callback+0x6c>)
    434a:	47a0      	blx	r4
    434c:	4a14      	ldr	r2, [pc, #80]	; (43a0 <ui_button1_callback+0x70>)
    434e:	2300      	movs	r3, #0
    4350:	1880      	adds	r0, r0, r2
    4352:	4159      	adcs	r1, r3
    4354:	4a13      	ldr	r2, [pc, #76]	; (43a4 <ui_button1_callback+0x74>)
    4356:	2300      	movs	r3, #0
    4358:	4c13      	ldr	r4, [pc, #76]	; (43a8 <ui_button1_callback+0x78>)
    435a:	47a0      	blx	r4
    435c:	4b13      	ldr	r3, [pc, #76]	; (43ac <ui_button1_callback+0x7c>)
    435e:	4798      	blx	r3
    4360:	4b0c      	ldr	r3, [pc, #48]	; (4394 <ui_button1_callback+0x64>)
    4362:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    4364:	00db      	lsls	r3, r3, #3
    4366:	d4e8      	bmi.n	433a <ui_button1_callback+0xa>
		if(recording_on || recording_request) {
    4368:	4b11      	ldr	r3, [pc, #68]	; (43b0 <ui_button1_callback+0x80>)
    436a:	781b      	ldrb	r3, [r3, #0]
    436c:	2b00      	cmp	r3, #0
    436e:	d107      	bne.n	4380 <ui_button1_callback+0x50>
    4370:	4b10      	ldr	r3, [pc, #64]	; (43b4 <ui_button1_callback+0x84>)
    4372:	781b      	ldrb	r3, [r3, #0]
    4374:	2b00      	cmp	r3, #0
    4376:	d103      	bne.n	4380 <ui_button1_callback+0x50>
			recording_request = true;
    4378:	2201      	movs	r2, #1
    437a:	4b0e      	ldr	r3, [pc, #56]	; (43b4 <ui_button1_callback+0x84>)
    437c:	701a      	strb	r2, [r3, #0]
}
    437e:	e7dc      	b.n	433a <ui_button1_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    4380:	2280      	movs	r2, #128	; 0x80
    4382:	0152      	lsls	r2, r2, #5
    4384:	4b03      	ldr	r3, [pc, #12]	; (4394 <ui_button1_callback+0x64>)
    4386:	619a      	str	r2, [r3, #24]
			recording_request = false;
    4388:	2300      	movs	r3, #0
    438a:	4a0a      	ldr	r2, [pc, #40]	; (43b4 <ui_button1_callback+0x84>)
    438c:	7013      	strb	r3, [r2, #0]
			recording_on = false;
    438e:	4a08      	ldr	r2, [pc, #32]	; (43b0 <ui_button1_callback+0x80>)
    4390:	7013      	strb	r3, [r2, #0]
    4392:	e7d2      	b.n	433a <ui_button1_callback+0xa>
    4394:	41004400 	.word	0x41004400
    4398:	00006d01 	.word	0x00006d01
    439c:	0000743d 	.word	0x0000743d
    43a0:	00001b57 	.word	0x00001b57
    43a4:	00001b58 	.word	0x00001b58
    43a8:	000073fd 	.word	0x000073fd
    43ac:	20000001 	.word	0x20000001
    43b0:	2000035e 	.word	0x2000035e
    43b4:	2000035f 	.word	0x2000035f

000043b8 <ui_button3_callback>:

void ui_button3_callback(void)
{
    43b8:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    43ba:	4b17      	ldr	r3, [pc, #92]	; (4418 <ui_button3_callback+0x60>)
    43bc:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    43be:	071b      	lsls	r3, r3, #28
    43c0:	d500      	bpl.n	43c4 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    43c2:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    43c4:	2000      	movs	r0, #0
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <ui_button3_callback+0x64>)
    43c8:	4798      	blx	r3
    43ca:	2264      	movs	r2, #100	; 0x64
    43cc:	2300      	movs	r3, #0
    43ce:	2100      	movs	r1, #0
    43d0:	4c13      	ldr	r4, [pc, #76]	; (4420 <ui_button3_callback+0x68>)
    43d2:	47a0      	blx	r4
    43d4:	4a13      	ldr	r2, [pc, #76]	; (4424 <ui_button3_callback+0x6c>)
    43d6:	2300      	movs	r3, #0
    43d8:	1880      	adds	r0, r0, r2
    43da:	4159      	adcs	r1, r3
    43dc:	4a12      	ldr	r2, [pc, #72]	; (4428 <ui_button3_callback+0x70>)
    43de:	2300      	movs	r3, #0
    43e0:	4c12      	ldr	r4, [pc, #72]	; (442c <ui_button3_callback+0x74>)
    43e2:	47a0      	blx	r4
    43e4:	4b12      	ldr	r3, [pc, #72]	; (4430 <ui_button3_callback+0x78>)
    43e6:	4798      	blx	r3
    43e8:	4b0b      	ldr	r3, [pc, #44]	; (4418 <ui_button3_callback+0x60>)
    43ea:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    43ec:	071b      	lsls	r3, r3, #28
    43ee:	d4e8      	bmi.n	43c2 <ui_button3_callback+0xa>
		if(monitoring_on) {
    43f0:	4b10      	ldr	r3, [pc, #64]	; (4434 <ui_button3_callback+0x7c>)
    43f2:	781b      	ldrb	r3, [r3, #0]
    43f4:	2b00      	cmp	r3, #0
    43f6:	d107      	bne.n	4408 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    43f8:	2280      	movs	r2, #128	; 0x80
    43fa:	0212      	lsls	r2, r2, #8
    43fc:	4b06      	ldr	r3, [pc, #24]	; (4418 <ui_button3_callback+0x60>)
    43fe:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    4400:	2201      	movs	r2, #1
    4402:	4b0c      	ldr	r3, [pc, #48]	; (4434 <ui_button3_callback+0x7c>)
    4404:	701a      	strb	r2, [r3, #0]
}
    4406:	e7dc      	b.n	43c2 <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    4408:	2280      	movs	r2, #128	; 0x80
    440a:	0212      	lsls	r2, r2, #8
    440c:	4b02      	ldr	r3, [pc, #8]	; (4418 <ui_button3_callback+0x60>)
    440e:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    4410:	2200      	movs	r2, #0
    4412:	4b08      	ldr	r3, [pc, #32]	; (4434 <ui_button3_callback+0x7c>)
    4414:	701a      	strb	r2, [r3, #0]
    4416:	e7d4      	b.n	43c2 <ui_button3_callback+0xa>
    4418:	41004400 	.word	0x41004400
    441c:	00006d01 	.word	0x00006d01
    4420:	0000743d 	.word	0x0000743d
    4424:	00001b57 	.word	0x00001b57
    4428:	00001b58 	.word	0x00001b58
    442c:	000073fd 	.word	0x000073fd
    4430:	20000001 	.word	0x20000001
    4434:	2000035d 	.word	0x2000035d

00004438 <ui_cdc_init>:
{
    4438:	b5f0      	push	{r4, r5, r6, r7, lr}
    443a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    443c:	2380      	movs	r3, #128	; 0x80
    443e:	05db      	lsls	r3, r3, #23
    4440:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4442:	2300      	movs	r3, #0
    4444:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4446:	22ff      	movs	r2, #255	; 0xff
    4448:	4669      	mov	r1, sp
    444a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    444c:	2200      	movs	r2, #0
    444e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4450:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    4452:	2401      	movs	r4, #1
    4454:	2124      	movs	r1, #36	; 0x24
    4456:	4668      	mov	r0, sp
    4458:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    445a:	3101      	adds	r1, #1
    445c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    445e:	3101      	adds	r1, #1
    4460:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    4462:	3101      	adds	r1, #1
    4464:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    4466:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    4468:	3105      	adds	r1, #5
    446a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    446c:	3101      	adds	r1, #1
    446e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4470:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4472:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4474:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    4476:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4478:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    447a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    447c:	2313      	movs	r3, #19
    447e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4480:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    4482:	2380      	movs	r3, #128	; 0x80
    4484:	035b      	lsls	r3, r3, #13
    4486:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    4488:	4b1a      	ldr	r3, [pc, #104]	; (44f4 <ui_cdc_init+0xbc>)
    448a:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    448c:	4b1a      	ldr	r3, [pc, #104]	; (44f8 <ui_cdc_init+0xc0>)
    448e:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    4490:	2301      	movs	r3, #1
    4492:	425b      	negs	r3, r3
    4494:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    4496:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    4498:	23e1      	movs	r3, #225	; 0xe1
    449a:	025b      	lsls	r3, r3, #9
    449c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    449e:	4d17      	ldr	r5, [pc, #92]	; (44fc <ui_cdc_init+0xc4>)
    44a0:	4b17      	ldr	r3, [pc, #92]	; (4500 <ui_cdc_init+0xc8>)
    44a2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    44a4:	4a17      	ldr	r2, [pc, #92]	; (4504 <ui_cdc_init+0xcc>)
    44a6:	4b18      	ldr	r3, [pc, #96]	; (4508 <ui_cdc_init+0xd0>)
    44a8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    44aa:	4a18      	ldr	r2, [pc, #96]	; (450c <ui_cdc_init+0xd4>)
    44ac:	4b18      	ldr	r3, [pc, #96]	; (4510 <ui_cdc_init+0xd8>)
    44ae:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    44b0:	466a      	mov	r2, sp
    44b2:	4918      	ldr	r1, [pc, #96]	; (4514 <ui_cdc_init+0xdc>)
    44b4:	0028      	movs	r0, r5
    44b6:	4b18      	ldr	r3, [pc, #96]	; (4518 <ui_cdc_init+0xe0>)
    44b8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    44ba:	4f18      	ldr	r7, [pc, #96]	; (451c <ui_cdc_init+0xe4>)
    44bc:	683b      	ldr	r3, [r7, #0]
    44be:	6898      	ldr	r0, [r3, #8]
    44c0:	2100      	movs	r1, #0
    44c2:	4e17      	ldr	r6, [pc, #92]	; (4520 <ui_cdc_init+0xe8>)
    44c4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    44c6:	683b      	ldr	r3, [r7, #0]
    44c8:	6858      	ldr	r0, [r3, #4]
    44ca:	2100      	movs	r1, #0
    44cc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    44ce:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    44d0:	0030      	movs	r0, r6
    44d2:	4b14      	ldr	r3, [pc, #80]	; (4524 <ui_cdc_init+0xec>)
    44d4:	4798      	blx	r3
    44d6:	231f      	movs	r3, #31
    44d8:	4018      	ands	r0, r3
    44da:	4084      	lsls	r4, r0
    44dc:	4b12      	ldr	r3, [pc, #72]	; (4528 <ui_cdc_init+0xf0>)
    44de:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    44e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    44e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    44e4:	2b00      	cmp	r3, #0
    44e6:	d1fc      	bne.n	44e2 <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    44e8:	6833      	ldr	r3, [r6, #0]
    44ea:	2202      	movs	r2, #2
    44ec:	4313      	orrs	r3, r2
    44ee:	6033      	str	r3, [r6, #0]
}
    44f0:	b011      	add	sp, #68	; 0x44
    44f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44f4:	00160002 	.word	0x00160002
    44f8:	00170002 	.word	0x00170002
    44fc:	20000688 	.word	0x20000688
    4500:	20000670 	.word	0x20000670
    4504:	00004319 	.word	0x00004319
    4508:	2000066c 	.word	0x2000066c
    450c:	000042ed 	.word	0x000042ed
    4510:	20000668 	.word	0x20000668
    4514:	42001400 	.word	0x42001400
    4518:	00002829 	.word	0x00002829
    451c:	200000fc 	.word	0x200000fc
    4520:	000076c9 	.word	0x000076c9
    4524:	00002799 	.word	0x00002799
    4528:	e000e100 	.word	0xe000e100

0000452c <ui_lb_init>:
{
    452c:	b5f0      	push	{r4, r5, r6, r7, lr}
    452e:	46c6      	mov	lr, r8
    4530:	b500      	push	{lr}
    4532:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    4534:	ac03      	add	r4, sp, #12
    4536:	2501      	movs	r5, #1
    4538:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    453a:	2600      	movs	r6, #0
    453c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    453e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    4540:	0021      	movs	r1, r4
    4542:	200c      	movs	r0, #12
    4544:	4b1c      	ldr	r3, [pc, #112]	; (45b8 <ui_lb_init+0x8c>)
    4546:	4698      	mov	r8, r3
    4548:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    454a:	4f1c      	ldr	r7, [pc, #112]	; (45bc <ui_lb_init+0x90>)
    454c:	2380      	movs	r3, #128	; 0x80
    454e:	015b      	lsls	r3, r3, #5
    4550:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    4552:	0021      	movs	r1, r4
    4554:	200d      	movs	r0, #13
    4556:	47c0      	blx	r8
    4558:	2380      	movs	r3, #128	; 0x80
    455a:	019b      	lsls	r3, r3, #6
    455c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    455e:	0021      	movs	r1, r4
    4560:	200f      	movs	r0, #15
    4562:	47c0      	blx	r8
    4564:	2380      	movs	r3, #128	; 0x80
    4566:	021b      	lsls	r3, r3, #8
    4568:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    456a:	4668      	mov	r0, sp
    456c:	4b14      	ldr	r3, [pc, #80]	; (45c0 <ui_lb_init+0x94>)
    456e:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    4570:	231c      	movs	r3, #28
    4572:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    4574:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    4576:	466b      	mov	r3, sp
    4578:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    457a:	2403      	movs	r4, #3
    457c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    457e:	4669      	mov	r1, sp
    4580:	2008      	movs	r0, #8
    4582:	4f10      	ldr	r7, [pc, #64]	; (45c4 <ui_lb_init+0x98>)
    4584:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    4586:	2302      	movs	r3, #2
    4588:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    458a:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    458c:	466b      	mov	r3, sp
    458e:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    4590:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    4592:	4669      	mov	r1, sp
    4594:	2002      	movs	r0, #2
    4596:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    4598:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    459a:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    459c:	466b      	mov	r3, sp
    459e:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    45a0:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    45a2:	4669      	mov	r1, sp
    45a4:	2003      	movs	r0, #3
    45a6:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    45a8:	2280      	movs	r2, #128	; 0x80
    45aa:	05d2      	lsls	r2, r2, #23
    45ac:	4b06      	ldr	r3, [pc, #24]	; (45c8 <ui_lb_init+0x9c>)
    45ae:	615a      	str	r2, [r3, #20]
}
    45b0:	b004      	add	sp, #16
    45b2:	bc04      	pop	{r2}
    45b4:	4690      	mov	r8, r2
    45b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45b8:	00006bbd 	.word	0x00006bbd
    45bc:	41004400 	.word	0x41004400
    45c0:	00002399 	.word	0x00002399
    45c4:	000023ad 	.word	0x000023ad
    45c8:	41004480 	.word	0x41004480

000045cc <ui_configure_callback>:
{
    45cc:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    45ce:	2200      	movs	r2, #0
    45d0:	2108      	movs	r1, #8
    45d2:	480b      	ldr	r0, [pc, #44]	; (4600 <ui_configure_callback+0x34>)
    45d4:	4c0b      	ldr	r4, [pc, #44]	; (4604 <ui_configure_callback+0x38>)
    45d6:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    45d8:	2200      	movs	r2, #0
    45da:	2102      	movs	r1, #2
    45dc:	480a      	ldr	r0, [pc, #40]	; (4608 <ui_configure_callback+0x3c>)
    45de:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    45e0:	2200      	movs	r2, #0
    45e2:	2103      	movs	r1, #3
    45e4:	4809      	ldr	r0, [pc, #36]	; (460c <ui_configure_callback+0x40>)
    45e6:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    45e8:	2100      	movs	r1, #0
    45ea:	2008      	movs	r0, #8
    45ec:	4c08      	ldr	r4, [pc, #32]	; (4610 <ui_configure_callback+0x44>)
    45ee:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    45f0:	2100      	movs	r1, #0
    45f2:	2002      	movs	r0, #2
    45f4:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    45f6:	2100      	movs	r1, #0
    45f8:	2003      	movs	r0, #3
    45fa:	47a0      	blx	r4
}
    45fc:	bd10      	pop	{r4, pc}
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	00004331 	.word	0x00004331
    4604:	000054fd 	.word	0x000054fd
    4608:	000042e9 	.word	0x000042e9
    460c:	000043b9 	.word	0x000043b9
    4610:	00005529 	.word	0x00005529

00004614 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    4614:	2280      	movs	r2, #128	; 0x80
    4616:	05d2      	lsls	r2, r2, #23
    4618:	4b01      	ldr	r3, [pc, #4]	; (4620 <ui_powerdown+0xc>)
    461a:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    461c:	4770      	bx	lr
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	41004480 	.word	0x41004480

00004624 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    4624:	2280      	movs	r2, #128	; 0x80
    4626:	05d2      	lsls	r2, r2, #23
    4628:	4b01      	ldr	r3, [pc, #4]	; (4630 <ui_wakeup+0xc>)
    462a:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    462c:	4770      	bx	lr
    462e:	46c0      	nop			; (mov r8, r8)
    4630:	41004480 	.word	0x41004480

00004634 <ui_start_read>:

void ui_start_read(void)
{
}
    4634:	4770      	bx	lr

00004636 <ui_stop_read>:

void ui_stop_read(void)
{
}
    4636:	4770      	bx	lr

00004638 <ui_start_write>:

void ui_start_write(void)
{
}
    4638:	4770      	bx	lr

0000463a <ui_stop_write>:

void ui_stop_write(void)
{
}
    463a:	4770      	bx	lr

0000463c <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    463c:	2800      	cmp	r0, #0
    463e:	d104      	bne.n	464a <ui_process+0xe>
    4640:	2280      	movs	r2, #128	; 0x80
    4642:	05d2      	lsls	r2, r2, #23
    4644:	4b05      	ldr	r3, [pc, #20]	; (465c <ui_process+0x20>)
    4646:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    4648:	4770      	bx	lr
	if (1000 == framenumber) {
    464a:	23fa      	movs	r3, #250	; 0xfa
    464c:	009b      	lsls	r3, r3, #2
    464e:	4298      	cmp	r0, r3
    4650:	d1fa      	bne.n	4648 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    4652:	2280      	movs	r2, #128	; 0x80
    4654:	05d2      	lsls	r2, r2, #23
    4656:	4b01      	ldr	r3, [pc, #4]	; (465c <ui_process+0x20>)
    4658:	619a      	str	r2, [r3, #24]
}
    465a:	e7f5      	b.n	4648 <ui_process+0xc>
    465c:	41004480 	.word	0x41004480

00004660 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    4660:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    4662:	000b      	movs	r3, r1
    4664:	332e      	adds	r3, #46	; 0x2e
    4666:	009b      	lsls	r3, r3, #2
    4668:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    466a:	22aa      	movs	r2, #170	; 0xaa
    466c:	0052      	lsls	r2, r2, #1
    466e:	0049      	lsls	r1, r1, #1
    4670:	5a83      	ldrh	r3, [r0, r2]
    4672:	4c03      	ldr	r4, [pc, #12]	; (4680 <usb_device_register_callback+0x20>)
    4674:	5b09      	ldrh	r1, [r1, r4]
    4676:	430b      	orrs	r3, r1
    4678:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    467a:	2000      	movs	r0, #0
    467c:	bd10      	pop	{r4, pc}
    467e:	46c0      	nop			; (mov r8, r8)
    4680:	00008d60 	.word	0x00008d60

00004684 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4684:	0049      	lsls	r1, r1, #1
    4686:	4b06      	ldr	r3, [pc, #24]	; (46a0 <usb_device_enable_callback+0x1c>)
    4688:	5acb      	ldrh	r3, [r1, r3]
    468a:	6802      	ldr	r2, [r0, #0]
    468c:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    468e:	21ab      	movs	r1, #171	; 0xab
    4690:	0049      	lsls	r1, r1, #1
    4692:	5a42      	ldrh	r2, [r0, r1]
    4694:	431a      	orrs	r2, r3
    4696:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4698:	6802      	ldr	r2, [r0, #0]
    469a:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    469c:	2000      	movs	r0, #0
    469e:	4770      	bx	lr
    46a0:	00008d60 	.word	0x00008d60

000046a4 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    46a4:	0049      	lsls	r1, r1, #1
    46a6:	4b05      	ldr	r3, [pc, #20]	; (46bc <usb_device_disable_callback+0x18>)
    46a8:	5aca      	ldrh	r2, [r1, r3]
    46aa:	21ab      	movs	r1, #171	; 0xab
    46ac:	0049      	lsls	r1, r1, #1
    46ae:	5a43      	ldrh	r3, [r0, r1]
    46b0:	4393      	bics	r3, r2
    46b2:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    46b4:	6803      	ldr	r3, [r0, #0]
    46b6:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    46b8:	2000      	movs	r0, #0
    46ba:	4770      	bx	lr
    46bc:	00008d60 	.word	0x00008d60

000046c0 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    46c0:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    46c2:	008c      	lsls	r4, r1, #2
    46c4:	18a4      	adds	r4, r4, r2
    46c6:	3434      	adds	r4, #52	; 0x34
    46c8:	00a4      	lsls	r4, r4, #2
    46ca:	1904      	adds	r4, r0, r4
    46cc:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    46ce:	1840      	adds	r0, r0, r1
    46d0:	3059      	adds	r0, #89	; 0x59
    46d2:	30ff      	adds	r0, #255	; 0xff
    46d4:	7803      	ldrb	r3, [r0, #0]
    46d6:	4903      	ldr	r1, [pc, #12]	; (46e4 <usb_device_endpoint_register_callback+0x24>)
    46d8:	5c8a      	ldrb	r2, [r1, r2]
    46da:	4313      	orrs	r3, r2
    46dc:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    46de:	2000      	movs	r0, #0
    46e0:	bd10      	pop	{r4, pc}
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	00008d70 	.word	0x00008d70

000046e8 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    46e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    46ea:	008b      	lsls	r3, r1, #2
    46ec:	189b      	adds	r3, r3, r2
    46ee:	3334      	adds	r3, #52	; 0x34
    46f0:	009b      	lsls	r3, r3, #2
    46f2:	18c3      	adds	r3, r0, r3
    46f4:	2400      	movs	r4, #0
    46f6:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    46f8:	1840      	adds	r0, r0, r1
    46fa:	3059      	adds	r0, #89	; 0x59
    46fc:	30ff      	adds	r0, #255	; 0xff
    46fe:	4b03      	ldr	r3, [pc, #12]	; (470c <usb_device_endpoint_unregister_callback+0x24>)
    4700:	5c9a      	ldrb	r2, [r3, r2]
    4702:	7803      	ldrb	r3, [r0, #0]
    4704:	4393      	bics	r3, r2
    4706:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    4708:	2000      	movs	r0, #0
    470a:	bd10      	pop	{r4, pc}
    470c:	00008d70 	.word	0x00008d70

00004710 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    4710:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4712:	230f      	movs	r3, #15
    4714:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    4716:	18c4      	adds	r4, r0, r3
    4718:	3461      	adds	r4, #97	; 0x61
    471a:	34ff      	adds	r4, #255	; 0xff
    471c:	7825      	ldrb	r5, [r4, #0]
    471e:	4e2f      	ldr	r6, [pc, #188]	; (47dc <usb_device_endpoint_enable_callback+0xcc>)
    4720:	5cb6      	ldrb	r6, [r6, r2]
    4722:	4335      	orrs	r5, r6
    4724:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    4726:	2a00      	cmp	r2, #0
    4728:	d129      	bne.n	477e <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    472a:	2b00      	cmp	r3, #0
    472c:	d112      	bne.n	4754 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    472e:	2503      	movs	r5, #3
    4730:	240a      	movs	r4, #10
    4732:	34ff      	adds	r4, #255	; 0xff
    4734:	6806      	ldr	r6, [r0, #0]
    4736:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4738:	2a03      	cmp	r2, #3
    473a:	d109      	bne.n	4750 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    473c:	b249      	sxtb	r1, r1
    473e:	2900      	cmp	r1, #0
    4740:	db44      	blt.n	47cc <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    4742:	6802      	ldr	r2, [r0, #0]
    4744:	015b      	lsls	r3, r3, #5
    4746:	18d3      	adds	r3, r2, r3
    4748:	330a      	adds	r3, #10
    474a:	33ff      	adds	r3, #255	; 0xff
    474c:	2220      	movs	r2, #32
    474e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    4750:	2000      	movs	r0, #0
    4752:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4754:	b24c      	sxtb	r4, r1
    4756:	2c00      	cmp	r4, #0
    4758:	db08      	blt.n	476c <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    475a:	015c      	lsls	r4, r3, #5
    475c:	6805      	ldr	r5, [r0, #0]
    475e:	46ac      	mov	ip, r5
    4760:	4464      	add	r4, ip
    4762:	340a      	adds	r4, #10
    4764:	34ff      	adds	r4, #255	; 0xff
    4766:	2501      	movs	r5, #1
    4768:	7025      	strb	r5, [r4, #0]
    476a:	e7e5      	b.n	4738 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    476c:	015c      	lsls	r4, r3, #5
    476e:	6805      	ldr	r5, [r0, #0]
    4770:	46ac      	mov	ip, r5
    4772:	4464      	add	r4, ip
    4774:	340a      	adds	r4, #10
    4776:	34ff      	adds	r4, #255	; 0xff
    4778:	2502      	movs	r5, #2
    477a:	7025      	strb	r5, [r4, #0]
    477c:	e7dc      	b.n	4738 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    477e:	2a01      	cmp	r2, #1
    4780:	d11a      	bne.n	47b8 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    4782:	2b00      	cmp	r3, #0
    4784:	d105      	bne.n	4792 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    4786:	6802      	ldr	r2, [r0, #0]
    4788:	210c      	movs	r1, #12
    478a:	230a      	movs	r3, #10
    478c:	33ff      	adds	r3, #255	; 0xff
    478e:	54d1      	strb	r1, [r2, r3]
    4790:	e7de      	b.n	4750 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    4792:	b249      	sxtb	r1, r1
    4794:	2900      	cmp	r1, #0
    4796:	db07      	blt.n	47a8 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4798:	6802      	ldr	r2, [r0, #0]
    479a:	015b      	lsls	r3, r3, #5
    479c:	18d3      	adds	r3, r2, r3
    479e:	330a      	adds	r3, #10
    47a0:	33ff      	adds	r3, #255	; 0xff
    47a2:	2204      	movs	r2, #4
    47a4:	701a      	strb	r2, [r3, #0]
    47a6:	e7d3      	b.n	4750 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    47a8:	6802      	ldr	r2, [r0, #0]
    47aa:	015b      	lsls	r3, r3, #5
    47ac:	18d3      	adds	r3, r2, r3
    47ae:	330a      	adds	r3, #10
    47b0:	33ff      	adds	r3, #255	; 0xff
    47b2:	2208      	movs	r2, #8
    47b4:	701a      	strb	r2, [r3, #0]
    47b6:	e7cb      	b.n	4750 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    47b8:	2a02      	cmp	r2, #2
    47ba:	d1bd      	bne.n	4738 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    47bc:	6802      	ldr	r2, [r0, #0]
    47be:	015b      	lsls	r3, r3, #5
    47c0:	18d3      	adds	r3, r2, r3
    47c2:	330a      	adds	r3, #10
    47c4:	33ff      	adds	r3, #255	; 0xff
    47c6:	2210      	movs	r2, #16
    47c8:	701a      	strb	r2, [r3, #0]
    47ca:	e7c1      	b.n	4750 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    47cc:	6802      	ldr	r2, [r0, #0]
    47ce:	015b      	lsls	r3, r3, #5
    47d0:	18d3      	adds	r3, r2, r3
    47d2:	330a      	adds	r3, #10
    47d4:	33ff      	adds	r3, #255	; 0xff
    47d6:	2240      	movs	r2, #64	; 0x40
    47d8:	701a      	strb	r2, [r3, #0]
    47da:	e7b9      	b.n	4750 <usb_device_endpoint_enable_callback+0x40>
    47dc:	00008d70 	.word	0x00008d70

000047e0 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    47e0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    47e2:	230f      	movs	r3, #15
    47e4:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    47e6:	18c4      	adds	r4, r0, r3
    47e8:	3461      	adds	r4, #97	; 0x61
    47ea:	34ff      	adds	r4, #255	; 0xff
    47ec:	4d2f      	ldr	r5, [pc, #188]	; (48ac <usb_device_endpoint_disable_callback+0xcc>)
    47ee:	5cae      	ldrb	r6, [r5, r2]
    47f0:	7825      	ldrb	r5, [r4, #0]
    47f2:	43b5      	bics	r5, r6
    47f4:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    47f6:	2a00      	cmp	r2, #0
    47f8:	d129      	bne.n	484e <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    47fa:	2b00      	cmp	r3, #0
    47fc:	d112      	bne.n	4824 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    47fe:	2503      	movs	r5, #3
    4800:	2484      	movs	r4, #132	; 0x84
    4802:	0064      	lsls	r4, r4, #1
    4804:	6806      	ldr	r6, [r0, #0]
    4806:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4808:	2a03      	cmp	r2, #3
    480a:	d109      	bne.n	4820 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    480c:	b249      	sxtb	r1, r1
    480e:	2900      	cmp	r1, #0
    4810:	db44      	blt.n	489c <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    4812:	6802      	ldr	r2, [r0, #0]
    4814:	015b      	lsls	r3, r3, #5
    4816:	18d3      	adds	r3, r2, r3
    4818:	3309      	adds	r3, #9
    481a:	33ff      	adds	r3, #255	; 0xff
    481c:	2220      	movs	r2, #32
    481e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    4820:	2000      	movs	r0, #0
    4822:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4824:	b24c      	sxtb	r4, r1
    4826:	2c00      	cmp	r4, #0
    4828:	db08      	blt.n	483c <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    482a:	015c      	lsls	r4, r3, #5
    482c:	6805      	ldr	r5, [r0, #0]
    482e:	46ac      	mov	ip, r5
    4830:	4464      	add	r4, ip
    4832:	3409      	adds	r4, #9
    4834:	34ff      	adds	r4, #255	; 0xff
    4836:	2501      	movs	r5, #1
    4838:	7025      	strb	r5, [r4, #0]
    483a:	e7e5      	b.n	4808 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    483c:	015c      	lsls	r4, r3, #5
    483e:	6805      	ldr	r5, [r0, #0]
    4840:	46ac      	mov	ip, r5
    4842:	4464      	add	r4, ip
    4844:	3409      	adds	r4, #9
    4846:	34ff      	adds	r4, #255	; 0xff
    4848:	2502      	movs	r5, #2
    484a:	7025      	strb	r5, [r4, #0]
    484c:	e7dc      	b.n	4808 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    484e:	2a01      	cmp	r2, #1
    4850:	d11a      	bne.n	4888 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    4852:	2b00      	cmp	r3, #0
    4854:	d105      	bne.n	4862 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    4856:	6802      	ldr	r2, [r0, #0]
    4858:	210c      	movs	r1, #12
    485a:	3309      	adds	r3, #9
    485c:	33ff      	adds	r3, #255	; 0xff
    485e:	54d1      	strb	r1, [r2, r3]
    4860:	e7de      	b.n	4820 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    4862:	b249      	sxtb	r1, r1
    4864:	2900      	cmp	r1, #0
    4866:	db07      	blt.n	4878 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    4868:	6802      	ldr	r2, [r0, #0]
    486a:	015b      	lsls	r3, r3, #5
    486c:	18d3      	adds	r3, r2, r3
    486e:	3309      	adds	r3, #9
    4870:	33ff      	adds	r3, #255	; 0xff
    4872:	2204      	movs	r2, #4
    4874:	701a      	strb	r2, [r3, #0]
    4876:	e7d3      	b.n	4820 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    4878:	6802      	ldr	r2, [r0, #0]
    487a:	015b      	lsls	r3, r3, #5
    487c:	18d3      	adds	r3, r2, r3
    487e:	3309      	adds	r3, #9
    4880:	33ff      	adds	r3, #255	; 0xff
    4882:	2208      	movs	r2, #8
    4884:	701a      	strb	r2, [r3, #0]
    4886:	e7cb      	b.n	4820 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4888:	2a02      	cmp	r2, #2
    488a:	d1bd      	bne.n	4808 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    488c:	6802      	ldr	r2, [r0, #0]
    488e:	015b      	lsls	r3, r3, #5
    4890:	18d3      	adds	r3, r2, r3
    4892:	3309      	adds	r3, #9
    4894:	33ff      	adds	r3, #255	; 0xff
    4896:	2210      	movs	r2, #16
    4898:	701a      	strb	r2, [r3, #0]
    489a:	e7c1      	b.n	4820 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    489c:	6802      	ldr	r2, [r0, #0]
    489e:	015b      	lsls	r3, r3, #5
    48a0:	18d3      	adds	r3, r2, r3
    48a2:	3309      	adds	r3, #9
    48a4:	33ff      	adds	r3, #255	; 0xff
    48a6:	2240      	movs	r2, #64	; 0x40
    48a8:	701a      	strb	r2, [r3, #0]
    48aa:	e7b9      	b.n	4820 <usb_device_endpoint_disable_callback+0x40>
    48ac:	00008d70 	.word	0x00008d70

000048b0 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    48b0:	2300      	movs	r3, #0
    48b2:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    48b4:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    48b6:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    48b8:	3301      	adds	r3, #1
    48ba:	70c3      	strb	r3, [r0, #3]
}
    48bc:	4770      	bx	lr
	...

000048c0 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    48c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    48c2:	780c      	ldrb	r4, [r1, #0]
    48c4:	230f      	movs	r3, #15
    48c6:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    48c8:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    48ca:	78ca      	ldrb	r2, [r1, #3]
    48cc:	2a04      	cmp	r2, #4
    48ce:	d870      	bhi.n	49b2 <usb_device_endpoint_set_config+0xf2>
    48d0:	0092      	lsls	r2, r2, #2
    48d2:	4d89      	ldr	r5, [pc, #548]	; (4af8 <usb_device_endpoint_set_config+0x238>)
    48d4:	58aa      	ldr	r2, [r5, r2]
    48d6:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    48d8:	6802      	ldr	r2, [r0, #0]
    48da:	3308      	adds	r3, #8
    48dc:	015b      	lsls	r3, r3, #5
    48de:	2100      	movs	r1, #0
    48e0:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    48e2:	2200      	movs	r2, #0
    48e4:	e082      	b.n	49ec <usb_device_endpoint_set_config+0x12c>
    48e6:	015c      	lsls	r4, r3, #5
    48e8:	6802      	ldr	r2, [r0, #0]
    48ea:	4694      	mov	ip, r2
    48ec:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    48ee:	2280      	movs	r2, #128	; 0x80
    48f0:	0052      	lsls	r2, r2, #1
    48f2:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    48f4:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    48f6:	076d      	lsls	r5, r5, #29
    48f8:	d178      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    48fa:	32e4      	adds	r2, #228	; 0xe4
    48fc:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    48fe:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    4900:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4902:	422e      	tst	r6, r5
    4904:	d172      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    4906:	3d5f      	subs	r5, #95	; 0x5f
    4908:	32e4      	adds	r2, #228	; 0xe4
    490a:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    490c:	001a      	movs	r2, r3
    490e:	3208      	adds	r2, #8
    4910:	0152      	lsls	r2, r2, #5
    4912:	6804      	ldr	r4, [r0, #0]
    4914:	18a4      	adds	r4, r4, r2
    4916:	352f      	adds	r5, #47	; 0x2f
    4918:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    491a:	6800      	ldr	r0, [r0, #0]
    491c:	1882      	adds	r2, r0, r2
    491e:	2080      	movs	r0, #128	; 0x80
    4920:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    4922:	788a      	ldrb	r2, [r1, #2]
    4924:	2a00      	cmp	r2, #0
    4926:	d01f      	beq.n	4968 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4928:	0158      	lsls	r0, r3, #5
    492a:	4a74      	ldr	r2, [pc, #464]	; (4afc <usb_device_endpoint_set_config+0x23c>)
    492c:	1812      	adds	r2, r2, r0
    492e:	6854      	ldr	r4, [r2, #4]
    4930:	2080      	movs	r0, #128	; 0x80
    4932:	0600      	lsls	r0, r0, #24
    4934:	4304      	orrs	r4, r0
    4936:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4938:	6954      	ldr	r4, [r2, #20]
    493a:	4320      	orrs	r0, r4
    493c:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    493e:	2507      	movs	r5, #7
    4940:	784c      	ldrb	r4, [r1, #1]
    4942:	015a      	lsls	r2, r3, #5
    4944:	4b6d      	ldr	r3, [pc, #436]	; (4afc <usb_device_endpoint_set_config+0x23c>)
    4946:	189b      	adds	r3, r3, r2
    4948:	6858      	ldr	r0, [r3, #4]
    494a:	402c      	ands	r4, r5
    494c:	0724      	lsls	r4, r4, #28
    494e:	4e6c      	ldr	r6, [pc, #432]	; (4b00 <usb_device_endpoint_set_config+0x240>)
    4950:	4030      	ands	r0, r6
    4952:	4320      	orrs	r0, r4
    4954:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4956:	7849      	ldrb	r1, [r1, #1]
    4958:	695a      	ldr	r2, [r3, #20]
    495a:	4029      	ands	r1, r5
    495c:	0709      	lsls	r1, r1, #28
    495e:	4032      	ands	r2, r6
    4960:	430a      	orrs	r2, r1
    4962:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    4964:	2200      	movs	r2, #0
    4966:	e041      	b.n	49ec <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4968:	0158      	lsls	r0, r3, #5
    496a:	4a64      	ldr	r2, [pc, #400]	; (4afc <usb_device_endpoint_set_config+0x23c>)
    496c:	1812      	adds	r2, r2, r0
    496e:	6850      	ldr	r0, [r2, #4]
    4970:	0040      	lsls	r0, r0, #1
    4972:	0840      	lsrs	r0, r0, #1
    4974:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4976:	6950      	ldr	r0, [r2, #20]
    4978:	0040      	lsls	r0, r0, #1
    497a:	0840      	lsrs	r0, r0, #1
    497c:	6150      	str	r0, [r2, #20]
    497e:	e7de      	b.n	493e <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    4980:	2c00      	cmp	r4, #0
    4982:	db35      	blt.n	49f0 <usb_device_endpoint_set_config+0x130>
    4984:	015d      	lsls	r5, r3, #5
    4986:	6802      	ldr	r2, [r0, #0]
    4988:	4694      	mov	ip, r2
    498a:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    498c:	2280      	movs	r2, #128	; 0x80
    498e:	0052      	lsls	r2, r2, #1
    4990:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    4992:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4994:	0776      	lsls	r6, r6, #29
    4996:	d129      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4998:	2680      	movs	r6, #128	; 0x80
    499a:	0076      	lsls	r6, r6, #1
    499c:	5daa      	ldrb	r2, [r5, r6]
    499e:	2702      	movs	r7, #2
    49a0:	433a      	orrs	r2, r7
    49a2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    49a4:	6802      	ldr	r2, [r0, #0]
    49a6:	0018      	movs	r0, r3
    49a8:	3008      	adds	r0, #8
    49aa:	0140      	lsls	r0, r0, #5
    49ac:	1812      	adds	r2, r2, r0
    49ae:	2040      	movs	r0, #64	; 0x40
    49b0:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    49b2:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    49b4:	784f      	ldrb	r7, [r1, #1]
    49b6:	005d      	lsls	r5, r3, #1
    49b8:	18ad      	adds	r5, r5, r2
    49ba:	012d      	lsls	r5, r5, #4
    49bc:	4e4f      	ldr	r6, [pc, #316]	; (4afc <usb_device_endpoint_set_config+0x23c>)
    49be:	1975      	adds	r5, r6, r5
    49c0:	6868      	ldr	r0, [r5, #4]
    49c2:	2407      	movs	r4, #7
    49c4:	403c      	ands	r4, r7
    49c6:	0724      	lsls	r4, r4, #28
    49c8:	4e4d      	ldr	r6, [pc, #308]	; (4b00 <usb_device_endpoint_set_config+0x240>)
    49ca:	4030      	ands	r0, r6
    49cc:	4320      	orrs	r0, r4
    49ce:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    49d0:	7889      	ldrb	r1, [r1, #2]
    49d2:	2900      	cmp	r1, #0
    49d4:	d000      	beq.n	49d8 <usb_device_endpoint_set_config+0x118>
    49d6:	e088      	b.n	4aea <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    49d8:	005b      	lsls	r3, r3, #1
    49da:	189b      	adds	r3, r3, r2
    49dc:	011b      	lsls	r3, r3, #4
    49de:	4a47      	ldr	r2, [pc, #284]	; (4afc <usb_device_endpoint_set_config+0x23c>)
    49e0:	18d3      	adds	r3, r2, r3
    49e2:	685a      	ldr	r2, [r3, #4]
    49e4:	0052      	lsls	r2, r2, #1
    49e6:	0852      	lsrs	r2, r2, #1
    49e8:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    49ea:	2200      	movs	r2, #0
}
    49ec:	0010      	movs	r0, r2
    49ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49f0:	015d      	lsls	r5, r3, #5
    49f2:	6802      	ldr	r2, [r0, #0]
    49f4:	4694      	mov	ip, r2
    49f6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    49f8:	2280      	movs	r2, #128	; 0x80
    49fa:	0052      	lsls	r2, r2, #1
    49fc:	5caf      	ldrb	r7, [r5, r2]
    49fe:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4a00:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4a02:	4237      	tst	r7, r6
    4a04:	d1f2      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4a06:	3690      	adds	r6, #144	; 0x90
    4a08:	5daa      	ldrb	r2, [r5, r6]
    4a0a:	2720      	movs	r7, #32
    4a0c:	433a      	orrs	r2, r7
    4a0e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4a10:	6802      	ldr	r2, [r0, #0]
    4a12:	0018      	movs	r0, r3
    4a14:	3008      	adds	r0, #8
    4a16:	0140      	lsls	r0, r0, #5
    4a18:	1812      	adds	r2, r2, r0
    4a1a:	2080      	movs	r0, #128	; 0x80
    4a1c:	7110      	strb	r0, [r2, #4]
    4a1e:	e7c8      	b.n	49b2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4a20:	2c00      	cmp	r4, #0
    4a22:	db17      	blt.n	4a54 <usb_device_endpoint_set_config+0x194>
    4a24:	015d      	lsls	r5, r3, #5
    4a26:	6802      	ldr	r2, [r0, #0]
    4a28:	4694      	mov	ip, r2
    4a2a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4a2c:	2280      	movs	r2, #128	; 0x80
    4a2e:	0052      	lsls	r2, r2, #1
    4a30:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4a32:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4a34:	0776      	lsls	r6, r6, #29
    4a36:	d1d9      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4a38:	2680      	movs	r6, #128	; 0x80
    4a3a:	0076      	lsls	r6, r6, #1
    4a3c:	5daa      	ldrb	r2, [r5, r6]
    4a3e:	2703      	movs	r7, #3
    4a40:	433a      	orrs	r2, r7
    4a42:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4a44:	6802      	ldr	r2, [r0, #0]
    4a46:	0018      	movs	r0, r3
    4a48:	3008      	adds	r0, #8
    4a4a:	0140      	lsls	r0, r0, #5
    4a4c:	1812      	adds	r2, r2, r0
    4a4e:	2040      	movs	r0, #64	; 0x40
    4a50:	7150      	strb	r0, [r2, #5]
    4a52:	e7ae      	b.n	49b2 <usb_device_endpoint_set_config+0xf2>
    4a54:	015d      	lsls	r5, r3, #5
    4a56:	6802      	ldr	r2, [r0, #0]
    4a58:	4694      	mov	ip, r2
    4a5a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4a5c:	2280      	movs	r2, #128	; 0x80
    4a5e:	0052      	lsls	r2, r2, #1
    4a60:	5caf      	ldrb	r7, [r5, r2]
    4a62:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4a64:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4a66:	4237      	tst	r7, r6
    4a68:	d1c0      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4a6a:	3690      	adds	r6, #144	; 0x90
    4a6c:	5daa      	ldrb	r2, [r5, r6]
    4a6e:	2730      	movs	r7, #48	; 0x30
    4a70:	433a      	orrs	r2, r7
    4a72:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4a74:	6802      	ldr	r2, [r0, #0]
    4a76:	0018      	movs	r0, r3
    4a78:	3008      	adds	r0, #8
    4a7a:	0140      	lsls	r0, r0, #5
    4a7c:	1812      	adds	r2, r2, r0
    4a7e:	2080      	movs	r0, #128	; 0x80
    4a80:	7110      	strb	r0, [r2, #4]
    4a82:	e796      	b.n	49b2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4a84:	2c00      	cmp	r4, #0
    4a86:	db17      	blt.n	4ab8 <usb_device_endpoint_set_config+0x1f8>
    4a88:	015d      	lsls	r5, r3, #5
    4a8a:	6802      	ldr	r2, [r0, #0]
    4a8c:	4694      	mov	ip, r2
    4a8e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4a90:	2280      	movs	r2, #128	; 0x80
    4a92:	0052      	lsls	r2, r2, #1
    4a94:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4a96:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4a98:	0776      	lsls	r6, r6, #29
    4a9a:	d1a7      	bne.n	49ec <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4a9c:	2680      	movs	r6, #128	; 0x80
    4a9e:	0076      	lsls	r6, r6, #1
    4aa0:	5daa      	ldrb	r2, [r5, r6]
    4aa2:	2704      	movs	r7, #4
    4aa4:	433a      	orrs	r2, r7
    4aa6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4aa8:	6802      	ldr	r2, [r0, #0]
    4aaa:	0018      	movs	r0, r3
    4aac:	3008      	adds	r0, #8
    4aae:	0140      	lsls	r0, r0, #5
    4ab0:	1812      	adds	r2, r2, r0
    4ab2:	2040      	movs	r0, #64	; 0x40
    4ab4:	7150      	strb	r0, [r2, #5]
    4ab6:	e77c      	b.n	49b2 <usb_device_endpoint_set_config+0xf2>
    4ab8:	015d      	lsls	r5, r3, #5
    4aba:	6802      	ldr	r2, [r0, #0]
    4abc:	4694      	mov	ip, r2
    4abe:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4ac0:	2280      	movs	r2, #128	; 0x80
    4ac2:	0052      	lsls	r2, r2, #1
    4ac4:	5caf      	ldrb	r7, [r5, r2]
    4ac6:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4ac8:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4aca:	4237      	tst	r7, r6
    4acc:	d000      	beq.n	4ad0 <usb_device_endpoint_set_config+0x210>
    4ace:	e78d      	b.n	49ec <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4ad0:	3690      	adds	r6, #144	; 0x90
    4ad2:	5daa      	ldrb	r2, [r5, r6]
    4ad4:	2740      	movs	r7, #64	; 0x40
    4ad6:	433a      	orrs	r2, r7
    4ad8:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4ada:	6802      	ldr	r2, [r0, #0]
    4adc:	0018      	movs	r0, r3
    4ade:	3008      	adds	r0, #8
    4ae0:	0140      	lsls	r0, r0, #5
    4ae2:	1812      	adds	r2, r2, r0
    4ae4:	2080      	movs	r0, #128	; 0x80
    4ae6:	7110      	strb	r0, [r2, #4]
    4ae8:	e763      	b.n	49b2 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4aea:	6869      	ldr	r1, [r5, #4]
    4aec:	2380      	movs	r3, #128	; 0x80
    4aee:	061b      	lsls	r3, r3, #24
    4af0:	430b      	orrs	r3, r1
    4af2:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    4af4:	2200      	movs	r2, #0
    4af6:	e779      	b.n	49ec <usb_device_endpoint_set_config+0x12c>
    4af8:	00008d4c 	.word	0x00008d4c
    4afc:	20000b54 	.word	0x20000b54
    4b00:	8fffffff 	.word	0x8fffffff

00004b04 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4b04:	230f      	movs	r3, #15
    4b06:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    4b08:	b249      	sxtb	r1, r1
    4b0a:	2900      	cmp	r1, #0
    4b0c:	db09      	blt.n	4b22 <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4b0e:	6802      	ldr	r2, [r0, #0]
    4b10:	3308      	adds	r3, #8
    4b12:	015b      	lsls	r3, r3, #5
    4b14:	5c98      	ldrb	r0, [r3, r2]
    4b16:	0740      	lsls	r0, r0, #29
    4b18:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    4b1a:	1e43      	subs	r3, r0, #1
    4b1c:	4198      	sbcs	r0, r3
    4b1e:	b2c0      	uxtb	r0, r0
}
    4b20:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4b22:	6802      	ldr	r2, [r0, #0]
    4b24:	3308      	adds	r3, #8
    4b26:	015b      	lsls	r3, r3, #5
    4b28:	5c98      	ldrb	r0, [r3, r2]
    4b2a:	0640      	lsls	r0, r0, #25
    4b2c:	0f40      	lsrs	r0, r0, #29
    4b2e:	e7f4      	b.n	4b1a <usb_device_endpoint_is_configured+0x16>

00004b30 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4b30:	230f      	movs	r3, #15
    4b32:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4b34:	b249      	sxtb	r1, r1
    4b36:	2900      	cmp	r1, #0
    4b38:	db0a      	blt.n	4b50 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4b3a:	3308      	adds	r3, #8
    4b3c:	015b      	lsls	r3, r3, #5
    4b3e:	6802      	ldr	r2, [r0, #0]
    4b40:	18d2      	adds	r2, r2, r3
    4b42:	2140      	movs	r1, #64	; 0x40
    4b44:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4b46:	6802      	ldr	r2, [r0, #0]
    4b48:	18d3      	adds	r3, r2, r3
    4b4a:	2201      	movs	r2, #1
    4b4c:	71da      	strb	r2, [r3, #7]
	}
}
    4b4e:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4b50:	3308      	adds	r3, #8
    4b52:	015b      	lsls	r3, r3, #5
    4b54:	6802      	ldr	r2, [r0, #0]
    4b56:	18d2      	adds	r2, r2, r3
    4b58:	2180      	movs	r1, #128	; 0x80
    4b5a:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4b5c:	6802      	ldr	r2, [r0, #0]
    4b5e:	18d3      	adds	r3, r2, r3
    4b60:	2202      	movs	r2, #2
    4b62:	71da      	strb	r2, [r3, #7]
    4b64:	e7f3      	b.n	4b4e <usb_device_endpoint_abort_job+0x1e>

00004b66 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4b66:	230f      	movs	r3, #15
    4b68:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4b6a:	b249      	sxtb	r1, r1
    4b6c:	2900      	cmp	r1, #0
    4b6e:	db07      	blt.n	4b80 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    4b70:	6802      	ldr	r2, [r0, #0]
    4b72:	3308      	adds	r3, #8
    4b74:	015b      	lsls	r3, r3, #5
    4b76:	18d3      	adds	r3, r2, r3
    4b78:	7998      	ldrb	r0, [r3, #6]
    4b7a:	06c0      	lsls	r0, r0, #27
    4b7c:	0fc0      	lsrs	r0, r0, #31
	}
}
    4b7e:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4b80:	6802      	ldr	r2, [r0, #0]
    4b82:	3308      	adds	r3, #8
    4b84:	015b      	lsls	r3, r3, #5
    4b86:	18d3      	adds	r3, r2, r3
    4b88:	7998      	ldrb	r0, [r3, #6]
    4b8a:	0680      	lsls	r0, r0, #26
    4b8c:	0fc0      	lsrs	r0, r0, #31
    4b8e:	e7f6      	b.n	4b7e <usb_device_endpoint_is_halted+0x18>

00004b90 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4b90:	230f      	movs	r3, #15
    4b92:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4b94:	b249      	sxtb	r1, r1
    4b96:	2900      	cmp	r1, #0
    4b98:	db06      	blt.n	4ba8 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4b9a:	6802      	ldr	r2, [r0, #0]
    4b9c:	3308      	adds	r3, #8
    4b9e:	015b      	lsls	r3, r3, #5
    4ba0:	18d3      	adds	r3, r2, r3
    4ba2:	2210      	movs	r2, #16
    4ba4:	715a      	strb	r2, [r3, #5]
	}
}
    4ba6:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4ba8:	6802      	ldr	r2, [r0, #0]
    4baa:	3308      	adds	r3, #8
    4bac:	015b      	lsls	r3, r3, #5
    4bae:	18d3      	adds	r3, r2, r3
    4bb0:	2220      	movs	r2, #32
    4bb2:	715a      	strb	r2, [r3, #5]
    4bb4:	e7f7      	b.n	4ba6 <usb_device_endpoint_set_halt+0x16>

00004bb6 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4bb6:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4bb8:	230f      	movs	r3, #15
    4bba:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4bbc:	b249      	sxtb	r1, r1
    4bbe:	2900      	cmp	r1, #0
    4bc0:	db1d      	blt.n	4bfe <usb_device_endpoint_clear_halt+0x48>
    4bc2:	0159      	lsls	r1, r3, #5
    4bc4:	6802      	ldr	r2, [r0, #0]
    4bc6:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4bc8:	2483      	movs	r4, #131	; 0x83
    4bca:	0064      	lsls	r4, r4, #1
    4bcc:	5d14      	ldrb	r4, [r2, r4]
    4bce:	06e4      	lsls	r4, r4, #27
    4bd0:	d514      	bpl.n	4bfc <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4bd2:	2510      	movs	r5, #16
    4bd4:	2482      	movs	r4, #130	; 0x82
    4bd6:	0064      	lsls	r4, r4, #1
    4bd8:	5515      	strb	r5, [r2, r4]
    4bda:	6802      	ldr	r2, [r0, #0]
    4bdc:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4bde:	2108      	movs	r1, #8
    4be0:	31ff      	adds	r1, #255	; 0xff
    4be2:	5c51      	ldrb	r1, [r2, r1]
    4be4:	0689      	lsls	r1, r1, #26
    4be6:	d509      	bpl.n	4bfc <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4be8:	3ce4      	subs	r4, #228	; 0xe4
    4bea:	2108      	movs	r1, #8
    4bec:	31ff      	adds	r1, #255	; 0xff
    4bee:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4bf0:	6802      	ldr	r2, [r0, #0]
    4bf2:	3308      	adds	r3, #8
    4bf4:	015b      	lsls	r3, r3, #5
    4bf6:	18d3      	adds	r3, r2, r3
    4bf8:	2201      	movs	r2, #1
    4bfa:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    4bfc:	bd30      	pop	{r4, r5, pc}
    4bfe:	0159      	lsls	r1, r3, #5
    4c00:	6802      	ldr	r2, [r0, #0]
    4c02:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4c04:	2483      	movs	r4, #131	; 0x83
    4c06:	0064      	lsls	r4, r4, #1
    4c08:	5d14      	ldrb	r4, [r2, r4]
    4c0a:	06a4      	lsls	r4, r4, #26
    4c0c:	d5f6      	bpl.n	4bfc <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    4c0e:	2520      	movs	r5, #32
    4c10:	2482      	movs	r4, #130	; 0x82
    4c12:	0064      	lsls	r4, r4, #1
    4c14:	5515      	strb	r5, [r2, r4]
    4c16:	6802      	ldr	r2, [r0, #0]
    4c18:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4c1a:	2108      	movs	r1, #8
    4c1c:	31ff      	adds	r1, #255	; 0xff
    4c1e:	5c51      	ldrb	r1, [r2, r1]
    4c20:	0649      	lsls	r1, r1, #25
    4c22:	d5eb      	bpl.n	4bfc <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4c24:	3cc4      	subs	r4, #196	; 0xc4
    4c26:	2108      	movs	r1, #8
    4c28:	31ff      	adds	r1, #255	; 0xff
    4c2a:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4c2c:	6802      	ldr	r2, [r0, #0]
    4c2e:	3308      	adds	r3, #8
    4c30:	015b      	lsls	r3, r3, #5
    4c32:	18d3      	adds	r3, r2, r3
    4c34:	2202      	movs	r2, #2
    4c36:	711a      	strb	r2, [r3, #4]
    4c38:	e7e0      	b.n	4bfc <usb_device_endpoint_clear_halt+0x46>
	...

00004c3c <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4c3c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4c3e:	000c      	movs	r4, r1
    4c40:	3408      	adds	r4, #8
    4c42:	0164      	lsls	r4, r4, #5
    4c44:	6805      	ldr	r5, [r0, #0]
    4c46:	5d64      	ldrb	r4, [r4, r5]
    4c48:	0664      	lsls	r4, r4, #25
    4c4a:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4c4c:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4c4e:	2c00      	cmp	r4, #0
    4c50:	d101      	bne.n	4c56 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    4c52:	0028      	movs	r0, r5
    4c54:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4c56:	014c      	lsls	r4, r1, #5
    4c58:	4d0b      	ldr	r5, [pc, #44]	; (4c88 <usb_device_endpoint_write_buffer_job+0x4c>)
    4c5a:	192d      	adds	r5, r5, r4
    4c5c:	002c      	movs	r4, r5
    4c5e:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4c60:	696a      	ldr	r2, [r5, #20]
    4c62:	4d0a      	ldr	r5, [pc, #40]	; (4c8c <usb_device_endpoint_write_buffer_job+0x50>)
    4c64:	402a      	ands	r2, r5
    4c66:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4c68:	6962      	ldr	r2, [r4, #20]
    4c6a:	049b      	lsls	r3, r3, #18
    4c6c:	0c9b      	lsrs	r3, r3, #18
    4c6e:	0b92      	lsrs	r2, r2, #14
    4c70:	0392      	lsls	r2, r2, #14
    4c72:	4313      	orrs	r3, r2
    4c74:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4c76:	6803      	ldr	r3, [r0, #0]
    4c78:	3108      	adds	r1, #8
    4c7a:	0149      	lsls	r1, r1, #5
    4c7c:	1859      	adds	r1, r3, r1
    4c7e:	2380      	movs	r3, #128	; 0x80
    4c80:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    4c82:	2500      	movs	r5, #0
    4c84:	e7e5      	b.n	4c52 <usb_device_endpoint_write_buffer_job+0x16>
    4c86:	46c0      	nop			; (mov r8, r8)
    4c88:	20000b54 	.word	0x20000b54
    4c8c:	f0003fff 	.word	0xf0003fff

00004c90 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4c90:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4c92:	000c      	movs	r4, r1
    4c94:	3408      	adds	r4, #8
    4c96:	0164      	lsls	r4, r4, #5
    4c98:	6805      	ldr	r5, [r0, #0]
    4c9a:	5d64      	ldrb	r4, [r4, r5]
    4c9c:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4c9e:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4ca0:	2c00      	cmp	r4, #0
    4ca2:	d101      	bne.n	4ca8 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4ca4:	0028      	movs	r0, r5
    4ca6:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4ca8:	4c0b      	ldr	r4, [pc, #44]	; (4cd8 <usb_device_endpoint_read_buffer_job+0x48>)
    4caa:	014d      	lsls	r5, r1, #5
    4cac:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4cae:	1962      	adds	r2, r4, r5
    4cb0:	6854      	ldr	r4, [r2, #4]
    4cb2:	049b      	lsls	r3, r3, #18
    4cb4:	091b      	lsrs	r3, r3, #4
    4cb6:	4d09      	ldr	r5, [pc, #36]	; (4cdc <usb_device_endpoint_read_buffer_job+0x4c>)
    4cb8:	402c      	ands	r4, r5
    4cba:	4323      	orrs	r3, r4
    4cbc:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4cbe:	6853      	ldr	r3, [r2, #4]
    4cc0:	0b9b      	lsrs	r3, r3, #14
    4cc2:	039b      	lsls	r3, r3, #14
    4cc4:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4cc6:	6803      	ldr	r3, [r0, #0]
    4cc8:	3108      	adds	r1, #8
    4cca:	0149      	lsls	r1, r1, #5
    4ccc:	1859      	adds	r1, r3, r1
    4cce:	2340      	movs	r3, #64	; 0x40
    4cd0:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    4cd2:	2500      	movs	r5, #0
    4cd4:	e7e6      	b.n	4ca4 <usb_device_endpoint_read_buffer_job+0x14>
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	20000b54 	.word	0x20000b54
    4cdc:	f0003fff 	.word	0xf0003fff

00004ce0 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4ce0:	4b09      	ldr	r3, [pc, #36]	; (4d08 <usb_device_endpoint_setup_buffer_job+0x28>)
    4ce2:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4ce4:	685a      	ldr	r2, [r3, #4]
    4ce6:	4909      	ldr	r1, [pc, #36]	; (4d0c <usb_device_endpoint_setup_buffer_job+0x2c>)
    4ce8:	4011      	ands	r1, r2
    4cea:	2280      	movs	r2, #128	; 0x80
    4cec:	0292      	lsls	r2, r2, #10
    4cee:	430a      	orrs	r2, r1
    4cf0:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4cf2:	685a      	ldr	r2, [r3, #4]
    4cf4:	0b92      	lsrs	r2, r2, #14
    4cf6:	0392      	lsls	r2, r2, #14
    4cf8:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4cfa:	6802      	ldr	r2, [r0, #0]
    4cfc:	2140      	movs	r1, #64	; 0x40
    4cfe:	2382      	movs	r3, #130	; 0x82
    4d00:	005b      	lsls	r3, r3, #1
    4d02:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    4d04:	2000      	movs	r0, #0
    4d06:	4770      	bx	lr
    4d08:	20000b54 	.word	0x20000b54
    4d0c:	f0003fff 	.word	0xf0003fff

00004d10 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4d10:	6802      	ldr	r2, [r0, #0]
    4d12:	7813      	ldrb	r3, [r2, #0]
    4d14:	2102      	movs	r1, #2
    4d16:	430b      	orrs	r3, r1
    4d18:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4d1a:	6802      	ldr	r2, [r0, #0]
    4d1c:	7893      	ldrb	r3, [r2, #2]
    4d1e:	2b02      	cmp	r3, #2
    4d20:	d0fc      	beq.n	4d1c <usb_enable+0xc>
}
    4d22:	4770      	bx	lr

00004d24 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d26:	46de      	mov	lr, fp
    4d28:	4657      	mov	r7, sl
    4d2a:	464e      	mov	r6, r9
    4d2c:	4645      	mov	r5, r8
    4d2e:	b5e0      	push	{r5, r6, r7, lr}
    4d30:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4d32:	4bc2      	ldr	r3, [pc, #776]	; (503c <USB_Handler+0x318>)
    4d34:	681f      	ldr	r7, [r3, #0]
    4d36:	683d      	ldr	r5, [r7, #0]
    4d38:	782b      	ldrb	r3, [r5, #0]
    4d3a:	09db      	lsrs	r3, r3, #7
    4d3c:	d114      	bne.n	4d68 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4d3e:	8c2e      	ldrh	r6, [r5, #32]
    4d40:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    4d42:	2e00      	cmp	r6, #0
    4d44:	d000      	beq.n	4d48 <USB_Handler+0x24>
    4d46:	e1a9      	b.n	509c <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4d48:	8bae      	ldrh	r6, [r5, #28]
    4d4a:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4d4c:	23ab      	movs	r3, #171	; 0xab
    4d4e:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4d50:	5afb      	ldrh	r3, [r7, r3]
    4d52:	22aa      	movs	r2, #170	; 0xaa
    4d54:	0052      	lsls	r2, r2, #1
    4d56:	5abd      	ldrh	r5, [r7, r2]
    4d58:	401d      	ands	r5, r3
    4d5a:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4d5c:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    4d5e:	4fb8      	ldr	r7, [pc, #736]	; (5040 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4d60:	4bb6      	ldr	r3, [pc, #728]	; (503c <USB_Handler+0x318>)
    4d62:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4d64:	4698      	mov	r8, r3
    4d66:	e184      	b.n	5072 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4d68:	8c2b      	ldrh	r3, [r5, #32]
    4d6a:	b29b      	uxth	r3, r3
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d100      	bne.n	4d72 <USB_Handler+0x4e>
    4d70:	e0de      	b.n	4f30 <USB_Handler+0x20c>
    4d72:	8c28      	ldrh	r0, [r5, #32]
    4d74:	b280      	uxth	r0, r0
    4d76:	4bb3      	ldr	r3, [pc, #716]	; (5044 <USB_Handler+0x320>)
    4d78:	4798      	blx	r3
    4d7a:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    4d7c:	281f      	cmp	r0, #31
    4d7e:	d900      	bls.n	4d82 <USB_Handler+0x5e>
    4d80:	e0d6      	b.n	4f30 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4d82:	0003      	movs	r3, r0
    4d84:	3308      	adds	r3, #8
    4d86:	015b      	lsls	r3, r3, #5
    4d88:	18ed      	adds	r5, r5, r3
    4d8a:	79ed      	ldrb	r5, [r5, #7]
    4d8c:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4d8e:	07ab      	lsls	r3, r5, #30
    4d90:	d041      	beq.n	4e16 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4d92:	4aad      	ldr	r2, [pc, #692]	; (5048 <USB_Handler+0x324>)
    4d94:	2301      	movs	r3, #1
    4d96:	4083      	lsls	r3, r0
    4d98:	6811      	ldr	r1, [r2, #0]
    4d9a:	4399      	bics	r1, r3
    4d9c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4d9e:	0003      	movs	r3, r0
    4da0:	3308      	adds	r3, #8
    4da2:	015b      	lsls	r3, r3, #5
    4da4:	683a      	ldr	r2, [r7, #0]
    4da6:	4694      	mov	ip, r2
    4da8:	4463      	add	r3, ip
    4daa:	2203      	movs	r2, #3
    4dac:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4dae:	183b      	adds	r3, r7, r0
    4db0:	33ae      	adds	r3, #174	; 0xae
    4db2:	781b      	ldrb	r3, [r3, #0]
    4db4:	07db      	lsls	r3, r3, #31
    4db6:	d52e      	bpl.n	4e16 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4db8:	4ba4      	ldr	r3, [pc, #656]	; (504c <USB_Handler+0x328>)
    4dba:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4dbc:	683a      	ldr	r2, [r7, #0]
    4dbe:	0003      	movs	r3, r0
    4dc0:	3308      	adds	r3, #8
    4dc2:	015b      	lsls	r3, r3, #5
    4dc4:	5c9b      	ldrb	r3, [r3, r2]
    4dc6:	079b      	lsls	r3, r3, #30
    4dc8:	0f9b      	lsrs	r3, r3, #30
    4dca:	2b01      	cmp	r3, #1
    4dcc:	d100      	bne.n	4dd0 <USB_Handler+0xac>
    4dce:	e081      	b.n	4ed4 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4dd0:	0142      	lsls	r2, r0, #5
    4dd2:	4b9f      	ldr	r3, [pc, #636]	; (5050 <USB_Handler+0x32c>)
    4dd4:	189b      	adds	r3, r3, r2
    4dd6:	685a      	ldr	r2, [r3, #4]
    4dd8:	0112      	lsls	r2, r2, #4
    4dda:	0c92      	lsrs	r2, r2, #18
    4ddc:	b290      	uxth	r0, r2
    4dde:	499b      	ldr	r1, [pc, #620]	; (504c <USB_Handler+0x328>)
    4de0:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4de2:	685a      	ldr	r2, [r3, #4]
    4de4:	0492      	lsls	r2, r2, #18
    4de6:	0c92      	lsrs	r2, r2, #18
    4de8:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4dea:	685a      	ldr	r2, [r3, #4]
    4dec:	4999      	ldr	r1, [pc, #612]	; (5054 <USB_Handler+0x330>)
    4dee:	400a      	ands	r2, r1
    4df0:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4df2:	2800      	cmp	r0, #0
    4df4:	d107      	bne.n	4e06 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4df6:	0162      	lsls	r2, r4, #5
    4df8:	4b95      	ldr	r3, [pc, #596]	; (5050 <USB_Handler+0x32c>)
    4dfa:	189b      	adds	r3, r3, r2
    4dfc:	685b      	ldr	r3, [r3, #4]
    4dfe:	049b      	lsls	r3, r3, #18
    4e00:	0c9b      	lsrs	r3, r3, #18
    4e02:	4a92      	ldr	r2, [pc, #584]	; (504c <USB_Handler+0x328>)
    4e04:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    4e06:	4b8d      	ldr	r3, [pc, #564]	; (503c <USB_Handler+0x318>)
    4e08:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    4e0a:	1ca3      	adds	r3, r4, #2
    4e0c:	011b      	lsls	r3, r3, #4
    4e0e:	18c3      	adds	r3, r0, r3
    4e10:	685b      	ldr	r3, [r3, #4]
    4e12:	498e      	ldr	r1, [pc, #568]	; (504c <USB_Handler+0x328>)
    4e14:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    4e16:	076b      	lsls	r3, r5, #29
    4e18:	d50e      	bpl.n	4e38 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4e1a:	4a8b      	ldr	r2, [pc, #556]	; (5048 <USB_Handler+0x324>)
    4e1c:	2301      	movs	r3, #1
    4e1e:	40a3      	lsls	r3, r4
    4e20:	6811      	ldr	r1, [r2, #0]
    4e22:	4399      	bics	r1, r3
    4e24:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4e26:	4b85      	ldr	r3, [pc, #532]	; (503c <USB_Handler+0x318>)
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	681b      	ldr	r3, [r3, #0]
    4e2c:	0022      	movs	r2, r4
    4e2e:	3208      	adds	r2, #8
    4e30:	0152      	lsls	r2, r2, #5
    4e32:	189b      	adds	r3, r3, r2
    4e34:	2204      	movs	r2, #4
    4e36:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4e38:	072b      	lsls	r3, r5, #28
    4e3a:	d514      	bpl.n	4e66 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4e3c:	4a82      	ldr	r2, [pc, #520]	; (5048 <USB_Handler+0x324>)
    4e3e:	2301      	movs	r3, #1
    4e40:	40a3      	lsls	r3, r4
    4e42:	6811      	ldr	r1, [r2, #0]
    4e44:	4399      	bics	r1, r3
    4e46:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4e48:	4b7c      	ldr	r3, [pc, #496]	; (503c <USB_Handler+0x318>)
    4e4a:	6818      	ldr	r0, [r3, #0]
    4e4c:	0023      	movs	r3, r4
    4e4e:	3308      	adds	r3, #8
    4e50:	015b      	lsls	r3, r3, #5
    4e52:	6802      	ldr	r2, [r0, #0]
    4e54:	4694      	mov	ip, r2
    4e56:	4463      	add	r3, ip
    4e58:	2208      	movs	r2, #8
    4e5a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4e5c:	1903      	adds	r3, r0, r4
    4e5e:	33ae      	adds	r3, #174	; 0xae
    4e60:	781b      	ldrb	r3, [r3, #0]
    4e62:	079b      	lsls	r3, r3, #30
    4e64:	d447      	bmi.n	4ef6 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4e66:	06eb      	lsls	r3, r5, #27
    4e68:	d514      	bpl.n	4e94 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4e6a:	4a77      	ldr	r2, [pc, #476]	; (5048 <USB_Handler+0x324>)
    4e6c:	2301      	movs	r3, #1
    4e6e:	40a3      	lsls	r3, r4
    4e70:	6811      	ldr	r1, [r2, #0]
    4e72:	4399      	bics	r1, r3
    4e74:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4e76:	4b71      	ldr	r3, [pc, #452]	; (503c <USB_Handler+0x318>)
    4e78:	6818      	ldr	r0, [r3, #0]
    4e7a:	0023      	movs	r3, r4
    4e7c:	3308      	adds	r3, #8
    4e7e:	015b      	lsls	r3, r3, #5
    4e80:	6802      	ldr	r2, [r0, #0]
    4e82:	4694      	mov	ip, r2
    4e84:	4463      	add	r3, ip
    4e86:	2210      	movs	r2, #16
    4e88:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4e8a:	1903      	adds	r3, r0, r4
    4e8c:	33ae      	adds	r3, #174	; 0xae
    4e8e:	781b      	ldrb	r3, [r3, #0]
    4e90:	075b      	lsls	r3, r3, #29
    4e92:	d43e      	bmi.n	4f12 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4e94:	06ab      	lsls	r3, r5, #26
    4e96:	d400      	bmi.n	4e9a <USB_Handler+0x176>
    4e98:	e0b0      	b.n	4ffc <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4e9a:	4a6b      	ldr	r2, [pc, #428]	; (5048 <USB_Handler+0x324>)
    4e9c:	2301      	movs	r3, #1
    4e9e:	40a3      	lsls	r3, r4
    4ea0:	6811      	ldr	r1, [r2, #0]
    4ea2:	4399      	bics	r1, r3
    4ea4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4ea6:	4b65      	ldr	r3, [pc, #404]	; (503c <USB_Handler+0x318>)
    4ea8:	6818      	ldr	r0, [r3, #0]
    4eaa:	0023      	movs	r3, r4
    4eac:	3308      	adds	r3, #8
    4eae:	015b      	lsls	r3, r3, #5
    4eb0:	6802      	ldr	r2, [r0, #0]
    4eb2:	4694      	mov	ip, r2
    4eb4:	4463      	add	r3, ip
    4eb6:	2220      	movs	r2, #32
    4eb8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4eba:	1903      	adds	r3, r0, r4
    4ebc:	33ae      	adds	r3, #174	; 0xae
    4ebe:	781b      	ldrb	r3, [r3, #0]
    4ec0:	071b      	lsls	r3, r3, #28
    4ec2:	d400      	bmi.n	4ec6 <USB_Handler+0x1a2>
    4ec4:	e09a      	b.n	4ffc <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    4ec6:	4961      	ldr	r1, [pc, #388]	; (504c <USB_Handler+0x328>)
    4ec8:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    4eca:	0124      	lsls	r4, r4, #4
    4ecc:	1904      	adds	r4, r0, r4
    4ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4ed0:	4798      	blx	r3
    4ed2:	e093      	b.n	4ffc <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4ed4:	0142      	lsls	r2, r0, #5
    4ed6:	4b5e      	ldr	r3, [pc, #376]	; (5050 <USB_Handler+0x32c>)
    4ed8:	189b      	adds	r3, r3, r2
    4eda:	685a      	ldr	r2, [r3, #4]
    4edc:	0492      	lsls	r2, r2, #18
    4ede:	0c92      	lsrs	r2, r2, #18
    4ee0:	495a      	ldr	r1, [pc, #360]	; (504c <USB_Handler+0x328>)
    4ee2:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4ee4:	685a      	ldr	r2, [r3, #4]
    4ee6:	0112      	lsls	r2, r2, #4
    4ee8:	0c92      	lsrs	r2, r2, #18
    4eea:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4eec:	685a      	ldr	r2, [r3, #4]
    4eee:	0b92      	lsrs	r2, r2, #14
    4ef0:	0392      	lsls	r2, r2, #14
    4ef2:	605a      	str	r2, [r3, #4]
    4ef4:	e787      	b.n	4e06 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    4ef6:	4955      	ldr	r1, [pc, #340]	; (504c <USB_Handler+0x328>)
    4ef8:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    4efa:	0162      	lsls	r2, r4, #5
    4efc:	4b54      	ldr	r3, [pc, #336]	; (5050 <USB_Handler+0x32c>)
    4efe:	189b      	adds	r3, r3, r2
    4f00:	89db      	ldrh	r3, [r3, #14]
    4f02:	221f      	movs	r2, #31
    4f04:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    4f06:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4f08:	0123      	lsls	r3, r4, #4
    4f0a:	18c3      	adds	r3, r0, r3
    4f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f0e:	4798      	blx	r3
    4f10:	e7a9      	b.n	4e66 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    4f12:	494e      	ldr	r1, [pc, #312]	; (504c <USB_Handler+0x328>)
    4f14:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4f16:	0162      	lsls	r2, r4, #5
    4f18:	4b4d      	ldr	r3, [pc, #308]	; (5050 <USB_Handler+0x32c>)
    4f1a:	189b      	adds	r3, r3, r2
    4f1c:	685b      	ldr	r3, [r3, #4]
    4f1e:	011b      	lsls	r3, r3, #4
    4f20:	0c9b      	lsrs	r3, r3, #18
    4f22:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    4f24:	0123      	lsls	r3, r4, #4
    4f26:	18c3      	adds	r3, r0, r3
    4f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f2a:	2100      	movs	r1, #0
    4f2c:	4798      	blx	r3
    4f2e:	e7b1      	b.n	4e94 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4f30:	8bac      	ldrh	r4, [r5, #28]
    4f32:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4f34:	0763      	lsls	r3, r4, #29
    4f36:	d505      	bpl.n	4f44 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4f38:	2304      	movs	r3, #4
    4f3a:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4f3c:	33a1      	adds	r3, #161	; 0xa1
    4f3e:	5cfb      	ldrb	r3, [r7, r3]
    4f40:	07db      	lsls	r3, r3, #31
    4f42:	d462      	bmi.n	500a <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    4f44:	0723      	lsls	r3, r4, #28
    4f46:	d50b      	bpl.n	4f60 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4f48:	2200      	movs	r2, #0
    4f4a:	4b3f      	ldr	r3, [pc, #252]	; (5048 <USB_Handler+0x324>)
    4f4c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4f4e:	4b3b      	ldr	r3, [pc, #236]	; (503c <USB_Handler+0x318>)
    4f50:	6818      	ldr	r0, [r3, #0]
    4f52:	2308      	movs	r3, #8
    4f54:	6802      	ldr	r2, [r0, #0]
    4f56:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4f58:	339d      	adds	r3, #157	; 0x9d
    4f5a:	5cc3      	ldrb	r3, [r0, r3]
    4f5c:	079b      	lsls	r3, r3, #30
    4f5e:	d458      	bmi.n	5012 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    4f60:	0663      	lsls	r3, r4, #25
    4f62:	d508      	bpl.n	4f76 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4f64:	4b35      	ldr	r3, [pc, #212]	; (503c <USB_Handler+0x318>)
    4f66:	6818      	ldr	r0, [r3, #0]
    4f68:	2340      	movs	r3, #64	; 0x40
    4f6a:	6802      	ldr	r2, [r0, #0]
    4f6c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    4f6e:	3365      	adds	r3, #101	; 0x65
    4f70:	5cc3      	ldrb	r3, [r0, r3]
    4f72:	06db      	lsls	r3, r3, #27
    4f74:	d450      	bmi.n	5018 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4f76:	06a3      	lsls	r3, r4, #26
    4f78:	d508      	bpl.n	4f8c <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4f7a:	4b30      	ldr	r3, [pc, #192]	; (503c <USB_Handler+0x318>)
    4f7c:	6818      	ldr	r0, [r3, #0]
    4f7e:	2320      	movs	r3, #32
    4f80:	6802      	ldr	r2, [r0, #0]
    4f82:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4f84:	3385      	adds	r3, #133	; 0x85
    4f86:	5cc3      	ldrb	r3, [r0, r3]
    4f88:	071b      	lsls	r3, r3, #28
    4f8a:	d448      	bmi.n	501e <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4f8c:	06e3      	lsls	r3, r4, #27
    4f8e:	d508      	bpl.n	4fa2 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    4f90:	4b2a      	ldr	r3, [pc, #168]	; (503c <USB_Handler+0x318>)
    4f92:	6818      	ldr	r0, [r3, #0]
    4f94:	2310      	movs	r3, #16
    4f96:	6802      	ldr	r2, [r0, #0]
    4f98:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4f9a:	3395      	adds	r3, #149	; 0x95
    4f9c:	5cc3      	ldrb	r3, [r0, r3]
    4f9e:	075b      	lsls	r3, r3, #29
    4fa0:	d440      	bmi.n	5024 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    4fa2:	0623      	lsls	r3, r4, #24
    4fa4:	d50b      	bpl.n	4fbe <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    4fa6:	2200      	movs	r2, #0
    4fa8:	4b27      	ldr	r3, [pc, #156]	; (5048 <USB_Handler+0x324>)
    4faa:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4fac:	4b23      	ldr	r3, [pc, #140]	; (503c <USB_Handler+0x318>)
    4fae:	6818      	ldr	r0, [r3, #0]
    4fb0:	2380      	movs	r3, #128	; 0x80
    4fb2:	6802      	ldr	r2, [r0, #0]
    4fb4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4fb6:	3325      	adds	r3, #37	; 0x25
    4fb8:	5cc3      	ldrb	r3, [r0, r3]
    4fba:	069b      	lsls	r3, r3, #26
    4fbc:	d435      	bmi.n	502a <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4fbe:	05e3      	lsls	r3, r4, #23
    4fc0:	d50c      	bpl.n	4fdc <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    4fc2:	2200      	movs	r2, #0
    4fc4:	4b20      	ldr	r3, [pc, #128]	; (5048 <USB_Handler+0x324>)
    4fc6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4fc8:	4b1c      	ldr	r3, [pc, #112]	; (503c <USB_Handler+0x318>)
    4fca:	6818      	ldr	r0, [r3, #0]
    4fcc:	2380      	movs	r3, #128	; 0x80
    4fce:	005b      	lsls	r3, r3, #1
    4fd0:	6802      	ldr	r2, [r0, #0]
    4fd2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    4fd4:	3b5b      	subs	r3, #91	; 0x5b
    4fd6:	5cc3      	ldrb	r3, [r0, r3]
    4fd8:	065b      	lsls	r3, r3, #25
    4fda:	d429      	bmi.n	5030 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4fdc:	05a3      	lsls	r3, r4, #22
    4fde:	d50d      	bpl.n	4ffc <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4fe0:	2200      	movs	r2, #0
    4fe2:	4b19      	ldr	r3, [pc, #100]	; (5048 <USB_Handler+0x324>)
    4fe4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    4fe6:	4b15      	ldr	r3, [pc, #84]	; (503c <USB_Handler+0x318>)
    4fe8:	6818      	ldr	r0, [r3, #0]
    4fea:	2380      	movs	r3, #128	; 0x80
    4fec:	009b      	lsls	r3, r3, #2
    4fee:	6802      	ldr	r2, [r0, #0]
    4ff0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    4ff2:	3b5c      	subs	r3, #92	; 0x5c
    4ff4:	3bff      	subs	r3, #255	; 0xff
    4ff6:	5cc3      	ldrb	r3, [r0, r3]
    4ff8:	2b7f      	cmp	r3, #127	; 0x7f
    4ffa:	d81c      	bhi.n	5036 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4ffc:	b003      	add	sp, #12
    4ffe:	bc3c      	pop	{r2, r3, r4, r5}
    5000:	4690      	mov	r8, r2
    5002:	4699      	mov	r9, r3
    5004:	46a2      	mov	sl, r4
    5006:	46ab      	mov	fp, r5
    5008:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    500a:	687b      	ldr	r3, [r7, #4]
    500c:	0038      	movs	r0, r7
    500e:	4798      	blx	r3
    5010:	e798      	b.n	4f44 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    5012:	6883      	ldr	r3, [r0, #8]
    5014:	4798      	blx	r3
    5016:	e7a3      	b.n	4f60 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    5018:	6943      	ldr	r3, [r0, #20]
    501a:	4798      	blx	r3
    501c:	e7ab      	b.n	4f76 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    501e:	6903      	ldr	r3, [r0, #16]
    5020:	4798      	blx	r3
    5022:	e7b3      	b.n	4f8c <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    5024:	68c3      	ldr	r3, [r0, #12]
    5026:	4798      	blx	r3
    5028:	e7bb      	b.n	4fa2 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    502a:	6983      	ldr	r3, [r0, #24]
    502c:	4798      	blx	r3
    502e:	e7c6      	b.n	4fbe <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    5030:	69c3      	ldr	r3, [r0, #28]
    5032:	4798      	blx	r3
    5034:	e7d2      	b.n	4fdc <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    5036:	6a03      	ldr	r3, [r0, #32]
    5038:	4798      	blx	r3
    503a:	e7df      	b.n	4ffc <USB_Handler+0x2d8>
    503c:	20000360 	.word	0x20000360
    5040:	00008d60 	.word	0x00008d60
    5044:	000073bd 	.word	0x000073bd
    5048:	20000370 	.word	0x20000370
    504c:	20000374 	.word	0x20000374
    5050:	20000b54 	.word	0x20000b54
    5054:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    5058:	0023      	movs	r3, r4
    505a:	332e      	adds	r3, #46	; 0x2e
    505c:	009b      	lsls	r3, r3, #2
    505e:	4642      	mov	r2, r8
    5060:	6812      	ldr	r2, [r2, #0]
    5062:	589b      	ldr	r3, [r3, r2]
    5064:	499e      	ldr	r1, [pc, #632]	; (52e0 <USB_Handler+0x5bc>)
    5066:	4642      	mov	r2, r8
    5068:	6810      	ldr	r0, [r2, #0]
    506a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    506c:	3401      	adds	r4, #1
    506e:	2c07      	cmp	r4, #7
    5070:	d0c4      	beq.n	4ffc <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    5072:	0063      	lsls	r3, r4, #1
    5074:	5bdb      	ldrh	r3, [r3, r7]
    5076:	4233      	tst	r3, r6
    5078:	d003      	beq.n	5082 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    507a:	464a      	mov	r2, r9
    507c:	6812      	ldr	r2, [r2, #0]
    507e:	6812      	ldr	r2, [r2, #0]
    5080:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    5082:	422b      	tst	r3, r5
    5084:	d0f2      	beq.n	506c <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    5086:	2c06      	cmp	r4, #6
    5088:	d1e6      	bne.n	5058 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    508a:	4b96      	ldr	r3, [pc, #600]	; (52e4 <USB_Handler+0x5c0>)
    508c:	891b      	ldrh	r3, [r3, #8]
    508e:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    5090:	2280      	movs	r2, #128	; 0x80
    5092:	0052      	lsls	r2, r2, #1
    5094:	4013      	ands	r3, r2
    5096:	4a92      	ldr	r2, [pc, #584]	; (52e0 <USB_Handler+0x5bc>)
    5098:	6013      	str	r3, [r2, #0]
    509a:	e7dd      	b.n	5058 <USB_Handler+0x334>
    509c:	003c      	movs	r4, r7
    509e:	3459      	adds	r4, #89	; 0x59
    50a0:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    50a2:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    50a4:	2201      	movs	r2, #1
    50a6:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    50a8:	325f      	adds	r2, #95	; 0x5f
    50aa:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    50ac:	3a50      	subs	r2, #80	; 0x50
    50ae:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    50b0:	3a0d      	subs	r2, #13
    50b2:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    50b4:	46b8      	mov	r8, r7
    50b6:	002f      	movs	r7, r5
    50b8:	e0b9      	b.n	522e <USB_Handler+0x50a>
    50ba:	002a      	movs	r2, r5
    50bc:	003d      	movs	r5, r7
    50be:	4647      	mov	r7, r8
    50c0:	4690      	mov	r8, r2
    50c2:	015b      	lsls	r3, r3, #5
    50c4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    50c6:	2308      	movs	r3, #8
    50c8:	33ff      	adds	r3, #255	; 0xff
    50ca:	5ceb      	ldrb	r3, [r5, r3]
    50cc:	065b      	lsls	r3, r3, #25
    50ce:	d516      	bpl.n	50fe <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    50d0:	2240      	movs	r2, #64	; 0x40
    50d2:	2308      	movs	r3, #8
    50d4:	33ff      	adds	r3, #255	; 0xff
    50d6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    50d8:	3b88      	subs	r3, #136	; 0x88
    50da:	3bff      	subs	r3, #255	; 0xff
    50dc:	4642      	mov	r2, r8
    50de:	4313      	orrs	r3, r2
    50e0:	4a81      	ldr	r2, [pc, #516]	; (52e8 <USB_Handler+0x5c4>)
    50e2:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    50e4:	2360      	movs	r3, #96	; 0x60
    50e6:	420b      	tst	r3, r1
    50e8:	d100      	bne.n	50ec <USB_Handler+0x3c8>
    50ea:	e787      	b.n	4ffc <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    50ec:	9b01      	ldr	r3, [sp, #4]
    50ee:	011b      	lsls	r3, r3, #4
    50f0:	18fb      	adds	r3, r7, r3
    50f2:	33e0      	adds	r3, #224	; 0xe0
    50f4:	681b      	ldr	r3, [r3, #0]
    50f6:	497c      	ldr	r1, [pc, #496]	; (52e8 <USB_Handler+0x5c4>)
    50f8:	0038      	movs	r0, r7
    50fa:	4798      	blx	r3
    50fc:	e77e      	b.n	4ffc <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    50fe:	2308      	movs	r3, #8
    5100:	33ff      	adds	r3, #255	; 0xff
    5102:	5ceb      	ldrb	r3, [r5, r3]
    5104:	069b      	lsls	r3, r3, #26
    5106:	d5ed      	bpl.n	50e4 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    5108:	2220      	movs	r2, #32
    510a:	2308      	movs	r3, #8
    510c:	33ff      	adds	r3, #255	; 0xff
    510e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5110:	4b75      	ldr	r3, [pc, #468]	; (52e8 <USB_Handler+0x5c4>)
    5112:	4642      	mov	r2, r8
    5114:	719a      	strb	r2, [r3, #6]
    5116:	e7e5      	b.n	50e4 <USB_Handler+0x3c0>
    5118:	003d      	movs	r5, r7
    511a:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    511c:	9a01      	ldr	r2, [sp, #4]
    511e:	0013      	movs	r3, r2
    5120:	3308      	adds	r3, #8
    5122:	015b      	lsls	r3, r3, #5
    5124:	18ed      	adds	r5, r5, r3
    5126:	2310      	movs	r3, #16
    5128:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    512a:	18bb      	adds	r3, r7, r2
    512c:	3361      	adds	r3, #97	; 0x61
    512e:	33ff      	adds	r3, #255	; 0xff
    5130:	781b      	ldrb	r3, [r3, #0]
    5132:	06db      	lsls	r3, r3, #27
    5134:	d400      	bmi.n	5138 <USB_Handler+0x414>
    5136:	e761      	b.n	4ffc <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5138:	0010      	movs	r0, r2
    513a:	0152      	lsls	r2, r2, #5
    513c:	4b69      	ldr	r3, [pc, #420]	; (52e4 <USB_Handler+0x5c0>)
    513e:	189b      	adds	r3, r3, r2
    5140:	685b      	ldr	r3, [r3, #4]
    5142:	049b      	lsls	r3, r3, #18
    5144:	0c9b      	lsrs	r3, r3, #18
    5146:	4968      	ldr	r1, [pc, #416]	; (52e8 <USB_Handler+0x5c4>)
    5148:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    514a:	0103      	lsls	r3, r0, #4
    514c:	18fb      	adds	r3, r7, r3
    514e:	33dc      	adds	r3, #220	; 0xdc
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	4640      	mov	r0, r8
    5154:	4798      	blx	r3
    5156:	e751      	b.n	4ffc <USB_Handler+0x2d8>
    5158:	002a      	movs	r2, r5
    515a:	003d      	movs	r5, r7
    515c:	4647      	mov	r7, r8
    515e:	4690      	mov	r8, r2
    5160:	015b      	lsls	r3, r3, #5
    5162:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    5164:	2308      	movs	r3, #8
    5166:	33ff      	adds	r3, #255	; 0xff
    5168:	5ceb      	ldrb	r3, [r5, r3]
    516a:	079b      	lsls	r3, r3, #30
    516c:	d51e      	bpl.n	51ac <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    516e:	2202      	movs	r2, #2
    5170:	2308      	movs	r3, #8
    5172:	33ff      	adds	r3, #255	; 0xff
    5174:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5176:	485c      	ldr	r0, [pc, #368]	; (52e8 <USB_Handler+0x5c4>)
    5178:	3b88      	subs	r3, #136	; 0x88
    517a:	3bff      	subs	r3, #255	; 0xff
    517c:	4642      	mov	r2, r8
    517e:	4313      	orrs	r3, r2
    5180:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    5182:	9b01      	ldr	r3, [sp, #4]
    5184:	015a      	lsls	r2, r3, #5
    5186:	4b57      	ldr	r3, [pc, #348]	; (52e4 <USB_Handler+0x5c0>)
    5188:	189b      	adds	r3, r3, r2
    518a:	3310      	adds	r3, #16
    518c:	685b      	ldr	r3, [r3, #4]
    518e:	049b      	lsls	r3, r3, #18
    5190:	0c9b      	lsrs	r3, r3, #18
    5192:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    5194:	078b      	lsls	r3, r1, #30
    5196:	d100      	bne.n	519a <USB_Handler+0x476>
    5198:	e730      	b.n	4ffc <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    519a:	9b01      	ldr	r3, [sp, #4]
    519c:	330d      	adds	r3, #13
    519e:	011b      	lsls	r3, r3, #4
    51a0:	18fb      	adds	r3, r7, r3
    51a2:	685b      	ldr	r3, [r3, #4]
    51a4:	4950      	ldr	r1, [pc, #320]	; (52e8 <USB_Handler+0x5c4>)
    51a6:	0038      	movs	r0, r7
    51a8:	4798      	blx	r3
    51aa:	e727      	b.n	4ffc <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    51ac:	2308      	movs	r3, #8
    51ae:	33ff      	adds	r3, #255	; 0xff
    51b0:	5ceb      	ldrb	r3, [r5, r3]
    51b2:	07db      	lsls	r3, r3, #31
    51b4:	d5ee      	bpl.n	5194 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    51b6:	2201      	movs	r2, #1
    51b8:	2308      	movs	r3, #8
    51ba:	33ff      	adds	r3, #255	; 0xff
    51bc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    51be:	484a      	ldr	r0, [pc, #296]	; (52e8 <USB_Handler+0x5c4>)
    51c0:	4643      	mov	r3, r8
    51c2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    51c4:	9b01      	ldr	r3, [sp, #4]
    51c6:	015b      	lsls	r3, r3, #5
    51c8:	4a46      	ldr	r2, [pc, #280]	; (52e4 <USB_Handler+0x5c0>)
    51ca:	18d2      	adds	r2, r2, r3
    51cc:	6853      	ldr	r3, [r2, #4]
    51ce:	049b      	lsls	r3, r3, #18
    51d0:	0c9b      	lsrs	r3, r3, #18
    51d2:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    51d4:	6853      	ldr	r3, [r2, #4]
    51d6:	011b      	lsls	r3, r3, #4
    51d8:	0c9b      	lsrs	r3, r3, #18
    51da:	8083      	strh	r3, [r0, #4]
    51dc:	e7da      	b.n	5194 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    51de:	2208      	movs	r2, #8
    51e0:	32ff      	adds	r2, #255	; 0xff
    51e2:	5c9a      	ldrb	r2, [r3, r2]
    51e4:	0752      	lsls	r2, r2, #29
    51e6:	d56e      	bpl.n	52c6 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    51e8:	2004      	movs	r0, #4
    51ea:	2208      	movs	r2, #8
    51ec:	32ff      	adds	r2, #255	; 0xff
    51ee:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    51f0:	9801      	ldr	r0, [sp, #4]
    51f2:	0142      	lsls	r2, r0, #5
    51f4:	4b3b      	ldr	r3, [pc, #236]	; (52e4 <USB_Handler+0x5c0>)
    51f6:	189b      	adds	r3, r3, r2
    51f8:	7a9b      	ldrb	r3, [r3, #10]
    51fa:	079b      	lsls	r3, r3, #30
    51fc:	d505      	bpl.n	520a <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    51fe:	4b39      	ldr	r3, [pc, #228]	; (52e4 <USB_Handler+0x5c0>)
    5200:	189b      	adds	r3, r3, r2
    5202:	7a9a      	ldrb	r2, [r3, #10]
    5204:	2002      	movs	r0, #2
    5206:	4382      	bics	r2, r0
    5208:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    520a:	4b37      	ldr	r3, [pc, #220]	; (52e8 <USB_Handler+0x5c4>)
    520c:	4642      	mov	r2, r8
    520e:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    5210:	9b01      	ldr	r3, [sp, #4]
    5212:	3308      	adds	r3, #8
    5214:	015b      	lsls	r3, r3, #5
    5216:	683a      	ldr	r2, [r7, #0]
    5218:	4694      	mov	ip, r2
    521a:	4463      	add	r3, ip
    521c:	79db      	ldrb	r3, [r3, #7]
    521e:	07db      	lsls	r3, r3, #31
    5220:	d551      	bpl.n	52c6 <USB_Handler+0x5a2>
    5222:	e6eb      	b.n	4ffc <USB_Handler+0x2d8>
    5224:	3301      	adds	r3, #1
    5226:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    5228:	2b08      	cmp	r3, #8
    522a:	d100      	bne.n	522e <USB_Handler+0x50a>
    522c:	e6e6      	b.n	4ffc <USB_Handler+0x2d8>
    522e:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    5230:	9301      	str	r3, [sp, #4]
    5232:	0032      	movs	r2, r6
    5234:	411a      	asrs	r2, r3
    5236:	4661      	mov	r1, ip
    5238:	4211      	tst	r1, r2
    523a:	d0f3      	beq.n	5224 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    523c:	001a      	movs	r2, r3
    523e:	3208      	adds	r2, #8
    5240:	0152      	lsls	r2, r2, #5
    5242:	18ba      	adds	r2, r7, r2
    5244:	79d2      	ldrb	r2, [r2, #7]
    5246:	b2d2      	uxtb	r2, r2
    5248:	7a21      	ldrb	r1, [r4, #8]
    524a:	4011      	ands	r1, r2
    524c:	7820      	ldrb	r0, [r4, #0]
    524e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5250:	4648      	mov	r0, r9
    5252:	4210      	tst	r0, r2
    5254:	d000      	beq.n	5258 <USB_Handler+0x534>
    5256:	e730      	b.n	50ba <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5258:	4650      	mov	r0, sl
    525a:	4210      	tst	r0, r2
    525c:	d000      	beq.n	5260 <USB_Handler+0x53c>
    525e:	e75b      	b.n	5118 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    5260:	4658      	mov	r0, fp
    5262:	4210      	tst	r0, r2
    5264:	d000      	beq.n	5268 <USB_Handler+0x544>
    5266:	e777      	b.n	5158 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    5268:	200c      	movs	r0, #12
    526a:	4210      	tst	r0, r2
    526c:	d0da      	beq.n	5224 <USB_Handler+0x500>
    526e:	002a      	movs	r2, r5
    5270:	003d      	movs	r5, r7
    5272:	4647      	mov	r7, r8
    5274:	4690      	mov	r8, r2
    5276:	015b      	lsls	r3, r3, #5
    5278:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    527a:	2208      	movs	r2, #8
    527c:	32ff      	adds	r2, #255	; 0xff
    527e:	5c9a      	ldrb	r2, [r3, r2]
    5280:	0712      	lsls	r2, r2, #28
    5282:	d5ac      	bpl.n	51de <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    5284:	3804      	subs	r0, #4
    5286:	2208      	movs	r2, #8
    5288:	32ff      	adds	r2, #255	; 0xff
    528a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    528c:	9801      	ldr	r0, [sp, #4]
    528e:	0142      	lsls	r2, r0, #5
    5290:	4b14      	ldr	r3, [pc, #80]	; (52e4 <USB_Handler+0x5c0>)
    5292:	189b      	adds	r3, r3, r2
    5294:	7e9b      	ldrb	r3, [r3, #26]
    5296:	079b      	lsls	r3, r3, #30
    5298:	d505      	bpl.n	52a6 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    529a:	4b12      	ldr	r3, [pc, #72]	; (52e4 <USB_Handler+0x5c0>)
    529c:	189b      	adds	r3, r3, r2
    529e:	7e9a      	ldrb	r2, [r3, #26]
    52a0:	2002      	movs	r0, #2
    52a2:	4382      	bics	r2, r0
    52a4:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    52a6:	2380      	movs	r3, #128	; 0x80
    52a8:	425b      	negs	r3, r3
    52aa:	4642      	mov	r2, r8
    52ac:	4313      	orrs	r3, r2
    52ae:	4a0e      	ldr	r2, [pc, #56]	; (52e8 <USB_Handler+0x5c4>)
    52b0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    52b2:	9b01      	ldr	r3, [sp, #4]
    52b4:	3308      	adds	r3, #8
    52b6:	015b      	lsls	r3, r3, #5
    52b8:	683a      	ldr	r2, [r7, #0]
    52ba:	4694      	mov	ip, r2
    52bc:	4463      	add	r3, ip
    52be:	79db      	ldrb	r3, [r3, #7]
    52c0:	079b      	lsls	r3, r3, #30
    52c2:	d500      	bpl.n	52c6 <USB_Handler+0x5a2>
    52c4:	e69a      	b.n	4ffc <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    52c6:	230c      	movs	r3, #12
    52c8:	420b      	tst	r3, r1
    52ca:	d100      	bne.n	52ce <USB_Handler+0x5aa>
    52cc:	e696      	b.n	4ffc <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    52ce:	9b01      	ldr	r3, [sp, #4]
    52d0:	011b      	lsls	r3, r3, #4
    52d2:	18fb      	adds	r3, r7, r3
    52d4:	33d8      	adds	r3, #216	; 0xd8
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	4903      	ldr	r1, [pc, #12]	; (52e8 <USB_Handler+0x5c4>)
    52da:	0038      	movs	r0, r7
    52dc:	4798      	blx	r3
    52de:	e68d      	b.n	4ffc <USB_Handler+0x2d8>
    52e0:	20000364 	.word	0x20000364
    52e4:	20000b54 	.word	0x20000b54
    52e8:	20000368 	.word	0x20000368

000052ec <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    52ec:	2200      	movs	r2, #0
    52ee:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    52f0:	2301      	movs	r3, #1
    52f2:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    52f4:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    52f6:	70c3      	strb	r3, [r0, #3]
}
    52f8:	4770      	bx	lr
	...

000052fc <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fe:	46ce      	mov	lr, r9
    5300:	4647      	mov	r7, r8
    5302:	b580      	push	{r7, lr}
    5304:	b083      	sub	sp, #12
    5306:	0004      	movs	r4, r0
    5308:	000d      	movs	r5, r1
    530a:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    530c:	2300      	movs	r3, #0
    530e:	4a6e      	ldr	r2, [pc, #440]	; (54c8 <usb_init+0x1cc>)
    5310:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    5312:	4a6e      	ldr	r2, [pc, #440]	; (54cc <usb_init+0x1d0>)
    5314:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    5316:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    5318:	496d      	ldr	r1, [pc, #436]	; (54d0 <usb_init+0x1d4>)
    531a:	69ca      	ldr	r2, [r1, #28]
    531c:	2020      	movs	r0, #32
    531e:	4302      	orrs	r2, r0
    5320:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5322:	af01      	add	r7, sp, #4
    5324:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5326:	2201      	movs	r2, #1
    5328:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    532a:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    532c:	3306      	adds	r3, #6
    532e:	4699      	mov	r9, r3
    5330:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    5332:	0039      	movs	r1, r7
    5334:	3808      	subs	r0, #8
    5336:	4b67      	ldr	r3, [pc, #412]	; (54d4 <usb_init+0x1d8>)
    5338:	4698      	mov	r8, r3
    533a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    533c:	464b      	mov	r3, r9
    533e:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    5340:	0039      	movs	r1, r7
    5342:	2019      	movs	r0, #25
    5344:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    5346:	78b3      	ldrb	r3, [r6, #2]
    5348:	466a      	mov	r2, sp
    534a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    534c:	4669      	mov	r1, sp
    534e:	2006      	movs	r0, #6
    5350:	4b61      	ldr	r3, [pc, #388]	; (54d8 <usb_init+0x1dc>)
    5352:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    5354:	2006      	movs	r0, #6
    5356:	4b61      	ldr	r3, [pc, #388]	; (54dc <usb_init+0x1e0>)
    5358:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    535a:	782b      	ldrb	r3, [r5, #0]
    535c:	2201      	movs	r2, #1
    535e:	4313      	orrs	r3, r2
    5360:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    5362:	78ab      	ldrb	r3, [r5, #2]
    5364:	07db      	lsls	r3, r3, #31
    5366:	d4fc      	bmi.n	5362 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5368:	4a5d      	ldr	r2, [pc, #372]	; (54e0 <usb_init+0x1e4>)
    536a:	78d3      	ldrb	r3, [r2, #3]
    536c:	2103      	movs	r1, #3
    536e:	438b      	bics	r3, r1
    5370:	2102      	movs	r1, #2
    5372:	430b      	orrs	r3, r1
    5374:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5376:	78d3      	ldrb	r3, [r2, #3]
    5378:	210c      	movs	r1, #12
    537a:	438b      	bics	r3, r1
    537c:	2108      	movs	r1, #8
    537e:	430b      	orrs	r3, r1
    5380:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5382:	4b58      	ldr	r3, [pc, #352]	; (54e4 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    5384:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5386:	039b      	lsls	r3, r3, #14
    5388:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    538a:	2b1f      	cmp	r3, #31
    538c:	d100      	bne.n	5390 <usb_init+0x94>
    538e:	e08f      	b.n	54b0 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    5390:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    5392:	019b      	lsls	r3, r3, #6
    5394:	4954      	ldr	r1, [pc, #336]	; (54e8 <usb_init+0x1ec>)
    5396:	400a      	ands	r2, r1
    5398:	4313      	orrs	r3, r2
    539a:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    539c:	4b51      	ldr	r3, [pc, #324]	; (54e4 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    539e:	681b      	ldr	r3, [r3, #0]
    53a0:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    53a2:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    53a4:	2b1f      	cmp	r3, #31
    53a6:	d100      	bne.n	53aa <usb_init+0xae>
    53a8:	e084      	b.n	54b4 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    53aa:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    53ac:	211f      	movs	r1, #31
    53ae:	438a      	bics	r2, r1
    53b0:	4313      	orrs	r3, r2
    53b2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    53b4:	4b4b      	ldr	r3, [pc, #300]	; (54e4 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    53b6:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    53b8:	019b      	lsls	r3, r3, #6
    53ba:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    53bc:	2b07      	cmp	r3, #7
    53be:	d100      	bne.n	53c2 <usb_init+0xc6>
    53c0:	e07a      	b.n	54b8 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    53c2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    53c4:	031b      	lsls	r3, r3, #12
    53c6:	4949      	ldr	r1, [pc, #292]	; (54ec <usb_init+0x1f0>)
    53c8:	400a      	ands	r2, r1
    53ca:	4313      	orrs	r3, r2
    53cc:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    53ce:	7832      	ldrb	r2, [r6, #0]
    53d0:	7829      	ldrb	r1, [r5, #0]
    53d2:	01d2      	lsls	r2, r2, #7
    53d4:	237f      	movs	r3, #127	; 0x7f
    53d6:	400b      	ands	r3, r1
    53d8:	4313      	orrs	r3, r2
    53da:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    53dc:	7871      	ldrb	r1, [r6, #1]
    53de:	782b      	ldrb	r3, [r5, #0]
    53e0:	2201      	movs	r2, #1
    53e2:	400a      	ands	r2, r1
    53e4:	0092      	lsls	r2, r2, #2
    53e6:	2104      	movs	r1, #4
    53e8:	438b      	bics	r3, r1
    53ea:	4313      	orrs	r3, r2
    53ec:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    53ee:	4b40      	ldr	r3, [pc, #256]	; (54f0 <usb_init+0x1f4>)
    53f0:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    53f2:	78f3      	ldrb	r3, [r6, #3]
    53f4:	2b01      	cmp	r3, #1
    53f6:	d061      	beq.n	54bc <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    53f8:	2b00      	cmp	r3, #0
    53fa:	d106      	bne.n	540a <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    53fc:	6822      	ldr	r2, [r4, #0]
    53fe:	8913      	ldrh	r3, [r2, #8]
    5400:	210c      	movs	r1, #12
    5402:	438b      	bics	r3, r1
    5404:	2104      	movs	r1, #4
    5406:	430b      	orrs	r3, r1
    5408:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    540a:	2280      	movs	r2, #128	; 0x80
    540c:	0052      	lsls	r2, r2, #1
    540e:	2100      	movs	r1, #0
    5410:	4837      	ldr	r0, [pc, #220]	; (54f0 <usb_init+0x1f4>)
    5412:	4b38      	ldr	r3, [pc, #224]	; (54f4 <usb_init+0x1f8>)
    5414:	4798      	blx	r3
    5416:	1d23      	adds	r3, r4, #4
    5418:	0021      	movs	r1, r4
    541a:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    541c:	2200      	movs	r2, #0
    541e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    5420:	428b      	cmp	r3, r1
    5422:	d1fc      	bne.n	541e <usb_init+0x122>
    5424:	0021      	movs	r1, r4
    5426:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    5428:	2200      	movs	r2, #0
    542a:	601a      	str	r2, [r3, #0]
    542c:	605a      	str	r2, [r3, #4]
    542e:	609a      	str	r2, [r3, #8]
    5430:	60da      	str	r2, [r3, #12]
    5432:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5434:	428b      	cmp	r3, r1
    5436:	d1f8      	bne.n	542a <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    5438:	2300      	movs	r3, #0
    543a:	22a4      	movs	r2, #164	; 0xa4
    543c:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    543e:	3201      	adds	r2, #1
    5440:	54a3      	strb	r3, [r4, r2]
    5442:	0023      	movs	r3, r4
    5444:	33a6      	adds	r3, #166	; 0xa6
    5446:	0021      	movs	r1, r4
    5448:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    544a:	2200      	movs	r2, #0
    544c:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    544e:	721a      	strb	r2, [r3, #8]
    5450:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5452:	4299      	cmp	r1, r3
    5454:	d1fa      	bne.n	544c <usb_init+0x150>
    5456:	0023      	movs	r3, r4
    5458:	33b8      	adds	r3, #184	; 0xb8
    545a:	0021      	movs	r1, r4
    545c:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    545e:	2200      	movs	r2, #0
    5460:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    5462:	428b      	cmp	r3, r1
    5464:	d1fc      	bne.n	5460 <usb_init+0x164>
    5466:	0021      	movs	r1, r4
    5468:	3155      	adds	r1, #85	; 0x55
    546a:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    546c:	2200      	movs	r2, #0
    546e:	601a      	str	r2, [r3, #0]
    5470:	605a      	str	r2, [r3, #4]
    5472:	609a      	str	r2, [r3, #8]
    5474:	60da      	str	r2, [r3, #12]
    5476:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    5478:	428b      	cmp	r3, r1
    547a:	d1f8      	bne.n	546e <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    547c:	2300      	movs	r3, #0
    547e:	22aa      	movs	r2, #170	; 0xaa
    5480:	0052      	lsls	r2, r2, #1
    5482:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    5484:	3202      	adds	r2, #2
    5486:	52a3      	strh	r3, [r4, r2]
    5488:	0023      	movs	r3, r4
    548a:	3359      	adds	r3, #89	; 0x59
    548c:	33ff      	adds	r3, #255	; 0xff
    548e:	3461      	adds	r4, #97	; 0x61
    5490:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    5492:	2200      	movs	r2, #0
    5494:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    5496:	721a      	strb	r2, [r3, #8]
    5498:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    549a:	42a3      	cmp	r3, r4
    549c:	d1fa      	bne.n	5494 <usb_init+0x198>
    549e:	2280      	movs	r2, #128	; 0x80
    54a0:	4b15      	ldr	r3, [pc, #84]	; (54f8 <usb_init+0x1fc>)
    54a2:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    54a4:	2000      	movs	r0, #0
    54a6:	b003      	add	sp, #12
    54a8:	bc0c      	pop	{r2, r3}
    54aa:	4690      	mov	r8, r2
    54ac:	4699      	mov	r9, r3
    54ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    54b0:	3b1a      	subs	r3, #26
    54b2:	e76d      	b.n	5390 <usb_init+0x94>
		pad_transp = 29;
    54b4:	3b02      	subs	r3, #2
    54b6:	e778      	b.n	53aa <usb_init+0xae>
		pad_trim = 3;
    54b8:	3b04      	subs	r3, #4
    54ba:	e782      	b.n	53c2 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    54bc:	6822      	ldr	r2, [r4, #0]
    54be:	8913      	ldrh	r3, [r2, #8]
    54c0:	3108      	adds	r1, #8
    54c2:	438b      	bics	r3, r1
    54c4:	8113      	strh	r3, [r2, #8]
    54c6:	e7a0      	b.n	540a <usb_init+0x10e>
    54c8:	20000370 	.word	0x20000370
    54cc:	20000360 	.word	0x20000360
    54d0:	40000400 	.word	0x40000400
    54d4:	00006f11 	.word	0x00006f11
    54d8:	00006e19 	.word	0x00006e19
    54dc:	00006d8d 	.word	0x00006d8d
    54e0:	41005000 	.word	0x41005000
    54e4:	00806024 	.word	0x00806024
    54e8:	fffff83f 	.word	0xfffff83f
    54ec:	ffff8fff 	.word	0xffff8fff
    54f0:	20000b54 	.word	0x20000b54
    54f4:	00007683 	.word	0x00007683
    54f8:	e000e100 	.word	0xe000e100

000054fc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    54fc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    54fe:	2a00      	cmp	r2, #0
    5500:	d001      	beq.n	5506 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    5502:	0018      	movs	r0, r3
    5504:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    5506:	008b      	lsls	r3, r1, #2
    5508:	4a06      	ldr	r2, [pc, #24]	; (5524 <extint_register_callback+0x28>)
    550a:	589b      	ldr	r3, [r3, r2]
    550c:	2b00      	cmp	r3, #0
    550e:	d003      	beq.n	5518 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5510:	4283      	cmp	r3, r0
    5512:	d005      	beq.n	5520 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    5514:	231d      	movs	r3, #29
    5516:	e7f4      	b.n	5502 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    5518:	0089      	lsls	r1, r1, #2
    551a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    551c:	2300      	movs	r3, #0
    551e:	e7f0      	b.n	5502 <extint_register_callback+0x6>
		return STATUS_OK;
    5520:	2300      	movs	r3, #0
    5522:	e7ee      	b.n	5502 <extint_register_callback+0x6>
    5524:	200003cc 	.word	0x200003cc

00005528 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5528:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    552a:	2900      	cmp	r1, #0
    552c:	d001      	beq.n	5532 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    552e:	0018      	movs	r0, r3
    5530:	4770      	bx	lr
		return NULL;
    5532:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    5534:	281f      	cmp	r0, #31
    5536:	d800      	bhi.n	553a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    5538:	4a02      	ldr	r2, [pc, #8]	; (5544 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    553a:	2301      	movs	r3, #1
    553c:	4083      	lsls	r3, r0
    553e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    5540:	2300      	movs	r3, #0
    5542:	e7f4      	b.n	552e <extint_chan_enable_callback+0x6>
    5544:	40001800 	.word	0x40001800

00005548 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5548:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    554a:	2900      	cmp	r1, #0
    554c:	d001      	beq.n	5552 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    554e:	0018      	movs	r0, r3
    5550:	4770      	bx	lr
		return NULL;
    5552:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    5554:	281f      	cmp	r0, #31
    5556:	d800      	bhi.n	555a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    5558:	4a02      	ldr	r2, [pc, #8]	; (5564 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    555a:	2301      	movs	r3, #1
    555c:	4083      	lsls	r3, r0
    555e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    5560:	2300      	movs	r3, #0
    5562:	e7f4      	b.n	554e <extint_chan_disable_callback+0x6>
    5564:	40001800 	.word	0x40001800

00005568 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5568:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    556a:	2200      	movs	r2, #0
    556c:	4b10      	ldr	r3, [pc, #64]	; (55b0 <EIC_Handler+0x48>)
    556e:	701a      	strb	r2, [r3, #0]
    5570:	2300      	movs	r3, #0
    5572:	4910      	ldr	r1, [pc, #64]	; (55b4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    5574:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5576:	4e10      	ldr	r6, [pc, #64]	; (55b8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5578:	4c0d      	ldr	r4, [pc, #52]	; (55b0 <EIC_Handler+0x48>)
    557a:	e00a      	b.n	5592 <EIC_Handler+0x2a>
		return eics[eic_index];
    557c:	490d      	ldr	r1, [pc, #52]	; (55b4 <EIC_Handler+0x4c>)
    557e:	e008      	b.n	5592 <EIC_Handler+0x2a>
    5580:	7823      	ldrb	r3, [r4, #0]
    5582:	3301      	adds	r3, #1
    5584:	b2db      	uxtb	r3, r3
    5586:	7023      	strb	r3, [r4, #0]
    5588:	2b0f      	cmp	r3, #15
    558a:	d810      	bhi.n	55ae <EIC_Handler+0x46>
		return NULL;
    558c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    558e:	2b1f      	cmp	r3, #31
    5590:	d9f4      	bls.n	557c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    5592:	0028      	movs	r0, r5
    5594:	4018      	ands	r0, r3
    5596:	2201      	movs	r2, #1
    5598:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    559a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    559c:	4210      	tst	r0, r2
    559e:	d0ef      	beq.n	5580 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    55a0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    55a2:	009b      	lsls	r3, r3, #2
    55a4:	599b      	ldr	r3, [r3, r6]
    55a6:	2b00      	cmp	r3, #0
    55a8:	d0ea      	beq.n	5580 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    55aa:	4798      	blx	r3
    55ac:	e7e8      	b.n	5580 <EIC_Handler+0x18>
			}
		}
	}
}
    55ae:	bd70      	pop	{r4, r5, r6, pc}
    55b0:	20000c54 	.word	0x20000c54
    55b4:	40001800 	.word	0x40001800
    55b8:	200003cc 	.word	0x200003cc

000055bc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    55bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55be:	46de      	mov	lr, fp
    55c0:	4657      	mov	r7, sl
    55c2:	464e      	mov	r6, r9
    55c4:	4645      	mov	r5, r8
    55c6:	b5e0      	push	{r5, r6, r7, lr}
    55c8:	b087      	sub	sp, #28
    55ca:	4680      	mov	r8, r0
    55cc:	9104      	str	r1, [sp, #16]
    55ce:	0016      	movs	r6, r2
    55d0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    55d2:	2200      	movs	r2, #0
    55d4:	2300      	movs	r3, #0
    55d6:	2100      	movs	r1, #0
    55d8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    55da:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    55dc:	2001      	movs	r0, #1
    55de:	0021      	movs	r1, r4
    55e0:	9600      	str	r6, [sp, #0]
    55e2:	9701      	str	r7, [sp, #4]
    55e4:	465c      	mov	r4, fp
    55e6:	9403      	str	r4, [sp, #12]
    55e8:	4644      	mov	r4, r8
    55ea:	9405      	str	r4, [sp, #20]
    55ec:	e013      	b.n	5616 <long_division+0x5a>
    55ee:	2420      	movs	r4, #32
    55f0:	1a64      	subs	r4, r4, r1
    55f2:	0005      	movs	r5, r0
    55f4:	40e5      	lsrs	r5, r4
    55f6:	46a8      	mov	r8, r5
    55f8:	e014      	b.n	5624 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    55fa:	9c00      	ldr	r4, [sp, #0]
    55fc:	9d01      	ldr	r5, [sp, #4]
    55fe:	1b12      	subs	r2, r2, r4
    5600:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5602:	465c      	mov	r4, fp
    5604:	464d      	mov	r5, r9
    5606:	432c      	orrs	r4, r5
    5608:	46a3      	mov	fp, r4
    560a:	9c03      	ldr	r4, [sp, #12]
    560c:	4645      	mov	r5, r8
    560e:	432c      	orrs	r4, r5
    5610:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5612:	3901      	subs	r1, #1
    5614:	d325      	bcc.n	5662 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5616:	2420      	movs	r4, #32
    5618:	4264      	negs	r4, r4
    561a:	190c      	adds	r4, r1, r4
    561c:	d4e7      	bmi.n	55ee <long_division+0x32>
    561e:	0005      	movs	r5, r0
    5620:	40a5      	lsls	r5, r4
    5622:	46a8      	mov	r8, r5
    5624:	0004      	movs	r4, r0
    5626:	408c      	lsls	r4, r1
    5628:	46a1      	mov	r9, r4
		r = r << 1;
    562a:	1892      	adds	r2, r2, r2
    562c:	415b      	adcs	r3, r3
    562e:	0014      	movs	r4, r2
    5630:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5632:	9e05      	ldr	r6, [sp, #20]
    5634:	464f      	mov	r7, r9
    5636:	403e      	ands	r6, r7
    5638:	46b4      	mov	ip, r6
    563a:	9e04      	ldr	r6, [sp, #16]
    563c:	4647      	mov	r7, r8
    563e:	403e      	ands	r6, r7
    5640:	46b2      	mov	sl, r6
    5642:	4666      	mov	r6, ip
    5644:	4657      	mov	r7, sl
    5646:	433e      	orrs	r6, r7
    5648:	d003      	beq.n	5652 <long_division+0x96>
			r |= 0x01;
    564a:	0006      	movs	r6, r0
    564c:	4326      	orrs	r6, r4
    564e:	0032      	movs	r2, r6
    5650:	002b      	movs	r3, r5
		if (r >= d) {
    5652:	9c00      	ldr	r4, [sp, #0]
    5654:	9d01      	ldr	r5, [sp, #4]
    5656:	429d      	cmp	r5, r3
    5658:	d8db      	bhi.n	5612 <long_division+0x56>
    565a:	d1ce      	bne.n	55fa <long_division+0x3e>
    565c:	4294      	cmp	r4, r2
    565e:	d8d8      	bhi.n	5612 <long_division+0x56>
    5660:	e7cb      	b.n	55fa <long_division+0x3e>
    5662:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5664:	4658      	mov	r0, fp
    5666:	0019      	movs	r1, r3
    5668:	b007      	add	sp, #28
    566a:	bc3c      	pop	{r2, r3, r4, r5}
    566c:	4690      	mov	r8, r2
    566e:	4699      	mov	r9, r3
    5670:	46a2      	mov	sl, r4
    5672:	46ab      	mov	fp, r5
    5674:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005676 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5676:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5678:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    567a:	2340      	movs	r3, #64	; 0x40
    567c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    567e:	4281      	cmp	r1, r0
    5680:	d202      	bcs.n	5688 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5682:	0018      	movs	r0, r3
    5684:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5686:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5688:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    568a:	1c63      	adds	r3, r4, #1
    568c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    568e:	4288      	cmp	r0, r1
    5690:	d9f9      	bls.n	5686 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5692:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5694:	2cff      	cmp	r4, #255	; 0xff
    5696:	d8f4      	bhi.n	5682 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5698:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    569a:	2300      	movs	r3, #0
    569c:	e7f1      	b.n	5682 <_sercom_get_sync_baud_val+0xc>
	...

000056a0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    56a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56a2:	b083      	sub	sp, #12
    56a4:	000f      	movs	r7, r1
    56a6:	0016      	movs	r6, r2
    56a8:	aa08      	add	r2, sp, #32
    56aa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    56ac:	0004      	movs	r4, r0
    56ae:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    56b0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    56b2:	42bc      	cmp	r4, r7
    56b4:	d902      	bls.n	56bc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    56b6:	0010      	movs	r0, r2
    56b8:	b003      	add	sp, #12
    56ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    56bc:	2b00      	cmp	r3, #0
    56be:	d114      	bne.n	56ea <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    56c0:	0002      	movs	r2, r0
    56c2:	0008      	movs	r0, r1
    56c4:	2100      	movs	r1, #0
    56c6:	4c19      	ldr	r4, [pc, #100]	; (572c <_sercom_get_async_baud_val+0x8c>)
    56c8:	47a0      	blx	r4
    56ca:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    56cc:	003a      	movs	r2, r7
    56ce:	2300      	movs	r3, #0
    56d0:	2000      	movs	r0, #0
    56d2:	4c17      	ldr	r4, [pc, #92]	; (5730 <_sercom_get_async_baud_val+0x90>)
    56d4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    56d6:	2200      	movs	r2, #0
    56d8:	2301      	movs	r3, #1
    56da:	1a12      	subs	r2, r2, r0
    56dc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    56de:	0c12      	lsrs	r2, r2, #16
    56e0:	041b      	lsls	r3, r3, #16
    56e2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    56e4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    56e6:	2200      	movs	r2, #0
    56e8:	e7e5      	b.n	56b6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    56ea:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    56ec:	2b01      	cmp	r3, #1
    56ee:	d1f9      	bne.n	56e4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    56f0:	000a      	movs	r2, r1
    56f2:	2300      	movs	r3, #0
    56f4:	2100      	movs	r1, #0
    56f6:	4c0d      	ldr	r4, [pc, #52]	; (572c <_sercom_get_async_baud_val+0x8c>)
    56f8:	47a0      	blx	r4
    56fa:	0002      	movs	r2, r0
    56fc:	000b      	movs	r3, r1
    56fe:	9200      	str	r2, [sp, #0]
    5700:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5702:	0038      	movs	r0, r7
    5704:	2100      	movs	r1, #0
    5706:	4c0a      	ldr	r4, [pc, #40]	; (5730 <_sercom_get_async_baud_val+0x90>)
    5708:	47a0      	blx	r4
    570a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    570c:	2380      	movs	r3, #128	; 0x80
    570e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5710:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5712:	4298      	cmp	r0, r3
    5714:	d8cf      	bhi.n	56b6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5716:	0f79      	lsrs	r1, r7, #29
    5718:	00f8      	lsls	r0, r7, #3
    571a:	9a00      	ldr	r2, [sp, #0]
    571c:	9b01      	ldr	r3, [sp, #4]
    571e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5720:	00ea      	lsls	r2, r5, #3
    5722:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5724:	b2d2      	uxtb	r2, r2
    5726:	0352      	lsls	r2, r2, #13
    5728:	432a      	orrs	r2, r5
    572a:	e7db      	b.n	56e4 <_sercom_get_async_baud_val+0x44>
    572c:	0000743d 	.word	0x0000743d
    5730:	000055bd 	.word	0x000055bd

00005734 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5734:	b510      	push	{r4, lr}
    5736:	b082      	sub	sp, #8
    5738:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    573a:	4b0e      	ldr	r3, [pc, #56]	; (5774 <sercom_set_gclk_generator+0x40>)
    573c:	781b      	ldrb	r3, [r3, #0]
    573e:	2b00      	cmp	r3, #0
    5740:	d007      	beq.n	5752 <sercom_set_gclk_generator+0x1e>
    5742:	2900      	cmp	r1, #0
    5744:	d105      	bne.n	5752 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5746:	4b0b      	ldr	r3, [pc, #44]	; (5774 <sercom_set_gclk_generator+0x40>)
    5748:	785b      	ldrb	r3, [r3, #1]
    574a:	4283      	cmp	r3, r0
    574c:	d010      	beq.n	5770 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    574e:	201d      	movs	r0, #29
    5750:	e00c      	b.n	576c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5752:	a901      	add	r1, sp, #4
    5754:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5756:	2013      	movs	r0, #19
    5758:	4b07      	ldr	r3, [pc, #28]	; (5778 <sercom_set_gclk_generator+0x44>)
    575a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    575c:	2013      	movs	r0, #19
    575e:	4b07      	ldr	r3, [pc, #28]	; (577c <sercom_set_gclk_generator+0x48>)
    5760:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5762:	4b04      	ldr	r3, [pc, #16]	; (5774 <sercom_set_gclk_generator+0x40>)
    5764:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5766:	2201      	movs	r2, #1
    5768:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    576a:	2000      	movs	r0, #0
}
    576c:	b002      	add	sp, #8
    576e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5770:	2000      	movs	r0, #0
    5772:	e7fb      	b.n	576c <sercom_set_gclk_generator+0x38>
    5774:	2000037c 	.word	0x2000037c
    5778:	00006e19 	.word	0x00006e19
    577c:	00006d8d 	.word	0x00006d8d

00005780 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5780:	4b40      	ldr	r3, [pc, #256]	; (5884 <_sercom_get_default_pad+0x104>)
    5782:	4298      	cmp	r0, r3
    5784:	d031      	beq.n	57ea <_sercom_get_default_pad+0x6a>
    5786:	d90a      	bls.n	579e <_sercom_get_default_pad+0x1e>
    5788:	4b3f      	ldr	r3, [pc, #252]	; (5888 <_sercom_get_default_pad+0x108>)
    578a:	4298      	cmp	r0, r3
    578c:	d04d      	beq.n	582a <_sercom_get_default_pad+0xaa>
    578e:	4b3f      	ldr	r3, [pc, #252]	; (588c <_sercom_get_default_pad+0x10c>)
    5790:	4298      	cmp	r0, r3
    5792:	d05a      	beq.n	584a <_sercom_get_default_pad+0xca>
    5794:	4b3e      	ldr	r3, [pc, #248]	; (5890 <_sercom_get_default_pad+0x110>)
    5796:	4298      	cmp	r0, r3
    5798:	d037      	beq.n	580a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    579a:	2000      	movs	r0, #0
}
    579c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    579e:	4b3d      	ldr	r3, [pc, #244]	; (5894 <_sercom_get_default_pad+0x114>)
    57a0:	4298      	cmp	r0, r3
    57a2:	d00c      	beq.n	57be <_sercom_get_default_pad+0x3e>
    57a4:	4b3c      	ldr	r3, [pc, #240]	; (5898 <_sercom_get_default_pad+0x118>)
    57a6:	4298      	cmp	r0, r3
    57a8:	d1f7      	bne.n	579a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    57aa:	2901      	cmp	r1, #1
    57ac:	d017      	beq.n	57de <_sercom_get_default_pad+0x5e>
    57ae:	2900      	cmp	r1, #0
    57b0:	d05d      	beq.n	586e <_sercom_get_default_pad+0xee>
    57b2:	2902      	cmp	r1, #2
    57b4:	d015      	beq.n	57e2 <_sercom_get_default_pad+0x62>
    57b6:	2903      	cmp	r1, #3
    57b8:	d015      	beq.n	57e6 <_sercom_get_default_pad+0x66>
	return 0;
    57ba:	2000      	movs	r0, #0
    57bc:	e7ee      	b.n	579c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    57be:	2901      	cmp	r1, #1
    57c0:	d007      	beq.n	57d2 <_sercom_get_default_pad+0x52>
    57c2:	2900      	cmp	r1, #0
    57c4:	d051      	beq.n	586a <_sercom_get_default_pad+0xea>
    57c6:	2902      	cmp	r1, #2
    57c8:	d005      	beq.n	57d6 <_sercom_get_default_pad+0x56>
    57ca:	2903      	cmp	r1, #3
    57cc:	d005      	beq.n	57da <_sercom_get_default_pad+0x5a>
	return 0;
    57ce:	2000      	movs	r0, #0
    57d0:	e7e4      	b.n	579c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    57d2:	4832      	ldr	r0, [pc, #200]	; (589c <_sercom_get_default_pad+0x11c>)
    57d4:	e7e2      	b.n	579c <_sercom_get_default_pad+0x1c>
    57d6:	4832      	ldr	r0, [pc, #200]	; (58a0 <_sercom_get_default_pad+0x120>)
    57d8:	e7e0      	b.n	579c <_sercom_get_default_pad+0x1c>
    57da:	4832      	ldr	r0, [pc, #200]	; (58a4 <_sercom_get_default_pad+0x124>)
    57dc:	e7de      	b.n	579c <_sercom_get_default_pad+0x1c>
    57de:	4832      	ldr	r0, [pc, #200]	; (58a8 <_sercom_get_default_pad+0x128>)
    57e0:	e7dc      	b.n	579c <_sercom_get_default_pad+0x1c>
    57e2:	4832      	ldr	r0, [pc, #200]	; (58ac <_sercom_get_default_pad+0x12c>)
    57e4:	e7da      	b.n	579c <_sercom_get_default_pad+0x1c>
    57e6:	4832      	ldr	r0, [pc, #200]	; (58b0 <_sercom_get_default_pad+0x130>)
    57e8:	e7d8      	b.n	579c <_sercom_get_default_pad+0x1c>
    57ea:	2901      	cmp	r1, #1
    57ec:	d007      	beq.n	57fe <_sercom_get_default_pad+0x7e>
    57ee:	2900      	cmp	r1, #0
    57f0:	d03f      	beq.n	5872 <_sercom_get_default_pad+0xf2>
    57f2:	2902      	cmp	r1, #2
    57f4:	d005      	beq.n	5802 <_sercom_get_default_pad+0x82>
    57f6:	2903      	cmp	r1, #3
    57f8:	d005      	beq.n	5806 <_sercom_get_default_pad+0x86>
	return 0;
    57fa:	2000      	movs	r0, #0
    57fc:	e7ce      	b.n	579c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    57fe:	482d      	ldr	r0, [pc, #180]	; (58b4 <_sercom_get_default_pad+0x134>)
    5800:	e7cc      	b.n	579c <_sercom_get_default_pad+0x1c>
    5802:	482d      	ldr	r0, [pc, #180]	; (58b8 <_sercom_get_default_pad+0x138>)
    5804:	e7ca      	b.n	579c <_sercom_get_default_pad+0x1c>
    5806:	482d      	ldr	r0, [pc, #180]	; (58bc <_sercom_get_default_pad+0x13c>)
    5808:	e7c8      	b.n	579c <_sercom_get_default_pad+0x1c>
    580a:	2901      	cmp	r1, #1
    580c:	d007      	beq.n	581e <_sercom_get_default_pad+0x9e>
    580e:	2900      	cmp	r1, #0
    5810:	d031      	beq.n	5876 <_sercom_get_default_pad+0xf6>
    5812:	2902      	cmp	r1, #2
    5814:	d005      	beq.n	5822 <_sercom_get_default_pad+0xa2>
    5816:	2903      	cmp	r1, #3
    5818:	d005      	beq.n	5826 <_sercom_get_default_pad+0xa6>
	return 0;
    581a:	2000      	movs	r0, #0
    581c:	e7be      	b.n	579c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    581e:	4828      	ldr	r0, [pc, #160]	; (58c0 <_sercom_get_default_pad+0x140>)
    5820:	e7bc      	b.n	579c <_sercom_get_default_pad+0x1c>
    5822:	4828      	ldr	r0, [pc, #160]	; (58c4 <_sercom_get_default_pad+0x144>)
    5824:	e7ba      	b.n	579c <_sercom_get_default_pad+0x1c>
    5826:	4828      	ldr	r0, [pc, #160]	; (58c8 <_sercom_get_default_pad+0x148>)
    5828:	e7b8      	b.n	579c <_sercom_get_default_pad+0x1c>
    582a:	2901      	cmp	r1, #1
    582c:	d007      	beq.n	583e <_sercom_get_default_pad+0xbe>
    582e:	2900      	cmp	r1, #0
    5830:	d023      	beq.n	587a <_sercom_get_default_pad+0xfa>
    5832:	2902      	cmp	r1, #2
    5834:	d005      	beq.n	5842 <_sercom_get_default_pad+0xc2>
    5836:	2903      	cmp	r1, #3
    5838:	d005      	beq.n	5846 <_sercom_get_default_pad+0xc6>
	return 0;
    583a:	2000      	movs	r0, #0
    583c:	e7ae      	b.n	579c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    583e:	4823      	ldr	r0, [pc, #140]	; (58cc <_sercom_get_default_pad+0x14c>)
    5840:	e7ac      	b.n	579c <_sercom_get_default_pad+0x1c>
    5842:	4823      	ldr	r0, [pc, #140]	; (58d0 <_sercom_get_default_pad+0x150>)
    5844:	e7aa      	b.n	579c <_sercom_get_default_pad+0x1c>
    5846:	4823      	ldr	r0, [pc, #140]	; (58d4 <_sercom_get_default_pad+0x154>)
    5848:	e7a8      	b.n	579c <_sercom_get_default_pad+0x1c>
    584a:	2901      	cmp	r1, #1
    584c:	d007      	beq.n	585e <_sercom_get_default_pad+0xde>
    584e:	2900      	cmp	r1, #0
    5850:	d015      	beq.n	587e <_sercom_get_default_pad+0xfe>
    5852:	2902      	cmp	r1, #2
    5854:	d005      	beq.n	5862 <_sercom_get_default_pad+0xe2>
    5856:	2903      	cmp	r1, #3
    5858:	d005      	beq.n	5866 <_sercom_get_default_pad+0xe6>
	return 0;
    585a:	2000      	movs	r0, #0
    585c:	e79e      	b.n	579c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    585e:	481e      	ldr	r0, [pc, #120]	; (58d8 <_sercom_get_default_pad+0x158>)
    5860:	e79c      	b.n	579c <_sercom_get_default_pad+0x1c>
    5862:	481e      	ldr	r0, [pc, #120]	; (58dc <_sercom_get_default_pad+0x15c>)
    5864:	e79a      	b.n	579c <_sercom_get_default_pad+0x1c>
    5866:	481e      	ldr	r0, [pc, #120]	; (58e0 <_sercom_get_default_pad+0x160>)
    5868:	e798      	b.n	579c <_sercom_get_default_pad+0x1c>
    586a:	481e      	ldr	r0, [pc, #120]	; (58e4 <_sercom_get_default_pad+0x164>)
    586c:	e796      	b.n	579c <_sercom_get_default_pad+0x1c>
    586e:	2003      	movs	r0, #3
    5870:	e794      	b.n	579c <_sercom_get_default_pad+0x1c>
    5872:	481d      	ldr	r0, [pc, #116]	; (58e8 <_sercom_get_default_pad+0x168>)
    5874:	e792      	b.n	579c <_sercom_get_default_pad+0x1c>
    5876:	481d      	ldr	r0, [pc, #116]	; (58ec <_sercom_get_default_pad+0x16c>)
    5878:	e790      	b.n	579c <_sercom_get_default_pad+0x1c>
    587a:	481d      	ldr	r0, [pc, #116]	; (58f0 <_sercom_get_default_pad+0x170>)
    587c:	e78e      	b.n	579c <_sercom_get_default_pad+0x1c>
    587e:	481d      	ldr	r0, [pc, #116]	; (58f4 <_sercom_get_default_pad+0x174>)
    5880:	e78c      	b.n	579c <_sercom_get_default_pad+0x1c>
    5882:	46c0      	nop			; (mov r8, r8)
    5884:	42001000 	.word	0x42001000
    5888:	42001800 	.word	0x42001800
    588c:	42001c00 	.word	0x42001c00
    5890:	42001400 	.word	0x42001400
    5894:	42000800 	.word	0x42000800
    5898:	42000c00 	.word	0x42000c00
    589c:	00050003 	.word	0x00050003
    58a0:	00060003 	.word	0x00060003
    58a4:	00070003 	.word	0x00070003
    58a8:	00010003 	.word	0x00010003
    58ac:	001e0003 	.word	0x001e0003
    58b0:	001f0003 	.word	0x001f0003
    58b4:	00090003 	.word	0x00090003
    58b8:	000a0003 	.word	0x000a0003
    58bc:	000b0003 	.word	0x000b0003
    58c0:	00110003 	.word	0x00110003
    58c4:	00120003 	.word	0x00120003
    58c8:	00130003 	.word	0x00130003
    58cc:	000d0003 	.word	0x000d0003
    58d0:	000e0003 	.word	0x000e0003
    58d4:	000f0003 	.word	0x000f0003
    58d8:	00170003 	.word	0x00170003
    58dc:	00180003 	.word	0x00180003
    58e0:	00190003 	.word	0x00190003
    58e4:	00040003 	.word	0x00040003
    58e8:	00080003 	.word	0x00080003
    58ec:	00100003 	.word	0x00100003
    58f0:	000c0003 	.word	0x000c0003
    58f4:	00160003 	.word	0x00160003

000058f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    58f8:	b530      	push	{r4, r5, lr}
    58fa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    58fc:	4b0b      	ldr	r3, [pc, #44]	; (592c <_sercom_get_sercom_inst_index+0x34>)
    58fe:	466a      	mov	r2, sp
    5900:	cb32      	ldmia	r3!, {r1, r4, r5}
    5902:	c232      	stmia	r2!, {r1, r4, r5}
    5904:	cb32      	ldmia	r3!, {r1, r4, r5}
    5906:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5908:	9b00      	ldr	r3, [sp, #0]
    590a:	4283      	cmp	r3, r0
    590c:	d00b      	beq.n	5926 <_sercom_get_sercom_inst_index+0x2e>
    590e:	2301      	movs	r3, #1
    5910:	009a      	lsls	r2, r3, #2
    5912:	4669      	mov	r1, sp
    5914:	5852      	ldr	r2, [r2, r1]
    5916:	4282      	cmp	r2, r0
    5918:	d006      	beq.n	5928 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    591a:	3301      	adds	r3, #1
    591c:	2b06      	cmp	r3, #6
    591e:	d1f7      	bne.n	5910 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5920:	2000      	movs	r0, #0
}
    5922:	b007      	add	sp, #28
    5924:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5926:	2300      	movs	r3, #0
			return i;
    5928:	b2d8      	uxtb	r0, r3
    592a:	e7fa      	b.n	5922 <_sercom_get_sercom_inst_index+0x2a>
    592c:	00008d74 	.word	0x00008d74

00005930 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    5930:	b570      	push	{r4, r5, r6, lr}
    5932:	b082      	sub	sp, #8
    5934:	0006      	movs	r6, r0
    5936:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5938:	2200      	movs	r2, #0
    593a:	466b      	mov	r3, sp
    593c:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    593e:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    5940:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    5942:	2b00      	cmp	r3, #0
    5944:	d1fc      	bne.n	5940 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    5946:	338f      	adds	r3, #143	; 0x8f
    5948:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    594a:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    594c:	6823      	ldr	r3, [r4, #0]
    594e:	2202      	movs	r2, #2
    5950:	4393      	bics	r3, r2
    5952:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5954:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5956:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    5958:	2b00      	cmp	r3, #0
    595a:	d1fc      	bne.n	5956 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    595c:	4b12      	ldr	r3, [pc, #72]	; (59a8 <spi_set_baudrate+0x78>)
    595e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5960:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5962:	b2c0      	uxtb	r0, r0
    5964:	4b11      	ldr	r3, [pc, #68]	; (59ac <spi_set_baudrate+0x7c>)
    5966:	4798      	blx	r3
    5968:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    596a:	466b      	mov	r3, sp
    596c:	1d9a      	adds	r2, r3, #6
    596e:	0028      	movs	r0, r5
    5970:	4b0f      	ldr	r3, [pc, #60]	; (59b0 <spi_set_baudrate+0x80>)
    5972:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    5974:	2800      	cmp	r0, #0
    5976:	d002      	beq.n	597e <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    5978:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    597a:	b002      	add	sp, #8
    597c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    597e:	466b      	mov	r3, sp
    5980:	3306      	adds	r3, #6
    5982:	781b      	ldrb	r3, [r3, #0]
    5984:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5986:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5988:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    598a:	2a00      	cmp	r2, #0
    598c:	d1fc      	bne.n	5988 <spi_set_baudrate+0x58>
    598e:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    5990:	2a00      	cmp	r2, #0
    5992:	d1fc      	bne.n	598e <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5994:	681a      	ldr	r2, [r3, #0]
    5996:	2102      	movs	r1, #2
    5998:	430a      	orrs	r2, r1
    599a:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    599c:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    599e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    59a0:	2b00      	cmp	r3, #0
    59a2:	d1fc      	bne.n	599e <spi_set_baudrate+0x6e>
    59a4:	e7e9      	b.n	597a <spi_set_baudrate+0x4a>
    59a6:	46c0      	nop			; (mov r8, r8)
    59a8:	000058f9 	.word	0x000058f9
    59ac:	00006e35 	.word	0x00006e35
    59b0:	00005677 	.word	0x00005677

000059b4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    59b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59b6:	46d6      	mov	lr, sl
    59b8:	464f      	mov	r7, r9
    59ba:	b580      	push	{r7, lr}
    59bc:	b08b      	sub	sp, #44	; 0x2c
    59be:	4681      	mov	r9, r0
    59c0:	000f      	movs	r7, r1
    59c2:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    59c4:	0003      	movs	r3, r0
    59c6:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    59c8:	680b      	ldr	r3, [r1, #0]
    59ca:	079b      	lsls	r3, r3, #30
    59cc:	d409      	bmi.n	59e2 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    59ce:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    59d0:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    59d2:	07db      	lsls	r3, r3, #31
    59d4:	d400      	bmi.n	59d8 <spi_init+0x24>
    59d6:	e0b1      	b.n	5b3c <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    59d8:	b00b      	add	sp, #44	; 0x2c
    59da:	bc0c      	pop	{r2, r3}
    59dc:	4691      	mov	r9, r2
    59de:	469a      	mov	sl, r3
    59e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    59e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    59e4:	9305      	str	r3, [sp, #20]
    59e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    59e8:	9306      	str	r3, [sp, #24]
    59ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
    59ec:	9307      	str	r3, [sp, #28]
    59ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
    59f0:	9308      	str	r3, [sp, #32]
    59f2:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    59f4:	ab05      	add	r3, sp, #20
    59f6:	9301      	str	r3, [sp, #4]
    59f8:	e00a      	b.n	5a10 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    59fa:	0038      	movs	r0, r7
    59fc:	4baf      	ldr	r3, [pc, #700]	; (5cbc <spi_init+0x308>)
    59fe:	4798      	blx	r3
    5a00:	e00c      	b.n	5a1c <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    5a02:	230f      	movs	r3, #15
    5a04:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    5a06:	4281      	cmp	r1, r0
    5a08:	d12d      	bne.n	5a66 <spi_init+0xb2>
    5a0a:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5a0c:	2e04      	cmp	r6, #4
    5a0e:	d02f      	beq.n	5a70 <spi_init+0xbc>
    5a10:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5a12:	00b3      	lsls	r3, r6, #2
    5a14:	9a01      	ldr	r2, [sp, #4]
    5a16:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    5a18:	2800      	cmp	r0, #0
    5a1a:	d0ee      	beq.n	59fa <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    5a1c:	1c43      	adds	r3, r0, #1
    5a1e:	d0f4      	beq.n	5a0a <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    5a20:	0401      	lsls	r1, r0, #16
    5a22:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    5a24:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    5a26:	b2c3      	uxtb	r3, r0
    5a28:	469c      	mov	ip, r3
		return NULL;
    5a2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a2c:	0602      	lsls	r2, r0, #24
    5a2e:	d405      	bmi.n	5a3c <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    5a30:	4663      	mov	r3, ip
    5a32:	095b      	lsrs	r3, r3, #5
    5a34:	01db      	lsls	r3, r3, #7
    5a36:	4aa2      	ldr	r2, [pc, #648]	; (5cc0 <spi_init+0x30c>)
    5a38:	4692      	mov	sl, r2
    5a3a:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    5a3c:	221f      	movs	r2, #31
    5a3e:	4660      	mov	r0, ip
    5a40:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5a42:	1898      	adds	r0, r3, r2
    5a44:	3040      	adds	r0, #64	; 0x40
    5a46:	7800      	ldrb	r0, [r0, #0]
    5a48:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5a4a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5a4c:	4655      	mov	r5, sl
    5a4e:	07ed      	lsls	r5, r5, #31
    5a50:	d5d9      	bpl.n	5a06 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    5a52:	0852      	lsrs	r2, r2, #1
    5a54:	189b      	adds	r3, r3, r2
    5a56:	3330      	adds	r3, #48	; 0x30
    5a58:	7818      	ldrb	r0, [r3, #0]
    5a5a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5a5c:	4663      	mov	r3, ip
    5a5e:	07db      	lsls	r3, r3, #31
    5a60:	d5cf      	bpl.n	5a02 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    5a62:	0900      	lsrs	r0, r0, #4
    5a64:	e7cf      	b.n	5a06 <spi_init+0x52>
			module->hw = NULL;
    5a66:	2300      	movs	r3, #0
    5a68:	464a      	mov	r2, r9
    5a6a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    5a6c:	201c      	movs	r0, #28
    5a6e:	e7b3      	b.n	59d8 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    5a70:	2013      	movs	r0, #19
    5a72:	4b94      	ldr	r3, [pc, #592]	; (5cc4 <spi_init+0x310>)
    5a74:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5a76:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5a78:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5a7a:	2a01      	cmp	r2, #1
    5a7c:	d016      	beq.n	5aac <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    5a7e:	7821      	ldrb	r1, [r4, #0]
    5a80:	2900      	cmp	r1, #0
    5a82:	d127      	bne.n	5ad4 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    5a84:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5a86:	7fe2      	ldrb	r2, [r4, #31]
    5a88:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5a8a:	7fa0      	ldrb	r0, [r4, #30]
    5a8c:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    5a8e:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    5a90:	429a      	cmp	r2, r3
    5a92:	d1a1      	bne.n	59d8 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5a94:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5a96:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5a98:	3004      	adds	r0, #4
    5a9a:	5c20      	ldrb	r0, [r4, r0]
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d001      	beq.n	5aa4 <spi_init+0xf0>
    5aa0:	2040      	movs	r0, #64	; 0x40
    5aa2:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5aa4:	2008      	movs	r0, #8
    5aa6:	4303      	orrs	r3, r0
    5aa8:	431d      	orrs	r5, r3
    5aaa:	e014      	b.n	5ad6 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5aac:	aa04      	add	r2, sp, #16
    5aae:	0001      	movs	r1, r0
    5ab0:	69a0      	ldr	r0, [r4, #24]
    5ab2:	4b85      	ldr	r3, [pc, #532]	; (5cc8 <spi_init+0x314>)
    5ab4:	4798      	blx	r3
    5ab6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5ab8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5aba:	2b00      	cmp	r3, #0
    5abc:	d000      	beq.n	5ac0 <spi_init+0x10c>
    5abe:	e78b      	b.n	59d8 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5ac0:	7b3b      	ldrb	r3, [r7, #12]
    5ac2:	b2db      	uxtb	r3, r3
    5ac4:	aa04      	add	r2, sp, #16
    5ac6:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5ac8:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5aca:	429a      	cmp	r2, r3
    5acc:	d000      	beq.n	5ad0 <spi_init+0x11c>
    5ace:	e783      	b.n	59d8 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    5ad0:	350c      	adds	r5, #12
    5ad2:	e7d4      	b.n	5a7e <spi_init+0xca>
	uint32_t ctrlb = 0;
    5ad4:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    5ad6:	6863      	ldr	r3, [r4, #4]
    5ad8:	68a0      	ldr	r0, [r4, #8]
    5ada:	4303      	orrs	r3, r0
    5adc:	68e0      	ldr	r0, [r4, #12]
    5ade:	4303      	orrs	r3, r0
    5ae0:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    5ae2:	7c20      	ldrb	r0, [r4, #16]
    5ae4:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    5ae6:	7c60      	ldrb	r0, [r4, #17]
    5ae8:	2800      	cmp	r0, #0
    5aea:	d001      	beq.n	5af0 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5aec:	2080      	movs	r0, #128	; 0x80
    5aee:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    5af0:	7ca0      	ldrb	r0, [r4, #18]
    5af2:	2800      	cmp	r0, #0
    5af4:	d002      	beq.n	5afc <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5af6:	2080      	movs	r0, #128	; 0x80
    5af8:	0280      	lsls	r0, r0, #10
    5afa:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    5afc:	7ce0      	ldrb	r0, [r4, #19]
    5afe:	2800      	cmp	r0, #0
    5b00:	d002      	beq.n	5b08 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5b02:	2080      	movs	r0, #128	; 0x80
    5b04:	0080      	lsls	r0, r0, #2
    5b06:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    5b08:	7d20      	ldrb	r0, [r4, #20]
    5b0a:	2800      	cmp	r0, #0
    5b0c:	d002      	beq.n	5b14 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5b0e:	2080      	movs	r0, #128	; 0x80
    5b10:	0180      	lsls	r0, r0, #6
    5b12:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    5b14:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    5b16:	2502      	movs	r5, #2
    5b18:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    5b1a:	4283      	cmp	r3, r0
    5b1c:	d004      	beq.n	5b28 <spi_init+0x174>
	module->hw = NULL;
    5b1e:	2300      	movs	r3, #0
    5b20:	464a      	mov	r2, r9
    5b22:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    5b24:	201c      	movs	r0, #28
    5b26:	e757      	b.n	59d8 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    5b28:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    5b2a:	4293      	cmp	r3, r2
    5b2c:	d1f7      	bne.n	5b1e <spi_init+0x16a>
		module->mode           = config->mode;
    5b2e:	464b      	mov	r3, r9
    5b30:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    5b32:	7c23      	ldrb	r3, [r4, #16]
    5b34:	464a      	mov	r2, r9
    5b36:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    5b38:	2000      	movs	r0, #0
    5b3a:	e74d      	b.n	59d8 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5b3c:	0008      	movs	r0, r1
    5b3e:	4b63      	ldr	r3, [pc, #396]	; (5ccc <spi_init+0x318>)
    5b40:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    5b42:	4a63      	ldr	r2, [pc, #396]	; (5cd0 <spi_init+0x31c>)
    5b44:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5b46:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5b48:	2301      	movs	r3, #1
    5b4a:	40ab      	lsls	r3, r5
    5b4c:	430b      	orrs	r3, r1
    5b4e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5b50:	a909      	add	r1, sp, #36	; 0x24
    5b52:	2624      	movs	r6, #36	; 0x24
    5b54:	5da3      	ldrb	r3, [r4, r6]
    5b56:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5b58:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5b5a:	b2c5      	uxtb	r5, r0
    5b5c:	0028      	movs	r0, r5
    5b5e:	4b5d      	ldr	r3, [pc, #372]	; (5cd4 <spi_init+0x320>)
    5b60:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5b62:	0028      	movs	r0, r5
    5b64:	4b5c      	ldr	r3, [pc, #368]	; (5cd8 <spi_init+0x324>)
    5b66:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5b68:	5da0      	ldrb	r0, [r4, r6]
    5b6a:	2100      	movs	r1, #0
    5b6c:	4b5b      	ldr	r3, [pc, #364]	; (5cdc <spi_init+0x328>)
    5b6e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5b70:	7823      	ldrb	r3, [r4, #0]
    5b72:	2b01      	cmp	r3, #1
    5b74:	d020      	beq.n	5bb8 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    5b76:	7823      	ldrb	r3, [r4, #0]
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d103      	bne.n	5b84 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5b7c:	683b      	ldr	r3, [r7, #0]
    5b7e:	2208      	movs	r2, #8
    5b80:	4313      	orrs	r3, r2
    5b82:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b84:	464b      	mov	r3, r9
    5b86:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5b88:	ab04      	add	r3, sp, #16
    5b8a:	2280      	movs	r2, #128	; 0x80
    5b8c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5b8e:	2200      	movs	r2, #0
    5b90:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5b92:	2101      	movs	r1, #1
    5b94:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5b96:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5b98:	7823      	ldrb	r3, [r4, #0]
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d101      	bne.n	5ba2 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5b9e:	ab04      	add	r3, sp, #16
    5ba0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5ba4:	9305      	str	r3, [sp, #20]
    5ba6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5ba8:	9306      	str	r3, [sp, #24]
    5baa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5bac:	9307      	str	r3, [sp, #28]
    5bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5bb0:	9308      	str	r3, [sp, #32]
    5bb2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5bb4:	ad05      	add	r5, sp, #20
    5bb6:	e011      	b.n	5bdc <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5bb8:	683b      	ldr	r3, [r7, #0]
    5bba:	220c      	movs	r2, #12
    5bbc:	4313      	orrs	r3, r2
    5bbe:	603b      	str	r3, [r7, #0]
    5bc0:	e7d9      	b.n	5b76 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5bc2:	0030      	movs	r0, r6
    5bc4:	4b3d      	ldr	r3, [pc, #244]	; (5cbc <spi_init+0x308>)
    5bc6:	4798      	blx	r3
    5bc8:	e00d      	b.n	5be6 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5bca:	a904      	add	r1, sp, #16
    5bcc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5bce:	0c00      	lsrs	r0, r0, #16
    5bd0:	b2c0      	uxtb	r0, r0
    5bd2:	4b43      	ldr	r3, [pc, #268]	; (5ce0 <spi_init+0x32c>)
    5bd4:	4798      	blx	r3
    5bd6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5bd8:	2f04      	cmp	r7, #4
    5bda:	d007      	beq.n	5bec <spi_init+0x238>
    5bdc:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5bde:	00bb      	lsls	r3, r7, #2
    5be0:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    5be2:	2800      	cmp	r0, #0
    5be4:	d0ed      	beq.n	5bc2 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    5be6:	1c43      	adds	r3, r0, #1
    5be8:	d1ef      	bne.n	5bca <spi_init+0x216>
    5bea:	e7f4      	b.n	5bd6 <spi_init+0x222>
	module->mode             = config->mode;
    5bec:	7823      	ldrb	r3, [r4, #0]
    5bee:	464a      	mov	r2, r9
    5bf0:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    5bf2:	7c23      	ldrb	r3, [r4, #16]
    5bf4:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    5bf6:	7ca3      	ldrb	r3, [r4, #18]
    5bf8:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5bfa:	7d23      	ldrb	r3, [r4, #20]
    5bfc:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    5bfe:	2200      	movs	r2, #0
    5c00:	ab02      	add	r3, sp, #8
    5c02:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    5c04:	7823      	ldrb	r3, [r4, #0]
    5c06:	2b01      	cmp	r3, #1
    5c08:	d012      	beq.n	5c30 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    5c0a:	7823      	ldrb	r3, [r4, #0]
    5c0c:	2b00      	cmp	r3, #0
    5c0e:	d127      	bne.n	5c60 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    5c10:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    5c12:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    5c14:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5c16:	7fe1      	ldrb	r1, [r4, #31]
    5c18:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5c1a:	7fa5      	ldrb	r5, [r4, #30]
    5c1c:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5c1e:	4319      	orrs	r1, r3
    5c20:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    5c22:	2320      	movs	r3, #32
    5c24:	5ce3      	ldrb	r3, [r4, r3]
    5c26:	2b00      	cmp	r3, #0
    5c28:	d01c      	beq.n	5c64 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5c2a:	2340      	movs	r3, #64	; 0x40
    5c2c:	431a      	orrs	r2, r3
    5c2e:	e019      	b.n	5c64 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5c30:	464b      	mov	r3, r9
    5c32:	6818      	ldr	r0, [r3, #0]
    5c34:	4b25      	ldr	r3, [pc, #148]	; (5ccc <spi_init+0x318>)
    5c36:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5c38:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5c3a:	b2c0      	uxtb	r0, r0
    5c3c:	4b21      	ldr	r3, [pc, #132]	; (5cc4 <spi_init+0x310>)
    5c3e:	4798      	blx	r3
    5c40:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    5c42:	ab02      	add	r3, sp, #8
    5c44:	1d9a      	adds	r2, r3, #6
    5c46:	69a0      	ldr	r0, [r4, #24]
    5c48:	4b1f      	ldr	r3, [pc, #124]	; (5cc8 <spi_init+0x314>)
    5c4a:	4798      	blx	r3
    5c4c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5c4e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5c50:	2b00      	cmp	r3, #0
    5c52:	d000      	beq.n	5c56 <spi_init+0x2a2>
    5c54:	e6c0      	b.n	59d8 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5c56:	ab02      	add	r3, sp, #8
    5c58:	3306      	adds	r3, #6
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	7333      	strb	r3, [r6, #12]
    5c5e:	e7d4      	b.n	5c0a <spi_init+0x256>
	uint32_t ctrlb = 0;
    5c60:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    5c62:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5c64:	6863      	ldr	r3, [r4, #4]
    5c66:	68a1      	ldr	r1, [r4, #8]
    5c68:	430b      	orrs	r3, r1
    5c6a:	68e1      	ldr	r1, [r4, #12]
    5c6c:	430b      	orrs	r3, r1
    5c6e:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5c70:	7c21      	ldrb	r1, [r4, #16]
    5c72:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5c74:	7c61      	ldrb	r1, [r4, #17]
    5c76:	2900      	cmp	r1, #0
    5c78:	d103      	bne.n	5c82 <spi_init+0x2ce>
    5c7a:	491a      	ldr	r1, [pc, #104]	; (5ce4 <spi_init+0x330>)
    5c7c:	7889      	ldrb	r1, [r1, #2]
    5c7e:	0789      	lsls	r1, r1, #30
    5c80:	d501      	bpl.n	5c86 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    5c82:	2180      	movs	r1, #128	; 0x80
    5c84:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5c86:	7ca1      	ldrb	r1, [r4, #18]
    5c88:	2900      	cmp	r1, #0
    5c8a:	d002      	beq.n	5c92 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5c8c:	2180      	movs	r1, #128	; 0x80
    5c8e:	0289      	lsls	r1, r1, #10
    5c90:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    5c92:	7ce1      	ldrb	r1, [r4, #19]
    5c94:	2900      	cmp	r1, #0
    5c96:	d002      	beq.n	5c9e <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5c98:	2180      	movs	r1, #128	; 0x80
    5c9a:	0089      	lsls	r1, r1, #2
    5c9c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    5c9e:	7d21      	ldrb	r1, [r4, #20]
    5ca0:	2900      	cmp	r1, #0
    5ca2:	d002      	beq.n	5caa <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5ca4:	2180      	movs	r1, #128	; 0x80
    5ca6:	0189      	lsls	r1, r1, #6
    5ca8:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5caa:	6831      	ldr	r1, [r6, #0]
    5cac:	430b      	orrs	r3, r1
    5cae:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    5cb0:	6873      	ldr	r3, [r6, #4]
    5cb2:	431a      	orrs	r2, r3
    5cb4:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    5cb6:	2000      	movs	r0, #0
    5cb8:	e68e      	b.n	59d8 <spi_init+0x24>
    5cba:	46c0      	nop			; (mov r8, r8)
    5cbc:	00005781 	.word	0x00005781
    5cc0:	41004400 	.word	0x41004400
    5cc4:	00006e35 	.word	0x00006e35
    5cc8:	00005677 	.word	0x00005677
    5ccc:	000058f9 	.word	0x000058f9
    5cd0:	40000400 	.word	0x40000400
    5cd4:	00006e19 	.word	0x00006e19
    5cd8:	00006d8d 	.word	0x00006d8d
    5cdc:	00005735 	.word	0x00005735
    5ce0:	00006f11 	.word	0x00006f11
    5ce4:	41002000 	.word	0x41002000

00005ce8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cea:	46d6      	mov	lr, sl
    5cec:	464f      	mov	r7, r9
    5cee:	4646      	mov	r6, r8
    5cf0:	b5c0      	push	{r6, r7, lr}
    5cf2:	b082      	sub	sp, #8
    5cf4:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5cf6:	2717      	movs	r7, #23
	if (length == 0) {
    5cf8:	2a00      	cmp	r2, #0
    5cfa:	d073      	beq.n	5de4 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    5cfc:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    5cfe:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    5d00:	2900      	cmp	r1, #0
    5d02:	d06f      	beq.n	5de4 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5d04:	7941      	ldrb	r1, [r0, #5]
    5d06:	2900      	cmp	r1, #0
    5d08:	d103      	bne.n	5d12 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5d0a:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d0c:	7e0c      	ldrb	r4, [r1, #24]
    5d0e:	07a4      	lsls	r4, r4, #30
    5d10:	d40b      	bmi.n	5d2a <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    5d12:	3a01      	subs	r2, #1
    5d14:	b294      	uxth	r4, r2
    5d16:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    5d18:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    5d1a:	2102      	movs	r1, #2
    5d1c:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    5d1e:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5d20:	05db      	lsls	r3, r3, #23
    5d22:	0ddb      	lsrs	r3, r3, #23
    5d24:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    5d26:	46c4      	mov	ip, r8
    5d28:	e037      	b.n	5d9a <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5d2a:	2402      	movs	r4, #2
    5d2c:	760c      	strb	r4, [r1, #24]
    5d2e:	e7f0      	b.n	5d12 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d30:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5d32:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    5d34:	4233      	tst	r3, r6
    5d36:	d0fc      	beq.n	5d32 <spi_read_buffer_wait+0x4a>
    5d38:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    5d3a:	4233      	tst	r3, r6
    5d3c:	d009      	beq.n	5d52 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5d3e:	4653      	mov	r3, sl
    5d40:	628b      	str	r3, [r1, #40]	; 0x28
    5d42:	e02d      	b.n	5da0 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d44:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    5d46:	4649      	mov	r1, r9
    5d48:	420b      	tst	r3, r1
    5d4a:	d138      	bne.n	5dbe <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d4c:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    5d4e:	4213      	tst	r3, r2
    5d50:	d045      	beq.n	5dde <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d52:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5d54:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    5d56:	4213      	tst	r3, r2
    5d58:	d0fc      	beq.n	5d54 <spi_read_buffer_wait+0x6c>
    5d5a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5d5c:	4213      	tst	r3, r2
    5d5e:	d040      	beq.n	5de2 <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5d60:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    5d62:	2700      	movs	r7, #0
    5d64:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5d66:	4213      	tst	r3, r2
    5d68:	d002      	beq.n	5d70 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5d6a:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    5d6c:	231e      	movs	r3, #30
    5d6e:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d70:	7983      	ldrb	r3, [r0, #6]
    5d72:	2b01      	cmp	r3, #1
    5d74:	d027      	beq.n	5dc6 <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5d76:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5d78:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    5d7a:	9901      	ldr	r1, [sp, #4]
    5d7c:	2900      	cmp	r1, #0
    5d7e:	d138      	bne.n	5df2 <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    5d80:	1c6f      	adds	r7, r5, #1
    5d82:	b2bf      	uxth	r7, r7
    5d84:	4661      	mov	r1, ip
    5d86:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d88:	7981      	ldrb	r1, [r0, #6]
    5d8a:	2901      	cmp	r1, #1
    5d8c:	d01f      	beq.n	5dce <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    5d8e:	003d      	movs	r5, r7
	while (length--) {
    5d90:	3c01      	subs	r4, #1
    5d92:	b2a4      	uxth	r4, r4
    5d94:	4918      	ldr	r1, [pc, #96]	; (5df8 <spi_read_buffer_wait+0x110>)
    5d96:	428c      	cmp	r4, r1
    5d98:	d01f      	beq.n	5dda <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    5d9a:	7943      	ldrb	r3, [r0, #5]
    5d9c:	2b01      	cmp	r3, #1
    5d9e:	d0c7      	beq.n	5d30 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    5da0:	7943      	ldrb	r3, [r0, #5]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d1d5      	bne.n	5d52 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5da6:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5da8:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    5daa:	4213      	tst	r3, r2
    5dac:	d1ca      	bne.n	5d44 <spi_read_buffer_wait+0x5c>
    5dae:	4b13      	ldr	r3, [pc, #76]	; (5dfc <spi_read_buffer_wait+0x114>)
    5db0:	7e39      	ldrb	r1, [r7, #24]
    5db2:	4211      	tst	r1, r2
    5db4:	d1c6      	bne.n	5d44 <spi_read_buffer_wait+0x5c>
    5db6:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5db8:	2b00      	cmp	r3, #0
    5dba:	d1f9      	bne.n	5db0 <spi_read_buffer_wait+0xc8>
    5dbc:	e7c2      	b.n	5d44 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5dbe:	2302      	movs	r3, #2
    5dc0:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    5dc2:	2704      	movs	r7, #4
    5dc4:	e00e      	b.n	5de4 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5dc6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    5dc8:	05c9      	lsls	r1, r1, #23
    5dca:	0dcb      	lsrs	r3, r1, #23
    5dcc:	e7d5      	b.n	5d7a <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    5dce:	3502      	adds	r5, #2
    5dd0:	b2ad      	uxth	r5, r5
    5dd2:	0a19      	lsrs	r1, r3, #8
    5dd4:	4663      	mov	r3, ip
    5dd6:	55d9      	strb	r1, [r3, r7]
    5dd8:	e7da      	b.n	5d90 <spi_read_buffer_wait+0xa8>
    5dda:	9f01      	ldr	r7, [sp, #4]
    5ddc:	e002      	b.n	5de4 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    5dde:	2712      	movs	r7, #18
    5de0:	e000      	b.n	5de4 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    5de2:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    5de4:	0038      	movs	r0, r7
    5de6:	b002      	add	sp, #8
    5de8:	bc1c      	pop	{r2, r3, r4}
    5dea:	4690      	mov	r8, r2
    5dec:	4699      	mov	r9, r3
    5dee:	46a2      	mov	sl, r4
    5df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5df2:	9f01      	ldr	r7, [sp, #4]
    5df4:	e7f6      	b.n	5de4 <spi_read_buffer_wait+0xfc>
    5df6:	46c0      	nop			; (mov r8, r8)
    5df8:	0000ffff 	.word	0x0000ffff
    5dfc:	00002710 	.word	0x00002710

00005e00 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5e00:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5e02:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5e04:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5e06:	2c01      	cmp	r4, #1
    5e08:	d001      	beq.n	5e0e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5e0a:	0018      	movs	r0, r3
    5e0c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5e0e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5e10:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5e12:	2c00      	cmp	r4, #0
    5e14:	d1f9      	bne.n	5e0a <spi_select_slave+0xa>
		if (select) {
    5e16:	2a00      	cmp	r2, #0
    5e18:	d058      	beq.n	5ecc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5e1a:	784b      	ldrb	r3, [r1, #1]
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d044      	beq.n	5eaa <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5e20:	6803      	ldr	r3, [r0, #0]
    5e22:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    5e24:	07db      	lsls	r3, r3, #31
    5e26:	d410      	bmi.n	5e4a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5e28:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5e2a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5e2c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e2e:	2900      	cmp	r1, #0
    5e30:	d104      	bne.n	5e3c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5e32:	0953      	lsrs	r3, r2, #5
    5e34:	01db      	lsls	r3, r3, #7
    5e36:	492e      	ldr	r1, [pc, #184]	; (5ef0 <spi_select_slave+0xf0>)
    5e38:	468c      	mov	ip, r1
    5e3a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e3c:	211f      	movs	r1, #31
    5e3e:	4011      	ands	r1, r2
    5e40:	2201      	movs	r2, #1
    5e42:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5e44:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5e46:	2305      	movs	r3, #5
    5e48:	e7df      	b.n	5e0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5e4a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5e4c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5e4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e50:	2c00      	cmp	r4, #0
    5e52:	d104      	bne.n	5e5e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5e54:	0953      	lsrs	r3, r2, #5
    5e56:	01db      	lsls	r3, r3, #7
    5e58:	4c25      	ldr	r4, [pc, #148]	; (5ef0 <spi_select_slave+0xf0>)
    5e5a:	46a4      	mov	ip, r4
    5e5c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e5e:	241f      	movs	r4, #31
    5e60:	4014      	ands	r4, r2
    5e62:	2201      	movs	r2, #1
    5e64:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5e66:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5e68:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5e6a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5e6c:	07d2      	lsls	r2, r2, #31
    5e6e:	d501      	bpl.n	5e74 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5e70:	788a      	ldrb	r2, [r1, #2]
    5e72:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5e74:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5e76:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5e78:	2a00      	cmp	r2, #0
    5e7a:	d1c6      	bne.n	5e0a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5e7c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5e7e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5e80:	7e13      	ldrb	r3, [r2, #24]
    5e82:	420b      	tst	r3, r1
    5e84:	d0fc      	beq.n	5e80 <spi_select_slave+0x80>
    5e86:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5e88:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    5e8a:	0749      	lsls	r1, r1, #29
    5e8c:	d5bd      	bpl.n	5e0a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5e8e:	8b53      	ldrh	r3, [r2, #26]
    5e90:	075b      	lsls	r3, r3, #29
    5e92:	d501      	bpl.n	5e98 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5e94:	2304      	movs	r3, #4
    5e96:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5e98:	7983      	ldrb	r3, [r0, #6]
    5e9a:	2b01      	cmp	r3, #1
    5e9c:	d002      	beq.n	5ea4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5e9e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ea0:	2300      	movs	r3, #0
    5ea2:	e7b2      	b.n	5e0a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5ea4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ea6:	2300      	movs	r3, #0
    5ea8:	e7af      	b.n	5e0a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5eaa:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5eac:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5eae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5eb0:	2900      	cmp	r1, #0
    5eb2:	d104      	bne.n	5ebe <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5eb4:	0953      	lsrs	r3, r2, #5
    5eb6:	01db      	lsls	r3, r3, #7
    5eb8:	490d      	ldr	r1, [pc, #52]	; (5ef0 <spi_select_slave+0xf0>)
    5eba:	468c      	mov	ip, r1
    5ebc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ebe:	211f      	movs	r1, #31
    5ec0:	4011      	ands	r1, r2
    5ec2:	2201      	movs	r2, #1
    5ec4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5ec6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5ec8:	2300      	movs	r3, #0
    5eca:	e79e      	b.n	5e0a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5ecc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5ece:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5ed0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ed2:	2900      	cmp	r1, #0
    5ed4:	d104      	bne.n	5ee0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5ed6:	0953      	lsrs	r3, r2, #5
    5ed8:	01db      	lsls	r3, r3, #7
    5eda:	4905      	ldr	r1, [pc, #20]	; (5ef0 <spi_select_slave+0xf0>)
    5edc:	468c      	mov	ip, r1
    5ede:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ee0:	211f      	movs	r1, #31
    5ee2:	4011      	ands	r1, r2
    5ee4:	2201      	movs	r2, #1
    5ee6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ee8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5eea:	2300      	movs	r3, #0
    5eec:	e78d      	b.n	5e0a <spi_select_slave+0xa>
    5eee:	46c0      	nop			; (mov r8, r8)
    5ef0:	41004400 	.word	0x41004400

00005ef4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef6:	46de      	mov	lr, fp
    5ef8:	4657      	mov	r7, sl
    5efa:	464e      	mov	r6, r9
    5efc:	4645      	mov	r5, r8
    5efe:	b5e0      	push	{r5, r6, r7, lr}
    5f00:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5f02:	2317      	movs	r3, #23
	if (length == 0) {
    5f04:	2a00      	cmp	r2, #0
    5f06:	d107      	bne.n	5f18 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5f08:	0018      	movs	r0, r3
    5f0a:	b003      	add	sp, #12
    5f0c:	bc3c      	pop	{r2, r3, r4, r5}
    5f0e:	4690      	mov	r8, r2
    5f10:	4699      	mov	r9, r3
    5f12:	46a2      	mov	sl, r4
    5f14:	46ab      	mov	fp, r5
    5f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5f18:	7943      	ldrb	r3, [r0, #5]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d103      	bne.n	5f26 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f1e:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5f20:	7e1c      	ldrb	r4, [r3, #24]
    5f22:	07a4      	lsls	r4, r4, #30
    5f24:	d40a      	bmi.n	5f3c <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    5f26:	4693      	mov	fp, r2
    5f28:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    5f2a:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5f2c:	2502      	movs	r5, #2
    5f2e:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5f30:	3502      	adds	r5, #2
    5f32:	46a8      	mov	r8, r5
    5f34:	3a01      	subs	r2, #1
    5f36:	b292      	uxth	r2, r2
    5f38:	468a      	mov	sl, r1
    5f3a:	e023      	b.n	5f84 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5f3c:	2402      	movs	r4, #2
    5f3e:	761c      	strb	r4, [r3, #24]
    5f40:	e7f1      	b.n	5f26 <spi_write_buffer_wait+0x32>
    5f42:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5f44:	4661      	mov	r1, ip
    5f46:	420d      	tst	r5, r1
    5f48:	d12e      	bne.n	5fa8 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5f4a:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5f4c:	421d      	tst	r5, r3
    5f4e:	d100      	bne.n	5f52 <spi_write_buffer_wait+0x5e>
    5f50:	e0c2      	b.n	60d8 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f52:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5f54:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    5f56:	421d      	tst	r5, r3
    5f58:	d0fc      	beq.n	5f54 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5f5a:	1c67      	adds	r7, r4, #1
    5f5c:	b2bf      	uxth	r7, r7
    5f5e:	4651      	mov	r1, sl
    5f60:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5f62:	7981      	ldrb	r1, [r0, #6]
    5f64:	2901      	cmp	r1, #1
    5f66:	d023      	beq.n	5fb0 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5f68:	b2ad      	uxth	r5, r5
    5f6a:	003c      	movs	r4, r7
    5f6c:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5f6e:	421f      	tst	r7, r3
    5f70:	d002      	beq.n	5f78 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5f72:	05ed      	lsls	r5, r5, #23
    5f74:	0ded      	lsrs	r5, r5, #23
    5f76:	62b5      	str	r5, [r6, #40]	; 0x28
    5f78:	1e55      	subs	r5, r2, #1
    5f7a:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5f7c:	79c6      	ldrb	r6, [r0, #7]
    5f7e:	2e00      	cmp	r6, #0
    5f80:	d11d      	bne.n	5fbe <spi_write_buffer_wait+0xca>
    5f82:	002a      	movs	r2, r5
	while (length--) {
    5f84:	4d59      	ldr	r5, [pc, #356]	; (60ec <spi_write_buffer_wait+0x1f8>)
    5f86:	42aa      	cmp	r2, r5
    5f88:	d070      	beq.n	606c <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    5f8a:	7945      	ldrb	r5, [r0, #5]
    5f8c:	2d00      	cmp	r5, #0
    5f8e:	d1e0      	bne.n	5f52 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f90:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5f92:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    5f94:	421d      	tst	r5, r3
    5f96:	d1d4      	bne.n	5f42 <spi_write_buffer_wait+0x4e>
    5f98:	4d55      	ldr	r5, [pc, #340]	; (60f0 <spi_write_buffer_wait+0x1fc>)
    5f9a:	7e37      	ldrb	r7, [r6, #24]
    5f9c:	421f      	tst	r7, r3
    5f9e:	d1d0      	bne.n	5f42 <spi_write_buffer_wait+0x4e>
    5fa0:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5fa2:	2d00      	cmp	r5, #0
    5fa4:	d1f9      	bne.n	5f9a <spi_write_buffer_wait+0xa6>
    5fa6:	e7cc      	b.n	5f42 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5fa8:	2302      	movs	r3, #2
    5faa:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5fac:	3302      	adds	r3, #2
    5fae:	e7ab      	b.n	5f08 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    5fb0:	3402      	adds	r4, #2
    5fb2:	b2a4      	uxth	r4, r4
    5fb4:	4651      	mov	r1, sl
    5fb6:	5dcf      	ldrb	r7, [r1, r7]
    5fb8:	023f      	lsls	r7, r7, #8
    5fba:	433d      	orrs	r5, r7
    5fbc:	e7d6      	b.n	5f6c <spi_write_buffer_wait+0x78>
    5fbe:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    5fc0:	7945      	ldrb	r5, [r0, #5]
    5fc2:	2d00      	cmp	r5, #0
    5fc4:	d137      	bne.n	6036 <spi_write_buffer_wait+0x142>
    5fc6:	4d4b      	ldr	r5, [pc, #300]	; (60f4 <spi_write_buffer_wait+0x200>)
    5fc8:	9101      	str	r1, [sp, #4]
    5fca:	e012      	b.n	5ff2 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5fcc:	3402      	adds	r4, #2
    5fce:	b2a4      	uxth	r4, r4
    5fd0:	4649      	mov	r1, r9
    5fd2:	9f01      	ldr	r7, [sp, #4]
    5fd4:	5c79      	ldrb	r1, [r7, r1]
    5fd6:	0209      	lsls	r1, r1, #8
    5fd8:	9f00      	ldr	r7, [sp, #0]
    5fda:	430f      	orrs	r7, r1
    5fdc:	e01b      	b.n	6016 <spi_write_buffer_wait+0x122>
						length--;
    5fde:	3a01      	subs	r2, #1
    5fe0:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    5fe2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5fe4:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    5fe6:	4641      	mov	r1, r8
    5fe8:	420f      	tst	r7, r1
    5fea:	d11b      	bne.n	6024 <spi_write_buffer_wait+0x130>
    5fec:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5fee:	2d00      	cmp	r5, #0
    5ff0:	d018      	beq.n	6024 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    5ff2:	2a00      	cmp	r2, #0
    5ff4:	d0f5      	beq.n	5fe2 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5ff6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5ff8:	7e37      	ldrb	r7, [r6, #24]
    5ffa:	421f      	tst	r7, r3
    5ffc:	d0f1      	beq.n	5fe2 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5ffe:	1c67      	adds	r7, r4, #1
    6000:	b2b9      	uxth	r1, r7
    6002:	4689      	mov	r9, r1
    6004:	9901      	ldr	r1, [sp, #4]
    6006:	5d09      	ldrb	r1, [r1, r4]
    6008:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    600a:	7981      	ldrb	r1, [r0, #6]
    600c:	2901      	cmp	r1, #1
    600e:	d0dd      	beq.n	5fcc <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    6010:	4669      	mov	r1, sp
    6012:	880f      	ldrh	r7, [r1, #0]
    6014:	464c      	mov	r4, r9
    6016:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    6018:	4219      	tst	r1, r3
    601a:	d0e0      	beq.n	5fde <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    601c:	05ff      	lsls	r7, r7, #23
    601e:	0dff      	lsrs	r7, r7, #23
    6020:	62b7      	str	r7, [r6, #40]	; 0x28
    6022:	e7dc      	b.n	5fde <spi_write_buffer_wait+0xea>
    6024:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6026:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    6028:	4667      	mov	r7, ip
    602a:	423d      	tst	r5, r7
    602c:	d118      	bne.n	6060 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    602e:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    6030:	4646      	mov	r6, r8
    6032:	4235      	tst	r5, r6
    6034:	d052      	beq.n	60dc <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6036:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6038:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    603a:	4647      	mov	r7, r8
    603c:	423d      	tst	r5, r7
    603e:	d0fb      	beq.n	6038 <spi_write_buffer_wait+0x144>
    6040:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    6042:	423d      	tst	r5, r7
    6044:	d007      	beq.n	6056 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6046:	8b75      	ldrh	r5, [r6, #26]
    6048:	423d      	tst	r5, r7
    604a:	d000      	beq.n	604e <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    604c:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    604e:	7985      	ldrb	r5, [r0, #6]
    6050:	2d01      	cmp	r5, #1
    6052:	d009      	beq.n	6068 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6054:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    6056:	465d      	mov	r5, fp
    6058:	3d01      	subs	r5, #1
    605a:	b2ad      	uxth	r5, r5
    605c:	46ab      	mov	fp, r5
    605e:	e769      	b.n	5f34 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6060:	2302      	movs	r3, #2
    6062:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    6064:	3302      	adds	r3, #2
    6066:	e74f      	b.n	5f08 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6068:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    606a:	e7f4      	b.n	6056 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    606c:	7943      	ldrb	r3, [r0, #5]
    606e:	2b01      	cmp	r3, #1
    6070:	d00b      	beq.n	608a <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    6072:	2b00      	cmp	r3, #0
    6074:	d134      	bne.n	60e0 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    6076:	79c2      	ldrb	r2, [r0, #7]
    6078:	2a00      	cmp	r2, #0
    607a:	d100      	bne.n	607e <spi_write_buffer_wait+0x18a>
    607c:	e744      	b.n	5f08 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    607e:	2404      	movs	r4, #4
			while (flush_length) {
    6080:	465b      	mov	r3, fp
    6082:	465d      	mov	r5, fp
    6084:	2b00      	cmp	r3, #0
    6086:	d119      	bne.n	60bc <spi_write_buffer_wait+0x1c8>
    6088:	e73e      	b.n	5f08 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    608a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    608c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    608e:	7e0b      	ldrb	r3, [r1, #24]
    6090:	4213      	tst	r3, r2
    6092:	d0fc      	beq.n	608e <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    6094:	2300      	movs	r3, #0
    6096:	e737      	b.n	5f08 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6098:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    609a:	4223      	tst	r3, r4
    609c:	d022      	beq.n	60e4 <spi_write_buffer_wait+0x1f0>
    609e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    60a0:	4223      	tst	r3, r4
    60a2:	d007      	beq.n	60b4 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    60a4:	8b4b      	ldrh	r3, [r1, #26]
    60a6:	4223      	tst	r3, r4
    60a8:	d000      	beq.n	60ac <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    60aa:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    60ac:	7983      	ldrb	r3, [r0, #6]
    60ae:	2b01      	cmp	r3, #1
    60b0:	d010      	beq.n	60d4 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    60b2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    60b4:	3d01      	subs	r5, #1
    60b6:	b2ad      	uxth	r5, r5
			while (flush_length) {
    60b8:	2d00      	cmp	r5, #0
    60ba:	d015      	beq.n	60e8 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    60bc:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    60be:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    60c0:	4223      	tst	r3, r4
    60c2:	d1e9      	bne.n	6098 <spi_write_buffer_wait+0x1a4>
    60c4:	4b0a      	ldr	r3, [pc, #40]	; (60f0 <spi_write_buffer_wait+0x1fc>)
    60c6:	7e0a      	ldrb	r2, [r1, #24]
    60c8:	4222      	tst	r2, r4
    60ca:	d1e5      	bne.n	6098 <spi_write_buffer_wait+0x1a4>
    60cc:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    60ce:	2b00      	cmp	r3, #0
    60d0:	d1f9      	bne.n	60c6 <spi_write_buffer_wait+0x1d2>
    60d2:	e7e1      	b.n	6098 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    60d4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    60d6:	e7ed      	b.n	60b4 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    60d8:	2312      	movs	r3, #18
    60da:	e715      	b.n	5f08 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    60dc:	2312      	movs	r3, #18
    60de:	e713      	b.n	5f08 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    60e0:	2300      	movs	r3, #0
    60e2:	e711      	b.n	5f08 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    60e4:	2312      	movs	r3, #18
    60e6:	e70f      	b.n	5f08 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    60e8:	2300      	movs	r3, #0
    60ea:	e70d      	b.n	5f08 <spi_write_buffer_wait+0x14>
    60ec:	0000ffff 	.word	0x0000ffff
    60f0:	00002710 	.word	0x00002710
    60f4:	00002711 	.word	0x00002711

000060f8 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    60f8:	4770      	bx	lr
	...

000060fc <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    60fc:	b510      	push	{r4, lr}
    60fe:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    6100:	4b0f      	ldr	r3, [pc, #60]	; (6140 <sd_mmc_test_unit_ready+0x44>)
    6102:	4798      	blx	r3
    6104:	2801      	cmp	r0, #1
    6106:	d019      	beq.n	613c <sd_mmc_test_unit_ready+0x40>
    6108:	2800      	cmp	r0, #0
    610a:	d003      	beq.n	6114 <sd_mmc_test_unit_ready+0x18>
    610c:	2802      	cmp	r0, #2
    610e:	d010      	beq.n	6132 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    6110:	2001      	movs	r0, #1
	}
}
    6112:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    6114:	4b0b      	ldr	r3, [pc, #44]	; (6144 <sd_mmc_test_unit_ready+0x48>)
    6116:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    6118:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    611a:	2b00      	cmp	r3, #0
    611c:	d1f9      	bne.n	6112 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    611e:	0020      	movs	r0, r4
    6120:	4b09      	ldr	r3, [pc, #36]	; (6148 <sd_mmc_test_unit_ready+0x4c>)
    6122:	4798      	blx	r3
    6124:	0003      	movs	r3, r0
    6126:	2003      	movs	r0, #3
    6128:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    612a:	4243      	negs	r3, r0
    612c:	4158      	adcs	r0, r3
    612e:	0040      	lsls	r0, r0, #1
    6130:	e7ef      	b.n	6112 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    6132:	2200      	movs	r2, #0
    6134:	4b03      	ldr	r3, [pc, #12]	; (6144 <sd_mmc_test_unit_ready+0x48>)
    6136:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    6138:	2002      	movs	r0, #2
    613a:	e7ea      	b.n	6112 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    613c:	2003      	movs	r0, #3
    613e:	e7e8      	b.n	6112 <sd_mmc_test_unit_ready+0x16>
    6140:	00000c9d 	.word	0x00000c9d
    6144:	20000380 	.word	0x20000380
    6148:	0000114d 	.word	0x0000114d

0000614c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    614c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    614e:	2000      	movs	r0, #0
    6150:	4b01      	ldr	r3, [pc, #4]	; (6158 <sd_mmc_test_unit_ready_0+0xc>)
    6152:	4798      	blx	r3
}
    6154:	bd10      	pop	{r4, pc}
    6156:	46c0      	nop			; (mov r8, r8)
    6158:	000060fd 	.word	0x000060fd

0000615c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    615c:	b570      	push	{r4, r5, r6, lr}
    615e:	0004      	movs	r4, r0
    6160:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    6162:	4b04      	ldr	r3, [pc, #16]	; (6174 <sd_mmc_read_capacity+0x18>)
    6164:	4798      	blx	r3
    6166:	0040      	lsls	r0, r0, #1
    6168:	3801      	subs	r0, #1
    616a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    616c:	0020      	movs	r0, r4
    616e:	4b02      	ldr	r3, [pc, #8]	; (6178 <sd_mmc_read_capacity+0x1c>)
    6170:	4798      	blx	r3
}
    6172:	bd70      	pop	{r4, r5, r6, pc}
    6174:	00001175 	.word	0x00001175
    6178:	000060fd 	.word	0x000060fd

0000617c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    617c:	b510      	push	{r4, lr}
    617e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    6180:	2000      	movs	r0, #0
    6182:	4b01      	ldr	r3, [pc, #4]	; (6188 <sd_mmc_read_capacity_0+0xc>)
    6184:	4798      	blx	r3
}
    6186:	bd10      	pop	{r4, pc}
    6188:	0000615d 	.word	0x0000615d

0000618c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    618c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    618e:	2000      	movs	r0, #0
    6190:	4b01      	ldr	r3, [pc, #4]	; (6198 <sd_mmc_wr_protect_0+0xc>)
    6192:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    6194:	bd10      	pop	{r4, pc}
    6196:	46c0      	nop			; (mov r8, r8)
    6198:	0000119d 	.word	0x0000119d

0000619c <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    619c:	2001      	movs	r0, #1
    619e:	4770      	bx	lr

000061a0 <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    61a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61a2:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    61a4:	4b24      	ldr	r3, [pc, #144]	; (6238 <sd_mmc_usb_read_10+0x98>)
    61a6:	4798      	blx	r3
    61a8:	2800      	cmp	r0, #0
    61aa:	d004      	beq.n	61b6 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    61ac:	3802      	subs	r0, #2
    61ae:	4243      	negs	r3, r0
    61b0:	4158      	adcs	r0, r3
    61b2:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    61b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    61b6:	3401      	adds	r4, #1
    61b8:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    61ba:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    61bc:	4e1f      	ldr	r6, [pc, #124]	; (623c <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    61be:	e008      	b.n	61d2 <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    61c0:	481f      	ldr	r0, [pc, #124]	; (6240 <sd_mmc_usb_read_10+0xa0>)
    61c2:	e010      	b.n	61e6 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    61c4:	2000      	movs	r0, #0
    61c6:	4b1f      	ldr	r3, [pc, #124]	; (6244 <sd_mmc_usb_read_10+0xa4>)
    61c8:	4798      	blx	r3
    61ca:	2800      	cmp	r0, #0
    61cc:	d126      	bne.n	621c <sd_mmc_usb_read_10+0x7c>
    61ce:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    61d0:	0022      	movs	r2, r4
	while (nb_step--) {
    61d2:	1e54      	subs	r4, r2, #1
    61d4:	b2a4      	uxth	r4, r4
    61d6:	2a00      	cmp	r2, #0
    61d8:	d01c      	beq.n	6214 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    61da:	2c00      	cmp	r4, #0
    61dc:	d020      	beq.n	6220 <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    61de:	2501      	movs	r5, #1
    61e0:	4025      	ands	r5, r4
    61e2:	d0ed      	beq.n	61c0 <sd_mmc_usb_read_10+0x20>
    61e4:	4818      	ldr	r0, [pc, #96]	; (6248 <sd_mmc_usb_read_10+0xa8>)
    61e6:	2101      	movs	r1, #1
    61e8:	47b0      	blx	r6
    61ea:	2800      	cmp	r0, #0
    61ec:	d114      	bne.n	6218 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    61ee:	2f00      	cmp	r7, #0
    61f0:	d1e8      	bne.n	61c4 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    61f2:	4915      	ldr	r1, [pc, #84]	; (6248 <sd_mmc_usb_read_10+0xa8>)
    61f4:	2d00      	cmp	r5, #0
    61f6:	d000      	beq.n	61fa <sd_mmc_usb_read_10+0x5a>
    61f8:	4911      	ldr	r1, [pc, #68]	; (6240 <sd_mmc_usb_read_10+0xa0>)
    61fa:	2300      	movs	r3, #0
    61fc:	2280      	movs	r2, #128	; 0x80
    61fe:	0092      	lsls	r2, r2, #2
    6200:	2001      	movs	r0, #1
    6202:	4d12      	ldr	r5, [pc, #72]	; (624c <sd_mmc_usb_read_10+0xac>)
    6204:	47a8      	blx	r5
    6206:	2800      	cmp	r0, #0
    6208:	d1dc      	bne.n	61c4 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    620a:	2001      	movs	r0, #1
    620c:	4b0d      	ldr	r3, [pc, #52]	; (6244 <sd_mmc_usb_read_10+0xa4>)
    620e:	4798      	blx	r3
				return CTRL_FAIL;
    6210:	2001      	movs	r0, #1
    6212:	e7cf      	b.n	61b4 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    6214:	2000      	movs	r0, #0
    6216:	e7cd      	b.n	61b4 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    6218:	2001      	movs	r0, #1
    621a:	e7cb      	b.n	61b4 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    621c:	2001      	movs	r0, #1
    621e:	e7c9      	b.n	61b4 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    6220:	2f00      	cmp	r7, #0
    6222:	d1d4      	bne.n	61ce <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    6224:	2300      	movs	r3, #0
    6226:	2280      	movs	r2, #128	; 0x80
    6228:	0092      	lsls	r2, r2, #2
    622a:	4907      	ldr	r1, [pc, #28]	; (6248 <sd_mmc_usb_read_10+0xa8>)
    622c:	2001      	movs	r0, #1
    622e:	4d07      	ldr	r5, [pc, #28]	; (624c <sd_mmc_usb_read_10+0xac>)
    6230:	47a8      	blx	r5
    6232:	2800      	cmp	r0, #0
    6234:	d1cb      	bne.n	61ce <sd_mmc_usb_read_10+0x2e>
    6236:	e7e8      	b.n	620a <sd_mmc_usb_read_10+0x6a>
    6238:	000011a1 	.word	0x000011a1
    623c:	00001229 	.word	0x00001229
    6240:	20000e58 	.word	0x20000e58
    6244:	00001255 	.word	0x00001255
    6248:	20000c58 	.word	0x20000c58
    624c:	00001bf5 	.word	0x00001bf5

00006250 <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    6250:	b510      	push	{r4, lr}
    6252:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    6254:	0001      	movs	r1, r0
    6256:	2000      	movs	r0, #0
    6258:	4b01      	ldr	r3, [pc, #4]	; (6260 <sd_mmc_usb_read_10_0+0x10>)
    625a:	4798      	blx	r3
}
    625c:	bd10      	pop	{r4, pc}
    625e:	46c0      	nop			; (mov r8, r8)
    6260:	000061a1 	.word	0x000061a1

00006264 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    6264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6266:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    6268:	4b20      	ldr	r3, [pc, #128]	; (62ec <sd_mmc_usb_write_10+0x88>)
    626a:	4798      	blx	r3
    626c:	2800      	cmp	r0, #0
    626e:	d00d      	beq.n	628c <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    6270:	3802      	subs	r0, #2
    6272:	4243      	negs	r3, r0
    6274:	4158      	adcs	r0, r3
    6276:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    6278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    627a:	481d      	ldr	r0, [pc, #116]	; (62f0 <sd_mmc_usb_write_10+0x8c>)
    627c:	e01b      	b.n	62b6 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    627e:	3001      	adds	r0, #1
				if (!b_first_step) {
    6280:	2d00      	cmp	r5, #0
    6282:	d1f9      	bne.n	6278 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    6284:	4b1b      	ldr	r3, [pc, #108]	; (62f4 <sd_mmc_usb_write_10+0x90>)
    6286:	4798      	blx	r3
				return CTRL_FAIL;
    6288:	2001      	movs	r0, #1
    628a:	e7f5      	b.n	6278 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    628c:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    628e:	4f19      	ldr	r7, [pc, #100]	; (62f4 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    6290:	4e19      	ldr	r6, [pc, #100]	; (62f8 <sd_mmc_usb_write_10+0x94>)
    6292:	e008      	b.n	62a6 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    6294:	2000      	movs	r0, #0
    6296:	e7ef      	b.n	6278 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    6298:	2001      	movs	r0, #1
    629a:	e7ed      	b.n	6278 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    629c:	2c00      	cmp	r4, #0
    629e:	d111      	bne.n	62c4 <sd_mmc_usb_write_10+0x60>
    62a0:	3c01      	subs	r4, #1
    62a2:	b2a4      	uxth	r4, r4
    62a4:	2500      	movs	r5, #0
	while (nb_step--) {
    62a6:	4b15      	ldr	r3, [pc, #84]	; (62fc <sd_mmc_usb_write_10+0x98>)
    62a8:	429c      	cmp	r4, r3
    62aa:	d0f3      	beq.n	6294 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    62ac:	2d00      	cmp	r5, #0
    62ae:	d1f5      	bne.n	629c <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    62b0:	07e3      	lsls	r3, r4, #31
    62b2:	d5e2      	bpl.n	627a <sd_mmc_usb_write_10+0x16>
    62b4:	4812      	ldr	r0, [pc, #72]	; (6300 <sd_mmc_usb_write_10+0x9c>)
    62b6:	2101      	movs	r1, #1
    62b8:	4b12      	ldr	r3, [pc, #72]	; (6304 <sd_mmc_usb_write_10+0xa0>)
    62ba:	4798      	blx	r3
    62bc:	2800      	cmp	r0, #0
    62be:	d1eb      	bne.n	6298 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    62c0:	2c00      	cmp	r4, #0
    62c2:	d00c      	beq.n	62de <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    62c4:	490e      	ldr	r1, [pc, #56]	; (6300 <sd_mmc_usb_write_10+0x9c>)
    62c6:	07e3      	lsls	r3, r4, #31
    62c8:	d500      	bpl.n	62cc <sd_mmc_usb_write_10+0x68>
    62ca:	4909      	ldr	r1, [pc, #36]	; (62f0 <sd_mmc_usb_write_10+0x8c>)
    62cc:	2300      	movs	r3, #0
    62ce:	2280      	movs	r2, #128	; 0x80
    62d0:	0092      	lsls	r2, r2, #2
    62d2:	2000      	movs	r0, #0
    62d4:	47b0      	blx	r6
    62d6:	2800      	cmp	r0, #0
    62d8:	d0d1      	beq.n	627e <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    62da:	2d00      	cmp	r5, #0
    62dc:	d1e0      	bne.n	62a0 <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    62de:	2000      	movs	r0, #0
    62e0:	47b8      	blx	r7
    62e2:	2800      	cmp	r0, #0
    62e4:	d0dc      	beq.n	62a0 <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    62e6:	2001      	movs	r0, #1
    62e8:	e7c6      	b.n	6278 <sd_mmc_usb_write_10+0x14>
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	000012c5 	.word	0x000012c5
    62f0:	20000e58 	.word	0x20000e58
    62f4:	00001361 	.word	0x00001361
    62f8:	00001bf5 	.word	0x00001bf5
    62fc:	0000ffff 	.word	0x0000ffff
    6300:	20000c58 	.word	0x20000c58
    6304:	00001335 	.word	0x00001335

00006308 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    6308:	b510      	push	{r4, lr}
    630a:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    630c:	0001      	movs	r1, r0
    630e:	2000      	movs	r0, #0
    6310:	4b01      	ldr	r3, [pc, #4]	; (6318 <sd_mmc_usb_write_10_0+0x10>)
    6312:	4798      	blx	r3
}
    6314:	bd10      	pop	{r4, pc}
    6316:	46c0      	nop			; (mov r8, r8)
    6318:	00006265 	.word	0x00006265

0000631c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    631c:	b500      	push	{lr}
    631e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    6320:	466b      	mov	r3, sp
    6322:	1dd9      	adds	r1, r3, #7
    6324:	23ff      	movs	r3, #255	; 0xff
    6326:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    6328:	2201      	movs	r2, #1
    632a:	480b      	ldr	r0, [pc, #44]	; (6358 <sd_mmc_spi_start_write_block+0x3c>)
    632c:	4b0b      	ldr	r3, [pc, #44]	; (635c <sd_mmc_spi_start_write_block+0x40>)
    632e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    6330:	4b0b      	ldr	r3, [pc, #44]	; (6360 <sd_mmc_spi_start_write_block+0x44>)
    6332:	881b      	ldrh	r3, [r3, #0]
    6334:	2b01      	cmp	r3, #1
    6336:	d00a      	beq.n	634e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    6338:	22fc      	movs	r2, #252	; 0xfc
    633a:	466b      	mov	r3, sp
    633c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    633e:	2201      	movs	r2, #1
    6340:	466b      	mov	r3, sp
    6342:	1d99      	adds	r1, r3, #6
    6344:	4804      	ldr	r0, [pc, #16]	; (6358 <sd_mmc_spi_start_write_block+0x3c>)
    6346:	4b05      	ldr	r3, [pc, #20]	; (635c <sd_mmc_spi_start_write_block+0x40>)
    6348:	4798      	blx	r3
}
    634a:	b003      	add	sp, #12
    634c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    634e:	22fe      	movs	r2, #254	; 0xfe
    6350:	466b      	mov	r3, sp
    6352:	719a      	strb	r2, [r3, #6]
    6354:	e7f3      	b.n	633e <sd_mmc_spi_start_write_block+0x22>
    6356:	46c0      	nop			; (mov r8, r8)
    6358:	20000384 	.word	0x20000384
    635c:	00005ef5 	.word	0x00005ef5
    6360:	20000398 	.word	0x20000398

00006364 <sd_mmc_spi_wait_busy>:
{
    6364:	b5f0      	push	{r4, r5, r6, r7, lr}
    6366:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    6368:	466b      	mov	r3, sp
    636a:	1ddc      	adds	r4, r3, #7
    636c:	23ff      	movs	r3, #255	; 0xff
    636e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    6370:	4e12      	ldr	r6, [pc, #72]	; (63bc <sd_mmc_spi_wait_busy+0x58>)
    6372:	2201      	movs	r2, #1
    6374:	0021      	movs	r1, r4
    6376:	0030      	movs	r0, r6
    6378:	4d11      	ldr	r5, [pc, #68]	; (63c0 <sd_mmc_spi_wait_busy+0x5c>)
    637a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    637c:	23ff      	movs	r3, #255	; 0xff
    637e:	2201      	movs	r2, #1
    6380:	0021      	movs	r1, r4
    6382:	0030      	movs	r0, r6
    6384:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    6386:	23ff      	movs	r3, #255	; 0xff
    6388:	2201      	movs	r2, #1
    638a:	0021      	movs	r1, r4
    638c:	0030      	movs	r0, r6
    638e:	47a8      	blx	r5
    6390:	4c0c      	ldr	r4, [pc, #48]	; (63c4 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    6392:	466b      	mov	r3, sp
    6394:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    6396:	4e09      	ldr	r6, [pc, #36]	; (63bc <sd_mmc_spi_wait_busy+0x58>)
    6398:	4f09      	ldr	r7, [pc, #36]	; (63c0 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    639a:	782b      	ldrb	r3, [r5, #0]
    639c:	2bff      	cmp	r3, #255	; 0xff
    639e:	d009      	beq.n	63b4 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    63a0:	23ff      	movs	r3, #255	; 0xff
    63a2:	2201      	movs	r2, #1
    63a4:	0029      	movs	r1, r5
    63a6:	0030      	movs	r0, r6
    63a8:	47b8      	blx	r7
    63aa:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    63ac:	2c00      	cmp	r4, #0
    63ae:	d1f4      	bne.n	639a <sd_mmc_spi_wait_busy+0x36>
			return false;
    63b0:	2000      	movs	r0, #0
    63b2:	e000      	b.n	63b6 <sd_mmc_spi_wait_busy+0x52>
	return true;
    63b4:	2001      	movs	r0, #1
}
    63b6:	b003      	add	sp, #12
    63b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63ba:	46c0      	nop			; (mov r8, r8)
    63bc:	20000384 	.word	0x20000384
    63c0:	00005ce9 	.word	0x00005ce9
    63c4:	00030d40 	.word	0x00030d40

000063c8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    63c8:	b570      	push	{r4, r5, r6, lr}
    63ca:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    63cc:	4b14      	ldr	r3, [pc, #80]	; (6420 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    63ce:	881c      	ldrh	r4, [r3, #0]
    63d0:	2c01      	cmp	r4, #1
    63d2:	d023      	beq.n	641c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    63d4:	4b13      	ldr	r3, [pc, #76]	; (6424 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    63d6:	8819      	ldrh	r1, [r3, #0]
    63d8:	4b13      	ldr	r3, [pc, #76]	; (6428 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    63da:	6818      	ldr	r0, [r3, #0]
    63dc:	4b13      	ldr	r3, [pc, #76]	; (642c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    63de:	4798      	blx	r3
		return true; // It is not the End of multi write
    63e0:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    63e2:	4284      	cmp	r4, r0
    63e4:	d902      	bls.n	63ec <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    63e6:	0018      	movs	r0, r3
    63e8:	b002      	add	sp, #8
    63ea:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    63ec:	466b      	mov	r3, sp
    63ee:	1ddc      	adds	r4, r3, #7
    63f0:	23ff      	movs	r3, #255	; 0xff
    63f2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    63f4:	4e0e      	ldr	r6, [pc, #56]	; (6430 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    63f6:	2201      	movs	r2, #1
    63f8:	0021      	movs	r1, r4
    63fa:	0030      	movs	r0, r6
    63fc:	4d0d      	ldr	r5, [pc, #52]	; (6434 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    63fe:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    6400:	23fd      	movs	r3, #253	; 0xfd
    6402:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    6404:	2201      	movs	r2, #1
    6406:	0021      	movs	r1, r4
    6408:	0030      	movs	r0, r6
    640a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    640c:	4b0a      	ldr	r3, [pc, #40]	; (6438 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    640e:	4798      	blx	r3
    6410:	1e03      	subs	r3, r0, #0
    6412:	d1e8      	bne.n	63e6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    6414:	2105      	movs	r1, #5
    6416:	4a09      	ldr	r2, [pc, #36]	; (643c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    6418:	7011      	strb	r1, [r2, #0]
		return false;
    641a:	e7e4      	b.n	63e6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    641c:	2301      	movs	r3, #1
    641e:	e7e2      	b.n	63e6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    6420:	20000398 	.word	0x20000398
    6424:	20000390 	.word	0x20000390
    6428:	200003a0 	.word	0x200003a0
    642c:	00007095 	.word	0x00007095
    6430:	20000384 	.word	0x20000384
    6434:	00005ef5 	.word	0x00005ef5
    6438:	00006365 	.word	0x00006365
    643c:	20000397 	.word	0x20000397

00006440 <sd_mmc_spi_start_read_block>:
{
    6440:	b5f0      	push	{r4, r5, r6, r7, lr}
    6442:	b083      	sub	sp, #12
	token = 0;
    6444:	2200      	movs	r2, #0
    6446:	466b      	mov	r3, sp
    6448:	71da      	strb	r2, [r3, #7]
    644a:	4c14      	ldr	r4, [pc, #80]	; (649c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    644c:	466b      	mov	r3, sp
    644e:	1ddd      	adds	r5, r3, #7
    6450:	4e13      	ldr	r6, [pc, #76]	; (64a0 <sd_mmc_spi_start_read_block+0x60>)
    6452:	4f14      	ldr	r7, [pc, #80]	; (64a4 <sd_mmc_spi_start_read_block+0x64>)
    6454:	23ff      	movs	r3, #255	; 0xff
    6456:	2201      	movs	r2, #1
    6458:	0029      	movs	r1, r5
    645a:	0030      	movs	r0, r6
    645c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    645e:	782b      	ldrb	r3, [r5, #0]
    6460:	220f      	movs	r2, #15
    6462:	0019      	movs	r1, r3
    6464:	4391      	bics	r1, r2
    6466:	1e0a      	subs	r2, r1, #0
    6468:	d009      	beq.n	647e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    646a:	2bfe      	cmp	r3, #254	; 0xfe
    646c:	d013      	beq.n	6496 <sd_mmc_spi_start_read_block+0x56>
    646e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    6470:	2c00      	cmp	r4, #0
    6472:	d1ef      	bne.n	6454 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    6474:	2204      	movs	r2, #4
    6476:	4b0c      	ldr	r3, [pc, #48]	; (64a8 <sd_mmc_spi_start_read_block+0x68>)
    6478:	701a      	strb	r2, [r3, #0]
			return false;
    647a:	2000      	movs	r0, #0
    647c:	e00c      	b.n	6498 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    647e:	075b      	lsls	r3, r3, #29
    6480:	d004      	beq.n	648c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    6482:	3207      	adds	r2, #7
    6484:	4b08      	ldr	r3, [pc, #32]	; (64a8 <sd_mmc_spi_start_read_block+0x68>)
    6486:	701a      	strb	r2, [r3, #0]
			return false;
    6488:	2000      	movs	r0, #0
    648a:	e005      	b.n	6498 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    648c:	220b      	movs	r2, #11
    648e:	4b06      	ldr	r3, [pc, #24]	; (64a8 <sd_mmc_spi_start_read_block+0x68>)
    6490:	701a      	strb	r2, [r3, #0]
			return false;
    6492:	2000      	movs	r0, #0
    6494:	e000      	b.n	6498 <sd_mmc_spi_start_read_block+0x58>
	return true;
    6496:	2001      	movs	r0, #1
}
    6498:	b003      	add	sp, #12
    649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    649c:	0007a120 	.word	0x0007a120
    64a0:	20000384 	.word	0x20000384
    64a4:	00005ce9 	.word	0x00005ce9
    64a8:	20000397 	.word	0x20000397

000064ac <sd_mmc_spi_stop_write_block>:
{
    64ac:	b530      	push	{r4, r5, lr}
    64ae:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    64b0:	a901      	add	r1, sp, #4
    64b2:	2301      	movs	r3, #1
    64b4:	425b      	negs	r3, r3
    64b6:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    64b8:	4d14      	ldr	r5, [pc, #80]	; (650c <sd_mmc_spi_stop_write_block+0x60>)
    64ba:	2202      	movs	r2, #2
    64bc:	0028      	movs	r0, r5
    64be:	4b14      	ldr	r3, [pc, #80]	; (6510 <sd_mmc_spi_stop_write_block+0x64>)
    64c0:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    64c2:	466b      	mov	r3, sp
    64c4:	1ddc      	adds	r4, r3, #7
    64c6:	23ff      	movs	r3, #255	; 0xff
    64c8:	2201      	movs	r2, #1
    64ca:	0021      	movs	r1, r4
    64cc:	0028      	movs	r0, r5
    64ce:	4d11      	ldr	r5, [pc, #68]	; (6514 <sd_mmc_spi_stop_write_block+0x68>)
    64d0:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    64d2:	7822      	ldrb	r2, [r4, #0]
    64d4:	2311      	movs	r3, #17
    64d6:	4013      	ands	r3, r2
    64d8:	2b01      	cmp	r3, #1
    64da:	d005      	beq.n	64e8 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    64dc:	2201      	movs	r2, #1
    64de:	4b0e      	ldr	r3, [pc, #56]	; (6518 <sd_mmc_spi_stop_write_block+0x6c>)
    64e0:	701a      	strb	r2, [r3, #0]
		return false;
    64e2:	2000      	movs	r0, #0
}
    64e4:	b003      	add	sp, #12
    64e6:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    64e8:	231e      	movs	r3, #30
    64ea:	401a      	ands	r2, r3
    64ec:	2a04      	cmp	r2, #4
    64ee:	d00b      	beq.n	6508 <sd_mmc_spi_stop_write_block+0x5c>
    64f0:	2a0a      	cmp	r2, #10
    64f2:	d104      	bne.n	64fe <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    64f4:	3a02      	subs	r2, #2
    64f6:	4b08      	ldr	r3, [pc, #32]	; (6518 <sd_mmc_spi_stop_write_block+0x6c>)
    64f8:	701a      	strb	r2, [r3, #0]
		return false;
    64fa:	2000      	movs	r0, #0
    64fc:	e7f2      	b.n	64e4 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    64fe:	220a      	movs	r2, #10
    6500:	4b05      	ldr	r3, [pc, #20]	; (6518 <sd_mmc_spi_stop_write_block+0x6c>)
    6502:	701a      	strb	r2, [r3, #0]
		return false;
    6504:	2000      	movs	r0, #0
    6506:	e7ed      	b.n	64e4 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    6508:	2001      	movs	r0, #1
    650a:	e7eb      	b.n	64e4 <sd_mmc_spi_stop_write_block+0x38>
    650c:	20000384 	.word	0x20000384
    6510:	00005ef5 	.word	0x00005ef5
    6514:	00005ce9 	.word	0x00005ce9
    6518:	20000397 	.word	0x20000397

0000651c <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    651c:	b570      	push	{r4, r5, r6, lr}
    651e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6520:	2500      	movs	r5, #0
    6522:	4b2c      	ldr	r3, [pc, #176]	; (65d4 <sd_mmc_spi_init+0xb8>)
    6524:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    6526:	a90f      	add	r1, sp, #60	; 0x3c
    6528:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    652a:	2601      	movs	r6, #1
    652c:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    652e:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    6530:	2025      	movs	r0, #37	; 0x25
    6532:	4b29      	ldr	r3, [pc, #164]	; (65d8 <sd_mmc_spi_init+0xbc>)
    6534:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    6536:	ac01      	add	r4, sp, #4
    6538:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    653a:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    653c:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    653e:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    6540:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    6542:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6544:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    6546:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6548:	2324      	movs	r3, #36	; 0x24
    654a:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    654c:	220c      	movs	r2, #12
    654e:	2100      	movs	r1, #0
    6550:	a807      	add	r0, sp, #28
    6552:	4b22      	ldr	r3, [pc, #136]	; (65dc <sd_mmc_spi_init+0xc0>)
    6554:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    6556:	2380      	movs	r3, #128	; 0x80
    6558:	025b      	lsls	r3, r3, #9
    655a:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    655c:	4b20      	ldr	r3, [pc, #128]	; (65e0 <sd_mmc_spi_init+0xc4>)
    655e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    6560:	4b20      	ldr	r3, [pc, #128]	; (65e4 <sd_mmc_spi_init+0xc8>)
    6562:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    6564:	4b20      	ldr	r3, [pc, #128]	; (65e8 <sd_mmc_spi_init+0xcc>)
    6566:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    6568:	4b20      	ldr	r3, [pc, #128]	; (65ec <sd_mmc_spi_init+0xd0>)
    656a:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    656c:	4b20      	ldr	r3, [pc, #128]	; (65f0 <sd_mmc_spi_init+0xd4>)
    656e:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    6570:	4d20      	ldr	r5, [pc, #128]	; (65f4 <sd_mmc_spi_init+0xd8>)
    6572:	0022      	movs	r2, r4
    6574:	4920      	ldr	r1, [pc, #128]	; (65f8 <sd_mmc_spi_init+0xdc>)
    6576:	0028      	movs	r0, r5
    6578:	4b20      	ldr	r3, [pc, #128]	; (65fc <sd_mmc_spi_init+0xe0>)
    657a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    657c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    657e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6580:	2b00      	cmp	r3, #0
    6582:	d1fc      	bne.n	657e <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6584:	6813      	ldr	r3, [r2, #0]
    6586:	2102      	movs	r1, #2
    6588:	430b      	orrs	r3, r1
    658a:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    658c:	4a1c      	ldr	r2, [pc, #112]	; (6600 <sd_mmc_spi_init+0xe4>)
    658e:	2300      	movs	r3, #0
    6590:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    6592:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    6594:	491b      	ldr	r1, [pc, #108]	; (6604 <sd_mmc_spi_init+0xe8>)
    6596:	7808      	ldrb	r0, [r1, #0]
    6598:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    659a:	4c1b      	ldr	r4, [pc, #108]	; (6608 <sd_mmc_spi_init+0xec>)
    659c:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    659e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    65a0:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    65a2:	2201      	movs	r2, #1
    65a4:	4669      	mov	r1, sp
    65a6:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    65a8:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    65aa:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    65ac:	4b0a      	ldr	r3, [pc, #40]	; (65d8 <sd_mmc_spi_init+0xbc>)
    65ae:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    65b0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    65b2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    65b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    65b6:	2900      	cmp	r1, #0
    65b8:	d104      	bne.n	65c4 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    65ba:	0953      	lsrs	r3, r2, #5
    65bc:	01db      	lsls	r3, r3, #7
    65be:	4913      	ldr	r1, [pc, #76]	; (660c <sd_mmc_spi_init+0xf0>)
    65c0:	468c      	mov	ip, r1
    65c2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    65c4:	211f      	movs	r1, #31
    65c6:	4011      	ands	r1, r2
    65c8:	2201      	movs	r2, #1
    65ca:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    65cc:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    65ce:	b010      	add	sp, #64	; 0x40
    65d0:	bd70      	pop	{r4, r5, r6, pc}
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	20000397 	.word	0x20000397
    65d8:	00006bbd 	.word	0x00006bbd
    65dc:	00007683 	.word	0x00007683
    65e0:	00040003 	.word	0x00040003
    65e4:	00050003 	.word	0x00050003
    65e8:	00060003 	.word	0x00060003
    65ec:	00070003 	.word	0x00070003
    65f0:	00061a80 	.word	0x00061a80
    65f4:	20000384 	.word	0x20000384
    65f8:	42000800 	.word	0x42000800
    65fc:	000059b5 	.word	0x000059b5
    6600:	200003a4 	.word	0x200003a4
    6604:	200000f8 	.word	0x200000f8
    6608:	20000394 	.word	0x20000394
    660c:	41004400 	.word	0x41004400

00006610 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    6610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6612:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6614:	2200      	movs	r2, #0
    6616:	4b0d      	ldr	r3, [pc, #52]	; (664c <sd_mmc_spi_select_device+0x3c>)
    6618:	701a      	strb	r2, [r3, #0]
    661a:	000c      	movs	r4, r1
    661c:	4b0c      	ldr	r3, [pc, #48]	; (6650 <sd_mmc_spi_select_device+0x40>)
    661e:	4299      	cmp	r1, r3
    6620:	d900      	bls.n	6624 <sd_mmc_spi_select_device+0x14>
    6622:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    6624:	4d0b      	ldr	r5, [pc, #44]	; (6654 <sd_mmc_spi_select_device+0x44>)
    6626:	4e0c      	ldr	r6, [pc, #48]	; (6658 <sd_mmc_spi_select_device+0x48>)
    6628:	e001      	b.n	662e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    662a:	08e3      	lsrs	r3, r4, #3
    662c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    662e:	0021      	movs	r1, r4
    6630:	0028      	movs	r0, r5
    6632:	47b0      	blx	r6
    6634:	2817      	cmp	r0, #23
    6636:	d0f8      	beq.n	662a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    6638:	0079      	lsls	r1, r7, #1
    663a:	19cf      	adds	r7, r1, r7
    663c:	4907      	ldr	r1, [pc, #28]	; (665c <sd_mmc_spi_select_device+0x4c>)
    663e:	19c9      	adds	r1, r1, r7
    6640:	2201      	movs	r2, #1
    6642:	4804      	ldr	r0, [pc, #16]	; (6654 <sd_mmc_spi_select_device+0x44>)
    6644:	4b06      	ldr	r3, [pc, #24]	; (6660 <sd_mmc_spi_select_device+0x50>)
    6646:	4798      	blx	r3
}
    6648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    664a:	46c0      	nop			; (mov r8, r8)
    664c:	20000397 	.word	0x20000397
    6650:	003d0900 	.word	0x003d0900
    6654:	20000384 	.word	0x20000384
    6658:	00005931 	.word	0x00005931
    665c:	20000394 	.word	0x20000394
    6660:	00005e01 	.word	0x00005e01

00006664 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    6664:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6666:	2200      	movs	r2, #0
    6668:	4b04      	ldr	r3, [pc, #16]	; (667c <sd_mmc_spi_deselect_device+0x18>)
    666a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    666c:	0041      	lsls	r1, r0, #1
    666e:	1808      	adds	r0, r1, r0
    6670:	4903      	ldr	r1, [pc, #12]	; (6680 <sd_mmc_spi_deselect_device+0x1c>)
    6672:	1809      	adds	r1, r1, r0
    6674:	4803      	ldr	r0, [pc, #12]	; (6684 <sd_mmc_spi_deselect_device+0x20>)
    6676:	4b04      	ldr	r3, [pc, #16]	; (6688 <sd_mmc_spi_deselect_device+0x24>)
    6678:	4798      	blx	r3
}
    667a:	bd10      	pop	{r4, pc}
    667c:	20000397 	.word	0x20000397
    6680:	20000394 	.word	0x20000394
    6684:	20000384 	.word	0x20000384
    6688:	00005e01 	.word	0x00005e01

0000668c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    6690:	22ff      	movs	r2, #255	; 0xff
    6692:	466b      	mov	r3, sp
    6694:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6696:	2200      	movs	r2, #0
    6698:	4b07      	ldr	r3, [pc, #28]	; (66b8 <sd_mmc_spi_send_clock+0x2c>)
    669a:	701a      	strb	r2, [r3, #0]
    669c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    669e:	4e07      	ldr	r6, [pc, #28]	; (66bc <sd_mmc_spi_send_clock+0x30>)
    66a0:	4d07      	ldr	r5, [pc, #28]	; (66c0 <sd_mmc_spi_send_clock+0x34>)
    66a2:	2201      	movs	r2, #1
    66a4:	466b      	mov	r3, sp
    66a6:	1dd9      	adds	r1, r3, #7
    66a8:	0030      	movs	r0, r6
    66aa:	47a8      	blx	r5
    66ac:	3c01      	subs	r4, #1
    66ae:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    66b0:	2c00      	cmp	r4, #0
    66b2:	d1f6      	bne.n	66a2 <sd_mmc_spi_send_clock+0x16>
	}
}
    66b4:	b002      	add	sp, #8
    66b6:	bd70      	pop	{r4, r5, r6, pc}
    66b8:	20000397 	.word	0x20000397
    66bc:	20000384 	.word	0x20000384
    66c0:	00005ef5 	.word	0x00005ef5

000066c4 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    66c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66c6:	46c6      	mov	lr, r8
    66c8:	b500      	push	{lr}
    66ca:	b086      	sub	sp, #24
    66cc:	4680      	mov	r8, r0
    66ce:	9200      	str	r2, [sp, #0]
    66d0:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    66d2:	22ff      	movs	r2, #255	; 0xff
    66d4:	230f      	movs	r3, #15
    66d6:	a802      	add	r0, sp, #8
    66d8:	4684      	mov	ip, r0
    66da:	4463      	add	r3, ip
    66dc:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    66de:	2200      	movs	r2, #0
    66e0:	4b53      	ldr	r3, [pc, #332]	; (6830 <sd_mmc_spi_adtc_start+0x16c>)
    66e2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    66e4:	ab04      	add	r3, sp, #16
    66e6:	323f      	adds	r2, #63	; 0x3f
    66e8:	4640      	mov	r0, r8
    66ea:	4002      	ands	r2, r0
    66ec:	2040      	movs	r0, #64	; 0x40
    66ee:	4302      	orrs	r2, r0
    66f0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    66f2:	0e0a      	lsrs	r2, r1, #24
    66f4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    66f6:	0c0a      	lsrs	r2, r1, #16
    66f8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    66fa:	0a0a      	lsrs	r2, r1, #8
    66fc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    66fe:	7119      	strb	r1, [r3, #4]
    6700:	2700      	movs	r7, #0
	crc = 0;
    6702:	2300      	movs	r3, #0
		value = *buf++;
    6704:	a904      	add	r1, sp, #16
    6706:	2208      	movs	r2, #8
				crc ^= 0x09;
    6708:	2409      	movs	r4, #9
    670a:	e011      	b.n	6730 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    670c:	0076      	lsls	r6, r6, #1
    670e:	b2f6      	uxtb	r6, r6
    6710:	3801      	subs	r0, #1
    6712:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    6714:	2800      	cmp	r0, #0
    6716:	d008      	beq.n	672a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    6718:	005b      	lsls	r3, r3, #1
    671a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    671c:	001d      	movs	r5, r3
    671e:	4075      	eors	r5, r6
    6720:	062d      	lsls	r5, r5, #24
    6722:	d5f3      	bpl.n	670c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    6724:	4063      	eors	r3, r4
    6726:	b2db      	uxtb	r3, r3
    6728:	e7f0      	b.n	670c <sd_mmc_spi_adtc_start+0x48>
    672a:	3701      	adds	r7, #1
	while (size--) {
    672c:	2f05      	cmp	r7, #5
    672e:	d002      	beq.n	6736 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    6730:	5c7e      	ldrb	r6, [r7, r1]
    6732:	0010      	movs	r0, r2
    6734:	e7f0      	b.n	6718 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    6736:	005b      	lsls	r3, r3, #1
    6738:	2201      	movs	r2, #1
    673a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    673c:	ac04      	add	r4, sp, #16
    673e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    6740:	4e3c      	ldr	r6, [pc, #240]	; (6834 <sd_mmc_spi_adtc_start+0x170>)
    6742:	2201      	movs	r2, #1
    6744:	210f      	movs	r1, #15
    6746:	ab02      	add	r3, sp, #8
    6748:	469c      	mov	ip, r3
    674a:	4461      	add	r1, ip
    674c:	0030      	movs	r0, r6
    674e:	4f3a      	ldr	r7, [pc, #232]	; (6838 <sd_mmc_spi_adtc_start+0x174>)
    6750:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    6752:	2206      	movs	r2, #6
    6754:	0021      	movs	r1, r4
    6756:	0030      	movs	r0, r6
    6758:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    675a:	ab02      	add	r3, sp, #8
    675c:	1dd9      	adds	r1, r3, #7
    675e:	23ff      	movs	r3, #255	; 0xff
    6760:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    6762:	2201      	movs	r2, #1
    6764:	0030      	movs	r0, r6
    6766:	4e35      	ldr	r6, [pc, #212]	; (683c <sd_mmc_spi_adtc_start+0x178>)
    6768:	47b0      	blx	r6
    676a:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    676c:	ab02      	add	r3, sp, #8
    676e:	1dde      	adds	r6, r3, #7
    6770:	4f30      	ldr	r7, [pc, #192]	; (6834 <sd_mmc_spi_adtc_start+0x170>)
    6772:	4d32      	ldr	r5, [pc, #200]	; (683c <sd_mmc_spi_adtc_start+0x178>)
    6774:	23ff      	movs	r3, #255	; 0xff
    6776:	2201      	movs	r2, #1
    6778:	0031      	movs	r1, r6
    677a:	0038      	movs	r0, r7
    677c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    677e:	7833      	ldrb	r3, [r6, #0]
    6780:	b25a      	sxtb	r2, r3
    6782:	2a00      	cmp	r2, #0
    6784:	da0b      	bge.n	679e <sd_mmc_spi_adtc_start+0xda>
    6786:	3c01      	subs	r4, #1
    6788:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    678a:	2c00      	cmp	r4, #0
    678c:	d1f2      	bne.n	6774 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    678e:	2202      	movs	r2, #2
    6790:	4b27      	ldr	r3, [pc, #156]	; (6830 <sd_mmc_spi_adtc_start+0x16c>)
    6792:	701a      	strb	r2, [r3, #0]
			return false;
    6794:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    6796:	b006      	add	sp, #24
    6798:	bc04      	pop	{r2}
    679a:	4690      	mov	r8, r2
    679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    679e:	4a28      	ldr	r2, [pc, #160]	; (6840 <sd_mmc_spi_adtc_start+0x17c>)
    67a0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    67a2:	071a      	lsls	r2, r3, #28
    67a4:	d41a      	bmi.n	67dc <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    67a6:	075a      	lsls	r2, r3, #29
    67a8:	d41d      	bmi.n	67e6 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    67aa:	2201      	movs	r2, #1
    67ac:	4393      	bics	r3, r2
    67ae:	d11f      	bne.n	67f0 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    67b0:	4643      	mov	r3, r8
    67b2:	049b      	lsls	r3, r3, #18
    67b4:	d420      	bmi.n	67f8 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    67b6:	4643      	mov	r3, r8
    67b8:	059b      	lsls	r3, r3, #22
    67ba:	d425      	bmi.n	6808 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    67bc:	4643      	mov	r3, r8
    67be:	055b      	lsls	r3, r3, #21
    67c0:	d42b      	bmi.n	681a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    67c2:	4b20      	ldr	r3, [pc, #128]	; (6844 <sd_mmc_spi_adtc_start+0x180>)
    67c4:	466a      	mov	r2, sp
    67c6:	8812      	ldrh	r2, [r2, #0]
    67c8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    67ca:	4b1f      	ldr	r3, [pc, #124]	; (6848 <sd_mmc_spi_adtc_start+0x184>)
    67cc:	466a      	mov	r2, sp
    67ce:	8892      	ldrh	r2, [r2, #4]
    67d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    67d2:	2200      	movs	r2, #0
    67d4:	4b1d      	ldr	r3, [pc, #116]	; (684c <sd_mmc_spi_adtc_start+0x188>)
    67d6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    67d8:	2001      	movs	r0, #1
    67da:	e7dc      	b.n	6796 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    67dc:	2206      	movs	r2, #6
    67de:	4b14      	ldr	r3, [pc, #80]	; (6830 <sd_mmc_spi_adtc_start+0x16c>)
    67e0:	701a      	strb	r2, [r3, #0]
		return false;
    67e2:	2000      	movs	r0, #0
    67e4:	e7d7      	b.n	6796 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    67e6:	2209      	movs	r2, #9
    67e8:	4b11      	ldr	r3, [pc, #68]	; (6830 <sd_mmc_spi_adtc_start+0x16c>)
    67ea:	701a      	strb	r2, [r3, #0]
		return false;
    67ec:	2000      	movs	r0, #0
    67ee:	e7d2      	b.n	6796 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    67f0:	4b0f      	ldr	r3, [pc, #60]	; (6830 <sd_mmc_spi_adtc_start+0x16c>)
    67f2:	701a      	strb	r2, [r3, #0]
		return false;
    67f4:	2000      	movs	r0, #0
    67f6:	e7ce      	b.n	6796 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    67f8:	4b15      	ldr	r3, [pc, #84]	; (6850 <sd_mmc_spi_adtc_start+0x18c>)
    67fa:	4798      	blx	r3
    67fc:	2800      	cmp	r0, #0
    67fe:	d1da      	bne.n	67b6 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    6800:	2203      	movs	r2, #3
    6802:	4b0b      	ldr	r3, [pc, #44]	; (6830 <sd_mmc_spi_adtc_start+0x16c>)
    6804:	701a      	strb	r2, [r3, #0]
			return false;
    6806:	e7c6      	b.n	6796 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    6808:	490d      	ldr	r1, [pc, #52]	; (6840 <sd_mmc_spi_adtc_start+0x17c>)
    680a:	2300      	movs	r3, #0
    680c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    680e:	33ff      	adds	r3, #255	; 0xff
    6810:	2201      	movs	r2, #1
    6812:	4808      	ldr	r0, [pc, #32]	; (6834 <sd_mmc_spi_adtc_start+0x170>)
    6814:	4e09      	ldr	r6, [pc, #36]	; (683c <sd_mmc_spi_adtc_start+0x178>)
    6816:	47b0      	blx	r6
    6818:	e7d0      	b.n	67bc <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    681a:	4e09      	ldr	r6, [pc, #36]	; (6840 <sd_mmc_spi_adtc_start+0x17c>)
    681c:	23ff      	movs	r3, #255	; 0xff
    681e:	2204      	movs	r2, #4
    6820:	0031      	movs	r1, r6
    6822:	4804      	ldr	r0, [pc, #16]	; (6834 <sd_mmc_spi_adtc_start+0x170>)
    6824:	4f05      	ldr	r7, [pc, #20]	; (683c <sd_mmc_spi_adtc_start+0x178>)
    6826:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    6828:	6833      	ldr	r3, [r6, #0]
    682a:	ba1b      	rev	r3, r3
    682c:	6033      	str	r3, [r6, #0]
    682e:	e7c8      	b.n	67c2 <sd_mmc_spi_adtc_start+0xfe>
    6830:	20000397 	.word	0x20000397
    6834:	20000384 	.word	0x20000384
    6838:	00005ef5 	.word	0x00005ef5
    683c:	00005ce9 	.word	0x00005ce9
    6840:	2000039c 	.word	0x2000039c
    6844:	20000390 	.word	0x20000390
    6848:	20000398 	.word	0x20000398
    684c:	200003a0 	.word	0x200003a0
    6850:	00006365 	.word	0x00006365

00006854 <sd_mmc_spi_send_cmd>:
{
    6854:	b510      	push	{r4, lr}
    6856:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    6858:	2300      	movs	r3, #0
    685a:	9300      	str	r3, [sp, #0]
    685c:	2200      	movs	r2, #0
    685e:	4c02      	ldr	r4, [pc, #8]	; (6868 <sd_mmc_spi_send_cmd+0x14>)
    6860:	47a0      	blx	r4
}
    6862:	b002      	add	sp, #8
    6864:	bd10      	pop	{r4, pc}
    6866:	46c0      	nop			; (mov r8, r8)
    6868:	000066c5 	.word	0x000066c5

0000686c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    686c:	4b01      	ldr	r3, [pc, #4]	; (6874 <sd_mmc_spi_get_response+0x8>)
    686e:	6818      	ldr	r0, [r3, #0]
}
    6870:	4770      	bx	lr
    6872:	46c0      	nop			; (mov r8, r8)
    6874:	2000039c 	.word	0x2000039c

00006878 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    6878:	b510      	push	{r4, lr}
    687a:	b084      	sub	sp, #16
    687c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    687e:	2200      	movs	r2, #0
    6880:	4b14      	ldr	r3, [pc, #80]	; (68d4 <sd_mmc_spi_read_word+0x5c>)
    6882:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    6884:	4b14      	ldr	r3, [pc, #80]	; (68d8 <sd_mmc_spi_read_word+0x60>)
    6886:	8819      	ldrh	r1, [r3, #0]
    6888:	4b14      	ldr	r3, [pc, #80]	; (68dc <sd_mmc_spi_read_word+0x64>)
    688a:	6818      	ldr	r0, [r3, #0]
    688c:	4b14      	ldr	r3, [pc, #80]	; (68e0 <sd_mmc_spi_read_word+0x68>)
    688e:	4798      	blx	r3
    6890:	2900      	cmp	r1, #0
    6892:	d103      	bne.n	689c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    6894:	4b13      	ldr	r3, [pc, #76]	; (68e4 <sd_mmc_spi_read_word+0x6c>)
    6896:	4798      	blx	r3
    6898:	2800      	cmp	r0, #0
    689a:	d010      	beq.n	68be <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    689c:	23ff      	movs	r3, #255	; 0xff
    689e:	2204      	movs	r2, #4
    68a0:	a901      	add	r1, sp, #4
    68a2:	4811      	ldr	r0, [pc, #68]	; (68e8 <sd_mmc_spi_read_word+0x70>)
    68a4:	4c11      	ldr	r4, [pc, #68]	; (68ec <sd_mmc_spi_read_word+0x74>)
    68a6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    68a8:	4b0c      	ldr	r3, [pc, #48]	; (68dc <sd_mmc_spi_read_word+0x64>)
    68aa:	681a      	ldr	r2, [r3, #0]
    68ac:	1d10      	adds	r0, r2, #4
    68ae:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    68b0:	4b09      	ldr	r3, [pc, #36]	; (68d8 <sd_mmc_spi_read_word+0x60>)
    68b2:	8819      	ldrh	r1, [r3, #0]
    68b4:	4b0a      	ldr	r3, [pc, #40]	; (68e0 <sd_mmc_spi_read_word+0x68>)
    68b6:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    68b8:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    68ba:	2900      	cmp	r1, #0
    68bc:	d001      	beq.n	68c2 <sd_mmc_spi_read_word+0x4a>
}
    68be:	b004      	add	sp, #16
    68c0:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    68c2:	23ff      	movs	r3, #255	; 0xff
    68c4:	2202      	movs	r2, #2
    68c6:	a903      	add	r1, sp, #12
    68c8:	4807      	ldr	r0, [pc, #28]	; (68e8 <sd_mmc_spi_read_word+0x70>)
    68ca:	4c08      	ldr	r4, [pc, #32]	; (68ec <sd_mmc_spi_read_word+0x74>)
    68cc:	47a0      	blx	r4
	return true;
    68ce:	2001      	movs	r0, #1
    68d0:	e7f5      	b.n	68be <sd_mmc_spi_read_word+0x46>
    68d2:	46c0      	nop			; (mov r8, r8)
    68d4:	20000397 	.word	0x20000397
    68d8:	20000390 	.word	0x20000390
    68dc:	200003a0 	.word	0x200003a0
    68e0:	000071a1 	.word	0x000071a1
    68e4:	00006441 	.word	0x00006441
    68e8:	20000384 	.word	0x20000384
    68ec:	00005ce9 	.word	0x00005ce9

000068f0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    68f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68f2:	46de      	mov	lr, fp
    68f4:	4657      	mov	r7, sl
    68f6:	4646      	mov	r6, r8
    68f8:	b5c0      	push	{r6, r7, lr}
    68fa:	b082      	sub	sp, #8
    68fc:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    68fe:	2200      	movs	r2, #0
    6900:	4b17      	ldr	r3, [pc, #92]	; (6960 <sd_mmc_spi_start_read_blocks+0x70>)
    6902:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    6904:	1e4c      	subs	r4, r1, #1
    6906:	b2a4      	uxth	r4, r4
    6908:	2900      	cmp	r1, #0
    690a:	d026      	beq.n	695a <sd_mmc_spi_start_read_blocks+0x6a>
    690c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    690e:	4b15      	ldr	r3, [pc, #84]	; (6964 <sd_mmc_spi_start_read_blocks+0x74>)
    6910:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    6912:	4f15      	ldr	r7, [pc, #84]	; (6968 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    6914:	47d0      	blx	sl
    6916:	4680      	mov	r8, r0
    6918:	2800      	cmp	r0, #0
    691a:	d017      	beq.n	694c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    691c:	883a      	ldrh	r2, [r7, #0]
    691e:	465b      	mov	r3, fp
    6920:	1999      	adds	r1, r3, r6
    6922:	23ff      	movs	r3, #255	; 0xff
    6924:	4811      	ldr	r0, [pc, #68]	; (696c <sd_mmc_spi_start_read_blocks+0x7c>)
    6926:	4d12      	ldr	r5, [pc, #72]	; (6970 <sd_mmc_spi_start_read_blocks+0x80>)
    6928:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    692a:	883b      	ldrh	r3, [r7, #0]
    692c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    692e:	4a11      	ldr	r2, [pc, #68]	; (6974 <sd_mmc_spi_start_read_blocks+0x84>)
    6930:	6811      	ldr	r1, [r2, #0]
    6932:	468c      	mov	ip, r1
    6934:	4463      	add	r3, ip
    6936:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    6938:	23ff      	movs	r3, #255	; 0xff
    693a:	2202      	movs	r2, #2
    693c:	a901      	add	r1, sp, #4
    693e:	480b      	ldr	r0, [pc, #44]	; (696c <sd_mmc_spi_start_read_blocks+0x7c>)
    6940:	47a8      	blx	r5
	while (nb_block--) {
    6942:	3c01      	subs	r4, #1
    6944:	b2a4      	uxth	r4, r4
    6946:	4b0c      	ldr	r3, [pc, #48]	; (6978 <sd_mmc_spi_start_read_blocks+0x88>)
    6948:	429c      	cmp	r4, r3
    694a:	d1e3      	bne.n	6914 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    694c:	4640      	mov	r0, r8
    694e:	b002      	add	sp, #8
    6950:	bc1c      	pop	{r2, r3, r4}
    6952:	4690      	mov	r8, r2
    6954:	469a      	mov	sl, r3
    6956:	46a3      	mov	fp, r4
    6958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    695a:	2301      	movs	r3, #1
    695c:	4698      	mov	r8, r3
    695e:	e7f5      	b.n	694c <sd_mmc_spi_start_read_blocks+0x5c>
    6960:	20000397 	.word	0x20000397
    6964:	00006441 	.word	0x00006441
    6968:	20000390 	.word	0x20000390
    696c:	20000384 	.word	0x20000384
    6970:	00005ce9 	.word	0x00005ce9
    6974:	200003a0 	.word	0x200003a0
    6978:	0000ffff 	.word	0x0000ffff

0000697c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    697c:	2001      	movs	r0, #1
    697e:	4770      	bx	lr

00006980 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    6980:	b5f0      	push	{r4, r5, r6, r7, lr}
    6982:	46c6      	mov	lr, r8
    6984:	b500      	push	{lr}
    6986:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6988:	2200      	movs	r2, #0
    698a:	4b15      	ldr	r3, [pc, #84]	; (69e0 <sd_mmc_spi_start_write_blocks+0x60>)
    698c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    698e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    6990:	4f14      	ldr	r7, [pc, #80]	; (69e4 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    6992:	4e15      	ldr	r6, [pc, #84]	; (69e8 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    6994:	e000      	b.n	6998 <sd_mmc_spi_start_write_blocks+0x18>
{
    6996:	0021      	movs	r1, r4
	while (nb_block--) {
    6998:	1e4c      	subs	r4, r1, #1
    699a:	b2a4      	uxth	r4, r4
    699c:	2900      	cmp	r1, #0
    699e:	d01b      	beq.n	69d8 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    69a0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    69a2:	8832      	ldrh	r2, [r6, #0]
    69a4:	4643      	mov	r3, r8
    69a6:	1959      	adds	r1, r3, r5
    69a8:	4810      	ldr	r0, [pc, #64]	; (69ec <sd_mmc_spi_start_write_blocks+0x6c>)
    69aa:	4b11      	ldr	r3, [pc, #68]	; (69f0 <sd_mmc_spi_start_write_blocks+0x70>)
    69ac:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    69ae:	8833      	ldrh	r3, [r6, #0]
    69b0:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    69b2:	4a10      	ldr	r2, [pc, #64]	; (69f4 <sd_mmc_spi_start_write_blocks+0x74>)
    69b4:	6811      	ldr	r1, [r2, #0]
    69b6:	468c      	mov	ip, r1
    69b8:	4463      	add	r3, ip
    69ba:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    69bc:	4b0e      	ldr	r3, [pc, #56]	; (69f8 <sd_mmc_spi_start_write_blocks+0x78>)
    69be:	4798      	blx	r3
    69c0:	2800      	cmp	r0, #0
    69c2:	d00a      	beq.n	69da <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    69c4:	2c00      	cmp	r4, #0
    69c6:	d0e6      	beq.n	6996 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    69c8:	4b0c      	ldr	r3, [pc, #48]	; (69fc <sd_mmc_spi_start_write_blocks+0x7c>)
    69ca:	4798      	blx	r3
    69cc:	2800      	cmp	r0, #0
    69ce:	d1e2      	bne.n	6996 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    69d0:	2205      	movs	r2, #5
    69d2:	4b03      	ldr	r3, [pc, #12]	; (69e0 <sd_mmc_spi_start_write_blocks+0x60>)
    69d4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    69d6:	e000      	b.n	69da <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    69d8:	2001      	movs	r0, #1
}
    69da:	bc04      	pop	{r2}
    69dc:	4690      	mov	r8, r2
    69de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69e0:	20000397 	.word	0x20000397
    69e4:	0000631d 	.word	0x0000631d
    69e8:	20000390 	.word	0x20000390
    69ec:	20000384 	.word	0x20000384
    69f0:	00005ef5 	.word	0x00005ef5
    69f4:	200003a0 	.word	0x200003a0
    69f8:	000064ad 	.word	0x000064ad
    69fc:	00006365 	.word	0x00006365

00006a00 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    6a00:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    6a02:	4b05      	ldr	r3, [pc, #20]	; (6a18 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    6a04:	4798      	blx	r3
    6a06:	2800      	cmp	r0, #0
    6a08:	d103      	bne.n	6a12 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    6a0a:	2205      	movs	r2, #5
    6a0c:	4b03      	ldr	r3, [pc, #12]	; (6a1c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    6a0e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    6a10:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    6a12:	4b03      	ldr	r3, [pc, #12]	; (6a20 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    6a14:	4798      	blx	r3
    6a16:	e7fb      	b.n	6a10 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    6a18:	00006365 	.word	0x00006365
    6a1c:	20000397 	.word	0x20000397
    6a20:	000063c9 	.word	0x000063c9

00006a24 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    6a24:	2001      	movs	r0, #1
    6a26:	4770      	bx	lr

00006a28 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    6a28:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6a2a:	2301      	movs	r3, #1
    6a2c:	2800      	cmp	r0, #0
    6a2e:	d001      	beq.n	6a34 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6a30:	0018      	movs	r0, r3
    6a32:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6a34:	4b01      	ldr	r3, [pc, #4]	; (6a3c <mem_test_unit_ready+0x14>)
    6a36:	4798      	blx	r3
    6a38:	0003      	movs	r3, r0
    6a3a:	e7f9      	b.n	6a30 <mem_test_unit_ready+0x8>
    6a3c:	0000614d 	.word	0x0000614d

00006a40 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    6a40:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6a42:	2301      	movs	r3, #1
    6a44:	2800      	cmp	r0, #0
    6a46:	d001      	beq.n	6a4c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6a48:	0018      	movs	r0, r3
    6a4a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6a4c:	0008      	movs	r0, r1
    6a4e:	4b02      	ldr	r3, [pc, #8]	; (6a58 <mem_read_capacity+0x18>)
    6a50:	4798      	blx	r3
    6a52:	0003      	movs	r3, r0
    6a54:	e7f8      	b.n	6a48 <mem_read_capacity+0x8>
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	0000617d 	.word	0x0000617d

00006a5c <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    6a5c:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    6a5e:	2000      	movs	r0, #0
    6a60:	2b00      	cmp	r3, #0
    6a62:	d101      	bne.n	6a68 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    6a64:	3001      	adds	r0, #1
    6a66:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    6a68:	4770      	bx	lr
	...

00006a6c <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    6a6c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    6a6e:	2301      	movs	r3, #1
    6a70:	2800      	cmp	r0, #0
    6a72:	d001      	beq.n	6a78 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    6a74:	0018      	movs	r0, r3
    6a76:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    6a78:	4b01      	ldr	r3, [pc, #4]	; (6a80 <mem_wr_protect+0x14>)
    6a7a:	4798      	blx	r3
    6a7c:	0003      	movs	r3, r0
    6a7e:	e7f9      	b.n	6a74 <mem_wr_protect+0x8>
    6a80:	0000618d 	.word	0x0000618d

00006a84 <mem_removal>:


bool mem_removal(U8 lun)
{
    6a84:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    6a86:	2301      	movs	r3, #1
    6a88:	2800      	cmp	r0, #0
    6a8a:	d001      	beq.n	6a90 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    6a8c:	0018      	movs	r0, r3
    6a8e:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    6a90:	4b01      	ldr	r3, [pc, #4]	; (6a98 <mem_removal+0x14>)
    6a92:	4798      	blx	r3
    6a94:	0003      	movs	r3, r0
    6a96:	e7f9      	b.n	6a8c <mem_removal+0x8>
    6a98:	0000619d 	.word	0x0000619d

00006a9c <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6a9c:	2800      	cmp	r0, #0
    6a9e:	d101      	bne.n	6aa4 <mem_name+0x8>
    6aa0:	4801      	ldr	r0, [pc, #4]	; (6aa8 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    6aa2:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6aa4:	2000      	movs	r0, #0
    6aa6:	e7fc      	b.n	6aa2 <mem_name+0x6>
    6aa8:	00008d8c 	.word	0x00008d8c

00006aac <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    6aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aae:	0005      	movs	r5, r0
    6ab0:	000e      	movs	r6, r1
    6ab2:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    6ab4:	4b07      	ldr	r3, [pc, #28]	; (6ad4 <memory_2_usb+0x28>)
    6ab6:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    6ab8:	2401      	movs	r4, #1
    6aba:	2d00      	cmp	r5, #0
    6abc:	d003      	beq.n	6ac6 <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    6abe:	4b06      	ldr	r3, [pc, #24]	; (6ad8 <memory_2_usb+0x2c>)
    6ac0:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    6ac2:	0020      	movs	r0, r4
    6ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    6ac6:	0039      	movs	r1, r7
    6ac8:	0030      	movs	r0, r6
    6aca:	4b04      	ldr	r3, [pc, #16]	; (6adc <memory_2_usb+0x30>)
    6acc:	4798      	blx	r3
    6ace:	0004      	movs	r4, r0
    6ad0:	e7f5      	b.n	6abe <memory_2_usb+0x12>
    6ad2:	46c0      	nop			; (mov r8, r8)
    6ad4:	00004635 	.word	0x00004635
    6ad8:	00004637 	.word	0x00004637
    6adc:	00006251 	.word	0x00006251

00006ae0 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    6ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ae2:	0005      	movs	r5, r0
    6ae4:	000e      	movs	r6, r1
    6ae6:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    6ae8:	4b07      	ldr	r3, [pc, #28]	; (6b08 <usb_2_memory+0x28>)
    6aea:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    6aec:	2401      	movs	r4, #1
    6aee:	2d00      	cmp	r5, #0
    6af0:	d003      	beq.n	6afa <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    6af2:	4b06      	ldr	r3, [pc, #24]	; (6b0c <usb_2_memory+0x2c>)
    6af4:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    6af6:	0020      	movs	r0, r4
    6af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    6afa:	0039      	movs	r1, r7
    6afc:	0030      	movs	r0, r6
    6afe:	4b04      	ldr	r3, [pc, #16]	; (6b10 <usb_2_memory+0x30>)
    6b00:	4798      	blx	r3
    6b02:	0004      	movs	r4, r0
    6b04:	e7f5      	b.n	6af2 <usb_2_memory+0x12>
    6b06:	46c0      	nop			; (mov r8, r8)
    6b08:	00004639 	.word	0x00004639
    6b0c:	0000463b 	.word	0x0000463b
    6b10:	00006309 	.word	0x00006309

00006b14 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6b14:	4b0c      	ldr	r3, [pc, #48]	; (6b48 <cpu_irq_enter_critical+0x34>)
    6b16:	681b      	ldr	r3, [r3, #0]
    6b18:	2b00      	cmp	r3, #0
    6b1a:	d106      	bne.n	6b2a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6b1c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6b20:	2b00      	cmp	r3, #0
    6b22:	d007      	beq.n	6b34 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6b24:	2200      	movs	r2, #0
    6b26:	4b09      	ldr	r3, [pc, #36]	; (6b4c <cpu_irq_enter_critical+0x38>)
    6b28:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6b2a:	4a07      	ldr	r2, [pc, #28]	; (6b48 <cpu_irq_enter_critical+0x34>)
    6b2c:	6813      	ldr	r3, [r2, #0]
    6b2e:	3301      	adds	r3, #1
    6b30:	6013      	str	r3, [r2, #0]
}
    6b32:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6b34:	b672      	cpsid	i
    6b36:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6b3a:	2200      	movs	r2, #0
    6b3c:	4b04      	ldr	r3, [pc, #16]	; (6b50 <cpu_irq_enter_critical+0x3c>)
    6b3e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6b40:	3201      	adds	r2, #1
    6b42:	4b02      	ldr	r3, [pc, #8]	; (6b4c <cpu_irq_enter_critical+0x38>)
    6b44:	701a      	strb	r2, [r3, #0]
    6b46:	e7f0      	b.n	6b2a <cpu_irq_enter_critical+0x16>
    6b48:	200003a8 	.word	0x200003a8
    6b4c:	200003ac 	.word	0x200003ac
    6b50:	200000f9 	.word	0x200000f9

00006b54 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6b54:	4b08      	ldr	r3, [pc, #32]	; (6b78 <cpu_irq_leave_critical+0x24>)
    6b56:	681a      	ldr	r2, [r3, #0]
    6b58:	3a01      	subs	r2, #1
    6b5a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6b5c:	681b      	ldr	r3, [r3, #0]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d109      	bne.n	6b76 <cpu_irq_leave_critical+0x22>
    6b62:	4b06      	ldr	r3, [pc, #24]	; (6b7c <cpu_irq_leave_critical+0x28>)
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	2b00      	cmp	r3, #0
    6b68:	d005      	beq.n	6b76 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    6b6a:	2201      	movs	r2, #1
    6b6c:	4b04      	ldr	r3, [pc, #16]	; (6b80 <cpu_irq_leave_critical+0x2c>)
    6b6e:	701a      	strb	r2, [r3, #0]
    6b70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6b74:	b662      	cpsie	i
	}
}
    6b76:	4770      	bx	lr
    6b78:	200003a8 	.word	0x200003a8
    6b7c:	200003ac 	.word	0x200003ac
    6b80:	200000f9 	.word	0x200000f9

00006b84 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b86:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6b88:	ac01      	add	r4, sp, #4
    6b8a:	2501      	movs	r5, #1
    6b8c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6b8e:	2700      	movs	r7, #0
    6b90:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6b92:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6b94:	0021      	movs	r1, r4
    6b96:	203e      	movs	r0, #62	; 0x3e
    6b98:	4e06      	ldr	r6, [pc, #24]	; (6bb4 <system_board_init+0x30>)
    6b9a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6b9c:	2280      	movs	r2, #128	; 0x80
    6b9e:	05d2      	lsls	r2, r2, #23
    6ba0:	4b05      	ldr	r3, [pc, #20]	; (6bb8 <system_board_init+0x34>)
    6ba2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6ba4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6ba6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6ba8:	0021      	movs	r1, r4
    6baa:	200f      	movs	r0, #15
    6bac:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    6bae:	b003      	add	sp, #12
    6bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bb2:	46c0      	nop			; (mov r8, r8)
    6bb4:	00006bbd 	.word	0x00006bbd
    6bb8:	41004480 	.word	0x41004480

00006bbc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6bbc:	b500      	push	{lr}
    6bbe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6bc0:	ab01      	add	r3, sp, #4
    6bc2:	2280      	movs	r2, #128	; 0x80
    6bc4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6bc6:	780a      	ldrb	r2, [r1, #0]
    6bc8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6bca:	784a      	ldrb	r2, [r1, #1]
    6bcc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6bce:	788a      	ldrb	r2, [r1, #2]
    6bd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6bd2:	0019      	movs	r1, r3
    6bd4:	4b01      	ldr	r3, [pc, #4]	; (6bdc <port_pin_set_config+0x20>)
    6bd6:	4798      	blx	r3
}
    6bd8:	b003      	add	sp, #12
    6bda:	bd00      	pop	{pc}
    6bdc:	00006f11 	.word	0x00006f11

00006be0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    6be0:	4a06      	ldr	r2, [pc, #24]	; (6bfc <system_gclk_init+0x1c>)
    6be2:	6993      	ldr	r3, [r2, #24]
    6be4:	2108      	movs	r1, #8
    6be6:	430b      	orrs	r3, r1
    6be8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6bea:	2201      	movs	r2, #1
    6bec:	4b04      	ldr	r3, [pc, #16]	; (6c00 <system_gclk_init+0x20>)
    6bee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6bf0:	0019      	movs	r1, r3
    6bf2:	780b      	ldrb	r3, [r1, #0]
    6bf4:	4213      	tst	r3, r2
    6bf6:	d1fc      	bne.n	6bf2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    6bf8:	4770      	bx	lr
    6bfa:	46c0      	nop			; (mov r8, r8)
    6bfc:	40000400 	.word	0x40000400
    6c00:	40000c00 	.word	0x40000c00

00006c04 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6c04:	b570      	push	{r4, r5, r6, lr}
    6c06:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6c08:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6c0a:	780d      	ldrb	r5, [r1, #0]
    6c0c:	022d      	lsls	r5, r5, #8
    6c0e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6c10:	784b      	ldrb	r3, [r1, #1]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d002      	beq.n	6c1c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6c16:	2380      	movs	r3, #128	; 0x80
    6c18:	02db      	lsls	r3, r3, #11
    6c1a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6c1c:	7a4b      	ldrb	r3, [r1, #9]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d002      	beq.n	6c28 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6c22:	2380      	movs	r3, #128	; 0x80
    6c24:	031b      	lsls	r3, r3, #12
    6c26:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6c28:	6848      	ldr	r0, [r1, #4]
    6c2a:	2801      	cmp	r0, #1
    6c2c:	d910      	bls.n	6c50 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6c2e:	1e43      	subs	r3, r0, #1
    6c30:	4218      	tst	r0, r3
    6c32:	d134      	bne.n	6c9e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6c34:	2802      	cmp	r0, #2
    6c36:	d930      	bls.n	6c9a <system_gclk_gen_set_config+0x96>
    6c38:	2302      	movs	r3, #2
    6c3a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6c3c:	3201      	adds	r2, #1
						mask <<= 1) {
    6c3e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6c40:	4298      	cmp	r0, r3
    6c42:	d8fb      	bhi.n	6c3c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6c44:	0212      	lsls	r2, r2, #8
    6c46:	4332      	orrs	r2, r6
    6c48:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6c4a:	2380      	movs	r3, #128	; 0x80
    6c4c:	035b      	lsls	r3, r3, #13
    6c4e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6c50:	7a0b      	ldrb	r3, [r1, #8]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d002      	beq.n	6c5c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6c56:	2380      	movs	r3, #128	; 0x80
    6c58:	039b      	lsls	r3, r3, #14
    6c5a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6c5c:	4a13      	ldr	r2, [pc, #76]	; (6cac <system_gclk_gen_set_config+0xa8>)
    6c5e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    6c60:	b25b      	sxtb	r3, r3
    6c62:	2b00      	cmp	r3, #0
    6c64:	dbfb      	blt.n	6c5e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    6c66:	4b12      	ldr	r3, [pc, #72]	; (6cb0 <system_gclk_gen_set_config+0xac>)
    6c68:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6c6a:	4b12      	ldr	r3, [pc, #72]	; (6cb4 <system_gclk_gen_set_config+0xb0>)
    6c6c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6c6e:	4a0f      	ldr	r2, [pc, #60]	; (6cac <system_gclk_gen_set_config+0xa8>)
    6c70:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6c72:	b25b      	sxtb	r3, r3
    6c74:	2b00      	cmp	r3, #0
    6c76:	dbfb      	blt.n	6c70 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6c78:	4b0c      	ldr	r3, [pc, #48]	; (6cac <system_gclk_gen_set_config+0xa8>)
    6c7a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6c7c:	001a      	movs	r2, r3
    6c7e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    6c80:	b25b      	sxtb	r3, r3
    6c82:	2b00      	cmp	r3, #0
    6c84:	dbfb      	blt.n	6c7e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6c86:	4a09      	ldr	r2, [pc, #36]	; (6cac <system_gclk_gen_set_config+0xa8>)
    6c88:	6853      	ldr	r3, [r2, #4]
    6c8a:	2180      	movs	r1, #128	; 0x80
    6c8c:	0249      	lsls	r1, r1, #9
    6c8e:	400b      	ands	r3, r1
    6c90:	431d      	orrs	r5, r3
    6c92:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6c94:	4b08      	ldr	r3, [pc, #32]	; (6cb8 <system_gclk_gen_set_config+0xb4>)
    6c96:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6c98:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6c9a:	2200      	movs	r2, #0
    6c9c:	e7d2      	b.n	6c44 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6c9e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    6ca0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6ca2:	2380      	movs	r3, #128	; 0x80
    6ca4:	029b      	lsls	r3, r3, #10
    6ca6:	431d      	orrs	r5, r3
    6ca8:	e7d2      	b.n	6c50 <system_gclk_gen_set_config+0x4c>
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	40000c00 	.word	0x40000c00
    6cb0:	00006b15 	.word	0x00006b15
    6cb4:	40000c08 	.word	0x40000c08
    6cb8:	00006b55 	.word	0x00006b55

00006cbc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6cbc:	b510      	push	{r4, lr}
    6cbe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6cc0:	4a0b      	ldr	r2, [pc, #44]	; (6cf0 <system_gclk_gen_enable+0x34>)
    6cc2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6cc4:	b25b      	sxtb	r3, r3
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	dbfb      	blt.n	6cc2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    6cca:	4b0a      	ldr	r3, [pc, #40]	; (6cf4 <system_gclk_gen_enable+0x38>)
    6ccc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6cce:	4b0a      	ldr	r3, [pc, #40]	; (6cf8 <system_gclk_gen_enable+0x3c>)
    6cd0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6cd2:	4a07      	ldr	r2, [pc, #28]	; (6cf0 <system_gclk_gen_enable+0x34>)
    6cd4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6cd6:	b25b      	sxtb	r3, r3
    6cd8:	2b00      	cmp	r3, #0
    6cda:	dbfb      	blt.n	6cd4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6cdc:	4a04      	ldr	r2, [pc, #16]	; (6cf0 <system_gclk_gen_enable+0x34>)
    6cde:	6851      	ldr	r1, [r2, #4]
    6ce0:	2380      	movs	r3, #128	; 0x80
    6ce2:	025b      	lsls	r3, r3, #9
    6ce4:	430b      	orrs	r3, r1
    6ce6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    6ce8:	4b04      	ldr	r3, [pc, #16]	; (6cfc <system_gclk_gen_enable+0x40>)
    6cea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6cec:	bd10      	pop	{r4, pc}
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	40000c00 	.word	0x40000c00
    6cf4:	00006b15 	.word	0x00006b15
    6cf8:	40000c04 	.word	0x40000c04
    6cfc:	00006b55 	.word	0x00006b55

00006d00 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6d00:	b570      	push	{r4, r5, r6, lr}
    6d02:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d04:	4a1a      	ldr	r2, [pc, #104]	; (6d70 <system_gclk_gen_get_hz+0x70>)
    6d06:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6d08:	b25b      	sxtb	r3, r3
    6d0a:	2b00      	cmp	r3, #0
    6d0c:	dbfb      	blt.n	6d06 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    6d0e:	4b19      	ldr	r3, [pc, #100]	; (6d74 <system_gclk_gen_get_hz+0x74>)
    6d10:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6d12:	4b19      	ldr	r3, [pc, #100]	; (6d78 <system_gclk_gen_get_hz+0x78>)
    6d14:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d16:	4a16      	ldr	r2, [pc, #88]	; (6d70 <system_gclk_gen_get_hz+0x70>)
    6d18:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6d1a:	b25b      	sxtb	r3, r3
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	dbfb      	blt.n	6d18 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6d20:	4e13      	ldr	r6, [pc, #76]	; (6d70 <system_gclk_gen_get_hz+0x70>)
    6d22:	6870      	ldr	r0, [r6, #4]
    6d24:	04c0      	lsls	r0, r0, #19
    6d26:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6d28:	4b14      	ldr	r3, [pc, #80]	; (6d7c <system_gclk_gen_get_hz+0x7c>)
    6d2a:	4798      	blx	r3
    6d2c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6d2e:	4b12      	ldr	r3, [pc, #72]	; (6d78 <system_gclk_gen_get_hz+0x78>)
    6d30:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6d32:	6876      	ldr	r6, [r6, #4]
    6d34:	02f6      	lsls	r6, r6, #11
    6d36:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6d38:	4b11      	ldr	r3, [pc, #68]	; (6d80 <system_gclk_gen_get_hz+0x80>)
    6d3a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6d3c:	4a0c      	ldr	r2, [pc, #48]	; (6d70 <system_gclk_gen_get_hz+0x70>)
    6d3e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6d40:	b25b      	sxtb	r3, r3
    6d42:	2b00      	cmp	r3, #0
    6d44:	dbfb      	blt.n	6d3e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6d46:	4b0a      	ldr	r3, [pc, #40]	; (6d70 <system_gclk_gen_get_hz+0x70>)
    6d48:	689c      	ldr	r4, [r3, #8]
    6d4a:	0224      	lsls	r4, r4, #8
    6d4c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6d4e:	4b0d      	ldr	r3, [pc, #52]	; (6d84 <system_gclk_gen_get_hz+0x84>)
    6d50:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6d52:	2e00      	cmp	r6, #0
    6d54:	d107      	bne.n	6d66 <system_gclk_gen_get_hz+0x66>
    6d56:	2c01      	cmp	r4, #1
    6d58:	d907      	bls.n	6d6a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    6d5a:	0021      	movs	r1, r4
    6d5c:	0028      	movs	r0, r5
    6d5e:	4b0a      	ldr	r3, [pc, #40]	; (6d88 <system_gclk_gen_get_hz+0x88>)
    6d60:	4798      	blx	r3
    6d62:	0005      	movs	r5, r0
    6d64:	e001      	b.n	6d6a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6d66:	3401      	adds	r4, #1
    6d68:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    6d6a:	0028      	movs	r0, r5
    6d6c:	bd70      	pop	{r4, r5, r6, pc}
    6d6e:	46c0      	nop			; (mov r8, r8)
    6d70:	40000c00 	.word	0x40000c00
    6d74:	00006b15 	.word	0x00006b15
    6d78:	40000c04 	.word	0x40000c04
    6d7c:	00002d9d 	.word	0x00002d9d
    6d80:	40000c08 	.word	0x40000c08
    6d84:	00006b55 	.word	0x00006b55
    6d88:	00007095 	.word	0x00007095

00006d8c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6d8c:	b510      	push	{r4, lr}
    6d8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6d90:	4b06      	ldr	r3, [pc, #24]	; (6dac <system_gclk_chan_enable+0x20>)
    6d92:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6d94:	4b06      	ldr	r3, [pc, #24]	; (6db0 <system_gclk_chan_enable+0x24>)
    6d96:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6d98:	4a06      	ldr	r2, [pc, #24]	; (6db4 <system_gclk_chan_enable+0x28>)
    6d9a:	8853      	ldrh	r3, [r2, #2]
    6d9c:	2180      	movs	r1, #128	; 0x80
    6d9e:	01c9      	lsls	r1, r1, #7
    6da0:	430b      	orrs	r3, r1
    6da2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6da4:	4b04      	ldr	r3, [pc, #16]	; (6db8 <system_gclk_chan_enable+0x2c>)
    6da6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6da8:	bd10      	pop	{r4, pc}
    6daa:	46c0      	nop			; (mov r8, r8)
    6dac:	00006b15 	.word	0x00006b15
    6db0:	40000c02 	.word	0x40000c02
    6db4:	40000c00 	.word	0x40000c00
    6db8:	00006b55 	.word	0x00006b55

00006dbc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6dbc:	b510      	push	{r4, lr}
    6dbe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6dc0:	4b0f      	ldr	r3, [pc, #60]	; (6e00 <system_gclk_chan_disable+0x44>)
    6dc2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6dc4:	4b0f      	ldr	r3, [pc, #60]	; (6e04 <system_gclk_chan_disable+0x48>)
    6dc6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6dc8:	4a0f      	ldr	r2, [pc, #60]	; (6e08 <system_gclk_chan_disable+0x4c>)
    6dca:	8853      	ldrh	r3, [r2, #2]
    6dcc:	051b      	lsls	r3, r3, #20
    6dce:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    6dd0:	8853      	ldrh	r3, [r2, #2]
    6dd2:	490e      	ldr	r1, [pc, #56]	; (6e0c <system_gclk_chan_disable+0x50>)
    6dd4:	400b      	ands	r3, r1
    6dd6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6dd8:	8853      	ldrh	r3, [r2, #2]
    6dda:	490d      	ldr	r1, [pc, #52]	; (6e10 <system_gclk_chan_disable+0x54>)
    6ddc:	400b      	ands	r3, r1
    6dde:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6de0:	0011      	movs	r1, r2
    6de2:	2280      	movs	r2, #128	; 0x80
    6de4:	01d2      	lsls	r2, r2, #7
    6de6:	884b      	ldrh	r3, [r1, #2]
    6de8:	4213      	tst	r3, r2
    6dea:	d1fc      	bne.n	6de6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6dec:	4906      	ldr	r1, [pc, #24]	; (6e08 <system_gclk_chan_disable+0x4c>)
    6dee:	884a      	ldrh	r2, [r1, #2]
    6df0:	0203      	lsls	r3, r0, #8
    6df2:	4806      	ldr	r0, [pc, #24]	; (6e0c <system_gclk_chan_disable+0x50>)
    6df4:	4002      	ands	r2, r0
    6df6:	4313      	orrs	r3, r2
    6df8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    6dfa:	4b06      	ldr	r3, [pc, #24]	; (6e14 <system_gclk_chan_disable+0x58>)
    6dfc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6dfe:	bd10      	pop	{r4, pc}
    6e00:	00006b15 	.word	0x00006b15
    6e04:	40000c02 	.word	0x40000c02
    6e08:	40000c00 	.word	0x40000c00
    6e0c:	fffff0ff 	.word	0xfffff0ff
    6e10:	ffffbfff 	.word	0xffffbfff
    6e14:	00006b55 	.word	0x00006b55

00006e18 <system_gclk_chan_set_config>:
{
    6e18:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6e1a:	780c      	ldrb	r4, [r1, #0]
    6e1c:	0224      	lsls	r4, r4, #8
    6e1e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    6e20:	4b02      	ldr	r3, [pc, #8]	; (6e2c <system_gclk_chan_set_config+0x14>)
    6e22:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6e24:	b2a4      	uxth	r4, r4
    6e26:	4b02      	ldr	r3, [pc, #8]	; (6e30 <system_gclk_chan_set_config+0x18>)
    6e28:	805c      	strh	r4, [r3, #2]
}
    6e2a:	bd10      	pop	{r4, pc}
    6e2c:	00006dbd 	.word	0x00006dbd
    6e30:	40000c00 	.word	0x40000c00

00006e34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6e34:	b510      	push	{r4, lr}
    6e36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6e38:	4b06      	ldr	r3, [pc, #24]	; (6e54 <system_gclk_chan_get_hz+0x20>)
    6e3a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6e3c:	4b06      	ldr	r3, [pc, #24]	; (6e58 <system_gclk_chan_get_hz+0x24>)
    6e3e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6e40:	4b06      	ldr	r3, [pc, #24]	; (6e5c <system_gclk_chan_get_hz+0x28>)
    6e42:	885c      	ldrh	r4, [r3, #2]
    6e44:	0524      	lsls	r4, r4, #20
    6e46:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6e48:	4b05      	ldr	r3, [pc, #20]	; (6e60 <system_gclk_chan_get_hz+0x2c>)
    6e4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6e4c:	0020      	movs	r0, r4
    6e4e:	4b05      	ldr	r3, [pc, #20]	; (6e64 <system_gclk_chan_get_hz+0x30>)
    6e50:	4798      	blx	r3
}
    6e52:	bd10      	pop	{r4, pc}
    6e54:	00006b15 	.word	0x00006b15
    6e58:	40000c02 	.word	0x40000c02
    6e5c:	40000c00 	.word	0x40000c00
    6e60:	00006b55 	.word	0x00006b55
    6e64:	00006d01 	.word	0x00006d01

00006e68 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6e68:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6e6a:	78d3      	ldrb	r3, [r2, #3]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d135      	bne.n	6edc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6e70:	7813      	ldrb	r3, [r2, #0]
    6e72:	2b80      	cmp	r3, #128	; 0x80
    6e74:	d029      	beq.n	6eca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6e76:	061b      	lsls	r3, r3, #24
    6e78:	2480      	movs	r4, #128	; 0x80
    6e7a:	0264      	lsls	r4, r4, #9
    6e7c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6e7e:	7854      	ldrb	r4, [r2, #1]
    6e80:	2502      	movs	r5, #2
    6e82:	43ac      	bics	r4, r5
    6e84:	d106      	bne.n	6e94 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6e86:	7894      	ldrb	r4, [r2, #2]
    6e88:	2c00      	cmp	r4, #0
    6e8a:	d120      	bne.n	6ece <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6e8c:	2480      	movs	r4, #128	; 0x80
    6e8e:	02a4      	lsls	r4, r4, #10
    6e90:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6e92:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6e94:	7854      	ldrb	r4, [r2, #1]
    6e96:	3c01      	subs	r4, #1
    6e98:	2c01      	cmp	r4, #1
    6e9a:	d91c      	bls.n	6ed6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6e9c:	040d      	lsls	r5, r1, #16
    6e9e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6ea0:	24a0      	movs	r4, #160	; 0xa0
    6ea2:	05e4      	lsls	r4, r4, #23
    6ea4:	432c      	orrs	r4, r5
    6ea6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6ea8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6eaa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6eac:	24d0      	movs	r4, #208	; 0xd0
    6eae:	0624      	lsls	r4, r4, #24
    6eb0:	432c      	orrs	r4, r5
    6eb2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6eb4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6eb6:	78d4      	ldrb	r4, [r2, #3]
    6eb8:	2c00      	cmp	r4, #0
    6eba:	d122      	bne.n	6f02 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6ebc:	035b      	lsls	r3, r3, #13
    6ebe:	d51c      	bpl.n	6efa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6ec0:	7893      	ldrb	r3, [r2, #2]
    6ec2:	2b01      	cmp	r3, #1
    6ec4:	d01e      	beq.n	6f04 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6ec6:	6141      	str	r1, [r0, #20]
    6ec8:	e017      	b.n	6efa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6eca:	2300      	movs	r3, #0
    6ecc:	e7d7      	b.n	6e7e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6ece:	24c0      	movs	r4, #192	; 0xc0
    6ed0:	02e4      	lsls	r4, r4, #11
    6ed2:	4323      	orrs	r3, r4
    6ed4:	e7dd      	b.n	6e92 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6ed6:	4c0d      	ldr	r4, [pc, #52]	; (6f0c <_system_pinmux_config+0xa4>)
    6ed8:	4023      	ands	r3, r4
    6eda:	e7df      	b.n	6e9c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6edc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6ede:	040c      	lsls	r4, r1, #16
    6ee0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6ee2:	23a0      	movs	r3, #160	; 0xa0
    6ee4:	05db      	lsls	r3, r3, #23
    6ee6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6ee8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6eea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6eec:	23d0      	movs	r3, #208	; 0xd0
    6eee:	061b      	lsls	r3, r3, #24
    6ef0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6ef2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6ef4:	78d3      	ldrb	r3, [r2, #3]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d103      	bne.n	6f02 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6efa:	7853      	ldrb	r3, [r2, #1]
    6efc:	3b01      	subs	r3, #1
    6efe:	2b01      	cmp	r3, #1
    6f00:	d902      	bls.n	6f08 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6f02:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6f04:	6181      	str	r1, [r0, #24]
    6f06:	e7f8      	b.n	6efa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6f08:	6081      	str	r1, [r0, #8]
}
    6f0a:	e7fa      	b.n	6f02 <_system_pinmux_config+0x9a>
    6f0c:	fffbffff 	.word	0xfffbffff

00006f10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6f10:	b510      	push	{r4, lr}
    6f12:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6f14:	09c1      	lsrs	r1, r0, #7
		return NULL;
    6f16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6f18:	2900      	cmp	r1, #0
    6f1a:	d104      	bne.n	6f26 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6f1c:	0943      	lsrs	r3, r0, #5
    6f1e:	01db      	lsls	r3, r3, #7
    6f20:	4905      	ldr	r1, [pc, #20]	; (6f38 <system_pinmux_pin_set_config+0x28>)
    6f22:	468c      	mov	ip, r1
    6f24:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6f26:	241f      	movs	r4, #31
    6f28:	4020      	ands	r0, r4
    6f2a:	2101      	movs	r1, #1
    6f2c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6f2e:	0018      	movs	r0, r3
    6f30:	4b02      	ldr	r3, [pc, #8]	; (6f3c <system_pinmux_pin_set_config+0x2c>)
    6f32:	4798      	blx	r3
}
    6f34:	bd10      	pop	{r4, pc}
    6f36:	46c0      	nop			; (mov r8, r8)
    6f38:	41004400 	.word	0x41004400
    6f3c:	00006e69 	.word	0x00006e69

00006f40 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6f40:	4770      	bx	lr
	...

00006f44 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6f44:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6f46:	4b05      	ldr	r3, [pc, #20]	; (6f5c <system_init+0x18>)
    6f48:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6f4a:	4b05      	ldr	r3, [pc, #20]	; (6f60 <system_init+0x1c>)
    6f4c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6f4e:	4b05      	ldr	r3, [pc, #20]	; (6f64 <system_init+0x20>)
    6f50:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6f52:	4b05      	ldr	r3, [pc, #20]	; (6f68 <system_init+0x24>)
    6f54:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6f56:	4b05      	ldr	r3, [pc, #20]	; (6f6c <system_init+0x28>)
    6f58:	4798      	blx	r3
}
    6f5a:	bd10      	pop	{r4, pc}
    6f5c:	00003019 	.word	0x00003019
    6f60:	00006b85 	.word	0x00006b85
    6f64:	00006f41 	.word	0x00006f41
    6f68:	0000232d 	.word	0x0000232d
    6f6c:	00006f41 	.word	0x00006f41

00006f70 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6f70:	e7fe      	b.n	6f70 <Dummy_Handler>
	...

00006f74 <Reset_Handler>:
{
    6f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6f76:	4a2a      	ldr	r2, [pc, #168]	; (7020 <Reset_Handler+0xac>)
    6f78:	4b2a      	ldr	r3, [pc, #168]	; (7024 <Reset_Handler+0xb0>)
    6f7a:	429a      	cmp	r2, r3
    6f7c:	d011      	beq.n	6fa2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6f7e:	001a      	movs	r2, r3
    6f80:	4b29      	ldr	r3, [pc, #164]	; (7028 <Reset_Handler+0xb4>)
    6f82:	429a      	cmp	r2, r3
    6f84:	d20d      	bcs.n	6fa2 <Reset_Handler+0x2e>
    6f86:	4a29      	ldr	r2, [pc, #164]	; (702c <Reset_Handler+0xb8>)
    6f88:	3303      	adds	r3, #3
    6f8a:	1a9b      	subs	r3, r3, r2
    6f8c:	089b      	lsrs	r3, r3, #2
    6f8e:	3301      	adds	r3, #1
    6f90:	009b      	lsls	r3, r3, #2
    6f92:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6f94:	4823      	ldr	r0, [pc, #140]	; (7024 <Reset_Handler+0xb0>)
    6f96:	4922      	ldr	r1, [pc, #136]	; (7020 <Reset_Handler+0xac>)
    6f98:	588c      	ldr	r4, [r1, r2]
    6f9a:	5084      	str	r4, [r0, r2]
    6f9c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6f9e:	429a      	cmp	r2, r3
    6fa0:	d1fa      	bne.n	6f98 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6fa2:	4a23      	ldr	r2, [pc, #140]	; (7030 <Reset_Handler+0xbc>)
    6fa4:	4b23      	ldr	r3, [pc, #140]	; (7034 <Reset_Handler+0xc0>)
    6fa6:	429a      	cmp	r2, r3
    6fa8:	d20a      	bcs.n	6fc0 <Reset_Handler+0x4c>
    6faa:	43d3      	mvns	r3, r2
    6fac:	4921      	ldr	r1, [pc, #132]	; (7034 <Reset_Handler+0xc0>)
    6fae:	185b      	adds	r3, r3, r1
    6fb0:	2103      	movs	r1, #3
    6fb2:	438b      	bics	r3, r1
    6fb4:	3304      	adds	r3, #4
    6fb6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6fb8:	2100      	movs	r1, #0
    6fba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6fbc:	4293      	cmp	r3, r2
    6fbe:	d1fc      	bne.n	6fba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6fc0:	4a1d      	ldr	r2, [pc, #116]	; (7038 <Reset_Handler+0xc4>)
    6fc2:	21ff      	movs	r1, #255	; 0xff
    6fc4:	4b1d      	ldr	r3, [pc, #116]	; (703c <Reset_Handler+0xc8>)
    6fc6:	438b      	bics	r3, r1
    6fc8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6fca:	39fd      	subs	r1, #253	; 0xfd
    6fcc:	2390      	movs	r3, #144	; 0x90
    6fce:	005b      	lsls	r3, r3, #1
    6fd0:	4a1b      	ldr	r2, [pc, #108]	; (7040 <Reset_Handler+0xcc>)
    6fd2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6fd4:	4a1b      	ldr	r2, [pc, #108]	; (7044 <Reset_Handler+0xd0>)
    6fd6:	78d3      	ldrb	r3, [r2, #3]
    6fd8:	2503      	movs	r5, #3
    6fda:	43ab      	bics	r3, r5
    6fdc:	2402      	movs	r4, #2
    6fde:	4323      	orrs	r3, r4
    6fe0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6fe2:	78d3      	ldrb	r3, [r2, #3]
    6fe4:	270c      	movs	r7, #12
    6fe6:	43bb      	bics	r3, r7
    6fe8:	2608      	movs	r6, #8
    6fea:	4333      	orrs	r3, r6
    6fec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6fee:	4b16      	ldr	r3, [pc, #88]	; (7048 <Reset_Handler+0xd4>)
    6ff0:	7b98      	ldrb	r0, [r3, #14]
    6ff2:	2230      	movs	r2, #48	; 0x30
    6ff4:	4390      	bics	r0, r2
    6ff6:	2220      	movs	r2, #32
    6ff8:	4310      	orrs	r0, r2
    6ffa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6ffc:	7b99      	ldrb	r1, [r3, #14]
    6ffe:	43b9      	bics	r1, r7
    7000:	4331      	orrs	r1, r6
    7002:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    7004:	7b9a      	ldrb	r2, [r3, #14]
    7006:	43aa      	bics	r2, r5
    7008:	4322      	orrs	r2, r4
    700a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    700c:	4a0f      	ldr	r2, [pc, #60]	; (704c <Reset_Handler+0xd8>)
    700e:	6853      	ldr	r3, [r2, #4]
    7010:	2180      	movs	r1, #128	; 0x80
    7012:	430b      	orrs	r3, r1
    7014:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7016:	4b0e      	ldr	r3, [pc, #56]	; (7050 <Reset_Handler+0xdc>)
    7018:	4798      	blx	r3
        main();
    701a:	4b0e      	ldr	r3, [pc, #56]	; (7054 <Reset_Handler+0xe0>)
    701c:	4798      	blx	r3
    701e:	e7fe      	b.n	701e <Reset_Handler+0xaa>
    7020:	00008e64 	.word	0x00008e64
    7024:	20000000 	.word	0x20000000
    7028:	20000160 	.word	0x20000160
    702c:	20000004 	.word	0x20000004
    7030:	20000160 	.word	0x20000160
    7034:	20001064 	.word	0x20001064
    7038:	e000ed00 	.word	0xe000ed00
    703c:	00000000 	.word	0x00000000
    7040:	41007000 	.word	0x41007000
    7044:	41005000 	.word	0x41005000
    7048:	41004800 	.word	0x41004800
    704c:	41004000 	.word	0x41004000
    7050:	00007629 	.word	0x00007629
    7054:	0000400d 	.word	0x0000400d

00007058 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7058:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    705a:	4a06      	ldr	r2, [pc, #24]	; (7074 <_sbrk+0x1c>)
    705c:	6812      	ldr	r2, [r2, #0]
    705e:	2a00      	cmp	r2, #0
    7060:	d004      	beq.n	706c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    7062:	4a04      	ldr	r2, [pc, #16]	; (7074 <_sbrk+0x1c>)
    7064:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    7066:	18c3      	adds	r3, r0, r3
    7068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    706a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    706c:	4902      	ldr	r1, [pc, #8]	; (7078 <_sbrk+0x20>)
    706e:	4a01      	ldr	r2, [pc, #4]	; (7074 <_sbrk+0x1c>)
    7070:	6011      	str	r1, [r2, #0]
    7072:	e7f6      	b.n	7062 <_sbrk+0xa>
    7074:	200003b0 	.word	0x200003b0
    7078:	20003068 	.word	0x20003068

0000707c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    707c:	2001      	movs	r0, #1
    707e:	4240      	negs	r0, r0
    7080:	4770      	bx	lr

00007082 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    7082:	2380      	movs	r3, #128	; 0x80
    7084:	019b      	lsls	r3, r3, #6
    7086:	604b      	str	r3, [r1, #4]

	return 0;
}
    7088:	2000      	movs	r0, #0
    708a:	4770      	bx	lr

0000708c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    708c:	2001      	movs	r0, #1
    708e:	4770      	bx	lr

00007090 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7090:	2000      	movs	r0, #0
    7092:	4770      	bx	lr

00007094 <__udivsi3>:
    7094:	2200      	movs	r2, #0
    7096:	0843      	lsrs	r3, r0, #1
    7098:	428b      	cmp	r3, r1
    709a:	d374      	bcc.n	7186 <__udivsi3+0xf2>
    709c:	0903      	lsrs	r3, r0, #4
    709e:	428b      	cmp	r3, r1
    70a0:	d35f      	bcc.n	7162 <__udivsi3+0xce>
    70a2:	0a03      	lsrs	r3, r0, #8
    70a4:	428b      	cmp	r3, r1
    70a6:	d344      	bcc.n	7132 <__udivsi3+0x9e>
    70a8:	0b03      	lsrs	r3, r0, #12
    70aa:	428b      	cmp	r3, r1
    70ac:	d328      	bcc.n	7100 <__udivsi3+0x6c>
    70ae:	0c03      	lsrs	r3, r0, #16
    70b0:	428b      	cmp	r3, r1
    70b2:	d30d      	bcc.n	70d0 <__udivsi3+0x3c>
    70b4:	22ff      	movs	r2, #255	; 0xff
    70b6:	0209      	lsls	r1, r1, #8
    70b8:	ba12      	rev	r2, r2
    70ba:	0c03      	lsrs	r3, r0, #16
    70bc:	428b      	cmp	r3, r1
    70be:	d302      	bcc.n	70c6 <__udivsi3+0x32>
    70c0:	1212      	asrs	r2, r2, #8
    70c2:	0209      	lsls	r1, r1, #8
    70c4:	d065      	beq.n	7192 <__udivsi3+0xfe>
    70c6:	0b03      	lsrs	r3, r0, #12
    70c8:	428b      	cmp	r3, r1
    70ca:	d319      	bcc.n	7100 <__udivsi3+0x6c>
    70cc:	e000      	b.n	70d0 <__udivsi3+0x3c>
    70ce:	0a09      	lsrs	r1, r1, #8
    70d0:	0bc3      	lsrs	r3, r0, #15
    70d2:	428b      	cmp	r3, r1
    70d4:	d301      	bcc.n	70da <__udivsi3+0x46>
    70d6:	03cb      	lsls	r3, r1, #15
    70d8:	1ac0      	subs	r0, r0, r3
    70da:	4152      	adcs	r2, r2
    70dc:	0b83      	lsrs	r3, r0, #14
    70de:	428b      	cmp	r3, r1
    70e0:	d301      	bcc.n	70e6 <__udivsi3+0x52>
    70e2:	038b      	lsls	r3, r1, #14
    70e4:	1ac0      	subs	r0, r0, r3
    70e6:	4152      	adcs	r2, r2
    70e8:	0b43      	lsrs	r3, r0, #13
    70ea:	428b      	cmp	r3, r1
    70ec:	d301      	bcc.n	70f2 <__udivsi3+0x5e>
    70ee:	034b      	lsls	r3, r1, #13
    70f0:	1ac0      	subs	r0, r0, r3
    70f2:	4152      	adcs	r2, r2
    70f4:	0b03      	lsrs	r3, r0, #12
    70f6:	428b      	cmp	r3, r1
    70f8:	d301      	bcc.n	70fe <__udivsi3+0x6a>
    70fa:	030b      	lsls	r3, r1, #12
    70fc:	1ac0      	subs	r0, r0, r3
    70fe:	4152      	adcs	r2, r2
    7100:	0ac3      	lsrs	r3, r0, #11
    7102:	428b      	cmp	r3, r1
    7104:	d301      	bcc.n	710a <__udivsi3+0x76>
    7106:	02cb      	lsls	r3, r1, #11
    7108:	1ac0      	subs	r0, r0, r3
    710a:	4152      	adcs	r2, r2
    710c:	0a83      	lsrs	r3, r0, #10
    710e:	428b      	cmp	r3, r1
    7110:	d301      	bcc.n	7116 <__udivsi3+0x82>
    7112:	028b      	lsls	r3, r1, #10
    7114:	1ac0      	subs	r0, r0, r3
    7116:	4152      	adcs	r2, r2
    7118:	0a43      	lsrs	r3, r0, #9
    711a:	428b      	cmp	r3, r1
    711c:	d301      	bcc.n	7122 <__udivsi3+0x8e>
    711e:	024b      	lsls	r3, r1, #9
    7120:	1ac0      	subs	r0, r0, r3
    7122:	4152      	adcs	r2, r2
    7124:	0a03      	lsrs	r3, r0, #8
    7126:	428b      	cmp	r3, r1
    7128:	d301      	bcc.n	712e <__udivsi3+0x9a>
    712a:	020b      	lsls	r3, r1, #8
    712c:	1ac0      	subs	r0, r0, r3
    712e:	4152      	adcs	r2, r2
    7130:	d2cd      	bcs.n	70ce <__udivsi3+0x3a>
    7132:	09c3      	lsrs	r3, r0, #7
    7134:	428b      	cmp	r3, r1
    7136:	d301      	bcc.n	713c <__udivsi3+0xa8>
    7138:	01cb      	lsls	r3, r1, #7
    713a:	1ac0      	subs	r0, r0, r3
    713c:	4152      	adcs	r2, r2
    713e:	0983      	lsrs	r3, r0, #6
    7140:	428b      	cmp	r3, r1
    7142:	d301      	bcc.n	7148 <__udivsi3+0xb4>
    7144:	018b      	lsls	r3, r1, #6
    7146:	1ac0      	subs	r0, r0, r3
    7148:	4152      	adcs	r2, r2
    714a:	0943      	lsrs	r3, r0, #5
    714c:	428b      	cmp	r3, r1
    714e:	d301      	bcc.n	7154 <__udivsi3+0xc0>
    7150:	014b      	lsls	r3, r1, #5
    7152:	1ac0      	subs	r0, r0, r3
    7154:	4152      	adcs	r2, r2
    7156:	0903      	lsrs	r3, r0, #4
    7158:	428b      	cmp	r3, r1
    715a:	d301      	bcc.n	7160 <__udivsi3+0xcc>
    715c:	010b      	lsls	r3, r1, #4
    715e:	1ac0      	subs	r0, r0, r3
    7160:	4152      	adcs	r2, r2
    7162:	08c3      	lsrs	r3, r0, #3
    7164:	428b      	cmp	r3, r1
    7166:	d301      	bcc.n	716c <__udivsi3+0xd8>
    7168:	00cb      	lsls	r3, r1, #3
    716a:	1ac0      	subs	r0, r0, r3
    716c:	4152      	adcs	r2, r2
    716e:	0883      	lsrs	r3, r0, #2
    7170:	428b      	cmp	r3, r1
    7172:	d301      	bcc.n	7178 <__udivsi3+0xe4>
    7174:	008b      	lsls	r3, r1, #2
    7176:	1ac0      	subs	r0, r0, r3
    7178:	4152      	adcs	r2, r2
    717a:	0843      	lsrs	r3, r0, #1
    717c:	428b      	cmp	r3, r1
    717e:	d301      	bcc.n	7184 <__udivsi3+0xf0>
    7180:	004b      	lsls	r3, r1, #1
    7182:	1ac0      	subs	r0, r0, r3
    7184:	4152      	adcs	r2, r2
    7186:	1a41      	subs	r1, r0, r1
    7188:	d200      	bcs.n	718c <__udivsi3+0xf8>
    718a:	4601      	mov	r1, r0
    718c:	4152      	adcs	r2, r2
    718e:	4610      	mov	r0, r2
    7190:	4770      	bx	lr
    7192:	e7ff      	b.n	7194 <__udivsi3+0x100>
    7194:	b501      	push	{r0, lr}
    7196:	2000      	movs	r0, #0
    7198:	f000 f8f0 	bl	737c <__aeabi_idiv0>
    719c:	bd02      	pop	{r1, pc}
    719e:	46c0      	nop			; (mov r8, r8)

000071a0 <__aeabi_uidivmod>:
    71a0:	2900      	cmp	r1, #0
    71a2:	d0f7      	beq.n	7194 <__udivsi3+0x100>
    71a4:	e776      	b.n	7094 <__udivsi3>
    71a6:	4770      	bx	lr

000071a8 <__divsi3>:
    71a8:	4603      	mov	r3, r0
    71aa:	430b      	orrs	r3, r1
    71ac:	d47f      	bmi.n	72ae <__divsi3+0x106>
    71ae:	2200      	movs	r2, #0
    71b0:	0843      	lsrs	r3, r0, #1
    71b2:	428b      	cmp	r3, r1
    71b4:	d374      	bcc.n	72a0 <__divsi3+0xf8>
    71b6:	0903      	lsrs	r3, r0, #4
    71b8:	428b      	cmp	r3, r1
    71ba:	d35f      	bcc.n	727c <__divsi3+0xd4>
    71bc:	0a03      	lsrs	r3, r0, #8
    71be:	428b      	cmp	r3, r1
    71c0:	d344      	bcc.n	724c <__divsi3+0xa4>
    71c2:	0b03      	lsrs	r3, r0, #12
    71c4:	428b      	cmp	r3, r1
    71c6:	d328      	bcc.n	721a <__divsi3+0x72>
    71c8:	0c03      	lsrs	r3, r0, #16
    71ca:	428b      	cmp	r3, r1
    71cc:	d30d      	bcc.n	71ea <__divsi3+0x42>
    71ce:	22ff      	movs	r2, #255	; 0xff
    71d0:	0209      	lsls	r1, r1, #8
    71d2:	ba12      	rev	r2, r2
    71d4:	0c03      	lsrs	r3, r0, #16
    71d6:	428b      	cmp	r3, r1
    71d8:	d302      	bcc.n	71e0 <__divsi3+0x38>
    71da:	1212      	asrs	r2, r2, #8
    71dc:	0209      	lsls	r1, r1, #8
    71de:	d065      	beq.n	72ac <__divsi3+0x104>
    71e0:	0b03      	lsrs	r3, r0, #12
    71e2:	428b      	cmp	r3, r1
    71e4:	d319      	bcc.n	721a <__divsi3+0x72>
    71e6:	e000      	b.n	71ea <__divsi3+0x42>
    71e8:	0a09      	lsrs	r1, r1, #8
    71ea:	0bc3      	lsrs	r3, r0, #15
    71ec:	428b      	cmp	r3, r1
    71ee:	d301      	bcc.n	71f4 <__divsi3+0x4c>
    71f0:	03cb      	lsls	r3, r1, #15
    71f2:	1ac0      	subs	r0, r0, r3
    71f4:	4152      	adcs	r2, r2
    71f6:	0b83      	lsrs	r3, r0, #14
    71f8:	428b      	cmp	r3, r1
    71fa:	d301      	bcc.n	7200 <__divsi3+0x58>
    71fc:	038b      	lsls	r3, r1, #14
    71fe:	1ac0      	subs	r0, r0, r3
    7200:	4152      	adcs	r2, r2
    7202:	0b43      	lsrs	r3, r0, #13
    7204:	428b      	cmp	r3, r1
    7206:	d301      	bcc.n	720c <__divsi3+0x64>
    7208:	034b      	lsls	r3, r1, #13
    720a:	1ac0      	subs	r0, r0, r3
    720c:	4152      	adcs	r2, r2
    720e:	0b03      	lsrs	r3, r0, #12
    7210:	428b      	cmp	r3, r1
    7212:	d301      	bcc.n	7218 <__divsi3+0x70>
    7214:	030b      	lsls	r3, r1, #12
    7216:	1ac0      	subs	r0, r0, r3
    7218:	4152      	adcs	r2, r2
    721a:	0ac3      	lsrs	r3, r0, #11
    721c:	428b      	cmp	r3, r1
    721e:	d301      	bcc.n	7224 <__divsi3+0x7c>
    7220:	02cb      	lsls	r3, r1, #11
    7222:	1ac0      	subs	r0, r0, r3
    7224:	4152      	adcs	r2, r2
    7226:	0a83      	lsrs	r3, r0, #10
    7228:	428b      	cmp	r3, r1
    722a:	d301      	bcc.n	7230 <__divsi3+0x88>
    722c:	028b      	lsls	r3, r1, #10
    722e:	1ac0      	subs	r0, r0, r3
    7230:	4152      	adcs	r2, r2
    7232:	0a43      	lsrs	r3, r0, #9
    7234:	428b      	cmp	r3, r1
    7236:	d301      	bcc.n	723c <__divsi3+0x94>
    7238:	024b      	lsls	r3, r1, #9
    723a:	1ac0      	subs	r0, r0, r3
    723c:	4152      	adcs	r2, r2
    723e:	0a03      	lsrs	r3, r0, #8
    7240:	428b      	cmp	r3, r1
    7242:	d301      	bcc.n	7248 <__divsi3+0xa0>
    7244:	020b      	lsls	r3, r1, #8
    7246:	1ac0      	subs	r0, r0, r3
    7248:	4152      	adcs	r2, r2
    724a:	d2cd      	bcs.n	71e8 <__divsi3+0x40>
    724c:	09c3      	lsrs	r3, r0, #7
    724e:	428b      	cmp	r3, r1
    7250:	d301      	bcc.n	7256 <__divsi3+0xae>
    7252:	01cb      	lsls	r3, r1, #7
    7254:	1ac0      	subs	r0, r0, r3
    7256:	4152      	adcs	r2, r2
    7258:	0983      	lsrs	r3, r0, #6
    725a:	428b      	cmp	r3, r1
    725c:	d301      	bcc.n	7262 <__divsi3+0xba>
    725e:	018b      	lsls	r3, r1, #6
    7260:	1ac0      	subs	r0, r0, r3
    7262:	4152      	adcs	r2, r2
    7264:	0943      	lsrs	r3, r0, #5
    7266:	428b      	cmp	r3, r1
    7268:	d301      	bcc.n	726e <__divsi3+0xc6>
    726a:	014b      	lsls	r3, r1, #5
    726c:	1ac0      	subs	r0, r0, r3
    726e:	4152      	adcs	r2, r2
    7270:	0903      	lsrs	r3, r0, #4
    7272:	428b      	cmp	r3, r1
    7274:	d301      	bcc.n	727a <__divsi3+0xd2>
    7276:	010b      	lsls	r3, r1, #4
    7278:	1ac0      	subs	r0, r0, r3
    727a:	4152      	adcs	r2, r2
    727c:	08c3      	lsrs	r3, r0, #3
    727e:	428b      	cmp	r3, r1
    7280:	d301      	bcc.n	7286 <__divsi3+0xde>
    7282:	00cb      	lsls	r3, r1, #3
    7284:	1ac0      	subs	r0, r0, r3
    7286:	4152      	adcs	r2, r2
    7288:	0883      	lsrs	r3, r0, #2
    728a:	428b      	cmp	r3, r1
    728c:	d301      	bcc.n	7292 <__divsi3+0xea>
    728e:	008b      	lsls	r3, r1, #2
    7290:	1ac0      	subs	r0, r0, r3
    7292:	4152      	adcs	r2, r2
    7294:	0843      	lsrs	r3, r0, #1
    7296:	428b      	cmp	r3, r1
    7298:	d301      	bcc.n	729e <__divsi3+0xf6>
    729a:	004b      	lsls	r3, r1, #1
    729c:	1ac0      	subs	r0, r0, r3
    729e:	4152      	adcs	r2, r2
    72a0:	1a41      	subs	r1, r0, r1
    72a2:	d200      	bcs.n	72a6 <__divsi3+0xfe>
    72a4:	4601      	mov	r1, r0
    72a6:	4152      	adcs	r2, r2
    72a8:	4610      	mov	r0, r2
    72aa:	4770      	bx	lr
    72ac:	e05d      	b.n	736a <__divsi3+0x1c2>
    72ae:	0fca      	lsrs	r2, r1, #31
    72b0:	d000      	beq.n	72b4 <__divsi3+0x10c>
    72b2:	4249      	negs	r1, r1
    72b4:	1003      	asrs	r3, r0, #32
    72b6:	d300      	bcc.n	72ba <__divsi3+0x112>
    72b8:	4240      	negs	r0, r0
    72ba:	4053      	eors	r3, r2
    72bc:	2200      	movs	r2, #0
    72be:	469c      	mov	ip, r3
    72c0:	0903      	lsrs	r3, r0, #4
    72c2:	428b      	cmp	r3, r1
    72c4:	d32d      	bcc.n	7322 <__divsi3+0x17a>
    72c6:	0a03      	lsrs	r3, r0, #8
    72c8:	428b      	cmp	r3, r1
    72ca:	d312      	bcc.n	72f2 <__divsi3+0x14a>
    72cc:	22fc      	movs	r2, #252	; 0xfc
    72ce:	0189      	lsls	r1, r1, #6
    72d0:	ba12      	rev	r2, r2
    72d2:	0a03      	lsrs	r3, r0, #8
    72d4:	428b      	cmp	r3, r1
    72d6:	d30c      	bcc.n	72f2 <__divsi3+0x14a>
    72d8:	0189      	lsls	r1, r1, #6
    72da:	1192      	asrs	r2, r2, #6
    72dc:	428b      	cmp	r3, r1
    72de:	d308      	bcc.n	72f2 <__divsi3+0x14a>
    72e0:	0189      	lsls	r1, r1, #6
    72e2:	1192      	asrs	r2, r2, #6
    72e4:	428b      	cmp	r3, r1
    72e6:	d304      	bcc.n	72f2 <__divsi3+0x14a>
    72e8:	0189      	lsls	r1, r1, #6
    72ea:	d03a      	beq.n	7362 <__divsi3+0x1ba>
    72ec:	1192      	asrs	r2, r2, #6
    72ee:	e000      	b.n	72f2 <__divsi3+0x14a>
    72f0:	0989      	lsrs	r1, r1, #6
    72f2:	09c3      	lsrs	r3, r0, #7
    72f4:	428b      	cmp	r3, r1
    72f6:	d301      	bcc.n	72fc <__divsi3+0x154>
    72f8:	01cb      	lsls	r3, r1, #7
    72fa:	1ac0      	subs	r0, r0, r3
    72fc:	4152      	adcs	r2, r2
    72fe:	0983      	lsrs	r3, r0, #6
    7300:	428b      	cmp	r3, r1
    7302:	d301      	bcc.n	7308 <__divsi3+0x160>
    7304:	018b      	lsls	r3, r1, #6
    7306:	1ac0      	subs	r0, r0, r3
    7308:	4152      	adcs	r2, r2
    730a:	0943      	lsrs	r3, r0, #5
    730c:	428b      	cmp	r3, r1
    730e:	d301      	bcc.n	7314 <__divsi3+0x16c>
    7310:	014b      	lsls	r3, r1, #5
    7312:	1ac0      	subs	r0, r0, r3
    7314:	4152      	adcs	r2, r2
    7316:	0903      	lsrs	r3, r0, #4
    7318:	428b      	cmp	r3, r1
    731a:	d301      	bcc.n	7320 <__divsi3+0x178>
    731c:	010b      	lsls	r3, r1, #4
    731e:	1ac0      	subs	r0, r0, r3
    7320:	4152      	adcs	r2, r2
    7322:	08c3      	lsrs	r3, r0, #3
    7324:	428b      	cmp	r3, r1
    7326:	d301      	bcc.n	732c <__divsi3+0x184>
    7328:	00cb      	lsls	r3, r1, #3
    732a:	1ac0      	subs	r0, r0, r3
    732c:	4152      	adcs	r2, r2
    732e:	0883      	lsrs	r3, r0, #2
    7330:	428b      	cmp	r3, r1
    7332:	d301      	bcc.n	7338 <__divsi3+0x190>
    7334:	008b      	lsls	r3, r1, #2
    7336:	1ac0      	subs	r0, r0, r3
    7338:	4152      	adcs	r2, r2
    733a:	d2d9      	bcs.n	72f0 <__divsi3+0x148>
    733c:	0843      	lsrs	r3, r0, #1
    733e:	428b      	cmp	r3, r1
    7340:	d301      	bcc.n	7346 <__divsi3+0x19e>
    7342:	004b      	lsls	r3, r1, #1
    7344:	1ac0      	subs	r0, r0, r3
    7346:	4152      	adcs	r2, r2
    7348:	1a41      	subs	r1, r0, r1
    734a:	d200      	bcs.n	734e <__divsi3+0x1a6>
    734c:	4601      	mov	r1, r0
    734e:	4663      	mov	r3, ip
    7350:	4152      	adcs	r2, r2
    7352:	105b      	asrs	r3, r3, #1
    7354:	4610      	mov	r0, r2
    7356:	d301      	bcc.n	735c <__divsi3+0x1b4>
    7358:	4240      	negs	r0, r0
    735a:	2b00      	cmp	r3, #0
    735c:	d500      	bpl.n	7360 <__divsi3+0x1b8>
    735e:	4249      	negs	r1, r1
    7360:	4770      	bx	lr
    7362:	4663      	mov	r3, ip
    7364:	105b      	asrs	r3, r3, #1
    7366:	d300      	bcc.n	736a <__divsi3+0x1c2>
    7368:	4240      	negs	r0, r0
    736a:	b501      	push	{r0, lr}
    736c:	2000      	movs	r0, #0
    736e:	f000 f805 	bl	737c <__aeabi_idiv0>
    7372:	bd02      	pop	{r1, pc}

00007374 <__aeabi_idivmod>:
    7374:	2900      	cmp	r1, #0
    7376:	d0f8      	beq.n	736a <__divsi3+0x1c2>
    7378:	e716      	b.n	71a8 <__divsi3>
    737a:	4770      	bx	lr

0000737c <__aeabi_idiv0>:
    737c:	4770      	bx	lr
    737e:	46c0      	nop			; (mov r8, r8)

00007380 <__clzsi2>:
    7380:	211c      	movs	r1, #28
    7382:	2301      	movs	r3, #1
    7384:	041b      	lsls	r3, r3, #16
    7386:	4298      	cmp	r0, r3
    7388:	d301      	bcc.n	738e <__clzsi2+0xe>
    738a:	0c00      	lsrs	r0, r0, #16
    738c:	3910      	subs	r1, #16
    738e:	0a1b      	lsrs	r3, r3, #8
    7390:	4298      	cmp	r0, r3
    7392:	d301      	bcc.n	7398 <__clzsi2+0x18>
    7394:	0a00      	lsrs	r0, r0, #8
    7396:	3908      	subs	r1, #8
    7398:	091b      	lsrs	r3, r3, #4
    739a:	4298      	cmp	r0, r3
    739c:	d301      	bcc.n	73a2 <__clzsi2+0x22>
    739e:	0900      	lsrs	r0, r0, #4
    73a0:	3904      	subs	r1, #4
    73a2:	a202      	add	r2, pc, #8	; (adr r2, 73ac <__clzsi2+0x2c>)
    73a4:	5c10      	ldrb	r0, [r2, r0]
    73a6:	1840      	adds	r0, r0, r1
    73a8:	4770      	bx	lr
    73aa:	46c0      	nop			; (mov r8, r8)
    73ac:	02020304 	.word	0x02020304
    73b0:	01010101 	.word	0x01010101
	...

000073bc <__ctzsi2>:
    73bc:	4241      	negs	r1, r0
    73be:	4008      	ands	r0, r1
    73c0:	211c      	movs	r1, #28
    73c2:	2301      	movs	r3, #1
    73c4:	041b      	lsls	r3, r3, #16
    73c6:	4298      	cmp	r0, r3
    73c8:	d301      	bcc.n	73ce <__ctzsi2+0x12>
    73ca:	0c00      	lsrs	r0, r0, #16
    73cc:	3910      	subs	r1, #16
    73ce:	0a1b      	lsrs	r3, r3, #8
    73d0:	4298      	cmp	r0, r3
    73d2:	d301      	bcc.n	73d8 <__ctzsi2+0x1c>
    73d4:	0a00      	lsrs	r0, r0, #8
    73d6:	3908      	subs	r1, #8
    73d8:	091b      	lsrs	r3, r3, #4
    73da:	4298      	cmp	r0, r3
    73dc:	d301      	bcc.n	73e2 <__ctzsi2+0x26>
    73de:	0900      	lsrs	r0, r0, #4
    73e0:	3904      	subs	r1, #4
    73e2:	a202      	add	r2, pc, #8	; (adr r2, 73ec <__ctzsi2+0x30>)
    73e4:	5c10      	ldrb	r0, [r2, r0]
    73e6:	1a40      	subs	r0, r0, r1
    73e8:	4770      	bx	lr
    73ea:	46c0      	nop			; (mov r8, r8)
    73ec:	1d1d1c1b 	.word	0x1d1d1c1b
    73f0:	1e1e1e1e 	.word	0x1e1e1e1e
    73f4:	1f1f1f1f 	.word	0x1f1f1f1f
    73f8:	1f1f1f1f 	.word	0x1f1f1f1f

000073fc <__aeabi_uldivmod>:
    73fc:	2b00      	cmp	r3, #0
    73fe:	d111      	bne.n	7424 <__aeabi_uldivmod+0x28>
    7400:	2a00      	cmp	r2, #0
    7402:	d10f      	bne.n	7424 <__aeabi_uldivmod+0x28>
    7404:	2900      	cmp	r1, #0
    7406:	d100      	bne.n	740a <__aeabi_uldivmod+0xe>
    7408:	2800      	cmp	r0, #0
    740a:	d002      	beq.n	7412 <__aeabi_uldivmod+0x16>
    740c:	2100      	movs	r1, #0
    740e:	43c9      	mvns	r1, r1
    7410:	1c08      	adds	r0, r1, #0
    7412:	b407      	push	{r0, r1, r2}
    7414:	4802      	ldr	r0, [pc, #8]	; (7420 <__aeabi_uldivmod+0x24>)
    7416:	a102      	add	r1, pc, #8	; (adr r1, 7420 <__aeabi_uldivmod+0x24>)
    7418:	1840      	adds	r0, r0, r1
    741a:	9002      	str	r0, [sp, #8]
    741c:	bd03      	pop	{r0, r1, pc}
    741e:	46c0      	nop			; (mov r8, r8)
    7420:	ffffff5d 	.word	0xffffff5d
    7424:	b403      	push	{r0, r1}
    7426:	4668      	mov	r0, sp
    7428:	b501      	push	{r0, lr}
    742a:	9802      	ldr	r0, [sp, #8]
    742c:	f000 f830 	bl	7490 <__udivmoddi4>
    7430:	9b01      	ldr	r3, [sp, #4]
    7432:	469e      	mov	lr, r3
    7434:	b002      	add	sp, #8
    7436:	bc0c      	pop	{r2, r3}
    7438:	4770      	bx	lr
    743a:	46c0      	nop			; (mov r8, r8)

0000743c <__aeabi_lmul>:
    743c:	b5f0      	push	{r4, r5, r6, r7, lr}
    743e:	46ce      	mov	lr, r9
    7440:	4647      	mov	r7, r8
    7442:	0415      	lsls	r5, r2, #16
    7444:	0c2d      	lsrs	r5, r5, #16
    7446:	002e      	movs	r6, r5
    7448:	b580      	push	{r7, lr}
    744a:	0407      	lsls	r7, r0, #16
    744c:	0c14      	lsrs	r4, r2, #16
    744e:	0c3f      	lsrs	r7, r7, #16
    7450:	4699      	mov	r9, r3
    7452:	0c03      	lsrs	r3, r0, #16
    7454:	437e      	muls	r6, r7
    7456:	435d      	muls	r5, r3
    7458:	4367      	muls	r7, r4
    745a:	4363      	muls	r3, r4
    745c:	197f      	adds	r7, r7, r5
    745e:	0c34      	lsrs	r4, r6, #16
    7460:	19e4      	adds	r4, r4, r7
    7462:	469c      	mov	ip, r3
    7464:	42a5      	cmp	r5, r4
    7466:	d903      	bls.n	7470 <__aeabi_lmul+0x34>
    7468:	2380      	movs	r3, #128	; 0x80
    746a:	025b      	lsls	r3, r3, #9
    746c:	4698      	mov	r8, r3
    746e:	44c4      	add	ip, r8
    7470:	464b      	mov	r3, r9
    7472:	4351      	muls	r1, r2
    7474:	4343      	muls	r3, r0
    7476:	0436      	lsls	r6, r6, #16
    7478:	0c36      	lsrs	r6, r6, #16
    747a:	0c25      	lsrs	r5, r4, #16
    747c:	0424      	lsls	r4, r4, #16
    747e:	4465      	add	r5, ip
    7480:	19a4      	adds	r4, r4, r6
    7482:	1859      	adds	r1, r3, r1
    7484:	1949      	adds	r1, r1, r5
    7486:	0020      	movs	r0, r4
    7488:	bc0c      	pop	{r2, r3}
    748a:	4690      	mov	r8, r2
    748c:	4699      	mov	r9, r3
    748e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007490 <__udivmoddi4>:
    7490:	b5f0      	push	{r4, r5, r6, r7, lr}
    7492:	4657      	mov	r7, sl
    7494:	464e      	mov	r6, r9
    7496:	4645      	mov	r5, r8
    7498:	46de      	mov	lr, fp
    749a:	b5e0      	push	{r5, r6, r7, lr}
    749c:	0004      	movs	r4, r0
    749e:	b083      	sub	sp, #12
    74a0:	000d      	movs	r5, r1
    74a2:	4692      	mov	sl, r2
    74a4:	4699      	mov	r9, r3
    74a6:	428b      	cmp	r3, r1
    74a8:	d82f      	bhi.n	750a <__udivmoddi4+0x7a>
    74aa:	d02c      	beq.n	7506 <__udivmoddi4+0x76>
    74ac:	4649      	mov	r1, r9
    74ae:	4650      	mov	r0, sl
    74b0:	f000 f8ae 	bl	7610 <__clzdi2>
    74b4:	0029      	movs	r1, r5
    74b6:	0006      	movs	r6, r0
    74b8:	0020      	movs	r0, r4
    74ba:	f000 f8a9 	bl	7610 <__clzdi2>
    74be:	1a33      	subs	r3, r6, r0
    74c0:	4698      	mov	r8, r3
    74c2:	3b20      	subs	r3, #32
    74c4:	469b      	mov	fp, r3
    74c6:	d500      	bpl.n	74ca <__udivmoddi4+0x3a>
    74c8:	e074      	b.n	75b4 <__udivmoddi4+0x124>
    74ca:	4653      	mov	r3, sl
    74cc:	465a      	mov	r2, fp
    74ce:	4093      	lsls	r3, r2
    74d0:	001f      	movs	r7, r3
    74d2:	4653      	mov	r3, sl
    74d4:	4642      	mov	r2, r8
    74d6:	4093      	lsls	r3, r2
    74d8:	001e      	movs	r6, r3
    74da:	42af      	cmp	r7, r5
    74dc:	d829      	bhi.n	7532 <__udivmoddi4+0xa2>
    74de:	d026      	beq.n	752e <__udivmoddi4+0x9e>
    74e0:	465b      	mov	r3, fp
    74e2:	1ba4      	subs	r4, r4, r6
    74e4:	41bd      	sbcs	r5, r7
    74e6:	2b00      	cmp	r3, #0
    74e8:	da00      	bge.n	74ec <__udivmoddi4+0x5c>
    74ea:	e079      	b.n	75e0 <__udivmoddi4+0x150>
    74ec:	2200      	movs	r2, #0
    74ee:	2300      	movs	r3, #0
    74f0:	9200      	str	r2, [sp, #0]
    74f2:	9301      	str	r3, [sp, #4]
    74f4:	2301      	movs	r3, #1
    74f6:	465a      	mov	r2, fp
    74f8:	4093      	lsls	r3, r2
    74fa:	9301      	str	r3, [sp, #4]
    74fc:	2301      	movs	r3, #1
    74fe:	4642      	mov	r2, r8
    7500:	4093      	lsls	r3, r2
    7502:	9300      	str	r3, [sp, #0]
    7504:	e019      	b.n	753a <__udivmoddi4+0xaa>
    7506:	4282      	cmp	r2, r0
    7508:	d9d0      	bls.n	74ac <__udivmoddi4+0x1c>
    750a:	2200      	movs	r2, #0
    750c:	2300      	movs	r3, #0
    750e:	9200      	str	r2, [sp, #0]
    7510:	9301      	str	r3, [sp, #4]
    7512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7514:	2b00      	cmp	r3, #0
    7516:	d001      	beq.n	751c <__udivmoddi4+0x8c>
    7518:	601c      	str	r4, [r3, #0]
    751a:	605d      	str	r5, [r3, #4]
    751c:	9800      	ldr	r0, [sp, #0]
    751e:	9901      	ldr	r1, [sp, #4]
    7520:	b003      	add	sp, #12
    7522:	bc3c      	pop	{r2, r3, r4, r5}
    7524:	4690      	mov	r8, r2
    7526:	4699      	mov	r9, r3
    7528:	46a2      	mov	sl, r4
    752a:	46ab      	mov	fp, r5
    752c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    752e:	42a3      	cmp	r3, r4
    7530:	d9d6      	bls.n	74e0 <__udivmoddi4+0x50>
    7532:	2200      	movs	r2, #0
    7534:	2300      	movs	r3, #0
    7536:	9200      	str	r2, [sp, #0]
    7538:	9301      	str	r3, [sp, #4]
    753a:	4643      	mov	r3, r8
    753c:	2b00      	cmp	r3, #0
    753e:	d0e8      	beq.n	7512 <__udivmoddi4+0x82>
    7540:	07fb      	lsls	r3, r7, #31
    7542:	0872      	lsrs	r2, r6, #1
    7544:	431a      	orrs	r2, r3
    7546:	4646      	mov	r6, r8
    7548:	087b      	lsrs	r3, r7, #1
    754a:	e00e      	b.n	756a <__udivmoddi4+0xda>
    754c:	42ab      	cmp	r3, r5
    754e:	d101      	bne.n	7554 <__udivmoddi4+0xc4>
    7550:	42a2      	cmp	r2, r4
    7552:	d80c      	bhi.n	756e <__udivmoddi4+0xde>
    7554:	1aa4      	subs	r4, r4, r2
    7556:	419d      	sbcs	r5, r3
    7558:	2001      	movs	r0, #1
    755a:	1924      	adds	r4, r4, r4
    755c:	416d      	adcs	r5, r5
    755e:	2100      	movs	r1, #0
    7560:	3e01      	subs	r6, #1
    7562:	1824      	adds	r4, r4, r0
    7564:	414d      	adcs	r5, r1
    7566:	2e00      	cmp	r6, #0
    7568:	d006      	beq.n	7578 <__udivmoddi4+0xe8>
    756a:	42ab      	cmp	r3, r5
    756c:	d9ee      	bls.n	754c <__udivmoddi4+0xbc>
    756e:	3e01      	subs	r6, #1
    7570:	1924      	adds	r4, r4, r4
    7572:	416d      	adcs	r5, r5
    7574:	2e00      	cmp	r6, #0
    7576:	d1f8      	bne.n	756a <__udivmoddi4+0xda>
    7578:	465b      	mov	r3, fp
    757a:	9800      	ldr	r0, [sp, #0]
    757c:	9901      	ldr	r1, [sp, #4]
    757e:	1900      	adds	r0, r0, r4
    7580:	4169      	adcs	r1, r5
    7582:	2b00      	cmp	r3, #0
    7584:	db22      	blt.n	75cc <__udivmoddi4+0x13c>
    7586:	002b      	movs	r3, r5
    7588:	465a      	mov	r2, fp
    758a:	40d3      	lsrs	r3, r2
    758c:	002a      	movs	r2, r5
    758e:	4644      	mov	r4, r8
    7590:	40e2      	lsrs	r2, r4
    7592:	001c      	movs	r4, r3
    7594:	465b      	mov	r3, fp
    7596:	0015      	movs	r5, r2
    7598:	2b00      	cmp	r3, #0
    759a:	db2c      	blt.n	75f6 <__udivmoddi4+0x166>
    759c:	0026      	movs	r6, r4
    759e:	409e      	lsls	r6, r3
    75a0:	0033      	movs	r3, r6
    75a2:	0026      	movs	r6, r4
    75a4:	4647      	mov	r7, r8
    75a6:	40be      	lsls	r6, r7
    75a8:	0032      	movs	r2, r6
    75aa:	1a80      	subs	r0, r0, r2
    75ac:	4199      	sbcs	r1, r3
    75ae:	9000      	str	r0, [sp, #0]
    75b0:	9101      	str	r1, [sp, #4]
    75b2:	e7ae      	b.n	7512 <__udivmoddi4+0x82>
    75b4:	4642      	mov	r2, r8
    75b6:	2320      	movs	r3, #32
    75b8:	1a9b      	subs	r3, r3, r2
    75ba:	4652      	mov	r2, sl
    75bc:	40da      	lsrs	r2, r3
    75be:	4641      	mov	r1, r8
    75c0:	0013      	movs	r3, r2
    75c2:	464a      	mov	r2, r9
    75c4:	408a      	lsls	r2, r1
    75c6:	0017      	movs	r7, r2
    75c8:	431f      	orrs	r7, r3
    75ca:	e782      	b.n	74d2 <__udivmoddi4+0x42>
    75cc:	4642      	mov	r2, r8
    75ce:	2320      	movs	r3, #32
    75d0:	1a9b      	subs	r3, r3, r2
    75d2:	002a      	movs	r2, r5
    75d4:	4646      	mov	r6, r8
    75d6:	409a      	lsls	r2, r3
    75d8:	0023      	movs	r3, r4
    75da:	40f3      	lsrs	r3, r6
    75dc:	4313      	orrs	r3, r2
    75de:	e7d5      	b.n	758c <__udivmoddi4+0xfc>
    75e0:	4642      	mov	r2, r8
    75e2:	2320      	movs	r3, #32
    75e4:	2100      	movs	r1, #0
    75e6:	1a9b      	subs	r3, r3, r2
    75e8:	2200      	movs	r2, #0
    75ea:	9100      	str	r1, [sp, #0]
    75ec:	9201      	str	r2, [sp, #4]
    75ee:	2201      	movs	r2, #1
    75f0:	40da      	lsrs	r2, r3
    75f2:	9201      	str	r2, [sp, #4]
    75f4:	e782      	b.n	74fc <__udivmoddi4+0x6c>
    75f6:	4642      	mov	r2, r8
    75f8:	2320      	movs	r3, #32
    75fa:	0026      	movs	r6, r4
    75fc:	1a9b      	subs	r3, r3, r2
    75fe:	40de      	lsrs	r6, r3
    7600:	002f      	movs	r7, r5
    7602:	46b4      	mov	ip, r6
    7604:	4097      	lsls	r7, r2
    7606:	4666      	mov	r6, ip
    7608:	003b      	movs	r3, r7
    760a:	4333      	orrs	r3, r6
    760c:	e7c9      	b.n	75a2 <__udivmoddi4+0x112>
    760e:	46c0      	nop			; (mov r8, r8)

00007610 <__clzdi2>:
    7610:	b510      	push	{r4, lr}
    7612:	2900      	cmp	r1, #0
    7614:	d103      	bne.n	761e <__clzdi2+0xe>
    7616:	f7ff feb3 	bl	7380 <__clzsi2>
    761a:	3020      	adds	r0, #32
    761c:	e002      	b.n	7624 <__clzdi2+0x14>
    761e:	1c08      	adds	r0, r1, #0
    7620:	f7ff feae 	bl	7380 <__clzsi2>
    7624:	bd10      	pop	{r4, pc}
    7626:	46c0      	nop			; (mov r8, r8)

00007628 <__libc_init_array>:
    7628:	b570      	push	{r4, r5, r6, lr}
    762a:	2600      	movs	r6, #0
    762c:	4d0c      	ldr	r5, [pc, #48]	; (7660 <__libc_init_array+0x38>)
    762e:	4c0d      	ldr	r4, [pc, #52]	; (7664 <__libc_init_array+0x3c>)
    7630:	1b64      	subs	r4, r4, r5
    7632:	10a4      	asrs	r4, r4, #2
    7634:	42a6      	cmp	r6, r4
    7636:	d109      	bne.n	764c <__libc_init_array+0x24>
    7638:	2600      	movs	r6, #0
    763a:	f001 fbff 	bl	8e3c <_init>
    763e:	4d0a      	ldr	r5, [pc, #40]	; (7668 <__libc_init_array+0x40>)
    7640:	4c0a      	ldr	r4, [pc, #40]	; (766c <__libc_init_array+0x44>)
    7642:	1b64      	subs	r4, r4, r5
    7644:	10a4      	asrs	r4, r4, #2
    7646:	42a6      	cmp	r6, r4
    7648:	d105      	bne.n	7656 <__libc_init_array+0x2e>
    764a:	bd70      	pop	{r4, r5, r6, pc}
    764c:	00b3      	lsls	r3, r6, #2
    764e:	58eb      	ldr	r3, [r5, r3]
    7650:	4798      	blx	r3
    7652:	3601      	adds	r6, #1
    7654:	e7ee      	b.n	7634 <__libc_init_array+0xc>
    7656:	00b3      	lsls	r3, r6, #2
    7658:	58eb      	ldr	r3, [r5, r3]
    765a:	4798      	blx	r3
    765c:	3601      	adds	r6, #1
    765e:	e7f2      	b.n	7646 <__libc_init_array+0x1e>
    7660:	00008e48 	.word	0x00008e48
    7664:	00008e48 	.word	0x00008e48
    7668:	00008e48 	.word	0x00008e48
    766c:	00008e4c 	.word	0x00008e4c

00007670 <memcpy>:
    7670:	2300      	movs	r3, #0
    7672:	b510      	push	{r4, lr}
    7674:	429a      	cmp	r2, r3
    7676:	d100      	bne.n	767a <memcpy+0xa>
    7678:	bd10      	pop	{r4, pc}
    767a:	5ccc      	ldrb	r4, [r1, r3]
    767c:	54c4      	strb	r4, [r0, r3]
    767e:	3301      	adds	r3, #1
    7680:	e7f8      	b.n	7674 <memcpy+0x4>

00007682 <memset>:
    7682:	0003      	movs	r3, r0
    7684:	1882      	adds	r2, r0, r2
    7686:	4293      	cmp	r3, r2
    7688:	d100      	bne.n	768c <memset+0xa>
    768a:	4770      	bx	lr
    768c:	7019      	strb	r1, [r3, #0]
    768e:	3301      	adds	r3, #1
    7690:	e7f9      	b.n	7686 <memset+0x4>
	...

00007694 <iprintf>:
    7694:	b40f      	push	{r0, r1, r2, r3}
    7696:	4b0b      	ldr	r3, [pc, #44]	; (76c4 <iprintf+0x30>)
    7698:	b513      	push	{r0, r1, r4, lr}
    769a:	681c      	ldr	r4, [r3, #0]
    769c:	2c00      	cmp	r4, #0
    769e:	d005      	beq.n	76ac <iprintf+0x18>
    76a0:	69a3      	ldr	r3, [r4, #24]
    76a2:	2b00      	cmp	r3, #0
    76a4:	d102      	bne.n	76ac <iprintf+0x18>
    76a6:	0020      	movs	r0, r4
    76a8:	f000 f9de 	bl	7a68 <__sinit>
    76ac:	ab05      	add	r3, sp, #20
    76ae:	9a04      	ldr	r2, [sp, #16]
    76b0:	68a1      	ldr	r1, [r4, #8]
    76b2:	0020      	movs	r0, r4
    76b4:	9301      	str	r3, [sp, #4]
    76b6:	f000 fd19 	bl	80ec <_vfiprintf_r>
    76ba:	bc16      	pop	{r1, r2, r4}
    76bc:	bc08      	pop	{r3}
    76be:	b004      	add	sp, #16
    76c0:	4718      	bx	r3
    76c2:	46c0      	nop			; (mov r8, r8)
    76c4:	200000fc 	.word	0x200000fc

000076c8 <setbuf>:
    76c8:	424a      	negs	r2, r1
    76ca:	414a      	adcs	r2, r1
    76cc:	2380      	movs	r3, #128	; 0x80
    76ce:	b510      	push	{r4, lr}
    76d0:	0052      	lsls	r2, r2, #1
    76d2:	00db      	lsls	r3, r3, #3
    76d4:	f000 f802 	bl	76dc <setvbuf>
    76d8:	bd10      	pop	{r4, pc}
	...

000076dc <setvbuf>:
    76dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    76de:	001d      	movs	r5, r3
    76e0:	4b4f      	ldr	r3, [pc, #316]	; (7820 <setvbuf+0x144>)
    76e2:	b085      	sub	sp, #20
    76e4:	681e      	ldr	r6, [r3, #0]
    76e6:	0004      	movs	r4, r0
    76e8:	000f      	movs	r7, r1
    76ea:	9200      	str	r2, [sp, #0]
    76ec:	2e00      	cmp	r6, #0
    76ee:	d005      	beq.n	76fc <setvbuf+0x20>
    76f0:	69b3      	ldr	r3, [r6, #24]
    76f2:	2b00      	cmp	r3, #0
    76f4:	d102      	bne.n	76fc <setvbuf+0x20>
    76f6:	0030      	movs	r0, r6
    76f8:	f000 f9b6 	bl	7a68 <__sinit>
    76fc:	4b49      	ldr	r3, [pc, #292]	; (7824 <setvbuf+0x148>)
    76fe:	429c      	cmp	r4, r3
    7700:	d150      	bne.n	77a4 <setvbuf+0xc8>
    7702:	6874      	ldr	r4, [r6, #4]
    7704:	9b00      	ldr	r3, [sp, #0]
    7706:	2b02      	cmp	r3, #2
    7708:	d005      	beq.n	7716 <setvbuf+0x3a>
    770a:	2b01      	cmp	r3, #1
    770c:	d900      	bls.n	7710 <setvbuf+0x34>
    770e:	e084      	b.n	781a <setvbuf+0x13e>
    7710:	2d00      	cmp	r5, #0
    7712:	da00      	bge.n	7716 <setvbuf+0x3a>
    7714:	e081      	b.n	781a <setvbuf+0x13e>
    7716:	0021      	movs	r1, r4
    7718:	0030      	movs	r0, r6
    771a:	f000 f937 	bl	798c <_fflush_r>
    771e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7720:	2900      	cmp	r1, #0
    7722:	d008      	beq.n	7736 <setvbuf+0x5a>
    7724:	0023      	movs	r3, r4
    7726:	3344      	adds	r3, #68	; 0x44
    7728:	4299      	cmp	r1, r3
    772a:	d002      	beq.n	7732 <setvbuf+0x56>
    772c:	0030      	movs	r0, r6
    772e:	f000 faa7 	bl	7c80 <_free_r>
    7732:	2300      	movs	r3, #0
    7734:	6363      	str	r3, [r4, #52]	; 0x34
    7736:	2300      	movs	r3, #0
    7738:	61a3      	str	r3, [r4, #24]
    773a:	6063      	str	r3, [r4, #4]
    773c:	89a3      	ldrh	r3, [r4, #12]
    773e:	061b      	lsls	r3, r3, #24
    7740:	d503      	bpl.n	774a <setvbuf+0x6e>
    7742:	6921      	ldr	r1, [r4, #16]
    7744:	0030      	movs	r0, r6
    7746:	f000 fa9b 	bl	7c80 <_free_r>
    774a:	89a3      	ldrh	r3, [r4, #12]
    774c:	4a36      	ldr	r2, [pc, #216]	; (7828 <setvbuf+0x14c>)
    774e:	4013      	ands	r3, r2
    7750:	81a3      	strh	r3, [r4, #12]
    7752:	9b00      	ldr	r3, [sp, #0]
    7754:	2b02      	cmp	r3, #2
    7756:	d05a      	beq.n	780e <setvbuf+0x132>
    7758:	ab03      	add	r3, sp, #12
    775a:	aa02      	add	r2, sp, #8
    775c:	0021      	movs	r1, r4
    775e:	0030      	movs	r0, r6
    7760:	f000 fa18 	bl	7b94 <__swhatbuf_r>
    7764:	89a3      	ldrh	r3, [r4, #12]
    7766:	4318      	orrs	r0, r3
    7768:	81a0      	strh	r0, [r4, #12]
    776a:	2d00      	cmp	r5, #0
    776c:	d124      	bne.n	77b8 <setvbuf+0xdc>
    776e:	9d02      	ldr	r5, [sp, #8]
    7770:	0028      	movs	r0, r5
    7772:	f000 fa7b 	bl	7c6c <malloc>
    7776:	9501      	str	r5, [sp, #4]
    7778:	1e07      	subs	r7, r0, #0
    777a:	d142      	bne.n	7802 <setvbuf+0x126>
    777c:	9b02      	ldr	r3, [sp, #8]
    777e:	9301      	str	r3, [sp, #4]
    7780:	42ab      	cmp	r3, r5
    7782:	d139      	bne.n	77f8 <setvbuf+0x11c>
    7784:	2001      	movs	r0, #1
    7786:	4240      	negs	r0, r0
    7788:	2302      	movs	r3, #2
    778a:	89a2      	ldrh	r2, [r4, #12]
    778c:	4313      	orrs	r3, r2
    778e:	81a3      	strh	r3, [r4, #12]
    7790:	2300      	movs	r3, #0
    7792:	60a3      	str	r3, [r4, #8]
    7794:	0023      	movs	r3, r4
    7796:	3347      	adds	r3, #71	; 0x47
    7798:	6023      	str	r3, [r4, #0]
    779a:	6123      	str	r3, [r4, #16]
    779c:	2301      	movs	r3, #1
    779e:	6163      	str	r3, [r4, #20]
    77a0:	b005      	add	sp, #20
    77a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77a4:	4b21      	ldr	r3, [pc, #132]	; (782c <setvbuf+0x150>)
    77a6:	429c      	cmp	r4, r3
    77a8:	d101      	bne.n	77ae <setvbuf+0xd2>
    77aa:	68b4      	ldr	r4, [r6, #8]
    77ac:	e7aa      	b.n	7704 <setvbuf+0x28>
    77ae:	4b20      	ldr	r3, [pc, #128]	; (7830 <setvbuf+0x154>)
    77b0:	429c      	cmp	r4, r3
    77b2:	d1a7      	bne.n	7704 <setvbuf+0x28>
    77b4:	68f4      	ldr	r4, [r6, #12]
    77b6:	e7a5      	b.n	7704 <setvbuf+0x28>
    77b8:	2f00      	cmp	r7, #0
    77ba:	d0d9      	beq.n	7770 <setvbuf+0x94>
    77bc:	69b3      	ldr	r3, [r6, #24]
    77be:	2b00      	cmp	r3, #0
    77c0:	d102      	bne.n	77c8 <setvbuf+0xec>
    77c2:	0030      	movs	r0, r6
    77c4:	f000 f950 	bl	7a68 <__sinit>
    77c8:	9b00      	ldr	r3, [sp, #0]
    77ca:	2b01      	cmp	r3, #1
    77cc:	d103      	bne.n	77d6 <setvbuf+0xfa>
    77ce:	89a3      	ldrh	r3, [r4, #12]
    77d0:	9a00      	ldr	r2, [sp, #0]
    77d2:	431a      	orrs	r2, r3
    77d4:	81a2      	strh	r2, [r4, #12]
    77d6:	2008      	movs	r0, #8
    77d8:	89a3      	ldrh	r3, [r4, #12]
    77da:	6027      	str	r7, [r4, #0]
    77dc:	6127      	str	r7, [r4, #16]
    77de:	6165      	str	r5, [r4, #20]
    77e0:	4018      	ands	r0, r3
    77e2:	d018      	beq.n	7816 <setvbuf+0x13a>
    77e4:	2001      	movs	r0, #1
    77e6:	4018      	ands	r0, r3
    77e8:	2300      	movs	r3, #0
    77ea:	4298      	cmp	r0, r3
    77ec:	d011      	beq.n	7812 <setvbuf+0x136>
    77ee:	426d      	negs	r5, r5
    77f0:	60a3      	str	r3, [r4, #8]
    77f2:	61a5      	str	r5, [r4, #24]
    77f4:	0018      	movs	r0, r3
    77f6:	e7d3      	b.n	77a0 <setvbuf+0xc4>
    77f8:	9801      	ldr	r0, [sp, #4]
    77fa:	f000 fa37 	bl	7c6c <malloc>
    77fe:	1e07      	subs	r7, r0, #0
    7800:	d0c0      	beq.n	7784 <setvbuf+0xa8>
    7802:	2380      	movs	r3, #128	; 0x80
    7804:	89a2      	ldrh	r2, [r4, #12]
    7806:	9d01      	ldr	r5, [sp, #4]
    7808:	4313      	orrs	r3, r2
    780a:	81a3      	strh	r3, [r4, #12]
    780c:	e7d6      	b.n	77bc <setvbuf+0xe0>
    780e:	2000      	movs	r0, #0
    7810:	e7ba      	b.n	7788 <setvbuf+0xac>
    7812:	60a5      	str	r5, [r4, #8]
    7814:	e7c4      	b.n	77a0 <setvbuf+0xc4>
    7816:	60a0      	str	r0, [r4, #8]
    7818:	e7c2      	b.n	77a0 <setvbuf+0xc4>
    781a:	2001      	movs	r0, #1
    781c:	4240      	negs	r0, r0
    781e:	e7bf      	b.n	77a0 <setvbuf+0xc4>
    7820:	200000fc 	.word	0x200000fc
    7824:	00008dc8 	.word	0x00008dc8
    7828:	fffff35c 	.word	0xfffff35c
    782c:	00008de8 	.word	0x00008de8
    7830:	00008da8 	.word	0x00008da8

00007834 <siprintf>:
    7834:	b40e      	push	{r1, r2, r3}
    7836:	b510      	push	{r4, lr}
    7838:	b09d      	sub	sp, #116	; 0x74
    783a:	a902      	add	r1, sp, #8
    783c:	9002      	str	r0, [sp, #8]
    783e:	6108      	str	r0, [r1, #16]
    7840:	480b      	ldr	r0, [pc, #44]	; (7870 <siprintf+0x3c>)
    7842:	2482      	movs	r4, #130	; 0x82
    7844:	6088      	str	r0, [r1, #8]
    7846:	6148      	str	r0, [r1, #20]
    7848:	2001      	movs	r0, #1
    784a:	4240      	negs	r0, r0
    784c:	ab1f      	add	r3, sp, #124	; 0x7c
    784e:	81c8      	strh	r0, [r1, #14]
    7850:	4808      	ldr	r0, [pc, #32]	; (7874 <siprintf+0x40>)
    7852:	cb04      	ldmia	r3!, {r2}
    7854:	00a4      	lsls	r4, r4, #2
    7856:	6800      	ldr	r0, [r0, #0]
    7858:	9301      	str	r3, [sp, #4]
    785a:	818c      	strh	r4, [r1, #12]
    785c:	f000 fb1a 	bl	7e94 <_svfiprintf_r>
    7860:	2300      	movs	r3, #0
    7862:	9a02      	ldr	r2, [sp, #8]
    7864:	7013      	strb	r3, [r2, #0]
    7866:	b01d      	add	sp, #116	; 0x74
    7868:	bc10      	pop	{r4}
    786a:	bc08      	pop	{r3}
    786c:	b003      	add	sp, #12
    786e:	4718      	bx	r3
    7870:	7fffffff 	.word	0x7fffffff
    7874:	200000fc 	.word	0x200000fc

00007878 <__sflush_r>:
    7878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    787a:	898a      	ldrh	r2, [r1, #12]
    787c:	0005      	movs	r5, r0
    787e:	000c      	movs	r4, r1
    7880:	0713      	lsls	r3, r2, #28
    7882:	d460      	bmi.n	7946 <__sflush_r+0xce>
    7884:	684b      	ldr	r3, [r1, #4]
    7886:	2b00      	cmp	r3, #0
    7888:	dc04      	bgt.n	7894 <__sflush_r+0x1c>
    788a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    788c:	2b00      	cmp	r3, #0
    788e:	dc01      	bgt.n	7894 <__sflush_r+0x1c>
    7890:	2000      	movs	r0, #0
    7892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7894:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7896:	2f00      	cmp	r7, #0
    7898:	d0fa      	beq.n	7890 <__sflush_r+0x18>
    789a:	2300      	movs	r3, #0
    789c:	682e      	ldr	r6, [r5, #0]
    789e:	602b      	str	r3, [r5, #0]
    78a0:	2380      	movs	r3, #128	; 0x80
    78a2:	015b      	lsls	r3, r3, #5
    78a4:	401a      	ands	r2, r3
    78a6:	d034      	beq.n	7912 <__sflush_r+0x9a>
    78a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    78aa:	89a3      	ldrh	r3, [r4, #12]
    78ac:	075b      	lsls	r3, r3, #29
    78ae:	d506      	bpl.n	78be <__sflush_r+0x46>
    78b0:	6863      	ldr	r3, [r4, #4]
    78b2:	1ac0      	subs	r0, r0, r3
    78b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    78b6:	2b00      	cmp	r3, #0
    78b8:	d001      	beq.n	78be <__sflush_r+0x46>
    78ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    78bc:	1ac0      	subs	r0, r0, r3
    78be:	0002      	movs	r2, r0
    78c0:	6a21      	ldr	r1, [r4, #32]
    78c2:	2300      	movs	r3, #0
    78c4:	0028      	movs	r0, r5
    78c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    78c8:	47b8      	blx	r7
    78ca:	89a1      	ldrh	r1, [r4, #12]
    78cc:	1c43      	adds	r3, r0, #1
    78ce:	d106      	bne.n	78de <__sflush_r+0x66>
    78d0:	682b      	ldr	r3, [r5, #0]
    78d2:	2b1d      	cmp	r3, #29
    78d4:	d831      	bhi.n	793a <__sflush_r+0xc2>
    78d6:	4a2c      	ldr	r2, [pc, #176]	; (7988 <__sflush_r+0x110>)
    78d8:	40da      	lsrs	r2, r3
    78da:	07d3      	lsls	r3, r2, #31
    78dc:	d52d      	bpl.n	793a <__sflush_r+0xc2>
    78de:	2300      	movs	r3, #0
    78e0:	6063      	str	r3, [r4, #4]
    78e2:	6923      	ldr	r3, [r4, #16]
    78e4:	6023      	str	r3, [r4, #0]
    78e6:	04cb      	lsls	r3, r1, #19
    78e8:	d505      	bpl.n	78f6 <__sflush_r+0x7e>
    78ea:	1c43      	adds	r3, r0, #1
    78ec:	d102      	bne.n	78f4 <__sflush_r+0x7c>
    78ee:	682b      	ldr	r3, [r5, #0]
    78f0:	2b00      	cmp	r3, #0
    78f2:	d100      	bne.n	78f6 <__sflush_r+0x7e>
    78f4:	6560      	str	r0, [r4, #84]	; 0x54
    78f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    78f8:	602e      	str	r6, [r5, #0]
    78fa:	2900      	cmp	r1, #0
    78fc:	d0c8      	beq.n	7890 <__sflush_r+0x18>
    78fe:	0023      	movs	r3, r4
    7900:	3344      	adds	r3, #68	; 0x44
    7902:	4299      	cmp	r1, r3
    7904:	d002      	beq.n	790c <__sflush_r+0x94>
    7906:	0028      	movs	r0, r5
    7908:	f000 f9ba 	bl	7c80 <_free_r>
    790c:	2000      	movs	r0, #0
    790e:	6360      	str	r0, [r4, #52]	; 0x34
    7910:	e7bf      	b.n	7892 <__sflush_r+0x1a>
    7912:	2301      	movs	r3, #1
    7914:	6a21      	ldr	r1, [r4, #32]
    7916:	0028      	movs	r0, r5
    7918:	47b8      	blx	r7
    791a:	1c43      	adds	r3, r0, #1
    791c:	d1c5      	bne.n	78aa <__sflush_r+0x32>
    791e:	682b      	ldr	r3, [r5, #0]
    7920:	2b00      	cmp	r3, #0
    7922:	d0c2      	beq.n	78aa <__sflush_r+0x32>
    7924:	2b1d      	cmp	r3, #29
    7926:	d001      	beq.n	792c <__sflush_r+0xb4>
    7928:	2b16      	cmp	r3, #22
    792a:	d101      	bne.n	7930 <__sflush_r+0xb8>
    792c:	602e      	str	r6, [r5, #0]
    792e:	e7af      	b.n	7890 <__sflush_r+0x18>
    7930:	2340      	movs	r3, #64	; 0x40
    7932:	89a2      	ldrh	r2, [r4, #12]
    7934:	4313      	orrs	r3, r2
    7936:	81a3      	strh	r3, [r4, #12]
    7938:	e7ab      	b.n	7892 <__sflush_r+0x1a>
    793a:	2340      	movs	r3, #64	; 0x40
    793c:	430b      	orrs	r3, r1
    793e:	2001      	movs	r0, #1
    7940:	81a3      	strh	r3, [r4, #12]
    7942:	4240      	negs	r0, r0
    7944:	e7a5      	b.n	7892 <__sflush_r+0x1a>
    7946:	690f      	ldr	r7, [r1, #16]
    7948:	2f00      	cmp	r7, #0
    794a:	d0a1      	beq.n	7890 <__sflush_r+0x18>
    794c:	680b      	ldr	r3, [r1, #0]
    794e:	600f      	str	r7, [r1, #0]
    7950:	1bdb      	subs	r3, r3, r7
    7952:	9301      	str	r3, [sp, #4]
    7954:	2300      	movs	r3, #0
    7956:	0792      	lsls	r2, r2, #30
    7958:	d100      	bne.n	795c <__sflush_r+0xe4>
    795a:	694b      	ldr	r3, [r1, #20]
    795c:	60a3      	str	r3, [r4, #8]
    795e:	9b01      	ldr	r3, [sp, #4]
    7960:	2b00      	cmp	r3, #0
    7962:	dc00      	bgt.n	7966 <__sflush_r+0xee>
    7964:	e794      	b.n	7890 <__sflush_r+0x18>
    7966:	9b01      	ldr	r3, [sp, #4]
    7968:	003a      	movs	r2, r7
    796a:	6a21      	ldr	r1, [r4, #32]
    796c:	0028      	movs	r0, r5
    796e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    7970:	47b0      	blx	r6
    7972:	2800      	cmp	r0, #0
    7974:	dc03      	bgt.n	797e <__sflush_r+0x106>
    7976:	2340      	movs	r3, #64	; 0x40
    7978:	89a2      	ldrh	r2, [r4, #12]
    797a:	4313      	orrs	r3, r2
    797c:	e7df      	b.n	793e <__sflush_r+0xc6>
    797e:	9b01      	ldr	r3, [sp, #4]
    7980:	183f      	adds	r7, r7, r0
    7982:	1a1b      	subs	r3, r3, r0
    7984:	9301      	str	r3, [sp, #4]
    7986:	e7ea      	b.n	795e <__sflush_r+0xe6>
    7988:	20400001 	.word	0x20400001

0000798c <_fflush_r>:
    798c:	690b      	ldr	r3, [r1, #16]
    798e:	b570      	push	{r4, r5, r6, lr}
    7990:	0005      	movs	r5, r0
    7992:	000c      	movs	r4, r1
    7994:	2b00      	cmp	r3, #0
    7996:	d101      	bne.n	799c <_fflush_r+0x10>
    7998:	2000      	movs	r0, #0
    799a:	bd70      	pop	{r4, r5, r6, pc}
    799c:	2800      	cmp	r0, #0
    799e:	d004      	beq.n	79aa <_fflush_r+0x1e>
    79a0:	6983      	ldr	r3, [r0, #24]
    79a2:	2b00      	cmp	r3, #0
    79a4:	d101      	bne.n	79aa <_fflush_r+0x1e>
    79a6:	f000 f85f 	bl	7a68 <__sinit>
    79aa:	4b0b      	ldr	r3, [pc, #44]	; (79d8 <_fflush_r+0x4c>)
    79ac:	429c      	cmp	r4, r3
    79ae:	d109      	bne.n	79c4 <_fflush_r+0x38>
    79b0:	686c      	ldr	r4, [r5, #4]
    79b2:	220c      	movs	r2, #12
    79b4:	5ea3      	ldrsh	r3, [r4, r2]
    79b6:	2b00      	cmp	r3, #0
    79b8:	d0ee      	beq.n	7998 <_fflush_r+0xc>
    79ba:	0021      	movs	r1, r4
    79bc:	0028      	movs	r0, r5
    79be:	f7ff ff5b 	bl	7878 <__sflush_r>
    79c2:	e7ea      	b.n	799a <_fflush_r+0xe>
    79c4:	4b05      	ldr	r3, [pc, #20]	; (79dc <_fflush_r+0x50>)
    79c6:	429c      	cmp	r4, r3
    79c8:	d101      	bne.n	79ce <_fflush_r+0x42>
    79ca:	68ac      	ldr	r4, [r5, #8]
    79cc:	e7f1      	b.n	79b2 <_fflush_r+0x26>
    79ce:	4b04      	ldr	r3, [pc, #16]	; (79e0 <_fflush_r+0x54>)
    79d0:	429c      	cmp	r4, r3
    79d2:	d1ee      	bne.n	79b2 <_fflush_r+0x26>
    79d4:	68ec      	ldr	r4, [r5, #12]
    79d6:	e7ec      	b.n	79b2 <_fflush_r+0x26>
    79d8:	00008dc8 	.word	0x00008dc8
    79dc:	00008de8 	.word	0x00008de8
    79e0:	00008da8 	.word	0x00008da8

000079e4 <_cleanup_r>:
    79e4:	b510      	push	{r4, lr}
    79e6:	4902      	ldr	r1, [pc, #8]	; (79f0 <_cleanup_r+0xc>)
    79e8:	f000 f8b2 	bl	7b50 <_fwalk_reent>
    79ec:	bd10      	pop	{r4, pc}
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	0000798d 	.word	0x0000798d

000079f4 <std.isra.0>:
    79f4:	2300      	movs	r3, #0
    79f6:	b510      	push	{r4, lr}
    79f8:	0004      	movs	r4, r0
    79fa:	6003      	str	r3, [r0, #0]
    79fc:	6043      	str	r3, [r0, #4]
    79fe:	6083      	str	r3, [r0, #8]
    7a00:	8181      	strh	r1, [r0, #12]
    7a02:	6643      	str	r3, [r0, #100]	; 0x64
    7a04:	81c2      	strh	r2, [r0, #14]
    7a06:	6103      	str	r3, [r0, #16]
    7a08:	6143      	str	r3, [r0, #20]
    7a0a:	6183      	str	r3, [r0, #24]
    7a0c:	0019      	movs	r1, r3
    7a0e:	2208      	movs	r2, #8
    7a10:	305c      	adds	r0, #92	; 0x5c
    7a12:	f7ff fe36 	bl	7682 <memset>
    7a16:	4b05      	ldr	r3, [pc, #20]	; (7a2c <std.isra.0+0x38>)
    7a18:	6224      	str	r4, [r4, #32]
    7a1a:	6263      	str	r3, [r4, #36]	; 0x24
    7a1c:	4b04      	ldr	r3, [pc, #16]	; (7a30 <std.isra.0+0x3c>)
    7a1e:	62a3      	str	r3, [r4, #40]	; 0x28
    7a20:	4b04      	ldr	r3, [pc, #16]	; (7a34 <std.isra.0+0x40>)
    7a22:	62e3      	str	r3, [r4, #44]	; 0x2c
    7a24:	4b04      	ldr	r3, [pc, #16]	; (7a38 <std.isra.0+0x44>)
    7a26:	6323      	str	r3, [r4, #48]	; 0x30
    7a28:	bd10      	pop	{r4, pc}
    7a2a:	46c0      	nop			; (mov r8, r8)
    7a2c:	00008659 	.word	0x00008659
    7a30:	00008681 	.word	0x00008681
    7a34:	000086b9 	.word	0x000086b9
    7a38:	000086e5 	.word	0x000086e5

00007a3c <__sfmoreglue>:
    7a3c:	b570      	push	{r4, r5, r6, lr}
    7a3e:	2568      	movs	r5, #104	; 0x68
    7a40:	1e4a      	subs	r2, r1, #1
    7a42:	4355      	muls	r5, r2
    7a44:	000e      	movs	r6, r1
    7a46:	0029      	movs	r1, r5
    7a48:	3174      	adds	r1, #116	; 0x74
    7a4a:	f000 f963 	bl	7d14 <_malloc_r>
    7a4e:	1e04      	subs	r4, r0, #0
    7a50:	d008      	beq.n	7a64 <__sfmoreglue+0x28>
    7a52:	2100      	movs	r1, #0
    7a54:	002a      	movs	r2, r5
    7a56:	6001      	str	r1, [r0, #0]
    7a58:	6046      	str	r6, [r0, #4]
    7a5a:	300c      	adds	r0, #12
    7a5c:	60a0      	str	r0, [r4, #8]
    7a5e:	3268      	adds	r2, #104	; 0x68
    7a60:	f7ff fe0f 	bl	7682 <memset>
    7a64:	0020      	movs	r0, r4
    7a66:	bd70      	pop	{r4, r5, r6, pc}

00007a68 <__sinit>:
    7a68:	6983      	ldr	r3, [r0, #24]
    7a6a:	b513      	push	{r0, r1, r4, lr}
    7a6c:	0004      	movs	r4, r0
    7a6e:	2b00      	cmp	r3, #0
    7a70:	d128      	bne.n	7ac4 <__sinit+0x5c>
    7a72:	6483      	str	r3, [r0, #72]	; 0x48
    7a74:	64c3      	str	r3, [r0, #76]	; 0x4c
    7a76:	6503      	str	r3, [r0, #80]	; 0x50
    7a78:	4b13      	ldr	r3, [pc, #76]	; (7ac8 <__sinit+0x60>)
    7a7a:	4a14      	ldr	r2, [pc, #80]	; (7acc <__sinit+0x64>)
    7a7c:	681b      	ldr	r3, [r3, #0]
    7a7e:	6282      	str	r2, [r0, #40]	; 0x28
    7a80:	9301      	str	r3, [sp, #4]
    7a82:	4298      	cmp	r0, r3
    7a84:	d101      	bne.n	7a8a <__sinit+0x22>
    7a86:	2301      	movs	r3, #1
    7a88:	6183      	str	r3, [r0, #24]
    7a8a:	0020      	movs	r0, r4
    7a8c:	f000 f820 	bl	7ad0 <__sfp>
    7a90:	6060      	str	r0, [r4, #4]
    7a92:	0020      	movs	r0, r4
    7a94:	f000 f81c 	bl	7ad0 <__sfp>
    7a98:	60a0      	str	r0, [r4, #8]
    7a9a:	0020      	movs	r0, r4
    7a9c:	f000 f818 	bl	7ad0 <__sfp>
    7aa0:	2200      	movs	r2, #0
    7aa2:	60e0      	str	r0, [r4, #12]
    7aa4:	2104      	movs	r1, #4
    7aa6:	6860      	ldr	r0, [r4, #4]
    7aa8:	f7ff ffa4 	bl	79f4 <std.isra.0>
    7aac:	2201      	movs	r2, #1
    7aae:	2109      	movs	r1, #9
    7ab0:	68a0      	ldr	r0, [r4, #8]
    7ab2:	f7ff ff9f 	bl	79f4 <std.isra.0>
    7ab6:	2202      	movs	r2, #2
    7ab8:	2112      	movs	r1, #18
    7aba:	68e0      	ldr	r0, [r4, #12]
    7abc:	f7ff ff9a 	bl	79f4 <std.isra.0>
    7ac0:	2301      	movs	r3, #1
    7ac2:	61a3      	str	r3, [r4, #24]
    7ac4:	bd13      	pop	{r0, r1, r4, pc}
    7ac6:	46c0      	nop			; (mov r8, r8)
    7ac8:	00008da4 	.word	0x00008da4
    7acc:	000079e5 	.word	0x000079e5

00007ad0 <__sfp>:
    7ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ad2:	4b1e      	ldr	r3, [pc, #120]	; (7b4c <__sfp+0x7c>)
    7ad4:	0007      	movs	r7, r0
    7ad6:	681e      	ldr	r6, [r3, #0]
    7ad8:	69b3      	ldr	r3, [r6, #24]
    7ada:	2b00      	cmp	r3, #0
    7adc:	d102      	bne.n	7ae4 <__sfp+0x14>
    7ade:	0030      	movs	r0, r6
    7ae0:	f7ff ffc2 	bl	7a68 <__sinit>
    7ae4:	3648      	adds	r6, #72	; 0x48
    7ae6:	68b4      	ldr	r4, [r6, #8]
    7ae8:	6873      	ldr	r3, [r6, #4]
    7aea:	3b01      	subs	r3, #1
    7aec:	d504      	bpl.n	7af8 <__sfp+0x28>
    7aee:	6833      	ldr	r3, [r6, #0]
    7af0:	2b00      	cmp	r3, #0
    7af2:	d007      	beq.n	7b04 <__sfp+0x34>
    7af4:	6836      	ldr	r6, [r6, #0]
    7af6:	e7f6      	b.n	7ae6 <__sfp+0x16>
    7af8:	220c      	movs	r2, #12
    7afa:	5ea5      	ldrsh	r5, [r4, r2]
    7afc:	2d00      	cmp	r5, #0
    7afe:	d00d      	beq.n	7b1c <__sfp+0x4c>
    7b00:	3468      	adds	r4, #104	; 0x68
    7b02:	e7f2      	b.n	7aea <__sfp+0x1a>
    7b04:	2104      	movs	r1, #4
    7b06:	0038      	movs	r0, r7
    7b08:	f7ff ff98 	bl	7a3c <__sfmoreglue>
    7b0c:	6030      	str	r0, [r6, #0]
    7b0e:	2800      	cmp	r0, #0
    7b10:	d1f0      	bne.n	7af4 <__sfp+0x24>
    7b12:	230c      	movs	r3, #12
    7b14:	0004      	movs	r4, r0
    7b16:	603b      	str	r3, [r7, #0]
    7b18:	0020      	movs	r0, r4
    7b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b1c:	2301      	movs	r3, #1
    7b1e:	0020      	movs	r0, r4
    7b20:	425b      	negs	r3, r3
    7b22:	81e3      	strh	r3, [r4, #14]
    7b24:	3302      	adds	r3, #2
    7b26:	81a3      	strh	r3, [r4, #12]
    7b28:	6665      	str	r5, [r4, #100]	; 0x64
    7b2a:	6025      	str	r5, [r4, #0]
    7b2c:	60a5      	str	r5, [r4, #8]
    7b2e:	6065      	str	r5, [r4, #4]
    7b30:	6125      	str	r5, [r4, #16]
    7b32:	6165      	str	r5, [r4, #20]
    7b34:	61a5      	str	r5, [r4, #24]
    7b36:	2208      	movs	r2, #8
    7b38:	0029      	movs	r1, r5
    7b3a:	305c      	adds	r0, #92	; 0x5c
    7b3c:	f7ff fda1 	bl	7682 <memset>
    7b40:	6365      	str	r5, [r4, #52]	; 0x34
    7b42:	63a5      	str	r5, [r4, #56]	; 0x38
    7b44:	64a5      	str	r5, [r4, #72]	; 0x48
    7b46:	64e5      	str	r5, [r4, #76]	; 0x4c
    7b48:	e7e6      	b.n	7b18 <__sfp+0x48>
    7b4a:	46c0      	nop			; (mov r8, r8)
    7b4c:	00008da4 	.word	0x00008da4

00007b50 <_fwalk_reent>:
    7b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b52:	0004      	movs	r4, r0
    7b54:	0007      	movs	r7, r0
    7b56:	2600      	movs	r6, #0
    7b58:	9101      	str	r1, [sp, #4]
    7b5a:	3448      	adds	r4, #72	; 0x48
    7b5c:	2c00      	cmp	r4, #0
    7b5e:	d101      	bne.n	7b64 <_fwalk_reent+0x14>
    7b60:	0030      	movs	r0, r6
    7b62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7b64:	6863      	ldr	r3, [r4, #4]
    7b66:	68a5      	ldr	r5, [r4, #8]
    7b68:	9300      	str	r3, [sp, #0]
    7b6a:	9b00      	ldr	r3, [sp, #0]
    7b6c:	3b01      	subs	r3, #1
    7b6e:	9300      	str	r3, [sp, #0]
    7b70:	d501      	bpl.n	7b76 <_fwalk_reent+0x26>
    7b72:	6824      	ldr	r4, [r4, #0]
    7b74:	e7f2      	b.n	7b5c <_fwalk_reent+0xc>
    7b76:	89ab      	ldrh	r3, [r5, #12]
    7b78:	2b01      	cmp	r3, #1
    7b7a:	d908      	bls.n	7b8e <_fwalk_reent+0x3e>
    7b7c:	220e      	movs	r2, #14
    7b7e:	5eab      	ldrsh	r3, [r5, r2]
    7b80:	3301      	adds	r3, #1
    7b82:	d004      	beq.n	7b8e <_fwalk_reent+0x3e>
    7b84:	0029      	movs	r1, r5
    7b86:	0038      	movs	r0, r7
    7b88:	9b01      	ldr	r3, [sp, #4]
    7b8a:	4798      	blx	r3
    7b8c:	4306      	orrs	r6, r0
    7b8e:	3568      	adds	r5, #104	; 0x68
    7b90:	e7eb      	b.n	7b6a <_fwalk_reent+0x1a>
	...

00007b94 <__swhatbuf_r>:
    7b94:	b570      	push	{r4, r5, r6, lr}
    7b96:	000e      	movs	r6, r1
    7b98:	001d      	movs	r5, r3
    7b9a:	230e      	movs	r3, #14
    7b9c:	5ec9      	ldrsh	r1, [r1, r3]
    7b9e:	b090      	sub	sp, #64	; 0x40
    7ba0:	0014      	movs	r4, r2
    7ba2:	2900      	cmp	r1, #0
    7ba4:	da07      	bge.n	7bb6 <__swhatbuf_r+0x22>
    7ba6:	2300      	movs	r3, #0
    7ba8:	602b      	str	r3, [r5, #0]
    7baa:	89b3      	ldrh	r3, [r6, #12]
    7bac:	061b      	lsls	r3, r3, #24
    7bae:	d411      	bmi.n	7bd4 <__swhatbuf_r+0x40>
    7bb0:	2380      	movs	r3, #128	; 0x80
    7bb2:	00db      	lsls	r3, r3, #3
    7bb4:	e00f      	b.n	7bd6 <__swhatbuf_r+0x42>
    7bb6:	aa01      	add	r2, sp, #4
    7bb8:	f000 fe8c 	bl	88d4 <_fstat_r>
    7bbc:	2800      	cmp	r0, #0
    7bbe:	dbf2      	blt.n	7ba6 <__swhatbuf_r+0x12>
    7bc0:	22f0      	movs	r2, #240	; 0xf0
    7bc2:	9b02      	ldr	r3, [sp, #8]
    7bc4:	0212      	lsls	r2, r2, #8
    7bc6:	4013      	ands	r3, r2
    7bc8:	4a05      	ldr	r2, [pc, #20]	; (7be0 <__swhatbuf_r+0x4c>)
    7bca:	189b      	adds	r3, r3, r2
    7bcc:	425a      	negs	r2, r3
    7bce:	4153      	adcs	r3, r2
    7bd0:	602b      	str	r3, [r5, #0]
    7bd2:	e7ed      	b.n	7bb0 <__swhatbuf_r+0x1c>
    7bd4:	2340      	movs	r3, #64	; 0x40
    7bd6:	2000      	movs	r0, #0
    7bd8:	6023      	str	r3, [r4, #0]
    7bda:	b010      	add	sp, #64	; 0x40
    7bdc:	bd70      	pop	{r4, r5, r6, pc}
    7bde:	46c0      	nop			; (mov r8, r8)
    7be0:	ffffe000 	.word	0xffffe000

00007be4 <__smakebuf_r>:
    7be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7be6:	2602      	movs	r6, #2
    7be8:	898b      	ldrh	r3, [r1, #12]
    7bea:	0005      	movs	r5, r0
    7bec:	000c      	movs	r4, r1
    7bee:	4233      	tst	r3, r6
    7bf0:	d006      	beq.n	7c00 <__smakebuf_r+0x1c>
    7bf2:	0023      	movs	r3, r4
    7bf4:	3347      	adds	r3, #71	; 0x47
    7bf6:	6023      	str	r3, [r4, #0]
    7bf8:	6123      	str	r3, [r4, #16]
    7bfa:	2301      	movs	r3, #1
    7bfc:	6163      	str	r3, [r4, #20]
    7bfe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7c00:	ab01      	add	r3, sp, #4
    7c02:	466a      	mov	r2, sp
    7c04:	f7ff ffc6 	bl	7b94 <__swhatbuf_r>
    7c08:	9900      	ldr	r1, [sp, #0]
    7c0a:	0007      	movs	r7, r0
    7c0c:	0028      	movs	r0, r5
    7c0e:	f000 f881 	bl	7d14 <_malloc_r>
    7c12:	2800      	cmp	r0, #0
    7c14:	d108      	bne.n	7c28 <__smakebuf_r+0x44>
    7c16:	220c      	movs	r2, #12
    7c18:	5ea3      	ldrsh	r3, [r4, r2]
    7c1a:	059a      	lsls	r2, r3, #22
    7c1c:	d4ef      	bmi.n	7bfe <__smakebuf_r+0x1a>
    7c1e:	2203      	movs	r2, #3
    7c20:	4393      	bics	r3, r2
    7c22:	431e      	orrs	r6, r3
    7c24:	81a6      	strh	r6, [r4, #12]
    7c26:	e7e4      	b.n	7bf2 <__smakebuf_r+0xe>
    7c28:	4b0f      	ldr	r3, [pc, #60]	; (7c68 <__smakebuf_r+0x84>)
    7c2a:	62ab      	str	r3, [r5, #40]	; 0x28
    7c2c:	2380      	movs	r3, #128	; 0x80
    7c2e:	89a2      	ldrh	r2, [r4, #12]
    7c30:	6020      	str	r0, [r4, #0]
    7c32:	4313      	orrs	r3, r2
    7c34:	81a3      	strh	r3, [r4, #12]
    7c36:	9b00      	ldr	r3, [sp, #0]
    7c38:	6120      	str	r0, [r4, #16]
    7c3a:	6163      	str	r3, [r4, #20]
    7c3c:	9b01      	ldr	r3, [sp, #4]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d00d      	beq.n	7c5e <__smakebuf_r+0x7a>
    7c42:	230e      	movs	r3, #14
    7c44:	5ee1      	ldrsh	r1, [r4, r3]
    7c46:	0028      	movs	r0, r5
    7c48:	f000 fe56 	bl	88f8 <_isatty_r>
    7c4c:	2800      	cmp	r0, #0
    7c4e:	d006      	beq.n	7c5e <__smakebuf_r+0x7a>
    7c50:	2203      	movs	r2, #3
    7c52:	89a3      	ldrh	r3, [r4, #12]
    7c54:	4393      	bics	r3, r2
    7c56:	001a      	movs	r2, r3
    7c58:	2301      	movs	r3, #1
    7c5a:	4313      	orrs	r3, r2
    7c5c:	81a3      	strh	r3, [r4, #12]
    7c5e:	89a0      	ldrh	r0, [r4, #12]
    7c60:	4338      	orrs	r0, r7
    7c62:	81a0      	strh	r0, [r4, #12]
    7c64:	e7cb      	b.n	7bfe <__smakebuf_r+0x1a>
    7c66:	46c0      	nop			; (mov r8, r8)
    7c68:	000079e5 	.word	0x000079e5

00007c6c <malloc>:
    7c6c:	b510      	push	{r4, lr}
    7c6e:	4b03      	ldr	r3, [pc, #12]	; (7c7c <malloc+0x10>)
    7c70:	0001      	movs	r1, r0
    7c72:	6818      	ldr	r0, [r3, #0]
    7c74:	f000 f84e 	bl	7d14 <_malloc_r>
    7c78:	bd10      	pop	{r4, pc}
    7c7a:	46c0      	nop			; (mov r8, r8)
    7c7c:	200000fc 	.word	0x200000fc

00007c80 <_free_r>:
    7c80:	b570      	push	{r4, r5, r6, lr}
    7c82:	0005      	movs	r5, r0
    7c84:	2900      	cmp	r1, #0
    7c86:	d010      	beq.n	7caa <_free_r+0x2a>
    7c88:	1f0c      	subs	r4, r1, #4
    7c8a:	6823      	ldr	r3, [r4, #0]
    7c8c:	2b00      	cmp	r3, #0
    7c8e:	da00      	bge.n	7c92 <_free_r+0x12>
    7c90:	18e4      	adds	r4, r4, r3
    7c92:	0028      	movs	r0, r5
    7c94:	f000 fe73 	bl	897e <__malloc_lock>
    7c98:	4a1d      	ldr	r2, [pc, #116]	; (7d10 <_free_r+0x90>)
    7c9a:	6813      	ldr	r3, [r2, #0]
    7c9c:	2b00      	cmp	r3, #0
    7c9e:	d105      	bne.n	7cac <_free_r+0x2c>
    7ca0:	6063      	str	r3, [r4, #4]
    7ca2:	6014      	str	r4, [r2, #0]
    7ca4:	0028      	movs	r0, r5
    7ca6:	f000 fe6b 	bl	8980 <__malloc_unlock>
    7caa:	bd70      	pop	{r4, r5, r6, pc}
    7cac:	42a3      	cmp	r3, r4
    7cae:	d909      	bls.n	7cc4 <_free_r+0x44>
    7cb0:	6821      	ldr	r1, [r4, #0]
    7cb2:	1860      	adds	r0, r4, r1
    7cb4:	4283      	cmp	r3, r0
    7cb6:	d1f3      	bne.n	7ca0 <_free_r+0x20>
    7cb8:	6818      	ldr	r0, [r3, #0]
    7cba:	685b      	ldr	r3, [r3, #4]
    7cbc:	1841      	adds	r1, r0, r1
    7cbe:	6021      	str	r1, [r4, #0]
    7cc0:	e7ee      	b.n	7ca0 <_free_r+0x20>
    7cc2:	0013      	movs	r3, r2
    7cc4:	685a      	ldr	r2, [r3, #4]
    7cc6:	2a00      	cmp	r2, #0
    7cc8:	d001      	beq.n	7cce <_free_r+0x4e>
    7cca:	42a2      	cmp	r2, r4
    7ccc:	d9f9      	bls.n	7cc2 <_free_r+0x42>
    7cce:	6819      	ldr	r1, [r3, #0]
    7cd0:	1858      	adds	r0, r3, r1
    7cd2:	42a0      	cmp	r0, r4
    7cd4:	d10b      	bne.n	7cee <_free_r+0x6e>
    7cd6:	6820      	ldr	r0, [r4, #0]
    7cd8:	1809      	adds	r1, r1, r0
    7cda:	1858      	adds	r0, r3, r1
    7cdc:	6019      	str	r1, [r3, #0]
    7cde:	4282      	cmp	r2, r0
    7ce0:	d1e0      	bne.n	7ca4 <_free_r+0x24>
    7ce2:	6810      	ldr	r0, [r2, #0]
    7ce4:	6852      	ldr	r2, [r2, #4]
    7ce6:	1841      	adds	r1, r0, r1
    7ce8:	6019      	str	r1, [r3, #0]
    7cea:	605a      	str	r2, [r3, #4]
    7cec:	e7da      	b.n	7ca4 <_free_r+0x24>
    7cee:	42a0      	cmp	r0, r4
    7cf0:	d902      	bls.n	7cf8 <_free_r+0x78>
    7cf2:	230c      	movs	r3, #12
    7cf4:	602b      	str	r3, [r5, #0]
    7cf6:	e7d5      	b.n	7ca4 <_free_r+0x24>
    7cf8:	6821      	ldr	r1, [r4, #0]
    7cfa:	1860      	adds	r0, r4, r1
    7cfc:	4282      	cmp	r2, r0
    7cfe:	d103      	bne.n	7d08 <_free_r+0x88>
    7d00:	6810      	ldr	r0, [r2, #0]
    7d02:	6852      	ldr	r2, [r2, #4]
    7d04:	1841      	adds	r1, r0, r1
    7d06:	6021      	str	r1, [r4, #0]
    7d08:	6062      	str	r2, [r4, #4]
    7d0a:	605c      	str	r4, [r3, #4]
    7d0c:	e7ca      	b.n	7ca4 <_free_r+0x24>
    7d0e:	46c0      	nop			; (mov r8, r8)
    7d10:	200003b4 	.word	0x200003b4

00007d14 <_malloc_r>:
    7d14:	2303      	movs	r3, #3
    7d16:	b570      	push	{r4, r5, r6, lr}
    7d18:	1ccd      	adds	r5, r1, #3
    7d1a:	439d      	bics	r5, r3
    7d1c:	3508      	adds	r5, #8
    7d1e:	0006      	movs	r6, r0
    7d20:	2d0c      	cmp	r5, #12
    7d22:	d21e      	bcs.n	7d62 <_malloc_r+0x4e>
    7d24:	250c      	movs	r5, #12
    7d26:	42a9      	cmp	r1, r5
    7d28:	d81d      	bhi.n	7d66 <_malloc_r+0x52>
    7d2a:	0030      	movs	r0, r6
    7d2c:	f000 fe27 	bl	897e <__malloc_lock>
    7d30:	4a25      	ldr	r2, [pc, #148]	; (7dc8 <_malloc_r+0xb4>)
    7d32:	6814      	ldr	r4, [r2, #0]
    7d34:	0021      	movs	r1, r4
    7d36:	2900      	cmp	r1, #0
    7d38:	d119      	bne.n	7d6e <_malloc_r+0x5a>
    7d3a:	4c24      	ldr	r4, [pc, #144]	; (7dcc <_malloc_r+0xb8>)
    7d3c:	6823      	ldr	r3, [r4, #0]
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d103      	bne.n	7d4a <_malloc_r+0x36>
    7d42:	0030      	movs	r0, r6
    7d44:	f000 fc76 	bl	8634 <_sbrk_r>
    7d48:	6020      	str	r0, [r4, #0]
    7d4a:	0029      	movs	r1, r5
    7d4c:	0030      	movs	r0, r6
    7d4e:	f000 fc71 	bl	8634 <_sbrk_r>
    7d52:	1c43      	adds	r3, r0, #1
    7d54:	d12c      	bne.n	7db0 <_malloc_r+0x9c>
    7d56:	230c      	movs	r3, #12
    7d58:	0030      	movs	r0, r6
    7d5a:	6033      	str	r3, [r6, #0]
    7d5c:	f000 fe10 	bl	8980 <__malloc_unlock>
    7d60:	e003      	b.n	7d6a <_malloc_r+0x56>
    7d62:	2d00      	cmp	r5, #0
    7d64:	dadf      	bge.n	7d26 <_malloc_r+0x12>
    7d66:	230c      	movs	r3, #12
    7d68:	6033      	str	r3, [r6, #0]
    7d6a:	2000      	movs	r0, #0
    7d6c:	bd70      	pop	{r4, r5, r6, pc}
    7d6e:	680b      	ldr	r3, [r1, #0]
    7d70:	1b5b      	subs	r3, r3, r5
    7d72:	d41a      	bmi.n	7daa <_malloc_r+0x96>
    7d74:	2b0b      	cmp	r3, #11
    7d76:	d903      	bls.n	7d80 <_malloc_r+0x6c>
    7d78:	600b      	str	r3, [r1, #0]
    7d7a:	18cc      	adds	r4, r1, r3
    7d7c:	6025      	str	r5, [r4, #0]
    7d7e:	e003      	b.n	7d88 <_malloc_r+0x74>
    7d80:	428c      	cmp	r4, r1
    7d82:	d10e      	bne.n	7da2 <_malloc_r+0x8e>
    7d84:	6863      	ldr	r3, [r4, #4]
    7d86:	6013      	str	r3, [r2, #0]
    7d88:	0030      	movs	r0, r6
    7d8a:	f000 fdf9 	bl	8980 <__malloc_unlock>
    7d8e:	0020      	movs	r0, r4
    7d90:	2207      	movs	r2, #7
    7d92:	300b      	adds	r0, #11
    7d94:	1d23      	adds	r3, r4, #4
    7d96:	4390      	bics	r0, r2
    7d98:	1ac3      	subs	r3, r0, r3
    7d9a:	d0e7      	beq.n	7d6c <_malloc_r+0x58>
    7d9c:	425a      	negs	r2, r3
    7d9e:	50e2      	str	r2, [r4, r3]
    7da0:	e7e4      	b.n	7d6c <_malloc_r+0x58>
    7da2:	684b      	ldr	r3, [r1, #4]
    7da4:	6063      	str	r3, [r4, #4]
    7da6:	000c      	movs	r4, r1
    7da8:	e7ee      	b.n	7d88 <_malloc_r+0x74>
    7daa:	000c      	movs	r4, r1
    7dac:	6849      	ldr	r1, [r1, #4]
    7dae:	e7c2      	b.n	7d36 <_malloc_r+0x22>
    7db0:	2303      	movs	r3, #3
    7db2:	1cc4      	adds	r4, r0, #3
    7db4:	439c      	bics	r4, r3
    7db6:	42a0      	cmp	r0, r4
    7db8:	d0e0      	beq.n	7d7c <_malloc_r+0x68>
    7dba:	1a21      	subs	r1, r4, r0
    7dbc:	0030      	movs	r0, r6
    7dbe:	f000 fc39 	bl	8634 <_sbrk_r>
    7dc2:	1c43      	adds	r3, r0, #1
    7dc4:	d1da      	bne.n	7d7c <_malloc_r+0x68>
    7dc6:	e7c6      	b.n	7d56 <_malloc_r+0x42>
    7dc8:	200003b4 	.word	0x200003b4
    7dcc:	200003b8 	.word	0x200003b8

00007dd0 <__ssputs_r>:
    7dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dd2:	688e      	ldr	r6, [r1, #8]
    7dd4:	b085      	sub	sp, #20
    7dd6:	0007      	movs	r7, r0
    7dd8:	000c      	movs	r4, r1
    7dda:	9203      	str	r2, [sp, #12]
    7ddc:	9301      	str	r3, [sp, #4]
    7dde:	429e      	cmp	r6, r3
    7de0:	d839      	bhi.n	7e56 <__ssputs_r+0x86>
    7de2:	2390      	movs	r3, #144	; 0x90
    7de4:	898a      	ldrh	r2, [r1, #12]
    7de6:	00db      	lsls	r3, r3, #3
    7de8:	421a      	tst	r2, r3
    7dea:	d034      	beq.n	7e56 <__ssputs_r+0x86>
    7dec:	2503      	movs	r5, #3
    7dee:	6909      	ldr	r1, [r1, #16]
    7df0:	6823      	ldr	r3, [r4, #0]
    7df2:	1a5b      	subs	r3, r3, r1
    7df4:	9302      	str	r3, [sp, #8]
    7df6:	6963      	ldr	r3, [r4, #20]
    7df8:	9802      	ldr	r0, [sp, #8]
    7dfa:	435d      	muls	r5, r3
    7dfc:	0feb      	lsrs	r3, r5, #31
    7dfe:	195d      	adds	r5, r3, r5
    7e00:	9b01      	ldr	r3, [sp, #4]
    7e02:	106d      	asrs	r5, r5, #1
    7e04:	3301      	adds	r3, #1
    7e06:	181b      	adds	r3, r3, r0
    7e08:	42ab      	cmp	r3, r5
    7e0a:	d900      	bls.n	7e0e <__ssputs_r+0x3e>
    7e0c:	001d      	movs	r5, r3
    7e0e:	0553      	lsls	r3, r2, #21
    7e10:	d532      	bpl.n	7e78 <__ssputs_r+0xa8>
    7e12:	0029      	movs	r1, r5
    7e14:	0038      	movs	r0, r7
    7e16:	f7ff ff7d 	bl	7d14 <_malloc_r>
    7e1a:	1e06      	subs	r6, r0, #0
    7e1c:	d109      	bne.n	7e32 <__ssputs_r+0x62>
    7e1e:	230c      	movs	r3, #12
    7e20:	603b      	str	r3, [r7, #0]
    7e22:	2340      	movs	r3, #64	; 0x40
    7e24:	2001      	movs	r0, #1
    7e26:	89a2      	ldrh	r2, [r4, #12]
    7e28:	4240      	negs	r0, r0
    7e2a:	4313      	orrs	r3, r2
    7e2c:	81a3      	strh	r3, [r4, #12]
    7e2e:	b005      	add	sp, #20
    7e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e32:	9a02      	ldr	r2, [sp, #8]
    7e34:	6921      	ldr	r1, [r4, #16]
    7e36:	f7ff fc1b 	bl	7670 <memcpy>
    7e3a:	89a3      	ldrh	r3, [r4, #12]
    7e3c:	4a14      	ldr	r2, [pc, #80]	; (7e90 <__ssputs_r+0xc0>)
    7e3e:	401a      	ands	r2, r3
    7e40:	2380      	movs	r3, #128	; 0x80
    7e42:	4313      	orrs	r3, r2
    7e44:	81a3      	strh	r3, [r4, #12]
    7e46:	9b02      	ldr	r3, [sp, #8]
    7e48:	6126      	str	r6, [r4, #16]
    7e4a:	18f6      	adds	r6, r6, r3
    7e4c:	6026      	str	r6, [r4, #0]
    7e4e:	6165      	str	r5, [r4, #20]
    7e50:	9e01      	ldr	r6, [sp, #4]
    7e52:	1aed      	subs	r5, r5, r3
    7e54:	60a5      	str	r5, [r4, #8]
    7e56:	9b01      	ldr	r3, [sp, #4]
    7e58:	42b3      	cmp	r3, r6
    7e5a:	d200      	bcs.n	7e5e <__ssputs_r+0x8e>
    7e5c:	001e      	movs	r6, r3
    7e5e:	0032      	movs	r2, r6
    7e60:	9903      	ldr	r1, [sp, #12]
    7e62:	6820      	ldr	r0, [r4, #0]
    7e64:	f000 fd79 	bl	895a <memmove>
    7e68:	68a3      	ldr	r3, [r4, #8]
    7e6a:	2000      	movs	r0, #0
    7e6c:	1b9b      	subs	r3, r3, r6
    7e6e:	60a3      	str	r3, [r4, #8]
    7e70:	6823      	ldr	r3, [r4, #0]
    7e72:	199e      	adds	r6, r3, r6
    7e74:	6026      	str	r6, [r4, #0]
    7e76:	e7da      	b.n	7e2e <__ssputs_r+0x5e>
    7e78:	002a      	movs	r2, r5
    7e7a:	0038      	movs	r0, r7
    7e7c:	f000 fd81 	bl	8982 <_realloc_r>
    7e80:	1e06      	subs	r6, r0, #0
    7e82:	d1e0      	bne.n	7e46 <__ssputs_r+0x76>
    7e84:	6921      	ldr	r1, [r4, #16]
    7e86:	0038      	movs	r0, r7
    7e88:	f7ff fefa 	bl	7c80 <_free_r>
    7e8c:	e7c7      	b.n	7e1e <__ssputs_r+0x4e>
    7e8e:	46c0      	nop			; (mov r8, r8)
    7e90:	fffffb7f 	.word	0xfffffb7f

00007e94 <_svfiprintf_r>:
    7e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e96:	b09f      	sub	sp, #124	; 0x7c
    7e98:	9002      	str	r0, [sp, #8]
    7e9a:	9305      	str	r3, [sp, #20]
    7e9c:	898b      	ldrh	r3, [r1, #12]
    7e9e:	000f      	movs	r7, r1
    7ea0:	0016      	movs	r6, r2
    7ea2:	061b      	lsls	r3, r3, #24
    7ea4:	d511      	bpl.n	7eca <_svfiprintf_r+0x36>
    7ea6:	690b      	ldr	r3, [r1, #16]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d10e      	bne.n	7eca <_svfiprintf_r+0x36>
    7eac:	2140      	movs	r1, #64	; 0x40
    7eae:	f7ff ff31 	bl	7d14 <_malloc_r>
    7eb2:	6038      	str	r0, [r7, #0]
    7eb4:	6138      	str	r0, [r7, #16]
    7eb6:	2800      	cmp	r0, #0
    7eb8:	d105      	bne.n	7ec6 <_svfiprintf_r+0x32>
    7eba:	230c      	movs	r3, #12
    7ebc:	9a02      	ldr	r2, [sp, #8]
    7ebe:	3801      	subs	r0, #1
    7ec0:	6013      	str	r3, [r2, #0]
    7ec2:	b01f      	add	sp, #124	; 0x7c
    7ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ec6:	2340      	movs	r3, #64	; 0x40
    7ec8:	617b      	str	r3, [r7, #20]
    7eca:	2300      	movs	r3, #0
    7ecc:	ad06      	add	r5, sp, #24
    7ece:	616b      	str	r3, [r5, #20]
    7ed0:	3320      	adds	r3, #32
    7ed2:	766b      	strb	r3, [r5, #25]
    7ed4:	3310      	adds	r3, #16
    7ed6:	76ab      	strb	r3, [r5, #26]
    7ed8:	0034      	movs	r4, r6
    7eda:	7823      	ldrb	r3, [r4, #0]
    7edc:	2b00      	cmp	r3, #0
    7ede:	d147      	bne.n	7f70 <_svfiprintf_r+0xdc>
    7ee0:	1ba3      	subs	r3, r4, r6
    7ee2:	9304      	str	r3, [sp, #16]
    7ee4:	d00d      	beq.n	7f02 <_svfiprintf_r+0x6e>
    7ee6:	1ba3      	subs	r3, r4, r6
    7ee8:	0032      	movs	r2, r6
    7eea:	0039      	movs	r1, r7
    7eec:	9802      	ldr	r0, [sp, #8]
    7eee:	f7ff ff6f 	bl	7dd0 <__ssputs_r>
    7ef2:	1c43      	adds	r3, r0, #1
    7ef4:	d100      	bne.n	7ef8 <_svfiprintf_r+0x64>
    7ef6:	e0b5      	b.n	8064 <_svfiprintf_r+0x1d0>
    7ef8:	696a      	ldr	r2, [r5, #20]
    7efa:	9b04      	ldr	r3, [sp, #16]
    7efc:	4694      	mov	ip, r2
    7efe:	4463      	add	r3, ip
    7f00:	616b      	str	r3, [r5, #20]
    7f02:	7823      	ldrb	r3, [r4, #0]
    7f04:	2b00      	cmp	r3, #0
    7f06:	d100      	bne.n	7f0a <_svfiprintf_r+0x76>
    7f08:	e0ac      	b.n	8064 <_svfiprintf_r+0x1d0>
    7f0a:	2201      	movs	r2, #1
    7f0c:	2300      	movs	r3, #0
    7f0e:	4252      	negs	r2, r2
    7f10:	606a      	str	r2, [r5, #4]
    7f12:	a902      	add	r1, sp, #8
    7f14:	3254      	adds	r2, #84	; 0x54
    7f16:	1852      	adds	r2, r2, r1
    7f18:	3401      	adds	r4, #1
    7f1a:	602b      	str	r3, [r5, #0]
    7f1c:	60eb      	str	r3, [r5, #12]
    7f1e:	60ab      	str	r3, [r5, #8]
    7f20:	7013      	strb	r3, [r2, #0]
    7f22:	65ab      	str	r3, [r5, #88]	; 0x58
    7f24:	4e58      	ldr	r6, [pc, #352]	; (8088 <_svfiprintf_r+0x1f4>)
    7f26:	2205      	movs	r2, #5
    7f28:	7821      	ldrb	r1, [r4, #0]
    7f2a:	0030      	movs	r0, r6
    7f2c:	f000 fd0a 	bl	8944 <memchr>
    7f30:	1c62      	adds	r2, r4, #1
    7f32:	2800      	cmp	r0, #0
    7f34:	d120      	bne.n	7f78 <_svfiprintf_r+0xe4>
    7f36:	6829      	ldr	r1, [r5, #0]
    7f38:	06cb      	lsls	r3, r1, #27
    7f3a:	d504      	bpl.n	7f46 <_svfiprintf_r+0xb2>
    7f3c:	2353      	movs	r3, #83	; 0x53
    7f3e:	ae02      	add	r6, sp, #8
    7f40:	3020      	adds	r0, #32
    7f42:	199b      	adds	r3, r3, r6
    7f44:	7018      	strb	r0, [r3, #0]
    7f46:	070b      	lsls	r3, r1, #28
    7f48:	d504      	bpl.n	7f54 <_svfiprintf_r+0xc0>
    7f4a:	2353      	movs	r3, #83	; 0x53
    7f4c:	202b      	movs	r0, #43	; 0x2b
    7f4e:	ae02      	add	r6, sp, #8
    7f50:	199b      	adds	r3, r3, r6
    7f52:	7018      	strb	r0, [r3, #0]
    7f54:	7823      	ldrb	r3, [r4, #0]
    7f56:	2b2a      	cmp	r3, #42	; 0x2a
    7f58:	d016      	beq.n	7f88 <_svfiprintf_r+0xf4>
    7f5a:	2000      	movs	r0, #0
    7f5c:	210a      	movs	r1, #10
    7f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f60:	7822      	ldrb	r2, [r4, #0]
    7f62:	3a30      	subs	r2, #48	; 0x30
    7f64:	2a09      	cmp	r2, #9
    7f66:	d955      	bls.n	8014 <_svfiprintf_r+0x180>
    7f68:	2800      	cmp	r0, #0
    7f6a:	d015      	beq.n	7f98 <_svfiprintf_r+0x104>
    7f6c:	9309      	str	r3, [sp, #36]	; 0x24
    7f6e:	e013      	b.n	7f98 <_svfiprintf_r+0x104>
    7f70:	2b25      	cmp	r3, #37	; 0x25
    7f72:	d0b5      	beq.n	7ee0 <_svfiprintf_r+0x4c>
    7f74:	3401      	adds	r4, #1
    7f76:	e7b0      	b.n	7eda <_svfiprintf_r+0x46>
    7f78:	2301      	movs	r3, #1
    7f7a:	1b80      	subs	r0, r0, r6
    7f7c:	4083      	lsls	r3, r0
    7f7e:	6829      	ldr	r1, [r5, #0]
    7f80:	0014      	movs	r4, r2
    7f82:	430b      	orrs	r3, r1
    7f84:	602b      	str	r3, [r5, #0]
    7f86:	e7cd      	b.n	7f24 <_svfiprintf_r+0x90>
    7f88:	9b05      	ldr	r3, [sp, #20]
    7f8a:	1d18      	adds	r0, r3, #4
    7f8c:	681b      	ldr	r3, [r3, #0]
    7f8e:	9005      	str	r0, [sp, #20]
    7f90:	2b00      	cmp	r3, #0
    7f92:	db39      	blt.n	8008 <_svfiprintf_r+0x174>
    7f94:	9309      	str	r3, [sp, #36]	; 0x24
    7f96:	0014      	movs	r4, r2
    7f98:	7823      	ldrb	r3, [r4, #0]
    7f9a:	2b2e      	cmp	r3, #46	; 0x2e
    7f9c:	d10b      	bne.n	7fb6 <_svfiprintf_r+0x122>
    7f9e:	7863      	ldrb	r3, [r4, #1]
    7fa0:	1c62      	adds	r2, r4, #1
    7fa2:	2b2a      	cmp	r3, #42	; 0x2a
    7fa4:	d13e      	bne.n	8024 <_svfiprintf_r+0x190>
    7fa6:	9b05      	ldr	r3, [sp, #20]
    7fa8:	3402      	adds	r4, #2
    7faa:	1d1a      	adds	r2, r3, #4
    7fac:	681b      	ldr	r3, [r3, #0]
    7fae:	9205      	str	r2, [sp, #20]
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	db34      	blt.n	801e <_svfiprintf_r+0x18a>
    7fb4:	9307      	str	r3, [sp, #28]
    7fb6:	4e35      	ldr	r6, [pc, #212]	; (808c <_svfiprintf_r+0x1f8>)
    7fb8:	7821      	ldrb	r1, [r4, #0]
    7fba:	2203      	movs	r2, #3
    7fbc:	0030      	movs	r0, r6
    7fbe:	f000 fcc1 	bl	8944 <memchr>
    7fc2:	2800      	cmp	r0, #0
    7fc4:	d006      	beq.n	7fd4 <_svfiprintf_r+0x140>
    7fc6:	2340      	movs	r3, #64	; 0x40
    7fc8:	1b80      	subs	r0, r0, r6
    7fca:	4083      	lsls	r3, r0
    7fcc:	682a      	ldr	r2, [r5, #0]
    7fce:	3401      	adds	r4, #1
    7fd0:	4313      	orrs	r3, r2
    7fd2:	602b      	str	r3, [r5, #0]
    7fd4:	7821      	ldrb	r1, [r4, #0]
    7fd6:	2206      	movs	r2, #6
    7fd8:	482d      	ldr	r0, [pc, #180]	; (8090 <_svfiprintf_r+0x1fc>)
    7fda:	1c66      	adds	r6, r4, #1
    7fdc:	7629      	strb	r1, [r5, #24]
    7fde:	f000 fcb1 	bl	8944 <memchr>
    7fe2:	2800      	cmp	r0, #0
    7fe4:	d046      	beq.n	8074 <_svfiprintf_r+0x1e0>
    7fe6:	4b2b      	ldr	r3, [pc, #172]	; (8094 <_svfiprintf_r+0x200>)
    7fe8:	2b00      	cmp	r3, #0
    7fea:	d12f      	bne.n	804c <_svfiprintf_r+0x1b8>
    7fec:	6829      	ldr	r1, [r5, #0]
    7fee:	9b05      	ldr	r3, [sp, #20]
    7ff0:	2207      	movs	r2, #7
    7ff2:	05c9      	lsls	r1, r1, #23
    7ff4:	d528      	bpl.n	8048 <_svfiprintf_r+0x1b4>
    7ff6:	189b      	adds	r3, r3, r2
    7ff8:	4393      	bics	r3, r2
    7ffa:	3308      	adds	r3, #8
    7ffc:	9305      	str	r3, [sp, #20]
    7ffe:	696b      	ldr	r3, [r5, #20]
    8000:	9a03      	ldr	r2, [sp, #12]
    8002:	189b      	adds	r3, r3, r2
    8004:	616b      	str	r3, [r5, #20]
    8006:	e767      	b.n	7ed8 <_svfiprintf_r+0x44>
    8008:	425b      	negs	r3, r3
    800a:	60eb      	str	r3, [r5, #12]
    800c:	2302      	movs	r3, #2
    800e:	430b      	orrs	r3, r1
    8010:	602b      	str	r3, [r5, #0]
    8012:	e7c0      	b.n	7f96 <_svfiprintf_r+0x102>
    8014:	434b      	muls	r3, r1
    8016:	3401      	adds	r4, #1
    8018:	189b      	adds	r3, r3, r2
    801a:	2001      	movs	r0, #1
    801c:	e7a0      	b.n	7f60 <_svfiprintf_r+0xcc>
    801e:	2301      	movs	r3, #1
    8020:	425b      	negs	r3, r3
    8022:	e7c7      	b.n	7fb4 <_svfiprintf_r+0x120>
    8024:	2300      	movs	r3, #0
    8026:	0014      	movs	r4, r2
    8028:	200a      	movs	r0, #10
    802a:	001a      	movs	r2, r3
    802c:	606b      	str	r3, [r5, #4]
    802e:	7821      	ldrb	r1, [r4, #0]
    8030:	3930      	subs	r1, #48	; 0x30
    8032:	2909      	cmp	r1, #9
    8034:	d903      	bls.n	803e <_svfiprintf_r+0x1aa>
    8036:	2b00      	cmp	r3, #0
    8038:	d0bd      	beq.n	7fb6 <_svfiprintf_r+0x122>
    803a:	9207      	str	r2, [sp, #28]
    803c:	e7bb      	b.n	7fb6 <_svfiprintf_r+0x122>
    803e:	4342      	muls	r2, r0
    8040:	3401      	adds	r4, #1
    8042:	1852      	adds	r2, r2, r1
    8044:	2301      	movs	r3, #1
    8046:	e7f2      	b.n	802e <_svfiprintf_r+0x19a>
    8048:	3307      	adds	r3, #7
    804a:	e7d5      	b.n	7ff8 <_svfiprintf_r+0x164>
    804c:	ab05      	add	r3, sp, #20
    804e:	9300      	str	r3, [sp, #0]
    8050:	003a      	movs	r2, r7
    8052:	4b11      	ldr	r3, [pc, #68]	; (8098 <_svfiprintf_r+0x204>)
    8054:	0029      	movs	r1, r5
    8056:	9802      	ldr	r0, [sp, #8]
    8058:	e000      	b.n	805c <_svfiprintf_r+0x1c8>
    805a:	bf00      	nop
    805c:	9003      	str	r0, [sp, #12]
    805e:	9b03      	ldr	r3, [sp, #12]
    8060:	3301      	adds	r3, #1
    8062:	d1cc      	bne.n	7ffe <_svfiprintf_r+0x16a>
    8064:	89bb      	ldrh	r3, [r7, #12]
    8066:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8068:	065b      	lsls	r3, r3, #25
    806a:	d400      	bmi.n	806e <_svfiprintf_r+0x1da>
    806c:	e729      	b.n	7ec2 <_svfiprintf_r+0x2e>
    806e:	2001      	movs	r0, #1
    8070:	4240      	negs	r0, r0
    8072:	e726      	b.n	7ec2 <_svfiprintf_r+0x2e>
    8074:	ab05      	add	r3, sp, #20
    8076:	9300      	str	r3, [sp, #0]
    8078:	003a      	movs	r2, r7
    807a:	4b07      	ldr	r3, [pc, #28]	; (8098 <_svfiprintf_r+0x204>)
    807c:	0029      	movs	r1, r5
    807e:	9802      	ldr	r0, [sp, #8]
    8080:	f000 f9be 	bl	8400 <_printf_i>
    8084:	e7ea      	b.n	805c <_svfiprintf_r+0x1c8>
    8086:	46c0      	nop			; (mov r8, r8)
    8088:	00008e08 	.word	0x00008e08
    808c:	00008e0e 	.word	0x00008e0e
    8090:	00008e12 	.word	0x00008e12
    8094:	00000000 	.word	0x00000000
    8098:	00007dd1 	.word	0x00007dd1

0000809c <__sfputc_r>:
    809c:	6893      	ldr	r3, [r2, #8]
    809e:	b510      	push	{r4, lr}
    80a0:	3b01      	subs	r3, #1
    80a2:	6093      	str	r3, [r2, #8]
    80a4:	2b00      	cmp	r3, #0
    80a6:	da05      	bge.n	80b4 <__sfputc_r+0x18>
    80a8:	6994      	ldr	r4, [r2, #24]
    80aa:	42a3      	cmp	r3, r4
    80ac:	db08      	blt.n	80c0 <__sfputc_r+0x24>
    80ae:	b2cb      	uxtb	r3, r1
    80b0:	2b0a      	cmp	r3, #10
    80b2:	d005      	beq.n	80c0 <__sfputc_r+0x24>
    80b4:	6813      	ldr	r3, [r2, #0]
    80b6:	1c58      	adds	r0, r3, #1
    80b8:	6010      	str	r0, [r2, #0]
    80ba:	7019      	strb	r1, [r3, #0]
    80bc:	b2c8      	uxtb	r0, r1
    80be:	bd10      	pop	{r4, pc}
    80c0:	f000 fb16 	bl	86f0 <__swbuf_r>
    80c4:	e7fb      	b.n	80be <__sfputc_r+0x22>

000080c6 <__sfputs_r>:
    80c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80c8:	0006      	movs	r6, r0
    80ca:	000f      	movs	r7, r1
    80cc:	0014      	movs	r4, r2
    80ce:	18d5      	adds	r5, r2, r3
    80d0:	42ac      	cmp	r4, r5
    80d2:	d101      	bne.n	80d8 <__sfputs_r+0x12>
    80d4:	2000      	movs	r0, #0
    80d6:	e007      	b.n	80e8 <__sfputs_r+0x22>
    80d8:	7821      	ldrb	r1, [r4, #0]
    80da:	003a      	movs	r2, r7
    80dc:	0030      	movs	r0, r6
    80de:	f7ff ffdd 	bl	809c <__sfputc_r>
    80e2:	3401      	adds	r4, #1
    80e4:	1c43      	adds	r3, r0, #1
    80e6:	d1f3      	bne.n	80d0 <__sfputs_r+0xa>
    80e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000080ec <_vfiprintf_r>:
    80ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    80ee:	b09f      	sub	sp, #124	; 0x7c
    80f0:	0006      	movs	r6, r0
    80f2:	000f      	movs	r7, r1
    80f4:	0014      	movs	r4, r2
    80f6:	9305      	str	r3, [sp, #20]
    80f8:	2800      	cmp	r0, #0
    80fa:	d004      	beq.n	8106 <_vfiprintf_r+0x1a>
    80fc:	6983      	ldr	r3, [r0, #24]
    80fe:	2b00      	cmp	r3, #0
    8100:	d101      	bne.n	8106 <_vfiprintf_r+0x1a>
    8102:	f7ff fcb1 	bl	7a68 <__sinit>
    8106:	4b7f      	ldr	r3, [pc, #508]	; (8304 <_vfiprintf_r+0x218>)
    8108:	429f      	cmp	r7, r3
    810a:	d15c      	bne.n	81c6 <_vfiprintf_r+0xda>
    810c:	6877      	ldr	r7, [r6, #4]
    810e:	89bb      	ldrh	r3, [r7, #12]
    8110:	071b      	lsls	r3, r3, #28
    8112:	d562      	bpl.n	81da <_vfiprintf_r+0xee>
    8114:	693b      	ldr	r3, [r7, #16]
    8116:	2b00      	cmp	r3, #0
    8118:	d05f      	beq.n	81da <_vfiprintf_r+0xee>
    811a:	2300      	movs	r3, #0
    811c:	ad06      	add	r5, sp, #24
    811e:	616b      	str	r3, [r5, #20]
    8120:	3320      	adds	r3, #32
    8122:	766b      	strb	r3, [r5, #25]
    8124:	3310      	adds	r3, #16
    8126:	76ab      	strb	r3, [r5, #26]
    8128:	9402      	str	r4, [sp, #8]
    812a:	9c02      	ldr	r4, [sp, #8]
    812c:	7823      	ldrb	r3, [r4, #0]
    812e:	2b00      	cmp	r3, #0
    8130:	d15d      	bne.n	81ee <_vfiprintf_r+0x102>
    8132:	9b02      	ldr	r3, [sp, #8]
    8134:	1ae3      	subs	r3, r4, r3
    8136:	9304      	str	r3, [sp, #16]
    8138:	d00d      	beq.n	8156 <_vfiprintf_r+0x6a>
    813a:	9b04      	ldr	r3, [sp, #16]
    813c:	9a02      	ldr	r2, [sp, #8]
    813e:	0039      	movs	r1, r7
    8140:	0030      	movs	r0, r6
    8142:	f7ff ffc0 	bl	80c6 <__sfputs_r>
    8146:	1c43      	adds	r3, r0, #1
    8148:	d100      	bne.n	814c <_vfiprintf_r+0x60>
    814a:	e0cc      	b.n	82e6 <_vfiprintf_r+0x1fa>
    814c:	696a      	ldr	r2, [r5, #20]
    814e:	9b04      	ldr	r3, [sp, #16]
    8150:	4694      	mov	ip, r2
    8152:	4463      	add	r3, ip
    8154:	616b      	str	r3, [r5, #20]
    8156:	7823      	ldrb	r3, [r4, #0]
    8158:	2b00      	cmp	r3, #0
    815a:	d100      	bne.n	815e <_vfiprintf_r+0x72>
    815c:	e0c3      	b.n	82e6 <_vfiprintf_r+0x1fa>
    815e:	2201      	movs	r2, #1
    8160:	2300      	movs	r3, #0
    8162:	4252      	negs	r2, r2
    8164:	606a      	str	r2, [r5, #4]
    8166:	a902      	add	r1, sp, #8
    8168:	3254      	adds	r2, #84	; 0x54
    816a:	1852      	adds	r2, r2, r1
    816c:	3401      	adds	r4, #1
    816e:	602b      	str	r3, [r5, #0]
    8170:	60eb      	str	r3, [r5, #12]
    8172:	60ab      	str	r3, [r5, #8]
    8174:	7013      	strb	r3, [r2, #0]
    8176:	65ab      	str	r3, [r5, #88]	; 0x58
    8178:	7821      	ldrb	r1, [r4, #0]
    817a:	2205      	movs	r2, #5
    817c:	4862      	ldr	r0, [pc, #392]	; (8308 <_vfiprintf_r+0x21c>)
    817e:	f000 fbe1 	bl	8944 <memchr>
    8182:	1c63      	adds	r3, r4, #1
    8184:	469c      	mov	ip, r3
    8186:	2800      	cmp	r0, #0
    8188:	d135      	bne.n	81f6 <_vfiprintf_r+0x10a>
    818a:	6829      	ldr	r1, [r5, #0]
    818c:	06cb      	lsls	r3, r1, #27
    818e:	d504      	bpl.n	819a <_vfiprintf_r+0xae>
    8190:	2353      	movs	r3, #83	; 0x53
    8192:	aa02      	add	r2, sp, #8
    8194:	3020      	adds	r0, #32
    8196:	189b      	adds	r3, r3, r2
    8198:	7018      	strb	r0, [r3, #0]
    819a:	070b      	lsls	r3, r1, #28
    819c:	d504      	bpl.n	81a8 <_vfiprintf_r+0xbc>
    819e:	2353      	movs	r3, #83	; 0x53
    81a0:	202b      	movs	r0, #43	; 0x2b
    81a2:	aa02      	add	r2, sp, #8
    81a4:	189b      	adds	r3, r3, r2
    81a6:	7018      	strb	r0, [r3, #0]
    81a8:	7823      	ldrb	r3, [r4, #0]
    81aa:	2b2a      	cmp	r3, #42	; 0x2a
    81ac:	d02c      	beq.n	8208 <_vfiprintf_r+0x11c>
    81ae:	2000      	movs	r0, #0
    81b0:	210a      	movs	r1, #10
    81b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81b4:	7822      	ldrb	r2, [r4, #0]
    81b6:	3a30      	subs	r2, #48	; 0x30
    81b8:	2a09      	cmp	r2, #9
    81ba:	d800      	bhi.n	81be <_vfiprintf_r+0xd2>
    81bc:	e06b      	b.n	8296 <_vfiprintf_r+0x1aa>
    81be:	2800      	cmp	r0, #0
    81c0:	d02a      	beq.n	8218 <_vfiprintf_r+0x12c>
    81c2:	9309      	str	r3, [sp, #36]	; 0x24
    81c4:	e028      	b.n	8218 <_vfiprintf_r+0x12c>
    81c6:	4b51      	ldr	r3, [pc, #324]	; (830c <_vfiprintf_r+0x220>)
    81c8:	429f      	cmp	r7, r3
    81ca:	d101      	bne.n	81d0 <_vfiprintf_r+0xe4>
    81cc:	68b7      	ldr	r7, [r6, #8]
    81ce:	e79e      	b.n	810e <_vfiprintf_r+0x22>
    81d0:	4b4f      	ldr	r3, [pc, #316]	; (8310 <_vfiprintf_r+0x224>)
    81d2:	429f      	cmp	r7, r3
    81d4:	d19b      	bne.n	810e <_vfiprintf_r+0x22>
    81d6:	68f7      	ldr	r7, [r6, #12]
    81d8:	e799      	b.n	810e <_vfiprintf_r+0x22>
    81da:	0039      	movs	r1, r7
    81dc:	0030      	movs	r0, r6
    81de:	f000 faf1 	bl	87c4 <__swsetup_r>
    81e2:	2800      	cmp	r0, #0
    81e4:	d099      	beq.n	811a <_vfiprintf_r+0x2e>
    81e6:	2001      	movs	r0, #1
    81e8:	4240      	negs	r0, r0
    81ea:	b01f      	add	sp, #124	; 0x7c
    81ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81ee:	2b25      	cmp	r3, #37	; 0x25
    81f0:	d09f      	beq.n	8132 <_vfiprintf_r+0x46>
    81f2:	3401      	adds	r4, #1
    81f4:	e79a      	b.n	812c <_vfiprintf_r+0x40>
    81f6:	4b44      	ldr	r3, [pc, #272]	; (8308 <_vfiprintf_r+0x21c>)
    81f8:	6829      	ldr	r1, [r5, #0]
    81fa:	1ac0      	subs	r0, r0, r3
    81fc:	2301      	movs	r3, #1
    81fe:	4083      	lsls	r3, r0
    8200:	430b      	orrs	r3, r1
    8202:	602b      	str	r3, [r5, #0]
    8204:	4664      	mov	r4, ip
    8206:	e7b7      	b.n	8178 <_vfiprintf_r+0x8c>
    8208:	9b05      	ldr	r3, [sp, #20]
    820a:	1d18      	adds	r0, r3, #4
    820c:	681b      	ldr	r3, [r3, #0]
    820e:	9005      	str	r0, [sp, #20]
    8210:	2b00      	cmp	r3, #0
    8212:	db3a      	blt.n	828a <_vfiprintf_r+0x19e>
    8214:	9309      	str	r3, [sp, #36]	; 0x24
    8216:	4664      	mov	r4, ip
    8218:	7823      	ldrb	r3, [r4, #0]
    821a:	2b2e      	cmp	r3, #46	; 0x2e
    821c:	d10b      	bne.n	8236 <_vfiprintf_r+0x14a>
    821e:	7863      	ldrb	r3, [r4, #1]
    8220:	1c62      	adds	r2, r4, #1
    8222:	2b2a      	cmp	r3, #42	; 0x2a
    8224:	d13f      	bne.n	82a6 <_vfiprintf_r+0x1ba>
    8226:	9b05      	ldr	r3, [sp, #20]
    8228:	3402      	adds	r4, #2
    822a:	1d1a      	adds	r2, r3, #4
    822c:	681b      	ldr	r3, [r3, #0]
    822e:	9205      	str	r2, [sp, #20]
    8230:	2b00      	cmp	r3, #0
    8232:	db35      	blt.n	82a0 <_vfiprintf_r+0x1b4>
    8234:	9307      	str	r3, [sp, #28]
    8236:	7821      	ldrb	r1, [r4, #0]
    8238:	2203      	movs	r2, #3
    823a:	4836      	ldr	r0, [pc, #216]	; (8314 <_vfiprintf_r+0x228>)
    823c:	f000 fb82 	bl	8944 <memchr>
    8240:	2800      	cmp	r0, #0
    8242:	d007      	beq.n	8254 <_vfiprintf_r+0x168>
    8244:	4b33      	ldr	r3, [pc, #204]	; (8314 <_vfiprintf_r+0x228>)
    8246:	682a      	ldr	r2, [r5, #0]
    8248:	1ac0      	subs	r0, r0, r3
    824a:	2340      	movs	r3, #64	; 0x40
    824c:	4083      	lsls	r3, r0
    824e:	4313      	orrs	r3, r2
    8250:	602b      	str	r3, [r5, #0]
    8252:	3401      	adds	r4, #1
    8254:	7821      	ldrb	r1, [r4, #0]
    8256:	1c63      	adds	r3, r4, #1
    8258:	2206      	movs	r2, #6
    825a:	482f      	ldr	r0, [pc, #188]	; (8318 <_vfiprintf_r+0x22c>)
    825c:	9302      	str	r3, [sp, #8]
    825e:	7629      	strb	r1, [r5, #24]
    8260:	f000 fb70 	bl	8944 <memchr>
    8264:	2800      	cmp	r0, #0
    8266:	d044      	beq.n	82f2 <_vfiprintf_r+0x206>
    8268:	4b2c      	ldr	r3, [pc, #176]	; (831c <_vfiprintf_r+0x230>)
    826a:	2b00      	cmp	r3, #0
    826c:	d12f      	bne.n	82ce <_vfiprintf_r+0x1e2>
    826e:	6829      	ldr	r1, [r5, #0]
    8270:	9b05      	ldr	r3, [sp, #20]
    8272:	2207      	movs	r2, #7
    8274:	05c9      	lsls	r1, r1, #23
    8276:	d528      	bpl.n	82ca <_vfiprintf_r+0x1de>
    8278:	189b      	adds	r3, r3, r2
    827a:	4393      	bics	r3, r2
    827c:	3308      	adds	r3, #8
    827e:	9305      	str	r3, [sp, #20]
    8280:	696b      	ldr	r3, [r5, #20]
    8282:	9a03      	ldr	r2, [sp, #12]
    8284:	189b      	adds	r3, r3, r2
    8286:	616b      	str	r3, [r5, #20]
    8288:	e74f      	b.n	812a <_vfiprintf_r+0x3e>
    828a:	425b      	negs	r3, r3
    828c:	60eb      	str	r3, [r5, #12]
    828e:	2302      	movs	r3, #2
    8290:	430b      	orrs	r3, r1
    8292:	602b      	str	r3, [r5, #0]
    8294:	e7bf      	b.n	8216 <_vfiprintf_r+0x12a>
    8296:	434b      	muls	r3, r1
    8298:	3401      	adds	r4, #1
    829a:	189b      	adds	r3, r3, r2
    829c:	2001      	movs	r0, #1
    829e:	e789      	b.n	81b4 <_vfiprintf_r+0xc8>
    82a0:	2301      	movs	r3, #1
    82a2:	425b      	negs	r3, r3
    82a4:	e7c6      	b.n	8234 <_vfiprintf_r+0x148>
    82a6:	2300      	movs	r3, #0
    82a8:	0014      	movs	r4, r2
    82aa:	200a      	movs	r0, #10
    82ac:	001a      	movs	r2, r3
    82ae:	606b      	str	r3, [r5, #4]
    82b0:	7821      	ldrb	r1, [r4, #0]
    82b2:	3930      	subs	r1, #48	; 0x30
    82b4:	2909      	cmp	r1, #9
    82b6:	d903      	bls.n	82c0 <_vfiprintf_r+0x1d4>
    82b8:	2b00      	cmp	r3, #0
    82ba:	d0bc      	beq.n	8236 <_vfiprintf_r+0x14a>
    82bc:	9207      	str	r2, [sp, #28]
    82be:	e7ba      	b.n	8236 <_vfiprintf_r+0x14a>
    82c0:	4342      	muls	r2, r0
    82c2:	3401      	adds	r4, #1
    82c4:	1852      	adds	r2, r2, r1
    82c6:	2301      	movs	r3, #1
    82c8:	e7f2      	b.n	82b0 <_vfiprintf_r+0x1c4>
    82ca:	3307      	adds	r3, #7
    82cc:	e7d5      	b.n	827a <_vfiprintf_r+0x18e>
    82ce:	ab05      	add	r3, sp, #20
    82d0:	9300      	str	r3, [sp, #0]
    82d2:	003a      	movs	r2, r7
    82d4:	4b12      	ldr	r3, [pc, #72]	; (8320 <_vfiprintf_r+0x234>)
    82d6:	0029      	movs	r1, r5
    82d8:	0030      	movs	r0, r6
    82da:	e000      	b.n	82de <_vfiprintf_r+0x1f2>
    82dc:	bf00      	nop
    82de:	9003      	str	r0, [sp, #12]
    82e0:	9b03      	ldr	r3, [sp, #12]
    82e2:	3301      	adds	r3, #1
    82e4:	d1cc      	bne.n	8280 <_vfiprintf_r+0x194>
    82e6:	89bb      	ldrh	r3, [r7, #12]
    82e8:	065b      	lsls	r3, r3, #25
    82ea:	d500      	bpl.n	82ee <_vfiprintf_r+0x202>
    82ec:	e77b      	b.n	81e6 <_vfiprintf_r+0xfa>
    82ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    82f0:	e77b      	b.n	81ea <_vfiprintf_r+0xfe>
    82f2:	ab05      	add	r3, sp, #20
    82f4:	9300      	str	r3, [sp, #0]
    82f6:	003a      	movs	r2, r7
    82f8:	4b09      	ldr	r3, [pc, #36]	; (8320 <_vfiprintf_r+0x234>)
    82fa:	0029      	movs	r1, r5
    82fc:	0030      	movs	r0, r6
    82fe:	f000 f87f 	bl	8400 <_printf_i>
    8302:	e7ec      	b.n	82de <_vfiprintf_r+0x1f2>
    8304:	00008dc8 	.word	0x00008dc8
    8308:	00008e08 	.word	0x00008e08
    830c:	00008de8 	.word	0x00008de8
    8310:	00008da8 	.word	0x00008da8
    8314:	00008e0e 	.word	0x00008e0e
    8318:	00008e12 	.word	0x00008e12
    831c:	00000000 	.word	0x00000000
    8320:	000080c7 	.word	0x000080c7

00008324 <_printf_common>:
    8324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8326:	0015      	movs	r5, r2
    8328:	9301      	str	r3, [sp, #4]
    832a:	688a      	ldr	r2, [r1, #8]
    832c:	690b      	ldr	r3, [r1, #16]
    832e:	9000      	str	r0, [sp, #0]
    8330:	000c      	movs	r4, r1
    8332:	4293      	cmp	r3, r2
    8334:	da00      	bge.n	8338 <_printf_common+0x14>
    8336:	0013      	movs	r3, r2
    8338:	0022      	movs	r2, r4
    833a:	602b      	str	r3, [r5, #0]
    833c:	3243      	adds	r2, #67	; 0x43
    833e:	7812      	ldrb	r2, [r2, #0]
    8340:	2a00      	cmp	r2, #0
    8342:	d001      	beq.n	8348 <_printf_common+0x24>
    8344:	3301      	adds	r3, #1
    8346:	602b      	str	r3, [r5, #0]
    8348:	6823      	ldr	r3, [r4, #0]
    834a:	069b      	lsls	r3, r3, #26
    834c:	d502      	bpl.n	8354 <_printf_common+0x30>
    834e:	682b      	ldr	r3, [r5, #0]
    8350:	3302      	adds	r3, #2
    8352:	602b      	str	r3, [r5, #0]
    8354:	2706      	movs	r7, #6
    8356:	6823      	ldr	r3, [r4, #0]
    8358:	401f      	ands	r7, r3
    835a:	d027      	beq.n	83ac <_printf_common+0x88>
    835c:	0023      	movs	r3, r4
    835e:	3343      	adds	r3, #67	; 0x43
    8360:	781b      	ldrb	r3, [r3, #0]
    8362:	1e5a      	subs	r2, r3, #1
    8364:	4193      	sbcs	r3, r2
    8366:	6822      	ldr	r2, [r4, #0]
    8368:	0692      	lsls	r2, r2, #26
    836a:	d430      	bmi.n	83ce <_printf_common+0xaa>
    836c:	0022      	movs	r2, r4
    836e:	9901      	ldr	r1, [sp, #4]
    8370:	3243      	adds	r2, #67	; 0x43
    8372:	9800      	ldr	r0, [sp, #0]
    8374:	9e08      	ldr	r6, [sp, #32]
    8376:	47b0      	blx	r6
    8378:	1c43      	adds	r3, r0, #1
    837a:	d025      	beq.n	83c8 <_printf_common+0xa4>
    837c:	2306      	movs	r3, #6
    837e:	6820      	ldr	r0, [r4, #0]
    8380:	682a      	ldr	r2, [r5, #0]
    8382:	68e1      	ldr	r1, [r4, #12]
    8384:	4003      	ands	r3, r0
    8386:	2500      	movs	r5, #0
    8388:	2b04      	cmp	r3, #4
    838a:	d103      	bne.n	8394 <_printf_common+0x70>
    838c:	1a8d      	subs	r5, r1, r2
    838e:	43eb      	mvns	r3, r5
    8390:	17db      	asrs	r3, r3, #31
    8392:	401d      	ands	r5, r3
    8394:	68a3      	ldr	r3, [r4, #8]
    8396:	6922      	ldr	r2, [r4, #16]
    8398:	4293      	cmp	r3, r2
    839a:	dd01      	ble.n	83a0 <_printf_common+0x7c>
    839c:	1a9b      	subs	r3, r3, r2
    839e:	18ed      	adds	r5, r5, r3
    83a0:	2700      	movs	r7, #0
    83a2:	42bd      	cmp	r5, r7
    83a4:	d120      	bne.n	83e8 <_printf_common+0xc4>
    83a6:	2000      	movs	r0, #0
    83a8:	e010      	b.n	83cc <_printf_common+0xa8>
    83aa:	3701      	adds	r7, #1
    83ac:	68e3      	ldr	r3, [r4, #12]
    83ae:	682a      	ldr	r2, [r5, #0]
    83b0:	1a9b      	subs	r3, r3, r2
    83b2:	429f      	cmp	r7, r3
    83b4:	dad2      	bge.n	835c <_printf_common+0x38>
    83b6:	0022      	movs	r2, r4
    83b8:	2301      	movs	r3, #1
    83ba:	3219      	adds	r2, #25
    83bc:	9901      	ldr	r1, [sp, #4]
    83be:	9800      	ldr	r0, [sp, #0]
    83c0:	9e08      	ldr	r6, [sp, #32]
    83c2:	47b0      	blx	r6
    83c4:	1c43      	adds	r3, r0, #1
    83c6:	d1f0      	bne.n	83aa <_printf_common+0x86>
    83c8:	2001      	movs	r0, #1
    83ca:	4240      	negs	r0, r0
    83cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    83ce:	2030      	movs	r0, #48	; 0x30
    83d0:	18e1      	adds	r1, r4, r3
    83d2:	3143      	adds	r1, #67	; 0x43
    83d4:	7008      	strb	r0, [r1, #0]
    83d6:	0021      	movs	r1, r4
    83d8:	1c5a      	adds	r2, r3, #1
    83da:	3145      	adds	r1, #69	; 0x45
    83dc:	7809      	ldrb	r1, [r1, #0]
    83de:	18a2      	adds	r2, r4, r2
    83e0:	3243      	adds	r2, #67	; 0x43
    83e2:	3302      	adds	r3, #2
    83e4:	7011      	strb	r1, [r2, #0]
    83e6:	e7c1      	b.n	836c <_printf_common+0x48>
    83e8:	0022      	movs	r2, r4
    83ea:	2301      	movs	r3, #1
    83ec:	321a      	adds	r2, #26
    83ee:	9901      	ldr	r1, [sp, #4]
    83f0:	9800      	ldr	r0, [sp, #0]
    83f2:	9e08      	ldr	r6, [sp, #32]
    83f4:	47b0      	blx	r6
    83f6:	1c43      	adds	r3, r0, #1
    83f8:	d0e6      	beq.n	83c8 <_printf_common+0xa4>
    83fa:	3701      	adds	r7, #1
    83fc:	e7d1      	b.n	83a2 <_printf_common+0x7e>
	...

00008400 <_printf_i>:
    8400:	b5f0      	push	{r4, r5, r6, r7, lr}
    8402:	b08b      	sub	sp, #44	; 0x2c
    8404:	9206      	str	r2, [sp, #24]
    8406:	000a      	movs	r2, r1
    8408:	3243      	adds	r2, #67	; 0x43
    840a:	9307      	str	r3, [sp, #28]
    840c:	9005      	str	r0, [sp, #20]
    840e:	9204      	str	r2, [sp, #16]
    8410:	7e0a      	ldrb	r2, [r1, #24]
    8412:	000c      	movs	r4, r1
    8414:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8416:	2a6e      	cmp	r2, #110	; 0x6e
    8418:	d100      	bne.n	841c <_printf_i+0x1c>
    841a:	e08f      	b.n	853c <_printf_i+0x13c>
    841c:	d817      	bhi.n	844e <_printf_i+0x4e>
    841e:	2a63      	cmp	r2, #99	; 0x63
    8420:	d02c      	beq.n	847c <_printf_i+0x7c>
    8422:	d808      	bhi.n	8436 <_printf_i+0x36>
    8424:	2a00      	cmp	r2, #0
    8426:	d100      	bne.n	842a <_printf_i+0x2a>
    8428:	e099      	b.n	855e <_printf_i+0x15e>
    842a:	2a58      	cmp	r2, #88	; 0x58
    842c:	d054      	beq.n	84d8 <_printf_i+0xd8>
    842e:	0026      	movs	r6, r4
    8430:	3642      	adds	r6, #66	; 0x42
    8432:	7032      	strb	r2, [r6, #0]
    8434:	e029      	b.n	848a <_printf_i+0x8a>
    8436:	2a64      	cmp	r2, #100	; 0x64
    8438:	d001      	beq.n	843e <_printf_i+0x3e>
    843a:	2a69      	cmp	r2, #105	; 0x69
    843c:	d1f7      	bne.n	842e <_printf_i+0x2e>
    843e:	6821      	ldr	r1, [r4, #0]
    8440:	681a      	ldr	r2, [r3, #0]
    8442:	0608      	lsls	r0, r1, #24
    8444:	d523      	bpl.n	848e <_printf_i+0x8e>
    8446:	1d11      	adds	r1, r2, #4
    8448:	6019      	str	r1, [r3, #0]
    844a:	6815      	ldr	r5, [r2, #0]
    844c:	e025      	b.n	849a <_printf_i+0x9a>
    844e:	2a73      	cmp	r2, #115	; 0x73
    8450:	d100      	bne.n	8454 <_printf_i+0x54>
    8452:	e088      	b.n	8566 <_printf_i+0x166>
    8454:	d808      	bhi.n	8468 <_printf_i+0x68>
    8456:	2a6f      	cmp	r2, #111	; 0x6f
    8458:	d029      	beq.n	84ae <_printf_i+0xae>
    845a:	2a70      	cmp	r2, #112	; 0x70
    845c:	d1e7      	bne.n	842e <_printf_i+0x2e>
    845e:	2220      	movs	r2, #32
    8460:	6809      	ldr	r1, [r1, #0]
    8462:	430a      	orrs	r2, r1
    8464:	6022      	str	r2, [r4, #0]
    8466:	e003      	b.n	8470 <_printf_i+0x70>
    8468:	2a75      	cmp	r2, #117	; 0x75
    846a:	d020      	beq.n	84ae <_printf_i+0xae>
    846c:	2a78      	cmp	r2, #120	; 0x78
    846e:	d1de      	bne.n	842e <_printf_i+0x2e>
    8470:	0022      	movs	r2, r4
    8472:	2178      	movs	r1, #120	; 0x78
    8474:	3245      	adds	r2, #69	; 0x45
    8476:	7011      	strb	r1, [r2, #0]
    8478:	4a6c      	ldr	r2, [pc, #432]	; (862c <_printf_i+0x22c>)
    847a:	e030      	b.n	84de <_printf_i+0xde>
    847c:	000e      	movs	r6, r1
    847e:	681a      	ldr	r2, [r3, #0]
    8480:	3642      	adds	r6, #66	; 0x42
    8482:	1d11      	adds	r1, r2, #4
    8484:	6019      	str	r1, [r3, #0]
    8486:	6813      	ldr	r3, [r2, #0]
    8488:	7033      	strb	r3, [r6, #0]
    848a:	2301      	movs	r3, #1
    848c:	e079      	b.n	8582 <_printf_i+0x182>
    848e:	0649      	lsls	r1, r1, #25
    8490:	d5d9      	bpl.n	8446 <_printf_i+0x46>
    8492:	1d11      	adds	r1, r2, #4
    8494:	6019      	str	r1, [r3, #0]
    8496:	2300      	movs	r3, #0
    8498:	5ed5      	ldrsh	r5, [r2, r3]
    849a:	2d00      	cmp	r5, #0
    849c:	da03      	bge.n	84a6 <_printf_i+0xa6>
    849e:	232d      	movs	r3, #45	; 0x2d
    84a0:	9a04      	ldr	r2, [sp, #16]
    84a2:	426d      	negs	r5, r5
    84a4:	7013      	strb	r3, [r2, #0]
    84a6:	4b62      	ldr	r3, [pc, #392]	; (8630 <_printf_i+0x230>)
    84a8:	270a      	movs	r7, #10
    84aa:	9303      	str	r3, [sp, #12]
    84ac:	e02f      	b.n	850e <_printf_i+0x10e>
    84ae:	6820      	ldr	r0, [r4, #0]
    84b0:	6819      	ldr	r1, [r3, #0]
    84b2:	0605      	lsls	r5, r0, #24
    84b4:	d503      	bpl.n	84be <_printf_i+0xbe>
    84b6:	1d08      	adds	r0, r1, #4
    84b8:	6018      	str	r0, [r3, #0]
    84ba:	680d      	ldr	r5, [r1, #0]
    84bc:	e005      	b.n	84ca <_printf_i+0xca>
    84be:	0640      	lsls	r0, r0, #25
    84c0:	d5f9      	bpl.n	84b6 <_printf_i+0xb6>
    84c2:	680d      	ldr	r5, [r1, #0]
    84c4:	1d08      	adds	r0, r1, #4
    84c6:	6018      	str	r0, [r3, #0]
    84c8:	b2ad      	uxth	r5, r5
    84ca:	4b59      	ldr	r3, [pc, #356]	; (8630 <_printf_i+0x230>)
    84cc:	2708      	movs	r7, #8
    84ce:	9303      	str	r3, [sp, #12]
    84d0:	2a6f      	cmp	r2, #111	; 0x6f
    84d2:	d018      	beq.n	8506 <_printf_i+0x106>
    84d4:	270a      	movs	r7, #10
    84d6:	e016      	b.n	8506 <_printf_i+0x106>
    84d8:	3145      	adds	r1, #69	; 0x45
    84da:	700a      	strb	r2, [r1, #0]
    84dc:	4a54      	ldr	r2, [pc, #336]	; (8630 <_printf_i+0x230>)
    84de:	9203      	str	r2, [sp, #12]
    84e0:	681a      	ldr	r2, [r3, #0]
    84e2:	6821      	ldr	r1, [r4, #0]
    84e4:	1d10      	adds	r0, r2, #4
    84e6:	6018      	str	r0, [r3, #0]
    84e8:	6815      	ldr	r5, [r2, #0]
    84ea:	0608      	lsls	r0, r1, #24
    84ec:	d522      	bpl.n	8534 <_printf_i+0x134>
    84ee:	07cb      	lsls	r3, r1, #31
    84f0:	d502      	bpl.n	84f8 <_printf_i+0xf8>
    84f2:	2320      	movs	r3, #32
    84f4:	4319      	orrs	r1, r3
    84f6:	6021      	str	r1, [r4, #0]
    84f8:	2710      	movs	r7, #16
    84fa:	2d00      	cmp	r5, #0
    84fc:	d103      	bne.n	8506 <_printf_i+0x106>
    84fe:	2320      	movs	r3, #32
    8500:	6822      	ldr	r2, [r4, #0]
    8502:	439a      	bics	r2, r3
    8504:	6022      	str	r2, [r4, #0]
    8506:	0023      	movs	r3, r4
    8508:	2200      	movs	r2, #0
    850a:	3343      	adds	r3, #67	; 0x43
    850c:	701a      	strb	r2, [r3, #0]
    850e:	6863      	ldr	r3, [r4, #4]
    8510:	60a3      	str	r3, [r4, #8]
    8512:	2b00      	cmp	r3, #0
    8514:	db5c      	blt.n	85d0 <_printf_i+0x1d0>
    8516:	2204      	movs	r2, #4
    8518:	6821      	ldr	r1, [r4, #0]
    851a:	4391      	bics	r1, r2
    851c:	6021      	str	r1, [r4, #0]
    851e:	2d00      	cmp	r5, #0
    8520:	d158      	bne.n	85d4 <_printf_i+0x1d4>
    8522:	9e04      	ldr	r6, [sp, #16]
    8524:	2b00      	cmp	r3, #0
    8526:	d064      	beq.n	85f2 <_printf_i+0x1f2>
    8528:	0026      	movs	r6, r4
    852a:	9b03      	ldr	r3, [sp, #12]
    852c:	3642      	adds	r6, #66	; 0x42
    852e:	781b      	ldrb	r3, [r3, #0]
    8530:	7033      	strb	r3, [r6, #0]
    8532:	e05e      	b.n	85f2 <_printf_i+0x1f2>
    8534:	0648      	lsls	r0, r1, #25
    8536:	d5da      	bpl.n	84ee <_printf_i+0xee>
    8538:	b2ad      	uxth	r5, r5
    853a:	e7d8      	b.n	84ee <_printf_i+0xee>
    853c:	6809      	ldr	r1, [r1, #0]
    853e:	681a      	ldr	r2, [r3, #0]
    8540:	0608      	lsls	r0, r1, #24
    8542:	d505      	bpl.n	8550 <_printf_i+0x150>
    8544:	1d11      	adds	r1, r2, #4
    8546:	6019      	str	r1, [r3, #0]
    8548:	6813      	ldr	r3, [r2, #0]
    854a:	6962      	ldr	r2, [r4, #20]
    854c:	601a      	str	r2, [r3, #0]
    854e:	e006      	b.n	855e <_printf_i+0x15e>
    8550:	0649      	lsls	r1, r1, #25
    8552:	d5f7      	bpl.n	8544 <_printf_i+0x144>
    8554:	1d11      	adds	r1, r2, #4
    8556:	6019      	str	r1, [r3, #0]
    8558:	6813      	ldr	r3, [r2, #0]
    855a:	8aa2      	ldrh	r2, [r4, #20]
    855c:	801a      	strh	r2, [r3, #0]
    855e:	2300      	movs	r3, #0
    8560:	9e04      	ldr	r6, [sp, #16]
    8562:	6123      	str	r3, [r4, #16]
    8564:	e054      	b.n	8610 <_printf_i+0x210>
    8566:	681a      	ldr	r2, [r3, #0]
    8568:	1d11      	adds	r1, r2, #4
    856a:	6019      	str	r1, [r3, #0]
    856c:	6816      	ldr	r6, [r2, #0]
    856e:	2100      	movs	r1, #0
    8570:	6862      	ldr	r2, [r4, #4]
    8572:	0030      	movs	r0, r6
    8574:	f000 f9e6 	bl	8944 <memchr>
    8578:	2800      	cmp	r0, #0
    857a:	d001      	beq.n	8580 <_printf_i+0x180>
    857c:	1b80      	subs	r0, r0, r6
    857e:	6060      	str	r0, [r4, #4]
    8580:	6863      	ldr	r3, [r4, #4]
    8582:	6123      	str	r3, [r4, #16]
    8584:	2300      	movs	r3, #0
    8586:	9a04      	ldr	r2, [sp, #16]
    8588:	7013      	strb	r3, [r2, #0]
    858a:	e041      	b.n	8610 <_printf_i+0x210>
    858c:	6923      	ldr	r3, [r4, #16]
    858e:	0032      	movs	r2, r6
    8590:	9906      	ldr	r1, [sp, #24]
    8592:	9805      	ldr	r0, [sp, #20]
    8594:	9d07      	ldr	r5, [sp, #28]
    8596:	47a8      	blx	r5
    8598:	1c43      	adds	r3, r0, #1
    859a:	d043      	beq.n	8624 <_printf_i+0x224>
    859c:	6823      	ldr	r3, [r4, #0]
    859e:	2500      	movs	r5, #0
    85a0:	079b      	lsls	r3, r3, #30
    85a2:	d40f      	bmi.n	85c4 <_printf_i+0x1c4>
    85a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    85a6:	68e0      	ldr	r0, [r4, #12]
    85a8:	4298      	cmp	r0, r3
    85aa:	da3d      	bge.n	8628 <_printf_i+0x228>
    85ac:	0018      	movs	r0, r3
    85ae:	e03b      	b.n	8628 <_printf_i+0x228>
    85b0:	0022      	movs	r2, r4
    85b2:	2301      	movs	r3, #1
    85b4:	3219      	adds	r2, #25
    85b6:	9906      	ldr	r1, [sp, #24]
    85b8:	9805      	ldr	r0, [sp, #20]
    85ba:	9e07      	ldr	r6, [sp, #28]
    85bc:	47b0      	blx	r6
    85be:	1c43      	adds	r3, r0, #1
    85c0:	d030      	beq.n	8624 <_printf_i+0x224>
    85c2:	3501      	adds	r5, #1
    85c4:	68e3      	ldr	r3, [r4, #12]
    85c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    85c8:	1a9b      	subs	r3, r3, r2
    85ca:	429d      	cmp	r5, r3
    85cc:	dbf0      	blt.n	85b0 <_printf_i+0x1b0>
    85ce:	e7e9      	b.n	85a4 <_printf_i+0x1a4>
    85d0:	2d00      	cmp	r5, #0
    85d2:	d0a9      	beq.n	8528 <_printf_i+0x128>
    85d4:	9e04      	ldr	r6, [sp, #16]
    85d6:	0028      	movs	r0, r5
    85d8:	0039      	movs	r1, r7
    85da:	f7fe fde1 	bl	71a0 <__aeabi_uidivmod>
    85de:	9b03      	ldr	r3, [sp, #12]
    85e0:	3e01      	subs	r6, #1
    85e2:	5c5b      	ldrb	r3, [r3, r1]
    85e4:	0028      	movs	r0, r5
    85e6:	7033      	strb	r3, [r6, #0]
    85e8:	0039      	movs	r1, r7
    85ea:	f7fe fd53 	bl	7094 <__udivsi3>
    85ee:	1e05      	subs	r5, r0, #0
    85f0:	d1f1      	bne.n	85d6 <_printf_i+0x1d6>
    85f2:	2f08      	cmp	r7, #8
    85f4:	d109      	bne.n	860a <_printf_i+0x20a>
    85f6:	6823      	ldr	r3, [r4, #0]
    85f8:	07db      	lsls	r3, r3, #31
    85fa:	d506      	bpl.n	860a <_printf_i+0x20a>
    85fc:	6863      	ldr	r3, [r4, #4]
    85fe:	6922      	ldr	r2, [r4, #16]
    8600:	4293      	cmp	r3, r2
    8602:	dc02      	bgt.n	860a <_printf_i+0x20a>
    8604:	2330      	movs	r3, #48	; 0x30
    8606:	3e01      	subs	r6, #1
    8608:	7033      	strb	r3, [r6, #0]
    860a:	9b04      	ldr	r3, [sp, #16]
    860c:	1b9b      	subs	r3, r3, r6
    860e:	6123      	str	r3, [r4, #16]
    8610:	9b07      	ldr	r3, [sp, #28]
    8612:	aa09      	add	r2, sp, #36	; 0x24
    8614:	9300      	str	r3, [sp, #0]
    8616:	0021      	movs	r1, r4
    8618:	9b06      	ldr	r3, [sp, #24]
    861a:	9805      	ldr	r0, [sp, #20]
    861c:	f7ff fe82 	bl	8324 <_printf_common>
    8620:	1c43      	adds	r3, r0, #1
    8622:	d1b3      	bne.n	858c <_printf_i+0x18c>
    8624:	2001      	movs	r0, #1
    8626:	4240      	negs	r0, r0
    8628:	b00b      	add	sp, #44	; 0x2c
    862a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    862c:	00008e2a 	.word	0x00008e2a
    8630:	00008e19 	.word	0x00008e19

00008634 <_sbrk_r>:
    8634:	2300      	movs	r3, #0
    8636:	b570      	push	{r4, r5, r6, lr}
    8638:	4c06      	ldr	r4, [pc, #24]	; (8654 <_sbrk_r+0x20>)
    863a:	0005      	movs	r5, r0
    863c:	0008      	movs	r0, r1
    863e:	6023      	str	r3, [r4, #0]
    8640:	f7fe fd0a 	bl	7058 <_sbrk>
    8644:	1c43      	adds	r3, r0, #1
    8646:	d103      	bne.n	8650 <_sbrk_r+0x1c>
    8648:	6823      	ldr	r3, [r4, #0]
    864a:	2b00      	cmp	r3, #0
    864c:	d000      	beq.n	8650 <_sbrk_r+0x1c>
    864e:	602b      	str	r3, [r5, #0]
    8650:	bd70      	pop	{r4, r5, r6, pc}
    8652:	46c0      	nop			; (mov r8, r8)
    8654:	20001060 	.word	0x20001060

00008658 <__sread>:
    8658:	b570      	push	{r4, r5, r6, lr}
    865a:	000c      	movs	r4, r1
    865c:	250e      	movs	r5, #14
    865e:	5f49      	ldrsh	r1, [r1, r5]
    8660:	f000 f9b6 	bl	89d0 <_read_r>
    8664:	2800      	cmp	r0, #0
    8666:	db03      	blt.n	8670 <__sread+0x18>
    8668:	6d63      	ldr	r3, [r4, #84]	; 0x54
    866a:	181b      	adds	r3, r3, r0
    866c:	6563      	str	r3, [r4, #84]	; 0x54
    866e:	bd70      	pop	{r4, r5, r6, pc}
    8670:	89a3      	ldrh	r3, [r4, #12]
    8672:	4a02      	ldr	r2, [pc, #8]	; (867c <__sread+0x24>)
    8674:	4013      	ands	r3, r2
    8676:	81a3      	strh	r3, [r4, #12]
    8678:	e7f9      	b.n	866e <__sread+0x16>
    867a:	46c0      	nop			; (mov r8, r8)
    867c:	ffffefff 	.word	0xffffefff

00008680 <__swrite>:
    8680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8682:	001f      	movs	r7, r3
    8684:	898b      	ldrh	r3, [r1, #12]
    8686:	0005      	movs	r5, r0
    8688:	000c      	movs	r4, r1
    868a:	0016      	movs	r6, r2
    868c:	05db      	lsls	r3, r3, #23
    868e:	d505      	bpl.n	869c <__swrite+0x1c>
    8690:	230e      	movs	r3, #14
    8692:	5ec9      	ldrsh	r1, [r1, r3]
    8694:	2200      	movs	r2, #0
    8696:	2302      	movs	r3, #2
    8698:	f000 f940 	bl	891c <_lseek_r>
    869c:	89a3      	ldrh	r3, [r4, #12]
    869e:	4a05      	ldr	r2, [pc, #20]	; (86b4 <__swrite+0x34>)
    86a0:	0028      	movs	r0, r5
    86a2:	4013      	ands	r3, r2
    86a4:	81a3      	strh	r3, [r4, #12]
    86a6:	0032      	movs	r2, r6
    86a8:	230e      	movs	r3, #14
    86aa:	5ee1      	ldrsh	r1, [r4, r3]
    86ac:	003b      	movs	r3, r7
    86ae:	f000 f875 	bl	879c <_write_r>
    86b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86b4:	ffffefff 	.word	0xffffefff

000086b8 <__sseek>:
    86b8:	b570      	push	{r4, r5, r6, lr}
    86ba:	000c      	movs	r4, r1
    86bc:	250e      	movs	r5, #14
    86be:	5f49      	ldrsh	r1, [r1, r5]
    86c0:	f000 f92c 	bl	891c <_lseek_r>
    86c4:	89a3      	ldrh	r3, [r4, #12]
    86c6:	1c42      	adds	r2, r0, #1
    86c8:	d103      	bne.n	86d2 <__sseek+0x1a>
    86ca:	4a05      	ldr	r2, [pc, #20]	; (86e0 <__sseek+0x28>)
    86cc:	4013      	ands	r3, r2
    86ce:	81a3      	strh	r3, [r4, #12]
    86d0:	bd70      	pop	{r4, r5, r6, pc}
    86d2:	2280      	movs	r2, #128	; 0x80
    86d4:	0152      	lsls	r2, r2, #5
    86d6:	4313      	orrs	r3, r2
    86d8:	81a3      	strh	r3, [r4, #12]
    86da:	6560      	str	r0, [r4, #84]	; 0x54
    86dc:	e7f8      	b.n	86d0 <__sseek+0x18>
    86de:	46c0      	nop			; (mov r8, r8)
    86e0:	ffffefff 	.word	0xffffefff

000086e4 <__sclose>:
    86e4:	b510      	push	{r4, lr}
    86e6:	230e      	movs	r3, #14
    86e8:	5ec9      	ldrsh	r1, [r1, r3]
    86ea:	f000 f8e1 	bl	88b0 <_close_r>
    86ee:	bd10      	pop	{r4, pc}

000086f0 <__swbuf_r>:
    86f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86f2:	0005      	movs	r5, r0
    86f4:	000e      	movs	r6, r1
    86f6:	0014      	movs	r4, r2
    86f8:	2800      	cmp	r0, #0
    86fa:	d004      	beq.n	8706 <__swbuf_r+0x16>
    86fc:	6983      	ldr	r3, [r0, #24]
    86fe:	2b00      	cmp	r3, #0
    8700:	d101      	bne.n	8706 <__swbuf_r+0x16>
    8702:	f7ff f9b1 	bl	7a68 <__sinit>
    8706:	4b22      	ldr	r3, [pc, #136]	; (8790 <__swbuf_r+0xa0>)
    8708:	429c      	cmp	r4, r3
    870a:	d12d      	bne.n	8768 <__swbuf_r+0x78>
    870c:	686c      	ldr	r4, [r5, #4]
    870e:	69a3      	ldr	r3, [r4, #24]
    8710:	60a3      	str	r3, [r4, #8]
    8712:	89a3      	ldrh	r3, [r4, #12]
    8714:	071b      	lsls	r3, r3, #28
    8716:	d531      	bpl.n	877c <__swbuf_r+0x8c>
    8718:	6923      	ldr	r3, [r4, #16]
    871a:	2b00      	cmp	r3, #0
    871c:	d02e      	beq.n	877c <__swbuf_r+0x8c>
    871e:	6823      	ldr	r3, [r4, #0]
    8720:	6922      	ldr	r2, [r4, #16]
    8722:	b2f7      	uxtb	r7, r6
    8724:	1a98      	subs	r0, r3, r2
    8726:	6963      	ldr	r3, [r4, #20]
    8728:	b2f6      	uxtb	r6, r6
    872a:	4298      	cmp	r0, r3
    872c:	db05      	blt.n	873a <__swbuf_r+0x4a>
    872e:	0021      	movs	r1, r4
    8730:	0028      	movs	r0, r5
    8732:	f7ff f92b 	bl	798c <_fflush_r>
    8736:	2800      	cmp	r0, #0
    8738:	d126      	bne.n	8788 <__swbuf_r+0x98>
    873a:	68a3      	ldr	r3, [r4, #8]
    873c:	3001      	adds	r0, #1
    873e:	3b01      	subs	r3, #1
    8740:	60a3      	str	r3, [r4, #8]
    8742:	6823      	ldr	r3, [r4, #0]
    8744:	1c5a      	adds	r2, r3, #1
    8746:	6022      	str	r2, [r4, #0]
    8748:	701f      	strb	r7, [r3, #0]
    874a:	6963      	ldr	r3, [r4, #20]
    874c:	4298      	cmp	r0, r3
    874e:	d004      	beq.n	875a <__swbuf_r+0x6a>
    8750:	89a3      	ldrh	r3, [r4, #12]
    8752:	07db      	lsls	r3, r3, #31
    8754:	d51a      	bpl.n	878c <__swbuf_r+0x9c>
    8756:	2e0a      	cmp	r6, #10
    8758:	d118      	bne.n	878c <__swbuf_r+0x9c>
    875a:	0021      	movs	r1, r4
    875c:	0028      	movs	r0, r5
    875e:	f7ff f915 	bl	798c <_fflush_r>
    8762:	2800      	cmp	r0, #0
    8764:	d012      	beq.n	878c <__swbuf_r+0x9c>
    8766:	e00f      	b.n	8788 <__swbuf_r+0x98>
    8768:	4b0a      	ldr	r3, [pc, #40]	; (8794 <__swbuf_r+0xa4>)
    876a:	429c      	cmp	r4, r3
    876c:	d101      	bne.n	8772 <__swbuf_r+0x82>
    876e:	68ac      	ldr	r4, [r5, #8]
    8770:	e7cd      	b.n	870e <__swbuf_r+0x1e>
    8772:	4b09      	ldr	r3, [pc, #36]	; (8798 <__swbuf_r+0xa8>)
    8774:	429c      	cmp	r4, r3
    8776:	d1ca      	bne.n	870e <__swbuf_r+0x1e>
    8778:	68ec      	ldr	r4, [r5, #12]
    877a:	e7c8      	b.n	870e <__swbuf_r+0x1e>
    877c:	0021      	movs	r1, r4
    877e:	0028      	movs	r0, r5
    8780:	f000 f820 	bl	87c4 <__swsetup_r>
    8784:	2800      	cmp	r0, #0
    8786:	d0ca      	beq.n	871e <__swbuf_r+0x2e>
    8788:	2601      	movs	r6, #1
    878a:	4276      	negs	r6, r6
    878c:	0030      	movs	r0, r6
    878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8790:	00008dc8 	.word	0x00008dc8
    8794:	00008de8 	.word	0x00008de8
    8798:	00008da8 	.word	0x00008da8

0000879c <_write_r>:
    879c:	b570      	push	{r4, r5, r6, lr}
    879e:	0005      	movs	r5, r0
    87a0:	0008      	movs	r0, r1
    87a2:	0011      	movs	r1, r2
    87a4:	2200      	movs	r2, #0
    87a6:	4c06      	ldr	r4, [pc, #24]	; (87c0 <_write_r+0x24>)
    87a8:	6022      	str	r2, [r4, #0]
    87aa:	001a      	movs	r2, r3
    87ac:	f7fb fbf0 	bl	3f90 <_write>
    87b0:	1c43      	adds	r3, r0, #1
    87b2:	d103      	bne.n	87bc <_write_r+0x20>
    87b4:	6823      	ldr	r3, [r4, #0]
    87b6:	2b00      	cmp	r3, #0
    87b8:	d000      	beq.n	87bc <_write_r+0x20>
    87ba:	602b      	str	r3, [r5, #0]
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	46c0      	nop			; (mov r8, r8)
    87c0:	20001060 	.word	0x20001060

000087c4 <__swsetup_r>:
    87c4:	4b36      	ldr	r3, [pc, #216]	; (88a0 <__swsetup_r+0xdc>)
    87c6:	b570      	push	{r4, r5, r6, lr}
    87c8:	681d      	ldr	r5, [r3, #0]
    87ca:	0006      	movs	r6, r0
    87cc:	000c      	movs	r4, r1
    87ce:	2d00      	cmp	r5, #0
    87d0:	d005      	beq.n	87de <__swsetup_r+0x1a>
    87d2:	69ab      	ldr	r3, [r5, #24]
    87d4:	2b00      	cmp	r3, #0
    87d6:	d102      	bne.n	87de <__swsetup_r+0x1a>
    87d8:	0028      	movs	r0, r5
    87da:	f7ff f945 	bl	7a68 <__sinit>
    87de:	4b31      	ldr	r3, [pc, #196]	; (88a4 <__swsetup_r+0xe0>)
    87e0:	429c      	cmp	r4, r3
    87e2:	d10f      	bne.n	8804 <__swsetup_r+0x40>
    87e4:	686c      	ldr	r4, [r5, #4]
    87e6:	230c      	movs	r3, #12
    87e8:	5ee2      	ldrsh	r2, [r4, r3]
    87ea:	b293      	uxth	r3, r2
    87ec:	0719      	lsls	r1, r3, #28
    87ee:	d42d      	bmi.n	884c <__swsetup_r+0x88>
    87f0:	06d9      	lsls	r1, r3, #27
    87f2:	d411      	bmi.n	8818 <__swsetup_r+0x54>
    87f4:	2309      	movs	r3, #9
    87f6:	2001      	movs	r0, #1
    87f8:	6033      	str	r3, [r6, #0]
    87fa:	3337      	adds	r3, #55	; 0x37
    87fc:	4313      	orrs	r3, r2
    87fe:	81a3      	strh	r3, [r4, #12]
    8800:	4240      	negs	r0, r0
    8802:	bd70      	pop	{r4, r5, r6, pc}
    8804:	4b28      	ldr	r3, [pc, #160]	; (88a8 <__swsetup_r+0xe4>)
    8806:	429c      	cmp	r4, r3
    8808:	d101      	bne.n	880e <__swsetup_r+0x4a>
    880a:	68ac      	ldr	r4, [r5, #8]
    880c:	e7eb      	b.n	87e6 <__swsetup_r+0x22>
    880e:	4b27      	ldr	r3, [pc, #156]	; (88ac <__swsetup_r+0xe8>)
    8810:	429c      	cmp	r4, r3
    8812:	d1e8      	bne.n	87e6 <__swsetup_r+0x22>
    8814:	68ec      	ldr	r4, [r5, #12]
    8816:	e7e6      	b.n	87e6 <__swsetup_r+0x22>
    8818:	075b      	lsls	r3, r3, #29
    881a:	d513      	bpl.n	8844 <__swsetup_r+0x80>
    881c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    881e:	2900      	cmp	r1, #0
    8820:	d008      	beq.n	8834 <__swsetup_r+0x70>
    8822:	0023      	movs	r3, r4
    8824:	3344      	adds	r3, #68	; 0x44
    8826:	4299      	cmp	r1, r3
    8828:	d002      	beq.n	8830 <__swsetup_r+0x6c>
    882a:	0030      	movs	r0, r6
    882c:	f7ff fa28 	bl	7c80 <_free_r>
    8830:	2300      	movs	r3, #0
    8832:	6363      	str	r3, [r4, #52]	; 0x34
    8834:	2224      	movs	r2, #36	; 0x24
    8836:	89a3      	ldrh	r3, [r4, #12]
    8838:	4393      	bics	r3, r2
    883a:	81a3      	strh	r3, [r4, #12]
    883c:	2300      	movs	r3, #0
    883e:	6063      	str	r3, [r4, #4]
    8840:	6923      	ldr	r3, [r4, #16]
    8842:	6023      	str	r3, [r4, #0]
    8844:	2308      	movs	r3, #8
    8846:	89a2      	ldrh	r2, [r4, #12]
    8848:	4313      	orrs	r3, r2
    884a:	81a3      	strh	r3, [r4, #12]
    884c:	6923      	ldr	r3, [r4, #16]
    884e:	2b00      	cmp	r3, #0
    8850:	d10b      	bne.n	886a <__swsetup_r+0xa6>
    8852:	21a0      	movs	r1, #160	; 0xa0
    8854:	2280      	movs	r2, #128	; 0x80
    8856:	89a3      	ldrh	r3, [r4, #12]
    8858:	0089      	lsls	r1, r1, #2
    885a:	0092      	lsls	r2, r2, #2
    885c:	400b      	ands	r3, r1
    885e:	4293      	cmp	r3, r2
    8860:	d003      	beq.n	886a <__swsetup_r+0xa6>
    8862:	0021      	movs	r1, r4
    8864:	0030      	movs	r0, r6
    8866:	f7ff f9bd 	bl	7be4 <__smakebuf_r>
    886a:	2301      	movs	r3, #1
    886c:	89a2      	ldrh	r2, [r4, #12]
    886e:	4013      	ands	r3, r2
    8870:	d011      	beq.n	8896 <__swsetup_r+0xd2>
    8872:	2300      	movs	r3, #0
    8874:	60a3      	str	r3, [r4, #8]
    8876:	6963      	ldr	r3, [r4, #20]
    8878:	425b      	negs	r3, r3
    887a:	61a3      	str	r3, [r4, #24]
    887c:	2000      	movs	r0, #0
    887e:	6923      	ldr	r3, [r4, #16]
    8880:	4283      	cmp	r3, r0
    8882:	d1be      	bne.n	8802 <__swsetup_r+0x3e>
    8884:	230c      	movs	r3, #12
    8886:	5ee2      	ldrsh	r2, [r4, r3]
    8888:	0613      	lsls	r3, r2, #24
    888a:	d5ba      	bpl.n	8802 <__swsetup_r+0x3e>
    888c:	2340      	movs	r3, #64	; 0x40
    888e:	4313      	orrs	r3, r2
    8890:	81a3      	strh	r3, [r4, #12]
    8892:	3801      	subs	r0, #1
    8894:	e7b5      	b.n	8802 <__swsetup_r+0x3e>
    8896:	0792      	lsls	r2, r2, #30
    8898:	d400      	bmi.n	889c <__swsetup_r+0xd8>
    889a:	6963      	ldr	r3, [r4, #20]
    889c:	60a3      	str	r3, [r4, #8]
    889e:	e7ed      	b.n	887c <__swsetup_r+0xb8>
    88a0:	200000fc 	.word	0x200000fc
    88a4:	00008dc8 	.word	0x00008dc8
    88a8:	00008de8 	.word	0x00008de8
    88ac:	00008da8 	.word	0x00008da8

000088b0 <_close_r>:
    88b0:	2300      	movs	r3, #0
    88b2:	b570      	push	{r4, r5, r6, lr}
    88b4:	4c06      	ldr	r4, [pc, #24]	; (88d0 <_close_r+0x20>)
    88b6:	0005      	movs	r5, r0
    88b8:	0008      	movs	r0, r1
    88ba:	6023      	str	r3, [r4, #0]
    88bc:	f7fe fbde 	bl	707c <_close>
    88c0:	1c43      	adds	r3, r0, #1
    88c2:	d103      	bne.n	88cc <_close_r+0x1c>
    88c4:	6823      	ldr	r3, [r4, #0]
    88c6:	2b00      	cmp	r3, #0
    88c8:	d000      	beq.n	88cc <_close_r+0x1c>
    88ca:	602b      	str	r3, [r5, #0]
    88cc:	bd70      	pop	{r4, r5, r6, pc}
    88ce:	46c0      	nop			; (mov r8, r8)
    88d0:	20001060 	.word	0x20001060

000088d4 <_fstat_r>:
    88d4:	2300      	movs	r3, #0
    88d6:	b570      	push	{r4, r5, r6, lr}
    88d8:	4c06      	ldr	r4, [pc, #24]	; (88f4 <_fstat_r+0x20>)
    88da:	0005      	movs	r5, r0
    88dc:	0008      	movs	r0, r1
    88de:	0011      	movs	r1, r2
    88e0:	6023      	str	r3, [r4, #0]
    88e2:	f7fe fbce 	bl	7082 <_fstat>
    88e6:	1c43      	adds	r3, r0, #1
    88e8:	d103      	bne.n	88f2 <_fstat_r+0x1e>
    88ea:	6823      	ldr	r3, [r4, #0]
    88ec:	2b00      	cmp	r3, #0
    88ee:	d000      	beq.n	88f2 <_fstat_r+0x1e>
    88f0:	602b      	str	r3, [r5, #0]
    88f2:	bd70      	pop	{r4, r5, r6, pc}
    88f4:	20001060 	.word	0x20001060

000088f8 <_isatty_r>:
    88f8:	2300      	movs	r3, #0
    88fa:	b570      	push	{r4, r5, r6, lr}
    88fc:	4c06      	ldr	r4, [pc, #24]	; (8918 <_isatty_r+0x20>)
    88fe:	0005      	movs	r5, r0
    8900:	0008      	movs	r0, r1
    8902:	6023      	str	r3, [r4, #0]
    8904:	f7fe fbc2 	bl	708c <_isatty>
    8908:	1c43      	adds	r3, r0, #1
    890a:	d103      	bne.n	8914 <_isatty_r+0x1c>
    890c:	6823      	ldr	r3, [r4, #0]
    890e:	2b00      	cmp	r3, #0
    8910:	d000      	beq.n	8914 <_isatty_r+0x1c>
    8912:	602b      	str	r3, [r5, #0]
    8914:	bd70      	pop	{r4, r5, r6, pc}
    8916:	46c0      	nop			; (mov r8, r8)
    8918:	20001060 	.word	0x20001060

0000891c <_lseek_r>:
    891c:	b570      	push	{r4, r5, r6, lr}
    891e:	0005      	movs	r5, r0
    8920:	0008      	movs	r0, r1
    8922:	0011      	movs	r1, r2
    8924:	2200      	movs	r2, #0
    8926:	4c06      	ldr	r4, [pc, #24]	; (8940 <_lseek_r+0x24>)
    8928:	6022      	str	r2, [r4, #0]
    892a:	001a      	movs	r2, r3
    892c:	f7fe fbb0 	bl	7090 <_lseek>
    8930:	1c43      	adds	r3, r0, #1
    8932:	d103      	bne.n	893c <_lseek_r+0x20>
    8934:	6823      	ldr	r3, [r4, #0]
    8936:	2b00      	cmp	r3, #0
    8938:	d000      	beq.n	893c <_lseek_r+0x20>
    893a:	602b      	str	r3, [r5, #0]
    893c:	bd70      	pop	{r4, r5, r6, pc}
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	20001060 	.word	0x20001060

00008944 <memchr>:
    8944:	b2c9      	uxtb	r1, r1
    8946:	1882      	adds	r2, r0, r2
    8948:	4290      	cmp	r0, r2
    894a:	d101      	bne.n	8950 <memchr+0xc>
    894c:	2000      	movs	r0, #0
    894e:	4770      	bx	lr
    8950:	7803      	ldrb	r3, [r0, #0]
    8952:	428b      	cmp	r3, r1
    8954:	d0fb      	beq.n	894e <memchr+0xa>
    8956:	3001      	adds	r0, #1
    8958:	e7f6      	b.n	8948 <memchr+0x4>

0000895a <memmove>:
    895a:	b510      	push	{r4, lr}
    895c:	4288      	cmp	r0, r1
    895e:	d902      	bls.n	8966 <memmove+0xc>
    8960:	188b      	adds	r3, r1, r2
    8962:	4298      	cmp	r0, r3
    8964:	d308      	bcc.n	8978 <memmove+0x1e>
    8966:	2300      	movs	r3, #0
    8968:	429a      	cmp	r2, r3
    896a:	d007      	beq.n	897c <memmove+0x22>
    896c:	5ccc      	ldrb	r4, [r1, r3]
    896e:	54c4      	strb	r4, [r0, r3]
    8970:	3301      	adds	r3, #1
    8972:	e7f9      	b.n	8968 <memmove+0xe>
    8974:	5c8b      	ldrb	r3, [r1, r2]
    8976:	5483      	strb	r3, [r0, r2]
    8978:	3a01      	subs	r2, #1
    897a:	d2fb      	bcs.n	8974 <memmove+0x1a>
    897c:	bd10      	pop	{r4, pc}

0000897e <__malloc_lock>:
    897e:	4770      	bx	lr

00008980 <__malloc_unlock>:
    8980:	4770      	bx	lr

00008982 <_realloc_r>:
    8982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8984:	0007      	movs	r7, r0
    8986:	000d      	movs	r5, r1
    8988:	0016      	movs	r6, r2
    898a:	2900      	cmp	r1, #0
    898c:	d105      	bne.n	899a <_realloc_r+0x18>
    898e:	0011      	movs	r1, r2
    8990:	f7ff f9c0 	bl	7d14 <_malloc_r>
    8994:	0004      	movs	r4, r0
    8996:	0020      	movs	r0, r4
    8998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    899a:	2a00      	cmp	r2, #0
    899c:	d103      	bne.n	89a6 <_realloc_r+0x24>
    899e:	f7ff f96f 	bl	7c80 <_free_r>
    89a2:	0034      	movs	r4, r6
    89a4:	e7f7      	b.n	8996 <_realloc_r+0x14>
    89a6:	f000 f827 	bl	89f8 <_malloc_usable_size_r>
    89aa:	002c      	movs	r4, r5
    89ac:	4286      	cmp	r6, r0
    89ae:	d9f2      	bls.n	8996 <_realloc_r+0x14>
    89b0:	0031      	movs	r1, r6
    89b2:	0038      	movs	r0, r7
    89b4:	f7ff f9ae 	bl	7d14 <_malloc_r>
    89b8:	1e04      	subs	r4, r0, #0
    89ba:	d0ec      	beq.n	8996 <_realloc_r+0x14>
    89bc:	0029      	movs	r1, r5
    89be:	0032      	movs	r2, r6
    89c0:	f7fe fe56 	bl	7670 <memcpy>
    89c4:	0029      	movs	r1, r5
    89c6:	0038      	movs	r0, r7
    89c8:	f7ff f95a 	bl	7c80 <_free_r>
    89cc:	e7e3      	b.n	8996 <_realloc_r+0x14>
	...

000089d0 <_read_r>:
    89d0:	b570      	push	{r4, r5, r6, lr}
    89d2:	0005      	movs	r5, r0
    89d4:	0008      	movs	r0, r1
    89d6:	0011      	movs	r1, r2
    89d8:	2200      	movs	r2, #0
    89da:	4c06      	ldr	r4, [pc, #24]	; (89f4 <_read_r+0x24>)
    89dc:	6022      	str	r2, [r4, #0]
    89de:	001a      	movs	r2, r3
    89e0:	f7fb fab4 	bl	3f4c <_read>
    89e4:	1c43      	adds	r3, r0, #1
    89e6:	d103      	bne.n	89f0 <_read_r+0x20>
    89e8:	6823      	ldr	r3, [r4, #0]
    89ea:	2b00      	cmp	r3, #0
    89ec:	d000      	beq.n	89f0 <_read_r+0x20>
    89ee:	602b      	str	r3, [r5, #0]
    89f0:	bd70      	pop	{r4, r5, r6, pc}
    89f2:	46c0      	nop			; (mov r8, r8)
    89f4:	20001060 	.word	0x20001060

000089f8 <_malloc_usable_size_r>:
    89f8:	1f0b      	subs	r3, r1, #4
    89fa:	681b      	ldr	r3, [r3, #0]
    89fc:	1f18      	subs	r0, r3, #4
    89fe:	2b00      	cmp	r3, #0
    8a00:	da01      	bge.n	8a06 <_malloc_usable_size_r+0xe>
    8a02:	580b      	ldr	r3, [r1, r0]
    8a04:	18c0      	adds	r0, r0, r3
    8a06:	4770      	bx	lr

00008a08 <_tcc_apbcmasks>:
    8a08:	0100 0000 0200 0000 0400 0000               ............

00008a14 <_tcc_cc_nums>:
    8a14:	0204 0002                                   ....

00008a18 <_tcc_gclk_ids>:
    8a18:	1a1a 001b                                   ....

00008a1c <_tcc_maxs>:
    8a1c:	ffff 00ff ffff 00ff ffff 0000               ............

00008a28 <_tcc_ow_nums>:
    8a28:	0408 0002                                   ....

00008a2c <_tcc_intflag>:
    8a2c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    8a3c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    8a4c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00008a5c <tcc_interrupt_vectors.12466>:
    8a5c:	100f 0011 6425 0000 3025 6432 0000 0000     ....%d..%02d....
    8a6c:	6547 656e 6172 6574 2064 6966 656c 6e20     Generated file n
    8a7c:	6d61 3a65 2520 0073                         ame: %s.

00008a84 <mmc_trans_multipliers>:
    8a84:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    8a94:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    8aa4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    8ab4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00008ac4 <sd_mmc_trans_units>:
    8ac4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00008ae0 <sd_trans_multipliers>:
    8ae0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    8af0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    8b00:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    8b10:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    8b20:	190a 0000 19e0 0000 19e0 0000 184c 0000     ............L...
    8b30:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8b40:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8b50:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8b60:	19e0 0000 19e0 0000 1870 0000 19e0 0000     ........p.......
    8b70:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8b80:	19e0 0000 19e0 0000 18fa 0000 198e 0000     ................
    8b90:	19e0 0000 19e0 0000 19ae 0000 19e0 0000     ................
    8ba0:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8bb0:	19e0 0000 1936 0000 19e0 0000 19e0 0000     ....6...........
    8bc0:	19d0 0000 19e0 0000 19d8 0000 19e0 0000     ................
    8bd0:	19e0 0000 19e0 0000 19e0 0000 19c6 0000     ................
    8be0:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8bf0:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c00:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c10:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c20:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c30:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c40:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c50:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c60:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c70:	19e0 0000 19e0 0000 19e0 0000 19e0 0000     ................
    8c80:	19e0 0000 19e0 0000 1902 0000 3231 3133     ............1231
    8c90:	3332 3231 3133 3332 0000 0000 2dae 0000     23123123.....-..
    8ca0:	2daa 0000 2daa 0000 2e18 0000 2e18 0000     .-...-..........
    8cb0:	2dc2 0000 2db4 0000 2dc8 0000 2e06 0000     .-...-...-......
    8cc0:	2f9c 0000 2f7c 0000 2f7c 0000 3008 0000     ./..|/..|/...0..
    8cd0:	2f8e 0000 2faa 0000 2f80 0000 2fb8 0000     ./.../.../.../..
    8ce0:	2ff8 0000 4453 6320 7261 2064 6f6d 6e75     ./..SD card moun
    8cf0:	6574 2164 0d0a 0000 6e49 6176 696c 2064     ted!....Invalid 
    8d00:	7264 7669 2165 0a21 000d 0000 6143 6472     drive!!.....Card
    8d10:	6920 736e 6174 6c6c 6620 6961 216c 0d0a      install fail!..
    8d20:	0000 0000 6c50 6165 6573 7520 706e 756c     ....Please unplu
    8d30:	2067 6e61 2064 6572 702d 756c 2067 6874     g and re-plug th
    8d40:	2065 6163 6472 0a2e 000d 0000 48d8 0000     e card.......H..
    8d50:	48e6 0000 4980 0000 4a20 0000 4a84 0000     .H...I.. J...J..

00008d60 <_usb_device_irq_bits>:
    8d60:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

00008d70 <_usb_endpoint_irq_bits>:
    8d70:	0c03 6010 0800 4200 0c00 4200 1000 4200     ...`...B...B...B
    8d80:	1400 4200 1800 4200 1c00 4200 5322 2f44     ...B...B...B"SD/
    8d90:	4d4d 2043 6143 6472 6f20 6576 2072 5053     MMC Card over SP
    8da0:	2249 0000                                   I"..

00008da4 <_global_impure_ptr>:
    8da4:	0100 2000                                   ... 

00008da8 <__sf_fake_stderr>:
	...

00008dc8 <__sf_fake_stdin>:
	...

00008de8 <__sf_fake_stdout>:
	...
    8e08:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    8e18:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    8e28:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    8e38:	6665 0000                                   ef..

00008e3c <_init>:
    8e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e3e:	46c0      	nop			; (mov r8, r8)
    8e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e42:	bc08      	pop	{r3}
    8e44:	469e      	mov	lr, r3
    8e46:	4770      	bx	lr

00008e48 <__init_array_start>:
    8e48:	000000dd 	.word	0x000000dd

00008e4c <_fini>:
    8e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4e:	46c0      	nop			; (mov r8, r8)
    8e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e52:	bc08      	pop	{r3}
    8e54:	469e      	mov	lr, r3
    8e56:	4770      	bx	lr

00008e58 <__fini_array_start>:
    8e58:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	140d 0000 1a81 0000 1aa9 0000 13b1 0000     ................
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12580>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 8dc8 0000 8de8 0000 8da8 0000     ................
	...
