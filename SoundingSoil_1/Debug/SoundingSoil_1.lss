
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ba8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007ba8  00007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000160  20000000  00007bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000009d0  20000160  00007d10  00020160  2**2
                  ALLOC
  4 .stack        00002000  20000b30  000086e0  00020160  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005f1a8  00000000  00000000  000201e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007792  00000000  00000000  0007f389  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f577  00000000  00000000  00086b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000dd8  00000000  00000000  00096092  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001550  00000000  00000000  00096e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024dbd  00000000  00000000  000983ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bd7d  00000000  00000000  000bd177  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009e08f  00000000  00000000  000d8ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000291c  00000000  00000000  00176f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 2b 00 20 41 69 00 00 3d 69 00 00 3d 69 00 00     0+. Ai..=i..=i..
	...
      2c:	3d 69 00 00 00 00 00 00 00 00 00 00 3d 69 00 00     =i..........=i..
      3c:	3d 69 00 00 3d 69 00 00 3d 69 00 00 3d 69 00 00     =i..=i..=i..=i..
      4c:	3d 69 00 00 35 4f 00 00 3d 69 00 00 3d 69 00 00     =i..5O..=i..=i..
      5c:	f1 46 00 00 3d 69 00 00 39 23 00 00 49 23 00 00     .F..=i..9#..I#..
      6c:	59 23 00 00 69 23 00 00 79 23 00 00 89 23 00 00     Y#..i#..y#...#..
      7c:	45 07 00 00 55 07 00 00 65 07 00 00 3d 69 00 00     E...U...e...=i..
      8c:	3d 69 00 00 3d 69 00 00 3d 69 00 00 3d 69 00 00     =i..=i..=i..=i..
      9c:	3d 69 00 00 3d 69 00 00 3d 69 00 00 3d 69 00 00     =i..=i..=i..=i..
      ac:	3d 69 00 00 00 00 00 00                             =i......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000160 	.word	0x20000160
      d4:	00000000 	.word	0x00000000
      d8:	00007bb0 	.word	0x00007bb0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000164 	.word	0x20000164
     108:	00007bb0 	.word	0x00007bb0
     10c:	00007bb0 	.word	0x00007bb0
     110:	00000000 	.word	0x00000000

00000114 <_tcc_get_inst_index>:
	uint32_t ch;
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
     114:	4b09      	ldr	r3, [pc, #36]	; (13c <_tcc_get_inst_index+0x28>)
     116:	4298      	cmp	r0, r3
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
     118:	d00c      	beq.n	134 <_tcc_get_inst_index+0x20>
     11a:	4b09      	ldr	r3, [pc, #36]	; (140 <_tcc_get_inst_index+0x2c>)
     11c:	4298      	cmp	r0, r3
     11e:	d007      	beq.n	130 <_tcc_get_inst_index+0x1c>
		}
	}
	if (events->generate_event_on_counter_overflow) {
     120:	4a08      	ldr	r2, [pc, #32]	; (144 <_tcc_get_inst_index+0x30>)
     122:	2300      	movs	r3, #0
     124:	4290      	cmp	r0, r2
		evctrl |= TCC_EVCTRL_OVFEO;
     126:	d001      	beq.n	12c <_tcc_get_inst_index+0x18>
     128:	0018      	movs	r0, r3
     12a:	4770      	bx	lr
	}
	if (events->generate_event_on_counter_retrigger) {
     12c:	3302      	adds	r3, #2
     12e:	e002      	b.n	136 <_tcc_get_inst_index+0x22>
     130:	2301      	movs	r3, #1
		evctrl |= TCC_EVCTRL_TRGEO;
     132:	e000      	b.n	136 <_tcc_get_inst_index+0x22>
     134:	2300      	movs	r3, #0
     136:	b2db      	uxtb	r3, r3
	}
	if (events->generate_event_on_counter_event) {
     138:	e7f6      	b.n	128 <_tcc_get_inst_index+0x14>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	42002000 	.word	0x42002000
		evctrl |= TCC_EVCTRL_CNTEO;
     140:	42002400 	.word	0x42002400
	}

	tcc_module->EVCTRL.reg = evctrl;
     144:	42002800 	.word	0x42002800

00000148 <tcc_get_config_defaults>:

	return STATUS_OK;
     148:	b510      	push	{r4, lr}
			return STATUS_ERR_INVALID_ARG;
     14a:	0004      	movs	r4, r0
     14c:	0008      	movs	r0, r1
			return STATUS_ERR_INVALID_ARG;
     14e:	4b4f      	ldr	r3, [pc, #316]	; (28c <tcc_get_config_defaults+0x144>)
     150:	4798      	blx	r3
     152:	2300      	movs	r3, #0
     154:	6023      	str	r3, [r4, #0]
     156:	0080      	lsls	r0, r0, #2
     158:	4a4d      	ldr	r2, [pc, #308]	; (290 <tcc_get_config_defaults+0x148>)
     15a:	5882      	ldr	r2, [r0, r2]
     15c:	6062      	str	r2, [r4, #4]
     15e:	72a3      	strb	r3, [r4, #10]
     160:	72e3      	strb	r3, [r4, #11]
     162:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     166:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     168:	61e3      	str	r3, [r4, #28]
     16a:	6223      	str	r3, [r4, #32]
     16c:	6263      	str	r3, [r4, #36]	; 0x24
     16e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     170:	7523      	strb	r3, [r4, #20]
     172:	7563      	strb	r3, [r4, #21]
     174:	75a3      	strb	r3, [r4, #22]
     176:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     17a:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     17c:	7423      	strb	r3, [r4, #16]
     17e:	7463      	strb	r3, [r4, #17]
     180:	74a3      	strb	r3, [r4, #18]
     182:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     184:	222c      	movs	r2, #44	; 0x2c
     186:	54a3      	strb	r3, [r4, r2]
     188:	3201      	adds	r2, #1
     18a:	54a3      	strb	r3, [r4, r2]
     18c:	3201      	adds	r2, #1
     18e:	54a3      	strb	r3, [r4, r2]
     190:	3201      	adds	r2, #1
     192:	54a3      	strb	r3, [r4, r2]
     194:	3201      	adds	r2, #1
     196:	54a3      	strb	r3, [r4, r2]
     198:	3201      	adds	r2, #1
     19a:	54a3      	strb	r3, [r4, r2]
     19c:	3201      	adds	r2, #1
     19e:	54a3      	strb	r3, [r4, r2]
     1a0:	3201      	adds	r2, #1
     1a2:	54a3      	strb	r3, [r4, r2]
     1a4:	3201      	adds	r2, #1
     1a6:	54a3      	strb	r3, [r4, r2]
     1a8:	3201      	adds	r2, #1
     1aa:	54a3      	strb	r3, [r4, r2]
     1ac:	3201      	adds	r2, #1
     1ae:	54a3      	strb	r3, [r4, r2]
     1b0:	3201      	adds	r2, #1
     1b2:	54a3      	strb	r3, [r4, r2]
     1b4:	3201      	adds	r2, #1
     1b6:	54a3      	strb	r3, [r4, r2]
     1b8:	3201      	adds	r2, #1
     1ba:	54a3      	strb	r3, [r4, r2]
     1bc:	3201      	adds	r2, #1
     1be:	54a3      	strb	r3, [r4, r2]
     1c0:	3201      	adds	r2, #1
     1c2:	54a3      	strb	r3, [r4, r2]
     1c4:	3201      	adds	r2, #1
     1c6:	54a3      	strb	r3, [r4, r2]
     1c8:	3201      	adds	r2, #1
     1ca:	54a3      	strb	r3, [r4, r2]
     1cc:	3201      	adds	r2, #1
     1ce:	54a3      	strb	r3, [r4, r2]
     1d0:	3201      	adds	r2, #1
     1d2:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     1d4:	3201      	adds	r2, #1
     1d6:	54a3      	strb	r3, [r4, r2]
     1d8:	3201      	adds	r2, #1
     1da:	54a3      	strb	r3, [r4, r2]
     1dc:	3201      	adds	r2, #1
     1de:	54a3      	strb	r3, [r4, r2]
     1e0:	3201      	adds	r2, #1
     1e2:	54a3      	strb	r3, [r4, r2]
     1e4:	3201      	adds	r2, #1
     1e6:	54a3      	strb	r3, [r4, r2]
     1e8:	3201      	adds	r2, #1
     1ea:	54a3      	strb	r3, [r4, r2]
     1ec:	3201      	adds	r2, #1
     1ee:	54a3      	strb	r3, [r4, r2]
     1f0:	3201      	adds	r2, #1
     1f2:	54a3      	strb	r3, [r4, r2]
     1f4:	3201      	adds	r2, #1
     1f6:	54a3      	strb	r3, [r4, r2]
     1f8:	3201      	adds	r2, #1
     1fa:	54a3      	strb	r3, [r4, r2]
     1fc:	3201      	adds	r2, #1
     1fe:	54a3      	strb	r3, [r4, r2]
     200:	3201      	adds	r2, #1
     202:	54a3      	strb	r3, [r4, r2]
     204:	3201      	adds	r2, #1
     206:	54a3      	strb	r3, [r4, r2]
     208:	3201      	adds	r2, #1
     20a:	54a3      	strb	r3, [r4, r2]
     20c:	3201      	adds	r2, #1
     20e:	54a3      	strb	r3, [r4, r2]
     210:	3201      	adds	r2, #1
     212:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     214:	3201      	adds	r2, #1
     216:	54a3      	strb	r3, [r4, r2]
     218:	3201      	adds	r2, #1
     21a:	54a3      	strb	r3, [r4, r2]
     21c:	3201      	adds	r2, #1
     21e:	54a3      	strb	r3, [r4, r2]
     220:	3201      	adds	r2, #1
     222:	54a3      	strb	r3, [r4, r2]
     224:	3201      	adds	r2, #1
     226:	54a3      	strb	r3, [r4, r2]
     228:	3201      	adds	r2, #1
     22a:	54a3      	strb	r3, [r4, r2]
     22c:	3201      	adds	r2, #1
     22e:	54a3      	strb	r3, [r4, r2]
     230:	3201      	adds	r2, #1
     232:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     234:	3241      	adds	r2, #65	; 0x41
     236:	54a3      	strb	r3, [r4, r2]
     238:	65a3      	str	r3, [r4, #88]	; 0x58
     23a:	67a3      	str	r3, [r4, #120]	; 0x78
     23c:	3201      	adds	r2, #1
     23e:	54a3      	strb	r3, [r4, r2]
     240:	65e3      	str	r3, [r4, #92]	; 0x5c
     242:	67e3      	str	r3, [r4, #124]	; 0x7c
     244:	3201      	adds	r2, #1
     246:	54a3      	strb	r3, [r4, r2]
     248:	6623      	str	r3, [r4, #96]	; 0x60
     24a:	3a1a      	subs	r2, #26
     24c:	50a3      	str	r3, [r4, r2]
     24e:	321b      	adds	r2, #27
     250:	54a3      	strb	r3, [r4, r2]
     252:	6663      	str	r3, [r4, #100]	; 0x64
     254:	3a17      	subs	r2, #23
     256:	50a3      	str	r3, [r4, r2]
     258:	3218      	adds	r2, #24
     25a:	54a3      	strb	r3, [r4, r2]
     25c:	66a3      	str	r3, [r4, #104]	; 0x68
     25e:	3a14      	subs	r2, #20
     260:	50a3      	str	r3, [r4, r2]
     262:	3215      	adds	r2, #21
     264:	54a3      	strb	r3, [r4, r2]
     266:	66e3      	str	r3, [r4, #108]	; 0x6c
     268:	3a11      	subs	r2, #17
     26a:	50a3      	str	r3, [r4, r2]
     26c:	3212      	adds	r2, #18
     26e:	54a3      	strb	r3, [r4, r2]
     270:	6723      	str	r3, [r4, #112]	; 0x70
     272:	3a0e      	subs	r2, #14
     274:	50a3      	str	r3, [r4, r2]
     276:	320f      	adds	r2, #15
     278:	54a3      	strb	r3, [r4, r2]
     27a:	6763      	str	r3, [r4, #116]	; 0x74
     27c:	3a0b      	subs	r2, #11
     27e:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     280:	2101      	movs	r1, #1
     282:	320c      	adds	r2, #12
     284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     286:	3201      	adds	r2, #1
     288:	54a3      	strb	r3, [r4, r2]
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000115 	.word	0x00000115
     290:	00007828 	.word	0x00007828

00000294 <tcc_init>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
     2a0:	b091      	sub	sp, #68	; 0x44
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	000c      	movs	r4, r1
     2a6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     2a8:	0008      	movs	r0, r1
     2aa:	4bc3      	ldr	r3, [pc, #780]	; (5b8 <tcc_init+0x324>)
     2ac:	4798      	blx	r3
     2ae:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2b0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b2:	48c2      	ldr	r0, [pc, #776]	; (5bc <tcc_init+0x328>)
     2b4:	6a02      	ldr	r2, [r0, #32]
     2b6:	009e      	lsls	r6, r3, #2
     2b8:	4fc1      	ldr	r7, [pc, #772]	; (5c0 <tcc_init+0x32c>)
     2ba:	59f7      	ldr	r7, [r6, r7]
     2bc:	433a      	orrs	r2, r7
     2be:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     2c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d506      	bpl.n	2d6 <tcc_init+0x42>
}
     2c8:	b011      	add	sp, #68	; 0x44
     2ca:	bc3c      	pop	{r2, r3, r4, r5}
     2cc:	4690      	mov	r8, r2
     2ce:	4699      	mov	r9, r3
     2d0:	46a2      	mov	sl, r4
     2d2:	46ab      	mov	fp, r5
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     2d6:	6822      	ldr	r2, [r4, #0]
     2d8:	2701      	movs	r7, #1
     2da:	4017      	ands	r7, r2
     2dc:	d1f4      	bne.n	2c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     2de:	48b9      	ldr	r0, [pc, #740]	; (5c4 <tcc_init+0x330>)
     2e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     2e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     2e4:	682e      	ldr	r6, [r5, #0]
     2e6:	42b2      	cmp	r2, r6
     2e8:	d3ee      	bcc.n	2c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     2ea:	686e      	ldr	r6, [r5, #4]
     2ec:	42b2      	cmp	r2, r6
     2ee:	d3eb      	bcc.n	2c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     2f0:	69e8      	ldr	r0, [r5, #28]
     2f2:	4282      	cmp	r2, r0
     2f4:	d200      	bcs.n	2f8 <tcc_init+0x64>
     2f6:	e1b9      	b.n	66c <tcc_init+0x3d8>
     2f8:	6a28      	ldr	r0, [r5, #32]
     2fa:	4282      	cmp	r2, r0
     2fc:	d200      	bcs.n	300 <tcc_init+0x6c>
     2fe:	e1b7      	b.n	670 <tcc_init+0x3dc>
     300:	6a68      	ldr	r0, [r5, #36]	; 0x24
     302:	4282      	cmp	r2, r0
     304:	d200      	bcs.n	308 <tcc_init+0x74>
     306:	e1b5      	b.n	674 <tcc_init+0x3e0>
     308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     30a:	4282      	cmp	r2, r0
     30c:	d200      	bcs.n	310 <tcc_init+0x7c>
     30e:	e1b3      	b.n	678 <tcc_init+0x3e4>
     310:	2298      	movs	r2, #152	; 0x98
     312:	4694      	mov	ip, r2
     314:	44ac      	add	ip, r5
     316:	4662      	mov	r2, ip
     318:	9208      	str	r2, [sp, #32]
     31a:	2000      	movs	r0, #0
     31c:	e003      	b.n	326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     31e:	3001      	adds	r0, #1
     320:	3201      	adds	r2, #1
     322:	2808      	cmp	r0, #8
     324:	d008      	beq.n	338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     326:	7816      	ldrb	r6, [r2, #0]
     328:	2e00      	cmp	r6, #0
     32a:	d0f8      	beq.n	31e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     32c:	4ea6      	ldr	r6, [pc, #664]	; (5c8 <tcc_init+0x334>)
     32e:	5c76      	ldrb	r6, [r6, r1]
     330:	4286      	cmp	r6, r0
     332:	dcf4      	bgt.n	31e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     334:	2017      	movs	r0, #23
     336:	e7c7      	b.n	2c8 <tcc_init+0x34>
     338:	2200      	movs	r2, #0
     33a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	4684      	mov	ip, r0
     342:	e002      	b.n	34a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     344:	3201      	adds	r2, #1
     346:	2a04      	cmp	r2, #4
     348:	d00e      	beq.n	368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     34a:	18a8      	adds	r0, r5, r2
     34c:	7c00      	ldrb	r0, [r0, #16]
     34e:	2801      	cmp	r0, #1
     350:	d1f8      	bne.n	344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     352:	489e      	ldr	r0, [pc, #632]	; (5cc <tcc_init+0x338>)
     354:	5c40      	ldrb	r0, [r0, r1]
     356:	4290      	cmp	r0, r2
     358:	da00      	bge.n	35c <tcc_init+0xc8>
     35a:	e18f      	b.n	67c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     35c:	4660      	mov	r0, ip
     35e:	4090      	lsls	r0, r2
     360:	9e02      	ldr	r6, [sp, #8]
     362:	4306      	orrs	r6, r0
     364:	9602      	str	r6, [sp, #8]
     366:	e7ed      	b.n	344 <tcc_init+0xb0>
	if (config->run_in_standby) {
     368:	329d      	adds	r2, #157	; 0x9d
     36a:	5caa      	ldrb	r2, [r5, r2]
     36c:	2a00      	cmp	r2, #0
     36e:	d004      	beq.n	37a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     370:	2280      	movs	r2, #128	; 0x80
     372:	0112      	lsls	r2, r2, #4
     374:	9902      	ldr	r1, [sp, #8]
     376:	4311      	orrs	r1, r2
     378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     37a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     37c:	1e51      	subs	r1, r2, #1
     37e:	418a      	sbcs	r2, r1
     380:	0092      	lsls	r2, r2, #2
     382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     384:	7a6a      	ldrb	r2, [r5, #9]
     386:	2a01      	cmp	r2, #1
     388:	d022      	beq.n	3d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     38a:	4a90      	ldr	r2, [pc, #576]	; (5cc <tcc_init+0x338>)
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	0011      	movs	r1, r2
     390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     392:	2235      	movs	r2, #53	; 0x35
     394:	5caa      	ldrb	r2, [r5, r2]
     396:	428a      	cmp	r2, r1
     398:	d300      	bcc.n	39c <tcc_init+0x108>
     39a:	e179      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     39c:	212c      	movs	r1, #44	; 0x2c
     39e:	5c69      	ldrb	r1, [r5, r1]
     3a0:	290f      	cmp	r1, #15
     3a2:	d900      	bls.n	3a6 <tcc_init+0x112>
     3a4:	e174      	b.n	690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     3a6:	7b28      	ldrb	r0, [r5, #12]
     3a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     3aa:	7ae8      	ldrb	r0, [r5, #11]
     3ac:	900b      	str	r0, [sp, #44]	; 0x2c
     3ae:	202d      	movs	r0, #45	; 0x2d
     3b0:	4682      	mov	sl, r0
     3b2:	44aa      	add	sl, r5
     3b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     3b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     3b8:	ae0e      	add	r6, sp, #56	; 0x38
     3ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3bc:	26c0      	movs	r6, #192	; 0xc0
     3be:	0136      	lsls	r6, r6, #4
     3c0:	46b1      	mov	r9, r6
     3c2:	4684      	mov	ip, r0
     3c4:	46a0      	mov	r8, r4
     3c6:	0028      	movs	r0, r5
     3c8:	4655      	mov	r5, sl
     3ca:	9309      	str	r3, [sp, #36]	; 0x24
     3cc:	4682      	mov	sl, r0
     3ce:	e035      	b.n	43c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     3d0:	9906      	ldr	r1, [sp, #24]
     3d2:	4311      	orrs	r1, r2
     3d4:	9106      	str	r1, [sp, #24]
     3d6:	e7d8      	b.n	38a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3d8:	0292      	lsls	r2, r2, #10
     3da:	464f      	mov	r7, r9
     3dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     3e0:	7919      	ldrb	r1, [r3, #4]
     3e2:	468b      	mov	fp, r1
     3e4:	2103      	movs	r1, #3
     3e6:	465f      	mov	r7, fp
     3e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3ea:	430a      	orrs	r2, r1
     3ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     3ee:	795a      	ldrb	r2, [r3, #5]
     3f0:	0152      	lsls	r2, r2, #5
     3f2:	2160      	movs	r1, #96	; 0x60
     3f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     3f8:	7999      	ldrb	r1, [r3, #6]
     3fa:	0209      	lsls	r1, r1, #8
     3fc:	26c0      	movs	r6, #192	; 0xc0
     3fe:	00b6      	lsls	r6, r6, #2
     400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     404:	79da      	ldrb	r2, [r3, #7]
     406:	0312      	lsls	r2, r2, #12
     408:	21e0      	movs	r1, #224	; 0xe0
     40a:	01c9      	lsls	r1, r1, #7
     40c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     40e:	4316      	orrs	r6, r2
     410:	4334      	orrs	r4, r6
     412:	9a03      	ldr	r2, [sp, #12]
     414:	4314      	orrs	r4, r2
     416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     418:	4662      	mov	r2, ip
     41a:	9907      	ldr	r1, [sp, #28]
     41c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     41e:	2a04      	cmp	r2, #4
     420:	d02a      	beq.n	478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     422:	7c9a      	ldrb	r2, [r3, #18]
     424:	9905      	ldr	r1, [sp, #20]
     426:	4291      	cmp	r1, r2
     428:	d800      	bhi.n	42c <tcc_init+0x198>
     42a:	e131      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     42c:	7a59      	ldrb	r1, [r3, #9]
     42e:	350a      	adds	r5, #10
     430:	2304      	movs	r3, #4
     432:	469b      	mov	fp, r3
     434:	44dc      	add	ip, fp
     436:	290f      	cmp	r1, #15
     438:	d900      	bls.n	43c <tcc_init+0x1a8>
     43a:	e129      	b.n	690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     43c:	0609      	lsls	r1, r1, #24
     43e:	23f0      	movs	r3, #240	; 0xf0
     440:	051b      	lsls	r3, r3, #20
     442:	4019      	ands	r1, r3
     444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     446:	782e      	ldrb	r6, [r5, #0]
     448:	0436      	lsls	r6, r6, #16
     44a:	20ff      	movs	r0, #255	; 0xff
     44c:	0400      	lsls	r0, r0, #16
     44e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     450:	7868      	ldrb	r0, [r5, #1]
     452:	2480      	movs	r4, #128	; 0x80
     454:	2800      	cmp	r0, #0
     456:	d100      	bne.n	45a <tcc_init+0x1c6>
     458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     45a:	7898      	ldrb	r0, [r3, #2]
     45c:	2708      	movs	r7, #8
     45e:	9703      	str	r7, [sp, #12]
     460:	2800      	cmp	r0, #0
     462:	d101      	bne.n	468 <tcc_init+0x1d4>
     464:	9804      	ldr	r0, [sp, #16]
     466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     468:	78d8      	ldrb	r0, [r3, #3]
     46a:	4683      	mov	fp, r0
     46c:	2010      	movs	r0, #16
     46e:	465f      	mov	r7, fp
     470:	2f00      	cmp	r7, #0
     472:	d1b1      	bne.n	3d8 <tcc_init+0x144>
     474:	9804      	ldr	r0, [sp, #16]
     476:	e7af      	b.n	3d8 <tcc_init+0x144>
     478:	4644      	mov	r4, r8
     47a:	4655      	mov	r5, sl
     47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     47e:	4a52      	ldr	r2, [pc, #328]	; (5c8 <tcc_init+0x334>)
     480:	5cd2      	ldrb	r2, [r2, r3]
     482:	4691      	mov	r9, r2
     484:	4651      	mov	r1, sl
     486:	3150      	adds	r1, #80	; 0x50
     488:	4650      	mov	r0, sl
     48a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     48c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     48e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     490:	2601      	movs	r6, #1
     492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     494:	2602      	movs	r6, #2
     496:	36ff      	adds	r6, #255	; 0xff
     498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     49a:	2680      	movs	r6, #128	; 0x80
     49c:	0276      	lsls	r6, r6, #9
     49e:	46b0      	mov	r8, r6
     4a0:	46a4      	mov	ip, r4
     4a2:	001c      	movs	r4, r3
     4a4:	464b      	mov	r3, r9
     4a6:	e00f      	b.n	4c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4a8:	7806      	ldrb	r6, [r0, #0]
     4aa:	2e00      	cmp	r6, #0
     4ac:	d007      	beq.n	4be <tcc_init+0x22a>
			if (i >= ow_num) {
     4ae:	4293      	cmp	r3, r2
     4b0:	d800      	bhi.n	4b4 <tcc_init+0x220>
     4b2:	e0e7      	b.n	684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     4b4:	2e02      	cmp	r6, #2
     4b6:	d014      	beq.n	4e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     4b8:	4656      	mov	r6, sl
     4ba:	4096      	lsls	r6, r2
     4bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4be:	3201      	adds	r2, #1
     4c0:	3101      	adds	r1, #1
     4c2:	3002      	adds	r0, #2
     4c4:	2a08      	cmp	r2, #8
     4c6:	d010      	beq.n	4ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     4c8:	780e      	ldrb	r6, [r1, #0]
     4ca:	2e00      	cmp	r6, #0
     4cc:	d0ec      	beq.n	4a8 <tcc_init+0x214>
			if (i >= ow_num) {
     4ce:	4293      	cmp	r3, r2
     4d0:	d800      	bhi.n	4d4 <tcc_init+0x240>
     4d2:	e0d5      	b.n	680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     4d4:	4646      	mov	r6, r8
     4d6:	4096      	lsls	r6, r2
     4d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4da:	7806      	ldrb	r6, [r0, #0]
     4dc:	2e00      	cmp	r6, #0
     4de:	d1e9      	bne.n	4b4 <tcc_init+0x220>
     4e0:	e7ed      	b.n	4be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     4e2:	465e      	mov	r6, fp
     4e4:	4096      	lsls	r6, r2
     4e6:	4337      	orrs	r7, r6
     4e8:	e7e9      	b.n	4be <tcc_init+0x22a>
     4ea:	4699      	mov	r9, r3
     4ec:	0023      	movs	r3, r4
     4ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4f0:	7e6a      	ldrb	r2, [r5, #25]
     4f2:	0112      	lsls	r2, r2, #4
     4f4:	2130      	movs	r1, #48	; 0x30
     4f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     4f8:	7e28      	ldrb	r0, [r5, #24]
     4fa:	2207      	movs	r2, #7
     4fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     502:	2080      	movs	r0, #128	; 0x80
     504:	0240      	lsls	r0, r0, #9
     506:	000e      	movs	r6, r1
     508:	e002      	b.n	510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     50a:	3201      	adds	r2, #1
     50c:	2a04      	cmp	r2, #4
     50e:	d00b      	beq.n	528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     510:	18a9      	adds	r1, r5, r2
     512:	7d09      	ldrb	r1, [r1, #20]
     514:	2900      	cmp	r1, #0
     516:	d0f8      	beq.n	50a <tcc_init+0x276>
			if (n >= cc_num) {
     518:	9905      	ldr	r1, [sp, #20]
     51a:	4291      	cmp	r1, r2
     51c:	dc00      	bgt.n	520 <tcc_init+0x28c>
     51e:	e0b3      	b.n	688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     520:	0001      	movs	r1, r0
     522:	4091      	lsls	r1, r2
     524:	430e      	orrs	r6, r1
     526:	e7f0      	b.n	50a <tcc_init+0x276>
     528:	46b2      	mov	sl, r6
     52a:	9801      	ldr	r0, [sp, #4]
     52c:	0002      	movs	r2, r0
     52e:	3204      	adds	r2, #4
     530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     532:	2100      	movs	r1, #0
     534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     536:	4282      	cmp	r2, r0
     538:	d1fc      	bne.n	534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     53a:	2200      	movs	r2, #0
     53c:	9801      	ldr	r0, [sp, #4]
     53e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     542:	0099      	lsls	r1, r3, #2
     544:	4a22      	ldr	r2, [pc, #136]	; (5d0 <tcc_init+0x33c>)
     546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     54a:	22a0      	movs	r2, #160	; 0xa0
     54c:	5ca9      	ldrb	r1, [r5, r2]
     54e:	3a64      	subs	r2, #100	; 0x64
     550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     552:	a90d      	add	r1, sp, #52	; 0x34
     554:	7aaa      	ldrb	r2, [r5, #10]
     556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     558:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <tcc_init+0x340>)
     55a:	5cd6      	ldrb	r6, [r2, r3]
     55c:	0030      	movs	r0, r6
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <tcc_init+0x344>)
     560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     562:	0030      	movs	r0, r6
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <tcc_init+0x348>)
     566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     568:	464b      	mov	r3, r9
     56a:	2b00      	cmp	r3, #0
     56c:	dd3c      	ble.n	5e8 <tcc_init+0x354>
     56e:	002e      	movs	r6, r5
     570:	3658      	adds	r6, #88	; 0x58
     572:	3398      	adds	r3, #152	; 0x98
     574:	4698      	mov	r8, r3
     576:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     578:	2301      	movs	r3, #1
     57a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     57c:	46ab      	mov	fp, r5
     57e:	4645      	mov	r5, r8
     580:	46a0      	mov	r8, r4
     582:	9c08      	ldr	r4, [sp, #32]
     584:	e003      	b.n	58e <tcc_init+0x2fa>
     586:	3401      	adds	r4, #1
     588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     58a:	42ac      	cmp	r4, r5
     58c:	d02a      	beq.n	5e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0f8      	beq.n	586 <tcc_init+0x2f2>
     594:	ab0c      	add	r3, sp, #48	; 0x30
     596:	464a      	mov	r2, r9
     598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     59a:	2300      	movs	r3, #0
     59c:	aa0c      	add	r2, sp, #48	; 0x30
     59e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     5a0:	0013      	movs	r3, r2
     5a2:	2220      	movs	r2, #32
     5a4:	18b2      	adds	r2, r6, r2
     5a6:	7812      	ldrb	r2, [r2, #0]
     5a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5aa:	464a      	mov	r2, r9
     5ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	0019      	movs	r1, r3
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <tcc_init+0x34c>)
     5b4:	4798      	blx	r3
     5b6:	e7e6      	b.n	586 <tcc_init+0x2f2>
     5b8:	00000115 	.word	0x00000115
     5bc:	40000400 	.word	0x40000400
     5c0:	00007814 	.word	0x00007814
     5c4:	00007828 	.word	0x00007828
     5c8:	00007834 	.word	0x00007834
     5cc:	00007820 	.word	0x00007820
     5d0:	200002e8 	.word	0x200002e8
     5d4:	00007824 	.word	0x00007824
     5d8:	000067e5 	.word	0x000067e5
     5dc:	00006759 	.word	0x00006759
     5e0:	000068dd 	.word	0x000068dd
     5e4:	4644      	mov	r4, r8
     5e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     5ee:	0212      	lsls	r2, r2, #8
     5f0:	4313      	orrs	r3, r2
     5f2:	9a02      	ldr	r2, [sp, #8]
     5f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     5f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5f8:	2204      	movs	r2, #4
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	421a      	tst	r2, r3
     5fe:	d1fc      	bne.n	5fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     600:	23ff      	movs	r3, #255	; 0xff
     602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     604:	2204      	movs	r2, #4
     606:	68a3      	ldr	r3, [r4, #8]
     608:	421a      	tst	r2, r3
     60a:	d1fc      	bne.n	606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     60c:	466b      	mov	r3, sp
     60e:	7e1b      	ldrb	r3, [r3, #24]
     610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     61a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     61c:	4a1d      	ldr	r2, [pc, #116]	; (694 <tcc_init+0x400>)
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	4213      	tst	r3, r2
     622:	d1fc      	bne.n	61e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     624:	4653      	mov	r3, sl
     626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     628:	2210      	movs	r2, #16
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	421a      	tst	r2, r3
     62e:	d1fc      	bne.n	62a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     630:	682b      	ldr	r3, [r5, #0]
     632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     634:	4a18      	ldr	r2, [pc, #96]	; (698 <tcc_init+0x404>)
     636:	68a3      	ldr	r3, [r4, #8]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     63c:	686b      	ldr	r3, [r5, #4]
     63e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     640:	9805      	ldr	r0, [sp, #20]
     642:	2800      	cmp	r0, #0
     644:	dd22      	ble.n	68c <tcc_init+0x3f8>
     646:	351c      	adds	r5, #28
     648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     64a:	4e14      	ldr	r6, [pc, #80]	; (69c <tcc_init+0x408>)
     64c:	0032      	movs	r2, r6
     64e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     650:	68a3      	ldr	r3, [r4, #8]
     652:	421a      	tst	r2, r3
     654:	d1fc      	bne.n	650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     656:	cd04      	ldmia	r5!, {r2}
     658:	000b      	movs	r3, r1
     65a:	3310      	adds	r3, #16
     65c:	009b      	lsls	r3, r3, #2
     65e:	18e3      	adds	r3, r4, r3
     660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     662:	3101      	adds	r1, #1
     664:	4288      	cmp	r0, r1
     666:	dcf1      	bgt.n	64c <tcc_init+0x3b8>
	return STATUS_OK;
     668:	2000      	movs	r0, #0
     66a:	e62d      	b.n	2c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     66c:	2017      	movs	r0, #23
     66e:	e62b      	b.n	2c8 <tcc_init+0x34>
     670:	2017      	movs	r0, #23
     672:	e629      	b.n	2c8 <tcc_init+0x34>
     674:	2017      	movs	r0, #23
     676:	e627      	b.n	2c8 <tcc_init+0x34>
     678:	2017      	movs	r0, #23
     67a:	e625      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e623      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     680:	2017      	movs	r0, #23
     682:	e621      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     684:	2017      	movs	r0, #23
     686:	e61f      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     688:	2017      	movs	r0, #23
     68a:	e61d      	b.n	2c8 <tcc_init+0x34>
	return STATUS_OK;
     68c:	2000      	movs	r0, #0
     68e:	e61b      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e619      	b.n	2c8 <tcc_init+0x34>
     694:	00020040 	.word	0x00020040
     698:	00040080 	.word	0x00040080
     69c:	00080100 	.word	0x00080100

000006a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6a0:	0092      	lsls	r2, r2, #2
     6a2:	1883      	adds	r3, r0, r2
     6a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     6a6:	4b03      	ldr	r3, [pc, #12]	; (6b4 <tcc_register_callback+0x14>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
     6ac:	4313      	orrs	r3, r2
     6ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     6b0:	2000      	movs	r0, #0
     6b2:	4770      	bx	lr
     6b4:	00007838 	.word	0x00007838

000006b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     6be:	6800      	ldr	r0, [r0, #0]
     6c0:	4b09      	ldr	r3, [pc, #36]	; (6e8 <tcc_enable_callback+0x30>)
     6c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c6:	5c1b      	ldrb	r3, [r3, r0]
     6c8:	221f      	movs	r2, #31
     6ca:	401a      	ands	r2, r3
     6cc:	2301      	movs	r3, #1
     6ce:	4093      	lsls	r3, r2
     6d0:	4a07      	ldr	r2, [pc, #28]	; (6f0 <tcc_enable_callback+0x38>)
     6d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <tcc_enable_callback+0x3c>)
     6d8:	58ea      	ldr	r2, [r5, r3]
     6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6dc:	4313      	orrs	r3, r2
     6de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000115 	.word	0x00000115
     6ec:	00007868 	.word	0x00007868
     6f0:	e000e100 	.word	0xe000e100
     6f4:	00007838 	.word	0x00007838

000006f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6fe:	0080      	lsls	r0, r0, #2
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <_tcc_interrupt_handler+0x44>)
     702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     704:	683b      	ldr	r3, [r7, #0]
     706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     70c:	4013      	ands	r3, r2
     70e:	401e      	ands	r6, r3
     710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     712:	4b0b      	ldr	r3, [pc, #44]	; (740 <_tcc_interrupt_handler+0x48>)
     714:	4698      	mov	r8, r3
     716:	e002      	b.n	71e <_tcc_interrupt_handler+0x26>
     718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     71a:	2c30      	cmp	r4, #48	; 0x30
     71c:	d00a      	beq.n	734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     71e:	4643      	mov	r3, r8
     720:	58e5      	ldr	r5, [r4, r3]
     722:	4235      	tst	r5, r6
     724:	d0f8      	beq.n	718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     726:	193b      	adds	r3, r7, r4
     728:	685b      	ldr	r3, [r3, #4]
     72a:	0038      	movs	r0, r7
     72c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     72e:	683b      	ldr	r3, [r7, #0]
     730:	62dd      	str	r5, [r3, #44]	; 0x2c
     732:	e7f1      	b.n	718 <_tcc_interrupt_handler+0x20>
		}
	}
}
     734:	bc04      	pop	{r2}
     736:	4690      	mov	r8, r2
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	200002e8 	.word	0x200002e8
     740:	00007838 	.word	0x00007838

00000744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006f9 	.word	0x000006f9

00000754 <TCC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TCC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006f9 	.word	0x000006f9

00000764 <TCC2_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2002      	movs	r0, #2
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TCC2_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006f9 	.word	0x000006f9

00000774 <audio_sync_reached_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     774:	2280      	movs	r2, #128	; 0x80
     776:	0352      	lsls	r2, r2, #13
     778:	4b01      	ldr	r3, [pc, #4]	; (780 <audio_sync_reached_callback+0xc>)
     77a:	61da      	str	r2, [r3, #28]
	audio_buffer[0] = ((uint16_t)adc_vals[0] << 8) || (adc_vals[1]);
}

static void audio_sync_reached_callback(void) {
	port_pin_toggle_output_level(PIN_PA20);
}
     77c:	4770      	bx	lr
     77e:	46c0      	nop			; (mov r8, r8)
     780:	41004400 	.word	0x41004400

00000784 <audio_in_init>:
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
     788:	a90f      	add	r1, sp, #60	; 0x3c
     78a:	2501      	movs	r5, #1
     78c:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
     78e:	2600      	movs	r6, #0
     790:	708e      	strb	r6, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     792:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
     794:	2014      	movs	r0, #20
     796:	4f28      	ldr	r7, [pc, #160]	; (838 <audio_in_init+0xb4>)
     798:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
     79a:	2280      	movs	r2, #128	; 0x80
     79c:	0352      	lsls	r2, r2, #13
     79e:	4b27      	ldr	r3, [pc, #156]	; (83c <audio_in_init+0xb8>)
     7a0:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     7a2:	4c27      	ldr	r4, [pc, #156]	; (840 <audio_in_init+0xbc>)
     7a4:	232f      	movs	r3, #47	; 0x2f
     7a6:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     7a8:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
     7aa:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     7ac:	466b      	mov	r3, sp
     7ae:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
     7b0:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     7b2:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     7b4:	4669      	mov	r1, sp
     7b6:	202f      	movs	r0, #47	; 0x2f
     7b8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
     7ba:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7bc:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7c0:	2900      	cmp	r1, #0
     7c2:	d104      	bne.n	7ce <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
     7c4:	0953      	lsrs	r3, r2, #5
     7c6:	01db      	lsls	r3, r3, #7
     7c8:	491c      	ldr	r1, [pc, #112]	; (83c <audio_in_init+0xb8>)
     7ca:	468c      	mov	ip, r1
     7cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7ce:	211f      	movs	r1, #31
     7d0:	4011      	ands	r1, r2
     7d2:	2201      	movs	r2, #1
     7d4:	0010      	movs	r0, r2
     7d6:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     7d8:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     7da:	ac01      	add	r4, sp, #4
     7dc:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     7de:	2300      	movs	r3, #0
     7e0:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     7e2:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     7e4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     7e6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     7e8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     7ea:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     7ec:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     7ee:	3223      	adds	r2, #35	; 0x23
     7f0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     7f2:	3a18      	subs	r2, #24
     7f4:	2100      	movs	r1, #0
     7f6:	a807      	add	r0, sp, #28
     7f8:	4b12      	ldr	r3, [pc, #72]	; (844 <audio_in_init+0xc0>)
     7fa:	4798      	blx	r3
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     7fc:	2380      	movs	r3, #128	; 0x80
     7fe:	039b      	lsls	r3, r3, #14
     800:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     802:	4b11      	ldr	r3, [pc, #68]	; (848 <audio_in_init+0xc4>)
     804:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     806:	4b11      	ldr	r3, [pc, #68]	; (84c <audio_in_init+0xc8>)
     808:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     80a:	4b11      	ldr	r3, [pc, #68]	; (850 <audio_in_init+0xcc>)
     80c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     80e:	2301      	movs	r3, #1
     810:	425b      	negs	r3, r3
     812:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
     814:	4b0f      	ldr	r3, [pc, #60]	; (854 <audio_in_init+0xd0>)
     816:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     818:	4d0f      	ldr	r5, [pc, #60]	; (858 <audio_in_init+0xd4>)
     81a:	0022      	movs	r2, r4
     81c:	490f      	ldr	r1, [pc, #60]	; (85c <audio_in_init+0xd8>)
     81e:	0028      	movs	r0, r5
     820:	4b0f      	ldr	r3, [pc, #60]	; (860 <audio_in_init+0xdc>)
     822:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     824:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     826:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     828:	2b00      	cmp	r3, #0
     82a:	d1fc      	bne.n	826 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     82c:	6813      	ldr	r3, [r2, #0]
     82e:	2102      	movs	r1, #2
     830:	430b      	orrs	r3, r1
     832:	6013      	str	r3, [r2, #0]
}
     834:	b011      	add	sp, #68	; 0x44
     836:	bdf0      	pop	{r4, r5, r6, r7, pc}
     838:	00006589 	.word	0x00006589
     83c:	41004400 	.word	0x41004400
     840:	200005dc 	.word	0x200005dc
     844:	0000704b 	.word	0x0000704b
     848:	00100002 	.word	0x00100002
     84c:	00110002 	.word	0x00110002
     850:	00120002 	.word	0x00120002
     854:	001e8480 	.word	0x001e8480
     858:	2000059c 	.word	0x2000059c
     85c:	42000c00 	.word	0x42000c00
     860:	00005381 	.word	0x00005381

00000864 <audio_sync_init>:

void audio_sync_init(void) {
     864:	b570      	push	{r4, r5, r6, lr}
     866:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     868:	4d1f      	ldr	r5, [pc, #124]	; (8e8 <audio_sync_init+0x84>)
     86a:	0029      	movs	r1, r5
     86c:	a801      	add	r0, sp, #4
     86e:	4b1f      	ldr	r3, [pc, #124]	; (8ec <audio_sync_init+0x88>)
     870:	4798      	blx	r3
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
     872:	4b1f      	ldr	r3, [pc, #124]	; (8f0 <audio_sync_init+0x8c>)
     874:	9302      	str	r3, [sp, #8]
	config_tcc.compare.match[0] = AUDIO_SYNC_CONV_CNT;
     876:	2332      	movs	r3, #50	; 0x32
     878:	9308      	str	r3, [sp, #32]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
     87a:	4c1e      	ldr	r4, [pc, #120]	; (8f4 <audio_sync_init+0x90>)
     87c:	aa01      	add	r2, sp, #4
     87e:	0029      	movs	r1, r5
     880:	0020      	movs	r0, r4
     882:	4b1d      	ldr	r3, [pc, #116]	; (8f8 <audio_sync_init+0x94>)
     884:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     886:	6822      	ldr	r2, [r4, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     888:	2102      	movs	r1, #2
     88a:	6893      	ldr	r3, [r2, #8]
     88c:	4219      	tst	r1, r3
     88e:	d1fc      	bne.n	88a <audio_sync_init+0x26>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     890:	6813      	ldr	r3, [r2, #0]
     892:	2102      	movs	r1, #2
     894:	430b      	orrs	r3, r1
     896:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     898:	4b16      	ldr	r3, [pc, #88]	; (8f4 <audio_sync_init+0x90>)
     89a:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     89c:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     89e:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     8a0:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     8a2:	6893      	ldr	r3, [r2, #8]
     8a4:	4219      	tst	r1, r3
     8a6:	d1fc      	bne.n	8a2 <audio_sync_init+0x3e>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     8a8:	7953      	ldrb	r3, [r2, #5]
     8aa:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     8ac:	d005      	beq.n	8ba <audio_sync_init+0x56>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
     8ae:	2b40      	cmp	r3, #64	; 0x40
     8b0:	d005      	beq.n	8be <audio_sync_init+0x5a>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
     8b2:	2b20      	cmp	r3, #32
     8b4:	d1f5      	bne.n	8a2 <audio_sync_init+0x3e>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
     8b6:	7114      	strb	r4, [r2, #4]
     8b8:	e7f3      	b.n	8a2 <audio_sync_init+0x3e>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
     8ba:	2340      	movs	r3, #64	; 0x40
     8bc:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
     8be:	4e0f      	ldr	r6, [pc, #60]	; (8fc <audio_sync_init+0x98>)
     8c0:	4c0c      	ldr	r4, [pc, #48]	; (8f4 <audio_sync_init+0x90>)
     8c2:	2200      	movs	r2, #0
     8c4:	0031      	movs	r1, r6
     8c6:	0020      	movs	r0, r4
     8c8:	4d0d      	ldr	r5, [pc, #52]	; (900 <audio_sync_init+0x9c>)
     8ca:	47a8      	blx	r5
	tcc_register_callback(&audio_syncer_module, audio_sync_reached_callback, TCC_CALLBACK_CHANNEL_0);
     8cc:	2208      	movs	r2, #8
     8ce:	0031      	movs	r1, r6
     8d0:	0020      	movs	r0, r4
     8d2:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
     8d4:	2100      	movs	r1, #0
     8d6:	0020      	movs	r0, r4
     8d8:	4d0a      	ldr	r5, [pc, #40]	; (904 <audio_sync_init+0xa0>)
     8da:	47a8      	blx	r5
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_CHANNEL_0);
     8dc:	2108      	movs	r1, #8
     8de:	0020      	movs	r0, r4
     8e0:	47a8      	blx	r5
     8e2:	b02a      	add	sp, #168	; 0xa8
     8e4:	bd70      	pop	{r4, r5, r6, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	42002000 	.word	0x42002000
     8ec:	00000149 	.word	0x00000149
     8f0:	00000424 	.word	0x00000424
     8f4:	200005e0 	.word	0x200005e0
     8f8:	00000295 	.word	0x00000295
     8fc:	00000775 	.word	0x00000775
     900:	000006a1 	.word	0x000006a1
     904:	000006b9 	.word	0x000006b9

00000908 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     908:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     90a:	4b07      	ldr	r3, [pc, #28]	; (928 <sd_mmc_configure_slot+0x20>)
     90c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     90e:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     910:	5ccb      	ldrb	r3, [r1, r3]
     912:	1e5a      	subs	r2, r3, #1
     914:	4193      	sbcs	r3, r2
     916:	b2db      	uxtb	r3, r3
     918:	7c4a      	ldrb	r2, [r1, #17]
     91a:	6809      	ldr	r1, [r1, #0]
     91c:	4803      	ldr	r0, [pc, #12]	; (92c <sd_mmc_configure_slot+0x24>)
     91e:	7800      	ldrb	r0, [r0, #0]
     920:	4c03      	ldr	r4, [pc, #12]	; (930 <sd_mmc_configure_slot+0x28>)
     922:	47a0      	blx	r4
}
     924:	bd10      	pop	{r4, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	2000017c 	.word	0x2000017c
     92c:	20000185 	.word	0x20000185
     930:	00005fdd 	.word	0x00005fdd

00000934 <sd_mmc_select_slot>:
{
     934:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     936:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     938:	2800      	cmp	r0, #0
     93a:	d001      	beq.n	940 <sd_mmc_select_slot+0xc>
}
     93c:	0018      	movs	r0, r3
     93e:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     940:	4b40      	ldr	r3, [pc, #256]	; (a44 <sd_mmc_select_slot+0x110>)
     942:	7a19      	ldrb	r1, [r3, #8]
	if (port_index < PORT_INST_NUM) {
     944:	09ca      	lsrs	r2, r1, #7
		return NULL;
     946:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     948:	2a00      	cmp	r2, #0
     94a:	d104      	bne.n	956 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     94c:	094b      	lsrs	r3, r1, #5
     94e:	01db      	lsls	r3, r3, #7
     950:	4a3d      	ldr	r2, [pc, #244]	; (a48 <sd_mmc_select_slot+0x114>)
     952:	4694      	mov	ip, r2
     954:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     956:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     958:	221f      	movs	r2, #31
     95a:	400a      	ands	r2, r1
     95c:	2301      	movs	r3, #1
     95e:	4093      	lsls	r3, r2
     960:	4218      	tst	r0, r3
     962:	d010      	beq.n	986 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     964:	4b37      	ldr	r3, [pc, #220]	; (a44 <sd_mmc_select_slot+0x110>)
     966:	7b9b      	ldrb	r3, [r3, #14]
     968:	2b01      	cmp	r3, #1
     96a:	d004      	beq.n	976 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     96c:	2204      	movs	r2, #4
     96e:	4b35      	ldr	r3, [pc, #212]	; (a44 <sd_mmc_select_slot+0x110>)
     970:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     972:	2302      	movs	r3, #2
     974:	e7e2      	b.n	93c <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     976:	4b35      	ldr	r3, [pc, #212]	; (a4c <sd_mmc_select_slot+0x118>)
     978:	781b      	ldrb	r3, [r3, #0]
     97a:	2b00      	cmp	r3, #0
     97c:	d0f6      	beq.n	96c <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     97e:	2200      	movs	r2, #0
     980:	4b33      	ldr	r3, [pc, #204]	; (a50 <sd_mmc_select_slot+0x11c>)
     982:	601a      	str	r2, [r3, #0]
     984:	e7f2      	b.n	96c <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     986:	4b2f      	ldr	r3, [pc, #188]	; (a44 <sd_mmc_select_slot+0x110>)
     988:	7b9a      	ldrb	r2, [r3, #14]
     98a:	2a04      	cmp	r2, #4
     98c:	d005      	beq.n	99a <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     98e:	2a01      	cmp	r2, #1
     990:	d033      	beq.n	9fa <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     992:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     994:	2a03      	cmp	r2, #3
     996:	d0d1      	beq.n	93c <sd_mmc_select_slot+0x8>
     998:	e045      	b.n	a26 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     99a:	3a03      	subs	r2, #3
     99c:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     99e:	4b2c      	ldr	r3, [pc, #176]	; (a50 <sd_mmc_select_slot+0x11c>)
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d017      	beq.n	9d6 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     9a6:	2200      	movs	r2, #0
     9a8:	4b28      	ldr	r3, [pc, #160]	; (a4c <sd_mmc_select_slot+0x118>)
     9aa:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     9ac:	2000      	movs	r0, #0
     9ae:	4b29      	ldr	r3, [pc, #164]	; (a54 <sd_mmc_select_slot+0x120>)
     9b0:	4798      	blx	r3
     9b2:	22fa      	movs	r2, #250	; 0xfa
     9b4:	0092      	lsls	r2, r2, #2
     9b6:	2300      	movs	r3, #0
     9b8:	2100      	movs	r1, #0
     9ba:	4c27      	ldr	r4, [pc, #156]	; (a58 <sd_mmc_select_slot+0x124>)
     9bc:	47a0      	blx	r4
     9be:	4a27      	ldr	r2, [pc, #156]	; (a5c <sd_mmc_select_slot+0x128>)
     9c0:	2300      	movs	r3, #0
     9c2:	1880      	adds	r0, r0, r2
     9c4:	4159      	adcs	r1, r3
     9c6:	4a26      	ldr	r2, [pc, #152]	; (a60 <sd_mmc_select_slot+0x12c>)
     9c8:	2300      	movs	r3, #0
     9ca:	4c26      	ldr	r4, [pc, #152]	; (a64 <sd_mmc_select_slot+0x130>)
     9cc:	47a0      	blx	r4
     9ce:	4b26      	ldr	r3, [pc, #152]	; (a68 <sd_mmc_select_slot+0x134>)
     9d0:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     9d2:	2302      	movs	r3, #2
     9d4:	e7b2      	b.n	93c <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     9d6:	2401      	movs	r4, #1
     9d8:	4b1c      	ldr	r3, [pc, #112]	; (a4c <sd_mmc_select_slot+0x118>)
     9da:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     9dc:	2000      	movs	r0, #0
     9de:	4b1d      	ldr	r3, [pc, #116]	; (a54 <sd_mmc_select_slot+0x120>)
     9e0:	4798      	blx	r3
     9e2:	21fa      	movs	r1, #250	; 0xfa
     9e4:	0149      	lsls	r1, r1, #5
     9e6:	4b21      	ldr	r3, [pc, #132]	; (a6c <sd_mmc_select_slot+0x138>)
     9e8:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     9ea:	23fa      	movs	r3, #250	; 0xfa
     9ec:	009b      	lsls	r3, r3, #2
     9ee:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     9f0:	4b17      	ldr	r3, [pc, #92]	; (a50 <sd_mmc_select_slot+0x11c>)
     9f2:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     9f4:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     9f6:	2302      	movs	r3, #2
     9f8:	e7a0      	b.n	93c <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     9fa:	4b14      	ldr	r3, [pc, #80]	; (a4c <sd_mmc_select_slot+0x118>)
     9fc:	781b      	ldrb	r3, [r3, #0]
     9fe:	2b00      	cmp	r3, #0
     a00:	d007      	beq.n	a12 <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a02:	4b13      	ldr	r3, [pc, #76]	; (a50 <sd_mmc_select_slot+0x11c>)
     a04:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     a06:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a08:	03d2      	lsls	r2, r2, #15
     a0a:	d597      	bpl.n	93c <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     a0c:	2200      	movs	r2, #0
     a0e:	4b10      	ldr	r3, [pc, #64]	; (a50 <sd_mmc_select_slot+0x11c>)
     a10:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     a12:	4b0c      	ldr	r3, [pc, #48]	; (a44 <sd_mmc_select_slot+0x110>)
     a14:	2202      	movs	r2, #2
     a16:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     a18:	4a15      	ldr	r2, [pc, #84]	; (a70 <sd_mmc_select_slot+0x13c>)
     a1a:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     a1c:	2201      	movs	r2, #1
     a1e:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     a20:	2100      	movs	r1, #0
     a22:	3221      	adds	r2, #33	; 0x21
     a24:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     a26:	2200      	movs	r2, #0
     a28:	4b12      	ldr	r3, [pc, #72]	; (a74 <sd_mmc_select_slot+0x140>)
     a2a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     a2c:	4c05      	ldr	r4, [pc, #20]	; (a44 <sd_mmc_select_slot+0x110>)
     a2e:	4b12      	ldr	r3, [pc, #72]	; (a78 <sd_mmc_select_slot+0x144>)
     a30:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     a32:	4b12      	ldr	r3, [pc, #72]	; (a7c <sd_mmc_select_slot+0x148>)
     a34:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     a36:	7ba3      	ldrb	r3, [r4, #14]
     a38:	3b02      	subs	r3, #2
     a3a:	425a      	negs	r2, r3
     a3c:	4153      	adcs	r3, r2
     a3e:	b2db      	uxtb	r3, r3
     a40:	e77c      	b.n	93c <sd_mmc_select_slot+0x8>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	2000000c 	.word	0x2000000c
     a48:	41004400 	.word	0x41004400
     a4c:	20000184 	.word	0x20000184
     a50:	e000e010 	.word	0xe000e010
     a54:	000066cd 	.word	0x000066cd
     a58:	00006e05 	.word	0x00006e05
     a5c:	00001b57 	.word	0x00001b57
     a60:	00001b58 	.word	0x00001b58
     a64:	00006dc5 	.word	0x00006dc5
     a68:	20000001 	.word	0x20000001
     a6c:	00006a5d 	.word	0x00006a5d
     a70:	00061a80 	.word	0x00061a80
     a74:	20000185 	.word	0x20000185
     a78:	2000017c 	.word	0x2000017c
     a7c:	00000909 	.word	0x00000909

00000a80 <sd_mmc_cmd13>:
{
     a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a82:	4d09      	ldr	r5, [pc, #36]	; (aa8 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     a84:	4f09      	ldr	r7, [pc, #36]	; (aac <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     a86:	4e0a      	ldr	r6, [pc, #40]	; (ab0 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     a88:	2100      	movs	r1, #0
     a8a:	480a      	ldr	r0, [pc, #40]	; (ab4 <sd_mmc_cmd13+0x34>)
     a8c:	47b8      	blx	r7
     a8e:	1e04      	subs	r4, r0, #0
     a90:	d007      	beq.n	aa2 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     a92:	47b0      	blx	r6
     a94:	23ff      	movs	r3, #255	; 0xff
     a96:	4203      	tst	r3, r0
     a98:	d003      	beq.n	aa2 <sd_mmc_cmd13+0x22>
     a9a:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     a9c:	2d00      	cmp	r5, #0
     a9e:	d1f3      	bne.n	a88 <sd_mmc_cmd13+0x8>
			return false;
     aa0:	2400      	movs	r4, #0
}
     aa2:	0020      	movs	r0, r4
     aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	00030d41 	.word	0x00030d41
     aac:	00006221 	.word	0x00006221
     ab0:	00006239 	.word	0x00006239
     ab4:	00001b0d 	.word	0x00001b0d

00000ab8 <sd_mmc_cmd9_spi>:
{
     ab8:	b510      	push	{r4, lr}
     aba:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     abc:	4b0c      	ldr	r3, [pc, #48]	; (af0 <sd_mmc_cmd9_spi+0x38>)
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	8999      	ldrh	r1, [r3, #12]
     ac2:	0409      	lsls	r1, r1, #16
     ac4:	2301      	movs	r3, #1
     ac6:	9300      	str	r3, [sp, #0]
     ac8:	2210      	movs	r2, #16
     aca:	480a      	ldr	r0, [pc, #40]	; (af4 <sd_mmc_cmd9_spi+0x3c>)
     acc:	4c0a      	ldr	r4, [pc, #40]	; (af8 <sd_mmc_cmd9_spi+0x40>)
     ace:	47a0      	blx	r4
     ad0:	2800      	cmp	r0, #0
     ad2:	d101      	bne.n	ad8 <sd_mmc_cmd9_spi+0x20>
}
     ad4:	b002      	add	sp, #8
     ad6:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <sd_mmc_cmd9_spi+0x38>)
     ada:	6818      	ldr	r0, [r3, #0]
     adc:	3012      	adds	r0, #18
     ade:	2101      	movs	r1, #1
     ae0:	4b06      	ldr	r3, [pc, #24]	; (afc <sd_mmc_cmd9_spi+0x44>)
     ae2:	4798      	blx	r3
     ae4:	2800      	cmp	r0, #0
     ae6:	d0f5      	beq.n	ad4 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     ae8:	4b05      	ldr	r3, [pc, #20]	; (b00 <sd_mmc_cmd9_spi+0x48>)
     aea:	4798      	blx	r3
     aec:	e7f2      	b.n	ad4 <sd_mmc_cmd9_spi+0x1c>
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	2000017c 	.word	0x2000017c
     af4:	00081109 	.word	0x00081109
     af8:	00006091 	.word	0x00006091
     afc:	000062bd 	.word	0x000062bd
     b00:	00006349 	.word	0x00006349

00000b04 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     b04:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     b06:	4b04      	ldr	r3, [pc, #16]	; (b18 <sd_mmc_deselect_slot+0x14>)
     b08:	781b      	ldrb	r3, [r3, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d000      	beq.n	b10 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     b0e:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     b10:	2000      	movs	r0, #0
     b12:	4b02      	ldr	r3, [pc, #8]	; (b1c <sd_mmc_deselect_slot+0x18>)
     b14:	4798      	blx	r3
}
     b16:	e7fa      	b.n	b0e <sd_mmc_deselect_slot+0xa>
     b18:	20000185 	.word	0x20000185
     b1c:	00006031 	.word	0x00006031

00000b20 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     b20:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     b22:	2204      	movs	r2, #4
     b24:	4b03      	ldr	r3, [pc, #12]	; (b34 <sd_mmc_init+0x14>)
     b26:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     b28:	32fb      	adds	r2, #251	; 0xfb
     b2a:	4b03      	ldr	r3, [pc, #12]	; (b38 <sd_mmc_init+0x18>)
     b2c:	701a      	strb	r2, [r3, #0]
	driver_init();
     b2e:	4b03      	ldr	r3, [pc, #12]	; (b3c <sd_mmc_init+0x1c>)
     b30:	4798      	blx	r3
}
     b32:	bd10      	pop	{r4, pc}
     b34:	2000000c 	.word	0x2000000c
     b38:	20000185 	.word	0x20000185
     b3c:	00005ee9 	.word	0x00005ee9

00000b40 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     b40:	b5f0      	push	{r4, r5, r6, r7, lr}
     b42:	46c6      	mov	lr, r8
     b44:	b500      	push	{lr}
     b46:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     b48:	4bcb      	ldr	r3, [pc, #812]	; (e78 <sd_mmc_check+0x338>)
     b4a:	4798      	blx	r3
     b4c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     b4e:	2801      	cmp	r0, #1
     b50:	d006      	beq.n	b60 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     b52:	4bca      	ldr	r3, [pc, #808]	; (e7c <sd_mmc_check+0x33c>)
     b54:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     b56:	0020      	movs	r0, r4
     b58:	b008      	add	sp, #32
     b5a:	bc04      	pop	{r2}
     b5c:	4690      	mov	r8, r2
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     b60:	4bc7      	ldr	r3, [pc, #796]	; (e80 <sd_mmc_check+0x340>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	2201      	movs	r2, #1
     b66:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     b68:	2200      	movs	r2, #0
     b6a:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     b6c:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     b6e:	4bc5      	ldr	r3, [pc, #788]	; (e84 <sd_mmc_check+0x344>)
     b70:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     b72:	2100      	movs	r1, #0
     b74:	2088      	movs	r0, #136	; 0x88
     b76:	0140      	lsls	r0, r0, #5
     b78:	4bc3      	ldr	r3, [pc, #780]	; (e88 <sd_mmc_check+0x348>)
     b7a:	4798      	blx	r3
     b7c:	2800      	cmp	r0, #0
     b7e:	d107      	bne.n	b90 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     b80:	4bbf      	ldr	r3, [pc, #764]	; (e80 <sd_mmc_check+0x340>)
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	2203      	movs	r2, #3
     b86:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     b88:	4bbc      	ldr	r3, [pc, #752]	; (e7c <sd_mmc_check+0x33c>)
     b8a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     b8c:	2403      	movs	r4, #3
     b8e:	e7e2      	b.n	b56 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     b90:	21d5      	movs	r1, #213	; 0xd5
     b92:	0049      	lsls	r1, r1, #1
     b94:	48bd      	ldr	r0, [pc, #756]	; (e8c <sd_mmc_check+0x34c>)
     b96:	4bbc      	ldr	r3, [pc, #752]	; (e88 <sd_mmc_check+0x348>)
     b98:	4798      	blx	r3
	*v2 = 0;
     b9a:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     b9c:	2800      	cmp	r0, #0
     b9e:	d125      	bne.n	bec <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ba0:	4bb7      	ldr	r3, [pc, #732]	; (e80 <sd_mmc_check+0x340>)
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	7bdb      	ldrb	r3, [r3, #15]
     ba6:	07db      	lsls	r3, r3, #31
     ba8:	d500      	bpl.n	bac <sd_mmc_check+0x6c>
     baa:	e1eb      	b.n	f84 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     bac:	4bb4      	ldr	r3, [pc, #720]	; (e80 <sd_mmc_check+0x340>)
     bae:	681b      	ldr	r3, [r3, #0]
     bb0:	7bda      	ldrb	r2, [r3, #15]
     bb2:	2309      	movs	r3, #9
     bb4:	4013      	ands	r3, r2
     bb6:	2b01      	cmp	r3, #1
     bb8:	d10f      	bne.n	bda <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     bba:	2180      	movs	r1, #128	; 0x80
     bbc:	0089      	lsls	r1, r1, #2
     bbe:	48b4      	ldr	r0, [pc, #720]	; (e90 <sd_mmc_check+0x350>)
     bc0:	4bb1      	ldr	r3, [pc, #708]	; (e88 <sd_mmc_check+0x348>)
     bc2:	4798      	blx	r3
     bc4:	2800      	cmp	r0, #0
     bc6:	d0db      	beq.n	b80 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     bc8:	4bad      	ldr	r3, [pc, #692]	; (e80 <sd_mmc_check+0x340>)
     bca:	681b      	ldr	r3, [r3, #0]
     bcc:	7bdb      	ldrb	r3, [r3, #15]
     bce:	07db      	lsls	r3, r3, #31
     bd0:	d503      	bpl.n	bda <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     bd2:	4bb0      	ldr	r3, [pc, #704]	; (e94 <sd_mmc_check+0x354>)
     bd4:	4798      	blx	r3
     bd6:	2800      	cmp	r0, #0
     bd8:	d0d2      	beq.n	b80 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     bda:	4baf      	ldr	r3, [pc, #700]	; (e98 <sd_mmc_check+0x358>)
     bdc:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     bde:	4ba8      	ldr	r3, [pc, #672]	; (e80 <sd_mmc_check+0x340>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	2200      	movs	r2, #0
     be4:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     be6:	4ba5      	ldr	r3, [pc, #660]	; (e7c <sd_mmc_check+0x33c>)
     be8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     bea:	e7b4      	b.n	b56 <sd_mmc_check+0x16>
	resp = driver_get_response();
     bec:	4bab      	ldr	r3, [pc, #684]	; (e9c <sd_mmc_check+0x35c>)
     bee:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     bf0:	1c43      	adds	r3, r0, #1
     bf2:	d100      	bne.n	bf6 <sd_mmc_check+0xb6>
     bf4:	e1c4      	b.n	f80 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     bf6:	0500      	lsls	r0, r0, #20
     bf8:	0d00      	lsrs	r0, r0, #20
     bfa:	23d5      	movs	r3, #213	; 0xd5
     bfc:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     bfe:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     c00:	4298      	cmp	r0, r3
     c02:	d1bd      	bne.n	b80 <sd_mmc_check+0x40>
     c04:	e7cc      	b.n	ba0 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     c06:	2100      	movs	r1, #0
     c08:	48a5      	ldr	r0, [pc, #660]	; (ea0 <sd_mmc_check+0x360>)
     c0a:	4b9f      	ldr	r3, [pc, #636]	; (e88 <sd_mmc_check+0x348>)
     c0c:	4798      	blx	r3
     c0e:	2800      	cmp	r0, #0
     c10:	d119      	bne.n	c46 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     c12:	4b9b      	ldr	r3, [pc, #620]	; (e80 <sd_mmc_check+0x340>)
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	2202      	movs	r2, #2
     c18:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     c1a:	2100      	movs	r1, #0
     c1c:	2088      	movs	r0, #136	; 0x88
     c1e:	0140      	lsls	r0, r0, #5
     c20:	4b99      	ldr	r3, [pc, #612]	; (e88 <sd_mmc_check+0x348>)
     c22:	4798      	blx	r3
     c24:	2800      	cmp	r0, #0
     c26:	d0ab      	beq.n	b80 <sd_mmc_check+0x40>
     c28:	4d9e      	ldr	r5, [pc, #632]	; (ea4 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     c2a:	4f97      	ldr	r7, [pc, #604]	; (e88 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     c2c:	4e9b      	ldr	r6, [pc, #620]	; (e9c <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     c2e:	2100      	movs	r1, #0
     c30:	489d      	ldr	r0, [pc, #628]	; (ea8 <sd_mmc_check+0x368>)
     c32:	47b8      	blx	r7
     c34:	2800      	cmp	r0, #0
     c36:	d0a3      	beq.n	b80 <sd_mmc_check+0x40>
		resp = driver_get_response();
     c38:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     c3a:	07c3      	lsls	r3, r0, #31
     c3c:	d57d      	bpl.n	d3a <sd_mmc_check+0x1fa>
     c3e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     c40:	2d00      	cmp	r5, #0
     c42:	d1f4      	bne.n	c2e <sd_mmc_check+0xee>
     c44:	e79c      	b.n	b80 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     c46:	4b95      	ldr	r3, [pc, #596]	; (e9c <sd_mmc_check+0x35c>)
     c48:	4798      	blx	r3
     c4a:	0043      	lsls	r3, r0, #1
     c4c:	d505      	bpl.n	c5a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     c4e:	4b8c      	ldr	r3, [pc, #560]	; (e80 <sd_mmc_check+0x340>)
     c50:	681a      	ldr	r2, [r3, #0]
     c52:	7bd3      	ldrb	r3, [r2, #15]
     c54:	2108      	movs	r1, #8
     c56:	430b      	orrs	r3, r1
     c58:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     c5a:	2100      	movs	r1, #0
     c5c:	4893      	ldr	r0, [pc, #588]	; (eac <sd_mmc_check+0x36c>)
     c5e:	4b8a      	ldr	r3, [pc, #552]	; (e88 <sd_mmc_check+0x348>)
     c60:	4798      	blx	r3
     c62:	2800      	cmp	r0, #0
     c64:	d08c      	beq.n	b80 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     c66:	4b86      	ldr	r3, [pc, #536]	; (e80 <sd_mmc_check+0x340>)
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	7bdb      	ldrb	r3, [r3, #15]
     c6c:	07da      	lsls	r2, r3, #31
     c6e:	d400      	bmi.n	c72 <sd_mmc_check+0x132>
     c70:	e1a4      	b.n	fbc <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     c72:	4b8f      	ldr	r3, [pc, #572]	; (eb0 <sd_mmc_check+0x370>)
     c74:	4798      	blx	r3
     c76:	2800      	cmp	r0, #0
     c78:	d082      	beq.n	b80 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     c7a:	4b81      	ldr	r3, [pc, #516]	; (e80 <sd_mmc_check+0x340>)
     c7c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c7e:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c80:	2107      	movs	r1, #7
     c82:	4019      	ands	r1, r3
     c84:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c86:	488b      	ldr	r0, [pc, #556]	; (eb4 <sd_mmc_check+0x374>)
     c88:	5808      	ldr	r0, [r1, r0]
     c8a:	21fa      	movs	r1, #250	; 0xfa
     c8c:	0089      	lsls	r1, r1, #2
     c8e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     c90:	065b      	lsls	r3, r3, #25
     c92:	0f1b      	lsrs	r3, r3, #28
     c94:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c96:	4888      	ldr	r0, [pc, #544]	; (eb8 <sd_mmc_check+0x378>)
     c98:	581b      	ldr	r3, [r3, r0]
     c9a:	434b      	muls	r3, r1
     c9c:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     c9e:	7c93      	ldrb	r3, [r2, #18]
     ca0:	099b      	lsrs	r3, r3, #6
     ca2:	d000      	beq.n	ca6 <sd_mmc_check+0x166>
     ca4:	e13c      	b.n	f20 <sd_mmc_check+0x3e0>
     ca6:	7e91      	ldrb	r1, [r2, #26]
     ca8:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     caa:	7e53      	ldrb	r3, [r2, #25]
     cac:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cae:	7e10      	ldrb	r0, [r2, #24]
     cb0:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cb2:	4303      	orrs	r3, r0
     cb4:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     cb6:	7f10      	ldrb	r0, [r2, #28]
     cb8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cba:	7ed1      	ldrb	r1, [r2, #27]
     cbc:	0049      	lsls	r1, r1, #1
     cbe:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     cc0:	051b      	lsls	r3, r3, #20
     cc2:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     cc4:	3301      	adds	r3, #1
     cc6:	2107      	movs	r1, #7
     cc8:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     cca:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     ccc:	408b      	lsls	r3, r1
     cce:	7dd0      	ldrb	r0, [r2, #23]
     cd0:	210f      	movs	r1, #15
     cd2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     cd4:	408b      	lsls	r3, r1
				/ 1024;
     cd6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     cd8:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     cda:	8991      	ldrh	r1, [r2, #12]
     cdc:	0409      	lsls	r1, r1, #16
     cde:	4877      	ldr	r0, [pc, #476]	; (ebc <sd_mmc_check+0x37c>)
     ce0:	4b69      	ldr	r3, [pc, #420]	; (e88 <sd_mmc_check+0x348>)
     ce2:	4798      	blx	r3
     ce4:	2800      	cmp	r0, #0
     ce6:	d100      	bne.n	cea <sd_mmc_check+0x1aa>
     ce8:	e74a      	b.n	b80 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     cea:	2301      	movs	r3, #1
     cec:	9300      	str	r3, [sp, #0]
     cee:	2208      	movs	r2, #8
     cf0:	2100      	movs	r1, #0
     cf2:	4873      	ldr	r0, [pc, #460]	; (ec0 <sd_mmc_check+0x380>)
     cf4:	4d73      	ldr	r5, [pc, #460]	; (ec4 <sd_mmc_check+0x384>)
     cf6:	47a8      	blx	r5
     cf8:	2800      	cmp	r0, #0
     cfa:	d100      	bne.n	cfe <sd_mmc_check+0x1be>
     cfc:	e740      	b.n	b80 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     cfe:	2101      	movs	r1, #1
     d00:	a806      	add	r0, sp, #24
     d02:	4b71      	ldr	r3, [pc, #452]	; (ec8 <sd_mmc_check+0x388>)
     d04:	4798      	blx	r3
     d06:	2800      	cmp	r0, #0
     d08:	d100      	bne.n	d0c <sd_mmc_check+0x1cc>
     d0a:	e739      	b.n	b80 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     d0c:	4b6f      	ldr	r3, [pc, #444]	; (ecc <sd_mmc_check+0x38c>)
     d0e:	4798      	blx	r3
     d10:	2800      	cmp	r0, #0
     d12:	d100      	bne.n	d16 <sd_mmc_check+0x1d6>
     d14:	e734      	b.n	b80 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d16:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	220f      	movs	r2, #15
     d1c:	4013      	ands	r3, r2
     d1e:	2b01      	cmp	r3, #1
     d20:	d100      	bne.n	d24 <sd_mmc_check+0x1e4>
     d22:	e119      	b.n	f58 <sd_mmc_check+0x418>
     d24:	2b00      	cmp	r3, #0
     d26:	d100      	bne.n	d2a <sd_mmc_check+0x1ea>
     d28:	e109      	b.n	f3e <sd_mmc_check+0x3fe>
     d2a:	2b02      	cmp	r3, #2
     d2c:	d100      	bne.n	d30 <sd_mmc_check+0x1f0>
     d2e:	e118      	b.n	f62 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     d30:	4b53      	ldr	r3, [pc, #332]	; (e80 <sd_mmc_check+0x340>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	2210      	movs	r2, #16
     d36:	741a      	strb	r2, [r3, #16]
     d38:	e105      	b.n	f46 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     d3a:	2100      	movs	r1, #0
     d3c:	4858      	ldr	r0, [pc, #352]	; (ea0 <sd_mmc_check+0x360>)
     d3e:	4b52      	ldr	r3, [pc, #328]	; (e88 <sd_mmc_check+0x348>)
     d40:	4798      	blx	r3
     d42:	2800      	cmp	r0, #0
     d44:	d100      	bne.n	d48 <sd_mmc_check+0x208>
     d46:	e71b      	b.n	b80 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     d48:	4b54      	ldr	r3, [pc, #336]	; (e9c <sd_mmc_check+0x35c>)
     d4a:	4798      	blx	r3
     d4c:	23c0      	movs	r3, #192	; 0xc0
     d4e:	05db      	lsls	r3, r3, #23
     d50:	4018      	ands	r0, r3
     d52:	2380      	movs	r3, #128	; 0x80
     d54:	05db      	lsls	r3, r3, #23
     d56:	4298      	cmp	r0, r3
     d58:	d105      	bne.n	d66 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     d5a:	4b49      	ldr	r3, [pc, #292]	; (e80 <sd_mmc_check+0x340>)
     d5c:	681a      	ldr	r2, [r3, #0]
     d5e:	7bd1      	ldrb	r1, [r2, #15]
     d60:	2308      	movs	r3, #8
     d62:	430b      	orrs	r3, r1
     d64:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     d66:	2100      	movs	r1, #0
     d68:	4850      	ldr	r0, [pc, #320]	; (eac <sd_mmc_check+0x36c>)
     d6a:	4b47      	ldr	r3, [pc, #284]	; (e88 <sd_mmc_check+0x348>)
     d6c:	4798      	blx	r3
     d6e:	2800      	cmp	r0, #0
     d70:	d100      	bne.n	d74 <sd_mmc_check+0x234>
     d72:	e705      	b.n	b80 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     d74:	4b4e      	ldr	r3, [pc, #312]	; (eb0 <sd_mmc_check+0x370>)
     d76:	4798      	blx	r3
     d78:	2800      	cmp	r0, #0
     d7a:	d100      	bne.n	d7e <sd_mmc_check+0x23e>
     d7c:	e700      	b.n	b80 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     d7e:	4b40      	ldr	r3, [pc, #256]	; (e80 <sd_mmc_check+0x340>)
     d80:	681a      	ldr	r2, [r3, #0]
     d82:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     d84:	069b      	lsls	r3, r3, #26
     d86:	0f1b      	lsrs	r3, r3, #28
     d88:	2b02      	cmp	r3, #2
     d8a:	d100      	bne.n	d8e <sd_mmc_check+0x24e>
     d8c:	e0a8      	b.n	ee0 <sd_mmc_check+0x3a0>
     d8e:	d907      	bls.n	da0 <sd_mmc_check+0x260>
     d90:	2b03      	cmp	r3, #3
     d92:	d100      	bne.n	d96 <sd_mmc_check+0x256>
     d94:	e0a7      	b.n	ee6 <sd_mmc_check+0x3a6>
     d96:	2b04      	cmp	r3, #4
     d98:	d104      	bne.n	da4 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     d9a:	2340      	movs	r3, #64	; 0x40
     d9c:	7413      	strb	r3, [r2, #16]
     d9e:	e003      	b.n	da8 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     da0:	2b01      	cmp	r3, #1
     da2:	d066      	beq.n	e72 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     da4:	2312      	movs	r3, #18
     da6:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     da8:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     daa:	0659      	lsls	r1, r3, #25
     dac:	0f09      	lsrs	r1, r1, #28
     dae:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     db0:	2007      	movs	r0, #7
     db2:	4003      	ands	r3, r0
     db4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     db6:	483f      	ldr	r0, [pc, #252]	; (eb4 <sd_mmc_check+0x374>)
     db8:	5818      	ldr	r0, [r3, r0]
     dba:	23fa      	movs	r3, #250	; 0xfa
     dbc:	009b      	lsls	r3, r3, #2
     dbe:	4343      	muls	r3, r0
     dc0:	4843      	ldr	r0, [pc, #268]	; (ed0 <sd_mmc_check+0x390>)
     dc2:	5809      	ldr	r1, [r1, r0]
     dc4:	434b      	muls	r3, r1
     dc6:	6013      	str	r3, [r2, #0]
     dc8:	7e91      	ldrb	r1, [r2, #26]
     dca:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     dcc:	7e53      	ldrb	r3, [r2, #25]
     dce:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     dd0:	7e10      	ldrb	r0, [r2, #24]
     dd2:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     dd4:	4303      	orrs	r3, r0
     dd6:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     dd8:	051b      	lsls	r3, r3, #20
     dda:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     ddc:	493d      	ldr	r1, [pc, #244]	; (ed4 <sd_mmc_check+0x394>)
     dde:	428b      	cmp	r3, r1
     de0:	d00f      	beq.n	e02 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     de2:	7f10      	ldrb	r0, [r2, #28]
     de4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     de6:	7ed1      	ldrb	r1, [r2, #27]
     de8:	0049      	lsls	r1, r1, #1
     dea:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     dec:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     dee:	2007      	movs	r0, #7
     df0:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     df2:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     df4:	408b      	lsls	r3, r1
     df6:	7dd1      	ldrb	r1, [r2, #23]
     df8:	3008      	adds	r0, #8
     dfa:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     dfc:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     dfe:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     e00:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     e02:	7c13      	ldrb	r3, [r2, #16]
     e04:	2b3f      	cmp	r3, #63	; 0x3f
     e06:	d97b      	bls.n	f00 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     e08:	2100      	movs	r1, #0
     e0a:	9100      	str	r1, [sp, #0]
     e0c:	2301      	movs	r3, #1
     e0e:	2280      	movs	r2, #128	; 0x80
     e10:	0092      	lsls	r2, r2, #2
     e12:	4831      	ldr	r0, [pc, #196]	; (ed8 <sd_mmc_check+0x398>)
     e14:	4d2b      	ldr	r5, [pc, #172]	; (ec4 <sd_mmc_check+0x384>)
     e16:	47a8      	blx	r5
     e18:	2800      	cmp	r0, #0
     e1a:	d100      	bne.n	e1e <sd_mmc_check+0x2de>
     e1c:	e6b0      	b.n	b80 <sd_mmc_check+0x40>
     e1e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     e20:	4e2e      	ldr	r6, [pc, #184]	; (edc <sd_mmc_check+0x39c>)
     e22:	a805      	add	r0, sp, #20
     e24:	47b0      	blx	r6
     e26:	2800      	cmp	r0, #0
     e28:	d100      	bne.n	e2c <sd_mmc_check+0x2ec>
     e2a:	e6a9      	b.n	b80 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     e2c:	3501      	adds	r5, #1
     e2e:	b2ad      	uxth	r5, r5
     e30:	2d32      	cmp	r5, #50	; 0x32
     e32:	d1f6      	bne.n	e22 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     e34:	4b12      	ldr	r3, [pc, #72]	; (e80 <sd_mmc_check+0x340>)
     e36:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e38:	7e8a      	ldrb	r2, [r1, #26]
     e3a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e3c:	7e4b      	ldrb	r3, [r1, #25]
     e3e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e40:	7e09      	ldrb	r1, [r1, #24]
     e42:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e44:	430b      	orrs	r3, r1
     e46:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     e48:	051b      	lsls	r3, r3, #20
     e4a:	0d1b      	lsrs	r3, r3, #20
     e4c:	4a21      	ldr	r2, [pc, #132]	; (ed4 <sd_mmc_check+0x394>)
     e4e:	4293      	cmp	r3, r2
     e50:	d154      	bne.n	efc <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     e52:	4e22      	ldr	r6, [pc, #136]	; (edc <sd_mmc_check+0x39c>)
     e54:	a806      	add	r0, sp, #24
     e56:	47b0      	blx	r6
     e58:	2800      	cmp	r0, #0
     e5a:	d100      	bne.n	e5e <sd_mmc_check+0x31e>
     e5c:	e690      	b.n	b80 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     e5e:	3501      	adds	r5, #1
     e60:	b2ad      	uxth	r5, r5
     e62:	2d35      	cmp	r5, #53	; 0x35
     e64:	d9f6      	bls.n	e54 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     e66:	4b06      	ldr	r3, [pc, #24]	; (e80 <sd_mmc_check+0x340>)
     e68:	681a      	ldr	r2, [r3, #0]
     e6a:	9b06      	ldr	r3, [sp, #24]
     e6c:	085b      	lsrs	r3, r3, #1
     e6e:	6053      	str	r3, [r2, #4]
     e70:	e044      	b.n	efc <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     e72:	2314      	movs	r3, #20
     e74:	7413      	strb	r3, [r2, #16]
     e76:	e797      	b.n	da8 <sd_mmc_check+0x268>
     e78:	00000935 	.word	0x00000935
     e7c:	00000b05 	.word	0x00000b05
     e80:	2000017c 	.word	0x2000017c
     e84:	00006059 	.word	0x00006059
     e88:	00006221 	.word	0x00006221
     e8c:	00005508 	.word	0x00005508
     e90:	00001110 	.word	0x00001110
     e94:	00000a81 	.word	0x00000a81
     e98:	00000909 	.word	0x00000909
     e9c:	00006239 	.word	0x00006239
     ea0:	0000053a 	.word	0x0000053a
     ea4:	00001bef 	.word	0x00001bef
     ea8:	00001101 	.word	0x00001101
     eac:	0000113b 	.word	0x0000113b
     eb0:	00000ab9 	.word	0x00000ab9
     eb4:	000078ac 	.word	0x000078ac
     eb8:	000078c8 	.word	0x000078c8
     ebc:	00001137 	.word	0x00001137
     ec0:	00081133 	.word	0x00081133
     ec4:	00006091 	.word	0x00006091
     ec8:	000062bd 	.word	0x000062bd
     ecc:	00006349 	.word	0x00006349
     ed0:	0000786c 	.word	0x0000786c
     ed4:	00000fff 	.word	0x00000fff
     ed8:	00081108 	.word	0x00081108
     edc:	00006245 	.word	0x00006245
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     ee0:	2322      	movs	r3, #34	; 0x22
     ee2:	7413      	strb	r3, [r2, #16]
     ee4:	e760      	b.n	da8 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     ee6:	2330      	movs	r3, #48	; 0x30
     ee8:	7413      	strb	r3, [r2, #16]
     eea:	e75d      	b.n	da8 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     eec:	a806      	add	r0, sp, #24
     eee:	4b36      	ldr	r3, [pc, #216]	; (fc8 <sd_mmc_check+0x488>)
     ef0:	4798      	blx	r3
     ef2:	2800      	cmp	r0, #0
     ef4:	d100      	bne.n	ef8 <sd_mmc_check+0x3b8>
     ef6:	e643      	b.n	b80 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     ef8:	3501      	adds	r5, #1
     efa:	b2ad      	uxth	r5, r5
     efc:	2d7f      	cmp	r5, #127	; 0x7f
     efe:	d9f5      	bls.n	eec <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     f00:	2180      	movs	r1, #128	; 0x80
     f02:	0089      	lsls	r1, r1, #2
     f04:	4831      	ldr	r0, [pc, #196]	; (fcc <sd_mmc_check+0x48c>)
     f06:	4b32      	ldr	r3, [pc, #200]	; (fd0 <sd_mmc_check+0x490>)
     f08:	4798      	blx	r3
     f0a:	2800      	cmp	r0, #0
     f0c:	d100      	bne.n	f10 <sd_mmc_check+0x3d0>
     f0e:	e637      	b.n	b80 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     f10:	4b30      	ldr	r3, [pc, #192]	; (fd4 <sd_mmc_check+0x494>)
     f12:	4798      	blx	r3
     f14:	2800      	cmp	r0, #0
     f16:	d100      	bne.n	f1a <sd_mmc_check+0x3da>
     f18:	e632      	b.n	b80 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     f1a:	4b2f      	ldr	r3, [pc, #188]	; (fd8 <sd_mmc_check+0x498>)
     f1c:	4798      	blx	r3
     f1e:	e65e      	b.n	bde <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f20:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f22:	7e93      	ldrb	r3, [r2, #26]
     f24:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f26:	7e51      	ldrb	r1, [r2, #25]
     f28:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f2a:	430b      	orrs	r3, r1
     f2c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     f2e:	029b      	lsls	r3, r3, #10
				* 512;
     f30:	085b      	lsrs	r3, r3, #1
     f32:	2180      	movs	r1, #128	; 0x80
     f34:	0089      	lsls	r1, r1, #2
     f36:	468c      	mov	ip, r1
     f38:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     f3a:	6053      	str	r3, [r2, #4]
     f3c:	e6cd      	b.n	cda <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     f3e:	4b27      	ldr	r3, [pc, #156]	; (fdc <sd_mmc_check+0x49c>)
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	2210      	movs	r2, #16
     f44:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     f46:	4b25      	ldr	r3, [pc, #148]	; (fdc <sd_mmc_check+0x49c>)
     f48:	681b      	ldr	r3, [r3, #0]
     f4a:	7bdb      	ldrb	r3, [r3, #15]
     f4c:	2209      	movs	r2, #9
     f4e:	4013      	ands	r3, r2
     f50:	2b01      	cmp	r3, #1
     f52:	d000      	beq.n	f56 <sd_mmc_check+0x416>
     f54:	e638      	b.n	bc8 <sd_mmc_check+0x88>
     f56:	e630      	b.n	bba <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     f58:	4b20      	ldr	r3, [pc, #128]	; (fdc <sd_mmc_check+0x49c>)
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	221a      	movs	r2, #26
     f5e:	741a      	strb	r2, [r3, #16]
     f60:	e7f1      	b.n	f46 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f62:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     f64:	789b      	ldrb	r3, [r3, #2]
     f66:	09db      	lsrs	r3, r3, #7
     f68:	2b01      	cmp	r3, #1
     f6a:	d104      	bne.n	f76 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     f6c:	4b1b      	ldr	r3, [pc, #108]	; (fdc <sd_mmc_check+0x49c>)
     f6e:	681b      	ldr	r3, [r3, #0]
     f70:	2230      	movs	r2, #48	; 0x30
     f72:	741a      	strb	r2, [r3, #16]
     f74:	e7e7      	b.n	f46 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     f76:	4b19      	ldr	r3, [pc, #100]	; (fdc <sd_mmc_check+0x49c>)
     f78:	681b      	ldr	r3, [r3, #0]
     f7a:	2220      	movs	r2, #32
     f7c:	741a      	strb	r2, [r3, #16]
     f7e:	e7e2      	b.n	f46 <sd_mmc_check+0x406>
	*v2 = 0;
     f80:	2600      	movs	r6, #0
     f82:	e60d      	b.n	ba0 <sd_mmc_check+0x60>
     f84:	1e73      	subs	r3, r6, #1
     f86:	419e      	sbcs	r6, r3
     f88:	07b3      	lsls	r3, r6, #30
     f8a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     f8c:	4d14      	ldr	r5, [pc, #80]	; (fe0 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     f8e:	4f10      	ldr	r7, [pc, #64]	; (fd0 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     f90:	46b8      	mov	r8, r7
		resp = driver_get_response();
     f92:	4e14      	ldr	r6, [pc, #80]	; (fe4 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     f94:	2100      	movs	r1, #0
     f96:	4814      	ldr	r0, [pc, #80]	; (fe8 <sd_mmc_check+0x4a8>)
     f98:	47b8      	blx	r7
     f9a:	2800      	cmp	r0, #0
     f9c:	d100      	bne.n	fa0 <sd_mmc_check+0x460>
     f9e:	e638      	b.n	c12 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     fa0:	9903      	ldr	r1, [sp, #12]
     fa2:	4812      	ldr	r0, [pc, #72]	; (fec <sd_mmc_check+0x4ac>)
     fa4:	47c0      	blx	r8
     fa6:	2800      	cmp	r0, #0
     fa8:	d100      	bne.n	fac <sd_mmc_check+0x46c>
     faa:	e632      	b.n	c12 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     fac:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     fae:	07c3      	lsls	r3, r0, #31
     fb0:	d400      	bmi.n	fb4 <sd_mmc_check+0x474>
     fb2:	e628      	b.n	c06 <sd_mmc_check+0xc6>
     fb4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     fb6:	2d00      	cmp	r5, #0
     fb8:	d1ec      	bne.n	f94 <sd_mmc_check+0x454>
     fba:	e62a      	b.n	c12 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     fbc:	2209      	movs	r2, #9
     fbe:	4013      	ands	r3, r2
     fc0:	2b01      	cmp	r3, #1
     fc2:	d000      	beq.n	fc6 <sd_mmc_check+0x486>
     fc4:	e609      	b.n	bda <sd_mmc_check+0x9a>
     fc6:	e5f8      	b.n	bba <sd_mmc_check+0x7a>
     fc8:	00006245 	.word	0x00006245
     fcc:	00001110 	.word	0x00001110
     fd0:	00006221 	.word	0x00006221
     fd4:	00000a81 	.word	0x00000a81
     fd8:	00000909 	.word	0x00000909
     fdc:	2000017c 	.word	0x2000017c
     fe0:	00001bef 	.word	0x00001bef
     fe4:	00006239 	.word	0x00006239
     fe8:	00001137 	.word	0x00001137
     fec:	00001129 	.word	0x00001129

00000ff0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     ff0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     ff2:	4b06      	ldr	r3, [pc, #24]	; (100c <sd_mmc_get_type+0x1c>)
     ff4:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     ff6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     ff8:	2800      	cmp	r0, #0
     ffa:	d001      	beq.n	1000 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     ffc:	0018      	movs	r0, r3
     ffe:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <sd_mmc_get_type+0x20>)
    1002:	4798      	blx	r3
	return sd_mmc_card->type;
    1004:	4b03      	ldr	r3, [pc, #12]	; (1014 <sd_mmc_get_type+0x24>)
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	7bdb      	ldrb	r3, [r3, #15]
    100a:	e7f7      	b.n	ffc <sd_mmc_get_type+0xc>
    100c:	00000935 	.word	0x00000935
    1010:	00000b05 	.word	0x00000b05
    1014:	2000017c 	.word	0x2000017c

00001018 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1018:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    101a:	4b06      	ldr	r3, [pc, #24]	; (1034 <sd_mmc_get_capacity+0x1c>)
    101c:	4798      	blx	r3
		return 0;
    101e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1020:	2800      	cmp	r0, #0
    1022:	d001      	beq.n	1028 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    1024:	0018      	movs	r0, r3
    1026:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1028:	4b03      	ldr	r3, [pc, #12]	; (1038 <sd_mmc_get_capacity+0x20>)
    102a:	4798      	blx	r3
	return sd_mmc_card->capacity;
    102c:	4b03      	ldr	r3, [pc, #12]	; (103c <sd_mmc_get_capacity+0x24>)
    102e:	681b      	ldr	r3, [r3, #0]
    1030:	685b      	ldr	r3, [r3, #4]
    1032:	e7f7      	b.n	1024 <sd_mmc_get_capacity+0xc>
    1034:	00000935 	.word	0x00000935
    1038:	00000b05 	.word	0x00000b05
    103c:	2000017c 	.word	0x2000017c

00001040 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    1040:	2000      	movs	r0, #0
    1042:	4770      	bx	lr

00001044 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1044:	b570      	push	{r4, r5, r6, lr}
    1046:	b082      	sub	sp, #8
    1048:	000e      	movs	r6, r1
    104a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    104c:	4b16      	ldr	r3, [pc, #88]	; (10a8 <sd_mmc_init_read_blocks+0x64>)
    104e:	4798      	blx	r3
    1050:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    1052:	d002      	beq.n	105a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    1054:	0020      	movs	r0, r4
    1056:	b002      	add	sp, #8
    1058:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    105a:	4b14      	ldr	r3, [pc, #80]	; (10ac <sd_mmc_init_read_blocks+0x68>)
    105c:	4798      	blx	r3
    105e:	2800      	cmp	r0, #0
    1060:	d017      	beq.n	1092 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    1062:	2d01      	cmp	r5, #1
    1064:	d919      	bls.n	109a <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1066:	4812      	ldr	r0, [pc, #72]	; (10b0 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1068:	4b12      	ldr	r3, [pc, #72]	; (10b4 <sd_mmc_init_read_blocks+0x70>)
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	7bdb      	ldrb	r3, [r3, #15]
    106e:	071b      	lsls	r3, r3, #28
    1070:	d400      	bmi.n	1074 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    1072:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1074:	2301      	movs	r3, #1
    1076:	9300      	str	r3, [sp, #0]
    1078:	002b      	movs	r3, r5
    107a:	2280      	movs	r2, #128	; 0x80
    107c:	0092      	lsls	r2, r2, #2
    107e:	0031      	movs	r1, r6
    1080:	4e0d      	ldr	r6, [pc, #52]	; (10b8 <sd_mmc_init_read_blocks+0x74>)
    1082:	47b0      	blx	r6
    1084:	2800      	cmp	r0, #0
    1086:	d00a      	beq.n	109e <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    1088:	4b0c      	ldr	r3, [pc, #48]	; (10bc <sd_mmc_init_read_blocks+0x78>)
    108a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <sd_mmc_init_read_blocks+0x7c>)
    108e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    1090:	e7e0      	b.n	1054 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    1092:	4b0c      	ldr	r3, [pc, #48]	; (10c4 <sd_mmc_init_read_blocks+0x80>)
    1094:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1096:	3405      	adds	r4, #5
    1098:	e7dc      	b.n	1054 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    109a:	480b      	ldr	r0, [pc, #44]	; (10c8 <sd_mmc_init_read_blocks+0x84>)
    109c:	e7e4      	b.n	1068 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    109e:	4b09      	ldr	r3, [pc, #36]	; (10c4 <sd_mmc_init_read_blocks+0x80>)
    10a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    10a2:	2405      	movs	r4, #5
    10a4:	e7d6      	b.n	1054 <sd_mmc_init_read_blocks+0x10>
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00000935 	.word	0x00000935
    10ac:	00000a81 	.word	0x00000a81
    10b0:	00101112 	.word	0x00101112
    10b4:	2000017c 	.word	0x2000017c
    10b8:	00006091 	.word	0x00006091
    10bc:	20000180 	.word	0x20000180
    10c0:	20000182 	.word	0x20000182
    10c4:	00000b05 	.word	0x00000b05
    10c8:	00081111 	.word	0x00081111

000010cc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    10cc:	b510      	push	{r4, lr}
    10ce:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    10d0:	4b07      	ldr	r3, [pc, #28]	; (10f0 <sd_mmc_start_read_blocks+0x24>)
    10d2:	4798      	blx	r3
    10d4:	2800      	cmp	r0, #0
    10d6:	d104      	bne.n	10e2 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    10d8:	2200      	movs	r2, #0
    10da:	4b06      	ldr	r3, [pc, #24]	; (10f4 <sd_mmc_start_read_blocks+0x28>)
    10dc:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    10de:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    10e0:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    10e2:	4a04      	ldr	r2, [pc, #16]	; (10f4 <sd_mmc_start_read_blocks+0x28>)
    10e4:	8813      	ldrh	r3, [r2, #0]
    10e6:	1b1c      	subs	r4, r3, r4
    10e8:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    10ea:	2000      	movs	r0, #0
    10ec:	e7f8      	b.n	10e0 <sd_mmc_start_read_blocks+0x14>
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	000062bd 	.word	0x000062bd
    10f4:	20000180 	.word	0x20000180

000010f8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    10f8:	b510      	push	{r4, lr}
    10fa:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    10fc:	4b14      	ldr	r3, [pc, #80]	; (1150 <sd_mmc_wait_end_of_read_blocks+0x58>)
    10fe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1100:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    1102:	2800      	cmp	r0, #0
    1104:	d101      	bne.n	110a <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1106:	0018      	movs	r0, r3
    1108:	bd10      	pop	{r4, pc}
	if (abort) {
    110a:	2c00      	cmp	r4, #0
    110c:	d010      	beq.n	1130 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    110e:	2200      	movs	r2, #0
    1110:	4b10      	ldr	r3, [pc, #64]	; (1154 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1112:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1114:	4b10      	ldr	r3, [pc, #64]	; (1158 <sd_mmc_wait_end_of_read_blocks+0x60>)
    1116:	881b      	ldrh	r3, [r3, #0]
    1118:	2b01      	cmp	r3, #1
    111a:	d00f      	beq.n	113c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    111c:	2100      	movs	r1, #0
    111e:	480f      	ldr	r0, [pc, #60]	; (115c <sd_mmc_wait_end_of_read_blocks+0x64>)
    1120:	4b0f      	ldr	r3, [pc, #60]	; (1160 <sd_mmc_wait_end_of_read_blocks+0x68>)
    1122:	4798      	blx	r3
    1124:	2800      	cmp	r0, #0
    1126:	d00d      	beq.n	1144 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    1128:	4b0e      	ldr	r3, [pc, #56]	; (1164 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    112a:	4798      	blx	r3
	return SD_MMC_OK;
    112c:	2300      	movs	r3, #0
    112e:	e7ea      	b.n	1106 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1130:	4b08      	ldr	r3, [pc, #32]	; (1154 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1132:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1134:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1136:	2a00      	cmp	r2, #0
    1138:	d0ec      	beq.n	1114 <sd_mmc_wait_end_of_read_blocks+0x1c>
    113a:	e7e4      	b.n	1106 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    113c:	4b09      	ldr	r3, [pc, #36]	; (1164 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    113e:	4798      	blx	r3
		return SD_MMC_OK;
    1140:	2300      	movs	r3, #0
    1142:	e7e0      	b.n	1106 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1144:	2100      	movs	r1, #0
    1146:	4805      	ldr	r0, [pc, #20]	; (115c <sd_mmc_wait_end_of_read_blocks+0x64>)
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <sd_mmc_wait_end_of_read_blocks+0x68>)
    114a:	4798      	blx	r3
    114c:	e7ec      	b.n	1128 <sd_mmc_wait_end_of_read_blocks+0x30>
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00006349 	.word	0x00006349
    1154:	20000180 	.word	0x20000180
    1158:	20000182 	.word	0x20000182
    115c:	0000310c 	.word	0x0000310c
    1160:	00006221 	.word	0x00006221
    1164:	00000b05 	.word	0x00000b05

00001168 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1168:	b570      	push	{r4, r5, r6, lr}
    116a:	b082      	sub	sp, #8
    116c:	000e      	movs	r6, r1
    116e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1170:	4b11      	ldr	r3, [pc, #68]	; (11b8 <sd_mmc_init_write_blocks+0x50>)
    1172:	4798      	blx	r3
    1174:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    1176:	d116      	bne.n	11a6 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    1178:	2d01      	cmp	r5, #1
    117a:	d917      	bls.n	11ac <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    117c:	480f      	ldr	r0, [pc, #60]	; (11bc <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    117e:	4b10      	ldr	r3, [pc, #64]	; (11c0 <sd_mmc_init_write_blocks+0x58>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	7bdb      	ldrb	r3, [r3, #15]
    1184:	071b      	lsls	r3, r3, #28
    1186:	d400      	bmi.n	118a <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1188:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    118a:	2301      	movs	r3, #1
    118c:	9300      	str	r3, [sp, #0]
    118e:	002b      	movs	r3, r5
    1190:	2280      	movs	r2, #128	; 0x80
    1192:	0092      	lsls	r2, r2, #2
    1194:	0031      	movs	r1, r6
    1196:	4e0b      	ldr	r6, [pc, #44]	; (11c4 <sd_mmc_init_write_blocks+0x5c>)
    1198:	47b0      	blx	r6
    119a:	2800      	cmp	r0, #0
    119c:	d008      	beq.n	11b0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    119e:	4b0a      	ldr	r3, [pc, #40]	; (11c8 <sd_mmc_init_write_blocks+0x60>)
    11a0:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <sd_mmc_init_write_blocks+0x64>)
    11a4:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    11a6:	0020      	movs	r0, r4
    11a8:	b002      	add	sp, #8
    11aa:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    11ac:	4808      	ldr	r0, [pc, #32]	; (11d0 <sd_mmc_init_write_blocks+0x68>)
    11ae:	e7e6      	b.n	117e <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    11b0:	4b08      	ldr	r3, [pc, #32]	; (11d4 <sd_mmc_init_write_blocks+0x6c>)
    11b2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11b4:	2405      	movs	r4, #5
    11b6:	e7f6      	b.n	11a6 <sd_mmc_init_write_blocks+0x3e>
    11b8:	00000935 	.word	0x00000935
    11bc:	00109119 	.word	0x00109119
    11c0:	2000017c 	.word	0x2000017c
    11c4:	00006091 	.word	0x00006091
    11c8:	20000180 	.word	0x20000180
    11cc:	20000182 	.word	0x20000182
    11d0:	00089118 	.word	0x00089118
    11d4:	00000b05 	.word	0x00000b05

000011d8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    11d8:	b510      	push	{r4, lr}
    11da:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    11dc:	4b07      	ldr	r3, [pc, #28]	; (11fc <sd_mmc_start_write_blocks+0x24>)
    11de:	4798      	blx	r3
    11e0:	2800      	cmp	r0, #0
    11e2:	d104      	bne.n	11ee <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    11e4:	2200      	movs	r2, #0
    11e6:	4b06      	ldr	r3, [pc, #24]	; (1200 <sd_mmc_start_write_blocks+0x28>)
    11e8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    11ea:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    11ec:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    11ee:	4a04      	ldr	r2, [pc, #16]	; (1200 <sd_mmc_start_write_blocks+0x28>)
    11f0:	8813      	ldrh	r3, [r2, #0]
    11f2:	1b1c      	subs	r4, r3, r4
    11f4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    11f6:	2000      	movs	r0, #0
    11f8:	e7f8      	b.n	11ec <sd_mmc_start_write_blocks+0x14>
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	0000634d 	.word	0x0000634d
    1200:	20000180 	.word	0x20000180

00001204 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1204:	b510      	push	{r4, lr}
    1206:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1208:	4b0e      	ldr	r3, [pc, #56]	; (1244 <sd_mmc_wait_end_of_write_blocks+0x40>)
    120a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    120c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    120e:	2800      	cmp	r0, #0
    1210:	d101      	bne.n	1216 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1212:	0018      	movs	r0, r3
    1214:	bd10      	pop	{r4, pc}
	if (abort) {
    1216:	2c00      	cmp	r4, #0
    1218:	d00a      	beq.n	1230 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    121a:	2200      	movs	r2, #0
    121c:	4b0a      	ldr	r3, [pc, #40]	; (1248 <sd_mmc_wait_end_of_write_blocks+0x44>)
    121e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1220:	4b0a      	ldr	r3, [pc, #40]	; (124c <sd_mmc_wait_end_of_write_blocks+0x48>)
    1222:	881b      	ldrh	r3, [r3, #0]
    1224:	2b01      	cmp	r3, #1
    1226:	d009      	beq.n	123c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1228:	4b09      	ldr	r3, [pc, #36]	; (1250 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    122a:	4798      	blx	r3
	return SD_MMC_OK;
    122c:	2300      	movs	r3, #0
    122e:	e7f0      	b.n	1212 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1230:	4b05      	ldr	r3, [pc, #20]	; (1248 <sd_mmc_wait_end_of_write_blocks+0x44>)
    1232:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1234:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    1236:	2a00      	cmp	r2, #0
    1238:	d0f2      	beq.n	1220 <sd_mmc_wait_end_of_write_blocks+0x1c>
    123a:	e7ea      	b.n	1212 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    123c:	4b04      	ldr	r3, [pc, #16]	; (1250 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    123e:	4798      	blx	r3
		return SD_MMC_OK;
    1240:	2300      	movs	r3, #0
    1242:	e7e6      	b.n	1212 <sd_mmc_wait_end_of_write_blocks+0xe>
    1244:	000063cd 	.word	0x000063cd
    1248:	20000180 	.word	0x20000180
    124c:	20000182 	.word	0x20000182
    1250:	00000b05 	.word	0x00000b05

00001254 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    1254:	2000      	movs	r0, #0
    1256:	4770      	bx	lr

00001258 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
    1258:	1e43      	subs	r3, r0, #1
    125a:	4198      	sbcs	r0, r3
    125c:	b2c0      	uxtb	r0, r0
    125e:	4b03      	ldr	r3, [pc, #12]	; (126c <udi_msc_trans_ack+0x14>)
    1260:	7018      	strb	r0, [r3, #0]
	udi_msc_b_ack_trans = true;
    1262:	2201      	movs	r2, #1
    1264:	4b02      	ldr	r3, [pc, #8]	; (1270 <udi_msc_trans_ack+0x18>)
    1266:	701a      	strb	r2, [r3, #0]
}
    1268:	4770      	bx	lr
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	200002f4 	.word	0x200002f4
    1270:	20000044 	.word	0x20000044

00001274 <udi_msc_cbw_wait>:
{
    1274:	b510      	push	{r4, lr}
    1276:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    1278:	4b08      	ldr	r3, [pc, #32]	; (129c <udi_msc_cbw_wait+0x28>)
    127a:	9300      	str	r3, [sp, #0]
    127c:	231f      	movs	r3, #31
    127e:	4a08      	ldr	r2, [pc, #32]	; (12a0 <udi_msc_cbw_wait+0x2c>)
    1280:	2101      	movs	r1, #1
    1282:	2002      	movs	r0, #2
    1284:	4c07      	ldr	r4, [pc, #28]	; (12a4 <udi_msc_cbw_wait+0x30>)
    1286:	47a0      	blx	r4
    1288:	2800      	cmp	r0, #0
    128a:	d001      	beq.n	1290 <udi_msc_cbw_wait+0x1c>
}
    128c:	b002      	add	sp, #8
    128e:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    1290:	4905      	ldr	r1, [pc, #20]	; (12a8 <udi_msc_cbw_wait+0x34>)
    1292:	3002      	adds	r0, #2
    1294:	4b05      	ldr	r3, [pc, #20]	; (12ac <udi_msc_cbw_wait+0x38>)
    1296:	4798      	blx	r3
}
    1298:	e7f8      	b.n	128c <udi_msc_cbw_wait+0x18>
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	00001699 	.word	0x00001699
    12a0:	200001ac 	.word	0x200001ac
    12a4:	000036e1 	.word	0x000036e1
    12a8:	00001275 	.word	0x00001275
    12ac:	00003689 	.word	0x00003689

000012b0 <udi_msc_enable>:
{
    12b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    12b2:	2300      	movs	r3, #0
    12b4:	4a13      	ldr	r2, [pc, #76]	; (1304 <udi_msc_enable+0x54>)
    12b6:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    12b8:	4a13      	ldr	r2, [pc, #76]	; (1308 <udi_msc_enable+0x58>)
    12ba:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    12bc:	3301      	adds	r3, #1
    12be:	4a13      	ldr	r2, [pc, #76]	; (130c <udi_msc_enable+0x5c>)
    12c0:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    12c2:	4a13      	ldr	r2, [pc, #76]	; (1310 <udi_msc_enable+0x60>)
    12c4:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    12c6:	4b13      	ldr	r3, [pc, #76]	; (1314 <udi_msc_enable+0x64>)
    12c8:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    12ca:	2800      	cmp	r0, #0
    12cc:	d105      	bne.n	12da <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    12ce:	2200      	movs	r2, #0
    12d0:	4b11      	ldr	r3, [pc, #68]	; (1318 <udi_msc_enable+0x68>)
    12d2:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    12d4:	2500      	movs	r5, #0
}
    12d6:	0028      	movs	r0, r5
    12d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    12da:	3801      	subs	r0, #1
    12dc:	4b0e      	ldr	r3, [pc, #56]	; (1318 <udi_msc_enable+0x68>)
    12de:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    12e0:	4b0e      	ldr	r3, [pc, #56]	; (131c <udi_msc_enable+0x6c>)
    12e2:	4798      	blx	r3
    12e4:	1e05      	subs	r5, r0, #0
    12e6:	d0f6      	beq.n	12d6 <udi_msc_enable+0x26>
    12e8:	2400      	movs	r4, #0
		mem_unload(lun, false);
    12ea:	4f0d      	ldr	r7, [pc, #52]	; (1320 <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    12ec:	4e0a      	ldr	r6, [pc, #40]	; (1318 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    12ee:	2100      	movs	r1, #0
    12f0:	0020      	movs	r0, r4
    12f2:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    12f4:	3401      	adds	r4, #1
    12f6:	b2e4      	uxtb	r4, r4
    12f8:	7833      	ldrb	r3, [r6, #0]
    12fa:	42a3      	cmp	r3, r4
    12fc:	d2f7      	bcs.n	12ee <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    12fe:	4b09      	ldr	r3, [pc, #36]	; (1324 <udi_msc_enable+0x74>)
    1300:	4798      	blx	r3
	return true;
    1302:	e7e8      	b.n	12d6 <udi_msc_enable+0x26>
    1304:	200001a2 	.word	0x200001a2
    1308:	200001a0 	.word	0x200001a0
    130c:	20000044 	.word	0x20000044
    1310:	20000045 	.word	0x20000045
    1314:	000063f1 	.word	0x000063f1
    1318:	200001d0 	.word	0x200001d0
    131c:	00003c2d 	.word	0x00003c2d
    1320:	00006429 	.word	0x00006429
    1324:	00001275 	.word	0x00001275

00001328 <udi_msc_csw_sent>:
{
    1328:	b510      	push	{r4, lr}
	udi_msc_cbw_wait();
    132a:	4b01      	ldr	r3, [pc, #4]	; (1330 <udi_msc_csw_sent+0x8>)
    132c:	4798      	blx	r3
}
    132e:	bd10      	pop	{r4, pc}
    1330:	00001275 	.word	0x00001275

00001334 <udi_msc_csw_send>:
{
    1334:	b510      	push	{r4, lr}
    1336:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <udi_msc_csw_send+0x28>)
    133a:	9300      	str	r3, [sp, #0]
    133c:	230d      	movs	r3, #13
    133e:	4a08      	ldr	r2, [pc, #32]	; (1360 <udi_msc_csw_send+0x2c>)
    1340:	2100      	movs	r1, #0
    1342:	2081      	movs	r0, #129	; 0x81
    1344:	4c07      	ldr	r4, [pc, #28]	; (1364 <udi_msc_csw_send+0x30>)
    1346:	47a0      	blx	r4
    1348:	2800      	cmp	r0, #0
    134a:	d001      	beq.n	1350 <udi_msc_csw_send+0x1c>
}
    134c:	b002      	add	sp, #8
    134e:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    1350:	4905      	ldr	r1, [pc, #20]	; (1368 <udi_msc_csw_send+0x34>)
    1352:	3081      	adds	r0, #129	; 0x81
    1354:	4b05      	ldr	r3, [pc, #20]	; (136c <udi_msc_csw_send+0x38>)
    1356:	4798      	blx	r3
}
    1358:	e7f8      	b.n	134c <udi_msc_csw_send+0x18>
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	00001329 	.word	0x00001329
    1360:	20000048 	.word	0x20000048
    1364:	000036e1 	.word	0x000036e1
    1368:	00001335 	.word	0x00001335
    136c:	00003689 	.word	0x00003689

00001370 <udi_msc_cbw_invalid>:
{
    1370:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    1372:	4b06      	ldr	r3, [pc, #24]	; (138c <udi_msc_cbw_invalid+0x1c>)
    1374:	781b      	ldrb	r3, [r3, #0]
    1376:	2b00      	cmp	r3, #0
    1378:	d100      	bne.n	137c <udi_msc_cbw_invalid+0xc>
}
    137a:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    137c:	2002      	movs	r0, #2
    137e:	4b04      	ldr	r3, [pc, #16]	; (1390 <udi_msc_cbw_invalid+0x20>)
    1380:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    1382:	4904      	ldr	r1, [pc, #16]	; (1394 <udi_msc_cbw_invalid+0x24>)
    1384:	2002      	movs	r0, #2
    1386:	4b04      	ldr	r3, [pc, #16]	; (1398 <udi_msc_cbw_invalid+0x28>)
    1388:	4798      	blx	r3
    138a:	e7f6      	b.n	137a <udi_msc_cbw_invalid+0xa>
    138c:	200001a0 	.word	0x200001a0
    1390:	00003515 	.word	0x00003515
    1394:	00001371 	.word	0x00001371
    1398:	00003689 	.word	0x00003689

0000139c <udi_msc_csw_invalid>:
{
    139c:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    139e:	4b06      	ldr	r3, [pc, #24]	; (13b8 <udi_msc_csw_invalid+0x1c>)
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	2b00      	cmp	r3, #0
    13a4:	d100      	bne.n	13a8 <udi_msc_csw_invalid+0xc>
}
    13a6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    13a8:	2081      	movs	r0, #129	; 0x81
    13aa:	4b04      	ldr	r3, [pc, #16]	; (13bc <udi_msc_csw_invalid+0x20>)
    13ac:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    13ae:	4904      	ldr	r1, [pc, #16]	; (13c0 <udi_msc_csw_invalid+0x24>)
    13b0:	2081      	movs	r0, #129	; 0x81
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <udi_msc_csw_invalid+0x28>)
    13b4:	4798      	blx	r3
    13b6:	e7f6      	b.n	13a6 <udi_msc_csw_invalid+0xa>
    13b8:	200001a0 	.word	0x200001a0
    13bc:	00003515 	.word	0x00003515
    13c0:	0000139d 	.word	0x0000139d
    13c4:	00003689 	.word	0x00003689

000013c8 <udi_msc_csw_process>:
{
    13c8:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    13ca:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <udi_msc_csw_process+0x30>)
    13cc:	689b      	ldr	r3, [r3, #8]
    13ce:	2b00      	cmp	r3, #0
    13d0:	d006      	beq.n	13e0 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <udi_msc_csw_process+0x34>)
    13d4:	7b1b      	ldrb	r3, [r3, #12]
    13d6:	2b7f      	cmp	r3, #127	; 0x7f
    13d8:	d809      	bhi.n	13ee <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    13da:	2002      	movs	r0, #2
    13dc:	4b08      	ldr	r3, [pc, #32]	; (1400 <udi_msc_csw_process+0x38>)
    13de:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    13e0:	4b06      	ldr	r3, [pc, #24]	; (13fc <udi_msc_csw_process+0x34>)
    13e2:	685a      	ldr	r2, [r3, #4]
    13e4:	4b04      	ldr	r3, [pc, #16]	; (13f8 <udi_msc_csw_process+0x30>)
    13e6:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    13e8:	4b06      	ldr	r3, [pc, #24]	; (1404 <udi_msc_csw_process+0x3c>)
    13ea:	4798      	blx	r3
}
    13ec:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    13ee:	2081      	movs	r0, #129	; 0x81
    13f0:	4b03      	ldr	r3, [pc, #12]	; (1400 <udi_msc_csw_process+0x38>)
    13f2:	4798      	blx	r3
    13f4:	e7f4      	b.n	13e0 <udi_msc_csw_process+0x18>
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	20000048 	.word	0x20000048
    13fc:	200001ac 	.word	0x200001ac
    1400:	00003515 	.word	0x00003515
    1404:	00001335 	.word	0x00001335

00001408 <udi_msc_clear_sense>:
{
    1408:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    140a:	4c05      	ldr	r4, [pc, #20]	; (1420 <udi_msc_clear_sense+0x18>)
    140c:	2212      	movs	r2, #18
    140e:	2100      	movs	r1, #0
    1410:	0020      	movs	r0, r4
    1412:	4b04      	ldr	r3, [pc, #16]	; (1424 <udi_msc_clear_sense+0x1c>)
    1414:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    1416:	23f0      	movs	r3, #240	; 0xf0
    1418:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    141a:	3be6      	subs	r3, #230	; 0xe6
    141c:	71e3      	strb	r3, [r4, #7]
}
    141e:	bd10      	pop	{r4, pc}
    1420:	200001d4 	.word	0x200001d4
    1424:	0000704b 	.word	0x0000704b

00001428 <udi_msc_sense_fail>:
{
    1428:	b570      	push	{r4, r5, r6, lr}
    142a:	0006      	movs	r6, r0
    142c:	000d      	movs	r5, r1
    142e:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <udi_msc_sense_fail+0x2c>)
    1432:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    1434:	2201      	movs	r2, #1
    1436:	4b08      	ldr	r3, [pc, #32]	; (1458 <udi_msc_sense_fail+0x30>)
    1438:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    143a:	4b08      	ldr	r3, [pc, #32]	; (145c <udi_msc_sense_fail+0x34>)
    143c:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    143e:	0e22      	lsrs	r2, r4, #24
    1440:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    1442:	0c22      	lsrs	r2, r4, #16
    1444:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    1446:	0a22      	lsrs	r2, r4, #8
    1448:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    144a:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    144c:	0a2a      	lsrs	r2, r5, #8
    144e:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    1450:	735d      	strb	r5, [r3, #13]
}
    1452:	bd70      	pop	{r4, r5, r6, pc}
    1454:	00001409 	.word	0x00001409
    1458:	20000048 	.word	0x20000048
    145c:	200001d4 	.word	0x200001d4

00001460 <udi_msc_sense_fail_cdb_invalid>:
{
    1460:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1462:	2200      	movs	r2, #0
    1464:	2190      	movs	r1, #144	; 0x90
    1466:	0189      	lsls	r1, r1, #6
    1468:	2005      	movs	r0, #5
    146a:	4b01      	ldr	r3, [pc, #4]	; (1470 <udi_msc_sense_fail_cdb_invalid+0x10>)
    146c:	4798      	blx	r3
}
    146e:	bd10      	pop	{r4, pc}
    1470:	00001429 	.word	0x00001429

00001474 <udi_msc_cbw_validate>:
{
    1474:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <udi_msc_cbw_validate+0x28>)
    1478:	7b1b      	ldrb	r3, [r3, #12]
    147a:	4059      	eors	r1, r3
    147c:	b249      	sxtb	r1, r1
    147e:	2900      	cmp	r1, #0
    1480:	db04      	blt.n	148c <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    1482:	4b07      	ldr	r3, [pc, #28]	; (14a0 <udi_msc_cbw_validate+0x2c>)
    1484:	689a      	ldr	r2, [r3, #8]
	return true;
    1486:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    1488:	4282      	cmp	r2, r0
    148a:	d204      	bcs.n	1496 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <udi_msc_cbw_validate+0x30>)
    148e:	4798      	blx	r3
		udi_msc_csw_process();
    1490:	4b05      	ldr	r3, [pc, #20]	; (14a8 <udi_msc_cbw_validate+0x34>)
    1492:	4798      	blx	r3
		return false;
    1494:	2300      	movs	r3, #0
}
    1496:	0018      	movs	r0, r3
    1498:	bd10      	pop	{r4, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	200001ac 	.word	0x200001ac
    14a0:	20000048 	.word	0x20000048
    14a4:	00001461 	.word	0x00001461
    14a8:	000013c9 	.word	0x000013c9

000014ac <udi_msc_sense_fail_hardware>:
{
    14ac:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    14ae:	2200      	movs	r2, #0
    14b0:	2100      	movs	r1, #0
    14b2:	2004      	movs	r0, #4
    14b4:	4b01      	ldr	r3, [pc, #4]	; (14bc <udi_msc_sense_fail_hardware+0x10>)
    14b6:	4798      	blx	r3
}
    14b8:	bd10      	pop	{r4, pc}
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	00001429 	.word	0x00001429

000014c0 <udi_msc_data_send>:
{
    14c0:	b510      	push	{r4, lr}
    14c2:	b082      	sub	sp, #8
    14c4:	0002      	movs	r2, r0
    14c6:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    14c8:	4907      	ldr	r1, [pc, #28]	; (14e8 <udi_msc_data_send+0x28>)
    14ca:	9100      	str	r1, [sp, #0]
    14cc:	2101      	movs	r1, #1
    14ce:	2081      	movs	r0, #129	; 0x81
    14d0:	4c06      	ldr	r4, [pc, #24]	; (14ec <udi_msc_data_send+0x2c>)
    14d2:	47a0      	blx	r4
    14d4:	2800      	cmp	r0, #0
    14d6:	d001      	beq.n	14dc <udi_msc_data_send+0x1c>
}
    14d8:	b002      	add	sp, #8
    14da:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    14dc:	4b04      	ldr	r3, [pc, #16]	; (14f0 <udi_msc_data_send+0x30>)
    14de:	4798      	blx	r3
		udi_msc_csw_process();
    14e0:	4b04      	ldr	r3, [pc, #16]	; (14f4 <udi_msc_data_send+0x34>)
    14e2:	4798      	blx	r3
}
    14e4:	e7f8      	b.n	14d8 <udi_msc_data_send+0x18>
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	00001539 	.word	0x00001539
    14ec:	000036e1 	.word	0x000036e1
    14f0:	000014ad 	.word	0x000014ad
    14f4:	000013c9 	.word	0x000013c9

000014f8 <udi_msc_sense_fail_busy_or_change>:
{
    14f8:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    14fa:	2200      	movs	r2, #0
    14fc:	21a0      	movs	r1, #160	; 0xa0
    14fe:	0189      	lsls	r1, r1, #6
    1500:	2006      	movs	r0, #6
    1502:	4b01      	ldr	r3, [pc, #4]	; (1508 <udi_msc_sense_fail_busy_or_change+0x10>)
    1504:	4798      	blx	r3
}
    1506:	bd10      	pop	{r4, pc}
    1508:	00001429 	.word	0x00001429

0000150c <udi_msc_sense_fail_not_present>:
{
    150c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    150e:	2200      	movs	r2, #0
    1510:	21e8      	movs	r1, #232	; 0xe8
    1512:	0189      	lsls	r1, r1, #6
    1514:	2002      	movs	r0, #2
    1516:	4b01      	ldr	r3, [pc, #4]	; (151c <udi_msc_sense_fail_not_present+0x10>)
    1518:	4798      	blx	r3
}
    151a:	bd10      	pop	{r4, pc}
    151c:	00001429 	.word	0x00001429

00001520 <udi_msc_sense_pass>:
{
    1520:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    1522:	4b03      	ldr	r3, [pc, #12]	; (1530 <udi_msc_sense_pass+0x10>)
    1524:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1526:	2200      	movs	r2, #0
    1528:	4b02      	ldr	r3, [pc, #8]	; (1534 <udi_msc_sense_pass+0x14>)
    152a:	731a      	strb	r2, [r3, #12]
}
    152c:	bd10      	pop	{r4, pc}
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	00001409 	.word	0x00001409
    1534:	20000048 	.word	0x20000048

00001538 <udi_msc_data_sent>:
{
    1538:	b510      	push	{r4, lr}
    153a:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    153c:	2800      	cmp	r0, #0
    153e:	d000      	beq.n	1542 <udi_msc_data_sent+0xa>
}
    1540:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    1542:	4b04      	ldr	r3, [pc, #16]	; (1554 <udi_msc_data_sent+0x1c>)
    1544:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    1546:	4b04      	ldr	r3, [pc, #16]	; (1558 <udi_msc_data_sent+0x20>)
    1548:	689a      	ldr	r2, [r3, #8]
    154a:	1b14      	subs	r4, r2, r4
    154c:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    154e:	4b03      	ldr	r3, [pc, #12]	; (155c <udi_msc_data_sent+0x24>)
    1550:	4798      	blx	r3
    1552:	e7f5      	b.n	1540 <udi_msc_data_sent+0x8>
    1554:	00001521 	.word	0x00001521
    1558:	20000048 	.word	0x20000048
    155c:	000013c9 	.word	0x000013c9

00001560 <udi_msc_spc_mode_sense>:
{
    1560:	b570      	push	{r4, r5, r6, lr}
    1562:	0005      	movs	r5, r0
	memset(&sense, 0, sizeof(sense));
    1564:	2214      	movs	r2, #20
    1566:	2100      	movs	r1, #0
    1568:	4823      	ldr	r0, [pc, #140]	; (15f8 <udi_msc_spc_mode_sense+0x98>)
    156a:	4b24      	ldr	r3, [pc, #144]	; (15fc <udi_msc_spc_mode_sense+0x9c>)
    156c:	4798      	blx	r3
	if (b_sense10) {
    156e:	2d00      	cmp	r5, #0
    1570:	d018      	beq.n	15a4 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    1572:	4b23      	ldr	r3, [pc, #140]	; (1600 <udi_msc_spc_mode_sense+0xa0>)
    1574:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    1576:	4a20      	ldr	r2, [pc, #128]	; (15f8 <udi_msc_spc_mode_sense+0x98>)
    1578:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    157a:	2408      	movs	r4, #8
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    157c:	4b20      	ldr	r3, [pc, #128]	; (1600 <udi_msc_spc_mode_sense+0xa0>)
    157e:	7c58      	ldrb	r0, [r3, #17]
    1580:	233f      	movs	r3, #63	; 0x3f
    1582:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    1584:	2b1c      	cmp	r3, #28
    1586:	d013      	beq.n	15b0 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    1588:	2b3f      	cmp	r3, #63	; 0x3f
    158a:	d011      	beq.n	15b0 <udi_msc_spc_mode_sense+0x50>
    158c:	1c20      	adds	r0, r4, #0
    158e:	428c      	cmp	r4, r1
    1590:	d900      	bls.n	1594 <udi_msc_spc_mode_sense+0x34>
    1592:	1c08      	adds	r0, r1, #0
    1594:	b2c6      	uxtb	r6, r0
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    1596:	2180      	movs	r1, #128	; 0x80
    1598:	0030      	movs	r0, r6
    159a:	4b1a      	ldr	r3, [pc, #104]	; (1604 <udi_msc_spc_mode_sense+0xa4>)
    159c:	4798      	blx	r3
    159e:	2800      	cmp	r0, #0
    15a0:	d10f      	bne.n	15c2 <udi_msc_spc_mode_sense+0x62>
}
    15a2:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    15a4:	4b16      	ldr	r3, [pc, #88]	; (1600 <udi_msc_spc_mode_sense+0xa0>)
    15a6:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    15a8:	4a13      	ldr	r2, [pc, #76]	; (15f8 <udi_msc_spc_mode_sense+0x98>)
    15aa:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    15ac:	2404      	movs	r4, #4
    15ae:	e7e5      	b.n	157c <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    15b0:	231c      	movs	r3, #28
    15b2:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    15b4:	3b12      	subs	r3, #18
    15b6:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    15b8:	3b05      	subs	r3, #5
    15ba:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    15bc:	340c      	adds	r4, #12
    15be:	b2e4      	uxtb	r4, r4
    15c0:	e7e4      	b.n	158c <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    15c2:	4b0f      	ldr	r3, [pc, #60]	; (1600 <udi_msc_spc_mode_sense+0xa0>)
    15c4:	7b58      	ldrb	r0, [r3, #13]
    15c6:	4b10      	ldr	r3, [pc, #64]	; (1608 <udi_msc_spc_mode_sense+0xa8>)
    15c8:	4798      	blx	r3
    15ca:	1e43      	subs	r3, r0, #1
    15cc:	4198      	sbcs	r0, r3
    15ce:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    15d0:	2d00      	cmp	r5, #0
    15d2:	d00c      	beq.n	15ee <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    15d4:	3c02      	subs	r4, #2
    15d6:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    15d8:	4a07      	ldr	r2, [pc, #28]	; (15f8 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    15da:	0a23      	lsrs	r3, r4, #8
    15dc:	0224      	lsls	r4, r4, #8
    15de:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    15e0:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    15e2:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    15e4:	0031      	movs	r1, r6
    15e6:	4804      	ldr	r0, [pc, #16]	; (15f8 <udi_msc_spc_mode_sense+0x98>)
    15e8:	4b08      	ldr	r3, [pc, #32]	; (160c <udi_msc_spc_mode_sense+0xac>)
    15ea:	4798      	blx	r3
    15ec:	e7d9      	b.n	15a2 <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    15ee:	4b02      	ldr	r3, [pc, #8]	; (15f8 <udi_msc_spc_mode_sense+0x98>)
    15f0:	3c01      	subs	r4, #1
    15f2:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    15f4:	7098      	strb	r0, [r3, #2]
    15f6:	e7f5      	b.n	15e4 <udi_msc_spc_mode_sense+0x84>
    15f8:	20000188 	.word	0x20000188
    15fc:	0000704b 	.word	0x0000704b
    1600:	200001ac 	.word	0x200001ac
    1604:	00001475 	.word	0x00001475
    1608:	00006439 	.word	0x00006439
    160c:	000014c1 	.word	0x000014c1

00001610 <udi_msc_sbc_trans>:
{
    1610:	b510      	push	{r4, lr}
    1612:	1e04      	subs	r4, r0, #0
	if (!b_read) {
    1614:	d01e      	beq.n	1654 <udi_msc_sbc_trans+0x44>
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1616:	4a17      	ldr	r2, [pc, #92]	; (1674 <udi_msc_sbc_trans+0x64>)
    1618:	4b17      	ldr	r3, [pc, #92]	; (1678 <udi_msc_sbc_trans+0x68>)
    161a:	7c59      	ldrb	r1, [r3, #17]
    161c:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    161e:	7c99      	ldrb	r1, [r3, #18]
    1620:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    1622:	7cd9      	ldrb	r1, [r3, #19]
    1624:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1626:	7d19      	ldrb	r1, [r3, #20]
    1628:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    162a:	4a14      	ldr	r2, [pc, #80]	; (167c <udi_msc_sbc_trans+0x6c>)
    162c:	7d99      	ldrb	r1, [r3, #22]
    162e:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    1630:	7ddb      	ldrb	r3, [r3, #23]
    1632:	7013      	strb	r3, [r2, #0]
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1634:	8810      	ldrh	r0, [r2, #0]
    1636:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    1638:	0021      	movs	r1, r4
    163a:	1e4b      	subs	r3, r1, #1
    163c:	4199      	sbcs	r1, r3
    163e:	01c9      	lsls	r1, r1, #7
    1640:	4b0f      	ldr	r3, [pc, #60]	; (1680 <udi_msc_sbc_trans+0x70>)
    1642:	4798      	blx	r3
    1644:	2800      	cmp	r0, #0
    1646:	d004      	beq.n	1652 <udi_msc_sbc_trans+0x42>
	udi_msc_b_read = b_read;
    1648:	4b0e      	ldr	r3, [pc, #56]	; (1684 <udi_msc_sbc_trans+0x74>)
    164a:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    164c:	2201      	movs	r2, #1
    164e:	4b0e      	ldr	r3, [pc, #56]	; (1688 <udi_msc_sbc_trans+0x78>)
    1650:	701a      	strb	r2, [r3, #0]
}
    1652:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    1654:	4b08      	ldr	r3, [pc, #32]	; (1678 <udi_msc_sbc_trans+0x68>)
    1656:	7b58      	ldrb	r0, [r3, #13]
    1658:	4b0c      	ldr	r3, [pc, #48]	; (168c <udi_msc_sbc_trans+0x7c>)
    165a:	4798      	blx	r3
    165c:	2800      	cmp	r0, #0
    165e:	d0da      	beq.n	1616 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    1660:	2200      	movs	r2, #0
    1662:	219c      	movs	r1, #156	; 0x9c
    1664:	0189      	lsls	r1, r1, #6
    1666:	2007      	movs	r0, #7
    1668:	4b09      	ldr	r3, [pc, #36]	; (1690 <udi_msc_sbc_trans+0x80>)
    166a:	4798      	blx	r3
			udi_msc_csw_process();
    166c:	4b09      	ldr	r3, [pc, #36]	; (1694 <udi_msc_sbc_trans+0x84>)
    166e:	4798      	blx	r3
			return;
    1670:	e7ef      	b.n	1652 <udi_msc_sbc_trans+0x42>
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	2000019c 	.word	0x2000019c
    1678:	200001ac 	.word	0x200001ac
    167c:	200001cc 	.word	0x200001cc
    1680:	00001475 	.word	0x00001475
    1684:	200001a1 	.word	0x200001a1
    1688:	200001a2 	.word	0x200001a2
    168c:	00006439 	.word	0x00006439
    1690:	00001429 	.word	0x00001429
    1694:	000013c9 	.word	0x000013c9

00001698 <udi_msc_cbw_received>:
{
    1698:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    169a:	2800      	cmp	r0, #0
    169c:	d10d      	bne.n	16ba <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    169e:	291f      	cmp	r1, #31
    16a0:	d104      	bne.n	16ac <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    16a2:	4b84      	ldr	r3, [pc, #528]	; (18b4 <udi_msc_cbw_received+0x21c>)
    16a4:	4a84      	ldr	r2, [pc, #528]	; (18b8 <udi_msc_cbw_received+0x220>)
    16a6:	6812      	ldr	r2, [r2, #0]
    16a8:	429a      	cmp	r2, r3
    16aa:	d007      	beq.n	16bc <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    16ac:	2201      	movs	r2, #1
    16ae:	4b83      	ldr	r3, [pc, #524]	; (18bc <udi_msc_cbw_received+0x224>)
    16b0:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    16b2:	4b83      	ldr	r3, [pc, #524]	; (18c0 <udi_msc_cbw_received+0x228>)
    16b4:	4798      	blx	r3
		udi_msc_csw_invalid();
    16b6:	4b83      	ldr	r3, [pc, #524]	; (18c4 <udi_msc_cbw_received+0x22c>)
    16b8:	4798      	blx	r3
}
    16ba:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    16bc:	4b7e      	ldr	r3, [pc, #504]	; (18b8 <udi_msc_cbw_received+0x220>)
    16be:	7b58      	ldrb	r0, [r3, #13]
    16c0:	220f      	movs	r2, #15
    16c2:	4010      	ands	r0, r2
    16c4:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    16c6:	4b80      	ldr	r3, [pc, #512]	; (18c8 <udi_msc_cbw_received+0x230>)
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	4283      	cmp	r3, r0
    16cc:	d30b      	bcc.n	16e6 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    16ce:	4b7a      	ldr	r3, [pc, #488]	; (18b8 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    16d0:	4a7e      	ldr	r2, [pc, #504]	; (18cc <udi_msc_cbw_received+0x234>)
    16d2:	6899      	ldr	r1, [r3, #8]
    16d4:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    16d6:	7bda      	ldrb	r2, [r3, #15]
    16d8:	2a5a      	cmp	r2, #90	; 0x5a
    16da:	d900      	bls.n	16de <udi_msc_cbw_received+0x46>
    16dc:	e0d2      	b.n	1884 <udi_msc_cbw_received+0x1ec>
    16de:	0093      	lsls	r3, r2, #2
    16e0:	4a7b      	ldr	r2, [pc, #492]	; (18d0 <udi_msc_cbw_received+0x238>)
    16e2:	58d3      	ldr	r3, [r2, r3]
    16e4:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    16e6:	4b7b      	ldr	r3, [pc, #492]	; (18d4 <udi_msc_cbw_received+0x23c>)
    16e8:	4798      	blx	r3
		udi_msc_csw_process();
    16ea:	4b7b      	ldr	r3, [pc, #492]	; (18d8 <udi_msc_cbw_received+0x240>)
    16ec:	4798      	blx	r3
		return;
    16ee:	e7e4      	b.n	16ba <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    16f0:	4b71      	ldr	r3, [pc, #452]	; (18b8 <udi_msc_cbw_received+0x220>)
    16f2:	7cda      	ldrb	r2, [r3, #19]
    16f4:	1c13      	adds	r3, r2, #0
    16f6:	2a12      	cmp	r2, #18
    16f8:	d900      	bls.n	16fc <udi_msc_cbw_received+0x64>
    16fa:	2312      	movs	r3, #18
    16fc:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    16fe:	2180      	movs	r1, #128	; 0x80
    1700:	0020      	movs	r0, r4
    1702:	4b76      	ldr	r3, [pc, #472]	; (18dc <udi_msc_cbw_received+0x244>)
    1704:	4798      	blx	r3
    1706:	2800      	cmp	r0, #0
    1708:	d0d7      	beq.n	16ba <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    170a:	0021      	movs	r1, r4
    170c:	4874      	ldr	r0, [pc, #464]	; (18e0 <udi_msc_cbw_received+0x248>)
    170e:	4b75      	ldr	r3, [pc, #468]	; (18e4 <udi_msc_cbw_received+0x24c>)
    1710:	4798      	blx	r3
    1712:	e7d2      	b.n	16ba <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1714:	4b68      	ldr	r3, [pc, #416]	; (18b8 <udi_msc_cbw_received+0x220>)
    1716:	7cdb      	ldrb	r3, [r3, #19]
    1718:	1c1a      	adds	r2, r3, #0
    171a:	2b24      	cmp	r3, #36	; 0x24
    171c:	d900      	bls.n	1720 <udi_msc_cbw_received+0x88>
    171e:	2224      	movs	r2, #36	; 0x24
    1720:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1722:	2180      	movs	r1, #128	; 0x80
    1724:	0020      	movs	r0, r4
    1726:	4b6d      	ldr	r3, [pc, #436]	; (18dc <udi_msc_cbw_received+0x244>)
    1728:	4798      	blx	r3
    172a:	2800      	cmp	r0, #0
    172c:	d0c5      	beq.n	16ba <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    172e:	4b62      	ldr	r3, [pc, #392]	; (18b8 <udi_msc_cbw_received+0x220>)
    1730:	7c1b      	ldrb	r3, [r3, #16]
    1732:	079b      	lsls	r3, r3, #30
    1734:	d103      	bne.n	173e <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    1736:	4b60      	ldr	r3, [pc, #384]	; (18b8 <udi_msc_cbw_received+0x220>)
    1738:	7c5d      	ldrb	r5, [r3, #17]
    173a:	2d00      	cmp	r5, #0
    173c:	d004      	beq.n	1748 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    173e:	4b65      	ldr	r3, [pc, #404]	; (18d4 <udi_msc_cbw_received+0x23c>)
    1740:	4798      	blx	r3
		udi_msc_csw_process();
    1742:	4b65      	ldr	r3, [pc, #404]	; (18d8 <udi_msc_cbw_received+0x240>)
    1744:	4798      	blx	r3
    1746:	e7b8      	b.n	16ba <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    1748:	4b5b      	ldr	r3, [pc, #364]	; (18b8 <udi_msc_cbw_received+0x220>)
    174a:	7b58      	ldrb	r0, [r3, #13]
    174c:	4b66      	ldr	r3, [pc, #408]	; (18e8 <udi_msc_cbw_received+0x250>)
    174e:	4798      	blx	r3
    1750:	2380      	movs	r3, #128	; 0x80
    1752:	2800      	cmp	r0, #0
    1754:	d100      	bne.n	1758 <udi_msc_cbw_received+0xc0>
    1756:	002b      	movs	r3, r5
    1758:	4e64      	ldr	r6, [pc, #400]	; (18ec <udi_msc_cbw_received+0x254>)
    175a:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    175c:	4b56      	ldr	r3, [pc, #344]	; (18b8 <udi_msc_cbw_received+0x220>)
    175e:	7b58      	ldrb	r0, [r3, #13]
    1760:	4b63      	ldr	r3, [pc, #396]	; (18f0 <udi_msc_cbw_received+0x258>)
    1762:	4798      	blx	r3
    1764:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    1766:	0030      	movs	r0, r6
    1768:	3010      	adds	r0, #16
    176a:	3101      	adds	r1, #1
    176c:	2210      	movs	r2, #16
    176e:	4b61      	ldr	r3, [pc, #388]	; (18f4 <udi_msc_cbw_received+0x25c>)
    1770:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    1772:	7c33      	ldrb	r3, [r6, #16]
    1774:	2b00      	cmp	r3, #0
    1776:	d100      	bne.n	177a <udi_msc_cbw_received+0xe2>
    1778:	e08e      	b.n	1898 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    177a:	2b22      	cmp	r3, #34	; 0x22
    177c:	d100      	bne.n	1780 <udi_msc_cbw_received+0xe8>
    177e:	e08a      	b.n	1896 <udi_msc_cbw_received+0x1fe>
    1780:	495a      	ldr	r1, [pc, #360]	; (18ec <udi_msc_cbw_received+0x254>)
		i++;
    1782:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    1784:	7c4a      	ldrb	r2, [r1, #17]
    1786:	2a00      	cmp	r2, #0
    1788:	d100      	bne.n	178c <udi_msc_cbw_received+0xf4>
    178a:	e085      	b.n	1898 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    178c:	2a22      	cmp	r2, #34	; 0x22
    178e:	d100      	bne.n	1792 <udi_msc_cbw_received+0xfa>
    1790:	e082      	b.n	1898 <udi_msc_cbw_received+0x200>
		i++;
    1792:	3301      	adds	r3, #1
    1794:	b2db      	uxtb	r3, r3
    1796:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1798:	2b10      	cmp	r3, #16
    179a:	d1f3      	bne.n	1784 <udi_msc_cbw_received+0xec>
    179c:	e084      	b.n	18a8 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    179e:	2000      	movs	r0, #0
    17a0:	4b55      	ldr	r3, [pc, #340]	; (18f8 <udi_msc_cbw_received+0x260>)
    17a2:	4798      	blx	r3
		break;
    17a4:	e789      	b.n	16ba <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    17a6:	2001      	movs	r0, #1
    17a8:	4b53      	ldr	r3, [pc, #332]	; (18f8 <udi_msc_cbw_received+0x260>)
    17aa:	4798      	blx	r3
		break;
    17ac:	e785      	b.n	16ba <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    17ae:	4b53      	ldr	r3, [pc, #332]	; (18fc <udi_msc_cbw_received+0x264>)
    17b0:	4798      	blx	r3
    17b2:	2802      	cmp	r0, #2
    17b4:	d009      	beq.n	17ca <udi_msc_cbw_received+0x132>
    17b6:	2803      	cmp	r0, #3
    17b8:	d004      	beq.n	17c4 <udi_msc_cbw_received+0x12c>
    17ba:	2800      	cmp	r0, #0
    17bc:	d008      	beq.n	17d0 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    17be:	4b50      	ldr	r3, [pc, #320]	; (1900 <udi_msc_cbw_received+0x268>)
    17c0:	4798      	blx	r3
    17c2:	e007      	b.n	17d4 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    17c4:	4b4f      	ldr	r3, [pc, #316]	; (1904 <udi_msc_cbw_received+0x26c>)
    17c6:	4798      	blx	r3
    17c8:	e004      	b.n	17d4 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    17ca:	4b4f      	ldr	r3, [pc, #316]	; (1908 <udi_msc_cbw_received+0x270>)
    17cc:	4798      	blx	r3
    17ce:	e001      	b.n	17d4 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    17d0:	4b4e      	ldr	r3, [pc, #312]	; (190c <udi_msc_cbw_received+0x274>)
    17d2:	4798      	blx	r3
	udi_msc_csw_process();
    17d4:	4b40      	ldr	r3, [pc, #256]	; (18d8 <udi_msc_cbw_received+0x240>)
    17d6:	4798      	blx	r3
    17d8:	e76f      	b.n	16ba <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    17da:	2180      	movs	r1, #128	; 0x80
    17dc:	2008      	movs	r0, #8
    17de:	4b3f      	ldr	r3, [pc, #252]	; (18dc <udi_msc_cbw_received+0x244>)
    17e0:	4798      	blx	r3
    17e2:	2800      	cmp	r0, #0
    17e4:	d100      	bne.n	17e8 <udi_msc_cbw_received+0x150>
    17e6:	e768      	b.n	16ba <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    17e8:	4b33      	ldr	r3, [pc, #204]	; (18b8 <udi_msc_cbw_received+0x220>)
    17ea:	7b58      	ldrb	r0, [r3, #13]
    17ec:	4948      	ldr	r1, [pc, #288]	; (1910 <udi_msc_cbw_received+0x278>)
    17ee:	4b49      	ldr	r3, [pc, #292]	; (1914 <udi_msc_cbw_received+0x27c>)
    17f0:	4798      	blx	r3
    17f2:	2802      	cmp	r0, #2
    17f4:	d00d      	beq.n	1812 <udi_msc_cbw_received+0x17a>
    17f6:	2803      	cmp	r0, #3
    17f8:	d006      	beq.n	1808 <udi_msc_cbw_received+0x170>
    17fa:	2800      	cmp	r0, #0
    17fc:	d00e      	beq.n	181c <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    17fe:	4b40      	ldr	r3, [pc, #256]	; (1900 <udi_msc_cbw_received+0x268>)
    1800:	4798      	blx	r3
		udi_msc_csw_process();
    1802:	4b35      	ldr	r3, [pc, #212]	; (18d8 <udi_msc_cbw_received+0x240>)
    1804:	4798      	blx	r3
    1806:	e758      	b.n	16ba <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1808:	4b3e      	ldr	r3, [pc, #248]	; (1904 <udi_msc_cbw_received+0x26c>)
    180a:	4798      	blx	r3
		udi_msc_csw_process();
    180c:	4b32      	ldr	r3, [pc, #200]	; (18d8 <udi_msc_cbw_received+0x240>)
    180e:	4798      	blx	r3
    1810:	e753      	b.n	16ba <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    1812:	4b3d      	ldr	r3, [pc, #244]	; (1908 <udi_msc_cbw_received+0x270>)
    1814:	4798      	blx	r3
		udi_msc_csw_process();
    1816:	4b30      	ldr	r3, [pc, #192]	; (18d8 <udi_msc_cbw_received+0x240>)
    1818:	4798      	blx	r3
    181a:	e74e      	b.n	16ba <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    181c:	483c      	ldr	r0, [pc, #240]	; (1910 <udi_msc_cbw_received+0x278>)
    181e:	2380      	movs	r3, #128	; 0x80
    1820:	029b      	lsls	r3, r3, #10
    1822:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1824:	6803      	ldr	r3, [r0, #0]
    1826:	ba1b      	rev	r3, r3
    1828:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    182a:	2108      	movs	r1, #8
    182c:	4b2d      	ldr	r3, [pc, #180]	; (18e4 <udi_msc_cbw_received+0x24c>)
    182e:	4798      	blx	r3
    1830:	e743      	b.n	16ba <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    1832:	4b21      	ldr	r3, [pc, #132]	; (18b8 <udi_msc_cbw_received+0x220>)
    1834:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1836:	079a      	lsls	r2, r3, #30
    1838:	d404      	bmi.n	1844 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    183a:	4b34      	ldr	r3, [pc, #208]	; (190c <udi_msc_cbw_received+0x274>)
    183c:	4798      	blx	r3
	udi_msc_csw_process();
    183e:	4b26      	ldr	r3, [pc, #152]	; (18d8 <udi_msc_cbw_received+0x240>)
    1840:	4798      	blx	r3
    1842:	e73a      	b.n	16ba <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1844:	2101      	movs	r1, #1
    1846:	404b      	eors	r3, r1
    1848:	2101      	movs	r1, #1
    184a:	4019      	ands	r1, r3
    184c:	4b32      	ldr	r3, [pc, #200]	; (1918 <udi_msc_cbw_received+0x280>)
    184e:	4798      	blx	r3
    1850:	e7f3      	b.n	183a <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    1852:	4b19      	ldr	r3, [pc, #100]	; (18b8 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    1854:	7cdb      	ldrb	r3, [r3, #19]
    1856:	2b00      	cmp	r3, #0
    1858:	d004      	beq.n	1864 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    185a:	4b1e      	ldr	r3, [pc, #120]	; (18d4 <udi_msc_cbw_received+0x23c>)
    185c:	4798      	blx	r3
	udi_msc_csw_process();
    185e:	4b1e      	ldr	r3, [pc, #120]	; (18d8 <udi_msc_cbw_received+0x240>)
    1860:	4798      	blx	r3
    1862:	e72a      	b.n	16ba <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    1864:	4b29      	ldr	r3, [pc, #164]	; (190c <udi_msc_cbw_received+0x274>)
    1866:	4798      	blx	r3
    1868:	e7f9      	b.n	185e <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    186a:	4b28      	ldr	r3, [pc, #160]	; (190c <udi_msc_cbw_received+0x274>)
    186c:	4798      	blx	r3
		udi_msc_csw_process();
    186e:	4b1a      	ldr	r3, [pc, #104]	; (18d8 <udi_msc_cbw_received+0x240>)
    1870:	4798      	blx	r3
		break;
    1872:	e722      	b.n	16ba <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    1874:	2001      	movs	r0, #1
    1876:	4b29      	ldr	r3, [pc, #164]	; (191c <udi_msc_cbw_received+0x284>)
    1878:	4798      	blx	r3
		break;
    187a:	e71e      	b.n	16ba <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    187c:	2000      	movs	r0, #0
    187e:	4b27      	ldr	r3, [pc, #156]	; (191c <udi_msc_cbw_received+0x284>)
    1880:	4798      	blx	r3
		break;
    1882:	e71a      	b.n	16ba <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    1884:	2200      	movs	r2, #0
    1886:	2180      	movs	r1, #128	; 0x80
    1888:	0189      	lsls	r1, r1, #6
    188a:	2005      	movs	r0, #5
    188c:	4b24      	ldr	r3, [pc, #144]	; (1920 <udi_msc_cbw_received+0x288>)
    188e:	4798      	blx	r3
		udi_msc_csw_process();
    1890:	4b11      	ldr	r3, [pc, #68]	; (18d8 <udi_msc_cbw_received+0x240>)
    1892:	4798      	blx	r3
		break;
    1894:	e711      	b.n	16ba <udi_msc_cbw_received+0x22>
	i = 0;
    1896:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    1898:	4814      	ldr	r0, [pc, #80]	; (18ec <udi_msc_cbw_received+0x254>)
    189a:	2120      	movs	r1, #32
    189c:	18c2      	adds	r2, r0, r3
    189e:	7411      	strb	r1, [r2, #16]
		i++;
    18a0:	3301      	adds	r3, #1
    18a2:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    18a4:	2b10      	cmp	r3, #16
    18a6:	d1f9      	bne.n	189c <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    18a8:	0021      	movs	r1, r4
    18aa:	4810      	ldr	r0, [pc, #64]	; (18ec <udi_msc_cbw_received+0x254>)
    18ac:	4b0d      	ldr	r3, [pc, #52]	; (18e4 <udi_msc_cbw_received+0x24c>)
    18ae:	4798      	blx	r3
    18b0:	e703      	b.n	16ba <udi_msc_cbw_received+0x22>
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	43425355 	.word	0x43425355
    18b8:	200001ac 	.word	0x200001ac
    18bc:	200001a0 	.word	0x200001a0
    18c0:	00001371 	.word	0x00001371
    18c4:	0000139d 	.word	0x0000139d
    18c8:	200001d0 	.word	0x200001d0
    18cc:	20000048 	.word	0x20000048
    18d0:	00007908 	.word	0x00007908
    18d4:	00001461 	.word	0x00001461
    18d8:	000013c9 	.word	0x000013c9
    18dc:	00001475 	.word	0x00001475
    18e0:	200001d4 	.word	0x200001d4
    18e4:	000014c1 	.word	0x000014c1
    18e8:	00006451 	.word	0x00006451
    18ec:	20000058 	.word	0x20000058
    18f0:	00006469 	.word	0x00006469
    18f4:	00007039 	.word	0x00007039
    18f8:	00001561 	.word	0x00001561
    18fc:	000063f5 	.word	0x000063f5
    1900:	000014ad 	.word	0x000014ad
    1904:	000014f9 	.word	0x000014f9
    1908:	0000150d 	.word	0x0000150d
    190c:	00001521 	.word	0x00001521
    1910:	200001a4 	.word	0x200001a4
    1914:	0000640d 	.word	0x0000640d
    1918:	00006429 	.word	0x00006429
    191c:	00001611 	.word	0x00001611
    1920:	00001429 	.word	0x00001429

00001924 <udi_msc_disable>:
{
    1924:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1926:	2200      	movs	r2, #0
    1928:	4b04      	ldr	r3, [pc, #16]	; (193c <udi_msc_disable+0x18>)
    192a:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    192c:	2301      	movs	r3, #1
    192e:	4a04      	ldr	r2, [pc, #16]	; (1940 <udi_msc_disable+0x1c>)
    1930:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1932:	4a04      	ldr	r2, [pc, #16]	; (1944 <udi_msc_disable+0x20>)
    1934:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1936:	4b04      	ldr	r3, [pc, #16]	; (1948 <udi_msc_disable+0x24>)
    1938:	4798      	blx	r3
}
    193a:	bd10      	pop	{r4, pc}
    193c:	200001a2 	.word	0x200001a2
    1940:	20000044 	.word	0x20000044
    1944:	20000045 	.word	0x20000045
    1948:	00003c3d 	.word	0x00003c3d

0000194c <udi_msc_setup>:
{
    194c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    194e:	4b20      	ldr	r3, [pc, #128]	; (19d0 <udi_msc_setup+0x84>)
    1950:	781a      	ldrb	r2, [r3, #0]
    1952:	b253      	sxtb	r3, r2
    1954:	2b00      	cmp	r3, #0
    1956:	db05      	blt.n	1964 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1958:	2360      	movs	r3, #96	; 0x60
    195a:	4013      	ands	r3, r2
	return false;	// Not supported request
    195c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    195e:	2b20      	cmp	r3, #32
    1960:	d018      	beq.n	1994 <udi_msc_setup+0x48>
}
    1962:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1964:	2360      	movs	r3, #96	; 0x60
    1966:	4013      	ands	r3, r2
	return false;	// Not supported request
    1968:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    196a:	2b20      	cmp	r3, #32
    196c:	d1f9      	bne.n	1962 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    196e:	4b18      	ldr	r3, [pc, #96]	; (19d0 <udi_msc_setup+0x84>)
    1970:	785b      	ldrb	r3, [r3, #1]
    1972:	2bfe      	cmp	r3, #254	; 0xfe
    1974:	d127      	bne.n	19c6 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1976:	4b16      	ldr	r3, [pc, #88]	; (19d0 <udi_msc_setup+0x84>)
    1978:	88db      	ldrh	r3, [r3, #6]
    197a:	2b01      	cmp	r3, #1
    197c:	d1f1      	bne.n	1962 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    197e:	4b14      	ldr	r3, [pc, #80]	; (19d0 <udi_msc_setup+0x84>)
    1980:	885b      	ldrh	r3, [r3, #2]
    1982:	2b00      	cmp	r3, #0
    1984:	d1ed      	bne.n	1962 <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1986:	4b12      	ldr	r3, [pc, #72]	; (19d0 <udi_msc_setup+0x84>)
    1988:	4a12      	ldr	r2, [pc, #72]	; (19d4 <udi_msc_setup+0x88>)
    198a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    198c:	2201      	movs	r2, #1
    198e:	819a      	strh	r2, [r3, #12]
				return true;
    1990:	3001      	adds	r0, #1
    1992:	e7e6      	b.n	1962 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1994:	4b0e      	ldr	r3, [pc, #56]	; (19d0 <udi_msc_setup+0x84>)
    1996:	785b      	ldrb	r3, [r3, #1]
    1998:	2bff      	cmp	r3, #255	; 0xff
    199a:	d116      	bne.n	19ca <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    199c:	4b0c      	ldr	r3, [pc, #48]	; (19d0 <udi_msc_setup+0x84>)
    199e:	88db      	ldrh	r3, [r3, #6]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d1de      	bne.n	1962 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    19a4:	4b0a      	ldr	r3, [pc, #40]	; (19d0 <udi_msc_setup+0x84>)
    19a6:	885b      	ldrh	r3, [r3, #2]
    19a8:	2b00      	cmp	r3, #0
    19aa:	d1da      	bne.n	1962 <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    19ac:	4a0a      	ldr	r2, [pc, #40]	; (19d8 <udi_msc_setup+0x8c>)
    19ae:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    19b0:	4a0a      	ldr	r2, [pc, #40]	; (19dc <udi_msc_setup+0x90>)
    19b2:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    19b4:	3002      	adds	r0, #2
    19b6:	4c0a      	ldr	r4, [pc, #40]	; (19e0 <udi_msc_setup+0x94>)
    19b8:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    19ba:	2081      	movs	r0, #129	; 0x81
    19bc:	47a0      	blx	r4
				udi_msc_cbw_wait();
    19be:	4b09      	ldr	r3, [pc, #36]	; (19e4 <udi_msc_setup+0x98>)
    19c0:	4798      	blx	r3
				return true;
    19c2:	2001      	movs	r0, #1
    19c4:	e7cd      	b.n	1962 <udi_msc_setup+0x16>
	return false;	// Not supported request
    19c6:	2000      	movs	r0, #0
    19c8:	e7cb      	b.n	1962 <udi_msc_setup+0x16>
    19ca:	2000      	movs	r0, #0
    19cc:	e7c9      	b.n	1962 <udi_msc_setup+0x16>
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	20000538 	.word	0x20000538
    19d4:	200001d0 	.word	0x200001d0
    19d8:	200001a0 	.word	0x200001a0
    19dc:	200001a2 	.word	0x200001a2
    19e0:	00003355 	.word	0x00003355
    19e4:	00001275 	.word	0x00001275

000019e8 <udi_msc_process_trans>:
{
    19e8:	b510      	push	{r4, lr}
	if (!udi_msc_b_trans_req)
    19ea:	4b1e      	ldr	r3, [pc, #120]	; (1a64 <udi_msc_process_trans+0x7c>)
    19ec:	781c      	ldrb	r4, [r3, #0]
    19ee:	2c00      	cmp	r4, #0
    19f0:	d030      	beq.n	1a54 <udi_msc_process_trans+0x6c>
	udi_msc_b_trans_req = false;
    19f2:	2300      	movs	r3, #0
    19f4:	4a1b      	ldr	r2, [pc, #108]	; (1a64 <udi_msc_process_trans+0x7c>)
    19f6:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = false;
    19f8:	4a1b      	ldr	r2, [pc, #108]	; (1a68 <udi_msc_process_trans+0x80>)
    19fa:	7013      	strb	r3, [r2, #0]
	if (udi_msc_b_read) {
    19fc:	4b1b      	ldr	r3, [pc, #108]	; (1a6c <udi_msc_process_trans+0x84>)
    19fe:	781b      	ldrb	r3, [r3, #0]
    1a00:	2b00      	cmp	r3, #0
    1a02:	d015      	beq.n	1a30 <udi_msc_process_trans+0x48>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1a04:	4b1a      	ldr	r3, [pc, #104]	; (1a70 <udi_msc_process_trans+0x88>)
    1a06:	881a      	ldrh	r2, [r3, #0]
    1a08:	4b1a      	ldr	r3, [pc, #104]	; (1a74 <udi_msc_process_trans+0x8c>)
    1a0a:	6819      	ldr	r1, [r3, #0]
    1a0c:	4b1a      	ldr	r3, [pc, #104]	; (1a78 <udi_msc_process_trans+0x90>)
    1a0e:	7b58      	ldrb	r0, [r3, #13]
    1a10:	4b1a      	ldr	r3, [pc, #104]	; (1a7c <udi_msc_process_trans+0x94>)
    1a12:	4798      	blx	r3
	if (udi_msc_b_reset_trans) {
    1a14:	4b14      	ldr	r3, [pc, #80]	; (1a68 <udi_msc_process_trans+0x80>)
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	b2db      	uxtb	r3, r3
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d111      	bne.n	1a42 <udi_msc_process_trans+0x5a>
	switch (status) {
    1a1e:	2802      	cmp	r0, #2
    1a20:	d01d      	beq.n	1a5e <udi_msc_process_trans+0x76>
    1a22:	2803      	cmp	r0, #3
    1a24:	d018      	beq.n	1a58 <udi_msc_process_trans+0x70>
    1a26:	2800      	cmp	r0, #0
    1a28:	d010      	beq.n	1a4c <udi_msc_process_trans+0x64>
		udi_msc_sense_fail_hardware();
    1a2a:	4b15      	ldr	r3, [pc, #84]	; (1a80 <udi_msc_process_trans+0x98>)
    1a2c:	4798      	blx	r3
		break;
    1a2e:	e00f      	b.n	1a50 <udi_msc_process_trans+0x68>
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    1a30:	4b0f      	ldr	r3, [pc, #60]	; (1a70 <udi_msc_process_trans+0x88>)
    1a32:	881a      	ldrh	r2, [r3, #0]
    1a34:	4b0f      	ldr	r3, [pc, #60]	; (1a74 <udi_msc_process_trans+0x8c>)
    1a36:	6819      	ldr	r1, [r3, #0]
    1a38:	4b0f      	ldr	r3, [pc, #60]	; (1a78 <udi_msc_process_trans+0x90>)
    1a3a:	7b58      	ldrb	r0, [r3, #13]
    1a3c:	4b11      	ldr	r3, [pc, #68]	; (1a84 <udi_msc_process_trans+0x9c>)
    1a3e:	4798      	blx	r3
    1a40:	e7e8      	b.n	1a14 <udi_msc_process_trans+0x2c>
		udi_msc_b_reset_trans = false;
    1a42:	2100      	movs	r1, #0
    1a44:	4a08      	ldr	r2, [pc, #32]	; (1a68 <udi_msc_process_trans+0x80>)
    1a46:	7011      	strb	r1, [r2, #0]
		return true;
    1a48:	001c      	movs	r4, r3
    1a4a:	e003      	b.n	1a54 <udi_msc_process_trans+0x6c>
		udi_msc_sense_pass();
    1a4c:	4b0e      	ldr	r3, [pc, #56]	; (1a88 <udi_msc_process_trans+0xa0>)
    1a4e:	4798      	blx	r3
	udi_msc_csw_process();
    1a50:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <udi_msc_process_trans+0xa4>)
    1a52:	4798      	blx	r3
}
    1a54:	0020      	movs	r0, r4
    1a56:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_busy_or_change();
    1a58:	4b0d      	ldr	r3, [pc, #52]	; (1a90 <udi_msc_process_trans+0xa8>)
    1a5a:	4798      	blx	r3
		break;
    1a5c:	e7f8      	b.n	1a50 <udi_msc_process_trans+0x68>
		udi_msc_sense_fail_not_present();
    1a5e:	4b0d      	ldr	r3, [pc, #52]	; (1a94 <udi_msc_process_trans+0xac>)
    1a60:	4798      	blx	r3
		break;
    1a62:	e7f5      	b.n	1a50 <udi_msc_process_trans+0x68>
    1a64:	200001a2 	.word	0x200001a2
    1a68:	20000045 	.word	0x20000045
    1a6c:	200001a1 	.word	0x200001a1
    1a70:	200001cc 	.word	0x200001cc
    1a74:	2000019c 	.word	0x2000019c
    1a78:	200001ac 	.word	0x200001ac
    1a7c:	00006479 	.word	0x00006479
    1a80:	000014ad 	.word	0x000014ad
    1a84:	000064ad 	.word	0x000064ad
    1a88:	00001521 	.word	0x00001521
    1a8c:	000013c9 	.word	0x000013c9
    1a90:	000014f9 	.word	0x000014f9
    1a94:	0000150d 	.word	0x0000150d

00001a98 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1a98:	b530      	push	{r4, r5, lr}
    1a9a:	b083      	sub	sp, #12
    1a9c:	0005      	movs	r5, r0
    1a9e:	0014      	movs	r4, r2
	if (!udi_msc_b_ack_trans)
    1aa0:	4a1d      	ldr	r2, [pc, #116]	; (1b18 <udi_msc_trans_block+0x80>)
    1aa2:	7810      	ldrb	r0, [r2, #0]
    1aa4:	b2c0      	uxtb	r0, r0
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d013      	beq.n	1ad2 <udi_msc_trans_block+0x3a>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    1aaa:	2000      	movs	r0, #0
    1aac:	7010      	strb	r0, [r2, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1aae:	3081      	adds	r0, #129	; 0x81
    1ab0:	2d00      	cmp	r5, #0
    1ab2:	d100      	bne.n	1ab6 <udi_msc_trans_block+0x1e>
    1ab4:	387f      	subs	r0, #127	; 0x7f
    1ab6:	2b00      	cmp	r3, #0
    1ab8:	d00d      	beq.n	1ad6 <udi_msc_trans_block+0x3e>
    1aba:	9300      	str	r3, [sp, #0]
    1abc:	0023      	movs	r3, r4
    1abe:	000a      	movs	r2, r1
    1ac0:	2100      	movs	r1, #0
    1ac2:	4d16      	ldr	r5, [pc, #88]	; (1b1c <udi_msc_trans_block+0x84>)
    1ac4:	47a8      	blx	r5
    1ac6:	2800      	cmp	r0, #0
    1ac8:	d020      	beq.n	1b0c <udi_msc_trans_block+0x74>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    1aca:	4b15      	ldr	r3, [pc, #84]	; (1b20 <udi_msc_trans_block+0x88>)
    1acc:	689a      	ldr	r2, [r3, #8]
    1ace:	1b14      	subs	r4, r2, r4
    1ad0:	609c      	str	r4, [r3, #8]
	return true;
}
    1ad2:	b003      	add	sp, #12
    1ad4:	bd30      	pop	{r4, r5, pc}
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    1ad6:	4b13      	ldr	r3, [pc, #76]	; (1b24 <udi_msc_trans_block+0x8c>)
    1ad8:	9300      	str	r3, [sp, #0]
    1ada:	0023      	movs	r3, r4
    1adc:	000a      	movs	r2, r1
    1ade:	2100      	movs	r1, #0
    1ae0:	4d0e      	ldr	r5, [pc, #56]	; (1b1c <udi_msc_trans_block+0x84>)
    1ae2:	47a8      	blx	r5
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d011      	beq.n	1b0c <udi_msc_trans_block+0x74>
		while (!udi_msc_b_ack_trans);
    1ae8:	4a0b      	ldr	r2, [pc, #44]	; (1b18 <udi_msc_trans_block+0x80>)
    1aea:	7813      	ldrb	r3, [r2, #0]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d0fc      	beq.n	1aea <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    1af0:	4b0d      	ldr	r3, [pc, #52]	; (1b28 <udi_msc_trans_block+0x90>)
    1af2:	781b      	ldrb	r3, [r3, #0]
			return false;
    1af4:	2000      	movs	r0, #0
		if (udi_msc_b_abort_trans) {
    1af6:	2b00      	cmp	r3, #0
    1af8:	d1eb      	bne.n	1ad2 <udi_msc_trans_block+0x3a>
		udi_msc_csw.dCSWDataResidue -= block_size;
    1afa:	4b09      	ldr	r3, [pc, #36]	; (1b20 <udi_msc_trans_block+0x88>)
    1afc:	689a      	ldr	r2, [r3, #8]
    1afe:	1b14      	subs	r4, r2, r4
    1b00:	609c      	str	r4, [r3, #8]
		return (!udi_msc_b_abort_trans);
    1b02:	4b09      	ldr	r3, [pc, #36]	; (1b28 <udi_msc_trans_block+0x90>)
    1b04:	7818      	ldrb	r0, [r3, #0]
    1b06:	2301      	movs	r3, #1
    1b08:	4058      	eors	r0, r3
    1b0a:	e7e2      	b.n	1ad2 <udi_msc_trans_block+0x3a>
		udi_msc_b_ack_trans = true;
    1b0c:	2201      	movs	r2, #1
    1b0e:	4b02      	ldr	r3, [pc, #8]	; (1b18 <udi_msc_trans_block+0x80>)
    1b10:	701a      	strb	r2, [r3, #0]
		return false;
    1b12:	2000      	movs	r0, #0
    1b14:	e7dd      	b.n	1ad2 <udi_msc_trans_block+0x3a>
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	20000044 	.word	0x20000044
    1b1c:	000036e1 	.word	0x000036e1
    1b20:	20000048 	.word	0x20000048
    1b24:	00001259 	.word	0x00001259
    1b28:	200002f4 	.word	0x200002f4

00001b2c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1b2c:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1b2e:	4b11      	ldr	r3, [pc, #68]	; (1b74 <udc_next_desc_in_iface+0x48>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1b34:	7894      	ldrb	r4, [r2, #2]
    1b36:	78d3      	ldrb	r3, [r2, #3]
    1b38:	021b      	lsls	r3, r3, #8
    1b3a:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1b3c:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1b3e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1b40:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1b42:	4290      	cmp	r0, r2
    1b44:	d210      	bcs.n	1b68 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1b46:	7843      	ldrb	r3, [r0, #1]
    1b48:	2b04      	cmp	r3, #4
    1b4a:	d00f      	beq.n	1b6c <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1b4c:	428b      	cmp	r3, r1
    1b4e:	d00a      	beq.n	1b66 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1b50:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1b52:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1b54:	4290      	cmp	r0, r2
    1b56:	d205      	bcs.n	1b64 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1b58:	7843      	ldrb	r3, [r0, #1]
    1b5a:	2b04      	cmp	r3, #4
    1b5c:	d008      	beq.n	1b70 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1b5e:	428b      	cmp	r3, r1
    1b60:	d1f6      	bne.n	1b50 <udc_next_desc_in_iface+0x24>
    1b62:	e000      	b.n	1b66 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1b64:	2000      	movs	r0, #0
}
    1b66:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1b68:	2000      	movs	r0, #0
    1b6a:	e7fc      	b.n	1b66 <udc_next_desc_in_iface+0x3a>
    1b6c:	2000      	movs	r0, #0
    1b6e:	e7fa      	b.n	1b66 <udc_next_desc_in_iface+0x3a>
    1b70:	2000      	movs	r0, #0
    1b72:	e7f8      	b.n	1b66 <udc_next_desc_in_iface+0x3a>
    1b74:	200001f4 	.word	0x200001f4

00001b78 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1b78:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1b7a:	4b03      	ldr	r3, [pc, #12]	; (1b88 <udc_valid_address+0x10>)
    1b7c:	885b      	ldrh	r3, [r3, #2]
    1b7e:	207f      	movs	r0, #127	; 0x7f
    1b80:	4018      	ands	r0, r3
    1b82:	4b02      	ldr	r3, [pc, #8]	; (1b8c <udc_valid_address+0x14>)
    1b84:	4798      	blx	r3
}
    1b86:	bd10      	pop	{r4, pc}
    1b88:	20000538 	.word	0x20000538
    1b8c:	000038b9 	.word	0x000038b9

00001b90 <udc_update_iface_desc>:
{
    1b90:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1b92:	4b19      	ldr	r3, [pc, #100]	; (1bf8 <udc_update_iface_desc+0x68>)
    1b94:	781b      	ldrb	r3, [r3, #0]
		return false;
    1b96:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d029      	beq.n	1bf0 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b9c:	4b17      	ldr	r3, [pc, #92]	; (1bfc <udc_update_iface_desc+0x6c>)
    1b9e:	681b      	ldr	r3, [r3, #0]
    1ba0:	681b      	ldr	r3, [r3, #0]
    1ba2:	791c      	ldrb	r4, [r3, #4]
    1ba4:	4284      	cmp	r4, r0
    1ba6:	d923      	bls.n	1bf0 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1ba8:	4a15      	ldr	r2, [pc, #84]	; (1c00 <udc_update_iface_desc+0x70>)
    1baa:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1bac:	789a      	ldrb	r2, [r3, #2]
    1bae:	78dc      	ldrb	r4, [r3, #3]
    1bb0:	0224      	lsls	r4, r4, #8
    1bb2:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1bb4:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1bb6:	42a3      	cmp	r3, r4
    1bb8:	d21c      	bcs.n	1bf4 <udc_update_iface_desc+0x64>
    1bba:	2500      	movs	r5, #0
    1bbc:	2601      	movs	r6, #1
    1bbe:	e007      	b.n	1bd0 <udc_update_iface_desc+0x40>
    1bc0:	4a0f      	ldr	r2, [pc, #60]	; (1c00 <udc_update_iface_desc+0x70>)
    1bc2:	6013      	str	r3, [r2, #0]
    1bc4:	e00f      	b.n	1be6 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1bc6:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1bc8:	189b      	adds	r3, r3, r2
    1bca:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1bcc:	42a3      	cmp	r3, r4
    1bce:	d20c      	bcs.n	1bea <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1bd0:	785a      	ldrb	r2, [r3, #1]
    1bd2:	2a04      	cmp	r2, #4
    1bd4:	d1f7      	bne.n	1bc6 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1bd6:	789a      	ldrb	r2, [r3, #2]
    1bd8:	4282      	cmp	r2, r0
    1bda:	d1f4      	bne.n	1bc6 <udc_update_iface_desc+0x36>
    1bdc:	78da      	ldrb	r2, [r3, #3]
    1bde:	428a      	cmp	r2, r1
    1be0:	d1f1      	bne.n	1bc6 <udc_update_iface_desc+0x36>
    1be2:	2d00      	cmp	r5, #0
    1be4:	d1ec      	bne.n	1bc0 <udc_update_iface_desc+0x30>
				return true; // Interface found
    1be6:	2201      	movs	r2, #1
    1be8:	e002      	b.n	1bf0 <udc_update_iface_desc+0x60>
    1bea:	4a05      	ldr	r2, [pc, #20]	; (1c00 <udc_update_iface_desc+0x70>)
    1bec:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1bee:	2200      	movs	r2, #0
}
    1bf0:	0010      	movs	r0, r2
    1bf2:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1bf4:	2200      	movs	r2, #0
    1bf6:	e7fb      	b.n	1bf0 <udc_update_iface_desc+0x60>
    1bf8:	200001f0 	.word	0x200001f0
    1bfc:	200001f4 	.word	0x200001f4
    1c00:	200001f8 	.word	0x200001f8

00001c04 <udc_iface_disable>:
{
    1c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c06:	46c6      	mov	lr, r8
    1c08:	b500      	push	{lr}
    1c0a:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c0c:	2100      	movs	r1, #0
    1c0e:	4b13      	ldr	r3, [pc, #76]	; (1c5c <udc_iface_disable+0x58>)
    1c10:	4798      	blx	r3
    1c12:	1e05      	subs	r5, r0, #0
    1c14:	d103      	bne.n	1c1e <udc_iface_disable+0x1a>
}
    1c16:	0028      	movs	r0, r5
    1c18:	bc04      	pop	{r2}
    1c1a:	4690      	mov	r8, r2
    1c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c1e:	4b10      	ldr	r3, [pc, #64]	; (1c60 <udc_iface_disable+0x5c>)
    1c20:	681b      	ldr	r3, [r3, #0]
    1c22:	685b      	ldr	r3, [r3, #4]
    1c24:	00a2      	lsls	r2, r4, #2
    1c26:	58d3      	ldr	r3, [r2, r3]
    1c28:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c2a:	68db      	ldr	r3, [r3, #12]
    1c2c:	4798      	blx	r3
    1c2e:	0001      	movs	r1, r0
    1c30:	0020      	movs	r0, r4
    1c32:	4b0a      	ldr	r3, [pc, #40]	; (1c5c <udc_iface_disable+0x58>)
    1c34:	4798      	blx	r3
    1c36:	1e05      	subs	r5, r0, #0
    1c38:	d0ed      	beq.n	1c16 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1c3a:	4b0a      	ldr	r3, [pc, #40]	; (1c64 <udc_iface_disable+0x60>)
    1c3c:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c3e:	4e0a      	ldr	r6, [pc, #40]	; (1c68 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1c40:	4f0a      	ldr	r7, [pc, #40]	; (1c6c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c42:	2105      	movs	r1, #5
    1c44:	0020      	movs	r0, r4
    1c46:	47b0      	blx	r6
    1c48:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1c4a:	d002      	beq.n	1c52 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1c4c:	7880      	ldrb	r0, [r0, #2]
    1c4e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c50:	e7f7      	b.n	1c42 <udc_iface_disable+0x3e>
	udi_api->disable();
    1c52:	4643      	mov	r3, r8
    1c54:	685b      	ldr	r3, [r3, #4]
    1c56:	4798      	blx	r3
	return true;
    1c58:	e7dd      	b.n	1c16 <udc_iface_disable+0x12>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00001b91 	.word	0x00001b91
    1c60:	200001f4 	.word	0x200001f4
    1c64:	200001f8 	.word	0x200001f8
    1c68:	00001b2d 	.word	0x00001b2d
    1c6c:	000033a1 	.word	0x000033a1

00001c70 <udc_iface_enable>:
{
    1c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c72:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1c74:	4b0f      	ldr	r3, [pc, #60]	; (1cb4 <udc_iface_enable+0x44>)
    1c76:	4798      	blx	r3
    1c78:	2800      	cmp	r0, #0
    1c7a:	d019      	beq.n	1cb0 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1c7c:	4b0e      	ldr	r3, [pc, #56]	; (1cb8 <udc_iface_enable+0x48>)
    1c7e:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c80:	4e0e      	ldr	r6, [pc, #56]	; (1cbc <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c82:	4f0f      	ldr	r7, [pc, #60]	; (1cc0 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c84:	2105      	movs	r1, #5
    1c86:	0020      	movs	r0, r4
    1c88:	47b0      	blx	r6
    1c8a:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1c8c:	d009      	beq.n	1ca2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c8e:	7903      	ldrb	r3, [r0, #4]
    1c90:	7942      	ldrb	r2, [r0, #5]
    1c92:	0212      	lsls	r2, r2, #8
    1c94:	431a      	orrs	r2, r3
    1c96:	78c1      	ldrb	r1, [r0, #3]
    1c98:	7880      	ldrb	r0, [r0, #2]
    1c9a:	47b8      	blx	r7
    1c9c:	2800      	cmp	r0, #0
    1c9e:	d1f1      	bne.n	1c84 <udc_iface_enable+0x14>
    1ca0:	e006      	b.n	1cb0 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1ca2:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <udc_iface_enable+0x54>)
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	685b      	ldr	r3, [r3, #4]
    1ca8:	00ad      	lsls	r5, r5, #2
    1caa:	58eb      	ldr	r3, [r5, r3]
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	4798      	blx	r3
}
    1cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	00001b91 	.word	0x00001b91
    1cb8:	200001f8 	.word	0x200001f8
    1cbc:	00001b2d 	.word	0x00001b2d
    1cc0:	000033f9 	.word	0x000033f9
    1cc4:	200001f4 	.word	0x200001f4

00001cc8 <udc_start>:
{
    1cc8:	b510      	push	{r4, lr}
	udd_enable();
    1cca:	4b01      	ldr	r3, [pc, #4]	; (1cd0 <udc_start+0x8>)
    1ccc:	4798      	blx	r3
}
    1cce:	bd10      	pop	{r4, pc}
    1cd0:	000039c5 	.word	0x000039c5

00001cd4 <udc_reset>:
{
    1cd4:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1cd6:	4b0e      	ldr	r3, [pc, #56]	; (1d10 <udc_reset+0x3c>)
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d011      	beq.n	1d02 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cde:	4b0d      	ldr	r3, [pc, #52]	; (1d14 <udc_reset+0x40>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1ce4:	791b      	ldrb	r3, [r3, #4]
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d00b      	beq.n	1d02 <udc_reset+0x2e>
    1cea:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1cec:	4e0a      	ldr	r6, [pc, #40]	; (1d18 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cee:	4d09      	ldr	r5, [pc, #36]	; (1d14 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1cf0:	0020      	movs	r0, r4
    1cf2:	47b0      	blx	r6
				iface_num++) {
    1cf4:	3401      	adds	r4, #1
    1cf6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cf8:	682b      	ldr	r3, [r5, #0]
    1cfa:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1cfc:	791b      	ldrb	r3, [r3, #4]
    1cfe:	42a3      	cmp	r3, r4
    1d00:	d8f6      	bhi.n	1cf0 <udc_reset+0x1c>
	udc_num_configuration = 0;
    1d02:	2200      	movs	r2, #0
    1d04:	4b02      	ldr	r3, [pc, #8]	; (1d10 <udc_reset+0x3c>)
    1d06:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1d08:	3201      	adds	r2, #1
    1d0a:	4b04      	ldr	r3, [pc, #16]	; (1d1c <udc_reset+0x48>)
    1d0c:	801a      	strh	r2, [r3, #0]
}
    1d0e:	bd70      	pop	{r4, r5, r6, pc}
    1d10:	200001f0 	.word	0x200001f0
    1d14:	200001f4 	.word	0x200001f4
    1d18:	00001c05 	.word	0x00001c05
    1d1c:	200001e6 	.word	0x200001e6

00001d20 <udc_sof_notify>:
{
    1d20:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1d22:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <udc_sof_notify+0x3c>)
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d017      	beq.n	1d5a <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d2a:	4b0d      	ldr	r3, [pc, #52]	; (1d60 <udc_sof_notify+0x40>)
    1d2c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	7912      	ldrb	r2, [r2, #4]
    1d32:	2a00      	cmp	r2, #0
    1d34:	d011      	beq.n	1d5a <udc_sof_notify+0x3a>
    1d36:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d38:	4d09      	ldr	r5, [pc, #36]	; (1d60 <udc_sof_notify+0x40>)
    1d3a:	e006      	b.n	1d4a <udc_sof_notify+0x2a>
				iface_num++) {
    1d3c:	3401      	adds	r4, #1
    1d3e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d40:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1d42:	681a      	ldr	r2, [r3, #0]
    1d44:	7912      	ldrb	r2, [r2, #4]
    1d46:	42a2      	cmp	r2, r4
    1d48:	d907      	bls.n	1d5a <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1d4a:	685b      	ldr	r3, [r3, #4]
    1d4c:	00a2      	lsls	r2, r4, #2
    1d4e:	58d3      	ldr	r3, [r2, r3]
    1d50:	691b      	ldr	r3, [r3, #16]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d0f2      	beq.n	1d3c <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1d56:	4798      	blx	r3
    1d58:	e7f0      	b.n	1d3c <udc_sof_notify+0x1c>
}
    1d5a:	bd70      	pop	{r4, r5, r6, pc}
    1d5c:	200001f0 	.word	0x200001f0
    1d60:	200001f4 	.word	0x200001f4

00001d64 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1d66:	4bac      	ldr	r3, [pc, #688]	; (2018 <STACK_SIZE+0x18>)
    1d68:	2200      	movs	r2, #0
    1d6a:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1d6c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1d6e:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1d70:	781b      	ldrb	r3, [r3, #0]
    1d72:	b25a      	sxtb	r2, r3
    1d74:	2a00      	cmp	r2, #0
    1d76:	db13      	blt.n	1da0 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1d78:	2260      	movs	r2, #96	; 0x60
    1d7a:	421a      	tst	r2, r3
    1d7c:	d100      	bne.n	1d80 <udc_process_setup+0x1c>
    1d7e:	e0da      	b.n	1f36 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d80:	4ba5      	ldr	r3, [pc, #660]	; (2018 <STACK_SIZE+0x18>)
    1d82:	781a      	ldrb	r2, [r3, #0]
    1d84:	231f      	movs	r3, #31
    1d86:	4013      	ands	r3, r2
    1d88:	2b01      	cmp	r3, #1
    1d8a:	d100      	bne.n	1d8e <udc_process_setup+0x2a>
    1d8c:	e176      	b.n	207c <STACK_SIZE+0x7c>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d8e:	4ba2      	ldr	r3, [pc, #648]	; (2018 <STACK_SIZE+0x18>)
    1d90:	781a      	ldrb	r2, [r3, #0]
    1d92:	231f      	movs	r3, #31
    1d94:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1d96:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d98:	2b02      	cmp	r3, #2
    1d9a:	d100      	bne.n	1d9e <udc_process_setup+0x3a>
    1d9c:	e1cc      	b.n	2138 <STACK_SIZE+0x138>
#endif
}
    1d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1da0:	4a9d      	ldr	r2, [pc, #628]	; (2018 <STACK_SIZE+0x18>)
    1da2:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1da4:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1da6:	2a00      	cmp	r2, #0
    1da8:	d0f9      	beq.n	1d9e <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1daa:	2160      	movs	r1, #96	; 0x60
    1dac:	4219      	tst	r1, r3
    1dae:	d1e7      	bne.n	1d80 <udc_process_setup+0x1c>
    1db0:	211f      	movs	r1, #31
    1db2:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1db4:	d108      	bne.n	1dc8 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1db6:	4998      	ldr	r1, [pc, #608]	; (2018 <STACK_SIZE+0x18>)
    1db8:	7849      	ldrb	r1, [r1, #1]
    1dba:	2906      	cmp	r1, #6
    1dbc:	d023      	beq.n	1e06 <udc_process_setup+0xa2>
    1dbe:	2908      	cmp	r1, #8
    1dc0:	d100      	bne.n	1dc4 <udc_process_setup+0x60>
    1dc2:	e087      	b.n	1ed4 <udc_process_setup+0x170>
    1dc4:	2900      	cmp	r1, #0
    1dc6:	d017      	beq.n	1df8 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1dc8:	2b01      	cmp	r3, #1
    1dca:	d100      	bne.n	1dce <udc_process_setup+0x6a>
    1dcc:	e08a      	b.n	1ee4 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1dce:	2b02      	cmp	r3, #2
    1dd0:	d1d6      	bne.n	1d80 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1dd2:	4b91      	ldr	r3, [pc, #580]	; (2018 <STACK_SIZE+0x18>)
    1dd4:	785b      	ldrb	r3, [r3, #1]
	return false;
    1dd6:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d000      	beq.n	1dde <udc_process_setup+0x7a>
    1ddc:	e1a8      	b.n	2130 <STACK_SIZE+0x130>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1dde:	2a02      	cmp	r2, #2
    1de0:	d1d5      	bne.n	1d8e <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1de2:	4b8d      	ldr	r3, [pc, #564]	; (2018 <STACK_SIZE+0x18>)
    1de4:	7918      	ldrb	r0, [r3, #4]
    1de6:	4b8d      	ldr	r3, [pc, #564]	; (201c <STACK_SIZE+0x1c>)
    1de8:	4798      	blx	r3
    1dea:	4b8d      	ldr	r3, [pc, #564]	; (2020 <STACK_SIZE+0x20>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1dec:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1dee:	2102      	movs	r1, #2
    1df0:	0018      	movs	r0, r3
    1df2:	4b8c      	ldr	r3, [pc, #560]	; (2024 <STACK_SIZE+0x24>)
    1df4:	4798      	blx	r3
    1df6:	e0ff      	b.n	1ff8 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1df8:	2a02      	cmp	r2, #2
    1dfa:	d1c8      	bne.n	1d8e <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1dfc:	3102      	adds	r1, #2
    1dfe:	488a      	ldr	r0, [pc, #552]	; (2028 <STACK_SIZE+0x28>)
    1e00:	4b88      	ldr	r3, [pc, #544]	; (2024 <STACK_SIZE+0x24>)
    1e02:	4798      	blx	r3
    1e04:	e0f8      	b.n	1ff8 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1e06:	4b84      	ldr	r3, [pc, #528]	; (2018 <STACK_SIZE+0x18>)
    1e08:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1e0a:	0a13      	lsrs	r3, r2, #8
    1e0c:	2b02      	cmp	r3, #2
    1e0e:	d023      	beq.n	1e58 <udc_process_setup+0xf4>
    1e10:	b2d9      	uxtb	r1, r3
    1e12:	2902      	cmp	r1, #2
    1e14:	d90f      	bls.n	1e36 <udc_process_setup+0xd2>
    1e16:	2b03      	cmp	r3, #3
    1e18:	d034      	beq.n	1e84 <udc_process_setup+0x120>
    1e1a:	2b0f      	cmp	r3, #15
    1e1c:	d000      	beq.n	1e20 <udc_process_setup+0xbc>
    1e1e:	e184      	b.n	212a <STACK_SIZE+0x12a>
		if (udc_config.conf_bos == NULL) {
    1e20:	4b82      	ldr	r3, [pc, #520]	; (202c <STACK_SIZE+0x2c>)
    1e22:	6898      	ldr	r0, [r3, #8]
    1e24:	2800      	cmp	r0, #0
    1e26:	d0b2      	beq.n	1d8e <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1e28:	7883      	ldrb	r3, [r0, #2]
    1e2a:	78c1      	ldrb	r1, [r0, #3]
    1e2c:	0209      	lsls	r1, r1, #8
    1e2e:	4319      	orrs	r1, r3
    1e30:	4b7c      	ldr	r3, [pc, #496]	; (2024 <STACK_SIZE+0x24>)
    1e32:	4798      	blx	r3
    1e34:	e007      	b.n	1e46 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1e36:	2b01      	cmp	r3, #1
    1e38:	d000      	beq.n	1e3c <udc_process_setup+0xd8>
    1e3a:	e176      	b.n	212a <STACK_SIZE+0x12a>
				(uint8_t *) udc_config.confdev_lsfs,
    1e3c:	4b7b      	ldr	r3, [pc, #492]	; (202c <STACK_SIZE+0x2c>)
    1e3e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1e40:	7801      	ldrb	r1, [r0, #0]
    1e42:	4b78      	ldr	r3, [pc, #480]	; (2024 <STACK_SIZE+0x24>)
    1e44:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1e46:	4b74      	ldr	r3, [pc, #464]	; (2018 <STACK_SIZE+0x18>)
    1e48:	88da      	ldrh	r2, [r3, #6]
    1e4a:	899b      	ldrh	r3, [r3, #12]
    1e4c:	4293      	cmp	r3, r2
    1e4e:	d800      	bhi.n	1e52 <udc_process_setup+0xee>
    1e50:	e0d2      	b.n	1ff8 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1e52:	4b71      	ldr	r3, [pc, #452]	; (2018 <STACK_SIZE+0x18>)
    1e54:	819a      	strh	r2, [r3, #12]
    1e56:	e0cf      	b.n	1ff8 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1e58:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1e5a:	4b74      	ldr	r3, [pc, #464]	; (202c <STACK_SIZE+0x2c>)
    1e5c:	681b      	ldr	r3, [r3, #0]
    1e5e:	7c5b      	ldrb	r3, [r3, #17]
    1e60:	4293      	cmp	r3, r2
    1e62:	d800      	bhi.n	1e66 <udc_process_setup+0x102>
    1e64:	e793      	b.n	1d8e <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1e66:	4b71      	ldr	r3, [pc, #452]	; (202c <STACK_SIZE+0x2c>)
    1e68:	685b      	ldr	r3, [r3, #4]
    1e6a:	00d2      	lsls	r2, r2, #3
    1e6c:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1e6e:	7883      	ldrb	r3, [r0, #2]
    1e70:	78c1      	ldrb	r1, [r0, #3]
    1e72:	0209      	lsls	r1, r1, #8
    1e74:	4319      	orrs	r1, r3
    1e76:	4b6b      	ldr	r3, [pc, #428]	; (2024 <STACK_SIZE+0x24>)
    1e78:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1e7a:	4b67      	ldr	r3, [pc, #412]	; (2018 <STACK_SIZE+0x18>)
    1e7c:	689b      	ldr	r3, [r3, #8]
    1e7e:	2202      	movs	r2, #2
    1e80:	705a      	strb	r2, [r3, #1]
    1e82:	e7e0      	b.n	1e46 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1e84:	23ff      	movs	r3, #255	; 0xff
    1e86:	401a      	ands	r2, r3
    1e88:	2a01      	cmp	r2, #1
    1e8a:	d020      	beq.n	1ece <udc_process_setup+0x16a>
    1e8c:	2a00      	cmp	r2, #0
    1e8e:	d019      	beq.n	1ec4 <udc_process_setup+0x160>
    1e90:	2a02      	cmp	r2, #2
    1e92:	d100      	bne.n	1e96 <udc_process_setup+0x132>
    1e94:	e178      	b.n	2188 <STACK_SIZE+0x188>
    1e96:	2a03      	cmp	r2, #3
    1e98:	d000      	beq.n	1e9c <udc_process_setup+0x138>
    1e9a:	e771      	b.n	1d80 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1e9c:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1e9e:	4c64      	ldr	r4, [pc, #400]	; (2030 <STACK_SIZE+0x30>)
    1ea0:	4a64      	ldr	r2, [pc, #400]	; (2034 <STACK_SIZE+0x34>)
    1ea2:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1ea4:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1ea6:	5ce0      	ldrb	r0, [r4, r3]
    1ea8:	8010      	strh	r0, [r2, #0]
    1eaa:	3301      	adds	r3, #1
    1eac:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1eae:	b2d8      	uxtb	r0, r3
    1eb0:	4281      	cmp	r1, r0
    1eb2:	d8f8      	bhi.n	1ea6 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1eb4:	0049      	lsls	r1, r1, #1
    1eb6:	3102      	adds	r1, #2
    1eb8:	485e      	ldr	r0, [pc, #376]	; (2034 <STACK_SIZE+0x34>)
    1eba:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1ebc:	b289      	uxth	r1, r1
    1ebe:	4b59      	ldr	r3, [pc, #356]	; (2024 <STACK_SIZE+0x24>)
    1ec0:	4798      	blx	r3
    1ec2:	e7c0      	b.n	1e46 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1ec4:	2104      	movs	r1, #4
    1ec6:	485c      	ldr	r0, [pc, #368]	; (2038 <STACK_SIZE+0x38>)
    1ec8:	4b56      	ldr	r3, [pc, #344]	; (2024 <STACK_SIZE+0x24>)
    1eca:	4798      	blx	r3
    1ecc:	e7bb      	b.n	1e46 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1ece:	4c5b      	ldr	r4, [pc, #364]	; (203c <STACK_SIZE+0x3c>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1ed0:	2109      	movs	r1, #9
    1ed2:	e7e5      	b.n	1ea0 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1ed4:	2a01      	cmp	r2, #1
    1ed6:	d000      	beq.n	1eda <udc_process_setup+0x176>
    1ed8:	e759      	b.n	1d8e <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1eda:	2101      	movs	r1, #1
    1edc:	4858      	ldr	r0, [pc, #352]	; (2040 <STACK_SIZE+0x40>)
    1ede:	4b51      	ldr	r3, [pc, #324]	; (2024 <STACK_SIZE+0x24>)
    1ee0:	4798      	blx	r3
    1ee2:	e089      	b.n	1ff8 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ee4:	494c      	ldr	r1, [pc, #304]	; (2018 <STACK_SIZE+0x18>)
    1ee6:	7849      	ldrb	r1, [r1, #1]
    1ee8:	290a      	cmp	r1, #10
    1eea:	d000      	beq.n	1eee <udc_process_setup+0x18a>
    1eec:	e76f      	b.n	1dce <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1eee:	2a01      	cmp	r2, #1
    1ef0:	d000      	beq.n	1ef4 <udc_process_setup+0x190>
    1ef2:	e0c3      	b.n	207c <STACK_SIZE+0x7c>
	if (!udc_num_configuration) {
    1ef4:	4b52      	ldr	r3, [pc, #328]	; (2040 <STACK_SIZE+0x40>)
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d100      	bne.n	1efe <udc_process_setup+0x19a>
    1efc:	e0be      	b.n	207c <STACK_SIZE+0x7c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1efe:	4b46      	ldr	r3, [pc, #280]	; (2018 <STACK_SIZE+0x18>)
    1f00:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1f02:	4b50      	ldr	r3, [pc, #320]	; (2044 <STACK_SIZE+0x44>)
    1f04:	681d      	ldr	r5, [r3, #0]
    1f06:	682b      	ldr	r3, [r5, #0]
    1f08:	791b      	ldrb	r3, [r3, #4]
    1f0a:	42a3      	cmp	r3, r4
    1f0c:	d800      	bhi.n	1f10 <udc_process_setup+0x1ac>
    1f0e:	e0b5      	b.n	207c <STACK_SIZE+0x7c>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f10:	2100      	movs	r1, #0
    1f12:	0020      	movs	r0, r4
    1f14:	4b4c      	ldr	r3, [pc, #304]	; (2048 <STACK_SIZE+0x48>)
    1f16:	4798      	blx	r3
    1f18:	2800      	cmp	r0, #0
    1f1a:	d100      	bne.n	1f1e <udc_process_setup+0x1ba>
    1f1c:	e730      	b.n	1d80 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f1e:	686b      	ldr	r3, [r5, #4]
    1f20:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1f22:	58e3      	ldr	r3, [r4, r3]
    1f24:	68db      	ldr	r3, [r3, #12]
    1f26:	4798      	blx	r3
    1f28:	4b48      	ldr	r3, [pc, #288]	; (204c <STACK_SIZE+0x4c>)
    1f2a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1f2c:	2101      	movs	r1, #1
    1f2e:	0018      	movs	r0, r3
    1f30:	4b3c      	ldr	r3, [pc, #240]	; (2024 <STACK_SIZE+0x24>)
    1f32:	4798      	blx	r3
    1f34:	e060      	b.n	1ff8 <udc_process_setup+0x294>
    1f36:	221f      	movs	r2, #31
    1f38:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1f3a:	d15f      	bne.n	1ffc <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f3c:	4a36      	ldr	r2, [pc, #216]	; (2018 <STACK_SIZE+0x18>)
    1f3e:	7852      	ldrb	r2, [r2, #1]
    1f40:	2a03      	cmp	r2, #3
    1f42:	d100      	bne.n	1f46 <udc_process_setup+0x1e2>
    1f44:	e0f3      	b.n	212e <STACK_SIZE+0x12e>
    1f46:	b2d1      	uxtb	r1, r2
    1f48:	2903      	cmp	r1, #3
    1f4a:	d93b      	bls.n	1fc4 <udc_process_setup+0x260>
    1f4c:	2a05      	cmp	r2, #5
    1f4e:	d04b      	beq.n	1fe8 <udc_process_setup+0x284>
    1f50:	2a09      	cmp	r2, #9
    1f52:	d153      	bne.n	1ffc <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1f54:	4b30      	ldr	r3, [pc, #192]	; (2018 <STACK_SIZE+0x18>)
    1f56:	88db      	ldrh	r3, [r3, #6]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d000      	beq.n	1f5e <udc_process_setup+0x1fa>
    1f5c:	e717      	b.n	1d8e <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1f5e:	4b3c      	ldr	r3, [pc, #240]	; (2050 <STACK_SIZE+0x50>)
    1f60:	4798      	blx	r3
    1f62:	2800      	cmp	r0, #0
    1f64:	d100      	bne.n	1f68 <udc_process_setup+0x204>
    1f66:	e70b      	b.n	1d80 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1f68:	4b2b      	ldr	r3, [pc, #172]	; (2018 <STACK_SIZE+0x18>)
    1f6a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1f6c:	4b2f      	ldr	r3, [pc, #188]	; (202c <STACK_SIZE+0x2c>)
    1f6e:	681b      	ldr	r3, [r3, #0]
    1f70:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1f72:	429a      	cmp	r2, r3
    1f74:	dd00      	ble.n	1f78 <udc_process_setup+0x214>
    1f76:	e703      	b.n	1d80 <udc_process_setup+0x1c>
	udc_reset();
    1f78:	4b36      	ldr	r3, [pc, #216]	; (2054 <STACK_SIZE+0x54>)
    1f7a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1f7c:	4b26      	ldr	r3, [pc, #152]	; (2018 <STACK_SIZE+0x18>)
    1f7e:	789b      	ldrb	r3, [r3, #2]
    1f80:	4a2f      	ldr	r2, [pc, #188]	; (2040 <STACK_SIZE+0x40>)
    1f82:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1f84:	2b00      	cmp	r3, #0
    1f86:	d037      	beq.n	1ff8 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1f88:	4a33      	ldr	r2, [pc, #204]	; (2058 <STACK_SIZE+0x58>)
    1f8a:	4694      	mov	ip, r2
    1f8c:	4463      	add	r3, ip
    1f8e:	00db      	lsls	r3, r3, #3
    1f90:	4a26      	ldr	r2, [pc, #152]	; (202c <STACK_SIZE+0x2c>)
    1f92:	6852      	ldr	r2, [r2, #4]
    1f94:	18d3      	adds	r3, r2, r3
    1f96:	4a2b      	ldr	r2, [pc, #172]	; (2044 <STACK_SIZE+0x44>)
    1f98:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	791b      	ldrb	r3, [r3, #4]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d02a      	beq.n	1ff8 <udc_process_setup+0x294>
    1fa2:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1fa4:	4d2d      	ldr	r5, [pc, #180]	; (205c <STACK_SIZE+0x5c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fa6:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1fa8:	2100      	movs	r1, #0
    1faa:	0020      	movs	r0, r4
    1fac:	47a8      	blx	r5
    1fae:	2800      	cmp	r0, #0
    1fb0:	d100      	bne.n	1fb4 <udc_process_setup+0x250>
    1fb2:	e6e5      	b.n	1d80 <udc_process_setup+0x1c>
			iface_num++) {
    1fb4:	3401      	adds	r4, #1
    1fb6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fb8:	6833      	ldr	r3, [r6, #0]
    1fba:	681b      	ldr	r3, [r3, #0]
    1fbc:	791b      	ldrb	r3, [r3, #4]
    1fbe:	42a3      	cmp	r3, r4
    1fc0:	d8f2      	bhi.n	1fa8 <udc_process_setup+0x244>
    1fc2:	e019      	b.n	1ff8 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1fc4:	2a01      	cmp	r2, #1
    1fc6:	d119      	bne.n	1ffc <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1fc8:	4b13      	ldr	r3, [pc, #76]	; (2018 <STACK_SIZE+0x18>)
    1fca:	88db      	ldrh	r3, [r3, #6]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d000      	beq.n	1fd2 <udc_process_setup+0x26e>
    1fd0:	e6dd      	b.n	1d8e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1fd2:	4b11      	ldr	r3, [pc, #68]	; (2018 <STACK_SIZE+0x18>)
    1fd4:	885b      	ldrh	r3, [r3, #2]
    1fd6:	2b01      	cmp	r3, #1
    1fd8:	d000      	beq.n	1fdc <udc_process_setup+0x278>
    1fda:	e6d8      	b.n	1d8e <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1fdc:	4a12      	ldr	r2, [pc, #72]	; (2028 <STACK_SIZE+0x28>)
    1fde:	8813      	ldrh	r3, [r2, #0]
    1fe0:	2102      	movs	r1, #2
    1fe2:	438b      	bics	r3, r1
    1fe4:	8013      	strh	r3, [r2, #0]
    1fe6:	e007      	b.n	1ff8 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1fe8:	4b0b      	ldr	r3, [pc, #44]	; (2018 <STACK_SIZE+0x18>)
    1fea:	88db      	ldrh	r3, [r3, #6]
    1fec:	2b00      	cmp	r3, #0
    1fee:	d000      	beq.n	1ff2 <udc_process_setup+0x28e>
    1ff0:	e6cd      	b.n	1d8e <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1ff2:	4a1b      	ldr	r2, [pc, #108]	; (2060 <STACK_SIZE+0x60>)
    1ff4:	4b08      	ldr	r3, [pc, #32]	; (2018 <STACK_SIZE+0x18>)
    1ff6:	611a      	str	r2, [r3, #16]
			return true;
    1ff8:	2001      	movs	r0, #1
    1ffa:	e6d0      	b.n	1d9e <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ffc:	2b01      	cmp	r3, #1
    1ffe:	d031      	beq.n	2064 <STACK_SIZE+0x64>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2000:	2b02      	cmp	r3, #2
    2002:	d000      	beq.n	2006 <STACK_SIZE+0x6>
    2004:	e6bc      	b.n	1d80 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2006:	4b04      	ldr	r3, [pc, #16]	; (2018 <STACK_SIZE+0x18>)
    2008:	785b      	ldrb	r3, [r3, #1]
    200a:	2b01      	cmp	r3, #1
    200c:	d06c      	beq.n	20e8 <STACK_SIZE+0xe8>
    200e:	2b03      	cmp	r3, #3
    2010:	d100      	bne.n	2014 <STACK_SIZE+0x14>
    2012:	e078      	b.n	2106 <STACK_SIZE+0x106>
	return false;
    2014:	2000      	movs	r0, #0
    2016:	e08b      	b.n	2130 <STACK_SIZE+0x130>
    2018:	20000538 	.word	0x20000538
    201c:	00003501 	.word	0x00003501
    2020:	200001e8 	.word	0x200001e8
    2024:	000038d9 	.word	0x000038d9
    2028:	200001e6 	.word	0x200001e6
    202c:	200000ac 	.word	0x200000ac
    2030:	00007a74 	.word	0x00007a74
    2034:	2000007c 	.word	0x2000007c
    2038:	20000098 	.word	0x20000098
    203c:	2000009c 	.word	0x2000009c
    2040:	200001f0 	.word	0x200001f0
    2044:	200001f4 	.word	0x200001f4
    2048:	00001b91 	.word	0x00001b91
    204c:	200001ec 	.word	0x200001ec
    2050:	000038c9 	.word	0x000038c9
    2054:	00001cd5 	.word	0x00001cd5
    2058:	1fffffff 	.word	0x1fffffff
    205c:	00001c71 	.word	0x00001c71
    2060:	00001b79 	.word	0x00001b79
			switch (udd_g_ctrlreq.req.bRequest) {
    2064:	4a4a      	ldr	r2, [pc, #296]	; (2190 <STACK_SIZE+0x190>)
    2066:	7852      	ldrb	r2, [r2, #1]
    2068:	2a0b      	cmp	r2, #11
    206a:	d1c9      	bne.n	2000 <STACK_SIZE>
	if (udd_g_ctrlreq.req.wLength) {
    206c:	4b48      	ldr	r3, [pc, #288]	; (2190 <STACK_SIZE+0x190>)
    206e:	88db      	ldrh	r3, [r3, #6]
    2070:	2b00      	cmp	r3, #0
    2072:	d103      	bne.n	207c <STACK_SIZE+0x7c>
	if (!udc_num_configuration) {
    2074:	4b47      	ldr	r3, [pc, #284]	; (2194 <STACK_SIZE+0x194>)
    2076:	781b      	ldrb	r3, [r3, #0]
    2078:	2b00      	cmp	r3, #0
    207a:	d127      	bne.n	20cc <STACK_SIZE+0xcc>
	if (0 == udc_num_configuration) {
    207c:	4b45      	ldr	r3, [pc, #276]	; (2194 <STACK_SIZE+0x194>)
    207e:	781b      	ldrb	r3, [r3, #0]
	return false;
    2080:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    2082:	2b00      	cmp	r3, #0
    2084:	d100      	bne.n	2088 <STACK_SIZE+0x88>
    2086:	e68a      	b.n	1d9e <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2088:	4b41      	ldr	r3, [pc, #260]	; (2190 <STACK_SIZE+0x190>)
    208a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    208c:	4b42      	ldr	r3, [pc, #264]	; (2198 <STACK_SIZE+0x198>)
    208e:	681d      	ldr	r5, [r3, #0]
    2090:	682b      	ldr	r3, [r5, #0]
    2092:	791b      	ldrb	r3, [r3, #4]
    2094:	42a3      	cmp	r3, r4
    2096:	d800      	bhi.n	209a <STACK_SIZE+0x9a>
    2098:	e681      	b.n	1d9e <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    209a:	2100      	movs	r1, #0
    209c:	0020      	movs	r0, r4
    209e:	4b3f      	ldr	r3, [pc, #252]	; (219c <STACK_SIZE+0x19c>)
    20a0:	4798      	blx	r3
    20a2:	2800      	cmp	r0, #0
    20a4:	d100      	bne.n	20a8 <STACK_SIZE+0xa8>
    20a6:	e672      	b.n	1d8e <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    20a8:	686b      	ldr	r3, [r5, #4]
    20aa:	00a2      	lsls	r2, r4, #2
    20ac:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    20ae:	68eb      	ldr	r3, [r5, #12]
    20b0:	4798      	blx	r3
    20b2:	0001      	movs	r1, r0
    20b4:	0020      	movs	r0, r4
    20b6:	4b39      	ldr	r3, [pc, #228]	; (219c <STACK_SIZE+0x19c>)
    20b8:	4798      	blx	r3
    20ba:	2800      	cmp	r0, #0
    20bc:	d100      	bne.n	20c0 <STACK_SIZE+0xc0>
    20be:	e666      	b.n	1d8e <udc_process_setup+0x2a>
	return udi_api->setup();
    20c0:	68ab      	ldr	r3, [r5, #8]
    20c2:	4798      	blx	r3
		if (udc_req_iface()) {
    20c4:	2800      	cmp	r0, #0
    20c6:	d000      	beq.n	20ca <STACK_SIZE+0xca>
    20c8:	e669      	b.n	1d9e <udc_process_setup+0x3a>
    20ca:	e660      	b.n	1d8e <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    20cc:	4b30      	ldr	r3, [pc, #192]	; (2190 <STACK_SIZE+0x190>)
    20ce:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    20d0:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    20d2:	0028      	movs	r0, r5
    20d4:	4b32      	ldr	r3, [pc, #200]	; (21a0 <STACK_SIZE+0x1a0>)
    20d6:	4798      	blx	r3
    20d8:	2800      	cmp	r0, #0
    20da:	d100      	bne.n	20de <STACK_SIZE+0xde>
    20dc:	e650      	b.n	1d80 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    20de:	b2e1      	uxtb	r1, r4
    20e0:	0028      	movs	r0, r5
    20e2:	4b30      	ldr	r3, [pc, #192]	; (21a4 <STACK_SIZE+0x1a4>)
    20e4:	4798      	blx	r3
    20e6:	e023      	b.n	2130 <STACK_SIZE+0x130>
	if (udd_g_ctrlreq.req.wLength) {
    20e8:	4b29      	ldr	r3, [pc, #164]	; (2190 <STACK_SIZE+0x190>)
    20ea:	88db      	ldrh	r3, [r3, #6]
    20ec:	2b00      	cmp	r3, #0
    20ee:	d000      	beq.n	20f2 <STACK_SIZE+0xf2>
    20f0:	e64d      	b.n	1d8e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    20f2:	4b27      	ldr	r3, [pc, #156]	; (2190 <STACK_SIZE+0x190>)
    20f4:	885b      	ldrh	r3, [r3, #2]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d000      	beq.n	20fc <STACK_SIZE+0xfc>
    20fa:	e648      	b.n	1d8e <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    20fc:	4b24      	ldr	r3, [pc, #144]	; (2190 <STACK_SIZE+0x190>)
    20fe:	7918      	ldrb	r0, [r3, #4]
    2100:	4b29      	ldr	r3, [pc, #164]	; (21a8 <STACK_SIZE+0x1a8>)
    2102:	4798      	blx	r3
    2104:	e014      	b.n	2130 <STACK_SIZE+0x130>
	if (udd_g_ctrlreq.req.wLength) {
    2106:	4b22      	ldr	r3, [pc, #136]	; (2190 <STACK_SIZE+0x190>)
    2108:	88db      	ldrh	r3, [r3, #6]
    210a:	2b00      	cmp	r3, #0
    210c:	d000      	beq.n	2110 <STACK_SIZE+0x110>
    210e:	e63e      	b.n	1d8e <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2110:	4b1f      	ldr	r3, [pc, #124]	; (2190 <STACK_SIZE+0x190>)
    2112:	885b      	ldrh	r3, [r3, #2]
    2114:	2b00      	cmp	r3, #0
    2116:	d000      	beq.n	211a <STACK_SIZE+0x11a>
    2118:	e639      	b.n	1d8e <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    211a:	4c1d      	ldr	r4, [pc, #116]	; (2190 <STACK_SIZE+0x190>)
    211c:	7920      	ldrb	r0, [r4, #4]
    211e:	4b23      	ldr	r3, [pc, #140]	; (21ac <STACK_SIZE+0x1ac>)
    2120:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2122:	7920      	ldrb	r0, [r4, #4]
    2124:	4b22      	ldr	r3, [pc, #136]	; (21b0 <STACK_SIZE+0x1b0>)
    2126:	4798      	blx	r3
    2128:	e002      	b.n	2130 <STACK_SIZE+0x130>
		return false;
    212a:	2000      	movs	r0, #0
    212c:	e000      	b.n	2130 <STACK_SIZE+0x130>
				return udc_req_std_dev_set_feature();
    212e:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2130:	2800      	cmp	r0, #0
    2132:	d000      	beq.n	2136 <STACK_SIZE+0x136>
    2134:	e633      	b.n	1d9e <udc_process_setup+0x3a>
    2136:	e623      	b.n	1d80 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    2138:	4b16      	ldr	r3, [pc, #88]	; (2194 <STACK_SIZE+0x194>)
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	2b00      	cmp	r3, #0
    213e:	d100      	bne.n	2142 <STACK_SIZE+0x142>
    2140:	e62d      	b.n	1d9e <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2142:	4b15      	ldr	r3, [pc, #84]	; (2198 <STACK_SIZE+0x198>)
    2144:	681b      	ldr	r3, [r3, #0]
    2146:	681a      	ldr	r2, [r3, #0]
    2148:	7912      	ldrb	r2, [r2, #4]
    214a:	2a00      	cmp	r2, #0
    214c:	d01a      	beq.n	2184 <STACK_SIZE+0x184>
    214e:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2150:	4e12      	ldr	r6, [pc, #72]	; (219c <STACK_SIZE+0x19c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2152:	4f11      	ldr	r7, [pc, #68]	; (2198 <STACK_SIZE+0x198>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2154:	685b      	ldr	r3, [r3, #4]
    2156:	00aa      	lsls	r2, r5, #2
    2158:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    215a:	68e3      	ldr	r3, [r4, #12]
    215c:	4798      	blx	r3
    215e:	0001      	movs	r1, r0
    2160:	0028      	movs	r0, r5
    2162:	47b0      	blx	r6
    2164:	2800      	cmp	r0, #0
    2166:	d100      	bne.n	216a <STACK_SIZE+0x16a>
    2168:	e619      	b.n	1d9e <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    216a:	68a3      	ldr	r3, [r4, #8]
    216c:	4798      	blx	r3
    216e:	2800      	cmp	r0, #0
    2170:	d000      	beq.n	2174 <STACK_SIZE+0x174>
    2172:	e614      	b.n	1d9e <udc_process_setup+0x3a>
			iface_num++) {
    2174:	3501      	adds	r5, #1
    2176:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2178:	683b      	ldr	r3, [r7, #0]
    217a:	681a      	ldr	r2, [r3, #0]
    217c:	7912      	ldrb	r2, [r2, #4]
    217e:	42aa      	cmp	r2, r5
    2180:	d8e8      	bhi.n	2154 <STACK_SIZE+0x154>
    2182:	e60c      	b.n	1d9e <udc_process_setup+0x3a>
	return false;
    2184:	2000      	movs	r0, #0
    2186:	e60a      	b.n	1d9e <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2188:	2103      	movs	r1, #3
		str = udc_string_product_name;
    218a:	4c0a      	ldr	r4, [pc, #40]	; (21b4 <STACK_SIZE+0x1b4>)
    218c:	e688      	b.n	1ea0 <udc_process_setup+0x13c>
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	20000538 	.word	0x20000538
    2194:	200001f0 	.word	0x200001f0
    2198:	200001f4 	.word	0x200001f4
    219c:	00001b91 	.word	0x00001b91
    21a0:	00001c05 	.word	0x00001c05
    21a4:	00001c71 	.word	0x00001c71
    21a8:	00003645 	.word	0x00003645
    21ac:	00003355 	.word	0x00003355
    21b0:	00003515 	.word	0x00003515
    21b4:	200000a8 	.word	0x200000a8

000021b8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    21b8:	4a04      	ldr	r2, [pc, #16]	; (21cc <_extint_enable+0x14>)
    21ba:	7813      	ldrb	r3, [r2, #0]
    21bc:	2102      	movs	r1, #2
    21be:	430b      	orrs	r3, r1
    21c0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    21c2:	7853      	ldrb	r3, [r2, #1]
    21c4:	b25b      	sxtb	r3, r3
    21c6:	2b00      	cmp	r3, #0
    21c8:	dbfb      	blt.n	21c2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    21ca:	4770      	bx	lr
    21cc:	40001800 	.word	0x40001800

000021d0 <_system_extint_init>:
{
    21d0:	b500      	push	{lr}
    21d2:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    21d4:	4a12      	ldr	r2, [pc, #72]	; (2220 <_system_extint_init+0x50>)
    21d6:	6993      	ldr	r3, [r2, #24]
    21d8:	2140      	movs	r1, #64	; 0x40
    21da:	430b      	orrs	r3, r1
    21dc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    21de:	a901      	add	r1, sp, #4
    21e0:	2300      	movs	r3, #0
    21e2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    21e4:	2005      	movs	r0, #5
    21e6:	4b0f      	ldr	r3, [pc, #60]	; (2224 <_system_extint_init+0x54>)
    21e8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    21ea:	2005      	movs	r0, #5
    21ec:	4b0e      	ldr	r3, [pc, #56]	; (2228 <_system_extint_init+0x58>)
    21ee:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    21f0:	4a0e      	ldr	r2, [pc, #56]	; (222c <_system_extint_init+0x5c>)
    21f2:	7813      	ldrb	r3, [r2, #0]
    21f4:	2101      	movs	r1, #1
    21f6:	430b      	orrs	r3, r1
    21f8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    21fa:	7853      	ldrb	r3, [r2, #1]
    21fc:	b25b      	sxtb	r3, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	dbfb      	blt.n	21fa <_system_extint_init+0x2a>
    2202:	4b0b      	ldr	r3, [pc, #44]	; (2230 <_system_extint_init+0x60>)
    2204:	0019      	movs	r1, r3
    2206:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2208:	2200      	movs	r2, #0
    220a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    220c:	4299      	cmp	r1, r3
    220e:	d1fc      	bne.n	220a <_system_extint_init+0x3a>
    2210:	2210      	movs	r2, #16
    2212:	4b08      	ldr	r3, [pc, #32]	; (2234 <_system_extint_init+0x64>)
    2214:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2216:	4b08      	ldr	r3, [pc, #32]	; (2238 <_system_extint_init+0x68>)
    2218:	4798      	blx	r3
}
    221a:	b003      	add	sp, #12
    221c:	bd00      	pop	{pc}
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	40000400 	.word	0x40000400
    2224:	000067e5 	.word	0x000067e5
    2228:	00006759 	.word	0x00006759
    222c:	40001800 	.word	0x40001800
    2230:	200002f8 	.word	0x200002f8
    2234:	e000e100 	.word	0xe000e100
    2238:	000021b9 	.word	0x000021b9

0000223c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    223c:	2300      	movs	r3, #0
    223e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2240:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2242:	2201      	movs	r2, #1
    2244:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    2246:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    2248:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    224a:	3302      	adds	r3, #2
    224c:	72c3      	strb	r3, [r0, #11]
}
    224e:	4770      	bx	lr

00002250 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2250:	b5f0      	push	{r4, r5, r6, r7, lr}
    2252:	b083      	sub	sp, #12
    2254:	0005      	movs	r5, r0
    2256:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2258:	a901      	add	r1, sp, #4
    225a:	2300      	movs	r3, #0
    225c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    225e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2260:	7923      	ldrb	r3, [r4, #4]
    2262:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2264:	7a23      	ldrb	r3, [r4, #8]
    2266:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2268:	7820      	ldrb	r0, [r4, #0]
    226a:	4b15      	ldr	r3, [pc, #84]	; (22c0 <extint_chan_set_config+0x70>)
    226c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    226e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    2270:	2d1f      	cmp	r5, #31
    2272:	d800      	bhi.n	2276 <extint_chan_set_config+0x26>
		return eics[eic_index];
    2274:	4813      	ldr	r0, [pc, #76]	; (22c4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2276:	2207      	movs	r2, #7
    2278:	402a      	ands	r2, r5
    227a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    227c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    227e:	7aa3      	ldrb	r3, [r4, #10]
    2280:	2b00      	cmp	r3, #0
    2282:	d001      	beq.n	2288 <extint_chan_set_config+0x38>
    2284:	2308      	movs	r3, #8
    2286:	431f      	orrs	r7, r3
    2288:	08eb      	lsrs	r3, r5, #3
    228a:	009b      	lsls	r3, r3, #2
    228c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    228e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2290:	260f      	movs	r6, #15
    2292:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2294:	43b1      	bics	r1, r6
			(new_config << config_pos);
    2296:	4097      	lsls	r7, r2
    2298:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    229a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    229c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    229e:	7a63      	ldrb	r3, [r4, #9]
    22a0:	2b00      	cmp	r3, #0
    22a2:	d106      	bne.n	22b2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    22a4:	6943      	ldr	r3, [r0, #20]
    22a6:	2201      	movs	r2, #1
    22a8:	40aa      	lsls	r2, r5
    22aa:	4393      	bics	r3, r2
    22ac:	6143      	str	r3, [r0, #20]
	}
}
    22ae:	b003      	add	sp, #12
    22b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    22b2:	6942      	ldr	r2, [r0, #20]
    22b4:	2301      	movs	r3, #1
    22b6:	40ab      	lsls	r3, r5
    22b8:	4313      	orrs	r3, r2
    22ba:	6143      	str	r3, [r0, #20]
    22bc:	e7f7      	b.n	22ae <extint_chan_set_config+0x5e>
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	000068dd 	.word	0x000068dd
    22c4:	40001800 	.word	0x40001800

000022c8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    22c8:	4770      	bx	lr
	...

000022cc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    22cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    22ce:	4b0a      	ldr	r3, [pc, #40]	; (22f8 <_sercom_set_handler+0x2c>)
    22d0:	781b      	ldrb	r3, [r3, #0]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d10c      	bne.n	22f0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    22d6:	4f09      	ldr	r7, [pc, #36]	; (22fc <_sercom_set_handler+0x30>)
    22d8:	4e09      	ldr	r6, [pc, #36]	; (2300 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    22da:	4d0a      	ldr	r5, [pc, #40]	; (2304 <_sercom_set_handler+0x38>)
    22dc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    22de:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    22e0:	195a      	adds	r2, r3, r5
    22e2:	6014      	str	r4, [r2, #0]
    22e4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    22e6:	2b18      	cmp	r3, #24
    22e8:	d1f9      	bne.n	22de <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    22ea:	2201      	movs	r2, #1
    22ec:	4b02      	ldr	r3, [pc, #8]	; (22f8 <_sercom_set_handler+0x2c>)
    22ee:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    22f0:	0080      	lsls	r0, r0, #2
    22f2:	4b02      	ldr	r3, [pc, #8]	; (22fc <_sercom_set_handler+0x30>)
    22f4:	50c1      	str	r1, [r0, r3]
}
    22f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22f8:	200001fc 	.word	0x200001fc
    22fc:	20000200 	.word	0x20000200
    2300:	000022c9 	.word	0x000022c9
    2304:	20000338 	.word	0x20000338

00002308 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2308:	b500      	push	{lr}
    230a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    230c:	2309      	movs	r3, #9
    230e:	466a      	mov	r2, sp
    2310:	7013      	strb	r3, [r2, #0]
    2312:	3301      	adds	r3, #1
    2314:	7053      	strb	r3, [r2, #1]
    2316:	3301      	adds	r3, #1
    2318:	7093      	strb	r3, [r2, #2]
    231a:	3301      	adds	r3, #1
    231c:	70d3      	strb	r3, [r2, #3]
    231e:	3301      	adds	r3, #1
    2320:	7113      	strb	r3, [r2, #4]
    2322:	3301      	adds	r3, #1
    2324:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2326:	4b03      	ldr	r3, [pc, #12]	; (2334 <_sercom_get_interrupt_vector+0x2c>)
    2328:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    232a:	466b      	mov	r3, sp
    232c:	5618      	ldrsb	r0, [r3, r0]
}
    232e:	b003      	add	sp, #12
    2330:	bd00      	pop	{pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	000052c5 	.word	0x000052c5

00002338 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2338:	b510      	push	{r4, lr}
    233a:	4b02      	ldr	r3, [pc, #8]	; (2344 <SERCOM0_Handler+0xc>)
    233c:	681b      	ldr	r3, [r3, #0]
    233e:	2000      	movs	r0, #0
    2340:	4798      	blx	r3
    2342:	bd10      	pop	{r4, pc}
    2344:	20000200 	.word	0x20000200

00002348 <SERCOM1_Handler>:
    2348:	b510      	push	{r4, lr}
    234a:	4b02      	ldr	r3, [pc, #8]	; (2354 <SERCOM1_Handler+0xc>)
    234c:	685b      	ldr	r3, [r3, #4]
    234e:	2001      	movs	r0, #1
    2350:	4798      	blx	r3
    2352:	bd10      	pop	{r4, pc}
    2354:	20000200 	.word	0x20000200

00002358 <SERCOM2_Handler>:
    2358:	b510      	push	{r4, lr}
    235a:	4b02      	ldr	r3, [pc, #8]	; (2364 <SERCOM2_Handler+0xc>)
    235c:	689b      	ldr	r3, [r3, #8]
    235e:	2002      	movs	r0, #2
    2360:	4798      	blx	r3
    2362:	bd10      	pop	{r4, pc}
    2364:	20000200 	.word	0x20000200

00002368 <SERCOM3_Handler>:
    2368:	b510      	push	{r4, lr}
    236a:	4b02      	ldr	r3, [pc, #8]	; (2374 <SERCOM3_Handler+0xc>)
    236c:	68db      	ldr	r3, [r3, #12]
    236e:	2003      	movs	r0, #3
    2370:	4798      	blx	r3
    2372:	bd10      	pop	{r4, pc}
    2374:	20000200 	.word	0x20000200

00002378 <SERCOM4_Handler>:
    2378:	b510      	push	{r4, lr}
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <SERCOM4_Handler+0xc>)
    237c:	691b      	ldr	r3, [r3, #16]
    237e:	2004      	movs	r0, #4
    2380:	4798      	blx	r3
    2382:	bd10      	pop	{r4, pc}
    2384:	20000200 	.word	0x20000200

00002388 <SERCOM5_Handler>:
    2388:	b510      	push	{r4, lr}
    238a:	4b02      	ldr	r3, [pc, #8]	; (2394 <SERCOM5_Handler+0xc>)
    238c:	695b      	ldr	r3, [r3, #20]
    238e:	2005      	movs	r0, #5
    2390:	4798      	blx	r3
    2392:	bd10      	pop	{r4, pc}
    2394:	20000200 	.word	0x20000200

00002398 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2398:	b5f0      	push	{r4, r5, r6, r7, lr}
    239a:	46de      	mov	lr, fp
    239c:	4657      	mov	r7, sl
    239e:	464e      	mov	r6, r9
    23a0:	4645      	mov	r5, r8
    23a2:	b5e0      	push	{r5, r6, r7, lr}
    23a4:	b091      	sub	sp, #68	; 0x44
    23a6:	0005      	movs	r5, r0
    23a8:	000c      	movs	r4, r1
    23aa:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    23ac:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23ae:	0008      	movs	r0, r1
    23b0:	4bbc      	ldr	r3, [pc, #752]	; (26a4 <usart_init+0x30c>)
    23b2:	4798      	blx	r3
    23b4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    23b6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    23b8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    23ba:	07db      	lsls	r3, r3, #31
    23bc:	d506      	bpl.n	23cc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    23be:	b011      	add	sp, #68	; 0x44
    23c0:	bc3c      	pop	{r2, r3, r4, r5}
    23c2:	4690      	mov	r8, r2
    23c4:	4699      	mov	r9, r3
    23c6:	46a2      	mov	sl, r4
    23c8:	46ab      	mov	fp, r5
    23ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    23cc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    23ce:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    23d0:	079b      	lsls	r3, r3, #30
    23d2:	d4f4      	bmi.n	23be <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    23d4:	49b4      	ldr	r1, [pc, #720]	; (26a8 <usart_init+0x310>)
    23d6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    23d8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    23da:	2301      	movs	r3, #1
    23dc:	40bb      	lsls	r3, r7
    23de:	4303      	orrs	r3, r0
    23e0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    23e2:	a90f      	add	r1, sp, #60	; 0x3c
    23e4:	272d      	movs	r7, #45	; 0x2d
    23e6:	5df3      	ldrb	r3, [r6, r7]
    23e8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    23ea:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    23ec:	b2d3      	uxtb	r3, r2
    23ee:	9302      	str	r3, [sp, #8]
    23f0:	0018      	movs	r0, r3
    23f2:	4bae      	ldr	r3, [pc, #696]	; (26ac <usart_init+0x314>)
    23f4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    23f6:	9802      	ldr	r0, [sp, #8]
    23f8:	4bad      	ldr	r3, [pc, #692]	; (26b0 <usart_init+0x318>)
    23fa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    23fc:	5df0      	ldrb	r0, [r6, r7]
    23fe:	2100      	movs	r1, #0
    2400:	4bac      	ldr	r3, [pc, #688]	; (26b4 <usart_init+0x31c>)
    2402:	4798      	blx	r3
	module->character_size = config->character_size;
    2404:	7af3      	ldrb	r3, [r6, #11]
    2406:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2408:	2324      	movs	r3, #36	; 0x24
    240a:	5cf3      	ldrb	r3, [r6, r3]
    240c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    240e:	2325      	movs	r3, #37	; 0x25
    2410:	5cf3      	ldrb	r3, [r6, r3]
    2412:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2414:	7ef3      	ldrb	r3, [r6, #27]
    2416:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2418:	7f33      	ldrb	r3, [r6, #28]
    241a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    241c:	682b      	ldr	r3, [r5, #0]
    241e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2420:	0018      	movs	r0, r3
    2422:	4ba0      	ldr	r3, [pc, #640]	; (26a4 <usart_init+0x30c>)
    2424:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2426:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2428:	2200      	movs	r2, #0
    242a:	230e      	movs	r3, #14
    242c:	a906      	add	r1, sp, #24
    242e:	468c      	mov	ip, r1
    2430:	4463      	add	r3, ip
    2432:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2434:	8a32      	ldrh	r2, [r6, #16]
    2436:	9202      	str	r2, [sp, #8]
    2438:	2380      	movs	r3, #128	; 0x80
    243a:	01db      	lsls	r3, r3, #7
    243c:	429a      	cmp	r2, r3
    243e:	d100      	bne.n	2442 <usart_init+0xaa>
    2440:	e09e      	b.n	2580 <usart_init+0x1e8>
    2442:	d90f      	bls.n	2464 <usart_init+0xcc>
    2444:	23c0      	movs	r3, #192	; 0xc0
    2446:	01db      	lsls	r3, r3, #7
    2448:	9a02      	ldr	r2, [sp, #8]
    244a:	429a      	cmp	r2, r3
    244c:	d100      	bne.n	2450 <usart_init+0xb8>
    244e:	e092      	b.n	2576 <usart_init+0x1de>
    2450:	2380      	movs	r3, #128	; 0x80
    2452:	021b      	lsls	r3, r3, #8
    2454:	429a      	cmp	r2, r3
    2456:	d000      	beq.n	245a <usart_init+0xc2>
    2458:	e11f      	b.n	269a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    245a:	2303      	movs	r3, #3
    245c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    245e:	2300      	movs	r3, #0
    2460:	9307      	str	r3, [sp, #28]
    2462:	e008      	b.n	2476 <usart_init+0xde>
	switch (config->sample_rate) {
    2464:	2380      	movs	r3, #128	; 0x80
    2466:	019b      	lsls	r3, r3, #6
    2468:	429a      	cmp	r2, r3
    246a:	d000      	beq.n	246e <usart_init+0xd6>
    246c:	e115      	b.n	269a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    246e:	2310      	movs	r3, #16
    2470:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2472:	3b0f      	subs	r3, #15
    2474:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2476:	6833      	ldr	r3, [r6, #0]
    2478:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    247a:	68f3      	ldr	r3, [r6, #12]
    247c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    247e:	6973      	ldr	r3, [r6, #20]
    2480:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2482:	7e33      	ldrb	r3, [r6, #24]
    2484:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2486:	2326      	movs	r3, #38	; 0x26
    2488:	5cf3      	ldrb	r3, [r6, r3]
    248a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    248c:	6873      	ldr	r3, [r6, #4]
    248e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2490:	2b00      	cmp	r3, #0
    2492:	d100      	bne.n	2496 <usart_init+0xfe>
    2494:	e0a0      	b.n	25d8 <usart_init+0x240>
    2496:	2380      	movs	r3, #128	; 0x80
    2498:	055b      	lsls	r3, r3, #21
    249a:	4599      	cmp	r9, r3
    249c:	d100      	bne.n	24a0 <usart_init+0x108>
    249e:	e084      	b.n	25aa <usart_init+0x212>
	if(config->encoding_format_enable) {
    24a0:	7e73      	ldrb	r3, [r6, #25]
    24a2:	2b00      	cmp	r3, #0
    24a4:	d002      	beq.n	24ac <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    24a6:	7eb3      	ldrb	r3, [r6, #26]
    24a8:	4642      	mov	r2, r8
    24aa:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    24ac:	682a      	ldr	r2, [r5, #0]
    24ae:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    24b0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    24b2:	2b00      	cmp	r3, #0
    24b4:	d1fc      	bne.n	24b0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    24b6:	330e      	adds	r3, #14
    24b8:	aa06      	add	r2, sp, #24
    24ba:	4694      	mov	ip, r2
    24bc:	4463      	add	r3, ip
    24be:	881b      	ldrh	r3, [r3, #0]
    24c0:	4642      	mov	r2, r8
    24c2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    24c4:	9b05      	ldr	r3, [sp, #20]
    24c6:	9a03      	ldr	r2, [sp, #12]
    24c8:	4313      	orrs	r3, r2
    24ca:	9a04      	ldr	r2, [sp, #16]
    24cc:	4313      	orrs	r3, r2
    24ce:	464a      	mov	r2, r9
    24d0:	4313      	orrs	r3, r2
    24d2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    24d4:	465b      	mov	r3, fp
    24d6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    24d8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    24da:	4653      	mov	r3, sl
    24dc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    24de:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    24e0:	2327      	movs	r3, #39	; 0x27
    24e2:	5cf3      	ldrb	r3, [r6, r3]
    24e4:	2b00      	cmp	r3, #0
    24e6:	d101      	bne.n	24ec <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    24e8:	3304      	adds	r3, #4
    24ea:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    24ec:	7e73      	ldrb	r3, [r6, #25]
    24ee:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    24f0:	7f32      	ldrb	r2, [r6, #28]
    24f2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    24f4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    24f6:	7f72      	ldrb	r2, [r6, #29]
    24f8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    24fa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    24fc:	2224      	movs	r2, #36	; 0x24
    24fe:	5cb2      	ldrb	r2, [r6, r2]
    2500:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2502:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2504:	2225      	movs	r2, #37	; 0x25
    2506:	5cb2      	ldrb	r2, [r6, r2]
    2508:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    250a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    250c:	7ab1      	ldrb	r1, [r6, #10]
    250e:	7af2      	ldrb	r2, [r6, #11]
    2510:	4311      	orrs	r1, r2
    2512:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2514:	8933      	ldrh	r3, [r6, #8]
    2516:	2bff      	cmp	r3, #255	; 0xff
    2518:	d100      	bne.n	251c <usart_init+0x184>
    251a:	e081      	b.n	2620 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    251c:	2280      	movs	r2, #128	; 0x80
    251e:	0452      	lsls	r2, r2, #17
    2520:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2522:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2524:	232c      	movs	r3, #44	; 0x2c
    2526:	5cf3      	ldrb	r3, [r6, r3]
    2528:	2b00      	cmp	r3, #0
    252a:	d103      	bne.n	2534 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    252c:	4b62      	ldr	r3, [pc, #392]	; (26b8 <usart_init+0x320>)
    252e:	789b      	ldrb	r3, [r3, #2]
    2530:	079b      	lsls	r3, r3, #30
    2532:	d501      	bpl.n	2538 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2534:	2380      	movs	r3, #128	; 0x80
    2536:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2538:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    253a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    253c:	2b00      	cmp	r3, #0
    253e:	d1fc      	bne.n	253a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2540:	4643      	mov	r3, r8
    2542:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2544:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2546:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2548:	2b00      	cmp	r3, #0
    254a:	d1fc      	bne.n	2546 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    254c:	4643      	mov	r3, r8
    254e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2550:	ab0e      	add	r3, sp, #56	; 0x38
    2552:	2280      	movs	r2, #128	; 0x80
    2554:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2556:	2200      	movs	r2, #0
    2558:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    255a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    255c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    255e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2560:	930a      	str	r3, [sp, #40]	; 0x28
    2562:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2564:	930b      	str	r3, [sp, #44]	; 0x2c
    2566:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2568:	930c      	str	r3, [sp, #48]	; 0x30
    256a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    256c:	9302      	str	r3, [sp, #8]
    256e:	930d      	str	r3, [sp, #52]	; 0x34
    2570:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2572:	ae0a      	add	r6, sp, #40	; 0x28
    2574:	e063      	b.n	263e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2576:	2308      	movs	r3, #8
    2578:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    257a:	3b07      	subs	r3, #7
    257c:	9307      	str	r3, [sp, #28]
    257e:	e77a      	b.n	2476 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2580:	6833      	ldr	r3, [r6, #0]
    2582:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2584:	68f3      	ldr	r3, [r6, #12]
    2586:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2588:	6973      	ldr	r3, [r6, #20]
    258a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    258c:	7e33      	ldrb	r3, [r6, #24]
    258e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2590:	2326      	movs	r3, #38	; 0x26
    2592:	5cf3      	ldrb	r3, [r6, r3]
    2594:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2596:	6873      	ldr	r3, [r6, #4]
    2598:	4699      	mov	r9, r3
	switch (transfer_mode)
    259a:	2b00      	cmp	r3, #0
    259c:	d018      	beq.n	25d0 <usart_init+0x238>
    259e:	2380      	movs	r3, #128	; 0x80
    25a0:	055b      	lsls	r3, r3, #21
    25a2:	4599      	cmp	r9, r3
    25a4:	d001      	beq.n	25aa <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    25a6:	2000      	movs	r0, #0
    25a8:	e025      	b.n	25f6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    25aa:	2327      	movs	r3, #39	; 0x27
    25ac:	5cf3      	ldrb	r3, [r6, r3]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d000      	beq.n	25b4 <usart_init+0x21c>
    25b2:	e775      	b.n	24a0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    25b4:	6a33      	ldr	r3, [r6, #32]
    25b6:	001f      	movs	r7, r3
    25b8:	b2c0      	uxtb	r0, r0
    25ba:	4b40      	ldr	r3, [pc, #256]	; (26bc <usart_init+0x324>)
    25bc:	4798      	blx	r3
    25be:	0001      	movs	r1, r0
    25c0:	220e      	movs	r2, #14
    25c2:	ab06      	add	r3, sp, #24
    25c4:	469c      	mov	ip, r3
    25c6:	4462      	add	r2, ip
    25c8:	0038      	movs	r0, r7
    25ca:	4b3d      	ldr	r3, [pc, #244]	; (26c0 <usart_init+0x328>)
    25cc:	4798      	blx	r3
    25ce:	e012      	b.n	25f6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    25d0:	2308      	movs	r3, #8
    25d2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    25d4:	2300      	movs	r3, #0
    25d6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    25d8:	2327      	movs	r3, #39	; 0x27
    25da:	5cf3      	ldrb	r3, [r6, r3]
    25dc:	2b00      	cmp	r3, #0
    25de:	d00e      	beq.n	25fe <usart_init+0x266>
				status_code =
    25e0:	9b06      	ldr	r3, [sp, #24]
    25e2:	9300      	str	r3, [sp, #0]
    25e4:	9b07      	ldr	r3, [sp, #28]
    25e6:	220e      	movs	r2, #14
    25e8:	a906      	add	r1, sp, #24
    25ea:	468c      	mov	ip, r1
    25ec:	4462      	add	r2, ip
    25ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    25f0:	6a30      	ldr	r0, [r6, #32]
    25f2:	4f34      	ldr	r7, [pc, #208]	; (26c4 <usart_init+0x32c>)
    25f4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    25f6:	2800      	cmp	r0, #0
    25f8:	d000      	beq.n	25fc <usart_init+0x264>
    25fa:	e6e0      	b.n	23be <usart_init+0x26>
    25fc:	e750      	b.n	24a0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    25fe:	6a33      	ldr	r3, [r6, #32]
    2600:	001f      	movs	r7, r3
    2602:	b2c0      	uxtb	r0, r0
    2604:	4b2d      	ldr	r3, [pc, #180]	; (26bc <usart_init+0x324>)
    2606:	4798      	blx	r3
    2608:	0001      	movs	r1, r0
				status_code =
    260a:	9b06      	ldr	r3, [sp, #24]
    260c:	9300      	str	r3, [sp, #0]
    260e:	9b07      	ldr	r3, [sp, #28]
    2610:	220e      	movs	r2, #14
    2612:	a806      	add	r0, sp, #24
    2614:	4684      	mov	ip, r0
    2616:	4462      	add	r2, ip
    2618:	0038      	movs	r0, r7
    261a:	4f2a      	ldr	r7, [pc, #168]	; (26c4 <usart_init+0x32c>)
    261c:	47b8      	blx	r7
    261e:	e7ea      	b.n	25f6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2620:	7ef3      	ldrb	r3, [r6, #27]
    2622:	2b00      	cmp	r3, #0
    2624:	d100      	bne.n	2628 <usart_init+0x290>
    2626:	e77d      	b.n	2524 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2628:	2380      	movs	r3, #128	; 0x80
    262a:	04db      	lsls	r3, r3, #19
    262c:	431f      	orrs	r7, r3
    262e:	e779      	b.n	2524 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2630:	0020      	movs	r0, r4
    2632:	4b25      	ldr	r3, [pc, #148]	; (26c8 <usart_init+0x330>)
    2634:	4798      	blx	r3
    2636:	e007      	b.n	2648 <usart_init+0x2b0>
    2638:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    263a:	2f04      	cmp	r7, #4
    263c:	d00d      	beq.n	265a <usart_init+0x2c2>
    263e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2640:	00bb      	lsls	r3, r7, #2
    2642:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2644:	2800      	cmp	r0, #0
    2646:	d0f3      	beq.n	2630 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2648:	1c43      	adds	r3, r0, #1
    264a:	d0f5      	beq.n	2638 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    264c:	a90e      	add	r1, sp, #56	; 0x38
    264e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2650:	0c00      	lsrs	r0, r0, #16
    2652:	b2c0      	uxtb	r0, r0
    2654:	4b1d      	ldr	r3, [pc, #116]	; (26cc <usart_init+0x334>)
    2656:	4798      	blx	r3
    2658:	e7ee      	b.n	2638 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    265a:	2300      	movs	r3, #0
    265c:	60eb      	str	r3, [r5, #12]
    265e:	612b      	str	r3, [r5, #16]
    2660:	616b      	str	r3, [r5, #20]
    2662:	61ab      	str	r3, [r5, #24]
    2664:	61eb      	str	r3, [r5, #28]
    2666:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2668:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    266a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    266c:	2200      	movs	r2, #0
    266e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2670:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2672:	3330      	adds	r3, #48	; 0x30
    2674:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2676:	3301      	adds	r3, #1
    2678:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    267a:	3301      	adds	r3, #1
    267c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    267e:	3301      	adds	r3, #1
    2680:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2682:	6828      	ldr	r0, [r5, #0]
    2684:	4b07      	ldr	r3, [pc, #28]	; (26a4 <usart_init+0x30c>)
    2686:	4798      	blx	r3
    2688:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    268a:	4911      	ldr	r1, [pc, #68]	; (26d0 <usart_init+0x338>)
    268c:	4b11      	ldr	r3, [pc, #68]	; (26d4 <usart_init+0x33c>)
    268e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2690:	00a4      	lsls	r4, r4, #2
    2692:	4b11      	ldr	r3, [pc, #68]	; (26d8 <usart_init+0x340>)
    2694:	50e5      	str	r5, [r4, r3]
	return status_code;
    2696:	2000      	movs	r0, #0
    2698:	e691      	b.n	23be <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    269a:	2310      	movs	r3, #16
    269c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    269e:	2300      	movs	r3, #0
    26a0:	9307      	str	r3, [sp, #28]
    26a2:	e6e8      	b.n	2476 <usart_init+0xde>
    26a4:	000052c5 	.word	0x000052c5
    26a8:	40000400 	.word	0x40000400
    26ac:	000067e5 	.word	0x000067e5
    26b0:	00006759 	.word	0x00006759
    26b4:	00005101 	.word	0x00005101
    26b8:	41002000 	.word	0x41002000
    26bc:	00006801 	.word	0x00006801
    26c0:	00005043 	.word	0x00005043
    26c4:	0000506d 	.word	0x0000506d
    26c8:	0000514d 	.word	0x0000514d
    26cc:	000068dd 	.word	0x000068dd
    26d0:	00002779 	.word	0x00002779
    26d4:	000022cd 	.word	0x000022cd
    26d8:	20000338 	.word	0x20000338

000026dc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    26dc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    26de:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    26e0:	2a00      	cmp	r2, #0
    26e2:	d101      	bne.n	26e8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    26e4:	0018      	movs	r0, r3
    26e6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    26e8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    26ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    26ec:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    26ee:	2a00      	cmp	r2, #0
    26f0:	d1f8      	bne.n	26e4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    26f2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    26f4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    26f6:	2a00      	cmp	r2, #0
    26f8:	d1fc      	bne.n	26f4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    26fa:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    26fc:	2102      	movs	r1, #2
    26fe:	7e1a      	ldrb	r2, [r3, #24]
    2700:	420a      	tst	r2, r1
    2702:	d0fc      	beq.n	26fe <usart_write_wait+0x22>
	return STATUS_OK;
    2704:	2300      	movs	r3, #0
    2706:	e7ed      	b.n	26e4 <usart_write_wait+0x8>

00002708 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2708:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    270a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    270c:	2a00      	cmp	r2, #0
    270e:	d101      	bne.n	2714 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2710:	0018      	movs	r0, r3
    2712:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2714:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2716:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2718:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    271a:	2a00      	cmp	r2, #0
    271c:	d1f8      	bne.n	2710 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    271e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2720:	7e10      	ldrb	r0, [r2, #24]
    2722:	0740      	lsls	r0, r0, #29
    2724:	d5f4      	bpl.n	2710 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2726:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2728:	2b00      	cmp	r3, #0
    272a:	d1fc      	bne.n	2726 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    272c:	8b53      	ldrh	r3, [r2, #26]
    272e:	b2db      	uxtb	r3, r3
	if (error_code) {
    2730:	0698      	lsls	r0, r3, #26
    2732:	d01d      	beq.n	2770 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2734:	0798      	lsls	r0, r3, #30
    2736:	d503      	bpl.n	2740 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2738:	2302      	movs	r3, #2
    273a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    273c:	3318      	adds	r3, #24
    273e:	e7e7      	b.n	2710 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2740:	0758      	lsls	r0, r3, #29
    2742:	d503      	bpl.n	274c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2744:	2304      	movs	r3, #4
    2746:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2748:	331a      	adds	r3, #26
    274a:	e7e1      	b.n	2710 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    274c:	07d8      	lsls	r0, r3, #31
    274e:	d503      	bpl.n	2758 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2750:	2301      	movs	r3, #1
    2752:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2754:	3312      	adds	r3, #18
    2756:	e7db      	b.n	2710 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2758:	06d8      	lsls	r0, r3, #27
    275a:	d503      	bpl.n	2764 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    275c:	2310      	movs	r3, #16
    275e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2760:	3332      	adds	r3, #50	; 0x32
    2762:	e7d5      	b.n	2710 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2764:	069b      	lsls	r3, r3, #26
    2766:	d503      	bpl.n	2770 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2768:	2320      	movs	r3, #32
    276a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    276c:	3321      	adds	r3, #33	; 0x21
    276e:	e7cf      	b.n	2710 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2770:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2772:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2774:	2300      	movs	r3, #0
    2776:	e7cb      	b.n	2710 <usart_read_wait+0x8>

00002778 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    277a:	0080      	lsls	r0, r0, #2
    277c:	4b62      	ldr	r3, [pc, #392]	; (2908 <_usart_interrupt_handler+0x190>)
    277e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2780:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2782:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2784:	2b00      	cmp	r3, #0
    2786:	d1fc      	bne.n	2782 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2788:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    278a:	7da6      	ldrb	r6, [r4, #22]
    278c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    278e:	2330      	movs	r3, #48	; 0x30
    2790:	5ceb      	ldrb	r3, [r5, r3]
    2792:	2231      	movs	r2, #49	; 0x31
    2794:	5caf      	ldrb	r7, [r5, r2]
    2796:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2798:	07f3      	lsls	r3, r6, #31
    279a:	d522      	bpl.n	27e2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    279c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    279e:	b29b      	uxth	r3, r3
    27a0:	2b00      	cmp	r3, #0
    27a2:	d01c      	beq.n	27de <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    27a6:	7813      	ldrb	r3, [r2, #0]
    27a8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    27aa:	1c51      	adds	r1, r2, #1
    27ac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    27ae:	7969      	ldrb	r1, [r5, #5]
    27b0:	2901      	cmp	r1, #1
    27b2:	d00e      	beq.n	27d2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27b4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    27b6:	05db      	lsls	r3, r3, #23
    27b8:	0ddb      	lsrs	r3, r3, #23
    27ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    27bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    27be:	3b01      	subs	r3, #1
    27c0:	b29b      	uxth	r3, r3
    27c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    27c4:	2b00      	cmp	r3, #0
    27c6:	d10c      	bne.n	27e2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    27c8:	3301      	adds	r3, #1
    27ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    27cc:	3301      	adds	r3, #1
    27ce:	75a3      	strb	r3, [r4, #22]
    27d0:	e007      	b.n	27e2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    27d2:	7851      	ldrb	r1, [r2, #1]
    27d4:	0209      	lsls	r1, r1, #8
    27d6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    27d8:	3202      	adds	r2, #2
    27da:	62aa      	str	r2, [r5, #40]	; 0x28
    27dc:	e7eb      	b.n	27b6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    27de:	2301      	movs	r3, #1
    27e0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    27e2:	07b3      	lsls	r3, r6, #30
    27e4:	d506      	bpl.n	27f4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    27e6:	2302      	movs	r3, #2
    27e8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    27ea:	2200      	movs	r2, #0
    27ec:	3331      	adds	r3, #49	; 0x31
    27ee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    27f0:	07fb      	lsls	r3, r7, #31
    27f2:	d41a      	bmi.n	282a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    27f4:	0773      	lsls	r3, r6, #29
    27f6:	d565      	bpl.n	28c4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    27f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    27fa:	b29b      	uxth	r3, r3
    27fc:	2b00      	cmp	r3, #0
    27fe:	d05f      	beq.n	28c0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2800:	8b63      	ldrh	r3, [r4, #26]
    2802:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2804:	071a      	lsls	r2, r3, #28
    2806:	d414      	bmi.n	2832 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2808:	223f      	movs	r2, #63	; 0x3f
    280a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    280c:	2b00      	cmp	r3, #0
    280e:	d034      	beq.n	287a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2810:	079a      	lsls	r2, r3, #30
    2812:	d511      	bpl.n	2838 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2814:	221a      	movs	r2, #26
    2816:	2332      	movs	r3, #50	; 0x32
    2818:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    281a:	3b30      	subs	r3, #48	; 0x30
    281c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    281e:	077b      	lsls	r3, r7, #29
    2820:	d550      	bpl.n	28c4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2822:	0028      	movs	r0, r5
    2824:	696b      	ldr	r3, [r5, #20]
    2826:	4798      	blx	r3
    2828:	e04c      	b.n	28c4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    282a:	0028      	movs	r0, r5
    282c:	68eb      	ldr	r3, [r5, #12]
    282e:	4798      	blx	r3
    2830:	e7e0      	b.n	27f4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2832:	2237      	movs	r2, #55	; 0x37
    2834:	4013      	ands	r3, r2
    2836:	e7e9      	b.n	280c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2838:	075a      	lsls	r2, r3, #29
    283a:	d505      	bpl.n	2848 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    283c:	221e      	movs	r2, #30
    283e:	2332      	movs	r3, #50	; 0x32
    2840:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2842:	3b2e      	subs	r3, #46	; 0x2e
    2844:	8363      	strh	r3, [r4, #26]
    2846:	e7ea      	b.n	281e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2848:	07da      	lsls	r2, r3, #31
    284a:	d505      	bpl.n	2858 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    284c:	2213      	movs	r2, #19
    284e:	2332      	movs	r3, #50	; 0x32
    2850:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2852:	3b31      	subs	r3, #49	; 0x31
    2854:	8363      	strh	r3, [r4, #26]
    2856:	e7e2      	b.n	281e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2858:	06da      	lsls	r2, r3, #27
    285a:	d505      	bpl.n	2868 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    285c:	2242      	movs	r2, #66	; 0x42
    285e:	2332      	movs	r3, #50	; 0x32
    2860:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2862:	3b22      	subs	r3, #34	; 0x22
    2864:	8363      	strh	r3, [r4, #26]
    2866:	e7da      	b.n	281e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2868:	2220      	movs	r2, #32
    286a:	421a      	tst	r2, r3
    286c:	d0d7      	beq.n	281e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    286e:	3221      	adds	r2, #33	; 0x21
    2870:	2332      	movs	r3, #50	; 0x32
    2872:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2874:	3b12      	subs	r3, #18
    2876:	8363      	strh	r3, [r4, #26]
    2878:	e7d1      	b.n	281e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    287a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    287c:	05db      	lsls	r3, r3, #23
    287e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2880:	b2da      	uxtb	r2, r3
    2882:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2884:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2886:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2888:	1c51      	adds	r1, r2, #1
    288a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    288c:	7969      	ldrb	r1, [r5, #5]
    288e:	2901      	cmp	r1, #1
    2890:	d010      	beq.n	28b4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2892:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2894:	3b01      	subs	r3, #1
    2896:	b29b      	uxth	r3, r3
    2898:	85ab      	strh	r3, [r5, #44]	; 0x2c
    289a:	2b00      	cmp	r3, #0
    289c:	d112      	bne.n	28c4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    289e:	3304      	adds	r3, #4
    28a0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    28a2:	2200      	movs	r2, #0
    28a4:	332e      	adds	r3, #46	; 0x2e
    28a6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    28a8:	07bb      	lsls	r3, r7, #30
    28aa:	d50b      	bpl.n	28c4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    28ac:	0028      	movs	r0, r5
    28ae:	692b      	ldr	r3, [r5, #16]
    28b0:	4798      	blx	r3
    28b2:	e007      	b.n	28c4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    28b4:	0a1b      	lsrs	r3, r3, #8
    28b6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    28b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    28ba:	3301      	adds	r3, #1
    28bc:	626b      	str	r3, [r5, #36]	; 0x24
    28be:	e7e8      	b.n	2892 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28c0:	2304      	movs	r3, #4
    28c2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    28c4:	06f3      	lsls	r3, r6, #27
    28c6:	d504      	bpl.n	28d2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    28c8:	2310      	movs	r3, #16
    28ca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    28cc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    28ce:	06fb      	lsls	r3, r7, #27
    28d0:	d40e      	bmi.n	28f0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    28d2:	06b3      	lsls	r3, r6, #26
    28d4:	d504      	bpl.n	28e0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    28d6:	2320      	movs	r3, #32
    28d8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    28da:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    28dc:	073b      	lsls	r3, r7, #28
    28de:	d40b      	bmi.n	28f8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    28e0:	0733      	lsls	r3, r6, #28
    28e2:	d504      	bpl.n	28ee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    28e4:	2308      	movs	r3, #8
    28e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    28e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    28ea:	06bb      	lsls	r3, r7, #26
    28ec:	d408      	bmi.n	2900 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    28ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    28f0:	0028      	movs	r0, r5
    28f2:	69eb      	ldr	r3, [r5, #28]
    28f4:	4798      	blx	r3
    28f6:	e7ec      	b.n	28d2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    28f8:	0028      	movs	r0, r5
    28fa:	69ab      	ldr	r3, [r5, #24]
    28fc:	4798      	blx	r3
    28fe:	e7ef      	b.n	28e0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2900:	6a2b      	ldr	r3, [r5, #32]
    2902:	0028      	movs	r0, r5
    2904:	4798      	blx	r3
}
    2906:	e7f2      	b.n	28ee <_usart_interrupt_handler+0x176>
    2908:	20000338 	.word	0x20000338

0000290c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    290c:	b510      	push	{r4, lr}
	switch (clock_source) {
    290e:	2808      	cmp	r0, #8
    2910:	d803      	bhi.n	291a <system_clock_source_get_hz+0xe>
    2912:	0080      	lsls	r0, r0, #2
    2914:	4b1e      	ldr	r3, [pc, #120]	; (2990 <system_clock_source_get_hz+0x84>)
    2916:	581b      	ldr	r3, [r3, r0]
    2918:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    291a:	2000      	movs	r0, #0
    291c:	e036      	b.n	298c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    291e:	4b1d      	ldr	r3, [pc, #116]	; (2994 <system_clock_source_get_hz+0x88>)
    2920:	6918      	ldr	r0, [r3, #16]
    2922:	e033      	b.n	298c <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2924:	4b1c      	ldr	r3, [pc, #112]	; (2998 <system_clock_source_get_hz+0x8c>)
    2926:	6a1b      	ldr	r3, [r3, #32]
    2928:	059b      	lsls	r3, r3, #22
    292a:	0f9b      	lsrs	r3, r3, #30
    292c:	481b      	ldr	r0, [pc, #108]	; (299c <system_clock_source_get_hz+0x90>)
    292e:	40d8      	lsrs	r0, r3
    2930:	e02c      	b.n	298c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2932:	4b18      	ldr	r3, [pc, #96]	; (2994 <system_clock_source_get_hz+0x88>)
    2934:	6958      	ldr	r0, [r3, #20]
    2936:	e029      	b.n	298c <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2938:	4b16      	ldr	r3, [pc, #88]	; (2994 <system_clock_source_get_hz+0x88>)
    293a:	681b      	ldr	r3, [r3, #0]
			return 0;
    293c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    293e:	079b      	lsls	r3, r3, #30
    2940:	d524      	bpl.n	298c <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2942:	4915      	ldr	r1, [pc, #84]	; (2998 <system_clock_source_get_hz+0x8c>)
    2944:	2210      	movs	r2, #16
    2946:	68cb      	ldr	r3, [r1, #12]
    2948:	421a      	tst	r2, r3
    294a:	d0fc      	beq.n	2946 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    294c:	4b11      	ldr	r3, [pc, #68]	; (2994 <system_clock_source_get_hz+0x88>)
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	075b      	lsls	r3, r3, #29
    2952:	d401      	bmi.n	2958 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2954:	4812      	ldr	r0, [pc, #72]	; (29a0 <system_clock_source_get_hz+0x94>)
    2956:	e019      	b.n	298c <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2958:	4b0e      	ldr	r3, [pc, #56]	; (2994 <system_clock_source_get_hz+0x88>)
    295a:	681b      	ldr	r3, [r3, #0]
    295c:	069b      	lsls	r3, r3, #26
    295e:	d501      	bpl.n	2964 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2960:	480f      	ldr	r0, [pc, #60]	; (29a0 <system_clock_source_get_hz+0x94>)
    2962:	e013      	b.n	298c <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2964:	2000      	movs	r0, #0
    2966:	4b0f      	ldr	r3, [pc, #60]	; (29a4 <system_clock_source_get_hz+0x98>)
    2968:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    296a:	4b0a      	ldr	r3, [pc, #40]	; (2994 <system_clock_source_get_hz+0x88>)
    296c:	689b      	ldr	r3, [r3, #8]
    296e:	041b      	lsls	r3, r3, #16
    2970:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2972:	4358      	muls	r0, r3
    2974:	e00a      	b.n	298c <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2976:	2350      	movs	r3, #80	; 0x50
    2978:	4a07      	ldr	r2, [pc, #28]	; (2998 <system_clock_source_get_hz+0x8c>)
    297a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    297c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    297e:	075b      	lsls	r3, r3, #29
    2980:	d504      	bpl.n	298c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2982:	4b04      	ldr	r3, [pc, #16]	; (2994 <system_clock_source_get_hz+0x88>)
    2984:	68d8      	ldr	r0, [r3, #12]
    2986:	e001      	b.n	298c <system_clock_source_get_hz+0x80>
		return 32768UL;
    2988:	2080      	movs	r0, #128	; 0x80
    298a:	0200      	lsls	r0, r0, #8
	}
}
    298c:	bd10      	pop	{r4, pc}
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	00007a84 	.word	0x00007a84
    2994:	20000218 	.word	0x20000218
    2998:	40000800 	.word	0x40000800
    299c:	007a1200 	.word	0x007a1200
    29a0:	02dc6c00 	.word	0x02dc6c00
    29a4:	00006801 	.word	0x00006801

000029a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    29a8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    29aa:	490c      	ldr	r1, [pc, #48]	; (29dc <system_clock_source_osc8m_set_config+0x34>)
    29ac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    29ae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    29b0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    29b2:	7840      	ldrb	r0, [r0, #1]
    29b4:	2201      	movs	r2, #1
    29b6:	4010      	ands	r0, r2
    29b8:	0180      	lsls	r0, r0, #6
    29ba:	2640      	movs	r6, #64	; 0x40
    29bc:	43b3      	bics	r3, r6
    29be:	4303      	orrs	r3, r0
    29c0:	402a      	ands	r2, r5
    29c2:	01d2      	lsls	r2, r2, #7
    29c4:	2080      	movs	r0, #128	; 0x80
    29c6:	4383      	bics	r3, r0
    29c8:	4313      	orrs	r3, r2
    29ca:	2203      	movs	r2, #3
    29cc:	4022      	ands	r2, r4
    29ce:	0212      	lsls	r2, r2, #8
    29d0:	4803      	ldr	r0, [pc, #12]	; (29e0 <system_clock_source_osc8m_set_config+0x38>)
    29d2:	4003      	ands	r3, r0
    29d4:	4313      	orrs	r3, r2
    29d6:	620b      	str	r3, [r1, #32]
}
    29d8:	bd70      	pop	{r4, r5, r6, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	40000800 	.word	0x40000800
    29e0:	fffffcff 	.word	0xfffffcff

000029e4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    29e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e6:	46ce      	mov	lr, r9
    29e8:	4647      	mov	r7, r8
    29ea:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    29ec:	4b19      	ldr	r3, [pc, #100]	; (2a54 <system_clock_source_osc32k_set_config+0x70>)
    29ee:	4699      	mov	r9, r3
    29f0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    29f2:	7841      	ldrb	r1, [r0, #1]
    29f4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    29f6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    29f8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    29fa:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    29fc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    29fe:	7880      	ldrb	r0, [r0, #2]
    2a00:	2101      	movs	r1, #1
    2a02:	4008      	ands	r0, r1
    2a04:	0080      	lsls	r0, r0, #2
    2a06:	2204      	movs	r2, #4
    2a08:	4393      	bics	r3, r2
    2a0a:	4303      	orrs	r3, r0
    2a0c:	4660      	mov	r0, ip
    2a0e:	4008      	ands	r0, r1
    2a10:	00c0      	lsls	r0, r0, #3
    2a12:	3204      	adds	r2, #4
    2a14:	4393      	bics	r3, r2
    2a16:	4303      	orrs	r3, r0
    2a18:	0038      	movs	r0, r7
    2a1a:	4008      	ands	r0, r1
    2a1c:	0180      	lsls	r0, r0, #6
    2a1e:	2740      	movs	r7, #64	; 0x40
    2a20:	43bb      	bics	r3, r7
    2a22:	4303      	orrs	r3, r0
    2a24:	0030      	movs	r0, r6
    2a26:	4008      	ands	r0, r1
    2a28:	01c0      	lsls	r0, r0, #7
    2a2a:	2680      	movs	r6, #128	; 0x80
    2a2c:	43b3      	bics	r3, r6
    2a2e:	4303      	orrs	r3, r0
    2a30:	2007      	movs	r0, #7
    2a32:	4005      	ands	r5, r0
    2a34:	022d      	lsls	r5, r5, #8
    2a36:	4808      	ldr	r0, [pc, #32]	; (2a58 <system_clock_source_osc32k_set_config+0x74>)
    2a38:	4003      	ands	r3, r0
    2a3a:	432b      	orrs	r3, r5
    2a3c:	4021      	ands	r1, r4
    2a3e:	0309      	lsls	r1, r1, #12
    2a40:	4806      	ldr	r0, [pc, #24]	; (2a5c <system_clock_source_osc32k_set_config+0x78>)
    2a42:	4003      	ands	r3, r0
    2a44:	430b      	orrs	r3, r1
    2a46:	464a      	mov	r2, r9
    2a48:	6193      	str	r3, [r2, #24]
}
    2a4a:	bc0c      	pop	{r2, r3}
    2a4c:	4690      	mov	r8, r2
    2a4e:	4699      	mov	r9, r3
    2a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	40000800 	.word	0x40000800
    2a58:	fffff8ff 	.word	0xfffff8ff
    2a5c:	ffffefff 	.word	0xffffefff

00002a60 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2a60:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2a62:	7a03      	ldrb	r3, [r0, #8]
    2a64:	069b      	lsls	r3, r3, #26
    2a66:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2a68:	8942      	ldrh	r2, [r0, #10]
    2a6a:	0592      	lsls	r2, r2, #22
    2a6c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2a6e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2a70:	4918      	ldr	r1, [pc, #96]	; (2ad4 <system_clock_source_dfll_set_config+0x74>)
    2a72:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2a74:	7983      	ldrb	r3, [r0, #6]
    2a76:	79c2      	ldrb	r2, [r0, #7]
    2a78:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2a7a:	8842      	ldrh	r2, [r0, #2]
    2a7c:	8884      	ldrh	r4, [r0, #4]
    2a7e:	4322      	orrs	r2, r4
    2a80:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2a82:	7842      	ldrb	r2, [r0, #1]
    2a84:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2a86:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2a88:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2a8a:	7803      	ldrb	r3, [r0, #0]
    2a8c:	2b04      	cmp	r3, #4
    2a8e:	d011      	beq.n	2ab4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2a90:	2b20      	cmp	r3, #32
    2a92:	d10e      	bne.n	2ab2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2a94:	7b03      	ldrb	r3, [r0, #12]
    2a96:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2a98:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2a9a:	4313      	orrs	r3, r2
    2a9c:	89c2      	ldrh	r2, [r0, #14]
    2a9e:	0412      	lsls	r2, r2, #16
    2aa0:	490d      	ldr	r1, [pc, #52]	; (2ad8 <system_clock_source_dfll_set_config+0x78>)
    2aa2:	400a      	ands	r2, r1
    2aa4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2aa6:	4a0b      	ldr	r2, [pc, #44]	; (2ad4 <system_clock_source_dfll_set_config+0x74>)
    2aa8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2aaa:	6811      	ldr	r1, [r2, #0]
    2aac:	4b0b      	ldr	r3, [pc, #44]	; (2adc <system_clock_source_dfll_set_config+0x7c>)
    2aae:	430b      	orrs	r3, r1
    2ab0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2ab2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ab4:	7b03      	ldrb	r3, [r0, #12]
    2ab6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ab8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2aba:	4313      	orrs	r3, r2
    2abc:	89c2      	ldrh	r2, [r0, #14]
    2abe:	0412      	lsls	r2, r2, #16
    2ac0:	4905      	ldr	r1, [pc, #20]	; (2ad8 <system_clock_source_dfll_set_config+0x78>)
    2ac2:	400a      	ands	r2, r1
    2ac4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ac6:	4a03      	ldr	r2, [pc, #12]	; (2ad4 <system_clock_source_dfll_set_config+0x74>)
    2ac8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2aca:	6813      	ldr	r3, [r2, #0]
    2acc:	2104      	movs	r1, #4
    2ace:	430b      	orrs	r3, r1
    2ad0:	6013      	str	r3, [r2, #0]
    2ad2:	e7ee      	b.n	2ab2 <system_clock_source_dfll_set_config+0x52>
    2ad4:	20000218 	.word	0x20000218
    2ad8:	03ff0000 	.word	0x03ff0000
    2adc:	00000424 	.word	0x00000424

00002ae0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2ae0:	2808      	cmp	r0, #8
    2ae2:	d803      	bhi.n	2aec <system_clock_source_enable+0xc>
    2ae4:	0080      	lsls	r0, r0, #2
    2ae6:	4b25      	ldr	r3, [pc, #148]	; (2b7c <system_clock_source_enable+0x9c>)
    2ae8:	581b      	ldr	r3, [r3, r0]
    2aea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2aec:	2017      	movs	r0, #23
    2aee:	e044      	b.n	2b7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2af0:	4a23      	ldr	r2, [pc, #140]	; (2b80 <system_clock_source_enable+0xa0>)
    2af2:	6a13      	ldr	r3, [r2, #32]
    2af4:	2102      	movs	r1, #2
    2af6:	430b      	orrs	r3, r1
    2af8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2afa:	2000      	movs	r0, #0
    2afc:	e03d      	b.n	2b7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2afe:	4a20      	ldr	r2, [pc, #128]	; (2b80 <system_clock_source_enable+0xa0>)
    2b00:	6993      	ldr	r3, [r2, #24]
    2b02:	2102      	movs	r1, #2
    2b04:	430b      	orrs	r3, r1
    2b06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2b08:	2000      	movs	r0, #0
		break;
    2b0a:	e036      	b.n	2b7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2b0c:	4a1c      	ldr	r2, [pc, #112]	; (2b80 <system_clock_source_enable+0xa0>)
    2b0e:	8a13      	ldrh	r3, [r2, #16]
    2b10:	2102      	movs	r1, #2
    2b12:	430b      	orrs	r3, r1
    2b14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2b16:	2000      	movs	r0, #0
		break;
    2b18:	e02f      	b.n	2b7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2b1a:	4a19      	ldr	r2, [pc, #100]	; (2b80 <system_clock_source_enable+0xa0>)
    2b1c:	8a93      	ldrh	r3, [r2, #20]
    2b1e:	2102      	movs	r1, #2
    2b20:	430b      	orrs	r3, r1
    2b22:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2b24:	2000      	movs	r0, #0
		break;
    2b26:	e028      	b.n	2b7a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b28:	4916      	ldr	r1, [pc, #88]	; (2b84 <system_clock_source_enable+0xa4>)
    2b2a:	680b      	ldr	r3, [r1, #0]
    2b2c:	2202      	movs	r2, #2
    2b2e:	4313      	orrs	r3, r2
    2b30:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2b32:	4b13      	ldr	r3, [pc, #76]	; (2b80 <system_clock_source_enable+0xa0>)
    2b34:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b36:	0019      	movs	r1, r3
    2b38:	320e      	adds	r2, #14
    2b3a:	68cb      	ldr	r3, [r1, #12]
    2b3c:	421a      	tst	r2, r3
    2b3e:	d0fc      	beq.n	2b3a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2b40:	4a10      	ldr	r2, [pc, #64]	; (2b84 <system_clock_source_enable+0xa4>)
    2b42:	6891      	ldr	r1, [r2, #8]
    2b44:	4b0e      	ldr	r3, [pc, #56]	; (2b80 <system_clock_source_enable+0xa0>)
    2b46:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2b48:	6852      	ldr	r2, [r2, #4]
    2b4a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2b4c:	2200      	movs	r2, #0
    2b4e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b50:	0019      	movs	r1, r3
    2b52:	3210      	adds	r2, #16
    2b54:	68cb      	ldr	r3, [r1, #12]
    2b56:	421a      	tst	r2, r3
    2b58:	d0fc      	beq.n	2b54 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2b5a:	4b0a      	ldr	r3, [pc, #40]	; (2b84 <system_clock_source_enable+0xa4>)
    2b5c:	681b      	ldr	r3, [r3, #0]
    2b5e:	b29b      	uxth	r3, r3
    2b60:	4a07      	ldr	r2, [pc, #28]	; (2b80 <system_clock_source_enable+0xa0>)
    2b62:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2b64:	2000      	movs	r0, #0
    2b66:	e008      	b.n	2b7a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2b68:	4905      	ldr	r1, [pc, #20]	; (2b80 <system_clock_source_enable+0xa0>)
    2b6a:	2244      	movs	r2, #68	; 0x44
    2b6c:	5c8b      	ldrb	r3, [r1, r2]
    2b6e:	2002      	movs	r0, #2
    2b70:	4303      	orrs	r3, r0
    2b72:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2b74:	2000      	movs	r0, #0
		break;
    2b76:	e000      	b.n	2b7a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2b78:	2000      	movs	r0, #0
}
    2b7a:	4770      	bx	lr
    2b7c:	00007aa8 	.word	0x00007aa8
    2b80:	40000800 	.word	0x40000800
    2b84:	20000218 	.word	0x20000218

00002b88 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2b88:	b570      	push	{r4, r5, r6, lr}
    2b8a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2b8c:	22c2      	movs	r2, #194	; 0xc2
    2b8e:	00d2      	lsls	r2, r2, #3
    2b90:	4b42      	ldr	r3, [pc, #264]	; (2c9c <system_clock_init+0x114>)
    2b92:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2b94:	4a42      	ldr	r2, [pc, #264]	; (2ca0 <system_clock_init+0x118>)
    2b96:	6853      	ldr	r3, [r2, #4]
    2b98:	211e      	movs	r1, #30
    2b9a:	438b      	bics	r3, r1
    2b9c:	391a      	subs	r1, #26
    2b9e:	430b      	orrs	r3, r1
    2ba0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2ba2:	2201      	movs	r2, #1
    2ba4:	ab01      	add	r3, sp, #4
    2ba6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2ba8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2baa:	4d3e      	ldr	r5, [pc, #248]	; (2ca4 <system_clock_init+0x11c>)
    2bac:	b2e0      	uxtb	r0, r4
    2bae:	a901      	add	r1, sp, #4
    2bb0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bb2:	3401      	adds	r4, #1
    2bb4:	2c25      	cmp	r4, #37	; 0x25
    2bb6:	d1f9      	bne.n	2bac <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2bb8:	4c3b      	ldr	r4, [pc, #236]	; (2ca8 <system_clock_init+0x120>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2bba:	6823      	ldr	r3, [r4, #0]
    2bbc:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2bbe:	4937      	ldr	r1, [pc, #220]	; (2c9c <system_clock_init+0x114>)
    2bc0:	698a      	ldr	r2, [r1, #24]
    2bc2:	0e5b      	lsrs	r3, r3, #25
    2bc4:	041b      	lsls	r3, r3, #16
    2bc6:	4839      	ldr	r0, [pc, #228]	; (2cac <system_clock_init+0x124>)
    2bc8:	4002      	ands	r2, r0
    2bca:	4313      	orrs	r3, r2
    2bcc:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2bce:	a80a      	add	r0, sp, #40	; 0x28
    2bd0:	2301      	movs	r3, #1
    2bd2:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2bd4:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2bd6:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2bd8:	2207      	movs	r2, #7
    2bda:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2bdc:	2500      	movs	r5, #0
    2bde:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2be0:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2be2:	4b33      	ldr	r3, [pc, #204]	; (2cb0 <system_clock_init+0x128>)
    2be4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2be6:	2004      	movs	r0, #4
    2be8:	4b32      	ldr	r3, [pc, #200]	; (2cb4 <system_clock_init+0x12c>)
    2bea:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2bec:	ab05      	add	r3, sp, #20
    2bee:	2200      	movs	r2, #0
    2bf0:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2bf2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2bf4:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2bf6:	2120      	movs	r1, #32
    2bf8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2bfa:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2bfc:	6823      	ldr	r3, [r4, #0]
    2bfe:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2c00:	2b3f      	cmp	r3, #63	; 0x3f
    2c02:	d049      	beq.n	2c98 <system_clock_init+0x110>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2c04:	a805      	add	r0, sp, #20
    2c06:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2c08:	2307      	movs	r3, #7
    2c0a:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2c0c:	3303      	adds	r3, #3
    2c0e:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2c10:	4b29      	ldr	r3, [pc, #164]	; (2cb8 <system_clock_init+0x130>)
    2c12:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2c14:	3bff      	subs	r3, #255	; 0xff
    2c16:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2c18:	4b28      	ldr	r3, [pc, #160]	; (2cbc <system_clock_init+0x134>)
    2c1a:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2c1c:	4b28      	ldr	r3, [pc, #160]	; (2cc0 <system_clock_init+0x138>)
    2c1e:	4798      	blx	r3
	config->run_in_standby  = false;
    2c20:	a804      	add	r0, sp, #16
    2c22:	2400      	movs	r4, #0
    2c24:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2c26:	2501      	movs	r5, #1
    2c28:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2c2a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2c2c:	4b25      	ldr	r3, [pc, #148]	; (2cc4 <system_clock_init+0x13c>)
    2c2e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2c30:	2006      	movs	r0, #6
    2c32:	4e20      	ldr	r6, [pc, #128]	; (2cb4 <system_clock_init+0x12c>)
    2c34:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2c36:	4b24      	ldr	r3, [pc, #144]	; (2cc8 <system_clock_init+0x140>)
    2c38:	4798      	blx	r3
	config->division_factor    = 1;
    2c3a:	a901      	add	r1, sp, #4
    2c3c:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2c3e:	704c      	strb	r4, [r1, #1]
	config->output_enable      = false;
    2c40:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2c42:	2304      	movs	r3, #4
    2c44:	700b      	strb	r3, [r1, #0]
    2c46:	720d      	strb	r5, [r1, #8]
    2c48:	2007      	movs	r0, #7
    2c4a:	4b20      	ldr	r3, [pc, #128]	; (2ccc <system_clock_init+0x144>)
    2c4c:	4798      	blx	r3
    2c4e:	2007      	movs	r0, #7
    2c50:	4b1f      	ldr	r3, [pc, #124]	; (2cd0 <system_clock_init+0x148>)
    2c52:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2c54:	2007      	movs	r0, #7
    2c56:	47b0      	blx	r6
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2c58:	4910      	ldr	r1, [pc, #64]	; (2c9c <system_clock_init+0x114>)
    2c5a:	2210      	movs	r2, #16
    2c5c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2c5e:	421a      	tst	r2, r3
    2c60:	d0fc      	beq.n	2c5c <system_clock_init+0xd4>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2c62:	4a0e      	ldr	r2, [pc, #56]	; (2c9c <system_clock_init+0x114>)
    2c64:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2c66:	2180      	movs	r1, #128	; 0x80
    2c68:	430b      	orrs	r3, r1
    2c6a:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2c6c:	4a19      	ldr	r2, [pc, #100]	; (2cd4 <system_clock_init+0x14c>)
    2c6e:	2300      	movs	r3, #0
    2c70:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2c72:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2c74:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2c76:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2c78:	a901      	add	r1, sp, #4
    2c7a:	2201      	movs	r2, #1
    2c7c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2c7e:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2c80:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2c82:	3307      	adds	r3, #7
    2c84:	700b      	strb	r3, [r1, #0]
    2c86:	720a      	strb	r2, [r1, #8]
    2c88:	2000      	movs	r0, #0
    2c8a:	4b10      	ldr	r3, [pc, #64]	; (2ccc <system_clock_init+0x144>)
    2c8c:	4798      	blx	r3
    2c8e:	2000      	movs	r0, #0
    2c90:	4b0f      	ldr	r3, [pc, #60]	; (2cd0 <system_clock_init+0x148>)
    2c92:	4798      	blx	r3
#endif
}
    2c94:	b00c      	add	sp, #48	; 0x30
    2c96:	bd70      	pop	{r4, r5, r6, pc}
		coarse = 0x1f;
    2c98:	3b20      	subs	r3, #32
    2c9a:	e7b3      	b.n	2c04 <system_clock_init+0x7c>
    2c9c:	40000800 	.word	0x40000800
    2ca0:	41004000 	.word	0x41004000
    2ca4:	000067e5 	.word	0x000067e5
    2ca8:	00806024 	.word	0x00806024
    2cac:	ff80ffff 	.word	0xff80ffff
    2cb0:	000029e5 	.word	0x000029e5
    2cb4:	00002ae1 	.word	0x00002ae1
    2cb8:	000001ff 	.word	0x000001ff
    2cbc:	ffffbb80 	.word	0xffffbb80
    2cc0:	00002a61 	.word	0x00002a61
    2cc4:	000029a9 	.word	0x000029a9
    2cc8:	000065ad 	.word	0x000065ad
    2ccc:	000065d1 	.word	0x000065d1
    2cd0:	00006689 	.word	0x00006689
    2cd4:	40000400 	.word	0x40000400

00002cd8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2cd8:	b510      	push	{r4, lr}
    2cda:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2cdc:	ab03      	add	r3, sp, #12
    2cde:	2200      	movs	r2, #0
    2ce0:	701a      	strb	r2, [r3, #0]
    2ce2:	3203      	adds	r2, #3
    2ce4:	705a      	strb	r2, [r3, #1]
    2ce6:	3a01      	subs	r2, #1
    2ce8:	709a      	strb	r2, [r3, #2]
    2cea:	3a01      	subs	r2, #1
    2cec:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2cee:	4b27      	ldr	r3, [pc, #156]	; (2d8c <udd_sleep_mode+0xb4>)
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	4283      	cmp	r3, r0
    2cf4:	d007      	beq.n	2d06 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2cf6:	2800      	cmp	r0, #0
    2cf8:	d107      	bne.n	2d0a <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2cfa:	4b24      	ldr	r3, [pc, #144]	; (2d8c <udd_sleep_mode+0xb4>)
    2cfc:	781b      	ldrb	r3, [r3, #0]
    2cfe:	2b00      	cmp	r3, #0
    2d00:	d123      	bne.n	2d4a <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2d02:	4b22      	ldr	r3, [pc, #136]	; (2d8c <udd_sleep_mode+0xb4>)
    2d04:	7018      	strb	r0, [r3, #0]
}
    2d06:	b004      	add	sp, #16
    2d08:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2d0a:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2d0c:	5c1b      	ldrb	r3, [r3, r0]
    2d0e:	4a20      	ldr	r2, [pc, #128]	; (2d90 <udd_sleep_mode+0xb8>)
    2d10:	5cd2      	ldrb	r2, [r2, r3]
    2d12:	2aff      	cmp	r2, #255	; 0xff
    2d14:	d100      	bne.n	2d18 <udd_sleep_mode+0x40>
    2d16:	e7fe      	b.n	2d16 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d18:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d1c:	4251      	negs	r1, r2
    2d1e:	414a      	adcs	r2, r1
    2d20:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2d22:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d28:	2100      	movs	r1, #0
    2d2a:	4a1a      	ldr	r2, [pc, #104]	; (2d94 <udd_sleep_mode+0xbc>)
    2d2c:	7011      	strb	r1, [r2, #0]
	return flags;
    2d2e:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2d30:	4917      	ldr	r1, [pc, #92]	; (2d90 <udd_sleep_mode+0xb8>)
    2d32:	5cca      	ldrb	r2, [r1, r3]
    2d34:	3201      	adds	r2, #1
    2d36:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2d38:	2c00      	cmp	r4, #0
    2d3a:	d0de      	beq.n	2cfa <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2d3c:	2201      	movs	r2, #1
    2d3e:	4b15      	ldr	r3, [pc, #84]	; (2d94 <udd_sleep_mode+0xbc>)
    2d40:	701a      	strb	r2, [r3, #0]
    2d42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2d46:	b662      	cpsie	i
    2d48:	e7d7      	b.n	2cfa <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2d4a:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2d4c:	5cd3      	ldrb	r3, [r2, r3]
    2d4e:	4a10      	ldr	r2, [pc, #64]	; (2d90 <udd_sleep_mode+0xb8>)
    2d50:	5cd2      	ldrb	r2, [r2, r3]
    2d52:	2a00      	cmp	r2, #0
    2d54:	d100      	bne.n	2d58 <udd_sleep_mode+0x80>
    2d56:	e7fe      	b.n	2d56 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d58:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d5c:	4251      	negs	r1, r2
    2d5e:	414a      	adcs	r2, r1
    2d60:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2d62:	b672      	cpsid	i
    2d64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d68:	2100      	movs	r1, #0
    2d6a:	4a0a      	ldr	r2, [pc, #40]	; (2d94 <udd_sleep_mode+0xbc>)
    2d6c:	7011      	strb	r1, [r2, #0]
	return flags;
    2d6e:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2d70:	4907      	ldr	r1, [pc, #28]	; (2d90 <udd_sleep_mode+0xb8>)
    2d72:	5cca      	ldrb	r2, [r1, r3]
    2d74:	3a01      	subs	r2, #1
    2d76:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2d78:	2c00      	cmp	r4, #0
    2d7a:	d0c2      	beq.n	2d02 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2d7c:	2201      	movs	r2, #1
    2d7e:	4b05      	ldr	r3, [pc, #20]	; (2d94 <udd_sleep_mode+0xbc>)
    2d80:	701a      	strb	r2, [r3, #0]
    2d82:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2d86:	b662      	cpsie	i
    2d88:	e7bb      	b.n	2d02 <udd_sleep_mode+0x2a>
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	20000288 	.word	0x20000288
    2d90:	20000b24 	.word	0x20000b24
    2d94:	200000f9 	.word	0x200000f9

00002d98 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2d98:	0643      	lsls	r3, r0, #25
    2d9a:	d00b      	beq.n	2db4 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2d9c:	230f      	movs	r3, #15
    2d9e:	4003      	ands	r3, r0
    2da0:	005b      	lsls	r3, r3, #1
    2da2:	09c0      	lsrs	r0, r0, #7
    2da4:	1818      	adds	r0, r3, r0
    2da6:	3802      	subs	r0, #2
    2da8:	0083      	lsls	r3, r0, #2
    2daa:	1818      	adds	r0, r3, r0
    2dac:	0080      	lsls	r0, r0, #2
    2dae:	4b02      	ldr	r3, [pc, #8]	; (2db8 <udd_ep_get_job+0x20>)
    2db0:	1818      	adds	r0, r3, r0
	}
}
    2db2:	4770      	bx	lr
		return NULL;
    2db4:	2000      	movs	r0, #0
    2db6:	e7fc      	b.n	2db2 <udd_ep_get_job+0x1a>
    2db8:	20000238 	.word	0x20000238

00002dbc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dbe:	46d6      	mov	lr, sl
    2dc0:	464f      	mov	r7, r9
    2dc2:	4646      	mov	r6, r8
    2dc4:	b5c0      	push	{r6, r7, lr}
    2dc6:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2dc8:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2dca:	b26b      	sxtb	r3, r5
    2dcc:	2b00      	cmp	r3, #0
    2dce:	db26      	blt.n	2e1e <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2dd0:	0028      	movs	r0, r5
    2dd2:	4b5e      	ldr	r3, [pc, #376]	; (2f4c <udd_ep_transfer_process+0x190>)
    2dd4:	4798      	blx	r3
    2dd6:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2dd8:	270f      	movs	r7, #15
    2dda:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2ddc:	8a03      	ldrh	r3, [r0, #16]
    2dde:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2de0:	464b      	mov	r3, r9
    2de2:	881b      	ldrh	r3, [r3, #0]
    2de4:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2de6:	7c83      	ldrb	r3, [r0, #18]
    2de8:	075b      	lsls	r3, r3, #29
    2dea:	d46a      	bmi.n	2ec2 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2dec:	68e3      	ldr	r3, [r4, #12]
    2dee:	4453      	add	r3, sl
    2df0:	001e      	movs	r6, r3
    2df2:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2df4:	68a3      	ldr	r3, [r4, #8]
    2df6:	429e      	cmp	r6, r3
    2df8:	d800      	bhi.n	2dfc <udd_ep_transfer_process+0x40>
    2dfa:	e074      	b.n	2ee6 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2dfc:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2dfe:	7ca3      	ldrb	r3, [r4, #18]
    2e00:	2201      	movs	r2, #1
    2e02:	4393      	bics	r3, r2
    2e04:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2e06:	6823      	ldr	r3, [r4, #0]
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d003      	beq.n	2e14 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2e0c:	68e1      	ldr	r1, [r4, #12]
    2e0e:	002a      	movs	r2, r5
    2e10:	2000      	movs	r0, #0
    2e12:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2e14:	bc1c      	pop	{r2, r3, r4}
    2e16:	4690      	mov	r8, r2
    2e18:	4699      	mov	r9, r3
    2e1a:	46a2      	mov	sl, r4
    2e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2e1e:	0028      	movs	r0, r5
    2e20:	4b4a      	ldr	r3, [pc, #296]	; (2f4c <udd_ep_transfer_process+0x190>)
    2e22:	4798      	blx	r3
    2e24:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e26:	270f      	movs	r7, #15
    2e28:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e2a:	8a03      	ldrh	r3, [r0, #16]
    2e2c:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2e2e:	464b      	mov	r3, r9
    2e30:	885e      	ldrh	r6, [r3, #2]
    2e32:	68c3      	ldr	r3, [r0, #12]
    2e34:	469c      	mov	ip, r3
    2e36:	4466      	add	r6, ip
    2e38:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2e3a:	6881      	ldr	r1, [r0, #8]
    2e3c:	428e      	cmp	r6, r1
    2e3e:	d025      	beq.n	2e8c <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2e40:	1b8d      	subs	r5, r1, r6
    2e42:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2e44:	4b42      	ldr	r3, [pc, #264]	; (2f50 <udd_ep_transfer_process+0x194>)
    2e46:	429d      	cmp	r5, r3
    2e48:	d906      	bls.n	2e58 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2e4a:	001d      	movs	r5, r3
    2e4c:	4641      	mov	r1, r8
    2e4e:	0018      	movs	r0, r3
    2e50:	4b40      	ldr	r3, [pc, #256]	; (2f54 <udd_ep_transfer_process+0x198>)
    2e52:	4798      	blx	r3
    2e54:	1a6d      	subs	r5, r5, r1
    2e56:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2e58:	7ca2      	ldrb	r2, [r4, #18]
    2e5a:	2300      	movs	r3, #0
    2e5c:	0792      	lsls	r2, r2, #30
    2e5e:	d507      	bpl.n	2e70 <udd_ep_transfer_process+0xb4>
    2e60:	4641      	mov	r1, r8
    2e62:	0028      	movs	r0, r5
    2e64:	4b3c      	ldr	r3, [pc, #240]	; (2f58 <udd_ep_transfer_process+0x19c>)
    2e66:	4798      	blx	r3
    2e68:	b289      	uxth	r1, r1
    2e6a:	424b      	negs	r3, r1
    2e6c:	414b      	adcs	r3, r1
    2e6e:	b2db      	uxtb	r3, r3
    2e70:	005b      	lsls	r3, r3, #1
    2e72:	7ca2      	ldrb	r2, [r4, #18]
    2e74:	2102      	movs	r1, #2
    2e76:	438a      	bics	r2, r1
    2e78:	4313      	orrs	r3, r2
    2e7a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2e7c:	6862      	ldr	r2, [r4, #4]
    2e7e:	1992      	adds	r2, r2, r6
    2e80:	002b      	movs	r3, r5
    2e82:	0039      	movs	r1, r7
    2e84:	4835      	ldr	r0, [pc, #212]	; (2f5c <udd_ep_transfer_process+0x1a0>)
    2e86:	4c36      	ldr	r4, [pc, #216]	; (2f60 <udd_ep_transfer_process+0x1a4>)
    2e88:	47a0      	blx	r4
    2e8a:	e7c3      	b.n	2e14 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2e8c:	7c83      	ldrb	r3, [r0, #18]
    2e8e:	079b      	lsls	r3, r3, #30
    2e90:	d40b      	bmi.n	2eaa <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2e92:	7c83      	ldrb	r3, [r0, #18]
    2e94:	2201      	movs	r2, #1
    2e96:	4393      	bics	r3, r2
    2e98:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2e9a:	6803      	ldr	r3, [r0, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d0b9      	beq.n	2e14 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2ea0:	002a      	movs	r2, r5
    2ea2:	0031      	movs	r1, r6
    2ea4:	2000      	movs	r0, #0
    2ea6:	4798      	blx	r3
    2ea8:	e7b4      	b.n	2e14 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2eaa:	7c83      	ldrb	r3, [r0, #18]
    2eac:	2202      	movs	r2, #2
    2eae:	4393      	bics	r3, r2
    2eb0:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2eb2:	6842      	ldr	r2, [r0, #4]
    2eb4:	1992      	adds	r2, r2, r6
    2eb6:	2300      	movs	r3, #0
    2eb8:	0039      	movs	r1, r7
    2eba:	4828      	ldr	r0, [pc, #160]	; (2f5c <udd_ep_transfer_process+0x1a0>)
    2ebc:	4c28      	ldr	r4, [pc, #160]	; (2f60 <udd_ep_transfer_process+0x1a4>)
    2ebe:	47a0      	blx	r4
    2ec0:	e7a8      	b.n	2e14 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2ec2:	6843      	ldr	r3, [r0, #4]
    2ec4:	68c2      	ldr	r2, [r0, #12]
    2ec6:	4694      	mov	ip, r2
    2ec8:	4463      	add	r3, ip
    2eca:	001e      	movs	r6, r3
    2ecc:	4641      	mov	r1, r8
    2ece:	6880      	ldr	r0, [r0, #8]
    2ed0:	4b21      	ldr	r3, [pc, #132]	; (2f58 <udd_ep_transfer_process+0x19c>)
    2ed2:	4798      	blx	r3
    2ed4:	000a      	movs	r2, r1
    2ed6:	1e7b      	subs	r3, r7, #1
    2ed8:	019b      	lsls	r3, r3, #6
    2eda:	4922      	ldr	r1, [pc, #136]	; (2f64 <udd_ep_transfer_process+0x1a8>)
    2edc:	1859      	adds	r1, r3, r1
    2ede:	0030      	movs	r0, r6
    2ee0:	4b21      	ldr	r3, [pc, #132]	; (2f68 <udd_ep_transfer_process+0x1ac>)
    2ee2:	4798      	blx	r3
    2ee4:	e782      	b.n	2dec <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2ee6:	464a      	mov	r2, r9
    2ee8:	8892      	ldrh	r2, [r2, #4]
    2eea:	4552      	cmp	r2, sl
    2eec:	d000      	beq.n	2ef0 <udd_ep_transfer_process+0x134>
    2eee:	e786      	b.n	2dfe <udd_ep_transfer_process+0x42>
    2ef0:	429e      	cmp	r6, r3
    2ef2:	d100      	bne.n	2ef6 <udd_ep_transfer_process+0x13a>
    2ef4:	e783      	b.n	2dfe <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2ef6:	1b9b      	subs	r3, r3, r6
    2ef8:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2efa:	4b15      	ldr	r3, [pc, #84]	; (2f50 <udd_ep_transfer_process+0x194>)
    2efc:	429d      	cmp	r5, r3
    2efe:	d916      	bls.n	2f2e <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2f00:	001d      	movs	r5, r3
    2f02:	4641      	mov	r1, r8
    2f04:	0018      	movs	r0, r3
    2f06:	4b13      	ldr	r3, [pc, #76]	; (2f54 <udd_ep_transfer_process+0x198>)
    2f08:	4798      	blx	r3
    2f0a:	1a6b      	subs	r3, r5, r1
    2f0c:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2f0e:	4598      	cmp	r8, r3
    2f10:	d914      	bls.n	2f3c <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2f12:	7ca3      	ldrb	r3, [r4, #18]
    2f14:	2204      	movs	r2, #4
    2f16:	4313      	orrs	r3, r2
    2f18:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2f1a:	1e7a      	subs	r2, r7, #1
    2f1c:	0192      	lsls	r2, r2, #6
    2f1e:	4b11      	ldr	r3, [pc, #68]	; (2f64 <udd_ep_transfer_process+0x1a8>)
    2f20:	18d2      	adds	r2, r2, r3
    2f22:	4643      	mov	r3, r8
    2f24:	0039      	movs	r1, r7
    2f26:	480d      	ldr	r0, [pc, #52]	; (2f5c <udd_ep_transfer_process+0x1a0>)
    2f28:	4c10      	ldr	r4, [pc, #64]	; (2f6c <udd_ep_transfer_process+0x1b0>)
    2f2a:	47a0      	blx	r4
    2f2c:	e772      	b.n	2e14 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2f2e:	4641      	mov	r1, r8
    2f30:	0028      	movs	r0, r5
    2f32:	4b09      	ldr	r3, [pc, #36]	; (2f58 <udd_ep_transfer_process+0x19c>)
    2f34:	4798      	blx	r3
    2f36:	1a6b      	subs	r3, r5, r1
    2f38:	b29b      	uxth	r3, r3
    2f3a:	e7e8      	b.n	2f0e <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2f3c:	6862      	ldr	r2, [r4, #4]
    2f3e:	1992      	adds	r2, r2, r6
    2f40:	0039      	movs	r1, r7
    2f42:	4806      	ldr	r0, [pc, #24]	; (2f5c <udd_ep_transfer_process+0x1a0>)
    2f44:	4c09      	ldr	r4, [pc, #36]	; (2f6c <udd_ep_transfer_process+0x1b0>)
    2f46:	47a0      	blx	r4
    2f48:	e764      	b.n	2e14 <udd_ep_transfer_process+0x58>
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	00002d99 	.word	0x00002d99
    2f50:	00001fff 	.word	0x00001fff
    2f54:	00006d3d 	.word	0x00006d3d
    2f58:	00006b69 	.word	0x00006b69
    2f5c:	200003d0 	.word	0x200003d0
    2f60:	00004609 	.word	0x00004609
    2f64:	20000350 	.word	0x20000350
    2f68:	00007039 	.word	0x00007039
    2f6c:	0000465d 	.word	0x0000465d

00002f70 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2f70:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2f72:	2205      	movs	r2, #5
    2f74:	4b05      	ldr	r3, [pc, #20]	; (2f8c <udd_ctrl_stall_data+0x1c>)
    2f76:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2f78:	4c05      	ldr	r4, [pc, #20]	; (2f90 <udd_ctrl_stall_data+0x20>)
    2f7a:	2180      	movs	r1, #128	; 0x80
    2f7c:	0020      	movs	r0, r4
    2f7e:	4b05      	ldr	r3, [pc, #20]	; (2f94 <udd_ctrl_stall_data+0x24>)
    2f80:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2f82:	2100      	movs	r1, #0
    2f84:	0020      	movs	r0, r4
    2f86:	4b04      	ldr	r3, [pc, #16]	; (2f98 <udd_ctrl_stall_data+0x28>)
    2f88:	4798      	blx	r3
}
    2f8a:	bd10      	pop	{r4, pc}
    2f8c:	20000236 	.word	0x20000236
    2f90:	200003d0 	.word	0x200003d0
    2f94:	0000455d 	.word	0x0000455d
    2f98:	00004583 	.word	0x00004583

00002f9c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    2f9c:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    2f9e:	4c08      	ldr	r4, [pc, #32]	; (2fc0 <_usb_device_lpm_suspend+0x24>)
    2fa0:	2106      	movs	r1, #6
    2fa2:	0020      	movs	r0, r4
    2fa4:	4d07      	ldr	r5, [pc, #28]	; (2fc4 <_usb_device_lpm_suspend+0x28>)
    2fa6:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2fa8:	2104      	movs	r1, #4
    2faa:	0020      	movs	r0, r4
    2fac:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2fae:	2102      	movs	r1, #2
    2fb0:	0020      	movs	r0, r4
    2fb2:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <_usb_device_lpm_suspend+0x2c>)
    2fb4:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    2fb6:	2002      	movs	r0, #2
    2fb8:	4b04      	ldr	r3, [pc, #16]	; (2fcc <_usb_device_lpm_suspend+0x30>)
    2fba:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    2fbc:	bd70      	pop	{r4, r5, r6, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	200003d0 	.word	0x200003d0
    2fc4:	00004071 	.word	0x00004071
    2fc8:	00004051 	.word	0x00004051
    2fcc:	00002cd9 	.word	0x00002cd9

00002fd0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    2fd0:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2fd2:	4b13      	ldr	r3, [pc, #76]	; (3020 <_usb_on_wakeup+0x50>)
    2fd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2fd6:	069b      	lsls	r3, r3, #26
    2fd8:	d41c      	bmi.n	3014 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2fda:	4911      	ldr	r1, [pc, #68]	; (3020 <_usb_on_wakeup+0x50>)
    2fdc:	22d0      	movs	r2, #208	; 0xd0
    2fde:	68cb      	ldr	r3, [r1, #12]
    2fe0:	4013      	ands	r3, r2
    2fe2:	2bd0      	cmp	r3, #208	; 0xd0
    2fe4:	d1fb      	bne.n	2fde <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2fe6:	4c0f      	ldr	r4, [pc, #60]	; (3024 <_usb_on_wakeup+0x54>)
    2fe8:	2102      	movs	r1, #2
    2fea:	0020      	movs	r0, r4
    2fec:	4b0e      	ldr	r3, [pc, #56]	; (3028 <_usb_on_wakeup+0x58>)
    2fee:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    2ff0:	2104      	movs	r1, #4
    2ff2:	0020      	movs	r0, r4
    2ff4:	4d0d      	ldr	r5, [pc, #52]	; (302c <_usb_on_wakeup+0x5c>)
    2ff6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    2ff8:	4a0d      	ldr	r2, [pc, #52]	; (3030 <_usb_on_wakeup+0x60>)
    2ffa:	2106      	movs	r1, #6
    2ffc:	0020      	movs	r0, r4
    2ffe:	4b0d      	ldr	r3, [pc, #52]	; (3034 <_usb_on_wakeup+0x64>)
    3000:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3002:	2106      	movs	r1, #6
    3004:	0020      	movs	r0, r4
    3006:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3008:	2003      	movs	r0, #3
    300a:	4b0b      	ldr	r3, [pc, #44]	; (3038 <_usb_on_wakeup+0x68>)
    300c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    300e:	4b0b      	ldr	r3, [pc, #44]	; (303c <_usb_on_wakeup+0x6c>)
    3010:	4798      	blx	r3
#endif
}
    3012:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3014:	4902      	ldr	r1, [pc, #8]	; (3020 <_usb_on_wakeup+0x50>)
    3016:	2210      	movs	r2, #16
    3018:	68cb      	ldr	r3, [r1, #12]
    301a:	421a      	tst	r2, r3
    301c:	d0fc      	beq.n	3018 <_usb_on_wakeup+0x48>
    301e:	e7e2      	b.n	2fe6 <_usb_on_wakeup+0x16>
    3020:	40000800 	.word	0x40000800
    3024:	200003d0 	.word	0x200003d0
    3028:	00004071 	.word	0x00004071
    302c:	00004051 	.word	0x00004051
    3030:	00002f9d 	.word	0x00002f9d
    3034:	0000402d 	.word	0x0000402d
    3038:	00002cd9 	.word	0x00002cd9
    303c:	00003bfd 	.word	0x00003bfd

00003040 <_usb_on_bus_reset>:
{
    3040:	b530      	push	{r4, r5, lr}
    3042:	b083      	sub	sp, #12
    3044:	0004      	movs	r4, r0
	udc_reset();
    3046:	4b1e      	ldr	r3, [pc, #120]	; (30c0 <_usb_on_bus_reset+0x80>)
    3048:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    304a:	2380      	movs	r3, #128	; 0x80
    304c:	6822      	ldr	r2, [r4, #0]
    304e:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    3050:	ad01      	add	r5, sp, #4
    3052:	0028      	movs	r0, r5
    3054:	4b1b      	ldr	r3, [pc, #108]	; (30c4 <_usb_on_bus_reset+0x84>)
    3056:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    3058:	2303      	movs	r3, #3
    305a:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    305c:	0029      	movs	r1, r5
    305e:	0020      	movs	r0, r4
    3060:	4b19      	ldr	r3, [pc, #100]	; (30c8 <_usb_on_bus_reset+0x88>)
    3062:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3064:	4919      	ldr	r1, [pc, #100]	; (30cc <_usb_on_bus_reset+0x8c>)
    3066:	0020      	movs	r0, r4
    3068:	4b19      	ldr	r3, [pc, #100]	; (30d0 <_usb_on_bus_reset+0x90>)
    306a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    306c:	4b19      	ldr	r3, [pc, #100]	; (30d4 <_usb_on_bus_reset+0x94>)
    306e:	2202      	movs	r2, #2
    3070:	2100      	movs	r1, #0
    3072:	0020      	movs	r0, r4
    3074:	4d18      	ldr	r5, [pc, #96]	; (30d8 <_usb_on_bus_reset+0x98>)
    3076:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3078:	4b18      	ldr	r3, [pc, #96]	; (30dc <_usb_on_bus_reset+0x9c>)
    307a:	2200      	movs	r2, #0
    307c:	2100      	movs	r1, #0
    307e:	0020      	movs	r0, r4
    3080:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3082:	4b17      	ldr	r3, [pc, #92]	; (30e0 <_usb_on_bus_reset+0xa0>)
    3084:	2201      	movs	r2, #1
    3086:	2100      	movs	r1, #0
    3088:	0020      	movs	r0, r4
    308a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    308c:	2202      	movs	r2, #2
    308e:	2100      	movs	r1, #0
    3090:	0020      	movs	r0, r4
    3092:	4d14      	ldr	r5, [pc, #80]	; (30e4 <_usb_on_bus_reset+0xa4>)
    3094:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3096:	2200      	movs	r2, #0
    3098:	2100      	movs	r1, #0
    309a:	0020      	movs	r0, r4
    309c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    309e:	2201      	movs	r2, #1
    30a0:	2100      	movs	r1, #0
    30a2:	0020      	movs	r0, r4
    30a4:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    30a6:	6821      	ldr	r1, [r4, #0]
    30a8:	890b      	ldrh	r3, [r1, #8]
    30aa:	4a0f      	ldr	r2, [pc, #60]	; (30e8 <_usb_on_bus_reset+0xa8>)
    30ac:	401a      	ands	r2, r3
    30ae:	2380      	movs	r3, #128	; 0x80
    30b0:	00db      	lsls	r3, r3, #3
    30b2:	4313      	orrs	r3, r2
    30b4:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    30b6:	2200      	movs	r2, #0
    30b8:	4b0c      	ldr	r3, [pc, #48]	; (30ec <_usb_on_bus_reset+0xac>)
    30ba:	701a      	strb	r2, [r3, #0]
}
    30bc:	b003      	add	sp, #12
    30be:	bd30      	pop	{r4, r5, pc}
    30c0:	00001cd5 	.word	0x00001cd5
    30c4:	0000427d 	.word	0x0000427d
    30c8:	0000428d 	.word	0x0000428d
    30cc:	20000550 	.word	0x20000550
    30d0:	000046ad 	.word	0x000046ad
    30d4:	00003229 	.word	0x00003229
    30d8:	0000408d 	.word	0x0000408d
    30dc:	00003545 	.word	0x00003545
    30e0:	0000312d 	.word	0x0000312d
    30e4:	000040dd 	.word	0x000040dd
    30e8:	fffff3ff 	.word	0xfffff3ff
    30ec:	20000236 	.word	0x20000236

000030f0 <udd_ctrl_send_zlp_in>:
{
    30f0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    30f2:	2203      	movs	r2, #3
    30f4:	4b07      	ldr	r3, [pc, #28]	; (3114 <udd_ctrl_send_zlp_in+0x24>)
    30f6:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    30f8:	4c07      	ldr	r4, [pc, #28]	; (3118 <udd_ctrl_send_zlp_in+0x28>)
    30fa:	4908      	ldr	r1, [pc, #32]	; (311c <udd_ctrl_send_zlp_in+0x2c>)
    30fc:	0020      	movs	r0, r4
    30fe:	4b08      	ldr	r3, [pc, #32]	; (3120 <udd_ctrl_send_zlp_in+0x30>)
    3100:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    3102:	4b08      	ldr	r3, [pc, #32]	; (3124 <udd_ctrl_send_zlp_in+0x34>)
    3104:	689a      	ldr	r2, [r3, #8]
    3106:	2300      	movs	r3, #0
    3108:	2100      	movs	r1, #0
    310a:	0020      	movs	r0, r4
    310c:	4c06      	ldr	r4, [pc, #24]	; (3128 <udd_ctrl_send_zlp_in+0x38>)
    310e:	47a0      	blx	r4
}
    3110:	bd10      	pop	{r4, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	20000236 	.word	0x20000236
    3118:	200003d0 	.word	0x200003d0
    311c:	20000550 	.word	0x20000550
    3120:	000046ad 	.word	0x000046ad
    3124:	20000538 	.word	0x20000538
    3128:	00004609 	.word	0x00004609

0000312c <_usb_ep0_on_tansfer_fail>:
{
    312c:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    312e:	7989      	ldrb	r1, [r1, #6]
    3130:	b24b      	sxtb	r3, r1
    3132:	2b00      	cmp	r3, #0
    3134:	db06      	blt.n	3144 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3136:	4b0e      	ldr	r3, [pc, #56]	; (3170 <_usb_ep0_on_tansfer_fail+0x44>)
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	2b02      	cmp	r3, #2
    313c:	d00f      	beq.n	315e <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    313e:	2b03      	cmp	r3, #3
    3140:	d011      	beq.n	3166 <_usb_ep0_on_tansfer_fail+0x3a>
}
    3142:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3144:	4b0a      	ldr	r3, [pc, #40]	; (3170 <_usb_ep0_on_tansfer_fail+0x44>)
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	2b01      	cmp	r3, #1
    314a:	d005      	beq.n	3158 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    314c:	2b04      	cmp	r3, #4
    314e:	d1f8      	bne.n	3142 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3150:	4808      	ldr	r0, [pc, #32]	; (3174 <_usb_ep0_on_tansfer_fail+0x48>)
    3152:	4b09      	ldr	r3, [pc, #36]	; (3178 <_usb_ep0_on_tansfer_fail+0x4c>)
    3154:	4798      	blx	r3
    3156:	e7f4      	b.n	3142 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    3158:	4b08      	ldr	r3, [pc, #32]	; (317c <_usb_ep0_on_tansfer_fail+0x50>)
    315a:	4798      	blx	r3
    315c:	e7f1      	b.n	3142 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    315e:	2204      	movs	r2, #4
    3160:	4b03      	ldr	r3, [pc, #12]	; (3170 <_usb_ep0_on_tansfer_fail+0x44>)
    3162:	701a      	strb	r2, [r3, #0]
    3164:	e7ed      	b.n	3142 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3166:	4803      	ldr	r0, [pc, #12]	; (3174 <_usb_ep0_on_tansfer_fail+0x48>)
    3168:	4b03      	ldr	r3, [pc, #12]	; (3178 <_usb_ep0_on_tansfer_fail+0x4c>)
    316a:	4798      	blx	r3
}
    316c:	e7e9      	b.n	3142 <_usb_ep0_on_tansfer_fail+0x16>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	20000236 	.word	0x20000236
    3174:	200003d0 	.word	0x200003d0
    3178:	0000455d 	.word	0x0000455d
    317c:	000030f1 	.word	0x000030f1

00003180 <udd_ctrl_in_sent>:
{
    3180:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3182:	4b20      	ldr	r3, [pc, #128]	; (3204 <udd_ctrl_in_sent+0x84>)
    3184:	881b      	ldrh	r3, [r3, #0]
    3186:	4a20      	ldr	r2, [pc, #128]	; (3208 <udd_ctrl_in_sent+0x88>)
    3188:	8994      	ldrh	r4, [r2, #12]
    318a:	1ae4      	subs	r4, r4, r3
    318c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    318e:	2c00      	cmp	r4, #0
    3190:	d118      	bne.n	31c4 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3192:	4a1e      	ldr	r2, [pc, #120]	; (320c <udd_ctrl_in_sent+0x8c>)
    3194:	8811      	ldrh	r1, [r2, #0]
    3196:	185b      	adds	r3, r3, r1
    3198:	b29b      	uxth	r3, r3
    319a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    319c:	4a1a      	ldr	r2, [pc, #104]	; (3208 <udd_ctrl_in_sent+0x88>)
    319e:	88d2      	ldrh	r2, [r2, #6]
    31a0:	429a      	cmp	r2, r3
    31a2:	d023      	beq.n	31ec <udd_ctrl_in_sent+0x6c>
    31a4:	4b1a      	ldr	r3, [pc, #104]	; (3210 <udd_ctrl_in_sent+0x90>)
    31a6:	781b      	ldrb	r3, [r3, #0]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d11f      	bne.n	31ec <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    31ac:	4b16      	ldr	r3, [pc, #88]	; (3208 <udd_ctrl_in_sent+0x88>)
    31ae:	695b      	ldr	r3, [r3, #20]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d023      	beq.n	31fc <udd_ctrl_in_sent+0x7c>
    31b4:	4798      	blx	r3
    31b6:	2800      	cmp	r0, #0
    31b8:	d020      	beq.n	31fc <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    31ba:	2200      	movs	r2, #0
    31bc:	4b11      	ldr	r3, [pc, #68]	; (3204 <udd_ctrl_in_sent+0x84>)
    31be:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    31c0:	4b11      	ldr	r3, [pc, #68]	; (3208 <udd_ctrl_in_sent+0x88>)
    31c2:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    31c4:	2c3f      	cmp	r4, #63	; 0x3f
    31c6:	d919      	bls.n	31fc <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    31c8:	2200      	movs	r2, #0
    31ca:	4b11      	ldr	r3, [pc, #68]	; (3210 <udd_ctrl_in_sent+0x90>)
    31cc:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    31ce:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    31d0:	4d0c      	ldr	r5, [pc, #48]	; (3204 <udd_ctrl_in_sent+0x84>)
    31d2:	882b      	ldrh	r3, [r5, #0]
    31d4:	4a0c      	ldr	r2, [pc, #48]	; (3208 <udd_ctrl_in_sent+0x88>)
    31d6:	6892      	ldr	r2, [r2, #8]
    31d8:	18d2      	adds	r2, r2, r3
    31da:	0023      	movs	r3, r4
    31dc:	2100      	movs	r1, #0
    31de:	480d      	ldr	r0, [pc, #52]	; (3214 <udd_ctrl_in_sent+0x94>)
    31e0:	4e0d      	ldr	r6, [pc, #52]	; (3218 <udd_ctrl_in_sent+0x98>)
    31e2:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    31e4:	882b      	ldrh	r3, [r5, #0]
    31e6:	18e4      	adds	r4, r4, r3
    31e8:	802c      	strh	r4, [r5, #0]
}
    31ea:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    31ec:	2204      	movs	r2, #4
    31ee:	4b0b      	ldr	r3, [pc, #44]	; (321c <udd_ctrl_in_sent+0x9c>)
    31f0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    31f2:	490b      	ldr	r1, [pc, #44]	; (3220 <udd_ctrl_in_sent+0xa0>)
    31f4:	4807      	ldr	r0, [pc, #28]	; (3214 <udd_ctrl_in_sent+0x94>)
    31f6:	4b0b      	ldr	r3, [pc, #44]	; (3224 <udd_ctrl_in_sent+0xa4>)
    31f8:	4798      	blx	r3
			return;
    31fa:	e7f6      	b.n	31ea <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    31fc:	2201      	movs	r2, #1
    31fe:	4b04      	ldr	r3, [pc, #16]	; (3210 <udd_ctrl_in_sent+0x90>)
    3200:	701a      	strb	r2, [r3, #0]
    3202:	e7e5      	b.n	31d0 <udd_ctrl_in_sent+0x50>
    3204:	20000232 	.word	0x20000232
    3208:	20000538 	.word	0x20000538
    320c:	20000234 	.word	0x20000234
    3210:	20000230 	.word	0x20000230
    3214:	200003d0 	.word	0x200003d0
    3218:	00004609 	.word	0x00004609
    321c:	20000236 	.word	0x20000236
    3220:	20000550 	.word	0x20000550
    3224:	000046ad 	.word	0x000046ad

00003228 <_usb_ep0_on_setup>:
{
    3228:	b510      	push	{r4, lr}
    322a:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    322c:	4b2c      	ldr	r3, [pc, #176]	; (32e0 <_usb_ep0_on_setup+0xb8>)
    322e:	781b      	ldrb	r3, [r3, #0]
    3230:	2b00      	cmp	r3, #0
    3232:	d007      	beq.n	3244 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    3234:	4b2b      	ldr	r3, [pc, #172]	; (32e4 <_usb_ep0_on_setup+0xbc>)
    3236:	691b      	ldr	r3, [r3, #16]
    3238:	2b00      	cmp	r3, #0
    323a:	d000      	beq.n	323e <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    323c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    323e:	2200      	movs	r2, #0
    3240:	4b27      	ldr	r3, [pc, #156]	; (32e0 <_usb_ep0_on_setup+0xb8>)
    3242:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    3244:	8823      	ldrh	r3, [r4, #0]
    3246:	2b08      	cmp	r3, #8
    3248:	d002      	beq.n	3250 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    324a:	4b27      	ldr	r3, [pc, #156]	; (32e8 <_usb_ep0_on_setup+0xc0>)
    324c:	4798      	blx	r3
}
    324e:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    3250:	4a24      	ldr	r2, [pc, #144]	; (32e4 <_usb_ep0_on_setup+0xbc>)
    3252:	4b26      	ldr	r3, [pc, #152]	; (32ec <_usb_ep0_on_setup+0xc4>)
    3254:	7819      	ldrb	r1, [r3, #0]
    3256:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    3258:	7859      	ldrb	r1, [r3, #1]
    325a:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    325c:	78d8      	ldrb	r0, [r3, #3]
    325e:	0200      	lsls	r0, r0, #8
    3260:	7899      	ldrb	r1, [r3, #2]
    3262:	1809      	adds	r1, r1, r0
    3264:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    3266:	7958      	ldrb	r0, [r3, #5]
    3268:	0200      	lsls	r0, r0, #8
    326a:	7919      	ldrb	r1, [r3, #4]
    326c:	1809      	adds	r1, r1, r0
    326e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3270:	79d9      	ldrb	r1, [r3, #7]
    3272:	0209      	lsls	r1, r1, #8
    3274:	799b      	ldrb	r3, [r3, #6]
    3276:	185b      	adds	r3, r3, r1
    3278:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    327a:	4b1d      	ldr	r3, [pc, #116]	; (32f0 <_usb_ep0_on_setup+0xc8>)
    327c:	4798      	blx	r3
    327e:	2800      	cmp	r0, #0
    3280:	d016      	beq.n	32b0 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    3282:	4b18      	ldr	r3, [pc, #96]	; (32e4 <_usb_ep0_on_setup+0xbc>)
    3284:	781b      	ldrb	r3, [r3, #0]
    3286:	2b7f      	cmp	r3, #127	; 0x7f
    3288:	d815      	bhi.n	32b6 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    328a:	4b16      	ldr	r3, [pc, #88]	; (32e4 <_usb_ep0_on_setup+0xbc>)
    328c:	88db      	ldrh	r3, [r3, #6]
    328e:	2b00      	cmp	r3, #0
    3290:	d022      	beq.n	32d8 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    3292:	2300      	movs	r3, #0
    3294:	4a17      	ldr	r2, [pc, #92]	; (32f4 <_usb_ep0_on_setup+0xcc>)
    3296:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3298:	4a17      	ldr	r2, [pc, #92]	; (32f8 <_usb_ep0_on_setup+0xd0>)
    329a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    329c:	2201      	movs	r2, #1
    329e:	4b10      	ldr	r3, [pc, #64]	; (32e0 <_usb_ep0_on_setup+0xb8>)
    32a0:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    32a2:	2340      	movs	r3, #64	; 0x40
    32a4:	4a11      	ldr	r2, [pc, #68]	; (32ec <_usb_ep0_on_setup+0xc4>)
    32a6:	2100      	movs	r1, #0
    32a8:	4814      	ldr	r0, [pc, #80]	; (32fc <_usb_ep0_on_setup+0xd4>)
    32aa:	4c15      	ldr	r4, [pc, #84]	; (3300 <_usb_ep0_on_setup+0xd8>)
    32ac:	47a0      	blx	r4
    32ae:	e7ce      	b.n	324e <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    32b0:	4b0d      	ldr	r3, [pc, #52]	; (32e8 <_usb_ep0_on_setup+0xc0>)
    32b2:	4798      	blx	r3
			return;
    32b4:	e7cb      	b.n	324e <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    32b6:	2300      	movs	r3, #0
    32b8:	4a0e      	ldr	r2, [pc, #56]	; (32f4 <_usb_ep0_on_setup+0xcc>)
    32ba:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    32bc:	4a0e      	ldr	r2, [pc, #56]	; (32f8 <_usb_ep0_on_setup+0xd0>)
    32be:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    32c0:	2202      	movs	r2, #2
    32c2:	4b07      	ldr	r3, [pc, #28]	; (32e0 <_usb_ep0_on_setup+0xb8>)
    32c4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    32c6:	2340      	movs	r3, #64	; 0x40
    32c8:	4a08      	ldr	r2, [pc, #32]	; (32ec <_usb_ep0_on_setup+0xc4>)
    32ca:	2100      	movs	r1, #0
    32cc:	480b      	ldr	r0, [pc, #44]	; (32fc <_usb_ep0_on_setup+0xd4>)
    32ce:	4c0c      	ldr	r4, [pc, #48]	; (3300 <_usb_ep0_on_setup+0xd8>)
    32d0:	47a0      	blx	r4
			udd_ctrl_in_sent();
    32d2:	4b0c      	ldr	r3, [pc, #48]	; (3304 <_usb_ep0_on_setup+0xdc>)
    32d4:	4798      	blx	r3
    32d6:	e7ba      	b.n	324e <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    32d8:	4b0b      	ldr	r3, [pc, #44]	; (3308 <_usb_ep0_on_setup+0xe0>)
    32da:	4798      	blx	r3
				return;
    32dc:	e7b7      	b.n	324e <_usb_ep0_on_setup+0x26>
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	20000236 	.word	0x20000236
    32e4:	20000538 	.word	0x20000538
    32e8:	00002f71 	.word	0x00002f71
    32ec:	20000550 	.word	0x20000550
    32f0:	00001d65 	.word	0x00001d65
    32f4:	20000234 	.word	0x20000234
    32f8:	20000232 	.word	0x20000232
    32fc:	200003d0 	.word	0x200003d0
    3300:	0000465d 	.word	0x0000465d
    3304:	00003181 	.word	0x00003181
    3308:	000030f1 	.word	0x000030f1

0000330c <_usb_on_sof_notify>:
{
    330c:	b510      	push	{r4, lr}
	udc_sof_notify();
    330e:	4b02      	ldr	r3, [pc, #8]	; (3318 <_usb_on_sof_notify+0xc>)
    3310:	4798      	blx	r3
	UDC_SOF_EVENT();
    3312:	4b02      	ldr	r3, [pc, #8]	; (331c <_usb_on_sof_notify+0x10>)
    3314:	4798      	blx	r3
}
    3316:	bd10      	pop	{r4, pc}
    3318:	00001d21 	.word	0x00001d21
    331c:	00003c09 	.word	0x00003c09

00003320 <_usb_on_suspend>:
{
    3320:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3322:	4c07      	ldr	r4, [pc, #28]	; (3340 <_usb_on_suspend+0x20>)
    3324:	2104      	movs	r1, #4
    3326:	0020      	movs	r0, r4
    3328:	4b06      	ldr	r3, [pc, #24]	; (3344 <_usb_on_suspend+0x24>)
    332a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    332c:	2102      	movs	r1, #2
    332e:	0020      	movs	r0, r4
    3330:	4b05      	ldr	r3, [pc, #20]	; (3348 <_usb_on_suspend+0x28>)
    3332:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3334:	2001      	movs	r0, #1
    3336:	4b05      	ldr	r3, [pc, #20]	; (334c <_usb_on_suspend+0x2c>)
    3338:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    333a:	4b05      	ldr	r3, [pc, #20]	; (3350 <_usb_on_suspend+0x30>)
    333c:	4798      	blx	r3
}
    333e:	bd10      	pop	{r4, pc}
    3340:	200003d0 	.word	0x200003d0
    3344:	00004071 	.word	0x00004071
    3348:	00004051 	.word	0x00004051
    334c:	00002cd9 	.word	0x00002cd9
    3350:	00003bf1 	.word	0x00003bf1

00003354 <udd_ep_abort>:
{
    3354:	b510      	push	{r4, lr}
    3356:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    3358:	0001      	movs	r1, r0
    335a:	480a      	ldr	r0, [pc, #40]	; (3384 <udd_ep_abort+0x30>)
    335c:	4b0a      	ldr	r3, [pc, #40]	; (3388 <udd_ep_abort+0x34>)
    335e:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    3360:	0020      	movs	r0, r4
    3362:	4b0a      	ldr	r3, [pc, #40]	; (338c <udd_ep_abort+0x38>)
    3364:	4798      	blx	r3
	if (!ptr_job->busy) {
    3366:	7c83      	ldrb	r3, [r0, #18]
    3368:	07db      	lsls	r3, r3, #31
    336a:	d50a      	bpl.n	3382 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    336c:	7c83      	ldrb	r3, [r0, #18]
    336e:	2201      	movs	r2, #1
    3370:	4393      	bics	r3, r2
    3372:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3374:	6803      	ldr	r3, [r0, #0]
    3376:	2b00      	cmp	r3, #0
    3378:	d003      	beq.n	3382 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    337a:	68c1      	ldr	r1, [r0, #12]
    337c:	0022      	movs	r2, r4
    337e:	2001      	movs	r0, #1
    3380:	4798      	blx	r3
}
    3382:	bd10      	pop	{r4, pc}
    3384:	200003d0 	.word	0x200003d0
    3388:	000044fd 	.word	0x000044fd
    338c:	00002d99 	.word	0x00002d99

00003390 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3390:	4b02      	ldr	r3, [pc, #8]	; (339c <udd_get_frame_number+0xc>)
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	8a18      	ldrh	r0, [r3, #16]
    3396:	0480      	lsls	r0, r0, #18
    3398:	0d40      	lsrs	r0, r0, #21
}
    339a:	4770      	bx	lr
    339c:	200003d0 	.word	0x200003d0

000033a0 <udd_ep_free>:
{
    33a0:	b570      	push	{r4, r5, r6, lr}
    33a2:	b082      	sub	sp, #8
    33a4:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    33a6:	ad01      	add	r5, sp, #4
    33a8:	0028      	movs	r0, r5
    33aa:	4b0d      	ldr	r3, [pc, #52]	; (33e0 <udd_ep_free+0x40>)
    33ac:	4798      	blx	r3
	udd_ep_abort(ep);
    33ae:	0020      	movs	r0, r4
    33b0:	4b0c      	ldr	r3, [pc, #48]	; (33e4 <udd_ep_free+0x44>)
    33b2:	4798      	blx	r3
	config_ep.ep_address = ep;
    33b4:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    33b6:	2300      	movs	r3, #0
    33b8:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    33ba:	4e0b      	ldr	r6, [pc, #44]	; (33e8 <udd_ep_free+0x48>)
    33bc:	0029      	movs	r1, r5
    33be:	0030      	movs	r0, r6
    33c0:	4b0a      	ldr	r3, [pc, #40]	; (33ec <udd_ep_free+0x4c>)
    33c2:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    33c4:	210f      	movs	r1, #15
    33c6:	4021      	ands	r1, r4
    33c8:	2200      	movs	r2, #0
    33ca:	0030      	movs	r0, r6
    33cc:	4b08      	ldr	r3, [pc, #32]	; (33f0 <udd_ep_free+0x50>)
    33ce:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    33d0:	2200      	movs	r2, #0
    33d2:	0021      	movs	r1, r4
    33d4:	0030      	movs	r0, r6
    33d6:	4b07      	ldr	r3, [pc, #28]	; (33f4 <udd_ep_free+0x54>)
    33d8:	4798      	blx	r3
}
    33da:	b002      	add	sp, #8
    33dc:	bd70      	pop	{r4, r5, r6, pc}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	0000427d 	.word	0x0000427d
    33e4:	00003355 	.word	0x00003355
    33e8:	200003d0 	.word	0x200003d0
    33ec:	0000428d 	.word	0x0000428d
    33f0:	000040b5 	.word	0x000040b5
    33f4:	000041ad 	.word	0x000041ad

000033f8 <udd_ep_alloc>:
{
    33f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fa:	b083      	sub	sp, #12
    33fc:	0005      	movs	r5, r0
    33fe:	000f      	movs	r7, r1
    3400:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    3402:	ae01      	add	r6, sp, #4
    3404:	0030      	movs	r0, r6
    3406:	4b36      	ldr	r3, [pc, #216]	; (34e0 <udd_ep_alloc+0xe8>)
    3408:	4798      	blx	r3
	config_ep.ep_address = ep;
    340a:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    340c:	2c08      	cmp	r4, #8
    340e:	d813      	bhi.n	3438 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3410:	2200      	movs	r2, #0
    3412:	ab01      	add	r3, sp, #4
    3414:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    3416:	0028      	movs	r0, r5
    3418:	4b32      	ldr	r3, [pc, #200]	; (34e4 <udd_ep_alloc+0xec>)
    341a:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    341c:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    341e:	2103      	movs	r1, #3
    3420:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    3422:	2901      	cmp	r1, #1
    3424:	d038      	beq.n	3498 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    3426:	2902      	cmp	r1, #2
    3428:	d043      	beq.n	34b2 <udd_ep_alloc+0xba>
		return false;
    342a:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    342c:	2903      	cmp	r1, #3
    342e:	d13d      	bne.n	34ac <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3430:	2204      	movs	r2, #4
    3432:	ab01      	add	r3, sp, #4
    3434:	70da      	strb	r2, [r3, #3]
    3436:	e032      	b.n	349e <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    3438:	2c10      	cmp	r4, #16
    343a:	d803      	bhi.n	3444 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    343c:	2201      	movs	r2, #1
    343e:	ab01      	add	r3, sp, #4
    3440:	705a      	strb	r2, [r3, #1]
    3442:	e7e8      	b.n	3416 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    3444:	2c20      	cmp	r4, #32
    3446:	d803      	bhi.n	3450 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    3448:	2202      	movs	r2, #2
    344a:	ab01      	add	r3, sp, #4
    344c:	705a      	strb	r2, [r3, #1]
    344e:	e7e2      	b.n	3416 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    3450:	2c40      	cmp	r4, #64	; 0x40
    3452:	d803      	bhi.n	345c <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    3454:	2203      	movs	r2, #3
    3456:	ab01      	add	r3, sp, #4
    3458:	705a      	strb	r2, [r3, #1]
    345a:	e7dc      	b.n	3416 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    345c:	2c80      	cmp	r4, #128	; 0x80
    345e:	d803      	bhi.n	3468 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3460:	2204      	movs	r2, #4
    3462:	ab01      	add	r3, sp, #4
    3464:	705a      	strb	r2, [r3, #1]
    3466:	e7d6      	b.n	3416 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3468:	2380      	movs	r3, #128	; 0x80
    346a:	005b      	lsls	r3, r3, #1
    346c:	429c      	cmp	r4, r3
    346e:	d803      	bhi.n	3478 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3470:	2205      	movs	r2, #5
    3472:	ab01      	add	r3, sp, #4
    3474:	705a      	strb	r2, [r3, #1]
    3476:	e7ce      	b.n	3416 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3478:	2380      	movs	r3, #128	; 0x80
    347a:	009b      	lsls	r3, r3, #2
    347c:	429c      	cmp	r4, r3
    347e:	d803      	bhi.n	3488 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3480:	2206      	movs	r2, #6
    3482:	ab01      	add	r3, sp, #4
    3484:	705a      	strb	r2, [r3, #1]
    3486:	e7c6      	b.n	3416 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3488:	4a17      	ldr	r2, [pc, #92]	; (34e8 <udd_ep_alloc+0xf0>)
		return false;
    348a:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    348c:	4294      	cmp	r4, r2
    348e:	d80d      	bhi.n	34ac <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3490:	2207      	movs	r2, #7
    3492:	ab01      	add	r3, sp, #4
    3494:	705a      	strb	r2, [r3, #1]
    3496:	e7be      	b.n	3416 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3498:	2202      	movs	r2, #2
    349a:	ab01      	add	r3, sp, #4
    349c:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    349e:	a901      	add	r1, sp, #4
    34a0:	4812      	ldr	r0, [pc, #72]	; (34ec <udd_ep_alloc+0xf4>)
    34a2:	4b13      	ldr	r3, [pc, #76]	; (34f0 <udd_ep_alloc+0xf8>)
    34a4:	4798      	blx	r3
		return false;
    34a6:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    34a8:	2800      	cmp	r0, #0
    34aa:	d006      	beq.n	34ba <udd_ep_alloc+0xc2>
}
    34ac:	0018      	movs	r0, r3
    34ae:	b003      	add	sp, #12
    34b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    34b2:	2203      	movs	r2, #3
    34b4:	ab01      	add	r3, sp, #4
    34b6:	70da      	strb	r2, [r3, #3]
    34b8:	e7f1      	b.n	349e <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    34ba:	210f      	movs	r1, #15
    34bc:	4029      	ands	r1, r5
    34be:	4c0b      	ldr	r4, [pc, #44]	; (34ec <udd_ep_alloc+0xf4>)
    34c0:	4b0c      	ldr	r3, [pc, #48]	; (34f4 <udd_ep_alloc+0xfc>)
    34c2:	2200      	movs	r2, #0
    34c4:	0020      	movs	r0, r4
    34c6:	4e0c      	ldr	r6, [pc, #48]	; (34f8 <udd_ep_alloc+0x100>)
    34c8:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    34ca:	2200      	movs	r2, #0
    34cc:	0029      	movs	r1, r5
    34ce:	0020      	movs	r0, r4
    34d0:	4e0a      	ldr	r6, [pc, #40]	; (34fc <udd_ep_alloc+0x104>)
    34d2:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    34d4:	2201      	movs	r2, #1
    34d6:	0029      	movs	r1, r5
    34d8:	0020      	movs	r0, r4
    34da:	47b0      	blx	r6
	return true;
    34dc:	2301      	movs	r3, #1
    34de:	e7e5      	b.n	34ac <udd_ep_alloc+0xb4>
    34e0:	0000427d 	.word	0x0000427d
    34e4:	00002d99 	.word	0x00002d99
    34e8:	000003ff 	.word	0x000003ff
    34ec:	200003d0 	.word	0x200003d0
    34f0:	0000428d 	.word	0x0000428d
    34f4:	00002dbd 	.word	0x00002dbd
    34f8:	0000408d 	.word	0x0000408d
    34fc:	000040dd 	.word	0x000040dd

00003500 <udd_ep_is_halted>:
{
    3500:	b510      	push	{r4, lr}
    3502:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3504:	4801      	ldr	r0, [pc, #4]	; (350c <udd_ep_is_halted+0xc>)
    3506:	4b02      	ldr	r3, [pc, #8]	; (3510 <udd_ep_is_halted+0x10>)
    3508:	4798      	blx	r3
}
    350a:	bd10      	pop	{r4, pc}
    350c:	200003d0 	.word	0x200003d0
    3510:	00004533 	.word	0x00004533

00003514 <udd_ep_set_halt>:
{
    3514:	b510      	push	{r4, lr}
    3516:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3518:	230f      	movs	r3, #15
    351a:	4003      	ands	r3, r0
		return false;
    351c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    351e:	2b02      	cmp	r3, #2
    3520:	d900      	bls.n	3524 <udd_ep_set_halt+0x10>
}
    3522:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    3524:	0021      	movs	r1, r4
    3526:	4804      	ldr	r0, [pc, #16]	; (3538 <udd_ep_set_halt+0x24>)
    3528:	4b04      	ldr	r3, [pc, #16]	; (353c <udd_ep_set_halt+0x28>)
    352a:	4798      	blx	r3
	udd_ep_abort(ep);
    352c:	0020      	movs	r0, r4
    352e:	4b04      	ldr	r3, [pc, #16]	; (3540 <udd_ep_set_halt+0x2c>)
    3530:	4798      	blx	r3
	return true;
    3532:	2001      	movs	r0, #1
    3534:	e7f5      	b.n	3522 <udd_ep_set_halt+0xe>
    3536:	46c0      	nop			; (mov r8, r8)
    3538:	200003d0 	.word	0x200003d0
    353c:	0000455d 	.word	0x0000455d
    3540:	00003355 	.word	0x00003355

00003544 <_usb_ep0_on_tansfer_ok>:
{
    3544:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    3546:	4b34      	ldr	r3, [pc, #208]	; (3618 <_usb_ep0_on_tansfer_ok+0xd4>)
    3548:	781b      	ldrb	r3, [r3, #0]
    354a:	2b01      	cmp	r3, #1
    354c:	d00a      	beq.n	3564 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    354e:	2b02      	cmp	r3, #2
    3550:	d05f      	beq.n	3612 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    3552:	4b32      	ldr	r3, [pc, #200]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    3554:	691b      	ldr	r3, [r3, #16]
    3556:	2b00      	cmp	r3, #0
    3558:	d000      	beq.n	355c <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    355a:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    355c:	2200      	movs	r2, #0
    355e:	4b2e      	ldr	r3, [pc, #184]	; (3618 <_usb_ep0_on_tansfer_ok+0xd4>)
    3560:	701a      	strb	r2, [r3, #0]
}
    3562:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3564:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3566:	4b2d      	ldr	r3, [pc, #180]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    3568:	899b      	ldrh	r3, [r3, #12]
    356a:	4a2d      	ldr	r2, [pc, #180]	; (3620 <_usb_ep0_on_tansfer_ok+0xdc>)
    356c:	8814      	ldrh	r4, [r2, #0]
    356e:	1962      	adds	r2, r4, r5
    3570:	4293      	cmp	r3, r2
    3572:	da01      	bge.n	3578 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3574:	1b1d      	subs	r5, r3, r4
    3576:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3578:	4b28      	ldr	r3, [pc, #160]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    357a:	6898      	ldr	r0, [r3, #8]
    357c:	1900      	adds	r0, r0, r4
    357e:	002a      	movs	r2, r5
    3580:	4928      	ldr	r1, [pc, #160]	; (3624 <_usb_ep0_on_tansfer_ok+0xe0>)
    3582:	4b29      	ldr	r3, [pc, #164]	; (3628 <_usb_ep0_on_tansfer_ok+0xe4>)
    3584:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3586:	1964      	adds	r4, r4, r5
    3588:	b2a4      	uxth	r4, r4
    358a:	4b25      	ldr	r3, [pc, #148]	; (3620 <_usb_ep0_on_tansfer_ok+0xdc>)
    358c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    358e:	2d40      	cmp	r5, #64	; 0x40
    3590:	d00a      	beq.n	35a8 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3592:	4b22      	ldr	r3, [pc, #136]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    3594:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3596:	695b      	ldr	r3, [r3, #20]
    3598:	2b00      	cmp	r3, #0
    359a:	d002      	beq.n	35a2 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    359c:	4798      	blx	r3
    359e:	2800      	cmp	r0, #0
    35a0:	d014      	beq.n	35cc <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    35a2:	4b22      	ldr	r3, [pc, #136]	; (362c <_usb_ep0_on_tansfer_ok+0xe8>)
    35a4:	4798      	blx	r3
    35a6:	e7dc      	b.n	3562 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    35a8:	4b1c      	ldr	r3, [pc, #112]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    35aa:	88da      	ldrh	r2, [r3, #6]
    35ac:	4b20      	ldr	r3, [pc, #128]	; (3630 <_usb_ep0_on_tansfer_ok+0xec>)
    35ae:	881b      	ldrh	r3, [r3, #0]
    35b0:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    35b2:	429a      	cmp	r2, r3
    35b4:	dded      	ble.n	3592 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    35b6:	4b19      	ldr	r3, [pc, #100]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    35b8:	899b      	ldrh	r3, [r3, #12]
    35ba:	42a3      	cmp	r3, r4
    35bc:	d00c      	beq.n	35d8 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    35be:	2340      	movs	r3, #64	; 0x40
    35c0:	4a18      	ldr	r2, [pc, #96]	; (3624 <_usb_ep0_on_tansfer_ok+0xe0>)
    35c2:	2100      	movs	r1, #0
    35c4:	481b      	ldr	r0, [pc, #108]	; (3634 <_usb_ep0_on_tansfer_ok+0xf0>)
    35c6:	4c1c      	ldr	r4, [pc, #112]	; (3638 <_usb_ep0_on_tansfer_ok+0xf4>)
    35c8:	47a0      	blx	r4
    35ca:	e7ca      	b.n	3562 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    35cc:	2205      	movs	r2, #5
    35ce:	4b12      	ldr	r3, [pc, #72]	; (3618 <_usb_ep0_on_tansfer_ok+0xd4>)
    35d0:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    35d2:	4b1a      	ldr	r3, [pc, #104]	; (363c <_usb_ep0_on_tansfer_ok+0xf8>)
    35d4:	4798      	blx	r3
    35d6:	e7c4      	b.n	3562 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    35d8:	4b10      	ldr	r3, [pc, #64]	; (361c <_usb_ep0_on_tansfer_ok+0xd8>)
    35da:	695b      	ldr	r3, [r3, #20]
    35dc:	2b00      	cmp	r3, #0
    35de:	d00b      	beq.n	35f8 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    35e0:	4798      	blx	r3
    35e2:	2800      	cmp	r0, #0
    35e4:	d00f      	beq.n	3606 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    35e6:	4912      	ldr	r1, [pc, #72]	; (3630 <_usb_ep0_on_tansfer_ok+0xec>)
    35e8:	4a0d      	ldr	r2, [pc, #52]	; (3620 <_usb_ep0_on_tansfer_ok+0xdc>)
    35ea:	880b      	ldrh	r3, [r1, #0]
    35ec:	8810      	ldrh	r0, [r2, #0]
    35ee:	181b      	adds	r3, r3, r0
    35f0:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    35f2:	2300      	movs	r3, #0
    35f4:	8013      	strh	r3, [r2, #0]
    35f6:	e7e2      	b.n	35be <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    35f8:	2205      	movs	r2, #5
    35fa:	4b07      	ldr	r3, [pc, #28]	; (3618 <_usb_ep0_on_tansfer_ok+0xd4>)
    35fc:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    35fe:	2000      	movs	r0, #0
    3600:	4b0e      	ldr	r3, [pc, #56]	; (363c <_usb_ep0_on_tansfer_ok+0xf8>)
    3602:	4798      	blx	r3
    3604:	e7ad      	b.n	3562 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3606:	2205      	movs	r2, #5
    3608:	4b03      	ldr	r3, [pc, #12]	; (3618 <_usb_ep0_on_tansfer_ok+0xd4>)
    360a:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    360c:	4b0b      	ldr	r3, [pc, #44]	; (363c <_usb_ep0_on_tansfer_ok+0xf8>)
    360e:	4798      	blx	r3
    3610:	e7a7      	b.n	3562 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    3612:	4b0b      	ldr	r3, [pc, #44]	; (3640 <_usb_ep0_on_tansfer_ok+0xfc>)
    3614:	4798      	blx	r3
    3616:	e7a4      	b.n	3562 <_usb_ep0_on_tansfer_ok+0x1e>
    3618:	20000236 	.word	0x20000236
    361c:	20000538 	.word	0x20000538
    3620:	20000232 	.word	0x20000232
    3624:	20000550 	.word	0x20000550
    3628:	00007039 	.word	0x00007039
    362c:	000030f1 	.word	0x000030f1
    3630:	20000234 	.word	0x20000234
    3634:	200003d0 	.word	0x200003d0
    3638:	0000465d 	.word	0x0000465d
    363c:	00003515 	.word	0x00003515
    3640:	00003181 	.word	0x00003181

00003644 <udd_ep_clear_halt>:
{
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3648:	230f      	movs	r3, #15
    364a:	4003      	ands	r3, r0
		return false;
    364c:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    364e:	2b02      	cmp	r3, #2
    3650:	d900      	bls.n	3654 <udd_ep_clear_halt+0x10>
}
    3652:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3654:	0020      	movs	r0, r4
    3656:	4b09      	ldr	r3, [pc, #36]	; (367c <udd_ep_clear_halt+0x38>)
    3658:	4798      	blx	r3
    365a:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    365c:	0021      	movs	r1, r4
    365e:	4808      	ldr	r0, [pc, #32]	; (3680 <udd_ep_clear_halt+0x3c>)
    3660:	4b08      	ldr	r3, [pc, #32]	; (3684 <udd_ep_clear_halt+0x40>)
    3662:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3664:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3666:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3668:	07db      	lsls	r3, r3, #31
    366a:	d5f2      	bpl.n	3652 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    366c:	7cab      	ldrb	r3, [r5, #18]
    366e:	2201      	movs	r2, #1
    3670:	4393      	bics	r3, r2
    3672:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3674:	682b      	ldr	r3, [r5, #0]
    3676:	4798      	blx	r3
	return true;
    3678:	2001      	movs	r0, #1
    367a:	e7ea      	b.n	3652 <udd_ep_clear_halt+0xe>
    367c:	00002d99 	.word	0x00002d99
    3680:	200003d0 	.word	0x200003d0
    3684:	00004583 	.word	0x00004583

00003688 <udd_ep_wait_stall_clear>:
{
    3688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    368a:	0004      	movs	r4, r0
    368c:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    368e:	230f      	movs	r3, #15
    3690:	4003      	ands	r3, r0
		return false;
    3692:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3694:	2b02      	cmp	r3, #2
    3696:	d805      	bhi.n	36a4 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3698:	4b0d      	ldr	r3, [pc, #52]	; (36d0 <udd_ep_wait_stall_clear+0x48>)
    369a:	4798      	blx	r3
    369c:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    369e:	7c83      	ldrb	r3, [r0, #18]
    36a0:	07db      	lsls	r3, r3, #31
    36a2:	d501      	bpl.n	36a8 <udd_ep_wait_stall_clear+0x20>
}
    36a4:	0030      	movs	r0, r6
    36a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    36a8:	0021      	movs	r1, r4
    36aa:	480a      	ldr	r0, [pc, #40]	; (36d4 <udd_ep_wait_stall_clear+0x4c>)
    36ac:	4b0a      	ldr	r3, [pc, #40]	; (36d8 <udd_ep_wait_stall_clear+0x50>)
    36ae:	4798      	blx	r3
    36b0:	1e06      	subs	r6, r0, #0
    36b2:	d005      	beq.n	36c0 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    36b4:	7cbb      	ldrb	r3, [r7, #18]
    36b6:	2201      	movs	r2, #1
    36b8:	4313      	orrs	r3, r2
    36ba:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    36bc:	603d      	str	r5, [r7, #0]
		return true;
    36be:	e7f1      	b.n	36a4 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    36c0:	0021      	movs	r1, r4
    36c2:	4804      	ldr	r0, [pc, #16]	; (36d4 <udd_ep_wait_stall_clear+0x4c>)
    36c4:	4b05      	ldr	r3, [pc, #20]	; (36dc <udd_ep_wait_stall_clear+0x54>)
    36c6:	4798      	blx	r3
    36c8:	1e06      	subs	r6, r0, #0
    36ca:	d0eb      	beq.n	36a4 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    36cc:	47a8      	blx	r5
		return true;
    36ce:	e7e9      	b.n	36a4 <udd_ep_wait_stall_clear+0x1c>
    36d0:	00002d99 	.word	0x00002d99
    36d4:	200003d0 	.word	0x200003d0
    36d8:	00004533 	.word	0x00004533
    36dc:	000044d1 	.word	0x000044d1

000036e0 <udd_ep_run>:
{
    36e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36e2:	b087      	sub	sp, #28
    36e4:	0005      	movs	r5, r0
    36e6:	9103      	str	r1, [sp, #12]
    36e8:	9202      	str	r2, [sp, #8]
    36ea:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    36ec:	260f      	movs	r6, #15
    36ee:	4006      	ands	r6, r0
		return false;
    36f0:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    36f2:	2e02      	cmp	r6, #2
    36f4:	d902      	bls.n	36fc <udd_ep_run+0x1c>
}
    36f6:	0020      	movs	r0, r4
    36f8:	b007      	add	sp, #28
    36fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    36fc:	4b64      	ldr	r3, [pc, #400]	; (3890 <udd_ep_run+0x1b0>)
    36fe:	4798      	blx	r3
    3700:	1e04      	subs	r4, r0, #0
    3702:	d000      	beq.n	3706 <udd_ep_run+0x26>
    3704:	e0bd      	b.n	3882 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3706:	0028      	movs	r0, r5
    3708:	4b62      	ldr	r3, [pc, #392]	; (3894 <udd_ep_run+0x1b4>)
    370a:	4798      	blx	r3
    370c:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    370e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3712:	425a      	negs	r2, r3
    3714:	4153      	adcs	r3, r2
    3716:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3718:	b672      	cpsid	i
    371a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    371e:	2200      	movs	r2, #0
    3720:	4b5d      	ldr	r3, [pc, #372]	; (3898 <udd_ep_run+0x1b8>)
    3722:	701a      	strb	r2, [r3, #0]
	return flags;
    3724:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3726:	7c83      	ldrb	r3, [r0, #18]
    3728:	07db      	lsls	r3, r3, #31
    372a:	d508      	bpl.n	373e <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    372c:	2a00      	cmp	r2, #0
    372e:	d0e2      	beq.n	36f6 <udd_ep_run+0x16>
		cpu_irq_enable();
    3730:	2201      	movs	r2, #1
    3732:	4b59      	ldr	r3, [pc, #356]	; (3898 <udd_ep_run+0x1b8>)
    3734:	701a      	strb	r2, [r3, #0]
    3736:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    373a:	b662      	cpsie	i
    373c:	e7db      	b.n	36f6 <udd_ep_run+0x16>
	ptr_job->busy = true;
    373e:	7c83      	ldrb	r3, [r0, #18]
    3740:	2101      	movs	r1, #1
    3742:	430b      	orrs	r3, r1
    3744:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3746:	2a00      	cmp	r2, #0
    3748:	d005      	beq.n	3756 <udd_ep_run+0x76>
		cpu_irq_enable();
    374a:	2201      	movs	r2, #1
    374c:	4b52      	ldr	r3, [pc, #328]	; (3898 <udd_ep_run+0x1b8>)
    374e:	701a      	strb	r2, [r3, #0]
    3750:	f3bf 8f5f 	dmb	sy
    3754:	b662      	cpsie	i
	ptr_job->buf = buf;
    3756:	9b02      	ldr	r3, [sp, #8]
    3758:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    375a:	9b01      	ldr	r3, [sp, #4]
    375c:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    375e:	2300      	movs	r3, #0
    3760:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3764:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3766:	2301      	movs	r3, #1
    3768:	9a03      	ldr	r2, [sp, #12]
    376a:	4013      	ands	r3, r2
    376c:	005a      	lsls	r2, r3, #1
    376e:	7cbb      	ldrb	r3, [r7, #18]
    3770:	2102      	movs	r1, #2
    3772:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3774:	4313      	orrs	r3, r2
    3776:	2204      	movs	r2, #4
    3778:	4393      	bics	r3, r2
    377a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    377c:	b26b      	sxtb	r3, r5
    377e:	2b00      	cmp	r3, #0
    3780:	db20      	blt.n	37c4 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3782:	9b01      	ldr	r3, [sp, #4]
    3784:	2b00      	cmp	r3, #0
    3786:	d06f      	beq.n	3868 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3788:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    378a:	4b44      	ldr	r3, [pc, #272]	; (389c <udd_ep_run+0x1bc>)
    378c:	429c      	cmp	r4, r3
    378e:	d95a      	bls.n	3846 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3790:	8a39      	ldrh	r1, [r7, #16]
    3792:	001c      	movs	r4, r3
    3794:	0018      	movs	r0, r3
    3796:	4b42      	ldr	r3, [pc, #264]	; (38a0 <udd_ep_run+0x1c0>)
    3798:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    379a:	1a63      	subs	r3, r4, r1
    379c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    379e:	8a3b      	ldrh	r3, [r7, #16]
    37a0:	429a      	cmp	r2, r3
    37a2:	d257      	bcs.n	3854 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    37a4:	7cba      	ldrb	r2, [r7, #18]
    37a6:	2104      	movs	r1, #4
    37a8:	430a      	orrs	r2, r1
    37aa:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    37ac:	1e72      	subs	r2, r6, #1
    37ae:	0192      	lsls	r2, r2, #6
    37b0:	493c      	ldr	r1, [pc, #240]	; (38a4 <udd_ep_run+0x1c4>)
    37b2:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    37b4:	0031      	movs	r1, r6
    37b6:	483c      	ldr	r0, [pc, #240]	; (38a8 <udd_ep_run+0x1c8>)
    37b8:	4c3c      	ldr	r4, [pc, #240]	; (38ac <udd_ep_run+0x1cc>)
    37ba:	47a0      	blx	r4
				return (STATUS_OK ==
    37bc:	4244      	negs	r4, r0
    37be:	4144      	adcs	r4, r0
    37c0:	b2e4      	uxtb	r4, r4
    37c2:	e798      	b.n	36f6 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    37c4:	9b01      	ldr	r3, [sp, #4]
    37c6:	2b00      	cmp	r3, #0
    37c8:	d027      	beq.n	381a <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    37ca:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    37cc:	4b33      	ldr	r3, [pc, #204]	; (389c <udd_ep_run+0x1bc>)
    37ce:	429d      	cmp	r5, r3
    37d0:	d906      	bls.n	37e0 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    37d2:	8a39      	ldrh	r1, [r7, #16]
    37d4:	001d      	movs	r5, r3
    37d6:	0018      	movs	r0, r3
    37d8:	4b31      	ldr	r3, [pc, #196]	; (38a0 <udd_ep_run+0x1c0>)
    37da:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    37dc:	1a6b      	subs	r3, r5, r1
    37de:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    37e0:	7cbb      	ldrb	r3, [r7, #18]
    37e2:	079b      	lsls	r3, r3, #30
    37e4:	d507      	bpl.n	37f6 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    37e6:	8a39      	ldrh	r1, [r7, #16]
    37e8:	0028      	movs	r0, r5
    37ea:	4b31      	ldr	r3, [pc, #196]	; (38b0 <udd_ep_run+0x1d0>)
    37ec:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    37ee:	b289      	uxth	r1, r1
    37f0:	424c      	negs	r4, r1
    37f2:	414c      	adcs	r4, r1
    37f4:	b2e4      	uxtb	r4, r4
    37f6:	2001      	movs	r0, #1
    37f8:	4020      	ands	r0, r4
    37fa:	0040      	lsls	r0, r0, #1
    37fc:	7cbc      	ldrb	r4, [r7, #18]
    37fe:	2302      	movs	r3, #2
    3800:	439c      	bics	r4, r3
    3802:	4304      	orrs	r4, r0
    3804:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3806:	002b      	movs	r3, r5
    3808:	9a02      	ldr	r2, [sp, #8]
    380a:	0031      	movs	r1, r6
    380c:	4826      	ldr	r0, [pc, #152]	; (38a8 <udd_ep_run+0x1c8>)
    380e:	4c29      	ldr	r4, [pc, #164]	; (38b4 <udd_ep_run+0x1d4>)
    3810:	47a0      	blx	r4
		return (STATUS_OK ==
    3812:	4244      	negs	r4, r0
    3814:	4144      	adcs	r4, r0
    3816:	b2e4      	uxtb	r4, r4
    3818:	e76d      	b.n	36f6 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    381a:	7cbb      	ldrb	r3, [r7, #18]
    381c:	079b      	lsls	r3, r3, #30
    381e:	d505      	bpl.n	382c <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3820:	7cbb      	ldrb	r3, [r7, #18]
    3822:	2202      	movs	r2, #2
    3824:	4393      	bics	r3, r2
    3826:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3828:	2500      	movs	r5, #0
    382a:	e7ec      	b.n	3806 <udd_ep_run+0x126>
			ptr_job->busy = false;
    382c:	7cbb      	ldrb	r3, [r7, #18]
    382e:	2201      	movs	r2, #1
    3830:	4393      	bics	r3, r2
    3832:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3836:	2b00      	cmp	r3, #0
    3838:	d025      	beq.n	3886 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    383a:	002a      	movs	r2, r5
    383c:	2100      	movs	r1, #0
    383e:	2000      	movs	r0, #0
    3840:	4798      	blx	r3
			return true;
    3842:	2401      	movs	r4, #1
    3844:	e757      	b.n	36f6 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3846:	8a39      	ldrh	r1, [r7, #16]
    3848:	0020      	movs	r0, r4
    384a:	4b19      	ldr	r3, [pc, #100]	; (38b0 <udd_ep_run+0x1d0>)
    384c:	4798      	blx	r3
    384e:	1a63      	subs	r3, r4, r1
    3850:	b29a      	uxth	r2, r3
    3852:	e7a4      	b.n	379e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3854:	0013      	movs	r3, r2
    3856:	9a02      	ldr	r2, [sp, #8]
    3858:	0031      	movs	r1, r6
    385a:	4813      	ldr	r0, [pc, #76]	; (38a8 <udd_ep_run+0x1c8>)
    385c:	4c13      	ldr	r4, [pc, #76]	; (38ac <udd_ep_run+0x1cc>)
    385e:	47a0      	blx	r4
				return (STATUS_OK ==
    3860:	4244      	negs	r4, r0
    3862:	4144      	adcs	r4, r0
    3864:	b2e4      	uxtb	r4, r4
    3866:	e746      	b.n	36f6 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3868:	7cbb      	ldrb	r3, [r7, #18]
    386a:	2201      	movs	r2, #1
    386c:	4393      	bics	r3, r2
    386e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3872:	2b00      	cmp	r3, #0
    3874:	d009      	beq.n	388a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3876:	002a      	movs	r2, r5
    3878:	2100      	movs	r1, #0
    387a:	2000      	movs	r0, #0
    387c:	4798      	blx	r3
			return true;
    387e:	2401      	movs	r4, #1
    3880:	e739      	b.n	36f6 <udd_ep_run+0x16>
		return false;
    3882:	2400      	movs	r4, #0
    3884:	e737      	b.n	36f6 <udd_ep_run+0x16>
			return true;
    3886:	2401      	movs	r4, #1
    3888:	e735      	b.n	36f6 <udd_ep_run+0x16>
			return true;
    388a:	2401      	movs	r4, #1
    388c:	e733      	b.n	36f6 <udd_ep_run+0x16>
    388e:	46c0      	nop			; (mov r8, r8)
    3890:	00003501 	.word	0x00003501
    3894:	00002d99 	.word	0x00002d99
    3898:	200000f9 	.word	0x200000f9
    389c:	00001fff 	.word	0x00001fff
    38a0:	00006d3d 	.word	0x00006d3d
    38a4:	20000350 	.word	0x20000350
    38a8:	200003d0 	.word	0x200003d0
    38ac:	0000465d 	.word	0x0000465d
    38b0:	00006b69 	.word	0x00006b69
    38b4:	00004609 	.word	0x00004609

000038b8 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    38b8:	4b02      	ldr	r3, [pc, #8]	; (38c4 <udd_set_address+0xc>)
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	2280      	movs	r2, #128	; 0x80
    38be:	4310      	orrs	r0, r2
    38c0:	7298      	strb	r0, [r3, #10]
}
    38c2:	4770      	bx	lr
    38c4:	200003d0 	.word	0x200003d0

000038c8 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    38c8:	4b02      	ldr	r3, [pc, #8]	; (38d4 <udd_getaddress+0xc>)
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	7a98      	ldrb	r0, [r3, #10]
    38ce:	0640      	lsls	r0, r0, #25
    38d0:	0e40      	lsrs	r0, r0, #25
}
    38d2:	4770      	bx	lr
    38d4:	200003d0 	.word	0x200003d0

000038d8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    38d8:	4b01      	ldr	r3, [pc, #4]	; (38e0 <udd_set_setup_payload+0x8>)
    38da:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    38dc:	8199      	strh	r1, [r3, #12]
}
    38de:	4770      	bx	lr
    38e0:	20000538 	.word	0x20000538

000038e4 <udd_detach>:

void udd_detach(void)
{
    38e4:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    38e6:	4b05      	ldr	r3, [pc, #20]	; (38fc <udd_detach+0x18>)
    38e8:	681a      	ldr	r2, [r3, #0]
    38ea:	8913      	ldrh	r3, [r2, #8]
    38ec:	2101      	movs	r1, #1
    38ee:	430b      	orrs	r3, r1
    38f0:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    38f2:	2001      	movs	r0, #1
    38f4:	4b02      	ldr	r3, [pc, #8]	; (3900 <udd_detach+0x1c>)
    38f6:	4798      	blx	r3
}
    38f8:	bd10      	pop	{r4, pc}
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	200003d0 	.word	0x200003d0
    3900:	00002cd9 	.word	0x00002cd9

00003904 <udd_attach>:

void udd_attach(void)
{
    3904:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3906:	2003      	movs	r0, #3
    3908:	4b16      	ldr	r3, [pc, #88]	; (3964 <udd_attach+0x60>)
    390a:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    390c:	4c16      	ldr	r4, [pc, #88]	; (3968 <udd_attach+0x64>)
    390e:	6822      	ldr	r2, [r4, #0]
    3910:	8913      	ldrh	r3, [r2, #8]
    3912:	2101      	movs	r1, #1
    3914:	438b      	bics	r3, r1
    3916:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3918:	4a14      	ldr	r2, [pc, #80]	; (396c <udd_attach+0x68>)
    391a:	3103      	adds	r1, #3
    391c:	0020      	movs	r0, r4
    391e:	4e14      	ldr	r6, [pc, #80]	; (3970 <udd_attach+0x6c>)
    3920:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3922:	4a14      	ldr	r2, [pc, #80]	; (3974 <udd_attach+0x70>)
    3924:	2100      	movs	r1, #0
    3926:	0020      	movs	r0, r4
    3928:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    392a:	4a13      	ldr	r2, [pc, #76]	; (3978 <udd_attach+0x74>)
    392c:	2101      	movs	r1, #1
    392e:	0020      	movs	r0, r4
    3930:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3932:	4a12      	ldr	r2, [pc, #72]	; (397c <udd_attach+0x78>)
    3934:	2102      	movs	r1, #2
    3936:	0020      	movs	r0, r4
    3938:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    393a:	2104      	movs	r1, #4
    393c:	0020      	movs	r0, r4
    393e:	4d10      	ldr	r5, [pc, #64]	; (3980 <udd_attach+0x7c>)
    3940:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3942:	2100      	movs	r1, #0
    3944:	0020      	movs	r0, r4
    3946:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3948:	2101      	movs	r1, #1
    394a:	0020      	movs	r0, r4
    394c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    394e:	2102      	movs	r1, #2
    3950:	0020      	movs	r0, r4
    3952:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3954:	4a0b      	ldr	r2, [pc, #44]	; (3984 <udd_attach+0x80>)
    3956:	2106      	movs	r1, #6
    3958:	0020      	movs	r0, r4
    395a:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    395c:	2106      	movs	r1, #6
    395e:	0020      	movs	r0, r4
    3960:	47a8      	blx	r5
#endif
}
    3962:	bd70      	pop	{r4, r5, r6, pc}
    3964:	00002cd9 	.word	0x00002cd9
    3968:	200003d0 	.word	0x200003d0
    396c:	00003321 	.word	0x00003321
    3970:	0000402d 	.word	0x0000402d
    3974:	0000330d 	.word	0x0000330d
    3978:	00003041 	.word	0x00003041
    397c:	00002fd1 	.word	0x00002fd1
    3980:	00004051 	.word	0x00004051
    3984:	00002f9d 	.word	0x00002f9d

00003988 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3988:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    398a:	2100      	movs	r1, #0
    398c:	200e      	movs	r0, #14
    398e:	4b08      	ldr	r3, [pc, #32]	; (39b0 <_uhd_vbus_handler+0x28>)
    3990:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3992:	4b08      	ldr	r3, [pc, #32]	; (39b4 <_uhd_vbus_handler+0x2c>)
    3994:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3996:	045b      	lsls	r3, r3, #17
    3998:	d406      	bmi.n	39a8 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    399a:	4b07      	ldr	r3, [pc, #28]	; (39b8 <_uhd_vbus_handler+0x30>)
    399c:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    399e:	2100      	movs	r1, #0
    39a0:	200e      	movs	r0, #14
    39a2:	4b06      	ldr	r3, [pc, #24]	; (39bc <_uhd_vbus_handler+0x34>)
    39a4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    39a6:	bd10      	pop	{r4, pc}
		udd_attach();
    39a8:	4b05      	ldr	r3, [pc, #20]	; (39c0 <_uhd_vbus_handler+0x38>)
    39aa:	4798      	blx	r3
    39ac:	e7f7      	b.n	399e <_uhd_vbus_handler+0x16>
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	00004f15 	.word	0x00004f15
    39b4:	41004400 	.word	0x41004400
    39b8:	000038e5 	.word	0x000038e5
    39bc:	00004ef5 	.word	0x00004ef5
    39c0:	00003905 	.word	0x00003905

000039c4 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    39c4:	b570      	push	{r4, r5, r6, lr}
    39c6:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    39c8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    39cc:	425a      	negs	r2, r3
    39ce:	4153      	adcs	r3, r2
    39d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    39d2:	b672      	cpsid	i
    39d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    39d8:	2600      	movs	r6, #0
    39da:	4b29      	ldr	r3, [pc, #164]	; (3a80 <udd_enable+0xbc>)
    39dc:	701e      	strb	r6, [r3, #0]
	return flags;
    39de:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    39e0:	ac05      	add	r4, sp, #20
    39e2:	0020      	movs	r0, r4
    39e4:	4b27      	ldr	r3, [pc, #156]	; (3a84 <udd_enable+0xc0>)
    39e6:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    39e8:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    39ea:	4e27      	ldr	r6, [pc, #156]	; (3a88 <udd_enable+0xc4>)
    39ec:	0022      	movs	r2, r4
    39ee:	4927      	ldr	r1, [pc, #156]	; (3a8c <udd_enable+0xc8>)
    39f0:	0030      	movs	r0, r6
    39f2:	4b27      	ldr	r3, [pc, #156]	; (3a90 <udd_enable+0xcc>)
    39f4:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    39f6:	0030      	movs	r0, r6
    39f8:	4b26      	ldr	r3, [pc, #152]	; (3a94 <udd_enable+0xd0>)
    39fa:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    39fc:	4b26      	ldr	r3, [pc, #152]	; (3a98 <udd_enable+0xd4>)
    39fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3a00:	069b      	lsls	r3, r3, #26
    3a02:	d434      	bmi.n	3a6e <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3a04:	4924      	ldr	r1, [pc, #144]	; (3a98 <udd_enable+0xd4>)
    3a06:	22d0      	movs	r2, #208	; 0xd0
    3a08:	68cb      	ldr	r3, [r1, #12]
    3a0a:	4013      	ands	r3, r2
    3a0c:	2bd0      	cmp	r3, #208	; 0xd0
    3a0e:	d1fb      	bne.n	3a08 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3a10:	2001      	movs	r0, #1
    3a12:	4b22      	ldr	r3, [pc, #136]	; (3a9c <udd_enable+0xd8>)
    3a14:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3a16:	ac02      	add	r4, sp, #8
    3a18:	0020      	movs	r0, r4
    3a1a:	4b21      	ldr	r3, [pc, #132]	; (3aa0 <udd_enable+0xdc>)
    3a1c:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3a1e:	230e      	movs	r3, #14
    3a20:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3a22:	2300      	movs	r3, #0
    3a24:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3a26:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3a28:	3303      	adds	r3, #3
    3a2a:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3a2c:	3b02      	subs	r3, #2
    3a2e:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3a30:	2100      	movs	r1, #0
    3a32:	200e      	movs	r0, #14
    3a34:	4b1b      	ldr	r3, [pc, #108]	; (3aa4 <udd_enable+0xe0>)
    3a36:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3a38:	0021      	movs	r1, r4
    3a3a:	200e      	movs	r0, #14
    3a3c:	4b1a      	ldr	r3, [pc, #104]	; (3aa8 <udd_enable+0xe4>)
    3a3e:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3a40:	2200      	movs	r2, #0
    3a42:	210e      	movs	r1, #14
    3a44:	4819      	ldr	r0, [pc, #100]	; (3aac <udd_enable+0xe8>)
    3a46:	4b1a      	ldr	r3, [pc, #104]	; (3ab0 <udd_enable+0xec>)
    3a48:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3a4a:	2100      	movs	r1, #0
    3a4c:	200e      	movs	r0, #14
    3a4e:	4b19      	ldr	r3, [pc, #100]	; (3ab4 <udd_enable+0xf0>)
    3a50:	4798      	blx	r3
    3a52:	4b19      	ldr	r3, [pc, #100]	; (3ab8 <udd_enable+0xf4>)
    3a54:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3a56:	045b      	lsls	r3, r3, #17
    3a58:	d40f      	bmi.n	3a7a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3a5a:	2d00      	cmp	r5, #0
    3a5c:	d005      	beq.n	3a6a <udd_enable+0xa6>
		cpu_irq_enable();
    3a5e:	2201      	movs	r2, #1
    3a60:	4b07      	ldr	r3, [pc, #28]	; (3a80 <udd_enable+0xbc>)
    3a62:	701a      	strb	r2, [r3, #0]
    3a64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a68:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3a6a:	b006      	add	sp, #24
    3a6c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3a6e:	490a      	ldr	r1, [pc, #40]	; (3a98 <udd_enable+0xd4>)
    3a70:	2210      	movs	r2, #16
    3a72:	68cb      	ldr	r3, [r1, #12]
    3a74:	421a      	tst	r2, r3
    3a76:	d0fc      	beq.n	3a72 <udd_enable+0xae>
    3a78:	e7ca      	b.n	3a10 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3a7a:	4b0c      	ldr	r3, [pc, #48]	; (3aac <udd_enable+0xe8>)
    3a7c:	4798      	blx	r3
    3a7e:	e7ec      	b.n	3a5a <udd_enable+0x96>
    3a80:	200000f9 	.word	0x200000f9
    3a84:	00004cb9 	.word	0x00004cb9
    3a88:	200003d0 	.word	0x200003d0
    3a8c:	41005000 	.word	0x41005000
    3a90:	00004cc9 	.word	0x00004cc9
    3a94:	000046dd 	.word	0x000046dd
    3a98:	40000800 	.word	0x40000800
    3a9c:	00002cd9 	.word	0x00002cd9
    3aa0:	0000223d 	.word	0x0000223d
    3aa4:	00004f15 	.word	0x00004f15
    3aa8:	00002251 	.word	0x00002251
    3aac:	00003989 	.word	0x00003989
    3ab0:	00004ec9 	.word	0x00004ec9
    3ab4:	00004ef5 	.word	0x00004ef5
    3ab8:	41004400 	.word	0x41004400

00003abc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3abe:	46c6      	mov	lr, r8
    3ac0:	b500      	push	{lr}
    3ac2:	000c      	movs	r4, r1
    3ac4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3ac6:	2800      	cmp	r0, #0
    3ac8:	d10f      	bne.n	3aea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3aca:	2a00      	cmp	r2, #0
    3acc:	dd11      	ble.n	3af2 <_read+0x36>
    3ace:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3ad0:	4e09      	ldr	r6, [pc, #36]	; (3af8 <_read+0x3c>)
    3ad2:	4d0a      	ldr	r5, [pc, #40]	; (3afc <_read+0x40>)
    3ad4:	6830      	ldr	r0, [r6, #0]
    3ad6:	0021      	movs	r1, r4
    3ad8:	682b      	ldr	r3, [r5, #0]
    3ada:	4798      	blx	r3
		ptr++;
    3adc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3ade:	42bc      	cmp	r4, r7
    3ae0:	d1f8      	bne.n	3ad4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3ae2:	4640      	mov	r0, r8
    3ae4:	bc04      	pop	{r2}
    3ae6:	4690      	mov	r8, r2
    3ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3aea:	2301      	movs	r3, #1
    3aec:	425b      	negs	r3, r3
    3aee:	4698      	mov	r8, r3
    3af0:	e7f7      	b.n	3ae2 <_read+0x26>
	for (; len > 0; --len) {
    3af2:	4680      	mov	r8, r0
    3af4:	e7f5      	b.n	3ae2 <_read+0x26>
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	20000598 	.word	0x20000598
    3afc:	20000590 	.word	0x20000590

00003b00 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b02:	46c6      	mov	lr, r8
    3b04:	b500      	push	{lr}
    3b06:	000e      	movs	r6, r1
    3b08:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3b0a:	3801      	subs	r0, #1
    3b0c:	2802      	cmp	r0, #2
    3b0e:	d810      	bhi.n	3b32 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3b10:	2a00      	cmp	r2, #0
    3b12:	d011      	beq.n	3b38 <_write+0x38>
    3b14:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3b16:	4b0c      	ldr	r3, [pc, #48]	; (3b48 <_write+0x48>)
    3b18:	4698      	mov	r8, r3
    3b1a:	4f0c      	ldr	r7, [pc, #48]	; (3b4c <_write+0x4c>)
    3b1c:	4643      	mov	r3, r8
    3b1e:	6818      	ldr	r0, [r3, #0]
    3b20:	5d31      	ldrb	r1, [r6, r4]
    3b22:	683b      	ldr	r3, [r7, #0]
    3b24:	4798      	blx	r3
    3b26:	2800      	cmp	r0, #0
    3b28:	db08      	blt.n	3b3c <_write+0x3c>
			return -1;
		}
		++nChars;
    3b2a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3b2c:	42a5      	cmp	r5, r4
    3b2e:	d1f5      	bne.n	3b1c <_write+0x1c>
    3b30:	e006      	b.n	3b40 <_write+0x40>
		return -1;
    3b32:	2401      	movs	r4, #1
    3b34:	4264      	negs	r4, r4
    3b36:	e003      	b.n	3b40 <_write+0x40>
	for (; len != 0; --len) {
    3b38:	0014      	movs	r4, r2
    3b3a:	e001      	b.n	3b40 <_write+0x40>
			return -1;
    3b3c:	2401      	movs	r4, #1
    3b3e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3b40:	0020      	movs	r0, r4
    3b42:	bc04      	pop	{r2}
    3b44:	4690      	mov	r8, r2
    3b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b48:	20000598 	.word	0x20000598
    3b4c:	20000594 	.word	0x20000594

00003b50 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3b50:	b570      	push	{r4, r5, r6, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    3b52:	2101      	movs	r1, #1
    3b54:	4b16      	ldr	r3, [pc, #88]	; (3bb0 <main+0x60>)
    3b56:	7019      	strb	r1, [r3, #0]
    3b58:	f3bf 8f5f 	dmb	sy
    3b5c:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    3b5e:	4b15      	ldr	r3, [pc, #84]	; (3bb4 <main+0x64>)
    3b60:	2200      	movs	r2, #0
    3b62:	701a      	strb	r2, [r3, #0]
    3b64:	705a      	strb	r2, [r3, #1]
    3b66:	709a      	strb	r2, [r3, #2]
    3b68:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3b6a:	7119      	strb	r1, [r3, #4]

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    3b6c:	4b12      	ldr	r3, [pc, #72]	; (3bb8 <main+0x68>)
    3b6e:	4798      	blx	r3
	
	delay_init();
    3b70:	4b12      	ldr	r3, [pc, #72]	; (3bbc <main+0x6c>)
    3b72:	4798      	blx	r3
	
	ui_lb_init();
    3b74:	4b12      	ldr	r3, [pc, #72]	; (3bc0 <main+0x70>)
    3b76:	4798      	blx	r3
	ui_powerdown();
    3b78:	4b12      	ldr	r3, [pc, #72]	; (3bc4 <main+0x74>)
    3b7a:	4798      	blx	r3
	ui_cdc_init();
    3b7c:	4b12      	ldr	r3, [pc, #72]	; (3bc8 <main+0x78>)
    3b7e:	4798      	blx	r3
	
	audio_in_init();
    3b80:	4b12      	ldr	r3, [pc, #72]	; (3bcc <main+0x7c>)
    3b82:	4798      	blx	r3
	audio_sync_init();
    3b84:	4b12      	ldr	r3, [pc, #72]	; (3bd0 <main+0x80>)
    3b86:	4798      	blx	r3
	
	sd_mmc_init();
    3b88:	4b12      	ldr	r3, [pc, #72]	; (3bd4 <main+0x84>)
    3b8a:	4798      	blx	r3

	memories_initialization();
    3b8c:	4b12      	ldr	r3, [pc, #72]	; (3bd8 <main+0x88>)
    3b8e:	4798      	blx	r3

	ui_configure_callback();
    3b90:	4b12      	ldr	r3, [pc, #72]	; (3bdc <main+0x8c>)
    3b92:	4798      	blx	r3
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    3b94:	4b12      	ldr	r3, [pc, #72]	; (3be0 <main+0x90>)
    3b96:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	while (true) {
		if(recording_on) {
    3b98:	4e12      	ldr	r6, [pc, #72]	; (3be4 <main+0x94>)
			//audio_record_1samp();
		}
		else if (main_b_msc_enable) {
    3b9a:	4c13      	ldr	r4, [pc, #76]	; (3be8 <main+0x98>)
			if (!udi_msc_process_trans()) {
    3b9c:	4d13      	ldr	r5, [pc, #76]	; (3bec <main+0x9c>)
		if(recording_on) {
    3b9e:	7833      	ldrb	r3, [r6, #0]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d1fd      	bne.n	3ba0 <main+0x50>
		else if (main_b_msc_enable) {
    3ba4:	7822      	ldrb	r2, [r4, #0]
    3ba6:	2a00      	cmp	r2, #0
    3ba8:	d0fa      	beq.n	3ba0 <main+0x50>
			if (!udi_msc_process_trans()) {
    3baa:	47a8      	blx	r5
    3bac:	e7f7      	b.n	3b9e <main+0x4e>
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	200000f9 	.word	0x200000f9
    3bb4:	20000b24 	.word	0x20000b24
    3bb8:	00006911 	.word	0x00006911
    3bbc:	00005ac5 	.word	0x00005ac5
    3bc0:	00003ef9 	.word	0x00003ef9
    3bc4:	00003fe1 	.word	0x00003fe1
    3bc8:	00003e05 	.word	0x00003e05
    3bcc:	00000785 	.word	0x00000785
    3bd0:	00000865 	.word	0x00000865
    3bd4:	00000b21 	.word	0x00000b21
    3bd8:	00003c49 	.word	0x00003c49
    3bdc:	00003f99 	.word	0x00003f99
    3be0:	00001cc9 	.word	0x00001cc9
    3be4:	2000028b 	.word	0x2000028b
    3be8:	20000289 	.word	0x20000289
    3bec:	000019e9 	.word	0x000019e9

00003bf0 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    3bf0:	b510      	push	{r4, lr}
	ui_powerdown();
    3bf2:	4b01      	ldr	r3, [pc, #4]	; (3bf8 <main_suspend_action+0x8>)
    3bf4:	4798      	blx	r3
}
    3bf6:	bd10      	pop	{r4, pc}
    3bf8:	00003fe1 	.word	0x00003fe1

00003bfc <main_resume_action>:

void main_resume_action(void)
{
    3bfc:	b510      	push	{r4, lr}
	ui_wakeup();
    3bfe:	4b01      	ldr	r3, [pc, #4]	; (3c04 <main_resume_action+0x8>)
    3c00:	4798      	blx	r3
}
    3c02:	bd10      	pop	{r4, pc}
    3c04:	00003ff1 	.word	0x00003ff1

00003c08 <main_sof_action>:

void main_sof_action(void)
{
    3c08:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    3c0a:	4b05      	ldr	r3, [pc, #20]	; (3c20 <main_sof_action+0x18>)
    3c0c:	781b      	ldrb	r3, [r3, #0]
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d100      	bne.n	3c14 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    3c12:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    3c14:	4b03      	ldr	r3, [pc, #12]	; (3c24 <main_sof_action+0x1c>)
    3c16:	4798      	blx	r3
    3c18:	4b03      	ldr	r3, [pc, #12]	; (3c28 <main_sof_action+0x20>)
    3c1a:	4798      	blx	r3
    3c1c:	e7f9      	b.n	3c12 <main_sof_action+0xa>
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	20000289 	.word	0x20000289
    3c24:	00003391 	.word	0x00003391
    3c28:	00004009 	.word	0x00004009

00003c2c <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    3c2c:	2201      	movs	r2, #1
    3c2e:	4b02      	ldr	r3, [pc, #8]	; (3c38 <main_msc_enable+0xc>)
    3c30:	701a      	strb	r2, [r3, #0]
	return true;
}
    3c32:	2001      	movs	r0, #1
    3c34:	4770      	bx	lr
    3c36:	46c0      	nop			; (mov r8, r8)
    3c38:	20000289 	.word	0x20000289

00003c3c <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    3c3c:	2200      	movs	r2, #0
    3c3e:	4b01      	ldr	r3, [pc, #4]	; (3c44 <main_msc_disable+0x8>)
    3c40:	701a      	strb	r2, [r3, #0]
}
    3c42:	4770      	bx	lr
    3c44:	20000289 	.word	0x20000289

00003c48 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    3c48:	4770      	bx	lr

00003c4a <ui_button2_callback>:
	}
}

void ui_button2_callback(void)
{
}
    3c4a:	4770      	bx	lr

00003c4c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3c4c:	b570      	push	{r4, r5, r6, lr}
    3c4e:	b082      	sub	sp, #8
    3c50:	0005      	movs	r5, r0
    3c52:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3c54:	2200      	movs	r2, #0
    3c56:	466b      	mov	r3, sp
    3c58:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3c5a:	4c06      	ldr	r4, [pc, #24]	; (3c74 <usart_serial_getchar+0x28>)
    3c5c:	466b      	mov	r3, sp
    3c5e:	1d99      	adds	r1, r3, #6
    3c60:	0028      	movs	r0, r5
    3c62:	47a0      	blx	r4
    3c64:	2800      	cmp	r0, #0
    3c66:	d1f9      	bne.n	3c5c <usart_serial_getchar+0x10>

	*c = temp;
    3c68:	466b      	mov	r3, sp
    3c6a:	3306      	adds	r3, #6
    3c6c:	881b      	ldrh	r3, [r3, #0]
    3c6e:	7033      	strb	r3, [r6, #0]
}
    3c70:	b002      	add	sp, #8
    3c72:	bd70      	pop	{r4, r5, r6, pc}
    3c74:	00002709 	.word	0x00002709

00003c78 <usart_serial_putchar>:
{
    3c78:	b570      	push	{r4, r5, r6, lr}
    3c7a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3c7c:	b28c      	uxth	r4, r1
    3c7e:	4e03      	ldr	r6, [pc, #12]	; (3c8c <usart_serial_putchar+0x14>)
    3c80:	0021      	movs	r1, r4
    3c82:	0028      	movs	r0, r5
    3c84:	47b0      	blx	r6
    3c86:	2800      	cmp	r0, #0
    3c88:	d1fa      	bne.n	3c80 <usart_serial_putchar+0x8>
}
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
    3c8c:	000026dd 	.word	0x000026dd

00003c90 <ui_button1_callback>:
{
    3c90:	b510      	push	{r4, lr}
    3c92:	4b33      	ldr	r3, [pc, #204]	; (3d60 <ui_button1_callback+0xd0>)
    3c94:	6a1b      	ldr	r3, [r3, #32]
	if(press_state) {
    3c96:	00db      	lsls	r3, r3, #3
    3c98:	d500      	bpl.n	3c9c <ui_button1_callback+0xc>
}
    3c9a:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3c9c:	2000      	movs	r0, #0
    3c9e:	4b31      	ldr	r3, [pc, #196]	; (3d64 <ui_button1_callback+0xd4>)
    3ca0:	4798      	blx	r3
    3ca2:	2264      	movs	r2, #100	; 0x64
    3ca4:	2300      	movs	r3, #0
    3ca6:	2100      	movs	r1, #0
    3ca8:	4c2f      	ldr	r4, [pc, #188]	; (3d68 <ui_button1_callback+0xd8>)
    3caa:	47a0      	blx	r4
    3cac:	4a2f      	ldr	r2, [pc, #188]	; (3d6c <ui_button1_callback+0xdc>)
    3cae:	2300      	movs	r3, #0
    3cb0:	1880      	adds	r0, r0, r2
    3cb2:	4159      	adcs	r1, r3
    3cb4:	4a2e      	ldr	r2, [pc, #184]	; (3d70 <ui_button1_callback+0xe0>)
    3cb6:	2300      	movs	r3, #0
    3cb8:	4c2e      	ldr	r4, [pc, #184]	; (3d74 <ui_button1_callback+0xe4>)
    3cba:	47a0      	blx	r4
    3cbc:	4b2e      	ldr	r3, [pc, #184]	; (3d78 <ui_button1_callback+0xe8>)
    3cbe:	4798      	blx	r3
    3cc0:	4b27      	ldr	r3, [pc, #156]	; (3d60 <ui_button1_callback+0xd0>)
    3cc2:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3cc4:	00db      	lsls	r3, r3, #3
    3cc6:	d4e8      	bmi.n	3c9a <ui_button1_callback+0xa>
		if(recording_on) {
    3cc8:	4b2c      	ldr	r3, [pc, #176]	; (3d7c <ui_button1_callback+0xec>)
    3cca:	781b      	ldrb	r3, [r3, #0]
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d023      	beq.n	3d18 <ui_button1_callback+0x88>
		port_base->OUTSET.reg = pin_mask;
    3cd0:	2280      	movs	r2, #128	; 0x80
    3cd2:	0152      	lsls	r2, r2, #5
    3cd4:	4b22      	ldr	r3, [pc, #136]	; (3d60 <ui_button1_callback+0xd0>)
    3cd6:	619a      	str	r2, [r3, #24]
	Tcc *const tcc_module = module_inst->hw;
    3cd8:	4929      	ldr	r1, [pc, #164]	; (3d80 <ui_button1_callback+0xf0>)
    3cda:	780a      	ldrb	r2, [r1, #0]
    3cdc:	784b      	ldrb	r3, [r1, #1]
    3cde:	021b      	lsls	r3, r3, #8
    3ce0:	4313      	orrs	r3, r2
    3ce2:	788a      	ldrb	r2, [r1, #2]
    3ce4:	0412      	lsls	r2, r2, #16
    3ce6:	4313      	orrs	r3, r2
    3ce8:	78ca      	ldrb	r2, [r1, #3]
    3cea:	0612      	lsls	r2, r2, #24
    3cec:	431a      	orrs	r2, r3
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3cee:	2104      	movs	r1, #4
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    3cf0:	201f      	movs	r0, #31
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    3cf2:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3cf4:	6893      	ldr	r3, [r2, #8]
    3cf6:	4219      	tst	r1, r3
    3cf8:	d1fc      	bne.n	3cf4 <ui_button1_callback+0x64>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    3cfa:	7953      	ldrb	r3, [r2, #5]
    3cfc:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    3cfe:	d005      	beq.n	3d0c <ui_button1_callback+0x7c>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    3d00:	2b40      	cmp	r3, #64	; 0x40
    3d02:	d005      	beq.n	3d10 <ui_button1_callback+0x80>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    3d04:	2b20      	cmp	r3, #32
    3d06:	d1f5      	bne.n	3cf4 <ui_button1_callback+0x64>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    3d08:	7114      	strb	r4, [r2, #4]
    3d0a:	e7f3      	b.n	3cf4 <ui_button1_callback+0x64>
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
    3d0c:	2340      	movs	r3, #64	; 0x40
    3d0e:	7153      	strb	r3, [r2, #5]
			recording_on = false;
    3d10:	2200      	movs	r2, #0
    3d12:	4b1a      	ldr	r3, [pc, #104]	; (3d7c <ui_button1_callback+0xec>)
    3d14:	701a      	strb	r2, [r3, #0]
    3d16:	e7c0      	b.n	3c9a <ui_button1_callback+0xa>
		port_base->OUTCLR.reg = pin_mask;
    3d18:	2280      	movs	r2, #128	; 0x80
    3d1a:	0152      	lsls	r2, r2, #5
    3d1c:	4b10      	ldr	r3, [pc, #64]	; (3d60 <ui_button1_callback+0xd0>)
    3d1e:	615a      	str	r2, [r3, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    3d20:	4917      	ldr	r1, [pc, #92]	; (3d80 <ui_button1_callback+0xf0>)
    3d22:	780a      	ldrb	r2, [r1, #0]
    3d24:	784b      	ldrb	r3, [r1, #1]
    3d26:	021b      	lsls	r3, r3, #8
    3d28:	4313      	orrs	r3, r2
    3d2a:	788a      	ldrb	r2, [r1, #2]
    3d2c:	0412      	lsls	r2, r2, #16
    3d2e:	4313      	orrs	r3, r2
    3d30:	78ca      	ldrb	r2, [r1, #3]
    3d32:	0612      	lsls	r2, r2, #24
    3d34:	431a      	orrs	r2, r3
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3d36:	2104      	movs	r1, #4
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    3d38:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Cancel STOP command and issue RETRIGGER */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    3d3a:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    3d3c:	6893      	ldr	r3, [r2, #8]
    3d3e:	4219      	tst	r1, r3
    3d40:	d1fc      	bne.n	3d3c <ui_button1_callback+0xac>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    3d42:	7953      	ldrb	r3, [r2, #5]
    3d44:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    3d46:	d005      	beq.n	3d54 <ui_button1_callback+0xc4>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    3d48:	2b20      	cmp	r3, #32
    3d4a:	d005      	beq.n	3d58 <ui_button1_callback+0xc8>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    3d4c:	2b40      	cmp	r3, #64	; 0x40
    3d4e:	d1f5      	bne.n	3d3c <ui_button1_callback+0xac>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    3d50:	7114      	strb	r4, [r2, #4]
    3d52:	e7f3      	b.n	3d3c <ui_button1_callback+0xac>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
    3d54:	2320      	movs	r3, #32
    3d56:	7153      	strb	r3, [r2, #5]
			recording_on = true;
    3d58:	2201      	movs	r2, #1
    3d5a:	4b08      	ldr	r3, [pc, #32]	; (3d7c <ui_button1_callback+0xec>)
    3d5c:	701a      	strb	r2, [r3, #0]
}
    3d5e:	e79c      	b.n	3c9a <ui_button1_callback+0xa>
    3d60:	41004400 	.word	0x41004400
    3d64:	000066cd 	.word	0x000066cd
    3d68:	00006e05 	.word	0x00006e05
    3d6c:	00001b57 	.word	0x00001b57
    3d70:	00001b58 	.word	0x00001b58
    3d74:	00006dc5 	.word	0x00006dc5
    3d78:	20000001 	.word	0x20000001
    3d7c:	2000028b 	.word	0x2000028b
    3d80:	200005e0 	.word	0x200005e0

00003d84 <ui_button3_callback>:

void ui_button3_callback(void)
{
    3d84:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    3d86:	4b17      	ldr	r3, [pc, #92]	; (3de4 <ui_button3_callback+0x60>)
    3d88:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    3d8a:	071b      	lsls	r3, r3, #28
    3d8c:	d500      	bpl.n	3d90 <ui_button3_callback+0xc>
		else {
			port_pin_set_output_level(UI_LED_3_PIN, UI_LED_ACTIVE);
			monitoring_on = true;
		}
	}
}
    3d8e:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    3d90:	2000      	movs	r0, #0
    3d92:	4b15      	ldr	r3, [pc, #84]	; (3de8 <ui_button3_callback+0x64>)
    3d94:	4798      	blx	r3
    3d96:	2264      	movs	r2, #100	; 0x64
    3d98:	2300      	movs	r3, #0
    3d9a:	2100      	movs	r1, #0
    3d9c:	4c13      	ldr	r4, [pc, #76]	; (3dec <ui_button3_callback+0x68>)
    3d9e:	47a0      	blx	r4
    3da0:	4a13      	ldr	r2, [pc, #76]	; (3df0 <ui_button3_callback+0x6c>)
    3da2:	2300      	movs	r3, #0
    3da4:	1880      	adds	r0, r0, r2
    3da6:	4159      	adcs	r1, r3
    3da8:	4a12      	ldr	r2, [pc, #72]	; (3df4 <ui_button3_callback+0x70>)
    3daa:	2300      	movs	r3, #0
    3dac:	4c12      	ldr	r4, [pc, #72]	; (3df8 <ui_button3_callback+0x74>)
    3dae:	47a0      	blx	r4
    3db0:	4b12      	ldr	r3, [pc, #72]	; (3dfc <ui_button3_callback+0x78>)
    3db2:	4798      	blx	r3
    3db4:	4b0b      	ldr	r3, [pc, #44]	; (3de4 <ui_button3_callback+0x60>)
    3db6:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    3db8:	071b      	lsls	r3, r3, #28
    3dba:	d4e8      	bmi.n	3d8e <ui_button3_callback+0xa>
		if(monitoring_on) {
    3dbc:	4b10      	ldr	r3, [pc, #64]	; (3e00 <ui_button3_callback+0x7c>)
    3dbe:	781b      	ldrb	r3, [r3, #0]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d107      	bne.n	3dd4 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    3dc4:	2280      	movs	r2, #128	; 0x80
    3dc6:	0212      	lsls	r2, r2, #8
    3dc8:	4b06      	ldr	r3, [pc, #24]	; (3de4 <ui_button3_callback+0x60>)
    3dca:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    3dcc:	2201      	movs	r2, #1
    3dce:	4b0c      	ldr	r3, [pc, #48]	; (3e00 <ui_button3_callback+0x7c>)
    3dd0:	701a      	strb	r2, [r3, #0]
}
    3dd2:	e7dc      	b.n	3d8e <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    3dd4:	2280      	movs	r2, #128	; 0x80
    3dd6:	0212      	lsls	r2, r2, #8
    3dd8:	4b02      	ldr	r3, [pc, #8]	; (3de4 <ui_button3_callback+0x60>)
    3dda:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    3ddc:	2200      	movs	r2, #0
    3dde:	4b08      	ldr	r3, [pc, #32]	; (3e00 <ui_button3_callback+0x7c>)
    3de0:	701a      	strb	r2, [r3, #0]
    3de2:	e7d4      	b.n	3d8e <ui_button3_callback+0xa>
    3de4:	41004400 	.word	0x41004400
    3de8:	000066cd 	.word	0x000066cd
    3dec:	00006e05 	.word	0x00006e05
    3df0:	00001b57 	.word	0x00001b57
    3df4:	00001b58 	.word	0x00001b58
    3df8:	00006dc5 	.word	0x00006dc5
    3dfc:	20000001 	.word	0x20000001
    3e00:	2000028a 	.word	0x2000028a

00003e04 <ui_cdc_init>:
{
    3e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e06:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3e08:	2380      	movs	r3, #128	; 0x80
    3e0a:	05db      	lsls	r3, r3, #23
    3e0c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3e0e:	2300      	movs	r3, #0
    3e10:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3e12:	22ff      	movs	r2, #255	; 0xff
    3e14:	4669      	mov	r1, sp
    3e16:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3e18:	2200      	movs	r2, #0
    3e1a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3e1c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3e1e:	2401      	movs	r4, #1
    3e20:	2124      	movs	r1, #36	; 0x24
    3e22:	4668      	mov	r0, sp
    3e24:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3e26:	3101      	adds	r1, #1
    3e28:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3e2a:	3101      	adds	r1, #1
    3e2c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3e2e:	3101      	adds	r1, #1
    3e30:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3e32:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3e34:	3105      	adds	r1, #5
    3e36:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3e38:	3101      	adds	r1, #1
    3e3a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3e3c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3e3e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3e40:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3e42:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3e44:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3e46:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3e48:	2313      	movs	r3, #19
    3e4a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3e4c:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    3e4e:	2380      	movs	r3, #128	; 0x80
    3e50:	035b      	lsls	r3, r3, #13
    3e52:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    3e54:	4b1a      	ldr	r3, [pc, #104]	; (3ec0 <ui_cdc_init+0xbc>)
    3e56:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    3e58:	4b1a      	ldr	r3, [pc, #104]	; (3ec4 <ui_cdc_init+0xc0>)
    3e5a:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    3e5c:	2301      	movs	r3, #1
    3e5e:	425b      	negs	r3, r3
    3e60:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    3e62:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    3e64:	23e1      	movs	r3, #225	; 0xe1
    3e66:	025b      	lsls	r3, r3, #9
    3e68:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3e6a:	4d17      	ldr	r5, [pc, #92]	; (3ec8 <ui_cdc_init+0xc4>)
    3e6c:	4b17      	ldr	r3, [pc, #92]	; (3ecc <ui_cdc_init+0xc8>)
    3e6e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3e70:	4a17      	ldr	r2, [pc, #92]	; (3ed0 <ui_cdc_init+0xcc>)
    3e72:	4b18      	ldr	r3, [pc, #96]	; (3ed4 <ui_cdc_init+0xd0>)
    3e74:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3e76:	4a18      	ldr	r2, [pc, #96]	; (3ed8 <ui_cdc_init+0xd4>)
    3e78:	4b18      	ldr	r3, [pc, #96]	; (3edc <ui_cdc_init+0xd8>)
    3e7a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3e7c:	466a      	mov	r2, sp
    3e7e:	4918      	ldr	r1, [pc, #96]	; (3ee0 <ui_cdc_init+0xdc>)
    3e80:	0028      	movs	r0, r5
    3e82:	4b18      	ldr	r3, [pc, #96]	; (3ee4 <ui_cdc_init+0xe0>)
    3e84:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3e86:	4f18      	ldr	r7, [pc, #96]	; (3ee8 <ui_cdc_init+0xe4>)
    3e88:	683b      	ldr	r3, [r7, #0]
    3e8a:	6898      	ldr	r0, [r3, #8]
    3e8c:	2100      	movs	r1, #0
    3e8e:	4e17      	ldr	r6, [pc, #92]	; (3eec <ui_cdc_init+0xe8>)
    3e90:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3e92:	683b      	ldr	r3, [r7, #0]
    3e94:	6858      	ldr	r0, [r3, #4]
    3e96:	2100      	movs	r1, #0
    3e98:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3e9a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3e9c:	0030      	movs	r0, r6
    3e9e:	4b14      	ldr	r3, [pc, #80]	; (3ef0 <ui_cdc_init+0xec>)
    3ea0:	4798      	blx	r3
    3ea2:	231f      	movs	r3, #31
    3ea4:	4018      	ands	r0, r3
    3ea6:	4084      	lsls	r4, r0
    3ea8:	4b12      	ldr	r3, [pc, #72]	; (3ef4 <ui_cdc_init+0xf0>)
    3eaa:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3eac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3eae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d1fc      	bne.n	3eae <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3eb4:	6833      	ldr	r3, [r6, #0]
    3eb6:	2202      	movs	r2, #2
    3eb8:	4313      	orrs	r3, r2
    3eba:	6033      	str	r3, [r6, #0]
}
    3ebc:	b011      	add	sp, #68	; 0x44
    3ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ec0:	00160002 	.word	0x00160002
    3ec4:	00170002 	.word	0x00170002
    3ec8:	200005a8 	.word	0x200005a8
    3ecc:	20000598 	.word	0x20000598
    3ed0:	00003c79 	.word	0x00003c79
    3ed4:	20000594 	.word	0x20000594
    3ed8:	00003c4d 	.word	0x00003c4d
    3edc:	20000590 	.word	0x20000590
    3ee0:	42001400 	.word	0x42001400
    3ee4:	00002399 	.word	0x00002399
    3ee8:	200000fc 	.word	0x200000fc
    3eec:	0000705b 	.word	0x0000705b
    3ef0:	00002309 	.word	0x00002309
    3ef4:	e000e100 	.word	0xe000e100

00003ef8 <ui_lb_init>:
{
    3ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3efa:	46c6      	mov	lr, r8
    3efc:	b500      	push	{lr}
    3efe:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    3f00:	ac03      	add	r4, sp, #12
    3f02:	2501      	movs	r5, #1
    3f04:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3f06:	2600      	movs	r6, #0
    3f08:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3f0a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    3f0c:	0021      	movs	r1, r4
    3f0e:	200c      	movs	r0, #12
    3f10:	4b1c      	ldr	r3, [pc, #112]	; (3f84 <ui_lb_init+0x8c>)
    3f12:	4698      	mov	r8, r3
    3f14:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3f16:	4f1c      	ldr	r7, [pc, #112]	; (3f88 <ui_lb_init+0x90>)
    3f18:	2380      	movs	r3, #128	; 0x80
    3f1a:	015b      	lsls	r3, r3, #5
    3f1c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    3f1e:	0021      	movs	r1, r4
    3f20:	200d      	movs	r0, #13
    3f22:	47c0      	blx	r8
    3f24:	2380      	movs	r3, #128	; 0x80
    3f26:	019b      	lsls	r3, r3, #6
    3f28:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    3f2a:	0021      	movs	r1, r4
    3f2c:	200f      	movs	r0, #15
    3f2e:	47c0      	blx	r8
    3f30:	2380      	movs	r3, #128	; 0x80
    3f32:	021b      	lsls	r3, r3, #8
    3f34:	61bb      	str	r3, [r7, #24]
	extint_chan_get_config_defaults(&config_extint_chan);
    3f36:	4668      	mov	r0, sp
    3f38:	4b14      	ldr	r3, [pc, #80]	; (3f8c <ui_lb_init+0x94>)
    3f3a:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    3f3c:	231c      	movs	r3, #28
    3f3e:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    3f40:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3f42:	466b      	mov	r3, sp
    3f44:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3f46:	2403      	movs	r4, #3
    3f48:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    3f4a:	4669      	mov	r1, sp
    3f4c:	2008      	movs	r0, #8
    3f4e:	4f10      	ldr	r7, [pc, #64]	; (3f90 <ui_lb_init+0x98>)
    3f50:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    3f52:	2302      	movs	r3, #2
    3f54:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    3f56:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3f58:	466b      	mov	r3, sp
    3f5a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3f5c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    3f5e:	4669      	mov	r1, sp
    3f60:	2002      	movs	r0, #2
    3f62:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    3f64:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    3f66:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    3f68:	466b      	mov	r3, sp
    3f6a:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    3f6c:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    3f6e:	4669      	mov	r1, sp
    3f70:	2003      	movs	r0, #3
    3f72:	47b8      	blx	r7
		port_base->OUTCLR.reg = pin_mask;
    3f74:	2280      	movs	r2, #128	; 0x80
    3f76:	05d2      	lsls	r2, r2, #23
    3f78:	4b06      	ldr	r3, [pc, #24]	; (3f94 <ui_lb_init+0x9c>)
    3f7a:	615a      	str	r2, [r3, #20]
}
    3f7c:	b004      	add	sp, #16
    3f7e:	bc04      	pop	{r2}
    3f80:	4690      	mov	r8, r2
    3f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f84:	00006589 	.word	0x00006589
    3f88:	41004400 	.word	0x41004400
    3f8c:	0000223d 	.word	0x0000223d
    3f90:	00002251 	.word	0x00002251
    3f94:	41004480 	.word	0x41004480

00003f98 <ui_configure_callback>:
{
    3f98:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3f9a:	2200      	movs	r2, #0
    3f9c:	2108      	movs	r1, #8
    3f9e:	480b      	ldr	r0, [pc, #44]	; (3fcc <ui_configure_callback+0x34>)
    3fa0:	4c0b      	ldr	r4, [pc, #44]	; (3fd0 <ui_configure_callback+0x38>)
    3fa2:	47a0      	blx	r4
	extint_register_callback(ui_button2_callback, UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3fa4:	2200      	movs	r2, #0
    3fa6:	2102      	movs	r1, #2
    3fa8:	480a      	ldr	r0, [pc, #40]	; (3fd4 <ui_configure_callback+0x3c>)
    3faa:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3fac:	2200      	movs	r2, #0
    3fae:	2103      	movs	r1, #3
    3fb0:	4809      	ldr	r0, [pc, #36]	; (3fd8 <ui_configure_callback+0x40>)
    3fb2:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3fb4:	2100      	movs	r1, #0
    3fb6:	2008      	movs	r0, #8
    3fb8:	4c08      	ldr	r4, [pc, #32]	; (3fdc <ui_configure_callback+0x44>)
    3fba:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_2_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3fbc:	2100      	movs	r1, #0
    3fbe:	2002      	movs	r0, #2
    3fc0:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3fc2:	2100      	movs	r1, #0
    3fc4:	2003      	movs	r0, #3
    3fc6:	47a0      	blx	r4
}
    3fc8:	bd10      	pop	{r4, pc}
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	00003c91 	.word	0x00003c91
    3fd0:	00004ec9 	.word	0x00004ec9
    3fd4:	00003c4b 	.word	0x00003c4b
    3fd8:	00003d85 	.word	0x00003d85
    3fdc:	00004ef5 	.word	0x00004ef5

00003fe0 <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    3fe0:	2280      	movs	r2, #128	; 0x80
    3fe2:	05d2      	lsls	r2, r2, #23
    3fe4:	4b01      	ldr	r3, [pc, #4]	; (3fec <ui_powerdown+0xc>)
    3fe6:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    3fe8:	4770      	bx	lr
    3fea:	46c0      	nop			; (mov r8, r8)
    3fec:	41004480 	.word	0x41004480

00003ff0 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    3ff0:	2280      	movs	r2, #128	; 0x80
    3ff2:	05d2      	lsls	r2, r2, #23
    3ff4:	4b01      	ldr	r3, [pc, #4]	; (3ffc <ui_wakeup+0xc>)
    3ff6:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    3ff8:	4770      	bx	lr
    3ffa:	46c0      	nop			; (mov r8, r8)
    3ffc:	41004480 	.word	0x41004480

00004000 <ui_start_read>:

void ui_start_read(void)
{
}
    4000:	4770      	bx	lr

00004002 <ui_stop_read>:

void ui_stop_read(void)
{
}
    4002:	4770      	bx	lr

00004004 <ui_start_write>:

void ui_start_write(void)
{
}
    4004:	4770      	bx	lr

00004006 <ui_stop_write>:

void ui_stop_write(void)
{
}
    4006:	4770      	bx	lr

00004008 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    4008:	2800      	cmp	r0, #0
    400a:	d104      	bne.n	4016 <ui_process+0xe>
    400c:	2280      	movs	r2, #128	; 0x80
    400e:	05d2      	lsls	r2, r2, #23
    4010:	4b05      	ldr	r3, [pc, #20]	; (4028 <ui_process+0x20>)
    4012:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    4014:	4770      	bx	lr
	if (1000 == framenumber) {
    4016:	23fa      	movs	r3, #250	; 0xfa
    4018:	009b      	lsls	r3, r3, #2
    401a:	4298      	cmp	r0, r3
    401c:	d1fa      	bne.n	4014 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    401e:	2280      	movs	r2, #128	; 0x80
    4020:	05d2      	lsls	r2, r2, #23
    4022:	4b01      	ldr	r3, [pc, #4]	; (4028 <ui_process+0x20>)
    4024:	619a      	str	r2, [r3, #24]
}
    4026:	e7f5      	b.n	4014 <ui_process+0xc>
    4028:	41004480 	.word	0x41004480

0000402c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    402c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    402e:	000b      	movs	r3, r1
    4030:	332e      	adds	r3, #46	; 0x2e
    4032:	009b      	lsls	r3, r3, #2
    4034:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    4036:	22aa      	movs	r2, #170	; 0xaa
    4038:	0052      	lsls	r2, r2, #1
    403a:	0049      	lsls	r1, r1, #1
    403c:	5a83      	ldrh	r3, [r0, r2]
    403e:	4c03      	ldr	r4, [pc, #12]	; (404c <usb_device_register_callback+0x20>)
    4040:	5b09      	ldrh	r1, [r1, r4]
    4042:	430b      	orrs	r3, r1
    4044:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    4046:	2000      	movs	r0, #0
    4048:	bd10      	pop	{r4, pc}
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	00007ae0 	.word	0x00007ae0

00004050 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    4050:	0049      	lsls	r1, r1, #1
    4052:	4b06      	ldr	r3, [pc, #24]	; (406c <usb_device_enable_callback+0x1c>)
    4054:	5acb      	ldrh	r3, [r1, r3]
    4056:	6802      	ldr	r2, [r0, #0]
    4058:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    405a:	21ab      	movs	r1, #171	; 0xab
    405c:	0049      	lsls	r1, r1, #1
    405e:	5a42      	ldrh	r2, [r0, r1]
    4060:	431a      	orrs	r2, r3
    4062:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    4064:	6802      	ldr	r2, [r0, #0]
    4066:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    4068:	2000      	movs	r0, #0
    406a:	4770      	bx	lr
    406c:	00007ae0 	.word	0x00007ae0

00004070 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    4070:	0049      	lsls	r1, r1, #1
    4072:	4b05      	ldr	r3, [pc, #20]	; (4088 <usb_device_disable_callback+0x18>)
    4074:	5aca      	ldrh	r2, [r1, r3]
    4076:	21ab      	movs	r1, #171	; 0xab
    4078:	0049      	lsls	r1, r1, #1
    407a:	5a43      	ldrh	r3, [r0, r1]
    407c:	4393      	bics	r3, r2
    407e:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    4080:	6803      	ldr	r3, [r0, #0]
    4082:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    4084:	2000      	movs	r0, #0
    4086:	4770      	bx	lr
    4088:	00007ae0 	.word	0x00007ae0

0000408c <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    408c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    408e:	008c      	lsls	r4, r1, #2
    4090:	18a4      	adds	r4, r4, r2
    4092:	3434      	adds	r4, #52	; 0x34
    4094:	00a4      	lsls	r4, r4, #2
    4096:	1904      	adds	r4, r0, r4
    4098:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    409a:	1840      	adds	r0, r0, r1
    409c:	3059      	adds	r0, #89	; 0x59
    409e:	30ff      	adds	r0, #255	; 0xff
    40a0:	7803      	ldrb	r3, [r0, #0]
    40a2:	4903      	ldr	r1, [pc, #12]	; (40b0 <usb_device_endpoint_register_callback+0x24>)
    40a4:	5c8a      	ldrb	r2, [r1, r2]
    40a6:	4313      	orrs	r3, r2
    40a8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    40aa:	2000      	movs	r0, #0
    40ac:	bd10      	pop	{r4, pc}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	00007af0 	.word	0x00007af0

000040b4 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    40b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    40b6:	008b      	lsls	r3, r1, #2
    40b8:	189b      	adds	r3, r3, r2
    40ba:	3334      	adds	r3, #52	; 0x34
    40bc:	009b      	lsls	r3, r3, #2
    40be:	18c3      	adds	r3, r0, r3
    40c0:	2400      	movs	r4, #0
    40c2:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    40c4:	1840      	adds	r0, r0, r1
    40c6:	3059      	adds	r0, #89	; 0x59
    40c8:	30ff      	adds	r0, #255	; 0xff
    40ca:	4b03      	ldr	r3, [pc, #12]	; (40d8 <usb_device_endpoint_unregister_callback+0x24>)
    40cc:	5c9a      	ldrb	r2, [r3, r2]
    40ce:	7803      	ldrb	r3, [r0, #0]
    40d0:	4393      	bics	r3, r2
    40d2:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    40d4:	2000      	movs	r0, #0
    40d6:	bd10      	pop	{r4, pc}
    40d8:	00007af0 	.word	0x00007af0

000040dc <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    40dc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    40de:	230f      	movs	r3, #15
    40e0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    40e2:	18c4      	adds	r4, r0, r3
    40e4:	3461      	adds	r4, #97	; 0x61
    40e6:	34ff      	adds	r4, #255	; 0xff
    40e8:	7825      	ldrb	r5, [r4, #0]
    40ea:	4e2f      	ldr	r6, [pc, #188]	; (41a8 <usb_device_endpoint_enable_callback+0xcc>)
    40ec:	5cb6      	ldrb	r6, [r6, r2]
    40ee:	4335      	orrs	r5, r6
    40f0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    40f2:	2a00      	cmp	r2, #0
    40f4:	d129      	bne.n	414a <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    40f6:	2b00      	cmp	r3, #0
    40f8:	d112      	bne.n	4120 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    40fa:	2503      	movs	r5, #3
    40fc:	240a      	movs	r4, #10
    40fe:	34ff      	adds	r4, #255	; 0xff
    4100:	6806      	ldr	r6, [r0, #0]
    4102:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4104:	2a03      	cmp	r2, #3
    4106:	d109      	bne.n	411c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    4108:	b249      	sxtb	r1, r1
    410a:	2900      	cmp	r1, #0
    410c:	db44      	blt.n	4198 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    410e:	6802      	ldr	r2, [r0, #0]
    4110:	015b      	lsls	r3, r3, #5
    4112:	18d3      	adds	r3, r2, r3
    4114:	330a      	adds	r3, #10
    4116:	33ff      	adds	r3, #255	; 0xff
    4118:	2220      	movs	r2, #32
    411a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    411c:	2000      	movs	r0, #0
    411e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4120:	b24c      	sxtb	r4, r1
    4122:	2c00      	cmp	r4, #0
    4124:	db08      	blt.n	4138 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    4126:	015c      	lsls	r4, r3, #5
    4128:	6805      	ldr	r5, [r0, #0]
    412a:	46ac      	mov	ip, r5
    412c:	4464      	add	r4, ip
    412e:	340a      	adds	r4, #10
    4130:	34ff      	adds	r4, #255	; 0xff
    4132:	2501      	movs	r5, #1
    4134:	7025      	strb	r5, [r4, #0]
    4136:	e7e5      	b.n	4104 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    4138:	015c      	lsls	r4, r3, #5
    413a:	6805      	ldr	r5, [r0, #0]
    413c:	46ac      	mov	ip, r5
    413e:	4464      	add	r4, ip
    4140:	340a      	adds	r4, #10
    4142:	34ff      	adds	r4, #255	; 0xff
    4144:	2502      	movs	r5, #2
    4146:	7025      	strb	r5, [r4, #0]
    4148:	e7dc      	b.n	4104 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    414a:	2a01      	cmp	r2, #1
    414c:	d11a      	bne.n	4184 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    414e:	2b00      	cmp	r3, #0
    4150:	d105      	bne.n	415e <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    4152:	6802      	ldr	r2, [r0, #0]
    4154:	210c      	movs	r1, #12
    4156:	230a      	movs	r3, #10
    4158:	33ff      	adds	r3, #255	; 0xff
    415a:	54d1      	strb	r1, [r2, r3]
    415c:	e7de      	b.n	411c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    415e:	b249      	sxtb	r1, r1
    4160:	2900      	cmp	r1, #0
    4162:	db07      	blt.n	4174 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    4164:	6802      	ldr	r2, [r0, #0]
    4166:	015b      	lsls	r3, r3, #5
    4168:	18d3      	adds	r3, r2, r3
    416a:	330a      	adds	r3, #10
    416c:	33ff      	adds	r3, #255	; 0xff
    416e:	2204      	movs	r2, #4
    4170:	701a      	strb	r2, [r3, #0]
    4172:	e7d3      	b.n	411c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    4174:	6802      	ldr	r2, [r0, #0]
    4176:	015b      	lsls	r3, r3, #5
    4178:	18d3      	adds	r3, r2, r3
    417a:	330a      	adds	r3, #10
    417c:	33ff      	adds	r3, #255	; 0xff
    417e:	2208      	movs	r2, #8
    4180:	701a      	strb	r2, [r3, #0]
    4182:	e7cb      	b.n	411c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4184:	2a02      	cmp	r2, #2
    4186:	d1bd      	bne.n	4104 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4188:	6802      	ldr	r2, [r0, #0]
    418a:	015b      	lsls	r3, r3, #5
    418c:	18d3      	adds	r3, r2, r3
    418e:	330a      	adds	r3, #10
    4190:	33ff      	adds	r3, #255	; 0xff
    4192:	2210      	movs	r2, #16
    4194:	701a      	strb	r2, [r3, #0]
    4196:	e7c1      	b.n	411c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    4198:	6802      	ldr	r2, [r0, #0]
    419a:	015b      	lsls	r3, r3, #5
    419c:	18d3      	adds	r3, r2, r3
    419e:	330a      	adds	r3, #10
    41a0:	33ff      	adds	r3, #255	; 0xff
    41a2:	2240      	movs	r2, #64	; 0x40
    41a4:	701a      	strb	r2, [r3, #0]
    41a6:	e7b9      	b.n	411c <usb_device_endpoint_enable_callback+0x40>
    41a8:	00007af0 	.word	0x00007af0

000041ac <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    41ac:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    41ae:	230f      	movs	r3, #15
    41b0:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    41b2:	18c4      	adds	r4, r0, r3
    41b4:	3461      	adds	r4, #97	; 0x61
    41b6:	34ff      	adds	r4, #255	; 0xff
    41b8:	4d2f      	ldr	r5, [pc, #188]	; (4278 <usb_device_endpoint_disable_callback+0xcc>)
    41ba:	5cae      	ldrb	r6, [r5, r2]
    41bc:	7825      	ldrb	r5, [r4, #0]
    41be:	43b5      	bics	r5, r6
    41c0:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    41c2:	2a00      	cmp	r2, #0
    41c4:	d129      	bne.n	421a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    41c6:	2b00      	cmp	r3, #0
    41c8:	d112      	bne.n	41f0 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    41ca:	2503      	movs	r5, #3
    41cc:	2484      	movs	r4, #132	; 0x84
    41ce:	0064      	lsls	r4, r4, #1
    41d0:	6806      	ldr	r6, [r0, #0]
    41d2:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    41d4:	2a03      	cmp	r2, #3
    41d6:	d109      	bne.n	41ec <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    41d8:	b249      	sxtb	r1, r1
    41da:	2900      	cmp	r1, #0
    41dc:	db44      	blt.n	4268 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    41de:	6802      	ldr	r2, [r0, #0]
    41e0:	015b      	lsls	r3, r3, #5
    41e2:	18d3      	adds	r3, r2, r3
    41e4:	3309      	adds	r3, #9
    41e6:	33ff      	adds	r3, #255	; 0xff
    41e8:	2220      	movs	r2, #32
    41ea:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    41ec:	2000      	movs	r0, #0
    41ee:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    41f0:	b24c      	sxtb	r4, r1
    41f2:	2c00      	cmp	r4, #0
    41f4:	db08      	blt.n	4208 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    41f6:	015c      	lsls	r4, r3, #5
    41f8:	6805      	ldr	r5, [r0, #0]
    41fa:	46ac      	mov	ip, r5
    41fc:	4464      	add	r4, ip
    41fe:	3409      	adds	r4, #9
    4200:	34ff      	adds	r4, #255	; 0xff
    4202:	2501      	movs	r5, #1
    4204:	7025      	strb	r5, [r4, #0]
    4206:	e7e5      	b.n	41d4 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    4208:	015c      	lsls	r4, r3, #5
    420a:	6805      	ldr	r5, [r0, #0]
    420c:	46ac      	mov	ip, r5
    420e:	4464      	add	r4, ip
    4210:	3409      	adds	r4, #9
    4212:	34ff      	adds	r4, #255	; 0xff
    4214:	2502      	movs	r5, #2
    4216:	7025      	strb	r5, [r4, #0]
    4218:	e7dc      	b.n	41d4 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    421a:	2a01      	cmp	r2, #1
    421c:	d11a      	bne.n	4254 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    421e:	2b00      	cmp	r3, #0
    4220:	d105      	bne.n	422e <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    4222:	6802      	ldr	r2, [r0, #0]
    4224:	210c      	movs	r1, #12
    4226:	3309      	adds	r3, #9
    4228:	33ff      	adds	r3, #255	; 0xff
    422a:	54d1      	strb	r1, [r2, r3]
    422c:	e7de      	b.n	41ec <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    422e:	b249      	sxtb	r1, r1
    4230:	2900      	cmp	r1, #0
    4232:	db07      	blt.n	4244 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    4234:	6802      	ldr	r2, [r0, #0]
    4236:	015b      	lsls	r3, r3, #5
    4238:	18d3      	adds	r3, r2, r3
    423a:	3309      	adds	r3, #9
    423c:	33ff      	adds	r3, #255	; 0xff
    423e:	2204      	movs	r2, #4
    4240:	701a      	strb	r2, [r3, #0]
    4242:	e7d3      	b.n	41ec <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    4244:	6802      	ldr	r2, [r0, #0]
    4246:	015b      	lsls	r3, r3, #5
    4248:	18d3      	adds	r3, r2, r3
    424a:	3309      	adds	r3, #9
    424c:	33ff      	adds	r3, #255	; 0xff
    424e:	2208      	movs	r2, #8
    4250:	701a      	strb	r2, [r3, #0]
    4252:	e7cb      	b.n	41ec <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4254:	2a02      	cmp	r2, #2
    4256:	d1bd      	bne.n	41d4 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    4258:	6802      	ldr	r2, [r0, #0]
    425a:	015b      	lsls	r3, r3, #5
    425c:	18d3      	adds	r3, r2, r3
    425e:	3309      	adds	r3, #9
    4260:	33ff      	adds	r3, #255	; 0xff
    4262:	2210      	movs	r2, #16
    4264:	701a      	strb	r2, [r3, #0]
    4266:	e7c1      	b.n	41ec <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    4268:	6802      	ldr	r2, [r0, #0]
    426a:	015b      	lsls	r3, r3, #5
    426c:	18d3      	adds	r3, r2, r3
    426e:	3309      	adds	r3, #9
    4270:	33ff      	adds	r3, #255	; 0xff
    4272:	2240      	movs	r2, #64	; 0x40
    4274:	701a      	strb	r2, [r3, #0]
    4276:	e7b9      	b.n	41ec <usb_device_endpoint_disable_callback+0x40>
    4278:	00007af0 	.word	0x00007af0

0000427c <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    427c:	2300      	movs	r3, #0
    427e:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    4280:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    4282:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    4284:	3301      	adds	r3, #1
    4286:	70c3      	strb	r3, [r0, #3]
}
    4288:	4770      	bx	lr
	...

0000428c <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    428c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    428e:	780c      	ldrb	r4, [r1, #0]
    4290:	230f      	movs	r3, #15
    4292:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4294:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    4296:	78ca      	ldrb	r2, [r1, #3]
    4298:	2a04      	cmp	r2, #4
    429a:	d870      	bhi.n	437e <usb_device_endpoint_set_config+0xf2>
    429c:	0092      	lsls	r2, r2, #2
    429e:	4d89      	ldr	r5, [pc, #548]	; (44c4 <usb_device_endpoint_set_config+0x238>)
    42a0:	58aa      	ldr	r2, [r5, r2]
    42a2:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    42a4:	6802      	ldr	r2, [r0, #0]
    42a6:	3308      	adds	r3, #8
    42a8:	015b      	lsls	r3, r3, #5
    42aa:	2100      	movs	r1, #0
    42ac:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    42ae:	2200      	movs	r2, #0
    42b0:	e082      	b.n	43b8 <usb_device_endpoint_set_config+0x12c>
    42b2:	015c      	lsls	r4, r3, #5
    42b4:	6802      	ldr	r2, [r0, #0]
    42b6:	4694      	mov	ip, r2
    42b8:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    42ba:	2280      	movs	r2, #128	; 0x80
    42bc:	0052      	lsls	r2, r2, #1
    42be:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    42c0:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    42c2:	076d      	lsls	r5, r5, #29
    42c4:	d178      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    42c6:	32e4      	adds	r2, #228	; 0xe4
    42c8:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    42ca:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    42cc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    42ce:	422e      	tst	r6, r5
    42d0:	d172      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    42d2:	3d5f      	subs	r5, #95	; 0x5f
    42d4:	32e4      	adds	r2, #228	; 0xe4
    42d6:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    42d8:	001a      	movs	r2, r3
    42da:	3208      	adds	r2, #8
    42dc:	0152      	lsls	r2, r2, #5
    42de:	6804      	ldr	r4, [r0, #0]
    42e0:	18a4      	adds	r4, r4, r2
    42e2:	352f      	adds	r5, #47	; 0x2f
    42e4:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    42e6:	6800      	ldr	r0, [r0, #0]
    42e8:	1882      	adds	r2, r0, r2
    42ea:	2080      	movs	r0, #128	; 0x80
    42ec:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    42ee:	788a      	ldrb	r2, [r1, #2]
    42f0:	2a00      	cmp	r2, #0
    42f2:	d01f      	beq.n	4334 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    42f4:	0158      	lsls	r0, r3, #5
    42f6:	4a74      	ldr	r2, [pc, #464]	; (44c8 <usb_device_endpoint_set_config+0x23c>)
    42f8:	1812      	adds	r2, r2, r0
    42fa:	6854      	ldr	r4, [r2, #4]
    42fc:	2080      	movs	r0, #128	; 0x80
    42fe:	0600      	lsls	r0, r0, #24
    4300:	4304      	orrs	r4, r0
    4302:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4304:	6954      	ldr	r4, [r2, #20]
    4306:	4320      	orrs	r0, r4
    4308:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    430a:	2507      	movs	r5, #7
    430c:	784c      	ldrb	r4, [r1, #1]
    430e:	015a      	lsls	r2, r3, #5
    4310:	4b6d      	ldr	r3, [pc, #436]	; (44c8 <usb_device_endpoint_set_config+0x23c>)
    4312:	189b      	adds	r3, r3, r2
    4314:	6858      	ldr	r0, [r3, #4]
    4316:	402c      	ands	r4, r5
    4318:	0724      	lsls	r4, r4, #28
    431a:	4e6c      	ldr	r6, [pc, #432]	; (44cc <usb_device_endpoint_set_config+0x240>)
    431c:	4030      	ands	r0, r6
    431e:	4320      	orrs	r0, r4
    4320:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4322:	7849      	ldrb	r1, [r1, #1]
    4324:	695a      	ldr	r2, [r3, #20]
    4326:	4029      	ands	r1, r5
    4328:	0709      	lsls	r1, r1, #28
    432a:	4032      	ands	r2, r6
    432c:	430a      	orrs	r2, r1
    432e:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    4330:	2200      	movs	r2, #0
    4332:	e041      	b.n	43b8 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4334:	0158      	lsls	r0, r3, #5
    4336:	4a64      	ldr	r2, [pc, #400]	; (44c8 <usb_device_endpoint_set_config+0x23c>)
    4338:	1812      	adds	r2, r2, r0
    433a:	6850      	ldr	r0, [r2, #4]
    433c:	0040      	lsls	r0, r0, #1
    433e:	0840      	lsrs	r0, r0, #1
    4340:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4342:	6950      	ldr	r0, [r2, #20]
    4344:	0040      	lsls	r0, r0, #1
    4346:	0840      	lsrs	r0, r0, #1
    4348:	6150      	str	r0, [r2, #20]
    434a:	e7de      	b.n	430a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    434c:	2c00      	cmp	r4, #0
    434e:	db35      	blt.n	43bc <usb_device_endpoint_set_config+0x130>
    4350:	015d      	lsls	r5, r3, #5
    4352:	6802      	ldr	r2, [r0, #0]
    4354:	4694      	mov	ip, r2
    4356:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4358:	2280      	movs	r2, #128	; 0x80
    435a:	0052      	lsls	r2, r2, #1
    435c:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    435e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4360:	0776      	lsls	r6, r6, #29
    4362:	d129      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4364:	2680      	movs	r6, #128	; 0x80
    4366:	0076      	lsls	r6, r6, #1
    4368:	5daa      	ldrb	r2, [r5, r6]
    436a:	2702      	movs	r7, #2
    436c:	433a      	orrs	r2, r7
    436e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4370:	6802      	ldr	r2, [r0, #0]
    4372:	0018      	movs	r0, r3
    4374:	3008      	adds	r0, #8
    4376:	0140      	lsls	r0, r0, #5
    4378:	1812      	adds	r2, r2, r0
    437a:	2040      	movs	r0, #64	; 0x40
    437c:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    437e:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4380:	784f      	ldrb	r7, [r1, #1]
    4382:	005d      	lsls	r5, r3, #1
    4384:	18ad      	adds	r5, r5, r2
    4386:	012d      	lsls	r5, r5, #4
    4388:	4e4f      	ldr	r6, [pc, #316]	; (44c8 <usb_device_endpoint_set_config+0x23c>)
    438a:	1975      	adds	r5, r6, r5
    438c:	6868      	ldr	r0, [r5, #4]
    438e:	2407      	movs	r4, #7
    4390:	403c      	ands	r4, r7
    4392:	0724      	lsls	r4, r4, #28
    4394:	4e4d      	ldr	r6, [pc, #308]	; (44cc <usb_device_endpoint_set_config+0x240>)
    4396:	4030      	ands	r0, r6
    4398:	4320      	orrs	r0, r4
    439a:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    439c:	7889      	ldrb	r1, [r1, #2]
    439e:	2900      	cmp	r1, #0
    43a0:	d000      	beq.n	43a4 <usb_device_endpoint_set_config+0x118>
    43a2:	e088      	b.n	44b6 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    43a4:	005b      	lsls	r3, r3, #1
    43a6:	189b      	adds	r3, r3, r2
    43a8:	011b      	lsls	r3, r3, #4
    43aa:	4a47      	ldr	r2, [pc, #284]	; (44c8 <usb_device_endpoint_set_config+0x23c>)
    43ac:	18d3      	adds	r3, r2, r3
    43ae:	685a      	ldr	r2, [r3, #4]
    43b0:	0052      	lsls	r2, r2, #1
    43b2:	0852      	lsrs	r2, r2, #1
    43b4:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    43b6:	2200      	movs	r2, #0
}
    43b8:	0010      	movs	r0, r2
    43ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43bc:	015d      	lsls	r5, r3, #5
    43be:	6802      	ldr	r2, [r0, #0]
    43c0:	4694      	mov	ip, r2
    43c2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    43c4:	2280      	movs	r2, #128	; 0x80
    43c6:	0052      	lsls	r2, r2, #1
    43c8:	5caf      	ldrb	r7, [r5, r2]
    43ca:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    43cc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    43ce:	4237      	tst	r7, r6
    43d0:	d1f2      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    43d2:	3690      	adds	r6, #144	; 0x90
    43d4:	5daa      	ldrb	r2, [r5, r6]
    43d6:	2720      	movs	r7, #32
    43d8:	433a      	orrs	r2, r7
    43da:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    43dc:	6802      	ldr	r2, [r0, #0]
    43de:	0018      	movs	r0, r3
    43e0:	3008      	adds	r0, #8
    43e2:	0140      	lsls	r0, r0, #5
    43e4:	1812      	adds	r2, r2, r0
    43e6:	2080      	movs	r0, #128	; 0x80
    43e8:	7110      	strb	r0, [r2, #4]
    43ea:	e7c8      	b.n	437e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    43ec:	2c00      	cmp	r4, #0
    43ee:	db17      	blt.n	4420 <usb_device_endpoint_set_config+0x194>
    43f0:	015d      	lsls	r5, r3, #5
    43f2:	6802      	ldr	r2, [r0, #0]
    43f4:	4694      	mov	ip, r2
    43f6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    43f8:	2280      	movs	r2, #128	; 0x80
    43fa:	0052      	lsls	r2, r2, #1
    43fc:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    43fe:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4400:	0776      	lsls	r6, r6, #29
    4402:	d1d9      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4404:	2680      	movs	r6, #128	; 0x80
    4406:	0076      	lsls	r6, r6, #1
    4408:	5daa      	ldrb	r2, [r5, r6]
    440a:	2703      	movs	r7, #3
    440c:	433a      	orrs	r2, r7
    440e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4410:	6802      	ldr	r2, [r0, #0]
    4412:	0018      	movs	r0, r3
    4414:	3008      	adds	r0, #8
    4416:	0140      	lsls	r0, r0, #5
    4418:	1812      	adds	r2, r2, r0
    441a:	2040      	movs	r0, #64	; 0x40
    441c:	7150      	strb	r0, [r2, #5]
    441e:	e7ae      	b.n	437e <usb_device_endpoint_set_config+0xf2>
    4420:	015d      	lsls	r5, r3, #5
    4422:	6802      	ldr	r2, [r0, #0]
    4424:	4694      	mov	ip, r2
    4426:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4428:	2280      	movs	r2, #128	; 0x80
    442a:	0052      	lsls	r2, r2, #1
    442c:	5caf      	ldrb	r7, [r5, r2]
    442e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4430:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4432:	4237      	tst	r7, r6
    4434:	d1c0      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4436:	3690      	adds	r6, #144	; 0x90
    4438:	5daa      	ldrb	r2, [r5, r6]
    443a:	2730      	movs	r7, #48	; 0x30
    443c:	433a      	orrs	r2, r7
    443e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4440:	6802      	ldr	r2, [r0, #0]
    4442:	0018      	movs	r0, r3
    4444:	3008      	adds	r0, #8
    4446:	0140      	lsls	r0, r0, #5
    4448:	1812      	adds	r2, r2, r0
    444a:	2080      	movs	r0, #128	; 0x80
    444c:	7110      	strb	r0, [r2, #4]
    444e:	e796      	b.n	437e <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4450:	2c00      	cmp	r4, #0
    4452:	db17      	blt.n	4484 <usb_device_endpoint_set_config+0x1f8>
    4454:	015d      	lsls	r5, r3, #5
    4456:	6802      	ldr	r2, [r0, #0]
    4458:	4694      	mov	ip, r2
    445a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    445c:	2280      	movs	r2, #128	; 0x80
    445e:	0052      	lsls	r2, r2, #1
    4460:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4462:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4464:	0776      	lsls	r6, r6, #29
    4466:	d1a7      	bne.n	43b8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4468:	2680      	movs	r6, #128	; 0x80
    446a:	0076      	lsls	r6, r6, #1
    446c:	5daa      	ldrb	r2, [r5, r6]
    446e:	2704      	movs	r7, #4
    4470:	433a      	orrs	r2, r7
    4472:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4474:	6802      	ldr	r2, [r0, #0]
    4476:	0018      	movs	r0, r3
    4478:	3008      	adds	r0, #8
    447a:	0140      	lsls	r0, r0, #5
    447c:	1812      	adds	r2, r2, r0
    447e:	2040      	movs	r0, #64	; 0x40
    4480:	7150      	strb	r0, [r2, #5]
    4482:	e77c      	b.n	437e <usb_device_endpoint_set_config+0xf2>
    4484:	015d      	lsls	r5, r3, #5
    4486:	6802      	ldr	r2, [r0, #0]
    4488:	4694      	mov	ip, r2
    448a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    448c:	2280      	movs	r2, #128	; 0x80
    448e:	0052      	lsls	r2, r2, #1
    4490:	5caf      	ldrb	r7, [r5, r2]
    4492:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4494:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4496:	4237      	tst	r7, r6
    4498:	d000      	beq.n	449c <usb_device_endpoint_set_config+0x210>
    449a:	e78d      	b.n	43b8 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    449c:	3690      	adds	r6, #144	; 0x90
    449e:	5daa      	ldrb	r2, [r5, r6]
    44a0:	2740      	movs	r7, #64	; 0x40
    44a2:	433a      	orrs	r2, r7
    44a4:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    44a6:	6802      	ldr	r2, [r0, #0]
    44a8:	0018      	movs	r0, r3
    44aa:	3008      	adds	r0, #8
    44ac:	0140      	lsls	r0, r0, #5
    44ae:	1812      	adds	r2, r2, r0
    44b0:	2080      	movs	r0, #128	; 0x80
    44b2:	7110      	strb	r0, [r2, #4]
    44b4:	e763      	b.n	437e <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    44b6:	6869      	ldr	r1, [r5, #4]
    44b8:	2380      	movs	r3, #128	; 0x80
    44ba:	061b      	lsls	r3, r3, #24
    44bc:	430b      	orrs	r3, r1
    44be:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    44c0:	2200      	movs	r2, #0
    44c2:	e779      	b.n	43b8 <usb_device_endpoint_set_config+0x12c>
    44c4:	00007acc 	.word	0x00007acc
    44c8:	20000620 	.word	0x20000620
    44cc:	8fffffff 	.word	0x8fffffff

000044d0 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    44d0:	230f      	movs	r3, #15
    44d2:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    44d4:	b249      	sxtb	r1, r1
    44d6:	2900      	cmp	r1, #0
    44d8:	db09      	blt.n	44ee <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    44da:	6802      	ldr	r2, [r0, #0]
    44dc:	3308      	adds	r3, #8
    44de:	015b      	lsls	r3, r3, #5
    44e0:	5c98      	ldrb	r0, [r3, r2]
    44e2:	0740      	lsls	r0, r0, #29
    44e4:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    44e6:	1e43      	subs	r3, r0, #1
    44e8:	4198      	sbcs	r0, r3
    44ea:	b2c0      	uxtb	r0, r0
}
    44ec:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    44ee:	6802      	ldr	r2, [r0, #0]
    44f0:	3308      	adds	r3, #8
    44f2:	015b      	lsls	r3, r3, #5
    44f4:	5c98      	ldrb	r0, [r3, r2]
    44f6:	0640      	lsls	r0, r0, #25
    44f8:	0f40      	lsrs	r0, r0, #29
    44fa:	e7f4      	b.n	44e6 <usb_device_endpoint_is_configured+0x16>

000044fc <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    44fc:	230f      	movs	r3, #15
    44fe:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4500:	b249      	sxtb	r1, r1
    4502:	2900      	cmp	r1, #0
    4504:	db0a      	blt.n	451c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4506:	3308      	adds	r3, #8
    4508:	015b      	lsls	r3, r3, #5
    450a:	6802      	ldr	r2, [r0, #0]
    450c:	18d2      	adds	r2, r2, r3
    450e:	2140      	movs	r1, #64	; 0x40
    4510:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4512:	6802      	ldr	r2, [r0, #0]
    4514:	18d3      	adds	r3, r2, r3
    4516:	2201      	movs	r2, #1
    4518:	71da      	strb	r2, [r3, #7]
	}
}
    451a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    451c:	3308      	adds	r3, #8
    451e:	015b      	lsls	r3, r3, #5
    4520:	6802      	ldr	r2, [r0, #0]
    4522:	18d2      	adds	r2, r2, r3
    4524:	2180      	movs	r1, #128	; 0x80
    4526:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4528:	6802      	ldr	r2, [r0, #0]
    452a:	18d3      	adds	r3, r2, r3
    452c:	2202      	movs	r2, #2
    452e:	71da      	strb	r2, [r3, #7]
    4530:	e7f3      	b.n	451a <usb_device_endpoint_abort_job+0x1e>

00004532 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4532:	230f      	movs	r3, #15
    4534:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4536:	b249      	sxtb	r1, r1
    4538:	2900      	cmp	r1, #0
    453a:	db07      	blt.n	454c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    453c:	6802      	ldr	r2, [r0, #0]
    453e:	3308      	adds	r3, #8
    4540:	015b      	lsls	r3, r3, #5
    4542:	18d3      	adds	r3, r2, r3
    4544:	7998      	ldrb	r0, [r3, #6]
    4546:	06c0      	lsls	r0, r0, #27
    4548:	0fc0      	lsrs	r0, r0, #31
	}
}
    454a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    454c:	6802      	ldr	r2, [r0, #0]
    454e:	3308      	adds	r3, #8
    4550:	015b      	lsls	r3, r3, #5
    4552:	18d3      	adds	r3, r2, r3
    4554:	7998      	ldrb	r0, [r3, #6]
    4556:	0680      	lsls	r0, r0, #26
    4558:	0fc0      	lsrs	r0, r0, #31
    455a:	e7f6      	b.n	454a <usb_device_endpoint_is_halted+0x18>

0000455c <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    455c:	230f      	movs	r3, #15
    455e:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4560:	b249      	sxtb	r1, r1
    4562:	2900      	cmp	r1, #0
    4564:	db06      	blt.n	4574 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4566:	6802      	ldr	r2, [r0, #0]
    4568:	3308      	adds	r3, #8
    456a:	015b      	lsls	r3, r3, #5
    456c:	18d3      	adds	r3, r2, r3
    456e:	2210      	movs	r2, #16
    4570:	715a      	strb	r2, [r3, #5]
	}
}
    4572:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4574:	6802      	ldr	r2, [r0, #0]
    4576:	3308      	adds	r3, #8
    4578:	015b      	lsls	r3, r3, #5
    457a:	18d3      	adds	r3, r2, r3
    457c:	2220      	movs	r2, #32
    457e:	715a      	strb	r2, [r3, #5]
    4580:	e7f7      	b.n	4572 <usb_device_endpoint_set_halt+0x16>

00004582 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4582:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4584:	230f      	movs	r3, #15
    4586:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4588:	b249      	sxtb	r1, r1
    458a:	2900      	cmp	r1, #0
    458c:	db1d      	blt.n	45ca <usb_device_endpoint_clear_halt+0x48>
    458e:	0159      	lsls	r1, r3, #5
    4590:	6802      	ldr	r2, [r0, #0]
    4592:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4594:	2483      	movs	r4, #131	; 0x83
    4596:	0064      	lsls	r4, r4, #1
    4598:	5d14      	ldrb	r4, [r2, r4]
    459a:	06e4      	lsls	r4, r4, #27
    459c:	d514      	bpl.n	45c8 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    459e:	2510      	movs	r5, #16
    45a0:	2482      	movs	r4, #130	; 0x82
    45a2:	0064      	lsls	r4, r4, #1
    45a4:	5515      	strb	r5, [r2, r4]
    45a6:	6802      	ldr	r2, [r0, #0]
    45a8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    45aa:	2108      	movs	r1, #8
    45ac:	31ff      	adds	r1, #255	; 0xff
    45ae:	5c51      	ldrb	r1, [r2, r1]
    45b0:	0689      	lsls	r1, r1, #26
    45b2:	d509      	bpl.n	45c8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    45b4:	3ce4      	subs	r4, #228	; 0xe4
    45b6:	2108      	movs	r1, #8
    45b8:	31ff      	adds	r1, #255	; 0xff
    45ba:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    45bc:	6802      	ldr	r2, [r0, #0]
    45be:	3308      	adds	r3, #8
    45c0:	015b      	lsls	r3, r3, #5
    45c2:	18d3      	adds	r3, r2, r3
    45c4:	2201      	movs	r2, #1
    45c6:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    45c8:	bd30      	pop	{r4, r5, pc}
    45ca:	0159      	lsls	r1, r3, #5
    45cc:	6802      	ldr	r2, [r0, #0]
    45ce:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    45d0:	2483      	movs	r4, #131	; 0x83
    45d2:	0064      	lsls	r4, r4, #1
    45d4:	5d14      	ldrb	r4, [r2, r4]
    45d6:	06a4      	lsls	r4, r4, #26
    45d8:	d5f6      	bpl.n	45c8 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    45da:	2520      	movs	r5, #32
    45dc:	2482      	movs	r4, #130	; 0x82
    45de:	0064      	lsls	r4, r4, #1
    45e0:	5515      	strb	r5, [r2, r4]
    45e2:	6802      	ldr	r2, [r0, #0]
    45e4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    45e6:	2108      	movs	r1, #8
    45e8:	31ff      	adds	r1, #255	; 0xff
    45ea:	5c51      	ldrb	r1, [r2, r1]
    45ec:	0649      	lsls	r1, r1, #25
    45ee:	d5eb      	bpl.n	45c8 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    45f0:	3cc4      	subs	r4, #196	; 0xc4
    45f2:	2108      	movs	r1, #8
    45f4:	31ff      	adds	r1, #255	; 0xff
    45f6:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    45f8:	6802      	ldr	r2, [r0, #0]
    45fa:	3308      	adds	r3, #8
    45fc:	015b      	lsls	r3, r3, #5
    45fe:	18d3      	adds	r3, r2, r3
    4600:	2202      	movs	r2, #2
    4602:	711a      	strb	r2, [r3, #4]
    4604:	e7e0      	b.n	45c8 <usb_device_endpoint_clear_halt+0x46>
	...

00004608 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4608:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    460a:	000c      	movs	r4, r1
    460c:	3408      	adds	r4, #8
    460e:	0164      	lsls	r4, r4, #5
    4610:	6805      	ldr	r5, [r0, #0]
    4612:	5d64      	ldrb	r4, [r4, r5]
    4614:	0664      	lsls	r4, r4, #25
    4616:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4618:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    461a:	2c00      	cmp	r4, #0
    461c:	d101      	bne.n	4622 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    461e:	0028      	movs	r0, r5
    4620:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4622:	014c      	lsls	r4, r1, #5
    4624:	4d0b      	ldr	r5, [pc, #44]	; (4654 <usb_device_endpoint_write_buffer_job+0x4c>)
    4626:	192d      	adds	r5, r5, r4
    4628:	002c      	movs	r4, r5
    462a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    462c:	696a      	ldr	r2, [r5, #20]
    462e:	4d0a      	ldr	r5, [pc, #40]	; (4658 <usb_device_endpoint_write_buffer_job+0x50>)
    4630:	402a      	ands	r2, r5
    4632:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4634:	6962      	ldr	r2, [r4, #20]
    4636:	049b      	lsls	r3, r3, #18
    4638:	0c9b      	lsrs	r3, r3, #18
    463a:	0b92      	lsrs	r2, r2, #14
    463c:	0392      	lsls	r2, r2, #14
    463e:	4313      	orrs	r3, r2
    4640:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4642:	6803      	ldr	r3, [r0, #0]
    4644:	3108      	adds	r1, #8
    4646:	0149      	lsls	r1, r1, #5
    4648:	1859      	adds	r1, r3, r1
    464a:	2380      	movs	r3, #128	; 0x80
    464c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    464e:	2500      	movs	r5, #0
    4650:	e7e5      	b.n	461e <usb_device_endpoint_write_buffer_job+0x16>
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	20000620 	.word	0x20000620
    4658:	f0003fff 	.word	0xf0003fff

0000465c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    465c:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    465e:	000c      	movs	r4, r1
    4660:	3408      	adds	r4, #8
    4662:	0164      	lsls	r4, r4, #5
    4664:	6805      	ldr	r5, [r0, #0]
    4666:	5d64      	ldrb	r4, [r4, r5]
    4668:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    466a:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    466c:	2c00      	cmp	r4, #0
    466e:	d101      	bne.n	4674 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4670:	0028      	movs	r0, r5
    4672:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4674:	4c0b      	ldr	r4, [pc, #44]	; (46a4 <usb_device_endpoint_read_buffer_job+0x48>)
    4676:	014d      	lsls	r5, r1, #5
    4678:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    467a:	1962      	adds	r2, r4, r5
    467c:	6854      	ldr	r4, [r2, #4]
    467e:	049b      	lsls	r3, r3, #18
    4680:	091b      	lsrs	r3, r3, #4
    4682:	4d09      	ldr	r5, [pc, #36]	; (46a8 <usb_device_endpoint_read_buffer_job+0x4c>)
    4684:	402c      	ands	r4, r5
    4686:	4323      	orrs	r3, r4
    4688:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    468a:	6853      	ldr	r3, [r2, #4]
    468c:	0b9b      	lsrs	r3, r3, #14
    468e:	039b      	lsls	r3, r3, #14
    4690:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4692:	6803      	ldr	r3, [r0, #0]
    4694:	3108      	adds	r1, #8
    4696:	0149      	lsls	r1, r1, #5
    4698:	1859      	adds	r1, r3, r1
    469a:	2340      	movs	r3, #64	; 0x40
    469c:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    469e:	2500      	movs	r5, #0
    46a0:	e7e6      	b.n	4670 <usb_device_endpoint_read_buffer_job+0x14>
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	20000620 	.word	0x20000620
    46a8:	f0003fff 	.word	0xf0003fff

000046ac <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    46ac:	4b09      	ldr	r3, [pc, #36]	; (46d4 <usb_device_endpoint_setup_buffer_job+0x28>)
    46ae:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    46b0:	685a      	ldr	r2, [r3, #4]
    46b2:	4909      	ldr	r1, [pc, #36]	; (46d8 <usb_device_endpoint_setup_buffer_job+0x2c>)
    46b4:	4011      	ands	r1, r2
    46b6:	2280      	movs	r2, #128	; 0x80
    46b8:	0292      	lsls	r2, r2, #10
    46ba:	430a      	orrs	r2, r1
    46bc:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    46be:	685a      	ldr	r2, [r3, #4]
    46c0:	0b92      	lsrs	r2, r2, #14
    46c2:	0392      	lsls	r2, r2, #14
    46c4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    46c6:	6802      	ldr	r2, [r0, #0]
    46c8:	2140      	movs	r1, #64	; 0x40
    46ca:	2382      	movs	r3, #130	; 0x82
    46cc:	005b      	lsls	r3, r3, #1
    46ce:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    46d0:	2000      	movs	r0, #0
    46d2:	4770      	bx	lr
    46d4:	20000620 	.word	0x20000620
    46d8:	f0003fff 	.word	0xf0003fff

000046dc <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    46dc:	6802      	ldr	r2, [r0, #0]
    46de:	7813      	ldrb	r3, [r2, #0]
    46e0:	2102      	movs	r1, #2
    46e2:	430b      	orrs	r3, r1
    46e4:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    46e6:	6802      	ldr	r2, [r0, #0]
    46e8:	7893      	ldrb	r3, [r2, #2]
    46ea:	2b02      	cmp	r3, #2
    46ec:	d0fc      	beq.n	46e8 <usb_enable+0xc>
}
    46ee:	4770      	bx	lr

000046f0 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    46f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46f2:	46de      	mov	lr, fp
    46f4:	4657      	mov	r7, sl
    46f6:	464e      	mov	r6, r9
    46f8:	4645      	mov	r5, r8
    46fa:	b5e0      	push	{r5, r6, r7, lr}
    46fc:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    46fe:	4bc2      	ldr	r3, [pc, #776]	; (4a08 <USB_Handler+0x318>)
    4700:	681f      	ldr	r7, [r3, #0]
    4702:	683d      	ldr	r5, [r7, #0]
    4704:	782b      	ldrb	r3, [r5, #0]
    4706:	09db      	lsrs	r3, r3, #7
    4708:	d114      	bne.n	4734 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    470a:	8c2e      	ldrh	r6, [r5, #32]
    470c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    470e:	2e00      	cmp	r6, #0
    4710:	d000      	beq.n	4714 <USB_Handler+0x24>
    4712:	e1a9      	b.n	4a68 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4714:	8bae      	ldrh	r6, [r5, #28]
    4716:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4718:	23ab      	movs	r3, #171	; 0xab
    471a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    471c:	5afb      	ldrh	r3, [r7, r3]
    471e:	22aa      	movs	r2, #170	; 0xaa
    4720:	0052      	lsls	r2, r2, #1
    4722:	5abd      	ldrh	r5, [r7, r2]
    4724:	401d      	ands	r5, r3
    4726:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4728:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    472a:	4fb8      	ldr	r7, [pc, #736]	; (4a0c <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    472c:	4bb6      	ldr	r3, [pc, #728]	; (4a08 <USB_Handler+0x318>)
    472e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4730:	4698      	mov	r8, r3
    4732:	e184      	b.n	4a3e <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4734:	8c2b      	ldrh	r3, [r5, #32]
    4736:	b29b      	uxth	r3, r3
    4738:	2b00      	cmp	r3, #0
    473a:	d100      	bne.n	473e <USB_Handler+0x4e>
    473c:	e0de      	b.n	48fc <USB_Handler+0x20c>
    473e:	8c28      	ldrh	r0, [r5, #32]
    4740:	b280      	uxth	r0, r0
    4742:	4bb3      	ldr	r3, [pc, #716]	; (4a10 <USB_Handler+0x320>)
    4744:	4798      	blx	r3
    4746:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    4748:	281f      	cmp	r0, #31
    474a:	d900      	bls.n	474e <USB_Handler+0x5e>
    474c:	e0d6      	b.n	48fc <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    474e:	0003      	movs	r3, r0
    4750:	3308      	adds	r3, #8
    4752:	015b      	lsls	r3, r3, #5
    4754:	18ed      	adds	r5, r5, r3
    4756:	79ed      	ldrb	r5, [r5, #7]
    4758:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    475a:	07ab      	lsls	r3, r5, #30
    475c:	d041      	beq.n	47e2 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    475e:	4aad      	ldr	r2, [pc, #692]	; (4a14 <USB_Handler+0x324>)
    4760:	2301      	movs	r3, #1
    4762:	4083      	lsls	r3, r0
    4764:	6811      	ldr	r1, [r2, #0]
    4766:	4399      	bics	r1, r3
    4768:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    476a:	0003      	movs	r3, r0
    476c:	3308      	adds	r3, #8
    476e:	015b      	lsls	r3, r3, #5
    4770:	683a      	ldr	r2, [r7, #0]
    4772:	4694      	mov	ip, r2
    4774:	4463      	add	r3, ip
    4776:	2203      	movs	r2, #3
    4778:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    477a:	183b      	adds	r3, r7, r0
    477c:	33ae      	adds	r3, #174	; 0xae
    477e:	781b      	ldrb	r3, [r3, #0]
    4780:	07db      	lsls	r3, r3, #31
    4782:	d52e      	bpl.n	47e2 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4784:	4ba4      	ldr	r3, [pc, #656]	; (4a18 <USB_Handler+0x328>)
    4786:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4788:	683a      	ldr	r2, [r7, #0]
    478a:	0003      	movs	r3, r0
    478c:	3308      	adds	r3, #8
    478e:	015b      	lsls	r3, r3, #5
    4790:	5c9b      	ldrb	r3, [r3, r2]
    4792:	079b      	lsls	r3, r3, #30
    4794:	0f9b      	lsrs	r3, r3, #30
    4796:	2b01      	cmp	r3, #1
    4798:	d100      	bne.n	479c <USB_Handler+0xac>
    479a:	e081      	b.n	48a0 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    479c:	0142      	lsls	r2, r0, #5
    479e:	4b9f      	ldr	r3, [pc, #636]	; (4a1c <USB_Handler+0x32c>)
    47a0:	189b      	adds	r3, r3, r2
    47a2:	685a      	ldr	r2, [r3, #4]
    47a4:	0112      	lsls	r2, r2, #4
    47a6:	0c92      	lsrs	r2, r2, #18
    47a8:	b290      	uxth	r0, r2
    47aa:	499b      	ldr	r1, [pc, #620]	; (4a18 <USB_Handler+0x328>)
    47ac:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    47ae:	685a      	ldr	r2, [r3, #4]
    47b0:	0492      	lsls	r2, r2, #18
    47b2:	0c92      	lsrs	r2, r2, #18
    47b4:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    47b6:	685a      	ldr	r2, [r3, #4]
    47b8:	4999      	ldr	r1, [pc, #612]	; (4a20 <USB_Handler+0x330>)
    47ba:	400a      	ands	r2, r1
    47bc:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    47be:	2800      	cmp	r0, #0
    47c0:	d107      	bne.n	47d2 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    47c2:	0162      	lsls	r2, r4, #5
    47c4:	4b95      	ldr	r3, [pc, #596]	; (4a1c <USB_Handler+0x32c>)
    47c6:	189b      	adds	r3, r3, r2
    47c8:	685b      	ldr	r3, [r3, #4]
    47ca:	049b      	lsls	r3, r3, #18
    47cc:	0c9b      	lsrs	r3, r3, #18
    47ce:	4a92      	ldr	r2, [pc, #584]	; (4a18 <USB_Handler+0x328>)
    47d0:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    47d2:	4b8d      	ldr	r3, [pc, #564]	; (4a08 <USB_Handler+0x318>)
    47d4:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    47d6:	1ca3      	adds	r3, r4, #2
    47d8:	011b      	lsls	r3, r3, #4
    47da:	18c3      	adds	r3, r0, r3
    47dc:	685b      	ldr	r3, [r3, #4]
    47de:	498e      	ldr	r1, [pc, #568]	; (4a18 <USB_Handler+0x328>)
    47e0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    47e2:	076b      	lsls	r3, r5, #29
    47e4:	d50e      	bpl.n	4804 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    47e6:	4a8b      	ldr	r2, [pc, #556]	; (4a14 <USB_Handler+0x324>)
    47e8:	2301      	movs	r3, #1
    47ea:	40a3      	lsls	r3, r4
    47ec:	6811      	ldr	r1, [r2, #0]
    47ee:	4399      	bics	r1, r3
    47f0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    47f2:	4b85      	ldr	r3, [pc, #532]	; (4a08 <USB_Handler+0x318>)
    47f4:	681b      	ldr	r3, [r3, #0]
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	0022      	movs	r2, r4
    47fa:	3208      	adds	r2, #8
    47fc:	0152      	lsls	r2, r2, #5
    47fe:	189b      	adds	r3, r3, r2
    4800:	2204      	movs	r2, #4
    4802:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4804:	072b      	lsls	r3, r5, #28
    4806:	d514      	bpl.n	4832 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4808:	4a82      	ldr	r2, [pc, #520]	; (4a14 <USB_Handler+0x324>)
    480a:	2301      	movs	r3, #1
    480c:	40a3      	lsls	r3, r4
    480e:	6811      	ldr	r1, [r2, #0]
    4810:	4399      	bics	r1, r3
    4812:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4814:	4b7c      	ldr	r3, [pc, #496]	; (4a08 <USB_Handler+0x318>)
    4816:	6818      	ldr	r0, [r3, #0]
    4818:	0023      	movs	r3, r4
    481a:	3308      	adds	r3, #8
    481c:	015b      	lsls	r3, r3, #5
    481e:	6802      	ldr	r2, [r0, #0]
    4820:	4694      	mov	ip, r2
    4822:	4463      	add	r3, ip
    4824:	2208      	movs	r2, #8
    4826:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4828:	1903      	adds	r3, r0, r4
    482a:	33ae      	adds	r3, #174	; 0xae
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	079b      	lsls	r3, r3, #30
    4830:	d447      	bmi.n	48c2 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4832:	06eb      	lsls	r3, r5, #27
    4834:	d514      	bpl.n	4860 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4836:	4a77      	ldr	r2, [pc, #476]	; (4a14 <USB_Handler+0x324>)
    4838:	2301      	movs	r3, #1
    483a:	40a3      	lsls	r3, r4
    483c:	6811      	ldr	r1, [r2, #0]
    483e:	4399      	bics	r1, r3
    4840:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4842:	4b71      	ldr	r3, [pc, #452]	; (4a08 <USB_Handler+0x318>)
    4844:	6818      	ldr	r0, [r3, #0]
    4846:	0023      	movs	r3, r4
    4848:	3308      	adds	r3, #8
    484a:	015b      	lsls	r3, r3, #5
    484c:	6802      	ldr	r2, [r0, #0]
    484e:	4694      	mov	ip, r2
    4850:	4463      	add	r3, ip
    4852:	2210      	movs	r2, #16
    4854:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4856:	1903      	adds	r3, r0, r4
    4858:	33ae      	adds	r3, #174	; 0xae
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	075b      	lsls	r3, r3, #29
    485e:	d43e      	bmi.n	48de <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4860:	06ab      	lsls	r3, r5, #26
    4862:	d400      	bmi.n	4866 <USB_Handler+0x176>
    4864:	e0b0      	b.n	49c8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4866:	4a6b      	ldr	r2, [pc, #428]	; (4a14 <USB_Handler+0x324>)
    4868:	2301      	movs	r3, #1
    486a:	40a3      	lsls	r3, r4
    486c:	6811      	ldr	r1, [r2, #0]
    486e:	4399      	bics	r1, r3
    4870:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4872:	4b65      	ldr	r3, [pc, #404]	; (4a08 <USB_Handler+0x318>)
    4874:	6818      	ldr	r0, [r3, #0]
    4876:	0023      	movs	r3, r4
    4878:	3308      	adds	r3, #8
    487a:	015b      	lsls	r3, r3, #5
    487c:	6802      	ldr	r2, [r0, #0]
    487e:	4694      	mov	ip, r2
    4880:	4463      	add	r3, ip
    4882:	2220      	movs	r2, #32
    4884:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4886:	1903      	adds	r3, r0, r4
    4888:	33ae      	adds	r3, #174	; 0xae
    488a:	781b      	ldrb	r3, [r3, #0]
    488c:	071b      	lsls	r3, r3, #28
    488e:	d400      	bmi.n	4892 <USB_Handler+0x1a2>
    4890:	e09a      	b.n	49c8 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    4892:	4961      	ldr	r1, [pc, #388]	; (4a18 <USB_Handler+0x328>)
    4894:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    4896:	0124      	lsls	r4, r4, #4
    4898:	1904      	adds	r4, r0, r4
    489a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    489c:	4798      	blx	r3
    489e:	e093      	b.n	49c8 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    48a0:	0142      	lsls	r2, r0, #5
    48a2:	4b5e      	ldr	r3, [pc, #376]	; (4a1c <USB_Handler+0x32c>)
    48a4:	189b      	adds	r3, r3, r2
    48a6:	685a      	ldr	r2, [r3, #4]
    48a8:	0492      	lsls	r2, r2, #18
    48aa:	0c92      	lsrs	r2, r2, #18
    48ac:	495a      	ldr	r1, [pc, #360]	; (4a18 <USB_Handler+0x328>)
    48ae:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    48b0:	685a      	ldr	r2, [r3, #4]
    48b2:	0112      	lsls	r2, r2, #4
    48b4:	0c92      	lsrs	r2, r2, #18
    48b6:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    48b8:	685a      	ldr	r2, [r3, #4]
    48ba:	0b92      	lsrs	r2, r2, #14
    48bc:	0392      	lsls	r2, r2, #14
    48be:	605a      	str	r2, [r3, #4]
    48c0:	e787      	b.n	47d2 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    48c2:	4955      	ldr	r1, [pc, #340]	; (4a18 <USB_Handler+0x328>)
    48c4:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    48c6:	0162      	lsls	r2, r4, #5
    48c8:	4b54      	ldr	r3, [pc, #336]	; (4a1c <USB_Handler+0x32c>)
    48ca:	189b      	adds	r3, r3, r2
    48cc:	89db      	ldrh	r3, [r3, #14]
    48ce:	221f      	movs	r2, #31
    48d0:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    48d2:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    48d4:	0123      	lsls	r3, r4, #4
    48d6:	18c3      	adds	r3, r0, r3
    48d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48da:	4798      	blx	r3
    48dc:	e7a9      	b.n	4832 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    48de:	494e      	ldr	r1, [pc, #312]	; (4a18 <USB_Handler+0x328>)
    48e0:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    48e2:	0162      	lsls	r2, r4, #5
    48e4:	4b4d      	ldr	r3, [pc, #308]	; (4a1c <USB_Handler+0x32c>)
    48e6:	189b      	adds	r3, r3, r2
    48e8:	685b      	ldr	r3, [r3, #4]
    48ea:	011b      	lsls	r3, r3, #4
    48ec:	0c9b      	lsrs	r3, r3, #18
    48ee:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    48f0:	0123      	lsls	r3, r4, #4
    48f2:	18c3      	adds	r3, r0, r3
    48f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48f6:	2100      	movs	r1, #0
    48f8:	4798      	blx	r3
    48fa:	e7b1      	b.n	4860 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    48fc:	8bac      	ldrh	r4, [r5, #28]
    48fe:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    4900:	0763      	lsls	r3, r4, #29
    4902:	d505      	bpl.n	4910 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4904:	2304      	movs	r3, #4
    4906:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4908:	33a1      	adds	r3, #161	; 0xa1
    490a:	5cfb      	ldrb	r3, [r7, r3]
    490c:	07db      	lsls	r3, r3, #31
    490e:	d462      	bmi.n	49d6 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    4910:	0723      	lsls	r3, r4, #28
    4912:	d50b      	bpl.n	492c <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4914:	2200      	movs	r2, #0
    4916:	4b3f      	ldr	r3, [pc, #252]	; (4a14 <USB_Handler+0x324>)
    4918:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    491a:	4b3b      	ldr	r3, [pc, #236]	; (4a08 <USB_Handler+0x318>)
    491c:	6818      	ldr	r0, [r3, #0]
    491e:	2308      	movs	r3, #8
    4920:	6802      	ldr	r2, [r0, #0]
    4922:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    4924:	339d      	adds	r3, #157	; 0x9d
    4926:	5cc3      	ldrb	r3, [r0, r3]
    4928:	079b      	lsls	r3, r3, #30
    492a:	d458      	bmi.n	49de <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    492c:	0663      	lsls	r3, r4, #25
    492e:	d508      	bpl.n	4942 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    4930:	4b35      	ldr	r3, [pc, #212]	; (4a08 <USB_Handler+0x318>)
    4932:	6818      	ldr	r0, [r3, #0]
    4934:	2340      	movs	r3, #64	; 0x40
    4936:	6802      	ldr	r2, [r0, #0]
    4938:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    493a:	3365      	adds	r3, #101	; 0x65
    493c:	5cc3      	ldrb	r3, [r0, r3]
    493e:	06db      	lsls	r3, r3, #27
    4940:	d450      	bmi.n	49e4 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    4942:	06a3      	lsls	r3, r4, #26
    4944:	d508      	bpl.n	4958 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    4946:	4b30      	ldr	r3, [pc, #192]	; (4a08 <USB_Handler+0x318>)
    4948:	6818      	ldr	r0, [r3, #0]
    494a:	2320      	movs	r3, #32
    494c:	6802      	ldr	r2, [r0, #0]
    494e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    4950:	3385      	adds	r3, #133	; 0x85
    4952:	5cc3      	ldrb	r3, [r0, r3]
    4954:	071b      	lsls	r3, r3, #28
    4956:	d448      	bmi.n	49ea <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    4958:	06e3      	lsls	r3, r4, #27
    495a:	d508      	bpl.n	496e <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    495c:	4b2a      	ldr	r3, [pc, #168]	; (4a08 <USB_Handler+0x318>)
    495e:	6818      	ldr	r0, [r3, #0]
    4960:	2310      	movs	r3, #16
    4962:	6802      	ldr	r2, [r0, #0]
    4964:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    4966:	3395      	adds	r3, #149	; 0x95
    4968:	5cc3      	ldrb	r3, [r0, r3]
    496a:	075b      	lsls	r3, r3, #29
    496c:	d440      	bmi.n	49f0 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    496e:	0623      	lsls	r3, r4, #24
    4970:	d50b      	bpl.n	498a <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    4972:	2200      	movs	r2, #0
    4974:	4b27      	ldr	r3, [pc, #156]	; (4a14 <USB_Handler+0x324>)
    4976:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    4978:	4b23      	ldr	r3, [pc, #140]	; (4a08 <USB_Handler+0x318>)
    497a:	6818      	ldr	r0, [r3, #0]
    497c:	2380      	movs	r3, #128	; 0x80
    497e:	6802      	ldr	r2, [r0, #0]
    4980:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    4982:	3325      	adds	r3, #37	; 0x25
    4984:	5cc3      	ldrb	r3, [r0, r3]
    4986:	069b      	lsls	r3, r3, #26
    4988:	d435      	bmi.n	49f6 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    498a:	05e3      	lsls	r3, r4, #23
    498c:	d50c      	bpl.n	49a8 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    498e:	2200      	movs	r2, #0
    4990:	4b20      	ldr	r3, [pc, #128]	; (4a14 <USB_Handler+0x324>)
    4992:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4994:	4b1c      	ldr	r3, [pc, #112]	; (4a08 <USB_Handler+0x318>)
    4996:	6818      	ldr	r0, [r3, #0]
    4998:	2380      	movs	r3, #128	; 0x80
    499a:	005b      	lsls	r3, r3, #1
    499c:	6802      	ldr	r2, [r0, #0]
    499e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    49a0:	3b5b      	subs	r3, #91	; 0x5b
    49a2:	5cc3      	ldrb	r3, [r0, r3]
    49a4:	065b      	lsls	r3, r3, #25
    49a6:	d429      	bmi.n	49fc <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    49a8:	05a3      	lsls	r3, r4, #22
    49aa:	d50d      	bpl.n	49c8 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    49ac:	2200      	movs	r2, #0
    49ae:	4b19      	ldr	r3, [pc, #100]	; (4a14 <USB_Handler+0x324>)
    49b0:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    49b2:	4b15      	ldr	r3, [pc, #84]	; (4a08 <USB_Handler+0x318>)
    49b4:	6818      	ldr	r0, [r3, #0]
    49b6:	2380      	movs	r3, #128	; 0x80
    49b8:	009b      	lsls	r3, r3, #2
    49ba:	6802      	ldr	r2, [r0, #0]
    49bc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    49be:	3b5c      	subs	r3, #92	; 0x5c
    49c0:	3bff      	subs	r3, #255	; 0xff
    49c2:	5cc3      	ldrb	r3, [r0, r3]
    49c4:	2b7f      	cmp	r3, #127	; 0x7f
    49c6:	d81c      	bhi.n	4a02 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    49c8:	b003      	add	sp, #12
    49ca:	bc3c      	pop	{r2, r3, r4, r5}
    49cc:	4690      	mov	r8, r2
    49ce:	4699      	mov	r9, r3
    49d0:	46a2      	mov	sl, r4
    49d2:	46ab      	mov	fp, r5
    49d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    49d6:	687b      	ldr	r3, [r7, #4]
    49d8:	0038      	movs	r0, r7
    49da:	4798      	blx	r3
    49dc:	e798      	b.n	4910 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    49de:	6883      	ldr	r3, [r0, #8]
    49e0:	4798      	blx	r3
    49e2:	e7a3      	b.n	492c <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    49e4:	6943      	ldr	r3, [r0, #20]
    49e6:	4798      	blx	r3
    49e8:	e7ab      	b.n	4942 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    49ea:	6903      	ldr	r3, [r0, #16]
    49ec:	4798      	blx	r3
    49ee:	e7b3      	b.n	4958 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    49f0:	68c3      	ldr	r3, [r0, #12]
    49f2:	4798      	blx	r3
    49f4:	e7bb      	b.n	496e <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    49f6:	6983      	ldr	r3, [r0, #24]
    49f8:	4798      	blx	r3
    49fa:	e7c6      	b.n	498a <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    49fc:	69c3      	ldr	r3, [r0, #28]
    49fe:	4798      	blx	r3
    4a00:	e7d2      	b.n	49a8 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    4a02:	6a03      	ldr	r3, [r0, #32]
    4a04:	4798      	blx	r3
    4a06:	e7df      	b.n	49c8 <USB_Handler+0x2d8>
    4a08:	2000028c 	.word	0x2000028c
    4a0c:	00007ae0 	.word	0x00007ae0
    4a10:	00006d85 	.word	0x00006d85
    4a14:	2000029c 	.word	0x2000029c
    4a18:	200002a0 	.word	0x200002a0
    4a1c:	20000620 	.word	0x20000620
    4a20:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4a24:	0023      	movs	r3, r4
    4a26:	332e      	adds	r3, #46	; 0x2e
    4a28:	009b      	lsls	r3, r3, #2
    4a2a:	4642      	mov	r2, r8
    4a2c:	6812      	ldr	r2, [r2, #0]
    4a2e:	589b      	ldr	r3, [r3, r2]
    4a30:	499e      	ldr	r1, [pc, #632]	; (4cac <USB_Handler+0x5bc>)
    4a32:	4642      	mov	r2, r8
    4a34:	6810      	ldr	r0, [r2, #0]
    4a36:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4a38:	3401      	adds	r4, #1
    4a3a:	2c07      	cmp	r4, #7
    4a3c:	d0c4      	beq.n	49c8 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    4a3e:	0063      	lsls	r3, r4, #1
    4a40:	5bdb      	ldrh	r3, [r3, r7]
    4a42:	4233      	tst	r3, r6
    4a44:	d003      	beq.n	4a4e <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4a46:	464a      	mov	r2, r9
    4a48:	6812      	ldr	r2, [r2, #0]
    4a4a:	6812      	ldr	r2, [r2, #0]
    4a4c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    4a4e:	422b      	tst	r3, r5
    4a50:	d0f2      	beq.n	4a38 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4a52:	2c06      	cmp	r4, #6
    4a54:	d1e6      	bne.n	4a24 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4a56:	4b96      	ldr	r3, [pc, #600]	; (4cb0 <USB_Handler+0x5c0>)
    4a58:	891b      	ldrh	r3, [r3, #8]
    4a5a:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4a5c:	2280      	movs	r2, #128	; 0x80
    4a5e:	0052      	lsls	r2, r2, #1
    4a60:	4013      	ands	r3, r2
    4a62:	4a92      	ldr	r2, [pc, #584]	; (4cac <USB_Handler+0x5bc>)
    4a64:	6013      	str	r3, [r2, #0]
    4a66:	e7dd      	b.n	4a24 <USB_Handler+0x334>
    4a68:	003c      	movs	r4, r7
    4a6a:	3459      	adds	r4, #89	; 0x59
    4a6c:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    4a6e:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    4a70:	2201      	movs	r2, #1
    4a72:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4a74:	325f      	adds	r2, #95	; 0x5f
    4a76:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4a78:	3a50      	subs	r2, #80	; 0x50
    4a7a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4a7c:	3a0d      	subs	r2, #13
    4a7e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4a80:	46b8      	mov	r8, r7
    4a82:	002f      	movs	r7, r5
    4a84:	e0b9      	b.n	4bfa <USB_Handler+0x50a>
    4a86:	002a      	movs	r2, r5
    4a88:	003d      	movs	r5, r7
    4a8a:	4647      	mov	r7, r8
    4a8c:	4690      	mov	r8, r2
    4a8e:	015b      	lsls	r3, r3, #5
    4a90:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4a92:	2308      	movs	r3, #8
    4a94:	33ff      	adds	r3, #255	; 0xff
    4a96:	5ceb      	ldrb	r3, [r5, r3]
    4a98:	065b      	lsls	r3, r3, #25
    4a9a:	d516      	bpl.n	4aca <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4a9c:	2240      	movs	r2, #64	; 0x40
    4a9e:	2308      	movs	r3, #8
    4aa0:	33ff      	adds	r3, #255	; 0xff
    4aa2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4aa4:	3b88      	subs	r3, #136	; 0x88
    4aa6:	3bff      	subs	r3, #255	; 0xff
    4aa8:	4642      	mov	r2, r8
    4aaa:	4313      	orrs	r3, r2
    4aac:	4a81      	ldr	r2, [pc, #516]	; (4cb4 <USB_Handler+0x5c4>)
    4aae:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4ab0:	2360      	movs	r3, #96	; 0x60
    4ab2:	420b      	tst	r3, r1
    4ab4:	d100      	bne.n	4ab8 <USB_Handler+0x3c8>
    4ab6:	e787      	b.n	49c8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4ab8:	9b01      	ldr	r3, [sp, #4]
    4aba:	011b      	lsls	r3, r3, #4
    4abc:	18fb      	adds	r3, r7, r3
    4abe:	33e0      	adds	r3, #224	; 0xe0
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	497c      	ldr	r1, [pc, #496]	; (4cb4 <USB_Handler+0x5c4>)
    4ac4:	0038      	movs	r0, r7
    4ac6:	4798      	blx	r3
    4ac8:	e77e      	b.n	49c8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4aca:	2308      	movs	r3, #8
    4acc:	33ff      	adds	r3, #255	; 0xff
    4ace:	5ceb      	ldrb	r3, [r5, r3]
    4ad0:	069b      	lsls	r3, r3, #26
    4ad2:	d5ed      	bpl.n	4ab0 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4ad4:	2220      	movs	r2, #32
    4ad6:	2308      	movs	r3, #8
    4ad8:	33ff      	adds	r3, #255	; 0xff
    4ada:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4adc:	4b75      	ldr	r3, [pc, #468]	; (4cb4 <USB_Handler+0x5c4>)
    4ade:	4642      	mov	r2, r8
    4ae0:	719a      	strb	r2, [r3, #6]
    4ae2:	e7e5      	b.n	4ab0 <USB_Handler+0x3c0>
    4ae4:	003d      	movs	r5, r7
    4ae6:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4ae8:	9a01      	ldr	r2, [sp, #4]
    4aea:	0013      	movs	r3, r2
    4aec:	3308      	adds	r3, #8
    4aee:	015b      	lsls	r3, r3, #5
    4af0:	18ed      	adds	r5, r5, r3
    4af2:	2310      	movs	r3, #16
    4af4:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4af6:	18bb      	adds	r3, r7, r2
    4af8:	3361      	adds	r3, #97	; 0x61
    4afa:	33ff      	adds	r3, #255	; 0xff
    4afc:	781b      	ldrb	r3, [r3, #0]
    4afe:	06db      	lsls	r3, r3, #27
    4b00:	d400      	bmi.n	4b04 <USB_Handler+0x414>
    4b02:	e761      	b.n	49c8 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4b04:	0010      	movs	r0, r2
    4b06:	0152      	lsls	r2, r2, #5
    4b08:	4b69      	ldr	r3, [pc, #420]	; (4cb0 <USB_Handler+0x5c0>)
    4b0a:	189b      	adds	r3, r3, r2
    4b0c:	685b      	ldr	r3, [r3, #4]
    4b0e:	049b      	lsls	r3, r3, #18
    4b10:	0c9b      	lsrs	r3, r3, #18
    4b12:	4968      	ldr	r1, [pc, #416]	; (4cb4 <USB_Handler+0x5c4>)
    4b14:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4b16:	0103      	lsls	r3, r0, #4
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	33dc      	adds	r3, #220	; 0xdc
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	4640      	mov	r0, r8
    4b20:	4798      	blx	r3
    4b22:	e751      	b.n	49c8 <USB_Handler+0x2d8>
    4b24:	002a      	movs	r2, r5
    4b26:	003d      	movs	r5, r7
    4b28:	4647      	mov	r7, r8
    4b2a:	4690      	mov	r8, r2
    4b2c:	015b      	lsls	r3, r3, #5
    4b2e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4b30:	2308      	movs	r3, #8
    4b32:	33ff      	adds	r3, #255	; 0xff
    4b34:	5ceb      	ldrb	r3, [r5, r3]
    4b36:	079b      	lsls	r3, r3, #30
    4b38:	d51e      	bpl.n	4b78 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4b3a:	2202      	movs	r2, #2
    4b3c:	2308      	movs	r3, #8
    4b3e:	33ff      	adds	r3, #255	; 0xff
    4b40:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4b42:	485c      	ldr	r0, [pc, #368]	; (4cb4 <USB_Handler+0x5c4>)
    4b44:	3b88      	subs	r3, #136	; 0x88
    4b46:	3bff      	subs	r3, #255	; 0xff
    4b48:	4642      	mov	r2, r8
    4b4a:	4313      	orrs	r3, r2
    4b4c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4b4e:	9b01      	ldr	r3, [sp, #4]
    4b50:	015a      	lsls	r2, r3, #5
    4b52:	4b57      	ldr	r3, [pc, #348]	; (4cb0 <USB_Handler+0x5c0>)
    4b54:	189b      	adds	r3, r3, r2
    4b56:	3310      	adds	r3, #16
    4b58:	685b      	ldr	r3, [r3, #4]
    4b5a:	049b      	lsls	r3, r3, #18
    4b5c:	0c9b      	lsrs	r3, r3, #18
    4b5e:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4b60:	078b      	lsls	r3, r1, #30
    4b62:	d100      	bne.n	4b66 <USB_Handler+0x476>
    4b64:	e730      	b.n	49c8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4b66:	9b01      	ldr	r3, [sp, #4]
    4b68:	330d      	adds	r3, #13
    4b6a:	011b      	lsls	r3, r3, #4
    4b6c:	18fb      	adds	r3, r7, r3
    4b6e:	685b      	ldr	r3, [r3, #4]
    4b70:	4950      	ldr	r1, [pc, #320]	; (4cb4 <USB_Handler+0x5c4>)
    4b72:	0038      	movs	r0, r7
    4b74:	4798      	blx	r3
    4b76:	e727      	b.n	49c8 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4b78:	2308      	movs	r3, #8
    4b7a:	33ff      	adds	r3, #255	; 0xff
    4b7c:	5ceb      	ldrb	r3, [r5, r3]
    4b7e:	07db      	lsls	r3, r3, #31
    4b80:	d5ee      	bpl.n	4b60 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4b82:	2201      	movs	r2, #1
    4b84:	2308      	movs	r3, #8
    4b86:	33ff      	adds	r3, #255	; 0xff
    4b88:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4b8a:	484a      	ldr	r0, [pc, #296]	; (4cb4 <USB_Handler+0x5c4>)
    4b8c:	4643      	mov	r3, r8
    4b8e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4b90:	9b01      	ldr	r3, [sp, #4]
    4b92:	015b      	lsls	r3, r3, #5
    4b94:	4a46      	ldr	r2, [pc, #280]	; (4cb0 <USB_Handler+0x5c0>)
    4b96:	18d2      	adds	r2, r2, r3
    4b98:	6853      	ldr	r3, [r2, #4]
    4b9a:	049b      	lsls	r3, r3, #18
    4b9c:	0c9b      	lsrs	r3, r3, #18
    4b9e:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4ba0:	6853      	ldr	r3, [r2, #4]
    4ba2:	011b      	lsls	r3, r3, #4
    4ba4:	0c9b      	lsrs	r3, r3, #18
    4ba6:	8083      	strh	r3, [r0, #4]
    4ba8:	e7da      	b.n	4b60 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4baa:	2208      	movs	r2, #8
    4bac:	32ff      	adds	r2, #255	; 0xff
    4bae:	5c9a      	ldrb	r2, [r3, r2]
    4bb0:	0752      	lsls	r2, r2, #29
    4bb2:	d56e      	bpl.n	4c92 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4bb4:	2004      	movs	r0, #4
    4bb6:	2208      	movs	r2, #8
    4bb8:	32ff      	adds	r2, #255	; 0xff
    4bba:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4bbc:	9801      	ldr	r0, [sp, #4]
    4bbe:	0142      	lsls	r2, r0, #5
    4bc0:	4b3b      	ldr	r3, [pc, #236]	; (4cb0 <USB_Handler+0x5c0>)
    4bc2:	189b      	adds	r3, r3, r2
    4bc4:	7a9b      	ldrb	r3, [r3, #10]
    4bc6:	079b      	lsls	r3, r3, #30
    4bc8:	d505      	bpl.n	4bd6 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4bca:	4b39      	ldr	r3, [pc, #228]	; (4cb0 <USB_Handler+0x5c0>)
    4bcc:	189b      	adds	r3, r3, r2
    4bce:	7a9a      	ldrb	r2, [r3, #10]
    4bd0:	2002      	movs	r0, #2
    4bd2:	4382      	bics	r2, r0
    4bd4:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4bd6:	4b37      	ldr	r3, [pc, #220]	; (4cb4 <USB_Handler+0x5c4>)
    4bd8:	4642      	mov	r2, r8
    4bda:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4bdc:	9b01      	ldr	r3, [sp, #4]
    4bde:	3308      	adds	r3, #8
    4be0:	015b      	lsls	r3, r3, #5
    4be2:	683a      	ldr	r2, [r7, #0]
    4be4:	4694      	mov	ip, r2
    4be6:	4463      	add	r3, ip
    4be8:	79db      	ldrb	r3, [r3, #7]
    4bea:	07db      	lsls	r3, r3, #31
    4bec:	d551      	bpl.n	4c92 <USB_Handler+0x5a2>
    4bee:	e6eb      	b.n	49c8 <USB_Handler+0x2d8>
    4bf0:	3301      	adds	r3, #1
    4bf2:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4bf4:	2b08      	cmp	r3, #8
    4bf6:	d100      	bne.n	4bfa <USB_Handler+0x50a>
    4bf8:	e6e6      	b.n	49c8 <USB_Handler+0x2d8>
    4bfa:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4bfc:	9301      	str	r3, [sp, #4]
    4bfe:	0032      	movs	r2, r6
    4c00:	411a      	asrs	r2, r3
    4c02:	4661      	mov	r1, ip
    4c04:	4211      	tst	r1, r2
    4c06:	d0f3      	beq.n	4bf0 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4c08:	001a      	movs	r2, r3
    4c0a:	3208      	adds	r2, #8
    4c0c:	0152      	lsls	r2, r2, #5
    4c0e:	18ba      	adds	r2, r7, r2
    4c10:	79d2      	ldrb	r2, [r2, #7]
    4c12:	b2d2      	uxtb	r2, r2
    4c14:	7a21      	ldrb	r1, [r4, #8]
    4c16:	4011      	ands	r1, r2
    4c18:	7820      	ldrb	r0, [r4, #0]
    4c1a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4c1c:	4648      	mov	r0, r9
    4c1e:	4210      	tst	r0, r2
    4c20:	d000      	beq.n	4c24 <USB_Handler+0x534>
    4c22:	e730      	b.n	4a86 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4c24:	4650      	mov	r0, sl
    4c26:	4210      	tst	r0, r2
    4c28:	d000      	beq.n	4c2c <USB_Handler+0x53c>
    4c2a:	e75b      	b.n	4ae4 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4c2c:	4658      	mov	r0, fp
    4c2e:	4210      	tst	r0, r2
    4c30:	d000      	beq.n	4c34 <USB_Handler+0x544>
    4c32:	e777      	b.n	4b24 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4c34:	200c      	movs	r0, #12
    4c36:	4210      	tst	r0, r2
    4c38:	d0da      	beq.n	4bf0 <USB_Handler+0x500>
    4c3a:	002a      	movs	r2, r5
    4c3c:	003d      	movs	r5, r7
    4c3e:	4647      	mov	r7, r8
    4c40:	4690      	mov	r8, r2
    4c42:	015b      	lsls	r3, r3, #5
    4c44:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4c46:	2208      	movs	r2, #8
    4c48:	32ff      	adds	r2, #255	; 0xff
    4c4a:	5c9a      	ldrb	r2, [r3, r2]
    4c4c:	0712      	lsls	r2, r2, #28
    4c4e:	d5ac      	bpl.n	4baa <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4c50:	3804      	subs	r0, #4
    4c52:	2208      	movs	r2, #8
    4c54:	32ff      	adds	r2, #255	; 0xff
    4c56:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4c58:	9801      	ldr	r0, [sp, #4]
    4c5a:	0142      	lsls	r2, r0, #5
    4c5c:	4b14      	ldr	r3, [pc, #80]	; (4cb0 <USB_Handler+0x5c0>)
    4c5e:	189b      	adds	r3, r3, r2
    4c60:	7e9b      	ldrb	r3, [r3, #26]
    4c62:	079b      	lsls	r3, r3, #30
    4c64:	d505      	bpl.n	4c72 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4c66:	4b12      	ldr	r3, [pc, #72]	; (4cb0 <USB_Handler+0x5c0>)
    4c68:	189b      	adds	r3, r3, r2
    4c6a:	7e9a      	ldrb	r2, [r3, #26]
    4c6c:	2002      	movs	r0, #2
    4c6e:	4382      	bics	r2, r0
    4c70:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4c72:	2380      	movs	r3, #128	; 0x80
    4c74:	425b      	negs	r3, r3
    4c76:	4642      	mov	r2, r8
    4c78:	4313      	orrs	r3, r2
    4c7a:	4a0e      	ldr	r2, [pc, #56]	; (4cb4 <USB_Handler+0x5c4>)
    4c7c:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4c7e:	9b01      	ldr	r3, [sp, #4]
    4c80:	3308      	adds	r3, #8
    4c82:	015b      	lsls	r3, r3, #5
    4c84:	683a      	ldr	r2, [r7, #0]
    4c86:	4694      	mov	ip, r2
    4c88:	4463      	add	r3, ip
    4c8a:	79db      	ldrb	r3, [r3, #7]
    4c8c:	079b      	lsls	r3, r3, #30
    4c8e:	d500      	bpl.n	4c92 <USB_Handler+0x5a2>
    4c90:	e69a      	b.n	49c8 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4c92:	230c      	movs	r3, #12
    4c94:	420b      	tst	r3, r1
    4c96:	d100      	bne.n	4c9a <USB_Handler+0x5aa>
    4c98:	e696      	b.n	49c8 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4c9a:	9b01      	ldr	r3, [sp, #4]
    4c9c:	011b      	lsls	r3, r3, #4
    4c9e:	18fb      	adds	r3, r7, r3
    4ca0:	33d8      	adds	r3, #216	; 0xd8
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	4903      	ldr	r1, [pc, #12]	; (4cb4 <USB_Handler+0x5c4>)
    4ca6:	0038      	movs	r0, r7
    4ca8:	4798      	blx	r3
    4caa:	e68d      	b.n	49c8 <USB_Handler+0x2d8>
    4cac:	20000290 	.word	0x20000290
    4cb0:	20000620 	.word	0x20000620
    4cb4:	20000294 	.word	0x20000294

00004cb8 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4cb8:	2200      	movs	r2, #0
    4cba:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    4cbc:	2301      	movs	r3, #1
    4cbe:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4cc0:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4cc2:	70c3      	strb	r3, [r0, #3]
}
    4cc4:	4770      	bx	lr
	...

00004cc8 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cca:	46ce      	mov	lr, r9
    4ccc:	4647      	mov	r7, r8
    4cce:	b580      	push	{r7, lr}
    4cd0:	b083      	sub	sp, #12
    4cd2:	0004      	movs	r4, r0
    4cd4:	000d      	movs	r5, r1
    4cd6:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4cd8:	2300      	movs	r3, #0
    4cda:	4a6e      	ldr	r2, [pc, #440]	; (4e94 <usb_init+0x1cc>)
    4cdc:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    4cde:	4a6e      	ldr	r2, [pc, #440]	; (4e98 <usb_init+0x1d0>)
    4ce0:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4ce2:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    4ce4:	496d      	ldr	r1, [pc, #436]	; (4e9c <usb_init+0x1d4>)
    4ce6:	69ca      	ldr	r2, [r1, #28]
    4ce8:	2020      	movs	r0, #32
    4cea:	4302      	orrs	r2, r0
    4cec:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4cee:	af01      	add	r7, sp, #4
    4cf0:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4cf2:	2201      	movs	r2, #1
    4cf4:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    4cf6:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4cf8:	3306      	adds	r3, #6
    4cfa:	4699      	mov	r9, r3
    4cfc:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4cfe:	0039      	movs	r1, r7
    4d00:	3808      	subs	r0, #8
    4d02:	4b67      	ldr	r3, [pc, #412]	; (4ea0 <usb_init+0x1d8>)
    4d04:	4698      	mov	r8, r3
    4d06:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4d08:	464b      	mov	r3, r9
    4d0a:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4d0c:	0039      	movs	r1, r7
    4d0e:	2019      	movs	r0, #25
    4d10:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    4d12:	78b3      	ldrb	r3, [r6, #2]
    4d14:	466a      	mov	r2, sp
    4d16:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4d18:	4669      	mov	r1, sp
    4d1a:	2006      	movs	r0, #6
    4d1c:	4b61      	ldr	r3, [pc, #388]	; (4ea4 <usb_init+0x1dc>)
    4d1e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4d20:	2006      	movs	r0, #6
    4d22:	4b61      	ldr	r3, [pc, #388]	; (4ea8 <usb_init+0x1e0>)
    4d24:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4d26:	782b      	ldrb	r3, [r5, #0]
    4d28:	2201      	movs	r2, #1
    4d2a:	4313      	orrs	r3, r2
    4d2c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4d2e:	78ab      	ldrb	r3, [r5, #2]
    4d30:	07db      	lsls	r3, r3, #31
    4d32:	d4fc      	bmi.n	4d2e <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4d34:	4a5d      	ldr	r2, [pc, #372]	; (4eac <usb_init+0x1e4>)
    4d36:	78d3      	ldrb	r3, [r2, #3]
    4d38:	2103      	movs	r1, #3
    4d3a:	438b      	bics	r3, r1
    4d3c:	2102      	movs	r1, #2
    4d3e:	430b      	orrs	r3, r1
    4d40:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4d42:	78d3      	ldrb	r3, [r2, #3]
    4d44:	210c      	movs	r1, #12
    4d46:	438b      	bics	r3, r1
    4d48:	2108      	movs	r1, #8
    4d4a:	430b      	orrs	r3, r1
    4d4c:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4d4e:	4b58      	ldr	r3, [pc, #352]	; (4eb0 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4d50:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4d52:	039b      	lsls	r3, r3, #14
    4d54:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4d56:	2b1f      	cmp	r3, #31
    4d58:	d100      	bne.n	4d5c <usb_init+0x94>
    4d5a:	e08f      	b.n	4e7c <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4d5c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4d5e:	019b      	lsls	r3, r3, #6
    4d60:	4954      	ldr	r1, [pc, #336]	; (4eb4 <usb_init+0x1ec>)
    4d62:	400a      	ands	r2, r1
    4d64:	4313      	orrs	r3, r2
    4d66:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4d68:	4b51      	ldr	r3, [pc, #324]	; (4eb0 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4d6e:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4d70:	2b1f      	cmp	r3, #31
    4d72:	d100      	bne.n	4d76 <usb_init+0xae>
    4d74:	e084      	b.n	4e80 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4d76:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4d78:	211f      	movs	r1, #31
    4d7a:	438a      	bics	r2, r1
    4d7c:	4313      	orrs	r3, r2
    4d7e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4d80:	4b4b      	ldr	r3, [pc, #300]	; (4eb0 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4d82:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4d84:	019b      	lsls	r3, r3, #6
    4d86:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4d88:	2b07      	cmp	r3, #7
    4d8a:	d100      	bne.n	4d8e <usb_init+0xc6>
    4d8c:	e07a      	b.n	4e84 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4d8e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    4d90:	031b      	lsls	r3, r3, #12
    4d92:	4949      	ldr	r1, [pc, #292]	; (4eb8 <usb_init+0x1f0>)
    4d94:	400a      	ands	r2, r1
    4d96:	4313      	orrs	r3, r2
    4d98:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4d9a:	7832      	ldrb	r2, [r6, #0]
    4d9c:	7829      	ldrb	r1, [r5, #0]
    4d9e:	01d2      	lsls	r2, r2, #7
    4da0:	237f      	movs	r3, #127	; 0x7f
    4da2:	400b      	ands	r3, r1
    4da4:	4313      	orrs	r3, r2
    4da6:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    4da8:	7871      	ldrb	r1, [r6, #1]
    4daa:	782b      	ldrb	r3, [r5, #0]
    4dac:	2201      	movs	r2, #1
    4dae:	400a      	ands	r2, r1
    4db0:	0092      	lsls	r2, r2, #2
    4db2:	2104      	movs	r1, #4
    4db4:	438b      	bics	r3, r1
    4db6:	4313      	orrs	r3, r2
    4db8:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    4dba:	4b40      	ldr	r3, [pc, #256]	; (4ebc <usb_init+0x1f4>)
    4dbc:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    4dbe:	78f3      	ldrb	r3, [r6, #3]
    4dc0:	2b01      	cmp	r3, #1
    4dc2:	d061      	beq.n	4e88 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d106      	bne.n	4dd6 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    4dc8:	6822      	ldr	r2, [r4, #0]
    4dca:	8913      	ldrh	r3, [r2, #8]
    4dcc:	210c      	movs	r1, #12
    4dce:	438b      	bics	r3, r1
    4dd0:	2104      	movs	r1, #4
    4dd2:	430b      	orrs	r3, r1
    4dd4:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    4dd6:	2280      	movs	r2, #128	; 0x80
    4dd8:	0052      	lsls	r2, r2, #1
    4dda:	2100      	movs	r1, #0
    4ddc:	4837      	ldr	r0, [pc, #220]	; (4ebc <usb_init+0x1f4>)
    4dde:	4b38      	ldr	r3, [pc, #224]	; (4ec0 <usb_init+0x1f8>)
    4de0:	4798      	blx	r3
    4de2:	1d23      	adds	r3, r4, #4
    4de4:	0021      	movs	r1, r4
    4de6:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    4de8:	2200      	movs	r2, #0
    4dea:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    4dec:	428b      	cmp	r3, r1
    4dee:	d1fc      	bne.n	4dea <usb_init+0x122>
    4df0:	0021      	movs	r1, r4
    4df2:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    4df4:	2200      	movs	r2, #0
    4df6:	601a      	str	r2, [r3, #0]
    4df8:	605a      	str	r2, [r3, #4]
    4dfa:	609a      	str	r2, [r3, #8]
    4dfc:	60da      	str	r2, [r3, #12]
    4dfe:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4e00:	428b      	cmp	r3, r1
    4e02:	d1f8      	bne.n	4df6 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    4e04:	2300      	movs	r3, #0
    4e06:	22a4      	movs	r2, #164	; 0xa4
    4e08:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    4e0a:	3201      	adds	r2, #1
    4e0c:	54a3      	strb	r3, [r4, r2]
    4e0e:	0023      	movs	r3, r4
    4e10:	33a6      	adds	r3, #166	; 0xa6
    4e12:	0021      	movs	r1, r4
    4e14:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    4e16:	2200      	movs	r2, #0
    4e18:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    4e1a:	721a      	strb	r2, [r3, #8]
    4e1c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    4e1e:	4299      	cmp	r1, r3
    4e20:	d1fa      	bne.n	4e18 <usb_init+0x150>
    4e22:	0023      	movs	r3, r4
    4e24:	33b8      	adds	r3, #184	; 0xb8
    4e26:	0021      	movs	r1, r4
    4e28:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    4e2a:	2200      	movs	r2, #0
    4e2c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    4e2e:	428b      	cmp	r3, r1
    4e30:	d1fc      	bne.n	4e2c <usb_init+0x164>
    4e32:	0021      	movs	r1, r4
    4e34:	3155      	adds	r1, #85	; 0x55
    4e36:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    4e38:	2200      	movs	r2, #0
    4e3a:	601a      	str	r2, [r3, #0]
    4e3c:	605a      	str	r2, [r3, #4]
    4e3e:	609a      	str	r2, [r3, #8]
    4e40:	60da      	str	r2, [r3, #12]
    4e42:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    4e44:	428b      	cmp	r3, r1
    4e46:	d1f8      	bne.n	4e3a <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    4e48:	2300      	movs	r3, #0
    4e4a:	22aa      	movs	r2, #170	; 0xaa
    4e4c:	0052      	lsls	r2, r2, #1
    4e4e:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    4e50:	3202      	adds	r2, #2
    4e52:	52a3      	strh	r3, [r4, r2]
    4e54:	0023      	movs	r3, r4
    4e56:	3359      	adds	r3, #89	; 0x59
    4e58:	33ff      	adds	r3, #255	; 0xff
    4e5a:	3461      	adds	r4, #97	; 0x61
    4e5c:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    4e5e:	2200      	movs	r2, #0
    4e60:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    4e62:	721a      	strb	r2, [r3, #8]
    4e64:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    4e66:	42a3      	cmp	r3, r4
    4e68:	d1fa      	bne.n	4e60 <usb_init+0x198>
    4e6a:	2280      	movs	r2, #128	; 0x80
    4e6c:	4b15      	ldr	r3, [pc, #84]	; (4ec4 <usb_init+0x1fc>)
    4e6e:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    4e70:	2000      	movs	r0, #0
    4e72:	b003      	add	sp, #12
    4e74:	bc0c      	pop	{r2, r3}
    4e76:	4690      	mov	r8, r2
    4e78:	4699      	mov	r9, r3
    4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    4e7c:	3b1a      	subs	r3, #26
    4e7e:	e76d      	b.n	4d5c <usb_init+0x94>
		pad_transp = 29;
    4e80:	3b02      	subs	r3, #2
    4e82:	e778      	b.n	4d76 <usb_init+0xae>
		pad_trim = 3;
    4e84:	3b04      	subs	r3, #4
    4e86:	e782      	b.n	4d8e <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    4e88:	6822      	ldr	r2, [r4, #0]
    4e8a:	8913      	ldrh	r3, [r2, #8]
    4e8c:	3108      	adds	r1, #8
    4e8e:	438b      	bics	r3, r1
    4e90:	8113      	strh	r3, [r2, #8]
    4e92:	e7a0      	b.n	4dd6 <usb_init+0x10e>
    4e94:	2000029c 	.word	0x2000029c
    4e98:	2000028c 	.word	0x2000028c
    4e9c:	40000400 	.word	0x40000400
    4ea0:	000068dd 	.word	0x000068dd
    4ea4:	000067e5 	.word	0x000067e5
    4ea8:	00006759 	.word	0x00006759
    4eac:	41005000 	.word	0x41005000
    4eb0:	00806024 	.word	0x00806024
    4eb4:	fffff83f 	.word	0xfffff83f
    4eb8:	ffff8fff 	.word	0xffff8fff
    4ebc:	20000620 	.word	0x20000620
    4ec0:	0000704b 	.word	0x0000704b
    4ec4:	e000e100 	.word	0xe000e100

00004ec8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4ec8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4eca:	2a00      	cmp	r2, #0
    4ecc:	d001      	beq.n	4ed2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4ece:	0018      	movs	r0, r3
    4ed0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4ed2:	008b      	lsls	r3, r1, #2
    4ed4:	4a06      	ldr	r2, [pc, #24]	; (4ef0 <extint_register_callback+0x28>)
    4ed6:	589b      	ldr	r3, [r3, r2]
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d003      	beq.n	4ee4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4edc:	4283      	cmp	r3, r0
    4ede:	d005      	beq.n	4eec <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4ee0:	231d      	movs	r3, #29
    4ee2:	e7f4      	b.n	4ece <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4ee4:	0089      	lsls	r1, r1, #2
    4ee6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4ee8:	2300      	movs	r3, #0
    4eea:	e7f0      	b.n	4ece <extint_register_callback+0x6>
		return STATUS_OK;
    4eec:	2300      	movs	r3, #0
    4eee:	e7ee      	b.n	4ece <extint_register_callback+0x6>
    4ef0:	200002f8 	.word	0x200002f8

00004ef4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4ef4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4ef6:	2900      	cmp	r1, #0
    4ef8:	d001      	beq.n	4efe <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4efa:	0018      	movs	r0, r3
    4efc:	4770      	bx	lr
		return NULL;
    4efe:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4f00:	281f      	cmp	r0, #31
    4f02:	d800      	bhi.n	4f06 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4f04:	4a02      	ldr	r2, [pc, #8]	; (4f10 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4f06:	2301      	movs	r3, #1
    4f08:	4083      	lsls	r3, r0
    4f0a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4f0c:	2300      	movs	r3, #0
    4f0e:	e7f4      	b.n	4efa <extint_chan_enable_callback+0x6>
    4f10:	40001800 	.word	0x40001800

00004f14 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4f14:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4f16:	2900      	cmp	r1, #0
    4f18:	d001      	beq.n	4f1e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    4f1a:	0018      	movs	r0, r3
    4f1c:	4770      	bx	lr
		return NULL;
    4f1e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    4f20:	281f      	cmp	r0, #31
    4f22:	d800      	bhi.n	4f26 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    4f24:	4a02      	ldr	r2, [pc, #8]	; (4f30 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    4f26:	2301      	movs	r3, #1
    4f28:	4083      	lsls	r3, r0
    4f2a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    4f2c:	2300      	movs	r3, #0
    4f2e:	e7f4      	b.n	4f1a <extint_chan_disable_callback+0x6>
    4f30:	40001800 	.word	0x40001800

00004f34 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4f34:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4f36:	2200      	movs	r2, #0
    4f38:	4b10      	ldr	r3, [pc, #64]	; (4f7c <EIC_Handler+0x48>)
    4f3a:	701a      	strb	r2, [r3, #0]
    4f3c:	2300      	movs	r3, #0
    4f3e:	4910      	ldr	r1, [pc, #64]	; (4f80 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4f40:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4f42:	4e10      	ldr	r6, [pc, #64]	; (4f84 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4f44:	4c0d      	ldr	r4, [pc, #52]	; (4f7c <EIC_Handler+0x48>)
    4f46:	e00a      	b.n	4f5e <EIC_Handler+0x2a>
		return eics[eic_index];
    4f48:	490d      	ldr	r1, [pc, #52]	; (4f80 <EIC_Handler+0x4c>)
    4f4a:	e008      	b.n	4f5e <EIC_Handler+0x2a>
    4f4c:	7823      	ldrb	r3, [r4, #0]
    4f4e:	3301      	adds	r3, #1
    4f50:	b2db      	uxtb	r3, r3
    4f52:	7023      	strb	r3, [r4, #0]
    4f54:	2b0f      	cmp	r3, #15
    4f56:	d810      	bhi.n	4f7a <EIC_Handler+0x46>
		return NULL;
    4f58:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4f5a:	2b1f      	cmp	r3, #31
    4f5c:	d9f4      	bls.n	4f48 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    4f5e:	0028      	movs	r0, r5
    4f60:	4018      	ands	r0, r3
    4f62:	2201      	movs	r2, #1
    4f64:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4f66:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4f68:	4210      	tst	r0, r2
    4f6a:	d0ef      	beq.n	4f4c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4f6c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4f6e:	009b      	lsls	r3, r3, #2
    4f70:	599b      	ldr	r3, [r3, r6]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d0ea      	beq.n	4f4c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4f76:	4798      	blx	r3
    4f78:	e7e8      	b.n	4f4c <EIC_Handler+0x18>
			}
		}
	}
}
    4f7a:	bd70      	pop	{r4, r5, r6, pc}
    4f7c:	20000720 	.word	0x20000720
    4f80:	40001800 	.word	0x40001800
    4f84:	200002f8 	.word	0x200002f8

00004f88 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f8a:	46de      	mov	lr, fp
    4f8c:	4657      	mov	r7, sl
    4f8e:	464e      	mov	r6, r9
    4f90:	4645      	mov	r5, r8
    4f92:	b5e0      	push	{r5, r6, r7, lr}
    4f94:	b087      	sub	sp, #28
    4f96:	4680      	mov	r8, r0
    4f98:	9104      	str	r1, [sp, #16]
    4f9a:	0016      	movs	r6, r2
    4f9c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4f9e:	2200      	movs	r2, #0
    4fa0:	2300      	movs	r3, #0
    4fa2:	2100      	movs	r1, #0
    4fa4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4fa6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4fa8:	2001      	movs	r0, #1
    4faa:	0021      	movs	r1, r4
    4fac:	9600      	str	r6, [sp, #0]
    4fae:	9701      	str	r7, [sp, #4]
    4fb0:	465c      	mov	r4, fp
    4fb2:	9403      	str	r4, [sp, #12]
    4fb4:	4644      	mov	r4, r8
    4fb6:	9405      	str	r4, [sp, #20]
    4fb8:	e013      	b.n	4fe2 <long_division+0x5a>
    4fba:	2420      	movs	r4, #32
    4fbc:	1a64      	subs	r4, r4, r1
    4fbe:	0005      	movs	r5, r0
    4fc0:	40e5      	lsrs	r5, r4
    4fc2:	46a8      	mov	r8, r5
    4fc4:	e014      	b.n	4ff0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4fc6:	9c00      	ldr	r4, [sp, #0]
    4fc8:	9d01      	ldr	r5, [sp, #4]
    4fca:	1b12      	subs	r2, r2, r4
    4fcc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4fce:	465c      	mov	r4, fp
    4fd0:	464d      	mov	r5, r9
    4fd2:	432c      	orrs	r4, r5
    4fd4:	46a3      	mov	fp, r4
    4fd6:	9c03      	ldr	r4, [sp, #12]
    4fd8:	4645      	mov	r5, r8
    4fda:	432c      	orrs	r4, r5
    4fdc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4fde:	3901      	subs	r1, #1
    4fe0:	d325      	bcc.n	502e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4fe2:	2420      	movs	r4, #32
    4fe4:	4264      	negs	r4, r4
    4fe6:	190c      	adds	r4, r1, r4
    4fe8:	d4e7      	bmi.n	4fba <long_division+0x32>
    4fea:	0005      	movs	r5, r0
    4fec:	40a5      	lsls	r5, r4
    4fee:	46a8      	mov	r8, r5
    4ff0:	0004      	movs	r4, r0
    4ff2:	408c      	lsls	r4, r1
    4ff4:	46a1      	mov	r9, r4
		r = r << 1;
    4ff6:	1892      	adds	r2, r2, r2
    4ff8:	415b      	adcs	r3, r3
    4ffa:	0014      	movs	r4, r2
    4ffc:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4ffe:	9e05      	ldr	r6, [sp, #20]
    5000:	464f      	mov	r7, r9
    5002:	403e      	ands	r6, r7
    5004:	46b4      	mov	ip, r6
    5006:	9e04      	ldr	r6, [sp, #16]
    5008:	4647      	mov	r7, r8
    500a:	403e      	ands	r6, r7
    500c:	46b2      	mov	sl, r6
    500e:	4666      	mov	r6, ip
    5010:	4657      	mov	r7, sl
    5012:	433e      	orrs	r6, r7
    5014:	d003      	beq.n	501e <long_division+0x96>
			r |= 0x01;
    5016:	0006      	movs	r6, r0
    5018:	4326      	orrs	r6, r4
    501a:	0032      	movs	r2, r6
    501c:	002b      	movs	r3, r5
		if (r >= d) {
    501e:	9c00      	ldr	r4, [sp, #0]
    5020:	9d01      	ldr	r5, [sp, #4]
    5022:	429d      	cmp	r5, r3
    5024:	d8db      	bhi.n	4fde <long_division+0x56>
    5026:	d1ce      	bne.n	4fc6 <long_division+0x3e>
    5028:	4294      	cmp	r4, r2
    502a:	d8d8      	bhi.n	4fde <long_division+0x56>
    502c:	e7cb      	b.n	4fc6 <long_division+0x3e>
    502e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5030:	4658      	mov	r0, fp
    5032:	0019      	movs	r1, r3
    5034:	b007      	add	sp, #28
    5036:	bc3c      	pop	{r2, r3, r4, r5}
    5038:	4690      	mov	r8, r2
    503a:	4699      	mov	r9, r3
    503c:	46a2      	mov	sl, r4
    503e:	46ab      	mov	fp, r5
    5040:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005042 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5042:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5044:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5046:	2340      	movs	r3, #64	; 0x40
    5048:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    504a:	4281      	cmp	r1, r0
    504c:	d202      	bcs.n	5054 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    504e:	0018      	movs	r0, r3
    5050:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5052:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5054:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5056:	1c63      	adds	r3, r4, #1
    5058:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    505a:	4288      	cmp	r0, r1
    505c:	d9f9      	bls.n	5052 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    505e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5060:	2cff      	cmp	r4, #255	; 0xff
    5062:	d8f4      	bhi.n	504e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5064:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5066:	2300      	movs	r3, #0
    5068:	e7f1      	b.n	504e <_sercom_get_sync_baud_val+0xc>
	...

0000506c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    506c:	b5f0      	push	{r4, r5, r6, r7, lr}
    506e:	b083      	sub	sp, #12
    5070:	000f      	movs	r7, r1
    5072:	0016      	movs	r6, r2
    5074:	aa08      	add	r2, sp, #32
    5076:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5078:	0004      	movs	r4, r0
    507a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    507c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    507e:	42bc      	cmp	r4, r7
    5080:	d902      	bls.n	5088 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5082:	0010      	movs	r0, r2
    5084:	b003      	add	sp, #12
    5086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5088:	2b00      	cmp	r3, #0
    508a:	d114      	bne.n	50b6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    508c:	0002      	movs	r2, r0
    508e:	0008      	movs	r0, r1
    5090:	2100      	movs	r1, #0
    5092:	4c19      	ldr	r4, [pc, #100]	; (50f8 <_sercom_get_async_baud_val+0x8c>)
    5094:	47a0      	blx	r4
    5096:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5098:	003a      	movs	r2, r7
    509a:	2300      	movs	r3, #0
    509c:	2000      	movs	r0, #0
    509e:	4c17      	ldr	r4, [pc, #92]	; (50fc <_sercom_get_async_baud_val+0x90>)
    50a0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    50a2:	2200      	movs	r2, #0
    50a4:	2301      	movs	r3, #1
    50a6:	1a12      	subs	r2, r2, r0
    50a8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    50aa:	0c12      	lsrs	r2, r2, #16
    50ac:	041b      	lsls	r3, r3, #16
    50ae:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    50b0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    50b2:	2200      	movs	r2, #0
    50b4:	e7e5      	b.n	5082 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    50b6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    50b8:	2b01      	cmp	r3, #1
    50ba:	d1f9      	bne.n	50b0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    50bc:	000a      	movs	r2, r1
    50be:	2300      	movs	r3, #0
    50c0:	2100      	movs	r1, #0
    50c2:	4c0d      	ldr	r4, [pc, #52]	; (50f8 <_sercom_get_async_baud_val+0x8c>)
    50c4:	47a0      	blx	r4
    50c6:	0002      	movs	r2, r0
    50c8:	000b      	movs	r3, r1
    50ca:	9200      	str	r2, [sp, #0]
    50cc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    50ce:	0038      	movs	r0, r7
    50d0:	2100      	movs	r1, #0
    50d2:	4c0a      	ldr	r4, [pc, #40]	; (50fc <_sercom_get_async_baud_val+0x90>)
    50d4:	47a0      	blx	r4
    50d6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    50d8:	2380      	movs	r3, #128	; 0x80
    50da:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    50dc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    50de:	4298      	cmp	r0, r3
    50e0:	d8cf      	bhi.n	5082 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    50e2:	0f79      	lsrs	r1, r7, #29
    50e4:	00f8      	lsls	r0, r7, #3
    50e6:	9a00      	ldr	r2, [sp, #0]
    50e8:	9b01      	ldr	r3, [sp, #4]
    50ea:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    50ec:	00ea      	lsls	r2, r5, #3
    50ee:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    50f0:	b2d2      	uxtb	r2, r2
    50f2:	0352      	lsls	r2, r2, #13
    50f4:	432a      	orrs	r2, r5
    50f6:	e7db      	b.n	50b0 <_sercom_get_async_baud_val+0x44>
    50f8:	00006e05 	.word	0x00006e05
    50fc:	00004f89 	.word	0x00004f89

00005100 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5100:	b510      	push	{r4, lr}
    5102:	b082      	sub	sp, #8
    5104:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5106:	4b0e      	ldr	r3, [pc, #56]	; (5140 <sercom_set_gclk_generator+0x40>)
    5108:	781b      	ldrb	r3, [r3, #0]
    510a:	2b00      	cmp	r3, #0
    510c:	d007      	beq.n	511e <sercom_set_gclk_generator+0x1e>
    510e:	2900      	cmp	r1, #0
    5110:	d105      	bne.n	511e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5112:	4b0b      	ldr	r3, [pc, #44]	; (5140 <sercom_set_gclk_generator+0x40>)
    5114:	785b      	ldrb	r3, [r3, #1]
    5116:	4283      	cmp	r3, r0
    5118:	d010      	beq.n	513c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    511a:	201d      	movs	r0, #29
    511c:	e00c      	b.n	5138 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    511e:	a901      	add	r1, sp, #4
    5120:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5122:	2013      	movs	r0, #19
    5124:	4b07      	ldr	r3, [pc, #28]	; (5144 <sercom_set_gclk_generator+0x44>)
    5126:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5128:	2013      	movs	r0, #19
    512a:	4b07      	ldr	r3, [pc, #28]	; (5148 <sercom_set_gclk_generator+0x48>)
    512c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    512e:	4b04      	ldr	r3, [pc, #16]	; (5140 <sercom_set_gclk_generator+0x40>)
    5130:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5132:	2201      	movs	r2, #1
    5134:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5136:	2000      	movs	r0, #0
}
    5138:	b002      	add	sp, #8
    513a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    513c:	2000      	movs	r0, #0
    513e:	e7fb      	b.n	5138 <sercom_set_gclk_generator+0x38>
    5140:	200002a8 	.word	0x200002a8
    5144:	000067e5 	.word	0x000067e5
    5148:	00006759 	.word	0x00006759

0000514c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    514c:	4b40      	ldr	r3, [pc, #256]	; (5250 <_sercom_get_default_pad+0x104>)
    514e:	4298      	cmp	r0, r3
    5150:	d031      	beq.n	51b6 <_sercom_get_default_pad+0x6a>
    5152:	d90a      	bls.n	516a <_sercom_get_default_pad+0x1e>
    5154:	4b3f      	ldr	r3, [pc, #252]	; (5254 <_sercom_get_default_pad+0x108>)
    5156:	4298      	cmp	r0, r3
    5158:	d04d      	beq.n	51f6 <_sercom_get_default_pad+0xaa>
    515a:	4b3f      	ldr	r3, [pc, #252]	; (5258 <_sercom_get_default_pad+0x10c>)
    515c:	4298      	cmp	r0, r3
    515e:	d05a      	beq.n	5216 <_sercom_get_default_pad+0xca>
    5160:	4b3e      	ldr	r3, [pc, #248]	; (525c <_sercom_get_default_pad+0x110>)
    5162:	4298      	cmp	r0, r3
    5164:	d037      	beq.n	51d6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5166:	2000      	movs	r0, #0
}
    5168:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    516a:	4b3d      	ldr	r3, [pc, #244]	; (5260 <_sercom_get_default_pad+0x114>)
    516c:	4298      	cmp	r0, r3
    516e:	d00c      	beq.n	518a <_sercom_get_default_pad+0x3e>
    5170:	4b3c      	ldr	r3, [pc, #240]	; (5264 <_sercom_get_default_pad+0x118>)
    5172:	4298      	cmp	r0, r3
    5174:	d1f7      	bne.n	5166 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5176:	2901      	cmp	r1, #1
    5178:	d017      	beq.n	51aa <_sercom_get_default_pad+0x5e>
    517a:	2900      	cmp	r1, #0
    517c:	d05d      	beq.n	523a <_sercom_get_default_pad+0xee>
    517e:	2902      	cmp	r1, #2
    5180:	d015      	beq.n	51ae <_sercom_get_default_pad+0x62>
    5182:	2903      	cmp	r1, #3
    5184:	d015      	beq.n	51b2 <_sercom_get_default_pad+0x66>
	return 0;
    5186:	2000      	movs	r0, #0
    5188:	e7ee      	b.n	5168 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    518a:	2901      	cmp	r1, #1
    518c:	d007      	beq.n	519e <_sercom_get_default_pad+0x52>
    518e:	2900      	cmp	r1, #0
    5190:	d051      	beq.n	5236 <_sercom_get_default_pad+0xea>
    5192:	2902      	cmp	r1, #2
    5194:	d005      	beq.n	51a2 <_sercom_get_default_pad+0x56>
    5196:	2903      	cmp	r1, #3
    5198:	d005      	beq.n	51a6 <_sercom_get_default_pad+0x5a>
	return 0;
    519a:	2000      	movs	r0, #0
    519c:	e7e4      	b.n	5168 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    519e:	4832      	ldr	r0, [pc, #200]	; (5268 <_sercom_get_default_pad+0x11c>)
    51a0:	e7e2      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51a2:	4832      	ldr	r0, [pc, #200]	; (526c <_sercom_get_default_pad+0x120>)
    51a4:	e7e0      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51a6:	4832      	ldr	r0, [pc, #200]	; (5270 <_sercom_get_default_pad+0x124>)
    51a8:	e7de      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51aa:	4832      	ldr	r0, [pc, #200]	; (5274 <_sercom_get_default_pad+0x128>)
    51ac:	e7dc      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51ae:	4832      	ldr	r0, [pc, #200]	; (5278 <_sercom_get_default_pad+0x12c>)
    51b0:	e7da      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51b2:	4832      	ldr	r0, [pc, #200]	; (527c <_sercom_get_default_pad+0x130>)
    51b4:	e7d8      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51b6:	2901      	cmp	r1, #1
    51b8:	d007      	beq.n	51ca <_sercom_get_default_pad+0x7e>
    51ba:	2900      	cmp	r1, #0
    51bc:	d03f      	beq.n	523e <_sercom_get_default_pad+0xf2>
    51be:	2902      	cmp	r1, #2
    51c0:	d005      	beq.n	51ce <_sercom_get_default_pad+0x82>
    51c2:	2903      	cmp	r1, #3
    51c4:	d005      	beq.n	51d2 <_sercom_get_default_pad+0x86>
	return 0;
    51c6:	2000      	movs	r0, #0
    51c8:	e7ce      	b.n	5168 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    51ca:	482d      	ldr	r0, [pc, #180]	; (5280 <_sercom_get_default_pad+0x134>)
    51cc:	e7cc      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51ce:	482d      	ldr	r0, [pc, #180]	; (5284 <_sercom_get_default_pad+0x138>)
    51d0:	e7ca      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51d2:	482d      	ldr	r0, [pc, #180]	; (5288 <_sercom_get_default_pad+0x13c>)
    51d4:	e7c8      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51d6:	2901      	cmp	r1, #1
    51d8:	d007      	beq.n	51ea <_sercom_get_default_pad+0x9e>
    51da:	2900      	cmp	r1, #0
    51dc:	d031      	beq.n	5242 <_sercom_get_default_pad+0xf6>
    51de:	2902      	cmp	r1, #2
    51e0:	d005      	beq.n	51ee <_sercom_get_default_pad+0xa2>
    51e2:	2903      	cmp	r1, #3
    51e4:	d005      	beq.n	51f2 <_sercom_get_default_pad+0xa6>
	return 0;
    51e6:	2000      	movs	r0, #0
    51e8:	e7be      	b.n	5168 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    51ea:	4828      	ldr	r0, [pc, #160]	; (528c <_sercom_get_default_pad+0x140>)
    51ec:	e7bc      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51ee:	4828      	ldr	r0, [pc, #160]	; (5290 <_sercom_get_default_pad+0x144>)
    51f0:	e7ba      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51f2:	4828      	ldr	r0, [pc, #160]	; (5294 <_sercom_get_default_pad+0x148>)
    51f4:	e7b8      	b.n	5168 <_sercom_get_default_pad+0x1c>
    51f6:	2901      	cmp	r1, #1
    51f8:	d007      	beq.n	520a <_sercom_get_default_pad+0xbe>
    51fa:	2900      	cmp	r1, #0
    51fc:	d023      	beq.n	5246 <_sercom_get_default_pad+0xfa>
    51fe:	2902      	cmp	r1, #2
    5200:	d005      	beq.n	520e <_sercom_get_default_pad+0xc2>
    5202:	2903      	cmp	r1, #3
    5204:	d005      	beq.n	5212 <_sercom_get_default_pad+0xc6>
	return 0;
    5206:	2000      	movs	r0, #0
    5208:	e7ae      	b.n	5168 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    520a:	4823      	ldr	r0, [pc, #140]	; (5298 <_sercom_get_default_pad+0x14c>)
    520c:	e7ac      	b.n	5168 <_sercom_get_default_pad+0x1c>
    520e:	4823      	ldr	r0, [pc, #140]	; (529c <_sercom_get_default_pad+0x150>)
    5210:	e7aa      	b.n	5168 <_sercom_get_default_pad+0x1c>
    5212:	4823      	ldr	r0, [pc, #140]	; (52a0 <_sercom_get_default_pad+0x154>)
    5214:	e7a8      	b.n	5168 <_sercom_get_default_pad+0x1c>
    5216:	2901      	cmp	r1, #1
    5218:	d007      	beq.n	522a <_sercom_get_default_pad+0xde>
    521a:	2900      	cmp	r1, #0
    521c:	d015      	beq.n	524a <_sercom_get_default_pad+0xfe>
    521e:	2902      	cmp	r1, #2
    5220:	d005      	beq.n	522e <_sercom_get_default_pad+0xe2>
    5222:	2903      	cmp	r1, #3
    5224:	d005      	beq.n	5232 <_sercom_get_default_pad+0xe6>
	return 0;
    5226:	2000      	movs	r0, #0
    5228:	e79e      	b.n	5168 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    522a:	481e      	ldr	r0, [pc, #120]	; (52a4 <_sercom_get_default_pad+0x158>)
    522c:	e79c      	b.n	5168 <_sercom_get_default_pad+0x1c>
    522e:	481e      	ldr	r0, [pc, #120]	; (52a8 <_sercom_get_default_pad+0x15c>)
    5230:	e79a      	b.n	5168 <_sercom_get_default_pad+0x1c>
    5232:	481e      	ldr	r0, [pc, #120]	; (52ac <_sercom_get_default_pad+0x160>)
    5234:	e798      	b.n	5168 <_sercom_get_default_pad+0x1c>
    5236:	481e      	ldr	r0, [pc, #120]	; (52b0 <_sercom_get_default_pad+0x164>)
    5238:	e796      	b.n	5168 <_sercom_get_default_pad+0x1c>
    523a:	2003      	movs	r0, #3
    523c:	e794      	b.n	5168 <_sercom_get_default_pad+0x1c>
    523e:	481d      	ldr	r0, [pc, #116]	; (52b4 <_sercom_get_default_pad+0x168>)
    5240:	e792      	b.n	5168 <_sercom_get_default_pad+0x1c>
    5242:	481d      	ldr	r0, [pc, #116]	; (52b8 <_sercom_get_default_pad+0x16c>)
    5244:	e790      	b.n	5168 <_sercom_get_default_pad+0x1c>
    5246:	481d      	ldr	r0, [pc, #116]	; (52bc <_sercom_get_default_pad+0x170>)
    5248:	e78e      	b.n	5168 <_sercom_get_default_pad+0x1c>
    524a:	481d      	ldr	r0, [pc, #116]	; (52c0 <_sercom_get_default_pad+0x174>)
    524c:	e78c      	b.n	5168 <_sercom_get_default_pad+0x1c>
    524e:	46c0      	nop			; (mov r8, r8)
    5250:	42001000 	.word	0x42001000
    5254:	42001800 	.word	0x42001800
    5258:	42001c00 	.word	0x42001c00
    525c:	42001400 	.word	0x42001400
    5260:	42000800 	.word	0x42000800
    5264:	42000c00 	.word	0x42000c00
    5268:	00050003 	.word	0x00050003
    526c:	00060003 	.word	0x00060003
    5270:	00070003 	.word	0x00070003
    5274:	00010003 	.word	0x00010003
    5278:	001e0003 	.word	0x001e0003
    527c:	001f0003 	.word	0x001f0003
    5280:	00090003 	.word	0x00090003
    5284:	000a0003 	.word	0x000a0003
    5288:	000b0003 	.word	0x000b0003
    528c:	00110003 	.word	0x00110003
    5290:	00120003 	.word	0x00120003
    5294:	00130003 	.word	0x00130003
    5298:	000d0003 	.word	0x000d0003
    529c:	000e0003 	.word	0x000e0003
    52a0:	000f0003 	.word	0x000f0003
    52a4:	00170003 	.word	0x00170003
    52a8:	00180003 	.word	0x00180003
    52ac:	00190003 	.word	0x00190003
    52b0:	00040003 	.word	0x00040003
    52b4:	00080003 	.word	0x00080003
    52b8:	00100003 	.word	0x00100003
    52bc:	000c0003 	.word	0x000c0003
    52c0:	00160003 	.word	0x00160003

000052c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    52c4:	b530      	push	{r4, r5, lr}
    52c6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    52c8:	4b0b      	ldr	r3, [pc, #44]	; (52f8 <_sercom_get_sercom_inst_index+0x34>)
    52ca:	466a      	mov	r2, sp
    52cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    52ce:	c232      	stmia	r2!, {r1, r4, r5}
    52d0:	cb32      	ldmia	r3!, {r1, r4, r5}
    52d2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    52d4:	9b00      	ldr	r3, [sp, #0]
    52d6:	4283      	cmp	r3, r0
    52d8:	d00b      	beq.n	52f2 <_sercom_get_sercom_inst_index+0x2e>
    52da:	2301      	movs	r3, #1
    52dc:	009a      	lsls	r2, r3, #2
    52de:	4669      	mov	r1, sp
    52e0:	5852      	ldr	r2, [r2, r1]
    52e2:	4282      	cmp	r2, r0
    52e4:	d006      	beq.n	52f4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    52e6:	3301      	adds	r3, #1
    52e8:	2b06      	cmp	r3, #6
    52ea:	d1f7      	bne.n	52dc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    52ec:	2000      	movs	r0, #0
}
    52ee:	b007      	add	sp, #28
    52f0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    52f2:	2300      	movs	r3, #0
			return i;
    52f4:	b2d8      	uxtb	r0, r3
    52f6:	e7fa      	b.n	52ee <_sercom_get_sercom_inst_index+0x2a>
    52f8:	00007af4 	.word	0x00007af4

000052fc <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    52fc:	b570      	push	{r4, r5, r6, lr}
    52fe:	b082      	sub	sp, #8
    5300:	0006      	movs	r6, r0
    5302:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5304:	2200      	movs	r2, #0
    5306:	466b      	mov	r3, sp
    5308:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    530a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    530c:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    530e:	2b00      	cmp	r3, #0
    5310:	d1fc      	bne.n	530c <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    5312:	338f      	adds	r3, #143	; 0x8f
    5314:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    5316:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5318:	6823      	ldr	r3, [r4, #0]
    531a:	2202      	movs	r2, #2
    531c:	4393      	bics	r3, r2
    531e:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5320:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5322:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    5324:	2b00      	cmp	r3, #0
    5326:	d1fc      	bne.n	5322 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5328:	4b12      	ldr	r3, [pc, #72]	; (5374 <spi_set_baudrate+0x78>)
    532a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    532c:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    532e:	b2c0      	uxtb	r0, r0
    5330:	4b11      	ldr	r3, [pc, #68]	; (5378 <spi_set_baudrate+0x7c>)
    5332:	4798      	blx	r3
    5334:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    5336:	466b      	mov	r3, sp
    5338:	1d9a      	adds	r2, r3, #6
    533a:	0028      	movs	r0, r5
    533c:	4b0f      	ldr	r3, [pc, #60]	; (537c <spi_set_baudrate+0x80>)
    533e:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    5340:	2800      	cmp	r0, #0
    5342:	d002      	beq.n	534a <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    5344:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    5346:	b002      	add	sp, #8
    5348:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    534a:	466b      	mov	r3, sp
    534c:	3306      	adds	r3, #6
    534e:	781b      	ldrb	r3, [r3, #0]
    5350:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5352:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    5354:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    5356:	2a00      	cmp	r2, #0
    5358:	d1fc      	bne.n	5354 <spi_set_baudrate+0x58>
    535a:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    535c:	2a00      	cmp	r2, #0
    535e:	d1fc      	bne.n	535a <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5360:	681a      	ldr	r2, [r3, #0]
    5362:	2102      	movs	r1, #2
    5364:	430a      	orrs	r2, r1
    5366:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5368:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    536a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    536c:	2b00      	cmp	r3, #0
    536e:	d1fc      	bne.n	536a <spi_set_baudrate+0x6e>
    5370:	e7e9      	b.n	5346 <spi_set_baudrate+0x4a>
    5372:	46c0      	nop			; (mov r8, r8)
    5374:	000052c5 	.word	0x000052c5
    5378:	00006801 	.word	0x00006801
    537c:	00005043 	.word	0x00005043

00005380 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5380:	b5f0      	push	{r4, r5, r6, r7, lr}
    5382:	46d6      	mov	lr, sl
    5384:	464f      	mov	r7, r9
    5386:	b580      	push	{r7, lr}
    5388:	b08b      	sub	sp, #44	; 0x2c
    538a:	4681      	mov	r9, r0
    538c:	000f      	movs	r7, r1
    538e:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5390:	0003      	movs	r3, r0
    5392:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    5394:	680b      	ldr	r3, [r1, #0]
    5396:	079b      	lsls	r3, r3, #30
    5398:	d409      	bmi.n	53ae <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    539a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    539c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    539e:	07db      	lsls	r3, r3, #31
    53a0:	d400      	bmi.n	53a4 <spi_init+0x24>
    53a2:	e0b1      	b.n	5508 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    53a4:	b00b      	add	sp, #44	; 0x2c
    53a6:	bc0c      	pop	{r2, r3}
    53a8:	4691      	mov	r9, r2
    53aa:	469a      	mov	sl, r3
    53ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    53ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    53b0:	9305      	str	r3, [sp, #20]
    53b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    53b4:	9306      	str	r3, [sp, #24]
    53b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    53b8:	9307      	str	r3, [sp, #28]
    53ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
    53bc:	9308      	str	r3, [sp, #32]
    53be:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    53c0:	ab05      	add	r3, sp, #20
    53c2:	9301      	str	r3, [sp, #4]
    53c4:	e00a      	b.n	53dc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    53c6:	0038      	movs	r0, r7
    53c8:	4baf      	ldr	r3, [pc, #700]	; (5688 <spi_init+0x308>)
    53ca:	4798      	blx	r3
    53cc:	e00c      	b.n	53e8 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    53ce:	230f      	movs	r3, #15
    53d0:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    53d2:	4281      	cmp	r1, r0
    53d4:	d12d      	bne.n	5432 <spi_init+0xb2>
    53d6:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    53d8:	2e04      	cmp	r6, #4
    53da:	d02f      	beq.n	543c <spi_init+0xbc>
    53dc:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    53de:	00b3      	lsls	r3, r6, #2
    53e0:	9a01      	ldr	r2, [sp, #4]
    53e2:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    53e4:	2800      	cmp	r0, #0
    53e6:	d0ee      	beq.n	53c6 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    53e8:	1c43      	adds	r3, r0, #1
    53ea:	d0f4      	beq.n	53d6 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    53ec:	0401      	lsls	r1, r0, #16
    53ee:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    53f0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    53f2:	b2c3      	uxtb	r3, r0
    53f4:	469c      	mov	ip, r3
		return NULL;
    53f6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    53f8:	0602      	lsls	r2, r0, #24
    53fa:	d405      	bmi.n	5408 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    53fc:	4663      	mov	r3, ip
    53fe:	095b      	lsrs	r3, r3, #5
    5400:	01db      	lsls	r3, r3, #7
    5402:	4aa2      	ldr	r2, [pc, #648]	; (568c <spi_init+0x30c>)
    5404:	4692      	mov	sl, r2
    5406:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    5408:	221f      	movs	r2, #31
    540a:	4660      	mov	r0, ip
    540c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    540e:	1898      	adds	r0, r3, r2
    5410:	3040      	adds	r0, #64	; 0x40
    5412:	7800      	ldrb	r0, [r0, #0]
    5414:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    5416:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    5418:	4655      	mov	r5, sl
    541a:	07ed      	lsls	r5, r5, #31
    541c:	d5d9      	bpl.n	53d2 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    541e:	0852      	lsrs	r2, r2, #1
    5420:	189b      	adds	r3, r3, r2
    5422:	3330      	adds	r3, #48	; 0x30
    5424:	7818      	ldrb	r0, [r3, #0]
    5426:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    5428:	4663      	mov	r3, ip
    542a:	07db      	lsls	r3, r3, #31
    542c:	d5cf      	bpl.n	53ce <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    542e:	0900      	lsrs	r0, r0, #4
    5430:	e7cf      	b.n	53d2 <spi_init+0x52>
			module->hw = NULL;
    5432:	2300      	movs	r3, #0
    5434:	464a      	mov	r2, r9
    5436:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    5438:	201c      	movs	r0, #28
    543a:	e7b3      	b.n	53a4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    543c:	2013      	movs	r0, #19
    543e:	4b94      	ldr	r3, [pc, #592]	; (5690 <spi_init+0x310>)
    5440:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    5442:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    5444:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    5446:	2a01      	cmp	r2, #1
    5448:	d016      	beq.n	5478 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    544a:	7821      	ldrb	r1, [r4, #0]
    544c:	2900      	cmp	r1, #0
    544e:	d127      	bne.n	54a0 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    5450:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    5452:	7fe2      	ldrb	r2, [r4, #31]
    5454:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5456:	7fa0      	ldrb	r0, [r4, #30]
    5458:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    545a:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    545c:	429a      	cmp	r2, r3
    545e:	d1a1      	bne.n	53a4 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    5460:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    5462:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    5464:	3004      	adds	r0, #4
    5466:	5c20      	ldrb	r0, [r4, r0]
    5468:	2800      	cmp	r0, #0
    546a:	d001      	beq.n	5470 <spi_init+0xf0>
    546c:	2040      	movs	r0, #64	; 0x40
    546e:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    5470:	2008      	movs	r0, #8
    5472:	4303      	orrs	r3, r0
    5474:	431d      	orrs	r5, r3
    5476:	e014      	b.n	54a2 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    5478:	aa04      	add	r2, sp, #16
    547a:	0001      	movs	r1, r0
    547c:	69a0      	ldr	r0, [r4, #24]
    547e:	4b85      	ldr	r3, [pc, #532]	; (5694 <spi_init+0x314>)
    5480:	4798      	blx	r3
    5482:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5484:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5486:	2b00      	cmp	r3, #0
    5488:	d000      	beq.n	548c <spi_init+0x10c>
    548a:	e78b      	b.n	53a4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    548c:	7b3b      	ldrb	r3, [r7, #12]
    548e:	b2db      	uxtb	r3, r3
    5490:	aa04      	add	r2, sp, #16
    5492:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    5494:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    5496:	429a      	cmp	r2, r3
    5498:	d000      	beq.n	549c <spi_init+0x11c>
    549a:	e783      	b.n	53a4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    549c:	350c      	adds	r5, #12
    549e:	e7d4      	b.n	544a <spi_init+0xca>
	uint32_t ctrlb = 0;
    54a0:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    54a2:	6863      	ldr	r3, [r4, #4]
    54a4:	68a0      	ldr	r0, [r4, #8]
    54a6:	4303      	orrs	r3, r0
    54a8:	68e0      	ldr	r0, [r4, #12]
    54aa:	4303      	orrs	r3, r0
    54ac:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    54ae:	7c20      	ldrb	r0, [r4, #16]
    54b0:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    54b2:	7c60      	ldrb	r0, [r4, #17]
    54b4:	2800      	cmp	r0, #0
    54b6:	d001      	beq.n	54bc <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    54b8:	2080      	movs	r0, #128	; 0x80
    54ba:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    54bc:	7ca0      	ldrb	r0, [r4, #18]
    54be:	2800      	cmp	r0, #0
    54c0:	d002      	beq.n	54c8 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    54c2:	2080      	movs	r0, #128	; 0x80
    54c4:	0280      	lsls	r0, r0, #10
    54c6:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    54c8:	7ce0      	ldrb	r0, [r4, #19]
    54ca:	2800      	cmp	r0, #0
    54cc:	d002      	beq.n	54d4 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    54ce:	2080      	movs	r0, #128	; 0x80
    54d0:	0080      	lsls	r0, r0, #2
    54d2:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    54d4:	7d20      	ldrb	r0, [r4, #20]
    54d6:	2800      	cmp	r0, #0
    54d8:	d002      	beq.n	54e0 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    54da:	2080      	movs	r0, #128	; 0x80
    54dc:	0180      	lsls	r0, r0, #6
    54de:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    54e0:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    54e2:	2502      	movs	r5, #2
    54e4:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    54e6:	4283      	cmp	r3, r0
    54e8:	d004      	beq.n	54f4 <spi_init+0x174>
	module->hw = NULL;
    54ea:	2300      	movs	r3, #0
    54ec:	464a      	mov	r2, r9
    54ee:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    54f0:	201c      	movs	r0, #28
    54f2:	e757      	b.n	53a4 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    54f4:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    54f6:	4293      	cmp	r3, r2
    54f8:	d1f7      	bne.n	54ea <spi_init+0x16a>
		module->mode           = config->mode;
    54fa:	464b      	mov	r3, r9
    54fc:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    54fe:	7c23      	ldrb	r3, [r4, #16]
    5500:	464a      	mov	r2, r9
    5502:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    5504:	2000      	movs	r0, #0
    5506:	e74d      	b.n	53a4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5508:	0008      	movs	r0, r1
    550a:	4b63      	ldr	r3, [pc, #396]	; (5698 <spi_init+0x318>)
    550c:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    550e:	4a63      	ldr	r2, [pc, #396]	; (569c <spi_init+0x31c>)
    5510:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5512:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5514:	2301      	movs	r3, #1
    5516:	40ab      	lsls	r3, r5
    5518:	430b      	orrs	r3, r1
    551a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    551c:	a909      	add	r1, sp, #36	; 0x24
    551e:	2624      	movs	r6, #36	; 0x24
    5520:	5da3      	ldrb	r3, [r4, r6]
    5522:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5524:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5526:	b2c5      	uxtb	r5, r0
    5528:	0028      	movs	r0, r5
    552a:	4b5d      	ldr	r3, [pc, #372]	; (56a0 <spi_init+0x320>)
    552c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    552e:	0028      	movs	r0, r5
    5530:	4b5c      	ldr	r3, [pc, #368]	; (56a4 <spi_init+0x324>)
    5532:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5534:	5da0      	ldrb	r0, [r4, r6]
    5536:	2100      	movs	r1, #0
    5538:	4b5b      	ldr	r3, [pc, #364]	; (56a8 <spi_init+0x328>)
    553a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    553c:	7823      	ldrb	r3, [r4, #0]
    553e:	2b01      	cmp	r3, #1
    5540:	d020      	beq.n	5584 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    5542:	7823      	ldrb	r3, [r4, #0]
    5544:	2b00      	cmp	r3, #0
    5546:	d103      	bne.n	5550 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    5548:	683b      	ldr	r3, [r7, #0]
    554a:	2208      	movs	r2, #8
    554c:	4313      	orrs	r3, r2
    554e:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5550:	464b      	mov	r3, r9
    5552:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5554:	ab04      	add	r3, sp, #16
    5556:	2280      	movs	r2, #128	; 0x80
    5558:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    555a:	2200      	movs	r2, #0
    555c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    555e:	2101      	movs	r1, #1
    5560:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    5562:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    5564:	7823      	ldrb	r3, [r4, #0]
    5566:	2b00      	cmp	r3, #0
    5568:	d101      	bne.n	556e <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    556a:	ab04      	add	r3, sp, #16
    556c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    556e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5570:	9305      	str	r3, [sp, #20]
    5572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5574:	9306      	str	r3, [sp, #24]
    5576:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5578:	9307      	str	r3, [sp, #28]
    557a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    557c:	9308      	str	r3, [sp, #32]
    557e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5580:	ad05      	add	r5, sp, #20
    5582:	e011      	b.n	55a8 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5584:	683b      	ldr	r3, [r7, #0]
    5586:	220c      	movs	r2, #12
    5588:	4313      	orrs	r3, r2
    558a:	603b      	str	r3, [r7, #0]
    558c:	e7d9      	b.n	5542 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    558e:	0030      	movs	r0, r6
    5590:	4b3d      	ldr	r3, [pc, #244]	; (5688 <spi_init+0x308>)
    5592:	4798      	blx	r3
    5594:	e00d      	b.n	55b2 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5596:	a904      	add	r1, sp, #16
    5598:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    559a:	0c00      	lsrs	r0, r0, #16
    559c:	b2c0      	uxtb	r0, r0
    559e:	4b43      	ldr	r3, [pc, #268]	; (56ac <spi_init+0x32c>)
    55a0:	4798      	blx	r3
    55a2:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    55a4:	2f04      	cmp	r7, #4
    55a6:	d007      	beq.n	55b8 <spi_init+0x238>
    55a8:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    55aa:	00bb      	lsls	r3, r7, #2
    55ac:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    55ae:	2800      	cmp	r0, #0
    55b0:	d0ed      	beq.n	558e <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    55b2:	1c43      	adds	r3, r0, #1
    55b4:	d1ef      	bne.n	5596 <spi_init+0x216>
    55b6:	e7f4      	b.n	55a2 <spi_init+0x222>
	module->mode             = config->mode;
    55b8:	7823      	ldrb	r3, [r4, #0]
    55ba:	464a      	mov	r2, r9
    55bc:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    55be:	7c23      	ldrb	r3, [r4, #16]
    55c0:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    55c2:	7ca3      	ldrb	r3, [r4, #18]
    55c4:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    55c6:	7d23      	ldrb	r3, [r4, #20]
    55c8:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    55ca:	2200      	movs	r2, #0
    55cc:	ab02      	add	r3, sp, #8
    55ce:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    55d0:	7823      	ldrb	r3, [r4, #0]
    55d2:	2b01      	cmp	r3, #1
    55d4:	d012      	beq.n	55fc <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    55d6:	7823      	ldrb	r3, [r4, #0]
    55d8:	2b00      	cmp	r3, #0
    55da:	d127      	bne.n	562c <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    55dc:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    55de:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    55e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    55e2:	7fe1      	ldrb	r1, [r4, #31]
    55e4:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    55e6:	7fa5      	ldrb	r5, [r4, #30]
    55e8:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    55ea:	4319      	orrs	r1, r3
    55ec:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    55ee:	2320      	movs	r3, #32
    55f0:	5ce3      	ldrb	r3, [r4, r3]
    55f2:	2b00      	cmp	r3, #0
    55f4:	d01c      	beq.n	5630 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    55f6:	2340      	movs	r3, #64	; 0x40
    55f8:	431a      	orrs	r2, r3
    55fa:	e019      	b.n	5630 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    55fc:	464b      	mov	r3, r9
    55fe:	6818      	ldr	r0, [r3, #0]
    5600:	4b25      	ldr	r3, [pc, #148]	; (5698 <spi_init+0x318>)
    5602:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5604:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5606:	b2c0      	uxtb	r0, r0
    5608:	4b21      	ldr	r3, [pc, #132]	; (5690 <spi_init+0x310>)
    560a:	4798      	blx	r3
    560c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    560e:	ab02      	add	r3, sp, #8
    5610:	1d9a      	adds	r2, r3, #6
    5612:	69a0      	ldr	r0, [r4, #24]
    5614:	4b1f      	ldr	r3, [pc, #124]	; (5694 <spi_init+0x314>)
    5616:	4798      	blx	r3
    5618:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    561a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    561c:	2b00      	cmp	r3, #0
    561e:	d000      	beq.n	5622 <spi_init+0x2a2>
    5620:	e6c0      	b.n	53a4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    5622:	ab02      	add	r3, sp, #8
    5624:	3306      	adds	r3, #6
    5626:	781b      	ldrb	r3, [r3, #0]
    5628:	7333      	strb	r3, [r6, #12]
    562a:	e7d4      	b.n	55d6 <spi_init+0x256>
	uint32_t ctrlb = 0;
    562c:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    562e:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    5630:	6863      	ldr	r3, [r4, #4]
    5632:	68a1      	ldr	r1, [r4, #8]
    5634:	430b      	orrs	r3, r1
    5636:	68e1      	ldr	r1, [r4, #12]
    5638:	430b      	orrs	r3, r1
    563a:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    563c:	7c21      	ldrb	r1, [r4, #16]
    563e:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    5640:	7c61      	ldrb	r1, [r4, #17]
    5642:	2900      	cmp	r1, #0
    5644:	d103      	bne.n	564e <spi_init+0x2ce>
    5646:	491a      	ldr	r1, [pc, #104]	; (56b0 <spi_init+0x330>)
    5648:	7889      	ldrb	r1, [r1, #2]
    564a:	0789      	lsls	r1, r1, #30
    564c:	d501      	bpl.n	5652 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    564e:	2180      	movs	r1, #128	; 0x80
    5650:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    5652:	7ca1      	ldrb	r1, [r4, #18]
    5654:	2900      	cmp	r1, #0
    5656:	d002      	beq.n	565e <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    5658:	2180      	movs	r1, #128	; 0x80
    565a:	0289      	lsls	r1, r1, #10
    565c:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    565e:	7ce1      	ldrb	r1, [r4, #19]
    5660:	2900      	cmp	r1, #0
    5662:	d002      	beq.n	566a <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    5664:	2180      	movs	r1, #128	; 0x80
    5666:	0089      	lsls	r1, r1, #2
    5668:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    566a:	7d21      	ldrb	r1, [r4, #20]
    566c:	2900      	cmp	r1, #0
    566e:	d002      	beq.n	5676 <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5670:	2180      	movs	r1, #128	; 0x80
    5672:	0189      	lsls	r1, r1, #6
    5674:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    5676:	6831      	ldr	r1, [r6, #0]
    5678:	430b      	orrs	r3, r1
    567a:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    567c:	6873      	ldr	r3, [r6, #4]
    567e:	431a      	orrs	r2, r3
    5680:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    5682:	2000      	movs	r0, #0
    5684:	e68e      	b.n	53a4 <spi_init+0x24>
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	0000514d 	.word	0x0000514d
    568c:	41004400 	.word	0x41004400
    5690:	00006801 	.word	0x00006801
    5694:	00005043 	.word	0x00005043
    5698:	000052c5 	.word	0x000052c5
    569c:	40000400 	.word	0x40000400
    56a0:	000067e5 	.word	0x000067e5
    56a4:	00006759 	.word	0x00006759
    56a8:	00005101 	.word	0x00005101
    56ac:	000068dd 	.word	0x000068dd
    56b0:	41002000 	.word	0x41002000

000056b4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    56b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56b6:	46d6      	mov	lr, sl
    56b8:	464f      	mov	r7, r9
    56ba:	4646      	mov	r6, r8
    56bc:	b5c0      	push	{r6, r7, lr}
    56be:	b082      	sub	sp, #8
    56c0:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    56c2:	2717      	movs	r7, #23
	if (length == 0) {
    56c4:	2a00      	cmp	r2, #0
    56c6:	d073      	beq.n	57b0 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    56c8:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    56ca:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    56cc:	2900      	cmp	r1, #0
    56ce:	d06f      	beq.n	57b0 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    56d0:	7941      	ldrb	r1, [r0, #5]
    56d2:	2900      	cmp	r1, #0
    56d4:	d103      	bne.n	56de <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    56d6:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    56d8:	7e0c      	ldrb	r4, [r1, #24]
    56da:	07a4      	lsls	r4, r4, #30
    56dc:	d40b      	bmi.n	56f6 <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    56de:	3a01      	subs	r2, #1
    56e0:	b294      	uxth	r4, r2
    56e2:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    56e4:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    56e6:	2102      	movs	r1, #2
    56e8:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    56ea:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    56ec:	05db      	lsls	r3, r3, #23
    56ee:	0ddb      	lsrs	r3, r3, #23
    56f0:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    56f2:	46c4      	mov	ip, r8
    56f4:	e037      	b.n	5766 <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    56f6:	2402      	movs	r4, #2
    56f8:	760c      	strb	r4, [r1, #24]
    56fa:	e7f0      	b.n	56de <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    56fc:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    56fe:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    5700:	4233      	tst	r3, r6
    5702:	d0fc      	beq.n	56fe <spi_read_buffer_wait+0x4a>
    5704:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    5706:	4233      	tst	r3, r6
    5708:	d009      	beq.n	571e <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    570a:	4653      	mov	r3, sl
    570c:	628b      	str	r3, [r1, #40]	; 0x28
    570e:	e02d      	b.n	576c <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5710:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    5712:	4649      	mov	r1, r9
    5714:	420b      	tst	r3, r1
    5716:	d138      	bne.n	578a <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5718:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    571a:	4213      	tst	r3, r2
    571c:	d045      	beq.n	57aa <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    571e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5720:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    5722:	4213      	tst	r3, r2
    5724:	d0fc      	beq.n	5720 <spi_read_buffer_wait+0x6c>
    5726:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5728:	4213      	tst	r3, r2
    572a:	d040      	beq.n	57ae <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    572c:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    572e:	2700      	movs	r7, #0
    5730:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5732:	4213      	tst	r3, r2
    5734:	d002      	beq.n	573c <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5736:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    5738:	231e      	movs	r3, #30
    573a:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    573c:	7983      	ldrb	r3, [r0, #6]
    573e:	2b01      	cmp	r3, #1
    5740:	d027      	beq.n	5792 <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5742:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5744:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    5746:	9901      	ldr	r1, [sp, #4]
    5748:	2900      	cmp	r1, #0
    574a:	d138      	bne.n	57be <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    574c:	1c6f      	adds	r7, r5, #1
    574e:	b2bf      	uxth	r7, r7
    5750:	4661      	mov	r1, ip
    5752:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5754:	7981      	ldrb	r1, [r0, #6]
    5756:	2901      	cmp	r1, #1
    5758:	d01f      	beq.n	579a <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    575a:	003d      	movs	r5, r7
	while (length--) {
    575c:	3c01      	subs	r4, #1
    575e:	b2a4      	uxth	r4, r4
    5760:	4918      	ldr	r1, [pc, #96]	; (57c4 <spi_read_buffer_wait+0x110>)
    5762:	428c      	cmp	r4, r1
    5764:	d01f      	beq.n	57a6 <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    5766:	7943      	ldrb	r3, [r0, #5]
    5768:	2b01      	cmp	r3, #1
    576a:	d0c7      	beq.n	56fc <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    576c:	7943      	ldrb	r3, [r0, #5]
    576e:	2b00      	cmp	r3, #0
    5770:	d1d5      	bne.n	571e <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5772:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5774:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    5776:	4213      	tst	r3, r2
    5778:	d1ca      	bne.n	5710 <spi_read_buffer_wait+0x5c>
    577a:	4b13      	ldr	r3, [pc, #76]	; (57c8 <spi_read_buffer_wait+0x114>)
    577c:	7e39      	ldrb	r1, [r7, #24]
    577e:	4211      	tst	r1, r2
    5780:	d1c6      	bne.n	5710 <spi_read_buffer_wait+0x5c>
    5782:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5784:	2b00      	cmp	r3, #0
    5786:	d1f9      	bne.n	577c <spi_read_buffer_wait+0xc8>
    5788:	e7c2      	b.n	5710 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    578a:	2302      	movs	r3, #2
    578c:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    578e:	2704      	movs	r7, #4
    5790:	e00e      	b.n	57b0 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5792:	6a89      	ldr	r1, [r1, #40]	; 0x28
    5794:	05c9      	lsls	r1, r1, #23
    5796:	0dcb      	lsrs	r3, r1, #23
    5798:	e7d5      	b.n	5746 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    579a:	3502      	adds	r5, #2
    579c:	b2ad      	uxth	r5, r5
    579e:	0a19      	lsrs	r1, r3, #8
    57a0:	4663      	mov	r3, ip
    57a2:	55d9      	strb	r1, [r3, r7]
    57a4:	e7da      	b.n	575c <spi_read_buffer_wait+0xa8>
    57a6:	9f01      	ldr	r7, [sp, #4]
    57a8:	e002      	b.n	57b0 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    57aa:	2712      	movs	r7, #18
    57ac:	e000      	b.n	57b0 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    57ae:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    57b0:	0038      	movs	r0, r7
    57b2:	b002      	add	sp, #8
    57b4:	bc1c      	pop	{r2, r3, r4}
    57b6:	4690      	mov	r8, r2
    57b8:	4699      	mov	r9, r3
    57ba:	46a2      	mov	sl, r4
    57bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57be:	9f01      	ldr	r7, [sp, #4]
    57c0:	e7f6      	b.n	57b0 <spi_read_buffer_wait+0xfc>
    57c2:	46c0      	nop			; (mov r8, r8)
    57c4:	0000ffff 	.word	0x0000ffff
    57c8:	00002710 	.word	0x00002710

000057cc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    57cc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    57ce:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    57d0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    57d2:	2c01      	cmp	r4, #1
    57d4:	d001      	beq.n	57da <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    57d6:	0018      	movs	r0, r3
    57d8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    57da:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    57dc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    57de:	2c00      	cmp	r4, #0
    57e0:	d1f9      	bne.n	57d6 <spi_select_slave+0xa>
		if (select) {
    57e2:	2a00      	cmp	r2, #0
    57e4:	d058      	beq.n	5898 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    57e6:	784b      	ldrb	r3, [r1, #1]
    57e8:	2b00      	cmp	r3, #0
    57ea:	d044      	beq.n	5876 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    57ec:	6803      	ldr	r3, [r0, #0]
    57ee:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    57f0:	07db      	lsls	r3, r3, #31
    57f2:	d410      	bmi.n	5816 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    57f4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    57f6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    57f8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    57fa:	2900      	cmp	r1, #0
    57fc:	d104      	bne.n	5808 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    57fe:	0953      	lsrs	r3, r2, #5
    5800:	01db      	lsls	r3, r3, #7
    5802:	492e      	ldr	r1, [pc, #184]	; (58bc <spi_select_slave+0xf0>)
    5804:	468c      	mov	ip, r1
    5806:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5808:	211f      	movs	r1, #31
    580a:	4011      	ands	r1, r2
    580c:	2201      	movs	r2, #1
    580e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5810:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    5812:	2305      	movs	r3, #5
    5814:	e7df      	b.n	57d6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5816:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5818:	09d4      	lsrs	r4, r2, #7
		return NULL;
    581a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    581c:	2c00      	cmp	r4, #0
    581e:	d104      	bne.n	582a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    5820:	0953      	lsrs	r3, r2, #5
    5822:	01db      	lsls	r3, r3, #7
    5824:	4c25      	ldr	r4, [pc, #148]	; (58bc <spi_select_slave+0xf0>)
    5826:	46a4      	mov	ip, r4
    5828:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    582a:	241f      	movs	r4, #31
    582c:	4014      	ands	r4, r2
    582e:	2201      	movs	r2, #1
    5830:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5832:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5834:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5836:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5838:	07d2      	lsls	r2, r2, #31
    583a:	d501      	bpl.n	5840 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    583c:	788a      	ldrb	r2, [r1, #2]
    583e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5840:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5842:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5844:	2a00      	cmp	r2, #0
    5846:	d1c6      	bne.n	57d6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5848:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    584a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    584c:	7e13      	ldrb	r3, [r2, #24]
    584e:	420b      	tst	r3, r1
    5850:	d0fc      	beq.n	584c <spi_select_slave+0x80>
    5852:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5854:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    5856:	0749      	lsls	r1, r1, #29
    5858:	d5bd      	bpl.n	57d6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    585a:	8b53      	ldrh	r3, [r2, #26]
    585c:	075b      	lsls	r3, r3, #29
    585e:	d501      	bpl.n	5864 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5860:	2304      	movs	r3, #4
    5862:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5864:	7983      	ldrb	r3, [r0, #6]
    5866:	2b01      	cmp	r3, #1
    5868:	d002      	beq.n	5870 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    586a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    586c:	2300      	movs	r3, #0
    586e:	e7b2      	b.n	57d6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5870:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5872:	2300      	movs	r3, #0
    5874:	e7af      	b.n	57d6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5876:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5878:	09d1      	lsrs	r1, r2, #7
		return NULL;
    587a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    587c:	2900      	cmp	r1, #0
    587e:	d104      	bne.n	588a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5880:	0953      	lsrs	r3, r2, #5
    5882:	01db      	lsls	r3, r3, #7
    5884:	490d      	ldr	r1, [pc, #52]	; (58bc <spi_select_slave+0xf0>)
    5886:	468c      	mov	ip, r1
    5888:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    588a:	211f      	movs	r1, #31
    588c:	4011      	ands	r1, r2
    588e:	2201      	movs	r2, #1
    5890:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5892:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5894:	2300      	movs	r3, #0
    5896:	e79e      	b.n	57d6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5898:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    589a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    589c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    589e:	2900      	cmp	r1, #0
    58a0:	d104      	bne.n	58ac <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    58a2:	0953      	lsrs	r3, r2, #5
    58a4:	01db      	lsls	r3, r3, #7
    58a6:	4905      	ldr	r1, [pc, #20]	; (58bc <spi_select_slave+0xf0>)
    58a8:	468c      	mov	ip, r1
    58aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    58ac:	211f      	movs	r1, #31
    58ae:	4011      	ands	r1, r2
    58b0:	2201      	movs	r2, #1
    58b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    58b4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    58b6:	2300      	movs	r3, #0
    58b8:	e78d      	b.n	57d6 <spi_select_slave+0xa>
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	41004400 	.word	0x41004400

000058c0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    58c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58c2:	46de      	mov	lr, fp
    58c4:	4657      	mov	r7, sl
    58c6:	464e      	mov	r6, r9
    58c8:	4645      	mov	r5, r8
    58ca:	b5e0      	push	{r5, r6, r7, lr}
    58cc:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    58ce:	2317      	movs	r3, #23
	if (length == 0) {
    58d0:	2a00      	cmp	r2, #0
    58d2:	d107      	bne.n	58e4 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    58d4:	0018      	movs	r0, r3
    58d6:	b003      	add	sp, #12
    58d8:	bc3c      	pop	{r2, r3, r4, r5}
    58da:	4690      	mov	r8, r2
    58dc:	4699      	mov	r9, r3
    58de:	46a2      	mov	sl, r4
    58e0:	46ab      	mov	fp, r5
    58e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    58e4:	7943      	ldrb	r3, [r0, #5]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d103      	bne.n	58f2 <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    58ea:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    58ec:	7e1c      	ldrb	r4, [r3, #24]
    58ee:	07a4      	lsls	r4, r4, #30
    58f0:	d40a      	bmi.n	5908 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    58f2:	4693      	mov	fp, r2
    58f4:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    58f6:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    58f8:	2502      	movs	r5, #2
    58fa:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    58fc:	3502      	adds	r5, #2
    58fe:	46a8      	mov	r8, r5
    5900:	3a01      	subs	r2, #1
    5902:	b292      	uxth	r2, r2
    5904:	468a      	mov	sl, r1
    5906:	e023      	b.n	5950 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5908:	2402      	movs	r4, #2
    590a:	761c      	strb	r4, [r3, #24]
    590c:	e7f1      	b.n	58f2 <spi_write_buffer_wait+0x32>
    590e:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    5910:	4661      	mov	r1, ip
    5912:	420d      	tst	r5, r1
    5914:	d12e      	bne.n	5974 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5916:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5918:	421d      	tst	r5, r3
    591a:	d100      	bne.n	591e <spi_write_buffer_wait+0x5e>
    591c:	e0c2      	b.n	5aa4 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    591e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5920:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    5922:	421d      	tst	r5, r3
    5924:	d0fc      	beq.n	5920 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5926:	1c67      	adds	r7, r4, #1
    5928:	b2bf      	uxth	r7, r7
    592a:	4651      	mov	r1, sl
    592c:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    592e:	7981      	ldrb	r1, [r0, #6]
    5930:	2901      	cmp	r1, #1
    5932:	d023      	beq.n	597c <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5934:	b2ad      	uxth	r5, r5
    5936:	003c      	movs	r4, r7
    5938:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    593a:	421f      	tst	r7, r3
    593c:	d002      	beq.n	5944 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    593e:	05ed      	lsls	r5, r5, #23
    5940:	0ded      	lsrs	r5, r5, #23
    5942:	62b5      	str	r5, [r6, #40]	; 0x28
    5944:	1e55      	subs	r5, r2, #1
    5946:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5948:	79c6      	ldrb	r6, [r0, #7]
    594a:	2e00      	cmp	r6, #0
    594c:	d11d      	bne.n	598a <spi_write_buffer_wait+0xca>
    594e:	002a      	movs	r2, r5
	while (length--) {
    5950:	4d59      	ldr	r5, [pc, #356]	; (5ab8 <spi_write_buffer_wait+0x1f8>)
    5952:	42aa      	cmp	r2, r5
    5954:	d070      	beq.n	5a38 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    5956:	7945      	ldrb	r5, [r0, #5]
    5958:	2d00      	cmp	r5, #0
    595a:	d1e0      	bne.n	591e <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    595c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    595e:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    5960:	421d      	tst	r5, r3
    5962:	d1d4      	bne.n	590e <spi_write_buffer_wait+0x4e>
    5964:	4d55      	ldr	r5, [pc, #340]	; (5abc <spi_write_buffer_wait+0x1fc>)
    5966:	7e37      	ldrb	r7, [r6, #24]
    5968:	421f      	tst	r7, r3
    596a:	d1d0      	bne.n	590e <spi_write_buffer_wait+0x4e>
    596c:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    596e:	2d00      	cmp	r5, #0
    5970:	d1f9      	bne.n	5966 <spi_write_buffer_wait+0xa6>
    5972:	e7cc      	b.n	590e <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5974:	2302      	movs	r3, #2
    5976:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    5978:	3302      	adds	r3, #2
    597a:	e7ab      	b.n	58d4 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    597c:	3402      	adds	r4, #2
    597e:	b2a4      	uxth	r4, r4
    5980:	4651      	mov	r1, sl
    5982:	5dcf      	ldrb	r7, [r1, r7]
    5984:	023f      	lsls	r7, r7, #8
    5986:	433d      	orrs	r5, r7
    5988:	e7d6      	b.n	5938 <spi_write_buffer_wait+0x78>
    598a:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    598c:	7945      	ldrb	r5, [r0, #5]
    598e:	2d00      	cmp	r5, #0
    5990:	d137      	bne.n	5a02 <spi_write_buffer_wait+0x142>
    5992:	4d4b      	ldr	r5, [pc, #300]	; (5ac0 <spi_write_buffer_wait+0x200>)
    5994:	9101      	str	r1, [sp, #4]
    5996:	e012      	b.n	59be <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    5998:	3402      	adds	r4, #2
    599a:	b2a4      	uxth	r4, r4
    599c:	4649      	mov	r1, r9
    599e:	9f01      	ldr	r7, [sp, #4]
    59a0:	5c79      	ldrb	r1, [r7, r1]
    59a2:	0209      	lsls	r1, r1, #8
    59a4:	9f00      	ldr	r7, [sp, #0]
    59a6:	430f      	orrs	r7, r1
    59a8:	e01b      	b.n	59e2 <spi_write_buffer_wait+0x122>
						length--;
    59aa:	3a01      	subs	r2, #1
    59ac:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    59ae:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    59b0:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    59b2:	4641      	mov	r1, r8
    59b4:	420f      	tst	r7, r1
    59b6:	d11b      	bne.n	59f0 <spi_write_buffer_wait+0x130>
    59b8:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    59ba:	2d00      	cmp	r5, #0
    59bc:	d018      	beq.n	59f0 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    59be:	2a00      	cmp	r2, #0
    59c0:	d0f5      	beq.n	59ae <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    59c2:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    59c4:	7e37      	ldrb	r7, [r6, #24]
    59c6:	421f      	tst	r7, r3
    59c8:	d0f1      	beq.n	59ae <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    59ca:	1c67      	adds	r7, r4, #1
    59cc:	b2b9      	uxth	r1, r7
    59ce:	4689      	mov	r9, r1
    59d0:	9901      	ldr	r1, [sp, #4]
    59d2:	5d09      	ldrb	r1, [r1, r4]
    59d4:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    59d6:	7981      	ldrb	r1, [r0, #6]
    59d8:	2901      	cmp	r1, #1
    59da:	d0dd      	beq.n	5998 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    59dc:	4669      	mov	r1, sp
    59de:	880f      	ldrh	r7, [r1, #0]
    59e0:	464c      	mov	r4, r9
    59e2:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    59e4:	4219      	tst	r1, r3
    59e6:	d0e0      	beq.n	59aa <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    59e8:	05ff      	lsls	r7, r7, #23
    59ea:	0dff      	lsrs	r7, r7, #23
    59ec:	62b7      	str	r7, [r6, #40]	; 0x28
    59ee:	e7dc      	b.n	59aa <spi_write_buffer_wait+0xea>
    59f0:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    59f2:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    59f4:	4667      	mov	r7, ip
    59f6:	423d      	tst	r5, r7
    59f8:	d118      	bne.n	5a2c <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    59fa:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    59fc:	4646      	mov	r6, r8
    59fe:	4235      	tst	r5, r6
    5a00:	d052      	beq.n	5aa8 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a02:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a04:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    5a06:	4647      	mov	r7, r8
    5a08:	423d      	tst	r5, r7
    5a0a:	d0fb      	beq.n	5a04 <spi_write_buffer_wait+0x144>
    5a0c:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    5a0e:	423d      	tst	r5, r7
    5a10:	d007      	beq.n	5a22 <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a12:	8b75      	ldrh	r5, [r6, #26]
    5a14:	423d      	tst	r5, r7
    5a16:	d000      	beq.n	5a1a <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5a18:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a1a:	7985      	ldrb	r5, [r0, #6]
    5a1c:	2d01      	cmp	r5, #1
    5a1e:	d009      	beq.n	5a34 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5a20:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    5a22:	465d      	mov	r5, fp
    5a24:	3d01      	subs	r5, #1
    5a26:	b2ad      	uxth	r5, r5
    5a28:	46ab      	mov	fp, r5
    5a2a:	e769      	b.n	5900 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5a2c:	2302      	movs	r3, #2
    5a2e:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    5a30:	3302      	adds	r3, #2
    5a32:	e74f      	b.n	58d4 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5a34:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    5a36:	e7f4      	b.n	5a22 <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    5a38:	7943      	ldrb	r3, [r0, #5]
    5a3a:	2b01      	cmp	r3, #1
    5a3c:	d00b      	beq.n	5a56 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d134      	bne.n	5aac <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    5a42:	79c2      	ldrb	r2, [r0, #7]
    5a44:	2a00      	cmp	r2, #0
    5a46:	d100      	bne.n	5a4a <spi_write_buffer_wait+0x18a>
    5a48:	e744      	b.n	58d4 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    5a4a:	2404      	movs	r4, #4
			while (flush_length) {
    5a4c:	465b      	mov	r3, fp
    5a4e:	465d      	mov	r5, fp
    5a50:	2b00      	cmp	r3, #0
    5a52:	d119      	bne.n	5a88 <spi_write_buffer_wait+0x1c8>
    5a54:	e73e      	b.n	58d4 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a56:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5a58:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5a5a:	7e0b      	ldrb	r3, [r1, #24]
    5a5c:	4213      	tst	r3, r2
    5a5e:	d0fc      	beq.n	5a5a <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    5a60:	2300      	movs	r3, #0
    5a62:	e737      	b.n	58d4 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a64:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    5a66:	4223      	tst	r3, r4
    5a68:	d022      	beq.n	5ab0 <spi_write_buffer_wait+0x1f0>
    5a6a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5a6c:	4223      	tst	r3, r4
    5a6e:	d007      	beq.n	5a80 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5a70:	8b4b      	ldrh	r3, [r1, #26]
    5a72:	4223      	tst	r3, r4
    5a74:	d000      	beq.n	5a78 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5a76:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5a78:	7983      	ldrb	r3, [r0, #6]
    5a7a:	2b01      	cmp	r3, #1
    5a7c:	d010      	beq.n	5aa0 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5a7e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    5a80:	3d01      	subs	r5, #1
    5a82:	b2ad      	uxth	r5, r5
			while (flush_length) {
    5a84:	2d00      	cmp	r5, #0
    5a86:	d015      	beq.n	5ab4 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5a88:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5a8a:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    5a8c:	4223      	tst	r3, r4
    5a8e:	d1e9      	bne.n	5a64 <spi_write_buffer_wait+0x1a4>
    5a90:	4b0a      	ldr	r3, [pc, #40]	; (5abc <spi_write_buffer_wait+0x1fc>)
    5a92:	7e0a      	ldrb	r2, [r1, #24]
    5a94:	4222      	tst	r2, r4
    5a96:	d1e5      	bne.n	5a64 <spi_write_buffer_wait+0x1a4>
    5a98:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d1f9      	bne.n	5a92 <spi_write_buffer_wait+0x1d2>
    5a9e:	e7e1      	b.n	5a64 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5aa0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5aa2:	e7ed      	b.n	5a80 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    5aa4:	2312      	movs	r3, #18
    5aa6:	e715      	b.n	58d4 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5aa8:	2312      	movs	r3, #18
    5aaa:	e713      	b.n	58d4 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5aac:	2300      	movs	r3, #0
    5aae:	e711      	b.n	58d4 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    5ab0:	2312      	movs	r3, #18
    5ab2:	e70f      	b.n	58d4 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5ab4:	2300      	movs	r3, #0
    5ab6:	e70d      	b.n	58d4 <spi_write_buffer_wait+0x14>
    5ab8:	0000ffff 	.word	0x0000ffff
    5abc:	00002710 	.word	0x00002710
    5ac0:	00002711 	.word	0x00002711

00005ac4 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    5ac4:	4770      	bx	lr
	...

00005ac8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    5ac8:	b510      	push	{r4, lr}
    5aca:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    5acc:	4b0f      	ldr	r3, [pc, #60]	; (5b0c <sd_mmc_test_unit_ready+0x44>)
    5ace:	4798      	blx	r3
    5ad0:	2801      	cmp	r0, #1
    5ad2:	d019      	beq.n	5b08 <sd_mmc_test_unit_ready+0x40>
    5ad4:	2800      	cmp	r0, #0
    5ad6:	d003      	beq.n	5ae0 <sd_mmc_test_unit_ready+0x18>
    5ad8:	2802      	cmp	r0, #2
    5ada:	d010      	beq.n	5afe <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    5adc:	2001      	movs	r0, #1
	}
}
    5ade:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    5ae0:	4b0b      	ldr	r3, [pc, #44]	; (5b10 <sd_mmc_test_unit_ready+0x48>)
    5ae2:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    5ae4:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	d1f9      	bne.n	5ade <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    5aea:	0020      	movs	r0, r4
    5aec:	4b09      	ldr	r3, [pc, #36]	; (5b14 <sd_mmc_test_unit_ready+0x4c>)
    5aee:	4798      	blx	r3
    5af0:	0003      	movs	r3, r0
    5af2:	2003      	movs	r0, #3
    5af4:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    5af6:	4243      	negs	r3, r0
    5af8:	4158      	adcs	r0, r3
    5afa:	0040      	lsls	r0, r0, #1
    5afc:	e7ef      	b.n	5ade <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    5afe:	2200      	movs	r2, #0
    5b00:	4b03      	ldr	r3, [pc, #12]	; (5b10 <sd_mmc_test_unit_ready+0x48>)
    5b02:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    5b04:	2002      	movs	r0, #2
    5b06:	e7ea      	b.n	5ade <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    5b08:	2003      	movs	r0, #3
    5b0a:	e7e8      	b.n	5ade <sd_mmc_test_unit_ready+0x16>
    5b0c:	00000b41 	.word	0x00000b41
    5b10:	200002ac 	.word	0x200002ac
    5b14:	00000ff1 	.word	0x00000ff1

00005b18 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    5b18:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    5b1a:	2000      	movs	r0, #0
    5b1c:	4b01      	ldr	r3, [pc, #4]	; (5b24 <sd_mmc_test_unit_ready_0+0xc>)
    5b1e:	4798      	blx	r3
}
    5b20:	bd10      	pop	{r4, pc}
    5b22:	46c0      	nop			; (mov r8, r8)
    5b24:	00005ac9 	.word	0x00005ac9

00005b28 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    5b28:	b570      	push	{r4, r5, r6, lr}
    5b2a:	0004      	movs	r4, r0
    5b2c:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    5b2e:	4b04      	ldr	r3, [pc, #16]	; (5b40 <sd_mmc_read_capacity+0x18>)
    5b30:	4798      	blx	r3
    5b32:	0040      	lsls	r0, r0, #1
    5b34:	3801      	subs	r0, #1
    5b36:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    5b38:	0020      	movs	r0, r4
    5b3a:	4b02      	ldr	r3, [pc, #8]	; (5b44 <sd_mmc_read_capacity+0x1c>)
    5b3c:	4798      	blx	r3
}
    5b3e:	bd70      	pop	{r4, r5, r6, pc}
    5b40:	00001019 	.word	0x00001019
    5b44:	00005ac9 	.word	0x00005ac9

00005b48 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    5b48:	b510      	push	{r4, lr}
    5b4a:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    5b4c:	2000      	movs	r0, #0
    5b4e:	4b01      	ldr	r3, [pc, #4]	; (5b54 <sd_mmc_read_capacity_0+0xc>)
    5b50:	4798      	blx	r3
}
    5b52:	bd10      	pop	{r4, pc}
    5b54:	00005b29 	.word	0x00005b29

00005b58 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    5b58:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    5b5a:	2000      	movs	r0, #0
    5b5c:	4b01      	ldr	r3, [pc, #4]	; (5b64 <sd_mmc_wr_protect_0+0xc>)
    5b5e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    5b60:	bd10      	pop	{r4, pc}
    5b62:	46c0      	nop			; (mov r8, r8)
    5b64:	00001041 	.word	0x00001041

00005b68 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    5b68:	2001      	movs	r0, #1
    5b6a:	4770      	bx	lr

00005b6c <sd_mmc_usb_read_10>:

COMPILER_WORD_ALIGNED
uint8_t sector_buf_1[SD_MMC_BLOCK_SIZE];

Ctrl_status sd_mmc_usb_read_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b6e:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_read_blocks(slot, addr, nb_sector)) {
    5b70:	4b24      	ldr	r3, [pc, #144]	; (5c04 <sd_mmc_usb_read_10+0x98>)
    5b72:	4798      	blx	r3
    5b74:	2800      	cmp	r0, #0
    5b76:	d004      	beq.n	5b82 <sd_mmc_usb_read_10+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5b78:	3802      	subs	r0, #2
    5b7a:	4243      	negs	r3, r0
    5b7c:	4158      	adcs	r0, r3
    5b7e:	3001      	adds	r0, #1
			}
		}
		b_first_step = false;
	}
	return CTRL_GOOD;
}
    5b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nb_step = nb_sector + 1;
    5b82:	3401      	adds	r4, #1
    5b84:	b2a2      	uxth	r2, r4
	bool b_first_step = true;
    5b86:	2701      	movs	r7, #1
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5b88:	4e1f      	ldr	r6, [pc, #124]	; (5c08 <sd_mmc_usb_read_10+0x9c>)
	while (nb_step--) {
    5b8a:	e008      	b.n	5b9e <sd_mmc_usb_read_10+0x32>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5b8c:	481f      	ldr	r0, [pc, #124]	; (5c0c <sd_mmc_usb_read_10+0xa0>)
    5b8e:	e010      	b.n	5bb2 <sd_mmc_usb_read_10+0x46>
			if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    5b90:	2000      	movs	r0, #0
    5b92:	4b1f      	ldr	r3, [pc, #124]	; (5c10 <sd_mmc_usb_read_10+0xa4>)
    5b94:	4798      	blx	r3
    5b96:	2800      	cmp	r0, #0
    5b98:	d126      	bne.n	5be8 <sd_mmc_usb_read_10+0x7c>
    5b9a:	2700      	movs	r7, #0
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5b9c:	0022      	movs	r2, r4
	while (nb_step--) {
    5b9e:	1e54      	subs	r4, r2, #1
    5ba0:	b2a4      	uxth	r4, r4
    5ba2:	2a00      	cmp	r2, #0
    5ba4:	d01c      	beq.n	5be0 <sd_mmc_usb_read_10+0x74>
		if (nb_step) { // Skip last step
    5ba6:	2c00      	cmp	r4, #0
    5ba8:	d020      	beq.n	5bec <sd_mmc_usb_read_10+0x80>
			if (SD_MMC_OK != sd_mmc_start_read_blocks(((nb_step % 2) == 0) ?
    5baa:	2501      	movs	r5, #1
    5bac:	4025      	ands	r5, r4
    5bae:	d0ed      	beq.n	5b8c <sd_mmc_usb_read_10+0x20>
    5bb0:	4818      	ldr	r0, [pc, #96]	; (5c14 <sd_mmc_usb_read_10+0xa8>)
    5bb2:	2101      	movs	r1, #1
    5bb4:	47b0      	blx	r6
    5bb6:	2800      	cmp	r0, #0
    5bb8:	d114      	bne.n	5be4 <sd_mmc_usb_read_10+0x78>
		if (!b_first_step) { // Skip first step
    5bba:	2f00      	cmp	r7, #0
    5bbc:	d1e8      	bne.n	5b90 <sd_mmc_usb_read_10+0x24>
			if (!udi_msc_trans_block(true,
    5bbe:	4915      	ldr	r1, [pc, #84]	; (5c14 <sd_mmc_usb_read_10+0xa8>)
    5bc0:	2d00      	cmp	r5, #0
    5bc2:	d000      	beq.n	5bc6 <sd_mmc_usb_read_10+0x5a>
    5bc4:	4911      	ldr	r1, [pc, #68]	; (5c0c <sd_mmc_usb_read_10+0xa0>)
    5bc6:	2300      	movs	r3, #0
    5bc8:	2280      	movs	r2, #128	; 0x80
    5bca:	0092      	lsls	r2, r2, #2
    5bcc:	2001      	movs	r0, #1
    5bce:	4d12      	ldr	r5, [pc, #72]	; (5c18 <sd_mmc_usb_read_10+0xac>)
    5bd0:	47a8      	blx	r5
    5bd2:	2800      	cmp	r0, #0
    5bd4:	d1dc      	bne.n	5b90 <sd_mmc_usb_read_10+0x24>
					sd_mmc_wait_end_of_read_blocks(true);
    5bd6:	2001      	movs	r0, #1
    5bd8:	4b0d      	ldr	r3, [pc, #52]	; (5c10 <sd_mmc_usb_read_10+0xa4>)
    5bda:	4798      	blx	r3
				return CTRL_FAIL;
    5bdc:	2001      	movs	r0, #1
    5bde:	e7cf      	b.n	5b80 <sd_mmc_usb_read_10+0x14>
	return CTRL_GOOD;
    5be0:	2000      	movs	r0, #0
    5be2:	e7cd      	b.n	5b80 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5be4:	2001      	movs	r0, #1
    5be6:	e7cb      	b.n	5b80 <sd_mmc_usb_read_10+0x14>
				return CTRL_FAIL;
    5be8:	2001      	movs	r0, #1
    5bea:	e7c9      	b.n	5b80 <sd_mmc_usb_read_10+0x14>
		if (!b_first_step) { // Skip first step
    5bec:	2f00      	cmp	r7, #0
    5bee:	d1d4      	bne.n	5b9a <sd_mmc_usb_read_10+0x2e>
			if (!udi_msc_trans_block(true,
    5bf0:	2300      	movs	r3, #0
    5bf2:	2280      	movs	r2, #128	; 0x80
    5bf4:	0092      	lsls	r2, r2, #2
    5bf6:	4907      	ldr	r1, [pc, #28]	; (5c14 <sd_mmc_usb_read_10+0xa8>)
    5bf8:	2001      	movs	r0, #1
    5bfa:	4d07      	ldr	r5, [pc, #28]	; (5c18 <sd_mmc_usb_read_10+0xac>)
    5bfc:	47a8      	blx	r5
    5bfe:	2800      	cmp	r0, #0
    5c00:	d1cb      	bne.n	5b9a <sd_mmc_usb_read_10+0x2e>
    5c02:	e7e8      	b.n	5bd6 <sd_mmc_usb_read_10+0x6a>
    5c04:	00001045 	.word	0x00001045
    5c08:	000010cd 	.word	0x000010cd
    5c0c:	20000924 	.word	0x20000924
    5c10:	000010f9 	.word	0x000010f9
    5c14:	20000724 	.word	0x20000724
    5c18:	00001a99 	.word	0x00001a99

00005c1c <sd_mmc_usb_read_10_0>:

Ctrl_status sd_mmc_usb_read_10_0(uint32_t addr, uint16_t nb_sector)
{
    5c1c:	b510      	push	{r4, lr}
    5c1e:	000a      	movs	r2, r1
	return sd_mmc_usb_read_10(0, addr, nb_sector);
    5c20:	0001      	movs	r1, r0
    5c22:	2000      	movs	r0, #0
    5c24:	4b01      	ldr	r3, [pc, #4]	; (5c2c <sd_mmc_usb_read_10_0+0x10>)
    5c26:	4798      	blx	r3
}
    5c28:	bd10      	pop	{r4, pc}
    5c2a:	46c0      	nop			; (mov r8, r8)
    5c2c:	00005b6d 	.word	0x00005b6d

00005c30 <sd_mmc_usb_write_10>:
{
	return sd_mmc_usb_read_10(1, addr, nb_sector);
}

Ctrl_status sd_mmc_usb_write_10(uint8_t slot, uint32_t addr, uint16_t nb_sector)
{
    5c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c32:	0014      	movs	r4, r2
	bool b_first_step = true;
	uint16_t nb_step;

	switch (sd_mmc_init_write_blocks(slot, addr, nb_sector)) {
    5c34:	4b20      	ldr	r3, [pc, #128]	; (5cb8 <sd_mmc_usb_write_10+0x88>)
    5c36:	4798      	blx	r3
    5c38:	2800      	cmp	r0, #0
    5c3a:	d00d      	beq.n	5c58 <sd_mmc_usb_write_10+0x28>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    5c3c:	3802      	subs	r0, #2
    5c3e:	4243      	negs	r3, r0
    5c40:	4158      	adcs	r0, r3
    5c42:	3001      	adds	r0, #1
		} else {
			b_first_step = false;
		}
	}
	return CTRL_GOOD;
}
    5c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    5c46:	481d      	ldr	r0, [pc, #116]	; (5cbc <sd_mmc_usb_write_10+0x8c>)
    5c48:	e01b      	b.n	5c82 <sd_mmc_usb_write_10+0x52>
				return CTRL_FAIL;
    5c4a:	3001      	adds	r0, #1
				if (!b_first_step) {
    5c4c:	2d00      	cmp	r5, #0
    5c4e:	d1f9      	bne.n	5c44 <sd_mmc_usb_write_10+0x14>
					sd_mmc_wait_end_of_write_blocks(true);
    5c50:	4b1b      	ldr	r3, [pc, #108]	; (5cc0 <sd_mmc_usb_write_10+0x90>)
    5c52:	4798      	blx	r3
				return CTRL_FAIL;
    5c54:	2001      	movs	r0, #1
    5c56:	e7f5      	b.n	5c44 <sd_mmc_usb_write_10+0x14>
	bool b_first_step = true;
    5c58:	2501      	movs	r5, #1
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5c5a:	4f19      	ldr	r7, [pc, #100]	; (5cc0 <sd_mmc_usb_write_10+0x90>)
			if (!udi_msc_trans_block(false,
    5c5c:	4e19      	ldr	r6, [pc, #100]	; (5cc4 <sd_mmc_usb_write_10+0x94>)
    5c5e:	e008      	b.n	5c72 <sd_mmc_usb_write_10+0x42>
	return CTRL_GOOD;
    5c60:	2000      	movs	r0, #0
    5c62:	e7ef      	b.n	5c44 <sd_mmc_usb_write_10+0x14>
				return CTRL_FAIL;
    5c64:	2001      	movs	r0, #1
    5c66:	e7ed      	b.n	5c44 <sd_mmc_usb_write_10+0x14>
		if (nb_step) { // Skip last step
    5c68:	2c00      	cmp	r4, #0
    5c6a:	d111      	bne.n	5c90 <sd_mmc_usb_write_10+0x60>
    5c6c:	3c01      	subs	r4, #1
    5c6e:	b2a4      	uxth	r4, r4
    5c70:	2500      	movs	r5, #0
	while (nb_step--) {
    5c72:	4b15      	ldr	r3, [pc, #84]	; (5cc8 <sd_mmc_usb_write_10+0x98>)
    5c74:	429c      	cmp	r4, r3
    5c76:	d0f3      	beq.n	5c60 <sd_mmc_usb_write_10+0x30>
		if (!b_first_step) { // Skip first step
    5c78:	2d00      	cmp	r5, #0
    5c7a:	d1f5      	bne.n	5c68 <sd_mmc_usb_write_10+0x38>
			if (SD_MMC_OK != sd_mmc_start_write_blocks(((nb_step % 2) == 0) ?
    5c7c:	07e3      	lsls	r3, r4, #31
    5c7e:	d5e2      	bpl.n	5c46 <sd_mmc_usb_write_10+0x16>
    5c80:	4812      	ldr	r0, [pc, #72]	; (5ccc <sd_mmc_usb_write_10+0x9c>)
    5c82:	2101      	movs	r1, #1
    5c84:	4b12      	ldr	r3, [pc, #72]	; (5cd0 <sd_mmc_usb_write_10+0xa0>)
    5c86:	4798      	blx	r3
    5c88:	2800      	cmp	r0, #0
    5c8a:	d1eb      	bne.n	5c64 <sd_mmc_usb_write_10+0x34>
		if (nb_step) { // Skip last step
    5c8c:	2c00      	cmp	r4, #0
    5c8e:	d00c      	beq.n	5caa <sd_mmc_usb_write_10+0x7a>
			if (!udi_msc_trans_block(false,
    5c90:	490e      	ldr	r1, [pc, #56]	; (5ccc <sd_mmc_usb_write_10+0x9c>)
    5c92:	07e3      	lsls	r3, r4, #31
    5c94:	d500      	bpl.n	5c98 <sd_mmc_usb_write_10+0x68>
    5c96:	4909      	ldr	r1, [pc, #36]	; (5cbc <sd_mmc_usb_write_10+0x8c>)
    5c98:	2300      	movs	r3, #0
    5c9a:	2280      	movs	r2, #128	; 0x80
    5c9c:	0092      	lsls	r2, r2, #2
    5c9e:	2000      	movs	r0, #0
    5ca0:	47b0      	blx	r6
    5ca2:	2800      	cmp	r0, #0
    5ca4:	d0d1      	beq.n	5c4a <sd_mmc_usb_write_10+0x1a>
		if (!b_first_step) { // Skip first step
    5ca6:	2d00      	cmp	r5, #0
    5ca8:	d1e0      	bne.n	5c6c <sd_mmc_usb_write_10+0x3c>
			if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5caa:	2000      	movs	r0, #0
    5cac:	47b8      	blx	r7
    5cae:	2800      	cmp	r0, #0
    5cb0:	d0dc      	beq.n	5c6c <sd_mmc_usb_write_10+0x3c>
				return CTRL_FAIL;
    5cb2:	2001      	movs	r0, #1
    5cb4:	e7c6      	b.n	5c44 <sd_mmc_usb_write_10+0x14>
    5cb6:	46c0      	nop			; (mov r8, r8)
    5cb8:	00001169 	.word	0x00001169
    5cbc:	20000924 	.word	0x20000924
    5cc0:	00001205 	.word	0x00001205
    5cc4:	00001a99 	.word	0x00001a99
    5cc8:	0000ffff 	.word	0x0000ffff
    5ccc:	20000724 	.word	0x20000724
    5cd0:	000011d9 	.word	0x000011d9

00005cd4 <sd_mmc_usb_write_10_0>:

Ctrl_status sd_mmc_usb_write_10_0(uint32_t addr, uint16_t nb_sector)
{
    5cd4:	b510      	push	{r4, lr}
    5cd6:	000a      	movs	r2, r1
	return sd_mmc_usb_write_10(0, addr, nb_sector);
    5cd8:	0001      	movs	r1, r0
    5cda:	2000      	movs	r0, #0
    5cdc:	4b01      	ldr	r3, [pc, #4]	; (5ce4 <sd_mmc_usb_write_10_0+0x10>)
    5cde:	4798      	blx	r3
}
    5ce0:	bd10      	pop	{r4, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	00005c31 	.word	0x00005c31

00005ce8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5ce8:	b500      	push	{lr}
    5cea:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    5cec:	466b      	mov	r3, sp
    5cee:	1dd9      	adds	r1, r3, #7
    5cf0:	23ff      	movs	r3, #255	; 0xff
    5cf2:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    5cf4:	2201      	movs	r2, #1
    5cf6:	480b      	ldr	r0, [pc, #44]	; (5d24 <sd_mmc_spi_start_write_block+0x3c>)
    5cf8:	4b0b      	ldr	r3, [pc, #44]	; (5d28 <sd_mmc_spi_start_write_block+0x40>)
    5cfa:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    5cfc:	4b0b      	ldr	r3, [pc, #44]	; (5d2c <sd_mmc_spi_start_write_block+0x44>)
    5cfe:	881b      	ldrh	r3, [r3, #0]
    5d00:	2b01      	cmp	r3, #1
    5d02:	d00a      	beq.n	5d1a <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5d04:	22fc      	movs	r2, #252	; 0xfc
    5d06:	466b      	mov	r3, sp
    5d08:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    5d0a:	2201      	movs	r2, #1
    5d0c:	466b      	mov	r3, sp
    5d0e:	1d99      	adds	r1, r3, #6
    5d10:	4804      	ldr	r0, [pc, #16]	; (5d24 <sd_mmc_spi_start_write_block+0x3c>)
    5d12:	4b05      	ldr	r3, [pc, #20]	; (5d28 <sd_mmc_spi_start_write_block+0x40>)
    5d14:	4798      	blx	r3
}
    5d16:	b003      	add	sp, #12
    5d18:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    5d1a:	22fe      	movs	r2, #254	; 0xfe
    5d1c:	466b      	mov	r3, sp
    5d1e:	719a      	strb	r2, [r3, #6]
    5d20:	e7f3      	b.n	5d0a <sd_mmc_spi_start_write_block+0x22>
    5d22:	46c0      	nop			; (mov r8, r8)
    5d24:	200002b0 	.word	0x200002b0
    5d28:	000058c1 	.word	0x000058c1
    5d2c:	200002c4 	.word	0x200002c4

00005d30 <sd_mmc_spi_wait_busy>:
{
    5d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d32:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    5d34:	466b      	mov	r3, sp
    5d36:	1ddc      	adds	r4, r3, #7
    5d38:	23ff      	movs	r3, #255	; 0xff
    5d3a:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5d3c:	4e12      	ldr	r6, [pc, #72]	; (5d88 <sd_mmc_spi_wait_busy+0x58>)
    5d3e:	2201      	movs	r2, #1
    5d40:	0021      	movs	r1, r4
    5d42:	0030      	movs	r0, r6
    5d44:	4d11      	ldr	r5, [pc, #68]	; (5d8c <sd_mmc_spi_wait_busy+0x5c>)
    5d46:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5d48:	23ff      	movs	r3, #255	; 0xff
    5d4a:	2201      	movs	r2, #1
    5d4c:	0021      	movs	r1, r4
    5d4e:	0030      	movs	r0, r6
    5d50:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5d52:	23ff      	movs	r3, #255	; 0xff
    5d54:	2201      	movs	r2, #1
    5d56:	0021      	movs	r1, r4
    5d58:	0030      	movs	r0, r6
    5d5a:	47a8      	blx	r5
    5d5c:	4c0c      	ldr	r4, [pc, #48]	; (5d90 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    5d5e:	466b      	mov	r3, sp
    5d60:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5d62:	4e09      	ldr	r6, [pc, #36]	; (5d88 <sd_mmc_spi_wait_busy+0x58>)
    5d64:	4f09      	ldr	r7, [pc, #36]	; (5d8c <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    5d66:	782b      	ldrb	r3, [r5, #0]
    5d68:	2bff      	cmp	r3, #255	; 0xff
    5d6a:	d009      	beq.n	5d80 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    5d6c:	23ff      	movs	r3, #255	; 0xff
    5d6e:	2201      	movs	r2, #1
    5d70:	0029      	movs	r1, r5
    5d72:	0030      	movs	r0, r6
    5d74:	47b8      	blx	r7
    5d76:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    5d78:	2c00      	cmp	r4, #0
    5d7a:	d1f4      	bne.n	5d66 <sd_mmc_spi_wait_busy+0x36>
			return false;
    5d7c:	2000      	movs	r0, #0
    5d7e:	e000      	b.n	5d82 <sd_mmc_spi_wait_busy+0x52>
	return true;
    5d80:	2001      	movs	r0, #1
}
    5d82:	b003      	add	sp, #12
    5d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d86:	46c0      	nop			; (mov r8, r8)
    5d88:	200002b0 	.word	0x200002b0
    5d8c:	000056b5 	.word	0x000056b5
    5d90:	00030d40 	.word	0x00030d40

00005d94 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5d94:	b570      	push	{r4, r5, r6, lr}
    5d96:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5d98:	4b14      	ldr	r3, [pc, #80]	; (5dec <sd_mmc_spi_stop_multiwrite_block+0x58>)
    5d9a:	881c      	ldrh	r4, [r3, #0]
    5d9c:	2c01      	cmp	r4, #1
    5d9e:	d023      	beq.n	5de8 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    5da0:	4b13      	ldr	r3, [pc, #76]	; (5df0 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    5da2:	8819      	ldrh	r1, [r3, #0]
    5da4:	4b13      	ldr	r3, [pc, #76]	; (5df4 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5da6:	6818      	ldr	r0, [r3, #0]
    5da8:	4b13      	ldr	r3, [pc, #76]	; (5df8 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    5daa:	4798      	blx	r3
		return true; // It is not the End of multi write
    5dac:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    5dae:	4284      	cmp	r4, r0
    5db0:	d902      	bls.n	5db8 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    5db2:	0018      	movs	r0, r3
    5db4:	b002      	add	sp, #8
    5db6:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5db8:	466b      	mov	r3, sp
    5dba:	1ddc      	adds	r4, r3, #7
    5dbc:	23ff      	movs	r3, #255	; 0xff
    5dbe:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5dc0:	4e0e      	ldr	r6, [pc, #56]	; (5dfc <sd_mmc_spi_stop_multiwrite_block+0x68>)
    5dc2:	2201      	movs	r2, #1
    5dc4:	0021      	movs	r1, r4
    5dc6:	0030      	movs	r0, r6
    5dc8:	4d0d      	ldr	r5, [pc, #52]	; (5e00 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    5dca:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    5dcc:	23fd      	movs	r3, #253	; 0xfd
    5dce:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    5dd0:	2201      	movs	r2, #1
    5dd2:	0021      	movs	r1, r4
    5dd4:	0030      	movs	r0, r6
    5dd6:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5dd8:	4b0a      	ldr	r3, [pc, #40]	; (5e04 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    5dda:	4798      	blx	r3
    5ddc:	1e03      	subs	r3, r0, #0
    5dde:	d1e8      	bne.n	5db2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5de0:	2105      	movs	r1, #5
    5de2:	4a09      	ldr	r2, [pc, #36]	; (5e08 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5de4:	7011      	strb	r1, [r2, #0]
		return false;
    5de6:	e7e4      	b.n	5db2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5de8:	2301      	movs	r3, #1
    5dea:	e7e2      	b.n	5db2 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    5dec:	200002c4 	.word	0x200002c4
    5df0:	200002bc 	.word	0x200002bc
    5df4:	200002cc 	.word	0x200002cc
    5df8:	00006a5d 	.word	0x00006a5d
    5dfc:	200002b0 	.word	0x200002b0
    5e00:	000058c1 	.word	0x000058c1
    5e04:	00005d31 	.word	0x00005d31
    5e08:	200002c3 	.word	0x200002c3

00005e0c <sd_mmc_spi_start_read_block>:
{
    5e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e0e:	b083      	sub	sp, #12
	token = 0;
    5e10:	2200      	movs	r2, #0
    5e12:	466b      	mov	r3, sp
    5e14:	71da      	strb	r2, [r3, #7]
    5e16:	4c14      	ldr	r4, [pc, #80]	; (5e68 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5e18:	466b      	mov	r3, sp
    5e1a:	1ddd      	adds	r5, r3, #7
    5e1c:	4e13      	ldr	r6, [pc, #76]	; (5e6c <sd_mmc_spi_start_read_block+0x60>)
    5e1e:	4f14      	ldr	r7, [pc, #80]	; (5e70 <sd_mmc_spi_start_read_block+0x64>)
    5e20:	23ff      	movs	r3, #255	; 0xff
    5e22:	2201      	movs	r2, #1
    5e24:	0029      	movs	r1, r5
    5e26:	0030      	movs	r0, r6
    5e28:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    5e2a:	782b      	ldrb	r3, [r5, #0]
    5e2c:	220f      	movs	r2, #15
    5e2e:	0019      	movs	r1, r3
    5e30:	4391      	bics	r1, r2
    5e32:	1e0a      	subs	r2, r1, #0
    5e34:	d009      	beq.n	5e4a <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    5e36:	2bfe      	cmp	r3, #254	; 0xfe
    5e38:	d013      	beq.n	5e62 <sd_mmc_spi_start_read_block+0x56>
    5e3a:	3c01      	subs	r4, #1
		if (i-- == 0) {
    5e3c:	2c00      	cmp	r4, #0
    5e3e:	d1ef      	bne.n	5e20 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    5e40:	2204      	movs	r2, #4
    5e42:	4b0c      	ldr	r3, [pc, #48]	; (5e74 <sd_mmc_spi_start_read_block+0x68>)
    5e44:	701a      	strb	r2, [r3, #0]
			return false;
    5e46:	2000      	movs	r0, #0
    5e48:	e00c      	b.n	5e64 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    5e4a:	075b      	lsls	r3, r3, #29
    5e4c:	d004      	beq.n	5e58 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    5e4e:	3207      	adds	r2, #7
    5e50:	4b08      	ldr	r3, [pc, #32]	; (5e74 <sd_mmc_spi_start_read_block+0x68>)
    5e52:	701a      	strb	r2, [r3, #0]
			return false;
    5e54:	2000      	movs	r0, #0
    5e56:	e005      	b.n	5e64 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    5e58:	220b      	movs	r2, #11
    5e5a:	4b06      	ldr	r3, [pc, #24]	; (5e74 <sd_mmc_spi_start_read_block+0x68>)
    5e5c:	701a      	strb	r2, [r3, #0]
			return false;
    5e5e:	2000      	movs	r0, #0
    5e60:	e000      	b.n	5e64 <sd_mmc_spi_start_read_block+0x58>
	return true;
    5e62:	2001      	movs	r0, #1
}
    5e64:	b003      	add	sp, #12
    5e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e68:	0007a120 	.word	0x0007a120
    5e6c:	200002b0 	.word	0x200002b0
    5e70:	000056b5 	.word	0x000056b5
    5e74:	200002c3 	.word	0x200002c3

00005e78 <sd_mmc_spi_stop_write_block>:
{
    5e78:	b530      	push	{r4, r5, lr}
    5e7a:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    5e7c:	a901      	add	r1, sp, #4
    5e7e:	2301      	movs	r3, #1
    5e80:	425b      	negs	r3, r3
    5e82:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5e84:	4d14      	ldr	r5, [pc, #80]	; (5ed8 <sd_mmc_spi_stop_write_block+0x60>)
    5e86:	2202      	movs	r2, #2
    5e88:	0028      	movs	r0, r5
    5e8a:	4b14      	ldr	r3, [pc, #80]	; (5edc <sd_mmc_spi_stop_write_block+0x64>)
    5e8c:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    5e8e:	466b      	mov	r3, sp
    5e90:	1ddc      	adds	r4, r3, #7
    5e92:	23ff      	movs	r3, #255	; 0xff
    5e94:	2201      	movs	r2, #1
    5e96:	0021      	movs	r1, r4
    5e98:	0028      	movs	r0, r5
    5e9a:	4d11      	ldr	r5, [pc, #68]	; (5ee0 <sd_mmc_spi_stop_write_block+0x68>)
    5e9c:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    5e9e:	7822      	ldrb	r2, [r4, #0]
    5ea0:	2311      	movs	r3, #17
    5ea2:	4013      	ands	r3, r2
    5ea4:	2b01      	cmp	r3, #1
    5ea6:	d005      	beq.n	5eb4 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5ea8:	2201      	movs	r2, #1
    5eaa:	4b0e      	ldr	r3, [pc, #56]	; (5ee4 <sd_mmc_spi_stop_write_block+0x6c>)
    5eac:	701a      	strb	r2, [r3, #0]
		return false;
    5eae:	2000      	movs	r0, #0
}
    5eb0:	b003      	add	sp, #12
    5eb2:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5eb4:	231e      	movs	r3, #30
    5eb6:	401a      	ands	r2, r3
    5eb8:	2a04      	cmp	r2, #4
    5eba:	d00b      	beq.n	5ed4 <sd_mmc_spi_stop_write_block+0x5c>
    5ebc:	2a0a      	cmp	r2, #10
    5ebe:	d104      	bne.n	5eca <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    5ec0:	3a02      	subs	r2, #2
    5ec2:	4b08      	ldr	r3, [pc, #32]	; (5ee4 <sd_mmc_spi_stop_write_block+0x6c>)
    5ec4:	701a      	strb	r2, [r3, #0]
		return false;
    5ec6:	2000      	movs	r0, #0
    5ec8:	e7f2      	b.n	5eb0 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5eca:	220a      	movs	r2, #10
    5ecc:	4b05      	ldr	r3, [pc, #20]	; (5ee4 <sd_mmc_spi_stop_write_block+0x6c>)
    5ece:	701a      	strb	r2, [r3, #0]
		return false;
    5ed0:	2000      	movs	r0, #0
    5ed2:	e7ed      	b.n	5eb0 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5ed4:	2001      	movs	r0, #1
    5ed6:	e7eb      	b.n	5eb0 <sd_mmc_spi_stop_write_block+0x38>
    5ed8:	200002b0 	.word	0x200002b0
    5edc:	000058c1 	.word	0x000058c1
    5ee0:	000056b5 	.word	0x000056b5
    5ee4:	200002c3 	.word	0x200002c3

00005ee8 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5ee8:	b570      	push	{r4, r5, r6, lr}
    5eea:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5eec:	2500      	movs	r5, #0
    5eee:	4b2c      	ldr	r3, [pc, #176]	; (5fa0 <sd_mmc_spi_init+0xb8>)
    5ef0:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    5ef2:	a90f      	add	r1, sp, #60	; 0x3c
    5ef4:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5ef6:	2601      	movs	r6, #1
    5ef8:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    5efa:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    5efc:	2025      	movs	r0, #37	; 0x25
    5efe:	4b29      	ldr	r3, [pc, #164]	; (5fa4 <sd_mmc_spi_init+0xbc>)
    5f00:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    5f02:	ac01      	add	r4, sp, #4
    5f04:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5f06:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5f08:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5f0a:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    5f0c:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    5f0e:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5f10:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    5f12:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5f14:	2324      	movs	r3, #36	; 0x24
    5f16:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5f18:	220c      	movs	r2, #12
    5f1a:	2100      	movs	r1, #0
    5f1c:	a807      	add	r0, sp, #28
    5f1e:	4b22      	ldr	r3, [pc, #136]	; (5fa8 <sd_mmc_spi_init+0xc0>)
    5f20:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    5f22:	2380      	movs	r3, #128	; 0x80
    5f24:	025b      	lsls	r3, r3, #9
    5f26:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    5f28:	4b20      	ldr	r3, [pc, #128]	; (5fac <sd_mmc_spi_init+0xc4>)
    5f2a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    5f2c:	4b20      	ldr	r3, [pc, #128]	; (5fb0 <sd_mmc_spi_init+0xc8>)
    5f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    5f30:	4b20      	ldr	r3, [pc, #128]	; (5fb4 <sd_mmc_spi_init+0xcc>)
    5f32:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    5f34:	4b20      	ldr	r3, [pc, #128]	; (5fb8 <sd_mmc_spi_init+0xd0>)
    5f36:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    5f38:	4b20      	ldr	r3, [pc, #128]	; (5fbc <sd_mmc_spi_init+0xd4>)
    5f3a:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    5f3c:	4d20      	ldr	r5, [pc, #128]	; (5fc0 <sd_mmc_spi_init+0xd8>)
    5f3e:	0022      	movs	r2, r4
    5f40:	4920      	ldr	r1, [pc, #128]	; (5fc4 <sd_mmc_spi_init+0xdc>)
    5f42:	0028      	movs	r0, r5
    5f44:	4b20      	ldr	r3, [pc, #128]	; (5fc8 <sd_mmc_spi_init+0xe0>)
    5f46:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    5f48:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    5f4a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d1fc      	bne.n	5f4a <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5f50:	6813      	ldr	r3, [r2, #0]
    5f52:	2102      	movs	r1, #2
    5f54:	430b      	orrs	r3, r1
    5f56:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    5f58:	4a1c      	ldr	r2, [pc, #112]	; (5fcc <sd_mmc_spi_init+0xe4>)
    5f5a:	2300      	movs	r3, #0
    5f5c:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    5f5e:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    5f60:	491b      	ldr	r1, [pc, #108]	; (5fd0 <sd_mmc_spi_init+0xe8>)
    5f62:	7808      	ldrb	r0, [r1, #0]
    5f64:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    5f66:	4c1b      	ldr	r4, [pc, #108]	; (5fd4 <sd_mmc_spi_init+0xec>)
    5f68:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5f6a:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    5f6c:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5f6e:	2201      	movs	r2, #1
    5f70:	4669      	mov	r1, sp
    5f72:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    5f74:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5f76:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5f78:	4b0a      	ldr	r3, [pc, #40]	; (5fa4 <sd_mmc_spi_init+0xbc>)
    5f7a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    5f7c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5f7e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5f80:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5f82:	2900      	cmp	r1, #0
    5f84:	d104      	bne.n	5f90 <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    5f86:	0953      	lsrs	r3, r2, #5
    5f88:	01db      	lsls	r3, r3, #7
    5f8a:	4913      	ldr	r1, [pc, #76]	; (5fd8 <sd_mmc_spi_init+0xf0>)
    5f8c:	468c      	mov	ip, r1
    5f8e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5f90:	211f      	movs	r1, #31
    5f92:	4011      	ands	r1, r2
    5f94:	2201      	movs	r2, #1
    5f96:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5f98:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    5f9a:	b010      	add	sp, #64	; 0x40
    5f9c:	bd70      	pop	{r4, r5, r6, pc}
    5f9e:	46c0      	nop			; (mov r8, r8)
    5fa0:	200002c3 	.word	0x200002c3
    5fa4:	00006589 	.word	0x00006589
    5fa8:	0000704b 	.word	0x0000704b
    5fac:	00040003 	.word	0x00040003
    5fb0:	00050003 	.word	0x00050003
    5fb4:	00060003 	.word	0x00060003
    5fb8:	00070003 	.word	0x00070003
    5fbc:	00061a80 	.word	0x00061a80
    5fc0:	200002b0 	.word	0x200002b0
    5fc4:	42000800 	.word	0x42000800
    5fc8:	00005381 	.word	0x00005381
    5fcc:	200002d0 	.word	0x200002d0
    5fd0:	200000f8 	.word	0x200000f8
    5fd4:	200002c0 	.word	0x200002c0
    5fd8:	41004400 	.word	0x41004400

00005fdc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    5fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fde:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5fe0:	2200      	movs	r2, #0
    5fe2:	4b0d      	ldr	r3, [pc, #52]	; (6018 <sd_mmc_spi_select_device+0x3c>)
    5fe4:	701a      	strb	r2, [r3, #0]
    5fe6:	000c      	movs	r4, r1
    5fe8:	4b0c      	ldr	r3, [pc, #48]	; (601c <sd_mmc_spi_select_device+0x40>)
    5fea:	4299      	cmp	r1, r3
    5fec:	d900      	bls.n	5ff0 <sd_mmc_spi_select_device+0x14>
    5fee:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5ff0:	4d0b      	ldr	r5, [pc, #44]	; (6020 <sd_mmc_spi_select_device+0x44>)
    5ff2:	4e0c      	ldr	r6, [pc, #48]	; (6024 <sd_mmc_spi_select_device+0x48>)
    5ff4:	e001      	b.n	5ffa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    5ff6:	08e3      	lsrs	r3, r4, #3
    5ff8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5ffa:	0021      	movs	r1, r4
    5ffc:	0028      	movs	r0, r5
    5ffe:	47b0      	blx	r6
    6000:	2817      	cmp	r0, #23
    6002:	d0f8      	beq.n	5ff6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    6004:	0079      	lsls	r1, r7, #1
    6006:	19cf      	adds	r7, r1, r7
    6008:	4907      	ldr	r1, [pc, #28]	; (6028 <sd_mmc_spi_select_device+0x4c>)
    600a:	19c9      	adds	r1, r1, r7
    600c:	2201      	movs	r2, #1
    600e:	4804      	ldr	r0, [pc, #16]	; (6020 <sd_mmc_spi_select_device+0x44>)
    6010:	4b06      	ldr	r3, [pc, #24]	; (602c <sd_mmc_spi_select_device+0x50>)
    6012:	4798      	blx	r3
}
    6014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6016:	46c0      	nop			; (mov r8, r8)
    6018:	200002c3 	.word	0x200002c3
    601c:	003d0900 	.word	0x003d0900
    6020:	200002b0 	.word	0x200002b0
    6024:	000052fd 	.word	0x000052fd
    6028:	200002c0 	.word	0x200002c0
    602c:	000057cd 	.word	0x000057cd

00006030 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    6030:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6032:	2200      	movs	r2, #0
    6034:	4b04      	ldr	r3, [pc, #16]	; (6048 <sd_mmc_spi_deselect_device+0x18>)
    6036:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    6038:	0041      	lsls	r1, r0, #1
    603a:	1808      	adds	r0, r1, r0
    603c:	4903      	ldr	r1, [pc, #12]	; (604c <sd_mmc_spi_deselect_device+0x1c>)
    603e:	1809      	adds	r1, r1, r0
    6040:	4803      	ldr	r0, [pc, #12]	; (6050 <sd_mmc_spi_deselect_device+0x20>)
    6042:	4b04      	ldr	r3, [pc, #16]	; (6054 <sd_mmc_spi_deselect_device+0x24>)
    6044:	4798      	blx	r3
}
    6046:	bd10      	pop	{r4, pc}
    6048:	200002c3 	.word	0x200002c3
    604c:	200002c0 	.word	0x200002c0
    6050:	200002b0 	.word	0x200002b0
    6054:	000057cd 	.word	0x000057cd

00006058 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    6058:	b570      	push	{r4, r5, r6, lr}
    605a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    605c:	22ff      	movs	r2, #255	; 0xff
    605e:	466b      	mov	r3, sp
    6060:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6062:	2200      	movs	r2, #0
    6064:	4b07      	ldr	r3, [pc, #28]	; (6084 <sd_mmc_spi_send_clock+0x2c>)
    6066:	701a      	strb	r2, [r3, #0]
    6068:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    606a:	4e07      	ldr	r6, [pc, #28]	; (6088 <sd_mmc_spi_send_clock+0x30>)
    606c:	4d07      	ldr	r5, [pc, #28]	; (608c <sd_mmc_spi_send_clock+0x34>)
    606e:	2201      	movs	r2, #1
    6070:	466b      	mov	r3, sp
    6072:	1dd9      	adds	r1, r3, #7
    6074:	0030      	movs	r0, r6
    6076:	47a8      	blx	r5
    6078:	3c01      	subs	r4, #1
    607a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    607c:	2c00      	cmp	r4, #0
    607e:	d1f6      	bne.n	606e <sd_mmc_spi_send_clock+0x16>
	}
}
    6080:	b002      	add	sp, #8
    6082:	bd70      	pop	{r4, r5, r6, pc}
    6084:	200002c3 	.word	0x200002c3
    6088:	200002b0 	.word	0x200002b0
    608c:	000058c1 	.word	0x000058c1

00006090 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    6090:	b5f0      	push	{r4, r5, r6, r7, lr}
    6092:	46c6      	mov	lr, r8
    6094:	b500      	push	{lr}
    6096:	b086      	sub	sp, #24
    6098:	4680      	mov	r8, r0
    609a:	9200      	str	r2, [sp, #0]
    609c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    609e:	22ff      	movs	r2, #255	; 0xff
    60a0:	230f      	movs	r3, #15
    60a2:	a802      	add	r0, sp, #8
    60a4:	4684      	mov	ip, r0
    60a6:	4463      	add	r3, ip
    60a8:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    60aa:	2200      	movs	r2, #0
    60ac:	4b53      	ldr	r3, [pc, #332]	; (61fc <sd_mmc_spi_adtc_start+0x16c>)
    60ae:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    60b0:	ab04      	add	r3, sp, #16
    60b2:	323f      	adds	r2, #63	; 0x3f
    60b4:	4640      	mov	r0, r8
    60b6:	4002      	ands	r2, r0
    60b8:	2040      	movs	r0, #64	; 0x40
    60ba:	4302      	orrs	r2, r0
    60bc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    60be:	0e0a      	lsrs	r2, r1, #24
    60c0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    60c2:	0c0a      	lsrs	r2, r1, #16
    60c4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    60c6:	0a0a      	lsrs	r2, r1, #8
    60c8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    60ca:	7119      	strb	r1, [r3, #4]
    60cc:	2700      	movs	r7, #0
	crc = 0;
    60ce:	2300      	movs	r3, #0
		value = *buf++;
    60d0:	a904      	add	r1, sp, #16
    60d2:	2208      	movs	r2, #8
				crc ^= 0x09;
    60d4:	2409      	movs	r4, #9
    60d6:	e011      	b.n	60fc <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    60d8:	0076      	lsls	r6, r6, #1
    60da:	b2f6      	uxtb	r6, r6
    60dc:	3801      	subs	r0, #1
    60de:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    60e0:	2800      	cmp	r0, #0
    60e2:	d008      	beq.n	60f6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    60e4:	005b      	lsls	r3, r3, #1
    60e6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    60e8:	001d      	movs	r5, r3
    60ea:	4075      	eors	r5, r6
    60ec:	062d      	lsls	r5, r5, #24
    60ee:	d5f3      	bpl.n	60d8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    60f0:	4063      	eors	r3, r4
    60f2:	b2db      	uxtb	r3, r3
    60f4:	e7f0      	b.n	60d8 <sd_mmc_spi_adtc_start+0x48>
    60f6:	3701      	adds	r7, #1
	while (size--) {
    60f8:	2f05      	cmp	r7, #5
    60fa:	d002      	beq.n	6102 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    60fc:	5c7e      	ldrb	r6, [r7, r1]
    60fe:	0010      	movs	r0, r2
    6100:	e7f0      	b.n	60e4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    6102:	005b      	lsls	r3, r3, #1
    6104:	2201      	movs	r2, #1
    6106:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    6108:	ac04      	add	r4, sp, #16
    610a:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    610c:	4e3c      	ldr	r6, [pc, #240]	; (6200 <sd_mmc_spi_adtc_start+0x170>)
    610e:	2201      	movs	r2, #1
    6110:	210f      	movs	r1, #15
    6112:	ab02      	add	r3, sp, #8
    6114:	469c      	mov	ip, r3
    6116:	4461      	add	r1, ip
    6118:	0030      	movs	r0, r6
    611a:	4f3a      	ldr	r7, [pc, #232]	; (6204 <sd_mmc_spi_adtc_start+0x174>)
    611c:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    611e:	2206      	movs	r2, #6
    6120:	0021      	movs	r1, r4
    6122:	0030      	movs	r0, r6
    6124:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    6126:	ab02      	add	r3, sp, #8
    6128:	1dd9      	adds	r1, r3, #7
    612a:	23ff      	movs	r3, #255	; 0xff
    612c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    612e:	2201      	movs	r2, #1
    6130:	0030      	movs	r0, r6
    6132:	4e35      	ldr	r6, [pc, #212]	; (6208 <sd_mmc_spi_adtc_start+0x178>)
    6134:	47b0      	blx	r6
    6136:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    6138:	ab02      	add	r3, sp, #8
    613a:	1dde      	adds	r6, r3, #7
    613c:	4f30      	ldr	r7, [pc, #192]	; (6200 <sd_mmc_spi_adtc_start+0x170>)
    613e:	4d32      	ldr	r5, [pc, #200]	; (6208 <sd_mmc_spi_adtc_start+0x178>)
    6140:	23ff      	movs	r3, #255	; 0xff
    6142:	2201      	movs	r2, #1
    6144:	0031      	movs	r1, r6
    6146:	0038      	movs	r0, r7
    6148:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    614a:	7833      	ldrb	r3, [r6, #0]
    614c:	b25a      	sxtb	r2, r3
    614e:	2a00      	cmp	r2, #0
    6150:	da0b      	bge.n	616a <sd_mmc_spi_adtc_start+0xda>
    6152:	3c01      	subs	r4, #1
    6154:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    6156:	2c00      	cmp	r4, #0
    6158:	d1f2      	bne.n	6140 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    615a:	2202      	movs	r2, #2
    615c:	4b27      	ldr	r3, [pc, #156]	; (61fc <sd_mmc_spi_adtc_start+0x16c>)
    615e:	701a      	strb	r2, [r3, #0]
			return false;
    6160:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    6162:	b006      	add	sp, #24
    6164:	bc04      	pop	{r2}
    6166:	4690      	mov	r8, r2
    6168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    616a:	4a28      	ldr	r2, [pc, #160]	; (620c <sd_mmc_spi_adtc_start+0x17c>)
    616c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    616e:	071a      	lsls	r2, r3, #28
    6170:	d41a      	bmi.n	61a8 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    6172:	075a      	lsls	r2, r3, #29
    6174:	d41d      	bmi.n	61b2 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    6176:	2201      	movs	r2, #1
    6178:	4393      	bics	r3, r2
    617a:	d11f      	bne.n	61bc <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    617c:	4643      	mov	r3, r8
    617e:	049b      	lsls	r3, r3, #18
    6180:	d420      	bmi.n	61c4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    6182:	4643      	mov	r3, r8
    6184:	059b      	lsls	r3, r3, #22
    6186:	d425      	bmi.n	61d4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    6188:	4643      	mov	r3, r8
    618a:	055b      	lsls	r3, r3, #21
    618c:	d42b      	bmi.n	61e6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    618e:	4b20      	ldr	r3, [pc, #128]	; (6210 <sd_mmc_spi_adtc_start+0x180>)
    6190:	466a      	mov	r2, sp
    6192:	8812      	ldrh	r2, [r2, #0]
    6194:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    6196:	4b1f      	ldr	r3, [pc, #124]	; (6214 <sd_mmc_spi_adtc_start+0x184>)
    6198:	466a      	mov	r2, sp
    619a:	8892      	ldrh	r2, [r2, #4]
    619c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    619e:	2200      	movs	r2, #0
    61a0:	4b1d      	ldr	r3, [pc, #116]	; (6218 <sd_mmc_spi_adtc_start+0x188>)
    61a2:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    61a4:	2001      	movs	r0, #1
    61a6:	e7dc      	b.n	6162 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    61a8:	2206      	movs	r2, #6
    61aa:	4b14      	ldr	r3, [pc, #80]	; (61fc <sd_mmc_spi_adtc_start+0x16c>)
    61ac:	701a      	strb	r2, [r3, #0]
		return false;
    61ae:	2000      	movs	r0, #0
    61b0:	e7d7      	b.n	6162 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    61b2:	2209      	movs	r2, #9
    61b4:	4b11      	ldr	r3, [pc, #68]	; (61fc <sd_mmc_spi_adtc_start+0x16c>)
    61b6:	701a      	strb	r2, [r3, #0]
		return false;
    61b8:	2000      	movs	r0, #0
    61ba:	e7d2      	b.n	6162 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    61bc:	4b0f      	ldr	r3, [pc, #60]	; (61fc <sd_mmc_spi_adtc_start+0x16c>)
    61be:	701a      	strb	r2, [r3, #0]
		return false;
    61c0:	2000      	movs	r0, #0
    61c2:	e7ce      	b.n	6162 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    61c4:	4b15      	ldr	r3, [pc, #84]	; (621c <sd_mmc_spi_adtc_start+0x18c>)
    61c6:	4798      	blx	r3
    61c8:	2800      	cmp	r0, #0
    61ca:	d1da      	bne.n	6182 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    61cc:	2203      	movs	r2, #3
    61ce:	4b0b      	ldr	r3, [pc, #44]	; (61fc <sd_mmc_spi_adtc_start+0x16c>)
    61d0:	701a      	strb	r2, [r3, #0]
			return false;
    61d2:	e7c6      	b.n	6162 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    61d4:	490d      	ldr	r1, [pc, #52]	; (620c <sd_mmc_spi_adtc_start+0x17c>)
    61d6:	2300      	movs	r3, #0
    61d8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    61da:	33ff      	adds	r3, #255	; 0xff
    61dc:	2201      	movs	r2, #1
    61de:	4808      	ldr	r0, [pc, #32]	; (6200 <sd_mmc_spi_adtc_start+0x170>)
    61e0:	4e09      	ldr	r6, [pc, #36]	; (6208 <sd_mmc_spi_adtc_start+0x178>)
    61e2:	47b0      	blx	r6
    61e4:	e7d0      	b.n	6188 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    61e6:	4e09      	ldr	r6, [pc, #36]	; (620c <sd_mmc_spi_adtc_start+0x17c>)
    61e8:	23ff      	movs	r3, #255	; 0xff
    61ea:	2204      	movs	r2, #4
    61ec:	0031      	movs	r1, r6
    61ee:	4804      	ldr	r0, [pc, #16]	; (6200 <sd_mmc_spi_adtc_start+0x170>)
    61f0:	4f05      	ldr	r7, [pc, #20]	; (6208 <sd_mmc_spi_adtc_start+0x178>)
    61f2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    61f4:	6833      	ldr	r3, [r6, #0]
    61f6:	ba1b      	rev	r3, r3
    61f8:	6033      	str	r3, [r6, #0]
    61fa:	e7c8      	b.n	618e <sd_mmc_spi_adtc_start+0xfe>
    61fc:	200002c3 	.word	0x200002c3
    6200:	200002b0 	.word	0x200002b0
    6204:	000058c1 	.word	0x000058c1
    6208:	000056b5 	.word	0x000056b5
    620c:	200002c8 	.word	0x200002c8
    6210:	200002bc 	.word	0x200002bc
    6214:	200002c4 	.word	0x200002c4
    6218:	200002cc 	.word	0x200002cc
    621c:	00005d31 	.word	0x00005d31

00006220 <sd_mmc_spi_send_cmd>:
{
    6220:	b510      	push	{r4, lr}
    6222:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    6224:	2300      	movs	r3, #0
    6226:	9300      	str	r3, [sp, #0]
    6228:	2200      	movs	r2, #0
    622a:	4c02      	ldr	r4, [pc, #8]	; (6234 <sd_mmc_spi_send_cmd+0x14>)
    622c:	47a0      	blx	r4
}
    622e:	b002      	add	sp, #8
    6230:	bd10      	pop	{r4, pc}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	00006091 	.word	0x00006091

00006238 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    6238:	4b01      	ldr	r3, [pc, #4]	; (6240 <sd_mmc_spi_get_response+0x8>)
    623a:	6818      	ldr	r0, [r3, #0]
}
    623c:	4770      	bx	lr
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	200002c8 	.word	0x200002c8

00006244 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    6244:	b510      	push	{r4, lr}
    6246:	b084      	sub	sp, #16
    6248:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    624a:	2200      	movs	r2, #0
    624c:	4b14      	ldr	r3, [pc, #80]	; (62a0 <sd_mmc_spi_read_word+0x5c>)
    624e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    6250:	4b14      	ldr	r3, [pc, #80]	; (62a4 <sd_mmc_spi_read_word+0x60>)
    6252:	8819      	ldrh	r1, [r3, #0]
    6254:	4b14      	ldr	r3, [pc, #80]	; (62a8 <sd_mmc_spi_read_word+0x64>)
    6256:	6818      	ldr	r0, [r3, #0]
    6258:	4b14      	ldr	r3, [pc, #80]	; (62ac <sd_mmc_spi_read_word+0x68>)
    625a:	4798      	blx	r3
    625c:	2900      	cmp	r1, #0
    625e:	d103      	bne.n	6268 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    6260:	4b13      	ldr	r3, [pc, #76]	; (62b0 <sd_mmc_spi_read_word+0x6c>)
    6262:	4798      	blx	r3
    6264:	2800      	cmp	r0, #0
    6266:	d010      	beq.n	628a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    6268:	23ff      	movs	r3, #255	; 0xff
    626a:	2204      	movs	r2, #4
    626c:	a901      	add	r1, sp, #4
    626e:	4811      	ldr	r0, [pc, #68]	; (62b4 <sd_mmc_spi_read_word+0x70>)
    6270:	4c11      	ldr	r4, [pc, #68]	; (62b8 <sd_mmc_spi_read_word+0x74>)
    6272:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    6274:	4b0c      	ldr	r3, [pc, #48]	; (62a8 <sd_mmc_spi_read_word+0x64>)
    6276:	681a      	ldr	r2, [r3, #0]
    6278:	1d10      	adds	r0, r2, #4
    627a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    627c:	4b09      	ldr	r3, [pc, #36]	; (62a4 <sd_mmc_spi_read_word+0x60>)
    627e:	8819      	ldrh	r1, [r3, #0]
    6280:	4b0a      	ldr	r3, [pc, #40]	; (62ac <sd_mmc_spi_read_word+0x68>)
    6282:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    6284:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    6286:	2900      	cmp	r1, #0
    6288:	d001      	beq.n	628e <sd_mmc_spi_read_word+0x4a>
}
    628a:	b004      	add	sp, #16
    628c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    628e:	23ff      	movs	r3, #255	; 0xff
    6290:	2202      	movs	r2, #2
    6292:	a903      	add	r1, sp, #12
    6294:	4807      	ldr	r0, [pc, #28]	; (62b4 <sd_mmc_spi_read_word+0x70>)
    6296:	4c08      	ldr	r4, [pc, #32]	; (62b8 <sd_mmc_spi_read_word+0x74>)
    6298:	47a0      	blx	r4
	return true;
    629a:	2001      	movs	r0, #1
    629c:	e7f5      	b.n	628a <sd_mmc_spi_read_word+0x46>
    629e:	46c0      	nop			; (mov r8, r8)
    62a0:	200002c3 	.word	0x200002c3
    62a4:	200002bc 	.word	0x200002bc
    62a8:	200002cc 	.word	0x200002cc
    62ac:	00006b69 	.word	0x00006b69
    62b0:	00005e0d 	.word	0x00005e0d
    62b4:	200002b0 	.word	0x200002b0
    62b8:	000056b5 	.word	0x000056b5

000062bc <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    62bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    62be:	46de      	mov	lr, fp
    62c0:	4657      	mov	r7, sl
    62c2:	4646      	mov	r6, r8
    62c4:	b5c0      	push	{r6, r7, lr}
    62c6:	b082      	sub	sp, #8
    62c8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    62ca:	2200      	movs	r2, #0
    62cc:	4b17      	ldr	r3, [pc, #92]	; (632c <sd_mmc_spi_start_read_blocks+0x70>)
    62ce:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    62d0:	1e4c      	subs	r4, r1, #1
    62d2:	b2a4      	uxth	r4, r4
    62d4:	2900      	cmp	r1, #0
    62d6:	d026      	beq.n	6326 <sd_mmc_spi_start_read_blocks+0x6a>
    62d8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    62da:	4b15      	ldr	r3, [pc, #84]	; (6330 <sd_mmc_spi_start_read_blocks+0x74>)
    62dc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    62de:	4f15      	ldr	r7, [pc, #84]	; (6334 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    62e0:	47d0      	blx	sl
    62e2:	4680      	mov	r8, r0
    62e4:	2800      	cmp	r0, #0
    62e6:	d017      	beq.n	6318 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    62e8:	883a      	ldrh	r2, [r7, #0]
    62ea:	465b      	mov	r3, fp
    62ec:	1999      	adds	r1, r3, r6
    62ee:	23ff      	movs	r3, #255	; 0xff
    62f0:	4811      	ldr	r0, [pc, #68]	; (6338 <sd_mmc_spi_start_read_blocks+0x7c>)
    62f2:	4d12      	ldr	r5, [pc, #72]	; (633c <sd_mmc_spi_start_read_blocks+0x80>)
    62f4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    62f6:	883b      	ldrh	r3, [r7, #0]
    62f8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    62fa:	4a11      	ldr	r2, [pc, #68]	; (6340 <sd_mmc_spi_start_read_blocks+0x84>)
    62fc:	6811      	ldr	r1, [r2, #0]
    62fe:	468c      	mov	ip, r1
    6300:	4463      	add	r3, ip
    6302:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    6304:	23ff      	movs	r3, #255	; 0xff
    6306:	2202      	movs	r2, #2
    6308:	a901      	add	r1, sp, #4
    630a:	480b      	ldr	r0, [pc, #44]	; (6338 <sd_mmc_spi_start_read_blocks+0x7c>)
    630c:	47a8      	blx	r5
	while (nb_block--) {
    630e:	3c01      	subs	r4, #1
    6310:	b2a4      	uxth	r4, r4
    6312:	4b0c      	ldr	r3, [pc, #48]	; (6344 <sd_mmc_spi_start_read_blocks+0x88>)
    6314:	429c      	cmp	r4, r3
    6316:	d1e3      	bne.n	62e0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    6318:	4640      	mov	r0, r8
    631a:	b002      	add	sp, #8
    631c:	bc1c      	pop	{r2, r3, r4}
    631e:	4690      	mov	r8, r2
    6320:	469a      	mov	sl, r3
    6322:	46a3      	mov	fp, r4
    6324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    6326:	2301      	movs	r3, #1
    6328:	4698      	mov	r8, r3
    632a:	e7f5      	b.n	6318 <sd_mmc_spi_start_read_blocks+0x5c>
    632c:	200002c3 	.word	0x200002c3
    6330:	00005e0d 	.word	0x00005e0d
    6334:	200002bc 	.word	0x200002bc
    6338:	200002b0 	.word	0x200002b0
    633c:	000056b5 	.word	0x000056b5
    6340:	200002cc 	.word	0x200002cc
    6344:	0000ffff 	.word	0x0000ffff

00006348 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    6348:	2001      	movs	r0, #1
    634a:	4770      	bx	lr

0000634c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    634c:	b5f0      	push	{r4, r5, r6, r7, lr}
    634e:	46c6      	mov	lr, r8
    6350:	b500      	push	{lr}
    6352:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    6354:	2200      	movs	r2, #0
    6356:	4b15      	ldr	r3, [pc, #84]	; (63ac <sd_mmc_spi_start_write_blocks+0x60>)
    6358:	701a      	strb	r2, [r3, #0]
	pos = 0;
    635a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    635c:	4f14      	ldr	r7, [pc, #80]	; (63b0 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    635e:	4e15      	ldr	r6, [pc, #84]	; (63b4 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    6360:	e000      	b.n	6364 <sd_mmc_spi_start_write_blocks+0x18>
{
    6362:	0021      	movs	r1, r4
	while (nb_block--) {
    6364:	1e4c      	subs	r4, r1, #1
    6366:	b2a4      	uxth	r4, r4
    6368:	2900      	cmp	r1, #0
    636a:	d01b      	beq.n	63a4 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    636c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    636e:	8832      	ldrh	r2, [r6, #0]
    6370:	4643      	mov	r3, r8
    6372:	1959      	adds	r1, r3, r5
    6374:	4810      	ldr	r0, [pc, #64]	; (63b8 <sd_mmc_spi_start_write_blocks+0x6c>)
    6376:	4b11      	ldr	r3, [pc, #68]	; (63bc <sd_mmc_spi_start_write_blocks+0x70>)
    6378:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    637a:	8833      	ldrh	r3, [r6, #0]
    637c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    637e:	4a10      	ldr	r2, [pc, #64]	; (63c0 <sd_mmc_spi_start_write_blocks+0x74>)
    6380:	6811      	ldr	r1, [r2, #0]
    6382:	468c      	mov	ip, r1
    6384:	4463      	add	r3, ip
    6386:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    6388:	4b0e      	ldr	r3, [pc, #56]	; (63c4 <sd_mmc_spi_start_write_blocks+0x78>)
    638a:	4798      	blx	r3
    638c:	2800      	cmp	r0, #0
    638e:	d00a      	beq.n	63a6 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    6390:	2c00      	cmp	r4, #0
    6392:	d0e6      	beq.n	6362 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    6394:	4b0c      	ldr	r3, [pc, #48]	; (63c8 <sd_mmc_spi_start_write_blocks+0x7c>)
    6396:	4798      	blx	r3
    6398:	2800      	cmp	r0, #0
    639a:	d1e2      	bne.n	6362 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    639c:	2205      	movs	r2, #5
    639e:	4b03      	ldr	r3, [pc, #12]	; (63ac <sd_mmc_spi_start_write_blocks+0x60>)
    63a0:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    63a2:	e000      	b.n	63a6 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    63a4:	2001      	movs	r0, #1
}
    63a6:	bc04      	pop	{r2}
    63a8:	4690      	mov	r8, r2
    63aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63ac:	200002c3 	.word	0x200002c3
    63b0:	00005ce9 	.word	0x00005ce9
    63b4:	200002bc 	.word	0x200002bc
    63b8:	200002b0 	.word	0x200002b0
    63bc:	000058c1 	.word	0x000058c1
    63c0:	200002cc 	.word	0x200002cc
    63c4:	00005e79 	.word	0x00005e79
    63c8:	00005d31 	.word	0x00005d31

000063cc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    63cc:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    63ce:	4b05      	ldr	r3, [pc, #20]	; (63e4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    63d0:	4798      	blx	r3
    63d2:	2800      	cmp	r0, #0
    63d4:	d103      	bne.n	63de <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    63d6:	2205      	movs	r2, #5
    63d8:	4b03      	ldr	r3, [pc, #12]	; (63e8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    63da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    63dc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    63de:	4b03      	ldr	r3, [pc, #12]	; (63ec <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    63e0:	4798      	blx	r3
    63e2:	e7fb      	b.n	63dc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    63e4:	00005d31 	.word	0x00005d31
    63e8:	200002c3 	.word	0x200002c3
    63ec:	00005d95 	.word	0x00005d95

000063f0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    63f0:	2001      	movs	r0, #1
    63f2:	4770      	bx	lr

000063f4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    63f4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    63f6:	2301      	movs	r3, #1
    63f8:	2800      	cmp	r0, #0
    63fa:	d001      	beq.n	6400 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    63fc:	0018      	movs	r0, r3
    63fe:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    6400:	4b01      	ldr	r3, [pc, #4]	; (6408 <mem_test_unit_ready+0x14>)
    6402:	4798      	blx	r3
    6404:	0003      	movs	r3, r0
    6406:	e7f9      	b.n	63fc <mem_test_unit_ready+0x8>
    6408:	00005b19 	.word	0x00005b19

0000640c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    640c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    640e:	2301      	movs	r3, #1
    6410:	2800      	cmp	r0, #0
    6412:	d001      	beq.n	6418 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    6414:	0018      	movs	r0, r3
    6416:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    6418:	0008      	movs	r0, r1
    641a:	4b02      	ldr	r3, [pc, #8]	; (6424 <mem_read_capacity+0x18>)
    641c:	4798      	blx	r3
    641e:	0003      	movs	r3, r0
    6420:	e7f8      	b.n	6414 <mem_read_capacity+0x8>
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	00005b49 	.word	0x00005b49

00006428 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
    6428:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    642a:	2000      	movs	r0, #0
    642c:	2b00      	cmp	r3, #0
    642e:	d101      	bne.n	6434 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    6430:	3001      	adds	r0, #1
    6432:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    6434:	4770      	bx	lr
	...

00006438 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    6438:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    643a:	2301      	movs	r3, #1
    643c:	2800      	cmp	r0, #0
    643e:	d001      	beq.n	6444 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    6440:	0018      	movs	r0, r3
    6442:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    6444:	4b01      	ldr	r3, [pc, #4]	; (644c <mem_wr_protect+0x14>)
    6446:	4798      	blx	r3
    6448:	0003      	movs	r3, r0
    644a:	e7f9      	b.n	6440 <mem_wr_protect+0x8>
    644c:	00005b59 	.word	0x00005b59

00006450 <mem_removal>:


bool mem_removal(U8 lun)
{
    6450:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    6452:	2301      	movs	r3, #1
    6454:	2800      	cmp	r0, #0
    6456:	d001      	beq.n	645c <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    6458:	0018      	movs	r0, r3
    645a:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    645c:	4b01      	ldr	r3, [pc, #4]	; (6464 <mem_removal+0x14>)
    645e:	4798      	blx	r3
    6460:	0003      	movs	r3, r0
    6462:	e7f9      	b.n	6458 <mem_removal+0x8>
    6464:	00005b69 	.word	0x00005b69

00006468 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6468:	2800      	cmp	r0, #0
    646a:	d101      	bne.n	6470 <mem_name+0x8>
    646c:	4801      	ldr	r0, [pc, #4]	; (6474 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    646e:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    6470:	2000      	movs	r0, #0
    6472:	e7fc      	b.n	646e <mem_name+0x6>
    6474:	00007b0c 	.word	0x00007b0c

00006478 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
    6478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    647a:	0005      	movs	r5, r0
    647c:	000e      	movs	r6, r1
    647e:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
    6480:	4b07      	ldr	r3, [pc, #28]	; (64a0 <memory_2_usb+0x28>)
    6482:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    6484:	2401      	movs	r4, #1
    6486:	2d00      	cmp	r5, #0
    6488:	d003      	beq.n	6492 <memory_2_usb+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
    648a:	4b06      	ldr	r3, [pc, #24]	; (64a4 <memory_2_usb+0x2c>)
    648c:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    648e:	0020      	movs	r0, r4
    6490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
    6492:	0039      	movs	r1, r7
    6494:	0030      	movs	r0, r6
    6496:	4b04      	ldr	r3, [pc, #16]	; (64a8 <memory_2_usb+0x30>)
    6498:	4798      	blx	r3
    649a:	0004      	movs	r4, r0
    649c:	e7f5      	b.n	648a <memory_2_usb+0x12>
    649e:	46c0      	nop			; (mov r8, r8)
    64a0:	00004001 	.word	0x00004001
    64a4:	00004003 	.word	0x00004003
    64a8:	00005c1d 	.word	0x00005c1d

000064ac <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
    64ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64ae:	0005      	movs	r5, r0
    64b0:	000e      	movs	r6, r1
    64b2:	0017      	movs	r7, r2
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
    64b4:	4b07      	ldr	r3, [pc, #28]	; (64d4 <usb_2_memory+0x28>)
    64b6:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    64b8:	2401      	movs	r4, #1
    64ba:	2d00      	cmp	r5, #0
    64bc:	d003      	beq.n	64c6 <usb_2_memory+0x1a>
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
    64be:	4b06      	ldr	r3, [pc, #24]	; (64d8 <usb_2_memory+0x2c>)
    64c0:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    64c2:	0020      	movs	r0, r4
    64c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
    64c6:	0039      	movs	r1, r7
    64c8:	0030      	movs	r0, r6
    64ca:	4b04      	ldr	r3, [pc, #16]	; (64dc <usb_2_memory+0x30>)
    64cc:	4798      	blx	r3
    64ce:	0004      	movs	r4, r0
    64d0:	e7f5      	b.n	64be <usb_2_memory+0x12>
    64d2:	46c0      	nop			; (mov r8, r8)
    64d4:	00004005 	.word	0x00004005
    64d8:	00004007 	.word	0x00004007
    64dc:	00005cd5 	.word	0x00005cd5

000064e0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    64e0:	4b0c      	ldr	r3, [pc, #48]	; (6514 <cpu_irq_enter_critical+0x34>)
    64e2:	681b      	ldr	r3, [r3, #0]
    64e4:	2b00      	cmp	r3, #0
    64e6:	d106      	bne.n	64f6 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    64e8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    64ec:	2b00      	cmp	r3, #0
    64ee:	d007      	beq.n	6500 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    64f0:	2200      	movs	r2, #0
    64f2:	4b09      	ldr	r3, [pc, #36]	; (6518 <cpu_irq_enter_critical+0x38>)
    64f4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    64f6:	4a07      	ldr	r2, [pc, #28]	; (6514 <cpu_irq_enter_critical+0x34>)
    64f8:	6813      	ldr	r3, [r2, #0]
    64fa:	3301      	adds	r3, #1
    64fc:	6013      	str	r3, [r2, #0]
}
    64fe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6500:	b672      	cpsid	i
    6502:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6506:	2200      	movs	r2, #0
    6508:	4b04      	ldr	r3, [pc, #16]	; (651c <cpu_irq_enter_critical+0x3c>)
    650a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    650c:	3201      	adds	r2, #1
    650e:	4b02      	ldr	r3, [pc, #8]	; (6518 <cpu_irq_enter_critical+0x38>)
    6510:	701a      	strb	r2, [r3, #0]
    6512:	e7f0      	b.n	64f6 <cpu_irq_enter_critical+0x16>
    6514:	200002d4 	.word	0x200002d4
    6518:	200002d8 	.word	0x200002d8
    651c:	200000f9 	.word	0x200000f9

00006520 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6520:	4b08      	ldr	r3, [pc, #32]	; (6544 <cpu_irq_leave_critical+0x24>)
    6522:	681a      	ldr	r2, [r3, #0]
    6524:	3a01      	subs	r2, #1
    6526:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6528:	681b      	ldr	r3, [r3, #0]
    652a:	2b00      	cmp	r3, #0
    652c:	d109      	bne.n	6542 <cpu_irq_leave_critical+0x22>
    652e:	4b06      	ldr	r3, [pc, #24]	; (6548 <cpu_irq_leave_critical+0x28>)
    6530:	781b      	ldrb	r3, [r3, #0]
    6532:	2b00      	cmp	r3, #0
    6534:	d005      	beq.n	6542 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    6536:	2201      	movs	r2, #1
    6538:	4b04      	ldr	r3, [pc, #16]	; (654c <cpu_irq_leave_critical+0x2c>)
    653a:	701a      	strb	r2, [r3, #0]
    653c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6540:	b662      	cpsie	i
	}
}
    6542:	4770      	bx	lr
    6544:	200002d4 	.word	0x200002d4
    6548:	200002d8 	.word	0x200002d8
    654c:	200000f9 	.word	0x200000f9

00006550 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    6550:	b5f0      	push	{r4, r5, r6, r7, lr}
    6552:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    6554:	ac01      	add	r4, sp, #4
    6556:	2501      	movs	r5, #1
    6558:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    655a:	2700      	movs	r7, #0
    655c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    655e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    6560:	0021      	movs	r1, r4
    6562:	203e      	movs	r0, #62	; 0x3e
    6564:	4e06      	ldr	r6, [pc, #24]	; (6580 <system_board_init+0x30>)
    6566:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    6568:	2280      	movs	r2, #128	; 0x80
    656a:	05d2      	lsls	r2, r2, #23
    656c:	4b05      	ldr	r3, [pc, #20]	; (6584 <system_board_init+0x34>)
    656e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6570:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6572:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6574:	0021      	movs	r1, r4
    6576:	200f      	movs	r0, #15
    6578:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    657a:	b003      	add	sp, #12
    657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	00006589 	.word	0x00006589
    6584:	41004480 	.word	0x41004480

00006588 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6588:	b500      	push	{lr}
    658a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    658c:	ab01      	add	r3, sp, #4
    658e:	2280      	movs	r2, #128	; 0x80
    6590:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6592:	780a      	ldrb	r2, [r1, #0]
    6594:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6596:	784a      	ldrb	r2, [r1, #1]
    6598:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    659a:	788a      	ldrb	r2, [r1, #2]
    659c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    659e:	0019      	movs	r1, r3
    65a0:	4b01      	ldr	r3, [pc, #4]	; (65a8 <port_pin_set_config+0x20>)
    65a2:	4798      	blx	r3
}
    65a4:	b003      	add	sp, #12
    65a6:	bd00      	pop	{pc}
    65a8:	000068dd 	.word	0x000068dd

000065ac <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    65ac:	4a06      	ldr	r2, [pc, #24]	; (65c8 <system_gclk_init+0x1c>)
    65ae:	6993      	ldr	r3, [r2, #24]
    65b0:	2108      	movs	r1, #8
    65b2:	430b      	orrs	r3, r1
    65b4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    65b6:	2201      	movs	r2, #1
    65b8:	4b04      	ldr	r3, [pc, #16]	; (65cc <system_gclk_init+0x20>)
    65ba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    65bc:	0019      	movs	r1, r3
    65be:	780b      	ldrb	r3, [r1, #0]
    65c0:	4213      	tst	r3, r2
    65c2:	d1fc      	bne.n	65be <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    65c4:	4770      	bx	lr
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	40000400 	.word	0x40000400
    65cc:	40000c00 	.word	0x40000c00

000065d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    65d0:	b570      	push	{r4, r5, r6, lr}
    65d2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    65d4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    65d6:	780d      	ldrb	r5, [r1, #0]
    65d8:	022d      	lsls	r5, r5, #8
    65da:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    65dc:	784b      	ldrb	r3, [r1, #1]
    65de:	2b00      	cmp	r3, #0
    65e0:	d002      	beq.n	65e8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    65e2:	2380      	movs	r3, #128	; 0x80
    65e4:	02db      	lsls	r3, r3, #11
    65e6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    65e8:	7a4b      	ldrb	r3, [r1, #9]
    65ea:	2b00      	cmp	r3, #0
    65ec:	d002      	beq.n	65f4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    65ee:	2380      	movs	r3, #128	; 0x80
    65f0:	031b      	lsls	r3, r3, #12
    65f2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    65f4:	6848      	ldr	r0, [r1, #4]
    65f6:	2801      	cmp	r0, #1
    65f8:	d910      	bls.n	661c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    65fa:	1e43      	subs	r3, r0, #1
    65fc:	4218      	tst	r0, r3
    65fe:	d134      	bne.n	666a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6600:	2802      	cmp	r0, #2
    6602:	d930      	bls.n	6666 <system_gclk_gen_set_config+0x96>
    6604:	2302      	movs	r3, #2
    6606:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6608:	3201      	adds	r2, #1
						mask <<= 1) {
    660a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    660c:	4298      	cmp	r0, r3
    660e:	d8fb      	bhi.n	6608 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6610:	0212      	lsls	r2, r2, #8
    6612:	4332      	orrs	r2, r6
    6614:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6616:	2380      	movs	r3, #128	; 0x80
    6618:	035b      	lsls	r3, r3, #13
    661a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    661c:	7a0b      	ldrb	r3, [r1, #8]
    661e:	2b00      	cmp	r3, #0
    6620:	d002      	beq.n	6628 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6622:	2380      	movs	r3, #128	; 0x80
    6624:	039b      	lsls	r3, r3, #14
    6626:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6628:	4a13      	ldr	r2, [pc, #76]	; (6678 <system_gclk_gen_set_config+0xa8>)
    662a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    662c:	b25b      	sxtb	r3, r3
    662e:	2b00      	cmp	r3, #0
    6630:	dbfb      	blt.n	662a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    6632:	4b12      	ldr	r3, [pc, #72]	; (667c <system_gclk_gen_set_config+0xac>)
    6634:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6636:	4b12      	ldr	r3, [pc, #72]	; (6680 <system_gclk_gen_set_config+0xb0>)
    6638:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    663a:	4a0f      	ldr	r2, [pc, #60]	; (6678 <system_gclk_gen_set_config+0xa8>)
    663c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    663e:	b25b      	sxtb	r3, r3
    6640:	2b00      	cmp	r3, #0
    6642:	dbfb      	blt.n	663c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6644:	4b0c      	ldr	r3, [pc, #48]	; (6678 <system_gclk_gen_set_config+0xa8>)
    6646:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6648:	001a      	movs	r2, r3
    664a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    664c:	b25b      	sxtb	r3, r3
    664e:	2b00      	cmp	r3, #0
    6650:	dbfb      	blt.n	664a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6652:	4a09      	ldr	r2, [pc, #36]	; (6678 <system_gclk_gen_set_config+0xa8>)
    6654:	6853      	ldr	r3, [r2, #4]
    6656:	2180      	movs	r1, #128	; 0x80
    6658:	0249      	lsls	r1, r1, #9
    665a:	400b      	ands	r3, r1
    665c:	431d      	orrs	r5, r3
    665e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6660:	4b08      	ldr	r3, [pc, #32]	; (6684 <system_gclk_gen_set_config+0xb4>)
    6662:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6664:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    6666:	2200      	movs	r2, #0
    6668:	e7d2      	b.n	6610 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    666a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    666c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    666e:	2380      	movs	r3, #128	; 0x80
    6670:	029b      	lsls	r3, r3, #10
    6672:	431d      	orrs	r5, r3
    6674:	e7d2      	b.n	661c <system_gclk_gen_set_config+0x4c>
    6676:	46c0      	nop			; (mov r8, r8)
    6678:	40000c00 	.word	0x40000c00
    667c:	000064e1 	.word	0x000064e1
    6680:	40000c08 	.word	0x40000c08
    6684:	00006521 	.word	0x00006521

00006688 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6688:	b510      	push	{r4, lr}
    668a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    668c:	4a0b      	ldr	r2, [pc, #44]	; (66bc <system_gclk_gen_enable+0x34>)
    668e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6690:	b25b      	sxtb	r3, r3
    6692:	2b00      	cmp	r3, #0
    6694:	dbfb      	blt.n	668e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    6696:	4b0a      	ldr	r3, [pc, #40]	; (66c0 <system_gclk_gen_enable+0x38>)
    6698:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    669a:	4b0a      	ldr	r3, [pc, #40]	; (66c4 <system_gclk_gen_enable+0x3c>)
    669c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    669e:	4a07      	ldr	r2, [pc, #28]	; (66bc <system_gclk_gen_enable+0x34>)
    66a0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    66a2:	b25b      	sxtb	r3, r3
    66a4:	2b00      	cmp	r3, #0
    66a6:	dbfb      	blt.n	66a0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    66a8:	4a04      	ldr	r2, [pc, #16]	; (66bc <system_gclk_gen_enable+0x34>)
    66aa:	6851      	ldr	r1, [r2, #4]
    66ac:	2380      	movs	r3, #128	; 0x80
    66ae:	025b      	lsls	r3, r3, #9
    66b0:	430b      	orrs	r3, r1
    66b2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    66b4:	4b04      	ldr	r3, [pc, #16]	; (66c8 <system_gclk_gen_enable+0x40>)
    66b6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    66b8:	bd10      	pop	{r4, pc}
    66ba:	46c0      	nop			; (mov r8, r8)
    66bc:	40000c00 	.word	0x40000c00
    66c0:	000064e1 	.word	0x000064e1
    66c4:	40000c04 	.word	0x40000c04
    66c8:	00006521 	.word	0x00006521

000066cc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    66cc:	b570      	push	{r4, r5, r6, lr}
    66ce:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    66d0:	4a1a      	ldr	r2, [pc, #104]	; (673c <system_gclk_gen_get_hz+0x70>)
    66d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    66d4:	b25b      	sxtb	r3, r3
    66d6:	2b00      	cmp	r3, #0
    66d8:	dbfb      	blt.n	66d2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    66da:	4b19      	ldr	r3, [pc, #100]	; (6740 <system_gclk_gen_get_hz+0x74>)
    66dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    66de:	4b19      	ldr	r3, [pc, #100]	; (6744 <system_gclk_gen_get_hz+0x78>)
    66e0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    66e2:	4a16      	ldr	r2, [pc, #88]	; (673c <system_gclk_gen_get_hz+0x70>)
    66e4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    66e6:	b25b      	sxtb	r3, r3
    66e8:	2b00      	cmp	r3, #0
    66ea:	dbfb      	blt.n	66e4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    66ec:	4e13      	ldr	r6, [pc, #76]	; (673c <system_gclk_gen_get_hz+0x70>)
    66ee:	6870      	ldr	r0, [r6, #4]
    66f0:	04c0      	lsls	r0, r0, #19
    66f2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    66f4:	4b14      	ldr	r3, [pc, #80]	; (6748 <system_gclk_gen_get_hz+0x7c>)
    66f6:	4798      	blx	r3
    66f8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    66fa:	4b12      	ldr	r3, [pc, #72]	; (6744 <system_gclk_gen_get_hz+0x78>)
    66fc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    66fe:	6876      	ldr	r6, [r6, #4]
    6700:	02f6      	lsls	r6, r6, #11
    6702:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6704:	4b11      	ldr	r3, [pc, #68]	; (674c <system_gclk_gen_get_hz+0x80>)
    6706:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6708:	4a0c      	ldr	r2, [pc, #48]	; (673c <system_gclk_gen_get_hz+0x70>)
    670a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    670c:	b25b      	sxtb	r3, r3
    670e:	2b00      	cmp	r3, #0
    6710:	dbfb      	blt.n	670a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6712:	4b0a      	ldr	r3, [pc, #40]	; (673c <system_gclk_gen_get_hz+0x70>)
    6714:	689c      	ldr	r4, [r3, #8]
    6716:	0224      	lsls	r4, r4, #8
    6718:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    671a:	4b0d      	ldr	r3, [pc, #52]	; (6750 <system_gclk_gen_get_hz+0x84>)
    671c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    671e:	2e00      	cmp	r6, #0
    6720:	d107      	bne.n	6732 <system_gclk_gen_get_hz+0x66>
    6722:	2c01      	cmp	r4, #1
    6724:	d907      	bls.n	6736 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    6726:	0021      	movs	r1, r4
    6728:	0028      	movs	r0, r5
    672a:	4b0a      	ldr	r3, [pc, #40]	; (6754 <system_gclk_gen_get_hz+0x88>)
    672c:	4798      	blx	r3
    672e:	0005      	movs	r5, r0
    6730:	e001      	b.n	6736 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    6732:	3401      	adds	r4, #1
    6734:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    6736:	0028      	movs	r0, r5
    6738:	bd70      	pop	{r4, r5, r6, pc}
    673a:	46c0      	nop			; (mov r8, r8)
    673c:	40000c00 	.word	0x40000c00
    6740:	000064e1 	.word	0x000064e1
    6744:	40000c04 	.word	0x40000c04
    6748:	0000290d 	.word	0x0000290d
    674c:	40000c08 	.word	0x40000c08
    6750:	00006521 	.word	0x00006521
    6754:	00006a5d 	.word	0x00006a5d

00006758 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6758:	b510      	push	{r4, lr}
    675a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    675c:	4b06      	ldr	r3, [pc, #24]	; (6778 <system_gclk_chan_enable+0x20>)
    675e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6760:	4b06      	ldr	r3, [pc, #24]	; (677c <system_gclk_chan_enable+0x24>)
    6762:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6764:	4a06      	ldr	r2, [pc, #24]	; (6780 <system_gclk_chan_enable+0x28>)
    6766:	8853      	ldrh	r3, [r2, #2]
    6768:	2180      	movs	r1, #128	; 0x80
    676a:	01c9      	lsls	r1, r1, #7
    676c:	430b      	orrs	r3, r1
    676e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6770:	4b04      	ldr	r3, [pc, #16]	; (6784 <system_gclk_chan_enable+0x2c>)
    6772:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6774:	bd10      	pop	{r4, pc}
    6776:	46c0      	nop			; (mov r8, r8)
    6778:	000064e1 	.word	0x000064e1
    677c:	40000c02 	.word	0x40000c02
    6780:	40000c00 	.word	0x40000c00
    6784:	00006521 	.word	0x00006521

00006788 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6788:	b510      	push	{r4, lr}
    678a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    678c:	4b0f      	ldr	r3, [pc, #60]	; (67cc <system_gclk_chan_disable+0x44>)
    678e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6790:	4b0f      	ldr	r3, [pc, #60]	; (67d0 <system_gclk_chan_disable+0x48>)
    6792:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6794:	4a0f      	ldr	r2, [pc, #60]	; (67d4 <system_gclk_chan_disable+0x4c>)
    6796:	8853      	ldrh	r3, [r2, #2]
    6798:	051b      	lsls	r3, r3, #20
    679a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    679c:	8853      	ldrh	r3, [r2, #2]
    679e:	490e      	ldr	r1, [pc, #56]	; (67d8 <system_gclk_chan_disable+0x50>)
    67a0:	400b      	ands	r3, r1
    67a2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    67a4:	8853      	ldrh	r3, [r2, #2]
    67a6:	490d      	ldr	r1, [pc, #52]	; (67dc <system_gclk_chan_disable+0x54>)
    67a8:	400b      	ands	r3, r1
    67aa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    67ac:	0011      	movs	r1, r2
    67ae:	2280      	movs	r2, #128	; 0x80
    67b0:	01d2      	lsls	r2, r2, #7
    67b2:	884b      	ldrh	r3, [r1, #2]
    67b4:	4213      	tst	r3, r2
    67b6:	d1fc      	bne.n	67b2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    67b8:	4906      	ldr	r1, [pc, #24]	; (67d4 <system_gclk_chan_disable+0x4c>)
    67ba:	884a      	ldrh	r2, [r1, #2]
    67bc:	0203      	lsls	r3, r0, #8
    67be:	4806      	ldr	r0, [pc, #24]	; (67d8 <system_gclk_chan_disable+0x50>)
    67c0:	4002      	ands	r2, r0
    67c2:	4313      	orrs	r3, r2
    67c4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    67c6:	4b06      	ldr	r3, [pc, #24]	; (67e0 <system_gclk_chan_disable+0x58>)
    67c8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    67ca:	bd10      	pop	{r4, pc}
    67cc:	000064e1 	.word	0x000064e1
    67d0:	40000c02 	.word	0x40000c02
    67d4:	40000c00 	.word	0x40000c00
    67d8:	fffff0ff 	.word	0xfffff0ff
    67dc:	ffffbfff 	.word	0xffffbfff
    67e0:	00006521 	.word	0x00006521

000067e4 <system_gclk_chan_set_config>:
{
    67e4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    67e6:	780c      	ldrb	r4, [r1, #0]
    67e8:	0224      	lsls	r4, r4, #8
    67ea:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    67ec:	4b02      	ldr	r3, [pc, #8]	; (67f8 <system_gclk_chan_set_config+0x14>)
    67ee:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    67f0:	b2a4      	uxth	r4, r4
    67f2:	4b02      	ldr	r3, [pc, #8]	; (67fc <system_gclk_chan_set_config+0x18>)
    67f4:	805c      	strh	r4, [r3, #2]
}
    67f6:	bd10      	pop	{r4, pc}
    67f8:	00006789 	.word	0x00006789
    67fc:	40000c00 	.word	0x40000c00

00006800 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6800:	b510      	push	{r4, lr}
    6802:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6804:	4b06      	ldr	r3, [pc, #24]	; (6820 <system_gclk_chan_get_hz+0x20>)
    6806:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6808:	4b06      	ldr	r3, [pc, #24]	; (6824 <system_gclk_chan_get_hz+0x24>)
    680a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    680c:	4b06      	ldr	r3, [pc, #24]	; (6828 <system_gclk_chan_get_hz+0x28>)
    680e:	885c      	ldrh	r4, [r3, #2]
    6810:	0524      	lsls	r4, r4, #20
    6812:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6814:	4b05      	ldr	r3, [pc, #20]	; (682c <system_gclk_chan_get_hz+0x2c>)
    6816:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6818:	0020      	movs	r0, r4
    681a:	4b05      	ldr	r3, [pc, #20]	; (6830 <system_gclk_chan_get_hz+0x30>)
    681c:	4798      	blx	r3
}
    681e:	bd10      	pop	{r4, pc}
    6820:	000064e1 	.word	0x000064e1
    6824:	40000c02 	.word	0x40000c02
    6828:	40000c00 	.word	0x40000c00
    682c:	00006521 	.word	0x00006521
    6830:	000066cd 	.word	0x000066cd

00006834 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6834:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6836:	78d3      	ldrb	r3, [r2, #3]
    6838:	2b00      	cmp	r3, #0
    683a:	d135      	bne.n	68a8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    683c:	7813      	ldrb	r3, [r2, #0]
    683e:	2b80      	cmp	r3, #128	; 0x80
    6840:	d029      	beq.n	6896 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6842:	061b      	lsls	r3, r3, #24
    6844:	2480      	movs	r4, #128	; 0x80
    6846:	0264      	lsls	r4, r4, #9
    6848:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    684a:	7854      	ldrb	r4, [r2, #1]
    684c:	2502      	movs	r5, #2
    684e:	43ac      	bics	r4, r5
    6850:	d106      	bne.n	6860 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6852:	7894      	ldrb	r4, [r2, #2]
    6854:	2c00      	cmp	r4, #0
    6856:	d120      	bne.n	689a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6858:	2480      	movs	r4, #128	; 0x80
    685a:	02a4      	lsls	r4, r4, #10
    685c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    685e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6860:	7854      	ldrb	r4, [r2, #1]
    6862:	3c01      	subs	r4, #1
    6864:	2c01      	cmp	r4, #1
    6866:	d91c      	bls.n	68a2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6868:	040d      	lsls	r5, r1, #16
    686a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    686c:	24a0      	movs	r4, #160	; 0xa0
    686e:	05e4      	lsls	r4, r4, #23
    6870:	432c      	orrs	r4, r5
    6872:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6874:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6876:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6878:	24d0      	movs	r4, #208	; 0xd0
    687a:	0624      	lsls	r4, r4, #24
    687c:	432c      	orrs	r4, r5
    687e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6880:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6882:	78d4      	ldrb	r4, [r2, #3]
    6884:	2c00      	cmp	r4, #0
    6886:	d122      	bne.n	68ce <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6888:	035b      	lsls	r3, r3, #13
    688a:	d51c      	bpl.n	68c6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    688c:	7893      	ldrb	r3, [r2, #2]
    688e:	2b01      	cmp	r3, #1
    6890:	d01e      	beq.n	68d0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6892:	6141      	str	r1, [r0, #20]
    6894:	e017      	b.n	68c6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6896:	2300      	movs	r3, #0
    6898:	e7d7      	b.n	684a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    689a:	24c0      	movs	r4, #192	; 0xc0
    689c:	02e4      	lsls	r4, r4, #11
    689e:	4323      	orrs	r3, r4
    68a0:	e7dd      	b.n	685e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    68a2:	4c0d      	ldr	r4, [pc, #52]	; (68d8 <_system_pinmux_config+0xa4>)
    68a4:	4023      	ands	r3, r4
    68a6:	e7df      	b.n	6868 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    68a8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    68aa:	040c      	lsls	r4, r1, #16
    68ac:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    68ae:	23a0      	movs	r3, #160	; 0xa0
    68b0:	05db      	lsls	r3, r3, #23
    68b2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    68b4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    68b6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    68b8:	23d0      	movs	r3, #208	; 0xd0
    68ba:	061b      	lsls	r3, r3, #24
    68bc:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    68be:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    68c0:	78d3      	ldrb	r3, [r2, #3]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d103      	bne.n	68ce <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    68c6:	7853      	ldrb	r3, [r2, #1]
    68c8:	3b01      	subs	r3, #1
    68ca:	2b01      	cmp	r3, #1
    68cc:	d902      	bls.n	68d4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    68ce:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    68d0:	6181      	str	r1, [r0, #24]
    68d2:	e7f8      	b.n	68c6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    68d4:	6081      	str	r1, [r0, #8]
}
    68d6:	e7fa      	b.n	68ce <_system_pinmux_config+0x9a>
    68d8:	fffbffff 	.word	0xfffbffff

000068dc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    68dc:	b510      	push	{r4, lr}
    68de:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    68e0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    68e2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    68e4:	2900      	cmp	r1, #0
    68e6:	d104      	bne.n	68f2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    68e8:	0943      	lsrs	r3, r0, #5
    68ea:	01db      	lsls	r3, r3, #7
    68ec:	4905      	ldr	r1, [pc, #20]	; (6904 <system_pinmux_pin_set_config+0x28>)
    68ee:	468c      	mov	ip, r1
    68f0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    68f2:	241f      	movs	r4, #31
    68f4:	4020      	ands	r0, r4
    68f6:	2101      	movs	r1, #1
    68f8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    68fa:	0018      	movs	r0, r3
    68fc:	4b02      	ldr	r3, [pc, #8]	; (6908 <system_pinmux_pin_set_config+0x2c>)
    68fe:	4798      	blx	r3
}
    6900:	bd10      	pop	{r4, pc}
    6902:	46c0      	nop			; (mov r8, r8)
    6904:	41004400 	.word	0x41004400
    6908:	00006835 	.word	0x00006835

0000690c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    690c:	4770      	bx	lr
	...

00006910 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6910:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6912:	4b05      	ldr	r3, [pc, #20]	; (6928 <system_init+0x18>)
    6914:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6916:	4b05      	ldr	r3, [pc, #20]	; (692c <system_init+0x1c>)
    6918:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    691a:	4b05      	ldr	r3, [pc, #20]	; (6930 <system_init+0x20>)
    691c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    691e:	4b05      	ldr	r3, [pc, #20]	; (6934 <system_init+0x24>)
    6920:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6922:	4b05      	ldr	r3, [pc, #20]	; (6938 <system_init+0x28>)
    6924:	4798      	blx	r3
}
    6926:	bd10      	pop	{r4, pc}
    6928:	00002b89 	.word	0x00002b89
    692c:	00006551 	.word	0x00006551
    6930:	0000690d 	.word	0x0000690d
    6934:	000021d1 	.word	0x000021d1
    6938:	0000690d 	.word	0x0000690d

0000693c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    693c:	e7fe      	b.n	693c <Dummy_Handler>
	...

00006940 <Reset_Handler>:
{
    6940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6942:	4a2a      	ldr	r2, [pc, #168]	; (69ec <Reset_Handler+0xac>)
    6944:	4b2a      	ldr	r3, [pc, #168]	; (69f0 <Reset_Handler+0xb0>)
    6946:	429a      	cmp	r2, r3
    6948:	d011      	beq.n	696e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    694a:	001a      	movs	r2, r3
    694c:	4b29      	ldr	r3, [pc, #164]	; (69f4 <Reset_Handler+0xb4>)
    694e:	429a      	cmp	r2, r3
    6950:	d20d      	bcs.n	696e <Reset_Handler+0x2e>
    6952:	4a29      	ldr	r2, [pc, #164]	; (69f8 <Reset_Handler+0xb8>)
    6954:	3303      	adds	r3, #3
    6956:	1a9b      	subs	r3, r3, r2
    6958:	089b      	lsrs	r3, r3, #2
    695a:	3301      	adds	r3, #1
    695c:	009b      	lsls	r3, r3, #2
    695e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6960:	4823      	ldr	r0, [pc, #140]	; (69f0 <Reset_Handler+0xb0>)
    6962:	4922      	ldr	r1, [pc, #136]	; (69ec <Reset_Handler+0xac>)
    6964:	588c      	ldr	r4, [r1, r2]
    6966:	5084      	str	r4, [r0, r2]
    6968:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    696a:	429a      	cmp	r2, r3
    696c:	d1fa      	bne.n	6964 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    696e:	4a23      	ldr	r2, [pc, #140]	; (69fc <Reset_Handler+0xbc>)
    6970:	4b23      	ldr	r3, [pc, #140]	; (6a00 <Reset_Handler+0xc0>)
    6972:	429a      	cmp	r2, r3
    6974:	d20a      	bcs.n	698c <Reset_Handler+0x4c>
    6976:	43d3      	mvns	r3, r2
    6978:	4921      	ldr	r1, [pc, #132]	; (6a00 <Reset_Handler+0xc0>)
    697a:	185b      	adds	r3, r3, r1
    697c:	2103      	movs	r1, #3
    697e:	438b      	bics	r3, r1
    6980:	3304      	adds	r3, #4
    6982:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6984:	2100      	movs	r1, #0
    6986:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6988:	4293      	cmp	r3, r2
    698a:	d1fc      	bne.n	6986 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    698c:	4a1d      	ldr	r2, [pc, #116]	; (6a04 <Reset_Handler+0xc4>)
    698e:	21ff      	movs	r1, #255	; 0xff
    6990:	4b1d      	ldr	r3, [pc, #116]	; (6a08 <Reset_Handler+0xc8>)
    6992:	438b      	bics	r3, r1
    6994:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6996:	39fd      	subs	r1, #253	; 0xfd
    6998:	2390      	movs	r3, #144	; 0x90
    699a:	005b      	lsls	r3, r3, #1
    699c:	4a1b      	ldr	r2, [pc, #108]	; (6a0c <Reset_Handler+0xcc>)
    699e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    69a0:	4a1b      	ldr	r2, [pc, #108]	; (6a10 <Reset_Handler+0xd0>)
    69a2:	78d3      	ldrb	r3, [r2, #3]
    69a4:	2503      	movs	r5, #3
    69a6:	43ab      	bics	r3, r5
    69a8:	2402      	movs	r4, #2
    69aa:	4323      	orrs	r3, r4
    69ac:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    69ae:	78d3      	ldrb	r3, [r2, #3]
    69b0:	270c      	movs	r7, #12
    69b2:	43bb      	bics	r3, r7
    69b4:	2608      	movs	r6, #8
    69b6:	4333      	orrs	r3, r6
    69b8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    69ba:	4b16      	ldr	r3, [pc, #88]	; (6a14 <Reset_Handler+0xd4>)
    69bc:	7b98      	ldrb	r0, [r3, #14]
    69be:	2230      	movs	r2, #48	; 0x30
    69c0:	4390      	bics	r0, r2
    69c2:	2220      	movs	r2, #32
    69c4:	4310      	orrs	r0, r2
    69c6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    69c8:	7b99      	ldrb	r1, [r3, #14]
    69ca:	43b9      	bics	r1, r7
    69cc:	4331      	orrs	r1, r6
    69ce:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    69d0:	7b9a      	ldrb	r2, [r3, #14]
    69d2:	43aa      	bics	r2, r5
    69d4:	4322      	orrs	r2, r4
    69d6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    69d8:	4a0f      	ldr	r2, [pc, #60]	; (6a18 <Reset_Handler+0xd8>)
    69da:	6853      	ldr	r3, [r2, #4]
    69dc:	2180      	movs	r1, #128	; 0x80
    69de:	430b      	orrs	r3, r1
    69e0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    69e2:	4b0e      	ldr	r3, [pc, #56]	; (6a1c <Reset_Handler+0xdc>)
    69e4:	4798      	blx	r3
        main();
    69e6:	4b0e      	ldr	r3, [pc, #56]	; (6a20 <Reset_Handler+0xe0>)
    69e8:	4798      	blx	r3
    69ea:	e7fe      	b.n	69ea <Reset_Handler+0xaa>
    69ec:	00007bb0 	.word	0x00007bb0
    69f0:	20000000 	.word	0x20000000
    69f4:	20000160 	.word	0x20000160
    69f8:	20000004 	.word	0x20000004
    69fc:	20000160 	.word	0x20000160
    6a00:	20000b30 	.word	0x20000b30
    6a04:	e000ed00 	.word	0xe000ed00
    6a08:	00000000 	.word	0x00000000
    6a0c:	41007000 	.word	0x41007000
    6a10:	41005000 	.word	0x41005000
    6a14:	41004800 	.word	0x41004800
    6a18:	41004000 	.word	0x41004000
    6a1c:	00006ff1 	.word	0x00006ff1
    6a20:	00003b51 	.word	0x00003b51

00006a24 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6a24:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6a26:	4a06      	ldr	r2, [pc, #24]	; (6a40 <_sbrk+0x1c>)
    6a28:	6812      	ldr	r2, [r2, #0]
    6a2a:	2a00      	cmp	r2, #0
    6a2c:	d004      	beq.n	6a38 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6a2e:	4a04      	ldr	r2, [pc, #16]	; (6a40 <_sbrk+0x1c>)
    6a30:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6a32:	18c3      	adds	r3, r0, r3
    6a34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6a36:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6a38:	4902      	ldr	r1, [pc, #8]	; (6a44 <_sbrk+0x20>)
    6a3a:	4a01      	ldr	r2, [pc, #4]	; (6a40 <_sbrk+0x1c>)
    6a3c:	6011      	str	r1, [r2, #0]
    6a3e:	e7f6      	b.n	6a2e <_sbrk+0xa>
    6a40:	200002dc 	.word	0x200002dc
    6a44:	20002b30 	.word	0x20002b30

00006a48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6a48:	2001      	movs	r0, #1
    6a4a:	4240      	negs	r0, r0
    6a4c:	4770      	bx	lr

00006a4e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6a4e:	2380      	movs	r3, #128	; 0x80
    6a50:	019b      	lsls	r3, r3, #6
    6a52:	604b      	str	r3, [r1, #4]

	return 0;
}
    6a54:	2000      	movs	r0, #0
    6a56:	4770      	bx	lr

00006a58 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6a58:	2000      	movs	r0, #0
    6a5a:	4770      	bx	lr

00006a5c <__udivsi3>:
    6a5c:	2200      	movs	r2, #0
    6a5e:	0843      	lsrs	r3, r0, #1
    6a60:	428b      	cmp	r3, r1
    6a62:	d374      	bcc.n	6b4e <__udivsi3+0xf2>
    6a64:	0903      	lsrs	r3, r0, #4
    6a66:	428b      	cmp	r3, r1
    6a68:	d35f      	bcc.n	6b2a <__udivsi3+0xce>
    6a6a:	0a03      	lsrs	r3, r0, #8
    6a6c:	428b      	cmp	r3, r1
    6a6e:	d344      	bcc.n	6afa <__udivsi3+0x9e>
    6a70:	0b03      	lsrs	r3, r0, #12
    6a72:	428b      	cmp	r3, r1
    6a74:	d328      	bcc.n	6ac8 <__udivsi3+0x6c>
    6a76:	0c03      	lsrs	r3, r0, #16
    6a78:	428b      	cmp	r3, r1
    6a7a:	d30d      	bcc.n	6a98 <__udivsi3+0x3c>
    6a7c:	22ff      	movs	r2, #255	; 0xff
    6a7e:	0209      	lsls	r1, r1, #8
    6a80:	ba12      	rev	r2, r2
    6a82:	0c03      	lsrs	r3, r0, #16
    6a84:	428b      	cmp	r3, r1
    6a86:	d302      	bcc.n	6a8e <__udivsi3+0x32>
    6a88:	1212      	asrs	r2, r2, #8
    6a8a:	0209      	lsls	r1, r1, #8
    6a8c:	d065      	beq.n	6b5a <__udivsi3+0xfe>
    6a8e:	0b03      	lsrs	r3, r0, #12
    6a90:	428b      	cmp	r3, r1
    6a92:	d319      	bcc.n	6ac8 <__udivsi3+0x6c>
    6a94:	e000      	b.n	6a98 <__udivsi3+0x3c>
    6a96:	0a09      	lsrs	r1, r1, #8
    6a98:	0bc3      	lsrs	r3, r0, #15
    6a9a:	428b      	cmp	r3, r1
    6a9c:	d301      	bcc.n	6aa2 <__udivsi3+0x46>
    6a9e:	03cb      	lsls	r3, r1, #15
    6aa0:	1ac0      	subs	r0, r0, r3
    6aa2:	4152      	adcs	r2, r2
    6aa4:	0b83      	lsrs	r3, r0, #14
    6aa6:	428b      	cmp	r3, r1
    6aa8:	d301      	bcc.n	6aae <__udivsi3+0x52>
    6aaa:	038b      	lsls	r3, r1, #14
    6aac:	1ac0      	subs	r0, r0, r3
    6aae:	4152      	adcs	r2, r2
    6ab0:	0b43      	lsrs	r3, r0, #13
    6ab2:	428b      	cmp	r3, r1
    6ab4:	d301      	bcc.n	6aba <__udivsi3+0x5e>
    6ab6:	034b      	lsls	r3, r1, #13
    6ab8:	1ac0      	subs	r0, r0, r3
    6aba:	4152      	adcs	r2, r2
    6abc:	0b03      	lsrs	r3, r0, #12
    6abe:	428b      	cmp	r3, r1
    6ac0:	d301      	bcc.n	6ac6 <__udivsi3+0x6a>
    6ac2:	030b      	lsls	r3, r1, #12
    6ac4:	1ac0      	subs	r0, r0, r3
    6ac6:	4152      	adcs	r2, r2
    6ac8:	0ac3      	lsrs	r3, r0, #11
    6aca:	428b      	cmp	r3, r1
    6acc:	d301      	bcc.n	6ad2 <__udivsi3+0x76>
    6ace:	02cb      	lsls	r3, r1, #11
    6ad0:	1ac0      	subs	r0, r0, r3
    6ad2:	4152      	adcs	r2, r2
    6ad4:	0a83      	lsrs	r3, r0, #10
    6ad6:	428b      	cmp	r3, r1
    6ad8:	d301      	bcc.n	6ade <__udivsi3+0x82>
    6ada:	028b      	lsls	r3, r1, #10
    6adc:	1ac0      	subs	r0, r0, r3
    6ade:	4152      	adcs	r2, r2
    6ae0:	0a43      	lsrs	r3, r0, #9
    6ae2:	428b      	cmp	r3, r1
    6ae4:	d301      	bcc.n	6aea <__udivsi3+0x8e>
    6ae6:	024b      	lsls	r3, r1, #9
    6ae8:	1ac0      	subs	r0, r0, r3
    6aea:	4152      	adcs	r2, r2
    6aec:	0a03      	lsrs	r3, r0, #8
    6aee:	428b      	cmp	r3, r1
    6af0:	d301      	bcc.n	6af6 <__udivsi3+0x9a>
    6af2:	020b      	lsls	r3, r1, #8
    6af4:	1ac0      	subs	r0, r0, r3
    6af6:	4152      	adcs	r2, r2
    6af8:	d2cd      	bcs.n	6a96 <__udivsi3+0x3a>
    6afa:	09c3      	lsrs	r3, r0, #7
    6afc:	428b      	cmp	r3, r1
    6afe:	d301      	bcc.n	6b04 <__udivsi3+0xa8>
    6b00:	01cb      	lsls	r3, r1, #7
    6b02:	1ac0      	subs	r0, r0, r3
    6b04:	4152      	adcs	r2, r2
    6b06:	0983      	lsrs	r3, r0, #6
    6b08:	428b      	cmp	r3, r1
    6b0a:	d301      	bcc.n	6b10 <__udivsi3+0xb4>
    6b0c:	018b      	lsls	r3, r1, #6
    6b0e:	1ac0      	subs	r0, r0, r3
    6b10:	4152      	adcs	r2, r2
    6b12:	0943      	lsrs	r3, r0, #5
    6b14:	428b      	cmp	r3, r1
    6b16:	d301      	bcc.n	6b1c <__udivsi3+0xc0>
    6b18:	014b      	lsls	r3, r1, #5
    6b1a:	1ac0      	subs	r0, r0, r3
    6b1c:	4152      	adcs	r2, r2
    6b1e:	0903      	lsrs	r3, r0, #4
    6b20:	428b      	cmp	r3, r1
    6b22:	d301      	bcc.n	6b28 <__udivsi3+0xcc>
    6b24:	010b      	lsls	r3, r1, #4
    6b26:	1ac0      	subs	r0, r0, r3
    6b28:	4152      	adcs	r2, r2
    6b2a:	08c3      	lsrs	r3, r0, #3
    6b2c:	428b      	cmp	r3, r1
    6b2e:	d301      	bcc.n	6b34 <__udivsi3+0xd8>
    6b30:	00cb      	lsls	r3, r1, #3
    6b32:	1ac0      	subs	r0, r0, r3
    6b34:	4152      	adcs	r2, r2
    6b36:	0883      	lsrs	r3, r0, #2
    6b38:	428b      	cmp	r3, r1
    6b3a:	d301      	bcc.n	6b40 <__udivsi3+0xe4>
    6b3c:	008b      	lsls	r3, r1, #2
    6b3e:	1ac0      	subs	r0, r0, r3
    6b40:	4152      	adcs	r2, r2
    6b42:	0843      	lsrs	r3, r0, #1
    6b44:	428b      	cmp	r3, r1
    6b46:	d301      	bcc.n	6b4c <__udivsi3+0xf0>
    6b48:	004b      	lsls	r3, r1, #1
    6b4a:	1ac0      	subs	r0, r0, r3
    6b4c:	4152      	adcs	r2, r2
    6b4e:	1a41      	subs	r1, r0, r1
    6b50:	d200      	bcs.n	6b54 <__udivsi3+0xf8>
    6b52:	4601      	mov	r1, r0
    6b54:	4152      	adcs	r2, r2
    6b56:	4610      	mov	r0, r2
    6b58:	4770      	bx	lr
    6b5a:	e7ff      	b.n	6b5c <__udivsi3+0x100>
    6b5c:	b501      	push	{r0, lr}
    6b5e:	2000      	movs	r0, #0
    6b60:	f000 f8f0 	bl	6d44 <__aeabi_idiv0>
    6b64:	bd02      	pop	{r1, pc}
    6b66:	46c0      	nop			; (mov r8, r8)

00006b68 <__aeabi_uidivmod>:
    6b68:	2900      	cmp	r1, #0
    6b6a:	d0f7      	beq.n	6b5c <__udivsi3+0x100>
    6b6c:	e776      	b.n	6a5c <__udivsi3>
    6b6e:	4770      	bx	lr

00006b70 <__divsi3>:
    6b70:	4603      	mov	r3, r0
    6b72:	430b      	orrs	r3, r1
    6b74:	d47f      	bmi.n	6c76 <__divsi3+0x106>
    6b76:	2200      	movs	r2, #0
    6b78:	0843      	lsrs	r3, r0, #1
    6b7a:	428b      	cmp	r3, r1
    6b7c:	d374      	bcc.n	6c68 <__divsi3+0xf8>
    6b7e:	0903      	lsrs	r3, r0, #4
    6b80:	428b      	cmp	r3, r1
    6b82:	d35f      	bcc.n	6c44 <__divsi3+0xd4>
    6b84:	0a03      	lsrs	r3, r0, #8
    6b86:	428b      	cmp	r3, r1
    6b88:	d344      	bcc.n	6c14 <__divsi3+0xa4>
    6b8a:	0b03      	lsrs	r3, r0, #12
    6b8c:	428b      	cmp	r3, r1
    6b8e:	d328      	bcc.n	6be2 <__divsi3+0x72>
    6b90:	0c03      	lsrs	r3, r0, #16
    6b92:	428b      	cmp	r3, r1
    6b94:	d30d      	bcc.n	6bb2 <__divsi3+0x42>
    6b96:	22ff      	movs	r2, #255	; 0xff
    6b98:	0209      	lsls	r1, r1, #8
    6b9a:	ba12      	rev	r2, r2
    6b9c:	0c03      	lsrs	r3, r0, #16
    6b9e:	428b      	cmp	r3, r1
    6ba0:	d302      	bcc.n	6ba8 <__divsi3+0x38>
    6ba2:	1212      	asrs	r2, r2, #8
    6ba4:	0209      	lsls	r1, r1, #8
    6ba6:	d065      	beq.n	6c74 <__divsi3+0x104>
    6ba8:	0b03      	lsrs	r3, r0, #12
    6baa:	428b      	cmp	r3, r1
    6bac:	d319      	bcc.n	6be2 <__divsi3+0x72>
    6bae:	e000      	b.n	6bb2 <__divsi3+0x42>
    6bb0:	0a09      	lsrs	r1, r1, #8
    6bb2:	0bc3      	lsrs	r3, r0, #15
    6bb4:	428b      	cmp	r3, r1
    6bb6:	d301      	bcc.n	6bbc <__divsi3+0x4c>
    6bb8:	03cb      	lsls	r3, r1, #15
    6bba:	1ac0      	subs	r0, r0, r3
    6bbc:	4152      	adcs	r2, r2
    6bbe:	0b83      	lsrs	r3, r0, #14
    6bc0:	428b      	cmp	r3, r1
    6bc2:	d301      	bcc.n	6bc8 <__divsi3+0x58>
    6bc4:	038b      	lsls	r3, r1, #14
    6bc6:	1ac0      	subs	r0, r0, r3
    6bc8:	4152      	adcs	r2, r2
    6bca:	0b43      	lsrs	r3, r0, #13
    6bcc:	428b      	cmp	r3, r1
    6bce:	d301      	bcc.n	6bd4 <__divsi3+0x64>
    6bd0:	034b      	lsls	r3, r1, #13
    6bd2:	1ac0      	subs	r0, r0, r3
    6bd4:	4152      	adcs	r2, r2
    6bd6:	0b03      	lsrs	r3, r0, #12
    6bd8:	428b      	cmp	r3, r1
    6bda:	d301      	bcc.n	6be0 <__divsi3+0x70>
    6bdc:	030b      	lsls	r3, r1, #12
    6bde:	1ac0      	subs	r0, r0, r3
    6be0:	4152      	adcs	r2, r2
    6be2:	0ac3      	lsrs	r3, r0, #11
    6be4:	428b      	cmp	r3, r1
    6be6:	d301      	bcc.n	6bec <__divsi3+0x7c>
    6be8:	02cb      	lsls	r3, r1, #11
    6bea:	1ac0      	subs	r0, r0, r3
    6bec:	4152      	adcs	r2, r2
    6bee:	0a83      	lsrs	r3, r0, #10
    6bf0:	428b      	cmp	r3, r1
    6bf2:	d301      	bcc.n	6bf8 <__divsi3+0x88>
    6bf4:	028b      	lsls	r3, r1, #10
    6bf6:	1ac0      	subs	r0, r0, r3
    6bf8:	4152      	adcs	r2, r2
    6bfa:	0a43      	lsrs	r3, r0, #9
    6bfc:	428b      	cmp	r3, r1
    6bfe:	d301      	bcc.n	6c04 <__divsi3+0x94>
    6c00:	024b      	lsls	r3, r1, #9
    6c02:	1ac0      	subs	r0, r0, r3
    6c04:	4152      	adcs	r2, r2
    6c06:	0a03      	lsrs	r3, r0, #8
    6c08:	428b      	cmp	r3, r1
    6c0a:	d301      	bcc.n	6c10 <__divsi3+0xa0>
    6c0c:	020b      	lsls	r3, r1, #8
    6c0e:	1ac0      	subs	r0, r0, r3
    6c10:	4152      	adcs	r2, r2
    6c12:	d2cd      	bcs.n	6bb0 <__divsi3+0x40>
    6c14:	09c3      	lsrs	r3, r0, #7
    6c16:	428b      	cmp	r3, r1
    6c18:	d301      	bcc.n	6c1e <__divsi3+0xae>
    6c1a:	01cb      	lsls	r3, r1, #7
    6c1c:	1ac0      	subs	r0, r0, r3
    6c1e:	4152      	adcs	r2, r2
    6c20:	0983      	lsrs	r3, r0, #6
    6c22:	428b      	cmp	r3, r1
    6c24:	d301      	bcc.n	6c2a <__divsi3+0xba>
    6c26:	018b      	lsls	r3, r1, #6
    6c28:	1ac0      	subs	r0, r0, r3
    6c2a:	4152      	adcs	r2, r2
    6c2c:	0943      	lsrs	r3, r0, #5
    6c2e:	428b      	cmp	r3, r1
    6c30:	d301      	bcc.n	6c36 <__divsi3+0xc6>
    6c32:	014b      	lsls	r3, r1, #5
    6c34:	1ac0      	subs	r0, r0, r3
    6c36:	4152      	adcs	r2, r2
    6c38:	0903      	lsrs	r3, r0, #4
    6c3a:	428b      	cmp	r3, r1
    6c3c:	d301      	bcc.n	6c42 <__divsi3+0xd2>
    6c3e:	010b      	lsls	r3, r1, #4
    6c40:	1ac0      	subs	r0, r0, r3
    6c42:	4152      	adcs	r2, r2
    6c44:	08c3      	lsrs	r3, r0, #3
    6c46:	428b      	cmp	r3, r1
    6c48:	d301      	bcc.n	6c4e <__divsi3+0xde>
    6c4a:	00cb      	lsls	r3, r1, #3
    6c4c:	1ac0      	subs	r0, r0, r3
    6c4e:	4152      	adcs	r2, r2
    6c50:	0883      	lsrs	r3, r0, #2
    6c52:	428b      	cmp	r3, r1
    6c54:	d301      	bcc.n	6c5a <__divsi3+0xea>
    6c56:	008b      	lsls	r3, r1, #2
    6c58:	1ac0      	subs	r0, r0, r3
    6c5a:	4152      	adcs	r2, r2
    6c5c:	0843      	lsrs	r3, r0, #1
    6c5e:	428b      	cmp	r3, r1
    6c60:	d301      	bcc.n	6c66 <__divsi3+0xf6>
    6c62:	004b      	lsls	r3, r1, #1
    6c64:	1ac0      	subs	r0, r0, r3
    6c66:	4152      	adcs	r2, r2
    6c68:	1a41      	subs	r1, r0, r1
    6c6a:	d200      	bcs.n	6c6e <__divsi3+0xfe>
    6c6c:	4601      	mov	r1, r0
    6c6e:	4152      	adcs	r2, r2
    6c70:	4610      	mov	r0, r2
    6c72:	4770      	bx	lr
    6c74:	e05d      	b.n	6d32 <__divsi3+0x1c2>
    6c76:	0fca      	lsrs	r2, r1, #31
    6c78:	d000      	beq.n	6c7c <__divsi3+0x10c>
    6c7a:	4249      	negs	r1, r1
    6c7c:	1003      	asrs	r3, r0, #32
    6c7e:	d300      	bcc.n	6c82 <__divsi3+0x112>
    6c80:	4240      	negs	r0, r0
    6c82:	4053      	eors	r3, r2
    6c84:	2200      	movs	r2, #0
    6c86:	469c      	mov	ip, r3
    6c88:	0903      	lsrs	r3, r0, #4
    6c8a:	428b      	cmp	r3, r1
    6c8c:	d32d      	bcc.n	6cea <__divsi3+0x17a>
    6c8e:	0a03      	lsrs	r3, r0, #8
    6c90:	428b      	cmp	r3, r1
    6c92:	d312      	bcc.n	6cba <__divsi3+0x14a>
    6c94:	22fc      	movs	r2, #252	; 0xfc
    6c96:	0189      	lsls	r1, r1, #6
    6c98:	ba12      	rev	r2, r2
    6c9a:	0a03      	lsrs	r3, r0, #8
    6c9c:	428b      	cmp	r3, r1
    6c9e:	d30c      	bcc.n	6cba <__divsi3+0x14a>
    6ca0:	0189      	lsls	r1, r1, #6
    6ca2:	1192      	asrs	r2, r2, #6
    6ca4:	428b      	cmp	r3, r1
    6ca6:	d308      	bcc.n	6cba <__divsi3+0x14a>
    6ca8:	0189      	lsls	r1, r1, #6
    6caa:	1192      	asrs	r2, r2, #6
    6cac:	428b      	cmp	r3, r1
    6cae:	d304      	bcc.n	6cba <__divsi3+0x14a>
    6cb0:	0189      	lsls	r1, r1, #6
    6cb2:	d03a      	beq.n	6d2a <__divsi3+0x1ba>
    6cb4:	1192      	asrs	r2, r2, #6
    6cb6:	e000      	b.n	6cba <__divsi3+0x14a>
    6cb8:	0989      	lsrs	r1, r1, #6
    6cba:	09c3      	lsrs	r3, r0, #7
    6cbc:	428b      	cmp	r3, r1
    6cbe:	d301      	bcc.n	6cc4 <__divsi3+0x154>
    6cc0:	01cb      	lsls	r3, r1, #7
    6cc2:	1ac0      	subs	r0, r0, r3
    6cc4:	4152      	adcs	r2, r2
    6cc6:	0983      	lsrs	r3, r0, #6
    6cc8:	428b      	cmp	r3, r1
    6cca:	d301      	bcc.n	6cd0 <__divsi3+0x160>
    6ccc:	018b      	lsls	r3, r1, #6
    6cce:	1ac0      	subs	r0, r0, r3
    6cd0:	4152      	adcs	r2, r2
    6cd2:	0943      	lsrs	r3, r0, #5
    6cd4:	428b      	cmp	r3, r1
    6cd6:	d301      	bcc.n	6cdc <__divsi3+0x16c>
    6cd8:	014b      	lsls	r3, r1, #5
    6cda:	1ac0      	subs	r0, r0, r3
    6cdc:	4152      	adcs	r2, r2
    6cde:	0903      	lsrs	r3, r0, #4
    6ce0:	428b      	cmp	r3, r1
    6ce2:	d301      	bcc.n	6ce8 <__divsi3+0x178>
    6ce4:	010b      	lsls	r3, r1, #4
    6ce6:	1ac0      	subs	r0, r0, r3
    6ce8:	4152      	adcs	r2, r2
    6cea:	08c3      	lsrs	r3, r0, #3
    6cec:	428b      	cmp	r3, r1
    6cee:	d301      	bcc.n	6cf4 <__divsi3+0x184>
    6cf0:	00cb      	lsls	r3, r1, #3
    6cf2:	1ac0      	subs	r0, r0, r3
    6cf4:	4152      	adcs	r2, r2
    6cf6:	0883      	lsrs	r3, r0, #2
    6cf8:	428b      	cmp	r3, r1
    6cfa:	d301      	bcc.n	6d00 <__divsi3+0x190>
    6cfc:	008b      	lsls	r3, r1, #2
    6cfe:	1ac0      	subs	r0, r0, r3
    6d00:	4152      	adcs	r2, r2
    6d02:	d2d9      	bcs.n	6cb8 <__divsi3+0x148>
    6d04:	0843      	lsrs	r3, r0, #1
    6d06:	428b      	cmp	r3, r1
    6d08:	d301      	bcc.n	6d0e <__divsi3+0x19e>
    6d0a:	004b      	lsls	r3, r1, #1
    6d0c:	1ac0      	subs	r0, r0, r3
    6d0e:	4152      	adcs	r2, r2
    6d10:	1a41      	subs	r1, r0, r1
    6d12:	d200      	bcs.n	6d16 <__divsi3+0x1a6>
    6d14:	4601      	mov	r1, r0
    6d16:	4663      	mov	r3, ip
    6d18:	4152      	adcs	r2, r2
    6d1a:	105b      	asrs	r3, r3, #1
    6d1c:	4610      	mov	r0, r2
    6d1e:	d301      	bcc.n	6d24 <__divsi3+0x1b4>
    6d20:	4240      	negs	r0, r0
    6d22:	2b00      	cmp	r3, #0
    6d24:	d500      	bpl.n	6d28 <__divsi3+0x1b8>
    6d26:	4249      	negs	r1, r1
    6d28:	4770      	bx	lr
    6d2a:	4663      	mov	r3, ip
    6d2c:	105b      	asrs	r3, r3, #1
    6d2e:	d300      	bcc.n	6d32 <__divsi3+0x1c2>
    6d30:	4240      	negs	r0, r0
    6d32:	b501      	push	{r0, lr}
    6d34:	2000      	movs	r0, #0
    6d36:	f000 f805 	bl	6d44 <__aeabi_idiv0>
    6d3a:	bd02      	pop	{r1, pc}

00006d3c <__aeabi_idivmod>:
    6d3c:	2900      	cmp	r1, #0
    6d3e:	d0f8      	beq.n	6d32 <__divsi3+0x1c2>
    6d40:	e716      	b.n	6b70 <__divsi3>
    6d42:	4770      	bx	lr

00006d44 <__aeabi_idiv0>:
    6d44:	4770      	bx	lr
    6d46:	46c0      	nop			; (mov r8, r8)

00006d48 <__clzsi2>:
    6d48:	211c      	movs	r1, #28
    6d4a:	2301      	movs	r3, #1
    6d4c:	041b      	lsls	r3, r3, #16
    6d4e:	4298      	cmp	r0, r3
    6d50:	d301      	bcc.n	6d56 <__clzsi2+0xe>
    6d52:	0c00      	lsrs	r0, r0, #16
    6d54:	3910      	subs	r1, #16
    6d56:	0a1b      	lsrs	r3, r3, #8
    6d58:	4298      	cmp	r0, r3
    6d5a:	d301      	bcc.n	6d60 <__clzsi2+0x18>
    6d5c:	0a00      	lsrs	r0, r0, #8
    6d5e:	3908      	subs	r1, #8
    6d60:	091b      	lsrs	r3, r3, #4
    6d62:	4298      	cmp	r0, r3
    6d64:	d301      	bcc.n	6d6a <__clzsi2+0x22>
    6d66:	0900      	lsrs	r0, r0, #4
    6d68:	3904      	subs	r1, #4
    6d6a:	a202      	add	r2, pc, #8	; (adr r2, 6d74 <__clzsi2+0x2c>)
    6d6c:	5c10      	ldrb	r0, [r2, r0]
    6d6e:	1840      	adds	r0, r0, r1
    6d70:	4770      	bx	lr
    6d72:	46c0      	nop			; (mov r8, r8)
    6d74:	02020304 	.word	0x02020304
    6d78:	01010101 	.word	0x01010101
	...

00006d84 <__ctzsi2>:
    6d84:	4241      	negs	r1, r0
    6d86:	4008      	ands	r0, r1
    6d88:	211c      	movs	r1, #28
    6d8a:	2301      	movs	r3, #1
    6d8c:	041b      	lsls	r3, r3, #16
    6d8e:	4298      	cmp	r0, r3
    6d90:	d301      	bcc.n	6d96 <__ctzsi2+0x12>
    6d92:	0c00      	lsrs	r0, r0, #16
    6d94:	3910      	subs	r1, #16
    6d96:	0a1b      	lsrs	r3, r3, #8
    6d98:	4298      	cmp	r0, r3
    6d9a:	d301      	bcc.n	6da0 <__ctzsi2+0x1c>
    6d9c:	0a00      	lsrs	r0, r0, #8
    6d9e:	3908      	subs	r1, #8
    6da0:	091b      	lsrs	r3, r3, #4
    6da2:	4298      	cmp	r0, r3
    6da4:	d301      	bcc.n	6daa <__ctzsi2+0x26>
    6da6:	0900      	lsrs	r0, r0, #4
    6da8:	3904      	subs	r1, #4
    6daa:	a202      	add	r2, pc, #8	; (adr r2, 6db4 <__ctzsi2+0x30>)
    6dac:	5c10      	ldrb	r0, [r2, r0]
    6dae:	1a40      	subs	r0, r0, r1
    6db0:	4770      	bx	lr
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	1d1d1c1b 	.word	0x1d1d1c1b
    6db8:	1e1e1e1e 	.word	0x1e1e1e1e
    6dbc:	1f1f1f1f 	.word	0x1f1f1f1f
    6dc0:	1f1f1f1f 	.word	0x1f1f1f1f

00006dc4 <__aeabi_uldivmod>:
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d111      	bne.n	6dec <__aeabi_uldivmod+0x28>
    6dc8:	2a00      	cmp	r2, #0
    6dca:	d10f      	bne.n	6dec <__aeabi_uldivmod+0x28>
    6dcc:	2900      	cmp	r1, #0
    6dce:	d100      	bne.n	6dd2 <__aeabi_uldivmod+0xe>
    6dd0:	2800      	cmp	r0, #0
    6dd2:	d002      	beq.n	6dda <__aeabi_uldivmod+0x16>
    6dd4:	2100      	movs	r1, #0
    6dd6:	43c9      	mvns	r1, r1
    6dd8:	1c08      	adds	r0, r1, #0
    6dda:	b407      	push	{r0, r1, r2}
    6ddc:	4802      	ldr	r0, [pc, #8]	; (6de8 <__aeabi_uldivmod+0x24>)
    6dde:	a102      	add	r1, pc, #8	; (adr r1, 6de8 <__aeabi_uldivmod+0x24>)
    6de0:	1840      	adds	r0, r0, r1
    6de2:	9002      	str	r0, [sp, #8]
    6de4:	bd03      	pop	{r0, r1, pc}
    6de6:	46c0      	nop			; (mov r8, r8)
    6de8:	ffffff5d 	.word	0xffffff5d
    6dec:	b403      	push	{r0, r1}
    6dee:	4668      	mov	r0, sp
    6df0:	b501      	push	{r0, lr}
    6df2:	9802      	ldr	r0, [sp, #8]
    6df4:	f000 f830 	bl	6e58 <__udivmoddi4>
    6df8:	9b01      	ldr	r3, [sp, #4]
    6dfa:	469e      	mov	lr, r3
    6dfc:	b002      	add	sp, #8
    6dfe:	bc0c      	pop	{r2, r3}
    6e00:	4770      	bx	lr
    6e02:	46c0      	nop			; (mov r8, r8)

00006e04 <__aeabi_lmul>:
    6e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e06:	46ce      	mov	lr, r9
    6e08:	4647      	mov	r7, r8
    6e0a:	0415      	lsls	r5, r2, #16
    6e0c:	0c2d      	lsrs	r5, r5, #16
    6e0e:	002e      	movs	r6, r5
    6e10:	b580      	push	{r7, lr}
    6e12:	0407      	lsls	r7, r0, #16
    6e14:	0c14      	lsrs	r4, r2, #16
    6e16:	0c3f      	lsrs	r7, r7, #16
    6e18:	4699      	mov	r9, r3
    6e1a:	0c03      	lsrs	r3, r0, #16
    6e1c:	437e      	muls	r6, r7
    6e1e:	435d      	muls	r5, r3
    6e20:	4367      	muls	r7, r4
    6e22:	4363      	muls	r3, r4
    6e24:	197f      	adds	r7, r7, r5
    6e26:	0c34      	lsrs	r4, r6, #16
    6e28:	19e4      	adds	r4, r4, r7
    6e2a:	469c      	mov	ip, r3
    6e2c:	42a5      	cmp	r5, r4
    6e2e:	d903      	bls.n	6e38 <__aeabi_lmul+0x34>
    6e30:	2380      	movs	r3, #128	; 0x80
    6e32:	025b      	lsls	r3, r3, #9
    6e34:	4698      	mov	r8, r3
    6e36:	44c4      	add	ip, r8
    6e38:	464b      	mov	r3, r9
    6e3a:	4351      	muls	r1, r2
    6e3c:	4343      	muls	r3, r0
    6e3e:	0436      	lsls	r6, r6, #16
    6e40:	0c36      	lsrs	r6, r6, #16
    6e42:	0c25      	lsrs	r5, r4, #16
    6e44:	0424      	lsls	r4, r4, #16
    6e46:	4465      	add	r5, ip
    6e48:	19a4      	adds	r4, r4, r6
    6e4a:	1859      	adds	r1, r3, r1
    6e4c:	1949      	adds	r1, r1, r5
    6e4e:	0020      	movs	r0, r4
    6e50:	bc0c      	pop	{r2, r3}
    6e52:	4690      	mov	r8, r2
    6e54:	4699      	mov	r9, r3
    6e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006e58 <__udivmoddi4>:
    6e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e5a:	4657      	mov	r7, sl
    6e5c:	464e      	mov	r6, r9
    6e5e:	4645      	mov	r5, r8
    6e60:	46de      	mov	lr, fp
    6e62:	b5e0      	push	{r5, r6, r7, lr}
    6e64:	0004      	movs	r4, r0
    6e66:	b083      	sub	sp, #12
    6e68:	000d      	movs	r5, r1
    6e6a:	4692      	mov	sl, r2
    6e6c:	4699      	mov	r9, r3
    6e6e:	428b      	cmp	r3, r1
    6e70:	d82f      	bhi.n	6ed2 <__udivmoddi4+0x7a>
    6e72:	d02c      	beq.n	6ece <__udivmoddi4+0x76>
    6e74:	4649      	mov	r1, r9
    6e76:	4650      	mov	r0, sl
    6e78:	f000 f8ae 	bl	6fd8 <__clzdi2>
    6e7c:	0029      	movs	r1, r5
    6e7e:	0006      	movs	r6, r0
    6e80:	0020      	movs	r0, r4
    6e82:	f000 f8a9 	bl	6fd8 <__clzdi2>
    6e86:	1a33      	subs	r3, r6, r0
    6e88:	4698      	mov	r8, r3
    6e8a:	3b20      	subs	r3, #32
    6e8c:	469b      	mov	fp, r3
    6e8e:	d500      	bpl.n	6e92 <__udivmoddi4+0x3a>
    6e90:	e074      	b.n	6f7c <__udivmoddi4+0x124>
    6e92:	4653      	mov	r3, sl
    6e94:	465a      	mov	r2, fp
    6e96:	4093      	lsls	r3, r2
    6e98:	001f      	movs	r7, r3
    6e9a:	4653      	mov	r3, sl
    6e9c:	4642      	mov	r2, r8
    6e9e:	4093      	lsls	r3, r2
    6ea0:	001e      	movs	r6, r3
    6ea2:	42af      	cmp	r7, r5
    6ea4:	d829      	bhi.n	6efa <__udivmoddi4+0xa2>
    6ea6:	d026      	beq.n	6ef6 <__udivmoddi4+0x9e>
    6ea8:	465b      	mov	r3, fp
    6eaa:	1ba4      	subs	r4, r4, r6
    6eac:	41bd      	sbcs	r5, r7
    6eae:	2b00      	cmp	r3, #0
    6eb0:	da00      	bge.n	6eb4 <__udivmoddi4+0x5c>
    6eb2:	e079      	b.n	6fa8 <__udivmoddi4+0x150>
    6eb4:	2200      	movs	r2, #0
    6eb6:	2300      	movs	r3, #0
    6eb8:	9200      	str	r2, [sp, #0]
    6eba:	9301      	str	r3, [sp, #4]
    6ebc:	2301      	movs	r3, #1
    6ebe:	465a      	mov	r2, fp
    6ec0:	4093      	lsls	r3, r2
    6ec2:	9301      	str	r3, [sp, #4]
    6ec4:	2301      	movs	r3, #1
    6ec6:	4642      	mov	r2, r8
    6ec8:	4093      	lsls	r3, r2
    6eca:	9300      	str	r3, [sp, #0]
    6ecc:	e019      	b.n	6f02 <__udivmoddi4+0xaa>
    6ece:	4282      	cmp	r2, r0
    6ed0:	d9d0      	bls.n	6e74 <__udivmoddi4+0x1c>
    6ed2:	2200      	movs	r2, #0
    6ed4:	2300      	movs	r3, #0
    6ed6:	9200      	str	r2, [sp, #0]
    6ed8:	9301      	str	r3, [sp, #4]
    6eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6edc:	2b00      	cmp	r3, #0
    6ede:	d001      	beq.n	6ee4 <__udivmoddi4+0x8c>
    6ee0:	601c      	str	r4, [r3, #0]
    6ee2:	605d      	str	r5, [r3, #4]
    6ee4:	9800      	ldr	r0, [sp, #0]
    6ee6:	9901      	ldr	r1, [sp, #4]
    6ee8:	b003      	add	sp, #12
    6eea:	bc3c      	pop	{r2, r3, r4, r5}
    6eec:	4690      	mov	r8, r2
    6eee:	4699      	mov	r9, r3
    6ef0:	46a2      	mov	sl, r4
    6ef2:	46ab      	mov	fp, r5
    6ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ef6:	42a3      	cmp	r3, r4
    6ef8:	d9d6      	bls.n	6ea8 <__udivmoddi4+0x50>
    6efa:	2200      	movs	r2, #0
    6efc:	2300      	movs	r3, #0
    6efe:	9200      	str	r2, [sp, #0]
    6f00:	9301      	str	r3, [sp, #4]
    6f02:	4643      	mov	r3, r8
    6f04:	2b00      	cmp	r3, #0
    6f06:	d0e8      	beq.n	6eda <__udivmoddi4+0x82>
    6f08:	07fb      	lsls	r3, r7, #31
    6f0a:	0872      	lsrs	r2, r6, #1
    6f0c:	431a      	orrs	r2, r3
    6f0e:	4646      	mov	r6, r8
    6f10:	087b      	lsrs	r3, r7, #1
    6f12:	e00e      	b.n	6f32 <__udivmoddi4+0xda>
    6f14:	42ab      	cmp	r3, r5
    6f16:	d101      	bne.n	6f1c <__udivmoddi4+0xc4>
    6f18:	42a2      	cmp	r2, r4
    6f1a:	d80c      	bhi.n	6f36 <__udivmoddi4+0xde>
    6f1c:	1aa4      	subs	r4, r4, r2
    6f1e:	419d      	sbcs	r5, r3
    6f20:	2001      	movs	r0, #1
    6f22:	1924      	adds	r4, r4, r4
    6f24:	416d      	adcs	r5, r5
    6f26:	2100      	movs	r1, #0
    6f28:	3e01      	subs	r6, #1
    6f2a:	1824      	adds	r4, r4, r0
    6f2c:	414d      	adcs	r5, r1
    6f2e:	2e00      	cmp	r6, #0
    6f30:	d006      	beq.n	6f40 <__udivmoddi4+0xe8>
    6f32:	42ab      	cmp	r3, r5
    6f34:	d9ee      	bls.n	6f14 <__udivmoddi4+0xbc>
    6f36:	3e01      	subs	r6, #1
    6f38:	1924      	adds	r4, r4, r4
    6f3a:	416d      	adcs	r5, r5
    6f3c:	2e00      	cmp	r6, #0
    6f3e:	d1f8      	bne.n	6f32 <__udivmoddi4+0xda>
    6f40:	465b      	mov	r3, fp
    6f42:	9800      	ldr	r0, [sp, #0]
    6f44:	9901      	ldr	r1, [sp, #4]
    6f46:	1900      	adds	r0, r0, r4
    6f48:	4169      	adcs	r1, r5
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	db22      	blt.n	6f94 <__udivmoddi4+0x13c>
    6f4e:	002b      	movs	r3, r5
    6f50:	465a      	mov	r2, fp
    6f52:	40d3      	lsrs	r3, r2
    6f54:	002a      	movs	r2, r5
    6f56:	4644      	mov	r4, r8
    6f58:	40e2      	lsrs	r2, r4
    6f5a:	001c      	movs	r4, r3
    6f5c:	465b      	mov	r3, fp
    6f5e:	0015      	movs	r5, r2
    6f60:	2b00      	cmp	r3, #0
    6f62:	db2c      	blt.n	6fbe <__udivmoddi4+0x166>
    6f64:	0026      	movs	r6, r4
    6f66:	409e      	lsls	r6, r3
    6f68:	0033      	movs	r3, r6
    6f6a:	0026      	movs	r6, r4
    6f6c:	4647      	mov	r7, r8
    6f6e:	40be      	lsls	r6, r7
    6f70:	0032      	movs	r2, r6
    6f72:	1a80      	subs	r0, r0, r2
    6f74:	4199      	sbcs	r1, r3
    6f76:	9000      	str	r0, [sp, #0]
    6f78:	9101      	str	r1, [sp, #4]
    6f7a:	e7ae      	b.n	6eda <__udivmoddi4+0x82>
    6f7c:	4642      	mov	r2, r8
    6f7e:	2320      	movs	r3, #32
    6f80:	1a9b      	subs	r3, r3, r2
    6f82:	4652      	mov	r2, sl
    6f84:	40da      	lsrs	r2, r3
    6f86:	4641      	mov	r1, r8
    6f88:	0013      	movs	r3, r2
    6f8a:	464a      	mov	r2, r9
    6f8c:	408a      	lsls	r2, r1
    6f8e:	0017      	movs	r7, r2
    6f90:	431f      	orrs	r7, r3
    6f92:	e782      	b.n	6e9a <__udivmoddi4+0x42>
    6f94:	4642      	mov	r2, r8
    6f96:	2320      	movs	r3, #32
    6f98:	1a9b      	subs	r3, r3, r2
    6f9a:	002a      	movs	r2, r5
    6f9c:	4646      	mov	r6, r8
    6f9e:	409a      	lsls	r2, r3
    6fa0:	0023      	movs	r3, r4
    6fa2:	40f3      	lsrs	r3, r6
    6fa4:	4313      	orrs	r3, r2
    6fa6:	e7d5      	b.n	6f54 <__udivmoddi4+0xfc>
    6fa8:	4642      	mov	r2, r8
    6faa:	2320      	movs	r3, #32
    6fac:	2100      	movs	r1, #0
    6fae:	1a9b      	subs	r3, r3, r2
    6fb0:	2200      	movs	r2, #0
    6fb2:	9100      	str	r1, [sp, #0]
    6fb4:	9201      	str	r2, [sp, #4]
    6fb6:	2201      	movs	r2, #1
    6fb8:	40da      	lsrs	r2, r3
    6fba:	9201      	str	r2, [sp, #4]
    6fbc:	e782      	b.n	6ec4 <__udivmoddi4+0x6c>
    6fbe:	4642      	mov	r2, r8
    6fc0:	2320      	movs	r3, #32
    6fc2:	0026      	movs	r6, r4
    6fc4:	1a9b      	subs	r3, r3, r2
    6fc6:	40de      	lsrs	r6, r3
    6fc8:	002f      	movs	r7, r5
    6fca:	46b4      	mov	ip, r6
    6fcc:	4097      	lsls	r7, r2
    6fce:	4666      	mov	r6, ip
    6fd0:	003b      	movs	r3, r7
    6fd2:	4333      	orrs	r3, r6
    6fd4:	e7c9      	b.n	6f6a <__udivmoddi4+0x112>
    6fd6:	46c0      	nop			; (mov r8, r8)

00006fd8 <__clzdi2>:
    6fd8:	b510      	push	{r4, lr}
    6fda:	2900      	cmp	r1, #0
    6fdc:	d103      	bne.n	6fe6 <__clzdi2+0xe>
    6fde:	f7ff feb3 	bl	6d48 <__clzsi2>
    6fe2:	3020      	adds	r0, #32
    6fe4:	e002      	b.n	6fec <__clzdi2+0x14>
    6fe6:	1c08      	adds	r0, r1, #0
    6fe8:	f7ff feae 	bl	6d48 <__clzsi2>
    6fec:	bd10      	pop	{r4, pc}
    6fee:	46c0      	nop			; (mov r8, r8)

00006ff0 <__libc_init_array>:
    6ff0:	b570      	push	{r4, r5, r6, lr}
    6ff2:	2600      	movs	r6, #0
    6ff4:	4d0c      	ldr	r5, [pc, #48]	; (7028 <__libc_init_array+0x38>)
    6ff6:	4c0d      	ldr	r4, [pc, #52]	; (702c <__libc_init_array+0x3c>)
    6ff8:	1b64      	subs	r4, r4, r5
    6ffa:	10a4      	asrs	r4, r4, #2
    6ffc:	42a6      	cmp	r6, r4
    6ffe:	d109      	bne.n	7014 <__libc_init_array+0x24>
    7000:	2600      	movs	r6, #0
    7002:	f000 fdc1 	bl	7b88 <_init>
    7006:	4d0a      	ldr	r5, [pc, #40]	; (7030 <__libc_init_array+0x40>)
    7008:	4c0a      	ldr	r4, [pc, #40]	; (7034 <__libc_init_array+0x44>)
    700a:	1b64      	subs	r4, r4, r5
    700c:	10a4      	asrs	r4, r4, #2
    700e:	42a6      	cmp	r6, r4
    7010:	d105      	bne.n	701e <__libc_init_array+0x2e>
    7012:	bd70      	pop	{r4, r5, r6, pc}
    7014:	00b3      	lsls	r3, r6, #2
    7016:	58eb      	ldr	r3, [r5, r3]
    7018:	4798      	blx	r3
    701a:	3601      	adds	r6, #1
    701c:	e7ee      	b.n	6ffc <__libc_init_array+0xc>
    701e:	00b3      	lsls	r3, r6, #2
    7020:	58eb      	ldr	r3, [r5, r3]
    7022:	4798      	blx	r3
    7024:	3601      	adds	r6, #1
    7026:	e7f2      	b.n	700e <__libc_init_array+0x1e>
    7028:	00007b94 	.word	0x00007b94
    702c:	00007b94 	.word	0x00007b94
    7030:	00007b94 	.word	0x00007b94
    7034:	00007b98 	.word	0x00007b98

00007038 <memcpy>:
    7038:	2300      	movs	r3, #0
    703a:	b510      	push	{r4, lr}
    703c:	429a      	cmp	r2, r3
    703e:	d100      	bne.n	7042 <memcpy+0xa>
    7040:	bd10      	pop	{r4, pc}
    7042:	5ccc      	ldrb	r4, [r1, r3]
    7044:	54c4      	strb	r4, [r0, r3]
    7046:	3301      	adds	r3, #1
    7048:	e7f8      	b.n	703c <memcpy+0x4>

0000704a <memset>:
    704a:	0003      	movs	r3, r0
    704c:	1882      	adds	r2, r0, r2
    704e:	4293      	cmp	r3, r2
    7050:	d100      	bne.n	7054 <memset+0xa>
    7052:	4770      	bx	lr
    7054:	7019      	strb	r1, [r3, #0]
    7056:	3301      	adds	r3, #1
    7058:	e7f9      	b.n	704e <memset+0x4>

0000705a <setbuf>:
    705a:	424a      	negs	r2, r1
    705c:	414a      	adcs	r2, r1
    705e:	2380      	movs	r3, #128	; 0x80
    7060:	b510      	push	{r4, lr}
    7062:	0052      	lsls	r2, r2, #1
    7064:	00db      	lsls	r3, r3, #3
    7066:	f000 f801 	bl	706c <setvbuf>
    706a:	bd10      	pop	{r4, pc}

0000706c <setvbuf>:
    706c:	b5f0      	push	{r4, r5, r6, r7, lr}
    706e:	001d      	movs	r5, r3
    7070:	4b4f      	ldr	r3, [pc, #316]	; (71b0 <setvbuf+0x144>)
    7072:	b085      	sub	sp, #20
    7074:	681e      	ldr	r6, [r3, #0]
    7076:	0004      	movs	r4, r0
    7078:	000f      	movs	r7, r1
    707a:	9200      	str	r2, [sp, #0]
    707c:	2e00      	cmp	r6, #0
    707e:	d005      	beq.n	708c <setvbuf+0x20>
    7080:	69b3      	ldr	r3, [r6, #24]
    7082:	2b00      	cmp	r3, #0
    7084:	d102      	bne.n	708c <setvbuf+0x20>
    7086:	0030      	movs	r0, r6
    7088:	f000 f994 	bl	73b4 <__sinit>
    708c:	4b49      	ldr	r3, [pc, #292]	; (71b4 <setvbuf+0x148>)
    708e:	429c      	cmp	r4, r3
    7090:	d150      	bne.n	7134 <setvbuf+0xc8>
    7092:	6874      	ldr	r4, [r6, #4]
    7094:	9b00      	ldr	r3, [sp, #0]
    7096:	2b02      	cmp	r3, #2
    7098:	d005      	beq.n	70a6 <setvbuf+0x3a>
    709a:	2b01      	cmp	r3, #1
    709c:	d900      	bls.n	70a0 <setvbuf+0x34>
    709e:	e084      	b.n	71aa <setvbuf+0x13e>
    70a0:	2d00      	cmp	r5, #0
    70a2:	da00      	bge.n	70a6 <setvbuf+0x3a>
    70a4:	e081      	b.n	71aa <setvbuf+0x13e>
    70a6:	0021      	movs	r1, r4
    70a8:	0030      	movs	r0, r6
    70aa:	f000 f915 	bl	72d8 <_fflush_r>
    70ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    70b0:	2900      	cmp	r1, #0
    70b2:	d008      	beq.n	70c6 <setvbuf+0x5a>
    70b4:	0023      	movs	r3, r4
    70b6:	3344      	adds	r3, #68	; 0x44
    70b8:	4299      	cmp	r1, r3
    70ba:	d002      	beq.n	70c2 <setvbuf+0x56>
    70bc:	0030      	movs	r0, r6
    70be:	f000 fa41 	bl	7544 <_free_r>
    70c2:	2300      	movs	r3, #0
    70c4:	6363      	str	r3, [r4, #52]	; 0x34
    70c6:	2300      	movs	r3, #0
    70c8:	61a3      	str	r3, [r4, #24]
    70ca:	6063      	str	r3, [r4, #4]
    70cc:	89a3      	ldrh	r3, [r4, #12]
    70ce:	061b      	lsls	r3, r3, #24
    70d0:	d503      	bpl.n	70da <setvbuf+0x6e>
    70d2:	6921      	ldr	r1, [r4, #16]
    70d4:	0030      	movs	r0, r6
    70d6:	f000 fa35 	bl	7544 <_free_r>
    70da:	89a3      	ldrh	r3, [r4, #12]
    70dc:	4a36      	ldr	r2, [pc, #216]	; (71b8 <setvbuf+0x14c>)
    70de:	4013      	ands	r3, r2
    70e0:	81a3      	strh	r3, [r4, #12]
    70e2:	9b00      	ldr	r3, [sp, #0]
    70e4:	2b02      	cmp	r3, #2
    70e6:	d05a      	beq.n	719e <setvbuf+0x132>
    70e8:	ab03      	add	r3, sp, #12
    70ea:	aa02      	add	r2, sp, #8
    70ec:	0021      	movs	r1, r4
    70ee:	0030      	movs	r0, r6
    70f0:	f000 f9f6 	bl	74e0 <__swhatbuf_r>
    70f4:	89a3      	ldrh	r3, [r4, #12]
    70f6:	4318      	orrs	r0, r3
    70f8:	81a0      	strh	r0, [r4, #12]
    70fa:	2d00      	cmp	r5, #0
    70fc:	d124      	bne.n	7148 <setvbuf+0xdc>
    70fe:	9d02      	ldr	r5, [sp, #8]
    7100:	0028      	movs	r0, r5
    7102:	f000 fa15 	bl	7530 <malloc>
    7106:	9501      	str	r5, [sp, #4]
    7108:	1e07      	subs	r7, r0, #0
    710a:	d142      	bne.n	7192 <setvbuf+0x126>
    710c:	9b02      	ldr	r3, [sp, #8]
    710e:	9301      	str	r3, [sp, #4]
    7110:	42ab      	cmp	r3, r5
    7112:	d139      	bne.n	7188 <setvbuf+0x11c>
    7114:	2001      	movs	r0, #1
    7116:	4240      	negs	r0, r0
    7118:	2302      	movs	r3, #2
    711a:	89a2      	ldrh	r2, [r4, #12]
    711c:	4313      	orrs	r3, r2
    711e:	81a3      	strh	r3, [r4, #12]
    7120:	2300      	movs	r3, #0
    7122:	60a3      	str	r3, [r4, #8]
    7124:	0023      	movs	r3, r4
    7126:	3347      	adds	r3, #71	; 0x47
    7128:	6023      	str	r3, [r4, #0]
    712a:	6123      	str	r3, [r4, #16]
    712c:	2301      	movs	r3, #1
    712e:	6163      	str	r3, [r4, #20]
    7130:	b005      	add	sp, #20
    7132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7134:	4b21      	ldr	r3, [pc, #132]	; (71bc <setvbuf+0x150>)
    7136:	429c      	cmp	r4, r3
    7138:	d101      	bne.n	713e <setvbuf+0xd2>
    713a:	68b4      	ldr	r4, [r6, #8]
    713c:	e7aa      	b.n	7094 <setvbuf+0x28>
    713e:	4b20      	ldr	r3, [pc, #128]	; (71c0 <setvbuf+0x154>)
    7140:	429c      	cmp	r4, r3
    7142:	d1a7      	bne.n	7094 <setvbuf+0x28>
    7144:	68f4      	ldr	r4, [r6, #12]
    7146:	e7a5      	b.n	7094 <setvbuf+0x28>
    7148:	2f00      	cmp	r7, #0
    714a:	d0d9      	beq.n	7100 <setvbuf+0x94>
    714c:	69b3      	ldr	r3, [r6, #24]
    714e:	2b00      	cmp	r3, #0
    7150:	d102      	bne.n	7158 <setvbuf+0xec>
    7152:	0030      	movs	r0, r6
    7154:	f000 f92e 	bl	73b4 <__sinit>
    7158:	9b00      	ldr	r3, [sp, #0]
    715a:	2b01      	cmp	r3, #1
    715c:	d103      	bne.n	7166 <setvbuf+0xfa>
    715e:	89a3      	ldrh	r3, [r4, #12]
    7160:	9a00      	ldr	r2, [sp, #0]
    7162:	431a      	orrs	r2, r3
    7164:	81a2      	strh	r2, [r4, #12]
    7166:	2008      	movs	r0, #8
    7168:	89a3      	ldrh	r3, [r4, #12]
    716a:	6027      	str	r7, [r4, #0]
    716c:	6127      	str	r7, [r4, #16]
    716e:	6165      	str	r5, [r4, #20]
    7170:	4018      	ands	r0, r3
    7172:	d018      	beq.n	71a6 <setvbuf+0x13a>
    7174:	2001      	movs	r0, #1
    7176:	4018      	ands	r0, r3
    7178:	2300      	movs	r3, #0
    717a:	4298      	cmp	r0, r3
    717c:	d011      	beq.n	71a2 <setvbuf+0x136>
    717e:	426d      	negs	r5, r5
    7180:	60a3      	str	r3, [r4, #8]
    7182:	61a5      	str	r5, [r4, #24]
    7184:	0018      	movs	r0, r3
    7186:	e7d3      	b.n	7130 <setvbuf+0xc4>
    7188:	9801      	ldr	r0, [sp, #4]
    718a:	f000 f9d1 	bl	7530 <malloc>
    718e:	1e07      	subs	r7, r0, #0
    7190:	d0c0      	beq.n	7114 <setvbuf+0xa8>
    7192:	2380      	movs	r3, #128	; 0x80
    7194:	89a2      	ldrh	r2, [r4, #12]
    7196:	9d01      	ldr	r5, [sp, #4]
    7198:	4313      	orrs	r3, r2
    719a:	81a3      	strh	r3, [r4, #12]
    719c:	e7d6      	b.n	714c <setvbuf+0xe0>
    719e:	2000      	movs	r0, #0
    71a0:	e7ba      	b.n	7118 <setvbuf+0xac>
    71a2:	60a5      	str	r5, [r4, #8]
    71a4:	e7c4      	b.n	7130 <setvbuf+0xc4>
    71a6:	60a0      	str	r0, [r4, #8]
    71a8:	e7c2      	b.n	7130 <setvbuf+0xc4>
    71aa:	2001      	movs	r0, #1
    71ac:	4240      	negs	r0, r0
    71ae:	e7bf      	b.n	7130 <setvbuf+0xc4>
    71b0:	200000fc 	.word	0x200000fc
    71b4:	00007b48 	.word	0x00007b48
    71b8:	fffff35c 	.word	0xfffff35c
    71bc:	00007b68 	.word	0x00007b68
    71c0:	00007b28 	.word	0x00007b28

000071c4 <__sflush_r>:
    71c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    71c6:	898a      	ldrh	r2, [r1, #12]
    71c8:	0005      	movs	r5, r0
    71ca:	000c      	movs	r4, r1
    71cc:	0713      	lsls	r3, r2, #28
    71ce:	d460      	bmi.n	7292 <__sflush_r+0xce>
    71d0:	684b      	ldr	r3, [r1, #4]
    71d2:	2b00      	cmp	r3, #0
    71d4:	dc04      	bgt.n	71e0 <__sflush_r+0x1c>
    71d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    71d8:	2b00      	cmp	r3, #0
    71da:	dc01      	bgt.n	71e0 <__sflush_r+0x1c>
    71dc:	2000      	movs	r0, #0
    71de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    71e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    71e2:	2f00      	cmp	r7, #0
    71e4:	d0fa      	beq.n	71dc <__sflush_r+0x18>
    71e6:	2300      	movs	r3, #0
    71e8:	682e      	ldr	r6, [r5, #0]
    71ea:	602b      	str	r3, [r5, #0]
    71ec:	2380      	movs	r3, #128	; 0x80
    71ee:	015b      	lsls	r3, r3, #5
    71f0:	401a      	ands	r2, r3
    71f2:	d034      	beq.n	725e <__sflush_r+0x9a>
    71f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    71f6:	89a3      	ldrh	r3, [r4, #12]
    71f8:	075b      	lsls	r3, r3, #29
    71fa:	d506      	bpl.n	720a <__sflush_r+0x46>
    71fc:	6863      	ldr	r3, [r4, #4]
    71fe:	1ac0      	subs	r0, r0, r3
    7200:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7202:	2b00      	cmp	r3, #0
    7204:	d001      	beq.n	720a <__sflush_r+0x46>
    7206:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7208:	1ac0      	subs	r0, r0, r3
    720a:	0002      	movs	r2, r0
    720c:	6a21      	ldr	r1, [r4, #32]
    720e:	2300      	movs	r3, #0
    7210:	0028      	movs	r0, r5
    7212:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    7214:	47b8      	blx	r7
    7216:	89a1      	ldrh	r1, [r4, #12]
    7218:	1c43      	adds	r3, r0, #1
    721a:	d106      	bne.n	722a <__sflush_r+0x66>
    721c:	682b      	ldr	r3, [r5, #0]
    721e:	2b1d      	cmp	r3, #29
    7220:	d831      	bhi.n	7286 <__sflush_r+0xc2>
    7222:	4a2c      	ldr	r2, [pc, #176]	; (72d4 <__sflush_r+0x110>)
    7224:	40da      	lsrs	r2, r3
    7226:	07d3      	lsls	r3, r2, #31
    7228:	d52d      	bpl.n	7286 <__sflush_r+0xc2>
    722a:	2300      	movs	r3, #0
    722c:	6063      	str	r3, [r4, #4]
    722e:	6923      	ldr	r3, [r4, #16]
    7230:	6023      	str	r3, [r4, #0]
    7232:	04cb      	lsls	r3, r1, #19
    7234:	d505      	bpl.n	7242 <__sflush_r+0x7e>
    7236:	1c43      	adds	r3, r0, #1
    7238:	d102      	bne.n	7240 <__sflush_r+0x7c>
    723a:	682b      	ldr	r3, [r5, #0]
    723c:	2b00      	cmp	r3, #0
    723e:	d100      	bne.n	7242 <__sflush_r+0x7e>
    7240:	6560      	str	r0, [r4, #84]	; 0x54
    7242:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7244:	602e      	str	r6, [r5, #0]
    7246:	2900      	cmp	r1, #0
    7248:	d0c8      	beq.n	71dc <__sflush_r+0x18>
    724a:	0023      	movs	r3, r4
    724c:	3344      	adds	r3, #68	; 0x44
    724e:	4299      	cmp	r1, r3
    7250:	d002      	beq.n	7258 <__sflush_r+0x94>
    7252:	0028      	movs	r0, r5
    7254:	f000 f976 	bl	7544 <_free_r>
    7258:	2000      	movs	r0, #0
    725a:	6360      	str	r0, [r4, #52]	; 0x34
    725c:	e7bf      	b.n	71de <__sflush_r+0x1a>
    725e:	2301      	movs	r3, #1
    7260:	6a21      	ldr	r1, [r4, #32]
    7262:	0028      	movs	r0, r5
    7264:	47b8      	blx	r7
    7266:	1c43      	adds	r3, r0, #1
    7268:	d1c5      	bne.n	71f6 <__sflush_r+0x32>
    726a:	682b      	ldr	r3, [r5, #0]
    726c:	2b00      	cmp	r3, #0
    726e:	d0c2      	beq.n	71f6 <__sflush_r+0x32>
    7270:	2b1d      	cmp	r3, #29
    7272:	d001      	beq.n	7278 <__sflush_r+0xb4>
    7274:	2b16      	cmp	r3, #22
    7276:	d101      	bne.n	727c <__sflush_r+0xb8>
    7278:	602e      	str	r6, [r5, #0]
    727a:	e7af      	b.n	71dc <__sflush_r+0x18>
    727c:	2340      	movs	r3, #64	; 0x40
    727e:	89a2      	ldrh	r2, [r4, #12]
    7280:	4313      	orrs	r3, r2
    7282:	81a3      	strh	r3, [r4, #12]
    7284:	e7ab      	b.n	71de <__sflush_r+0x1a>
    7286:	2340      	movs	r3, #64	; 0x40
    7288:	430b      	orrs	r3, r1
    728a:	2001      	movs	r0, #1
    728c:	81a3      	strh	r3, [r4, #12]
    728e:	4240      	negs	r0, r0
    7290:	e7a5      	b.n	71de <__sflush_r+0x1a>
    7292:	690f      	ldr	r7, [r1, #16]
    7294:	2f00      	cmp	r7, #0
    7296:	d0a1      	beq.n	71dc <__sflush_r+0x18>
    7298:	680b      	ldr	r3, [r1, #0]
    729a:	600f      	str	r7, [r1, #0]
    729c:	1bdb      	subs	r3, r3, r7
    729e:	9301      	str	r3, [sp, #4]
    72a0:	2300      	movs	r3, #0
    72a2:	0792      	lsls	r2, r2, #30
    72a4:	d100      	bne.n	72a8 <__sflush_r+0xe4>
    72a6:	694b      	ldr	r3, [r1, #20]
    72a8:	60a3      	str	r3, [r4, #8]
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	2b00      	cmp	r3, #0
    72ae:	dc00      	bgt.n	72b2 <__sflush_r+0xee>
    72b0:	e794      	b.n	71dc <__sflush_r+0x18>
    72b2:	9b01      	ldr	r3, [sp, #4]
    72b4:	003a      	movs	r2, r7
    72b6:	6a21      	ldr	r1, [r4, #32]
    72b8:	0028      	movs	r0, r5
    72ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    72bc:	47b0      	blx	r6
    72be:	2800      	cmp	r0, #0
    72c0:	dc03      	bgt.n	72ca <__sflush_r+0x106>
    72c2:	2340      	movs	r3, #64	; 0x40
    72c4:	89a2      	ldrh	r2, [r4, #12]
    72c6:	4313      	orrs	r3, r2
    72c8:	e7df      	b.n	728a <__sflush_r+0xc6>
    72ca:	9b01      	ldr	r3, [sp, #4]
    72cc:	183f      	adds	r7, r7, r0
    72ce:	1a1b      	subs	r3, r3, r0
    72d0:	9301      	str	r3, [sp, #4]
    72d2:	e7ea      	b.n	72aa <__sflush_r+0xe6>
    72d4:	20400001 	.word	0x20400001

000072d8 <_fflush_r>:
    72d8:	690b      	ldr	r3, [r1, #16]
    72da:	b570      	push	{r4, r5, r6, lr}
    72dc:	0005      	movs	r5, r0
    72de:	000c      	movs	r4, r1
    72e0:	2b00      	cmp	r3, #0
    72e2:	d101      	bne.n	72e8 <_fflush_r+0x10>
    72e4:	2000      	movs	r0, #0
    72e6:	bd70      	pop	{r4, r5, r6, pc}
    72e8:	2800      	cmp	r0, #0
    72ea:	d004      	beq.n	72f6 <_fflush_r+0x1e>
    72ec:	6983      	ldr	r3, [r0, #24]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d101      	bne.n	72f6 <_fflush_r+0x1e>
    72f2:	f000 f85f 	bl	73b4 <__sinit>
    72f6:	4b0b      	ldr	r3, [pc, #44]	; (7324 <_fflush_r+0x4c>)
    72f8:	429c      	cmp	r4, r3
    72fa:	d109      	bne.n	7310 <_fflush_r+0x38>
    72fc:	686c      	ldr	r4, [r5, #4]
    72fe:	220c      	movs	r2, #12
    7300:	5ea3      	ldrsh	r3, [r4, r2]
    7302:	2b00      	cmp	r3, #0
    7304:	d0ee      	beq.n	72e4 <_fflush_r+0xc>
    7306:	0021      	movs	r1, r4
    7308:	0028      	movs	r0, r5
    730a:	f7ff ff5b 	bl	71c4 <__sflush_r>
    730e:	e7ea      	b.n	72e6 <_fflush_r+0xe>
    7310:	4b05      	ldr	r3, [pc, #20]	; (7328 <_fflush_r+0x50>)
    7312:	429c      	cmp	r4, r3
    7314:	d101      	bne.n	731a <_fflush_r+0x42>
    7316:	68ac      	ldr	r4, [r5, #8]
    7318:	e7f1      	b.n	72fe <_fflush_r+0x26>
    731a:	4b04      	ldr	r3, [pc, #16]	; (732c <_fflush_r+0x54>)
    731c:	429c      	cmp	r4, r3
    731e:	d1ee      	bne.n	72fe <_fflush_r+0x26>
    7320:	68ec      	ldr	r4, [r5, #12]
    7322:	e7ec      	b.n	72fe <_fflush_r+0x26>
    7324:	00007b48 	.word	0x00007b48
    7328:	00007b68 	.word	0x00007b68
    732c:	00007b28 	.word	0x00007b28

00007330 <_cleanup_r>:
    7330:	b510      	push	{r4, lr}
    7332:	4902      	ldr	r1, [pc, #8]	; (733c <_cleanup_r+0xc>)
    7334:	f000 f8b2 	bl	749c <_fwalk_reent>
    7338:	bd10      	pop	{r4, pc}
    733a:	46c0      	nop			; (mov r8, r8)
    733c:	000072d9 	.word	0x000072d9

00007340 <std.isra.0>:
    7340:	2300      	movs	r3, #0
    7342:	b510      	push	{r4, lr}
    7344:	0004      	movs	r4, r0
    7346:	6003      	str	r3, [r0, #0]
    7348:	6043      	str	r3, [r0, #4]
    734a:	6083      	str	r3, [r0, #8]
    734c:	8181      	strh	r1, [r0, #12]
    734e:	6643      	str	r3, [r0, #100]	; 0x64
    7350:	81c2      	strh	r2, [r0, #14]
    7352:	6103      	str	r3, [r0, #16]
    7354:	6143      	str	r3, [r0, #20]
    7356:	6183      	str	r3, [r0, #24]
    7358:	0019      	movs	r1, r3
    735a:	2208      	movs	r2, #8
    735c:	305c      	adds	r0, #92	; 0x5c
    735e:	f7ff fe74 	bl	704a <memset>
    7362:	4b05      	ldr	r3, [pc, #20]	; (7378 <std.isra.0+0x38>)
    7364:	6224      	str	r4, [r4, #32]
    7366:	6263      	str	r3, [r4, #36]	; 0x24
    7368:	4b04      	ldr	r3, [pc, #16]	; (737c <std.isra.0+0x3c>)
    736a:	62a3      	str	r3, [r4, #40]	; 0x28
    736c:	4b04      	ldr	r3, [pc, #16]	; (7380 <std.isra.0+0x40>)
    736e:	62e3      	str	r3, [r4, #44]	; 0x2c
    7370:	4b04      	ldr	r3, [pc, #16]	; (7384 <std.isra.0+0x44>)
    7372:	6323      	str	r3, [r4, #48]	; 0x30
    7374:	bd10      	pop	{r4, pc}
    7376:	46c0      	nop			; (mov r8, r8)
    7378:	000076b9 	.word	0x000076b9
    737c:	000076e1 	.word	0x000076e1
    7380:	00007719 	.word	0x00007719
    7384:	00007745 	.word	0x00007745

00007388 <__sfmoreglue>:
    7388:	b570      	push	{r4, r5, r6, lr}
    738a:	2568      	movs	r5, #104	; 0x68
    738c:	1e4a      	subs	r2, r1, #1
    738e:	4355      	muls	r5, r2
    7390:	000e      	movs	r6, r1
    7392:	0029      	movs	r1, r5
    7394:	3174      	adds	r1, #116	; 0x74
    7396:	f000 f91f 	bl	75d8 <_malloc_r>
    739a:	1e04      	subs	r4, r0, #0
    739c:	d008      	beq.n	73b0 <__sfmoreglue+0x28>
    739e:	2100      	movs	r1, #0
    73a0:	002a      	movs	r2, r5
    73a2:	6001      	str	r1, [r0, #0]
    73a4:	6046      	str	r6, [r0, #4]
    73a6:	300c      	adds	r0, #12
    73a8:	60a0      	str	r0, [r4, #8]
    73aa:	3268      	adds	r2, #104	; 0x68
    73ac:	f7ff fe4d 	bl	704a <memset>
    73b0:	0020      	movs	r0, r4
    73b2:	bd70      	pop	{r4, r5, r6, pc}

000073b4 <__sinit>:
    73b4:	6983      	ldr	r3, [r0, #24]
    73b6:	b513      	push	{r0, r1, r4, lr}
    73b8:	0004      	movs	r4, r0
    73ba:	2b00      	cmp	r3, #0
    73bc:	d128      	bne.n	7410 <__sinit+0x5c>
    73be:	6483      	str	r3, [r0, #72]	; 0x48
    73c0:	64c3      	str	r3, [r0, #76]	; 0x4c
    73c2:	6503      	str	r3, [r0, #80]	; 0x50
    73c4:	4b13      	ldr	r3, [pc, #76]	; (7414 <__sinit+0x60>)
    73c6:	4a14      	ldr	r2, [pc, #80]	; (7418 <__sinit+0x64>)
    73c8:	681b      	ldr	r3, [r3, #0]
    73ca:	6282      	str	r2, [r0, #40]	; 0x28
    73cc:	9301      	str	r3, [sp, #4]
    73ce:	4298      	cmp	r0, r3
    73d0:	d101      	bne.n	73d6 <__sinit+0x22>
    73d2:	2301      	movs	r3, #1
    73d4:	6183      	str	r3, [r0, #24]
    73d6:	0020      	movs	r0, r4
    73d8:	f000 f820 	bl	741c <__sfp>
    73dc:	6060      	str	r0, [r4, #4]
    73de:	0020      	movs	r0, r4
    73e0:	f000 f81c 	bl	741c <__sfp>
    73e4:	60a0      	str	r0, [r4, #8]
    73e6:	0020      	movs	r0, r4
    73e8:	f000 f818 	bl	741c <__sfp>
    73ec:	2200      	movs	r2, #0
    73ee:	60e0      	str	r0, [r4, #12]
    73f0:	2104      	movs	r1, #4
    73f2:	6860      	ldr	r0, [r4, #4]
    73f4:	f7ff ffa4 	bl	7340 <std.isra.0>
    73f8:	2201      	movs	r2, #1
    73fa:	2109      	movs	r1, #9
    73fc:	68a0      	ldr	r0, [r4, #8]
    73fe:	f7ff ff9f 	bl	7340 <std.isra.0>
    7402:	2202      	movs	r2, #2
    7404:	2112      	movs	r1, #18
    7406:	68e0      	ldr	r0, [r4, #12]
    7408:	f7ff ff9a 	bl	7340 <std.isra.0>
    740c:	2301      	movs	r3, #1
    740e:	61a3      	str	r3, [r4, #24]
    7410:	bd13      	pop	{r0, r1, r4, pc}
    7412:	46c0      	nop			; (mov r8, r8)
    7414:	00007b24 	.word	0x00007b24
    7418:	00007331 	.word	0x00007331

0000741c <__sfp>:
    741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    741e:	4b1e      	ldr	r3, [pc, #120]	; (7498 <__sfp+0x7c>)
    7420:	0007      	movs	r7, r0
    7422:	681e      	ldr	r6, [r3, #0]
    7424:	69b3      	ldr	r3, [r6, #24]
    7426:	2b00      	cmp	r3, #0
    7428:	d102      	bne.n	7430 <__sfp+0x14>
    742a:	0030      	movs	r0, r6
    742c:	f7ff ffc2 	bl	73b4 <__sinit>
    7430:	3648      	adds	r6, #72	; 0x48
    7432:	68b4      	ldr	r4, [r6, #8]
    7434:	6873      	ldr	r3, [r6, #4]
    7436:	3b01      	subs	r3, #1
    7438:	d504      	bpl.n	7444 <__sfp+0x28>
    743a:	6833      	ldr	r3, [r6, #0]
    743c:	2b00      	cmp	r3, #0
    743e:	d007      	beq.n	7450 <__sfp+0x34>
    7440:	6836      	ldr	r6, [r6, #0]
    7442:	e7f6      	b.n	7432 <__sfp+0x16>
    7444:	220c      	movs	r2, #12
    7446:	5ea5      	ldrsh	r5, [r4, r2]
    7448:	2d00      	cmp	r5, #0
    744a:	d00d      	beq.n	7468 <__sfp+0x4c>
    744c:	3468      	adds	r4, #104	; 0x68
    744e:	e7f2      	b.n	7436 <__sfp+0x1a>
    7450:	2104      	movs	r1, #4
    7452:	0038      	movs	r0, r7
    7454:	f7ff ff98 	bl	7388 <__sfmoreglue>
    7458:	6030      	str	r0, [r6, #0]
    745a:	2800      	cmp	r0, #0
    745c:	d1f0      	bne.n	7440 <__sfp+0x24>
    745e:	230c      	movs	r3, #12
    7460:	0004      	movs	r4, r0
    7462:	603b      	str	r3, [r7, #0]
    7464:	0020      	movs	r0, r4
    7466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7468:	2301      	movs	r3, #1
    746a:	0020      	movs	r0, r4
    746c:	425b      	negs	r3, r3
    746e:	81e3      	strh	r3, [r4, #14]
    7470:	3302      	adds	r3, #2
    7472:	81a3      	strh	r3, [r4, #12]
    7474:	6665      	str	r5, [r4, #100]	; 0x64
    7476:	6025      	str	r5, [r4, #0]
    7478:	60a5      	str	r5, [r4, #8]
    747a:	6065      	str	r5, [r4, #4]
    747c:	6125      	str	r5, [r4, #16]
    747e:	6165      	str	r5, [r4, #20]
    7480:	61a5      	str	r5, [r4, #24]
    7482:	2208      	movs	r2, #8
    7484:	0029      	movs	r1, r5
    7486:	305c      	adds	r0, #92	; 0x5c
    7488:	f7ff fddf 	bl	704a <memset>
    748c:	6365      	str	r5, [r4, #52]	; 0x34
    748e:	63a5      	str	r5, [r4, #56]	; 0x38
    7490:	64a5      	str	r5, [r4, #72]	; 0x48
    7492:	64e5      	str	r5, [r4, #76]	; 0x4c
    7494:	e7e6      	b.n	7464 <__sfp+0x48>
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	00007b24 	.word	0x00007b24

0000749c <_fwalk_reent>:
    749c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    749e:	0004      	movs	r4, r0
    74a0:	0007      	movs	r7, r0
    74a2:	2600      	movs	r6, #0
    74a4:	9101      	str	r1, [sp, #4]
    74a6:	3448      	adds	r4, #72	; 0x48
    74a8:	2c00      	cmp	r4, #0
    74aa:	d101      	bne.n	74b0 <_fwalk_reent+0x14>
    74ac:	0030      	movs	r0, r6
    74ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    74b0:	6863      	ldr	r3, [r4, #4]
    74b2:	68a5      	ldr	r5, [r4, #8]
    74b4:	9300      	str	r3, [sp, #0]
    74b6:	9b00      	ldr	r3, [sp, #0]
    74b8:	3b01      	subs	r3, #1
    74ba:	9300      	str	r3, [sp, #0]
    74bc:	d501      	bpl.n	74c2 <_fwalk_reent+0x26>
    74be:	6824      	ldr	r4, [r4, #0]
    74c0:	e7f2      	b.n	74a8 <_fwalk_reent+0xc>
    74c2:	89ab      	ldrh	r3, [r5, #12]
    74c4:	2b01      	cmp	r3, #1
    74c6:	d908      	bls.n	74da <_fwalk_reent+0x3e>
    74c8:	220e      	movs	r2, #14
    74ca:	5eab      	ldrsh	r3, [r5, r2]
    74cc:	3301      	adds	r3, #1
    74ce:	d004      	beq.n	74da <_fwalk_reent+0x3e>
    74d0:	0029      	movs	r1, r5
    74d2:	0038      	movs	r0, r7
    74d4:	9b01      	ldr	r3, [sp, #4]
    74d6:	4798      	blx	r3
    74d8:	4306      	orrs	r6, r0
    74da:	3568      	adds	r5, #104	; 0x68
    74dc:	e7eb      	b.n	74b6 <_fwalk_reent+0x1a>
	...

000074e0 <__swhatbuf_r>:
    74e0:	b570      	push	{r4, r5, r6, lr}
    74e2:	000e      	movs	r6, r1
    74e4:	001d      	movs	r5, r3
    74e6:	230e      	movs	r3, #14
    74e8:	5ec9      	ldrsh	r1, [r1, r3]
    74ea:	b090      	sub	sp, #64	; 0x40
    74ec:	0014      	movs	r4, r2
    74ee:	2900      	cmp	r1, #0
    74f0:	da07      	bge.n	7502 <__swhatbuf_r+0x22>
    74f2:	2300      	movs	r3, #0
    74f4:	602b      	str	r3, [r5, #0]
    74f6:	89b3      	ldrh	r3, [r6, #12]
    74f8:	061b      	lsls	r3, r3, #24
    74fa:	d411      	bmi.n	7520 <__swhatbuf_r+0x40>
    74fc:	2380      	movs	r3, #128	; 0x80
    74fe:	00db      	lsls	r3, r3, #3
    7500:	e00f      	b.n	7522 <__swhatbuf_r+0x42>
    7502:	aa01      	add	r2, sp, #4
    7504:	f000 f94a 	bl	779c <_fstat_r>
    7508:	2800      	cmp	r0, #0
    750a:	dbf2      	blt.n	74f2 <__swhatbuf_r+0x12>
    750c:	22f0      	movs	r2, #240	; 0xf0
    750e:	9b02      	ldr	r3, [sp, #8]
    7510:	0212      	lsls	r2, r2, #8
    7512:	4013      	ands	r3, r2
    7514:	4a05      	ldr	r2, [pc, #20]	; (752c <__swhatbuf_r+0x4c>)
    7516:	189b      	adds	r3, r3, r2
    7518:	425a      	negs	r2, r3
    751a:	4153      	adcs	r3, r2
    751c:	602b      	str	r3, [r5, #0]
    751e:	e7ed      	b.n	74fc <__swhatbuf_r+0x1c>
    7520:	2340      	movs	r3, #64	; 0x40
    7522:	2000      	movs	r0, #0
    7524:	6023      	str	r3, [r4, #0]
    7526:	b010      	add	sp, #64	; 0x40
    7528:	bd70      	pop	{r4, r5, r6, pc}
    752a:	46c0      	nop			; (mov r8, r8)
    752c:	ffffe000 	.word	0xffffe000

00007530 <malloc>:
    7530:	b510      	push	{r4, lr}
    7532:	4b03      	ldr	r3, [pc, #12]	; (7540 <malloc+0x10>)
    7534:	0001      	movs	r1, r0
    7536:	6818      	ldr	r0, [r3, #0]
    7538:	f000 f84e 	bl	75d8 <_malloc_r>
    753c:	bd10      	pop	{r4, pc}
    753e:	46c0      	nop			; (mov r8, r8)
    7540:	200000fc 	.word	0x200000fc

00007544 <_free_r>:
    7544:	b570      	push	{r4, r5, r6, lr}
    7546:	0005      	movs	r5, r0
    7548:	2900      	cmp	r1, #0
    754a:	d010      	beq.n	756e <_free_r+0x2a>
    754c:	1f0c      	subs	r4, r1, #4
    754e:	6823      	ldr	r3, [r4, #0]
    7550:	2b00      	cmp	r3, #0
    7552:	da00      	bge.n	7556 <_free_r+0x12>
    7554:	18e4      	adds	r4, r4, r3
    7556:	0028      	movs	r0, r5
    7558:	f000 f946 	bl	77e8 <__malloc_lock>
    755c:	4a1d      	ldr	r2, [pc, #116]	; (75d4 <_free_r+0x90>)
    755e:	6813      	ldr	r3, [r2, #0]
    7560:	2b00      	cmp	r3, #0
    7562:	d105      	bne.n	7570 <_free_r+0x2c>
    7564:	6063      	str	r3, [r4, #4]
    7566:	6014      	str	r4, [r2, #0]
    7568:	0028      	movs	r0, r5
    756a:	f000 f93e 	bl	77ea <__malloc_unlock>
    756e:	bd70      	pop	{r4, r5, r6, pc}
    7570:	42a3      	cmp	r3, r4
    7572:	d909      	bls.n	7588 <_free_r+0x44>
    7574:	6821      	ldr	r1, [r4, #0]
    7576:	1860      	adds	r0, r4, r1
    7578:	4283      	cmp	r3, r0
    757a:	d1f3      	bne.n	7564 <_free_r+0x20>
    757c:	6818      	ldr	r0, [r3, #0]
    757e:	685b      	ldr	r3, [r3, #4]
    7580:	1841      	adds	r1, r0, r1
    7582:	6021      	str	r1, [r4, #0]
    7584:	e7ee      	b.n	7564 <_free_r+0x20>
    7586:	0013      	movs	r3, r2
    7588:	685a      	ldr	r2, [r3, #4]
    758a:	2a00      	cmp	r2, #0
    758c:	d001      	beq.n	7592 <_free_r+0x4e>
    758e:	42a2      	cmp	r2, r4
    7590:	d9f9      	bls.n	7586 <_free_r+0x42>
    7592:	6819      	ldr	r1, [r3, #0]
    7594:	1858      	adds	r0, r3, r1
    7596:	42a0      	cmp	r0, r4
    7598:	d10b      	bne.n	75b2 <_free_r+0x6e>
    759a:	6820      	ldr	r0, [r4, #0]
    759c:	1809      	adds	r1, r1, r0
    759e:	1858      	adds	r0, r3, r1
    75a0:	6019      	str	r1, [r3, #0]
    75a2:	4282      	cmp	r2, r0
    75a4:	d1e0      	bne.n	7568 <_free_r+0x24>
    75a6:	6810      	ldr	r0, [r2, #0]
    75a8:	6852      	ldr	r2, [r2, #4]
    75aa:	1841      	adds	r1, r0, r1
    75ac:	6019      	str	r1, [r3, #0]
    75ae:	605a      	str	r2, [r3, #4]
    75b0:	e7da      	b.n	7568 <_free_r+0x24>
    75b2:	42a0      	cmp	r0, r4
    75b4:	d902      	bls.n	75bc <_free_r+0x78>
    75b6:	230c      	movs	r3, #12
    75b8:	602b      	str	r3, [r5, #0]
    75ba:	e7d5      	b.n	7568 <_free_r+0x24>
    75bc:	6821      	ldr	r1, [r4, #0]
    75be:	1860      	adds	r0, r4, r1
    75c0:	4282      	cmp	r2, r0
    75c2:	d103      	bne.n	75cc <_free_r+0x88>
    75c4:	6810      	ldr	r0, [r2, #0]
    75c6:	6852      	ldr	r2, [r2, #4]
    75c8:	1841      	adds	r1, r0, r1
    75ca:	6021      	str	r1, [r4, #0]
    75cc:	6062      	str	r2, [r4, #4]
    75ce:	605c      	str	r4, [r3, #4]
    75d0:	e7ca      	b.n	7568 <_free_r+0x24>
    75d2:	46c0      	nop			; (mov r8, r8)
    75d4:	200002e0 	.word	0x200002e0

000075d8 <_malloc_r>:
    75d8:	2303      	movs	r3, #3
    75da:	b570      	push	{r4, r5, r6, lr}
    75dc:	1ccd      	adds	r5, r1, #3
    75de:	439d      	bics	r5, r3
    75e0:	3508      	adds	r5, #8
    75e2:	0006      	movs	r6, r0
    75e4:	2d0c      	cmp	r5, #12
    75e6:	d21e      	bcs.n	7626 <_malloc_r+0x4e>
    75e8:	250c      	movs	r5, #12
    75ea:	42a9      	cmp	r1, r5
    75ec:	d81d      	bhi.n	762a <_malloc_r+0x52>
    75ee:	0030      	movs	r0, r6
    75f0:	f000 f8fa 	bl	77e8 <__malloc_lock>
    75f4:	4a25      	ldr	r2, [pc, #148]	; (768c <_malloc_r+0xb4>)
    75f6:	6814      	ldr	r4, [r2, #0]
    75f8:	0021      	movs	r1, r4
    75fa:	2900      	cmp	r1, #0
    75fc:	d119      	bne.n	7632 <_malloc_r+0x5a>
    75fe:	4c24      	ldr	r4, [pc, #144]	; (7690 <_malloc_r+0xb8>)
    7600:	6823      	ldr	r3, [r4, #0]
    7602:	2b00      	cmp	r3, #0
    7604:	d103      	bne.n	760e <_malloc_r+0x36>
    7606:	0030      	movs	r0, r6
    7608:	f000 f844 	bl	7694 <_sbrk_r>
    760c:	6020      	str	r0, [r4, #0]
    760e:	0029      	movs	r1, r5
    7610:	0030      	movs	r0, r6
    7612:	f000 f83f 	bl	7694 <_sbrk_r>
    7616:	1c43      	adds	r3, r0, #1
    7618:	d12c      	bne.n	7674 <_malloc_r+0x9c>
    761a:	230c      	movs	r3, #12
    761c:	0030      	movs	r0, r6
    761e:	6033      	str	r3, [r6, #0]
    7620:	f000 f8e3 	bl	77ea <__malloc_unlock>
    7624:	e003      	b.n	762e <_malloc_r+0x56>
    7626:	2d00      	cmp	r5, #0
    7628:	dadf      	bge.n	75ea <_malloc_r+0x12>
    762a:	230c      	movs	r3, #12
    762c:	6033      	str	r3, [r6, #0]
    762e:	2000      	movs	r0, #0
    7630:	bd70      	pop	{r4, r5, r6, pc}
    7632:	680b      	ldr	r3, [r1, #0]
    7634:	1b5b      	subs	r3, r3, r5
    7636:	d41a      	bmi.n	766e <_malloc_r+0x96>
    7638:	2b0b      	cmp	r3, #11
    763a:	d903      	bls.n	7644 <_malloc_r+0x6c>
    763c:	600b      	str	r3, [r1, #0]
    763e:	18cc      	adds	r4, r1, r3
    7640:	6025      	str	r5, [r4, #0]
    7642:	e003      	b.n	764c <_malloc_r+0x74>
    7644:	428c      	cmp	r4, r1
    7646:	d10e      	bne.n	7666 <_malloc_r+0x8e>
    7648:	6863      	ldr	r3, [r4, #4]
    764a:	6013      	str	r3, [r2, #0]
    764c:	0030      	movs	r0, r6
    764e:	f000 f8cc 	bl	77ea <__malloc_unlock>
    7652:	0020      	movs	r0, r4
    7654:	2207      	movs	r2, #7
    7656:	300b      	adds	r0, #11
    7658:	1d23      	adds	r3, r4, #4
    765a:	4390      	bics	r0, r2
    765c:	1ac3      	subs	r3, r0, r3
    765e:	d0e7      	beq.n	7630 <_malloc_r+0x58>
    7660:	425a      	negs	r2, r3
    7662:	50e2      	str	r2, [r4, r3]
    7664:	e7e4      	b.n	7630 <_malloc_r+0x58>
    7666:	684b      	ldr	r3, [r1, #4]
    7668:	6063      	str	r3, [r4, #4]
    766a:	000c      	movs	r4, r1
    766c:	e7ee      	b.n	764c <_malloc_r+0x74>
    766e:	000c      	movs	r4, r1
    7670:	6849      	ldr	r1, [r1, #4]
    7672:	e7c2      	b.n	75fa <_malloc_r+0x22>
    7674:	2303      	movs	r3, #3
    7676:	1cc4      	adds	r4, r0, #3
    7678:	439c      	bics	r4, r3
    767a:	42a0      	cmp	r0, r4
    767c:	d0e0      	beq.n	7640 <_malloc_r+0x68>
    767e:	1a21      	subs	r1, r4, r0
    7680:	0030      	movs	r0, r6
    7682:	f000 f807 	bl	7694 <_sbrk_r>
    7686:	1c43      	adds	r3, r0, #1
    7688:	d1da      	bne.n	7640 <_malloc_r+0x68>
    768a:	e7c6      	b.n	761a <_malloc_r+0x42>
    768c:	200002e0 	.word	0x200002e0
    7690:	200002e4 	.word	0x200002e4

00007694 <_sbrk_r>:
    7694:	2300      	movs	r3, #0
    7696:	b570      	push	{r4, r5, r6, lr}
    7698:	4c06      	ldr	r4, [pc, #24]	; (76b4 <_sbrk_r+0x20>)
    769a:	0005      	movs	r5, r0
    769c:	0008      	movs	r0, r1
    769e:	6023      	str	r3, [r4, #0]
    76a0:	f7ff f9c0 	bl	6a24 <_sbrk>
    76a4:	1c43      	adds	r3, r0, #1
    76a6:	d103      	bne.n	76b0 <_sbrk_r+0x1c>
    76a8:	6823      	ldr	r3, [r4, #0]
    76aa:	2b00      	cmp	r3, #0
    76ac:	d000      	beq.n	76b0 <_sbrk_r+0x1c>
    76ae:	602b      	str	r3, [r5, #0]
    76b0:	bd70      	pop	{r4, r5, r6, pc}
    76b2:	46c0      	nop			; (mov r8, r8)
    76b4:	20000b2c 	.word	0x20000b2c

000076b8 <__sread>:
    76b8:	b570      	push	{r4, r5, r6, lr}
    76ba:	000c      	movs	r4, r1
    76bc:	250e      	movs	r5, #14
    76be:	5f49      	ldrsh	r1, [r1, r5]
    76c0:	f000 f894 	bl	77ec <_read_r>
    76c4:	2800      	cmp	r0, #0
    76c6:	db03      	blt.n	76d0 <__sread+0x18>
    76c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    76ca:	181b      	adds	r3, r3, r0
    76cc:	6563      	str	r3, [r4, #84]	; 0x54
    76ce:	bd70      	pop	{r4, r5, r6, pc}
    76d0:	89a3      	ldrh	r3, [r4, #12]
    76d2:	4a02      	ldr	r2, [pc, #8]	; (76dc <__sread+0x24>)
    76d4:	4013      	ands	r3, r2
    76d6:	81a3      	strh	r3, [r4, #12]
    76d8:	e7f9      	b.n	76ce <__sread+0x16>
    76da:	46c0      	nop			; (mov r8, r8)
    76dc:	ffffefff 	.word	0xffffefff

000076e0 <__swrite>:
    76e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76e2:	001f      	movs	r7, r3
    76e4:	898b      	ldrh	r3, [r1, #12]
    76e6:	0005      	movs	r5, r0
    76e8:	000c      	movs	r4, r1
    76ea:	0016      	movs	r6, r2
    76ec:	05db      	lsls	r3, r3, #23
    76ee:	d505      	bpl.n	76fc <__swrite+0x1c>
    76f0:	230e      	movs	r3, #14
    76f2:	5ec9      	ldrsh	r1, [r1, r3]
    76f4:	2200      	movs	r2, #0
    76f6:	2302      	movs	r3, #2
    76f8:	f000 f862 	bl	77c0 <_lseek_r>
    76fc:	89a3      	ldrh	r3, [r4, #12]
    76fe:	4a05      	ldr	r2, [pc, #20]	; (7714 <__swrite+0x34>)
    7700:	0028      	movs	r0, r5
    7702:	4013      	ands	r3, r2
    7704:	81a3      	strh	r3, [r4, #12]
    7706:	0032      	movs	r2, r6
    7708:	230e      	movs	r3, #14
    770a:	5ee1      	ldrsh	r1, [r4, r3]
    770c:	003b      	movs	r3, r7
    770e:	f000 f81f 	bl	7750 <_write_r>
    7712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7714:	ffffefff 	.word	0xffffefff

00007718 <__sseek>:
    7718:	b570      	push	{r4, r5, r6, lr}
    771a:	000c      	movs	r4, r1
    771c:	250e      	movs	r5, #14
    771e:	5f49      	ldrsh	r1, [r1, r5]
    7720:	f000 f84e 	bl	77c0 <_lseek_r>
    7724:	89a3      	ldrh	r3, [r4, #12]
    7726:	1c42      	adds	r2, r0, #1
    7728:	d103      	bne.n	7732 <__sseek+0x1a>
    772a:	4a05      	ldr	r2, [pc, #20]	; (7740 <__sseek+0x28>)
    772c:	4013      	ands	r3, r2
    772e:	81a3      	strh	r3, [r4, #12]
    7730:	bd70      	pop	{r4, r5, r6, pc}
    7732:	2280      	movs	r2, #128	; 0x80
    7734:	0152      	lsls	r2, r2, #5
    7736:	4313      	orrs	r3, r2
    7738:	81a3      	strh	r3, [r4, #12]
    773a:	6560      	str	r0, [r4, #84]	; 0x54
    773c:	e7f8      	b.n	7730 <__sseek+0x18>
    773e:	46c0      	nop			; (mov r8, r8)
    7740:	ffffefff 	.word	0xffffefff

00007744 <__sclose>:
    7744:	b510      	push	{r4, lr}
    7746:	230e      	movs	r3, #14
    7748:	5ec9      	ldrsh	r1, [r1, r3]
    774a:	f000 f815 	bl	7778 <_close_r>
    774e:	bd10      	pop	{r4, pc}

00007750 <_write_r>:
    7750:	b570      	push	{r4, r5, r6, lr}
    7752:	0005      	movs	r5, r0
    7754:	0008      	movs	r0, r1
    7756:	0011      	movs	r1, r2
    7758:	2200      	movs	r2, #0
    775a:	4c06      	ldr	r4, [pc, #24]	; (7774 <_write_r+0x24>)
    775c:	6022      	str	r2, [r4, #0]
    775e:	001a      	movs	r2, r3
    7760:	f7fc f9ce 	bl	3b00 <_write>
    7764:	1c43      	adds	r3, r0, #1
    7766:	d103      	bne.n	7770 <_write_r+0x20>
    7768:	6823      	ldr	r3, [r4, #0]
    776a:	2b00      	cmp	r3, #0
    776c:	d000      	beq.n	7770 <_write_r+0x20>
    776e:	602b      	str	r3, [r5, #0]
    7770:	bd70      	pop	{r4, r5, r6, pc}
    7772:	46c0      	nop			; (mov r8, r8)
    7774:	20000b2c 	.word	0x20000b2c

00007778 <_close_r>:
    7778:	2300      	movs	r3, #0
    777a:	b570      	push	{r4, r5, r6, lr}
    777c:	4c06      	ldr	r4, [pc, #24]	; (7798 <_close_r+0x20>)
    777e:	0005      	movs	r5, r0
    7780:	0008      	movs	r0, r1
    7782:	6023      	str	r3, [r4, #0]
    7784:	f7ff f960 	bl	6a48 <_close>
    7788:	1c43      	adds	r3, r0, #1
    778a:	d103      	bne.n	7794 <_close_r+0x1c>
    778c:	6823      	ldr	r3, [r4, #0]
    778e:	2b00      	cmp	r3, #0
    7790:	d000      	beq.n	7794 <_close_r+0x1c>
    7792:	602b      	str	r3, [r5, #0]
    7794:	bd70      	pop	{r4, r5, r6, pc}
    7796:	46c0      	nop			; (mov r8, r8)
    7798:	20000b2c 	.word	0x20000b2c

0000779c <_fstat_r>:
    779c:	2300      	movs	r3, #0
    779e:	b570      	push	{r4, r5, r6, lr}
    77a0:	4c06      	ldr	r4, [pc, #24]	; (77bc <_fstat_r+0x20>)
    77a2:	0005      	movs	r5, r0
    77a4:	0008      	movs	r0, r1
    77a6:	0011      	movs	r1, r2
    77a8:	6023      	str	r3, [r4, #0]
    77aa:	f7ff f950 	bl	6a4e <_fstat>
    77ae:	1c43      	adds	r3, r0, #1
    77b0:	d103      	bne.n	77ba <_fstat_r+0x1e>
    77b2:	6823      	ldr	r3, [r4, #0]
    77b4:	2b00      	cmp	r3, #0
    77b6:	d000      	beq.n	77ba <_fstat_r+0x1e>
    77b8:	602b      	str	r3, [r5, #0]
    77ba:	bd70      	pop	{r4, r5, r6, pc}
    77bc:	20000b2c 	.word	0x20000b2c

000077c0 <_lseek_r>:
    77c0:	b570      	push	{r4, r5, r6, lr}
    77c2:	0005      	movs	r5, r0
    77c4:	0008      	movs	r0, r1
    77c6:	0011      	movs	r1, r2
    77c8:	2200      	movs	r2, #0
    77ca:	4c06      	ldr	r4, [pc, #24]	; (77e4 <_lseek_r+0x24>)
    77cc:	6022      	str	r2, [r4, #0]
    77ce:	001a      	movs	r2, r3
    77d0:	f7ff f942 	bl	6a58 <_lseek>
    77d4:	1c43      	adds	r3, r0, #1
    77d6:	d103      	bne.n	77e0 <_lseek_r+0x20>
    77d8:	6823      	ldr	r3, [r4, #0]
    77da:	2b00      	cmp	r3, #0
    77dc:	d000      	beq.n	77e0 <_lseek_r+0x20>
    77de:	602b      	str	r3, [r5, #0]
    77e0:	bd70      	pop	{r4, r5, r6, pc}
    77e2:	46c0      	nop			; (mov r8, r8)
    77e4:	20000b2c 	.word	0x20000b2c

000077e8 <__malloc_lock>:
    77e8:	4770      	bx	lr

000077ea <__malloc_unlock>:
    77ea:	4770      	bx	lr

000077ec <_read_r>:
    77ec:	b570      	push	{r4, r5, r6, lr}
    77ee:	0005      	movs	r5, r0
    77f0:	0008      	movs	r0, r1
    77f2:	0011      	movs	r1, r2
    77f4:	2200      	movs	r2, #0
    77f6:	4c06      	ldr	r4, [pc, #24]	; (7810 <_read_r+0x24>)
    77f8:	6022      	str	r2, [r4, #0]
    77fa:	001a      	movs	r2, r3
    77fc:	f7fc f95e 	bl	3abc <_read>
    7800:	1c43      	adds	r3, r0, #1
    7802:	d103      	bne.n	780c <_read_r+0x20>
    7804:	6823      	ldr	r3, [r4, #0]
    7806:	2b00      	cmp	r3, #0
    7808:	d000      	beq.n	780c <_read_r+0x20>
    780a:	602b      	str	r3, [r5, #0]
    780c:	bd70      	pop	{r4, r5, r6, pc}
    780e:	46c0      	nop			; (mov r8, r8)
    7810:	20000b2c 	.word	0x20000b2c

00007814 <_tcc_apbcmasks>:
    7814:	00000100 00000200 00000400              ............

00007820 <_tcc_cc_nums>:
    7820:	00020204                                ....

00007824 <_tcc_gclk_ids>:
    7824:	001b1a1a                                ....

00007828 <_tcc_maxs>:
    7828:	00ffffff 00ffffff 0000ffff              ............

00007834 <_tcc_ow_nums>:
    7834:	00020408                                ....

00007838 <_tcc_intflag>:
    7838:	00000001 00000002 00000004 00000008     ................
    7848:	00001000 00002000 00004000 00008000     ..... ...@......
    7858:	00010000 00020000 00040000 00080000     ................

00007868 <tcc_interrupt_vectors.12466>:
    7868:	0011100f                                ....

0000786c <mmc_trans_multipliers>:
    786c:	00000000 0000000a 0000000c 0000000d     ................
    787c:	0000000f 00000014 0000001a 0000001e     ................
    788c:	00000023 00000028 0000002d 00000034     #...(...-...4...
    789c:	00000037 0000003c 00000046 00000050     7...<...F...P...

000078ac <sd_mmc_trans_units>:
    78ac:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000078c8 <sd_trans_multipliers>:
    78c8:	00000000 0000000a 0000000c 0000000d     ................
    78d8:	0000000f 00000014 00000019 0000001e     ................
    78e8:	00000023 00000028 0000002d 00000032     #...(...-...2...
    78f8:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7908:	000017ae 00001884 00001884 000016f0     ................
    7918:	00001884 00001884 00001884 00001884     ................
    7928:	00001884 00001884 00001884 00001884     ................
    7938:	00001884 00001884 00001884 00001884     ................
    7948:	00001884 00001884 00001714 00001884     ................
    7958:	00001884 00001884 00001884 00001884     ................
    7968:	00001884 00001884 0000179e 00001832     ............2...
    7978:	00001884 00001884 00001852 00001884     ........R.......
    7988:	00001884 00001884 00001884 00001884     ................
    7998:	00001884 000017da 00001884 00001884     ................
    79a8:	00001874 00001884 0000187c 00001884     t.......|.......
    79b8:	00001884 00001884 00001884 0000186a     ............j...
    79c8:	00001884 00001884 00001884 00001884     ................
    79d8:	00001884 00001884 00001884 00001884     ................
    79e8:	00001884 00001884 00001884 00001884     ................
    79f8:	00001884 00001884 00001884 00001884     ................
    7a08:	00001884 00001884 00001884 00001884     ................
    7a18:	00001884 00001884 00001884 00001884     ................
    7a28:	00001884 00001884 00001884 00001884     ................
    7a38:	00001884 00001884 00001884 00001884     ................
    7a48:	00001884 00001884 00001884 00001884     ................
    7a58:	00001884 00001884 00001884 00001884     ................
    7a68:	00001884 00001884 000017a6 31333231     ............1231
    7a78:	32313332 33323133 00000000 0000291e     23123123.....)..
    7a88:	0000291a 0000291a 00002988 00002988     .)...)...)...)..
    7a98:	00002932 00002924 00002938 00002976     2)..$)..8)..v)..
    7aa8:	00002b0c 00002aec 00002aec 00002b78     .+...*...*..x+..
    7ab8:	00002afe 00002b1a 00002af0 00002b28     .*...+...*..(+..
    7ac8:	00002b68 000042a4 000042b2 0000434c     h+...B...B..LC..
    7ad8:	000043ec 00004450                       .C..PD..

00007ae0 <_usb_device_irq_bits>:
    7ae0:	00080004 00800070 01000001 00000200     ....p...........

00007af0 <_usb_endpoint_irq_bits>:
    7af0:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    7b00:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    7b10:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    7b20:	00002249                                I"..

00007b24 <_global_impure_ptr>:
    7b24:	20000100                                ... 

00007b28 <__sf_fake_stderr>:
	...

00007b48 <__sf_fake_stdin>:
	...

00007b68 <__sf_fake_stdout>:
	...

00007b88 <_init>:
    7b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7b8e:	bc08      	pop	{r3}
    7b90:	469e      	mov	lr, r3
    7b92:	4770      	bx	lr

00007b94 <__init_array_start>:
    7b94:	000000dd 	.word	0x000000dd

00007b98 <_fini>:
    7b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7b9e:	bc08      	pop	{r3}
    7ba0:	469e      	mov	lr, r3
    7ba2:	4770      	bx	lr

00007ba4 <__fini_array_start>:
    7ba4:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	12b1 0000 1925 0000 194d 0000 1255 0000     ....%...M...U...
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12580>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <udc_config>:
200000ac:	00e0 2000 00b8 2000 0000 0000               ... ... ....

200000b8 <udc_config_lsfs>:
200000b8:	00c0 2000 00f4 2000                         ... ... 

200000c0 <udc_desc_fs>:
200000c0:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000d0:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

200000e0 <udc_device_desc>:
200000e0:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
200000f0:	0103 0000                                   ....

200000f4 <udi_apis>:
200000f4:	0030 2000                                   0.. 

200000f8 <ss_pins>:
200000f8:	0105                                             .

200000f9 <g_interrupt_enabled>:
200000f9:	0001 0000                                        ...

200000fc <_impure_ptr>:
200000fc:	0100 2000                                   ... 

20000100 <impure_data>:
20000100:	0000 0000 7b48 0000 7b68 0000 7b28 0000     ....H{..h{..({..
	...
