
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000081a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000081a0  000081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000d0  20000000  000081a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a40  200000d0  00008280  000200d0  2**4
                  ALLOC
  4 .stack        00002000  20000b10  00008cc0  000200d0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005b008  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000791a  00000000  00000000  0007b159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013693  00000000  00000000  00082a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000dc8  00000000  00000000  00096106  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000014d8  00000000  00000000  00096ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023ac3  00000000  00000000  000983a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b912  00000000  00000000  000bbe69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009cb1a  00000000  00000000  000d777b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002c50  00000000  00000000  00174298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 2b 00 20 89 62 00 00 85 62 00 00 85 62 00 00     .+. .b...b...b..
	...
      2c:	85 62 00 00 00 00 00 00 00 00 00 00 85 62 00 00     .b...........b..
      3c:	85 62 00 00 85 62 00 00 85 62 00 00 85 62 00 00     .b...b...b...b..
      4c:	85 62 00 00 81 49 00 00 85 62 00 00 15 01 00 00     .b...I...b......
      5c:	6d 43 00 00 85 62 00 00 f9 12 00 00 09 13 00 00     mC...b..........
      6c:	19 13 00 00 29 13 00 00 39 13 00 00 49 13 00 00     ....)...9...I...
      7c:	c9 04 00 00 d9 04 00 00 e9 04 00 00 85 62 00 00     .............b..
      8c:	85 62 00 00 85 62 00 00 85 62 00 00 85 62 00 00     .b...b...b...b..
      9c:	85 62 00 00 85 62 00 00 85 62 00 00 85 62 00 00     .b...b...b...b..
      ac:	85 62 00 00 00 00 00 00                             .b......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d0 	.word	0x200000d0
      d4:	00000000 	.word	0x00000000
      d8:	000081a8 	.word	0x000081a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000d4 	.word	0x200000d4
     108:	000081a8 	.word	0x000081a8
     10c:	000081a8 	.word	0x000081a8
     110:	00000000 	.word	0x00000000

00000114 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     114:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     116:	4b26      	ldr	r3, [pc, #152]	; (1b0 <DMAC_Handler+0x9c>)
     118:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     11a:	4926      	ldr	r1, [pc, #152]	; (1b4 <DMAC_Handler+0xa0>)
     11c:	8c0b      	ldrh	r3, [r1, #32]
     11e:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     120:	4013      	ands	r3, r2
     122:	009b      	lsls	r3, r3, #2
     124:	4824      	ldr	r0, [pc, #144]	; (1b8 <DMAC_Handler+0xa4>)
     126:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     128:	7803      	ldrb	r3, [r0, #0]
     12a:	401a      	ands	r2, r3
     12c:	233f      	movs	r3, #63	; 0x3f
     12e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     130:	330f      	adds	r3, #15
     132:	5cca      	ldrb	r2, [r1, r3]
     134:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     136:	7803      	ldrb	r3, [r0, #0]
     138:	011b      	lsls	r3, r3, #4
     13a:	4920      	ldr	r1, [pc, #128]	; (1bc <DMAC_Handler+0xa8>)
     13c:	18c9      	adds	r1, r1, r3
     13e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     140:	4c1f      	ldr	r4, [pc, #124]	; (1c0 <DMAC_Handler+0xac>)
     142:	18e3      	adds	r3, r4, r3
     144:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     146:	1acb      	subs	r3, r1, r3
     148:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     14a:	07d3      	lsls	r3, r2, #31
     14c:	d50f      	bpl.n	16e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     14e:	2101      	movs	r1, #1
     150:	234e      	movs	r3, #78	; 0x4e
     152:	4a18      	ldr	r2, [pc, #96]	; (1b4 <DMAC_Handler+0xa0>)
     154:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     156:	3b3e      	subs	r3, #62	; 0x3e
     158:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     15a:	7c03      	ldrb	r3, [r0, #16]
     15c:	07db      	lsls	r3, r3, #31
     15e:	d503      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     160:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     162:	2b00      	cmp	r3, #0
     164:	d000      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     166:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     168:	4b16      	ldr	r3, [pc, #88]	; (1c4 <DMAC_Handler+0xb0>)
     16a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     16c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     16e:	0793      	lsls	r3, r2, #30
     170:	d50d      	bpl.n	18e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     172:	2102      	movs	r1, #2
     174:	234e      	movs	r3, #78	; 0x4e
     176:	4a0f      	ldr	r2, [pc, #60]	; (1b4 <DMAC_Handler+0xa0>)
     178:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     17a:	2300      	movs	r3, #0
     17c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     17e:	7c03      	ldrb	r3, [r0, #16]
     180:	079b      	lsls	r3, r3, #30
     182:	d5f1      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     184:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     186:	2b00      	cmp	r3, #0
     188:	d0ee      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     18a:	4798      	blx	r3
     18c:	e7ec      	b.n	168 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     18e:	0753      	lsls	r3, r2, #29
     190:	d5ea      	bpl.n	168 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     192:	2104      	movs	r1, #4
     194:	234e      	movs	r3, #78	; 0x4e
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <DMAC_Handler+0xa0>)
     198:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     19a:	3b48      	subs	r3, #72	; 0x48
     19c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     19e:	7c03      	ldrb	r3, [r0, #16]
     1a0:	075b      	lsls	r3, r3, #29
     1a2:	d5e1      	bpl.n	168 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     1a4:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     1a6:	2b00      	cmp	r3, #0
     1a8:	d0de      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     1aa:	4798      	blx	r3
     1ac:	e7dc      	b.n	168 <DMAC_Handler+0x54>
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00005e29 	.word	0x00005e29
     1b4:	41004800 	.word	0x41004800
     1b8:	200000ec 	.word	0x200000ec
     1bc:	20000220 	.word	0x20000220
     1c0:	20000100 	.word	0x20000100
     1c4:	00005e69 	.word	0x00005e69

000001c8 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     1c8:	2300      	movs	r3, #0
     1ca:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     1cc:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
     1ce:	2203      	movs	r2, #3
     1d0:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     1d2:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     1d4:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     1d6:	4770      	bx	lr

000001d8 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1da:	46ce      	mov	lr, r9
     1dc:	4647      	mov	r7, r8
     1de:	b580      	push	{r7, lr}
     1e0:	0005      	movs	r5, r0
     1e2:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     1e4:	4b45      	ldr	r3, [pc, #276]	; (2fc <dma_allocate+0x124>)
     1e6:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     1e8:	4b45      	ldr	r3, [pc, #276]	; (300 <dma_allocate+0x128>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d118      	bne.n	222 <dma_allocate+0x4a>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	PM->AHBMASK.reg |= ahb_mask;
     1f0:	4b44      	ldr	r3, [pc, #272]	; (304 <dma_allocate+0x12c>)
     1f2:	695a      	ldr	r2, [r3, #20]
     1f4:	2120      	movs	r1, #32
     1f6:	430a      	orrs	r2, r1
     1f8:	615a      	str	r2, [r3, #20]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1fa:	69da      	ldr	r2, [r3, #28]
     1fc:	3910      	subs	r1, #16
     1fe:	430a      	orrs	r2, r1
     200:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     202:	4b41      	ldr	r3, [pc, #260]	; (308 <dma_allocate+0x130>)
     204:	881a      	ldrh	r2, [r3, #0]
     206:	390e      	subs	r1, #14
     208:	438a      	bics	r2, r1
     20a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     20c:	2201      	movs	r2, #1
     20e:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     210:	4a3e      	ldr	r2, [pc, #248]	; (30c <dma_allocate+0x134>)
     212:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     214:	4a3e      	ldr	r2, [pc, #248]	; (310 <dma_allocate+0x138>)
     216:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     218:	4a3e      	ldr	r2, [pc, #248]	; (314 <dma_allocate+0x13c>)
     21a:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     21c:	4b38      	ldr	r3, [pc, #224]	; (300 <dma_allocate+0x128>)
     21e:	2201      	movs	r2, #1
     220:	701a      	strb	r2, [r3, #0]
     222:	4b36      	ldr	r3, [pc, #216]	; (2fc <dma_allocate+0x124>)
     224:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     226:	4b36      	ldr	r3, [pc, #216]	; (300 <dma_allocate+0x128>)
     228:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     22a:	07da      	lsls	r2, r3, #31
     22c:	d50f      	bpl.n	24e <dma_allocate+0x76>
		tmp = tmp >> 1;
     22e:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     230:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     232:	2201      	movs	r2, #1
     234:	421a      	tst	r2, r3
     236:	d00b      	beq.n	250 <dma_allocate+0x78>
		tmp = tmp >> 1;
     238:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     23a:	3401      	adds	r4, #1
     23c:	b2e4      	uxtb	r4, r4
     23e:	2c05      	cmp	r4, #5
     240:	d1f8      	bne.n	234 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     242:	4b35      	ldr	r3, [pc, #212]	; (318 <dma_allocate+0x140>)
     244:	4798      	blx	r3
     246:	4b34      	ldr	r3, [pc, #208]	; (318 <dma_allocate+0x140>)
     248:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     24a:	2014      	movs	r0, #20
     24c:	e051      	b.n	2f2 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     24e:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     250:	4a2b      	ldr	r2, [pc, #172]	; (300 <dma_allocate+0x128>)
     252:	6851      	ldr	r1, [r2, #4]
     254:	2301      	movs	r3, #1
     256:	40a3      	lsls	r3, r4
     258:	430b      	orrs	r3, r1
     25a:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     25c:	7a13      	ldrb	r3, [r2, #8]
     25e:	3b01      	subs	r3, #1
     260:	7213      	strb	r3, [r2, #8]
     262:	4b2d      	ldr	r3, [pc, #180]	; (318 <dma_allocate+0x140>)
     264:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     266:	2cff      	cmp	r4, #255	; 0xff
     268:	d0ed      	beq.n	246 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     26a:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     26c:	230f      	movs	r3, #15
     26e:	4698      	mov	r8, r3
     270:	401c      	ands	r4, r3
     272:	4f25      	ldr	r7, [pc, #148]	; (308 <dma_allocate+0x130>)
     274:	3330      	adds	r3, #48	; 0x30
     276:	4699      	mov	r9, r3
     278:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     27a:	3301      	adds	r3, #1
     27c:	5cfa      	ldrb	r2, [r7, r3]
     27e:	2102      	movs	r1, #2
     280:	438a      	bics	r2, r1
     282:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     284:	2401      	movs	r4, #1
     286:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     288:	4b1c      	ldr	r3, [pc, #112]	; (2fc <dma_allocate+0x124>)
     28a:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     28c:	782b      	ldrb	r3, [r5, #0]
     28e:	4642      	mov	r2, r8
     290:	4013      	ands	r3, r2
     292:	464a      	mov	r2, r9
     294:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     296:	693b      	ldr	r3, [r7, #16]
     298:	782a      	ldrb	r2, [r5, #0]
     29a:	4094      	lsls	r4, r2
     29c:	43a3      	bics	r3, r4
     29e:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2a0:	7832      	ldrb	r2, [r6, #0]
     2a2:	0152      	lsls	r2, r2, #5
     2a4:	2360      	movs	r3, #96	; 0x60
     2a6:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     2a8:	7872      	ldrb	r2, [r6, #1]
     2aa:	0212      	lsls	r2, r2, #8
     2ac:	21fc      	movs	r1, #252	; 0xfc
     2ae:	0189      	lsls	r1, r1, #6
     2b0:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2b2:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     2b4:	78b2      	ldrb	r2, [r6, #2]
     2b6:	0592      	lsls	r2, r2, #22
     2b8:	21c0      	movs	r1, #192	; 0xc0
     2ba:	0409      	lsls	r1, r1, #16
     2bc:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2be:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     2c0:	78f1      	ldrb	r1, [r6, #3]
     2c2:	2900      	cmp	r1, #0
     2c4:	d004      	beq.n	2d0 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     2c6:	2207      	movs	r2, #7
     2c8:	400a      	ands	r2, r1
     2ca:	2108      	movs	r1, #8
     2cc:	430a      	orrs	r2, r1
     2ce:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     2d0:	7932      	ldrb	r2, [r6, #4]
     2d2:	2a00      	cmp	r2, #0
     2d4:	d001      	beq.n	2da <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     2d6:	2210      	movs	r2, #16
     2d8:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     2da:	4a0b      	ldr	r2, [pc, #44]	; (308 <dma_allocate+0x130>)
     2dc:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     2de:	4c0e      	ldr	r4, [pc, #56]	; (318 <dma_allocate+0x140>)
     2e0:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     2e2:	2300      	movs	r3, #0
     2e4:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     2e6:	782b      	ldrb	r3, [r5, #0]
     2e8:	009b      	lsls	r3, r3, #2
     2ea:	4a0c      	ldr	r2, [pc, #48]	; (31c <dma_allocate+0x144>)
     2ec:	509d      	str	r5, [r3, r2]
     2ee:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     2f0:	2000      	movs	r0, #0
}
     2f2:	bc0c      	pop	{r2, r3}
     2f4:	4690      	mov	r8, r2
     2f6:	4699      	mov	r9, r3
     2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00005e29 	.word	0x00005e29
     300:	2000000c 	.word	0x2000000c
     304:	40000400 	.word	0x40000400
     308:	41004800 	.word	0x41004800
     30c:	20000220 	.word	0x20000220
     310:	20000100 	.word	0x20000100
     314:	00000f02 	.word	0x00000f02
     318:	00005e69 	.word	0x00005e69
     31c:	200000ec 	.word	0x200000ec

00000320 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     324:	4b19      	ldr	r3, [pc, #100]	; (38c <dma_start_transfer_job+0x6c>)
     326:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     328:	7c63      	ldrb	r3, [r4, #17]
     32a:	2b05      	cmp	r3, #5
     32c:	d008      	beq.n	340 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     32e:	69a3      	ldr	r3, [r4, #24]
     330:	885b      	ldrh	r3, [r3, #2]
     332:	b29b      	uxth	r3, r3
     334:	2b00      	cmp	r3, #0
     336:	d107      	bne.n	348 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     338:	4b15      	ldr	r3, [pc, #84]	; (390 <dma_start_transfer_job+0x70>)
     33a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     33c:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     33e:	bd70      	pop	{r4, r5, r6, pc}
     340:	4b13      	ldr	r3, [pc, #76]	; (390 <dma_start_transfer_job+0x70>)
     342:	4798      	blx	r3
		return STATUS_BUSY;
     344:	2005      	movs	r0, #5
     346:	e7fa      	b.n	33e <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     348:	2640      	movs	r6, #64	; 0x40
     34a:	4b12      	ldr	r3, [pc, #72]	; (394 <dma_start_transfer_job+0x74>)
     34c:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     34e:	7822      	ldrb	r2, [r4, #0]
     350:	230f      	movs	r3, #15
     352:	4013      	ands	r3, r2
     354:	4d10      	ldr	r5, [pc, #64]	; (398 <dma_start_transfer_job+0x78>)
     356:	223f      	movs	r2, #63	; 0x3f
     358:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     35a:	7823      	ldrb	r3, [r4, #0]
     35c:	4a0f      	ldr	r2, [pc, #60]	; (39c <dma_start_transfer_job+0x7c>)
     35e:	5cd2      	ldrb	r2, [r2, r3]
     360:	2307      	movs	r3, #7
     362:	4013      	ands	r3, r2
     364:	224d      	movs	r2, #77	; 0x4d
     366:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     368:	2305      	movs	r3, #5
     36a:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     36c:	7820      	ldrb	r0, [r4, #0]
     36e:	0100      	lsls	r0, r0, #4
     370:	4b0b      	ldr	r3, [pc, #44]	; (3a0 <dma_start_transfer_job+0x80>)
     372:	18c0      	adds	r0, r0, r3
     374:	69a1      	ldr	r1, [r4, #24]
     376:	3a3d      	subs	r2, #61	; 0x3d
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <dma_start_transfer_job+0x84>)
     37a:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     37c:	5dab      	ldrb	r3, [r5, r6]
     37e:	2202      	movs	r2, #2
     380:	4313      	orrs	r3, r2
     382:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <dma_start_transfer_job+0x70>)
     386:	4798      	blx	r3
	return STATUS_OK;
     388:	2000      	movs	r0, #0
     38a:	e7d8      	b.n	33e <dma_start_transfer_job+0x1e>
     38c:	00005e29 	.word	0x00005e29
     390:	00005e69 	.word	0x00005e69
     394:	e000e100 	.word	0xe000e100
     398:	41004800 	.word	0x41004800
     39c:	20000150 	.word	0x20000150
     3a0:	20000220 	.word	0x20000220
     3a4:	00006985 	.word	0x00006985

000003a8 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     3aa:	780a      	ldrb	r2, [r1, #0]
     3ac:	8803      	ldrh	r3, [r0, #0]
     3ae:	2601      	movs	r6, #1
     3b0:	4032      	ands	r2, r6
     3b2:	2401      	movs	r4, #1
     3b4:	43a3      	bics	r3, r4
     3b6:	4313      	orrs	r3, r2
     3b8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     3ba:	784b      	ldrb	r3, [r1, #1]
     3bc:	8804      	ldrh	r4, [r0, #0]
     3be:	2703      	movs	r7, #3
     3c0:	403b      	ands	r3, r7
     3c2:	005b      	lsls	r3, r3, #1
     3c4:	2206      	movs	r2, #6
     3c6:	4394      	bics	r4, r2
     3c8:	431c      	orrs	r4, r3
     3ca:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     3cc:	788d      	ldrb	r5, [r1, #2]
     3ce:	8804      	ldrh	r4, [r0, #0]
     3d0:	403d      	ands	r5, r7
     3d2:	00ed      	lsls	r5, r5, #3
     3d4:	2318      	movs	r3, #24
     3d6:	439c      	bics	r4, r3
     3d8:	432c      	orrs	r4, r5
     3da:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     3dc:	78ca      	ldrb	r2, [r1, #3]
     3de:	8803      	ldrh	r3, [r0, #0]
     3e0:	403a      	ands	r2, r7
     3e2:	0212      	lsls	r2, r2, #8
     3e4:	4c16      	ldr	r4, [pc, #88]	; (440 <dma_descriptor_create+0x98>)
     3e6:	4023      	ands	r3, r4
     3e8:	4313      	orrs	r3, r2
     3ea:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     3ec:	790b      	ldrb	r3, [r1, #4]
     3ee:	8804      	ldrh	r4, [r0, #0]
     3f0:	4033      	ands	r3, r6
     3f2:	029b      	lsls	r3, r3, #10
     3f4:	4a13      	ldr	r2, [pc, #76]	; (444 <dma_descriptor_create+0x9c>)
     3f6:	4014      	ands	r4, r2
     3f8:	431c      	orrs	r4, r3
     3fa:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     3fc:	794d      	ldrb	r5, [r1, #5]
     3fe:	8804      	ldrh	r4, [r0, #0]
     400:	4035      	ands	r5, r6
     402:	02ed      	lsls	r5, r5, #11
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <dma_descriptor_create+0xa0>)
     406:	401c      	ands	r4, r3
     408:	432c      	orrs	r4, r5
     40a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     40c:	798a      	ldrb	r2, [r1, #6]
     40e:	8803      	ldrh	r3, [r0, #0]
     410:	4032      	ands	r2, r6
     412:	0312      	lsls	r2, r2, #12
     414:	4c0d      	ldr	r4, [pc, #52]	; (44c <dma_descriptor_create+0xa4>)
     416:	4023      	ands	r3, r4
     418:	4313      	orrs	r3, r2
     41a:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     41c:	79cb      	ldrb	r3, [r1, #7]
     41e:	2207      	movs	r2, #7
     420:	401a      	ands	r2, r3
     422:	8803      	ldrh	r3, [r0, #0]
     424:	0352      	lsls	r2, r2, #13
     426:	04db      	lsls	r3, r3, #19
     428:	0cdb      	lsrs	r3, r3, #19
     42a:	4313      	orrs	r3, r2
     42c:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     42e:	890b      	ldrh	r3, [r1, #8]
     430:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     432:	68cb      	ldr	r3, [r1, #12]
     434:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     436:	690b      	ldr	r3, [r1, #16]
     438:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     43a:	694b      	ldr	r3, [r1, #20]
     43c:	60c3      	str	r3, [r0, #12]
}
     43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     440:	fffffcff 	.word	0xfffffcff
     444:	fffffbff 	.word	0xfffffbff
     448:	fffff7ff 	.word	0xfffff7ff
     44c:	ffffefff 	.word	0xffffefff

00000450 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     450:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     452:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     454:	2a05      	cmp	r2, #5
     456:	d00b      	beq.n	470 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     458:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     45a:	2b00      	cmp	r3, #0
     45c:	d00a      	beq.n	474 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     45e:	68da      	ldr	r2, [r3, #12]
     460:	2a00      	cmp	r2, #0
     462:	d003      	beq.n	46c <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     464:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     466:	68da      	ldr	r2, [r3, #12]
     468:	2a00      	cmp	r2, #0
     46a:	d1fb      	bne.n	464 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     46c:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     46e:	2300      	movs	r3, #0
}
     470:	0018      	movs	r0, r3
     472:	4770      	bx	lr
		resource->descriptor = descriptor;
     474:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     476:	2300      	movs	r3, #0
     478:	e7fa      	b.n	470 <dma_add_descriptor+0x20>
	...

0000047c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     47c:	b5f0      	push	{r4, r5, r6, r7, lr}
     47e:	46c6      	mov	lr, r8
     480:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     482:	0080      	lsls	r0, r0, #2
     484:	4b0e      	ldr	r3, [pc, #56]	; (4c0 <_tcc_interrupt_handler+0x44>)
     486:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     488:	683b      	ldr	r3, [r7, #0]
     48a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     490:	4013      	ands	r3, r2
     492:	401e      	ands	r6, r3
     494:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     496:	4b0b      	ldr	r3, [pc, #44]	; (4c4 <_tcc_interrupt_handler+0x48>)
     498:	4698      	mov	r8, r3
     49a:	e002      	b.n	4a2 <_tcc_interrupt_handler+0x26>
     49c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     49e:	2c30      	cmp	r4, #48	; 0x30
     4a0:	d00a      	beq.n	4b8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     4a2:	4643      	mov	r3, r8
     4a4:	58e5      	ldr	r5, [r4, r3]
     4a6:	4235      	tst	r5, r6
     4a8:	d0f8      	beq.n	49c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     4aa:	193b      	adds	r3, r7, r4
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	0038      	movs	r0, r7
     4b0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	62dd      	str	r5, [r3, #44]	; 0x2c
     4b6:	e7f1      	b.n	49c <_tcc_interrupt_handler+0x20>
		}
	}
}
     4b8:	bc04      	pop	{r2}
     4ba:	4690      	mov	r8, r2
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	20000270 	.word	0x20000270
     4c4:	0000798c 	.word	0x0000798c

000004c8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     4c8:	b510      	push	{r4, lr}
     4ca:	2000      	movs	r0, #0
     4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <TCC0_Handler+0xc>)
     4ce:	4798      	blx	r3
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000047d 	.word	0x0000047d

000004d8 <TCC1_Handler>:
     4d8:	b510      	push	{r4, lr}
     4da:	2001      	movs	r0, #1
     4dc:	4b01      	ldr	r3, [pc, #4]	; (4e4 <TCC1_Handler+0xc>)
     4de:	4798      	blx	r3
     4e0:	bd10      	pop	{r4, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	0000047d 	.word	0x0000047d

000004e8 <TCC2_Handler>:
     4e8:	b510      	push	{r4, lr}
     4ea:	2002      	movs	r0, #2
     4ec:	4b01      	ldr	r3, [pc, #4]	; (4f4 <TCC2_Handler+0xc>)
     4ee:	4798      	blx	r3
     4f0:	bd10      	pop	{r4, pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	0000047d 	.word	0x0000047d

000004f8 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     4f8:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     4fa:	4b07      	ldr	r3, [pc, #28]	; (518 <sd_mmc_configure_slot+0x20>)
     4fc:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     4fe:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     500:	5ccb      	ldrb	r3, [r1, r3]
     502:	1e5a      	subs	r2, r3, #1
     504:	4193      	sbcs	r3, r2
     506:	b2db      	uxtb	r3, r3
     508:	7c4a      	ldrb	r2, [r1, #17]
     50a:	6809      	ldr	r1, [r1, #0]
     50c:	4803      	ldr	r0, [pc, #12]	; (51c <sd_mmc_configure_slot+0x24>)
     50e:	7800      	ldrb	r0, [r0, #0]
     510:	4c03      	ldr	r4, [pc, #12]	; (520 <sd_mmc_configure_slot+0x28>)
     512:	47a0      	blx	r4
}
     514:	bd10      	pop	{r4, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	20000158 	.word	0x20000158
     51c:	20000161 	.word	0x20000161
     520:	00005959 	.word	0x00005959

00000524 <sd_mmc_select_slot>:
{
     524:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     526:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     528:	2800      	cmp	r0, #0
     52a:	d001      	beq.n	530 <sd_mmc_select_slot+0xc>
}
     52c:	0018      	movs	r0, r3
     52e:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     530:	4b40      	ldr	r3, [pc, #256]	; (634 <sd_mmc_select_slot+0x110>)
     532:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     534:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     536:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     538:	2a00      	cmp	r2, #0
     53a:	d104      	bne.n	546 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     53c:	094b      	lsrs	r3, r1, #5
     53e:	01db      	lsls	r3, r3, #7
     540:	4a3d      	ldr	r2, [pc, #244]	; (638 <sd_mmc_select_slot+0x114>)
     542:	4694      	mov	ip, r2
     544:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     546:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     548:	221f      	movs	r2, #31
     54a:	400a      	ands	r2, r1
     54c:	2301      	movs	r3, #1
     54e:	4093      	lsls	r3, r2
     550:	4218      	tst	r0, r3
     552:	d010      	beq.n	576 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     554:	4b37      	ldr	r3, [pc, #220]	; (634 <sd_mmc_select_slot+0x110>)
     556:	7b9b      	ldrb	r3, [r3, #14]
     558:	2b01      	cmp	r3, #1
     55a:	d004      	beq.n	566 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     55c:	2204      	movs	r2, #4
     55e:	4b35      	ldr	r3, [pc, #212]	; (634 <sd_mmc_select_slot+0x110>)
     560:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     562:	2302      	movs	r3, #2
     564:	e7e2      	b.n	52c <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     566:	4b35      	ldr	r3, [pc, #212]	; (63c <sd_mmc_select_slot+0x118>)
     568:	781b      	ldrb	r3, [r3, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d0f6      	beq.n	55c <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     56e:	2200      	movs	r2, #0
     570:	4b33      	ldr	r3, [pc, #204]	; (640 <sd_mmc_select_slot+0x11c>)
     572:	601a      	str	r2, [r3, #0]
     574:	e7f2      	b.n	55c <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     576:	4b2f      	ldr	r3, [pc, #188]	; (634 <sd_mmc_select_slot+0x110>)
     578:	7b9a      	ldrb	r2, [r3, #14]
     57a:	2a04      	cmp	r2, #4
     57c:	d005      	beq.n	58a <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     57e:	2a01      	cmp	r2, #1
     580:	d033      	beq.n	5ea <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     582:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     584:	2a03      	cmp	r2, #3
     586:	d0d1      	beq.n	52c <sd_mmc_select_slot+0x8>
     588:	e045      	b.n	616 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     58a:	3a03      	subs	r2, #3
     58c:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     58e:	4b2c      	ldr	r3, [pc, #176]	; (640 <sd_mmc_select_slot+0x11c>)
     590:	681b      	ldr	r3, [r3, #0]
     592:	2b00      	cmp	r3, #0
     594:	d017      	beq.n	5c6 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     596:	2200      	movs	r2, #0
     598:	4b28      	ldr	r3, [pc, #160]	; (63c <sd_mmc_select_slot+0x118>)
     59a:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     59c:	2000      	movs	r0, #0
     59e:	4b29      	ldr	r3, [pc, #164]	; (644 <sd_mmc_select_slot+0x120>)
     5a0:	4798      	blx	r3
     5a2:	22fa      	movs	r2, #250	; 0xfa
     5a4:	0092      	lsls	r2, r2, #2
     5a6:	2300      	movs	r3, #0
     5a8:	2100      	movs	r1, #0
     5aa:	4c27      	ldr	r4, [pc, #156]	; (648 <sd_mmc_select_slot+0x124>)
     5ac:	47a0      	blx	r4
     5ae:	4a27      	ldr	r2, [pc, #156]	; (64c <sd_mmc_select_slot+0x128>)
     5b0:	2300      	movs	r3, #0
     5b2:	1880      	adds	r0, r0, r2
     5b4:	4159      	adcs	r1, r3
     5b6:	4a26      	ldr	r2, [pc, #152]	; (650 <sd_mmc_select_slot+0x12c>)
     5b8:	2300      	movs	r3, #0
     5ba:	4c26      	ldr	r4, [pc, #152]	; (654 <sd_mmc_select_slot+0x130>)
     5bc:	47a0      	blx	r4
     5be:	4b26      	ldr	r3, [pc, #152]	; (658 <sd_mmc_select_slot+0x134>)
     5c0:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     5c2:	2302      	movs	r3, #2
     5c4:	e7b2      	b.n	52c <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     5c6:	2401      	movs	r4, #1
     5c8:	4b1c      	ldr	r3, [pc, #112]	; (63c <sd_mmc_select_slot+0x118>)
     5ca:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     5cc:	2000      	movs	r0, #0
     5ce:	4b1d      	ldr	r3, [pc, #116]	; (644 <sd_mmc_select_slot+0x120>)
     5d0:	4798      	blx	r3
     5d2:	21fa      	movs	r1, #250	; 0xfa
     5d4:	0149      	lsls	r1, r1, #5
     5d6:	4b21      	ldr	r3, [pc, #132]	; (65c <sd_mmc_select_slot+0x138>)
     5d8:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     5da:	23fa      	movs	r3, #250	; 0xfa
     5dc:	009b      	lsls	r3, r3, #2
     5de:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     5e0:	4b17      	ldr	r3, [pc, #92]	; (640 <sd_mmc_select_slot+0x11c>)
     5e2:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     5e4:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     5e6:	2302      	movs	r3, #2
     5e8:	e7a0      	b.n	52c <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     5ea:	4b14      	ldr	r3, [pc, #80]	; (63c <sd_mmc_select_slot+0x118>)
     5ec:	781b      	ldrb	r3, [r3, #0]
     5ee:	2b00      	cmp	r3, #0
     5f0:	d007      	beq.n	602 <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     5f2:	4b13      	ldr	r3, [pc, #76]	; (640 <sd_mmc_select_slot+0x11c>)
     5f4:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     5f6:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     5f8:	03d2      	lsls	r2, r2, #15
     5fa:	d597      	bpl.n	52c <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     5fc:	2200      	movs	r2, #0
     5fe:	4b10      	ldr	r3, [pc, #64]	; (640 <sd_mmc_select_slot+0x11c>)
     600:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     602:	4b0c      	ldr	r3, [pc, #48]	; (634 <sd_mmc_select_slot+0x110>)
     604:	2202      	movs	r2, #2
     606:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     608:	4a15      	ldr	r2, [pc, #84]	; (660 <sd_mmc_select_slot+0x13c>)
     60a:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     60c:	2201      	movs	r2, #1
     60e:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     610:	2100      	movs	r1, #0
     612:	3221      	adds	r2, #33	; 0x21
     614:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     616:	2200      	movs	r2, #0
     618:	4b12      	ldr	r3, [pc, #72]	; (664 <sd_mmc_select_slot+0x140>)
     61a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     61c:	4c05      	ldr	r4, [pc, #20]	; (634 <sd_mmc_select_slot+0x110>)
     61e:	4b12      	ldr	r3, [pc, #72]	; (668 <sd_mmc_select_slot+0x144>)
     620:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     622:	4b12      	ldr	r3, [pc, #72]	; (66c <sd_mmc_select_slot+0x148>)
     624:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     626:	7ba3      	ldrb	r3, [r4, #14]
     628:	3b02      	subs	r3, #2
     62a:	425a      	negs	r2, r3
     62c:	4153      	adcs	r3, r2
     62e:	b2db      	uxtb	r3, r3
     630:	e77c      	b.n	52c <sd_mmc_select_slot+0x8>
     632:	46c0      	nop			; (mov r8, r8)
     634:	20000018 	.word	0x20000018
     638:	41004400 	.word	0x41004400
     63c:	20000160 	.word	0x20000160
     640:	e000e010 	.word	0xe000e010
     644:	00006015 	.word	0x00006015
     648:	00006751 	.word	0x00006751
     64c:	00001b57 	.word	0x00001b57
     650:	00001b58 	.word	0x00001b58
     654:	00006711 	.word	0x00006711
     658:	20000001 	.word	0x20000001
     65c:	000063a9 	.word	0x000063a9
     660:	00061a80 	.word	0x00061a80
     664:	20000161 	.word	0x20000161
     668:	20000158 	.word	0x20000158
     66c:	000004f9 	.word	0x000004f9

00000670 <sd_mmc_cmd13>:
{
     670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     672:	4d09      	ldr	r5, [pc, #36]	; (698 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     674:	4f09      	ldr	r7, [pc, #36]	; (69c <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     676:	4e0a      	ldr	r6, [pc, #40]	; (6a0 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     678:	2100      	movs	r1, #0
     67a:	480a      	ldr	r0, [pc, #40]	; (6a4 <sd_mmc_cmd13+0x34>)
     67c:	47b8      	blx	r7
     67e:	1e04      	subs	r4, r0, #0
     680:	d007      	beq.n	692 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     682:	47b0      	blx	r6
     684:	23ff      	movs	r3, #255	; 0xff
     686:	4203      	tst	r3, r0
     688:	d003      	beq.n	692 <sd_mmc_cmd13+0x22>
     68a:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     68c:	2d00      	cmp	r5, #0
     68e:	d1f3      	bne.n	678 <sd_mmc_cmd13+0x8>
			return false;
     690:	2400      	movs	r4, #0
}
     692:	0020      	movs	r0, r4
     694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     696:	46c0      	nop			; (mov r8, r8)
     698:	00030d41 	.word	0x00030d41
     69c:	00005b9d 	.word	0x00005b9d
     6a0:	00005bb5 	.word	0x00005bb5
     6a4:	00001b0d 	.word	0x00001b0d

000006a8 <sd_mmc_cmd9_spi>:
{
     6a8:	b510      	push	{r4, lr}
     6aa:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     6ac:	4b0c      	ldr	r3, [pc, #48]	; (6e0 <sd_mmc_cmd9_spi+0x38>)
     6ae:	681b      	ldr	r3, [r3, #0]
     6b0:	8999      	ldrh	r1, [r3, #12]
     6b2:	0409      	lsls	r1, r1, #16
     6b4:	2301      	movs	r3, #1
     6b6:	9300      	str	r3, [sp, #0]
     6b8:	2210      	movs	r2, #16
     6ba:	480a      	ldr	r0, [pc, #40]	; (6e4 <sd_mmc_cmd9_spi+0x3c>)
     6bc:	4c0a      	ldr	r4, [pc, #40]	; (6e8 <sd_mmc_cmd9_spi+0x40>)
     6be:	47a0      	blx	r4
     6c0:	2800      	cmp	r0, #0
     6c2:	d101      	bne.n	6c8 <sd_mmc_cmd9_spi+0x20>
}
     6c4:	b002      	add	sp, #8
     6c6:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <sd_mmc_cmd9_spi+0x38>)
     6ca:	6818      	ldr	r0, [r3, #0]
     6cc:	3012      	adds	r0, #18
     6ce:	2101      	movs	r1, #1
     6d0:	4b06      	ldr	r3, [pc, #24]	; (6ec <sd_mmc_cmd9_spi+0x44>)
     6d2:	4798      	blx	r3
     6d4:	2800      	cmp	r0, #0
     6d6:	d0f5      	beq.n	6c4 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     6d8:	4b05      	ldr	r3, [pc, #20]	; (6f0 <sd_mmc_cmd9_spi+0x48>)
     6da:	4798      	blx	r3
     6dc:	e7f2      	b.n	6c4 <sd_mmc_cmd9_spi+0x1c>
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	20000158 	.word	0x20000158
     6e4:	00081109 	.word	0x00081109
     6e8:	00005a0d 	.word	0x00005a0d
     6ec:	00005c39 	.word	0x00005c39
     6f0:	00005cc5 	.word	0x00005cc5

000006f4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     6f4:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     6f6:	4b04      	ldr	r3, [pc, #16]	; (708 <sd_mmc_deselect_slot+0x14>)
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d000      	beq.n	700 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     6fe:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     700:	2000      	movs	r0, #0
     702:	4b02      	ldr	r3, [pc, #8]	; (70c <sd_mmc_deselect_slot+0x18>)
     704:	4798      	blx	r3
}
     706:	e7fa      	b.n	6fe <sd_mmc_deselect_slot+0xa>
     708:	20000161 	.word	0x20000161
     70c:	000059ad 	.word	0x000059ad

00000710 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     710:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     712:	2204      	movs	r2, #4
     714:	4b03      	ldr	r3, [pc, #12]	; (724 <sd_mmc_init+0x14>)
     716:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     718:	32fb      	adds	r2, #251	; 0xfb
     71a:	4b03      	ldr	r3, [pc, #12]	; (728 <sd_mmc_init+0x18>)
     71c:	701a      	strb	r2, [r3, #0]
	driver_init();
     71e:	4b03      	ldr	r3, [pc, #12]	; (72c <sd_mmc_init+0x1c>)
     720:	4798      	blx	r3
}
     722:	bd10      	pop	{r4, pc}
     724:	20000018 	.word	0x20000018
     728:	20000161 	.word	0x20000161
     72c:	00005865 	.word	0x00005865

00000730 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     730:	b5f0      	push	{r4, r5, r6, r7, lr}
     732:	46c6      	mov	lr, r8
     734:	b500      	push	{lr}
     736:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     738:	4bcb      	ldr	r3, [pc, #812]	; (a68 <sd_mmc_check+0x338>)
     73a:	4798      	blx	r3
     73c:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     73e:	2801      	cmp	r0, #1
     740:	d006      	beq.n	750 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     742:	4bca      	ldr	r3, [pc, #808]	; (a6c <sd_mmc_check+0x33c>)
     744:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     746:	0020      	movs	r0, r4
     748:	b008      	add	sp, #32
     74a:	bc04      	pop	{r2}
     74c:	4690      	mov	r8, r2
     74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     750:	4bc7      	ldr	r3, [pc, #796]	; (a70 <sd_mmc_check+0x340>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	2201      	movs	r2, #1
     756:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     758:	2200      	movs	r2, #0
     75a:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     75c:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     75e:	4bc5      	ldr	r3, [pc, #788]	; (a74 <sd_mmc_check+0x344>)
     760:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     762:	2100      	movs	r1, #0
     764:	2088      	movs	r0, #136	; 0x88
     766:	0140      	lsls	r0, r0, #5
     768:	4bc3      	ldr	r3, [pc, #780]	; (a78 <sd_mmc_check+0x348>)
     76a:	4798      	blx	r3
     76c:	2800      	cmp	r0, #0
     76e:	d107      	bne.n	780 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     770:	4bbf      	ldr	r3, [pc, #764]	; (a70 <sd_mmc_check+0x340>)
     772:	681b      	ldr	r3, [r3, #0]
     774:	2203      	movs	r2, #3
     776:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     778:	4bbc      	ldr	r3, [pc, #752]	; (a6c <sd_mmc_check+0x33c>)
     77a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     77c:	2403      	movs	r4, #3
     77e:	e7e2      	b.n	746 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     780:	21d5      	movs	r1, #213	; 0xd5
     782:	0049      	lsls	r1, r1, #1
     784:	48bd      	ldr	r0, [pc, #756]	; (a7c <sd_mmc_check+0x34c>)
     786:	4bbc      	ldr	r3, [pc, #752]	; (a78 <sd_mmc_check+0x348>)
     788:	4798      	blx	r3
	*v2 = 0;
     78a:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     78c:	2800      	cmp	r0, #0
     78e:	d125      	bne.n	7dc <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     790:	4bb7      	ldr	r3, [pc, #732]	; (a70 <sd_mmc_check+0x340>)
     792:	681b      	ldr	r3, [r3, #0]
     794:	7bdb      	ldrb	r3, [r3, #15]
     796:	07db      	lsls	r3, r3, #31
     798:	d500      	bpl.n	79c <sd_mmc_check+0x6c>
     79a:	e1eb      	b.n	b74 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     79c:	4bb4      	ldr	r3, [pc, #720]	; (a70 <sd_mmc_check+0x340>)
     79e:	681b      	ldr	r3, [r3, #0]
     7a0:	7bda      	ldrb	r2, [r3, #15]
     7a2:	2309      	movs	r3, #9
     7a4:	4013      	ands	r3, r2
     7a6:	2b01      	cmp	r3, #1
     7a8:	d10f      	bne.n	7ca <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     7aa:	2180      	movs	r1, #128	; 0x80
     7ac:	0089      	lsls	r1, r1, #2
     7ae:	48b4      	ldr	r0, [pc, #720]	; (a80 <sd_mmc_check+0x350>)
     7b0:	4bb1      	ldr	r3, [pc, #708]	; (a78 <sd_mmc_check+0x348>)
     7b2:	4798      	blx	r3
     7b4:	2800      	cmp	r0, #0
     7b6:	d0db      	beq.n	770 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     7b8:	4bad      	ldr	r3, [pc, #692]	; (a70 <sd_mmc_check+0x340>)
     7ba:	681b      	ldr	r3, [r3, #0]
     7bc:	7bdb      	ldrb	r3, [r3, #15]
     7be:	07db      	lsls	r3, r3, #31
     7c0:	d503      	bpl.n	7ca <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     7c2:	4bb0      	ldr	r3, [pc, #704]	; (a84 <sd_mmc_check+0x354>)
     7c4:	4798      	blx	r3
     7c6:	2800      	cmp	r0, #0
     7c8:	d0d2      	beq.n	770 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     7ca:	4baf      	ldr	r3, [pc, #700]	; (a88 <sd_mmc_check+0x358>)
     7cc:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     7ce:	4ba8      	ldr	r3, [pc, #672]	; (a70 <sd_mmc_check+0x340>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	2200      	movs	r2, #0
     7d4:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     7d6:	4ba5      	ldr	r3, [pc, #660]	; (a6c <sd_mmc_check+0x33c>)
     7d8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     7da:	e7b4      	b.n	746 <sd_mmc_check+0x16>
	resp = driver_get_response();
     7dc:	4bab      	ldr	r3, [pc, #684]	; (a8c <sd_mmc_check+0x35c>)
     7de:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     7e0:	1c43      	adds	r3, r0, #1
     7e2:	d100      	bne.n	7e6 <sd_mmc_check+0xb6>
     7e4:	e1c4      	b.n	b70 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     7e6:	0500      	lsls	r0, r0, #20
     7e8:	0d00      	lsrs	r0, r0, #20
     7ea:	23d5      	movs	r3, #213	; 0xd5
     7ec:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     7ee:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     7f0:	4298      	cmp	r0, r3
     7f2:	d1bd      	bne.n	770 <sd_mmc_check+0x40>
     7f4:	e7cc      	b.n	790 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     7f6:	2100      	movs	r1, #0
     7f8:	48a5      	ldr	r0, [pc, #660]	; (a90 <sd_mmc_check+0x360>)
     7fa:	4b9f      	ldr	r3, [pc, #636]	; (a78 <sd_mmc_check+0x348>)
     7fc:	4798      	blx	r3
     7fe:	2800      	cmp	r0, #0
     800:	d119      	bne.n	836 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     802:	4b9b      	ldr	r3, [pc, #620]	; (a70 <sd_mmc_check+0x340>)
     804:	681b      	ldr	r3, [r3, #0]
     806:	2202      	movs	r2, #2
     808:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     80a:	2100      	movs	r1, #0
     80c:	2088      	movs	r0, #136	; 0x88
     80e:	0140      	lsls	r0, r0, #5
     810:	4b99      	ldr	r3, [pc, #612]	; (a78 <sd_mmc_check+0x348>)
     812:	4798      	blx	r3
     814:	2800      	cmp	r0, #0
     816:	d0ab      	beq.n	770 <sd_mmc_check+0x40>
     818:	4d9e      	ldr	r5, [pc, #632]	; (a94 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     81a:	4f97      	ldr	r7, [pc, #604]	; (a78 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     81c:	4e9b      	ldr	r6, [pc, #620]	; (a8c <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     81e:	2100      	movs	r1, #0
     820:	489d      	ldr	r0, [pc, #628]	; (a98 <sd_mmc_check+0x368>)
     822:	47b8      	blx	r7
     824:	2800      	cmp	r0, #0
     826:	d0a3      	beq.n	770 <sd_mmc_check+0x40>
		resp = driver_get_response();
     828:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     82a:	07c3      	lsls	r3, r0, #31
     82c:	d57d      	bpl.n	92a <sd_mmc_check+0x1fa>
     82e:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     830:	2d00      	cmp	r5, #0
     832:	d1f4      	bne.n	81e <sd_mmc_check+0xee>
     834:	e79c      	b.n	770 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     836:	4b95      	ldr	r3, [pc, #596]	; (a8c <sd_mmc_check+0x35c>)
     838:	4798      	blx	r3
     83a:	0043      	lsls	r3, r0, #1
     83c:	d505      	bpl.n	84a <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     83e:	4b8c      	ldr	r3, [pc, #560]	; (a70 <sd_mmc_check+0x340>)
     840:	681a      	ldr	r2, [r3, #0]
     842:	7bd3      	ldrb	r3, [r2, #15]
     844:	2108      	movs	r1, #8
     846:	430b      	orrs	r3, r1
     848:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     84a:	2100      	movs	r1, #0
     84c:	4893      	ldr	r0, [pc, #588]	; (a9c <sd_mmc_check+0x36c>)
     84e:	4b8a      	ldr	r3, [pc, #552]	; (a78 <sd_mmc_check+0x348>)
     850:	4798      	blx	r3
     852:	2800      	cmp	r0, #0
     854:	d08c      	beq.n	770 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     856:	4b86      	ldr	r3, [pc, #536]	; (a70 <sd_mmc_check+0x340>)
     858:	681b      	ldr	r3, [r3, #0]
     85a:	7bdb      	ldrb	r3, [r3, #15]
     85c:	07da      	lsls	r2, r3, #31
     85e:	d400      	bmi.n	862 <sd_mmc_check+0x132>
     860:	e1a4      	b.n	bac <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     862:	4b8f      	ldr	r3, [pc, #572]	; (aa0 <sd_mmc_check+0x370>)
     864:	4798      	blx	r3
     866:	2800      	cmp	r0, #0
     868:	d082      	beq.n	770 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     86a:	4b81      	ldr	r3, [pc, #516]	; (a70 <sd_mmc_check+0x340>)
     86c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     86e:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     870:	2107      	movs	r1, #7
     872:	4019      	ands	r1, r3
     874:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     876:	488b      	ldr	r0, [pc, #556]	; (aa4 <sd_mmc_check+0x374>)
     878:	5808      	ldr	r0, [r1, r0]
     87a:	21fa      	movs	r1, #250	; 0xfa
     87c:	0089      	lsls	r1, r1, #2
     87e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     880:	065b      	lsls	r3, r3, #25
     882:	0f1b      	lsrs	r3, r3, #28
     884:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     886:	4888      	ldr	r0, [pc, #544]	; (aa8 <sd_mmc_check+0x378>)
     888:	581b      	ldr	r3, [r3, r0]
     88a:	434b      	muls	r3, r1
     88c:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     88e:	7c93      	ldrb	r3, [r2, #18]
     890:	099b      	lsrs	r3, r3, #6
     892:	d000      	beq.n	896 <sd_mmc_check+0x166>
     894:	e13c      	b.n	b10 <sd_mmc_check+0x3e0>
     896:	7e91      	ldrb	r1, [r2, #26]
     898:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     89a:	7e53      	ldrb	r3, [r2, #25]
     89c:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     89e:	7e10      	ldrb	r0, [r2, #24]
     8a0:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     8a2:	4303      	orrs	r3, r0
     8a4:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     8a6:	7f10      	ldrb	r0, [r2, #28]
     8a8:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     8aa:	7ed1      	ldrb	r1, [r2, #27]
     8ac:	0049      	lsls	r1, r1, #1
     8ae:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     8b0:	051b      	lsls	r3, r3, #20
     8b2:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8b4:	3301      	adds	r3, #1
     8b6:	2107      	movs	r1, #7
     8b8:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     8ba:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8bc:	408b      	lsls	r3, r1
     8be:	7dd0      	ldrb	r0, [r2, #23]
     8c0:	210f      	movs	r1, #15
     8c2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     8c4:	408b      	lsls	r3, r1
				/ 1024;
     8c6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     8c8:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     8ca:	8991      	ldrh	r1, [r2, #12]
     8cc:	0409      	lsls	r1, r1, #16
     8ce:	4877      	ldr	r0, [pc, #476]	; (aac <sd_mmc_check+0x37c>)
     8d0:	4b69      	ldr	r3, [pc, #420]	; (a78 <sd_mmc_check+0x348>)
     8d2:	4798      	blx	r3
     8d4:	2800      	cmp	r0, #0
     8d6:	d100      	bne.n	8da <sd_mmc_check+0x1aa>
     8d8:	e74a      	b.n	770 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     8da:	2301      	movs	r3, #1
     8dc:	9300      	str	r3, [sp, #0]
     8de:	2208      	movs	r2, #8
     8e0:	2100      	movs	r1, #0
     8e2:	4873      	ldr	r0, [pc, #460]	; (ab0 <sd_mmc_check+0x380>)
     8e4:	4d73      	ldr	r5, [pc, #460]	; (ab4 <sd_mmc_check+0x384>)
     8e6:	47a8      	blx	r5
     8e8:	2800      	cmp	r0, #0
     8ea:	d100      	bne.n	8ee <sd_mmc_check+0x1be>
     8ec:	e740      	b.n	770 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     8ee:	2101      	movs	r1, #1
     8f0:	a806      	add	r0, sp, #24
     8f2:	4b71      	ldr	r3, [pc, #452]	; (ab8 <sd_mmc_check+0x388>)
     8f4:	4798      	blx	r3
     8f6:	2800      	cmp	r0, #0
     8f8:	d100      	bne.n	8fc <sd_mmc_check+0x1cc>
     8fa:	e739      	b.n	770 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     8fc:	4b6f      	ldr	r3, [pc, #444]	; (abc <sd_mmc_check+0x38c>)
     8fe:	4798      	blx	r3
     900:	2800      	cmp	r0, #0
     902:	d100      	bne.n	906 <sd_mmc_check+0x1d6>
     904:	e734      	b.n	770 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     906:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	220f      	movs	r2, #15
     90c:	4013      	ands	r3, r2
     90e:	2b01      	cmp	r3, #1
     910:	d100      	bne.n	914 <sd_mmc_check+0x1e4>
     912:	e119      	b.n	b48 <sd_mmc_check+0x418>
     914:	2b00      	cmp	r3, #0
     916:	d100      	bne.n	91a <sd_mmc_check+0x1ea>
     918:	e109      	b.n	b2e <sd_mmc_check+0x3fe>
     91a:	2b02      	cmp	r3, #2
     91c:	d100      	bne.n	920 <sd_mmc_check+0x1f0>
     91e:	e118      	b.n	b52 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     920:	4b53      	ldr	r3, [pc, #332]	; (a70 <sd_mmc_check+0x340>)
     922:	681b      	ldr	r3, [r3, #0]
     924:	2210      	movs	r2, #16
     926:	741a      	strb	r2, [r3, #16]
     928:	e105      	b.n	b36 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     92a:	2100      	movs	r1, #0
     92c:	4858      	ldr	r0, [pc, #352]	; (a90 <sd_mmc_check+0x360>)
     92e:	4b52      	ldr	r3, [pc, #328]	; (a78 <sd_mmc_check+0x348>)
     930:	4798      	blx	r3
     932:	2800      	cmp	r0, #0
     934:	d100      	bne.n	938 <sd_mmc_check+0x208>
     936:	e71b      	b.n	770 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     938:	4b54      	ldr	r3, [pc, #336]	; (a8c <sd_mmc_check+0x35c>)
     93a:	4798      	blx	r3
     93c:	23c0      	movs	r3, #192	; 0xc0
     93e:	05db      	lsls	r3, r3, #23
     940:	4018      	ands	r0, r3
     942:	2380      	movs	r3, #128	; 0x80
     944:	05db      	lsls	r3, r3, #23
     946:	4298      	cmp	r0, r3
     948:	d105      	bne.n	956 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     94a:	4b49      	ldr	r3, [pc, #292]	; (a70 <sd_mmc_check+0x340>)
     94c:	681a      	ldr	r2, [r3, #0]
     94e:	7bd1      	ldrb	r1, [r2, #15]
     950:	2308      	movs	r3, #8
     952:	430b      	orrs	r3, r1
     954:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     956:	2100      	movs	r1, #0
     958:	4850      	ldr	r0, [pc, #320]	; (a9c <sd_mmc_check+0x36c>)
     95a:	4b47      	ldr	r3, [pc, #284]	; (a78 <sd_mmc_check+0x348>)
     95c:	4798      	blx	r3
     95e:	2800      	cmp	r0, #0
     960:	d100      	bne.n	964 <sd_mmc_check+0x234>
     962:	e705      	b.n	770 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     964:	4b4e      	ldr	r3, [pc, #312]	; (aa0 <sd_mmc_check+0x370>)
     966:	4798      	blx	r3
     968:	2800      	cmp	r0, #0
     96a:	d100      	bne.n	96e <sd_mmc_check+0x23e>
     96c:	e700      	b.n	770 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     96e:	4b40      	ldr	r3, [pc, #256]	; (a70 <sd_mmc_check+0x340>)
     970:	681a      	ldr	r2, [r3, #0]
     972:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     974:	069b      	lsls	r3, r3, #26
     976:	0f1b      	lsrs	r3, r3, #28
     978:	2b02      	cmp	r3, #2
     97a:	d100      	bne.n	97e <sd_mmc_check+0x24e>
     97c:	e0a8      	b.n	ad0 <sd_mmc_check+0x3a0>
     97e:	d907      	bls.n	990 <sd_mmc_check+0x260>
     980:	2b03      	cmp	r3, #3
     982:	d100      	bne.n	986 <sd_mmc_check+0x256>
     984:	e0a7      	b.n	ad6 <sd_mmc_check+0x3a6>
     986:	2b04      	cmp	r3, #4
     988:	d104      	bne.n	994 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     98a:	2340      	movs	r3, #64	; 0x40
     98c:	7413      	strb	r3, [r2, #16]
     98e:	e003      	b.n	998 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     990:	2b01      	cmp	r3, #1
     992:	d066      	beq.n	a62 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     994:	2312      	movs	r3, #18
     996:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     998:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     99a:	0659      	lsls	r1, r3, #25
     99c:	0f09      	lsrs	r1, r1, #28
     99e:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     9a0:	2007      	movs	r0, #7
     9a2:	4003      	ands	r3, r0
     9a4:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     9a6:	483f      	ldr	r0, [pc, #252]	; (aa4 <sd_mmc_check+0x374>)
     9a8:	5818      	ldr	r0, [r3, r0]
     9aa:	23fa      	movs	r3, #250	; 0xfa
     9ac:	009b      	lsls	r3, r3, #2
     9ae:	4343      	muls	r3, r0
     9b0:	4843      	ldr	r0, [pc, #268]	; (ac0 <sd_mmc_check+0x390>)
     9b2:	5809      	ldr	r1, [r1, r0]
     9b4:	434b      	muls	r3, r1
     9b6:	6013      	str	r3, [r2, #0]
     9b8:	7e91      	ldrb	r1, [r2, #26]
     9ba:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     9bc:	7e53      	ldrb	r3, [r2, #25]
     9be:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     9c0:	7e10      	ldrb	r0, [r2, #24]
     9c2:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     9c4:	4303      	orrs	r3, r0
     9c6:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     9c8:	051b      	lsls	r3, r3, #20
     9ca:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     9cc:	493d      	ldr	r1, [pc, #244]	; (ac4 <sd_mmc_check+0x394>)
     9ce:	428b      	cmp	r3, r1
     9d0:	d00f      	beq.n	9f2 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     9d2:	7f10      	ldrb	r0, [r2, #28]
     9d4:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     9d6:	7ed1      	ldrb	r1, [r2, #27]
     9d8:	0049      	lsls	r1, r1, #1
     9da:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     9dc:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     9de:	2007      	movs	r0, #7
     9e0:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     9e2:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     9e4:	408b      	lsls	r3, r1
     9e6:	7dd1      	ldrb	r1, [r2, #23]
     9e8:	3008      	adds	r0, #8
     9ea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     9ec:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     9ee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     9f0:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     9f2:	7c13      	ldrb	r3, [r2, #16]
     9f4:	2b3f      	cmp	r3, #63	; 0x3f
     9f6:	d97b      	bls.n	af0 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     9f8:	2100      	movs	r1, #0
     9fa:	9100      	str	r1, [sp, #0]
     9fc:	2301      	movs	r3, #1
     9fe:	2280      	movs	r2, #128	; 0x80
     a00:	0092      	lsls	r2, r2, #2
     a02:	4831      	ldr	r0, [pc, #196]	; (ac8 <sd_mmc_check+0x398>)
     a04:	4d2b      	ldr	r5, [pc, #172]	; (ab4 <sd_mmc_check+0x384>)
     a06:	47a8      	blx	r5
     a08:	2800      	cmp	r0, #0
     a0a:	d100      	bne.n	a0e <sd_mmc_check+0x2de>
     a0c:	e6b0      	b.n	770 <sd_mmc_check+0x40>
     a0e:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     a10:	4e2e      	ldr	r6, [pc, #184]	; (acc <sd_mmc_check+0x39c>)
     a12:	a805      	add	r0, sp, #20
     a14:	47b0      	blx	r6
     a16:	2800      	cmp	r0, #0
     a18:	d100      	bne.n	a1c <sd_mmc_check+0x2ec>
     a1a:	e6a9      	b.n	770 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     a1c:	3501      	adds	r5, #1
     a1e:	b2ad      	uxth	r5, r5
     a20:	2d32      	cmp	r5, #50	; 0x32
     a22:	d1f6      	bne.n	a12 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     a24:	4b12      	ldr	r3, [pc, #72]	; (a70 <sd_mmc_check+0x340>)
     a26:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     a28:	7e8a      	ldrb	r2, [r1, #26]
     a2a:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     a2c:	7e4b      	ldrb	r3, [r1, #25]
     a2e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a30:	7e09      	ldrb	r1, [r1, #24]
     a32:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     a34:	430b      	orrs	r3, r1
     a36:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     a38:	051b      	lsls	r3, r3, #20
     a3a:	0d1b      	lsrs	r3, r3, #20
     a3c:	4a21      	ldr	r2, [pc, #132]	; (ac4 <sd_mmc_check+0x394>)
     a3e:	4293      	cmp	r3, r2
     a40:	d154      	bne.n	aec <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     a42:	4e22      	ldr	r6, [pc, #136]	; (acc <sd_mmc_check+0x39c>)
     a44:	a806      	add	r0, sp, #24
     a46:	47b0      	blx	r6
     a48:	2800      	cmp	r0, #0
     a4a:	d100      	bne.n	a4e <sd_mmc_check+0x31e>
     a4c:	e690      	b.n	770 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     a4e:	3501      	adds	r5, #1
     a50:	b2ad      	uxth	r5, r5
     a52:	2d35      	cmp	r5, #53	; 0x35
     a54:	d9f6      	bls.n	a44 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     a56:	4b06      	ldr	r3, [pc, #24]	; (a70 <sd_mmc_check+0x340>)
     a58:	681a      	ldr	r2, [r3, #0]
     a5a:	9b06      	ldr	r3, [sp, #24]
     a5c:	085b      	lsrs	r3, r3, #1
     a5e:	6053      	str	r3, [r2, #4]
     a60:	e044      	b.n	aec <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     a62:	2314      	movs	r3, #20
     a64:	7413      	strb	r3, [r2, #16]
     a66:	e797      	b.n	998 <sd_mmc_check+0x268>
     a68:	00000525 	.word	0x00000525
     a6c:	000006f5 	.word	0x000006f5
     a70:	20000158 	.word	0x20000158
     a74:	000059d5 	.word	0x000059d5
     a78:	00005b9d 	.word	0x00005b9d
     a7c:	00005508 	.word	0x00005508
     a80:	00001110 	.word	0x00001110
     a84:	00000671 	.word	0x00000671
     a88:	000004f9 	.word	0x000004f9
     a8c:	00005bb5 	.word	0x00005bb5
     a90:	0000053a 	.word	0x0000053a
     a94:	00001bef 	.word	0x00001bef
     a98:	00001101 	.word	0x00001101
     a9c:	0000113b 	.word	0x0000113b
     aa0:	000006a9 	.word	0x000006a9
     aa4:	000079fc 	.word	0x000079fc
     aa8:	00007a18 	.word	0x00007a18
     aac:	00001137 	.word	0x00001137
     ab0:	00081133 	.word	0x00081133
     ab4:	00005a0d 	.word	0x00005a0d
     ab8:	00005c39 	.word	0x00005c39
     abc:	00005cc5 	.word	0x00005cc5
     ac0:	000079bc 	.word	0x000079bc
     ac4:	00000fff 	.word	0x00000fff
     ac8:	00081108 	.word	0x00081108
     acc:	00005bc1 	.word	0x00005bc1
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     ad0:	2322      	movs	r3, #34	; 0x22
     ad2:	7413      	strb	r3, [r2, #16]
     ad4:	e760      	b.n	998 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     ad6:	2330      	movs	r3, #48	; 0x30
     ad8:	7413      	strb	r3, [r2, #16]
     ada:	e75d      	b.n	998 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     adc:	a806      	add	r0, sp, #24
     ade:	4b36      	ldr	r3, [pc, #216]	; (bb8 <sd_mmc_check+0x488>)
     ae0:	4798      	blx	r3
     ae2:	2800      	cmp	r0, #0
     ae4:	d100      	bne.n	ae8 <sd_mmc_check+0x3b8>
     ae6:	e643      	b.n	770 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     ae8:	3501      	adds	r5, #1
     aea:	b2ad      	uxth	r5, r5
     aec:	2d7f      	cmp	r5, #127	; 0x7f
     aee:	d9f5      	bls.n	adc <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     af0:	2180      	movs	r1, #128	; 0x80
     af2:	0089      	lsls	r1, r1, #2
     af4:	4831      	ldr	r0, [pc, #196]	; (bbc <sd_mmc_check+0x48c>)
     af6:	4b32      	ldr	r3, [pc, #200]	; (bc0 <sd_mmc_check+0x490>)
     af8:	4798      	blx	r3
     afa:	2800      	cmp	r0, #0
     afc:	d100      	bne.n	b00 <sd_mmc_check+0x3d0>
     afe:	e637      	b.n	770 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     b00:	4b30      	ldr	r3, [pc, #192]	; (bc4 <sd_mmc_check+0x494>)
     b02:	4798      	blx	r3
     b04:	2800      	cmp	r0, #0
     b06:	d100      	bne.n	b0a <sd_mmc_check+0x3da>
     b08:	e632      	b.n	770 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     b0a:	4b2f      	ldr	r3, [pc, #188]	; (bc8 <sd_mmc_check+0x498>)
     b0c:	4798      	blx	r3
     b0e:	e65e      	b.n	7ce <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b10:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b12:	7e93      	ldrb	r3, [r2, #26]
     b14:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b16:	7e51      	ldrb	r1, [r2, #25]
     b18:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b1a:	430b      	orrs	r3, r1
     b1c:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     b1e:	029b      	lsls	r3, r3, #10
				* 512;
     b20:	085b      	lsrs	r3, r3, #1
     b22:	2180      	movs	r1, #128	; 0x80
     b24:	0089      	lsls	r1, r1, #2
     b26:	468c      	mov	ip, r1
     b28:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     b2a:	6053      	str	r3, [r2, #4]
     b2c:	e6cd      	b.n	8ca <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b2e:	4b27      	ldr	r3, [pc, #156]	; (bcc <sd_mmc_check+0x49c>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	2210      	movs	r2, #16
     b34:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     b36:	4b25      	ldr	r3, [pc, #148]	; (bcc <sd_mmc_check+0x49c>)
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	7bdb      	ldrb	r3, [r3, #15]
     b3c:	2209      	movs	r2, #9
     b3e:	4013      	ands	r3, r2
     b40:	2b01      	cmp	r3, #1
     b42:	d000      	beq.n	b46 <sd_mmc_check+0x416>
     b44:	e638      	b.n	7b8 <sd_mmc_check+0x88>
     b46:	e630      	b.n	7aa <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     b48:	4b20      	ldr	r3, [pc, #128]	; (bcc <sd_mmc_check+0x49c>)
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	221a      	movs	r2, #26
     b4e:	741a      	strb	r2, [r3, #16]
     b50:	e7f1      	b.n	b36 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b52:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     b54:	789b      	ldrb	r3, [r3, #2]
     b56:	09db      	lsrs	r3, r3, #7
     b58:	2b01      	cmp	r3, #1
     b5a:	d104      	bne.n	b66 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     b5c:	4b1b      	ldr	r3, [pc, #108]	; (bcc <sd_mmc_check+0x49c>)
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2230      	movs	r2, #48	; 0x30
     b62:	741a      	strb	r2, [r3, #16]
     b64:	e7e7      	b.n	b36 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     b66:	4b19      	ldr	r3, [pc, #100]	; (bcc <sd_mmc_check+0x49c>)
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	2220      	movs	r2, #32
     b6c:	741a      	strb	r2, [r3, #16]
     b6e:	e7e2      	b.n	b36 <sd_mmc_check+0x406>
	*v2 = 0;
     b70:	2600      	movs	r6, #0
     b72:	e60d      	b.n	790 <sd_mmc_check+0x60>
     b74:	1e73      	subs	r3, r6, #1
     b76:	419e      	sbcs	r6, r3
     b78:	07b3      	lsls	r3, r6, #30
     b7a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     b7c:	4d14      	ldr	r5, [pc, #80]	; (bd0 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b7e:	4f10      	ldr	r7, [pc, #64]	; (bc0 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b80:	46b8      	mov	r8, r7
		resp = driver_get_response();
     b82:	4e14      	ldr	r6, [pc, #80]	; (bd4 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     b84:	2100      	movs	r1, #0
     b86:	4814      	ldr	r0, [pc, #80]	; (bd8 <sd_mmc_check+0x4a8>)
     b88:	47b8      	blx	r7
     b8a:	2800      	cmp	r0, #0
     b8c:	d100      	bne.n	b90 <sd_mmc_check+0x460>
     b8e:	e638      	b.n	802 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     b90:	9903      	ldr	r1, [sp, #12]
     b92:	4812      	ldr	r0, [pc, #72]	; (bdc <sd_mmc_check+0x4ac>)
     b94:	47c0      	blx	r8
     b96:	2800      	cmp	r0, #0
     b98:	d100      	bne.n	b9c <sd_mmc_check+0x46c>
     b9a:	e632      	b.n	802 <sd_mmc_check+0xd2>
		resp = driver_get_response();
     b9c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     b9e:	07c3      	lsls	r3, r0, #31
     ba0:	d400      	bmi.n	ba4 <sd_mmc_check+0x474>
     ba2:	e628      	b.n	7f6 <sd_mmc_check+0xc6>
     ba4:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     ba6:	2d00      	cmp	r5, #0
     ba8:	d1ec      	bne.n	b84 <sd_mmc_check+0x454>
     baa:	e62a      	b.n	802 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     bac:	2209      	movs	r2, #9
     bae:	4013      	ands	r3, r2
     bb0:	2b01      	cmp	r3, #1
     bb2:	d000      	beq.n	bb6 <sd_mmc_check+0x486>
     bb4:	e609      	b.n	7ca <sd_mmc_check+0x9a>
     bb6:	e5f8      	b.n	7aa <sd_mmc_check+0x7a>
     bb8:	00005bc1 	.word	0x00005bc1
     bbc:	00001110 	.word	0x00001110
     bc0:	00005b9d 	.word	0x00005b9d
     bc4:	00000671 	.word	0x00000671
     bc8:	000004f9 	.word	0x000004f9
     bcc:	20000158 	.word	0x20000158
     bd0:	00001bef 	.word	0x00001bef
     bd4:	00005bb5 	.word	0x00005bb5
     bd8:	00001137 	.word	0x00001137
     bdc:	00001129 	.word	0x00001129

00000be0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     be0:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     be2:	4b06      	ldr	r3, [pc, #24]	; (bfc <sd_mmc_get_type+0x1c>)
     be4:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     be6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     be8:	2800      	cmp	r0, #0
     bea:	d001      	beq.n	bf0 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     bec:	0018      	movs	r0, r3
     bee:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     bf0:	4b03      	ldr	r3, [pc, #12]	; (c00 <sd_mmc_get_type+0x20>)
     bf2:	4798      	blx	r3
	return sd_mmc_card->type;
     bf4:	4b03      	ldr	r3, [pc, #12]	; (c04 <sd_mmc_get_type+0x24>)
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	7bdb      	ldrb	r3, [r3, #15]
     bfa:	e7f7      	b.n	bec <sd_mmc_get_type+0xc>
     bfc:	00000525 	.word	0x00000525
     c00:	000006f5 	.word	0x000006f5
     c04:	20000158 	.word	0x20000158

00000c08 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     c08:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <sd_mmc_get_capacity+0x1c>)
     c0c:	4798      	blx	r3
		return 0;
     c0e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     c10:	2800      	cmp	r0, #0
     c12:	d001      	beq.n	c18 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     c14:	0018      	movs	r0, r3
     c16:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     c18:	4b03      	ldr	r3, [pc, #12]	; (c28 <sd_mmc_get_capacity+0x20>)
     c1a:	4798      	blx	r3
	return sd_mmc_card->capacity;
     c1c:	4b03      	ldr	r3, [pc, #12]	; (c2c <sd_mmc_get_capacity+0x24>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	685b      	ldr	r3, [r3, #4]
     c22:	e7f7      	b.n	c14 <sd_mmc_get_capacity+0xc>
     c24:	00000525 	.word	0x00000525
     c28:	000006f5 	.word	0x000006f5
     c2c:	20000158 	.word	0x20000158

00000c30 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     c30:	2000      	movs	r0, #0
     c32:	4770      	bx	lr

00000c34 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	b082      	sub	sp, #8
     c38:	000e      	movs	r6, r1
     c3a:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     c3c:	4b16      	ldr	r3, [pc, #88]	; (c98 <sd_mmc_init_read_blocks+0x64>)
     c3e:	4798      	blx	r3
     c40:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     c42:	d002      	beq.n	c4a <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     c44:	0020      	movs	r0, r4
     c46:	b002      	add	sp, #8
     c48:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     c4a:	4b14      	ldr	r3, [pc, #80]	; (c9c <sd_mmc_init_read_blocks+0x68>)
     c4c:	4798      	blx	r3
     c4e:	2800      	cmp	r0, #0
     c50:	d017      	beq.n	c82 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     c52:	2d01      	cmp	r5, #1
     c54:	d919      	bls.n	c8a <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     c56:	4812      	ldr	r0, [pc, #72]	; (ca0 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     c58:	4b12      	ldr	r3, [pc, #72]	; (ca4 <sd_mmc_init_read_blocks+0x70>)
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	7bdb      	ldrb	r3, [r3, #15]
     c5e:	071b      	lsls	r3, r3, #28
     c60:	d400      	bmi.n	c64 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     c62:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     c64:	2301      	movs	r3, #1
     c66:	9300      	str	r3, [sp, #0]
     c68:	002b      	movs	r3, r5
     c6a:	2280      	movs	r2, #128	; 0x80
     c6c:	0092      	lsls	r2, r2, #2
     c6e:	0031      	movs	r1, r6
     c70:	4e0d      	ldr	r6, [pc, #52]	; (ca8 <sd_mmc_init_read_blocks+0x74>)
     c72:	47b0      	blx	r6
     c74:	2800      	cmp	r0, #0
     c76:	d00a      	beq.n	c8e <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     c78:	4b0c      	ldr	r3, [pc, #48]	; (cac <sd_mmc_init_read_blocks+0x78>)
     c7a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     c7c:	4b0c      	ldr	r3, [pc, #48]	; (cb0 <sd_mmc_init_read_blocks+0x7c>)
     c7e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     c80:	e7e0      	b.n	c44 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     c82:	4b0c      	ldr	r3, [pc, #48]	; (cb4 <sd_mmc_init_read_blocks+0x80>)
     c84:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c86:	3405      	adds	r4, #5
     c88:	e7dc      	b.n	c44 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     c8a:	480b      	ldr	r0, [pc, #44]	; (cb8 <sd_mmc_init_read_blocks+0x84>)
     c8c:	e7e4      	b.n	c58 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     c8e:	4b09      	ldr	r3, [pc, #36]	; (cb4 <sd_mmc_init_read_blocks+0x80>)
     c90:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     c92:	2405      	movs	r4, #5
     c94:	e7d6      	b.n	c44 <sd_mmc_init_read_blocks+0x10>
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	00000525 	.word	0x00000525
     c9c:	00000671 	.word	0x00000671
     ca0:	00101112 	.word	0x00101112
     ca4:	20000158 	.word	0x20000158
     ca8:	00005a0d 	.word	0x00005a0d
     cac:	2000015c 	.word	0x2000015c
     cb0:	2000015e 	.word	0x2000015e
     cb4:	000006f5 	.word	0x000006f5
     cb8:	00081111 	.word	0x00081111

00000cbc <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     cbc:	b510      	push	{r4, lr}
     cbe:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     cc0:	4b07      	ldr	r3, [pc, #28]	; (ce0 <sd_mmc_start_read_blocks+0x24>)
     cc2:	4798      	blx	r3
     cc4:	2800      	cmp	r0, #0
     cc6:	d104      	bne.n	cd2 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     cc8:	2200      	movs	r2, #0
     cca:	4b06      	ldr	r3, [pc, #24]	; (ce4 <sd_mmc_start_read_blocks+0x28>)
     ccc:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     cce:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     cd0:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     cd2:	4a04      	ldr	r2, [pc, #16]	; (ce4 <sd_mmc_start_read_blocks+0x28>)
     cd4:	8813      	ldrh	r3, [r2, #0]
     cd6:	1b1c      	subs	r4, r3, r4
     cd8:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     cda:	2000      	movs	r0, #0
     cdc:	e7f8      	b.n	cd0 <sd_mmc_start_read_blocks+0x14>
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	00005c39 	.word	0x00005c39
     ce4:	2000015c 	.word	0x2000015c

00000ce8 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     ce8:	b510      	push	{r4, lr}
     cea:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     cec:	4b14      	ldr	r3, [pc, #80]	; (d40 <sd_mmc_wait_end_of_read_blocks+0x58>)
     cee:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     cf0:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     cf2:	2800      	cmp	r0, #0
     cf4:	d101      	bne.n	cfa <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     cf6:	0018      	movs	r0, r3
     cf8:	bd10      	pop	{r4, pc}
	if (abort) {
     cfa:	2c00      	cmp	r4, #0
     cfc:	d010      	beq.n	d20 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     cfe:	2200      	movs	r2, #0
     d00:	4b10      	ldr	r3, [pc, #64]	; (d44 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     d02:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     d04:	4b10      	ldr	r3, [pc, #64]	; (d48 <sd_mmc_wait_end_of_read_blocks+0x60>)
     d06:	881b      	ldrh	r3, [r3, #0]
     d08:	2b01      	cmp	r3, #1
     d0a:	d00f      	beq.n	d2c <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     d0c:	2100      	movs	r1, #0
     d0e:	480f      	ldr	r0, [pc, #60]	; (d4c <sd_mmc_wait_end_of_read_blocks+0x64>)
     d10:	4b0f      	ldr	r3, [pc, #60]	; (d50 <sd_mmc_wait_end_of_read_blocks+0x68>)
     d12:	4798      	blx	r3
     d14:	2800      	cmp	r0, #0
     d16:	d00d      	beq.n	d34 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     d18:	4b0e      	ldr	r3, [pc, #56]	; (d54 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     d1a:	4798      	blx	r3
	return SD_MMC_OK;
     d1c:	2300      	movs	r3, #0
     d1e:	e7ea      	b.n	cf6 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     d20:	4b08      	ldr	r3, [pc, #32]	; (d44 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     d22:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     d24:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     d26:	2a00      	cmp	r2, #0
     d28:	d0ec      	beq.n	d04 <sd_mmc_wait_end_of_read_blocks+0x1c>
     d2a:	e7e4      	b.n	cf6 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     d2c:	4b09      	ldr	r3, [pc, #36]	; (d54 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     d2e:	4798      	blx	r3
		return SD_MMC_OK;
     d30:	2300      	movs	r3, #0
     d32:	e7e0      	b.n	cf6 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     d34:	2100      	movs	r1, #0
     d36:	4805      	ldr	r0, [pc, #20]	; (d4c <sd_mmc_wait_end_of_read_blocks+0x64>)
     d38:	4b05      	ldr	r3, [pc, #20]	; (d50 <sd_mmc_wait_end_of_read_blocks+0x68>)
     d3a:	4798      	blx	r3
     d3c:	e7ec      	b.n	d18 <sd_mmc_wait_end_of_read_blocks+0x30>
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	00005cc5 	.word	0x00005cc5
     d44:	2000015c 	.word	0x2000015c
     d48:	2000015e 	.word	0x2000015e
     d4c:	0000310c 	.word	0x0000310c
     d50:	00005b9d 	.word	0x00005b9d
     d54:	000006f5 	.word	0x000006f5

00000d58 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     d58:	b570      	push	{r4, r5, r6, lr}
     d5a:	b082      	sub	sp, #8
     d5c:	000e      	movs	r6, r1
     d5e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     d60:	4b11      	ldr	r3, [pc, #68]	; (da8 <sd_mmc_init_write_blocks+0x50>)
     d62:	4798      	blx	r3
     d64:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     d66:	d116      	bne.n	d96 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     d68:	2d01      	cmp	r5, #1
     d6a:	d917      	bls.n	d9c <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     d6c:	480f      	ldr	r0, [pc, #60]	; (dac <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     d6e:	4b10      	ldr	r3, [pc, #64]	; (db0 <sd_mmc_init_write_blocks+0x58>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	7bdb      	ldrb	r3, [r3, #15]
     d74:	071b      	lsls	r3, r3, #28
     d76:	d400      	bmi.n	d7a <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     d78:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     d7a:	2301      	movs	r3, #1
     d7c:	9300      	str	r3, [sp, #0]
     d7e:	002b      	movs	r3, r5
     d80:	2280      	movs	r2, #128	; 0x80
     d82:	0092      	lsls	r2, r2, #2
     d84:	0031      	movs	r1, r6
     d86:	4e0b      	ldr	r6, [pc, #44]	; (db4 <sd_mmc_init_write_blocks+0x5c>)
     d88:	47b0      	blx	r6
     d8a:	2800      	cmp	r0, #0
     d8c:	d008      	beq.n	da0 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     d8e:	4b0a      	ldr	r3, [pc, #40]	; (db8 <sd_mmc_init_write_blocks+0x60>)
     d90:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     d92:	4b0a      	ldr	r3, [pc, #40]	; (dbc <sd_mmc_init_write_blocks+0x64>)
     d94:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     d96:	0020      	movs	r0, r4
     d98:	b002      	add	sp, #8
     d9a:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     d9c:	4808      	ldr	r0, [pc, #32]	; (dc0 <sd_mmc_init_write_blocks+0x68>)
     d9e:	e7e6      	b.n	d6e <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     da0:	4b08      	ldr	r3, [pc, #32]	; (dc4 <sd_mmc_init_write_blocks+0x6c>)
     da2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     da4:	2405      	movs	r4, #5
     da6:	e7f6      	b.n	d96 <sd_mmc_init_write_blocks+0x3e>
     da8:	00000525 	.word	0x00000525
     dac:	00109119 	.word	0x00109119
     db0:	20000158 	.word	0x20000158
     db4:	00005a0d 	.word	0x00005a0d
     db8:	2000015c 	.word	0x2000015c
     dbc:	2000015e 	.word	0x2000015e
     dc0:	00089118 	.word	0x00089118
     dc4:	000006f5 	.word	0x000006f5

00000dc8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     dc8:	b510      	push	{r4, lr}
     dca:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     dcc:	4b07      	ldr	r3, [pc, #28]	; (dec <sd_mmc_start_write_blocks+0x24>)
     dce:	4798      	blx	r3
     dd0:	2800      	cmp	r0, #0
     dd2:	d104      	bne.n	dde <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     dd4:	2200      	movs	r2, #0
     dd6:	4b06      	ldr	r3, [pc, #24]	; (df0 <sd_mmc_start_write_blocks+0x28>)
     dd8:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     dda:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     ddc:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     dde:	4a04      	ldr	r2, [pc, #16]	; (df0 <sd_mmc_start_write_blocks+0x28>)
     de0:	8813      	ldrh	r3, [r2, #0]
     de2:	1b1c      	subs	r4, r3, r4
     de4:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     de6:	2000      	movs	r0, #0
     de8:	e7f8      	b.n	ddc <sd_mmc_start_write_blocks+0x14>
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	00005cc9 	.word	0x00005cc9
     df0:	2000015c 	.word	0x2000015c

00000df4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     df4:	b510      	push	{r4, lr}
     df6:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     df8:	4b0e      	ldr	r3, [pc, #56]	; (e34 <sd_mmc_wait_end_of_write_blocks+0x40>)
     dfa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     dfc:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     dfe:	2800      	cmp	r0, #0
     e00:	d101      	bne.n	e06 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     e02:	0018      	movs	r0, r3
     e04:	bd10      	pop	{r4, pc}
	if (abort) {
     e06:	2c00      	cmp	r4, #0
     e08:	d00a      	beq.n	e20 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     e0a:	2200      	movs	r2, #0
     e0c:	4b0a      	ldr	r3, [pc, #40]	; (e38 <sd_mmc_wait_end_of_write_blocks+0x44>)
     e0e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     e10:	4b0a      	ldr	r3, [pc, #40]	; (e3c <sd_mmc_wait_end_of_write_blocks+0x48>)
     e12:	881b      	ldrh	r3, [r3, #0]
     e14:	2b01      	cmp	r3, #1
     e16:	d009      	beq.n	e2c <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     e18:	4b09      	ldr	r3, [pc, #36]	; (e40 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     e1a:	4798      	blx	r3
	return SD_MMC_OK;
     e1c:	2300      	movs	r3, #0
     e1e:	e7f0      	b.n	e02 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     e20:	4b05      	ldr	r3, [pc, #20]	; (e38 <sd_mmc_wait_end_of_write_blocks+0x44>)
     e22:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     e24:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     e26:	2a00      	cmp	r2, #0
     e28:	d0f2      	beq.n	e10 <sd_mmc_wait_end_of_write_blocks+0x1c>
     e2a:	e7ea      	b.n	e02 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     e2c:	4b04      	ldr	r3, [pc, #16]	; (e40 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     e2e:	4798      	blx	r3
		return SD_MMC_OK;
     e30:	2300      	movs	r3, #0
     e32:	e7e6      	b.n	e02 <sd_mmc_wait_end_of_write_blocks+0xe>
     e34:	00005d49 	.word	0x00005d49
     e38:	2000015c 	.word	0x2000015c
     e3c:	2000015e 	.word	0x2000015e
     e40:	000006f5 	.word	0x000006f5

00000e44 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     e44:	4a04      	ldr	r2, [pc, #16]	; (e58 <_extint_enable+0x14>)
     e46:	7813      	ldrb	r3, [r2, #0]
     e48:	2102      	movs	r1, #2
     e4a:	430b      	orrs	r3, r1
     e4c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     e4e:	7853      	ldrb	r3, [r2, #1]
     e50:	b25b      	sxtb	r3, r3
     e52:	2b00      	cmp	r3, #0
     e54:	dbfb      	blt.n	e4e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     e56:	4770      	bx	lr
     e58:	40001800 	.word	0x40001800

00000e5c <_system_extint_init>:
{
     e5c:	b500      	push	{lr}
     e5e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     e60:	4a12      	ldr	r2, [pc, #72]	; (eac <_system_extint_init+0x50>)
     e62:	6993      	ldr	r3, [r2, #24]
     e64:	2140      	movs	r1, #64	; 0x40
     e66:	430b      	orrs	r3, r1
     e68:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     e6a:	a901      	add	r1, sp, #4
     e6c:	2300      	movs	r3, #0
     e6e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     e70:	2005      	movs	r0, #5
     e72:	4b0f      	ldr	r3, [pc, #60]	; (eb0 <_system_extint_init+0x54>)
     e74:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     e76:	2005      	movs	r0, #5
     e78:	4b0e      	ldr	r3, [pc, #56]	; (eb4 <_system_extint_init+0x58>)
     e7a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     e7c:	4a0e      	ldr	r2, [pc, #56]	; (eb8 <_system_extint_init+0x5c>)
     e7e:	7813      	ldrb	r3, [r2, #0]
     e80:	2101      	movs	r1, #1
     e82:	430b      	orrs	r3, r1
     e84:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     e86:	7853      	ldrb	r3, [r2, #1]
     e88:	b25b      	sxtb	r3, r3
     e8a:	2b00      	cmp	r3, #0
     e8c:	dbfb      	blt.n	e86 <_system_extint_init+0x2a>
     e8e:	4b0b      	ldr	r3, [pc, #44]	; (ebc <_system_extint_init+0x60>)
     e90:	0019      	movs	r1, r3
     e92:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     e94:	2200      	movs	r2, #0
     e96:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     e98:	4299      	cmp	r1, r3
     e9a:	d1fc      	bne.n	e96 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e9c:	2210      	movs	r2, #16
     e9e:	4b08      	ldr	r3, [pc, #32]	; (ec0 <_system_extint_init+0x64>)
     ea0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     ea2:	4b08      	ldr	r3, [pc, #32]	; (ec4 <_system_extint_init+0x68>)
     ea4:	4798      	blx	r3
}
     ea6:	b003      	add	sp, #12
     ea8:	bd00      	pop	{pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	40000400 	.word	0x40000400
     eb0:	0000612d 	.word	0x0000612d
     eb4:	000060a1 	.word	0x000060a1
     eb8:	40001800 	.word	0x40001800
     ebc:	2000027c 	.word	0x2000027c
     ec0:	e000e100 	.word	0xe000e100
     ec4:	00000e45 	.word	0x00000e45

00000ec8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     ec8:	2300      	movs	r3, #0
     eca:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     ecc:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     ece:	2201      	movs	r2, #1
     ed0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     ed2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     ed4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     ed6:	3302      	adds	r3, #2
     ed8:	72c3      	strb	r3, [r0, #11]
}
     eda:	4770      	bx	lr

00000edc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	b083      	sub	sp, #12
     ee0:	0005      	movs	r5, r0
     ee2:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ee4:	a901      	add	r1, sp, #4
     ee6:	2300      	movs	r3, #0
     ee8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     eea:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     eec:	7923      	ldrb	r3, [r4, #4]
     eee:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     ef0:	7a23      	ldrb	r3, [r4, #8]
     ef2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     ef4:	7820      	ldrb	r0, [r4, #0]
     ef6:	4b15      	ldr	r3, [pc, #84]	; (f4c <extint_chan_set_config+0x70>)
     ef8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     efa:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     efc:	2d1f      	cmp	r5, #31
     efe:	d800      	bhi.n	f02 <extint_chan_set_config+0x26>
		return eics[eic_index];
     f00:	4813      	ldr	r0, [pc, #76]	; (f50 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     f02:	2207      	movs	r2, #7
     f04:	402a      	ands	r2, r5
     f06:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     f08:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     f0a:	7aa3      	ldrb	r3, [r4, #10]
     f0c:	2b00      	cmp	r3, #0
     f0e:	d001      	beq.n	f14 <extint_chan_set_config+0x38>
     f10:	2308      	movs	r3, #8
     f12:	431f      	orrs	r7, r3
     f14:	08eb      	lsrs	r3, r5, #3
     f16:	009b      	lsls	r3, r3, #2
     f18:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     f1a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     f1c:	260f      	movs	r6, #15
     f1e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     f20:	43b1      	bics	r1, r6
			(new_config << config_pos);
     f22:	4097      	lsls	r7, r2
     f24:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     f26:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     f28:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     f2a:	7a63      	ldrb	r3, [r4, #9]
     f2c:	2b00      	cmp	r3, #0
     f2e:	d106      	bne.n	f3e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     f30:	6943      	ldr	r3, [r0, #20]
     f32:	2201      	movs	r2, #1
     f34:	40aa      	lsls	r2, r5
     f36:	4393      	bics	r3, r2
     f38:	6143      	str	r3, [r0, #20]
	}
}
     f3a:	b003      	add	sp, #12
     f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     f3e:	6942      	ldr	r2, [r0, #20]
     f40:	2301      	movs	r3, #1
     f42:	40ab      	lsls	r3, r5
     f44:	4313      	orrs	r3, r2
     f46:	6143      	str	r3, [r0, #20]
     f48:	e7f7      	b.n	f3a <extint_chan_set_config+0x5e>
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	00006225 	.word	0x00006225
     f50:	40001800 	.word	0x40001800

00000f54 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f54:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     f56:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     f58:	b25b      	sxtb	r3, r3
     f5a:	2b00      	cmp	r3, #0
     f5c:	dbfb      	blt.n	f56 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     f5e:	8813      	ldrh	r3, [r2, #0]
     f60:	2102      	movs	r1, #2
     f62:	430b      	orrs	r3, r1
     f64:	8013      	strh	r3, [r2, #0]
}
     f66:	4770      	bx	lr

00000f68 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f68:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     f6a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     f6c:	b25b      	sxtb	r3, r3
     f6e:	2b00      	cmp	r3, #0
     f70:	dbfb      	blt.n	f6a <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     f72:	23c1      	movs	r3, #193	; 0xc1
     f74:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     f76:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     f78:	8813      	ldrh	r3, [r2, #0]
     f7a:	2102      	movs	r1, #2
     f7c:	438b      	bics	r3, r1
     f7e:	8013      	strh	r3, [r2, #0]
}
     f80:	4770      	bx	lr
	...

00000f84 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     f84:	b570      	push	{r4, r5, r6, lr}
     f86:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     f88:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     f8a:	4b06      	ldr	r3, [pc, #24]	; (fa4 <rtc_calendar_reset+0x20>)
     f8c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
     f8e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     f90:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
     f92:	b25b      	sxtb	r3, r3
     f94:	2b00      	cmp	r3, #0
     f96:	dbfb      	blt.n	f90 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     f98:	882b      	ldrh	r3, [r5, #0]
     f9a:	2201      	movs	r2, #1
     f9c:	4313      	orrs	r3, r2
     f9e:	802b      	strh	r3, [r5, #0]
}
     fa0:	bd70      	pop	{r4, r5, r6, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	00000f69 	.word	0x00000f69

00000fa8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     fa8:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     faa:	88cb      	ldrh	r3, [r1, #6]
     fac:	88c2      	ldrh	r2, [r0, #6]
     fae:	1a9a      	subs	r2, r3, r2
     fb0:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     fb2:	794b      	ldrb	r3, [r1, #5]
     fb4:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     fb6:	790c      	ldrb	r4, [r1, #4]
     fb8:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     fba:	4323      	orrs	r3, r4
     fbc:	788c      	ldrb	r4, [r1, #2]
     fbe:	0324      	lsls	r4, r4, #12
     fc0:	4323      	orrs	r3, r4
     fc2:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     fc4:	7902      	ldrb	r2, [r0, #4]
     fc6:	2a00      	cmp	r2, #0
     fc8:	d105      	bne.n	fd6 <rtc_calendar_time_to_register_value+0x2e>
     fca:	78ca      	ldrb	r2, [r1, #3]
     fcc:	2a00      	cmp	r2, #0
     fce:	d002      	beq.n	fd6 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     fd0:	2280      	movs	r2, #128	; 0x80
     fd2:	0252      	lsls	r2, r2, #9
     fd4:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     fd6:	7848      	ldrb	r0, [r1, #1]
     fd8:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     fda:	780a      	ldrb	r2, [r1, #0]
     fdc:	4310      	orrs	r0, r2
     fde:	4318      	orrs	r0, r3

	return register_value;
}
     fe0:	bd10      	pop	{r4, pc}

00000fe2 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     fe2:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     fe4:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     fe6:	88c4      	ldrh	r4, [r0, #6]
     fe8:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     fea:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     fec:	018b      	lsls	r3, r1, #6
     fee:	0f1b      	lsrs	r3, r3, #28
     ff0:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     ff2:	028b      	lsls	r3, r1, #10
     ff4:	0edb      	lsrs	r3, r3, #27
     ff6:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     ff8:	7903      	ldrb	r3, [r0, #4]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d10c      	bne.n	1018 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     ffe:	040b      	lsls	r3, r1, #16
    1000:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1002:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1004:	03cb      	lsls	r3, r1, #15
    1006:	0fdb      	lsrs	r3, r3, #31
    1008:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    100a:	0988      	lsrs	r0, r1, #6
    100c:	233f      	movs	r3, #63	; 0x3f
    100e:	4018      	ands	r0, r3
    1010:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1012:	4019      	ands	r1, r3
    1014:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1016:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1018:	03cb      	lsls	r3, r1, #15
    101a:	0edb      	lsrs	r3, r3, #27
    101c:	7093      	strb	r3, [r2, #2]
    101e:	e7f4      	b.n	100a <rtc_calendar_register_value_to_time+0x28>

00001020 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1020:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1022:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    1024:	4b03      	ldr	r3, [pc, #12]	; (1034 <rtc_calendar_set_time+0x14>)
    1026:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1028:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    102a:	b25b      	sxtb	r3, r3
    102c:	2b00      	cmp	r3, #0
    102e:	dbfb      	blt.n	1028 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    1030:	6120      	str	r0, [r4, #16]
}
    1032:	bd10      	pop	{r4, pc}
    1034:	00000fa9 	.word	0x00000fa9

00001038 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1038:	b510      	push	{r4, lr}
    103a:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    103c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    103e:	7941      	ldrb	r1, [r0, #5]
    1040:	2900      	cmp	r1, #0
    1042:	d006      	beq.n	1052 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1044:	8859      	ldrh	r1, [r3, #2]
    1046:	0449      	lsls	r1, r1, #17
    1048:	d50b      	bpl.n	1062 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    104a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    104c:	4b0a      	ldr	r3, [pc, #40]	; (1078 <rtc_calendar_get_time+0x40>)
    104e:	4798      	blx	r3
}
    1050:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1052:	490a      	ldr	r1, [pc, #40]	; (107c <rtc_calendar_get_time+0x44>)
    1054:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1056:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1058:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    105a:	b249      	sxtb	r1, r1
    105c:	2900      	cmp	r1, #0
    105e:	dbfb      	blt.n	1058 <rtc_calendar_get_time+0x20>
    1060:	e7f3      	b.n	104a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1062:	8859      	ldrh	r1, [r3, #2]
    1064:	24c0      	movs	r4, #192	; 0xc0
    1066:	0224      	lsls	r4, r4, #8
    1068:	4321      	orrs	r1, r4
    106a:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    106c:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    106e:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1070:	b249      	sxtb	r1, r1
    1072:	2900      	cmp	r1, #0
    1074:	dbfb      	blt.n	106e <rtc_calendar_get_time+0x36>
    1076:	e7e8      	b.n	104a <rtc_calendar_get_time+0x12>
    1078:	00000fe3 	.word	0x00000fe3
    107c:	ffff8000 	.word	0xffff8000

00001080 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1080:	b570      	push	{r4, r5, r6, lr}
    1082:	000d      	movs	r5, r1
    1084:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1086:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1088:	2a01      	cmp	r2, #1
    108a:	d901      	bls.n	1090 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    108c:	0018      	movs	r0, r3
    108e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1090:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1092:	4b06      	ldr	r3, [pc, #24]	; (10ac <rtc_calendar_set_alarm+0x2c>)
    1094:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1096:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1098:	b25b      	sxtb	r3, r3
    109a:	2b00      	cmp	r3, #0
    109c:	dbfb      	blt.n	1096 <rtc_calendar_set_alarm+0x16>
    109e:	00e4      	lsls	r4, r4, #3
    10a0:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    10a2:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    10a4:	7a2b      	ldrb	r3, [r5, #8]
    10a6:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    10a8:	2300      	movs	r3, #0
    10aa:	e7ef      	b.n	108c <rtc_calendar_set_alarm+0xc>
    10ac:	00000fa9 	.word	0x00000fa9

000010b0 <rtc_calendar_init>:
{
    10b0:	b530      	push	{r4, r5, lr}
    10b2:	b083      	sub	sp, #12
    10b4:	0005      	movs	r5, r0
    10b6:	0014      	movs	r4, r2
	module->hw = hw;
    10b8:	6001      	str	r1, [r0, #0]
    10ba:	4a1c      	ldr	r2, [pc, #112]	; (112c <rtc_calendar_init+0x7c>)
    10bc:	6993      	ldr	r3, [r2, #24]
    10be:	2120      	movs	r1, #32
    10c0:	430b      	orrs	r3, r1
    10c2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    10c4:	a901      	add	r1, sp, #4
    10c6:	2302      	movs	r3, #2
    10c8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    10ca:	2004      	movs	r0, #4
    10cc:	4b18      	ldr	r3, [pc, #96]	; (1130 <rtc_calendar_init+0x80>)
    10ce:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    10d0:	2004      	movs	r0, #4
    10d2:	4b18      	ldr	r3, [pc, #96]	; (1134 <rtc_calendar_init+0x84>)
    10d4:	4798      	blx	r3
	rtc_calendar_reset(module);
    10d6:	0028      	movs	r0, r5
    10d8:	4b17      	ldr	r3, [pc, #92]	; (1138 <rtc_calendar_init+0x88>)
    10da:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    10dc:	7923      	ldrb	r3, [r4, #4]
    10de:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    10e0:	78e3      	ldrb	r3, [r4, #3]
    10e2:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    10e4:	88e3      	ldrh	r3, [r4, #6]
    10e6:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    10e8:	4b14      	ldr	r3, [pc, #80]	; (113c <rtc_calendar_init+0x8c>)
    10ea:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    10ec:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    10ee:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    10f0:	7921      	ldrb	r1, [r4, #4]
    10f2:	2900      	cmp	r1, #0
    10f4:	d017      	beq.n	1126 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    10f6:	2108      	movs	r1, #8
    10f8:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    10fa:	78a1      	ldrb	r1, [r4, #2]
    10fc:	2900      	cmp	r1, #0
    10fe:	d001      	beq.n	1104 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1100:	2180      	movs	r1, #128	; 0x80
    1102:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1104:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1106:	78e3      	ldrb	r3, [r4, #3]
    1108:	2b00      	cmp	r3, #0
    110a:	d004      	beq.n	1116 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    110c:	8853      	ldrh	r3, [r2, #2]
    110e:	2180      	movs	r1, #128	; 0x80
    1110:	01c9      	lsls	r1, r1, #7
    1112:	430b      	orrs	r3, r1
    1114:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1116:	0021      	movs	r1, r4
    1118:	3108      	adds	r1, #8
    111a:	2200      	movs	r2, #0
    111c:	0028      	movs	r0, r5
    111e:	4b08      	ldr	r3, [pc, #32]	; (1140 <rtc_calendar_init+0x90>)
    1120:	4798      	blx	r3
}
    1122:	b003      	add	sp, #12
    1124:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1126:	2148      	movs	r1, #72	; 0x48
    1128:	430b      	orrs	r3, r1
    112a:	e7e6      	b.n	10fa <rtc_calendar_init+0x4a>
    112c:	40000400 	.word	0x40000400
    1130:	0000612d 	.word	0x0000612d
    1134:	000060a1 	.word	0x000060a1
    1138:	00000f85 	.word	0x00000f85
    113c:	200002bc 	.word	0x200002bc
    1140:	00001081 	.word	0x00001081

00001144 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1144:	b570      	push	{r4, r5, r6, lr}
    1146:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1148:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    114a:	2a01      	cmp	r2, #1
    114c:	d901      	bls.n	1152 <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    114e:	0018      	movs	r0, r3
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	00d2      	lsls	r2, r2, #3
    1154:	6803      	ldr	r3, [r0, #0]
    1156:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    1158:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    115a:	0022      	movs	r2, r4
    115c:	4b02      	ldr	r3, [pc, #8]	; (1168 <rtc_calendar_get_alarm+0x24>)
    115e:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    1160:	7f2b      	ldrb	r3, [r5, #28]
    1162:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    1164:	2300      	movs	r3, #0
    1166:	e7f2      	b.n	114e <rtc_calendar_get_alarm+0xa>
    1168:	00000fe3 	.word	0x00000fe3

0000116c <rtc_calendar_swap_time_mode>:
{
    116c:	b570      	push	{r4, r5, r6, lr}
    116e:	b086      	sub	sp, #24
    1170:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    1172:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    1174:	a904      	add	r1, sp, #16
    1176:	4b3d      	ldr	r3, [pc, #244]	; (126c <rtc_calendar_swap_time_mode+0x100>)
    1178:	4798      	blx	r3
	if (module->clock_24h) {
    117a:	7923      	ldrb	r3, [r4, #4]
    117c:	2b00      	cmp	r3, #0
    117e:	d042      	beq.n	1206 <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    1180:	aa04      	add	r2, sp, #16
    1182:	7890      	ldrb	r0, [r2, #2]
    1184:	230b      	movs	r3, #11
    1186:	4283      	cmp	r3, r0
    1188:	419b      	sbcs	r3, r3
    118a:	425b      	negs	r3, r3
    118c:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    118e:	210c      	movs	r1, #12
    1190:	4b37      	ldr	r3, [pc, #220]	; (1270 <rtc_calendar_swap_time_mode+0x104>)
    1192:	4798      	blx	r3
    1194:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    1196:	2900      	cmp	r1, #0
    1198:	d016      	beq.n	11c8 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    119a:	ab04      	add	r3, sp, #16
    119c:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    119e:	ad01      	add	r5, sp, #4
    11a0:	2200      	movs	r2, #0
    11a2:	0029      	movs	r1, r5
    11a4:	0020      	movs	r0, r4
    11a6:	4b33      	ldr	r3, [pc, #204]	; (1274 <rtc_calendar_swap_time_mode+0x108>)
    11a8:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    11aa:	78a8      	ldrb	r0, [r5, #2]
    11ac:	230b      	movs	r3, #11
    11ae:	4283      	cmp	r3, r0
    11b0:	419b      	sbcs	r3, r3
    11b2:	425b      	negs	r3, r3
    11b4:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    11b6:	210c      	movs	r1, #12
    11b8:	4b2d      	ldr	r3, [pc, #180]	; (1270 <rtc_calendar_swap_time_mode+0x104>)
    11ba:	4798      	blx	r3
    11bc:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    11be:	2900      	cmp	r1, #0
    11c0:	d006      	beq.n	11d0 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    11c2:	ab01      	add	r3, sp, #4
    11c4:	7099      	strb	r1, [r3, #2]
    11c6:	e006      	b.n	11d6 <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    11c8:	220c      	movs	r2, #12
    11ca:	ab04      	add	r3, sp, #16
    11cc:	709a      	strb	r2, [r3, #2]
    11ce:	e7e6      	b.n	119e <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    11d0:	220c      	movs	r2, #12
    11d2:	ab01      	add	r3, sp, #4
    11d4:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    11d6:	2500      	movs	r5, #0
    11d8:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    11da:	2200      	movs	r2, #0
    11dc:	a901      	add	r1, sp, #4
    11de:	0020      	movs	r0, r4
    11e0:	4b25      	ldr	r3, [pc, #148]	; (1278 <rtc_calendar_swap_time_mode+0x10c>)
    11e2:	4798      	blx	r3
		module->clock_24h = false;
    11e4:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    11e6:	0020      	movs	r0, r4
    11e8:	4b24      	ldr	r3, [pc, #144]	; (127c <rtc_calendar_swap_time_mode+0x110>)
    11ea:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    11ec:	8833      	ldrh	r3, [r6, #0]
    11ee:	2240      	movs	r2, #64	; 0x40
    11f0:	4053      	eors	r3, r2
    11f2:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    11f4:	0020      	movs	r0, r4
    11f6:	4b22      	ldr	r3, [pc, #136]	; (1280 <rtc_calendar_swap_time_mode+0x114>)
    11f8:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    11fa:	a904      	add	r1, sp, #16
    11fc:	0020      	movs	r0, r4
    11fe:	4b21      	ldr	r3, [pc, #132]	; (1284 <rtc_calendar_swap_time_mode+0x118>)
    1200:	4798      	blx	r3
}
    1202:	b006      	add	sp, #24
    1204:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    1206:	ab04      	add	r3, sp, #16
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b00      	cmp	r3, #0
    120c:	d015      	beq.n	123a <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    120e:	ab04      	add	r3, sp, #16
    1210:	789a      	ldrb	r2, [r3, #2]
    1212:	320c      	adds	r2, #12
    1214:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    1216:	2200      	movs	r2, #0
    1218:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    121a:	ad01      	add	r5, sp, #4
    121c:	2200      	movs	r2, #0
    121e:	0029      	movs	r1, r5
    1220:	0020      	movs	r0, r4
    1222:	4b14      	ldr	r3, [pc, #80]	; (1274 <rtc_calendar_swap_time_mode+0x108>)
    1224:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    1226:	78eb      	ldrb	r3, [r5, #3]
    1228:	2b00      	cmp	r3, #0
    122a:	d10e      	bne.n	124a <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    122c:	ab01      	add	r3, sp, #4
    122e:	789b      	ldrb	r3, [r3, #2]
    1230:	2b0c      	cmp	r3, #12
    1232:	d017      	beq.n	1264 <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    1234:	2301      	movs	r3, #1
    1236:	7123      	strb	r3, [r4, #4]
    1238:	e7d5      	b.n	11e6 <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    123a:	ab04      	add	r3, sp, #16
    123c:	789b      	ldrb	r3, [r3, #2]
    123e:	2b0c      	cmp	r3, #12
    1240:	d1eb      	bne.n	121a <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    1242:	2200      	movs	r2, #0
    1244:	ab04      	add	r3, sp, #16
    1246:	709a      	strb	r2, [r3, #2]
    1248:	e7e7      	b.n	121a <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    124a:	a901      	add	r1, sp, #4
    124c:	788b      	ldrb	r3, [r1, #2]
    124e:	330c      	adds	r3, #12
    1250:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    1252:	2300      	movs	r3, #0
    1254:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    1256:	3301      	adds	r3, #1
    1258:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    125a:	2200      	movs	r2, #0
    125c:	0020      	movs	r0, r4
    125e:	4b06      	ldr	r3, [pc, #24]	; (1278 <rtc_calendar_swap_time_mode+0x10c>)
    1260:	4798      	blx	r3
    1262:	e7e7      	b.n	1234 <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    1264:	2200      	movs	r2, #0
    1266:	ab01      	add	r3, sp, #4
    1268:	709a      	strb	r2, [r3, #2]
    126a:	e7e3      	b.n	1234 <rtc_calendar_swap_time_mode+0xc8>
    126c:	00001039 	.word	0x00001039
    1270:	000064b5 	.word	0x000064b5
    1274:	00001145 	.word	0x00001145
    1278:	00001081 	.word	0x00001081
    127c:	00000f69 	.word	0x00000f69
    1280:	00000f55 	.word	0x00000f55
    1284:	00001021 	.word	0x00001021

00001288 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1288:	4770      	bx	lr
	...

0000128c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    128c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    128e:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <_sercom_set_handler+0x2c>)
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	2b00      	cmp	r3, #0
    1294:	d10c      	bne.n	12b0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1296:	4f09      	ldr	r7, [pc, #36]	; (12bc <_sercom_set_handler+0x30>)
    1298:	4e09      	ldr	r6, [pc, #36]	; (12c0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    129a:	4d0a      	ldr	r5, [pc, #40]	; (12c4 <_sercom_set_handler+0x38>)
    129c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    129e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    12a0:	195a      	adds	r2, r3, r5
    12a2:	6014      	str	r4, [r2, #0]
    12a4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12a6:	2b18      	cmp	r3, #24
    12a8:	d1f9      	bne.n	129e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    12aa:	2201      	movs	r2, #1
    12ac:	4b02      	ldr	r3, [pc, #8]	; (12b8 <_sercom_set_handler+0x2c>)
    12ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    12b0:	0080      	lsls	r0, r0, #2
    12b2:	4b02      	ldr	r3, [pc, #8]	; (12bc <_sercom_set_handler+0x30>)
    12b4:	50c1      	str	r1, [r0, r3]
}
    12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12b8:	20000162 	.word	0x20000162
    12bc:	20000164 	.word	0x20000164
    12c0:	00001289 	.word	0x00001289
    12c4:	200002c0 	.word	0x200002c0

000012c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    12c8:	b500      	push	{lr}
    12ca:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    12cc:	2309      	movs	r3, #9
    12ce:	466a      	mov	r2, sp
    12d0:	7013      	strb	r3, [r2, #0]
    12d2:	3301      	adds	r3, #1
    12d4:	7053      	strb	r3, [r2, #1]
    12d6:	3301      	adds	r3, #1
    12d8:	7093      	strb	r3, [r2, #2]
    12da:	3301      	adds	r3, #1
    12dc:	70d3      	strb	r3, [r2, #3]
    12de:	3301      	adds	r3, #1
    12e0:	7113      	strb	r3, [r2, #4]
    12e2:	3301      	adds	r3, #1
    12e4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    12e6:	4b03      	ldr	r3, [pc, #12]	; (12f4 <_sercom_get_interrupt_vector+0x2c>)
    12e8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    12ea:	466b      	mov	r3, sp
    12ec:	5618      	ldrsb	r0, [r3, r0]
}
    12ee:	b003      	add	sp, #12
    12f0:	bd00      	pop	{pc}
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	00004d11 	.word	0x00004d11

000012f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    12f8:	b510      	push	{r4, lr}
    12fa:	4b02      	ldr	r3, [pc, #8]	; (1304 <SERCOM0_Handler+0xc>)
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	2000      	movs	r0, #0
    1300:	4798      	blx	r3
    1302:	bd10      	pop	{r4, pc}
    1304:	20000164 	.word	0x20000164

00001308 <SERCOM1_Handler>:
    1308:	b510      	push	{r4, lr}
    130a:	4b02      	ldr	r3, [pc, #8]	; (1314 <SERCOM1_Handler+0xc>)
    130c:	685b      	ldr	r3, [r3, #4]
    130e:	2001      	movs	r0, #1
    1310:	4798      	blx	r3
    1312:	bd10      	pop	{r4, pc}
    1314:	20000164 	.word	0x20000164

00001318 <SERCOM2_Handler>:
    1318:	b510      	push	{r4, lr}
    131a:	4b02      	ldr	r3, [pc, #8]	; (1324 <SERCOM2_Handler+0xc>)
    131c:	689b      	ldr	r3, [r3, #8]
    131e:	2002      	movs	r0, #2
    1320:	4798      	blx	r3
    1322:	bd10      	pop	{r4, pc}
    1324:	20000164 	.word	0x20000164

00001328 <SERCOM3_Handler>:
    1328:	b510      	push	{r4, lr}
    132a:	4b02      	ldr	r3, [pc, #8]	; (1334 <SERCOM3_Handler+0xc>)
    132c:	68db      	ldr	r3, [r3, #12]
    132e:	2003      	movs	r0, #3
    1330:	4798      	blx	r3
    1332:	bd10      	pop	{r4, pc}
    1334:	20000164 	.word	0x20000164

00001338 <SERCOM4_Handler>:
    1338:	b510      	push	{r4, lr}
    133a:	4b02      	ldr	r3, [pc, #8]	; (1344 <SERCOM4_Handler+0xc>)
    133c:	691b      	ldr	r3, [r3, #16]
    133e:	2004      	movs	r0, #4
    1340:	4798      	blx	r3
    1342:	bd10      	pop	{r4, pc}
    1344:	20000164 	.word	0x20000164

00001348 <SERCOM5_Handler>:
    1348:	b510      	push	{r4, lr}
    134a:	4b02      	ldr	r3, [pc, #8]	; (1354 <SERCOM5_Handler+0xc>)
    134c:	695b      	ldr	r3, [r3, #20]
    134e:	2005      	movs	r0, #5
    1350:	4798      	blx	r3
    1352:	bd10      	pop	{r4, pc}
    1354:	20000164 	.word	0x20000164

00001358 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1358:	b5f0      	push	{r4, r5, r6, r7, lr}
    135a:	46de      	mov	lr, fp
    135c:	4657      	mov	r7, sl
    135e:	464e      	mov	r6, r9
    1360:	4645      	mov	r5, r8
    1362:	b5e0      	push	{r5, r6, r7, lr}
    1364:	b091      	sub	sp, #68	; 0x44
    1366:	0005      	movs	r5, r0
    1368:	000c      	movs	r4, r1
    136a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    136c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    136e:	0008      	movs	r0, r1
    1370:	4bbc      	ldr	r3, [pc, #752]	; (1664 <usart_init+0x30c>)
    1372:	4798      	blx	r3
    1374:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1376:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1378:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    137a:	07db      	lsls	r3, r3, #31
    137c:	d506      	bpl.n	138c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    137e:	b011      	add	sp, #68	; 0x44
    1380:	bc3c      	pop	{r2, r3, r4, r5}
    1382:	4690      	mov	r8, r2
    1384:	4699      	mov	r9, r3
    1386:	46a2      	mov	sl, r4
    1388:	46ab      	mov	fp, r5
    138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    138c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    138e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1390:	079b      	lsls	r3, r3, #30
    1392:	d4f4      	bmi.n	137e <usart_init+0x26>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1394:	49b4      	ldr	r1, [pc, #720]	; (1668 <usart_init+0x310>)
    1396:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1398:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    139a:	2301      	movs	r3, #1
    139c:	40bb      	lsls	r3, r7
    139e:	4303      	orrs	r3, r0
    13a0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    13a2:	a90f      	add	r1, sp, #60	; 0x3c
    13a4:	272d      	movs	r7, #45	; 0x2d
    13a6:	5df3      	ldrb	r3, [r6, r7]
    13a8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13aa:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13ac:	b2d3      	uxtb	r3, r2
    13ae:	9302      	str	r3, [sp, #8]
    13b0:	0018      	movs	r0, r3
    13b2:	4bae      	ldr	r3, [pc, #696]	; (166c <usart_init+0x314>)
    13b4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    13b6:	9802      	ldr	r0, [sp, #8]
    13b8:	4bad      	ldr	r3, [pc, #692]	; (1670 <usart_init+0x318>)
    13ba:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    13bc:	5df0      	ldrb	r0, [r6, r7]
    13be:	2100      	movs	r1, #0
    13c0:	4bac      	ldr	r3, [pc, #688]	; (1674 <usart_init+0x31c>)
    13c2:	4798      	blx	r3
	module->character_size = config->character_size;
    13c4:	7af3      	ldrb	r3, [r6, #11]
    13c6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    13c8:	2324      	movs	r3, #36	; 0x24
    13ca:	5cf3      	ldrb	r3, [r6, r3]
    13cc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    13ce:	2325      	movs	r3, #37	; 0x25
    13d0:	5cf3      	ldrb	r3, [r6, r3]
    13d2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    13d4:	7ef3      	ldrb	r3, [r6, #27]
    13d6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    13d8:	7f33      	ldrb	r3, [r6, #28]
    13da:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13dc:	682b      	ldr	r3, [r5, #0]
    13de:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13e0:	0018      	movs	r0, r3
    13e2:	4ba0      	ldr	r3, [pc, #640]	; (1664 <usart_init+0x30c>)
    13e4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13e6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    13e8:	2200      	movs	r2, #0
    13ea:	230e      	movs	r3, #14
    13ec:	a906      	add	r1, sp, #24
    13ee:	468c      	mov	ip, r1
    13f0:	4463      	add	r3, ip
    13f2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    13f4:	8a32      	ldrh	r2, [r6, #16]
    13f6:	9202      	str	r2, [sp, #8]
    13f8:	2380      	movs	r3, #128	; 0x80
    13fa:	01db      	lsls	r3, r3, #7
    13fc:	429a      	cmp	r2, r3
    13fe:	d100      	bne.n	1402 <usart_init+0xaa>
    1400:	e09e      	b.n	1540 <usart_init+0x1e8>
    1402:	d90f      	bls.n	1424 <usart_init+0xcc>
    1404:	23c0      	movs	r3, #192	; 0xc0
    1406:	01db      	lsls	r3, r3, #7
    1408:	9a02      	ldr	r2, [sp, #8]
    140a:	429a      	cmp	r2, r3
    140c:	d100      	bne.n	1410 <usart_init+0xb8>
    140e:	e092      	b.n	1536 <usart_init+0x1de>
    1410:	2380      	movs	r3, #128	; 0x80
    1412:	021b      	lsls	r3, r3, #8
    1414:	429a      	cmp	r2, r3
    1416:	d000      	beq.n	141a <usart_init+0xc2>
    1418:	e11f      	b.n	165a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    141a:	2303      	movs	r3, #3
    141c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    141e:	2300      	movs	r3, #0
    1420:	9307      	str	r3, [sp, #28]
    1422:	e008      	b.n	1436 <usart_init+0xde>
	switch (config->sample_rate) {
    1424:	2380      	movs	r3, #128	; 0x80
    1426:	019b      	lsls	r3, r3, #6
    1428:	429a      	cmp	r2, r3
    142a:	d000      	beq.n	142e <usart_init+0xd6>
    142c:	e115      	b.n	165a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    142e:	2310      	movs	r3, #16
    1430:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1432:	3b0f      	subs	r3, #15
    1434:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1436:	6833      	ldr	r3, [r6, #0]
    1438:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    143a:	68f3      	ldr	r3, [r6, #12]
    143c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    143e:	6973      	ldr	r3, [r6, #20]
    1440:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1442:	7e33      	ldrb	r3, [r6, #24]
    1444:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1446:	2326      	movs	r3, #38	; 0x26
    1448:	5cf3      	ldrb	r3, [r6, r3]
    144a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    144c:	6873      	ldr	r3, [r6, #4]
    144e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1450:	2b00      	cmp	r3, #0
    1452:	d100      	bne.n	1456 <usart_init+0xfe>
    1454:	e0a0      	b.n	1598 <usart_init+0x240>
    1456:	2380      	movs	r3, #128	; 0x80
    1458:	055b      	lsls	r3, r3, #21
    145a:	4599      	cmp	r9, r3
    145c:	d100      	bne.n	1460 <usart_init+0x108>
    145e:	e084      	b.n	156a <usart_init+0x212>
	if(config->encoding_format_enable) {
    1460:	7e73      	ldrb	r3, [r6, #25]
    1462:	2b00      	cmp	r3, #0
    1464:	d002      	beq.n	146c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1466:	7eb3      	ldrb	r3, [r6, #26]
    1468:	4642      	mov	r2, r8
    146a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    146c:	682a      	ldr	r2, [r5, #0]
    146e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1470:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1472:	2b00      	cmp	r3, #0
    1474:	d1fc      	bne.n	1470 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1476:	330e      	adds	r3, #14
    1478:	aa06      	add	r2, sp, #24
    147a:	4694      	mov	ip, r2
    147c:	4463      	add	r3, ip
    147e:	881b      	ldrh	r3, [r3, #0]
    1480:	4642      	mov	r2, r8
    1482:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1484:	9b05      	ldr	r3, [sp, #20]
    1486:	9a03      	ldr	r2, [sp, #12]
    1488:	4313      	orrs	r3, r2
    148a:	9a04      	ldr	r2, [sp, #16]
    148c:	4313      	orrs	r3, r2
    148e:	464a      	mov	r2, r9
    1490:	4313      	orrs	r3, r2
    1492:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1494:	465b      	mov	r3, fp
    1496:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1498:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    149a:	4653      	mov	r3, sl
    149c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    149e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    14a0:	2327      	movs	r3, #39	; 0x27
    14a2:	5cf3      	ldrb	r3, [r6, r3]
    14a4:	2b00      	cmp	r3, #0
    14a6:	d101      	bne.n	14ac <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    14a8:	3304      	adds	r3, #4
    14aa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14ac:	7e73      	ldrb	r3, [r6, #25]
    14ae:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14b0:	7f32      	ldrb	r2, [r6, #28]
    14b2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    14b4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14b6:	7f72      	ldrb	r2, [r6, #29]
    14b8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    14ba:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14bc:	2224      	movs	r2, #36	; 0x24
    14be:	5cb2      	ldrb	r2, [r6, r2]
    14c0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    14c2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    14c4:	2225      	movs	r2, #37	; 0x25
    14c6:	5cb2      	ldrb	r2, [r6, r2]
    14c8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    14ca:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    14cc:	7ab1      	ldrb	r1, [r6, #10]
    14ce:	7af2      	ldrb	r2, [r6, #11]
    14d0:	4311      	orrs	r1, r2
    14d2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    14d4:	8933      	ldrh	r3, [r6, #8]
    14d6:	2bff      	cmp	r3, #255	; 0xff
    14d8:	d100      	bne.n	14dc <usart_init+0x184>
    14da:	e081      	b.n	15e0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	0452      	lsls	r2, r2, #17
    14e0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    14e2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    14e4:	232c      	movs	r3, #44	; 0x2c
    14e6:	5cf3      	ldrb	r3, [r6, r3]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d103      	bne.n	14f4 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14ec:	4b62      	ldr	r3, [pc, #392]	; (1678 <usart_init+0x320>)
    14ee:	789b      	ldrb	r3, [r3, #2]
    14f0:	079b      	lsls	r3, r3, #30
    14f2:	d501      	bpl.n	14f8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14f4:	2380      	movs	r3, #128	; 0x80
    14f6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    14f8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14fa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14fc:	2b00      	cmp	r3, #0
    14fe:	d1fc      	bne.n	14fa <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1500:	4643      	mov	r3, r8
    1502:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1504:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1506:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1508:	2b00      	cmp	r3, #0
    150a:	d1fc      	bne.n	1506 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    150c:	4643      	mov	r3, r8
    150e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1510:	ab0e      	add	r3, sp, #56	; 0x38
    1512:	2280      	movs	r2, #128	; 0x80
    1514:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1516:	2200      	movs	r2, #0
    1518:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    151a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    151c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    151e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1520:	930a      	str	r3, [sp, #40]	; 0x28
    1522:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1524:	930b      	str	r3, [sp, #44]	; 0x2c
    1526:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1528:	930c      	str	r3, [sp, #48]	; 0x30
    152a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    152c:	9302      	str	r3, [sp, #8]
    152e:	930d      	str	r3, [sp, #52]	; 0x34
    1530:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1532:	ae0a      	add	r6, sp, #40	; 0x28
    1534:	e063      	b.n	15fe <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1536:	2308      	movs	r3, #8
    1538:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    153a:	3b07      	subs	r3, #7
    153c:	9307      	str	r3, [sp, #28]
    153e:	e77a      	b.n	1436 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1540:	6833      	ldr	r3, [r6, #0]
    1542:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1544:	68f3      	ldr	r3, [r6, #12]
    1546:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1548:	6973      	ldr	r3, [r6, #20]
    154a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    154c:	7e33      	ldrb	r3, [r6, #24]
    154e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1550:	2326      	movs	r3, #38	; 0x26
    1552:	5cf3      	ldrb	r3, [r6, r3]
    1554:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1556:	6873      	ldr	r3, [r6, #4]
    1558:	4699      	mov	r9, r3
	switch (transfer_mode)
    155a:	2b00      	cmp	r3, #0
    155c:	d018      	beq.n	1590 <usart_init+0x238>
    155e:	2380      	movs	r3, #128	; 0x80
    1560:	055b      	lsls	r3, r3, #21
    1562:	4599      	cmp	r9, r3
    1564:	d001      	beq.n	156a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1566:	2000      	movs	r0, #0
    1568:	e025      	b.n	15b6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    156a:	2327      	movs	r3, #39	; 0x27
    156c:	5cf3      	ldrb	r3, [r6, r3]
    156e:	2b00      	cmp	r3, #0
    1570:	d000      	beq.n	1574 <usart_init+0x21c>
    1572:	e775      	b.n	1460 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1574:	6a33      	ldr	r3, [r6, #32]
    1576:	001f      	movs	r7, r3
    1578:	b2c0      	uxtb	r0, r0
    157a:	4b40      	ldr	r3, [pc, #256]	; (167c <usart_init+0x324>)
    157c:	4798      	blx	r3
    157e:	0001      	movs	r1, r0
    1580:	220e      	movs	r2, #14
    1582:	ab06      	add	r3, sp, #24
    1584:	469c      	mov	ip, r3
    1586:	4462      	add	r2, ip
    1588:	0038      	movs	r0, r7
    158a:	4b3d      	ldr	r3, [pc, #244]	; (1680 <usart_init+0x328>)
    158c:	4798      	blx	r3
    158e:	e012      	b.n	15b6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1590:	2308      	movs	r3, #8
    1592:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1594:	2300      	movs	r3, #0
    1596:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1598:	2327      	movs	r3, #39	; 0x27
    159a:	5cf3      	ldrb	r3, [r6, r3]
    159c:	2b00      	cmp	r3, #0
    159e:	d00e      	beq.n	15be <usart_init+0x266>
				status_code =
    15a0:	9b06      	ldr	r3, [sp, #24]
    15a2:	9300      	str	r3, [sp, #0]
    15a4:	9b07      	ldr	r3, [sp, #28]
    15a6:	220e      	movs	r2, #14
    15a8:	a906      	add	r1, sp, #24
    15aa:	468c      	mov	ip, r1
    15ac:	4462      	add	r2, ip
    15ae:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    15b0:	6a30      	ldr	r0, [r6, #32]
    15b2:	4f34      	ldr	r7, [pc, #208]	; (1684 <usart_init+0x32c>)
    15b4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    15b6:	2800      	cmp	r0, #0
    15b8:	d000      	beq.n	15bc <usart_init+0x264>
    15ba:	e6e0      	b.n	137e <usart_init+0x26>
    15bc:	e750      	b.n	1460 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    15be:	6a33      	ldr	r3, [r6, #32]
    15c0:	001f      	movs	r7, r3
    15c2:	b2c0      	uxtb	r0, r0
    15c4:	4b2d      	ldr	r3, [pc, #180]	; (167c <usart_init+0x324>)
    15c6:	4798      	blx	r3
    15c8:	0001      	movs	r1, r0
				status_code =
    15ca:	9b06      	ldr	r3, [sp, #24]
    15cc:	9300      	str	r3, [sp, #0]
    15ce:	9b07      	ldr	r3, [sp, #28]
    15d0:	220e      	movs	r2, #14
    15d2:	a806      	add	r0, sp, #24
    15d4:	4684      	mov	ip, r0
    15d6:	4462      	add	r2, ip
    15d8:	0038      	movs	r0, r7
    15da:	4f2a      	ldr	r7, [pc, #168]	; (1684 <usart_init+0x32c>)
    15dc:	47b8      	blx	r7
    15de:	e7ea      	b.n	15b6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    15e0:	7ef3      	ldrb	r3, [r6, #27]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d100      	bne.n	15e8 <usart_init+0x290>
    15e6:	e77d      	b.n	14e4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    15e8:	2380      	movs	r3, #128	; 0x80
    15ea:	04db      	lsls	r3, r3, #19
    15ec:	431f      	orrs	r7, r3
    15ee:	e779      	b.n	14e4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15f0:	0020      	movs	r0, r4
    15f2:	4b25      	ldr	r3, [pc, #148]	; (1688 <usart_init+0x330>)
    15f4:	4798      	blx	r3
    15f6:	e007      	b.n	1608 <usart_init+0x2b0>
    15f8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    15fa:	2f04      	cmp	r7, #4
    15fc:	d00d      	beq.n	161a <usart_init+0x2c2>
    15fe:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1600:	00bb      	lsls	r3, r7, #2
    1602:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1604:	2800      	cmp	r0, #0
    1606:	d0f3      	beq.n	15f0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1608:	1c43      	adds	r3, r0, #1
    160a:	d0f5      	beq.n	15f8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    160c:	a90e      	add	r1, sp, #56	; 0x38
    160e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1610:	0c00      	lsrs	r0, r0, #16
    1612:	b2c0      	uxtb	r0, r0
    1614:	4b1d      	ldr	r3, [pc, #116]	; (168c <usart_init+0x334>)
    1616:	4798      	blx	r3
    1618:	e7ee      	b.n	15f8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    161a:	2300      	movs	r3, #0
    161c:	60eb      	str	r3, [r5, #12]
    161e:	612b      	str	r3, [r5, #16]
    1620:	616b      	str	r3, [r5, #20]
    1622:	61ab      	str	r3, [r5, #24]
    1624:	61eb      	str	r3, [r5, #28]
    1626:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1628:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    162a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    162c:	2200      	movs	r2, #0
    162e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1630:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1632:	3330      	adds	r3, #48	; 0x30
    1634:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1636:	3301      	adds	r3, #1
    1638:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    163a:	3301      	adds	r3, #1
    163c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    163e:	3301      	adds	r3, #1
    1640:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1642:	6828      	ldr	r0, [r5, #0]
    1644:	4b07      	ldr	r3, [pc, #28]	; (1664 <usart_init+0x30c>)
    1646:	4798      	blx	r3
    1648:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    164a:	4911      	ldr	r1, [pc, #68]	; (1690 <usart_init+0x338>)
    164c:	4b11      	ldr	r3, [pc, #68]	; (1694 <usart_init+0x33c>)
    164e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1650:	00a4      	lsls	r4, r4, #2
    1652:	4b11      	ldr	r3, [pc, #68]	; (1698 <usart_init+0x340>)
    1654:	50e5      	str	r5, [r4, r3]
	return status_code;
    1656:	2000      	movs	r0, #0
    1658:	e691      	b.n	137e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    165a:	2310      	movs	r3, #16
    165c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    165e:	2300      	movs	r3, #0
    1660:	9307      	str	r3, [sp, #28]
    1662:	e6e8      	b.n	1436 <usart_init+0xde>
    1664:	00004d11 	.word	0x00004d11
    1668:	40000400 	.word	0x40000400
    166c:	0000612d 	.word	0x0000612d
    1670:	000060a1 	.word	0x000060a1
    1674:	00004b4d 	.word	0x00004b4d
    1678:	41002000 	.word	0x41002000
    167c:	00006149 	.word	0x00006149
    1680:	00004a8f 	.word	0x00004a8f
    1684:	00004ab9 	.word	0x00004ab9
    1688:	00004b99 	.word	0x00004b99
    168c:	00006225 	.word	0x00006225
    1690:	00001739 	.word	0x00001739
    1694:	0000128d 	.word	0x0000128d
    1698:	200002c0 	.word	0x200002c0

0000169c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    169c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    169e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    16a0:	2a00      	cmp	r2, #0
    16a2:	d101      	bne.n	16a8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    16a4:	0018      	movs	r0, r3
    16a6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    16a8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    16aa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    16ac:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    16ae:	2a00      	cmp	r2, #0
    16b0:	d1f8      	bne.n	16a4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    16b2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    16b4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    16b6:	2a00      	cmp	r2, #0
    16b8:	d1fc      	bne.n	16b4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    16ba:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    16bc:	2102      	movs	r1, #2
    16be:	7e1a      	ldrb	r2, [r3, #24]
    16c0:	420a      	tst	r2, r1
    16c2:	d0fc      	beq.n	16be <usart_write_wait+0x22>
	return STATUS_OK;
    16c4:	2300      	movs	r3, #0
    16c6:	e7ed      	b.n	16a4 <usart_write_wait+0x8>

000016c8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    16c8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    16ca:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    16cc:	2a00      	cmp	r2, #0
    16ce:	d101      	bne.n	16d4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    16d0:	0018      	movs	r0, r3
    16d2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    16d4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    16d6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    16d8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    16da:	2a00      	cmp	r2, #0
    16dc:	d1f8      	bne.n	16d0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    16de:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16e0:	7e10      	ldrb	r0, [r2, #24]
    16e2:	0740      	lsls	r0, r0, #29
    16e4:	d5f4      	bpl.n	16d0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    16e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    16e8:	2b00      	cmp	r3, #0
    16ea:	d1fc      	bne.n	16e6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16ec:	8b53      	ldrh	r3, [r2, #26]
    16ee:	b2db      	uxtb	r3, r3
	if (error_code) {
    16f0:	0698      	lsls	r0, r3, #26
    16f2:	d01d      	beq.n	1730 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16f4:	0798      	lsls	r0, r3, #30
    16f6:	d503      	bpl.n	1700 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16f8:	2302      	movs	r3, #2
    16fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    16fc:	3318      	adds	r3, #24
    16fe:	e7e7      	b.n	16d0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1700:	0758      	lsls	r0, r3, #29
    1702:	d503      	bpl.n	170c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1704:	2304      	movs	r3, #4
    1706:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1708:	331a      	adds	r3, #26
    170a:	e7e1      	b.n	16d0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    170c:	07d8      	lsls	r0, r3, #31
    170e:	d503      	bpl.n	1718 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1710:	2301      	movs	r3, #1
    1712:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1714:	3312      	adds	r3, #18
    1716:	e7db      	b.n	16d0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1718:	06d8      	lsls	r0, r3, #27
    171a:	d503      	bpl.n	1724 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    171c:	2310      	movs	r3, #16
    171e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1720:	3332      	adds	r3, #50	; 0x32
    1722:	e7d5      	b.n	16d0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1724:	069b      	lsls	r3, r3, #26
    1726:	d503      	bpl.n	1730 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1728:	2320      	movs	r3, #32
    172a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    172c:	3321      	adds	r3, #33	; 0x21
    172e:	e7cf      	b.n	16d0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1730:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1732:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1734:	2300      	movs	r3, #0
    1736:	e7cb      	b.n	16d0 <usart_read_wait+0x8>

00001738 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    173a:	0080      	lsls	r0, r0, #2
    173c:	4b62      	ldr	r3, [pc, #392]	; (18c8 <_usart_interrupt_handler+0x190>)
    173e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1740:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1742:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1744:	2b00      	cmp	r3, #0
    1746:	d1fc      	bne.n	1742 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1748:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    174a:	7da6      	ldrb	r6, [r4, #22]
    174c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    174e:	2330      	movs	r3, #48	; 0x30
    1750:	5ceb      	ldrb	r3, [r5, r3]
    1752:	2231      	movs	r2, #49	; 0x31
    1754:	5caf      	ldrb	r7, [r5, r2]
    1756:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1758:	07f3      	lsls	r3, r6, #31
    175a:	d522      	bpl.n	17a2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    175c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    175e:	b29b      	uxth	r3, r3
    1760:	2b00      	cmp	r3, #0
    1762:	d01c      	beq.n	179e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1764:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1766:	7813      	ldrb	r3, [r2, #0]
    1768:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    176a:	1c51      	adds	r1, r2, #1
    176c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    176e:	7969      	ldrb	r1, [r5, #5]
    1770:	2901      	cmp	r1, #1
    1772:	d00e      	beq.n	1792 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1774:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1776:	05db      	lsls	r3, r3, #23
    1778:	0ddb      	lsrs	r3, r3, #23
    177a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    177c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    177e:	3b01      	subs	r3, #1
    1780:	b29b      	uxth	r3, r3
    1782:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1784:	2b00      	cmp	r3, #0
    1786:	d10c      	bne.n	17a2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1788:	3301      	adds	r3, #1
    178a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    178c:	3301      	adds	r3, #1
    178e:	75a3      	strb	r3, [r4, #22]
    1790:	e007      	b.n	17a2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1792:	7851      	ldrb	r1, [r2, #1]
    1794:	0209      	lsls	r1, r1, #8
    1796:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1798:	3202      	adds	r2, #2
    179a:	62aa      	str	r2, [r5, #40]	; 0x28
    179c:	e7eb      	b.n	1776 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    179e:	2301      	movs	r3, #1
    17a0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    17a2:	07b3      	lsls	r3, r6, #30
    17a4:	d506      	bpl.n	17b4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    17a6:	2302      	movs	r3, #2
    17a8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    17aa:	2200      	movs	r2, #0
    17ac:	3331      	adds	r3, #49	; 0x31
    17ae:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    17b0:	07fb      	lsls	r3, r7, #31
    17b2:	d41a      	bmi.n	17ea <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    17b4:	0773      	lsls	r3, r6, #29
    17b6:	d565      	bpl.n	1884 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    17b8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17ba:	b29b      	uxth	r3, r3
    17bc:	2b00      	cmp	r3, #0
    17be:	d05f      	beq.n	1880 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17c0:	8b63      	ldrh	r3, [r4, #26]
    17c2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    17c4:	071a      	lsls	r2, r3, #28
    17c6:	d414      	bmi.n	17f2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17c8:	223f      	movs	r2, #63	; 0x3f
    17ca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    17cc:	2b00      	cmp	r3, #0
    17ce:	d034      	beq.n	183a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    17d0:	079a      	lsls	r2, r3, #30
    17d2:	d511      	bpl.n	17f8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    17d4:	221a      	movs	r2, #26
    17d6:	2332      	movs	r3, #50	; 0x32
    17d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17da:	3b30      	subs	r3, #48	; 0x30
    17dc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    17de:	077b      	lsls	r3, r7, #29
    17e0:	d550      	bpl.n	1884 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    17e2:	0028      	movs	r0, r5
    17e4:	696b      	ldr	r3, [r5, #20]
    17e6:	4798      	blx	r3
    17e8:	e04c      	b.n	1884 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    17ea:	0028      	movs	r0, r5
    17ec:	68eb      	ldr	r3, [r5, #12]
    17ee:	4798      	blx	r3
    17f0:	e7e0      	b.n	17b4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    17f2:	2237      	movs	r2, #55	; 0x37
    17f4:	4013      	ands	r3, r2
    17f6:	e7e9      	b.n	17cc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17f8:	075a      	lsls	r2, r3, #29
    17fa:	d505      	bpl.n	1808 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    17fc:	221e      	movs	r2, #30
    17fe:	2332      	movs	r3, #50	; 0x32
    1800:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1802:	3b2e      	subs	r3, #46	; 0x2e
    1804:	8363      	strh	r3, [r4, #26]
    1806:	e7ea      	b.n	17de <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1808:	07da      	lsls	r2, r3, #31
    180a:	d505      	bpl.n	1818 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    180c:	2213      	movs	r2, #19
    180e:	2332      	movs	r3, #50	; 0x32
    1810:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1812:	3b31      	subs	r3, #49	; 0x31
    1814:	8363      	strh	r3, [r4, #26]
    1816:	e7e2      	b.n	17de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1818:	06da      	lsls	r2, r3, #27
    181a:	d505      	bpl.n	1828 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    181c:	2242      	movs	r2, #66	; 0x42
    181e:	2332      	movs	r3, #50	; 0x32
    1820:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1822:	3b22      	subs	r3, #34	; 0x22
    1824:	8363      	strh	r3, [r4, #26]
    1826:	e7da      	b.n	17de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1828:	2220      	movs	r2, #32
    182a:	421a      	tst	r2, r3
    182c:	d0d7      	beq.n	17de <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    182e:	3221      	adds	r2, #33	; 0x21
    1830:	2332      	movs	r3, #50	; 0x32
    1832:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1834:	3b12      	subs	r3, #18
    1836:	8363      	strh	r3, [r4, #26]
    1838:	e7d1      	b.n	17de <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    183a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    183c:	05db      	lsls	r3, r3, #23
    183e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1840:	b2da      	uxtb	r2, r3
    1842:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1844:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1846:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1848:	1c51      	adds	r1, r2, #1
    184a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    184c:	7969      	ldrb	r1, [r5, #5]
    184e:	2901      	cmp	r1, #1
    1850:	d010      	beq.n	1874 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1852:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1854:	3b01      	subs	r3, #1
    1856:	b29b      	uxth	r3, r3
    1858:	85ab      	strh	r3, [r5, #44]	; 0x2c
    185a:	2b00      	cmp	r3, #0
    185c:	d112      	bne.n	1884 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    185e:	3304      	adds	r3, #4
    1860:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1862:	2200      	movs	r2, #0
    1864:	332e      	adds	r3, #46	; 0x2e
    1866:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1868:	07bb      	lsls	r3, r7, #30
    186a:	d50b      	bpl.n	1884 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    186c:	0028      	movs	r0, r5
    186e:	692b      	ldr	r3, [r5, #16]
    1870:	4798      	blx	r3
    1872:	e007      	b.n	1884 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1874:	0a1b      	lsrs	r3, r3, #8
    1876:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1878:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    187a:	3301      	adds	r3, #1
    187c:	626b      	str	r3, [r5, #36]	; 0x24
    187e:	e7e8      	b.n	1852 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1880:	2304      	movs	r3, #4
    1882:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1884:	06f3      	lsls	r3, r6, #27
    1886:	d504      	bpl.n	1892 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1888:	2310      	movs	r3, #16
    188a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    188c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    188e:	06fb      	lsls	r3, r7, #27
    1890:	d40e      	bmi.n	18b0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1892:	06b3      	lsls	r3, r6, #26
    1894:	d504      	bpl.n	18a0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1896:	2320      	movs	r3, #32
    1898:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    189a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    189c:	073b      	lsls	r3, r7, #28
    189e:	d40b      	bmi.n	18b8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    18a0:	0733      	lsls	r3, r6, #28
    18a2:	d504      	bpl.n	18ae <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    18a4:	2308      	movs	r3, #8
    18a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    18a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    18aa:	06bb      	lsls	r3, r7, #26
    18ac:	d408      	bmi.n	18c0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    18ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    18b0:	0028      	movs	r0, r5
    18b2:	69eb      	ldr	r3, [r5, #28]
    18b4:	4798      	blx	r3
    18b6:	e7ec      	b.n	1892 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    18b8:	0028      	movs	r0, r5
    18ba:	69ab      	ldr	r3, [r5, #24]
    18bc:	4798      	blx	r3
    18be:	e7ef      	b.n	18a0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    18c0:	6a2b      	ldr	r3, [r5, #32]
    18c2:	0028      	movs	r0, r5
    18c4:	4798      	blx	r3
}
    18c6:	e7f2      	b.n	18ae <_usart_interrupt_handler+0x176>
    18c8:	200002c0 	.word	0x200002c0

000018cc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    18cc:	b510      	push	{r4, lr}
	switch (clock_source) {
    18ce:	2808      	cmp	r0, #8
    18d0:	d803      	bhi.n	18da <system_clock_source_get_hz+0xe>
    18d2:	0080      	lsls	r0, r0, #2
    18d4:	4b1e      	ldr	r3, [pc, #120]	; (1950 <system_clock_source_get_hz+0x84>)
    18d6:	581b      	ldr	r3, [r3, r0]
    18d8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    18da:	2000      	movs	r0, #0
    18dc:	e036      	b.n	194c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    18de:	4b1d      	ldr	r3, [pc, #116]	; (1954 <system_clock_source_get_hz+0x88>)
    18e0:	6918      	ldr	r0, [r3, #16]
    18e2:	e033      	b.n	194c <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    18e4:	4b1c      	ldr	r3, [pc, #112]	; (1958 <system_clock_source_get_hz+0x8c>)
    18e6:	6a1b      	ldr	r3, [r3, #32]
    18e8:	059b      	lsls	r3, r3, #22
    18ea:	0f9b      	lsrs	r3, r3, #30
    18ec:	481b      	ldr	r0, [pc, #108]	; (195c <system_clock_source_get_hz+0x90>)
    18ee:	40d8      	lsrs	r0, r3
    18f0:	e02c      	b.n	194c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    18f2:	4b18      	ldr	r3, [pc, #96]	; (1954 <system_clock_source_get_hz+0x88>)
    18f4:	6958      	ldr	r0, [r3, #20]
    18f6:	e029      	b.n	194c <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    18f8:	4b16      	ldr	r3, [pc, #88]	; (1954 <system_clock_source_get_hz+0x88>)
    18fa:	681b      	ldr	r3, [r3, #0]
			return 0;
    18fc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    18fe:	079b      	lsls	r3, r3, #30
    1900:	d524      	bpl.n	194c <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1902:	4915      	ldr	r1, [pc, #84]	; (1958 <system_clock_source_get_hz+0x8c>)
    1904:	2210      	movs	r2, #16
    1906:	68cb      	ldr	r3, [r1, #12]
    1908:	421a      	tst	r2, r3
    190a:	d0fc      	beq.n	1906 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    190c:	4b11      	ldr	r3, [pc, #68]	; (1954 <system_clock_source_get_hz+0x88>)
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	075b      	lsls	r3, r3, #29
    1912:	d401      	bmi.n	1918 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1914:	4812      	ldr	r0, [pc, #72]	; (1960 <system_clock_source_get_hz+0x94>)
    1916:	e019      	b.n	194c <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    1918:	4b0e      	ldr	r3, [pc, #56]	; (1954 <system_clock_source_get_hz+0x88>)
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	069b      	lsls	r3, r3, #26
    191e:	d501      	bpl.n	1924 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    1920:	480f      	ldr	r0, [pc, #60]	; (1960 <system_clock_source_get_hz+0x94>)
    1922:	e013      	b.n	194c <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1924:	2000      	movs	r0, #0
    1926:	4b0f      	ldr	r3, [pc, #60]	; (1964 <system_clock_source_get_hz+0x98>)
    1928:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    192a:	4b0a      	ldr	r3, [pc, #40]	; (1954 <system_clock_source_get_hz+0x88>)
    192c:	689b      	ldr	r3, [r3, #8]
    192e:	041b      	lsls	r3, r3, #16
    1930:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1932:	4358      	muls	r0, r3
    1934:	e00a      	b.n	194c <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1936:	2350      	movs	r3, #80	; 0x50
    1938:	4a07      	ldr	r2, [pc, #28]	; (1958 <system_clock_source_get_hz+0x8c>)
    193a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    193c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    193e:	075b      	lsls	r3, r3, #29
    1940:	d504      	bpl.n	194c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    1942:	4b04      	ldr	r3, [pc, #16]	; (1954 <system_clock_source_get_hz+0x88>)
    1944:	68d8      	ldr	r0, [r3, #12]
    1946:	e001      	b.n	194c <system_clock_source_get_hz+0x80>
		return 32768UL;
    1948:	2080      	movs	r0, #128	; 0x80
    194a:	0200      	lsls	r0, r0, #8
	}
}
    194c:	bd10      	pop	{r4, pc}
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	00007a58 	.word	0x00007a58
    1954:	2000017c 	.word	0x2000017c
    1958:	40000800 	.word	0x40000800
    195c:	007a1200 	.word	0x007a1200
    1960:	02dc6c00 	.word	0x02dc6c00
    1964:	00006149 	.word	0x00006149

00001968 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1968:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    196a:	490c      	ldr	r1, [pc, #48]	; (199c <system_clock_source_osc8m_set_config+0x34>)
    196c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    196e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1970:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1972:	7840      	ldrb	r0, [r0, #1]
    1974:	2201      	movs	r2, #1
    1976:	4010      	ands	r0, r2
    1978:	0180      	lsls	r0, r0, #6
    197a:	2640      	movs	r6, #64	; 0x40
    197c:	43b3      	bics	r3, r6
    197e:	4303      	orrs	r3, r0
    1980:	402a      	ands	r2, r5
    1982:	01d2      	lsls	r2, r2, #7
    1984:	2080      	movs	r0, #128	; 0x80
    1986:	4383      	bics	r3, r0
    1988:	4313      	orrs	r3, r2
    198a:	2203      	movs	r2, #3
    198c:	4022      	ands	r2, r4
    198e:	0212      	lsls	r2, r2, #8
    1990:	4803      	ldr	r0, [pc, #12]	; (19a0 <system_clock_source_osc8m_set_config+0x38>)
    1992:	4003      	ands	r3, r0
    1994:	4313      	orrs	r3, r2
    1996:	620b      	str	r3, [r1, #32]
}
    1998:	bd70      	pop	{r4, r5, r6, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	40000800 	.word	0x40000800
    19a0:	fffffcff 	.word	0xfffffcff

000019a4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    19a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a6:	46ce      	mov	lr, r9
    19a8:	4647      	mov	r7, r8
    19aa:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    19ac:	4b19      	ldr	r3, [pc, #100]	; (1a14 <system_clock_source_osc32k_set_config+0x70>)
    19ae:	4699      	mov	r9, r3
    19b0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    19b2:	7841      	ldrb	r1, [r0, #1]
    19b4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    19b6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    19b8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    19ba:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    19bc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    19be:	7880      	ldrb	r0, [r0, #2]
    19c0:	2101      	movs	r1, #1
    19c2:	4008      	ands	r0, r1
    19c4:	0080      	lsls	r0, r0, #2
    19c6:	2204      	movs	r2, #4
    19c8:	4393      	bics	r3, r2
    19ca:	4303      	orrs	r3, r0
    19cc:	4660      	mov	r0, ip
    19ce:	4008      	ands	r0, r1
    19d0:	00c0      	lsls	r0, r0, #3
    19d2:	3204      	adds	r2, #4
    19d4:	4393      	bics	r3, r2
    19d6:	4303      	orrs	r3, r0
    19d8:	0038      	movs	r0, r7
    19da:	4008      	ands	r0, r1
    19dc:	0180      	lsls	r0, r0, #6
    19de:	2740      	movs	r7, #64	; 0x40
    19e0:	43bb      	bics	r3, r7
    19e2:	4303      	orrs	r3, r0
    19e4:	0030      	movs	r0, r6
    19e6:	4008      	ands	r0, r1
    19e8:	01c0      	lsls	r0, r0, #7
    19ea:	2680      	movs	r6, #128	; 0x80
    19ec:	43b3      	bics	r3, r6
    19ee:	4303      	orrs	r3, r0
    19f0:	2007      	movs	r0, #7
    19f2:	4005      	ands	r5, r0
    19f4:	022d      	lsls	r5, r5, #8
    19f6:	4808      	ldr	r0, [pc, #32]	; (1a18 <system_clock_source_osc32k_set_config+0x74>)
    19f8:	4003      	ands	r3, r0
    19fa:	432b      	orrs	r3, r5
    19fc:	4021      	ands	r1, r4
    19fe:	0309      	lsls	r1, r1, #12
    1a00:	4806      	ldr	r0, [pc, #24]	; (1a1c <system_clock_source_osc32k_set_config+0x78>)
    1a02:	4003      	ands	r3, r0
    1a04:	430b      	orrs	r3, r1
    1a06:	464a      	mov	r2, r9
    1a08:	6193      	str	r3, [r2, #24]
}
    1a0a:	bc0c      	pop	{r2, r3}
    1a0c:	4690      	mov	r8, r2
    1a0e:	4699      	mov	r9, r3
    1a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	40000800 	.word	0x40000800
    1a18:	fffff8ff 	.word	0xfffff8ff
    1a1c:	ffffefff 	.word	0xffffefff

00001a20 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a22:	46de      	mov	lr, fp
    1a24:	4657      	mov	r7, sl
    1a26:	464e      	mov	r6, r9
    1a28:	4645      	mov	r5, r8
    1a2a:	b5e0      	push	{r5, r6, r7, lr}
    1a2c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1a2e:	4b26      	ldr	r3, [pc, #152]	; (1ac8 <system_clock_source_xosc32k_set_config+0xa8>)
    1a30:	469b      	mov	fp, r3
    1a32:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1a34:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1a36:	7800      	ldrb	r0, [r0, #0]
    1a38:	4242      	negs	r2, r0
    1a3a:	4142      	adcs	r2, r0
    1a3c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1a3e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1a40:	78ca      	ldrb	r2, [r1, #3]
    1a42:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1a44:	790a      	ldrb	r2, [r1, #4]
    1a46:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1a48:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a4a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1a4c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1a4e:	688a      	ldr	r2, [r1, #8]
    1a50:	491e      	ldr	r1, [pc, #120]	; (1acc <system_clock_source_xosc32k_set_config+0xac>)
    1a52:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1a54:	2101      	movs	r1, #1
    1a56:	464a      	mov	r2, r9
    1a58:	0092      	lsls	r2, r2, #2
    1a5a:	4691      	mov	r9, r2
    1a5c:	2204      	movs	r2, #4
    1a5e:	4393      	bics	r3, r2
    1a60:	464a      	mov	r2, r9
    1a62:	4313      	orrs	r3, r2
    1a64:	4642      	mov	r2, r8
    1a66:	400a      	ands	r2, r1
    1a68:	00d2      	lsls	r2, r2, #3
    1a6a:	4690      	mov	r8, r2
    1a6c:	2208      	movs	r2, #8
    1a6e:	4393      	bics	r3, r2
    1a70:	4642      	mov	r2, r8
    1a72:	4313      	orrs	r3, r2
    1a74:	4662      	mov	r2, ip
    1a76:	400a      	ands	r2, r1
    1a78:	0112      	lsls	r2, r2, #4
    1a7a:	4694      	mov	ip, r2
    1a7c:	2210      	movs	r2, #16
    1a7e:	4393      	bics	r3, r2
    1a80:	4662      	mov	r2, ip
    1a82:	4313      	orrs	r3, r2
    1a84:	4008      	ands	r0, r1
    1a86:	0140      	lsls	r0, r0, #5
    1a88:	2220      	movs	r2, #32
    1a8a:	4393      	bics	r3, r2
    1a8c:	4303      	orrs	r3, r0
    1a8e:	400f      	ands	r7, r1
    1a90:	01bf      	lsls	r7, r7, #6
    1a92:	2040      	movs	r0, #64	; 0x40
    1a94:	4383      	bics	r3, r0
    1a96:	433b      	orrs	r3, r7
    1a98:	400e      	ands	r6, r1
    1a9a:	01f6      	lsls	r6, r6, #7
    1a9c:	3040      	adds	r0, #64	; 0x40
    1a9e:	4383      	bics	r3, r0
    1aa0:	4333      	orrs	r3, r6
    1aa2:	3879      	subs	r0, #121	; 0x79
    1aa4:	4005      	ands	r5, r0
    1aa6:	022d      	lsls	r5, r5, #8
    1aa8:	4809      	ldr	r0, [pc, #36]	; (1ad0 <system_clock_source_xosc32k_set_config+0xb0>)
    1aaa:	4003      	ands	r3, r0
    1aac:	432b      	orrs	r3, r5
    1aae:	4021      	ands	r1, r4
    1ab0:	0309      	lsls	r1, r1, #12
    1ab2:	4808      	ldr	r0, [pc, #32]	; (1ad4 <system_clock_source_xosc32k_set_config+0xb4>)
    1ab4:	4003      	ands	r3, r0
    1ab6:	430b      	orrs	r3, r1
    1ab8:	465a      	mov	r2, fp
    1aba:	8293      	strh	r3, [r2, #20]
}
    1abc:	bc3c      	pop	{r2, r3, r4, r5}
    1abe:	4690      	mov	r8, r2
    1ac0:	4699      	mov	r9, r3
    1ac2:	46a2      	mov	sl, r4
    1ac4:	46ab      	mov	fp, r5
    1ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ac8:	40000800 	.word	0x40000800
    1acc:	2000017c 	.word	0x2000017c
    1ad0:	fffff8ff 	.word	0xfffff8ff
    1ad4:	ffffefff 	.word	0xffffefff

00001ad8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1ad8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1ada:	7a03      	ldrb	r3, [r0, #8]
    1adc:	069b      	lsls	r3, r3, #26
    1ade:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1ae0:	8942      	ldrh	r2, [r0, #10]
    1ae2:	0592      	lsls	r2, r2, #22
    1ae4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1ae6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1ae8:	4918      	ldr	r1, [pc, #96]	; (1b4c <system_clock_source_dfll_set_config+0x74>)
    1aea:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1aec:	7983      	ldrb	r3, [r0, #6]
    1aee:	79c2      	ldrb	r2, [r0, #7]
    1af0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1af2:	8842      	ldrh	r2, [r0, #2]
    1af4:	8884      	ldrh	r4, [r0, #4]
    1af6:	4322      	orrs	r2, r4
    1af8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1afa:	7842      	ldrb	r2, [r0, #1]
    1afc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1afe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1b00:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1b02:	7803      	ldrb	r3, [r0, #0]
    1b04:	2b04      	cmp	r3, #4
    1b06:	d011      	beq.n	1b2c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1b08:	2b20      	cmp	r3, #32
    1b0a:	d10e      	bne.n	1b2a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1b0c:	7b03      	ldrb	r3, [r0, #12]
    1b0e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1b10:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1b12:	4313      	orrs	r3, r2
    1b14:	89c2      	ldrh	r2, [r0, #14]
    1b16:	0412      	lsls	r2, r2, #16
    1b18:	490d      	ldr	r1, [pc, #52]	; (1b50 <system_clock_source_dfll_set_config+0x78>)
    1b1a:	400a      	ands	r2, r1
    1b1c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1b1e:	4a0b      	ldr	r2, [pc, #44]	; (1b4c <system_clock_source_dfll_set_config+0x74>)
    1b20:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1b22:	6811      	ldr	r1, [r2, #0]
    1b24:	4b0b      	ldr	r3, [pc, #44]	; (1b54 <system_clock_source_dfll_set_config+0x7c>)
    1b26:	430b      	orrs	r3, r1
    1b28:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1b2a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1b2c:	7b03      	ldrb	r3, [r0, #12]
    1b2e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1b30:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1b32:	4313      	orrs	r3, r2
    1b34:	89c2      	ldrh	r2, [r0, #14]
    1b36:	0412      	lsls	r2, r2, #16
    1b38:	4905      	ldr	r1, [pc, #20]	; (1b50 <system_clock_source_dfll_set_config+0x78>)
    1b3a:	400a      	ands	r2, r1
    1b3c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1b3e:	4a03      	ldr	r2, [pc, #12]	; (1b4c <system_clock_source_dfll_set_config+0x74>)
    1b40:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1b42:	6813      	ldr	r3, [r2, #0]
    1b44:	2104      	movs	r1, #4
    1b46:	430b      	orrs	r3, r1
    1b48:	6013      	str	r3, [r2, #0]
    1b4a:	e7ee      	b.n	1b2a <system_clock_source_dfll_set_config+0x52>
    1b4c:	2000017c 	.word	0x2000017c
    1b50:	03ff0000 	.word	0x03ff0000
    1b54:	00000424 	.word	0x00000424

00001b58 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1b58:	2808      	cmp	r0, #8
    1b5a:	d803      	bhi.n	1b64 <system_clock_source_enable+0xc>
    1b5c:	0080      	lsls	r0, r0, #2
    1b5e:	4b25      	ldr	r3, [pc, #148]	; (1bf4 <system_clock_source_enable+0x9c>)
    1b60:	581b      	ldr	r3, [r3, r0]
    1b62:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1b64:	2017      	movs	r0, #23
    1b66:	e044      	b.n	1bf2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1b68:	4a23      	ldr	r2, [pc, #140]	; (1bf8 <system_clock_source_enable+0xa0>)
    1b6a:	6a13      	ldr	r3, [r2, #32]
    1b6c:	2102      	movs	r1, #2
    1b6e:	430b      	orrs	r3, r1
    1b70:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1b72:	2000      	movs	r0, #0
    1b74:	e03d      	b.n	1bf2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b76:	4a20      	ldr	r2, [pc, #128]	; (1bf8 <system_clock_source_enable+0xa0>)
    1b78:	6993      	ldr	r3, [r2, #24]
    1b7a:	2102      	movs	r1, #2
    1b7c:	430b      	orrs	r3, r1
    1b7e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1b80:	2000      	movs	r0, #0
		break;
    1b82:	e036      	b.n	1bf2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b84:	4a1c      	ldr	r2, [pc, #112]	; (1bf8 <system_clock_source_enable+0xa0>)
    1b86:	8a13      	ldrh	r3, [r2, #16]
    1b88:	2102      	movs	r1, #2
    1b8a:	430b      	orrs	r3, r1
    1b8c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1b8e:	2000      	movs	r0, #0
		break;
    1b90:	e02f      	b.n	1bf2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1b92:	4a19      	ldr	r2, [pc, #100]	; (1bf8 <system_clock_source_enable+0xa0>)
    1b94:	8a93      	ldrh	r3, [r2, #20]
    1b96:	2102      	movs	r1, #2
    1b98:	430b      	orrs	r3, r1
    1b9a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1b9c:	2000      	movs	r0, #0
		break;
    1b9e:	e028      	b.n	1bf2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1ba0:	4916      	ldr	r1, [pc, #88]	; (1bfc <system_clock_source_enable+0xa4>)
    1ba2:	680b      	ldr	r3, [r1, #0]
    1ba4:	2202      	movs	r2, #2
    1ba6:	4313      	orrs	r3, r2
    1ba8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1baa:	4b13      	ldr	r3, [pc, #76]	; (1bf8 <system_clock_source_enable+0xa0>)
    1bac:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bae:	0019      	movs	r1, r3
    1bb0:	320e      	adds	r2, #14
    1bb2:	68cb      	ldr	r3, [r1, #12]
    1bb4:	421a      	tst	r2, r3
    1bb6:	d0fc      	beq.n	1bb2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1bb8:	4a10      	ldr	r2, [pc, #64]	; (1bfc <system_clock_source_enable+0xa4>)
    1bba:	6891      	ldr	r1, [r2, #8]
    1bbc:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <system_clock_source_enable+0xa0>)
    1bbe:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1bc0:	6852      	ldr	r2, [r2, #4]
    1bc2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1bc4:	2200      	movs	r2, #0
    1bc6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bc8:	0019      	movs	r1, r3
    1bca:	3210      	adds	r2, #16
    1bcc:	68cb      	ldr	r3, [r1, #12]
    1bce:	421a      	tst	r2, r3
    1bd0:	d0fc      	beq.n	1bcc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1bd2:	4b0a      	ldr	r3, [pc, #40]	; (1bfc <system_clock_source_enable+0xa4>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	b29b      	uxth	r3, r3
    1bd8:	4a07      	ldr	r2, [pc, #28]	; (1bf8 <system_clock_source_enable+0xa0>)
    1bda:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1bdc:	2000      	movs	r0, #0
    1bde:	e008      	b.n	1bf2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1be0:	4905      	ldr	r1, [pc, #20]	; (1bf8 <system_clock_source_enable+0xa0>)
    1be2:	2244      	movs	r2, #68	; 0x44
    1be4:	5c8b      	ldrb	r3, [r1, r2]
    1be6:	2002      	movs	r0, #2
    1be8:	4303      	orrs	r3, r0
    1bea:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1bec:	2000      	movs	r0, #0
		break;
    1bee:	e000      	b.n	1bf2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1bf0:	2000      	movs	r0, #0
}
    1bf2:	4770      	bx	lr
    1bf4:	00007a7c 	.word	0x00007a7c
    1bf8:	40000800 	.word	0x40000800
    1bfc:	2000017c 	.word	0x2000017c

00001c00 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	46ce      	mov	lr, r9
    1c04:	4647      	mov	r7, r8
    1c06:	b580      	push	{r7, lr}
    1c08:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1c0a:	22c2      	movs	r2, #194	; 0xc2
    1c0c:	00d2      	lsls	r2, r2, #3
    1c0e:	4b5a      	ldr	r3, [pc, #360]	; (1d78 <system_clock_init+0x178>)
    1c10:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1c12:	4a5a      	ldr	r2, [pc, #360]	; (1d7c <system_clock_init+0x17c>)
    1c14:	6853      	ldr	r3, [r2, #4]
    1c16:	211e      	movs	r1, #30
    1c18:	438b      	bics	r3, r1
    1c1a:	391a      	subs	r1, #26
    1c1c:	430b      	orrs	r3, r1
    1c1e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1c20:	2202      	movs	r2, #2
    1c22:	ab01      	add	r3, sp, #4
    1c24:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c26:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1c28:	4d55      	ldr	r5, [pc, #340]	; (1d80 <system_clock_init+0x180>)
    1c2a:	b2e0      	uxtb	r0, r4
    1c2c:	a901      	add	r1, sp, #4
    1c2e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1c30:	3401      	adds	r4, #1
    1c32:	2c25      	cmp	r4, #37	; 0x25
    1c34:	d1f9      	bne.n	1c2a <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1c36:	a80c      	add	r0, sp, #48	; 0x30
    1c38:	2300      	movs	r3, #0
    1c3a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1c3c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1c3e:	2280      	movs	r2, #128	; 0x80
    1c40:	0212      	lsls	r2, r2, #8
    1c42:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1c44:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1c46:	2201      	movs	r2, #1
    1c48:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1c4a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1c4c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1c4e:	3205      	adds	r2, #5
    1c50:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1c52:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1c54:	4b4b      	ldr	r3, [pc, #300]	; (1d84 <system_clock_init+0x184>)
    1c56:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1c58:	2005      	movs	r0, #5
    1c5a:	4b4b      	ldr	r3, [pc, #300]	; (1d88 <system_clock_init+0x188>)
    1c5c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1c5e:	4946      	ldr	r1, [pc, #280]	; (1d78 <system_clock_init+0x178>)
    1c60:	2202      	movs	r2, #2
    1c62:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1c64:	421a      	tst	r2, r3
    1c66:	d0fc      	beq.n	1c62 <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1c68:	4943      	ldr	r1, [pc, #268]	; (1d78 <system_clock_init+0x178>)
    1c6a:	8a8b      	ldrh	r3, [r1, #20]
    1c6c:	2280      	movs	r2, #128	; 0x80
    1c6e:	4313      	orrs	r3, r2
    1c70:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1c72:	4c46      	ldr	r4, [pc, #280]	; (1d8c <system_clock_init+0x18c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    1c74:	6823      	ldr	r3, [r4, #0]
    1c76:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    1c78:	698a      	ldr	r2, [r1, #24]
    1c7a:	0e5b      	lsrs	r3, r3, #25
    1c7c:	041b      	lsls	r3, r3, #16
    1c7e:	4844      	ldr	r0, [pc, #272]	; (1d90 <system_clock_init+0x190>)
    1c80:	4002      	ands	r2, r0
    1c82:	4313      	orrs	r3, r2
    1c84:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    1c86:	a80a      	add	r0, sp, #40	; 0x28
    1c88:	2301      	movs	r3, #1
    1c8a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1c8c:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    1c8e:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1c90:	2207      	movs	r2, #7
    1c92:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    1c94:	2500      	movs	r5, #0
    1c96:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    1c98:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1c9a:	4b3e      	ldr	r3, [pc, #248]	; (1d94 <system_clock_init+0x194>)
    1c9c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1c9e:	2004      	movs	r0, #4
    1ca0:	4b39      	ldr	r3, [pc, #228]	; (1d88 <system_clock_init+0x188>)
    1ca2:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1ca4:	ab05      	add	r3, sp, #20
    1ca6:	2200      	movs	r2, #0
    1ca8:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1caa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1cac:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1cae:	2120      	movs	r1, #32
    1cb0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1cb2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1cb8:	2b3f      	cmp	r3, #63	; 0x3f
    1cba:	d05a      	beq.n	1d72 <system_clock_init+0x172>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1cbc:	a805      	add	r0, sp, #20
    1cbe:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1cc0:	2307      	movs	r3, #7
    1cc2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    1cc4:	3303      	adds	r3, #3
    1cc6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    1cc8:	4b33      	ldr	r3, [pc, #204]	; (1d98 <system_clock_init+0x198>)
    1cca:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    1ccc:	3bff      	subs	r3, #255	; 0xff
    1cce:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    1cd0:	4b32      	ldr	r3, [pc, #200]	; (1d9c <system_clock_init+0x19c>)
    1cd2:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1cd4:	4b32      	ldr	r3, [pc, #200]	; (1da0 <system_clock_init+0x1a0>)
    1cd6:	4798      	blx	r3
	config->run_in_standby  = false;
    1cd8:	a804      	add	r0, sp, #16
    1cda:	2500      	movs	r5, #0
    1cdc:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1cde:	2601      	movs	r6, #1
    1ce0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1ce2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1ce4:	4b2f      	ldr	r3, [pc, #188]	; (1da4 <system_clock_init+0x1a4>)
    1ce6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ce8:	2006      	movs	r0, #6
    1cea:	4f27      	ldr	r7, [pc, #156]	; (1d88 <system_clock_init+0x188>)
    1cec:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1cee:	4b2e      	ldr	r3, [pc, #184]	; (1da8 <system_clock_init+0x1a8>)
    1cf0:	4798      	blx	r3
	config->division_factor    = 1;
    1cf2:	ac01      	add	r4, sp, #4
    1cf4:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1cf6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1cf8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1cfa:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1cfc:	2305      	movs	r3, #5
    1cfe:	7023      	strb	r3, [r4, #0]
    1d00:	0021      	movs	r1, r4
    1d02:	2001      	movs	r0, #1
    1d04:	4b29      	ldr	r3, [pc, #164]	; (1dac <system_clock_init+0x1ac>)
    1d06:	4699      	mov	r9, r3
    1d08:	4798      	blx	r3
    1d0a:	2001      	movs	r0, #1
    1d0c:	4b28      	ldr	r3, [pc, #160]	; (1db0 <system_clock_init+0x1b0>)
    1d0e:	4698      	mov	r8, r3
    1d10:	4798      	blx	r3
	config->division_factor    = 1;
    1d12:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1d14:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    1d16:	7265      	strb	r5, [r4, #9]
    1d18:	2304      	movs	r3, #4
    1d1a:	7023      	strb	r3, [r4, #0]
    1d1c:	7226      	strb	r6, [r4, #8]
    1d1e:	0021      	movs	r1, r4
    1d20:	2007      	movs	r0, #7
    1d22:	47c8      	blx	r9
    1d24:	2007      	movs	r0, #7
    1d26:	47c0      	blx	r8
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1d28:	2007      	movs	r0, #7
    1d2a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d2c:	4912      	ldr	r1, [pc, #72]	; (1d78 <system_clock_init+0x178>)
    1d2e:	2210      	movs	r2, #16
    1d30:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1d32:	421a      	tst	r2, r3
    1d34:	d0fc      	beq.n	1d30 <system_clock_init+0x130>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    1d36:	4a10      	ldr	r2, [pc, #64]	; (1d78 <system_clock_init+0x178>)
    1d38:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1d3a:	2180      	movs	r1, #128	; 0x80
    1d3c:	430b      	orrs	r3, r1
    1d3e:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    1d40:	4a1c      	ldr	r2, [pc, #112]	; (1db4 <system_clock_init+0x1b4>)
    1d42:	2300      	movs	r3, #0
    1d44:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1d46:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1d48:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1d4a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1d4c:	a901      	add	r1, sp, #4
    1d4e:	2201      	movs	r2, #1
    1d50:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1d52:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    1d54:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1d56:	3307      	adds	r3, #7
    1d58:	700b      	strb	r3, [r1, #0]
    1d5a:	720a      	strb	r2, [r1, #8]
    1d5c:	2000      	movs	r0, #0
    1d5e:	4b13      	ldr	r3, [pc, #76]	; (1dac <system_clock_init+0x1ac>)
    1d60:	4798      	blx	r3
    1d62:	2000      	movs	r0, #0
    1d64:	4b12      	ldr	r3, [pc, #72]	; (1db0 <system_clock_init+0x1b0>)
    1d66:	4798      	blx	r3
#endif
}
    1d68:	b011      	add	sp, #68	; 0x44
    1d6a:	bc0c      	pop	{r2, r3}
    1d6c:	4690      	mov	r8, r2
    1d6e:	4699      	mov	r9, r3
    1d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1d72:	3b20      	subs	r3, #32
    1d74:	e7a2      	b.n	1cbc <system_clock_init+0xbc>
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	40000800 	.word	0x40000800
    1d7c:	41004000 	.word	0x41004000
    1d80:	0000612d 	.word	0x0000612d
    1d84:	00001a21 	.word	0x00001a21
    1d88:	00001b59 	.word	0x00001b59
    1d8c:	00806024 	.word	0x00806024
    1d90:	ff80ffff 	.word	0xff80ffff
    1d94:	000019a5 	.word	0x000019a5
    1d98:	000001ff 	.word	0x000001ff
    1d9c:	ffffbb80 	.word	0xffffbb80
    1da0:	00001ad9 	.word	0x00001ad9
    1da4:	00001969 	.word	0x00001969
    1da8:	00005ef5 	.word	0x00005ef5
    1dac:	00005f19 	.word	0x00005f19
    1db0:	00005fd1 	.word	0x00005fd1
    1db4:	40000400 	.word	0x40000400

00001db8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dba:	46c6      	mov	lr, r8
    1dbc:	b500      	push	{lr}
    1dbe:	000c      	movs	r4, r1
    1dc0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1dc2:	2800      	cmp	r0, #0
    1dc4:	d10f      	bne.n	1de6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1dc6:	2a00      	cmp	r2, #0
    1dc8:	dd11      	ble.n	1dee <_read+0x36>
    1dca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1dcc:	4e09      	ldr	r6, [pc, #36]	; (1df4 <_read+0x3c>)
    1dce:	4d0a      	ldr	r5, [pc, #40]	; (1df8 <_read+0x40>)
    1dd0:	6830      	ldr	r0, [r6, #0]
    1dd2:	0021      	movs	r1, r4
    1dd4:	682b      	ldr	r3, [r5, #0]
    1dd6:	4798      	blx	r3
		ptr++;
    1dd8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1dda:	42bc      	cmp	r4, r7
    1ddc:	d1f8      	bne.n	1dd0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1dde:	4640      	mov	r0, r8
    1de0:	bc04      	pop	{r2}
    1de2:	4690      	mov	r8, r2
    1de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1de6:	2301      	movs	r3, #1
    1de8:	425b      	negs	r3, r3
    1dea:	4698      	mov	r8, r3
    1dec:	e7f7      	b.n	1dde <_read+0x26>
	for (; len > 0; --len) {
    1dee:	4680      	mov	r8, r0
    1df0:	e7f5      	b.n	1dde <_read+0x26>
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	200002e0 	.word	0x200002e0
    1df8:	200002d8 	.word	0x200002d8

00001dfc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dfe:	46c6      	mov	lr, r8
    1e00:	b500      	push	{lr}
    1e02:	000e      	movs	r6, r1
    1e04:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1e06:	3801      	subs	r0, #1
    1e08:	2802      	cmp	r0, #2
    1e0a:	d810      	bhi.n	1e2e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1e0c:	2a00      	cmp	r2, #0
    1e0e:	d011      	beq.n	1e34 <_write+0x38>
    1e10:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1e12:	4b0c      	ldr	r3, [pc, #48]	; (1e44 <_write+0x48>)
    1e14:	4698      	mov	r8, r3
    1e16:	4f0c      	ldr	r7, [pc, #48]	; (1e48 <_write+0x4c>)
    1e18:	4643      	mov	r3, r8
    1e1a:	6818      	ldr	r0, [r3, #0]
    1e1c:	5d31      	ldrb	r1, [r6, r4]
    1e1e:	683b      	ldr	r3, [r7, #0]
    1e20:	4798      	blx	r3
    1e22:	2800      	cmp	r0, #0
    1e24:	db08      	blt.n	1e38 <_write+0x3c>
			return -1;
		}
		++nChars;
    1e26:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1e28:	42a5      	cmp	r5, r4
    1e2a:	d1f5      	bne.n	1e18 <_write+0x1c>
    1e2c:	e006      	b.n	1e3c <_write+0x40>
		return -1;
    1e2e:	2401      	movs	r4, #1
    1e30:	4264      	negs	r4, r4
    1e32:	e003      	b.n	1e3c <_write+0x40>
	for (; len != 0; --len) {
    1e34:	0014      	movs	r4, r2
    1e36:	e001      	b.n	1e3c <_write+0x40>
			return -1;
    1e38:	2401      	movs	r4, #1
    1e3a:	4264      	negs	r4, r4
	}
	return nChars;
}
    1e3c:	0020      	movs	r0, r4
    1e3e:	bc04      	pop	{r2}
    1e40:	4690      	mov	r8, r2
    1e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e44:	200002e0 	.word	0x200002e0
    1e48:	200002dc 	.word	0x200002dc

00001e4c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    1e4c:	b530      	push	{r4, r5, lr}
    1e4e:	b087      	sub	sp, #28
    1e50:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1e52:	aa01      	add	r2, sp, #4
    1e54:	23a0      	movs	r3, #160	; 0xa0
    1e56:	011b      	lsls	r3, r3, #4
    1e58:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    1e5a:	2300      	movs	r3, #0
    1e5c:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1e5e:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    1e60:	21fa      	movs	r1, #250	; 0xfa
    1e62:	00c9      	lsls	r1, r1, #3
    1e64:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    1e66:	2101      	movs	r1, #1
    1e68:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    1e6a:	2004      	movs	r0, #4
    1e6c:	7210      	strb	r0, [r2, #8]
    1e6e:	7253      	strb	r3, [r2, #9]
    1e70:	7293      	strb	r3, [r2, #10]
    1e72:	72d3      	strb	r3, [r2, #11]
    1e74:	7311      	strb	r1, [r2, #12]
    1e76:	7351      	strb	r1, [r2, #13]
    1e78:	4b14      	ldr	r3, [pc, #80]	; (1ecc <disk_initialize+0x80>)
    1e7a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1e7c:	2306      	movs	r3, #6
    1e7e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    1e80:	4d13      	ldr	r5, [pc, #76]	; (1ed0 <disk_initialize+0x84>)
    1e82:	4914      	ldr	r1, [pc, #80]	; (1ed4 <disk_initialize+0x88>)
    1e84:	0028      	movs	r0, r5
    1e86:	4b14      	ldr	r3, [pc, #80]	; (1ed8 <disk_initialize+0x8c>)
    1e88:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    1e8a:	0028      	movs	r0, r5
    1e8c:	4b13      	ldr	r3, [pc, #76]	; (1edc <disk_initialize+0x90>)
    1e8e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    1e90:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    1e92:	2c01      	cmp	r4, #1
    1e94:	d901      	bls.n	1e9a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    1e96:	b007      	add	sp, #28
    1e98:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    1e9a:	0020      	movs	r0, r4
    1e9c:	4b10      	ldr	r3, [pc, #64]	; (1ee0 <disk_initialize+0x94>)
    1e9e:	4798      	blx	r3
    1ea0:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    1ea2:	2803      	cmp	r0, #3
    1ea4:	d106      	bne.n	1eb4 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    1ea6:	0020      	movs	r0, r4
    1ea8:	4b0d      	ldr	r3, [pc, #52]	; (1ee0 <disk_initialize+0x94>)
    1eaa:	4798      	blx	r3
    1eac:	0003      	movs	r3, r0
		return STA_NOINIT;
    1eae:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    1eb0:	2b03      	cmp	r3, #3
    1eb2:	d0f0      	beq.n	1e96 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d106      	bne.n	1ec6 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    1eb8:	0020      	movs	r0, r4
    1eba:	4b0a      	ldr	r3, [pc, #40]	; (1ee4 <disk_initialize+0x98>)
    1ebc:	4798      	blx	r3
	return 0;
    1ebe:	1e43      	subs	r3, r0, #1
    1ec0:	4198      	sbcs	r0, r3
    1ec2:	0080      	lsls	r0, r0, #2
    1ec4:	e7e7      	b.n	1e96 <disk_initialize+0x4a>
		return STA_NOINIT;
    1ec6:	2001      	movs	r0, #1
    1ec8:	e7e5      	b.n	1e96 <disk_initialize+0x4a>
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	000007de 	.word	0x000007de
    1ed0:	200002e4 	.word	0x200002e4
    1ed4:	40001400 	.word	0x40001400
    1ed8:	000010b1 	.word	0x000010b1
    1edc:	00000f55 	.word	0x00000f55
    1ee0:	00005d6d 	.word	0x00005d6d
    1ee4:	00005da9 	.word	0x00005da9

00001ee8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    1ee8:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <disk_status+0x18>)
    1eec:	4798      	blx	r3
    1eee:	1e03      	subs	r3, r0, #0
    1ef0:	d004      	beq.n	1efc <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    1ef2:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    1ef4:	2b02      	cmp	r3, #2
    1ef6:	d000      	beq.n	1efa <disk_status+0x12>
	default:
		return STA_NOINIT;
    1ef8:	3802      	subs	r0, #2
	}
}
    1efa:	bd10      	pop	{r4, pc}
		return 0;
    1efc:	2000      	movs	r0, #0
    1efe:	e7fc      	b.n	1efa <disk_status+0x12>
    1f00:	00005d6d 	.word	0x00005d6d

00001f04 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    1f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f06:	46de      	mov	lr, fp
    1f08:	464f      	mov	r7, r9
    1f0a:	4646      	mov	r6, r8
    1f0c:	b5c0      	push	{r6, r7, lr}
    1f0e:	b084      	sub	sp, #16
    1f10:	9001      	str	r0, [sp, #4]
    1f12:	000d      	movs	r5, r1
    1f14:	0014      	movs	r4, r2
    1f16:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    1f18:	4b18      	ldr	r3, [pc, #96]	; (1f7c <disk_read+0x78>)
    1f1a:	4798      	blx	r3
    1f1c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    1f1e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    1f20:	2e00      	cmp	r6, #0
    1f22:	d105      	bne.n	1f30 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    1f24:	b004      	add	sp, #16
    1f26:	bc1c      	pop	{r2, r3, r4}
    1f28:	4690      	mov	r8, r2
    1f2a:	4699      	mov	r9, r3
    1f2c:	46a3      	mov	fp, r4
    1f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    1f30:	a903      	add	r1, sp, #12
    1f32:	9801      	ldr	r0, [sp, #4]
    1f34:	4b12      	ldr	r3, [pc, #72]	; (1f80 <disk_read+0x7c>)
    1f36:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    1f38:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    1f3a:	0032      	movs	r2, r6
    1f3c:	437a      	muls	r2, r7
    1f3e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    1f40:	9b03      	ldr	r3, [sp, #12]
    1f42:	3301      	adds	r3, #1
    1f44:	4373      	muls	r3, r6
		return RES_PARERR;
    1f46:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    1f48:	429a      	cmp	r2, r3
    1f4a:	d8eb      	bhi.n	1f24 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    1f4c:	2f00      	cmp	r7, #0
    1f4e:	d011      	beq.n	1f74 <disk_read+0x70>
    1f50:	0273      	lsls	r3, r6, #9
    1f52:	4698      	mov	r8, r3
    1f54:	1c7b      	adds	r3, r7, #1
    1f56:	469b      	mov	fp, r3
    1f58:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    1f5a:	4e0a      	ldr	r6, [pc, #40]	; (1f84 <disk_read+0x80>)
    1f5c:	002a      	movs	r2, r5
    1f5e:	0021      	movs	r1, r4
    1f60:	9801      	ldr	r0, [sp, #4]
    1f62:	47b0      	blx	r6
    1f64:	2800      	cmp	r0, #0
    1f66:	d107      	bne.n	1f78 <disk_read+0x74>
    1f68:	3701      	adds	r7, #1
    1f6a:	444c      	add	r4, r9
    1f6c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    1f6e:	455f      	cmp	r7, fp
    1f70:	d1f4      	bne.n	1f5c <disk_read+0x58>
    1f72:	e7d7      	b.n	1f24 <disk_read+0x20>
	return RES_OK;
    1f74:	2000      	movs	r0, #0
    1f76:	e7d5      	b.n	1f24 <disk_read+0x20>
			return RES_ERROR;
    1f78:	2001      	movs	r0, #1
    1f7a:	e7d3      	b.n	1f24 <disk_read+0x20>
    1f7c:	00005da1 	.word	0x00005da1
    1f80:	00005d85 	.word	0x00005d85
    1f84:	00005dc1 	.word	0x00005dc1

00001f88 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    1f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f8a:	46de      	mov	lr, fp
    1f8c:	464f      	mov	r7, r9
    1f8e:	4646      	mov	r6, r8
    1f90:	b5c0      	push	{r6, r7, lr}
    1f92:	b084      	sub	sp, #16
    1f94:	9001      	str	r0, [sp, #4]
    1f96:	000d      	movs	r5, r1
    1f98:	0014      	movs	r4, r2
    1f9a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    1f9c:	4b18      	ldr	r3, [pc, #96]	; (2000 <STACK_SIZE>)
    1f9e:	4798      	blx	r3
    1fa0:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    1fa2:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    1fa4:	2e00      	cmp	r6, #0
    1fa6:	d105      	bne.n	1fb4 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    1fa8:	b004      	add	sp, #16
    1faa:	bc1c      	pop	{r2, r3, r4}
    1fac:	4690      	mov	r8, r2
    1fae:	4699      	mov	r9, r3
    1fb0:	46a3      	mov	fp, r4
    1fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    1fb4:	a903      	add	r1, sp, #12
    1fb6:	9801      	ldr	r0, [sp, #4]
    1fb8:	4b12      	ldr	r3, [pc, #72]	; (2004 <STACK_SIZE+0x4>)
    1fba:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    1fbc:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    1fbe:	0032      	movs	r2, r6
    1fc0:	437a      	muls	r2, r7
    1fc2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    1fc4:	9b03      	ldr	r3, [sp, #12]
    1fc6:	3301      	adds	r3, #1
    1fc8:	4373      	muls	r3, r6
		return RES_PARERR;
    1fca:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    1fcc:	429a      	cmp	r2, r3
    1fce:	d8eb      	bhi.n	1fa8 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    1fd0:	2f00      	cmp	r7, #0
    1fd2:	d011      	beq.n	1ff8 <disk_write+0x70>
    1fd4:	0273      	lsls	r3, r6, #9
    1fd6:	4698      	mov	r8, r3
    1fd8:	1c7b      	adds	r3, r7, #1
    1fda:	469b      	mov	fp, r3
    1fdc:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    1fde:	4e0a      	ldr	r6, [pc, #40]	; (2008 <STACK_SIZE+0x8>)
    1fe0:	002a      	movs	r2, r5
    1fe2:	0021      	movs	r1, r4
    1fe4:	9801      	ldr	r0, [sp, #4]
    1fe6:	47b0      	blx	r6
    1fe8:	2800      	cmp	r0, #0
    1fea:	d107      	bne.n	1ffc <disk_write+0x74>
    1fec:	3701      	adds	r7, #1
    1fee:	444c      	add	r4, r9
    1ff0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    1ff2:	455f      	cmp	r7, fp
    1ff4:	d1f4      	bne.n	1fe0 <disk_write+0x58>
    1ff6:	e7d7      	b.n	1fa8 <disk_write+0x20>
	return RES_OK;
    1ff8:	2000      	movs	r0, #0
    1ffa:	e7d5      	b.n	1fa8 <disk_write+0x20>
			return RES_ERROR;
    1ffc:	2001      	movs	r0, #1
    1ffe:	e7d3      	b.n	1fa8 <disk_write+0x20>
    2000:	00005da1 	.word	0x00005da1
    2004:	00005d85 	.word	0x00005d85
    2008:	00005df5 	.word	0x00005df5

0000200c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    200c:	b510      	push	{r4, lr}
    200e:	b082      	sub	sp, #8
    2010:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    2012:	2901      	cmp	r1, #1
    2014:	d00b      	beq.n	202e <disk_ioctl+0x22>
    2016:	2900      	cmp	r1, #0
    2018:	d020      	beq.n	205c <disk_ioctl+0x50>
    201a:	2902      	cmp	r1, #2
    201c:	d00f      	beq.n	203e <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    201e:	2004      	movs	r0, #4
	switch (ctrl) {
    2020:	2903      	cmp	r1, #3
    2022:	d102      	bne.n	202a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    2024:	2301      	movs	r3, #1
    2026:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    2028:	2000      	movs	r0, #0
	}

	return res;
}
    202a:	b002      	add	sp, #8
    202c:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    202e:	a901      	add	r1, sp, #4
    2030:	4b0e      	ldr	r3, [pc, #56]	; (206c <disk_ioctl+0x60>)
    2032:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    2034:	9b01      	ldr	r3, [sp, #4]
    2036:	3301      	adds	r3, #1
    2038:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    203a:	2000      	movs	r0, #0
	break;
    203c:	e7f5      	b.n	202a <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    203e:	4b0c      	ldr	r3, [pc, #48]	; (2070 <disk_ioctl+0x64>)
    2040:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    2042:	1e43      	subs	r3, r0, #1
    2044:	b2db      	uxtb	r3, r3
    2046:	2b01      	cmp	r3, #1
    2048:	d904      	bls.n	2054 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    204a:	1f03      	subs	r3, r0, #4
    204c:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    204e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    2050:	4213      	tst	r3, r2
    2052:	d1ea      	bne.n	202a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    2054:	2300      	movs	r3, #0
    2056:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    2058:	2000      	movs	r0, #0
	break;
    205a:	e7e6      	b.n	202a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    205c:	4b05      	ldr	r3, [pc, #20]	; (2074 <disk_ioctl+0x68>)
    205e:	4798      	blx	r3
    2060:	2800      	cmp	r0, #0
    2062:	d001      	beq.n	2068 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    2064:	2003      	movs	r0, #3
    2066:	e7e0      	b.n	202a <disk_ioctl+0x1e>
			res = RES_OK;
    2068:	2000      	movs	r0, #0
    206a:	e7de      	b.n	202a <disk_ioctl+0x1e>
    206c:	00005d85 	.word	0x00005d85
    2070:	00005da1 	.word	0x00005da1
    2074:	00005d6d 	.word	0x00005d6d

00002078 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    2078:	b500      	push	{lr}
    207a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    207c:	4669      	mov	r1, sp
    207e:	480f      	ldr	r0, [pc, #60]	; (20bc <get_fattime+0x44>)
    2080:	4b0f      	ldr	r3, [pc, #60]	; (20c0 <get_fattime+0x48>)
    2082:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    2084:	466b      	mov	r3, sp
    2086:	7958      	ldrb	r0, [r3, #5]
    2088:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    208a:	791b      	ldrb	r3, [r3, #4]
    208c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    208e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    2090:	466b      	mov	r3, sp
    2092:	789b      	ldrb	r3, [r3, #2]
    2094:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    2096:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    2098:	466b      	mov	r3, sp
    209a:	785b      	ldrb	r3, [r3, #1]
    209c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    209e:	4318      	orrs	r0, r3
    20a0:	466b      	mov	r3, sp
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	085b      	lsrs	r3, r3, #1
    20a6:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    20a8:	466b      	mov	r3, sp
    20aa:	88db      	ldrh	r3, [r3, #6]
    20ac:	4a05      	ldr	r2, [pc, #20]	; (20c4 <get_fattime+0x4c>)
    20ae:	4694      	mov	ip, r2
    20b0:	4463      	add	r3, ip
    20b2:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    20b4:	4318      	orrs	r0, r3

	return ul_time;
}
    20b6:	b003      	add	sp, #12
    20b8:	bd00      	pop	{pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	200002e4 	.word	0x200002e4
    20c0:	00001039 	.word	0x00001039
    20c4:	fffff844 	.word	0xfffff844

000020c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    20c8:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    20ca:	2a00      	cmp	r2, #0
    20cc:	d005      	beq.n	20da <mem_cpy+0x12>
    20ce:	2300      	movs	r3, #0
		*d++ = *s++;
    20d0:	5ccc      	ldrb	r4, [r1, r3]
    20d2:	54c4      	strb	r4, [r0, r3]
    20d4:	3301      	adds	r3, #1
	while (cnt--)
    20d6:	4293      	cmp	r3, r2
    20d8:	d1fa      	bne.n	20d0 <mem_cpy+0x8>
}
    20da:	bd10      	pop	{r4, pc}

000020dc <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    20dc:	2a00      	cmp	r2, #0
    20de:	d005      	beq.n	20ec <mem_set+0x10>
    20e0:	0003      	movs	r3, r0
    20e2:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    20e4:	7019      	strb	r1, [r3, #0]
    20e6:	3301      	adds	r3, #1
	while (cnt--)
    20e8:	4293      	cmp	r3, r2
    20ea:	d1fb      	bne.n	20e4 <mem_set+0x8>
}
    20ec:	4770      	bx	lr

000020ee <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    20ee:	0002      	movs	r2, r0
	clst -= 2;
    20f0:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    20f2:	6983      	ldr	r3, [r0, #24]
    20f4:	3b02      	subs	r3, #2
    20f6:	2000      	movs	r0, #0
    20f8:	4299      	cmp	r1, r3
    20fa:	d203      	bcs.n	2104 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    20fc:	7890      	ldrb	r0, [r2, #2]
    20fe:	4341      	muls	r1, r0
    2100:	6a90      	ldr	r0, [r2, #40]	; 0x28
    2102:	1808      	adds	r0, r1, r0
}
    2104:	4770      	bx	lr

00002106 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    2106:	0002      	movs	r2, r0
    2108:	0001      	movs	r1, r0
    210a:	310b      	adds	r1, #11
	BYTE sum = 0;
    210c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    210e:	0843      	lsrs	r3, r0, #1
    2110:	01c0      	lsls	r0, r0, #7
    2112:	4303      	orrs	r3, r0
    2114:	7810      	ldrb	r0, [r2, #0]
    2116:	1818      	adds	r0, r3, r0
    2118:	b2c0      	uxtb	r0, r0
    211a:	3201      	adds	r2, #1
    211c:	428a      	cmp	r2, r1
    211e:	d1f6      	bne.n	210e <sum_sfn+0x8>
	return sum;
}
    2120:	4770      	bx	lr
	...

00002124 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    2124:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    2126:	2800      	cmp	r0, #0
    2128:	d010      	beq.n	214c <validate+0x28>
    212a:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    212c:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    212e:	2a00      	cmp	r2, #0
    2130:	d101      	bne.n	2136 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    2132:	0018      	movs	r0, r3
    2134:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    2136:	88c2      	ldrh	r2, [r0, #6]
    2138:	428a      	cmp	r2, r1
    213a:	d1fa      	bne.n	2132 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    213c:	7840      	ldrb	r0, [r0, #1]
    213e:	4b04      	ldr	r3, [pc, #16]	; (2150 <validate+0x2c>)
    2140:	4798      	blx	r3
		return FR_NOT_READY;
    2142:	2303      	movs	r3, #3
	return FR_OK;
    2144:	07c0      	lsls	r0, r0, #31
    2146:	17c0      	asrs	r0, r0, #31
    2148:	4003      	ands	r3, r0
    214a:	e7f2      	b.n	2132 <validate+0xe>
		return FR_INVALID_OBJECT;
    214c:	2309      	movs	r3, #9
    214e:	e7f0      	b.n	2132 <validate+0xe>
    2150:	00001ee9 	.word	0x00001ee9

00002154 <check_fs>:
{
    2154:	b570      	push	{r4, r5, r6, lr}
    2156:	0004      	movs	r4, r0
    2158:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    215a:	0001      	movs	r1, r0
    215c:	3130      	adds	r1, #48	; 0x30
    215e:	7840      	ldrb	r0, [r0, #1]
    2160:	2301      	movs	r3, #1
    2162:	4d1f      	ldr	r5, [pc, #124]	; (21e0 <check_fs+0x8c>)
    2164:	47a8      	blx	r5
		return 3;
    2166:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2168:	2800      	cmp	r0, #0
    216a:	d001      	beq.n	2170 <check_fs+0x1c>
}
    216c:	0018      	movs	r0, r3
    216e:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2170:	4b1c      	ldr	r3, [pc, #112]	; (21e4 <check_fs+0x90>)
    2172:	5ce3      	ldrb	r3, [r4, r3]
    2174:	021b      	lsls	r3, r3, #8
    2176:	4a1c      	ldr	r2, [pc, #112]	; (21e8 <check_fs+0x94>)
    2178:	5ca2      	ldrb	r2, [r4, r2]
    217a:	431a      	orrs	r2, r3
    217c:	491b      	ldr	r1, [pc, #108]	; (21ec <check_fs+0x98>)
    217e:	b212      	sxth	r2, r2
		return 2;
    2180:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    2182:	428a      	cmp	r2, r1
    2184:	d1f2      	bne.n	216c <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2186:	3367      	adds	r3, #103	; 0x67
    2188:	5ce3      	ldrb	r3, [r4, r3]
    218a:	061b      	lsls	r3, r3, #24
    218c:	2268      	movs	r2, #104	; 0x68
    218e:	5ca2      	ldrb	r2, [r4, r2]
    2190:	0412      	lsls	r2, r2, #16
    2192:	4313      	orrs	r3, r2
    2194:	2266      	movs	r2, #102	; 0x66
    2196:	5ca2      	ldrb	r2, [r4, r2]
    2198:	4313      	orrs	r3, r2
    219a:	2267      	movs	r2, #103	; 0x67
    219c:	5ca2      	ldrb	r2, [r4, r2]
    219e:	0212      	lsls	r2, r2, #8
    21a0:	4313      	orrs	r3, r2
    21a2:	021b      	lsls	r3, r3, #8
    21a4:	0a1b      	lsrs	r3, r3, #8
    21a6:	4a12      	ldr	r2, [pc, #72]	; (21f0 <check_fs+0x9c>)
    21a8:	4293      	cmp	r3, r2
    21aa:	d016      	beq.n	21da <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    21ac:	2385      	movs	r3, #133	; 0x85
    21ae:	5ce3      	ldrb	r3, [r4, r3]
    21b0:	061b      	lsls	r3, r3, #24
    21b2:	2284      	movs	r2, #132	; 0x84
    21b4:	5ca2      	ldrb	r2, [r4, r2]
    21b6:	0412      	lsls	r2, r2, #16
    21b8:	4313      	orrs	r3, r2
    21ba:	2282      	movs	r2, #130	; 0x82
    21bc:	5ca2      	ldrb	r2, [r4, r2]
    21be:	4313      	orrs	r3, r2
    21c0:	2283      	movs	r2, #131	; 0x83
    21c2:	5ca2      	ldrb	r2, [r4, r2]
    21c4:	0212      	lsls	r2, r2, #8
    21c6:	4313      	orrs	r3, r2
    21c8:	021b      	lsls	r3, r3, #8
    21ca:	0a1b      	lsrs	r3, r3, #8
    21cc:	4a09      	ldr	r2, [pc, #36]	; (21f4 <check_fs+0xa0>)
    21ce:	4694      	mov	ip, r2
    21d0:	4463      	add	r3, ip
    21d2:	1e58      	subs	r0, r3, #1
    21d4:	4183      	sbcs	r3, r0
		return 3;
    21d6:	b2db      	uxtb	r3, r3
    21d8:	e7c8      	b.n	216c <check_fs+0x18>
		return 0;
    21da:	2300      	movs	r3, #0
    21dc:	e7c6      	b.n	216c <check_fs+0x18>
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	00001f05 	.word	0x00001f05
    21e4:	0000022f 	.word	0x0000022f
    21e8:	0000022e 	.word	0x0000022e
    21ec:	ffffaa55 	.word	0xffffaa55
    21f0:	00544146 	.word	0x00544146
    21f4:	ffabbeba 	.word	0xffabbeba

000021f8 <chk_mounted>:
{
    21f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fa:	46d6      	mov	lr, sl
    21fc:	464f      	mov	r7, r9
    21fe:	4646      	mov	r6, r8
    2200:	b5c0      	push	{r6, r7, lr}
    2202:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    2204:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    2206:	781c      	ldrb	r4, [r3, #0]
    2208:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    220a:	2c09      	cmp	r4, #9
    220c:	d80e      	bhi.n	222c <chk_mounted+0x34>
    220e:	785a      	ldrb	r2, [r3, #1]
    2210:	2a3a      	cmp	r2, #58	; 0x3a
    2212:	d001      	beq.n	2218 <chk_mounted+0x20>
    2214:	2400      	movs	r4, #0
    2216:	e00a      	b.n	222e <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    2218:	3302      	adds	r3, #2
    221a:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    221c:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    221e:	2c03      	cmp	r4, #3
    2220:	d905      	bls.n	222e <chk_mounted+0x36>
}
    2222:	bc1c      	pop	{r2, r3, r4}
    2224:	4690      	mov	r8, r2
    2226:	4699      	mov	r9, r3
    2228:	46a2      	mov	sl, r4
    222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    222c:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    222e:	00a3      	lsls	r3, r4, #2
    2230:	4ac5      	ldr	r2, [pc, #788]	; (2548 <chk_mounted+0x350>)
    2232:	589e      	ldr	r6, [r3, r2]
    2234:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2236:	2e00      	cmp	r6, #0
    2238:	d100      	bne.n	223c <chk_mounted+0x44>
    223a:	e0e8      	b.n	240e <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    223c:	7833      	ldrb	r3, [r6, #0]
    223e:	2b00      	cmp	r3, #0
    2240:	d00d      	beq.n	225e <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    2242:	7870      	ldrb	r0, [r6, #1]
    2244:	4bc1      	ldr	r3, [pc, #772]	; (254c <chk_mounted+0x354>)
    2246:	4798      	blx	r3
    2248:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    224a:	07c2      	lsls	r2, r0, #31
    224c:	d407      	bmi.n	225e <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    224e:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2250:	2d00      	cmp	r5, #0
    2252:	d0e6      	beq.n	2222 <chk_mounted+0x2a>
    2254:	075b      	lsls	r3, r3, #29
    2256:	d400      	bmi.n	225a <chk_mounted+0x62>
    2258:	e0db      	b.n	2412 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    225a:	300a      	adds	r0, #10
    225c:	e7e1      	b.n	2222 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    225e:	2300      	movs	r3, #0
    2260:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2262:	b2e0      	uxtb	r0, r4
    2264:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    2266:	4bba      	ldr	r3, [pc, #744]	; (2550 <chk_mounted+0x358>)
    2268:	4798      	blx	r3
    226a:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    226c:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    226e:	07da      	lsls	r2, r3, #31
    2270:	d4d7      	bmi.n	2222 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2272:	2d00      	cmp	r5, #0
    2274:	d002      	beq.n	227c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    2276:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2278:	075b      	lsls	r3, r3, #29
    227a:	d4d2      	bmi.n	2222 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    227c:	2100      	movs	r1, #0
    227e:	0030      	movs	r0, r6
    2280:	4bb4      	ldr	r3, [pc, #720]	; (2554 <chk_mounted+0x35c>)
    2282:	4798      	blx	r3
    2284:	0003      	movs	r3, r0
    2286:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    2288:	2801      	cmp	r0, #1
    228a:	d100      	bne.n	228e <chk_mounted+0x96>
    228c:	e09a      	b.n	23c4 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    228e:	2b03      	cmp	r3, #3
    2290:	d100      	bne.n	2294 <chk_mounted+0x9c>
    2292:	e0c0      	b.n	2416 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2294:	200d      	movs	r0, #13
    2296:	2b00      	cmp	r3, #0
    2298:	d1c3      	bne.n	2222 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    229a:	333c      	adds	r3, #60	; 0x3c
    229c:	5cf2      	ldrb	r2, [r6, r3]
    229e:	0212      	lsls	r2, r2, #8
    22a0:	3b01      	subs	r3, #1
    22a2:	5cf3      	ldrb	r3, [r6, r3]
    22a4:	4313      	orrs	r3, r2
    22a6:	2280      	movs	r2, #128	; 0x80
    22a8:	0092      	lsls	r2, r2, #2
    22aa:	b21b      	sxth	r3, r3
    22ac:	4293      	cmp	r3, r2
    22ae:	d1b8      	bne.n	2222 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    22b0:	2347      	movs	r3, #71	; 0x47
    22b2:	5cf3      	ldrb	r3, [r6, r3]
    22b4:	021b      	lsls	r3, r3, #8
    22b6:	3abb      	subs	r2, #187	; 0xbb
    22b8:	3aff      	subs	r2, #255	; 0xff
    22ba:	5cb5      	ldrb	r5, [r6, r2]
    22bc:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    22be:	d10d      	bne.n	22dc <chk_mounted+0xe4>
    22c0:	2357      	movs	r3, #87	; 0x57
    22c2:	5cf5      	ldrb	r5, [r6, r3]
    22c4:	062d      	lsls	r5, r5, #24
    22c6:	3b01      	subs	r3, #1
    22c8:	5cf3      	ldrb	r3, [r6, r3]
    22ca:	041b      	lsls	r3, r3, #16
    22cc:	431d      	orrs	r5, r3
    22ce:	2354      	movs	r3, #84	; 0x54
    22d0:	5cf3      	ldrb	r3, [r6, r3]
    22d2:	431d      	orrs	r5, r3
    22d4:	2355      	movs	r3, #85	; 0x55
    22d6:	5cf3      	ldrb	r3, [r6, r3]
    22d8:	021b      	lsls	r3, r3, #8
    22da:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    22dc:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    22de:	2340      	movs	r3, #64	; 0x40
    22e0:	5cf2      	ldrb	r2, [r6, r3]
    22e2:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    22e4:	1e53      	subs	r3, r2, #1
    22e6:	200d      	movs	r0, #13
    22e8:	2b01      	cmp	r3, #1
    22ea:	d89a      	bhi.n	2222 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    22ec:	233d      	movs	r3, #61	; 0x3d
    22ee:	5cf1      	ldrb	r1, [r6, r3]
    22f0:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    22f2:	2900      	cmp	r1, #0
    22f4:	d095      	beq.n	2222 <chk_mounted+0x2a>
    22f6:	1e4b      	subs	r3, r1, #1
    22f8:	4219      	tst	r1, r3
    22fa:	d192      	bne.n	2222 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    22fc:	2342      	movs	r3, #66	; 0x42
    22fe:	5cf3      	ldrb	r3, [r6, r3]
    2300:	021b      	lsls	r3, r3, #8
    2302:	3034      	adds	r0, #52	; 0x34
    2304:	5c30      	ldrb	r0, [r6, r0]
    2306:	4318      	orrs	r0, r3
    2308:	4680      	mov	r8, r0
    230a:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    230c:	200d      	movs	r0, #13
    230e:	4643      	mov	r3, r8
    2310:	071b      	lsls	r3, r3, #28
    2312:	d000      	beq.n	2316 <chk_mounted+0x11e>
    2314:	e785      	b.n	2222 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2316:	2344      	movs	r3, #68	; 0x44
    2318:	5cf3      	ldrb	r3, [r6, r3]
    231a:	021b      	lsls	r3, r3, #8
    231c:	3036      	adds	r0, #54	; 0x36
    231e:	5c30      	ldrb	r0, [r6, r0]
    2320:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2322:	d10d      	bne.n	2340 <chk_mounted+0x148>
    2324:	3353      	adds	r3, #83	; 0x53
    2326:	5cf3      	ldrb	r3, [r6, r3]
    2328:	061b      	lsls	r3, r3, #24
    232a:	2052      	movs	r0, #82	; 0x52
    232c:	5c30      	ldrb	r0, [r6, r0]
    232e:	0400      	lsls	r0, r0, #16
    2330:	4303      	orrs	r3, r0
    2332:	2050      	movs	r0, #80	; 0x50
    2334:	5c30      	ldrb	r0, [r6, r0]
    2336:	4303      	orrs	r3, r0
    2338:	2051      	movs	r0, #81	; 0x51
    233a:	5c30      	ldrb	r0, [r6, r0]
    233c:	0200      	lsls	r0, r0, #8
    233e:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2340:	203f      	movs	r0, #63	; 0x3f
    2342:	5c30      	ldrb	r0, [r6, r0]
    2344:	0200      	lsls	r0, r0, #8
    2346:	273e      	movs	r7, #62	; 0x3e
    2348:	5df7      	ldrb	r7, [r6, r7]
    234a:	4307      	orrs	r7, r0
    234c:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    234e:	200d      	movs	r0, #13
    2350:	2f00      	cmp	r7, #0
    2352:	d100      	bne.n	2356 <chk_mounted+0x15e>
    2354:	e765      	b.n	2222 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    2356:	436a      	muls	r2, r5
    2358:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    235a:	4642      	mov	r2, r8
    235c:	0917      	lsrs	r7, r2, #4
    235e:	4457      	add	r7, sl
    2360:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2362:	42bb      	cmp	r3, r7
    2364:	d200      	bcs.n	2368 <chk_mounted+0x170>
    2366:	e75c      	b.n	2222 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2368:	1bd8      	subs	r0, r3, r7
    236a:	4b7b      	ldr	r3, [pc, #492]	; (2558 <chk_mounted+0x360>)
    236c:	4798      	blx	r3
    236e:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2370:	200d      	movs	r0, #13
    2372:	2b00      	cmp	r3, #0
    2374:	d100      	bne.n	2378 <chk_mounted+0x180>
    2376:	e754      	b.n	2222 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2378:	4a78      	ldr	r2, [pc, #480]	; (255c <chk_mounted+0x364>)
	fmt = FS_FAT12;
    237a:	429a      	cmp	r2, r3
    237c:	4192      	sbcs	r2, r2
    237e:	4252      	negs	r2, r2
    2380:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2382:	4977      	ldr	r1, [pc, #476]	; (2560 <chk_mounted+0x368>)
    2384:	428b      	cmp	r3, r1
    2386:	d848      	bhi.n	241a <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2388:	3302      	adds	r3, #2
    238a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    238c:	19e7      	adds	r7, r4, r7
    238e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2390:	4454      	add	r4, sl
    2392:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2394:	200d      	movs	r0, #13
    2396:	4641      	mov	r1, r8
    2398:	2900      	cmp	r1, #0
    239a:	d100      	bne.n	239e <chk_mounted+0x1a6>
    239c:	e741      	b.n	2222 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    239e:	444c      	add	r4, r9
    23a0:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    23a2:	2a02      	cmp	r2, #2
    23a4:	d12c      	bne.n	2400 <chk_mounted+0x208>
    23a6:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    23a8:	496e      	ldr	r1, [pc, #440]	; (2564 <chk_mounted+0x36c>)
    23aa:	468c      	mov	ip, r1
    23ac:	4463      	add	r3, ip
    23ae:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    23b0:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    23b2:	429d      	cmp	r5, r3
    23b4:	d200      	bcs.n	23b8 <chk_mounted+0x1c0>
    23b6:	e734      	b.n	2222 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    23b8:	2301      	movs	r3, #1
    23ba:	425b      	negs	r3, r3
    23bc:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    23be:	2300      	movs	r3, #0
    23c0:	60f3      	str	r3, [r6, #12]
    23c2:	e0b6      	b.n	2532 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    23c4:	33f2      	adds	r3, #242	; 0xf2
    23c6:	33ff      	adds	r3, #255	; 0xff
    23c8:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    23ca:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    23cc:	2b00      	cmp	r3, #0
    23ce:	d100      	bne.n	23d2 <chk_mounted+0x1da>
    23d0:	e727      	b.n	2222 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    23d2:	23fa      	movs	r3, #250	; 0xfa
    23d4:	33ff      	adds	r3, #255	; 0xff
    23d6:	5cf4      	ldrb	r4, [r6, r3]
    23d8:	0624      	lsls	r4, r4, #24
    23da:	3b01      	subs	r3, #1
    23dc:	5cf3      	ldrb	r3, [r6, r3]
    23de:	041b      	lsls	r3, r3, #16
    23e0:	431c      	orrs	r4, r3
    23e2:	23fb      	movs	r3, #251	; 0xfb
    23e4:	005b      	lsls	r3, r3, #1
    23e6:	5cf3      	ldrb	r3, [r6, r3]
    23e8:	431c      	orrs	r4, r3
    23ea:	23f8      	movs	r3, #248	; 0xf8
    23ec:	33ff      	adds	r3, #255	; 0xff
    23ee:	5cf2      	ldrb	r2, [r6, r3]
    23f0:	0212      	lsls	r2, r2, #8
    23f2:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    23f4:	0021      	movs	r1, r4
    23f6:	0030      	movs	r0, r6
    23f8:	4b56      	ldr	r3, [pc, #344]	; (2554 <chk_mounted+0x35c>)
    23fa:	4798      	blx	r3
    23fc:	0003      	movs	r3, r0
    23fe:	e746      	b.n	228e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    2400:	2103      	movs	r1, #3
    2402:	4359      	muls	r1, r3
    2404:	0849      	lsrs	r1, r1, #1
    2406:	2001      	movs	r0, #1
    2408:	4003      	ands	r3, r0
    240a:	18cb      	adds	r3, r1, r3
    240c:	e7cc      	b.n	23a8 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    240e:	200c      	movs	r0, #12
    2410:	e707      	b.n	2222 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    2412:	2000      	movs	r0, #0
    2414:	e705      	b.n	2222 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    2416:	2001      	movs	r0, #1
    2418:	e703      	b.n	2222 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    241a:	3302      	adds	r3, #2
    241c:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    241e:	19e7      	adds	r7, r4, r7
    2420:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2422:	4652      	mov	r2, sl
    2424:	18a2      	adds	r2, r4, r2
    2426:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2428:	200d      	movs	r0, #13
    242a:	4642      	mov	r2, r8
    242c:	2a00      	cmp	r2, #0
    242e:	d000      	beq.n	2432 <chk_mounted+0x23a>
    2430:	e6f7      	b.n	2222 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2432:	225f      	movs	r2, #95	; 0x5f
    2434:	5cb2      	ldrb	r2, [r6, r2]
    2436:	0612      	lsls	r2, r2, #24
    2438:	215e      	movs	r1, #94	; 0x5e
    243a:	5c71      	ldrb	r1, [r6, r1]
    243c:	0409      	lsls	r1, r1, #16
    243e:	430a      	orrs	r2, r1
    2440:	215c      	movs	r1, #92	; 0x5c
    2442:	5c71      	ldrb	r1, [r6, r1]
    2444:	430a      	orrs	r2, r1
    2446:	215d      	movs	r1, #93	; 0x5d
    2448:	5c71      	ldrb	r1, [r6, r1]
    244a:	0209      	lsls	r1, r1, #8
    244c:	430a      	orrs	r2, r1
    244e:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    2450:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2452:	4a44      	ldr	r2, [pc, #272]	; (2564 <chk_mounted+0x36c>)
    2454:	4694      	mov	ip, r2
    2456:	4463      	add	r3, ip
    2458:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    245a:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    245c:	429d      	cmp	r5, r3
    245e:	d200      	bcs.n	2462 <chk_mounted+0x26a>
    2460:	e6df      	b.n	2222 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    2462:	2301      	movs	r3, #1
    2464:	425b      	negs	r3, r3
    2466:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    2468:	2300      	movs	r3, #0
    246a:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    246c:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    246e:	3361      	adds	r3, #97	; 0x61
    2470:	5cf3      	ldrb	r3, [r6, r3]
    2472:	021b      	lsls	r3, r3, #8
    2474:	2260      	movs	r2, #96	; 0x60
    2476:	5cb2      	ldrb	r2, [r6, r2]
    2478:	431a      	orrs	r2, r3
    247a:	1912      	adds	r2, r2, r4
    247c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    247e:	0031      	movs	r1, r6
    2480:	3130      	adds	r1, #48	; 0x30
    2482:	7870      	ldrb	r0, [r6, #1]
    2484:	2301      	movs	r3, #1
    2486:	4c38      	ldr	r4, [pc, #224]	; (2568 <chk_mounted+0x370>)
    2488:	47a0      	blx	r4
    248a:	2203      	movs	r2, #3
    248c:	2800      	cmp	r0, #0
    248e:	d150      	bne.n	2532 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    2490:	4b36      	ldr	r3, [pc, #216]	; (256c <chk_mounted+0x374>)
    2492:	5cf2      	ldrb	r2, [r6, r3]
    2494:	0212      	lsls	r2, r2, #8
    2496:	4b36      	ldr	r3, [pc, #216]	; (2570 <chk_mounted+0x378>)
    2498:	5cf3      	ldrb	r3, [r6, r3]
    249a:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    249c:	4935      	ldr	r1, [pc, #212]	; (2574 <chk_mounted+0x37c>)
    249e:	b21b      	sxth	r3, r3
    24a0:	2203      	movs	r2, #3
    24a2:	428b      	cmp	r3, r1
    24a4:	d145      	bne.n	2532 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    24a6:	2333      	movs	r3, #51	; 0x33
    24a8:	5cf3      	ldrb	r3, [r6, r3]
    24aa:	061b      	lsls	r3, r3, #24
    24ac:	322f      	adds	r2, #47	; 0x2f
    24ae:	5cb2      	ldrb	r2, [r6, r2]
    24b0:	0412      	lsls	r2, r2, #16
    24b2:	4313      	orrs	r3, r2
    24b4:	2230      	movs	r2, #48	; 0x30
    24b6:	5cb2      	ldrb	r2, [r6, r2]
    24b8:	4313      	orrs	r3, r2
    24ba:	2231      	movs	r2, #49	; 0x31
    24bc:	5cb2      	ldrb	r2, [r6, r2]
    24be:	0212      	lsls	r2, r2, #8
    24c0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    24c2:	492d      	ldr	r1, [pc, #180]	; (2578 <chk_mounted+0x380>)
    24c4:	2203      	movs	r2, #3
    24c6:	428b      	cmp	r3, r1
    24c8:	d133      	bne.n	2532 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    24ca:	4b2c      	ldr	r3, [pc, #176]	; (257c <chk_mounted+0x384>)
    24cc:	5cf3      	ldrb	r3, [r6, r3]
    24ce:	061b      	lsls	r3, r3, #24
    24d0:	4a2b      	ldr	r2, [pc, #172]	; (2580 <chk_mounted+0x388>)
    24d2:	5cb2      	ldrb	r2, [r6, r2]
    24d4:	0412      	lsls	r2, r2, #16
    24d6:	4313      	orrs	r3, r2
    24d8:	2285      	movs	r2, #133	; 0x85
    24da:	0092      	lsls	r2, r2, #2
    24dc:	5cb2      	ldrb	r2, [r6, r2]
    24de:	4313      	orrs	r3, r2
    24e0:	4a28      	ldr	r2, [pc, #160]	; (2584 <chk_mounted+0x38c>)
    24e2:	5cb2      	ldrb	r2, [r6, r2]
    24e4:	0212      	lsls	r2, r2, #8
    24e6:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    24e8:	4927      	ldr	r1, [pc, #156]	; (2588 <chk_mounted+0x390>)
    24ea:	2203      	movs	r2, #3
    24ec:	428b      	cmp	r3, r1
    24ee:	d120      	bne.n	2532 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    24f0:	4b26      	ldr	r3, [pc, #152]	; (258c <chk_mounted+0x394>)
    24f2:	5cf3      	ldrb	r3, [r6, r3]
    24f4:	061b      	lsls	r3, r3, #24
    24f6:	4a26      	ldr	r2, [pc, #152]	; (2590 <chk_mounted+0x398>)
    24f8:	5cb2      	ldrb	r2, [r6, r2]
    24fa:	0412      	lsls	r2, r2, #16
    24fc:	4313      	orrs	r3, r2
    24fe:	2287      	movs	r2, #135	; 0x87
    2500:	0092      	lsls	r2, r2, #2
    2502:	5cb2      	ldrb	r2, [r6, r2]
    2504:	4313      	orrs	r3, r2
    2506:	4a23      	ldr	r2, [pc, #140]	; (2594 <chk_mounted+0x39c>)
    2508:	5cb2      	ldrb	r2, [r6, r2]
    250a:	0212      	lsls	r2, r2, #8
    250c:	4313      	orrs	r3, r2
    250e:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2510:	4b21      	ldr	r3, [pc, #132]	; (2598 <chk_mounted+0x3a0>)
    2512:	5cf3      	ldrb	r3, [r6, r3]
    2514:	061b      	lsls	r3, r3, #24
    2516:	4a21      	ldr	r2, [pc, #132]	; (259c <chk_mounted+0x3a4>)
    2518:	5cb2      	ldrb	r2, [r6, r2]
    251a:	0412      	lsls	r2, r2, #16
    251c:	4313      	orrs	r3, r2
    251e:	2286      	movs	r2, #134	; 0x86
    2520:	0092      	lsls	r2, r2, #2
    2522:	5cb2      	ldrb	r2, [r6, r2]
    2524:	4313      	orrs	r3, r2
    2526:	4a1e      	ldr	r2, [pc, #120]	; (25a0 <chk_mounted+0x3a8>)
    2528:	5cb2      	ldrb	r2, [r6, r2]
    252a:	0212      	lsls	r2, r2, #8
    252c:	4313      	orrs	r3, r2
    252e:	6133      	str	r3, [r6, #16]
    2530:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    2532:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    2534:	4a1b      	ldr	r2, [pc, #108]	; (25a4 <chk_mounted+0x3ac>)
    2536:	8813      	ldrh	r3, [r2, #0]
    2538:	3301      	adds	r3, #1
    253a:	b29b      	uxth	r3, r3
    253c:	8013      	strh	r3, [r2, #0]
    253e:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    2540:	2000      	movs	r0, #0
    2542:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    2544:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    2546:	e66c      	b.n	2222 <chk_mounted+0x2a>
    2548:	20000194 	.word	0x20000194
    254c:	00001ee9 	.word	0x00001ee9
    2550:	00001e4d 	.word	0x00001e4d
    2554:	00002155 	.word	0x00002155
    2558:	000063a9 	.word	0x000063a9
    255c:	00000ff5 	.word	0x00000ff5
    2560:	0000fff5 	.word	0x0000fff5
    2564:	000001ff 	.word	0x000001ff
    2568:	00001f05 	.word	0x00001f05
    256c:	0000022f 	.word	0x0000022f
    2570:	0000022e 	.word	0x0000022e
    2574:	ffffaa55 	.word	0xffffaa55
    2578:	41615252 	.word	0x41615252
    257c:	00000217 	.word	0x00000217
    2580:	00000216 	.word	0x00000216
    2584:	00000215 	.word	0x00000215
    2588:	61417272 	.word	0x61417272
    258c:	0000021f 	.word	0x0000021f
    2590:	0000021e 	.word	0x0000021e
    2594:	0000021d 	.word	0x0000021d
    2598:	0000021b 	.word	0x0000021b
    259c:	0000021a 	.word	0x0000021a
    25a0:	00000219 	.word	0x00000219
    25a4:	200001a4 	.word	0x200001a4

000025a8 <move_window>:
{
    25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25aa:	46ce      	mov	lr, r9
    25ac:	b500      	push	{lr}
    25ae:	b082      	sub	sp, #8
    25b0:	0004      	movs	r4, r0
    25b2:	000f      	movs	r7, r1
	wsect = fs->winsect;
    25b4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    25b6:	428d      	cmp	r5, r1
    25b8:	d03f      	beq.n	263a <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    25ba:	7903      	ldrb	r3, [r0, #4]
    25bc:	2b00      	cmp	r3, #0
    25be:	d107      	bne.n	25d0 <move_window+0x28>
	return FR_OK;
    25c0:	2300      	movs	r3, #0
		if (sector) {
    25c2:	2f00      	cmp	r7, #0
    25c4:	d12c      	bne.n	2620 <move_window+0x78>
}
    25c6:	0018      	movs	r0, r3
    25c8:	b002      	add	sp, #8
    25ca:	bc04      	pop	{r2}
    25cc:	4691      	mov	r9, r2
    25ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    25d0:	2330      	movs	r3, #48	; 0x30
    25d2:	469c      	mov	ip, r3
    25d4:	4484      	add	ip, r0
    25d6:	4663      	mov	r3, ip
    25d8:	4661      	mov	r1, ip
    25da:	9301      	str	r3, [sp, #4]
    25dc:	7840      	ldrb	r0, [r0, #1]
    25de:	2301      	movs	r3, #1
    25e0:	002a      	movs	r2, r5
    25e2:	4e17      	ldr	r6, [pc, #92]	; (2640 <move_window+0x98>)
    25e4:	47b0      	blx	r6
				return FR_DISK_ERR;
    25e6:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    25e8:	2800      	cmp	r0, #0
    25ea:	d1ec      	bne.n	25c6 <move_window+0x1e>
			fs->wflag = 0;
    25ec:	2300      	movs	r3, #0
    25ee:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    25f0:	6a23      	ldr	r3, [r4, #32]
    25f2:	69e2      	ldr	r2, [r4, #28]
    25f4:	4694      	mov	ip, r2
    25f6:	4463      	add	r3, ip
    25f8:	429d      	cmp	r5, r3
    25fa:	d2e1      	bcs.n	25c0 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    25fc:	78e6      	ldrb	r6, [r4, #3]
    25fe:	2e01      	cmp	r6, #1
    2600:	d9de      	bls.n	25c0 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    2602:	4b0f      	ldr	r3, [pc, #60]	; (2640 <move_window+0x98>)
    2604:	4699      	mov	r9, r3
					wsect += fs->fsize;
    2606:	69e3      	ldr	r3, [r4, #28]
    2608:	469c      	mov	ip, r3
    260a:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    260c:	7860      	ldrb	r0, [r4, #1]
    260e:	2301      	movs	r3, #1
    2610:	002a      	movs	r2, r5
    2612:	9901      	ldr	r1, [sp, #4]
    2614:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2616:	3e01      	subs	r6, #1
    2618:	b2f6      	uxtb	r6, r6
    261a:	2e01      	cmp	r6, #1
    261c:	d1f3      	bne.n	2606 <move_window+0x5e>
    261e:	e7cf      	b.n	25c0 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2620:	0021      	movs	r1, r4
    2622:	3130      	adds	r1, #48	; 0x30
    2624:	7860      	ldrb	r0, [r4, #1]
    2626:	3301      	adds	r3, #1
    2628:	003a      	movs	r2, r7
    262a:	4d06      	ldr	r5, [pc, #24]	; (2644 <move_window+0x9c>)
    262c:	47a8      	blx	r5
				return FR_DISK_ERR;
    262e:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2630:	2800      	cmp	r0, #0
    2632:	d1c8      	bne.n	25c6 <move_window+0x1e>
			fs->winsect = sector;
    2634:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    2636:	2300      	movs	r3, #0
    2638:	e7c5      	b.n	25c6 <move_window+0x1e>
    263a:	2300      	movs	r3, #0
    263c:	e7c3      	b.n	25c6 <move_window+0x1e>
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	00001f89 	.word	0x00001f89
    2644:	00001f05 	.word	0x00001f05

00002648 <get_fat>:
{
    2648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    264a:	0005      	movs	r5, r0
    264c:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    264e:	2901      	cmp	r1, #1
    2650:	d974      	bls.n	273c <get_fat+0xf4>
		return 1;
    2652:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    2654:	69ab      	ldr	r3, [r5, #24]
    2656:	4299      	cmp	r1, r3
    2658:	d271      	bcs.n	273e <get_fat+0xf6>
	switch (fs->fs_type) {
    265a:	782b      	ldrb	r3, [r5, #0]
    265c:	2b02      	cmp	r3, #2
    265e:	d034      	beq.n	26ca <get_fat+0x82>
    2660:	2b03      	cmp	r3, #3
    2662:	d049      	beq.n	26f8 <get_fat+0xb0>
    2664:	2b01      	cmp	r3, #1
    2666:	d002      	beq.n	266e <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2668:	2001      	movs	r0, #1
    266a:	4240      	negs	r0, r0
    266c:	e067      	b.n	273e <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    266e:	084e      	lsrs	r6, r1, #1
    2670:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2672:	0a71      	lsrs	r1, r6, #9
    2674:	6a2b      	ldr	r3, [r5, #32]
    2676:	469c      	mov	ip, r3
    2678:	4461      	add	r1, ip
    267a:	0028      	movs	r0, r5
    267c:	4b30      	ldr	r3, [pc, #192]	; (2740 <get_fat+0xf8>)
    267e:	4798      	blx	r3
    2680:	2800      	cmp	r0, #0
    2682:	d002      	beq.n	268a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    2684:	2001      	movs	r0, #1
    2686:	4240      	negs	r0, r0
    2688:	e059      	b.n	273e <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    268a:	05f3      	lsls	r3, r6, #23
    268c:	0ddb      	lsrs	r3, r3, #23
    268e:	18eb      	adds	r3, r5, r3
    2690:	3330      	adds	r3, #48	; 0x30
    2692:	781f      	ldrb	r7, [r3, #0]
    2694:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    2696:	0a71      	lsrs	r1, r6, #9
    2698:	6a2b      	ldr	r3, [r5, #32]
    269a:	469c      	mov	ip, r3
    269c:	4461      	add	r1, ip
    269e:	0028      	movs	r0, r5
    26a0:	4b27      	ldr	r3, [pc, #156]	; (2740 <get_fat+0xf8>)
    26a2:	4798      	blx	r3
    26a4:	2800      	cmp	r0, #0
    26a6:	d002      	beq.n	26ae <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    26a8:	2001      	movs	r0, #1
    26aa:	4240      	negs	r0, r0
    26ac:	e047      	b.n	273e <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    26ae:	05f6      	lsls	r6, r6, #23
    26b0:	0df6      	lsrs	r6, r6, #23
    26b2:	19ad      	adds	r5, r5, r6
    26b4:	3530      	adds	r5, #48	; 0x30
    26b6:	7828      	ldrb	r0, [r5, #0]
    26b8:	0200      	lsls	r0, r0, #8
    26ba:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    26bc:	07e3      	lsls	r3, r4, #31
    26be:	d501      	bpl.n	26c4 <get_fat+0x7c>
    26c0:	0900      	lsrs	r0, r0, #4
    26c2:	e03c      	b.n	273e <get_fat+0xf6>
    26c4:	0500      	lsls	r0, r0, #20
    26c6:	0d00      	lsrs	r0, r0, #20
    26c8:	e039      	b.n	273e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    26ca:	0a09      	lsrs	r1, r1, #8
    26cc:	6a2b      	ldr	r3, [r5, #32]
    26ce:	469c      	mov	ip, r3
    26d0:	4461      	add	r1, ip
    26d2:	0028      	movs	r0, r5
    26d4:	4b1a      	ldr	r3, [pc, #104]	; (2740 <get_fat+0xf8>)
    26d6:	4798      	blx	r3
    26d8:	2800      	cmp	r0, #0
    26da:	d002      	beq.n	26e2 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    26dc:	2001      	movs	r0, #1
    26de:	4240      	negs	r0, r0
    26e0:	e02d      	b.n	273e <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    26e2:	0064      	lsls	r4, r4, #1
    26e4:	23ff      	movs	r3, #255	; 0xff
    26e6:	005b      	lsls	r3, r3, #1
    26e8:	401c      	ands	r4, r3
		return LD_WORD(p);
    26ea:	192d      	adds	r5, r5, r4
    26ec:	3530      	adds	r5, #48	; 0x30
    26ee:	786b      	ldrb	r3, [r5, #1]
    26f0:	021b      	lsls	r3, r3, #8
    26f2:	7828      	ldrb	r0, [r5, #0]
    26f4:	4318      	orrs	r0, r3
    26f6:	e022      	b.n	273e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    26f8:	09c9      	lsrs	r1, r1, #7
    26fa:	6a2b      	ldr	r3, [r5, #32]
    26fc:	469c      	mov	ip, r3
    26fe:	4461      	add	r1, ip
    2700:	0028      	movs	r0, r5
    2702:	4b0f      	ldr	r3, [pc, #60]	; (2740 <get_fat+0xf8>)
    2704:	4798      	blx	r3
    2706:	2800      	cmp	r0, #0
    2708:	d002      	beq.n	2710 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    270a:	2001      	movs	r0, #1
    270c:	4240      	negs	r0, r0
    270e:	e016      	b.n	273e <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    2710:	00a4      	lsls	r4, r4, #2
    2712:	23fe      	movs	r3, #254	; 0xfe
    2714:	005b      	lsls	r3, r3, #1
    2716:	401c      	ands	r4, r3
    2718:	0023      	movs	r3, r4
    271a:	3330      	adds	r3, #48	; 0x30
    271c:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    271e:	78d8      	ldrb	r0, [r3, #3]
    2720:	0600      	lsls	r0, r0, #24
    2722:	789a      	ldrb	r2, [r3, #2]
    2724:	0412      	lsls	r2, r2, #16
    2726:	4310      	orrs	r0, r2
    2728:	192c      	adds	r4, r5, r4
    272a:	3430      	adds	r4, #48	; 0x30
    272c:	7822      	ldrb	r2, [r4, #0]
    272e:	4310      	orrs	r0, r2
    2730:	785b      	ldrb	r3, [r3, #1]
    2732:	021b      	lsls	r3, r3, #8
    2734:	4318      	orrs	r0, r3
    2736:	0100      	lsls	r0, r0, #4
    2738:	0900      	lsrs	r0, r0, #4
    273a:	e000      	b.n	273e <get_fat+0xf6>
		return 1;
    273c:	2001      	movs	r0, #1
}
    273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2740:	000025a9 	.word	0x000025a9

00002744 <dir_sdi>:
{
    2744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2746:	0004      	movs	r4, r0
    2748:	000d      	movs	r5, r1
	dj->index = idx;
    274a:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    274c:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    274e:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    2750:	2901      	cmp	r1, #1
    2752:	d003      	beq.n	275c <dir_sdi+0x18>
    2754:	6823      	ldr	r3, [r4, #0]
    2756:	699a      	ldr	r2, [r3, #24]
    2758:	4291      	cmp	r1, r2
    275a:	d300      	bcc.n	275e <dir_sdi+0x1a>
}
    275c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    275e:	2900      	cmp	r1, #0
    2760:	d119      	bne.n	2796 <dir_sdi+0x52>
    2762:	781a      	ldrb	r2, [r3, #0]
    2764:	2a03      	cmp	r2, #3
    2766:	d013      	beq.n	2790 <dir_sdi+0x4c>
		dj->clust = clst;
    2768:	2200      	movs	r2, #0
    276a:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    276c:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    276e:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    2770:	42aa      	cmp	r2, r5
    2772:	d9f3      	bls.n	275c <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    2774:	092a      	lsrs	r2, r5, #4
    2776:	b292      	uxth	r2, r2
    2778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    277a:	189b      	adds	r3, r3, r2
    277c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    277e:	6823      	ldr	r3, [r4, #0]
    2780:	3330      	adds	r3, #48	; 0x30
    2782:	220f      	movs	r2, #15
    2784:	4015      	ands	r5, r2
    2786:	016d      	lsls	r5, r5, #5
    2788:	195d      	adds	r5, r3, r5
    278a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    278c:	2000      	movs	r0, #0
    278e:	e7e5      	b.n	275c <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    2790:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    2792:	2900      	cmp	r1, #0
    2794:	d0e8      	beq.n	2768 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    2796:	789e      	ldrb	r6, [r3, #2]
    2798:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    279a:	42b5      	cmp	r5, r6
    279c:	d313      	bcc.n	27c6 <dir_sdi+0x82>
    279e:	1bad      	subs	r5, r5, r6
    27a0:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    27a2:	4f10      	ldr	r7, [pc, #64]	; (27e4 <dir_sdi+0xa0>)
    27a4:	e000      	b.n	27a8 <dir_sdi+0x64>
    27a6:	001d      	movs	r5, r3
    27a8:	6820      	ldr	r0, [r4, #0]
    27aa:	47b8      	blx	r7
    27ac:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    27ae:	1c43      	adds	r3, r0, #1
    27b0:	d012      	beq.n	27d8 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    27b2:	2801      	cmp	r0, #1
    27b4:	d912      	bls.n	27dc <dir_sdi+0x98>
    27b6:	6823      	ldr	r3, [r4, #0]
    27b8:	699b      	ldr	r3, [r3, #24]
    27ba:	4298      	cmp	r0, r3
    27bc:	d210      	bcs.n	27e0 <dir_sdi+0x9c>
    27be:	1bab      	subs	r3, r5, r6
    27c0:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    27c2:	42b5      	cmp	r5, r6
    27c4:	d2ef      	bcs.n	27a6 <dir_sdi+0x62>
		dj->clust = clst;
    27c6:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    27c8:	6820      	ldr	r0, [r4, #0]
    27ca:	4b07      	ldr	r3, [pc, #28]	; (27e8 <dir_sdi+0xa4>)
    27cc:	4798      	blx	r3
    27ce:	092b      	lsrs	r3, r5, #4
    27d0:	b29b      	uxth	r3, r3
    27d2:	1818      	adds	r0, r3, r0
    27d4:	6120      	str	r0, [r4, #16]
    27d6:	e7d2      	b.n	277e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    27d8:	2001      	movs	r0, #1
    27da:	e7bf      	b.n	275c <dir_sdi+0x18>
				return FR_INT_ERR;
    27dc:	2002      	movs	r0, #2
    27de:	e7bd      	b.n	275c <dir_sdi+0x18>
    27e0:	2002      	movs	r0, #2
    27e2:	e7bb      	b.n	275c <dir_sdi+0x18>
    27e4:	00002649 	.word	0x00002649
    27e8:	000020ef 	.word	0x000020ef

000027ec <put_fat>:
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ee:	46c6      	mov	lr, r8
    27f0:	b500      	push	{lr}
    27f2:	0007      	movs	r7, r0
    27f4:	000c      	movs	r4, r1
    27f6:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    27f8:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    27fa:	2901      	cmp	r1, #1
    27fc:	d902      	bls.n	2804 <put_fat+0x18>
    27fe:	6983      	ldr	r3, [r0, #24]
    2800:	4299      	cmp	r1, r3
    2802:	d303      	bcc.n	280c <put_fat+0x20>
}
    2804:	0028      	movs	r0, r5
    2806:	bc04      	pop	{r2}
    2808:	4690      	mov	r8, r2
    280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    280c:	7803      	ldrb	r3, [r0, #0]
    280e:	2b02      	cmp	r3, #2
    2810:	d053      	beq.n	28ba <put_fat+0xce>
    2812:	2b03      	cmp	r3, #3
    2814:	d063      	beq.n	28de <put_fat+0xf2>
			res = FR_INT_ERR;
    2816:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    2818:	2b01      	cmp	r3, #1
    281a:	d002      	beq.n	2822 <put_fat+0x36>
		fs->wflag = 1;
    281c:	2301      	movs	r3, #1
    281e:	713b      	strb	r3, [r7, #4]
    2820:	e7f0      	b.n	2804 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    2822:	084b      	lsrs	r3, r1, #1
    2824:	4698      	mov	r8, r3
    2826:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2828:	4643      	mov	r3, r8
    282a:	0a59      	lsrs	r1, r3, #9
    282c:	6a03      	ldr	r3, [r0, #32]
    282e:	469c      	mov	ip, r3
    2830:	4461      	add	r1, ip
    2832:	4b3b      	ldr	r3, [pc, #236]	; (2920 <put_fat+0x134>)
    2834:	4798      	blx	r3
    2836:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    2838:	d1f0      	bne.n	281c <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    283a:	4643      	mov	r3, r8
    283c:	05db      	lsls	r3, r3, #23
    283e:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2840:	07e2      	lsls	r2, r4, #31
    2842:	d51f      	bpl.n	2884 <put_fat+0x98>
    2844:	18fb      	adds	r3, r7, r3
    2846:	3330      	adds	r3, #48	; 0x30
    2848:	7819      	ldrb	r1, [r3, #0]
    284a:	220f      	movs	r2, #15
    284c:	400a      	ands	r2, r1
    284e:	0131      	lsls	r1, r6, #4
    2850:	20ff      	movs	r0, #255	; 0xff
    2852:	0100      	lsls	r0, r0, #4
    2854:	4001      	ands	r1, r0
    2856:	430a      	orrs	r2, r1
    2858:	701a      	strb	r2, [r3, #0]
			bc++;
    285a:	4644      	mov	r4, r8
    285c:	3401      	adds	r4, #1
			fs->wflag = 1;
    285e:	2301      	movs	r3, #1
    2860:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2862:	0a61      	lsrs	r1, r4, #9
    2864:	6a3b      	ldr	r3, [r7, #32]
    2866:	469c      	mov	ip, r3
    2868:	4461      	add	r1, ip
    286a:	0038      	movs	r0, r7
    286c:	4b2c      	ldr	r3, [pc, #176]	; (2920 <put_fat+0x134>)
    286e:	4798      	blx	r3
			if (res != FR_OK) break;
    2870:	2800      	cmp	r0, #0
    2872:	d151      	bne.n	2918 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    2874:	05e4      	lsls	r4, r4, #23
    2876:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2878:	0936      	lsrs	r6, r6, #4
    287a:	b2f6      	uxtb	r6, r6
    287c:	193c      	adds	r4, r7, r4
    287e:	3430      	adds	r4, #48	; 0x30
    2880:	7026      	strb	r6, [r4, #0]
			break;
    2882:	e7cb      	b.n	281c <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2884:	18fb      	adds	r3, r7, r3
    2886:	3330      	adds	r3, #48	; 0x30
    2888:	701e      	strb	r6, [r3, #0]
			bc++;
    288a:	4644      	mov	r4, r8
    288c:	3401      	adds	r4, #1
			fs->wflag = 1;
    288e:	2301      	movs	r3, #1
    2890:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2892:	0a61      	lsrs	r1, r4, #9
    2894:	6a3b      	ldr	r3, [r7, #32]
    2896:	469c      	mov	ip, r3
    2898:	4461      	add	r1, ip
    289a:	0038      	movs	r0, r7
    289c:	4b20      	ldr	r3, [pc, #128]	; (2920 <put_fat+0x134>)
    289e:	4798      	blx	r3
			if (res != FR_OK) break;
    28a0:	2800      	cmp	r0, #0
    28a2:	d13b      	bne.n	291c <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    28a4:	05e4      	lsls	r4, r4, #23
    28a6:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    28a8:	193b      	adds	r3, r7, r4
    28aa:	3330      	adds	r3, #48	; 0x30
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	220f      	movs	r2, #15
    28b0:	4393      	bics	r3, r2
    28b2:	0536      	lsls	r6, r6, #20
    28b4:	0f36      	lsrs	r6, r6, #28
    28b6:	431e      	orrs	r6, r3
    28b8:	e7e0      	b.n	287c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    28ba:	0a09      	lsrs	r1, r1, #8
    28bc:	6a03      	ldr	r3, [r0, #32]
    28be:	469c      	mov	ip, r3
    28c0:	4461      	add	r1, ip
    28c2:	4b17      	ldr	r3, [pc, #92]	; (2920 <put_fat+0x134>)
    28c4:	4798      	blx	r3
    28c6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    28c8:	d1a8      	bne.n	281c <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    28ca:	0063      	lsls	r3, r4, #1
    28cc:	24ff      	movs	r4, #255	; 0xff
    28ce:	0064      	lsls	r4, r4, #1
    28d0:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	3330      	adds	r3, #48	; 0x30
    28d6:	701e      	strb	r6, [r3, #0]
    28d8:	0a36      	lsrs	r6, r6, #8
    28da:	705e      	strb	r6, [r3, #1]
			break;
    28dc:	e79e      	b.n	281c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    28de:	09c9      	lsrs	r1, r1, #7
    28e0:	6a03      	ldr	r3, [r0, #32]
    28e2:	469c      	mov	ip, r3
    28e4:	4461      	add	r1, ip
    28e6:	4b0e      	ldr	r3, [pc, #56]	; (2920 <put_fat+0x134>)
    28e8:	4798      	blx	r3
    28ea:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    28ec:	d196      	bne.n	281c <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    28ee:	00a4      	lsls	r4, r4, #2
    28f0:	23fe      	movs	r3, #254	; 0xfe
    28f2:	005b      	lsls	r3, r3, #1
    28f4:	401c      	ands	r4, r3
    28f6:	0022      	movs	r2, r4
    28f8:	3230      	adds	r2, #48	; 0x30
    28fa:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    28fc:	78d3      	ldrb	r3, [r2, #3]
    28fe:	193c      	adds	r4, r7, r4
    2900:	3430      	adds	r4, #48	; 0x30
    2902:	091b      	lsrs	r3, r3, #4
    2904:	071b      	lsls	r3, r3, #28
    2906:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    2908:	7026      	strb	r6, [r4, #0]
    290a:	0a33      	lsrs	r3, r6, #8
    290c:	7053      	strb	r3, [r2, #1]
    290e:	0c33      	lsrs	r3, r6, #16
    2910:	7093      	strb	r3, [r2, #2]
    2912:	0e36      	lsrs	r6, r6, #24
    2914:	70d6      	strb	r6, [r2, #3]
			break;
    2916:	e781      	b.n	281c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2918:	0005      	movs	r5, r0
    291a:	e77f      	b.n	281c <put_fat+0x30>
    291c:	0005      	movs	r5, r0
    291e:	e77d      	b.n	281c <put_fat+0x30>
    2920:	000025a9 	.word	0x000025a9

00002924 <create_chain>:
{
    2924:	b5f0      	push	{r4, r5, r6, r7, lr}
    2926:	46c6      	mov	lr, r8
    2928:	b500      	push	{lr}
    292a:	0005      	movs	r5, r0
    292c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    292e:	2900      	cmp	r1, #0
    2930:	d107      	bne.n	2942 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    2932:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2934:	2e00      	cmp	r6, #0
    2936:	d00d      	beq.n	2954 <create_chain+0x30>
    2938:	6983      	ldr	r3, [r0, #24]
    293a:	429e      	cmp	r6, r3
    293c:	d30b      	bcc.n	2956 <create_chain+0x32>
    293e:	2601      	movs	r6, #1
    2940:	e009      	b.n	2956 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2942:	4b26      	ldr	r3, [pc, #152]	; (29dc <create_chain+0xb8>)
    2944:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2946:	2801      	cmp	r0, #1
    2948:	d93d      	bls.n	29c6 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    294a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    294c:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    294e:	4298      	cmp	r0, r3
    2950:	d201      	bcs.n	2956 <create_chain+0x32>
    2952:	e03d      	b.n	29d0 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2954:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    2956:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    2958:	4f20      	ldr	r7, [pc, #128]	; (29dc <create_chain+0xb8>)
    295a:	e00a      	b.n	2972 <create_chain+0x4e>
    295c:	0021      	movs	r1, r4
    295e:	0028      	movs	r0, r5
    2960:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    2962:	2800      	cmp	r0, #0
    2964:	d00d      	beq.n	2982 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    2966:	1c43      	adds	r3, r0, #1
    2968:	d032      	beq.n	29d0 <create_chain+0xac>
    296a:	2801      	cmp	r0, #1
    296c:	d030      	beq.n	29d0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    296e:	42b4      	cmp	r4, r6
    2970:	d02d      	beq.n	29ce <create_chain+0xaa>
		ncl++;							/* Next cluster */
    2972:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    2974:	69ab      	ldr	r3, [r5, #24]
    2976:	429c      	cmp	r4, r3
    2978:	d3f0      	bcc.n	295c <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    297a:	2e01      	cmp	r6, #1
    297c:	d925      	bls.n	29ca <create_chain+0xa6>
			ncl = 2;
    297e:	2402      	movs	r4, #2
    2980:	e7ec      	b.n	295c <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    2982:	4a17      	ldr	r2, [pc, #92]	; (29e0 <create_chain+0xbc>)
    2984:	0021      	movs	r1, r4
    2986:	0028      	movs	r0, r5
    2988:	4b16      	ldr	r3, [pc, #88]	; (29e4 <create_chain+0xc0>)
    298a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    298c:	2800      	cmp	r0, #0
    298e:	d113      	bne.n	29b8 <create_chain+0x94>
    2990:	4643      	mov	r3, r8
    2992:	2b00      	cmp	r3, #0
    2994:	d109      	bne.n	29aa <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    2996:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    2998:	692b      	ldr	r3, [r5, #16]
    299a:	1c5a      	adds	r2, r3, #1
    299c:	d01b      	beq.n	29d6 <create_chain+0xb2>
			fs->free_clust--;
    299e:	3b01      	subs	r3, #1
    29a0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    29a2:	2301      	movs	r3, #1
    29a4:	716b      	strb	r3, [r5, #5]
    29a6:	0020      	movs	r0, r4
    29a8:	e012      	b.n	29d0 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    29aa:	0022      	movs	r2, r4
    29ac:	4641      	mov	r1, r8
    29ae:	0028      	movs	r0, r5
    29b0:	4b0c      	ldr	r3, [pc, #48]	; (29e4 <create_chain+0xc0>)
    29b2:	4798      	blx	r3
	if (res == FR_OK) {
    29b4:	2800      	cmp	r0, #0
    29b6:	d0ee      	beq.n	2996 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    29b8:	3801      	subs	r0, #1
    29ba:	4242      	negs	r2, r0
    29bc:	4142      	adcs	r2, r0
    29be:	4250      	negs	r0, r2
    29c0:	2301      	movs	r3, #1
    29c2:	4318      	orrs	r0, r3
    29c4:	e004      	b.n	29d0 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    29c6:	2001      	movs	r0, #1
    29c8:	e002      	b.n	29d0 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    29ca:	2000      	movs	r0, #0
    29cc:	e000      	b.n	29d0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    29ce:	2000      	movs	r0, #0
}
    29d0:	bc04      	pop	{r2}
    29d2:	4690      	mov	r8, r2
    29d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29d6:	0020      	movs	r0, r4
    29d8:	e7fa      	b.n	29d0 <create_chain+0xac>
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	00002649 	.word	0x00002649
    29e0:	0fffffff 	.word	0x0fffffff
    29e4:	000027ed 	.word	0x000027ed

000029e8 <remove_chain>:
{
    29e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ea:	46ce      	mov	lr, r9
    29ec:	4647      	mov	r7, r8
    29ee:	b580      	push	{r7, lr}
    29f0:	0004      	movs	r4, r0
    29f2:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    29f4:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    29f6:	2901      	cmp	r1, #1
    29f8:	d902      	bls.n	2a00 <remove_chain+0x18>
    29fa:	69a3      	ldr	r3, [r4, #24]
    29fc:	4299      	cmp	r1, r3
    29fe:	d303      	bcc.n	2a08 <remove_chain+0x20>
}
    2a00:	bc0c      	pop	{r2, r3}
    2a02:	4690      	mov	r8, r2
    2a04:	4699      	mov	r9, r3
    2a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2a08:	4f13      	ldr	r7, [pc, #76]	; (2a58 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2a0a:	4b14      	ldr	r3, [pc, #80]	; (2a5c <remove_chain+0x74>)
    2a0c:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    2a0e:	2301      	movs	r3, #1
    2a10:	4699      	mov	r9, r3
    2a12:	e003      	b.n	2a1c <remove_chain+0x34>
    2a14:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    2a16:	69a3      	ldr	r3, [r4, #24]
    2a18:	42b3      	cmp	r3, r6
    2a1a:	d9f1      	bls.n	2a00 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2a1c:	0029      	movs	r1, r5
    2a1e:	0020      	movs	r0, r4
    2a20:	47b8      	blx	r7
    2a22:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    2a24:	d011      	beq.n	2a4a <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2a26:	2801      	cmp	r0, #1
    2a28:	d011      	beq.n	2a4e <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2a2a:	1c43      	adds	r3, r0, #1
    2a2c:	d011      	beq.n	2a52 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    2a2e:	2200      	movs	r2, #0
    2a30:	0029      	movs	r1, r5
    2a32:	0020      	movs	r0, r4
    2a34:	47c0      	blx	r8
			if (res != FR_OK) break;
    2a36:	2800      	cmp	r0, #0
    2a38:	d1e2      	bne.n	2a00 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2a3a:	6923      	ldr	r3, [r4, #16]
    2a3c:	1c5a      	adds	r2, r3, #1
    2a3e:	d0e9      	beq.n	2a14 <remove_chain+0x2c>
				fs->free_clust++;
    2a40:	3301      	adds	r3, #1
    2a42:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    2a44:	464b      	mov	r3, r9
    2a46:	7163      	strb	r3, [r4, #5]
    2a48:	e7e4      	b.n	2a14 <remove_chain+0x2c>
    2a4a:	2000      	movs	r0, #0
    2a4c:	e7d8      	b.n	2a00 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2a4e:	2002      	movs	r0, #2
    2a50:	e7d6      	b.n	2a00 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2a52:	2001      	movs	r0, #1
    2a54:	e7d4      	b.n	2a00 <remove_chain+0x18>
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	00002649 	.word	0x00002649
    2a5c:	000027ed 	.word	0x000027ed

00002a60 <dir_next>:
{
    2a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a62:	46d6      	mov	lr, sl
    2a64:	4647      	mov	r7, r8
    2a66:	b580      	push	{r7, lr}
    2a68:	0006      	movs	r6, r0
    2a6a:	000d      	movs	r5, r1
	i = dj->index + 1;
    2a6c:	88c4      	ldrh	r4, [r0, #6]
    2a6e:	3401      	adds	r4, #1
    2a70:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    2a72:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2a74:	2c00      	cmp	r4, #0
    2a76:	d103      	bne.n	2a80 <dir_next+0x20>
}
    2a78:	bc0c      	pop	{r2, r3}
    2a7a:	4690      	mov	r8, r2
    2a7c:	469a      	mov	sl, r3
    2a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    2a80:	6933      	ldr	r3, [r6, #16]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d0f8      	beq.n	2a78 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2a86:	270f      	movs	r7, #15
    2a88:	4027      	ands	r7, r4
    2a8a:	d10f      	bne.n	2aac <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    2a8c:	3301      	adds	r3, #1
    2a8e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    2a90:	68f1      	ldr	r1, [r6, #12]
    2a92:	2900      	cmp	r1, #0
    2a94:	d104      	bne.n	2aa0 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2a96:	6833      	ldr	r3, [r6, #0]
    2a98:	891b      	ldrh	r3, [r3, #8]
    2a9a:	42a3      	cmp	r3, r4
    2a9c:	d9ec      	bls.n	2a78 <dir_next+0x18>
    2a9e:	e005      	b.n	2aac <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2aa0:	6830      	ldr	r0, [r6, #0]
    2aa2:	7883      	ldrb	r3, [r0, #2]
    2aa4:	3b01      	subs	r3, #1
    2aa6:	0922      	lsrs	r2, r4, #4
    2aa8:	421a      	tst	r2, r3
    2aaa:	d007      	beq.n	2abc <dir_next+0x5c>
	dj->index = i;
    2aac:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2aae:	6833      	ldr	r3, [r6, #0]
    2ab0:	3330      	adds	r3, #48	; 0x30
    2ab2:	017f      	lsls	r7, r7, #5
    2ab4:	19df      	adds	r7, r3, r7
    2ab6:	6177      	str	r7, [r6, #20]
	return FR_OK;
    2ab8:	2000      	movs	r0, #0
    2aba:	e7dd      	b.n	2a78 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2abc:	4b2c      	ldr	r3, [pc, #176]	; (2b70 <dir_next+0x110>)
    2abe:	4798      	blx	r3
    2ac0:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    2ac2:	2002      	movs	r0, #2
    2ac4:	4643      	mov	r3, r8
    2ac6:	2b01      	cmp	r3, #1
    2ac8:	d9d6      	bls.n	2a78 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2aca:	3301      	adds	r3, #1
    2acc:	d04b      	beq.n	2b66 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2ace:	6833      	ldr	r3, [r6, #0]
    2ad0:	699a      	ldr	r2, [r3, #24]
    2ad2:	4590      	cmp	r8, r2
    2ad4:	d33f      	bcc.n	2b56 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2ad6:	3002      	adds	r0, #2
    2ad8:	2d00      	cmp	r5, #0
    2ada:	d0cd      	beq.n	2a78 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    2adc:	68f1      	ldr	r1, [r6, #12]
    2ade:	0018      	movs	r0, r3
    2ae0:	4b24      	ldr	r3, [pc, #144]	; (2b74 <dir_next+0x114>)
    2ae2:	4798      	blx	r3
    2ae4:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2ae6:	2007      	movs	r0, #7
    2ae8:	4643      	mov	r3, r8
    2aea:	2b00      	cmp	r3, #0
    2aec:	d0c4      	beq.n	2a78 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    2aee:	3805      	subs	r0, #5
    2af0:	2b01      	cmp	r3, #1
    2af2:	d0c1      	beq.n	2a78 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2af4:	3801      	subs	r0, #1
    2af6:	3301      	adds	r3, #1
    2af8:	d0be      	beq.n	2a78 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2afa:	2100      	movs	r1, #0
    2afc:	6830      	ldr	r0, [r6, #0]
    2afe:	4b1e      	ldr	r3, [pc, #120]	; (2b78 <dir_next+0x118>)
    2b00:	4798      	blx	r3
    2b02:	0003      	movs	r3, r0
    2b04:	2001      	movs	r0, #1
    2b06:	2b00      	cmp	r3, #0
    2b08:	d1b6      	bne.n	2a78 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2b0a:	6830      	ldr	r0, [r6, #0]
    2b0c:	3030      	adds	r0, #48	; 0x30
    2b0e:	2280      	movs	r2, #128	; 0x80
    2b10:	0092      	lsls	r2, r2, #2
    2b12:	2100      	movs	r1, #0
    2b14:	4b19      	ldr	r3, [pc, #100]	; (2b7c <dir_next+0x11c>)
    2b16:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2b18:	6835      	ldr	r5, [r6, #0]
    2b1a:	4641      	mov	r1, r8
    2b1c:	0028      	movs	r0, r5
    2b1e:	4b18      	ldr	r3, [pc, #96]	; (2b80 <dir_next+0x120>)
    2b20:	4798      	blx	r3
    2b22:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2b24:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    2b26:	2301      	movs	r3, #1
    2b28:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2b2a:	6833      	ldr	r3, [r6, #0]
    2b2c:	789a      	ldrb	r2, [r3, #2]
    2b2e:	42aa      	cmp	r2, r5
    2b30:	d90e      	bls.n	2b50 <dir_next+0xf0>
						dj->fs->wflag = 1;
    2b32:	4652      	mov	r2, sl
    2b34:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2b36:	2100      	movs	r1, #0
    2b38:	6830      	ldr	r0, [r6, #0]
    2b3a:	4b0f      	ldr	r3, [pc, #60]	; (2b78 <dir_next+0x118>)
    2b3c:	4798      	blx	r3
    2b3e:	2800      	cmp	r0, #0
    2b40:	d113      	bne.n	2b6a <dir_next+0x10a>
						dj->fs->winsect++;
    2b42:	6832      	ldr	r2, [r6, #0]
    2b44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2b46:	3301      	adds	r3, #1
    2b48:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2b4a:	3501      	adds	r5, #1
    2b4c:	b2ed      	uxtb	r5, r5
    2b4e:	e7ec      	b.n	2b2a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    2b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b52:	1b52      	subs	r2, r2, r5
    2b54:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    2b56:	4643      	mov	r3, r8
    2b58:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    2b5a:	4641      	mov	r1, r8
    2b5c:	6830      	ldr	r0, [r6, #0]
    2b5e:	4b08      	ldr	r3, [pc, #32]	; (2b80 <dir_next+0x120>)
    2b60:	4798      	blx	r3
    2b62:	6130      	str	r0, [r6, #16]
    2b64:	e7a2      	b.n	2aac <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2b66:	2001      	movs	r0, #1
    2b68:	e786      	b.n	2a78 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2b6a:	2001      	movs	r0, #1
    2b6c:	e784      	b.n	2a78 <dir_next+0x18>
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	00002649 	.word	0x00002649
    2b74:	00002925 	.word	0x00002925
    2b78:	000025a9 	.word	0x000025a9
    2b7c:	000020dd 	.word	0x000020dd
    2b80:	000020ef 	.word	0x000020ef

00002b84 <dir_find>:
{
    2b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b86:	46de      	mov	lr, fp
    2b88:	4657      	mov	r7, sl
    2b8a:	464e      	mov	r6, r9
    2b8c:	4645      	mov	r5, r8
    2b8e:	b5e0      	push	{r5, r6, r7, lr}
    2b90:	b083      	sub	sp, #12
    2b92:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    2b94:	2100      	movs	r1, #0
    2b96:	4b5a      	ldr	r3, [pc, #360]	; (2d00 <dir_find+0x17c>)
    2b98:	4798      	blx	r3
    2b9a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    2b9c:	d000      	beq.n	2ba0 <dir_find+0x1c>
    2b9e:	e09e      	b.n	2cde <dir_find+0x15a>
    2ba0:	23ff      	movs	r3, #255	; 0xff
    2ba2:	4699      	mov	r9, r3
    2ba4:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    2ba6:	4b57      	ldr	r3, [pc, #348]	; (2d04 <dir_find+0x180>)
    2ba8:	469b      	mov	fp, r3
    2baa:	e01b      	b.n	2be4 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    2bac:	2b0f      	cmp	r3, #15
    2bae:	d030      	beq.n	2c12 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    2bb0:	4653      	mov	r3, sl
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d105      	bne.n	2bc2 <dir_find+0x3e>
    2bb6:	0020      	movs	r0, r4
    2bb8:	4b53      	ldr	r3, [pc, #332]	; (2d08 <dir_find+0x184>)
    2bba:	4798      	blx	r3
    2bbc:	4581      	cmp	r9, r0
    2bbe:	d100      	bne.n	2bc2 <dir_find+0x3e>
    2bc0:	e08d      	b.n	2cde <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2bc2:	2301      	movs	r3, #1
    2bc4:	425b      	negs	r3, r3
    2bc6:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    2bc8:	69a8      	ldr	r0, [r5, #24]
    2bca:	7ac3      	ldrb	r3, [r0, #11]
    2bcc:	07db      	lsls	r3, r3, #31
    2bce:	d400      	bmi.n	2bd2 <dir_find+0x4e>
    2bd0:	e07d      	b.n	2cce <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2bd2:	23ff      	movs	r3, #255	; 0xff
    2bd4:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    2bd6:	2100      	movs	r1, #0
    2bd8:	0028      	movs	r0, r5
    2bda:	4b4c      	ldr	r3, [pc, #304]	; (2d0c <dir_find+0x188>)
    2bdc:	4798      	blx	r3
    2bde:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    2be0:	d000      	beq.n	2be4 <dir_find+0x60>
    2be2:	e07c      	b.n	2cde <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    2be4:	6929      	ldr	r1, [r5, #16]
    2be6:	6828      	ldr	r0, [r5, #0]
    2be8:	47d8      	blx	fp
    2bea:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    2bec:	d177      	bne.n	2cde <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2bee:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    2bf0:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2bf2:	2e00      	cmp	r6, #0
    2bf4:	d100      	bne.n	2bf8 <dir_find+0x74>
    2bf6:	e080      	b.n	2cfa <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    2bf8:	7ae2      	ldrb	r2, [r4, #11]
    2bfa:	233f      	movs	r3, #63	; 0x3f
    2bfc:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    2bfe:	2ee5      	cmp	r6, #229	; 0xe5
    2c00:	d100      	bne.n	2c04 <dir_find+0x80>
    2c02:	e077      	b.n	2cf4 <dir_find+0x170>
    2c04:	0712      	lsls	r2, r2, #28
    2c06:	d5d1      	bpl.n	2bac <dir_find+0x28>
    2c08:	2b0f      	cmp	r3, #15
    2c0a:	d002      	beq.n	2c12 <dir_find+0x8e>
			ord = 0xFF;
    2c0c:	23ff      	movs	r3, #255	; 0xff
    2c0e:	469a      	mov	sl, r3
    2c10:	e7e1      	b.n	2bd6 <dir_find+0x52>
				if (dj->lfn) {
    2c12:	69ef      	ldr	r7, [r5, #28]
    2c14:	2f00      	cmp	r7, #0
    2c16:	d0de      	beq.n	2bd6 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    2c18:	0673      	lsls	r3, r6, #25
    2c1a:	d518      	bpl.n	2c4e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    2c1c:	7b63      	ldrb	r3, [r4, #13]
    2c1e:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    2c20:	2340      	movs	r3, #64	; 0x40
    2c22:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    2c24:	88eb      	ldrh	r3, [r5, #6]
    2c26:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2c28:	7b63      	ldrb	r3, [r4, #13]
    2c2a:	9300      	str	r3, [sp, #0]
    2c2c:	22ff      	movs	r2, #255	; 0xff
    2c2e:	4692      	mov	sl, r2
    2c30:	454b      	cmp	r3, r9
    2c32:	d1d0      	bne.n	2bd6 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    2c34:	7823      	ldrb	r3, [r4, #0]
    2c36:	3abf      	subs	r2, #191	; 0xbf
    2c38:	4393      	bics	r3, r2
    2c3a:	3b01      	subs	r3, #1
    2c3c:	005a      	lsls	r2, r3, #1
    2c3e:	18d2      	adds	r2, r2, r3
    2c40:	0092      	lsls	r2, r2, #2
    2c42:	4692      	mov	sl, r2
    2c44:	449a      	add	sl, r3
	s = 0; wc = 1;
    2c46:	2201      	movs	r2, #1
    2c48:	2300      	movs	r3, #0
    2c4a:	4699      	mov	r9, r3
    2c4c:	e01d      	b.n	2c8a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2c4e:	45b2      	cmp	sl, r6
    2c50:	d0ea      	beq.n	2c28 <dir_find+0xa4>
    2c52:	23ff      	movs	r3, #255	; 0xff
    2c54:	469a      	mov	sl, r3
    2c56:	e7be      	b.n	2bd6 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    2c58:	4b2d      	ldr	r3, [pc, #180]	; (2d10 <dir_find+0x18c>)
    2c5a:	4798      	blx	r3
    2c5c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    2c5e:	4653      	mov	r3, sl
    2c60:	2bfe      	cmp	r3, #254	; 0xfe
    2c62:	d81f      	bhi.n	2ca4 <dir_find+0x120>
    2c64:	2301      	movs	r3, #1
    2c66:	4453      	add	r3, sl
    2c68:	4698      	mov	r8, r3
    2c6a:	4653      	mov	r3, sl
    2c6c:	005b      	lsls	r3, r3, #1
    2c6e:	5bd8      	ldrh	r0, [r3, r7]
    2c70:	4b27      	ldr	r3, [pc, #156]	; (2d10 <dir_find+0x18c>)
    2c72:	4798      	blx	r3
    2c74:	0002      	movs	r2, r0
    2c76:	9b01      	ldr	r3, [sp, #4]
    2c78:	4283      	cmp	r3, r0
    2c7a:	d113      	bne.n	2ca4 <dir_find+0x120>
    2c7c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    2c7e:	2301      	movs	r3, #1
    2c80:	469c      	mov	ip, r3
    2c82:	44e1      	add	r9, ip
    2c84:	464b      	mov	r3, r9
    2c86:	2b0d      	cmp	r3, #13
    2c88:	d011      	beq.n	2cae <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    2c8a:	4b22      	ldr	r3, [pc, #136]	; (2d14 <dir_find+0x190>)
    2c8c:	4649      	mov	r1, r9
    2c8e:	5cc9      	ldrb	r1, [r1, r3]
    2c90:	1863      	adds	r3, r4, r1
    2c92:	785b      	ldrb	r3, [r3, #1]
    2c94:	021b      	lsls	r3, r3, #8
    2c96:	5c60      	ldrb	r0, [r4, r1]
    2c98:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    2c9a:	2a00      	cmp	r2, #0
    2c9c:	d1dc      	bne.n	2c58 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    2c9e:	4b1e      	ldr	r3, [pc, #120]	; (2d18 <dir_find+0x194>)
    2ca0:	4298      	cmp	r0, r3
    2ca2:	d0ec      	beq.n	2c7e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2ca4:	9b00      	ldr	r3, [sp, #0]
    2ca6:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2ca8:	23ff      	movs	r3, #255	; 0xff
    2caa:	469a      	mov	sl, r3
    2cac:	e793      	b.n	2bd6 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    2cae:	7823      	ldrb	r3, [r4, #0]
    2cb0:	065b      	lsls	r3, r3, #25
    2cb2:	d506      	bpl.n	2cc2 <dir_find+0x13e>
    2cb4:	2a00      	cmp	r2, #0
    2cb6:	d004      	beq.n	2cc2 <dir_find+0x13e>
    2cb8:	4653      	mov	r3, sl
    2cba:	005b      	lsls	r3, r3, #1
    2cbc:	5bdb      	ldrh	r3, [r3, r7]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d1f0      	bne.n	2ca4 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    2cc2:	3e01      	subs	r6, #1
    2cc4:	b2f3      	uxtb	r3, r6
    2cc6:	469a      	mov	sl, r3
    2cc8:	9b00      	ldr	r3, [sp, #0]
    2cca:	4699      	mov	r9, r3
    2ccc:	e783      	b.n	2bd6 <dir_find+0x52>
    2cce:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    2cd0:	5ce1      	ldrb	r1, [r4, r3]
    2cd2:	5cc2      	ldrb	r2, [r0, r3]
    2cd4:	4291      	cmp	r1, r2
    2cd6:	d10a      	bne.n	2cee <dir_find+0x16a>
    2cd8:	3301      	adds	r3, #1
    2cda:	2b0b      	cmp	r3, #11
    2cdc:	d1f8      	bne.n	2cd0 <dir_find+0x14c>
}
    2cde:	0038      	movs	r0, r7
    2ce0:	b003      	add	sp, #12
    2ce2:	bc3c      	pop	{r2, r3, r4, r5}
    2ce4:	4690      	mov	r8, r2
    2ce6:	4699      	mov	r9, r3
    2ce8:	46a2      	mov	sl, r4
    2cea:	46ab      	mov	fp, r5
    2cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    2cee:	23ff      	movs	r3, #255	; 0xff
    2cf0:	469a      	mov	sl, r3
    2cf2:	e770      	b.n	2bd6 <dir_find+0x52>
			ord = 0xFF;
    2cf4:	23ff      	movs	r3, #255	; 0xff
    2cf6:	469a      	mov	sl, r3
    2cf8:	e76d      	b.n	2bd6 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2cfa:	2704      	movs	r7, #4
    2cfc:	e7ef      	b.n	2cde <dir_find+0x15a>
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	00002745 	.word	0x00002745
    2d04:	000025a9 	.word	0x000025a9
    2d08:	00002107 	.word	0x00002107
    2d0c:	00002a61 	.word	0x00002a61
    2d10:	00003a9d 	.word	0x00003a9d
    2d14:	00007aa0 	.word	0x00007aa0
    2d18:	0000ffff 	.word	0x0000ffff

00002d1c <dir_register>:
{
    2d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d1e:	46de      	mov	lr, fp
    2d20:	4657      	mov	r7, sl
    2d22:	464e      	mov	r6, r9
    2d24:	4645      	mov	r5, r8
    2d26:	b5e0      	push	{r5, r6, r7, lr}
    2d28:	b089      	sub	sp, #36	; 0x24
    2d2a:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    2d2c:	6987      	ldr	r7, [r0, #24]
    2d2e:	69c3      	ldr	r3, [r0, #28]
    2d30:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    2d32:	ad05      	add	r5, sp, #20
    2d34:	220c      	movs	r2, #12
    2d36:	0039      	movs	r1, r7
    2d38:	0028      	movs	r0, r5
    2d3a:	4ba7      	ldr	r3, [pc, #668]	; (2fd8 <dir_register+0x2bc>)
    2d3c:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    2d3e:	7aeb      	ldrb	r3, [r5, #11]
    2d40:	07db      	lsls	r3, r3, #31
    2d42:	d400      	bmi.n	2d46 <dir_register+0x2a>
    2d44:	e070      	b.n	2e28 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    2d46:	2300      	movs	r3, #0
    2d48:	72fb      	strb	r3, [r7, #11]
    2d4a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    2d4c:	220b      	movs	r2, #11
    2d4e:	a905      	add	r1, sp, #20
    2d50:	0038      	movs	r0, r7
    2d52:	4ba1      	ldr	r3, [pc, #644]	; (2fd8 <dir_register+0x2bc>)
    2d54:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    2d56:	2301      	movs	r3, #1
		ns[i--] = c;
    2d58:	ad03      	add	r5, sp, #12
    2d5a:	001e      	movs	r6, r3
    2d5c:	46a0      	mov	r8, r4
    2d5e:	e049      	b.n	2df4 <dir_register+0xd8>
    2d60:	3801      	subs	r0, #1
    2d62:	1829      	adds	r1, r5, r0
    2d64:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    2d66:	091b      	lsrs	r3, r3, #4
    2d68:	b29b      	uxth	r3, r3
	} while (seq);
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d007      	beq.n	2d7e <dir_register+0x62>
		c = (seq % 16) + '0';
    2d6e:	0021      	movs	r1, r4
    2d70:	4019      	ands	r1, r3
    2d72:	000a      	movs	r2, r1
    2d74:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    2d76:	2a39      	cmp	r2, #57	; 0x39
    2d78:	d9f2      	bls.n	2d60 <dir_register+0x44>
    2d7a:	3207      	adds	r2, #7
    2d7c:	e7f0      	b.n	2d60 <dir_register+0x44>
	ns[i] = '~';
    2d7e:	337e      	adds	r3, #126	; 0x7e
    2d80:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    2d82:	2800      	cmp	r0, #0
    2d84:	d00a      	beq.n	2d9c <dir_register+0x80>
    2d86:	783b      	ldrb	r3, [r7, #0]
    2d88:	2b20      	cmp	r3, #32
    2d8a:	d009      	beq.n	2da0 <dir_register+0x84>
    2d8c:	2300      	movs	r3, #0
    2d8e:	3301      	adds	r3, #1
    2d90:	4298      	cmp	r0, r3
    2d92:	d007      	beq.n	2da4 <dir_register+0x88>
    2d94:	5cfa      	ldrb	r2, [r7, r3]
    2d96:	2a20      	cmp	r2, #32
    2d98:	d1f9      	bne.n	2d8e <dir_register+0x72>
    2d9a:	e009      	b.n	2db0 <dir_register+0x94>
    2d9c:	0003      	movs	r3, r0
    2d9e:	e007      	b.n	2db0 <dir_register+0x94>
    2da0:	2300      	movs	r3, #0
    2da2:	e005      	b.n	2db0 <dir_register+0x94>
    2da4:	0003      	movs	r3, r0
    2da6:	e003      	b.n	2db0 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    2da8:	54fa      	strb	r2, [r7, r3]
    2daa:	3301      	adds	r3, #1
	} while (j < 8);
    2dac:	2b07      	cmp	r3, #7
    2dae:	d805      	bhi.n	2dbc <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    2db0:	2220      	movs	r2, #32
    2db2:	2807      	cmp	r0, #7
    2db4:	d8f8      	bhi.n	2da8 <dir_register+0x8c>
    2db6:	5c2a      	ldrb	r2, [r5, r0]
    2db8:	3001      	adds	r0, #1
    2dba:	e7f5      	b.n	2da8 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    2dbc:	4640      	mov	r0, r8
    2dbe:	4b87      	ldr	r3, [pc, #540]	; (2fdc <dir_register+0x2c0>)
    2dc0:	4798      	blx	r3
			if (res != FR_OK) break;
    2dc2:	2800      	cmp	r0, #0
    2dc4:	d11c      	bne.n	2e00 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    2dc6:	3601      	adds	r6, #1
    2dc8:	b2b6      	uxth	r6, r6
    2dca:	2e64      	cmp	r6, #100	; 0x64
    2dcc:	d015      	beq.n	2dfa <dir_register+0xde>
	mem_cpy(dst, src, 11);
    2dce:	220b      	movs	r2, #11
    2dd0:	a905      	add	r1, sp, #20
    2dd2:	0038      	movs	r0, r7
    2dd4:	4b80      	ldr	r3, [pc, #512]	; (2fd8 <dir_register+0x2bc>)
    2dd6:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    2dd8:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    2dda:	2e05      	cmp	r6, #5
    2ddc:	d90a      	bls.n	2df4 <dir_register+0xd8>
    2dde:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    2de0:	085a      	lsrs	r2, r3, #1
    2de2:	03db      	lsls	r3, r3, #15
    2de4:	4313      	orrs	r3, r2
    2de6:	880a      	ldrh	r2, [r1, #0]
    2de8:	189b      	adds	r3, r3, r2
    2dea:	b29b      	uxth	r3, r3
    2dec:	3102      	adds	r1, #2
    2dee:	880a      	ldrh	r2, [r1, #0]
    2df0:	2a00      	cmp	r2, #0
    2df2:	d1f5      	bne.n	2de0 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    2df4:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    2df6:	240f      	movs	r4, #15
    2df8:	e7b9      	b.n	2d6e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    2dfa:	2307      	movs	r3, #7
    2dfc:	4698      	mov	r8, r3
    2dfe:	e006      	b.n	2e0e <dir_register+0xf2>
    2e00:	4644      	mov	r4, r8
    2e02:	4680      	mov	r8, r0
    2e04:	2e64      	cmp	r6, #100	; 0x64
    2e06:	d100      	bne.n	2e0a <dir_register+0xee>
    2e08:	e0a5      	b.n	2f56 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    2e0a:	2804      	cmp	r0, #4
    2e0c:	d007      	beq.n	2e1e <dir_register+0x102>
}
    2e0e:	4640      	mov	r0, r8
    2e10:	b009      	add	sp, #36	; 0x24
    2e12:	bc3c      	pop	{r2, r3, r4, r5}
    2e14:	4690      	mov	r8, r2
    2e16:	4699      	mov	r9, r3
    2e18:	46a2      	mov	sl, r4
    2e1a:	46ab      	mov	fp, r5
    2e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    2e1e:	ab05      	add	r3, sp, #20
    2e20:	7adb      	ldrb	r3, [r3, #11]
    2e22:	72fb      	strb	r3, [r7, #11]
    2e24:	4653      	mov	r3, sl
    2e26:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    2e28:	ab05      	add	r3, sp, #20
    2e2a:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    2e2c:	2201      	movs	r2, #1
    2e2e:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    2e30:	079b      	lsls	r3, r3, #30
    2e32:	d511      	bpl.n	2e58 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    2e34:	4653      	mov	r3, sl
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d01b      	beq.n	2e74 <dir_register+0x158>
    2e3c:	2000      	movs	r0, #0
    2e3e:	4652      	mov	r2, sl
    2e40:	3001      	adds	r0, #1
    2e42:	b280      	uxth	r0, r0
    2e44:	0043      	lsls	r3, r0, #1
    2e46:	5a9b      	ldrh	r3, [r3, r2]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d1f9      	bne.n	2e40 <dir_register+0x124>
		ne = (ne + 25) / 13;
    2e4c:	3019      	adds	r0, #25
    2e4e:	210d      	movs	r1, #13
    2e50:	4b63      	ldr	r3, [pc, #396]	; (2fe0 <dir_register+0x2c4>)
    2e52:	4798      	blx	r3
    2e54:	b283      	uxth	r3, r0
    2e56:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    2e58:	2100      	movs	r1, #0
    2e5a:	0020      	movs	r0, r4
    2e5c:	4b61      	ldr	r3, [pc, #388]	; (2fe4 <dir_register+0x2c8>)
    2e5e:	4798      	blx	r3
    2e60:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    2e62:	2800      	cmp	r0, #0
    2e64:	d1d3      	bne.n	2e0e <dir_register+0xf2>
    2e66:	4682      	mov	sl, r0
    2e68:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    2e6a:	4f5f      	ldr	r7, [pc, #380]	; (2fe8 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    2e6c:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    2e6e:	4b5f      	ldr	r3, [pc, #380]	; (2fec <dir_register+0x2d0>)
    2e70:	4699      	mov	r9, r3
    2e72:	e00b      	b.n	2e8c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    2e74:	2000      	movs	r0, #0
    2e76:	e7e9      	b.n	2e4c <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    2e78:	1c6b      	adds	r3, r5, #1
    2e7a:	b29b      	uxth	r3, r3
    2e7c:	459b      	cmp	fp, r3
    2e7e:	d06d      	beq.n	2f5c <dir_register+0x240>
    2e80:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    2e82:	2101      	movs	r1, #1
    2e84:	0020      	movs	r0, r4
    2e86:	47c8      	blx	r9
	} while (res == FR_OK);
    2e88:	2800      	cmp	r0, #0
    2e8a:	d112      	bne.n	2eb2 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    2e8c:	6921      	ldr	r1, [r4, #16]
    2e8e:	6820      	ldr	r0, [r4, #0]
    2e90:	47b8      	blx	r7
		if (res != FR_OK) break;
    2e92:	2800      	cmp	r0, #0
    2e94:	d000      	beq.n	2e98 <dir_register+0x17c>
    2e96:	e098      	b.n	2fca <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    2e98:	6963      	ldr	r3, [r4, #20]
    2e9a:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    2e9c:	2be5      	cmp	r3, #229	; 0xe5
    2e9e:	d001      	beq.n	2ea4 <dir_register+0x188>
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d104      	bne.n	2eae <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    2ea4:	2d00      	cmp	r5, #0
    2ea6:	d1e7      	bne.n	2e78 <dir_register+0x15c>
    2ea8:	88e3      	ldrh	r3, [r4, #6]
    2eaa:	469a      	mov	sl, r3
    2eac:	e7e4      	b.n	2e78 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    2eae:	0035      	movs	r5, r6
    2eb0:	e7e7      	b.n	2e82 <dir_register+0x166>
    2eb2:	4680      	mov	r8, r0
    2eb4:	e7ab      	b.n	2e0e <dir_register+0xf2>
		res = dir_sdi(dj, is);
    2eb6:	4651      	mov	r1, sl
    2eb8:	0020      	movs	r0, r4
    2eba:	4b4a      	ldr	r3, [pc, #296]	; (2fe4 <dir_register+0x2c8>)
    2ebc:	4798      	blx	r3
    2ebe:	4680      	mov	r8, r0
		if (res == FR_OK) {
    2ec0:	2800      	cmp	r0, #0
    2ec2:	d1a4      	bne.n	2e0e <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    2ec4:	69a0      	ldr	r0, [r4, #24]
    2ec6:	4b4a      	ldr	r3, [pc, #296]	; (2ff0 <dir_register+0x2d4>)
    2ec8:	4798      	blx	r3
    2eca:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    2ecc:	46a8      	mov	r8, r5
    2ece:	e01f      	b.n	2f10 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    2ed0:	0022      	movs	r2, r4
    2ed2:	e067      	b.n	2fa4 <dir_register+0x288>
    2ed4:	465e      	mov	r6, fp
    2ed6:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    2ed8:	4946      	ldr	r1, [pc, #280]	; (2ff4 <dir_register+0x2d8>)
    2eda:	428b      	cmp	r3, r1
    2edc:	d003      	beq.n	2ee6 <dir_register+0x1ca>
    2ede:	0052      	lsls	r2, r2, #1
    2ee0:	5b93      	ldrh	r3, [r2, r6]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d103      	bne.n	2eee <dir_register+0x1d2>
    2ee6:	2340      	movs	r3, #64	; 0x40
    2ee8:	464a      	mov	r2, r9
    2eea:	431a      	orrs	r2, r3
    2eec:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    2eee:	464b      	mov	r3, r9
    2ef0:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    2ef2:	2301      	movs	r3, #1
    2ef4:	6822      	ldr	r2, [r4, #0]
    2ef6:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    2ef8:	2100      	movs	r1, #0
    2efa:	0020      	movs	r0, r4
    2efc:	4b3b      	ldr	r3, [pc, #236]	; (2fec <dir_register+0x2d0>)
    2efe:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    2f00:	2800      	cmp	r0, #0
    2f02:	d166      	bne.n	2fd2 <dir_register+0x2b6>
    2f04:	4645      	mov	r5, r8
    2f06:	3d01      	subs	r5, #1
    2f08:	b2ab      	uxth	r3, r5
    2f0a:	4698      	mov	r8, r3
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d027      	beq.n	2f60 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    2f10:	6921      	ldr	r1, [r4, #16]
    2f12:	6820      	ldr	r0, [r4, #0]
    2f14:	4b34      	ldr	r3, [pc, #208]	; (2fe8 <dir_register+0x2cc>)
    2f16:	4798      	blx	r3
				if (res != FR_OK) break;
    2f18:	2800      	cmp	r0, #0
    2f1a:	d158      	bne.n	2fce <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    2f1c:	69e6      	ldr	r6, [r4, #28]
    2f1e:	6960      	ldr	r0, [r4, #20]
    2f20:	4643      	mov	r3, r8
    2f22:	466a      	mov	r2, sp
    2f24:	70d3      	strb	r3, [r2, #3]
    2f26:	78d3      	ldrb	r3, [r2, #3]
    2f28:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    2f2a:	7913      	ldrb	r3, [r2, #4]
    2f2c:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    2f2e:	230f      	movs	r3, #15
    2f30:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    2f32:	2300      	movs	r3, #0
    2f34:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    2f36:	7683      	strb	r3, [r0, #26]
    2f38:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    2f3a:	464b      	mov	r3, r9
    2f3c:	3b01      	subs	r3, #1
    2f3e:	005a      	lsls	r2, r3, #1
    2f40:	18d2      	adds	r2, r2, r3
    2f42:	0092      	lsls	r2, r2, #2
    2f44:	18d2      	adds	r2, r2, r3
    2f46:	492c      	ldr	r1, [pc, #176]	; (2ff8 <dir_register+0x2dc>)
    2f48:	000d      	movs	r5, r1
    2f4a:	350d      	adds	r5, #13
	s = wc = 0;
    2f4c:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    2f4e:	4f29      	ldr	r7, [pc, #164]	; (2ff4 <dir_register+0x2d8>)
    2f50:	46b3      	mov	fp, r6
    2f52:	46a4      	mov	ip, r4
    2f54:	e029      	b.n	2faa <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    2f56:	2307      	movs	r3, #7
    2f58:	4698      	mov	r8, r3
    2f5a:	e758      	b.n	2e0e <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    2f5c:	2b01      	cmp	r3, #1
    2f5e:	d8aa      	bhi.n	2eb6 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    2f60:	6921      	ldr	r1, [r4, #16]
    2f62:	6820      	ldr	r0, [r4, #0]
    2f64:	4b20      	ldr	r3, [pc, #128]	; (2fe8 <dir_register+0x2cc>)
    2f66:	4798      	blx	r3
    2f68:	4680      	mov	r8, r0
		if (res == FR_OK) {
    2f6a:	2800      	cmp	r0, #0
    2f6c:	d000      	beq.n	2f70 <dir_register+0x254>
    2f6e:	e74e      	b.n	2e0e <dir_register+0xf2>
			dir = dj->dir;
    2f70:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    2f72:	2220      	movs	r2, #32
    2f74:	2100      	movs	r1, #0
    2f76:	0028      	movs	r0, r5
    2f78:	4b20      	ldr	r3, [pc, #128]	; (2ffc <dir_register+0x2e0>)
    2f7a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2f7c:	220b      	movs	r2, #11
    2f7e:	69a1      	ldr	r1, [r4, #24]
    2f80:	0028      	movs	r0, r5
    2f82:	4b15      	ldr	r3, [pc, #84]	; (2fd8 <dir_register+0x2bc>)
    2f84:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    2f86:	69a3      	ldr	r3, [r4, #24]
    2f88:	7ada      	ldrb	r2, [r3, #11]
    2f8a:	2318      	movs	r3, #24
    2f8c:	4013      	ands	r3, r2
    2f8e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    2f90:	6823      	ldr	r3, [r4, #0]
    2f92:	2201      	movs	r2, #1
    2f94:	711a      	strb	r2, [r3, #4]
    2f96:	e73a      	b.n	2e0e <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    2f98:	780c      	ldrb	r4, [r1, #0]
    2f9a:	26ff      	movs	r6, #255	; 0xff
    2f9c:	5506      	strb	r6, [r0, r4]
    2f9e:	1904      	adds	r4, r0, r4
    2fa0:	26ff      	movs	r6, #255	; 0xff
    2fa2:	7066      	strb	r6, [r4, #1]
    2fa4:	3101      	adds	r1, #1
	} while (++s < 13);
    2fa6:	42a9      	cmp	r1, r5
    2fa8:	d094      	beq.n	2ed4 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    2faa:	42bb      	cmp	r3, r7
    2fac:	d0f4      	beq.n	2f98 <dir_register+0x27c>
    2fae:	1c54      	adds	r4, r2, #1
    2fb0:	0052      	lsls	r2, r2, #1
    2fb2:	465b      	mov	r3, fp
    2fb4:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    2fb6:	780a      	ldrb	r2, [r1, #0]
    2fb8:	5483      	strb	r3, [r0, r2]
    2fba:	1882      	adds	r2, r0, r2
    2fbc:	0a1e      	lsrs	r6, r3, #8
    2fbe:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d185      	bne.n	2ed0 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    2fc4:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    2fc6:	003b      	movs	r3, r7
    2fc8:	e7ec      	b.n	2fa4 <dir_register+0x288>
    2fca:	4680      	mov	r8, r0
    2fcc:	e71f      	b.n	2e0e <dir_register+0xf2>
    2fce:	4680      	mov	r8, r0
    2fd0:	e71d      	b.n	2e0e <dir_register+0xf2>
    2fd2:	4680      	mov	r8, r0
    2fd4:	e71b      	b.n	2e0e <dir_register+0xf2>
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	000020c9 	.word	0x000020c9
    2fdc:	00002b85 	.word	0x00002b85
    2fe0:	000064bd 	.word	0x000064bd
    2fe4:	00002745 	.word	0x00002745
    2fe8:	000025a9 	.word	0x000025a9
    2fec:	00002a61 	.word	0x00002a61
    2ff0:	00002107 	.word	0x00002107
    2ff4:	0000ffff 	.word	0x0000ffff
    2ff8:	00007aa0 	.word	0x00007aa0
    2ffc:	000020dd 	.word	0x000020dd

00003000 <sync>:
{
    3000:	b570      	push	{r4, r5, r6, lr}
    3002:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    3004:	2100      	movs	r1, #0
    3006:	4b2c      	ldr	r3, [pc, #176]	; (30b8 <sync+0xb8>)
    3008:	4798      	blx	r3
	if (res == FR_OK) {
    300a:	2800      	cmp	r0, #0
    300c:	d10a      	bne.n	3024 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    300e:	7823      	ldrb	r3, [r4, #0]
    3010:	2b03      	cmp	r3, #3
    3012:	d008      	beq.n	3026 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    3014:	7860      	ldrb	r0, [r4, #1]
    3016:	2200      	movs	r2, #0
    3018:	2100      	movs	r1, #0
    301a:	4b28      	ldr	r3, [pc, #160]	; (30bc <sync+0xbc>)
    301c:	4798      	blx	r3
    301e:	1e43      	subs	r3, r0, #1
    3020:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    3022:	b2c0      	uxtb	r0, r0
}
    3024:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    3026:	7963      	ldrb	r3, [r4, #5]
    3028:	2b00      	cmp	r3, #0
    302a:	d0f3      	beq.n	3014 <sync+0x14>
			fs->winsect = 0;
    302c:	2600      	movs	r6, #0
    302e:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    3030:	0025      	movs	r5, r4
    3032:	3530      	adds	r5, #48	; 0x30
    3034:	2280      	movs	r2, #128	; 0x80
    3036:	0092      	lsls	r2, r2, #2
    3038:	2100      	movs	r1, #0
    303a:	0028      	movs	r0, r5
    303c:	4b20      	ldr	r3, [pc, #128]	; (30c0 <sync+0xc0>)
    303e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    3040:	2255      	movs	r2, #85	; 0x55
    3042:	4b20      	ldr	r3, [pc, #128]	; (30c4 <sync+0xc4>)
    3044:	54e2      	strb	r2, [r4, r3]
    3046:	3255      	adds	r2, #85	; 0x55
    3048:	4b1f      	ldr	r3, [pc, #124]	; (30c8 <sync+0xc8>)
    304a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    304c:	3bde      	subs	r3, #222	; 0xde
    304e:	3bff      	subs	r3, #255	; 0xff
    3050:	3a7a      	subs	r2, #122	; 0x7a
    3052:	54a3      	strb	r3, [r4, r2]
    3054:	3201      	adds	r2, #1
    3056:	54a3      	strb	r3, [r4, r2]
    3058:	330f      	adds	r3, #15
    305a:	3201      	adds	r2, #1
    305c:	54a3      	strb	r3, [r4, r2]
    305e:	320f      	adds	r2, #15
    3060:	2133      	movs	r1, #51	; 0x33
    3062:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    3064:	313f      	adds	r1, #63	; 0x3f
    3066:	2085      	movs	r0, #133	; 0x85
    3068:	0080      	lsls	r0, r0, #2
    306a:	5421      	strb	r1, [r4, r0]
    306c:	4817      	ldr	r0, [pc, #92]	; (30cc <sync+0xcc>)
    306e:	5421      	strb	r1, [r4, r0]
    3070:	4917      	ldr	r1, [pc, #92]	; (30d0 <sync+0xd0>)
    3072:	5462      	strb	r2, [r4, r1]
    3074:	4a17      	ldr	r2, [pc, #92]	; (30d4 <sync+0xd4>)
    3076:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    3078:	6923      	ldr	r3, [r4, #16]
    307a:	3201      	adds	r2, #1
    307c:	54a3      	strb	r3, [r4, r2]
    307e:	0a19      	lsrs	r1, r3, #8
    3080:	4a15      	ldr	r2, [pc, #84]	; (30d8 <sync+0xd8>)
    3082:	54a1      	strb	r1, [r4, r2]
    3084:	0c19      	lsrs	r1, r3, #16
    3086:	4a15      	ldr	r2, [pc, #84]	; (30dc <sync+0xdc>)
    3088:	54a1      	strb	r1, [r4, r2]
    308a:	0e1b      	lsrs	r3, r3, #24
    308c:	4a14      	ldr	r2, [pc, #80]	; (30e0 <sync+0xe0>)
    308e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    3090:	68e3      	ldr	r3, [r4, #12]
    3092:	3201      	adds	r2, #1
    3094:	54a3      	strb	r3, [r4, r2]
    3096:	0a19      	lsrs	r1, r3, #8
    3098:	4a12      	ldr	r2, [pc, #72]	; (30e4 <sync+0xe4>)
    309a:	54a1      	strb	r1, [r4, r2]
    309c:	0c19      	lsrs	r1, r3, #16
    309e:	4a12      	ldr	r2, [pc, #72]	; (30e8 <sync+0xe8>)
    30a0:	54a1      	strb	r1, [r4, r2]
    30a2:	0e1b      	lsrs	r3, r3, #24
    30a4:	4a11      	ldr	r2, [pc, #68]	; (30ec <sync+0xec>)
    30a6:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    30a8:	7860      	ldrb	r0, [r4, #1]
    30aa:	2301      	movs	r3, #1
    30ac:	6962      	ldr	r2, [r4, #20]
    30ae:	0029      	movs	r1, r5
    30b0:	4d0f      	ldr	r5, [pc, #60]	; (30f0 <sync+0xf0>)
    30b2:	47a8      	blx	r5
			fs->fsi_flag = 0;
    30b4:	7166      	strb	r6, [r4, #5]
    30b6:	e7ad      	b.n	3014 <sync+0x14>
    30b8:	000025a9 	.word	0x000025a9
    30bc:	0000200d 	.word	0x0000200d
    30c0:	000020dd 	.word	0x000020dd
    30c4:	0000022e 	.word	0x0000022e
    30c8:	0000022f 	.word	0x0000022f
    30cc:	00000215 	.word	0x00000215
    30d0:	00000216 	.word	0x00000216
    30d4:	00000217 	.word	0x00000217
    30d8:	00000219 	.word	0x00000219
    30dc:	0000021a 	.word	0x0000021a
    30e0:	0000021b 	.word	0x0000021b
    30e4:	0000021d 	.word	0x0000021d
    30e8:	0000021e 	.word	0x0000021e
    30ec:	0000021f 	.word	0x0000021f
    30f0:	00001f89 	.word	0x00001f89

000030f4 <follow_path>:
{
    30f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30f6:	46de      	mov	lr, fp
    30f8:	4657      	mov	r7, sl
    30fa:	464e      	mov	r6, r9
    30fc:	4645      	mov	r5, r8
    30fe:	b5e0      	push	{r5, r6, r7, lr}
    3100:	b083      	sub	sp, #12
    3102:	4682      	mov	sl, r0
    3104:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    3106:	780b      	ldrb	r3, [r1, #0]
    3108:	2b2f      	cmp	r3, #47	; 0x2f
    310a:	d00f      	beq.n	312c <follow_path+0x38>
    310c:	2b5c      	cmp	r3, #92	; 0x5c
    310e:	d00d      	beq.n	312c <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    3110:	2300      	movs	r3, #0
    3112:	4652      	mov	r2, sl
    3114:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    3116:	782b      	ldrb	r3, [r5, #0]
    3118:	4657      	mov	r7, sl
    311a:	2b1f      	cmp	r3, #31
    311c:	d809      	bhi.n	3132 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    311e:	2100      	movs	r1, #0
    3120:	4650      	mov	r0, sl
    3122:	4bb2      	ldr	r3, [pc, #712]	; (33ec <follow_path+0x2f8>)
    3124:	4798      	blx	r3
		dj->dir = 0;
    3126:	2300      	movs	r3, #0
    3128:	617b      	str	r3, [r7, #20]
    312a:	e13a      	b.n	33a2 <follow_path+0x2ae>
		path++;
    312c:	3501      	adds	r5, #1
    312e:	e7ef      	b.n	3110 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    3130:	3501      	adds	r5, #1
    3132:	7828      	ldrb	r0, [r5, #0]
    3134:	282f      	cmp	r0, #47	; 0x2f
    3136:	d0fb      	beq.n	3130 <follow_path+0x3c>
    3138:	285c      	cmp	r0, #92	; 0x5c
    313a:	d0f9      	beq.n	3130 <follow_path+0x3c>
	lfn = dj->lfn;
    313c:	69fb      	ldr	r3, [r7, #28]
    313e:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    3140:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    3142:	281f      	cmp	r0, #31
    3144:	d800      	bhi.n	3148 <follow_path+0x54>
    3146:	e13b      	b.n	33c0 <follow_path+0x2cc>
    3148:	282f      	cmp	r0, #47	; 0x2f
    314a:	d100      	bne.n	314e <follow_path+0x5a>
    314c:	e13b      	b.n	33c6 <follow_path+0x2d2>
    314e:	285c      	cmp	r0, #92	; 0x5c
    3150:	d100      	bne.n	3154 <follow_path+0x60>
    3152:	e13b      	b.n	33cc <follow_path+0x2d8>
    3154:	1c6e      	adds	r6, r5, #1
    3156:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    3158:	2380      	movs	r3, #128	; 0x80
    315a:	005b      	lsls	r3, r3, #1
    315c:	4698      	mov	r8, r3
    315e:	46bb      	mov	fp, r7
    3160:	002b      	movs	r3, r5
    3162:	0025      	movs	r5, r4
    3164:	0034      	movs	r4, r6
    3166:	4656      	mov	r6, sl
    3168:	4699      	mov	r9, r3
    316a:	e011      	b.n	3190 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    316c:	2b00      	cmp	r3, #0
    316e:	d135      	bne.n	31dc <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    3170:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    3172:	1c6b      	adds	r3, r5, #1
    3174:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    3176:	281f      	cmp	r0, #31
    3178:	d91e      	bls.n	31b8 <follow_path+0xc4>
    317a:	282f      	cmp	r0, #47	; 0x2f
    317c:	d100      	bne.n	3180 <follow_path+0x8c>
    317e:	e128      	b.n	33d2 <follow_path+0x2de>
    3180:	285c      	cmp	r0, #92	; 0x5c
    3182:	d100      	bne.n	3186 <follow_path+0x92>
    3184:	e142      	b.n	340c <follow_path+0x318>
    3186:	3602      	adds	r6, #2
    3188:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    318a:	4543      	cmp	r3, r8
    318c:	d026      	beq.n	31dc <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    318e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    3190:	2101      	movs	r1, #1
    3192:	4b97      	ldr	r3, [pc, #604]	; (33f0 <follow_path+0x2fc>)
    3194:	4798      	blx	r3
    3196:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    3198:	d020      	beq.n	31dc <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    319a:	287f      	cmp	r0, #127	; 0x7f
    319c:	d8e8      	bhi.n	3170 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    319e:	2822      	cmp	r0, #34	; 0x22
    31a0:	d100      	bne.n	31a4 <follow_path+0xb0>
    31a2:	e0fd      	b.n	33a0 <follow_path+0x2ac>
    31a4:	232a      	movs	r3, #42	; 0x2a
    31a6:	4a93      	ldr	r2, [pc, #588]	; (33f4 <follow_path+0x300>)
    31a8:	b29f      	uxth	r7, r3
    31aa:	428f      	cmp	r7, r1
    31ac:	d0de      	beq.n	316c <follow_path+0x78>
    31ae:	3201      	adds	r2, #1
    31b0:	7813      	ldrb	r3, [r2, #0]
    31b2:	2b00      	cmp	r3, #0
    31b4:	d1f8      	bne.n	31a8 <follow_path+0xb4>
    31b6:	e7db      	b.n	3170 <follow_path+0x7c>
    31b8:	002c      	movs	r4, r5
    31ba:	465f      	mov	r7, fp
    31bc:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    31be:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    31c0:	2604      	movs	r6, #4
    31c2:	e10b      	b.n	33dc <follow_path+0x2e8>
		di--;
    31c4:	3c01      	subs	r4, #1
    31c6:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    31c8:	2c00      	cmp	r4, #0
    31ca:	d100      	bne.n	31ce <follow_path+0xda>
    31cc:	e0e8      	b.n	33a0 <follow_path+0x2ac>
		w = lfn[di-1];
    31ce:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    31d0:	2a20      	cmp	r2, #32
    31d2:	d0f7      	beq.n	31c4 <follow_path+0xd0>
    31d4:	2a2e      	cmp	r2, #46	; 0x2e
    31d6:	d0f5      	beq.n	31c4 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    31d8:	2c00      	cmp	r4, #0
    31da:	d101      	bne.n	31e0 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    31dc:	2006      	movs	r0, #6
	return res;
    31de:	e0e0      	b.n	33a2 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    31e0:	0063      	lsls	r3, r4, #1
    31e2:	4698      	mov	r8, r3
    31e4:	2300      	movs	r3, #0
    31e6:	4652      	mov	r2, sl
    31e8:	4641      	mov	r1, r8
    31ea:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    31ec:	220b      	movs	r2, #11
    31ee:	2120      	movs	r1, #32
    31f0:	69b8      	ldr	r0, [r7, #24]
    31f2:	4b81      	ldr	r3, [pc, #516]	; (33f8 <follow_path+0x304>)
    31f4:	4798      	blx	r3
    31f6:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    31f8:	2300      	movs	r3, #0
    31fa:	e001      	b.n	3200 <follow_path+0x10c>
    31fc:	3301      	adds	r3, #1
    31fe:	3202      	adds	r2, #2
    3200:	8811      	ldrh	r1, [r2, #0]
    3202:	2920      	cmp	r1, #32
    3204:	d0fa      	beq.n	31fc <follow_path+0x108>
    3206:	292e      	cmp	r1, #46	; 0x2e
    3208:	d0f8      	beq.n	31fc <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    320a:	2b00      	cmp	r3, #0
    320c:	d001      	beq.n	3212 <follow_path+0x11e>
    320e:	2203      	movs	r2, #3
    3210:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    3212:	4652      	mov	r2, sl
    3214:	4442      	add	r2, r8
    3216:	3a02      	subs	r2, #2
    3218:	8812      	ldrh	r2, [r2, #0]
    321a:	2a2e      	cmp	r2, #46	; 0x2e
    321c:	d009      	beq.n	3232 <follow_path+0x13e>
    321e:	4642      	mov	r2, r8
    3220:	3a04      	subs	r2, #4
    3222:	4452      	add	r2, sl
    3224:	3c01      	subs	r4, #1
    3226:	2c00      	cmp	r4, #0
    3228:	d003      	beq.n	3232 <follow_path+0x13e>
    322a:	3a02      	subs	r2, #2
    322c:	8851      	ldrh	r1, [r2, #2]
    322e:	292e      	cmp	r1, #46	; 0x2e
    3230:	d1f8      	bne.n	3224 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    3232:	2208      	movs	r2, #8
    3234:	9201      	str	r2, [sp, #4]
    3236:	2200      	movs	r2, #0
    3238:	4693      	mov	fp, r2
    323a:	4691      	mov	r9, r2
    323c:	46a0      	mov	r8, r4
    323e:	e006      	b.n	324e <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    3240:	4544      	cmp	r4, r8
    3242:	d100      	bne.n	3246 <follow_path+0x152>
    3244:	e0e6      	b.n	3414 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    3246:	2303      	movs	r3, #3
    3248:	431e      	orrs	r6, r3
    324a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    324c:	0023      	movs	r3, r4
    324e:	1c5c      	adds	r4, r3, #1
    3250:	005b      	lsls	r3, r3, #1
    3252:	4652      	mov	r2, sl
    3254:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    3256:	2800      	cmp	r0, #0
    3258:	d02c      	beq.n	32b4 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    325a:	2820      	cmp	r0, #32
    325c:	d0f3      	beq.n	3246 <follow_path+0x152>
    325e:	282e      	cmp	r0, #46	; 0x2e
    3260:	d0ee      	beq.n	3240 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    3262:	9b01      	ldr	r3, [sp, #4]
    3264:	459b      	cmp	fp, r3
    3266:	d219      	bcs.n	329c <follow_path+0x1a8>
    3268:	4544      	cmp	r4, r8
    326a:	d100      	bne.n	326e <follow_path+0x17a>
    326c:	e0d2      	b.n	3414 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    326e:	287f      	cmp	r0, #127	; 0x7f
    3270:	d85e      	bhi.n	3330 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    3272:	282b      	cmp	r0, #43	; 0x2b
    3274:	d06e      	beq.n	3354 <follow_path+0x260>
    3276:	232c      	movs	r3, #44	; 0x2c
    3278:	4a60      	ldr	r2, [pc, #384]	; (33fc <follow_path+0x308>)
    327a:	b299      	uxth	r1, r3
    327c:	4281      	cmp	r1, r0
    327e:	d067      	beq.n	3350 <follow_path+0x25c>
    3280:	3201      	adds	r2, #1
    3282:	7813      	ldrb	r3, [r2, #0]
    3284:	2b00      	cmp	r3, #0
    3286:	d1f8      	bne.n	327a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    3288:	0003      	movs	r3, r0
    328a:	3b41      	subs	r3, #65	; 0x41
    328c:	b29b      	uxth	r3, r3
    328e:	2b19      	cmp	r3, #25
    3290:	d86c      	bhi.n	336c <follow_path+0x278>
					b |= 2;
    3292:	2302      	movs	r3, #2
    3294:	464a      	mov	r2, r9
    3296:	431a      	orrs	r2, r3
    3298:	4691      	mov	r9, r2
    329a:	e05f      	b.n	335c <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    329c:	9b01      	ldr	r3, [sp, #4]
    329e:	2b0b      	cmp	r3, #11
    32a0:	d03b      	beq.n	331a <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    32a2:	4544      	cmp	r4, r8
    32a4:	d100      	bne.n	32a8 <follow_path+0x1b4>
    32a6:	e0b9      	b.n	341c <follow_path+0x328>
    32a8:	2303      	movs	r3, #3
    32aa:	431e      	orrs	r6, r3
    32ac:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    32ae:	4544      	cmp	r4, r8
    32b0:	d800      	bhi.n	32b4 <follow_path+0x1c0>
    32b2:	e0b3      	b.n	341c <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    32b4:	69bb      	ldr	r3, [r7, #24]
    32b6:	781a      	ldrb	r2, [r3, #0]
    32b8:	2ae5      	cmp	r2, #229	; 0xe5
    32ba:	d036      	beq.n	332a <follow_path+0x236>
	if (ni == 8) b <<= 2;
    32bc:	9b01      	ldr	r3, [sp, #4]
    32be:	2b08      	cmp	r3, #8
    32c0:	d060      	beq.n	3384 <follow_path+0x290>
    32c2:	230c      	movs	r3, #12
    32c4:	464a      	mov	r2, r9
    32c6:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    32c8:	2b0c      	cmp	r3, #12
    32ca:	d060      	beq.n	338e <follow_path+0x29a>
    32cc:	43d2      	mvns	r2, r2
    32ce:	0792      	lsls	r2, r2, #30
    32d0:	d05d      	beq.n	338e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    32d2:	07b2      	lsls	r2, r6, #30
    32d4:	d406      	bmi.n	32e4 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    32d6:	2203      	movs	r2, #3
    32d8:	4649      	mov	r1, r9
    32da:	400a      	ands	r2, r1
    32dc:	2a01      	cmp	r2, #1
    32de:	d059      	beq.n	3394 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    32e0:	2b04      	cmp	r3, #4
    32e2:	d05a      	beq.n	339a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    32e4:	69bb      	ldr	r3, [r7, #24]
    32e6:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    32e8:	0038      	movs	r0, r7
    32ea:	4b45      	ldr	r3, [pc, #276]	; (3400 <follow_path+0x30c>)
    32ec:	4798      	blx	r3
			ns = *(dj->fn+NS);
    32ee:	69bb      	ldr	r3, [r7, #24]
    32f0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    32f2:	2800      	cmp	r0, #0
    32f4:	d15c      	bne.n	33b0 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    32f6:	075b      	lsls	r3, r3, #29
    32f8:	d453      	bmi.n	33a2 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    32fa:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    32fc:	7ad3      	ldrb	r3, [r2, #11]
    32fe:	06db      	lsls	r3, r3, #27
    3300:	d55c      	bpl.n	33bc <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    3302:	7d51      	ldrb	r1, [r2, #21]
    3304:	0209      	lsls	r1, r1, #8
    3306:	7d13      	ldrb	r3, [r2, #20]
    3308:	430b      	orrs	r3, r1
    330a:	041b      	lsls	r3, r3, #16
    330c:	7ed1      	ldrb	r1, [r2, #27]
    330e:	0209      	lsls	r1, r1, #8
    3310:	7e92      	ldrb	r2, [r2, #26]
    3312:	430a      	orrs	r2, r1
    3314:	4313      	orrs	r3, r2
    3316:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    3318:	e70b      	b.n	3132 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    331a:	2303      	movs	r3, #3
    331c:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    331e:	69bb      	ldr	r3, [r7, #24]
    3320:	781a      	ldrb	r2, [r3, #0]
    3322:	2ae5      	cmp	r2, #229	; 0xe5
    3324:	d1cd      	bne.n	32c2 <follow_path+0x1ce>
    3326:	220b      	movs	r2, #11
    3328:	9201      	str	r2, [sp, #4]
    332a:	2205      	movs	r2, #5
    332c:	701a      	strb	r2, [r3, #0]
    332e:	e7c5      	b.n	32bc <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    3330:	2100      	movs	r1, #0
    3332:	4b2f      	ldr	r3, [pc, #188]	; (33f0 <follow_path+0x2fc>)
    3334:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    3336:	2800      	cmp	r0, #0
    3338:	d100      	bne.n	333c <follow_path+0x248>
    333a:	e079      	b.n	3430 <follow_path+0x33c>
    333c:	4b31      	ldr	r3, [pc, #196]	; (3404 <follow_path+0x310>)
    333e:	469c      	mov	ip, r3
    3340:	4460      	add	r0, ip
    3342:	3880      	subs	r0, #128	; 0x80
    3344:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    3346:	2302      	movs	r3, #2
    3348:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    334a:	2800      	cmp	r0, #0
    334c:	d002      	beq.n	3354 <follow_path+0x260>
    334e:	e790      	b.n	3272 <follow_path+0x17e>
    3350:	2b00      	cmp	r3, #0
    3352:	d099      	beq.n	3288 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    3354:	2303      	movs	r3, #3
    3356:	431e      	orrs	r6, r3
    3358:	b2f6      	uxtb	r6, r6
    335a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    335c:	69bb      	ldr	r3, [r7, #24]
    335e:	465a      	mov	r2, fp
    3360:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    3362:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    3364:	2201      	movs	r2, #1
    3366:	4694      	mov	ip, r2
    3368:	44e3      	add	fp, ip
    336a:	e770      	b.n	324e <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    336c:	0003      	movs	r3, r0
    336e:	3b61      	subs	r3, #97	; 0x61
    3370:	b29b      	uxth	r3, r3
    3372:	2b19      	cmp	r3, #25
    3374:	d8f2      	bhi.n	335c <follow_path+0x268>
						b |= 1; w -= 0x20;
    3376:	2301      	movs	r3, #1
    3378:	464a      	mov	r2, r9
    337a:	431a      	orrs	r2, r3
    337c:	4691      	mov	r9, r2
    337e:	3820      	subs	r0, #32
    3380:	b280      	uxth	r0, r0
    3382:	e7eb      	b.n	335c <follow_path+0x268>
	if (ni == 8) b <<= 2;
    3384:	464b      	mov	r3, r9
    3386:	009b      	lsls	r3, r3, #2
    3388:	b2db      	uxtb	r3, r3
    338a:	4699      	mov	r9, r3
    338c:	e799      	b.n	32c2 <follow_path+0x1ce>
		cf |= NS_LFN;
    338e:	2202      	movs	r2, #2
    3390:	4316      	orrs	r6, r2
    3392:	e79e      	b.n	32d2 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    3394:	320f      	adds	r2, #15
    3396:	4316      	orrs	r6, r2
    3398:	e7a2      	b.n	32e0 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    339a:	3304      	adds	r3, #4
    339c:	431e      	orrs	r6, r3
    339e:	e7a1      	b.n	32e4 <follow_path+0x1f0>
    33a0:	2006      	movs	r0, #6
}
    33a2:	b003      	add	sp, #12
    33a4:	bc3c      	pop	{r2, r3, r4, r5}
    33a6:	4690      	mov	r8, r2
    33a8:	4699      	mov	r9, r3
    33aa:	46a2      	mov	sl, r4
    33ac:	46ab      	mov	fp, r5
    33ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    33b0:	2804      	cmp	r0, #4
    33b2:	d1f6      	bne.n	33a2 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    33b4:	075b      	lsls	r3, r3, #29
    33b6:	d4f4      	bmi.n	33a2 <follow_path+0x2ae>
    33b8:	3001      	adds	r0, #1
    33ba:	e7f2      	b.n	33a2 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    33bc:	2005      	movs	r0, #5
    33be:	e7f0      	b.n	33a2 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    33c0:	2301      	movs	r3, #1
	si = di = 0;
    33c2:	2400      	movs	r4, #0
    33c4:	e6fb      	b.n	31be <follow_path+0xca>
		w = p[si++];					/* Get a character */
    33c6:	2301      	movs	r3, #1
	si = di = 0;
    33c8:	2400      	movs	r4, #0
    33ca:	e005      	b.n	33d8 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    33cc:	2301      	movs	r3, #1
	si = di = 0;
    33ce:	2400      	movs	r4, #0
    33d0:	e002      	b.n	33d8 <follow_path+0x2e4>
    33d2:	002c      	movs	r4, r5
    33d4:	465f      	mov	r7, fp
    33d6:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    33d8:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    33da:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    33dc:	2c00      	cmp	r4, #0
    33de:	d0df      	beq.n	33a0 <follow_path+0x2ac>
    33e0:	4b09      	ldr	r3, [pc, #36]	; (3408 <follow_path+0x314>)
    33e2:	18e3      	adds	r3, r4, r3
    33e4:	005b      	lsls	r3, r3, #1
    33e6:	4453      	add	r3, sl
    33e8:	e6f1      	b.n	31ce <follow_path+0xda>
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00002745 	.word	0x00002745
    33f0:	00003a55 	.word	0x00003a55
    33f4:	00007b31 	.word	0x00007b31
    33f8:	000020dd 	.word	0x000020dd
    33fc:	00007b3d 	.word	0x00007b3d
    3400:	00002b85 	.word	0x00002b85
    3404:	00007ab0 	.word	0x00007ab0
    3408:	7fffffff 	.word	0x7fffffff
    340c:	002c      	movs	r4, r5
    340e:	465f      	mov	r7, fp
    3410:	464d      	mov	r5, r9
    3412:	e7e1      	b.n	33d8 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    3414:	9b01      	ldr	r3, [sp, #4]
    3416:	2b0b      	cmp	r3, #11
    3418:	d100      	bne.n	341c <follow_path+0x328>
    341a:	e77e      	b.n	331a <follow_path+0x226>
			b <<= 2; continue;
    341c:	464b      	mov	r3, r9
    341e:	009b      	lsls	r3, r3, #2
    3420:	b2db      	uxtb	r3, r3
    3422:	4699      	mov	r9, r3
    3424:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    3426:	220b      	movs	r2, #11
    3428:	9201      	str	r2, [sp, #4]
    342a:	3a03      	subs	r2, #3
    342c:	4693      	mov	fp, r2
    342e:	e70e      	b.n	324e <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    3430:	2302      	movs	r3, #2
    3432:	431e      	orrs	r6, r3
    3434:	e78e      	b.n	3354 <follow_path+0x260>
    3436:	46c0      	nop			; (mov r8, r8)

00003438 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    3438:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    343a:	2803      	cmp	r0, #3
    343c:	d901      	bls.n	3442 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    343e:	0018      	movs	r0, r3
    3440:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    3442:	0083      	lsls	r3, r0, #2
    3444:	4a07      	ldr	r2, [pc, #28]	; (3464 <f_mount+0x2c>)
    3446:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    3448:	2b00      	cmp	r3, #0
    344a:	d001      	beq.n	3450 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    344c:	2200      	movs	r2, #0
    344e:	701a      	strb	r2, [r3, #0]
	if (fs) {
    3450:	2900      	cmp	r1, #0
    3452:	d001      	beq.n	3458 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    3454:	2300      	movs	r3, #0
    3456:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    3458:	0080      	lsls	r0, r0, #2
    345a:	4b02      	ldr	r3, [pc, #8]	; (3464 <f_mount+0x2c>)
    345c:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    345e:	2300      	movs	r3, #0
    3460:	e7ed      	b.n	343e <f_mount+0x6>
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	20000194 	.word	0x20000194

00003468 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46c6      	mov	lr, r8
    346c:	b500      	push	{lr}
    346e:	4c59      	ldr	r4, [pc, #356]	; (35d4 <f_open+0x16c>)
    3470:	44a5      	add	sp, r4
    3472:	0005      	movs	r5, r0
    3474:	9101      	str	r1, [sp, #4]
    3476:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    3478:	2300      	movs	r3, #0
    347a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    347c:	261f      	movs	r6, #31
    347e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    3480:	221e      	movs	r2, #30
    3482:	403a      	ands	r2, r7
    3484:	a985      	add	r1, sp, #532	; 0x214
    3486:	a801      	add	r0, sp, #4
    3488:	4b53      	ldr	r3, [pc, #332]	; (35d8 <f_open+0x170>)
    348a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    348c:	ab82      	add	r3, sp, #520	; 0x208
    348e:	938b      	str	r3, [sp, #556]	; 0x22c
    3490:	ab02      	add	r3, sp, #8
    3492:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    3494:	2800      	cmp	r0, #0
    3496:	d006      	beq.n	34a6 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    3498:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    349a:	231c      	movs	r3, #28
    349c:	423b      	tst	r3, r7
    349e:	d145      	bne.n	352c <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    34a0:	2800      	cmp	r0, #0
    34a2:	d13d      	bne.n	3520 <f_open+0xb8>
    34a4:	e00c      	b.n	34c0 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    34a6:	9901      	ldr	r1, [sp, #4]
    34a8:	a885      	add	r0, sp, #532	; 0x214
    34aa:	4b4c      	ldr	r3, [pc, #304]	; (35dc <f_open+0x174>)
    34ac:	4798      	blx	r3
	dir = dj.dir;
    34ae:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    34b0:	2800      	cmp	r0, #0
    34b2:	d1f2      	bne.n	349a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    34b4:	2c00      	cmp	r4, #0
    34b6:	d100      	bne.n	34ba <f_open+0x52>
    34b8:	e086      	b.n	35c8 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    34ba:	231c      	movs	r3, #28
    34bc:	423b      	tst	r3, r7
    34be:	d146      	bne.n	354e <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    34c0:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    34c2:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    34c4:	06da      	lsls	r2, r3, #27
    34c6:	d42b      	bmi.n	3520 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    34c8:	07ba      	lsls	r2, r7, #30
    34ca:	d502      	bpl.n	34d2 <f_open+0x6a>
					res = FR_DENIED;
    34cc:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    34ce:	07db      	lsls	r3, r3, #31
    34d0:	d426      	bmi.n	3520 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    34d2:	073b      	lsls	r3, r7, #28
    34d4:	d501      	bpl.n	34da <f_open+0x72>
			mode |= FA__WRITTEN;
    34d6:	2320      	movs	r3, #32
    34d8:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    34da:	9b85      	ldr	r3, [sp, #532]	; 0x214
    34dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34de:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    34e0:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    34e2:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    34e4:	7d62      	ldrb	r2, [r4, #21]
    34e6:	0212      	lsls	r2, r2, #8
    34e8:	7d23      	ldrb	r3, [r4, #20]
    34ea:	4313      	orrs	r3, r2
    34ec:	041b      	lsls	r3, r3, #16
    34ee:	7ee1      	ldrb	r1, [r4, #27]
    34f0:	0209      	lsls	r1, r1, #8
    34f2:	7ea2      	ldrb	r2, [r4, #26]
    34f4:	430a      	orrs	r2, r1
    34f6:	4313      	orrs	r3, r2
    34f8:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    34fa:	7fe3      	ldrb	r3, [r4, #31]
    34fc:	061b      	lsls	r3, r3, #24
    34fe:	7fa2      	ldrb	r2, [r4, #30]
    3500:	0412      	lsls	r2, r2, #16
    3502:	4313      	orrs	r3, r2
    3504:	7f22      	ldrb	r2, [r4, #28]
    3506:	4313      	orrs	r3, r2
    3508:	7f62      	ldrb	r2, [r4, #29]
    350a:	0212      	lsls	r2, r2, #8
    350c:	4313      	orrs	r3, r2
    350e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    3510:	2300      	movs	r3, #0
    3512:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    3514:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    3516:	9b85      	ldr	r3, [sp, #532]	; 0x214
    3518:	602b      	str	r3, [r5, #0]
    351a:	88db      	ldrh	r3, [r3, #6]
    351c:	80ab      	strh	r3, [r5, #4]
    351e:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    3520:	238e      	movs	r3, #142	; 0x8e
    3522:	009b      	lsls	r3, r3, #2
    3524:	449d      	add	sp, r3
    3526:	bc04      	pop	{r2}
    3528:	4690      	mov	r8, r2
    352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    352c:	2804      	cmp	r0, #4
    352e:	d005      	beq.n	353c <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    3530:	2308      	movs	r3, #8
    3532:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    3534:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    3536:	2800      	cmp	r0, #0
    3538:	d0d3      	beq.n	34e2 <f_open+0x7a>
    353a:	e7f1      	b.n	3520 <f_open+0xb8>
				res = dir_register(&dj);
    353c:	a885      	add	r0, sp, #532	; 0x214
    353e:	4b28      	ldr	r3, [pc, #160]	; (35e0 <f_open+0x178>)
    3540:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    3542:	2308      	movs	r3, #8
    3544:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    3546:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3548:	2800      	cmp	r0, #0
    354a:	d008      	beq.n	355e <f_open+0xf6>
    354c:	e7e8      	b.n	3520 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    354e:	7ae3      	ldrb	r3, [r4, #11]
    3550:	2211      	movs	r2, #17
				res = FR_DENIED;
    3552:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    3554:	421a      	tst	r2, r3
    3556:	d1e3      	bne.n	3520 <f_open+0xb8>
					res = FR_EXIST;
    3558:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    355a:	077b      	lsls	r3, r7, #29
    355c:	d4e0      	bmi.n	3520 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    355e:	0733      	lsls	r3, r6, #28
    3560:	d5bb      	bpl.n	34da <f_open+0x72>
			dw = get_fattime();					/* Created time */
    3562:	4b20      	ldr	r3, [pc, #128]	; (35e4 <f_open+0x17c>)
    3564:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    3566:	73a0      	strb	r0, [r4, #14]
    3568:	0a03      	lsrs	r3, r0, #8
    356a:	73e3      	strb	r3, [r4, #15]
    356c:	0c03      	lsrs	r3, r0, #16
    356e:	7423      	strb	r3, [r4, #16]
    3570:	0e00      	lsrs	r0, r0, #24
    3572:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    3574:	2300      	movs	r3, #0
    3576:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    3578:	7723      	strb	r3, [r4, #28]
    357a:	7763      	strb	r3, [r4, #29]
    357c:	77a3      	strb	r3, [r4, #30]
    357e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    3580:	7d62      	ldrb	r2, [r4, #21]
    3582:	0212      	lsls	r2, r2, #8
    3584:	7d27      	ldrb	r7, [r4, #20]
    3586:	4317      	orrs	r7, r2
    3588:	043f      	lsls	r7, r7, #16
    358a:	7ee1      	ldrb	r1, [r4, #27]
    358c:	0209      	lsls	r1, r1, #8
    358e:	7ea2      	ldrb	r2, [r4, #26]
    3590:	430a      	orrs	r2, r1
    3592:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    3594:	76a3      	strb	r3, [r4, #26]
    3596:	76e3      	strb	r3, [r4, #27]
    3598:	7523      	strb	r3, [r4, #20]
    359a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    359c:	9885      	ldr	r0, [sp, #532]	; 0x214
    359e:	3301      	adds	r3, #1
    35a0:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    35a2:	2f00      	cmp	r7, #0
    35a4:	d097      	beq.n	34d6 <f_open+0x6e>
				dw = dj.fs->winsect;
    35a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    35a8:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    35aa:	0039      	movs	r1, r7
    35ac:	4b0e      	ldr	r3, [pc, #56]	; (35e8 <f_open+0x180>)
    35ae:	4798      	blx	r3
				if (res == FR_OK) {
    35b0:	2800      	cmp	r0, #0
    35b2:	d1b5      	bne.n	3520 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    35b4:	9885      	ldr	r0, [sp, #532]	; 0x214
    35b6:	3f01      	subs	r7, #1
    35b8:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    35ba:	4641      	mov	r1, r8
    35bc:	4b0b      	ldr	r3, [pc, #44]	; (35ec <f_open+0x184>)
    35be:	4798      	blx	r3
	if (res == FR_OK) {
    35c0:	2800      	cmp	r0, #0
    35c2:	d100      	bne.n	35c6 <f_open+0x15e>
    35c4:	e787      	b.n	34d6 <f_open+0x6e>
    35c6:	e7ab      	b.n	3520 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    35c8:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    35ca:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    35cc:	423b      	tst	r3, r7
    35ce:	d0b2      	beq.n	3536 <f_open+0xce>
			res = FR_INVALID_NAME;
    35d0:	2006      	movs	r0, #6
    35d2:	e7ad      	b.n	3530 <f_open+0xc8>
    35d4:	fffffdc8 	.word	0xfffffdc8
    35d8:	000021f9 	.word	0x000021f9
    35dc:	000030f5 	.word	0x000030f5
    35e0:	00002d1d 	.word	0x00002d1d
    35e4:	00002079 	.word	0x00002079
    35e8:	000029e9 	.word	0x000029e9
    35ec:	000025a9 	.word	0x000025a9

000035f0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    35f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35f2:	46de      	mov	lr, fp
    35f4:	4657      	mov	r7, sl
    35f6:	464e      	mov	r6, r9
    35f8:	4645      	mov	r5, r8
    35fa:	b5e0      	push	{r5, r6, r7, lr}
    35fc:	b083      	sub	sp, #12
    35fe:	0004      	movs	r4, r0
    3600:	000d      	movs	r5, r1
    3602:	0016      	movs	r6, r2
    3604:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    3606:	2300      	movs	r3, #0
    3608:	464a      	mov	r2, r9
    360a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    360c:	8881      	ldrh	r1, [r0, #4]
    360e:	6800      	ldr	r0, [r0, #0]
    3610:	4b7f      	ldr	r3, [pc, #508]	; (3810 <f_write+0x220>)
    3612:	4798      	blx	r3
    3614:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3616:	2800      	cmp	r0, #0
    3618:	d000      	beq.n	361c <f_write+0x2c>
    361a:	e0f1      	b.n	3800 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    361c:	79a3      	ldrb	r3, [r4, #6]
    361e:	b25a      	sxtb	r2, r3
    3620:	2a00      	cmp	r2, #0
    3622:	da00      	bge.n	3626 <f_write+0x36>
    3624:	e0ea      	b.n	37fc <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    3626:	079b      	lsls	r3, r3, #30
    3628:	d402      	bmi.n	3630 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    362a:	2307      	movs	r3, #7
    362c:	9300      	str	r3, [sp, #0]
    362e:	e0e7      	b.n	3800 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    3630:	68e3      	ldr	r3, [r4, #12]
    3632:	199a      	adds	r2, r3, r6
    3634:	4293      	cmp	r3, r2
    3636:	d810      	bhi.n	365a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    3638:	2e00      	cmp	r6, #0
    363a:	d00e      	beq.n	365a <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    363c:	002f      	movs	r7, r5
    363e:	e07b      	b.n	3738 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3640:	2100      	movs	r1, #0
    3642:	4b74      	ldr	r3, [pc, #464]	; (3814 <f_write+0x224>)
    3644:	4798      	blx	r3
    3646:	0003      	movs	r3, r0
    3648:	6120      	str	r0, [r4, #16]
    364a:	e003      	b.n	3654 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    364c:	6961      	ldr	r1, [r4, #20]
    364e:	4b71      	ldr	r3, [pc, #452]	; (3814 <f_write+0x224>)
    3650:	4798      	blx	r3
    3652:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3654:	2b00      	cmp	r3, #0
    3656:	d000      	beq.n	365a <f_write+0x6a>
    3658:	e080      	b.n	375c <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    365a:	68a3      	ldr	r3, [r4, #8]
    365c:	68e2      	ldr	r2, [r4, #12]
    365e:	4293      	cmp	r3, r2
    3660:	d900      	bls.n	3664 <f_write+0x74>
    3662:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3664:	79a3      	ldrb	r3, [r4, #6]
    3666:	2220      	movs	r2, #32
    3668:	4313      	orrs	r3, r2
    366a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    366c:	e0c8      	b.n	3800 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    366e:	79a2      	ldrb	r2, [r4, #6]
    3670:	3b81      	subs	r3, #129	; 0x81
    3672:	4313      	orrs	r3, r2
    3674:	71a3      	strb	r3, [r4, #6]
    3676:	2302      	movs	r3, #2
    3678:	9300      	str	r3, [sp, #0]
    367a:	e0c1      	b.n	3800 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    367c:	79a2      	ldrb	r2, [r4, #6]
    367e:	3b7f      	subs	r3, #127	; 0x7f
    3680:	4313      	orrs	r3, r2
    3682:	71a3      	strb	r3, [r4, #6]
    3684:	2301      	movs	r3, #1
    3686:	9300      	str	r3, [sp, #0]
    3688:	e0ba      	b.n	3800 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    368a:	2100      	movs	r1, #0
    368c:	4b62      	ldr	r3, [pc, #392]	; (3818 <f_write+0x228>)
    368e:	4798      	blx	r3
    3690:	2800      	cmp	r0, #0
    3692:	d06d      	beq.n	3770 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    3694:	79a2      	ldrb	r2, [r4, #6]
    3696:	2380      	movs	r3, #128	; 0x80
    3698:	425b      	negs	r3, r3
    369a:	4313      	orrs	r3, r2
    369c:	71a3      	strb	r3, [r4, #6]
    369e:	2301      	movs	r3, #1
    36a0:	9300      	str	r3, [sp, #0]
    36a2:	e0ad      	b.n	3800 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    36a4:	79a2      	ldrb	r2, [r4, #6]
    36a6:	2380      	movs	r3, #128	; 0x80
    36a8:	425b      	negs	r3, r3
    36aa:	4313      	orrs	r3, r2
    36ac:	71a3      	strb	r3, [r4, #6]
    36ae:	2302      	movs	r3, #2
    36b0:	9300      	str	r3, [sp, #0]
    36b2:	e0a5      	b.n	3800 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    36b4:	79a2      	ldrb	r2, [r4, #6]
    36b6:	2380      	movs	r3, #128	; 0x80
    36b8:	425b      	negs	r3, r3
    36ba:	4313      	orrs	r3, r2
    36bc:	71a3      	strb	r3, [r4, #6]
    36be:	2301      	movs	r3, #1
    36c0:	9300      	str	r3, [sp, #0]
    36c2:	e09d      	b.n	3800 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    36c4:	0240      	lsls	r0, r0, #9
    36c6:	1839      	adds	r1, r7, r0
    36c8:	3330      	adds	r3, #48	; 0x30
    36ca:	0018      	movs	r0, r3
    36cc:	2280      	movs	r2, #128	; 0x80
    36ce:	0092      	lsls	r2, r2, #2
    36d0:	4b52      	ldr	r3, [pc, #328]	; (381c <f_write+0x22c>)
    36d2:	4798      	blx	r3
					fp->fs->wflag = 0;
    36d4:	2300      	movs	r3, #0
    36d6:	6822      	ldr	r2, [r4, #0]
    36d8:	7113      	strb	r3, [r2, #4]
    36da:	e072      	b.n	37c2 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    36dc:	68a3      	ldr	r3, [r4, #8]
    36de:	68e2      	ldr	r2, [r4, #12]
    36e0:	4293      	cmp	r3, r2
    36e2:	d271      	bcs.n	37c8 <f_write+0x1d8>
			fp->dsect = sect;
    36e4:	4643      	mov	r3, r8
    36e6:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    36e8:	68a3      	ldr	r3, [r4, #8]
    36ea:	05dd      	lsls	r5, r3, #23
    36ec:	0ded      	lsrs	r5, r5, #23
    36ee:	2380      	movs	r3, #128	; 0x80
    36f0:	009b      	lsls	r3, r3, #2
    36f2:	1b5d      	subs	r5, r3, r5
    36f4:	42b5      	cmp	r5, r6
    36f6:	d900      	bls.n	36fa <f_write+0x10a>
    36f8:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    36fa:	69a1      	ldr	r1, [r4, #24]
    36fc:	6820      	ldr	r0, [r4, #0]
    36fe:	4b46      	ldr	r3, [pc, #280]	; (3818 <f_write+0x228>)
    3700:	4798      	blx	r3
    3702:	2800      	cmp	r0, #0
    3704:	d172      	bne.n	37ec <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3706:	68a3      	ldr	r3, [r4, #8]
    3708:	05d8      	lsls	r0, r3, #23
    370a:	0dc0      	lsrs	r0, r0, #23
    370c:	3030      	adds	r0, #48	; 0x30
    370e:	6823      	ldr	r3, [r4, #0]
    3710:	469c      	mov	ip, r3
    3712:	4460      	add	r0, ip
    3714:	002a      	movs	r2, r5
    3716:	0039      	movs	r1, r7
    3718:	4b40      	ldr	r3, [pc, #256]	; (381c <f_write+0x22c>)
    371a:	4798      	blx	r3
		fp->fs->wflag = 1;
    371c:	2301      	movs	r3, #1
    371e:	6822      	ldr	r2, [r4, #0]
    3720:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3722:	197f      	adds	r7, r7, r5
    3724:	68a3      	ldr	r3, [r4, #8]
    3726:	195b      	adds	r3, r3, r5
    3728:	60a3      	str	r3, [r4, #8]
    372a:	464b      	mov	r3, r9
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	195b      	adds	r3, r3, r5
    3730:	464a      	mov	r2, r9
    3732:	6013      	str	r3, [r2, #0]
    3734:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    3736:	d090      	beq.n	365a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3738:	68a3      	ldr	r3, [r4, #8]
    373a:	05da      	lsls	r2, r3, #23
    373c:	d1d4      	bne.n	36e8 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    373e:	6820      	ldr	r0, [r4, #0]
    3740:	7882      	ldrb	r2, [r0, #2]
    3742:	3a01      	subs	r2, #1
    3744:	0a5d      	lsrs	r5, r3, #9
    3746:	4015      	ands	r5, r2
    3748:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    374a:	2d00      	cmp	r5, #0
    374c:	d10b      	bne.n	3766 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    374e:	2b00      	cmp	r3, #0
    3750:	d000      	beq.n	3754 <f_write+0x164>
    3752:	e77b      	b.n	364c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    3754:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    3756:	2b00      	cmp	r3, #0
    3758:	d100      	bne.n	375c <f_write+0x16c>
    375a:	e771      	b.n	3640 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    375c:	2b01      	cmp	r3, #1
    375e:	d086      	beq.n	366e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3760:	1c5a      	adds	r2, r3, #1
    3762:	d08b      	beq.n	367c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    3764:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    3766:	6820      	ldr	r0, [r4, #0]
    3768:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    376a:	69a2      	ldr	r2, [r4, #24]
    376c:	4293      	cmp	r3, r2
    376e:	d08c      	beq.n	368a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3770:	6823      	ldr	r3, [r4, #0]
    3772:	469a      	mov	sl, r3
    3774:	6961      	ldr	r1, [r4, #20]
    3776:	0018      	movs	r0, r3
    3778:	4b29      	ldr	r3, [pc, #164]	; (3820 <f_write+0x230>)
    377a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    377c:	2800      	cmp	r0, #0
    377e:	d091      	beq.n	36a4 <f_write+0xb4>
			sect += csect;
    3780:	4680      	mov	r8, r0
    3782:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3784:	0a73      	lsrs	r3, r6, #9
    3786:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    3788:	d0a8      	beq.n	36dc <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    378a:	4653      	mov	r3, sl
    378c:	789b      	ldrb	r3, [r3, #2]
    378e:	465a      	mov	r2, fp
    3790:	18aa      	adds	r2, r5, r2
    3792:	429a      	cmp	r2, r3
    3794:	d901      	bls.n	379a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    3796:	1b5b      	subs	r3, r3, r5
    3798:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    379a:	465b      	mov	r3, fp
    379c:	466a      	mov	r2, sp
    379e:	71d3      	strb	r3, [r2, #7]
    37a0:	79d3      	ldrb	r3, [r2, #7]
    37a2:	4652      	mov	r2, sl
    37a4:	7850      	ldrb	r0, [r2, #1]
    37a6:	4642      	mov	r2, r8
    37a8:	0039      	movs	r1, r7
    37aa:	4d1e      	ldr	r5, [pc, #120]	; (3824 <f_write+0x234>)
    37ac:	47a8      	blx	r5
    37ae:	2800      	cmp	r0, #0
    37b0:	d000      	beq.n	37b4 <f_write+0x1c4>
    37b2:	e77f      	b.n	36b4 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    37b4:	6823      	ldr	r3, [r4, #0]
    37b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37b8:	4641      	mov	r1, r8
    37ba:	1a50      	subs	r0, r2, r1
    37bc:	4583      	cmp	fp, r0
    37be:	d900      	bls.n	37c2 <f_write+0x1d2>
    37c0:	e780      	b.n	36c4 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    37c2:	465b      	mov	r3, fp
    37c4:	025d      	lsls	r5, r3, #9
				continue;
    37c6:	e7ac      	b.n	3722 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    37c8:	2100      	movs	r1, #0
    37ca:	4650      	mov	r0, sl
    37cc:	4b12      	ldr	r3, [pc, #72]	; (3818 <f_write+0x228>)
    37ce:	4798      	blx	r3
    37d0:	2800      	cmp	r0, #0
    37d2:	d103      	bne.n	37dc <f_write+0x1ec>
				fp->fs->winsect = sect;
    37d4:	6823      	ldr	r3, [r4, #0]
    37d6:	4642      	mov	r2, r8
    37d8:	62da      	str	r2, [r3, #44]	; 0x2c
    37da:	e783      	b.n	36e4 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    37dc:	79a2      	ldrb	r2, [r4, #6]
    37de:	2380      	movs	r3, #128	; 0x80
    37e0:	425b      	negs	r3, r3
    37e2:	4313      	orrs	r3, r2
    37e4:	71a3      	strb	r3, [r4, #6]
    37e6:	2301      	movs	r3, #1
    37e8:	9300      	str	r3, [sp, #0]
    37ea:	e009      	b.n	3800 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    37ec:	79a2      	ldrb	r2, [r4, #6]
    37ee:	2380      	movs	r3, #128	; 0x80
    37f0:	425b      	negs	r3, r3
    37f2:	4313      	orrs	r3, r2
    37f4:	71a3      	strb	r3, [r4, #6]
    37f6:	2301      	movs	r3, #1
    37f8:	9300      	str	r3, [sp, #0]
    37fa:	e001      	b.n	3800 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    37fc:	2302      	movs	r3, #2
    37fe:	9300      	str	r3, [sp, #0]
}
    3800:	9800      	ldr	r0, [sp, #0]
    3802:	b003      	add	sp, #12
    3804:	bc3c      	pop	{r2, r3, r4, r5}
    3806:	4690      	mov	r8, r2
    3808:	4699      	mov	r9, r3
    380a:	46a2      	mov	sl, r4
    380c:	46ab      	mov	fp, r5
    380e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3810:	00002125 	.word	0x00002125
    3814:	00002925 	.word	0x00002925
    3818:	000025a9 	.word	0x000025a9
    381c:	000020c9 	.word	0x000020c9
    3820:	000020ef 	.word	0x000020ef
    3824:	00001f89 	.word	0x00001f89

00003828 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3828:	b570      	push	{r4, r5, r6, lr}
    382a:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    382c:	8881      	ldrh	r1, [r0, #4]
    382e:	6800      	ldr	r0, [r0, #0]
    3830:	4b1c      	ldr	r3, [pc, #112]	; (38a4 <f_sync+0x7c>)
    3832:	4798      	blx	r3
	if (res == FR_OK) {
    3834:	2800      	cmp	r0, #0
    3836:	d102      	bne.n	383e <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3838:	79a3      	ldrb	r3, [r4, #6]
    383a:	069b      	lsls	r3, r3, #26
    383c:	d400      	bmi.n	3840 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    383e:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    3840:	69e1      	ldr	r1, [r4, #28]
    3842:	6820      	ldr	r0, [r4, #0]
    3844:	4b18      	ldr	r3, [pc, #96]	; (38a8 <f_sync+0x80>)
    3846:	4798      	blx	r3
			if (res == FR_OK) {
    3848:	2800      	cmp	r0, #0
    384a:	d1f8      	bne.n	383e <f_sync+0x16>
				dir = fp->dir_ptr;
    384c:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    384e:	7aeb      	ldrb	r3, [r5, #11]
    3850:	2220      	movs	r2, #32
    3852:	4313      	orrs	r3, r2
    3854:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    3856:	7b23      	ldrb	r3, [r4, #12]
    3858:	772b      	strb	r3, [r5, #28]
    385a:	89a3      	ldrh	r3, [r4, #12]
    385c:	0a1b      	lsrs	r3, r3, #8
    385e:	776b      	strb	r3, [r5, #29]
    3860:	89e3      	ldrh	r3, [r4, #14]
    3862:	77ab      	strb	r3, [r5, #30]
    3864:	7be3      	ldrb	r3, [r4, #15]
    3866:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    3868:	7c23      	ldrb	r3, [r4, #16]
    386a:	76ab      	strb	r3, [r5, #26]
    386c:	8a23      	ldrh	r3, [r4, #16]
    386e:	0a1b      	lsrs	r3, r3, #8
    3870:	76eb      	strb	r3, [r5, #27]
    3872:	8a63      	ldrh	r3, [r4, #18]
    3874:	752b      	strb	r3, [r5, #20]
    3876:	8a63      	ldrh	r3, [r4, #18]
    3878:	0a1b      	lsrs	r3, r3, #8
    387a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    387c:	4b0b      	ldr	r3, [pc, #44]	; (38ac <f_sync+0x84>)
    387e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    3880:	75a8      	strb	r0, [r5, #22]
    3882:	0a03      	lsrs	r3, r0, #8
    3884:	75eb      	strb	r3, [r5, #23]
    3886:	0c03      	lsrs	r3, r0, #16
    3888:	762b      	strb	r3, [r5, #24]
    388a:	0e00      	lsrs	r0, r0, #24
    388c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    388e:	79a3      	ldrb	r3, [r4, #6]
    3890:	2220      	movs	r2, #32
    3892:	4393      	bics	r3, r2
    3894:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    3896:	2301      	movs	r3, #1
    3898:	6822      	ldr	r2, [r4, #0]
    389a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    389c:	6820      	ldr	r0, [r4, #0]
    389e:	4b04      	ldr	r3, [pc, #16]	; (38b0 <f_sync+0x88>)
    38a0:	4798      	blx	r3
    38a2:	e7cc      	b.n	383e <f_sync+0x16>
    38a4:	00002125 	.word	0x00002125
    38a8:	000025a9 	.word	0x000025a9
    38ac:	00002079 	.word	0x00002079
    38b0:	00003001 	.word	0x00003001

000038b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    38b4:	b510      	push	{r4, lr}
    38b6:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    38b8:	4b03      	ldr	r3, [pc, #12]	; (38c8 <f_close+0x14>)
    38ba:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    38bc:	2800      	cmp	r0, #0
    38be:	d101      	bne.n	38c4 <f_close+0x10>
    38c0:	2300      	movs	r3, #0
    38c2:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    38c4:	bd10      	pop	{r4, pc}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	00003829 	.word	0x00003829

000038cc <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    38cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ce:	46de      	mov	lr, fp
    38d0:	4657      	mov	r7, sl
    38d2:	464e      	mov	r6, r9
    38d4:	4645      	mov	r5, r8
    38d6:	b5e0      	push	{r5, r6, r7, lr}
    38d8:	0004      	movs	r4, r0
    38da:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    38dc:	8881      	ldrh	r1, [r0, #4]
    38de:	6800      	ldr	r0, [r0, #0]
    38e0:	4b57      	ldr	r3, [pc, #348]	; (3a40 <f_lseek+0x174>)
    38e2:	4798      	blx	r3
    38e4:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    38e6:	d000      	beq.n	38ea <f_lseek+0x1e>
    38e8:	e0a2      	b.n	3a30 <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    38ea:	79a3      	ldrb	r3, [r4, #6]
    38ec:	b25a      	sxtb	r2, r3
    38ee:	2a00      	cmp	r2, #0
    38f0:	da00      	bge.n	38f4 <f_lseek+0x28>
    38f2:	e09c      	b.n	3a2e <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    38f4:	68e2      	ldr	r2, [r4, #12]
    38f6:	42b2      	cmp	r2, r6
    38f8:	d202      	bcs.n	3900 <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    38fa:	079b      	lsls	r3, r3, #30
    38fc:	d400      	bmi.n	3900 <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    38fe:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    3900:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    3902:	2300      	movs	r3, #0
    3904:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    3906:	2e00      	cmp	r6, #0
    3908:	d100      	bne.n	390c <f_lseek+0x40>
    390a:	e091      	b.n	3a30 <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    390c:	6823      	ldr	r3, [r4, #0]
    390e:	4699      	mov	r9, r3
    3910:	789f      	ldrb	r7, [r3, #2]
    3912:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    3914:	2800      	cmp	r0, #0
    3916:	d013      	beq.n	3940 <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    3918:	1e43      	subs	r3, r0, #1
    391a:	4698      	mov	r8, r3
    391c:	1e70      	subs	r0, r6, #1
    391e:	4b49      	ldr	r3, [pc, #292]	; (3a44 <f_lseek+0x178>)
    3920:	469a      	mov	sl, r3
    3922:	0039      	movs	r1, r7
    3924:	4798      	blx	r3
    3926:	4683      	mov	fp, r0
    3928:	0039      	movs	r1, r7
    392a:	4640      	mov	r0, r8
    392c:	47d0      	blx	sl
			if (ifptr > 0 &&
    392e:	4583      	cmp	fp, r0
    3930:	d306      	bcc.n	3940 <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3932:	4278      	negs	r0, r7
    3934:	4643      	mov	r3, r8
    3936:	4003      	ands	r3, r0
    3938:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    393a:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    393c:	6960      	ldr	r0, [r4, #20]
    393e:	e003      	b.n	3948 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    3940:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3942:	2800      	cmp	r0, #0
    3944:	d00b      	beq.n	395e <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    3946:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    3948:	2800      	cmp	r0, #0
    394a:	d060      	beq.n	3a0e <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    394c:	42be      	cmp	r6, r7
    394e:	d93a      	bls.n	39c6 <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3950:	2302      	movs	r3, #2
    3952:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3954:	4b3c      	ldr	r3, [pc, #240]	; (3a48 <f_lseek+0x17c>)
    3956:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3958:	4b3c      	ldr	r3, [pc, #240]	; (3a4c <f_lseek+0x180>)
    395a:	4699      	mov	r9, r3
    395c:	e029      	b.n	39b2 <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    395e:	2100      	movs	r1, #0
    3960:	4648      	mov	r0, r9
    3962:	4b39      	ldr	r3, [pc, #228]	; (3a48 <f_lseek+0x17c>)
    3964:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3966:	2801      	cmp	r0, #1
    3968:	d003      	beq.n	3972 <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    396a:	1c43      	adds	r3, r0, #1
    396c:	d008      	beq.n	3980 <f_lseek+0xb4>
					fp->sclust = clst;
    396e:	6120      	str	r0, [r4, #16]
    3970:	e7e9      	b.n	3946 <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3972:	79a2      	ldrb	r2, [r4, #6]
    3974:	2380      	movs	r3, #128	; 0x80
    3976:	425b      	negs	r3, r3
    3978:	4313      	orrs	r3, r2
    397a:	71a3      	strb	r3, [r4, #6]
    397c:	2502      	movs	r5, #2
    397e:	e057      	b.n	3a30 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3980:	79a2      	ldrb	r2, [r4, #6]
    3982:	2380      	movs	r3, #128	; 0x80
    3984:	425b      	negs	r3, r3
    3986:	4313      	orrs	r3, r2
    3988:	71a3      	strb	r3, [r4, #6]
    398a:	2501      	movs	r5, #1
    398c:	e050      	b.n	3a30 <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    398e:	0001      	movs	r1, r0
    3990:	6820      	ldr	r0, [r4, #0]
    3992:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3994:	1c43      	adds	r3, r0, #1
    3996:	d028      	beq.n	39ea <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3998:	2801      	cmp	r0, #1
    399a:	d92d      	bls.n	39f8 <f_lseek+0x12c>
    399c:	6823      	ldr	r3, [r4, #0]
    399e:	699b      	ldr	r3, [r3, #24]
    39a0:	4298      	cmp	r0, r3
    39a2:	d229      	bcs.n	39f8 <f_lseek+0x12c>
					fp->clust = clst;
    39a4:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    39a6:	68a3      	ldr	r3, [r4, #8]
    39a8:	19db      	adds	r3, r3, r7
    39aa:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    39ac:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    39ae:	42b7      	cmp	r7, r6
    39b0:	d209      	bcs.n	39c6 <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    39b2:	79a3      	ldrb	r3, [r4, #6]
    39b4:	4642      	mov	r2, r8
    39b6:	421a      	tst	r2, r3
    39b8:	d0e9      	beq.n	398e <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    39ba:	0001      	movs	r1, r0
    39bc:	6820      	ldr	r0, [r4, #0]
    39be:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    39c0:	2800      	cmp	r0, #0
    39c2:	d1e7      	bne.n	3994 <f_lseek+0xc8>
							ofs = bcs; break;
    39c4:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    39c6:	68a3      	ldr	r3, [r4, #8]
    39c8:	199b      	adds	r3, r3, r6
    39ca:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    39cc:	05f3      	lsls	r3, r6, #23
    39ce:	d01d      	beq.n	3a0c <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    39d0:	0001      	movs	r1, r0
    39d2:	6820      	ldr	r0, [r4, #0]
    39d4:	4b1e      	ldr	r3, [pc, #120]	; (3a50 <f_lseek+0x184>)
    39d6:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    39d8:	2800      	cmp	r0, #0
    39da:	d114      	bne.n	3a06 <f_lseek+0x13a>
    39dc:	79a2      	ldrb	r2, [r4, #6]
    39de:	2380      	movs	r3, #128	; 0x80
    39e0:	425b      	negs	r3, r3
    39e2:	4313      	orrs	r3, r2
    39e4:	71a3      	strb	r3, [r4, #6]
    39e6:	2502      	movs	r5, #2
    39e8:	e022      	b.n	3a30 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    39ea:	79a2      	ldrb	r2, [r4, #6]
    39ec:	2380      	movs	r3, #128	; 0x80
    39ee:	425b      	negs	r3, r3
    39f0:	4313      	orrs	r3, r2
    39f2:	71a3      	strb	r3, [r4, #6]
    39f4:	2501      	movs	r5, #1
    39f6:	e01b      	b.n	3a30 <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    39f8:	79a2      	ldrb	r2, [r4, #6]
    39fa:	2380      	movs	r3, #128	; 0x80
    39fc:	425b      	negs	r3, r3
    39fe:	4313      	orrs	r3, r2
    3a00:	71a3      	strb	r3, [r4, #6]
    3a02:	2502      	movs	r5, #2
    3a04:	e014      	b.n	3a30 <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    3a06:	0a76      	lsrs	r6, r6, #9
    3a08:	1830      	adds	r0, r6, r0
    3a0a:	e000      	b.n	3a0e <f_lseek+0x142>
		fp->fptr = nsect = 0;
    3a0c:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3a0e:	68a3      	ldr	r3, [r4, #8]
    3a10:	05da      	lsls	r2, r3, #23
    3a12:	d003      	beq.n	3a1c <f_lseek+0x150>
    3a14:	69a2      	ldr	r2, [r4, #24]
    3a16:	4290      	cmp	r0, r2
    3a18:	d000      	beq.n	3a1c <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    3a1a:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    3a1c:	68e2      	ldr	r2, [r4, #12]
    3a1e:	4293      	cmp	r3, r2
    3a20:	d906      	bls.n	3a30 <f_lseek+0x164>
			fp->fsize = fp->fptr;
    3a22:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    3a24:	79a3      	ldrb	r3, [r4, #6]
    3a26:	2220      	movs	r2, #32
    3a28:	4313      	orrs	r3, r2
    3a2a:	71a3      	strb	r3, [r4, #6]
    3a2c:	e000      	b.n	3a30 <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3a2e:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3a30:	0028      	movs	r0, r5
    3a32:	bc3c      	pop	{r2, r3, r4, r5}
    3a34:	4690      	mov	r8, r2
    3a36:	4699      	mov	r9, r3
    3a38:	46a2      	mov	sl, r4
    3a3a:	46ab      	mov	fp, r5
    3a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	00002125 	.word	0x00002125
    3a44:	000063a9 	.word	0x000063a9
    3a48:	00002925 	.word	0x00002925
    3a4c:	00002649 	.word	0x00002649
    3a50:	000020ef 	.word	0x000020ef

00003a54 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    3a54:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    3a56:	287f      	cmp	r0, #127	; 0x7f
    3a58:	d911      	bls.n	3a7e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    3a5a:	2900      	cmp	r1, #0
    3a5c:	d111      	bne.n	3a82 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    3a5e:	28c7      	cmp	r0, #199	; 0xc7
    3a60:	d017      	beq.n	3a92 <ff_convert+0x3e>
    3a62:	4a0d      	ldr	r2, [pc, #52]	; (3a98 <ff_convert+0x44>)
    3a64:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    3a66:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    3a68:	8811      	ldrh	r1, [r2, #0]
    3a6a:	4281      	cmp	r1, r0
    3a6c:	d004      	beq.n	3a78 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    3a6e:	3301      	adds	r3, #1
    3a70:	b29b      	uxth	r3, r3
    3a72:	3202      	adds	r2, #2
    3a74:	2b80      	cmp	r3, #128	; 0x80
    3a76:	d1f7      	bne.n	3a68 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    3a78:	3380      	adds	r3, #128	; 0x80
    3a7a:	20ff      	movs	r0, #255	; 0xff
    3a7c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    3a7e:	0018      	movs	r0, r3
    3a80:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    3a82:	2300      	movs	r3, #0
    3a84:	28ff      	cmp	r0, #255	; 0xff
    3a86:	d8fa      	bhi.n	3a7e <ff_convert+0x2a>
    3a88:	3880      	subs	r0, #128	; 0x80
    3a8a:	0040      	lsls	r0, r0, #1
    3a8c:	4b02      	ldr	r3, [pc, #8]	; (3a98 <ff_convert+0x44>)
    3a8e:	5ac3      	ldrh	r3, [r0, r3]
    3a90:	e7f5      	b.n	3a7e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    3a92:	2300      	movs	r3, #0
    3a94:	e7f0      	b.n	3a78 <ff_convert+0x24>
    3a96:	46c0      	nop			; (mov r8, r8)
    3a98:	00007b44 	.word	0x00007b44

00003a9c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    3a9c:	2861      	cmp	r0, #97	; 0x61
    3a9e:	d014      	beq.n	3aca <ff_wtoupper+0x2e>
    3aa0:	4b0b      	ldr	r3, [pc, #44]	; (3ad0 <ff_wtoupper+0x34>)
    3aa2:	3304      	adds	r3, #4
    3aa4:	2101      	movs	r1, #1
    3aa6:	2262      	movs	r2, #98	; 0x62
    3aa8:	4290      	cmp	r0, r2
    3aaa:	d007      	beq.n	3abc <ff_wtoupper+0x20>
    3aac:	3101      	adds	r1, #1
    3aae:	3302      	adds	r3, #2
    3ab0:	1e9a      	subs	r2, r3, #2
    3ab2:	8812      	ldrh	r2, [r2, #0]
    3ab4:	2a00      	cmp	r2, #0
    3ab6:	d1f7      	bne.n	3aa8 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    3ab8:	0003      	movs	r3, r0
    3aba:	e004      	b.n	3ac6 <ff_wtoupper+0x2a>
    3abc:	1e03      	subs	r3, r0, #0
    3abe:	d002      	beq.n	3ac6 <ff_wtoupper+0x2a>
    3ac0:	0049      	lsls	r1, r1, #1
    3ac2:	4b04      	ldr	r3, [pc, #16]	; (3ad4 <ff_wtoupper+0x38>)
    3ac4:	5acb      	ldrh	r3, [r1, r3]
}
    3ac6:	0018      	movs	r0, r3
    3ac8:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    3aca:	2100      	movs	r1, #0
    3acc:	e7f8      	b.n	3ac0 <ff_wtoupper+0x24>
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	00007c44 	.word	0x00007c44
    3ad4:	00007e24 	.word	0x00007e24

00003ad8 <dma_transfer_rx_callback>:


/********  DMA TEST ********/
static void dma_transfer_rx_callback(struct dma_resource* const resource)
{
	transfer_rx_done = true;
    3ad8:	2201      	movs	r2, #1
    3ada:	4b01      	ldr	r3, [pc, #4]	; (3ae0 <dma_transfer_rx_callback+0x8>)
    3adc:	701a      	strb	r2, [r3, #0]
}
    3ade:	4770      	bx	lr
    3ae0:	200001b5 	.word	0x200001b5

00003ae4 <audio_in_init>:
	fn[19] = '\0';
	//printf("Generated fn: %s\n\r", fn);
}

void audio_in_init(void)
{
    3ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae6:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
    3ae8:	a90f      	add	r1, sp, #60	; 0x3c
    3aea:	2501      	movs	r5, #1
    3aec:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    3aee:	2600      	movs	r6, #0
    3af0:	708e      	strb	r6, [r1, #2]
	/* Initializing the CONV pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3af2:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
    3af4:	2014      	movs	r0, #20
    3af6:	4f28      	ldr	r7, [pc, #160]	; (3b98 <audio_in_init+0xb4>)
    3af8:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3afa:	2280      	movs	r2, #128	; 0x80
    3afc:	0352      	lsls	r2, r2, #13
    3afe:	4b27      	ldr	r3, [pc, #156]	; (3b9c <audio_in_init+0xb8>)
    3b00:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3b02:	4c27      	ldr	r4, [pc, #156]	; (3ba0 <audio_in_init+0xbc>)
    3b04:	232f      	movs	r3, #47	; 0x2f
    3b06:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3b08:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
    3b0a:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    3b0c:	466b      	mov	r3, sp
    3b0e:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    3b10:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3b12:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3b14:	4669      	mov	r1, sp
    3b16:	202f      	movs	r0, #47	; 0x2f
    3b18:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    3b1a:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    3b1c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3b1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3b20:	2900      	cmp	r1, #0
    3b22:	d104      	bne.n	3b2e <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
    3b24:	0953      	lsrs	r3, r2, #5
    3b26:	01db      	lsls	r3, r3, #7
    3b28:	491c      	ldr	r1, [pc, #112]	; (3b9c <audio_in_init+0xb8>)
    3b2a:	468c      	mov	ip, r1
    3b2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b2e:	211f      	movs	r1, #31
    3b30:	4011      	ands	r1, r2
    3b32:	2201      	movs	r2, #1
    3b34:	0010      	movs	r0, r2
    3b36:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    3b38:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    3b3a:	ac01      	add	r4, sp, #4
    3b3c:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3b3e:	2300      	movs	r3, #0
    3b40:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3b42:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3b44:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    3b46:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    3b48:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    3b4a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    3b4c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3b4e:	3223      	adds	r2, #35	; 0x23
    3b50:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3b52:	3a18      	subs	r2, #24
    3b54:	2100      	movs	r1, #0
    3b56:	a807      	add	r0, sp, #28
    3b58:	4b12      	ldr	r3, [pc, #72]	; (3ba4 <audio_in_init+0xc0>)
    3b5a:	4798      	blx	r3
	config_spi_slave.ss_pin = ADC_SPI_SS_PIN;
	spi_attach_slave(&adc_spi_slave, &config_spi_slave);
	
	/* Initializing the SPI master */
	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
    3b5c:	2380      	movs	r3, #128	; 0x80
    3b5e:	039b      	lsls	r3, r3, #14
    3b60:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
    3b62:	4b11      	ldr	r3, [pc, #68]	; (3ba8 <audio_in_init+0xc4>)
    3b64:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
    3b66:	4b11      	ldr	r3, [pc, #68]	; (3bac <audio_in_init+0xc8>)
    3b68:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
    3b6a:	4b11      	ldr	r3, [pc, #68]	; (3bb0 <audio_in_init+0xcc>)
    3b6c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
    3b6e:	2301      	movs	r3, #1
    3b70:	425b      	negs	r3, r3
    3b72:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
    3b74:	4b0f      	ldr	r3, [pc, #60]	; (3bb4 <audio_in_init+0xd0>)
    3b76:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
    3b78:	4d0f      	ldr	r5, [pc, #60]	; (3bb8 <audio_in_init+0xd4>)
    3b7a:	0022      	movs	r2, r4
    3b7c:	490f      	ldr	r1, [pc, #60]	; (3bbc <audio_in_init+0xd8>)
    3b7e:	0028      	movs	r0, r5
    3b80:	4b0f      	ldr	r3, [pc, #60]	; (3bc0 <audio_in_init+0xdc>)
    3b82:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3b84:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    3b86:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    3b88:	2b00      	cmp	r3, #0
    3b8a:	d1fc      	bne.n	3b86 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3b8c:	6813      	ldr	r3, [r2, #0]
    3b8e:	2102      	movs	r1, #2
    3b90:	430b      	orrs	r3, r1
    3b92:	6013      	str	r3, [r2, #0]
	spi_enable(&adc_spi_module);
}
    3b94:	b011      	add	sp, #68	; 0x44
    3b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b98:	00005ed1 	.word	0x00005ed1
    3b9c:	41004400 	.word	0x41004400
    3ba0:	20000374 	.word	0x20000374
    3ba4:	00006997 	.word	0x00006997
    3ba8:	00100002 	.word	0x00100002
    3bac:	00110002 	.word	0x00110002
    3bb0:	00120002 	.word	0x00120002
    3bb4:	0007a120 	.word	0x0007a120
    3bb8:	200002f0 	.word	0x200002f0
    3bbc:	42000c00 	.word	0x42000c00
    3bc0:	00004dcd 	.word	0x00004dcd

00003bc4 <audio_record_init>:

bool audio_record_init(void) {
    3bc4:	b510      	push	{r4, lr}
    3bc6:	b086      	sub	sp, #24
	FRESULT res;
	//char file_name[18] = "180213_111445.wav";
	char file_name[] = "180212_140925.wav";
    3bc8:	aa01      	add	r2, sp, #4
    3bca:	4b1b      	ldr	r3, [pc, #108]	; (3c38 <audio_record_init+0x74>)
    3bcc:	cb13      	ldmia	r3!, {r0, r1, r4}
    3bce:	c213      	stmia	r2!, {r0, r1, r4}
    3bd0:	0011      	movs	r1, r2
    3bd2:	681a      	ldr	r2, [r3, #0]
    3bd4:	600a      	str	r2, [r1, #0]
    3bd6:	889b      	ldrh	r3, [r3, #4]
    3bd8:	808b      	strh	r3, [r1, #4]
	
	//generate_file_name(file_name);
	//printf("Generated file name: %s\n\r", &file_name);
	
	/* Mount file system */
	memset(&file_sys, 0, sizeof(FATFS));
    3bda:	4c18      	ldr	r4, [pc, #96]	; (3c3c <audio_record_init+0x78>)
    3bdc:	228c      	movs	r2, #140	; 0x8c
    3bde:	0092      	lsls	r2, r2, #2
    3be0:	2100      	movs	r1, #0
    3be2:	0020      	movs	r0, r4
    3be4:	4b16      	ldr	r3, [pc, #88]	; (3c40 <audio_record_init+0x7c>)
    3be6:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    3be8:	0021      	movs	r1, r4
    3bea:	2000      	movs	r0, #0
    3bec:	4b15      	ldr	r3, [pc, #84]	; (3c44 <audio_record_init+0x80>)
    3bee:	4798      	blx	r3
	if(res == FR_INVALID_DRIVE) {
		return false;
    3bf0:	2300      	movs	r3, #0
	if(res == FR_INVALID_DRIVE) {
    3bf2:	280b      	cmp	r0, #11
    3bf4:	d01d      	beq.n	3c32 <audio_record_init+0x6e>
	}
	
	/* Open/create file */
	res = f_open(&file_object, file_name, FA_CREATE_ALWAYS | FA_WRITE);
    3bf6:	220a      	movs	r2, #10
    3bf8:	a901      	add	r1, sp, #4
    3bfa:	4813      	ldr	r0, [pc, #76]	; (3c48 <audio_record_init+0x84>)
    3bfc:	4b13      	ldr	r3, [pc, #76]	; (3c4c <audio_record_init+0x88>)
    3bfe:	4798      	blx	r3
	if(res != FR_OK) {
    3c00:	2800      	cmp	r0, #0
    3c02:	d111      	bne.n	3c28 <audio_record_init+0x64>
		printf("Error while opening file: #%d\n\r", res);
		return false;
	}
	
	/* Write wav header */
	res = f_write(&file_object, wave_header, 44, (UINT *)&bytes);
    3c04:	466b      	mov	r3, sp
    3c06:	222c      	movs	r2, #44	; 0x2c
    3c08:	4911      	ldr	r1, [pc, #68]	; (3c50 <audio_record_init+0x8c>)
    3c0a:	480f      	ldr	r0, [pc, #60]	; (3c48 <audio_record_init+0x84>)
    3c0c:	4c11      	ldr	r4, [pc, #68]	; (3c54 <audio_record_init+0x90>)
    3c0e:	47a0      	blx	r4
		printf("Error while writing WAV header: #%d\n\r", res);
		f_close(&file_object);
		return false;
	}
	
	return true;
    3c10:	2301      	movs	r3, #1
	if(res != FR_OK) {
    3c12:	2800      	cmp	r0, #0
    3c14:	d00d      	beq.n	3c32 <audio_record_init+0x6e>
		printf("Error while writing WAV header: #%d\n\r", res);
    3c16:	0001      	movs	r1, r0
    3c18:	480f      	ldr	r0, [pc, #60]	; (3c58 <audio_record_init+0x94>)
    3c1a:	4b10      	ldr	r3, [pc, #64]	; (3c5c <audio_record_init+0x98>)
    3c1c:	4798      	blx	r3
		f_close(&file_object);
    3c1e:	480a      	ldr	r0, [pc, #40]	; (3c48 <audio_record_init+0x84>)
    3c20:	4b0f      	ldr	r3, [pc, #60]	; (3c60 <audio_record_init+0x9c>)
    3c22:	4798      	blx	r3
		return false;
    3c24:	2300      	movs	r3, #0
    3c26:	e004      	b.n	3c32 <audio_record_init+0x6e>
		printf("Error while opening file: #%d\n\r", res);
    3c28:	0001      	movs	r1, r0
    3c2a:	480e      	ldr	r0, [pc, #56]	; (3c64 <audio_record_init+0xa0>)
    3c2c:	4b0b      	ldr	r3, [pc, #44]	; (3c5c <audio_record_init+0x98>)
    3c2e:	4798      	blx	r3
		return false;
    3c30:	2300      	movs	r3, #0
}
    3c32:	0018      	movs	r0, r3
    3c34:	b006      	add	sp, #24
    3c36:	bd10      	pop	{r4, pc}
    3c38:	0000804c 	.word	0x0000804c
    3c3c:	20000790 	.word	0x20000790
    3c40:	00006997 	.word	0x00006997
    3c44:	00003439 	.word	0x00003439
    3c48:	200002fc 	.word	0x200002fc
    3c4c:	00003469 	.word	0x00003469
    3c50:	2000003c 	.word	0x2000003c
    3c54:	000035f1 	.word	0x000035f1
    3c58:	00008024 	.word	0x00008024
    3c5c:	000069a9 	.word	0x000069a9
    3c60:	000038b5 	.word	0x000038b5
    3c64:	00008004 	.word	0x00008004

00003c68 <audio_record_close>:

bool audio_record_close(void)
{
    3c68:	b570      	push	{r4, r5, r6, lr}
    3c6a:	b082      	sub	sp, #8
	FRESULT res;
	UINT bytes;
	bool retVal = true;
	
	((uint16_t *)&wave_header)[WAVE_FORMAT_NUM_CHANNEL_OFFSET/2] = AUDIO_NUM_CHANNELS;
    3c6c:	4c15      	ldr	r4, [pc, #84]	; (3cc4 <audio_record_close+0x5c>)
    3c6e:	2302      	movs	r3, #2
    3c70:	82e3      	strh	r3, [r4, #22]
	((uint16_t *)&wave_header)[WAVE_FORMAT_BITS_PER_SAMPLE_OFFSET/2] = AUDIO_BITS_PER_SAMPLE;
    3c72:	330e      	adds	r3, #14
    3c74:	8463      	strh	r3, [r4, #34]	; 0x22
	((uint16_t *)&wave_header)[WAVE_FORMAT_BLOCK_ALIGN_OFFSET/2] = AUDIO_BITS_PER_SAMPLE/8 * AUDIO_NUM_CHANNELS;
    3c76:	3b0c      	subs	r3, #12
    3c78:	8423      	strh	r3, [r4, #32]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SAMPLE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE;
    3c7a:	4b13      	ldr	r3, [pc, #76]	; (3cc8 <audio_record_close+0x60>)
    3c7c:	61a3      	str	r3, [r4, #24]
	((uint32_t *)&wave_header)[WAVE_FORMAT_BYTE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE * AUDIO_NUM_CHANNELS * AUDIO_BITS_PER_SAMPLE/8;
    3c7e:	4b13      	ldr	r3, [pc, #76]	; (3ccc <audio_record_close+0x64>)
    3c80:	61e3      	str	r3, [r4, #28]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SUBCHUNK2_SIZE_OFFSET/4] = audio_total_samples * AUDIO_BITS_PER_SAMPLE/8;
    3c82:	4e13      	ldr	r6, [pc, #76]	; (3cd0 <audio_record_close+0x68>)
    3c84:	6833      	ldr	r3, [r6, #0]
    3c86:	011b      	lsls	r3, r3, #4
    3c88:	08db      	lsrs	r3, r3, #3
    3c8a:	62a3      	str	r3, [r4, #40]	; 0x28
	((uint32_t *)&wave_header)[WAVE_FORMAT_CHUNK_SIZE_OFFSET/4] = (audio_total_samples * AUDIO_BITS_PER_SAMPLE/8) + 36;
    3c8c:	3324      	adds	r3, #36	; 0x24
    3c8e:	6063      	str	r3, [r4, #4]
	
	f_lseek(&file_object, 0);
    3c90:	4d10      	ldr	r5, [pc, #64]	; (3cd4 <audio_record_close+0x6c>)
    3c92:	2100      	movs	r1, #0
    3c94:	0028      	movs	r0, r5
    3c96:	4b10      	ldr	r3, [pc, #64]	; (3cd8 <audio_record_close+0x70>)
    3c98:	4798      	blx	r3
	res = f_write(&file_object, wave_header, 44, &bytes);
    3c9a:	ab01      	add	r3, sp, #4
    3c9c:	222c      	movs	r2, #44	; 0x2c
    3c9e:	0021      	movs	r1, r4
    3ca0:	0028      	movs	r0, r5
    3ca2:	4c0e      	ldr	r4, [pc, #56]	; (3cdc <audio_record_close+0x74>)
    3ca4:	47a0      	blx	r4
    3ca6:	0004      	movs	r4, r0
	if(res != FR_OK) {
		retVal = false;
	}
	
	f_close(&file_object);
    3ca8:	0028      	movs	r0, r5
    3caa:	4b0d      	ldr	r3, [pc, #52]	; (3ce0 <audio_record_close+0x78>)
    3cac:	4798      	blx	r3
	audio_total_samples = 0;
    3cae:	2300      	movs	r3, #0
    3cb0:	6033      	str	r3, [r6, #0]
    3cb2:	2280      	movs	r2, #128	; 0x80
    3cb4:	0152      	lsls	r2, r2, #5
    3cb6:	4b0b      	ldr	r3, [pc, #44]	; (3ce4 <audio_record_close+0x7c>)
    3cb8:	619a      	str	r2, [r3, #24]
	if(res != FR_OK) {
    3cba:	4260      	negs	r0, r4
    3cbc:	4160      	adcs	r0, r4
	LED_Off(UI_LED_REC);
	
	return retVal;
    3cbe:	b2c0      	uxtb	r0, r0
}
    3cc0:	b002      	add	sp, #8
    3cc2:	bd70      	pop	{r4, r5, r6, pc}
    3cc4:	2000003c 	.word	0x2000003c
    3cc8:	0000ac44 	.word	0x0000ac44
    3ccc:	0002b110 	.word	0x0002b110
    3cd0:	200001ac 	.word	0x200001ac
    3cd4:	200002fc 	.word	0x200002fc
    3cd8:	000038cd 	.word	0x000038cd
    3cdc:	000035f1 	.word	0x000035f1
    3ce0:	000038b5 	.word	0x000038b5
    3ce4:	41004400 	.word	0x41004400

00003ce8 <main>:
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
}
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cea:	46ce      	mov	lr, r9
    3cec:	4647      	mov	r7, r8
    3cee:	b580      	push	{r7, lr}
    3cf0:	b089      	sub	sp, #36	; 0x24
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    3cf2:	4b6b      	ldr	r3, [pc, #428]	; (3ea0 <main+0x1b8>)
    3cf4:	2500      	movs	r5, #0
    3cf6:	701d      	strb	r5, [r3, #0]
    3cf8:	705d      	strb	r5, [r3, #1]
    3cfa:	709d      	strb	r5, [r3, #2]
    3cfc:	70dd      	strb	r5, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    3cfe:	2601      	movs	r6, #1
    3d00:	711e      	strb	r6, [r3, #4]
	irq_initialize_vectors();

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    3d02:	4b68      	ldr	r3, [pc, #416]	; (3ea4 <main+0x1bc>)
    3d04:	4798      	blx	r3
	
	delay_init();
    3d06:	4b68      	ldr	r3, [pc, #416]	; (3ea8 <main+0x1c0>)
    3d08:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3d0a:	ac02      	add	r4, sp, #8
    3d0c:	23a0      	movs	r3, #160	; 0xa0
    3d0e:	011b      	lsls	r3, r3, #4
    3d10:	8023      	strh	r3, [r4, #0]
	config->clear_on_match      = false;
    3d12:	70a5      	strb	r5, [r4, #2]
	config->continuously_update = false;
    3d14:	70e5      	strb	r5, [r4, #3]
	config->year_init_value     = 2000;
    3d16:	23fa      	movs	r3, #250	; 0xfa
    3d18:	00db      	lsls	r3, r3, #3
    3d1a:	80e3      	strh	r3, [r4, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    3d1c:	7225      	strb	r5, [r4, #8]
    3d1e:	7265      	strb	r5, [r4, #9]
    3d20:	72a5      	strb	r5, [r4, #10]
    3d22:	72e5      	strb	r5, [r4, #11]
    3d24:	7326      	strb	r6, [r4, #12]
    3d26:	7366      	strb	r6, [r4, #13]
    3d28:	81e3      	strh	r3, [r4, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3d2a:	2306      	movs	r3, #6
    3d2c:	7423      	strb	r3, [r4, #16]
	config_rtc_calendar.clock_24h = true;
    3d2e:	7126      	strb	r6, [r4, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3d30:	4f5e      	ldr	r7, [pc, #376]	; (3eac <main+0x1c4>)
    3d32:	0022      	movs	r2, r4
    3d34:	495e      	ldr	r1, [pc, #376]	; (3eb0 <main+0x1c8>)
    3d36:	0038      	movs	r0, r7
    3d38:	4b5e      	ldr	r3, [pc, #376]	; (3eb4 <main+0x1cc>)
    3d3a:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3d3c:	0038      	movs	r0, r7
    3d3e:	4b5e      	ldr	r3, [pc, #376]	; (3eb8 <main+0x1d0>)
    3d40:	4798      	blx	r3
	current_time.year = 2018;
    3d42:	4b5e      	ldr	r3, [pc, #376]	; (3ebc <main+0x1d4>)
    3d44:	466a      	mov	r2, sp
    3d46:	80d3      	strh	r3, [r2, #6]
	current_time.month = 02;
    3d48:	2302      	movs	r3, #2
    3d4a:	4698      	mov	r8, r3
    3d4c:	4699      	mov	r9, r3
    3d4e:	466b      	mov	r3, sp
    3d50:	4642      	mov	r2, r8
    3d52:	715a      	strb	r2, [r3, #5]
	current_time.day = 02;
    3d54:	711a      	strb	r2, [r3, #4]
	current_time.hour = 11;
    3d56:	230b      	movs	r3, #11
    3d58:	466a      	mov	r2, sp
    3d5a:	7093      	strb	r3, [r2, #2]
	current_time.minute = 39;
    3d5c:	331c      	adds	r3, #28
    3d5e:	7053      	strb	r3, [r2, #1]
	current_time.second = 42;
    3d60:	3303      	adds	r3, #3
    3d62:	7013      	strb	r3, [r2, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    3d64:	4669      	mov	r1, sp
    3d66:	0038      	movs	r0, r7
    3d68:	4b55      	ldr	r3, [pc, #340]	; (3ec0 <main+0x1d8>)
    3d6a:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    3d6c:	0038      	movs	r0, r7
    3d6e:	4b55      	ldr	r3, [pc, #340]	; (3ec4 <main+0x1dc>)
    3d70:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    3d72:	4b55      	ldr	r3, [pc, #340]	; (3ec8 <main+0x1e0>)
    3d74:	4798      	blx	r3
	ui_powerdown();
    3d76:	4b55      	ldr	r3, [pc, #340]	; (3ecc <main+0x1e4>)
    3d78:	4798      	blx	r3
	ui_cdc_init();
    3d7a:	4b55      	ldr	r3, [pc, #340]	; (3ed0 <main+0x1e8>)
    3d7c:	4798      	blx	r3
	ui_configure_callback();
    3d7e:	4b55      	ldr	r3, [pc, #340]	; (3ed4 <main+0x1ec>)
    3d80:	4798      	blx	r3

	sd_mmc_init();
    3d82:	4b55      	ldr	r3, [pc, #340]	; (3ed8 <main+0x1f0>)
    3d84:	4798      	blx	r3
	memories_initialization();
    3d86:	4b55      	ldr	r3, [pc, #340]	; (3edc <main+0x1f4>)
    3d88:	4798      	blx	r3
	
	audio_in_init();
    3d8a:	4b55      	ldr	r3, [pc, #340]	; (3ee0 <main+0x1f8>)
    3d8c:	4798      	blx	r3
	dma_get_config_defaults(&rx_config);
    3d8e:	0020      	movs	r0, r4
    3d90:	4b54      	ldr	r3, [pc, #336]	; (3ee4 <main+0x1fc>)
    3d92:	4798      	blx	r3
	rx_config.peripheral_trigger = CONF_PERIPHERAL_TRIGGER_RX;
    3d94:	2303      	movs	r3, #3
    3d96:	7063      	strb	r3, [r4, #1]
	rx_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    3d98:	4643      	mov	r3, r8
    3d9a:	70a3      	strb	r3, [r4, #2]
	dma_allocate(rx_resource, &rx_config);
    3d9c:	4f52      	ldr	r7, [pc, #328]	; (3ee8 <main+0x200>)
    3d9e:	0021      	movs	r1, r4
    3da0:	0038      	movs	r0, r7
    3da2:	4b52      	ldr	r3, [pc, #328]	; (3eec <main+0x204>)
    3da4:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
    3da6:	7026      	strb	r6, [r4, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    3da8:	7065      	strb	r5, [r4, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    3daa:	70a5      	strb	r5, [r4, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    3dac:	70e5      	strb	r5, [r4, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
	/* Enable destination increment */
	config->dst_increment_enable = true;
    3dae:	7166      	strb	r6, [r4, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
    3db0:	71a5      	strb	r5, [r4, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    3db2:	71e5      	strb	r5, [r4, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
    3db4:	6165      	str	r5, [r4, #20]
	rx_descriptor_config.src_increment_enable = false;
    3db6:	7125      	strb	r5, [r4, #4]
	rx_descriptor_config.block_transfer_count = sizeof(buffer_rx)/sizeof(uint8_t);
    3db8:	4643      	mov	r3, r8
    3dba:	8123      	strh	r3, [r4, #8]
	rx_descriptor_config.source_address = (uint32_t)(&adc_spi_module.hw->SPI.DATA.reg);
    3dbc:	4b4c      	ldr	r3, [pc, #304]	; (3ef0 <main+0x208>)
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	3328      	adds	r3, #40	; 0x28
    3dc2:	60e3      	str	r3, [r4, #12]
	rx_descriptor_config.destination_address = (uint32_t)buffer_rx + sizeof(buffer_rx);
    3dc4:	4b4b      	ldr	r3, [pc, #300]	; (3ef4 <main+0x20c>)
    3dc6:	3302      	adds	r3, #2
    3dc8:	6123      	str	r3, [r4, #16]
	dma_descriptor_create(rx_descriptor, &rx_descriptor_config);
    3dca:	4d4b      	ldr	r5, [pc, #300]	; (3ef8 <main+0x210>)
    3dcc:	0021      	movs	r1, r4
    3dce:	0028      	movs	r0, r5
    3dd0:	4b4a      	ldr	r3, [pc, #296]	; (3efc <main+0x214>)
    3dd2:	4798      	blx	r3
/********  DMA TEST ********/
	configure_dma_resource_rx(&dma_resource_rx);
	setup_transfer_descriptor_rx(&dma_descriptor_rx);
	dma_add_descriptor(&dma_resource_rx, &dma_descriptor_rx);
    3dd4:	0029      	movs	r1, r5
    3dd6:	0038      	movs	r0, r7
    3dd8:	4b49      	ldr	r3, [pc, #292]	; (3f00 <main+0x218>)
    3dda:	4798      	blx	r3
	resource->callback[type] = callback;
    3ddc:	4b49      	ldr	r3, [pc, #292]	; (3f04 <main+0x21c>)
    3dde:	60bb      	str	r3, [r7, #8]
	resource->callback_enable |= 1 << type;
    3de0:	7c3b      	ldrb	r3, [r7, #16]
    3de2:	464a      	mov	r2, r9
    3de4:	4313      	orrs	r3, r2
    3de6:	743b      	strb	r3, [r7, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    3de8:	783a      	ldrb	r2, [r7, #0]
    3dea:	4947      	ldr	r1, [pc, #284]	; (3f08 <main+0x220>)
    3dec:	5c8b      	ldrb	r3, [r1, r2]
    3dee:	4648      	mov	r0, r9
    3df0:	4303      	orrs	r3, r0
    3df2:	548b      	strb	r3, [r1, r2]
	cpu_irq_enable();
    3df4:	4b45      	ldr	r3, [pc, #276]	; (3f0c <main+0x224>)
    3df6:	701e      	strb	r6, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3df8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3dfc:	b662      	cpsie	i
	 * because the USB management & button detection
	 * are done by interrupt */
	for(;;) {
		if(rec_start_request) {
			/* Testing if SD card is present */
			if(sd_test_availability()) {
    3dfe:	4e44      	ldr	r6, [pc, #272]	; (3f10 <main+0x228>)
				if(audio_record_init()) {
    3e00:	4b44      	ldr	r3, [pc, #272]	; (3f14 <main+0x22c>)
    3e02:	4698      	mov	r8, r3
					rec_init_done = true;
				}
				rec_start_request = false;
    3e04:	2400      	movs	r4, #0
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    3e06:	4d44      	ldr	r5, [pc, #272]	; (3f18 <main+0x230>)
    3e08:	e048      	b.n	3e9c <main+0x1b4>
			if(sd_test_availability()) {
    3e0a:	47b0      	blx	r6
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d017      	beq.n	3e40 <main+0x158>
				if(audio_record_init()) {
    3e10:	47c0      	blx	r8
    3e12:	2800      	cmp	r0, #0
    3e14:	d002      	beq.n	3e1c <main+0x134>
					rec_init_done = true;
    3e16:	2201      	movs	r2, #1
    3e18:	4b40      	ldr	r3, [pc, #256]	; (3f1c <main+0x234>)
    3e1a:	701a      	strb	r2, [r3, #0]
				rec_start_request = false;
    3e1c:	4b40      	ldr	r3, [pc, #256]	; (3f20 <main+0x238>)
    3e1e:	701c      	strb	r4, [r3, #0]
    3e20:	e00e      	b.n	3e40 <main+0x158>
			}
		}
		
		if(rec_stop_request) {
			if(!audio_record_close()) {
    3e22:	4b40      	ldr	r3, [pc, #256]	; (3f24 <main+0x23c>)
    3e24:	4798      	blx	r3
    3e26:	2800      	cmp	r0, #0
    3e28:	d10e      	bne.n	3e48 <main+0x160>
				printf("ERROR closing recorded file\n\r");
    3e2a:	483f      	ldr	r0, [pc, #252]	; (3f28 <main+0x240>)
    3e2c:	4b3f      	ldr	r3, [pc, #252]	; (3f2c <main+0x244>)
    3e2e:	4798      	blx	r3
    3e30:	e00a      	b.n	3e48 <main+0x160>
			audio_frame_cnt = 0;
			rec_init_done = false;
			rec_running = true;
		}
		
		if(rec_running) {
    3e32:	4b3f      	ldr	r3, [pc, #252]	; (3f30 <main+0x248>)
    3e34:	781b      	ldrb	r3, [r3, #0]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d117      	bne.n	3e6a <main+0x182>
		if(rec_start_request) {
    3e3a:	783b      	ldrb	r3, [r7, #0]
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d1e4      	bne.n	3e0a <main+0x122>
		if(rec_stop_request) {
    3e40:	4b3c      	ldr	r3, [pc, #240]	; (3f34 <main+0x24c>)
    3e42:	781b      	ldrb	r3, [r3, #0]
    3e44:	2b00      	cmp	r3, #0
    3e46:	d1ec      	bne.n	3e22 <main+0x13a>
		if(rec_init_done) {
    3e48:	4b34      	ldr	r3, [pc, #208]	; (3f1c <main+0x234>)
    3e4a:	781b      	ldrb	r3, [r3, #0]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d0f0      	beq.n	3e32 <main+0x14a>
    3e50:	2380      	movs	r3, #128	; 0x80
    3e52:	015b      	lsls	r3, r3, #5
    3e54:	4a38      	ldr	r2, [pc, #224]	; (3f38 <main+0x250>)
    3e56:	61d3      	str	r3, [r2, #28]
		port_base->OUTCLR.reg = pin_mask;
    3e58:	616b      	str	r3, [r5, #20]
			audio_frame_cnt = 0;
    3e5a:	4b38      	ldr	r3, [pc, #224]	; (3f3c <main+0x254>)
    3e5c:	601c      	str	r4, [r3, #0]
			rec_init_done = false;
    3e5e:	4b2f      	ldr	r3, [pc, #188]	; (3f1c <main+0x234>)
    3e60:	701c      	strb	r4, [r3, #0]
			rec_running = true;
    3e62:	2201      	movs	r2, #1
    3e64:	4b32      	ldr	r3, [pc, #200]	; (3f30 <main+0x248>)
    3e66:	701a      	strb	r2, [r3, #0]
    3e68:	e7e3      	b.n	3e32 <main+0x14a>
    3e6a:	2380      	movs	r3, #128	; 0x80
    3e6c:	035b      	lsls	r3, r3, #13
    3e6e:	616b      	str	r3, [r5, #20]
			port_pin_set_output_level(ADC_CONV_PIN, false);
			spi_select_slave(&adc_spi_module, &adc_spi_slave, true);
    3e70:	2201      	movs	r2, #1
    3e72:	4933      	ldr	r1, [pc, #204]	; (3f40 <main+0x258>)
    3e74:	481e      	ldr	r0, [pc, #120]	; (3ef0 <main+0x208>)
    3e76:	4b33      	ldr	r3, [pc, #204]	; (3f44 <main+0x25c>)
    3e78:	4798      	blx	r3
			dma_start_transfer_job(&dma_resource_rx);
    3e7a:	481b      	ldr	r0, [pc, #108]	; (3ee8 <main+0x200>)
    3e7c:	4b32      	ldr	r3, [pc, #200]	; (3f48 <main+0x260>)
    3e7e:	4798      	blx	r3
			while(!transfer_rx_done) {
    3e80:	4a32      	ldr	r2, [pc, #200]	; (3f4c <main+0x264>)
    3e82:	7813      	ldrb	r3, [r2, #0]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d0fc      	beq.n	3e82 <main+0x19a>
				
			}
			spi_select_slave(&adc_spi_module, &adc_spi_slave, false);
    3e88:	0022      	movs	r2, r4
    3e8a:	492d      	ldr	r1, [pc, #180]	; (3f40 <main+0x258>)
    3e8c:	4818      	ldr	r0, [pc, #96]	; (3ef0 <main+0x208>)
    3e8e:	4b2d      	ldr	r3, [pc, #180]	; (3f44 <main+0x25c>)
    3e90:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    3e92:	2380      	movs	r3, #128	; 0x80
    3e94:	035b      	lsls	r3, r3, #13
    3e96:	61ab      	str	r3, [r5, #24]
			port_pin_set_output_level(ADC_CONV_PIN, true);
			rec_running = false;
    3e98:	4b25      	ldr	r3, [pc, #148]	; (3f30 <main+0x248>)
    3e9a:	701c      	strb	r4, [r3, #0]
		if(rec_start_request) {
    3e9c:	4f20      	ldr	r7, [pc, #128]	; (3f20 <main+0x238>)
    3e9e:	e7cc      	b.n	3e3a <main+0x152>
    3ea0:	20000b04 	.word	0x20000b04
    3ea4:	00006259 	.word	0x00006259
    3ea8:	00005511 	.word	0x00005511
    3eac:	200002e4 	.word	0x200002e4
    3eb0:	40001400 	.word	0x40001400
    3eb4:	000010b1 	.word	0x000010b1
    3eb8:	00000f55 	.word	0x00000f55
    3ebc:	000007e2 	.word	0x000007e2
    3ec0:	00001021 	.word	0x00001021
    3ec4:	0000116d 	.word	0x0000116d
    3ec8:	00004281 	.word	0x00004281
    3ecc:	00004355 	.word	0x00004355
    3ed0:	0000418d 	.word	0x0000418d
    3ed4:	00004321 	.word	0x00004321
    3ed8:	00000711 	.word	0x00000711
    3edc:	00003f51 	.word	0x00003f51
    3ee0:	00003ae5 	.word	0x00003ae5
    3ee4:	000001c9 	.word	0x000001c9
    3ee8:	20000358 	.word	0x20000358
    3eec:	000001d9 	.word	0x000001d9
    3ef0:	200002f0 	.word	0x200002f0
    3ef4:	20000320 	.word	0x20000320
    3ef8:	20000380 	.word	0x20000380
    3efc:	000003a9 	.word	0x000003a9
    3f00:	00000451 	.word	0x00000451
    3f04:	00003ad9 	.word	0x00003ad9
    3f08:	20000150 	.word	0x20000150
    3f0c:	20000069 	.word	0x20000069
    3f10:	00003f55 	.word	0x00003f55
    3f14:	00003bc5 	.word	0x00003bc5
    3f18:	41004400 	.word	0x41004400
    3f1c:	200001b1 	.word	0x200001b1
    3f20:	200001b3 	.word	0x200001b3
    3f24:	00003c69 	.word	0x00003c69
    3f28:	00008060 	.word	0x00008060
    3f2c:	000069a9 	.word	0x000069a9
    3f30:	200001b2 	.word	0x200001b2
    3f34:	200001b4 	.word	0x200001b4
    3f38:	41004480 	.word	0x41004480
    3f3c:	200001a8 	.word	0x200001a8
    3f40:	20000374 	.word	0x20000374
    3f44:	00005219 	.word	0x00005219
    3f48:	00000321 	.word	0x00000321
    3f4c:	200001b5 	.word	0x200001b5

00003f50 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    3f50:	4770      	bx	lr
	...

00003f54 <sd_test_availability>:
#include "sd_management.h"

extern volatile bool rec_start_request;

bool sd_test_availability(void)
{
    3f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    3f56:	4c2c      	ldr	r4, [pc, #176]	; (4008 <sd_test_availability+0xb4>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    3f58:	4d2c      	ldr	r5, [pc, #176]	; (400c <sd_test_availability+0xb8>)
    3f5a:	e028      	b.n	3fae <sd_test_availability+0x5a>
			printf("Card install fail!\n\r");
    3f5c:	482c      	ldr	r0, [pc, #176]	; (4010 <sd_test_availability+0xbc>)
    3f5e:	4e2d      	ldr	r6, [pc, #180]	; (4014 <sd_test_availability+0xc0>)
    3f60:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    3f62:	482d      	ldr	r0, [pc, #180]	; (4018 <sd_test_availability+0xc4>)
    3f64:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    3f66:	4e2d      	ldr	r6, [pc, #180]	; (401c <sd_test_availability+0xc8>)
    3f68:	2000      	movs	r0, #0
    3f6a:	47b0      	blx	r6
    3f6c:	2802      	cmp	r0, #2
    3f6e:	d1fb      	bne.n	3f68 <sd_test_availability+0x14>
	port_base->OUTTGL.reg = pin_mask;
    3f70:	4b2b      	ldr	r3, [pc, #172]	; (4020 <sd_test_availability+0xcc>)
    3f72:	2280      	movs	r2, #128	; 0x80
    3f74:	0152      	lsls	r2, r2, #5
    3f76:	61da      	str	r2, [r3, #28]
    3f78:	2280      	movs	r2, #128	; 0x80
    3f7a:	0212      	lsls	r2, r2, #8
    3f7c:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    3f7e:	2000      	movs	r0, #0
    3f80:	4b22      	ldr	r3, [pc, #136]	; (400c <sd_test_availability+0xb8>)
    3f82:	4798      	blx	r3
    3f84:	2296      	movs	r2, #150	; 0x96
    3f86:	0052      	lsls	r2, r2, #1
    3f88:	2300      	movs	r3, #0
    3f8a:	2100      	movs	r1, #0
    3f8c:	4e25      	ldr	r6, [pc, #148]	; (4024 <sd_test_availability+0xd0>)
    3f8e:	47b0      	blx	r6
    3f90:	4a25      	ldr	r2, [pc, #148]	; (4028 <sd_test_availability+0xd4>)
    3f92:	2300      	movs	r3, #0
    3f94:	1880      	adds	r0, r0, r2
    3f96:	4159      	adcs	r1, r3
    3f98:	4a24      	ldr	r2, [pc, #144]	; (402c <sd_test_availability+0xd8>)
    3f9a:	2300      	movs	r3, #0
    3f9c:	4e24      	ldr	r6, [pc, #144]	; (4030 <sd_test_availability+0xdc>)
    3f9e:	47b0      	blx	r6
    3fa0:	4b24      	ldr	r3, [pc, #144]	; (4034 <sd_test_availability+0xe0>)
    3fa2:	4798      	blx	r3
		if(!rec_start_request) {
    3fa4:	4b24      	ldr	r3, [pc, #144]	; (4038 <sd_test_availability+0xe4>)
    3fa6:	7818      	ldrb	r0, [r3, #0]
    3fa8:	b2c0      	uxtb	r0, r0
    3faa:	2800      	cmp	r0, #0
    3fac:	d024      	beq.n	3ff8 <sd_test_availability+0xa4>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    3fae:	2000      	movs	r0, #0
    3fb0:	47a0      	blx	r4
    3fb2:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    3fb4:	2801      	cmp	r0, #1
    3fb6:	d0d1      	beq.n	3f5c <sd_test_availability+0x8>
    3fb8:	4b19      	ldr	r3, [pc, #100]	; (4020 <sd_test_availability+0xcc>)
    3fba:	2280      	movs	r2, #128	; 0x80
    3fbc:	0152      	lsls	r2, r2, #5
    3fbe:	61da      	str	r2, [r3, #28]
    3fc0:	2280      	movs	r2, #128	; 0x80
    3fc2:	0212      	lsls	r2, r2, #8
    3fc4:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    3fc6:	2000      	movs	r0, #0
    3fc8:	47a8      	blx	r5
    3fca:	2296      	movs	r2, #150	; 0x96
    3fcc:	0052      	lsls	r2, r2, #1
    3fce:	2300      	movs	r3, #0
    3fd0:	2100      	movs	r1, #0
    3fd2:	4f14      	ldr	r7, [pc, #80]	; (4024 <sd_test_availability+0xd0>)
    3fd4:	47b8      	blx	r7
    3fd6:	4a14      	ldr	r2, [pc, #80]	; (4028 <sd_test_availability+0xd4>)
    3fd8:	2300      	movs	r3, #0
    3fda:	1880      	adds	r0, r0, r2
    3fdc:	4159      	adcs	r1, r3
    3fde:	4a13      	ldr	r2, [pc, #76]	; (402c <sd_test_availability+0xd8>)
    3fe0:	2300      	movs	r3, #0
    3fe2:	4f13      	ldr	r7, [pc, #76]	; (4030 <sd_test_availability+0xdc>)
    3fe4:	47b8      	blx	r7
    3fe6:	4b13      	ldr	r3, [pc, #76]	; (4034 <sd_test_availability+0xe0>)
    3fe8:	4798      	blx	r3
		if(!rec_start_request) {
    3fea:	4b13      	ldr	r3, [pc, #76]	; (4038 <sd_test_availability+0xe4>)
    3fec:	7818      	ldrb	r0, [r3, #0]
    3fee:	b2c0      	uxtb	r0, r0
    3ff0:	2800      	cmp	r0, #0
    3ff2:	d001      	beq.n	3ff8 <sd_test_availability+0xa4>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    3ff4:	2e00      	cmp	r6, #0
    3ff6:	d1da      	bne.n	3fae <sd_test_availability+0x5a>
		port_base->OUTSET.reg = pin_mask;
    3ff8:	4b09      	ldr	r3, [pc, #36]	; (4020 <sd_test_availability+0xcc>)
    3ffa:	2280      	movs	r2, #128	; 0x80
    3ffc:	0152      	lsls	r2, r2, #5
    3ffe:	619a      	str	r2, [r3, #24]
    4000:	2280      	movs	r2, #128	; 0x80
    4002:	0212      	lsls	r2, r2, #8
    4004:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
    4006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4008:	00005515 	.word	0x00005515
    400c:	00006015 	.word	0x00006015
    4010:	00008080 	.word	0x00008080
    4014:	000069a9 	.word	0x000069a9
    4018:	00008098 	.word	0x00008098
    401c:	00000731 	.word	0x00000731
    4020:	41004400 	.word	0x41004400
    4024:	00006751 	.word	0x00006751
    4028:	00001b57 	.word	0x00001b57
    402c:	00001b58 	.word	0x00001b58
    4030:	00006711 	.word	0x00006711
    4034:	20000001 	.word	0x20000001
    4038:	200001b3 	.word	0x200001b3

0000403c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    403c:	b570      	push	{r4, r5, r6, lr}
    403e:	b082      	sub	sp, #8
    4040:	0005      	movs	r5, r0
    4042:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4044:	2200      	movs	r2, #0
    4046:	466b      	mov	r3, sp
    4048:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    404a:	4c06      	ldr	r4, [pc, #24]	; (4064 <usart_serial_getchar+0x28>)
    404c:	466b      	mov	r3, sp
    404e:	1d99      	adds	r1, r3, #6
    4050:	0028      	movs	r0, r5
    4052:	47a0      	blx	r4
    4054:	2800      	cmp	r0, #0
    4056:	d1f9      	bne.n	404c <usart_serial_getchar+0x10>

	*c = temp;
    4058:	466b      	mov	r3, sp
    405a:	3306      	adds	r3, #6
    405c:	881b      	ldrh	r3, [r3, #0]
    405e:	7033      	strb	r3, [r6, #0]
}
    4060:	b002      	add	sp, #8
    4062:	bd70      	pop	{r4, r5, r6, pc}
    4064:	000016c9 	.word	0x000016c9

00004068 <usart_serial_putchar>:
{
    4068:	b570      	push	{r4, r5, r6, lr}
    406a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    406c:	b28c      	uxth	r4, r1
    406e:	4e03      	ldr	r6, [pc, #12]	; (407c <usart_serial_putchar+0x14>)
    4070:	0021      	movs	r1, r4
    4072:	0028      	movs	r0, r5
    4074:	47b0      	blx	r6
    4076:	2800      	cmp	r0, #0
    4078:	d1fa      	bne.n	4070 <usart_serial_putchar+0x8>
}
    407a:	bd70      	pop	{r4, r5, r6, pc}
    407c:	0000169d 	.word	0x0000169d

00004080 <ui_button1_callback>:
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void ui_button1_callback(void)
{
    4080:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    4082:	4b18      	ldr	r3, [pc, #96]	; (40e4 <ui_button1_callback+0x64>)
    4084:	6a1b      	ldr	r3, [r3, #32]
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_1_PIN);
	
	if(press_state) {
    4086:	00db      	lsls	r3, r3, #3
    4088:	d500      	bpl.n	408c <ui_button1_callback+0xc>
		}
		else {
			rec_start_request = true;
		}
	}
}
    408a:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    408c:	2000      	movs	r0, #0
    408e:	4b16      	ldr	r3, [pc, #88]	; (40e8 <ui_button1_callback+0x68>)
    4090:	4798      	blx	r3
    4092:	2264      	movs	r2, #100	; 0x64
    4094:	2300      	movs	r3, #0
    4096:	2100      	movs	r1, #0
    4098:	4c14      	ldr	r4, [pc, #80]	; (40ec <ui_button1_callback+0x6c>)
    409a:	47a0      	blx	r4
    409c:	4a14      	ldr	r2, [pc, #80]	; (40f0 <ui_button1_callback+0x70>)
    409e:	2300      	movs	r3, #0
    40a0:	1880      	adds	r0, r0, r2
    40a2:	4159      	adcs	r1, r3
    40a4:	4a13      	ldr	r2, [pc, #76]	; (40f4 <ui_button1_callback+0x74>)
    40a6:	2300      	movs	r3, #0
    40a8:	4c13      	ldr	r4, [pc, #76]	; (40f8 <ui_button1_callback+0x78>)
    40aa:	47a0      	blx	r4
    40ac:	4b13      	ldr	r3, [pc, #76]	; (40fc <ui_button1_callback+0x7c>)
    40ae:	4798      	blx	r3
    40b0:	4b0c      	ldr	r3, [pc, #48]	; (40e4 <ui_button1_callback+0x64>)
    40b2:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    40b4:	00db      	lsls	r3, r3, #3
    40b6:	d4e8      	bmi.n	408a <ui_button1_callback+0xa>
		if(rec_running || rec_start_request) {
    40b8:	4b11      	ldr	r3, [pc, #68]	; (4100 <ui_button1_callback+0x80>)
    40ba:	781b      	ldrb	r3, [r3, #0]
    40bc:	2b00      	cmp	r3, #0
    40be:	d107      	bne.n	40d0 <ui_button1_callback+0x50>
    40c0:	4b10      	ldr	r3, [pc, #64]	; (4104 <ui_button1_callback+0x84>)
    40c2:	781b      	ldrb	r3, [r3, #0]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d103      	bne.n	40d0 <ui_button1_callback+0x50>
			rec_start_request = true;
    40c8:	2201      	movs	r2, #1
    40ca:	4b0e      	ldr	r3, [pc, #56]	; (4104 <ui_button1_callback+0x84>)
    40cc:	701a      	strb	r2, [r3, #0]
}
    40ce:	e7dc      	b.n	408a <ui_button1_callback+0xa>
			rec_start_request = false;
    40d0:	2300      	movs	r3, #0
    40d2:	4a0c      	ldr	r2, [pc, #48]	; (4104 <ui_button1_callback+0x84>)
    40d4:	7013      	strb	r3, [r2, #0]
			rec_running = false;
    40d6:	4a0a      	ldr	r2, [pc, #40]	; (4100 <ui_button1_callback+0x80>)
    40d8:	7013      	strb	r3, [r2, #0]
			rec_stop_request = true;
    40da:	2201      	movs	r2, #1
    40dc:	4b0a      	ldr	r3, [pc, #40]	; (4108 <ui_button1_callback+0x88>)
    40de:	701a      	strb	r2, [r3, #0]
    40e0:	e7d3      	b.n	408a <ui_button1_callback+0xa>
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	41004400 	.word	0x41004400
    40e8:	00006015 	.word	0x00006015
    40ec:	00006751 	.word	0x00006751
    40f0:	00001b57 	.word	0x00001b57
    40f4:	00001b58 	.word	0x00001b58
    40f8:	00006711 	.word	0x00006711
    40fc:	20000001 	.word	0x20000001
    4100:	200001b2 	.word	0x200001b2
    4104:	200001b3 	.word	0x200001b3
    4108:	200001b4 	.word	0x200001b4

0000410c <ui_button3_callback>:


void ui_button3_callback(void)
{
    410c:	b510      	push	{r4, lr}
    410e:	4b17      	ldr	r3, [pc, #92]	; (416c <ui_button3_callback+0x60>)
    4110:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    4112:	071b      	lsls	r3, r3, #28
    4114:	d500      	bpl.n	4118 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    4116:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    4118:	2000      	movs	r0, #0
    411a:	4b15      	ldr	r3, [pc, #84]	; (4170 <ui_button3_callback+0x64>)
    411c:	4798      	blx	r3
    411e:	2264      	movs	r2, #100	; 0x64
    4120:	2300      	movs	r3, #0
    4122:	2100      	movs	r1, #0
    4124:	4c13      	ldr	r4, [pc, #76]	; (4174 <ui_button3_callback+0x68>)
    4126:	47a0      	blx	r4
    4128:	4a13      	ldr	r2, [pc, #76]	; (4178 <ui_button3_callback+0x6c>)
    412a:	2300      	movs	r3, #0
    412c:	1880      	adds	r0, r0, r2
    412e:	4159      	adcs	r1, r3
    4130:	4a12      	ldr	r2, [pc, #72]	; (417c <ui_button3_callback+0x70>)
    4132:	2300      	movs	r3, #0
    4134:	4c12      	ldr	r4, [pc, #72]	; (4180 <ui_button3_callback+0x74>)
    4136:	47a0      	blx	r4
    4138:	4b12      	ldr	r3, [pc, #72]	; (4184 <ui_button3_callback+0x78>)
    413a:	4798      	blx	r3
    413c:	4b0b      	ldr	r3, [pc, #44]	; (416c <ui_button3_callback+0x60>)
    413e:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    4140:	071b      	lsls	r3, r3, #28
    4142:	d4e8      	bmi.n	4116 <ui_button3_callback+0xa>
		if(monitoring_on) {
    4144:	4b10      	ldr	r3, [pc, #64]	; (4188 <ui_button3_callback+0x7c>)
    4146:	781b      	ldrb	r3, [r3, #0]
    4148:	2b00      	cmp	r3, #0
    414a:	d107      	bne.n	415c <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    414c:	2280      	movs	r2, #128	; 0x80
    414e:	0212      	lsls	r2, r2, #8
    4150:	4b06      	ldr	r3, [pc, #24]	; (416c <ui_button3_callback+0x60>)
    4152:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    4154:	2201      	movs	r2, #1
    4156:	4b0c      	ldr	r3, [pc, #48]	; (4188 <ui_button3_callback+0x7c>)
    4158:	701a      	strb	r2, [r3, #0]
}
    415a:	e7dc      	b.n	4116 <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    415c:	2280      	movs	r2, #128	; 0x80
    415e:	0212      	lsls	r2, r2, #8
    4160:	4b02      	ldr	r3, [pc, #8]	; (416c <ui_button3_callback+0x60>)
    4162:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    4164:	2200      	movs	r2, #0
    4166:	4b08      	ldr	r3, [pc, #32]	; (4188 <ui_button3_callback+0x7c>)
    4168:	701a      	strb	r2, [r3, #0]
    416a:	e7d4      	b.n	4116 <ui_button3_callback+0xa>
    416c:	41004400 	.word	0x41004400
    4170:	00006015 	.word	0x00006015
    4174:	00006751 	.word	0x00006751
    4178:	00001b57 	.word	0x00001b57
    417c:	00001b58 	.word	0x00001b58
    4180:	00006711 	.word	0x00006711
    4184:	20000001 	.word	0x20000001
    4188:	200001b0 	.word	0x200001b0

0000418c <ui_cdc_init>:
{
    418c:	b5f0      	push	{r4, r5, r6, r7, lr}
    418e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    4190:	2380      	movs	r3, #128	; 0x80
    4192:	05db      	lsls	r3, r3, #23
    4194:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4196:	2300      	movs	r3, #0
    4198:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    419a:	22ff      	movs	r2, #255	; 0xff
    419c:	4669      	mov	r1, sp
    419e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    41a0:	2200      	movs	r2, #0
    41a2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    41a4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    41a6:	2401      	movs	r4, #1
    41a8:	2124      	movs	r1, #36	; 0x24
    41aa:	4668      	mov	r0, sp
    41ac:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    41ae:	3101      	adds	r1, #1
    41b0:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    41b2:	3101      	adds	r1, #1
    41b4:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    41b6:	3101      	adds	r1, #1
    41b8:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    41ba:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    41bc:	3105      	adds	r1, #5
    41be:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    41c0:	3101      	adds	r1, #1
    41c2:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    41c4:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    41c6:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    41c8:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    41ca:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    41cc:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    41ce:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    41d0:	2313      	movs	r3, #19
    41d2:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    41d4:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    41d6:	2380      	movs	r3, #128	; 0x80
    41d8:	035b      	lsls	r3, r3, #13
    41da:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    41dc:	4b1a      	ldr	r3, [pc, #104]	; (4248 <ui_cdc_init+0xbc>)
    41de:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    41e0:	4b1a      	ldr	r3, [pc, #104]	; (424c <ui_cdc_init+0xc0>)
    41e2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    41e4:	2301      	movs	r3, #1
    41e6:	425b      	negs	r3, r3
    41e8:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    41ea:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    41ec:	23e1      	movs	r3, #225	; 0xe1
    41ee:	025b      	lsls	r3, r3, #9
    41f0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    41f2:	4d17      	ldr	r5, [pc, #92]	; (4250 <ui_cdc_init+0xc4>)
    41f4:	4b17      	ldr	r3, [pc, #92]	; (4254 <ui_cdc_init+0xc8>)
    41f6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    41f8:	4a17      	ldr	r2, [pc, #92]	; (4258 <ui_cdc_init+0xcc>)
    41fa:	4b18      	ldr	r3, [pc, #96]	; (425c <ui_cdc_init+0xd0>)
    41fc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    41fe:	4a18      	ldr	r2, [pc, #96]	; (4260 <ui_cdc_init+0xd4>)
    4200:	4b18      	ldr	r3, [pc, #96]	; (4264 <ui_cdc_init+0xd8>)
    4202:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4204:	466a      	mov	r2, sp
    4206:	4918      	ldr	r1, [pc, #96]	; (4268 <ui_cdc_init+0xdc>)
    4208:	0028      	movs	r0, r5
    420a:	4b18      	ldr	r3, [pc, #96]	; (426c <ui_cdc_init+0xe0>)
    420c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    420e:	4f18      	ldr	r7, [pc, #96]	; (4270 <ui_cdc_init+0xe4>)
    4210:	683b      	ldr	r3, [r7, #0]
    4212:	6898      	ldr	r0, [r3, #8]
    4214:	2100      	movs	r1, #0
    4216:	4e17      	ldr	r6, [pc, #92]	; (4274 <ui_cdc_init+0xe8>)
    4218:	47b0      	blx	r6
	setbuf(stdin, NULL);
    421a:	683b      	ldr	r3, [r7, #0]
    421c:	6858      	ldr	r0, [r3, #4]
    421e:	2100      	movs	r1, #0
    4220:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4222:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4224:	0030      	movs	r0, r6
    4226:	4b14      	ldr	r3, [pc, #80]	; (4278 <ui_cdc_init+0xec>)
    4228:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    422a:	231f      	movs	r3, #31
    422c:	4018      	ands	r0, r3
    422e:	4084      	lsls	r4, r0
    4230:	4b12      	ldr	r3, [pc, #72]	; (427c <ui_cdc_init+0xf0>)
    4232:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4234:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4236:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4238:	2b00      	cmp	r3, #0
    423a:	d1fc      	bne.n	4236 <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    423c:	6833      	ldr	r3, [r6, #0]
    423e:	2202      	movs	r2, #2
    4240:	4313      	orrs	r3, r2
    4242:	6033      	str	r3, [r6, #0]
}
    4244:	b011      	add	sp, #68	; 0x44
    4246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4248:	00160002 	.word	0x00160002
    424c:	00170002 	.word	0x00170002
    4250:	20000324 	.word	0x20000324
    4254:	200002e0 	.word	0x200002e0
    4258:	00004069 	.word	0x00004069
    425c:	200002dc 	.word	0x200002dc
    4260:	0000403d 	.word	0x0000403d
    4264:	200002d8 	.word	0x200002d8
    4268:	42001400 	.word	0x42001400
    426c:	00001359 	.word	0x00001359
    4270:	2000006c 	.word	0x2000006c
    4274:	000069dd 	.word	0x000069dd
    4278:	000012c9 	.word	0x000012c9
    427c:	e000e100 	.word	0xe000e100

00004280 <ui_lb_init>:
{
    4280:	b5f0      	push	{r4, r5, r6, r7, lr}
    4282:	46c6      	mov	lr, r8
    4284:	b500      	push	{lr}
    4286:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    4288:	ac03      	add	r4, sp, #12
    428a:	2501      	movs	r5, #1
    428c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    428e:	2600      	movs	r6, #0
    4290:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4292:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    4294:	0021      	movs	r1, r4
    4296:	200c      	movs	r0, #12
    4298:	4f1d      	ldr	r7, [pc, #116]	; (4310 <ui_lb_init+0x90>)
    429a:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    429c:	4b1d      	ldr	r3, [pc, #116]	; (4314 <ui_lb_init+0x94>)
    429e:	4698      	mov	r8, r3
    42a0:	2380      	movs	r3, #128	; 0x80
    42a2:	015b      	lsls	r3, r3, #5
    42a4:	4642      	mov	r2, r8
    42a6:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    42a8:	0021      	movs	r1, r4
    42aa:	200d      	movs	r0, #13
    42ac:	47b8      	blx	r7
    42ae:	2380      	movs	r3, #128	; 0x80
    42b0:	019b      	lsls	r3, r3, #6
    42b2:	4642      	mov	r2, r8
    42b4:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    42b6:	0021      	movs	r1, r4
    42b8:	200f      	movs	r0, #15
    42ba:	47b8      	blx	r7
    42bc:	2380      	movs	r3, #128	; 0x80
    42be:	021b      	lsls	r3, r3, #8
    42c0:	4642      	mov	r2, r8
    42c2:	6193      	str	r3, [r2, #24]
	port_pin_set_config(PIN_PB12, &pin_conf);
    42c4:	0021      	movs	r1, r4
    42c6:	202c      	movs	r0, #44	; 0x2c
    42c8:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    42ca:	4668      	mov	r0, sp
    42cc:	4b12      	ldr	r3, [pc, #72]	; (4318 <ui_lb_init+0x98>)
    42ce:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    42d0:	231c      	movs	r3, #28
    42d2:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    42d4:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    42d6:	466b      	mov	r3, sp
    42d8:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    42da:	2403      	movs	r4, #3
    42dc:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    42de:	4669      	mov	r1, sp
    42e0:	2008      	movs	r0, #8
    42e2:	4f0e      	ldr	r7, [pc, #56]	; (431c <ui_lb_init+0x9c>)
    42e4:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    42e6:	2302      	movs	r3, #2
    42e8:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    42ea:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    42ec:	466b      	mov	r3, sp
    42ee:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    42f0:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    42f2:	4669      	mov	r1, sp
    42f4:	2002      	movs	r0, #2
    42f6:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    42f8:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    42fa:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    42fc:	466b      	mov	r3, sp
    42fe:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    4300:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    4302:	4669      	mov	r1, sp
    4304:	2003      	movs	r0, #3
    4306:	47b8      	blx	r7
}
    4308:	b004      	add	sp, #16
    430a:	bc04      	pop	{r2}
    430c:	4690      	mov	r8, r2
    430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4310:	00005ed1 	.word	0x00005ed1
    4314:	41004400 	.word	0x41004400
    4318:	00000ec9 	.word	0x00000ec9
    431c:	00000edd 	.word	0x00000edd

00004320 <ui_configure_callback>:
{
    4320:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    4322:	2200      	movs	r2, #0
    4324:	2108      	movs	r1, #8
    4326:	4807      	ldr	r0, [pc, #28]	; (4344 <ui_configure_callback+0x24>)
    4328:	4c07      	ldr	r4, [pc, #28]	; (4348 <ui_configure_callback+0x28>)
    432a:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    432c:	2200      	movs	r2, #0
    432e:	2103      	movs	r1, #3
    4330:	4806      	ldr	r0, [pc, #24]	; (434c <ui_configure_callback+0x2c>)
    4332:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    4334:	2100      	movs	r1, #0
    4336:	2008      	movs	r0, #8
    4338:	4c05      	ldr	r4, [pc, #20]	; (4350 <ui_configure_callback+0x30>)
    433a:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    433c:	2100      	movs	r1, #0
    433e:	2003      	movs	r0, #3
    4340:	47a0      	blx	r4
}
    4342:	bd10      	pop	{r4, pc}
    4344:	00004081 	.word	0x00004081
    4348:	00004935 	.word	0x00004935
    434c:	0000410d 	.word	0x0000410d
    4350:	00004961 	.word	0x00004961

00004354 <ui_powerdown>:
    4354:	2280      	movs	r2, #128	; 0x80
    4356:	05d2      	lsls	r2, r2, #23
    4358:	4b01      	ldr	r3, [pc, #4]	; (4360 <ui_powerdown+0xc>)
    435a:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    435c:	4770      	bx	lr
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	41004480 	.word	0x41004480

00004364 <ui_start_read>:
	LED_On(LED_0_PIN);
}

void ui_start_read(void)
{
}
    4364:	4770      	bx	lr

00004366 <ui_stop_read>:

void ui_stop_read(void)
{
}
    4366:	4770      	bx	lr

00004368 <ui_start_write>:

void ui_start_write(void)
{
}
    4368:	4770      	bx	lr

0000436a <ui_stop_write>:

void ui_stop_write(void)
{
}
    436a:	4770      	bx	lr

0000436c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    436c:	b5f0      	push	{r4, r5, r6, r7, lr}
    436e:	46de      	mov	lr, fp
    4370:	4657      	mov	r7, sl
    4372:	464e      	mov	r6, r9
    4374:	4645      	mov	r5, r8
    4376:	b5e0      	push	{r5, r6, r7, lr}
    4378:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    437a:	4bc2      	ldr	r3, [pc, #776]	; (4684 <USB_Handler+0x318>)
    437c:	681f      	ldr	r7, [r3, #0]
    437e:	683d      	ldr	r5, [r7, #0]
    4380:	782b      	ldrb	r3, [r5, #0]
    4382:	09db      	lsrs	r3, r3, #7
    4384:	d114      	bne.n	43b0 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4386:	8c2e      	ldrh	r6, [r5, #32]
    4388:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    438a:	2e00      	cmp	r6, #0
    438c:	d000      	beq.n	4390 <USB_Handler+0x24>
    438e:	e1a9      	b.n	46e4 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4390:	8bae      	ldrh	r6, [r5, #28]
    4392:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4394:	23ab      	movs	r3, #171	; 0xab
    4396:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4398:	5afb      	ldrh	r3, [r7, r3]
    439a:	22aa      	movs	r2, #170	; 0xaa
    439c:	0052      	lsls	r2, r2, #1
    439e:	5abd      	ldrh	r5, [r7, r2]
    43a0:	401d      	ands	r5, r3
    43a2:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    43a4:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    43a6:	4fb8      	ldr	r7, [pc, #736]	; (4688 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    43a8:	4bb6      	ldr	r3, [pc, #728]	; (4684 <USB_Handler+0x318>)
    43aa:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    43ac:	4698      	mov	r8, r3
    43ae:	e184      	b.n	46ba <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    43b0:	8c2b      	ldrh	r3, [r5, #32]
    43b2:	b29b      	uxth	r3, r3
    43b4:	2b00      	cmp	r3, #0
    43b6:	d100      	bne.n	43ba <USB_Handler+0x4e>
    43b8:	e0de      	b.n	4578 <USB_Handler+0x20c>
    43ba:	8c28      	ldrh	r0, [r5, #32]
    43bc:	b280      	uxth	r0, r0
    43be:	4bb3      	ldr	r3, [pc, #716]	; (468c <USB_Handler+0x320>)
    43c0:	4798      	blx	r3
    43c2:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    43c4:	281f      	cmp	r0, #31
    43c6:	d900      	bls.n	43ca <USB_Handler+0x5e>
    43c8:	e0d6      	b.n	4578 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    43ca:	0003      	movs	r3, r0
    43cc:	3308      	adds	r3, #8
    43ce:	015b      	lsls	r3, r3, #5
    43d0:	18ed      	adds	r5, r5, r3
    43d2:	79ed      	ldrb	r5, [r5, #7]
    43d4:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    43d6:	07ab      	lsls	r3, r5, #30
    43d8:	d041      	beq.n	445e <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    43da:	4aad      	ldr	r2, [pc, #692]	; (4690 <USB_Handler+0x324>)
    43dc:	2301      	movs	r3, #1
    43de:	4083      	lsls	r3, r0
    43e0:	6811      	ldr	r1, [r2, #0]
    43e2:	4399      	bics	r1, r3
    43e4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    43e6:	0003      	movs	r3, r0
    43e8:	3308      	adds	r3, #8
    43ea:	015b      	lsls	r3, r3, #5
    43ec:	683a      	ldr	r2, [r7, #0]
    43ee:	4694      	mov	ip, r2
    43f0:	4463      	add	r3, ip
    43f2:	2203      	movs	r2, #3
    43f4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    43f6:	183b      	adds	r3, r7, r0
    43f8:	33ae      	adds	r3, #174	; 0xae
    43fa:	781b      	ldrb	r3, [r3, #0]
    43fc:	07db      	lsls	r3, r3, #31
    43fe:	d52e      	bpl.n	445e <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4400:	4ba4      	ldr	r3, [pc, #656]	; (4694 <USB_Handler+0x328>)
    4402:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4404:	683a      	ldr	r2, [r7, #0]
    4406:	0003      	movs	r3, r0
    4408:	3308      	adds	r3, #8
    440a:	015b      	lsls	r3, r3, #5
    440c:	5c9b      	ldrb	r3, [r3, r2]
    440e:	079b      	lsls	r3, r3, #30
    4410:	0f9b      	lsrs	r3, r3, #30
    4412:	2b01      	cmp	r3, #1
    4414:	d100      	bne.n	4418 <USB_Handler+0xac>
    4416:	e081      	b.n	451c <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4418:	0142      	lsls	r2, r0, #5
    441a:	4b9f      	ldr	r3, [pc, #636]	; (4698 <USB_Handler+0x32c>)
    441c:	189b      	adds	r3, r3, r2
    441e:	685a      	ldr	r2, [r3, #4]
    4420:	0112      	lsls	r2, r2, #4
    4422:	0c92      	lsrs	r2, r2, #18
    4424:	b290      	uxth	r0, r2
    4426:	499b      	ldr	r1, [pc, #620]	; (4694 <USB_Handler+0x328>)
    4428:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    442a:	685a      	ldr	r2, [r3, #4]
    442c:	0492      	lsls	r2, r2, #18
    442e:	0c92      	lsrs	r2, r2, #18
    4430:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4432:	685a      	ldr	r2, [r3, #4]
    4434:	4999      	ldr	r1, [pc, #612]	; (469c <USB_Handler+0x330>)
    4436:	400a      	ands	r2, r1
    4438:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    443a:	2800      	cmp	r0, #0
    443c:	d107      	bne.n	444e <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    443e:	0162      	lsls	r2, r4, #5
    4440:	4b95      	ldr	r3, [pc, #596]	; (4698 <USB_Handler+0x32c>)
    4442:	189b      	adds	r3, r3, r2
    4444:	685b      	ldr	r3, [r3, #4]
    4446:	049b      	lsls	r3, r3, #18
    4448:	0c9b      	lsrs	r3, r3, #18
    444a:	4a92      	ldr	r2, [pc, #584]	; (4694 <USB_Handler+0x328>)
    444c:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    444e:	4b8d      	ldr	r3, [pc, #564]	; (4684 <USB_Handler+0x318>)
    4450:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    4452:	1ca3      	adds	r3, r4, #2
    4454:	011b      	lsls	r3, r3, #4
    4456:	18c3      	adds	r3, r0, r3
    4458:	685b      	ldr	r3, [r3, #4]
    445a:	498e      	ldr	r1, [pc, #568]	; (4694 <USB_Handler+0x328>)
    445c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    445e:	076b      	lsls	r3, r5, #29
    4460:	d50e      	bpl.n	4480 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4462:	4a8b      	ldr	r2, [pc, #556]	; (4690 <USB_Handler+0x324>)
    4464:	2301      	movs	r3, #1
    4466:	40a3      	lsls	r3, r4
    4468:	6811      	ldr	r1, [r2, #0]
    446a:	4399      	bics	r1, r3
    446c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    446e:	4b85      	ldr	r3, [pc, #532]	; (4684 <USB_Handler+0x318>)
    4470:	681b      	ldr	r3, [r3, #0]
    4472:	681b      	ldr	r3, [r3, #0]
    4474:	0022      	movs	r2, r4
    4476:	3208      	adds	r2, #8
    4478:	0152      	lsls	r2, r2, #5
    447a:	189b      	adds	r3, r3, r2
    447c:	2204      	movs	r2, #4
    447e:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4480:	072b      	lsls	r3, r5, #28
    4482:	d514      	bpl.n	44ae <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4484:	4a82      	ldr	r2, [pc, #520]	; (4690 <USB_Handler+0x324>)
    4486:	2301      	movs	r3, #1
    4488:	40a3      	lsls	r3, r4
    448a:	6811      	ldr	r1, [r2, #0]
    448c:	4399      	bics	r1, r3
    448e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4490:	4b7c      	ldr	r3, [pc, #496]	; (4684 <USB_Handler+0x318>)
    4492:	6818      	ldr	r0, [r3, #0]
    4494:	0023      	movs	r3, r4
    4496:	3308      	adds	r3, #8
    4498:	015b      	lsls	r3, r3, #5
    449a:	6802      	ldr	r2, [r0, #0]
    449c:	4694      	mov	ip, r2
    449e:	4463      	add	r3, ip
    44a0:	2208      	movs	r2, #8
    44a2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    44a4:	1903      	adds	r3, r0, r4
    44a6:	33ae      	adds	r3, #174	; 0xae
    44a8:	781b      	ldrb	r3, [r3, #0]
    44aa:	079b      	lsls	r3, r3, #30
    44ac:	d447      	bmi.n	453e <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    44ae:	06eb      	lsls	r3, r5, #27
    44b0:	d514      	bpl.n	44dc <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    44b2:	4a77      	ldr	r2, [pc, #476]	; (4690 <USB_Handler+0x324>)
    44b4:	2301      	movs	r3, #1
    44b6:	40a3      	lsls	r3, r4
    44b8:	6811      	ldr	r1, [r2, #0]
    44ba:	4399      	bics	r1, r3
    44bc:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    44be:	4b71      	ldr	r3, [pc, #452]	; (4684 <USB_Handler+0x318>)
    44c0:	6818      	ldr	r0, [r3, #0]
    44c2:	0023      	movs	r3, r4
    44c4:	3308      	adds	r3, #8
    44c6:	015b      	lsls	r3, r3, #5
    44c8:	6802      	ldr	r2, [r0, #0]
    44ca:	4694      	mov	ip, r2
    44cc:	4463      	add	r3, ip
    44ce:	2210      	movs	r2, #16
    44d0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    44d2:	1903      	adds	r3, r0, r4
    44d4:	33ae      	adds	r3, #174	; 0xae
    44d6:	781b      	ldrb	r3, [r3, #0]
    44d8:	075b      	lsls	r3, r3, #29
    44da:	d43e      	bmi.n	455a <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    44dc:	06ab      	lsls	r3, r5, #26
    44de:	d400      	bmi.n	44e2 <USB_Handler+0x176>
    44e0:	e0b0      	b.n	4644 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    44e2:	4a6b      	ldr	r2, [pc, #428]	; (4690 <USB_Handler+0x324>)
    44e4:	2301      	movs	r3, #1
    44e6:	40a3      	lsls	r3, r4
    44e8:	6811      	ldr	r1, [r2, #0]
    44ea:	4399      	bics	r1, r3
    44ec:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    44ee:	4b65      	ldr	r3, [pc, #404]	; (4684 <USB_Handler+0x318>)
    44f0:	6818      	ldr	r0, [r3, #0]
    44f2:	0023      	movs	r3, r4
    44f4:	3308      	adds	r3, #8
    44f6:	015b      	lsls	r3, r3, #5
    44f8:	6802      	ldr	r2, [r0, #0]
    44fa:	4694      	mov	ip, r2
    44fc:	4463      	add	r3, ip
    44fe:	2220      	movs	r2, #32
    4500:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4502:	1903      	adds	r3, r0, r4
    4504:	33ae      	adds	r3, #174	; 0xae
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	071b      	lsls	r3, r3, #28
    450a:	d400      	bmi.n	450e <USB_Handler+0x1a2>
    450c:	e09a      	b.n	4644 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    450e:	4961      	ldr	r1, [pc, #388]	; (4694 <USB_Handler+0x328>)
    4510:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    4512:	0124      	lsls	r4, r4, #4
    4514:	1904      	adds	r4, r0, r4
    4516:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4518:	4798      	blx	r3
    451a:	e093      	b.n	4644 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    451c:	0142      	lsls	r2, r0, #5
    451e:	4b5e      	ldr	r3, [pc, #376]	; (4698 <USB_Handler+0x32c>)
    4520:	189b      	adds	r3, r3, r2
    4522:	685a      	ldr	r2, [r3, #4]
    4524:	0492      	lsls	r2, r2, #18
    4526:	0c92      	lsrs	r2, r2, #18
    4528:	495a      	ldr	r1, [pc, #360]	; (4694 <USB_Handler+0x328>)
    452a:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    452c:	685a      	ldr	r2, [r3, #4]
    452e:	0112      	lsls	r2, r2, #4
    4530:	0c92      	lsrs	r2, r2, #18
    4532:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4534:	685a      	ldr	r2, [r3, #4]
    4536:	0b92      	lsrs	r2, r2, #14
    4538:	0392      	lsls	r2, r2, #14
    453a:	605a      	str	r2, [r3, #4]
    453c:	e787      	b.n	444e <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    453e:	4955      	ldr	r1, [pc, #340]	; (4694 <USB_Handler+0x328>)
    4540:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    4542:	0162      	lsls	r2, r4, #5
    4544:	4b54      	ldr	r3, [pc, #336]	; (4698 <USB_Handler+0x32c>)
    4546:	189b      	adds	r3, r3, r2
    4548:	89db      	ldrh	r3, [r3, #14]
    454a:	221f      	movs	r2, #31
    454c:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    454e:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    4550:	0123      	lsls	r3, r4, #4
    4552:	18c3      	adds	r3, r0, r3
    4554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4556:	4798      	blx	r3
    4558:	e7a9      	b.n	44ae <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    455a:	494e      	ldr	r1, [pc, #312]	; (4694 <USB_Handler+0x328>)
    455c:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    455e:	0162      	lsls	r2, r4, #5
    4560:	4b4d      	ldr	r3, [pc, #308]	; (4698 <USB_Handler+0x32c>)
    4562:	189b      	adds	r3, r3, r2
    4564:	685b      	ldr	r3, [r3, #4]
    4566:	011b      	lsls	r3, r3, #4
    4568:	0c9b      	lsrs	r3, r3, #18
    456a:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    456c:	0123      	lsls	r3, r4, #4
    456e:	18c3      	adds	r3, r0, r3
    4570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4572:	2100      	movs	r1, #0
    4574:	4798      	blx	r3
    4576:	e7b1      	b.n	44dc <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    4578:	8bac      	ldrh	r4, [r5, #28]
    457a:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    457c:	0763      	lsls	r3, r4, #29
    457e:	d505      	bpl.n	458c <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    4580:	2304      	movs	r3, #4
    4582:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    4584:	33a1      	adds	r3, #161	; 0xa1
    4586:	5cfb      	ldrb	r3, [r7, r3]
    4588:	07db      	lsls	r3, r3, #31
    458a:	d462      	bmi.n	4652 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    458c:	0723      	lsls	r3, r4, #28
    458e:	d50b      	bpl.n	45a8 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    4590:	2200      	movs	r2, #0
    4592:	4b3f      	ldr	r3, [pc, #252]	; (4690 <USB_Handler+0x324>)
    4594:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    4596:	4b3b      	ldr	r3, [pc, #236]	; (4684 <USB_Handler+0x318>)
    4598:	6818      	ldr	r0, [r3, #0]
    459a:	2308      	movs	r3, #8
    459c:	6802      	ldr	r2, [r0, #0]
    459e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    45a0:	339d      	adds	r3, #157	; 0x9d
    45a2:	5cc3      	ldrb	r3, [r0, r3]
    45a4:	079b      	lsls	r3, r3, #30
    45a6:	d458      	bmi.n	465a <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    45a8:	0663      	lsls	r3, r4, #25
    45aa:	d508      	bpl.n	45be <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    45ac:	4b35      	ldr	r3, [pc, #212]	; (4684 <USB_Handler+0x318>)
    45ae:	6818      	ldr	r0, [r3, #0]
    45b0:	2340      	movs	r3, #64	; 0x40
    45b2:	6802      	ldr	r2, [r0, #0]
    45b4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    45b6:	3365      	adds	r3, #101	; 0x65
    45b8:	5cc3      	ldrb	r3, [r0, r3]
    45ba:	06db      	lsls	r3, r3, #27
    45bc:	d450      	bmi.n	4660 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    45be:	06a3      	lsls	r3, r4, #26
    45c0:	d508      	bpl.n	45d4 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    45c2:	4b30      	ldr	r3, [pc, #192]	; (4684 <USB_Handler+0x318>)
    45c4:	6818      	ldr	r0, [r3, #0]
    45c6:	2320      	movs	r3, #32
    45c8:	6802      	ldr	r2, [r0, #0]
    45ca:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    45cc:	3385      	adds	r3, #133	; 0x85
    45ce:	5cc3      	ldrb	r3, [r0, r3]
    45d0:	071b      	lsls	r3, r3, #28
    45d2:	d448      	bmi.n	4666 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    45d4:	06e3      	lsls	r3, r4, #27
    45d6:	d508      	bpl.n	45ea <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    45d8:	4b2a      	ldr	r3, [pc, #168]	; (4684 <USB_Handler+0x318>)
    45da:	6818      	ldr	r0, [r3, #0]
    45dc:	2310      	movs	r3, #16
    45de:	6802      	ldr	r2, [r0, #0]
    45e0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    45e2:	3395      	adds	r3, #149	; 0x95
    45e4:	5cc3      	ldrb	r3, [r0, r3]
    45e6:	075b      	lsls	r3, r3, #29
    45e8:	d440      	bmi.n	466c <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    45ea:	0623      	lsls	r3, r4, #24
    45ec:	d50b      	bpl.n	4606 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    45ee:	2200      	movs	r2, #0
    45f0:	4b27      	ldr	r3, [pc, #156]	; (4690 <USB_Handler+0x324>)
    45f2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    45f4:	4b23      	ldr	r3, [pc, #140]	; (4684 <USB_Handler+0x318>)
    45f6:	6818      	ldr	r0, [r3, #0]
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	6802      	ldr	r2, [r0, #0]
    45fc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    45fe:	3325      	adds	r3, #37	; 0x25
    4600:	5cc3      	ldrb	r3, [r0, r3]
    4602:	069b      	lsls	r3, r3, #26
    4604:	d435      	bmi.n	4672 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    4606:	05e3      	lsls	r3, r4, #23
    4608:	d50c      	bpl.n	4624 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    460a:	2200      	movs	r2, #0
    460c:	4b20      	ldr	r3, [pc, #128]	; (4690 <USB_Handler+0x324>)
    460e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    4610:	4b1c      	ldr	r3, [pc, #112]	; (4684 <USB_Handler+0x318>)
    4612:	6818      	ldr	r0, [r3, #0]
    4614:	2380      	movs	r3, #128	; 0x80
    4616:	005b      	lsls	r3, r3, #1
    4618:	6802      	ldr	r2, [r0, #0]
    461a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    461c:	3b5b      	subs	r3, #91	; 0x5b
    461e:	5cc3      	ldrb	r3, [r0, r3]
    4620:	065b      	lsls	r3, r3, #25
    4622:	d429      	bmi.n	4678 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    4624:	05a3      	lsls	r3, r4, #22
    4626:	d50d      	bpl.n	4644 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    4628:	2200      	movs	r2, #0
    462a:	4b19      	ldr	r3, [pc, #100]	; (4690 <USB_Handler+0x324>)
    462c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    462e:	4b15      	ldr	r3, [pc, #84]	; (4684 <USB_Handler+0x318>)
    4630:	6818      	ldr	r0, [r3, #0]
    4632:	2380      	movs	r3, #128	; 0x80
    4634:	009b      	lsls	r3, r3, #2
    4636:	6802      	ldr	r2, [r0, #0]
    4638:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    463a:	3b5c      	subs	r3, #92	; 0x5c
    463c:	3bff      	subs	r3, #255	; 0xff
    463e:	5cc3      	ldrb	r3, [r0, r3]
    4640:	2b7f      	cmp	r3, #127	; 0x7f
    4642:	d81c      	bhi.n	467e <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4644:	b003      	add	sp, #12
    4646:	bc3c      	pop	{r2, r3, r4, r5}
    4648:	4690      	mov	r8, r2
    464a:	4699      	mov	r9, r3
    464c:	46a2      	mov	sl, r4
    464e:	46ab      	mov	fp, r5
    4650:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    4652:	687b      	ldr	r3, [r7, #4]
    4654:	0038      	movs	r0, r7
    4656:	4798      	blx	r3
    4658:	e798      	b.n	458c <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    465a:	6883      	ldr	r3, [r0, #8]
    465c:	4798      	blx	r3
    465e:	e7a3      	b.n	45a8 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    4660:	6943      	ldr	r3, [r0, #20]
    4662:	4798      	blx	r3
    4664:	e7ab      	b.n	45be <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    4666:	6903      	ldr	r3, [r0, #16]
    4668:	4798      	blx	r3
    466a:	e7b3      	b.n	45d4 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    466c:	68c3      	ldr	r3, [r0, #12]
    466e:	4798      	blx	r3
    4670:	e7bb      	b.n	45ea <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    4672:	6983      	ldr	r3, [r0, #24]
    4674:	4798      	blx	r3
    4676:	e7c6      	b.n	4606 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    4678:	69c3      	ldr	r3, [r0, #28]
    467a:	4798      	blx	r3
    467c:	e7d2      	b.n	4624 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    467e:	6a03      	ldr	r3, [r0, #32]
    4680:	4798      	blx	r3
    4682:	e7df      	b.n	4644 <USB_Handler+0x2d8>
    4684:	200001b8 	.word	0x200001b8
    4688:	000080c0 	.word	0x000080c0
    468c:	000066d1 	.word	0x000066d1
    4690:	200001c8 	.word	0x200001c8
    4694:	200001cc 	.word	0x200001cc
    4698:	20000a00 	.word	0x20000a00
    469c:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    46a0:	0023      	movs	r3, r4
    46a2:	332e      	adds	r3, #46	; 0x2e
    46a4:	009b      	lsls	r3, r3, #2
    46a6:	4642      	mov	r2, r8
    46a8:	6812      	ldr	r2, [r2, #0]
    46aa:	589b      	ldr	r3, [r3, r2]
    46ac:	499e      	ldr	r1, [pc, #632]	; (4928 <USB_Handler+0x5bc>)
    46ae:	4642      	mov	r2, r8
    46b0:	6810      	ldr	r0, [r2, #0]
    46b2:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    46b4:	3401      	adds	r4, #1
    46b6:	2c07      	cmp	r4, #7
    46b8:	d0c4      	beq.n	4644 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    46ba:	0063      	lsls	r3, r4, #1
    46bc:	5bdb      	ldrh	r3, [r3, r7]
    46be:	4233      	tst	r3, r6
    46c0:	d003      	beq.n	46ca <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    46c2:	464a      	mov	r2, r9
    46c4:	6812      	ldr	r2, [r2, #0]
    46c6:	6812      	ldr	r2, [r2, #0]
    46c8:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    46ca:	422b      	tst	r3, r5
    46cc:	d0f2      	beq.n	46b4 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    46ce:	2c06      	cmp	r4, #6
    46d0:	d1e6      	bne.n	46a0 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    46d2:	4b96      	ldr	r3, [pc, #600]	; (492c <USB_Handler+0x5c0>)
    46d4:	891b      	ldrh	r3, [r3, #8]
    46d6:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    46d8:	2280      	movs	r2, #128	; 0x80
    46da:	0052      	lsls	r2, r2, #1
    46dc:	4013      	ands	r3, r2
    46de:	4a92      	ldr	r2, [pc, #584]	; (4928 <USB_Handler+0x5bc>)
    46e0:	6013      	str	r3, [r2, #0]
    46e2:	e7dd      	b.n	46a0 <USB_Handler+0x334>
    46e4:	003c      	movs	r4, r7
    46e6:	3459      	adds	r4, #89	; 0x59
    46e8:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    46ea:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    46ec:	2201      	movs	r2, #1
    46ee:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    46f0:	325f      	adds	r2, #95	; 0x5f
    46f2:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    46f4:	3a50      	subs	r2, #80	; 0x50
    46f6:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    46f8:	3a0d      	subs	r2, #13
    46fa:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    46fc:	46b8      	mov	r8, r7
    46fe:	002f      	movs	r7, r5
    4700:	e0b9      	b.n	4876 <USB_Handler+0x50a>
    4702:	002a      	movs	r2, r5
    4704:	003d      	movs	r5, r7
    4706:	4647      	mov	r7, r8
    4708:	4690      	mov	r8, r2
    470a:	015b      	lsls	r3, r3, #5
    470c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    470e:	2308      	movs	r3, #8
    4710:	33ff      	adds	r3, #255	; 0xff
    4712:	5ceb      	ldrb	r3, [r5, r3]
    4714:	065b      	lsls	r3, r3, #25
    4716:	d516      	bpl.n	4746 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4718:	2240      	movs	r2, #64	; 0x40
    471a:	2308      	movs	r3, #8
    471c:	33ff      	adds	r3, #255	; 0xff
    471e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4720:	3b88      	subs	r3, #136	; 0x88
    4722:	3bff      	subs	r3, #255	; 0xff
    4724:	4642      	mov	r2, r8
    4726:	4313      	orrs	r3, r2
    4728:	4a81      	ldr	r2, [pc, #516]	; (4930 <USB_Handler+0x5c4>)
    472a:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    472c:	2360      	movs	r3, #96	; 0x60
    472e:	420b      	tst	r3, r1
    4730:	d100      	bne.n	4734 <USB_Handler+0x3c8>
    4732:	e787      	b.n	4644 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4734:	9b01      	ldr	r3, [sp, #4]
    4736:	011b      	lsls	r3, r3, #4
    4738:	18fb      	adds	r3, r7, r3
    473a:	33e0      	adds	r3, #224	; 0xe0
    473c:	681b      	ldr	r3, [r3, #0]
    473e:	497c      	ldr	r1, [pc, #496]	; (4930 <USB_Handler+0x5c4>)
    4740:	0038      	movs	r0, r7
    4742:	4798      	blx	r3
    4744:	e77e      	b.n	4644 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4746:	2308      	movs	r3, #8
    4748:	33ff      	adds	r3, #255	; 0xff
    474a:	5ceb      	ldrb	r3, [r5, r3]
    474c:	069b      	lsls	r3, r3, #26
    474e:	d5ed      	bpl.n	472c <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4750:	2220      	movs	r2, #32
    4752:	2308      	movs	r3, #8
    4754:	33ff      	adds	r3, #255	; 0xff
    4756:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4758:	4b75      	ldr	r3, [pc, #468]	; (4930 <USB_Handler+0x5c4>)
    475a:	4642      	mov	r2, r8
    475c:	719a      	strb	r2, [r3, #6]
    475e:	e7e5      	b.n	472c <USB_Handler+0x3c0>
    4760:	003d      	movs	r5, r7
    4762:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4764:	9a01      	ldr	r2, [sp, #4]
    4766:	0013      	movs	r3, r2
    4768:	3308      	adds	r3, #8
    476a:	015b      	lsls	r3, r3, #5
    476c:	18ed      	adds	r5, r5, r3
    476e:	2310      	movs	r3, #16
    4770:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4772:	18bb      	adds	r3, r7, r2
    4774:	3361      	adds	r3, #97	; 0x61
    4776:	33ff      	adds	r3, #255	; 0xff
    4778:	781b      	ldrb	r3, [r3, #0]
    477a:	06db      	lsls	r3, r3, #27
    477c:	d400      	bmi.n	4780 <USB_Handler+0x414>
    477e:	e761      	b.n	4644 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4780:	0010      	movs	r0, r2
    4782:	0152      	lsls	r2, r2, #5
    4784:	4b69      	ldr	r3, [pc, #420]	; (492c <USB_Handler+0x5c0>)
    4786:	189b      	adds	r3, r3, r2
    4788:	685b      	ldr	r3, [r3, #4]
    478a:	049b      	lsls	r3, r3, #18
    478c:	0c9b      	lsrs	r3, r3, #18
    478e:	4968      	ldr	r1, [pc, #416]	; (4930 <USB_Handler+0x5c4>)
    4790:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4792:	0103      	lsls	r3, r0, #4
    4794:	18fb      	adds	r3, r7, r3
    4796:	33dc      	adds	r3, #220	; 0xdc
    4798:	681b      	ldr	r3, [r3, #0]
    479a:	4640      	mov	r0, r8
    479c:	4798      	blx	r3
    479e:	e751      	b.n	4644 <USB_Handler+0x2d8>
    47a0:	002a      	movs	r2, r5
    47a2:	003d      	movs	r5, r7
    47a4:	4647      	mov	r7, r8
    47a6:	4690      	mov	r8, r2
    47a8:	015b      	lsls	r3, r3, #5
    47aa:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    47ac:	2308      	movs	r3, #8
    47ae:	33ff      	adds	r3, #255	; 0xff
    47b0:	5ceb      	ldrb	r3, [r5, r3]
    47b2:	079b      	lsls	r3, r3, #30
    47b4:	d51e      	bpl.n	47f4 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    47b6:	2202      	movs	r2, #2
    47b8:	2308      	movs	r3, #8
    47ba:	33ff      	adds	r3, #255	; 0xff
    47bc:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    47be:	485c      	ldr	r0, [pc, #368]	; (4930 <USB_Handler+0x5c4>)
    47c0:	3b88      	subs	r3, #136	; 0x88
    47c2:	3bff      	subs	r3, #255	; 0xff
    47c4:	4642      	mov	r2, r8
    47c6:	4313      	orrs	r3, r2
    47c8:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    47ca:	9b01      	ldr	r3, [sp, #4]
    47cc:	015a      	lsls	r2, r3, #5
    47ce:	4b57      	ldr	r3, [pc, #348]	; (492c <USB_Handler+0x5c0>)
    47d0:	189b      	adds	r3, r3, r2
    47d2:	3310      	adds	r3, #16
    47d4:	685b      	ldr	r3, [r3, #4]
    47d6:	049b      	lsls	r3, r3, #18
    47d8:	0c9b      	lsrs	r3, r3, #18
    47da:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    47dc:	078b      	lsls	r3, r1, #30
    47de:	d100      	bne.n	47e2 <USB_Handler+0x476>
    47e0:	e730      	b.n	4644 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    47e2:	9b01      	ldr	r3, [sp, #4]
    47e4:	330d      	adds	r3, #13
    47e6:	011b      	lsls	r3, r3, #4
    47e8:	18fb      	adds	r3, r7, r3
    47ea:	685b      	ldr	r3, [r3, #4]
    47ec:	4950      	ldr	r1, [pc, #320]	; (4930 <USB_Handler+0x5c4>)
    47ee:	0038      	movs	r0, r7
    47f0:	4798      	blx	r3
    47f2:	e727      	b.n	4644 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    47f4:	2308      	movs	r3, #8
    47f6:	33ff      	adds	r3, #255	; 0xff
    47f8:	5ceb      	ldrb	r3, [r5, r3]
    47fa:	07db      	lsls	r3, r3, #31
    47fc:	d5ee      	bpl.n	47dc <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    47fe:	2201      	movs	r2, #1
    4800:	2308      	movs	r3, #8
    4802:	33ff      	adds	r3, #255	; 0xff
    4804:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4806:	484a      	ldr	r0, [pc, #296]	; (4930 <USB_Handler+0x5c4>)
    4808:	4643      	mov	r3, r8
    480a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    480c:	9b01      	ldr	r3, [sp, #4]
    480e:	015b      	lsls	r3, r3, #5
    4810:	4a46      	ldr	r2, [pc, #280]	; (492c <USB_Handler+0x5c0>)
    4812:	18d2      	adds	r2, r2, r3
    4814:	6853      	ldr	r3, [r2, #4]
    4816:	049b      	lsls	r3, r3, #18
    4818:	0c9b      	lsrs	r3, r3, #18
    481a:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    481c:	6853      	ldr	r3, [r2, #4]
    481e:	011b      	lsls	r3, r3, #4
    4820:	0c9b      	lsrs	r3, r3, #18
    4822:	8083      	strh	r3, [r0, #4]
    4824:	e7da      	b.n	47dc <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4826:	2208      	movs	r2, #8
    4828:	32ff      	adds	r2, #255	; 0xff
    482a:	5c9a      	ldrb	r2, [r3, r2]
    482c:	0752      	lsls	r2, r2, #29
    482e:	d56e      	bpl.n	490e <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4830:	2004      	movs	r0, #4
    4832:	2208      	movs	r2, #8
    4834:	32ff      	adds	r2, #255	; 0xff
    4836:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4838:	9801      	ldr	r0, [sp, #4]
    483a:	0142      	lsls	r2, r0, #5
    483c:	4b3b      	ldr	r3, [pc, #236]	; (492c <USB_Handler+0x5c0>)
    483e:	189b      	adds	r3, r3, r2
    4840:	7a9b      	ldrb	r3, [r3, #10]
    4842:	079b      	lsls	r3, r3, #30
    4844:	d505      	bpl.n	4852 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4846:	4b39      	ldr	r3, [pc, #228]	; (492c <USB_Handler+0x5c0>)
    4848:	189b      	adds	r3, r3, r2
    484a:	7a9a      	ldrb	r2, [r3, #10]
    484c:	2002      	movs	r0, #2
    484e:	4382      	bics	r2, r0
    4850:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4852:	4b37      	ldr	r3, [pc, #220]	; (4930 <USB_Handler+0x5c4>)
    4854:	4642      	mov	r2, r8
    4856:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4858:	9b01      	ldr	r3, [sp, #4]
    485a:	3308      	adds	r3, #8
    485c:	015b      	lsls	r3, r3, #5
    485e:	683a      	ldr	r2, [r7, #0]
    4860:	4694      	mov	ip, r2
    4862:	4463      	add	r3, ip
    4864:	79db      	ldrb	r3, [r3, #7]
    4866:	07db      	lsls	r3, r3, #31
    4868:	d551      	bpl.n	490e <USB_Handler+0x5a2>
    486a:	e6eb      	b.n	4644 <USB_Handler+0x2d8>
    486c:	3301      	adds	r3, #1
    486e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4870:	2b08      	cmp	r3, #8
    4872:	d100      	bne.n	4876 <USB_Handler+0x50a>
    4874:	e6e6      	b.n	4644 <USB_Handler+0x2d8>
    4876:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    4878:	9301      	str	r3, [sp, #4]
    487a:	0032      	movs	r2, r6
    487c:	411a      	asrs	r2, r3
    487e:	4661      	mov	r1, ip
    4880:	4211      	tst	r1, r2
    4882:	d0f3      	beq.n	486c <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4884:	001a      	movs	r2, r3
    4886:	3208      	adds	r2, #8
    4888:	0152      	lsls	r2, r2, #5
    488a:	18ba      	adds	r2, r7, r2
    488c:	79d2      	ldrb	r2, [r2, #7]
    488e:	b2d2      	uxtb	r2, r2
    4890:	7a21      	ldrb	r1, [r4, #8]
    4892:	4011      	ands	r1, r2
    4894:	7820      	ldrb	r0, [r4, #0]
    4896:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4898:	4648      	mov	r0, r9
    489a:	4210      	tst	r0, r2
    489c:	d000      	beq.n	48a0 <USB_Handler+0x534>
    489e:	e730      	b.n	4702 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    48a0:	4650      	mov	r0, sl
    48a2:	4210      	tst	r0, r2
    48a4:	d000      	beq.n	48a8 <USB_Handler+0x53c>
    48a6:	e75b      	b.n	4760 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    48a8:	4658      	mov	r0, fp
    48aa:	4210      	tst	r0, r2
    48ac:	d000      	beq.n	48b0 <USB_Handler+0x544>
    48ae:	e777      	b.n	47a0 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    48b0:	200c      	movs	r0, #12
    48b2:	4210      	tst	r0, r2
    48b4:	d0da      	beq.n	486c <USB_Handler+0x500>
    48b6:	002a      	movs	r2, r5
    48b8:	003d      	movs	r5, r7
    48ba:	4647      	mov	r7, r8
    48bc:	4690      	mov	r8, r2
    48be:	015b      	lsls	r3, r3, #5
    48c0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    48c2:	2208      	movs	r2, #8
    48c4:	32ff      	adds	r2, #255	; 0xff
    48c6:	5c9a      	ldrb	r2, [r3, r2]
    48c8:	0712      	lsls	r2, r2, #28
    48ca:	d5ac      	bpl.n	4826 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    48cc:	3804      	subs	r0, #4
    48ce:	2208      	movs	r2, #8
    48d0:	32ff      	adds	r2, #255	; 0xff
    48d2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    48d4:	9801      	ldr	r0, [sp, #4]
    48d6:	0142      	lsls	r2, r0, #5
    48d8:	4b14      	ldr	r3, [pc, #80]	; (492c <USB_Handler+0x5c0>)
    48da:	189b      	adds	r3, r3, r2
    48dc:	7e9b      	ldrb	r3, [r3, #26]
    48de:	079b      	lsls	r3, r3, #30
    48e0:	d505      	bpl.n	48ee <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    48e2:	4b12      	ldr	r3, [pc, #72]	; (492c <USB_Handler+0x5c0>)
    48e4:	189b      	adds	r3, r3, r2
    48e6:	7e9a      	ldrb	r2, [r3, #26]
    48e8:	2002      	movs	r0, #2
    48ea:	4382      	bics	r2, r0
    48ec:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    48ee:	2380      	movs	r3, #128	; 0x80
    48f0:	425b      	negs	r3, r3
    48f2:	4642      	mov	r2, r8
    48f4:	4313      	orrs	r3, r2
    48f6:	4a0e      	ldr	r2, [pc, #56]	; (4930 <USB_Handler+0x5c4>)
    48f8:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    48fa:	9b01      	ldr	r3, [sp, #4]
    48fc:	3308      	adds	r3, #8
    48fe:	015b      	lsls	r3, r3, #5
    4900:	683a      	ldr	r2, [r7, #0]
    4902:	4694      	mov	ip, r2
    4904:	4463      	add	r3, ip
    4906:	79db      	ldrb	r3, [r3, #7]
    4908:	079b      	lsls	r3, r3, #30
    490a:	d500      	bpl.n	490e <USB_Handler+0x5a2>
    490c:	e69a      	b.n	4644 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    490e:	230c      	movs	r3, #12
    4910:	420b      	tst	r3, r1
    4912:	d100      	bne.n	4916 <USB_Handler+0x5aa>
    4914:	e696      	b.n	4644 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4916:	9b01      	ldr	r3, [sp, #4]
    4918:	011b      	lsls	r3, r3, #4
    491a:	18fb      	adds	r3, r7, r3
    491c:	33d8      	adds	r3, #216	; 0xd8
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	4903      	ldr	r1, [pc, #12]	; (4930 <USB_Handler+0x5c4>)
    4922:	0038      	movs	r0, r7
    4924:	4798      	blx	r3
    4926:	e68d      	b.n	4644 <USB_Handler+0x2d8>
    4928:	200001bc 	.word	0x200001bc
    492c:	20000a00 	.word	0x20000a00
    4930:	200001c0 	.word	0x200001c0

00004934 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4934:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4936:	2a00      	cmp	r2, #0
    4938:	d001      	beq.n	493e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    493a:	0018      	movs	r0, r3
    493c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    493e:	008b      	lsls	r3, r1, #2
    4940:	4a06      	ldr	r2, [pc, #24]	; (495c <extint_register_callback+0x28>)
    4942:	589b      	ldr	r3, [r3, r2]
    4944:	2b00      	cmp	r3, #0
    4946:	d003      	beq.n	4950 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4948:	4283      	cmp	r3, r0
    494a:	d005      	beq.n	4958 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    494c:	231d      	movs	r3, #29
    494e:	e7f4      	b.n	493a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4950:	0089      	lsls	r1, r1, #2
    4952:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4954:	2300      	movs	r3, #0
    4956:	e7f0      	b.n	493a <extint_register_callback+0x6>
		return STATUS_OK;
    4958:	2300      	movs	r3, #0
    495a:	e7ee      	b.n	493a <extint_register_callback+0x6>
    495c:	2000027c 	.word	0x2000027c

00004960 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4960:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4962:	2900      	cmp	r1, #0
    4964:	d001      	beq.n	496a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4966:	0018      	movs	r0, r3
    4968:	4770      	bx	lr
		return NULL;
    496a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    496c:	281f      	cmp	r0, #31
    496e:	d800      	bhi.n	4972 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4970:	4a02      	ldr	r2, [pc, #8]	; (497c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4972:	2301      	movs	r3, #1
    4974:	4083      	lsls	r3, r0
    4976:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    4978:	2300      	movs	r3, #0
    497a:	e7f4      	b.n	4966 <extint_chan_enable_callback+0x6>
    497c:	40001800 	.word	0x40001800

00004980 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4980:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4982:	2200      	movs	r2, #0
    4984:	4b10      	ldr	r3, [pc, #64]	; (49c8 <EIC_Handler+0x48>)
    4986:	701a      	strb	r2, [r3, #0]
    4988:	2300      	movs	r3, #0
    498a:	4910      	ldr	r1, [pc, #64]	; (49cc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    498c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    498e:	4e10      	ldr	r6, [pc, #64]	; (49d0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4990:	4c0d      	ldr	r4, [pc, #52]	; (49c8 <EIC_Handler+0x48>)
    4992:	e00a      	b.n	49aa <EIC_Handler+0x2a>
		return eics[eic_index];
    4994:	490d      	ldr	r1, [pc, #52]	; (49cc <EIC_Handler+0x4c>)
    4996:	e008      	b.n	49aa <EIC_Handler+0x2a>
    4998:	7823      	ldrb	r3, [r4, #0]
    499a:	3301      	adds	r3, #1
    499c:	b2db      	uxtb	r3, r3
    499e:	7023      	strb	r3, [r4, #0]
    49a0:	2b0f      	cmp	r3, #15
    49a2:	d810      	bhi.n	49c6 <EIC_Handler+0x46>
		return NULL;
    49a4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    49a6:	2b1f      	cmp	r3, #31
    49a8:	d9f4      	bls.n	4994 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    49aa:	0028      	movs	r0, r5
    49ac:	4018      	ands	r0, r3
    49ae:	2201      	movs	r2, #1
    49b0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    49b2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    49b4:	4210      	tst	r0, r2
    49b6:	d0ef      	beq.n	4998 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    49b8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    49ba:	009b      	lsls	r3, r3, #2
    49bc:	599b      	ldr	r3, [r3, r6]
    49be:	2b00      	cmp	r3, #0
    49c0:	d0ea      	beq.n	4998 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    49c2:	4798      	blx	r3
    49c4:	e7e8      	b.n	4998 <EIC_Handler+0x18>
			}
		}
	}
}
    49c6:	bd70      	pop	{r4, r5, r6, pc}
    49c8:	20000b00 	.word	0x20000b00
    49cc:	40001800 	.word	0x40001800
    49d0:	2000027c 	.word	0x2000027c

000049d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    49d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49d6:	46de      	mov	lr, fp
    49d8:	4657      	mov	r7, sl
    49da:	464e      	mov	r6, r9
    49dc:	4645      	mov	r5, r8
    49de:	b5e0      	push	{r5, r6, r7, lr}
    49e0:	b087      	sub	sp, #28
    49e2:	4680      	mov	r8, r0
    49e4:	9104      	str	r1, [sp, #16]
    49e6:	0016      	movs	r6, r2
    49e8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    49ea:	2200      	movs	r2, #0
    49ec:	2300      	movs	r3, #0
    49ee:	2100      	movs	r1, #0
    49f0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    49f2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    49f4:	2001      	movs	r0, #1
    49f6:	0021      	movs	r1, r4
    49f8:	9600      	str	r6, [sp, #0]
    49fa:	9701      	str	r7, [sp, #4]
    49fc:	465c      	mov	r4, fp
    49fe:	9403      	str	r4, [sp, #12]
    4a00:	4644      	mov	r4, r8
    4a02:	9405      	str	r4, [sp, #20]
    4a04:	e013      	b.n	4a2e <long_division+0x5a>
    4a06:	2420      	movs	r4, #32
    4a08:	1a64      	subs	r4, r4, r1
    4a0a:	0005      	movs	r5, r0
    4a0c:	40e5      	lsrs	r5, r4
    4a0e:	46a8      	mov	r8, r5
    4a10:	e014      	b.n	4a3c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4a12:	9c00      	ldr	r4, [sp, #0]
    4a14:	9d01      	ldr	r5, [sp, #4]
    4a16:	1b12      	subs	r2, r2, r4
    4a18:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    4a1a:	465c      	mov	r4, fp
    4a1c:	464d      	mov	r5, r9
    4a1e:	432c      	orrs	r4, r5
    4a20:	46a3      	mov	fp, r4
    4a22:	9c03      	ldr	r4, [sp, #12]
    4a24:	4645      	mov	r5, r8
    4a26:	432c      	orrs	r4, r5
    4a28:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    4a2a:	3901      	subs	r1, #1
    4a2c:	d325      	bcc.n	4a7a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4a2e:	2420      	movs	r4, #32
    4a30:	4264      	negs	r4, r4
    4a32:	190c      	adds	r4, r1, r4
    4a34:	d4e7      	bmi.n	4a06 <long_division+0x32>
    4a36:	0005      	movs	r5, r0
    4a38:	40a5      	lsls	r5, r4
    4a3a:	46a8      	mov	r8, r5
    4a3c:	0004      	movs	r4, r0
    4a3e:	408c      	lsls	r4, r1
    4a40:	46a1      	mov	r9, r4
		r = r << 1;
    4a42:	1892      	adds	r2, r2, r2
    4a44:	415b      	adcs	r3, r3
    4a46:	0014      	movs	r4, r2
    4a48:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4a4a:	9e05      	ldr	r6, [sp, #20]
    4a4c:	464f      	mov	r7, r9
    4a4e:	403e      	ands	r6, r7
    4a50:	46b4      	mov	ip, r6
    4a52:	9e04      	ldr	r6, [sp, #16]
    4a54:	4647      	mov	r7, r8
    4a56:	403e      	ands	r6, r7
    4a58:	46b2      	mov	sl, r6
    4a5a:	4666      	mov	r6, ip
    4a5c:	4657      	mov	r7, sl
    4a5e:	433e      	orrs	r6, r7
    4a60:	d003      	beq.n	4a6a <long_division+0x96>
			r |= 0x01;
    4a62:	0006      	movs	r6, r0
    4a64:	4326      	orrs	r6, r4
    4a66:	0032      	movs	r2, r6
    4a68:	002b      	movs	r3, r5
		if (r >= d) {
    4a6a:	9c00      	ldr	r4, [sp, #0]
    4a6c:	9d01      	ldr	r5, [sp, #4]
    4a6e:	429d      	cmp	r5, r3
    4a70:	d8db      	bhi.n	4a2a <long_division+0x56>
    4a72:	d1ce      	bne.n	4a12 <long_division+0x3e>
    4a74:	4294      	cmp	r4, r2
    4a76:	d8d8      	bhi.n	4a2a <long_division+0x56>
    4a78:	e7cb      	b.n	4a12 <long_division+0x3e>
    4a7a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4a7c:	4658      	mov	r0, fp
    4a7e:	0019      	movs	r1, r3
    4a80:	b007      	add	sp, #28
    4a82:	bc3c      	pop	{r2, r3, r4, r5}
    4a84:	4690      	mov	r8, r2
    4a86:	4699      	mov	r9, r3
    4a88:	46a2      	mov	sl, r4
    4a8a:	46ab      	mov	fp, r5
    4a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a8e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4a8e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4a90:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a92:	2340      	movs	r3, #64	; 0x40
    4a94:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    4a96:	4281      	cmp	r1, r0
    4a98:	d202      	bcs.n	4aa0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4a9a:	0018      	movs	r0, r3
    4a9c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4a9e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4aa0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4aa2:	1c63      	adds	r3, r4, #1
    4aa4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    4aa6:	4288      	cmp	r0, r1
    4aa8:	d9f9      	bls.n	4a9e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4aaa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4aac:	2cff      	cmp	r4, #255	; 0xff
    4aae:	d8f4      	bhi.n	4a9a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4ab0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4ab2:	2300      	movs	r3, #0
    4ab4:	e7f1      	b.n	4a9a <_sercom_get_sync_baud_val+0xc>
	...

00004ab8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aba:	b083      	sub	sp, #12
    4abc:	000f      	movs	r7, r1
    4abe:	0016      	movs	r6, r2
    4ac0:	aa08      	add	r2, sp, #32
    4ac2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4ac4:	0004      	movs	r4, r0
    4ac6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4ac8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4aca:	42bc      	cmp	r4, r7
    4acc:	d902      	bls.n	4ad4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4ace:	0010      	movs	r0, r2
    4ad0:	b003      	add	sp, #12
    4ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	d114      	bne.n	4b02 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4ad8:	0002      	movs	r2, r0
    4ada:	0008      	movs	r0, r1
    4adc:	2100      	movs	r1, #0
    4ade:	4c19      	ldr	r4, [pc, #100]	; (4b44 <_sercom_get_async_baud_val+0x8c>)
    4ae0:	47a0      	blx	r4
    4ae2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4ae4:	003a      	movs	r2, r7
    4ae6:	2300      	movs	r3, #0
    4ae8:	2000      	movs	r0, #0
    4aea:	4c17      	ldr	r4, [pc, #92]	; (4b48 <_sercom_get_async_baud_val+0x90>)
    4aec:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4aee:	2200      	movs	r2, #0
    4af0:	2301      	movs	r3, #1
    4af2:	1a12      	subs	r2, r2, r0
    4af4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    4af6:	0c12      	lsrs	r2, r2, #16
    4af8:	041b      	lsls	r3, r3, #16
    4afa:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4afc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4afe:	2200      	movs	r2, #0
    4b00:	e7e5      	b.n	4ace <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4b02:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4b04:	2b01      	cmp	r3, #1
    4b06:	d1f9      	bne.n	4afc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    4b08:	000a      	movs	r2, r1
    4b0a:	2300      	movs	r3, #0
    4b0c:	2100      	movs	r1, #0
    4b0e:	4c0d      	ldr	r4, [pc, #52]	; (4b44 <_sercom_get_async_baud_val+0x8c>)
    4b10:	47a0      	blx	r4
    4b12:	0002      	movs	r2, r0
    4b14:	000b      	movs	r3, r1
    4b16:	9200      	str	r2, [sp, #0]
    4b18:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4b1a:	0038      	movs	r0, r7
    4b1c:	2100      	movs	r1, #0
    4b1e:	4c0a      	ldr	r4, [pc, #40]	; (4b48 <_sercom_get_async_baud_val+0x90>)
    4b20:	47a0      	blx	r4
    4b22:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4b24:	2380      	movs	r3, #128	; 0x80
    4b26:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4b28:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    4b2a:	4298      	cmp	r0, r3
    4b2c:	d8cf      	bhi.n	4ace <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4b2e:	0f79      	lsrs	r1, r7, #29
    4b30:	00f8      	lsls	r0, r7, #3
    4b32:	9a00      	ldr	r2, [sp, #0]
    4b34:	9b01      	ldr	r3, [sp, #4]
    4b36:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    4b38:	00ea      	lsls	r2, r5, #3
    4b3a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4b3c:	b2d2      	uxtb	r2, r2
    4b3e:	0352      	lsls	r2, r2, #13
    4b40:	432a      	orrs	r2, r5
    4b42:	e7db      	b.n	4afc <_sercom_get_async_baud_val+0x44>
    4b44:	00006751 	.word	0x00006751
    4b48:	000049d5 	.word	0x000049d5

00004b4c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4b4c:	b510      	push	{r4, lr}
    4b4e:	b082      	sub	sp, #8
    4b50:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4b52:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <sercom_set_gclk_generator+0x40>)
    4b54:	781b      	ldrb	r3, [r3, #0]
    4b56:	2b00      	cmp	r3, #0
    4b58:	d007      	beq.n	4b6a <sercom_set_gclk_generator+0x1e>
    4b5a:	2900      	cmp	r1, #0
    4b5c:	d105      	bne.n	4b6a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4b5e:	4b0b      	ldr	r3, [pc, #44]	; (4b8c <sercom_set_gclk_generator+0x40>)
    4b60:	785b      	ldrb	r3, [r3, #1]
    4b62:	4283      	cmp	r3, r0
    4b64:	d010      	beq.n	4b88 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4b66:	201d      	movs	r0, #29
    4b68:	e00c      	b.n	4b84 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4b6a:	a901      	add	r1, sp, #4
    4b6c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4b6e:	2013      	movs	r0, #19
    4b70:	4b07      	ldr	r3, [pc, #28]	; (4b90 <sercom_set_gclk_generator+0x44>)
    4b72:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4b74:	2013      	movs	r0, #19
    4b76:	4b07      	ldr	r3, [pc, #28]	; (4b94 <sercom_set_gclk_generator+0x48>)
    4b78:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4b7a:	4b04      	ldr	r3, [pc, #16]	; (4b8c <sercom_set_gclk_generator+0x40>)
    4b7c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4b7e:	2201      	movs	r2, #1
    4b80:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4b82:	2000      	movs	r0, #0
}
    4b84:	b002      	add	sp, #8
    4b86:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4b88:	2000      	movs	r0, #0
    4b8a:	e7fb      	b.n	4b84 <sercom_set_gclk_generator+0x38>
    4b8c:	200001d4 	.word	0x200001d4
    4b90:	0000612d 	.word	0x0000612d
    4b94:	000060a1 	.word	0x000060a1

00004b98 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4b98:	4b40      	ldr	r3, [pc, #256]	; (4c9c <_sercom_get_default_pad+0x104>)
    4b9a:	4298      	cmp	r0, r3
    4b9c:	d031      	beq.n	4c02 <_sercom_get_default_pad+0x6a>
    4b9e:	d90a      	bls.n	4bb6 <_sercom_get_default_pad+0x1e>
    4ba0:	4b3f      	ldr	r3, [pc, #252]	; (4ca0 <_sercom_get_default_pad+0x108>)
    4ba2:	4298      	cmp	r0, r3
    4ba4:	d04d      	beq.n	4c42 <_sercom_get_default_pad+0xaa>
    4ba6:	4b3f      	ldr	r3, [pc, #252]	; (4ca4 <_sercom_get_default_pad+0x10c>)
    4ba8:	4298      	cmp	r0, r3
    4baa:	d05a      	beq.n	4c62 <_sercom_get_default_pad+0xca>
    4bac:	4b3e      	ldr	r3, [pc, #248]	; (4ca8 <_sercom_get_default_pad+0x110>)
    4bae:	4298      	cmp	r0, r3
    4bb0:	d037      	beq.n	4c22 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4bb2:	2000      	movs	r0, #0
}
    4bb4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4bb6:	4b3d      	ldr	r3, [pc, #244]	; (4cac <_sercom_get_default_pad+0x114>)
    4bb8:	4298      	cmp	r0, r3
    4bba:	d00c      	beq.n	4bd6 <_sercom_get_default_pad+0x3e>
    4bbc:	4b3c      	ldr	r3, [pc, #240]	; (4cb0 <_sercom_get_default_pad+0x118>)
    4bbe:	4298      	cmp	r0, r3
    4bc0:	d1f7      	bne.n	4bb2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4bc2:	2901      	cmp	r1, #1
    4bc4:	d017      	beq.n	4bf6 <_sercom_get_default_pad+0x5e>
    4bc6:	2900      	cmp	r1, #0
    4bc8:	d05d      	beq.n	4c86 <_sercom_get_default_pad+0xee>
    4bca:	2902      	cmp	r1, #2
    4bcc:	d015      	beq.n	4bfa <_sercom_get_default_pad+0x62>
    4bce:	2903      	cmp	r1, #3
    4bd0:	d015      	beq.n	4bfe <_sercom_get_default_pad+0x66>
	return 0;
    4bd2:	2000      	movs	r0, #0
    4bd4:	e7ee      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4bd6:	2901      	cmp	r1, #1
    4bd8:	d007      	beq.n	4bea <_sercom_get_default_pad+0x52>
    4bda:	2900      	cmp	r1, #0
    4bdc:	d051      	beq.n	4c82 <_sercom_get_default_pad+0xea>
    4bde:	2902      	cmp	r1, #2
    4be0:	d005      	beq.n	4bee <_sercom_get_default_pad+0x56>
    4be2:	2903      	cmp	r1, #3
    4be4:	d005      	beq.n	4bf2 <_sercom_get_default_pad+0x5a>
	return 0;
    4be6:	2000      	movs	r0, #0
    4be8:	e7e4      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4bea:	4832      	ldr	r0, [pc, #200]	; (4cb4 <_sercom_get_default_pad+0x11c>)
    4bec:	e7e2      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4bee:	4832      	ldr	r0, [pc, #200]	; (4cb8 <_sercom_get_default_pad+0x120>)
    4bf0:	e7e0      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4bf2:	4832      	ldr	r0, [pc, #200]	; (4cbc <_sercom_get_default_pad+0x124>)
    4bf4:	e7de      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4bf6:	4832      	ldr	r0, [pc, #200]	; (4cc0 <_sercom_get_default_pad+0x128>)
    4bf8:	e7dc      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4bfa:	4832      	ldr	r0, [pc, #200]	; (4cc4 <_sercom_get_default_pad+0x12c>)
    4bfc:	e7da      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4bfe:	4832      	ldr	r0, [pc, #200]	; (4cc8 <_sercom_get_default_pad+0x130>)
    4c00:	e7d8      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c02:	2901      	cmp	r1, #1
    4c04:	d007      	beq.n	4c16 <_sercom_get_default_pad+0x7e>
    4c06:	2900      	cmp	r1, #0
    4c08:	d03f      	beq.n	4c8a <_sercom_get_default_pad+0xf2>
    4c0a:	2902      	cmp	r1, #2
    4c0c:	d005      	beq.n	4c1a <_sercom_get_default_pad+0x82>
    4c0e:	2903      	cmp	r1, #3
    4c10:	d005      	beq.n	4c1e <_sercom_get_default_pad+0x86>
	return 0;
    4c12:	2000      	movs	r0, #0
    4c14:	e7ce      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c16:	482d      	ldr	r0, [pc, #180]	; (4ccc <_sercom_get_default_pad+0x134>)
    4c18:	e7cc      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c1a:	482d      	ldr	r0, [pc, #180]	; (4cd0 <_sercom_get_default_pad+0x138>)
    4c1c:	e7ca      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c1e:	482d      	ldr	r0, [pc, #180]	; (4cd4 <_sercom_get_default_pad+0x13c>)
    4c20:	e7c8      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c22:	2901      	cmp	r1, #1
    4c24:	d007      	beq.n	4c36 <_sercom_get_default_pad+0x9e>
    4c26:	2900      	cmp	r1, #0
    4c28:	d031      	beq.n	4c8e <_sercom_get_default_pad+0xf6>
    4c2a:	2902      	cmp	r1, #2
    4c2c:	d005      	beq.n	4c3a <_sercom_get_default_pad+0xa2>
    4c2e:	2903      	cmp	r1, #3
    4c30:	d005      	beq.n	4c3e <_sercom_get_default_pad+0xa6>
	return 0;
    4c32:	2000      	movs	r0, #0
    4c34:	e7be      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c36:	4828      	ldr	r0, [pc, #160]	; (4cd8 <_sercom_get_default_pad+0x140>)
    4c38:	e7bc      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c3a:	4828      	ldr	r0, [pc, #160]	; (4cdc <_sercom_get_default_pad+0x144>)
    4c3c:	e7ba      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c3e:	4828      	ldr	r0, [pc, #160]	; (4ce0 <_sercom_get_default_pad+0x148>)
    4c40:	e7b8      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c42:	2901      	cmp	r1, #1
    4c44:	d007      	beq.n	4c56 <_sercom_get_default_pad+0xbe>
    4c46:	2900      	cmp	r1, #0
    4c48:	d023      	beq.n	4c92 <_sercom_get_default_pad+0xfa>
    4c4a:	2902      	cmp	r1, #2
    4c4c:	d005      	beq.n	4c5a <_sercom_get_default_pad+0xc2>
    4c4e:	2903      	cmp	r1, #3
    4c50:	d005      	beq.n	4c5e <_sercom_get_default_pad+0xc6>
	return 0;
    4c52:	2000      	movs	r0, #0
    4c54:	e7ae      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c56:	4823      	ldr	r0, [pc, #140]	; (4ce4 <_sercom_get_default_pad+0x14c>)
    4c58:	e7ac      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c5a:	4823      	ldr	r0, [pc, #140]	; (4ce8 <_sercom_get_default_pad+0x150>)
    4c5c:	e7aa      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c5e:	4823      	ldr	r0, [pc, #140]	; (4cec <_sercom_get_default_pad+0x154>)
    4c60:	e7a8      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c62:	2901      	cmp	r1, #1
    4c64:	d007      	beq.n	4c76 <_sercom_get_default_pad+0xde>
    4c66:	2900      	cmp	r1, #0
    4c68:	d015      	beq.n	4c96 <_sercom_get_default_pad+0xfe>
    4c6a:	2902      	cmp	r1, #2
    4c6c:	d005      	beq.n	4c7a <_sercom_get_default_pad+0xe2>
    4c6e:	2903      	cmp	r1, #3
    4c70:	d005      	beq.n	4c7e <_sercom_get_default_pad+0xe6>
	return 0;
    4c72:	2000      	movs	r0, #0
    4c74:	e79e      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4c76:	481e      	ldr	r0, [pc, #120]	; (4cf0 <_sercom_get_default_pad+0x158>)
    4c78:	e79c      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c7a:	481e      	ldr	r0, [pc, #120]	; (4cf4 <_sercom_get_default_pad+0x15c>)
    4c7c:	e79a      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c7e:	481e      	ldr	r0, [pc, #120]	; (4cf8 <_sercom_get_default_pad+0x160>)
    4c80:	e798      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c82:	481e      	ldr	r0, [pc, #120]	; (4cfc <_sercom_get_default_pad+0x164>)
    4c84:	e796      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c86:	2003      	movs	r0, #3
    4c88:	e794      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c8a:	481d      	ldr	r0, [pc, #116]	; (4d00 <_sercom_get_default_pad+0x168>)
    4c8c:	e792      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c8e:	481d      	ldr	r0, [pc, #116]	; (4d04 <_sercom_get_default_pad+0x16c>)
    4c90:	e790      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c92:	481d      	ldr	r0, [pc, #116]	; (4d08 <_sercom_get_default_pad+0x170>)
    4c94:	e78e      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c96:	481d      	ldr	r0, [pc, #116]	; (4d0c <_sercom_get_default_pad+0x174>)
    4c98:	e78c      	b.n	4bb4 <_sercom_get_default_pad+0x1c>
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	42001000 	.word	0x42001000
    4ca0:	42001800 	.word	0x42001800
    4ca4:	42001c00 	.word	0x42001c00
    4ca8:	42001400 	.word	0x42001400
    4cac:	42000800 	.word	0x42000800
    4cb0:	42000c00 	.word	0x42000c00
    4cb4:	00050003 	.word	0x00050003
    4cb8:	00060003 	.word	0x00060003
    4cbc:	00070003 	.word	0x00070003
    4cc0:	00010003 	.word	0x00010003
    4cc4:	001e0003 	.word	0x001e0003
    4cc8:	001f0003 	.word	0x001f0003
    4ccc:	00090003 	.word	0x00090003
    4cd0:	000a0003 	.word	0x000a0003
    4cd4:	000b0003 	.word	0x000b0003
    4cd8:	00110003 	.word	0x00110003
    4cdc:	00120003 	.word	0x00120003
    4ce0:	00130003 	.word	0x00130003
    4ce4:	000d0003 	.word	0x000d0003
    4ce8:	000e0003 	.word	0x000e0003
    4cec:	000f0003 	.word	0x000f0003
    4cf0:	00170003 	.word	0x00170003
    4cf4:	00180003 	.word	0x00180003
    4cf8:	00190003 	.word	0x00190003
    4cfc:	00040003 	.word	0x00040003
    4d00:	00080003 	.word	0x00080003
    4d04:	00100003 	.word	0x00100003
    4d08:	000c0003 	.word	0x000c0003
    4d0c:	00160003 	.word	0x00160003

00004d10 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4d10:	b530      	push	{r4, r5, lr}
    4d12:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4d14:	4b0b      	ldr	r3, [pc, #44]	; (4d44 <_sercom_get_sercom_inst_index+0x34>)
    4d16:	466a      	mov	r2, sp
    4d18:	cb32      	ldmia	r3!, {r1, r4, r5}
    4d1a:	c232      	stmia	r2!, {r1, r4, r5}
    4d1c:	cb32      	ldmia	r3!, {r1, r4, r5}
    4d1e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4d20:	9b00      	ldr	r3, [sp, #0]
    4d22:	4283      	cmp	r3, r0
    4d24:	d00b      	beq.n	4d3e <_sercom_get_sercom_inst_index+0x2e>
    4d26:	2301      	movs	r3, #1
    4d28:	009a      	lsls	r2, r3, #2
    4d2a:	4669      	mov	r1, sp
    4d2c:	5852      	ldr	r2, [r2, r1]
    4d2e:	4282      	cmp	r2, r0
    4d30:	d006      	beq.n	4d40 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d32:	3301      	adds	r3, #1
    4d34:	2b06      	cmp	r3, #6
    4d36:	d1f7      	bne.n	4d28 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4d38:	2000      	movs	r0, #0
}
    4d3a:	b007      	add	sp, #28
    4d3c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d3e:	2300      	movs	r3, #0
			return i;
    4d40:	b2d8      	uxtb	r0, r3
    4d42:	e7fa      	b.n	4d3a <_sercom_get_sercom_inst_index+0x2a>
    4d44:	000080d0 	.word	0x000080d0

00004d48 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4d48:	b570      	push	{r4, r5, r6, lr}
    4d4a:	b082      	sub	sp, #8
    4d4c:	0006      	movs	r6, r0
    4d4e:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4d50:	2200      	movs	r2, #0
    4d52:	466b      	mov	r3, sp
    4d54:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4d56:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    4d58:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d1fc      	bne.n	4d58 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4d5e:	338f      	adds	r3, #143	; 0x8f
    4d60:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4d62:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4d64:	6823      	ldr	r3, [r4, #0]
    4d66:	2202      	movs	r2, #2
    4d68:	4393      	bics	r3, r2
    4d6a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d6c:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4d6e:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4d70:	2b00      	cmp	r3, #0
    4d72:	d1fc      	bne.n	4d6e <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d74:	4b12      	ldr	r3, [pc, #72]	; (4dc0 <spi_set_baudrate+0x78>)
    4d76:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d78:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4d7a:	b2c0      	uxtb	r0, r0
    4d7c:	4b11      	ldr	r3, [pc, #68]	; (4dc4 <spi_set_baudrate+0x7c>)
    4d7e:	4798      	blx	r3
    4d80:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4d82:	466b      	mov	r3, sp
    4d84:	1d9a      	adds	r2, r3, #6
    4d86:	0028      	movs	r0, r5
    4d88:	4b0f      	ldr	r3, [pc, #60]	; (4dc8 <spi_set_baudrate+0x80>)
    4d8a:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4d8c:	2800      	cmp	r0, #0
    4d8e:	d002      	beq.n	4d96 <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4d90:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4d92:	b002      	add	sp, #8
    4d94:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4d96:	466b      	mov	r3, sp
    4d98:	3306      	adds	r3, #6
    4d9a:	781b      	ldrb	r3, [r3, #0]
    4d9c:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d9e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4da0:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4da2:	2a00      	cmp	r2, #0
    4da4:	d1fc      	bne.n	4da0 <spi_set_baudrate+0x58>
    4da6:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    4da8:	2a00      	cmp	r2, #0
    4daa:	d1fc      	bne.n	4da6 <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4dac:	681a      	ldr	r2, [r3, #0]
    4dae:	2102      	movs	r1, #2
    4db0:	430a      	orrs	r2, r1
    4db2:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4db4:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    4db6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4db8:	2b00      	cmp	r3, #0
    4dba:	d1fc      	bne.n	4db6 <spi_set_baudrate+0x6e>
    4dbc:	e7e9      	b.n	4d92 <spi_set_baudrate+0x4a>
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	00004d11 	.word	0x00004d11
    4dc4:	00006149 	.word	0x00006149
    4dc8:	00004a8f 	.word	0x00004a8f

00004dcc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dce:	46d6      	mov	lr, sl
    4dd0:	464f      	mov	r7, r9
    4dd2:	b580      	push	{r7, lr}
    4dd4:	b08b      	sub	sp, #44	; 0x2c
    4dd6:	4681      	mov	r9, r0
    4dd8:	000f      	movs	r7, r1
    4dda:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4ddc:	0003      	movs	r3, r0
    4dde:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4de0:	680b      	ldr	r3, [r1, #0]
    4de2:	079b      	lsls	r3, r3, #30
    4de4:	d409      	bmi.n	4dfa <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4de6:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4de8:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4dea:	07db      	lsls	r3, r3, #31
    4dec:	d400      	bmi.n	4df0 <spi_init+0x24>
    4dee:	e0b1      	b.n	4f54 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4df0:	b00b      	add	sp, #44	; 0x2c
    4df2:	bc0c      	pop	{r2, r3}
    4df4:	4691      	mov	r9, r2
    4df6:	469a      	mov	sl, r3
    4df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    4dfa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4dfc:	9305      	str	r3, [sp, #20]
    4dfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4e00:	9306      	str	r3, [sp, #24]
    4e02:	6b13      	ldr	r3, [r2, #48]	; 0x30
    4e04:	9307      	str	r3, [sp, #28]
    4e06:	6b53      	ldr	r3, [r2, #52]	; 0x34
    4e08:	9308      	str	r3, [sp, #32]
    4e0a:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4e0c:	ab05      	add	r3, sp, #20
    4e0e:	9301      	str	r3, [sp, #4]
    4e10:	e00a      	b.n	4e28 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4e12:	0038      	movs	r0, r7
    4e14:	4baf      	ldr	r3, [pc, #700]	; (50d4 <spi_init+0x308>)
    4e16:	4798      	blx	r3
    4e18:	e00c      	b.n	4e34 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    4e1a:	230f      	movs	r3, #15
    4e1c:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    4e1e:	4281      	cmp	r1, r0
    4e20:	d12d      	bne.n	4e7e <spi_init+0xb2>
    4e22:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4e24:	2e04      	cmp	r6, #4
    4e26:	d02f      	beq.n	4e88 <spi_init+0xbc>
    4e28:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4e2a:	00b3      	lsls	r3, r6, #2
    4e2c:	9a01      	ldr	r2, [sp, #4]
    4e2e:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    4e30:	2800      	cmp	r0, #0
    4e32:	d0ee      	beq.n	4e12 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    4e34:	1c43      	adds	r3, r0, #1
    4e36:	d0f4      	beq.n	4e22 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    4e38:	0401      	lsls	r1, r0, #16
    4e3a:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4e3c:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    4e3e:	b2c3      	uxtb	r3, r0
    4e40:	469c      	mov	ip, r3
		return NULL;
    4e42:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4e44:	0602      	lsls	r2, r0, #24
    4e46:	d405      	bmi.n	4e54 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    4e48:	4663      	mov	r3, ip
    4e4a:	095b      	lsrs	r3, r3, #5
    4e4c:	01db      	lsls	r3, r3, #7
    4e4e:	4aa2      	ldr	r2, [pc, #648]	; (50d8 <spi_init+0x30c>)
    4e50:	4692      	mov	sl, r2
    4e52:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    4e54:	221f      	movs	r2, #31
    4e56:	4660      	mov	r0, ip
    4e58:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    4e5a:	1898      	adds	r0, r3, r2
    4e5c:	3040      	adds	r0, #64	; 0x40
    4e5e:	7800      	ldrb	r0, [r0, #0]
    4e60:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    4e62:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    4e64:	4655      	mov	r5, sl
    4e66:	07ed      	lsls	r5, r5, #31
    4e68:	d5d9      	bpl.n	4e1e <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    4e6a:	0852      	lsrs	r2, r2, #1
    4e6c:	189b      	adds	r3, r3, r2
    4e6e:	3330      	adds	r3, #48	; 0x30
    4e70:	7818      	ldrb	r0, [r3, #0]
    4e72:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    4e74:	4663      	mov	r3, ip
    4e76:	07db      	lsls	r3, r3, #31
    4e78:	d5cf      	bpl.n	4e1a <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    4e7a:	0900      	lsrs	r0, r0, #4
    4e7c:	e7cf      	b.n	4e1e <spi_init+0x52>
			module->hw = NULL;
    4e7e:	2300      	movs	r3, #0
    4e80:	464a      	mov	r2, r9
    4e82:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    4e84:	201c      	movs	r0, #28
    4e86:	e7b3      	b.n	4df0 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    4e88:	2013      	movs	r0, #19
    4e8a:	4b94      	ldr	r3, [pc, #592]	; (50dc <spi_init+0x310>)
    4e8c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4e8e:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    4e90:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    4e92:	2a01      	cmp	r2, #1
    4e94:	d016      	beq.n	4ec4 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    4e96:	7821      	ldrb	r1, [r4, #0]
    4e98:	2900      	cmp	r1, #0
    4e9a:	d127      	bne.n	4eec <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    4e9c:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4e9e:	7fe2      	ldrb	r2, [r4, #31]
    4ea0:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4ea2:	7fa0      	ldrb	r0, [r4, #30]
    4ea4:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    4ea6:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    4ea8:	429a      	cmp	r2, r3
    4eaa:	d1a1      	bne.n	4df0 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    4eac:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    4eae:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    4eb0:	3004      	adds	r0, #4
    4eb2:	5c20      	ldrb	r0, [r4, r0]
    4eb4:	2800      	cmp	r0, #0
    4eb6:	d001      	beq.n	4ebc <spi_init+0xf0>
    4eb8:	2040      	movs	r0, #64	; 0x40
    4eba:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    4ebc:	2008      	movs	r0, #8
    4ebe:	4303      	orrs	r3, r0
    4ec0:	431d      	orrs	r5, r3
    4ec2:	e014      	b.n	4eee <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    4ec4:	aa04      	add	r2, sp, #16
    4ec6:	0001      	movs	r1, r0
    4ec8:	69a0      	ldr	r0, [r4, #24]
    4eca:	4b85      	ldr	r3, [pc, #532]	; (50e0 <spi_init+0x314>)
    4ecc:	4798      	blx	r3
    4ece:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4ed0:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d000      	beq.n	4ed8 <spi_init+0x10c>
    4ed6:	e78b      	b.n	4df0 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4ed8:	7b3b      	ldrb	r3, [r7, #12]
    4eda:	b2db      	uxtb	r3, r3
    4edc:	aa04      	add	r2, sp, #16
    4ede:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    4ee0:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4ee2:	429a      	cmp	r2, r3
    4ee4:	d000      	beq.n	4ee8 <spi_init+0x11c>
    4ee6:	e783      	b.n	4df0 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    4ee8:	350c      	adds	r5, #12
    4eea:	e7d4      	b.n	4e96 <spi_init+0xca>
	uint32_t ctrlb = 0;
    4eec:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    4eee:	6863      	ldr	r3, [r4, #4]
    4ef0:	68a0      	ldr	r0, [r4, #8]
    4ef2:	4303      	orrs	r3, r0
    4ef4:	68e0      	ldr	r0, [r4, #12]
    4ef6:	4303      	orrs	r3, r0
    4ef8:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    4efa:	7c20      	ldrb	r0, [r4, #16]
    4efc:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    4efe:	7c60      	ldrb	r0, [r4, #17]
    4f00:	2800      	cmp	r0, #0
    4f02:	d001      	beq.n	4f08 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4f04:	2080      	movs	r0, #128	; 0x80
    4f06:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    4f08:	7ca0      	ldrb	r0, [r4, #18]
    4f0a:	2800      	cmp	r0, #0
    4f0c:	d002      	beq.n	4f14 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4f0e:	2080      	movs	r0, #128	; 0x80
    4f10:	0280      	lsls	r0, r0, #10
    4f12:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    4f14:	7ce0      	ldrb	r0, [r4, #19]
    4f16:	2800      	cmp	r0, #0
    4f18:	d002      	beq.n	4f20 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4f1a:	2080      	movs	r0, #128	; 0x80
    4f1c:	0080      	lsls	r0, r0, #2
    4f1e:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    4f20:	7d20      	ldrb	r0, [r4, #20]
    4f22:	2800      	cmp	r0, #0
    4f24:	d002      	beq.n	4f2c <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4f26:	2080      	movs	r0, #128	; 0x80
    4f28:	0180      	lsls	r0, r0, #6
    4f2a:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    4f2c:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    4f2e:	2502      	movs	r5, #2
    4f30:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    4f32:	4283      	cmp	r3, r0
    4f34:	d004      	beq.n	4f40 <spi_init+0x174>
	module->hw = NULL;
    4f36:	2300      	movs	r3, #0
    4f38:	464a      	mov	r2, r9
    4f3a:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    4f3c:	201c      	movs	r0, #28
    4f3e:	e757      	b.n	4df0 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    4f40:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    4f42:	4293      	cmp	r3, r2
    4f44:	d1f7      	bne.n	4f36 <spi_init+0x16a>
		module->mode           = config->mode;
    4f46:	464b      	mov	r3, r9
    4f48:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    4f4a:	7c23      	ldrb	r3, [r4, #16]
    4f4c:	464a      	mov	r2, r9
    4f4e:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    4f50:	2000      	movs	r0, #0
    4f52:	e74d      	b.n	4df0 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f54:	0008      	movs	r0, r1
    4f56:	4b63      	ldr	r3, [pc, #396]	; (50e4 <spi_init+0x318>)
    4f58:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    4f5a:	4a63      	ldr	r2, [pc, #396]	; (50e8 <spi_init+0x31c>)
    4f5c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4f5e:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4f60:	2301      	movs	r3, #1
    4f62:	40ab      	lsls	r3, r5
    4f64:	430b      	orrs	r3, r1
    4f66:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4f68:	a909      	add	r1, sp, #36	; 0x24
    4f6a:	2624      	movs	r6, #36	; 0x24
    4f6c:	5da3      	ldrb	r3, [r4, r6]
    4f6e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4f70:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4f72:	b2c5      	uxtb	r5, r0
    4f74:	0028      	movs	r0, r5
    4f76:	4b5d      	ldr	r3, [pc, #372]	; (50ec <spi_init+0x320>)
    4f78:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4f7a:	0028      	movs	r0, r5
    4f7c:	4b5c      	ldr	r3, [pc, #368]	; (50f0 <spi_init+0x324>)
    4f7e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4f80:	5da0      	ldrb	r0, [r4, r6]
    4f82:	2100      	movs	r1, #0
    4f84:	4b5b      	ldr	r3, [pc, #364]	; (50f4 <spi_init+0x328>)
    4f86:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4f88:	7823      	ldrb	r3, [r4, #0]
    4f8a:	2b01      	cmp	r3, #1
    4f8c:	d020      	beq.n	4fd0 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    4f8e:	7823      	ldrb	r3, [r4, #0]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d103      	bne.n	4f9c <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    4f94:	683b      	ldr	r3, [r7, #0]
    4f96:	2208      	movs	r2, #8
    4f98:	4313      	orrs	r3, r2
    4f9a:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f9c:	464b      	mov	r3, r9
    4f9e:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4fa0:	ab04      	add	r3, sp, #16
    4fa2:	2280      	movs	r2, #128	; 0x80
    4fa4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4fa6:	2200      	movs	r2, #0
    4fa8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4faa:	2101      	movs	r1, #1
    4fac:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    4fae:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4fb0:	7823      	ldrb	r3, [r4, #0]
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d101      	bne.n	4fba <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4fb6:	ab04      	add	r3, sp, #16
    4fb8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4fbc:	9305      	str	r3, [sp, #20]
    4fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4fc0:	9306      	str	r3, [sp, #24]
    4fc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4fc4:	9307      	str	r3, [sp, #28]
    4fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4fc8:	9308      	str	r3, [sp, #32]
    4fca:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4fcc:	ad05      	add	r5, sp, #20
    4fce:	e011      	b.n	4ff4 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4fd0:	683b      	ldr	r3, [r7, #0]
    4fd2:	220c      	movs	r2, #12
    4fd4:	4313      	orrs	r3, r2
    4fd6:	603b      	str	r3, [r7, #0]
    4fd8:	e7d9      	b.n	4f8e <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4fda:	0030      	movs	r0, r6
    4fdc:	4b3d      	ldr	r3, [pc, #244]	; (50d4 <spi_init+0x308>)
    4fde:	4798      	blx	r3
    4fe0:	e00d      	b.n	4ffe <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4fe2:	a904      	add	r1, sp, #16
    4fe4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4fe6:	0c00      	lsrs	r0, r0, #16
    4fe8:	b2c0      	uxtb	r0, r0
    4fea:	4b43      	ldr	r3, [pc, #268]	; (50f8 <spi_init+0x32c>)
    4fec:	4798      	blx	r3
    4fee:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4ff0:	2f04      	cmp	r7, #4
    4ff2:	d007      	beq.n	5004 <spi_init+0x238>
    4ff4:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ff6:	00bb      	lsls	r3, r7, #2
    4ff8:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    4ffa:	2800      	cmp	r0, #0
    4ffc:	d0ed      	beq.n	4fda <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    4ffe:	1c43      	adds	r3, r0, #1
    5000:	d1ef      	bne.n	4fe2 <spi_init+0x216>
    5002:	e7f4      	b.n	4fee <spi_init+0x222>
	module->mode             = config->mode;
    5004:	7823      	ldrb	r3, [r4, #0]
    5006:	464a      	mov	r2, r9
    5008:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    500a:	7c23      	ldrb	r3, [r4, #16]
    500c:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    500e:	7ca3      	ldrb	r3, [r4, #18]
    5010:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    5012:	7d23      	ldrb	r3, [r4, #20]
    5014:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    5016:	2200      	movs	r2, #0
    5018:	ab02      	add	r3, sp, #8
    501a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    501c:	7823      	ldrb	r3, [r4, #0]
    501e:	2b01      	cmp	r3, #1
    5020:	d012      	beq.n	5048 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    5022:	7823      	ldrb	r3, [r4, #0]
    5024:	2b00      	cmp	r3, #0
    5026:	d127      	bne.n	5078 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    5028:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    502a:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    502c:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    502e:	7fe1      	ldrb	r1, [r4, #31]
    5030:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    5032:	7fa5      	ldrb	r5, [r4, #30]
    5034:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    5036:	4319      	orrs	r1, r3
    5038:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    503a:	2320      	movs	r3, #32
    503c:	5ce3      	ldrb	r3, [r4, r3]
    503e:	2b00      	cmp	r3, #0
    5040:	d01c      	beq.n	507c <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    5042:	2340      	movs	r3, #64	; 0x40
    5044:	431a      	orrs	r2, r3
    5046:	e019      	b.n	507c <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5048:	464b      	mov	r3, r9
    504a:	6818      	ldr	r0, [r3, #0]
    504c:	4b25      	ldr	r3, [pc, #148]	; (50e4 <spi_init+0x318>)
    504e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5050:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5052:	b2c0      	uxtb	r0, r0
    5054:	4b21      	ldr	r3, [pc, #132]	; (50dc <spi_init+0x310>)
    5056:	4798      	blx	r3
    5058:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    505a:	ab02      	add	r3, sp, #8
    505c:	1d9a      	adds	r2, r3, #6
    505e:	69a0      	ldr	r0, [r4, #24]
    5060:	4b1f      	ldr	r3, [pc, #124]	; (50e0 <spi_init+0x314>)
    5062:	4798      	blx	r3
    5064:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    5066:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    5068:	2b00      	cmp	r3, #0
    506a:	d000      	beq.n	506e <spi_init+0x2a2>
    506c:	e6c0      	b.n	4df0 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    506e:	ab02      	add	r3, sp, #8
    5070:	3306      	adds	r3, #6
    5072:	781b      	ldrb	r3, [r3, #0]
    5074:	7333      	strb	r3, [r6, #12]
    5076:	e7d4      	b.n	5022 <spi_init+0x256>
	uint32_t ctrlb = 0;
    5078:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    507a:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    507c:	6863      	ldr	r3, [r4, #4]
    507e:	68a1      	ldr	r1, [r4, #8]
    5080:	430b      	orrs	r3, r1
    5082:	68e1      	ldr	r1, [r4, #12]
    5084:	430b      	orrs	r3, r1
    5086:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    5088:	7c21      	ldrb	r1, [r4, #16]
    508a:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    508c:	7c61      	ldrb	r1, [r4, #17]
    508e:	2900      	cmp	r1, #0
    5090:	d103      	bne.n	509a <spi_init+0x2ce>
    5092:	491a      	ldr	r1, [pc, #104]	; (50fc <spi_init+0x330>)
    5094:	7889      	ldrb	r1, [r1, #2]
    5096:	0789      	lsls	r1, r1, #30
    5098:	d501      	bpl.n	509e <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    509a:	2180      	movs	r1, #128	; 0x80
    509c:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    509e:	7ca1      	ldrb	r1, [r4, #18]
    50a0:	2900      	cmp	r1, #0
    50a2:	d002      	beq.n	50aa <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    50a4:	2180      	movs	r1, #128	; 0x80
    50a6:	0289      	lsls	r1, r1, #10
    50a8:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    50aa:	7ce1      	ldrb	r1, [r4, #19]
    50ac:	2900      	cmp	r1, #0
    50ae:	d002      	beq.n	50b6 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    50b0:	2180      	movs	r1, #128	; 0x80
    50b2:	0089      	lsls	r1, r1, #2
    50b4:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    50b6:	7d21      	ldrb	r1, [r4, #20]
    50b8:	2900      	cmp	r1, #0
    50ba:	d002      	beq.n	50c2 <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    50bc:	2180      	movs	r1, #128	; 0x80
    50be:	0189      	lsls	r1, r1, #6
    50c0:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    50c2:	6831      	ldr	r1, [r6, #0]
    50c4:	430b      	orrs	r3, r1
    50c6:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    50c8:	6873      	ldr	r3, [r6, #4]
    50ca:	431a      	orrs	r2, r3
    50cc:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    50ce:	2000      	movs	r0, #0
    50d0:	e68e      	b.n	4df0 <spi_init+0x24>
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	00004b99 	.word	0x00004b99
    50d8:	41004400 	.word	0x41004400
    50dc:	00006149 	.word	0x00006149
    50e0:	00004a8f 	.word	0x00004a8f
    50e4:	00004d11 	.word	0x00004d11
    50e8:	40000400 	.word	0x40000400
    50ec:	0000612d 	.word	0x0000612d
    50f0:	000060a1 	.word	0x000060a1
    50f4:	00004b4d 	.word	0x00004b4d
    50f8:	00006225 	.word	0x00006225
    50fc:	41002000 	.word	0x41002000

00005100 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5100:	b5f0      	push	{r4, r5, r6, r7, lr}
    5102:	46d6      	mov	lr, sl
    5104:	464f      	mov	r7, r9
    5106:	4646      	mov	r6, r8
    5108:	b5c0      	push	{r6, r7, lr}
    510a:	b082      	sub	sp, #8
    510c:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    510e:	2717      	movs	r7, #23
	if (length == 0) {
    5110:	2a00      	cmp	r2, #0
    5112:	d073      	beq.n	51fc <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    5114:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    5116:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    5118:	2900      	cmp	r1, #0
    511a:	d06f      	beq.n	51fc <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    511c:	7941      	ldrb	r1, [r0, #5]
    511e:	2900      	cmp	r1, #0
    5120:	d103      	bne.n	512a <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5122:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5124:	7e0c      	ldrb	r4, [r1, #24]
    5126:	07a4      	lsls	r4, r4, #30
    5128:	d40b      	bmi.n	5142 <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    512a:	3a01      	subs	r2, #1
    512c:	b294      	uxth	r4, r2
    512e:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    5130:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    5132:	2102      	movs	r1, #2
    5134:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    5136:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5138:	05db      	lsls	r3, r3, #23
    513a:	0ddb      	lsrs	r3, r3, #23
    513c:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    513e:	46c4      	mov	ip, r8
    5140:	e037      	b.n	51b2 <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5142:	2402      	movs	r4, #2
    5144:	760c      	strb	r4, [r1, #24]
    5146:	e7f0      	b.n	512a <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5148:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    514a:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    514c:	4233      	tst	r3, r6
    514e:	d0fc      	beq.n	514a <spi_read_buffer_wait+0x4a>
    5150:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    5152:	4233      	tst	r3, r6
    5154:	d009      	beq.n	516a <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5156:	4653      	mov	r3, sl
    5158:	628b      	str	r3, [r1, #40]	; 0x28
    515a:	e02d      	b.n	51b8 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    515c:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    515e:	4649      	mov	r1, r9
    5160:	420b      	tst	r3, r1
    5162:	d138      	bne.n	51d6 <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5164:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    5166:	4213      	tst	r3, r2
    5168:	d045      	beq.n	51f6 <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    516a:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    516c:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    516e:	4213      	tst	r3, r2
    5170:	d0fc      	beq.n	516c <spi_read_buffer_wait+0x6c>
    5172:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    5174:	4213      	tst	r3, r2
    5176:	d040      	beq.n	51fa <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5178:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    517a:	2700      	movs	r7, #0
    517c:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    517e:	4213      	tst	r3, r2
    5180:	d002      	beq.n	5188 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5182:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    5184:	231e      	movs	r3, #30
    5186:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5188:	7983      	ldrb	r3, [r0, #6]
    518a:	2b01      	cmp	r3, #1
    518c:	d027      	beq.n	51de <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    518e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    5190:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    5192:	9901      	ldr	r1, [sp, #4]
    5194:	2900      	cmp	r1, #0
    5196:	d138      	bne.n	520a <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    5198:	1c6f      	adds	r7, r5, #1
    519a:	b2bf      	uxth	r7, r7
    519c:	4661      	mov	r1, ip
    519e:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51a0:	7981      	ldrb	r1, [r0, #6]
    51a2:	2901      	cmp	r1, #1
    51a4:	d01f      	beq.n	51e6 <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    51a6:	003d      	movs	r5, r7
	while (length--) {
    51a8:	3c01      	subs	r4, #1
    51aa:	b2a4      	uxth	r4, r4
    51ac:	4918      	ldr	r1, [pc, #96]	; (5210 <spi_read_buffer_wait+0x110>)
    51ae:	428c      	cmp	r4, r1
    51b0:	d01f      	beq.n	51f2 <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    51b2:	7943      	ldrb	r3, [r0, #5]
    51b4:	2b01      	cmp	r3, #1
    51b6:	d0c7      	beq.n	5148 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    51b8:	7943      	ldrb	r3, [r0, #5]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d1d5      	bne.n	516a <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51be:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51c0:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    51c2:	4213      	tst	r3, r2
    51c4:	d1ca      	bne.n	515c <spi_read_buffer_wait+0x5c>
    51c6:	4b13      	ldr	r3, [pc, #76]	; (5214 <spi_read_buffer_wait+0x114>)
    51c8:	7e39      	ldrb	r1, [r7, #24]
    51ca:	4211      	tst	r1, r2
    51cc:	d1c6      	bne.n	515c <spi_read_buffer_wait+0x5c>
    51ce:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    51d0:	2b00      	cmp	r3, #0
    51d2:	d1f9      	bne.n	51c8 <spi_read_buffer_wait+0xc8>
    51d4:	e7c2      	b.n	515c <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    51d6:	2302      	movs	r3, #2
    51d8:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    51da:	2704      	movs	r7, #4
    51dc:	e00e      	b.n	51fc <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    51de:	6a89      	ldr	r1, [r1, #40]	; 0x28
    51e0:	05c9      	lsls	r1, r1, #23
    51e2:	0dcb      	lsrs	r3, r1, #23
    51e4:	e7d5      	b.n	5192 <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    51e6:	3502      	adds	r5, #2
    51e8:	b2ad      	uxth	r5, r5
    51ea:	0a19      	lsrs	r1, r3, #8
    51ec:	4663      	mov	r3, ip
    51ee:	55d9      	strb	r1, [r3, r7]
    51f0:	e7da      	b.n	51a8 <spi_read_buffer_wait+0xa8>
    51f2:	9f01      	ldr	r7, [sp, #4]
    51f4:	e002      	b.n	51fc <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    51f6:	2712      	movs	r7, #18
    51f8:	e000      	b.n	51fc <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    51fa:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    51fc:	0038      	movs	r0, r7
    51fe:	b002      	add	sp, #8
    5200:	bc1c      	pop	{r2, r3, r4}
    5202:	4690      	mov	r8, r2
    5204:	4699      	mov	r9, r3
    5206:	46a2      	mov	sl, r4
    5208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    520a:	9f01      	ldr	r7, [sp, #4]
    520c:	e7f6      	b.n	51fc <spi_read_buffer_wait+0xfc>
    520e:	46c0      	nop			; (mov r8, r8)
    5210:	0000ffff 	.word	0x0000ffff
    5214:	00002710 	.word	0x00002710

00005218 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5218:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    521a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    521c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    521e:	2c01      	cmp	r4, #1
    5220:	d001      	beq.n	5226 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    5222:	0018      	movs	r0, r3
    5224:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    5226:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5228:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    522a:	2c00      	cmp	r4, #0
    522c:	d1f9      	bne.n	5222 <spi_select_slave+0xa>
		if (select) {
    522e:	2a00      	cmp	r2, #0
    5230:	d058      	beq.n	52e4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    5232:	784b      	ldrb	r3, [r1, #1]
    5234:	2b00      	cmp	r3, #0
    5236:	d044      	beq.n	52c2 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5238:	6803      	ldr	r3, [r0, #0]
    523a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    523c:	07db      	lsls	r3, r3, #31
    523e:	d410      	bmi.n	5262 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    5240:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5242:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5244:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5246:	2900      	cmp	r1, #0
    5248:	d104      	bne.n	5254 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    524a:	0953      	lsrs	r3, r2, #5
    524c:	01db      	lsls	r3, r3, #7
    524e:	492e      	ldr	r1, [pc, #184]	; (5308 <spi_select_slave+0xf0>)
    5250:	468c      	mov	ip, r1
    5252:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5254:	211f      	movs	r1, #31
    5256:	4011      	ands	r1, r2
    5258:	2201      	movs	r2, #1
    525a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    525c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    525e:	2305      	movs	r3, #5
    5260:	e7df      	b.n	5222 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5262:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5264:	09d4      	lsrs	r4, r2, #7
		return NULL;
    5266:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5268:	2c00      	cmp	r4, #0
    526a:	d104      	bne.n	5276 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    526c:	0953      	lsrs	r3, r2, #5
    526e:	01db      	lsls	r3, r3, #7
    5270:	4c25      	ldr	r4, [pc, #148]	; (5308 <spi_select_slave+0xf0>)
    5272:	46a4      	mov	ip, r4
    5274:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5276:	241f      	movs	r4, #31
    5278:	4014      	ands	r4, r2
    527a:	2201      	movs	r2, #1
    527c:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    527e:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5280:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5282:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5284:	07d2      	lsls	r2, r2, #31
    5286:	d501      	bpl.n	528c <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5288:	788a      	ldrb	r2, [r1, #2]
    528a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    528c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    528e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5290:	2a00      	cmp	r2, #0
    5292:	d1c6      	bne.n	5222 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5294:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    5296:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5298:	7e13      	ldrb	r3, [r2, #24]
    529a:	420b      	tst	r3, r1
    529c:	d0fc      	beq.n	5298 <spi_select_slave+0x80>
    529e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    52a0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    52a2:	0749      	lsls	r1, r1, #29
    52a4:	d5bd      	bpl.n	5222 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    52a6:	8b53      	ldrh	r3, [r2, #26]
    52a8:	075b      	lsls	r3, r3, #29
    52aa:	d501      	bpl.n	52b0 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    52ac:	2304      	movs	r3, #4
    52ae:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52b0:	7983      	ldrb	r3, [r0, #6]
    52b2:	2b01      	cmp	r3, #1
    52b4:	d002      	beq.n	52bc <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    52b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    52b8:	2300      	movs	r3, #0
    52ba:	e7b2      	b.n	5222 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    52bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    52be:	2300      	movs	r3, #0
    52c0:	e7af      	b.n	5222 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    52c2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    52c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    52c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    52c8:	2900      	cmp	r1, #0
    52ca:	d104      	bne.n	52d6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    52cc:	0953      	lsrs	r3, r2, #5
    52ce:	01db      	lsls	r3, r3, #7
    52d0:	490d      	ldr	r1, [pc, #52]	; (5308 <spi_select_slave+0xf0>)
    52d2:	468c      	mov	ip, r1
    52d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52d6:	211f      	movs	r1, #31
    52d8:	4011      	ands	r1, r2
    52da:	2201      	movs	r2, #1
    52dc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    52de:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    52e0:	2300      	movs	r3, #0
    52e2:	e79e      	b.n	5222 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    52e4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    52e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    52e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    52ea:	2900      	cmp	r1, #0
    52ec:	d104      	bne.n	52f8 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    52ee:	0953      	lsrs	r3, r2, #5
    52f0:	01db      	lsls	r3, r3, #7
    52f2:	4905      	ldr	r1, [pc, #20]	; (5308 <spi_select_slave+0xf0>)
    52f4:	468c      	mov	ip, r1
    52f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    52f8:	211f      	movs	r1, #31
    52fa:	4011      	ands	r1, r2
    52fc:	2201      	movs	r2, #1
    52fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5300:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5302:	2300      	movs	r3, #0
    5304:	e78d      	b.n	5222 <spi_select_slave+0xa>
    5306:	46c0      	nop			; (mov r8, r8)
    5308:	41004400 	.word	0x41004400

0000530c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    530c:	b5f0      	push	{r4, r5, r6, r7, lr}
    530e:	46de      	mov	lr, fp
    5310:	4657      	mov	r7, sl
    5312:	464e      	mov	r6, r9
    5314:	4645      	mov	r5, r8
    5316:	b5e0      	push	{r5, r6, r7, lr}
    5318:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    531a:	2317      	movs	r3, #23
	if (length == 0) {
    531c:	2a00      	cmp	r2, #0
    531e:	d107      	bne.n	5330 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5320:	0018      	movs	r0, r3
    5322:	b003      	add	sp, #12
    5324:	bc3c      	pop	{r2, r3, r4, r5}
    5326:	4690      	mov	r8, r2
    5328:	4699      	mov	r9, r3
    532a:	46a2      	mov	sl, r4
    532c:	46ab      	mov	fp, r5
    532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    5330:	7943      	ldrb	r3, [r0, #5]
    5332:	2b00      	cmp	r3, #0
    5334:	d103      	bne.n	533e <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5336:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5338:	7e1c      	ldrb	r4, [r3, #24]
    533a:	07a4      	lsls	r4, r4, #30
    533c:	d40a      	bmi.n	5354 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    533e:	4693      	mov	fp, r2
    5340:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    5342:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    5344:	2502      	movs	r5, #2
    5346:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    5348:	3502      	adds	r5, #2
    534a:	46a8      	mov	r8, r5
    534c:	3a01      	subs	r2, #1
    534e:	b292      	uxth	r2, r2
    5350:	468a      	mov	sl, r1
    5352:	e023      	b.n	539c <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5354:	2402      	movs	r4, #2
    5356:	761c      	strb	r4, [r3, #24]
    5358:	e7f1      	b.n	533e <spi_write_buffer_wait+0x32>
    535a:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    535c:	4661      	mov	r1, ip
    535e:	420d      	tst	r5, r1
    5360:	d12e      	bne.n	53c0 <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5362:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    5364:	421d      	tst	r5, r3
    5366:	d100      	bne.n	536a <spi_write_buffer_wait+0x5e>
    5368:	e0c2      	b.n	54f0 <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    536a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    536c:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    536e:	421d      	tst	r5, r3
    5370:	d0fc      	beq.n	536c <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    5372:	1c67      	adds	r7, r4, #1
    5374:	b2bf      	uxth	r7, r7
    5376:	4651      	mov	r1, sl
    5378:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    537a:	7981      	ldrb	r1, [r0, #6]
    537c:	2901      	cmp	r1, #1
    537e:	d023      	beq.n	53c8 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    5380:	b2ad      	uxth	r5, r5
    5382:	003c      	movs	r4, r7
    5384:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5386:	421f      	tst	r7, r3
    5388:	d002      	beq.n	5390 <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    538a:	05ed      	lsls	r5, r5, #23
    538c:	0ded      	lsrs	r5, r5, #23
    538e:	62b5      	str	r5, [r6, #40]	; 0x28
    5390:	1e55      	subs	r5, r2, #1
    5392:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    5394:	79c6      	ldrb	r6, [r0, #7]
    5396:	2e00      	cmp	r6, #0
    5398:	d11d      	bne.n	53d6 <spi_write_buffer_wait+0xca>
    539a:	002a      	movs	r2, r5
	while (length--) {
    539c:	4d59      	ldr	r5, [pc, #356]	; (5504 <spi_write_buffer_wait+0x1f8>)
    539e:	42aa      	cmp	r2, r5
    53a0:	d070      	beq.n	5484 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    53a2:	7945      	ldrb	r5, [r0, #5]
    53a4:	2d00      	cmp	r5, #0
    53a6:	d1e0      	bne.n	536a <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    53a8:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    53aa:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    53ac:	421d      	tst	r5, r3
    53ae:	d1d4      	bne.n	535a <spi_write_buffer_wait+0x4e>
    53b0:	4d55      	ldr	r5, [pc, #340]	; (5508 <spi_write_buffer_wait+0x1fc>)
    53b2:	7e37      	ldrb	r7, [r6, #24]
    53b4:	421f      	tst	r7, r3
    53b6:	d1d0      	bne.n	535a <spi_write_buffer_wait+0x4e>
    53b8:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    53ba:	2d00      	cmp	r5, #0
    53bc:	d1f9      	bne.n	53b2 <spi_write_buffer_wait+0xa6>
    53be:	e7cc      	b.n	535a <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    53c0:	2302      	movs	r3, #2
    53c2:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    53c4:	3302      	adds	r3, #2
    53c6:	e7ab      	b.n	5320 <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    53c8:	3402      	adds	r4, #2
    53ca:	b2a4      	uxth	r4, r4
    53cc:	4651      	mov	r1, sl
    53ce:	5dcf      	ldrb	r7, [r1, r7]
    53d0:	023f      	lsls	r7, r7, #8
    53d2:	433d      	orrs	r5, r7
    53d4:	e7d6      	b.n	5384 <spi_write_buffer_wait+0x78>
    53d6:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    53d8:	7945      	ldrb	r5, [r0, #5]
    53da:	2d00      	cmp	r5, #0
    53dc:	d137      	bne.n	544e <spi_write_buffer_wait+0x142>
    53de:	4d4b      	ldr	r5, [pc, #300]	; (550c <spi_write_buffer_wait+0x200>)
    53e0:	9101      	str	r1, [sp, #4]
    53e2:	e012      	b.n	540a <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    53e4:	3402      	adds	r4, #2
    53e6:	b2a4      	uxth	r4, r4
    53e8:	4649      	mov	r1, r9
    53ea:	9f01      	ldr	r7, [sp, #4]
    53ec:	5c79      	ldrb	r1, [r7, r1]
    53ee:	0209      	lsls	r1, r1, #8
    53f0:	9f00      	ldr	r7, [sp, #0]
    53f2:	430f      	orrs	r7, r1
    53f4:	e01b      	b.n	542e <spi_write_buffer_wait+0x122>
						length--;
    53f6:	3a01      	subs	r2, #1
    53f8:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    53fa:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    53fc:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    53fe:	4641      	mov	r1, r8
    5400:	420f      	tst	r7, r1
    5402:	d11b      	bne.n	543c <spi_write_buffer_wait+0x130>
    5404:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    5406:	2d00      	cmp	r5, #0
    5408:	d018      	beq.n	543c <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    540a:	2a00      	cmp	r2, #0
    540c:	d0f5      	beq.n	53fa <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    540e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5410:	7e37      	ldrb	r7, [r6, #24]
    5412:	421f      	tst	r7, r3
    5414:	d0f1      	beq.n	53fa <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    5416:	1c67      	adds	r7, r4, #1
    5418:	b2b9      	uxth	r1, r7
    541a:	4689      	mov	r9, r1
    541c:	9901      	ldr	r1, [sp, #4]
    541e:	5d09      	ldrb	r1, [r1, r4]
    5420:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5422:	7981      	ldrb	r1, [r0, #6]
    5424:	2901      	cmp	r1, #1
    5426:	d0dd      	beq.n	53e4 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    5428:	4669      	mov	r1, sp
    542a:	880f      	ldrh	r7, [r1, #0]
    542c:	464c      	mov	r4, r9
    542e:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    5430:	4219      	tst	r1, r3
    5432:	d0e0      	beq.n	53f6 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5434:	05ff      	lsls	r7, r7, #23
    5436:	0dff      	lsrs	r7, r7, #23
    5438:	62b7      	str	r7, [r6, #40]	; 0x28
    543a:	e7dc      	b.n	53f6 <spi_write_buffer_wait+0xea>
    543c:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    543e:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    5440:	4667      	mov	r7, ip
    5442:	423d      	tst	r5, r7
    5444:	d118      	bne.n	5478 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5446:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    5448:	4646      	mov	r6, r8
    544a:	4235      	tst	r5, r6
    544c:	d052      	beq.n	54f4 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    544e:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5450:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    5452:	4647      	mov	r7, r8
    5454:	423d      	tst	r5, r7
    5456:	d0fb      	beq.n	5450 <spi_write_buffer_wait+0x144>
    5458:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    545a:	423d      	tst	r5, r7
    545c:	d007      	beq.n	546e <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    545e:	8b75      	ldrh	r5, [r6, #26]
    5460:	423d      	tst	r5, r7
    5462:	d000      	beq.n	5466 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5464:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5466:	7985      	ldrb	r5, [r0, #6]
    5468:	2d01      	cmp	r5, #1
    546a:	d009      	beq.n	5480 <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    546c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    546e:	465d      	mov	r5, fp
    5470:	3d01      	subs	r5, #1
    5472:	b2ad      	uxth	r5, r5
    5474:	46ab      	mov	fp, r5
    5476:	e769      	b.n	534c <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5478:	2302      	movs	r3, #2
    547a:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    547c:	3302      	adds	r3, #2
    547e:	e74f      	b.n	5320 <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5480:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    5482:	e7f4      	b.n	546e <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    5484:	7943      	ldrb	r3, [r0, #5]
    5486:	2b01      	cmp	r3, #1
    5488:	d00b      	beq.n	54a2 <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    548a:	2b00      	cmp	r3, #0
    548c:	d134      	bne.n	54f8 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    548e:	79c2      	ldrb	r2, [r0, #7]
    5490:	2a00      	cmp	r2, #0
    5492:	d100      	bne.n	5496 <spi_write_buffer_wait+0x18a>
    5494:	e744      	b.n	5320 <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    5496:	2404      	movs	r4, #4
			while (flush_length) {
    5498:	465b      	mov	r3, fp
    549a:	465d      	mov	r5, fp
    549c:	2b00      	cmp	r3, #0
    549e:	d119      	bne.n	54d4 <spi_write_buffer_wait+0x1c8>
    54a0:	e73e      	b.n	5320 <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    54a2:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    54a4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    54a6:	7e0b      	ldrb	r3, [r1, #24]
    54a8:	4213      	tst	r3, r2
    54aa:	d0fc      	beq.n	54a6 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    54ac:	2300      	movs	r3, #0
    54ae:	e737      	b.n	5320 <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54b0:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    54b2:	4223      	tst	r3, r4
    54b4:	d022      	beq.n	54fc <spi_write_buffer_wait+0x1f0>
    54b6:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    54b8:	4223      	tst	r3, r4
    54ba:	d007      	beq.n	54cc <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    54bc:	8b4b      	ldrh	r3, [r1, #26]
    54be:	4223      	tst	r3, r4
    54c0:	d000      	beq.n	54c4 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    54c2:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    54c4:	7983      	ldrb	r3, [r0, #6]
    54c6:	2b01      	cmp	r3, #1
    54c8:	d010      	beq.n	54ec <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    54ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    54cc:	3d01      	subs	r5, #1
    54ce:	b2ad      	uxth	r5, r5
			while (flush_length) {
    54d0:	2d00      	cmp	r5, #0
    54d2:	d015      	beq.n	5500 <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    54d4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    54d6:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    54d8:	4223      	tst	r3, r4
    54da:	d1e9      	bne.n	54b0 <spi_write_buffer_wait+0x1a4>
    54dc:	4b0a      	ldr	r3, [pc, #40]	; (5508 <spi_write_buffer_wait+0x1fc>)
    54de:	7e0a      	ldrb	r2, [r1, #24]
    54e0:	4222      	tst	r2, r4
    54e2:	d1e5      	bne.n	54b0 <spi_write_buffer_wait+0x1a4>
    54e4:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    54e6:	2b00      	cmp	r3, #0
    54e8:	d1f9      	bne.n	54de <spi_write_buffer_wait+0x1d2>
    54ea:	e7e1      	b.n	54b0 <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    54ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    54ee:	e7ed      	b.n	54cc <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    54f0:	2312      	movs	r3, #18
    54f2:	e715      	b.n	5320 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    54f4:	2312      	movs	r3, #18
    54f6:	e713      	b.n	5320 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    54f8:	2300      	movs	r3, #0
    54fa:	e711      	b.n	5320 <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    54fc:	2312      	movs	r3, #18
    54fe:	e70f      	b.n	5320 <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    5500:	2300      	movs	r3, #0
    5502:	e70d      	b.n	5320 <spi_write_buffer_wait+0x14>
    5504:	0000ffff 	.word	0x0000ffff
    5508:	00002710 	.word	0x00002710
    550c:	00002711 	.word	0x00002711

00005510 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    5510:	4770      	bx	lr
	...

00005514 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    5514:	b510      	push	{r4, lr}
    5516:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    5518:	4b0f      	ldr	r3, [pc, #60]	; (5558 <sd_mmc_test_unit_ready+0x44>)
    551a:	4798      	blx	r3
    551c:	2801      	cmp	r0, #1
    551e:	d019      	beq.n	5554 <sd_mmc_test_unit_ready+0x40>
    5520:	2800      	cmp	r0, #0
    5522:	d003      	beq.n	552c <sd_mmc_test_unit_ready+0x18>
    5524:	2802      	cmp	r0, #2
    5526:	d010      	beq.n	554a <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    5528:	2001      	movs	r0, #1
	}
}
    552a:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    552c:	4b0b      	ldr	r3, [pc, #44]	; (555c <sd_mmc_test_unit_ready+0x48>)
    552e:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    5530:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    5532:	2b00      	cmp	r3, #0
    5534:	d1f9      	bne.n	552a <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    5536:	0020      	movs	r0, r4
    5538:	4b09      	ldr	r3, [pc, #36]	; (5560 <sd_mmc_test_unit_ready+0x4c>)
    553a:	4798      	blx	r3
    553c:	0003      	movs	r3, r0
    553e:	2003      	movs	r0, #3
    5540:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    5542:	4243      	negs	r3, r0
    5544:	4158      	adcs	r0, r3
    5546:	0040      	lsls	r0, r0, #1
    5548:	e7ef      	b.n	552a <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    554a:	2200      	movs	r2, #0
    554c:	4b03      	ldr	r3, [pc, #12]	; (555c <sd_mmc_test_unit_ready+0x48>)
    554e:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    5550:	2002      	movs	r0, #2
    5552:	e7ea      	b.n	552a <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    5554:	2003      	movs	r0, #3
    5556:	e7e8      	b.n	552a <sd_mmc_test_unit_ready+0x16>
    5558:	00000731 	.word	0x00000731
    555c:	200001d8 	.word	0x200001d8
    5560:	00000be1 	.word	0x00000be1

00005564 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    5564:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    5566:	2000      	movs	r0, #0
    5568:	4b01      	ldr	r3, [pc, #4]	; (5570 <sd_mmc_test_unit_ready_0+0xc>)
    556a:	4798      	blx	r3
}
    556c:	bd10      	pop	{r4, pc}
    556e:	46c0      	nop			; (mov r8, r8)
    5570:	00005515 	.word	0x00005515

00005574 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    5574:	b570      	push	{r4, r5, r6, lr}
    5576:	0004      	movs	r4, r0
    5578:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    557a:	4b04      	ldr	r3, [pc, #16]	; (558c <sd_mmc_read_capacity+0x18>)
    557c:	4798      	blx	r3
    557e:	0040      	lsls	r0, r0, #1
    5580:	3801      	subs	r0, #1
    5582:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    5584:	0020      	movs	r0, r4
    5586:	4b02      	ldr	r3, [pc, #8]	; (5590 <sd_mmc_read_capacity+0x1c>)
    5588:	4798      	blx	r3
}
    558a:	bd70      	pop	{r4, r5, r6, pc}
    558c:	00000c09 	.word	0x00000c09
    5590:	00005515 	.word	0x00005515

00005594 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    5594:	b510      	push	{r4, lr}
    5596:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    5598:	2000      	movs	r0, #0
    559a:	4b01      	ldr	r3, [pc, #4]	; (55a0 <sd_mmc_read_capacity_0+0xc>)
    559c:	4798      	blx	r3
}
    559e:	bd10      	pop	{r4, pc}
    55a0:	00005575 	.word	0x00005575

000055a4 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    55a4:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    55a6:	2000      	movs	r0, #0
    55a8:	4b01      	ldr	r3, [pc, #4]	; (55b0 <sd_mmc_wr_protect_0+0xc>)
    55aa:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    55ac:	bd10      	pop	{r4, pc}
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	00000c31 	.word	0x00000c31

000055b4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    55b4:	b510      	push	{r4, lr}
    55b6:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    55b8:	2201      	movs	r2, #1
    55ba:	4b0c      	ldr	r3, [pc, #48]	; (55ec <sd_mmc_mem_2_ram+0x38>)
    55bc:	4798      	blx	r3
    55be:	2800      	cmp	r0, #0
    55c0:	d004      	beq.n	55cc <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    55c2:	3802      	subs	r0, #2
    55c4:	4243      	negs	r3, r0
    55c6:	4158      	adcs	r0, r3
    55c8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    55ca:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    55cc:	2101      	movs	r1, #1
    55ce:	0020      	movs	r0, r4
    55d0:	4b07      	ldr	r3, [pc, #28]	; (55f0 <sd_mmc_mem_2_ram+0x3c>)
    55d2:	4798      	blx	r3
    55d4:	0003      	movs	r3, r0
		return CTRL_FAIL;
    55d6:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    55d8:	2b00      	cmp	r3, #0
    55da:	d1f6      	bne.n	55ca <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    55dc:	2000      	movs	r0, #0
    55de:	4b05      	ldr	r3, [pc, #20]	; (55f4 <sd_mmc_mem_2_ram+0x40>)
    55e0:	4798      	blx	r3
    55e2:	1e43      	subs	r3, r0, #1
    55e4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    55e6:	b2c0      	uxtb	r0, r0
    55e8:	e7ef      	b.n	55ca <sd_mmc_mem_2_ram+0x16>
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	00000c35 	.word	0x00000c35
    55f0:	00000cbd 	.word	0x00000cbd
    55f4:	00000ce9 	.word	0x00000ce9

000055f8 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    55f8:	b510      	push	{r4, lr}
    55fa:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    55fc:	0001      	movs	r1, r0
    55fe:	2000      	movs	r0, #0
    5600:	4b01      	ldr	r3, [pc, #4]	; (5608 <sd_mmc_mem_2_ram_0+0x10>)
    5602:	4798      	blx	r3
}
    5604:	bd10      	pop	{r4, pc}
    5606:	46c0      	nop			; (mov r8, r8)
    5608:	000055b5 	.word	0x000055b5

0000560c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    560c:	b510      	push	{r4, lr}
    560e:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    5610:	2201      	movs	r2, #1
    5612:	4b0c      	ldr	r3, [pc, #48]	; (5644 <sd_mmc_ram_2_mem+0x38>)
    5614:	4798      	blx	r3
    5616:	2800      	cmp	r0, #0
    5618:	d004      	beq.n	5624 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    561a:	3802      	subs	r0, #2
    561c:	4243      	negs	r3, r0
    561e:	4158      	adcs	r0, r3
    5620:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    5622:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    5624:	2101      	movs	r1, #1
    5626:	0020      	movs	r0, r4
    5628:	4b07      	ldr	r3, [pc, #28]	; (5648 <sd_mmc_ram_2_mem+0x3c>)
    562a:	4798      	blx	r3
    562c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    562e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    5630:	2b00      	cmp	r3, #0
    5632:	d1f6      	bne.n	5622 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    5634:	2000      	movs	r0, #0
    5636:	4b05      	ldr	r3, [pc, #20]	; (564c <sd_mmc_ram_2_mem+0x40>)
    5638:	4798      	blx	r3
    563a:	1e43      	subs	r3, r0, #1
    563c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    563e:	b2c0      	uxtb	r0, r0
    5640:	e7ef      	b.n	5622 <sd_mmc_ram_2_mem+0x16>
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	00000d59 	.word	0x00000d59
    5648:	00000dc9 	.word	0x00000dc9
    564c:	00000df5 	.word	0x00000df5

00005650 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    5650:	b510      	push	{r4, lr}
    5652:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    5654:	0001      	movs	r1, r0
    5656:	2000      	movs	r0, #0
    5658:	4b01      	ldr	r3, [pc, #4]	; (5660 <sd_mmc_ram_2_mem_0+0x10>)
    565a:	4798      	blx	r3
}
    565c:	bd10      	pop	{r4, pc}
    565e:	46c0      	nop			; (mov r8, r8)
    5660:	0000560d 	.word	0x0000560d

00005664 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    5664:	b500      	push	{lr}
    5666:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    5668:	466b      	mov	r3, sp
    566a:	1dd9      	adds	r1, r3, #7
    566c:	23ff      	movs	r3, #255	; 0xff
    566e:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    5670:	2201      	movs	r2, #1
    5672:	480b      	ldr	r0, [pc, #44]	; (56a0 <sd_mmc_spi_start_write_block+0x3c>)
    5674:	4b0b      	ldr	r3, [pc, #44]	; (56a4 <sd_mmc_spi_start_write_block+0x40>)
    5676:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    5678:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <sd_mmc_spi_start_write_block+0x44>)
    567a:	881b      	ldrh	r3, [r3, #0]
    567c:	2b01      	cmp	r3, #1
    567e:	d00a      	beq.n	5696 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    5680:	22fc      	movs	r2, #252	; 0xfc
    5682:	466b      	mov	r3, sp
    5684:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    5686:	2201      	movs	r2, #1
    5688:	466b      	mov	r3, sp
    568a:	1d99      	adds	r1, r3, #6
    568c:	4804      	ldr	r0, [pc, #16]	; (56a0 <sd_mmc_spi_start_write_block+0x3c>)
    568e:	4b05      	ldr	r3, [pc, #20]	; (56a4 <sd_mmc_spi_start_write_block+0x40>)
    5690:	4798      	blx	r3
}
    5692:	b003      	add	sp, #12
    5694:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    5696:	22fe      	movs	r2, #254	; 0xfe
    5698:	466b      	mov	r3, sp
    569a:	719a      	strb	r2, [r3, #6]
    569c:	e7f3      	b.n	5686 <sd_mmc_spi_start_write_block+0x22>
    569e:	46c0      	nop			; (mov r8, r8)
    56a0:	200001dc 	.word	0x200001dc
    56a4:	0000530d 	.word	0x0000530d
    56a8:	200001f0 	.word	0x200001f0

000056ac <sd_mmc_spi_wait_busy>:
{
    56ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ae:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    56b0:	466b      	mov	r3, sp
    56b2:	1ddc      	adds	r4, r3, #7
    56b4:	23ff      	movs	r3, #255	; 0xff
    56b6:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    56b8:	4e12      	ldr	r6, [pc, #72]	; (5704 <sd_mmc_spi_wait_busy+0x58>)
    56ba:	2201      	movs	r2, #1
    56bc:	0021      	movs	r1, r4
    56be:	0030      	movs	r0, r6
    56c0:	4d11      	ldr	r5, [pc, #68]	; (5708 <sd_mmc_spi_wait_busy+0x5c>)
    56c2:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    56c4:	23ff      	movs	r3, #255	; 0xff
    56c6:	2201      	movs	r2, #1
    56c8:	0021      	movs	r1, r4
    56ca:	0030      	movs	r0, r6
    56cc:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    56ce:	23ff      	movs	r3, #255	; 0xff
    56d0:	2201      	movs	r2, #1
    56d2:	0021      	movs	r1, r4
    56d4:	0030      	movs	r0, r6
    56d6:	47a8      	blx	r5
    56d8:	4c0c      	ldr	r4, [pc, #48]	; (570c <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    56da:	466b      	mov	r3, sp
    56dc:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    56de:	4e09      	ldr	r6, [pc, #36]	; (5704 <sd_mmc_spi_wait_busy+0x58>)
    56e0:	4f09      	ldr	r7, [pc, #36]	; (5708 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    56e2:	782b      	ldrb	r3, [r5, #0]
    56e4:	2bff      	cmp	r3, #255	; 0xff
    56e6:	d009      	beq.n	56fc <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    56e8:	23ff      	movs	r3, #255	; 0xff
    56ea:	2201      	movs	r2, #1
    56ec:	0029      	movs	r1, r5
    56ee:	0030      	movs	r0, r6
    56f0:	47b8      	blx	r7
    56f2:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    56f4:	2c00      	cmp	r4, #0
    56f6:	d1f4      	bne.n	56e2 <sd_mmc_spi_wait_busy+0x36>
			return false;
    56f8:	2000      	movs	r0, #0
    56fa:	e000      	b.n	56fe <sd_mmc_spi_wait_busy+0x52>
	return true;
    56fc:	2001      	movs	r0, #1
}
    56fe:	b003      	add	sp, #12
    5700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	200001dc 	.word	0x200001dc
    5708:	00005101 	.word	0x00005101
    570c:	00030d40 	.word	0x00030d40

00005710 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    5710:	b570      	push	{r4, r5, r6, lr}
    5712:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    5714:	4b14      	ldr	r3, [pc, #80]	; (5768 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    5716:	881c      	ldrh	r4, [r3, #0]
    5718:	2c01      	cmp	r4, #1
    571a:	d023      	beq.n	5764 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    571c:	4b13      	ldr	r3, [pc, #76]	; (576c <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    571e:	8819      	ldrh	r1, [r3, #0]
    5720:	4b13      	ldr	r3, [pc, #76]	; (5770 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    5722:	6818      	ldr	r0, [r3, #0]
    5724:	4b13      	ldr	r3, [pc, #76]	; (5774 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    5726:	4798      	blx	r3
		return true; // It is not the End of multi write
    5728:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    572a:	4284      	cmp	r4, r0
    572c:	d902      	bls.n	5734 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    572e:	0018      	movs	r0, r3
    5730:	b002      	add	sp, #8
    5732:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    5734:	466b      	mov	r3, sp
    5736:	1ddc      	adds	r4, r3, #7
    5738:	23ff      	movs	r3, #255	; 0xff
    573a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    573c:	4e0e      	ldr	r6, [pc, #56]	; (5778 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    573e:	2201      	movs	r2, #1
    5740:	0021      	movs	r1, r4
    5742:	0030      	movs	r0, r6
    5744:	4d0d      	ldr	r5, [pc, #52]	; (577c <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    5746:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    5748:	23fd      	movs	r3, #253	; 0xfd
    574a:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    574c:	2201      	movs	r2, #1
    574e:	0021      	movs	r1, r4
    5750:	0030      	movs	r0, r6
    5752:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    5754:	4b0a      	ldr	r3, [pc, #40]	; (5780 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    5756:	4798      	blx	r3
    5758:	1e03      	subs	r3, r0, #0
    575a:	d1e8      	bne.n	572e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    575c:	2105      	movs	r1, #5
    575e:	4a09      	ldr	r2, [pc, #36]	; (5784 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    5760:	7011      	strb	r1, [r2, #0]
		return false;
    5762:	e7e4      	b.n	572e <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    5764:	2301      	movs	r3, #1
    5766:	e7e2      	b.n	572e <sd_mmc_spi_stop_multiwrite_block+0x1e>
    5768:	200001f0 	.word	0x200001f0
    576c:	200001e8 	.word	0x200001e8
    5770:	200001f8 	.word	0x200001f8
    5774:	000063a9 	.word	0x000063a9
    5778:	200001dc 	.word	0x200001dc
    577c:	0000530d 	.word	0x0000530d
    5780:	000056ad 	.word	0x000056ad
    5784:	200001ef 	.word	0x200001ef

00005788 <sd_mmc_spi_start_read_block>:
{
    5788:	b5f0      	push	{r4, r5, r6, r7, lr}
    578a:	b083      	sub	sp, #12
	token = 0;
    578c:	2200      	movs	r2, #0
    578e:	466b      	mov	r3, sp
    5790:	71da      	strb	r2, [r3, #7]
    5792:	4c14      	ldr	r4, [pc, #80]	; (57e4 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    5794:	466b      	mov	r3, sp
    5796:	1ddd      	adds	r5, r3, #7
    5798:	4e13      	ldr	r6, [pc, #76]	; (57e8 <sd_mmc_spi_start_read_block+0x60>)
    579a:	4f14      	ldr	r7, [pc, #80]	; (57ec <sd_mmc_spi_start_read_block+0x64>)
    579c:	23ff      	movs	r3, #255	; 0xff
    579e:	2201      	movs	r2, #1
    57a0:	0029      	movs	r1, r5
    57a2:	0030      	movs	r0, r6
    57a4:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    57a6:	782b      	ldrb	r3, [r5, #0]
    57a8:	220f      	movs	r2, #15
    57aa:	0019      	movs	r1, r3
    57ac:	4391      	bics	r1, r2
    57ae:	1e0a      	subs	r2, r1, #0
    57b0:	d009      	beq.n	57c6 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    57b2:	2bfe      	cmp	r3, #254	; 0xfe
    57b4:	d013      	beq.n	57de <sd_mmc_spi_start_read_block+0x56>
    57b6:	3c01      	subs	r4, #1
		if (i-- == 0) {
    57b8:	2c00      	cmp	r4, #0
    57ba:	d1ef      	bne.n	579c <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    57bc:	2204      	movs	r2, #4
    57be:	4b0c      	ldr	r3, [pc, #48]	; (57f0 <sd_mmc_spi_start_read_block+0x68>)
    57c0:	701a      	strb	r2, [r3, #0]
			return false;
    57c2:	2000      	movs	r0, #0
    57c4:	e00c      	b.n	57e0 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    57c6:	075b      	lsls	r3, r3, #29
    57c8:	d004      	beq.n	57d4 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    57ca:	3207      	adds	r2, #7
    57cc:	4b08      	ldr	r3, [pc, #32]	; (57f0 <sd_mmc_spi_start_read_block+0x68>)
    57ce:	701a      	strb	r2, [r3, #0]
			return false;
    57d0:	2000      	movs	r0, #0
    57d2:	e005      	b.n	57e0 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    57d4:	220b      	movs	r2, #11
    57d6:	4b06      	ldr	r3, [pc, #24]	; (57f0 <sd_mmc_spi_start_read_block+0x68>)
    57d8:	701a      	strb	r2, [r3, #0]
			return false;
    57da:	2000      	movs	r0, #0
    57dc:	e000      	b.n	57e0 <sd_mmc_spi_start_read_block+0x58>
	return true;
    57de:	2001      	movs	r0, #1
}
    57e0:	b003      	add	sp, #12
    57e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57e4:	0007a120 	.word	0x0007a120
    57e8:	200001dc 	.word	0x200001dc
    57ec:	00005101 	.word	0x00005101
    57f0:	200001ef 	.word	0x200001ef

000057f4 <sd_mmc_spi_stop_write_block>:
{
    57f4:	b530      	push	{r4, r5, lr}
    57f6:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    57f8:	a901      	add	r1, sp, #4
    57fa:	2301      	movs	r3, #1
    57fc:	425b      	negs	r3, r3
    57fe:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    5800:	4d14      	ldr	r5, [pc, #80]	; (5854 <sd_mmc_spi_stop_write_block+0x60>)
    5802:	2202      	movs	r2, #2
    5804:	0028      	movs	r0, r5
    5806:	4b14      	ldr	r3, [pc, #80]	; (5858 <sd_mmc_spi_stop_write_block+0x64>)
    5808:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    580a:	466b      	mov	r3, sp
    580c:	1ddc      	adds	r4, r3, #7
    580e:	23ff      	movs	r3, #255	; 0xff
    5810:	2201      	movs	r2, #1
    5812:	0021      	movs	r1, r4
    5814:	0028      	movs	r0, r5
    5816:	4d11      	ldr	r5, [pc, #68]	; (585c <sd_mmc_spi_stop_write_block+0x68>)
    5818:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    581a:	7822      	ldrb	r2, [r4, #0]
    581c:	2311      	movs	r3, #17
    581e:	4013      	ands	r3, r2
    5820:	2b01      	cmp	r3, #1
    5822:	d005      	beq.n	5830 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5824:	2201      	movs	r2, #1
    5826:	4b0e      	ldr	r3, [pc, #56]	; (5860 <sd_mmc_spi_stop_write_block+0x6c>)
    5828:	701a      	strb	r2, [r3, #0]
		return false;
    582a:	2000      	movs	r0, #0
}
    582c:	b003      	add	sp, #12
    582e:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    5830:	231e      	movs	r3, #30
    5832:	401a      	ands	r2, r3
    5834:	2a04      	cmp	r2, #4
    5836:	d00b      	beq.n	5850 <sd_mmc_spi_stop_write_block+0x5c>
    5838:	2a0a      	cmp	r2, #10
    583a:	d104      	bne.n	5846 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    583c:	3a02      	subs	r2, #2
    583e:	4b08      	ldr	r3, [pc, #32]	; (5860 <sd_mmc_spi_stop_write_block+0x6c>)
    5840:	701a      	strb	r2, [r3, #0]
		return false;
    5842:	2000      	movs	r0, #0
    5844:	e7f2      	b.n	582c <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    5846:	220a      	movs	r2, #10
    5848:	4b05      	ldr	r3, [pc, #20]	; (5860 <sd_mmc_spi_stop_write_block+0x6c>)
    584a:	701a      	strb	r2, [r3, #0]
		return false;
    584c:	2000      	movs	r0, #0
    584e:	e7ed      	b.n	582c <sd_mmc_spi_stop_write_block+0x38>
	return true;
    5850:	2001      	movs	r0, #1
    5852:	e7eb      	b.n	582c <sd_mmc_spi_stop_write_block+0x38>
    5854:	200001dc 	.word	0x200001dc
    5858:	0000530d 	.word	0x0000530d
    585c:	00005101 	.word	0x00005101
    5860:	200001ef 	.word	0x200001ef

00005864 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    5864:	b570      	push	{r4, r5, r6, lr}
    5866:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5868:	2500      	movs	r5, #0
    586a:	4b2c      	ldr	r3, [pc, #176]	; (591c <sd_mmc_spi_init+0xb8>)
    586c:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    586e:	a90f      	add	r1, sp, #60	; 0x3c
    5870:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5872:	2601      	movs	r6, #1
    5874:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    5876:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    5878:	2025      	movs	r0, #37	; 0x25
    587a:	4b29      	ldr	r3, [pc, #164]	; (5920 <sd_mmc_spi_init+0xbc>)
    587c:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    587e:	ac01      	add	r4, sp, #4
    5880:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5882:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5884:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5886:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    5888:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    588a:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    588c:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    588e:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5890:	2324      	movs	r3, #36	; 0x24
    5892:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5894:	220c      	movs	r2, #12
    5896:	2100      	movs	r1, #0
    5898:	a807      	add	r0, sp, #28
    589a:	4b22      	ldr	r3, [pc, #136]	; (5924 <sd_mmc_spi_init+0xc0>)
    589c:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    589e:	2380      	movs	r3, #128	; 0x80
    58a0:	025b      	lsls	r3, r3, #9
    58a2:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    58a4:	4b20      	ldr	r3, [pc, #128]	; (5928 <sd_mmc_spi_init+0xc4>)
    58a6:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    58a8:	4b20      	ldr	r3, [pc, #128]	; (592c <sd_mmc_spi_init+0xc8>)
    58aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    58ac:	4b20      	ldr	r3, [pc, #128]	; (5930 <sd_mmc_spi_init+0xcc>)
    58ae:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    58b0:	4b20      	ldr	r3, [pc, #128]	; (5934 <sd_mmc_spi_init+0xd0>)
    58b2:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    58b4:	4b20      	ldr	r3, [pc, #128]	; (5938 <sd_mmc_spi_init+0xd4>)
    58b6:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    58b8:	4d20      	ldr	r5, [pc, #128]	; (593c <sd_mmc_spi_init+0xd8>)
    58ba:	0022      	movs	r2, r4
    58bc:	4920      	ldr	r1, [pc, #128]	; (5940 <sd_mmc_spi_init+0xdc>)
    58be:	0028      	movs	r0, r5
    58c0:	4b20      	ldr	r3, [pc, #128]	; (5944 <sd_mmc_spi_init+0xe0>)
    58c2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    58c4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    58c6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    58c8:	2b00      	cmp	r3, #0
    58ca:	d1fc      	bne.n	58c6 <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    58cc:	6813      	ldr	r3, [r2, #0]
    58ce:	2102      	movs	r1, #2
    58d0:	430b      	orrs	r3, r1
    58d2:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    58d4:	4a1c      	ldr	r2, [pc, #112]	; (5948 <sd_mmc_spi_init+0xe4>)
    58d6:	2300      	movs	r3, #0
    58d8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    58da:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    58dc:	491b      	ldr	r1, [pc, #108]	; (594c <sd_mmc_spi_init+0xe8>)
    58de:	7808      	ldrb	r0, [r1, #0]
    58e0:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    58e2:	4c1b      	ldr	r4, [pc, #108]	; (5950 <sd_mmc_spi_init+0xec>)
    58e4:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    58e6:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    58e8:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    58ea:	2201      	movs	r2, #1
    58ec:	4669      	mov	r1, sp
    58ee:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    58f0:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    58f2:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    58f4:	4b0a      	ldr	r3, [pc, #40]	; (5920 <sd_mmc_spi_init+0xbc>)
    58f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    58f8:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    58fa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    58fc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    58fe:	2900      	cmp	r1, #0
    5900:	d104      	bne.n	590c <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    5902:	0953      	lsrs	r3, r2, #5
    5904:	01db      	lsls	r3, r3, #7
    5906:	4913      	ldr	r1, [pc, #76]	; (5954 <sd_mmc_spi_init+0xf0>)
    5908:	468c      	mov	ip, r1
    590a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    590c:	211f      	movs	r1, #31
    590e:	4011      	ands	r1, r2
    5910:	2201      	movs	r2, #1
    5912:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5914:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    5916:	b010      	add	sp, #64	; 0x40
    5918:	bd70      	pop	{r4, r5, r6, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	200001ef 	.word	0x200001ef
    5920:	00005ed1 	.word	0x00005ed1
    5924:	00006997 	.word	0x00006997
    5928:	00040003 	.word	0x00040003
    592c:	00050003 	.word	0x00050003
    5930:	00060003 	.word	0x00060003
    5934:	00070003 	.word	0x00070003
    5938:	00061a80 	.word	0x00061a80
    593c:	200001dc 	.word	0x200001dc
    5940:	42000800 	.word	0x42000800
    5944:	00004dcd 	.word	0x00004dcd
    5948:	200001fc 	.word	0x200001fc
    594c:	20000068 	.word	0x20000068
    5950:	200001ec 	.word	0x200001ec
    5954:	41004400 	.word	0x41004400

00005958 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    5958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    595a:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    595c:	2200      	movs	r2, #0
    595e:	4b0d      	ldr	r3, [pc, #52]	; (5994 <sd_mmc_spi_select_device+0x3c>)
    5960:	701a      	strb	r2, [r3, #0]
    5962:	000c      	movs	r4, r1
    5964:	4b0c      	ldr	r3, [pc, #48]	; (5998 <sd_mmc_spi_select_device+0x40>)
    5966:	4299      	cmp	r1, r3
    5968:	d900      	bls.n	596c <sd_mmc_spi_select_device+0x14>
    596a:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    596c:	4d0b      	ldr	r5, [pc, #44]	; (599c <sd_mmc_spi_select_device+0x44>)
    596e:	4e0c      	ldr	r6, [pc, #48]	; (59a0 <sd_mmc_spi_select_device+0x48>)
    5970:	e001      	b.n	5976 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    5972:	08e3      	lsrs	r3, r4, #3
    5974:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    5976:	0021      	movs	r1, r4
    5978:	0028      	movs	r0, r5
    597a:	47b0      	blx	r6
    597c:	2817      	cmp	r0, #23
    597e:	d0f8      	beq.n	5972 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    5980:	0079      	lsls	r1, r7, #1
    5982:	19cf      	adds	r7, r1, r7
    5984:	4907      	ldr	r1, [pc, #28]	; (59a4 <sd_mmc_spi_select_device+0x4c>)
    5986:	19c9      	adds	r1, r1, r7
    5988:	2201      	movs	r2, #1
    598a:	4804      	ldr	r0, [pc, #16]	; (599c <sd_mmc_spi_select_device+0x44>)
    598c:	4b06      	ldr	r3, [pc, #24]	; (59a8 <sd_mmc_spi_select_device+0x50>)
    598e:	4798      	blx	r3
}
    5990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5992:	46c0      	nop			; (mov r8, r8)
    5994:	200001ef 	.word	0x200001ef
    5998:	00b71b00 	.word	0x00b71b00
    599c:	200001dc 	.word	0x200001dc
    59a0:	00004d49 	.word	0x00004d49
    59a4:	200001ec 	.word	0x200001ec
    59a8:	00005219 	.word	0x00005219

000059ac <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    59ac:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    59ae:	2200      	movs	r2, #0
    59b0:	4b04      	ldr	r3, [pc, #16]	; (59c4 <sd_mmc_spi_deselect_device+0x18>)
    59b2:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    59b4:	0041      	lsls	r1, r0, #1
    59b6:	1808      	adds	r0, r1, r0
    59b8:	4903      	ldr	r1, [pc, #12]	; (59c8 <sd_mmc_spi_deselect_device+0x1c>)
    59ba:	1809      	adds	r1, r1, r0
    59bc:	4803      	ldr	r0, [pc, #12]	; (59cc <sd_mmc_spi_deselect_device+0x20>)
    59be:	4b04      	ldr	r3, [pc, #16]	; (59d0 <sd_mmc_spi_deselect_device+0x24>)
    59c0:	4798      	blx	r3
}
    59c2:	bd10      	pop	{r4, pc}
    59c4:	200001ef 	.word	0x200001ef
    59c8:	200001ec 	.word	0x200001ec
    59cc:	200001dc 	.word	0x200001dc
    59d0:	00005219 	.word	0x00005219

000059d4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    59d4:	b570      	push	{r4, r5, r6, lr}
    59d6:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    59d8:	22ff      	movs	r2, #255	; 0xff
    59da:	466b      	mov	r3, sp
    59dc:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    59de:	2200      	movs	r2, #0
    59e0:	4b07      	ldr	r3, [pc, #28]	; (5a00 <sd_mmc_spi_send_clock+0x2c>)
    59e2:	701a      	strb	r2, [r3, #0]
    59e4:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    59e6:	4e07      	ldr	r6, [pc, #28]	; (5a04 <sd_mmc_spi_send_clock+0x30>)
    59e8:	4d07      	ldr	r5, [pc, #28]	; (5a08 <sd_mmc_spi_send_clock+0x34>)
    59ea:	2201      	movs	r2, #1
    59ec:	466b      	mov	r3, sp
    59ee:	1dd9      	adds	r1, r3, #7
    59f0:	0030      	movs	r0, r6
    59f2:	47a8      	blx	r5
    59f4:	3c01      	subs	r4, #1
    59f6:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    59f8:	2c00      	cmp	r4, #0
    59fa:	d1f6      	bne.n	59ea <sd_mmc_spi_send_clock+0x16>
	}
}
    59fc:	b002      	add	sp, #8
    59fe:	bd70      	pop	{r4, r5, r6, pc}
    5a00:	200001ef 	.word	0x200001ef
    5a04:	200001dc 	.word	0x200001dc
    5a08:	0000530d 	.word	0x0000530d

00005a0c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    5a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a0e:	46c6      	mov	lr, r8
    5a10:	b500      	push	{lr}
    5a12:	b086      	sub	sp, #24
    5a14:	4680      	mov	r8, r0
    5a16:	9200      	str	r2, [sp, #0]
    5a18:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    5a1a:	22ff      	movs	r2, #255	; 0xff
    5a1c:	230f      	movs	r3, #15
    5a1e:	a802      	add	r0, sp, #8
    5a20:	4684      	mov	ip, r0
    5a22:	4463      	add	r3, ip
    5a24:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5a26:	2200      	movs	r2, #0
    5a28:	4b53      	ldr	r3, [pc, #332]	; (5b78 <sd_mmc_spi_adtc_start+0x16c>)
    5a2a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    5a2c:	ab04      	add	r3, sp, #16
    5a2e:	323f      	adds	r2, #63	; 0x3f
    5a30:	4640      	mov	r0, r8
    5a32:	4002      	ands	r2, r0
    5a34:	2040      	movs	r0, #64	; 0x40
    5a36:	4302      	orrs	r2, r0
    5a38:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    5a3a:	0e0a      	lsrs	r2, r1, #24
    5a3c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    5a3e:	0c0a      	lsrs	r2, r1, #16
    5a40:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    5a42:	0a0a      	lsrs	r2, r1, #8
    5a44:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    5a46:	7119      	strb	r1, [r3, #4]
    5a48:	2700      	movs	r7, #0
	crc = 0;
    5a4a:	2300      	movs	r3, #0
		value = *buf++;
    5a4c:	a904      	add	r1, sp, #16
    5a4e:	2208      	movs	r2, #8
				crc ^= 0x09;
    5a50:	2409      	movs	r4, #9
    5a52:	e011      	b.n	5a78 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    5a54:	0076      	lsls	r6, r6, #1
    5a56:	b2f6      	uxtb	r6, r6
    5a58:	3801      	subs	r0, #1
    5a5a:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    5a5c:	2800      	cmp	r0, #0
    5a5e:	d008      	beq.n	5a72 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    5a60:	005b      	lsls	r3, r3, #1
    5a62:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    5a64:	001d      	movs	r5, r3
    5a66:	4075      	eors	r5, r6
    5a68:	062d      	lsls	r5, r5, #24
    5a6a:	d5f3      	bpl.n	5a54 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    5a6c:	4063      	eors	r3, r4
    5a6e:	b2db      	uxtb	r3, r3
    5a70:	e7f0      	b.n	5a54 <sd_mmc_spi_adtc_start+0x48>
    5a72:	3701      	adds	r7, #1
	while (size--) {
    5a74:	2f05      	cmp	r7, #5
    5a76:	d002      	beq.n	5a7e <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    5a78:	5c7e      	ldrb	r6, [r7, r1]
    5a7a:	0010      	movs	r0, r2
    5a7c:	e7f0      	b.n	5a60 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    5a7e:	005b      	lsls	r3, r3, #1
    5a80:	2201      	movs	r2, #1
    5a82:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    5a84:	ac04      	add	r4, sp, #16
    5a86:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    5a88:	4e3c      	ldr	r6, [pc, #240]	; (5b7c <sd_mmc_spi_adtc_start+0x170>)
    5a8a:	2201      	movs	r2, #1
    5a8c:	210f      	movs	r1, #15
    5a8e:	ab02      	add	r3, sp, #8
    5a90:	469c      	mov	ip, r3
    5a92:	4461      	add	r1, ip
    5a94:	0030      	movs	r0, r6
    5a96:	4f3a      	ldr	r7, [pc, #232]	; (5b80 <sd_mmc_spi_adtc_start+0x174>)
    5a98:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    5a9a:	2206      	movs	r2, #6
    5a9c:	0021      	movs	r1, r4
    5a9e:	0030      	movs	r0, r6
    5aa0:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    5aa2:	ab02      	add	r3, sp, #8
    5aa4:	1dd9      	adds	r1, r3, #7
    5aa6:	23ff      	movs	r3, #255	; 0xff
    5aa8:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5aaa:	2201      	movs	r2, #1
    5aac:	0030      	movs	r0, r6
    5aae:	4e35      	ldr	r6, [pc, #212]	; (5b84 <sd_mmc_spi_adtc_start+0x178>)
    5ab0:	47b0      	blx	r6
    5ab2:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    5ab4:	ab02      	add	r3, sp, #8
    5ab6:	1dde      	adds	r6, r3, #7
    5ab8:	4f30      	ldr	r7, [pc, #192]	; (5b7c <sd_mmc_spi_adtc_start+0x170>)
    5aba:	4d32      	ldr	r5, [pc, #200]	; (5b84 <sd_mmc_spi_adtc_start+0x178>)
    5abc:	23ff      	movs	r3, #255	; 0xff
    5abe:	2201      	movs	r2, #1
    5ac0:	0031      	movs	r1, r6
    5ac2:	0038      	movs	r0, r7
    5ac4:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    5ac6:	7833      	ldrb	r3, [r6, #0]
    5ac8:	b25a      	sxtb	r2, r3
    5aca:	2a00      	cmp	r2, #0
    5acc:	da0b      	bge.n	5ae6 <sd_mmc_spi_adtc_start+0xda>
    5ace:	3c01      	subs	r4, #1
    5ad0:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    5ad2:	2c00      	cmp	r4, #0
    5ad4:	d1f2      	bne.n	5abc <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    5ad6:	2202      	movs	r2, #2
    5ad8:	4b27      	ldr	r3, [pc, #156]	; (5b78 <sd_mmc_spi_adtc_start+0x16c>)
    5ada:	701a      	strb	r2, [r3, #0]
			return false;
    5adc:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    5ade:	b006      	add	sp, #24
    5ae0:	bc04      	pop	{r2}
    5ae2:	4690      	mov	r8, r2
    5ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    5ae6:	4a28      	ldr	r2, [pc, #160]	; (5b88 <sd_mmc_spi_adtc_start+0x17c>)
    5ae8:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    5aea:	071a      	lsls	r2, r3, #28
    5aec:	d41a      	bmi.n	5b24 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    5aee:	075a      	lsls	r2, r3, #29
    5af0:	d41d      	bmi.n	5b2e <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    5af2:	2201      	movs	r2, #1
    5af4:	4393      	bics	r3, r2
    5af6:	d11f      	bne.n	5b38 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    5af8:	4643      	mov	r3, r8
    5afa:	049b      	lsls	r3, r3, #18
    5afc:	d420      	bmi.n	5b40 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    5afe:	4643      	mov	r3, r8
    5b00:	059b      	lsls	r3, r3, #22
    5b02:	d425      	bmi.n	5b50 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    5b04:	4643      	mov	r3, r8
    5b06:	055b      	lsls	r3, r3, #21
    5b08:	d42b      	bmi.n	5b62 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    5b0a:	4b20      	ldr	r3, [pc, #128]	; (5b8c <sd_mmc_spi_adtc_start+0x180>)
    5b0c:	466a      	mov	r2, sp
    5b0e:	8812      	ldrh	r2, [r2, #0]
    5b10:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    5b12:	4b1f      	ldr	r3, [pc, #124]	; (5b90 <sd_mmc_spi_adtc_start+0x184>)
    5b14:	466a      	mov	r2, sp
    5b16:	8892      	ldrh	r2, [r2, #4]
    5b18:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    5b1a:	2200      	movs	r2, #0
    5b1c:	4b1d      	ldr	r3, [pc, #116]	; (5b94 <sd_mmc_spi_adtc_start+0x188>)
    5b1e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    5b20:	2001      	movs	r0, #1
    5b22:	e7dc      	b.n	5ade <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    5b24:	2206      	movs	r2, #6
    5b26:	4b14      	ldr	r3, [pc, #80]	; (5b78 <sd_mmc_spi_adtc_start+0x16c>)
    5b28:	701a      	strb	r2, [r3, #0]
		return false;
    5b2a:	2000      	movs	r0, #0
    5b2c:	e7d7      	b.n	5ade <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    5b2e:	2209      	movs	r2, #9
    5b30:	4b11      	ldr	r3, [pc, #68]	; (5b78 <sd_mmc_spi_adtc_start+0x16c>)
    5b32:	701a      	strb	r2, [r3, #0]
		return false;
    5b34:	2000      	movs	r0, #0
    5b36:	e7d2      	b.n	5ade <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    5b38:	4b0f      	ldr	r3, [pc, #60]	; (5b78 <sd_mmc_spi_adtc_start+0x16c>)
    5b3a:	701a      	strb	r2, [r3, #0]
		return false;
    5b3c:	2000      	movs	r0, #0
    5b3e:	e7ce      	b.n	5ade <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    5b40:	4b15      	ldr	r3, [pc, #84]	; (5b98 <sd_mmc_spi_adtc_start+0x18c>)
    5b42:	4798      	blx	r3
    5b44:	2800      	cmp	r0, #0
    5b46:	d1da      	bne.n	5afe <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    5b48:	2203      	movs	r2, #3
    5b4a:	4b0b      	ldr	r3, [pc, #44]	; (5b78 <sd_mmc_spi_adtc_start+0x16c>)
    5b4c:	701a      	strb	r2, [r3, #0]
			return false;
    5b4e:	e7c6      	b.n	5ade <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    5b50:	490d      	ldr	r1, [pc, #52]	; (5b88 <sd_mmc_spi_adtc_start+0x17c>)
    5b52:	2300      	movs	r3, #0
    5b54:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    5b56:	33ff      	adds	r3, #255	; 0xff
    5b58:	2201      	movs	r2, #1
    5b5a:	4808      	ldr	r0, [pc, #32]	; (5b7c <sd_mmc_spi_adtc_start+0x170>)
    5b5c:	4e09      	ldr	r6, [pc, #36]	; (5b84 <sd_mmc_spi_adtc_start+0x178>)
    5b5e:	47b0      	blx	r6
    5b60:	e7d0      	b.n	5b04 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    5b62:	4e09      	ldr	r6, [pc, #36]	; (5b88 <sd_mmc_spi_adtc_start+0x17c>)
    5b64:	23ff      	movs	r3, #255	; 0xff
    5b66:	2204      	movs	r2, #4
    5b68:	0031      	movs	r1, r6
    5b6a:	4804      	ldr	r0, [pc, #16]	; (5b7c <sd_mmc_spi_adtc_start+0x170>)
    5b6c:	4f05      	ldr	r7, [pc, #20]	; (5b84 <sd_mmc_spi_adtc_start+0x178>)
    5b6e:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    5b70:	6833      	ldr	r3, [r6, #0]
    5b72:	ba1b      	rev	r3, r3
    5b74:	6033      	str	r3, [r6, #0]
    5b76:	e7c8      	b.n	5b0a <sd_mmc_spi_adtc_start+0xfe>
    5b78:	200001ef 	.word	0x200001ef
    5b7c:	200001dc 	.word	0x200001dc
    5b80:	0000530d 	.word	0x0000530d
    5b84:	00005101 	.word	0x00005101
    5b88:	200001f4 	.word	0x200001f4
    5b8c:	200001e8 	.word	0x200001e8
    5b90:	200001f0 	.word	0x200001f0
    5b94:	200001f8 	.word	0x200001f8
    5b98:	000056ad 	.word	0x000056ad

00005b9c <sd_mmc_spi_send_cmd>:
{
    5b9c:	b510      	push	{r4, lr}
    5b9e:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    5ba0:	2300      	movs	r3, #0
    5ba2:	9300      	str	r3, [sp, #0]
    5ba4:	2200      	movs	r2, #0
    5ba6:	4c02      	ldr	r4, [pc, #8]	; (5bb0 <sd_mmc_spi_send_cmd+0x14>)
    5ba8:	47a0      	blx	r4
}
    5baa:	b002      	add	sp, #8
    5bac:	bd10      	pop	{r4, pc}
    5bae:	46c0      	nop			; (mov r8, r8)
    5bb0:	00005a0d 	.word	0x00005a0d

00005bb4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    5bb4:	4b01      	ldr	r3, [pc, #4]	; (5bbc <sd_mmc_spi_get_response+0x8>)
    5bb6:	6818      	ldr	r0, [r3, #0]
}
    5bb8:	4770      	bx	lr
    5bba:	46c0      	nop			; (mov r8, r8)
    5bbc:	200001f4 	.word	0x200001f4

00005bc0 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    5bc0:	b510      	push	{r4, lr}
    5bc2:	b084      	sub	sp, #16
    5bc4:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5bc6:	2200      	movs	r2, #0
    5bc8:	4b14      	ldr	r3, [pc, #80]	; (5c1c <sd_mmc_spi_read_word+0x5c>)
    5bca:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5bcc:	4b14      	ldr	r3, [pc, #80]	; (5c20 <sd_mmc_spi_read_word+0x60>)
    5bce:	8819      	ldrh	r1, [r3, #0]
    5bd0:	4b14      	ldr	r3, [pc, #80]	; (5c24 <sd_mmc_spi_read_word+0x64>)
    5bd2:	6818      	ldr	r0, [r3, #0]
    5bd4:	4b14      	ldr	r3, [pc, #80]	; (5c28 <sd_mmc_spi_read_word+0x68>)
    5bd6:	4798      	blx	r3
    5bd8:	2900      	cmp	r1, #0
    5bda:	d103      	bne.n	5be4 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    5bdc:	4b13      	ldr	r3, [pc, #76]	; (5c2c <sd_mmc_spi_read_word+0x6c>)
    5bde:	4798      	blx	r3
    5be0:	2800      	cmp	r0, #0
    5be2:	d010      	beq.n	5c06 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    5be4:	23ff      	movs	r3, #255	; 0xff
    5be6:	2204      	movs	r2, #4
    5be8:	a901      	add	r1, sp, #4
    5bea:	4811      	ldr	r0, [pc, #68]	; (5c30 <sd_mmc_spi_read_word+0x70>)
    5bec:	4c11      	ldr	r4, [pc, #68]	; (5c34 <sd_mmc_spi_read_word+0x74>)
    5bee:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    5bf0:	4b0c      	ldr	r3, [pc, #48]	; (5c24 <sd_mmc_spi_read_word+0x64>)
    5bf2:	681a      	ldr	r2, [r3, #0]
    5bf4:	1d10      	adds	r0, r2, #4
    5bf6:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5bf8:	4b09      	ldr	r3, [pc, #36]	; (5c20 <sd_mmc_spi_read_word+0x60>)
    5bfa:	8819      	ldrh	r1, [r3, #0]
    5bfc:	4b0a      	ldr	r3, [pc, #40]	; (5c28 <sd_mmc_spi_read_word+0x68>)
    5bfe:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    5c00:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    5c02:	2900      	cmp	r1, #0
    5c04:	d001      	beq.n	5c0a <sd_mmc_spi_read_word+0x4a>
}
    5c06:	b004      	add	sp, #16
    5c08:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5c0a:	23ff      	movs	r3, #255	; 0xff
    5c0c:	2202      	movs	r2, #2
    5c0e:	a903      	add	r1, sp, #12
    5c10:	4807      	ldr	r0, [pc, #28]	; (5c30 <sd_mmc_spi_read_word+0x70>)
    5c12:	4c08      	ldr	r4, [pc, #32]	; (5c34 <sd_mmc_spi_read_word+0x74>)
    5c14:	47a0      	blx	r4
	return true;
    5c16:	2001      	movs	r0, #1
    5c18:	e7f5      	b.n	5c06 <sd_mmc_spi_read_word+0x46>
    5c1a:	46c0      	nop			; (mov r8, r8)
    5c1c:	200001ef 	.word	0x200001ef
    5c20:	200001e8 	.word	0x200001e8
    5c24:	200001f8 	.word	0x200001f8
    5c28:	000064b5 	.word	0x000064b5
    5c2c:	00005789 	.word	0x00005789
    5c30:	200001dc 	.word	0x200001dc
    5c34:	00005101 	.word	0x00005101

00005c38 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    5c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c3a:	46de      	mov	lr, fp
    5c3c:	4657      	mov	r7, sl
    5c3e:	4646      	mov	r6, r8
    5c40:	b5c0      	push	{r6, r7, lr}
    5c42:	b082      	sub	sp, #8
    5c44:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5c46:	2200      	movs	r2, #0
    5c48:	4b17      	ldr	r3, [pc, #92]	; (5ca8 <sd_mmc_spi_start_read_blocks+0x70>)
    5c4a:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    5c4c:	1e4c      	subs	r4, r1, #1
    5c4e:	b2a4      	uxth	r4, r4
    5c50:	2900      	cmp	r1, #0
    5c52:	d026      	beq.n	5ca2 <sd_mmc_spi_start_read_blocks+0x6a>
    5c54:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    5c56:	4b15      	ldr	r3, [pc, #84]	; (5cac <sd_mmc_spi_start_read_blocks+0x74>)
    5c58:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5c5a:	4f15      	ldr	r7, [pc, #84]	; (5cb0 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    5c5c:	47d0      	blx	sl
    5c5e:	4680      	mov	r8, r0
    5c60:	2800      	cmp	r0, #0
    5c62:	d017      	beq.n	5c94 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    5c64:	883a      	ldrh	r2, [r7, #0]
    5c66:	465b      	mov	r3, fp
    5c68:	1999      	adds	r1, r3, r6
    5c6a:	23ff      	movs	r3, #255	; 0xff
    5c6c:	4811      	ldr	r0, [pc, #68]	; (5cb4 <sd_mmc_spi_start_read_blocks+0x7c>)
    5c6e:	4d12      	ldr	r5, [pc, #72]	; (5cb8 <sd_mmc_spi_start_read_blocks+0x80>)
    5c70:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    5c72:	883b      	ldrh	r3, [r7, #0]
    5c74:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5c76:	4a11      	ldr	r2, [pc, #68]	; (5cbc <sd_mmc_spi_start_read_blocks+0x84>)
    5c78:	6811      	ldr	r1, [r2, #0]
    5c7a:	468c      	mov	ip, r1
    5c7c:	4463      	add	r3, ip
    5c7e:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    5c80:	23ff      	movs	r3, #255	; 0xff
    5c82:	2202      	movs	r2, #2
    5c84:	a901      	add	r1, sp, #4
    5c86:	480b      	ldr	r0, [pc, #44]	; (5cb4 <sd_mmc_spi_start_read_blocks+0x7c>)
    5c88:	47a8      	blx	r5
	while (nb_block--) {
    5c8a:	3c01      	subs	r4, #1
    5c8c:	b2a4      	uxth	r4, r4
    5c8e:	4b0c      	ldr	r3, [pc, #48]	; (5cc0 <sd_mmc_spi_start_read_blocks+0x88>)
    5c90:	429c      	cmp	r4, r3
    5c92:	d1e3      	bne.n	5c5c <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    5c94:	4640      	mov	r0, r8
    5c96:	b002      	add	sp, #8
    5c98:	bc1c      	pop	{r2, r3, r4}
    5c9a:	4690      	mov	r8, r2
    5c9c:	469a      	mov	sl, r3
    5c9e:	46a3      	mov	fp, r4
    5ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    5ca2:	2301      	movs	r3, #1
    5ca4:	4698      	mov	r8, r3
    5ca6:	e7f5      	b.n	5c94 <sd_mmc_spi_start_read_blocks+0x5c>
    5ca8:	200001ef 	.word	0x200001ef
    5cac:	00005789 	.word	0x00005789
    5cb0:	200001e8 	.word	0x200001e8
    5cb4:	200001dc 	.word	0x200001dc
    5cb8:	00005101 	.word	0x00005101
    5cbc:	200001f8 	.word	0x200001f8
    5cc0:	0000ffff 	.word	0x0000ffff

00005cc4 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    5cc4:	2001      	movs	r0, #1
    5cc6:	4770      	bx	lr

00005cc8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    5cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cca:	46c6      	mov	lr, r8
    5ccc:	b500      	push	{lr}
    5cce:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    5cd0:	2200      	movs	r2, #0
    5cd2:	4b15      	ldr	r3, [pc, #84]	; (5d28 <sd_mmc_spi_start_write_blocks+0x60>)
    5cd4:	701a      	strb	r2, [r3, #0]
	pos = 0;
    5cd6:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    5cd8:	4f14      	ldr	r7, [pc, #80]	; (5d2c <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5cda:	4e15      	ldr	r6, [pc, #84]	; (5d30 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    5cdc:	e000      	b.n	5ce0 <sd_mmc_spi_start_write_blocks+0x18>
{
    5cde:	0021      	movs	r1, r4
	while (nb_block--) {
    5ce0:	1e4c      	subs	r4, r1, #1
    5ce2:	b2a4      	uxth	r4, r4
    5ce4:	2900      	cmp	r1, #0
    5ce6:	d01b      	beq.n	5d20 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    5ce8:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    5cea:	8832      	ldrh	r2, [r6, #0]
    5cec:	4643      	mov	r3, r8
    5cee:	1959      	adds	r1, r3, r5
    5cf0:	4810      	ldr	r0, [pc, #64]	; (5d34 <sd_mmc_spi_start_write_blocks+0x6c>)
    5cf2:	4b11      	ldr	r3, [pc, #68]	; (5d38 <sd_mmc_spi_start_write_blocks+0x70>)
    5cf4:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    5cf6:	8833      	ldrh	r3, [r6, #0]
    5cf8:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    5cfa:	4a10      	ldr	r2, [pc, #64]	; (5d3c <sd_mmc_spi_start_write_blocks+0x74>)
    5cfc:	6811      	ldr	r1, [r2, #0]
    5cfe:	468c      	mov	ip, r1
    5d00:	4463      	add	r3, ip
    5d02:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    5d04:	4b0e      	ldr	r3, [pc, #56]	; (5d40 <sd_mmc_spi_start_write_blocks+0x78>)
    5d06:	4798      	blx	r3
    5d08:	2800      	cmp	r0, #0
    5d0a:	d00a      	beq.n	5d22 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    5d0c:	2c00      	cmp	r4, #0
    5d0e:	d0e6      	beq.n	5cde <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    5d10:	4b0c      	ldr	r3, [pc, #48]	; (5d44 <sd_mmc_spi_start_write_blocks+0x7c>)
    5d12:	4798      	blx	r3
    5d14:	2800      	cmp	r0, #0
    5d16:	d1e2      	bne.n	5cde <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5d18:	2205      	movs	r2, #5
    5d1a:	4b03      	ldr	r3, [pc, #12]	; (5d28 <sd_mmc_spi_start_write_blocks+0x60>)
    5d1c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    5d1e:	e000      	b.n	5d22 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    5d20:	2001      	movs	r0, #1
}
    5d22:	bc04      	pop	{r2}
    5d24:	4690      	mov	r8, r2
    5d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d28:	200001ef 	.word	0x200001ef
    5d2c:	00005665 	.word	0x00005665
    5d30:	200001e8 	.word	0x200001e8
    5d34:	200001dc 	.word	0x200001dc
    5d38:	0000530d 	.word	0x0000530d
    5d3c:	200001f8 	.word	0x200001f8
    5d40:	000057f5 	.word	0x000057f5
    5d44:	000056ad 	.word	0x000056ad

00005d48 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    5d48:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    5d4a:	4b05      	ldr	r3, [pc, #20]	; (5d60 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    5d4c:	4798      	blx	r3
    5d4e:	2800      	cmp	r0, #0
    5d50:	d103      	bne.n	5d5a <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    5d52:	2205      	movs	r2, #5
    5d54:	4b03      	ldr	r3, [pc, #12]	; (5d64 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    5d56:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    5d58:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    5d5a:	4b03      	ldr	r3, [pc, #12]	; (5d68 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    5d5c:	4798      	blx	r3
    5d5e:	e7fb      	b.n	5d58 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    5d60:	000056ad 	.word	0x000056ad
    5d64:	200001ef 	.word	0x200001ef
    5d68:	00005711 	.word	0x00005711

00005d6c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    5d6c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    5d6e:	2301      	movs	r3, #1
    5d70:	2800      	cmp	r0, #0
    5d72:	d001      	beq.n	5d78 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    5d74:	0018      	movs	r0, r3
    5d76:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    5d78:	4b01      	ldr	r3, [pc, #4]	; (5d80 <mem_test_unit_ready+0x14>)
    5d7a:	4798      	blx	r3
    5d7c:	0003      	movs	r3, r0
    5d7e:	e7f9      	b.n	5d74 <mem_test_unit_ready+0x8>
    5d80:	00005565 	.word	0x00005565

00005d84 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    5d84:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    5d86:	2301      	movs	r3, #1
    5d88:	2800      	cmp	r0, #0
    5d8a:	d001      	beq.n	5d90 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    5d8c:	0018      	movs	r0, r3
    5d8e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    5d90:	0008      	movs	r0, r1
    5d92:	4b02      	ldr	r3, [pc, #8]	; (5d9c <mem_read_capacity+0x18>)
    5d94:	4798      	blx	r3
    5d96:	0003      	movs	r3, r0
    5d98:	e7f8      	b.n	5d8c <mem_read_capacity+0x8>
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	00005595 	.word	0x00005595

00005da0 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    5da0:	4243      	negs	r3, r0
    5da2:	4158      	adcs	r0, r3
    5da4:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    5da6:	4770      	bx	lr

00005da8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    5da8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    5daa:	2301      	movs	r3, #1
    5dac:	2800      	cmp	r0, #0
    5dae:	d001      	beq.n	5db4 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    5db0:	0018      	movs	r0, r3
    5db2:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    5db4:	4b01      	ldr	r3, [pc, #4]	; (5dbc <mem_wr_protect+0x14>)
    5db6:	4798      	blx	r3
    5db8:	0003      	movs	r3, r0
    5dba:	e7f9      	b.n	5db0 <mem_wr_protect+0x8>
    5dbc:	000055a5 	.word	0x000055a5

00005dc0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    5dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dc2:	0005      	movs	r5, r0
    5dc4:	000e      	movs	r6, r1
    5dc6:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    5dc8:	4b07      	ldr	r3, [pc, #28]	; (5de8 <memory_2_ram+0x28>)
    5dca:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    5dcc:	2401      	movs	r4, #1
    5dce:	2d00      	cmp	r5, #0
    5dd0:	d003      	beq.n	5dda <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    5dd2:	4b06      	ldr	r3, [pc, #24]	; (5dec <memory_2_ram+0x2c>)
    5dd4:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    5dd6:	0020      	movs	r0, r4
    5dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    5dda:	0039      	movs	r1, r7
    5ddc:	0030      	movs	r0, r6
    5dde:	4b04      	ldr	r3, [pc, #16]	; (5df0 <memory_2_ram+0x30>)
    5de0:	4798      	blx	r3
    5de2:	0004      	movs	r4, r0
    5de4:	e7f5      	b.n	5dd2 <memory_2_ram+0x12>
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	00004365 	.word	0x00004365
    5dec:	00004367 	.word	0x00004367
    5df0:	000055f9 	.word	0x000055f9

00005df4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    5df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5df6:	0005      	movs	r5, r0
    5df8:	000e      	movs	r6, r1
    5dfa:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    5dfc:	4b07      	ldr	r3, [pc, #28]	; (5e1c <ram_2_memory+0x28>)
    5dfe:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    5e00:	2401      	movs	r4, #1
    5e02:	2d00      	cmp	r5, #0
    5e04:	d003      	beq.n	5e0e <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    5e06:	4b06      	ldr	r3, [pc, #24]	; (5e20 <ram_2_memory+0x2c>)
    5e08:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    5e0a:	0020      	movs	r0, r4
    5e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    5e0e:	0039      	movs	r1, r7
    5e10:	0030      	movs	r0, r6
    5e12:	4b04      	ldr	r3, [pc, #16]	; (5e24 <ram_2_memory+0x30>)
    5e14:	4798      	blx	r3
    5e16:	0004      	movs	r4, r0
    5e18:	e7f5      	b.n	5e06 <ram_2_memory+0x12>
    5e1a:	46c0      	nop			; (mov r8, r8)
    5e1c:	00004369 	.word	0x00004369
    5e20:	0000436b 	.word	0x0000436b
    5e24:	00005651 	.word	0x00005651

00005e28 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    5e28:	4b0c      	ldr	r3, [pc, #48]	; (5e5c <cpu_irq_enter_critical+0x34>)
    5e2a:	681b      	ldr	r3, [r3, #0]
    5e2c:	2b00      	cmp	r3, #0
    5e2e:	d106      	bne.n	5e3e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5e30:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5e34:	2b00      	cmp	r3, #0
    5e36:	d007      	beq.n	5e48 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5e38:	2200      	movs	r2, #0
    5e3a:	4b09      	ldr	r3, [pc, #36]	; (5e60 <cpu_irq_enter_critical+0x38>)
    5e3c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5e3e:	4a07      	ldr	r2, [pc, #28]	; (5e5c <cpu_irq_enter_critical+0x34>)
    5e40:	6813      	ldr	r3, [r2, #0]
    5e42:	3301      	adds	r3, #1
    5e44:	6013      	str	r3, [r2, #0]
}
    5e46:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    5e48:	b672      	cpsid	i
    5e4a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5e4e:	2200      	movs	r2, #0
    5e50:	4b04      	ldr	r3, [pc, #16]	; (5e64 <cpu_irq_enter_critical+0x3c>)
    5e52:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5e54:	3201      	adds	r2, #1
    5e56:	4b02      	ldr	r3, [pc, #8]	; (5e60 <cpu_irq_enter_critical+0x38>)
    5e58:	701a      	strb	r2, [r3, #0]
    5e5a:	e7f0      	b.n	5e3e <cpu_irq_enter_critical+0x16>
    5e5c:	20000200 	.word	0x20000200
    5e60:	20000204 	.word	0x20000204
    5e64:	20000069 	.word	0x20000069

00005e68 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5e68:	4b08      	ldr	r3, [pc, #32]	; (5e8c <cpu_irq_leave_critical+0x24>)
    5e6a:	681a      	ldr	r2, [r3, #0]
    5e6c:	3a01      	subs	r2, #1
    5e6e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	2b00      	cmp	r3, #0
    5e74:	d109      	bne.n	5e8a <cpu_irq_leave_critical+0x22>
    5e76:	4b06      	ldr	r3, [pc, #24]	; (5e90 <cpu_irq_leave_critical+0x28>)
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d005      	beq.n	5e8a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5e7e:	2201      	movs	r2, #1
    5e80:	4b04      	ldr	r3, [pc, #16]	; (5e94 <cpu_irq_leave_critical+0x2c>)
    5e82:	701a      	strb	r2, [r3, #0]
    5e84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5e88:	b662      	cpsie	i
	}
}
    5e8a:	4770      	bx	lr
    5e8c:	20000200 	.word	0x20000200
    5e90:	20000204 	.word	0x20000204
    5e94:	20000069 	.word	0x20000069

00005e98 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e9a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    5e9c:	ac01      	add	r4, sp, #4
    5e9e:	2501      	movs	r5, #1
    5ea0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    5ea2:	2700      	movs	r7, #0
    5ea4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5ea6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5ea8:	0021      	movs	r1, r4
    5eaa:	203e      	movs	r0, #62	; 0x3e
    5eac:	4e06      	ldr	r6, [pc, #24]	; (5ec8 <system_board_init+0x30>)
    5eae:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    5eb0:	2280      	movs	r2, #128	; 0x80
    5eb2:	05d2      	lsls	r2, r2, #23
    5eb4:	4b05      	ldr	r3, [pc, #20]	; (5ecc <system_board_init+0x34>)
    5eb6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5eb8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5eba:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5ebc:	0021      	movs	r1, r4
    5ebe:	200f      	movs	r0, #15
    5ec0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    5ec2:	b003      	add	sp, #12
    5ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ec6:	46c0      	nop			; (mov r8, r8)
    5ec8:	00005ed1 	.word	0x00005ed1
    5ecc:	41004480 	.word	0x41004480

00005ed0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    5ed0:	b500      	push	{lr}
    5ed2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5ed4:	ab01      	add	r3, sp, #4
    5ed6:	2280      	movs	r2, #128	; 0x80
    5ed8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    5eda:	780a      	ldrb	r2, [r1, #0]
    5edc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    5ede:	784a      	ldrb	r2, [r1, #1]
    5ee0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    5ee2:	788a      	ldrb	r2, [r1, #2]
    5ee4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    5ee6:	0019      	movs	r1, r3
    5ee8:	4b01      	ldr	r3, [pc, #4]	; (5ef0 <port_pin_set_config+0x20>)
    5eea:	4798      	blx	r3
}
    5eec:	b003      	add	sp, #12
    5eee:	bd00      	pop	{pc}
    5ef0:	00006225 	.word	0x00006225

00005ef4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5ef4:	4a06      	ldr	r2, [pc, #24]	; (5f10 <system_gclk_init+0x1c>)
    5ef6:	6993      	ldr	r3, [r2, #24]
    5ef8:	2108      	movs	r1, #8
    5efa:	430b      	orrs	r3, r1
    5efc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5efe:	2201      	movs	r2, #1
    5f00:	4b04      	ldr	r3, [pc, #16]	; (5f14 <system_gclk_init+0x20>)
    5f02:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5f04:	0019      	movs	r1, r3
    5f06:	780b      	ldrb	r3, [r1, #0]
    5f08:	4213      	tst	r3, r2
    5f0a:	d1fc      	bne.n	5f06 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5f0c:	4770      	bx	lr
    5f0e:	46c0      	nop			; (mov r8, r8)
    5f10:	40000400 	.word	0x40000400
    5f14:	40000c00 	.word	0x40000c00

00005f18 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5f18:	b570      	push	{r4, r5, r6, lr}
    5f1a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5f1c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5f1e:	780d      	ldrb	r5, [r1, #0]
    5f20:	022d      	lsls	r5, r5, #8
    5f22:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5f24:	784b      	ldrb	r3, [r1, #1]
    5f26:	2b00      	cmp	r3, #0
    5f28:	d002      	beq.n	5f30 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5f2a:	2380      	movs	r3, #128	; 0x80
    5f2c:	02db      	lsls	r3, r3, #11
    5f2e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5f30:	7a4b      	ldrb	r3, [r1, #9]
    5f32:	2b00      	cmp	r3, #0
    5f34:	d002      	beq.n	5f3c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5f36:	2380      	movs	r3, #128	; 0x80
    5f38:	031b      	lsls	r3, r3, #12
    5f3a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5f3c:	6848      	ldr	r0, [r1, #4]
    5f3e:	2801      	cmp	r0, #1
    5f40:	d910      	bls.n	5f64 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5f42:	1e43      	subs	r3, r0, #1
    5f44:	4218      	tst	r0, r3
    5f46:	d134      	bne.n	5fb2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5f48:	2802      	cmp	r0, #2
    5f4a:	d930      	bls.n	5fae <system_gclk_gen_set_config+0x96>
    5f4c:	2302      	movs	r3, #2
    5f4e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5f50:	3201      	adds	r2, #1
						mask <<= 1) {
    5f52:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5f54:	4298      	cmp	r0, r3
    5f56:	d8fb      	bhi.n	5f50 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5f58:	0212      	lsls	r2, r2, #8
    5f5a:	4332      	orrs	r2, r6
    5f5c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5f5e:	2380      	movs	r3, #128	; 0x80
    5f60:	035b      	lsls	r3, r3, #13
    5f62:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5f64:	7a0b      	ldrb	r3, [r1, #8]
    5f66:	2b00      	cmp	r3, #0
    5f68:	d002      	beq.n	5f70 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5f6a:	2380      	movs	r3, #128	; 0x80
    5f6c:	039b      	lsls	r3, r3, #14
    5f6e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f70:	4a13      	ldr	r2, [pc, #76]	; (5fc0 <system_gclk_gen_set_config+0xa8>)
    5f72:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5f74:	b25b      	sxtb	r3, r3
    5f76:	2b00      	cmp	r3, #0
    5f78:	dbfb      	blt.n	5f72 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5f7a:	4b12      	ldr	r3, [pc, #72]	; (5fc4 <system_gclk_gen_set_config+0xac>)
    5f7c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5f7e:	4b12      	ldr	r3, [pc, #72]	; (5fc8 <system_gclk_gen_set_config+0xb0>)
    5f80:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f82:	4a0f      	ldr	r2, [pc, #60]	; (5fc0 <system_gclk_gen_set_config+0xa8>)
    5f84:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5f86:	b25b      	sxtb	r3, r3
    5f88:	2b00      	cmp	r3, #0
    5f8a:	dbfb      	blt.n	5f84 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5f8c:	4b0c      	ldr	r3, [pc, #48]	; (5fc0 <system_gclk_gen_set_config+0xa8>)
    5f8e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f90:	001a      	movs	r2, r3
    5f92:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5f94:	b25b      	sxtb	r3, r3
    5f96:	2b00      	cmp	r3, #0
    5f98:	dbfb      	blt.n	5f92 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5f9a:	4a09      	ldr	r2, [pc, #36]	; (5fc0 <system_gclk_gen_set_config+0xa8>)
    5f9c:	6853      	ldr	r3, [r2, #4]
    5f9e:	2180      	movs	r1, #128	; 0x80
    5fa0:	0249      	lsls	r1, r1, #9
    5fa2:	400b      	ands	r3, r1
    5fa4:	431d      	orrs	r5, r3
    5fa6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5fa8:	4b08      	ldr	r3, [pc, #32]	; (5fcc <system_gclk_gen_set_config+0xb4>)
    5faa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5fac:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5fae:	2200      	movs	r2, #0
    5fb0:	e7d2      	b.n	5f58 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5fb2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5fb4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5fb6:	2380      	movs	r3, #128	; 0x80
    5fb8:	029b      	lsls	r3, r3, #10
    5fba:	431d      	orrs	r5, r3
    5fbc:	e7d2      	b.n	5f64 <system_gclk_gen_set_config+0x4c>
    5fbe:	46c0      	nop			; (mov r8, r8)
    5fc0:	40000c00 	.word	0x40000c00
    5fc4:	00005e29 	.word	0x00005e29
    5fc8:	40000c08 	.word	0x40000c08
    5fcc:	00005e69 	.word	0x00005e69

00005fd0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5fd0:	b510      	push	{r4, lr}
    5fd2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5fd4:	4a0b      	ldr	r2, [pc, #44]	; (6004 <system_gclk_gen_enable+0x34>)
    5fd6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5fd8:	b25b      	sxtb	r3, r3
    5fda:	2b00      	cmp	r3, #0
    5fdc:	dbfb      	blt.n	5fd6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5fde:	4b0a      	ldr	r3, [pc, #40]	; (6008 <system_gclk_gen_enable+0x38>)
    5fe0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5fe2:	4b0a      	ldr	r3, [pc, #40]	; (600c <system_gclk_gen_enable+0x3c>)
    5fe4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5fe6:	4a07      	ldr	r2, [pc, #28]	; (6004 <system_gclk_gen_enable+0x34>)
    5fe8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5fea:	b25b      	sxtb	r3, r3
    5fec:	2b00      	cmp	r3, #0
    5fee:	dbfb      	blt.n	5fe8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5ff0:	4a04      	ldr	r2, [pc, #16]	; (6004 <system_gclk_gen_enable+0x34>)
    5ff2:	6851      	ldr	r1, [r2, #4]
    5ff4:	2380      	movs	r3, #128	; 0x80
    5ff6:	025b      	lsls	r3, r3, #9
    5ff8:	430b      	orrs	r3, r1
    5ffa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5ffc:	4b04      	ldr	r3, [pc, #16]	; (6010 <system_gclk_gen_enable+0x40>)
    5ffe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6000:	bd10      	pop	{r4, pc}
    6002:	46c0      	nop			; (mov r8, r8)
    6004:	40000c00 	.word	0x40000c00
    6008:	00005e29 	.word	0x00005e29
    600c:	40000c04 	.word	0x40000c04
    6010:	00005e69 	.word	0x00005e69

00006014 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6014:	b570      	push	{r4, r5, r6, lr}
    6016:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6018:	4a1a      	ldr	r2, [pc, #104]	; (6084 <system_gclk_gen_get_hz+0x70>)
    601a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    601c:	b25b      	sxtb	r3, r3
    601e:	2b00      	cmp	r3, #0
    6020:	dbfb      	blt.n	601a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    6022:	4b19      	ldr	r3, [pc, #100]	; (6088 <system_gclk_gen_get_hz+0x74>)
    6024:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6026:	4b19      	ldr	r3, [pc, #100]	; (608c <system_gclk_gen_get_hz+0x78>)
    6028:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    602a:	4a16      	ldr	r2, [pc, #88]	; (6084 <system_gclk_gen_get_hz+0x70>)
    602c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    602e:	b25b      	sxtb	r3, r3
    6030:	2b00      	cmp	r3, #0
    6032:	dbfb      	blt.n	602c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6034:	4e13      	ldr	r6, [pc, #76]	; (6084 <system_gclk_gen_get_hz+0x70>)
    6036:	6870      	ldr	r0, [r6, #4]
    6038:	04c0      	lsls	r0, r0, #19
    603a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    603c:	4b14      	ldr	r3, [pc, #80]	; (6090 <system_gclk_gen_get_hz+0x7c>)
    603e:	4798      	blx	r3
    6040:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6042:	4b12      	ldr	r3, [pc, #72]	; (608c <system_gclk_gen_get_hz+0x78>)
    6044:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6046:	6876      	ldr	r6, [r6, #4]
    6048:	02f6      	lsls	r6, r6, #11
    604a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    604c:	4b11      	ldr	r3, [pc, #68]	; (6094 <system_gclk_gen_get_hz+0x80>)
    604e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6050:	4a0c      	ldr	r2, [pc, #48]	; (6084 <system_gclk_gen_get_hz+0x70>)
    6052:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6054:	b25b      	sxtb	r3, r3
    6056:	2b00      	cmp	r3, #0
    6058:	dbfb      	blt.n	6052 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    605a:	4b0a      	ldr	r3, [pc, #40]	; (6084 <system_gclk_gen_get_hz+0x70>)
    605c:	689c      	ldr	r4, [r3, #8]
    605e:	0224      	lsls	r4, r4, #8
    6060:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6062:	4b0d      	ldr	r3, [pc, #52]	; (6098 <system_gclk_gen_get_hz+0x84>)
    6064:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6066:	2e00      	cmp	r6, #0
    6068:	d107      	bne.n	607a <system_gclk_gen_get_hz+0x66>
    606a:	2c01      	cmp	r4, #1
    606c:	d907      	bls.n	607e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    606e:	0021      	movs	r1, r4
    6070:	0028      	movs	r0, r5
    6072:	4b0a      	ldr	r3, [pc, #40]	; (609c <system_gclk_gen_get_hz+0x88>)
    6074:	4798      	blx	r3
    6076:	0005      	movs	r5, r0
    6078:	e001      	b.n	607e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    607a:	3401      	adds	r4, #1
    607c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    607e:	0028      	movs	r0, r5
    6080:	bd70      	pop	{r4, r5, r6, pc}
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	40000c00 	.word	0x40000c00
    6088:	00005e29 	.word	0x00005e29
    608c:	40000c04 	.word	0x40000c04
    6090:	000018cd 	.word	0x000018cd
    6094:	40000c08 	.word	0x40000c08
    6098:	00005e69 	.word	0x00005e69
    609c:	000063a9 	.word	0x000063a9

000060a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    60a0:	b510      	push	{r4, lr}
    60a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    60a4:	4b06      	ldr	r3, [pc, #24]	; (60c0 <system_gclk_chan_enable+0x20>)
    60a6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60a8:	4b06      	ldr	r3, [pc, #24]	; (60c4 <system_gclk_chan_enable+0x24>)
    60aa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    60ac:	4a06      	ldr	r2, [pc, #24]	; (60c8 <system_gclk_chan_enable+0x28>)
    60ae:	8853      	ldrh	r3, [r2, #2]
    60b0:	2180      	movs	r1, #128	; 0x80
    60b2:	01c9      	lsls	r1, r1, #7
    60b4:	430b      	orrs	r3, r1
    60b6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    60b8:	4b04      	ldr	r3, [pc, #16]	; (60cc <system_gclk_chan_enable+0x2c>)
    60ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    60bc:	bd10      	pop	{r4, pc}
    60be:	46c0      	nop			; (mov r8, r8)
    60c0:	00005e29 	.word	0x00005e29
    60c4:	40000c02 	.word	0x40000c02
    60c8:	40000c00 	.word	0x40000c00
    60cc:	00005e69 	.word	0x00005e69

000060d0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    60d0:	b510      	push	{r4, lr}
    60d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    60d4:	4b0f      	ldr	r3, [pc, #60]	; (6114 <system_gclk_chan_disable+0x44>)
    60d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60d8:	4b0f      	ldr	r3, [pc, #60]	; (6118 <system_gclk_chan_disable+0x48>)
    60da:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    60dc:	4a0f      	ldr	r2, [pc, #60]	; (611c <system_gclk_chan_disable+0x4c>)
    60de:	8853      	ldrh	r3, [r2, #2]
    60e0:	051b      	lsls	r3, r3, #20
    60e2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    60e4:	8853      	ldrh	r3, [r2, #2]
    60e6:	490e      	ldr	r1, [pc, #56]	; (6120 <system_gclk_chan_disable+0x50>)
    60e8:	400b      	ands	r3, r1
    60ea:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    60ec:	8853      	ldrh	r3, [r2, #2]
    60ee:	490d      	ldr	r1, [pc, #52]	; (6124 <system_gclk_chan_disable+0x54>)
    60f0:	400b      	ands	r3, r1
    60f2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    60f4:	0011      	movs	r1, r2
    60f6:	2280      	movs	r2, #128	; 0x80
    60f8:	01d2      	lsls	r2, r2, #7
    60fa:	884b      	ldrh	r3, [r1, #2]
    60fc:	4213      	tst	r3, r2
    60fe:	d1fc      	bne.n	60fa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6100:	4906      	ldr	r1, [pc, #24]	; (611c <system_gclk_chan_disable+0x4c>)
    6102:	884a      	ldrh	r2, [r1, #2]
    6104:	0203      	lsls	r3, r0, #8
    6106:	4806      	ldr	r0, [pc, #24]	; (6120 <system_gclk_chan_disable+0x50>)
    6108:	4002      	ands	r2, r0
    610a:	4313      	orrs	r3, r2
    610c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    610e:	4b06      	ldr	r3, [pc, #24]	; (6128 <system_gclk_chan_disable+0x58>)
    6110:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    6112:	bd10      	pop	{r4, pc}
    6114:	00005e29 	.word	0x00005e29
    6118:	40000c02 	.word	0x40000c02
    611c:	40000c00 	.word	0x40000c00
    6120:	fffff0ff 	.word	0xfffff0ff
    6124:	ffffbfff 	.word	0xffffbfff
    6128:	00005e69 	.word	0x00005e69

0000612c <system_gclk_chan_set_config>:
{
    612c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    612e:	780c      	ldrb	r4, [r1, #0]
    6130:	0224      	lsls	r4, r4, #8
    6132:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    6134:	4b02      	ldr	r3, [pc, #8]	; (6140 <system_gclk_chan_set_config+0x14>)
    6136:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6138:	b2a4      	uxth	r4, r4
    613a:	4b02      	ldr	r3, [pc, #8]	; (6144 <system_gclk_chan_set_config+0x18>)
    613c:	805c      	strh	r4, [r3, #2]
}
    613e:	bd10      	pop	{r4, pc}
    6140:	000060d1 	.word	0x000060d1
    6144:	40000c00 	.word	0x40000c00

00006148 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6148:	b510      	push	{r4, lr}
    614a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    614c:	4b06      	ldr	r3, [pc, #24]	; (6168 <system_gclk_chan_get_hz+0x20>)
    614e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6150:	4b06      	ldr	r3, [pc, #24]	; (616c <system_gclk_chan_get_hz+0x24>)
    6152:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6154:	4b06      	ldr	r3, [pc, #24]	; (6170 <system_gclk_chan_get_hz+0x28>)
    6156:	885c      	ldrh	r4, [r3, #2]
    6158:	0524      	lsls	r4, r4, #20
    615a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    615c:	4b05      	ldr	r3, [pc, #20]	; (6174 <system_gclk_chan_get_hz+0x2c>)
    615e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6160:	0020      	movs	r0, r4
    6162:	4b05      	ldr	r3, [pc, #20]	; (6178 <system_gclk_chan_get_hz+0x30>)
    6164:	4798      	blx	r3
}
    6166:	bd10      	pop	{r4, pc}
    6168:	00005e29 	.word	0x00005e29
    616c:	40000c02 	.word	0x40000c02
    6170:	40000c00 	.word	0x40000c00
    6174:	00005e69 	.word	0x00005e69
    6178:	00006015 	.word	0x00006015

0000617c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    617c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    617e:	78d3      	ldrb	r3, [r2, #3]
    6180:	2b00      	cmp	r3, #0
    6182:	d135      	bne.n	61f0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6184:	7813      	ldrb	r3, [r2, #0]
    6186:	2b80      	cmp	r3, #128	; 0x80
    6188:	d029      	beq.n	61de <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    618a:	061b      	lsls	r3, r3, #24
    618c:	2480      	movs	r4, #128	; 0x80
    618e:	0264      	lsls	r4, r4, #9
    6190:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6192:	7854      	ldrb	r4, [r2, #1]
    6194:	2502      	movs	r5, #2
    6196:	43ac      	bics	r4, r5
    6198:	d106      	bne.n	61a8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    619a:	7894      	ldrb	r4, [r2, #2]
    619c:	2c00      	cmp	r4, #0
    619e:	d120      	bne.n	61e2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    61a0:	2480      	movs	r4, #128	; 0x80
    61a2:	02a4      	lsls	r4, r4, #10
    61a4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    61a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    61a8:	7854      	ldrb	r4, [r2, #1]
    61aa:	3c01      	subs	r4, #1
    61ac:	2c01      	cmp	r4, #1
    61ae:	d91c      	bls.n	61ea <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    61b0:	040d      	lsls	r5, r1, #16
    61b2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    61b4:	24a0      	movs	r4, #160	; 0xa0
    61b6:	05e4      	lsls	r4, r4, #23
    61b8:	432c      	orrs	r4, r5
    61ba:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61bc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    61be:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    61c0:	24d0      	movs	r4, #208	; 0xd0
    61c2:	0624      	lsls	r4, r4, #24
    61c4:	432c      	orrs	r4, r5
    61c6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61c8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    61ca:	78d4      	ldrb	r4, [r2, #3]
    61cc:	2c00      	cmp	r4, #0
    61ce:	d122      	bne.n	6216 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    61d0:	035b      	lsls	r3, r3, #13
    61d2:	d51c      	bpl.n	620e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    61d4:	7893      	ldrb	r3, [r2, #2]
    61d6:	2b01      	cmp	r3, #1
    61d8:	d01e      	beq.n	6218 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    61da:	6141      	str	r1, [r0, #20]
    61dc:	e017      	b.n	620e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    61de:	2300      	movs	r3, #0
    61e0:	e7d7      	b.n	6192 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    61e2:	24c0      	movs	r4, #192	; 0xc0
    61e4:	02e4      	lsls	r4, r4, #11
    61e6:	4323      	orrs	r3, r4
    61e8:	e7dd      	b.n	61a6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    61ea:	4c0d      	ldr	r4, [pc, #52]	; (6220 <_system_pinmux_config+0xa4>)
    61ec:	4023      	ands	r3, r4
    61ee:	e7df      	b.n	61b0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    61f0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    61f2:	040c      	lsls	r4, r1, #16
    61f4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    61f6:	23a0      	movs	r3, #160	; 0xa0
    61f8:	05db      	lsls	r3, r3, #23
    61fa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    61fc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    61fe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6200:	23d0      	movs	r3, #208	; 0xd0
    6202:	061b      	lsls	r3, r3, #24
    6204:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6206:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6208:	78d3      	ldrb	r3, [r2, #3]
    620a:	2b00      	cmp	r3, #0
    620c:	d103      	bne.n	6216 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    620e:	7853      	ldrb	r3, [r2, #1]
    6210:	3b01      	subs	r3, #1
    6212:	2b01      	cmp	r3, #1
    6214:	d902      	bls.n	621c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6216:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6218:	6181      	str	r1, [r0, #24]
    621a:	e7f8      	b.n	620e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    621c:	6081      	str	r1, [r0, #8]
}
    621e:	e7fa      	b.n	6216 <_system_pinmux_config+0x9a>
    6220:	fffbffff 	.word	0xfffbffff

00006224 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6224:	b510      	push	{r4, lr}
    6226:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    6228:	09c1      	lsrs	r1, r0, #7
		return NULL;
    622a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    622c:	2900      	cmp	r1, #0
    622e:	d104      	bne.n	623a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6230:	0943      	lsrs	r3, r0, #5
    6232:	01db      	lsls	r3, r3, #7
    6234:	4905      	ldr	r1, [pc, #20]	; (624c <system_pinmux_pin_set_config+0x28>)
    6236:	468c      	mov	ip, r1
    6238:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    623a:	241f      	movs	r4, #31
    623c:	4020      	ands	r0, r4
    623e:	2101      	movs	r1, #1
    6240:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6242:	0018      	movs	r0, r3
    6244:	4b02      	ldr	r3, [pc, #8]	; (6250 <system_pinmux_pin_set_config+0x2c>)
    6246:	4798      	blx	r3
}
    6248:	bd10      	pop	{r4, pc}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	41004400 	.word	0x41004400
    6250:	0000617d 	.word	0x0000617d

00006254 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6254:	4770      	bx	lr
	...

00006258 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6258:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    625a:	4b05      	ldr	r3, [pc, #20]	; (6270 <system_init+0x18>)
    625c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    625e:	4b05      	ldr	r3, [pc, #20]	; (6274 <system_init+0x1c>)
    6260:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6262:	4b05      	ldr	r3, [pc, #20]	; (6278 <system_init+0x20>)
    6264:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6266:	4b05      	ldr	r3, [pc, #20]	; (627c <system_init+0x24>)
    6268:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    626a:	4b05      	ldr	r3, [pc, #20]	; (6280 <system_init+0x28>)
    626c:	4798      	blx	r3
}
    626e:	bd10      	pop	{r4, pc}
    6270:	00001c01 	.word	0x00001c01
    6274:	00005e99 	.word	0x00005e99
    6278:	00006255 	.word	0x00006255
    627c:	00000e5d 	.word	0x00000e5d
    6280:	00006255 	.word	0x00006255

00006284 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    6284:	4770      	bx	lr
	...

00006288 <Reset_Handler>:
{
    6288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    628a:	4a2a      	ldr	r2, [pc, #168]	; (6334 <Reset_Handler+0xac>)
    628c:	4b2a      	ldr	r3, [pc, #168]	; (6338 <Reset_Handler+0xb0>)
    628e:	429a      	cmp	r2, r3
    6290:	d011      	beq.n	62b6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6292:	001a      	movs	r2, r3
    6294:	4b29      	ldr	r3, [pc, #164]	; (633c <Reset_Handler+0xb4>)
    6296:	429a      	cmp	r2, r3
    6298:	d20d      	bcs.n	62b6 <Reset_Handler+0x2e>
    629a:	4a29      	ldr	r2, [pc, #164]	; (6340 <Reset_Handler+0xb8>)
    629c:	3303      	adds	r3, #3
    629e:	1a9b      	subs	r3, r3, r2
    62a0:	089b      	lsrs	r3, r3, #2
    62a2:	3301      	adds	r3, #1
    62a4:	009b      	lsls	r3, r3, #2
    62a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    62a8:	4823      	ldr	r0, [pc, #140]	; (6338 <Reset_Handler+0xb0>)
    62aa:	4922      	ldr	r1, [pc, #136]	; (6334 <Reset_Handler+0xac>)
    62ac:	588c      	ldr	r4, [r1, r2]
    62ae:	5084      	str	r4, [r0, r2]
    62b0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    62b2:	429a      	cmp	r2, r3
    62b4:	d1fa      	bne.n	62ac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    62b6:	4a23      	ldr	r2, [pc, #140]	; (6344 <Reset_Handler+0xbc>)
    62b8:	4b23      	ldr	r3, [pc, #140]	; (6348 <Reset_Handler+0xc0>)
    62ba:	429a      	cmp	r2, r3
    62bc:	d20a      	bcs.n	62d4 <Reset_Handler+0x4c>
    62be:	43d3      	mvns	r3, r2
    62c0:	4921      	ldr	r1, [pc, #132]	; (6348 <Reset_Handler+0xc0>)
    62c2:	185b      	adds	r3, r3, r1
    62c4:	2103      	movs	r1, #3
    62c6:	438b      	bics	r3, r1
    62c8:	3304      	adds	r3, #4
    62ca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    62cc:	2100      	movs	r1, #0
    62ce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    62d0:	4293      	cmp	r3, r2
    62d2:	d1fc      	bne.n	62ce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    62d4:	4a1d      	ldr	r2, [pc, #116]	; (634c <Reset_Handler+0xc4>)
    62d6:	21ff      	movs	r1, #255	; 0xff
    62d8:	4b1d      	ldr	r3, [pc, #116]	; (6350 <Reset_Handler+0xc8>)
    62da:	438b      	bics	r3, r1
    62dc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    62de:	39fd      	subs	r1, #253	; 0xfd
    62e0:	2390      	movs	r3, #144	; 0x90
    62e2:	005b      	lsls	r3, r3, #1
    62e4:	4a1b      	ldr	r2, [pc, #108]	; (6354 <Reset_Handler+0xcc>)
    62e6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    62e8:	4a1b      	ldr	r2, [pc, #108]	; (6358 <Reset_Handler+0xd0>)
    62ea:	78d3      	ldrb	r3, [r2, #3]
    62ec:	2503      	movs	r5, #3
    62ee:	43ab      	bics	r3, r5
    62f0:	2402      	movs	r4, #2
    62f2:	4323      	orrs	r3, r4
    62f4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    62f6:	78d3      	ldrb	r3, [r2, #3]
    62f8:	270c      	movs	r7, #12
    62fa:	43bb      	bics	r3, r7
    62fc:	2608      	movs	r6, #8
    62fe:	4333      	orrs	r3, r6
    6300:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6302:	4b16      	ldr	r3, [pc, #88]	; (635c <Reset_Handler+0xd4>)
    6304:	7b98      	ldrb	r0, [r3, #14]
    6306:	2230      	movs	r2, #48	; 0x30
    6308:	4390      	bics	r0, r2
    630a:	2220      	movs	r2, #32
    630c:	4310      	orrs	r0, r2
    630e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6310:	7b99      	ldrb	r1, [r3, #14]
    6312:	43b9      	bics	r1, r7
    6314:	4331      	orrs	r1, r6
    6316:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6318:	7b9a      	ldrb	r2, [r3, #14]
    631a:	43aa      	bics	r2, r5
    631c:	4322      	orrs	r2, r4
    631e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6320:	4a0f      	ldr	r2, [pc, #60]	; (6360 <Reset_Handler+0xd8>)
    6322:	6853      	ldr	r3, [r2, #4]
    6324:	2180      	movs	r1, #128	; 0x80
    6326:	430b      	orrs	r3, r1
    6328:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    632a:	4b0e      	ldr	r3, [pc, #56]	; (6364 <Reset_Handler+0xdc>)
    632c:	4798      	blx	r3
        main();
    632e:	4b0e      	ldr	r3, [pc, #56]	; (6368 <Reset_Handler+0xe0>)
    6330:	4798      	blx	r3
    6332:	e7fe      	b.n	6332 <Reset_Handler+0xaa>
    6334:	000081a8 	.word	0x000081a8
    6338:	20000000 	.word	0x20000000
    633c:	200000d0 	.word	0x200000d0
    6340:	20000004 	.word	0x20000004
    6344:	200000d0 	.word	0x200000d0
    6348:	20000b10 	.word	0x20000b10
    634c:	e000ed00 	.word	0xe000ed00
    6350:	00000000 	.word	0x00000000
    6354:	41007000 	.word	0x41007000
    6358:	41005000 	.word	0x41005000
    635c:	41004800 	.word	0x41004800
    6360:	41004000 	.word	0x41004000
    6364:	0000693d 	.word	0x0000693d
    6368:	00003ce9 	.word	0x00003ce9

0000636c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    636c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    636e:	4a06      	ldr	r2, [pc, #24]	; (6388 <_sbrk+0x1c>)
    6370:	6812      	ldr	r2, [r2, #0]
    6372:	2a00      	cmp	r2, #0
    6374:	d004      	beq.n	6380 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6376:	4a04      	ldr	r2, [pc, #16]	; (6388 <_sbrk+0x1c>)
    6378:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    637a:	18c3      	adds	r3, r0, r3
    637c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    637e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6380:	4902      	ldr	r1, [pc, #8]	; (638c <_sbrk+0x20>)
    6382:	4a01      	ldr	r2, [pc, #4]	; (6388 <_sbrk+0x1c>)
    6384:	6011      	str	r1, [r2, #0]
    6386:	e7f6      	b.n	6376 <_sbrk+0xa>
    6388:	20000208 	.word	0x20000208
    638c:	20002b10 	.word	0x20002b10

00006390 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6390:	2001      	movs	r0, #1
    6392:	4240      	negs	r0, r0
    6394:	4770      	bx	lr

00006396 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6396:	2380      	movs	r3, #128	; 0x80
    6398:	019b      	lsls	r3, r3, #6
    639a:	604b      	str	r3, [r1, #4]

	return 0;
}
    639c:	2000      	movs	r0, #0
    639e:	4770      	bx	lr

000063a0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    63a0:	2001      	movs	r0, #1
    63a2:	4770      	bx	lr

000063a4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    63a4:	2000      	movs	r0, #0
    63a6:	4770      	bx	lr

000063a8 <__udivsi3>:
    63a8:	2200      	movs	r2, #0
    63aa:	0843      	lsrs	r3, r0, #1
    63ac:	428b      	cmp	r3, r1
    63ae:	d374      	bcc.n	649a <__udivsi3+0xf2>
    63b0:	0903      	lsrs	r3, r0, #4
    63b2:	428b      	cmp	r3, r1
    63b4:	d35f      	bcc.n	6476 <__udivsi3+0xce>
    63b6:	0a03      	lsrs	r3, r0, #8
    63b8:	428b      	cmp	r3, r1
    63ba:	d344      	bcc.n	6446 <__udivsi3+0x9e>
    63bc:	0b03      	lsrs	r3, r0, #12
    63be:	428b      	cmp	r3, r1
    63c0:	d328      	bcc.n	6414 <__udivsi3+0x6c>
    63c2:	0c03      	lsrs	r3, r0, #16
    63c4:	428b      	cmp	r3, r1
    63c6:	d30d      	bcc.n	63e4 <__udivsi3+0x3c>
    63c8:	22ff      	movs	r2, #255	; 0xff
    63ca:	0209      	lsls	r1, r1, #8
    63cc:	ba12      	rev	r2, r2
    63ce:	0c03      	lsrs	r3, r0, #16
    63d0:	428b      	cmp	r3, r1
    63d2:	d302      	bcc.n	63da <__udivsi3+0x32>
    63d4:	1212      	asrs	r2, r2, #8
    63d6:	0209      	lsls	r1, r1, #8
    63d8:	d065      	beq.n	64a6 <__udivsi3+0xfe>
    63da:	0b03      	lsrs	r3, r0, #12
    63dc:	428b      	cmp	r3, r1
    63de:	d319      	bcc.n	6414 <__udivsi3+0x6c>
    63e0:	e000      	b.n	63e4 <__udivsi3+0x3c>
    63e2:	0a09      	lsrs	r1, r1, #8
    63e4:	0bc3      	lsrs	r3, r0, #15
    63e6:	428b      	cmp	r3, r1
    63e8:	d301      	bcc.n	63ee <__udivsi3+0x46>
    63ea:	03cb      	lsls	r3, r1, #15
    63ec:	1ac0      	subs	r0, r0, r3
    63ee:	4152      	adcs	r2, r2
    63f0:	0b83      	lsrs	r3, r0, #14
    63f2:	428b      	cmp	r3, r1
    63f4:	d301      	bcc.n	63fa <__udivsi3+0x52>
    63f6:	038b      	lsls	r3, r1, #14
    63f8:	1ac0      	subs	r0, r0, r3
    63fa:	4152      	adcs	r2, r2
    63fc:	0b43      	lsrs	r3, r0, #13
    63fe:	428b      	cmp	r3, r1
    6400:	d301      	bcc.n	6406 <__udivsi3+0x5e>
    6402:	034b      	lsls	r3, r1, #13
    6404:	1ac0      	subs	r0, r0, r3
    6406:	4152      	adcs	r2, r2
    6408:	0b03      	lsrs	r3, r0, #12
    640a:	428b      	cmp	r3, r1
    640c:	d301      	bcc.n	6412 <__udivsi3+0x6a>
    640e:	030b      	lsls	r3, r1, #12
    6410:	1ac0      	subs	r0, r0, r3
    6412:	4152      	adcs	r2, r2
    6414:	0ac3      	lsrs	r3, r0, #11
    6416:	428b      	cmp	r3, r1
    6418:	d301      	bcc.n	641e <__udivsi3+0x76>
    641a:	02cb      	lsls	r3, r1, #11
    641c:	1ac0      	subs	r0, r0, r3
    641e:	4152      	adcs	r2, r2
    6420:	0a83      	lsrs	r3, r0, #10
    6422:	428b      	cmp	r3, r1
    6424:	d301      	bcc.n	642a <__udivsi3+0x82>
    6426:	028b      	lsls	r3, r1, #10
    6428:	1ac0      	subs	r0, r0, r3
    642a:	4152      	adcs	r2, r2
    642c:	0a43      	lsrs	r3, r0, #9
    642e:	428b      	cmp	r3, r1
    6430:	d301      	bcc.n	6436 <__udivsi3+0x8e>
    6432:	024b      	lsls	r3, r1, #9
    6434:	1ac0      	subs	r0, r0, r3
    6436:	4152      	adcs	r2, r2
    6438:	0a03      	lsrs	r3, r0, #8
    643a:	428b      	cmp	r3, r1
    643c:	d301      	bcc.n	6442 <__udivsi3+0x9a>
    643e:	020b      	lsls	r3, r1, #8
    6440:	1ac0      	subs	r0, r0, r3
    6442:	4152      	adcs	r2, r2
    6444:	d2cd      	bcs.n	63e2 <__udivsi3+0x3a>
    6446:	09c3      	lsrs	r3, r0, #7
    6448:	428b      	cmp	r3, r1
    644a:	d301      	bcc.n	6450 <__udivsi3+0xa8>
    644c:	01cb      	lsls	r3, r1, #7
    644e:	1ac0      	subs	r0, r0, r3
    6450:	4152      	adcs	r2, r2
    6452:	0983      	lsrs	r3, r0, #6
    6454:	428b      	cmp	r3, r1
    6456:	d301      	bcc.n	645c <__udivsi3+0xb4>
    6458:	018b      	lsls	r3, r1, #6
    645a:	1ac0      	subs	r0, r0, r3
    645c:	4152      	adcs	r2, r2
    645e:	0943      	lsrs	r3, r0, #5
    6460:	428b      	cmp	r3, r1
    6462:	d301      	bcc.n	6468 <__udivsi3+0xc0>
    6464:	014b      	lsls	r3, r1, #5
    6466:	1ac0      	subs	r0, r0, r3
    6468:	4152      	adcs	r2, r2
    646a:	0903      	lsrs	r3, r0, #4
    646c:	428b      	cmp	r3, r1
    646e:	d301      	bcc.n	6474 <__udivsi3+0xcc>
    6470:	010b      	lsls	r3, r1, #4
    6472:	1ac0      	subs	r0, r0, r3
    6474:	4152      	adcs	r2, r2
    6476:	08c3      	lsrs	r3, r0, #3
    6478:	428b      	cmp	r3, r1
    647a:	d301      	bcc.n	6480 <__udivsi3+0xd8>
    647c:	00cb      	lsls	r3, r1, #3
    647e:	1ac0      	subs	r0, r0, r3
    6480:	4152      	adcs	r2, r2
    6482:	0883      	lsrs	r3, r0, #2
    6484:	428b      	cmp	r3, r1
    6486:	d301      	bcc.n	648c <__udivsi3+0xe4>
    6488:	008b      	lsls	r3, r1, #2
    648a:	1ac0      	subs	r0, r0, r3
    648c:	4152      	adcs	r2, r2
    648e:	0843      	lsrs	r3, r0, #1
    6490:	428b      	cmp	r3, r1
    6492:	d301      	bcc.n	6498 <__udivsi3+0xf0>
    6494:	004b      	lsls	r3, r1, #1
    6496:	1ac0      	subs	r0, r0, r3
    6498:	4152      	adcs	r2, r2
    649a:	1a41      	subs	r1, r0, r1
    649c:	d200      	bcs.n	64a0 <__udivsi3+0xf8>
    649e:	4601      	mov	r1, r0
    64a0:	4152      	adcs	r2, r2
    64a2:	4610      	mov	r0, r2
    64a4:	4770      	bx	lr
    64a6:	e7ff      	b.n	64a8 <__udivsi3+0x100>
    64a8:	b501      	push	{r0, lr}
    64aa:	2000      	movs	r0, #0
    64ac:	f000 f8f0 	bl	6690 <__aeabi_idiv0>
    64b0:	bd02      	pop	{r1, pc}
    64b2:	46c0      	nop			; (mov r8, r8)

000064b4 <__aeabi_uidivmod>:
    64b4:	2900      	cmp	r1, #0
    64b6:	d0f7      	beq.n	64a8 <__udivsi3+0x100>
    64b8:	e776      	b.n	63a8 <__udivsi3>
    64ba:	4770      	bx	lr

000064bc <__divsi3>:
    64bc:	4603      	mov	r3, r0
    64be:	430b      	orrs	r3, r1
    64c0:	d47f      	bmi.n	65c2 <__divsi3+0x106>
    64c2:	2200      	movs	r2, #0
    64c4:	0843      	lsrs	r3, r0, #1
    64c6:	428b      	cmp	r3, r1
    64c8:	d374      	bcc.n	65b4 <__divsi3+0xf8>
    64ca:	0903      	lsrs	r3, r0, #4
    64cc:	428b      	cmp	r3, r1
    64ce:	d35f      	bcc.n	6590 <__divsi3+0xd4>
    64d0:	0a03      	lsrs	r3, r0, #8
    64d2:	428b      	cmp	r3, r1
    64d4:	d344      	bcc.n	6560 <__divsi3+0xa4>
    64d6:	0b03      	lsrs	r3, r0, #12
    64d8:	428b      	cmp	r3, r1
    64da:	d328      	bcc.n	652e <__divsi3+0x72>
    64dc:	0c03      	lsrs	r3, r0, #16
    64de:	428b      	cmp	r3, r1
    64e0:	d30d      	bcc.n	64fe <__divsi3+0x42>
    64e2:	22ff      	movs	r2, #255	; 0xff
    64e4:	0209      	lsls	r1, r1, #8
    64e6:	ba12      	rev	r2, r2
    64e8:	0c03      	lsrs	r3, r0, #16
    64ea:	428b      	cmp	r3, r1
    64ec:	d302      	bcc.n	64f4 <__divsi3+0x38>
    64ee:	1212      	asrs	r2, r2, #8
    64f0:	0209      	lsls	r1, r1, #8
    64f2:	d065      	beq.n	65c0 <__divsi3+0x104>
    64f4:	0b03      	lsrs	r3, r0, #12
    64f6:	428b      	cmp	r3, r1
    64f8:	d319      	bcc.n	652e <__divsi3+0x72>
    64fa:	e000      	b.n	64fe <__divsi3+0x42>
    64fc:	0a09      	lsrs	r1, r1, #8
    64fe:	0bc3      	lsrs	r3, r0, #15
    6500:	428b      	cmp	r3, r1
    6502:	d301      	bcc.n	6508 <__divsi3+0x4c>
    6504:	03cb      	lsls	r3, r1, #15
    6506:	1ac0      	subs	r0, r0, r3
    6508:	4152      	adcs	r2, r2
    650a:	0b83      	lsrs	r3, r0, #14
    650c:	428b      	cmp	r3, r1
    650e:	d301      	bcc.n	6514 <__divsi3+0x58>
    6510:	038b      	lsls	r3, r1, #14
    6512:	1ac0      	subs	r0, r0, r3
    6514:	4152      	adcs	r2, r2
    6516:	0b43      	lsrs	r3, r0, #13
    6518:	428b      	cmp	r3, r1
    651a:	d301      	bcc.n	6520 <__divsi3+0x64>
    651c:	034b      	lsls	r3, r1, #13
    651e:	1ac0      	subs	r0, r0, r3
    6520:	4152      	adcs	r2, r2
    6522:	0b03      	lsrs	r3, r0, #12
    6524:	428b      	cmp	r3, r1
    6526:	d301      	bcc.n	652c <__divsi3+0x70>
    6528:	030b      	lsls	r3, r1, #12
    652a:	1ac0      	subs	r0, r0, r3
    652c:	4152      	adcs	r2, r2
    652e:	0ac3      	lsrs	r3, r0, #11
    6530:	428b      	cmp	r3, r1
    6532:	d301      	bcc.n	6538 <__divsi3+0x7c>
    6534:	02cb      	lsls	r3, r1, #11
    6536:	1ac0      	subs	r0, r0, r3
    6538:	4152      	adcs	r2, r2
    653a:	0a83      	lsrs	r3, r0, #10
    653c:	428b      	cmp	r3, r1
    653e:	d301      	bcc.n	6544 <__divsi3+0x88>
    6540:	028b      	lsls	r3, r1, #10
    6542:	1ac0      	subs	r0, r0, r3
    6544:	4152      	adcs	r2, r2
    6546:	0a43      	lsrs	r3, r0, #9
    6548:	428b      	cmp	r3, r1
    654a:	d301      	bcc.n	6550 <__divsi3+0x94>
    654c:	024b      	lsls	r3, r1, #9
    654e:	1ac0      	subs	r0, r0, r3
    6550:	4152      	adcs	r2, r2
    6552:	0a03      	lsrs	r3, r0, #8
    6554:	428b      	cmp	r3, r1
    6556:	d301      	bcc.n	655c <__divsi3+0xa0>
    6558:	020b      	lsls	r3, r1, #8
    655a:	1ac0      	subs	r0, r0, r3
    655c:	4152      	adcs	r2, r2
    655e:	d2cd      	bcs.n	64fc <__divsi3+0x40>
    6560:	09c3      	lsrs	r3, r0, #7
    6562:	428b      	cmp	r3, r1
    6564:	d301      	bcc.n	656a <__divsi3+0xae>
    6566:	01cb      	lsls	r3, r1, #7
    6568:	1ac0      	subs	r0, r0, r3
    656a:	4152      	adcs	r2, r2
    656c:	0983      	lsrs	r3, r0, #6
    656e:	428b      	cmp	r3, r1
    6570:	d301      	bcc.n	6576 <__divsi3+0xba>
    6572:	018b      	lsls	r3, r1, #6
    6574:	1ac0      	subs	r0, r0, r3
    6576:	4152      	adcs	r2, r2
    6578:	0943      	lsrs	r3, r0, #5
    657a:	428b      	cmp	r3, r1
    657c:	d301      	bcc.n	6582 <__divsi3+0xc6>
    657e:	014b      	lsls	r3, r1, #5
    6580:	1ac0      	subs	r0, r0, r3
    6582:	4152      	adcs	r2, r2
    6584:	0903      	lsrs	r3, r0, #4
    6586:	428b      	cmp	r3, r1
    6588:	d301      	bcc.n	658e <__divsi3+0xd2>
    658a:	010b      	lsls	r3, r1, #4
    658c:	1ac0      	subs	r0, r0, r3
    658e:	4152      	adcs	r2, r2
    6590:	08c3      	lsrs	r3, r0, #3
    6592:	428b      	cmp	r3, r1
    6594:	d301      	bcc.n	659a <__divsi3+0xde>
    6596:	00cb      	lsls	r3, r1, #3
    6598:	1ac0      	subs	r0, r0, r3
    659a:	4152      	adcs	r2, r2
    659c:	0883      	lsrs	r3, r0, #2
    659e:	428b      	cmp	r3, r1
    65a0:	d301      	bcc.n	65a6 <__divsi3+0xea>
    65a2:	008b      	lsls	r3, r1, #2
    65a4:	1ac0      	subs	r0, r0, r3
    65a6:	4152      	adcs	r2, r2
    65a8:	0843      	lsrs	r3, r0, #1
    65aa:	428b      	cmp	r3, r1
    65ac:	d301      	bcc.n	65b2 <__divsi3+0xf6>
    65ae:	004b      	lsls	r3, r1, #1
    65b0:	1ac0      	subs	r0, r0, r3
    65b2:	4152      	adcs	r2, r2
    65b4:	1a41      	subs	r1, r0, r1
    65b6:	d200      	bcs.n	65ba <__divsi3+0xfe>
    65b8:	4601      	mov	r1, r0
    65ba:	4152      	adcs	r2, r2
    65bc:	4610      	mov	r0, r2
    65be:	4770      	bx	lr
    65c0:	e05d      	b.n	667e <__divsi3+0x1c2>
    65c2:	0fca      	lsrs	r2, r1, #31
    65c4:	d000      	beq.n	65c8 <__divsi3+0x10c>
    65c6:	4249      	negs	r1, r1
    65c8:	1003      	asrs	r3, r0, #32
    65ca:	d300      	bcc.n	65ce <__divsi3+0x112>
    65cc:	4240      	negs	r0, r0
    65ce:	4053      	eors	r3, r2
    65d0:	2200      	movs	r2, #0
    65d2:	469c      	mov	ip, r3
    65d4:	0903      	lsrs	r3, r0, #4
    65d6:	428b      	cmp	r3, r1
    65d8:	d32d      	bcc.n	6636 <__divsi3+0x17a>
    65da:	0a03      	lsrs	r3, r0, #8
    65dc:	428b      	cmp	r3, r1
    65de:	d312      	bcc.n	6606 <__divsi3+0x14a>
    65e0:	22fc      	movs	r2, #252	; 0xfc
    65e2:	0189      	lsls	r1, r1, #6
    65e4:	ba12      	rev	r2, r2
    65e6:	0a03      	lsrs	r3, r0, #8
    65e8:	428b      	cmp	r3, r1
    65ea:	d30c      	bcc.n	6606 <__divsi3+0x14a>
    65ec:	0189      	lsls	r1, r1, #6
    65ee:	1192      	asrs	r2, r2, #6
    65f0:	428b      	cmp	r3, r1
    65f2:	d308      	bcc.n	6606 <__divsi3+0x14a>
    65f4:	0189      	lsls	r1, r1, #6
    65f6:	1192      	asrs	r2, r2, #6
    65f8:	428b      	cmp	r3, r1
    65fa:	d304      	bcc.n	6606 <__divsi3+0x14a>
    65fc:	0189      	lsls	r1, r1, #6
    65fe:	d03a      	beq.n	6676 <__divsi3+0x1ba>
    6600:	1192      	asrs	r2, r2, #6
    6602:	e000      	b.n	6606 <__divsi3+0x14a>
    6604:	0989      	lsrs	r1, r1, #6
    6606:	09c3      	lsrs	r3, r0, #7
    6608:	428b      	cmp	r3, r1
    660a:	d301      	bcc.n	6610 <__divsi3+0x154>
    660c:	01cb      	lsls	r3, r1, #7
    660e:	1ac0      	subs	r0, r0, r3
    6610:	4152      	adcs	r2, r2
    6612:	0983      	lsrs	r3, r0, #6
    6614:	428b      	cmp	r3, r1
    6616:	d301      	bcc.n	661c <__divsi3+0x160>
    6618:	018b      	lsls	r3, r1, #6
    661a:	1ac0      	subs	r0, r0, r3
    661c:	4152      	adcs	r2, r2
    661e:	0943      	lsrs	r3, r0, #5
    6620:	428b      	cmp	r3, r1
    6622:	d301      	bcc.n	6628 <__divsi3+0x16c>
    6624:	014b      	lsls	r3, r1, #5
    6626:	1ac0      	subs	r0, r0, r3
    6628:	4152      	adcs	r2, r2
    662a:	0903      	lsrs	r3, r0, #4
    662c:	428b      	cmp	r3, r1
    662e:	d301      	bcc.n	6634 <__divsi3+0x178>
    6630:	010b      	lsls	r3, r1, #4
    6632:	1ac0      	subs	r0, r0, r3
    6634:	4152      	adcs	r2, r2
    6636:	08c3      	lsrs	r3, r0, #3
    6638:	428b      	cmp	r3, r1
    663a:	d301      	bcc.n	6640 <__divsi3+0x184>
    663c:	00cb      	lsls	r3, r1, #3
    663e:	1ac0      	subs	r0, r0, r3
    6640:	4152      	adcs	r2, r2
    6642:	0883      	lsrs	r3, r0, #2
    6644:	428b      	cmp	r3, r1
    6646:	d301      	bcc.n	664c <__divsi3+0x190>
    6648:	008b      	lsls	r3, r1, #2
    664a:	1ac0      	subs	r0, r0, r3
    664c:	4152      	adcs	r2, r2
    664e:	d2d9      	bcs.n	6604 <__divsi3+0x148>
    6650:	0843      	lsrs	r3, r0, #1
    6652:	428b      	cmp	r3, r1
    6654:	d301      	bcc.n	665a <__divsi3+0x19e>
    6656:	004b      	lsls	r3, r1, #1
    6658:	1ac0      	subs	r0, r0, r3
    665a:	4152      	adcs	r2, r2
    665c:	1a41      	subs	r1, r0, r1
    665e:	d200      	bcs.n	6662 <__divsi3+0x1a6>
    6660:	4601      	mov	r1, r0
    6662:	4663      	mov	r3, ip
    6664:	4152      	adcs	r2, r2
    6666:	105b      	asrs	r3, r3, #1
    6668:	4610      	mov	r0, r2
    666a:	d301      	bcc.n	6670 <__divsi3+0x1b4>
    666c:	4240      	negs	r0, r0
    666e:	2b00      	cmp	r3, #0
    6670:	d500      	bpl.n	6674 <__divsi3+0x1b8>
    6672:	4249      	negs	r1, r1
    6674:	4770      	bx	lr
    6676:	4663      	mov	r3, ip
    6678:	105b      	asrs	r3, r3, #1
    667a:	d300      	bcc.n	667e <__divsi3+0x1c2>
    667c:	4240      	negs	r0, r0
    667e:	b501      	push	{r0, lr}
    6680:	2000      	movs	r0, #0
    6682:	f000 f805 	bl	6690 <__aeabi_idiv0>
    6686:	bd02      	pop	{r1, pc}

00006688 <__aeabi_idivmod>:
    6688:	2900      	cmp	r1, #0
    668a:	d0f8      	beq.n	667e <__divsi3+0x1c2>
    668c:	e716      	b.n	64bc <__divsi3>
    668e:	4770      	bx	lr

00006690 <__aeabi_idiv0>:
    6690:	4770      	bx	lr
    6692:	46c0      	nop			; (mov r8, r8)

00006694 <__clzsi2>:
    6694:	211c      	movs	r1, #28
    6696:	2301      	movs	r3, #1
    6698:	041b      	lsls	r3, r3, #16
    669a:	4298      	cmp	r0, r3
    669c:	d301      	bcc.n	66a2 <__clzsi2+0xe>
    669e:	0c00      	lsrs	r0, r0, #16
    66a0:	3910      	subs	r1, #16
    66a2:	0a1b      	lsrs	r3, r3, #8
    66a4:	4298      	cmp	r0, r3
    66a6:	d301      	bcc.n	66ac <__clzsi2+0x18>
    66a8:	0a00      	lsrs	r0, r0, #8
    66aa:	3908      	subs	r1, #8
    66ac:	091b      	lsrs	r3, r3, #4
    66ae:	4298      	cmp	r0, r3
    66b0:	d301      	bcc.n	66b6 <__clzsi2+0x22>
    66b2:	0900      	lsrs	r0, r0, #4
    66b4:	3904      	subs	r1, #4
    66b6:	a202      	add	r2, pc, #8	; (adr r2, 66c0 <__clzsi2+0x2c>)
    66b8:	5c10      	ldrb	r0, [r2, r0]
    66ba:	1840      	adds	r0, r0, r1
    66bc:	4770      	bx	lr
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	02020304 	.word	0x02020304
    66c4:	01010101 	.word	0x01010101
	...

000066d0 <__ctzsi2>:
    66d0:	4241      	negs	r1, r0
    66d2:	4008      	ands	r0, r1
    66d4:	211c      	movs	r1, #28
    66d6:	2301      	movs	r3, #1
    66d8:	041b      	lsls	r3, r3, #16
    66da:	4298      	cmp	r0, r3
    66dc:	d301      	bcc.n	66e2 <__ctzsi2+0x12>
    66de:	0c00      	lsrs	r0, r0, #16
    66e0:	3910      	subs	r1, #16
    66e2:	0a1b      	lsrs	r3, r3, #8
    66e4:	4298      	cmp	r0, r3
    66e6:	d301      	bcc.n	66ec <__ctzsi2+0x1c>
    66e8:	0a00      	lsrs	r0, r0, #8
    66ea:	3908      	subs	r1, #8
    66ec:	091b      	lsrs	r3, r3, #4
    66ee:	4298      	cmp	r0, r3
    66f0:	d301      	bcc.n	66f6 <__ctzsi2+0x26>
    66f2:	0900      	lsrs	r0, r0, #4
    66f4:	3904      	subs	r1, #4
    66f6:	a202      	add	r2, pc, #8	; (adr r2, 6700 <__ctzsi2+0x30>)
    66f8:	5c10      	ldrb	r0, [r2, r0]
    66fa:	1a40      	subs	r0, r0, r1
    66fc:	4770      	bx	lr
    66fe:	46c0      	nop			; (mov r8, r8)
    6700:	1d1d1c1b 	.word	0x1d1d1c1b
    6704:	1e1e1e1e 	.word	0x1e1e1e1e
    6708:	1f1f1f1f 	.word	0x1f1f1f1f
    670c:	1f1f1f1f 	.word	0x1f1f1f1f

00006710 <__aeabi_uldivmod>:
    6710:	2b00      	cmp	r3, #0
    6712:	d111      	bne.n	6738 <__aeabi_uldivmod+0x28>
    6714:	2a00      	cmp	r2, #0
    6716:	d10f      	bne.n	6738 <__aeabi_uldivmod+0x28>
    6718:	2900      	cmp	r1, #0
    671a:	d100      	bne.n	671e <__aeabi_uldivmod+0xe>
    671c:	2800      	cmp	r0, #0
    671e:	d002      	beq.n	6726 <__aeabi_uldivmod+0x16>
    6720:	2100      	movs	r1, #0
    6722:	43c9      	mvns	r1, r1
    6724:	1c08      	adds	r0, r1, #0
    6726:	b407      	push	{r0, r1, r2}
    6728:	4802      	ldr	r0, [pc, #8]	; (6734 <__aeabi_uldivmod+0x24>)
    672a:	a102      	add	r1, pc, #8	; (adr r1, 6734 <__aeabi_uldivmod+0x24>)
    672c:	1840      	adds	r0, r0, r1
    672e:	9002      	str	r0, [sp, #8]
    6730:	bd03      	pop	{r0, r1, pc}
    6732:	46c0      	nop			; (mov r8, r8)
    6734:	ffffff5d 	.word	0xffffff5d
    6738:	b403      	push	{r0, r1}
    673a:	4668      	mov	r0, sp
    673c:	b501      	push	{r0, lr}
    673e:	9802      	ldr	r0, [sp, #8]
    6740:	f000 f830 	bl	67a4 <__udivmoddi4>
    6744:	9b01      	ldr	r3, [sp, #4]
    6746:	469e      	mov	lr, r3
    6748:	b002      	add	sp, #8
    674a:	bc0c      	pop	{r2, r3}
    674c:	4770      	bx	lr
    674e:	46c0      	nop			; (mov r8, r8)

00006750 <__aeabi_lmul>:
    6750:	b5f0      	push	{r4, r5, r6, r7, lr}
    6752:	46ce      	mov	lr, r9
    6754:	4647      	mov	r7, r8
    6756:	0415      	lsls	r5, r2, #16
    6758:	0c2d      	lsrs	r5, r5, #16
    675a:	002e      	movs	r6, r5
    675c:	b580      	push	{r7, lr}
    675e:	0407      	lsls	r7, r0, #16
    6760:	0c14      	lsrs	r4, r2, #16
    6762:	0c3f      	lsrs	r7, r7, #16
    6764:	4699      	mov	r9, r3
    6766:	0c03      	lsrs	r3, r0, #16
    6768:	437e      	muls	r6, r7
    676a:	435d      	muls	r5, r3
    676c:	4367      	muls	r7, r4
    676e:	4363      	muls	r3, r4
    6770:	197f      	adds	r7, r7, r5
    6772:	0c34      	lsrs	r4, r6, #16
    6774:	19e4      	adds	r4, r4, r7
    6776:	469c      	mov	ip, r3
    6778:	42a5      	cmp	r5, r4
    677a:	d903      	bls.n	6784 <__aeabi_lmul+0x34>
    677c:	2380      	movs	r3, #128	; 0x80
    677e:	025b      	lsls	r3, r3, #9
    6780:	4698      	mov	r8, r3
    6782:	44c4      	add	ip, r8
    6784:	464b      	mov	r3, r9
    6786:	4351      	muls	r1, r2
    6788:	4343      	muls	r3, r0
    678a:	0436      	lsls	r6, r6, #16
    678c:	0c36      	lsrs	r6, r6, #16
    678e:	0c25      	lsrs	r5, r4, #16
    6790:	0424      	lsls	r4, r4, #16
    6792:	4465      	add	r5, ip
    6794:	19a4      	adds	r4, r4, r6
    6796:	1859      	adds	r1, r3, r1
    6798:	1949      	adds	r1, r1, r5
    679a:	0020      	movs	r0, r4
    679c:	bc0c      	pop	{r2, r3}
    679e:	4690      	mov	r8, r2
    67a0:	4699      	mov	r9, r3
    67a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000067a4 <__udivmoddi4>:
    67a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67a6:	4657      	mov	r7, sl
    67a8:	464e      	mov	r6, r9
    67aa:	4645      	mov	r5, r8
    67ac:	46de      	mov	lr, fp
    67ae:	b5e0      	push	{r5, r6, r7, lr}
    67b0:	0004      	movs	r4, r0
    67b2:	b083      	sub	sp, #12
    67b4:	000d      	movs	r5, r1
    67b6:	4692      	mov	sl, r2
    67b8:	4699      	mov	r9, r3
    67ba:	428b      	cmp	r3, r1
    67bc:	d82f      	bhi.n	681e <__udivmoddi4+0x7a>
    67be:	d02c      	beq.n	681a <__udivmoddi4+0x76>
    67c0:	4649      	mov	r1, r9
    67c2:	4650      	mov	r0, sl
    67c4:	f000 f8ae 	bl	6924 <__clzdi2>
    67c8:	0029      	movs	r1, r5
    67ca:	0006      	movs	r6, r0
    67cc:	0020      	movs	r0, r4
    67ce:	f000 f8a9 	bl	6924 <__clzdi2>
    67d2:	1a33      	subs	r3, r6, r0
    67d4:	4698      	mov	r8, r3
    67d6:	3b20      	subs	r3, #32
    67d8:	469b      	mov	fp, r3
    67da:	d500      	bpl.n	67de <__udivmoddi4+0x3a>
    67dc:	e074      	b.n	68c8 <__udivmoddi4+0x124>
    67de:	4653      	mov	r3, sl
    67e0:	465a      	mov	r2, fp
    67e2:	4093      	lsls	r3, r2
    67e4:	001f      	movs	r7, r3
    67e6:	4653      	mov	r3, sl
    67e8:	4642      	mov	r2, r8
    67ea:	4093      	lsls	r3, r2
    67ec:	001e      	movs	r6, r3
    67ee:	42af      	cmp	r7, r5
    67f0:	d829      	bhi.n	6846 <__udivmoddi4+0xa2>
    67f2:	d026      	beq.n	6842 <__udivmoddi4+0x9e>
    67f4:	465b      	mov	r3, fp
    67f6:	1ba4      	subs	r4, r4, r6
    67f8:	41bd      	sbcs	r5, r7
    67fa:	2b00      	cmp	r3, #0
    67fc:	da00      	bge.n	6800 <__udivmoddi4+0x5c>
    67fe:	e079      	b.n	68f4 <__udivmoddi4+0x150>
    6800:	2200      	movs	r2, #0
    6802:	2300      	movs	r3, #0
    6804:	9200      	str	r2, [sp, #0]
    6806:	9301      	str	r3, [sp, #4]
    6808:	2301      	movs	r3, #1
    680a:	465a      	mov	r2, fp
    680c:	4093      	lsls	r3, r2
    680e:	9301      	str	r3, [sp, #4]
    6810:	2301      	movs	r3, #1
    6812:	4642      	mov	r2, r8
    6814:	4093      	lsls	r3, r2
    6816:	9300      	str	r3, [sp, #0]
    6818:	e019      	b.n	684e <__udivmoddi4+0xaa>
    681a:	4282      	cmp	r2, r0
    681c:	d9d0      	bls.n	67c0 <__udivmoddi4+0x1c>
    681e:	2200      	movs	r2, #0
    6820:	2300      	movs	r3, #0
    6822:	9200      	str	r2, [sp, #0]
    6824:	9301      	str	r3, [sp, #4]
    6826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6828:	2b00      	cmp	r3, #0
    682a:	d001      	beq.n	6830 <__udivmoddi4+0x8c>
    682c:	601c      	str	r4, [r3, #0]
    682e:	605d      	str	r5, [r3, #4]
    6830:	9800      	ldr	r0, [sp, #0]
    6832:	9901      	ldr	r1, [sp, #4]
    6834:	b003      	add	sp, #12
    6836:	bc3c      	pop	{r2, r3, r4, r5}
    6838:	4690      	mov	r8, r2
    683a:	4699      	mov	r9, r3
    683c:	46a2      	mov	sl, r4
    683e:	46ab      	mov	fp, r5
    6840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6842:	42a3      	cmp	r3, r4
    6844:	d9d6      	bls.n	67f4 <__udivmoddi4+0x50>
    6846:	2200      	movs	r2, #0
    6848:	2300      	movs	r3, #0
    684a:	9200      	str	r2, [sp, #0]
    684c:	9301      	str	r3, [sp, #4]
    684e:	4643      	mov	r3, r8
    6850:	2b00      	cmp	r3, #0
    6852:	d0e8      	beq.n	6826 <__udivmoddi4+0x82>
    6854:	07fb      	lsls	r3, r7, #31
    6856:	0872      	lsrs	r2, r6, #1
    6858:	431a      	orrs	r2, r3
    685a:	4646      	mov	r6, r8
    685c:	087b      	lsrs	r3, r7, #1
    685e:	e00e      	b.n	687e <__udivmoddi4+0xda>
    6860:	42ab      	cmp	r3, r5
    6862:	d101      	bne.n	6868 <__udivmoddi4+0xc4>
    6864:	42a2      	cmp	r2, r4
    6866:	d80c      	bhi.n	6882 <__udivmoddi4+0xde>
    6868:	1aa4      	subs	r4, r4, r2
    686a:	419d      	sbcs	r5, r3
    686c:	2001      	movs	r0, #1
    686e:	1924      	adds	r4, r4, r4
    6870:	416d      	adcs	r5, r5
    6872:	2100      	movs	r1, #0
    6874:	3e01      	subs	r6, #1
    6876:	1824      	adds	r4, r4, r0
    6878:	414d      	adcs	r5, r1
    687a:	2e00      	cmp	r6, #0
    687c:	d006      	beq.n	688c <__udivmoddi4+0xe8>
    687e:	42ab      	cmp	r3, r5
    6880:	d9ee      	bls.n	6860 <__udivmoddi4+0xbc>
    6882:	3e01      	subs	r6, #1
    6884:	1924      	adds	r4, r4, r4
    6886:	416d      	adcs	r5, r5
    6888:	2e00      	cmp	r6, #0
    688a:	d1f8      	bne.n	687e <__udivmoddi4+0xda>
    688c:	465b      	mov	r3, fp
    688e:	9800      	ldr	r0, [sp, #0]
    6890:	9901      	ldr	r1, [sp, #4]
    6892:	1900      	adds	r0, r0, r4
    6894:	4169      	adcs	r1, r5
    6896:	2b00      	cmp	r3, #0
    6898:	db22      	blt.n	68e0 <__udivmoddi4+0x13c>
    689a:	002b      	movs	r3, r5
    689c:	465a      	mov	r2, fp
    689e:	40d3      	lsrs	r3, r2
    68a0:	002a      	movs	r2, r5
    68a2:	4644      	mov	r4, r8
    68a4:	40e2      	lsrs	r2, r4
    68a6:	001c      	movs	r4, r3
    68a8:	465b      	mov	r3, fp
    68aa:	0015      	movs	r5, r2
    68ac:	2b00      	cmp	r3, #0
    68ae:	db2c      	blt.n	690a <__udivmoddi4+0x166>
    68b0:	0026      	movs	r6, r4
    68b2:	409e      	lsls	r6, r3
    68b4:	0033      	movs	r3, r6
    68b6:	0026      	movs	r6, r4
    68b8:	4647      	mov	r7, r8
    68ba:	40be      	lsls	r6, r7
    68bc:	0032      	movs	r2, r6
    68be:	1a80      	subs	r0, r0, r2
    68c0:	4199      	sbcs	r1, r3
    68c2:	9000      	str	r0, [sp, #0]
    68c4:	9101      	str	r1, [sp, #4]
    68c6:	e7ae      	b.n	6826 <__udivmoddi4+0x82>
    68c8:	4642      	mov	r2, r8
    68ca:	2320      	movs	r3, #32
    68cc:	1a9b      	subs	r3, r3, r2
    68ce:	4652      	mov	r2, sl
    68d0:	40da      	lsrs	r2, r3
    68d2:	4641      	mov	r1, r8
    68d4:	0013      	movs	r3, r2
    68d6:	464a      	mov	r2, r9
    68d8:	408a      	lsls	r2, r1
    68da:	0017      	movs	r7, r2
    68dc:	431f      	orrs	r7, r3
    68de:	e782      	b.n	67e6 <__udivmoddi4+0x42>
    68e0:	4642      	mov	r2, r8
    68e2:	2320      	movs	r3, #32
    68e4:	1a9b      	subs	r3, r3, r2
    68e6:	002a      	movs	r2, r5
    68e8:	4646      	mov	r6, r8
    68ea:	409a      	lsls	r2, r3
    68ec:	0023      	movs	r3, r4
    68ee:	40f3      	lsrs	r3, r6
    68f0:	4313      	orrs	r3, r2
    68f2:	e7d5      	b.n	68a0 <__udivmoddi4+0xfc>
    68f4:	4642      	mov	r2, r8
    68f6:	2320      	movs	r3, #32
    68f8:	2100      	movs	r1, #0
    68fa:	1a9b      	subs	r3, r3, r2
    68fc:	2200      	movs	r2, #0
    68fe:	9100      	str	r1, [sp, #0]
    6900:	9201      	str	r2, [sp, #4]
    6902:	2201      	movs	r2, #1
    6904:	40da      	lsrs	r2, r3
    6906:	9201      	str	r2, [sp, #4]
    6908:	e782      	b.n	6810 <__udivmoddi4+0x6c>
    690a:	4642      	mov	r2, r8
    690c:	2320      	movs	r3, #32
    690e:	0026      	movs	r6, r4
    6910:	1a9b      	subs	r3, r3, r2
    6912:	40de      	lsrs	r6, r3
    6914:	002f      	movs	r7, r5
    6916:	46b4      	mov	ip, r6
    6918:	4097      	lsls	r7, r2
    691a:	4666      	mov	r6, ip
    691c:	003b      	movs	r3, r7
    691e:	4333      	orrs	r3, r6
    6920:	e7c9      	b.n	68b6 <__udivmoddi4+0x112>
    6922:	46c0      	nop			; (mov r8, r8)

00006924 <__clzdi2>:
    6924:	b510      	push	{r4, lr}
    6926:	2900      	cmp	r1, #0
    6928:	d103      	bne.n	6932 <__clzdi2+0xe>
    692a:	f7ff feb3 	bl	6694 <__clzsi2>
    692e:	3020      	adds	r0, #32
    6930:	e002      	b.n	6938 <__clzdi2+0x14>
    6932:	1c08      	adds	r0, r1, #0
    6934:	f7ff feae 	bl	6694 <__clzsi2>
    6938:	bd10      	pop	{r4, pc}
    693a:	46c0      	nop			; (mov r8, r8)

0000693c <__libc_init_array>:
    693c:	b570      	push	{r4, r5, r6, lr}
    693e:	2600      	movs	r6, #0
    6940:	4d0c      	ldr	r5, [pc, #48]	; (6974 <__libc_init_array+0x38>)
    6942:	4c0d      	ldr	r4, [pc, #52]	; (6978 <__libc_init_array+0x3c>)
    6944:	1b64      	subs	r4, r4, r5
    6946:	10a4      	asrs	r4, r4, #2
    6948:	42a6      	cmp	r6, r4
    694a:	d109      	bne.n	6960 <__libc_init_array+0x24>
    694c:	2600      	movs	r6, #0
    694e:	f001 fc17 	bl	8180 <_init>
    6952:	4d0a      	ldr	r5, [pc, #40]	; (697c <__libc_init_array+0x40>)
    6954:	4c0a      	ldr	r4, [pc, #40]	; (6980 <__libc_init_array+0x44>)
    6956:	1b64      	subs	r4, r4, r5
    6958:	10a4      	asrs	r4, r4, #2
    695a:	42a6      	cmp	r6, r4
    695c:	d105      	bne.n	696a <__libc_init_array+0x2e>
    695e:	bd70      	pop	{r4, r5, r6, pc}
    6960:	00b3      	lsls	r3, r6, #2
    6962:	58eb      	ldr	r3, [r5, r3]
    6964:	4798      	blx	r3
    6966:	3601      	adds	r6, #1
    6968:	e7ee      	b.n	6948 <__libc_init_array+0xc>
    696a:	00b3      	lsls	r3, r6, #2
    696c:	58eb      	ldr	r3, [r5, r3]
    696e:	4798      	blx	r3
    6970:	3601      	adds	r6, #1
    6972:	e7f2      	b.n	695a <__libc_init_array+0x1e>
    6974:	0000818c 	.word	0x0000818c
    6978:	0000818c 	.word	0x0000818c
    697c:	0000818c 	.word	0x0000818c
    6980:	00008190 	.word	0x00008190

00006984 <memcpy>:
    6984:	2300      	movs	r3, #0
    6986:	b510      	push	{r4, lr}
    6988:	429a      	cmp	r2, r3
    698a:	d100      	bne.n	698e <memcpy+0xa>
    698c:	bd10      	pop	{r4, pc}
    698e:	5ccc      	ldrb	r4, [r1, r3]
    6990:	54c4      	strb	r4, [r0, r3]
    6992:	3301      	adds	r3, #1
    6994:	e7f8      	b.n	6988 <memcpy+0x4>

00006996 <memset>:
    6996:	0003      	movs	r3, r0
    6998:	1882      	adds	r2, r0, r2
    699a:	4293      	cmp	r3, r2
    699c:	d100      	bne.n	69a0 <memset+0xa>
    699e:	4770      	bx	lr
    69a0:	7019      	strb	r1, [r3, #0]
    69a2:	3301      	adds	r3, #1
    69a4:	e7f9      	b.n	699a <memset+0x4>
	...

000069a8 <iprintf>:
    69a8:	b40f      	push	{r0, r1, r2, r3}
    69aa:	4b0b      	ldr	r3, [pc, #44]	; (69d8 <iprintf+0x30>)
    69ac:	b513      	push	{r0, r1, r4, lr}
    69ae:	681c      	ldr	r4, [r3, #0]
    69b0:	2c00      	cmp	r4, #0
    69b2:	d005      	beq.n	69c0 <iprintf+0x18>
    69b4:	69a3      	ldr	r3, [r4, #24]
    69b6:	2b00      	cmp	r3, #0
    69b8:	d102      	bne.n	69c0 <iprintf+0x18>
    69ba:	0020      	movs	r0, r4
    69bc:	f000 f9bc 	bl	6d38 <__sinit>
    69c0:	ab05      	add	r3, sp, #20
    69c2:	9a04      	ldr	r2, [sp, #16]
    69c4:	68a1      	ldr	r1, [r4, #8]
    69c6:	0020      	movs	r0, r4
    69c8:	9301      	str	r3, [sp, #4]
    69ca:	f000 fb91 	bl	70f0 <_vfiprintf_r>
    69ce:	bc16      	pop	{r1, r2, r4}
    69d0:	bc08      	pop	{r3}
    69d2:	b004      	add	sp, #16
    69d4:	4718      	bx	r3
    69d6:	46c0      	nop			; (mov r8, r8)
    69d8:	2000006c 	.word	0x2000006c

000069dc <setbuf>:
    69dc:	424a      	negs	r2, r1
    69de:	414a      	adcs	r2, r1
    69e0:	2380      	movs	r3, #128	; 0x80
    69e2:	b510      	push	{r4, lr}
    69e4:	0052      	lsls	r2, r2, #1
    69e6:	00db      	lsls	r3, r3, #3
    69e8:	f000 f802 	bl	69f0 <setvbuf>
    69ec:	bd10      	pop	{r4, pc}
	...

000069f0 <setvbuf>:
    69f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69f2:	001d      	movs	r5, r3
    69f4:	4b4f      	ldr	r3, [pc, #316]	; (6b34 <setvbuf+0x144>)
    69f6:	b085      	sub	sp, #20
    69f8:	681e      	ldr	r6, [r3, #0]
    69fa:	0004      	movs	r4, r0
    69fc:	000f      	movs	r7, r1
    69fe:	9200      	str	r2, [sp, #0]
    6a00:	2e00      	cmp	r6, #0
    6a02:	d005      	beq.n	6a10 <setvbuf+0x20>
    6a04:	69b3      	ldr	r3, [r6, #24]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d102      	bne.n	6a10 <setvbuf+0x20>
    6a0a:	0030      	movs	r0, r6
    6a0c:	f000 f994 	bl	6d38 <__sinit>
    6a10:	4b49      	ldr	r3, [pc, #292]	; (6b38 <setvbuf+0x148>)
    6a12:	429c      	cmp	r4, r3
    6a14:	d150      	bne.n	6ab8 <setvbuf+0xc8>
    6a16:	6874      	ldr	r4, [r6, #4]
    6a18:	9b00      	ldr	r3, [sp, #0]
    6a1a:	2b02      	cmp	r3, #2
    6a1c:	d005      	beq.n	6a2a <setvbuf+0x3a>
    6a1e:	2b01      	cmp	r3, #1
    6a20:	d900      	bls.n	6a24 <setvbuf+0x34>
    6a22:	e084      	b.n	6b2e <setvbuf+0x13e>
    6a24:	2d00      	cmp	r5, #0
    6a26:	da00      	bge.n	6a2a <setvbuf+0x3a>
    6a28:	e081      	b.n	6b2e <setvbuf+0x13e>
    6a2a:	0021      	movs	r1, r4
    6a2c:	0030      	movs	r0, r6
    6a2e:	f000 f915 	bl	6c5c <_fflush_r>
    6a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6a34:	2900      	cmp	r1, #0
    6a36:	d008      	beq.n	6a4a <setvbuf+0x5a>
    6a38:	0023      	movs	r3, r4
    6a3a:	3344      	adds	r3, #68	; 0x44
    6a3c:	4299      	cmp	r1, r3
    6a3e:	d002      	beq.n	6a46 <setvbuf+0x56>
    6a40:	0030      	movs	r0, r6
    6a42:	f000 fa85 	bl	6f50 <_free_r>
    6a46:	2300      	movs	r3, #0
    6a48:	6363      	str	r3, [r4, #52]	; 0x34
    6a4a:	2300      	movs	r3, #0
    6a4c:	61a3      	str	r3, [r4, #24]
    6a4e:	6063      	str	r3, [r4, #4]
    6a50:	89a3      	ldrh	r3, [r4, #12]
    6a52:	061b      	lsls	r3, r3, #24
    6a54:	d503      	bpl.n	6a5e <setvbuf+0x6e>
    6a56:	6921      	ldr	r1, [r4, #16]
    6a58:	0030      	movs	r0, r6
    6a5a:	f000 fa79 	bl	6f50 <_free_r>
    6a5e:	89a3      	ldrh	r3, [r4, #12]
    6a60:	4a36      	ldr	r2, [pc, #216]	; (6b3c <setvbuf+0x14c>)
    6a62:	4013      	ands	r3, r2
    6a64:	81a3      	strh	r3, [r4, #12]
    6a66:	9b00      	ldr	r3, [sp, #0]
    6a68:	2b02      	cmp	r3, #2
    6a6a:	d05a      	beq.n	6b22 <setvbuf+0x132>
    6a6c:	ab03      	add	r3, sp, #12
    6a6e:	aa02      	add	r2, sp, #8
    6a70:	0021      	movs	r1, r4
    6a72:	0030      	movs	r0, r6
    6a74:	f000 f9f6 	bl	6e64 <__swhatbuf_r>
    6a78:	89a3      	ldrh	r3, [r4, #12]
    6a7a:	4318      	orrs	r0, r3
    6a7c:	81a0      	strh	r0, [r4, #12]
    6a7e:	2d00      	cmp	r5, #0
    6a80:	d124      	bne.n	6acc <setvbuf+0xdc>
    6a82:	9d02      	ldr	r5, [sp, #8]
    6a84:	0028      	movs	r0, r5
    6a86:	f000 fa59 	bl	6f3c <malloc>
    6a8a:	9501      	str	r5, [sp, #4]
    6a8c:	1e07      	subs	r7, r0, #0
    6a8e:	d142      	bne.n	6b16 <setvbuf+0x126>
    6a90:	9b02      	ldr	r3, [sp, #8]
    6a92:	9301      	str	r3, [sp, #4]
    6a94:	42ab      	cmp	r3, r5
    6a96:	d139      	bne.n	6b0c <setvbuf+0x11c>
    6a98:	2001      	movs	r0, #1
    6a9a:	4240      	negs	r0, r0
    6a9c:	2302      	movs	r3, #2
    6a9e:	89a2      	ldrh	r2, [r4, #12]
    6aa0:	4313      	orrs	r3, r2
    6aa2:	81a3      	strh	r3, [r4, #12]
    6aa4:	2300      	movs	r3, #0
    6aa6:	60a3      	str	r3, [r4, #8]
    6aa8:	0023      	movs	r3, r4
    6aaa:	3347      	adds	r3, #71	; 0x47
    6aac:	6023      	str	r3, [r4, #0]
    6aae:	6123      	str	r3, [r4, #16]
    6ab0:	2301      	movs	r3, #1
    6ab2:	6163      	str	r3, [r4, #20]
    6ab4:	b005      	add	sp, #20
    6ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ab8:	4b21      	ldr	r3, [pc, #132]	; (6b40 <setvbuf+0x150>)
    6aba:	429c      	cmp	r4, r3
    6abc:	d101      	bne.n	6ac2 <setvbuf+0xd2>
    6abe:	68b4      	ldr	r4, [r6, #8]
    6ac0:	e7aa      	b.n	6a18 <setvbuf+0x28>
    6ac2:	4b20      	ldr	r3, [pc, #128]	; (6b44 <setvbuf+0x154>)
    6ac4:	429c      	cmp	r4, r3
    6ac6:	d1a7      	bne.n	6a18 <setvbuf+0x28>
    6ac8:	68f4      	ldr	r4, [r6, #12]
    6aca:	e7a5      	b.n	6a18 <setvbuf+0x28>
    6acc:	2f00      	cmp	r7, #0
    6ace:	d0d9      	beq.n	6a84 <setvbuf+0x94>
    6ad0:	69b3      	ldr	r3, [r6, #24]
    6ad2:	2b00      	cmp	r3, #0
    6ad4:	d102      	bne.n	6adc <setvbuf+0xec>
    6ad6:	0030      	movs	r0, r6
    6ad8:	f000 f92e 	bl	6d38 <__sinit>
    6adc:	9b00      	ldr	r3, [sp, #0]
    6ade:	2b01      	cmp	r3, #1
    6ae0:	d103      	bne.n	6aea <setvbuf+0xfa>
    6ae2:	89a3      	ldrh	r3, [r4, #12]
    6ae4:	9a00      	ldr	r2, [sp, #0]
    6ae6:	431a      	orrs	r2, r3
    6ae8:	81a2      	strh	r2, [r4, #12]
    6aea:	2008      	movs	r0, #8
    6aec:	89a3      	ldrh	r3, [r4, #12]
    6aee:	6027      	str	r7, [r4, #0]
    6af0:	6127      	str	r7, [r4, #16]
    6af2:	6165      	str	r5, [r4, #20]
    6af4:	4018      	ands	r0, r3
    6af6:	d018      	beq.n	6b2a <setvbuf+0x13a>
    6af8:	2001      	movs	r0, #1
    6afa:	4018      	ands	r0, r3
    6afc:	2300      	movs	r3, #0
    6afe:	4298      	cmp	r0, r3
    6b00:	d011      	beq.n	6b26 <setvbuf+0x136>
    6b02:	426d      	negs	r5, r5
    6b04:	60a3      	str	r3, [r4, #8]
    6b06:	61a5      	str	r5, [r4, #24]
    6b08:	0018      	movs	r0, r3
    6b0a:	e7d3      	b.n	6ab4 <setvbuf+0xc4>
    6b0c:	9801      	ldr	r0, [sp, #4]
    6b0e:	f000 fa15 	bl	6f3c <malloc>
    6b12:	1e07      	subs	r7, r0, #0
    6b14:	d0c0      	beq.n	6a98 <setvbuf+0xa8>
    6b16:	2380      	movs	r3, #128	; 0x80
    6b18:	89a2      	ldrh	r2, [r4, #12]
    6b1a:	9d01      	ldr	r5, [sp, #4]
    6b1c:	4313      	orrs	r3, r2
    6b1e:	81a3      	strh	r3, [r4, #12]
    6b20:	e7d6      	b.n	6ad0 <setvbuf+0xe0>
    6b22:	2000      	movs	r0, #0
    6b24:	e7ba      	b.n	6a9c <setvbuf+0xac>
    6b26:	60a5      	str	r5, [r4, #8]
    6b28:	e7c4      	b.n	6ab4 <setvbuf+0xc4>
    6b2a:	60a0      	str	r0, [r4, #8]
    6b2c:	e7c2      	b.n	6ab4 <setvbuf+0xc4>
    6b2e:	2001      	movs	r0, #1
    6b30:	4240      	negs	r0, r0
    6b32:	e7bf      	b.n	6ab4 <setvbuf+0xc4>
    6b34:	2000006c 	.word	0x2000006c
    6b38:	0000810c 	.word	0x0000810c
    6b3c:	fffff35c 	.word	0xfffff35c
    6b40:	0000812c 	.word	0x0000812c
    6b44:	000080ec 	.word	0x000080ec

00006b48 <__sflush_r>:
    6b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b4a:	898a      	ldrh	r2, [r1, #12]
    6b4c:	0005      	movs	r5, r0
    6b4e:	000c      	movs	r4, r1
    6b50:	0713      	lsls	r3, r2, #28
    6b52:	d460      	bmi.n	6c16 <__sflush_r+0xce>
    6b54:	684b      	ldr	r3, [r1, #4]
    6b56:	2b00      	cmp	r3, #0
    6b58:	dc04      	bgt.n	6b64 <__sflush_r+0x1c>
    6b5a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6b5c:	2b00      	cmp	r3, #0
    6b5e:	dc01      	bgt.n	6b64 <__sflush_r+0x1c>
    6b60:	2000      	movs	r0, #0
    6b62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6b64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6b66:	2f00      	cmp	r7, #0
    6b68:	d0fa      	beq.n	6b60 <__sflush_r+0x18>
    6b6a:	2300      	movs	r3, #0
    6b6c:	682e      	ldr	r6, [r5, #0]
    6b6e:	602b      	str	r3, [r5, #0]
    6b70:	2380      	movs	r3, #128	; 0x80
    6b72:	015b      	lsls	r3, r3, #5
    6b74:	401a      	ands	r2, r3
    6b76:	d034      	beq.n	6be2 <__sflush_r+0x9a>
    6b78:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6b7a:	89a3      	ldrh	r3, [r4, #12]
    6b7c:	075b      	lsls	r3, r3, #29
    6b7e:	d506      	bpl.n	6b8e <__sflush_r+0x46>
    6b80:	6863      	ldr	r3, [r4, #4]
    6b82:	1ac0      	subs	r0, r0, r3
    6b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6b86:	2b00      	cmp	r3, #0
    6b88:	d001      	beq.n	6b8e <__sflush_r+0x46>
    6b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6b8c:	1ac0      	subs	r0, r0, r3
    6b8e:	0002      	movs	r2, r0
    6b90:	6a21      	ldr	r1, [r4, #32]
    6b92:	2300      	movs	r3, #0
    6b94:	0028      	movs	r0, r5
    6b96:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6b98:	47b8      	blx	r7
    6b9a:	89a1      	ldrh	r1, [r4, #12]
    6b9c:	1c43      	adds	r3, r0, #1
    6b9e:	d106      	bne.n	6bae <__sflush_r+0x66>
    6ba0:	682b      	ldr	r3, [r5, #0]
    6ba2:	2b1d      	cmp	r3, #29
    6ba4:	d831      	bhi.n	6c0a <__sflush_r+0xc2>
    6ba6:	4a2c      	ldr	r2, [pc, #176]	; (6c58 <__sflush_r+0x110>)
    6ba8:	40da      	lsrs	r2, r3
    6baa:	07d3      	lsls	r3, r2, #31
    6bac:	d52d      	bpl.n	6c0a <__sflush_r+0xc2>
    6bae:	2300      	movs	r3, #0
    6bb0:	6063      	str	r3, [r4, #4]
    6bb2:	6923      	ldr	r3, [r4, #16]
    6bb4:	6023      	str	r3, [r4, #0]
    6bb6:	04cb      	lsls	r3, r1, #19
    6bb8:	d505      	bpl.n	6bc6 <__sflush_r+0x7e>
    6bba:	1c43      	adds	r3, r0, #1
    6bbc:	d102      	bne.n	6bc4 <__sflush_r+0x7c>
    6bbe:	682b      	ldr	r3, [r5, #0]
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d100      	bne.n	6bc6 <__sflush_r+0x7e>
    6bc4:	6560      	str	r0, [r4, #84]	; 0x54
    6bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6bc8:	602e      	str	r6, [r5, #0]
    6bca:	2900      	cmp	r1, #0
    6bcc:	d0c8      	beq.n	6b60 <__sflush_r+0x18>
    6bce:	0023      	movs	r3, r4
    6bd0:	3344      	adds	r3, #68	; 0x44
    6bd2:	4299      	cmp	r1, r3
    6bd4:	d002      	beq.n	6bdc <__sflush_r+0x94>
    6bd6:	0028      	movs	r0, r5
    6bd8:	f000 f9ba 	bl	6f50 <_free_r>
    6bdc:	2000      	movs	r0, #0
    6bde:	6360      	str	r0, [r4, #52]	; 0x34
    6be0:	e7bf      	b.n	6b62 <__sflush_r+0x1a>
    6be2:	2301      	movs	r3, #1
    6be4:	6a21      	ldr	r1, [r4, #32]
    6be6:	0028      	movs	r0, r5
    6be8:	47b8      	blx	r7
    6bea:	1c43      	adds	r3, r0, #1
    6bec:	d1c5      	bne.n	6b7a <__sflush_r+0x32>
    6bee:	682b      	ldr	r3, [r5, #0]
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d0c2      	beq.n	6b7a <__sflush_r+0x32>
    6bf4:	2b1d      	cmp	r3, #29
    6bf6:	d001      	beq.n	6bfc <__sflush_r+0xb4>
    6bf8:	2b16      	cmp	r3, #22
    6bfa:	d101      	bne.n	6c00 <__sflush_r+0xb8>
    6bfc:	602e      	str	r6, [r5, #0]
    6bfe:	e7af      	b.n	6b60 <__sflush_r+0x18>
    6c00:	2340      	movs	r3, #64	; 0x40
    6c02:	89a2      	ldrh	r2, [r4, #12]
    6c04:	4313      	orrs	r3, r2
    6c06:	81a3      	strh	r3, [r4, #12]
    6c08:	e7ab      	b.n	6b62 <__sflush_r+0x1a>
    6c0a:	2340      	movs	r3, #64	; 0x40
    6c0c:	430b      	orrs	r3, r1
    6c0e:	2001      	movs	r0, #1
    6c10:	81a3      	strh	r3, [r4, #12]
    6c12:	4240      	negs	r0, r0
    6c14:	e7a5      	b.n	6b62 <__sflush_r+0x1a>
    6c16:	690f      	ldr	r7, [r1, #16]
    6c18:	2f00      	cmp	r7, #0
    6c1a:	d0a1      	beq.n	6b60 <__sflush_r+0x18>
    6c1c:	680b      	ldr	r3, [r1, #0]
    6c1e:	600f      	str	r7, [r1, #0]
    6c20:	1bdb      	subs	r3, r3, r7
    6c22:	9301      	str	r3, [sp, #4]
    6c24:	2300      	movs	r3, #0
    6c26:	0792      	lsls	r2, r2, #30
    6c28:	d100      	bne.n	6c2c <__sflush_r+0xe4>
    6c2a:	694b      	ldr	r3, [r1, #20]
    6c2c:	60a3      	str	r3, [r4, #8]
    6c2e:	9b01      	ldr	r3, [sp, #4]
    6c30:	2b00      	cmp	r3, #0
    6c32:	dc00      	bgt.n	6c36 <__sflush_r+0xee>
    6c34:	e794      	b.n	6b60 <__sflush_r+0x18>
    6c36:	9b01      	ldr	r3, [sp, #4]
    6c38:	003a      	movs	r2, r7
    6c3a:	6a21      	ldr	r1, [r4, #32]
    6c3c:	0028      	movs	r0, r5
    6c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6c40:	47b0      	blx	r6
    6c42:	2800      	cmp	r0, #0
    6c44:	dc03      	bgt.n	6c4e <__sflush_r+0x106>
    6c46:	2340      	movs	r3, #64	; 0x40
    6c48:	89a2      	ldrh	r2, [r4, #12]
    6c4a:	4313      	orrs	r3, r2
    6c4c:	e7df      	b.n	6c0e <__sflush_r+0xc6>
    6c4e:	9b01      	ldr	r3, [sp, #4]
    6c50:	183f      	adds	r7, r7, r0
    6c52:	1a1b      	subs	r3, r3, r0
    6c54:	9301      	str	r3, [sp, #4]
    6c56:	e7ea      	b.n	6c2e <__sflush_r+0xe6>
    6c58:	20400001 	.word	0x20400001

00006c5c <_fflush_r>:
    6c5c:	690b      	ldr	r3, [r1, #16]
    6c5e:	b570      	push	{r4, r5, r6, lr}
    6c60:	0005      	movs	r5, r0
    6c62:	000c      	movs	r4, r1
    6c64:	2b00      	cmp	r3, #0
    6c66:	d101      	bne.n	6c6c <_fflush_r+0x10>
    6c68:	2000      	movs	r0, #0
    6c6a:	bd70      	pop	{r4, r5, r6, pc}
    6c6c:	2800      	cmp	r0, #0
    6c6e:	d004      	beq.n	6c7a <_fflush_r+0x1e>
    6c70:	6983      	ldr	r3, [r0, #24]
    6c72:	2b00      	cmp	r3, #0
    6c74:	d101      	bne.n	6c7a <_fflush_r+0x1e>
    6c76:	f000 f85f 	bl	6d38 <__sinit>
    6c7a:	4b0b      	ldr	r3, [pc, #44]	; (6ca8 <_fflush_r+0x4c>)
    6c7c:	429c      	cmp	r4, r3
    6c7e:	d109      	bne.n	6c94 <_fflush_r+0x38>
    6c80:	686c      	ldr	r4, [r5, #4]
    6c82:	220c      	movs	r2, #12
    6c84:	5ea3      	ldrsh	r3, [r4, r2]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d0ee      	beq.n	6c68 <_fflush_r+0xc>
    6c8a:	0021      	movs	r1, r4
    6c8c:	0028      	movs	r0, r5
    6c8e:	f7ff ff5b 	bl	6b48 <__sflush_r>
    6c92:	e7ea      	b.n	6c6a <_fflush_r+0xe>
    6c94:	4b05      	ldr	r3, [pc, #20]	; (6cac <_fflush_r+0x50>)
    6c96:	429c      	cmp	r4, r3
    6c98:	d101      	bne.n	6c9e <_fflush_r+0x42>
    6c9a:	68ac      	ldr	r4, [r5, #8]
    6c9c:	e7f1      	b.n	6c82 <_fflush_r+0x26>
    6c9e:	4b04      	ldr	r3, [pc, #16]	; (6cb0 <_fflush_r+0x54>)
    6ca0:	429c      	cmp	r4, r3
    6ca2:	d1ee      	bne.n	6c82 <_fflush_r+0x26>
    6ca4:	68ec      	ldr	r4, [r5, #12]
    6ca6:	e7ec      	b.n	6c82 <_fflush_r+0x26>
    6ca8:	0000810c 	.word	0x0000810c
    6cac:	0000812c 	.word	0x0000812c
    6cb0:	000080ec 	.word	0x000080ec

00006cb4 <_cleanup_r>:
    6cb4:	b510      	push	{r4, lr}
    6cb6:	4902      	ldr	r1, [pc, #8]	; (6cc0 <_cleanup_r+0xc>)
    6cb8:	f000 f8b2 	bl	6e20 <_fwalk_reent>
    6cbc:	bd10      	pop	{r4, pc}
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	00006c5d 	.word	0x00006c5d

00006cc4 <std.isra.0>:
    6cc4:	2300      	movs	r3, #0
    6cc6:	b510      	push	{r4, lr}
    6cc8:	0004      	movs	r4, r0
    6cca:	6003      	str	r3, [r0, #0]
    6ccc:	6043      	str	r3, [r0, #4]
    6cce:	6083      	str	r3, [r0, #8]
    6cd0:	8181      	strh	r1, [r0, #12]
    6cd2:	6643      	str	r3, [r0, #100]	; 0x64
    6cd4:	81c2      	strh	r2, [r0, #14]
    6cd6:	6103      	str	r3, [r0, #16]
    6cd8:	6143      	str	r3, [r0, #20]
    6cda:	6183      	str	r3, [r0, #24]
    6cdc:	0019      	movs	r1, r3
    6cde:	2208      	movs	r2, #8
    6ce0:	305c      	adds	r0, #92	; 0x5c
    6ce2:	f7ff fe58 	bl	6996 <memset>
    6ce6:	4b05      	ldr	r3, [pc, #20]	; (6cfc <std.isra.0+0x38>)
    6ce8:	6224      	str	r4, [r4, #32]
    6cea:	6263      	str	r3, [r4, #36]	; 0x24
    6cec:	4b04      	ldr	r3, [pc, #16]	; (6d00 <std.isra.0+0x3c>)
    6cee:	62a3      	str	r3, [r4, #40]	; 0x28
    6cf0:	4b04      	ldr	r3, [pc, #16]	; (6d04 <std.isra.0+0x40>)
    6cf2:	62e3      	str	r3, [r4, #44]	; 0x2c
    6cf4:	4b04      	ldr	r3, [pc, #16]	; (6d08 <std.isra.0+0x44>)
    6cf6:	6323      	str	r3, [r4, #48]	; 0x30
    6cf8:	bd10      	pop	{r4, pc}
    6cfa:	46c0      	nop			; (mov r8, r8)
    6cfc:	0000765d 	.word	0x0000765d
    6d00:	00007685 	.word	0x00007685
    6d04:	000076bd 	.word	0x000076bd
    6d08:	000076e9 	.word	0x000076e9

00006d0c <__sfmoreglue>:
    6d0c:	b570      	push	{r4, r5, r6, lr}
    6d0e:	2568      	movs	r5, #104	; 0x68
    6d10:	1e4a      	subs	r2, r1, #1
    6d12:	4355      	muls	r5, r2
    6d14:	000e      	movs	r6, r1
    6d16:	0029      	movs	r1, r5
    6d18:	3174      	adds	r1, #116	; 0x74
    6d1a:	f000 f963 	bl	6fe4 <_malloc_r>
    6d1e:	1e04      	subs	r4, r0, #0
    6d20:	d008      	beq.n	6d34 <__sfmoreglue+0x28>
    6d22:	2100      	movs	r1, #0
    6d24:	002a      	movs	r2, r5
    6d26:	6001      	str	r1, [r0, #0]
    6d28:	6046      	str	r6, [r0, #4]
    6d2a:	300c      	adds	r0, #12
    6d2c:	60a0      	str	r0, [r4, #8]
    6d2e:	3268      	adds	r2, #104	; 0x68
    6d30:	f7ff fe31 	bl	6996 <memset>
    6d34:	0020      	movs	r0, r4
    6d36:	bd70      	pop	{r4, r5, r6, pc}

00006d38 <__sinit>:
    6d38:	6983      	ldr	r3, [r0, #24]
    6d3a:	b513      	push	{r0, r1, r4, lr}
    6d3c:	0004      	movs	r4, r0
    6d3e:	2b00      	cmp	r3, #0
    6d40:	d128      	bne.n	6d94 <__sinit+0x5c>
    6d42:	6483      	str	r3, [r0, #72]	; 0x48
    6d44:	64c3      	str	r3, [r0, #76]	; 0x4c
    6d46:	6503      	str	r3, [r0, #80]	; 0x50
    6d48:	4b13      	ldr	r3, [pc, #76]	; (6d98 <__sinit+0x60>)
    6d4a:	4a14      	ldr	r2, [pc, #80]	; (6d9c <__sinit+0x64>)
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	6282      	str	r2, [r0, #40]	; 0x28
    6d50:	9301      	str	r3, [sp, #4]
    6d52:	4298      	cmp	r0, r3
    6d54:	d101      	bne.n	6d5a <__sinit+0x22>
    6d56:	2301      	movs	r3, #1
    6d58:	6183      	str	r3, [r0, #24]
    6d5a:	0020      	movs	r0, r4
    6d5c:	f000 f820 	bl	6da0 <__sfp>
    6d60:	6060      	str	r0, [r4, #4]
    6d62:	0020      	movs	r0, r4
    6d64:	f000 f81c 	bl	6da0 <__sfp>
    6d68:	60a0      	str	r0, [r4, #8]
    6d6a:	0020      	movs	r0, r4
    6d6c:	f000 f818 	bl	6da0 <__sfp>
    6d70:	2200      	movs	r2, #0
    6d72:	60e0      	str	r0, [r4, #12]
    6d74:	2104      	movs	r1, #4
    6d76:	6860      	ldr	r0, [r4, #4]
    6d78:	f7ff ffa4 	bl	6cc4 <std.isra.0>
    6d7c:	2201      	movs	r2, #1
    6d7e:	2109      	movs	r1, #9
    6d80:	68a0      	ldr	r0, [r4, #8]
    6d82:	f7ff ff9f 	bl	6cc4 <std.isra.0>
    6d86:	2202      	movs	r2, #2
    6d88:	2112      	movs	r1, #18
    6d8a:	68e0      	ldr	r0, [r4, #12]
    6d8c:	f7ff ff9a 	bl	6cc4 <std.isra.0>
    6d90:	2301      	movs	r3, #1
    6d92:	61a3      	str	r3, [r4, #24]
    6d94:	bd13      	pop	{r0, r1, r4, pc}
    6d96:	46c0      	nop			; (mov r8, r8)
    6d98:	000080e8 	.word	0x000080e8
    6d9c:	00006cb5 	.word	0x00006cb5

00006da0 <__sfp>:
    6da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6da2:	4b1e      	ldr	r3, [pc, #120]	; (6e1c <__sfp+0x7c>)
    6da4:	0007      	movs	r7, r0
    6da6:	681e      	ldr	r6, [r3, #0]
    6da8:	69b3      	ldr	r3, [r6, #24]
    6daa:	2b00      	cmp	r3, #0
    6dac:	d102      	bne.n	6db4 <__sfp+0x14>
    6dae:	0030      	movs	r0, r6
    6db0:	f7ff ffc2 	bl	6d38 <__sinit>
    6db4:	3648      	adds	r6, #72	; 0x48
    6db6:	68b4      	ldr	r4, [r6, #8]
    6db8:	6873      	ldr	r3, [r6, #4]
    6dba:	3b01      	subs	r3, #1
    6dbc:	d504      	bpl.n	6dc8 <__sfp+0x28>
    6dbe:	6833      	ldr	r3, [r6, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d007      	beq.n	6dd4 <__sfp+0x34>
    6dc4:	6836      	ldr	r6, [r6, #0]
    6dc6:	e7f6      	b.n	6db6 <__sfp+0x16>
    6dc8:	220c      	movs	r2, #12
    6dca:	5ea5      	ldrsh	r5, [r4, r2]
    6dcc:	2d00      	cmp	r5, #0
    6dce:	d00d      	beq.n	6dec <__sfp+0x4c>
    6dd0:	3468      	adds	r4, #104	; 0x68
    6dd2:	e7f2      	b.n	6dba <__sfp+0x1a>
    6dd4:	2104      	movs	r1, #4
    6dd6:	0038      	movs	r0, r7
    6dd8:	f7ff ff98 	bl	6d0c <__sfmoreglue>
    6ddc:	6030      	str	r0, [r6, #0]
    6dde:	2800      	cmp	r0, #0
    6de0:	d1f0      	bne.n	6dc4 <__sfp+0x24>
    6de2:	230c      	movs	r3, #12
    6de4:	0004      	movs	r4, r0
    6de6:	603b      	str	r3, [r7, #0]
    6de8:	0020      	movs	r0, r4
    6dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6dec:	2301      	movs	r3, #1
    6dee:	0020      	movs	r0, r4
    6df0:	425b      	negs	r3, r3
    6df2:	81e3      	strh	r3, [r4, #14]
    6df4:	3302      	adds	r3, #2
    6df6:	81a3      	strh	r3, [r4, #12]
    6df8:	6665      	str	r5, [r4, #100]	; 0x64
    6dfa:	6025      	str	r5, [r4, #0]
    6dfc:	60a5      	str	r5, [r4, #8]
    6dfe:	6065      	str	r5, [r4, #4]
    6e00:	6125      	str	r5, [r4, #16]
    6e02:	6165      	str	r5, [r4, #20]
    6e04:	61a5      	str	r5, [r4, #24]
    6e06:	2208      	movs	r2, #8
    6e08:	0029      	movs	r1, r5
    6e0a:	305c      	adds	r0, #92	; 0x5c
    6e0c:	f7ff fdc3 	bl	6996 <memset>
    6e10:	6365      	str	r5, [r4, #52]	; 0x34
    6e12:	63a5      	str	r5, [r4, #56]	; 0x38
    6e14:	64a5      	str	r5, [r4, #72]	; 0x48
    6e16:	64e5      	str	r5, [r4, #76]	; 0x4c
    6e18:	e7e6      	b.n	6de8 <__sfp+0x48>
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	000080e8 	.word	0x000080e8

00006e20 <_fwalk_reent>:
    6e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e22:	0004      	movs	r4, r0
    6e24:	0007      	movs	r7, r0
    6e26:	2600      	movs	r6, #0
    6e28:	9101      	str	r1, [sp, #4]
    6e2a:	3448      	adds	r4, #72	; 0x48
    6e2c:	2c00      	cmp	r4, #0
    6e2e:	d101      	bne.n	6e34 <_fwalk_reent+0x14>
    6e30:	0030      	movs	r0, r6
    6e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e34:	6863      	ldr	r3, [r4, #4]
    6e36:	68a5      	ldr	r5, [r4, #8]
    6e38:	9300      	str	r3, [sp, #0]
    6e3a:	9b00      	ldr	r3, [sp, #0]
    6e3c:	3b01      	subs	r3, #1
    6e3e:	9300      	str	r3, [sp, #0]
    6e40:	d501      	bpl.n	6e46 <_fwalk_reent+0x26>
    6e42:	6824      	ldr	r4, [r4, #0]
    6e44:	e7f2      	b.n	6e2c <_fwalk_reent+0xc>
    6e46:	89ab      	ldrh	r3, [r5, #12]
    6e48:	2b01      	cmp	r3, #1
    6e4a:	d908      	bls.n	6e5e <_fwalk_reent+0x3e>
    6e4c:	220e      	movs	r2, #14
    6e4e:	5eab      	ldrsh	r3, [r5, r2]
    6e50:	3301      	adds	r3, #1
    6e52:	d004      	beq.n	6e5e <_fwalk_reent+0x3e>
    6e54:	0029      	movs	r1, r5
    6e56:	0038      	movs	r0, r7
    6e58:	9b01      	ldr	r3, [sp, #4]
    6e5a:	4798      	blx	r3
    6e5c:	4306      	orrs	r6, r0
    6e5e:	3568      	adds	r5, #104	; 0x68
    6e60:	e7eb      	b.n	6e3a <_fwalk_reent+0x1a>
	...

00006e64 <__swhatbuf_r>:
    6e64:	b570      	push	{r4, r5, r6, lr}
    6e66:	000e      	movs	r6, r1
    6e68:	001d      	movs	r5, r3
    6e6a:	230e      	movs	r3, #14
    6e6c:	5ec9      	ldrsh	r1, [r1, r3]
    6e6e:	b090      	sub	sp, #64	; 0x40
    6e70:	0014      	movs	r4, r2
    6e72:	2900      	cmp	r1, #0
    6e74:	da07      	bge.n	6e86 <__swhatbuf_r+0x22>
    6e76:	2300      	movs	r3, #0
    6e78:	602b      	str	r3, [r5, #0]
    6e7a:	89b3      	ldrh	r3, [r6, #12]
    6e7c:	061b      	lsls	r3, r3, #24
    6e7e:	d411      	bmi.n	6ea4 <__swhatbuf_r+0x40>
    6e80:	2380      	movs	r3, #128	; 0x80
    6e82:	00db      	lsls	r3, r3, #3
    6e84:	e00f      	b.n	6ea6 <__swhatbuf_r+0x42>
    6e86:	aa01      	add	r2, sp, #4
    6e88:	f000 fd26 	bl	78d8 <_fstat_r>
    6e8c:	2800      	cmp	r0, #0
    6e8e:	dbf2      	blt.n	6e76 <__swhatbuf_r+0x12>
    6e90:	22f0      	movs	r2, #240	; 0xf0
    6e92:	9b02      	ldr	r3, [sp, #8]
    6e94:	0212      	lsls	r2, r2, #8
    6e96:	4013      	ands	r3, r2
    6e98:	4a05      	ldr	r2, [pc, #20]	; (6eb0 <__swhatbuf_r+0x4c>)
    6e9a:	189b      	adds	r3, r3, r2
    6e9c:	425a      	negs	r2, r3
    6e9e:	4153      	adcs	r3, r2
    6ea0:	602b      	str	r3, [r5, #0]
    6ea2:	e7ed      	b.n	6e80 <__swhatbuf_r+0x1c>
    6ea4:	2340      	movs	r3, #64	; 0x40
    6ea6:	2000      	movs	r0, #0
    6ea8:	6023      	str	r3, [r4, #0]
    6eaa:	b010      	add	sp, #64	; 0x40
    6eac:	bd70      	pop	{r4, r5, r6, pc}
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	ffffe000 	.word	0xffffe000

00006eb4 <__smakebuf_r>:
    6eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6eb6:	2602      	movs	r6, #2
    6eb8:	898b      	ldrh	r3, [r1, #12]
    6eba:	0005      	movs	r5, r0
    6ebc:	000c      	movs	r4, r1
    6ebe:	4233      	tst	r3, r6
    6ec0:	d006      	beq.n	6ed0 <__smakebuf_r+0x1c>
    6ec2:	0023      	movs	r3, r4
    6ec4:	3347      	adds	r3, #71	; 0x47
    6ec6:	6023      	str	r3, [r4, #0]
    6ec8:	6123      	str	r3, [r4, #16]
    6eca:	2301      	movs	r3, #1
    6ecc:	6163      	str	r3, [r4, #20]
    6ece:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6ed0:	ab01      	add	r3, sp, #4
    6ed2:	466a      	mov	r2, sp
    6ed4:	f7ff ffc6 	bl	6e64 <__swhatbuf_r>
    6ed8:	9900      	ldr	r1, [sp, #0]
    6eda:	0007      	movs	r7, r0
    6edc:	0028      	movs	r0, r5
    6ede:	f000 f881 	bl	6fe4 <_malloc_r>
    6ee2:	2800      	cmp	r0, #0
    6ee4:	d108      	bne.n	6ef8 <__smakebuf_r+0x44>
    6ee6:	220c      	movs	r2, #12
    6ee8:	5ea3      	ldrsh	r3, [r4, r2]
    6eea:	059a      	lsls	r2, r3, #22
    6eec:	d4ef      	bmi.n	6ece <__smakebuf_r+0x1a>
    6eee:	2203      	movs	r2, #3
    6ef0:	4393      	bics	r3, r2
    6ef2:	431e      	orrs	r6, r3
    6ef4:	81a6      	strh	r6, [r4, #12]
    6ef6:	e7e4      	b.n	6ec2 <__smakebuf_r+0xe>
    6ef8:	4b0f      	ldr	r3, [pc, #60]	; (6f38 <__smakebuf_r+0x84>)
    6efa:	62ab      	str	r3, [r5, #40]	; 0x28
    6efc:	2380      	movs	r3, #128	; 0x80
    6efe:	89a2      	ldrh	r2, [r4, #12]
    6f00:	6020      	str	r0, [r4, #0]
    6f02:	4313      	orrs	r3, r2
    6f04:	81a3      	strh	r3, [r4, #12]
    6f06:	9b00      	ldr	r3, [sp, #0]
    6f08:	6120      	str	r0, [r4, #16]
    6f0a:	6163      	str	r3, [r4, #20]
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	2b00      	cmp	r3, #0
    6f10:	d00d      	beq.n	6f2e <__smakebuf_r+0x7a>
    6f12:	230e      	movs	r3, #14
    6f14:	5ee1      	ldrsh	r1, [r4, r3]
    6f16:	0028      	movs	r0, r5
    6f18:	f000 fcf0 	bl	78fc <_isatty_r>
    6f1c:	2800      	cmp	r0, #0
    6f1e:	d006      	beq.n	6f2e <__smakebuf_r+0x7a>
    6f20:	2203      	movs	r2, #3
    6f22:	89a3      	ldrh	r3, [r4, #12]
    6f24:	4393      	bics	r3, r2
    6f26:	001a      	movs	r2, r3
    6f28:	2301      	movs	r3, #1
    6f2a:	4313      	orrs	r3, r2
    6f2c:	81a3      	strh	r3, [r4, #12]
    6f2e:	89a0      	ldrh	r0, [r4, #12]
    6f30:	4338      	orrs	r0, r7
    6f32:	81a0      	strh	r0, [r4, #12]
    6f34:	e7cb      	b.n	6ece <__smakebuf_r+0x1a>
    6f36:	46c0      	nop			; (mov r8, r8)
    6f38:	00006cb5 	.word	0x00006cb5

00006f3c <malloc>:
    6f3c:	b510      	push	{r4, lr}
    6f3e:	4b03      	ldr	r3, [pc, #12]	; (6f4c <malloc+0x10>)
    6f40:	0001      	movs	r1, r0
    6f42:	6818      	ldr	r0, [r3, #0]
    6f44:	f000 f84e 	bl	6fe4 <_malloc_r>
    6f48:	bd10      	pop	{r4, pc}
    6f4a:	46c0      	nop			; (mov r8, r8)
    6f4c:	2000006c 	.word	0x2000006c

00006f50 <_free_r>:
    6f50:	b570      	push	{r4, r5, r6, lr}
    6f52:	0005      	movs	r5, r0
    6f54:	2900      	cmp	r1, #0
    6f56:	d010      	beq.n	6f7a <_free_r+0x2a>
    6f58:	1f0c      	subs	r4, r1, #4
    6f5a:	6823      	ldr	r3, [r4, #0]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	da00      	bge.n	6f62 <_free_r+0x12>
    6f60:	18e4      	adds	r4, r4, r3
    6f62:	0028      	movs	r0, r5
    6f64:	f000 fcfb 	bl	795e <__malloc_lock>
    6f68:	4a1d      	ldr	r2, [pc, #116]	; (6fe0 <_free_r+0x90>)
    6f6a:	6813      	ldr	r3, [r2, #0]
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	d105      	bne.n	6f7c <_free_r+0x2c>
    6f70:	6063      	str	r3, [r4, #4]
    6f72:	6014      	str	r4, [r2, #0]
    6f74:	0028      	movs	r0, r5
    6f76:	f000 fcf3 	bl	7960 <__malloc_unlock>
    6f7a:	bd70      	pop	{r4, r5, r6, pc}
    6f7c:	42a3      	cmp	r3, r4
    6f7e:	d909      	bls.n	6f94 <_free_r+0x44>
    6f80:	6821      	ldr	r1, [r4, #0]
    6f82:	1860      	adds	r0, r4, r1
    6f84:	4283      	cmp	r3, r0
    6f86:	d1f3      	bne.n	6f70 <_free_r+0x20>
    6f88:	6818      	ldr	r0, [r3, #0]
    6f8a:	685b      	ldr	r3, [r3, #4]
    6f8c:	1841      	adds	r1, r0, r1
    6f8e:	6021      	str	r1, [r4, #0]
    6f90:	e7ee      	b.n	6f70 <_free_r+0x20>
    6f92:	0013      	movs	r3, r2
    6f94:	685a      	ldr	r2, [r3, #4]
    6f96:	2a00      	cmp	r2, #0
    6f98:	d001      	beq.n	6f9e <_free_r+0x4e>
    6f9a:	42a2      	cmp	r2, r4
    6f9c:	d9f9      	bls.n	6f92 <_free_r+0x42>
    6f9e:	6819      	ldr	r1, [r3, #0]
    6fa0:	1858      	adds	r0, r3, r1
    6fa2:	42a0      	cmp	r0, r4
    6fa4:	d10b      	bne.n	6fbe <_free_r+0x6e>
    6fa6:	6820      	ldr	r0, [r4, #0]
    6fa8:	1809      	adds	r1, r1, r0
    6faa:	1858      	adds	r0, r3, r1
    6fac:	6019      	str	r1, [r3, #0]
    6fae:	4282      	cmp	r2, r0
    6fb0:	d1e0      	bne.n	6f74 <_free_r+0x24>
    6fb2:	6810      	ldr	r0, [r2, #0]
    6fb4:	6852      	ldr	r2, [r2, #4]
    6fb6:	1841      	adds	r1, r0, r1
    6fb8:	6019      	str	r1, [r3, #0]
    6fba:	605a      	str	r2, [r3, #4]
    6fbc:	e7da      	b.n	6f74 <_free_r+0x24>
    6fbe:	42a0      	cmp	r0, r4
    6fc0:	d902      	bls.n	6fc8 <_free_r+0x78>
    6fc2:	230c      	movs	r3, #12
    6fc4:	602b      	str	r3, [r5, #0]
    6fc6:	e7d5      	b.n	6f74 <_free_r+0x24>
    6fc8:	6821      	ldr	r1, [r4, #0]
    6fca:	1860      	adds	r0, r4, r1
    6fcc:	4282      	cmp	r2, r0
    6fce:	d103      	bne.n	6fd8 <_free_r+0x88>
    6fd0:	6810      	ldr	r0, [r2, #0]
    6fd2:	6852      	ldr	r2, [r2, #4]
    6fd4:	1841      	adds	r1, r0, r1
    6fd6:	6021      	str	r1, [r4, #0]
    6fd8:	6062      	str	r2, [r4, #4]
    6fda:	605c      	str	r4, [r3, #4]
    6fdc:	e7ca      	b.n	6f74 <_free_r+0x24>
    6fde:	46c0      	nop			; (mov r8, r8)
    6fe0:	2000020c 	.word	0x2000020c

00006fe4 <_malloc_r>:
    6fe4:	2303      	movs	r3, #3
    6fe6:	b570      	push	{r4, r5, r6, lr}
    6fe8:	1ccd      	adds	r5, r1, #3
    6fea:	439d      	bics	r5, r3
    6fec:	3508      	adds	r5, #8
    6fee:	0006      	movs	r6, r0
    6ff0:	2d0c      	cmp	r5, #12
    6ff2:	d21e      	bcs.n	7032 <_malloc_r+0x4e>
    6ff4:	250c      	movs	r5, #12
    6ff6:	42a9      	cmp	r1, r5
    6ff8:	d81d      	bhi.n	7036 <_malloc_r+0x52>
    6ffa:	0030      	movs	r0, r6
    6ffc:	f000 fcaf 	bl	795e <__malloc_lock>
    7000:	4a25      	ldr	r2, [pc, #148]	; (7098 <_malloc_r+0xb4>)
    7002:	6814      	ldr	r4, [r2, #0]
    7004:	0021      	movs	r1, r4
    7006:	2900      	cmp	r1, #0
    7008:	d119      	bne.n	703e <_malloc_r+0x5a>
    700a:	4c24      	ldr	r4, [pc, #144]	; (709c <_malloc_r+0xb8>)
    700c:	6823      	ldr	r3, [r4, #0]
    700e:	2b00      	cmp	r3, #0
    7010:	d103      	bne.n	701a <_malloc_r+0x36>
    7012:	0030      	movs	r0, r6
    7014:	f000 fb10 	bl	7638 <_sbrk_r>
    7018:	6020      	str	r0, [r4, #0]
    701a:	0029      	movs	r1, r5
    701c:	0030      	movs	r0, r6
    701e:	f000 fb0b 	bl	7638 <_sbrk_r>
    7022:	1c43      	adds	r3, r0, #1
    7024:	d12c      	bne.n	7080 <_malloc_r+0x9c>
    7026:	230c      	movs	r3, #12
    7028:	0030      	movs	r0, r6
    702a:	6033      	str	r3, [r6, #0]
    702c:	f000 fc98 	bl	7960 <__malloc_unlock>
    7030:	e003      	b.n	703a <_malloc_r+0x56>
    7032:	2d00      	cmp	r5, #0
    7034:	dadf      	bge.n	6ff6 <_malloc_r+0x12>
    7036:	230c      	movs	r3, #12
    7038:	6033      	str	r3, [r6, #0]
    703a:	2000      	movs	r0, #0
    703c:	bd70      	pop	{r4, r5, r6, pc}
    703e:	680b      	ldr	r3, [r1, #0]
    7040:	1b5b      	subs	r3, r3, r5
    7042:	d41a      	bmi.n	707a <_malloc_r+0x96>
    7044:	2b0b      	cmp	r3, #11
    7046:	d903      	bls.n	7050 <_malloc_r+0x6c>
    7048:	600b      	str	r3, [r1, #0]
    704a:	18cc      	adds	r4, r1, r3
    704c:	6025      	str	r5, [r4, #0]
    704e:	e003      	b.n	7058 <_malloc_r+0x74>
    7050:	428c      	cmp	r4, r1
    7052:	d10e      	bne.n	7072 <_malloc_r+0x8e>
    7054:	6863      	ldr	r3, [r4, #4]
    7056:	6013      	str	r3, [r2, #0]
    7058:	0030      	movs	r0, r6
    705a:	f000 fc81 	bl	7960 <__malloc_unlock>
    705e:	0020      	movs	r0, r4
    7060:	2207      	movs	r2, #7
    7062:	300b      	adds	r0, #11
    7064:	1d23      	adds	r3, r4, #4
    7066:	4390      	bics	r0, r2
    7068:	1ac3      	subs	r3, r0, r3
    706a:	d0e7      	beq.n	703c <_malloc_r+0x58>
    706c:	425a      	negs	r2, r3
    706e:	50e2      	str	r2, [r4, r3]
    7070:	e7e4      	b.n	703c <_malloc_r+0x58>
    7072:	684b      	ldr	r3, [r1, #4]
    7074:	6063      	str	r3, [r4, #4]
    7076:	000c      	movs	r4, r1
    7078:	e7ee      	b.n	7058 <_malloc_r+0x74>
    707a:	000c      	movs	r4, r1
    707c:	6849      	ldr	r1, [r1, #4]
    707e:	e7c2      	b.n	7006 <_malloc_r+0x22>
    7080:	2303      	movs	r3, #3
    7082:	1cc4      	adds	r4, r0, #3
    7084:	439c      	bics	r4, r3
    7086:	42a0      	cmp	r0, r4
    7088:	d0e0      	beq.n	704c <_malloc_r+0x68>
    708a:	1a21      	subs	r1, r4, r0
    708c:	0030      	movs	r0, r6
    708e:	f000 fad3 	bl	7638 <_sbrk_r>
    7092:	1c43      	adds	r3, r0, #1
    7094:	d1da      	bne.n	704c <_malloc_r+0x68>
    7096:	e7c6      	b.n	7026 <_malloc_r+0x42>
    7098:	2000020c 	.word	0x2000020c
    709c:	20000210 	.word	0x20000210

000070a0 <__sfputc_r>:
    70a0:	6893      	ldr	r3, [r2, #8]
    70a2:	b510      	push	{r4, lr}
    70a4:	3b01      	subs	r3, #1
    70a6:	6093      	str	r3, [r2, #8]
    70a8:	2b00      	cmp	r3, #0
    70aa:	da05      	bge.n	70b8 <__sfputc_r+0x18>
    70ac:	6994      	ldr	r4, [r2, #24]
    70ae:	42a3      	cmp	r3, r4
    70b0:	db08      	blt.n	70c4 <__sfputc_r+0x24>
    70b2:	b2cb      	uxtb	r3, r1
    70b4:	2b0a      	cmp	r3, #10
    70b6:	d005      	beq.n	70c4 <__sfputc_r+0x24>
    70b8:	6813      	ldr	r3, [r2, #0]
    70ba:	1c58      	adds	r0, r3, #1
    70bc:	6010      	str	r0, [r2, #0]
    70be:	7019      	strb	r1, [r3, #0]
    70c0:	b2c8      	uxtb	r0, r1
    70c2:	bd10      	pop	{r4, pc}
    70c4:	f000 fb16 	bl	76f4 <__swbuf_r>
    70c8:	e7fb      	b.n	70c2 <__sfputc_r+0x22>

000070ca <__sfputs_r>:
    70ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70cc:	0006      	movs	r6, r0
    70ce:	000f      	movs	r7, r1
    70d0:	0014      	movs	r4, r2
    70d2:	18d5      	adds	r5, r2, r3
    70d4:	42ac      	cmp	r4, r5
    70d6:	d101      	bne.n	70dc <__sfputs_r+0x12>
    70d8:	2000      	movs	r0, #0
    70da:	e007      	b.n	70ec <__sfputs_r+0x22>
    70dc:	7821      	ldrb	r1, [r4, #0]
    70de:	003a      	movs	r2, r7
    70e0:	0030      	movs	r0, r6
    70e2:	f7ff ffdd 	bl	70a0 <__sfputc_r>
    70e6:	3401      	adds	r4, #1
    70e8:	1c43      	adds	r3, r0, #1
    70ea:	d1f3      	bne.n	70d4 <__sfputs_r+0xa>
    70ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000070f0 <_vfiprintf_r>:
    70f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    70f2:	b09f      	sub	sp, #124	; 0x7c
    70f4:	0006      	movs	r6, r0
    70f6:	000f      	movs	r7, r1
    70f8:	0014      	movs	r4, r2
    70fa:	9305      	str	r3, [sp, #20]
    70fc:	2800      	cmp	r0, #0
    70fe:	d004      	beq.n	710a <_vfiprintf_r+0x1a>
    7100:	6983      	ldr	r3, [r0, #24]
    7102:	2b00      	cmp	r3, #0
    7104:	d101      	bne.n	710a <_vfiprintf_r+0x1a>
    7106:	f7ff fe17 	bl	6d38 <__sinit>
    710a:	4b7f      	ldr	r3, [pc, #508]	; (7308 <_vfiprintf_r+0x218>)
    710c:	429f      	cmp	r7, r3
    710e:	d15c      	bne.n	71ca <_vfiprintf_r+0xda>
    7110:	6877      	ldr	r7, [r6, #4]
    7112:	89bb      	ldrh	r3, [r7, #12]
    7114:	071b      	lsls	r3, r3, #28
    7116:	d562      	bpl.n	71de <_vfiprintf_r+0xee>
    7118:	693b      	ldr	r3, [r7, #16]
    711a:	2b00      	cmp	r3, #0
    711c:	d05f      	beq.n	71de <_vfiprintf_r+0xee>
    711e:	2300      	movs	r3, #0
    7120:	ad06      	add	r5, sp, #24
    7122:	616b      	str	r3, [r5, #20]
    7124:	3320      	adds	r3, #32
    7126:	766b      	strb	r3, [r5, #25]
    7128:	3310      	adds	r3, #16
    712a:	76ab      	strb	r3, [r5, #26]
    712c:	9402      	str	r4, [sp, #8]
    712e:	9c02      	ldr	r4, [sp, #8]
    7130:	7823      	ldrb	r3, [r4, #0]
    7132:	2b00      	cmp	r3, #0
    7134:	d15d      	bne.n	71f2 <_vfiprintf_r+0x102>
    7136:	9b02      	ldr	r3, [sp, #8]
    7138:	1ae3      	subs	r3, r4, r3
    713a:	9304      	str	r3, [sp, #16]
    713c:	d00d      	beq.n	715a <_vfiprintf_r+0x6a>
    713e:	9b04      	ldr	r3, [sp, #16]
    7140:	9a02      	ldr	r2, [sp, #8]
    7142:	0039      	movs	r1, r7
    7144:	0030      	movs	r0, r6
    7146:	f7ff ffc0 	bl	70ca <__sfputs_r>
    714a:	1c43      	adds	r3, r0, #1
    714c:	d100      	bne.n	7150 <_vfiprintf_r+0x60>
    714e:	e0cc      	b.n	72ea <_vfiprintf_r+0x1fa>
    7150:	696a      	ldr	r2, [r5, #20]
    7152:	9b04      	ldr	r3, [sp, #16]
    7154:	4694      	mov	ip, r2
    7156:	4463      	add	r3, ip
    7158:	616b      	str	r3, [r5, #20]
    715a:	7823      	ldrb	r3, [r4, #0]
    715c:	2b00      	cmp	r3, #0
    715e:	d100      	bne.n	7162 <_vfiprintf_r+0x72>
    7160:	e0c3      	b.n	72ea <_vfiprintf_r+0x1fa>
    7162:	2201      	movs	r2, #1
    7164:	2300      	movs	r3, #0
    7166:	4252      	negs	r2, r2
    7168:	606a      	str	r2, [r5, #4]
    716a:	a902      	add	r1, sp, #8
    716c:	3254      	adds	r2, #84	; 0x54
    716e:	1852      	adds	r2, r2, r1
    7170:	3401      	adds	r4, #1
    7172:	602b      	str	r3, [r5, #0]
    7174:	60eb      	str	r3, [r5, #12]
    7176:	60ab      	str	r3, [r5, #8]
    7178:	7013      	strb	r3, [r2, #0]
    717a:	65ab      	str	r3, [r5, #88]	; 0x58
    717c:	7821      	ldrb	r1, [r4, #0]
    717e:	2205      	movs	r2, #5
    7180:	4862      	ldr	r0, [pc, #392]	; (730c <_vfiprintf_r+0x21c>)
    7182:	f000 fbe1 	bl	7948 <memchr>
    7186:	1c63      	adds	r3, r4, #1
    7188:	469c      	mov	ip, r3
    718a:	2800      	cmp	r0, #0
    718c:	d135      	bne.n	71fa <_vfiprintf_r+0x10a>
    718e:	6829      	ldr	r1, [r5, #0]
    7190:	06cb      	lsls	r3, r1, #27
    7192:	d504      	bpl.n	719e <_vfiprintf_r+0xae>
    7194:	2353      	movs	r3, #83	; 0x53
    7196:	aa02      	add	r2, sp, #8
    7198:	3020      	adds	r0, #32
    719a:	189b      	adds	r3, r3, r2
    719c:	7018      	strb	r0, [r3, #0]
    719e:	070b      	lsls	r3, r1, #28
    71a0:	d504      	bpl.n	71ac <_vfiprintf_r+0xbc>
    71a2:	2353      	movs	r3, #83	; 0x53
    71a4:	202b      	movs	r0, #43	; 0x2b
    71a6:	aa02      	add	r2, sp, #8
    71a8:	189b      	adds	r3, r3, r2
    71aa:	7018      	strb	r0, [r3, #0]
    71ac:	7823      	ldrb	r3, [r4, #0]
    71ae:	2b2a      	cmp	r3, #42	; 0x2a
    71b0:	d02c      	beq.n	720c <_vfiprintf_r+0x11c>
    71b2:	2000      	movs	r0, #0
    71b4:	210a      	movs	r1, #10
    71b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71b8:	7822      	ldrb	r2, [r4, #0]
    71ba:	3a30      	subs	r2, #48	; 0x30
    71bc:	2a09      	cmp	r2, #9
    71be:	d800      	bhi.n	71c2 <_vfiprintf_r+0xd2>
    71c0:	e06b      	b.n	729a <_vfiprintf_r+0x1aa>
    71c2:	2800      	cmp	r0, #0
    71c4:	d02a      	beq.n	721c <_vfiprintf_r+0x12c>
    71c6:	9309      	str	r3, [sp, #36]	; 0x24
    71c8:	e028      	b.n	721c <_vfiprintf_r+0x12c>
    71ca:	4b51      	ldr	r3, [pc, #324]	; (7310 <_vfiprintf_r+0x220>)
    71cc:	429f      	cmp	r7, r3
    71ce:	d101      	bne.n	71d4 <_vfiprintf_r+0xe4>
    71d0:	68b7      	ldr	r7, [r6, #8]
    71d2:	e79e      	b.n	7112 <_vfiprintf_r+0x22>
    71d4:	4b4f      	ldr	r3, [pc, #316]	; (7314 <_vfiprintf_r+0x224>)
    71d6:	429f      	cmp	r7, r3
    71d8:	d19b      	bne.n	7112 <_vfiprintf_r+0x22>
    71da:	68f7      	ldr	r7, [r6, #12]
    71dc:	e799      	b.n	7112 <_vfiprintf_r+0x22>
    71de:	0039      	movs	r1, r7
    71e0:	0030      	movs	r0, r6
    71e2:	f000 faf1 	bl	77c8 <__swsetup_r>
    71e6:	2800      	cmp	r0, #0
    71e8:	d099      	beq.n	711e <_vfiprintf_r+0x2e>
    71ea:	2001      	movs	r0, #1
    71ec:	4240      	negs	r0, r0
    71ee:	b01f      	add	sp, #124	; 0x7c
    71f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71f2:	2b25      	cmp	r3, #37	; 0x25
    71f4:	d09f      	beq.n	7136 <_vfiprintf_r+0x46>
    71f6:	3401      	adds	r4, #1
    71f8:	e79a      	b.n	7130 <_vfiprintf_r+0x40>
    71fa:	4b44      	ldr	r3, [pc, #272]	; (730c <_vfiprintf_r+0x21c>)
    71fc:	6829      	ldr	r1, [r5, #0]
    71fe:	1ac0      	subs	r0, r0, r3
    7200:	2301      	movs	r3, #1
    7202:	4083      	lsls	r3, r0
    7204:	430b      	orrs	r3, r1
    7206:	602b      	str	r3, [r5, #0]
    7208:	4664      	mov	r4, ip
    720a:	e7b7      	b.n	717c <_vfiprintf_r+0x8c>
    720c:	9b05      	ldr	r3, [sp, #20]
    720e:	1d18      	adds	r0, r3, #4
    7210:	681b      	ldr	r3, [r3, #0]
    7212:	9005      	str	r0, [sp, #20]
    7214:	2b00      	cmp	r3, #0
    7216:	db3a      	blt.n	728e <_vfiprintf_r+0x19e>
    7218:	9309      	str	r3, [sp, #36]	; 0x24
    721a:	4664      	mov	r4, ip
    721c:	7823      	ldrb	r3, [r4, #0]
    721e:	2b2e      	cmp	r3, #46	; 0x2e
    7220:	d10b      	bne.n	723a <_vfiprintf_r+0x14a>
    7222:	7863      	ldrb	r3, [r4, #1]
    7224:	1c62      	adds	r2, r4, #1
    7226:	2b2a      	cmp	r3, #42	; 0x2a
    7228:	d13f      	bne.n	72aa <_vfiprintf_r+0x1ba>
    722a:	9b05      	ldr	r3, [sp, #20]
    722c:	3402      	adds	r4, #2
    722e:	1d1a      	adds	r2, r3, #4
    7230:	681b      	ldr	r3, [r3, #0]
    7232:	9205      	str	r2, [sp, #20]
    7234:	2b00      	cmp	r3, #0
    7236:	db35      	blt.n	72a4 <_vfiprintf_r+0x1b4>
    7238:	9307      	str	r3, [sp, #28]
    723a:	7821      	ldrb	r1, [r4, #0]
    723c:	2203      	movs	r2, #3
    723e:	4836      	ldr	r0, [pc, #216]	; (7318 <_vfiprintf_r+0x228>)
    7240:	f000 fb82 	bl	7948 <memchr>
    7244:	2800      	cmp	r0, #0
    7246:	d007      	beq.n	7258 <_vfiprintf_r+0x168>
    7248:	4b33      	ldr	r3, [pc, #204]	; (7318 <_vfiprintf_r+0x228>)
    724a:	682a      	ldr	r2, [r5, #0]
    724c:	1ac0      	subs	r0, r0, r3
    724e:	2340      	movs	r3, #64	; 0x40
    7250:	4083      	lsls	r3, r0
    7252:	4313      	orrs	r3, r2
    7254:	602b      	str	r3, [r5, #0]
    7256:	3401      	adds	r4, #1
    7258:	7821      	ldrb	r1, [r4, #0]
    725a:	1c63      	adds	r3, r4, #1
    725c:	2206      	movs	r2, #6
    725e:	482f      	ldr	r0, [pc, #188]	; (731c <_vfiprintf_r+0x22c>)
    7260:	9302      	str	r3, [sp, #8]
    7262:	7629      	strb	r1, [r5, #24]
    7264:	f000 fb70 	bl	7948 <memchr>
    7268:	2800      	cmp	r0, #0
    726a:	d044      	beq.n	72f6 <_vfiprintf_r+0x206>
    726c:	4b2c      	ldr	r3, [pc, #176]	; (7320 <_vfiprintf_r+0x230>)
    726e:	2b00      	cmp	r3, #0
    7270:	d12f      	bne.n	72d2 <_vfiprintf_r+0x1e2>
    7272:	6829      	ldr	r1, [r5, #0]
    7274:	9b05      	ldr	r3, [sp, #20]
    7276:	2207      	movs	r2, #7
    7278:	05c9      	lsls	r1, r1, #23
    727a:	d528      	bpl.n	72ce <_vfiprintf_r+0x1de>
    727c:	189b      	adds	r3, r3, r2
    727e:	4393      	bics	r3, r2
    7280:	3308      	adds	r3, #8
    7282:	9305      	str	r3, [sp, #20]
    7284:	696b      	ldr	r3, [r5, #20]
    7286:	9a03      	ldr	r2, [sp, #12]
    7288:	189b      	adds	r3, r3, r2
    728a:	616b      	str	r3, [r5, #20]
    728c:	e74f      	b.n	712e <_vfiprintf_r+0x3e>
    728e:	425b      	negs	r3, r3
    7290:	60eb      	str	r3, [r5, #12]
    7292:	2302      	movs	r3, #2
    7294:	430b      	orrs	r3, r1
    7296:	602b      	str	r3, [r5, #0]
    7298:	e7bf      	b.n	721a <_vfiprintf_r+0x12a>
    729a:	434b      	muls	r3, r1
    729c:	3401      	adds	r4, #1
    729e:	189b      	adds	r3, r3, r2
    72a0:	2001      	movs	r0, #1
    72a2:	e789      	b.n	71b8 <_vfiprintf_r+0xc8>
    72a4:	2301      	movs	r3, #1
    72a6:	425b      	negs	r3, r3
    72a8:	e7c6      	b.n	7238 <_vfiprintf_r+0x148>
    72aa:	2300      	movs	r3, #0
    72ac:	0014      	movs	r4, r2
    72ae:	200a      	movs	r0, #10
    72b0:	001a      	movs	r2, r3
    72b2:	606b      	str	r3, [r5, #4]
    72b4:	7821      	ldrb	r1, [r4, #0]
    72b6:	3930      	subs	r1, #48	; 0x30
    72b8:	2909      	cmp	r1, #9
    72ba:	d903      	bls.n	72c4 <_vfiprintf_r+0x1d4>
    72bc:	2b00      	cmp	r3, #0
    72be:	d0bc      	beq.n	723a <_vfiprintf_r+0x14a>
    72c0:	9207      	str	r2, [sp, #28]
    72c2:	e7ba      	b.n	723a <_vfiprintf_r+0x14a>
    72c4:	4342      	muls	r2, r0
    72c6:	3401      	adds	r4, #1
    72c8:	1852      	adds	r2, r2, r1
    72ca:	2301      	movs	r3, #1
    72cc:	e7f2      	b.n	72b4 <_vfiprintf_r+0x1c4>
    72ce:	3307      	adds	r3, #7
    72d0:	e7d5      	b.n	727e <_vfiprintf_r+0x18e>
    72d2:	ab05      	add	r3, sp, #20
    72d4:	9300      	str	r3, [sp, #0]
    72d6:	003a      	movs	r2, r7
    72d8:	4b12      	ldr	r3, [pc, #72]	; (7324 <_vfiprintf_r+0x234>)
    72da:	0029      	movs	r1, r5
    72dc:	0030      	movs	r0, r6
    72de:	e000      	b.n	72e2 <_vfiprintf_r+0x1f2>
    72e0:	bf00      	nop
    72e2:	9003      	str	r0, [sp, #12]
    72e4:	9b03      	ldr	r3, [sp, #12]
    72e6:	3301      	adds	r3, #1
    72e8:	d1cc      	bne.n	7284 <_vfiprintf_r+0x194>
    72ea:	89bb      	ldrh	r3, [r7, #12]
    72ec:	065b      	lsls	r3, r3, #25
    72ee:	d500      	bpl.n	72f2 <_vfiprintf_r+0x202>
    72f0:	e77b      	b.n	71ea <_vfiprintf_r+0xfa>
    72f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    72f4:	e77b      	b.n	71ee <_vfiprintf_r+0xfe>
    72f6:	ab05      	add	r3, sp, #20
    72f8:	9300      	str	r3, [sp, #0]
    72fa:	003a      	movs	r2, r7
    72fc:	4b09      	ldr	r3, [pc, #36]	; (7324 <_vfiprintf_r+0x234>)
    72fe:	0029      	movs	r1, r5
    7300:	0030      	movs	r0, r6
    7302:	f000 f87f 	bl	7404 <_printf_i>
    7306:	e7ec      	b.n	72e2 <_vfiprintf_r+0x1f2>
    7308:	0000810c 	.word	0x0000810c
    730c:	0000814c 	.word	0x0000814c
    7310:	0000812c 	.word	0x0000812c
    7314:	000080ec 	.word	0x000080ec
    7318:	00008152 	.word	0x00008152
    731c:	00008156 	.word	0x00008156
    7320:	00000000 	.word	0x00000000
    7324:	000070cb 	.word	0x000070cb

00007328 <_printf_common>:
    7328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    732a:	0015      	movs	r5, r2
    732c:	9301      	str	r3, [sp, #4]
    732e:	688a      	ldr	r2, [r1, #8]
    7330:	690b      	ldr	r3, [r1, #16]
    7332:	9000      	str	r0, [sp, #0]
    7334:	000c      	movs	r4, r1
    7336:	4293      	cmp	r3, r2
    7338:	da00      	bge.n	733c <_printf_common+0x14>
    733a:	0013      	movs	r3, r2
    733c:	0022      	movs	r2, r4
    733e:	602b      	str	r3, [r5, #0]
    7340:	3243      	adds	r2, #67	; 0x43
    7342:	7812      	ldrb	r2, [r2, #0]
    7344:	2a00      	cmp	r2, #0
    7346:	d001      	beq.n	734c <_printf_common+0x24>
    7348:	3301      	adds	r3, #1
    734a:	602b      	str	r3, [r5, #0]
    734c:	6823      	ldr	r3, [r4, #0]
    734e:	069b      	lsls	r3, r3, #26
    7350:	d502      	bpl.n	7358 <_printf_common+0x30>
    7352:	682b      	ldr	r3, [r5, #0]
    7354:	3302      	adds	r3, #2
    7356:	602b      	str	r3, [r5, #0]
    7358:	2706      	movs	r7, #6
    735a:	6823      	ldr	r3, [r4, #0]
    735c:	401f      	ands	r7, r3
    735e:	d027      	beq.n	73b0 <_printf_common+0x88>
    7360:	0023      	movs	r3, r4
    7362:	3343      	adds	r3, #67	; 0x43
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	1e5a      	subs	r2, r3, #1
    7368:	4193      	sbcs	r3, r2
    736a:	6822      	ldr	r2, [r4, #0]
    736c:	0692      	lsls	r2, r2, #26
    736e:	d430      	bmi.n	73d2 <_printf_common+0xaa>
    7370:	0022      	movs	r2, r4
    7372:	9901      	ldr	r1, [sp, #4]
    7374:	3243      	adds	r2, #67	; 0x43
    7376:	9800      	ldr	r0, [sp, #0]
    7378:	9e08      	ldr	r6, [sp, #32]
    737a:	47b0      	blx	r6
    737c:	1c43      	adds	r3, r0, #1
    737e:	d025      	beq.n	73cc <_printf_common+0xa4>
    7380:	2306      	movs	r3, #6
    7382:	6820      	ldr	r0, [r4, #0]
    7384:	682a      	ldr	r2, [r5, #0]
    7386:	68e1      	ldr	r1, [r4, #12]
    7388:	4003      	ands	r3, r0
    738a:	2500      	movs	r5, #0
    738c:	2b04      	cmp	r3, #4
    738e:	d103      	bne.n	7398 <_printf_common+0x70>
    7390:	1a8d      	subs	r5, r1, r2
    7392:	43eb      	mvns	r3, r5
    7394:	17db      	asrs	r3, r3, #31
    7396:	401d      	ands	r5, r3
    7398:	68a3      	ldr	r3, [r4, #8]
    739a:	6922      	ldr	r2, [r4, #16]
    739c:	4293      	cmp	r3, r2
    739e:	dd01      	ble.n	73a4 <_printf_common+0x7c>
    73a0:	1a9b      	subs	r3, r3, r2
    73a2:	18ed      	adds	r5, r5, r3
    73a4:	2700      	movs	r7, #0
    73a6:	42bd      	cmp	r5, r7
    73a8:	d120      	bne.n	73ec <_printf_common+0xc4>
    73aa:	2000      	movs	r0, #0
    73ac:	e010      	b.n	73d0 <_printf_common+0xa8>
    73ae:	3701      	adds	r7, #1
    73b0:	68e3      	ldr	r3, [r4, #12]
    73b2:	682a      	ldr	r2, [r5, #0]
    73b4:	1a9b      	subs	r3, r3, r2
    73b6:	429f      	cmp	r7, r3
    73b8:	dad2      	bge.n	7360 <_printf_common+0x38>
    73ba:	0022      	movs	r2, r4
    73bc:	2301      	movs	r3, #1
    73be:	3219      	adds	r2, #25
    73c0:	9901      	ldr	r1, [sp, #4]
    73c2:	9800      	ldr	r0, [sp, #0]
    73c4:	9e08      	ldr	r6, [sp, #32]
    73c6:	47b0      	blx	r6
    73c8:	1c43      	adds	r3, r0, #1
    73ca:	d1f0      	bne.n	73ae <_printf_common+0x86>
    73cc:	2001      	movs	r0, #1
    73ce:	4240      	negs	r0, r0
    73d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    73d2:	2030      	movs	r0, #48	; 0x30
    73d4:	18e1      	adds	r1, r4, r3
    73d6:	3143      	adds	r1, #67	; 0x43
    73d8:	7008      	strb	r0, [r1, #0]
    73da:	0021      	movs	r1, r4
    73dc:	1c5a      	adds	r2, r3, #1
    73de:	3145      	adds	r1, #69	; 0x45
    73e0:	7809      	ldrb	r1, [r1, #0]
    73e2:	18a2      	adds	r2, r4, r2
    73e4:	3243      	adds	r2, #67	; 0x43
    73e6:	3302      	adds	r3, #2
    73e8:	7011      	strb	r1, [r2, #0]
    73ea:	e7c1      	b.n	7370 <_printf_common+0x48>
    73ec:	0022      	movs	r2, r4
    73ee:	2301      	movs	r3, #1
    73f0:	321a      	adds	r2, #26
    73f2:	9901      	ldr	r1, [sp, #4]
    73f4:	9800      	ldr	r0, [sp, #0]
    73f6:	9e08      	ldr	r6, [sp, #32]
    73f8:	47b0      	blx	r6
    73fa:	1c43      	adds	r3, r0, #1
    73fc:	d0e6      	beq.n	73cc <_printf_common+0xa4>
    73fe:	3701      	adds	r7, #1
    7400:	e7d1      	b.n	73a6 <_printf_common+0x7e>
	...

00007404 <_printf_i>:
    7404:	b5f0      	push	{r4, r5, r6, r7, lr}
    7406:	b08b      	sub	sp, #44	; 0x2c
    7408:	9206      	str	r2, [sp, #24]
    740a:	000a      	movs	r2, r1
    740c:	3243      	adds	r2, #67	; 0x43
    740e:	9307      	str	r3, [sp, #28]
    7410:	9005      	str	r0, [sp, #20]
    7412:	9204      	str	r2, [sp, #16]
    7414:	7e0a      	ldrb	r2, [r1, #24]
    7416:	000c      	movs	r4, r1
    7418:	9b10      	ldr	r3, [sp, #64]	; 0x40
    741a:	2a6e      	cmp	r2, #110	; 0x6e
    741c:	d100      	bne.n	7420 <_printf_i+0x1c>
    741e:	e08f      	b.n	7540 <_printf_i+0x13c>
    7420:	d817      	bhi.n	7452 <_printf_i+0x4e>
    7422:	2a63      	cmp	r2, #99	; 0x63
    7424:	d02c      	beq.n	7480 <_printf_i+0x7c>
    7426:	d808      	bhi.n	743a <_printf_i+0x36>
    7428:	2a00      	cmp	r2, #0
    742a:	d100      	bne.n	742e <_printf_i+0x2a>
    742c:	e099      	b.n	7562 <_printf_i+0x15e>
    742e:	2a58      	cmp	r2, #88	; 0x58
    7430:	d054      	beq.n	74dc <_printf_i+0xd8>
    7432:	0026      	movs	r6, r4
    7434:	3642      	adds	r6, #66	; 0x42
    7436:	7032      	strb	r2, [r6, #0]
    7438:	e029      	b.n	748e <_printf_i+0x8a>
    743a:	2a64      	cmp	r2, #100	; 0x64
    743c:	d001      	beq.n	7442 <_printf_i+0x3e>
    743e:	2a69      	cmp	r2, #105	; 0x69
    7440:	d1f7      	bne.n	7432 <_printf_i+0x2e>
    7442:	6821      	ldr	r1, [r4, #0]
    7444:	681a      	ldr	r2, [r3, #0]
    7446:	0608      	lsls	r0, r1, #24
    7448:	d523      	bpl.n	7492 <_printf_i+0x8e>
    744a:	1d11      	adds	r1, r2, #4
    744c:	6019      	str	r1, [r3, #0]
    744e:	6815      	ldr	r5, [r2, #0]
    7450:	e025      	b.n	749e <_printf_i+0x9a>
    7452:	2a73      	cmp	r2, #115	; 0x73
    7454:	d100      	bne.n	7458 <_printf_i+0x54>
    7456:	e088      	b.n	756a <_printf_i+0x166>
    7458:	d808      	bhi.n	746c <_printf_i+0x68>
    745a:	2a6f      	cmp	r2, #111	; 0x6f
    745c:	d029      	beq.n	74b2 <_printf_i+0xae>
    745e:	2a70      	cmp	r2, #112	; 0x70
    7460:	d1e7      	bne.n	7432 <_printf_i+0x2e>
    7462:	2220      	movs	r2, #32
    7464:	6809      	ldr	r1, [r1, #0]
    7466:	430a      	orrs	r2, r1
    7468:	6022      	str	r2, [r4, #0]
    746a:	e003      	b.n	7474 <_printf_i+0x70>
    746c:	2a75      	cmp	r2, #117	; 0x75
    746e:	d020      	beq.n	74b2 <_printf_i+0xae>
    7470:	2a78      	cmp	r2, #120	; 0x78
    7472:	d1de      	bne.n	7432 <_printf_i+0x2e>
    7474:	0022      	movs	r2, r4
    7476:	2178      	movs	r1, #120	; 0x78
    7478:	3245      	adds	r2, #69	; 0x45
    747a:	7011      	strb	r1, [r2, #0]
    747c:	4a6c      	ldr	r2, [pc, #432]	; (7630 <_printf_i+0x22c>)
    747e:	e030      	b.n	74e2 <_printf_i+0xde>
    7480:	000e      	movs	r6, r1
    7482:	681a      	ldr	r2, [r3, #0]
    7484:	3642      	adds	r6, #66	; 0x42
    7486:	1d11      	adds	r1, r2, #4
    7488:	6019      	str	r1, [r3, #0]
    748a:	6813      	ldr	r3, [r2, #0]
    748c:	7033      	strb	r3, [r6, #0]
    748e:	2301      	movs	r3, #1
    7490:	e079      	b.n	7586 <_printf_i+0x182>
    7492:	0649      	lsls	r1, r1, #25
    7494:	d5d9      	bpl.n	744a <_printf_i+0x46>
    7496:	1d11      	adds	r1, r2, #4
    7498:	6019      	str	r1, [r3, #0]
    749a:	2300      	movs	r3, #0
    749c:	5ed5      	ldrsh	r5, [r2, r3]
    749e:	2d00      	cmp	r5, #0
    74a0:	da03      	bge.n	74aa <_printf_i+0xa6>
    74a2:	232d      	movs	r3, #45	; 0x2d
    74a4:	9a04      	ldr	r2, [sp, #16]
    74a6:	426d      	negs	r5, r5
    74a8:	7013      	strb	r3, [r2, #0]
    74aa:	4b62      	ldr	r3, [pc, #392]	; (7634 <_printf_i+0x230>)
    74ac:	270a      	movs	r7, #10
    74ae:	9303      	str	r3, [sp, #12]
    74b0:	e02f      	b.n	7512 <_printf_i+0x10e>
    74b2:	6820      	ldr	r0, [r4, #0]
    74b4:	6819      	ldr	r1, [r3, #0]
    74b6:	0605      	lsls	r5, r0, #24
    74b8:	d503      	bpl.n	74c2 <_printf_i+0xbe>
    74ba:	1d08      	adds	r0, r1, #4
    74bc:	6018      	str	r0, [r3, #0]
    74be:	680d      	ldr	r5, [r1, #0]
    74c0:	e005      	b.n	74ce <_printf_i+0xca>
    74c2:	0640      	lsls	r0, r0, #25
    74c4:	d5f9      	bpl.n	74ba <_printf_i+0xb6>
    74c6:	680d      	ldr	r5, [r1, #0]
    74c8:	1d08      	adds	r0, r1, #4
    74ca:	6018      	str	r0, [r3, #0]
    74cc:	b2ad      	uxth	r5, r5
    74ce:	4b59      	ldr	r3, [pc, #356]	; (7634 <_printf_i+0x230>)
    74d0:	2708      	movs	r7, #8
    74d2:	9303      	str	r3, [sp, #12]
    74d4:	2a6f      	cmp	r2, #111	; 0x6f
    74d6:	d018      	beq.n	750a <_printf_i+0x106>
    74d8:	270a      	movs	r7, #10
    74da:	e016      	b.n	750a <_printf_i+0x106>
    74dc:	3145      	adds	r1, #69	; 0x45
    74de:	700a      	strb	r2, [r1, #0]
    74e0:	4a54      	ldr	r2, [pc, #336]	; (7634 <_printf_i+0x230>)
    74e2:	9203      	str	r2, [sp, #12]
    74e4:	681a      	ldr	r2, [r3, #0]
    74e6:	6821      	ldr	r1, [r4, #0]
    74e8:	1d10      	adds	r0, r2, #4
    74ea:	6018      	str	r0, [r3, #0]
    74ec:	6815      	ldr	r5, [r2, #0]
    74ee:	0608      	lsls	r0, r1, #24
    74f0:	d522      	bpl.n	7538 <_printf_i+0x134>
    74f2:	07cb      	lsls	r3, r1, #31
    74f4:	d502      	bpl.n	74fc <_printf_i+0xf8>
    74f6:	2320      	movs	r3, #32
    74f8:	4319      	orrs	r1, r3
    74fa:	6021      	str	r1, [r4, #0]
    74fc:	2710      	movs	r7, #16
    74fe:	2d00      	cmp	r5, #0
    7500:	d103      	bne.n	750a <_printf_i+0x106>
    7502:	2320      	movs	r3, #32
    7504:	6822      	ldr	r2, [r4, #0]
    7506:	439a      	bics	r2, r3
    7508:	6022      	str	r2, [r4, #0]
    750a:	0023      	movs	r3, r4
    750c:	2200      	movs	r2, #0
    750e:	3343      	adds	r3, #67	; 0x43
    7510:	701a      	strb	r2, [r3, #0]
    7512:	6863      	ldr	r3, [r4, #4]
    7514:	60a3      	str	r3, [r4, #8]
    7516:	2b00      	cmp	r3, #0
    7518:	db5c      	blt.n	75d4 <_printf_i+0x1d0>
    751a:	2204      	movs	r2, #4
    751c:	6821      	ldr	r1, [r4, #0]
    751e:	4391      	bics	r1, r2
    7520:	6021      	str	r1, [r4, #0]
    7522:	2d00      	cmp	r5, #0
    7524:	d158      	bne.n	75d8 <_printf_i+0x1d4>
    7526:	9e04      	ldr	r6, [sp, #16]
    7528:	2b00      	cmp	r3, #0
    752a:	d064      	beq.n	75f6 <_printf_i+0x1f2>
    752c:	0026      	movs	r6, r4
    752e:	9b03      	ldr	r3, [sp, #12]
    7530:	3642      	adds	r6, #66	; 0x42
    7532:	781b      	ldrb	r3, [r3, #0]
    7534:	7033      	strb	r3, [r6, #0]
    7536:	e05e      	b.n	75f6 <_printf_i+0x1f2>
    7538:	0648      	lsls	r0, r1, #25
    753a:	d5da      	bpl.n	74f2 <_printf_i+0xee>
    753c:	b2ad      	uxth	r5, r5
    753e:	e7d8      	b.n	74f2 <_printf_i+0xee>
    7540:	6809      	ldr	r1, [r1, #0]
    7542:	681a      	ldr	r2, [r3, #0]
    7544:	0608      	lsls	r0, r1, #24
    7546:	d505      	bpl.n	7554 <_printf_i+0x150>
    7548:	1d11      	adds	r1, r2, #4
    754a:	6019      	str	r1, [r3, #0]
    754c:	6813      	ldr	r3, [r2, #0]
    754e:	6962      	ldr	r2, [r4, #20]
    7550:	601a      	str	r2, [r3, #0]
    7552:	e006      	b.n	7562 <_printf_i+0x15e>
    7554:	0649      	lsls	r1, r1, #25
    7556:	d5f7      	bpl.n	7548 <_printf_i+0x144>
    7558:	1d11      	adds	r1, r2, #4
    755a:	6019      	str	r1, [r3, #0]
    755c:	6813      	ldr	r3, [r2, #0]
    755e:	8aa2      	ldrh	r2, [r4, #20]
    7560:	801a      	strh	r2, [r3, #0]
    7562:	2300      	movs	r3, #0
    7564:	9e04      	ldr	r6, [sp, #16]
    7566:	6123      	str	r3, [r4, #16]
    7568:	e054      	b.n	7614 <_printf_i+0x210>
    756a:	681a      	ldr	r2, [r3, #0]
    756c:	1d11      	adds	r1, r2, #4
    756e:	6019      	str	r1, [r3, #0]
    7570:	6816      	ldr	r6, [r2, #0]
    7572:	2100      	movs	r1, #0
    7574:	6862      	ldr	r2, [r4, #4]
    7576:	0030      	movs	r0, r6
    7578:	f000 f9e6 	bl	7948 <memchr>
    757c:	2800      	cmp	r0, #0
    757e:	d001      	beq.n	7584 <_printf_i+0x180>
    7580:	1b80      	subs	r0, r0, r6
    7582:	6060      	str	r0, [r4, #4]
    7584:	6863      	ldr	r3, [r4, #4]
    7586:	6123      	str	r3, [r4, #16]
    7588:	2300      	movs	r3, #0
    758a:	9a04      	ldr	r2, [sp, #16]
    758c:	7013      	strb	r3, [r2, #0]
    758e:	e041      	b.n	7614 <_printf_i+0x210>
    7590:	6923      	ldr	r3, [r4, #16]
    7592:	0032      	movs	r2, r6
    7594:	9906      	ldr	r1, [sp, #24]
    7596:	9805      	ldr	r0, [sp, #20]
    7598:	9d07      	ldr	r5, [sp, #28]
    759a:	47a8      	blx	r5
    759c:	1c43      	adds	r3, r0, #1
    759e:	d043      	beq.n	7628 <_printf_i+0x224>
    75a0:	6823      	ldr	r3, [r4, #0]
    75a2:	2500      	movs	r5, #0
    75a4:	079b      	lsls	r3, r3, #30
    75a6:	d40f      	bmi.n	75c8 <_printf_i+0x1c4>
    75a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    75aa:	68e0      	ldr	r0, [r4, #12]
    75ac:	4298      	cmp	r0, r3
    75ae:	da3d      	bge.n	762c <_printf_i+0x228>
    75b0:	0018      	movs	r0, r3
    75b2:	e03b      	b.n	762c <_printf_i+0x228>
    75b4:	0022      	movs	r2, r4
    75b6:	2301      	movs	r3, #1
    75b8:	3219      	adds	r2, #25
    75ba:	9906      	ldr	r1, [sp, #24]
    75bc:	9805      	ldr	r0, [sp, #20]
    75be:	9e07      	ldr	r6, [sp, #28]
    75c0:	47b0      	blx	r6
    75c2:	1c43      	adds	r3, r0, #1
    75c4:	d030      	beq.n	7628 <_printf_i+0x224>
    75c6:	3501      	adds	r5, #1
    75c8:	68e3      	ldr	r3, [r4, #12]
    75ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    75cc:	1a9b      	subs	r3, r3, r2
    75ce:	429d      	cmp	r5, r3
    75d0:	dbf0      	blt.n	75b4 <_printf_i+0x1b0>
    75d2:	e7e9      	b.n	75a8 <_printf_i+0x1a4>
    75d4:	2d00      	cmp	r5, #0
    75d6:	d0a9      	beq.n	752c <_printf_i+0x128>
    75d8:	9e04      	ldr	r6, [sp, #16]
    75da:	0028      	movs	r0, r5
    75dc:	0039      	movs	r1, r7
    75de:	f7fe ff69 	bl	64b4 <__aeabi_uidivmod>
    75e2:	9b03      	ldr	r3, [sp, #12]
    75e4:	3e01      	subs	r6, #1
    75e6:	5c5b      	ldrb	r3, [r3, r1]
    75e8:	0028      	movs	r0, r5
    75ea:	7033      	strb	r3, [r6, #0]
    75ec:	0039      	movs	r1, r7
    75ee:	f7fe fedb 	bl	63a8 <__udivsi3>
    75f2:	1e05      	subs	r5, r0, #0
    75f4:	d1f1      	bne.n	75da <_printf_i+0x1d6>
    75f6:	2f08      	cmp	r7, #8
    75f8:	d109      	bne.n	760e <_printf_i+0x20a>
    75fa:	6823      	ldr	r3, [r4, #0]
    75fc:	07db      	lsls	r3, r3, #31
    75fe:	d506      	bpl.n	760e <_printf_i+0x20a>
    7600:	6863      	ldr	r3, [r4, #4]
    7602:	6922      	ldr	r2, [r4, #16]
    7604:	4293      	cmp	r3, r2
    7606:	dc02      	bgt.n	760e <_printf_i+0x20a>
    7608:	2330      	movs	r3, #48	; 0x30
    760a:	3e01      	subs	r6, #1
    760c:	7033      	strb	r3, [r6, #0]
    760e:	9b04      	ldr	r3, [sp, #16]
    7610:	1b9b      	subs	r3, r3, r6
    7612:	6123      	str	r3, [r4, #16]
    7614:	9b07      	ldr	r3, [sp, #28]
    7616:	aa09      	add	r2, sp, #36	; 0x24
    7618:	9300      	str	r3, [sp, #0]
    761a:	0021      	movs	r1, r4
    761c:	9b06      	ldr	r3, [sp, #24]
    761e:	9805      	ldr	r0, [sp, #20]
    7620:	f7ff fe82 	bl	7328 <_printf_common>
    7624:	1c43      	adds	r3, r0, #1
    7626:	d1b3      	bne.n	7590 <_printf_i+0x18c>
    7628:	2001      	movs	r0, #1
    762a:	4240      	negs	r0, r0
    762c:	b00b      	add	sp, #44	; 0x2c
    762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7630:	0000816e 	.word	0x0000816e
    7634:	0000815d 	.word	0x0000815d

00007638 <_sbrk_r>:
    7638:	2300      	movs	r3, #0
    763a:	b570      	push	{r4, r5, r6, lr}
    763c:	4c06      	ldr	r4, [pc, #24]	; (7658 <_sbrk_r+0x20>)
    763e:	0005      	movs	r5, r0
    7640:	0008      	movs	r0, r1
    7642:	6023      	str	r3, [r4, #0]
    7644:	f7fe fe92 	bl	636c <_sbrk>
    7648:	1c43      	adds	r3, r0, #1
    764a:	d103      	bne.n	7654 <_sbrk_r+0x1c>
    764c:	6823      	ldr	r3, [r4, #0]
    764e:	2b00      	cmp	r3, #0
    7650:	d000      	beq.n	7654 <_sbrk_r+0x1c>
    7652:	602b      	str	r3, [r5, #0]
    7654:	bd70      	pop	{r4, r5, r6, pc}
    7656:	46c0      	nop			; (mov r8, r8)
    7658:	20000b0c 	.word	0x20000b0c

0000765c <__sread>:
    765c:	b570      	push	{r4, r5, r6, lr}
    765e:	000c      	movs	r4, r1
    7660:	250e      	movs	r5, #14
    7662:	5f49      	ldrsh	r1, [r1, r5]
    7664:	f000 f97e 	bl	7964 <_read_r>
    7668:	2800      	cmp	r0, #0
    766a:	db03      	blt.n	7674 <__sread+0x18>
    766c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    766e:	181b      	adds	r3, r3, r0
    7670:	6563      	str	r3, [r4, #84]	; 0x54
    7672:	bd70      	pop	{r4, r5, r6, pc}
    7674:	89a3      	ldrh	r3, [r4, #12]
    7676:	4a02      	ldr	r2, [pc, #8]	; (7680 <__sread+0x24>)
    7678:	4013      	ands	r3, r2
    767a:	81a3      	strh	r3, [r4, #12]
    767c:	e7f9      	b.n	7672 <__sread+0x16>
    767e:	46c0      	nop			; (mov r8, r8)
    7680:	ffffefff 	.word	0xffffefff

00007684 <__swrite>:
    7684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7686:	001f      	movs	r7, r3
    7688:	898b      	ldrh	r3, [r1, #12]
    768a:	0005      	movs	r5, r0
    768c:	000c      	movs	r4, r1
    768e:	0016      	movs	r6, r2
    7690:	05db      	lsls	r3, r3, #23
    7692:	d505      	bpl.n	76a0 <__swrite+0x1c>
    7694:	230e      	movs	r3, #14
    7696:	5ec9      	ldrsh	r1, [r1, r3]
    7698:	2200      	movs	r2, #0
    769a:	2302      	movs	r3, #2
    769c:	f000 f940 	bl	7920 <_lseek_r>
    76a0:	89a3      	ldrh	r3, [r4, #12]
    76a2:	4a05      	ldr	r2, [pc, #20]	; (76b8 <__swrite+0x34>)
    76a4:	0028      	movs	r0, r5
    76a6:	4013      	ands	r3, r2
    76a8:	81a3      	strh	r3, [r4, #12]
    76aa:	0032      	movs	r2, r6
    76ac:	230e      	movs	r3, #14
    76ae:	5ee1      	ldrsh	r1, [r4, r3]
    76b0:	003b      	movs	r3, r7
    76b2:	f000 f875 	bl	77a0 <_write_r>
    76b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76b8:	ffffefff 	.word	0xffffefff

000076bc <__sseek>:
    76bc:	b570      	push	{r4, r5, r6, lr}
    76be:	000c      	movs	r4, r1
    76c0:	250e      	movs	r5, #14
    76c2:	5f49      	ldrsh	r1, [r1, r5]
    76c4:	f000 f92c 	bl	7920 <_lseek_r>
    76c8:	89a3      	ldrh	r3, [r4, #12]
    76ca:	1c42      	adds	r2, r0, #1
    76cc:	d103      	bne.n	76d6 <__sseek+0x1a>
    76ce:	4a05      	ldr	r2, [pc, #20]	; (76e4 <__sseek+0x28>)
    76d0:	4013      	ands	r3, r2
    76d2:	81a3      	strh	r3, [r4, #12]
    76d4:	bd70      	pop	{r4, r5, r6, pc}
    76d6:	2280      	movs	r2, #128	; 0x80
    76d8:	0152      	lsls	r2, r2, #5
    76da:	4313      	orrs	r3, r2
    76dc:	81a3      	strh	r3, [r4, #12]
    76de:	6560      	str	r0, [r4, #84]	; 0x54
    76e0:	e7f8      	b.n	76d4 <__sseek+0x18>
    76e2:	46c0      	nop			; (mov r8, r8)
    76e4:	ffffefff 	.word	0xffffefff

000076e8 <__sclose>:
    76e8:	b510      	push	{r4, lr}
    76ea:	230e      	movs	r3, #14
    76ec:	5ec9      	ldrsh	r1, [r1, r3]
    76ee:	f000 f8e1 	bl	78b4 <_close_r>
    76f2:	bd10      	pop	{r4, pc}

000076f4 <__swbuf_r>:
    76f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76f6:	0005      	movs	r5, r0
    76f8:	000e      	movs	r6, r1
    76fa:	0014      	movs	r4, r2
    76fc:	2800      	cmp	r0, #0
    76fe:	d004      	beq.n	770a <__swbuf_r+0x16>
    7700:	6983      	ldr	r3, [r0, #24]
    7702:	2b00      	cmp	r3, #0
    7704:	d101      	bne.n	770a <__swbuf_r+0x16>
    7706:	f7ff fb17 	bl	6d38 <__sinit>
    770a:	4b22      	ldr	r3, [pc, #136]	; (7794 <__swbuf_r+0xa0>)
    770c:	429c      	cmp	r4, r3
    770e:	d12d      	bne.n	776c <__swbuf_r+0x78>
    7710:	686c      	ldr	r4, [r5, #4]
    7712:	69a3      	ldr	r3, [r4, #24]
    7714:	60a3      	str	r3, [r4, #8]
    7716:	89a3      	ldrh	r3, [r4, #12]
    7718:	071b      	lsls	r3, r3, #28
    771a:	d531      	bpl.n	7780 <__swbuf_r+0x8c>
    771c:	6923      	ldr	r3, [r4, #16]
    771e:	2b00      	cmp	r3, #0
    7720:	d02e      	beq.n	7780 <__swbuf_r+0x8c>
    7722:	6823      	ldr	r3, [r4, #0]
    7724:	6922      	ldr	r2, [r4, #16]
    7726:	b2f7      	uxtb	r7, r6
    7728:	1a98      	subs	r0, r3, r2
    772a:	6963      	ldr	r3, [r4, #20]
    772c:	b2f6      	uxtb	r6, r6
    772e:	4298      	cmp	r0, r3
    7730:	db05      	blt.n	773e <__swbuf_r+0x4a>
    7732:	0021      	movs	r1, r4
    7734:	0028      	movs	r0, r5
    7736:	f7ff fa91 	bl	6c5c <_fflush_r>
    773a:	2800      	cmp	r0, #0
    773c:	d126      	bne.n	778c <__swbuf_r+0x98>
    773e:	68a3      	ldr	r3, [r4, #8]
    7740:	3001      	adds	r0, #1
    7742:	3b01      	subs	r3, #1
    7744:	60a3      	str	r3, [r4, #8]
    7746:	6823      	ldr	r3, [r4, #0]
    7748:	1c5a      	adds	r2, r3, #1
    774a:	6022      	str	r2, [r4, #0]
    774c:	701f      	strb	r7, [r3, #0]
    774e:	6963      	ldr	r3, [r4, #20]
    7750:	4298      	cmp	r0, r3
    7752:	d004      	beq.n	775e <__swbuf_r+0x6a>
    7754:	89a3      	ldrh	r3, [r4, #12]
    7756:	07db      	lsls	r3, r3, #31
    7758:	d51a      	bpl.n	7790 <__swbuf_r+0x9c>
    775a:	2e0a      	cmp	r6, #10
    775c:	d118      	bne.n	7790 <__swbuf_r+0x9c>
    775e:	0021      	movs	r1, r4
    7760:	0028      	movs	r0, r5
    7762:	f7ff fa7b 	bl	6c5c <_fflush_r>
    7766:	2800      	cmp	r0, #0
    7768:	d012      	beq.n	7790 <__swbuf_r+0x9c>
    776a:	e00f      	b.n	778c <__swbuf_r+0x98>
    776c:	4b0a      	ldr	r3, [pc, #40]	; (7798 <__swbuf_r+0xa4>)
    776e:	429c      	cmp	r4, r3
    7770:	d101      	bne.n	7776 <__swbuf_r+0x82>
    7772:	68ac      	ldr	r4, [r5, #8]
    7774:	e7cd      	b.n	7712 <__swbuf_r+0x1e>
    7776:	4b09      	ldr	r3, [pc, #36]	; (779c <__swbuf_r+0xa8>)
    7778:	429c      	cmp	r4, r3
    777a:	d1ca      	bne.n	7712 <__swbuf_r+0x1e>
    777c:	68ec      	ldr	r4, [r5, #12]
    777e:	e7c8      	b.n	7712 <__swbuf_r+0x1e>
    7780:	0021      	movs	r1, r4
    7782:	0028      	movs	r0, r5
    7784:	f000 f820 	bl	77c8 <__swsetup_r>
    7788:	2800      	cmp	r0, #0
    778a:	d0ca      	beq.n	7722 <__swbuf_r+0x2e>
    778c:	2601      	movs	r6, #1
    778e:	4276      	negs	r6, r6
    7790:	0030      	movs	r0, r6
    7792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7794:	0000810c 	.word	0x0000810c
    7798:	0000812c 	.word	0x0000812c
    779c:	000080ec 	.word	0x000080ec

000077a0 <_write_r>:
    77a0:	b570      	push	{r4, r5, r6, lr}
    77a2:	0005      	movs	r5, r0
    77a4:	0008      	movs	r0, r1
    77a6:	0011      	movs	r1, r2
    77a8:	2200      	movs	r2, #0
    77aa:	4c06      	ldr	r4, [pc, #24]	; (77c4 <_write_r+0x24>)
    77ac:	6022      	str	r2, [r4, #0]
    77ae:	001a      	movs	r2, r3
    77b0:	f7fa fb24 	bl	1dfc <_write>
    77b4:	1c43      	adds	r3, r0, #1
    77b6:	d103      	bne.n	77c0 <_write_r+0x20>
    77b8:	6823      	ldr	r3, [r4, #0]
    77ba:	2b00      	cmp	r3, #0
    77bc:	d000      	beq.n	77c0 <_write_r+0x20>
    77be:	602b      	str	r3, [r5, #0]
    77c0:	bd70      	pop	{r4, r5, r6, pc}
    77c2:	46c0      	nop			; (mov r8, r8)
    77c4:	20000b0c 	.word	0x20000b0c

000077c8 <__swsetup_r>:
    77c8:	4b36      	ldr	r3, [pc, #216]	; (78a4 <__swsetup_r+0xdc>)
    77ca:	b570      	push	{r4, r5, r6, lr}
    77cc:	681d      	ldr	r5, [r3, #0]
    77ce:	0006      	movs	r6, r0
    77d0:	000c      	movs	r4, r1
    77d2:	2d00      	cmp	r5, #0
    77d4:	d005      	beq.n	77e2 <__swsetup_r+0x1a>
    77d6:	69ab      	ldr	r3, [r5, #24]
    77d8:	2b00      	cmp	r3, #0
    77da:	d102      	bne.n	77e2 <__swsetup_r+0x1a>
    77dc:	0028      	movs	r0, r5
    77de:	f7ff faab 	bl	6d38 <__sinit>
    77e2:	4b31      	ldr	r3, [pc, #196]	; (78a8 <__swsetup_r+0xe0>)
    77e4:	429c      	cmp	r4, r3
    77e6:	d10f      	bne.n	7808 <__swsetup_r+0x40>
    77e8:	686c      	ldr	r4, [r5, #4]
    77ea:	230c      	movs	r3, #12
    77ec:	5ee2      	ldrsh	r2, [r4, r3]
    77ee:	b293      	uxth	r3, r2
    77f0:	0719      	lsls	r1, r3, #28
    77f2:	d42d      	bmi.n	7850 <__swsetup_r+0x88>
    77f4:	06d9      	lsls	r1, r3, #27
    77f6:	d411      	bmi.n	781c <__swsetup_r+0x54>
    77f8:	2309      	movs	r3, #9
    77fa:	2001      	movs	r0, #1
    77fc:	6033      	str	r3, [r6, #0]
    77fe:	3337      	adds	r3, #55	; 0x37
    7800:	4313      	orrs	r3, r2
    7802:	81a3      	strh	r3, [r4, #12]
    7804:	4240      	negs	r0, r0
    7806:	bd70      	pop	{r4, r5, r6, pc}
    7808:	4b28      	ldr	r3, [pc, #160]	; (78ac <__swsetup_r+0xe4>)
    780a:	429c      	cmp	r4, r3
    780c:	d101      	bne.n	7812 <__swsetup_r+0x4a>
    780e:	68ac      	ldr	r4, [r5, #8]
    7810:	e7eb      	b.n	77ea <__swsetup_r+0x22>
    7812:	4b27      	ldr	r3, [pc, #156]	; (78b0 <__swsetup_r+0xe8>)
    7814:	429c      	cmp	r4, r3
    7816:	d1e8      	bne.n	77ea <__swsetup_r+0x22>
    7818:	68ec      	ldr	r4, [r5, #12]
    781a:	e7e6      	b.n	77ea <__swsetup_r+0x22>
    781c:	075b      	lsls	r3, r3, #29
    781e:	d513      	bpl.n	7848 <__swsetup_r+0x80>
    7820:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7822:	2900      	cmp	r1, #0
    7824:	d008      	beq.n	7838 <__swsetup_r+0x70>
    7826:	0023      	movs	r3, r4
    7828:	3344      	adds	r3, #68	; 0x44
    782a:	4299      	cmp	r1, r3
    782c:	d002      	beq.n	7834 <__swsetup_r+0x6c>
    782e:	0030      	movs	r0, r6
    7830:	f7ff fb8e 	bl	6f50 <_free_r>
    7834:	2300      	movs	r3, #0
    7836:	6363      	str	r3, [r4, #52]	; 0x34
    7838:	2224      	movs	r2, #36	; 0x24
    783a:	89a3      	ldrh	r3, [r4, #12]
    783c:	4393      	bics	r3, r2
    783e:	81a3      	strh	r3, [r4, #12]
    7840:	2300      	movs	r3, #0
    7842:	6063      	str	r3, [r4, #4]
    7844:	6923      	ldr	r3, [r4, #16]
    7846:	6023      	str	r3, [r4, #0]
    7848:	2308      	movs	r3, #8
    784a:	89a2      	ldrh	r2, [r4, #12]
    784c:	4313      	orrs	r3, r2
    784e:	81a3      	strh	r3, [r4, #12]
    7850:	6923      	ldr	r3, [r4, #16]
    7852:	2b00      	cmp	r3, #0
    7854:	d10b      	bne.n	786e <__swsetup_r+0xa6>
    7856:	21a0      	movs	r1, #160	; 0xa0
    7858:	2280      	movs	r2, #128	; 0x80
    785a:	89a3      	ldrh	r3, [r4, #12]
    785c:	0089      	lsls	r1, r1, #2
    785e:	0092      	lsls	r2, r2, #2
    7860:	400b      	ands	r3, r1
    7862:	4293      	cmp	r3, r2
    7864:	d003      	beq.n	786e <__swsetup_r+0xa6>
    7866:	0021      	movs	r1, r4
    7868:	0030      	movs	r0, r6
    786a:	f7ff fb23 	bl	6eb4 <__smakebuf_r>
    786e:	2301      	movs	r3, #1
    7870:	89a2      	ldrh	r2, [r4, #12]
    7872:	4013      	ands	r3, r2
    7874:	d011      	beq.n	789a <__swsetup_r+0xd2>
    7876:	2300      	movs	r3, #0
    7878:	60a3      	str	r3, [r4, #8]
    787a:	6963      	ldr	r3, [r4, #20]
    787c:	425b      	negs	r3, r3
    787e:	61a3      	str	r3, [r4, #24]
    7880:	2000      	movs	r0, #0
    7882:	6923      	ldr	r3, [r4, #16]
    7884:	4283      	cmp	r3, r0
    7886:	d1be      	bne.n	7806 <__swsetup_r+0x3e>
    7888:	230c      	movs	r3, #12
    788a:	5ee2      	ldrsh	r2, [r4, r3]
    788c:	0613      	lsls	r3, r2, #24
    788e:	d5ba      	bpl.n	7806 <__swsetup_r+0x3e>
    7890:	2340      	movs	r3, #64	; 0x40
    7892:	4313      	orrs	r3, r2
    7894:	81a3      	strh	r3, [r4, #12]
    7896:	3801      	subs	r0, #1
    7898:	e7b5      	b.n	7806 <__swsetup_r+0x3e>
    789a:	0792      	lsls	r2, r2, #30
    789c:	d400      	bmi.n	78a0 <__swsetup_r+0xd8>
    789e:	6963      	ldr	r3, [r4, #20]
    78a0:	60a3      	str	r3, [r4, #8]
    78a2:	e7ed      	b.n	7880 <__swsetup_r+0xb8>
    78a4:	2000006c 	.word	0x2000006c
    78a8:	0000810c 	.word	0x0000810c
    78ac:	0000812c 	.word	0x0000812c
    78b0:	000080ec 	.word	0x000080ec

000078b4 <_close_r>:
    78b4:	2300      	movs	r3, #0
    78b6:	b570      	push	{r4, r5, r6, lr}
    78b8:	4c06      	ldr	r4, [pc, #24]	; (78d4 <_close_r+0x20>)
    78ba:	0005      	movs	r5, r0
    78bc:	0008      	movs	r0, r1
    78be:	6023      	str	r3, [r4, #0]
    78c0:	f7fe fd66 	bl	6390 <_close>
    78c4:	1c43      	adds	r3, r0, #1
    78c6:	d103      	bne.n	78d0 <_close_r+0x1c>
    78c8:	6823      	ldr	r3, [r4, #0]
    78ca:	2b00      	cmp	r3, #0
    78cc:	d000      	beq.n	78d0 <_close_r+0x1c>
    78ce:	602b      	str	r3, [r5, #0]
    78d0:	bd70      	pop	{r4, r5, r6, pc}
    78d2:	46c0      	nop			; (mov r8, r8)
    78d4:	20000b0c 	.word	0x20000b0c

000078d8 <_fstat_r>:
    78d8:	2300      	movs	r3, #0
    78da:	b570      	push	{r4, r5, r6, lr}
    78dc:	4c06      	ldr	r4, [pc, #24]	; (78f8 <_fstat_r+0x20>)
    78de:	0005      	movs	r5, r0
    78e0:	0008      	movs	r0, r1
    78e2:	0011      	movs	r1, r2
    78e4:	6023      	str	r3, [r4, #0]
    78e6:	f7fe fd56 	bl	6396 <_fstat>
    78ea:	1c43      	adds	r3, r0, #1
    78ec:	d103      	bne.n	78f6 <_fstat_r+0x1e>
    78ee:	6823      	ldr	r3, [r4, #0]
    78f0:	2b00      	cmp	r3, #0
    78f2:	d000      	beq.n	78f6 <_fstat_r+0x1e>
    78f4:	602b      	str	r3, [r5, #0]
    78f6:	bd70      	pop	{r4, r5, r6, pc}
    78f8:	20000b0c 	.word	0x20000b0c

000078fc <_isatty_r>:
    78fc:	2300      	movs	r3, #0
    78fe:	b570      	push	{r4, r5, r6, lr}
    7900:	4c06      	ldr	r4, [pc, #24]	; (791c <_isatty_r+0x20>)
    7902:	0005      	movs	r5, r0
    7904:	0008      	movs	r0, r1
    7906:	6023      	str	r3, [r4, #0]
    7908:	f7fe fd4a 	bl	63a0 <_isatty>
    790c:	1c43      	adds	r3, r0, #1
    790e:	d103      	bne.n	7918 <_isatty_r+0x1c>
    7910:	6823      	ldr	r3, [r4, #0]
    7912:	2b00      	cmp	r3, #0
    7914:	d000      	beq.n	7918 <_isatty_r+0x1c>
    7916:	602b      	str	r3, [r5, #0]
    7918:	bd70      	pop	{r4, r5, r6, pc}
    791a:	46c0      	nop			; (mov r8, r8)
    791c:	20000b0c 	.word	0x20000b0c

00007920 <_lseek_r>:
    7920:	b570      	push	{r4, r5, r6, lr}
    7922:	0005      	movs	r5, r0
    7924:	0008      	movs	r0, r1
    7926:	0011      	movs	r1, r2
    7928:	2200      	movs	r2, #0
    792a:	4c06      	ldr	r4, [pc, #24]	; (7944 <_lseek_r+0x24>)
    792c:	6022      	str	r2, [r4, #0]
    792e:	001a      	movs	r2, r3
    7930:	f7fe fd38 	bl	63a4 <_lseek>
    7934:	1c43      	adds	r3, r0, #1
    7936:	d103      	bne.n	7940 <_lseek_r+0x20>
    7938:	6823      	ldr	r3, [r4, #0]
    793a:	2b00      	cmp	r3, #0
    793c:	d000      	beq.n	7940 <_lseek_r+0x20>
    793e:	602b      	str	r3, [r5, #0]
    7940:	bd70      	pop	{r4, r5, r6, pc}
    7942:	46c0      	nop			; (mov r8, r8)
    7944:	20000b0c 	.word	0x20000b0c

00007948 <memchr>:
    7948:	b2c9      	uxtb	r1, r1
    794a:	1882      	adds	r2, r0, r2
    794c:	4290      	cmp	r0, r2
    794e:	d101      	bne.n	7954 <memchr+0xc>
    7950:	2000      	movs	r0, #0
    7952:	4770      	bx	lr
    7954:	7803      	ldrb	r3, [r0, #0]
    7956:	428b      	cmp	r3, r1
    7958:	d0fb      	beq.n	7952 <memchr+0xa>
    795a:	3001      	adds	r0, #1
    795c:	e7f6      	b.n	794c <memchr+0x4>

0000795e <__malloc_lock>:
    795e:	4770      	bx	lr

00007960 <__malloc_unlock>:
    7960:	4770      	bx	lr
	...

00007964 <_read_r>:
    7964:	b570      	push	{r4, r5, r6, lr}
    7966:	0005      	movs	r5, r0
    7968:	0008      	movs	r0, r1
    796a:	0011      	movs	r1, r2
    796c:	2200      	movs	r2, #0
    796e:	4c06      	ldr	r4, [pc, #24]	; (7988 <_read_r+0x24>)
    7970:	6022      	str	r2, [r4, #0]
    7972:	001a      	movs	r2, r3
    7974:	f7fa fa20 	bl	1db8 <_read>
    7978:	1c43      	adds	r3, r0, #1
    797a:	d103      	bne.n	7984 <_read_r+0x20>
    797c:	6823      	ldr	r3, [r4, #0]
    797e:	2b00      	cmp	r3, #0
    7980:	d000      	beq.n	7984 <_read_r+0x20>
    7982:	602b      	str	r3, [r5, #0]
    7984:	bd70      	pop	{r4, r5, r6, pc}
    7986:	46c0      	nop			; (mov r8, r8)
    7988:	20000b0c 	.word	0x20000b0c

0000798c <_tcc_intflag>:
    798c:	00000001 00000002 00000004 00000008     ................
    799c:	00001000 00002000 00004000 00008000     ..... ...@......
    79ac:	00010000 00020000 00040000 00080000     ................

000079bc <mmc_trans_multipliers>:
    79bc:	00000000 0000000a 0000000c 0000000d     ................
    79cc:	0000000f 00000014 0000001a 0000001e     ................
    79dc:	00000023 00000028 0000002d 00000034     #...(...-...4...
    79ec:	00000037 0000003c 00000046 00000050     7...<...F...P...

000079fc <sd_mmc_trans_units>:
    79fc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00007a18 <sd_trans_multipliers>:
    7a18:	00000000 0000000a 0000000c 0000000d     ................
    7a28:	0000000f 00000014 00000019 0000001e     ................
    7a38:	00000023 00000028 0000002d 00000032     #...(...-...2...
    7a48:	00000037 0000003c 00000046 00000050     7...<...F...P...
    7a58:	000018de 000018da 000018da 00001948     ............H...
    7a68:	00001948 000018f2 000018e4 000018f8     H...............
    7a78:	00001936 00001b84 00001b64 00001b64     6.......d...d...
    7a88:	00001bf0 00001b76 00001b92 00001b68     ....v.......h...
    7a98:	00001ba0 00001be0                       ........

00007aa0 <LfnOfs>:
    7aa0:	07050301 12100e09 1c181614 0000001e     ................

00007ab0 <excvt.4558>:
    7ab0:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    7ac0:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    7ad0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    7ae0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    7af0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    7b00:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    7b10:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    7b20:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    7b30:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    7b40:	00005d5b                                []..

00007b44 <Tbl>:
    7b44:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    7b54:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    7b64:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    7b74:	00d600ff 00f800dc 00d800a3 019200d7     ................
    7b84:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    7b94:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    7ba4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    7bb4:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    7bc4:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    7bd4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    7be4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    7bf4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    7c04:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    7c14:	00da00de 00d900db 00dd00fd 00b400af     ................
    7c24:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    7c34:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00007c44 <tbl_lower.4308>:
    7c44:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    7c54:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    7c64:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    7c74:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    7c84:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    7c94:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    7ca4:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    7cb4:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    7cc4:	01050103 01090107 010d010b 0111010f     ................
    7cd4:	01150113 01190117 011d011b 0121011f     ..............!.
    7ce4:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    7cf4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    7d04:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    7d14:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    7d24:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    7d34:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    7d44:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    7d54:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    7d64:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    7d74:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    7d84:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    7d94:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    7da4:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    7db4:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    7dc4:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    7dd4:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    7de4:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    7df4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    7e04:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    7e14:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00007e24 <tbl_upper.4309>:
    7e24:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    7e34:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7e44:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    7e54:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    7e64:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    7e74:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    7e84:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    7e94:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    7ea4:	01040102 01080106 010c010a 0110010e     ................
    7eb4:	01140112 01180116 011c011a 0120011e     .............. .
    7ec4:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    7ed4:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    7ee4:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    7ef4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    7f04:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    7f14:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    7f24:	03940393 03960395 03980397 039a0399     ................
    7f34:	039c039b 039e039d 03a0039f 03a303a1     ................
    7f44:	03a503a4 03a703a6 03a903a8 041003aa     ................
    7f54:	04120411 04140413 04160415 04180417     ................
    7f64:	041a0419 041c041b 041e041d 0420041f     .............. .
    7f74:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    7f84:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    7f94:	04030402 04050404 04070406 04090408     ................
    7fa4:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    7fb4:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    7fc4:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    7fd4:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    7fe4:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    7ff4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    8004:	6f727245 68772072 20656c69 6e65706f     Error while open
    8014:	20676e69 656c6966 2523203a 000d0a64     ing file: #%d...
    8024:	6f727245 68772072 20656c69 74697277     Error while writ
    8034:	20676e69 20564157 64616568 203a7265     ing WAV header: 
    8044:	0a642523 0000000d 32303831 315f3231     #%d.....180212_1
    8054:	32393034 61772e35 00000076 4f525245     40925.wav...ERRO
    8064:	6c632052 6e69736f 65722067 64726f63     R closing record
    8074:	66206465 0a656c69 0000000d 64726143     ed file.....Card
    8084:	736e6920 6c6c6174 69616620 0d0a216c      install fail!..
    8094:	00000000 61656c50 75206573 756c706e     ....Please unplu
    80a4:	6e612067 65722064 756c702d 68742067     g and re-plug th
    80b4:	61632065 0a2e6472 0000000d              e card......

000080c0 <_usb_device_irq_bits>:
    80c0:	00080004 00800070 01000001 00000200     ....p...........
    80d0:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    80e0:	42001800 42001c00                       ...B...B

000080e8 <_global_impure_ptr>:
    80e8:	20000070                                p.. 

000080ec <__sf_fake_stderr>:
	...

0000810c <__sf_fake_stdin>:
	...

0000812c <__sf_fake_stdout>:
	...
    814c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    815c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    816c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    817c:	00006665                                ef..

00008180 <_init>:
    8180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8182:	46c0      	nop			; (mov r8, r8)
    8184:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8186:	bc08      	pop	{r3}
    8188:	469e      	mov	lr, r3
    818a:	4770      	bx	lr

0000818c <__init_array_start>:
    818c:	000000dd 	.word	0x000000dd

00008190 <_fini>:
    8190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8192:	46c0      	nop			; (mov r8, r8)
    8194:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8196:	bc08      	pop	{r3}
    8198:	469e      	mov	lr, r3
    819a:	4770      	bx	lr

0000819c <__fini_array_start>:
    819c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <_dma_inst>:
	...
20000014:	0005 0000                                   ....

20000018 <sd_mmc_cards>:
	...
20000020:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

2000003c <wave_header>:
2000003c:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
2000004c:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
2000005c:	0004 0010 6164 6174 0000 0000               ....data....

20000068 <ss_pins>:
20000068:	0105                                             .

20000069 <g_interrupt_enabled>:
20000069:	0001 7000                                        ...

2000006c <_impure_ptr>:
2000006c:	0070 2000                                   p.. 

20000070 <impure_data>:
20000070:	0000 0000 810c 0000 812c 0000 80ec 0000     ........,.......
	...
