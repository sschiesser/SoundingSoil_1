
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000234c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000234c  0000234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000001c  20000000  00002354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000009e0  20000020  00002380  00020020  2**4
                  ALLOC
  4 .stack        00002000  20000a00  00002d60  00020020  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  7 .debug_info   00033b2d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003f33  00000000  00000000  00053bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008338  00000000  00000000  00057afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000660  00000000  00000000  0005fe35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a88  00000000  00000000  00060495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a233  00000000  00000000  00060f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d4c5  00000000  00000000  0007b150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00094e5c  00000000  00000000  00088615  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000010a8  00000000  00000000  0011d474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 2a 00 20 7d 1d 00 00 79 1d 00 00 79 1d 00 00     .*. }...y...y...
	...
      2c:	79 1d 00 00 00 00 00 00 00 00 00 00 79 1d 00 00     y...........y...
      3c:	79 1d 00 00 79 1d 00 00 79 1d 00 00 79 1d 00 00     y...y...y...y...
      4c:	79 1d 00 00 79 12 00 00 79 1d 00 00 15 01 00 00     y...y...y.......
      5c:	b1 0c 00 00 79 1d 00 00 7d 05 00 00 8d 05 00 00     ....y...}.......
      6c:	9d 05 00 00 ad 05 00 00 bd 05 00 00 cd 05 00 00     ................
      7c:	c9 04 00 00 d9 04 00 00 e9 04 00 00 79 1d 00 00     ............y...
      8c:	79 1d 00 00 79 1d 00 00 79 1d 00 00 79 1d 00 00     y...y...y...y...
      9c:	79 1d 00 00 79 1d 00 00 79 1d 00 00 79 1d 00 00     y...y...y...y...
      ac:	79 1d 00 00 00 00 00 00                             y.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000020 	.word	0x20000020
      d4:	00000000 	.word	0x00000000
      d8:	00002354 	.word	0x00002354

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000024 	.word	0x20000024
     108:	00002354 	.word	0x00002354
     10c:	00002354 	.word	0x00002354
     110:	00000000 	.word	0x00000000

00000114 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
     114:	b510      	push	{r4, lr}
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     116:	4b26      	ldr	r3, [pc, #152]	; (1b0 <DMAC_Handler+0x9c>)
     118:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
     11a:	4926      	ldr	r1, [pc, #152]	; (1b4 <DMAC_Handler+0xa0>)
     11c:	8c0b      	ldrh	r3, [r1, #32]
     11e:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
     120:	4013      	ands	r3, r2
     122:	009b      	lsls	r3, r3, #2
     124:	4824      	ldr	r0, [pc, #144]	; (1b8 <DMAC_Handler+0xa4>)
     126:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     128:	7803      	ldrb	r3, [r0, #0]
     12a:	401a      	ands	r2, r3
     12c:	233f      	movs	r3, #63	; 0x3f
     12e:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
     130:	330f      	adds	r3, #15
     132:	5cca      	ldrb	r2, [r1, r3]
     134:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
     136:	7803      	ldrb	r3, [r0, #0]
     138:	011b      	lsls	r3, r3, #4
     13a:	4920      	ldr	r1, [pc, #128]	; (1bc <DMAC_Handler+0xa8>)
     13c:	18c9      	adds	r1, r1, r3
     13e:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
     140:	4c1f      	ldr	r4, [pc, #124]	; (1c0 <DMAC_Handler+0xac>)
     142:	18e3      	adds	r3, r4, r3
     144:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
     146:	1acb      	subs	r3, r1, r3
     148:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
     14a:	07d3      	lsls	r3, r2, #31
     14c:	d50f      	bpl.n	16e <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
     14e:	2101      	movs	r1, #1
     150:	234e      	movs	r3, #78	; 0x4e
     152:	4a18      	ldr	r2, [pc, #96]	; (1b4 <DMAC_Handler+0xa0>)
     154:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
     156:	3b3e      	subs	r3, #62	; 0x3e
     158:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     15a:	7c03      	ldrb	r3, [r0, #16]
     15c:	07db      	lsls	r3, r3, #31
     15e:	d503      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
     160:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
     162:	2b00      	cmp	r3, #0
     164:	d000      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
     166:	4798      	blx	r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     168:	4b16      	ldr	r3, [pc, #88]	; (1c4 <DMAC_Handler+0xb0>)
     16a:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
     16c:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
     16e:	0793      	lsls	r3, r2, #30
     170:	d50d      	bpl.n	18e <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
     172:	2102      	movs	r1, #2
     174:	234e      	movs	r3, #78	; 0x4e
     176:	4a0f      	ldr	r2, [pc, #60]	; (1b4 <DMAC_Handler+0xa0>)
     178:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
     17a:	2300      	movs	r3, #0
     17c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     17e:	7c03      	ldrb	r3, [r0, #16]
     180:	079b      	lsls	r3, r3, #30
     182:	d5f1      	bpl.n	168 <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
     184:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
     186:	2b00      	cmp	r3, #0
     188:	d0ee      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
     18a:	4798      	blx	r3
     18c:	e7ec      	b.n	168 <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
     18e:	0753      	lsls	r3, r2, #29
     190:	d5ea      	bpl.n	168 <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
     192:	2104      	movs	r1, #4
     194:	234e      	movs	r3, #78	; 0x4e
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <DMAC_Handler+0xa0>)
     198:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
     19a:	3b48      	subs	r3, #72	; 0x48
     19c:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     19e:	7c03      	ldrb	r3, [r0, #16]
     1a0:	075b      	lsls	r3, r3, #29
     1a2:	d5e1      	bpl.n	168 <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
     1a4:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
     1a6:	2b00      	cmp	r3, #0
     1a8:	d0de      	beq.n	168 <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
     1aa:	4798      	blx	r3
     1ac:	e7dc      	b.n	168 <DMAC_Handler+0x54>
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	0000191d 	.word	0x0000191d
     1b4:	41004800 	.word	0x41004800
     1b8:	2000003c 	.word	0x2000003c
     1bc:	20000110 	.word	0x20000110
     1c0:	20000050 	.word	0x20000050
     1c4:	0000195d 	.word	0x0000195d

000001c8 <dma_get_config_defaults>:
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
     1c8:	2300      	movs	r3, #0
     1ca:	7003      	strb	r3, [r0, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
     1cc:	7043      	strb	r3, [r0, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
     1ce:	2203      	movs	r2, #3
     1d0:	7082      	strb	r2, [r0, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
     1d2:	70c3      	strb	r3, [r0, #3]
	config->event_config.event_output_enable = false;
     1d4:	7103      	strb	r3, [r0, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
     1d6:	4770      	bx	lr

000001d8 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
     1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1da:	46ce      	mov	lr, r9
     1dc:	4647      	mov	r7, r8
     1de:	b580      	push	{r7, lr}
     1e0:	0005      	movs	r5, r0
     1e2:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     1e4:	4b45      	ldr	r3, [pc, #276]	; (2fc <dma_allocate+0x124>)
     1e6:	4798      	blx	r3

	Assert(resource);

	system_interrupt_enter_critical_section();

	if (!_dma_inst._dma_init) {
     1e8:	4b45      	ldr	r3, [pc, #276]	; (300 <dma_allocate+0x128>)
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	2b00      	cmp	r3, #0
     1ee:	d118      	bne.n	222 <dma_allocate+0x4a>
 * \param[in] ahb_mask  AHB clock mask to enable
 */
static inline void system_ahb_clock_set_mask(
		const uint32_t ahb_mask)
{
	PM->AHBMASK.reg |= ahb_mask;
     1f0:	4b44      	ldr	r3, [pc, #272]	; (304 <dma_allocate+0x12c>)
     1f2:	695a      	ldr	r2, [r3, #20]
     1f4:	2120      	movs	r1, #32
     1f6:	430a      	orrs	r2, r1
     1f8:	615a      	str	r2, [r3, #20]
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1fa:	69da      	ldr	r2, [r3, #28]
     1fc:	3910      	subs	r1, #16
     1fe:	430a      	orrs	r2, r1
     200:	61da      	str	r2, [r3, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
     202:	4b41      	ldr	r3, [pc, #260]	; (308 <dma_allocate+0x130>)
     204:	881a      	ldrh	r2, [r3, #0]
     206:	390e      	subs	r1, #14
     208:	438a      	bics	r2, r1
     20a:	801a      	strh	r2, [r3, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
     20c:	2201      	movs	r2, #1
     20e:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
     210:	4a3e      	ldr	r2, [pc, #248]	; (30c <dma_allocate+0x134>)
     212:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
     214:	4a3e      	ldr	r2, [pc, #248]	; (310 <dma_allocate+0x138>)
     216:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     218:	4a3e      	ldr	r2, [pc, #248]	; (314 <dma_allocate+0x13c>)
     21a:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
     21c:	4b38      	ldr	r3, [pc, #224]	; (300 <dma_allocate+0x128>)
     21e:	2201      	movs	r2, #1
     220:	701a      	strb	r2, [r3, #0]
     222:	4b36      	ldr	r3, [pc, #216]	; (2fc <dma_allocate+0x124>)
     224:	4798      	blx	r3
	tmp = _dma_inst.allocated_channels;
     226:	4b36      	ldr	r3, [pc, #216]	; (300 <dma_allocate+0x128>)
     228:	685b      	ldr	r3, [r3, #4]
		if (!(tmp & 0x00000001)) {
     22a:	07da      	lsls	r2, r3, #31
     22c:	d50f      	bpl.n	24e <dma_allocate+0x76>
		tmp = tmp >> 1;
     22e:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     230:	2401      	movs	r4, #1
		if (!(tmp & 0x00000001)) {
     232:	2201      	movs	r2, #1
     234:	421a      	tst	r2, r3
     236:	d00b      	beq.n	250 <dma_allocate+0x78>
		tmp = tmp >> 1;
     238:	085b      	lsrs	r3, r3, #1
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     23a:	3401      	adds	r4, #1
     23c:	b2e4      	uxtb	r4, r4
     23e:	2c05      	cmp	r4, #5
     240:	d1f8      	bne.n	234 <dma_allocate+0x5c>
	cpu_irq_leave_critical();
     242:	4b35      	ldr	r3, [pc, #212]	; (318 <dma_allocate+0x140>)
     244:	4798      	blx	r3
     246:	4b34      	ldr	r3, [pc, #208]	; (318 <dma_allocate+0x140>)
     248:	4798      	blx	r3

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		system_interrupt_leave_critical_section();

		return STATUS_ERR_NOT_FOUND;
     24a:	2014      	movs	r0, #20
     24c:	e051      	b.n	2f2 <dma_allocate+0x11a>
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
     24e:	2400      	movs	r4, #0
			_dma_inst.allocated_channels |= 1 << count;
     250:	4a2b      	ldr	r2, [pc, #172]	; (300 <dma_allocate+0x128>)
     252:	6851      	ldr	r1, [r2, #4]
     254:	2301      	movs	r3, #1
     256:	40a3      	lsls	r3, r4
     258:	430b      	orrs	r3, r1
     25a:	6053      	str	r3, [r2, #4]
			_dma_inst.free_channels--;
     25c:	7a13      	ldrb	r3, [r2, #8]
     25e:	3b01      	subs	r3, #1
     260:	7213      	strb	r3, [r2, #8]
     262:	4b2d      	ldr	r3, [pc, #180]	; (318 <dma_allocate+0x140>)
     264:	4798      	blx	r3
	if (new_channel == DMA_INVALID_CHANNEL) {
     266:	2cff      	cmp	r4, #255	; 0xff
     268:	d0ed      	beq.n	246 <dma_allocate+0x6e>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
     26a:	702c      	strb	r4, [r5, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     26c:	230f      	movs	r3, #15
     26e:	4698      	mov	r8, r3
     270:	401c      	ands	r4, r3
     272:	4f25      	ldr	r7, [pc, #148]	; (308 <dma_allocate+0x130>)
     274:	3330      	adds	r3, #48	; 0x30
     276:	4699      	mov	r9, r3
     278:	54fc      	strb	r4, [r7, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
     27a:	3301      	adds	r3, #1
     27c:	5cfa      	ldrb	r2, [r7, r3]
     27e:	2102      	movs	r1, #2
     280:	438a      	bics	r2, r1
     282:	54fa      	strb	r2, [r7, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
     284:	2401      	movs	r4, #1
     286:	54fc      	strb	r4, [r7, r3]
	cpu_irq_enter_critical();
     288:	4b1c      	ldr	r3, [pc, #112]	; (2fc <dma_allocate+0x124>)
     28a:	4798      	blx	r3
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     28c:	782b      	ldrb	r3, [r5, #0]
     28e:	4642      	mov	r2, r8
     290:	4013      	ands	r3, r2
     292:	464a      	mov	r2, r9
     294:	54bb      	strb	r3, [r7, r2]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
     296:	693b      	ldr	r3, [r7, #16]
     298:	782a      	ldrb	r2, [r5, #0]
     29a:	4094      	lsls	r4, r2
     29c:	43a3      	bics	r3, r4
     29e:	613b      	str	r3, [r7, #16]
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2a0:	7832      	ldrb	r2, [r6, #0]
     2a2:	0152      	lsls	r2, r2, #5
     2a4:	2360      	movs	r3, #96	; 0x60
     2a6:	4013      	ands	r3, r2
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
     2a8:	7872      	ldrb	r2, [r6, #1]
     2aa:	0212      	lsls	r2, r2, #8
     2ac:	21fc      	movs	r1, #252	; 0xfc
     2ae:	0189      	lsls	r1, r1, #6
     2b0:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2b2:	4313      	orrs	r3, r2
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
     2b4:	78b2      	ldrb	r2, [r6, #2]
     2b6:	0592      	lsls	r2, r2, #22
     2b8:	21c0      	movs	r1, #192	; 0xc0
     2ba:	0409      	lsls	r1, r1, #16
     2bc:	400a      	ands	r2, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
     2be:	4313      	orrs	r3, r2
	if(resource_config->event_config.input_action){
     2c0:	78f1      	ldrb	r1, [r6, #3]
     2c2:	2900      	cmp	r1, #0
     2c4:	d004      	beq.n	2d0 <dma_allocate+0xf8>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
     2c6:	2207      	movs	r2, #7
     2c8:	400a      	ands	r2, r1
     2ca:	2108      	movs	r1, #8
     2cc:	430a      	orrs	r2, r1
     2ce:	4313      	orrs	r3, r2
	if (resource_config->event_config.event_output_enable) {
     2d0:	7932      	ldrb	r2, [r6, #4]
     2d2:	2a00      	cmp	r2, #0
     2d4:	d001      	beq.n	2da <dma_allocate+0x102>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
     2d6:	2210      	movs	r2, #16
     2d8:	4313      	orrs	r3, r2
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
     2da:	4a0b      	ldr	r2, [pc, #44]	; (308 <dma_allocate+0x130>)
     2dc:	6453      	str	r3, [r2, #68]	; 0x44
	cpu_irq_leave_critical();
     2de:	4c0e      	ldr	r4, [pc, #56]	; (318 <dma_allocate+0x140>)
     2e0:	47a0      	blx	r4
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);

	resource->descriptor = NULL;
     2e2:	2300      	movs	r3, #0
     2e4:	61ab      	str	r3, [r5, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
     2e6:	782b      	ldrb	r3, [r5, #0]
     2e8:	009b      	lsls	r3, r3, #2
     2ea:	4a0c      	ldr	r2, [pc, #48]	; (31c <dma_allocate+0x144>)
     2ec:	509d      	str	r5, [r3, r2]
     2ee:	47a0      	blx	r4

	system_interrupt_leave_critical_section();

	return STATUS_OK;
     2f0:	2000      	movs	r0, #0
}
     2f2:	bc0c      	pop	{r2, r3}
     2f4:	4690      	mov	r8, r2
     2f6:	4699      	mov	r9, r3
     2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	0000191d 	.word	0x0000191d
     300:	2000000c 	.word	0x2000000c
     304:	40000400 	.word	0x40000400
     308:	41004800 	.word	0x41004800
     30c:	20000110 	.word	0x20000110
     310:	20000050 	.word	0x20000050
     314:	00000f02 	.word	0x00000f02
     318:	0000195d 	.word	0x0000195d
     31c:	2000003c 	.word	0x2000003c

00000320 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
     320:	b570      	push	{r4, r5, r6, lr}
     322:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     324:	4b19      	ldr	r3, [pc, #100]	; (38c <dma_start_transfer_job+0x6c>)
     326:	4798      	blx	r3
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
     328:	7c63      	ldrb	r3, [r4, #17]
     32a:	2b05      	cmp	r3, #5
     32c:	d008      	beq.n	340 <dma_start_transfer_job+0x20>
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
     32e:	69a3      	ldr	r3, [r4, #24]
     330:	885b      	ldrh	r3, [r3, #2]
     332:	b29b      	uxth	r3, r3
     334:	2b00      	cmp	r3, #0
     336:	d107      	bne.n	348 <dma_start_transfer_job+0x28>
	cpu_irq_leave_critical();
     338:	4b15      	ldr	r3, [pc, #84]	; (390 <dma_start_transfer_job+0x70>)
     33a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_ERR_INVALID_ARG;
     33c:	2017      	movs	r0, #23
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;

	system_interrupt_leave_critical_section();

	return STATUS_OK;
}
     33e:	bd70      	pop	{r4, r5, r6, pc}
     340:	4b13      	ldr	r3, [pc, #76]	; (390 <dma_start_transfer_job+0x70>)
     342:	4798      	blx	r3
		return STATUS_BUSY;
     344:	2005      	movs	r0, #5
     346:	e7fa      	b.n	33e <dma_start_transfer_job+0x1e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     348:	2640      	movs	r6, #64	; 0x40
     34a:	4b12      	ldr	r3, [pc, #72]	; (394 <dma_start_transfer_job+0x74>)
     34c:	601e      	str	r6, [r3, #0]
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
     34e:	7822      	ldrb	r2, [r4, #0]
     350:	230f      	movs	r3, #15
     352:	4013      	ands	r3, r2
     354:	4d10      	ldr	r5, [pc, #64]	; (398 <dma_start_transfer_job+0x78>)
     356:	223f      	movs	r2, #63	; 0x3f
     358:	54ab      	strb	r3, [r5, r2]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
     35a:	7823      	ldrb	r3, [r4, #0]
     35c:	4a0f      	ldr	r2, [pc, #60]	; (39c <dma_start_transfer_job+0x7c>)
     35e:	5cd2      	ldrb	r2, [r2, r3]
     360:	2307      	movs	r3, #7
     362:	4013      	ands	r3, r2
     364:	224d      	movs	r2, #77	; 0x4d
     366:	54ab      	strb	r3, [r5, r2]
	resource->job_status = STATUS_BUSY;
     368:	2305      	movs	r3, #5
     36a:	7463      	strb	r3, [r4, #17]
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
     36c:	7820      	ldrb	r0, [r4, #0]
     36e:	0100      	lsls	r0, r0, #4
     370:	4b0b      	ldr	r3, [pc, #44]	; (3a0 <dma_start_transfer_job+0x80>)
     372:	18c0      	adds	r0, r0, r3
     374:	69a1      	ldr	r1, [r4, #24]
     376:	3a3d      	subs	r2, #61	; 0x3d
     378:	4b0a      	ldr	r3, [pc, #40]	; (3a4 <dma_start_transfer_job+0x84>)
     37a:	4798      	blx	r3
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
     37c:	5dab      	ldrb	r3, [r5, r6]
     37e:	2202      	movs	r2, #2
     380:	4313      	orrs	r3, r2
     382:	55ab      	strb	r3, [r5, r6]
	cpu_irq_leave_critical();
     384:	4b02      	ldr	r3, [pc, #8]	; (390 <dma_start_transfer_job+0x70>)
     386:	4798      	blx	r3
	return STATUS_OK;
     388:	2000      	movs	r0, #0
     38a:	e7d8      	b.n	33e <dma_start_transfer_job+0x1e>
     38c:	0000191d 	.word	0x0000191d
     390:	0000195d 	.word	0x0000195d
     394:	e000e100 	.word	0xe000e100
     398:	41004800 	.word	0x41004800
     39c:	200000a0 	.word	0x200000a0
     3a0:	20000110 	.word	0x20000110
     3a4:	00002269 	.word	0x00002269

000003a8 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
     3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
     3aa:	780a      	ldrb	r2, [r1, #0]
     3ac:	8803      	ldrh	r3, [r0, #0]
     3ae:	2601      	movs	r6, #1
     3b0:	4032      	ands	r2, r6
     3b2:	2401      	movs	r4, #1
     3b4:	43a3      	bics	r3, r4
     3b6:	4313      	orrs	r3, r2
     3b8:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
     3ba:	784b      	ldrb	r3, [r1, #1]
     3bc:	8804      	ldrh	r4, [r0, #0]
     3be:	2703      	movs	r7, #3
     3c0:	403b      	ands	r3, r7
     3c2:	005b      	lsls	r3, r3, #1
     3c4:	2206      	movs	r2, #6
     3c6:	4394      	bics	r4, r2
     3c8:	431c      	orrs	r4, r3
     3ca:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
     3cc:	788d      	ldrb	r5, [r1, #2]
     3ce:	8804      	ldrh	r4, [r0, #0]
     3d0:	403d      	ands	r5, r7
     3d2:	00ed      	lsls	r5, r5, #3
     3d4:	2318      	movs	r3, #24
     3d6:	439c      	bics	r4, r3
     3d8:	432c      	orrs	r4, r5
     3da:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
     3dc:	78ca      	ldrb	r2, [r1, #3]
     3de:	8803      	ldrh	r3, [r0, #0]
     3e0:	403a      	ands	r2, r7
     3e2:	0212      	lsls	r2, r2, #8
     3e4:	4c16      	ldr	r4, [pc, #88]	; (440 <dma_descriptor_create+0x98>)
     3e6:	4023      	ands	r3, r4
     3e8:	4313      	orrs	r3, r2
     3ea:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
     3ec:	790b      	ldrb	r3, [r1, #4]
     3ee:	8804      	ldrh	r4, [r0, #0]
     3f0:	4033      	ands	r3, r6
     3f2:	029b      	lsls	r3, r3, #10
     3f4:	4a13      	ldr	r2, [pc, #76]	; (444 <dma_descriptor_create+0x9c>)
     3f6:	4014      	ands	r4, r2
     3f8:	431c      	orrs	r4, r3
     3fa:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
     3fc:	794d      	ldrb	r5, [r1, #5]
     3fe:	8804      	ldrh	r4, [r0, #0]
     400:	4035      	ands	r5, r6
     402:	02ed      	lsls	r5, r5, #11
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <dma_descriptor_create+0xa0>)
     406:	401c      	ands	r4, r3
     408:	432c      	orrs	r4, r5
     40a:	8004      	strh	r4, [r0, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
     40c:	798a      	ldrb	r2, [r1, #6]
     40e:	8803      	ldrh	r3, [r0, #0]
     410:	4032      	ands	r2, r6
     412:	0312      	lsls	r2, r2, #12
     414:	4c0d      	ldr	r4, [pc, #52]	; (44c <dma_descriptor_create+0xa4>)
     416:	4023      	ands	r3, r4
     418:	4313      	orrs	r3, r2
     41a:	8003      	strh	r3, [r0, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
     41c:	79cb      	ldrb	r3, [r1, #7]
     41e:	2207      	movs	r2, #7
     420:	401a      	ands	r2, r3
     422:	8803      	ldrh	r3, [r0, #0]
     424:	0352      	lsls	r2, r2, #13
     426:	04db      	lsls	r3, r3, #19
     428:	0cdb      	lsrs	r3, r3, #19
     42a:	4313      	orrs	r3, r2
     42c:	8003      	strh	r3, [r0, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
     42e:	890b      	ldrh	r3, [r1, #8]
     430:	8043      	strh	r3, [r0, #2]
	descriptor->SRCADDR.reg = config->source_address;
     432:	68cb      	ldr	r3, [r1, #12]
     434:	6043      	str	r3, [r0, #4]
	descriptor->DSTADDR.reg = config->destination_address;
     436:	690b      	ldr	r3, [r1, #16]
     438:	6083      	str	r3, [r0, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
     43a:	694b      	ldr	r3, [r1, #20]
     43c:	60c3      	str	r3, [r0, #12]
}
     43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     440:	fffffcff 	.word	0xfffffcff
     444:	fffffbff 	.word	0xfffffbff
     448:	fffff7ff 	.word	0xfffff7ff
     44c:	ffffefff 	.word	0xffffefff

00000450 <dma_add_descriptor>:
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
	DmacDescriptor* desc = resource->descriptor;

	if (resource->job_status == STATUS_BUSY) {
     450:	7c42      	ldrb	r2, [r0, #17]
		return STATUS_BUSY;
     452:	2305      	movs	r3, #5
	if (resource->job_status == STATUS_BUSY) {
     454:	2a05      	cmp	r2, #5
     456:	d00b      	beq.n	470 <dma_add_descriptor+0x20>
	DmacDescriptor* desc = resource->descriptor;
     458:	6983      	ldr	r3, [r0, #24]
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
     45a:	2b00      	cmp	r3, #0
     45c:	d00a      	beq.n	474 <dma_add_descriptor+0x24>
		resource->descriptor = descriptor;
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
     45e:	68da      	ldr	r2, [r3, #12]
     460:	2a00      	cmp	r2, #0
     462:	d003      	beq.n	46c <dma_add_descriptor+0x1c>
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
     464:	68db      	ldr	r3, [r3, #12]
		while(desc->DESCADDR.reg != 0) {
     466:	68da      	ldr	r2, [r3, #12]
     468:	2a00      	cmp	r2, #0
     46a:	d1fb      	bne.n	464 <dma_add_descriptor+0x14>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
     46c:	60d9      	str	r1, [r3, #12]
	}

	return STATUS_OK;
     46e:	2300      	movs	r3, #0
}
     470:	0018      	movs	r0, r3
     472:	4770      	bx	lr
		resource->descriptor = descriptor;
     474:	6181      	str	r1, [r0, #24]
	return STATUS_OK;
     476:	2300      	movs	r3, #0
     478:	e7fa      	b.n	470 <dma_add_descriptor+0x20>
	...

0000047c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     47c:	b5f0      	push	{r4, r5, r6, r7, lr}
     47e:	46c6      	mov	lr, r8
     480:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     482:	0080      	lsls	r0, r0, #2
     484:	4b0e      	ldr	r3, [pc, #56]	; (4c0 <_tcc_interrupt_handler+0x44>)
     486:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     488:	683b      	ldr	r3, [r7, #0]
     48a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     490:	4013      	ands	r3, r2
     492:	401e      	ands	r6, r3
     494:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     496:	4b0b      	ldr	r3, [pc, #44]	; (4c4 <_tcc_interrupt_handler+0x48>)
     498:	4698      	mov	r8, r3
     49a:	e002      	b.n	4a2 <_tcc_interrupt_handler+0x26>
     49c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     49e:	2c30      	cmp	r4, #48	; 0x30
     4a0:	d00a      	beq.n	4b8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     4a2:	4643      	mov	r3, r8
     4a4:	58e5      	ldr	r5, [r4, r3]
     4a6:	4235      	tst	r5, r6
     4a8:	d0f8      	beq.n	49c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     4aa:	193b      	adds	r3, r7, r4
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	0038      	movs	r0, r7
     4b0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	62dd      	str	r5, [r3, #44]	; 0x2c
     4b6:	e7f1      	b.n	49c <_tcc_interrupt_handler+0x20>
		}
	}
}
     4b8:	bc04      	pop	{r2}
     4ba:	4690      	mov	r8, r2
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	20000160 	.word	0x20000160
     4c4:	0000228c 	.word	0x0000228c

000004c8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     4c8:	b510      	push	{r4, lr}
     4ca:	2000      	movs	r0, #0
     4cc:	4b01      	ldr	r3, [pc, #4]	; (4d4 <TCC0_Handler+0xc>)
     4ce:	4798      	blx	r3
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	0000047d 	.word	0x0000047d

000004d8 <TCC1_Handler>:
     4d8:	b510      	push	{r4, lr}
     4da:	2001      	movs	r0, #1
     4dc:	4b01      	ldr	r3, [pc, #4]	; (4e4 <TCC1_Handler+0xc>)
     4de:	4798      	blx	r3
     4e0:	bd10      	pop	{r4, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	0000047d 	.word	0x0000047d

000004e8 <TCC2_Handler>:
     4e8:	b510      	push	{r4, lr}
     4ea:	2002      	movs	r0, #2
     4ec:	4b01      	ldr	r3, [pc, #4]	; (4f4 <TCC2_Handler+0xc>)
     4ee:	4798      	blx	r3
     4f0:	bd10      	pop	{r4, pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	0000047d 	.word	0x0000047d

000004f8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     4f8:	4a04      	ldr	r2, [pc, #16]	; (50c <_extint_enable+0x14>)
     4fa:	7813      	ldrb	r3, [r2, #0]
     4fc:	2102      	movs	r1, #2
     4fe:	430b      	orrs	r3, r1
     500:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     502:	7853      	ldrb	r3, [r2, #1]
     504:	b25b      	sxtb	r3, r3
     506:	2b00      	cmp	r3, #0
     508:	dbfb      	blt.n	502 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     50a:	4770      	bx	lr
     50c:	40001800 	.word	0x40001800

00000510 <_system_extint_init>:
{
     510:	b500      	push	{lr}
     512:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     514:	4a12      	ldr	r2, [pc, #72]	; (560 <_system_extint_init+0x50>)
     516:	6993      	ldr	r3, [r2, #24]
     518:	2140      	movs	r1, #64	; 0x40
     51a:	430b      	orrs	r3, r1
     51c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     51e:	a901      	add	r1, sp, #4
     520:	2300      	movs	r3, #0
     522:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     524:	2005      	movs	r0, #5
     526:	4b0f      	ldr	r3, [pc, #60]	; (564 <_system_extint_init+0x54>)
     528:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     52a:	2005      	movs	r0, #5
     52c:	4b0e      	ldr	r3, [pc, #56]	; (568 <_system_extint_init+0x58>)
     52e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     530:	4a0e      	ldr	r2, [pc, #56]	; (56c <_system_extint_init+0x5c>)
     532:	7813      	ldrb	r3, [r2, #0]
     534:	2101      	movs	r1, #1
     536:	430b      	orrs	r3, r1
     538:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     53a:	7853      	ldrb	r3, [r2, #1]
     53c:	b25b      	sxtb	r3, r3
     53e:	2b00      	cmp	r3, #0
     540:	dbfb      	blt.n	53a <_system_extint_init+0x2a>
     542:	4b0b      	ldr	r3, [pc, #44]	; (570 <_system_extint_init+0x60>)
     544:	0019      	movs	r1, r3
     546:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     548:	2200      	movs	r2, #0
     54a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     54c:	4299      	cmp	r1, r3
     54e:	d1fc      	bne.n	54a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     550:	2210      	movs	r2, #16
     552:	4b08      	ldr	r3, [pc, #32]	; (574 <_system_extint_init+0x64>)
     554:	601a      	str	r2, [r3, #0]
	_extint_enable();
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <_system_extint_init+0x68>)
     558:	4798      	blx	r3
}
     55a:	b003      	add	sp, #12
     55c:	bd00      	pop	{pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	40000400 	.word	0x40000400
     564:	00001c21 	.word	0x00001c21
     568:	00001b95 	.word	0x00001b95
     56c:	40001800 	.word	0x40001800
     570:	2000016c 	.word	0x2000016c
     574:	e000e100 	.word	0xe000e100
     578:	000004f9 	.word	0x000004f9

0000057c <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     57c:	b510      	push	{r4, lr}
     57e:	4b02      	ldr	r3, [pc, #8]	; (588 <SERCOM0_Handler+0xc>)
     580:	681b      	ldr	r3, [r3, #0]
     582:	2000      	movs	r0, #0
     584:	4798      	blx	r3
     586:	bd10      	pop	{r4, pc}
     588:	200000a8 	.word	0x200000a8

0000058c <SERCOM1_Handler>:
     58c:	b510      	push	{r4, lr}
     58e:	4b02      	ldr	r3, [pc, #8]	; (598 <SERCOM1_Handler+0xc>)
     590:	685b      	ldr	r3, [r3, #4]
     592:	2001      	movs	r0, #1
     594:	4798      	blx	r3
     596:	bd10      	pop	{r4, pc}
     598:	200000a8 	.word	0x200000a8

0000059c <SERCOM2_Handler>:
     59c:	b510      	push	{r4, lr}
     59e:	4b02      	ldr	r3, [pc, #8]	; (5a8 <SERCOM2_Handler+0xc>)
     5a0:	689b      	ldr	r3, [r3, #8]
     5a2:	2002      	movs	r0, #2
     5a4:	4798      	blx	r3
     5a6:	bd10      	pop	{r4, pc}
     5a8:	200000a8 	.word	0x200000a8

000005ac <SERCOM3_Handler>:
     5ac:	b510      	push	{r4, lr}
     5ae:	4b02      	ldr	r3, [pc, #8]	; (5b8 <SERCOM3_Handler+0xc>)
     5b0:	68db      	ldr	r3, [r3, #12]
     5b2:	2003      	movs	r0, #3
     5b4:	4798      	blx	r3
     5b6:	bd10      	pop	{r4, pc}
     5b8:	200000a8 	.word	0x200000a8

000005bc <SERCOM4_Handler>:
     5bc:	b510      	push	{r4, lr}
     5be:	4b02      	ldr	r3, [pc, #8]	; (5c8 <SERCOM4_Handler+0xc>)
     5c0:	691b      	ldr	r3, [r3, #16]
     5c2:	2004      	movs	r0, #4
     5c4:	4798      	blx	r3
     5c6:	bd10      	pop	{r4, pc}
     5c8:	200000a8 	.word	0x200000a8

000005cc <SERCOM5_Handler>:
     5cc:	b510      	push	{r4, lr}
     5ce:	4b02      	ldr	r3, [pc, #8]	; (5d8 <SERCOM5_Handler+0xc>)
     5d0:	695b      	ldr	r3, [r3, #20]
     5d2:	2005      	movs	r0, #5
     5d4:	4798      	blx	r3
     5d6:	bd10      	pop	{r4, pc}
     5d8:	200000a8 	.word	0x200000a8

000005dc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     5dc:	b510      	push	{r4, lr}
	switch (clock_source) {
     5de:	2808      	cmp	r0, #8
     5e0:	d803      	bhi.n	5ea <system_clock_source_get_hz+0xe>
     5e2:	0080      	lsls	r0, r0, #2
     5e4:	4b1e      	ldr	r3, [pc, #120]	; (660 <system_clock_source_get_hz+0x84>)
     5e6:	581b      	ldr	r3, [r3, r0]
     5e8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     5ea:	2000      	movs	r0, #0
     5ec:	e036      	b.n	65c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
     5ee:	4b1d      	ldr	r3, [pc, #116]	; (664 <system_clock_source_get_hz+0x88>)
     5f0:	6918      	ldr	r0, [r3, #16]
     5f2:	e033      	b.n	65c <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     5f4:	4b1c      	ldr	r3, [pc, #112]	; (668 <system_clock_source_get_hz+0x8c>)
     5f6:	6a1b      	ldr	r3, [r3, #32]
     5f8:	059b      	lsls	r3, r3, #22
     5fa:	0f9b      	lsrs	r3, r3, #30
     5fc:	481b      	ldr	r0, [pc, #108]	; (66c <system_clock_source_get_hz+0x90>)
     5fe:	40d8      	lsrs	r0, r3
     600:	e02c      	b.n	65c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
     602:	4b18      	ldr	r3, [pc, #96]	; (664 <system_clock_source_get_hz+0x88>)
     604:	6958      	ldr	r0, [r3, #20]
     606:	e029      	b.n	65c <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     608:	4b16      	ldr	r3, [pc, #88]	; (664 <system_clock_source_get_hz+0x88>)
     60a:	681b      	ldr	r3, [r3, #0]
			return 0;
     60c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     60e:	079b      	lsls	r3, r3, #30
     610:	d524      	bpl.n	65c <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     612:	4915      	ldr	r1, [pc, #84]	; (668 <system_clock_source_get_hz+0x8c>)
     614:	2210      	movs	r2, #16
     616:	68cb      	ldr	r3, [r1, #12]
     618:	421a      	tst	r2, r3
     61a:	d0fc      	beq.n	616 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
     61c:	4b11      	ldr	r3, [pc, #68]	; (664 <system_clock_source_get_hz+0x88>)
     61e:	681b      	ldr	r3, [r3, #0]
     620:	075b      	lsls	r3, r3, #29
     622:	d401      	bmi.n	628 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     624:	4812      	ldr	r0, [pc, #72]	; (670 <system_clock_source_get_hz+0x94>)
     626:	e019      	b.n	65c <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
     628:	4b0e      	ldr	r3, [pc, #56]	; (664 <system_clock_source_get_hz+0x88>)
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	069b      	lsls	r3, r3, #26
     62e:	d501      	bpl.n	634 <system_clock_source_get_hz+0x58>
		return 48000000UL;
     630:	480f      	ldr	r0, [pc, #60]	; (670 <system_clock_source_get_hz+0x94>)
     632:	e013      	b.n	65c <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     634:	2000      	movs	r0, #0
     636:	4b0f      	ldr	r3, [pc, #60]	; (674 <system_clock_source_get_hz+0x98>)
     638:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     63a:	4b0a      	ldr	r3, [pc, #40]	; (664 <system_clock_source_get_hz+0x88>)
     63c:	689b      	ldr	r3, [r3, #8]
     63e:	041b      	lsls	r3, r3, #16
     640:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     642:	4358      	muls	r0, r3
     644:	e00a      	b.n	65c <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     646:	2350      	movs	r3, #80	; 0x50
     648:	4a07      	ldr	r2, [pc, #28]	; (668 <system_clock_source_get_hz+0x8c>)
     64a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     64c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     64e:	075b      	lsls	r3, r3, #29
     650:	d504      	bpl.n	65c <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
     652:	4b04      	ldr	r3, [pc, #16]	; (664 <system_clock_source_get_hz+0x88>)
     654:	68d8      	ldr	r0, [r3, #12]
     656:	e001      	b.n	65c <system_clock_source_get_hz+0x80>
		return 32768UL;
     658:	2080      	movs	r0, #128	; 0x80
     65a:	0200      	lsls	r0, r0, #8
	}
}
     65c:	bd10      	pop	{r4, pc}
     65e:	46c0      	nop			; (mov r8, r8)
     660:	000022bc 	.word	0x000022bc
     664:	200000c0 	.word	0x200000c0
     668:	40000800 	.word	0x40000800
     66c:	007a1200 	.word	0x007a1200
     670:	02dc6c00 	.word	0x02dc6c00
     674:	00001c3d 	.word	0x00001c3d

00000678 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     678:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     67a:	490c      	ldr	r1, [pc, #48]	; (6ac <system_clock_source_osc8m_set_config+0x34>)
     67c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     67e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     680:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     682:	7840      	ldrb	r0, [r0, #1]
     684:	2201      	movs	r2, #1
     686:	4010      	ands	r0, r2
     688:	0180      	lsls	r0, r0, #6
     68a:	2640      	movs	r6, #64	; 0x40
     68c:	43b3      	bics	r3, r6
     68e:	4303      	orrs	r3, r0
     690:	402a      	ands	r2, r5
     692:	01d2      	lsls	r2, r2, #7
     694:	2080      	movs	r0, #128	; 0x80
     696:	4383      	bics	r3, r0
     698:	4313      	orrs	r3, r2
     69a:	2203      	movs	r2, #3
     69c:	4022      	ands	r2, r4
     69e:	0212      	lsls	r2, r2, #8
     6a0:	4803      	ldr	r0, [pc, #12]	; (6b0 <system_clock_source_osc8m_set_config+0x38>)
     6a2:	4003      	ands	r3, r0
     6a4:	4313      	orrs	r3, r2
     6a6:	620b      	str	r3, [r1, #32]
}
     6a8:	bd70      	pop	{r4, r5, r6, pc}
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	40000800 	.word	0x40000800
     6b0:	fffffcff 	.word	0xfffffcff

000006b4 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	46ce      	mov	lr, r9
     6b8:	4647      	mov	r7, r8
     6ba:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     6bc:	4b19      	ldr	r3, [pc, #100]	; (724 <system_clock_source_osc32k_set_config+0x70>)
     6be:	4699      	mov	r9, r3
     6c0:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     6c2:	7841      	ldrb	r1, [r0, #1]
     6c4:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     6c6:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     6c8:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     6ca:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     6cc:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     6ce:	7880      	ldrb	r0, [r0, #2]
     6d0:	2101      	movs	r1, #1
     6d2:	4008      	ands	r0, r1
     6d4:	0080      	lsls	r0, r0, #2
     6d6:	2204      	movs	r2, #4
     6d8:	4393      	bics	r3, r2
     6da:	4303      	orrs	r3, r0
     6dc:	4660      	mov	r0, ip
     6de:	4008      	ands	r0, r1
     6e0:	00c0      	lsls	r0, r0, #3
     6e2:	3204      	adds	r2, #4
     6e4:	4393      	bics	r3, r2
     6e6:	4303      	orrs	r3, r0
     6e8:	0038      	movs	r0, r7
     6ea:	4008      	ands	r0, r1
     6ec:	0180      	lsls	r0, r0, #6
     6ee:	2740      	movs	r7, #64	; 0x40
     6f0:	43bb      	bics	r3, r7
     6f2:	4303      	orrs	r3, r0
     6f4:	0030      	movs	r0, r6
     6f6:	4008      	ands	r0, r1
     6f8:	01c0      	lsls	r0, r0, #7
     6fa:	2680      	movs	r6, #128	; 0x80
     6fc:	43b3      	bics	r3, r6
     6fe:	4303      	orrs	r3, r0
     700:	2007      	movs	r0, #7
     702:	4005      	ands	r5, r0
     704:	022d      	lsls	r5, r5, #8
     706:	4808      	ldr	r0, [pc, #32]	; (728 <system_clock_source_osc32k_set_config+0x74>)
     708:	4003      	ands	r3, r0
     70a:	432b      	orrs	r3, r5
     70c:	4021      	ands	r1, r4
     70e:	0309      	lsls	r1, r1, #12
     710:	4806      	ldr	r0, [pc, #24]	; (72c <system_clock_source_osc32k_set_config+0x78>)
     712:	4003      	ands	r3, r0
     714:	430b      	orrs	r3, r1
     716:	464a      	mov	r2, r9
     718:	6193      	str	r3, [r2, #24]
}
     71a:	bc0c      	pop	{r2, r3}
     71c:	4690      	mov	r8, r2
     71e:	4699      	mov	r9, r3
     720:	bdf0      	pop	{r4, r5, r6, r7, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	40000800 	.word	0x40000800
     728:	fffff8ff 	.word	0xfffff8ff
     72c:	ffffefff 	.word	0xffffefff

00000730 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     730:	b5f0      	push	{r4, r5, r6, r7, lr}
     732:	46de      	mov	lr, fp
     734:	4657      	mov	r7, sl
     736:	464e      	mov	r6, r9
     738:	4645      	mov	r5, r8
     73a:	b5e0      	push	{r5, r6, r7, lr}
     73c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     73e:	4b26      	ldr	r3, [pc, #152]	; (7d8 <system_clock_source_xosc32k_set_config+0xa8>)
     740:	469b      	mov	fp, r3
     742:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     744:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     746:	7800      	ldrb	r0, [r0, #0]
     748:	4242      	negs	r2, r0
     74a:	4142      	adcs	r2, r0
     74c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     74e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     750:	78ca      	ldrb	r2, [r1, #3]
     752:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     754:	790a      	ldrb	r2, [r1, #4]
     756:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     758:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     75a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     75c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     75e:	688a      	ldr	r2, [r1, #8]
     760:	491e      	ldr	r1, [pc, #120]	; (7dc <system_clock_source_xosc32k_set_config+0xac>)
     762:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     764:	2101      	movs	r1, #1
     766:	464a      	mov	r2, r9
     768:	0092      	lsls	r2, r2, #2
     76a:	4691      	mov	r9, r2
     76c:	2204      	movs	r2, #4
     76e:	4393      	bics	r3, r2
     770:	464a      	mov	r2, r9
     772:	4313      	orrs	r3, r2
     774:	4642      	mov	r2, r8
     776:	400a      	ands	r2, r1
     778:	00d2      	lsls	r2, r2, #3
     77a:	4690      	mov	r8, r2
     77c:	2208      	movs	r2, #8
     77e:	4393      	bics	r3, r2
     780:	4642      	mov	r2, r8
     782:	4313      	orrs	r3, r2
     784:	4662      	mov	r2, ip
     786:	400a      	ands	r2, r1
     788:	0112      	lsls	r2, r2, #4
     78a:	4694      	mov	ip, r2
     78c:	2210      	movs	r2, #16
     78e:	4393      	bics	r3, r2
     790:	4662      	mov	r2, ip
     792:	4313      	orrs	r3, r2
     794:	4008      	ands	r0, r1
     796:	0140      	lsls	r0, r0, #5
     798:	2220      	movs	r2, #32
     79a:	4393      	bics	r3, r2
     79c:	4303      	orrs	r3, r0
     79e:	400f      	ands	r7, r1
     7a0:	01bf      	lsls	r7, r7, #6
     7a2:	2040      	movs	r0, #64	; 0x40
     7a4:	4383      	bics	r3, r0
     7a6:	433b      	orrs	r3, r7
     7a8:	400e      	ands	r6, r1
     7aa:	01f6      	lsls	r6, r6, #7
     7ac:	3040      	adds	r0, #64	; 0x40
     7ae:	4383      	bics	r3, r0
     7b0:	4333      	orrs	r3, r6
     7b2:	3879      	subs	r0, #121	; 0x79
     7b4:	4005      	ands	r5, r0
     7b6:	022d      	lsls	r5, r5, #8
     7b8:	4809      	ldr	r0, [pc, #36]	; (7e0 <system_clock_source_xosc32k_set_config+0xb0>)
     7ba:	4003      	ands	r3, r0
     7bc:	432b      	orrs	r3, r5
     7be:	4021      	ands	r1, r4
     7c0:	0309      	lsls	r1, r1, #12
     7c2:	4808      	ldr	r0, [pc, #32]	; (7e4 <system_clock_source_xosc32k_set_config+0xb4>)
     7c4:	4003      	ands	r3, r0
     7c6:	430b      	orrs	r3, r1
     7c8:	465a      	mov	r2, fp
     7ca:	8293      	strh	r3, [r2, #20]
}
     7cc:	bc3c      	pop	{r2, r3, r4, r5}
     7ce:	4690      	mov	r8, r2
     7d0:	4699      	mov	r9, r3
     7d2:	46a2      	mov	sl, r4
     7d4:	46ab      	mov	fp, r5
     7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7d8:	40000800 	.word	0x40000800
     7dc:	200000c0 	.word	0x200000c0
     7e0:	fffff8ff 	.word	0xfffff8ff
     7e4:	ffffefff 	.word	0xffffefff

000007e8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     7e8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     7ea:	7a03      	ldrb	r3, [r0, #8]
     7ec:	069b      	lsls	r3, r3, #26
     7ee:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     7f0:	8942      	ldrh	r2, [r0, #10]
     7f2:	0592      	lsls	r2, r2, #22
     7f4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     7f6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     7f8:	4918      	ldr	r1, [pc, #96]	; (85c <system_clock_source_dfll_set_config+0x74>)
     7fa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     7fc:	7983      	ldrb	r3, [r0, #6]
     7fe:	79c2      	ldrb	r2, [r0, #7]
     800:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     802:	8842      	ldrh	r2, [r0, #2]
     804:	8884      	ldrh	r4, [r0, #4]
     806:	4322      	orrs	r2, r4
     808:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     80a:	7842      	ldrb	r2, [r0, #1]
     80c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     80e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     810:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     812:	7803      	ldrb	r3, [r0, #0]
     814:	2b04      	cmp	r3, #4
     816:	d011      	beq.n	83c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     818:	2b20      	cmp	r3, #32
     81a:	d10e      	bne.n	83a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     81c:	7b03      	ldrb	r3, [r0, #12]
     81e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     820:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     822:	4313      	orrs	r3, r2
     824:	89c2      	ldrh	r2, [r0, #14]
     826:	0412      	lsls	r2, r2, #16
     828:	490d      	ldr	r1, [pc, #52]	; (860 <system_clock_source_dfll_set_config+0x78>)
     82a:	400a      	ands	r2, r1
     82c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     82e:	4a0b      	ldr	r2, [pc, #44]	; (85c <system_clock_source_dfll_set_config+0x74>)
     830:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     832:	6811      	ldr	r1, [r2, #0]
     834:	4b0b      	ldr	r3, [pc, #44]	; (864 <system_clock_source_dfll_set_config+0x7c>)
     836:	430b      	orrs	r3, r1
     838:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     83a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     83c:	7b03      	ldrb	r3, [r0, #12]
     83e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     840:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     842:	4313      	orrs	r3, r2
     844:	89c2      	ldrh	r2, [r0, #14]
     846:	0412      	lsls	r2, r2, #16
     848:	4905      	ldr	r1, [pc, #20]	; (860 <system_clock_source_dfll_set_config+0x78>)
     84a:	400a      	ands	r2, r1
     84c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     84e:	4a03      	ldr	r2, [pc, #12]	; (85c <system_clock_source_dfll_set_config+0x74>)
     850:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     852:	6813      	ldr	r3, [r2, #0]
     854:	2104      	movs	r1, #4
     856:	430b      	orrs	r3, r1
     858:	6013      	str	r3, [r2, #0]
     85a:	e7ee      	b.n	83a <system_clock_source_dfll_set_config+0x52>
     85c:	200000c0 	.word	0x200000c0
     860:	03ff0000 	.word	0x03ff0000
     864:	00000424 	.word	0x00000424

00000868 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     868:	2808      	cmp	r0, #8
     86a:	d803      	bhi.n	874 <system_clock_source_enable+0xc>
     86c:	0080      	lsls	r0, r0, #2
     86e:	4b25      	ldr	r3, [pc, #148]	; (904 <system_clock_source_enable+0x9c>)
     870:	581b      	ldr	r3, [r3, r0]
     872:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     874:	2017      	movs	r0, #23
     876:	e044      	b.n	902 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     878:	4a23      	ldr	r2, [pc, #140]	; (908 <system_clock_source_enable+0xa0>)
     87a:	6a13      	ldr	r3, [r2, #32]
     87c:	2102      	movs	r1, #2
     87e:	430b      	orrs	r3, r1
     880:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     882:	2000      	movs	r0, #0
     884:	e03d      	b.n	902 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     886:	4a20      	ldr	r2, [pc, #128]	; (908 <system_clock_source_enable+0xa0>)
     888:	6993      	ldr	r3, [r2, #24]
     88a:	2102      	movs	r1, #2
     88c:	430b      	orrs	r3, r1
     88e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     890:	2000      	movs	r0, #0
		break;
     892:	e036      	b.n	902 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     894:	4a1c      	ldr	r2, [pc, #112]	; (908 <system_clock_source_enable+0xa0>)
     896:	8a13      	ldrh	r3, [r2, #16]
     898:	2102      	movs	r1, #2
     89a:	430b      	orrs	r3, r1
     89c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     89e:	2000      	movs	r0, #0
		break;
     8a0:	e02f      	b.n	902 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     8a2:	4a19      	ldr	r2, [pc, #100]	; (908 <system_clock_source_enable+0xa0>)
     8a4:	8a93      	ldrh	r3, [r2, #20]
     8a6:	2102      	movs	r1, #2
     8a8:	430b      	orrs	r3, r1
     8aa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     8ac:	2000      	movs	r0, #0
		break;
     8ae:	e028      	b.n	902 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     8b0:	4916      	ldr	r1, [pc, #88]	; (90c <system_clock_source_enable+0xa4>)
     8b2:	680b      	ldr	r3, [r1, #0]
     8b4:	2202      	movs	r2, #2
     8b6:	4313      	orrs	r3, r2
     8b8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     8ba:	4b13      	ldr	r3, [pc, #76]	; (908 <system_clock_source_enable+0xa0>)
     8bc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     8be:	0019      	movs	r1, r3
     8c0:	320e      	adds	r2, #14
     8c2:	68cb      	ldr	r3, [r1, #12]
     8c4:	421a      	tst	r2, r3
     8c6:	d0fc      	beq.n	8c2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     8c8:	4a10      	ldr	r2, [pc, #64]	; (90c <system_clock_source_enable+0xa4>)
     8ca:	6891      	ldr	r1, [r2, #8]
     8cc:	4b0e      	ldr	r3, [pc, #56]	; (908 <system_clock_source_enable+0xa0>)
     8ce:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     8d0:	6852      	ldr	r2, [r2, #4]
     8d2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     8d4:	2200      	movs	r2, #0
     8d6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     8d8:	0019      	movs	r1, r3
     8da:	3210      	adds	r2, #16
     8dc:	68cb      	ldr	r3, [r1, #12]
     8de:	421a      	tst	r2, r3
     8e0:	d0fc      	beq.n	8dc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     8e2:	4b0a      	ldr	r3, [pc, #40]	; (90c <system_clock_source_enable+0xa4>)
     8e4:	681b      	ldr	r3, [r3, #0]
     8e6:	b29b      	uxth	r3, r3
     8e8:	4a07      	ldr	r2, [pc, #28]	; (908 <system_clock_source_enable+0xa0>)
     8ea:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     8ec:	2000      	movs	r0, #0
     8ee:	e008      	b.n	902 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     8f0:	4905      	ldr	r1, [pc, #20]	; (908 <system_clock_source_enable+0xa0>)
     8f2:	2244      	movs	r2, #68	; 0x44
     8f4:	5c8b      	ldrb	r3, [r1, r2]
     8f6:	2002      	movs	r0, #2
     8f8:	4303      	orrs	r3, r0
     8fa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     8fc:	2000      	movs	r0, #0
		break;
     8fe:	e000      	b.n	902 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     900:	2000      	movs	r0, #0
}
     902:	4770      	bx	lr
     904:	000022e0 	.word	0x000022e0
     908:	40000800 	.word	0x40000800
     90c:	200000c0 	.word	0x200000c0

00000910 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     910:	b5f0      	push	{r4, r5, r6, r7, lr}
     912:	46ce      	mov	lr, r9
     914:	4647      	mov	r7, r8
     916:	b580      	push	{r7, lr}
     918:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     91a:	22c2      	movs	r2, #194	; 0xc2
     91c:	00d2      	lsls	r2, r2, #3
     91e:	4b5a      	ldr	r3, [pc, #360]	; (a88 <system_clock_init+0x178>)
     920:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     922:	4a5a      	ldr	r2, [pc, #360]	; (a8c <system_clock_init+0x17c>)
     924:	6853      	ldr	r3, [r2, #4]
     926:	211e      	movs	r1, #30
     928:	438b      	bics	r3, r1
     92a:	391a      	subs	r1, #26
     92c:	430b      	orrs	r3, r1
     92e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     930:	2202      	movs	r2, #2
     932:	ab01      	add	r3, sp, #4
     934:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     936:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     938:	4d55      	ldr	r5, [pc, #340]	; (a90 <system_clock_init+0x180>)
     93a:	b2e0      	uxtb	r0, r4
     93c:	a901      	add	r1, sp, #4
     93e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     940:	3401      	adds	r4, #1
     942:	2c25      	cmp	r4, #37	; 0x25
     944:	d1f9      	bne.n	93a <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     946:	a80c      	add	r0, sp, #48	; 0x30
     948:	2300      	movs	r3, #0
     94a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     94c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     94e:	2280      	movs	r2, #128	; 0x80
     950:	0212      	lsls	r2, r2, #8
     952:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     954:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     956:	2201      	movs	r2, #1
     958:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     95a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     95c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     95e:	3205      	adds	r2, #5
     960:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     962:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     964:	4b4b      	ldr	r3, [pc, #300]	; (a94 <system_clock_init+0x184>)
     966:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     968:	2005      	movs	r0, #5
     96a:	4b4b      	ldr	r3, [pc, #300]	; (a98 <system_clock_init+0x188>)
     96c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     96e:	4946      	ldr	r1, [pc, #280]	; (a88 <system_clock_init+0x178>)
     970:	2202      	movs	r2, #2
     972:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     974:	421a      	tst	r2, r3
     976:	d0fc      	beq.n	972 <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     978:	4943      	ldr	r1, [pc, #268]	; (a88 <system_clock_init+0x178>)
     97a:	8a8b      	ldrh	r3, [r1, #20]
     97c:	2280      	movs	r2, #128	; 0x80
     97e:	4313      	orrs	r3, r2
     980:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
     982:	4c46      	ldr	r4, [pc, #280]	; (a9c <system_clock_init+0x18c>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
     984:	6823      	ldr	r3, [r4, #0]
     986:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
     988:	698a      	ldr	r2, [r1, #24]
     98a:	0e5b      	lsrs	r3, r3, #25
     98c:	041b      	lsls	r3, r3, #16
     98e:	4844      	ldr	r0, [pc, #272]	; (aa0 <system_clock_init+0x190>)
     990:	4002      	ands	r2, r0
     992:	4313      	orrs	r3, r2
     994:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
     996:	a80a      	add	r0, sp, #40	; 0x28
     998:	2301      	movs	r3, #1
     99a:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
     99c:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
     99e:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
     9a0:	2207      	movs	r2, #7
     9a2:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
     9a4:	2500      	movs	r5, #0
     9a6:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
     9a8:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
     9aa:	4b3e      	ldr	r3, [pc, #248]	; (aa4 <system_clock_init+0x194>)
     9ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
     9ae:	2004      	movs	r0, #4
     9b0:	4b39      	ldr	r3, [pc, #228]	; (a98 <system_clock_init+0x188>)
     9b2:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     9b4:	ab05      	add	r3, sp, #20
     9b6:	2200      	movs	r2, #0
     9b8:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     9ba:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     9bc:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     9be:	2120      	movs	r1, #32
     9c0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     9c2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     9c4:	6823      	ldr	r3, [r4, #0]
     9c6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     9c8:	2b3f      	cmp	r3, #63	; 0x3f
     9ca:	d05a      	beq.n	a82 <system_clock_init+0x172>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     9cc:	a805      	add	r0, sp, #20
     9ce:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     9d0:	2307      	movs	r3, #7
     9d2:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
     9d4:	3303      	adds	r3, #3
     9d6:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
     9d8:	4b33      	ldr	r3, [pc, #204]	; (aa8 <system_clock_init+0x198>)
     9da:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
     9dc:	3bff      	subs	r3, #255	; 0xff
     9de:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
     9e0:	4b32      	ldr	r3, [pc, #200]	; (aac <system_clock_init+0x19c>)
     9e2:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     9e4:	4b32      	ldr	r3, [pc, #200]	; (ab0 <system_clock_init+0x1a0>)
     9e6:	4798      	blx	r3
	config->run_in_standby  = false;
     9e8:	a804      	add	r0, sp, #16
     9ea:	2500      	movs	r5, #0
     9ec:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     9ee:	2601      	movs	r6, #1
     9f0:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     9f2:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     9f4:	4b2f      	ldr	r3, [pc, #188]	; (ab4 <system_clock_init+0x1a4>)
     9f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     9f8:	2006      	movs	r0, #6
     9fa:	4f27      	ldr	r7, [pc, #156]	; (a98 <system_clock_init+0x188>)
     9fc:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     9fe:	4b2e      	ldr	r3, [pc, #184]	; (ab8 <system_clock_init+0x1a8>)
     a00:	4798      	blx	r3
	config->division_factor    = 1;
     a02:	ac01      	add	r4, sp, #4
     a04:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     a06:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
     a08:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     a0a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     a0c:	2305      	movs	r3, #5
     a0e:	7023      	strb	r3, [r4, #0]
     a10:	0021      	movs	r1, r4
     a12:	2001      	movs	r0, #1
     a14:	4b29      	ldr	r3, [pc, #164]	; (abc <system_clock_init+0x1ac>)
     a16:	4699      	mov	r9, r3
     a18:	4798      	blx	r3
     a1a:	2001      	movs	r0, #1
     a1c:	4b28      	ldr	r3, [pc, #160]	; (ac0 <system_clock_init+0x1b0>)
     a1e:	4698      	mov	r8, r3
     a20:	4798      	blx	r3
	config->division_factor    = 1;
     a22:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
     a24:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
     a26:	7265      	strb	r5, [r4, #9]
     a28:	2304      	movs	r3, #4
     a2a:	7023      	strb	r3, [r4, #0]
     a2c:	7226      	strb	r6, [r4, #8]
     a2e:	0021      	movs	r1, r4
     a30:	2007      	movs	r0, #7
     a32:	47c8      	blx	r9
     a34:	2007      	movs	r0, #7
     a36:	47c0      	blx	r8
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     a38:	2007      	movs	r0, #7
     a3a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     a3c:	4912      	ldr	r1, [pc, #72]	; (a88 <system_clock_init+0x178>)
     a3e:	2210      	movs	r2, #16
     a40:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     a42:	421a      	tst	r2, r3
     a44:	d0fc      	beq.n	a40 <system_clock_init+0x130>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
     a46:	4a10      	ldr	r2, [pc, #64]	; (a88 <system_clock_init+0x178>)
     a48:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     a4a:	2180      	movs	r1, #128	; 0x80
     a4c:	430b      	orrs	r3, r1
     a4e:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
     a50:	4a1c      	ldr	r2, [pc, #112]	; (ac4 <system_clock_init+0x1b4>)
     a52:	2300      	movs	r3, #0
     a54:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     a56:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     a58:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     a5a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     a5c:	a901      	add	r1, sp, #4
     a5e:	2201      	movs	r2, #1
     a60:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     a62:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
     a64:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     a66:	3307      	adds	r3, #7
     a68:	700b      	strb	r3, [r1, #0]
     a6a:	720a      	strb	r2, [r1, #8]
     a6c:	2000      	movs	r0, #0
     a6e:	4b13      	ldr	r3, [pc, #76]	; (abc <system_clock_init+0x1ac>)
     a70:	4798      	blx	r3
     a72:	2000      	movs	r0, #0
     a74:	4b12      	ldr	r3, [pc, #72]	; (ac0 <system_clock_init+0x1b0>)
     a76:	4798      	blx	r3
#endif
}
     a78:	b011      	add	sp, #68	; 0x44
     a7a:	bc0c      	pop	{r2, r3}
     a7c:	4690      	mov	r8, r2
     a7e:	4699      	mov	r9, r3
     a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     a82:	3b20      	subs	r3, #32
     a84:	e7a2      	b.n	9cc <system_clock_init+0xbc>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	40000800 	.word	0x40000800
     a8c:	41004000 	.word	0x41004000
     a90:	00001c21 	.word	0x00001c21
     a94:	00000731 	.word	0x00000731
     a98:	00000869 	.word	0x00000869
     a9c:	00806024 	.word	0x00806024
     aa0:	ff80ffff 	.word	0xff80ffff
     aa4:	000006b5 	.word	0x000006b5
     aa8:	000001ff 	.word	0x000001ff
     aac:	ffffbb80 	.word	0xffffbb80
     ab0:	000007e9 	.word	0x000007e9
     ab4:	00000679 	.word	0x00000679
     ab8:	000019e9 	.word	0x000019e9
     abc:	00001a0d 	.word	0x00001a0d
     ac0:	00001ac5 	.word	0x00001ac5
     ac4:	40000400 	.word	0x40000400

00000ac8 <dma_transfer_rx_callback>:
	transfer_tx_done = true;
}

static void dma_transfer_rx_callback(struct dma_resource* const resource)
{
	transfer_rx_done = true;
     ac8:	2201      	movs	r2, #1
     aca:	4b01      	ldr	r3, [pc, #4]	; (ad0 <dma_transfer_rx_callback+0x8>)
     acc:	701a      	strb	r2, [r3, #0]
}
     ace:	4770      	bx	lr
     ad0:	200000d8 	.word	0x200000d8

00000ad4 <main>:
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
}
/*! \brief Main function. Execution starts here.
*/
int main(void)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	b08e      	sub	sp, #56	; 0x38
	irq_initialize_vectors();

	// Initialize the sleep manager
	//sleepmgr_init();

	system_init();
     ad8:	4b55      	ldr	r3, [pc, #340]	; (c30 <main+0x15c>)
     ada:	4798      	blx	r3
	
	delay_init();
     adc:	4b55      	ldr	r3, [pc, #340]	; (c34 <main+0x160>)
     ade:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     ae0:	4c55      	ldr	r4, [pc, #340]	; (c38 <main+0x164>)
     ae2:	2314      	movs	r3, #20
     ae4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     ae6:	2300      	movs	r3, #0
     ae8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     aea:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     aec:	2201      	movs	r2, #1
     aee:	4669      	mov	r1, sp
     af0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     af2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     af4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     af6:	2014      	movs	r0, #20
     af8:	4b50      	ldr	r3, [pc, #320]	; (c3c <main+0x168>)
     afa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     afc:	7822      	ldrb	r2, [r4, #0]
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
     afe:	0953      	lsrs	r3, r2, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     b00:	09d0      	lsrs	r0, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     b02:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
     b04:	2800      	cmp	r0, #0
     b06:	d102      	bne.n	b0e <main+0x3a>
		return &(ports[port_index]->Group[group_index]);
     b08:	01db      	lsls	r3, r3, #7
     b0a:	494d      	ldr	r1, [pc, #308]	; (c40 <main+0x16c>)
     b0c:	1859      	adds	r1, r3, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b0e:	231f      	movs	r3, #31
     b10:	4013      	ands	r3, r2
     b12:	2201      	movs	r2, #1
     b14:	0010      	movs	r0, r2
     b16:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b18:	6188      	str	r0, [r1, #24]
	config->mode             = SPI_MODE_MASTER;
     b1a:	466b      	mov	r3, sp
     b1c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     b1e:	2300      	movs	r3, #0
     b20:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     b22:	9302      	str	r3, [sp, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     b24:	4669      	mov	r1, sp
     b26:	740b      	strb	r3, [r1, #16]
	config->run_in_standby   = false;
     b28:	744b      	strb	r3, [r1, #17]
	config->receiver_enable  = true;
     b2a:	748a      	strb	r2, [r1, #18]
	config->select_slave_low_detect_enable= true;
     b2c:	74ca      	strb	r2, [r1, #19]
	config->master_slave_select_enable= false;
     b2e:	750b      	strb	r3, [r1, #20]
	config->generator_source = GCLK_GENERATOR_0;
     b30:	2224      	movs	r2, #36	; 0x24
     b32:	548b      	strb	r3, [r1, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     b34:	3a18      	subs	r2, #24
     b36:	2100      	movs	r1, #0
     b38:	a806      	add	r0, sp, #24
     b3a:	4b42      	ldr	r3, [pc, #264]	; (c44 <main+0x170>)
     b3c:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
     b3e:	4b42      	ldr	r3, [pc, #264]	; (c48 <main+0x174>)
     b40:	9306      	str	r3, [sp, #24]
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
     b42:	2380      	movs	r3, #128	; 0x80
     b44:	039b      	lsls	r3, r3, #14
     b46:	9303      	str	r3, [sp, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
     b48:	4b40      	ldr	r3, [pc, #256]	; (c4c <main+0x178>)
     b4a:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
     b4c:	4b40      	ldr	r3, [pc, #256]	; (c50 <main+0x17c>)
     b4e:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
     b50:	4b40      	ldr	r3, [pc, #256]	; (c54 <main+0x180>)
     b52:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
     b54:	2301      	movs	r3, #1
     b56:	425b      	negs	r3, r3
     b58:	930d      	str	r3, [sp, #52]	; 0x34
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
     b5a:	4c3f      	ldr	r4, [pc, #252]	; (c58 <main+0x184>)
     b5c:	466a      	mov	r2, sp
     b5e:	493f      	ldr	r1, [pc, #252]	; (c5c <main+0x188>)
     b60:	0020      	movs	r0, r4
     b62:	4b3f      	ldr	r3, [pc, #252]	; (c60 <main+0x18c>)
     b64:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b66:	6823      	ldr	r3, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
     b68:	69da      	ldr	r2, [r3, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     b6a:	2a00      	cmp	r2, #0
     b6c:	d1fc      	bne.n	b68 <main+0x94>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     b6e:	681a      	ldr	r2, [r3, #0]
     b70:	2402      	movs	r4, #2
     b72:	4322      	orrs	r2, r4
     b74:	601a      	str	r2, [r3, #0]
	dma_get_config_defaults(&rx_config);
     b76:	4668      	mov	r0, sp
     b78:	4b3a      	ldr	r3, [pc, #232]	; (c64 <main+0x190>)
     b7a:	4798      	blx	r3
	rx_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     b7c:	2502      	movs	r5, #2
     b7e:	466b      	mov	r3, sp
     b80:	709c      	strb	r4, [r3, #2]
	dma_allocate(rx_resource, &rx_config);
     b82:	4c39      	ldr	r4, [pc, #228]	; (c68 <main+0x194>)
     b84:	4669      	mov	r1, sp
     b86:	0020      	movs	r0, r4
     b88:	4b38      	ldr	r3, [pc, #224]	; (c6c <main+0x198>)
     b8a:	4798      	blx	r3
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
     b8c:	2201      	movs	r2, #1
     b8e:	466b      	mov	r3, sp
     b90:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
     b92:	2300      	movs	r3, #0
     b94:	4669      	mov	r1, sp
     b96:	704b      	strb	r3, [r1, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
     b98:	708b      	strb	r3, [r1, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
     b9a:	70cb      	strb	r3, [r1, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
	/* Enable destination increment */
	config->dst_increment_enable = true;
     b9c:	714a      	strb	r2, [r1, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
     b9e:	718b      	strb	r3, [r1, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
     ba0:	71cb      	strb	r3, [r1, #7]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
     ba2:	9305      	str	r3, [sp, #20]
	rx_descriptor_config.src_increment_enable = false;
     ba4:	710b      	strb	r3, [r1, #4]
	rx_descriptor_config.block_transfer_count = sizeof(buffer_rx)/sizeof(uint8_t);
     ba6:	3314      	adds	r3, #20
     ba8:	810b      	strh	r3, [r1, #8]
	rx_descriptor_config.source_address = (uint32_t)(&adc_spi_module.hw->SPI.DATA.reg);
     baa:	4b2b      	ldr	r3, [pc, #172]	; (c58 <main+0x184>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	3328      	adds	r3, #40	; 0x28
     bb0:	9303      	str	r3, [sp, #12]
	rx_descriptor_config.destination_address = (uint32_t)buffer_rx + sizeof(buffer_rx);
     bb2:	4b2f      	ldr	r3, [pc, #188]	; (c70 <main+0x19c>)
     bb4:	3314      	adds	r3, #20
     bb6:	9304      	str	r3, [sp, #16]
	dma_descriptor_create(rx_descriptor, &rx_descriptor_config);
     bb8:	4e2e      	ldr	r6, [pc, #184]	; (c74 <main+0x1a0>)
     bba:	0030      	movs	r0, r6
     bbc:	4b2e      	ldr	r3, [pc, #184]	; (c78 <main+0x1a4>)
     bbe:	4798      	blx	r3
	//configure_dma_resource_tx(&dma_resource_tx);
	configure_dma_resource_rx(&dma_resource_rx);
	//setup_transfer_descriptor_tx(&dma_descriptor_tx);
	setup_transfer_descriptor_rx(&dma_descriptor_rx);
	//dma_add_descriptor(&dma_resource_tx, &dma_descriptor_tx);
	dma_add_descriptor(&dma_resource_rx, &dma_descriptor_rx);
     bc0:	0031      	movs	r1, r6
     bc2:	0020      	movs	r0, r4
     bc4:	4b2d      	ldr	r3, [pc, #180]	; (c7c <main+0x1a8>)
     bc6:	4798      	blx	r3
	resource->callback[type] = callback;
     bc8:	4b2d      	ldr	r3, [pc, #180]	; (c80 <main+0x1ac>)
     bca:	60a3      	str	r3, [r4, #8]
	resource->callback_enable |= 1 << type;
     bcc:	7c23      	ldrb	r3, [r4, #16]
     bce:	432b      	orrs	r3, r5
     bd0:	7423      	strb	r3, [r4, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
     bd2:	7822      	ldrb	r2, [r4, #0]
     bd4:	492b      	ldr	r1, [pc, #172]	; (c84 <main+0x1b0>)
     bd6:	5c8b      	ldrb	r3, [r1, r2]
     bd8:	432b      	orrs	r3, r5
     bda:	548b      	strb	r3, [r1, r2]
	dma_register_callback(&dma_resource_rx, dma_transfer_rx_callback, DMA_CALLBACK_TRANSFER_DONE);
	//dma_enable_callback(&dma_resource_tx, DMA_CALLBACK_TRANSFER_DONE);
	dma_enable_callback(&dma_resource_rx, DMA_CALLBACK_TRANSFER_DONE);
	
	while(1) {
		spi_select_slave(&adc_spi_module, &adc_spi_slave, true);
     bdc:	4c16      	ldr	r4, [pc, #88]	; (c38 <main+0x164>)
     bde:	4d1e      	ldr	r5, [pc, #120]	; (c58 <main+0x184>)
     be0:	2201      	movs	r2, #1
     be2:	0021      	movs	r1, r4
     be4:	0028      	movs	r0, r5
     be6:	4b28      	ldr	r3, [pc, #160]	; (c88 <main+0x1b4>)
     be8:	4798      	blx	r3
		//dma_start_transfer_job(&dma_resource_tx);
		dma_start_transfer_job(&dma_resource_rx);
     bea:	481f      	ldr	r0, [pc, #124]	; (c68 <main+0x194>)
     bec:	4b27      	ldr	r3, [pc, #156]	; (c8c <main+0x1b8>)
     bee:	4798      	blx	r3
		while(!transfer_rx_done) {
     bf0:	4a27      	ldr	r2, [pc, #156]	; (c90 <main+0x1bc>)
     bf2:	7813      	ldrb	r3, [r2, #0]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d0fc      	beq.n	bf2 <main+0x11e>
		}
		spi_select_slave(&adc_spi_module, &adc_spi_slave, false);
     bf8:	2200      	movs	r2, #0
     bfa:	490f      	ldr	r1, [pc, #60]	; (c38 <main+0x164>)
     bfc:	4816      	ldr	r0, [pc, #88]	; (c58 <main+0x184>)
     bfe:	4b22      	ldr	r3, [pc, #136]	; (c88 <main+0x1b4>)
     c00:	4798      	blx	r3
		transfer_tx_done = false;
     c02:	2200      	movs	r2, #0
     c04:	4b23      	ldr	r3, [pc, #140]	; (c94 <main+0x1c0>)
     c06:	701a      	strb	r2, [r3, #0]
		delay_us(2000);
     c08:	2000      	movs	r0, #0
     c0a:	4b23      	ldr	r3, [pc, #140]	; (c98 <main+0x1c4>)
     c0c:	4798      	blx	r3
     c0e:	22fa      	movs	r2, #250	; 0xfa
     c10:	00d2      	lsls	r2, r2, #3
     c12:	2300      	movs	r3, #0
     c14:	2100      	movs	r1, #0
     c16:	4e21      	ldr	r6, [pc, #132]	; (c9c <main+0x1c8>)
     c18:	47b0      	blx	r6
     c1a:	4a21      	ldr	r2, [pc, #132]	; (ca0 <main+0x1cc>)
     c1c:	2300      	movs	r3, #0
     c1e:	1880      	adds	r0, r0, r2
     c20:	4159      	adcs	r1, r3
     c22:	4a20      	ldr	r2, [pc, #128]	; (ca4 <main+0x1d0>)
     c24:	2300      	movs	r3, #0
     c26:	4e20      	ldr	r6, [pc, #128]	; (ca8 <main+0x1d4>)
     c28:	47b0      	blx	r6
     c2a:	4b20      	ldr	r3, [pc, #128]	; (cac <main+0x1d8>)
     c2c:	4798      	blx	r3
		spi_select_slave(&adc_spi_module, &adc_spi_slave, true);
     c2e:	e7d7      	b.n	be0 <main+0x10c>
     c30:	00001d4d 	.word	0x00001d4d
     c34:	00001919 	.word	0x00001919
     c38:	20000244 	.word	0x20000244
     c3c:	000019c5 	.word	0x000019c5
     c40:	41004400 	.word	0x41004400
     c44:	0000227b 	.word	0x0000227b
     c48:	003d0900 	.word	0x003d0900
     c4c:	00100002 	.word	0x00100002
     c50:	00110002 	.word	0x00110002
     c54:	00120002 	.word	0x00120002
     c58:	200001b0 	.word	0x200001b0
     c5c:	42000c00 	.word	0x42000c00
     c60:	000014f1 	.word	0x000014f1
     c64:	000001c9 	.word	0x000001c9
     c68:	20000228 	.word	0x20000228
     c6c:	000001d9 	.word	0x000001d9
     c70:	200001e0 	.word	0x200001e0
     c74:	20000260 	.word	0x20000260
     c78:	000003a9 	.word	0x000003a9
     c7c:	00000451 	.word	0x00000451
     c80:	00000ac9 	.word	0x00000ac9
     c84:	200000a0 	.word	0x200000a0
     c88:	00001825 	.word	0x00001825
     c8c:	00000321 	.word	0x00000321
     c90:	200000d8 	.word	0x200000d8
     c94:	200000d9 	.word	0x200000d9
     c98:	00001b09 	.word	0x00001b09
     c9c:	00002035 	.word	0x00002035
     ca0:	006acfbf 	.word	0x006acfbf
     ca4:	006acfc0 	.word	0x006acfc0
     ca8:	00001ff5 	.word	0x00001ff5
     cac:	20000001 	.word	0x20000001

00000cb0 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	46de      	mov	lr, fp
     cb4:	4657      	mov	r7, sl
     cb6:	464e      	mov	r6, r9
     cb8:	4645      	mov	r5, r8
     cba:	b5e0      	push	{r5, r6, r7, lr}
     cbc:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
     cbe:	4bc2      	ldr	r3, [pc, #776]	; (fc8 <USB_Handler+0x318>)
     cc0:	681f      	ldr	r7, [r3, #0]
     cc2:	683d      	ldr	r5, [r7, #0]
     cc4:	782b      	ldrb	r3, [r5, #0]
     cc6:	09db      	lsrs	r3, r3, #7
     cc8:	d114      	bne.n	cf4 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
     cca:	8c2e      	ldrh	r6, [r5, #32]
     ccc:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
     cce:	2e00      	cmp	r6, #0
     cd0:	d000      	beq.n	cd4 <USB_Handler+0x24>
     cd2:	e1a9      	b.n	1028 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
     cd4:	8bae      	ldrh	r6, [r5, #28]
     cd6:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
     cd8:	23ab      	movs	r3, #171	; 0xab
     cda:	005b      	lsls	r3, r3, #1
		flags_run = flags &
     cdc:	5afb      	ldrh	r3, [r7, r3]
     cde:	22aa      	movs	r2, #170	; 0xaa
     ce0:	0052      	lsls	r2, r2, #1
     ce2:	5abd      	ldrh	r5, [r7, r2]
     ce4:	401d      	ands	r5, r3
     ce6:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     ce8:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
     cea:	4fb8      	ldr	r7, [pc, #736]	; (fcc <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
     cec:	4bb6      	ldr	r3, [pc, #728]	; (fc8 <USB_Handler+0x318>)
     cee:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     cf0:	4698      	mov	r8, r3
     cf2:	e184      	b.n	ffe <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
     cf4:	8c2b      	ldrh	r3, [r5, #32]
     cf6:	b29b      	uxth	r3, r3
     cf8:	2b00      	cmp	r3, #0
     cfa:	d100      	bne.n	cfe <USB_Handler+0x4e>
     cfc:	e0de      	b.n	ebc <USB_Handler+0x20c>
     cfe:	8c28      	ldrh	r0, [r5, #32]
     d00:	b280      	uxth	r0, r0
     d02:	4bb3      	ldr	r3, [pc, #716]	; (fd0 <USB_Handler+0x320>)
     d04:	4798      	blx	r3
     d06:	0004      	movs	r4, r0
	if (pipe_int < 32) {
     d08:	281f      	cmp	r0, #31
     d0a:	d900      	bls.n	d0e <USB_Handler+0x5e>
     d0c:	e0d6      	b.n	ebc <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
     d0e:	0003      	movs	r3, r0
     d10:	3308      	adds	r3, #8
     d12:	015b      	lsls	r3, r3, #5
     d14:	18ed      	adds	r5, r5, r3
     d16:	79ed      	ldrb	r5, [r5, #7]
     d18:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
     d1a:	07ab      	lsls	r3, r5, #30
     d1c:	d041      	beq.n	da2 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     d1e:	4aad      	ldr	r2, [pc, #692]	; (fd4 <USB_Handler+0x324>)
     d20:	2301      	movs	r3, #1
     d22:	4083      	lsls	r3, r0
     d24:	6811      	ldr	r1, [r2, #0]
     d26:	4399      	bics	r1, r3
     d28:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     d2a:	0003      	movs	r3, r0
     d2c:	3308      	adds	r3, #8
     d2e:	015b      	lsls	r3, r3, #5
     d30:	683a      	ldr	r2, [r7, #0]
     d32:	4694      	mov	ip, r2
     d34:	4463      	add	r3, ip
     d36:	2203      	movs	r2, #3
     d38:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     d3a:	183b      	adds	r3, r7, r0
     d3c:	33ae      	adds	r3, #174	; 0xae
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	07db      	lsls	r3, r3, #31
     d42:	d52e      	bpl.n	da2 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
     d44:	4ba4      	ldr	r3, [pc, #656]	; (fd8 <USB_Handler+0x328>)
     d46:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
     d48:	683a      	ldr	r2, [r7, #0]
     d4a:	0003      	movs	r3, r0
     d4c:	3308      	adds	r3, #8
     d4e:	015b      	lsls	r3, r3, #5
     d50:	5c9b      	ldrb	r3, [r3, r2]
     d52:	079b      	lsls	r3, r3, #30
     d54:	0f9b      	lsrs	r3, r3, #30
     d56:	2b01      	cmp	r3, #1
     d58:	d100      	bne.n	d5c <USB_Handler+0xac>
     d5a:	e081      	b.n	e60 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     d5c:	0142      	lsls	r2, r0, #5
     d5e:	4b9f      	ldr	r3, [pc, #636]	; (fdc <USB_Handler+0x32c>)
     d60:	189b      	adds	r3, r3, r2
     d62:	685a      	ldr	r2, [r3, #4]
     d64:	0112      	lsls	r2, r2, #4
     d66:	0c92      	lsrs	r2, r2, #18
     d68:	b290      	uxth	r0, r2
     d6a:	499b      	ldr	r1, [pc, #620]	; (fd8 <USB_Handler+0x328>)
     d6c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     d6e:	685a      	ldr	r2, [r3, #4]
     d70:	0492      	lsls	r2, r2, #18
     d72:	0c92      	lsrs	r2, r2, #18
     d74:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
     d76:	685a      	ldr	r2, [r3, #4]
     d78:	4999      	ldr	r1, [pc, #612]	; (fe0 <USB_Handler+0x330>)
     d7a:	400a      	ands	r2, r1
     d7c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
     d7e:	2800      	cmp	r0, #0
     d80:	d107      	bne.n	d92 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     d82:	0162      	lsls	r2, r4, #5
     d84:	4b95      	ldr	r3, [pc, #596]	; (fdc <USB_Handler+0x32c>)
     d86:	189b      	adds	r3, r3, r2
     d88:	685b      	ldr	r3, [r3, #4]
     d8a:	049b      	lsls	r3, r3, #18
     d8c:	0c9b      	lsrs	r3, r3, #18
     d8e:	4a92      	ldr	r2, [pc, #584]	; (fd8 <USB_Handler+0x328>)
     d90:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
     d92:	4b8d      	ldr	r3, [pc, #564]	; (fc8 <USB_Handler+0x318>)
     d94:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
     d96:	1ca3      	adds	r3, r4, #2
     d98:	011b      	lsls	r3, r3, #4
     d9a:	18c3      	adds	r3, r0, r3
     d9c:	685b      	ldr	r3, [r3, #4]
     d9e:	498e      	ldr	r1, [pc, #568]	; (fd8 <USB_Handler+0x328>)
     da0:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
     da2:	076b      	lsls	r3, r5, #29
     da4:	d50e      	bpl.n	dc4 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     da6:	4a8b      	ldr	r2, [pc, #556]	; (fd4 <USB_Handler+0x324>)
     da8:	2301      	movs	r3, #1
     daa:	40a3      	lsls	r3, r4
     dac:	6811      	ldr	r1, [r2, #0]
     dae:	4399      	bics	r1, r3
     db0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     db2:	4b85      	ldr	r3, [pc, #532]	; (fc8 <USB_Handler+0x318>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	0022      	movs	r2, r4
     dba:	3208      	adds	r2, #8
     dbc:	0152      	lsls	r2, r2, #5
     dbe:	189b      	adds	r3, r3, r2
     dc0:	2204      	movs	r2, #4
     dc2:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
     dc4:	072b      	lsls	r3, r5, #28
     dc6:	d514      	bpl.n	df2 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     dc8:	4a82      	ldr	r2, [pc, #520]	; (fd4 <USB_Handler+0x324>)
     dca:	2301      	movs	r3, #1
     dcc:	40a3      	lsls	r3, r4
     dce:	6811      	ldr	r1, [r2, #0]
     dd0:	4399      	bics	r1, r3
     dd2:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     dd4:	4b7c      	ldr	r3, [pc, #496]	; (fc8 <USB_Handler+0x318>)
     dd6:	6818      	ldr	r0, [r3, #0]
     dd8:	0023      	movs	r3, r4
     dda:	3308      	adds	r3, #8
     ddc:	015b      	lsls	r3, r3, #5
     dde:	6802      	ldr	r2, [r0, #0]
     de0:	4694      	mov	ip, r2
     de2:	4463      	add	r3, ip
     de4:	2208      	movs	r2, #8
     de6:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     de8:	1903      	adds	r3, r0, r4
     dea:	33ae      	adds	r3, #174	; 0xae
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	079b      	lsls	r3, r3, #30
     df0:	d447      	bmi.n	e82 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
     df2:	06eb      	lsls	r3, r5, #27
     df4:	d514      	bpl.n	e20 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     df6:	4a77      	ldr	r2, [pc, #476]	; (fd4 <USB_Handler+0x324>)
     df8:	2301      	movs	r3, #1
     dfa:	40a3      	lsls	r3, r4
     dfc:	6811      	ldr	r1, [r2, #0]
     dfe:	4399      	bics	r1, r3
     e00:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     e02:	4b71      	ldr	r3, [pc, #452]	; (fc8 <USB_Handler+0x318>)
     e04:	6818      	ldr	r0, [r3, #0]
     e06:	0023      	movs	r3, r4
     e08:	3308      	adds	r3, #8
     e0a:	015b      	lsls	r3, r3, #5
     e0c:	6802      	ldr	r2, [r0, #0]
     e0e:	4694      	mov	ip, r2
     e10:	4463      	add	r3, ip
     e12:	2210      	movs	r2, #16
     e14:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     e16:	1903      	adds	r3, r0, r4
     e18:	33ae      	adds	r3, #174	; 0xae
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	075b      	lsls	r3, r3, #29
     e1e:	d43e      	bmi.n	e9e <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
     e20:	06ab      	lsls	r3, r5, #26
     e22:	d400      	bmi.n	e26 <USB_Handler+0x176>
     e24:	e0b0      	b.n	f88 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
     e26:	4a6b      	ldr	r2, [pc, #428]	; (fd4 <USB_Handler+0x324>)
     e28:	2301      	movs	r3, #1
     e2a:	40a3      	lsls	r3, r4
     e2c:	6811      	ldr	r1, [r2, #0]
     e2e:	4399      	bics	r1, r3
     e30:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
     e32:	4b65      	ldr	r3, [pc, #404]	; (fc8 <USB_Handler+0x318>)
     e34:	6818      	ldr	r0, [r3, #0]
     e36:	0023      	movs	r3, r4
     e38:	3308      	adds	r3, #8
     e3a:	015b      	lsls	r3, r3, #5
     e3c:	6802      	ldr	r2, [r0, #0]
     e3e:	4694      	mov	ip, r2
     e40:	4463      	add	r3, ip
     e42:	2220      	movs	r2, #32
     e44:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
     e46:	1903      	adds	r3, r0, r4
     e48:	33ae      	adds	r3, #174	; 0xae
     e4a:	781b      	ldrb	r3, [r3, #0]
     e4c:	071b      	lsls	r3, r3, #28
     e4e:	d400      	bmi.n	e52 <USB_Handler+0x1a2>
     e50:	e09a      	b.n	f88 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
     e52:	4961      	ldr	r1, [pc, #388]	; (fd8 <USB_Handler+0x328>)
     e54:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
     e56:	0124      	lsls	r4, r4, #4
     e58:	1904      	adds	r4, r0, r4
     e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
     e5c:	4798      	blx	r3
     e5e:	e093      	b.n	f88 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
     e60:	0142      	lsls	r2, r0, #5
     e62:	4b5e      	ldr	r3, [pc, #376]	; (fdc <USB_Handler+0x32c>)
     e64:	189b      	adds	r3, r3, r2
     e66:	685a      	ldr	r2, [r3, #4]
     e68:	0492      	lsls	r2, r2, #18
     e6a:	0c92      	lsrs	r2, r2, #18
     e6c:	495a      	ldr	r1, [pc, #360]	; (fd8 <USB_Handler+0x328>)
     e6e:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     e70:	685a      	ldr	r2, [r3, #4]
     e72:	0112      	lsls	r2, r2, #4
     e74:	0c92      	lsrs	r2, r2, #18
     e76:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
     e78:	685a      	ldr	r2, [r3, #4]
     e7a:	0b92      	lsrs	r2, r2, #14
     e7c:	0392      	lsls	r2, r2, #14
     e7e:	605a      	str	r2, [r3, #4]
     e80:	e787      	b.n	d92 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
     e82:	4955      	ldr	r1, [pc, #340]	; (fd8 <USB_Handler+0x328>)
     e84:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
     e86:	0162      	lsls	r2, r4, #5
     e88:	4b54      	ldr	r3, [pc, #336]	; (fdc <USB_Handler+0x32c>)
     e8a:	189b      	adds	r3, r3, r2
     e8c:	89db      	ldrh	r3, [r3, #14]
     e8e:	221f      	movs	r2, #31
     e90:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
     e92:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
     e94:	0123      	lsls	r3, r4, #4
     e96:	18c3      	adds	r3, r0, r3
     e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     e9a:	4798      	blx	r3
     e9c:	e7a9      	b.n	df2 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
     e9e:	494e      	ldr	r1, [pc, #312]	; (fd8 <USB_Handler+0x328>)
     ea0:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
     ea2:	0162      	lsls	r2, r4, #5
     ea4:	4b4d      	ldr	r3, [pc, #308]	; (fdc <USB_Handler+0x32c>)
     ea6:	189b      	adds	r3, r3, r2
     ea8:	685b      	ldr	r3, [r3, #4]
     eaa:	011b      	lsls	r3, r3, #4
     eac:	0c9b      	lsrs	r3, r3, #18
     eae:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
     eb0:	0123      	lsls	r3, r4, #4
     eb2:	18c3      	adds	r3, r0, r3
     eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     eb6:	2100      	movs	r1, #0
     eb8:	4798      	blx	r3
     eba:	e7b1      	b.n	e20 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
     ebc:	8bac      	ldrh	r4, [r5, #28]
     ebe:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
     ec0:	0763      	lsls	r3, r4, #29
     ec2:	d505      	bpl.n	ed0 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
     ec4:	2304      	movs	r3, #4
     ec6:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
     ec8:	33a1      	adds	r3, #161	; 0xa1
     eca:	5cfb      	ldrb	r3, [r7, r3]
     ecc:	07db      	lsls	r3, r3, #31
     ece:	d462      	bmi.n	f96 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
     ed0:	0723      	lsls	r3, r4, #28
     ed2:	d50b      	bpl.n	eec <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
     ed4:	2200      	movs	r2, #0
     ed6:	4b3f      	ldr	r3, [pc, #252]	; (fd4 <USB_Handler+0x324>)
     ed8:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
     eda:	4b3b      	ldr	r3, [pc, #236]	; (fc8 <USB_Handler+0x318>)
     edc:	6818      	ldr	r0, [r3, #0]
     ede:	2308      	movs	r3, #8
     ee0:	6802      	ldr	r2, [r0, #0]
     ee2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
     ee4:	339d      	adds	r3, #157	; 0x9d
     ee6:	5cc3      	ldrb	r3, [r0, r3]
     ee8:	079b      	lsls	r3, r3, #30
     eea:	d458      	bmi.n	f9e <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
     eec:	0663      	lsls	r3, r4, #25
     eee:	d508      	bpl.n	f02 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
     ef0:	4b35      	ldr	r3, [pc, #212]	; (fc8 <USB_Handler+0x318>)
     ef2:	6818      	ldr	r0, [r3, #0]
     ef4:	2340      	movs	r3, #64	; 0x40
     ef6:	6802      	ldr	r2, [r0, #0]
     ef8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
     efa:	3365      	adds	r3, #101	; 0x65
     efc:	5cc3      	ldrb	r3, [r0, r3]
     efe:	06db      	lsls	r3, r3, #27
     f00:	d450      	bmi.n	fa4 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
     f02:	06a3      	lsls	r3, r4, #26
     f04:	d508      	bpl.n	f18 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
     f06:	4b30      	ldr	r3, [pc, #192]	; (fc8 <USB_Handler+0x318>)
     f08:	6818      	ldr	r0, [r3, #0]
     f0a:	2320      	movs	r3, #32
     f0c:	6802      	ldr	r2, [r0, #0]
     f0e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
     f10:	3385      	adds	r3, #133	; 0x85
     f12:	5cc3      	ldrb	r3, [r0, r3]
     f14:	071b      	lsls	r3, r3, #28
     f16:	d448      	bmi.n	faa <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
     f18:	06e3      	lsls	r3, r4, #27
     f1a:	d508      	bpl.n	f2e <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
     f1c:	4b2a      	ldr	r3, [pc, #168]	; (fc8 <USB_Handler+0x318>)
     f1e:	6818      	ldr	r0, [r3, #0]
     f20:	2310      	movs	r3, #16
     f22:	6802      	ldr	r2, [r0, #0]
     f24:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
     f26:	3395      	adds	r3, #149	; 0x95
     f28:	5cc3      	ldrb	r3, [r0, r3]
     f2a:	075b      	lsls	r3, r3, #29
     f2c:	d440      	bmi.n	fb0 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
     f2e:	0623      	lsls	r3, r4, #24
     f30:	d50b      	bpl.n	f4a <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
     f32:	2200      	movs	r2, #0
     f34:	4b27      	ldr	r3, [pc, #156]	; (fd4 <USB_Handler+0x324>)
     f36:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
     f38:	4b23      	ldr	r3, [pc, #140]	; (fc8 <USB_Handler+0x318>)
     f3a:	6818      	ldr	r0, [r3, #0]
     f3c:	2380      	movs	r3, #128	; 0x80
     f3e:	6802      	ldr	r2, [r0, #0]
     f40:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
     f42:	3325      	adds	r3, #37	; 0x25
     f44:	5cc3      	ldrb	r3, [r0, r3]
     f46:	069b      	lsls	r3, r3, #26
     f48:	d435      	bmi.n	fb6 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
     f4a:	05e3      	lsls	r3, r4, #23
     f4c:	d50c      	bpl.n	f68 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
     f4e:	2200      	movs	r2, #0
     f50:	4b20      	ldr	r3, [pc, #128]	; (fd4 <USB_Handler+0x324>)
     f52:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
     f54:	4b1c      	ldr	r3, [pc, #112]	; (fc8 <USB_Handler+0x318>)
     f56:	6818      	ldr	r0, [r3, #0]
     f58:	2380      	movs	r3, #128	; 0x80
     f5a:	005b      	lsls	r3, r3, #1
     f5c:	6802      	ldr	r2, [r0, #0]
     f5e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
     f60:	3b5b      	subs	r3, #91	; 0x5b
     f62:	5cc3      	ldrb	r3, [r0, r3]
     f64:	065b      	lsls	r3, r3, #25
     f66:	d429      	bmi.n	fbc <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
     f68:	05a3      	lsls	r3, r4, #22
     f6a:	d50d      	bpl.n	f88 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
     f6c:	2200      	movs	r2, #0
     f6e:	4b19      	ldr	r3, [pc, #100]	; (fd4 <USB_Handler+0x324>)
     f70:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
     f72:	4b15      	ldr	r3, [pc, #84]	; (fc8 <USB_Handler+0x318>)
     f74:	6818      	ldr	r0, [r3, #0]
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	009b      	lsls	r3, r3, #2
     f7a:	6802      	ldr	r2, [r0, #0]
     f7c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
     f7e:	3b5c      	subs	r3, #92	; 0x5c
     f80:	3bff      	subs	r3, #255	; 0xff
     f82:	5cc3      	ldrb	r3, [r0, r3]
     f84:	2b7f      	cmp	r3, #127	; 0x7f
     f86:	d81c      	bhi.n	fc2 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
     f88:	b003      	add	sp, #12
     f8a:	bc3c      	pop	{r2, r3, r4, r5}
     f8c:	4690      	mov	r8, r2
     f8e:	4699      	mov	r9, r3
     f90:	46a2      	mov	sl, r4
     f92:	46ab      	mov	fp, r5
     f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
     f96:	687b      	ldr	r3, [r7, #4]
     f98:	0038      	movs	r0, r7
     f9a:	4798      	blx	r3
     f9c:	e798      	b.n	ed0 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
     f9e:	6883      	ldr	r3, [r0, #8]
     fa0:	4798      	blx	r3
     fa2:	e7a3      	b.n	eec <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
     fa4:	6943      	ldr	r3, [r0, #20]
     fa6:	4798      	blx	r3
     fa8:	e7ab      	b.n	f02 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
     faa:	6903      	ldr	r3, [r0, #16]
     fac:	4798      	blx	r3
     fae:	e7b3      	b.n	f18 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
     fb0:	68c3      	ldr	r3, [r0, #12]
     fb2:	4798      	blx	r3
     fb4:	e7bb      	b.n	f2e <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
     fb6:	6983      	ldr	r3, [r0, #24]
     fb8:	4798      	blx	r3
     fba:	e7c6      	b.n	f4a <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
     fbc:	69c3      	ldr	r3, [r0, #28]
     fbe:	4798      	blx	r3
     fc0:	e7d2      	b.n	f68 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
     fc2:	6a03      	ldr	r3, [r0, #32]
     fc4:	4798      	blx	r3
     fc6:	e7df      	b.n	f88 <USB_Handler+0x2d8>
     fc8:	200000dc 	.word	0x200000dc
     fcc:	00002304 	.word	0x00002304
     fd0:	00001fb5 	.word	0x00001fb5
     fd4:	200000ec 	.word	0x200000ec
     fd8:	200000f0 	.word	0x200000f0
     fdc:	200008fc 	.word	0x200008fc
     fe0:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
     fe4:	0023      	movs	r3, r4
     fe6:	332e      	adds	r3, #46	; 0x2e
     fe8:	009b      	lsls	r3, r3, #2
     fea:	4642      	mov	r2, r8
     fec:	6812      	ldr	r2, [r2, #0]
     fee:	589b      	ldr	r3, [r3, r2]
     ff0:	499e      	ldr	r1, [pc, #632]	; (126c <USB_Handler+0x5bc>)
     ff2:	4642      	mov	r2, r8
     ff4:	6810      	ldr	r0, [r2, #0]
     ff6:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
     ff8:	3401      	adds	r4, #1
     ffa:	2c07      	cmp	r4, #7
     ffc:	d0c4      	beq.n	f88 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
     ffe:	0063      	lsls	r3, r4, #1
    1000:	5bdb      	ldrh	r3, [r3, r7]
    1002:	4233      	tst	r3, r6
    1004:	d003      	beq.n	100e <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    1006:	464a      	mov	r2, r9
    1008:	6812      	ldr	r2, [r2, #0]
    100a:	6812      	ldr	r2, [r2, #0]
    100c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    100e:	422b      	tst	r3, r5
    1010:	d0f2      	beq.n	ff8 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    1012:	2c06      	cmp	r4, #6
    1014:	d1e6      	bne.n	fe4 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    1016:	4b96      	ldr	r3, [pc, #600]	; (1270 <USB_Handler+0x5c0>)
    1018:	891b      	ldrh	r3, [r3, #8]
    101a:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    101c:	2280      	movs	r2, #128	; 0x80
    101e:	0052      	lsls	r2, r2, #1
    1020:	4013      	ands	r3, r2
    1022:	4a92      	ldr	r2, [pc, #584]	; (126c <USB_Handler+0x5bc>)
    1024:	6013      	str	r3, [r2, #0]
    1026:	e7dd      	b.n	fe4 <USB_Handler+0x334>
    1028:	003c      	movs	r4, r7
    102a:	3459      	adds	r4, #89	; 0x59
    102c:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    102e:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    1030:	2201      	movs	r2, #1
    1032:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1034:	325f      	adds	r2, #95	; 0x5f
    1036:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1038:	3a50      	subs	r2, #80	; 0x50
    103a:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    103c:	3a0d      	subs	r2, #13
    103e:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1040:	46b8      	mov	r8, r7
    1042:	002f      	movs	r7, r5
    1044:	e0b9      	b.n	11ba <USB_Handler+0x50a>
    1046:	002a      	movs	r2, r5
    1048:	003d      	movs	r5, r7
    104a:	4647      	mov	r7, r8
    104c:	4690      	mov	r8, r2
    104e:	015b      	lsls	r3, r3, #5
    1050:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    1052:	2308      	movs	r3, #8
    1054:	33ff      	adds	r3, #255	; 0xff
    1056:	5ceb      	ldrb	r3, [r5, r3]
    1058:	065b      	lsls	r3, r3, #25
    105a:	d516      	bpl.n	108a <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    105c:	2240      	movs	r2, #64	; 0x40
    105e:	2308      	movs	r3, #8
    1060:	33ff      	adds	r3, #255	; 0xff
    1062:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1064:	3b88      	subs	r3, #136	; 0x88
    1066:	3bff      	subs	r3, #255	; 0xff
    1068:	4642      	mov	r2, r8
    106a:	4313      	orrs	r3, r2
    106c:	4a81      	ldr	r2, [pc, #516]	; (1274 <USB_Handler+0x5c4>)
    106e:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    1070:	2360      	movs	r3, #96	; 0x60
    1072:	420b      	tst	r3, r1
    1074:	d100      	bne.n	1078 <USB_Handler+0x3c8>
    1076:	e787      	b.n	f88 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    1078:	9b01      	ldr	r3, [sp, #4]
    107a:	011b      	lsls	r3, r3, #4
    107c:	18fb      	adds	r3, r7, r3
    107e:	33e0      	adds	r3, #224	; 0xe0
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	497c      	ldr	r1, [pc, #496]	; (1274 <USB_Handler+0x5c4>)
    1084:	0038      	movs	r0, r7
    1086:	4798      	blx	r3
    1088:	e77e      	b.n	f88 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    108a:	2308      	movs	r3, #8
    108c:	33ff      	adds	r3, #255	; 0xff
    108e:	5ceb      	ldrb	r3, [r5, r3]
    1090:	069b      	lsls	r3, r3, #26
    1092:	d5ed      	bpl.n	1070 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    1094:	2220      	movs	r2, #32
    1096:	2308      	movs	r3, #8
    1098:	33ff      	adds	r3, #255	; 0xff
    109a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    109c:	4b75      	ldr	r3, [pc, #468]	; (1274 <USB_Handler+0x5c4>)
    109e:	4642      	mov	r2, r8
    10a0:	719a      	strb	r2, [r3, #6]
    10a2:	e7e5      	b.n	1070 <USB_Handler+0x3c0>
    10a4:	003d      	movs	r5, r7
    10a6:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    10a8:	9a01      	ldr	r2, [sp, #4]
    10aa:	0013      	movs	r3, r2
    10ac:	3308      	adds	r3, #8
    10ae:	015b      	lsls	r3, r3, #5
    10b0:	18ed      	adds	r5, r5, r3
    10b2:	2310      	movs	r3, #16
    10b4:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    10b6:	18bb      	adds	r3, r7, r2
    10b8:	3361      	adds	r3, #97	; 0x61
    10ba:	33ff      	adds	r3, #255	; 0xff
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	06db      	lsls	r3, r3, #27
    10c0:	d400      	bmi.n	10c4 <USB_Handler+0x414>
    10c2:	e761      	b.n	f88 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    10c4:	0010      	movs	r0, r2
    10c6:	0152      	lsls	r2, r2, #5
    10c8:	4b69      	ldr	r3, [pc, #420]	; (1270 <USB_Handler+0x5c0>)
    10ca:	189b      	adds	r3, r3, r2
    10cc:	685b      	ldr	r3, [r3, #4]
    10ce:	049b      	lsls	r3, r3, #18
    10d0:	0c9b      	lsrs	r3, r3, #18
    10d2:	4968      	ldr	r1, [pc, #416]	; (1274 <USB_Handler+0x5c4>)
    10d4:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    10d6:	0103      	lsls	r3, r0, #4
    10d8:	18fb      	adds	r3, r7, r3
    10da:	33dc      	adds	r3, #220	; 0xdc
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	4640      	mov	r0, r8
    10e0:	4798      	blx	r3
    10e2:	e751      	b.n	f88 <USB_Handler+0x2d8>
    10e4:	002a      	movs	r2, r5
    10e6:	003d      	movs	r5, r7
    10e8:	4647      	mov	r7, r8
    10ea:	4690      	mov	r8, r2
    10ec:	015b      	lsls	r3, r3, #5
    10ee:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    10f0:	2308      	movs	r3, #8
    10f2:	33ff      	adds	r3, #255	; 0xff
    10f4:	5ceb      	ldrb	r3, [r5, r3]
    10f6:	079b      	lsls	r3, r3, #30
    10f8:	d51e      	bpl.n	1138 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    10fa:	2202      	movs	r2, #2
    10fc:	2308      	movs	r3, #8
    10fe:	33ff      	adds	r3, #255	; 0xff
    1100:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1102:	485c      	ldr	r0, [pc, #368]	; (1274 <USB_Handler+0x5c4>)
    1104:	3b88      	subs	r3, #136	; 0x88
    1106:	3bff      	subs	r3, #255	; 0xff
    1108:	4642      	mov	r2, r8
    110a:	4313      	orrs	r3, r2
    110c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    110e:	9b01      	ldr	r3, [sp, #4]
    1110:	015a      	lsls	r2, r3, #5
    1112:	4b57      	ldr	r3, [pc, #348]	; (1270 <USB_Handler+0x5c0>)
    1114:	189b      	adds	r3, r3, r2
    1116:	3310      	adds	r3, #16
    1118:	685b      	ldr	r3, [r3, #4]
    111a:	049b      	lsls	r3, r3, #18
    111c:	0c9b      	lsrs	r3, r3, #18
    111e:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    1120:	078b      	lsls	r3, r1, #30
    1122:	d100      	bne.n	1126 <USB_Handler+0x476>
    1124:	e730      	b.n	f88 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    1126:	9b01      	ldr	r3, [sp, #4]
    1128:	330d      	adds	r3, #13
    112a:	011b      	lsls	r3, r3, #4
    112c:	18fb      	adds	r3, r7, r3
    112e:	685b      	ldr	r3, [r3, #4]
    1130:	4950      	ldr	r1, [pc, #320]	; (1274 <USB_Handler+0x5c4>)
    1132:	0038      	movs	r0, r7
    1134:	4798      	blx	r3
    1136:	e727      	b.n	f88 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1138:	2308      	movs	r3, #8
    113a:	33ff      	adds	r3, #255	; 0xff
    113c:	5ceb      	ldrb	r3, [r5, r3]
    113e:	07db      	lsls	r3, r3, #31
    1140:	d5ee      	bpl.n	1120 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    1142:	2201      	movs	r2, #1
    1144:	2308      	movs	r3, #8
    1146:	33ff      	adds	r3, #255	; 0xff
    1148:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    114a:	484a      	ldr	r0, [pc, #296]	; (1274 <USB_Handler+0x5c4>)
    114c:	4643      	mov	r3, r8
    114e:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    1150:	9b01      	ldr	r3, [sp, #4]
    1152:	015b      	lsls	r3, r3, #5
    1154:	4a46      	ldr	r2, [pc, #280]	; (1270 <USB_Handler+0x5c0>)
    1156:	18d2      	adds	r2, r2, r3
    1158:	6853      	ldr	r3, [r2, #4]
    115a:	049b      	lsls	r3, r3, #18
    115c:	0c9b      	lsrs	r3, r3, #18
    115e:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    1160:	6853      	ldr	r3, [r2, #4]
    1162:	011b      	lsls	r3, r3, #4
    1164:	0c9b      	lsrs	r3, r3, #18
    1166:	8083      	strh	r3, [r0, #4]
    1168:	e7da      	b.n	1120 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    116a:	2208      	movs	r2, #8
    116c:	32ff      	adds	r2, #255	; 0xff
    116e:	5c9a      	ldrb	r2, [r3, r2]
    1170:	0752      	lsls	r2, r2, #29
    1172:	d56e      	bpl.n	1252 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    1174:	2004      	movs	r0, #4
    1176:	2208      	movs	r2, #8
    1178:	32ff      	adds	r2, #255	; 0xff
    117a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    117c:	9801      	ldr	r0, [sp, #4]
    117e:	0142      	lsls	r2, r0, #5
    1180:	4b3b      	ldr	r3, [pc, #236]	; (1270 <USB_Handler+0x5c0>)
    1182:	189b      	adds	r3, r3, r2
    1184:	7a9b      	ldrb	r3, [r3, #10]
    1186:	079b      	lsls	r3, r3, #30
    1188:	d505      	bpl.n	1196 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    118a:	4b39      	ldr	r3, [pc, #228]	; (1270 <USB_Handler+0x5c0>)
    118c:	189b      	adds	r3, r3, r2
    118e:	7a9a      	ldrb	r2, [r3, #10]
    1190:	2002      	movs	r0, #2
    1192:	4382      	bics	r2, r0
    1194:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    1196:	4b37      	ldr	r3, [pc, #220]	; (1274 <USB_Handler+0x5c4>)
    1198:	4642      	mov	r2, r8
    119a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    119c:	9b01      	ldr	r3, [sp, #4]
    119e:	3308      	adds	r3, #8
    11a0:	015b      	lsls	r3, r3, #5
    11a2:	683a      	ldr	r2, [r7, #0]
    11a4:	4694      	mov	ip, r2
    11a6:	4463      	add	r3, ip
    11a8:	79db      	ldrb	r3, [r3, #7]
    11aa:	07db      	lsls	r3, r3, #31
    11ac:	d551      	bpl.n	1252 <USB_Handler+0x5a2>
    11ae:	e6eb      	b.n	f88 <USB_Handler+0x2d8>
    11b0:	3301      	adds	r3, #1
    11b2:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    11b4:	2b08      	cmp	r3, #8
    11b6:	d100      	bne.n	11ba <USB_Handler+0x50a>
    11b8:	e6e6      	b.n	f88 <USB_Handler+0x2d8>
    11ba:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    11bc:	9301      	str	r3, [sp, #4]
    11be:	0032      	movs	r2, r6
    11c0:	411a      	asrs	r2, r3
    11c2:	4661      	mov	r1, ip
    11c4:	4211      	tst	r1, r2
    11c6:	d0f3      	beq.n	11b0 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    11c8:	001a      	movs	r2, r3
    11ca:	3208      	adds	r2, #8
    11cc:	0152      	lsls	r2, r2, #5
    11ce:	18ba      	adds	r2, r7, r2
    11d0:	79d2      	ldrb	r2, [r2, #7]
    11d2:	b2d2      	uxtb	r2, r2
    11d4:	7a21      	ldrb	r1, [r4, #8]
    11d6:	4011      	ands	r1, r2
    11d8:	7820      	ldrb	r0, [r4, #0]
    11da:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    11dc:	4648      	mov	r0, r9
    11de:	4210      	tst	r0, r2
    11e0:	d000      	beq.n	11e4 <USB_Handler+0x534>
    11e2:	e730      	b.n	1046 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    11e4:	4650      	mov	r0, sl
    11e6:	4210      	tst	r0, r2
    11e8:	d000      	beq.n	11ec <USB_Handler+0x53c>
    11ea:	e75b      	b.n	10a4 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    11ec:	4658      	mov	r0, fp
    11ee:	4210      	tst	r0, r2
    11f0:	d000      	beq.n	11f4 <USB_Handler+0x544>
    11f2:	e777      	b.n	10e4 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    11f4:	200c      	movs	r0, #12
    11f6:	4210      	tst	r0, r2
    11f8:	d0da      	beq.n	11b0 <USB_Handler+0x500>
    11fa:	002a      	movs	r2, r5
    11fc:	003d      	movs	r5, r7
    11fe:	4647      	mov	r7, r8
    1200:	4690      	mov	r8, r2
    1202:	015b      	lsls	r3, r3, #5
    1204:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1206:	2208      	movs	r2, #8
    1208:	32ff      	adds	r2, #255	; 0xff
    120a:	5c9a      	ldrb	r2, [r3, r2]
    120c:	0712      	lsls	r2, r2, #28
    120e:	d5ac      	bpl.n	116a <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    1210:	3804      	subs	r0, #4
    1212:	2208      	movs	r2, #8
    1214:	32ff      	adds	r2, #255	; 0xff
    1216:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    1218:	9801      	ldr	r0, [sp, #4]
    121a:	0142      	lsls	r2, r0, #5
    121c:	4b14      	ldr	r3, [pc, #80]	; (1270 <USB_Handler+0x5c0>)
    121e:	189b      	adds	r3, r3, r2
    1220:	7e9b      	ldrb	r3, [r3, #26]
    1222:	079b      	lsls	r3, r3, #30
    1224:	d505      	bpl.n	1232 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    1226:	4b12      	ldr	r3, [pc, #72]	; (1270 <USB_Handler+0x5c0>)
    1228:	189b      	adds	r3, r3, r2
    122a:	7e9a      	ldrb	r2, [r3, #26]
    122c:	2002      	movs	r0, #2
    122e:	4382      	bics	r2, r0
    1230:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    1232:	2380      	movs	r3, #128	; 0x80
    1234:	425b      	negs	r3, r3
    1236:	4642      	mov	r2, r8
    1238:	4313      	orrs	r3, r2
    123a:	4a0e      	ldr	r2, [pc, #56]	; (1274 <USB_Handler+0x5c4>)
    123c:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    123e:	9b01      	ldr	r3, [sp, #4]
    1240:	3308      	adds	r3, #8
    1242:	015b      	lsls	r3, r3, #5
    1244:	683a      	ldr	r2, [r7, #0]
    1246:	4694      	mov	ip, r2
    1248:	4463      	add	r3, ip
    124a:	79db      	ldrb	r3, [r3, #7]
    124c:	079b      	lsls	r3, r3, #30
    124e:	d500      	bpl.n	1252 <USB_Handler+0x5a2>
    1250:	e69a      	b.n	f88 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    1252:	230c      	movs	r3, #12
    1254:	420b      	tst	r3, r1
    1256:	d100      	bne.n	125a <USB_Handler+0x5aa>
    1258:	e696      	b.n	f88 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    125a:	9b01      	ldr	r3, [sp, #4]
    125c:	011b      	lsls	r3, r3, #4
    125e:	18fb      	adds	r3, r7, r3
    1260:	33d8      	adds	r3, #216	; 0xd8
    1262:	681b      	ldr	r3, [r3, #0]
    1264:	4903      	ldr	r1, [pc, #12]	; (1274 <USB_Handler+0x5c4>)
    1266:	0038      	movs	r0, r7
    1268:	4798      	blx	r3
    126a:	e68d      	b.n	f88 <USB_Handler+0x2d8>
    126c:	200000e0 	.word	0x200000e0
    1270:	200008fc 	.word	0x200008fc
    1274:	200000e4 	.word	0x200000e4

00001278 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1278:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    127a:	2200      	movs	r2, #0
    127c:	4b10      	ldr	r3, [pc, #64]	; (12c0 <EIC_Handler+0x48>)
    127e:	701a      	strb	r2, [r3, #0]
    1280:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    1282:	4910      	ldr	r1, [pc, #64]	; (12c4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    1284:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    1286:	4e10      	ldr	r6, [pc, #64]	; (12c8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    1288:	4c0d      	ldr	r4, [pc, #52]	; (12c0 <EIC_Handler+0x48>)
    128a:	e00a      	b.n	12a2 <EIC_Handler+0x2a>
		return eics[eic_index];
    128c:	490d      	ldr	r1, [pc, #52]	; (12c4 <EIC_Handler+0x4c>)
    128e:	e008      	b.n	12a2 <EIC_Handler+0x2a>
    1290:	7823      	ldrb	r3, [r4, #0]
    1292:	3301      	adds	r3, #1
    1294:	b2db      	uxtb	r3, r3
    1296:	7023      	strb	r3, [r4, #0]
    1298:	2b0f      	cmp	r3, #15
    129a:	d810      	bhi.n	12be <EIC_Handler+0x46>
		return NULL;
    129c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    129e:	2b1f      	cmp	r3, #31
    12a0:	d9f4      	bls.n	128c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    12a2:	0028      	movs	r0, r5
    12a4:	4018      	ands	r0, r3
    12a6:	2201      	movs	r2, #1
    12a8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    12aa:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    12ac:	4210      	tst	r0, r2
    12ae:	d0ef      	beq.n	1290 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    12b0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    12b2:	009b      	lsls	r3, r3, #2
    12b4:	599b      	ldr	r3, [r3, r6]
    12b6:	2b00      	cmp	r3, #0
    12b8:	d0ea      	beq.n	1290 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    12ba:	4798      	blx	r3
    12bc:	e7e8      	b.n	1290 <EIC_Handler+0x18>
			}
		}
	}
}
    12be:	bd70      	pop	{r4, r5, r6, pc}
    12c0:	200009fc 	.word	0x200009fc
    12c4:	40001800 	.word	0x40001800
    12c8:	2000016c 	.word	0x2000016c

000012cc <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    12cc:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    12ce:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12d0:	2340      	movs	r3, #64	; 0x40
    12d2:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    12d4:	4281      	cmp	r1, r0
    12d6:	d202      	bcs.n	12de <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    12d8:	0018      	movs	r0, r3
    12da:	bd10      	pop	{r4, pc}
		baud_calculated++;
    12dc:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    12de:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    12e0:	1c63      	adds	r3, r4, #1
    12e2:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    12e4:	4288      	cmp	r0, r1
    12e6:	d9f9      	bls.n	12dc <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    12e8:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    12ea:	2cff      	cmp	r4, #255	; 0xff
    12ec:	d8f4      	bhi.n	12d8 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    12ee:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    12f0:	2300      	movs	r3, #0
    12f2:	e7f1      	b.n	12d8 <_sercom_get_sync_baud_val+0xc>

000012f4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    12f4:	b510      	push	{r4, lr}
    12f6:	b082      	sub	sp, #8
    12f8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    12fa:	4b0e      	ldr	r3, [pc, #56]	; (1334 <sercom_set_gclk_generator+0x40>)
    12fc:	781b      	ldrb	r3, [r3, #0]
    12fe:	2b00      	cmp	r3, #0
    1300:	d007      	beq.n	1312 <sercom_set_gclk_generator+0x1e>
    1302:	2900      	cmp	r1, #0
    1304:	d105      	bne.n	1312 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1306:	4b0b      	ldr	r3, [pc, #44]	; (1334 <sercom_set_gclk_generator+0x40>)
    1308:	785b      	ldrb	r3, [r3, #1]
    130a:	4283      	cmp	r3, r0
    130c:	d010      	beq.n	1330 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    130e:	201d      	movs	r0, #29
    1310:	e00c      	b.n	132c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1312:	a901      	add	r1, sp, #4
    1314:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1316:	2013      	movs	r0, #19
    1318:	4b07      	ldr	r3, [pc, #28]	; (1338 <sercom_set_gclk_generator+0x44>)
    131a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    131c:	2013      	movs	r0, #19
    131e:	4b07      	ldr	r3, [pc, #28]	; (133c <sercom_set_gclk_generator+0x48>)
    1320:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <sercom_set_gclk_generator+0x40>)
    1324:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1326:	2201      	movs	r2, #1
    1328:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    132a:	2000      	movs	r0, #0
}
    132c:	b002      	add	sp, #8
    132e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1330:	2000      	movs	r0, #0
    1332:	e7fb      	b.n	132c <sercom_set_gclk_generator+0x38>
    1334:	200000f8 	.word	0x200000f8
    1338:	00001c21 	.word	0x00001c21
    133c:	00001b95 	.word	0x00001b95

00001340 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1340:	4b40      	ldr	r3, [pc, #256]	; (1444 <_sercom_get_default_pad+0x104>)
    1342:	4298      	cmp	r0, r3
    1344:	d031      	beq.n	13aa <_sercom_get_default_pad+0x6a>
    1346:	d90a      	bls.n	135e <_sercom_get_default_pad+0x1e>
    1348:	4b3f      	ldr	r3, [pc, #252]	; (1448 <_sercom_get_default_pad+0x108>)
    134a:	4298      	cmp	r0, r3
    134c:	d04d      	beq.n	13ea <_sercom_get_default_pad+0xaa>
    134e:	4b3f      	ldr	r3, [pc, #252]	; (144c <_sercom_get_default_pad+0x10c>)
    1350:	4298      	cmp	r0, r3
    1352:	d05a      	beq.n	140a <_sercom_get_default_pad+0xca>
    1354:	4b3e      	ldr	r3, [pc, #248]	; (1450 <_sercom_get_default_pad+0x110>)
    1356:	4298      	cmp	r0, r3
    1358:	d037      	beq.n	13ca <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    135a:	2000      	movs	r0, #0
}
    135c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    135e:	4b3d      	ldr	r3, [pc, #244]	; (1454 <_sercom_get_default_pad+0x114>)
    1360:	4298      	cmp	r0, r3
    1362:	d00c      	beq.n	137e <_sercom_get_default_pad+0x3e>
    1364:	4b3c      	ldr	r3, [pc, #240]	; (1458 <_sercom_get_default_pad+0x118>)
    1366:	4298      	cmp	r0, r3
    1368:	d1f7      	bne.n	135a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    136a:	2901      	cmp	r1, #1
    136c:	d017      	beq.n	139e <_sercom_get_default_pad+0x5e>
    136e:	2900      	cmp	r1, #0
    1370:	d05d      	beq.n	142e <_sercom_get_default_pad+0xee>
    1372:	2902      	cmp	r1, #2
    1374:	d015      	beq.n	13a2 <_sercom_get_default_pad+0x62>
    1376:	2903      	cmp	r1, #3
    1378:	d015      	beq.n	13a6 <_sercom_get_default_pad+0x66>
	return 0;
    137a:	2000      	movs	r0, #0
    137c:	e7ee      	b.n	135c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    137e:	2901      	cmp	r1, #1
    1380:	d007      	beq.n	1392 <_sercom_get_default_pad+0x52>
    1382:	2900      	cmp	r1, #0
    1384:	d051      	beq.n	142a <_sercom_get_default_pad+0xea>
    1386:	2902      	cmp	r1, #2
    1388:	d005      	beq.n	1396 <_sercom_get_default_pad+0x56>
    138a:	2903      	cmp	r1, #3
    138c:	d005      	beq.n	139a <_sercom_get_default_pad+0x5a>
	return 0;
    138e:	2000      	movs	r0, #0
    1390:	e7e4      	b.n	135c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1392:	4832      	ldr	r0, [pc, #200]	; (145c <_sercom_get_default_pad+0x11c>)
    1394:	e7e2      	b.n	135c <_sercom_get_default_pad+0x1c>
    1396:	4832      	ldr	r0, [pc, #200]	; (1460 <_sercom_get_default_pad+0x120>)
    1398:	e7e0      	b.n	135c <_sercom_get_default_pad+0x1c>
    139a:	4832      	ldr	r0, [pc, #200]	; (1464 <_sercom_get_default_pad+0x124>)
    139c:	e7de      	b.n	135c <_sercom_get_default_pad+0x1c>
    139e:	4832      	ldr	r0, [pc, #200]	; (1468 <_sercom_get_default_pad+0x128>)
    13a0:	e7dc      	b.n	135c <_sercom_get_default_pad+0x1c>
    13a2:	4832      	ldr	r0, [pc, #200]	; (146c <_sercom_get_default_pad+0x12c>)
    13a4:	e7da      	b.n	135c <_sercom_get_default_pad+0x1c>
    13a6:	4832      	ldr	r0, [pc, #200]	; (1470 <_sercom_get_default_pad+0x130>)
    13a8:	e7d8      	b.n	135c <_sercom_get_default_pad+0x1c>
    13aa:	2901      	cmp	r1, #1
    13ac:	d007      	beq.n	13be <_sercom_get_default_pad+0x7e>
    13ae:	2900      	cmp	r1, #0
    13b0:	d03f      	beq.n	1432 <_sercom_get_default_pad+0xf2>
    13b2:	2902      	cmp	r1, #2
    13b4:	d005      	beq.n	13c2 <_sercom_get_default_pad+0x82>
    13b6:	2903      	cmp	r1, #3
    13b8:	d005      	beq.n	13c6 <_sercom_get_default_pad+0x86>
	return 0;
    13ba:	2000      	movs	r0, #0
    13bc:	e7ce      	b.n	135c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13be:	482d      	ldr	r0, [pc, #180]	; (1474 <_sercom_get_default_pad+0x134>)
    13c0:	e7cc      	b.n	135c <_sercom_get_default_pad+0x1c>
    13c2:	482d      	ldr	r0, [pc, #180]	; (1478 <_sercom_get_default_pad+0x138>)
    13c4:	e7ca      	b.n	135c <_sercom_get_default_pad+0x1c>
    13c6:	482d      	ldr	r0, [pc, #180]	; (147c <_sercom_get_default_pad+0x13c>)
    13c8:	e7c8      	b.n	135c <_sercom_get_default_pad+0x1c>
    13ca:	2901      	cmp	r1, #1
    13cc:	d007      	beq.n	13de <_sercom_get_default_pad+0x9e>
    13ce:	2900      	cmp	r1, #0
    13d0:	d031      	beq.n	1436 <_sercom_get_default_pad+0xf6>
    13d2:	2902      	cmp	r1, #2
    13d4:	d005      	beq.n	13e2 <_sercom_get_default_pad+0xa2>
    13d6:	2903      	cmp	r1, #3
    13d8:	d005      	beq.n	13e6 <_sercom_get_default_pad+0xa6>
	return 0;
    13da:	2000      	movs	r0, #0
    13dc:	e7be      	b.n	135c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13de:	4828      	ldr	r0, [pc, #160]	; (1480 <_sercom_get_default_pad+0x140>)
    13e0:	e7bc      	b.n	135c <_sercom_get_default_pad+0x1c>
    13e2:	4828      	ldr	r0, [pc, #160]	; (1484 <_sercom_get_default_pad+0x144>)
    13e4:	e7ba      	b.n	135c <_sercom_get_default_pad+0x1c>
    13e6:	4828      	ldr	r0, [pc, #160]	; (1488 <_sercom_get_default_pad+0x148>)
    13e8:	e7b8      	b.n	135c <_sercom_get_default_pad+0x1c>
    13ea:	2901      	cmp	r1, #1
    13ec:	d007      	beq.n	13fe <_sercom_get_default_pad+0xbe>
    13ee:	2900      	cmp	r1, #0
    13f0:	d023      	beq.n	143a <_sercom_get_default_pad+0xfa>
    13f2:	2902      	cmp	r1, #2
    13f4:	d005      	beq.n	1402 <_sercom_get_default_pad+0xc2>
    13f6:	2903      	cmp	r1, #3
    13f8:	d005      	beq.n	1406 <_sercom_get_default_pad+0xc6>
	return 0;
    13fa:	2000      	movs	r0, #0
    13fc:	e7ae      	b.n	135c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13fe:	4823      	ldr	r0, [pc, #140]	; (148c <_sercom_get_default_pad+0x14c>)
    1400:	e7ac      	b.n	135c <_sercom_get_default_pad+0x1c>
    1402:	4823      	ldr	r0, [pc, #140]	; (1490 <_sercom_get_default_pad+0x150>)
    1404:	e7aa      	b.n	135c <_sercom_get_default_pad+0x1c>
    1406:	4823      	ldr	r0, [pc, #140]	; (1494 <_sercom_get_default_pad+0x154>)
    1408:	e7a8      	b.n	135c <_sercom_get_default_pad+0x1c>
    140a:	2901      	cmp	r1, #1
    140c:	d007      	beq.n	141e <_sercom_get_default_pad+0xde>
    140e:	2900      	cmp	r1, #0
    1410:	d015      	beq.n	143e <_sercom_get_default_pad+0xfe>
    1412:	2902      	cmp	r1, #2
    1414:	d005      	beq.n	1422 <_sercom_get_default_pad+0xe2>
    1416:	2903      	cmp	r1, #3
    1418:	d005      	beq.n	1426 <_sercom_get_default_pad+0xe6>
	return 0;
    141a:	2000      	movs	r0, #0
    141c:	e79e      	b.n	135c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    141e:	481e      	ldr	r0, [pc, #120]	; (1498 <_sercom_get_default_pad+0x158>)
    1420:	e79c      	b.n	135c <_sercom_get_default_pad+0x1c>
    1422:	481e      	ldr	r0, [pc, #120]	; (149c <_sercom_get_default_pad+0x15c>)
    1424:	e79a      	b.n	135c <_sercom_get_default_pad+0x1c>
    1426:	481e      	ldr	r0, [pc, #120]	; (14a0 <_sercom_get_default_pad+0x160>)
    1428:	e798      	b.n	135c <_sercom_get_default_pad+0x1c>
    142a:	481e      	ldr	r0, [pc, #120]	; (14a4 <_sercom_get_default_pad+0x164>)
    142c:	e796      	b.n	135c <_sercom_get_default_pad+0x1c>
    142e:	2003      	movs	r0, #3
    1430:	e794      	b.n	135c <_sercom_get_default_pad+0x1c>
    1432:	481d      	ldr	r0, [pc, #116]	; (14a8 <_sercom_get_default_pad+0x168>)
    1434:	e792      	b.n	135c <_sercom_get_default_pad+0x1c>
    1436:	481d      	ldr	r0, [pc, #116]	; (14ac <_sercom_get_default_pad+0x16c>)
    1438:	e790      	b.n	135c <_sercom_get_default_pad+0x1c>
    143a:	481d      	ldr	r0, [pc, #116]	; (14b0 <_sercom_get_default_pad+0x170>)
    143c:	e78e      	b.n	135c <_sercom_get_default_pad+0x1c>
    143e:	481d      	ldr	r0, [pc, #116]	; (14b4 <_sercom_get_default_pad+0x174>)
    1440:	e78c      	b.n	135c <_sercom_get_default_pad+0x1c>
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	42001000 	.word	0x42001000
    1448:	42001800 	.word	0x42001800
    144c:	42001c00 	.word	0x42001c00
    1450:	42001400 	.word	0x42001400
    1454:	42000800 	.word	0x42000800
    1458:	42000c00 	.word	0x42000c00
    145c:	00050003 	.word	0x00050003
    1460:	00060003 	.word	0x00060003
    1464:	00070003 	.word	0x00070003
    1468:	00010003 	.word	0x00010003
    146c:	001e0003 	.word	0x001e0003
    1470:	001f0003 	.word	0x001f0003
    1474:	00090003 	.word	0x00090003
    1478:	000a0003 	.word	0x000a0003
    147c:	000b0003 	.word	0x000b0003
    1480:	00110003 	.word	0x00110003
    1484:	00120003 	.word	0x00120003
    1488:	00130003 	.word	0x00130003
    148c:	000d0003 	.word	0x000d0003
    1490:	000e0003 	.word	0x000e0003
    1494:	000f0003 	.word	0x000f0003
    1498:	00170003 	.word	0x00170003
    149c:	00180003 	.word	0x00180003
    14a0:	00190003 	.word	0x00190003
    14a4:	00040003 	.word	0x00040003
    14a8:	00080003 	.word	0x00080003
    14ac:	00100003 	.word	0x00100003
    14b0:	000c0003 	.word	0x000c0003
    14b4:	00160003 	.word	0x00160003

000014b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    14b8:	b530      	push	{r4, r5, lr}
    14ba:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    14bc:	4b0b      	ldr	r3, [pc, #44]	; (14ec <_sercom_get_sercom_inst_index+0x34>)
    14be:	466a      	mov	r2, sp
    14c0:	cb32      	ldmia	r3!, {r1, r4, r5}
    14c2:	c232      	stmia	r2!, {r1, r4, r5}
    14c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    14c6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    14c8:	9b00      	ldr	r3, [sp, #0]
    14ca:	4283      	cmp	r3, r0
    14cc:	d00b      	beq.n	14e6 <_sercom_get_sercom_inst_index+0x2e>
    14ce:	2301      	movs	r3, #1
    14d0:	009a      	lsls	r2, r3, #2
    14d2:	4669      	mov	r1, sp
    14d4:	5852      	ldr	r2, [r2, r1]
    14d6:	4282      	cmp	r2, r0
    14d8:	d006      	beq.n	14e8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14da:	3301      	adds	r3, #1
    14dc:	2b06      	cmp	r3, #6
    14de:	d1f7      	bne.n	14d0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    14e0:	2000      	movs	r0, #0
}
    14e2:	b007      	add	sp, #28
    14e4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14e6:	2300      	movs	r3, #0
			return i;
    14e8:	b2d8      	uxtb	r0, r3
    14ea:	e7fa      	b.n	14e2 <_sercom_get_sercom_inst_index+0x2a>
    14ec:	00002314 	.word	0x00002314

000014f0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    14f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14f2:	46d6      	mov	lr, sl
    14f4:	464f      	mov	r7, r9
    14f6:	b580      	push	{r7, lr}
    14f8:	b08b      	sub	sp, #44	; 0x2c
    14fa:	4681      	mov	r9, r0
    14fc:	000f      	movs	r7, r1
    14fe:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1500:	0003      	movs	r3, r0
    1502:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1504:	680b      	ldr	r3, [r1, #0]
    1506:	079b      	lsls	r3, r3, #30
    1508:	d409      	bmi.n	151e <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    150a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    150c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    150e:	07db      	lsls	r3, r3, #31
    1510:	d400      	bmi.n	1514 <spi_init+0x24>
    1512:	e0b1      	b.n	1678 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1514:	b00b      	add	sp, #44	; 0x2c
    1516:	bc0c      	pop	{r2, r3}
    1518:	4691      	mov	r9, r2
    151a:	469a      	mov	sl, r3
    151c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    151e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1520:	9305      	str	r3, [sp, #20]
    1522:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1524:	9306      	str	r3, [sp, #24]
    1526:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1528:	9307      	str	r3, [sp, #28]
    152a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    152c:	9308      	str	r3, [sp, #32]
    152e:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1530:	ab05      	add	r3, sp, #20
    1532:	9301      	str	r3, [sp, #4]
    1534:	e00a      	b.n	154c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1536:	0038      	movs	r0, r7
    1538:	4baf      	ldr	r3, [pc, #700]	; (17f8 <spi_init+0x308>)
    153a:	4798      	blx	r3
    153c:	e00c      	b.n	1558 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    153e:	230f      	movs	r3, #15
    1540:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    1542:	4281      	cmp	r1, r0
    1544:	d12d      	bne.n	15a2 <spi_init+0xb2>
    1546:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1548:	2e04      	cmp	r6, #4
    154a:	d02f      	beq.n	15ac <spi_init+0xbc>
    154c:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    154e:	00b3      	lsls	r3, r6, #2
    1550:	9a01      	ldr	r2, [sp, #4]
    1552:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    1554:	2800      	cmp	r0, #0
    1556:	d0ee      	beq.n	1536 <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    1558:	1c43      	adds	r3, r0, #1
    155a:	d0f4      	beq.n	1546 <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    155c:	0401      	lsls	r1, r0, #16
    155e:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    1560:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    1562:	b2c3      	uxtb	r3, r0
    1564:	469c      	mov	ip, r3
		return NULL;
    1566:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1568:	0602      	lsls	r2, r0, #24
    156a:	d405      	bmi.n	1578 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    156c:	4663      	mov	r3, ip
    156e:	095b      	lsrs	r3, r3, #5
    1570:	01db      	lsls	r3, r3, #7
    1572:	4aa2      	ldr	r2, [pc, #648]	; (17fc <spi_init+0x30c>)
    1574:	4692      	mov	sl, r2
    1576:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    1578:	221f      	movs	r2, #31
    157a:	4660      	mov	r0, ip
    157c:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    157e:	1898      	adds	r0, r3, r2
    1580:	3040      	adds	r0, #64	; 0x40
    1582:	7800      	ldrb	r0, [r0, #0]
    1584:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1586:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1588:	4655      	mov	r5, sl
    158a:	07ed      	lsls	r5, r5, #31
    158c:	d5d9      	bpl.n	1542 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    158e:	0852      	lsrs	r2, r2, #1
    1590:	189b      	adds	r3, r3, r2
    1592:	3330      	adds	r3, #48	; 0x30
    1594:	7818      	ldrb	r0, [r3, #0]
    1596:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    1598:	4663      	mov	r3, ip
    159a:	07db      	lsls	r3, r3, #31
    159c:	d5cf      	bpl.n	153e <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    159e:	0900      	lsrs	r0, r0, #4
    15a0:	e7cf      	b.n	1542 <spi_init+0x52>
			module->hw = NULL;
    15a2:	2300      	movs	r3, #0
    15a4:	464a      	mov	r2, r9
    15a6:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    15a8:	201c      	movs	r0, #28
    15aa:	e7b3      	b.n	1514 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    15ac:	2013      	movs	r0, #19
    15ae:	4b94      	ldr	r3, [pc, #592]	; (1800 <spi_init+0x310>)
    15b0:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    15b2:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    15b4:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    15b6:	2a01      	cmp	r2, #1
    15b8:	d016      	beq.n	15e8 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    15ba:	7821      	ldrb	r1, [r4, #0]
    15bc:	2900      	cmp	r1, #0
    15be:	d127      	bne.n	1610 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    15c0:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    15c2:	7fe2      	ldrb	r2, [r4, #31]
    15c4:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    15c6:	7fa0      	ldrb	r0, [r4, #30]
    15c8:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    15ca:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    15cc:	429a      	cmp	r2, r3
    15ce:	d1a1      	bne.n	1514 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    15d0:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    15d2:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    15d4:	3004      	adds	r0, #4
    15d6:	5c20      	ldrb	r0, [r4, r0]
    15d8:	2800      	cmp	r0, #0
    15da:	d001      	beq.n	15e0 <spi_init+0xf0>
    15dc:	2040      	movs	r0, #64	; 0x40
    15de:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    15e0:	2008      	movs	r0, #8
    15e2:	4303      	orrs	r3, r0
    15e4:	431d      	orrs	r5, r3
    15e6:	e014      	b.n	1612 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    15e8:	aa04      	add	r2, sp, #16
    15ea:	0001      	movs	r1, r0
    15ec:	69a0      	ldr	r0, [r4, #24]
    15ee:	4b85      	ldr	r3, [pc, #532]	; (1804 <spi_init+0x314>)
    15f0:	4798      	blx	r3
    15f2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    15f4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    15f6:	2b00      	cmp	r3, #0
    15f8:	d000      	beq.n	15fc <spi_init+0x10c>
    15fa:	e78b      	b.n	1514 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    15fc:	7b3b      	ldrb	r3, [r7, #12]
    15fe:	b2db      	uxtb	r3, r3
    1600:	aa04      	add	r2, sp, #16
    1602:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1604:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1606:	429a      	cmp	r2, r3
    1608:	d000      	beq.n	160c <spi_init+0x11c>
    160a:	e783      	b.n	1514 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    160c:	350c      	adds	r5, #12
    160e:	e7d4      	b.n	15ba <spi_init+0xca>
	uint32_t ctrlb = 0;
    1610:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    1612:	6863      	ldr	r3, [r4, #4]
    1614:	68a0      	ldr	r0, [r4, #8]
    1616:	4303      	orrs	r3, r0
    1618:	68e0      	ldr	r0, [r4, #12]
    161a:	4303      	orrs	r3, r0
    161c:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    161e:	7c20      	ldrb	r0, [r4, #16]
    1620:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    1622:	7c60      	ldrb	r0, [r4, #17]
    1624:	2800      	cmp	r0, #0
    1626:	d001      	beq.n	162c <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1628:	2080      	movs	r0, #128	; 0x80
    162a:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    162c:	7ca0      	ldrb	r0, [r4, #18]
    162e:	2800      	cmp	r0, #0
    1630:	d002      	beq.n	1638 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1632:	2080      	movs	r0, #128	; 0x80
    1634:	0280      	lsls	r0, r0, #10
    1636:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    1638:	7ce0      	ldrb	r0, [r4, #19]
    163a:	2800      	cmp	r0, #0
    163c:	d002      	beq.n	1644 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    163e:	2080      	movs	r0, #128	; 0x80
    1640:	0080      	lsls	r0, r0, #2
    1642:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    1644:	7d20      	ldrb	r0, [r4, #20]
    1646:	2800      	cmp	r0, #0
    1648:	d002      	beq.n	1650 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    164a:	2080      	movs	r0, #128	; 0x80
    164c:	0180      	lsls	r0, r0, #6
    164e:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    1650:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    1652:	2502      	movs	r5, #2
    1654:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    1656:	4283      	cmp	r3, r0
    1658:	d004      	beq.n	1664 <spi_init+0x174>
	module->hw = NULL;
    165a:	2300      	movs	r3, #0
    165c:	464a      	mov	r2, r9
    165e:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    1660:	201c      	movs	r0, #28
    1662:	e757      	b.n	1514 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    1664:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    1666:	4293      	cmp	r3, r2
    1668:	d1f7      	bne.n	165a <spi_init+0x16a>
		module->mode           = config->mode;
    166a:	464b      	mov	r3, r9
    166c:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    166e:	7c23      	ldrb	r3, [r4, #16]
    1670:	464a      	mov	r2, r9
    1672:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    1674:	2000      	movs	r0, #0
    1676:	e74d      	b.n	1514 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1678:	0008      	movs	r0, r1
    167a:	4b63      	ldr	r3, [pc, #396]	; (1808 <spi_init+0x318>)
    167c:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    167e:	4a63      	ldr	r2, [pc, #396]	; (180c <spi_init+0x31c>)
    1680:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1682:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1684:	2301      	movs	r3, #1
    1686:	40ab      	lsls	r3, r5
    1688:	430b      	orrs	r3, r1
    168a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    168c:	a909      	add	r1, sp, #36	; 0x24
    168e:	2624      	movs	r6, #36	; 0x24
    1690:	5da3      	ldrb	r3, [r4, r6]
    1692:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1694:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1696:	b2c5      	uxtb	r5, r0
    1698:	0028      	movs	r0, r5
    169a:	4b5d      	ldr	r3, [pc, #372]	; (1810 <spi_init+0x320>)
    169c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    169e:	0028      	movs	r0, r5
    16a0:	4b5c      	ldr	r3, [pc, #368]	; (1814 <spi_init+0x324>)
    16a2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    16a4:	5da0      	ldrb	r0, [r4, r6]
    16a6:	2100      	movs	r1, #0
    16a8:	4b5b      	ldr	r3, [pc, #364]	; (1818 <spi_init+0x328>)
    16aa:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    16ac:	7823      	ldrb	r3, [r4, #0]
    16ae:	2b01      	cmp	r3, #1
    16b0:	d020      	beq.n	16f4 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    16b2:	7823      	ldrb	r3, [r4, #0]
    16b4:	2b00      	cmp	r3, #0
    16b6:	d103      	bne.n	16c0 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    16b8:	683b      	ldr	r3, [r7, #0]
    16ba:	2208      	movs	r2, #8
    16bc:	4313      	orrs	r3, r2
    16be:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    16c0:	464b      	mov	r3, r9
    16c2:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16c4:	ab04      	add	r3, sp, #16
    16c6:	2280      	movs	r2, #128	; 0x80
    16c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16ca:	2200      	movs	r2, #0
    16cc:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16ce:	2101      	movs	r1, #1
    16d0:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    16d2:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    16d4:	7823      	ldrb	r3, [r4, #0]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d101      	bne.n	16de <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    16da:	ab04      	add	r3, sp, #16
    16dc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    16de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16e0:	9305      	str	r3, [sp, #20]
    16e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    16e4:	9306      	str	r3, [sp, #24]
    16e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    16e8:	9307      	str	r3, [sp, #28]
    16ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    16ec:	9308      	str	r3, [sp, #32]
    16ee:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16f0:	ad05      	add	r5, sp, #20
    16f2:	e011      	b.n	1718 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	220c      	movs	r2, #12
    16f8:	4313      	orrs	r3, r2
    16fa:	603b      	str	r3, [r7, #0]
    16fc:	e7d9      	b.n	16b2 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16fe:	0030      	movs	r0, r6
    1700:	4b3d      	ldr	r3, [pc, #244]	; (17f8 <spi_init+0x308>)
    1702:	4798      	blx	r3
    1704:	e00d      	b.n	1722 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1706:	a904      	add	r1, sp, #16
    1708:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    170a:	0c00      	lsrs	r0, r0, #16
    170c:	b2c0      	uxtb	r0, r0
    170e:	4b43      	ldr	r3, [pc, #268]	; (181c <spi_init+0x32c>)
    1710:	4798      	blx	r3
    1712:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1714:	2f04      	cmp	r7, #4
    1716:	d007      	beq.n	1728 <spi_init+0x238>
    1718:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    171a:	00bb      	lsls	r3, r7, #2
    171c:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    171e:	2800      	cmp	r0, #0
    1720:	d0ed      	beq.n	16fe <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    1722:	1c43      	adds	r3, r0, #1
    1724:	d1ef      	bne.n	1706 <spi_init+0x216>
    1726:	e7f4      	b.n	1712 <spi_init+0x222>
	module->mode             = config->mode;
    1728:	7823      	ldrb	r3, [r4, #0]
    172a:	464a      	mov	r2, r9
    172c:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    172e:	7c23      	ldrb	r3, [r4, #16]
    1730:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    1732:	7ca3      	ldrb	r3, [r4, #18]
    1734:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1736:	7d23      	ldrb	r3, [r4, #20]
    1738:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    173a:	2200      	movs	r2, #0
    173c:	ab02      	add	r3, sp, #8
    173e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1740:	7823      	ldrb	r3, [r4, #0]
    1742:	2b01      	cmp	r3, #1
    1744:	d012      	beq.n	176c <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    1746:	7823      	ldrb	r3, [r4, #0]
    1748:	2b00      	cmp	r3, #0
    174a:	d127      	bne.n	179c <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    174c:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    174e:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    1750:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    1752:	7fe1      	ldrb	r1, [r4, #31]
    1754:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1756:	7fa5      	ldrb	r5, [r4, #30]
    1758:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    175a:	4319      	orrs	r1, r3
    175c:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    175e:	2320      	movs	r3, #32
    1760:	5ce3      	ldrb	r3, [r4, r3]
    1762:	2b00      	cmp	r3, #0
    1764:	d01c      	beq.n	17a0 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1766:	2340      	movs	r3, #64	; 0x40
    1768:	431a      	orrs	r2, r3
    176a:	e019      	b.n	17a0 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    176c:	464b      	mov	r3, r9
    176e:	6818      	ldr	r0, [r3, #0]
    1770:	4b25      	ldr	r3, [pc, #148]	; (1808 <spi_init+0x318>)
    1772:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1774:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1776:	b2c0      	uxtb	r0, r0
    1778:	4b21      	ldr	r3, [pc, #132]	; (1800 <spi_init+0x310>)
    177a:	4798      	blx	r3
    177c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    177e:	ab02      	add	r3, sp, #8
    1780:	1d9a      	adds	r2, r3, #6
    1782:	69a0      	ldr	r0, [r4, #24]
    1784:	4b1f      	ldr	r3, [pc, #124]	; (1804 <spi_init+0x314>)
    1786:	4798      	blx	r3
    1788:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    178a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    178c:	2b00      	cmp	r3, #0
    178e:	d000      	beq.n	1792 <spi_init+0x2a2>
    1790:	e6c0      	b.n	1514 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    1792:	ab02      	add	r3, sp, #8
    1794:	3306      	adds	r3, #6
    1796:	781b      	ldrb	r3, [r3, #0]
    1798:	7333      	strb	r3, [r6, #12]
    179a:	e7d4      	b.n	1746 <spi_init+0x256>
	uint32_t ctrlb = 0;
    179c:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    179e:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    17a0:	6863      	ldr	r3, [r4, #4]
    17a2:	68a1      	ldr	r1, [r4, #8]
    17a4:	430b      	orrs	r3, r1
    17a6:	68e1      	ldr	r1, [r4, #12]
    17a8:	430b      	orrs	r3, r1
    17aa:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    17ac:	7c21      	ldrb	r1, [r4, #16]
    17ae:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    17b0:	7c61      	ldrb	r1, [r4, #17]
    17b2:	2900      	cmp	r1, #0
    17b4:	d103      	bne.n	17be <spi_init+0x2ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    17b6:	491a      	ldr	r1, [pc, #104]	; (1820 <spi_init+0x330>)
    17b8:	7889      	ldrb	r1, [r1, #2]
    17ba:	0789      	lsls	r1, r1, #30
    17bc:	d501      	bpl.n	17c2 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    17be:	2180      	movs	r1, #128	; 0x80
    17c0:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    17c2:	7ca1      	ldrb	r1, [r4, #18]
    17c4:	2900      	cmp	r1, #0
    17c6:	d002      	beq.n	17ce <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    17c8:	2180      	movs	r1, #128	; 0x80
    17ca:	0289      	lsls	r1, r1, #10
    17cc:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    17ce:	7ce1      	ldrb	r1, [r4, #19]
    17d0:	2900      	cmp	r1, #0
    17d2:	d002      	beq.n	17da <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    17d4:	2180      	movs	r1, #128	; 0x80
    17d6:	0089      	lsls	r1, r1, #2
    17d8:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    17da:	7d21      	ldrb	r1, [r4, #20]
    17dc:	2900      	cmp	r1, #0
    17de:	d002      	beq.n	17e6 <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    17e0:	2180      	movs	r1, #128	; 0x80
    17e2:	0189      	lsls	r1, r1, #6
    17e4:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    17e6:	6831      	ldr	r1, [r6, #0]
    17e8:	430b      	orrs	r3, r1
    17ea:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    17ec:	6873      	ldr	r3, [r6, #4]
    17ee:	431a      	orrs	r2, r3
    17f0:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    17f2:	2000      	movs	r0, #0
    17f4:	e68e      	b.n	1514 <spi_init+0x24>
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	00001341 	.word	0x00001341
    17fc:	41004400 	.word	0x41004400
    1800:	00001c3d 	.word	0x00001c3d
    1804:	000012cd 	.word	0x000012cd
    1808:	000014b9 	.word	0x000014b9
    180c:	40000400 	.word	0x40000400
    1810:	00001c21 	.word	0x00001c21
    1814:	00001b95 	.word	0x00001b95
    1818:	000012f5 	.word	0x000012f5
    181c:	00001d19 	.word	0x00001d19
    1820:	41002000 	.word	0x41002000

00001824 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    1824:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    1826:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    1828:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    182a:	2c01      	cmp	r4, #1
    182c:	d001      	beq.n	1832 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    182e:	0018      	movs	r0, r3
    1830:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    1832:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    1834:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    1836:	2c00      	cmp	r4, #0
    1838:	d1f9      	bne.n	182e <spi_select_slave+0xa>
		if (select) {
    183a:	2a00      	cmp	r2, #0
    183c:	d058      	beq.n	18f0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    183e:	784b      	ldrb	r3, [r1, #1]
    1840:	2b00      	cmp	r3, #0
    1842:	d044      	beq.n	18ce <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1844:	6803      	ldr	r3, [r0, #0]
    1846:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    1848:	07db      	lsls	r3, r3, #31
    184a:	d410      	bmi.n	186e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    184c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    184e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1850:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1852:	2900      	cmp	r1, #0
    1854:	d104      	bne.n	1860 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    1856:	0953      	lsrs	r3, r2, #5
    1858:	01db      	lsls	r3, r3, #7
    185a:	492e      	ldr	r1, [pc, #184]	; (1914 <spi_select_slave+0xf0>)
    185c:	468c      	mov	ip, r1
    185e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1860:	211f      	movs	r1, #31
    1862:	4011      	ands	r1, r2
    1864:	2201      	movs	r2, #1
    1866:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    1868:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    186a:	2305      	movs	r3, #5
    186c:	e7df      	b.n	182e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    186e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1870:	09d4      	lsrs	r4, r2, #7
		return NULL;
    1872:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1874:	2c00      	cmp	r4, #0
    1876:	d104      	bne.n	1882 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    1878:	0953      	lsrs	r3, r2, #5
    187a:	01db      	lsls	r3, r3, #7
    187c:	4c25      	ldr	r4, [pc, #148]	; (1914 <spi_select_slave+0xf0>)
    187e:	46a4      	mov	ip, r4
    1880:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1882:	241f      	movs	r4, #31
    1884:	4014      	ands	r4, r2
    1886:	2201      	movs	r2, #1
    1888:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    188a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    188c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    188e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1890:	07d2      	lsls	r2, r2, #31
    1892:	d501      	bpl.n	1898 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1894:	788a      	ldrb	r2, [r1, #2]
    1896:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1898:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    189a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    189c:	2a00      	cmp	r2, #0
    189e:	d1c6      	bne.n	182e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18a0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    18a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    18a4:	7e13      	ldrb	r3, [r2, #24]
    18a6:	420b      	tst	r3, r1
    18a8:	d0fc      	beq.n	18a4 <spi_select_slave+0x80>
    18aa:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    18ac:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    18ae:	0749      	lsls	r1, r1, #29
    18b0:	d5bd      	bpl.n	182e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    18b2:	8b53      	ldrh	r3, [r2, #26]
    18b4:	075b      	lsls	r3, r3, #29
    18b6:	d501      	bpl.n	18bc <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    18b8:	2304      	movs	r3, #4
    18ba:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18bc:	7983      	ldrb	r3, [r0, #6]
    18be:	2b01      	cmp	r3, #1
    18c0:	d002      	beq.n	18c8 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    18c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    18c4:	2300      	movs	r3, #0
    18c6:	e7b2      	b.n	182e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    18c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    18ca:	2300      	movs	r3, #0
    18cc:	e7af      	b.n	182e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    18ce:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    18d0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    18d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    18d4:	2900      	cmp	r1, #0
    18d6:	d104      	bne.n	18e2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    18d8:	0953      	lsrs	r3, r2, #5
    18da:	01db      	lsls	r3, r3, #7
    18dc:	490d      	ldr	r1, [pc, #52]	; (1914 <spi_select_slave+0xf0>)
    18de:	468c      	mov	ip, r1
    18e0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    18e2:	211f      	movs	r1, #31
    18e4:	4011      	ands	r1, r2
    18e6:	2201      	movs	r2, #1
    18e8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    18ea:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    18ec:	2300      	movs	r3, #0
    18ee:	e79e      	b.n	182e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    18f0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    18f2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    18f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    18f6:	2900      	cmp	r1, #0
    18f8:	d104      	bne.n	1904 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    18fa:	0953      	lsrs	r3, r2, #5
    18fc:	01db      	lsls	r3, r3, #7
    18fe:	4905      	ldr	r1, [pc, #20]	; (1914 <spi_select_slave+0xf0>)
    1900:	468c      	mov	ip, r1
    1902:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1904:	211f      	movs	r1, #31
    1906:	4011      	ands	r1, r2
    1908:	2201      	movs	r2, #1
    190a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    190c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    190e:	2300      	movs	r3, #0
    1910:	e78d      	b.n	182e <spi_select_slave+0xa>
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	41004400 	.word	0x41004400

00001918 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    1918:	4770      	bx	lr
	...

0000191c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    191c:	4b0c      	ldr	r3, [pc, #48]	; (1950 <cpu_irq_enter_critical+0x34>)
    191e:	681b      	ldr	r3, [r3, #0]
    1920:	2b00      	cmp	r3, #0
    1922:	d106      	bne.n	1932 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1924:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1928:	2b00      	cmp	r3, #0
    192a:	d007      	beq.n	193c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    192c:	2200      	movs	r2, #0
    192e:	4b09      	ldr	r3, [pc, #36]	; (1954 <cpu_irq_enter_critical+0x38>)
    1930:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1932:	4a07      	ldr	r2, [pc, #28]	; (1950 <cpu_irq_enter_critical+0x34>)
    1934:	6813      	ldr	r3, [r2, #0]
    1936:	3301      	adds	r3, #1
    1938:	6013      	str	r3, [r2, #0]
}
    193a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    193c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    193e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1942:	2200      	movs	r2, #0
    1944:	4b04      	ldr	r3, [pc, #16]	; (1958 <cpu_irq_enter_critical+0x3c>)
    1946:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1948:	3201      	adds	r2, #1
    194a:	4b02      	ldr	r3, [pc, #8]	; (1954 <cpu_irq_enter_critical+0x38>)
    194c:	701a      	strb	r2, [r3, #0]
    194e:	e7f0      	b.n	1932 <cpu_irq_enter_critical+0x16>
    1950:	200000fc 	.word	0x200000fc
    1954:	20000100 	.word	0x20000100
    1958:	20000018 	.word	0x20000018

0000195c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    195c:	4b08      	ldr	r3, [pc, #32]	; (1980 <cpu_irq_leave_critical+0x24>)
    195e:	681a      	ldr	r2, [r3, #0]
    1960:	3a01      	subs	r2, #1
    1962:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1964:	681b      	ldr	r3, [r3, #0]
    1966:	2b00      	cmp	r3, #0
    1968:	d109      	bne.n	197e <cpu_irq_leave_critical+0x22>
    196a:	4b06      	ldr	r3, [pc, #24]	; (1984 <cpu_irq_leave_critical+0x28>)
    196c:	781b      	ldrb	r3, [r3, #0]
    196e:	2b00      	cmp	r3, #0
    1970:	d005      	beq.n	197e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1972:	2201      	movs	r2, #1
    1974:	4b04      	ldr	r3, [pc, #16]	; (1988 <cpu_irq_leave_critical+0x2c>)
    1976:	701a      	strb	r2, [r3, #0]
    1978:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    197c:	b662      	cpsie	i
	}
}
    197e:	4770      	bx	lr
    1980:	200000fc 	.word	0x200000fc
    1984:	20000100 	.word	0x20000100
    1988:	20000018 	.word	0x20000018

0000198c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    198c:	b5f0      	push	{r4, r5, r6, r7, lr}
    198e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1990:	ac01      	add	r4, sp, #4
    1992:	2501      	movs	r5, #1
    1994:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1996:	2700      	movs	r7, #0
    1998:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    199a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    199c:	0021      	movs	r1, r4
    199e:	203e      	movs	r0, #62	; 0x3e
    19a0:	4e06      	ldr	r6, [pc, #24]	; (19bc <system_board_init+0x30>)
    19a2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    19a4:	2280      	movs	r2, #128	; 0x80
    19a6:	05d2      	lsls	r2, r2, #23
    19a8:	4b05      	ldr	r3, [pc, #20]	; (19c0 <system_board_init+0x34>)
    19aa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    19ac:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    19ae:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    19b0:	0021      	movs	r1, r4
    19b2:	200f      	movs	r0, #15
    19b4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    19b6:	b003      	add	sp, #12
    19b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	000019c5 	.word	0x000019c5
    19c0:	41004480 	.word	0x41004480

000019c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    19c4:	b500      	push	{lr}
    19c6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19c8:	ab01      	add	r3, sp, #4
    19ca:	2280      	movs	r2, #128	; 0x80
    19cc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    19ce:	780a      	ldrb	r2, [r1, #0]
    19d0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    19d2:	784a      	ldrb	r2, [r1, #1]
    19d4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19d6:	788a      	ldrb	r2, [r1, #2]
    19d8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19da:	0019      	movs	r1, r3
    19dc:	4b01      	ldr	r3, [pc, #4]	; (19e4 <port_pin_set_config+0x20>)
    19de:	4798      	blx	r3
}
    19e0:	b003      	add	sp, #12
    19e2:	bd00      	pop	{pc}
    19e4:	00001d19 	.word	0x00001d19

000019e8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    19e8:	4a06      	ldr	r2, [pc, #24]	; (1a04 <system_gclk_init+0x1c>)
    19ea:	6993      	ldr	r3, [r2, #24]
    19ec:	2108      	movs	r1, #8
    19ee:	430b      	orrs	r3, r1
    19f0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    19f2:	2201      	movs	r2, #1
    19f4:	4b04      	ldr	r3, [pc, #16]	; (1a08 <system_gclk_init+0x20>)
    19f6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    19f8:	0019      	movs	r1, r3
    19fa:	780b      	ldrb	r3, [r1, #0]
    19fc:	4213      	tst	r3, r2
    19fe:	d1fc      	bne.n	19fa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a00:	4770      	bx	lr
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	40000400 	.word	0x40000400
    1a08:	40000c00 	.word	0x40000c00

00001a0c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a0c:	b570      	push	{r4, r5, r6, lr}
    1a0e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a10:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a12:	780d      	ldrb	r5, [r1, #0]
    1a14:	022d      	lsls	r5, r5, #8
    1a16:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a18:	784b      	ldrb	r3, [r1, #1]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d002      	beq.n	1a24 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a1e:	2380      	movs	r3, #128	; 0x80
    1a20:	02db      	lsls	r3, r3, #11
    1a22:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a24:	7a4b      	ldrb	r3, [r1, #9]
    1a26:	2b00      	cmp	r3, #0
    1a28:	d002      	beq.n	1a30 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a2a:	2380      	movs	r3, #128	; 0x80
    1a2c:	031b      	lsls	r3, r3, #12
    1a2e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a30:	6848      	ldr	r0, [r1, #4]
    1a32:	2801      	cmp	r0, #1
    1a34:	d910      	bls.n	1a58 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a36:	1e43      	subs	r3, r0, #1
    1a38:	4218      	tst	r0, r3
    1a3a:	d134      	bne.n	1aa6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a3c:	2802      	cmp	r0, #2
    1a3e:	d930      	bls.n	1aa2 <system_gclk_gen_set_config+0x96>
    1a40:	2302      	movs	r3, #2
    1a42:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a44:	3201      	adds	r2, #1
						mask <<= 1) {
    1a46:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a48:	4298      	cmp	r0, r3
    1a4a:	d8fb      	bhi.n	1a44 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a4c:	0212      	lsls	r2, r2, #8
    1a4e:	4332      	orrs	r2, r6
    1a50:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a52:	2380      	movs	r3, #128	; 0x80
    1a54:	035b      	lsls	r3, r3, #13
    1a56:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a58:	7a0b      	ldrb	r3, [r1, #8]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d002      	beq.n	1a64 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a5e:	2380      	movs	r3, #128	; 0x80
    1a60:	039b      	lsls	r3, r3, #14
    1a62:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a64:	4a13      	ldr	r2, [pc, #76]	; (1ab4 <system_gclk_gen_set_config+0xa8>)
    1a66:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1a68:	b25b      	sxtb	r3, r3
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	dbfb      	blt.n	1a66 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1a6e:	4b12      	ldr	r3, [pc, #72]	; (1ab8 <system_gclk_gen_set_config+0xac>)
    1a70:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a72:	4b12      	ldr	r3, [pc, #72]	; (1abc <system_gclk_gen_set_config+0xb0>)
    1a74:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a76:	4a0f      	ldr	r2, [pc, #60]	; (1ab4 <system_gclk_gen_set_config+0xa8>)
    1a78:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a7a:	b25b      	sxtb	r3, r3
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	dbfb      	blt.n	1a78 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a80:	4b0c      	ldr	r3, [pc, #48]	; (1ab4 <system_gclk_gen_set_config+0xa8>)
    1a82:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a84:	001a      	movs	r2, r3
    1a86:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1a88:	b25b      	sxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	dbfb      	blt.n	1a86 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a8e:	4a09      	ldr	r2, [pc, #36]	; (1ab4 <system_gclk_gen_set_config+0xa8>)
    1a90:	6853      	ldr	r3, [r2, #4]
    1a92:	2180      	movs	r1, #128	; 0x80
    1a94:	0249      	lsls	r1, r1, #9
    1a96:	400b      	ands	r3, r1
    1a98:	431d      	orrs	r5, r3
    1a9a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1a9c:	4b08      	ldr	r3, [pc, #32]	; (1ac0 <system_gclk_gen_set_config+0xb4>)
    1a9e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1aa0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1aa2:	2200      	movs	r2, #0
    1aa4:	e7d2      	b.n	1a4c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1aa6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1aa8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aaa:	2380      	movs	r3, #128	; 0x80
    1aac:	029b      	lsls	r3, r3, #10
    1aae:	431d      	orrs	r5, r3
    1ab0:	e7d2      	b.n	1a58 <system_gclk_gen_set_config+0x4c>
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	40000c00 	.word	0x40000c00
    1ab8:	0000191d 	.word	0x0000191d
    1abc:	40000c08 	.word	0x40000c08
    1ac0:	0000195d 	.word	0x0000195d

00001ac4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ac4:	b510      	push	{r4, lr}
    1ac6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ac8:	4a0b      	ldr	r2, [pc, #44]	; (1af8 <system_gclk_gen_enable+0x34>)
    1aca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1acc:	b25b      	sxtb	r3, r3
    1ace:	2b00      	cmp	r3, #0
    1ad0:	dbfb      	blt.n	1aca <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1ad2:	4b0a      	ldr	r3, [pc, #40]	; (1afc <system_gclk_gen_enable+0x38>)
    1ad4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ad6:	4b0a      	ldr	r3, [pc, #40]	; (1b00 <system_gclk_gen_enable+0x3c>)
    1ad8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ada:	4a07      	ldr	r2, [pc, #28]	; (1af8 <system_gclk_gen_enable+0x34>)
    1adc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ade:	b25b      	sxtb	r3, r3
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	dbfb      	blt.n	1adc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1ae4:	4a04      	ldr	r2, [pc, #16]	; (1af8 <system_gclk_gen_enable+0x34>)
    1ae6:	6851      	ldr	r1, [r2, #4]
    1ae8:	2380      	movs	r3, #128	; 0x80
    1aea:	025b      	lsls	r3, r3, #9
    1aec:	430b      	orrs	r3, r1
    1aee:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1af0:	4b04      	ldr	r3, [pc, #16]	; (1b04 <system_gclk_gen_enable+0x40>)
    1af2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1af4:	bd10      	pop	{r4, pc}
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	40000c00 	.word	0x40000c00
    1afc:	0000191d 	.word	0x0000191d
    1b00:	40000c04 	.word	0x40000c04
    1b04:	0000195d 	.word	0x0000195d

00001b08 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b08:	b570      	push	{r4, r5, r6, lr}
    1b0a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b0c:	4a1a      	ldr	r2, [pc, #104]	; (1b78 <system_gclk_gen_get_hz+0x70>)
    1b0e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b10:	b25b      	sxtb	r3, r3
    1b12:	2b00      	cmp	r3, #0
    1b14:	dbfb      	blt.n	1b0e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b16:	4b19      	ldr	r3, [pc, #100]	; (1b7c <system_gclk_gen_get_hz+0x74>)
    1b18:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b1a:	4b19      	ldr	r3, [pc, #100]	; (1b80 <system_gclk_gen_get_hz+0x78>)
    1b1c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b1e:	4a16      	ldr	r2, [pc, #88]	; (1b78 <system_gclk_gen_get_hz+0x70>)
    1b20:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b22:	b25b      	sxtb	r3, r3
    1b24:	2b00      	cmp	r3, #0
    1b26:	dbfb      	blt.n	1b20 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b28:	4e13      	ldr	r6, [pc, #76]	; (1b78 <system_gclk_gen_get_hz+0x70>)
    1b2a:	6870      	ldr	r0, [r6, #4]
    1b2c:	04c0      	lsls	r0, r0, #19
    1b2e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b30:	4b14      	ldr	r3, [pc, #80]	; (1b84 <system_gclk_gen_get_hz+0x7c>)
    1b32:	4798      	blx	r3
    1b34:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b36:	4b12      	ldr	r3, [pc, #72]	; (1b80 <system_gclk_gen_get_hz+0x78>)
    1b38:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b3a:	6876      	ldr	r6, [r6, #4]
    1b3c:	02f6      	lsls	r6, r6, #11
    1b3e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b40:	4b11      	ldr	r3, [pc, #68]	; (1b88 <system_gclk_gen_get_hz+0x80>)
    1b42:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b44:	4a0c      	ldr	r2, [pc, #48]	; (1b78 <system_gclk_gen_get_hz+0x70>)
    1b46:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b48:	b25b      	sxtb	r3, r3
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	dbfb      	blt.n	1b46 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b4e:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <system_gclk_gen_get_hz+0x70>)
    1b50:	689c      	ldr	r4, [r3, #8]
    1b52:	0224      	lsls	r4, r4, #8
    1b54:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b56:	4b0d      	ldr	r3, [pc, #52]	; (1b8c <system_gclk_gen_get_hz+0x84>)
    1b58:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b5a:	2e00      	cmp	r6, #0
    1b5c:	d107      	bne.n	1b6e <system_gclk_gen_get_hz+0x66>
    1b5e:	2c01      	cmp	r4, #1
    1b60:	d907      	bls.n	1b72 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b62:	0021      	movs	r1, r4
    1b64:	0028      	movs	r0, r5
    1b66:	4b0a      	ldr	r3, [pc, #40]	; (1b90 <system_gclk_gen_get_hz+0x88>)
    1b68:	4798      	blx	r3
    1b6a:	0005      	movs	r5, r0
    1b6c:	e001      	b.n	1b72 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b6e:	3401      	adds	r4, #1
    1b70:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b72:	0028      	movs	r0, r5
    1b74:	bd70      	pop	{r4, r5, r6, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	40000c00 	.word	0x40000c00
    1b7c:	0000191d 	.word	0x0000191d
    1b80:	40000c04 	.word	0x40000c04
    1b84:	000005dd 	.word	0x000005dd
    1b88:	40000c08 	.word	0x40000c08
    1b8c:	0000195d 	.word	0x0000195d
    1b90:	00001e61 	.word	0x00001e61

00001b94 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b94:	b510      	push	{r4, lr}
    1b96:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b98:	4b06      	ldr	r3, [pc, #24]	; (1bb4 <system_gclk_chan_enable+0x20>)
    1b9a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b9c:	4b06      	ldr	r3, [pc, #24]	; (1bb8 <system_gclk_chan_enable+0x24>)
    1b9e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1ba0:	4a06      	ldr	r2, [pc, #24]	; (1bbc <system_gclk_chan_enable+0x28>)
    1ba2:	8853      	ldrh	r3, [r2, #2]
    1ba4:	2180      	movs	r1, #128	; 0x80
    1ba6:	01c9      	lsls	r1, r1, #7
    1ba8:	430b      	orrs	r3, r1
    1baa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bac:	4b04      	ldr	r3, [pc, #16]	; (1bc0 <system_gclk_chan_enable+0x2c>)
    1bae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bb0:	bd10      	pop	{r4, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	0000191d 	.word	0x0000191d
    1bb8:	40000c02 	.word	0x40000c02
    1bbc:	40000c00 	.word	0x40000c00
    1bc0:	0000195d 	.word	0x0000195d

00001bc4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1bc4:	b510      	push	{r4, lr}
    1bc6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bc8:	4b0f      	ldr	r3, [pc, #60]	; (1c08 <system_gclk_chan_disable+0x44>)
    1bca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bcc:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <system_gclk_chan_disable+0x48>)
    1bce:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bd0:	4a0f      	ldr	r2, [pc, #60]	; (1c10 <system_gclk_chan_disable+0x4c>)
    1bd2:	8853      	ldrh	r3, [r2, #2]
    1bd4:	051b      	lsls	r3, r3, #20
    1bd6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1bd8:	8853      	ldrh	r3, [r2, #2]
    1bda:	490e      	ldr	r1, [pc, #56]	; (1c14 <system_gclk_chan_disable+0x50>)
    1bdc:	400b      	ands	r3, r1
    1bde:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1be0:	8853      	ldrh	r3, [r2, #2]
    1be2:	490d      	ldr	r1, [pc, #52]	; (1c18 <system_gclk_chan_disable+0x54>)
    1be4:	400b      	ands	r3, r1
    1be6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1be8:	0011      	movs	r1, r2
    1bea:	2280      	movs	r2, #128	; 0x80
    1bec:	01d2      	lsls	r2, r2, #7
    1bee:	884b      	ldrh	r3, [r1, #2]
    1bf0:	4213      	tst	r3, r2
    1bf2:	d1fc      	bne.n	1bee <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1bf4:	4906      	ldr	r1, [pc, #24]	; (1c10 <system_gclk_chan_disable+0x4c>)
    1bf6:	884a      	ldrh	r2, [r1, #2]
    1bf8:	0203      	lsls	r3, r0, #8
    1bfa:	4806      	ldr	r0, [pc, #24]	; (1c14 <system_gclk_chan_disable+0x50>)
    1bfc:	4002      	ands	r2, r0
    1bfe:	4313      	orrs	r3, r2
    1c00:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c02:	4b06      	ldr	r3, [pc, #24]	; (1c1c <system_gclk_chan_disable+0x58>)
    1c04:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c06:	bd10      	pop	{r4, pc}
    1c08:	0000191d 	.word	0x0000191d
    1c0c:	40000c02 	.word	0x40000c02
    1c10:	40000c00 	.word	0x40000c00
    1c14:	fffff0ff 	.word	0xfffff0ff
    1c18:	ffffbfff 	.word	0xffffbfff
    1c1c:	0000195d 	.word	0x0000195d

00001c20 <system_gclk_chan_set_config>:
{
    1c20:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c22:	780c      	ldrb	r4, [r1, #0]
    1c24:	0224      	lsls	r4, r4, #8
    1c26:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c28:	4b02      	ldr	r3, [pc, #8]	; (1c34 <system_gclk_chan_set_config+0x14>)
    1c2a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c2c:	b2a4      	uxth	r4, r4
    1c2e:	4b02      	ldr	r3, [pc, #8]	; (1c38 <system_gclk_chan_set_config+0x18>)
    1c30:	805c      	strh	r4, [r3, #2]
}
    1c32:	bd10      	pop	{r4, pc}
    1c34:	00001bc5 	.word	0x00001bc5
    1c38:	40000c00 	.word	0x40000c00

00001c3c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c3c:	b510      	push	{r4, lr}
    1c3e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c40:	4b06      	ldr	r3, [pc, #24]	; (1c5c <system_gclk_chan_get_hz+0x20>)
    1c42:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c44:	4b06      	ldr	r3, [pc, #24]	; (1c60 <system_gclk_chan_get_hz+0x24>)
    1c46:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c48:	4b06      	ldr	r3, [pc, #24]	; (1c64 <system_gclk_chan_get_hz+0x28>)
    1c4a:	885c      	ldrh	r4, [r3, #2]
    1c4c:	0524      	lsls	r4, r4, #20
    1c4e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c50:	4b05      	ldr	r3, [pc, #20]	; (1c68 <system_gclk_chan_get_hz+0x2c>)
    1c52:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c54:	0020      	movs	r0, r4
    1c56:	4b05      	ldr	r3, [pc, #20]	; (1c6c <system_gclk_chan_get_hz+0x30>)
    1c58:	4798      	blx	r3
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	0000191d 	.word	0x0000191d
    1c60:	40000c02 	.word	0x40000c02
    1c64:	40000c00 	.word	0x40000c00
    1c68:	0000195d 	.word	0x0000195d
    1c6c:	00001b09 	.word	0x00001b09

00001c70 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c70:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c72:	78d3      	ldrb	r3, [r2, #3]
    1c74:	2b00      	cmp	r3, #0
    1c76:	d135      	bne.n	1ce4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c78:	7813      	ldrb	r3, [r2, #0]
    1c7a:	2b80      	cmp	r3, #128	; 0x80
    1c7c:	d029      	beq.n	1cd2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c7e:	061b      	lsls	r3, r3, #24
    1c80:	2480      	movs	r4, #128	; 0x80
    1c82:	0264      	lsls	r4, r4, #9
    1c84:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c86:	7854      	ldrb	r4, [r2, #1]
    1c88:	2502      	movs	r5, #2
    1c8a:	43ac      	bics	r4, r5
    1c8c:	d106      	bne.n	1c9c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c8e:	7894      	ldrb	r4, [r2, #2]
    1c90:	2c00      	cmp	r4, #0
    1c92:	d120      	bne.n	1cd6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1c94:	2480      	movs	r4, #128	; 0x80
    1c96:	02a4      	lsls	r4, r4, #10
    1c98:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1c9a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c9c:	7854      	ldrb	r4, [r2, #1]
    1c9e:	3c01      	subs	r4, #1
    1ca0:	2c01      	cmp	r4, #1
    1ca2:	d91c      	bls.n	1cde <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ca4:	040d      	lsls	r5, r1, #16
    1ca6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ca8:	24a0      	movs	r4, #160	; 0xa0
    1caa:	05e4      	lsls	r4, r4, #23
    1cac:	432c      	orrs	r4, r5
    1cae:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cb0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cb2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cb4:	24d0      	movs	r4, #208	; 0xd0
    1cb6:	0624      	lsls	r4, r4, #24
    1cb8:	432c      	orrs	r4, r5
    1cba:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cbc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cbe:	78d4      	ldrb	r4, [r2, #3]
    1cc0:	2c00      	cmp	r4, #0
    1cc2:	d122      	bne.n	1d0a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1cc4:	035b      	lsls	r3, r3, #13
    1cc6:	d51c      	bpl.n	1d02 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1cc8:	7893      	ldrb	r3, [r2, #2]
    1cca:	2b01      	cmp	r3, #1
    1ccc:	d01e      	beq.n	1d0c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1cce:	6141      	str	r1, [r0, #20]
    1cd0:	e017      	b.n	1d02 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1cd2:	2300      	movs	r3, #0
    1cd4:	e7d7      	b.n	1c86 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1cd6:	24c0      	movs	r4, #192	; 0xc0
    1cd8:	02e4      	lsls	r4, r4, #11
    1cda:	4323      	orrs	r3, r4
    1cdc:	e7dd      	b.n	1c9a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <_system_pinmux_config+0xa4>)
    1ce0:	4023      	ands	r3, r4
    1ce2:	e7df      	b.n	1ca4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1ce4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ce6:	040c      	lsls	r4, r1, #16
    1ce8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cea:	23a0      	movs	r3, #160	; 0xa0
    1cec:	05db      	lsls	r3, r3, #23
    1cee:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cf0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cf2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cf4:	23d0      	movs	r3, #208	; 0xd0
    1cf6:	061b      	lsls	r3, r3, #24
    1cf8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cfa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1cfc:	78d3      	ldrb	r3, [r2, #3]
    1cfe:	2b00      	cmp	r3, #0
    1d00:	d103      	bne.n	1d0a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d02:	7853      	ldrb	r3, [r2, #1]
    1d04:	3b01      	subs	r3, #1
    1d06:	2b01      	cmp	r3, #1
    1d08:	d902      	bls.n	1d10 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d0a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d0c:	6181      	str	r1, [r0, #24]
    1d0e:	e7f8      	b.n	1d02 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d10:	6081      	str	r1, [r0, #8]
}
    1d12:	e7fa      	b.n	1d0a <_system_pinmux_config+0x9a>
    1d14:	fffbffff 	.word	0xfffbffff

00001d18 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d18:	b510      	push	{r4, lr}
    1d1a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1d1c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1d1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d20:	2900      	cmp	r1, #0
    1d22:	d104      	bne.n	1d2e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d24:	0943      	lsrs	r3, r0, #5
    1d26:	01db      	lsls	r3, r3, #7
    1d28:	4905      	ldr	r1, [pc, #20]	; (1d40 <system_pinmux_pin_set_config+0x28>)
    1d2a:	468c      	mov	ip, r1
    1d2c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d2e:	241f      	movs	r4, #31
    1d30:	4020      	ands	r0, r4
    1d32:	2101      	movs	r1, #1
    1d34:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d36:	0018      	movs	r0, r3
    1d38:	4b02      	ldr	r3, [pc, #8]	; (1d44 <system_pinmux_pin_set_config+0x2c>)
    1d3a:	4798      	blx	r3
}
    1d3c:	bd10      	pop	{r4, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	41004400 	.word	0x41004400
    1d44:	00001c71 	.word	0x00001c71

00001d48 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d48:	4770      	bx	lr
	...

00001d4c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d4c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d4e:	4b05      	ldr	r3, [pc, #20]	; (1d64 <system_init+0x18>)
    1d50:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d52:	4b05      	ldr	r3, [pc, #20]	; (1d68 <system_init+0x1c>)
    1d54:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d56:	4b05      	ldr	r3, [pc, #20]	; (1d6c <system_init+0x20>)
    1d58:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d5a:	4b05      	ldr	r3, [pc, #20]	; (1d70 <system_init+0x24>)
    1d5c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <system_init+0x28>)
    1d60:	4798      	blx	r3
}
    1d62:	bd10      	pop	{r4, pc}
    1d64:	00000911 	.word	0x00000911
    1d68:	0000198d 	.word	0x0000198d
    1d6c:	00001d49 	.word	0x00001d49
    1d70:	00000511 	.word	0x00000511
    1d74:	00001d49 	.word	0x00001d49

00001d78 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    1d78:	4770      	bx	lr
	...

00001d7c <Reset_Handler>:
{
    1d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d7e:	4a2a      	ldr	r2, [pc, #168]	; (1e28 <Reset_Handler+0xac>)
    1d80:	4b2a      	ldr	r3, [pc, #168]	; (1e2c <Reset_Handler+0xb0>)
    1d82:	429a      	cmp	r2, r3
    1d84:	d011      	beq.n	1daa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1d86:	001a      	movs	r2, r3
    1d88:	4b29      	ldr	r3, [pc, #164]	; (1e30 <Reset_Handler+0xb4>)
    1d8a:	429a      	cmp	r2, r3
    1d8c:	d20d      	bcs.n	1daa <Reset_Handler+0x2e>
    1d8e:	4a29      	ldr	r2, [pc, #164]	; (1e34 <Reset_Handler+0xb8>)
    1d90:	3303      	adds	r3, #3
    1d92:	1a9b      	subs	r3, r3, r2
    1d94:	089b      	lsrs	r3, r3, #2
    1d96:	3301      	adds	r3, #1
    1d98:	009b      	lsls	r3, r3, #2
    1d9a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1d9c:	4823      	ldr	r0, [pc, #140]	; (1e2c <Reset_Handler+0xb0>)
    1d9e:	4922      	ldr	r1, [pc, #136]	; (1e28 <Reset_Handler+0xac>)
    1da0:	588c      	ldr	r4, [r1, r2]
    1da2:	5084      	str	r4, [r0, r2]
    1da4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1da6:	429a      	cmp	r2, r3
    1da8:	d1fa      	bne.n	1da0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1daa:	4a23      	ldr	r2, [pc, #140]	; (1e38 <Reset_Handler+0xbc>)
    1dac:	4b23      	ldr	r3, [pc, #140]	; (1e3c <Reset_Handler+0xc0>)
    1dae:	429a      	cmp	r2, r3
    1db0:	d20a      	bcs.n	1dc8 <Reset_Handler+0x4c>
    1db2:	43d3      	mvns	r3, r2
    1db4:	4921      	ldr	r1, [pc, #132]	; (1e3c <Reset_Handler+0xc0>)
    1db6:	185b      	adds	r3, r3, r1
    1db8:	2103      	movs	r1, #3
    1dba:	438b      	bics	r3, r1
    1dbc:	3304      	adds	r3, #4
    1dbe:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1dc0:	2100      	movs	r1, #0
    1dc2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1dc4:	4293      	cmp	r3, r2
    1dc6:	d1fc      	bne.n	1dc2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1dc8:	4a1d      	ldr	r2, [pc, #116]	; (1e40 <Reset_Handler+0xc4>)
    1dca:	21ff      	movs	r1, #255	; 0xff
    1dcc:	4b1d      	ldr	r3, [pc, #116]	; (1e44 <Reset_Handler+0xc8>)
    1dce:	438b      	bics	r3, r1
    1dd0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1dd2:	39fd      	subs	r1, #253	; 0xfd
    1dd4:	2390      	movs	r3, #144	; 0x90
    1dd6:	005b      	lsls	r3, r3, #1
    1dd8:	4a1b      	ldr	r2, [pc, #108]	; (1e48 <Reset_Handler+0xcc>)
    1dda:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ddc:	4a1b      	ldr	r2, [pc, #108]	; (1e4c <Reset_Handler+0xd0>)
    1dde:	78d3      	ldrb	r3, [r2, #3]
    1de0:	2503      	movs	r5, #3
    1de2:	43ab      	bics	r3, r5
    1de4:	2402      	movs	r4, #2
    1de6:	4323      	orrs	r3, r4
    1de8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1dea:	78d3      	ldrb	r3, [r2, #3]
    1dec:	270c      	movs	r7, #12
    1dee:	43bb      	bics	r3, r7
    1df0:	2608      	movs	r6, #8
    1df2:	4333      	orrs	r3, r6
    1df4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1df6:	4b16      	ldr	r3, [pc, #88]	; (1e50 <Reset_Handler+0xd4>)
    1df8:	7b98      	ldrb	r0, [r3, #14]
    1dfa:	2230      	movs	r2, #48	; 0x30
    1dfc:	4390      	bics	r0, r2
    1dfe:	2220      	movs	r2, #32
    1e00:	4310      	orrs	r0, r2
    1e02:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e04:	7b99      	ldrb	r1, [r3, #14]
    1e06:	43b9      	bics	r1, r7
    1e08:	4331      	orrs	r1, r6
    1e0a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e0c:	7b9a      	ldrb	r2, [r3, #14]
    1e0e:	43aa      	bics	r2, r5
    1e10:	4322      	orrs	r2, r4
    1e12:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e14:	4a0f      	ldr	r2, [pc, #60]	; (1e54 <Reset_Handler+0xd8>)
    1e16:	6853      	ldr	r3, [r2, #4]
    1e18:	2180      	movs	r1, #128	; 0x80
    1e1a:	430b      	orrs	r3, r1
    1e1c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e1e:	4b0e      	ldr	r3, [pc, #56]	; (1e58 <Reset_Handler+0xdc>)
    1e20:	4798      	blx	r3
        main();
    1e22:	4b0e      	ldr	r3, [pc, #56]	; (1e5c <Reset_Handler+0xe0>)
    1e24:	4798      	blx	r3
    1e26:	e7fe      	b.n	1e26 <Reset_Handler+0xaa>
    1e28:	00002354 	.word	0x00002354
    1e2c:	20000000 	.word	0x20000000
    1e30:	2000001c 	.word	0x2000001c
    1e34:	20000004 	.word	0x20000004
    1e38:	20000020 	.word	0x20000020
    1e3c:	20000a00 	.word	0x20000a00
    1e40:	e000ed00 	.word	0xe000ed00
    1e44:	00000000 	.word	0x00000000
    1e48:	41007000 	.word	0x41007000
    1e4c:	41005000 	.word	0x41005000
    1e50:	41004800 	.word	0x41004800
    1e54:	41004000 	.word	0x41004000
    1e58:	00002221 	.word	0x00002221
    1e5c:	00000ad5 	.word	0x00000ad5

00001e60 <__udivsi3>:
    1e60:	2200      	movs	r2, #0
    1e62:	0843      	lsrs	r3, r0, #1
    1e64:	428b      	cmp	r3, r1
    1e66:	d374      	bcc.n	1f52 <__udivsi3+0xf2>
    1e68:	0903      	lsrs	r3, r0, #4
    1e6a:	428b      	cmp	r3, r1
    1e6c:	d35f      	bcc.n	1f2e <__udivsi3+0xce>
    1e6e:	0a03      	lsrs	r3, r0, #8
    1e70:	428b      	cmp	r3, r1
    1e72:	d344      	bcc.n	1efe <__udivsi3+0x9e>
    1e74:	0b03      	lsrs	r3, r0, #12
    1e76:	428b      	cmp	r3, r1
    1e78:	d328      	bcc.n	1ecc <__udivsi3+0x6c>
    1e7a:	0c03      	lsrs	r3, r0, #16
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d30d      	bcc.n	1e9c <__udivsi3+0x3c>
    1e80:	22ff      	movs	r2, #255	; 0xff
    1e82:	0209      	lsls	r1, r1, #8
    1e84:	ba12      	rev	r2, r2
    1e86:	0c03      	lsrs	r3, r0, #16
    1e88:	428b      	cmp	r3, r1
    1e8a:	d302      	bcc.n	1e92 <__udivsi3+0x32>
    1e8c:	1212      	asrs	r2, r2, #8
    1e8e:	0209      	lsls	r1, r1, #8
    1e90:	d065      	beq.n	1f5e <__udivsi3+0xfe>
    1e92:	0b03      	lsrs	r3, r0, #12
    1e94:	428b      	cmp	r3, r1
    1e96:	d319      	bcc.n	1ecc <__udivsi3+0x6c>
    1e98:	e000      	b.n	1e9c <__udivsi3+0x3c>
    1e9a:	0a09      	lsrs	r1, r1, #8
    1e9c:	0bc3      	lsrs	r3, r0, #15
    1e9e:	428b      	cmp	r3, r1
    1ea0:	d301      	bcc.n	1ea6 <__udivsi3+0x46>
    1ea2:	03cb      	lsls	r3, r1, #15
    1ea4:	1ac0      	subs	r0, r0, r3
    1ea6:	4152      	adcs	r2, r2
    1ea8:	0b83      	lsrs	r3, r0, #14
    1eaa:	428b      	cmp	r3, r1
    1eac:	d301      	bcc.n	1eb2 <__udivsi3+0x52>
    1eae:	038b      	lsls	r3, r1, #14
    1eb0:	1ac0      	subs	r0, r0, r3
    1eb2:	4152      	adcs	r2, r2
    1eb4:	0b43      	lsrs	r3, r0, #13
    1eb6:	428b      	cmp	r3, r1
    1eb8:	d301      	bcc.n	1ebe <__udivsi3+0x5e>
    1eba:	034b      	lsls	r3, r1, #13
    1ebc:	1ac0      	subs	r0, r0, r3
    1ebe:	4152      	adcs	r2, r2
    1ec0:	0b03      	lsrs	r3, r0, #12
    1ec2:	428b      	cmp	r3, r1
    1ec4:	d301      	bcc.n	1eca <__udivsi3+0x6a>
    1ec6:	030b      	lsls	r3, r1, #12
    1ec8:	1ac0      	subs	r0, r0, r3
    1eca:	4152      	adcs	r2, r2
    1ecc:	0ac3      	lsrs	r3, r0, #11
    1ece:	428b      	cmp	r3, r1
    1ed0:	d301      	bcc.n	1ed6 <__udivsi3+0x76>
    1ed2:	02cb      	lsls	r3, r1, #11
    1ed4:	1ac0      	subs	r0, r0, r3
    1ed6:	4152      	adcs	r2, r2
    1ed8:	0a83      	lsrs	r3, r0, #10
    1eda:	428b      	cmp	r3, r1
    1edc:	d301      	bcc.n	1ee2 <__udivsi3+0x82>
    1ede:	028b      	lsls	r3, r1, #10
    1ee0:	1ac0      	subs	r0, r0, r3
    1ee2:	4152      	adcs	r2, r2
    1ee4:	0a43      	lsrs	r3, r0, #9
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d301      	bcc.n	1eee <__udivsi3+0x8e>
    1eea:	024b      	lsls	r3, r1, #9
    1eec:	1ac0      	subs	r0, r0, r3
    1eee:	4152      	adcs	r2, r2
    1ef0:	0a03      	lsrs	r3, r0, #8
    1ef2:	428b      	cmp	r3, r1
    1ef4:	d301      	bcc.n	1efa <__udivsi3+0x9a>
    1ef6:	020b      	lsls	r3, r1, #8
    1ef8:	1ac0      	subs	r0, r0, r3
    1efa:	4152      	adcs	r2, r2
    1efc:	d2cd      	bcs.n	1e9a <__udivsi3+0x3a>
    1efe:	09c3      	lsrs	r3, r0, #7
    1f00:	428b      	cmp	r3, r1
    1f02:	d301      	bcc.n	1f08 <__udivsi3+0xa8>
    1f04:	01cb      	lsls	r3, r1, #7
    1f06:	1ac0      	subs	r0, r0, r3
    1f08:	4152      	adcs	r2, r2
    1f0a:	0983      	lsrs	r3, r0, #6
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d301      	bcc.n	1f14 <__udivsi3+0xb4>
    1f10:	018b      	lsls	r3, r1, #6
    1f12:	1ac0      	subs	r0, r0, r3
    1f14:	4152      	adcs	r2, r2
    1f16:	0943      	lsrs	r3, r0, #5
    1f18:	428b      	cmp	r3, r1
    1f1a:	d301      	bcc.n	1f20 <__udivsi3+0xc0>
    1f1c:	014b      	lsls	r3, r1, #5
    1f1e:	1ac0      	subs	r0, r0, r3
    1f20:	4152      	adcs	r2, r2
    1f22:	0903      	lsrs	r3, r0, #4
    1f24:	428b      	cmp	r3, r1
    1f26:	d301      	bcc.n	1f2c <__udivsi3+0xcc>
    1f28:	010b      	lsls	r3, r1, #4
    1f2a:	1ac0      	subs	r0, r0, r3
    1f2c:	4152      	adcs	r2, r2
    1f2e:	08c3      	lsrs	r3, r0, #3
    1f30:	428b      	cmp	r3, r1
    1f32:	d301      	bcc.n	1f38 <__udivsi3+0xd8>
    1f34:	00cb      	lsls	r3, r1, #3
    1f36:	1ac0      	subs	r0, r0, r3
    1f38:	4152      	adcs	r2, r2
    1f3a:	0883      	lsrs	r3, r0, #2
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d301      	bcc.n	1f44 <__udivsi3+0xe4>
    1f40:	008b      	lsls	r3, r1, #2
    1f42:	1ac0      	subs	r0, r0, r3
    1f44:	4152      	adcs	r2, r2
    1f46:	0843      	lsrs	r3, r0, #1
    1f48:	428b      	cmp	r3, r1
    1f4a:	d301      	bcc.n	1f50 <__udivsi3+0xf0>
    1f4c:	004b      	lsls	r3, r1, #1
    1f4e:	1ac0      	subs	r0, r0, r3
    1f50:	4152      	adcs	r2, r2
    1f52:	1a41      	subs	r1, r0, r1
    1f54:	d200      	bcs.n	1f58 <__udivsi3+0xf8>
    1f56:	4601      	mov	r1, r0
    1f58:	4152      	adcs	r2, r2
    1f5a:	4610      	mov	r0, r2
    1f5c:	4770      	bx	lr
    1f5e:	e7ff      	b.n	1f60 <__udivsi3+0x100>
    1f60:	b501      	push	{r0, lr}
    1f62:	2000      	movs	r0, #0
    1f64:	f000 f806 	bl	1f74 <__aeabi_idiv0>
    1f68:	bd02      	pop	{r1, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)

00001f6c <__aeabi_uidivmod>:
    1f6c:	2900      	cmp	r1, #0
    1f6e:	d0f7      	beq.n	1f60 <__udivsi3+0x100>
    1f70:	e776      	b.n	1e60 <__udivsi3>
    1f72:	4770      	bx	lr

00001f74 <__aeabi_idiv0>:
    1f74:	4770      	bx	lr
    1f76:	46c0      	nop			; (mov r8, r8)

00001f78 <__clzsi2>:
    1f78:	211c      	movs	r1, #28
    1f7a:	2301      	movs	r3, #1
    1f7c:	041b      	lsls	r3, r3, #16
    1f7e:	4298      	cmp	r0, r3
    1f80:	d301      	bcc.n	1f86 <__clzsi2+0xe>
    1f82:	0c00      	lsrs	r0, r0, #16
    1f84:	3910      	subs	r1, #16
    1f86:	0a1b      	lsrs	r3, r3, #8
    1f88:	4298      	cmp	r0, r3
    1f8a:	d301      	bcc.n	1f90 <__clzsi2+0x18>
    1f8c:	0a00      	lsrs	r0, r0, #8
    1f8e:	3908      	subs	r1, #8
    1f90:	091b      	lsrs	r3, r3, #4
    1f92:	4298      	cmp	r0, r3
    1f94:	d301      	bcc.n	1f9a <__clzsi2+0x22>
    1f96:	0900      	lsrs	r0, r0, #4
    1f98:	3904      	subs	r1, #4
    1f9a:	a202      	add	r2, pc, #8	; (adr r2, 1fa4 <__clzsi2+0x2c>)
    1f9c:	5c10      	ldrb	r0, [r2, r0]
    1f9e:	1840      	adds	r0, r0, r1
    1fa0:	4770      	bx	lr
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	02020304 	.word	0x02020304
    1fa8:	01010101 	.word	0x01010101
	...

00001fb4 <__ctzsi2>:
    1fb4:	4241      	negs	r1, r0
    1fb6:	4008      	ands	r0, r1
    1fb8:	211c      	movs	r1, #28
    1fba:	2301      	movs	r3, #1
    1fbc:	041b      	lsls	r3, r3, #16
    1fbe:	4298      	cmp	r0, r3
    1fc0:	d301      	bcc.n	1fc6 <__ctzsi2+0x12>
    1fc2:	0c00      	lsrs	r0, r0, #16
    1fc4:	3910      	subs	r1, #16
    1fc6:	0a1b      	lsrs	r3, r3, #8
    1fc8:	4298      	cmp	r0, r3
    1fca:	d301      	bcc.n	1fd0 <__ctzsi2+0x1c>
    1fcc:	0a00      	lsrs	r0, r0, #8
    1fce:	3908      	subs	r1, #8
    1fd0:	091b      	lsrs	r3, r3, #4
    1fd2:	4298      	cmp	r0, r3
    1fd4:	d301      	bcc.n	1fda <__ctzsi2+0x26>
    1fd6:	0900      	lsrs	r0, r0, #4
    1fd8:	3904      	subs	r1, #4
    1fda:	a202      	add	r2, pc, #8	; (adr r2, 1fe4 <__ctzsi2+0x30>)
    1fdc:	5c10      	ldrb	r0, [r2, r0]
    1fde:	1a40      	subs	r0, r0, r1
    1fe0:	4770      	bx	lr
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	1d1d1c1b 	.word	0x1d1d1c1b
    1fe8:	1e1e1e1e 	.word	0x1e1e1e1e
    1fec:	1f1f1f1f 	.word	0x1f1f1f1f
    1ff0:	1f1f1f1f 	.word	0x1f1f1f1f

00001ff4 <__aeabi_uldivmod>:
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d111      	bne.n	201c <STACK_SIZE+0x1c>
    1ff8:	2a00      	cmp	r2, #0
    1ffa:	d10f      	bne.n	201c <STACK_SIZE+0x1c>
    1ffc:	2900      	cmp	r1, #0
    1ffe:	d100      	bne.n	2002 <STACK_SIZE+0x2>
    2000:	2800      	cmp	r0, #0
    2002:	d002      	beq.n	200a <STACK_SIZE+0xa>
    2004:	2100      	movs	r1, #0
    2006:	43c9      	mvns	r1, r1
    2008:	1c08      	adds	r0, r1, #0
    200a:	b407      	push	{r0, r1, r2}
    200c:	4802      	ldr	r0, [pc, #8]	; (2018 <STACK_SIZE+0x18>)
    200e:	a102      	add	r1, pc, #8	; (adr r1, 2018 <STACK_SIZE+0x18>)
    2010:	1840      	adds	r0, r0, r1
    2012:	9002      	str	r0, [sp, #8]
    2014:	bd03      	pop	{r0, r1, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	ffffff5d 	.word	0xffffff5d
    201c:	b403      	push	{r0, r1}
    201e:	4668      	mov	r0, sp
    2020:	b501      	push	{r0, lr}
    2022:	9802      	ldr	r0, [sp, #8]
    2024:	f000 f830 	bl	2088 <__udivmoddi4>
    2028:	9b01      	ldr	r3, [sp, #4]
    202a:	469e      	mov	lr, r3
    202c:	b002      	add	sp, #8
    202e:	bc0c      	pop	{r2, r3}
    2030:	4770      	bx	lr
    2032:	46c0      	nop			; (mov r8, r8)

00002034 <__aeabi_lmul>:
    2034:	b5f0      	push	{r4, r5, r6, r7, lr}
    2036:	46ce      	mov	lr, r9
    2038:	4647      	mov	r7, r8
    203a:	0415      	lsls	r5, r2, #16
    203c:	0c2d      	lsrs	r5, r5, #16
    203e:	002e      	movs	r6, r5
    2040:	b580      	push	{r7, lr}
    2042:	0407      	lsls	r7, r0, #16
    2044:	0c14      	lsrs	r4, r2, #16
    2046:	0c3f      	lsrs	r7, r7, #16
    2048:	4699      	mov	r9, r3
    204a:	0c03      	lsrs	r3, r0, #16
    204c:	437e      	muls	r6, r7
    204e:	435d      	muls	r5, r3
    2050:	4367      	muls	r7, r4
    2052:	4363      	muls	r3, r4
    2054:	197f      	adds	r7, r7, r5
    2056:	0c34      	lsrs	r4, r6, #16
    2058:	19e4      	adds	r4, r4, r7
    205a:	469c      	mov	ip, r3
    205c:	42a5      	cmp	r5, r4
    205e:	d903      	bls.n	2068 <__aeabi_lmul+0x34>
    2060:	2380      	movs	r3, #128	; 0x80
    2062:	025b      	lsls	r3, r3, #9
    2064:	4698      	mov	r8, r3
    2066:	44c4      	add	ip, r8
    2068:	464b      	mov	r3, r9
    206a:	4351      	muls	r1, r2
    206c:	4343      	muls	r3, r0
    206e:	0436      	lsls	r6, r6, #16
    2070:	0c36      	lsrs	r6, r6, #16
    2072:	0c25      	lsrs	r5, r4, #16
    2074:	0424      	lsls	r4, r4, #16
    2076:	4465      	add	r5, ip
    2078:	19a4      	adds	r4, r4, r6
    207a:	1859      	adds	r1, r3, r1
    207c:	1949      	adds	r1, r1, r5
    207e:	0020      	movs	r0, r4
    2080:	bc0c      	pop	{r2, r3}
    2082:	4690      	mov	r8, r2
    2084:	4699      	mov	r9, r3
    2086:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002088 <__udivmoddi4>:
    2088:	b5f0      	push	{r4, r5, r6, r7, lr}
    208a:	4657      	mov	r7, sl
    208c:	464e      	mov	r6, r9
    208e:	4645      	mov	r5, r8
    2090:	46de      	mov	lr, fp
    2092:	b5e0      	push	{r5, r6, r7, lr}
    2094:	0004      	movs	r4, r0
    2096:	b083      	sub	sp, #12
    2098:	000d      	movs	r5, r1
    209a:	4692      	mov	sl, r2
    209c:	4699      	mov	r9, r3
    209e:	428b      	cmp	r3, r1
    20a0:	d82f      	bhi.n	2102 <__udivmoddi4+0x7a>
    20a2:	d02c      	beq.n	20fe <__udivmoddi4+0x76>
    20a4:	4649      	mov	r1, r9
    20a6:	4650      	mov	r0, sl
    20a8:	f000 f8ae 	bl	2208 <__clzdi2>
    20ac:	0029      	movs	r1, r5
    20ae:	0006      	movs	r6, r0
    20b0:	0020      	movs	r0, r4
    20b2:	f000 f8a9 	bl	2208 <__clzdi2>
    20b6:	1a33      	subs	r3, r6, r0
    20b8:	4698      	mov	r8, r3
    20ba:	3b20      	subs	r3, #32
    20bc:	469b      	mov	fp, r3
    20be:	d500      	bpl.n	20c2 <__udivmoddi4+0x3a>
    20c0:	e074      	b.n	21ac <__udivmoddi4+0x124>
    20c2:	4653      	mov	r3, sl
    20c4:	465a      	mov	r2, fp
    20c6:	4093      	lsls	r3, r2
    20c8:	001f      	movs	r7, r3
    20ca:	4653      	mov	r3, sl
    20cc:	4642      	mov	r2, r8
    20ce:	4093      	lsls	r3, r2
    20d0:	001e      	movs	r6, r3
    20d2:	42af      	cmp	r7, r5
    20d4:	d829      	bhi.n	212a <__udivmoddi4+0xa2>
    20d6:	d026      	beq.n	2126 <__udivmoddi4+0x9e>
    20d8:	465b      	mov	r3, fp
    20da:	1ba4      	subs	r4, r4, r6
    20dc:	41bd      	sbcs	r5, r7
    20de:	2b00      	cmp	r3, #0
    20e0:	da00      	bge.n	20e4 <__udivmoddi4+0x5c>
    20e2:	e079      	b.n	21d8 <__udivmoddi4+0x150>
    20e4:	2200      	movs	r2, #0
    20e6:	2300      	movs	r3, #0
    20e8:	9200      	str	r2, [sp, #0]
    20ea:	9301      	str	r3, [sp, #4]
    20ec:	2301      	movs	r3, #1
    20ee:	465a      	mov	r2, fp
    20f0:	4093      	lsls	r3, r2
    20f2:	9301      	str	r3, [sp, #4]
    20f4:	2301      	movs	r3, #1
    20f6:	4642      	mov	r2, r8
    20f8:	4093      	lsls	r3, r2
    20fa:	9300      	str	r3, [sp, #0]
    20fc:	e019      	b.n	2132 <__udivmoddi4+0xaa>
    20fe:	4282      	cmp	r2, r0
    2100:	d9d0      	bls.n	20a4 <__udivmoddi4+0x1c>
    2102:	2200      	movs	r2, #0
    2104:	2300      	movs	r3, #0
    2106:	9200      	str	r2, [sp, #0]
    2108:	9301      	str	r3, [sp, #4]
    210a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    210c:	2b00      	cmp	r3, #0
    210e:	d001      	beq.n	2114 <__udivmoddi4+0x8c>
    2110:	601c      	str	r4, [r3, #0]
    2112:	605d      	str	r5, [r3, #4]
    2114:	9800      	ldr	r0, [sp, #0]
    2116:	9901      	ldr	r1, [sp, #4]
    2118:	b003      	add	sp, #12
    211a:	bc3c      	pop	{r2, r3, r4, r5}
    211c:	4690      	mov	r8, r2
    211e:	4699      	mov	r9, r3
    2120:	46a2      	mov	sl, r4
    2122:	46ab      	mov	fp, r5
    2124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2126:	42a3      	cmp	r3, r4
    2128:	d9d6      	bls.n	20d8 <__udivmoddi4+0x50>
    212a:	2200      	movs	r2, #0
    212c:	2300      	movs	r3, #0
    212e:	9200      	str	r2, [sp, #0]
    2130:	9301      	str	r3, [sp, #4]
    2132:	4643      	mov	r3, r8
    2134:	2b00      	cmp	r3, #0
    2136:	d0e8      	beq.n	210a <__udivmoddi4+0x82>
    2138:	07fb      	lsls	r3, r7, #31
    213a:	0872      	lsrs	r2, r6, #1
    213c:	431a      	orrs	r2, r3
    213e:	4646      	mov	r6, r8
    2140:	087b      	lsrs	r3, r7, #1
    2142:	e00e      	b.n	2162 <__udivmoddi4+0xda>
    2144:	42ab      	cmp	r3, r5
    2146:	d101      	bne.n	214c <__udivmoddi4+0xc4>
    2148:	42a2      	cmp	r2, r4
    214a:	d80c      	bhi.n	2166 <__udivmoddi4+0xde>
    214c:	1aa4      	subs	r4, r4, r2
    214e:	419d      	sbcs	r5, r3
    2150:	2001      	movs	r0, #1
    2152:	1924      	adds	r4, r4, r4
    2154:	416d      	adcs	r5, r5
    2156:	2100      	movs	r1, #0
    2158:	3e01      	subs	r6, #1
    215a:	1824      	adds	r4, r4, r0
    215c:	414d      	adcs	r5, r1
    215e:	2e00      	cmp	r6, #0
    2160:	d006      	beq.n	2170 <__udivmoddi4+0xe8>
    2162:	42ab      	cmp	r3, r5
    2164:	d9ee      	bls.n	2144 <__udivmoddi4+0xbc>
    2166:	3e01      	subs	r6, #1
    2168:	1924      	adds	r4, r4, r4
    216a:	416d      	adcs	r5, r5
    216c:	2e00      	cmp	r6, #0
    216e:	d1f8      	bne.n	2162 <__udivmoddi4+0xda>
    2170:	465b      	mov	r3, fp
    2172:	9800      	ldr	r0, [sp, #0]
    2174:	9901      	ldr	r1, [sp, #4]
    2176:	1900      	adds	r0, r0, r4
    2178:	4169      	adcs	r1, r5
    217a:	2b00      	cmp	r3, #0
    217c:	db22      	blt.n	21c4 <__udivmoddi4+0x13c>
    217e:	002b      	movs	r3, r5
    2180:	465a      	mov	r2, fp
    2182:	40d3      	lsrs	r3, r2
    2184:	002a      	movs	r2, r5
    2186:	4644      	mov	r4, r8
    2188:	40e2      	lsrs	r2, r4
    218a:	001c      	movs	r4, r3
    218c:	465b      	mov	r3, fp
    218e:	0015      	movs	r5, r2
    2190:	2b00      	cmp	r3, #0
    2192:	db2c      	blt.n	21ee <__udivmoddi4+0x166>
    2194:	0026      	movs	r6, r4
    2196:	409e      	lsls	r6, r3
    2198:	0033      	movs	r3, r6
    219a:	0026      	movs	r6, r4
    219c:	4647      	mov	r7, r8
    219e:	40be      	lsls	r6, r7
    21a0:	0032      	movs	r2, r6
    21a2:	1a80      	subs	r0, r0, r2
    21a4:	4199      	sbcs	r1, r3
    21a6:	9000      	str	r0, [sp, #0]
    21a8:	9101      	str	r1, [sp, #4]
    21aa:	e7ae      	b.n	210a <__udivmoddi4+0x82>
    21ac:	4642      	mov	r2, r8
    21ae:	2320      	movs	r3, #32
    21b0:	1a9b      	subs	r3, r3, r2
    21b2:	4652      	mov	r2, sl
    21b4:	40da      	lsrs	r2, r3
    21b6:	4641      	mov	r1, r8
    21b8:	0013      	movs	r3, r2
    21ba:	464a      	mov	r2, r9
    21bc:	408a      	lsls	r2, r1
    21be:	0017      	movs	r7, r2
    21c0:	431f      	orrs	r7, r3
    21c2:	e782      	b.n	20ca <__udivmoddi4+0x42>
    21c4:	4642      	mov	r2, r8
    21c6:	2320      	movs	r3, #32
    21c8:	1a9b      	subs	r3, r3, r2
    21ca:	002a      	movs	r2, r5
    21cc:	4646      	mov	r6, r8
    21ce:	409a      	lsls	r2, r3
    21d0:	0023      	movs	r3, r4
    21d2:	40f3      	lsrs	r3, r6
    21d4:	4313      	orrs	r3, r2
    21d6:	e7d5      	b.n	2184 <__udivmoddi4+0xfc>
    21d8:	4642      	mov	r2, r8
    21da:	2320      	movs	r3, #32
    21dc:	2100      	movs	r1, #0
    21de:	1a9b      	subs	r3, r3, r2
    21e0:	2200      	movs	r2, #0
    21e2:	9100      	str	r1, [sp, #0]
    21e4:	9201      	str	r2, [sp, #4]
    21e6:	2201      	movs	r2, #1
    21e8:	40da      	lsrs	r2, r3
    21ea:	9201      	str	r2, [sp, #4]
    21ec:	e782      	b.n	20f4 <__udivmoddi4+0x6c>
    21ee:	4642      	mov	r2, r8
    21f0:	2320      	movs	r3, #32
    21f2:	0026      	movs	r6, r4
    21f4:	1a9b      	subs	r3, r3, r2
    21f6:	40de      	lsrs	r6, r3
    21f8:	002f      	movs	r7, r5
    21fa:	46b4      	mov	ip, r6
    21fc:	4097      	lsls	r7, r2
    21fe:	4666      	mov	r6, ip
    2200:	003b      	movs	r3, r7
    2202:	4333      	orrs	r3, r6
    2204:	e7c9      	b.n	219a <__udivmoddi4+0x112>
    2206:	46c0      	nop			; (mov r8, r8)

00002208 <__clzdi2>:
    2208:	b510      	push	{r4, lr}
    220a:	2900      	cmp	r1, #0
    220c:	d103      	bne.n	2216 <__clzdi2+0xe>
    220e:	f7ff feb3 	bl	1f78 <__clzsi2>
    2212:	3020      	adds	r0, #32
    2214:	e002      	b.n	221c <__clzdi2+0x14>
    2216:	1c08      	adds	r0, r1, #0
    2218:	f7ff feae 	bl	1f78 <__clzsi2>
    221c:	bd10      	pop	{r4, pc}
    221e:	46c0      	nop			; (mov r8, r8)

00002220 <__libc_init_array>:
    2220:	b570      	push	{r4, r5, r6, lr}
    2222:	2600      	movs	r6, #0
    2224:	4d0c      	ldr	r5, [pc, #48]	; (2258 <__libc_init_array+0x38>)
    2226:	4c0d      	ldr	r4, [pc, #52]	; (225c <__libc_init_array+0x3c>)
    2228:	1b64      	subs	r4, r4, r5
    222a:	10a4      	asrs	r4, r4, #2
    222c:	42a6      	cmp	r6, r4
    222e:	d109      	bne.n	2244 <__libc_init_array+0x24>
    2230:	2600      	movs	r6, #0
    2232:	f000 f87b 	bl	232c <_init>
    2236:	4d0a      	ldr	r5, [pc, #40]	; (2260 <__libc_init_array+0x40>)
    2238:	4c0a      	ldr	r4, [pc, #40]	; (2264 <__libc_init_array+0x44>)
    223a:	1b64      	subs	r4, r4, r5
    223c:	10a4      	asrs	r4, r4, #2
    223e:	42a6      	cmp	r6, r4
    2240:	d105      	bne.n	224e <__libc_init_array+0x2e>
    2242:	bd70      	pop	{r4, r5, r6, pc}
    2244:	00b3      	lsls	r3, r6, #2
    2246:	58eb      	ldr	r3, [r5, r3]
    2248:	4798      	blx	r3
    224a:	3601      	adds	r6, #1
    224c:	e7ee      	b.n	222c <__libc_init_array+0xc>
    224e:	00b3      	lsls	r3, r6, #2
    2250:	58eb      	ldr	r3, [r5, r3]
    2252:	4798      	blx	r3
    2254:	3601      	adds	r6, #1
    2256:	e7f2      	b.n	223e <__libc_init_array+0x1e>
    2258:	00002338 	.word	0x00002338
    225c:	00002338 	.word	0x00002338
    2260:	00002338 	.word	0x00002338
    2264:	0000233c 	.word	0x0000233c

00002268 <memcpy>:
    2268:	2300      	movs	r3, #0
    226a:	b510      	push	{r4, lr}
    226c:	429a      	cmp	r2, r3
    226e:	d100      	bne.n	2272 <memcpy+0xa>
    2270:	bd10      	pop	{r4, pc}
    2272:	5ccc      	ldrb	r4, [r1, r3]
    2274:	54c4      	strb	r4, [r0, r3]
    2276:	3301      	adds	r3, #1
    2278:	e7f8      	b.n	226c <memcpy+0x4>

0000227a <memset>:
    227a:	0003      	movs	r3, r0
    227c:	1882      	adds	r2, r0, r2
    227e:	4293      	cmp	r3, r2
    2280:	d100      	bne.n	2284 <memset+0xa>
    2282:	4770      	bx	lr
    2284:	7019      	strb	r1, [r3, #0]
    2286:	3301      	adds	r3, #1
    2288:	e7f9      	b.n	227e <memset+0x4>
	...

0000228c <_tcc_intflag>:
    228c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    229c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    22ac:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    22bc:	05ee 0000 05ea 0000 05ea 0000 0658 0000     ............X...
    22cc:	0658 0000 0602 0000 05f4 0000 0608 0000     X...............
    22dc:	0646 0000 0894 0000 0874 0000 0874 0000     F.......t...t...
    22ec:	0900 0000 0886 0000 08a2 0000 0878 0000     ............x...
    22fc:	08b0 0000 08f0 0000                         ........

00002304 <_usb_device_irq_bits>:
    2304:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........
    2314:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    2324:	1800 4200 1c00 4200                         ...B...B

0000232c <_init>:
    232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2332:	bc08      	pop	{r3}
    2334:	469e      	mov	lr, r3
    2336:	4770      	bx	lr

00002338 <__init_array_start>:
    2338:	000000dd 	.word	0x000000dd

0000233c <_fini>:
    233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2342:	bc08      	pop	{r3}
    2344:	469e      	mov	lr, r3
    2346:	4770      	bx	lr

00002348 <__fini_array_start>:
    2348:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <_dma_inst>:
	...
20000014:	0005 0000                                   ....

20000018 <g_interrupt_enabled>:
20000018:	0001 0000                                   ....
