
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000acf4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000acf4  0000acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000018c  20000000  0000acfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000028b4  2000018c  0000ae88  0002018c  2**2
                  ALLOC
  4 .stack        00002000  20002a40  0000d73c  0002018c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006a654  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008c2f  00000000  00000000  0008a861  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016cc3  00000000  00000000  00093490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010f8  00000000  00000000  000aa153  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000019c0  00000000  00000000  000ab24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026a0a  00000000  00000000  000acc0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001fe7f  00000000  00000000  000d3615  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009ff4e  00000000  00000000  000f3494  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003530  00000000  00000000  001933e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 4a 00 20 09 8c 00 00 05 8c 00 00 05 8c 00 00     @J. ............
	...
      2c:	05 8c 00 00 00 00 00 00 00 00 00 00 05 8c 00 00     ................
      3c:	05 8c 00 00 05 8c 00 00 05 8c 00 00 05 8c 00 00     ................
      4c:	05 8c 00 00 85 73 00 00 05 8c 00 00 05 8c 00 00     .....s..........
      5c:	41 6b 00 00 05 8c 00 00 9d 25 00 00 ad 25 00 00     Ak.......%...%..
      6c:	bd 25 00 00 cd 25 00 00 dd 25 00 00 ed 25 00 00     .%...%...%...%..
      7c:	69 09 00 00 79 09 00 00 89 09 00 00 05 8c 00 00     i...y...........
      8c:	05 8c 00 00 05 8c 00 00 05 8c 00 00 05 8c 00 00     ................
      9c:	05 8c 00 00 05 8c 00 00 05 8c 00 00 05 8c 00 00     ................
      ac:	05 8c 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000018c 	.word	0x2000018c
      d4:	00000000 	.word	0x00000000
      d8:	0000acfc 	.word	0x0000acfc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000190 	.word	0x20000190
     108:	0000acfc 	.word	0x0000acfc
     10c:	0000acfc 	.word	0x0000acfc
     110:	00000000 	.word	0x00000000

00000114 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     116:	0080      	lsls	r0, r0, #2
     118:	4b85      	ldr	r3, [pc, #532]	; (330 <_spi_interrupt_handler+0x21c>)
     11a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     11c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     11e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     120:	5ce3      	ldrb	r3, [r4, r3]
     122:	2236      	movs	r2, #54	; 0x36
     124:	5ca7      	ldrb	r7, [r4, r2]
     126:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     128:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     12a:	7db5      	ldrb	r5, [r6, #22]
     12c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     12e:	07eb      	lsls	r3, r5, #31
     130:	d52e      	bpl.n	190 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     132:	7963      	ldrb	r3, [r4, #5]
     134:	2b01      	cmp	r3, #1
     136:	d025      	beq.n	184 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     138:	2b00      	cmp	r3, #0
     13a:	d129      	bne.n	190 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     13c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     13e:	2b00      	cmp	r3, #0
     140:	d026      	beq.n	190 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     142:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     146:	7813      	ldrb	r3, [r2, #0]
     148:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     14a:	1c50      	adds	r0, r2, #1
     14c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     14e:	79a0      	ldrb	r0, [r4, #6]
     150:	2801      	cmp	r0, #1
     152:	d100      	bne.n	156 <_spi_interrupt_handler+0x42>
     154:	e069      	b.n	22a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     156:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     158:	05db      	lsls	r3, r3, #23
     15a:	0ddb      	lsrs	r3, r3, #23
     15c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     15e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     160:	3b01      	subs	r3, #1
     162:	b29b      	uxth	r3, r3
     164:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     166:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     168:	b29b      	uxth	r3, r3
     16a:	2b00      	cmp	r3, #0
     16c:	d110      	bne.n	190 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     16e:	3301      	adds	r3, #1
     170:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     172:	7a63      	ldrb	r3, [r4, #9]
     174:	2b01      	cmp	r3, #1
     176:	d10b      	bne.n	190 <_spi_interrupt_handler+0x7c>
     178:	79e3      	ldrb	r3, [r4, #7]
     17a:	2b00      	cmp	r3, #0
     17c:	d108      	bne.n	190 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     17e:	3302      	adds	r3, #2
     180:	75b3      	strb	r3, [r6, #22]
     182:	e005      	b.n	190 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
     184:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     186:	2b00      	cmp	r3, #0
     188:	d03e      	beq.n	208 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
     18a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     18c:	2b00      	cmp	r3, #0
     18e:	d1d8      	bne.n	142 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     190:	076b      	lsls	r3, r5, #29
     192:	d511      	bpl.n	1b8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     194:	8b73      	ldrh	r3, [r6, #26]
     196:	075b      	lsls	r3, r3, #29
     198:	d551      	bpl.n	23e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
     19a:	7a63      	ldrb	r3, [r4, #9]
     19c:	2b01      	cmp	r3, #1
     19e:	d008      	beq.n	1b2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     1a0:	221e      	movs	r2, #30
     1a2:	2338      	movs	r3, #56	; 0x38
     1a4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     1a6:	3b35      	subs	r3, #53	; 0x35
     1a8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     1aa:	3302      	adds	r3, #2
     1ac:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     1ae:	073b      	lsls	r3, r7, #28
     1b0:	d441      	bmi.n	236 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     1b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     1b4:	2304      	movs	r3, #4
     1b6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     1b8:	07ab      	lsls	r3, r5, #30
     1ba:	d515      	bpl.n	1e8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     1bc:	7963      	ldrb	r3, [r4, #5]
     1be:	2b00      	cmp	r3, #0
     1c0:	d10e      	bne.n	1e0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     1c2:	3307      	adds	r3, #7
     1c4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     1c6:	3b05      	subs	r3, #5
     1c8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     1ca:	3301      	adds	r3, #1
     1cc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     1ce:	2300      	movs	r3, #0
     1d0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     1d2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     1d4:	3338      	adds	r3, #56	; 0x38
     1d6:	2200      	movs	r2, #0
     1d8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     1da:	06fb      	lsls	r3, r7, #27
     1dc:	d500      	bpl.n	1e0 <_spi_interrupt_handler+0xcc>
     1de:	e07f      	b.n	2e0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     1e0:	7963      	ldrb	r3, [r4, #5]
     1e2:	2b01      	cmp	r3, #1
     1e4:	d100      	bne.n	1e8 <_spi_interrupt_handler+0xd4>
     1e6:	e07f      	b.n	2e8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     1e8:	072b      	lsls	r3, r5, #28
     1ea:	d508      	bpl.n	1fe <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
     1ec:	7963      	ldrb	r3, [r4, #5]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d105      	bne.n	1fe <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     1f2:	3308      	adds	r3, #8
     1f4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     1f6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     1f8:	06bb      	lsls	r3, r7, #26
     1fa:	d500      	bpl.n	1fe <_spi_interrupt_handler+0xea>
     1fc:	e08a      	b.n	314 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     1fe:	b26d      	sxtb	r5, r5
     200:	2d00      	cmp	r5, #0
     202:	da00      	bge.n	206 <_spi_interrupt_handler+0xf2>
     204:	e08a      	b.n	31c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <_spi_interrupt_handler+0x220>)
     20a:	881b      	ldrh	r3, [r3, #0]
     20c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     20e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     210:	3b01      	subs	r3, #1
     212:	b29b      	uxth	r3, r3
     214:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     216:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     218:	b29b      	uxth	r3, r3
     21a:	2b00      	cmp	r3, #0
     21c:	d101      	bne.n	222 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     21e:	3301      	adds	r3, #1
     220:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     222:	7963      	ldrb	r3, [r4, #5]
		if (0
     224:	2b01      	cmp	r3, #1
     226:	d0b0      	beq.n	18a <_spi_interrupt_handler+0x76>
     228:	e786      	b.n	138 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     22a:	7850      	ldrb	r0, [r2, #1]
     22c:	0200      	lsls	r0, r0, #8
     22e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     230:	3202      	adds	r2, #2
     232:	62e2      	str	r2, [r4, #44]	; 0x2c
     234:	e790      	b.n	158 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     236:	0020      	movs	r0, r4
     238:	69a3      	ldr	r3, [r4, #24]
     23a:	4798      	blx	r3
     23c:	e7b9      	b.n	1b2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     23e:	7a63      	ldrb	r3, [r4, #9]
     240:	2b01      	cmp	r3, #1
     242:	d027      	beq.n	294 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     244:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     248:	05db      	lsls	r3, r3, #23
     24a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     24c:	b2da      	uxtb	r2, r3
     24e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     250:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     252:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     254:	1c51      	adds	r1, r2, #1
     256:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     258:	79a1      	ldrb	r1, [r4, #6]
     25a:	2901      	cmp	r1, #1
     25c:	d033      	beq.n	2c6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
     25e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     260:	3b01      	subs	r3, #1
     262:	b29b      	uxth	r3, r3
     264:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     266:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     268:	b29b      	uxth	r3, r3
     26a:	2b00      	cmp	r3, #0
     26c:	d1a4      	bne.n	1b8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
     26e:	2200      	movs	r2, #0
     270:	3338      	adds	r3, #56	; 0x38
     272:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     274:	3b34      	subs	r3, #52	; 0x34
     276:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     278:	7a63      	ldrb	r3, [r4, #9]
     27a:	2b02      	cmp	r3, #2
     27c:	d029      	beq.n	2d2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
     27e:	7a63      	ldrb	r3, [r4, #9]
     280:	2b00      	cmp	r3, #0
     282:	d000      	beq.n	286 <_spi_interrupt_handler+0x172>
     284:	e798      	b.n	1b8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     286:	07bb      	lsls	r3, r7, #30
     288:	d400      	bmi.n	28c <_spi_interrupt_handler+0x178>
     28a:	e795      	b.n	1b8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     28c:	0020      	movs	r0, r4
     28e:	6923      	ldr	r3, [r4, #16]
     290:	4798      	blx	r3
     292:	e791      	b.n	1b8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     294:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     298:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     29a:	3b01      	subs	r3, #1
     29c:	b29b      	uxth	r3, r3
     29e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     2a0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     2a2:	b29b      	uxth	r3, r3
     2a4:	2b00      	cmp	r3, #0
     2a6:	d000      	beq.n	2aa <_spi_interrupt_handler+0x196>
     2a8:	e786      	b.n	1b8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     2aa:	3304      	adds	r3, #4
     2ac:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     2ae:	2200      	movs	r2, #0
     2b0:	3334      	adds	r3, #52	; 0x34
     2b2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     2b4:	3b35      	subs	r3, #53	; 0x35
     2b6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     2b8:	07fb      	lsls	r3, r7, #31
     2ba:	d400      	bmi.n	2be <_spi_interrupt_handler+0x1aa>
     2bc:	e77c      	b.n	1b8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     2be:	0020      	movs	r0, r4
     2c0:	68e3      	ldr	r3, [r4, #12]
     2c2:	4798      	blx	r3
     2c4:	e778      	b.n	1b8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     2c6:	0a1b      	lsrs	r3, r3, #8
     2c8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     2ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2cc:	3301      	adds	r3, #1
     2ce:	62a3      	str	r3, [r4, #40]	; 0x28
     2d0:	e7c5      	b.n	25e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     2d2:	077b      	lsls	r3, r7, #29
     2d4:	d400      	bmi.n	2d8 <_spi_interrupt_handler+0x1c4>
     2d6:	e76f      	b.n	1b8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     2d8:	0020      	movs	r0, r4
     2da:	6963      	ldr	r3, [r4, #20]
     2dc:	4798      	blx	r3
     2de:	e76b      	b.n	1b8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     2e0:	0020      	movs	r0, r4
     2e2:	69e3      	ldr	r3, [r4, #28]
     2e4:	4798      	blx	r3
     2e6:	e77b      	b.n	1e0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     2e8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     2ea:	2b01      	cmp	r3, #1
     2ec:	d000      	beq.n	2f0 <_spi_interrupt_handler+0x1dc>
     2ee:	e786      	b.n	1fe <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     2f0:	79e3      	ldrb	r3, [r4, #7]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d000      	beq.n	2f8 <_spi_interrupt_handler+0x1e4>
     2f6:	e782      	b.n	1fe <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     2f8:	3302      	adds	r3, #2
     2fa:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
     2fc:	3301      	adds	r3, #1
     2fe:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     300:	2200      	movs	r2, #0
     302:	3335      	adds	r3, #53	; 0x35
     304:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     306:	07fb      	lsls	r3, r7, #31
     308:	d400      	bmi.n	30c <_spi_interrupt_handler+0x1f8>
     30a:	e76d      	b.n	1e8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     30c:	0020      	movs	r0, r4
     30e:	68e3      	ldr	r3, [r4, #12]
     310:	4798      	blx	r3
     312:	e769      	b.n	1e8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     314:	0020      	movs	r0, r4
     316:	6a23      	ldr	r3, [r4, #32]
     318:	4798      	blx	r3
     31a:	e770      	b.n	1fe <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     31c:	2380      	movs	r3, #128	; 0x80
     31e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     320:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     322:	067b      	lsls	r3, r7, #25
     324:	d400      	bmi.n	328 <_spi_interrupt_handler+0x214>
     326:	e76e      	b.n	206 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     328:	6a63      	ldr	r3, [r4, #36]	; 0x24
     32a:	0020      	movs	r0, r4
     32c:	4798      	blx	r3
}
     32e:	e76a      	b.n	206 <_spi_interrupt_handler+0xf2>
     330:	200003bc 	.word	0x200003bc
     334:	20000368 	.word	0x20000368

00000338 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     338:	4b09      	ldr	r3, [pc, #36]	; (360 <_tcc_get_inst_index+0x28>)
     33a:	4298      	cmp	r0, r3
     33c:	d00c      	beq.n	358 <_tcc_get_inst_index+0x20>
     33e:	4b09      	ldr	r3, [pc, #36]	; (364 <_tcc_get_inst_index+0x2c>)
     340:	4298      	cmp	r0, r3
     342:	d007      	beq.n	354 <_tcc_get_inst_index+0x1c>
     344:	4a08      	ldr	r2, [pc, #32]	; (368 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     346:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     348:	4290      	cmp	r0, r2
     34a:	d001      	beq.n	350 <_tcc_get_inst_index+0x18>
}
     34c:	0018      	movs	r0, r3
     34e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     350:	3302      	adds	r3, #2
     352:	e002      	b.n	35a <_tcc_get_inst_index+0x22>
     354:	2301      	movs	r3, #1
     356:	e000      	b.n	35a <_tcc_get_inst_index+0x22>
     358:	2300      	movs	r3, #0
			return i;
     35a:	b2db      	uxtb	r3, r3
     35c:	e7f6      	b.n	34c <_tcc_get_inst_index+0x14>
     35e:	46c0      	nop			; (mov r8, r8)
     360:	42002000 	.word	0x42002000
     364:	42002400 	.word	0x42002400
     368:	42002800 	.word	0x42002800

0000036c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     36c:	b510      	push	{r4, lr}
     36e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     370:	0008      	movs	r0, r1
     372:	4b4f      	ldr	r3, [pc, #316]	; (4b0 <tcc_get_config_defaults+0x144>)
     374:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     376:	2300      	movs	r3, #0
     378:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     37a:	0080      	lsls	r0, r0, #2
     37c:	4a4d      	ldr	r2, [pc, #308]	; (4b4 <tcc_get_config_defaults+0x148>)
     37e:	5882      	ldr	r2, [r0, r2]
     380:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     382:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     384:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     386:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     388:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     38a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     38c:	61e3      	str	r3, [r4, #28]
     38e:	6223      	str	r3, [r4, #32]
     390:	6263      	str	r3, [r4, #36]	; 0x24
     392:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     394:	7523      	strb	r3, [r4, #20]
     396:	7563      	strb	r3, [r4, #21]
     398:	75a3      	strb	r3, [r4, #22]
     39a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     39c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     39e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     3a0:	7423      	strb	r3, [r4, #16]
     3a2:	7463      	strb	r3, [r4, #17]
     3a4:	74a3      	strb	r3, [r4, #18]
     3a6:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     3a8:	222c      	movs	r2, #44	; 0x2c
     3aa:	54a3      	strb	r3, [r4, r2]
     3ac:	3201      	adds	r2, #1
     3ae:	54a3      	strb	r3, [r4, r2]
     3b0:	3201      	adds	r2, #1
     3b2:	54a3      	strb	r3, [r4, r2]
     3b4:	3201      	adds	r2, #1
     3b6:	54a3      	strb	r3, [r4, r2]
     3b8:	3201      	adds	r2, #1
     3ba:	54a3      	strb	r3, [r4, r2]
     3bc:	3201      	adds	r2, #1
     3be:	54a3      	strb	r3, [r4, r2]
     3c0:	3201      	adds	r2, #1
     3c2:	54a3      	strb	r3, [r4, r2]
     3c4:	3201      	adds	r2, #1
     3c6:	54a3      	strb	r3, [r4, r2]
     3c8:	3201      	adds	r2, #1
     3ca:	54a3      	strb	r3, [r4, r2]
     3cc:	3201      	adds	r2, #1
     3ce:	54a3      	strb	r3, [r4, r2]
     3d0:	3201      	adds	r2, #1
     3d2:	54a3      	strb	r3, [r4, r2]
     3d4:	3201      	adds	r2, #1
     3d6:	54a3      	strb	r3, [r4, r2]
     3d8:	3201      	adds	r2, #1
     3da:	54a3      	strb	r3, [r4, r2]
     3dc:	3201      	adds	r2, #1
     3de:	54a3      	strb	r3, [r4, r2]
     3e0:	3201      	adds	r2, #1
     3e2:	54a3      	strb	r3, [r4, r2]
     3e4:	3201      	adds	r2, #1
     3e6:	54a3      	strb	r3, [r4, r2]
     3e8:	3201      	adds	r2, #1
     3ea:	54a3      	strb	r3, [r4, r2]
     3ec:	3201      	adds	r2, #1
     3ee:	54a3      	strb	r3, [r4, r2]
     3f0:	3201      	adds	r2, #1
     3f2:	54a3      	strb	r3, [r4, r2]
     3f4:	3201      	adds	r2, #1
     3f6:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     3f8:	3201      	adds	r2, #1
     3fa:	54a3      	strb	r3, [r4, r2]
     3fc:	3201      	adds	r2, #1
     3fe:	54a3      	strb	r3, [r4, r2]
     400:	3201      	adds	r2, #1
     402:	54a3      	strb	r3, [r4, r2]
     404:	3201      	adds	r2, #1
     406:	54a3      	strb	r3, [r4, r2]
     408:	3201      	adds	r2, #1
     40a:	54a3      	strb	r3, [r4, r2]
     40c:	3201      	adds	r2, #1
     40e:	54a3      	strb	r3, [r4, r2]
     410:	3201      	adds	r2, #1
     412:	54a3      	strb	r3, [r4, r2]
     414:	3201      	adds	r2, #1
     416:	54a3      	strb	r3, [r4, r2]
     418:	3201      	adds	r2, #1
     41a:	54a3      	strb	r3, [r4, r2]
     41c:	3201      	adds	r2, #1
     41e:	54a3      	strb	r3, [r4, r2]
     420:	3201      	adds	r2, #1
     422:	54a3      	strb	r3, [r4, r2]
     424:	3201      	adds	r2, #1
     426:	54a3      	strb	r3, [r4, r2]
     428:	3201      	adds	r2, #1
     42a:	54a3      	strb	r3, [r4, r2]
     42c:	3201      	adds	r2, #1
     42e:	54a3      	strb	r3, [r4, r2]
     430:	3201      	adds	r2, #1
     432:	54a3      	strb	r3, [r4, r2]
     434:	3201      	adds	r2, #1
     436:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     438:	3201      	adds	r2, #1
     43a:	54a3      	strb	r3, [r4, r2]
     43c:	3201      	adds	r2, #1
     43e:	54a3      	strb	r3, [r4, r2]
     440:	3201      	adds	r2, #1
     442:	54a3      	strb	r3, [r4, r2]
     444:	3201      	adds	r2, #1
     446:	54a3      	strb	r3, [r4, r2]
     448:	3201      	adds	r2, #1
     44a:	54a3      	strb	r3, [r4, r2]
     44c:	3201      	adds	r2, #1
     44e:	54a3      	strb	r3, [r4, r2]
     450:	3201      	adds	r2, #1
     452:	54a3      	strb	r3, [r4, r2]
     454:	3201      	adds	r2, #1
     456:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     458:	3241      	adds	r2, #65	; 0x41
     45a:	54a3      	strb	r3, [r4, r2]
     45c:	65a3      	str	r3, [r4, #88]	; 0x58
     45e:	67a3      	str	r3, [r4, #120]	; 0x78
     460:	3201      	adds	r2, #1
     462:	54a3      	strb	r3, [r4, r2]
     464:	65e3      	str	r3, [r4, #92]	; 0x5c
     466:	67e3      	str	r3, [r4, #124]	; 0x7c
     468:	3201      	adds	r2, #1
     46a:	54a3      	strb	r3, [r4, r2]
     46c:	6623      	str	r3, [r4, #96]	; 0x60
     46e:	3a1a      	subs	r2, #26
     470:	50a3      	str	r3, [r4, r2]
     472:	321b      	adds	r2, #27
     474:	54a3      	strb	r3, [r4, r2]
     476:	6663      	str	r3, [r4, #100]	; 0x64
     478:	3a17      	subs	r2, #23
     47a:	50a3      	str	r3, [r4, r2]
     47c:	3218      	adds	r2, #24
     47e:	54a3      	strb	r3, [r4, r2]
     480:	66a3      	str	r3, [r4, #104]	; 0x68
     482:	3a14      	subs	r2, #20
     484:	50a3      	str	r3, [r4, r2]
     486:	3215      	adds	r2, #21
     488:	54a3      	strb	r3, [r4, r2]
     48a:	66e3      	str	r3, [r4, #108]	; 0x6c
     48c:	3a11      	subs	r2, #17
     48e:	50a3      	str	r3, [r4, r2]
     490:	3212      	adds	r2, #18
     492:	54a3      	strb	r3, [r4, r2]
     494:	6723      	str	r3, [r4, #112]	; 0x70
     496:	3a0e      	subs	r2, #14
     498:	50a3      	str	r3, [r4, r2]
     49a:	320f      	adds	r2, #15
     49c:	54a3      	strb	r3, [r4, r2]
     49e:	6763      	str	r3, [r4, #116]	; 0x74
     4a0:	3a0b      	subs	r2, #11
     4a2:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     4a4:	2101      	movs	r1, #1
     4a6:	320c      	adds	r2, #12
     4a8:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     4aa:	3201      	adds	r2, #1
     4ac:	54a3      	strb	r3, [r4, r2]
}
     4ae:	bd10      	pop	{r4, pc}
     4b0:	00000339 	.word	0x00000339
     4b4:	0000a320 	.word	0x0000a320

000004b8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ba:	46de      	mov	lr, fp
     4bc:	4657      	mov	r7, sl
     4be:	464e      	mov	r6, r9
     4c0:	4645      	mov	r5, r8
     4c2:	b5e0      	push	{r5, r6, r7, lr}
     4c4:	b091      	sub	sp, #68	; 0x44
     4c6:	9001      	str	r0, [sp, #4]
     4c8:	000c      	movs	r4, r1
     4ca:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     4cc:	0008      	movs	r0, r1
     4ce:	4bc3      	ldr	r3, [pc, #780]	; (7dc <tcc_init+0x324>)
     4d0:	4798      	blx	r3
     4d2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4d4:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4d6:	48c2      	ldr	r0, [pc, #776]	; (7e0 <tcc_init+0x328>)
     4d8:	6a02      	ldr	r2, [r0, #32]
     4da:	009e      	lsls	r6, r3, #2
     4dc:	4fc1      	ldr	r7, [pc, #772]	; (7e4 <tcc_init+0x32c>)
     4de:	59f7      	ldr	r7, [r6, r7]
     4e0:	433a      	orrs	r2, r7
     4e2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     4e4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     4e6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     4e8:	0792      	lsls	r2, r2, #30
     4ea:	d506      	bpl.n	4fa <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     4ec:	b011      	add	sp, #68	; 0x44
     4ee:	bc3c      	pop	{r2, r3, r4, r5}
     4f0:	4690      	mov	r8, r2
     4f2:	4699      	mov	r9, r3
     4f4:	46a2      	mov	sl, r4
     4f6:	46ab      	mov	fp, r5
     4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     4fa:	6822      	ldr	r2, [r4, #0]
     4fc:	2701      	movs	r7, #1
     4fe:	4017      	ands	r7, r2
     500:	d1f4      	bne.n	4ec <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     502:	48b9      	ldr	r0, [pc, #740]	; (7e8 <tcc_init+0x330>)
     504:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     506:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     508:	682e      	ldr	r6, [r5, #0]
     50a:	42b2      	cmp	r2, r6
     50c:	d3ee      	bcc.n	4ec <tcc_init+0x34>
		|| (config->counter.period > count_max)
     50e:	686e      	ldr	r6, [r5, #4]
     510:	42b2      	cmp	r2, r6
     512:	d3eb      	bcc.n	4ec <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     514:	69e8      	ldr	r0, [r5, #28]
     516:	4282      	cmp	r2, r0
     518:	d200      	bcs.n	51c <tcc_init+0x64>
     51a:	e1b9      	b.n	890 <tcc_init+0x3d8>
     51c:	6a28      	ldr	r0, [r5, #32]
     51e:	4282      	cmp	r2, r0
     520:	d200      	bcs.n	524 <tcc_init+0x6c>
     522:	e1b7      	b.n	894 <tcc_init+0x3dc>
     524:	6a68      	ldr	r0, [r5, #36]	; 0x24
     526:	4282      	cmp	r2, r0
     528:	d200      	bcs.n	52c <tcc_init+0x74>
     52a:	e1b5      	b.n	898 <tcc_init+0x3e0>
     52c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     52e:	4282      	cmp	r2, r0
     530:	d200      	bcs.n	534 <tcc_init+0x7c>
     532:	e1b3      	b.n	89c <tcc_init+0x3e4>
     534:	2298      	movs	r2, #152	; 0x98
     536:	4694      	mov	ip, r2
     538:	44ac      	add	ip, r5
     53a:	4662      	mov	r2, ip
     53c:	9208      	str	r2, [sp, #32]
     53e:	2000      	movs	r0, #0
     540:	e003      	b.n	54a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     542:	3001      	adds	r0, #1
     544:	3201      	adds	r2, #1
     546:	2808      	cmp	r0, #8
     548:	d008      	beq.n	55c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     54a:	7816      	ldrb	r6, [r2, #0]
     54c:	2e00      	cmp	r6, #0
     54e:	d0f8      	beq.n	542 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     550:	4ea6      	ldr	r6, [pc, #664]	; (7ec <tcc_init+0x334>)
     552:	5c76      	ldrb	r6, [r6, r1]
     554:	4286      	cmp	r6, r0
     556:	dcf4      	bgt.n	542 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     558:	2017      	movs	r0, #23
     55a:	e7c7      	b.n	4ec <tcc_init+0x34>
     55c:	2200      	movs	r2, #0
     55e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     560:	2080      	movs	r0, #128	; 0x80
     562:	0440      	lsls	r0, r0, #17
     564:	4684      	mov	ip, r0
     566:	e002      	b.n	56e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     568:	3201      	adds	r2, #1
     56a:	2a04      	cmp	r2, #4
     56c:	d00e      	beq.n	58c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     56e:	18a8      	adds	r0, r5, r2
     570:	7c00      	ldrb	r0, [r0, #16]
     572:	2801      	cmp	r0, #1
     574:	d1f8      	bne.n	568 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     576:	489e      	ldr	r0, [pc, #632]	; (7f0 <tcc_init+0x338>)
     578:	5c40      	ldrb	r0, [r0, r1]
     57a:	4290      	cmp	r0, r2
     57c:	da00      	bge.n	580 <tcc_init+0xc8>
     57e:	e18f      	b.n	8a0 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     580:	4660      	mov	r0, ip
     582:	4090      	lsls	r0, r2
     584:	9e02      	ldr	r6, [sp, #8]
     586:	4306      	orrs	r6, r0
     588:	9602      	str	r6, [sp, #8]
     58a:	e7ed      	b.n	568 <tcc_init+0xb0>
	if (config->run_in_standby) {
     58c:	329d      	adds	r2, #157	; 0x9d
     58e:	5caa      	ldrb	r2, [r5, r2]
     590:	2a00      	cmp	r2, #0
     592:	d004      	beq.n	59e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     594:	2280      	movs	r2, #128	; 0x80
     596:	0112      	lsls	r2, r2, #4
     598:	9902      	ldr	r1, [sp, #8]
     59a:	4311      	orrs	r1, r2
     59c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     59e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     5a0:	1e51      	subs	r1, r2, #1
     5a2:	418a      	sbcs	r2, r1
     5a4:	0092      	lsls	r2, r2, #2
     5a6:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     5a8:	7a6a      	ldrb	r2, [r5, #9]
     5aa:	2a01      	cmp	r2, #1
     5ac:	d022      	beq.n	5f4 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     5ae:	4a90      	ldr	r2, [pc, #576]	; (7f0 <tcc_init+0x338>)
     5b0:	5cd2      	ldrb	r2, [r2, r3]
     5b2:	0011      	movs	r1, r2
     5b4:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     5b6:	2235      	movs	r2, #53	; 0x35
     5b8:	5caa      	ldrb	r2, [r5, r2]
     5ba:	428a      	cmp	r2, r1
     5bc:	d300      	bcc.n	5c0 <tcc_init+0x108>
     5be:	e179      	b.n	8b4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     5c0:	212c      	movs	r1, #44	; 0x2c
     5c2:	5c69      	ldrb	r1, [r5, r1]
     5c4:	290f      	cmp	r1, #15
     5c6:	d900      	bls.n	5ca <tcc_init+0x112>
     5c8:	e174      	b.n	8b4 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5ca:	7b28      	ldrb	r0, [r5, #12]
     5cc:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ce:	7ae8      	ldrb	r0, [r5, #11]
     5d0:	900b      	str	r0, [sp, #44]	; 0x2c
     5d2:	202d      	movs	r0, #45	; 0x2d
     5d4:	4682      	mov	sl, r0
     5d6:	44aa      	add	sl, r5
     5d8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     5da:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     5dc:	ae0e      	add	r6, sp, #56	; 0x38
     5de:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     5e0:	26c0      	movs	r6, #192	; 0xc0
     5e2:	0136      	lsls	r6, r6, #4
     5e4:	46b1      	mov	r9, r6
     5e6:	4684      	mov	ip, r0
     5e8:	46a0      	mov	r8, r4
     5ea:	0028      	movs	r0, r5
     5ec:	4655      	mov	r5, sl
     5ee:	9309      	str	r3, [sp, #36]	; 0x24
     5f0:	4682      	mov	sl, r0
     5f2:	e035      	b.n	660 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     5f4:	9906      	ldr	r1, [sp, #24]
     5f6:	4311      	orrs	r1, r2
     5f8:	9106      	str	r1, [sp, #24]
     5fa:	e7d8      	b.n	5ae <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     5fc:	0292      	lsls	r2, r2, #10
     5fe:	464f      	mov	r7, r9
     600:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     602:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     604:	7919      	ldrb	r1, [r3, #4]
     606:	468b      	mov	fp, r1
     608:	2103      	movs	r1, #3
     60a:	465f      	mov	r7, fp
     60c:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     60e:	430a      	orrs	r2, r1
     610:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     612:	795a      	ldrb	r2, [r3, #5]
     614:	0152      	lsls	r2, r2, #5
     616:	2160      	movs	r1, #96	; 0x60
     618:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     61a:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     61c:	7999      	ldrb	r1, [r3, #6]
     61e:	0209      	lsls	r1, r1, #8
     620:	26c0      	movs	r6, #192	; 0xc0
     622:	00b6      	lsls	r6, r6, #2
     624:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     626:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     628:	79da      	ldrb	r2, [r3, #7]
     62a:	0312      	lsls	r2, r2, #12
     62c:	21e0      	movs	r1, #224	; 0xe0
     62e:	01c9      	lsls	r1, r1, #7
     630:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     632:	4316      	orrs	r6, r2
     634:	4334      	orrs	r4, r6
     636:	9a03      	ldr	r2, [sp, #12]
     638:	4314      	orrs	r4, r2
     63a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     63c:	4662      	mov	r2, ip
     63e:	9907      	ldr	r1, [sp, #28]
     640:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     642:	2a04      	cmp	r2, #4
     644:	d02a      	beq.n	69c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     646:	7c9a      	ldrb	r2, [r3, #18]
     648:	9905      	ldr	r1, [sp, #20]
     64a:	4291      	cmp	r1, r2
     64c:	d800      	bhi.n	650 <tcc_init+0x198>
     64e:	e131      	b.n	8b4 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     650:	7a59      	ldrb	r1, [r3, #9]
     652:	350a      	adds	r5, #10
     654:	2304      	movs	r3, #4
     656:	469b      	mov	fp, r3
     658:	44dc      	add	ip, fp
     65a:	290f      	cmp	r1, #15
     65c:	d900      	bls.n	660 <tcc_init+0x1a8>
     65e:	e129      	b.n	8b4 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     660:	0609      	lsls	r1, r1, #24
     662:	23f0      	movs	r3, #240	; 0xf0
     664:	051b      	lsls	r3, r3, #20
     666:	4019      	ands	r1, r3
     668:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     66a:	782e      	ldrb	r6, [r5, #0]
     66c:	0436      	lsls	r6, r6, #16
     66e:	20ff      	movs	r0, #255	; 0xff
     670:	0400      	lsls	r0, r0, #16
     672:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     674:	7868      	ldrb	r0, [r5, #1]
     676:	2480      	movs	r4, #128	; 0x80
     678:	2800      	cmp	r0, #0
     67a:	d100      	bne.n	67e <tcc_init+0x1c6>
     67c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     67e:	7898      	ldrb	r0, [r3, #2]
     680:	2708      	movs	r7, #8
     682:	9703      	str	r7, [sp, #12]
     684:	2800      	cmp	r0, #0
     686:	d101      	bne.n	68c <tcc_init+0x1d4>
     688:	9804      	ldr	r0, [sp, #16]
     68a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     68c:	78d8      	ldrb	r0, [r3, #3]
     68e:	4683      	mov	fp, r0
     690:	2010      	movs	r0, #16
     692:	465f      	mov	r7, fp
     694:	2f00      	cmp	r7, #0
     696:	d1b1      	bne.n	5fc <tcc_init+0x144>
     698:	9804      	ldr	r0, [sp, #16]
     69a:	e7af      	b.n	5fc <tcc_init+0x144>
     69c:	4644      	mov	r4, r8
     69e:	4655      	mov	r5, sl
     6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     6a2:	4a52      	ldr	r2, [pc, #328]	; (7ec <tcc_init+0x334>)
     6a4:	5cd2      	ldrb	r2, [r2, r3]
     6a6:	4691      	mov	r9, r2
     6a8:	4651      	mov	r1, sl
     6aa:	3150      	adds	r1, #80	; 0x50
     6ac:	4650      	mov	r0, sl
     6ae:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     6b0:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     6b2:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     6b4:	2601      	movs	r6, #1
     6b6:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     6b8:	2602      	movs	r6, #2
     6ba:	36ff      	adds	r6, #255	; 0xff
     6bc:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     6be:	2680      	movs	r6, #128	; 0x80
     6c0:	0276      	lsls	r6, r6, #9
     6c2:	46b0      	mov	r8, r6
     6c4:	46a4      	mov	ip, r4
     6c6:	001c      	movs	r4, r3
     6c8:	464b      	mov	r3, r9
     6ca:	e00f      	b.n	6ec <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     6cc:	7806      	ldrb	r6, [r0, #0]
     6ce:	2e00      	cmp	r6, #0
     6d0:	d007      	beq.n	6e2 <tcc_init+0x22a>
			if (i >= ow_num) {
     6d2:	4293      	cmp	r3, r2
     6d4:	d800      	bhi.n	6d8 <tcc_init+0x220>
     6d6:	e0e7      	b.n	8a8 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     6d8:	2e02      	cmp	r6, #2
     6da:	d014      	beq.n	706 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     6dc:	4656      	mov	r6, sl
     6de:	4096      	lsls	r6, r2
     6e0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     6e2:	3201      	adds	r2, #1
     6e4:	3101      	adds	r1, #1
     6e6:	3002      	adds	r0, #2
     6e8:	2a08      	cmp	r2, #8
     6ea:	d010      	beq.n	70e <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     6ec:	780e      	ldrb	r6, [r1, #0]
     6ee:	2e00      	cmp	r6, #0
     6f0:	d0ec      	beq.n	6cc <tcc_init+0x214>
			if (i >= ow_num) {
     6f2:	4293      	cmp	r3, r2
     6f4:	d800      	bhi.n	6f8 <tcc_init+0x240>
     6f6:	e0d5      	b.n	8a4 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     6f8:	4646      	mov	r6, r8
     6fa:	4096      	lsls	r6, r2
     6fc:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     6fe:	7806      	ldrb	r6, [r0, #0]
     700:	2e00      	cmp	r6, #0
     702:	d1e9      	bne.n	6d8 <tcc_init+0x220>
     704:	e7ed      	b.n	6e2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     706:	465e      	mov	r6, fp
     708:	4096      	lsls	r6, r2
     70a:	4337      	orrs	r7, r6
     70c:	e7e9      	b.n	6e2 <tcc_init+0x22a>
     70e:	4699      	mov	r9, r3
     710:	0023      	movs	r3, r4
     712:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     714:	7e6a      	ldrb	r2, [r5, #25]
     716:	0112      	lsls	r2, r2, #4
     718:	2130      	movs	r1, #48	; 0x30
     71a:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     71c:	7e28      	ldrb	r0, [r5, #24]
     71e:	2207      	movs	r2, #7
     720:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     722:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     724:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     726:	2080      	movs	r0, #128	; 0x80
     728:	0240      	lsls	r0, r0, #9
     72a:	000e      	movs	r6, r1
     72c:	e002      	b.n	734 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     72e:	3201      	adds	r2, #1
     730:	2a04      	cmp	r2, #4
     732:	d00b      	beq.n	74c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     734:	18a9      	adds	r1, r5, r2
     736:	7d09      	ldrb	r1, [r1, #20]
     738:	2900      	cmp	r1, #0
     73a:	d0f8      	beq.n	72e <tcc_init+0x276>
			if (n >= cc_num) {
     73c:	9905      	ldr	r1, [sp, #20]
     73e:	4291      	cmp	r1, r2
     740:	dc00      	bgt.n	744 <tcc_init+0x28c>
     742:	e0b3      	b.n	8ac <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     744:	0001      	movs	r1, r0
     746:	4091      	lsls	r1, r2
     748:	430e      	orrs	r6, r1
     74a:	e7f0      	b.n	72e <tcc_init+0x276>
     74c:	46b2      	mov	sl, r6
     74e:	9801      	ldr	r0, [sp, #4]
     750:	0002      	movs	r2, r0
     752:	3204      	adds	r2, #4
     754:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     756:	2100      	movs	r1, #0
     758:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     75a:	4282      	cmp	r2, r0
     75c:	d1fc      	bne.n	758 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     75e:	2200      	movs	r2, #0
     760:	9801      	ldr	r0, [sp, #4]
     762:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     764:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     766:	0099      	lsls	r1, r3, #2
     768:	4a22      	ldr	r2, [pc, #136]	; (7f4 <tcc_init+0x33c>)
     76a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     76c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     76e:	22a0      	movs	r2, #160	; 0xa0
     770:	5ca9      	ldrb	r1, [r5, r2]
     772:	3a64      	subs	r2, #100	; 0x64
     774:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     776:	a90d      	add	r1, sp, #52	; 0x34
     778:	7aaa      	ldrb	r2, [r5, #10]
     77a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     77c:	4a1e      	ldr	r2, [pc, #120]	; (7f8 <tcc_init+0x340>)
     77e:	5cd6      	ldrb	r6, [r2, r3]
     780:	0030      	movs	r0, r6
     782:	4b1e      	ldr	r3, [pc, #120]	; (7fc <tcc_init+0x344>)
     784:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     786:	0030      	movs	r0, r6
     788:	4b1d      	ldr	r3, [pc, #116]	; (800 <tcc_init+0x348>)
     78a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     78c:	464b      	mov	r3, r9
     78e:	2b00      	cmp	r3, #0
     790:	dd3c      	ble.n	80c <tcc_init+0x354>
     792:	002e      	movs	r6, r5
     794:	3658      	adds	r6, #88	; 0x58
     796:	3398      	adds	r3, #152	; 0x98
     798:	4698      	mov	r8, r3
     79a:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     79c:	2301      	movs	r3, #1
     79e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     7a0:	46ab      	mov	fp, r5
     7a2:	4645      	mov	r5, r8
     7a4:	46a0      	mov	r8, r4
     7a6:	9c08      	ldr	r4, [sp, #32]
     7a8:	e003      	b.n	7b2 <tcc_init+0x2fa>
     7aa:	3401      	adds	r4, #1
     7ac:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     7ae:	42ac      	cmp	r4, r5
     7b0:	d02a      	beq.n	808 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     7b2:	7823      	ldrb	r3, [r4, #0]
     7b4:	2b00      	cmp	r3, #0
     7b6:	d0f8      	beq.n	7aa <tcc_init+0x2f2>
     7b8:	ab0c      	add	r3, sp, #48	; 0x30
     7ba:	464a      	mov	r2, r9
     7bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     7be:	2300      	movs	r3, #0
     7c0:	aa0c      	add	r2, sp, #48	; 0x30
     7c2:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     7c4:	0013      	movs	r3, r2
     7c6:	2220      	movs	r2, #32
     7c8:	18b2      	adds	r2, r6, r2
     7ca:	7812      	ldrb	r2, [r2, #0]
     7cc:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     7ce:	464a      	mov	r2, r9
     7d0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     7d2:	7830      	ldrb	r0, [r6, #0]
     7d4:	0019      	movs	r1, r3
     7d6:	4b0b      	ldr	r3, [pc, #44]	; (804 <tcc_init+0x34c>)
     7d8:	4798      	blx	r3
     7da:	e7e6      	b.n	7aa <tcc_init+0x2f2>
     7dc:	00000339 	.word	0x00000339
     7e0:	40000400 	.word	0x40000400
     7e4:	0000a30c 	.word	0x0000a30c
     7e8:	0000a320 	.word	0x0000a320
     7ec:	0000a32c 	.word	0x0000a32c
     7f0:	0000a318 	.word	0x0000a318
     7f4:	2000036c 	.word	0x2000036c
     7f8:	0000a31c 	.word	0x0000a31c
     7fc:	00008aad 	.word	0x00008aad
     800:	00008a21 	.word	0x00008a21
     804:	00008ba5 	.word	0x00008ba5
     808:	4644      	mov	r4, r8
     80a:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     80e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     812:	0212      	lsls	r2, r2, #8
     814:	4313      	orrs	r3, r2
     816:	9a02      	ldr	r2, [sp, #8]
     818:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     81a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     81c:	2204      	movs	r2, #4
     81e:	68a3      	ldr	r3, [r4, #8]
     820:	421a      	tst	r2, r3
     822:	d1fc      	bne.n	81e <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     824:	23ff      	movs	r3, #255	; 0xff
     826:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     828:	2204      	movs	r2, #4
     82a:	68a3      	ldr	r3, [r4, #8]
     82c:	421a      	tst	r2, r3
     82e:	d1fc      	bne.n	82a <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     830:	466b      	mov	r3, sp
     832:	7e1b      	ldrb	r3, [r3, #24]
     834:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     838:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     83a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     83c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     83e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     840:	4a1d      	ldr	r2, [pc, #116]	; (8b8 <tcc_init+0x400>)
     842:	68a3      	ldr	r3, [r4, #8]
     844:	4213      	tst	r3, r2
     846:	d1fc      	bne.n	842 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     848:	4653      	mov	r3, sl
     84a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     84c:	2210      	movs	r2, #16
     84e:	68a3      	ldr	r3, [r4, #8]
     850:	421a      	tst	r2, r3
     852:	d1fc      	bne.n	84e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     854:	682b      	ldr	r3, [r5, #0]
     856:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     858:	4a18      	ldr	r2, [pc, #96]	; (8bc <tcc_init+0x404>)
     85a:	68a3      	ldr	r3, [r4, #8]
     85c:	4213      	tst	r3, r2
     85e:	d1fc      	bne.n	85a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     860:	686b      	ldr	r3, [r5, #4]
     862:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     864:	9805      	ldr	r0, [sp, #20]
     866:	2800      	cmp	r0, #0
     868:	dd22      	ble.n	8b0 <tcc_init+0x3f8>
     86a:	351c      	adds	r5, #28
     86c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     86e:	4e14      	ldr	r6, [pc, #80]	; (8c0 <tcc_init+0x408>)
     870:	0032      	movs	r2, r6
     872:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     874:	68a3      	ldr	r3, [r4, #8]
     876:	421a      	tst	r2, r3
     878:	d1fc      	bne.n	874 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     87a:	cd04      	ldmia	r5!, {r2}
     87c:	000b      	movs	r3, r1
     87e:	3310      	adds	r3, #16
     880:	009b      	lsls	r3, r3, #2
     882:	18e3      	adds	r3, r4, r3
     884:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     886:	3101      	adds	r1, #1
     888:	4288      	cmp	r0, r1
     88a:	dcf1      	bgt.n	870 <tcc_init+0x3b8>
	return STATUS_OK;
     88c:	2000      	movs	r0, #0
     88e:	e62d      	b.n	4ec <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     890:	2017      	movs	r0, #23
     892:	e62b      	b.n	4ec <tcc_init+0x34>
     894:	2017      	movs	r0, #23
     896:	e629      	b.n	4ec <tcc_init+0x34>
     898:	2017      	movs	r0, #23
     89a:	e627      	b.n	4ec <tcc_init+0x34>
     89c:	2017      	movs	r0, #23
     89e:	e625      	b.n	4ec <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     8a0:	2017      	movs	r0, #23
     8a2:	e623      	b.n	4ec <tcc_init+0x34>
			if (i >= ow_num) {
     8a4:	2017      	movs	r0, #23
     8a6:	e621      	b.n	4ec <tcc_init+0x34>
			if (i >= ow_num) {
     8a8:	2017      	movs	r0, #23
     8aa:	e61f      	b.n	4ec <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     8ac:	2017      	movs	r0, #23
     8ae:	e61d      	b.n	4ec <tcc_init+0x34>
	return STATUS_OK;
     8b0:	2000      	movs	r0, #0
     8b2:	e61b      	b.n	4ec <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     8b4:	2017      	movs	r0, #23
     8b6:	e619      	b.n	4ec <tcc_init+0x34>
     8b8:	00020040 	.word	0x00020040
     8bc:	00040080 	.word	0x00040080
     8c0:	00080100 	.word	0x00080100

000008c4 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     8c4:	0092      	lsls	r2, r2, #2
     8c6:	1883      	adds	r3, r0, r2
     8c8:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     8ca:	4b03      	ldr	r3, [pc, #12]	; (8d8 <tcc_register_callback+0x14>)
     8cc:	58d3      	ldr	r3, [r2, r3]
     8ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
     8d0:	4313      	orrs	r3, r2
     8d2:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     8d4:	2000      	movs	r0, #0
     8d6:	4770      	bx	lr
     8d8:	0000a330 	.word	0x0000a330

000008dc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
     8de:	0004      	movs	r4, r0
     8e0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     8e2:	6800      	ldr	r0, [r0, #0]
     8e4:	4b09      	ldr	r3, [pc, #36]	; (90c <tcc_enable_callback+0x30>)
     8e6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     8e8:	4b09      	ldr	r3, [pc, #36]	; (910 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8ea:	5c1b      	ldrb	r3, [r3, r0]
     8ec:	221f      	movs	r2, #31
     8ee:	401a      	ands	r2, r3
     8f0:	2301      	movs	r3, #1
     8f2:	4093      	lsls	r3, r2
     8f4:	4a07      	ldr	r2, [pc, #28]	; (914 <tcc_enable_callback+0x38>)
     8f6:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     8f8:	00ad      	lsls	r5, r5, #2
     8fa:	4b07      	ldr	r3, [pc, #28]	; (918 <tcc_enable_callback+0x3c>)
     8fc:	58ea      	ldr	r2, [r5, r3]
     8fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     900:	4313      	orrs	r3, r2
     902:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     904:	6823      	ldr	r3, [r4, #0]
     906:	629a      	str	r2, [r3, #40]	; 0x28
}
     908:	bd70      	pop	{r4, r5, r6, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	00000339 	.word	0x00000339
     910:	0000a360 	.word	0x0000a360
     914:	e000e100 	.word	0xe000e100
     918:	0000a330 	.word	0x0000a330

0000091c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
     91e:	46c6      	mov	lr, r8
     920:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     922:	0080      	lsls	r0, r0, #2
     924:	4b0e      	ldr	r3, [pc, #56]	; (960 <_tcc_interrupt_handler+0x44>)
     926:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     928:	683b      	ldr	r3, [r7, #0]
     92a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     92e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     930:	4013      	ands	r3, r2
     932:	401e      	ands	r6, r3
     934:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     936:	4b0b      	ldr	r3, [pc, #44]	; (964 <_tcc_interrupt_handler+0x48>)
     938:	4698      	mov	r8, r3
     93a:	e002      	b.n	942 <_tcc_interrupt_handler+0x26>
     93c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     93e:	2c30      	cmp	r4, #48	; 0x30
     940:	d00a      	beq.n	958 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     942:	4643      	mov	r3, r8
     944:	58e5      	ldr	r5, [r4, r3]
     946:	4235      	tst	r5, r6
     948:	d0f8      	beq.n	93c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     94a:	193b      	adds	r3, r7, r4
     94c:	685b      	ldr	r3, [r3, #4]
     94e:	0038      	movs	r0, r7
     950:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     952:	683b      	ldr	r3, [r7, #0]
     954:	62dd      	str	r5, [r3, #44]	; 0x2c
     956:	e7f1      	b.n	93c <_tcc_interrupt_handler+0x20>
		}
	}
}
     958:	bc04      	pop	{r2}
     95a:	4690      	mov	r8, r2
     95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	2000036c 	.word	0x2000036c
     964:	0000a330 	.word	0x0000a330

00000968 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     968:	b510      	push	{r4, lr}
     96a:	2000      	movs	r0, #0
     96c:	4b01      	ldr	r3, [pc, #4]	; (974 <TCC0_Handler+0xc>)
     96e:	4798      	blx	r3
     970:	bd10      	pop	{r4, pc}
     972:	46c0      	nop			; (mov r8, r8)
     974:	0000091d 	.word	0x0000091d

00000978 <TCC1_Handler>:
     978:	b510      	push	{r4, lr}
     97a:	2001      	movs	r0, #1
     97c:	4b01      	ldr	r3, [pc, #4]	; (984 <TCC1_Handler+0xc>)
     97e:	4798      	blx	r3
     980:	bd10      	pop	{r4, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	0000091d 	.word	0x0000091d

00000988 <TCC2_Handler>:
     988:	b510      	push	{r4, lr}
     98a:	2002      	movs	r0, #2
     98c:	4b01      	ldr	r3, [pc, #4]	; (994 <TCC2_Handler+0xc>)
     98e:	4798      	blx	r3
     990:	bd10      	pop	{r4, pc}
     992:	46c0      	nop			; (mov r8, r8)
     994:	0000091d 	.word	0x0000091d

00000998 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     998:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     99a:	4b07      	ldr	r3, [pc, #28]	; (9b8 <sd_mmc_configure_slot+0x20>)
     99c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     99e:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     9a0:	5ccb      	ldrb	r3, [r1, r3]
     9a2:	1e5a      	subs	r2, r3, #1
     9a4:	4193      	sbcs	r3, r2
     9a6:	b2db      	uxtb	r3, r3
     9a8:	7c4a      	ldrb	r2, [r1, #17]
     9aa:	6809      	ldr	r1, [r1, #0]
     9ac:	4803      	ldr	r0, [pc, #12]	; (9bc <sd_mmc_configure_slot+0x24>)
     9ae:	7800      	ldrb	r0, [r0, #0]
     9b0:	4c03      	ldr	r4, [pc, #12]	; (9c0 <sd_mmc_configure_slot+0x28>)
     9b2:	47a0      	blx	r4
}
     9b4:	bd10      	pop	{r4, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	200001a8 	.word	0x200001a8
     9bc:	200001b1 	.word	0x200001b1
     9c0:	0000829d 	.word	0x0000829d

000009c4 <sd_mmc_select_slot>:
{
     9c4:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     9c6:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     9c8:	2800      	cmp	r0, #0
     9ca:	d001      	beq.n	9d0 <sd_mmc_select_slot+0xc>
}
     9cc:	0018      	movs	r0, r3
     9ce:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     9d0:	4b40      	ldr	r3, [pc, #256]	; (ad4 <sd_mmc_select_slot+0x110>)
     9d2:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9d4:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9d8:	2a00      	cmp	r2, #0
     9da:	d104      	bne.n	9e6 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     9dc:	094b      	lsrs	r3, r1, #5
     9de:	01db      	lsls	r3, r3, #7
     9e0:	4a3d      	ldr	r2, [pc, #244]	; (ad8 <sd_mmc_select_slot+0x114>)
     9e2:	4694      	mov	ip, r2
     9e4:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     9e6:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9e8:	221f      	movs	r2, #31
     9ea:	400a      	ands	r2, r1
     9ec:	2301      	movs	r3, #1
     9ee:	4093      	lsls	r3, r2
     9f0:	4218      	tst	r0, r3
     9f2:	d010      	beq.n	a16 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     9f4:	4b37      	ldr	r3, [pc, #220]	; (ad4 <sd_mmc_select_slot+0x110>)
     9f6:	7b9b      	ldrb	r3, [r3, #14]
     9f8:	2b01      	cmp	r3, #1
     9fa:	d004      	beq.n	a06 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     9fc:	2204      	movs	r2, #4
     9fe:	4b35      	ldr	r3, [pc, #212]	; (ad4 <sd_mmc_select_slot+0x110>)
     a00:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     a02:	2302      	movs	r3, #2
     a04:	e7e2      	b.n	9cc <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     a06:	4b35      	ldr	r3, [pc, #212]	; (adc <sd_mmc_select_slot+0x118>)
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d0f6      	beq.n	9fc <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     a0e:	2200      	movs	r2, #0
     a10:	4b33      	ldr	r3, [pc, #204]	; (ae0 <sd_mmc_select_slot+0x11c>)
     a12:	601a      	str	r2, [r3, #0]
     a14:	e7f2      	b.n	9fc <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     a16:	4b2f      	ldr	r3, [pc, #188]	; (ad4 <sd_mmc_select_slot+0x110>)
     a18:	7b9a      	ldrb	r2, [r3, #14]
     a1a:	2a04      	cmp	r2, #4
     a1c:	d005      	beq.n	a2a <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     a1e:	2a01      	cmp	r2, #1
     a20:	d033      	beq.n	a8a <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     a22:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     a24:	2a03      	cmp	r2, #3
     a26:	d0d1      	beq.n	9cc <sd_mmc_select_slot+0x8>
     a28:	e045      	b.n	ab6 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     a2a:	3a03      	subs	r2, #3
     a2c:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     a2e:	4b2c      	ldr	r3, [pc, #176]	; (ae0 <sd_mmc_select_slot+0x11c>)
     a30:	681b      	ldr	r3, [r3, #0]
     a32:	2b00      	cmp	r3, #0
     a34:	d017      	beq.n	a66 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     a36:	2200      	movs	r2, #0
     a38:	4b28      	ldr	r3, [pc, #160]	; (adc <sd_mmc_select_slot+0x118>)
     a3a:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     a3c:	2000      	movs	r0, #0
     a3e:	4b29      	ldr	r3, [pc, #164]	; (ae4 <sd_mmc_select_slot+0x120>)
     a40:	4798      	blx	r3
     a42:	22fa      	movs	r2, #250	; 0xfa
     a44:	0092      	lsls	r2, r2, #2
     a46:	2300      	movs	r3, #0
     a48:	2100      	movs	r1, #0
     a4a:	4c27      	ldr	r4, [pc, #156]	; (ae8 <sd_mmc_select_slot+0x124>)
     a4c:	47a0      	blx	r4
     a4e:	4a27      	ldr	r2, [pc, #156]	; (aec <sd_mmc_select_slot+0x128>)
     a50:	2300      	movs	r3, #0
     a52:	1880      	adds	r0, r0, r2
     a54:	4159      	adcs	r1, r3
     a56:	4a26      	ldr	r2, [pc, #152]	; (af0 <sd_mmc_select_slot+0x12c>)
     a58:	2300      	movs	r3, #0
     a5a:	4c26      	ldr	r4, [pc, #152]	; (af4 <sd_mmc_select_slot+0x130>)
     a5c:	47a0      	blx	r4
     a5e:	4b26      	ldr	r3, [pc, #152]	; (af8 <sd_mmc_select_slot+0x134>)
     a60:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     a62:	2302      	movs	r3, #2
     a64:	e7b2      	b.n	9cc <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     a66:	2401      	movs	r4, #1
     a68:	4b1c      	ldr	r3, [pc, #112]	; (adc <sd_mmc_select_slot+0x118>)
     a6a:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     a6c:	2000      	movs	r0, #0
     a6e:	4b1d      	ldr	r3, [pc, #116]	; (ae4 <sd_mmc_select_slot+0x120>)
     a70:	4798      	blx	r3
     a72:	21fa      	movs	r1, #250	; 0xfa
     a74:	0149      	lsls	r1, r1, #5
     a76:	4b21      	ldr	r3, [pc, #132]	; (afc <sd_mmc_select_slot+0x138>)
     a78:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     a7a:	23fa      	movs	r3, #250	; 0xfa
     a7c:	009b      	lsls	r3, r3, #2
     a7e:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     a80:	4b17      	ldr	r3, [pc, #92]	; (ae0 <sd_mmc_select_slot+0x11c>)
     a82:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     a84:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     a86:	2302      	movs	r3, #2
     a88:	e7a0      	b.n	9cc <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     a8a:	4b14      	ldr	r3, [pc, #80]	; (adc <sd_mmc_select_slot+0x118>)
     a8c:	781b      	ldrb	r3, [r3, #0]
     a8e:	2b00      	cmp	r3, #0
     a90:	d007      	beq.n	aa2 <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a92:	4b13      	ldr	r3, [pc, #76]	; (ae0 <sd_mmc_select_slot+0x11c>)
     a94:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     a96:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     a98:	03d2      	lsls	r2, r2, #15
     a9a:	d597      	bpl.n	9cc <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     a9c:	2200      	movs	r2, #0
     a9e:	4b10      	ldr	r3, [pc, #64]	; (ae0 <sd_mmc_select_slot+0x11c>)
     aa0:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     aa2:	4b0c      	ldr	r3, [pc, #48]	; (ad4 <sd_mmc_select_slot+0x110>)
     aa4:	2202      	movs	r2, #2
     aa6:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     aa8:	4a15      	ldr	r2, [pc, #84]	; (b00 <sd_mmc_select_slot+0x13c>)
     aaa:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     aac:	2201      	movs	r2, #1
     aae:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     ab0:	2100      	movs	r1, #0
     ab2:	3221      	adds	r2, #33	; 0x21
     ab4:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     ab6:	2200      	movs	r2, #0
     ab8:	4b12      	ldr	r3, [pc, #72]	; (b04 <sd_mmc_select_slot+0x140>)
     aba:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     abc:	4c05      	ldr	r4, [pc, #20]	; (ad4 <sd_mmc_select_slot+0x110>)
     abe:	4b12      	ldr	r3, [pc, #72]	; (b08 <sd_mmc_select_slot+0x144>)
     ac0:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     ac2:	4b12      	ldr	r3, [pc, #72]	; (b0c <sd_mmc_select_slot+0x148>)
     ac4:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     ac6:	7ba3      	ldrb	r3, [r4, #14]
     ac8:	3b02      	subs	r3, #2
     aca:	425a      	negs	r2, r3
     acc:	4153      	adcs	r3, r2
     ace:	b2db      	uxtb	r3, r3
     ad0:	e77c      	b.n	9cc <sd_mmc_select_slot+0x8>
     ad2:	46c0      	nop			; (mov r8, r8)
     ad4:	2000000c 	.word	0x2000000c
     ad8:	41004400 	.word	0x41004400
     adc:	200001b0 	.word	0x200001b0
     ae0:	e000e010 	.word	0xe000e010
     ae4:	00008995 	.word	0x00008995
     ae8:	000090d1 	.word	0x000090d1
     aec:	00001b57 	.word	0x00001b57
     af0:	00001b58 	.word	0x00001b58
     af4:	00009091 	.word	0x00009091
     af8:	20000001 	.word	0x20000001
     afc:	00008d29 	.word	0x00008d29
     b00:	00061a80 	.word	0x00061a80
     b04:	200001b1 	.word	0x200001b1
     b08:	200001a8 	.word	0x200001a8
     b0c:	00000999 	.word	0x00000999

00000b10 <sd_mmc_cmd13>:
{
     b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b12:	4d09      	ldr	r5, [pc, #36]	; (b38 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     b14:	4f09      	ldr	r7, [pc, #36]	; (b3c <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     b16:	4e0a      	ldr	r6, [pc, #40]	; (b40 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     b18:	2100      	movs	r1, #0
     b1a:	480a      	ldr	r0, [pc, #40]	; (b44 <sd_mmc_cmd13+0x34>)
     b1c:	47b8      	blx	r7
     b1e:	1e04      	subs	r4, r0, #0
     b20:	d007      	beq.n	b32 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     b22:	47b0      	blx	r6
     b24:	23ff      	movs	r3, #255	; 0xff
     b26:	4203      	tst	r3, r0
     b28:	d003      	beq.n	b32 <sd_mmc_cmd13+0x22>
     b2a:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     b2c:	2d00      	cmp	r5, #0
     b2e:	d1f3      	bne.n	b18 <sd_mmc_cmd13+0x8>
			return false;
     b30:	2400      	movs	r4, #0
}
     b32:	0020      	movs	r0, r4
     b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	00030d41 	.word	0x00030d41
     b3c:	000084e1 	.word	0x000084e1
     b40:	000084f9 	.word	0x000084f9
     b44:	00001b0d 	.word	0x00001b0d

00000b48 <sd_mmc_cmd9_spi>:
{
     b48:	b510      	push	{r4, lr}
     b4a:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     b4c:	4b0c      	ldr	r3, [pc, #48]	; (b80 <sd_mmc_cmd9_spi+0x38>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	8999      	ldrh	r1, [r3, #12]
     b52:	0409      	lsls	r1, r1, #16
     b54:	2301      	movs	r3, #1
     b56:	9300      	str	r3, [sp, #0]
     b58:	2210      	movs	r2, #16
     b5a:	480a      	ldr	r0, [pc, #40]	; (b84 <sd_mmc_cmd9_spi+0x3c>)
     b5c:	4c0a      	ldr	r4, [pc, #40]	; (b88 <sd_mmc_cmd9_spi+0x40>)
     b5e:	47a0      	blx	r4
     b60:	2800      	cmp	r0, #0
     b62:	d101      	bne.n	b68 <sd_mmc_cmd9_spi+0x20>
}
     b64:	b002      	add	sp, #8
     b66:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     b68:	4b05      	ldr	r3, [pc, #20]	; (b80 <sd_mmc_cmd9_spi+0x38>)
     b6a:	6818      	ldr	r0, [r3, #0]
     b6c:	3012      	adds	r0, #18
     b6e:	2101      	movs	r1, #1
     b70:	4b06      	ldr	r3, [pc, #24]	; (b8c <sd_mmc_cmd9_spi+0x44>)
     b72:	4798      	blx	r3
     b74:	2800      	cmp	r0, #0
     b76:	d0f5      	beq.n	b64 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     b78:	4b05      	ldr	r3, [pc, #20]	; (b90 <sd_mmc_cmd9_spi+0x48>)
     b7a:	4798      	blx	r3
     b7c:	e7f2      	b.n	b64 <sd_mmc_cmd9_spi+0x1c>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	200001a8 	.word	0x200001a8
     b84:	00081109 	.word	0x00081109
     b88:	00008351 	.word	0x00008351
     b8c:	0000857d 	.word	0x0000857d
     b90:	00008609 	.word	0x00008609

00000b94 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     b94:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     b96:	4b04      	ldr	r3, [pc, #16]	; (ba8 <sd_mmc_deselect_slot+0x14>)
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	2b00      	cmp	r3, #0
     b9c:	d000      	beq.n	ba0 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     b9e:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     ba0:	2000      	movs	r0, #0
     ba2:	4b02      	ldr	r3, [pc, #8]	; (bac <sd_mmc_deselect_slot+0x18>)
     ba4:	4798      	blx	r3
}
     ba6:	e7fa      	b.n	b9e <sd_mmc_deselect_slot+0xa>
     ba8:	200001b1 	.word	0x200001b1
     bac:	000082f1 	.word	0x000082f1

00000bb0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     bb0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     bb2:	2204      	movs	r2, #4
     bb4:	4b03      	ldr	r3, [pc, #12]	; (bc4 <sd_mmc_init+0x14>)
     bb6:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     bb8:	32fb      	adds	r2, #251	; 0xfb
     bba:	4b03      	ldr	r3, [pc, #12]	; (bc8 <sd_mmc_init+0x18>)
     bbc:	701a      	strb	r2, [r3, #0]
	driver_init();
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <sd_mmc_init+0x1c>)
     bc0:	4798      	blx	r3
}
     bc2:	bd10      	pop	{r4, pc}
     bc4:	2000000c 	.word	0x2000000c
     bc8:	200001b1 	.word	0x200001b1
     bcc:	00008191 	.word	0x00008191

00000bd0 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd2:	46c6      	mov	lr, r8
     bd4:	b500      	push	{lr}
     bd6:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     bd8:	4bcb      	ldr	r3, [pc, #812]	; (f08 <sd_mmc_check+0x338>)
     bda:	4798      	blx	r3
     bdc:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     bde:	2801      	cmp	r0, #1
     be0:	d006      	beq.n	bf0 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     be2:	4bca      	ldr	r3, [pc, #808]	; (f0c <sd_mmc_check+0x33c>)
     be4:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     be6:	0020      	movs	r0, r4
     be8:	b008      	add	sp, #32
     bea:	bc04      	pop	{r2}
     bec:	4690      	mov	r8, r2
     bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     bf0:	4bc7      	ldr	r3, [pc, #796]	; (f10 <sd_mmc_check+0x340>)
     bf2:	681b      	ldr	r3, [r3, #0]
     bf4:	2201      	movs	r2, #1
     bf6:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     bf8:	2200      	movs	r2, #0
     bfa:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     bfc:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     bfe:	4bc5      	ldr	r3, [pc, #788]	; (f14 <sd_mmc_check+0x344>)
     c00:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     c02:	2100      	movs	r1, #0
     c04:	2088      	movs	r0, #136	; 0x88
     c06:	0140      	lsls	r0, r0, #5
     c08:	4bc3      	ldr	r3, [pc, #780]	; (f18 <sd_mmc_check+0x348>)
     c0a:	4798      	blx	r3
     c0c:	2800      	cmp	r0, #0
     c0e:	d107      	bne.n	c20 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     c10:	4bbf      	ldr	r3, [pc, #764]	; (f10 <sd_mmc_check+0x340>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	2203      	movs	r2, #3
     c16:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     c18:	4bbc      	ldr	r3, [pc, #752]	; (f0c <sd_mmc_check+0x33c>)
     c1a:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     c1c:	2403      	movs	r4, #3
     c1e:	e7e2      	b.n	be6 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     c20:	21d5      	movs	r1, #213	; 0xd5
     c22:	0049      	lsls	r1, r1, #1
     c24:	48bd      	ldr	r0, [pc, #756]	; (f1c <sd_mmc_check+0x34c>)
     c26:	4bbc      	ldr	r3, [pc, #752]	; (f18 <sd_mmc_check+0x348>)
     c28:	4798      	blx	r3
	*v2 = 0;
     c2a:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     c2c:	2800      	cmp	r0, #0
     c2e:	d125      	bne.n	c7c <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     c30:	4bb7      	ldr	r3, [pc, #732]	; (f10 <sd_mmc_check+0x340>)
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	7bdb      	ldrb	r3, [r3, #15]
     c36:	07db      	lsls	r3, r3, #31
     c38:	d500      	bpl.n	c3c <sd_mmc_check+0x6c>
     c3a:	e1eb      	b.n	1014 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     c3c:	4bb4      	ldr	r3, [pc, #720]	; (f10 <sd_mmc_check+0x340>)
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	7bda      	ldrb	r2, [r3, #15]
     c42:	2309      	movs	r3, #9
     c44:	4013      	ands	r3, r2
     c46:	2b01      	cmp	r3, #1
     c48:	d10f      	bne.n	c6a <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     c4a:	2180      	movs	r1, #128	; 0x80
     c4c:	0089      	lsls	r1, r1, #2
     c4e:	48b4      	ldr	r0, [pc, #720]	; (f20 <sd_mmc_check+0x350>)
     c50:	4bb1      	ldr	r3, [pc, #708]	; (f18 <sd_mmc_check+0x348>)
     c52:	4798      	blx	r3
     c54:	2800      	cmp	r0, #0
     c56:	d0db      	beq.n	c10 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     c58:	4bad      	ldr	r3, [pc, #692]	; (f10 <sd_mmc_check+0x340>)
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	7bdb      	ldrb	r3, [r3, #15]
     c5e:	07db      	lsls	r3, r3, #31
     c60:	d503      	bpl.n	c6a <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     c62:	4bb0      	ldr	r3, [pc, #704]	; (f24 <sd_mmc_check+0x354>)
     c64:	4798      	blx	r3
     c66:	2800      	cmp	r0, #0
     c68:	d0d2      	beq.n	c10 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     c6a:	4baf      	ldr	r3, [pc, #700]	; (f28 <sd_mmc_check+0x358>)
     c6c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     c6e:	4ba8      	ldr	r3, [pc, #672]	; (f10 <sd_mmc_check+0x340>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	2200      	movs	r2, #0
     c74:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     c76:	4ba5      	ldr	r3, [pc, #660]	; (f0c <sd_mmc_check+0x33c>)
     c78:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     c7a:	e7b4      	b.n	be6 <sd_mmc_check+0x16>
	resp = driver_get_response();
     c7c:	4bab      	ldr	r3, [pc, #684]	; (f2c <sd_mmc_check+0x35c>)
     c7e:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     c80:	1c43      	adds	r3, r0, #1
     c82:	d100      	bne.n	c86 <sd_mmc_check+0xb6>
     c84:	e1c4      	b.n	1010 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     c86:	0500      	lsls	r0, r0, #20
     c88:	0d00      	lsrs	r0, r0, #20
     c8a:	23d5      	movs	r3, #213	; 0xd5
     c8c:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     c8e:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     c90:	4298      	cmp	r0, r3
     c92:	d1bd      	bne.n	c10 <sd_mmc_check+0x40>
     c94:	e7cc      	b.n	c30 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     c96:	2100      	movs	r1, #0
     c98:	48a5      	ldr	r0, [pc, #660]	; (f30 <sd_mmc_check+0x360>)
     c9a:	4b9f      	ldr	r3, [pc, #636]	; (f18 <sd_mmc_check+0x348>)
     c9c:	4798      	blx	r3
     c9e:	2800      	cmp	r0, #0
     ca0:	d119      	bne.n	cd6 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     ca2:	4b9b      	ldr	r3, [pc, #620]	; (f10 <sd_mmc_check+0x340>)
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	2202      	movs	r2, #2
     ca8:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     caa:	2100      	movs	r1, #0
     cac:	2088      	movs	r0, #136	; 0x88
     cae:	0140      	lsls	r0, r0, #5
     cb0:	4b99      	ldr	r3, [pc, #612]	; (f18 <sd_mmc_check+0x348>)
     cb2:	4798      	blx	r3
     cb4:	2800      	cmp	r0, #0
     cb6:	d0ab      	beq.n	c10 <sd_mmc_check+0x40>
     cb8:	4d9e      	ldr	r5, [pc, #632]	; (f34 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     cba:	4f97      	ldr	r7, [pc, #604]	; (f18 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     cbc:	4e9b      	ldr	r6, [pc, #620]	; (f2c <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     cbe:	2100      	movs	r1, #0
     cc0:	489d      	ldr	r0, [pc, #628]	; (f38 <sd_mmc_check+0x368>)
     cc2:	47b8      	blx	r7
     cc4:	2800      	cmp	r0, #0
     cc6:	d0a3      	beq.n	c10 <sd_mmc_check+0x40>
		resp = driver_get_response();
     cc8:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     cca:	07c3      	lsls	r3, r0, #31
     ccc:	d57d      	bpl.n	dca <sd_mmc_check+0x1fa>
     cce:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     cd0:	2d00      	cmp	r5, #0
     cd2:	d1f4      	bne.n	cbe <sd_mmc_check+0xee>
     cd4:	e79c      	b.n	c10 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     cd6:	4b95      	ldr	r3, [pc, #596]	; (f2c <sd_mmc_check+0x35c>)
     cd8:	4798      	blx	r3
     cda:	0043      	lsls	r3, r0, #1
     cdc:	d505      	bpl.n	cea <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     cde:	4b8c      	ldr	r3, [pc, #560]	; (f10 <sd_mmc_check+0x340>)
     ce0:	681a      	ldr	r2, [r3, #0]
     ce2:	7bd3      	ldrb	r3, [r2, #15]
     ce4:	2108      	movs	r1, #8
     ce6:	430b      	orrs	r3, r1
     ce8:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     cea:	2100      	movs	r1, #0
     cec:	4893      	ldr	r0, [pc, #588]	; (f3c <sd_mmc_check+0x36c>)
     cee:	4b8a      	ldr	r3, [pc, #552]	; (f18 <sd_mmc_check+0x348>)
     cf0:	4798      	blx	r3
     cf2:	2800      	cmp	r0, #0
     cf4:	d08c      	beq.n	c10 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     cf6:	4b86      	ldr	r3, [pc, #536]	; (f10 <sd_mmc_check+0x340>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	7bdb      	ldrb	r3, [r3, #15]
     cfc:	07da      	lsls	r2, r3, #31
     cfe:	d400      	bmi.n	d02 <sd_mmc_check+0x132>
     d00:	e1a4      	b.n	104c <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     d02:	4b8f      	ldr	r3, [pc, #572]	; (f40 <sd_mmc_check+0x370>)
     d04:	4798      	blx	r3
     d06:	2800      	cmp	r0, #0
     d08:	d082      	beq.n	c10 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     d0a:	4b81      	ldr	r3, [pc, #516]	; (f10 <sd_mmc_check+0x340>)
     d0c:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d0e:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     d10:	2107      	movs	r1, #7
     d12:	4019      	ands	r1, r3
     d14:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     d16:	488b      	ldr	r0, [pc, #556]	; (f44 <sd_mmc_check+0x374>)
     d18:	5808      	ldr	r0, [r1, r0]
     d1a:	21fa      	movs	r1, #250	; 0xfa
     d1c:	0089      	lsls	r1, r1, #2
     d1e:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     d20:	065b      	lsls	r3, r3, #25
     d22:	0f1b      	lsrs	r3, r3, #28
     d24:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     d26:	4888      	ldr	r0, [pc, #544]	; (f48 <sd_mmc_check+0x378>)
     d28:	581b      	ldr	r3, [r3, r0]
     d2a:	434b      	muls	r3, r1
     d2c:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     d2e:	7c93      	ldrb	r3, [r2, #18]
     d30:	099b      	lsrs	r3, r3, #6
     d32:	d000      	beq.n	d36 <sd_mmc_check+0x166>
     d34:	e13c      	b.n	fb0 <sd_mmc_check+0x3e0>
     d36:	7e91      	ldrb	r1, [r2, #26]
     d38:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d3a:	7e53      	ldrb	r3, [r2, #25]
     d3c:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d3e:	7e10      	ldrb	r0, [r2, #24]
     d40:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d42:	4303      	orrs	r3, r0
     d44:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d46:	7f10      	ldrb	r0, [r2, #28]
     d48:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d4a:	7ed1      	ldrb	r1, [r2, #27]
     d4c:	0049      	lsls	r1, r1, #1
     d4e:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     d50:	051b      	lsls	r3, r3, #20
     d52:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     d54:	3301      	adds	r3, #1
     d56:	2107      	movs	r1, #7
     d58:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     d5a:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     d5c:	408b      	lsls	r3, r1
     d5e:	7dd0      	ldrb	r0, [r2, #23]
     d60:	210f      	movs	r1, #15
     d62:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     d64:	408b      	lsls	r3, r1
				/ 1024;
     d66:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     d68:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     d6a:	8991      	ldrh	r1, [r2, #12]
     d6c:	0409      	lsls	r1, r1, #16
     d6e:	4877      	ldr	r0, [pc, #476]	; (f4c <sd_mmc_check+0x37c>)
     d70:	4b69      	ldr	r3, [pc, #420]	; (f18 <sd_mmc_check+0x348>)
     d72:	4798      	blx	r3
     d74:	2800      	cmp	r0, #0
     d76:	d100      	bne.n	d7a <sd_mmc_check+0x1aa>
     d78:	e74a      	b.n	c10 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     d7a:	2301      	movs	r3, #1
     d7c:	9300      	str	r3, [sp, #0]
     d7e:	2208      	movs	r2, #8
     d80:	2100      	movs	r1, #0
     d82:	4873      	ldr	r0, [pc, #460]	; (f50 <sd_mmc_check+0x380>)
     d84:	4d73      	ldr	r5, [pc, #460]	; (f54 <sd_mmc_check+0x384>)
     d86:	47a8      	blx	r5
     d88:	2800      	cmp	r0, #0
     d8a:	d100      	bne.n	d8e <sd_mmc_check+0x1be>
     d8c:	e740      	b.n	c10 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     d8e:	2101      	movs	r1, #1
     d90:	a806      	add	r0, sp, #24
     d92:	4b71      	ldr	r3, [pc, #452]	; (f58 <sd_mmc_check+0x388>)
     d94:	4798      	blx	r3
     d96:	2800      	cmp	r0, #0
     d98:	d100      	bne.n	d9c <sd_mmc_check+0x1cc>
     d9a:	e739      	b.n	c10 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     d9c:	4b6f      	ldr	r3, [pc, #444]	; (f5c <sd_mmc_check+0x38c>)
     d9e:	4798      	blx	r3
     da0:	2800      	cmp	r0, #0
     da2:	d100      	bne.n	da6 <sd_mmc_check+0x1d6>
     da4:	e734      	b.n	c10 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     da6:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     da8:	781b      	ldrb	r3, [r3, #0]
     daa:	220f      	movs	r2, #15
     dac:	4013      	ands	r3, r2
     dae:	2b01      	cmp	r3, #1
     db0:	d100      	bne.n	db4 <sd_mmc_check+0x1e4>
     db2:	e119      	b.n	fe8 <sd_mmc_check+0x418>
     db4:	2b00      	cmp	r3, #0
     db6:	d100      	bne.n	dba <sd_mmc_check+0x1ea>
     db8:	e109      	b.n	fce <sd_mmc_check+0x3fe>
     dba:	2b02      	cmp	r3, #2
     dbc:	d100      	bne.n	dc0 <sd_mmc_check+0x1f0>
     dbe:	e118      	b.n	ff2 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     dc0:	4b53      	ldr	r3, [pc, #332]	; (f10 <sd_mmc_check+0x340>)
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	2210      	movs	r2, #16
     dc6:	741a      	strb	r2, [r3, #16]
     dc8:	e105      	b.n	fd6 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     dca:	2100      	movs	r1, #0
     dcc:	4858      	ldr	r0, [pc, #352]	; (f30 <sd_mmc_check+0x360>)
     dce:	4b52      	ldr	r3, [pc, #328]	; (f18 <sd_mmc_check+0x348>)
     dd0:	4798      	blx	r3
     dd2:	2800      	cmp	r0, #0
     dd4:	d100      	bne.n	dd8 <sd_mmc_check+0x208>
     dd6:	e71b      	b.n	c10 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     dd8:	4b54      	ldr	r3, [pc, #336]	; (f2c <sd_mmc_check+0x35c>)
     dda:	4798      	blx	r3
     ddc:	23c0      	movs	r3, #192	; 0xc0
     dde:	05db      	lsls	r3, r3, #23
     de0:	4018      	ands	r0, r3
     de2:	2380      	movs	r3, #128	; 0x80
     de4:	05db      	lsls	r3, r3, #23
     de6:	4298      	cmp	r0, r3
     de8:	d105      	bne.n	df6 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     dea:	4b49      	ldr	r3, [pc, #292]	; (f10 <sd_mmc_check+0x340>)
     dec:	681a      	ldr	r2, [r3, #0]
     dee:	7bd1      	ldrb	r1, [r2, #15]
     df0:	2308      	movs	r3, #8
     df2:	430b      	orrs	r3, r1
     df4:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     df6:	2100      	movs	r1, #0
     df8:	4850      	ldr	r0, [pc, #320]	; (f3c <sd_mmc_check+0x36c>)
     dfa:	4b47      	ldr	r3, [pc, #284]	; (f18 <sd_mmc_check+0x348>)
     dfc:	4798      	blx	r3
     dfe:	2800      	cmp	r0, #0
     e00:	d100      	bne.n	e04 <sd_mmc_check+0x234>
     e02:	e705      	b.n	c10 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     e04:	4b4e      	ldr	r3, [pc, #312]	; (f40 <sd_mmc_check+0x370>)
     e06:	4798      	blx	r3
     e08:	2800      	cmp	r0, #0
     e0a:	d100      	bne.n	e0e <sd_mmc_check+0x23e>
     e0c:	e700      	b.n	c10 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     e0e:	4b40      	ldr	r3, [pc, #256]	; (f10 <sd_mmc_check+0x340>)
     e10:	681a      	ldr	r2, [r3, #0]
     e12:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     e14:	069b      	lsls	r3, r3, #26
     e16:	0f1b      	lsrs	r3, r3, #28
     e18:	2b02      	cmp	r3, #2
     e1a:	d100      	bne.n	e1e <sd_mmc_check+0x24e>
     e1c:	e0a8      	b.n	f70 <sd_mmc_check+0x3a0>
     e1e:	d907      	bls.n	e30 <sd_mmc_check+0x260>
     e20:	2b03      	cmp	r3, #3
     e22:	d100      	bne.n	e26 <sd_mmc_check+0x256>
     e24:	e0a7      	b.n	f76 <sd_mmc_check+0x3a6>
     e26:	2b04      	cmp	r3, #4
     e28:	d104      	bne.n	e34 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     e2a:	2340      	movs	r3, #64	; 0x40
     e2c:	7413      	strb	r3, [r2, #16]
     e2e:	e003      	b.n	e38 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     e30:	2b01      	cmp	r3, #1
     e32:	d066      	beq.n	f02 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     e34:	2312      	movs	r3, #18
     e36:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e38:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     e3a:	0659      	lsls	r1, r3, #25
     e3c:	0f09      	lsrs	r1, r1, #28
     e3e:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     e40:	2007      	movs	r0, #7
     e42:	4003      	ands	r3, r0
     e44:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     e46:	483f      	ldr	r0, [pc, #252]	; (f44 <sd_mmc_check+0x374>)
     e48:	5818      	ldr	r0, [r3, r0]
     e4a:	23fa      	movs	r3, #250	; 0xfa
     e4c:	009b      	lsls	r3, r3, #2
     e4e:	4343      	muls	r3, r0
     e50:	4843      	ldr	r0, [pc, #268]	; (f60 <sd_mmc_check+0x390>)
     e52:	5809      	ldr	r1, [r1, r0]
     e54:	434b      	muls	r3, r1
     e56:	6013      	str	r3, [r2, #0]
     e58:	7e91      	ldrb	r1, [r2, #26]
     e5a:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e5c:	7e53      	ldrb	r3, [r2, #25]
     e5e:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e60:	7e10      	ldrb	r0, [r2, #24]
     e62:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e64:	4303      	orrs	r3, r0
     e66:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     e68:	051b      	lsls	r3, r3, #20
     e6a:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     e6c:	493d      	ldr	r1, [pc, #244]	; (f64 <sd_mmc_check+0x394>)
     e6e:	428b      	cmp	r3, r1
     e70:	d00f      	beq.n	e92 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e72:	7f10      	ldrb	r0, [r2, #28]
     e74:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e76:	7ed1      	ldrb	r1, [r2, #27]
     e78:	0049      	lsls	r1, r1, #1
     e7a:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     e7c:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     e7e:	2007      	movs	r0, #7
     e80:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     e82:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     e84:	408b      	lsls	r3, r1
     e86:	7dd1      	ldrb	r1, [r2, #23]
     e88:	3008      	adds	r0, #8
     e8a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     e8c:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     e8e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     e90:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     e92:	7c13      	ldrb	r3, [r2, #16]
     e94:	2b3f      	cmp	r3, #63	; 0x3f
     e96:	d97b      	bls.n	f90 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     e98:	2100      	movs	r1, #0
     e9a:	9100      	str	r1, [sp, #0]
     e9c:	2301      	movs	r3, #1
     e9e:	2280      	movs	r2, #128	; 0x80
     ea0:	0092      	lsls	r2, r2, #2
     ea2:	4831      	ldr	r0, [pc, #196]	; (f68 <sd_mmc_check+0x398>)
     ea4:	4d2b      	ldr	r5, [pc, #172]	; (f54 <sd_mmc_check+0x384>)
     ea6:	47a8      	blx	r5
     ea8:	2800      	cmp	r0, #0
     eaa:	d100      	bne.n	eae <sd_mmc_check+0x2de>
     eac:	e6b0      	b.n	c10 <sd_mmc_check+0x40>
     eae:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     eb0:	4e2e      	ldr	r6, [pc, #184]	; (f6c <sd_mmc_check+0x39c>)
     eb2:	a805      	add	r0, sp, #20
     eb4:	47b0      	blx	r6
     eb6:	2800      	cmp	r0, #0
     eb8:	d100      	bne.n	ebc <sd_mmc_check+0x2ec>
     eba:	e6a9      	b.n	c10 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     ebc:	3501      	adds	r5, #1
     ebe:	b2ad      	uxth	r5, r5
     ec0:	2d32      	cmp	r5, #50	; 0x32
     ec2:	d1f6      	bne.n	eb2 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     ec4:	4b12      	ldr	r3, [pc, #72]	; (f10 <sd_mmc_check+0x340>)
     ec6:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ec8:	7e8a      	ldrb	r2, [r1, #26]
     eca:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ecc:	7e4b      	ldrb	r3, [r1, #25]
     ece:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ed0:	7e09      	ldrb	r1, [r1, #24]
     ed2:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     ed4:	430b      	orrs	r3, r1
     ed6:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     ed8:	051b      	lsls	r3, r3, #20
     eda:	0d1b      	lsrs	r3, r3, #20
     edc:	4a21      	ldr	r2, [pc, #132]	; (f64 <sd_mmc_check+0x394>)
     ede:	4293      	cmp	r3, r2
     ee0:	d154      	bne.n	f8c <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     ee2:	4e22      	ldr	r6, [pc, #136]	; (f6c <sd_mmc_check+0x39c>)
     ee4:	a806      	add	r0, sp, #24
     ee6:	47b0      	blx	r6
     ee8:	2800      	cmp	r0, #0
     eea:	d100      	bne.n	eee <sd_mmc_check+0x31e>
     eec:	e690      	b.n	c10 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     eee:	3501      	adds	r5, #1
     ef0:	b2ad      	uxth	r5, r5
     ef2:	2d35      	cmp	r5, #53	; 0x35
     ef4:	d9f6      	bls.n	ee4 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     ef6:	4b06      	ldr	r3, [pc, #24]	; (f10 <sd_mmc_check+0x340>)
     ef8:	681a      	ldr	r2, [r3, #0]
     efa:	9b06      	ldr	r3, [sp, #24]
     efc:	085b      	lsrs	r3, r3, #1
     efe:	6053      	str	r3, [r2, #4]
     f00:	e044      	b.n	f8c <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     f02:	2314      	movs	r3, #20
     f04:	7413      	strb	r3, [r2, #16]
     f06:	e797      	b.n	e38 <sd_mmc_check+0x268>
     f08:	000009c5 	.word	0x000009c5
     f0c:	00000b95 	.word	0x00000b95
     f10:	200001a8 	.word	0x200001a8
     f14:	00008319 	.word	0x00008319
     f18:	000084e1 	.word	0x000084e1
     f1c:	00005508 	.word	0x00005508
     f20:	00001110 	.word	0x00001110
     f24:	00000b11 	.word	0x00000b11
     f28:	00000999 	.word	0x00000999
     f2c:	000084f9 	.word	0x000084f9
     f30:	0000053a 	.word	0x0000053a
     f34:	00001bef 	.word	0x00001bef
     f38:	00001101 	.word	0x00001101
     f3c:	0000113b 	.word	0x0000113b
     f40:	00000b49 	.word	0x00000b49
     f44:	0000a3a4 	.word	0x0000a3a4
     f48:	0000a3c0 	.word	0x0000a3c0
     f4c:	00001137 	.word	0x00001137
     f50:	00081133 	.word	0x00081133
     f54:	00008351 	.word	0x00008351
     f58:	0000857d 	.word	0x0000857d
     f5c:	00008609 	.word	0x00008609
     f60:	0000a364 	.word	0x0000a364
     f64:	00000fff 	.word	0x00000fff
     f68:	00081108 	.word	0x00081108
     f6c:	00008505 	.word	0x00008505
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     f70:	2322      	movs	r3, #34	; 0x22
     f72:	7413      	strb	r3, [r2, #16]
     f74:	e760      	b.n	e38 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     f76:	2330      	movs	r3, #48	; 0x30
     f78:	7413      	strb	r3, [r2, #16]
     f7a:	e75d      	b.n	e38 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     f7c:	a806      	add	r0, sp, #24
     f7e:	4b36      	ldr	r3, [pc, #216]	; (1058 <sd_mmc_check+0x488>)
     f80:	4798      	blx	r3
     f82:	2800      	cmp	r0, #0
     f84:	d100      	bne.n	f88 <sd_mmc_check+0x3b8>
     f86:	e643      	b.n	c10 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     f88:	3501      	adds	r5, #1
     f8a:	b2ad      	uxth	r5, r5
     f8c:	2d7f      	cmp	r5, #127	; 0x7f
     f8e:	d9f5      	bls.n	f7c <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     f90:	2180      	movs	r1, #128	; 0x80
     f92:	0089      	lsls	r1, r1, #2
     f94:	4831      	ldr	r0, [pc, #196]	; (105c <sd_mmc_check+0x48c>)
     f96:	4b32      	ldr	r3, [pc, #200]	; (1060 <sd_mmc_check+0x490>)
     f98:	4798      	blx	r3
     f9a:	2800      	cmp	r0, #0
     f9c:	d100      	bne.n	fa0 <sd_mmc_check+0x3d0>
     f9e:	e637      	b.n	c10 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     fa0:	4b30      	ldr	r3, [pc, #192]	; (1064 <sd_mmc_check+0x494>)
     fa2:	4798      	blx	r3
     fa4:	2800      	cmp	r0, #0
     fa6:	d100      	bne.n	faa <sd_mmc_check+0x3da>
     fa8:	e632      	b.n	c10 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     faa:	4b2f      	ldr	r3, [pc, #188]	; (1068 <sd_mmc_check+0x498>)
     fac:	4798      	blx	r3
     fae:	e65e      	b.n	c6e <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     fb0:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     fb2:	7e93      	ldrb	r3, [r2, #26]
     fb4:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     fb6:	7e51      	ldrb	r1, [r2, #25]
     fb8:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     fba:	430b      	orrs	r3, r1
     fbc:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     fbe:	029b      	lsls	r3, r3, #10
				* 512;
     fc0:	085b      	lsrs	r3, r3, #1
     fc2:	2180      	movs	r1, #128	; 0x80
     fc4:	0089      	lsls	r1, r1, #2
     fc6:	468c      	mov	ip, r1
     fc8:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     fca:	6053      	str	r3, [r2, #4]
     fcc:	e6cd      	b.n	d6a <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     fce:	4b27      	ldr	r3, [pc, #156]	; (106c <sd_mmc_check+0x49c>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	2210      	movs	r2, #16
     fd4:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     fd6:	4b25      	ldr	r3, [pc, #148]	; (106c <sd_mmc_check+0x49c>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	7bdb      	ldrb	r3, [r3, #15]
     fdc:	2209      	movs	r2, #9
     fde:	4013      	ands	r3, r2
     fe0:	2b01      	cmp	r3, #1
     fe2:	d000      	beq.n	fe6 <sd_mmc_check+0x416>
     fe4:	e638      	b.n	c58 <sd_mmc_check+0x88>
     fe6:	e630      	b.n	c4a <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     fe8:	4b20      	ldr	r3, [pc, #128]	; (106c <sd_mmc_check+0x49c>)
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	221a      	movs	r2, #26
     fee:	741a      	strb	r2, [r3, #16]
     ff0:	e7f1      	b.n	fd6 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ff2:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     ff4:	789b      	ldrb	r3, [r3, #2]
     ff6:	09db      	lsrs	r3, r3, #7
     ff8:	2b01      	cmp	r3, #1
     ffa:	d104      	bne.n	1006 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     ffc:	4b1b      	ldr	r3, [pc, #108]	; (106c <sd_mmc_check+0x49c>)
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	2230      	movs	r2, #48	; 0x30
    1002:	741a      	strb	r2, [r3, #16]
    1004:	e7e7      	b.n	fd6 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1006:	4b19      	ldr	r3, [pc, #100]	; (106c <sd_mmc_check+0x49c>)
    1008:	681b      	ldr	r3, [r3, #0]
    100a:	2220      	movs	r2, #32
    100c:	741a      	strb	r2, [r3, #16]
    100e:	e7e2      	b.n	fd6 <sd_mmc_check+0x406>
	*v2 = 0;
    1010:	2600      	movs	r6, #0
    1012:	e60d      	b.n	c30 <sd_mmc_check+0x60>
    1014:	1e73      	subs	r3, r6, #1
    1016:	419e      	sbcs	r6, r3
    1018:	07b3      	lsls	r3, r6, #30
    101a:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    101c:	4d14      	ldr	r5, [pc, #80]	; (1070 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    101e:	4f10      	ldr	r7, [pc, #64]	; (1060 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1020:	46b8      	mov	r8, r7
		resp = driver_get_response();
    1022:	4e14      	ldr	r6, [pc, #80]	; (1074 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1024:	2100      	movs	r1, #0
    1026:	4814      	ldr	r0, [pc, #80]	; (1078 <sd_mmc_check+0x4a8>)
    1028:	47b8      	blx	r7
    102a:	2800      	cmp	r0, #0
    102c:	d100      	bne.n	1030 <sd_mmc_check+0x460>
    102e:	e638      	b.n	ca2 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1030:	9903      	ldr	r1, [sp, #12]
    1032:	4812      	ldr	r0, [pc, #72]	; (107c <sd_mmc_check+0x4ac>)
    1034:	47c0      	blx	r8
    1036:	2800      	cmp	r0, #0
    1038:	d100      	bne.n	103c <sd_mmc_check+0x46c>
    103a:	e632      	b.n	ca2 <sd_mmc_check+0xd2>
		resp = driver_get_response();
    103c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    103e:	07c3      	lsls	r3, r0, #31
    1040:	d400      	bmi.n	1044 <sd_mmc_check+0x474>
    1042:	e628      	b.n	c96 <sd_mmc_check+0xc6>
    1044:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    1046:	2d00      	cmp	r5, #0
    1048:	d1ec      	bne.n	1024 <sd_mmc_check+0x454>
    104a:	e62a      	b.n	ca2 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    104c:	2209      	movs	r2, #9
    104e:	4013      	ands	r3, r2
    1050:	2b01      	cmp	r3, #1
    1052:	d000      	beq.n	1056 <sd_mmc_check+0x486>
    1054:	e609      	b.n	c6a <sd_mmc_check+0x9a>
    1056:	e5f8      	b.n	c4a <sd_mmc_check+0x7a>
    1058:	00008505 	.word	0x00008505
    105c:	00001110 	.word	0x00001110
    1060:	000084e1 	.word	0x000084e1
    1064:	00000b11 	.word	0x00000b11
    1068:	00000999 	.word	0x00000999
    106c:	200001a8 	.word	0x200001a8
    1070:	00001bef 	.word	0x00001bef
    1074:	000084f9 	.word	0x000084f9
    1078:	00001137 	.word	0x00001137
    107c:	00001129 	.word	0x00001129

00001080 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1080:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <sd_mmc_get_type+0x1c>)
    1084:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    1086:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1088:	2800      	cmp	r0, #0
    108a:	d001      	beq.n	1090 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    108c:	0018      	movs	r0, r3
    108e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1090:	4b03      	ldr	r3, [pc, #12]	; (10a0 <sd_mmc_get_type+0x20>)
    1092:	4798      	blx	r3
	return sd_mmc_card->type;
    1094:	4b03      	ldr	r3, [pc, #12]	; (10a4 <sd_mmc_get_type+0x24>)
    1096:	681b      	ldr	r3, [r3, #0]
    1098:	7bdb      	ldrb	r3, [r3, #15]
    109a:	e7f7      	b.n	108c <sd_mmc_get_type+0xc>
    109c:	000009c5 	.word	0x000009c5
    10a0:	00000b95 	.word	0x00000b95
    10a4:	200001a8 	.word	0x200001a8

000010a8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    10a8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10aa:	4b06      	ldr	r3, [pc, #24]	; (10c4 <sd_mmc_get_capacity+0x1c>)
    10ac:	4798      	blx	r3
		return 0;
    10ae:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10b0:	2800      	cmp	r0, #0
    10b2:	d001      	beq.n	10b8 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    10b4:	0018      	movs	r0, r3
    10b6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    10b8:	4b03      	ldr	r3, [pc, #12]	; (10c8 <sd_mmc_get_capacity+0x20>)
    10ba:	4798      	blx	r3
	return sd_mmc_card->capacity;
    10bc:	4b03      	ldr	r3, [pc, #12]	; (10cc <sd_mmc_get_capacity+0x24>)
    10be:	681b      	ldr	r3, [r3, #0]
    10c0:	685b      	ldr	r3, [r3, #4]
    10c2:	e7f7      	b.n	10b4 <sd_mmc_get_capacity+0xc>
    10c4:	000009c5 	.word	0x000009c5
    10c8:	00000b95 	.word	0x00000b95
    10cc:	200001a8 	.word	0x200001a8

000010d0 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    10d0:	2000      	movs	r0, #0
    10d2:	4770      	bx	lr

000010d4 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    10d4:	b570      	push	{r4, r5, r6, lr}
    10d6:	b082      	sub	sp, #8
    10d8:	000e      	movs	r6, r1
    10da:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    10dc:	4b16      	ldr	r3, [pc, #88]	; (1138 <sd_mmc_init_read_blocks+0x64>)
    10de:	4798      	blx	r3
    10e0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    10e2:	d002      	beq.n	10ea <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    10e4:	0020      	movs	r0, r4
    10e6:	b002      	add	sp, #8
    10e8:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    10ea:	4b14      	ldr	r3, [pc, #80]	; (113c <sd_mmc_init_read_blocks+0x68>)
    10ec:	4798      	blx	r3
    10ee:	2800      	cmp	r0, #0
    10f0:	d017      	beq.n	1122 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    10f2:	2d01      	cmp	r5, #1
    10f4:	d919      	bls.n	112a <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    10f6:	4812      	ldr	r0, [pc, #72]	; (1140 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    10f8:	4b12      	ldr	r3, [pc, #72]	; (1144 <sd_mmc_init_read_blocks+0x70>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	7bdb      	ldrb	r3, [r3, #15]
    10fe:	071b      	lsls	r3, r3, #28
    1100:	d400      	bmi.n	1104 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    1102:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1104:	2301      	movs	r3, #1
    1106:	9300      	str	r3, [sp, #0]
    1108:	002b      	movs	r3, r5
    110a:	2280      	movs	r2, #128	; 0x80
    110c:	0092      	lsls	r2, r2, #2
    110e:	0031      	movs	r1, r6
    1110:	4e0d      	ldr	r6, [pc, #52]	; (1148 <sd_mmc_init_read_blocks+0x74>)
    1112:	47b0      	blx	r6
    1114:	2800      	cmp	r0, #0
    1116:	d00a      	beq.n	112e <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    1118:	4b0c      	ldr	r3, [pc, #48]	; (114c <sd_mmc_init_read_blocks+0x78>)
    111a:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    111c:	4b0c      	ldr	r3, [pc, #48]	; (1150 <sd_mmc_init_read_blocks+0x7c>)
    111e:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    1120:	e7e0      	b.n	10e4 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    1122:	4b0c      	ldr	r3, [pc, #48]	; (1154 <sd_mmc_init_read_blocks+0x80>)
    1124:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1126:	3405      	adds	r4, #5
    1128:	e7dc      	b.n	10e4 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    112a:	480b      	ldr	r0, [pc, #44]	; (1158 <sd_mmc_init_read_blocks+0x84>)
    112c:	e7e4      	b.n	10f8 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    112e:	4b09      	ldr	r3, [pc, #36]	; (1154 <sd_mmc_init_read_blocks+0x80>)
    1130:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1132:	2405      	movs	r4, #5
    1134:	e7d6      	b.n	10e4 <sd_mmc_init_read_blocks+0x10>
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	000009c5 	.word	0x000009c5
    113c:	00000b11 	.word	0x00000b11
    1140:	00101112 	.word	0x00101112
    1144:	200001a8 	.word	0x200001a8
    1148:	00008351 	.word	0x00008351
    114c:	200001ac 	.word	0x200001ac
    1150:	200001ae 	.word	0x200001ae
    1154:	00000b95 	.word	0x00000b95
    1158:	00081111 	.word	0x00081111

0000115c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    115c:	b510      	push	{r4, lr}
    115e:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1160:	4b07      	ldr	r3, [pc, #28]	; (1180 <sd_mmc_start_read_blocks+0x24>)
    1162:	4798      	blx	r3
    1164:	2800      	cmp	r0, #0
    1166:	d104      	bne.n	1172 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1168:	2200      	movs	r2, #0
    116a:	4b06      	ldr	r3, [pc, #24]	; (1184 <sd_mmc_start_read_blocks+0x28>)
    116c:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    116e:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1170:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1172:	4a04      	ldr	r2, [pc, #16]	; (1184 <sd_mmc_start_read_blocks+0x28>)
    1174:	8813      	ldrh	r3, [r2, #0]
    1176:	1b1c      	subs	r4, r3, r4
    1178:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    117a:	2000      	movs	r0, #0
    117c:	e7f8      	b.n	1170 <sd_mmc_start_read_blocks+0x14>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	0000857d 	.word	0x0000857d
    1184:	200001ac 	.word	0x200001ac

00001188 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1188:	b510      	push	{r4, lr}
    118a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    118c:	4b14      	ldr	r3, [pc, #80]	; (11e0 <sd_mmc_wait_end_of_read_blocks+0x58>)
    118e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1190:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    1192:	2800      	cmp	r0, #0
    1194:	d101      	bne.n	119a <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1196:	0018      	movs	r0, r3
    1198:	bd10      	pop	{r4, pc}
	if (abort) {
    119a:	2c00      	cmp	r4, #0
    119c:	d010      	beq.n	11c0 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    119e:	2200      	movs	r2, #0
    11a0:	4b10      	ldr	r3, [pc, #64]	; (11e4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    11a2:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    11a4:	4b10      	ldr	r3, [pc, #64]	; (11e8 <sd_mmc_wait_end_of_read_blocks+0x60>)
    11a6:	881b      	ldrh	r3, [r3, #0]
    11a8:	2b01      	cmp	r3, #1
    11aa:	d00f      	beq.n	11cc <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    11ac:	2100      	movs	r1, #0
    11ae:	480f      	ldr	r0, [pc, #60]	; (11ec <sd_mmc_wait_end_of_read_blocks+0x64>)
    11b0:	4b0f      	ldr	r3, [pc, #60]	; (11f0 <sd_mmc_wait_end_of_read_blocks+0x68>)
    11b2:	4798      	blx	r3
    11b4:	2800      	cmp	r0, #0
    11b6:	d00d      	beq.n	11d4 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    11b8:	4b0e      	ldr	r3, [pc, #56]	; (11f4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    11ba:	4798      	blx	r3
	return SD_MMC_OK;
    11bc:	2300      	movs	r3, #0
    11be:	e7ea      	b.n	1196 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    11c0:	4b08      	ldr	r3, [pc, #32]	; (11e4 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    11c2:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    11c4:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    11c6:	2a00      	cmp	r2, #0
    11c8:	d0ec      	beq.n	11a4 <sd_mmc_wait_end_of_read_blocks+0x1c>
    11ca:	e7e4      	b.n	1196 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    11cc:	4b09      	ldr	r3, [pc, #36]	; (11f4 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    11ce:	4798      	blx	r3
		return SD_MMC_OK;
    11d0:	2300      	movs	r3, #0
    11d2:	e7e0      	b.n	1196 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    11d4:	2100      	movs	r1, #0
    11d6:	4805      	ldr	r0, [pc, #20]	; (11ec <sd_mmc_wait_end_of_read_blocks+0x64>)
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <sd_mmc_wait_end_of_read_blocks+0x68>)
    11da:	4798      	blx	r3
    11dc:	e7ec      	b.n	11b8 <sd_mmc_wait_end_of_read_blocks+0x30>
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00008609 	.word	0x00008609
    11e4:	200001ac 	.word	0x200001ac
    11e8:	200001ae 	.word	0x200001ae
    11ec:	0000310c 	.word	0x0000310c
    11f0:	000084e1 	.word	0x000084e1
    11f4:	00000b95 	.word	0x00000b95

000011f8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    11f8:	b570      	push	{r4, r5, r6, lr}
    11fa:	b082      	sub	sp, #8
    11fc:	000e      	movs	r6, r1
    11fe:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1200:	4b11      	ldr	r3, [pc, #68]	; (1248 <sd_mmc_init_write_blocks+0x50>)
    1202:	4798      	blx	r3
    1204:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    1206:	d116      	bne.n	1236 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    1208:	2d01      	cmp	r5, #1
    120a:	d917      	bls.n	123c <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    120c:	480f      	ldr	r0, [pc, #60]	; (124c <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    120e:	4b10      	ldr	r3, [pc, #64]	; (1250 <sd_mmc_init_write_blocks+0x58>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	7bdb      	ldrb	r3, [r3, #15]
    1214:	071b      	lsls	r3, r3, #28
    1216:	d400      	bmi.n	121a <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1218:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    121a:	2301      	movs	r3, #1
    121c:	9300      	str	r3, [sp, #0]
    121e:	002b      	movs	r3, r5
    1220:	2280      	movs	r2, #128	; 0x80
    1222:	0092      	lsls	r2, r2, #2
    1224:	0031      	movs	r1, r6
    1226:	4e0b      	ldr	r6, [pc, #44]	; (1254 <sd_mmc_init_write_blocks+0x5c>)
    1228:	47b0      	blx	r6
    122a:	2800      	cmp	r0, #0
    122c:	d008      	beq.n	1240 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    122e:	4b0a      	ldr	r3, [pc, #40]	; (1258 <sd_mmc_init_write_blocks+0x60>)
    1230:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1232:	4b0a      	ldr	r3, [pc, #40]	; (125c <sd_mmc_init_write_blocks+0x64>)
    1234:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1236:	0020      	movs	r0, r4
    1238:	b002      	add	sp, #8
    123a:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    123c:	4808      	ldr	r0, [pc, #32]	; (1260 <sd_mmc_init_write_blocks+0x68>)
    123e:	e7e6      	b.n	120e <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    1240:	4b08      	ldr	r3, [pc, #32]	; (1264 <sd_mmc_init_write_blocks+0x6c>)
    1242:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1244:	2405      	movs	r4, #5
    1246:	e7f6      	b.n	1236 <sd_mmc_init_write_blocks+0x3e>
    1248:	000009c5 	.word	0x000009c5
    124c:	00109119 	.word	0x00109119
    1250:	200001a8 	.word	0x200001a8
    1254:	00008351 	.word	0x00008351
    1258:	200001ac 	.word	0x200001ac
    125c:	200001ae 	.word	0x200001ae
    1260:	00089118 	.word	0x00089118
    1264:	00000b95 	.word	0x00000b95

00001268 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1268:	b510      	push	{r4, lr}
    126a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    126c:	4b07      	ldr	r3, [pc, #28]	; (128c <sd_mmc_start_write_blocks+0x24>)
    126e:	4798      	blx	r3
    1270:	2800      	cmp	r0, #0
    1272:	d104      	bne.n	127e <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1274:	2200      	movs	r2, #0
    1276:	4b06      	ldr	r3, [pc, #24]	; (1290 <sd_mmc_start_write_blocks+0x28>)
    1278:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    127a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    127c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    127e:	4a04      	ldr	r2, [pc, #16]	; (1290 <sd_mmc_start_write_blocks+0x28>)
    1280:	8813      	ldrh	r3, [r2, #0]
    1282:	1b1c      	subs	r4, r3, r4
    1284:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1286:	2000      	movs	r0, #0
    1288:	e7f8      	b.n	127c <sd_mmc_start_write_blocks+0x14>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	0000860d 	.word	0x0000860d
    1290:	200001ac 	.word	0x200001ac

00001294 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1294:	b510      	push	{r4, lr}
    1296:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1298:	4b0e      	ldr	r3, [pc, #56]	; (12d4 <sd_mmc_wait_end_of_write_blocks+0x40>)
    129a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    129c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    129e:	2800      	cmp	r0, #0
    12a0:	d101      	bne.n	12a6 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    12a2:	0018      	movs	r0, r3
    12a4:	bd10      	pop	{r4, pc}
	if (abort) {
    12a6:	2c00      	cmp	r4, #0
    12a8:	d00a      	beq.n	12c0 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    12aa:	2200      	movs	r2, #0
    12ac:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <sd_mmc_wait_end_of_write_blocks+0x44>)
    12ae:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    12b0:	4b0a      	ldr	r3, [pc, #40]	; (12dc <sd_mmc_wait_end_of_write_blocks+0x48>)
    12b2:	881b      	ldrh	r3, [r3, #0]
    12b4:	2b01      	cmp	r3, #1
    12b6:	d009      	beq.n	12cc <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    12b8:	4b09      	ldr	r3, [pc, #36]	; (12e0 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    12ba:	4798      	blx	r3
	return SD_MMC_OK;
    12bc:	2300      	movs	r3, #0
    12be:	e7f0      	b.n	12a2 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    12c0:	4b05      	ldr	r3, [pc, #20]	; (12d8 <sd_mmc_wait_end_of_write_blocks+0x44>)
    12c2:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    12c4:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    12c6:	2a00      	cmp	r2, #0
    12c8:	d0f2      	beq.n	12b0 <sd_mmc_wait_end_of_write_blocks+0x1c>
    12ca:	e7ea      	b.n	12a2 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    12cc:	4b04      	ldr	r3, [pc, #16]	; (12e0 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    12ce:	4798      	blx	r3
		return SD_MMC_OK;
    12d0:	2300      	movs	r3, #0
    12d2:	e7e6      	b.n	12a2 <sd_mmc_wait_end_of_write_blocks+0xe>
    12d4:	0000868d 	.word	0x0000868d
    12d8:	200001ac 	.word	0x200001ac
    12dc:	200001ae 	.word	0x200001ae
    12e0:	00000b95 	.word	0x00000b95

000012e4 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    12e4:	2000      	movs	r0, #0
    12e6:	4770      	bx	lr

000012e8 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
    12e8:	b510      	push	{r4, lr}
    12ea:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    12ec:	4b08      	ldr	r3, [pc, #32]	; (1310 <udi_msc_cbw_wait+0x28>)
    12ee:	9300      	str	r3, [sp, #0]
    12f0:	231f      	movs	r3, #31
    12f2:	4a08      	ldr	r2, [pc, #32]	; (1314 <udi_msc_cbw_wait+0x2c>)
    12f4:	2101      	movs	r1, #1
    12f6:	2002      	movs	r0, #2
    12f8:	4c07      	ldr	r4, [pc, #28]	; (1318 <udi_msc_cbw_wait+0x30>)
    12fa:	47a0      	blx	r4
    12fc:	2800      	cmp	r0, #0
    12fe:	d001      	beq.n	1304 <udi_msc_cbw_wait+0x1c>
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
	}
}
    1300:	b002      	add	sp, #8
    1302:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    1304:	4905      	ldr	r1, [pc, #20]	; (131c <udi_msc_cbw_wait+0x34>)
    1306:	3002      	adds	r0, #2
    1308:	4b05      	ldr	r3, [pc, #20]	; (1320 <udi_msc_cbw_wait+0x38>)
    130a:	4798      	blx	r3
}
    130c:	e7f8      	b.n	1300 <udi_msc_cbw_wait+0x18>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	0000170d 	.word	0x0000170d
    1314:	200001d8 	.word	0x200001d8
    1318:	0000396d 	.word	0x0000396d
    131c:	000012e9 	.word	0x000012e9
    1320:	00003915 	.word	0x00003915

00001324 <udi_msc_enable>:
{
    1324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    1326:	2300      	movs	r3, #0
    1328:	4a13      	ldr	r2, [pc, #76]	; (1378 <udi_msc_enable+0x54>)
    132a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    132c:	4a13      	ldr	r2, [pc, #76]	; (137c <udi_msc_enable+0x58>)
    132e:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    1330:	3301      	adds	r3, #1
    1332:	4a13      	ldr	r2, [pc, #76]	; (1380 <udi_msc_enable+0x5c>)
    1334:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1336:	4a13      	ldr	r2, [pc, #76]	; (1384 <udi_msc_enable+0x60>)
    1338:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    133a:	4b13      	ldr	r3, [pc, #76]	; (1388 <udi_msc_enable+0x64>)
    133c:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    133e:	2800      	cmp	r0, #0
    1340:	d105      	bne.n	134e <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    1342:	2200      	movs	r2, #0
    1344:	4b11      	ldr	r3, [pc, #68]	; (138c <udi_msc_enable+0x68>)
    1346:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    1348:	2500      	movs	r5, #0
}
    134a:	0028      	movs	r0, r5
    134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    134e:	3801      	subs	r0, #1
    1350:	4b0e      	ldr	r3, [pc, #56]	; (138c <udi_msc_enable+0x68>)
    1352:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    1354:	4b0e      	ldr	r3, [pc, #56]	; (1390 <udi_msc_enable+0x6c>)
    1356:	4798      	blx	r3
    1358:	1e05      	subs	r5, r0, #0
    135a:	d0f6      	beq.n	134a <udi_msc_enable+0x26>
    135c:	2400      	movs	r4, #0
		mem_unload(lun, false);
    135e:	4f0d      	ldr	r7, [pc, #52]	; (1394 <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1360:	4e0a      	ldr	r6, [pc, #40]	; (138c <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    1362:	2100      	movs	r1, #0
    1364:	0020      	movs	r0, r4
    1366:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1368:	3401      	adds	r4, #1
    136a:	b2e4      	uxtb	r4, r4
    136c:	7833      	ldrb	r3, [r6, #0]
    136e:	42a3      	cmp	r3, r4
    1370:	d2f7      	bcs.n	1362 <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    1372:	4b09      	ldr	r3, [pc, #36]	; (1398 <udi_msc_enable+0x74>)
    1374:	4798      	blx	r3
	return true;
    1376:	e7e8      	b.n	134a <udi_msc_enable+0x26>
    1378:	200001ce 	.word	0x200001ce
    137c:	200001cc 	.word	0x200001cc
    1380:	20000044 	.word	0x20000044
    1384:	20000045 	.word	0x20000045
    1388:	000086b1 	.word	0x000086b1
    138c:	200001fc 	.word	0x200001fc
    1390:	00006011 	.word	0x00006011
    1394:	000086f1 	.word	0x000086f1
    1398:	000012e9 	.word	0x000012e9

0000139c <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    139c:	b510      	push	{r4, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    139e:	4b01      	ldr	r3, [pc, #4]	; (13a4 <udi_msc_csw_sent+0x8>)
    13a0:	4798      	blx	r3
}
    13a2:	bd10      	pop	{r4, pc}
    13a4:	000012e9 	.word	0x000012e9

000013a8 <udi_msc_csw_send>:
{
    13a8:	b510      	push	{r4, lr}
    13aa:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    13ac:	4b08      	ldr	r3, [pc, #32]	; (13d0 <udi_msc_csw_send+0x28>)
    13ae:	9300      	str	r3, [sp, #0]
    13b0:	230d      	movs	r3, #13
    13b2:	4a08      	ldr	r2, [pc, #32]	; (13d4 <udi_msc_csw_send+0x2c>)
    13b4:	2100      	movs	r1, #0
    13b6:	2081      	movs	r0, #129	; 0x81
    13b8:	4c07      	ldr	r4, [pc, #28]	; (13d8 <udi_msc_csw_send+0x30>)
    13ba:	47a0      	blx	r4
    13bc:	2800      	cmp	r0, #0
    13be:	d001      	beq.n	13c4 <udi_msc_csw_send+0x1c>
}
    13c0:	b002      	add	sp, #8
    13c2:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    13c4:	4905      	ldr	r1, [pc, #20]	; (13dc <udi_msc_csw_send+0x34>)
    13c6:	3081      	adds	r0, #129	; 0x81
    13c8:	4b05      	ldr	r3, [pc, #20]	; (13e0 <udi_msc_csw_send+0x38>)
    13ca:	4798      	blx	r3
}
    13cc:	e7f8      	b.n	13c0 <udi_msc_csw_send+0x18>
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	0000139d 	.word	0x0000139d
    13d4:	20000048 	.word	0x20000048
    13d8:	0000396d 	.word	0x0000396d
    13dc:	000013a9 	.word	0x000013a9
    13e0:	00003915 	.word	0x00003915

000013e4 <udi_msc_cbw_invalid>:
{
    13e4:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    13e6:	4b06      	ldr	r3, [pc, #24]	; (1400 <udi_msc_cbw_invalid+0x1c>)
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	2b00      	cmp	r3, #0
    13ec:	d100      	bne.n	13f0 <udi_msc_cbw_invalid+0xc>
}
    13ee:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    13f0:	2002      	movs	r0, #2
    13f2:	4b04      	ldr	r3, [pc, #16]	; (1404 <udi_msc_cbw_invalid+0x20>)
    13f4:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    13f6:	4904      	ldr	r1, [pc, #16]	; (1408 <udi_msc_cbw_invalid+0x24>)
    13f8:	2002      	movs	r0, #2
    13fa:	4b04      	ldr	r3, [pc, #16]	; (140c <udi_msc_cbw_invalid+0x28>)
    13fc:	4798      	blx	r3
    13fe:	e7f6      	b.n	13ee <udi_msc_cbw_invalid+0xa>
    1400:	200001cc 	.word	0x200001cc
    1404:	000037a1 	.word	0x000037a1
    1408:	000013e5 	.word	0x000013e5
    140c:	00003915 	.word	0x00003915

00001410 <udi_msc_csw_invalid>:
{
    1410:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    1412:	4b06      	ldr	r3, [pc, #24]	; (142c <udi_msc_csw_invalid+0x1c>)
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	2b00      	cmp	r3, #0
    1418:	d100      	bne.n	141c <udi_msc_csw_invalid+0xc>
}
    141a:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    141c:	2081      	movs	r0, #129	; 0x81
    141e:	4b04      	ldr	r3, [pc, #16]	; (1430 <udi_msc_csw_invalid+0x20>)
    1420:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    1422:	4904      	ldr	r1, [pc, #16]	; (1434 <udi_msc_csw_invalid+0x24>)
    1424:	2081      	movs	r0, #129	; 0x81
    1426:	4b04      	ldr	r3, [pc, #16]	; (1438 <udi_msc_csw_invalid+0x28>)
    1428:	4798      	blx	r3
    142a:	e7f6      	b.n	141a <udi_msc_csw_invalid+0xa>
    142c:	200001cc 	.word	0x200001cc
    1430:	000037a1 	.word	0x000037a1
    1434:	00001411 	.word	0x00001411
    1438:	00003915 	.word	0x00003915

0000143c <udi_msc_csw_process>:
{
    143c:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    143e:	4b0b      	ldr	r3, [pc, #44]	; (146c <udi_msc_csw_process+0x30>)
    1440:	689b      	ldr	r3, [r3, #8]
    1442:	2b00      	cmp	r3, #0
    1444:	d006      	beq.n	1454 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    1446:	4b0a      	ldr	r3, [pc, #40]	; (1470 <udi_msc_csw_process+0x34>)
    1448:	7b1b      	ldrb	r3, [r3, #12]
    144a:	2b7f      	cmp	r3, #127	; 0x7f
    144c:	d809      	bhi.n	1462 <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    144e:	2002      	movs	r0, #2
    1450:	4b08      	ldr	r3, [pc, #32]	; (1474 <udi_msc_csw_process+0x38>)
    1452:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    1454:	4b06      	ldr	r3, [pc, #24]	; (1470 <udi_msc_csw_process+0x34>)
    1456:	685a      	ldr	r2, [r3, #4]
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <udi_msc_csw_process+0x30>)
    145a:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    145c:	4b06      	ldr	r3, [pc, #24]	; (1478 <udi_msc_csw_process+0x3c>)
    145e:	4798      	blx	r3
}
    1460:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    1462:	2081      	movs	r0, #129	; 0x81
    1464:	4b03      	ldr	r3, [pc, #12]	; (1474 <udi_msc_csw_process+0x38>)
    1466:	4798      	blx	r3
    1468:	e7f4      	b.n	1454 <udi_msc_csw_process+0x18>
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	20000048 	.word	0x20000048
    1470:	200001d8 	.word	0x200001d8
    1474:	000037a1 	.word	0x000037a1
    1478:	000013a9 	.word	0x000013a9

0000147c <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    147c:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    147e:	4c05      	ldr	r4, [pc, #20]	; (1494 <udi_msc_clear_sense+0x18>)
    1480:	2212      	movs	r2, #18
    1482:	2100      	movs	r1, #0
    1484:	0020      	movs	r0, r4
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <udi_msc_clear_sense+0x1c>)
    1488:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    148a:	23f0      	movs	r3, #240	; 0xf0
    148c:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    148e:	3be6      	subs	r3, #230	; 0xe6
    1490:	71e3      	strb	r3, [r4, #7]
}
    1492:	bd10      	pop	{r4, pc}
    1494:	20000200 	.word	0x20000200
    1498:	00009317 	.word	0x00009317

0000149c <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    149c:	b570      	push	{r4, r5, r6, lr}
    149e:	0006      	movs	r6, r0
    14a0:	000d      	movs	r5, r1
    14a2:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <udi_msc_sense_fail+0x2c>)
    14a6:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    14a8:	2201      	movs	r2, #1
    14aa:	4b08      	ldr	r3, [pc, #32]	; (14cc <udi_msc_sense_fail+0x30>)
    14ac:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    14ae:	4b08      	ldr	r3, [pc, #32]	; (14d0 <udi_msc_sense_fail+0x34>)
    14b0:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    14b2:	0e22      	lsrs	r2, r4, #24
    14b4:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    14b6:	0c22      	lsrs	r2, r4, #16
    14b8:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    14ba:	0a22      	lsrs	r2, r4, #8
    14bc:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    14be:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    14c0:	0a2a      	lsrs	r2, r5, #8
    14c2:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    14c4:	735d      	strb	r5, [r3, #13]
}
    14c6:	bd70      	pop	{r4, r5, r6, pc}
    14c8:	0000147d 	.word	0x0000147d
    14cc:	20000048 	.word	0x20000048
    14d0:	20000200 	.word	0x20000200

000014d4 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
    14d4:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    14d6:	2200      	movs	r2, #0
    14d8:	2190      	movs	r1, #144	; 0x90
    14da:	0189      	lsls	r1, r1, #6
    14dc:	2005      	movs	r0, #5
    14de:	4b01      	ldr	r3, [pc, #4]	; (14e4 <udi_msc_sense_fail_cdb_invalid+0x10>)
    14e0:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    14e2:	bd10      	pop	{r4, pc}
    14e4:	0000149d 	.word	0x0000149d

000014e8 <udi_msc_cbw_validate>:
{
    14e8:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    14ea:	4b09      	ldr	r3, [pc, #36]	; (1510 <udi_msc_cbw_validate+0x28>)
    14ec:	7b1b      	ldrb	r3, [r3, #12]
    14ee:	4059      	eors	r1, r3
    14f0:	b249      	sxtb	r1, r1
    14f2:	2900      	cmp	r1, #0
    14f4:	db04      	blt.n	1500 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    14f6:	4b07      	ldr	r3, [pc, #28]	; (1514 <udi_msc_cbw_validate+0x2c>)
    14f8:	689a      	ldr	r2, [r3, #8]
	return true;
    14fa:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    14fc:	4282      	cmp	r2, r0
    14fe:	d204      	bcs.n	150a <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <udi_msc_cbw_validate+0x30>)
    1502:	4798      	blx	r3
		udi_msc_csw_process();
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <udi_msc_cbw_validate+0x34>)
    1506:	4798      	blx	r3
		return false;
    1508:	2300      	movs	r3, #0
}
    150a:	0018      	movs	r0, r3
    150c:	bd10      	pop	{r4, pc}
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	200001d8 	.word	0x200001d8
    1514:	20000048 	.word	0x20000048
    1518:	000014d5 	.word	0x000014d5
    151c:	0000143d 	.word	0x0000143d

00001520 <udi_msc_sense_fail_hardware>:
{
    1520:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    1522:	2200      	movs	r2, #0
    1524:	2100      	movs	r1, #0
    1526:	2004      	movs	r0, #4
    1528:	4b01      	ldr	r3, [pc, #4]	; (1530 <udi_msc_sense_fail_hardware+0x10>)
    152a:	4798      	blx	r3
}
    152c:	bd10      	pop	{r4, pc}
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	0000149d 	.word	0x0000149d

00001534 <udi_msc_data_send>:
{
    1534:	b510      	push	{r4, lr}
    1536:	b082      	sub	sp, #8
    1538:	0002      	movs	r2, r0
    153a:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    153c:	4907      	ldr	r1, [pc, #28]	; (155c <udi_msc_data_send+0x28>)
    153e:	9100      	str	r1, [sp, #0]
    1540:	2101      	movs	r1, #1
    1542:	2081      	movs	r0, #129	; 0x81
    1544:	4c06      	ldr	r4, [pc, #24]	; (1560 <udi_msc_data_send+0x2c>)
    1546:	47a0      	blx	r4
    1548:	2800      	cmp	r0, #0
    154a:	d001      	beq.n	1550 <udi_msc_data_send+0x1c>
}
    154c:	b002      	add	sp, #8
    154e:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1550:	4b04      	ldr	r3, [pc, #16]	; (1564 <udi_msc_data_send+0x30>)
    1552:	4798      	blx	r3
		udi_msc_csw_process();
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <udi_msc_data_send+0x34>)
    1556:	4798      	blx	r3
}
    1558:	e7f8      	b.n	154c <udi_msc_data_send+0x18>
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	000015ad 	.word	0x000015ad
    1560:	0000396d 	.word	0x0000396d
    1564:	00001521 	.word	0x00001521
    1568:	0000143d 	.word	0x0000143d

0000156c <udi_msc_sense_fail_busy_or_change>:
{
    156c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    156e:	2200      	movs	r2, #0
    1570:	21a0      	movs	r1, #160	; 0xa0
    1572:	0189      	lsls	r1, r1, #6
    1574:	2006      	movs	r0, #6
    1576:	4b01      	ldr	r3, [pc, #4]	; (157c <udi_msc_sense_fail_busy_or_change+0x10>)
    1578:	4798      	blx	r3
}
    157a:	bd10      	pop	{r4, pc}
    157c:	0000149d 	.word	0x0000149d

00001580 <udi_msc_sense_fail_not_present>:
{
    1580:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    1582:	2200      	movs	r2, #0
    1584:	21e8      	movs	r1, #232	; 0xe8
    1586:	0189      	lsls	r1, r1, #6
    1588:	2002      	movs	r0, #2
    158a:	4b01      	ldr	r3, [pc, #4]	; (1590 <udi_msc_sense_fail_not_present+0x10>)
    158c:	4798      	blx	r3
}
    158e:	bd10      	pop	{r4, pc}
    1590:	0000149d 	.word	0x0000149d

00001594 <udi_msc_sense_pass>:
{
    1594:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    1596:	4b03      	ldr	r3, [pc, #12]	; (15a4 <udi_msc_sense_pass+0x10>)
    1598:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    159a:	2200      	movs	r2, #0
    159c:	4b02      	ldr	r3, [pc, #8]	; (15a8 <udi_msc_sense_pass+0x14>)
    159e:	731a      	strb	r2, [r3, #12]
}
    15a0:	bd10      	pop	{r4, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	0000147d 	.word	0x0000147d
    15a8:	20000048 	.word	0x20000048

000015ac <udi_msc_data_sent>:
{
    15ac:	b510      	push	{r4, lr}
    15ae:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    15b0:	2800      	cmp	r0, #0
    15b2:	d000      	beq.n	15b6 <udi_msc_data_sent+0xa>
}
    15b4:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    15b6:	4b04      	ldr	r3, [pc, #16]	; (15c8 <udi_msc_data_sent+0x1c>)
    15b8:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    15ba:	4b04      	ldr	r3, [pc, #16]	; (15cc <udi_msc_data_sent+0x20>)
    15bc:	689a      	ldr	r2, [r3, #8]
    15be:	1b14      	subs	r4, r2, r4
    15c0:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    15c2:	4b03      	ldr	r3, [pc, #12]	; (15d0 <udi_msc_data_sent+0x24>)
    15c4:	4798      	blx	r3
    15c6:	e7f5      	b.n	15b4 <udi_msc_data_sent+0x8>
    15c8:	00001595 	.word	0x00001595
    15cc:	20000048 	.word	0x20000048
    15d0:	0000143d 	.word	0x0000143d

000015d4 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    15d4:	b570      	push	{r4, r5, r6, lr}
    15d6:	0005      	movs	r5, r0
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    15d8:	2214      	movs	r2, #20
    15da:	2100      	movs	r1, #0
    15dc:	4823      	ldr	r0, [pc, #140]	; (166c <udi_msc_spc_mode_sense+0x98>)
    15de:	4b24      	ldr	r3, [pc, #144]	; (1670 <udi_msc_spc_mode_sense+0x9c>)
    15e0:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    15e2:	2d00      	cmp	r5, #0
    15e4:	d018      	beq.n	1618 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    15e6:	4b23      	ldr	r3, [pc, #140]	; (1674 <udi_msc_spc_mode_sense+0xa0>)
    15e8:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    15ea:	4a20      	ldr	r2, [pc, #128]	; (166c <udi_msc_spc_mode_sense+0x98>)
    15ec:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    15ee:	2408      	movs	r4, #8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    15f0:	4b20      	ldr	r3, [pc, #128]	; (1674 <udi_msc_spc_mode_sense+0xa0>)
    15f2:	7c58      	ldrb	r0, [r3, #17]
    15f4:	233f      	movs	r3, #63	; 0x3f
    15f6:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    15f8:	2b1c      	cmp	r3, #28
    15fa:	d013      	beq.n	1624 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    15fc:	2b3f      	cmp	r3, #63	; 0x3f
    15fe:	d011      	beq.n	1624 <udi_msc_spc_mode_sense+0x50>
    1600:	1c20      	adds	r0, r4, #0
    1602:	428c      	cmp	r4, r1
    1604:	d900      	bls.n	1608 <udi_msc_spc_mode_sense+0x34>
    1606:	1c08      	adds	r0, r1, #0
    1608:	b2c6      	uxtb	r6, r0
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    160a:	2180      	movs	r1, #128	; 0x80
    160c:	0030      	movs	r0, r6
    160e:	4b1a      	ldr	r3, [pc, #104]	; (1678 <udi_msc_spc_mode_sense+0xa4>)
    1610:	4798      	blx	r3
    1612:	2800      	cmp	r0, #0
    1614:	d10f      	bne.n	1636 <udi_msc_spc_mode_sense+0x62>
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
    1616:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    1618:	4b16      	ldr	r3, [pc, #88]	; (1674 <udi_msc_spc_mode_sense+0xa0>)
    161a:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    161c:	4a13      	ldr	r2, [pc, #76]	; (166c <udi_msc_spc_mode_sense+0x98>)
    161e:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    1620:	2404      	movs	r4, #4
    1622:	e7e5      	b.n	15f0 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    1624:	231c      	movs	r3, #28
    1626:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    1628:	3b12      	subs	r3, #18
    162a:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    162c:	3b05      	subs	r3, #5
    162e:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1630:	340c      	adds	r4, #12
    1632:	b2e4      	uxtb	r4, r4
    1634:	e7e4      	b.n	1600 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    1636:	4b0f      	ldr	r3, [pc, #60]	; (1674 <udi_msc_spc_mode_sense+0xa0>)
    1638:	7b58      	ldrb	r0, [r3, #13]
    163a:	4b10      	ldr	r3, [pc, #64]	; (167c <udi_msc_spc_mode_sense+0xa8>)
    163c:	4798      	blx	r3
    163e:	1e43      	subs	r3, r0, #1
    1640:	4198      	sbcs	r0, r3
    1642:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    1644:	2d00      	cmp	r5, #0
    1646:	d00c      	beq.n	1662 <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1648:	3c02      	subs	r4, #2
    164a:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    164c:	4a07      	ldr	r2, [pc, #28]	; (166c <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    164e:	0a23      	lsrs	r3, r4, #8
    1650:	0224      	lsls	r4, r4, #8
    1652:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    1654:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    1656:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1658:	0031      	movs	r1, r6
    165a:	4804      	ldr	r0, [pc, #16]	; (166c <udi_msc_spc_mode_sense+0x98>)
    165c:	4b08      	ldr	r3, [pc, #32]	; (1680 <udi_msc_spc_mode_sense+0xac>)
    165e:	4798      	blx	r3
    1660:	e7d9      	b.n	1616 <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    1662:	4b02      	ldr	r3, [pc, #8]	; (166c <udi_msc_spc_mode_sense+0x98>)
    1664:	3c01      	subs	r4, #1
    1666:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1668:	7098      	strb	r0, [r3, #2]
    166a:	e7f5      	b.n	1658 <udi_msc_spc_mode_sense+0x84>
    166c:	200001b4 	.word	0x200001b4
    1670:	00009317 	.word	0x00009317
    1674:	200001d8 	.word	0x200001d8
    1678:	000014e9 	.word	0x000014e9
    167c:	00008701 	.word	0x00008701
    1680:	00001535 	.word	0x00001535

00001684 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
    1684:	b510      	push	{r4, lr}
    1686:	1e04      	subs	r4, r0, #0
	uint32_t trans_size;

	if (!b_read) {
    1688:	d01e      	beq.n	16c8 <udi_msc_sbc_trans+0x44>
			udi_msc_csw_process();
			return;
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    168a:	4a17      	ldr	r2, [pc, #92]	; (16e8 <udi_msc_sbc_trans+0x64>)
    168c:	4b17      	ldr	r3, [pc, #92]	; (16ec <udi_msc_sbc_trans+0x68>)
    168e:	7c59      	ldrb	r1, [r3, #17]
    1690:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    1692:	7c99      	ldrb	r1, [r3, #18]
    1694:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    1696:	7cd9      	ldrb	r1, [r3, #19]
    1698:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    169a:	7d19      	ldrb	r1, [r3, #20]
    169c:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    169e:	4a14      	ldr	r2, [pc, #80]	; (16f0 <udi_msc_sbc_trans+0x6c>)
    16a0:	7d99      	ldrb	r1, [r3, #22]
    16a2:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    16a4:	7ddb      	ldrb	r3, [r3, #23]
    16a6:	7013      	strb	r3, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    16a8:	8810      	ldrh	r0, [r2, #0]
    16aa:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    16ac:	0021      	movs	r1, r4
    16ae:	1e4b      	subs	r3, r1, #1
    16b0:	4199      	sbcs	r1, r3
    16b2:	01c9      	lsls	r1, r1, #7
    16b4:	4b0f      	ldr	r3, [pc, #60]	; (16f4 <udi_msc_sbc_trans+0x70>)
    16b6:	4798      	blx	r3
    16b8:	2800      	cmp	r0, #0
    16ba:	d004      	beq.n	16c6 <udi_msc_sbc_trans+0x42>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    16bc:	4b0e      	ldr	r3, [pc, #56]	; (16f8 <udi_msc_sbc_trans+0x74>)
    16be:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    16c0:	2201      	movs	r2, #1
    16c2:	4b0e      	ldr	r3, [pc, #56]	; (16fc <udi_msc_sbc_trans+0x78>)
    16c4:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    16c6:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    16c8:	4b08      	ldr	r3, [pc, #32]	; (16ec <udi_msc_sbc_trans+0x68>)
    16ca:	7b58      	ldrb	r0, [r3, #13]
    16cc:	4b0c      	ldr	r3, [pc, #48]	; (1700 <udi_msc_sbc_trans+0x7c>)
    16ce:	4798      	blx	r3
    16d0:	2800      	cmp	r0, #0
    16d2:	d0da      	beq.n	168a <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    16d4:	2200      	movs	r2, #0
    16d6:	219c      	movs	r1, #156	; 0x9c
    16d8:	0189      	lsls	r1, r1, #6
    16da:	2007      	movs	r0, #7
    16dc:	4b09      	ldr	r3, [pc, #36]	; (1704 <udi_msc_sbc_trans+0x80>)
    16de:	4798      	blx	r3
			udi_msc_csw_process();
    16e0:	4b09      	ldr	r3, [pc, #36]	; (1708 <udi_msc_sbc_trans+0x84>)
    16e2:	4798      	blx	r3
			return;
    16e4:	e7ef      	b.n	16c6 <udi_msc_sbc_trans+0x42>
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	200001c8 	.word	0x200001c8
    16ec:	200001d8 	.word	0x200001d8
    16f0:	200001f8 	.word	0x200001f8
    16f4:	000014e9 	.word	0x000014e9
    16f8:	200001cd 	.word	0x200001cd
    16fc:	200001ce 	.word	0x200001ce
    1700:	00008701 	.word	0x00008701
    1704:	0000149d 	.word	0x0000149d
    1708:	0000143d 	.word	0x0000143d

0000170c <udi_msc_cbw_received>:
{
    170c:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    170e:	2800      	cmp	r0, #0
    1710:	d10d      	bne.n	172e <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    1712:	291f      	cmp	r1, #31
    1714:	d104      	bne.n	1720 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    1716:	4b84      	ldr	r3, [pc, #528]	; (1928 <udi_msc_cbw_received+0x21c>)
    1718:	4a84      	ldr	r2, [pc, #528]	; (192c <udi_msc_cbw_received+0x220>)
    171a:	6812      	ldr	r2, [r2, #0]
    171c:	429a      	cmp	r2, r3
    171e:	d007      	beq.n	1730 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    1720:	2201      	movs	r2, #1
    1722:	4b83      	ldr	r3, [pc, #524]	; (1930 <udi_msc_cbw_received+0x224>)
    1724:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    1726:	4b83      	ldr	r3, [pc, #524]	; (1934 <udi_msc_cbw_received+0x228>)
    1728:	4798      	blx	r3
		udi_msc_csw_invalid();
    172a:	4b83      	ldr	r3, [pc, #524]	; (1938 <udi_msc_cbw_received+0x22c>)
    172c:	4798      	blx	r3
}
    172e:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    1730:	4b7e      	ldr	r3, [pc, #504]	; (192c <udi_msc_cbw_received+0x220>)
    1732:	7b58      	ldrb	r0, [r3, #13]
    1734:	220f      	movs	r2, #15
    1736:	4010      	ands	r0, r2
    1738:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    173a:	4b80      	ldr	r3, [pc, #512]	; (193c <udi_msc_cbw_received+0x230>)
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	4283      	cmp	r3, r0
    1740:	d30b      	bcc.n	175a <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    1742:	4b7a      	ldr	r3, [pc, #488]	; (192c <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    1744:	4a7e      	ldr	r2, [pc, #504]	; (1940 <udi_msc_cbw_received+0x234>)
    1746:	6899      	ldr	r1, [r3, #8]
    1748:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    174a:	7bda      	ldrb	r2, [r3, #15]
    174c:	2a5a      	cmp	r2, #90	; 0x5a
    174e:	d900      	bls.n	1752 <udi_msc_cbw_received+0x46>
    1750:	e0d2      	b.n	18f8 <udi_msc_cbw_received+0x1ec>
    1752:	0093      	lsls	r3, r2, #2
    1754:	4a7b      	ldr	r2, [pc, #492]	; (1944 <udi_msc_cbw_received+0x238>)
    1756:	58d3      	ldr	r3, [r2, r3]
    1758:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    175a:	4b7b      	ldr	r3, [pc, #492]	; (1948 <udi_msc_cbw_received+0x23c>)
    175c:	4798      	blx	r3
		udi_msc_csw_process();
    175e:	4b7b      	ldr	r3, [pc, #492]	; (194c <udi_msc_cbw_received+0x240>)
    1760:	4798      	blx	r3
		return;
    1762:	e7e4      	b.n	172e <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    1764:	4b71      	ldr	r3, [pc, #452]	; (192c <udi_msc_cbw_received+0x220>)
    1766:	7cda      	ldrb	r2, [r3, #19]
    1768:	1c13      	adds	r3, r2, #0
    176a:	2a12      	cmp	r2, #18
    176c:	d900      	bls.n	1770 <udi_msc_cbw_received+0x64>
    176e:	2312      	movs	r3, #18
    1770:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1772:	2180      	movs	r1, #128	; 0x80
    1774:	0020      	movs	r0, r4
    1776:	4b76      	ldr	r3, [pc, #472]	; (1950 <udi_msc_cbw_received+0x244>)
    1778:	4798      	blx	r3
    177a:	2800      	cmp	r0, #0
    177c:	d0d7      	beq.n	172e <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    177e:	0021      	movs	r1, r4
    1780:	4874      	ldr	r0, [pc, #464]	; (1954 <udi_msc_cbw_received+0x248>)
    1782:	4b75      	ldr	r3, [pc, #468]	; (1958 <udi_msc_cbw_received+0x24c>)
    1784:	4798      	blx	r3
    1786:	e7d2      	b.n	172e <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1788:	4b68      	ldr	r3, [pc, #416]	; (192c <udi_msc_cbw_received+0x220>)
    178a:	7cdb      	ldrb	r3, [r3, #19]
    178c:	1c1a      	adds	r2, r3, #0
    178e:	2b24      	cmp	r3, #36	; 0x24
    1790:	d900      	bls.n	1794 <udi_msc_cbw_received+0x88>
    1792:	2224      	movs	r2, #36	; 0x24
    1794:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1796:	2180      	movs	r1, #128	; 0x80
    1798:	0020      	movs	r0, r4
    179a:	4b6d      	ldr	r3, [pc, #436]	; (1950 <udi_msc_cbw_received+0x244>)
    179c:	4798      	blx	r3
    179e:	2800      	cmp	r0, #0
    17a0:	d0c5      	beq.n	172e <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    17a2:	4b62      	ldr	r3, [pc, #392]	; (192c <udi_msc_cbw_received+0x220>)
    17a4:	7c1b      	ldrb	r3, [r3, #16]
    17a6:	079b      	lsls	r3, r3, #30
    17a8:	d103      	bne.n	17b2 <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    17aa:	4b60      	ldr	r3, [pc, #384]	; (192c <udi_msc_cbw_received+0x220>)
    17ac:	7c5d      	ldrb	r5, [r3, #17]
    17ae:	2d00      	cmp	r5, #0
    17b0:	d004      	beq.n	17bc <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    17b2:	4b65      	ldr	r3, [pc, #404]	; (1948 <udi_msc_cbw_received+0x23c>)
    17b4:	4798      	blx	r3
		udi_msc_csw_process();
    17b6:	4b65      	ldr	r3, [pc, #404]	; (194c <udi_msc_cbw_received+0x240>)
    17b8:	4798      	blx	r3
    17ba:	e7b8      	b.n	172e <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    17bc:	4b5b      	ldr	r3, [pc, #364]	; (192c <udi_msc_cbw_received+0x220>)
    17be:	7b58      	ldrb	r0, [r3, #13]
    17c0:	4b66      	ldr	r3, [pc, #408]	; (195c <udi_msc_cbw_received+0x250>)
    17c2:	4798      	blx	r3
    17c4:	2380      	movs	r3, #128	; 0x80
    17c6:	2800      	cmp	r0, #0
    17c8:	d100      	bne.n	17cc <udi_msc_cbw_received+0xc0>
    17ca:	002b      	movs	r3, r5
    17cc:	4e64      	ldr	r6, [pc, #400]	; (1960 <udi_msc_cbw_received+0x254>)
    17ce:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    17d0:	4b56      	ldr	r3, [pc, #344]	; (192c <udi_msc_cbw_received+0x220>)
    17d2:	7b58      	ldrb	r0, [r3, #13]
    17d4:	4b63      	ldr	r3, [pc, #396]	; (1964 <udi_msc_cbw_received+0x258>)
    17d6:	4798      	blx	r3
    17d8:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    17da:	0030      	movs	r0, r6
    17dc:	3010      	adds	r0, #16
    17de:	3101      	adds	r1, #1
    17e0:	2210      	movs	r2, #16
    17e2:	4b61      	ldr	r3, [pc, #388]	; (1968 <udi_msc_cbw_received+0x25c>)
    17e4:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    17e6:	7c33      	ldrb	r3, [r6, #16]
    17e8:	2b00      	cmp	r3, #0
    17ea:	d100      	bne.n	17ee <udi_msc_cbw_received+0xe2>
    17ec:	e08e      	b.n	190c <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    17ee:	2b22      	cmp	r3, #34	; 0x22
    17f0:	d100      	bne.n	17f4 <udi_msc_cbw_received+0xe8>
    17f2:	e08a      	b.n	190a <udi_msc_cbw_received+0x1fe>
    17f4:	495a      	ldr	r1, [pc, #360]	; (1960 <udi_msc_cbw_received+0x254>)
		i++;
    17f6:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    17f8:	7c4a      	ldrb	r2, [r1, #17]
    17fa:	2a00      	cmp	r2, #0
    17fc:	d100      	bne.n	1800 <udi_msc_cbw_received+0xf4>
    17fe:	e085      	b.n	190c <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    1800:	2a22      	cmp	r2, #34	; 0x22
    1802:	d100      	bne.n	1806 <udi_msc_cbw_received+0xfa>
    1804:	e082      	b.n	190c <udi_msc_cbw_received+0x200>
		i++;
    1806:	3301      	adds	r3, #1
    1808:	b2db      	uxtb	r3, r3
    180a:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    180c:	2b10      	cmp	r3, #16
    180e:	d1f3      	bne.n	17f8 <udi_msc_cbw_received+0xec>
    1810:	e084      	b.n	191c <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    1812:	2000      	movs	r0, #0
    1814:	4b55      	ldr	r3, [pc, #340]	; (196c <udi_msc_cbw_received+0x260>)
    1816:	4798      	blx	r3
		break;
    1818:	e789      	b.n	172e <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    181a:	2001      	movs	r0, #1
    181c:	4b53      	ldr	r3, [pc, #332]	; (196c <udi_msc_cbw_received+0x260>)
    181e:	4798      	blx	r3
		break;
    1820:	e785      	b.n	172e <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    1822:	4b53      	ldr	r3, [pc, #332]	; (1970 <udi_msc_cbw_received+0x264>)
    1824:	4798      	blx	r3
    1826:	2802      	cmp	r0, #2
    1828:	d009      	beq.n	183e <udi_msc_cbw_received+0x132>
    182a:	2803      	cmp	r0, #3
    182c:	d004      	beq.n	1838 <udi_msc_cbw_received+0x12c>
    182e:	2800      	cmp	r0, #0
    1830:	d008      	beq.n	1844 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    1832:	4b50      	ldr	r3, [pc, #320]	; (1974 <udi_msc_cbw_received+0x268>)
    1834:	4798      	blx	r3
    1836:	e007      	b.n	1848 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    1838:	4b4f      	ldr	r3, [pc, #316]	; (1978 <udi_msc_cbw_received+0x26c>)
    183a:	4798      	blx	r3
    183c:	e004      	b.n	1848 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    183e:	4b4f      	ldr	r3, [pc, #316]	; (197c <udi_msc_cbw_received+0x270>)
    1840:	4798      	blx	r3
    1842:	e001      	b.n	1848 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    1844:	4b4e      	ldr	r3, [pc, #312]	; (1980 <udi_msc_cbw_received+0x274>)
    1846:	4798      	blx	r3
	udi_msc_csw_process();
    1848:	4b40      	ldr	r3, [pc, #256]	; (194c <udi_msc_cbw_received+0x240>)
    184a:	4798      	blx	r3
    184c:	e76f      	b.n	172e <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    184e:	2180      	movs	r1, #128	; 0x80
    1850:	2008      	movs	r0, #8
    1852:	4b3f      	ldr	r3, [pc, #252]	; (1950 <udi_msc_cbw_received+0x244>)
    1854:	4798      	blx	r3
    1856:	2800      	cmp	r0, #0
    1858:	d100      	bne.n	185c <udi_msc_cbw_received+0x150>
    185a:	e768      	b.n	172e <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    185c:	4b33      	ldr	r3, [pc, #204]	; (192c <udi_msc_cbw_received+0x220>)
    185e:	7b58      	ldrb	r0, [r3, #13]
    1860:	4948      	ldr	r1, [pc, #288]	; (1984 <udi_msc_cbw_received+0x278>)
    1862:	4b49      	ldr	r3, [pc, #292]	; (1988 <udi_msc_cbw_received+0x27c>)
    1864:	4798      	blx	r3
    1866:	2802      	cmp	r0, #2
    1868:	d00d      	beq.n	1886 <udi_msc_cbw_received+0x17a>
    186a:	2803      	cmp	r0, #3
    186c:	d006      	beq.n	187c <udi_msc_cbw_received+0x170>
    186e:	2800      	cmp	r0, #0
    1870:	d00e      	beq.n	1890 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    1872:	4b40      	ldr	r3, [pc, #256]	; (1974 <udi_msc_cbw_received+0x268>)
    1874:	4798      	blx	r3
		udi_msc_csw_process();
    1876:	4b35      	ldr	r3, [pc, #212]	; (194c <udi_msc_cbw_received+0x240>)
    1878:	4798      	blx	r3
    187a:	e758      	b.n	172e <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    187c:	4b3e      	ldr	r3, [pc, #248]	; (1978 <udi_msc_cbw_received+0x26c>)
    187e:	4798      	blx	r3
		udi_msc_csw_process();
    1880:	4b32      	ldr	r3, [pc, #200]	; (194c <udi_msc_cbw_received+0x240>)
    1882:	4798      	blx	r3
    1884:	e753      	b.n	172e <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    1886:	4b3d      	ldr	r3, [pc, #244]	; (197c <udi_msc_cbw_received+0x270>)
    1888:	4798      	blx	r3
		udi_msc_csw_process();
    188a:	4b30      	ldr	r3, [pc, #192]	; (194c <udi_msc_cbw_received+0x240>)
    188c:	4798      	blx	r3
    188e:	e74e      	b.n	172e <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1890:	483c      	ldr	r0, [pc, #240]	; (1984 <udi_msc_cbw_received+0x278>)
    1892:	2380      	movs	r3, #128	; 0x80
    1894:	029b      	lsls	r3, r3, #10
    1896:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1898:	6803      	ldr	r3, [r0, #0]
    189a:	ba1b      	rev	r3, r3
    189c:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    189e:	2108      	movs	r1, #8
    18a0:	4b2d      	ldr	r3, [pc, #180]	; (1958 <udi_msc_cbw_received+0x24c>)
    18a2:	4798      	blx	r3
    18a4:	e743      	b.n	172e <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    18a6:	4b21      	ldr	r3, [pc, #132]	; (192c <udi_msc_cbw_received+0x220>)
    18a8:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    18aa:	079a      	lsls	r2, r3, #30
    18ac:	d404      	bmi.n	18b8 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    18ae:	4b34      	ldr	r3, [pc, #208]	; (1980 <udi_msc_cbw_received+0x274>)
    18b0:	4798      	blx	r3
	udi_msc_csw_process();
    18b2:	4b26      	ldr	r3, [pc, #152]	; (194c <udi_msc_cbw_received+0x240>)
    18b4:	4798      	blx	r3
    18b6:	e73a      	b.n	172e <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    18b8:	2101      	movs	r1, #1
    18ba:	404b      	eors	r3, r1
    18bc:	2101      	movs	r1, #1
    18be:	4019      	ands	r1, r3
    18c0:	4b32      	ldr	r3, [pc, #200]	; (198c <udi_msc_cbw_received+0x280>)
    18c2:	4798      	blx	r3
    18c4:	e7f3      	b.n	18ae <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    18c6:	4b19      	ldr	r3, [pc, #100]	; (192c <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    18c8:	7cdb      	ldrb	r3, [r3, #19]
    18ca:	2b00      	cmp	r3, #0
    18cc:	d004      	beq.n	18d8 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    18ce:	4b1e      	ldr	r3, [pc, #120]	; (1948 <udi_msc_cbw_received+0x23c>)
    18d0:	4798      	blx	r3
	udi_msc_csw_process();
    18d2:	4b1e      	ldr	r3, [pc, #120]	; (194c <udi_msc_cbw_received+0x240>)
    18d4:	4798      	blx	r3
    18d6:	e72a      	b.n	172e <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    18d8:	4b29      	ldr	r3, [pc, #164]	; (1980 <udi_msc_cbw_received+0x274>)
    18da:	4798      	blx	r3
    18dc:	e7f9      	b.n	18d2 <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    18de:	4b28      	ldr	r3, [pc, #160]	; (1980 <udi_msc_cbw_received+0x274>)
    18e0:	4798      	blx	r3
		udi_msc_csw_process();
    18e2:	4b1a      	ldr	r3, [pc, #104]	; (194c <udi_msc_cbw_received+0x240>)
    18e4:	4798      	blx	r3
		break;
    18e6:	e722      	b.n	172e <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    18e8:	2001      	movs	r0, #1
    18ea:	4b29      	ldr	r3, [pc, #164]	; (1990 <udi_msc_cbw_received+0x284>)
    18ec:	4798      	blx	r3
		break;
    18ee:	e71e      	b.n	172e <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    18f0:	2000      	movs	r0, #0
    18f2:	4b27      	ldr	r3, [pc, #156]	; (1990 <udi_msc_cbw_received+0x284>)
    18f4:	4798      	blx	r3
		break;
    18f6:	e71a      	b.n	172e <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    18f8:	2200      	movs	r2, #0
    18fa:	2180      	movs	r1, #128	; 0x80
    18fc:	0189      	lsls	r1, r1, #6
    18fe:	2005      	movs	r0, #5
    1900:	4b24      	ldr	r3, [pc, #144]	; (1994 <udi_msc_cbw_received+0x288>)
    1902:	4798      	blx	r3
		udi_msc_csw_process();
    1904:	4b11      	ldr	r3, [pc, #68]	; (194c <udi_msc_cbw_received+0x240>)
    1906:	4798      	blx	r3
		break;
    1908:	e711      	b.n	172e <udi_msc_cbw_received+0x22>
	i = 0;
    190a:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    190c:	4814      	ldr	r0, [pc, #80]	; (1960 <udi_msc_cbw_received+0x254>)
    190e:	2120      	movs	r1, #32
    1910:	18c2      	adds	r2, r0, r3
    1912:	7411      	strb	r1, [r2, #16]
		i++;
    1914:	3301      	adds	r3, #1
    1916:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    1918:	2b10      	cmp	r3, #16
    191a:	d1f9      	bne.n	1910 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    191c:	0021      	movs	r1, r4
    191e:	4810      	ldr	r0, [pc, #64]	; (1960 <udi_msc_cbw_received+0x254>)
    1920:	4b0d      	ldr	r3, [pc, #52]	; (1958 <udi_msc_cbw_received+0x24c>)
    1922:	4798      	blx	r3
    1924:	e703      	b.n	172e <udi_msc_cbw_received+0x22>
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	43425355 	.word	0x43425355
    192c:	200001d8 	.word	0x200001d8
    1930:	200001cc 	.word	0x200001cc
    1934:	000013e5 	.word	0x000013e5
    1938:	00001411 	.word	0x00001411
    193c:	200001fc 	.word	0x200001fc
    1940:	20000048 	.word	0x20000048
    1944:	0000a400 	.word	0x0000a400
    1948:	000014d5 	.word	0x000014d5
    194c:	0000143d 	.word	0x0000143d
    1950:	000014e9 	.word	0x000014e9
    1954:	20000200 	.word	0x20000200
    1958:	00001535 	.word	0x00001535
    195c:	00008719 	.word	0x00008719
    1960:	20000058 	.word	0x20000058
    1964:	00008731 	.word	0x00008731
    1968:	00009305 	.word	0x00009305
    196c:	000015d5 	.word	0x000015d5
    1970:	000086b5 	.word	0x000086b5
    1974:	00001521 	.word	0x00001521
    1978:	0000156d 	.word	0x0000156d
    197c:	00001581 	.word	0x00001581
    1980:	00001595 	.word	0x00001595
    1984:	200001d0 	.word	0x200001d0
    1988:	000086cd 	.word	0x000086cd
    198c:	000086f1 	.word	0x000086f1
    1990:	00001685 	.word	0x00001685
    1994:	0000149d 	.word	0x0000149d

00001998 <udi_msc_disable>:
{
    1998:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    199a:	2200      	movs	r2, #0
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <udi_msc_disable+0x18>)
    199e:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    19a0:	2301      	movs	r3, #1
    19a2:	4a04      	ldr	r2, [pc, #16]	; (19b4 <udi_msc_disable+0x1c>)
    19a4:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    19a6:	4a04      	ldr	r2, [pc, #16]	; (19b8 <udi_msc_disable+0x20>)
    19a8:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    19aa:	4b04      	ldr	r3, [pc, #16]	; (19bc <udi_msc_disable+0x24>)
    19ac:	4798      	blx	r3
}
    19ae:	bd10      	pop	{r4, pc}
    19b0:	200001ce 	.word	0x200001ce
    19b4:	20000044 	.word	0x20000044
    19b8:	20000045 	.word	0x20000045
    19bc:	00006021 	.word	0x00006021

000019c0 <udi_msc_setup>:
{
    19c0:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    19c2:	4b20      	ldr	r3, [pc, #128]	; (1a44 <udi_msc_setup+0x84>)
    19c4:	781a      	ldrb	r2, [r3, #0]
    19c6:	b253      	sxtb	r3, r2
    19c8:	2b00      	cmp	r3, #0
    19ca:	db05      	blt.n	19d8 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19cc:	2360      	movs	r3, #96	; 0x60
    19ce:	4013      	ands	r3, r2
	return false;	// Not supported request
    19d0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19d2:	2b20      	cmp	r3, #32
    19d4:	d018      	beq.n	1a08 <udi_msc_setup+0x48>
}
    19d6:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19d8:	2360      	movs	r3, #96	; 0x60
    19da:	4013      	ands	r3, r2
	return false;	// Not supported request
    19dc:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    19de:	2b20      	cmp	r3, #32
    19e0:	d1f9      	bne.n	19d6 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    19e2:	4b18      	ldr	r3, [pc, #96]	; (1a44 <udi_msc_setup+0x84>)
    19e4:	785b      	ldrb	r3, [r3, #1]
    19e6:	2bfe      	cmp	r3, #254	; 0xfe
    19e8:	d127      	bne.n	1a3a <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    19ea:	4b16      	ldr	r3, [pc, #88]	; (1a44 <udi_msc_setup+0x84>)
    19ec:	88db      	ldrh	r3, [r3, #6]
    19ee:	2b01      	cmp	r3, #1
    19f0:	d1f1      	bne.n	19d6 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    19f2:	4b14      	ldr	r3, [pc, #80]	; (1a44 <udi_msc_setup+0x84>)
    19f4:	885b      	ldrh	r3, [r3, #2]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d1ed      	bne.n	19d6 <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    19fa:	4b12      	ldr	r3, [pc, #72]	; (1a44 <udi_msc_setup+0x84>)
    19fc:	4a12      	ldr	r2, [pc, #72]	; (1a48 <udi_msc_setup+0x88>)
    19fe:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1a00:	2201      	movs	r2, #1
    1a02:	819a      	strh	r2, [r3, #12]
				return true;
    1a04:	3001      	adds	r0, #1
    1a06:	e7e6      	b.n	19d6 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1a08:	4b0e      	ldr	r3, [pc, #56]	; (1a44 <udi_msc_setup+0x84>)
    1a0a:	785b      	ldrb	r3, [r3, #1]
    1a0c:	2bff      	cmp	r3, #255	; 0xff
    1a0e:	d116      	bne.n	1a3e <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1a10:	4b0c      	ldr	r3, [pc, #48]	; (1a44 <udi_msc_setup+0x84>)
    1a12:	88db      	ldrh	r3, [r3, #6]
    1a14:	2b00      	cmp	r3, #0
    1a16:	d1de      	bne.n	19d6 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1a18:	4b0a      	ldr	r3, [pc, #40]	; (1a44 <udi_msc_setup+0x84>)
    1a1a:	885b      	ldrh	r3, [r3, #2]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d1da      	bne.n	19d6 <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1a20:	4a0a      	ldr	r2, [pc, #40]	; (1a4c <udi_msc_setup+0x8c>)
    1a22:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1a24:	4a0a      	ldr	r2, [pc, #40]	; (1a50 <udi_msc_setup+0x90>)
    1a26:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1a28:	3002      	adds	r0, #2
    1a2a:	4c0a      	ldr	r4, [pc, #40]	; (1a54 <udi_msc_setup+0x94>)
    1a2c:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1a2e:	2081      	movs	r0, #129	; 0x81
    1a30:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1a32:	4b09      	ldr	r3, [pc, #36]	; (1a58 <udi_msc_setup+0x98>)
    1a34:	4798      	blx	r3
				return true;
    1a36:	2001      	movs	r0, #1
    1a38:	e7cd      	b.n	19d6 <udi_msc_setup+0x16>
	return false;	// Not supported request
    1a3a:	2000      	movs	r0, #0
    1a3c:	e7cb      	b.n	19d6 <udi_msc_setup+0x16>
    1a3e:	2000      	movs	r0, #0
    1a40:	e7c9      	b.n	19d6 <udi_msc_setup+0x16>
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	200005bc 	.word	0x200005bc
    1a48:	200001fc 	.word	0x200001fc
    1a4c:	200001cc 	.word	0x200001cc
    1a50:	200001ce 	.word	0x200001ce
    1a54:	000035e1 	.word	0x000035e1
    1a58:	000012e9 	.word	0x000012e9

00001a5c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1a5c:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1a5e:	4b11      	ldr	r3, [pc, #68]	; (1aa4 <udc_next_desc_in_iface+0x48>)
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1a64:	7894      	ldrb	r4, [r2, #2]
    1a66:	78d3      	ldrb	r3, [r2, #3]
    1a68:	021b      	lsls	r3, r3, #8
    1a6a:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1a6c:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1a6e:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1a70:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1a72:	4290      	cmp	r0, r2
    1a74:	d210      	bcs.n	1a98 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1a76:	7843      	ldrb	r3, [r0, #1]
    1a78:	2b04      	cmp	r3, #4
    1a7a:	d00f      	beq.n	1a9c <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1a7c:	428b      	cmp	r3, r1
    1a7e:	d00a      	beq.n	1a96 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1a80:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1a82:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1a84:	4290      	cmp	r0, r2
    1a86:	d205      	bcs.n	1a94 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1a88:	7843      	ldrb	r3, [r0, #1]
    1a8a:	2b04      	cmp	r3, #4
    1a8c:	d008      	beq.n	1aa0 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1a8e:	428b      	cmp	r3, r1
    1a90:	d1f6      	bne.n	1a80 <udc_next_desc_in_iface+0x24>
    1a92:	e000      	b.n	1a96 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1a94:	2000      	movs	r0, #0
}
    1a96:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1a98:	2000      	movs	r0, #0
    1a9a:	e7fc      	b.n	1a96 <udc_next_desc_in_iface+0x3a>
    1a9c:	2000      	movs	r0, #0
    1a9e:	e7fa      	b.n	1a96 <udc_next_desc_in_iface+0x3a>
    1aa0:	2000      	movs	r0, #0
    1aa2:	e7f8      	b.n	1a96 <udc_next_desc_in_iface+0x3a>
    1aa4:	20000220 	.word	0x20000220

00001aa8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1aa8:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1aaa:	4b03      	ldr	r3, [pc, #12]	; (1ab8 <udc_valid_address+0x10>)
    1aac:	885b      	ldrh	r3, [r3, #2]
    1aae:	207f      	movs	r0, #127	; 0x7f
    1ab0:	4018      	ands	r0, r3
    1ab2:	4b02      	ldr	r3, [pc, #8]	; (1abc <udc_valid_address+0x14>)
    1ab4:	4798      	blx	r3
}
    1ab6:	bd10      	pop	{r4, pc}
    1ab8:	200005bc 	.word	0x200005bc
    1abc:	00003b45 	.word	0x00003b45

00001ac0 <udc_update_iface_desc>:
{
    1ac0:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1ac2:	4b19      	ldr	r3, [pc, #100]	; (1b28 <udc_update_iface_desc+0x68>)
    1ac4:	781b      	ldrb	r3, [r3, #0]
		return false;
    1ac6:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d029      	beq.n	1b20 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1acc:	4b17      	ldr	r3, [pc, #92]	; (1b2c <udc_update_iface_desc+0x6c>)
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	791c      	ldrb	r4, [r3, #4]
    1ad4:	4284      	cmp	r4, r0
    1ad6:	d923      	bls.n	1b20 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1ad8:	4a15      	ldr	r2, [pc, #84]	; (1b30 <udc_update_iface_desc+0x70>)
    1ada:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1adc:	789a      	ldrb	r2, [r3, #2]
    1ade:	78dc      	ldrb	r4, [r3, #3]
    1ae0:	0224      	lsls	r4, r4, #8
    1ae2:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1ae4:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1ae6:	42a3      	cmp	r3, r4
    1ae8:	d21c      	bcs.n	1b24 <udc_update_iface_desc+0x64>
    1aea:	2500      	movs	r5, #0
    1aec:	2601      	movs	r6, #1
    1aee:	e007      	b.n	1b00 <udc_update_iface_desc+0x40>
    1af0:	4a0f      	ldr	r2, [pc, #60]	; (1b30 <udc_update_iface_desc+0x70>)
    1af2:	6013      	str	r3, [r2, #0]
    1af4:	e00f      	b.n	1b16 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1af6:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1af8:	189b      	adds	r3, r3, r2
    1afa:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1afc:	42a3      	cmp	r3, r4
    1afe:	d20c      	bcs.n	1b1a <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1b00:	785a      	ldrb	r2, [r3, #1]
    1b02:	2a04      	cmp	r2, #4
    1b04:	d1f7      	bne.n	1af6 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1b06:	789a      	ldrb	r2, [r3, #2]
    1b08:	4282      	cmp	r2, r0
    1b0a:	d1f4      	bne.n	1af6 <udc_update_iface_desc+0x36>
    1b0c:	78da      	ldrb	r2, [r3, #3]
    1b0e:	428a      	cmp	r2, r1
    1b10:	d1f1      	bne.n	1af6 <udc_update_iface_desc+0x36>
    1b12:	2d00      	cmp	r5, #0
    1b14:	d1ec      	bne.n	1af0 <udc_update_iface_desc+0x30>
				return true; // Interface found
    1b16:	2201      	movs	r2, #1
    1b18:	e002      	b.n	1b20 <udc_update_iface_desc+0x60>
    1b1a:	4a05      	ldr	r2, [pc, #20]	; (1b30 <udc_update_iface_desc+0x70>)
    1b1c:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1b1e:	2200      	movs	r2, #0
}
    1b20:	0010      	movs	r0, r2
    1b22:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1b24:	2200      	movs	r2, #0
    1b26:	e7fb      	b.n	1b20 <udc_update_iface_desc+0x60>
    1b28:	2000021c 	.word	0x2000021c
    1b2c:	20000220 	.word	0x20000220
    1b30:	20000224 	.word	0x20000224

00001b34 <udc_iface_disable>:
{
    1b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b36:	46c6      	mov	lr, r8
    1b38:	b500      	push	{lr}
    1b3a:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b3c:	2100      	movs	r1, #0
    1b3e:	4b13      	ldr	r3, [pc, #76]	; (1b8c <udc_iface_disable+0x58>)
    1b40:	4798      	blx	r3
    1b42:	1e05      	subs	r5, r0, #0
    1b44:	d103      	bne.n	1b4e <udc_iface_disable+0x1a>
}
    1b46:	0028      	movs	r0, r5
    1b48:	bc04      	pop	{r2}
    1b4a:	4690      	mov	r8, r2
    1b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b4e:	4b10      	ldr	r3, [pc, #64]	; (1b90 <udc_iface_disable+0x5c>)
    1b50:	681b      	ldr	r3, [r3, #0]
    1b52:	685b      	ldr	r3, [r3, #4]
    1b54:	00a2      	lsls	r2, r4, #2
    1b56:	58d3      	ldr	r3, [r2, r3]
    1b58:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1b5a:	68db      	ldr	r3, [r3, #12]
    1b5c:	4798      	blx	r3
    1b5e:	0001      	movs	r1, r0
    1b60:	0020      	movs	r0, r4
    1b62:	4b0a      	ldr	r3, [pc, #40]	; (1b8c <udc_iface_disable+0x58>)
    1b64:	4798      	blx	r3
    1b66:	1e05      	subs	r5, r0, #0
    1b68:	d0ed      	beq.n	1b46 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1b6a:	4b0a      	ldr	r3, [pc, #40]	; (1b94 <udc_iface_disable+0x60>)
    1b6c:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1b6e:	4e0a      	ldr	r6, [pc, #40]	; (1b98 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1b70:	4f0a      	ldr	r7, [pc, #40]	; (1b9c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1b72:	2105      	movs	r1, #5
    1b74:	0020      	movs	r0, r4
    1b76:	47b0      	blx	r6
    1b78:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1b7a:	d002      	beq.n	1b82 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1b7c:	7880      	ldrb	r0, [r0, #2]
    1b7e:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1b80:	e7f7      	b.n	1b72 <udc_iface_disable+0x3e>
	udi_api->disable();
    1b82:	4643      	mov	r3, r8
    1b84:	685b      	ldr	r3, [r3, #4]
    1b86:	4798      	blx	r3
	return true;
    1b88:	e7dd      	b.n	1b46 <udc_iface_disable+0x12>
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	00001ac1 	.word	0x00001ac1
    1b90:	20000220 	.word	0x20000220
    1b94:	20000224 	.word	0x20000224
    1b98:	00001a5d 	.word	0x00001a5d
    1b9c:	0000362d 	.word	0x0000362d

00001ba0 <udc_iface_enable>:
{
    1ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ba2:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1ba4:	4b0f      	ldr	r3, [pc, #60]	; (1be4 <udc_iface_enable+0x44>)
    1ba6:	4798      	blx	r3
    1ba8:	2800      	cmp	r0, #0
    1baa:	d019      	beq.n	1be0 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1bac:	4b0e      	ldr	r3, [pc, #56]	; (1be8 <udc_iface_enable+0x48>)
    1bae:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1bb0:	4e0e      	ldr	r6, [pc, #56]	; (1bec <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1bb2:	4f0f      	ldr	r7, [pc, #60]	; (1bf0 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1bb4:	2105      	movs	r1, #5
    1bb6:	0020      	movs	r0, r4
    1bb8:	47b0      	blx	r6
    1bba:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1bbc:	d009      	beq.n	1bd2 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1bbe:	7903      	ldrb	r3, [r0, #4]
    1bc0:	7942      	ldrb	r2, [r0, #5]
    1bc2:	0212      	lsls	r2, r2, #8
    1bc4:	431a      	orrs	r2, r3
    1bc6:	78c1      	ldrb	r1, [r0, #3]
    1bc8:	7880      	ldrb	r0, [r0, #2]
    1bca:	47b8      	blx	r7
    1bcc:	2800      	cmp	r0, #0
    1bce:	d1f1      	bne.n	1bb4 <udc_iface_enable+0x14>
    1bd0:	e006      	b.n	1be0 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1bd2:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <udc_iface_enable+0x54>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	685b      	ldr	r3, [r3, #4]
    1bd8:	00ad      	lsls	r5, r5, #2
    1bda:	58eb      	ldr	r3, [r5, r3]
    1bdc:	681b      	ldr	r3, [r3, #0]
    1bde:	4798      	blx	r3
}
    1be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	00001ac1 	.word	0x00001ac1
    1be8:	20000224 	.word	0x20000224
    1bec:	00001a5d 	.word	0x00001a5d
    1bf0:	00003685 	.word	0x00003685
    1bf4:	20000220 	.word	0x20000220

00001bf8 <udc_start>:
{
    1bf8:	b510      	push	{r4, lr}
	udd_enable();
    1bfa:	4b01      	ldr	r3, [pc, #4]	; (1c00 <udc_start+0x8>)
    1bfc:	4798      	blx	r3
}
    1bfe:	bd10      	pop	{r4, pc}
    1c00:	00003c51 	.word	0x00003c51

00001c04 <udc_reset>:
{
    1c04:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1c06:	4b0e      	ldr	r3, [pc, #56]	; (1c40 <udc_reset+0x3c>)
    1c08:	781b      	ldrb	r3, [r3, #0]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d011      	beq.n	1c32 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c0e:	4b0d      	ldr	r3, [pc, #52]	; (1c44 <udc_reset+0x40>)
    1c10:	681b      	ldr	r3, [r3, #0]
    1c12:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1c14:	791b      	ldrb	r3, [r3, #4]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d00b      	beq.n	1c32 <udc_reset+0x2e>
    1c1a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1c1c:	4e0a      	ldr	r6, [pc, #40]	; (1c48 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c1e:	4d09      	ldr	r5, [pc, #36]	; (1c44 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1c20:	0020      	movs	r0, r4
    1c22:	47b0      	blx	r6
				iface_num++) {
    1c24:	3401      	adds	r4, #1
    1c26:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c28:	682b      	ldr	r3, [r5, #0]
    1c2a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1c2c:	791b      	ldrb	r3, [r3, #4]
    1c2e:	42a3      	cmp	r3, r4
    1c30:	d8f6      	bhi.n	1c20 <udc_reset+0x1c>
	udc_num_configuration = 0;
    1c32:	2200      	movs	r2, #0
    1c34:	4b02      	ldr	r3, [pc, #8]	; (1c40 <udc_reset+0x3c>)
    1c36:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1c38:	3201      	adds	r2, #1
    1c3a:	4b04      	ldr	r3, [pc, #16]	; (1c4c <udc_reset+0x48>)
    1c3c:	801a      	strh	r2, [r3, #0]
}
    1c3e:	bd70      	pop	{r4, r5, r6, pc}
    1c40:	2000021c 	.word	0x2000021c
    1c44:	20000220 	.word	0x20000220
    1c48:	00001b35 	.word	0x00001b35
    1c4c:	20000212 	.word	0x20000212

00001c50 <udc_sof_notify>:
{
    1c50:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1c52:	4b0e      	ldr	r3, [pc, #56]	; (1c8c <udc_sof_notify+0x3c>)
    1c54:	781b      	ldrb	r3, [r3, #0]
    1c56:	2b00      	cmp	r3, #0
    1c58:	d017      	beq.n	1c8a <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c5a:	4b0d      	ldr	r3, [pc, #52]	; (1c90 <udc_sof_notify+0x40>)
    1c5c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1c5e:	681a      	ldr	r2, [r3, #0]
    1c60:	7912      	ldrb	r2, [r2, #4]
    1c62:	2a00      	cmp	r2, #0
    1c64:	d011      	beq.n	1c8a <udc_sof_notify+0x3a>
    1c66:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c68:	4d09      	ldr	r5, [pc, #36]	; (1c90 <udc_sof_notify+0x40>)
    1c6a:	e006      	b.n	1c7a <udc_sof_notify+0x2a>
				iface_num++) {
    1c6c:	3401      	adds	r4, #1
    1c6e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c70:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1c72:	681a      	ldr	r2, [r3, #0]
    1c74:	7912      	ldrb	r2, [r2, #4]
    1c76:	42a2      	cmp	r2, r4
    1c78:	d907      	bls.n	1c8a <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	00a2      	lsls	r2, r4, #2
    1c7e:	58d3      	ldr	r3, [r2, r3]
    1c80:	691b      	ldr	r3, [r3, #16]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d0f2      	beq.n	1c6c <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1c86:	4798      	blx	r3
    1c88:	e7f0      	b.n	1c6c <udc_sof_notify+0x1c>
}
    1c8a:	bd70      	pop	{r4, r5, r6, pc}
    1c8c:	2000021c 	.word	0x2000021c
    1c90:	20000220 	.word	0x20000220

00001c94 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1c96:	4bac      	ldr	r3, [pc, #688]	; (1f48 <udc_process_setup+0x2b4>)
    1c98:	2200      	movs	r2, #0
    1c9a:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1c9c:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1c9e:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	b25a      	sxtb	r2, r3
    1ca4:	2a00      	cmp	r2, #0
    1ca6:	db13      	blt.n	1cd0 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ca8:	2260      	movs	r2, #96	; 0x60
    1caa:	421a      	tst	r2, r3
    1cac:	d100      	bne.n	1cb0 <udc_process_setup+0x1c>
    1cae:	e0da      	b.n	1e66 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1cb0:	4ba5      	ldr	r3, [pc, #660]	; (1f48 <udc_process_setup+0x2b4>)
    1cb2:	781a      	ldrb	r2, [r3, #0]
    1cb4:	231f      	movs	r3, #31
    1cb6:	4013      	ands	r3, r2
    1cb8:	2b01      	cmp	r3, #1
    1cba:	d100      	bne.n	1cbe <udc_process_setup+0x2a>
    1cbc:	e176      	b.n	1fac <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1cbe:	4ba2      	ldr	r3, [pc, #648]	; (1f48 <udc_process_setup+0x2b4>)
    1cc0:	781a      	ldrb	r2, [r3, #0]
    1cc2:	231f      	movs	r3, #31
    1cc4:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1cc6:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1cc8:	2b02      	cmp	r3, #2
    1cca:	d100      	bne.n	1cce <udc_process_setup+0x3a>
    1ccc:	e1cc      	b.n	2068 <STACK_SIZE+0x68>
#endif
}
    1cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1cd0:	4a9d      	ldr	r2, [pc, #628]	; (1f48 <udc_process_setup+0x2b4>)
    1cd2:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1cd4:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1cd6:	2a00      	cmp	r2, #0
    1cd8:	d0f9      	beq.n	1cce <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1cda:	2160      	movs	r1, #96	; 0x60
    1cdc:	4219      	tst	r1, r3
    1cde:	d1e7      	bne.n	1cb0 <udc_process_setup+0x1c>
    1ce0:	211f      	movs	r1, #31
    1ce2:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ce4:	d108      	bne.n	1cf8 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ce6:	4998      	ldr	r1, [pc, #608]	; (1f48 <udc_process_setup+0x2b4>)
    1ce8:	7849      	ldrb	r1, [r1, #1]
    1cea:	2906      	cmp	r1, #6
    1cec:	d023      	beq.n	1d36 <udc_process_setup+0xa2>
    1cee:	2908      	cmp	r1, #8
    1cf0:	d100      	bne.n	1cf4 <udc_process_setup+0x60>
    1cf2:	e087      	b.n	1e04 <udc_process_setup+0x170>
    1cf4:	2900      	cmp	r1, #0
    1cf6:	d017      	beq.n	1d28 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1cf8:	2b01      	cmp	r3, #1
    1cfa:	d100      	bne.n	1cfe <udc_process_setup+0x6a>
    1cfc:	e08a      	b.n	1e14 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cfe:	2b02      	cmp	r3, #2
    1d00:	d1d6      	bne.n	1cb0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1d02:	4b91      	ldr	r3, [pc, #580]	; (1f48 <udc_process_setup+0x2b4>)
    1d04:	785b      	ldrb	r3, [r3, #1]
	return false;
    1d06:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1d08:	2b00      	cmp	r3, #0
    1d0a:	d000      	beq.n	1d0e <udc_process_setup+0x7a>
    1d0c:	e1a8      	b.n	2060 <STACK_SIZE+0x60>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1d0e:	2a02      	cmp	r2, #2
    1d10:	d1d5      	bne.n	1cbe <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1d12:	4b8d      	ldr	r3, [pc, #564]	; (1f48 <udc_process_setup+0x2b4>)
    1d14:	7918      	ldrb	r0, [r3, #4]
    1d16:	4b8d      	ldr	r3, [pc, #564]	; (1f4c <udc_process_setup+0x2b8>)
    1d18:	4798      	blx	r3
    1d1a:	4b8d      	ldr	r3, [pc, #564]	; (1f50 <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1d1c:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1d1e:	2102      	movs	r1, #2
    1d20:	0018      	movs	r0, r3
    1d22:	4b8c      	ldr	r3, [pc, #560]	; (1f54 <udc_process_setup+0x2c0>)
    1d24:	4798      	blx	r3
    1d26:	e0ff      	b.n	1f28 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1d28:	2a02      	cmp	r2, #2
    1d2a:	d1c8      	bne.n	1cbe <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1d2c:	3102      	adds	r1, #2
    1d2e:	488a      	ldr	r0, [pc, #552]	; (1f58 <udc_process_setup+0x2c4>)
    1d30:	4b88      	ldr	r3, [pc, #544]	; (1f54 <udc_process_setup+0x2c0>)
    1d32:	4798      	blx	r3
    1d34:	e0f8      	b.n	1f28 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1d36:	4b84      	ldr	r3, [pc, #528]	; (1f48 <udc_process_setup+0x2b4>)
    1d38:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1d3a:	0a13      	lsrs	r3, r2, #8
    1d3c:	2b02      	cmp	r3, #2
    1d3e:	d023      	beq.n	1d88 <udc_process_setup+0xf4>
    1d40:	b2d9      	uxtb	r1, r3
    1d42:	2902      	cmp	r1, #2
    1d44:	d90f      	bls.n	1d66 <udc_process_setup+0xd2>
    1d46:	2b03      	cmp	r3, #3
    1d48:	d034      	beq.n	1db4 <udc_process_setup+0x120>
    1d4a:	2b0f      	cmp	r3, #15
    1d4c:	d000      	beq.n	1d50 <udc_process_setup+0xbc>
    1d4e:	e184      	b.n	205a <STACK_SIZE+0x5a>
		if (udc_config.conf_bos == NULL) {
    1d50:	4b82      	ldr	r3, [pc, #520]	; (1f5c <udc_process_setup+0x2c8>)
    1d52:	6898      	ldr	r0, [r3, #8]
    1d54:	2800      	cmp	r0, #0
    1d56:	d0b2      	beq.n	1cbe <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1d58:	7883      	ldrb	r3, [r0, #2]
    1d5a:	78c1      	ldrb	r1, [r0, #3]
    1d5c:	0209      	lsls	r1, r1, #8
    1d5e:	4319      	orrs	r1, r3
    1d60:	4b7c      	ldr	r3, [pc, #496]	; (1f54 <udc_process_setup+0x2c0>)
    1d62:	4798      	blx	r3
    1d64:	e007      	b.n	1d76 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1d66:	2b01      	cmp	r3, #1
    1d68:	d000      	beq.n	1d6c <udc_process_setup+0xd8>
    1d6a:	e176      	b.n	205a <STACK_SIZE+0x5a>
				(uint8_t *) udc_config.confdev_lsfs,
    1d6c:	4b7b      	ldr	r3, [pc, #492]	; (1f5c <udc_process_setup+0x2c8>)
    1d6e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1d70:	7801      	ldrb	r1, [r0, #0]
    1d72:	4b78      	ldr	r3, [pc, #480]	; (1f54 <udc_process_setup+0x2c0>)
    1d74:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1d76:	4b74      	ldr	r3, [pc, #464]	; (1f48 <udc_process_setup+0x2b4>)
    1d78:	88da      	ldrh	r2, [r3, #6]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	4293      	cmp	r3, r2
    1d7e:	d800      	bhi.n	1d82 <udc_process_setup+0xee>
    1d80:	e0d2      	b.n	1f28 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1d82:	4b71      	ldr	r3, [pc, #452]	; (1f48 <udc_process_setup+0x2b4>)
    1d84:	819a      	strh	r2, [r3, #12]
    1d86:	e0cf      	b.n	1f28 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1d88:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1d8a:	4b74      	ldr	r3, [pc, #464]	; (1f5c <udc_process_setup+0x2c8>)
    1d8c:	681b      	ldr	r3, [r3, #0]
    1d8e:	7c5b      	ldrb	r3, [r3, #17]
    1d90:	4293      	cmp	r3, r2
    1d92:	d800      	bhi.n	1d96 <udc_process_setup+0x102>
    1d94:	e793      	b.n	1cbe <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1d96:	4b71      	ldr	r3, [pc, #452]	; (1f5c <udc_process_setup+0x2c8>)
    1d98:	685b      	ldr	r3, [r3, #4]
    1d9a:	00d2      	lsls	r2, r2, #3
    1d9c:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1d9e:	7883      	ldrb	r3, [r0, #2]
    1da0:	78c1      	ldrb	r1, [r0, #3]
    1da2:	0209      	lsls	r1, r1, #8
    1da4:	4319      	orrs	r1, r3
    1da6:	4b6b      	ldr	r3, [pc, #428]	; (1f54 <udc_process_setup+0x2c0>)
    1da8:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1daa:	4b67      	ldr	r3, [pc, #412]	; (1f48 <udc_process_setup+0x2b4>)
    1dac:	689b      	ldr	r3, [r3, #8]
    1dae:	2202      	movs	r2, #2
    1db0:	705a      	strb	r2, [r3, #1]
    1db2:	e7e0      	b.n	1d76 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1db4:	23ff      	movs	r3, #255	; 0xff
    1db6:	401a      	ands	r2, r3
    1db8:	2a01      	cmp	r2, #1
    1dba:	d020      	beq.n	1dfe <udc_process_setup+0x16a>
    1dbc:	2a00      	cmp	r2, #0
    1dbe:	d019      	beq.n	1df4 <udc_process_setup+0x160>
    1dc0:	2a02      	cmp	r2, #2
    1dc2:	d100      	bne.n	1dc6 <udc_process_setup+0x132>
    1dc4:	e178      	b.n	20b8 <STACK_SIZE+0xb8>
    1dc6:	2a03      	cmp	r2, #3
    1dc8:	d000      	beq.n	1dcc <udc_process_setup+0x138>
    1dca:	e771      	b.n	1cb0 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1dcc:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1dce:	4c64      	ldr	r4, [pc, #400]	; (1f60 <udc_process_setup+0x2cc>)
    1dd0:	4a64      	ldr	r2, [pc, #400]	; (1f64 <udc_process_setup+0x2d0>)
    1dd2:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1dd4:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1dd6:	5ce0      	ldrb	r0, [r4, r3]
    1dd8:	8010      	strh	r0, [r2, #0]
    1dda:	3301      	adds	r3, #1
    1ddc:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1dde:	b2d8      	uxtb	r0, r3
    1de0:	4281      	cmp	r1, r0
    1de2:	d8f8      	bhi.n	1dd6 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1de4:	0049      	lsls	r1, r1, #1
    1de6:	3102      	adds	r1, #2
    1de8:	485e      	ldr	r0, [pc, #376]	; (1f64 <udc_process_setup+0x2d0>)
    1dea:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1dec:	b289      	uxth	r1, r1
    1dee:	4b59      	ldr	r3, [pc, #356]	; (1f54 <udc_process_setup+0x2c0>)
    1df0:	4798      	blx	r3
    1df2:	e7c0      	b.n	1d76 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1df4:	2104      	movs	r1, #4
    1df6:	485c      	ldr	r0, [pc, #368]	; (1f68 <udc_process_setup+0x2d4>)
    1df8:	4b56      	ldr	r3, [pc, #344]	; (1f54 <udc_process_setup+0x2c0>)
    1dfa:	4798      	blx	r3
    1dfc:	e7bb      	b.n	1d76 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1dfe:	4c5b      	ldr	r4, [pc, #364]	; (1f6c <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1e00:	2109      	movs	r1, #9
    1e02:	e7e5      	b.n	1dd0 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1e04:	2a01      	cmp	r2, #1
    1e06:	d000      	beq.n	1e0a <udc_process_setup+0x176>
    1e08:	e759      	b.n	1cbe <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1e0a:	2101      	movs	r1, #1
    1e0c:	4858      	ldr	r0, [pc, #352]	; (1f70 <udc_process_setup+0x2dc>)
    1e0e:	4b51      	ldr	r3, [pc, #324]	; (1f54 <udc_process_setup+0x2c0>)
    1e10:	4798      	blx	r3
    1e12:	e089      	b.n	1f28 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e14:	494c      	ldr	r1, [pc, #304]	; (1f48 <udc_process_setup+0x2b4>)
    1e16:	7849      	ldrb	r1, [r1, #1]
    1e18:	290a      	cmp	r1, #10
    1e1a:	d000      	beq.n	1e1e <udc_process_setup+0x18a>
    1e1c:	e76f      	b.n	1cfe <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1e1e:	2a01      	cmp	r2, #1
    1e20:	d000      	beq.n	1e24 <udc_process_setup+0x190>
    1e22:	e0c3      	b.n	1fac <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1e24:	4b52      	ldr	r3, [pc, #328]	; (1f70 <udc_process_setup+0x2dc>)
    1e26:	781b      	ldrb	r3, [r3, #0]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d100      	bne.n	1e2e <udc_process_setup+0x19a>
    1e2c:	e0be      	b.n	1fac <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1e2e:	4b46      	ldr	r3, [pc, #280]	; (1f48 <udc_process_setup+0x2b4>)
    1e30:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1e32:	4b50      	ldr	r3, [pc, #320]	; (1f74 <udc_process_setup+0x2e0>)
    1e34:	681d      	ldr	r5, [r3, #0]
    1e36:	682b      	ldr	r3, [r5, #0]
    1e38:	791b      	ldrb	r3, [r3, #4]
    1e3a:	42a3      	cmp	r3, r4
    1e3c:	d800      	bhi.n	1e40 <udc_process_setup+0x1ac>
    1e3e:	e0b5      	b.n	1fac <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1e40:	2100      	movs	r1, #0
    1e42:	0020      	movs	r0, r4
    1e44:	4b4c      	ldr	r3, [pc, #304]	; (1f78 <udc_process_setup+0x2e4>)
    1e46:	4798      	blx	r3
    1e48:	2800      	cmp	r0, #0
    1e4a:	d100      	bne.n	1e4e <udc_process_setup+0x1ba>
    1e4c:	e730      	b.n	1cb0 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e4e:	686b      	ldr	r3, [r5, #4]
    1e50:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1e52:	58e3      	ldr	r3, [r4, r3]
    1e54:	68db      	ldr	r3, [r3, #12]
    1e56:	4798      	blx	r3
    1e58:	4b48      	ldr	r3, [pc, #288]	; (1f7c <udc_process_setup+0x2e8>)
    1e5a:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1e5c:	2101      	movs	r1, #1
    1e5e:	0018      	movs	r0, r3
    1e60:	4b3c      	ldr	r3, [pc, #240]	; (1f54 <udc_process_setup+0x2c0>)
    1e62:	4798      	blx	r3
    1e64:	e060      	b.n	1f28 <udc_process_setup+0x294>
    1e66:	221f      	movs	r2, #31
    1e68:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1e6a:	d15f      	bne.n	1f2c <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1e6c:	4a36      	ldr	r2, [pc, #216]	; (1f48 <udc_process_setup+0x2b4>)
    1e6e:	7852      	ldrb	r2, [r2, #1]
    1e70:	2a03      	cmp	r2, #3
    1e72:	d100      	bne.n	1e76 <udc_process_setup+0x1e2>
    1e74:	e0f3      	b.n	205e <STACK_SIZE+0x5e>
    1e76:	b2d1      	uxtb	r1, r2
    1e78:	2903      	cmp	r1, #3
    1e7a:	d93b      	bls.n	1ef4 <udc_process_setup+0x260>
    1e7c:	2a05      	cmp	r2, #5
    1e7e:	d04b      	beq.n	1f18 <udc_process_setup+0x284>
    1e80:	2a09      	cmp	r2, #9
    1e82:	d153      	bne.n	1f2c <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1e84:	4b30      	ldr	r3, [pc, #192]	; (1f48 <udc_process_setup+0x2b4>)
    1e86:	88db      	ldrh	r3, [r3, #6]
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d000      	beq.n	1e8e <udc_process_setup+0x1fa>
    1e8c:	e717      	b.n	1cbe <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1e8e:	4b3c      	ldr	r3, [pc, #240]	; (1f80 <udc_process_setup+0x2ec>)
    1e90:	4798      	blx	r3
    1e92:	2800      	cmp	r0, #0
    1e94:	d100      	bne.n	1e98 <udc_process_setup+0x204>
    1e96:	e70b      	b.n	1cb0 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1e98:	4b2b      	ldr	r3, [pc, #172]	; (1f48 <udc_process_setup+0x2b4>)
    1e9a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1e9c:	4b2f      	ldr	r3, [pc, #188]	; (1f5c <udc_process_setup+0x2c8>)
    1e9e:	681b      	ldr	r3, [r3, #0]
    1ea0:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1ea2:	429a      	cmp	r2, r3
    1ea4:	dd00      	ble.n	1ea8 <udc_process_setup+0x214>
    1ea6:	e703      	b.n	1cb0 <udc_process_setup+0x1c>
	udc_reset();
    1ea8:	4b36      	ldr	r3, [pc, #216]	; (1f84 <udc_process_setup+0x2f0>)
    1eaa:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1eac:	4b26      	ldr	r3, [pc, #152]	; (1f48 <udc_process_setup+0x2b4>)
    1eae:	789b      	ldrb	r3, [r3, #2]
    1eb0:	4a2f      	ldr	r2, [pc, #188]	; (1f70 <udc_process_setup+0x2dc>)
    1eb2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d037      	beq.n	1f28 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1eb8:	4a33      	ldr	r2, [pc, #204]	; (1f88 <udc_process_setup+0x2f4>)
    1eba:	4694      	mov	ip, r2
    1ebc:	4463      	add	r3, ip
    1ebe:	00db      	lsls	r3, r3, #3
    1ec0:	4a26      	ldr	r2, [pc, #152]	; (1f5c <udc_process_setup+0x2c8>)
    1ec2:	6852      	ldr	r2, [r2, #4]
    1ec4:	18d3      	adds	r3, r2, r3
    1ec6:	4a2b      	ldr	r2, [pc, #172]	; (1f74 <udc_process_setup+0x2e0>)
    1ec8:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1eca:	681b      	ldr	r3, [r3, #0]
    1ecc:	791b      	ldrb	r3, [r3, #4]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d02a      	beq.n	1f28 <udc_process_setup+0x294>
    1ed2:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1ed4:	4d2d      	ldr	r5, [pc, #180]	; (1f8c <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ed6:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1ed8:	2100      	movs	r1, #0
    1eda:	0020      	movs	r0, r4
    1edc:	47a8      	blx	r5
    1ede:	2800      	cmp	r0, #0
    1ee0:	d100      	bne.n	1ee4 <udc_process_setup+0x250>
    1ee2:	e6e5      	b.n	1cb0 <udc_process_setup+0x1c>
			iface_num++) {
    1ee4:	3401      	adds	r4, #1
    1ee6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ee8:	6833      	ldr	r3, [r6, #0]
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	791b      	ldrb	r3, [r3, #4]
    1eee:	42a3      	cmp	r3, r4
    1ef0:	d8f2      	bhi.n	1ed8 <udc_process_setup+0x244>
    1ef2:	e019      	b.n	1f28 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ef4:	2a01      	cmp	r2, #1
    1ef6:	d119      	bne.n	1f2c <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1ef8:	4b13      	ldr	r3, [pc, #76]	; (1f48 <udc_process_setup+0x2b4>)
    1efa:	88db      	ldrh	r3, [r3, #6]
    1efc:	2b00      	cmp	r3, #0
    1efe:	d000      	beq.n	1f02 <udc_process_setup+0x26e>
    1f00:	e6dd      	b.n	1cbe <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1f02:	4b11      	ldr	r3, [pc, #68]	; (1f48 <udc_process_setup+0x2b4>)
    1f04:	885b      	ldrh	r3, [r3, #2]
    1f06:	2b01      	cmp	r3, #1
    1f08:	d000      	beq.n	1f0c <udc_process_setup+0x278>
    1f0a:	e6d8      	b.n	1cbe <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1f0c:	4a12      	ldr	r2, [pc, #72]	; (1f58 <udc_process_setup+0x2c4>)
    1f0e:	8813      	ldrh	r3, [r2, #0]
    1f10:	2102      	movs	r1, #2
    1f12:	438b      	bics	r3, r1
    1f14:	8013      	strh	r3, [r2, #0]
    1f16:	e007      	b.n	1f28 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1f18:	4b0b      	ldr	r3, [pc, #44]	; (1f48 <udc_process_setup+0x2b4>)
    1f1a:	88db      	ldrh	r3, [r3, #6]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d000      	beq.n	1f22 <udc_process_setup+0x28e>
    1f20:	e6cd      	b.n	1cbe <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1f22:	4a1b      	ldr	r2, [pc, #108]	; (1f90 <udc_process_setup+0x2fc>)
    1f24:	4b08      	ldr	r3, [pc, #32]	; (1f48 <udc_process_setup+0x2b4>)
    1f26:	611a      	str	r2, [r3, #16]
			return true;
    1f28:	2001      	movs	r0, #1
    1f2a:	e6d0      	b.n	1cce <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1f2c:	2b01      	cmp	r3, #1
    1f2e:	d031      	beq.n	1f94 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1f30:	2b02      	cmp	r3, #2
    1f32:	d000      	beq.n	1f36 <udc_process_setup+0x2a2>
    1f34:	e6bc      	b.n	1cb0 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f36:	4b04      	ldr	r3, [pc, #16]	; (1f48 <udc_process_setup+0x2b4>)
    1f38:	785b      	ldrb	r3, [r3, #1]
    1f3a:	2b01      	cmp	r3, #1
    1f3c:	d06c      	beq.n	2018 <STACK_SIZE+0x18>
    1f3e:	2b03      	cmp	r3, #3
    1f40:	d100      	bne.n	1f44 <udc_process_setup+0x2b0>
    1f42:	e078      	b.n	2036 <STACK_SIZE+0x36>
	return false;
    1f44:	2000      	movs	r0, #0
    1f46:	e08b      	b.n	2060 <STACK_SIZE+0x60>
    1f48:	200005bc 	.word	0x200005bc
    1f4c:	0000378d 	.word	0x0000378d
    1f50:	20000214 	.word	0x20000214
    1f54:	00003b65 	.word	0x00003b65
    1f58:	20000212 	.word	0x20000212
    1f5c:	200000d8 	.word	0x200000d8
    1f60:	0000a56c 	.word	0x0000a56c
    1f64:	2000007c 	.word	0x2000007c
    1f68:	20000098 	.word	0x20000098
    1f6c:	2000009c 	.word	0x2000009c
    1f70:	2000021c 	.word	0x2000021c
    1f74:	20000220 	.word	0x20000220
    1f78:	00001ac1 	.word	0x00001ac1
    1f7c:	20000218 	.word	0x20000218
    1f80:	00003b55 	.word	0x00003b55
    1f84:	00001c05 	.word	0x00001c05
    1f88:	1fffffff 	.word	0x1fffffff
    1f8c:	00001ba1 	.word	0x00001ba1
    1f90:	00001aa9 	.word	0x00001aa9
			switch (udd_g_ctrlreq.req.bRequest) {
    1f94:	4a4a      	ldr	r2, [pc, #296]	; (20c0 <STACK_SIZE+0xc0>)
    1f96:	7852      	ldrb	r2, [r2, #1]
    1f98:	2a0b      	cmp	r2, #11
    1f9a:	d1c9      	bne.n	1f30 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1f9c:	4b48      	ldr	r3, [pc, #288]	; (20c0 <STACK_SIZE+0xc0>)
    1f9e:	88db      	ldrh	r3, [r3, #6]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d103      	bne.n	1fac <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1fa4:	4b47      	ldr	r3, [pc, #284]	; (20c4 <STACK_SIZE+0xc4>)
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d127      	bne.n	1ffc <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1fac:	4b45      	ldr	r3, [pc, #276]	; (20c4 <STACK_SIZE+0xc4>)
    1fae:	781b      	ldrb	r3, [r3, #0]
	return false;
    1fb0:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d100      	bne.n	1fb8 <udc_process_setup+0x324>
    1fb6:	e68a      	b.n	1cce <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1fb8:	4b41      	ldr	r3, [pc, #260]	; (20c0 <STACK_SIZE+0xc0>)
    1fba:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1fbc:	4b42      	ldr	r3, [pc, #264]	; (20c8 <STACK_SIZE+0xc8>)
    1fbe:	681d      	ldr	r5, [r3, #0]
    1fc0:	682b      	ldr	r3, [r5, #0]
    1fc2:	791b      	ldrb	r3, [r3, #4]
    1fc4:	42a3      	cmp	r3, r4
    1fc6:	d800      	bhi.n	1fca <udc_process_setup+0x336>
    1fc8:	e681      	b.n	1cce <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1fca:	2100      	movs	r1, #0
    1fcc:	0020      	movs	r0, r4
    1fce:	4b3f      	ldr	r3, [pc, #252]	; (20cc <STACK_SIZE+0xcc>)
    1fd0:	4798      	blx	r3
    1fd2:	2800      	cmp	r0, #0
    1fd4:	d100      	bne.n	1fd8 <udc_process_setup+0x344>
    1fd6:	e672      	b.n	1cbe <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1fd8:	686b      	ldr	r3, [r5, #4]
    1fda:	00a2      	lsls	r2, r4, #2
    1fdc:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1fde:	68eb      	ldr	r3, [r5, #12]
    1fe0:	4798      	blx	r3
    1fe2:	0001      	movs	r1, r0
    1fe4:	0020      	movs	r0, r4
    1fe6:	4b39      	ldr	r3, [pc, #228]	; (20cc <STACK_SIZE+0xcc>)
    1fe8:	4798      	blx	r3
    1fea:	2800      	cmp	r0, #0
    1fec:	d100      	bne.n	1ff0 <udc_process_setup+0x35c>
    1fee:	e666      	b.n	1cbe <udc_process_setup+0x2a>
	return udi_api->setup();
    1ff0:	68ab      	ldr	r3, [r5, #8]
    1ff2:	4798      	blx	r3
		if (udc_req_iface()) {
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d000      	beq.n	1ffa <udc_process_setup+0x366>
    1ff8:	e669      	b.n	1cce <udc_process_setup+0x3a>
    1ffa:	e660      	b.n	1cbe <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ffc:	4b30      	ldr	r3, [pc, #192]	; (20c0 <STACK_SIZE+0xc0>)
    1ffe:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2000:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    2002:	0028      	movs	r0, r5
    2004:	4b32      	ldr	r3, [pc, #200]	; (20d0 <STACK_SIZE+0xd0>)
    2006:	4798      	blx	r3
    2008:	2800      	cmp	r0, #0
    200a:	d100      	bne.n	200e <STACK_SIZE+0xe>
    200c:	e650      	b.n	1cb0 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    200e:	b2e1      	uxtb	r1, r4
    2010:	0028      	movs	r0, r5
    2012:	4b30      	ldr	r3, [pc, #192]	; (20d4 <STACK_SIZE+0xd4>)
    2014:	4798      	blx	r3
    2016:	e023      	b.n	2060 <STACK_SIZE+0x60>
	if (udd_g_ctrlreq.req.wLength) {
    2018:	4b29      	ldr	r3, [pc, #164]	; (20c0 <STACK_SIZE+0xc0>)
    201a:	88db      	ldrh	r3, [r3, #6]
    201c:	2b00      	cmp	r3, #0
    201e:	d000      	beq.n	2022 <STACK_SIZE+0x22>
    2020:	e64d      	b.n	1cbe <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2022:	4b27      	ldr	r3, [pc, #156]	; (20c0 <STACK_SIZE+0xc0>)
    2024:	885b      	ldrh	r3, [r3, #2]
    2026:	2b00      	cmp	r3, #0
    2028:	d000      	beq.n	202c <STACK_SIZE+0x2c>
    202a:	e648      	b.n	1cbe <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    202c:	4b24      	ldr	r3, [pc, #144]	; (20c0 <STACK_SIZE+0xc0>)
    202e:	7918      	ldrb	r0, [r3, #4]
    2030:	4b29      	ldr	r3, [pc, #164]	; (20d8 <STACK_SIZE+0xd8>)
    2032:	4798      	blx	r3
    2034:	e014      	b.n	2060 <STACK_SIZE+0x60>
	if (udd_g_ctrlreq.req.wLength) {
    2036:	4b22      	ldr	r3, [pc, #136]	; (20c0 <STACK_SIZE+0xc0>)
    2038:	88db      	ldrh	r3, [r3, #6]
    203a:	2b00      	cmp	r3, #0
    203c:	d000      	beq.n	2040 <STACK_SIZE+0x40>
    203e:	e63e      	b.n	1cbe <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2040:	4b1f      	ldr	r3, [pc, #124]	; (20c0 <STACK_SIZE+0xc0>)
    2042:	885b      	ldrh	r3, [r3, #2]
    2044:	2b00      	cmp	r3, #0
    2046:	d000      	beq.n	204a <STACK_SIZE+0x4a>
    2048:	e639      	b.n	1cbe <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    204a:	4c1d      	ldr	r4, [pc, #116]	; (20c0 <STACK_SIZE+0xc0>)
    204c:	7920      	ldrb	r0, [r4, #4]
    204e:	4b23      	ldr	r3, [pc, #140]	; (20dc <STACK_SIZE+0xdc>)
    2050:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2052:	7920      	ldrb	r0, [r4, #4]
    2054:	4b22      	ldr	r3, [pc, #136]	; (20e0 <STACK_SIZE+0xe0>)
    2056:	4798      	blx	r3
    2058:	e002      	b.n	2060 <STACK_SIZE+0x60>
		return false;
    205a:	2000      	movs	r0, #0
    205c:	e000      	b.n	2060 <STACK_SIZE+0x60>
				return udc_req_std_dev_set_feature();
    205e:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2060:	2800      	cmp	r0, #0
    2062:	d000      	beq.n	2066 <STACK_SIZE+0x66>
    2064:	e633      	b.n	1cce <udc_process_setup+0x3a>
    2066:	e623      	b.n	1cb0 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    2068:	4b16      	ldr	r3, [pc, #88]	; (20c4 <STACK_SIZE+0xc4>)
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d100      	bne.n	2072 <STACK_SIZE+0x72>
    2070:	e62d      	b.n	1cce <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2072:	4b15      	ldr	r3, [pc, #84]	; (20c8 <STACK_SIZE+0xc8>)
    2074:	681b      	ldr	r3, [r3, #0]
    2076:	681a      	ldr	r2, [r3, #0]
    2078:	7912      	ldrb	r2, [r2, #4]
    207a:	2a00      	cmp	r2, #0
    207c:	d01a      	beq.n	20b4 <STACK_SIZE+0xb4>
    207e:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2080:	4e12      	ldr	r6, [pc, #72]	; (20cc <STACK_SIZE+0xcc>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2082:	4f11      	ldr	r7, [pc, #68]	; (20c8 <STACK_SIZE+0xc8>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2084:	685b      	ldr	r3, [r3, #4]
    2086:	00aa      	lsls	r2, r5, #2
    2088:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    208a:	68e3      	ldr	r3, [r4, #12]
    208c:	4798      	blx	r3
    208e:	0001      	movs	r1, r0
    2090:	0028      	movs	r0, r5
    2092:	47b0      	blx	r6
    2094:	2800      	cmp	r0, #0
    2096:	d100      	bne.n	209a <STACK_SIZE+0x9a>
    2098:	e619      	b.n	1cce <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    209a:	68a3      	ldr	r3, [r4, #8]
    209c:	4798      	blx	r3
    209e:	2800      	cmp	r0, #0
    20a0:	d000      	beq.n	20a4 <STACK_SIZE+0xa4>
    20a2:	e614      	b.n	1cce <udc_process_setup+0x3a>
			iface_num++) {
    20a4:	3501      	adds	r5, #1
    20a6:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    20a8:	683b      	ldr	r3, [r7, #0]
    20aa:	681a      	ldr	r2, [r3, #0]
    20ac:	7912      	ldrb	r2, [r2, #4]
    20ae:	42aa      	cmp	r2, r5
    20b0:	d8e8      	bhi.n	2084 <STACK_SIZE+0x84>
    20b2:	e60c      	b.n	1cce <udc_process_setup+0x3a>
	return false;
    20b4:	2000      	movs	r0, #0
    20b6:	e60a      	b.n	1cce <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    20b8:	2103      	movs	r1, #3
		str = udc_string_product_name;
    20ba:	4c0a      	ldr	r4, [pc, #40]	; (20e4 <STACK_SIZE+0xe4>)
    20bc:	e688      	b.n	1dd0 <udc_process_setup+0x13c>
    20be:	46c0      	nop			; (mov r8, r8)
    20c0:	200005bc 	.word	0x200005bc
    20c4:	2000021c 	.word	0x2000021c
    20c8:	20000220 	.word	0x20000220
    20cc:	00001ac1 	.word	0x00001ac1
    20d0:	00001b35 	.word	0x00001b35
    20d4:	00001ba1 	.word	0x00001ba1
    20d8:	000038d1 	.word	0x000038d1
    20dc:	000035e1 	.word	0x000035e1
    20e0:	000037a1 	.word	0x000037a1
    20e4:	200000a8 	.word	0x200000a8

000020e8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    20e8:	4a04      	ldr	r2, [pc, #16]	; (20fc <_extint_enable+0x14>)
    20ea:	7813      	ldrb	r3, [r2, #0]
    20ec:	2102      	movs	r1, #2
    20ee:	430b      	orrs	r3, r1
    20f0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    20f2:	7853      	ldrb	r3, [r2, #1]
    20f4:	b25b      	sxtb	r3, r3
    20f6:	2b00      	cmp	r3, #0
    20f8:	dbfb      	blt.n	20f2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    20fa:	4770      	bx	lr
    20fc:	40001800 	.word	0x40001800

00002100 <_system_extint_init>:
{
    2100:	b500      	push	{lr}
    2102:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    2104:	4a12      	ldr	r2, [pc, #72]	; (2150 <_system_extint_init+0x50>)
    2106:	6993      	ldr	r3, [r2, #24]
    2108:	2140      	movs	r1, #64	; 0x40
    210a:	430b      	orrs	r3, r1
    210c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    210e:	a901      	add	r1, sp, #4
    2110:	2300      	movs	r3, #0
    2112:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2114:	2005      	movs	r0, #5
    2116:	4b0f      	ldr	r3, [pc, #60]	; (2154 <_system_extint_init+0x54>)
    2118:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    211a:	2005      	movs	r0, #5
    211c:	4b0e      	ldr	r3, [pc, #56]	; (2158 <_system_extint_init+0x58>)
    211e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2120:	4a0e      	ldr	r2, [pc, #56]	; (215c <_system_extint_init+0x5c>)
    2122:	7813      	ldrb	r3, [r2, #0]
    2124:	2101      	movs	r1, #1
    2126:	430b      	orrs	r3, r1
    2128:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    212a:	7853      	ldrb	r3, [r2, #1]
    212c:	b25b      	sxtb	r3, r3
    212e:	2b00      	cmp	r3, #0
    2130:	dbfb      	blt.n	212a <_system_extint_init+0x2a>
    2132:	4b0b      	ldr	r3, [pc, #44]	; (2160 <_system_extint_init+0x60>)
    2134:	0019      	movs	r1, r3
    2136:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2138:	2200      	movs	r2, #0
    213a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    213c:	4299      	cmp	r1, r3
    213e:	d1fc      	bne.n	213a <_system_extint_init+0x3a>
    2140:	2210      	movs	r2, #16
    2142:	4b08      	ldr	r3, [pc, #32]	; (2164 <_system_extint_init+0x64>)
    2144:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2146:	4b08      	ldr	r3, [pc, #32]	; (2168 <_system_extint_init+0x68>)
    2148:	4798      	blx	r3
}
    214a:	b003      	add	sp, #12
    214c:	bd00      	pop	{pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	40000400 	.word	0x40000400
    2154:	00008aad 	.word	0x00008aad
    2158:	00008a21 	.word	0x00008a21
    215c:	40001800 	.word	0x40001800
    2160:	20000378 	.word	0x20000378
    2164:	e000e100 	.word	0xe000e100
    2168:	000020e9 	.word	0x000020e9

0000216c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    216c:	2300      	movs	r3, #0
    216e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2170:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2172:	2201      	movs	r2, #1
    2174:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    2176:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    2178:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    217a:	3302      	adds	r3, #2
    217c:	72c3      	strb	r3, [r0, #11]
}
    217e:	4770      	bx	lr

00002180 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2180:	b5f0      	push	{r4, r5, r6, r7, lr}
    2182:	b083      	sub	sp, #12
    2184:	0005      	movs	r5, r0
    2186:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2188:	a901      	add	r1, sp, #4
    218a:	2300      	movs	r3, #0
    218c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    218e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2190:	7923      	ldrb	r3, [r4, #4]
    2192:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2194:	7a23      	ldrb	r3, [r4, #8]
    2196:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2198:	7820      	ldrb	r0, [r4, #0]
    219a:	4b15      	ldr	r3, [pc, #84]	; (21f0 <extint_chan_set_config+0x70>)
    219c:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    219e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    21a0:	2d1f      	cmp	r5, #31
    21a2:	d800      	bhi.n	21a6 <extint_chan_set_config+0x26>
		return eics[eic_index];
    21a4:	4813      	ldr	r0, [pc, #76]	; (21f4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    21a6:	2207      	movs	r2, #7
    21a8:	402a      	ands	r2, r5
    21aa:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    21ac:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    21ae:	7aa3      	ldrb	r3, [r4, #10]
    21b0:	2b00      	cmp	r3, #0
    21b2:	d001      	beq.n	21b8 <extint_chan_set_config+0x38>
    21b4:	2308      	movs	r3, #8
    21b6:	431f      	orrs	r7, r3
    21b8:	08eb      	lsrs	r3, r5, #3
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    21be:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    21c0:	260f      	movs	r6, #15
    21c2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    21c4:	43b1      	bics	r1, r6
			(new_config << config_pos);
    21c6:	4097      	lsls	r7, r2
    21c8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    21ca:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    21cc:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    21ce:	7a63      	ldrb	r3, [r4, #9]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d106      	bne.n	21e2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    21d4:	6943      	ldr	r3, [r0, #20]
    21d6:	2201      	movs	r2, #1
    21d8:	40aa      	lsls	r2, r5
    21da:	4393      	bics	r3, r2
    21dc:	6143      	str	r3, [r0, #20]
	}
}
    21de:	b003      	add	sp, #12
    21e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    21e2:	6942      	ldr	r2, [r0, #20]
    21e4:	2301      	movs	r3, #1
    21e6:	40ab      	lsls	r3, r5
    21e8:	4313      	orrs	r3, r2
    21ea:	6143      	str	r3, [r0, #20]
    21ec:	e7f7      	b.n	21de <extint_chan_set_config+0x5e>
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	00008ba5 	.word	0x00008ba5
    21f4:	40001800 	.word	0x40001800

000021f8 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    21f8:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    21fa:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    21fc:	b25b      	sxtb	r3, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	dbfb      	blt.n	21fa <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    2202:	8813      	ldrh	r3, [r2, #0]
    2204:	2102      	movs	r1, #2
    2206:	430b      	orrs	r3, r1
    2208:	8013      	strh	r3, [r2, #0]
}
    220a:	4770      	bx	lr

0000220c <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    220c:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    220e:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    2210:	b25b      	sxtb	r3, r3
    2212:	2b00      	cmp	r3, #0
    2214:	dbfb      	blt.n	220e <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    2216:	23c1      	movs	r3, #193	; 0xc1
    2218:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    221a:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    221c:	8813      	ldrh	r3, [r2, #0]
    221e:	2102      	movs	r1, #2
    2220:	438b      	bics	r3, r1
    2222:	8013      	strh	r3, [r2, #0]
}
    2224:	4770      	bx	lr
	...

00002228 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    2228:	b570      	push	{r4, r5, r6, lr}
    222a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    222c:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    222e:	4b06      	ldr	r3, [pc, #24]	; (2248 <rtc_calendar_reset+0x20>)
    2230:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    2232:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2234:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    2236:	b25b      	sxtb	r3, r3
    2238:	2b00      	cmp	r3, #0
    223a:	dbfb      	blt.n	2234 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    223c:	882b      	ldrh	r3, [r5, #0]
    223e:	2201      	movs	r2, #1
    2240:	4313      	orrs	r3, r2
    2242:	802b      	strh	r3, [r5, #0]
}
    2244:	bd70      	pop	{r4, r5, r6, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	0000220d 	.word	0x0000220d

0000224c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    224c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    224e:	88cb      	ldrh	r3, [r1, #6]
    2250:	88c2      	ldrh	r2, [r0, #6]
    2252:	1a9a      	subs	r2, r3, r2
    2254:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    2256:	794b      	ldrb	r3, [r1, #5]
    2258:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    225a:	790c      	ldrb	r4, [r1, #4]
    225c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    225e:	4323      	orrs	r3, r4
    2260:	788c      	ldrb	r4, [r1, #2]
    2262:	0324      	lsls	r4, r4, #12
    2264:	4323      	orrs	r3, r4
    2266:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    2268:	7902      	ldrb	r2, [r0, #4]
    226a:	2a00      	cmp	r2, #0
    226c:	d105      	bne.n	227a <rtc_calendar_time_to_register_value+0x2e>
    226e:	78ca      	ldrb	r2, [r1, #3]
    2270:	2a00      	cmp	r2, #0
    2272:	d002      	beq.n	227a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    2274:	2280      	movs	r2, #128	; 0x80
    2276:	0252      	lsls	r2, r2, #9
    2278:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    227a:	7848      	ldrb	r0, [r1, #1]
    227c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    227e:	780a      	ldrb	r2, [r1, #0]
    2280:	4310      	orrs	r0, r2
    2282:	4318      	orrs	r0, r3

	return register_value;
}
    2284:	bd10      	pop	{r4, pc}

00002286 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    2286:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2288:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    228a:	88c4      	ldrh	r4, [r0, #6]
    228c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    228e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    2290:	018b      	lsls	r3, r1, #6
    2292:	0f1b      	lsrs	r3, r3, #28
    2294:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    2296:	028b      	lsls	r3, r1, #10
    2298:	0edb      	lsrs	r3, r3, #27
    229a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    229c:	7903      	ldrb	r3, [r0, #4]
    229e:	2b00      	cmp	r3, #0
    22a0:	d10c      	bne.n	22bc <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    22a2:	040b      	lsls	r3, r1, #16
    22a4:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    22a6:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    22a8:	03cb      	lsls	r3, r1, #15
    22aa:	0fdb      	lsrs	r3, r3, #31
    22ac:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    22ae:	0988      	lsrs	r0, r1, #6
    22b0:	233f      	movs	r3, #63	; 0x3f
    22b2:	4018      	ands	r0, r3
    22b4:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    22b6:	4019      	ands	r1, r3
    22b8:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    22ba:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    22bc:	03cb      	lsls	r3, r1, #15
    22be:	0edb      	lsrs	r3, r3, #27
    22c0:	7093      	strb	r3, [r2, #2]
    22c2:	e7f4      	b.n	22ae <rtc_calendar_register_value_to_time+0x28>

000022c4 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    22c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22c6:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    22c8:	4b03      	ldr	r3, [pc, #12]	; (22d8 <rtc_calendar_set_time+0x14>)
    22ca:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    22cc:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    22ce:	b25b      	sxtb	r3, r3
    22d0:	2b00      	cmp	r3, #0
    22d2:	dbfb      	blt.n	22cc <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    22d4:	6120      	str	r0, [r4, #16]
}
    22d6:	bd10      	pop	{r4, pc}
    22d8:	0000224d 	.word	0x0000224d

000022dc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    22dc:	b510      	push	{r4, lr}
    22de:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22e0:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    22e2:	7941      	ldrb	r1, [r0, #5]
    22e4:	2900      	cmp	r1, #0
    22e6:	d006      	beq.n	22f6 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    22e8:	8859      	ldrh	r1, [r3, #2]
    22ea:	0449      	lsls	r1, r1, #17
    22ec:	d50b      	bpl.n	2306 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    22ee:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    22f0:	4b0a      	ldr	r3, [pc, #40]	; (231c <rtc_calendar_get_time+0x40>)
    22f2:	4798      	blx	r3
}
    22f4:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    22f6:	490a      	ldr	r1, [pc, #40]	; (2320 <rtc_calendar_get_time+0x44>)
    22f8:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    22fa:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    22fc:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    22fe:	b249      	sxtb	r1, r1
    2300:	2900      	cmp	r1, #0
    2302:	dbfb      	blt.n	22fc <rtc_calendar_get_time+0x20>
    2304:	e7f3      	b.n	22ee <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    2306:	8859      	ldrh	r1, [r3, #2]
    2308:	24c0      	movs	r4, #192	; 0xc0
    230a:	0224      	lsls	r4, r4, #8
    230c:	4321      	orrs	r1, r4
    230e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    2310:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2312:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    2314:	b249      	sxtb	r1, r1
    2316:	2900      	cmp	r1, #0
    2318:	dbfb      	blt.n	2312 <rtc_calendar_get_time+0x36>
    231a:	e7e8      	b.n	22ee <rtc_calendar_get_time+0x12>
    231c:	00002287 	.word	0x00002287
    2320:	ffff8000 	.word	0xffff8000

00002324 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	000d      	movs	r5, r1
    2328:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    232a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    232c:	2a01      	cmp	r2, #1
    232e:	d901      	bls.n	2334 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    2330:	0018      	movs	r0, r3
    2332:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    2334:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    2336:	4b06      	ldr	r3, [pc, #24]	; (2350 <rtc_calendar_set_alarm+0x2c>)
    2338:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    233a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    233c:	b25b      	sxtb	r3, r3
    233e:	2b00      	cmp	r3, #0
    2340:	dbfb      	blt.n	233a <rtc_calendar_set_alarm+0x16>
    2342:	00e4      	lsls	r4, r4, #3
    2344:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    2346:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    2348:	7a2b      	ldrb	r3, [r5, #8]
    234a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    234c:	2300      	movs	r3, #0
    234e:	e7ef      	b.n	2330 <rtc_calendar_set_alarm+0xc>
    2350:	0000224d 	.word	0x0000224d

00002354 <rtc_calendar_init>:
{
    2354:	b530      	push	{r4, r5, lr}
    2356:	b083      	sub	sp, #12
    2358:	0005      	movs	r5, r0
    235a:	0014      	movs	r4, r2
	module->hw = hw;
    235c:	6001      	str	r1, [r0, #0]
    235e:	4a1c      	ldr	r2, [pc, #112]	; (23d0 <rtc_calendar_init+0x7c>)
    2360:	6993      	ldr	r3, [r2, #24]
    2362:	2120      	movs	r1, #32
    2364:	430b      	orrs	r3, r1
    2366:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    2368:	a901      	add	r1, sp, #4
    236a:	2302      	movs	r3, #2
    236c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    236e:	2004      	movs	r0, #4
    2370:	4b18      	ldr	r3, [pc, #96]	; (23d4 <rtc_calendar_init+0x80>)
    2372:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    2374:	2004      	movs	r0, #4
    2376:	4b18      	ldr	r3, [pc, #96]	; (23d8 <rtc_calendar_init+0x84>)
    2378:	4798      	blx	r3
	rtc_calendar_reset(module);
    237a:	0028      	movs	r0, r5
    237c:	4b17      	ldr	r3, [pc, #92]	; (23dc <rtc_calendar_init+0x88>)
    237e:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    2380:	7923      	ldrb	r3, [r4, #4]
    2382:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    2384:	78e3      	ldrb	r3, [r4, #3]
    2386:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    2388:	88e3      	ldrh	r3, [r4, #6]
    238a:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    238c:	4b14      	ldr	r3, [pc, #80]	; (23e0 <rtc_calendar_init+0x8c>)
    238e:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    2390:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    2392:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    2394:	7921      	ldrb	r1, [r4, #4]
    2396:	2900      	cmp	r1, #0
    2398:	d017      	beq.n	23ca <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    239a:	2108      	movs	r1, #8
    239c:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    239e:	78a1      	ldrb	r1, [r4, #2]
    23a0:	2900      	cmp	r1, #0
    23a2:	d001      	beq.n	23a8 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    23a4:	2180      	movs	r1, #128	; 0x80
    23a6:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    23a8:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    23aa:	78e3      	ldrb	r3, [r4, #3]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d004      	beq.n	23ba <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    23b0:	8853      	ldrh	r3, [r2, #2]
    23b2:	2180      	movs	r1, #128	; 0x80
    23b4:	01c9      	lsls	r1, r1, #7
    23b6:	430b      	orrs	r3, r1
    23b8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    23ba:	0021      	movs	r1, r4
    23bc:	3108      	adds	r1, #8
    23be:	2200      	movs	r2, #0
    23c0:	0028      	movs	r0, r5
    23c2:	4b08      	ldr	r3, [pc, #32]	; (23e4 <rtc_calendar_init+0x90>)
    23c4:	4798      	blx	r3
}
    23c6:	b003      	add	sp, #12
    23c8:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    23ca:	2148      	movs	r1, #72	; 0x48
    23cc:	430b      	orrs	r3, r1
    23ce:	e7e6      	b.n	239e <rtc_calendar_init+0x4a>
    23d0:	40000400 	.word	0x40000400
    23d4:	00008aad 	.word	0x00008aad
    23d8:	00008a21 	.word	0x00008a21
    23dc:	00002229 	.word	0x00002229
    23e0:	200003b8 	.word	0x200003b8
    23e4:	00002325 	.word	0x00002325

000023e8 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    23e8:	b570      	push	{r4, r5, r6, lr}
    23ea:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    23ec:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    23ee:	2a01      	cmp	r2, #1
    23f0:	d901      	bls.n	23f6 <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    23f2:	0018      	movs	r0, r3
    23f4:	bd70      	pop	{r4, r5, r6, pc}
    23f6:	00d2      	lsls	r2, r2, #3
    23f8:	6803      	ldr	r3, [r0, #0]
    23fa:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    23fc:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    23fe:	0022      	movs	r2, r4
    2400:	4b02      	ldr	r3, [pc, #8]	; (240c <rtc_calendar_get_alarm+0x24>)
    2402:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    2404:	7f2b      	ldrb	r3, [r5, #28]
    2406:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    2408:	2300      	movs	r3, #0
    240a:	e7f2      	b.n	23f2 <rtc_calendar_get_alarm+0xa>
    240c:	00002287 	.word	0x00002287

00002410 <rtc_calendar_swap_time_mode>:
{
    2410:	b570      	push	{r4, r5, r6, lr}
    2412:	b086      	sub	sp, #24
    2414:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    2416:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    2418:	a904      	add	r1, sp, #16
    241a:	4b3d      	ldr	r3, [pc, #244]	; (2510 <rtc_calendar_swap_time_mode+0x100>)
    241c:	4798      	blx	r3
	if (module->clock_24h) {
    241e:	7923      	ldrb	r3, [r4, #4]
    2420:	2b00      	cmp	r3, #0
    2422:	d042      	beq.n	24aa <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    2424:	aa04      	add	r2, sp, #16
    2426:	7890      	ldrb	r0, [r2, #2]
    2428:	230b      	movs	r3, #11
    242a:	4283      	cmp	r3, r0
    242c:	419b      	sbcs	r3, r3
    242e:	425b      	negs	r3, r3
    2430:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    2432:	210c      	movs	r1, #12
    2434:	4b37      	ldr	r3, [pc, #220]	; (2514 <rtc_calendar_swap_time_mode+0x104>)
    2436:	4798      	blx	r3
    2438:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    243a:	2900      	cmp	r1, #0
    243c:	d016      	beq.n	246c <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    243e:	ab04      	add	r3, sp, #16
    2440:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2442:	ad01      	add	r5, sp, #4
    2444:	2200      	movs	r2, #0
    2446:	0029      	movs	r1, r5
    2448:	0020      	movs	r0, r4
    244a:	4b33      	ldr	r3, [pc, #204]	; (2518 <rtc_calendar_swap_time_mode+0x108>)
    244c:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    244e:	78a8      	ldrb	r0, [r5, #2]
    2450:	230b      	movs	r3, #11
    2452:	4283      	cmp	r3, r0
    2454:	419b      	sbcs	r3, r3
    2456:	425b      	negs	r3, r3
    2458:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    245a:	210c      	movs	r1, #12
    245c:	4b2d      	ldr	r3, [pc, #180]	; (2514 <rtc_calendar_swap_time_mode+0x104>)
    245e:	4798      	blx	r3
    2460:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    2462:	2900      	cmp	r1, #0
    2464:	d006      	beq.n	2474 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    2466:	ab01      	add	r3, sp, #4
    2468:	7099      	strb	r1, [r3, #2]
    246a:	e006      	b.n	247a <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    246c:	220c      	movs	r2, #12
    246e:	ab04      	add	r3, sp, #16
    2470:	709a      	strb	r2, [r3, #2]
    2472:	e7e6      	b.n	2442 <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    2474:	220c      	movs	r2, #12
    2476:	ab01      	add	r3, sp, #4
    2478:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    247a:	2500      	movs	r5, #0
    247c:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    247e:	2200      	movs	r2, #0
    2480:	a901      	add	r1, sp, #4
    2482:	0020      	movs	r0, r4
    2484:	4b25      	ldr	r3, [pc, #148]	; (251c <rtc_calendar_swap_time_mode+0x10c>)
    2486:	4798      	blx	r3
		module->clock_24h = false;
    2488:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    248a:	0020      	movs	r0, r4
    248c:	4b24      	ldr	r3, [pc, #144]	; (2520 <rtc_calendar_swap_time_mode+0x110>)
    248e:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    2490:	8833      	ldrh	r3, [r6, #0]
    2492:	2240      	movs	r2, #64	; 0x40
    2494:	4053      	eors	r3, r2
    2496:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    2498:	0020      	movs	r0, r4
    249a:	4b22      	ldr	r3, [pc, #136]	; (2524 <rtc_calendar_swap_time_mode+0x114>)
    249c:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    249e:	a904      	add	r1, sp, #16
    24a0:	0020      	movs	r0, r4
    24a2:	4b21      	ldr	r3, [pc, #132]	; (2528 <rtc_calendar_swap_time_mode+0x118>)
    24a4:	4798      	blx	r3
}
    24a6:	b006      	add	sp, #24
    24a8:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    24aa:	ab04      	add	r3, sp, #16
    24ac:	78db      	ldrb	r3, [r3, #3]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d015      	beq.n	24de <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    24b2:	ab04      	add	r3, sp, #16
    24b4:	789a      	ldrb	r2, [r3, #2]
    24b6:	320c      	adds	r2, #12
    24b8:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    24ba:	2200      	movs	r2, #0
    24bc:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    24be:	ad01      	add	r5, sp, #4
    24c0:	2200      	movs	r2, #0
    24c2:	0029      	movs	r1, r5
    24c4:	0020      	movs	r0, r4
    24c6:	4b14      	ldr	r3, [pc, #80]	; (2518 <rtc_calendar_swap_time_mode+0x108>)
    24c8:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    24ca:	78eb      	ldrb	r3, [r5, #3]
    24cc:	2b00      	cmp	r3, #0
    24ce:	d10e      	bne.n	24ee <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    24d0:	ab01      	add	r3, sp, #4
    24d2:	789b      	ldrb	r3, [r3, #2]
    24d4:	2b0c      	cmp	r3, #12
    24d6:	d017      	beq.n	2508 <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    24d8:	2301      	movs	r3, #1
    24da:	7123      	strb	r3, [r4, #4]
    24dc:	e7d5      	b.n	248a <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    24de:	ab04      	add	r3, sp, #16
    24e0:	789b      	ldrb	r3, [r3, #2]
    24e2:	2b0c      	cmp	r3, #12
    24e4:	d1eb      	bne.n	24be <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    24e6:	2200      	movs	r2, #0
    24e8:	ab04      	add	r3, sp, #16
    24ea:	709a      	strb	r2, [r3, #2]
    24ec:	e7e7      	b.n	24be <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    24ee:	a901      	add	r1, sp, #4
    24f0:	788b      	ldrb	r3, [r1, #2]
    24f2:	330c      	adds	r3, #12
    24f4:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    24f6:	2300      	movs	r3, #0
    24f8:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    24fa:	3301      	adds	r3, #1
    24fc:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    24fe:	2200      	movs	r2, #0
    2500:	0020      	movs	r0, r4
    2502:	4b06      	ldr	r3, [pc, #24]	; (251c <rtc_calendar_swap_time_mode+0x10c>)
    2504:	4798      	blx	r3
    2506:	e7e7      	b.n	24d8 <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    2508:	2200      	movs	r2, #0
    250a:	ab01      	add	r3, sp, #4
    250c:	709a      	strb	r2, [r3, #2]
    250e:	e7e3      	b.n	24d8 <rtc_calendar_swap_time_mode+0xc8>
    2510:	000022dd 	.word	0x000022dd
    2514:	00008e35 	.word	0x00008e35
    2518:	000023e9 	.word	0x000023e9
    251c:	00002325 	.word	0x00002325
    2520:	0000220d 	.word	0x0000220d
    2524:	000021f9 	.word	0x000021f9
    2528:	000022c5 	.word	0x000022c5

0000252c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    252c:	4770      	bx	lr
	...

00002530 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2530:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2532:	4b0a      	ldr	r3, [pc, #40]	; (255c <_sercom_set_handler+0x2c>)
    2534:	781b      	ldrb	r3, [r3, #0]
    2536:	2b00      	cmp	r3, #0
    2538:	d10c      	bne.n	2554 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    253a:	4f09      	ldr	r7, [pc, #36]	; (2560 <_sercom_set_handler+0x30>)
    253c:	4e09      	ldr	r6, [pc, #36]	; (2564 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    253e:	4d0a      	ldr	r5, [pc, #40]	; (2568 <_sercom_set_handler+0x38>)
    2540:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2542:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2544:	195a      	adds	r2, r3, r5
    2546:	6014      	str	r4, [r2, #0]
    2548:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    254a:	2b18      	cmp	r3, #24
    254c:	d1f9      	bne.n	2542 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    254e:	2201      	movs	r2, #1
    2550:	4b02      	ldr	r3, [pc, #8]	; (255c <_sercom_set_handler+0x2c>)
    2552:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2554:	0080      	lsls	r0, r0, #2
    2556:	4b02      	ldr	r3, [pc, #8]	; (2560 <_sercom_set_handler+0x30>)
    2558:	50c1      	str	r1, [r0, r3]
}
    255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    255c:	20000228 	.word	0x20000228
    2560:	2000022c 	.word	0x2000022c
    2564:	0000252d 	.word	0x0000252d
    2568:	200003bc 	.word	0x200003bc

0000256c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    256c:	b500      	push	{lr}
    256e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2570:	2309      	movs	r3, #9
    2572:	466a      	mov	r2, sp
    2574:	7013      	strb	r3, [r2, #0]
    2576:	3301      	adds	r3, #1
    2578:	7053      	strb	r3, [r2, #1]
    257a:	3301      	adds	r3, #1
    257c:	7093      	strb	r3, [r2, #2]
    257e:	3301      	adds	r3, #1
    2580:	70d3      	strb	r3, [r2, #3]
    2582:	3301      	adds	r3, #1
    2584:	7113      	strb	r3, [r2, #4]
    2586:	3301      	adds	r3, #1
    2588:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    258a:	4b03      	ldr	r3, [pc, #12]	; (2598 <_sercom_get_interrupt_vector+0x2c>)
    258c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    258e:	466b      	mov	r3, sp
    2590:	5618      	ldrsb	r0, [r3, r0]
}
    2592:	b003      	add	sp, #12
    2594:	bd00      	pop	{pc}
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00007715 	.word	0x00007715

0000259c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    259c:	b510      	push	{r4, lr}
    259e:	4b02      	ldr	r3, [pc, #8]	; (25a8 <SERCOM0_Handler+0xc>)
    25a0:	681b      	ldr	r3, [r3, #0]
    25a2:	2000      	movs	r0, #0
    25a4:	4798      	blx	r3
    25a6:	bd10      	pop	{r4, pc}
    25a8:	2000022c 	.word	0x2000022c

000025ac <SERCOM1_Handler>:
    25ac:	b510      	push	{r4, lr}
    25ae:	4b02      	ldr	r3, [pc, #8]	; (25b8 <SERCOM1_Handler+0xc>)
    25b0:	685b      	ldr	r3, [r3, #4]
    25b2:	2001      	movs	r0, #1
    25b4:	4798      	blx	r3
    25b6:	bd10      	pop	{r4, pc}
    25b8:	2000022c 	.word	0x2000022c

000025bc <SERCOM2_Handler>:
    25bc:	b510      	push	{r4, lr}
    25be:	4b02      	ldr	r3, [pc, #8]	; (25c8 <SERCOM2_Handler+0xc>)
    25c0:	689b      	ldr	r3, [r3, #8]
    25c2:	2002      	movs	r0, #2
    25c4:	4798      	blx	r3
    25c6:	bd10      	pop	{r4, pc}
    25c8:	2000022c 	.word	0x2000022c

000025cc <SERCOM3_Handler>:
    25cc:	b510      	push	{r4, lr}
    25ce:	4b02      	ldr	r3, [pc, #8]	; (25d8 <SERCOM3_Handler+0xc>)
    25d0:	68db      	ldr	r3, [r3, #12]
    25d2:	2003      	movs	r0, #3
    25d4:	4798      	blx	r3
    25d6:	bd10      	pop	{r4, pc}
    25d8:	2000022c 	.word	0x2000022c

000025dc <SERCOM4_Handler>:
    25dc:	b510      	push	{r4, lr}
    25de:	4b02      	ldr	r3, [pc, #8]	; (25e8 <SERCOM4_Handler+0xc>)
    25e0:	691b      	ldr	r3, [r3, #16]
    25e2:	2004      	movs	r0, #4
    25e4:	4798      	blx	r3
    25e6:	bd10      	pop	{r4, pc}
    25e8:	2000022c 	.word	0x2000022c

000025ec <SERCOM5_Handler>:
    25ec:	b510      	push	{r4, lr}
    25ee:	4b02      	ldr	r3, [pc, #8]	; (25f8 <SERCOM5_Handler+0xc>)
    25f0:	695b      	ldr	r3, [r3, #20]
    25f2:	2005      	movs	r0, #5
    25f4:	4798      	blx	r3
    25f6:	bd10      	pop	{r4, pc}
    25f8:	2000022c 	.word	0x2000022c

000025fc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    25fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fe:	46de      	mov	lr, fp
    2600:	4657      	mov	r7, sl
    2602:	464e      	mov	r6, r9
    2604:	4645      	mov	r5, r8
    2606:	b5e0      	push	{r5, r6, r7, lr}
    2608:	b091      	sub	sp, #68	; 0x44
    260a:	0005      	movs	r5, r0
    260c:	000c      	movs	r4, r1
    260e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2610:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2612:	0008      	movs	r0, r1
    2614:	4bbc      	ldr	r3, [pc, #752]	; (2908 <usart_init+0x30c>)
    2616:	4798      	blx	r3
    2618:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    261a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    261c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    261e:	07db      	lsls	r3, r3, #31
    2620:	d506      	bpl.n	2630 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2622:	b011      	add	sp, #68	; 0x44
    2624:	bc3c      	pop	{r2, r3, r4, r5}
    2626:	4690      	mov	r8, r2
    2628:	4699      	mov	r9, r3
    262a:	46a2      	mov	sl, r4
    262c:	46ab      	mov	fp, r5
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2630:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2632:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2634:	079b      	lsls	r3, r3, #30
    2636:	d4f4      	bmi.n	2622 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    2638:	49b4      	ldr	r1, [pc, #720]	; (290c <usart_init+0x310>)
    263a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    263c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    263e:	2301      	movs	r3, #1
    2640:	40bb      	lsls	r3, r7
    2642:	4303      	orrs	r3, r0
    2644:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2646:	a90f      	add	r1, sp, #60	; 0x3c
    2648:	272d      	movs	r7, #45	; 0x2d
    264a:	5df3      	ldrb	r3, [r6, r7]
    264c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    264e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2650:	b2d3      	uxtb	r3, r2
    2652:	9302      	str	r3, [sp, #8]
    2654:	0018      	movs	r0, r3
    2656:	4bae      	ldr	r3, [pc, #696]	; (2910 <usart_init+0x314>)
    2658:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    265a:	9802      	ldr	r0, [sp, #8]
    265c:	4bad      	ldr	r3, [pc, #692]	; (2914 <usart_init+0x318>)
    265e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2660:	5df0      	ldrb	r0, [r6, r7]
    2662:	2100      	movs	r1, #0
    2664:	4bac      	ldr	r3, [pc, #688]	; (2918 <usart_init+0x31c>)
    2666:	4798      	blx	r3
	module->character_size = config->character_size;
    2668:	7af3      	ldrb	r3, [r6, #11]
    266a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    266c:	2324      	movs	r3, #36	; 0x24
    266e:	5cf3      	ldrb	r3, [r6, r3]
    2670:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2672:	2325      	movs	r3, #37	; 0x25
    2674:	5cf3      	ldrb	r3, [r6, r3]
    2676:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2678:	7ef3      	ldrb	r3, [r6, #27]
    267a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    267c:	7f33      	ldrb	r3, [r6, #28]
    267e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2680:	682b      	ldr	r3, [r5, #0]
    2682:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2684:	0018      	movs	r0, r3
    2686:	4ba0      	ldr	r3, [pc, #640]	; (2908 <usart_init+0x30c>)
    2688:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    268a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    268c:	2200      	movs	r2, #0
    268e:	230e      	movs	r3, #14
    2690:	a906      	add	r1, sp, #24
    2692:	468c      	mov	ip, r1
    2694:	4463      	add	r3, ip
    2696:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2698:	8a32      	ldrh	r2, [r6, #16]
    269a:	9202      	str	r2, [sp, #8]
    269c:	2380      	movs	r3, #128	; 0x80
    269e:	01db      	lsls	r3, r3, #7
    26a0:	429a      	cmp	r2, r3
    26a2:	d100      	bne.n	26a6 <usart_init+0xaa>
    26a4:	e09e      	b.n	27e4 <usart_init+0x1e8>
    26a6:	d90f      	bls.n	26c8 <usart_init+0xcc>
    26a8:	23c0      	movs	r3, #192	; 0xc0
    26aa:	01db      	lsls	r3, r3, #7
    26ac:	9a02      	ldr	r2, [sp, #8]
    26ae:	429a      	cmp	r2, r3
    26b0:	d100      	bne.n	26b4 <usart_init+0xb8>
    26b2:	e092      	b.n	27da <usart_init+0x1de>
    26b4:	2380      	movs	r3, #128	; 0x80
    26b6:	021b      	lsls	r3, r3, #8
    26b8:	429a      	cmp	r2, r3
    26ba:	d000      	beq.n	26be <usart_init+0xc2>
    26bc:	e11f      	b.n	28fe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    26be:	2303      	movs	r3, #3
    26c0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26c2:	2300      	movs	r3, #0
    26c4:	9307      	str	r3, [sp, #28]
    26c6:	e008      	b.n	26da <usart_init+0xde>
	switch (config->sample_rate) {
    26c8:	2380      	movs	r3, #128	; 0x80
    26ca:	019b      	lsls	r3, r3, #6
    26cc:	429a      	cmp	r2, r3
    26ce:	d000      	beq.n	26d2 <usart_init+0xd6>
    26d0:	e115      	b.n	28fe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26d2:	2310      	movs	r3, #16
    26d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26d6:	3b0f      	subs	r3, #15
    26d8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    26da:	6833      	ldr	r3, [r6, #0]
    26dc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    26de:	68f3      	ldr	r3, [r6, #12]
    26e0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    26e2:	6973      	ldr	r3, [r6, #20]
    26e4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26e6:	7e33      	ldrb	r3, [r6, #24]
    26e8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26ea:	2326      	movs	r3, #38	; 0x26
    26ec:	5cf3      	ldrb	r3, [r6, r3]
    26ee:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    26f0:	6873      	ldr	r3, [r6, #4]
    26f2:	4699      	mov	r9, r3
	switch (transfer_mode)
    26f4:	2b00      	cmp	r3, #0
    26f6:	d100      	bne.n	26fa <usart_init+0xfe>
    26f8:	e0a0      	b.n	283c <usart_init+0x240>
    26fa:	2380      	movs	r3, #128	; 0x80
    26fc:	055b      	lsls	r3, r3, #21
    26fe:	4599      	cmp	r9, r3
    2700:	d100      	bne.n	2704 <usart_init+0x108>
    2702:	e084      	b.n	280e <usart_init+0x212>
	if(config->encoding_format_enable) {
    2704:	7e73      	ldrb	r3, [r6, #25]
    2706:	2b00      	cmp	r3, #0
    2708:	d002      	beq.n	2710 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    270a:	7eb3      	ldrb	r3, [r6, #26]
    270c:	4642      	mov	r2, r8
    270e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2710:	682a      	ldr	r2, [r5, #0]
    2712:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2714:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2716:	2b00      	cmp	r3, #0
    2718:	d1fc      	bne.n	2714 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    271a:	330e      	adds	r3, #14
    271c:	aa06      	add	r2, sp, #24
    271e:	4694      	mov	ip, r2
    2720:	4463      	add	r3, ip
    2722:	881b      	ldrh	r3, [r3, #0]
    2724:	4642      	mov	r2, r8
    2726:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2728:	9b05      	ldr	r3, [sp, #20]
    272a:	9a03      	ldr	r2, [sp, #12]
    272c:	4313      	orrs	r3, r2
    272e:	9a04      	ldr	r2, [sp, #16]
    2730:	4313      	orrs	r3, r2
    2732:	464a      	mov	r2, r9
    2734:	4313      	orrs	r3, r2
    2736:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2738:	465b      	mov	r3, fp
    273a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    273c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    273e:	4653      	mov	r3, sl
    2740:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2742:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2744:	2327      	movs	r3, #39	; 0x27
    2746:	5cf3      	ldrb	r3, [r6, r3]
    2748:	2b00      	cmp	r3, #0
    274a:	d101      	bne.n	2750 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    274c:	3304      	adds	r3, #4
    274e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2750:	7e73      	ldrb	r3, [r6, #25]
    2752:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2754:	7f32      	ldrb	r2, [r6, #28]
    2756:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2758:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    275a:	7f72      	ldrb	r2, [r6, #29]
    275c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    275e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2760:	2224      	movs	r2, #36	; 0x24
    2762:	5cb2      	ldrb	r2, [r6, r2]
    2764:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2766:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2768:	2225      	movs	r2, #37	; 0x25
    276a:	5cb2      	ldrb	r2, [r6, r2]
    276c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    276e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2770:	7ab1      	ldrb	r1, [r6, #10]
    2772:	7af2      	ldrb	r2, [r6, #11]
    2774:	4311      	orrs	r1, r2
    2776:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2778:	8933      	ldrh	r3, [r6, #8]
    277a:	2bff      	cmp	r3, #255	; 0xff
    277c:	d100      	bne.n	2780 <usart_init+0x184>
    277e:	e081      	b.n	2884 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2780:	2280      	movs	r2, #128	; 0x80
    2782:	0452      	lsls	r2, r2, #17
    2784:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2786:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2788:	232c      	movs	r3, #44	; 0x2c
    278a:	5cf3      	ldrb	r3, [r6, r3]
    278c:	2b00      	cmp	r3, #0
    278e:	d103      	bne.n	2798 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2790:	4b62      	ldr	r3, [pc, #392]	; (291c <usart_init+0x320>)
    2792:	789b      	ldrb	r3, [r3, #2]
    2794:	079b      	lsls	r3, r3, #30
    2796:	d501      	bpl.n	279c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2798:	2380      	movs	r3, #128	; 0x80
    279a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    279c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    279e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27a0:	2b00      	cmp	r3, #0
    27a2:	d1fc      	bne.n	279e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    27a4:	4643      	mov	r3, r8
    27a6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    27a8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27aa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27ac:	2b00      	cmp	r3, #0
    27ae:	d1fc      	bne.n	27aa <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    27b0:	4643      	mov	r3, r8
    27b2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    27b4:	ab0e      	add	r3, sp, #56	; 0x38
    27b6:	2280      	movs	r2, #128	; 0x80
    27b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    27ba:	2200      	movs	r2, #0
    27bc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    27be:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    27c0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    27c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    27c4:	930a      	str	r3, [sp, #40]	; 0x28
    27c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    27c8:	930b      	str	r3, [sp, #44]	; 0x2c
    27ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    27cc:	930c      	str	r3, [sp, #48]	; 0x30
    27ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    27d0:	9302      	str	r3, [sp, #8]
    27d2:	930d      	str	r3, [sp, #52]	; 0x34
    27d4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    27d6:	ae0a      	add	r6, sp, #40	; 0x28
    27d8:	e063      	b.n	28a2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27da:	2308      	movs	r3, #8
    27dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    27de:	3b07      	subs	r3, #7
    27e0:	9307      	str	r3, [sp, #28]
    27e2:	e77a      	b.n	26da <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    27e4:	6833      	ldr	r3, [r6, #0]
    27e6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    27e8:	68f3      	ldr	r3, [r6, #12]
    27ea:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    27ec:	6973      	ldr	r3, [r6, #20]
    27ee:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    27f0:	7e33      	ldrb	r3, [r6, #24]
    27f2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    27f4:	2326      	movs	r3, #38	; 0x26
    27f6:	5cf3      	ldrb	r3, [r6, r3]
    27f8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    27fa:	6873      	ldr	r3, [r6, #4]
    27fc:	4699      	mov	r9, r3
	switch (transfer_mode)
    27fe:	2b00      	cmp	r3, #0
    2800:	d018      	beq.n	2834 <usart_init+0x238>
    2802:	2380      	movs	r3, #128	; 0x80
    2804:	055b      	lsls	r3, r3, #21
    2806:	4599      	cmp	r9, r3
    2808:	d001      	beq.n	280e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    280a:	2000      	movs	r0, #0
    280c:	e025      	b.n	285a <usart_init+0x25e>
			if (!config->use_external_clock) {
    280e:	2327      	movs	r3, #39	; 0x27
    2810:	5cf3      	ldrb	r3, [r6, r3]
    2812:	2b00      	cmp	r3, #0
    2814:	d000      	beq.n	2818 <usart_init+0x21c>
    2816:	e775      	b.n	2704 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2818:	6a33      	ldr	r3, [r6, #32]
    281a:	001f      	movs	r7, r3
    281c:	b2c0      	uxtb	r0, r0
    281e:	4b40      	ldr	r3, [pc, #256]	; (2920 <usart_init+0x324>)
    2820:	4798      	blx	r3
    2822:	0001      	movs	r1, r0
    2824:	220e      	movs	r2, #14
    2826:	ab06      	add	r3, sp, #24
    2828:	469c      	mov	ip, r3
    282a:	4462      	add	r2, ip
    282c:	0038      	movs	r0, r7
    282e:	4b3d      	ldr	r3, [pc, #244]	; (2924 <usart_init+0x328>)
    2830:	4798      	blx	r3
    2832:	e012      	b.n	285a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2834:	2308      	movs	r3, #8
    2836:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2838:	2300      	movs	r3, #0
    283a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    283c:	2327      	movs	r3, #39	; 0x27
    283e:	5cf3      	ldrb	r3, [r6, r3]
    2840:	2b00      	cmp	r3, #0
    2842:	d00e      	beq.n	2862 <usart_init+0x266>
				status_code =
    2844:	9b06      	ldr	r3, [sp, #24]
    2846:	9300      	str	r3, [sp, #0]
    2848:	9b07      	ldr	r3, [sp, #28]
    284a:	220e      	movs	r2, #14
    284c:	a906      	add	r1, sp, #24
    284e:	468c      	mov	ip, r1
    2850:	4462      	add	r2, ip
    2852:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2854:	6a30      	ldr	r0, [r6, #32]
    2856:	4f34      	ldr	r7, [pc, #208]	; (2928 <usart_init+0x32c>)
    2858:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    285a:	2800      	cmp	r0, #0
    285c:	d000      	beq.n	2860 <usart_init+0x264>
    285e:	e6e0      	b.n	2622 <usart_init+0x26>
    2860:	e750      	b.n	2704 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2862:	6a33      	ldr	r3, [r6, #32]
    2864:	001f      	movs	r7, r3
    2866:	b2c0      	uxtb	r0, r0
    2868:	4b2d      	ldr	r3, [pc, #180]	; (2920 <usart_init+0x324>)
    286a:	4798      	blx	r3
    286c:	0001      	movs	r1, r0
				status_code =
    286e:	9b06      	ldr	r3, [sp, #24]
    2870:	9300      	str	r3, [sp, #0]
    2872:	9b07      	ldr	r3, [sp, #28]
    2874:	220e      	movs	r2, #14
    2876:	a806      	add	r0, sp, #24
    2878:	4684      	mov	ip, r0
    287a:	4462      	add	r2, ip
    287c:	0038      	movs	r0, r7
    287e:	4f2a      	ldr	r7, [pc, #168]	; (2928 <usart_init+0x32c>)
    2880:	47b8      	blx	r7
    2882:	e7ea      	b.n	285a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2884:	7ef3      	ldrb	r3, [r6, #27]
    2886:	2b00      	cmp	r3, #0
    2888:	d100      	bne.n	288c <usart_init+0x290>
    288a:	e77d      	b.n	2788 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    288c:	2380      	movs	r3, #128	; 0x80
    288e:	04db      	lsls	r3, r3, #19
    2890:	431f      	orrs	r7, r3
    2892:	e779      	b.n	2788 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2894:	0020      	movs	r0, r4
    2896:	4b25      	ldr	r3, [pc, #148]	; (292c <usart_init+0x330>)
    2898:	4798      	blx	r3
    289a:	e007      	b.n	28ac <usart_init+0x2b0>
    289c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    289e:	2f04      	cmp	r7, #4
    28a0:	d00d      	beq.n	28be <usart_init+0x2c2>
    28a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    28a4:	00bb      	lsls	r3, r7, #2
    28a6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    28a8:	2800      	cmp	r0, #0
    28aa:	d0f3      	beq.n	2894 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    28ac:	1c43      	adds	r3, r0, #1
    28ae:	d0f5      	beq.n	289c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    28b0:	a90e      	add	r1, sp, #56	; 0x38
    28b2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    28b4:	0c00      	lsrs	r0, r0, #16
    28b6:	b2c0      	uxtb	r0, r0
    28b8:	4b1d      	ldr	r3, [pc, #116]	; (2930 <usart_init+0x334>)
    28ba:	4798      	blx	r3
    28bc:	e7ee      	b.n	289c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    28be:	2300      	movs	r3, #0
    28c0:	60eb      	str	r3, [r5, #12]
    28c2:	612b      	str	r3, [r5, #16]
    28c4:	616b      	str	r3, [r5, #20]
    28c6:	61ab      	str	r3, [r5, #24]
    28c8:	61eb      	str	r3, [r5, #28]
    28ca:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    28cc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    28ce:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    28d0:	2200      	movs	r2, #0
    28d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    28d4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    28d6:	3330      	adds	r3, #48	; 0x30
    28d8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    28da:	3301      	adds	r3, #1
    28dc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    28de:	3301      	adds	r3, #1
    28e0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    28e2:	3301      	adds	r3, #1
    28e4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    28e6:	6828      	ldr	r0, [r5, #0]
    28e8:	4b07      	ldr	r3, [pc, #28]	; (2908 <usart_init+0x30c>)
    28ea:	4798      	blx	r3
    28ec:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    28ee:	4911      	ldr	r1, [pc, #68]	; (2934 <usart_init+0x338>)
    28f0:	4b11      	ldr	r3, [pc, #68]	; (2938 <usart_init+0x33c>)
    28f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    28f4:	00a4      	lsls	r4, r4, #2
    28f6:	4b11      	ldr	r3, [pc, #68]	; (293c <usart_init+0x340>)
    28f8:	50e5      	str	r5, [r4, r3]
	return status_code;
    28fa:	2000      	movs	r0, #0
    28fc:	e691      	b.n	2622 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28fe:	2310      	movs	r3, #16
    2900:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2902:	2300      	movs	r3, #0
    2904:	9307      	str	r3, [sp, #28]
    2906:	e6e8      	b.n	26da <usart_init+0xde>
    2908:	00007715 	.word	0x00007715
    290c:	40000400 	.word	0x40000400
    2910:	00008aad 	.word	0x00008aad
    2914:	00008a21 	.word	0x00008a21
    2918:	00007551 	.word	0x00007551
    291c:	41002000 	.word	0x41002000
    2920:	00008ac9 	.word	0x00008ac9
    2924:	00007493 	.word	0x00007493
    2928:	000074bd 	.word	0x000074bd
    292c:	0000759d 	.word	0x0000759d
    2930:	00008ba5 	.word	0x00008ba5
    2934:	000029dd 	.word	0x000029dd
    2938:	00002531 	.word	0x00002531
    293c:	200003bc 	.word	0x200003bc

00002940 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2940:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2942:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2944:	2a00      	cmp	r2, #0
    2946:	d101      	bne.n	294c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2948:	0018      	movs	r0, r3
    294a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    294c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    294e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2950:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2952:	2a00      	cmp	r2, #0
    2954:	d1f8      	bne.n	2948 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2956:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2958:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    295a:	2a00      	cmp	r2, #0
    295c:	d1fc      	bne.n	2958 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    295e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2960:	2102      	movs	r1, #2
    2962:	7e1a      	ldrb	r2, [r3, #24]
    2964:	420a      	tst	r2, r1
    2966:	d0fc      	beq.n	2962 <usart_write_wait+0x22>
	return STATUS_OK;
    2968:	2300      	movs	r3, #0
    296a:	e7ed      	b.n	2948 <usart_write_wait+0x8>

0000296c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    296c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    296e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2970:	2a00      	cmp	r2, #0
    2972:	d101      	bne.n	2978 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2974:	0018      	movs	r0, r3
    2976:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2978:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    297a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    297c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    297e:	2a00      	cmp	r2, #0
    2980:	d1f8      	bne.n	2974 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2982:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2984:	7e10      	ldrb	r0, [r2, #24]
    2986:	0740      	lsls	r0, r0, #29
    2988:	d5f4      	bpl.n	2974 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    298a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    298c:	2b00      	cmp	r3, #0
    298e:	d1fc      	bne.n	298a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2990:	8b53      	ldrh	r3, [r2, #26]
    2992:	b2db      	uxtb	r3, r3
	if (error_code) {
    2994:	0698      	lsls	r0, r3, #26
    2996:	d01d      	beq.n	29d4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2998:	0798      	lsls	r0, r3, #30
    299a:	d503      	bpl.n	29a4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    299c:	2302      	movs	r3, #2
    299e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    29a0:	3318      	adds	r3, #24
    29a2:	e7e7      	b.n	2974 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29a4:	0758      	lsls	r0, r3, #29
    29a6:	d503      	bpl.n	29b0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29a8:	2304      	movs	r3, #4
    29aa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    29ac:	331a      	adds	r3, #26
    29ae:	e7e1      	b.n	2974 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    29b0:	07d8      	lsls	r0, r3, #31
    29b2:	d503      	bpl.n	29bc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    29b4:	2301      	movs	r3, #1
    29b6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    29b8:	3312      	adds	r3, #18
    29ba:	e7db      	b.n	2974 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    29bc:	06d8      	lsls	r0, r3, #27
    29be:	d503      	bpl.n	29c8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    29c0:	2310      	movs	r3, #16
    29c2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    29c4:	3332      	adds	r3, #50	; 0x32
    29c6:	e7d5      	b.n	2974 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    29c8:	069b      	lsls	r3, r3, #26
    29ca:	d503      	bpl.n	29d4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    29cc:	2320      	movs	r3, #32
    29ce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    29d0:	3321      	adds	r3, #33	; 0x21
    29d2:	e7cf      	b.n	2974 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    29d4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    29d6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    29d8:	2300      	movs	r3, #0
    29da:	e7cb      	b.n	2974 <usart_read_wait+0x8>

000029dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    29dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    29de:	0080      	lsls	r0, r0, #2
    29e0:	4b62      	ldr	r3, [pc, #392]	; (2b6c <_usart_interrupt_handler+0x190>)
    29e2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    29e4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    29e6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    29e8:	2b00      	cmp	r3, #0
    29ea:	d1fc      	bne.n	29e6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    29ec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    29ee:	7da6      	ldrb	r6, [r4, #22]
    29f0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    29f2:	2330      	movs	r3, #48	; 0x30
    29f4:	5ceb      	ldrb	r3, [r5, r3]
    29f6:	2231      	movs	r2, #49	; 0x31
    29f8:	5caf      	ldrb	r7, [r5, r2]
    29fa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    29fc:	07f3      	lsls	r3, r6, #31
    29fe:	d522      	bpl.n	2a46 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2a00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a02:	b29b      	uxth	r3, r3
    2a04:	2b00      	cmp	r3, #0
    2a06:	d01c      	beq.n	2a42 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2a0a:	7813      	ldrb	r3, [r2, #0]
    2a0c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2a0e:	1c51      	adds	r1, r2, #1
    2a10:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a12:	7969      	ldrb	r1, [r5, #5]
    2a14:	2901      	cmp	r1, #1
    2a16:	d00e      	beq.n	2a36 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a18:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2a1a:	05db      	lsls	r3, r3, #23
    2a1c:	0ddb      	lsrs	r3, r3, #23
    2a1e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2a20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a22:	3b01      	subs	r3, #1
    2a24:	b29b      	uxth	r3, r3
    2a26:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d10c      	bne.n	2a46 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a2c:	3301      	adds	r3, #1
    2a2e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2a30:	3301      	adds	r3, #1
    2a32:	75a3      	strb	r3, [r4, #22]
    2a34:	e007      	b.n	2a46 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2a36:	7851      	ldrb	r1, [r2, #1]
    2a38:	0209      	lsls	r1, r1, #8
    2a3a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2a3c:	3202      	adds	r2, #2
    2a3e:	62aa      	str	r2, [r5, #40]	; 0x28
    2a40:	e7eb      	b.n	2a1a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a42:	2301      	movs	r3, #1
    2a44:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2a46:	07b3      	lsls	r3, r6, #30
    2a48:	d506      	bpl.n	2a58 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2a4a:	2302      	movs	r3, #2
    2a4c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2a4e:	2200      	movs	r2, #0
    2a50:	3331      	adds	r3, #49	; 0x31
    2a52:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2a54:	07fb      	lsls	r3, r7, #31
    2a56:	d41a      	bmi.n	2a8e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2a58:	0773      	lsls	r3, r6, #29
    2a5a:	d565      	bpl.n	2b28 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2a5c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a5e:	b29b      	uxth	r3, r3
    2a60:	2b00      	cmp	r3, #0
    2a62:	d05f      	beq.n	2b24 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a64:	8b63      	ldrh	r3, [r4, #26]
    2a66:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2a68:	071a      	lsls	r2, r3, #28
    2a6a:	d414      	bmi.n	2a96 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a6c:	223f      	movs	r2, #63	; 0x3f
    2a6e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2a70:	2b00      	cmp	r3, #0
    2a72:	d034      	beq.n	2ade <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2a74:	079a      	lsls	r2, r3, #30
    2a76:	d511      	bpl.n	2a9c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2a78:	221a      	movs	r2, #26
    2a7a:	2332      	movs	r3, #50	; 0x32
    2a7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a7e:	3b30      	subs	r3, #48	; 0x30
    2a80:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2a82:	077b      	lsls	r3, r7, #29
    2a84:	d550      	bpl.n	2b28 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2a86:	0028      	movs	r0, r5
    2a88:	696b      	ldr	r3, [r5, #20]
    2a8a:	4798      	blx	r3
    2a8c:	e04c      	b.n	2b28 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2a8e:	0028      	movs	r0, r5
    2a90:	68eb      	ldr	r3, [r5, #12]
    2a92:	4798      	blx	r3
    2a94:	e7e0      	b.n	2a58 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2a96:	2237      	movs	r2, #55	; 0x37
    2a98:	4013      	ands	r3, r2
    2a9a:	e7e9      	b.n	2a70 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a9c:	075a      	lsls	r2, r3, #29
    2a9e:	d505      	bpl.n	2aac <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2aa0:	221e      	movs	r2, #30
    2aa2:	2332      	movs	r3, #50	; 0x32
    2aa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2aa6:	3b2e      	subs	r3, #46	; 0x2e
    2aa8:	8363      	strh	r3, [r4, #26]
    2aaa:	e7ea      	b.n	2a82 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2aac:	07da      	lsls	r2, r3, #31
    2aae:	d505      	bpl.n	2abc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2ab0:	2213      	movs	r2, #19
    2ab2:	2332      	movs	r3, #50	; 0x32
    2ab4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2ab6:	3b31      	subs	r3, #49	; 0x31
    2ab8:	8363      	strh	r3, [r4, #26]
    2aba:	e7e2      	b.n	2a82 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2abc:	06da      	lsls	r2, r3, #27
    2abe:	d505      	bpl.n	2acc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2ac0:	2242      	movs	r2, #66	; 0x42
    2ac2:	2332      	movs	r3, #50	; 0x32
    2ac4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2ac6:	3b22      	subs	r3, #34	; 0x22
    2ac8:	8363      	strh	r3, [r4, #26]
    2aca:	e7da      	b.n	2a82 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2acc:	2220      	movs	r2, #32
    2ace:	421a      	tst	r2, r3
    2ad0:	d0d7      	beq.n	2a82 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2ad2:	3221      	adds	r2, #33	; 0x21
    2ad4:	2332      	movs	r3, #50	; 0x32
    2ad6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2ad8:	3b12      	subs	r3, #18
    2ada:	8363      	strh	r3, [r4, #26]
    2adc:	e7d1      	b.n	2a82 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2ade:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ae0:	05db      	lsls	r3, r3, #23
    2ae2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2ae4:	b2da      	uxtb	r2, r3
    2ae6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2ae8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2aea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2aec:	1c51      	adds	r1, r2, #1
    2aee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2af0:	7969      	ldrb	r1, [r5, #5]
    2af2:	2901      	cmp	r1, #1
    2af4:	d010      	beq.n	2b18 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2af6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2af8:	3b01      	subs	r3, #1
    2afa:	b29b      	uxth	r3, r3
    2afc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2afe:	2b00      	cmp	r3, #0
    2b00:	d112      	bne.n	2b28 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b02:	3304      	adds	r3, #4
    2b04:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2b06:	2200      	movs	r2, #0
    2b08:	332e      	adds	r3, #46	; 0x2e
    2b0a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2b0c:	07bb      	lsls	r3, r7, #30
    2b0e:	d50b      	bpl.n	2b28 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2b10:	0028      	movs	r0, r5
    2b12:	692b      	ldr	r3, [r5, #16]
    2b14:	4798      	blx	r3
    2b16:	e007      	b.n	2b28 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2b18:	0a1b      	lsrs	r3, r3, #8
    2b1a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2b1c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2b1e:	3301      	adds	r3, #1
    2b20:	626b      	str	r3, [r5, #36]	; 0x24
    2b22:	e7e8      	b.n	2af6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b24:	2304      	movs	r3, #4
    2b26:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2b28:	06f3      	lsls	r3, r6, #27
    2b2a:	d504      	bpl.n	2b36 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2b2c:	2310      	movs	r3, #16
    2b2e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2b30:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2b32:	06fb      	lsls	r3, r7, #27
    2b34:	d40e      	bmi.n	2b54 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2b36:	06b3      	lsls	r3, r6, #26
    2b38:	d504      	bpl.n	2b44 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2b3a:	2320      	movs	r3, #32
    2b3c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b3e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2b40:	073b      	lsls	r3, r7, #28
    2b42:	d40b      	bmi.n	2b5c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2b44:	0733      	lsls	r3, r6, #28
    2b46:	d504      	bpl.n	2b52 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2b48:	2308      	movs	r3, #8
    2b4a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2b4c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2b4e:	06bb      	lsls	r3, r7, #26
    2b50:	d408      	bmi.n	2b64 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b54:	0028      	movs	r0, r5
    2b56:	69eb      	ldr	r3, [r5, #28]
    2b58:	4798      	blx	r3
    2b5a:	e7ec      	b.n	2b36 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2b5c:	0028      	movs	r0, r5
    2b5e:	69ab      	ldr	r3, [r5, #24]
    2b60:	4798      	blx	r3
    2b62:	e7ef      	b.n	2b44 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2b64:	6a2b      	ldr	r3, [r5, #32]
    2b66:	0028      	movs	r0, r5
    2b68:	4798      	blx	r3
}
    2b6a:	e7f2      	b.n	2b52 <_usart_interrupt_handler+0x176>
    2b6c:	200003bc 	.word	0x200003bc

00002b70 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2b70:	b510      	push	{r4, lr}
	switch (clock_source) {
    2b72:	2808      	cmp	r0, #8
    2b74:	d803      	bhi.n	2b7e <system_clock_source_get_hz+0xe>
    2b76:	0080      	lsls	r0, r0, #2
    2b78:	4b1e      	ldr	r3, [pc, #120]	; (2bf4 <system_clock_source_get_hz+0x84>)
    2b7a:	581b      	ldr	r3, [r3, r0]
    2b7c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2b7e:	2000      	movs	r0, #0
    2b80:	e036      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    2b82:	4b1d      	ldr	r3, [pc, #116]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2b84:	6918      	ldr	r0, [r3, #16]
    2b86:	e033      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2b88:	4b1c      	ldr	r3, [pc, #112]	; (2bfc <system_clock_source_get_hz+0x8c>)
    2b8a:	6a1b      	ldr	r3, [r3, #32]
    2b8c:	059b      	lsls	r3, r3, #22
    2b8e:	0f9b      	lsrs	r3, r3, #30
    2b90:	481b      	ldr	r0, [pc, #108]	; (2c00 <system_clock_source_get_hz+0x90>)
    2b92:	40d8      	lsrs	r0, r3
    2b94:	e02c      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2b96:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2b98:	6958      	ldr	r0, [r3, #20]
    2b9a:	e029      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2b9c:	4b16      	ldr	r3, [pc, #88]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2b9e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2ba0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ba2:	079b      	lsls	r3, r3, #30
    2ba4:	d524      	bpl.n	2bf0 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ba6:	4915      	ldr	r1, [pc, #84]	; (2bfc <system_clock_source_get_hz+0x8c>)
    2ba8:	2210      	movs	r2, #16
    2baa:	68cb      	ldr	r3, [r1, #12]
    2bac:	421a      	tst	r2, r3
    2bae:	d0fc      	beq.n	2baa <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2bb0:	4b11      	ldr	r3, [pc, #68]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2bb2:	681b      	ldr	r3, [r3, #0]
    2bb4:	075b      	lsls	r3, r3, #29
    2bb6:	d401      	bmi.n	2bbc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2bb8:	4812      	ldr	r0, [pc, #72]	; (2c04 <system_clock_source_get_hz+0x94>)
    2bba:	e019      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2bbc:	4b0e      	ldr	r3, [pc, #56]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2bbe:	681b      	ldr	r3, [r3, #0]
    2bc0:	069b      	lsls	r3, r3, #26
    2bc2:	d501      	bpl.n	2bc8 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2bc4:	480f      	ldr	r0, [pc, #60]	; (2c04 <system_clock_source_get_hz+0x94>)
    2bc6:	e013      	b.n	2bf0 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2bc8:	2000      	movs	r0, #0
    2bca:	4b0f      	ldr	r3, [pc, #60]	; (2c08 <system_clock_source_get_hz+0x98>)
    2bcc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2bce:	4b0a      	ldr	r3, [pc, #40]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2bd0:	689b      	ldr	r3, [r3, #8]
    2bd2:	041b      	lsls	r3, r3, #16
    2bd4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2bd6:	4358      	muls	r0, r3
    2bd8:	e00a      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2bda:	2350      	movs	r3, #80	; 0x50
    2bdc:	4a07      	ldr	r2, [pc, #28]	; (2bfc <system_clock_source_get_hz+0x8c>)
    2bde:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2be0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2be2:	075b      	lsls	r3, r3, #29
    2be4:	d504      	bpl.n	2bf0 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2be6:	4b04      	ldr	r3, [pc, #16]	; (2bf8 <system_clock_source_get_hz+0x88>)
    2be8:	68d8      	ldr	r0, [r3, #12]
    2bea:	e001      	b.n	2bf0 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2bec:	2080      	movs	r0, #128	; 0x80
    2bee:	0200      	lsls	r0, r0, #8
	}
}
    2bf0:	bd10      	pop	{r4, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	0000a57c 	.word	0x0000a57c
    2bf8:	20000244 	.word	0x20000244
    2bfc:	40000800 	.word	0x40000800
    2c00:	007a1200 	.word	0x007a1200
    2c04:	02dc6c00 	.word	0x02dc6c00
    2c08:	00008ac9 	.word	0x00008ac9

00002c0c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2c0c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2c0e:	490c      	ldr	r1, [pc, #48]	; (2c40 <system_clock_source_osc8m_set_config+0x34>)
    2c10:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2c12:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2c14:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2c16:	7840      	ldrb	r0, [r0, #1]
    2c18:	2201      	movs	r2, #1
    2c1a:	4010      	ands	r0, r2
    2c1c:	0180      	lsls	r0, r0, #6
    2c1e:	2640      	movs	r6, #64	; 0x40
    2c20:	43b3      	bics	r3, r6
    2c22:	4303      	orrs	r3, r0
    2c24:	402a      	ands	r2, r5
    2c26:	01d2      	lsls	r2, r2, #7
    2c28:	2080      	movs	r0, #128	; 0x80
    2c2a:	4383      	bics	r3, r0
    2c2c:	4313      	orrs	r3, r2
    2c2e:	2203      	movs	r2, #3
    2c30:	4022      	ands	r2, r4
    2c32:	0212      	lsls	r2, r2, #8
    2c34:	4803      	ldr	r0, [pc, #12]	; (2c44 <system_clock_source_osc8m_set_config+0x38>)
    2c36:	4003      	ands	r3, r0
    2c38:	4313      	orrs	r3, r2
    2c3a:	620b      	str	r3, [r1, #32]
}
    2c3c:	bd70      	pop	{r4, r5, r6, pc}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	40000800 	.word	0x40000800
    2c44:	fffffcff 	.word	0xfffffcff

00002c48 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c4a:	46ce      	mov	lr, r9
    2c4c:	4647      	mov	r7, r8
    2c4e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2c50:	4b19      	ldr	r3, [pc, #100]	; (2cb8 <system_clock_source_osc32k_set_config+0x70>)
    2c52:	4699      	mov	r9, r3
    2c54:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2c56:	7841      	ldrb	r1, [r0, #1]
    2c58:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2c5a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2c5c:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2c5e:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2c60:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2c62:	7880      	ldrb	r0, [r0, #2]
    2c64:	2101      	movs	r1, #1
    2c66:	4008      	ands	r0, r1
    2c68:	0080      	lsls	r0, r0, #2
    2c6a:	2204      	movs	r2, #4
    2c6c:	4393      	bics	r3, r2
    2c6e:	4303      	orrs	r3, r0
    2c70:	4660      	mov	r0, ip
    2c72:	4008      	ands	r0, r1
    2c74:	00c0      	lsls	r0, r0, #3
    2c76:	3204      	adds	r2, #4
    2c78:	4393      	bics	r3, r2
    2c7a:	4303      	orrs	r3, r0
    2c7c:	0038      	movs	r0, r7
    2c7e:	4008      	ands	r0, r1
    2c80:	0180      	lsls	r0, r0, #6
    2c82:	2740      	movs	r7, #64	; 0x40
    2c84:	43bb      	bics	r3, r7
    2c86:	4303      	orrs	r3, r0
    2c88:	0030      	movs	r0, r6
    2c8a:	4008      	ands	r0, r1
    2c8c:	01c0      	lsls	r0, r0, #7
    2c8e:	2680      	movs	r6, #128	; 0x80
    2c90:	43b3      	bics	r3, r6
    2c92:	4303      	orrs	r3, r0
    2c94:	2007      	movs	r0, #7
    2c96:	4005      	ands	r5, r0
    2c98:	022d      	lsls	r5, r5, #8
    2c9a:	4808      	ldr	r0, [pc, #32]	; (2cbc <system_clock_source_osc32k_set_config+0x74>)
    2c9c:	4003      	ands	r3, r0
    2c9e:	432b      	orrs	r3, r5
    2ca0:	4021      	ands	r1, r4
    2ca2:	0309      	lsls	r1, r1, #12
    2ca4:	4806      	ldr	r0, [pc, #24]	; (2cc0 <system_clock_source_osc32k_set_config+0x78>)
    2ca6:	4003      	ands	r3, r0
    2ca8:	430b      	orrs	r3, r1
    2caa:	464a      	mov	r2, r9
    2cac:	6193      	str	r3, [r2, #24]
}
    2cae:	bc0c      	pop	{r2, r3}
    2cb0:	4690      	mov	r8, r2
    2cb2:	4699      	mov	r9, r3
    2cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	40000800 	.word	0x40000800
    2cbc:	fffff8ff 	.word	0xfffff8ff
    2cc0:	ffffefff 	.word	0xffffefff

00002cc4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2cc4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cc6:	7a03      	ldrb	r3, [r0, #8]
    2cc8:	069b      	lsls	r3, r3, #26
    2cca:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2ccc:	8942      	ldrh	r2, [r0, #10]
    2cce:	0592      	lsls	r2, r2, #22
    2cd0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cd2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2cd4:	4918      	ldr	r1, [pc, #96]	; (2d38 <system_clock_source_dfll_set_config+0x74>)
    2cd6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2cd8:	7983      	ldrb	r3, [r0, #6]
    2cda:	79c2      	ldrb	r2, [r0, #7]
    2cdc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2cde:	8842      	ldrh	r2, [r0, #2]
    2ce0:	8884      	ldrh	r4, [r0, #4]
    2ce2:	4322      	orrs	r2, r4
    2ce4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2ce6:	7842      	ldrb	r2, [r0, #1]
    2ce8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2cea:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2cec:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2cee:	7803      	ldrb	r3, [r0, #0]
    2cf0:	2b04      	cmp	r3, #4
    2cf2:	d011      	beq.n	2d18 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2cf4:	2b20      	cmp	r3, #32
    2cf6:	d10e      	bne.n	2d16 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2cf8:	7b03      	ldrb	r3, [r0, #12]
    2cfa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2cfc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2cfe:	4313      	orrs	r3, r2
    2d00:	89c2      	ldrh	r2, [r0, #14]
    2d02:	0412      	lsls	r2, r2, #16
    2d04:	490d      	ldr	r1, [pc, #52]	; (2d3c <system_clock_source_dfll_set_config+0x78>)
    2d06:	400a      	ands	r2, r1
    2d08:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d0a:	4a0b      	ldr	r2, [pc, #44]	; (2d38 <system_clock_source_dfll_set_config+0x74>)
    2d0c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2d0e:	6811      	ldr	r1, [r2, #0]
    2d10:	4b0b      	ldr	r3, [pc, #44]	; (2d40 <system_clock_source_dfll_set_config+0x7c>)
    2d12:	430b      	orrs	r3, r1
    2d14:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2d16:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2d18:	7b03      	ldrb	r3, [r0, #12]
    2d1a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2d1c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2d1e:	4313      	orrs	r3, r2
    2d20:	89c2      	ldrh	r2, [r0, #14]
    2d22:	0412      	lsls	r2, r2, #16
    2d24:	4905      	ldr	r1, [pc, #20]	; (2d3c <system_clock_source_dfll_set_config+0x78>)
    2d26:	400a      	ands	r2, r1
    2d28:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d2a:	4a03      	ldr	r2, [pc, #12]	; (2d38 <system_clock_source_dfll_set_config+0x74>)
    2d2c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2d2e:	6813      	ldr	r3, [r2, #0]
    2d30:	2104      	movs	r1, #4
    2d32:	430b      	orrs	r3, r1
    2d34:	6013      	str	r3, [r2, #0]
    2d36:	e7ee      	b.n	2d16 <system_clock_source_dfll_set_config+0x52>
    2d38:	20000244 	.word	0x20000244
    2d3c:	03ff0000 	.word	0x03ff0000
    2d40:	00000424 	.word	0x00000424

00002d44 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2d44:	2808      	cmp	r0, #8
    2d46:	d803      	bhi.n	2d50 <system_clock_source_enable+0xc>
    2d48:	0080      	lsls	r0, r0, #2
    2d4a:	4b25      	ldr	r3, [pc, #148]	; (2de0 <system_clock_source_enable+0x9c>)
    2d4c:	581b      	ldr	r3, [r3, r0]
    2d4e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d50:	2017      	movs	r0, #23
    2d52:	e044      	b.n	2dde <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2d54:	4a23      	ldr	r2, [pc, #140]	; (2de4 <system_clock_source_enable+0xa0>)
    2d56:	6a13      	ldr	r3, [r2, #32]
    2d58:	2102      	movs	r1, #2
    2d5a:	430b      	orrs	r3, r1
    2d5c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2d5e:	2000      	movs	r0, #0
    2d60:	e03d      	b.n	2dde <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2d62:	4a20      	ldr	r2, [pc, #128]	; (2de4 <system_clock_source_enable+0xa0>)
    2d64:	6993      	ldr	r3, [r2, #24]
    2d66:	2102      	movs	r1, #2
    2d68:	430b      	orrs	r3, r1
    2d6a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2d6c:	2000      	movs	r0, #0
		break;
    2d6e:	e036      	b.n	2dde <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2d70:	4a1c      	ldr	r2, [pc, #112]	; (2de4 <system_clock_source_enable+0xa0>)
    2d72:	8a13      	ldrh	r3, [r2, #16]
    2d74:	2102      	movs	r1, #2
    2d76:	430b      	orrs	r3, r1
    2d78:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2d7a:	2000      	movs	r0, #0
		break;
    2d7c:	e02f      	b.n	2dde <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2d7e:	4a19      	ldr	r2, [pc, #100]	; (2de4 <system_clock_source_enable+0xa0>)
    2d80:	8a93      	ldrh	r3, [r2, #20]
    2d82:	2102      	movs	r1, #2
    2d84:	430b      	orrs	r3, r1
    2d86:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2d88:	2000      	movs	r0, #0
		break;
    2d8a:	e028      	b.n	2dde <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2d8c:	4916      	ldr	r1, [pc, #88]	; (2de8 <system_clock_source_enable+0xa4>)
    2d8e:	680b      	ldr	r3, [r1, #0]
    2d90:	2202      	movs	r2, #2
    2d92:	4313      	orrs	r3, r2
    2d94:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2d96:	4b13      	ldr	r3, [pc, #76]	; (2de4 <system_clock_source_enable+0xa0>)
    2d98:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d9a:	0019      	movs	r1, r3
    2d9c:	320e      	adds	r2, #14
    2d9e:	68cb      	ldr	r3, [r1, #12]
    2da0:	421a      	tst	r2, r3
    2da2:	d0fc      	beq.n	2d9e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2da4:	4a10      	ldr	r2, [pc, #64]	; (2de8 <system_clock_source_enable+0xa4>)
    2da6:	6891      	ldr	r1, [r2, #8]
    2da8:	4b0e      	ldr	r3, [pc, #56]	; (2de4 <system_clock_source_enable+0xa0>)
    2daa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2dac:	6852      	ldr	r2, [r2, #4]
    2dae:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2db0:	2200      	movs	r2, #0
    2db2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2db4:	0019      	movs	r1, r3
    2db6:	3210      	adds	r2, #16
    2db8:	68cb      	ldr	r3, [r1, #12]
    2dba:	421a      	tst	r2, r3
    2dbc:	d0fc      	beq.n	2db8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2dbe:	4b0a      	ldr	r3, [pc, #40]	; (2de8 <system_clock_source_enable+0xa4>)
    2dc0:	681b      	ldr	r3, [r3, #0]
    2dc2:	b29b      	uxth	r3, r3
    2dc4:	4a07      	ldr	r2, [pc, #28]	; (2de4 <system_clock_source_enable+0xa0>)
    2dc6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2dc8:	2000      	movs	r0, #0
    2dca:	e008      	b.n	2dde <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2dcc:	4905      	ldr	r1, [pc, #20]	; (2de4 <system_clock_source_enable+0xa0>)
    2dce:	2244      	movs	r2, #68	; 0x44
    2dd0:	5c8b      	ldrb	r3, [r1, r2]
    2dd2:	2002      	movs	r0, #2
    2dd4:	4303      	orrs	r3, r0
    2dd6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2dd8:	2000      	movs	r0, #0
		break;
    2dda:	e000      	b.n	2dde <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2ddc:	2000      	movs	r0, #0
}
    2dde:	4770      	bx	lr
    2de0:	0000a5a0 	.word	0x0000a5a0
    2de4:	40000800 	.word	0x40000800
    2de8:	20000244 	.word	0x20000244

00002dec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dee:	46ce      	mov	lr, r9
    2df0:	4647      	mov	r7, r8
    2df2:	b580      	push	{r7, lr}
    2df4:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2df6:	22c2      	movs	r2, #194	; 0xc2
    2df8:	00d2      	lsls	r2, r2, #3
    2dfa:	4b4b      	ldr	r3, [pc, #300]	; (2f28 <system_clock_init+0x13c>)
    2dfc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2dfe:	4a4b      	ldr	r2, [pc, #300]	; (2f2c <system_clock_init+0x140>)
    2e00:	6853      	ldr	r3, [r2, #4]
    2e02:	211e      	movs	r1, #30
    2e04:	438b      	bics	r3, r1
    2e06:	391a      	subs	r1, #26
    2e08:	430b      	orrs	r3, r1
    2e0a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2e0c:	2202      	movs	r2, #2
    2e0e:	ab01      	add	r3, sp, #4
    2e10:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2e12:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2e14:	4d46      	ldr	r5, [pc, #280]	; (2f30 <system_clock_init+0x144>)
    2e16:	b2e0      	uxtb	r0, r4
    2e18:	a901      	add	r1, sp, #4
    2e1a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2e1c:	3401      	adds	r4, #1
    2e1e:	2c25      	cmp	r4, #37	; 0x25
    2e20:	d1f9      	bne.n	2e16 <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2e22:	4c44      	ldr	r4, [pc, #272]	; (2f34 <system_clock_init+0x148>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2e24:	6823      	ldr	r3, [r4, #0]
    2e26:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2e28:	493f      	ldr	r1, [pc, #252]	; (2f28 <system_clock_init+0x13c>)
    2e2a:	698a      	ldr	r2, [r1, #24]
    2e2c:	0e5b      	lsrs	r3, r3, #25
    2e2e:	041b      	lsls	r3, r3, #16
    2e30:	4841      	ldr	r0, [pc, #260]	; (2f38 <system_clock_init+0x14c>)
    2e32:	4002      	ands	r2, r0
    2e34:	4313      	orrs	r3, r2
    2e36:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2e38:	a80a      	add	r0, sp, #40	; 0x28
    2e3a:	2301      	movs	r3, #1
    2e3c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2e3e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2e40:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2e42:	2207      	movs	r2, #7
    2e44:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2e46:	2500      	movs	r5, #0
    2e48:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2e4a:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2e4c:	4b3b      	ldr	r3, [pc, #236]	; (2f3c <system_clock_init+0x150>)
    2e4e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2e50:	2004      	movs	r0, #4
    2e52:	4b3b      	ldr	r3, [pc, #236]	; (2f40 <system_clock_init+0x154>)
    2e54:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2e56:	ab05      	add	r3, sp, #20
    2e58:	2200      	movs	r2, #0
    2e5a:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2e5c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2e5e:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2e60:	2120      	movs	r1, #32
    2e62:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2e64:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2e66:	6823      	ldr	r3, [r4, #0]
    2e68:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2e6a:	2b3f      	cmp	r3, #63	; 0x3f
    2e6c:	d05a      	beq.n	2f24 <system_clock_init+0x138>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2e6e:	a805      	add	r0, sp, #20
    2e70:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2e72:	2307      	movs	r3, #7
    2e74:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2e76:	3303      	adds	r3, #3
    2e78:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2e7a:	4b32      	ldr	r3, [pc, #200]	; (2f44 <system_clock_init+0x158>)
    2e7c:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2e7e:	3bff      	subs	r3, #255	; 0xff
    2e80:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2e82:	4b31      	ldr	r3, [pc, #196]	; (2f48 <system_clock_init+0x15c>)
    2e84:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2e86:	4b31      	ldr	r3, [pc, #196]	; (2f4c <system_clock_init+0x160>)
    2e88:	4798      	blx	r3
	config->run_in_standby  = false;
    2e8a:	a804      	add	r0, sp, #16
    2e8c:	2500      	movs	r5, #0
    2e8e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2e90:	2601      	movs	r6, #1
    2e92:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2e94:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2e96:	4b2e      	ldr	r3, [pc, #184]	; (2f50 <system_clock_init+0x164>)
    2e98:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2e9a:	2006      	movs	r0, #6
    2e9c:	4f28      	ldr	r7, [pc, #160]	; (2f40 <system_clock_init+0x154>)
    2e9e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2ea0:	4b2c      	ldr	r3, [pc, #176]	; (2f54 <system_clock_init+0x168>)
    2ea2:	4798      	blx	r3
	config->division_factor    = 1;
    2ea4:	ac01      	add	r4, sp, #4
    2ea6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2ea8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2eaa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2eac:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2eae:	2305      	movs	r3, #5
    2eb0:	7023      	strb	r3, [r4, #0]
    2eb2:	0021      	movs	r1, r4
    2eb4:	2001      	movs	r0, #1
    2eb6:	4b28      	ldr	r3, [pc, #160]	; (2f58 <system_clock_init+0x16c>)
    2eb8:	4699      	mov	r9, r3
    2eba:	4798      	blx	r3
    2ebc:	2001      	movs	r0, #1
    2ebe:	4b27      	ldr	r3, [pc, #156]	; (2f5c <system_clock_init+0x170>)
    2ec0:	4698      	mov	r8, r3
    2ec2:	4798      	blx	r3
	config->division_factor    = 1;
    2ec4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2ec6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2ec8:	7265      	strb	r5, [r4, #9]
    2eca:	2304      	movs	r3, #4
    2ecc:	7023      	strb	r3, [r4, #0]
    2ece:	7226      	strb	r6, [r4, #8]
    2ed0:	0021      	movs	r1, r4
    2ed2:	2007      	movs	r0, #7
    2ed4:	47c8      	blx	r9
    2ed6:	2007      	movs	r0, #7
    2ed8:	47c0      	blx	r8
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2eda:	2007      	movs	r0, #7
    2edc:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2ede:	4912      	ldr	r1, [pc, #72]	; (2f28 <system_clock_init+0x13c>)
    2ee0:	2210      	movs	r2, #16
    2ee2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2ee4:	421a      	tst	r2, r3
    2ee6:	d0fc      	beq.n	2ee2 <system_clock_init+0xf6>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2ee8:	4a0f      	ldr	r2, [pc, #60]	; (2f28 <system_clock_init+0x13c>)
    2eea:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2eec:	2180      	movs	r1, #128	; 0x80
    2eee:	430b      	orrs	r3, r1
    2ef0:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2ef2:	4a1b      	ldr	r2, [pc, #108]	; (2f60 <system_clock_init+0x174>)
    2ef4:	2300      	movs	r3, #0
    2ef6:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ef8:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2efa:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2efc:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2efe:	a901      	add	r1, sp, #4
    2f00:	2201      	movs	r2, #1
    2f02:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2f04:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2f06:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2f08:	3307      	adds	r3, #7
    2f0a:	700b      	strb	r3, [r1, #0]
    2f0c:	720a      	strb	r2, [r1, #8]
    2f0e:	2000      	movs	r0, #0
    2f10:	4b11      	ldr	r3, [pc, #68]	; (2f58 <system_clock_init+0x16c>)
    2f12:	4798      	blx	r3
    2f14:	2000      	movs	r0, #0
    2f16:	4b11      	ldr	r3, [pc, #68]	; (2f5c <system_clock_init+0x170>)
    2f18:	4798      	blx	r3
#endif
}
    2f1a:	b00d      	add	sp, #52	; 0x34
    2f1c:	bc0c      	pop	{r2, r3}
    2f1e:	4690      	mov	r8, r2
    2f20:	4699      	mov	r9, r3
    2f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2f24:	3b20      	subs	r3, #32
    2f26:	e7a2      	b.n	2e6e <system_clock_init+0x82>
    2f28:	40000800 	.word	0x40000800
    2f2c:	41004000 	.word	0x41004000
    2f30:	00008aad 	.word	0x00008aad
    2f34:	00806024 	.word	0x00806024
    2f38:	ff80ffff 	.word	0xff80ffff
    2f3c:	00002c49 	.word	0x00002c49
    2f40:	00002d45 	.word	0x00002d45
    2f44:	000001ff 	.word	0x000001ff
    2f48:	ffffbb80 	.word	0xffffbb80
    2f4c:	00002cc5 	.word	0x00002cc5
    2f50:	00002c0d 	.word	0x00002c0d
    2f54:	00008875 	.word	0x00008875
    2f58:	00008899 	.word	0x00008899
    2f5c:	00008951 	.word	0x00008951
    2f60:	40000400 	.word	0x40000400

00002f64 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2f64:	b510      	push	{r4, lr}
    2f66:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2f68:	ab03      	add	r3, sp, #12
    2f6a:	2200      	movs	r2, #0
    2f6c:	701a      	strb	r2, [r3, #0]
    2f6e:	3203      	adds	r2, #3
    2f70:	705a      	strb	r2, [r3, #1]
    2f72:	3a01      	subs	r2, #1
    2f74:	709a      	strb	r2, [r3, #2]
    2f76:	3a01      	subs	r2, #1
    2f78:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2f7a:	4b27      	ldr	r3, [pc, #156]	; (3018 <udd_sleep_mode+0xb4>)
    2f7c:	781b      	ldrb	r3, [r3, #0]
    2f7e:	4283      	cmp	r3, r0
    2f80:	d007      	beq.n	2f92 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2f82:	2800      	cmp	r0, #0
    2f84:	d107      	bne.n	2f96 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2f86:	4b24      	ldr	r3, [pc, #144]	; (3018 <udd_sleep_mode+0xb4>)
    2f88:	781b      	ldrb	r3, [r3, #0]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d123      	bne.n	2fd6 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2f8e:	4b22      	ldr	r3, [pc, #136]	; (3018 <udd_sleep_mode+0xb4>)
    2f90:	7018      	strb	r0, [r3, #0]
}
    2f92:	b004      	add	sp, #16
    2f94:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2f96:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2f98:	5c1b      	ldrb	r3, [r3, r0]
    2f9a:	4a20      	ldr	r2, [pc, #128]	; (301c <udd_sleep_mode+0xb8>)
    2f9c:	5cd2      	ldrb	r2, [r2, r3]
    2f9e:	2aff      	cmp	r2, #255	; 0xff
    2fa0:	d100      	bne.n	2fa4 <udd_sleep_mode+0x40>
    2fa2:	e7fe      	b.n	2fa2 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fa4:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2fa8:	4251      	negs	r1, r2
    2faa:	414a      	adcs	r2, r1
    2fac:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2fae:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2fb0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2fb4:	2100      	movs	r1, #0
    2fb6:	4a1a      	ldr	r2, [pc, #104]	; (3020 <udd_sleep_mode+0xbc>)
    2fb8:	7011      	strb	r1, [r2, #0]
	return flags;
    2fba:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2fbc:	4917      	ldr	r1, [pc, #92]	; (301c <udd_sleep_mode+0xb8>)
    2fbe:	5cca      	ldrb	r2, [r1, r3]
    2fc0:	3201      	adds	r2, #1
    2fc2:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2fc4:	2c00      	cmp	r4, #0
    2fc6:	d0de      	beq.n	2f86 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2fc8:	2201      	movs	r2, #1
    2fca:	4b15      	ldr	r3, [pc, #84]	; (3020 <udd_sleep_mode+0xbc>)
    2fcc:	701a      	strb	r2, [r3, #0]
    2fce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2fd2:	b662      	cpsie	i
    2fd4:	e7d7      	b.n	2f86 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2fd6:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2fd8:	5cd3      	ldrb	r3, [r2, r3]
    2fda:	4a10      	ldr	r2, [pc, #64]	; (301c <udd_sleep_mode+0xb8>)
    2fdc:	5cd2      	ldrb	r2, [r2, r3]
    2fde:	2a00      	cmp	r2, #0
    2fe0:	d100      	bne.n	2fe4 <udd_sleep_mode+0x80>
    2fe2:	e7fe      	b.n	2fe2 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2fe4:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2fe8:	4251      	negs	r1, r2
    2fea:	414a      	adcs	r2, r1
    2fec:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2fee:	b672      	cpsid	i
    2ff0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2ff4:	2100      	movs	r1, #0
    2ff6:	4a0a      	ldr	r2, [pc, #40]	; (3020 <udd_sleep_mode+0xbc>)
    2ff8:	7011      	strb	r1, [r2, #0]
	return flags;
    2ffa:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2ffc:	4907      	ldr	r1, [pc, #28]	; (301c <udd_sleep_mode+0xb8>)
    2ffe:	5cca      	ldrb	r2, [r1, r3]
    3000:	3a01      	subs	r2, #1
    3002:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    3004:	2c00      	cmp	r4, #0
    3006:	d0c2      	beq.n	2f8e <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    3008:	2201      	movs	r2, #1
    300a:	4b05      	ldr	r3, [pc, #20]	; (3020 <udd_sleep_mode+0xbc>)
    300c:	701a      	strb	r2, [r3, #0]
    300e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3012:	b662      	cpsie	i
    3014:	e7bb      	b.n	2f8e <udd_sleep_mode+0x2a>
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	200002b4 	.word	0x200002b4
    301c:	20002a34 	.word	0x20002a34
    3020:	20000125 	.word	0x20000125

00003024 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    3024:	0643      	lsls	r3, r0, #25
    3026:	d00b      	beq.n	3040 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3028:	230f      	movs	r3, #15
    302a:	4003      	ands	r3, r0
    302c:	005b      	lsls	r3, r3, #1
    302e:	09c0      	lsrs	r0, r0, #7
    3030:	1818      	adds	r0, r3, r0
    3032:	3802      	subs	r0, #2
    3034:	0083      	lsls	r3, r0, #2
    3036:	1818      	adds	r0, r3, r0
    3038:	0080      	lsls	r0, r0, #2
    303a:	4b02      	ldr	r3, [pc, #8]	; (3044 <udd_ep_get_job+0x20>)
    303c:	1818      	adds	r0, r3, r0
	}
}
    303e:	4770      	bx	lr
		return NULL;
    3040:	2000      	movs	r0, #0
    3042:	e7fc      	b.n	303e <udd_ep_get_job+0x1a>
    3044:	20000264 	.word	0x20000264

00003048 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    3048:	b5f0      	push	{r4, r5, r6, r7, lr}
    304a:	46d6      	mov	lr, sl
    304c:	464f      	mov	r7, r9
    304e:	4646      	mov	r6, r8
    3050:	b5c0      	push	{r6, r7, lr}
    3052:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    3054:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    3056:	b26b      	sxtb	r3, r5
    3058:	2b00      	cmp	r3, #0
    305a:	db26      	blt.n	30aa <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    305c:	0028      	movs	r0, r5
    305e:	4b5e      	ldr	r3, [pc, #376]	; (31d8 <udd_ep_transfer_process+0x190>)
    3060:	4798      	blx	r3
    3062:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    3064:	270f      	movs	r7, #15
    3066:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    3068:	8a03      	ldrh	r3, [r0, #16]
    306a:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    306c:	464b      	mov	r3, r9
    306e:	881b      	ldrh	r3, [r3, #0]
    3070:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    3072:	7c83      	ldrb	r3, [r0, #18]
    3074:	075b      	lsls	r3, r3, #29
    3076:	d46a      	bmi.n	314e <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    3078:	68e3      	ldr	r3, [r4, #12]
    307a:	4453      	add	r3, sl
    307c:	001e      	movs	r6, r3
    307e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    3080:	68a3      	ldr	r3, [r4, #8]
    3082:	429e      	cmp	r6, r3
    3084:	d800      	bhi.n	3088 <udd_ep_transfer_process+0x40>
    3086:	e074      	b.n	3172 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    3088:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    308a:	7ca3      	ldrb	r3, [r4, #18]
    308c:	2201      	movs	r2, #1
    308e:	4393      	bics	r3, r2
    3090:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    3092:	6823      	ldr	r3, [r4, #0]
    3094:	2b00      	cmp	r3, #0
    3096:	d003      	beq.n	30a0 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3098:	68e1      	ldr	r1, [r4, #12]
    309a:	002a      	movs	r2, r5
    309c:	2000      	movs	r0, #0
    309e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    30a0:	bc1c      	pop	{r2, r3, r4}
    30a2:	4690      	mov	r8, r2
    30a4:	4699      	mov	r9, r3
    30a6:	46a2      	mov	sl, r4
    30a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    30aa:	0028      	movs	r0, r5
    30ac:	4b4a      	ldr	r3, [pc, #296]	; (31d8 <udd_ep_transfer_process+0x190>)
    30ae:	4798      	blx	r3
    30b0:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    30b2:	270f      	movs	r7, #15
    30b4:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    30b6:	8a03      	ldrh	r3, [r0, #16]
    30b8:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    30ba:	464b      	mov	r3, r9
    30bc:	885e      	ldrh	r6, [r3, #2]
    30be:	68c3      	ldr	r3, [r0, #12]
    30c0:	469c      	mov	ip, r3
    30c2:	4466      	add	r6, ip
    30c4:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    30c6:	6881      	ldr	r1, [r0, #8]
    30c8:	428e      	cmp	r6, r1
    30ca:	d025      	beq.n	3118 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    30cc:	1b8d      	subs	r5, r1, r6
    30ce:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    30d0:	4b42      	ldr	r3, [pc, #264]	; (31dc <udd_ep_transfer_process+0x194>)
    30d2:	429d      	cmp	r5, r3
    30d4:	d906      	bls.n	30e4 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    30d6:	001d      	movs	r5, r3
    30d8:	4641      	mov	r1, r8
    30da:	0018      	movs	r0, r3
    30dc:	4b40      	ldr	r3, [pc, #256]	; (31e0 <udd_ep_transfer_process+0x198>)
    30de:	4798      	blx	r3
    30e0:	1a6d      	subs	r5, r5, r1
    30e2:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    30e4:	7ca2      	ldrb	r2, [r4, #18]
    30e6:	2300      	movs	r3, #0
    30e8:	0792      	lsls	r2, r2, #30
    30ea:	d507      	bpl.n	30fc <udd_ep_transfer_process+0xb4>
    30ec:	4641      	mov	r1, r8
    30ee:	0028      	movs	r0, r5
    30f0:	4b3c      	ldr	r3, [pc, #240]	; (31e4 <udd_ep_transfer_process+0x19c>)
    30f2:	4798      	blx	r3
    30f4:	b289      	uxth	r1, r1
    30f6:	424b      	negs	r3, r1
    30f8:	414b      	adcs	r3, r1
    30fa:	b2db      	uxtb	r3, r3
    30fc:	005b      	lsls	r3, r3, #1
    30fe:	7ca2      	ldrb	r2, [r4, #18]
    3100:	2102      	movs	r1, #2
    3102:	438a      	bics	r2, r1
    3104:	4313      	orrs	r3, r2
    3106:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3108:	6862      	ldr	r2, [r4, #4]
    310a:	1992      	adds	r2, r2, r6
    310c:	002b      	movs	r3, r5
    310e:	0039      	movs	r1, r7
    3110:	4835      	ldr	r0, [pc, #212]	; (31e8 <udd_ep_transfer_process+0x1a0>)
    3112:	4c36      	ldr	r4, [pc, #216]	; (31ec <udd_ep_transfer_process+0x1a4>)
    3114:	47a0      	blx	r4
    3116:	e7c3      	b.n	30a0 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    3118:	7c83      	ldrb	r3, [r0, #18]
    311a:	079b      	lsls	r3, r3, #30
    311c:	d40b      	bmi.n	3136 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    311e:	7c83      	ldrb	r3, [r0, #18]
    3120:	2201      	movs	r2, #1
    3122:	4393      	bics	r3, r2
    3124:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3126:	6803      	ldr	r3, [r0, #0]
    3128:	2b00      	cmp	r3, #0
    312a:	d0b9      	beq.n	30a0 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    312c:	002a      	movs	r2, r5
    312e:	0031      	movs	r1, r6
    3130:	2000      	movs	r0, #0
    3132:	4798      	blx	r3
    3134:	e7b4      	b.n	30a0 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    3136:	7c83      	ldrb	r3, [r0, #18]
    3138:	2202      	movs	r2, #2
    313a:	4393      	bics	r3, r2
    313c:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    313e:	6842      	ldr	r2, [r0, #4]
    3140:	1992      	adds	r2, r2, r6
    3142:	2300      	movs	r3, #0
    3144:	0039      	movs	r1, r7
    3146:	4828      	ldr	r0, [pc, #160]	; (31e8 <udd_ep_transfer_process+0x1a0>)
    3148:	4c28      	ldr	r4, [pc, #160]	; (31ec <udd_ep_transfer_process+0x1a4>)
    314a:	47a0      	blx	r4
    314c:	e7a8      	b.n	30a0 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    314e:	6843      	ldr	r3, [r0, #4]
    3150:	68c2      	ldr	r2, [r0, #12]
    3152:	4694      	mov	ip, r2
    3154:	4463      	add	r3, ip
    3156:	001e      	movs	r6, r3
    3158:	4641      	mov	r1, r8
    315a:	6880      	ldr	r0, [r0, #8]
    315c:	4b21      	ldr	r3, [pc, #132]	; (31e4 <udd_ep_transfer_process+0x19c>)
    315e:	4798      	blx	r3
    3160:	000a      	movs	r2, r1
    3162:	1e7b      	subs	r3, r7, #1
    3164:	019b      	lsls	r3, r3, #6
    3166:	4922      	ldr	r1, [pc, #136]	; (31f0 <udd_ep_transfer_process+0x1a8>)
    3168:	1859      	adds	r1, r3, r1
    316a:	0030      	movs	r0, r6
    316c:	4b21      	ldr	r3, [pc, #132]	; (31f4 <udd_ep_transfer_process+0x1ac>)
    316e:	4798      	blx	r3
    3170:	e782      	b.n	3078 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3172:	464a      	mov	r2, r9
    3174:	8892      	ldrh	r2, [r2, #4]
    3176:	4552      	cmp	r2, sl
    3178:	d000      	beq.n	317c <udd_ep_transfer_process+0x134>
    317a:	e786      	b.n	308a <udd_ep_transfer_process+0x42>
    317c:	429e      	cmp	r6, r3
    317e:	d100      	bne.n	3182 <udd_ep_transfer_process+0x13a>
    3180:	e783      	b.n	308a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3182:	1b9b      	subs	r3, r3, r6
    3184:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3186:	4b15      	ldr	r3, [pc, #84]	; (31dc <udd_ep_transfer_process+0x194>)
    3188:	429d      	cmp	r5, r3
    318a:	d916      	bls.n	31ba <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    318c:	001d      	movs	r5, r3
    318e:	4641      	mov	r1, r8
    3190:	0018      	movs	r0, r3
    3192:	4b13      	ldr	r3, [pc, #76]	; (31e0 <udd_ep_transfer_process+0x198>)
    3194:	4798      	blx	r3
    3196:	1a6b      	subs	r3, r5, r1
    3198:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    319a:	4598      	cmp	r8, r3
    319c:	d914      	bls.n	31c8 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    319e:	7ca3      	ldrb	r3, [r4, #18]
    31a0:	2204      	movs	r2, #4
    31a2:	4313      	orrs	r3, r2
    31a4:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    31a6:	1e7a      	subs	r2, r7, #1
    31a8:	0192      	lsls	r2, r2, #6
    31aa:	4b11      	ldr	r3, [pc, #68]	; (31f0 <udd_ep_transfer_process+0x1a8>)
    31ac:	18d2      	adds	r2, r2, r3
    31ae:	4643      	mov	r3, r8
    31b0:	0039      	movs	r1, r7
    31b2:	480d      	ldr	r0, [pc, #52]	; (31e8 <udd_ep_transfer_process+0x1a0>)
    31b4:	4c10      	ldr	r4, [pc, #64]	; (31f8 <udd_ep_transfer_process+0x1b0>)
    31b6:	47a0      	blx	r4
    31b8:	e772      	b.n	30a0 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    31ba:	4641      	mov	r1, r8
    31bc:	0028      	movs	r0, r5
    31be:	4b09      	ldr	r3, [pc, #36]	; (31e4 <udd_ep_transfer_process+0x19c>)
    31c0:	4798      	blx	r3
    31c2:	1a6b      	subs	r3, r5, r1
    31c4:	b29b      	uxth	r3, r3
    31c6:	e7e8      	b.n	319a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    31c8:	6862      	ldr	r2, [r4, #4]
    31ca:	1992      	adds	r2, r2, r6
    31cc:	0039      	movs	r1, r7
    31ce:	4806      	ldr	r0, [pc, #24]	; (31e8 <udd_ep_transfer_process+0x1a0>)
    31d0:	4c09      	ldr	r4, [pc, #36]	; (31f8 <udd_ep_transfer_process+0x1b0>)
    31d2:	47a0      	blx	r4
    31d4:	e764      	b.n	30a0 <udd_ep_transfer_process+0x58>
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00003025 	.word	0x00003025
    31dc:	00001fff 	.word	0x00001fff
    31e0:	00009009 	.word	0x00009009
    31e4:	00008e35 	.word	0x00008e35
    31e8:	20000454 	.word	0x20000454
    31ec:	00006a59 	.word	0x00006a59
    31f0:	200003d4 	.word	0x200003d4
    31f4:	00009305 	.word	0x00009305
    31f8:	00006aad 	.word	0x00006aad

000031fc <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    31fc:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    31fe:	2205      	movs	r2, #5
    3200:	4b05      	ldr	r3, [pc, #20]	; (3218 <udd_ctrl_stall_data+0x1c>)
    3202:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3204:	4c05      	ldr	r4, [pc, #20]	; (321c <udd_ctrl_stall_data+0x20>)
    3206:	2180      	movs	r1, #128	; 0x80
    3208:	0020      	movs	r0, r4
    320a:	4b05      	ldr	r3, [pc, #20]	; (3220 <udd_ctrl_stall_data+0x24>)
    320c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    320e:	2100      	movs	r1, #0
    3210:	0020      	movs	r0, r4
    3212:	4b04      	ldr	r3, [pc, #16]	; (3224 <udd_ctrl_stall_data+0x28>)
    3214:	4798      	blx	r3
}
    3216:	bd10      	pop	{r4, pc}
    3218:	20000262 	.word	0x20000262
    321c:	20000454 	.word	0x20000454
    3220:	000069ad 	.word	0x000069ad
    3224:	000069d3 	.word	0x000069d3

00003228 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    3228:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    322a:	4c08      	ldr	r4, [pc, #32]	; (324c <_usb_device_lpm_suspend+0x24>)
    322c:	2106      	movs	r1, #6
    322e:	0020      	movs	r0, r4
    3230:	4d07      	ldr	r5, [pc, #28]	; (3250 <_usb_device_lpm_suspend+0x28>)
    3232:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3234:	2104      	movs	r1, #4
    3236:	0020      	movs	r0, r4
    3238:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    323a:	2102      	movs	r1, #2
    323c:	0020      	movs	r0, r4
    323e:	4b05      	ldr	r3, [pc, #20]	; (3254 <_usb_device_lpm_suspend+0x2c>)
    3240:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3242:	2002      	movs	r0, #2
    3244:	4b04      	ldr	r3, [pc, #16]	; (3258 <_usb_device_lpm_suspend+0x30>)
    3246:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3248:	bd70      	pop	{r4, r5, r6, pc}
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	20000454 	.word	0x20000454
    3250:	000064c1 	.word	0x000064c1
    3254:	000064a1 	.word	0x000064a1
    3258:	00002f65 	.word	0x00002f65

0000325c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    325c:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    325e:	4b13      	ldr	r3, [pc, #76]	; (32ac <_usb_on_wakeup+0x50>)
    3260:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3262:	069b      	lsls	r3, r3, #26
    3264:	d41c      	bmi.n	32a0 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3266:	4911      	ldr	r1, [pc, #68]	; (32ac <_usb_on_wakeup+0x50>)
    3268:	22d0      	movs	r2, #208	; 0xd0
    326a:	68cb      	ldr	r3, [r1, #12]
    326c:	4013      	ands	r3, r2
    326e:	2bd0      	cmp	r3, #208	; 0xd0
    3270:	d1fb      	bne.n	326a <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3272:	4c0f      	ldr	r4, [pc, #60]	; (32b0 <_usb_on_wakeup+0x54>)
    3274:	2102      	movs	r1, #2
    3276:	0020      	movs	r0, r4
    3278:	4b0e      	ldr	r3, [pc, #56]	; (32b4 <_usb_on_wakeup+0x58>)
    327a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    327c:	2104      	movs	r1, #4
    327e:	0020      	movs	r0, r4
    3280:	4d0d      	ldr	r5, [pc, #52]	; (32b8 <_usb_on_wakeup+0x5c>)
    3282:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3284:	4a0d      	ldr	r2, [pc, #52]	; (32bc <_usb_on_wakeup+0x60>)
    3286:	2106      	movs	r1, #6
    3288:	0020      	movs	r0, r4
    328a:	4b0d      	ldr	r3, [pc, #52]	; (32c0 <_usb_on_wakeup+0x64>)
    328c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    328e:	2106      	movs	r1, #6
    3290:	0020      	movs	r0, r4
    3292:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3294:	2003      	movs	r0, #3
    3296:	4b0b      	ldr	r3, [pc, #44]	; (32c4 <_usb_on_wakeup+0x68>)
    3298:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    329a:	4b0b      	ldr	r3, [pc, #44]	; (32c8 <_usb_on_wakeup+0x6c>)
    329c:	4798      	blx	r3
#endif
}
    329e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    32a0:	4902      	ldr	r1, [pc, #8]	; (32ac <_usb_on_wakeup+0x50>)
    32a2:	2210      	movs	r2, #16
    32a4:	68cb      	ldr	r3, [r1, #12]
    32a6:	421a      	tst	r2, r3
    32a8:	d0fc      	beq.n	32a4 <_usb_on_wakeup+0x48>
    32aa:	e7e2      	b.n	3272 <_usb_on_wakeup+0x16>
    32ac:	40000800 	.word	0x40000800
    32b0:	20000454 	.word	0x20000454
    32b4:	000064c1 	.word	0x000064c1
    32b8:	000064a1 	.word	0x000064a1
    32bc:	00003229 	.word	0x00003229
    32c0:	0000647d 	.word	0x0000647d
    32c4:	00002f65 	.word	0x00002f65
    32c8:	00005fe1 	.word	0x00005fe1

000032cc <_usb_on_bus_reset>:
{
    32cc:	b530      	push	{r4, r5, lr}
    32ce:	b083      	sub	sp, #12
    32d0:	0004      	movs	r4, r0
	udc_reset();
    32d2:	4b1e      	ldr	r3, [pc, #120]	; (334c <_usb_on_bus_reset+0x80>)
    32d4:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    32d6:	2380      	movs	r3, #128	; 0x80
    32d8:	6822      	ldr	r2, [r4, #0]
    32da:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    32dc:	ad01      	add	r5, sp, #4
    32de:	0028      	movs	r0, r5
    32e0:	4b1b      	ldr	r3, [pc, #108]	; (3350 <_usb_on_bus_reset+0x84>)
    32e2:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    32e4:	2303      	movs	r3, #3
    32e6:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    32e8:	0029      	movs	r1, r5
    32ea:	0020      	movs	r0, r4
    32ec:	4b19      	ldr	r3, [pc, #100]	; (3354 <_usb_on_bus_reset+0x88>)
    32ee:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    32f0:	4919      	ldr	r1, [pc, #100]	; (3358 <_usb_on_bus_reset+0x8c>)
    32f2:	0020      	movs	r0, r4
    32f4:	4b19      	ldr	r3, [pc, #100]	; (335c <_usb_on_bus_reset+0x90>)
    32f6:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    32f8:	4b19      	ldr	r3, [pc, #100]	; (3360 <_usb_on_bus_reset+0x94>)
    32fa:	2202      	movs	r2, #2
    32fc:	2100      	movs	r1, #0
    32fe:	0020      	movs	r0, r4
    3300:	4d18      	ldr	r5, [pc, #96]	; (3364 <_usb_on_bus_reset+0x98>)
    3302:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3304:	4b18      	ldr	r3, [pc, #96]	; (3368 <_usb_on_bus_reset+0x9c>)
    3306:	2200      	movs	r2, #0
    3308:	2100      	movs	r1, #0
    330a:	0020      	movs	r0, r4
    330c:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    330e:	4b17      	ldr	r3, [pc, #92]	; (336c <_usb_on_bus_reset+0xa0>)
    3310:	2201      	movs	r2, #1
    3312:	2100      	movs	r1, #0
    3314:	0020      	movs	r0, r4
    3316:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    3318:	2202      	movs	r2, #2
    331a:	2100      	movs	r1, #0
    331c:	0020      	movs	r0, r4
    331e:	4d14      	ldr	r5, [pc, #80]	; (3370 <_usb_on_bus_reset+0xa4>)
    3320:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3322:	2200      	movs	r2, #0
    3324:	2100      	movs	r1, #0
    3326:	0020      	movs	r0, r4
    3328:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    332a:	2201      	movs	r2, #1
    332c:	2100      	movs	r1, #0
    332e:	0020      	movs	r0, r4
    3330:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3332:	6821      	ldr	r1, [r4, #0]
    3334:	890b      	ldrh	r3, [r1, #8]
    3336:	4a0f      	ldr	r2, [pc, #60]	; (3374 <_usb_on_bus_reset+0xa8>)
    3338:	401a      	ands	r2, r3
    333a:	2380      	movs	r3, #128	; 0x80
    333c:	00db      	lsls	r3, r3, #3
    333e:	4313      	orrs	r3, r2
    3340:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3342:	2200      	movs	r2, #0
    3344:	4b0c      	ldr	r3, [pc, #48]	; (3378 <_usb_on_bus_reset+0xac>)
    3346:	701a      	strb	r2, [r3, #0]
}
    3348:	b003      	add	sp, #12
    334a:	bd30      	pop	{r4, r5, pc}
    334c:	00001c05 	.word	0x00001c05
    3350:	000066cd 	.word	0x000066cd
    3354:	000066dd 	.word	0x000066dd
    3358:	200005d4 	.word	0x200005d4
    335c:	00006afd 	.word	0x00006afd
    3360:	000034b5 	.word	0x000034b5
    3364:	000064dd 	.word	0x000064dd
    3368:	000037d1 	.word	0x000037d1
    336c:	000033b9 	.word	0x000033b9
    3370:	0000652d 	.word	0x0000652d
    3374:	fffff3ff 	.word	0xfffff3ff
    3378:	20000262 	.word	0x20000262

0000337c <udd_ctrl_send_zlp_in>:
{
    337c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    337e:	2203      	movs	r2, #3
    3380:	4b07      	ldr	r3, [pc, #28]	; (33a0 <udd_ctrl_send_zlp_in+0x24>)
    3382:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3384:	4c07      	ldr	r4, [pc, #28]	; (33a4 <udd_ctrl_send_zlp_in+0x28>)
    3386:	4908      	ldr	r1, [pc, #32]	; (33a8 <udd_ctrl_send_zlp_in+0x2c>)
    3388:	0020      	movs	r0, r4
    338a:	4b08      	ldr	r3, [pc, #32]	; (33ac <udd_ctrl_send_zlp_in+0x30>)
    338c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    338e:	4b08      	ldr	r3, [pc, #32]	; (33b0 <udd_ctrl_send_zlp_in+0x34>)
    3390:	689a      	ldr	r2, [r3, #8]
    3392:	2300      	movs	r3, #0
    3394:	2100      	movs	r1, #0
    3396:	0020      	movs	r0, r4
    3398:	4c06      	ldr	r4, [pc, #24]	; (33b4 <udd_ctrl_send_zlp_in+0x38>)
    339a:	47a0      	blx	r4
}
    339c:	bd10      	pop	{r4, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	20000262 	.word	0x20000262
    33a4:	20000454 	.word	0x20000454
    33a8:	200005d4 	.word	0x200005d4
    33ac:	00006afd 	.word	0x00006afd
    33b0:	200005bc 	.word	0x200005bc
    33b4:	00006a59 	.word	0x00006a59

000033b8 <_usb_ep0_on_tansfer_fail>:
{
    33b8:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    33ba:	7989      	ldrb	r1, [r1, #6]
    33bc:	b24b      	sxtb	r3, r1
    33be:	2b00      	cmp	r3, #0
    33c0:	db06      	blt.n	33d0 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    33c2:	4b0e      	ldr	r3, [pc, #56]	; (33fc <_usb_ep0_on_tansfer_fail+0x44>)
    33c4:	781b      	ldrb	r3, [r3, #0]
    33c6:	2b02      	cmp	r3, #2
    33c8:	d00f      	beq.n	33ea <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    33ca:	2b03      	cmp	r3, #3
    33cc:	d011      	beq.n	33f2 <_usb_ep0_on_tansfer_fail+0x3a>
}
    33ce:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    33d0:	4b0a      	ldr	r3, [pc, #40]	; (33fc <_usb_ep0_on_tansfer_fail+0x44>)
    33d2:	781b      	ldrb	r3, [r3, #0]
    33d4:	2b01      	cmp	r3, #1
    33d6:	d005      	beq.n	33e4 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    33d8:	2b04      	cmp	r3, #4
    33da:	d1f8      	bne.n	33ce <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    33dc:	4808      	ldr	r0, [pc, #32]	; (3400 <_usb_ep0_on_tansfer_fail+0x48>)
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <_usb_ep0_on_tansfer_fail+0x4c>)
    33e0:	4798      	blx	r3
    33e2:	e7f4      	b.n	33ce <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    33e4:	4b08      	ldr	r3, [pc, #32]	; (3408 <_usb_ep0_on_tansfer_fail+0x50>)
    33e6:	4798      	blx	r3
    33e8:	e7f1      	b.n	33ce <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    33ea:	2204      	movs	r2, #4
    33ec:	4b03      	ldr	r3, [pc, #12]	; (33fc <_usb_ep0_on_tansfer_fail+0x44>)
    33ee:	701a      	strb	r2, [r3, #0]
    33f0:	e7ed      	b.n	33ce <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    33f2:	4803      	ldr	r0, [pc, #12]	; (3400 <_usb_ep0_on_tansfer_fail+0x48>)
    33f4:	4b03      	ldr	r3, [pc, #12]	; (3404 <_usb_ep0_on_tansfer_fail+0x4c>)
    33f6:	4798      	blx	r3
}
    33f8:	e7e9      	b.n	33ce <_usb_ep0_on_tansfer_fail+0x16>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	20000262 	.word	0x20000262
    3400:	20000454 	.word	0x20000454
    3404:	000069ad 	.word	0x000069ad
    3408:	0000337d 	.word	0x0000337d

0000340c <udd_ctrl_in_sent>:
{
    340c:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    340e:	4b20      	ldr	r3, [pc, #128]	; (3490 <udd_ctrl_in_sent+0x84>)
    3410:	881b      	ldrh	r3, [r3, #0]
    3412:	4a20      	ldr	r2, [pc, #128]	; (3494 <udd_ctrl_in_sent+0x88>)
    3414:	8994      	ldrh	r4, [r2, #12]
    3416:	1ae4      	subs	r4, r4, r3
    3418:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    341a:	2c00      	cmp	r4, #0
    341c:	d118      	bne.n	3450 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    341e:	4a1e      	ldr	r2, [pc, #120]	; (3498 <udd_ctrl_in_sent+0x8c>)
    3420:	8811      	ldrh	r1, [r2, #0]
    3422:	185b      	adds	r3, r3, r1
    3424:	b29b      	uxth	r3, r3
    3426:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3428:	4a1a      	ldr	r2, [pc, #104]	; (3494 <udd_ctrl_in_sent+0x88>)
    342a:	88d2      	ldrh	r2, [r2, #6]
    342c:	429a      	cmp	r2, r3
    342e:	d023      	beq.n	3478 <udd_ctrl_in_sent+0x6c>
    3430:	4b1a      	ldr	r3, [pc, #104]	; (349c <udd_ctrl_in_sent+0x90>)
    3432:	781b      	ldrb	r3, [r3, #0]
    3434:	2b00      	cmp	r3, #0
    3436:	d11f      	bne.n	3478 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3438:	4b16      	ldr	r3, [pc, #88]	; (3494 <udd_ctrl_in_sent+0x88>)
    343a:	695b      	ldr	r3, [r3, #20]
    343c:	2b00      	cmp	r3, #0
    343e:	d023      	beq.n	3488 <udd_ctrl_in_sent+0x7c>
    3440:	4798      	blx	r3
    3442:	2800      	cmp	r0, #0
    3444:	d020      	beq.n	3488 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    3446:	2200      	movs	r2, #0
    3448:	4b11      	ldr	r3, [pc, #68]	; (3490 <udd_ctrl_in_sent+0x84>)
    344a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    344c:	4b11      	ldr	r3, [pc, #68]	; (3494 <udd_ctrl_in_sent+0x88>)
    344e:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3450:	2c3f      	cmp	r4, #63	; 0x3f
    3452:	d919      	bls.n	3488 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3454:	2200      	movs	r2, #0
    3456:	4b11      	ldr	r3, [pc, #68]	; (349c <udd_ctrl_in_sent+0x90>)
    3458:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    345a:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    345c:	4d0c      	ldr	r5, [pc, #48]	; (3490 <udd_ctrl_in_sent+0x84>)
    345e:	882b      	ldrh	r3, [r5, #0]
    3460:	4a0c      	ldr	r2, [pc, #48]	; (3494 <udd_ctrl_in_sent+0x88>)
    3462:	6892      	ldr	r2, [r2, #8]
    3464:	18d2      	adds	r2, r2, r3
    3466:	0023      	movs	r3, r4
    3468:	2100      	movs	r1, #0
    346a:	480d      	ldr	r0, [pc, #52]	; (34a0 <udd_ctrl_in_sent+0x94>)
    346c:	4e0d      	ldr	r6, [pc, #52]	; (34a4 <udd_ctrl_in_sent+0x98>)
    346e:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3470:	882b      	ldrh	r3, [r5, #0]
    3472:	18e4      	adds	r4, r4, r3
    3474:	802c      	strh	r4, [r5, #0]
}
    3476:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3478:	2204      	movs	r2, #4
    347a:	4b0b      	ldr	r3, [pc, #44]	; (34a8 <udd_ctrl_in_sent+0x9c>)
    347c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    347e:	490b      	ldr	r1, [pc, #44]	; (34ac <udd_ctrl_in_sent+0xa0>)
    3480:	4807      	ldr	r0, [pc, #28]	; (34a0 <udd_ctrl_in_sent+0x94>)
    3482:	4b0b      	ldr	r3, [pc, #44]	; (34b0 <udd_ctrl_in_sent+0xa4>)
    3484:	4798      	blx	r3
			return;
    3486:	e7f6      	b.n	3476 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3488:	2201      	movs	r2, #1
    348a:	4b04      	ldr	r3, [pc, #16]	; (349c <udd_ctrl_in_sent+0x90>)
    348c:	701a      	strb	r2, [r3, #0]
    348e:	e7e5      	b.n	345c <udd_ctrl_in_sent+0x50>
    3490:	2000025e 	.word	0x2000025e
    3494:	200005bc 	.word	0x200005bc
    3498:	20000260 	.word	0x20000260
    349c:	2000025c 	.word	0x2000025c
    34a0:	20000454 	.word	0x20000454
    34a4:	00006a59 	.word	0x00006a59
    34a8:	20000262 	.word	0x20000262
    34ac:	200005d4 	.word	0x200005d4
    34b0:	00006afd 	.word	0x00006afd

000034b4 <_usb_ep0_on_setup>:
{
    34b4:	b510      	push	{r4, lr}
    34b6:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    34b8:	4b2c      	ldr	r3, [pc, #176]	; (356c <_usb_ep0_on_setup+0xb8>)
    34ba:	781b      	ldrb	r3, [r3, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	d007      	beq.n	34d0 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    34c0:	4b2b      	ldr	r3, [pc, #172]	; (3570 <_usb_ep0_on_setup+0xbc>)
    34c2:	691b      	ldr	r3, [r3, #16]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d000      	beq.n	34ca <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    34c8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    34ca:	2200      	movs	r2, #0
    34cc:	4b27      	ldr	r3, [pc, #156]	; (356c <_usb_ep0_on_setup+0xb8>)
    34ce:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    34d0:	8823      	ldrh	r3, [r4, #0]
    34d2:	2b08      	cmp	r3, #8
    34d4:	d002      	beq.n	34dc <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    34d6:	4b27      	ldr	r3, [pc, #156]	; (3574 <_usb_ep0_on_setup+0xc0>)
    34d8:	4798      	blx	r3
}
    34da:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    34dc:	4a24      	ldr	r2, [pc, #144]	; (3570 <_usb_ep0_on_setup+0xbc>)
    34de:	4b26      	ldr	r3, [pc, #152]	; (3578 <_usb_ep0_on_setup+0xc4>)
    34e0:	7819      	ldrb	r1, [r3, #0]
    34e2:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    34e4:	7859      	ldrb	r1, [r3, #1]
    34e6:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    34e8:	78d8      	ldrb	r0, [r3, #3]
    34ea:	0200      	lsls	r0, r0, #8
    34ec:	7899      	ldrb	r1, [r3, #2]
    34ee:	1809      	adds	r1, r1, r0
    34f0:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    34f2:	7958      	ldrb	r0, [r3, #5]
    34f4:	0200      	lsls	r0, r0, #8
    34f6:	7919      	ldrb	r1, [r3, #4]
    34f8:	1809      	adds	r1, r1, r0
    34fa:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    34fc:	79d9      	ldrb	r1, [r3, #7]
    34fe:	0209      	lsls	r1, r1, #8
    3500:	799b      	ldrb	r3, [r3, #6]
    3502:	185b      	adds	r3, r3, r1
    3504:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    3506:	4b1d      	ldr	r3, [pc, #116]	; (357c <_usb_ep0_on_setup+0xc8>)
    3508:	4798      	blx	r3
    350a:	2800      	cmp	r0, #0
    350c:	d016      	beq.n	353c <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    350e:	4b18      	ldr	r3, [pc, #96]	; (3570 <_usb_ep0_on_setup+0xbc>)
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	2b7f      	cmp	r3, #127	; 0x7f
    3514:	d815      	bhi.n	3542 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    3516:	4b16      	ldr	r3, [pc, #88]	; (3570 <_usb_ep0_on_setup+0xbc>)
    3518:	88db      	ldrh	r3, [r3, #6]
    351a:	2b00      	cmp	r3, #0
    351c:	d022      	beq.n	3564 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    351e:	2300      	movs	r3, #0
    3520:	4a17      	ldr	r2, [pc, #92]	; (3580 <_usb_ep0_on_setup+0xcc>)
    3522:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3524:	4a17      	ldr	r2, [pc, #92]	; (3584 <_usb_ep0_on_setup+0xd0>)
    3526:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3528:	2201      	movs	r2, #1
    352a:	4b10      	ldr	r3, [pc, #64]	; (356c <_usb_ep0_on_setup+0xb8>)
    352c:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    352e:	2340      	movs	r3, #64	; 0x40
    3530:	4a11      	ldr	r2, [pc, #68]	; (3578 <_usb_ep0_on_setup+0xc4>)
    3532:	2100      	movs	r1, #0
    3534:	4814      	ldr	r0, [pc, #80]	; (3588 <_usb_ep0_on_setup+0xd4>)
    3536:	4c15      	ldr	r4, [pc, #84]	; (358c <_usb_ep0_on_setup+0xd8>)
    3538:	47a0      	blx	r4
    353a:	e7ce      	b.n	34da <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    353c:	4b0d      	ldr	r3, [pc, #52]	; (3574 <_usb_ep0_on_setup+0xc0>)
    353e:	4798      	blx	r3
			return;
    3540:	e7cb      	b.n	34da <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    3542:	2300      	movs	r3, #0
    3544:	4a0e      	ldr	r2, [pc, #56]	; (3580 <_usb_ep0_on_setup+0xcc>)
    3546:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3548:	4a0e      	ldr	r2, [pc, #56]	; (3584 <_usb_ep0_on_setup+0xd0>)
    354a:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    354c:	2202      	movs	r2, #2
    354e:	4b07      	ldr	r3, [pc, #28]	; (356c <_usb_ep0_on_setup+0xb8>)
    3550:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3552:	2340      	movs	r3, #64	; 0x40
    3554:	4a08      	ldr	r2, [pc, #32]	; (3578 <_usb_ep0_on_setup+0xc4>)
    3556:	2100      	movs	r1, #0
    3558:	480b      	ldr	r0, [pc, #44]	; (3588 <_usb_ep0_on_setup+0xd4>)
    355a:	4c0c      	ldr	r4, [pc, #48]	; (358c <_usb_ep0_on_setup+0xd8>)
    355c:	47a0      	blx	r4
			udd_ctrl_in_sent();
    355e:	4b0c      	ldr	r3, [pc, #48]	; (3590 <_usb_ep0_on_setup+0xdc>)
    3560:	4798      	blx	r3
    3562:	e7ba      	b.n	34da <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3564:	4b0b      	ldr	r3, [pc, #44]	; (3594 <_usb_ep0_on_setup+0xe0>)
    3566:	4798      	blx	r3
				return;
    3568:	e7b7      	b.n	34da <_usb_ep0_on_setup+0x26>
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	20000262 	.word	0x20000262
    3570:	200005bc 	.word	0x200005bc
    3574:	000031fd 	.word	0x000031fd
    3578:	200005d4 	.word	0x200005d4
    357c:	00001c95 	.word	0x00001c95
    3580:	20000260 	.word	0x20000260
    3584:	2000025e 	.word	0x2000025e
    3588:	20000454 	.word	0x20000454
    358c:	00006aad 	.word	0x00006aad
    3590:	0000340d 	.word	0x0000340d
    3594:	0000337d 	.word	0x0000337d

00003598 <_usb_on_sof_notify>:
{
    3598:	b510      	push	{r4, lr}
	udc_sof_notify();
    359a:	4b02      	ldr	r3, [pc, #8]	; (35a4 <_usb_on_sof_notify+0xc>)
    359c:	4798      	blx	r3
	UDC_SOF_EVENT();
    359e:	4b02      	ldr	r3, [pc, #8]	; (35a8 <_usb_on_sof_notify+0x10>)
    35a0:	4798      	blx	r3
}
    35a2:	bd10      	pop	{r4, pc}
    35a4:	00001c51 	.word	0x00001c51
    35a8:	00005fed 	.word	0x00005fed

000035ac <_usb_on_suspend>:
{
    35ac:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    35ae:	4c07      	ldr	r4, [pc, #28]	; (35cc <_usb_on_suspend+0x20>)
    35b0:	2104      	movs	r1, #4
    35b2:	0020      	movs	r0, r4
    35b4:	4b06      	ldr	r3, [pc, #24]	; (35d0 <_usb_on_suspend+0x24>)
    35b6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    35b8:	2102      	movs	r1, #2
    35ba:	0020      	movs	r0, r4
    35bc:	4b05      	ldr	r3, [pc, #20]	; (35d4 <_usb_on_suspend+0x28>)
    35be:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    35c0:	2001      	movs	r0, #1
    35c2:	4b05      	ldr	r3, [pc, #20]	; (35d8 <_usb_on_suspend+0x2c>)
    35c4:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    35c6:	4b05      	ldr	r3, [pc, #20]	; (35dc <_usb_on_suspend+0x30>)
    35c8:	4798      	blx	r3
}
    35ca:	bd10      	pop	{r4, pc}
    35cc:	20000454 	.word	0x20000454
    35d0:	000064c1 	.word	0x000064c1
    35d4:	000064a1 	.word	0x000064a1
    35d8:	00002f65 	.word	0x00002f65
    35dc:	00005fd5 	.word	0x00005fd5

000035e0 <udd_ep_abort>:
{
    35e0:	b510      	push	{r4, lr}
    35e2:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    35e4:	0001      	movs	r1, r0
    35e6:	480a      	ldr	r0, [pc, #40]	; (3610 <udd_ep_abort+0x30>)
    35e8:	4b0a      	ldr	r3, [pc, #40]	; (3614 <udd_ep_abort+0x34>)
    35ea:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    35ec:	0020      	movs	r0, r4
    35ee:	4b0a      	ldr	r3, [pc, #40]	; (3618 <udd_ep_abort+0x38>)
    35f0:	4798      	blx	r3
	if (!ptr_job->busy) {
    35f2:	7c83      	ldrb	r3, [r0, #18]
    35f4:	07db      	lsls	r3, r3, #31
    35f6:	d50a      	bpl.n	360e <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    35f8:	7c83      	ldrb	r3, [r0, #18]
    35fa:	2201      	movs	r2, #1
    35fc:	4393      	bics	r3, r2
    35fe:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3600:	6803      	ldr	r3, [r0, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d003      	beq.n	360e <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    3606:	68c1      	ldr	r1, [r0, #12]
    3608:	0022      	movs	r2, r4
    360a:	2001      	movs	r0, #1
    360c:	4798      	blx	r3
}
    360e:	bd10      	pop	{r4, pc}
    3610:	20000454 	.word	0x20000454
    3614:	0000694d 	.word	0x0000694d
    3618:	00003025 	.word	0x00003025

0000361c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    361c:	4b02      	ldr	r3, [pc, #8]	; (3628 <udd_get_frame_number+0xc>)
    361e:	681b      	ldr	r3, [r3, #0]
    3620:	8a18      	ldrh	r0, [r3, #16]
    3622:	0480      	lsls	r0, r0, #18
    3624:	0d40      	lsrs	r0, r0, #21
}
    3626:	4770      	bx	lr
    3628:	20000454 	.word	0x20000454

0000362c <udd_ep_free>:
{
    362c:	b570      	push	{r4, r5, r6, lr}
    362e:	b082      	sub	sp, #8
    3630:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3632:	ad01      	add	r5, sp, #4
    3634:	0028      	movs	r0, r5
    3636:	4b0d      	ldr	r3, [pc, #52]	; (366c <udd_ep_free+0x40>)
    3638:	4798      	blx	r3
	udd_ep_abort(ep);
    363a:	0020      	movs	r0, r4
    363c:	4b0c      	ldr	r3, [pc, #48]	; (3670 <udd_ep_free+0x44>)
    363e:	4798      	blx	r3
	config_ep.ep_address = ep;
    3640:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3642:	2300      	movs	r3, #0
    3644:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3646:	4e0b      	ldr	r6, [pc, #44]	; (3674 <udd_ep_free+0x48>)
    3648:	0029      	movs	r1, r5
    364a:	0030      	movs	r0, r6
    364c:	4b0a      	ldr	r3, [pc, #40]	; (3678 <udd_ep_free+0x4c>)
    364e:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3650:	210f      	movs	r1, #15
    3652:	4021      	ands	r1, r4
    3654:	2200      	movs	r2, #0
    3656:	0030      	movs	r0, r6
    3658:	4b08      	ldr	r3, [pc, #32]	; (367c <udd_ep_free+0x50>)
    365a:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    365c:	2200      	movs	r2, #0
    365e:	0021      	movs	r1, r4
    3660:	0030      	movs	r0, r6
    3662:	4b07      	ldr	r3, [pc, #28]	; (3680 <udd_ep_free+0x54>)
    3664:	4798      	blx	r3
}
    3666:	b002      	add	sp, #8
    3668:	bd70      	pop	{r4, r5, r6, pc}
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	000066cd 	.word	0x000066cd
    3670:	000035e1 	.word	0x000035e1
    3674:	20000454 	.word	0x20000454
    3678:	000066dd 	.word	0x000066dd
    367c:	00006505 	.word	0x00006505
    3680:	000065fd 	.word	0x000065fd

00003684 <udd_ep_alloc>:
{
    3684:	b5f0      	push	{r4, r5, r6, r7, lr}
    3686:	b083      	sub	sp, #12
    3688:	0005      	movs	r5, r0
    368a:	000f      	movs	r7, r1
    368c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    368e:	ae01      	add	r6, sp, #4
    3690:	0030      	movs	r0, r6
    3692:	4b36      	ldr	r3, [pc, #216]	; (376c <udd_ep_alloc+0xe8>)
    3694:	4798      	blx	r3
	config_ep.ep_address = ep;
    3696:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    3698:	2c08      	cmp	r4, #8
    369a:	d813      	bhi.n	36c4 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    369c:	2200      	movs	r2, #0
    369e:	ab01      	add	r3, sp, #4
    36a0:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    36a2:	0028      	movs	r0, r5
    36a4:	4b32      	ldr	r3, [pc, #200]	; (3770 <udd_ep_alloc+0xec>)
    36a6:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    36a8:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    36aa:	2103      	movs	r1, #3
    36ac:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    36ae:	2901      	cmp	r1, #1
    36b0:	d038      	beq.n	3724 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    36b2:	2902      	cmp	r1, #2
    36b4:	d043      	beq.n	373e <udd_ep_alloc+0xba>
		return false;
    36b6:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    36b8:	2903      	cmp	r1, #3
    36ba:	d13d      	bne.n	3738 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    36bc:	2204      	movs	r2, #4
    36be:	ab01      	add	r3, sp, #4
    36c0:	70da      	strb	r2, [r3, #3]
    36c2:	e032      	b.n	372a <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    36c4:	2c10      	cmp	r4, #16
    36c6:	d803      	bhi.n	36d0 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    36c8:	2201      	movs	r2, #1
    36ca:	ab01      	add	r3, sp, #4
    36cc:	705a      	strb	r2, [r3, #1]
    36ce:	e7e8      	b.n	36a2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    36d0:	2c20      	cmp	r4, #32
    36d2:	d803      	bhi.n	36dc <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    36d4:	2202      	movs	r2, #2
    36d6:	ab01      	add	r3, sp, #4
    36d8:	705a      	strb	r2, [r3, #1]
    36da:	e7e2      	b.n	36a2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    36dc:	2c40      	cmp	r4, #64	; 0x40
    36de:	d803      	bhi.n	36e8 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    36e0:	2203      	movs	r2, #3
    36e2:	ab01      	add	r3, sp, #4
    36e4:	705a      	strb	r2, [r3, #1]
    36e6:	e7dc      	b.n	36a2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    36e8:	2c80      	cmp	r4, #128	; 0x80
    36ea:	d803      	bhi.n	36f4 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    36ec:	2204      	movs	r2, #4
    36ee:	ab01      	add	r3, sp, #4
    36f0:	705a      	strb	r2, [r3, #1]
    36f2:	e7d6      	b.n	36a2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    36f4:	2380      	movs	r3, #128	; 0x80
    36f6:	005b      	lsls	r3, r3, #1
    36f8:	429c      	cmp	r4, r3
    36fa:	d803      	bhi.n	3704 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    36fc:	2205      	movs	r2, #5
    36fe:	ab01      	add	r3, sp, #4
    3700:	705a      	strb	r2, [r3, #1]
    3702:	e7ce      	b.n	36a2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3704:	2380      	movs	r3, #128	; 0x80
    3706:	009b      	lsls	r3, r3, #2
    3708:	429c      	cmp	r4, r3
    370a:	d803      	bhi.n	3714 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    370c:	2206      	movs	r2, #6
    370e:	ab01      	add	r3, sp, #4
    3710:	705a      	strb	r2, [r3, #1]
    3712:	e7c6      	b.n	36a2 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3714:	4a17      	ldr	r2, [pc, #92]	; (3774 <udd_ep_alloc+0xf0>)
		return false;
    3716:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    3718:	4294      	cmp	r4, r2
    371a:	d80d      	bhi.n	3738 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    371c:	2207      	movs	r2, #7
    371e:	ab01      	add	r3, sp, #4
    3720:	705a      	strb	r2, [r3, #1]
    3722:	e7be      	b.n	36a2 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3724:	2202      	movs	r2, #2
    3726:	ab01      	add	r3, sp, #4
    3728:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    372a:	a901      	add	r1, sp, #4
    372c:	4812      	ldr	r0, [pc, #72]	; (3778 <udd_ep_alloc+0xf4>)
    372e:	4b13      	ldr	r3, [pc, #76]	; (377c <udd_ep_alloc+0xf8>)
    3730:	4798      	blx	r3
		return false;
    3732:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3734:	2800      	cmp	r0, #0
    3736:	d006      	beq.n	3746 <udd_ep_alloc+0xc2>
}
    3738:	0018      	movs	r0, r3
    373a:	b003      	add	sp, #12
    373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    373e:	2203      	movs	r2, #3
    3740:	ab01      	add	r3, sp, #4
    3742:	70da      	strb	r2, [r3, #3]
    3744:	e7f1      	b.n	372a <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3746:	210f      	movs	r1, #15
    3748:	4029      	ands	r1, r5
    374a:	4c0b      	ldr	r4, [pc, #44]	; (3778 <udd_ep_alloc+0xf4>)
    374c:	4b0c      	ldr	r3, [pc, #48]	; (3780 <udd_ep_alloc+0xfc>)
    374e:	2200      	movs	r2, #0
    3750:	0020      	movs	r0, r4
    3752:	4e0c      	ldr	r6, [pc, #48]	; (3784 <udd_ep_alloc+0x100>)
    3754:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3756:	2200      	movs	r2, #0
    3758:	0029      	movs	r1, r5
    375a:	0020      	movs	r0, r4
    375c:	4e0a      	ldr	r6, [pc, #40]	; (3788 <udd_ep_alloc+0x104>)
    375e:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3760:	2201      	movs	r2, #1
    3762:	0029      	movs	r1, r5
    3764:	0020      	movs	r0, r4
    3766:	47b0      	blx	r6
	return true;
    3768:	2301      	movs	r3, #1
    376a:	e7e5      	b.n	3738 <udd_ep_alloc+0xb4>
    376c:	000066cd 	.word	0x000066cd
    3770:	00003025 	.word	0x00003025
    3774:	000003ff 	.word	0x000003ff
    3778:	20000454 	.word	0x20000454
    377c:	000066dd 	.word	0x000066dd
    3780:	00003049 	.word	0x00003049
    3784:	000064dd 	.word	0x000064dd
    3788:	0000652d 	.word	0x0000652d

0000378c <udd_ep_is_halted>:
{
    378c:	b510      	push	{r4, lr}
    378e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    3790:	4801      	ldr	r0, [pc, #4]	; (3798 <udd_ep_is_halted+0xc>)
    3792:	4b02      	ldr	r3, [pc, #8]	; (379c <udd_ep_is_halted+0x10>)
    3794:	4798      	blx	r3
}
    3796:	bd10      	pop	{r4, pc}
    3798:	20000454 	.word	0x20000454
    379c:	00006983 	.word	0x00006983

000037a0 <udd_ep_set_halt>:
{
    37a0:	b510      	push	{r4, lr}
    37a2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    37a4:	230f      	movs	r3, #15
    37a6:	4003      	ands	r3, r0
		return false;
    37a8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    37aa:	2b02      	cmp	r3, #2
    37ac:	d900      	bls.n	37b0 <udd_ep_set_halt+0x10>
}
    37ae:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    37b0:	0021      	movs	r1, r4
    37b2:	4804      	ldr	r0, [pc, #16]	; (37c4 <udd_ep_set_halt+0x24>)
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <udd_ep_set_halt+0x28>)
    37b6:	4798      	blx	r3
	udd_ep_abort(ep);
    37b8:	0020      	movs	r0, r4
    37ba:	4b04      	ldr	r3, [pc, #16]	; (37cc <udd_ep_set_halt+0x2c>)
    37bc:	4798      	blx	r3
	return true;
    37be:	2001      	movs	r0, #1
    37c0:	e7f5      	b.n	37ae <udd_ep_set_halt+0xe>
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	20000454 	.word	0x20000454
    37c8:	000069ad 	.word	0x000069ad
    37cc:	000035e1 	.word	0x000035e1

000037d0 <_usb_ep0_on_tansfer_ok>:
{
    37d0:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    37d2:	4b34      	ldr	r3, [pc, #208]	; (38a4 <_usb_ep0_on_tansfer_ok+0xd4>)
    37d4:	781b      	ldrb	r3, [r3, #0]
    37d6:	2b01      	cmp	r3, #1
    37d8:	d00a      	beq.n	37f0 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    37da:	2b02      	cmp	r3, #2
    37dc:	d05f      	beq.n	389e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    37de:	4b32      	ldr	r3, [pc, #200]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    37e0:	691b      	ldr	r3, [r3, #16]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d000      	beq.n	37e8 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    37e6:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    37e8:	2200      	movs	r2, #0
    37ea:	4b2e      	ldr	r3, [pc, #184]	; (38a4 <_usb_ep0_on_tansfer_ok+0xd4>)
    37ec:	701a      	strb	r2, [r3, #0]
}
    37ee:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    37f0:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    37f2:	4b2d      	ldr	r3, [pc, #180]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    37f4:	899b      	ldrh	r3, [r3, #12]
    37f6:	4a2d      	ldr	r2, [pc, #180]	; (38ac <_usb_ep0_on_tansfer_ok+0xdc>)
    37f8:	8814      	ldrh	r4, [r2, #0]
    37fa:	1962      	adds	r2, r4, r5
    37fc:	4293      	cmp	r3, r2
    37fe:	da01      	bge.n	3804 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3800:	1b1d      	subs	r5, r3, r4
    3802:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3804:	4b28      	ldr	r3, [pc, #160]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3806:	6898      	ldr	r0, [r3, #8]
    3808:	1900      	adds	r0, r0, r4
    380a:	002a      	movs	r2, r5
    380c:	4928      	ldr	r1, [pc, #160]	; (38b0 <_usb_ep0_on_tansfer_ok+0xe0>)
    380e:	4b29      	ldr	r3, [pc, #164]	; (38b4 <_usb_ep0_on_tansfer_ok+0xe4>)
    3810:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3812:	1964      	adds	r4, r4, r5
    3814:	b2a4      	uxth	r4, r4
    3816:	4b25      	ldr	r3, [pc, #148]	; (38ac <_usb_ep0_on_tansfer_ok+0xdc>)
    3818:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    381a:	2d40      	cmp	r5, #64	; 0x40
    381c:	d00a      	beq.n	3834 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    381e:	4b22      	ldr	r3, [pc, #136]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3820:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3822:	695b      	ldr	r3, [r3, #20]
    3824:	2b00      	cmp	r3, #0
    3826:	d002      	beq.n	382e <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3828:	4798      	blx	r3
    382a:	2800      	cmp	r0, #0
    382c:	d014      	beq.n	3858 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    382e:	4b22      	ldr	r3, [pc, #136]	; (38b8 <_usb_ep0_on_tansfer_ok+0xe8>)
    3830:	4798      	blx	r3
    3832:	e7dc      	b.n	37ee <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3834:	4b1c      	ldr	r3, [pc, #112]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3836:	88da      	ldrh	r2, [r3, #6]
    3838:	4b20      	ldr	r3, [pc, #128]	; (38bc <_usb_ep0_on_tansfer_ok+0xec>)
    383a:	881b      	ldrh	r3, [r3, #0]
    383c:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    383e:	429a      	cmp	r2, r3
    3840:	dded      	ble.n	381e <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3842:	4b19      	ldr	r3, [pc, #100]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3844:	899b      	ldrh	r3, [r3, #12]
    3846:	42a3      	cmp	r3, r4
    3848:	d00c      	beq.n	3864 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    384a:	2340      	movs	r3, #64	; 0x40
    384c:	4a18      	ldr	r2, [pc, #96]	; (38b0 <_usb_ep0_on_tansfer_ok+0xe0>)
    384e:	2100      	movs	r1, #0
    3850:	481b      	ldr	r0, [pc, #108]	; (38c0 <_usb_ep0_on_tansfer_ok+0xf0>)
    3852:	4c1c      	ldr	r4, [pc, #112]	; (38c4 <_usb_ep0_on_tansfer_ok+0xf4>)
    3854:	47a0      	blx	r4
    3856:	e7ca      	b.n	37ee <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3858:	2205      	movs	r2, #5
    385a:	4b12      	ldr	r3, [pc, #72]	; (38a4 <_usb_ep0_on_tansfer_ok+0xd4>)
    385c:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    385e:	4b1a      	ldr	r3, [pc, #104]	; (38c8 <_usb_ep0_on_tansfer_ok+0xf8>)
    3860:	4798      	blx	r3
    3862:	e7c4      	b.n	37ee <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3864:	4b10      	ldr	r3, [pc, #64]	; (38a8 <_usb_ep0_on_tansfer_ok+0xd8>)
    3866:	695b      	ldr	r3, [r3, #20]
    3868:	2b00      	cmp	r3, #0
    386a:	d00b      	beq.n	3884 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    386c:	4798      	blx	r3
    386e:	2800      	cmp	r0, #0
    3870:	d00f      	beq.n	3892 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3872:	4912      	ldr	r1, [pc, #72]	; (38bc <_usb_ep0_on_tansfer_ok+0xec>)
    3874:	4a0d      	ldr	r2, [pc, #52]	; (38ac <_usb_ep0_on_tansfer_ok+0xdc>)
    3876:	880b      	ldrh	r3, [r1, #0]
    3878:	8810      	ldrh	r0, [r2, #0]
    387a:	181b      	adds	r3, r3, r0
    387c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    387e:	2300      	movs	r3, #0
    3880:	8013      	strh	r3, [r2, #0]
    3882:	e7e2      	b.n	384a <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3884:	2205      	movs	r2, #5
    3886:	4b07      	ldr	r3, [pc, #28]	; (38a4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3888:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    388a:	2000      	movs	r0, #0
    388c:	4b0e      	ldr	r3, [pc, #56]	; (38c8 <_usb_ep0_on_tansfer_ok+0xf8>)
    388e:	4798      	blx	r3
    3890:	e7ad      	b.n	37ee <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3892:	2205      	movs	r2, #5
    3894:	4b03      	ldr	r3, [pc, #12]	; (38a4 <_usb_ep0_on_tansfer_ok+0xd4>)
    3896:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3898:	4b0b      	ldr	r3, [pc, #44]	; (38c8 <_usb_ep0_on_tansfer_ok+0xf8>)
    389a:	4798      	blx	r3
    389c:	e7a7      	b.n	37ee <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    389e:	4b0b      	ldr	r3, [pc, #44]	; (38cc <_usb_ep0_on_tansfer_ok+0xfc>)
    38a0:	4798      	blx	r3
    38a2:	e7a4      	b.n	37ee <_usb_ep0_on_tansfer_ok+0x1e>
    38a4:	20000262 	.word	0x20000262
    38a8:	200005bc 	.word	0x200005bc
    38ac:	2000025e 	.word	0x2000025e
    38b0:	200005d4 	.word	0x200005d4
    38b4:	00009305 	.word	0x00009305
    38b8:	0000337d 	.word	0x0000337d
    38bc:	20000260 	.word	0x20000260
    38c0:	20000454 	.word	0x20000454
    38c4:	00006aad 	.word	0x00006aad
    38c8:	000037a1 	.word	0x000037a1
    38cc:	0000340d 	.word	0x0000340d

000038d0 <udd_ep_clear_halt>:
{
    38d0:	b570      	push	{r4, r5, r6, lr}
    38d2:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    38d4:	230f      	movs	r3, #15
    38d6:	4003      	ands	r3, r0
		return false;
    38d8:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    38da:	2b02      	cmp	r3, #2
    38dc:	d900      	bls.n	38e0 <udd_ep_clear_halt+0x10>
}
    38de:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    38e0:	0020      	movs	r0, r4
    38e2:	4b09      	ldr	r3, [pc, #36]	; (3908 <udd_ep_clear_halt+0x38>)
    38e4:	4798      	blx	r3
    38e6:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    38e8:	0021      	movs	r1, r4
    38ea:	4808      	ldr	r0, [pc, #32]	; (390c <udd_ep_clear_halt+0x3c>)
    38ec:	4b08      	ldr	r3, [pc, #32]	; (3910 <udd_ep_clear_halt+0x40>)
    38ee:	4798      	blx	r3
	if (ptr_job->busy == true) {
    38f0:	7cab      	ldrb	r3, [r5, #18]
	return true;
    38f2:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    38f4:	07db      	lsls	r3, r3, #31
    38f6:	d5f2      	bpl.n	38de <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    38f8:	7cab      	ldrb	r3, [r5, #18]
    38fa:	2201      	movs	r2, #1
    38fc:	4393      	bics	r3, r2
    38fe:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3900:	682b      	ldr	r3, [r5, #0]
    3902:	4798      	blx	r3
	return true;
    3904:	2001      	movs	r0, #1
    3906:	e7ea      	b.n	38de <udd_ep_clear_halt+0xe>
    3908:	00003025 	.word	0x00003025
    390c:	20000454 	.word	0x20000454
    3910:	000069d3 	.word	0x000069d3

00003914 <udd_ep_wait_stall_clear>:
{
    3914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3916:	0004      	movs	r4, r0
    3918:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    391a:	230f      	movs	r3, #15
    391c:	4003      	ands	r3, r0
		return false;
    391e:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3920:	2b02      	cmp	r3, #2
    3922:	d805      	bhi.n	3930 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3924:	4b0d      	ldr	r3, [pc, #52]	; (395c <udd_ep_wait_stall_clear+0x48>)
    3926:	4798      	blx	r3
    3928:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    392a:	7c83      	ldrb	r3, [r0, #18]
    392c:	07db      	lsls	r3, r3, #31
    392e:	d501      	bpl.n	3934 <udd_ep_wait_stall_clear+0x20>
}
    3930:	0030      	movs	r0, r6
    3932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3934:	0021      	movs	r1, r4
    3936:	480a      	ldr	r0, [pc, #40]	; (3960 <udd_ep_wait_stall_clear+0x4c>)
    3938:	4b0a      	ldr	r3, [pc, #40]	; (3964 <udd_ep_wait_stall_clear+0x50>)
    393a:	4798      	blx	r3
    393c:	1e06      	subs	r6, r0, #0
    393e:	d005      	beq.n	394c <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3940:	7cbb      	ldrb	r3, [r7, #18]
    3942:	2201      	movs	r2, #1
    3944:	4313      	orrs	r3, r2
    3946:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3948:	603d      	str	r5, [r7, #0]
		return true;
    394a:	e7f1      	b.n	3930 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    394c:	0021      	movs	r1, r4
    394e:	4804      	ldr	r0, [pc, #16]	; (3960 <udd_ep_wait_stall_clear+0x4c>)
    3950:	4b05      	ldr	r3, [pc, #20]	; (3968 <udd_ep_wait_stall_clear+0x54>)
    3952:	4798      	blx	r3
    3954:	1e06      	subs	r6, r0, #0
    3956:	d0eb      	beq.n	3930 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3958:	47a8      	blx	r5
		return true;
    395a:	e7e9      	b.n	3930 <udd_ep_wait_stall_clear+0x1c>
    395c:	00003025 	.word	0x00003025
    3960:	20000454 	.word	0x20000454
    3964:	00006983 	.word	0x00006983
    3968:	00006921 	.word	0x00006921

0000396c <udd_ep_run>:
{
    396c:	b5f0      	push	{r4, r5, r6, r7, lr}
    396e:	b087      	sub	sp, #28
    3970:	0005      	movs	r5, r0
    3972:	9103      	str	r1, [sp, #12]
    3974:	9202      	str	r2, [sp, #8]
    3976:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3978:	260f      	movs	r6, #15
    397a:	4006      	ands	r6, r0
		return false;
    397c:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    397e:	2e02      	cmp	r6, #2
    3980:	d902      	bls.n	3988 <udd_ep_run+0x1c>
}
    3982:	0020      	movs	r0, r4
    3984:	b007      	add	sp, #28
    3986:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3988:	4b64      	ldr	r3, [pc, #400]	; (3b1c <udd_ep_run+0x1b0>)
    398a:	4798      	blx	r3
    398c:	1e04      	subs	r4, r0, #0
    398e:	d000      	beq.n	3992 <udd_ep_run+0x26>
    3990:	e0bd      	b.n	3b0e <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3992:	0028      	movs	r0, r5
    3994:	4b62      	ldr	r3, [pc, #392]	; (3b20 <udd_ep_run+0x1b4>)
    3996:	4798      	blx	r3
    3998:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    399a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    399e:	425a      	negs	r2, r3
    39a0:	4153      	adcs	r3, r2
    39a2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    39a4:	b672      	cpsid	i
    39a6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    39aa:	2200      	movs	r2, #0
    39ac:	4b5d      	ldr	r3, [pc, #372]	; (3b24 <udd_ep_run+0x1b8>)
    39ae:	701a      	strb	r2, [r3, #0]
	return flags;
    39b0:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    39b2:	7c83      	ldrb	r3, [r0, #18]
    39b4:	07db      	lsls	r3, r3, #31
    39b6:	d508      	bpl.n	39ca <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    39b8:	2a00      	cmp	r2, #0
    39ba:	d0e2      	beq.n	3982 <udd_ep_run+0x16>
		cpu_irq_enable();
    39bc:	2201      	movs	r2, #1
    39be:	4b59      	ldr	r3, [pc, #356]	; (3b24 <udd_ep_run+0x1b8>)
    39c0:	701a      	strb	r2, [r3, #0]
    39c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    39c6:	b662      	cpsie	i
    39c8:	e7db      	b.n	3982 <udd_ep_run+0x16>
	ptr_job->busy = true;
    39ca:	7c83      	ldrb	r3, [r0, #18]
    39cc:	2101      	movs	r1, #1
    39ce:	430b      	orrs	r3, r1
    39d0:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    39d2:	2a00      	cmp	r2, #0
    39d4:	d005      	beq.n	39e2 <udd_ep_run+0x76>
		cpu_irq_enable();
    39d6:	2201      	movs	r2, #1
    39d8:	4b52      	ldr	r3, [pc, #328]	; (3b24 <udd_ep_run+0x1b8>)
    39da:	701a      	strb	r2, [r3, #0]
    39dc:	f3bf 8f5f 	dmb	sy
    39e0:	b662      	cpsie	i
	ptr_job->buf = buf;
    39e2:	9b02      	ldr	r3, [sp, #8]
    39e4:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    39e6:	9b01      	ldr	r3, [sp, #4]
    39e8:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    39ea:	2300      	movs	r3, #0
    39ec:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    39ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    39f0:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    39f2:	2301      	movs	r3, #1
    39f4:	9a03      	ldr	r2, [sp, #12]
    39f6:	4013      	ands	r3, r2
    39f8:	005a      	lsls	r2, r3, #1
    39fa:	7cbb      	ldrb	r3, [r7, #18]
    39fc:	2102      	movs	r1, #2
    39fe:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3a00:	4313      	orrs	r3, r2
    3a02:	2204      	movs	r2, #4
    3a04:	4393      	bics	r3, r2
    3a06:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3a08:	b26b      	sxtb	r3, r5
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	db20      	blt.n	3a50 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3a0e:	9b01      	ldr	r3, [sp, #4]
    3a10:	2b00      	cmp	r3, #0
    3a12:	d06f      	beq.n	3af4 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3a14:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3a16:	4b44      	ldr	r3, [pc, #272]	; (3b28 <udd_ep_run+0x1bc>)
    3a18:	429c      	cmp	r4, r3
    3a1a:	d95a      	bls.n	3ad2 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3a1c:	8a39      	ldrh	r1, [r7, #16]
    3a1e:	001c      	movs	r4, r3
    3a20:	0018      	movs	r0, r3
    3a22:	4b42      	ldr	r3, [pc, #264]	; (3b2c <udd_ep_run+0x1c0>)
    3a24:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3a26:	1a63      	subs	r3, r4, r1
    3a28:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3a2a:	8a3b      	ldrh	r3, [r7, #16]
    3a2c:	429a      	cmp	r2, r3
    3a2e:	d257      	bcs.n	3ae0 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3a30:	7cba      	ldrb	r2, [r7, #18]
    3a32:	2104      	movs	r1, #4
    3a34:	430a      	orrs	r2, r1
    3a36:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3a38:	1e72      	subs	r2, r6, #1
    3a3a:	0192      	lsls	r2, r2, #6
    3a3c:	493c      	ldr	r1, [pc, #240]	; (3b30 <udd_ep_run+0x1c4>)
    3a3e:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3a40:	0031      	movs	r1, r6
    3a42:	483c      	ldr	r0, [pc, #240]	; (3b34 <udd_ep_run+0x1c8>)
    3a44:	4c3c      	ldr	r4, [pc, #240]	; (3b38 <udd_ep_run+0x1cc>)
    3a46:	47a0      	blx	r4
				return (STATUS_OK ==
    3a48:	4244      	negs	r4, r0
    3a4a:	4144      	adcs	r4, r0
    3a4c:	b2e4      	uxtb	r4, r4
    3a4e:	e798      	b.n	3982 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3a50:	9b01      	ldr	r3, [sp, #4]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d027      	beq.n	3aa6 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3a56:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3a58:	4b33      	ldr	r3, [pc, #204]	; (3b28 <udd_ep_run+0x1bc>)
    3a5a:	429d      	cmp	r5, r3
    3a5c:	d906      	bls.n	3a6c <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3a5e:	8a39      	ldrh	r1, [r7, #16]
    3a60:	001d      	movs	r5, r3
    3a62:	0018      	movs	r0, r3
    3a64:	4b31      	ldr	r3, [pc, #196]	; (3b2c <udd_ep_run+0x1c0>)
    3a66:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3a68:	1a6b      	subs	r3, r5, r1
    3a6a:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3a6c:	7cbb      	ldrb	r3, [r7, #18]
    3a6e:	079b      	lsls	r3, r3, #30
    3a70:	d507      	bpl.n	3a82 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3a72:	8a39      	ldrh	r1, [r7, #16]
    3a74:	0028      	movs	r0, r5
    3a76:	4b31      	ldr	r3, [pc, #196]	; (3b3c <udd_ep_run+0x1d0>)
    3a78:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3a7a:	b289      	uxth	r1, r1
    3a7c:	424c      	negs	r4, r1
    3a7e:	414c      	adcs	r4, r1
    3a80:	b2e4      	uxtb	r4, r4
    3a82:	2001      	movs	r0, #1
    3a84:	4020      	ands	r0, r4
    3a86:	0040      	lsls	r0, r0, #1
    3a88:	7cbc      	ldrb	r4, [r7, #18]
    3a8a:	2302      	movs	r3, #2
    3a8c:	439c      	bics	r4, r3
    3a8e:	4304      	orrs	r4, r0
    3a90:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3a92:	002b      	movs	r3, r5
    3a94:	9a02      	ldr	r2, [sp, #8]
    3a96:	0031      	movs	r1, r6
    3a98:	4826      	ldr	r0, [pc, #152]	; (3b34 <udd_ep_run+0x1c8>)
    3a9a:	4c29      	ldr	r4, [pc, #164]	; (3b40 <udd_ep_run+0x1d4>)
    3a9c:	47a0      	blx	r4
		return (STATUS_OK ==
    3a9e:	4244      	negs	r4, r0
    3aa0:	4144      	adcs	r4, r0
    3aa2:	b2e4      	uxtb	r4, r4
    3aa4:	e76d      	b.n	3982 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3aa6:	7cbb      	ldrb	r3, [r7, #18]
    3aa8:	079b      	lsls	r3, r3, #30
    3aaa:	d505      	bpl.n	3ab8 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3aac:	7cbb      	ldrb	r3, [r7, #18]
    3aae:	2202      	movs	r2, #2
    3ab0:	4393      	bics	r3, r2
    3ab2:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3ab4:	2500      	movs	r5, #0
    3ab6:	e7ec      	b.n	3a92 <udd_ep_run+0x126>
			ptr_job->busy = false;
    3ab8:	7cbb      	ldrb	r3, [r7, #18]
    3aba:	2201      	movs	r2, #1
    3abc:	4393      	bics	r3, r2
    3abe:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3ac2:	2b00      	cmp	r3, #0
    3ac4:	d025      	beq.n	3b12 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3ac6:	002a      	movs	r2, r5
    3ac8:	2100      	movs	r1, #0
    3aca:	2000      	movs	r0, #0
    3acc:	4798      	blx	r3
			return true;
    3ace:	2401      	movs	r4, #1
    3ad0:	e757      	b.n	3982 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3ad2:	8a39      	ldrh	r1, [r7, #16]
    3ad4:	0020      	movs	r0, r4
    3ad6:	4b19      	ldr	r3, [pc, #100]	; (3b3c <udd_ep_run+0x1d0>)
    3ad8:	4798      	blx	r3
    3ada:	1a63      	subs	r3, r4, r1
    3adc:	b29a      	uxth	r2, r3
    3ade:	e7a4      	b.n	3a2a <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3ae0:	0013      	movs	r3, r2
    3ae2:	9a02      	ldr	r2, [sp, #8]
    3ae4:	0031      	movs	r1, r6
    3ae6:	4813      	ldr	r0, [pc, #76]	; (3b34 <udd_ep_run+0x1c8>)
    3ae8:	4c13      	ldr	r4, [pc, #76]	; (3b38 <udd_ep_run+0x1cc>)
    3aea:	47a0      	blx	r4
				return (STATUS_OK ==
    3aec:	4244      	negs	r4, r0
    3aee:	4144      	adcs	r4, r0
    3af0:	b2e4      	uxtb	r4, r4
    3af2:	e746      	b.n	3982 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3af4:	7cbb      	ldrb	r3, [r7, #18]
    3af6:	2201      	movs	r2, #1
    3af8:	4393      	bics	r3, r2
    3afa:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3afe:	2b00      	cmp	r3, #0
    3b00:	d009      	beq.n	3b16 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3b02:	002a      	movs	r2, r5
    3b04:	2100      	movs	r1, #0
    3b06:	2000      	movs	r0, #0
    3b08:	4798      	blx	r3
			return true;
    3b0a:	2401      	movs	r4, #1
    3b0c:	e739      	b.n	3982 <udd_ep_run+0x16>
		return false;
    3b0e:	2400      	movs	r4, #0
    3b10:	e737      	b.n	3982 <udd_ep_run+0x16>
			return true;
    3b12:	2401      	movs	r4, #1
    3b14:	e735      	b.n	3982 <udd_ep_run+0x16>
			return true;
    3b16:	2401      	movs	r4, #1
    3b18:	e733      	b.n	3982 <udd_ep_run+0x16>
    3b1a:	46c0      	nop			; (mov r8, r8)
    3b1c:	0000378d 	.word	0x0000378d
    3b20:	00003025 	.word	0x00003025
    3b24:	20000125 	.word	0x20000125
    3b28:	00001fff 	.word	0x00001fff
    3b2c:	00009009 	.word	0x00009009
    3b30:	200003d4 	.word	0x200003d4
    3b34:	20000454 	.word	0x20000454
    3b38:	00006aad 	.word	0x00006aad
    3b3c:	00008e35 	.word	0x00008e35
    3b40:	00006a59 	.word	0x00006a59

00003b44 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3b44:	4b02      	ldr	r3, [pc, #8]	; (3b50 <udd_set_address+0xc>)
    3b46:	681b      	ldr	r3, [r3, #0]
    3b48:	2280      	movs	r2, #128	; 0x80
    3b4a:	4310      	orrs	r0, r2
    3b4c:	7298      	strb	r0, [r3, #10]
}
    3b4e:	4770      	bx	lr
    3b50:	20000454 	.word	0x20000454

00003b54 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3b54:	4b02      	ldr	r3, [pc, #8]	; (3b60 <udd_getaddress+0xc>)
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	7a98      	ldrb	r0, [r3, #10]
    3b5a:	0640      	lsls	r0, r0, #25
    3b5c:	0e40      	lsrs	r0, r0, #25
}
    3b5e:	4770      	bx	lr
    3b60:	20000454 	.word	0x20000454

00003b64 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3b64:	4b01      	ldr	r3, [pc, #4]	; (3b6c <udd_set_setup_payload+0x8>)
    3b66:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3b68:	8199      	strh	r1, [r3, #12]
}
    3b6a:	4770      	bx	lr
    3b6c:	200005bc 	.word	0x200005bc

00003b70 <udd_detach>:

void udd_detach(void)
{
    3b70:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3b72:	4b05      	ldr	r3, [pc, #20]	; (3b88 <udd_detach+0x18>)
    3b74:	681a      	ldr	r2, [r3, #0]
    3b76:	8913      	ldrh	r3, [r2, #8]
    3b78:	2101      	movs	r1, #1
    3b7a:	430b      	orrs	r3, r1
    3b7c:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3b7e:	2001      	movs	r0, #1
    3b80:	4b02      	ldr	r3, [pc, #8]	; (3b8c <udd_detach+0x1c>)
    3b82:	4798      	blx	r3
}
    3b84:	bd10      	pop	{r4, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	20000454 	.word	0x20000454
    3b8c:	00002f65 	.word	0x00002f65

00003b90 <udd_attach>:

void udd_attach(void)
{
    3b90:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3b92:	2003      	movs	r0, #3
    3b94:	4b16      	ldr	r3, [pc, #88]	; (3bf0 <udd_attach+0x60>)
    3b96:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3b98:	4c16      	ldr	r4, [pc, #88]	; (3bf4 <udd_attach+0x64>)
    3b9a:	6822      	ldr	r2, [r4, #0]
    3b9c:	8913      	ldrh	r3, [r2, #8]
    3b9e:	2101      	movs	r1, #1
    3ba0:	438b      	bics	r3, r1
    3ba2:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3ba4:	4a14      	ldr	r2, [pc, #80]	; (3bf8 <udd_attach+0x68>)
    3ba6:	3103      	adds	r1, #3
    3ba8:	0020      	movs	r0, r4
    3baa:	4e14      	ldr	r6, [pc, #80]	; (3bfc <udd_attach+0x6c>)
    3bac:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3bae:	4a14      	ldr	r2, [pc, #80]	; (3c00 <udd_attach+0x70>)
    3bb0:	2100      	movs	r1, #0
    3bb2:	0020      	movs	r0, r4
    3bb4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3bb6:	4a13      	ldr	r2, [pc, #76]	; (3c04 <udd_attach+0x74>)
    3bb8:	2101      	movs	r1, #1
    3bba:	0020      	movs	r0, r4
    3bbc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3bbe:	4a12      	ldr	r2, [pc, #72]	; (3c08 <udd_attach+0x78>)
    3bc0:	2102      	movs	r1, #2
    3bc2:	0020      	movs	r0, r4
    3bc4:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3bc6:	2104      	movs	r1, #4
    3bc8:	0020      	movs	r0, r4
    3bca:	4d10      	ldr	r5, [pc, #64]	; (3c0c <udd_attach+0x7c>)
    3bcc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3bce:	2100      	movs	r1, #0
    3bd0:	0020      	movs	r0, r4
    3bd2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3bd4:	2101      	movs	r1, #1
    3bd6:	0020      	movs	r0, r4
    3bd8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3bda:	2102      	movs	r1, #2
    3bdc:	0020      	movs	r0, r4
    3bde:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3be0:	4a0b      	ldr	r2, [pc, #44]	; (3c10 <udd_attach+0x80>)
    3be2:	2106      	movs	r1, #6
    3be4:	0020      	movs	r0, r4
    3be6:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3be8:	2106      	movs	r1, #6
    3bea:	0020      	movs	r0, r4
    3bec:	47a8      	blx	r5
#endif
}
    3bee:	bd70      	pop	{r4, r5, r6, pc}
    3bf0:	00002f65 	.word	0x00002f65
    3bf4:	20000454 	.word	0x20000454
    3bf8:	000035ad 	.word	0x000035ad
    3bfc:	0000647d 	.word	0x0000647d
    3c00:	00003599 	.word	0x00003599
    3c04:	000032cd 	.word	0x000032cd
    3c08:	0000325d 	.word	0x0000325d
    3c0c:	000064a1 	.word	0x000064a1
    3c10:	00003229 	.word	0x00003229

00003c14 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3c14:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3c16:	2100      	movs	r1, #0
    3c18:	200e      	movs	r0, #14
    3c1a:	4b08      	ldr	r3, [pc, #32]	; (3c3c <_uhd_vbus_handler+0x28>)
    3c1c:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3c1e:	4b08      	ldr	r3, [pc, #32]	; (3c40 <_uhd_vbus_handler+0x2c>)
    3c20:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3c22:	045b      	lsls	r3, r3, #17
    3c24:	d406      	bmi.n	3c34 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3c26:	4b07      	ldr	r3, [pc, #28]	; (3c44 <_uhd_vbus_handler+0x30>)
    3c28:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3c2a:	2100      	movs	r1, #0
    3c2c:	200e      	movs	r0, #14
    3c2e:	4b06      	ldr	r3, [pc, #24]	; (3c48 <_uhd_vbus_handler+0x34>)
    3c30:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3c32:	bd10      	pop	{r4, pc}
		udd_attach();
    3c34:	4b05      	ldr	r3, [pc, #20]	; (3c4c <_uhd_vbus_handler+0x38>)
    3c36:	4798      	blx	r3
    3c38:	e7f7      	b.n	3c2a <_uhd_vbus_handler+0x16>
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	00007365 	.word	0x00007365
    3c40:	41004400 	.word	0x41004400
    3c44:	00003b71 	.word	0x00003b71
    3c48:	00007345 	.word	0x00007345
    3c4c:	00003b91 	.word	0x00003b91

00003c50 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3c50:	b570      	push	{r4, r5, r6, lr}
    3c52:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3c54:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3c58:	425a      	negs	r2, r3
    3c5a:	4153      	adcs	r3, r2
    3c5c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3c5e:	b672      	cpsid	i
    3c60:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3c64:	2600      	movs	r6, #0
    3c66:	4b29      	ldr	r3, [pc, #164]	; (3d0c <udd_enable+0xbc>)
    3c68:	701e      	strb	r6, [r3, #0]
	return flags;
    3c6a:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3c6c:	ac05      	add	r4, sp, #20
    3c6e:	0020      	movs	r0, r4
    3c70:	4b27      	ldr	r3, [pc, #156]	; (3d10 <udd_enable+0xc0>)
    3c72:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3c74:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3c76:	4e27      	ldr	r6, [pc, #156]	; (3d14 <udd_enable+0xc4>)
    3c78:	0022      	movs	r2, r4
    3c7a:	4927      	ldr	r1, [pc, #156]	; (3d18 <udd_enable+0xc8>)
    3c7c:	0030      	movs	r0, r6
    3c7e:	4b27      	ldr	r3, [pc, #156]	; (3d1c <udd_enable+0xcc>)
    3c80:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3c82:	0030      	movs	r0, r6
    3c84:	4b26      	ldr	r3, [pc, #152]	; (3d20 <udd_enable+0xd0>)
    3c86:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3c88:	4b26      	ldr	r3, [pc, #152]	; (3d24 <udd_enable+0xd4>)
    3c8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3c8c:	069b      	lsls	r3, r3, #26
    3c8e:	d434      	bmi.n	3cfa <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3c90:	4924      	ldr	r1, [pc, #144]	; (3d24 <udd_enable+0xd4>)
    3c92:	22d0      	movs	r2, #208	; 0xd0
    3c94:	68cb      	ldr	r3, [r1, #12]
    3c96:	4013      	ands	r3, r2
    3c98:	2bd0      	cmp	r3, #208	; 0xd0
    3c9a:	d1fb      	bne.n	3c94 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3c9c:	2001      	movs	r0, #1
    3c9e:	4b22      	ldr	r3, [pc, #136]	; (3d28 <udd_enable+0xd8>)
    3ca0:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3ca2:	ac02      	add	r4, sp, #8
    3ca4:	0020      	movs	r0, r4
    3ca6:	4b21      	ldr	r3, [pc, #132]	; (3d2c <udd_enable+0xdc>)
    3ca8:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3caa:	230e      	movs	r3, #14
    3cac:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3cae:	2300      	movs	r3, #0
    3cb0:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3cb2:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3cb4:	3303      	adds	r3, #3
    3cb6:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3cb8:	3b02      	subs	r3, #2
    3cba:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3cbc:	2100      	movs	r1, #0
    3cbe:	200e      	movs	r0, #14
    3cc0:	4b1b      	ldr	r3, [pc, #108]	; (3d30 <udd_enable+0xe0>)
    3cc2:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3cc4:	0021      	movs	r1, r4
    3cc6:	200e      	movs	r0, #14
    3cc8:	4b1a      	ldr	r3, [pc, #104]	; (3d34 <udd_enable+0xe4>)
    3cca:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3ccc:	2200      	movs	r2, #0
    3cce:	210e      	movs	r1, #14
    3cd0:	4819      	ldr	r0, [pc, #100]	; (3d38 <udd_enable+0xe8>)
    3cd2:	4b1a      	ldr	r3, [pc, #104]	; (3d3c <udd_enable+0xec>)
    3cd4:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3cd6:	2100      	movs	r1, #0
    3cd8:	200e      	movs	r0, #14
    3cda:	4b19      	ldr	r3, [pc, #100]	; (3d40 <udd_enable+0xf0>)
    3cdc:	4798      	blx	r3
    3cde:	4b19      	ldr	r3, [pc, #100]	; (3d44 <udd_enable+0xf4>)
    3ce0:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3ce2:	045b      	lsls	r3, r3, #17
    3ce4:	d40f      	bmi.n	3d06 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3ce6:	2d00      	cmp	r5, #0
    3ce8:	d005      	beq.n	3cf6 <udd_enable+0xa6>
		cpu_irq_enable();
    3cea:	2201      	movs	r2, #1
    3cec:	4b07      	ldr	r3, [pc, #28]	; (3d0c <udd_enable+0xbc>)
    3cee:	701a      	strb	r2, [r3, #0]
    3cf0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3cf4:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3cf6:	b006      	add	sp, #24
    3cf8:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3cfa:	490a      	ldr	r1, [pc, #40]	; (3d24 <udd_enable+0xd4>)
    3cfc:	2210      	movs	r2, #16
    3cfe:	68cb      	ldr	r3, [r1, #12]
    3d00:	421a      	tst	r2, r3
    3d02:	d0fc      	beq.n	3cfe <udd_enable+0xae>
    3d04:	e7ca      	b.n	3c9c <udd_enable+0x4c>
		_uhd_vbus_handler();
    3d06:	4b0c      	ldr	r3, [pc, #48]	; (3d38 <udd_enable+0xe8>)
    3d08:	4798      	blx	r3
    3d0a:	e7ec      	b.n	3ce6 <udd_enable+0x96>
    3d0c:	20000125 	.word	0x20000125
    3d10:	00007109 	.word	0x00007109
    3d14:	20000454 	.word	0x20000454
    3d18:	41005000 	.word	0x41005000
    3d1c:	00007119 	.word	0x00007119
    3d20:	00006b2d 	.word	0x00006b2d
    3d24:	40000800 	.word	0x40000800
    3d28:	00002f65 	.word	0x00002f65
    3d2c:	0000216d 	.word	0x0000216d
    3d30:	00007365 	.word	0x00007365
    3d34:	00002181 	.word	0x00002181
    3d38:	00003c15 	.word	0x00003c15
    3d3c:	00007319 	.word	0x00007319
    3d40:	00007345 	.word	0x00007345
    3d44:	41004400 	.word	0x41004400

00003d48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4a:	46c6      	mov	lr, r8
    3d4c:	b500      	push	{lr}
    3d4e:	000c      	movs	r4, r1
    3d50:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3d52:	2800      	cmp	r0, #0
    3d54:	d10f      	bne.n	3d76 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3d56:	2a00      	cmp	r2, #0
    3d58:	dd11      	ble.n	3d7e <_read+0x36>
    3d5a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3d5c:	4e09      	ldr	r6, [pc, #36]	; (3d84 <_read+0x3c>)
    3d5e:	4d0a      	ldr	r5, [pc, #40]	; (3d88 <_read+0x40>)
    3d60:	6830      	ldr	r0, [r6, #0]
    3d62:	0021      	movs	r1, r4
    3d64:	682b      	ldr	r3, [r5, #0]
    3d66:	4798      	blx	r3
		ptr++;
    3d68:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3d6a:	42bc      	cmp	r4, r7
    3d6c:	d1f8      	bne.n	3d60 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3d6e:	4640      	mov	r0, r8
    3d70:	bc04      	pop	{r2}
    3d72:	4690      	mov	r8, r2
    3d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3d76:	2301      	movs	r3, #1
    3d78:	425b      	negs	r3, r3
    3d7a:	4698      	mov	r8, r3
    3d7c:	e7f7      	b.n	3d6e <_read+0x26>
	for (; len > 0; --len) {
    3d7e:	4680      	mov	r8, r0
    3d80:	e7f5      	b.n	3d6e <_read+0x26>
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	2000061c 	.word	0x2000061c
    3d88:	20000614 	.word	0x20000614

00003d8c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8e:	46c6      	mov	lr, r8
    3d90:	b500      	push	{lr}
    3d92:	000e      	movs	r6, r1
    3d94:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3d96:	3801      	subs	r0, #1
    3d98:	2802      	cmp	r0, #2
    3d9a:	d810      	bhi.n	3dbe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3d9c:	2a00      	cmp	r2, #0
    3d9e:	d011      	beq.n	3dc4 <_write+0x38>
    3da0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3da2:	4b0c      	ldr	r3, [pc, #48]	; (3dd4 <_write+0x48>)
    3da4:	4698      	mov	r8, r3
    3da6:	4f0c      	ldr	r7, [pc, #48]	; (3dd8 <_write+0x4c>)
    3da8:	4643      	mov	r3, r8
    3daa:	6818      	ldr	r0, [r3, #0]
    3dac:	5d31      	ldrb	r1, [r6, r4]
    3dae:	683b      	ldr	r3, [r7, #0]
    3db0:	4798      	blx	r3
    3db2:	2800      	cmp	r0, #0
    3db4:	db08      	blt.n	3dc8 <_write+0x3c>
			return -1;
		}
		++nChars;
    3db6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3db8:	42a5      	cmp	r5, r4
    3dba:	d1f5      	bne.n	3da8 <_write+0x1c>
    3dbc:	e006      	b.n	3dcc <_write+0x40>
		return -1;
    3dbe:	2401      	movs	r4, #1
    3dc0:	4264      	negs	r4, r4
    3dc2:	e003      	b.n	3dcc <_write+0x40>
	for (; len != 0; --len) {
    3dc4:	0014      	movs	r4, r2
    3dc6:	e001      	b.n	3dcc <_write+0x40>
			return -1;
    3dc8:	2401      	movs	r4, #1
    3dca:	4264      	negs	r4, r4
	}
	return nChars;
}
    3dcc:	0020      	movs	r0, r4
    3dce:	bc04      	pop	{r2}
    3dd0:	4690      	mov	r8, r2
    3dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dd4:	2000061c 	.word	0x2000061c
    3dd8:	20000618 	.word	0x20000618

00003ddc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3ddc:	b530      	push	{r4, r5, lr}
    3dde:	b087      	sub	sp, #28
    3de0:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3de2:	aa01      	add	r2, sp, #4
    3de4:	23a0      	movs	r3, #160	; 0xa0
    3de6:	011b      	lsls	r3, r3, #4
    3de8:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3dea:	2300      	movs	r3, #0
    3dec:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3dee:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3df0:	21fa      	movs	r1, #250	; 0xfa
    3df2:	00c9      	lsls	r1, r1, #3
    3df4:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3df6:	2101      	movs	r1, #1
    3df8:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3dfa:	2004      	movs	r0, #4
    3dfc:	7210      	strb	r0, [r2, #8]
    3dfe:	7253      	strb	r3, [r2, #9]
    3e00:	7293      	strb	r3, [r2, #10]
    3e02:	72d3      	strb	r3, [r2, #11]
    3e04:	7311      	strb	r1, [r2, #12]
    3e06:	7351      	strb	r1, [r2, #13]
    3e08:	4b14      	ldr	r3, [pc, #80]	; (3e5c <disk_initialize+0x80>)
    3e0a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3e0c:	2306      	movs	r3, #6
    3e0e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3e10:	4d13      	ldr	r5, [pc, #76]	; (3e60 <disk_initialize+0x84>)
    3e12:	4914      	ldr	r1, [pc, #80]	; (3e64 <disk_initialize+0x88>)
    3e14:	0028      	movs	r0, r5
    3e16:	4b14      	ldr	r3, [pc, #80]	; (3e68 <disk_initialize+0x8c>)
    3e18:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3e1a:	0028      	movs	r0, r5
    3e1c:	4b13      	ldr	r3, [pc, #76]	; (3e6c <disk_initialize+0x90>)
    3e1e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3e20:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    3e22:	2c01      	cmp	r4, #1
    3e24:	d901      	bls.n	3e2a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3e26:	b007      	add	sp, #28
    3e28:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    3e2a:	0020      	movs	r0, r4
    3e2c:	4b10      	ldr	r3, [pc, #64]	; (3e70 <disk_initialize+0x94>)
    3e2e:	4798      	blx	r3
    3e30:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    3e32:	2803      	cmp	r0, #3
    3e34:	d106      	bne.n	3e44 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    3e36:	0020      	movs	r0, r4
    3e38:	4b0d      	ldr	r3, [pc, #52]	; (3e70 <disk_initialize+0x94>)
    3e3a:	4798      	blx	r3
    3e3c:	0003      	movs	r3, r0
		return STA_NOINIT;
    3e3e:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3e40:	2b03      	cmp	r3, #3
    3e42:	d0f0      	beq.n	3e26 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    3e44:	2b00      	cmp	r3, #0
    3e46:	d106      	bne.n	3e56 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3e48:	0020      	movs	r0, r4
    3e4a:	4b0a      	ldr	r3, [pc, #40]	; (3e74 <disk_initialize+0x98>)
    3e4c:	4798      	blx	r3
	return 0;
    3e4e:	1e43      	subs	r3, r0, #1
    3e50:	4198      	sbcs	r0, r3
    3e52:	0080      	lsls	r0, r0, #2
    3e54:	e7e7      	b.n	3e26 <disk_initialize+0x4a>
		return STA_NOINIT;
    3e56:	2001      	movs	r0, #1
    3e58:	e7e5      	b.n	3e26 <disk_initialize+0x4a>
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	000007de 	.word	0x000007de
    3e60:	20000620 	.word	0x20000620
    3e64:	40001400 	.word	0x40001400
    3e68:	00002355 	.word	0x00002355
    3e6c:	000021f9 	.word	0x000021f9
    3e70:	000086b5 	.word	0x000086b5
    3e74:	00008701 	.word	0x00008701

00003e78 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3e78:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3e7a:	4b05      	ldr	r3, [pc, #20]	; (3e90 <disk_status+0x18>)
    3e7c:	4798      	blx	r3
    3e7e:	1e03      	subs	r3, r0, #0
    3e80:	d004      	beq.n	3e8c <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3e82:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3e84:	2b02      	cmp	r3, #2
    3e86:	d000      	beq.n	3e8a <disk_status+0x12>
	default:
		return STA_NOINIT;
    3e88:	3802      	subs	r0, #2
	}
}
    3e8a:	bd10      	pop	{r4, pc}
		return 0;
    3e8c:	2000      	movs	r0, #0
    3e8e:	e7fc      	b.n	3e8a <disk_status+0x12>
    3e90:	000086b5 	.word	0x000086b5

00003e94 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e96:	46de      	mov	lr, fp
    3e98:	464f      	mov	r7, r9
    3e9a:	4646      	mov	r6, r8
    3e9c:	b5c0      	push	{r6, r7, lr}
    3e9e:	b084      	sub	sp, #16
    3ea0:	9001      	str	r0, [sp, #4]
    3ea2:	000d      	movs	r5, r1
    3ea4:	0014      	movs	r4, r2
    3ea6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3ea8:	4b18      	ldr	r3, [pc, #96]	; (3f0c <disk_read+0x78>)
    3eaa:	4798      	blx	r3
    3eac:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3eae:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3eb0:	2e00      	cmp	r6, #0
    3eb2:	d105      	bne.n	3ec0 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3eb4:	b004      	add	sp, #16
    3eb6:	bc1c      	pop	{r2, r3, r4}
    3eb8:	4690      	mov	r8, r2
    3eba:	4699      	mov	r9, r3
    3ebc:	46a3      	mov	fp, r4
    3ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3ec0:	a903      	add	r1, sp, #12
    3ec2:	9801      	ldr	r0, [sp, #4]
    3ec4:	4b12      	ldr	r3, [pc, #72]	; (3f10 <disk_read+0x7c>)
    3ec6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3ec8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3eca:	0032      	movs	r2, r6
    3ecc:	437a      	muls	r2, r7
    3ece:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3ed0:	9b03      	ldr	r3, [sp, #12]
    3ed2:	3301      	adds	r3, #1
    3ed4:	4373      	muls	r3, r6
		return RES_PARERR;
    3ed6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3ed8:	429a      	cmp	r2, r3
    3eda:	d8eb      	bhi.n	3eb4 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3edc:	2f00      	cmp	r7, #0
    3ede:	d011      	beq.n	3f04 <disk_read+0x70>
    3ee0:	0273      	lsls	r3, r6, #9
    3ee2:	4698      	mov	r8, r3
    3ee4:	1c7b      	adds	r3, r7, #1
    3ee6:	469b      	mov	fp, r3
    3ee8:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3eea:	4e0a      	ldr	r6, [pc, #40]	; (3f14 <disk_read+0x80>)
    3eec:	002a      	movs	r2, r5
    3eee:	0021      	movs	r1, r4
    3ef0:	9801      	ldr	r0, [sp, #4]
    3ef2:	47b0      	blx	r6
    3ef4:	2800      	cmp	r0, #0
    3ef6:	d107      	bne.n	3f08 <disk_read+0x74>
    3ef8:	3701      	adds	r7, #1
    3efa:	444c      	add	r4, r9
    3efc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3efe:	455f      	cmp	r7, fp
    3f00:	d1f4      	bne.n	3eec <disk_read+0x58>
    3f02:	e7d7      	b.n	3eb4 <disk_read+0x20>
	return RES_OK;
    3f04:	2000      	movs	r0, #0
    3f06:	e7d5      	b.n	3eb4 <disk_read+0x20>
			return RES_ERROR;
    3f08:	2001      	movs	r0, #1
    3f0a:	e7d3      	b.n	3eb4 <disk_read+0x20>
    3f0c:	000086e9 	.word	0x000086e9
    3f10:	000086cd 	.word	0x000086cd
    3f14:	00008741 	.word	0x00008741

00003f18 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1a:	46de      	mov	lr, fp
    3f1c:	464f      	mov	r7, r9
    3f1e:	4646      	mov	r6, r8
    3f20:	b5c0      	push	{r6, r7, lr}
    3f22:	b084      	sub	sp, #16
    3f24:	9001      	str	r0, [sp, #4]
    3f26:	000d      	movs	r5, r1
    3f28:	0014      	movs	r4, r2
    3f2a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3f2c:	4b18      	ldr	r3, [pc, #96]	; (3f90 <disk_write+0x78>)
    3f2e:	4798      	blx	r3
    3f30:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3f32:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3f34:	2e00      	cmp	r6, #0
    3f36:	d105      	bne.n	3f44 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3f38:	b004      	add	sp, #16
    3f3a:	bc1c      	pop	{r2, r3, r4}
    3f3c:	4690      	mov	r8, r2
    3f3e:	4699      	mov	r9, r3
    3f40:	46a3      	mov	fp, r4
    3f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3f44:	a903      	add	r1, sp, #12
    3f46:	9801      	ldr	r0, [sp, #4]
    3f48:	4b12      	ldr	r3, [pc, #72]	; (3f94 <disk_write+0x7c>)
    3f4a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3f4c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3f4e:	0032      	movs	r2, r6
    3f50:	437a      	muls	r2, r7
    3f52:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3f54:	9b03      	ldr	r3, [sp, #12]
    3f56:	3301      	adds	r3, #1
    3f58:	4373      	muls	r3, r6
		return RES_PARERR;
    3f5a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3f5c:	429a      	cmp	r2, r3
    3f5e:	d8eb      	bhi.n	3f38 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3f60:	2f00      	cmp	r7, #0
    3f62:	d011      	beq.n	3f88 <disk_write+0x70>
    3f64:	0273      	lsls	r3, r6, #9
    3f66:	4698      	mov	r8, r3
    3f68:	1c7b      	adds	r3, r7, #1
    3f6a:	469b      	mov	fp, r3
    3f6c:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3f6e:	4e0a      	ldr	r6, [pc, #40]	; (3f98 <disk_write+0x80>)
    3f70:	002a      	movs	r2, r5
    3f72:	0021      	movs	r1, r4
    3f74:	9801      	ldr	r0, [sp, #4]
    3f76:	47b0      	blx	r6
    3f78:	2800      	cmp	r0, #0
    3f7a:	d107      	bne.n	3f8c <disk_write+0x74>
    3f7c:	3701      	adds	r7, #1
    3f7e:	444c      	add	r4, r9
    3f80:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3f82:	455f      	cmp	r7, fp
    3f84:	d1f4      	bne.n	3f70 <disk_write+0x58>
    3f86:	e7d7      	b.n	3f38 <disk_write+0x20>
	return RES_OK;
    3f88:	2000      	movs	r0, #0
    3f8a:	e7d5      	b.n	3f38 <disk_write+0x20>
			return RES_ERROR;
    3f8c:	2001      	movs	r0, #1
    3f8e:	e7d3      	b.n	3f38 <disk_write+0x20>
    3f90:	000086e9 	.word	0x000086e9
    3f94:	000086cd 	.word	0x000086cd
    3f98:	00008775 	.word	0x00008775

00003f9c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3f9c:	b510      	push	{r4, lr}
    3f9e:	b082      	sub	sp, #8
    3fa0:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3fa2:	2901      	cmp	r1, #1
    3fa4:	d00b      	beq.n	3fbe <disk_ioctl+0x22>
    3fa6:	2900      	cmp	r1, #0
    3fa8:	d020      	beq.n	3fec <disk_ioctl+0x50>
    3faa:	2902      	cmp	r1, #2
    3fac:	d00f      	beq.n	3fce <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3fae:	2004      	movs	r0, #4
	switch (ctrl) {
    3fb0:	2903      	cmp	r1, #3
    3fb2:	d102      	bne.n	3fba <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3fb4:	2301      	movs	r3, #1
    3fb6:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3fb8:	2000      	movs	r0, #0
	}

	return res;
}
    3fba:	b002      	add	sp, #8
    3fbc:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3fbe:	a901      	add	r1, sp, #4
    3fc0:	4b0e      	ldr	r3, [pc, #56]	; (3ffc <disk_ioctl+0x60>)
    3fc2:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	3301      	adds	r3, #1
    3fc8:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3fca:	2000      	movs	r0, #0
	break;
    3fcc:	e7f5      	b.n	3fba <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3fce:	4b0c      	ldr	r3, [pc, #48]	; (4000 <disk_ioctl+0x64>)
    3fd0:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3fd2:	1e43      	subs	r3, r0, #1
    3fd4:	b2db      	uxtb	r3, r3
    3fd6:	2b01      	cmp	r3, #1
    3fd8:	d904      	bls.n	3fe4 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3fda:	1f03      	subs	r3, r0, #4
    3fdc:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    3fde:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3fe0:	4213      	tst	r3, r2
    3fe2:	d1ea      	bne.n	3fba <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3fe4:	2300      	movs	r3, #0
    3fe6:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3fe8:	2000      	movs	r0, #0
	break;
    3fea:	e7e6      	b.n	3fba <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3fec:	4b05      	ldr	r3, [pc, #20]	; (4004 <disk_ioctl+0x68>)
    3fee:	4798      	blx	r3
    3ff0:	2800      	cmp	r0, #0
    3ff2:	d001      	beq.n	3ff8 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3ff4:	2003      	movs	r0, #3
    3ff6:	e7e0      	b.n	3fba <disk_ioctl+0x1e>
			res = RES_OK;
    3ff8:	2000      	movs	r0, #0
    3ffa:	e7de      	b.n	3fba <disk_ioctl+0x1e>
    3ffc:	000086cd 	.word	0x000086cd
    4000:	000086e9 	.word	0x000086e9
    4004:	000086b5 	.word	0x000086b5

00004008 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    4008:	b500      	push	{lr}
    400a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    400c:	4669      	mov	r1, sp
    400e:	480f      	ldr	r0, [pc, #60]	; (404c <get_fattime+0x44>)
    4010:	4b0f      	ldr	r3, [pc, #60]	; (4050 <get_fattime+0x48>)
    4012:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    4014:	466b      	mov	r3, sp
    4016:	7958      	ldrb	r0, [r3, #5]
    4018:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    401a:	791b      	ldrb	r3, [r3, #4]
    401c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    401e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    4020:	466b      	mov	r3, sp
    4022:	789b      	ldrb	r3, [r3, #2]
    4024:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    4026:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    4028:	466b      	mov	r3, sp
    402a:	785b      	ldrb	r3, [r3, #1]
    402c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    402e:	4318      	orrs	r0, r3
    4030:	466b      	mov	r3, sp
    4032:	781b      	ldrb	r3, [r3, #0]
    4034:	085b      	lsrs	r3, r3, #1
    4036:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    4038:	466b      	mov	r3, sp
    403a:	88db      	ldrh	r3, [r3, #6]
    403c:	4a05      	ldr	r2, [pc, #20]	; (4054 <get_fattime+0x4c>)
    403e:	4694      	mov	ip, r2
    4040:	4463      	add	r3, ip
    4042:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    4044:	4318      	orrs	r0, r3

	return ul_time;
}
    4046:	b003      	add	sp, #12
    4048:	bd00      	pop	{pc}
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	20000620 	.word	0x20000620
    4050:	000022dd 	.word	0x000022dd
    4054:	fffff844 	.word	0xfffff844

00004058 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    4058:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    405a:	2a00      	cmp	r2, #0
    405c:	d005      	beq.n	406a <mem_cpy+0x12>
    405e:	2300      	movs	r3, #0
		*d++ = *s++;
    4060:	5ccc      	ldrb	r4, [r1, r3]
    4062:	54c4      	strb	r4, [r0, r3]
    4064:	3301      	adds	r3, #1
	while (cnt--)
    4066:	4293      	cmp	r3, r2
    4068:	d1fa      	bne.n	4060 <mem_cpy+0x8>
}
    406a:	bd10      	pop	{r4, pc}

0000406c <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    406c:	2a00      	cmp	r2, #0
    406e:	d005      	beq.n	407c <mem_set+0x10>
    4070:	0003      	movs	r3, r0
    4072:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    4074:	7019      	strb	r1, [r3, #0]
    4076:	3301      	adds	r3, #1
	while (cnt--)
    4078:	4293      	cmp	r3, r2
    407a:	d1fb      	bne.n	4074 <mem_set+0x8>
}
    407c:	4770      	bx	lr

0000407e <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    407e:	0002      	movs	r2, r0
	clst -= 2;
    4080:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4082:	6983      	ldr	r3, [r0, #24]
    4084:	3b02      	subs	r3, #2
    4086:	2000      	movs	r0, #0
    4088:	4299      	cmp	r1, r3
    408a:	d203      	bcs.n	4094 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    408c:	7890      	ldrb	r0, [r2, #2]
    408e:	4341      	muls	r1, r0
    4090:	6a90      	ldr	r0, [r2, #40]	; 0x28
    4092:	1808      	adds	r0, r1, r0
}
    4094:	4770      	bx	lr

00004096 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    4096:	0002      	movs	r2, r0
    4098:	0001      	movs	r1, r0
    409a:	310b      	adds	r1, #11
	BYTE sum = 0;
    409c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    409e:	0843      	lsrs	r3, r0, #1
    40a0:	01c0      	lsls	r0, r0, #7
    40a2:	4303      	orrs	r3, r0
    40a4:	7810      	ldrb	r0, [r2, #0]
    40a6:	1818      	adds	r0, r3, r0
    40a8:	b2c0      	uxtb	r0, r0
    40aa:	3201      	adds	r2, #1
    40ac:	428a      	cmp	r2, r1
    40ae:	d1f6      	bne.n	409e <sum_sfn+0x8>
	return sum;
}
    40b0:	4770      	bx	lr
	...

000040b4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    40b4:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    40b6:	2800      	cmp	r0, #0
    40b8:	d010      	beq.n	40dc <validate+0x28>
    40ba:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    40bc:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    40be:	2a00      	cmp	r2, #0
    40c0:	d101      	bne.n	40c6 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    40c2:	0018      	movs	r0, r3
    40c4:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    40c6:	88c2      	ldrh	r2, [r0, #6]
    40c8:	428a      	cmp	r2, r1
    40ca:	d1fa      	bne.n	40c2 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    40cc:	7840      	ldrb	r0, [r0, #1]
    40ce:	4b04      	ldr	r3, [pc, #16]	; (40e0 <validate+0x2c>)
    40d0:	4798      	blx	r3
		return FR_NOT_READY;
    40d2:	2303      	movs	r3, #3
	return FR_OK;
    40d4:	07c0      	lsls	r0, r0, #31
    40d6:	17c0      	asrs	r0, r0, #31
    40d8:	4003      	ands	r3, r0
    40da:	e7f2      	b.n	40c2 <validate+0xe>
		return FR_INVALID_OBJECT;
    40dc:	2309      	movs	r3, #9
    40de:	e7f0      	b.n	40c2 <validate+0xe>
    40e0:	00003e79 	.word	0x00003e79

000040e4 <check_fs>:
{
    40e4:	b570      	push	{r4, r5, r6, lr}
    40e6:	0004      	movs	r4, r0
    40e8:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    40ea:	0001      	movs	r1, r0
    40ec:	3130      	adds	r1, #48	; 0x30
    40ee:	7840      	ldrb	r0, [r0, #1]
    40f0:	2301      	movs	r3, #1
    40f2:	4d1f      	ldr	r5, [pc, #124]	; (4170 <check_fs+0x8c>)
    40f4:	47a8      	blx	r5
		return 3;
    40f6:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    40f8:	2800      	cmp	r0, #0
    40fa:	d001      	beq.n	4100 <check_fs+0x1c>
}
    40fc:	0018      	movs	r0, r3
    40fe:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    4100:	4b1c      	ldr	r3, [pc, #112]	; (4174 <check_fs+0x90>)
    4102:	5ce3      	ldrb	r3, [r4, r3]
    4104:	021b      	lsls	r3, r3, #8
    4106:	4a1c      	ldr	r2, [pc, #112]	; (4178 <check_fs+0x94>)
    4108:	5ca2      	ldrb	r2, [r4, r2]
    410a:	431a      	orrs	r2, r3
    410c:	491b      	ldr	r1, [pc, #108]	; (417c <check_fs+0x98>)
    410e:	b212      	sxth	r2, r2
		return 2;
    4110:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    4112:	428a      	cmp	r2, r1
    4114:	d1f2      	bne.n	40fc <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    4116:	3367      	adds	r3, #103	; 0x67
    4118:	5ce3      	ldrb	r3, [r4, r3]
    411a:	061b      	lsls	r3, r3, #24
    411c:	2268      	movs	r2, #104	; 0x68
    411e:	5ca2      	ldrb	r2, [r4, r2]
    4120:	0412      	lsls	r2, r2, #16
    4122:	4313      	orrs	r3, r2
    4124:	2266      	movs	r2, #102	; 0x66
    4126:	5ca2      	ldrb	r2, [r4, r2]
    4128:	4313      	orrs	r3, r2
    412a:	2267      	movs	r2, #103	; 0x67
    412c:	5ca2      	ldrb	r2, [r4, r2]
    412e:	0212      	lsls	r2, r2, #8
    4130:	4313      	orrs	r3, r2
    4132:	021b      	lsls	r3, r3, #8
    4134:	0a1b      	lsrs	r3, r3, #8
    4136:	4a12      	ldr	r2, [pc, #72]	; (4180 <check_fs+0x9c>)
    4138:	4293      	cmp	r3, r2
    413a:	d016      	beq.n	416a <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    413c:	2385      	movs	r3, #133	; 0x85
    413e:	5ce3      	ldrb	r3, [r4, r3]
    4140:	061b      	lsls	r3, r3, #24
    4142:	2284      	movs	r2, #132	; 0x84
    4144:	5ca2      	ldrb	r2, [r4, r2]
    4146:	0412      	lsls	r2, r2, #16
    4148:	4313      	orrs	r3, r2
    414a:	2282      	movs	r2, #130	; 0x82
    414c:	5ca2      	ldrb	r2, [r4, r2]
    414e:	4313      	orrs	r3, r2
    4150:	2283      	movs	r2, #131	; 0x83
    4152:	5ca2      	ldrb	r2, [r4, r2]
    4154:	0212      	lsls	r2, r2, #8
    4156:	4313      	orrs	r3, r2
    4158:	021b      	lsls	r3, r3, #8
    415a:	0a1b      	lsrs	r3, r3, #8
    415c:	4a09      	ldr	r2, [pc, #36]	; (4184 <check_fs+0xa0>)
    415e:	4694      	mov	ip, r2
    4160:	4463      	add	r3, ip
    4162:	1e58      	subs	r0, r3, #1
    4164:	4183      	sbcs	r3, r0
		return 3;
    4166:	b2db      	uxtb	r3, r3
    4168:	e7c8      	b.n	40fc <check_fs+0x18>
		return 0;
    416a:	2300      	movs	r3, #0
    416c:	e7c6      	b.n	40fc <check_fs+0x18>
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	00003e95 	.word	0x00003e95
    4174:	0000022f 	.word	0x0000022f
    4178:	0000022e 	.word	0x0000022e
    417c:	ffffaa55 	.word	0xffffaa55
    4180:	00544146 	.word	0x00544146
    4184:	ffabbeba 	.word	0xffabbeba

00004188 <chk_mounted>:
{
    4188:	b5f0      	push	{r4, r5, r6, r7, lr}
    418a:	46d6      	mov	lr, sl
    418c:	464f      	mov	r7, r9
    418e:	4646      	mov	r6, r8
    4190:	b5c0      	push	{r6, r7, lr}
    4192:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    4194:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    4196:	781c      	ldrb	r4, [r3, #0]
    4198:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    419a:	2c09      	cmp	r4, #9
    419c:	d80e      	bhi.n	41bc <chk_mounted+0x34>
    419e:	785a      	ldrb	r2, [r3, #1]
    41a0:	2a3a      	cmp	r2, #58	; 0x3a
    41a2:	d001      	beq.n	41a8 <chk_mounted+0x20>
    41a4:	2400      	movs	r4, #0
    41a6:	e00a      	b.n	41be <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    41a8:	3302      	adds	r3, #2
    41aa:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    41ac:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    41ae:	2c03      	cmp	r4, #3
    41b0:	d905      	bls.n	41be <chk_mounted+0x36>
}
    41b2:	bc1c      	pop	{r2, r3, r4}
    41b4:	4690      	mov	r8, r2
    41b6:	4699      	mov	r9, r3
    41b8:	46a2      	mov	sl, r4
    41ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41bc:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    41be:	00a3      	lsls	r3, r4, #2
    41c0:	4ac5      	ldr	r2, [pc, #788]	; (44d8 <chk_mounted+0x350>)
    41c2:	589e      	ldr	r6, [r3, r2]
    41c4:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    41c6:	2e00      	cmp	r6, #0
    41c8:	d100      	bne.n	41cc <chk_mounted+0x44>
    41ca:	e0e8      	b.n	439e <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    41cc:	7833      	ldrb	r3, [r6, #0]
    41ce:	2b00      	cmp	r3, #0
    41d0:	d00d      	beq.n	41ee <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    41d2:	7870      	ldrb	r0, [r6, #1]
    41d4:	4bc1      	ldr	r3, [pc, #772]	; (44dc <chk_mounted+0x354>)
    41d6:	4798      	blx	r3
    41d8:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    41da:	07c2      	lsls	r2, r0, #31
    41dc:	d407      	bmi.n	41ee <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    41de:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    41e0:	2d00      	cmp	r5, #0
    41e2:	d0e6      	beq.n	41b2 <chk_mounted+0x2a>
    41e4:	075b      	lsls	r3, r3, #29
    41e6:	d400      	bmi.n	41ea <chk_mounted+0x62>
    41e8:	e0db      	b.n	43a2 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    41ea:	300a      	adds	r0, #10
    41ec:	e7e1      	b.n	41b2 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    41ee:	2300      	movs	r3, #0
    41f0:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    41f2:	b2e0      	uxtb	r0, r4
    41f4:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    41f6:	4bba      	ldr	r3, [pc, #744]	; (44e0 <chk_mounted+0x358>)
    41f8:	4798      	blx	r3
    41fa:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    41fc:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    41fe:	07da      	lsls	r2, r3, #31
    4200:	d4d7      	bmi.n	41b2 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    4202:	2d00      	cmp	r5, #0
    4204:	d002      	beq.n	420c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    4206:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    4208:	075b      	lsls	r3, r3, #29
    420a:	d4d2      	bmi.n	41b2 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    420c:	2100      	movs	r1, #0
    420e:	0030      	movs	r0, r6
    4210:	4bb4      	ldr	r3, [pc, #720]	; (44e4 <chk_mounted+0x35c>)
    4212:	4798      	blx	r3
    4214:	0003      	movs	r3, r0
    4216:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    4218:	2801      	cmp	r0, #1
    421a:	d100      	bne.n	421e <chk_mounted+0x96>
    421c:	e09a      	b.n	4354 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    421e:	2b03      	cmp	r3, #3
    4220:	d100      	bne.n	4224 <chk_mounted+0x9c>
    4222:	e0c0      	b.n	43a6 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4224:	200d      	movs	r0, #13
    4226:	2b00      	cmp	r3, #0
    4228:	d1c3      	bne.n	41b2 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    422a:	333c      	adds	r3, #60	; 0x3c
    422c:	5cf2      	ldrb	r2, [r6, r3]
    422e:	0212      	lsls	r2, r2, #8
    4230:	3b01      	subs	r3, #1
    4232:	5cf3      	ldrb	r3, [r6, r3]
    4234:	4313      	orrs	r3, r2
    4236:	2280      	movs	r2, #128	; 0x80
    4238:	0092      	lsls	r2, r2, #2
    423a:	b21b      	sxth	r3, r3
    423c:	4293      	cmp	r3, r2
    423e:	d1b8      	bne.n	41b2 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    4240:	2347      	movs	r3, #71	; 0x47
    4242:	5cf3      	ldrb	r3, [r6, r3]
    4244:	021b      	lsls	r3, r3, #8
    4246:	3abb      	subs	r2, #187	; 0xbb
    4248:	3aff      	subs	r2, #255	; 0xff
    424a:	5cb5      	ldrb	r5, [r6, r2]
    424c:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    424e:	d10d      	bne.n	426c <chk_mounted+0xe4>
    4250:	2357      	movs	r3, #87	; 0x57
    4252:	5cf5      	ldrb	r5, [r6, r3]
    4254:	062d      	lsls	r5, r5, #24
    4256:	3b01      	subs	r3, #1
    4258:	5cf3      	ldrb	r3, [r6, r3]
    425a:	041b      	lsls	r3, r3, #16
    425c:	431d      	orrs	r5, r3
    425e:	2354      	movs	r3, #84	; 0x54
    4260:	5cf3      	ldrb	r3, [r6, r3]
    4262:	431d      	orrs	r5, r3
    4264:	2355      	movs	r3, #85	; 0x55
    4266:	5cf3      	ldrb	r3, [r6, r3]
    4268:	021b      	lsls	r3, r3, #8
    426a:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    426c:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    426e:	2340      	movs	r3, #64	; 0x40
    4270:	5cf2      	ldrb	r2, [r6, r3]
    4272:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    4274:	1e53      	subs	r3, r2, #1
    4276:	200d      	movs	r0, #13
    4278:	2b01      	cmp	r3, #1
    427a:	d89a      	bhi.n	41b2 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    427c:	233d      	movs	r3, #61	; 0x3d
    427e:	5cf1      	ldrb	r1, [r6, r3]
    4280:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    4282:	2900      	cmp	r1, #0
    4284:	d095      	beq.n	41b2 <chk_mounted+0x2a>
    4286:	1e4b      	subs	r3, r1, #1
    4288:	4219      	tst	r1, r3
    428a:	d192      	bne.n	41b2 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    428c:	2342      	movs	r3, #66	; 0x42
    428e:	5cf3      	ldrb	r3, [r6, r3]
    4290:	021b      	lsls	r3, r3, #8
    4292:	3034      	adds	r0, #52	; 0x34
    4294:	5c30      	ldrb	r0, [r6, r0]
    4296:	4318      	orrs	r0, r3
    4298:	4680      	mov	r8, r0
    429a:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    429c:	200d      	movs	r0, #13
    429e:	4643      	mov	r3, r8
    42a0:	071b      	lsls	r3, r3, #28
    42a2:	d000      	beq.n	42a6 <chk_mounted+0x11e>
    42a4:	e785      	b.n	41b2 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    42a6:	2344      	movs	r3, #68	; 0x44
    42a8:	5cf3      	ldrb	r3, [r6, r3]
    42aa:	021b      	lsls	r3, r3, #8
    42ac:	3036      	adds	r0, #54	; 0x36
    42ae:	5c30      	ldrb	r0, [r6, r0]
    42b0:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    42b2:	d10d      	bne.n	42d0 <chk_mounted+0x148>
    42b4:	3353      	adds	r3, #83	; 0x53
    42b6:	5cf3      	ldrb	r3, [r6, r3]
    42b8:	061b      	lsls	r3, r3, #24
    42ba:	2052      	movs	r0, #82	; 0x52
    42bc:	5c30      	ldrb	r0, [r6, r0]
    42be:	0400      	lsls	r0, r0, #16
    42c0:	4303      	orrs	r3, r0
    42c2:	2050      	movs	r0, #80	; 0x50
    42c4:	5c30      	ldrb	r0, [r6, r0]
    42c6:	4303      	orrs	r3, r0
    42c8:	2051      	movs	r0, #81	; 0x51
    42ca:	5c30      	ldrb	r0, [r6, r0]
    42cc:	0200      	lsls	r0, r0, #8
    42ce:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    42d0:	203f      	movs	r0, #63	; 0x3f
    42d2:	5c30      	ldrb	r0, [r6, r0]
    42d4:	0200      	lsls	r0, r0, #8
    42d6:	273e      	movs	r7, #62	; 0x3e
    42d8:	5df7      	ldrb	r7, [r6, r7]
    42da:	4307      	orrs	r7, r0
    42dc:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    42de:	200d      	movs	r0, #13
    42e0:	2f00      	cmp	r7, #0
    42e2:	d100      	bne.n	42e6 <chk_mounted+0x15e>
    42e4:	e765      	b.n	41b2 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    42e6:	436a      	muls	r2, r5
    42e8:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    42ea:	4642      	mov	r2, r8
    42ec:	0917      	lsrs	r7, r2, #4
    42ee:	4457      	add	r7, sl
    42f0:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    42f2:	42bb      	cmp	r3, r7
    42f4:	d200      	bcs.n	42f8 <chk_mounted+0x170>
    42f6:	e75c      	b.n	41b2 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    42f8:	1bd8      	subs	r0, r3, r7
    42fa:	4b7b      	ldr	r3, [pc, #492]	; (44e8 <chk_mounted+0x360>)
    42fc:	4798      	blx	r3
    42fe:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    4300:	200d      	movs	r0, #13
    4302:	2b00      	cmp	r3, #0
    4304:	d100      	bne.n	4308 <chk_mounted+0x180>
    4306:	e754      	b.n	41b2 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    4308:	4a78      	ldr	r2, [pc, #480]	; (44ec <chk_mounted+0x364>)
	fmt = FS_FAT12;
    430a:	429a      	cmp	r2, r3
    430c:	4192      	sbcs	r2, r2
    430e:	4252      	negs	r2, r2
    4310:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    4312:	4977      	ldr	r1, [pc, #476]	; (44f0 <chk_mounted+0x368>)
    4314:	428b      	cmp	r3, r1
    4316:	d848      	bhi.n	43aa <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    4318:	3302      	adds	r3, #2
    431a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    431c:	19e7      	adds	r7, r4, r7
    431e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    4320:	4454      	add	r4, sl
    4322:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    4324:	200d      	movs	r0, #13
    4326:	4641      	mov	r1, r8
    4328:	2900      	cmp	r1, #0
    432a:	d100      	bne.n	432e <chk_mounted+0x1a6>
    432c:	e741      	b.n	41b2 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    432e:	444c      	add	r4, r9
    4330:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    4332:	2a02      	cmp	r2, #2
    4334:	d12c      	bne.n	4390 <chk_mounted+0x208>
    4336:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4338:	496e      	ldr	r1, [pc, #440]	; (44f4 <chk_mounted+0x36c>)
    433a:	468c      	mov	ip, r1
    433c:	4463      	add	r3, ip
    433e:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    4340:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4342:	429d      	cmp	r5, r3
    4344:	d200      	bcs.n	4348 <chk_mounted+0x1c0>
    4346:	e734      	b.n	41b2 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    4348:	2301      	movs	r3, #1
    434a:	425b      	negs	r3, r3
    434c:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    434e:	2300      	movs	r3, #0
    4350:	60f3      	str	r3, [r6, #12]
    4352:	e0b6      	b.n	44c2 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    4354:	33f2      	adds	r3, #242	; 0xf2
    4356:	33ff      	adds	r3, #255	; 0xff
    4358:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    435a:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    435c:	2b00      	cmp	r3, #0
    435e:	d100      	bne.n	4362 <chk_mounted+0x1da>
    4360:	e727      	b.n	41b2 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    4362:	23fa      	movs	r3, #250	; 0xfa
    4364:	33ff      	adds	r3, #255	; 0xff
    4366:	5cf4      	ldrb	r4, [r6, r3]
    4368:	0624      	lsls	r4, r4, #24
    436a:	3b01      	subs	r3, #1
    436c:	5cf3      	ldrb	r3, [r6, r3]
    436e:	041b      	lsls	r3, r3, #16
    4370:	431c      	orrs	r4, r3
    4372:	23fb      	movs	r3, #251	; 0xfb
    4374:	005b      	lsls	r3, r3, #1
    4376:	5cf3      	ldrb	r3, [r6, r3]
    4378:	431c      	orrs	r4, r3
    437a:	23f8      	movs	r3, #248	; 0xf8
    437c:	33ff      	adds	r3, #255	; 0xff
    437e:	5cf2      	ldrb	r2, [r6, r3]
    4380:	0212      	lsls	r2, r2, #8
    4382:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    4384:	0021      	movs	r1, r4
    4386:	0030      	movs	r0, r6
    4388:	4b56      	ldr	r3, [pc, #344]	; (44e4 <chk_mounted+0x35c>)
    438a:	4798      	blx	r3
    438c:	0003      	movs	r3, r0
    438e:	e746      	b.n	421e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    4390:	2103      	movs	r1, #3
    4392:	4359      	muls	r1, r3
    4394:	0849      	lsrs	r1, r1, #1
    4396:	2001      	movs	r0, #1
    4398:	4003      	ands	r3, r0
    439a:	18cb      	adds	r3, r1, r3
    439c:	e7cc      	b.n	4338 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    439e:	200c      	movs	r0, #12
    43a0:	e707      	b.n	41b2 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    43a2:	2000      	movs	r0, #0
    43a4:	e705      	b.n	41b2 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    43a6:	2001      	movs	r0, #1
    43a8:	e703      	b.n	41b2 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    43aa:	3302      	adds	r3, #2
    43ac:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    43ae:	19e7      	adds	r7, r4, r7
    43b0:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    43b2:	4652      	mov	r2, sl
    43b4:	18a2      	adds	r2, r4, r2
    43b6:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    43b8:	200d      	movs	r0, #13
    43ba:	4642      	mov	r2, r8
    43bc:	2a00      	cmp	r2, #0
    43be:	d000      	beq.n	43c2 <chk_mounted+0x23a>
    43c0:	e6f7      	b.n	41b2 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    43c2:	225f      	movs	r2, #95	; 0x5f
    43c4:	5cb2      	ldrb	r2, [r6, r2]
    43c6:	0612      	lsls	r2, r2, #24
    43c8:	215e      	movs	r1, #94	; 0x5e
    43ca:	5c71      	ldrb	r1, [r6, r1]
    43cc:	0409      	lsls	r1, r1, #16
    43ce:	430a      	orrs	r2, r1
    43d0:	215c      	movs	r1, #92	; 0x5c
    43d2:	5c71      	ldrb	r1, [r6, r1]
    43d4:	430a      	orrs	r2, r1
    43d6:	215d      	movs	r1, #93	; 0x5d
    43d8:	5c71      	ldrb	r1, [r6, r1]
    43da:	0209      	lsls	r1, r1, #8
    43dc:	430a      	orrs	r2, r1
    43de:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    43e0:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    43e2:	4a44      	ldr	r2, [pc, #272]	; (44f4 <chk_mounted+0x36c>)
    43e4:	4694      	mov	ip, r2
    43e6:	4463      	add	r3, ip
    43e8:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    43ea:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    43ec:	429d      	cmp	r5, r3
    43ee:	d200      	bcs.n	43f2 <chk_mounted+0x26a>
    43f0:	e6df      	b.n	41b2 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    43f2:	2301      	movs	r3, #1
    43f4:	425b      	negs	r3, r3
    43f6:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    43f8:	2300      	movs	r3, #0
    43fa:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    43fc:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    43fe:	3361      	adds	r3, #97	; 0x61
    4400:	5cf3      	ldrb	r3, [r6, r3]
    4402:	021b      	lsls	r3, r3, #8
    4404:	2260      	movs	r2, #96	; 0x60
    4406:	5cb2      	ldrb	r2, [r6, r2]
    4408:	431a      	orrs	r2, r3
    440a:	1912      	adds	r2, r2, r4
    440c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    440e:	0031      	movs	r1, r6
    4410:	3130      	adds	r1, #48	; 0x30
    4412:	7870      	ldrb	r0, [r6, #1]
    4414:	2301      	movs	r3, #1
    4416:	4c38      	ldr	r4, [pc, #224]	; (44f8 <chk_mounted+0x370>)
    4418:	47a0      	blx	r4
    441a:	2203      	movs	r2, #3
    441c:	2800      	cmp	r0, #0
    441e:	d150      	bne.n	44c2 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    4420:	4b36      	ldr	r3, [pc, #216]	; (44fc <chk_mounted+0x374>)
    4422:	5cf2      	ldrb	r2, [r6, r3]
    4424:	0212      	lsls	r2, r2, #8
    4426:	4b36      	ldr	r3, [pc, #216]	; (4500 <chk_mounted+0x378>)
    4428:	5cf3      	ldrb	r3, [r6, r3]
    442a:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    442c:	4935      	ldr	r1, [pc, #212]	; (4504 <chk_mounted+0x37c>)
    442e:	b21b      	sxth	r3, r3
    4430:	2203      	movs	r2, #3
    4432:	428b      	cmp	r3, r1
    4434:	d145      	bne.n	44c2 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4436:	2333      	movs	r3, #51	; 0x33
    4438:	5cf3      	ldrb	r3, [r6, r3]
    443a:	061b      	lsls	r3, r3, #24
    443c:	322f      	adds	r2, #47	; 0x2f
    443e:	5cb2      	ldrb	r2, [r6, r2]
    4440:	0412      	lsls	r2, r2, #16
    4442:	4313      	orrs	r3, r2
    4444:	2230      	movs	r2, #48	; 0x30
    4446:	5cb2      	ldrb	r2, [r6, r2]
    4448:	4313      	orrs	r3, r2
    444a:	2231      	movs	r2, #49	; 0x31
    444c:	5cb2      	ldrb	r2, [r6, r2]
    444e:	0212      	lsls	r2, r2, #8
    4450:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    4452:	492d      	ldr	r1, [pc, #180]	; (4508 <chk_mounted+0x380>)
    4454:	2203      	movs	r2, #3
    4456:	428b      	cmp	r3, r1
    4458:	d133      	bne.n	44c2 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    445a:	4b2c      	ldr	r3, [pc, #176]	; (450c <chk_mounted+0x384>)
    445c:	5cf3      	ldrb	r3, [r6, r3]
    445e:	061b      	lsls	r3, r3, #24
    4460:	4a2b      	ldr	r2, [pc, #172]	; (4510 <chk_mounted+0x388>)
    4462:	5cb2      	ldrb	r2, [r6, r2]
    4464:	0412      	lsls	r2, r2, #16
    4466:	4313      	orrs	r3, r2
    4468:	2285      	movs	r2, #133	; 0x85
    446a:	0092      	lsls	r2, r2, #2
    446c:	5cb2      	ldrb	r2, [r6, r2]
    446e:	4313      	orrs	r3, r2
    4470:	4a28      	ldr	r2, [pc, #160]	; (4514 <chk_mounted+0x38c>)
    4472:	5cb2      	ldrb	r2, [r6, r2]
    4474:	0212      	lsls	r2, r2, #8
    4476:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4478:	4927      	ldr	r1, [pc, #156]	; (4518 <chk_mounted+0x390>)
    447a:	2203      	movs	r2, #3
    447c:	428b      	cmp	r3, r1
    447e:	d120      	bne.n	44c2 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    4480:	4b26      	ldr	r3, [pc, #152]	; (451c <chk_mounted+0x394>)
    4482:	5cf3      	ldrb	r3, [r6, r3]
    4484:	061b      	lsls	r3, r3, #24
    4486:	4a26      	ldr	r2, [pc, #152]	; (4520 <chk_mounted+0x398>)
    4488:	5cb2      	ldrb	r2, [r6, r2]
    448a:	0412      	lsls	r2, r2, #16
    448c:	4313      	orrs	r3, r2
    448e:	2287      	movs	r2, #135	; 0x87
    4490:	0092      	lsls	r2, r2, #2
    4492:	5cb2      	ldrb	r2, [r6, r2]
    4494:	4313      	orrs	r3, r2
    4496:	4a23      	ldr	r2, [pc, #140]	; (4524 <chk_mounted+0x39c>)
    4498:	5cb2      	ldrb	r2, [r6, r2]
    449a:	0212      	lsls	r2, r2, #8
    449c:	4313      	orrs	r3, r2
    449e:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    44a0:	4b21      	ldr	r3, [pc, #132]	; (4528 <chk_mounted+0x3a0>)
    44a2:	5cf3      	ldrb	r3, [r6, r3]
    44a4:	061b      	lsls	r3, r3, #24
    44a6:	4a21      	ldr	r2, [pc, #132]	; (452c <chk_mounted+0x3a4>)
    44a8:	5cb2      	ldrb	r2, [r6, r2]
    44aa:	0412      	lsls	r2, r2, #16
    44ac:	4313      	orrs	r3, r2
    44ae:	2286      	movs	r2, #134	; 0x86
    44b0:	0092      	lsls	r2, r2, #2
    44b2:	5cb2      	ldrb	r2, [r6, r2]
    44b4:	4313      	orrs	r3, r2
    44b6:	4a1e      	ldr	r2, [pc, #120]	; (4530 <chk_mounted+0x3a8>)
    44b8:	5cb2      	ldrb	r2, [r6, r2]
    44ba:	0212      	lsls	r2, r2, #8
    44bc:	4313      	orrs	r3, r2
    44be:	6133      	str	r3, [r6, #16]
    44c0:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    44c2:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    44c4:	4a1b      	ldr	r2, [pc, #108]	; (4534 <chk_mounted+0x3ac>)
    44c6:	8813      	ldrh	r3, [r2, #0]
    44c8:	3301      	adds	r3, #1
    44ca:	b29b      	uxth	r3, r3
    44cc:	8013      	strh	r3, [r2, #0]
    44ce:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    44d0:	2000      	movs	r0, #0
    44d2:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    44d4:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    44d6:	e66c      	b.n	41b2 <chk_mounted+0x2a>
    44d8:	200002b8 	.word	0x200002b8
    44dc:	00003e79 	.word	0x00003e79
    44e0:	00003ddd 	.word	0x00003ddd
    44e4:	000040e5 	.word	0x000040e5
    44e8:	00008d29 	.word	0x00008d29
    44ec:	00000ff5 	.word	0x00000ff5
    44f0:	0000fff5 	.word	0x0000fff5
    44f4:	000001ff 	.word	0x000001ff
    44f8:	00003e95 	.word	0x00003e95
    44fc:	0000022f 	.word	0x0000022f
    4500:	0000022e 	.word	0x0000022e
    4504:	ffffaa55 	.word	0xffffaa55
    4508:	41615252 	.word	0x41615252
    450c:	00000217 	.word	0x00000217
    4510:	00000216 	.word	0x00000216
    4514:	00000215 	.word	0x00000215
    4518:	61417272 	.word	0x61417272
    451c:	0000021f 	.word	0x0000021f
    4520:	0000021e 	.word	0x0000021e
    4524:	0000021d 	.word	0x0000021d
    4528:	0000021b 	.word	0x0000021b
    452c:	0000021a 	.word	0x0000021a
    4530:	00000219 	.word	0x00000219
    4534:	200002c8 	.word	0x200002c8

00004538 <move_window>:
{
    4538:	b5f0      	push	{r4, r5, r6, r7, lr}
    453a:	46ce      	mov	lr, r9
    453c:	b500      	push	{lr}
    453e:	b082      	sub	sp, #8
    4540:	0004      	movs	r4, r0
    4542:	000f      	movs	r7, r1
	wsect = fs->winsect;
    4544:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    4546:	428d      	cmp	r5, r1
    4548:	d03f      	beq.n	45ca <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    454a:	7903      	ldrb	r3, [r0, #4]
    454c:	2b00      	cmp	r3, #0
    454e:	d107      	bne.n	4560 <move_window+0x28>
	return FR_OK;
    4550:	2300      	movs	r3, #0
		if (sector) {
    4552:	2f00      	cmp	r7, #0
    4554:	d12c      	bne.n	45b0 <move_window+0x78>
}
    4556:	0018      	movs	r0, r3
    4558:	b002      	add	sp, #8
    455a:	bc04      	pop	{r2}
    455c:	4691      	mov	r9, r2
    455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4560:	2330      	movs	r3, #48	; 0x30
    4562:	469c      	mov	ip, r3
    4564:	4484      	add	ip, r0
    4566:	4663      	mov	r3, ip
    4568:	4661      	mov	r1, ip
    456a:	9301      	str	r3, [sp, #4]
    456c:	7840      	ldrb	r0, [r0, #1]
    456e:	2301      	movs	r3, #1
    4570:	002a      	movs	r2, r5
    4572:	4e17      	ldr	r6, [pc, #92]	; (45d0 <move_window+0x98>)
    4574:	47b0      	blx	r6
				return FR_DISK_ERR;
    4576:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4578:	2800      	cmp	r0, #0
    457a:	d1ec      	bne.n	4556 <move_window+0x1e>
			fs->wflag = 0;
    457c:	2300      	movs	r3, #0
    457e:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4580:	6a23      	ldr	r3, [r4, #32]
    4582:	69e2      	ldr	r2, [r4, #28]
    4584:	4694      	mov	ip, r2
    4586:	4463      	add	r3, ip
    4588:	429d      	cmp	r5, r3
    458a:	d2e1      	bcs.n	4550 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    458c:	78e6      	ldrb	r6, [r4, #3]
    458e:	2e01      	cmp	r6, #1
    4590:	d9de      	bls.n	4550 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    4592:	4b0f      	ldr	r3, [pc, #60]	; (45d0 <move_window+0x98>)
    4594:	4699      	mov	r9, r3
					wsect += fs->fsize;
    4596:	69e3      	ldr	r3, [r4, #28]
    4598:	469c      	mov	ip, r3
    459a:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    459c:	7860      	ldrb	r0, [r4, #1]
    459e:	2301      	movs	r3, #1
    45a0:	002a      	movs	r2, r5
    45a2:	9901      	ldr	r1, [sp, #4]
    45a4:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    45a6:	3e01      	subs	r6, #1
    45a8:	b2f6      	uxtb	r6, r6
    45aa:	2e01      	cmp	r6, #1
    45ac:	d1f3      	bne.n	4596 <move_window+0x5e>
    45ae:	e7cf      	b.n	4550 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    45b0:	0021      	movs	r1, r4
    45b2:	3130      	adds	r1, #48	; 0x30
    45b4:	7860      	ldrb	r0, [r4, #1]
    45b6:	3301      	adds	r3, #1
    45b8:	003a      	movs	r2, r7
    45ba:	4d06      	ldr	r5, [pc, #24]	; (45d4 <move_window+0x9c>)
    45bc:	47a8      	blx	r5
				return FR_DISK_ERR;
    45be:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    45c0:	2800      	cmp	r0, #0
    45c2:	d1c8      	bne.n	4556 <move_window+0x1e>
			fs->winsect = sector;
    45c4:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    45c6:	2300      	movs	r3, #0
    45c8:	e7c5      	b.n	4556 <move_window+0x1e>
    45ca:	2300      	movs	r3, #0
    45cc:	e7c3      	b.n	4556 <move_window+0x1e>
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	00003f19 	.word	0x00003f19
    45d4:	00003e95 	.word	0x00003e95

000045d8 <get_fat>:
{
    45d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45da:	0005      	movs	r5, r0
    45dc:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    45de:	2901      	cmp	r1, #1
    45e0:	d974      	bls.n	46cc <get_fat+0xf4>
		return 1;
    45e2:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    45e4:	69ab      	ldr	r3, [r5, #24]
    45e6:	4299      	cmp	r1, r3
    45e8:	d271      	bcs.n	46ce <get_fat+0xf6>
	switch (fs->fs_type) {
    45ea:	782b      	ldrb	r3, [r5, #0]
    45ec:	2b02      	cmp	r3, #2
    45ee:	d034      	beq.n	465a <get_fat+0x82>
    45f0:	2b03      	cmp	r3, #3
    45f2:	d049      	beq.n	4688 <get_fat+0xb0>
    45f4:	2b01      	cmp	r3, #1
    45f6:	d002      	beq.n	45fe <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    45f8:	2001      	movs	r0, #1
    45fa:	4240      	negs	r0, r0
    45fc:	e067      	b.n	46ce <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    45fe:	084e      	lsrs	r6, r1, #1
    4600:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4602:	0a71      	lsrs	r1, r6, #9
    4604:	6a2b      	ldr	r3, [r5, #32]
    4606:	469c      	mov	ip, r3
    4608:	4461      	add	r1, ip
    460a:	0028      	movs	r0, r5
    460c:	4b30      	ldr	r3, [pc, #192]	; (46d0 <get_fat+0xf8>)
    460e:	4798      	blx	r3
    4610:	2800      	cmp	r0, #0
    4612:	d002      	beq.n	461a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4614:	2001      	movs	r0, #1
    4616:	4240      	negs	r0, r0
    4618:	e059      	b.n	46ce <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    461a:	05f3      	lsls	r3, r6, #23
    461c:	0ddb      	lsrs	r3, r3, #23
    461e:	18eb      	adds	r3, r5, r3
    4620:	3330      	adds	r3, #48	; 0x30
    4622:	781f      	ldrb	r7, [r3, #0]
    4624:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4626:	0a71      	lsrs	r1, r6, #9
    4628:	6a2b      	ldr	r3, [r5, #32]
    462a:	469c      	mov	ip, r3
    462c:	4461      	add	r1, ip
    462e:	0028      	movs	r0, r5
    4630:	4b27      	ldr	r3, [pc, #156]	; (46d0 <get_fat+0xf8>)
    4632:	4798      	blx	r3
    4634:	2800      	cmp	r0, #0
    4636:	d002      	beq.n	463e <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4638:	2001      	movs	r0, #1
    463a:	4240      	negs	r0, r0
    463c:	e047      	b.n	46ce <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    463e:	05f6      	lsls	r6, r6, #23
    4640:	0df6      	lsrs	r6, r6, #23
    4642:	19ad      	adds	r5, r5, r6
    4644:	3530      	adds	r5, #48	; 0x30
    4646:	7828      	ldrb	r0, [r5, #0]
    4648:	0200      	lsls	r0, r0, #8
    464a:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    464c:	07e3      	lsls	r3, r4, #31
    464e:	d501      	bpl.n	4654 <get_fat+0x7c>
    4650:	0900      	lsrs	r0, r0, #4
    4652:	e03c      	b.n	46ce <get_fat+0xf6>
    4654:	0500      	lsls	r0, r0, #20
    4656:	0d00      	lsrs	r0, r0, #20
    4658:	e039      	b.n	46ce <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    465a:	0a09      	lsrs	r1, r1, #8
    465c:	6a2b      	ldr	r3, [r5, #32]
    465e:	469c      	mov	ip, r3
    4660:	4461      	add	r1, ip
    4662:	0028      	movs	r0, r5
    4664:	4b1a      	ldr	r3, [pc, #104]	; (46d0 <get_fat+0xf8>)
    4666:	4798      	blx	r3
    4668:	2800      	cmp	r0, #0
    466a:	d002      	beq.n	4672 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    466c:	2001      	movs	r0, #1
    466e:	4240      	negs	r0, r0
    4670:	e02d      	b.n	46ce <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    4672:	0064      	lsls	r4, r4, #1
    4674:	23ff      	movs	r3, #255	; 0xff
    4676:	005b      	lsls	r3, r3, #1
    4678:	401c      	ands	r4, r3
		return LD_WORD(p);
    467a:	192d      	adds	r5, r5, r4
    467c:	3530      	adds	r5, #48	; 0x30
    467e:	786b      	ldrb	r3, [r5, #1]
    4680:	021b      	lsls	r3, r3, #8
    4682:	7828      	ldrb	r0, [r5, #0]
    4684:	4318      	orrs	r0, r3
    4686:	e022      	b.n	46ce <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4688:	09c9      	lsrs	r1, r1, #7
    468a:	6a2b      	ldr	r3, [r5, #32]
    468c:	469c      	mov	ip, r3
    468e:	4461      	add	r1, ip
    4690:	0028      	movs	r0, r5
    4692:	4b0f      	ldr	r3, [pc, #60]	; (46d0 <get_fat+0xf8>)
    4694:	4798      	blx	r3
    4696:	2800      	cmp	r0, #0
    4698:	d002      	beq.n	46a0 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    469a:	2001      	movs	r0, #1
    469c:	4240      	negs	r0, r0
    469e:	e016      	b.n	46ce <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    46a0:	00a4      	lsls	r4, r4, #2
    46a2:	23fe      	movs	r3, #254	; 0xfe
    46a4:	005b      	lsls	r3, r3, #1
    46a6:	401c      	ands	r4, r3
    46a8:	0023      	movs	r3, r4
    46aa:	3330      	adds	r3, #48	; 0x30
    46ac:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    46ae:	78d8      	ldrb	r0, [r3, #3]
    46b0:	0600      	lsls	r0, r0, #24
    46b2:	789a      	ldrb	r2, [r3, #2]
    46b4:	0412      	lsls	r2, r2, #16
    46b6:	4310      	orrs	r0, r2
    46b8:	192c      	adds	r4, r5, r4
    46ba:	3430      	adds	r4, #48	; 0x30
    46bc:	7822      	ldrb	r2, [r4, #0]
    46be:	4310      	orrs	r0, r2
    46c0:	785b      	ldrb	r3, [r3, #1]
    46c2:	021b      	lsls	r3, r3, #8
    46c4:	4318      	orrs	r0, r3
    46c6:	0100      	lsls	r0, r0, #4
    46c8:	0900      	lsrs	r0, r0, #4
    46ca:	e000      	b.n	46ce <get_fat+0xf6>
		return 1;
    46cc:	2001      	movs	r0, #1
}
    46ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d0:	00004539 	.word	0x00004539

000046d4 <dir_sdi>:
{
    46d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46d6:	0004      	movs	r4, r0
    46d8:	000d      	movs	r5, r1
	dj->index = idx;
    46da:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    46dc:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    46de:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    46e0:	2901      	cmp	r1, #1
    46e2:	d003      	beq.n	46ec <dir_sdi+0x18>
    46e4:	6823      	ldr	r3, [r4, #0]
    46e6:	699a      	ldr	r2, [r3, #24]
    46e8:	4291      	cmp	r1, r2
    46ea:	d300      	bcc.n	46ee <dir_sdi+0x1a>
}
    46ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    46ee:	2900      	cmp	r1, #0
    46f0:	d119      	bne.n	4726 <dir_sdi+0x52>
    46f2:	781a      	ldrb	r2, [r3, #0]
    46f4:	2a03      	cmp	r2, #3
    46f6:	d013      	beq.n	4720 <dir_sdi+0x4c>
		dj->clust = clst;
    46f8:	2200      	movs	r2, #0
    46fa:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    46fc:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    46fe:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4700:	42aa      	cmp	r2, r5
    4702:	d9f3      	bls.n	46ec <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4704:	092a      	lsrs	r2, r5, #4
    4706:	b292      	uxth	r2, r2
    4708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    470a:	189b      	adds	r3, r3, r2
    470c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    470e:	6823      	ldr	r3, [r4, #0]
    4710:	3330      	adds	r3, #48	; 0x30
    4712:	220f      	movs	r2, #15
    4714:	4015      	ands	r5, r2
    4716:	016d      	lsls	r5, r5, #5
    4718:	195d      	adds	r5, r3, r5
    471a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    471c:	2000      	movs	r0, #0
    471e:	e7e5      	b.n	46ec <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4720:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4722:	2900      	cmp	r1, #0
    4724:	d0e8      	beq.n	46f8 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    4726:	789e      	ldrb	r6, [r3, #2]
    4728:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    472a:	42b5      	cmp	r5, r6
    472c:	d313      	bcc.n	4756 <dir_sdi+0x82>
    472e:	1bad      	subs	r5, r5, r6
    4730:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    4732:	4f10      	ldr	r7, [pc, #64]	; (4774 <dir_sdi+0xa0>)
    4734:	e000      	b.n	4738 <dir_sdi+0x64>
    4736:	001d      	movs	r5, r3
    4738:	6820      	ldr	r0, [r4, #0]
    473a:	47b8      	blx	r7
    473c:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    473e:	1c43      	adds	r3, r0, #1
    4740:	d012      	beq.n	4768 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4742:	2801      	cmp	r0, #1
    4744:	d912      	bls.n	476c <dir_sdi+0x98>
    4746:	6823      	ldr	r3, [r4, #0]
    4748:	699b      	ldr	r3, [r3, #24]
    474a:	4298      	cmp	r0, r3
    474c:	d210      	bcs.n	4770 <dir_sdi+0x9c>
    474e:	1bab      	subs	r3, r5, r6
    4750:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    4752:	42b5      	cmp	r5, r6
    4754:	d2ef      	bcs.n	4736 <dir_sdi+0x62>
		dj->clust = clst;
    4756:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4758:	6820      	ldr	r0, [r4, #0]
    475a:	4b07      	ldr	r3, [pc, #28]	; (4778 <dir_sdi+0xa4>)
    475c:	4798      	blx	r3
    475e:	092b      	lsrs	r3, r5, #4
    4760:	b29b      	uxth	r3, r3
    4762:	1818      	adds	r0, r3, r0
    4764:	6120      	str	r0, [r4, #16]
    4766:	e7d2      	b.n	470e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4768:	2001      	movs	r0, #1
    476a:	e7bf      	b.n	46ec <dir_sdi+0x18>
				return FR_INT_ERR;
    476c:	2002      	movs	r0, #2
    476e:	e7bd      	b.n	46ec <dir_sdi+0x18>
    4770:	2002      	movs	r0, #2
    4772:	e7bb      	b.n	46ec <dir_sdi+0x18>
    4774:	000045d9 	.word	0x000045d9
    4778:	0000407f 	.word	0x0000407f

0000477c <put_fat>:
{
    477c:	b5f0      	push	{r4, r5, r6, r7, lr}
    477e:	46c6      	mov	lr, r8
    4780:	b500      	push	{lr}
    4782:	0007      	movs	r7, r0
    4784:	000c      	movs	r4, r1
    4786:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    4788:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    478a:	2901      	cmp	r1, #1
    478c:	d902      	bls.n	4794 <put_fat+0x18>
    478e:	6983      	ldr	r3, [r0, #24]
    4790:	4299      	cmp	r1, r3
    4792:	d303      	bcc.n	479c <put_fat+0x20>
}
    4794:	0028      	movs	r0, r5
    4796:	bc04      	pop	{r2}
    4798:	4690      	mov	r8, r2
    479a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    479c:	7803      	ldrb	r3, [r0, #0]
    479e:	2b02      	cmp	r3, #2
    47a0:	d053      	beq.n	484a <put_fat+0xce>
    47a2:	2b03      	cmp	r3, #3
    47a4:	d063      	beq.n	486e <put_fat+0xf2>
			res = FR_INT_ERR;
    47a6:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    47a8:	2b01      	cmp	r3, #1
    47aa:	d002      	beq.n	47b2 <put_fat+0x36>
		fs->wflag = 1;
    47ac:	2301      	movs	r3, #1
    47ae:	713b      	strb	r3, [r7, #4]
    47b0:	e7f0      	b.n	4794 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    47b2:	084b      	lsrs	r3, r1, #1
    47b4:	4698      	mov	r8, r3
    47b6:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    47b8:	4643      	mov	r3, r8
    47ba:	0a59      	lsrs	r1, r3, #9
    47bc:	6a03      	ldr	r3, [r0, #32]
    47be:	469c      	mov	ip, r3
    47c0:	4461      	add	r1, ip
    47c2:	4b3b      	ldr	r3, [pc, #236]	; (48b0 <put_fat+0x134>)
    47c4:	4798      	blx	r3
    47c6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    47c8:	d1f0      	bne.n	47ac <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    47ca:	4643      	mov	r3, r8
    47cc:	05db      	lsls	r3, r3, #23
    47ce:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    47d0:	07e2      	lsls	r2, r4, #31
    47d2:	d51f      	bpl.n	4814 <put_fat+0x98>
    47d4:	18fb      	adds	r3, r7, r3
    47d6:	3330      	adds	r3, #48	; 0x30
    47d8:	7819      	ldrb	r1, [r3, #0]
    47da:	220f      	movs	r2, #15
    47dc:	400a      	ands	r2, r1
    47de:	0131      	lsls	r1, r6, #4
    47e0:	20ff      	movs	r0, #255	; 0xff
    47e2:	0100      	lsls	r0, r0, #4
    47e4:	4001      	ands	r1, r0
    47e6:	430a      	orrs	r2, r1
    47e8:	701a      	strb	r2, [r3, #0]
			bc++;
    47ea:	4644      	mov	r4, r8
    47ec:	3401      	adds	r4, #1
			fs->wflag = 1;
    47ee:	2301      	movs	r3, #1
    47f0:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    47f2:	0a61      	lsrs	r1, r4, #9
    47f4:	6a3b      	ldr	r3, [r7, #32]
    47f6:	469c      	mov	ip, r3
    47f8:	4461      	add	r1, ip
    47fa:	0038      	movs	r0, r7
    47fc:	4b2c      	ldr	r3, [pc, #176]	; (48b0 <put_fat+0x134>)
    47fe:	4798      	blx	r3
			if (res != FR_OK) break;
    4800:	2800      	cmp	r0, #0
    4802:	d151      	bne.n	48a8 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    4804:	05e4      	lsls	r4, r4, #23
    4806:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4808:	0936      	lsrs	r6, r6, #4
    480a:	b2f6      	uxtb	r6, r6
    480c:	193c      	adds	r4, r7, r4
    480e:	3430      	adds	r4, #48	; 0x30
    4810:	7026      	strb	r6, [r4, #0]
			break;
    4812:	e7cb      	b.n	47ac <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4814:	18fb      	adds	r3, r7, r3
    4816:	3330      	adds	r3, #48	; 0x30
    4818:	701e      	strb	r6, [r3, #0]
			bc++;
    481a:	4644      	mov	r4, r8
    481c:	3401      	adds	r4, #1
			fs->wflag = 1;
    481e:	2301      	movs	r3, #1
    4820:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4822:	0a61      	lsrs	r1, r4, #9
    4824:	6a3b      	ldr	r3, [r7, #32]
    4826:	469c      	mov	ip, r3
    4828:	4461      	add	r1, ip
    482a:	0038      	movs	r0, r7
    482c:	4b20      	ldr	r3, [pc, #128]	; (48b0 <put_fat+0x134>)
    482e:	4798      	blx	r3
			if (res != FR_OK) break;
    4830:	2800      	cmp	r0, #0
    4832:	d13b      	bne.n	48ac <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    4834:	05e4      	lsls	r4, r4, #23
    4836:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4838:	193b      	adds	r3, r7, r4
    483a:	3330      	adds	r3, #48	; 0x30
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	220f      	movs	r2, #15
    4840:	4393      	bics	r3, r2
    4842:	0536      	lsls	r6, r6, #20
    4844:	0f36      	lsrs	r6, r6, #28
    4846:	431e      	orrs	r6, r3
    4848:	e7e0      	b.n	480c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    484a:	0a09      	lsrs	r1, r1, #8
    484c:	6a03      	ldr	r3, [r0, #32]
    484e:	469c      	mov	ip, r3
    4850:	4461      	add	r1, ip
    4852:	4b17      	ldr	r3, [pc, #92]	; (48b0 <put_fat+0x134>)
    4854:	4798      	blx	r3
    4856:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4858:	d1a8      	bne.n	47ac <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    485a:	0063      	lsls	r3, r4, #1
    485c:	24ff      	movs	r4, #255	; 0xff
    485e:	0064      	lsls	r4, r4, #1
    4860:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    4862:	18fb      	adds	r3, r7, r3
    4864:	3330      	adds	r3, #48	; 0x30
    4866:	701e      	strb	r6, [r3, #0]
    4868:	0a36      	lsrs	r6, r6, #8
    486a:	705e      	strb	r6, [r3, #1]
			break;
    486c:	e79e      	b.n	47ac <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    486e:	09c9      	lsrs	r1, r1, #7
    4870:	6a03      	ldr	r3, [r0, #32]
    4872:	469c      	mov	ip, r3
    4874:	4461      	add	r1, ip
    4876:	4b0e      	ldr	r3, [pc, #56]	; (48b0 <put_fat+0x134>)
    4878:	4798      	blx	r3
    487a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    487c:	d196      	bne.n	47ac <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    487e:	00a4      	lsls	r4, r4, #2
    4880:	23fe      	movs	r3, #254	; 0xfe
    4882:	005b      	lsls	r3, r3, #1
    4884:	401c      	ands	r4, r3
    4886:	0022      	movs	r2, r4
    4888:	3230      	adds	r2, #48	; 0x30
    488a:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    488c:	78d3      	ldrb	r3, [r2, #3]
    488e:	193c      	adds	r4, r7, r4
    4890:	3430      	adds	r4, #48	; 0x30
    4892:	091b      	lsrs	r3, r3, #4
    4894:	071b      	lsls	r3, r3, #28
    4896:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4898:	7026      	strb	r6, [r4, #0]
    489a:	0a33      	lsrs	r3, r6, #8
    489c:	7053      	strb	r3, [r2, #1]
    489e:	0c33      	lsrs	r3, r6, #16
    48a0:	7093      	strb	r3, [r2, #2]
    48a2:	0e36      	lsrs	r6, r6, #24
    48a4:	70d6      	strb	r6, [r2, #3]
			break;
    48a6:	e781      	b.n	47ac <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    48a8:	0005      	movs	r5, r0
    48aa:	e77f      	b.n	47ac <put_fat+0x30>
    48ac:	0005      	movs	r5, r0
    48ae:	e77d      	b.n	47ac <put_fat+0x30>
    48b0:	00004539 	.word	0x00004539

000048b4 <create_chain>:
{
    48b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48b6:	46c6      	mov	lr, r8
    48b8:	b500      	push	{lr}
    48ba:	0005      	movs	r5, r0
    48bc:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    48be:	2900      	cmp	r1, #0
    48c0:	d107      	bne.n	48d2 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    48c2:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    48c4:	2e00      	cmp	r6, #0
    48c6:	d00d      	beq.n	48e4 <create_chain+0x30>
    48c8:	6983      	ldr	r3, [r0, #24]
    48ca:	429e      	cmp	r6, r3
    48cc:	d30b      	bcc.n	48e6 <create_chain+0x32>
    48ce:	2601      	movs	r6, #1
    48d0:	e009      	b.n	48e6 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    48d2:	4b26      	ldr	r3, [pc, #152]	; (496c <create_chain+0xb8>)
    48d4:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    48d6:	2801      	cmp	r0, #1
    48d8:	d93d      	bls.n	4956 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    48da:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    48dc:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    48de:	4298      	cmp	r0, r3
    48e0:	d201      	bcs.n	48e6 <create_chain+0x32>
    48e2:	e03d      	b.n	4960 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    48e4:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    48e6:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    48e8:	4f20      	ldr	r7, [pc, #128]	; (496c <create_chain+0xb8>)
    48ea:	e00a      	b.n	4902 <create_chain+0x4e>
    48ec:	0021      	movs	r1, r4
    48ee:	0028      	movs	r0, r5
    48f0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    48f2:	2800      	cmp	r0, #0
    48f4:	d00d      	beq.n	4912 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    48f6:	1c43      	adds	r3, r0, #1
    48f8:	d032      	beq.n	4960 <create_chain+0xac>
    48fa:	2801      	cmp	r0, #1
    48fc:	d030      	beq.n	4960 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    48fe:	42b4      	cmp	r4, r6
    4900:	d02d      	beq.n	495e <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4902:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4904:	69ab      	ldr	r3, [r5, #24]
    4906:	429c      	cmp	r4, r3
    4908:	d3f0      	bcc.n	48ec <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    490a:	2e01      	cmp	r6, #1
    490c:	d925      	bls.n	495a <create_chain+0xa6>
			ncl = 2;
    490e:	2402      	movs	r4, #2
    4910:	e7ec      	b.n	48ec <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4912:	4a17      	ldr	r2, [pc, #92]	; (4970 <create_chain+0xbc>)
    4914:	0021      	movs	r1, r4
    4916:	0028      	movs	r0, r5
    4918:	4b16      	ldr	r3, [pc, #88]	; (4974 <create_chain+0xc0>)
    491a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    491c:	2800      	cmp	r0, #0
    491e:	d113      	bne.n	4948 <create_chain+0x94>
    4920:	4643      	mov	r3, r8
    4922:	2b00      	cmp	r3, #0
    4924:	d109      	bne.n	493a <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    4926:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4928:	692b      	ldr	r3, [r5, #16]
    492a:	1c5a      	adds	r2, r3, #1
    492c:	d01b      	beq.n	4966 <create_chain+0xb2>
			fs->free_clust--;
    492e:	3b01      	subs	r3, #1
    4930:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4932:	2301      	movs	r3, #1
    4934:	716b      	strb	r3, [r5, #5]
    4936:	0020      	movs	r0, r4
    4938:	e012      	b.n	4960 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    493a:	0022      	movs	r2, r4
    493c:	4641      	mov	r1, r8
    493e:	0028      	movs	r0, r5
    4940:	4b0c      	ldr	r3, [pc, #48]	; (4974 <create_chain+0xc0>)
    4942:	4798      	blx	r3
	if (res == FR_OK) {
    4944:	2800      	cmp	r0, #0
    4946:	d0ee      	beq.n	4926 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4948:	3801      	subs	r0, #1
    494a:	4242      	negs	r2, r0
    494c:	4142      	adcs	r2, r0
    494e:	4250      	negs	r0, r2
    4950:	2301      	movs	r3, #1
    4952:	4318      	orrs	r0, r3
    4954:	e004      	b.n	4960 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4956:	2001      	movs	r0, #1
    4958:	e002      	b.n	4960 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    495a:	2000      	movs	r0, #0
    495c:	e000      	b.n	4960 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    495e:	2000      	movs	r0, #0
}
    4960:	bc04      	pop	{r2}
    4962:	4690      	mov	r8, r2
    4964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4966:	0020      	movs	r0, r4
    4968:	e7fa      	b.n	4960 <create_chain+0xac>
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	000045d9 	.word	0x000045d9
    4970:	0fffffff 	.word	0x0fffffff
    4974:	0000477d 	.word	0x0000477d

00004978 <remove_chain>:
{
    4978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    497a:	46ce      	mov	lr, r9
    497c:	4647      	mov	r7, r8
    497e:	b580      	push	{r7, lr}
    4980:	0004      	movs	r4, r0
    4982:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4984:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4986:	2901      	cmp	r1, #1
    4988:	d902      	bls.n	4990 <remove_chain+0x18>
    498a:	69a3      	ldr	r3, [r4, #24]
    498c:	4299      	cmp	r1, r3
    498e:	d303      	bcc.n	4998 <remove_chain+0x20>
}
    4990:	bc0c      	pop	{r2, r3}
    4992:	4690      	mov	r8, r2
    4994:	4699      	mov	r9, r3
    4996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4998:	4f13      	ldr	r7, [pc, #76]	; (49e8 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    499a:	4b14      	ldr	r3, [pc, #80]	; (49ec <remove_chain+0x74>)
    499c:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    499e:	2301      	movs	r3, #1
    49a0:	4699      	mov	r9, r3
    49a2:	e003      	b.n	49ac <remove_chain+0x34>
    49a4:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    49a6:	69a3      	ldr	r3, [r4, #24]
    49a8:	42b3      	cmp	r3, r6
    49aa:	d9f1      	bls.n	4990 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    49ac:	0029      	movs	r1, r5
    49ae:	0020      	movs	r0, r4
    49b0:	47b8      	blx	r7
    49b2:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    49b4:	d011      	beq.n	49da <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    49b6:	2801      	cmp	r0, #1
    49b8:	d011      	beq.n	49de <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    49ba:	1c43      	adds	r3, r0, #1
    49bc:	d011      	beq.n	49e2 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    49be:	2200      	movs	r2, #0
    49c0:	0029      	movs	r1, r5
    49c2:	0020      	movs	r0, r4
    49c4:	47c0      	blx	r8
			if (res != FR_OK) break;
    49c6:	2800      	cmp	r0, #0
    49c8:	d1e2      	bne.n	4990 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    49ca:	6923      	ldr	r3, [r4, #16]
    49cc:	1c5a      	adds	r2, r3, #1
    49ce:	d0e9      	beq.n	49a4 <remove_chain+0x2c>
				fs->free_clust++;
    49d0:	3301      	adds	r3, #1
    49d2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    49d4:	464b      	mov	r3, r9
    49d6:	7163      	strb	r3, [r4, #5]
    49d8:	e7e4      	b.n	49a4 <remove_chain+0x2c>
    49da:	2000      	movs	r0, #0
    49dc:	e7d8      	b.n	4990 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    49de:	2002      	movs	r0, #2
    49e0:	e7d6      	b.n	4990 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    49e2:	2001      	movs	r0, #1
    49e4:	e7d4      	b.n	4990 <remove_chain+0x18>
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	000045d9 	.word	0x000045d9
    49ec:	0000477d 	.word	0x0000477d

000049f0 <dir_next>:
{
    49f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49f2:	46d6      	mov	lr, sl
    49f4:	4647      	mov	r7, r8
    49f6:	b580      	push	{r7, lr}
    49f8:	0006      	movs	r6, r0
    49fa:	000d      	movs	r5, r1
	i = dj->index + 1;
    49fc:	88c4      	ldrh	r4, [r0, #6]
    49fe:	3401      	adds	r4, #1
    4a00:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4a02:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4a04:	2c00      	cmp	r4, #0
    4a06:	d103      	bne.n	4a10 <dir_next+0x20>
}
    4a08:	bc0c      	pop	{r2, r3}
    4a0a:	4690      	mov	r8, r2
    4a0c:	469a      	mov	sl, r3
    4a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4a10:	6933      	ldr	r3, [r6, #16]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d0f8      	beq.n	4a08 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4a16:	270f      	movs	r7, #15
    4a18:	4027      	ands	r7, r4
    4a1a:	d10f      	bne.n	4a3c <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4a1c:	3301      	adds	r3, #1
    4a1e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4a20:	68f1      	ldr	r1, [r6, #12]
    4a22:	2900      	cmp	r1, #0
    4a24:	d104      	bne.n	4a30 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4a26:	6833      	ldr	r3, [r6, #0]
    4a28:	891b      	ldrh	r3, [r3, #8]
    4a2a:	42a3      	cmp	r3, r4
    4a2c:	d9ec      	bls.n	4a08 <dir_next+0x18>
    4a2e:	e005      	b.n	4a3c <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4a30:	6830      	ldr	r0, [r6, #0]
    4a32:	7883      	ldrb	r3, [r0, #2]
    4a34:	3b01      	subs	r3, #1
    4a36:	0922      	lsrs	r2, r4, #4
    4a38:	421a      	tst	r2, r3
    4a3a:	d007      	beq.n	4a4c <dir_next+0x5c>
	dj->index = i;
    4a3c:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4a3e:	6833      	ldr	r3, [r6, #0]
    4a40:	3330      	adds	r3, #48	; 0x30
    4a42:	017f      	lsls	r7, r7, #5
    4a44:	19df      	adds	r7, r3, r7
    4a46:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4a48:	2000      	movs	r0, #0
    4a4a:	e7dd      	b.n	4a08 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4a4c:	4b2c      	ldr	r3, [pc, #176]	; (4b00 <dir_next+0x110>)
    4a4e:	4798      	blx	r3
    4a50:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    4a52:	2002      	movs	r0, #2
    4a54:	4643      	mov	r3, r8
    4a56:	2b01      	cmp	r3, #1
    4a58:	d9d6      	bls.n	4a08 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4a5a:	3301      	adds	r3, #1
    4a5c:	d04b      	beq.n	4af6 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4a5e:	6833      	ldr	r3, [r6, #0]
    4a60:	699a      	ldr	r2, [r3, #24]
    4a62:	4590      	cmp	r8, r2
    4a64:	d33f      	bcc.n	4ae6 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4a66:	3002      	adds	r0, #2
    4a68:	2d00      	cmp	r5, #0
    4a6a:	d0cd      	beq.n	4a08 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4a6c:	68f1      	ldr	r1, [r6, #12]
    4a6e:	0018      	movs	r0, r3
    4a70:	4b24      	ldr	r3, [pc, #144]	; (4b04 <dir_next+0x114>)
    4a72:	4798      	blx	r3
    4a74:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4a76:	2007      	movs	r0, #7
    4a78:	4643      	mov	r3, r8
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d0c4      	beq.n	4a08 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4a7e:	3805      	subs	r0, #5
    4a80:	2b01      	cmp	r3, #1
    4a82:	d0c1      	beq.n	4a08 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4a84:	3801      	subs	r0, #1
    4a86:	3301      	adds	r3, #1
    4a88:	d0be      	beq.n	4a08 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4a8a:	2100      	movs	r1, #0
    4a8c:	6830      	ldr	r0, [r6, #0]
    4a8e:	4b1e      	ldr	r3, [pc, #120]	; (4b08 <dir_next+0x118>)
    4a90:	4798      	blx	r3
    4a92:	0003      	movs	r3, r0
    4a94:	2001      	movs	r0, #1
    4a96:	2b00      	cmp	r3, #0
    4a98:	d1b6      	bne.n	4a08 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4a9a:	6830      	ldr	r0, [r6, #0]
    4a9c:	3030      	adds	r0, #48	; 0x30
    4a9e:	2280      	movs	r2, #128	; 0x80
    4aa0:	0092      	lsls	r2, r2, #2
    4aa2:	2100      	movs	r1, #0
    4aa4:	4b19      	ldr	r3, [pc, #100]	; (4b0c <dir_next+0x11c>)
    4aa6:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4aa8:	6835      	ldr	r5, [r6, #0]
    4aaa:	4641      	mov	r1, r8
    4aac:	0028      	movs	r0, r5
    4aae:	4b18      	ldr	r3, [pc, #96]	; (4b10 <dir_next+0x120>)
    4ab0:	4798      	blx	r3
    4ab2:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4ab4:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4ab6:	2301      	movs	r3, #1
    4ab8:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4aba:	6833      	ldr	r3, [r6, #0]
    4abc:	789a      	ldrb	r2, [r3, #2]
    4abe:	42aa      	cmp	r2, r5
    4ac0:	d90e      	bls.n	4ae0 <dir_next+0xf0>
						dj->fs->wflag = 1;
    4ac2:	4652      	mov	r2, sl
    4ac4:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4ac6:	2100      	movs	r1, #0
    4ac8:	6830      	ldr	r0, [r6, #0]
    4aca:	4b0f      	ldr	r3, [pc, #60]	; (4b08 <dir_next+0x118>)
    4acc:	4798      	blx	r3
    4ace:	2800      	cmp	r0, #0
    4ad0:	d113      	bne.n	4afa <dir_next+0x10a>
						dj->fs->winsect++;
    4ad2:	6832      	ldr	r2, [r6, #0]
    4ad4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4ad6:	3301      	adds	r3, #1
    4ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4ada:	3501      	adds	r5, #1
    4adc:	b2ed      	uxtb	r5, r5
    4ade:	e7ec      	b.n	4aba <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ae2:	1b52      	subs	r2, r2, r5
    4ae4:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4ae6:	4643      	mov	r3, r8
    4ae8:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4aea:	4641      	mov	r1, r8
    4aec:	6830      	ldr	r0, [r6, #0]
    4aee:	4b08      	ldr	r3, [pc, #32]	; (4b10 <dir_next+0x120>)
    4af0:	4798      	blx	r3
    4af2:	6130      	str	r0, [r6, #16]
    4af4:	e7a2      	b.n	4a3c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4af6:	2001      	movs	r0, #1
    4af8:	e786      	b.n	4a08 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4afa:	2001      	movs	r0, #1
    4afc:	e784      	b.n	4a08 <dir_next+0x18>
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	000045d9 	.word	0x000045d9
    4b04:	000048b5 	.word	0x000048b5
    4b08:	00004539 	.word	0x00004539
    4b0c:	0000406d 	.word	0x0000406d
    4b10:	0000407f 	.word	0x0000407f

00004b14 <dir_find>:
{
    4b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b16:	46de      	mov	lr, fp
    4b18:	4657      	mov	r7, sl
    4b1a:	464e      	mov	r6, r9
    4b1c:	4645      	mov	r5, r8
    4b1e:	b5e0      	push	{r5, r6, r7, lr}
    4b20:	b083      	sub	sp, #12
    4b22:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4b24:	2100      	movs	r1, #0
    4b26:	4b5a      	ldr	r3, [pc, #360]	; (4c90 <dir_find+0x17c>)
    4b28:	4798      	blx	r3
    4b2a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4b2c:	d000      	beq.n	4b30 <dir_find+0x1c>
    4b2e:	e09e      	b.n	4c6e <dir_find+0x15a>
    4b30:	23ff      	movs	r3, #255	; 0xff
    4b32:	4699      	mov	r9, r3
    4b34:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4b36:	4b57      	ldr	r3, [pc, #348]	; (4c94 <dir_find+0x180>)
    4b38:	469b      	mov	fp, r3
    4b3a:	e01b      	b.n	4b74 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4b3c:	2b0f      	cmp	r3, #15
    4b3e:	d030      	beq.n	4ba2 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4b40:	4653      	mov	r3, sl
    4b42:	2b00      	cmp	r3, #0
    4b44:	d105      	bne.n	4b52 <dir_find+0x3e>
    4b46:	0020      	movs	r0, r4
    4b48:	4b53      	ldr	r3, [pc, #332]	; (4c98 <dir_find+0x184>)
    4b4a:	4798      	blx	r3
    4b4c:	4581      	cmp	r9, r0
    4b4e:	d100      	bne.n	4b52 <dir_find+0x3e>
    4b50:	e08d      	b.n	4c6e <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4b52:	2301      	movs	r3, #1
    4b54:	425b      	negs	r3, r3
    4b56:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4b58:	69a8      	ldr	r0, [r5, #24]
    4b5a:	7ac3      	ldrb	r3, [r0, #11]
    4b5c:	07db      	lsls	r3, r3, #31
    4b5e:	d400      	bmi.n	4b62 <dir_find+0x4e>
    4b60:	e07d      	b.n	4c5e <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4b62:	23ff      	movs	r3, #255	; 0xff
    4b64:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4b66:	2100      	movs	r1, #0
    4b68:	0028      	movs	r0, r5
    4b6a:	4b4c      	ldr	r3, [pc, #304]	; (4c9c <dir_find+0x188>)
    4b6c:	4798      	blx	r3
    4b6e:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4b70:	d000      	beq.n	4b74 <dir_find+0x60>
    4b72:	e07c      	b.n	4c6e <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4b74:	6929      	ldr	r1, [r5, #16]
    4b76:	6828      	ldr	r0, [r5, #0]
    4b78:	47d8      	blx	fp
    4b7a:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4b7c:	d177      	bne.n	4c6e <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4b7e:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4b80:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4b82:	2e00      	cmp	r6, #0
    4b84:	d100      	bne.n	4b88 <dir_find+0x74>
    4b86:	e080      	b.n	4c8a <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4b88:	7ae2      	ldrb	r2, [r4, #11]
    4b8a:	233f      	movs	r3, #63	; 0x3f
    4b8c:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4b8e:	2ee5      	cmp	r6, #229	; 0xe5
    4b90:	d100      	bne.n	4b94 <dir_find+0x80>
    4b92:	e077      	b.n	4c84 <dir_find+0x170>
    4b94:	0712      	lsls	r2, r2, #28
    4b96:	d5d1      	bpl.n	4b3c <dir_find+0x28>
    4b98:	2b0f      	cmp	r3, #15
    4b9a:	d002      	beq.n	4ba2 <dir_find+0x8e>
			ord = 0xFF;
    4b9c:	23ff      	movs	r3, #255	; 0xff
    4b9e:	469a      	mov	sl, r3
    4ba0:	e7e1      	b.n	4b66 <dir_find+0x52>
				if (dj->lfn) {
    4ba2:	69ef      	ldr	r7, [r5, #28]
    4ba4:	2f00      	cmp	r7, #0
    4ba6:	d0de      	beq.n	4b66 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4ba8:	0673      	lsls	r3, r6, #25
    4baa:	d518      	bpl.n	4bde <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4bac:	7b63      	ldrb	r3, [r4, #13]
    4bae:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4bb0:	2340      	movs	r3, #64	; 0x40
    4bb2:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4bb4:	88eb      	ldrh	r3, [r5, #6]
    4bb6:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4bb8:	7b63      	ldrb	r3, [r4, #13]
    4bba:	9300      	str	r3, [sp, #0]
    4bbc:	22ff      	movs	r2, #255	; 0xff
    4bbe:	4692      	mov	sl, r2
    4bc0:	454b      	cmp	r3, r9
    4bc2:	d1d0      	bne.n	4b66 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4bc4:	7823      	ldrb	r3, [r4, #0]
    4bc6:	3abf      	subs	r2, #191	; 0xbf
    4bc8:	4393      	bics	r3, r2
    4bca:	3b01      	subs	r3, #1
    4bcc:	005a      	lsls	r2, r3, #1
    4bce:	18d2      	adds	r2, r2, r3
    4bd0:	0092      	lsls	r2, r2, #2
    4bd2:	4692      	mov	sl, r2
    4bd4:	449a      	add	sl, r3
	s = 0; wc = 1;
    4bd6:	2201      	movs	r2, #1
    4bd8:	2300      	movs	r3, #0
    4bda:	4699      	mov	r9, r3
    4bdc:	e01d      	b.n	4c1a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4bde:	45b2      	cmp	sl, r6
    4be0:	d0ea      	beq.n	4bb8 <dir_find+0xa4>
    4be2:	23ff      	movs	r3, #255	; 0xff
    4be4:	469a      	mov	sl, r3
    4be6:	e7be      	b.n	4b66 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4be8:	4b2d      	ldr	r3, [pc, #180]	; (4ca0 <dir_find+0x18c>)
    4bea:	4798      	blx	r3
    4bec:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4bee:	4653      	mov	r3, sl
    4bf0:	2bfe      	cmp	r3, #254	; 0xfe
    4bf2:	d81f      	bhi.n	4c34 <dir_find+0x120>
    4bf4:	2301      	movs	r3, #1
    4bf6:	4453      	add	r3, sl
    4bf8:	4698      	mov	r8, r3
    4bfa:	4653      	mov	r3, sl
    4bfc:	005b      	lsls	r3, r3, #1
    4bfe:	5bd8      	ldrh	r0, [r3, r7]
    4c00:	4b27      	ldr	r3, [pc, #156]	; (4ca0 <dir_find+0x18c>)
    4c02:	4798      	blx	r3
    4c04:	0002      	movs	r2, r0
    4c06:	9b01      	ldr	r3, [sp, #4]
    4c08:	4283      	cmp	r3, r0
    4c0a:	d113      	bne.n	4c34 <dir_find+0x120>
    4c0c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4c0e:	2301      	movs	r3, #1
    4c10:	469c      	mov	ip, r3
    4c12:	44e1      	add	r9, ip
    4c14:	464b      	mov	r3, r9
    4c16:	2b0d      	cmp	r3, #13
    4c18:	d011      	beq.n	4c3e <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4c1a:	4b22      	ldr	r3, [pc, #136]	; (4ca4 <dir_find+0x190>)
    4c1c:	4649      	mov	r1, r9
    4c1e:	5cc9      	ldrb	r1, [r1, r3]
    4c20:	1863      	adds	r3, r4, r1
    4c22:	785b      	ldrb	r3, [r3, #1]
    4c24:	021b      	lsls	r3, r3, #8
    4c26:	5c60      	ldrb	r0, [r4, r1]
    4c28:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4c2a:	2a00      	cmp	r2, #0
    4c2c:	d1dc      	bne.n	4be8 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4c2e:	4b1e      	ldr	r3, [pc, #120]	; (4ca8 <dir_find+0x194>)
    4c30:	4298      	cmp	r0, r3
    4c32:	d0ec      	beq.n	4c0e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4c34:	9b00      	ldr	r3, [sp, #0]
    4c36:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4c38:	23ff      	movs	r3, #255	; 0xff
    4c3a:	469a      	mov	sl, r3
    4c3c:	e793      	b.n	4b66 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4c3e:	7823      	ldrb	r3, [r4, #0]
    4c40:	065b      	lsls	r3, r3, #25
    4c42:	d506      	bpl.n	4c52 <dir_find+0x13e>
    4c44:	2a00      	cmp	r2, #0
    4c46:	d004      	beq.n	4c52 <dir_find+0x13e>
    4c48:	4653      	mov	r3, sl
    4c4a:	005b      	lsls	r3, r3, #1
    4c4c:	5bdb      	ldrh	r3, [r3, r7]
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d1f0      	bne.n	4c34 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4c52:	3e01      	subs	r6, #1
    4c54:	b2f3      	uxtb	r3, r6
    4c56:	469a      	mov	sl, r3
    4c58:	9b00      	ldr	r3, [sp, #0]
    4c5a:	4699      	mov	r9, r3
    4c5c:	e783      	b.n	4b66 <dir_find+0x52>
    4c5e:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4c60:	5ce1      	ldrb	r1, [r4, r3]
    4c62:	5cc2      	ldrb	r2, [r0, r3]
    4c64:	4291      	cmp	r1, r2
    4c66:	d10a      	bne.n	4c7e <dir_find+0x16a>
    4c68:	3301      	adds	r3, #1
    4c6a:	2b0b      	cmp	r3, #11
    4c6c:	d1f8      	bne.n	4c60 <dir_find+0x14c>
}
    4c6e:	0038      	movs	r0, r7
    4c70:	b003      	add	sp, #12
    4c72:	bc3c      	pop	{r2, r3, r4, r5}
    4c74:	4690      	mov	r8, r2
    4c76:	4699      	mov	r9, r3
    4c78:	46a2      	mov	sl, r4
    4c7a:	46ab      	mov	fp, r5
    4c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4c7e:	23ff      	movs	r3, #255	; 0xff
    4c80:	469a      	mov	sl, r3
    4c82:	e770      	b.n	4b66 <dir_find+0x52>
			ord = 0xFF;
    4c84:	23ff      	movs	r3, #255	; 0xff
    4c86:	469a      	mov	sl, r3
    4c88:	e76d      	b.n	4b66 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4c8a:	2704      	movs	r7, #4
    4c8c:	e7ef      	b.n	4c6e <dir_find+0x15a>
    4c8e:	46c0      	nop			; (mov r8, r8)
    4c90:	000046d5 	.word	0x000046d5
    4c94:	00004539 	.word	0x00004539
    4c98:	00004097 	.word	0x00004097
    4c9c:	000049f1 	.word	0x000049f1
    4ca0:	00005a2d 	.word	0x00005a2d
    4ca4:	0000a5c4 	.word	0x0000a5c4
    4ca8:	0000ffff 	.word	0x0000ffff

00004cac <dir_register>:
{
    4cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cae:	46de      	mov	lr, fp
    4cb0:	4657      	mov	r7, sl
    4cb2:	464e      	mov	r6, r9
    4cb4:	4645      	mov	r5, r8
    4cb6:	b5e0      	push	{r5, r6, r7, lr}
    4cb8:	b089      	sub	sp, #36	; 0x24
    4cba:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4cbc:	6987      	ldr	r7, [r0, #24]
    4cbe:	69c3      	ldr	r3, [r0, #28]
    4cc0:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4cc2:	ad05      	add	r5, sp, #20
    4cc4:	220c      	movs	r2, #12
    4cc6:	0039      	movs	r1, r7
    4cc8:	0028      	movs	r0, r5
    4cca:	4ba7      	ldr	r3, [pc, #668]	; (4f68 <dir_register+0x2bc>)
    4ccc:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4cce:	7aeb      	ldrb	r3, [r5, #11]
    4cd0:	07db      	lsls	r3, r3, #31
    4cd2:	d400      	bmi.n	4cd6 <dir_register+0x2a>
    4cd4:	e070      	b.n	4db8 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4cd6:	2300      	movs	r3, #0
    4cd8:	72fb      	strb	r3, [r7, #11]
    4cda:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4cdc:	220b      	movs	r2, #11
    4cde:	a905      	add	r1, sp, #20
    4ce0:	0038      	movs	r0, r7
    4ce2:	4ba1      	ldr	r3, [pc, #644]	; (4f68 <dir_register+0x2bc>)
    4ce4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4ce6:	2301      	movs	r3, #1
		ns[i--] = c;
    4ce8:	ad03      	add	r5, sp, #12
    4cea:	001e      	movs	r6, r3
    4cec:	46a0      	mov	r8, r4
    4cee:	e049      	b.n	4d84 <dir_register+0xd8>
    4cf0:	3801      	subs	r0, #1
    4cf2:	1829      	adds	r1, r5, r0
    4cf4:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4cf6:	091b      	lsrs	r3, r3, #4
    4cf8:	b29b      	uxth	r3, r3
	} while (seq);
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d007      	beq.n	4d0e <dir_register+0x62>
		c = (seq % 16) + '0';
    4cfe:	0021      	movs	r1, r4
    4d00:	4019      	ands	r1, r3
    4d02:	000a      	movs	r2, r1
    4d04:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4d06:	2a39      	cmp	r2, #57	; 0x39
    4d08:	d9f2      	bls.n	4cf0 <dir_register+0x44>
    4d0a:	3207      	adds	r2, #7
    4d0c:	e7f0      	b.n	4cf0 <dir_register+0x44>
	ns[i] = '~';
    4d0e:	337e      	adds	r3, #126	; 0x7e
    4d10:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4d12:	2800      	cmp	r0, #0
    4d14:	d00a      	beq.n	4d2c <dir_register+0x80>
    4d16:	783b      	ldrb	r3, [r7, #0]
    4d18:	2b20      	cmp	r3, #32
    4d1a:	d009      	beq.n	4d30 <dir_register+0x84>
    4d1c:	2300      	movs	r3, #0
    4d1e:	3301      	adds	r3, #1
    4d20:	4298      	cmp	r0, r3
    4d22:	d007      	beq.n	4d34 <dir_register+0x88>
    4d24:	5cfa      	ldrb	r2, [r7, r3]
    4d26:	2a20      	cmp	r2, #32
    4d28:	d1f9      	bne.n	4d1e <dir_register+0x72>
    4d2a:	e009      	b.n	4d40 <dir_register+0x94>
    4d2c:	0003      	movs	r3, r0
    4d2e:	e007      	b.n	4d40 <dir_register+0x94>
    4d30:	2300      	movs	r3, #0
    4d32:	e005      	b.n	4d40 <dir_register+0x94>
    4d34:	0003      	movs	r3, r0
    4d36:	e003      	b.n	4d40 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4d38:	54fa      	strb	r2, [r7, r3]
    4d3a:	3301      	adds	r3, #1
	} while (j < 8);
    4d3c:	2b07      	cmp	r3, #7
    4d3e:	d805      	bhi.n	4d4c <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4d40:	2220      	movs	r2, #32
    4d42:	2807      	cmp	r0, #7
    4d44:	d8f8      	bhi.n	4d38 <dir_register+0x8c>
    4d46:	5c2a      	ldrb	r2, [r5, r0]
    4d48:	3001      	adds	r0, #1
    4d4a:	e7f5      	b.n	4d38 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4d4c:	4640      	mov	r0, r8
    4d4e:	4b87      	ldr	r3, [pc, #540]	; (4f6c <dir_register+0x2c0>)
    4d50:	4798      	blx	r3
			if (res != FR_OK) break;
    4d52:	2800      	cmp	r0, #0
    4d54:	d11c      	bne.n	4d90 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4d56:	3601      	adds	r6, #1
    4d58:	b2b6      	uxth	r6, r6
    4d5a:	2e64      	cmp	r6, #100	; 0x64
    4d5c:	d015      	beq.n	4d8a <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4d5e:	220b      	movs	r2, #11
    4d60:	a905      	add	r1, sp, #20
    4d62:	0038      	movs	r0, r7
    4d64:	4b80      	ldr	r3, [pc, #512]	; (4f68 <dir_register+0x2bc>)
    4d66:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4d68:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4d6a:	2e05      	cmp	r6, #5
    4d6c:	d90a      	bls.n	4d84 <dir_register+0xd8>
    4d6e:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4d70:	085a      	lsrs	r2, r3, #1
    4d72:	03db      	lsls	r3, r3, #15
    4d74:	4313      	orrs	r3, r2
    4d76:	880a      	ldrh	r2, [r1, #0]
    4d78:	189b      	adds	r3, r3, r2
    4d7a:	b29b      	uxth	r3, r3
    4d7c:	3102      	adds	r1, #2
    4d7e:	880a      	ldrh	r2, [r1, #0]
    4d80:	2a00      	cmp	r2, #0
    4d82:	d1f5      	bne.n	4d70 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4d84:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4d86:	240f      	movs	r4, #15
    4d88:	e7b9      	b.n	4cfe <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4d8a:	2307      	movs	r3, #7
    4d8c:	4698      	mov	r8, r3
    4d8e:	e006      	b.n	4d9e <dir_register+0xf2>
    4d90:	4644      	mov	r4, r8
    4d92:	4680      	mov	r8, r0
    4d94:	2e64      	cmp	r6, #100	; 0x64
    4d96:	d100      	bne.n	4d9a <dir_register+0xee>
    4d98:	e0a5      	b.n	4ee6 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4d9a:	2804      	cmp	r0, #4
    4d9c:	d007      	beq.n	4dae <dir_register+0x102>
}
    4d9e:	4640      	mov	r0, r8
    4da0:	b009      	add	sp, #36	; 0x24
    4da2:	bc3c      	pop	{r2, r3, r4, r5}
    4da4:	4690      	mov	r8, r2
    4da6:	4699      	mov	r9, r3
    4da8:	46a2      	mov	sl, r4
    4daa:	46ab      	mov	fp, r5
    4dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4dae:	ab05      	add	r3, sp, #20
    4db0:	7adb      	ldrb	r3, [r3, #11]
    4db2:	72fb      	strb	r3, [r7, #11]
    4db4:	4653      	mov	r3, sl
    4db6:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4db8:	ab05      	add	r3, sp, #20
    4dba:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4dbc:	2201      	movs	r2, #1
    4dbe:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4dc0:	079b      	lsls	r3, r3, #30
    4dc2:	d511      	bpl.n	4de8 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4dc4:	4653      	mov	r3, sl
    4dc6:	881b      	ldrh	r3, [r3, #0]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d01b      	beq.n	4e04 <dir_register+0x158>
    4dcc:	2000      	movs	r0, #0
    4dce:	4652      	mov	r2, sl
    4dd0:	3001      	adds	r0, #1
    4dd2:	b280      	uxth	r0, r0
    4dd4:	0043      	lsls	r3, r0, #1
    4dd6:	5a9b      	ldrh	r3, [r3, r2]
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d1f9      	bne.n	4dd0 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4ddc:	3019      	adds	r0, #25
    4dde:	210d      	movs	r1, #13
    4de0:	4b63      	ldr	r3, [pc, #396]	; (4f70 <dir_register+0x2c4>)
    4de2:	4798      	blx	r3
    4de4:	b283      	uxth	r3, r0
    4de6:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4de8:	2100      	movs	r1, #0
    4dea:	0020      	movs	r0, r4
    4dec:	4b61      	ldr	r3, [pc, #388]	; (4f74 <dir_register+0x2c8>)
    4dee:	4798      	blx	r3
    4df0:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4df2:	2800      	cmp	r0, #0
    4df4:	d1d3      	bne.n	4d9e <dir_register+0xf2>
    4df6:	4682      	mov	sl, r0
    4df8:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4dfa:	4f5f      	ldr	r7, [pc, #380]	; (4f78 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4dfc:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4dfe:	4b5f      	ldr	r3, [pc, #380]	; (4f7c <dir_register+0x2d0>)
    4e00:	4699      	mov	r9, r3
    4e02:	e00b      	b.n	4e1c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4e04:	2000      	movs	r0, #0
    4e06:	e7e9      	b.n	4ddc <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4e08:	1c6b      	adds	r3, r5, #1
    4e0a:	b29b      	uxth	r3, r3
    4e0c:	459b      	cmp	fp, r3
    4e0e:	d06d      	beq.n	4eec <dir_register+0x240>
    4e10:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4e12:	2101      	movs	r1, #1
    4e14:	0020      	movs	r0, r4
    4e16:	47c8      	blx	r9
	} while (res == FR_OK);
    4e18:	2800      	cmp	r0, #0
    4e1a:	d112      	bne.n	4e42 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4e1c:	6921      	ldr	r1, [r4, #16]
    4e1e:	6820      	ldr	r0, [r4, #0]
    4e20:	47b8      	blx	r7
		if (res != FR_OK) break;
    4e22:	2800      	cmp	r0, #0
    4e24:	d000      	beq.n	4e28 <dir_register+0x17c>
    4e26:	e098      	b.n	4f5a <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4e28:	6963      	ldr	r3, [r4, #20]
    4e2a:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4e2c:	2be5      	cmp	r3, #229	; 0xe5
    4e2e:	d001      	beq.n	4e34 <dir_register+0x188>
    4e30:	2b00      	cmp	r3, #0
    4e32:	d104      	bne.n	4e3e <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    4e34:	2d00      	cmp	r5, #0
    4e36:	d1e7      	bne.n	4e08 <dir_register+0x15c>
    4e38:	88e3      	ldrh	r3, [r4, #6]
    4e3a:	469a      	mov	sl, r3
    4e3c:	e7e4      	b.n	4e08 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4e3e:	0035      	movs	r5, r6
    4e40:	e7e7      	b.n	4e12 <dir_register+0x166>
    4e42:	4680      	mov	r8, r0
    4e44:	e7ab      	b.n	4d9e <dir_register+0xf2>
		res = dir_sdi(dj, is);
    4e46:	4651      	mov	r1, sl
    4e48:	0020      	movs	r0, r4
    4e4a:	4b4a      	ldr	r3, [pc, #296]	; (4f74 <dir_register+0x2c8>)
    4e4c:	4798      	blx	r3
    4e4e:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4e50:	2800      	cmp	r0, #0
    4e52:	d1a4      	bne.n	4d9e <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4e54:	69a0      	ldr	r0, [r4, #24]
    4e56:	4b4a      	ldr	r3, [pc, #296]	; (4f80 <dir_register+0x2d4>)
    4e58:	4798      	blx	r3
    4e5a:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4e5c:	46a8      	mov	r8, r5
    4e5e:	e01f      	b.n	4ea0 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4e60:	0022      	movs	r2, r4
    4e62:	e067      	b.n	4f34 <dir_register+0x288>
    4e64:	465e      	mov	r6, fp
    4e66:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4e68:	4946      	ldr	r1, [pc, #280]	; (4f84 <dir_register+0x2d8>)
    4e6a:	428b      	cmp	r3, r1
    4e6c:	d003      	beq.n	4e76 <dir_register+0x1ca>
    4e6e:	0052      	lsls	r2, r2, #1
    4e70:	5b93      	ldrh	r3, [r2, r6]
    4e72:	2b00      	cmp	r3, #0
    4e74:	d103      	bne.n	4e7e <dir_register+0x1d2>
    4e76:	2340      	movs	r3, #64	; 0x40
    4e78:	464a      	mov	r2, r9
    4e7a:	431a      	orrs	r2, r3
    4e7c:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4e7e:	464b      	mov	r3, r9
    4e80:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    4e82:	2301      	movs	r3, #1
    4e84:	6822      	ldr	r2, [r4, #0]
    4e86:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4e88:	2100      	movs	r1, #0
    4e8a:	0020      	movs	r0, r4
    4e8c:	4b3b      	ldr	r3, [pc, #236]	; (4f7c <dir_register+0x2d0>)
    4e8e:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4e90:	2800      	cmp	r0, #0
    4e92:	d166      	bne.n	4f62 <dir_register+0x2b6>
    4e94:	4645      	mov	r5, r8
    4e96:	3d01      	subs	r5, #1
    4e98:	b2ab      	uxth	r3, r5
    4e9a:	4698      	mov	r8, r3
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d027      	beq.n	4ef0 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4ea0:	6921      	ldr	r1, [r4, #16]
    4ea2:	6820      	ldr	r0, [r4, #0]
    4ea4:	4b34      	ldr	r3, [pc, #208]	; (4f78 <dir_register+0x2cc>)
    4ea6:	4798      	blx	r3
				if (res != FR_OK) break;
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d158      	bne.n	4f5e <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4eac:	69e6      	ldr	r6, [r4, #28]
    4eae:	6960      	ldr	r0, [r4, #20]
    4eb0:	4643      	mov	r3, r8
    4eb2:	466a      	mov	r2, sp
    4eb4:	70d3      	strb	r3, [r2, #3]
    4eb6:	78d3      	ldrb	r3, [r2, #3]
    4eb8:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4eba:	7913      	ldrb	r3, [r2, #4]
    4ebc:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4ebe:	230f      	movs	r3, #15
    4ec0:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    4ec2:	2300      	movs	r3, #0
    4ec4:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4ec6:	7683      	strb	r3, [r0, #26]
    4ec8:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4eca:	464b      	mov	r3, r9
    4ecc:	3b01      	subs	r3, #1
    4ece:	005a      	lsls	r2, r3, #1
    4ed0:	18d2      	adds	r2, r2, r3
    4ed2:	0092      	lsls	r2, r2, #2
    4ed4:	18d2      	adds	r2, r2, r3
    4ed6:	492c      	ldr	r1, [pc, #176]	; (4f88 <dir_register+0x2dc>)
    4ed8:	000d      	movs	r5, r1
    4eda:	350d      	adds	r5, #13
	s = wc = 0;
    4edc:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4ede:	4f29      	ldr	r7, [pc, #164]	; (4f84 <dir_register+0x2d8>)
    4ee0:	46b3      	mov	fp, r6
    4ee2:	46a4      	mov	ip, r4
    4ee4:	e029      	b.n	4f3a <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4ee6:	2307      	movs	r3, #7
    4ee8:	4698      	mov	r8, r3
    4eea:	e758      	b.n	4d9e <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4eec:	2b01      	cmp	r3, #1
    4eee:	d8aa      	bhi.n	4e46 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4ef0:	6921      	ldr	r1, [r4, #16]
    4ef2:	6820      	ldr	r0, [r4, #0]
    4ef4:	4b20      	ldr	r3, [pc, #128]	; (4f78 <dir_register+0x2cc>)
    4ef6:	4798      	blx	r3
    4ef8:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4efa:	2800      	cmp	r0, #0
    4efc:	d000      	beq.n	4f00 <dir_register+0x254>
    4efe:	e74e      	b.n	4d9e <dir_register+0xf2>
			dir = dj->dir;
    4f00:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    4f02:	2220      	movs	r2, #32
    4f04:	2100      	movs	r1, #0
    4f06:	0028      	movs	r0, r5
    4f08:	4b20      	ldr	r3, [pc, #128]	; (4f8c <dir_register+0x2e0>)
    4f0a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4f0c:	220b      	movs	r2, #11
    4f0e:	69a1      	ldr	r1, [r4, #24]
    4f10:	0028      	movs	r0, r5
    4f12:	4b15      	ldr	r3, [pc, #84]	; (4f68 <dir_register+0x2bc>)
    4f14:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4f16:	69a3      	ldr	r3, [r4, #24]
    4f18:	7ada      	ldrb	r2, [r3, #11]
    4f1a:	2318      	movs	r3, #24
    4f1c:	4013      	ands	r3, r2
    4f1e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4f20:	6823      	ldr	r3, [r4, #0]
    4f22:	2201      	movs	r2, #1
    4f24:	711a      	strb	r2, [r3, #4]
    4f26:	e73a      	b.n	4d9e <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4f28:	780c      	ldrb	r4, [r1, #0]
    4f2a:	26ff      	movs	r6, #255	; 0xff
    4f2c:	5506      	strb	r6, [r0, r4]
    4f2e:	1904      	adds	r4, r0, r4
    4f30:	26ff      	movs	r6, #255	; 0xff
    4f32:	7066      	strb	r6, [r4, #1]
    4f34:	3101      	adds	r1, #1
	} while (++s < 13);
    4f36:	42a9      	cmp	r1, r5
    4f38:	d094      	beq.n	4e64 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4f3a:	42bb      	cmp	r3, r7
    4f3c:	d0f4      	beq.n	4f28 <dir_register+0x27c>
    4f3e:	1c54      	adds	r4, r2, #1
    4f40:	0052      	lsls	r2, r2, #1
    4f42:	465b      	mov	r3, fp
    4f44:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4f46:	780a      	ldrb	r2, [r1, #0]
    4f48:	5483      	strb	r3, [r0, r2]
    4f4a:	1882      	adds	r2, r0, r2
    4f4c:	0a1e      	lsrs	r6, r3, #8
    4f4e:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4f50:	2b00      	cmp	r3, #0
    4f52:	d185      	bne.n	4e60 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4f54:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4f56:	003b      	movs	r3, r7
    4f58:	e7ec      	b.n	4f34 <dir_register+0x288>
    4f5a:	4680      	mov	r8, r0
    4f5c:	e71f      	b.n	4d9e <dir_register+0xf2>
    4f5e:	4680      	mov	r8, r0
    4f60:	e71d      	b.n	4d9e <dir_register+0xf2>
    4f62:	4680      	mov	r8, r0
    4f64:	e71b      	b.n	4d9e <dir_register+0xf2>
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	00004059 	.word	0x00004059
    4f6c:	00004b15 	.word	0x00004b15
    4f70:	00008e3d 	.word	0x00008e3d
    4f74:	000046d5 	.word	0x000046d5
    4f78:	00004539 	.word	0x00004539
    4f7c:	000049f1 	.word	0x000049f1
    4f80:	00004097 	.word	0x00004097
    4f84:	0000ffff 	.word	0x0000ffff
    4f88:	0000a5c4 	.word	0x0000a5c4
    4f8c:	0000406d 	.word	0x0000406d

00004f90 <sync>:
{
    4f90:	b570      	push	{r4, r5, r6, lr}
    4f92:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4f94:	2100      	movs	r1, #0
    4f96:	4b2c      	ldr	r3, [pc, #176]	; (5048 <sync+0xb8>)
    4f98:	4798      	blx	r3
	if (res == FR_OK) {
    4f9a:	2800      	cmp	r0, #0
    4f9c:	d10a      	bne.n	4fb4 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4f9e:	7823      	ldrb	r3, [r4, #0]
    4fa0:	2b03      	cmp	r3, #3
    4fa2:	d008      	beq.n	4fb6 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4fa4:	7860      	ldrb	r0, [r4, #1]
    4fa6:	2200      	movs	r2, #0
    4fa8:	2100      	movs	r1, #0
    4faa:	4b28      	ldr	r3, [pc, #160]	; (504c <sync+0xbc>)
    4fac:	4798      	blx	r3
    4fae:	1e43      	subs	r3, r0, #1
    4fb0:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4fb2:	b2c0      	uxtb	r0, r0
}
    4fb4:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4fb6:	7963      	ldrb	r3, [r4, #5]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d0f3      	beq.n	4fa4 <sync+0x14>
			fs->winsect = 0;
    4fbc:	2600      	movs	r6, #0
    4fbe:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4fc0:	0025      	movs	r5, r4
    4fc2:	3530      	adds	r5, #48	; 0x30
    4fc4:	2280      	movs	r2, #128	; 0x80
    4fc6:	0092      	lsls	r2, r2, #2
    4fc8:	2100      	movs	r1, #0
    4fca:	0028      	movs	r0, r5
    4fcc:	4b20      	ldr	r3, [pc, #128]	; (5050 <sync+0xc0>)
    4fce:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4fd0:	2255      	movs	r2, #85	; 0x55
    4fd2:	4b20      	ldr	r3, [pc, #128]	; (5054 <sync+0xc4>)
    4fd4:	54e2      	strb	r2, [r4, r3]
    4fd6:	3255      	adds	r2, #85	; 0x55
    4fd8:	4b1f      	ldr	r3, [pc, #124]	; (5058 <sync+0xc8>)
    4fda:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4fdc:	3bde      	subs	r3, #222	; 0xde
    4fde:	3bff      	subs	r3, #255	; 0xff
    4fe0:	3a7a      	subs	r2, #122	; 0x7a
    4fe2:	54a3      	strb	r3, [r4, r2]
    4fe4:	3201      	adds	r2, #1
    4fe6:	54a3      	strb	r3, [r4, r2]
    4fe8:	330f      	adds	r3, #15
    4fea:	3201      	adds	r2, #1
    4fec:	54a3      	strb	r3, [r4, r2]
    4fee:	320f      	adds	r2, #15
    4ff0:	2133      	movs	r1, #51	; 0x33
    4ff2:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4ff4:	313f      	adds	r1, #63	; 0x3f
    4ff6:	2085      	movs	r0, #133	; 0x85
    4ff8:	0080      	lsls	r0, r0, #2
    4ffa:	5421      	strb	r1, [r4, r0]
    4ffc:	4817      	ldr	r0, [pc, #92]	; (505c <sync+0xcc>)
    4ffe:	5421      	strb	r1, [r4, r0]
    5000:	4917      	ldr	r1, [pc, #92]	; (5060 <sync+0xd0>)
    5002:	5462      	strb	r2, [r4, r1]
    5004:	4a17      	ldr	r2, [pc, #92]	; (5064 <sync+0xd4>)
    5006:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    5008:	6923      	ldr	r3, [r4, #16]
    500a:	3201      	adds	r2, #1
    500c:	54a3      	strb	r3, [r4, r2]
    500e:	0a19      	lsrs	r1, r3, #8
    5010:	4a15      	ldr	r2, [pc, #84]	; (5068 <sync+0xd8>)
    5012:	54a1      	strb	r1, [r4, r2]
    5014:	0c19      	lsrs	r1, r3, #16
    5016:	4a15      	ldr	r2, [pc, #84]	; (506c <sync+0xdc>)
    5018:	54a1      	strb	r1, [r4, r2]
    501a:	0e1b      	lsrs	r3, r3, #24
    501c:	4a14      	ldr	r2, [pc, #80]	; (5070 <sync+0xe0>)
    501e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5020:	68e3      	ldr	r3, [r4, #12]
    5022:	3201      	adds	r2, #1
    5024:	54a3      	strb	r3, [r4, r2]
    5026:	0a19      	lsrs	r1, r3, #8
    5028:	4a12      	ldr	r2, [pc, #72]	; (5074 <sync+0xe4>)
    502a:	54a1      	strb	r1, [r4, r2]
    502c:	0c19      	lsrs	r1, r3, #16
    502e:	4a12      	ldr	r2, [pc, #72]	; (5078 <sync+0xe8>)
    5030:	54a1      	strb	r1, [r4, r2]
    5032:	0e1b      	lsrs	r3, r3, #24
    5034:	4a11      	ldr	r2, [pc, #68]	; (507c <sync+0xec>)
    5036:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    5038:	7860      	ldrb	r0, [r4, #1]
    503a:	2301      	movs	r3, #1
    503c:	6962      	ldr	r2, [r4, #20]
    503e:	0029      	movs	r1, r5
    5040:	4d0f      	ldr	r5, [pc, #60]	; (5080 <sync+0xf0>)
    5042:	47a8      	blx	r5
			fs->fsi_flag = 0;
    5044:	7166      	strb	r6, [r4, #5]
    5046:	e7ad      	b.n	4fa4 <sync+0x14>
    5048:	00004539 	.word	0x00004539
    504c:	00003f9d 	.word	0x00003f9d
    5050:	0000406d 	.word	0x0000406d
    5054:	0000022e 	.word	0x0000022e
    5058:	0000022f 	.word	0x0000022f
    505c:	00000215 	.word	0x00000215
    5060:	00000216 	.word	0x00000216
    5064:	00000217 	.word	0x00000217
    5068:	00000219 	.word	0x00000219
    506c:	0000021a 	.word	0x0000021a
    5070:	0000021b 	.word	0x0000021b
    5074:	0000021d 	.word	0x0000021d
    5078:	0000021e 	.word	0x0000021e
    507c:	0000021f 	.word	0x0000021f
    5080:	00003f19 	.word	0x00003f19

00005084 <follow_path>:
{
    5084:	b5f0      	push	{r4, r5, r6, r7, lr}
    5086:	46de      	mov	lr, fp
    5088:	4657      	mov	r7, sl
    508a:	464e      	mov	r6, r9
    508c:	4645      	mov	r5, r8
    508e:	b5e0      	push	{r5, r6, r7, lr}
    5090:	b083      	sub	sp, #12
    5092:	4682      	mov	sl, r0
    5094:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    5096:	780b      	ldrb	r3, [r1, #0]
    5098:	2b2f      	cmp	r3, #47	; 0x2f
    509a:	d00f      	beq.n	50bc <follow_path+0x38>
    509c:	2b5c      	cmp	r3, #92	; 0x5c
    509e:	d00d      	beq.n	50bc <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    50a0:	2300      	movs	r3, #0
    50a2:	4652      	mov	r2, sl
    50a4:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    50a6:	782b      	ldrb	r3, [r5, #0]
    50a8:	4657      	mov	r7, sl
    50aa:	2b1f      	cmp	r3, #31
    50ac:	d809      	bhi.n	50c2 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    50ae:	2100      	movs	r1, #0
    50b0:	4650      	mov	r0, sl
    50b2:	4bb2      	ldr	r3, [pc, #712]	; (537c <follow_path+0x2f8>)
    50b4:	4798      	blx	r3
		dj->dir = 0;
    50b6:	2300      	movs	r3, #0
    50b8:	617b      	str	r3, [r7, #20]
    50ba:	e13a      	b.n	5332 <follow_path+0x2ae>
		path++;
    50bc:	3501      	adds	r5, #1
    50be:	e7ef      	b.n	50a0 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    50c0:	3501      	adds	r5, #1
    50c2:	7828      	ldrb	r0, [r5, #0]
    50c4:	282f      	cmp	r0, #47	; 0x2f
    50c6:	d0fb      	beq.n	50c0 <follow_path+0x3c>
    50c8:	285c      	cmp	r0, #92	; 0x5c
    50ca:	d0f9      	beq.n	50c0 <follow_path+0x3c>
	lfn = dj->lfn;
    50cc:	69fb      	ldr	r3, [r7, #28]
    50ce:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    50d0:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    50d2:	281f      	cmp	r0, #31
    50d4:	d800      	bhi.n	50d8 <follow_path+0x54>
    50d6:	e13b      	b.n	5350 <follow_path+0x2cc>
    50d8:	282f      	cmp	r0, #47	; 0x2f
    50da:	d100      	bne.n	50de <follow_path+0x5a>
    50dc:	e13b      	b.n	5356 <follow_path+0x2d2>
    50de:	285c      	cmp	r0, #92	; 0x5c
    50e0:	d100      	bne.n	50e4 <follow_path+0x60>
    50e2:	e13b      	b.n	535c <follow_path+0x2d8>
    50e4:	1c6e      	adds	r6, r5, #1
    50e6:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    50e8:	2380      	movs	r3, #128	; 0x80
    50ea:	005b      	lsls	r3, r3, #1
    50ec:	4698      	mov	r8, r3
    50ee:	46bb      	mov	fp, r7
    50f0:	002b      	movs	r3, r5
    50f2:	0025      	movs	r5, r4
    50f4:	0034      	movs	r4, r6
    50f6:	4656      	mov	r6, sl
    50f8:	4699      	mov	r9, r3
    50fa:	e011      	b.n	5120 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    50fc:	2b00      	cmp	r3, #0
    50fe:	d135      	bne.n	516c <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    5100:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    5102:	1c6b      	adds	r3, r5, #1
    5104:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    5106:	281f      	cmp	r0, #31
    5108:	d91e      	bls.n	5148 <follow_path+0xc4>
    510a:	282f      	cmp	r0, #47	; 0x2f
    510c:	d100      	bne.n	5110 <follow_path+0x8c>
    510e:	e128      	b.n	5362 <follow_path+0x2de>
    5110:	285c      	cmp	r0, #92	; 0x5c
    5112:	d100      	bne.n	5116 <follow_path+0x92>
    5114:	e142      	b.n	539c <follow_path+0x318>
    5116:	3602      	adds	r6, #2
    5118:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    511a:	4543      	cmp	r3, r8
    511c:	d026      	beq.n	516c <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    511e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5120:	2101      	movs	r1, #1
    5122:	4b97      	ldr	r3, [pc, #604]	; (5380 <follow_path+0x2fc>)
    5124:	4798      	blx	r3
    5126:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    5128:	d020      	beq.n	516c <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    512a:	287f      	cmp	r0, #127	; 0x7f
    512c:	d8e8      	bhi.n	5100 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    512e:	2822      	cmp	r0, #34	; 0x22
    5130:	d100      	bne.n	5134 <follow_path+0xb0>
    5132:	e0fd      	b.n	5330 <follow_path+0x2ac>
    5134:	232a      	movs	r3, #42	; 0x2a
    5136:	4a93      	ldr	r2, [pc, #588]	; (5384 <follow_path+0x300>)
    5138:	b29f      	uxth	r7, r3
    513a:	428f      	cmp	r7, r1
    513c:	d0de      	beq.n	50fc <follow_path+0x78>
    513e:	3201      	adds	r2, #1
    5140:	7813      	ldrb	r3, [r2, #0]
    5142:	2b00      	cmp	r3, #0
    5144:	d1f8      	bne.n	5138 <follow_path+0xb4>
    5146:	e7db      	b.n	5100 <follow_path+0x7c>
    5148:	002c      	movs	r4, r5
    514a:	465f      	mov	r7, fp
    514c:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    514e:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5150:	2604      	movs	r6, #4
    5152:	e10b      	b.n	536c <follow_path+0x2e8>
		di--;
    5154:	3c01      	subs	r4, #1
    5156:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    5158:	2c00      	cmp	r4, #0
    515a:	d100      	bne.n	515e <follow_path+0xda>
    515c:	e0e8      	b.n	5330 <follow_path+0x2ac>
		w = lfn[di-1];
    515e:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    5160:	2a20      	cmp	r2, #32
    5162:	d0f7      	beq.n	5154 <follow_path+0xd0>
    5164:	2a2e      	cmp	r2, #46	; 0x2e
    5166:	d0f5      	beq.n	5154 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    5168:	2c00      	cmp	r4, #0
    516a:	d101      	bne.n	5170 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    516c:	2006      	movs	r0, #6
	return res;
    516e:	e0e0      	b.n	5332 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    5170:	0063      	lsls	r3, r4, #1
    5172:	4698      	mov	r8, r3
    5174:	2300      	movs	r3, #0
    5176:	4652      	mov	r2, sl
    5178:	4641      	mov	r1, r8
    517a:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    517c:	220b      	movs	r2, #11
    517e:	2120      	movs	r1, #32
    5180:	69b8      	ldr	r0, [r7, #24]
    5182:	4b81      	ldr	r3, [pc, #516]	; (5388 <follow_path+0x304>)
    5184:	4798      	blx	r3
    5186:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    5188:	2300      	movs	r3, #0
    518a:	e001      	b.n	5190 <follow_path+0x10c>
    518c:	3301      	adds	r3, #1
    518e:	3202      	adds	r2, #2
    5190:	8811      	ldrh	r1, [r2, #0]
    5192:	2920      	cmp	r1, #32
    5194:	d0fa      	beq.n	518c <follow_path+0x108>
    5196:	292e      	cmp	r1, #46	; 0x2e
    5198:	d0f8      	beq.n	518c <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    519a:	2b00      	cmp	r3, #0
    519c:	d001      	beq.n	51a2 <follow_path+0x11e>
    519e:	2203      	movs	r2, #3
    51a0:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    51a2:	4652      	mov	r2, sl
    51a4:	4442      	add	r2, r8
    51a6:	3a02      	subs	r2, #2
    51a8:	8812      	ldrh	r2, [r2, #0]
    51aa:	2a2e      	cmp	r2, #46	; 0x2e
    51ac:	d009      	beq.n	51c2 <follow_path+0x13e>
    51ae:	4642      	mov	r2, r8
    51b0:	3a04      	subs	r2, #4
    51b2:	4452      	add	r2, sl
    51b4:	3c01      	subs	r4, #1
    51b6:	2c00      	cmp	r4, #0
    51b8:	d003      	beq.n	51c2 <follow_path+0x13e>
    51ba:	3a02      	subs	r2, #2
    51bc:	8851      	ldrh	r1, [r2, #2]
    51be:	292e      	cmp	r1, #46	; 0x2e
    51c0:	d1f8      	bne.n	51b4 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    51c2:	2208      	movs	r2, #8
    51c4:	9201      	str	r2, [sp, #4]
    51c6:	2200      	movs	r2, #0
    51c8:	4693      	mov	fp, r2
    51ca:	4691      	mov	r9, r2
    51cc:	46a0      	mov	r8, r4
    51ce:	e006      	b.n	51de <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    51d0:	4544      	cmp	r4, r8
    51d2:	d100      	bne.n	51d6 <follow_path+0x152>
    51d4:	e0e6      	b.n	53a4 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    51d6:	2303      	movs	r3, #3
    51d8:	431e      	orrs	r6, r3
    51da:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    51dc:	0023      	movs	r3, r4
    51de:	1c5c      	adds	r4, r3, #1
    51e0:	005b      	lsls	r3, r3, #1
    51e2:	4652      	mov	r2, sl
    51e4:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    51e6:	2800      	cmp	r0, #0
    51e8:	d02c      	beq.n	5244 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    51ea:	2820      	cmp	r0, #32
    51ec:	d0f3      	beq.n	51d6 <follow_path+0x152>
    51ee:	282e      	cmp	r0, #46	; 0x2e
    51f0:	d0ee      	beq.n	51d0 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    51f2:	9b01      	ldr	r3, [sp, #4]
    51f4:	459b      	cmp	fp, r3
    51f6:	d219      	bcs.n	522c <follow_path+0x1a8>
    51f8:	4544      	cmp	r4, r8
    51fa:	d100      	bne.n	51fe <follow_path+0x17a>
    51fc:	e0d2      	b.n	53a4 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    51fe:	287f      	cmp	r0, #127	; 0x7f
    5200:	d85e      	bhi.n	52c0 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    5202:	282b      	cmp	r0, #43	; 0x2b
    5204:	d06e      	beq.n	52e4 <follow_path+0x260>
    5206:	232c      	movs	r3, #44	; 0x2c
    5208:	4a60      	ldr	r2, [pc, #384]	; (538c <follow_path+0x308>)
    520a:	b299      	uxth	r1, r3
    520c:	4281      	cmp	r1, r0
    520e:	d067      	beq.n	52e0 <follow_path+0x25c>
    5210:	3201      	adds	r2, #1
    5212:	7813      	ldrb	r3, [r2, #0]
    5214:	2b00      	cmp	r3, #0
    5216:	d1f8      	bne.n	520a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    5218:	0003      	movs	r3, r0
    521a:	3b41      	subs	r3, #65	; 0x41
    521c:	b29b      	uxth	r3, r3
    521e:	2b19      	cmp	r3, #25
    5220:	d86c      	bhi.n	52fc <follow_path+0x278>
					b |= 2;
    5222:	2302      	movs	r3, #2
    5224:	464a      	mov	r2, r9
    5226:	431a      	orrs	r2, r3
    5228:	4691      	mov	r9, r2
    522a:	e05f      	b.n	52ec <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    522c:	9b01      	ldr	r3, [sp, #4]
    522e:	2b0b      	cmp	r3, #11
    5230:	d03b      	beq.n	52aa <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    5232:	4544      	cmp	r4, r8
    5234:	d100      	bne.n	5238 <follow_path+0x1b4>
    5236:	e0b9      	b.n	53ac <follow_path+0x328>
    5238:	2303      	movs	r3, #3
    523a:	431e      	orrs	r6, r3
    523c:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    523e:	4544      	cmp	r4, r8
    5240:	d800      	bhi.n	5244 <follow_path+0x1c0>
    5242:	e0b3      	b.n	53ac <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5244:	69bb      	ldr	r3, [r7, #24]
    5246:	781a      	ldrb	r2, [r3, #0]
    5248:	2ae5      	cmp	r2, #229	; 0xe5
    524a:	d036      	beq.n	52ba <follow_path+0x236>
	if (ni == 8) b <<= 2;
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	2b08      	cmp	r3, #8
    5250:	d060      	beq.n	5314 <follow_path+0x290>
    5252:	230c      	movs	r3, #12
    5254:	464a      	mov	r2, r9
    5256:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5258:	2b0c      	cmp	r3, #12
    525a:	d060      	beq.n	531e <follow_path+0x29a>
    525c:	43d2      	mvns	r2, r2
    525e:	0792      	lsls	r2, r2, #30
    5260:	d05d      	beq.n	531e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    5262:	07b2      	lsls	r2, r6, #30
    5264:	d406      	bmi.n	5274 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5266:	2203      	movs	r2, #3
    5268:	4649      	mov	r1, r9
    526a:	400a      	ands	r2, r1
    526c:	2a01      	cmp	r2, #1
    526e:	d059      	beq.n	5324 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5270:	2b04      	cmp	r3, #4
    5272:	d05a      	beq.n	532a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    5274:	69bb      	ldr	r3, [r7, #24]
    5276:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    5278:	0038      	movs	r0, r7
    527a:	4b45      	ldr	r3, [pc, #276]	; (5390 <follow_path+0x30c>)
    527c:	4798      	blx	r3
			ns = *(dj->fn+NS);
    527e:	69bb      	ldr	r3, [r7, #24]
    5280:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    5282:	2800      	cmp	r0, #0
    5284:	d15c      	bne.n	5340 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    5286:	075b      	lsls	r3, r3, #29
    5288:	d453      	bmi.n	5332 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    528a:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    528c:	7ad3      	ldrb	r3, [r2, #11]
    528e:	06db      	lsls	r3, r3, #27
    5290:	d55c      	bpl.n	534c <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    5292:	7d51      	ldrb	r1, [r2, #21]
    5294:	0209      	lsls	r1, r1, #8
    5296:	7d13      	ldrb	r3, [r2, #20]
    5298:	430b      	orrs	r3, r1
    529a:	041b      	lsls	r3, r3, #16
    529c:	7ed1      	ldrb	r1, [r2, #27]
    529e:	0209      	lsls	r1, r1, #8
    52a0:	7e92      	ldrb	r2, [r2, #26]
    52a2:	430a      	orrs	r2, r1
    52a4:	4313      	orrs	r3, r2
    52a6:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    52a8:	e70b      	b.n	50c2 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    52aa:	2303      	movs	r3, #3
    52ac:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    52ae:	69bb      	ldr	r3, [r7, #24]
    52b0:	781a      	ldrb	r2, [r3, #0]
    52b2:	2ae5      	cmp	r2, #229	; 0xe5
    52b4:	d1cd      	bne.n	5252 <follow_path+0x1ce>
    52b6:	220b      	movs	r2, #11
    52b8:	9201      	str	r2, [sp, #4]
    52ba:	2205      	movs	r2, #5
    52bc:	701a      	strb	r2, [r3, #0]
    52be:	e7c5      	b.n	524c <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    52c0:	2100      	movs	r1, #0
    52c2:	4b2f      	ldr	r3, [pc, #188]	; (5380 <follow_path+0x2fc>)
    52c4:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    52c6:	2800      	cmp	r0, #0
    52c8:	d100      	bne.n	52cc <follow_path+0x248>
    52ca:	e079      	b.n	53c0 <follow_path+0x33c>
    52cc:	4b31      	ldr	r3, [pc, #196]	; (5394 <follow_path+0x310>)
    52ce:	469c      	mov	ip, r3
    52d0:	4460      	add	r0, ip
    52d2:	3880      	subs	r0, #128	; 0x80
    52d4:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    52d6:	2302      	movs	r3, #2
    52d8:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    52da:	2800      	cmp	r0, #0
    52dc:	d002      	beq.n	52e4 <follow_path+0x260>
    52de:	e790      	b.n	5202 <follow_path+0x17e>
    52e0:	2b00      	cmp	r3, #0
    52e2:	d099      	beq.n	5218 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    52e4:	2303      	movs	r3, #3
    52e6:	431e      	orrs	r6, r3
    52e8:	b2f6      	uxtb	r6, r6
    52ea:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    52ec:	69bb      	ldr	r3, [r7, #24]
    52ee:	465a      	mov	r2, fp
    52f0:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    52f2:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    52f4:	2201      	movs	r2, #1
    52f6:	4694      	mov	ip, r2
    52f8:	44e3      	add	fp, ip
    52fa:	e770      	b.n	51de <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    52fc:	0003      	movs	r3, r0
    52fe:	3b61      	subs	r3, #97	; 0x61
    5300:	b29b      	uxth	r3, r3
    5302:	2b19      	cmp	r3, #25
    5304:	d8f2      	bhi.n	52ec <follow_path+0x268>
						b |= 1; w -= 0x20;
    5306:	2301      	movs	r3, #1
    5308:	464a      	mov	r2, r9
    530a:	431a      	orrs	r2, r3
    530c:	4691      	mov	r9, r2
    530e:	3820      	subs	r0, #32
    5310:	b280      	uxth	r0, r0
    5312:	e7eb      	b.n	52ec <follow_path+0x268>
	if (ni == 8) b <<= 2;
    5314:	464b      	mov	r3, r9
    5316:	009b      	lsls	r3, r3, #2
    5318:	b2db      	uxtb	r3, r3
    531a:	4699      	mov	r9, r3
    531c:	e799      	b.n	5252 <follow_path+0x1ce>
		cf |= NS_LFN;
    531e:	2202      	movs	r2, #2
    5320:	4316      	orrs	r6, r2
    5322:	e79e      	b.n	5262 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5324:	320f      	adds	r2, #15
    5326:	4316      	orrs	r6, r2
    5328:	e7a2      	b.n	5270 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    532a:	3304      	adds	r3, #4
    532c:	431e      	orrs	r6, r3
    532e:	e7a1      	b.n	5274 <follow_path+0x1f0>
    5330:	2006      	movs	r0, #6
}
    5332:	b003      	add	sp, #12
    5334:	bc3c      	pop	{r2, r3, r4, r5}
    5336:	4690      	mov	r8, r2
    5338:	4699      	mov	r9, r3
    533a:	46a2      	mov	sl, r4
    533c:	46ab      	mov	fp, r5
    533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5340:	2804      	cmp	r0, #4
    5342:	d1f6      	bne.n	5332 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5344:	075b      	lsls	r3, r3, #29
    5346:	d4f4      	bmi.n	5332 <follow_path+0x2ae>
    5348:	3001      	adds	r0, #1
    534a:	e7f2      	b.n	5332 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    534c:	2005      	movs	r0, #5
    534e:	e7f0      	b.n	5332 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    5350:	2301      	movs	r3, #1
	si = di = 0;
    5352:	2400      	movs	r4, #0
    5354:	e6fb      	b.n	514e <follow_path+0xca>
		w = p[si++];					/* Get a character */
    5356:	2301      	movs	r3, #1
	si = di = 0;
    5358:	2400      	movs	r4, #0
    535a:	e005      	b.n	5368 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    535c:	2301      	movs	r3, #1
	si = di = 0;
    535e:	2400      	movs	r4, #0
    5360:	e002      	b.n	5368 <follow_path+0x2e4>
    5362:	002c      	movs	r4, r5
    5364:	465f      	mov	r7, fp
    5366:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5368:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    536a:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    536c:	2c00      	cmp	r4, #0
    536e:	d0df      	beq.n	5330 <follow_path+0x2ac>
    5370:	4b09      	ldr	r3, [pc, #36]	; (5398 <follow_path+0x314>)
    5372:	18e3      	adds	r3, r4, r3
    5374:	005b      	lsls	r3, r3, #1
    5376:	4453      	add	r3, sl
    5378:	e6f1      	b.n	515e <follow_path+0xda>
    537a:	46c0      	nop			; (mov r8, r8)
    537c:	000046d5 	.word	0x000046d5
    5380:	000059e5 	.word	0x000059e5
    5384:	0000a655 	.word	0x0000a655
    5388:	0000406d 	.word	0x0000406d
    538c:	0000a661 	.word	0x0000a661
    5390:	00004b15 	.word	0x00004b15
    5394:	0000a5d4 	.word	0x0000a5d4
    5398:	7fffffff 	.word	0x7fffffff
    539c:	002c      	movs	r4, r5
    539e:	465f      	mov	r7, fp
    53a0:	464d      	mov	r5, r9
    53a2:	e7e1      	b.n	5368 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	2b0b      	cmp	r3, #11
    53a8:	d100      	bne.n	53ac <follow_path+0x328>
    53aa:	e77e      	b.n	52aa <follow_path+0x226>
			b <<= 2; continue;
    53ac:	464b      	mov	r3, r9
    53ae:	009b      	lsls	r3, r3, #2
    53b0:	b2db      	uxtb	r3, r3
    53b2:	4699      	mov	r9, r3
    53b4:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    53b6:	220b      	movs	r2, #11
    53b8:	9201      	str	r2, [sp, #4]
    53ba:	3a03      	subs	r2, #3
    53bc:	4693      	mov	fp, r2
    53be:	e70e      	b.n	51de <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    53c0:	2302      	movs	r3, #2
    53c2:	431e      	orrs	r6, r3
    53c4:	e78e      	b.n	52e4 <follow_path+0x260>
    53c6:	46c0      	nop			; (mov r8, r8)

000053c8 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    53c8:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    53ca:	2803      	cmp	r0, #3
    53cc:	d901      	bls.n	53d2 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    53ce:	0018      	movs	r0, r3
    53d0:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    53d2:	0083      	lsls	r3, r0, #2
    53d4:	4a07      	ldr	r2, [pc, #28]	; (53f4 <f_mount+0x2c>)
    53d6:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    53d8:	2b00      	cmp	r3, #0
    53da:	d001      	beq.n	53e0 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    53dc:	2200      	movs	r2, #0
    53de:	701a      	strb	r2, [r3, #0]
	if (fs) {
    53e0:	2900      	cmp	r1, #0
    53e2:	d001      	beq.n	53e8 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    53e4:	2300      	movs	r3, #0
    53e6:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    53e8:	0080      	lsls	r0, r0, #2
    53ea:	4b02      	ldr	r3, [pc, #8]	; (53f4 <f_mount+0x2c>)
    53ec:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    53ee:	2300      	movs	r3, #0
    53f0:	e7ed      	b.n	53ce <f_mount+0x6>
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	200002b8 	.word	0x200002b8

000053f8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    53f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53fa:	46c6      	mov	lr, r8
    53fc:	b500      	push	{lr}
    53fe:	4c59      	ldr	r4, [pc, #356]	; (5564 <f_open+0x16c>)
    5400:	44a5      	add	sp, r4
    5402:	0005      	movs	r5, r0
    5404:	9101      	str	r1, [sp, #4]
    5406:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    5408:	2300      	movs	r3, #0
    540a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    540c:	261f      	movs	r6, #31
    540e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    5410:	221e      	movs	r2, #30
    5412:	403a      	ands	r2, r7
    5414:	a985      	add	r1, sp, #532	; 0x214
    5416:	a801      	add	r0, sp, #4
    5418:	4b53      	ldr	r3, [pc, #332]	; (5568 <f_open+0x170>)
    541a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    541c:	ab82      	add	r3, sp, #520	; 0x208
    541e:	938b      	str	r3, [sp, #556]	; 0x22c
    5420:	ab02      	add	r3, sp, #8
    5422:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    5424:	2800      	cmp	r0, #0
    5426:	d006      	beq.n	5436 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    5428:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    542a:	231c      	movs	r3, #28
    542c:	423b      	tst	r3, r7
    542e:	d145      	bne.n	54bc <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    5430:	2800      	cmp	r0, #0
    5432:	d13d      	bne.n	54b0 <f_open+0xb8>
    5434:	e00c      	b.n	5450 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    5436:	9901      	ldr	r1, [sp, #4]
    5438:	a885      	add	r0, sp, #532	; 0x214
    543a:	4b4c      	ldr	r3, [pc, #304]	; (556c <f_open+0x174>)
    543c:	4798      	blx	r3
	dir = dj.dir;
    543e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    5440:	2800      	cmp	r0, #0
    5442:	d1f2      	bne.n	542a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    5444:	2c00      	cmp	r4, #0
    5446:	d100      	bne.n	544a <f_open+0x52>
    5448:	e086      	b.n	5558 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    544a:	231c      	movs	r3, #28
    544c:	423b      	tst	r3, r7
    544e:	d146      	bne.n	54de <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5450:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    5452:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5454:	06da      	lsls	r2, r3, #27
    5456:	d42b      	bmi.n	54b0 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5458:	07ba      	lsls	r2, r7, #30
    545a:	d502      	bpl.n	5462 <f_open+0x6a>
					res = FR_DENIED;
    545c:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    545e:	07db      	lsls	r3, r3, #31
    5460:	d426      	bmi.n	54b0 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    5462:	073b      	lsls	r3, r7, #28
    5464:	d501      	bpl.n	546a <f_open+0x72>
			mode |= FA__WRITTEN;
    5466:	2320      	movs	r3, #32
    5468:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    546a:	9b85      	ldr	r3, [sp, #532]	; 0x214
    546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    546e:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    5470:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    5472:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5474:	7d62      	ldrb	r2, [r4, #21]
    5476:	0212      	lsls	r2, r2, #8
    5478:	7d23      	ldrb	r3, [r4, #20]
    547a:	4313      	orrs	r3, r2
    547c:	041b      	lsls	r3, r3, #16
    547e:	7ee1      	ldrb	r1, [r4, #27]
    5480:	0209      	lsls	r1, r1, #8
    5482:	7ea2      	ldrb	r2, [r4, #26]
    5484:	430a      	orrs	r2, r1
    5486:	4313      	orrs	r3, r2
    5488:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    548a:	7fe3      	ldrb	r3, [r4, #31]
    548c:	061b      	lsls	r3, r3, #24
    548e:	7fa2      	ldrb	r2, [r4, #30]
    5490:	0412      	lsls	r2, r2, #16
    5492:	4313      	orrs	r3, r2
    5494:	7f22      	ldrb	r2, [r4, #28]
    5496:	4313      	orrs	r3, r2
    5498:	7f62      	ldrb	r2, [r4, #29]
    549a:	0212      	lsls	r2, r2, #8
    549c:	4313      	orrs	r3, r2
    549e:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    54a0:	2300      	movs	r3, #0
    54a2:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    54a4:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    54a6:	9b85      	ldr	r3, [sp, #532]	; 0x214
    54a8:	602b      	str	r3, [r5, #0]
    54aa:	88db      	ldrh	r3, [r3, #6]
    54ac:	80ab      	strh	r3, [r5, #4]
    54ae:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    54b0:	238e      	movs	r3, #142	; 0x8e
    54b2:	009b      	lsls	r3, r3, #2
    54b4:	449d      	add	sp, r3
    54b6:	bc04      	pop	{r2}
    54b8:	4690      	mov	r8, r2
    54ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    54bc:	2804      	cmp	r0, #4
    54be:	d005      	beq.n	54cc <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    54c0:	2308      	movs	r3, #8
    54c2:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    54c4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    54c6:	2800      	cmp	r0, #0
    54c8:	d0d3      	beq.n	5472 <f_open+0x7a>
    54ca:	e7f1      	b.n	54b0 <f_open+0xb8>
				res = dir_register(&dj);
    54cc:	a885      	add	r0, sp, #532	; 0x214
    54ce:	4b28      	ldr	r3, [pc, #160]	; (5570 <f_open+0x178>)
    54d0:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    54d2:	2308      	movs	r3, #8
    54d4:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    54d6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    54d8:	2800      	cmp	r0, #0
    54da:	d008      	beq.n	54ee <f_open+0xf6>
    54dc:	e7e8      	b.n	54b0 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    54de:	7ae3      	ldrb	r3, [r4, #11]
    54e0:	2211      	movs	r2, #17
				res = FR_DENIED;
    54e2:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    54e4:	421a      	tst	r2, r3
    54e6:	d1e3      	bne.n	54b0 <f_open+0xb8>
					res = FR_EXIST;
    54e8:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    54ea:	077b      	lsls	r3, r7, #29
    54ec:	d4e0      	bmi.n	54b0 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    54ee:	0733      	lsls	r3, r6, #28
    54f0:	d5bb      	bpl.n	546a <f_open+0x72>
			dw = get_fattime();					/* Created time */
    54f2:	4b20      	ldr	r3, [pc, #128]	; (5574 <f_open+0x17c>)
    54f4:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    54f6:	73a0      	strb	r0, [r4, #14]
    54f8:	0a03      	lsrs	r3, r0, #8
    54fa:	73e3      	strb	r3, [r4, #15]
    54fc:	0c03      	lsrs	r3, r0, #16
    54fe:	7423      	strb	r3, [r4, #16]
    5500:	0e00      	lsrs	r0, r0, #24
    5502:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    5504:	2300      	movs	r3, #0
    5506:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    5508:	7723      	strb	r3, [r4, #28]
    550a:	7763      	strb	r3, [r4, #29]
    550c:	77a3      	strb	r3, [r4, #30]
    550e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    5510:	7d62      	ldrb	r2, [r4, #21]
    5512:	0212      	lsls	r2, r2, #8
    5514:	7d27      	ldrb	r7, [r4, #20]
    5516:	4317      	orrs	r7, r2
    5518:	043f      	lsls	r7, r7, #16
    551a:	7ee1      	ldrb	r1, [r4, #27]
    551c:	0209      	lsls	r1, r1, #8
    551e:	7ea2      	ldrb	r2, [r4, #26]
    5520:	430a      	orrs	r2, r1
    5522:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    5524:	76a3      	strb	r3, [r4, #26]
    5526:	76e3      	strb	r3, [r4, #27]
    5528:	7523      	strb	r3, [r4, #20]
    552a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    552c:	9885      	ldr	r0, [sp, #532]	; 0x214
    552e:	3301      	adds	r3, #1
    5530:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    5532:	2f00      	cmp	r7, #0
    5534:	d097      	beq.n	5466 <f_open+0x6e>
				dw = dj.fs->winsect;
    5536:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5538:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    553a:	0039      	movs	r1, r7
    553c:	4b0e      	ldr	r3, [pc, #56]	; (5578 <f_open+0x180>)
    553e:	4798      	blx	r3
				if (res == FR_OK) {
    5540:	2800      	cmp	r0, #0
    5542:	d1b5      	bne.n	54b0 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5544:	9885      	ldr	r0, [sp, #532]	; 0x214
    5546:	3f01      	subs	r7, #1
    5548:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    554a:	4641      	mov	r1, r8
    554c:	4b0b      	ldr	r3, [pc, #44]	; (557c <f_open+0x184>)
    554e:	4798      	blx	r3
	if (res == FR_OK) {
    5550:	2800      	cmp	r0, #0
    5552:	d100      	bne.n	5556 <f_open+0x15e>
    5554:	e787      	b.n	5466 <f_open+0x6e>
    5556:	e7ab      	b.n	54b0 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5558:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    555a:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    555c:	423b      	tst	r3, r7
    555e:	d0b2      	beq.n	54c6 <f_open+0xce>
			res = FR_INVALID_NAME;
    5560:	2006      	movs	r0, #6
    5562:	e7ad      	b.n	54c0 <f_open+0xc8>
    5564:	fffffdc8 	.word	0xfffffdc8
    5568:	00004189 	.word	0x00004189
    556c:	00005085 	.word	0x00005085
    5570:	00004cad 	.word	0x00004cad
    5574:	00004009 	.word	0x00004009
    5578:	00004979 	.word	0x00004979
    557c:	00004539 	.word	0x00004539

00005580 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5580:	b5f0      	push	{r4, r5, r6, r7, lr}
    5582:	46de      	mov	lr, fp
    5584:	4657      	mov	r7, sl
    5586:	464e      	mov	r6, r9
    5588:	4645      	mov	r5, r8
    558a:	b5e0      	push	{r5, r6, r7, lr}
    558c:	b083      	sub	sp, #12
    558e:	0004      	movs	r4, r0
    5590:	000d      	movs	r5, r1
    5592:	0016      	movs	r6, r2
    5594:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    5596:	2300      	movs	r3, #0
    5598:	464a      	mov	r2, r9
    559a:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    559c:	8881      	ldrh	r1, [r0, #4]
    559e:	6800      	ldr	r0, [r0, #0]
    55a0:	4b7f      	ldr	r3, [pc, #508]	; (57a0 <f_write+0x220>)
    55a2:	4798      	blx	r3
    55a4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    55a6:	2800      	cmp	r0, #0
    55a8:	d000      	beq.n	55ac <f_write+0x2c>
    55aa:	e0f1      	b.n	5790 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    55ac:	79a3      	ldrb	r3, [r4, #6]
    55ae:	b25a      	sxtb	r2, r3
    55b0:	2a00      	cmp	r2, #0
    55b2:	da00      	bge.n	55b6 <f_write+0x36>
    55b4:	e0ea      	b.n	578c <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    55b6:	079b      	lsls	r3, r3, #30
    55b8:	d402      	bmi.n	55c0 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    55ba:	2307      	movs	r3, #7
    55bc:	9300      	str	r3, [sp, #0]
    55be:	e0e7      	b.n	5790 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    55c0:	68e3      	ldr	r3, [r4, #12]
    55c2:	199a      	adds	r2, r3, r6
    55c4:	4293      	cmp	r3, r2
    55c6:	d810      	bhi.n	55ea <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    55c8:	2e00      	cmp	r6, #0
    55ca:	d00e      	beq.n	55ea <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    55cc:	002f      	movs	r7, r5
    55ce:	e07b      	b.n	56c8 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    55d0:	2100      	movs	r1, #0
    55d2:	4b74      	ldr	r3, [pc, #464]	; (57a4 <f_write+0x224>)
    55d4:	4798      	blx	r3
    55d6:	0003      	movs	r3, r0
    55d8:	6120      	str	r0, [r4, #16]
    55da:	e003      	b.n	55e4 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    55dc:	6961      	ldr	r1, [r4, #20]
    55de:	4b71      	ldr	r3, [pc, #452]	; (57a4 <f_write+0x224>)
    55e0:	4798      	blx	r3
    55e2:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    55e4:	2b00      	cmp	r3, #0
    55e6:	d000      	beq.n	55ea <f_write+0x6a>
    55e8:	e080      	b.n	56ec <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    55ea:	68a3      	ldr	r3, [r4, #8]
    55ec:	68e2      	ldr	r2, [r4, #12]
    55ee:	4293      	cmp	r3, r2
    55f0:	d900      	bls.n	55f4 <f_write+0x74>
    55f2:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    55f4:	79a3      	ldrb	r3, [r4, #6]
    55f6:	2220      	movs	r2, #32
    55f8:	4313      	orrs	r3, r2
    55fa:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    55fc:	e0c8      	b.n	5790 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    55fe:	79a2      	ldrb	r2, [r4, #6]
    5600:	3b81      	subs	r3, #129	; 0x81
    5602:	4313      	orrs	r3, r2
    5604:	71a3      	strb	r3, [r4, #6]
    5606:	2302      	movs	r3, #2
    5608:	9300      	str	r3, [sp, #0]
    560a:	e0c1      	b.n	5790 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    560c:	79a2      	ldrb	r2, [r4, #6]
    560e:	3b7f      	subs	r3, #127	; 0x7f
    5610:	4313      	orrs	r3, r2
    5612:	71a3      	strb	r3, [r4, #6]
    5614:	2301      	movs	r3, #1
    5616:	9300      	str	r3, [sp, #0]
    5618:	e0ba      	b.n	5790 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    561a:	2100      	movs	r1, #0
    561c:	4b62      	ldr	r3, [pc, #392]	; (57a8 <f_write+0x228>)
    561e:	4798      	blx	r3
    5620:	2800      	cmp	r0, #0
    5622:	d06d      	beq.n	5700 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    5624:	79a2      	ldrb	r2, [r4, #6]
    5626:	2380      	movs	r3, #128	; 0x80
    5628:	425b      	negs	r3, r3
    562a:	4313      	orrs	r3, r2
    562c:	71a3      	strb	r3, [r4, #6]
    562e:	2301      	movs	r3, #1
    5630:	9300      	str	r3, [sp, #0]
    5632:	e0ad      	b.n	5790 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5634:	79a2      	ldrb	r2, [r4, #6]
    5636:	2380      	movs	r3, #128	; 0x80
    5638:	425b      	negs	r3, r3
    563a:	4313      	orrs	r3, r2
    563c:	71a3      	strb	r3, [r4, #6]
    563e:	2302      	movs	r3, #2
    5640:	9300      	str	r3, [sp, #0]
    5642:	e0a5      	b.n	5790 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5644:	79a2      	ldrb	r2, [r4, #6]
    5646:	2380      	movs	r3, #128	; 0x80
    5648:	425b      	negs	r3, r3
    564a:	4313      	orrs	r3, r2
    564c:	71a3      	strb	r3, [r4, #6]
    564e:	2301      	movs	r3, #1
    5650:	9300      	str	r3, [sp, #0]
    5652:	e09d      	b.n	5790 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5654:	0240      	lsls	r0, r0, #9
    5656:	1839      	adds	r1, r7, r0
    5658:	3330      	adds	r3, #48	; 0x30
    565a:	0018      	movs	r0, r3
    565c:	2280      	movs	r2, #128	; 0x80
    565e:	0092      	lsls	r2, r2, #2
    5660:	4b52      	ldr	r3, [pc, #328]	; (57ac <f_write+0x22c>)
    5662:	4798      	blx	r3
					fp->fs->wflag = 0;
    5664:	2300      	movs	r3, #0
    5666:	6822      	ldr	r2, [r4, #0]
    5668:	7113      	strb	r3, [r2, #4]
    566a:	e072      	b.n	5752 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    566c:	68a3      	ldr	r3, [r4, #8]
    566e:	68e2      	ldr	r2, [r4, #12]
    5670:	4293      	cmp	r3, r2
    5672:	d271      	bcs.n	5758 <f_write+0x1d8>
			fp->dsect = sect;
    5674:	4643      	mov	r3, r8
    5676:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5678:	68a3      	ldr	r3, [r4, #8]
    567a:	05dd      	lsls	r5, r3, #23
    567c:	0ded      	lsrs	r5, r5, #23
    567e:	2380      	movs	r3, #128	; 0x80
    5680:	009b      	lsls	r3, r3, #2
    5682:	1b5d      	subs	r5, r3, r5
    5684:	42b5      	cmp	r5, r6
    5686:	d900      	bls.n	568a <f_write+0x10a>
    5688:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    568a:	69a1      	ldr	r1, [r4, #24]
    568c:	6820      	ldr	r0, [r4, #0]
    568e:	4b46      	ldr	r3, [pc, #280]	; (57a8 <f_write+0x228>)
    5690:	4798      	blx	r3
    5692:	2800      	cmp	r0, #0
    5694:	d172      	bne.n	577c <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    5696:	68a3      	ldr	r3, [r4, #8]
    5698:	05d8      	lsls	r0, r3, #23
    569a:	0dc0      	lsrs	r0, r0, #23
    569c:	3030      	adds	r0, #48	; 0x30
    569e:	6823      	ldr	r3, [r4, #0]
    56a0:	469c      	mov	ip, r3
    56a2:	4460      	add	r0, ip
    56a4:	002a      	movs	r2, r5
    56a6:	0039      	movs	r1, r7
    56a8:	4b40      	ldr	r3, [pc, #256]	; (57ac <f_write+0x22c>)
    56aa:	4798      	blx	r3
		fp->fs->wflag = 1;
    56ac:	2301      	movs	r3, #1
    56ae:	6822      	ldr	r2, [r4, #0]
    56b0:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    56b2:	197f      	adds	r7, r7, r5
    56b4:	68a3      	ldr	r3, [r4, #8]
    56b6:	195b      	adds	r3, r3, r5
    56b8:	60a3      	str	r3, [r4, #8]
    56ba:	464b      	mov	r3, r9
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	195b      	adds	r3, r3, r5
    56c0:	464a      	mov	r2, r9
    56c2:	6013      	str	r3, [r2, #0]
    56c4:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    56c6:	d090      	beq.n	55ea <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    56c8:	68a3      	ldr	r3, [r4, #8]
    56ca:	05da      	lsls	r2, r3, #23
    56cc:	d1d4      	bne.n	5678 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    56ce:	6820      	ldr	r0, [r4, #0]
    56d0:	7882      	ldrb	r2, [r0, #2]
    56d2:	3a01      	subs	r2, #1
    56d4:	0a5d      	lsrs	r5, r3, #9
    56d6:	4015      	ands	r5, r2
    56d8:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    56da:	2d00      	cmp	r5, #0
    56dc:	d10b      	bne.n	56f6 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    56de:	2b00      	cmp	r3, #0
    56e0:	d000      	beq.n	56e4 <f_write+0x164>
    56e2:	e77b      	b.n	55dc <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    56e4:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    56e6:	2b00      	cmp	r3, #0
    56e8:	d100      	bne.n	56ec <f_write+0x16c>
    56ea:	e771      	b.n	55d0 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    56ec:	2b01      	cmp	r3, #1
    56ee:	d086      	beq.n	55fe <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    56f0:	1c5a      	adds	r2, r3, #1
    56f2:	d08b      	beq.n	560c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    56f4:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    56f6:	6820      	ldr	r0, [r4, #0]
    56f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    56fa:	69a2      	ldr	r2, [r4, #24]
    56fc:	4293      	cmp	r3, r2
    56fe:	d08c      	beq.n	561a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5700:	6823      	ldr	r3, [r4, #0]
    5702:	469a      	mov	sl, r3
    5704:	6961      	ldr	r1, [r4, #20]
    5706:	0018      	movs	r0, r3
    5708:	4b29      	ldr	r3, [pc, #164]	; (57b0 <f_write+0x230>)
    570a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    570c:	2800      	cmp	r0, #0
    570e:	d091      	beq.n	5634 <f_write+0xb4>
			sect += csect;
    5710:	4680      	mov	r8, r0
    5712:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    5714:	0a73      	lsrs	r3, r6, #9
    5716:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    5718:	d0a8      	beq.n	566c <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    571a:	4653      	mov	r3, sl
    571c:	789b      	ldrb	r3, [r3, #2]
    571e:	465a      	mov	r2, fp
    5720:	18aa      	adds	r2, r5, r2
    5722:	429a      	cmp	r2, r3
    5724:	d901      	bls.n	572a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    5726:	1b5b      	subs	r3, r3, r5
    5728:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    572a:	465b      	mov	r3, fp
    572c:	466a      	mov	r2, sp
    572e:	71d3      	strb	r3, [r2, #7]
    5730:	79d3      	ldrb	r3, [r2, #7]
    5732:	4652      	mov	r2, sl
    5734:	7850      	ldrb	r0, [r2, #1]
    5736:	4642      	mov	r2, r8
    5738:	0039      	movs	r1, r7
    573a:	4d1e      	ldr	r5, [pc, #120]	; (57b4 <f_write+0x234>)
    573c:	47a8      	blx	r5
    573e:	2800      	cmp	r0, #0
    5740:	d000      	beq.n	5744 <f_write+0x1c4>
    5742:	e77f      	b.n	5644 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5744:	6823      	ldr	r3, [r4, #0]
    5746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5748:	4641      	mov	r1, r8
    574a:	1a50      	subs	r0, r2, r1
    574c:	4583      	cmp	fp, r0
    574e:	d900      	bls.n	5752 <f_write+0x1d2>
    5750:	e780      	b.n	5654 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5752:	465b      	mov	r3, fp
    5754:	025d      	lsls	r5, r3, #9
				continue;
    5756:	e7ac      	b.n	56b2 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5758:	2100      	movs	r1, #0
    575a:	4650      	mov	r0, sl
    575c:	4b12      	ldr	r3, [pc, #72]	; (57a8 <f_write+0x228>)
    575e:	4798      	blx	r3
    5760:	2800      	cmp	r0, #0
    5762:	d103      	bne.n	576c <f_write+0x1ec>
				fp->fs->winsect = sect;
    5764:	6823      	ldr	r3, [r4, #0]
    5766:	4642      	mov	r2, r8
    5768:	62da      	str	r2, [r3, #44]	; 0x2c
    576a:	e783      	b.n	5674 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    576c:	79a2      	ldrb	r2, [r4, #6]
    576e:	2380      	movs	r3, #128	; 0x80
    5770:	425b      	negs	r3, r3
    5772:	4313      	orrs	r3, r2
    5774:	71a3      	strb	r3, [r4, #6]
    5776:	2301      	movs	r3, #1
    5778:	9300      	str	r3, [sp, #0]
    577a:	e009      	b.n	5790 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    577c:	79a2      	ldrb	r2, [r4, #6]
    577e:	2380      	movs	r3, #128	; 0x80
    5780:	425b      	negs	r3, r3
    5782:	4313      	orrs	r3, r2
    5784:	71a3      	strb	r3, [r4, #6]
    5786:	2301      	movs	r3, #1
    5788:	9300      	str	r3, [sp, #0]
    578a:	e001      	b.n	5790 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    578c:	2302      	movs	r3, #2
    578e:	9300      	str	r3, [sp, #0]
}
    5790:	9800      	ldr	r0, [sp, #0]
    5792:	b003      	add	sp, #12
    5794:	bc3c      	pop	{r2, r3, r4, r5}
    5796:	4690      	mov	r8, r2
    5798:	4699      	mov	r9, r3
    579a:	46a2      	mov	sl, r4
    579c:	46ab      	mov	fp, r5
    579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57a0:	000040b5 	.word	0x000040b5
    57a4:	000048b5 	.word	0x000048b5
    57a8:	00004539 	.word	0x00004539
    57ac:	00004059 	.word	0x00004059
    57b0:	0000407f 	.word	0x0000407f
    57b4:	00003f19 	.word	0x00003f19

000057b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    57b8:	b570      	push	{r4, r5, r6, lr}
    57ba:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    57bc:	8881      	ldrh	r1, [r0, #4]
    57be:	6800      	ldr	r0, [r0, #0]
    57c0:	4b1c      	ldr	r3, [pc, #112]	; (5834 <f_sync+0x7c>)
    57c2:	4798      	blx	r3
	if (res == FR_OK) {
    57c4:	2800      	cmp	r0, #0
    57c6:	d102      	bne.n	57ce <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    57c8:	79a3      	ldrb	r3, [r4, #6]
    57ca:	069b      	lsls	r3, r3, #26
    57cc:	d400      	bmi.n	57d0 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    57ce:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    57d0:	69e1      	ldr	r1, [r4, #28]
    57d2:	6820      	ldr	r0, [r4, #0]
    57d4:	4b18      	ldr	r3, [pc, #96]	; (5838 <f_sync+0x80>)
    57d6:	4798      	blx	r3
			if (res == FR_OK) {
    57d8:	2800      	cmp	r0, #0
    57da:	d1f8      	bne.n	57ce <f_sync+0x16>
				dir = fp->dir_ptr;
    57dc:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    57de:	7aeb      	ldrb	r3, [r5, #11]
    57e0:	2220      	movs	r2, #32
    57e2:	4313      	orrs	r3, r2
    57e4:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    57e6:	7b23      	ldrb	r3, [r4, #12]
    57e8:	772b      	strb	r3, [r5, #28]
    57ea:	89a3      	ldrh	r3, [r4, #12]
    57ec:	0a1b      	lsrs	r3, r3, #8
    57ee:	776b      	strb	r3, [r5, #29]
    57f0:	89e3      	ldrh	r3, [r4, #14]
    57f2:	77ab      	strb	r3, [r5, #30]
    57f4:	7be3      	ldrb	r3, [r4, #15]
    57f6:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    57f8:	7c23      	ldrb	r3, [r4, #16]
    57fa:	76ab      	strb	r3, [r5, #26]
    57fc:	8a23      	ldrh	r3, [r4, #16]
    57fe:	0a1b      	lsrs	r3, r3, #8
    5800:	76eb      	strb	r3, [r5, #27]
    5802:	8a63      	ldrh	r3, [r4, #18]
    5804:	752b      	strb	r3, [r5, #20]
    5806:	8a63      	ldrh	r3, [r4, #18]
    5808:	0a1b      	lsrs	r3, r3, #8
    580a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    580c:	4b0b      	ldr	r3, [pc, #44]	; (583c <f_sync+0x84>)
    580e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    5810:	75a8      	strb	r0, [r5, #22]
    5812:	0a03      	lsrs	r3, r0, #8
    5814:	75eb      	strb	r3, [r5, #23]
    5816:	0c03      	lsrs	r3, r0, #16
    5818:	762b      	strb	r3, [r5, #24]
    581a:	0e00      	lsrs	r0, r0, #24
    581c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    581e:	79a3      	ldrb	r3, [r4, #6]
    5820:	2220      	movs	r2, #32
    5822:	4393      	bics	r3, r2
    5824:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    5826:	2301      	movs	r3, #1
    5828:	6822      	ldr	r2, [r4, #0]
    582a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    582c:	6820      	ldr	r0, [r4, #0]
    582e:	4b04      	ldr	r3, [pc, #16]	; (5840 <f_sync+0x88>)
    5830:	4798      	blx	r3
    5832:	e7cc      	b.n	57ce <f_sync+0x16>
    5834:	000040b5 	.word	0x000040b5
    5838:	00004539 	.word	0x00004539
    583c:	00004009 	.word	0x00004009
    5840:	00004f91 	.word	0x00004f91

00005844 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5844:	b510      	push	{r4, lr}
    5846:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5848:	4b03      	ldr	r3, [pc, #12]	; (5858 <f_close+0x14>)
    584a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    584c:	2800      	cmp	r0, #0
    584e:	d101      	bne.n	5854 <f_close+0x10>
    5850:	2300      	movs	r3, #0
    5852:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5854:	bd10      	pop	{r4, pc}
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	000057b9 	.word	0x000057b9

0000585c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    585e:	46de      	mov	lr, fp
    5860:	4657      	mov	r7, sl
    5862:	464e      	mov	r6, r9
    5864:	4645      	mov	r5, r8
    5866:	b5e0      	push	{r5, r6, r7, lr}
    5868:	0004      	movs	r4, r0
    586a:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    586c:	8881      	ldrh	r1, [r0, #4]
    586e:	6800      	ldr	r0, [r0, #0]
    5870:	4b57      	ldr	r3, [pc, #348]	; (59d0 <f_lseek+0x174>)
    5872:	4798      	blx	r3
    5874:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5876:	d000      	beq.n	587a <f_lseek+0x1e>
    5878:	e0a2      	b.n	59c0 <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    587a:	79a3      	ldrb	r3, [r4, #6]
    587c:	b25a      	sxtb	r2, r3
    587e:	2a00      	cmp	r2, #0
    5880:	da00      	bge.n	5884 <f_lseek+0x28>
    5882:	e09c      	b.n	59be <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5884:	68e2      	ldr	r2, [r4, #12]
    5886:	42b2      	cmp	r2, r6
    5888:	d202      	bcs.n	5890 <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    588a:	079b      	lsls	r3, r3, #30
    588c:	d400      	bmi.n	5890 <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    588e:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    5890:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    5892:	2300      	movs	r3, #0
    5894:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    5896:	2e00      	cmp	r6, #0
    5898:	d100      	bne.n	589c <f_lseek+0x40>
    589a:	e091      	b.n	59c0 <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    589c:	6823      	ldr	r3, [r4, #0]
    589e:	4699      	mov	r9, r3
    58a0:	789f      	ldrb	r7, [r3, #2]
    58a2:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    58a4:	2800      	cmp	r0, #0
    58a6:	d013      	beq.n	58d0 <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    58a8:	1e43      	subs	r3, r0, #1
    58aa:	4698      	mov	r8, r3
    58ac:	1e70      	subs	r0, r6, #1
    58ae:	4b49      	ldr	r3, [pc, #292]	; (59d4 <f_lseek+0x178>)
    58b0:	469a      	mov	sl, r3
    58b2:	0039      	movs	r1, r7
    58b4:	4798      	blx	r3
    58b6:	4683      	mov	fp, r0
    58b8:	0039      	movs	r1, r7
    58ba:	4640      	mov	r0, r8
    58bc:	47d0      	blx	sl
			if (ifptr > 0 &&
    58be:	4583      	cmp	fp, r0
    58c0:	d306      	bcc.n	58d0 <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    58c2:	4278      	negs	r0, r7
    58c4:	4643      	mov	r3, r8
    58c6:	4003      	ands	r3, r0
    58c8:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    58ca:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    58cc:	6960      	ldr	r0, [r4, #20]
    58ce:	e003      	b.n	58d8 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    58d0:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    58d2:	2800      	cmp	r0, #0
    58d4:	d00b      	beq.n	58ee <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    58d6:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    58d8:	2800      	cmp	r0, #0
    58da:	d060      	beq.n	599e <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    58dc:	42be      	cmp	r6, r7
    58de:	d93a      	bls.n	5956 <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    58e0:	2302      	movs	r3, #2
    58e2:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    58e4:	4b3c      	ldr	r3, [pc, #240]	; (59d8 <f_lseek+0x17c>)
    58e6:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    58e8:	4b3c      	ldr	r3, [pc, #240]	; (59dc <f_lseek+0x180>)
    58ea:	4699      	mov	r9, r3
    58ec:	e029      	b.n	5942 <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    58ee:	2100      	movs	r1, #0
    58f0:	4648      	mov	r0, r9
    58f2:	4b39      	ldr	r3, [pc, #228]	; (59d8 <f_lseek+0x17c>)
    58f4:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    58f6:	2801      	cmp	r0, #1
    58f8:	d003      	beq.n	5902 <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    58fa:	1c43      	adds	r3, r0, #1
    58fc:	d008      	beq.n	5910 <f_lseek+0xb4>
					fp->sclust = clst;
    58fe:	6120      	str	r0, [r4, #16]
    5900:	e7e9      	b.n	58d6 <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5902:	79a2      	ldrb	r2, [r4, #6]
    5904:	2380      	movs	r3, #128	; 0x80
    5906:	425b      	negs	r3, r3
    5908:	4313      	orrs	r3, r2
    590a:	71a3      	strb	r3, [r4, #6]
    590c:	2502      	movs	r5, #2
    590e:	e057      	b.n	59c0 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5910:	79a2      	ldrb	r2, [r4, #6]
    5912:	2380      	movs	r3, #128	; 0x80
    5914:	425b      	negs	r3, r3
    5916:	4313      	orrs	r3, r2
    5918:	71a3      	strb	r3, [r4, #6]
    591a:	2501      	movs	r5, #1
    591c:	e050      	b.n	59c0 <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    591e:	0001      	movs	r1, r0
    5920:	6820      	ldr	r0, [r4, #0]
    5922:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5924:	1c43      	adds	r3, r0, #1
    5926:	d028      	beq.n	597a <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5928:	2801      	cmp	r0, #1
    592a:	d92d      	bls.n	5988 <f_lseek+0x12c>
    592c:	6823      	ldr	r3, [r4, #0]
    592e:	699b      	ldr	r3, [r3, #24]
    5930:	4298      	cmp	r0, r3
    5932:	d229      	bcs.n	5988 <f_lseek+0x12c>
					fp->clust = clst;
    5934:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    5936:	68a3      	ldr	r3, [r4, #8]
    5938:	19db      	adds	r3, r3, r7
    593a:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    593c:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    593e:	42b7      	cmp	r7, r6
    5940:	d209      	bcs.n	5956 <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5942:	79a3      	ldrb	r3, [r4, #6]
    5944:	4642      	mov	r2, r8
    5946:	421a      	tst	r2, r3
    5948:	d0e9      	beq.n	591e <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    594a:	0001      	movs	r1, r0
    594c:	6820      	ldr	r0, [r4, #0]
    594e:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    5950:	2800      	cmp	r0, #0
    5952:	d1e7      	bne.n	5924 <f_lseek+0xc8>
							ofs = bcs; break;
    5954:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    5956:	68a3      	ldr	r3, [r4, #8]
    5958:	199b      	adds	r3, r3, r6
    595a:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    595c:	05f3      	lsls	r3, r6, #23
    595e:	d01d      	beq.n	599c <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    5960:	0001      	movs	r1, r0
    5962:	6820      	ldr	r0, [r4, #0]
    5964:	4b1e      	ldr	r3, [pc, #120]	; (59e0 <f_lseek+0x184>)
    5966:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5968:	2800      	cmp	r0, #0
    596a:	d114      	bne.n	5996 <f_lseek+0x13a>
    596c:	79a2      	ldrb	r2, [r4, #6]
    596e:	2380      	movs	r3, #128	; 0x80
    5970:	425b      	negs	r3, r3
    5972:	4313      	orrs	r3, r2
    5974:	71a3      	strb	r3, [r4, #6]
    5976:	2502      	movs	r5, #2
    5978:	e022      	b.n	59c0 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    597a:	79a2      	ldrb	r2, [r4, #6]
    597c:	2380      	movs	r3, #128	; 0x80
    597e:	425b      	negs	r3, r3
    5980:	4313      	orrs	r3, r2
    5982:	71a3      	strb	r3, [r4, #6]
    5984:	2501      	movs	r5, #1
    5986:	e01b      	b.n	59c0 <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5988:	79a2      	ldrb	r2, [r4, #6]
    598a:	2380      	movs	r3, #128	; 0x80
    598c:	425b      	negs	r3, r3
    598e:	4313      	orrs	r3, r2
    5990:	71a3      	strb	r3, [r4, #6]
    5992:	2502      	movs	r5, #2
    5994:	e014      	b.n	59c0 <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    5996:	0a76      	lsrs	r6, r6, #9
    5998:	1830      	adds	r0, r6, r0
    599a:	e000      	b.n	599e <f_lseek+0x142>
		fp->fptr = nsect = 0;
    599c:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    599e:	68a3      	ldr	r3, [r4, #8]
    59a0:	05da      	lsls	r2, r3, #23
    59a2:	d003      	beq.n	59ac <f_lseek+0x150>
    59a4:	69a2      	ldr	r2, [r4, #24]
    59a6:	4290      	cmp	r0, r2
    59a8:	d000      	beq.n	59ac <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    59aa:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    59ac:	68e2      	ldr	r2, [r4, #12]
    59ae:	4293      	cmp	r3, r2
    59b0:	d906      	bls.n	59c0 <f_lseek+0x164>
			fp->fsize = fp->fptr;
    59b2:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    59b4:	79a3      	ldrb	r3, [r4, #6]
    59b6:	2220      	movs	r2, #32
    59b8:	4313      	orrs	r3, r2
    59ba:	71a3      	strb	r3, [r4, #6]
    59bc:	e000      	b.n	59c0 <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    59be:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    59c0:	0028      	movs	r0, r5
    59c2:	bc3c      	pop	{r2, r3, r4, r5}
    59c4:	4690      	mov	r8, r2
    59c6:	4699      	mov	r9, r3
    59c8:	46a2      	mov	sl, r4
    59ca:	46ab      	mov	fp, r5
    59cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59ce:	46c0      	nop			; (mov r8, r8)
    59d0:	000040b5 	.word	0x000040b5
    59d4:	00008d29 	.word	0x00008d29
    59d8:	000048b5 	.word	0x000048b5
    59dc:	000045d9 	.word	0x000045d9
    59e0:	0000407f 	.word	0x0000407f

000059e4 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    59e4:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    59e6:	287f      	cmp	r0, #127	; 0x7f
    59e8:	d911      	bls.n	5a0e <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    59ea:	2900      	cmp	r1, #0
    59ec:	d111      	bne.n	5a12 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    59ee:	28c7      	cmp	r0, #199	; 0xc7
    59f0:	d017      	beq.n	5a22 <ff_convert+0x3e>
    59f2:	4a0d      	ldr	r2, [pc, #52]	; (5a28 <ff_convert+0x44>)
    59f4:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    59f6:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    59f8:	8811      	ldrh	r1, [r2, #0]
    59fa:	4281      	cmp	r1, r0
    59fc:	d004      	beq.n	5a08 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    59fe:	3301      	adds	r3, #1
    5a00:	b29b      	uxth	r3, r3
    5a02:	3202      	adds	r2, #2
    5a04:	2b80      	cmp	r3, #128	; 0x80
    5a06:	d1f7      	bne.n	59f8 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5a08:	3380      	adds	r3, #128	; 0x80
    5a0a:	20ff      	movs	r0, #255	; 0xff
    5a0c:	4003      	ands	r3, r0
		}
	}

	return c;
}
    5a0e:	0018      	movs	r0, r3
    5a10:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5a12:	2300      	movs	r3, #0
    5a14:	28ff      	cmp	r0, #255	; 0xff
    5a16:	d8fa      	bhi.n	5a0e <ff_convert+0x2a>
    5a18:	3880      	subs	r0, #128	; 0x80
    5a1a:	0040      	lsls	r0, r0, #1
    5a1c:	4b02      	ldr	r3, [pc, #8]	; (5a28 <ff_convert+0x44>)
    5a1e:	5ac3      	ldrh	r3, [r0, r3]
    5a20:	e7f5      	b.n	5a0e <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5a22:	2300      	movs	r3, #0
    5a24:	e7f0      	b.n	5a08 <ff_convert+0x24>
    5a26:	46c0      	nop			; (mov r8, r8)
    5a28:	0000a668 	.word	0x0000a668

00005a2c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5a2c:	2861      	cmp	r0, #97	; 0x61
    5a2e:	d014      	beq.n	5a5a <ff_wtoupper+0x2e>
    5a30:	4b0b      	ldr	r3, [pc, #44]	; (5a60 <ff_wtoupper+0x34>)
    5a32:	3304      	adds	r3, #4
    5a34:	2101      	movs	r1, #1
    5a36:	2262      	movs	r2, #98	; 0x62
    5a38:	4290      	cmp	r0, r2
    5a3a:	d007      	beq.n	5a4c <ff_wtoupper+0x20>
    5a3c:	3101      	adds	r1, #1
    5a3e:	3302      	adds	r3, #2
    5a40:	1e9a      	subs	r2, r3, #2
    5a42:	8812      	ldrh	r2, [r2, #0]
    5a44:	2a00      	cmp	r2, #0
    5a46:	d1f7      	bne.n	5a38 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5a48:	0003      	movs	r3, r0
    5a4a:	e004      	b.n	5a56 <ff_wtoupper+0x2a>
    5a4c:	1e03      	subs	r3, r0, #0
    5a4e:	d002      	beq.n	5a56 <ff_wtoupper+0x2a>
    5a50:	0049      	lsls	r1, r1, #1
    5a52:	4b04      	ldr	r3, [pc, #16]	; (5a64 <ff_wtoupper+0x38>)
    5a54:	5acb      	ldrh	r3, [r1, r3]
}
    5a56:	0018      	movs	r0, r3
    5a58:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5a5a:	2100      	movs	r1, #0
    5a5c:	e7f8      	b.n	5a50 <ff_wtoupper+0x24>
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	0000a768 	.word	0x0000a768
    5a64:	0000a948 	.word	0x0000a948

00005a68 <audio_sync_reached_callback>:
	return true;
}

static void audio_sync_reached_callback(void)
{
	sync_reached = true;
    5a68:	2201      	movs	r2, #1
    5a6a:	4b01      	ldr	r3, [pc, #4]	; (5a70 <audio_sync_reached_callback+0x8>)
    5a6c:	701a      	strb	r2, [r3, #0]
}
    5a6e:	4770      	bx	lr
    5a70:	200002da 	.word	0x200002da

00005a74 <audio_in_init>:
{
    5a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a76:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
    5a78:	a90f      	add	r1, sp, #60	; 0x3c
    5a7a:	2501      	movs	r5, #1
    5a7c:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    5a7e:	2600      	movs	r6, #0
    5a80:	708e      	strb	r6, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5a82:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
    5a84:	2014      	movs	r0, #20
    5a86:	4f2c      	ldr	r7, [pc, #176]	; (5b38 <audio_in_init+0xc4>)
    5a88:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5a8a:	2280      	movs	r2, #128	; 0x80
    5a8c:	0352      	lsls	r2, r2, #13
    5a8e:	4b2b      	ldr	r3, [pc, #172]	; (5b3c <audio_in_init+0xc8>)
    5a90:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    5a92:	4c2b      	ldr	r4, [pc, #172]	; (5b40 <audio_in_init+0xcc>)
    5a94:	232f      	movs	r3, #47	; 0x2f
    5a96:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5a98:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
    5a9a:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5a9c:	466b      	mov	r3, sp
    5a9e:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    5aa0:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5aa2:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5aa4:	4669      	mov	r1, sp
    5aa6:	202f      	movs	r0, #47	; 0x2f
    5aa8:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    5aaa:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5aac:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5aae:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5ab0:	2900      	cmp	r1, #0
    5ab2:	d104      	bne.n	5abe <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
    5ab4:	095a      	lsrs	r2, r3, #5
    5ab6:	01d2      	lsls	r2, r2, #7
    5ab8:	4920      	ldr	r1, [pc, #128]	; (5b3c <audio_in_init+0xc8>)
    5aba:	468c      	mov	ip, r1
    5abc:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5abe:	261f      	movs	r6, #31
    5ac0:	4033      	ands	r3, r6
    5ac2:	2501      	movs	r5, #1
    5ac4:	0029      	movs	r1, r5
    5ac6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5ac8:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    5aca:	ac01      	add	r4, sp, #4
    5acc:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5ace:	2300      	movs	r3, #0
    5ad0:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5ad2:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5ad4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5ad6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5ad8:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5ada:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    5adc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5ade:	2224      	movs	r2, #36	; 0x24
    5ae0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5ae2:	3a18      	subs	r2, #24
    5ae4:	2100      	movs	r1, #0
    5ae6:	a807      	add	r0, sp, #28
    5ae8:	4b16      	ldr	r3, [pc, #88]	; (5b44 <audio_in_init+0xd0>)
    5aea:	4798      	blx	r3
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
    5aec:	2380      	movs	r3, #128	; 0x80
    5aee:	039b      	lsls	r3, r3, #14
    5af0:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
    5af2:	4b15      	ldr	r3, [pc, #84]	; (5b48 <audio_in_init+0xd4>)
    5af4:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
    5af6:	4b15      	ldr	r3, [pc, #84]	; (5b4c <audio_in_init+0xd8>)
    5af8:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
    5afa:	4b15      	ldr	r3, [pc, #84]	; (5b50 <audio_in_init+0xdc>)
    5afc:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
    5afe:	2301      	movs	r3, #1
    5b00:	425b      	negs	r3, r3
    5b02:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
    5b04:	4b13      	ldr	r3, [pc, #76]	; (5b54 <audio_in_init+0xe0>)
    5b06:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
    5b08:	4f13      	ldr	r7, [pc, #76]	; (5b58 <audio_in_init+0xe4>)
    5b0a:	0022      	movs	r2, r4
    5b0c:	4913      	ldr	r1, [pc, #76]	; (5b5c <audio_in_init+0xe8>)
    5b0e:	0038      	movs	r0, r7
    5b10:	4b13      	ldr	r3, [pc, #76]	; (5b60 <audio_in_init+0xec>)
    5b12:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5b14:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5b16:	0020      	movs	r0, r4
    5b18:	4b12      	ldr	r3, [pc, #72]	; (5b64 <audio_in_init+0xf0>)
    5b1a:	4798      	blx	r3
    5b1c:	4006      	ands	r6, r0
    5b1e:	40b5      	lsls	r5, r6
    5b20:	4b11      	ldr	r3, [pc, #68]	; (5b68 <audio_in_init+0xf4>)
    5b22:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5b24:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    5b26:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    5b28:	2b00      	cmp	r3, #0
    5b2a:	d1fc      	bne.n	5b26 <audio_in_init+0xb2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5b2c:	6823      	ldr	r3, [r4, #0]
    5b2e:	2202      	movs	r2, #2
    5b30:	4313      	orrs	r3, r2
    5b32:	6023      	str	r3, [r4, #0]
}
    5b34:	b011      	add	sp, #68	; 0x44
    5b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b38:	00008851 	.word	0x00008851
    5b3c:	41004400 	.word	0x41004400
    5b40:	200006bc 	.word	0x200006bc
    5b44:	00009317 	.word	0x00009317
    5b48:	00100002 	.word	0x00100002
    5b4c:	00110002 	.word	0x00110002
    5b50:	00120002 	.word	0x00120002
    5b54:	00b71b00 	.word	0x00b71b00
    5b58:	20000628 	.word	0x20000628
    5b5c:	42000c00 	.word	0x42000c00
    5b60:	00007805 	.word	0x00007805
    5b64:	0000256d 	.word	0x0000256d
    5b68:	e000e100 	.word	0xe000e100

00005b6c <audio_record_init>:
bool audio_record_init(void) {
    5b6c:	b510      	push	{r4, lr}
    5b6e:	b086      	sub	sp, #24
	char file_name[] = "180212_140925.wav";
    5b70:	aa01      	add	r2, sp, #4
    5b72:	4b1b      	ldr	r3, [pc, #108]	; (5be0 <audio_record_init+0x74>)
    5b74:	cb13      	ldmia	r3!, {r0, r1, r4}
    5b76:	c213      	stmia	r2!, {r0, r1, r4}
    5b78:	0011      	movs	r1, r2
    5b7a:	681a      	ldr	r2, [r3, #0]
    5b7c:	600a      	str	r2, [r1, #0]
    5b7e:	889b      	ldrh	r3, [r3, #4]
    5b80:	808b      	strh	r3, [r1, #4]
	memset(&file_sys, 0, sizeof(FATFS));
    5b82:	4c18      	ldr	r4, [pc, #96]	; (5be4 <audio_record_init+0x78>)
    5b84:	228c      	movs	r2, #140	; 0x8c
    5b86:	0092      	lsls	r2, r2, #2
    5b88:	2100      	movs	r1, #0
    5b8a:	0020      	movs	r0, r4
    5b8c:	4b16      	ldr	r3, [pc, #88]	; (5be8 <audio_record_init+0x7c>)
    5b8e:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    5b90:	0021      	movs	r1, r4
    5b92:	2000      	movs	r0, #0
    5b94:	4b15      	ldr	r3, [pc, #84]	; (5bec <audio_record_init+0x80>)
    5b96:	4798      	blx	r3
		return false;
    5b98:	2300      	movs	r3, #0
	if(res == FR_INVALID_DRIVE) {
    5b9a:	280b      	cmp	r0, #11
    5b9c:	d01d      	beq.n	5bda <audio_record_init+0x6e>
	res = f_open(&file_object, file_name, FA_CREATE_ALWAYS | FA_WRITE);
    5b9e:	220a      	movs	r2, #10
    5ba0:	a901      	add	r1, sp, #4
    5ba2:	4813      	ldr	r0, [pc, #76]	; (5bf0 <audio_record_init+0x84>)
    5ba4:	4b13      	ldr	r3, [pc, #76]	; (5bf4 <audio_record_init+0x88>)
    5ba6:	4798      	blx	r3
	if(res != FR_OK) {
    5ba8:	2800      	cmp	r0, #0
    5baa:	d111      	bne.n	5bd0 <audio_record_init+0x64>
	res = f_write(&file_object, wave_header, 44, (UINT *)&bytes);
    5bac:	466b      	mov	r3, sp
    5bae:	222c      	movs	r2, #44	; 0x2c
    5bb0:	4911      	ldr	r1, [pc, #68]	; (5bf8 <audio_record_init+0x8c>)
    5bb2:	480f      	ldr	r0, [pc, #60]	; (5bf0 <audio_record_init+0x84>)
    5bb4:	4c11      	ldr	r4, [pc, #68]	; (5bfc <audio_record_init+0x90>)
    5bb6:	47a0      	blx	r4
	return true;
    5bb8:	2301      	movs	r3, #1
	if(res != FR_OK) {
    5bba:	2800      	cmp	r0, #0
    5bbc:	d00d      	beq.n	5bda <audio_record_init+0x6e>
		printf("Error while writing WAV header: #%d\n\r", res);
    5bbe:	0001      	movs	r1, r0
    5bc0:	480f      	ldr	r0, [pc, #60]	; (5c00 <audio_record_init+0x94>)
    5bc2:	4b10      	ldr	r3, [pc, #64]	; (5c04 <audio_record_init+0x98>)
    5bc4:	4798      	blx	r3
		f_close(&file_object);
    5bc6:	480a      	ldr	r0, [pc, #40]	; (5bf0 <audio_record_init+0x84>)
    5bc8:	4b0f      	ldr	r3, [pc, #60]	; (5c08 <audio_record_init+0x9c>)
    5bca:	4798      	blx	r3
		return false;
    5bcc:	2300      	movs	r3, #0
    5bce:	e004      	b.n	5bda <audio_record_init+0x6e>
		printf("Error while opening file: #%d\n\r", res);
    5bd0:	0001      	movs	r1, r0
    5bd2:	480e      	ldr	r0, [pc, #56]	; (5c0c <audio_record_init+0xa0>)
    5bd4:	4b0b      	ldr	r3, [pc, #44]	; (5c04 <audio_record_init+0x98>)
    5bd6:	4798      	blx	r3
		return false;
    5bd8:	2300      	movs	r3, #0
}
    5bda:	0018      	movs	r0, r3
    5bdc:	b006      	add	sp, #24
    5bde:	bd10      	pop	{r4, pc}
    5be0:	0000ab70 	.word	0x0000ab70
    5be4:	200026c0 	.word	0x200026c0
    5be8:	00009317 	.word	0x00009317
    5bec:	000053c9 	.word	0x000053c9
    5bf0:	20000664 	.word	0x20000664
    5bf4:	000053f9 	.word	0x000053f9
    5bf8:	200000ac 	.word	0x200000ac
    5bfc:	00005581 	.word	0x00005581
    5c00:	0000ab48 	.word	0x0000ab48
    5c04:	00009329 	.word	0x00009329
    5c08:	00005845 	.word	0x00005845
    5c0c:	0000ab28 	.word	0x0000ab28

00005c10 <audio_record_close>:
{
    5c10:	b530      	push	{r4, r5, lr}
    5c12:	b083      	sub	sp, #12
	volatile bool retVal = true;
    5c14:	2201      	movs	r2, #1
    5c16:	466b      	mov	r3, sp
    5c18:	70da      	strb	r2, [r3, #3]
	((uint16_t *)&wave_header)[WAVE_FORMAT_NUM_CHANNEL_OFFSET/2] = AUDIO_NUM_CHANNELS;
    5c1a:	4c18      	ldr	r4, [pc, #96]	; (5c7c <audio_record_close+0x6c>)
    5c1c:	2302      	movs	r3, #2
    5c1e:	82e3      	strh	r3, [r4, #22]
	((uint16_t *)&wave_header)[WAVE_FORMAT_BITS_PER_SAMPLE_OFFSET/2] = AUDIO_BITS_PER_SAMPLE;
    5c20:	330e      	adds	r3, #14
    5c22:	8463      	strh	r3, [r4, #34]	; 0x22
	((uint16_t *)&wave_header)[WAVE_FORMAT_BLOCK_ALIGN_OFFSET/2] = AUDIO_BITS_PER_SAMPLE/8 * AUDIO_NUM_CHANNELS;
    5c24:	3b0c      	subs	r3, #12
    5c26:	8423      	strh	r3, [r4, #32]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SAMPLE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE;
    5c28:	4b15      	ldr	r3, [pc, #84]	; (5c80 <audio_record_close+0x70>)
    5c2a:	61a3      	str	r3, [r4, #24]
	((uint32_t *)&wave_header)[WAVE_FORMAT_BYTE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE * AUDIO_NUM_CHANNELS * AUDIO_BITS_PER_SAMPLE/8;
    5c2c:	4b15      	ldr	r3, [pc, #84]	; (5c84 <audio_record_close+0x74>)
    5c2e:	61e3      	str	r3, [r4, #28]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SUBCHUNK2_SIZE_OFFSET/4] = audio_total_samples * AUDIO_BITS_PER_SAMPLE/8;
    5c30:	4b15      	ldr	r3, [pc, #84]	; (5c88 <audio_record_close+0x78>)
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	011b      	lsls	r3, r3, #4
    5c36:	08db      	lsrs	r3, r3, #3
    5c38:	62a3      	str	r3, [r4, #40]	; 0x28
	((uint32_t *)&wave_header)[WAVE_FORMAT_CHUNK_SIZE_OFFSET/4] = (audio_total_samples * AUDIO_BITS_PER_SAMPLE/8) + 36;
    5c3a:	3324      	adds	r3, #36	; 0x24
    5c3c:	6063      	str	r3, [r4, #4]
	f_lseek(&file_object, 0);
    5c3e:	4d13      	ldr	r5, [pc, #76]	; (5c8c <audio_record_close+0x7c>)
    5c40:	2100      	movs	r1, #0
    5c42:	0028      	movs	r0, r5
    5c44:	4b12      	ldr	r3, [pc, #72]	; (5c90 <audio_record_close+0x80>)
    5c46:	4798      	blx	r3
	res = f_write(&file_object, wave_header, 44, &bytes);
    5c48:	ab01      	add	r3, sp, #4
    5c4a:	222c      	movs	r2, #44	; 0x2c
    5c4c:	0021      	movs	r1, r4
    5c4e:	0028      	movs	r0, r5
    5c50:	4c10      	ldr	r4, [pc, #64]	; (5c94 <audio_record_close+0x84>)
    5c52:	47a0      	blx	r4
	if(res != FR_OK) {
    5c54:	2800      	cmp	r0, #0
    5c56:	d002      	beq.n	5c5e <audio_record_close+0x4e>
		retVal = false;
    5c58:	2200      	movs	r2, #0
    5c5a:	466b      	mov	r3, sp
    5c5c:	70da      	strb	r2, [r3, #3]
	f_close(&file_object);
    5c5e:	480b      	ldr	r0, [pc, #44]	; (5c8c <audio_record_close+0x7c>)
    5c60:	4b0d      	ldr	r3, [pc, #52]	; (5c98 <audio_record_close+0x88>)
    5c62:	4798      	blx	r3
	audio_total_samples = 0;
    5c64:	2200      	movs	r2, #0
    5c66:	4b08      	ldr	r3, [pc, #32]	; (5c88 <audio_record_close+0x78>)
    5c68:	601a      	str	r2, [r3, #0]
    5c6a:	2280      	movs	r2, #128	; 0x80
    5c6c:	0152      	lsls	r2, r2, #5
    5c6e:	4b0b      	ldr	r3, [pc, #44]	; (5c9c <audio_record_close+0x8c>)
    5c70:	619a      	str	r2, [r3, #24]
	return retVal;
    5c72:	466b      	mov	r3, sp
    5c74:	78d8      	ldrb	r0, [r3, #3]
    5c76:	b2c0      	uxtb	r0, r0
}
    5c78:	b003      	add	sp, #12
    5c7a:	bd30      	pop	{r4, r5, pc}
    5c7c:	200000ac 	.word	0x200000ac
    5c80:	0000ac44 	.word	0x0000ac44
    5c84:	0002b110 	.word	0x0002b110
    5c88:	200002d0 	.word	0x200002d0
    5c8c:	20000664 	.word	0x20000664
    5c90:	0000585d 	.word	0x0000585d
    5c94:	00005581 	.word	0x00005581
    5c98:	00005845 	.word	0x00005845
    5c9c:	41004400 	.word	0x41004400

00005ca0 <audio_record_1samp>:
void audio_record_1samp(bool ub) {
    5ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ca2:	b083      	sub	sp, #12
    5ca4:	0006      	movs	r6, r0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5ca6:	4c0e      	ldr	r4, [pc, #56]	; (5ce0 <audio_record_1samp+0x40>)
    5ca8:	2580      	movs	r5, #128	; 0x80
    5caa:	036d      	lsls	r5, r5, #13
    5cac:	6165      	str	r5, [r4, #20]
	spi_read_buffer_wait(&adc_spi_module, adc_vals, 2, 0xFF);
    5cae:	23ff      	movs	r3, #255	; 0xff
    5cb0:	2202      	movs	r2, #2
    5cb2:	a901      	add	r1, sp, #4
    5cb4:	480b      	ldr	r0, [pc, #44]	; (5ce4 <audio_record_1samp+0x44>)
    5cb6:	4f0c      	ldr	r7, [pc, #48]	; (5ce8 <audio_record_1samp+0x48>)
    5cb8:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    5cba:	61a5      	str	r5, [r4, #24]
	if(ub) {
    5cbc:	2e00      	cmp	r6, #0
    5cbe:	d106      	bne.n	5cce <audio_record_1samp+0x2e>
		audio_buffer[0][0] = 0x12;
    5cc0:	4b0a      	ldr	r3, [pc, #40]	; (5cec <audio_record_1samp+0x4c>)
    5cc2:	2212      	movs	r2, #18
    5cc4:	701a      	strb	r2, [r3, #0]
		audio_buffer[0][1] = 0x34;
    5cc6:	3222      	adds	r2, #34	; 0x22
    5cc8:	705a      	strb	r2, [r3, #1]
}
    5cca:	b003      	add	sp, #12
    5ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		audio_buffer[1][0] = 0x56;
    5cce:	4b07      	ldr	r3, [pc, #28]	; (5cec <audio_record_1samp+0x4c>)
    5cd0:	2156      	movs	r1, #86	; 0x56
    5cd2:	2280      	movs	r2, #128	; 0x80
    5cd4:	0112      	lsls	r2, r2, #4
    5cd6:	5499      	strb	r1, [r3, r2]
		audio_buffer[1][1] = 0x78;
    5cd8:	3122      	adds	r1, #34	; 0x22
    5cda:	4a05      	ldr	r2, [pc, #20]	; (5cf0 <audio_record_1samp+0x50>)
    5cdc:	5499      	strb	r1, [r3, r2]
    5cde:	e7f4      	b.n	5cca <audio_record_1samp+0x2a>
    5ce0:	41004400 	.word	0x41004400
    5ce4:	20000628 	.word	0x20000628
    5ce8:	00007a19 	.word	0x00007a19
    5cec:	200006c0 	.word	0x200006c0
    5cf0:	00000801 	.word	0x00000801

00005cf4 <audio_write_chunck>:
{
    5cf4:	b510      	push	{r4, lr}
    5cf6:	b082      	sub	sp, #8
	res = f_write(&file_object, (char *)audio_buffer[ub], AUDIO_CHUNK_SIZE, &bytes);
    5cf8:	02c1      	lsls	r1, r0, #11
    5cfa:	480e      	ldr	r0, [pc, #56]	; (5d34 <audio_write_chunck+0x40>)
    5cfc:	1809      	adds	r1, r1, r0
    5cfe:	ab01      	add	r3, sp, #4
    5d00:	2280      	movs	r2, #128	; 0x80
    5d02:	0112      	lsls	r2, r2, #4
    5d04:	480c      	ldr	r0, [pc, #48]	; (5d38 <audio_write_chunck+0x44>)
    5d06:	4c0d      	ldr	r4, [pc, #52]	; (5d3c <audio_write_chunck+0x48>)
    5d08:	47a0      	blx	r4
	if(res != FR_OK) {
    5d0a:	2800      	cmp	r0, #0
    5d0c:	d10a      	bne.n	5d24 <audio_write_chunck+0x30>
		res = f_sync(&file_object);
    5d0e:	480a      	ldr	r0, [pc, #40]	; (5d38 <audio_write_chunck+0x44>)
    5d10:	4b0b      	ldr	r3, [pc, #44]	; (5d40 <audio_write_chunck+0x4c>)
    5d12:	4798      	blx	r3
	return true;
    5d14:	2301      	movs	r3, #1
		if(res != FR_OK) {
    5d16:	2800      	cmp	r0, #0
    5d18:	d008      	beq.n	5d2c <audio_write_chunck+0x38>
			f_close(&file_object);
    5d1a:	4807      	ldr	r0, [pc, #28]	; (5d38 <audio_write_chunck+0x44>)
    5d1c:	4b09      	ldr	r3, [pc, #36]	; (5d44 <audio_write_chunck+0x50>)
    5d1e:	4798      	blx	r3
			return false;
    5d20:	2300      	movs	r3, #0
    5d22:	e003      	b.n	5d2c <audio_write_chunck+0x38>
		f_close(&file_object);
    5d24:	4804      	ldr	r0, [pc, #16]	; (5d38 <audio_write_chunck+0x44>)
    5d26:	4b07      	ldr	r3, [pc, #28]	; (5d44 <audio_write_chunck+0x50>)
    5d28:	4798      	blx	r3
		return false;
    5d2a:	2300      	movs	r3, #0
}
    5d2c:	0018      	movs	r0, r3
    5d2e:	b002      	add	sp, #8
    5d30:	bd10      	pop	{r4, pc}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	200006c0 	.word	0x200006c0
    5d38:	20000664 	.word	0x20000664
    5d3c:	00005581 	.word	0x00005581
    5d40:	000057b9 	.word	0x000057b9
    5d44:	00005845 	.word	0x00005845

00005d48 <audio_sync_init>:

void audio_sync_init(void)
{
    5d48:	b570      	push	{r4, r5, r6, lr}
    5d4a:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    5d4c:	4e12      	ldr	r6, [pc, #72]	; (5d98 <audio_sync_init+0x50>)
    5d4e:	ac01      	add	r4, sp, #4
    5d50:	0031      	movs	r1, r6
    5d52:	0020      	movs	r0, r4
    5d54:	4b11      	ldr	r3, [pc, #68]	; (5d9c <audio_sync_init+0x54>)
    5d56:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
    5d58:	2300      	movs	r3, #0
    5d5a:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    5d5c:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
    5d5e:	4b10      	ldr	r3, [pc, #64]	; (5da0 <audio_sync_init+0x58>)
    5d60:	6063      	str	r3, [r4, #4]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
    5d62:	4d10      	ldr	r5, [pc, #64]	; (5da4 <audio_sync_init+0x5c>)
    5d64:	0022      	movs	r2, r4
    5d66:	0031      	movs	r1, r6
    5d68:	0028      	movs	r0, r5
    5d6a:	4b0f      	ldr	r3, [pc, #60]	; (5da8 <audio_sync_init+0x60>)
    5d6c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5d6e:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5d70:	2102      	movs	r1, #2
    5d72:	6893      	ldr	r3, [r2, #8]
    5d74:	4219      	tst	r1, r3
    5d76:	d1fc      	bne.n	5d72 <audio_sync_init+0x2a>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5d78:	6813      	ldr	r3, [r2, #0]
    5d7a:	2102      	movs	r1, #2
    5d7c:	430b      	orrs	r3, r1
    5d7e:	6013      	str	r3, [r2, #0]
	tcc_enable(&audio_syncer_module);
	//tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, (tcc_callback_t)audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
    5d80:	4c08      	ldr	r4, [pc, #32]	; (5da4 <audio_sync_init+0x5c>)
    5d82:	2200      	movs	r2, #0
    5d84:	4909      	ldr	r1, [pc, #36]	; (5dac <audio_sync_init+0x64>)
    5d86:	0020      	movs	r0, r4
    5d88:	4b09      	ldr	r3, [pc, #36]	; (5db0 <audio_sync_init+0x68>)
    5d8a:	4798      	blx	r3
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
    5d8c:	2100      	movs	r1, #0
    5d8e:	0020      	movs	r0, r4
    5d90:	4b08      	ldr	r3, [pc, #32]	; (5db4 <audio_sync_init+0x6c>)
    5d92:	4798      	blx	r3
}
    5d94:	b02a      	add	sp, #168	; 0xa8
    5d96:	bd70      	pop	{r4, r5, r6, pc}
    5d98:	42002000 	.word	0x42002000
    5d9c:	0000036d 	.word	0x0000036d
    5da0:	00000429 	.word	0x00000429
    5da4:	200028f0 	.word	0x200028f0
    5da8:	000004b9 	.word	0x000004b9
    5dac:	00005a69 	.word	0x00005a69
    5db0:	000008c5 	.word	0x000008c5
    5db4:	000008dd 	.word	0x000008dd

00005db8 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    5db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dba:	b089      	sub	sp, #36	; 0x24
		sleepmgr_locks[i] = 0;
    5dbc:	4b60      	ldr	r3, [pc, #384]	; (5f40 <main+0x188>)
    5dbe:	2400      	movs	r4, #0
    5dc0:	701c      	strb	r4, [r3, #0]
    5dc2:	705c      	strb	r4, [r3, #1]
    5dc4:	709c      	strb	r4, [r3, #2]
    5dc6:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5dc8:	2501      	movs	r5, #1
    5dca:	711d      	strb	r5, [r3, #4]
	irq_initialize_vectors();

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    5dcc:	4b5d      	ldr	r3, [pc, #372]	; (5f44 <main+0x18c>)
    5dce:	4798      	blx	r3
	
	delay_init();
    5dd0:	4b5d      	ldr	r3, [pc, #372]	; (5f48 <main+0x190>)
    5dd2:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    5dd4:	aa03      	add	r2, sp, #12
    5dd6:	23a0      	movs	r3, #160	; 0xa0
    5dd8:	011b      	lsls	r3, r3, #4
    5dda:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    5ddc:	7094      	strb	r4, [r2, #2]
	config->continuously_update = false;
    5dde:	70d4      	strb	r4, [r2, #3]
	config->year_init_value     = 2000;
    5de0:	23fa      	movs	r3, #250	; 0xfa
    5de2:	00db      	lsls	r3, r3, #3
    5de4:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    5de6:	7214      	strb	r4, [r2, #8]
    5de8:	7254      	strb	r4, [r2, #9]
    5dea:	7294      	strb	r4, [r2, #10]
    5dec:	72d4      	strb	r4, [r2, #11]
    5dee:	7315      	strb	r5, [r2, #12]
    5df0:	7355      	strb	r5, [r2, #13]
    5df2:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    5df4:	2306      	movs	r3, #6
    5df6:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    5df8:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    5dfa:	4c54      	ldr	r4, [pc, #336]	; (5f4c <main+0x194>)
    5dfc:	4954      	ldr	r1, [pc, #336]	; (5f50 <main+0x198>)
    5dfe:	0020      	movs	r0, r4
    5e00:	4b54      	ldr	r3, [pc, #336]	; (5f54 <main+0x19c>)
    5e02:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5e04:	0020      	movs	r0, r4
    5e06:	4b54      	ldr	r3, [pc, #336]	; (5f58 <main+0x1a0>)
    5e08:	4798      	blx	r3
	current_time.year = 2018;
    5e0a:	a901      	add	r1, sp, #4
    5e0c:	4b53      	ldr	r3, [pc, #332]	; (5f5c <main+0x1a4>)
    5e0e:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    5e10:	2302      	movs	r3, #2
    5e12:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    5e14:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    5e16:	3309      	adds	r3, #9
    5e18:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    5e1a:	331c      	adds	r3, #28
    5e1c:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    5e1e:	3303      	adds	r3, #3
    5e20:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    5e22:	0020      	movs	r0, r4
    5e24:	4b4e      	ldr	r3, [pc, #312]	; (5f60 <main+0x1a8>)
    5e26:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    5e28:	0020      	movs	r0, r4
    5e2a:	4b4e      	ldr	r3, [pc, #312]	; (5f64 <main+0x1ac>)
    5e2c:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    5e2e:	4b4e      	ldr	r3, [pc, #312]	; (5f68 <main+0x1b0>)
    5e30:	4798      	blx	r3
	ui_powerdown();
    5e32:	4b4e      	ldr	r3, [pc, #312]	; (5f6c <main+0x1b4>)
    5e34:	4798      	blx	r3
	ui_cdc_init();
    5e36:	4b4e      	ldr	r3, [pc, #312]	; (5f70 <main+0x1b8>)
    5e38:	4798      	blx	r3
	ui_configure_callback();
    5e3a:	4b4e      	ldr	r3, [pc, #312]	; (5f74 <main+0x1bc>)
    5e3c:	4798      	blx	r3

	sd_mmc_init();
    5e3e:	4b4e      	ldr	r3, [pc, #312]	; (5f78 <main+0x1c0>)
    5e40:	4798      	blx	r3
	memories_initialization();
    5e42:	4b4e      	ldr	r3, [pc, #312]	; (5f7c <main+0x1c4>)
    5e44:	4798      	blx	r3
	
	audio_in_init();
    5e46:	4b4e      	ldr	r3, [pc, #312]	; (5f80 <main+0x1c8>)
    5e48:	4798      	blx	r3
	audio_sync_init();
    5e4a:	4b4e      	ldr	r3, [pc, #312]	; (5f84 <main+0x1cc>)
    5e4c:	4798      	blx	r3
	cpu_irq_enable();
    5e4e:	4b4e      	ldr	r3, [pc, #312]	; (5f88 <main+0x1d0>)
    5e50:	701d      	strb	r5, [r3, #0]
    5e52:	f3bf 8f5f 	dmb	sy
    5e56:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    5e58:	4b4c      	ldr	r3, [pc, #304]	; (5f8c <main+0x1d4>)
    5e5a:	4798      	blx	r3
	 * because the USB management & button detection
	 * are done by interrupt */
	for(;;) {
		if(rec_start_request) {
			/* Testing if SD card is present */
			if(sd_test_availability()) {
    5e5c:	4d4c      	ldr	r5, [pc, #304]	; (5f90 <main+0x1d8>)
				if(audio_record_init()) {
    5e5e:	4f4d      	ldr	r7, [pc, #308]	; (5f94 <main+0x1dc>)
					rec_init_done = true;
				}
				rec_start_request = false;
    5e60:	4e4d      	ldr	r6, [pc, #308]	; (5f98 <main+0x1e0>)
    5e62:	e06a      	b.n	5f3a <main+0x182>
			if(sd_test_availability()) {
    5e64:	47a8      	blx	r5
    5e66:	2800      	cmp	r0, #0
    5e68:	d01a      	beq.n	5ea0 <main+0xe8>
				if(audio_record_init()) {
    5e6a:	47b8      	blx	r7
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d002      	beq.n	5e76 <main+0xbe>
					rec_init_done = true;
    5e70:	2201      	movs	r2, #1
    5e72:	4b4a      	ldr	r3, [pc, #296]	; (5f9c <main+0x1e4>)
    5e74:	701a      	strb	r2, [r3, #0]
				rec_start_request = false;
    5e76:	2300      	movs	r3, #0
    5e78:	7033      	strb	r3, [r6, #0]
    5e7a:	e011      	b.n	5ea0 <main+0xe8>
			}
		}
		
		if(rec_stop_request) {
			rec_stop_request = false;
    5e7c:	2200      	movs	r2, #0
    5e7e:	4b48      	ldr	r3, [pc, #288]	; (5fa0 <main+0x1e8>)
    5e80:	701a      	strb	r2, [r3, #0]
			if(!audio_record_close()) {
    5e82:	4b48      	ldr	r3, [pc, #288]	; (5fa4 <main+0x1ec>)
    5e84:	4798      	blx	r3
    5e86:	2800      	cmp	r0, #0
    5e88:	d10e      	bne.n	5ea8 <main+0xf0>
				printf("ERROR closing recorded file\n\r");
    5e8a:	4847      	ldr	r0, [pc, #284]	; (5fa8 <main+0x1f0>)
    5e8c:	4b47      	ldr	r3, [pc, #284]	; (5fac <main+0x1f4>)
    5e8e:	4798      	blx	r3
    5e90:	e00a      	b.n	5ea8 <main+0xf0>
			audio_frame_cnt = 0;
			rec_init_done = false;
			rec_running = true;
		}
		
		if(sync_reached) {
    5e92:	4b47      	ldr	r3, [pc, #284]	; (5fb0 <main+0x1f8>)
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	2b00      	cmp	r3, #0
    5e98:	d11a      	bne.n	5ed0 <main+0x118>
		if(rec_start_request) {
    5e9a:	7823      	ldrb	r3, [r4, #0]
    5e9c:	2b00      	cmp	r3, #0
    5e9e:	d1e1      	bne.n	5e64 <main+0xac>
		if(rec_stop_request) {
    5ea0:	4b3f      	ldr	r3, [pc, #252]	; (5fa0 <main+0x1e8>)
    5ea2:	781b      	ldrb	r3, [r3, #0]
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	d1e9      	bne.n	5e7c <main+0xc4>
		if(rec_init_done) {
    5ea8:	4b3c      	ldr	r3, [pc, #240]	; (5f9c <main+0x1e4>)
    5eaa:	781b      	ldrb	r3, [r3, #0]
    5eac:	2b00      	cmp	r3, #0
    5eae:	d0f0      	beq.n	5e92 <main+0xda>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5eb0:	4b40      	ldr	r3, [pc, #256]	; (5fb4 <main+0x1fc>)
    5eb2:	2280      	movs	r2, #128	; 0x80
    5eb4:	00d2      	lsls	r2, r2, #3
    5eb6:	61da      	str	r2, [r3, #28]
		port_base->OUTCLR.reg = pin_mask;
    5eb8:	2280      	movs	r2, #128	; 0x80
    5eba:	0152      	lsls	r2, r2, #5
    5ebc:	615a      	str	r2, [r3, #20]
			audio_frame_cnt = 0;
    5ebe:	2300      	movs	r3, #0
    5ec0:	4a3d      	ldr	r2, [pc, #244]	; (5fb8 <main+0x200>)
    5ec2:	6013      	str	r3, [r2, #0]
			rec_init_done = false;
    5ec4:	4a35      	ldr	r2, [pc, #212]	; (5f9c <main+0x1e4>)
    5ec6:	7013      	strb	r3, [r2, #0]
			rec_running = true;
    5ec8:	2201      	movs	r2, #1
    5eca:	4b3c      	ldr	r3, [pc, #240]	; (5fbc <main+0x204>)
    5ecc:	701a      	strb	r2, [r3, #0]
    5ece:	e7e0      	b.n	5e92 <main+0xda>
			sync_reached = false;
    5ed0:	2200      	movs	r2, #0
    5ed2:	4b37      	ldr	r3, [pc, #220]	; (5fb0 <main+0x1f8>)
    5ed4:	701a      	strb	r2, [r3, #0]
			if(rec_running) {
    5ed6:	4b39      	ldr	r3, [pc, #228]	; (5fbc <main+0x204>)
    5ed8:	781b      	ldrb	r3, [r3, #0]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d0dd      	beq.n	5e9a <main+0xe2>
	port_base->OUTTGL.reg = pin_mask;
    5ede:	2280      	movs	r2, #128	; 0x80
    5ee0:	00d2      	lsls	r2, r2, #3
    5ee2:	4b34      	ldr	r3, [pc, #208]	; (5fb4 <main+0x1fc>)
    5ee4:	61da      	str	r2, [r3, #28]
				port_pin_toggle_output_level(UI_DGB_PIN);
				audio_record_1samp(audio_buffer_counter);
    5ee6:	4b36      	ldr	r3, [pc, #216]	; (5fc0 <main+0x208>)
    5ee8:	7818      	ldrb	r0, [r3, #0]
    5eea:	1e43      	subs	r3, r0, #1
    5eec:	4198      	sbcs	r0, r3
    5eee:	b2c0      	uxtb	r0, r0
    5ef0:	4b34      	ldr	r3, [pc, #208]	; (5fc4 <main+0x20c>)
    5ef2:	4798      	blx	r3
				audio_frame_cnt += 2;
    5ef4:	4b30      	ldr	r3, [pc, #192]	; (5fb8 <main+0x200>)
    5ef6:	681a      	ldr	r2, [r3, #0]
    5ef8:	3202      	adds	r2, #2
    5efa:	601a      	str	r2, [r3, #0]
				if(audio_frame_cnt >= AUDIO_CHUNK_SIZE) {
    5efc:	681a      	ldr	r2, [r3, #0]
    5efe:	4b32      	ldr	r3, [pc, #200]	; (5fc8 <main+0x210>)
    5f00:	429a      	cmp	r2, r3
    5f02:	d9ca      	bls.n	5e9a <main+0xe2>
					audio_total_samples += audio_frame_cnt;
    5f04:	4a2c      	ldr	r2, [pc, #176]	; (5fb8 <main+0x200>)
    5f06:	6813      	ldr	r3, [r2, #0]
    5f08:	4930      	ldr	r1, [pc, #192]	; (5fcc <main+0x214>)
    5f0a:	6808      	ldr	r0, [r1, #0]
    5f0c:	4684      	mov	ip, r0
    5f0e:	4463      	add	r3, ip
    5f10:	600b      	str	r3, [r1, #0]
					audio_frame_cnt = 0;
    5f12:	2300      	movs	r3, #0
    5f14:	6013      	str	r3, [r2, #0]
					audio_write_chunck(audio_buffer_counter);
    5f16:	4c2a      	ldr	r4, [pc, #168]	; (5fc0 <main+0x208>)
    5f18:	7820      	ldrb	r0, [r4, #0]
    5f1a:	1e43      	subs	r3, r0, #1
    5f1c:	4198      	sbcs	r0, r3
    5f1e:	b2c0      	uxtb	r0, r0
    5f20:	4b2b      	ldr	r3, [pc, #172]	; (5fd0 <main+0x218>)
    5f22:	4798      	blx	r3
					//printf("Current buffer: %d\n\r", audio_buffer_counter);
					audio_buffer_counter = (audio_buffer_counter >= AUDIO_BUFFER_NUMBER) ? 0 : (audio_buffer_counter + 1);
    5f24:	7822      	ldrb	r2, [r4, #0]
    5f26:	b2d2      	uxtb	r2, r2
    5f28:	2300      	movs	r3, #0
    5f2a:	2a03      	cmp	r2, #3
    5f2c:	d803      	bhi.n	5f36 <main+0x17e>
    5f2e:	4b24      	ldr	r3, [pc, #144]	; (5fc0 <main+0x208>)
    5f30:	781b      	ldrb	r3, [r3, #0]
    5f32:	3301      	adds	r3, #1
    5f34:	b2db      	uxtb	r3, r3
    5f36:	4a22      	ldr	r2, [pc, #136]	; (5fc0 <main+0x208>)
    5f38:	7013      	strb	r3, [r2, #0]
		if(rec_start_request) {
    5f3a:	4c17      	ldr	r4, [pc, #92]	; (5f98 <main+0x1e0>)
    5f3c:	e7ad      	b.n	5e9a <main+0xe2>
    5f3e:	46c0      	nop			; (mov r8, r8)
    5f40:	20002a34 	.word	0x20002a34
    5f44:	00008bd9 	.word	0x00008bd9
    5f48:	00007e39 	.word	0x00007e39
    5f4c:	20000620 	.word	0x20000620
    5f50:	40001400 	.word	0x40001400
    5f54:	00002355 	.word	0x00002355
    5f58:	000021f9 	.word	0x000021f9
    5f5c:	000007e2 	.word	0x000007e2
    5f60:	000022c5 	.word	0x000022c5
    5f64:	00002411 	.word	0x00002411
    5f68:	0000635d 	.word	0x0000635d
    5f6c:	00006431 	.word	0x00006431
    5f70:	00006269 	.word	0x00006269
    5f74:	000063fd 	.word	0x000063fd
    5f78:	00000bb1 	.word	0x00000bb1
    5f7c:	0000602d 	.word	0x0000602d
    5f80:	00005a75 	.word	0x00005a75
    5f84:	00005d49 	.word	0x00005d49
    5f88:	20000125 	.word	0x20000125
    5f8c:	00001bf9 	.word	0x00001bf9
    5f90:	00006031 	.word	0x00006031
    5f94:	00005b6d 	.word	0x00005b6d
    5f98:	200002d8 	.word	0x200002d8
    5f9c:	200002d6 	.word	0x200002d6
    5fa0:	200002d9 	.word	0x200002d9
    5fa4:	00005c11 	.word	0x00005c11
    5fa8:	0000ab84 	.word	0x0000ab84
    5fac:	00009329 	.word	0x00009329
    5fb0:	200002da 	.word	0x200002da
    5fb4:	41004400 	.word	0x41004400
    5fb8:	200002cc 	.word	0x200002cc
    5fbc:	200002d7 	.word	0x200002d7
    5fc0:	200002ca 	.word	0x200002ca
    5fc4:	00005ca1 	.word	0x00005ca1
    5fc8:	000007ff 	.word	0x000007ff
    5fcc:	200002d0 	.word	0x200002d0
    5fd0:	00005cf5 	.word	0x00005cf5

00005fd4 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    5fd4:	b510      	push	{r4, lr}
	ui_powerdown();
    5fd6:	4b01      	ldr	r3, [pc, #4]	; (5fdc <main_suspend_action+0x8>)
    5fd8:	4798      	blx	r3
}
    5fda:	bd10      	pop	{r4, pc}
    5fdc:	00006431 	.word	0x00006431

00005fe0 <main_resume_action>:

void main_resume_action(void)
{
    5fe0:	b510      	push	{r4, lr}
	ui_wakeup();
    5fe2:	4b01      	ldr	r3, [pc, #4]	; (5fe8 <main_resume_action+0x8>)
    5fe4:	4798      	blx	r3
}
    5fe6:	bd10      	pop	{r4, pc}
    5fe8:	00006441 	.word	0x00006441

00005fec <main_sof_action>:

void main_sof_action(void)
{
    5fec:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    5fee:	4b05      	ldr	r3, [pc, #20]	; (6004 <main_sof_action+0x18>)
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d100      	bne.n	5ff8 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    5ff6:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    5ff8:	4b03      	ldr	r3, [pc, #12]	; (6008 <main_sof_action+0x1c>)
    5ffa:	4798      	blx	r3
    5ffc:	4b03      	ldr	r3, [pc, #12]	; (600c <main_sof_action+0x20>)
    5ffe:	4798      	blx	r3
    6000:	e7f9      	b.n	5ff6 <main_sof_action+0xa>
    6002:	46c0      	nop			; (mov r8, r8)
    6004:	200002d4 	.word	0x200002d4
    6008:	0000361d 	.word	0x0000361d
    600c:	00006459 	.word	0x00006459

00006010 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    6010:	2201      	movs	r2, #1
    6012:	4b02      	ldr	r3, [pc, #8]	; (601c <main_msc_enable+0xc>)
    6014:	701a      	strb	r2, [r3, #0]
	return true;
}
    6016:	2001      	movs	r0, #1
    6018:	4770      	bx	lr
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	200002d4 	.word	0x200002d4

00006020 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    6020:	2200      	movs	r2, #0
    6022:	4b01      	ldr	r3, [pc, #4]	; (6028 <main_msc_disable+0x8>)
    6024:	701a      	strb	r2, [r3, #0]
}
    6026:	4770      	bx	lr
    6028:	200002d4 	.word	0x200002d4

0000602c <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    602c:	4770      	bx	lr
	...

00006030 <sd_test_availability>:
#include "sd_management.h"

extern volatile bool rec_start_request;

bool sd_test_availability(void)
{
    6030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    6032:	4c2c      	ldr	r4, [pc, #176]	; (60e4 <sd_test_availability+0xb4>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    6034:	4d2c      	ldr	r5, [pc, #176]	; (60e8 <sd_test_availability+0xb8>)
    6036:	e028      	b.n	608a <sd_test_availability+0x5a>
			printf("Card install fail!\n\r");
    6038:	482c      	ldr	r0, [pc, #176]	; (60ec <sd_test_availability+0xbc>)
    603a:	4e2d      	ldr	r6, [pc, #180]	; (60f0 <sd_test_availability+0xc0>)
    603c:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    603e:	482d      	ldr	r0, [pc, #180]	; (60f4 <sd_test_availability+0xc4>)
    6040:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    6042:	4e2d      	ldr	r6, [pc, #180]	; (60f8 <sd_test_availability+0xc8>)
    6044:	2000      	movs	r0, #0
    6046:	47b0      	blx	r6
    6048:	2802      	cmp	r0, #2
    604a:	d1fb      	bne.n	6044 <sd_test_availability+0x14>
    604c:	4b2b      	ldr	r3, [pc, #172]	; (60fc <sd_test_availability+0xcc>)
    604e:	2280      	movs	r2, #128	; 0x80
    6050:	0152      	lsls	r2, r2, #5
    6052:	61da      	str	r2, [r3, #28]
    6054:	2280      	movs	r2, #128	; 0x80
    6056:	0212      	lsls	r2, r2, #8
    6058:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    605a:	2000      	movs	r0, #0
    605c:	4b22      	ldr	r3, [pc, #136]	; (60e8 <sd_test_availability+0xb8>)
    605e:	4798      	blx	r3
    6060:	2296      	movs	r2, #150	; 0x96
    6062:	0052      	lsls	r2, r2, #1
    6064:	2300      	movs	r3, #0
    6066:	2100      	movs	r1, #0
    6068:	4e25      	ldr	r6, [pc, #148]	; (6100 <sd_test_availability+0xd0>)
    606a:	47b0      	blx	r6
    606c:	4a25      	ldr	r2, [pc, #148]	; (6104 <sd_test_availability+0xd4>)
    606e:	2300      	movs	r3, #0
    6070:	1880      	adds	r0, r0, r2
    6072:	4159      	adcs	r1, r3
    6074:	4a24      	ldr	r2, [pc, #144]	; (6108 <sd_test_availability+0xd8>)
    6076:	2300      	movs	r3, #0
    6078:	4e24      	ldr	r6, [pc, #144]	; (610c <sd_test_availability+0xdc>)
    607a:	47b0      	blx	r6
    607c:	4b24      	ldr	r3, [pc, #144]	; (6110 <sd_test_availability+0xe0>)
    607e:	4798      	blx	r3
		if(!rec_start_request) {
    6080:	4b24      	ldr	r3, [pc, #144]	; (6114 <sd_test_availability+0xe4>)
    6082:	7818      	ldrb	r0, [r3, #0]
    6084:	b2c0      	uxtb	r0, r0
    6086:	2800      	cmp	r0, #0
    6088:	d024      	beq.n	60d4 <sd_test_availability+0xa4>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    608a:	2000      	movs	r0, #0
    608c:	47a0      	blx	r4
    608e:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    6090:	2801      	cmp	r0, #1
    6092:	d0d1      	beq.n	6038 <sd_test_availability+0x8>
    6094:	4b19      	ldr	r3, [pc, #100]	; (60fc <sd_test_availability+0xcc>)
    6096:	2280      	movs	r2, #128	; 0x80
    6098:	0152      	lsls	r2, r2, #5
    609a:	61da      	str	r2, [r3, #28]
    609c:	2280      	movs	r2, #128	; 0x80
    609e:	0212      	lsls	r2, r2, #8
    60a0:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    60a2:	2000      	movs	r0, #0
    60a4:	47a8      	blx	r5
    60a6:	2296      	movs	r2, #150	; 0x96
    60a8:	0052      	lsls	r2, r2, #1
    60aa:	2300      	movs	r3, #0
    60ac:	2100      	movs	r1, #0
    60ae:	4f14      	ldr	r7, [pc, #80]	; (6100 <sd_test_availability+0xd0>)
    60b0:	47b8      	blx	r7
    60b2:	4a14      	ldr	r2, [pc, #80]	; (6104 <sd_test_availability+0xd4>)
    60b4:	2300      	movs	r3, #0
    60b6:	1880      	adds	r0, r0, r2
    60b8:	4159      	adcs	r1, r3
    60ba:	4a13      	ldr	r2, [pc, #76]	; (6108 <sd_test_availability+0xd8>)
    60bc:	2300      	movs	r3, #0
    60be:	4f13      	ldr	r7, [pc, #76]	; (610c <sd_test_availability+0xdc>)
    60c0:	47b8      	blx	r7
    60c2:	4b13      	ldr	r3, [pc, #76]	; (6110 <sd_test_availability+0xe0>)
    60c4:	4798      	blx	r3
		if(!rec_start_request) {
    60c6:	4b13      	ldr	r3, [pc, #76]	; (6114 <sd_test_availability+0xe4>)
    60c8:	7818      	ldrb	r0, [r3, #0]
    60ca:	b2c0      	uxtb	r0, r0
    60cc:	2800      	cmp	r0, #0
    60ce:	d001      	beq.n	60d4 <sd_test_availability+0xa4>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    60d0:	2e00      	cmp	r6, #0
    60d2:	d1da      	bne.n	608a <sd_test_availability+0x5a>
		port_base->OUTSET.reg = pin_mask;
    60d4:	4b09      	ldr	r3, [pc, #36]	; (60fc <sd_test_availability+0xcc>)
    60d6:	2280      	movs	r2, #128	; 0x80
    60d8:	0152      	lsls	r2, r2, #5
    60da:	619a      	str	r2, [r3, #24]
    60dc:	2280      	movs	r2, #128	; 0x80
    60de:	0212      	lsls	r2, r2, #8
    60e0:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
    60e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60e4:	00007e3d 	.word	0x00007e3d
    60e8:	00008995 	.word	0x00008995
    60ec:	0000aba4 	.word	0x0000aba4
    60f0:	00009329 	.word	0x00009329
    60f4:	0000abbc 	.word	0x0000abbc
    60f8:	00000bd1 	.word	0x00000bd1
    60fc:	41004400 	.word	0x41004400
    6100:	000090d1 	.word	0x000090d1
    6104:	00001b57 	.word	0x00001b57
    6108:	00001b58 	.word	0x00001b58
    610c:	00009091 	.word	0x00009091
    6110:	20000001 	.word	0x20000001
    6114:	200002d8 	.word	0x200002d8

00006118 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6118:	b570      	push	{r4, r5, r6, lr}
    611a:	b082      	sub	sp, #8
    611c:	0005      	movs	r5, r0
    611e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6120:	2200      	movs	r2, #0
    6122:	466b      	mov	r3, sp
    6124:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6126:	4c06      	ldr	r4, [pc, #24]	; (6140 <usart_serial_getchar+0x28>)
    6128:	466b      	mov	r3, sp
    612a:	1d99      	adds	r1, r3, #6
    612c:	0028      	movs	r0, r5
    612e:	47a0      	blx	r4
    6130:	2800      	cmp	r0, #0
    6132:	d1f9      	bne.n	6128 <usart_serial_getchar+0x10>

	*c = temp;
    6134:	466b      	mov	r3, sp
    6136:	3306      	adds	r3, #6
    6138:	881b      	ldrh	r3, [r3, #0]
    613a:	7033      	strb	r3, [r6, #0]
}
    613c:	b002      	add	sp, #8
    613e:	bd70      	pop	{r4, r5, r6, pc}
    6140:	0000296d 	.word	0x0000296d

00006144 <usart_serial_putchar>:
{
    6144:	b570      	push	{r4, r5, r6, lr}
    6146:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6148:	b28c      	uxth	r4, r1
    614a:	4e03      	ldr	r6, [pc, #12]	; (6158 <usart_serial_putchar+0x14>)
    614c:	0021      	movs	r1, r4
    614e:	0028      	movs	r0, r5
    6150:	47b0      	blx	r6
    6152:	2800      	cmp	r0, #0
    6154:	d1fa      	bne.n	614c <usart_serial_putchar+0x8>
}
    6156:	bd70      	pop	{r4, r5, r6, pc}
    6158:	00002941 	.word	0x00002941

0000615c <ui_button1_callback>:
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void ui_button1_callback(void)
{
    615c:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    615e:	4b18      	ldr	r3, [pc, #96]	; (61c0 <ui_button1_callback+0x64>)
    6160:	6a1b      	ldr	r3, [r3, #32]
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_1_PIN);
	
	if(press_state) {
    6162:	00db      	lsls	r3, r3, #3
    6164:	d500      	bpl.n	6168 <ui_button1_callback+0xc>
		}
		else {
			rec_start_request = true;
		}
	}
}
    6166:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    6168:	2000      	movs	r0, #0
    616a:	4b16      	ldr	r3, [pc, #88]	; (61c4 <ui_button1_callback+0x68>)
    616c:	4798      	blx	r3
    616e:	2264      	movs	r2, #100	; 0x64
    6170:	2300      	movs	r3, #0
    6172:	2100      	movs	r1, #0
    6174:	4c14      	ldr	r4, [pc, #80]	; (61c8 <ui_button1_callback+0x6c>)
    6176:	47a0      	blx	r4
    6178:	4a14      	ldr	r2, [pc, #80]	; (61cc <ui_button1_callback+0x70>)
    617a:	2300      	movs	r3, #0
    617c:	1880      	adds	r0, r0, r2
    617e:	4159      	adcs	r1, r3
    6180:	4a13      	ldr	r2, [pc, #76]	; (61d0 <ui_button1_callback+0x74>)
    6182:	2300      	movs	r3, #0
    6184:	4c13      	ldr	r4, [pc, #76]	; (61d4 <ui_button1_callback+0x78>)
    6186:	47a0      	blx	r4
    6188:	4b13      	ldr	r3, [pc, #76]	; (61d8 <ui_button1_callback+0x7c>)
    618a:	4798      	blx	r3
    618c:	4b0c      	ldr	r3, [pc, #48]	; (61c0 <ui_button1_callback+0x64>)
    618e:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    6190:	00db      	lsls	r3, r3, #3
    6192:	d4e8      	bmi.n	6166 <ui_button1_callback+0xa>
		if(rec_running || rec_start_request) {
    6194:	4b11      	ldr	r3, [pc, #68]	; (61dc <ui_button1_callback+0x80>)
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	2b00      	cmp	r3, #0
    619a:	d107      	bne.n	61ac <ui_button1_callback+0x50>
    619c:	4b10      	ldr	r3, [pc, #64]	; (61e0 <ui_button1_callback+0x84>)
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	2b00      	cmp	r3, #0
    61a2:	d103      	bne.n	61ac <ui_button1_callback+0x50>
			rec_start_request = true;
    61a4:	2201      	movs	r2, #1
    61a6:	4b0e      	ldr	r3, [pc, #56]	; (61e0 <ui_button1_callback+0x84>)
    61a8:	701a      	strb	r2, [r3, #0]
}
    61aa:	e7dc      	b.n	6166 <ui_button1_callback+0xa>
			rec_start_request = false;
    61ac:	2300      	movs	r3, #0
    61ae:	4a0c      	ldr	r2, [pc, #48]	; (61e0 <ui_button1_callback+0x84>)
    61b0:	7013      	strb	r3, [r2, #0]
			rec_running = false;
    61b2:	4a0a      	ldr	r2, [pc, #40]	; (61dc <ui_button1_callback+0x80>)
    61b4:	7013      	strb	r3, [r2, #0]
			rec_stop_request = true;
    61b6:	2201      	movs	r2, #1
    61b8:	4b0a      	ldr	r3, [pc, #40]	; (61e4 <ui_button1_callback+0x88>)
    61ba:	701a      	strb	r2, [r3, #0]
    61bc:	e7d3      	b.n	6166 <ui_button1_callback+0xa>
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	41004400 	.word	0x41004400
    61c4:	00008995 	.word	0x00008995
    61c8:	000090d1 	.word	0x000090d1
    61cc:	00001b57 	.word	0x00001b57
    61d0:	00001b58 	.word	0x00001b58
    61d4:	00009091 	.word	0x00009091
    61d8:	20000001 	.word	0x20000001
    61dc:	200002d7 	.word	0x200002d7
    61e0:	200002d8 	.word	0x200002d8
    61e4:	200002d9 	.word	0x200002d9

000061e8 <ui_button3_callback>:


void ui_button3_callback(void)
{
    61e8:	b510      	push	{r4, lr}
    61ea:	4b17      	ldr	r3, [pc, #92]	; (6248 <ui_button3_callback+0x60>)
    61ec:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    61ee:	071b      	lsls	r3, r3, #28
    61f0:	d500      	bpl.n	61f4 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    61f2:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    61f4:	2000      	movs	r0, #0
    61f6:	4b15      	ldr	r3, [pc, #84]	; (624c <ui_button3_callback+0x64>)
    61f8:	4798      	blx	r3
    61fa:	2264      	movs	r2, #100	; 0x64
    61fc:	2300      	movs	r3, #0
    61fe:	2100      	movs	r1, #0
    6200:	4c13      	ldr	r4, [pc, #76]	; (6250 <ui_button3_callback+0x68>)
    6202:	47a0      	blx	r4
    6204:	4a13      	ldr	r2, [pc, #76]	; (6254 <ui_button3_callback+0x6c>)
    6206:	2300      	movs	r3, #0
    6208:	1880      	adds	r0, r0, r2
    620a:	4159      	adcs	r1, r3
    620c:	4a12      	ldr	r2, [pc, #72]	; (6258 <ui_button3_callback+0x70>)
    620e:	2300      	movs	r3, #0
    6210:	4c12      	ldr	r4, [pc, #72]	; (625c <ui_button3_callback+0x74>)
    6212:	47a0      	blx	r4
    6214:	4b12      	ldr	r3, [pc, #72]	; (6260 <ui_button3_callback+0x78>)
    6216:	4798      	blx	r3
    6218:	4b0b      	ldr	r3, [pc, #44]	; (6248 <ui_button3_callback+0x60>)
    621a:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    621c:	071b      	lsls	r3, r3, #28
    621e:	d4e8      	bmi.n	61f2 <ui_button3_callback+0xa>
		if(monitoring_on) {
    6220:	4b10      	ldr	r3, [pc, #64]	; (6264 <ui_button3_callback+0x7c>)
    6222:	781b      	ldrb	r3, [r3, #0]
    6224:	2b00      	cmp	r3, #0
    6226:	d107      	bne.n	6238 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    6228:	2280      	movs	r2, #128	; 0x80
    622a:	0212      	lsls	r2, r2, #8
    622c:	4b06      	ldr	r3, [pc, #24]	; (6248 <ui_button3_callback+0x60>)
    622e:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    6230:	2201      	movs	r2, #1
    6232:	4b0c      	ldr	r3, [pc, #48]	; (6264 <ui_button3_callback+0x7c>)
    6234:	701a      	strb	r2, [r3, #0]
}
    6236:	e7dc      	b.n	61f2 <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    6238:	2280      	movs	r2, #128	; 0x80
    623a:	0212      	lsls	r2, r2, #8
    623c:	4b02      	ldr	r3, [pc, #8]	; (6248 <ui_button3_callback+0x60>)
    623e:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    6240:	2200      	movs	r2, #0
    6242:	4b08      	ldr	r3, [pc, #32]	; (6264 <ui_button3_callback+0x7c>)
    6244:	701a      	strb	r2, [r3, #0]
    6246:	e7d4      	b.n	61f2 <ui_button3_callback+0xa>
    6248:	41004400 	.word	0x41004400
    624c:	00008995 	.word	0x00008995
    6250:	000090d1 	.word	0x000090d1
    6254:	00001b57 	.word	0x00001b57
    6258:	00001b58 	.word	0x00001b58
    625c:	00009091 	.word	0x00009091
    6260:	20000001 	.word	0x20000001
    6264:	200002d5 	.word	0x200002d5

00006268 <ui_cdc_init>:
{
    6268:	b5f0      	push	{r4, r5, r6, r7, lr}
    626a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    626c:	2380      	movs	r3, #128	; 0x80
    626e:	05db      	lsls	r3, r3, #23
    6270:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6272:	2300      	movs	r3, #0
    6274:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6276:	22ff      	movs	r2, #255	; 0xff
    6278:	4669      	mov	r1, sp
    627a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    627c:	2200      	movs	r2, #0
    627e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6280:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    6282:	2401      	movs	r4, #1
    6284:	2124      	movs	r1, #36	; 0x24
    6286:	4668      	mov	r0, sp
    6288:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    628a:	3101      	adds	r1, #1
    628c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    628e:	3101      	adds	r1, #1
    6290:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    6292:	3101      	adds	r1, #1
    6294:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    6296:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6298:	3105      	adds	r1, #5
    629a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    629c:	3101      	adds	r1, #1
    629e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    62a0:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    62a2:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    62a4:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    62a6:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    62a8:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    62aa:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    62ac:	2313      	movs	r3, #19
    62ae:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    62b0:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    62b2:	2380      	movs	r3, #128	; 0x80
    62b4:	035b      	lsls	r3, r3, #13
    62b6:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    62b8:	4b1a      	ldr	r3, [pc, #104]	; (6324 <ui_cdc_init+0xbc>)
    62ba:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    62bc:	4b1a      	ldr	r3, [pc, #104]	; (6328 <ui_cdc_init+0xc0>)
    62be:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    62c0:	2301      	movs	r3, #1
    62c2:	425b      	negs	r3, r3
    62c4:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    62c6:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    62c8:	23e1      	movs	r3, #225	; 0xe1
    62ca:	025b      	lsls	r3, r3, #9
    62cc:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    62ce:	4d17      	ldr	r5, [pc, #92]	; (632c <ui_cdc_init+0xc4>)
    62d0:	4b17      	ldr	r3, [pc, #92]	; (6330 <ui_cdc_init+0xc8>)
    62d2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    62d4:	4a17      	ldr	r2, [pc, #92]	; (6334 <ui_cdc_init+0xcc>)
    62d6:	4b18      	ldr	r3, [pc, #96]	; (6338 <ui_cdc_init+0xd0>)
    62d8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    62da:	4a18      	ldr	r2, [pc, #96]	; (633c <ui_cdc_init+0xd4>)
    62dc:	4b18      	ldr	r3, [pc, #96]	; (6340 <ui_cdc_init+0xd8>)
    62de:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    62e0:	466a      	mov	r2, sp
    62e2:	4918      	ldr	r1, [pc, #96]	; (6344 <ui_cdc_init+0xdc>)
    62e4:	0028      	movs	r0, r5
    62e6:	4b18      	ldr	r3, [pc, #96]	; (6348 <ui_cdc_init+0xe0>)
    62e8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    62ea:	4f18      	ldr	r7, [pc, #96]	; (634c <ui_cdc_init+0xe4>)
    62ec:	683b      	ldr	r3, [r7, #0]
    62ee:	6898      	ldr	r0, [r3, #8]
    62f0:	2100      	movs	r1, #0
    62f2:	4e17      	ldr	r6, [pc, #92]	; (6350 <ui_cdc_init+0xe8>)
    62f4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    62f6:	683b      	ldr	r3, [r7, #0]
    62f8:	6858      	ldr	r0, [r3, #4]
    62fa:	2100      	movs	r1, #0
    62fc:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    62fe:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6300:	0030      	movs	r0, r6
    6302:	4b14      	ldr	r3, [pc, #80]	; (6354 <ui_cdc_init+0xec>)
    6304:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6306:	231f      	movs	r3, #31
    6308:	4018      	ands	r0, r3
    630a:	4084      	lsls	r4, r0
    630c:	4b12      	ldr	r3, [pc, #72]	; (6358 <ui_cdc_init+0xf0>)
    630e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6310:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6312:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6314:	2b00      	cmp	r3, #0
    6316:	d1fc      	bne.n	6312 <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6318:	6833      	ldr	r3, [r6, #0]
    631a:	2202      	movs	r2, #2
    631c:	4313      	orrs	r3, r2
    631e:	6033      	str	r3, [r6, #0]
}
    6320:	b011      	add	sp, #68	; 0x44
    6322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6324:	00160002 	.word	0x00160002
    6328:	00170002 	.word	0x00170002
    632c:	20000688 	.word	0x20000688
    6330:	2000061c 	.word	0x2000061c
    6334:	00006145 	.word	0x00006145
    6338:	20000618 	.word	0x20000618
    633c:	00006119 	.word	0x00006119
    6340:	20000614 	.word	0x20000614
    6344:	42001400 	.word	0x42001400
    6348:	000025fd 	.word	0x000025fd
    634c:	20000128 	.word	0x20000128
    6350:	0000935d 	.word	0x0000935d
    6354:	0000256d 	.word	0x0000256d
    6358:	e000e100 	.word	0xe000e100

0000635c <ui_lb_init>:
{
    635c:	b5f0      	push	{r4, r5, r6, r7, lr}
    635e:	46c6      	mov	lr, r8
    6360:	b500      	push	{lr}
    6362:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    6364:	ac03      	add	r4, sp, #12
    6366:	2501      	movs	r5, #1
    6368:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    636a:	2600      	movs	r6, #0
    636c:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    636e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    6370:	0021      	movs	r1, r4
    6372:	200c      	movs	r0, #12
    6374:	4f1d      	ldr	r7, [pc, #116]	; (63ec <ui_lb_init+0x90>)
    6376:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    6378:	4b1d      	ldr	r3, [pc, #116]	; (63f0 <ui_lb_init+0x94>)
    637a:	4698      	mov	r8, r3
    637c:	2380      	movs	r3, #128	; 0x80
    637e:	015b      	lsls	r3, r3, #5
    6380:	4642      	mov	r2, r8
    6382:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    6384:	0021      	movs	r1, r4
    6386:	200d      	movs	r0, #13
    6388:	47b8      	blx	r7
    638a:	2380      	movs	r3, #128	; 0x80
    638c:	019b      	lsls	r3, r3, #6
    638e:	4642      	mov	r2, r8
    6390:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    6392:	0021      	movs	r1, r4
    6394:	200f      	movs	r0, #15
    6396:	47b8      	blx	r7
    6398:	2380      	movs	r3, #128	; 0x80
    639a:	021b      	lsls	r3, r3, #8
    639c:	4642      	mov	r2, r8
    639e:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_DGB_PIN, &pin_conf);
    63a0:	0021      	movs	r1, r4
    63a2:	200a      	movs	r0, #10
    63a4:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    63a6:	4668      	mov	r0, sp
    63a8:	4b12      	ldr	r3, [pc, #72]	; (63f4 <ui_lb_init+0x98>)
    63aa:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    63ac:	231c      	movs	r3, #28
    63ae:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    63b0:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    63b2:	466b      	mov	r3, sp
    63b4:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    63b6:	2403      	movs	r4, #3
    63b8:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    63ba:	4669      	mov	r1, sp
    63bc:	2008      	movs	r0, #8
    63be:	4f0e      	ldr	r7, [pc, #56]	; (63f8 <ui_lb_init+0x9c>)
    63c0:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    63c2:	2302      	movs	r3, #2
    63c4:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    63c6:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    63c8:	466b      	mov	r3, sp
    63ca:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    63cc:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    63ce:	4669      	mov	r1, sp
    63d0:	2002      	movs	r0, #2
    63d2:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    63d4:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    63d6:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    63d8:	466b      	mov	r3, sp
    63da:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    63dc:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    63de:	4669      	mov	r1, sp
    63e0:	2003      	movs	r0, #3
    63e2:	47b8      	blx	r7
}
    63e4:	b004      	add	sp, #16
    63e6:	bc04      	pop	{r2}
    63e8:	4690      	mov	r8, r2
    63ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63ec:	00008851 	.word	0x00008851
    63f0:	41004400 	.word	0x41004400
    63f4:	0000216d 	.word	0x0000216d
    63f8:	00002181 	.word	0x00002181

000063fc <ui_configure_callback>:
{
    63fc:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    63fe:	2200      	movs	r2, #0
    6400:	2108      	movs	r1, #8
    6402:	4807      	ldr	r0, [pc, #28]	; (6420 <ui_configure_callback+0x24>)
    6404:	4c07      	ldr	r4, [pc, #28]	; (6424 <ui_configure_callback+0x28>)
    6406:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6408:	2200      	movs	r2, #0
    640a:	2103      	movs	r1, #3
    640c:	4806      	ldr	r0, [pc, #24]	; (6428 <ui_configure_callback+0x2c>)
    640e:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6410:	2100      	movs	r1, #0
    6412:	2008      	movs	r0, #8
    6414:	4c05      	ldr	r4, [pc, #20]	; (642c <ui_configure_callback+0x30>)
    6416:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6418:	2100      	movs	r1, #0
    641a:	2003      	movs	r0, #3
    641c:	47a0      	blx	r4
}
    641e:	bd10      	pop	{r4, pc}
    6420:	0000615d 	.word	0x0000615d
    6424:	00007319 	.word	0x00007319
    6428:	000061e9 	.word	0x000061e9
    642c:	00007345 	.word	0x00007345

00006430 <ui_powerdown>:
    6430:	2280      	movs	r2, #128	; 0x80
    6432:	05d2      	lsls	r2, r2, #23
    6434:	4b01      	ldr	r3, [pc, #4]	; (643c <ui_powerdown+0xc>)
    6436:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    6438:	4770      	bx	lr
    643a:	46c0      	nop			; (mov r8, r8)
    643c:	41004480 	.word	0x41004480

00006440 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    6440:	2280      	movs	r2, #128	; 0x80
    6442:	05d2      	lsls	r2, r2, #23
    6444:	4b01      	ldr	r3, [pc, #4]	; (644c <ui_wakeup+0xc>)
    6446:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    6448:	4770      	bx	lr
    644a:	46c0      	nop			; (mov r8, r8)
    644c:	41004480 	.word	0x41004480

00006450 <ui_start_read>:

void ui_start_read(void)
{
}
    6450:	4770      	bx	lr

00006452 <ui_stop_read>:

void ui_stop_read(void)
{
}
    6452:	4770      	bx	lr

00006454 <ui_start_write>:

void ui_start_write(void)
{
}
    6454:	4770      	bx	lr

00006456 <ui_stop_write>:

void ui_stop_write(void)
{
}
    6456:	4770      	bx	lr

00006458 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    6458:	2800      	cmp	r0, #0
    645a:	d104      	bne.n	6466 <ui_process+0xe>
    645c:	2280      	movs	r2, #128	; 0x80
    645e:	05d2      	lsls	r2, r2, #23
    6460:	4b05      	ldr	r3, [pc, #20]	; (6478 <ui_process+0x20>)
    6462:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    6464:	4770      	bx	lr
	if (1000 == framenumber) {
    6466:	23fa      	movs	r3, #250	; 0xfa
    6468:	009b      	lsls	r3, r3, #2
    646a:	4298      	cmp	r0, r3
    646c:	d1fa      	bne.n	6464 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    646e:	2280      	movs	r2, #128	; 0x80
    6470:	05d2      	lsls	r2, r2, #23
    6472:	4b01      	ldr	r3, [pc, #4]	; (6478 <ui_process+0x20>)
    6474:	619a      	str	r2, [r3, #24]
}
    6476:	e7f5      	b.n	6464 <ui_process+0xc>
    6478:	41004480 	.word	0x41004480

0000647c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    647c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    647e:	000b      	movs	r3, r1
    6480:	332e      	adds	r3, #46	; 0x2e
    6482:	009b      	lsls	r3, r3, #2
    6484:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    6486:	22aa      	movs	r2, #170	; 0xaa
    6488:	0052      	lsls	r2, r2, #1
    648a:	0049      	lsls	r1, r1, #1
    648c:	5a83      	ldrh	r3, [r0, r2]
    648e:	4c03      	ldr	r4, [pc, #12]	; (649c <usb_device_register_callback+0x20>)
    6490:	5b09      	ldrh	r1, [r1, r4]
    6492:	430b      	orrs	r3, r1
    6494:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    6496:	2000      	movs	r0, #0
    6498:	bd10      	pop	{r4, pc}
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	0000abf8 	.word	0x0000abf8

000064a0 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    64a0:	0049      	lsls	r1, r1, #1
    64a2:	4b06      	ldr	r3, [pc, #24]	; (64bc <usb_device_enable_callback+0x1c>)
    64a4:	5acb      	ldrh	r3, [r1, r3]
    64a6:	6802      	ldr	r2, [r0, #0]
    64a8:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    64aa:	21ab      	movs	r1, #171	; 0xab
    64ac:	0049      	lsls	r1, r1, #1
    64ae:	5a42      	ldrh	r2, [r0, r1]
    64b0:	431a      	orrs	r2, r3
    64b2:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    64b4:	6802      	ldr	r2, [r0, #0]
    64b6:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    64b8:	2000      	movs	r0, #0
    64ba:	4770      	bx	lr
    64bc:	0000abf8 	.word	0x0000abf8

000064c0 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    64c0:	0049      	lsls	r1, r1, #1
    64c2:	4b05      	ldr	r3, [pc, #20]	; (64d8 <usb_device_disable_callback+0x18>)
    64c4:	5aca      	ldrh	r2, [r1, r3]
    64c6:	21ab      	movs	r1, #171	; 0xab
    64c8:	0049      	lsls	r1, r1, #1
    64ca:	5a43      	ldrh	r3, [r0, r1]
    64cc:	4393      	bics	r3, r2
    64ce:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    64d0:	6803      	ldr	r3, [r0, #0]
    64d2:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    64d4:	2000      	movs	r0, #0
    64d6:	4770      	bx	lr
    64d8:	0000abf8 	.word	0x0000abf8

000064dc <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    64dc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    64de:	008c      	lsls	r4, r1, #2
    64e0:	18a4      	adds	r4, r4, r2
    64e2:	3434      	adds	r4, #52	; 0x34
    64e4:	00a4      	lsls	r4, r4, #2
    64e6:	1904      	adds	r4, r0, r4
    64e8:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    64ea:	1840      	adds	r0, r0, r1
    64ec:	3059      	adds	r0, #89	; 0x59
    64ee:	30ff      	adds	r0, #255	; 0xff
    64f0:	7803      	ldrb	r3, [r0, #0]
    64f2:	4903      	ldr	r1, [pc, #12]	; (6500 <usb_device_endpoint_register_callback+0x24>)
    64f4:	5c8a      	ldrb	r2, [r1, r2]
    64f6:	4313      	orrs	r3, r2
    64f8:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    64fa:	2000      	movs	r0, #0
    64fc:	bd10      	pop	{r4, pc}
    64fe:	46c0      	nop			; (mov r8, r8)
    6500:	0000ac08 	.word	0x0000ac08

00006504 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    6504:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    6506:	008b      	lsls	r3, r1, #2
    6508:	189b      	adds	r3, r3, r2
    650a:	3334      	adds	r3, #52	; 0x34
    650c:	009b      	lsls	r3, r3, #2
    650e:	18c3      	adds	r3, r0, r3
    6510:	2400      	movs	r4, #0
    6512:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6514:	1840      	adds	r0, r0, r1
    6516:	3059      	adds	r0, #89	; 0x59
    6518:	30ff      	adds	r0, #255	; 0xff
    651a:	4b03      	ldr	r3, [pc, #12]	; (6528 <usb_device_endpoint_unregister_callback+0x24>)
    651c:	5c9a      	ldrb	r2, [r3, r2]
    651e:	7803      	ldrb	r3, [r0, #0]
    6520:	4393      	bics	r3, r2
    6522:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    6524:	2000      	movs	r0, #0
    6526:	bd10      	pop	{r4, pc}
    6528:	0000ac08 	.word	0x0000ac08

0000652c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    652c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    652e:	230f      	movs	r3, #15
    6530:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    6532:	18c4      	adds	r4, r0, r3
    6534:	3461      	adds	r4, #97	; 0x61
    6536:	34ff      	adds	r4, #255	; 0xff
    6538:	7825      	ldrb	r5, [r4, #0]
    653a:	4e2f      	ldr	r6, [pc, #188]	; (65f8 <usb_device_endpoint_enable_callback+0xcc>)
    653c:	5cb6      	ldrb	r6, [r6, r2]
    653e:	4335      	orrs	r5, r6
    6540:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6542:	2a00      	cmp	r2, #0
    6544:	d129      	bne.n	659a <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6546:	2b00      	cmp	r3, #0
    6548:	d112      	bne.n	6570 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    654a:	2503      	movs	r5, #3
    654c:	240a      	movs	r4, #10
    654e:	34ff      	adds	r4, #255	; 0xff
    6550:	6806      	ldr	r6, [r0, #0]
    6552:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6554:	2a03      	cmp	r2, #3
    6556:	d109      	bne.n	656c <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6558:	b249      	sxtb	r1, r1
    655a:	2900      	cmp	r1, #0
    655c:	db44      	blt.n	65e8 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    655e:	6802      	ldr	r2, [r0, #0]
    6560:	015b      	lsls	r3, r3, #5
    6562:	18d3      	adds	r3, r2, r3
    6564:	330a      	adds	r3, #10
    6566:	33ff      	adds	r3, #255	; 0xff
    6568:	2220      	movs	r2, #32
    656a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    656c:	2000      	movs	r0, #0
    656e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6570:	b24c      	sxtb	r4, r1
    6572:	2c00      	cmp	r4, #0
    6574:	db08      	blt.n	6588 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    6576:	015c      	lsls	r4, r3, #5
    6578:	6805      	ldr	r5, [r0, #0]
    657a:	46ac      	mov	ip, r5
    657c:	4464      	add	r4, ip
    657e:	340a      	adds	r4, #10
    6580:	34ff      	adds	r4, #255	; 0xff
    6582:	2501      	movs	r5, #1
    6584:	7025      	strb	r5, [r4, #0]
    6586:	e7e5      	b.n	6554 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    6588:	015c      	lsls	r4, r3, #5
    658a:	6805      	ldr	r5, [r0, #0]
    658c:	46ac      	mov	ip, r5
    658e:	4464      	add	r4, ip
    6590:	340a      	adds	r4, #10
    6592:	34ff      	adds	r4, #255	; 0xff
    6594:	2502      	movs	r5, #2
    6596:	7025      	strb	r5, [r4, #0]
    6598:	e7dc      	b.n	6554 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    659a:	2a01      	cmp	r2, #1
    659c:	d11a      	bne.n	65d4 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    659e:	2b00      	cmp	r3, #0
    65a0:	d105      	bne.n	65ae <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    65a2:	6802      	ldr	r2, [r0, #0]
    65a4:	210c      	movs	r1, #12
    65a6:	230a      	movs	r3, #10
    65a8:	33ff      	adds	r3, #255	; 0xff
    65aa:	54d1      	strb	r1, [r2, r3]
    65ac:	e7de      	b.n	656c <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    65ae:	b249      	sxtb	r1, r1
    65b0:	2900      	cmp	r1, #0
    65b2:	db07      	blt.n	65c4 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    65b4:	6802      	ldr	r2, [r0, #0]
    65b6:	015b      	lsls	r3, r3, #5
    65b8:	18d3      	adds	r3, r2, r3
    65ba:	330a      	adds	r3, #10
    65bc:	33ff      	adds	r3, #255	; 0xff
    65be:	2204      	movs	r2, #4
    65c0:	701a      	strb	r2, [r3, #0]
    65c2:	e7d3      	b.n	656c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    65c4:	6802      	ldr	r2, [r0, #0]
    65c6:	015b      	lsls	r3, r3, #5
    65c8:	18d3      	adds	r3, r2, r3
    65ca:	330a      	adds	r3, #10
    65cc:	33ff      	adds	r3, #255	; 0xff
    65ce:	2208      	movs	r2, #8
    65d0:	701a      	strb	r2, [r3, #0]
    65d2:	e7cb      	b.n	656c <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    65d4:	2a02      	cmp	r2, #2
    65d6:	d1bd      	bne.n	6554 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    65d8:	6802      	ldr	r2, [r0, #0]
    65da:	015b      	lsls	r3, r3, #5
    65dc:	18d3      	adds	r3, r2, r3
    65de:	330a      	adds	r3, #10
    65e0:	33ff      	adds	r3, #255	; 0xff
    65e2:	2210      	movs	r2, #16
    65e4:	701a      	strb	r2, [r3, #0]
    65e6:	e7c1      	b.n	656c <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    65e8:	6802      	ldr	r2, [r0, #0]
    65ea:	015b      	lsls	r3, r3, #5
    65ec:	18d3      	adds	r3, r2, r3
    65ee:	330a      	adds	r3, #10
    65f0:	33ff      	adds	r3, #255	; 0xff
    65f2:	2240      	movs	r2, #64	; 0x40
    65f4:	701a      	strb	r2, [r3, #0]
    65f6:	e7b9      	b.n	656c <usb_device_endpoint_enable_callback+0x40>
    65f8:	0000ac08 	.word	0x0000ac08

000065fc <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    65fc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    65fe:	230f      	movs	r3, #15
    6600:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6602:	18c4      	adds	r4, r0, r3
    6604:	3461      	adds	r4, #97	; 0x61
    6606:	34ff      	adds	r4, #255	; 0xff
    6608:	4d2f      	ldr	r5, [pc, #188]	; (66c8 <usb_device_endpoint_disable_callback+0xcc>)
    660a:	5cae      	ldrb	r6, [r5, r2]
    660c:	7825      	ldrb	r5, [r4, #0]
    660e:	43b5      	bics	r5, r6
    6610:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    6612:	2a00      	cmp	r2, #0
    6614:	d129      	bne.n	666a <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6616:	2b00      	cmp	r3, #0
    6618:	d112      	bne.n	6640 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    661a:	2503      	movs	r5, #3
    661c:	2484      	movs	r4, #132	; 0x84
    661e:	0064      	lsls	r4, r4, #1
    6620:	6806      	ldr	r6, [r0, #0]
    6622:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6624:	2a03      	cmp	r2, #3
    6626:	d109      	bne.n	663c <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6628:	b249      	sxtb	r1, r1
    662a:	2900      	cmp	r1, #0
    662c:	db44      	blt.n	66b8 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    662e:	6802      	ldr	r2, [r0, #0]
    6630:	015b      	lsls	r3, r3, #5
    6632:	18d3      	adds	r3, r2, r3
    6634:	3309      	adds	r3, #9
    6636:	33ff      	adds	r3, #255	; 0xff
    6638:	2220      	movs	r2, #32
    663a:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    663c:	2000      	movs	r0, #0
    663e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6640:	b24c      	sxtb	r4, r1
    6642:	2c00      	cmp	r4, #0
    6644:	db08      	blt.n	6658 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    6646:	015c      	lsls	r4, r3, #5
    6648:	6805      	ldr	r5, [r0, #0]
    664a:	46ac      	mov	ip, r5
    664c:	4464      	add	r4, ip
    664e:	3409      	adds	r4, #9
    6650:	34ff      	adds	r4, #255	; 0xff
    6652:	2501      	movs	r5, #1
    6654:	7025      	strb	r5, [r4, #0]
    6656:	e7e5      	b.n	6624 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    6658:	015c      	lsls	r4, r3, #5
    665a:	6805      	ldr	r5, [r0, #0]
    665c:	46ac      	mov	ip, r5
    665e:	4464      	add	r4, ip
    6660:	3409      	adds	r4, #9
    6662:	34ff      	adds	r4, #255	; 0xff
    6664:	2502      	movs	r5, #2
    6666:	7025      	strb	r5, [r4, #0]
    6668:	e7dc      	b.n	6624 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    666a:	2a01      	cmp	r2, #1
    666c:	d11a      	bne.n	66a4 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    666e:	2b00      	cmp	r3, #0
    6670:	d105      	bne.n	667e <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    6672:	6802      	ldr	r2, [r0, #0]
    6674:	210c      	movs	r1, #12
    6676:	3309      	adds	r3, #9
    6678:	33ff      	adds	r3, #255	; 0xff
    667a:	54d1      	strb	r1, [r2, r3]
    667c:	e7de      	b.n	663c <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    667e:	b249      	sxtb	r1, r1
    6680:	2900      	cmp	r1, #0
    6682:	db07      	blt.n	6694 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    6684:	6802      	ldr	r2, [r0, #0]
    6686:	015b      	lsls	r3, r3, #5
    6688:	18d3      	adds	r3, r2, r3
    668a:	3309      	adds	r3, #9
    668c:	33ff      	adds	r3, #255	; 0xff
    668e:	2204      	movs	r2, #4
    6690:	701a      	strb	r2, [r3, #0]
    6692:	e7d3      	b.n	663c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    6694:	6802      	ldr	r2, [r0, #0]
    6696:	015b      	lsls	r3, r3, #5
    6698:	18d3      	adds	r3, r2, r3
    669a:	3309      	adds	r3, #9
    669c:	33ff      	adds	r3, #255	; 0xff
    669e:	2208      	movs	r2, #8
    66a0:	701a      	strb	r2, [r3, #0]
    66a2:	e7cb      	b.n	663c <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    66a4:	2a02      	cmp	r2, #2
    66a6:	d1bd      	bne.n	6624 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    66a8:	6802      	ldr	r2, [r0, #0]
    66aa:	015b      	lsls	r3, r3, #5
    66ac:	18d3      	adds	r3, r2, r3
    66ae:	3309      	adds	r3, #9
    66b0:	33ff      	adds	r3, #255	; 0xff
    66b2:	2210      	movs	r2, #16
    66b4:	701a      	strb	r2, [r3, #0]
    66b6:	e7c1      	b.n	663c <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    66b8:	6802      	ldr	r2, [r0, #0]
    66ba:	015b      	lsls	r3, r3, #5
    66bc:	18d3      	adds	r3, r2, r3
    66be:	3309      	adds	r3, #9
    66c0:	33ff      	adds	r3, #255	; 0xff
    66c2:	2240      	movs	r2, #64	; 0x40
    66c4:	701a      	strb	r2, [r3, #0]
    66c6:	e7b9      	b.n	663c <usb_device_endpoint_disable_callback+0x40>
    66c8:	0000ac08 	.word	0x0000ac08

000066cc <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    66cc:	2300      	movs	r3, #0
    66ce:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    66d0:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    66d2:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    66d4:	3301      	adds	r3, #1
    66d6:	70c3      	strb	r3, [r0, #3]
}
    66d8:	4770      	bx	lr
	...

000066dc <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    66dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    66de:	780c      	ldrb	r4, [r1, #0]
    66e0:	230f      	movs	r3, #15
    66e2:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    66e4:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    66e6:	78ca      	ldrb	r2, [r1, #3]
    66e8:	2a04      	cmp	r2, #4
    66ea:	d870      	bhi.n	67ce <usb_device_endpoint_set_config+0xf2>
    66ec:	0092      	lsls	r2, r2, #2
    66ee:	4d89      	ldr	r5, [pc, #548]	; (6914 <usb_device_endpoint_set_config+0x238>)
    66f0:	58aa      	ldr	r2, [r5, r2]
    66f2:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    66f4:	6802      	ldr	r2, [r0, #0]
    66f6:	3308      	adds	r3, #8
    66f8:	015b      	lsls	r3, r3, #5
    66fa:	2100      	movs	r1, #0
    66fc:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    66fe:	2200      	movs	r2, #0
    6700:	e082      	b.n	6808 <usb_device_endpoint_set_config+0x12c>
    6702:	015c      	lsls	r4, r3, #5
    6704:	6802      	ldr	r2, [r0, #0]
    6706:	4694      	mov	ip, r2
    6708:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    670a:	2280      	movs	r2, #128	; 0x80
    670c:	0052      	lsls	r2, r2, #1
    670e:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    6710:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6712:	076d      	lsls	r5, r5, #29
    6714:	d178      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    6716:	32e4      	adds	r2, #228	; 0xe4
    6718:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    671a:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    671c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    671e:	422e      	tst	r6, r5
    6720:	d172      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    6722:	3d5f      	subs	r5, #95	; 0x5f
    6724:	32e4      	adds	r2, #228	; 0xe4
    6726:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6728:	001a      	movs	r2, r3
    672a:	3208      	adds	r2, #8
    672c:	0152      	lsls	r2, r2, #5
    672e:	6804      	ldr	r4, [r0, #0]
    6730:	18a4      	adds	r4, r4, r2
    6732:	352f      	adds	r5, #47	; 0x2f
    6734:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6736:	6800      	ldr	r0, [r0, #0]
    6738:	1882      	adds	r2, r0, r2
    673a:	2080      	movs	r0, #128	; 0x80
    673c:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    673e:	788a      	ldrb	r2, [r1, #2]
    6740:	2a00      	cmp	r2, #0
    6742:	d01f      	beq.n	6784 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6744:	0158      	lsls	r0, r3, #5
    6746:	4a74      	ldr	r2, [pc, #464]	; (6918 <usb_device_endpoint_set_config+0x23c>)
    6748:	1812      	adds	r2, r2, r0
    674a:	6854      	ldr	r4, [r2, #4]
    674c:	2080      	movs	r0, #128	; 0x80
    674e:	0600      	lsls	r0, r0, #24
    6750:	4304      	orrs	r4, r0
    6752:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6754:	6954      	ldr	r4, [r2, #20]
    6756:	4320      	orrs	r0, r4
    6758:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    675a:	2507      	movs	r5, #7
    675c:	784c      	ldrb	r4, [r1, #1]
    675e:	015a      	lsls	r2, r3, #5
    6760:	4b6d      	ldr	r3, [pc, #436]	; (6918 <usb_device_endpoint_set_config+0x23c>)
    6762:	189b      	adds	r3, r3, r2
    6764:	6858      	ldr	r0, [r3, #4]
    6766:	402c      	ands	r4, r5
    6768:	0724      	lsls	r4, r4, #28
    676a:	4e6c      	ldr	r6, [pc, #432]	; (691c <usb_device_endpoint_set_config+0x240>)
    676c:	4030      	ands	r0, r6
    676e:	4320      	orrs	r0, r4
    6770:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6772:	7849      	ldrb	r1, [r1, #1]
    6774:	695a      	ldr	r2, [r3, #20]
    6776:	4029      	ands	r1, r5
    6778:	0709      	lsls	r1, r1, #28
    677a:	4032      	ands	r2, r6
    677c:	430a      	orrs	r2, r1
    677e:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6780:	2200      	movs	r2, #0
    6782:	e041      	b.n	6808 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6784:	0158      	lsls	r0, r3, #5
    6786:	4a64      	ldr	r2, [pc, #400]	; (6918 <usb_device_endpoint_set_config+0x23c>)
    6788:	1812      	adds	r2, r2, r0
    678a:	6850      	ldr	r0, [r2, #4]
    678c:	0040      	lsls	r0, r0, #1
    678e:	0840      	lsrs	r0, r0, #1
    6790:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6792:	6950      	ldr	r0, [r2, #20]
    6794:	0040      	lsls	r0, r0, #1
    6796:	0840      	lsrs	r0, r0, #1
    6798:	6150      	str	r0, [r2, #20]
    679a:	e7de      	b.n	675a <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    679c:	2c00      	cmp	r4, #0
    679e:	db35      	blt.n	680c <usb_device_endpoint_set_config+0x130>
    67a0:	015d      	lsls	r5, r3, #5
    67a2:	6802      	ldr	r2, [r0, #0]
    67a4:	4694      	mov	ip, r2
    67a6:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    67a8:	2280      	movs	r2, #128	; 0x80
    67aa:	0052      	lsls	r2, r2, #1
    67ac:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    67ae:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    67b0:	0776      	lsls	r6, r6, #29
    67b2:	d129      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    67b4:	2680      	movs	r6, #128	; 0x80
    67b6:	0076      	lsls	r6, r6, #1
    67b8:	5daa      	ldrb	r2, [r5, r6]
    67ba:	2702      	movs	r7, #2
    67bc:	433a      	orrs	r2, r7
    67be:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    67c0:	6802      	ldr	r2, [r0, #0]
    67c2:	0018      	movs	r0, r3
    67c4:	3008      	adds	r0, #8
    67c6:	0140      	lsls	r0, r0, #5
    67c8:	1812      	adds	r2, r2, r0
    67ca:	2040      	movs	r0, #64	; 0x40
    67cc:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    67ce:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    67d0:	784f      	ldrb	r7, [r1, #1]
    67d2:	005d      	lsls	r5, r3, #1
    67d4:	18ad      	adds	r5, r5, r2
    67d6:	012d      	lsls	r5, r5, #4
    67d8:	4e4f      	ldr	r6, [pc, #316]	; (6918 <usb_device_endpoint_set_config+0x23c>)
    67da:	1975      	adds	r5, r6, r5
    67dc:	6868      	ldr	r0, [r5, #4]
    67de:	2407      	movs	r4, #7
    67e0:	403c      	ands	r4, r7
    67e2:	0724      	lsls	r4, r4, #28
    67e4:	4e4d      	ldr	r6, [pc, #308]	; (691c <usb_device_endpoint_set_config+0x240>)
    67e6:	4030      	ands	r0, r6
    67e8:	4320      	orrs	r0, r4
    67ea:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    67ec:	7889      	ldrb	r1, [r1, #2]
    67ee:	2900      	cmp	r1, #0
    67f0:	d000      	beq.n	67f4 <usb_device_endpoint_set_config+0x118>
    67f2:	e088      	b.n	6906 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    67f4:	005b      	lsls	r3, r3, #1
    67f6:	189b      	adds	r3, r3, r2
    67f8:	011b      	lsls	r3, r3, #4
    67fa:	4a47      	ldr	r2, [pc, #284]	; (6918 <usb_device_endpoint_set_config+0x23c>)
    67fc:	18d3      	adds	r3, r2, r3
    67fe:	685a      	ldr	r2, [r3, #4]
    6800:	0052      	lsls	r2, r2, #1
    6802:	0852      	lsrs	r2, r2, #1
    6804:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    6806:	2200      	movs	r2, #0
}
    6808:	0010      	movs	r0, r2
    680a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    680c:	015d      	lsls	r5, r3, #5
    680e:	6802      	ldr	r2, [r0, #0]
    6810:	4694      	mov	ip, r2
    6812:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6814:	2280      	movs	r2, #128	; 0x80
    6816:	0052      	lsls	r2, r2, #1
    6818:	5caf      	ldrb	r7, [r5, r2]
    681a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    681c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    681e:	4237      	tst	r7, r6
    6820:	d1f2      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6822:	3690      	adds	r6, #144	; 0x90
    6824:	5daa      	ldrb	r2, [r5, r6]
    6826:	2720      	movs	r7, #32
    6828:	433a      	orrs	r2, r7
    682a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    682c:	6802      	ldr	r2, [r0, #0]
    682e:	0018      	movs	r0, r3
    6830:	3008      	adds	r0, #8
    6832:	0140      	lsls	r0, r0, #5
    6834:	1812      	adds	r2, r2, r0
    6836:	2080      	movs	r0, #128	; 0x80
    6838:	7110      	strb	r0, [r2, #4]
    683a:	e7c8      	b.n	67ce <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    683c:	2c00      	cmp	r4, #0
    683e:	db17      	blt.n	6870 <usb_device_endpoint_set_config+0x194>
    6840:	015d      	lsls	r5, r3, #5
    6842:	6802      	ldr	r2, [r0, #0]
    6844:	4694      	mov	ip, r2
    6846:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6848:	2280      	movs	r2, #128	; 0x80
    684a:	0052      	lsls	r2, r2, #1
    684c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    684e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6850:	0776      	lsls	r6, r6, #29
    6852:	d1d9      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    6854:	2680      	movs	r6, #128	; 0x80
    6856:	0076      	lsls	r6, r6, #1
    6858:	5daa      	ldrb	r2, [r5, r6]
    685a:	2703      	movs	r7, #3
    685c:	433a      	orrs	r2, r7
    685e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6860:	6802      	ldr	r2, [r0, #0]
    6862:	0018      	movs	r0, r3
    6864:	3008      	adds	r0, #8
    6866:	0140      	lsls	r0, r0, #5
    6868:	1812      	adds	r2, r2, r0
    686a:	2040      	movs	r0, #64	; 0x40
    686c:	7150      	strb	r0, [r2, #5]
    686e:	e7ae      	b.n	67ce <usb_device_endpoint_set_config+0xf2>
    6870:	015d      	lsls	r5, r3, #5
    6872:	6802      	ldr	r2, [r0, #0]
    6874:	4694      	mov	ip, r2
    6876:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6878:	2280      	movs	r2, #128	; 0x80
    687a:	0052      	lsls	r2, r2, #1
    687c:	5caf      	ldrb	r7, [r5, r2]
    687e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6880:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6882:	4237      	tst	r7, r6
    6884:	d1c0      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    6886:	3690      	adds	r6, #144	; 0x90
    6888:	5daa      	ldrb	r2, [r5, r6]
    688a:	2730      	movs	r7, #48	; 0x30
    688c:	433a      	orrs	r2, r7
    688e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6890:	6802      	ldr	r2, [r0, #0]
    6892:	0018      	movs	r0, r3
    6894:	3008      	adds	r0, #8
    6896:	0140      	lsls	r0, r0, #5
    6898:	1812      	adds	r2, r2, r0
    689a:	2080      	movs	r0, #128	; 0x80
    689c:	7110      	strb	r0, [r2, #4]
    689e:	e796      	b.n	67ce <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    68a0:	2c00      	cmp	r4, #0
    68a2:	db17      	blt.n	68d4 <usb_device_endpoint_set_config+0x1f8>
    68a4:	015d      	lsls	r5, r3, #5
    68a6:	6802      	ldr	r2, [r0, #0]
    68a8:	4694      	mov	ip, r2
    68aa:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    68ac:	2280      	movs	r2, #128	; 0x80
    68ae:	0052      	lsls	r2, r2, #1
    68b0:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    68b2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    68b4:	0776      	lsls	r6, r6, #29
    68b6:	d1a7      	bne.n	6808 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    68b8:	2680      	movs	r6, #128	; 0x80
    68ba:	0076      	lsls	r6, r6, #1
    68bc:	5daa      	ldrb	r2, [r5, r6]
    68be:	2704      	movs	r7, #4
    68c0:	433a      	orrs	r2, r7
    68c2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    68c4:	6802      	ldr	r2, [r0, #0]
    68c6:	0018      	movs	r0, r3
    68c8:	3008      	adds	r0, #8
    68ca:	0140      	lsls	r0, r0, #5
    68cc:	1812      	adds	r2, r2, r0
    68ce:	2040      	movs	r0, #64	; 0x40
    68d0:	7150      	strb	r0, [r2, #5]
    68d2:	e77c      	b.n	67ce <usb_device_endpoint_set_config+0xf2>
    68d4:	015d      	lsls	r5, r3, #5
    68d6:	6802      	ldr	r2, [r0, #0]
    68d8:	4694      	mov	ip, r2
    68da:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    68dc:	2280      	movs	r2, #128	; 0x80
    68de:	0052      	lsls	r2, r2, #1
    68e0:	5caf      	ldrb	r7, [r5, r2]
    68e2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    68e4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    68e6:	4237      	tst	r7, r6
    68e8:	d000      	beq.n	68ec <usb_device_endpoint_set_config+0x210>
    68ea:	e78d      	b.n	6808 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    68ec:	3690      	adds	r6, #144	; 0x90
    68ee:	5daa      	ldrb	r2, [r5, r6]
    68f0:	2740      	movs	r7, #64	; 0x40
    68f2:	433a      	orrs	r2, r7
    68f4:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    68f6:	6802      	ldr	r2, [r0, #0]
    68f8:	0018      	movs	r0, r3
    68fa:	3008      	adds	r0, #8
    68fc:	0140      	lsls	r0, r0, #5
    68fe:	1812      	adds	r2, r2, r0
    6900:	2080      	movs	r0, #128	; 0x80
    6902:	7110      	strb	r0, [r2, #4]
    6904:	e763      	b.n	67ce <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6906:	6869      	ldr	r1, [r5, #4]
    6908:	2380      	movs	r3, #128	; 0x80
    690a:	061b      	lsls	r3, r3, #24
    690c:	430b      	orrs	r3, r1
    690e:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    6910:	2200      	movs	r2, #0
    6912:	e779      	b.n	6808 <usb_device_endpoint_set_config+0x12c>
    6914:	0000abe4 	.word	0x0000abe4
    6918:	20002930 	.word	0x20002930
    691c:	8fffffff 	.word	0x8fffffff

00006920 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6920:	230f      	movs	r3, #15
    6922:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    6924:	b249      	sxtb	r1, r1
    6926:	2900      	cmp	r1, #0
    6928:	db09      	blt.n	693e <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    692a:	6802      	ldr	r2, [r0, #0]
    692c:	3308      	adds	r3, #8
    692e:	015b      	lsls	r3, r3, #5
    6930:	5c98      	ldrb	r0, [r3, r2]
    6932:	0740      	lsls	r0, r0, #29
    6934:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    6936:	1e43      	subs	r3, r0, #1
    6938:	4198      	sbcs	r0, r3
    693a:	b2c0      	uxtb	r0, r0
}
    693c:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    693e:	6802      	ldr	r2, [r0, #0]
    6940:	3308      	adds	r3, #8
    6942:	015b      	lsls	r3, r3, #5
    6944:	5c98      	ldrb	r0, [r3, r2]
    6946:	0640      	lsls	r0, r0, #25
    6948:	0f40      	lsrs	r0, r0, #29
    694a:	e7f4      	b.n	6936 <usb_device_endpoint_is_configured+0x16>

0000694c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    694c:	230f      	movs	r3, #15
    694e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    6950:	b249      	sxtb	r1, r1
    6952:	2900      	cmp	r1, #0
    6954:	db0a      	blt.n	696c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6956:	3308      	adds	r3, #8
    6958:	015b      	lsls	r3, r3, #5
    695a:	6802      	ldr	r2, [r0, #0]
    695c:	18d2      	adds	r2, r2, r3
    695e:	2140      	movs	r1, #64	; 0x40
    6960:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6962:	6802      	ldr	r2, [r0, #0]
    6964:	18d3      	adds	r3, r2, r3
    6966:	2201      	movs	r2, #1
    6968:	71da      	strb	r2, [r3, #7]
	}
}
    696a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    696c:	3308      	adds	r3, #8
    696e:	015b      	lsls	r3, r3, #5
    6970:	6802      	ldr	r2, [r0, #0]
    6972:	18d2      	adds	r2, r2, r3
    6974:	2180      	movs	r1, #128	; 0x80
    6976:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6978:	6802      	ldr	r2, [r0, #0]
    697a:	18d3      	adds	r3, r2, r3
    697c:	2202      	movs	r2, #2
    697e:	71da      	strb	r2, [r3, #7]
    6980:	e7f3      	b.n	696a <usb_device_endpoint_abort_job+0x1e>

00006982 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6982:	230f      	movs	r3, #15
    6984:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6986:	b249      	sxtb	r1, r1
    6988:	2900      	cmp	r1, #0
    698a:	db07      	blt.n	699c <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    698c:	6802      	ldr	r2, [r0, #0]
    698e:	3308      	adds	r3, #8
    6990:	015b      	lsls	r3, r3, #5
    6992:	18d3      	adds	r3, r2, r3
    6994:	7998      	ldrb	r0, [r3, #6]
    6996:	06c0      	lsls	r0, r0, #27
    6998:	0fc0      	lsrs	r0, r0, #31
	}
}
    699a:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    699c:	6802      	ldr	r2, [r0, #0]
    699e:	3308      	adds	r3, #8
    69a0:	015b      	lsls	r3, r3, #5
    69a2:	18d3      	adds	r3, r2, r3
    69a4:	7998      	ldrb	r0, [r3, #6]
    69a6:	0680      	lsls	r0, r0, #26
    69a8:	0fc0      	lsrs	r0, r0, #31
    69aa:	e7f6      	b.n	699a <usb_device_endpoint_is_halted+0x18>

000069ac <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    69ac:	230f      	movs	r3, #15
    69ae:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    69b0:	b249      	sxtb	r1, r1
    69b2:	2900      	cmp	r1, #0
    69b4:	db06      	blt.n	69c4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    69b6:	6802      	ldr	r2, [r0, #0]
    69b8:	3308      	adds	r3, #8
    69ba:	015b      	lsls	r3, r3, #5
    69bc:	18d3      	adds	r3, r2, r3
    69be:	2210      	movs	r2, #16
    69c0:	715a      	strb	r2, [r3, #5]
	}
}
    69c2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    69c4:	6802      	ldr	r2, [r0, #0]
    69c6:	3308      	adds	r3, #8
    69c8:	015b      	lsls	r3, r3, #5
    69ca:	18d3      	adds	r3, r2, r3
    69cc:	2220      	movs	r2, #32
    69ce:	715a      	strb	r2, [r3, #5]
    69d0:	e7f7      	b.n	69c2 <usb_device_endpoint_set_halt+0x16>

000069d2 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    69d2:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    69d4:	230f      	movs	r3, #15
    69d6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    69d8:	b249      	sxtb	r1, r1
    69da:	2900      	cmp	r1, #0
    69dc:	db1d      	blt.n	6a1a <usb_device_endpoint_clear_halt+0x48>
    69de:	0159      	lsls	r1, r3, #5
    69e0:	6802      	ldr	r2, [r0, #0]
    69e2:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    69e4:	2483      	movs	r4, #131	; 0x83
    69e6:	0064      	lsls	r4, r4, #1
    69e8:	5d14      	ldrb	r4, [r2, r4]
    69ea:	06e4      	lsls	r4, r4, #27
    69ec:	d514      	bpl.n	6a18 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    69ee:	2510      	movs	r5, #16
    69f0:	2482      	movs	r4, #130	; 0x82
    69f2:	0064      	lsls	r4, r4, #1
    69f4:	5515      	strb	r5, [r2, r4]
    69f6:	6802      	ldr	r2, [r0, #0]
    69f8:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    69fa:	2108      	movs	r1, #8
    69fc:	31ff      	adds	r1, #255	; 0xff
    69fe:	5c51      	ldrb	r1, [r2, r1]
    6a00:	0689      	lsls	r1, r1, #26
    6a02:	d509      	bpl.n	6a18 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6a04:	3ce4      	subs	r4, #228	; 0xe4
    6a06:	2108      	movs	r1, #8
    6a08:	31ff      	adds	r1, #255	; 0xff
    6a0a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    6a0c:	6802      	ldr	r2, [r0, #0]
    6a0e:	3308      	adds	r3, #8
    6a10:	015b      	lsls	r3, r3, #5
    6a12:	18d3      	adds	r3, r2, r3
    6a14:	2201      	movs	r2, #1
    6a16:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    6a18:	bd30      	pop	{r4, r5, pc}
    6a1a:	0159      	lsls	r1, r3, #5
    6a1c:	6802      	ldr	r2, [r0, #0]
    6a1e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    6a20:	2483      	movs	r4, #131	; 0x83
    6a22:	0064      	lsls	r4, r4, #1
    6a24:	5d14      	ldrb	r4, [r2, r4]
    6a26:	06a4      	lsls	r4, r4, #26
    6a28:	d5f6      	bpl.n	6a18 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    6a2a:	2520      	movs	r5, #32
    6a2c:	2482      	movs	r4, #130	; 0x82
    6a2e:	0064      	lsls	r4, r4, #1
    6a30:	5515      	strb	r5, [r2, r4]
    6a32:	6802      	ldr	r2, [r0, #0]
    6a34:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6a36:	2108      	movs	r1, #8
    6a38:	31ff      	adds	r1, #255	; 0xff
    6a3a:	5c51      	ldrb	r1, [r2, r1]
    6a3c:	0649      	lsls	r1, r1, #25
    6a3e:	d5eb      	bpl.n	6a18 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6a40:	3cc4      	subs	r4, #196	; 0xc4
    6a42:	2108      	movs	r1, #8
    6a44:	31ff      	adds	r1, #255	; 0xff
    6a46:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    6a48:	6802      	ldr	r2, [r0, #0]
    6a4a:	3308      	adds	r3, #8
    6a4c:	015b      	lsls	r3, r3, #5
    6a4e:	18d3      	adds	r3, r2, r3
    6a50:	2202      	movs	r2, #2
    6a52:	711a      	strb	r2, [r3, #4]
    6a54:	e7e0      	b.n	6a18 <usb_device_endpoint_clear_halt+0x46>
	...

00006a58 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6a58:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    6a5a:	000c      	movs	r4, r1
    6a5c:	3408      	adds	r4, #8
    6a5e:	0164      	lsls	r4, r4, #5
    6a60:	6805      	ldr	r5, [r0, #0]
    6a62:	5d64      	ldrb	r4, [r4, r5]
    6a64:	0664      	lsls	r4, r4, #25
    6a66:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6a68:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6a6a:	2c00      	cmp	r4, #0
    6a6c:	d101      	bne.n	6a72 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    6a6e:	0028      	movs	r0, r5
    6a70:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    6a72:	014c      	lsls	r4, r1, #5
    6a74:	4d0b      	ldr	r5, [pc, #44]	; (6aa4 <usb_device_endpoint_write_buffer_job+0x4c>)
    6a76:	192d      	adds	r5, r5, r4
    6a78:	002c      	movs	r4, r5
    6a7a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6a7c:	696a      	ldr	r2, [r5, #20]
    6a7e:	4d0a      	ldr	r5, [pc, #40]	; (6aa8 <usb_device_endpoint_write_buffer_job+0x50>)
    6a80:	402a      	ands	r2, r5
    6a82:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    6a84:	6962      	ldr	r2, [r4, #20]
    6a86:	049b      	lsls	r3, r3, #18
    6a88:	0c9b      	lsrs	r3, r3, #18
    6a8a:	0b92      	lsrs	r2, r2, #14
    6a8c:	0392      	lsls	r2, r2, #14
    6a8e:	4313      	orrs	r3, r2
    6a90:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    6a92:	6803      	ldr	r3, [r0, #0]
    6a94:	3108      	adds	r1, #8
    6a96:	0149      	lsls	r1, r1, #5
    6a98:	1859      	adds	r1, r3, r1
    6a9a:	2380      	movs	r3, #128	; 0x80
    6a9c:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    6a9e:	2500      	movs	r5, #0
    6aa0:	e7e5      	b.n	6a6e <usb_device_endpoint_write_buffer_job+0x16>
    6aa2:	46c0      	nop			; (mov r8, r8)
    6aa4:	20002930 	.word	0x20002930
    6aa8:	f0003fff 	.word	0xf0003fff

00006aac <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6aac:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6aae:	000c      	movs	r4, r1
    6ab0:	3408      	adds	r4, #8
    6ab2:	0164      	lsls	r4, r4, #5
    6ab4:	6805      	ldr	r5, [r0, #0]
    6ab6:	5d64      	ldrb	r4, [r4, r5]
    6ab8:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6aba:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6abc:	2c00      	cmp	r4, #0
    6abe:	d101      	bne.n	6ac4 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    6ac0:	0028      	movs	r0, r5
    6ac2:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6ac4:	4c0b      	ldr	r4, [pc, #44]	; (6af4 <usb_device_endpoint_read_buffer_job+0x48>)
    6ac6:	014d      	lsls	r5, r1, #5
    6ac8:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    6aca:	1962      	adds	r2, r4, r5
    6acc:	6854      	ldr	r4, [r2, #4]
    6ace:	049b      	lsls	r3, r3, #18
    6ad0:	091b      	lsrs	r3, r3, #4
    6ad2:	4d09      	ldr	r5, [pc, #36]	; (6af8 <usb_device_endpoint_read_buffer_job+0x4c>)
    6ad4:	402c      	ands	r4, r5
    6ad6:	4323      	orrs	r3, r4
    6ad8:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6ada:	6853      	ldr	r3, [r2, #4]
    6adc:	0b9b      	lsrs	r3, r3, #14
    6ade:	039b      	lsls	r3, r3, #14
    6ae0:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6ae2:	6803      	ldr	r3, [r0, #0]
    6ae4:	3108      	adds	r1, #8
    6ae6:	0149      	lsls	r1, r1, #5
    6ae8:	1859      	adds	r1, r3, r1
    6aea:	2340      	movs	r3, #64	; 0x40
    6aec:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6aee:	2500      	movs	r5, #0
    6af0:	e7e6      	b.n	6ac0 <usb_device_endpoint_read_buffer_job+0x14>
    6af2:	46c0      	nop			; (mov r8, r8)
    6af4:	20002930 	.word	0x20002930
    6af8:	f0003fff 	.word	0xf0003fff

00006afc <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6afc:	4b09      	ldr	r3, [pc, #36]	; (6b24 <usb_device_endpoint_setup_buffer_job+0x28>)
    6afe:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6b00:	685a      	ldr	r2, [r3, #4]
    6b02:	4909      	ldr	r1, [pc, #36]	; (6b28 <usb_device_endpoint_setup_buffer_job+0x2c>)
    6b04:	4011      	ands	r1, r2
    6b06:	2280      	movs	r2, #128	; 0x80
    6b08:	0292      	lsls	r2, r2, #10
    6b0a:	430a      	orrs	r2, r1
    6b0c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6b0e:	685a      	ldr	r2, [r3, #4]
    6b10:	0b92      	lsrs	r2, r2, #14
    6b12:	0392      	lsls	r2, r2, #14
    6b14:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6b16:	6802      	ldr	r2, [r0, #0]
    6b18:	2140      	movs	r1, #64	; 0x40
    6b1a:	2382      	movs	r3, #130	; 0x82
    6b1c:	005b      	lsls	r3, r3, #1
    6b1e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    6b20:	2000      	movs	r0, #0
    6b22:	4770      	bx	lr
    6b24:	20002930 	.word	0x20002930
    6b28:	f0003fff 	.word	0xf0003fff

00006b2c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    6b2c:	6802      	ldr	r2, [r0, #0]
    6b2e:	7813      	ldrb	r3, [r2, #0]
    6b30:	2102      	movs	r1, #2
    6b32:	430b      	orrs	r3, r1
    6b34:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    6b36:	6802      	ldr	r2, [r0, #0]
    6b38:	7893      	ldrb	r3, [r2, #2]
    6b3a:	2b02      	cmp	r3, #2
    6b3c:	d0fc      	beq.n	6b38 <usb_enable+0xc>
}
    6b3e:	4770      	bx	lr

00006b40 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b42:	46de      	mov	lr, fp
    6b44:	4657      	mov	r7, sl
    6b46:	464e      	mov	r6, r9
    6b48:	4645      	mov	r5, r8
    6b4a:	b5e0      	push	{r5, r6, r7, lr}
    6b4c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    6b4e:	4bc2      	ldr	r3, [pc, #776]	; (6e58 <USB_Handler+0x318>)
    6b50:	681f      	ldr	r7, [r3, #0]
    6b52:	683d      	ldr	r5, [r7, #0]
    6b54:	782b      	ldrb	r3, [r5, #0]
    6b56:	09db      	lsrs	r3, r3, #7
    6b58:	d114      	bne.n	6b84 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    6b5a:	8c2e      	ldrh	r6, [r5, #32]
    6b5c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    6b5e:	2e00      	cmp	r6, #0
    6b60:	d000      	beq.n	6b64 <USB_Handler+0x24>
    6b62:	e1a9      	b.n	6eb8 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    6b64:	8bae      	ldrh	r6, [r5, #28]
    6b66:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    6b68:	23ab      	movs	r3, #171	; 0xab
    6b6a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    6b6c:	5afb      	ldrh	r3, [r7, r3]
    6b6e:	22aa      	movs	r2, #170	; 0xaa
    6b70:	0052      	lsls	r2, r2, #1
    6b72:	5abd      	ldrh	r5, [r7, r2]
    6b74:	401d      	ands	r5, r3
    6b76:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6b78:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    6b7a:	4fb8      	ldr	r7, [pc, #736]	; (6e5c <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6b7c:	4bb6      	ldr	r3, [pc, #728]	; (6e58 <USB_Handler+0x318>)
    6b7e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6b80:	4698      	mov	r8, r3
    6b82:	e184      	b.n	6e8e <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6b84:	8c2b      	ldrh	r3, [r5, #32]
    6b86:	b29b      	uxth	r3, r3
    6b88:	2b00      	cmp	r3, #0
    6b8a:	d100      	bne.n	6b8e <USB_Handler+0x4e>
    6b8c:	e0de      	b.n	6d4c <USB_Handler+0x20c>
    6b8e:	8c28      	ldrh	r0, [r5, #32]
    6b90:	b280      	uxth	r0, r0
    6b92:	4bb3      	ldr	r3, [pc, #716]	; (6e60 <USB_Handler+0x320>)
    6b94:	4798      	blx	r3
    6b96:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    6b98:	281f      	cmp	r0, #31
    6b9a:	d900      	bls.n	6b9e <USB_Handler+0x5e>
    6b9c:	e0d6      	b.n	6d4c <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6b9e:	0003      	movs	r3, r0
    6ba0:	3308      	adds	r3, #8
    6ba2:	015b      	lsls	r3, r3, #5
    6ba4:	18ed      	adds	r5, r5, r3
    6ba6:	79ed      	ldrb	r5, [r5, #7]
    6ba8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6baa:	07ab      	lsls	r3, r5, #30
    6bac:	d041      	beq.n	6c32 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6bae:	4aad      	ldr	r2, [pc, #692]	; (6e64 <USB_Handler+0x324>)
    6bb0:	2301      	movs	r3, #1
    6bb2:	4083      	lsls	r3, r0
    6bb4:	6811      	ldr	r1, [r2, #0]
    6bb6:	4399      	bics	r1, r3
    6bb8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6bba:	0003      	movs	r3, r0
    6bbc:	3308      	adds	r3, #8
    6bbe:	015b      	lsls	r3, r3, #5
    6bc0:	683a      	ldr	r2, [r7, #0]
    6bc2:	4694      	mov	ip, r2
    6bc4:	4463      	add	r3, ip
    6bc6:	2203      	movs	r2, #3
    6bc8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6bca:	183b      	adds	r3, r7, r0
    6bcc:	33ae      	adds	r3, #174	; 0xae
    6bce:	781b      	ldrb	r3, [r3, #0]
    6bd0:	07db      	lsls	r3, r3, #31
    6bd2:	d52e      	bpl.n	6c32 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    6bd4:	4ba4      	ldr	r3, [pc, #656]	; (6e68 <USB_Handler+0x328>)
    6bd6:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6bd8:	683a      	ldr	r2, [r7, #0]
    6bda:	0003      	movs	r3, r0
    6bdc:	3308      	adds	r3, #8
    6bde:	015b      	lsls	r3, r3, #5
    6be0:	5c9b      	ldrb	r3, [r3, r2]
    6be2:	079b      	lsls	r3, r3, #30
    6be4:	0f9b      	lsrs	r3, r3, #30
    6be6:	2b01      	cmp	r3, #1
    6be8:	d100      	bne.n	6bec <USB_Handler+0xac>
    6bea:	e081      	b.n	6cf0 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6bec:	0142      	lsls	r2, r0, #5
    6bee:	4b9f      	ldr	r3, [pc, #636]	; (6e6c <USB_Handler+0x32c>)
    6bf0:	189b      	adds	r3, r3, r2
    6bf2:	685a      	ldr	r2, [r3, #4]
    6bf4:	0112      	lsls	r2, r2, #4
    6bf6:	0c92      	lsrs	r2, r2, #18
    6bf8:	b290      	uxth	r0, r2
    6bfa:	499b      	ldr	r1, [pc, #620]	; (6e68 <USB_Handler+0x328>)
    6bfc:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6bfe:	685a      	ldr	r2, [r3, #4]
    6c00:	0492      	lsls	r2, r2, #18
    6c02:	0c92      	lsrs	r2, r2, #18
    6c04:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6c06:	685a      	ldr	r2, [r3, #4]
    6c08:	4999      	ldr	r1, [pc, #612]	; (6e70 <USB_Handler+0x330>)
    6c0a:	400a      	ands	r2, r1
    6c0c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6c0e:	2800      	cmp	r0, #0
    6c10:	d107      	bne.n	6c22 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6c12:	0162      	lsls	r2, r4, #5
    6c14:	4b95      	ldr	r3, [pc, #596]	; (6e6c <USB_Handler+0x32c>)
    6c16:	189b      	adds	r3, r3, r2
    6c18:	685b      	ldr	r3, [r3, #4]
    6c1a:	049b      	lsls	r3, r3, #18
    6c1c:	0c9b      	lsrs	r3, r3, #18
    6c1e:	4a92      	ldr	r2, [pc, #584]	; (6e68 <USB_Handler+0x328>)
    6c20:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6c22:	4b8d      	ldr	r3, [pc, #564]	; (6e58 <USB_Handler+0x318>)
    6c24:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6c26:	1ca3      	adds	r3, r4, #2
    6c28:	011b      	lsls	r3, r3, #4
    6c2a:	18c3      	adds	r3, r0, r3
    6c2c:	685b      	ldr	r3, [r3, #4]
    6c2e:	498e      	ldr	r1, [pc, #568]	; (6e68 <USB_Handler+0x328>)
    6c30:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6c32:	076b      	lsls	r3, r5, #29
    6c34:	d50e      	bpl.n	6c54 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6c36:	4a8b      	ldr	r2, [pc, #556]	; (6e64 <USB_Handler+0x324>)
    6c38:	2301      	movs	r3, #1
    6c3a:	40a3      	lsls	r3, r4
    6c3c:	6811      	ldr	r1, [r2, #0]
    6c3e:	4399      	bics	r1, r3
    6c40:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6c42:	4b85      	ldr	r3, [pc, #532]	; (6e58 <USB_Handler+0x318>)
    6c44:	681b      	ldr	r3, [r3, #0]
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	0022      	movs	r2, r4
    6c4a:	3208      	adds	r2, #8
    6c4c:	0152      	lsls	r2, r2, #5
    6c4e:	189b      	adds	r3, r3, r2
    6c50:	2204      	movs	r2, #4
    6c52:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6c54:	072b      	lsls	r3, r5, #28
    6c56:	d514      	bpl.n	6c82 <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6c58:	4a82      	ldr	r2, [pc, #520]	; (6e64 <USB_Handler+0x324>)
    6c5a:	2301      	movs	r3, #1
    6c5c:	40a3      	lsls	r3, r4
    6c5e:	6811      	ldr	r1, [r2, #0]
    6c60:	4399      	bics	r1, r3
    6c62:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6c64:	4b7c      	ldr	r3, [pc, #496]	; (6e58 <USB_Handler+0x318>)
    6c66:	6818      	ldr	r0, [r3, #0]
    6c68:	0023      	movs	r3, r4
    6c6a:	3308      	adds	r3, #8
    6c6c:	015b      	lsls	r3, r3, #5
    6c6e:	6802      	ldr	r2, [r0, #0]
    6c70:	4694      	mov	ip, r2
    6c72:	4463      	add	r3, ip
    6c74:	2208      	movs	r2, #8
    6c76:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6c78:	1903      	adds	r3, r0, r4
    6c7a:	33ae      	adds	r3, #174	; 0xae
    6c7c:	781b      	ldrb	r3, [r3, #0]
    6c7e:	079b      	lsls	r3, r3, #30
    6c80:	d447      	bmi.n	6d12 <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6c82:	06eb      	lsls	r3, r5, #27
    6c84:	d514      	bpl.n	6cb0 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6c86:	4a77      	ldr	r2, [pc, #476]	; (6e64 <USB_Handler+0x324>)
    6c88:	2301      	movs	r3, #1
    6c8a:	40a3      	lsls	r3, r4
    6c8c:	6811      	ldr	r1, [r2, #0]
    6c8e:	4399      	bics	r1, r3
    6c90:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6c92:	4b71      	ldr	r3, [pc, #452]	; (6e58 <USB_Handler+0x318>)
    6c94:	6818      	ldr	r0, [r3, #0]
    6c96:	0023      	movs	r3, r4
    6c98:	3308      	adds	r3, #8
    6c9a:	015b      	lsls	r3, r3, #5
    6c9c:	6802      	ldr	r2, [r0, #0]
    6c9e:	4694      	mov	ip, r2
    6ca0:	4463      	add	r3, ip
    6ca2:	2210      	movs	r2, #16
    6ca4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6ca6:	1903      	adds	r3, r0, r4
    6ca8:	33ae      	adds	r3, #174	; 0xae
    6caa:	781b      	ldrb	r3, [r3, #0]
    6cac:	075b      	lsls	r3, r3, #29
    6cae:	d43e      	bmi.n	6d2e <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6cb0:	06ab      	lsls	r3, r5, #26
    6cb2:	d400      	bmi.n	6cb6 <USB_Handler+0x176>
    6cb4:	e0b0      	b.n	6e18 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6cb6:	4a6b      	ldr	r2, [pc, #428]	; (6e64 <USB_Handler+0x324>)
    6cb8:	2301      	movs	r3, #1
    6cba:	40a3      	lsls	r3, r4
    6cbc:	6811      	ldr	r1, [r2, #0]
    6cbe:	4399      	bics	r1, r3
    6cc0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6cc2:	4b65      	ldr	r3, [pc, #404]	; (6e58 <USB_Handler+0x318>)
    6cc4:	6818      	ldr	r0, [r3, #0]
    6cc6:	0023      	movs	r3, r4
    6cc8:	3308      	adds	r3, #8
    6cca:	015b      	lsls	r3, r3, #5
    6ccc:	6802      	ldr	r2, [r0, #0]
    6cce:	4694      	mov	ip, r2
    6cd0:	4463      	add	r3, ip
    6cd2:	2220      	movs	r2, #32
    6cd4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6cd6:	1903      	adds	r3, r0, r4
    6cd8:	33ae      	adds	r3, #174	; 0xae
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	071b      	lsls	r3, r3, #28
    6cde:	d400      	bmi.n	6ce2 <USB_Handler+0x1a2>
    6ce0:	e09a      	b.n	6e18 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    6ce2:	4961      	ldr	r1, [pc, #388]	; (6e68 <USB_Handler+0x328>)
    6ce4:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6ce6:	0124      	lsls	r4, r4, #4
    6ce8:	1904      	adds	r4, r0, r4
    6cea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6cec:	4798      	blx	r3
    6cee:	e093      	b.n	6e18 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6cf0:	0142      	lsls	r2, r0, #5
    6cf2:	4b5e      	ldr	r3, [pc, #376]	; (6e6c <USB_Handler+0x32c>)
    6cf4:	189b      	adds	r3, r3, r2
    6cf6:	685a      	ldr	r2, [r3, #4]
    6cf8:	0492      	lsls	r2, r2, #18
    6cfa:	0c92      	lsrs	r2, r2, #18
    6cfc:	495a      	ldr	r1, [pc, #360]	; (6e68 <USB_Handler+0x328>)
    6cfe:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6d00:	685a      	ldr	r2, [r3, #4]
    6d02:	0112      	lsls	r2, r2, #4
    6d04:	0c92      	lsrs	r2, r2, #18
    6d06:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6d08:	685a      	ldr	r2, [r3, #4]
    6d0a:	0b92      	lsrs	r2, r2, #14
    6d0c:	0392      	lsls	r2, r2, #14
    6d0e:	605a      	str	r2, [r3, #4]
    6d10:	e787      	b.n	6c22 <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    6d12:	4955      	ldr	r1, [pc, #340]	; (6e68 <USB_Handler+0x328>)
    6d14:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6d16:	0162      	lsls	r2, r4, #5
    6d18:	4b54      	ldr	r3, [pc, #336]	; (6e6c <USB_Handler+0x32c>)
    6d1a:	189b      	adds	r3, r3, r2
    6d1c:	89db      	ldrh	r3, [r3, #14]
    6d1e:	221f      	movs	r2, #31
    6d20:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    6d22:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6d24:	0123      	lsls	r3, r4, #4
    6d26:	18c3      	adds	r3, r0, r3
    6d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d2a:	4798      	blx	r3
    6d2c:	e7a9      	b.n	6c82 <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    6d2e:	494e      	ldr	r1, [pc, #312]	; (6e68 <USB_Handler+0x328>)
    6d30:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6d32:	0162      	lsls	r2, r4, #5
    6d34:	4b4d      	ldr	r3, [pc, #308]	; (6e6c <USB_Handler+0x32c>)
    6d36:	189b      	adds	r3, r3, r2
    6d38:	685b      	ldr	r3, [r3, #4]
    6d3a:	011b      	lsls	r3, r3, #4
    6d3c:	0c9b      	lsrs	r3, r3, #18
    6d3e:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6d40:	0123      	lsls	r3, r4, #4
    6d42:	18c3      	adds	r3, r0, r3
    6d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d46:	2100      	movs	r1, #0
    6d48:	4798      	blx	r3
    6d4a:	e7b1      	b.n	6cb0 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6d4c:	8bac      	ldrh	r4, [r5, #28]
    6d4e:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6d50:	0763      	lsls	r3, r4, #29
    6d52:	d505      	bpl.n	6d60 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6d54:	2304      	movs	r3, #4
    6d56:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6d58:	33a1      	adds	r3, #161	; 0xa1
    6d5a:	5cfb      	ldrb	r3, [r7, r3]
    6d5c:	07db      	lsls	r3, r3, #31
    6d5e:	d462      	bmi.n	6e26 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    6d60:	0723      	lsls	r3, r4, #28
    6d62:	d50b      	bpl.n	6d7c <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    6d64:	2200      	movs	r2, #0
    6d66:	4b3f      	ldr	r3, [pc, #252]	; (6e64 <USB_Handler+0x324>)
    6d68:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6d6a:	4b3b      	ldr	r3, [pc, #236]	; (6e58 <USB_Handler+0x318>)
    6d6c:	6818      	ldr	r0, [r3, #0]
    6d6e:	2308      	movs	r3, #8
    6d70:	6802      	ldr	r2, [r0, #0]
    6d72:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6d74:	339d      	adds	r3, #157	; 0x9d
    6d76:	5cc3      	ldrb	r3, [r0, r3]
    6d78:	079b      	lsls	r3, r3, #30
    6d7a:	d458      	bmi.n	6e2e <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6d7c:	0663      	lsls	r3, r4, #25
    6d7e:	d508      	bpl.n	6d92 <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    6d80:	4b35      	ldr	r3, [pc, #212]	; (6e58 <USB_Handler+0x318>)
    6d82:	6818      	ldr	r0, [r3, #0]
    6d84:	2340      	movs	r3, #64	; 0x40
    6d86:	6802      	ldr	r2, [r0, #0]
    6d88:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6d8a:	3365      	adds	r3, #101	; 0x65
    6d8c:	5cc3      	ldrb	r3, [r0, r3]
    6d8e:	06db      	lsls	r3, r3, #27
    6d90:	d450      	bmi.n	6e34 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6d92:	06a3      	lsls	r3, r4, #26
    6d94:	d508      	bpl.n	6da8 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6d96:	4b30      	ldr	r3, [pc, #192]	; (6e58 <USB_Handler+0x318>)
    6d98:	6818      	ldr	r0, [r3, #0]
    6d9a:	2320      	movs	r3, #32
    6d9c:	6802      	ldr	r2, [r0, #0]
    6d9e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6da0:	3385      	adds	r3, #133	; 0x85
    6da2:	5cc3      	ldrb	r3, [r0, r3]
    6da4:	071b      	lsls	r3, r3, #28
    6da6:	d448      	bmi.n	6e3a <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6da8:	06e3      	lsls	r3, r4, #27
    6daa:	d508      	bpl.n	6dbe <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    6dac:	4b2a      	ldr	r3, [pc, #168]	; (6e58 <USB_Handler+0x318>)
    6dae:	6818      	ldr	r0, [r3, #0]
    6db0:	2310      	movs	r3, #16
    6db2:	6802      	ldr	r2, [r0, #0]
    6db4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6db6:	3395      	adds	r3, #149	; 0x95
    6db8:	5cc3      	ldrb	r3, [r0, r3]
    6dba:	075b      	lsls	r3, r3, #29
    6dbc:	d440      	bmi.n	6e40 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6dbe:	0623      	lsls	r3, r4, #24
    6dc0:	d50b      	bpl.n	6dda <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    6dc2:	2200      	movs	r2, #0
    6dc4:	4b27      	ldr	r3, [pc, #156]	; (6e64 <USB_Handler+0x324>)
    6dc6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6dc8:	4b23      	ldr	r3, [pc, #140]	; (6e58 <USB_Handler+0x318>)
    6dca:	6818      	ldr	r0, [r3, #0]
    6dcc:	2380      	movs	r3, #128	; 0x80
    6dce:	6802      	ldr	r2, [r0, #0]
    6dd0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6dd2:	3325      	adds	r3, #37	; 0x25
    6dd4:	5cc3      	ldrb	r3, [r0, r3]
    6dd6:	069b      	lsls	r3, r3, #26
    6dd8:	d435      	bmi.n	6e46 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    6dda:	05e3      	lsls	r3, r4, #23
    6ddc:	d50c      	bpl.n	6df8 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    6dde:	2200      	movs	r2, #0
    6de0:	4b20      	ldr	r3, [pc, #128]	; (6e64 <USB_Handler+0x324>)
    6de2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6de4:	4b1c      	ldr	r3, [pc, #112]	; (6e58 <USB_Handler+0x318>)
    6de6:	6818      	ldr	r0, [r3, #0]
    6de8:	2380      	movs	r3, #128	; 0x80
    6dea:	005b      	lsls	r3, r3, #1
    6dec:	6802      	ldr	r2, [r0, #0]
    6dee:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6df0:	3b5b      	subs	r3, #91	; 0x5b
    6df2:	5cc3      	ldrb	r3, [r0, r3]
    6df4:	065b      	lsls	r3, r3, #25
    6df6:	d429      	bmi.n	6e4c <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6df8:	05a3      	lsls	r3, r4, #22
    6dfa:	d50d      	bpl.n	6e18 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    6dfc:	2200      	movs	r2, #0
    6dfe:	4b19      	ldr	r3, [pc, #100]	; (6e64 <USB_Handler+0x324>)
    6e00:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6e02:	4b15      	ldr	r3, [pc, #84]	; (6e58 <USB_Handler+0x318>)
    6e04:	6818      	ldr	r0, [r3, #0]
    6e06:	2380      	movs	r3, #128	; 0x80
    6e08:	009b      	lsls	r3, r3, #2
    6e0a:	6802      	ldr	r2, [r0, #0]
    6e0c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    6e0e:	3b5c      	subs	r3, #92	; 0x5c
    6e10:	3bff      	subs	r3, #255	; 0xff
    6e12:	5cc3      	ldrb	r3, [r0, r3]
    6e14:	2b7f      	cmp	r3, #127	; 0x7f
    6e16:	d81c      	bhi.n	6e52 <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    6e18:	b003      	add	sp, #12
    6e1a:	bc3c      	pop	{r2, r3, r4, r5}
    6e1c:	4690      	mov	r8, r2
    6e1e:	4699      	mov	r9, r3
    6e20:	46a2      	mov	sl, r4
    6e22:	46ab      	mov	fp, r5
    6e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6e26:	687b      	ldr	r3, [r7, #4]
    6e28:	0038      	movs	r0, r7
    6e2a:	4798      	blx	r3
    6e2c:	e798      	b.n	6d60 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6e2e:	6883      	ldr	r3, [r0, #8]
    6e30:	4798      	blx	r3
    6e32:	e7a3      	b.n	6d7c <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6e34:	6943      	ldr	r3, [r0, #20]
    6e36:	4798      	blx	r3
    6e38:	e7ab      	b.n	6d92 <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6e3a:	6903      	ldr	r3, [r0, #16]
    6e3c:	4798      	blx	r3
    6e3e:	e7b3      	b.n	6da8 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6e40:	68c3      	ldr	r3, [r0, #12]
    6e42:	4798      	blx	r3
    6e44:	e7bb      	b.n	6dbe <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6e46:	6983      	ldr	r3, [r0, #24]
    6e48:	4798      	blx	r3
    6e4a:	e7c6      	b.n	6dda <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6e4c:	69c3      	ldr	r3, [r0, #28]
    6e4e:	4798      	blx	r3
    6e50:	e7d2      	b.n	6df8 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6e52:	6a03      	ldr	r3, [r0, #32]
    6e54:	4798      	blx	r3
    6e56:	e7df      	b.n	6e18 <USB_Handler+0x2d8>
    6e58:	200002dc 	.word	0x200002dc
    6e5c:	0000abf8 	.word	0x0000abf8
    6e60:	00009051 	.word	0x00009051
    6e64:	200002ec 	.word	0x200002ec
    6e68:	200002f0 	.word	0x200002f0
    6e6c:	20002930 	.word	0x20002930
    6e70:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6e74:	0023      	movs	r3, r4
    6e76:	332e      	adds	r3, #46	; 0x2e
    6e78:	009b      	lsls	r3, r3, #2
    6e7a:	4642      	mov	r2, r8
    6e7c:	6812      	ldr	r2, [r2, #0]
    6e7e:	589b      	ldr	r3, [r3, r2]
    6e80:	499e      	ldr	r1, [pc, #632]	; (70fc <USB_Handler+0x5bc>)
    6e82:	4642      	mov	r2, r8
    6e84:	6810      	ldr	r0, [r2, #0]
    6e86:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6e88:	3401      	adds	r4, #1
    6e8a:	2c07      	cmp	r4, #7
    6e8c:	d0c4      	beq.n	6e18 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    6e8e:	0063      	lsls	r3, r4, #1
    6e90:	5bdb      	ldrh	r3, [r3, r7]
    6e92:	4233      	tst	r3, r6
    6e94:	d003      	beq.n	6e9e <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6e96:	464a      	mov	r2, r9
    6e98:	6812      	ldr	r2, [r2, #0]
    6e9a:	6812      	ldr	r2, [r2, #0]
    6e9c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    6e9e:	422b      	tst	r3, r5
    6ea0:	d0f2      	beq.n	6e88 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    6ea2:	2c06      	cmp	r4, #6
    6ea4:	d1e6      	bne.n	6e74 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    6ea6:	4b96      	ldr	r3, [pc, #600]	; (7100 <USB_Handler+0x5c0>)
    6ea8:	891b      	ldrh	r3, [r3, #8]
    6eaa:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    6eac:	2280      	movs	r2, #128	; 0x80
    6eae:	0052      	lsls	r2, r2, #1
    6eb0:	4013      	ands	r3, r2
    6eb2:	4a92      	ldr	r2, [pc, #584]	; (70fc <USB_Handler+0x5bc>)
    6eb4:	6013      	str	r3, [r2, #0]
    6eb6:	e7dd      	b.n	6e74 <USB_Handler+0x334>
    6eb8:	003c      	movs	r4, r7
    6eba:	3459      	adds	r4, #89	; 0x59
    6ebc:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    6ebe:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    6ec0:	2201      	movs	r2, #1
    6ec2:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6ec4:	325f      	adds	r2, #95	; 0x5f
    6ec6:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6ec8:	3a50      	subs	r2, #80	; 0x50
    6eca:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6ecc:	3a0d      	subs	r2, #13
    6ece:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6ed0:	46b8      	mov	r8, r7
    6ed2:	002f      	movs	r7, r5
    6ed4:	e0b9      	b.n	704a <USB_Handler+0x50a>
    6ed6:	002a      	movs	r2, r5
    6ed8:	003d      	movs	r5, r7
    6eda:	4647      	mov	r7, r8
    6edc:	4690      	mov	r8, r2
    6ede:	015b      	lsls	r3, r3, #5
    6ee0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6ee2:	2308      	movs	r3, #8
    6ee4:	33ff      	adds	r3, #255	; 0xff
    6ee6:	5ceb      	ldrb	r3, [r5, r3]
    6ee8:	065b      	lsls	r3, r3, #25
    6eea:	d516      	bpl.n	6f1a <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6eec:	2240      	movs	r2, #64	; 0x40
    6eee:	2308      	movs	r3, #8
    6ef0:	33ff      	adds	r3, #255	; 0xff
    6ef2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6ef4:	3b88      	subs	r3, #136	; 0x88
    6ef6:	3bff      	subs	r3, #255	; 0xff
    6ef8:	4642      	mov	r2, r8
    6efa:	4313      	orrs	r3, r2
    6efc:	4a81      	ldr	r2, [pc, #516]	; (7104 <USB_Handler+0x5c4>)
    6efe:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6f00:	2360      	movs	r3, #96	; 0x60
    6f02:	420b      	tst	r3, r1
    6f04:	d100      	bne.n	6f08 <USB_Handler+0x3c8>
    6f06:	e787      	b.n	6e18 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6f08:	9b01      	ldr	r3, [sp, #4]
    6f0a:	011b      	lsls	r3, r3, #4
    6f0c:	18fb      	adds	r3, r7, r3
    6f0e:	33e0      	adds	r3, #224	; 0xe0
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	497c      	ldr	r1, [pc, #496]	; (7104 <USB_Handler+0x5c4>)
    6f14:	0038      	movs	r0, r7
    6f16:	4798      	blx	r3
    6f18:	e77e      	b.n	6e18 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6f1a:	2308      	movs	r3, #8
    6f1c:	33ff      	adds	r3, #255	; 0xff
    6f1e:	5ceb      	ldrb	r3, [r5, r3]
    6f20:	069b      	lsls	r3, r3, #26
    6f22:	d5ed      	bpl.n	6f00 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6f24:	2220      	movs	r2, #32
    6f26:	2308      	movs	r3, #8
    6f28:	33ff      	adds	r3, #255	; 0xff
    6f2a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6f2c:	4b75      	ldr	r3, [pc, #468]	; (7104 <USB_Handler+0x5c4>)
    6f2e:	4642      	mov	r2, r8
    6f30:	719a      	strb	r2, [r3, #6]
    6f32:	e7e5      	b.n	6f00 <USB_Handler+0x3c0>
    6f34:	003d      	movs	r5, r7
    6f36:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    6f38:	9a01      	ldr	r2, [sp, #4]
    6f3a:	0013      	movs	r3, r2
    6f3c:	3308      	adds	r3, #8
    6f3e:	015b      	lsls	r3, r3, #5
    6f40:	18ed      	adds	r5, r5, r3
    6f42:	2310      	movs	r3, #16
    6f44:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    6f46:	18bb      	adds	r3, r7, r2
    6f48:	3361      	adds	r3, #97	; 0x61
    6f4a:	33ff      	adds	r3, #255	; 0xff
    6f4c:	781b      	ldrb	r3, [r3, #0]
    6f4e:	06db      	lsls	r3, r3, #27
    6f50:	d400      	bmi.n	6f54 <USB_Handler+0x414>
    6f52:	e761      	b.n	6e18 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6f54:	0010      	movs	r0, r2
    6f56:	0152      	lsls	r2, r2, #5
    6f58:	4b69      	ldr	r3, [pc, #420]	; (7100 <USB_Handler+0x5c0>)
    6f5a:	189b      	adds	r3, r3, r2
    6f5c:	685b      	ldr	r3, [r3, #4]
    6f5e:	049b      	lsls	r3, r3, #18
    6f60:	0c9b      	lsrs	r3, r3, #18
    6f62:	4968      	ldr	r1, [pc, #416]	; (7104 <USB_Handler+0x5c4>)
    6f64:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    6f66:	0103      	lsls	r3, r0, #4
    6f68:	18fb      	adds	r3, r7, r3
    6f6a:	33dc      	adds	r3, #220	; 0xdc
    6f6c:	681b      	ldr	r3, [r3, #0]
    6f6e:	4640      	mov	r0, r8
    6f70:	4798      	blx	r3
    6f72:	e751      	b.n	6e18 <USB_Handler+0x2d8>
    6f74:	002a      	movs	r2, r5
    6f76:	003d      	movs	r5, r7
    6f78:	4647      	mov	r7, r8
    6f7a:	4690      	mov	r8, r2
    6f7c:	015b      	lsls	r3, r3, #5
    6f7e:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6f80:	2308      	movs	r3, #8
    6f82:	33ff      	adds	r3, #255	; 0xff
    6f84:	5ceb      	ldrb	r3, [r5, r3]
    6f86:	079b      	lsls	r3, r3, #30
    6f88:	d51e      	bpl.n	6fc8 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6f8a:	2202      	movs	r2, #2
    6f8c:	2308      	movs	r3, #8
    6f8e:	33ff      	adds	r3, #255	; 0xff
    6f90:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6f92:	485c      	ldr	r0, [pc, #368]	; (7104 <USB_Handler+0x5c4>)
    6f94:	3b88      	subs	r3, #136	; 0x88
    6f96:	3bff      	subs	r3, #255	; 0xff
    6f98:	4642      	mov	r2, r8
    6f9a:	4313      	orrs	r3, r2
    6f9c:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    6f9e:	9b01      	ldr	r3, [sp, #4]
    6fa0:	015a      	lsls	r2, r3, #5
    6fa2:	4b57      	ldr	r3, [pc, #348]	; (7100 <USB_Handler+0x5c0>)
    6fa4:	189b      	adds	r3, r3, r2
    6fa6:	3310      	adds	r3, #16
    6fa8:	685b      	ldr	r3, [r3, #4]
    6faa:	049b      	lsls	r3, r3, #18
    6fac:	0c9b      	lsrs	r3, r3, #18
    6fae:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6fb0:	078b      	lsls	r3, r1, #30
    6fb2:	d100      	bne.n	6fb6 <USB_Handler+0x476>
    6fb4:	e730      	b.n	6e18 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6fb6:	9b01      	ldr	r3, [sp, #4]
    6fb8:	330d      	adds	r3, #13
    6fba:	011b      	lsls	r3, r3, #4
    6fbc:	18fb      	adds	r3, r7, r3
    6fbe:	685b      	ldr	r3, [r3, #4]
    6fc0:	4950      	ldr	r1, [pc, #320]	; (7104 <USB_Handler+0x5c4>)
    6fc2:	0038      	movs	r0, r7
    6fc4:	4798      	blx	r3
    6fc6:	e727      	b.n	6e18 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6fc8:	2308      	movs	r3, #8
    6fca:	33ff      	adds	r3, #255	; 0xff
    6fcc:	5ceb      	ldrb	r3, [r5, r3]
    6fce:	07db      	lsls	r3, r3, #31
    6fd0:	d5ee      	bpl.n	6fb0 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6fd2:	2201      	movs	r2, #1
    6fd4:	2308      	movs	r3, #8
    6fd6:	33ff      	adds	r3, #255	; 0xff
    6fd8:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6fda:	484a      	ldr	r0, [pc, #296]	; (7104 <USB_Handler+0x5c4>)
    6fdc:	4643      	mov	r3, r8
    6fde:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6fe0:	9b01      	ldr	r3, [sp, #4]
    6fe2:	015b      	lsls	r3, r3, #5
    6fe4:	4a46      	ldr	r2, [pc, #280]	; (7100 <USB_Handler+0x5c0>)
    6fe6:	18d2      	adds	r2, r2, r3
    6fe8:	6853      	ldr	r3, [r2, #4]
    6fea:	049b      	lsls	r3, r3, #18
    6fec:	0c9b      	lsrs	r3, r3, #18
    6fee:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    6ff0:	6853      	ldr	r3, [r2, #4]
    6ff2:	011b      	lsls	r3, r3, #4
    6ff4:	0c9b      	lsrs	r3, r3, #18
    6ff6:	8083      	strh	r3, [r0, #4]
    6ff8:	e7da      	b.n	6fb0 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6ffa:	2208      	movs	r2, #8
    6ffc:	32ff      	adds	r2, #255	; 0xff
    6ffe:	5c9a      	ldrb	r2, [r3, r2]
    7000:	0752      	lsls	r2, r2, #29
    7002:	d56e      	bpl.n	70e2 <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    7004:	2004      	movs	r0, #4
    7006:	2208      	movs	r2, #8
    7008:	32ff      	adds	r2, #255	; 0xff
    700a:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    700c:	9801      	ldr	r0, [sp, #4]
    700e:	0142      	lsls	r2, r0, #5
    7010:	4b3b      	ldr	r3, [pc, #236]	; (7100 <USB_Handler+0x5c0>)
    7012:	189b      	adds	r3, r3, r2
    7014:	7a9b      	ldrb	r3, [r3, #10]
    7016:	079b      	lsls	r3, r3, #30
    7018:	d505      	bpl.n	7026 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    701a:	4b39      	ldr	r3, [pc, #228]	; (7100 <USB_Handler+0x5c0>)
    701c:	189b      	adds	r3, r3, r2
    701e:	7a9a      	ldrb	r2, [r3, #10]
    7020:	2002      	movs	r0, #2
    7022:	4382      	bics	r2, r0
    7024:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7026:	4b37      	ldr	r3, [pc, #220]	; (7104 <USB_Handler+0x5c4>)
    7028:	4642      	mov	r2, r8
    702a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    702c:	9b01      	ldr	r3, [sp, #4]
    702e:	3308      	adds	r3, #8
    7030:	015b      	lsls	r3, r3, #5
    7032:	683a      	ldr	r2, [r7, #0]
    7034:	4694      	mov	ip, r2
    7036:	4463      	add	r3, ip
    7038:	79db      	ldrb	r3, [r3, #7]
    703a:	07db      	lsls	r3, r3, #31
    703c:	d551      	bpl.n	70e2 <USB_Handler+0x5a2>
    703e:	e6eb      	b.n	6e18 <USB_Handler+0x2d8>
    7040:	3301      	adds	r3, #1
    7042:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    7044:	2b08      	cmp	r3, #8
    7046:	d100      	bne.n	704a <USB_Handler+0x50a>
    7048:	e6e6      	b.n	6e18 <USB_Handler+0x2d8>
    704a:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    704c:	9301      	str	r3, [sp, #4]
    704e:	0032      	movs	r2, r6
    7050:	411a      	asrs	r2, r3
    7052:	4661      	mov	r1, ip
    7054:	4211      	tst	r1, r2
    7056:	d0f3      	beq.n	7040 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    7058:	001a      	movs	r2, r3
    705a:	3208      	adds	r2, #8
    705c:	0152      	lsls	r2, r2, #5
    705e:	18ba      	adds	r2, r7, r2
    7060:	79d2      	ldrb	r2, [r2, #7]
    7062:	b2d2      	uxtb	r2, r2
    7064:	7a21      	ldrb	r1, [r4, #8]
    7066:	4011      	ands	r1, r2
    7068:	7820      	ldrb	r0, [r4, #0]
    706a:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    706c:	4648      	mov	r0, r9
    706e:	4210      	tst	r0, r2
    7070:	d000      	beq.n	7074 <USB_Handler+0x534>
    7072:	e730      	b.n	6ed6 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7074:	4650      	mov	r0, sl
    7076:	4210      	tst	r0, r2
    7078:	d000      	beq.n	707c <USB_Handler+0x53c>
    707a:	e75b      	b.n	6f34 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    707c:	4658      	mov	r0, fp
    707e:	4210      	tst	r0, r2
    7080:	d000      	beq.n	7084 <USB_Handler+0x544>
    7082:	e777      	b.n	6f74 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    7084:	200c      	movs	r0, #12
    7086:	4210      	tst	r0, r2
    7088:	d0da      	beq.n	7040 <USB_Handler+0x500>
    708a:	002a      	movs	r2, r5
    708c:	003d      	movs	r5, r7
    708e:	4647      	mov	r7, r8
    7090:	4690      	mov	r8, r2
    7092:	015b      	lsls	r3, r3, #5
    7094:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7096:	2208      	movs	r2, #8
    7098:	32ff      	adds	r2, #255	; 0xff
    709a:	5c9a      	ldrb	r2, [r3, r2]
    709c:	0712      	lsls	r2, r2, #28
    709e:	d5ac      	bpl.n	6ffa <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    70a0:	3804      	subs	r0, #4
    70a2:	2208      	movs	r2, #8
    70a4:	32ff      	adds	r2, #255	; 0xff
    70a6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    70a8:	9801      	ldr	r0, [sp, #4]
    70aa:	0142      	lsls	r2, r0, #5
    70ac:	4b14      	ldr	r3, [pc, #80]	; (7100 <USB_Handler+0x5c0>)
    70ae:	189b      	adds	r3, r3, r2
    70b0:	7e9b      	ldrb	r3, [r3, #26]
    70b2:	079b      	lsls	r3, r3, #30
    70b4:	d505      	bpl.n	70c2 <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    70b6:	4b12      	ldr	r3, [pc, #72]	; (7100 <USB_Handler+0x5c0>)
    70b8:	189b      	adds	r3, r3, r2
    70ba:	7e9a      	ldrb	r2, [r3, #26]
    70bc:	2002      	movs	r0, #2
    70be:	4382      	bics	r2, r0
    70c0:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    70c2:	2380      	movs	r3, #128	; 0x80
    70c4:	425b      	negs	r3, r3
    70c6:	4642      	mov	r2, r8
    70c8:	4313      	orrs	r3, r2
    70ca:	4a0e      	ldr	r2, [pc, #56]	; (7104 <USB_Handler+0x5c4>)
    70cc:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    70ce:	9b01      	ldr	r3, [sp, #4]
    70d0:	3308      	adds	r3, #8
    70d2:	015b      	lsls	r3, r3, #5
    70d4:	683a      	ldr	r2, [r7, #0]
    70d6:	4694      	mov	ip, r2
    70d8:	4463      	add	r3, ip
    70da:	79db      	ldrb	r3, [r3, #7]
    70dc:	079b      	lsls	r3, r3, #30
    70de:	d500      	bpl.n	70e2 <USB_Handler+0x5a2>
    70e0:	e69a      	b.n	6e18 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    70e2:	230c      	movs	r3, #12
    70e4:	420b      	tst	r3, r1
    70e6:	d100      	bne.n	70ea <USB_Handler+0x5aa>
    70e8:	e696      	b.n	6e18 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    70ea:	9b01      	ldr	r3, [sp, #4]
    70ec:	011b      	lsls	r3, r3, #4
    70ee:	18fb      	adds	r3, r7, r3
    70f0:	33d8      	adds	r3, #216	; 0xd8
    70f2:	681b      	ldr	r3, [r3, #0]
    70f4:	4903      	ldr	r1, [pc, #12]	; (7104 <USB_Handler+0x5c4>)
    70f6:	0038      	movs	r0, r7
    70f8:	4798      	blx	r3
    70fa:	e68d      	b.n	6e18 <USB_Handler+0x2d8>
    70fc:	200002e0 	.word	0x200002e0
    7100:	20002930 	.word	0x20002930
    7104:	200002e4 	.word	0x200002e4

00007108 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    7108:	2200      	movs	r2, #0
    710a:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    710c:	2301      	movs	r3, #1
    710e:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    7110:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    7112:	70c3      	strb	r3, [r0, #3]
}
    7114:	4770      	bx	lr
	...

00007118 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    7118:	b5f0      	push	{r4, r5, r6, r7, lr}
    711a:	46ce      	mov	lr, r9
    711c:	4647      	mov	r7, r8
    711e:	b580      	push	{r7, lr}
    7120:	b083      	sub	sp, #12
    7122:	0004      	movs	r4, r0
    7124:	000d      	movs	r5, r1
    7126:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    7128:	2300      	movs	r3, #0
    712a:	4a6e      	ldr	r2, [pc, #440]	; (72e4 <usb_init+0x1cc>)
    712c:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    712e:	4a6e      	ldr	r2, [pc, #440]	; (72e8 <usb_init+0x1d0>)
    7130:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    7132:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    7134:	496d      	ldr	r1, [pc, #436]	; (72ec <usb_init+0x1d4>)
    7136:	69ca      	ldr	r2, [r1, #28]
    7138:	2020      	movs	r0, #32
    713a:	4302      	orrs	r2, r0
    713c:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    713e:	af01      	add	r7, sp, #4
    7140:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7142:	2201      	movs	r2, #1
    7144:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    7146:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    7148:	3306      	adds	r3, #6
    714a:	4699      	mov	r9, r3
    714c:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    714e:	0039      	movs	r1, r7
    7150:	3808      	subs	r0, #8
    7152:	4b67      	ldr	r3, [pc, #412]	; (72f0 <usb_init+0x1d8>)
    7154:	4698      	mov	r8, r3
    7156:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    7158:	464b      	mov	r3, r9
    715a:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    715c:	0039      	movs	r1, r7
    715e:	2019      	movs	r0, #25
    7160:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    7162:	78b3      	ldrb	r3, [r6, #2]
    7164:	466a      	mov	r2, sp
    7166:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    7168:	4669      	mov	r1, sp
    716a:	2006      	movs	r0, #6
    716c:	4b61      	ldr	r3, [pc, #388]	; (72f4 <usb_init+0x1dc>)
    716e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    7170:	2006      	movs	r0, #6
    7172:	4b61      	ldr	r3, [pc, #388]	; (72f8 <usb_init+0x1e0>)
    7174:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    7176:	782b      	ldrb	r3, [r5, #0]
    7178:	2201      	movs	r2, #1
    717a:	4313      	orrs	r3, r2
    717c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    717e:	78ab      	ldrb	r3, [r5, #2]
    7180:	07db      	lsls	r3, r3, #31
    7182:	d4fc      	bmi.n	717e <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7184:	4a5d      	ldr	r2, [pc, #372]	; (72fc <usb_init+0x1e4>)
    7186:	78d3      	ldrb	r3, [r2, #3]
    7188:	2103      	movs	r1, #3
    718a:	438b      	bics	r3, r1
    718c:	2102      	movs	r1, #2
    718e:	430b      	orrs	r3, r1
    7190:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7192:	78d3      	ldrb	r3, [r2, #3]
    7194:	210c      	movs	r1, #12
    7196:	438b      	bics	r3, r1
    7198:	2108      	movs	r1, #8
    719a:	430b      	orrs	r3, r1
    719c:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    719e:	4b58      	ldr	r3, [pc, #352]	; (7300 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    71a0:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    71a2:	039b      	lsls	r3, r3, #14
    71a4:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    71a6:	2b1f      	cmp	r3, #31
    71a8:	d100      	bne.n	71ac <usb_init+0x94>
    71aa:	e08f      	b.n	72cc <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    71ac:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    71ae:	019b      	lsls	r3, r3, #6
    71b0:	4954      	ldr	r1, [pc, #336]	; (7304 <usb_init+0x1ec>)
    71b2:	400a      	ands	r2, r1
    71b4:	4313      	orrs	r3, r2
    71b6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    71b8:	4b51      	ldr	r3, [pc, #324]	; (7300 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    71ba:	681b      	ldr	r3, [r3, #0]
    71bc:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    71be:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    71c0:	2b1f      	cmp	r3, #31
    71c2:	d100      	bne.n	71c6 <usb_init+0xae>
    71c4:	e084      	b.n	72d0 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    71c6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    71c8:	211f      	movs	r1, #31
    71ca:	438a      	bics	r2, r1
    71cc:	4313      	orrs	r3, r2
    71ce:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    71d0:	4b4b      	ldr	r3, [pc, #300]	; (7300 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    71d2:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    71d4:	019b      	lsls	r3, r3, #6
    71d6:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    71d8:	2b07      	cmp	r3, #7
    71da:	d100      	bne.n	71de <usb_init+0xc6>
    71dc:	e07a      	b.n	72d4 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    71de:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    71e0:	031b      	lsls	r3, r3, #12
    71e2:	4949      	ldr	r1, [pc, #292]	; (7308 <usb_init+0x1f0>)
    71e4:	400a      	ands	r2, r1
    71e6:	4313      	orrs	r3, r2
    71e8:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    71ea:	7832      	ldrb	r2, [r6, #0]
    71ec:	7829      	ldrb	r1, [r5, #0]
    71ee:	01d2      	lsls	r2, r2, #7
    71f0:	237f      	movs	r3, #127	; 0x7f
    71f2:	400b      	ands	r3, r1
    71f4:	4313      	orrs	r3, r2
    71f6:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    71f8:	7871      	ldrb	r1, [r6, #1]
    71fa:	782b      	ldrb	r3, [r5, #0]
    71fc:	2201      	movs	r2, #1
    71fe:	400a      	ands	r2, r1
    7200:	0092      	lsls	r2, r2, #2
    7202:	2104      	movs	r1, #4
    7204:	438b      	bics	r3, r1
    7206:	4313      	orrs	r3, r2
    7208:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    720a:	4b40      	ldr	r3, [pc, #256]	; (730c <usb_init+0x1f4>)
    720c:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    720e:	78f3      	ldrb	r3, [r6, #3]
    7210:	2b01      	cmp	r3, #1
    7212:	d061      	beq.n	72d8 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    7214:	2b00      	cmp	r3, #0
    7216:	d106      	bne.n	7226 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    7218:	6822      	ldr	r2, [r4, #0]
    721a:	8913      	ldrh	r3, [r2, #8]
    721c:	210c      	movs	r1, #12
    721e:	438b      	bics	r3, r1
    7220:	2104      	movs	r1, #4
    7222:	430b      	orrs	r3, r1
    7224:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    7226:	2280      	movs	r2, #128	; 0x80
    7228:	0052      	lsls	r2, r2, #1
    722a:	2100      	movs	r1, #0
    722c:	4837      	ldr	r0, [pc, #220]	; (730c <usb_init+0x1f4>)
    722e:	4b38      	ldr	r3, [pc, #224]	; (7310 <usb_init+0x1f8>)
    7230:	4798      	blx	r3
    7232:	1d23      	adds	r3, r4, #4
    7234:	0021      	movs	r1, r4
    7236:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    7238:	2200      	movs	r2, #0
    723a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    723c:	428b      	cmp	r3, r1
    723e:	d1fc      	bne.n	723a <usb_init+0x122>
    7240:	0021      	movs	r1, r4
    7242:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    7244:	2200      	movs	r2, #0
    7246:	601a      	str	r2, [r3, #0]
    7248:	605a      	str	r2, [r3, #4]
    724a:	609a      	str	r2, [r3, #8]
    724c:	60da      	str	r2, [r3, #12]
    724e:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7250:	428b      	cmp	r3, r1
    7252:	d1f8      	bne.n	7246 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    7254:	2300      	movs	r3, #0
    7256:	22a4      	movs	r2, #164	; 0xa4
    7258:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    725a:	3201      	adds	r2, #1
    725c:	54a3      	strb	r3, [r4, r2]
    725e:	0023      	movs	r3, r4
    7260:	33a6      	adds	r3, #166	; 0xa6
    7262:	0021      	movs	r1, r4
    7264:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    7266:	2200      	movs	r2, #0
    7268:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    726a:	721a      	strb	r2, [r3, #8]
    726c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    726e:	4299      	cmp	r1, r3
    7270:	d1fa      	bne.n	7268 <usb_init+0x150>
    7272:	0023      	movs	r3, r4
    7274:	33b8      	adds	r3, #184	; 0xb8
    7276:	0021      	movs	r1, r4
    7278:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    727a:	2200      	movs	r2, #0
    727c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    727e:	428b      	cmp	r3, r1
    7280:	d1fc      	bne.n	727c <usb_init+0x164>
    7282:	0021      	movs	r1, r4
    7284:	3155      	adds	r1, #85	; 0x55
    7286:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    7288:	2200      	movs	r2, #0
    728a:	601a      	str	r2, [r3, #0]
    728c:	605a      	str	r2, [r3, #4]
    728e:	609a      	str	r2, [r3, #8]
    7290:	60da      	str	r2, [r3, #12]
    7292:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    7294:	428b      	cmp	r3, r1
    7296:	d1f8      	bne.n	728a <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    7298:	2300      	movs	r3, #0
    729a:	22aa      	movs	r2, #170	; 0xaa
    729c:	0052      	lsls	r2, r2, #1
    729e:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    72a0:	3202      	adds	r2, #2
    72a2:	52a3      	strh	r3, [r4, r2]
    72a4:	0023      	movs	r3, r4
    72a6:	3359      	adds	r3, #89	; 0x59
    72a8:	33ff      	adds	r3, #255	; 0xff
    72aa:	3461      	adds	r4, #97	; 0x61
    72ac:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    72ae:	2200      	movs	r2, #0
    72b0:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    72b2:	721a      	strb	r2, [r3, #8]
    72b4:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    72b6:	42a3      	cmp	r3, r4
    72b8:	d1fa      	bne.n	72b0 <usb_init+0x198>
    72ba:	2280      	movs	r2, #128	; 0x80
    72bc:	4b15      	ldr	r3, [pc, #84]	; (7314 <usb_init+0x1fc>)
    72be:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    72c0:	2000      	movs	r0, #0
    72c2:	b003      	add	sp, #12
    72c4:	bc0c      	pop	{r2, r3}
    72c6:	4690      	mov	r8, r2
    72c8:	4699      	mov	r9, r3
    72ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    72cc:	3b1a      	subs	r3, #26
    72ce:	e76d      	b.n	71ac <usb_init+0x94>
		pad_transp = 29;
    72d0:	3b02      	subs	r3, #2
    72d2:	e778      	b.n	71c6 <usb_init+0xae>
		pad_trim = 3;
    72d4:	3b04      	subs	r3, #4
    72d6:	e782      	b.n	71de <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    72d8:	6822      	ldr	r2, [r4, #0]
    72da:	8913      	ldrh	r3, [r2, #8]
    72dc:	3108      	adds	r1, #8
    72de:	438b      	bics	r3, r1
    72e0:	8113      	strh	r3, [r2, #8]
    72e2:	e7a0      	b.n	7226 <usb_init+0x10e>
    72e4:	200002ec 	.word	0x200002ec
    72e8:	200002dc 	.word	0x200002dc
    72ec:	40000400 	.word	0x40000400
    72f0:	00008ba5 	.word	0x00008ba5
    72f4:	00008aad 	.word	0x00008aad
    72f8:	00008a21 	.word	0x00008a21
    72fc:	41005000 	.word	0x41005000
    7300:	00806024 	.word	0x00806024
    7304:	fffff83f 	.word	0xfffff83f
    7308:	ffff8fff 	.word	0xffff8fff
    730c:	20002930 	.word	0x20002930
    7310:	00009317 	.word	0x00009317
    7314:	e000e100 	.word	0xe000e100

00007318 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7318:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    731a:	2a00      	cmp	r2, #0
    731c:	d001      	beq.n	7322 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    731e:	0018      	movs	r0, r3
    7320:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    7322:	008b      	lsls	r3, r1, #2
    7324:	4a06      	ldr	r2, [pc, #24]	; (7340 <extint_register_callback+0x28>)
    7326:	589b      	ldr	r3, [r3, r2]
    7328:	2b00      	cmp	r3, #0
    732a:	d003      	beq.n	7334 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    732c:	4283      	cmp	r3, r0
    732e:	d005      	beq.n	733c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    7330:	231d      	movs	r3, #29
    7332:	e7f4      	b.n	731e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    7334:	0089      	lsls	r1, r1, #2
    7336:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    7338:	2300      	movs	r3, #0
    733a:	e7f0      	b.n	731e <extint_register_callback+0x6>
		return STATUS_OK;
    733c:	2300      	movs	r3, #0
    733e:	e7ee      	b.n	731e <extint_register_callback+0x6>
    7340:	20000378 	.word	0x20000378

00007344 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7344:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7346:	2900      	cmp	r1, #0
    7348:	d001      	beq.n	734e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    734a:	0018      	movs	r0, r3
    734c:	4770      	bx	lr
		return NULL;
    734e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    7350:	281f      	cmp	r0, #31
    7352:	d800      	bhi.n	7356 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    7354:	4a02      	ldr	r2, [pc, #8]	; (7360 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    7356:	2301      	movs	r3, #1
    7358:	4083      	lsls	r3, r0
    735a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    735c:	2300      	movs	r3, #0
    735e:	e7f4      	b.n	734a <extint_chan_enable_callback+0x6>
    7360:	40001800 	.word	0x40001800

00007364 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7364:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7366:	2900      	cmp	r1, #0
    7368:	d001      	beq.n	736e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    736a:	0018      	movs	r0, r3
    736c:	4770      	bx	lr
		return NULL;
    736e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    7370:	281f      	cmp	r0, #31
    7372:	d800      	bhi.n	7376 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    7374:	4a02      	ldr	r2, [pc, #8]	; (7380 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    7376:	2301      	movs	r3, #1
    7378:	4083      	lsls	r3, r0
    737a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    737c:	2300      	movs	r3, #0
    737e:	e7f4      	b.n	736a <extint_chan_disable_callback+0x6>
    7380:	40001800 	.word	0x40001800

00007384 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    7384:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7386:	2200      	movs	r2, #0
    7388:	4b10      	ldr	r3, [pc, #64]	; (73cc <EIC_Handler+0x48>)
    738a:	701a      	strb	r2, [r3, #0]
    738c:	2300      	movs	r3, #0
    738e:	4910      	ldr	r1, [pc, #64]	; (73d0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    7390:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7392:	4e10      	ldr	r6, [pc, #64]	; (73d4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7394:	4c0d      	ldr	r4, [pc, #52]	; (73cc <EIC_Handler+0x48>)
    7396:	e00a      	b.n	73ae <EIC_Handler+0x2a>
		return eics[eic_index];
    7398:	490d      	ldr	r1, [pc, #52]	; (73d0 <EIC_Handler+0x4c>)
    739a:	e008      	b.n	73ae <EIC_Handler+0x2a>
    739c:	7823      	ldrb	r3, [r4, #0]
    739e:	3301      	adds	r3, #1
    73a0:	b2db      	uxtb	r3, r3
    73a2:	7023      	strb	r3, [r4, #0]
    73a4:	2b0f      	cmp	r3, #15
    73a6:	d810      	bhi.n	73ca <EIC_Handler+0x46>
		return NULL;
    73a8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    73aa:	2b1f      	cmp	r3, #31
    73ac:	d9f4      	bls.n	7398 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    73ae:	0028      	movs	r0, r5
    73b0:	4018      	ands	r0, r3
    73b2:	2201      	movs	r2, #1
    73b4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    73b6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    73b8:	4210      	tst	r0, r2
    73ba:	d0ef      	beq.n	739c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    73bc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    73be:	009b      	lsls	r3, r3, #2
    73c0:	599b      	ldr	r3, [r3, r6]
    73c2:	2b00      	cmp	r3, #0
    73c4:	d0ea      	beq.n	739c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    73c6:	4798      	blx	r3
    73c8:	e7e8      	b.n	739c <EIC_Handler+0x18>
			}
		}
	}
}
    73ca:	bd70      	pop	{r4, r5, r6, pc}
    73cc:	20002a30 	.word	0x20002a30
    73d0:	40001800 	.word	0x40001800
    73d4:	20000378 	.word	0x20000378

000073d8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    73d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    73da:	46de      	mov	lr, fp
    73dc:	4657      	mov	r7, sl
    73de:	464e      	mov	r6, r9
    73e0:	4645      	mov	r5, r8
    73e2:	b5e0      	push	{r5, r6, r7, lr}
    73e4:	b087      	sub	sp, #28
    73e6:	4680      	mov	r8, r0
    73e8:	9104      	str	r1, [sp, #16]
    73ea:	0016      	movs	r6, r2
    73ec:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    73ee:	2200      	movs	r2, #0
    73f0:	2300      	movs	r3, #0
    73f2:	2100      	movs	r1, #0
    73f4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    73f6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    73f8:	2001      	movs	r0, #1
    73fa:	0021      	movs	r1, r4
    73fc:	9600      	str	r6, [sp, #0]
    73fe:	9701      	str	r7, [sp, #4]
    7400:	465c      	mov	r4, fp
    7402:	9403      	str	r4, [sp, #12]
    7404:	4644      	mov	r4, r8
    7406:	9405      	str	r4, [sp, #20]
    7408:	e013      	b.n	7432 <long_division+0x5a>
    740a:	2420      	movs	r4, #32
    740c:	1a64      	subs	r4, r4, r1
    740e:	0005      	movs	r5, r0
    7410:	40e5      	lsrs	r5, r4
    7412:	46a8      	mov	r8, r5
    7414:	e014      	b.n	7440 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    7416:	9c00      	ldr	r4, [sp, #0]
    7418:	9d01      	ldr	r5, [sp, #4]
    741a:	1b12      	subs	r2, r2, r4
    741c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    741e:	465c      	mov	r4, fp
    7420:	464d      	mov	r5, r9
    7422:	432c      	orrs	r4, r5
    7424:	46a3      	mov	fp, r4
    7426:	9c03      	ldr	r4, [sp, #12]
    7428:	4645      	mov	r5, r8
    742a:	432c      	orrs	r4, r5
    742c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    742e:	3901      	subs	r1, #1
    7430:	d325      	bcc.n	747e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    7432:	2420      	movs	r4, #32
    7434:	4264      	negs	r4, r4
    7436:	190c      	adds	r4, r1, r4
    7438:	d4e7      	bmi.n	740a <long_division+0x32>
    743a:	0005      	movs	r5, r0
    743c:	40a5      	lsls	r5, r4
    743e:	46a8      	mov	r8, r5
    7440:	0004      	movs	r4, r0
    7442:	408c      	lsls	r4, r1
    7444:	46a1      	mov	r9, r4
		r = r << 1;
    7446:	1892      	adds	r2, r2, r2
    7448:	415b      	adcs	r3, r3
    744a:	0014      	movs	r4, r2
    744c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    744e:	9e05      	ldr	r6, [sp, #20]
    7450:	464f      	mov	r7, r9
    7452:	403e      	ands	r6, r7
    7454:	46b4      	mov	ip, r6
    7456:	9e04      	ldr	r6, [sp, #16]
    7458:	4647      	mov	r7, r8
    745a:	403e      	ands	r6, r7
    745c:	46b2      	mov	sl, r6
    745e:	4666      	mov	r6, ip
    7460:	4657      	mov	r7, sl
    7462:	433e      	orrs	r6, r7
    7464:	d003      	beq.n	746e <long_division+0x96>
			r |= 0x01;
    7466:	0006      	movs	r6, r0
    7468:	4326      	orrs	r6, r4
    746a:	0032      	movs	r2, r6
    746c:	002b      	movs	r3, r5
		if (r >= d) {
    746e:	9c00      	ldr	r4, [sp, #0]
    7470:	9d01      	ldr	r5, [sp, #4]
    7472:	429d      	cmp	r5, r3
    7474:	d8db      	bhi.n	742e <long_division+0x56>
    7476:	d1ce      	bne.n	7416 <long_division+0x3e>
    7478:	4294      	cmp	r4, r2
    747a:	d8d8      	bhi.n	742e <long_division+0x56>
    747c:	e7cb      	b.n	7416 <long_division+0x3e>
    747e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7480:	4658      	mov	r0, fp
    7482:	0019      	movs	r1, r3
    7484:	b007      	add	sp, #28
    7486:	bc3c      	pop	{r2, r3, r4, r5}
    7488:	4690      	mov	r8, r2
    748a:	4699      	mov	r9, r3
    748c:	46a2      	mov	sl, r4
    748e:	46ab      	mov	fp, r5
    7490:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007492 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7492:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7494:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7496:	2340      	movs	r3, #64	; 0x40
    7498:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    749a:	4281      	cmp	r1, r0
    749c:	d202      	bcs.n	74a4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    749e:	0018      	movs	r0, r3
    74a0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    74a2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    74a4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    74a6:	1c63      	adds	r3, r4, #1
    74a8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    74aa:	4288      	cmp	r0, r1
    74ac:	d9f9      	bls.n	74a2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    74ae:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    74b0:	2cff      	cmp	r4, #255	; 0xff
    74b2:	d8f4      	bhi.n	749e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    74b4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    74b6:	2300      	movs	r3, #0
    74b8:	e7f1      	b.n	749e <_sercom_get_sync_baud_val+0xc>
	...

000074bc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    74bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    74be:	b083      	sub	sp, #12
    74c0:	000f      	movs	r7, r1
    74c2:	0016      	movs	r6, r2
    74c4:	aa08      	add	r2, sp, #32
    74c6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    74c8:	0004      	movs	r4, r0
    74ca:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    74cc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    74ce:	42bc      	cmp	r4, r7
    74d0:	d902      	bls.n	74d8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    74d2:	0010      	movs	r0, r2
    74d4:	b003      	add	sp, #12
    74d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    74d8:	2b00      	cmp	r3, #0
    74da:	d114      	bne.n	7506 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    74dc:	0002      	movs	r2, r0
    74de:	0008      	movs	r0, r1
    74e0:	2100      	movs	r1, #0
    74e2:	4c19      	ldr	r4, [pc, #100]	; (7548 <_sercom_get_async_baud_val+0x8c>)
    74e4:	47a0      	blx	r4
    74e6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    74e8:	003a      	movs	r2, r7
    74ea:	2300      	movs	r3, #0
    74ec:	2000      	movs	r0, #0
    74ee:	4c17      	ldr	r4, [pc, #92]	; (754c <_sercom_get_async_baud_val+0x90>)
    74f0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    74f2:	2200      	movs	r2, #0
    74f4:	2301      	movs	r3, #1
    74f6:	1a12      	subs	r2, r2, r0
    74f8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    74fa:	0c12      	lsrs	r2, r2, #16
    74fc:	041b      	lsls	r3, r3, #16
    74fe:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    7500:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    7502:	2200      	movs	r2, #0
    7504:	e7e5      	b.n	74d2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    7506:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7508:	2b01      	cmp	r3, #1
    750a:	d1f9      	bne.n	7500 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    750c:	000a      	movs	r2, r1
    750e:	2300      	movs	r3, #0
    7510:	2100      	movs	r1, #0
    7512:	4c0d      	ldr	r4, [pc, #52]	; (7548 <_sercom_get_async_baud_val+0x8c>)
    7514:	47a0      	blx	r4
    7516:	0002      	movs	r2, r0
    7518:	000b      	movs	r3, r1
    751a:	9200      	str	r2, [sp, #0]
    751c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    751e:	0038      	movs	r0, r7
    7520:	2100      	movs	r1, #0
    7522:	4c0a      	ldr	r4, [pc, #40]	; (754c <_sercom_get_async_baud_val+0x90>)
    7524:	47a0      	blx	r4
    7526:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    7528:	2380      	movs	r3, #128	; 0x80
    752a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    752c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    752e:	4298      	cmp	r0, r3
    7530:	d8cf      	bhi.n	74d2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    7532:	0f79      	lsrs	r1, r7, #29
    7534:	00f8      	lsls	r0, r7, #3
    7536:	9a00      	ldr	r2, [sp, #0]
    7538:	9b01      	ldr	r3, [sp, #4]
    753a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    753c:	00ea      	lsls	r2, r5, #3
    753e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    7540:	b2d2      	uxtb	r2, r2
    7542:	0352      	lsls	r2, r2, #13
    7544:	432a      	orrs	r2, r5
    7546:	e7db      	b.n	7500 <_sercom_get_async_baud_val+0x44>
    7548:	000090d1 	.word	0x000090d1
    754c:	000073d9 	.word	0x000073d9

00007550 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7550:	b510      	push	{r4, lr}
    7552:	b082      	sub	sp, #8
    7554:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7556:	4b0e      	ldr	r3, [pc, #56]	; (7590 <sercom_set_gclk_generator+0x40>)
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	2b00      	cmp	r3, #0
    755c:	d007      	beq.n	756e <sercom_set_gclk_generator+0x1e>
    755e:	2900      	cmp	r1, #0
    7560:	d105      	bne.n	756e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    7562:	4b0b      	ldr	r3, [pc, #44]	; (7590 <sercom_set_gclk_generator+0x40>)
    7564:	785b      	ldrb	r3, [r3, #1]
    7566:	4283      	cmp	r3, r0
    7568:	d010      	beq.n	758c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    756a:	201d      	movs	r0, #29
    756c:	e00c      	b.n	7588 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    756e:	a901      	add	r1, sp, #4
    7570:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7572:	2013      	movs	r0, #19
    7574:	4b07      	ldr	r3, [pc, #28]	; (7594 <sercom_set_gclk_generator+0x44>)
    7576:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7578:	2013      	movs	r0, #19
    757a:	4b07      	ldr	r3, [pc, #28]	; (7598 <sercom_set_gclk_generator+0x48>)
    757c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    757e:	4b04      	ldr	r3, [pc, #16]	; (7590 <sercom_set_gclk_generator+0x40>)
    7580:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    7582:	2201      	movs	r2, #1
    7584:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7586:	2000      	movs	r0, #0
}
    7588:	b002      	add	sp, #8
    758a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    758c:	2000      	movs	r0, #0
    758e:	e7fb      	b.n	7588 <sercom_set_gclk_generator+0x38>
    7590:	200002f8 	.word	0x200002f8
    7594:	00008aad 	.word	0x00008aad
    7598:	00008a21 	.word	0x00008a21

0000759c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    759c:	4b40      	ldr	r3, [pc, #256]	; (76a0 <_sercom_get_default_pad+0x104>)
    759e:	4298      	cmp	r0, r3
    75a0:	d031      	beq.n	7606 <_sercom_get_default_pad+0x6a>
    75a2:	d90a      	bls.n	75ba <_sercom_get_default_pad+0x1e>
    75a4:	4b3f      	ldr	r3, [pc, #252]	; (76a4 <_sercom_get_default_pad+0x108>)
    75a6:	4298      	cmp	r0, r3
    75a8:	d04d      	beq.n	7646 <_sercom_get_default_pad+0xaa>
    75aa:	4b3f      	ldr	r3, [pc, #252]	; (76a8 <_sercom_get_default_pad+0x10c>)
    75ac:	4298      	cmp	r0, r3
    75ae:	d05a      	beq.n	7666 <_sercom_get_default_pad+0xca>
    75b0:	4b3e      	ldr	r3, [pc, #248]	; (76ac <_sercom_get_default_pad+0x110>)
    75b2:	4298      	cmp	r0, r3
    75b4:	d037      	beq.n	7626 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    75b6:	2000      	movs	r0, #0
}
    75b8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    75ba:	4b3d      	ldr	r3, [pc, #244]	; (76b0 <_sercom_get_default_pad+0x114>)
    75bc:	4298      	cmp	r0, r3
    75be:	d00c      	beq.n	75da <_sercom_get_default_pad+0x3e>
    75c0:	4b3c      	ldr	r3, [pc, #240]	; (76b4 <_sercom_get_default_pad+0x118>)
    75c2:	4298      	cmp	r0, r3
    75c4:	d1f7      	bne.n	75b6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    75c6:	2901      	cmp	r1, #1
    75c8:	d017      	beq.n	75fa <_sercom_get_default_pad+0x5e>
    75ca:	2900      	cmp	r1, #0
    75cc:	d05d      	beq.n	768a <_sercom_get_default_pad+0xee>
    75ce:	2902      	cmp	r1, #2
    75d0:	d015      	beq.n	75fe <_sercom_get_default_pad+0x62>
    75d2:	2903      	cmp	r1, #3
    75d4:	d015      	beq.n	7602 <_sercom_get_default_pad+0x66>
	return 0;
    75d6:	2000      	movs	r0, #0
    75d8:	e7ee      	b.n	75b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    75da:	2901      	cmp	r1, #1
    75dc:	d007      	beq.n	75ee <_sercom_get_default_pad+0x52>
    75de:	2900      	cmp	r1, #0
    75e0:	d051      	beq.n	7686 <_sercom_get_default_pad+0xea>
    75e2:	2902      	cmp	r1, #2
    75e4:	d005      	beq.n	75f2 <_sercom_get_default_pad+0x56>
    75e6:	2903      	cmp	r1, #3
    75e8:	d005      	beq.n	75f6 <_sercom_get_default_pad+0x5a>
	return 0;
    75ea:	2000      	movs	r0, #0
    75ec:	e7e4      	b.n	75b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    75ee:	4832      	ldr	r0, [pc, #200]	; (76b8 <_sercom_get_default_pad+0x11c>)
    75f0:	e7e2      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    75f2:	4832      	ldr	r0, [pc, #200]	; (76bc <_sercom_get_default_pad+0x120>)
    75f4:	e7e0      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    75f6:	4832      	ldr	r0, [pc, #200]	; (76c0 <_sercom_get_default_pad+0x124>)
    75f8:	e7de      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    75fa:	4832      	ldr	r0, [pc, #200]	; (76c4 <_sercom_get_default_pad+0x128>)
    75fc:	e7dc      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    75fe:	4832      	ldr	r0, [pc, #200]	; (76c8 <_sercom_get_default_pad+0x12c>)
    7600:	e7da      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7602:	4832      	ldr	r0, [pc, #200]	; (76cc <_sercom_get_default_pad+0x130>)
    7604:	e7d8      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7606:	2901      	cmp	r1, #1
    7608:	d007      	beq.n	761a <_sercom_get_default_pad+0x7e>
    760a:	2900      	cmp	r1, #0
    760c:	d03f      	beq.n	768e <_sercom_get_default_pad+0xf2>
    760e:	2902      	cmp	r1, #2
    7610:	d005      	beq.n	761e <_sercom_get_default_pad+0x82>
    7612:	2903      	cmp	r1, #3
    7614:	d005      	beq.n	7622 <_sercom_get_default_pad+0x86>
	return 0;
    7616:	2000      	movs	r0, #0
    7618:	e7ce      	b.n	75b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    761a:	482d      	ldr	r0, [pc, #180]	; (76d0 <_sercom_get_default_pad+0x134>)
    761c:	e7cc      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    761e:	482d      	ldr	r0, [pc, #180]	; (76d4 <_sercom_get_default_pad+0x138>)
    7620:	e7ca      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7622:	482d      	ldr	r0, [pc, #180]	; (76d8 <_sercom_get_default_pad+0x13c>)
    7624:	e7c8      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7626:	2901      	cmp	r1, #1
    7628:	d007      	beq.n	763a <_sercom_get_default_pad+0x9e>
    762a:	2900      	cmp	r1, #0
    762c:	d031      	beq.n	7692 <_sercom_get_default_pad+0xf6>
    762e:	2902      	cmp	r1, #2
    7630:	d005      	beq.n	763e <_sercom_get_default_pad+0xa2>
    7632:	2903      	cmp	r1, #3
    7634:	d005      	beq.n	7642 <_sercom_get_default_pad+0xa6>
	return 0;
    7636:	2000      	movs	r0, #0
    7638:	e7be      	b.n	75b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    763a:	4828      	ldr	r0, [pc, #160]	; (76dc <_sercom_get_default_pad+0x140>)
    763c:	e7bc      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    763e:	4828      	ldr	r0, [pc, #160]	; (76e0 <_sercom_get_default_pad+0x144>)
    7640:	e7ba      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7642:	4828      	ldr	r0, [pc, #160]	; (76e4 <_sercom_get_default_pad+0x148>)
    7644:	e7b8      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7646:	2901      	cmp	r1, #1
    7648:	d007      	beq.n	765a <_sercom_get_default_pad+0xbe>
    764a:	2900      	cmp	r1, #0
    764c:	d023      	beq.n	7696 <_sercom_get_default_pad+0xfa>
    764e:	2902      	cmp	r1, #2
    7650:	d005      	beq.n	765e <_sercom_get_default_pad+0xc2>
    7652:	2903      	cmp	r1, #3
    7654:	d005      	beq.n	7662 <_sercom_get_default_pad+0xc6>
	return 0;
    7656:	2000      	movs	r0, #0
    7658:	e7ae      	b.n	75b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    765a:	4823      	ldr	r0, [pc, #140]	; (76e8 <_sercom_get_default_pad+0x14c>)
    765c:	e7ac      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    765e:	4823      	ldr	r0, [pc, #140]	; (76ec <_sercom_get_default_pad+0x150>)
    7660:	e7aa      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7662:	4823      	ldr	r0, [pc, #140]	; (76f0 <_sercom_get_default_pad+0x154>)
    7664:	e7a8      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7666:	2901      	cmp	r1, #1
    7668:	d007      	beq.n	767a <_sercom_get_default_pad+0xde>
    766a:	2900      	cmp	r1, #0
    766c:	d015      	beq.n	769a <_sercom_get_default_pad+0xfe>
    766e:	2902      	cmp	r1, #2
    7670:	d005      	beq.n	767e <_sercom_get_default_pad+0xe2>
    7672:	2903      	cmp	r1, #3
    7674:	d005      	beq.n	7682 <_sercom_get_default_pad+0xe6>
	return 0;
    7676:	2000      	movs	r0, #0
    7678:	e79e      	b.n	75b8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    767a:	481e      	ldr	r0, [pc, #120]	; (76f4 <_sercom_get_default_pad+0x158>)
    767c:	e79c      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    767e:	481e      	ldr	r0, [pc, #120]	; (76f8 <_sercom_get_default_pad+0x15c>)
    7680:	e79a      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7682:	481e      	ldr	r0, [pc, #120]	; (76fc <_sercom_get_default_pad+0x160>)
    7684:	e798      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7686:	481e      	ldr	r0, [pc, #120]	; (7700 <_sercom_get_default_pad+0x164>)
    7688:	e796      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    768a:	2003      	movs	r0, #3
    768c:	e794      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    768e:	481d      	ldr	r0, [pc, #116]	; (7704 <_sercom_get_default_pad+0x168>)
    7690:	e792      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7692:	481d      	ldr	r0, [pc, #116]	; (7708 <_sercom_get_default_pad+0x16c>)
    7694:	e790      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    7696:	481d      	ldr	r0, [pc, #116]	; (770c <_sercom_get_default_pad+0x170>)
    7698:	e78e      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    769a:	481d      	ldr	r0, [pc, #116]	; (7710 <_sercom_get_default_pad+0x174>)
    769c:	e78c      	b.n	75b8 <_sercom_get_default_pad+0x1c>
    769e:	46c0      	nop			; (mov r8, r8)
    76a0:	42001000 	.word	0x42001000
    76a4:	42001800 	.word	0x42001800
    76a8:	42001c00 	.word	0x42001c00
    76ac:	42001400 	.word	0x42001400
    76b0:	42000800 	.word	0x42000800
    76b4:	42000c00 	.word	0x42000c00
    76b8:	00050003 	.word	0x00050003
    76bc:	00060003 	.word	0x00060003
    76c0:	00070003 	.word	0x00070003
    76c4:	00010003 	.word	0x00010003
    76c8:	001e0003 	.word	0x001e0003
    76cc:	001f0003 	.word	0x001f0003
    76d0:	00090003 	.word	0x00090003
    76d4:	000a0003 	.word	0x000a0003
    76d8:	000b0003 	.word	0x000b0003
    76dc:	00110003 	.word	0x00110003
    76e0:	00120003 	.word	0x00120003
    76e4:	00130003 	.word	0x00130003
    76e8:	000d0003 	.word	0x000d0003
    76ec:	000e0003 	.word	0x000e0003
    76f0:	000f0003 	.word	0x000f0003
    76f4:	00170003 	.word	0x00170003
    76f8:	00180003 	.word	0x00180003
    76fc:	00190003 	.word	0x00190003
    7700:	00040003 	.word	0x00040003
    7704:	00080003 	.word	0x00080003
    7708:	00100003 	.word	0x00100003
    770c:	000c0003 	.word	0x000c0003
    7710:	00160003 	.word	0x00160003

00007714 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7714:	b530      	push	{r4, r5, lr}
    7716:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7718:	4b0b      	ldr	r3, [pc, #44]	; (7748 <_sercom_get_sercom_inst_index+0x34>)
    771a:	466a      	mov	r2, sp
    771c:	cb32      	ldmia	r3!, {r1, r4, r5}
    771e:	c232      	stmia	r2!, {r1, r4, r5}
    7720:	cb32      	ldmia	r3!, {r1, r4, r5}
    7722:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7724:	9b00      	ldr	r3, [sp, #0]
    7726:	4283      	cmp	r3, r0
    7728:	d00b      	beq.n	7742 <_sercom_get_sercom_inst_index+0x2e>
    772a:	2301      	movs	r3, #1
    772c:	009a      	lsls	r2, r3, #2
    772e:	4669      	mov	r1, sp
    7730:	5852      	ldr	r2, [r2, r1]
    7732:	4282      	cmp	r2, r0
    7734:	d006      	beq.n	7744 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7736:	3301      	adds	r3, #1
    7738:	2b06      	cmp	r3, #6
    773a:	d1f7      	bne.n	772c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    773c:	2000      	movs	r0, #0
}
    773e:	b007      	add	sp, #28
    7740:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7742:	2300      	movs	r3, #0
			return i;
    7744:	b2d8      	uxtb	r0, r3
    7746:	e7fa      	b.n	773e <_sercom_get_sercom_inst_index+0x2a>
    7748:	0000ac0c 	.word	0x0000ac0c

0000774c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    774c:	b570      	push	{r4, r5, r6, lr}
    774e:	b082      	sub	sp, #8
    7750:	0005      	movs	r5, r0
    7752:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7754:	2200      	movs	r2, #0
    7756:	466b      	mov	r3, sp
    7758:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    775a:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    775c:	0030      	movs	r0, r6
    775e:	4b24      	ldr	r3, [pc, #144]	; (77f0 <spi_set_baudrate+0xa4>)
    7760:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7762:	231f      	movs	r3, #31
    7764:	4018      	ands	r0, r3
    7766:	3b1e      	subs	r3, #30
    7768:	4083      	lsls	r3, r0
    776a:	2280      	movs	r2, #128	; 0x80
    776c:	4921      	ldr	r1, [pc, #132]	; (77f4 <spi_set_baudrate+0xa8>)
    776e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7770:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7772:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    7774:	2b00      	cmp	r3, #0
    7776:	d1fc      	bne.n	7772 <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    7778:	338f      	adds	r3, #143	; 0x8f
    777a:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    777c:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    777e:	6833      	ldr	r3, [r6, #0]
    7780:	2202      	movs	r2, #2
    7782:	4393      	bics	r3, r2
    7784:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7786:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7788:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    778a:	2b00      	cmp	r3, #0
    778c:	d1fc      	bne.n	7788 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    778e:	4b1a      	ldr	r3, [pc, #104]	; (77f8 <spi_set_baudrate+0xac>)
    7790:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7792:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7794:	b2c0      	uxtb	r0, r0
    7796:	4b19      	ldr	r3, [pc, #100]	; (77fc <spi_set_baudrate+0xb0>)
    7798:	4798      	blx	r3
    779a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    779c:	466b      	mov	r3, sp
    779e:	1d9a      	adds	r2, r3, #6
    77a0:	0020      	movs	r0, r4
    77a2:	4b17      	ldr	r3, [pc, #92]	; (7800 <spi_set_baudrate+0xb4>)
    77a4:	4798      	blx	r3
    77a6:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    77a8:	d003      	beq.n	77b2 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    77aa:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    77ac:	0020      	movs	r0, r4
    77ae:	b002      	add	sp, #8
    77b0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    77b2:	466b      	mov	r3, sp
    77b4:	3306      	adds	r3, #6
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    77ba:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    77bc:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    77be:	2b00      	cmp	r3, #0
    77c0:	d1fc      	bne.n	77bc <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    77c2:	0030      	movs	r0, r6
    77c4:	4b0a      	ldr	r3, [pc, #40]	; (77f0 <spi_set_baudrate+0xa4>)
    77c6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    77c8:	231f      	movs	r3, #31
    77ca:	4018      	ands	r0, r3
    77cc:	3b1e      	subs	r3, #30
    77ce:	4083      	lsls	r3, r0
    77d0:	4a08      	ldr	r2, [pc, #32]	; (77f4 <spi_set_baudrate+0xa8>)
    77d2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    77d4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    77d6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    77d8:	2b00      	cmp	r3, #0
    77da:	d1fc      	bne.n	77d6 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    77dc:	6833      	ldr	r3, [r6, #0]
    77de:	2202      	movs	r2, #2
    77e0:	4313      	orrs	r3, r2
    77e2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    77e4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    77e6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    77e8:	2b00      	cmp	r3, #0
    77ea:	d1fc      	bne.n	77e6 <spi_set_baudrate+0x9a>
    77ec:	e7de      	b.n	77ac <spi_set_baudrate+0x60>
    77ee:	46c0      	nop			; (mov r8, r8)
    77f0:	0000256d 	.word	0x0000256d
    77f4:	e000e100 	.word	0xe000e100
    77f8:	00007715 	.word	0x00007715
    77fc:	00008ac9 	.word	0x00008ac9
    7800:	00007493 	.word	0x00007493

00007804 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7804:	b5f0      	push	{r4, r5, r6, r7, lr}
    7806:	b08b      	sub	sp, #44	; 0x2c
    7808:	0005      	movs	r5, r0
    780a:	000c      	movs	r4, r1
    780c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    780e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7810:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7812:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7814:	079b      	lsls	r3, r3, #30
    7816:	d501      	bpl.n	781c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7818:	b00b      	add	sp, #44	; 0x2c
    781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    781c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    781e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7820:	07db      	lsls	r3, r3, #31
    7822:	d4f9      	bmi.n	7818 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7824:	0008      	movs	r0, r1
    7826:	4b6f      	ldr	r3, [pc, #444]	; (79e4 <spi_init+0x1e0>)
    7828:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    782a:	4a6f      	ldr	r2, [pc, #444]	; (79e8 <spi_init+0x1e4>)
    782c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    782e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7830:	2301      	movs	r3, #1
    7832:	40bb      	lsls	r3, r7
    7834:	430b      	orrs	r3, r1
    7836:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7838:	a909      	add	r1, sp, #36	; 0x24
    783a:	2724      	movs	r7, #36	; 0x24
    783c:	5df3      	ldrb	r3, [r6, r7]
    783e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7840:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7842:	b2c3      	uxtb	r3, r0
    7844:	9301      	str	r3, [sp, #4]
    7846:	0018      	movs	r0, r3
    7848:	4b68      	ldr	r3, [pc, #416]	; (79ec <spi_init+0x1e8>)
    784a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    784c:	9801      	ldr	r0, [sp, #4]
    784e:	4b68      	ldr	r3, [pc, #416]	; (79f0 <spi_init+0x1ec>)
    7850:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7852:	5df0      	ldrb	r0, [r6, r7]
    7854:	2100      	movs	r1, #0
    7856:	4b67      	ldr	r3, [pc, #412]	; (79f4 <spi_init+0x1f0>)
    7858:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    785a:	7833      	ldrb	r3, [r6, #0]
    785c:	2b01      	cmp	r3, #1
    785e:	d03f      	beq.n	78e0 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    7860:	7833      	ldrb	r3, [r6, #0]
    7862:	2b00      	cmp	r3, #0
    7864:	d103      	bne.n	786e <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7866:	6823      	ldr	r3, [r4, #0]
    7868:	2208      	movs	r2, #8
    786a:	4313      	orrs	r3, r2
    786c:	6023      	str	r3, [r4, #0]
    786e:	002b      	movs	r3, r5
    7870:	330c      	adds	r3, #12
    7872:	0029      	movs	r1, r5
    7874:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    7876:	2200      	movs	r2, #0
    7878:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    787a:	428b      	cmp	r3, r1
    787c:	d1fc      	bne.n	7878 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    787e:	2300      	movs	r3, #0
    7880:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7882:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7884:	2400      	movs	r4, #0
    7886:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7888:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    788a:	3336      	adds	r3, #54	; 0x36
    788c:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    788e:	3301      	adds	r3, #1
    7890:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    7892:	3301      	adds	r3, #1
    7894:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    7896:	3b35      	subs	r3, #53	; 0x35
    7898:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    789a:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    789c:	6828      	ldr	r0, [r5, #0]
    789e:	4b51      	ldr	r3, [pc, #324]	; (79e4 <spi_init+0x1e0>)
    78a0:	4798      	blx	r3
    78a2:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    78a4:	4954      	ldr	r1, [pc, #336]	; (79f8 <spi_init+0x1f4>)
    78a6:	4b55      	ldr	r3, [pc, #340]	; (79fc <spi_init+0x1f8>)
    78a8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    78aa:	00bf      	lsls	r7, r7, #2
    78ac:	4b54      	ldr	r3, [pc, #336]	; (7a00 <spi_init+0x1fc>)
    78ae:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    78b0:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    78b2:	ab04      	add	r3, sp, #16
    78b4:	2280      	movs	r2, #128	; 0x80
    78b6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    78b8:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    78ba:	3a7f      	subs	r2, #127	; 0x7f
    78bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    78be:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    78c0:	7833      	ldrb	r3, [r6, #0]
    78c2:	2b00      	cmp	r3, #0
    78c4:	d102      	bne.n	78cc <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    78c6:	2200      	movs	r2, #0
    78c8:	ab04      	add	r3, sp, #16
    78ca:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    78cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    78ce:	9305      	str	r3, [sp, #20]
    78d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    78d2:	9306      	str	r3, [sp, #24]
    78d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    78d6:	9307      	str	r3, [sp, #28]
    78d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    78da:	9308      	str	r3, [sp, #32]
    78dc:	2400      	movs	r4, #0
    78de:	e00b      	b.n	78f8 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    78e0:	6823      	ldr	r3, [r4, #0]
    78e2:	220c      	movs	r2, #12
    78e4:	4313      	orrs	r3, r2
    78e6:	6023      	str	r3, [r4, #0]
    78e8:	e7ba      	b.n	7860 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    78ea:	0038      	movs	r0, r7
    78ec:	4b45      	ldr	r3, [pc, #276]	; (7a04 <spi_init+0x200>)
    78ee:	4798      	blx	r3
    78f0:	e00a      	b.n	7908 <spi_init+0x104>
    78f2:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    78f4:	2c04      	cmp	r4, #4
    78f6:	d010      	beq.n	791a <spi_init+0x116>
    78f8:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    78fa:	00a3      	lsls	r3, r4, #2
    78fc:	aa02      	add	r2, sp, #8
    78fe:	200c      	movs	r0, #12
    7900:	1812      	adds	r2, r2, r0
    7902:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    7904:	2800      	cmp	r0, #0
    7906:	d0f0      	beq.n	78ea <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    7908:	1c43      	adds	r3, r0, #1
    790a:	d0f2      	beq.n	78f2 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    790c:	a904      	add	r1, sp, #16
    790e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7910:	0c00      	lsrs	r0, r0, #16
    7912:	b2c0      	uxtb	r0, r0
    7914:	4b3c      	ldr	r3, [pc, #240]	; (7a08 <spi_init+0x204>)
    7916:	4798      	blx	r3
    7918:	e7eb      	b.n	78f2 <spi_init+0xee>
	module->mode             = config->mode;
    791a:	7833      	ldrb	r3, [r6, #0]
    791c:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    791e:	7c33      	ldrb	r3, [r6, #16]
    7920:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    7922:	7cb3      	ldrb	r3, [r6, #18]
    7924:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7926:	7d33      	ldrb	r3, [r6, #20]
    7928:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    792a:	2200      	movs	r2, #0
    792c:	ab02      	add	r3, sp, #8
    792e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7930:	7833      	ldrb	r3, [r6, #0]
    7932:	2b01      	cmp	r3, #1
    7934:	d012      	beq.n	795c <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    7936:	7833      	ldrb	r3, [r6, #0]
    7938:	2b00      	cmp	r3, #0
    793a:	d126      	bne.n	798a <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    793c:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    793e:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    7940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7942:	7ff1      	ldrb	r1, [r6, #31]
    7944:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7946:	7fb4      	ldrb	r4, [r6, #30]
    7948:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    794a:	4319      	orrs	r1, r3
    794c:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    794e:	2320      	movs	r3, #32
    7950:	5cf3      	ldrb	r3, [r6, r3]
    7952:	2b00      	cmp	r3, #0
    7954:	d01b      	beq.n	798e <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    7956:	2340      	movs	r3, #64	; 0x40
    7958:	431a      	orrs	r2, r3
    795a:	e018      	b.n	798e <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    795c:	6828      	ldr	r0, [r5, #0]
    795e:	4b21      	ldr	r3, [pc, #132]	; (79e4 <spi_init+0x1e0>)
    7960:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7962:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7964:	b2c0      	uxtb	r0, r0
    7966:	4b29      	ldr	r3, [pc, #164]	; (7a0c <spi_init+0x208>)
    7968:	4798      	blx	r3
    796a:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    796c:	ab02      	add	r3, sp, #8
    796e:	1d9a      	adds	r2, r3, #6
    7970:	69b0      	ldr	r0, [r6, #24]
    7972:	4b27      	ldr	r3, [pc, #156]	; (7a10 <spi_init+0x20c>)
    7974:	4798      	blx	r3
    7976:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7978:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    797a:	2b00      	cmp	r3, #0
    797c:	d000      	beq.n	7980 <spi_init+0x17c>
    797e:	e74b      	b.n	7818 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    7980:	ab02      	add	r3, sp, #8
    7982:	3306      	adds	r3, #6
    7984:	781b      	ldrb	r3, [r3, #0]
    7986:	733b      	strb	r3, [r7, #12]
    7988:	e7d5      	b.n	7936 <spi_init+0x132>
	uint32_t ctrlb = 0;
    798a:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    798c:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    798e:	6873      	ldr	r3, [r6, #4]
    7990:	68b1      	ldr	r1, [r6, #8]
    7992:	430b      	orrs	r3, r1
    7994:	68f1      	ldr	r1, [r6, #12]
    7996:	430b      	orrs	r3, r1
    7998:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    799a:	7c31      	ldrb	r1, [r6, #16]
    799c:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    799e:	7c71      	ldrb	r1, [r6, #17]
    79a0:	2900      	cmp	r1, #0
    79a2:	d103      	bne.n	79ac <spi_init+0x1a8>
    79a4:	491b      	ldr	r1, [pc, #108]	; (7a14 <spi_init+0x210>)
    79a6:	7889      	ldrb	r1, [r1, #2]
    79a8:	0789      	lsls	r1, r1, #30
    79aa:	d501      	bpl.n	79b0 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    79ac:	2180      	movs	r1, #128	; 0x80
    79ae:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    79b0:	7cb1      	ldrb	r1, [r6, #18]
    79b2:	2900      	cmp	r1, #0
    79b4:	d002      	beq.n	79bc <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    79b6:	2180      	movs	r1, #128	; 0x80
    79b8:	0289      	lsls	r1, r1, #10
    79ba:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    79bc:	7cf1      	ldrb	r1, [r6, #19]
    79be:	2900      	cmp	r1, #0
    79c0:	d002      	beq.n	79c8 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    79c2:	2180      	movs	r1, #128	; 0x80
    79c4:	0089      	lsls	r1, r1, #2
    79c6:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    79c8:	7d31      	ldrb	r1, [r6, #20]
    79ca:	2900      	cmp	r1, #0
    79cc:	d002      	beq.n	79d4 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    79ce:	2180      	movs	r1, #128	; 0x80
    79d0:	0189      	lsls	r1, r1, #6
    79d2:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    79d4:	6839      	ldr	r1, [r7, #0]
    79d6:	430b      	orrs	r3, r1
    79d8:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    79da:	687b      	ldr	r3, [r7, #4]
    79dc:	431a      	orrs	r2, r3
    79de:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    79e0:	2000      	movs	r0, #0
    79e2:	e719      	b.n	7818 <spi_init+0x14>
    79e4:	00007715 	.word	0x00007715
    79e8:	40000400 	.word	0x40000400
    79ec:	00008aad 	.word	0x00008aad
    79f0:	00008a21 	.word	0x00008a21
    79f4:	00007551 	.word	0x00007551
    79f8:	00000115 	.word	0x00000115
    79fc:	00002531 	.word	0x00002531
    7a00:	200003bc 	.word	0x200003bc
    7a04:	0000759d 	.word	0x0000759d
    7a08:	00008ba5 	.word	0x00008ba5
    7a0c:	00008ac9 	.word	0x00008ac9
    7a10:	00007493 	.word	0x00007493
    7a14:	41002000 	.word	0x41002000

00007a18 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a1a:	46d6      	mov	lr, sl
    7a1c:	464f      	mov	r7, r9
    7a1e:	b580      	push	{r7, lr}
    7a20:	b083      	sub	sp, #12
    7a22:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7a24:	2538      	movs	r5, #56	; 0x38
    7a26:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7a28:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7a2a:	2e05      	cmp	r6, #5
    7a2c:	d075      	beq.n	7b1a <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7a2e:	3512      	adds	r5, #18
	if (length == 0) {
    7a30:	2a00      	cmp	r2, #0
    7a32:	d072      	beq.n	7b1a <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    7a34:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    7a36:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    7a38:	2c00      	cmp	r4, #0
    7a3a:	d06e      	beq.n	7b1a <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7a3c:	7944      	ldrb	r4, [r0, #5]
    7a3e:	2c00      	cmp	r4, #0
    7a40:	d103      	bne.n	7a4a <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7a42:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7a44:	7e25      	ldrb	r5, [r4, #24]
    7a46:	07a9      	lsls	r1, r5, #30
    7a48:	d40a      	bmi.n	7a60 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    7a4a:	3a01      	subs	r2, #1
    7a4c:	b294      	uxth	r4, r2
    7a4e:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    7a50:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    7a52:	2102      	movs	r1, #2
    7a54:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    7a56:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7a58:	05db      	lsls	r3, r3, #23
    7a5a:	0ddb      	lsrs	r3, r3, #23
    7a5c:	469a      	mov	sl, r3
    7a5e:	e037      	b.n	7ad0 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7a60:	2502      	movs	r5, #2
    7a62:	7625      	strb	r5, [r4, #24]
    7a64:	e7f1      	b.n	7a4a <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a66:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7a68:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    7a6a:	423b      	tst	r3, r7
    7a6c:	d0fc      	beq.n	7a68 <spi_read_buffer_wait+0x50>
    7a6e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    7a70:	423b      	tst	r3, r7
    7a72:	d009      	beq.n	7a88 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7a74:	4653      	mov	r3, sl
    7a76:	628b      	str	r3, [r1, #40]	; 0x28
    7a78:	e02d      	b.n	7ad6 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7a7a:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    7a7c:	464d      	mov	r5, r9
    7a7e:	422b      	tst	r3, r5
    7a80:	d138      	bne.n	7af4 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7a82:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    7a84:	4213      	tst	r3, r2
    7a86:	d045      	beq.n	7b14 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a88:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7a8a:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    7a8c:	4213      	tst	r3, r2
    7a8e:	d0fc      	beq.n	7a8a <spi_read_buffer_wait+0x72>
    7a90:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7a92:	4213      	tst	r3, r2
    7a94:	d040      	beq.n	7b18 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7a96:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    7a98:	2500      	movs	r5, #0
    7a9a:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7a9c:	4213      	tst	r3, r2
    7a9e:	d002      	beq.n	7aa6 <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7aa0:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    7aa2:	231e      	movs	r3, #30
    7aa4:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7aa6:	7983      	ldrb	r3, [r0, #6]
    7aa8:	2b01      	cmp	r3, #1
    7aaa:	d027      	beq.n	7afc <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7aac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7aae:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    7ab0:	9901      	ldr	r1, [sp, #4]
    7ab2:	2900      	cmp	r1, #0
    7ab4:	d137      	bne.n	7b26 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    7ab6:	1c75      	adds	r5, r6, #1
    7ab8:	b2ad      	uxth	r5, r5
    7aba:	4661      	mov	r1, ip
    7abc:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7abe:	7981      	ldrb	r1, [r0, #6]
    7ac0:	2901      	cmp	r1, #1
    7ac2:	d01f      	beq.n	7b04 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    7ac4:	002e      	movs	r6, r5
	while (length--) {
    7ac6:	3c01      	subs	r4, #1
    7ac8:	b2a4      	uxth	r4, r4
    7aca:	4b18      	ldr	r3, [pc, #96]	; (7b2c <spi_read_buffer_wait+0x114>)
    7acc:	429c      	cmp	r4, r3
    7ace:	d01f      	beq.n	7b10 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    7ad0:	7943      	ldrb	r3, [r0, #5]
    7ad2:	2b01      	cmp	r3, #1
    7ad4:	d0c7      	beq.n	7a66 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    7ad6:	7943      	ldrb	r3, [r0, #5]
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d1d5      	bne.n	7a88 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7adc:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7ade:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    7ae0:	4213      	tst	r3, r2
    7ae2:	d1ca      	bne.n	7a7a <spi_read_buffer_wait+0x62>
    7ae4:	4b12      	ldr	r3, [pc, #72]	; (7b30 <spi_read_buffer_wait+0x118>)
    7ae6:	7e0d      	ldrb	r5, [r1, #24]
    7ae8:	4215      	tst	r5, r2
    7aea:	d1c6      	bne.n	7a7a <spi_read_buffer_wait+0x62>
    7aec:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7aee:	2b00      	cmp	r3, #0
    7af0:	d1f9      	bne.n	7ae6 <spi_read_buffer_wait+0xce>
    7af2:	e7c2      	b.n	7a7a <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7af4:	2302      	movs	r3, #2
    7af6:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    7af8:	2504      	movs	r5, #4
    7afa:	e00e      	b.n	7b1a <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7afc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7afe:	05db      	lsls	r3, r3, #23
    7b00:	0ddb      	lsrs	r3, r3, #23
    7b02:	e7d5      	b.n	7ab0 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    7b04:	3602      	adds	r6, #2
    7b06:	b2b6      	uxth	r6, r6
    7b08:	0a1b      	lsrs	r3, r3, #8
    7b0a:	4661      	mov	r1, ip
    7b0c:	554b      	strb	r3, [r1, r5]
    7b0e:	e7da      	b.n	7ac6 <spi_read_buffer_wait+0xae>
    7b10:	9d01      	ldr	r5, [sp, #4]
    7b12:	e002      	b.n	7b1a <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    7b14:	2512      	movs	r5, #18
    7b16:	e000      	b.n	7b1a <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    7b18:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    7b1a:	0028      	movs	r0, r5
    7b1c:	b003      	add	sp, #12
    7b1e:	bc0c      	pop	{r2, r3}
    7b20:	4691      	mov	r9, r2
    7b22:	469a      	mov	sl, r3
    7b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b26:	9d01      	ldr	r5, [sp, #4]
    7b28:	e7f7      	b.n	7b1a <spi_read_buffer_wait+0x102>
    7b2a:	46c0      	nop			; (mov r8, r8)
    7b2c:	0000ffff 	.word	0x0000ffff
    7b30:	00002710 	.word	0x00002710

00007b34 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7b34:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7b36:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7b38:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7b3a:	2c01      	cmp	r4, #1
    7b3c:	d001      	beq.n	7b42 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7b3e:	0018      	movs	r0, r3
    7b40:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7b42:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7b44:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7b46:	2c00      	cmp	r4, #0
    7b48:	d1f9      	bne.n	7b3e <spi_select_slave+0xa>
		if (select) {
    7b4a:	2a00      	cmp	r2, #0
    7b4c:	d058      	beq.n	7c00 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7b4e:	784b      	ldrb	r3, [r1, #1]
    7b50:	2b00      	cmp	r3, #0
    7b52:	d044      	beq.n	7bde <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b54:	6803      	ldr	r3, [r0, #0]
    7b56:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7b58:	07db      	lsls	r3, r3, #31
    7b5a:	d410      	bmi.n	7b7e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7b5c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7b5e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7b60:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7b62:	2900      	cmp	r1, #0
    7b64:	d104      	bne.n	7b70 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7b66:	0953      	lsrs	r3, r2, #5
    7b68:	01db      	lsls	r3, r3, #7
    7b6a:	492e      	ldr	r1, [pc, #184]	; (7c24 <spi_select_slave+0xf0>)
    7b6c:	468c      	mov	ip, r1
    7b6e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7b70:	211f      	movs	r1, #31
    7b72:	4011      	ands	r1, r2
    7b74:	2201      	movs	r2, #1
    7b76:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7b78:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7b7a:	2305      	movs	r3, #5
    7b7c:	e7df      	b.n	7b3e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7b7e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7b80:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7b82:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7b84:	2c00      	cmp	r4, #0
    7b86:	d104      	bne.n	7b92 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7b88:	0953      	lsrs	r3, r2, #5
    7b8a:	01db      	lsls	r3, r3, #7
    7b8c:	4c25      	ldr	r4, [pc, #148]	; (7c24 <spi_select_slave+0xf0>)
    7b8e:	46a4      	mov	ip, r4
    7b90:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7b92:	241f      	movs	r4, #31
    7b94:	4014      	ands	r4, r2
    7b96:	2201      	movs	r2, #1
    7b98:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7b9a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b9c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b9e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7ba0:	07d2      	lsls	r2, r2, #31
    7ba2:	d501      	bpl.n	7ba8 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7ba4:	788a      	ldrb	r2, [r1, #2]
    7ba6:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7ba8:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7baa:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7bac:	2a00      	cmp	r2, #0
    7bae:	d1c6      	bne.n	7b3e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7bb0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7bb2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7bb4:	7e13      	ldrb	r3, [r2, #24]
    7bb6:	420b      	tst	r3, r1
    7bb8:	d0fc      	beq.n	7bb4 <spi_select_slave+0x80>
    7bba:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7bbc:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7bbe:	0749      	lsls	r1, r1, #29
    7bc0:	d5bd      	bpl.n	7b3e <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7bc2:	8b53      	ldrh	r3, [r2, #26]
    7bc4:	075b      	lsls	r3, r3, #29
    7bc6:	d501      	bpl.n	7bcc <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7bc8:	2304      	movs	r3, #4
    7bca:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7bcc:	7983      	ldrb	r3, [r0, #6]
    7bce:	2b01      	cmp	r3, #1
    7bd0:	d002      	beq.n	7bd8 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7bd2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7bd4:	2300      	movs	r3, #0
    7bd6:	e7b2      	b.n	7b3e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7bd8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7bda:	2300      	movs	r3, #0
    7bdc:	e7af      	b.n	7b3e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7bde:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7be0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7be2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7be4:	2900      	cmp	r1, #0
    7be6:	d104      	bne.n	7bf2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7be8:	0953      	lsrs	r3, r2, #5
    7bea:	01db      	lsls	r3, r3, #7
    7bec:	490d      	ldr	r1, [pc, #52]	; (7c24 <spi_select_slave+0xf0>)
    7bee:	468c      	mov	ip, r1
    7bf0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7bf2:	211f      	movs	r1, #31
    7bf4:	4011      	ands	r1, r2
    7bf6:	2201      	movs	r2, #1
    7bf8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7bfa:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7bfc:	2300      	movs	r3, #0
    7bfe:	e79e      	b.n	7b3e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7c00:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7c02:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7c04:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7c06:	2900      	cmp	r1, #0
    7c08:	d104      	bne.n	7c14 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7c0a:	0953      	lsrs	r3, r2, #5
    7c0c:	01db      	lsls	r3, r3, #7
    7c0e:	4905      	ldr	r1, [pc, #20]	; (7c24 <spi_select_slave+0xf0>)
    7c10:	468c      	mov	ip, r1
    7c12:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7c14:	211f      	movs	r1, #31
    7c16:	4011      	ands	r1, r2
    7c18:	2201      	movs	r2, #1
    7c1a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7c1c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7c1e:	2300      	movs	r3, #0
    7c20:	e78d      	b.n	7b3e <spi_select_slave+0xa>
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	41004400 	.word	0x41004400

00007c28 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c2a:	46de      	mov	lr, fp
    7c2c:	4657      	mov	r7, sl
    7c2e:	464e      	mov	r6, r9
    7c30:	4645      	mov	r5, r8
    7c32:	b5e0      	push	{r5, r6, r7, lr}
    7c34:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7c36:	2338      	movs	r3, #56	; 0x38
    7c38:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7c3a:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7c3c:	2c05      	cmp	r4, #5
    7c3e:	d002      	beq.n	7c46 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7c40:	3312      	adds	r3, #18
	if (length == 0) {
    7c42:	2a00      	cmp	r2, #0
    7c44:	d107      	bne.n	7c56 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7c46:	0018      	movs	r0, r3
    7c48:	b003      	add	sp, #12
    7c4a:	bc3c      	pop	{r2, r3, r4, r5}
    7c4c:	4690      	mov	r8, r2
    7c4e:	4699      	mov	r9, r3
    7c50:	46a2      	mov	sl, r4
    7c52:	46ab      	mov	fp, r5
    7c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7c56:	7943      	ldrb	r3, [r0, #5]
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d103      	bne.n	7c64 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c5c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7c5e:	7e1c      	ldrb	r4, [r3, #24]
    7c60:	07a4      	lsls	r4, r4, #30
    7c62:	d40a      	bmi.n	7c7a <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    7c64:	4693      	mov	fp, r2
    7c66:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    7c68:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    7c6a:	2502      	movs	r5, #2
    7c6c:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    7c6e:	3502      	adds	r5, #2
    7c70:	46a8      	mov	r8, r5
    7c72:	3a01      	subs	r2, #1
    7c74:	b292      	uxth	r2, r2
    7c76:	468a      	mov	sl, r1
    7c78:	e023      	b.n	7cc2 <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7c7a:	2402      	movs	r4, #2
    7c7c:	761c      	strb	r4, [r3, #24]
    7c7e:	e7f1      	b.n	7c64 <spi_write_buffer_wait+0x3c>
    7c80:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    7c82:	4661      	mov	r1, ip
    7c84:	420d      	tst	r5, r1
    7c86:	d12e      	bne.n	7ce6 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7c88:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    7c8a:	421d      	tst	r5, r3
    7c8c:	d100      	bne.n	7c90 <spi_write_buffer_wait+0x68>
    7c8e:	e0c2      	b.n	7e16 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c90:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7c92:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    7c94:	421d      	tst	r5, r3
    7c96:	d0fc      	beq.n	7c92 <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    7c98:	1c67      	adds	r7, r4, #1
    7c9a:	b2bf      	uxth	r7, r7
    7c9c:	4651      	mov	r1, sl
    7c9e:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7ca0:	7981      	ldrb	r1, [r0, #6]
    7ca2:	2901      	cmp	r1, #1
    7ca4:	d023      	beq.n	7cee <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    7ca6:	b2ad      	uxth	r5, r5
    7ca8:	003c      	movs	r4, r7
    7caa:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7cac:	421f      	tst	r7, r3
    7cae:	d002      	beq.n	7cb6 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7cb0:	05ed      	lsls	r5, r5, #23
    7cb2:	0ded      	lsrs	r5, r5, #23
    7cb4:	62b5      	str	r5, [r6, #40]	; 0x28
    7cb6:	1e55      	subs	r5, r2, #1
    7cb8:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    7cba:	79c6      	ldrb	r6, [r0, #7]
    7cbc:	2e00      	cmp	r6, #0
    7cbe:	d11d      	bne.n	7cfc <spi_write_buffer_wait+0xd4>
    7cc0:	002a      	movs	r2, r5
	while (length--) {
    7cc2:	4d5a      	ldr	r5, [pc, #360]	; (7e2c <spi_write_buffer_wait+0x204>)
    7cc4:	42aa      	cmp	r2, r5
    7cc6:	d070      	beq.n	7daa <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    7cc8:	7945      	ldrb	r5, [r0, #5]
    7cca:	2d00      	cmp	r5, #0
    7ccc:	d1e0      	bne.n	7c90 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7cce:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7cd0:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    7cd2:	421d      	tst	r5, r3
    7cd4:	d1d4      	bne.n	7c80 <spi_write_buffer_wait+0x58>
    7cd6:	4d56      	ldr	r5, [pc, #344]	; (7e30 <spi_write_buffer_wait+0x208>)
    7cd8:	7e37      	ldrb	r7, [r6, #24]
    7cda:	421f      	tst	r7, r3
    7cdc:	d1d0      	bne.n	7c80 <spi_write_buffer_wait+0x58>
    7cde:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7ce0:	2d00      	cmp	r5, #0
    7ce2:	d1f9      	bne.n	7cd8 <spi_write_buffer_wait+0xb0>
    7ce4:	e7cc      	b.n	7c80 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7ce6:	2302      	movs	r3, #2
    7ce8:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    7cea:	3302      	adds	r3, #2
    7cec:	e7ab      	b.n	7c46 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7cee:	3402      	adds	r4, #2
    7cf0:	b2a4      	uxth	r4, r4
    7cf2:	4651      	mov	r1, sl
    7cf4:	5dcf      	ldrb	r7, [r1, r7]
    7cf6:	023f      	lsls	r7, r7, #8
    7cf8:	433d      	orrs	r5, r7
    7cfa:	e7d6      	b.n	7caa <spi_write_buffer_wait+0x82>
    7cfc:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    7cfe:	7945      	ldrb	r5, [r0, #5]
    7d00:	2d00      	cmp	r5, #0
    7d02:	d137      	bne.n	7d74 <spi_write_buffer_wait+0x14c>
    7d04:	4d4b      	ldr	r5, [pc, #300]	; (7e34 <spi_write_buffer_wait+0x20c>)
    7d06:	9101      	str	r1, [sp, #4]
    7d08:	e012      	b.n	7d30 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    7d0a:	3402      	adds	r4, #2
    7d0c:	b2a4      	uxth	r4, r4
    7d0e:	4649      	mov	r1, r9
    7d10:	9f01      	ldr	r7, [sp, #4]
    7d12:	5c79      	ldrb	r1, [r7, r1]
    7d14:	0209      	lsls	r1, r1, #8
    7d16:	9f00      	ldr	r7, [sp, #0]
    7d18:	430f      	orrs	r7, r1
    7d1a:	e01b      	b.n	7d54 <spi_write_buffer_wait+0x12c>
						length--;
    7d1c:	3a01      	subs	r2, #1
    7d1e:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d20:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d22:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    7d24:	4641      	mov	r1, r8
    7d26:	420f      	tst	r7, r1
    7d28:	d11b      	bne.n	7d62 <spi_write_buffer_wait+0x13a>
    7d2a:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7d2c:	2d00      	cmp	r5, #0
    7d2e:	d018      	beq.n	7d62 <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    7d30:	2a00      	cmp	r2, #0
    7d32:	d0f5      	beq.n	7d20 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d34:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7d36:	7e37      	ldrb	r7, [r6, #24]
    7d38:	421f      	tst	r7, r3
    7d3a:	d0f1      	beq.n	7d20 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    7d3c:	1c67      	adds	r7, r4, #1
    7d3e:	b2b9      	uxth	r1, r7
    7d40:	4689      	mov	r9, r1
    7d42:	9901      	ldr	r1, [sp, #4]
    7d44:	5d09      	ldrb	r1, [r1, r4]
    7d46:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7d48:	7981      	ldrb	r1, [r0, #6]
    7d4a:	2901      	cmp	r1, #1
    7d4c:	d0dd      	beq.n	7d0a <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    7d4e:	4669      	mov	r1, sp
    7d50:	880f      	ldrh	r7, [r1, #0]
    7d52:	464c      	mov	r4, r9
    7d54:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7d56:	4219      	tst	r1, r3
    7d58:	d0e0      	beq.n	7d1c <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7d5a:	05ff      	lsls	r7, r7, #23
    7d5c:	0dff      	lsrs	r7, r7, #23
    7d5e:	62b7      	str	r7, [r6, #40]	; 0x28
    7d60:	e7dc      	b.n	7d1c <spi_write_buffer_wait+0xf4>
    7d62:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7d64:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    7d66:	4667      	mov	r7, ip
    7d68:	423d      	tst	r5, r7
    7d6a:	d118      	bne.n	7d9e <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d6c:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    7d6e:	4646      	mov	r6, r8
    7d70:	4235      	tst	r5, r6
    7d72:	d052      	beq.n	7e1a <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d74:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d76:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    7d78:	4647      	mov	r7, r8
    7d7a:	423d      	tst	r5, r7
    7d7c:	d0fb      	beq.n	7d76 <spi_write_buffer_wait+0x14e>
    7d7e:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    7d80:	423d      	tst	r5, r7
    7d82:	d007      	beq.n	7d94 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7d84:	8b75      	ldrh	r5, [r6, #26]
    7d86:	423d      	tst	r5, r7
    7d88:	d000      	beq.n	7d8c <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7d8a:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7d8c:	7985      	ldrb	r5, [r0, #6]
    7d8e:	2d01      	cmp	r5, #1
    7d90:	d009      	beq.n	7da6 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7d92:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    7d94:	465d      	mov	r5, fp
    7d96:	3d01      	subs	r5, #1
    7d98:	b2ad      	uxth	r5, r5
    7d9a:	46ab      	mov	fp, r5
    7d9c:	e769      	b.n	7c72 <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7d9e:	2302      	movs	r3, #2
    7da0:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    7da2:	3302      	adds	r3, #2
    7da4:	e74f      	b.n	7c46 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7da6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    7da8:	e7f4      	b.n	7d94 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    7daa:	7943      	ldrb	r3, [r0, #5]
    7dac:	2b01      	cmp	r3, #1
    7dae:	d00b      	beq.n	7dc8 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    7db0:	2b00      	cmp	r3, #0
    7db2:	d134      	bne.n	7e1e <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    7db4:	79c2      	ldrb	r2, [r0, #7]
    7db6:	2a00      	cmp	r2, #0
    7db8:	d100      	bne.n	7dbc <spi_write_buffer_wait+0x194>
    7dba:	e744      	b.n	7c46 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    7dbc:	2404      	movs	r4, #4
			while (flush_length) {
    7dbe:	465b      	mov	r3, fp
    7dc0:	465d      	mov	r5, fp
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d119      	bne.n	7dfa <spi_write_buffer_wait+0x1d2>
    7dc6:	e73e      	b.n	7c46 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dc8:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    7dca:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7dcc:	7e0b      	ldrb	r3, [r1, #24]
    7dce:	4213      	tst	r3, r2
    7dd0:	d0fc      	beq.n	7dcc <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    7dd2:	2300      	movs	r3, #0
    7dd4:	e737      	b.n	7c46 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7dd6:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    7dd8:	4223      	tst	r3, r4
    7dda:	d022      	beq.n	7e22 <spi_write_buffer_wait+0x1fa>
    7ddc:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    7dde:	4223      	tst	r3, r4
    7de0:	d007      	beq.n	7df2 <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7de2:	8b4b      	ldrh	r3, [r1, #26]
    7de4:	4223      	tst	r3, r4
    7de6:	d000      	beq.n	7dea <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7de8:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7dea:	7983      	ldrb	r3, [r0, #6]
    7dec:	2b01      	cmp	r3, #1
    7dee:	d010      	beq.n	7e12 <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7df0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    7df2:	3d01      	subs	r5, #1
    7df4:	b2ad      	uxth	r5, r5
			while (flush_length) {
    7df6:	2d00      	cmp	r5, #0
    7df8:	d015      	beq.n	7e26 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dfa:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7dfc:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    7dfe:	4223      	tst	r3, r4
    7e00:	d1e9      	bne.n	7dd6 <spi_write_buffer_wait+0x1ae>
    7e02:	4b0b      	ldr	r3, [pc, #44]	; (7e30 <spi_write_buffer_wait+0x208>)
    7e04:	7e0a      	ldrb	r2, [r1, #24]
    7e06:	4222      	tst	r2, r4
    7e08:	d1e5      	bne.n	7dd6 <spi_write_buffer_wait+0x1ae>
    7e0a:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d1f9      	bne.n	7e04 <spi_write_buffer_wait+0x1dc>
    7e10:	e7e1      	b.n	7dd6 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7e12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7e14:	e7ed      	b.n	7df2 <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    7e16:	2312      	movs	r3, #18
    7e18:	e715      	b.n	7c46 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    7e1a:	2312      	movs	r3, #18
    7e1c:	e713      	b.n	7c46 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    7e1e:	2300      	movs	r3, #0
    7e20:	e711      	b.n	7c46 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    7e22:	2312      	movs	r3, #18
    7e24:	e70f      	b.n	7c46 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    7e26:	2300      	movs	r3, #0
    7e28:	e70d      	b.n	7c46 <spi_write_buffer_wait+0x1e>
    7e2a:	46c0      	nop			; (mov r8, r8)
    7e2c:	0000ffff 	.word	0x0000ffff
    7e30:	00002710 	.word	0x00002710
    7e34:	00002711 	.word	0x00002711

00007e38 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    7e38:	4770      	bx	lr
	...

00007e3c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    7e3c:	b510      	push	{r4, lr}
    7e3e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    7e40:	4b0f      	ldr	r3, [pc, #60]	; (7e80 <sd_mmc_test_unit_ready+0x44>)
    7e42:	4798      	blx	r3
    7e44:	2801      	cmp	r0, #1
    7e46:	d019      	beq.n	7e7c <sd_mmc_test_unit_ready+0x40>
    7e48:	2800      	cmp	r0, #0
    7e4a:	d003      	beq.n	7e54 <sd_mmc_test_unit_ready+0x18>
    7e4c:	2802      	cmp	r0, #2
    7e4e:	d010      	beq.n	7e72 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    7e50:	2001      	movs	r0, #1
	}
}
    7e52:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    7e54:	4b0b      	ldr	r3, [pc, #44]	; (7e84 <sd_mmc_test_unit_ready+0x48>)
    7e56:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    7e58:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	d1f9      	bne.n	7e52 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    7e5e:	0020      	movs	r0, r4
    7e60:	4b09      	ldr	r3, [pc, #36]	; (7e88 <sd_mmc_test_unit_ready+0x4c>)
    7e62:	4798      	blx	r3
    7e64:	0003      	movs	r3, r0
    7e66:	2003      	movs	r0, #3
    7e68:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    7e6a:	4243      	negs	r3, r0
    7e6c:	4158      	adcs	r0, r3
    7e6e:	0040      	lsls	r0, r0, #1
    7e70:	e7ef      	b.n	7e52 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    7e72:	2200      	movs	r2, #0
    7e74:	4b03      	ldr	r3, [pc, #12]	; (7e84 <sd_mmc_test_unit_ready+0x48>)
    7e76:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    7e78:	2002      	movs	r0, #2
    7e7a:	e7ea      	b.n	7e52 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    7e7c:	2003      	movs	r0, #3
    7e7e:	e7e8      	b.n	7e52 <sd_mmc_test_unit_ready+0x16>
    7e80:	00000bd1 	.word	0x00000bd1
    7e84:	200002fc 	.word	0x200002fc
    7e88:	00001081 	.word	0x00001081

00007e8c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    7e8c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    7e8e:	2000      	movs	r0, #0
    7e90:	4b01      	ldr	r3, [pc, #4]	; (7e98 <sd_mmc_test_unit_ready_0+0xc>)
    7e92:	4798      	blx	r3
}
    7e94:	bd10      	pop	{r4, pc}
    7e96:	46c0      	nop			; (mov r8, r8)
    7e98:	00007e3d 	.word	0x00007e3d

00007e9c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	0004      	movs	r4, r0
    7ea0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    7ea2:	4b04      	ldr	r3, [pc, #16]	; (7eb4 <sd_mmc_read_capacity+0x18>)
    7ea4:	4798      	blx	r3
    7ea6:	0040      	lsls	r0, r0, #1
    7ea8:	3801      	subs	r0, #1
    7eaa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    7eac:	0020      	movs	r0, r4
    7eae:	4b02      	ldr	r3, [pc, #8]	; (7eb8 <sd_mmc_read_capacity+0x1c>)
    7eb0:	4798      	blx	r3
}
    7eb2:	bd70      	pop	{r4, r5, r6, pc}
    7eb4:	000010a9 	.word	0x000010a9
    7eb8:	00007e3d 	.word	0x00007e3d

00007ebc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    7ebc:	b510      	push	{r4, lr}
    7ebe:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    7ec0:	2000      	movs	r0, #0
    7ec2:	4b01      	ldr	r3, [pc, #4]	; (7ec8 <sd_mmc_read_capacity_0+0xc>)
    7ec4:	4798      	blx	r3
}
    7ec6:	bd10      	pop	{r4, pc}
    7ec8:	00007e9d 	.word	0x00007e9d

00007ecc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    7ecc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    7ece:	2000      	movs	r0, #0
    7ed0:	4b01      	ldr	r3, [pc, #4]	; (7ed8 <sd_mmc_wr_protect_0+0xc>)
    7ed2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    7ed4:	bd10      	pop	{r4, pc}
    7ed6:	46c0      	nop			; (mov r8, r8)
    7ed8:	000010d1 	.word	0x000010d1

00007edc <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    7edc:	2001      	movs	r0, #1
    7ede:	4770      	bx	lr

00007ee0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    7ee0:	b510      	push	{r4, lr}
    7ee2:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    7ee4:	2201      	movs	r2, #1
    7ee6:	4b0c      	ldr	r3, [pc, #48]	; (7f18 <sd_mmc_mem_2_ram+0x38>)
    7ee8:	4798      	blx	r3
    7eea:	2800      	cmp	r0, #0
    7eec:	d004      	beq.n	7ef8 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7eee:	3802      	subs	r0, #2
    7ef0:	4243      	negs	r3, r0
    7ef2:	4158      	adcs	r0, r3
    7ef4:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7ef6:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7ef8:	2101      	movs	r1, #1
    7efa:	0020      	movs	r0, r4
    7efc:	4b07      	ldr	r3, [pc, #28]	; (7f1c <sd_mmc_mem_2_ram+0x3c>)
    7efe:	4798      	blx	r3
    7f00:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7f02:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7f04:	2b00      	cmp	r3, #0
    7f06:	d1f6      	bne.n	7ef6 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    7f08:	2000      	movs	r0, #0
    7f0a:	4b05      	ldr	r3, [pc, #20]	; (7f20 <sd_mmc_mem_2_ram+0x40>)
    7f0c:	4798      	blx	r3
    7f0e:	1e43      	subs	r3, r0, #1
    7f10:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7f12:	b2c0      	uxtb	r0, r0
    7f14:	e7ef      	b.n	7ef6 <sd_mmc_mem_2_ram+0x16>
    7f16:	46c0      	nop			; (mov r8, r8)
    7f18:	000010d5 	.word	0x000010d5
    7f1c:	0000115d 	.word	0x0000115d
    7f20:	00001189 	.word	0x00001189

00007f24 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    7f24:	b510      	push	{r4, lr}
    7f26:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    7f28:	0001      	movs	r1, r0
    7f2a:	2000      	movs	r0, #0
    7f2c:	4b01      	ldr	r3, [pc, #4]	; (7f34 <sd_mmc_mem_2_ram_0+0x10>)
    7f2e:	4798      	blx	r3
}
    7f30:	bd10      	pop	{r4, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	00007ee1 	.word	0x00007ee1

00007f38 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    7f38:	b510      	push	{r4, lr}
    7f3a:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    7f3c:	2201      	movs	r2, #1
    7f3e:	4b0c      	ldr	r3, [pc, #48]	; (7f70 <sd_mmc_ram_2_mem+0x38>)
    7f40:	4798      	blx	r3
    7f42:	2800      	cmp	r0, #0
    7f44:	d004      	beq.n	7f50 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7f46:	3802      	subs	r0, #2
    7f48:	4243      	negs	r3, r0
    7f4a:	4158      	adcs	r0, r3
    7f4c:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7f4e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7f50:	2101      	movs	r1, #1
    7f52:	0020      	movs	r0, r4
    7f54:	4b07      	ldr	r3, [pc, #28]	; (7f74 <sd_mmc_ram_2_mem+0x3c>)
    7f56:	4798      	blx	r3
    7f58:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7f5a:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d1f6      	bne.n	7f4e <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7f60:	2000      	movs	r0, #0
    7f62:	4b05      	ldr	r3, [pc, #20]	; (7f78 <sd_mmc_ram_2_mem+0x40>)
    7f64:	4798      	blx	r3
    7f66:	1e43      	subs	r3, r0, #1
    7f68:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7f6a:	b2c0      	uxtb	r0, r0
    7f6c:	e7ef      	b.n	7f4e <sd_mmc_ram_2_mem+0x16>
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	000011f9 	.word	0x000011f9
    7f74:	00001269 	.word	0x00001269
    7f78:	00001295 	.word	0x00001295

00007f7c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    7f7c:	b510      	push	{r4, lr}
    7f7e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    7f80:	0001      	movs	r1, r0
    7f82:	2000      	movs	r0, #0
    7f84:	4b01      	ldr	r3, [pc, #4]	; (7f8c <sd_mmc_ram_2_mem_0+0x10>)
    7f86:	4798      	blx	r3
}
    7f88:	bd10      	pop	{r4, pc}
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	00007f39 	.word	0x00007f39

00007f90 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    7f90:	b500      	push	{lr}
    7f92:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    7f94:	466b      	mov	r3, sp
    7f96:	1dd9      	adds	r1, r3, #7
    7f98:	23ff      	movs	r3, #255	; 0xff
    7f9a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    7f9c:	2201      	movs	r2, #1
    7f9e:	480b      	ldr	r0, [pc, #44]	; (7fcc <sd_mmc_spi_start_write_block+0x3c>)
    7fa0:	4b0b      	ldr	r3, [pc, #44]	; (7fd0 <sd_mmc_spi_start_write_block+0x40>)
    7fa2:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    7fa4:	4b0b      	ldr	r3, [pc, #44]	; (7fd4 <sd_mmc_spi_start_write_block+0x44>)
    7fa6:	881b      	ldrh	r3, [r3, #0]
    7fa8:	2b01      	cmp	r3, #1
    7faa:	d00a      	beq.n	7fc2 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    7fac:	22fc      	movs	r2, #252	; 0xfc
    7fae:	466b      	mov	r3, sp
    7fb0:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    7fb2:	2201      	movs	r2, #1
    7fb4:	466b      	mov	r3, sp
    7fb6:	1d99      	adds	r1, r3, #6
    7fb8:	4804      	ldr	r0, [pc, #16]	; (7fcc <sd_mmc_spi_start_write_block+0x3c>)
    7fba:	4b05      	ldr	r3, [pc, #20]	; (7fd0 <sd_mmc_spi_start_write_block+0x40>)
    7fbc:	4798      	blx	r3
}
    7fbe:	b003      	add	sp, #12
    7fc0:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    7fc2:	22fe      	movs	r2, #254	; 0xfe
    7fc4:	466b      	mov	r3, sp
    7fc6:	719a      	strb	r2, [r3, #6]
    7fc8:	e7f3      	b.n	7fb2 <sd_mmc_spi_start_write_block+0x22>
    7fca:	46c0      	nop			; (mov r8, r8)
    7fcc:	20000300 	.word	0x20000300
    7fd0:	00007c29 	.word	0x00007c29
    7fd4:	20000344 	.word	0x20000344

00007fd8 <sd_mmc_spi_wait_busy>:
{
    7fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fda:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    7fdc:	466b      	mov	r3, sp
    7fde:	1ddc      	adds	r4, r3, #7
    7fe0:	23ff      	movs	r3, #255	; 0xff
    7fe2:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7fe4:	4e12      	ldr	r6, [pc, #72]	; (8030 <sd_mmc_spi_wait_busy+0x58>)
    7fe6:	2201      	movs	r2, #1
    7fe8:	0021      	movs	r1, r4
    7fea:	0030      	movs	r0, r6
    7fec:	4d11      	ldr	r5, [pc, #68]	; (8034 <sd_mmc_spi_wait_busy+0x5c>)
    7fee:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7ff0:	23ff      	movs	r3, #255	; 0xff
    7ff2:	2201      	movs	r2, #1
    7ff4:	0021      	movs	r1, r4
    7ff6:	0030      	movs	r0, r6
    7ff8:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7ffa:	23ff      	movs	r3, #255	; 0xff
    7ffc:	2201      	movs	r2, #1
    7ffe:	0021      	movs	r1, r4
    8000:	0030      	movs	r0, r6
    8002:	47a8      	blx	r5
    8004:	4c0c      	ldr	r4, [pc, #48]	; (8038 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    8006:	466b      	mov	r3, sp
    8008:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    800a:	4e09      	ldr	r6, [pc, #36]	; (8030 <sd_mmc_spi_wait_busy+0x58>)
    800c:	4f09      	ldr	r7, [pc, #36]	; (8034 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    800e:	782b      	ldrb	r3, [r5, #0]
    8010:	2bff      	cmp	r3, #255	; 0xff
    8012:	d009      	beq.n	8028 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8014:	23ff      	movs	r3, #255	; 0xff
    8016:	2201      	movs	r2, #1
    8018:	0029      	movs	r1, r5
    801a:	0030      	movs	r0, r6
    801c:	47b8      	blx	r7
    801e:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    8020:	2c00      	cmp	r4, #0
    8022:	d1f4      	bne.n	800e <sd_mmc_spi_wait_busy+0x36>
			return false;
    8024:	2000      	movs	r0, #0
    8026:	e000      	b.n	802a <sd_mmc_spi_wait_busy+0x52>
	return true;
    8028:	2001      	movs	r0, #1
}
    802a:	b003      	add	sp, #12
    802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    802e:	46c0      	nop			; (mov r8, r8)
    8030:	20000300 	.word	0x20000300
    8034:	00007a19 	.word	0x00007a19
    8038:	00030d40 	.word	0x00030d40

0000803c <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    803c:	b570      	push	{r4, r5, r6, lr}
    803e:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    8040:	4b14      	ldr	r3, [pc, #80]	; (8094 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    8042:	881c      	ldrh	r4, [r3, #0]
    8044:	2c01      	cmp	r4, #1
    8046:	d023      	beq.n	8090 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    8048:	4b13      	ldr	r3, [pc, #76]	; (8098 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    804a:	8819      	ldrh	r1, [r3, #0]
    804c:	4b13      	ldr	r3, [pc, #76]	; (809c <sd_mmc_spi_stop_multiwrite_block+0x60>)
    804e:	6818      	ldr	r0, [r3, #0]
    8050:	4b13      	ldr	r3, [pc, #76]	; (80a0 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    8052:	4798      	blx	r3
		return true; // It is not the End of multi write
    8054:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    8056:	4284      	cmp	r4, r0
    8058:	d902      	bls.n	8060 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    805a:	0018      	movs	r0, r3
    805c:	b002      	add	sp, #8
    805e:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    8060:	466b      	mov	r3, sp
    8062:	1ddc      	adds	r4, r3, #7
    8064:	23ff      	movs	r3, #255	; 0xff
    8066:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8068:	4e0e      	ldr	r6, [pc, #56]	; (80a4 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    806a:	2201      	movs	r2, #1
    806c:	0021      	movs	r1, r4
    806e:	0030      	movs	r0, r6
    8070:	4d0d      	ldr	r5, [pc, #52]	; (80a8 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    8072:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    8074:	23fd      	movs	r3, #253	; 0xfd
    8076:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8078:	2201      	movs	r2, #1
    807a:	0021      	movs	r1, r4
    807c:	0030      	movs	r0, r6
    807e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    8080:	4b0a      	ldr	r3, [pc, #40]	; (80ac <sd_mmc_spi_stop_multiwrite_block+0x70>)
    8082:	4798      	blx	r3
    8084:	1e03      	subs	r3, r0, #0
    8086:	d1e8      	bne.n	805a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8088:	2105      	movs	r1, #5
    808a:	4a09      	ldr	r2, [pc, #36]	; (80b0 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    808c:	7011      	strb	r1, [r2, #0]
		return false;
    808e:	e7e4      	b.n	805a <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    8090:	2301      	movs	r3, #1
    8092:	e7e2      	b.n	805a <sd_mmc_spi_stop_multiwrite_block+0x1e>
    8094:	20000344 	.word	0x20000344
    8098:	2000033c 	.word	0x2000033c
    809c:	2000034c 	.word	0x2000034c
    80a0:	00008d29 	.word	0x00008d29
    80a4:	20000300 	.word	0x20000300
    80a8:	00007c29 	.word	0x00007c29
    80ac:	00007fd9 	.word	0x00007fd9
    80b0:	20000343 	.word	0x20000343

000080b4 <sd_mmc_spi_start_read_block>:
{
    80b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80b6:	b083      	sub	sp, #12
	token = 0;
    80b8:	2200      	movs	r2, #0
    80ba:	466b      	mov	r3, sp
    80bc:	71da      	strb	r2, [r3, #7]
    80be:	4c14      	ldr	r4, [pc, #80]	; (8110 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    80c0:	466b      	mov	r3, sp
    80c2:	1ddd      	adds	r5, r3, #7
    80c4:	4e13      	ldr	r6, [pc, #76]	; (8114 <sd_mmc_spi_start_read_block+0x60>)
    80c6:	4f14      	ldr	r7, [pc, #80]	; (8118 <sd_mmc_spi_start_read_block+0x64>)
    80c8:	23ff      	movs	r3, #255	; 0xff
    80ca:	2201      	movs	r2, #1
    80cc:	0029      	movs	r1, r5
    80ce:	0030      	movs	r0, r6
    80d0:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    80d2:	782b      	ldrb	r3, [r5, #0]
    80d4:	220f      	movs	r2, #15
    80d6:	0019      	movs	r1, r3
    80d8:	4391      	bics	r1, r2
    80da:	1e0a      	subs	r2, r1, #0
    80dc:	d009      	beq.n	80f2 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    80de:	2bfe      	cmp	r3, #254	; 0xfe
    80e0:	d013      	beq.n	810a <sd_mmc_spi_start_read_block+0x56>
    80e2:	3c01      	subs	r4, #1
		if (i-- == 0) {
    80e4:	2c00      	cmp	r4, #0
    80e6:	d1ef      	bne.n	80c8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    80e8:	2204      	movs	r2, #4
    80ea:	4b0c      	ldr	r3, [pc, #48]	; (811c <sd_mmc_spi_start_read_block+0x68>)
    80ec:	701a      	strb	r2, [r3, #0]
			return false;
    80ee:	2000      	movs	r0, #0
    80f0:	e00c      	b.n	810c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    80f2:	075b      	lsls	r3, r3, #29
    80f4:	d004      	beq.n	8100 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    80f6:	3207      	adds	r2, #7
    80f8:	4b08      	ldr	r3, [pc, #32]	; (811c <sd_mmc_spi_start_read_block+0x68>)
    80fa:	701a      	strb	r2, [r3, #0]
			return false;
    80fc:	2000      	movs	r0, #0
    80fe:	e005      	b.n	810c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    8100:	220b      	movs	r2, #11
    8102:	4b06      	ldr	r3, [pc, #24]	; (811c <sd_mmc_spi_start_read_block+0x68>)
    8104:	701a      	strb	r2, [r3, #0]
			return false;
    8106:	2000      	movs	r0, #0
    8108:	e000      	b.n	810c <sd_mmc_spi_start_read_block+0x58>
	return true;
    810a:	2001      	movs	r0, #1
}
    810c:	b003      	add	sp, #12
    810e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8110:	0007a120 	.word	0x0007a120
    8114:	20000300 	.word	0x20000300
    8118:	00007a19 	.word	0x00007a19
    811c:	20000343 	.word	0x20000343

00008120 <sd_mmc_spi_stop_write_block>:
{
    8120:	b530      	push	{r4, r5, lr}
    8122:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    8124:	a901      	add	r1, sp, #4
    8126:	2301      	movs	r3, #1
    8128:	425b      	negs	r3, r3
    812a:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    812c:	4d14      	ldr	r5, [pc, #80]	; (8180 <sd_mmc_spi_stop_write_block+0x60>)
    812e:	2202      	movs	r2, #2
    8130:	0028      	movs	r0, r5
    8132:	4b14      	ldr	r3, [pc, #80]	; (8184 <sd_mmc_spi_stop_write_block+0x64>)
    8134:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    8136:	466b      	mov	r3, sp
    8138:	1ddc      	adds	r4, r3, #7
    813a:	23ff      	movs	r3, #255	; 0xff
    813c:	2201      	movs	r2, #1
    813e:	0021      	movs	r1, r4
    8140:	0028      	movs	r0, r5
    8142:	4d11      	ldr	r5, [pc, #68]	; (8188 <sd_mmc_spi_stop_write_block+0x68>)
    8144:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    8146:	7822      	ldrb	r2, [r4, #0]
    8148:	2311      	movs	r3, #17
    814a:	4013      	ands	r3, r2
    814c:	2b01      	cmp	r3, #1
    814e:	d005      	beq.n	815c <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    8150:	2201      	movs	r2, #1
    8152:	4b0e      	ldr	r3, [pc, #56]	; (818c <sd_mmc_spi_stop_write_block+0x6c>)
    8154:	701a      	strb	r2, [r3, #0]
		return false;
    8156:	2000      	movs	r0, #0
}
    8158:	b003      	add	sp, #12
    815a:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    815c:	231e      	movs	r3, #30
    815e:	401a      	ands	r2, r3
    8160:	2a04      	cmp	r2, #4
    8162:	d00b      	beq.n	817c <sd_mmc_spi_stop_write_block+0x5c>
    8164:	2a0a      	cmp	r2, #10
    8166:	d104      	bne.n	8172 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    8168:	3a02      	subs	r2, #2
    816a:	4b08      	ldr	r3, [pc, #32]	; (818c <sd_mmc_spi_stop_write_block+0x6c>)
    816c:	701a      	strb	r2, [r3, #0]
		return false;
    816e:	2000      	movs	r0, #0
    8170:	e7f2      	b.n	8158 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    8172:	220a      	movs	r2, #10
    8174:	4b05      	ldr	r3, [pc, #20]	; (818c <sd_mmc_spi_stop_write_block+0x6c>)
    8176:	701a      	strb	r2, [r3, #0]
		return false;
    8178:	2000      	movs	r0, #0
    817a:	e7ed      	b.n	8158 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    817c:	2001      	movs	r0, #1
    817e:	e7eb      	b.n	8158 <sd_mmc_spi_stop_write_block+0x38>
    8180:	20000300 	.word	0x20000300
    8184:	00007c29 	.word	0x00007c29
    8188:	00007a19 	.word	0x00007a19
    818c:	20000343 	.word	0x20000343

00008190 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    8190:	b570      	push	{r4, r5, r6, lr}
    8192:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8194:	2500      	movs	r5, #0
    8196:	4b30      	ldr	r3, [pc, #192]	; (8258 <sd_mmc_spi_init+0xc8>)
    8198:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    819a:	a90f      	add	r1, sp, #60	; 0x3c
    819c:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    819e:	2601      	movs	r6, #1
    81a0:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    81a2:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    81a4:	2025      	movs	r0, #37	; 0x25
    81a6:	4b2d      	ldr	r3, [pc, #180]	; (825c <sd_mmc_spi_init+0xcc>)
    81a8:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    81aa:	ac01      	add	r4, sp, #4
    81ac:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    81ae:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    81b0:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    81b2:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    81b4:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    81b6:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    81b8:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    81ba:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    81bc:	2324      	movs	r3, #36	; 0x24
    81be:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    81c0:	220c      	movs	r2, #12
    81c2:	2100      	movs	r1, #0
    81c4:	a807      	add	r0, sp, #28
    81c6:	4b26      	ldr	r3, [pc, #152]	; (8260 <sd_mmc_spi_init+0xd0>)
    81c8:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    81ca:	2380      	movs	r3, #128	; 0x80
    81cc:	025b      	lsls	r3, r3, #9
    81ce:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    81d0:	4b24      	ldr	r3, [pc, #144]	; (8264 <sd_mmc_spi_init+0xd4>)
    81d2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    81d4:	4b24      	ldr	r3, [pc, #144]	; (8268 <sd_mmc_spi_init+0xd8>)
    81d6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    81d8:	4b24      	ldr	r3, [pc, #144]	; (826c <sd_mmc_spi_init+0xdc>)
    81da:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    81dc:	4b24      	ldr	r3, [pc, #144]	; (8270 <sd_mmc_spi_init+0xe0>)
    81de:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    81e0:	4b24      	ldr	r3, [pc, #144]	; (8274 <sd_mmc_spi_init+0xe4>)
    81e2:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    81e4:	4d24      	ldr	r5, [pc, #144]	; (8278 <sd_mmc_spi_init+0xe8>)
    81e6:	0022      	movs	r2, r4
    81e8:	4924      	ldr	r1, [pc, #144]	; (827c <sd_mmc_spi_init+0xec>)
    81ea:	0028      	movs	r0, r5
    81ec:	4b24      	ldr	r3, [pc, #144]	; (8280 <sd_mmc_spi_init+0xf0>)
    81ee:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    81f0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    81f2:	0020      	movs	r0, r4
    81f4:	4b23      	ldr	r3, [pc, #140]	; (8284 <sd_mmc_spi_init+0xf4>)
    81f6:	4798      	blx	r3
    81f8:	231f      	movs	r3, #31
    81fa:	4018      	ands	r0, r3
    81fc:	4086      	lsls	r6, r0
    81fe:	4b22      	ldr	r3, [pc, #136]	; (8288 <sd_mmc_spi_init+0xf8>)
    8200:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8202:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8204:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8206:	2b00      	cmp	r3, #0
    8208:	d1fc      	bne.n	8204 <sd_mmc_spi_init+0x74>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    820a:	6823      	ldr	r3, [r4, #0]
    820c:	2202      	movs	r2, #2
    820e:	4313      	orrs	r3, r2
    8210:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    8212:	4a1e      	ldr	r2, [pc, #120]	; (828c <sd_mmc_spi_init+0xfc>)
    8214:	2300      	movs	r3, #0
    8216:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    8218:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    821a:	491d      	ldr	r1, [pc, #116]	; (8290 <sd_mmc_spi_init+0x100>)
    821c:	7808      	ldrb	r0, [r1, #0]
    821e:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    8220:	4c1c      	ldr	r4, [pc, #112]	; (8294 <sd_mmc_spi_init+0x104>)
    8222:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    8224:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8226:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    8228:	2201      	movs	r2, #1
    822a:	4669      	mov	r1, sp
    822c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    822e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8230:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8232:	4b0a      	ldr	r3, [pc, #40]	; (825c <sd_mmc_spi_init+0xcc>)
    8234:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8236:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    8238:	09d1      	lsrs	r1, r2, #7
		return NULL;
    823a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    823c:	2900      	cmp	r1, #0
    823e:	d104      	bne.n	824a <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
    8240:	0953      	lsrs	r3, r2, #5
    8242:	01db      	lsls	r3, r3, #7
    8244:	4914      	ldr	r1, [pc, #80]	; (8298 <sd_mmc_spi_init+0x108>)
    8246:	468c      	mov	ip, r1
    8248:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    824a:	211f      	movs	r1, #31
    824c:	4011      	ands	r1, r2
    824e:	2201      	movs	r2, #1
    8250:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8252:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    8254:	b010      	add	sp, #64	; 0x40
    8256:	bd70      	pop	{r4, r5, r6, pc}
    8258:	20000343 	.word	0x20000343
    825c:	00008851 	.word	0x00008851
    8260:	00009317 	.word	0x00009317
    8264:	00040003 	.word	0x00040003
    8268:	00050003 	.word	0x00050003
    826c:	00060003 	.word	0x00060003
    8270:	00070003 	.word	0x00070003
    8274:	00061a80 	.word	0x00061a80
    8278:	20000300 	.word	0x20000300
    827c:	42000800 	.word	0x42000800
    8280:	00007805 	.word	0x00007805
    8284:	0000256d 	.word	0x0000256d
    8288:	e000e100 	.word	0xe000e100
    828c:	20000350 	.word	0x20000350
    8290:	20000124 	.word	0x20000124
    8294:	20000340 	.word	0x20000340
    8298:	41004400 	.word	0x41004400

0000829c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    829e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    82a0:	2200      	movs	r2, #0
    82a2:	4b0d      	ldr	r3, [pc, #52]	; (82d8 <sd_mmc_spi_select_device+0x3c>)
    82a4:	701a      	strb	r2, [r3, #0]
    82a6:	000c      	movs	r4, r1
    82a8:	4b0c      	ldr	r3, [pc, #48]	; (82dc <sd_mmc_spi_select_device+0x40>)
    82aa:	4299      	cmp	r1, r3
    82ac:	d900      	bls.n	82b0 <sd_mmc_spi_select_device+0x14>
    82ae:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    82b0:	4d0b      	ldr	r5, [pc, #44]	; (82e0 <sd_mmc_spi_select_device+0x44>)
    82b2:	4e0c      	ldr	r6, [pc, #48]	; (82e4 <sd_mmc_spi_select_device+0x48>)
    82b4:	e001      	b.n	82ba <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    82b6:	08e3      	lsrs	r3, r4, #3
    82b8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    82ba:	0021      	movs	r1, r4
    82bc:	0028      	movs	r0, r5
    82be:	47b0      	blx	r6
    82c0:	2817      	cmp	r0, #23
    82c2:	d0f8      	beq.n	82b6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    82c4:	0079      	lsls	r1, r7, #1
    82c6:	19cf      	adds	r7, r1, r7
    82c8:	4907      	ldr	r1, [pc, #28]	; (82e8 <sd_mmc_spi_select_device+0x4c>)
    82ca:	19c9      	adds	r1, r1, r7
    82cc:	2201      	movs	r2, #1
    82ce:	4804      	ldr	r0, [pc, #16]	; (82e0 <sd_mmc_spi_select_device+0x44>)
    82d0:	4b06      	ldr	r3, [pc, #24]	; (82ec <sd_mmc_spi_select_device+0x50>)
    82d2:	4798      	blx	r3
}
    82d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	20000343 	.word	0x20000343
    82dc:	00b71b00 	.word	0x00b71b00
    82e0:	20000300 	.word	0x20000300
    82e4:	0000774d 	.word	0x0000774d
    82e8:	20000340 	.word	0x20000340
    82ec:	00007b35 	.word	0x00007b35

000082f0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    82f0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    82f2:	2200      	movs	r2, #0
    82f4:	4b04      	ldr	r3, [pc, #16]	; (8308 <sd_mmc_spi_deselect_device+0x18>)
    82f6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    82f8:	0041      	lsls	r1, r0, #1
    82fa:	1808      	adds	r0, r1, r0
    82fc:	4903      	ldr	r1, [pc, #12]	; (830c <sd_mmc_spi_deselect_device+0x1c>)
    82fe:	1809      	adds	r1, r1, r0
    8300:	4803      	ldr	r0, [pc, #12]	; (8310 <sd_mmc_spi_deselect_device+0x20>)
    8302:	4b04      	ldr	r3, [pc, #16]	; (8314 <sd_mmc_spi_deselect_device+0x24>)
    8304:	4798      	blx	r3
}
    8306:	bd10      	pop	{r4, pc}
    8308:	20000343 	.word	0x20000343
    830c:	20000340 	.word	0x20000340
    8310:	20000300 	.word	0x20000300
    8314:	00007b35 	.word	0x00007b35

00008318 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    8318:	b570      	push	{r4, r5, r6, lr}
    831a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    831c:	22ff      	movs	r2, #255	; 0xff
    831e:	466b      	mov	r3, sp
    8320:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8322:	2200      	movs	r2, #0
    8324:	4b07      	ldr	r3, [pc, #28]	; (8344 <sd_mmc_spi_send_clock+0x2c>)
    8326:	701a      	strb	r2, [r3, #0]
    8328:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    832a:	4e07      	ldr	r6, [pc, #28]	; (8348 <sd_mmc_spi_send_clock+0x30>)
    832c:	4d07      	ldr	r5, [pc, #28]	; (834c <sd_mmc_spi_send_clock+0x34>)
    832e:	2201      	movs	r2, #1
    8330:	466b      	mov	r3, sp
    8332:	1dd9      	adds	r1, r3, #7
    8334:	0030      	movs	r0, r6
    8336:	47a8      	blx	r5
    8338:	3c01      	subs	r4, #1
    833a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    833c:	2c00      	cmp	r4, #0
    833e:	d1f6      	bne.n	832e <sd_mmc_spi_send_clock+0x16>
	}
}
    8340:	b002      	add	sp, #8
    8342:	bd70      	pop	{r4, r5, r6, pc}
    8344:	20000343 	.word	0x20000343
    8348:	20000300 	.word	0x20000300
    834c:	00007c29 	.word	0x00007c29

00008350 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    8350:	b5f0      	push	{r4, r5, r6, r7, lr}
    8352:	46c6      	mov	lr, r8
    8354:	b500      	push	{lr}
    8356:	b086      	sub	sp, #24
    8358:	4680      	mov	r8, r0
    835a:	9200      	str	r2, [sp, #0]
    835c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    835e:	22ff      	movs	r2, #255	; 0xff
    8360:	230f      	movs	r3, #15
    8362:	a802      	add	r0, sp, #8
    8364:	4684      	mov	ip, r0
    8366:	4463      	add	r3, ip
    8368:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    836a:	2200      	movs	r2, #0
    836c:	4b53      	ldr	r3, [pc, #332]	; (84bc <sd_mmc_spi_adtc_start+0x16c>)
    836e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    8370:	ab04      	add	r3, sp, #16
    8372:	323f      	adds	r2, #63	; 0x3f
    8374:	4640      	mov	r0, r8
    8376:	4002      	ands	r2, r0
    8378:	2040      	movs	r0, #64	; 0x40
    837a:	4302      	orrs	r2, r0
    837c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    837e:	0e0a      	lsrs	r2, r1, #24
    8380:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    8382:	0c0a      	lsrs	r2, r1, #16
    8384:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    8386:	0a0a      	lsrs	r2, r1, #8
    8388:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    838a:	7119      	strb	r1, [r3, #4]
    838c:	2700      	movs	r7, #0
	crc = 0;
    838e:	2300      	movs	r3, #0
		value = *buf++;
    8390:	a904      	add	r1, sp, #16
    8392:	2208      	movs	r2, #8
				crc ^= 0x09;
    8394:	2409      	movs	r4, #9
    8396:	e011      	b.n	83bc <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    8398:	0076      	lsls	r6, r6, #1
    839a:	b2f6      	uxtb	r6, r6
    839c:	3801      	subs	r0, #1
    839e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    83a0:	2800      	cmp	r0, #0
    83a2:	d008      	beq.n	83b6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    83a4:	005b      	lsls	r3, r3, #1
    83a6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    83a8:	001d      	movs	r5, r3
    83aa:	4075      	eors	r5, r6
    83ac:	062d      	lsls	r5, r5, #24
    83ae:	d5f3      	bpl.n	8398 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    83b0:	4063      	eors	r3, r4
    83b2:	b2db      	uxtb	r3, r3
    83b4:	e7f0      	b.n	8398 <sd_mmc_spi_adtc_start+0x48>
    83b6:	3701      	adds	r7, #1
	while (size--) {
    83b8:	2f05      	cmp	r7, #5
    83ba:	d002      	beq.n	83c2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    83bc:	5c7e      	ldrb	r6, [r7, r1]
    83be:	0010      	movs	r0, r2
    83c0:	e7f0      	b.n	83a4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    83c2:	005b      	lsls	r3, r3, #1
    83c4:	2201      	movs	r2, #1
    83c6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    83c8:	ac04      	add	r4, sp, #16
    83ca:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    83cc:	4e3c      	ldr	r6, [pc, #240]	; (84c0 <sd_mmc_spi_adtc_start+0x170>)
    83ce:	2201      	movs	r2, #1
    83d0:	210f      	movs	r1, #15
    83d2:	ab02      	add	r3, sp, #8
    83d4:	469c      	mov	ip, r3
    83d6:	4461      	add	r1, ip
    83d8:	0030      	movs	r0, r6
    83da:	4f3a      	ldr	r7, [pc, #232]	; (84c4 <sd_mmc_spi_adtc_start+0x174>)
    83dc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    83de:	2206      	movs	r2, #6
    83e0:	0021      	movs	r1, r4
    83e2:	0030      	movs	r0, r6
    83e4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    83e6:	ab02      	add	r3, sp, #8
    83e8:	1dd9      	adds	r1, r3, #7
    83ea:	23ff      	movs	r3, #255	; 0xff
    83ec:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    83ee:	2201      	movs	r2, #1
    83f0:	0030      	movs	r0, r6
    83f2:	4e35      	ldr	r6, [pc, #212]	; (84c8 <sd_mmc_spi_adtc_start+0x178>)
    83f4:	47b0      	blx	r6
    83f6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    83f8:	ab02      	add	r3, sp, #8
    83fa:	1dde      	adds	r6, r3, #7
    83fc:	4f30      	ldr	r7, [pc, #192]	; (84c0 <sd_mmc_spi_adtc_start+0x170>)
    83fe:	4d32      	ldr	r5, [pc, #200]	; (84c8 <sd_mmc_spi_adtc_start+0x178>)
    8400:	23ff      	movs	r3, #255	; 0xff
    8402:	2201      	movs	r2, #1
    8404:	0031      	movs	r1, r6
    8406:	0038      	movs	r0, r7
    8408:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    840a:	7833      	ldrb	r3, [r6, #0]
    840c:	b25a      	sxtb	r2, r3
    840e:	2a00      	cmp	r2, #0
    8410:	da0b      	bge.n	842a <sd_mmc_spi_adtc_start+0xda>
    8412:	3c01      	subs	r4, #1
    8414:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    8416:	2c00      	cmp	r4, #0
    8418:	d1f2      	bne.n	8400 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    841a:	2202      	movs	r2, #2
    841c:	4b27      	ldr	r3, [pc, #156]	; (84bc <sd_mmc_spi_adtc_start+0x16c>)
    841e:	701a      	strb	r2, [r3, #0]
			return false;
    8420:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    8422:	b006      	add	sp, #24
    8424:	bc04      	pop	{r2}
    8426:	4690      	mov	r8, r2
    8428:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    842a:	4a28      	ldr	r2, [pc, #160]	; (84cc <sd_mmc_spi_adtc_start+0x17c>)
    842c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    842e:	071a      	lsls	r2, r3, #28
    8430:	d41a      	bmi.n	8468 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    8432:	075a      	lsls	r2, r3, #29
    8434:	d41d      	bmi.n	8472 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    8436:	2201      	movs	r2, #1
    8438:	4393      	bics	r3, r2
    843a:	d11f      	bne.n	847c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    843c:	4643      	mov	r3, r8
    843e:	049b      	lsls	r3, r3, #18
    8440:	d420      	bmi.n	8484 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    8442:	4643      	mov	r3, r8
    8444:	059b      	lsls	r3, r3, #22
    8446:	d425      	bmi.n	8494 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    8448:	4643      	mov	r3, r8
    844a:	055b      	lsls	r3, r3, #21
    844c:	d42b      	bmi.n	84a6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    844e:	4b20      	ldr	r3, [pc, #128]	; (84d0 <sd_mmc_spi_adtc_start+0x180>)
    8450:	466a      	mov	r2, sp
    8452:	8812      	ldrh	r2, [r2, #0]
    8454:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    8456:	4b1f      	ldr	r3, [pc, #124]	; (84d4 <sd_mmc_spi_adtc_start+0x184>)
    8458:	466a      	mov	r2, sp
    845a:	8892      	ldrh	r2, [r2, #4]
    845c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    845e:	2200      	movs	r2, #0
    8460:	4b1d      	ldr	r3, [pc, #116]	; (84d8 <sd_mmc_spi_adtc_start+0x188>)
    8462:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    8464:	2001      	movs	r0, #1
    8466:	e7dc      	b.n	8422 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    8468:	2206      	movs	r2, #6
    846a:	4b14      	ldr	r3, [pc, #80]	; (84bc <sd_mmc_spi_adtc_start+0x16c>)
    846c:	701a      	strb	r2, [r3, #0]
		return false;
    846e:	2000      	movs	r0, #0
    8470:	e7d7      	b.n	8422 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    8472:	2209      	movs	r2, #9
    8474:	4b11      	ldr	r3, [pc, #68]	; (84bc <sd_mmc_spi_adtc_start+0x16c>)
    8476:	701a      	strb	r2, [r3, #0]
		return false;
    8478:	2000      	movs	r0, #0
    847a:	e7d2      	b.n	8422 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    847c:	4b0f      	ldr	r3, [pc, #60]	; (84bc <sd_mmc_spi_adtc_start+0x16c>)
    847e:	701a      	strb	r2, [r3, #0]
		return false;
    8480:	2000      	movs	r0, #0
    8482:	e7ce      	b.n	8422 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    8484:	4b15      	ldr	r3, [pc, #84]	; (84dc <sd_mmc_spi_adtc_start+0x18c>)
    8486:	4798      	blx	r3
    8488:	2800      	cmp	r0, #0
    848a:	d1da      	bne.n	8442 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    848c:	2203      	movs	r2, #3
    848e:	4b0b      	ldr	r3, [pc, #44]	; (84bc <sd_mmc_spi_adtc_start+0x16c>)
    8490:	701a      	strb	r2, [r3, #0]
			return false;
    8492:	e7c6      	b.n	8422 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    8494:	490d      	ldr	r1, [pc, #52]	; (84cc <sd_mmc_spi_adtc_start+0x17c>)
    8496:	2300      	movs	r3, #0
    8498:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    849a:	33ff      	adds	r3, #255	; 0xff
    849c:	2201      	movs	r2, #1
    849e:	4808      	ldr	r0, [pc, #32]	; (84c0 <sd_mmc_spi_adtc_start+0x170>)
    84a0:	4e09      	ldr	r6, [pc, #36]	; (84c8 <sd_mmc_spi_adtc_start+0x178>)
    84a2:	47b0      	blx	r6
    84a4:	e7d0      	b.n	8448 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    84a6:	4e09      	ldr	r6, [pc, #36]	; (84cc <sd_mmc_spi_adtc_start+0x17c>)
    84a8:	23ff      	movs	r3, #255	; 0xff
    84aa:	2204      	movs	r2, #4
    84ac:	0031      	movs	r1, r6
    84ae:	4804      	ldr	r0, [pc, #16]	; (84c0 <sd_mmc_spi_adtc_start+0x170>)
    84b0:	4f05      	ldr	r7, [pc, #20]	; (84c8 <sd_mmc_spi_adtc_start+0x178>)
    84b2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    84b4:	6833      	ldr	r3, [r6, #0]
    84b6:	ba1b      	rev	r3, r3
    84b8:	6033      	str	r3, [r6, #0]
    84ba:	e7c8      	b.n	844e <sd_mmc_spi_adtc_start+0xfe>
    84bc:	20000343 	.word	0x20000343
    84c0:	20000300 	.word	0x20000300
    84c4:	00007c29 	.word	0x00007c29
    84c8:	00007a19 	.word	0x00007a19
    84cc:	20000348 	.word	0x20000348
    84d0:	2000033c 	.word	0x2000033c
    84d4:	20000344 	.word	0x20000344
    84d8:	2000034c 	.word	0x2000034c
    84dc:	00007fd9 	.word	0x00007fd9

000084e0 <sd_mmc_spi_send_cmd>:
{
    84e0:	b510      	push	{r4, lr}
    84e2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    84e4:	2300      	movs	r3, #0
    84e6:	9300      	str	r3, [sp, #0]
    84e8:	2200      	movs	r2, #0
    84ea:	4c02      	ldr	r4, [pc, #8]	; (84f4 <sd_mmc_spi_send_cmd+0x14>)
    84ec:	47a0      	blx	r4
}
    84ee:	b002      	add	sp, #8
    84f0:	bd10      	pop	{r4, pc}
    84f2:	46c0      	nop			; (mov r8, r8)
    84f4:	00008351 	.word	0x00008351

000084f8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    84f8:	4b01      	ldr	r3, [pc, #4]	; (8500 <sd_mmc_spi_get_response+0x8>)
    84fa:	6818      	ldr	r0, [r3, #0]
}
    84fc:	4770      	bx	lr
    84fe:	46c0      	nop			; (mov r8, r8)
    8500:	20000348 	.word	0x20000348

00008504 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    8504:	b510      	push	{r4, lr}
    8506:	b084      	sub	sp, #16
    8508:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    850a:	2200      	movs	r2, #0
    850c:	4b14      	ldr	r3, [pc, #80]	; (8560 <sd_mmc_spi_read_word+0x5c>)
    850e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8510:	4b14      	ldr	r3, [pc, #80]	; (8564 <sd_mmc_spi_read_word+0x60>)
    8512:	8819      	ldrh	r1, [r3, #0]
    8514:	4b14      	ldr	r3, [pc, #80]	; (8568 <sd_mmc_spi_read_word+0x64>)
    8516:	6818      	ldr	r0, [r3, #0]
    8518:	4b14      	ldr	r3, [pc, #80]	; (856c <sd_mmc_spi_read_word+0x68>)
    851a:	4798      	blx	r3
    851c:	2900      	cmp	r1, #0
    851e:	d103      	bne.n	8528 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    8520:	4b13      	ldr	r3, [pc, #76]	; (8570 <sd_mmc_spi_read_word+0x6c>)
    8522:	4798      	blx	r3
    8524:	2800      	cmp	r0, #0
    8526:	d010      	beq.n	854a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    8528:	23ff      	movs	r3, #255	; 0xff
    852a:	2204      	movs	r2, #4
    852c:	a901      	add	r1, sp, #4
    852e:	4811      	ldr	r0, [pc, #68]	; (8574 <sd_mmc_spi_read_word+0x70>)
    8530:	4c11      	ldr	r4, [pc, #68]	; (8578 <sd_mmc_spi_read_word+0x74>)
    8532:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    8534:	4b0c      	ldr	r3, [pc, #48]	; (8568 <sd_mmc_spi_read_word+0x64>)
    8536:	681a      	ldr	r2, [r3, #0]
    8538:	1d10      	adds	r0, r2, #4
    853a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    853c:	4b09      	ldr	r3, [pc, #36]	; (8564 <sd_mmc_spi_read_word+0x60>)
    853e:	8819      	ldrh	r1, [r3, #0]
    8540:	4b0a      	ldr	r3, [pc, #40]	; (856c <sd_mmc_spi_read_word+0x68>)
    8542:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    8544:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8546:	2900      	cmp	r1, #0
    8548:	d001      	beq.n	854e <sd_mmc_spi_read_word+0x4a>
}
    854a:	b004      	add	sp, #16
    854c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    854e:	23ff      	movs	r3, #255	; 0xff
    8550:	2202      	movs	r2, #2
    8552:	a903      	add	r1, sp, #12
    8554:	4807      	ldr	r0, [pc, #28]	; (8574 <sd_mmc_spi_read_word+0x70>)
    8556:	4c08      	ldr	r4, [pc, #32]	; (8578 <sd_mmc_spi_read_word+0x74>)
    8558:	47a0      	blx	r4
	return true;
    855a:	2001      	movs	r0, #1
    855c:	e7f5      	b.n	854a <sd_mmc_spi_read_word+0x46>
    855e:	46c0      	nop			; (mov r8, r8)
    8560:	20000343 	.word	0x20000343
    8564:	2000033c 	.word	0x2000033c
    8568:	2000034c 	.word	0x2000034c
    856c:	00008e35 	.word	0x00008e35
    8570:	000080b5 	.word	0x000080b5
    8574:	20000300 	.word	0x20000300
    8578:	00007a19 	.word	0x00007a19

0000857c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    857c:	b5f0      	push	{r4, r5, r6, r7, lr}
    857e:	46de      	mov	lr, fp
    8580:	4657      	mov	r7, sl
    8582:	4646      	mov	r6, r8
    8584:	b5c0      	push	{r6, r7, lr}
    8586:	b082      	sub	sp, #8
    8588:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    858a:	2200      	movs	r2, #0
    858c:	4b17      	ldr	r3, [pc, #92]	; (85ec <sd_mmc_spi_start_read_blocks+0x70>)
    858e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    8590:	1e4c      	subs	r4, r1, #1
    8592:	b2a4      	uxth	r4, r4
    8594:	2900      	cmp	r1, #0
    8596:	d026      	beq.n	85e6 <sd_mmc_spi_start_read_blocks+0x6a>
    8598:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    859a:	4b15      	ldr	r3, [pc, #84]	; (85f0 <sd_mmc_spi_start_read_blocks+0x74>)
    859c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    859e:	4f15      	ldr	r7, [pc, #84]	; (85f4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    85a0:	47d0      	blx	sl
    85a2:	4680      	mov	r8, r0
    85a4:	2800      	cmp	r0, #0
    85a6:	d017      	beq.n	85d8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    85a8:	883a      	ldrh	r2, [r7, #0]
    85aa:	465b      	mov	r3, fp
    85ac:	1999      	adds	r1, r3, r6
    85ae:	23ff      	movs	r3, #255	; 0xff
    85b0:	4811      	ldr	r0, [pc, #68]	; (85f8 <sd_mmc_spi_start_read_blocks+0x7c>)
    85b2:	4d12      	ldr	r5, [pc, #72]	; (85fc <sd_mmc_spi_start_read_blocks+0x80>)
    85b4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    85b6:	883b      	ldrh	r3, [r7, #0]
    85b8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    85ba:	4a11      	ldr	r2, [pc, #68]	; (8600 <sd_mmc_spi_start_read_blocks+0x84>)
    85bc:	6811      	ldr	r1, [r2, #0]
    85be:	468c      	mov	ip, r1
    85c0:	4463      	add	r3, ip
    85c2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    85c4:	23ff      	movs	r3, #255	; 0xff
    85c6:	2202      	movs	r2, #2
    85c8:	a901      	add	r1, sp, #4
    85ca:	480b      	ldr	r0, [pc, #44]	; (85f8 <sd_mmc_spi_start_read_blocks+0x7c>)
    85cc:	47a8      	blx	r5
	while (nb_block--) {
    85ce:	3c01      	subs	r4, #1
    85d0:	b2a4      	uxth	r4, r4
    85d2:	4b0c      	ldr	r3, [pc, #48]	; (8604 <sd_mmc_spi_start_read_blocks+0x88>)
    85d4:	429c      	cmp	r4, r3
    85d6:	d1e3      	bne.n	85a0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    85d8:	4640      	mov	r0, r8
    85da:	b002      	add	sp, #8
    85dc:	bc1c      	pop	{r2, r3, r4}
    85de:	4690      	mov	r8, r2
    85e0:	469a      	mov	sl, r3
    85e2:	46a3      	mov	fp, r4
    85e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    85e6:	2301      	movs	r3, #1
    85e8:	4698      	mov	r8, r3
    85ea:	e7f5      	b.n	85d8 <sd_mmc_spi_start_read_blocks+0x5c>
    85ec:	20000343 	.word	0x20000343
    85f0:	000080b5 	.word	0x000080b5
    85f4:	2000033c 	.word	0x2000033c
    85f8:	20000300 	.word	0x20000300
    85fc:	00007a19 	.word	0x00007a19
    8600:	2000034c 	.word	0x2000034c
    8604:	0000ffff 	.word	0x0000ffff

00008608 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    8608:	2001      	movs	r0, #1
    860a:	4770      	bx	lr

0000860c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    860c:	b5f0      	push	{r4, r5, r6, r7, lr}
    860e:	46c6      	mov	lr, r8
    8610:	b500      	push	{lr}
    8612:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8614:	2200      	movs	r2, #0
    8616:	4b15      	ldr	r3, [pc, #84]	; (866c <sd_mmc_spi_start_write_blocks+0x60>)
    8618:	701a      	strb	r2, [r3, #0]
	pos = 0;
    861a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    861c:	4f14      	ldr	r7, [pc, #80]	; (8670 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    861e:	4e15      	ldr	r6, [pc, #84]	; (8674 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    8620:	e000      	b.n	8624 <sd_mmc_spi_start_write_blocks+0x18>
{
    8622:	0021      	movs	r1, r4
	while (nb_block--) {
    8624:	1e4c      	subs	r4, r1, #1
    8626:	b2a4      	uxth	r4, r4
    8628:	2900      	cmp	r1, #0
    862a:	d01b      	beq.n	8664 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    862c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    862e:	8832      	ldrh	r2, [r6, #0]
    8630:	4643      	mov	r3, r8
    8632:	1959      	adds	r1, r3, r5
    8634:	4810      	ldr	r0, [pc, #64]	; (8678 <sd_mmc_spi_start_write_blocks+0x6c>)
    8636:	4b11      	ldr	r3, [pc, #68]	; (867c <sd_mmc_spi_start_write_blocks+0x70>)
    8638:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    863a:	8833      	ldrh	r3, [r6, #0]
    863c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    863e:	4a10      	ldr	r2, [pc, #64]	; (8680 <sd_mmc_spi_start_write_blocks+0x74>)
    8640:	6811      	ldr	r1, [r2, #0]
    8642:	468c      	mov	ip, r1
    8644:	4463      	add	r3, ip
    8646:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    8648:	4b0e      	ldr	r3, [pc, #56]	; (8684 <sd_mmc_spi_start_write_blocks+0x78>)
    864a:	4798      	blx	r3
    864c:	2800      	cmp	r0, #0
    864e:	d00a      	beq.n	8666 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    8650:	2c00      	cmp	r4, #0
    8652:	d0e6      	beq.n	8622 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    8654:	4b0c      	ldr	r3, [pc, #48]	; (8688 <sd_mmc_spi_start_write_blocks+0x7c>)
    8656:	4798      	blx	r3
    8658:	2800      	cmp	r0, #0
    865a:	d1e2      	bne.n	8622 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    865c:	2205      	movs	r2, #5
    865e:	4b03      	ldr	r3, [pc, #12]	; (866c <sd_mmc_spi_start_write_blocks+0x60>)
    8660:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    8662:	e000      	b.n	8666 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    8664:	2001      	movs	r0, #1
}
    8666:	bc04      	pop	{r2}
    8668:	4690      	mov	r8, r2
    866a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    866c:	20000343 	.word	0x20000343
    8670:	00007f91 	.word	0x00007f91
    8674:	2000033c 	.word	0x2000033c
    8678:	20000300 	.word	0x20000300
    867c:	00007c29 	.word	0x00007c29
    8680:	2000034c 	.word	0x2000034c
    8684:	00008121 	.word	0x00008121
    8688:	00007fd9 	.word	0x00007fd9

0000868c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    868c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    868e:	4b05      	ldr	r3, [pc, #20]	; (86a4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    8690:	4798      	blx	r3
    8692:	2800      	cmp	r0, #0
    8694:	d103      	bne.n	869e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8696:	2205      	movs	r2, #5
    8698:	4b03      	ldr	r3, [pc, #12]	; (86a8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    869a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    869c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    869e:	4b03      	ldr	r3, [pc, #12]	; (86ac <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    86a0:	4798      	blx	r3
    86a2:	e7fb      	b.n	869c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    86a4:	00007fd9 	.word	0x00007fd9
    86a8:	20000343 	.word	0x20000343
    86ac:	0000803d 	.word	0x0000803d

000086b0 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    86b0:	2001      	movs	r0, #1
    86b2:	4770      	bx	lr

000086b4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    86b4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    86b6:	2301      	movs	r3, #1
    86b8:	2800      	cmp	r0, #0
    86ba:	d001      	beq.n	86c0 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    86bc:	0018      	movs	r0, r3
    86be:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    86c0:	4b01      	ldr	r3, [pc, #4]	; (86c8 <mem_test_unit_ready+0x14>)
    86c2:	4798      	blx	r3
    86c4:	0003      	movs	r3, r0
    86c6:	e7f9      	b.n	86bc <mem_test_unit_ready+0x8>
    86c8:	00007e8d 	.word	0x00007e8d

000086cc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    86cc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    86ce:	2301      	movs	r3, #1
    86d0:	2800      	cmp	r0, #0
    86d2:	d001      	beq.n	86d8 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    86d4:	0018      	movs	r0, r3
    86d6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    86d8:	0008      	movs	r0, r1
    86da:	4b02      	ldr	r3, [pc, #8]	; (86e4 <mem_read_capacity+0x18>)
    86dc:	4798      	blx	r3
    86de:	0003      	movs	r3, r0
    86e0:	e7f8      	b.n	86d4 <mem_read_capacity+0x8>
    86e2:	46c0      	nop			; (mov r8, r8)
    86e4:	00007ebd 	.word	0x00007ebd

000086e8 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    86e8:	4243      	negs	r3, r0
    86ea:	4158      	adcs	r0, r3
    86ec:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    86ee:	4770      	bx	lr

000086f0 <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    86f0:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    86f2:	2000      	movs	r0, #0
    86f4:	2b00      	cmp	r3, #0
    86f6:	d101      	bne.n	86fc <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    86f8:	3001      	adds	r0, #1
    86fa:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    86fc:	4770      	bx	lr
	...

00008700 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    8700:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8702:	2301      	movs	r3, #1
    8704:	2800      	cmp	r0, #0
    8706:	d001      	beq.n	870c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    8708:	0018      	movs	r0, r3
    870a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    870c:	4b01      	ldr	r3, [pc, #4]	; (8714 <mem_wr_protect+0x14>)
    870e:	4798      	blx	r3
    8710:	0003      	movs	r3, r0
    8712:	e7f9      	b.n	8708 <mem_wr_protect+0x8>
    8714:	00007ecd 	.word	0x00007ecd

00008718 <mem_removal>:


bool mem_removal(U8 lun)
{
    8718:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    871a:	2301      	movs	r3, #1
    871c:	2800      	cmp	r0, #0
    871e:	d001      	beq.n	8724 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    8720:	0018      	movs	r0, r3
    8722:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    8724:	4b01      	ldr	r3, [pc, #4]	; (872c <mem_removal+0x14>)
    8726:	4798      	blx	r3
    8728:	0003      	movs	r3, r0
    872a:	e7f9      	b.n	8720 <mem_removal+0x8>
    872c:	00007edd 	.word	0x00007edd

00008730 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8730:	2800      	cmp	r0, #0
    8732:	d101      	bne.n	8738 <mem_name+0x8>
    8734:	4801      	ldr	r0, [pc, #4]	; (873c <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    8736:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8738:	2000      	movs	r0, #0
    873a:	e7fc      	b.n	8736 <mem_name+0x6>
    873c:	0000ac24 	.word	0x0000ac24

00008740 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    8740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8742:	0005      	movs	r5, r0
    8744:	000e      	movs	r6, r1
    8746:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    8748:	4b07      	ldr	r3, [pc, #28]	; (8768 <memory_2_ram+0x28>)
    874a:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    874c:	2401      	movs	r4, #1
    874e:	2d00      	cmp	r5, #0
    8750:	d003      	beq.n	875a <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    8752:	4b06      	ldr	r3, [pc, #24]	; (876c <memory_2_ram+0x2c>)
    8754:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8756:	0020      	movs	r0, r4
    8758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    875a:	0039      	movs	r1, r7
    875c:	0030      	movs	r0, r6
    875e:	4b04      	ldr	r3, [pc, #16]	; (8770 <memory_2_ram+0x30>)
    8760:	4798      	blx	r3
    8762:	0004      	movs	r4, r0
    8764:	e7f5      	b.n	8752 <memory_2_ram+0x12>
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	00006451 	.word	0x00006451
    876c:	00006453 	.word	0x00006453
    8770:	00007f25 	.word	0x00007f25

00008774 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    8774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8776:	0005      	movs	r5, r0
    8778:	000e      	movs	r6, r1
    877a:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    877c:	4b07      	ldr	r3, [pc, #28]	; (879c <ram_2_memory+0x28>)
    877e:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    8780:	2401      	movs	r4, #1
    8782:	2d00      	cmp	r5, #0
    8784:	d003      	beq.n	878e <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    8786:	4b06      	ldr	r3, [pc, #24]	; (87a0 <ram_2_memory+0x2c>)
    8788:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    878a:	0020      	movs	r0, r4
    878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    878e:	0039      	movs	r1, r7
    8790:	0030      	movs	r0, r6
    8792:	4b04      	ldr	r3, [pc, #16]	; (87a4 <ram_2_memory+0x30>)
    8794:	4798      	blx	r3
    8796:	0004      	movs	r4, r0
    8798:	e7f5      	b.n	8786 <ram_2_memory+0x12>
    879a:	46c0      	nop			; (mov r8, r8)
    879c:	00006455 	.word	0x00006455
    87a0:	00006457 	.word	0x00006457
    87a4:	00007f7d 	.word	0x00007f7d

000087a8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    87a8:	4b0c      	ldr	r3, [pc, #48]	; (87dc <cpu_irq_enter_critical+0x34>)
    87aa:	681b      	ldr	r3, [r3, #0]
    87ac:	2b00      	cmp	r3, #0
    87ae:	d106      	bne.n	87be <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    87b0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    87b4:	2b00      	cmp	r3, #0
    87b6:	d007      	beq.n	87c8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    87b8:	2200      	movs	r2, #0
    87ba:	4b09      	ldr	r3, [pc, #36]	; (87e0 <cpu_irq_enter_critical+0x38>)
    87bc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    87be:	4a07      	ldr	r2, [pc, #28]	; (87dc <cpu_irq_enter_critical+0x34>)
    87c0:	6813      	ldr	r3, [r2, #0]
    87c2:	3301      	adds	r3, #1
    87c4:	6013      	str	r3, [r2, #0]
}
    87c6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    87c8:	b672      	cpsid	i
    87ca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    87ce:	2200      	movs	r2, #0
    87d0:	4b04      	ldr	r3, [pc, #16]	; (87e4 <cpu_irq_enter_critical+0x3c>)
    87d2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    87d4:	3201      	adds	r2, #1
    87d6:	4b02      	ldr	r3, [pc, #8]	; (87e0 <cpu_irq_enter_critical+0x38>)
    87d8:	701a      	strb	r2, [r3, #0]
    87da:	e7f0      	b.n	87be <cpu_irq_enter_critical+0x16>
    87dc:	20000354 	.word	0x20000354
    87e0:	20000358 	.word	0x20000358
    87e4:	20000125 	.word	0x20000125

000087e8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    87e8:	4b08      	ldr	r3, [pc, #32]	; (880c <cpu_irq_leave_critical+0x24>)
    87ea:	681a      	ldr	r2, [r3, #0]
    87ec:	3a01      	subs	r2, #1
    87ee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    87f0:	681b      	ldr	r3, [r3, #0]
    87f2:	2b00      	cmp	r3, #0
    87f4:	d109      	bne.n	880a <cpu_irq_leave_critical+0x22>
    87f6:	4b06      	ldr	r3, [pc, #24]	; (8810 <cpu_irq_leave_critical+0x28>)
    87f8:	781b      	ldrb	r3, [r3, #0]
    87fa:	2b00      	cmp	r3, #0
    87fc:	d005      	beq.n	880a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    87fe:	2201      	movs	r2, #1
    8800:	4b04      	ldr	r3, [pc, #16]	; (8814 <cpu_irq_leave_critical+0x2c>)
    8802:	701a      	strb	r2, [r3, #0]
    8804:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8808:	b662      	cpsie	i
	}
}
    880a:	4770      	bx	lr
    880c:	20000354 	.word	0x20000354
    8810:	20000358 	.word	0x20000358
    8814:	20000125 	.word	0x20000125

00008818 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8818:	b5f0      	push	{r4, r5, r6, r7, lr}
    881a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    881c:	ac01      	add	r4, sp, #4
    881e:	2501      	movs	r5, #1
    8820:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    8822:	2700      	movs	r7, #0
    8824:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8826:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    8828:	0021      	movs	r1, r4
    882a:	203e      	movs	r0, #62	; 0x3e
    882c:	4e06      	ldr	r6, [pc, #24]	; (8848 <system_board_init+0x30>)
    882e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    8830:	2280      	movs	r2, #128	; 0x80
    8832:	05d2      	lsls	r2, r2, #23
    8834:	4b05      	ldr	r3, [pc, #20]	; (884c <system_board_init+0x34>)
    8836:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8838:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    883a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    883c:	0021      	movs	r1, r4
    883e:	200f      	movs	r0, #15
    8840:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    8842:	b003      	add	sp, #12
    8844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8846:	46c0      	nop			; (mov r8, r8)
    8848:	00008851 	.word	0x00008851
    884c:	41004480 	.word	0x41004480

00008850 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    8850:	b500      	push	{lr}
    8852:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8854:	ab01      	add	r3, sp, #4
    8856:	2280      	movs	r2, #128	; 0x80
    8858:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    885a:	780a      	ldrb	r2, [r1, #0]
    885c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    885e:	784a      	ldrb	r2, [r1, #1]
    8860:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    8862:	788a      	ldrb	r2, [r1, #2]
    8864:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8866:	0019      	movs	r1, r3
    8868:	4b01      	ldr	r3, [pc, #4]	; (8870 <port_pin_set_config+0x20>)
    886a:	4798      	blx	r3
}
    886c:	b003      	add	sp, #12
    886e:	bd00      	pop	{pc}
    8870:	00008ba5 	.word	0x00008ba5

00008874 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8874:	4a06      	ldr	r2, [pc, #24]	; (8890 <system_gclk_init+0x1c>)
    8876:	6993      	ldr	r3, [r2, #24]
    8878:	2108      	movs	r1, #8
    887a:	430b      	orrs	r3, r1
    887c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    887e:	2201      	movs	r2, #1
    8880:	4b04      	ldr	r3, [pc, #16]	; (8894 <system_gclk_init+0x20>)
    8882:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8884:	0019      	movs	r1, r3
    8886:	780b      	ldrb	r3, [r1, #0]
    8888:	4213      	tst	r3, r2
    888a:	d1fc      	bne.n	8886 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    888c:	4770      	bx	lr
    888e:	46c0      	nop			; (mov r8, r8)
    8890:	40000400 	.word	0x40000400
    8894:	40000c00 	.word	0x40000c00

00008898 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8898:	b570      	push	{r4, r5, r6, lr}
    889a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    889c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    889e:	780d      	ldrb	r5, [r1, #0]
    88a0:	022d      	lsls	r5, r5, #8
    88a2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    88a4:	784b      	ldrb	r3, [r1, #1]
    88a6:	2b00      	cmp	r3, #0
    88a8:	d002      	beq.n	88b0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    88aa:	2380      	movs	r3, #128	; 0x80
    88ac:	02db      	lsls	r3, r3, #11
    88ae:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    88b0:	7a4b      	ldrb	r3, [r1, #9]
    88b2:	2b00      	cmp	r3, #0
    88b4:	d002      	beq.n	88bc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    88b6:	2380      	movs	r3, #128	; 0x80
    88b8:	031b      	lsls	r3, r3, #12
    88ba:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    88bc:	6848      	ldr	r0, [r1, #4]
    88be:	2801      	cmp	r0, #1
    88c0:	d910      	bls.n	88e4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    88c2:	1e43      	subs	r3, r0, #1
    88c4:	4218      	tst	r0, r3
    88c6:	d134      	bne.n	8932 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    88c8:	2802      	cmp	r0, #2
    88ca:	d930      	bls.n	892e <system_gclk_gen_set_config+0x96>
    88cc:	2302      	movs	r3, #2
    88ce:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    88d0:	3201      	adds	r2, #1
						mask <<= 1) {
    88d2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    88d4:	4298      	cmp	r0, r3
    88d6:	d8fb      	bhi.n	88d0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    88d8:	0212      	lsls	r2, r2, #8
    88da:	4332      	orrs	r2, r6
    88dc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    88de:	2380      	movs	r3, #128	; 0x80
    88e0:	035b      	lsls	r3, r3, #13
    88e2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    88e4:	7a0b      	ldrb	r3, [r1, #8]
    88e6:	2b00      	cmp	r3, #0
    88e8:	d002      	beq.n	88f0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    88ea:	2380      	movs	r3, #128	; 0x80
    88ec:	039b      	lsls	r3, r3, #14
    88ee:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    88f0:	4a13      	ldr	r2, [pc, #76]	; (8940 <system_gclk_gen_set_config+0xa8>)
    88f2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    88f4:	b25b      	sxtb	r3, r3
    88f6:	2b00      	cmp	r3, #0
    88f8:	dbfb      	blt.n	88f2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    88fa:	4b12      	ldr	r3, [pc, #72]	; (8944 <system_gclk_gen_set_config+0xac>)
    88fc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    88fe:	4b12      	ldr	r3, [pc, #72]	; (8948 <system_gclk_gen_set_config+0xb0>)
    8900:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8902:	4a0f      	ldr	r2, [pc, #60]	; (8940 <system_gclk_gen_set_config+0xa8>)
    8904:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8906:	b25b      	sxtb	r3, r3
    8908:	2b00      	cmp	r3, #0
    890a:	dbfb      	blt.n	8904 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    890c:	4b0c      	ldr	r3, [pc, #48]	; (8940 <system_gclk_gen_set_config+0xa8>)
    890e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8910:	001a      	movs	r2, r3
    8912:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8914:	b25b      	sxtb	r3, r3
    8916:	2b00      	cmp	r3, #0
    8918:	dbfb      	blt.n	8912 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    891a:	4a09      	ldr	r2, [pc, #36]	; (8940 <system_gclk_gen_set_config+0xa8>)
    891c:	6853      	ldr	r3, [r2, #4]
    891e:	2180      	movs	r1, #128	; 0x80
    8920:	0249      	lsls	r1, r1, #9
    8922:	400b      	ands	r3, r1
    8924:	431d      	orrs	r5, r3
    8926:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8928:	4b08      	ldr	r3, [pc, #32]	; (894c <system_gclk_gen_set_config+0xb4>)
    892a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    892c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    892e:	2200      	movs	r2, #0
    8930:	e7d2      	b.n	88d8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8932:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8934:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8936:	2380      	movs	r3, #128	; 0x80
    8938:	029b      	lsls	r3, r3, #10
    893a:	431d      	orrs	r5, r3
    893c:	e7d2      	b.n	88e4 <system_gclk_gen_set_config+0x4c>
    893e:	46c0      	nop			; (mov r8, r8)
    8940:	40000c00 	.word	0x40000c00
    8944:	000087a9 	.word	0x000087a9
    8948:	40000c08 	.word	0x40000c08
    894c:	000087e9 	.word	0x000087e9

00008950 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8950:	b510      	push	{r4, lr}
    8952:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8954:	4a0b      	ldr	r2, [pc, #44]	; (8984 <system_gclk_gen_enable+0x34>)
    8956:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8958:	b25b      	sxtb	r3, r3
    895a:	2b00      	cmp	r3, #0
    895c:	dbfb      	blt.n	8956 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    895e:	4b0a      	ldr	r3, [pc, #40]	; (8988 <system_gclk_gen_enable+0x38>)
    8960:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8962:	4b0a      	ldr	r3, [pc, #40]	; (898c <system_gclk_gen_enable+0x3c>)
    8964:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8966:	4a07      	ldr	r2, [pc, #28]	; (8984 <system_gclk_gen_enable+0x34>)
    8968:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    896a:	b25b      	sxtb	r3, r3
    896c:	2b00      	cmp	r3, #0
    896e:	dbfb      	blt.n	8968 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8970:	4a04      	ldr	r2, [pc, #16]	; (8984 <system_gclk_gen_enable+0x34>)
    8972:	6851      	ldr	r1, [r2, #4]
    8974:	2380      	movs	r3, #128	; 0x80
    8976:	025b      	lsls	r3, r3, #9
    8978:	430b      	orrs	r3, r1
    897a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    897c:	4b04      	ldr	r3, [pc, #16]	; (8990 <system_gclk_gen_enable+0x40>)
    897e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8980:	bd10      	pop	{r4, pc}
    8982:	46c0      	nop			; (mov r8, r8)
    8984:	40000c00 	.word	0x40000c00
    8988:	000087a9 	.word	0x000087a9
    898c:	40000c04 	.word	0x40000c04
    8990:	000087e9 	.word	0x000087e9

00008994 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8994:	b570      	push	{r4, r5, r6, lr}
    8996:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8998:	4a1a      	ldr	r2, [pc, #104]	; (8a04 <system_gclk_gen_get_hz+0x70>)
    899a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    899c:	b25b      	sxtb	r3, r3
    899e:	2b00      	cmp	r3, #0
    89a0:	dbfb      	blt.n	899a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    89a2:	4b19      	ldr	r3, [pc, #100]	; (8a08 <system_gclk_gen_get_hz+0x74>)
    89a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    89a6:	4b19      	ldr	r3, [pc, #100]	; (8a0c <system_gclk_gen_get_hz+0x78>)
    89a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89aa:	4a16      	ldr	r2, [pc, #88]	; (8a04 <system_gclk_gen_get_hz+0x70>)
    89ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    89ae:	b25b      	sxtb	r3, r3
    89b0:	2b00      	cmp	r3, #0
    89b2:	dbfb      	blt.n	89ac <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    89b4:	4e13      	ldr	r6, [pc, #76]	; (8a04 <system_gclk_gen_get_hz+0x70>)
    89b6:	6870      	ldr	r0, [r6, #4]
    89b8:	04c0      	lsls	r0, r0, #19
    89ba:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    89bc:	4b14      	ldr	r3, [pc, #80]	; (8a10 <system_gclk_gen_get_hz+0x7c>)
    89be:	4798      	blx	r3
    89c0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    89c2:	4b12      	ldr	r3, [pc, #72]	; (8a0c <system_gclk_gen_get_hz+0x78>)
    89c4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    89c6:	6876      	ldr	r6, [r6, #4]
    89c8:	02f6      	lsls	r6, r6, #11
    89ca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    89cc:	4b11      	ldr	r3, [pc, #68]	; (8a14 <system_gclk_gen_get_hz+0x80>)
    89ce:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    89d0:	4a0c      	ldr	r2, [pc, #48]	; (8a04 <system_gclk_gen_get_hz+0x70>)
    89d2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    89d4:	b25b      	sxtb	r3, r3
    89d6:	2b00      	cmp	r3, #0
    89d8:	dbfb      	blt.n	89d2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    89da:	4b0a      	ldr	r3, [pc, #40]	; (8a04 <system_gclk_gen_get_hz+0x70>)
    89dc:	689c      	ldr	r4, [r3, #8]
    89de:	0224      	lsls	r4, r4, #8
    89e0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    89e2:	4b0d      	ldr	r3, [pc, #52]	; (8a18 <system_gclk_gen_get_hz+0x84>)
    89e4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    89e6:	2e00      	cmp	r6, #0
    89e8:	d107      	bne.n	89fa <system_gclk_gen_get_hz+0x66>
    89ea:	2c01      	cmp	r4, #1
    89ec:	d907      	bls.n	89fe <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    89ee:	0021      	movs	r1, r4
    89f0:	0028      	movs	r0, r5
    89f2:	4b0a      	ldr	r3, [pc, #40]	; (8a1c <system_gclk_gen_get_hz+0x88>)
    89f4:	4798      	blx	r3
    89f6:	0005      	movs	r5, r0
    89f8:	e001      	b.n	89fe <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    89fa:	3401      	adds	r4, #1
    89fc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    89fe:	0028      	movs	r0, r5
    8a00:	bd70      	pop	{r4, r5, r6, pc}
    8a02:	46c0      	nop			; (mov r8, r8)
    8a04:	40000c00 	.word	0x40000c00
    8a08:	000087a9 	.word	0x000087a9
    8a0c:	40000c04 	.word	0x40000c04
    8a10:	00002b71 	.word	0x00002b71
    8a14:	40000c08 	.word	0x40000c08
    8a18:	000087e9 	.word	0x000087e9
    8a1c:	00008d29 	.word	0x00008d29

00008a20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8a20:	b510      	push	{r4, lr}
    8a22:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8a24:	4b06      	ldr	r3, [pc, #24]	; (8a40 <system_gclk_chan_enable+0x20>)
    8a26:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8a28:	4b06      	ldr	r3, [pc, #24]	; (8a44 <system_gclk_chan_enable+0x24>)
    8a2a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8a2c:	4a06      	ldr	r2, [pc, #24]	; (8a48 <system_gclk_chan_enable+0x28>)
    8a2e:	8853      	ldrh	r3, [r2, #2]
    8a30:	2180      	movs	r1, #128	; 0x80
    8a32:	01c9      	lsls	r1, r1, #7
    8a34:	430b      	orrs	r3, r1
    8a36:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8a38:	4b04      	ldr	r3, [pc, #16]	; (8a4c <system_gclk_chan_enable+0x2c>)
    8a3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8a3c:	bd10      	pop	{r4, pc}
    8a3e:	46c0      	nop			; (mov r8, r8)
    8a40:	000087a9 	.word	0x000087a9
    8a44:	40000c02 	.word	0x40000c02
    8a48:	40000c00 	.word	0x40000c00
    8a4c:	000087e9 	.word	0x000087e9

00008a50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8a50:	b510      	push	{r4, lr}
    8a52:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8a54:	4b0f      	ldr	r3, [pc, #60]	; (8a94 <system_gclk_chan_disable+0x44>)
    8a56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8a58:	4b0f      	ldr	r3, [pc, #60]	; (8a98 <system_gclk_chan_disable+0x48>)
    8a5a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8a5c:	4a0f      	ldr	r2, [pc, #60]	; (8a9c <system_gclk_chan_disable+0x4c>)
    8a5e:	8853      	ldrh	r3, [r2, #2]
    8a60:	051b      	lsls	r3, r3, #20
    8a62:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8a64:	8853      	ldrh	r3, [r2, #2]
    8a66:	490e      	ldr	r1, [pc, #56]	; (8aa0 <system_gclk_chan_disable+0x50>)
    8a68:	400b      	ands	r3, r1
    8a6a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8a6c:	8853      	ldrh	r3, [r2, #2]
    8a6e:	490d      	ldr	r1, [pc, #52]	; (8aa4 <system_gclk_chan_disable+0x54>)
    8a70:	400b      	ands	r3, r1
    8a72:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8a74:	0011      	movs	r1, r2
    8a76:	2280      	movs	r2, #128	; 0x80
    8a78:	01d2      	lsls	r2, r2, #7
    8a7a:	884b      	ldrh	r3, [r1, #2]
    8a7c:	4213      	tst	r3, r2
    8a7e:	d1fc      	bne.n	8a7a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8a80:	4906      	ldr	r1, [pc, #24]	; (8a9c <system_gclk_chan_disable+0x4c>)
    8a82:	884a      	ldrh	r2, [r1, #2]
    8a84:	0203      	lsls	r3, r0, #8
    8a86:	4806      	ldr	r0, [pc, #24]	; (8aa0 <system_gclk_chan_disable+0x50>)
    8a88:	4002      	ands	r2, r0
    8a8a:	4313      	orrs	r3, r2
    8a8c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8a8e:	4b06      	ldr	r3, [pc, #24]	; (8aa8 <system_gclk_chan_disable+0x58>)
    8a90:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8a92:	bd10      	pop	{r4, pc}
    8a94:	000087a9 	.word	0x000087a9
    8a98:	40000c02 	.word	0x40000c02
    8a9c:	40000c00 	.word	0x40000c00
    8aa0:	fffff0ff 	.word	0xfffff0ff
    8aa4:	ffffbfff 	.word	0xffffbfff
    8aa8:	000087e9 	.word	0x000087e9

00008aac <system_gclk_chan_set_config>:
{
    8aac:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8aae:	780c      	ldrb	r4, [r1, #0]
    8ab0:	0224      	lsls	r4, r4, #8
    8ab2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8ab4:	4b02      	ldr	r3, [pc, #8]	; (8ac0 <system_gclk_chan_set_config+0x14>)
    8ab6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8ab8:	b2a4      	uxth	r4, r4
    8aba:	4b02      	ldr	r3, [pc, #8]	; (8ac4 <system_gclk_chan_set_config+0x18>)
    8abc:	805c      	strh	r4, [r3, #2]
}
    8abe:	bd10      	pop	{r4, pc}
    8ac0:	00008a51 	.word	0x00008a51
    8ac4:	40000c00 	.word	0x40000c00

00008ac8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8ac8:	b510      	push	{r4, lr}
    8aca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8acc:	4b06      	ldr	r3, [pc, #24]	; (8ae8 <system_gclk_chan_get_hz+0x20>)
    8ace:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8ad0:	4b06      	ldr	r3, [pc, #24]	; (8aec <system_gclk_chan_get_hz+0x24>)
    8ad2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8ad4:	4b06      	ldr	r3, [pc, #24]	; (8af0 <system_gclk_chan_get_hz+0x28>)
    8ad6:	885c      	ldrh	r4, [r3, #2]
    8ad8:	0524      	lsls	r4, r4, #20
    8ada:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8adc:	4b05      	ldr	r3, [pc, #20]	; (8af4 <system_gclk_chan_get_hz+0x2c>)
    8ade:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8ae0:	0020      	movs	r0, r4
    8ae2:	4b05      	ldr	r3, [pc, #20]	; (8af8 <system_gclk_chan_get_hz+0x30>)
    8ae4:	4798      	blx	r3
}
    8ae6:	bd10      	pop	{r4, pc}
    8ae8:	000087a9 	.word	0x000087a9
    8aec:	40000c02 	.word	0x40000c02
    8af0:	40000c00 	.word	0x40000c00
    8af4:	000087e9 	.word	0x000087e9
    8af8:	00008995 	.word	0x00008995

00008afc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8afc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8afe:	78d3      	ldrb	r3, [r2, #3]
    8b00:	2b00      	cmp	r3, #0
    8b02:	d135      	bne.n	8b70 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8b04:	7813      	ldrb	r3, [r2, #0]
    8b06:	2b80      	cmp	r3, #128	; 0x80
    8b08:	d029      	beq.n	8b5e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8b0a:	061b      	lsls	r3, r3, #24
    8b0c:	2480      	movs	r4, #128	; 0x80
    8b0e:	0264      	lsls	r4, r4, #9
    8b10:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8b12:	7854      	ldrb	r4, [r2, #1]
    8b14:	2502      	movs	r5, #2
    8b16:	43ac      	bics	r4, r5
    8b18:	d106      	bne.n	8b28 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8b1a:	7894      	ldrb	r4, [r2, #2]
    8b1c:	2c00      	cmp	r4, #0
    8b1e:	d120      	bne.n	8b62 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8b20:	2480      	movs	r4, #128	; 0x80
    8b22:	02a4      	lsls	r4, r4, #10
    8b24:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8b26:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8b28:	7854      	ldrb	r4, [r2, #1]
    8b2a:	3c01      	subs	r4, #1
    8b2c:	2c01      	cmp	r4, #1
    8b2e:	d91c      	bls.n	8b6a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8b30:	040d      	lsls	r5, r1, #16
    8b32:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8b34:	24a0      	movs	r4, #160	; 0xa0
    8b36:	05e4      	lsls	r4, r4, #23
    8b38:	432c      	orrs	r4, r5
    8b3a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b3c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8b3e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8b40:	24d0      	movs	r4, #208	; 0xd0
    8b42:	0624      	lsls	r4, r4, #24
    8b44:	432c      	orrs	r4, r5
    8b46:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b48:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8b4a:	78d4      	ldrb	r4, [r2, #3]
    8b4c:	2c00      	cmp	r4, #0
    8b4e:	d122      	bne.n	8b96 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8b50:	035b      	lsls	r3, r3, #13
    8b52:	d51c      	bpl.n	8b8e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8b54:	7893      	ldrb	r3, [r2, #2]
    8b56:	2b01      	cmp	r3, #1
    8b58:	d01e      	beq.n	8b98 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8b5a:	6141      	str	r1, [r0, #20]
    8b5c:	e017      	b.n	8b8e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8b5e:	2300      	movs	r3, #0
    8b60:	e7d7      	b.n	8b12 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8b62:	24c0      	movs	r4, #192	; 0xc0
    8b64:	02e4      	lsls	r4, r4, #11
    8b66:	4323      	orrs	r3, r4
    8b68:	e7dd      	b.n	8b26 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8b6a:	4c0d      	ldr	r4, [pc, #52]	; (8ba0 <_system_pinmux_config+0xa4>)
    8b6c:	4023      	ands	r3, r4
    8b6e:	e7df      	b.n	8b30 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8b70:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8b72:	040c      	lsls	r4, r1, #16
    8b74:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8b76:	23a0      	movs	r3, #160	; 0xa0
    8b78:	05db      	lsls	r3, r3, #23
    8b7a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b7c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8b7e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8b80:	23d0      	movs	r3, #208	; 0xd0
    8b82:	061b      	lsls	r3, r3, #24
    8b84:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8b86:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8b88:	78d3      	ldrb	r3, [r2, #3]
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d103      	bne.n	8b96 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8b8e:	7853      	ldrb	r3, [r2, #1]
    8b90:	3b01      	subs	r3, #1
    8b92:	2b01      	cmp	r3, #1
    8b94:	d902      	bls.n	8b9c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8b96:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8b98:	6181      	str	r1, [r0, #24]
    8b9a:	e7f8      	b.n	8b8e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8b9c:	6081      	str	r1, [r0, #8]
}
    8b9e:	e7fa      	b.n	8b96 <_system_pinmux_config+0x9a>
    8ba0:	fffbffff 	.word	0xfffbffff

00008ba4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8ba4:	b510      	push	{r4, lr}
    8ba6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8ba8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8baa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8bac:	2900      	cmp	r1, #0
    8bae:	d104      	bne.n	8bba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8bb0:	0943      	lsrs	r3, r0, #5
    8bb2:	01db      	lsls	r3, r3, #7
    8bb4:	4905      	ldr	r1, [pc, #20]	; (8bcc <system_pinmux_pin_set_config+0x28>)
    8bb6:	468c      	mov	ip, r1
    8bb8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8bba:	241f      	movs	r4, #31
    8bbc:	4020      	ands	r0, r4
    8bbe:	2101      	movs	r1, #1
    8bc0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8bc2:	0018      	movs	r0, r3
    8bc4:	4b02      	ldr	r3, [pc, #8]	; (8bd0 <system_pinmux_pin_set_config+0x2c>)
    8bc6:	4798      	blx	r3
}
    8bc8:	bd10      	pop	{r4, pc}
    8bca:	46c0      	nop			; (mov r8, r8)
    8bcc:	41004400 	.word	0x41004400
    8bd0:	00008afd 	.word	0x00008afd

00008bd4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8bd4:	4770      	bx	lr
	...

00008bd8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8bd8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8bda:	4b05      	ldr	r3, [pc, #20]	; (8bf0 <system_init+0x18>)
    8bdc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8bde:	4b05      	ldr	r3, [pc, #20]	; (8bf4 <system_init+0x1c>)
    8be0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8be2:	4b05      	ldr	r3, [pc, #20]	; (8bf8 <system_init+0x20>)
    8be4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8be6:	4b05      	ldr	r3, [pc, #20]	; (8bfc <system_init+0x24>)
    8be8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8bea:	4b05      	ldr	r3, [pc, #20]	; (8c00 <system_init+0x28>)
    8bec:	4798      	blx	r3
}
    8bee:	bd10      	pop	{r4, pc}
    8bf0:	00002ded 	.word	0x00002ded
    8bf4:	00008819 	.word	0x00008819
    8bf8:	00008bd5 	.word	0x00008bd5
    8bfc:	00002101 	.word	0x00002101
    8c00:	00008bd5 	.word	0x00008bd5

00008c04 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    8c04:	4770      	bx	lr
	...

00008c08 <Reset_Handler>:
{
    8c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8c0a:	4a2a      	ldr	r2, [pc, #168]	; (8cb4 <Reset_Handler+0xac>)
    8c0c:	4b2a      	ldr	r3, [pc, #168]	; (8cb8 <Reset_Handler+0xb0>)
    8c0e:	429a      	cmp	r2, r3
    8c10:	d011      	beq.n	8c36 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8c12:	001a      	movs	r2, r3
    8c14:	4b29      	ldr	r3, [pc, #164]	; (8cbc <Reset_Handler+0xb4>)
    8c16:	429a      	cmp	r2, r3
    8c18:	d20d      	bcs.n	8c36 <Reset_Handler+0x2e>
    8c1a:	4a29      	ldr	r2, [pc, #164]	; (8cc0 <Reset_Handler+0xb8>)
    8c1c:	3303      	adds	r3, #3
    8c1e:	1a9b      	subs	r3, r3, r2
    8c20:	089b      	lsrs	r3, r3, #2
    8c22:	3301      	adds	r3, #1
    8c24:	009b      	lsls	r3, r3, #2
    8c26:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8c28:	4823      	ldr	r0, [pc, #140]	; (8cb8 <Reset_Handler+0xb0>)
    8c2a:	4922      	ldr	r1, [pc, #136]	; (8cb4 <Reset_Handler+0xac>)
    8c2c:	588c      	ldr	r4, [r1, r2]
    8c2e:	5084      	str	r4, [r0, r2]
    8c30:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8c32:	429a      	cmp	r2, r3
    8c34:	d1fa      	bne.n	8c2c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8c36:	4a23      	ldr	r2, [pc, #140]	; (8cc4 <Reset_Handler+0xbc>)
    8c38:	4b23      	ldr	r3, [pc, #140]	; (8cc8 <Reset_Handler+0xc0>)
    8c3a:	429a      	cmp	r2, r3
    8c3c:	d20a      	bcs.n	8c54 <Reset_Handler+0x4c>
    8c3e:	43d3      	mvns	r3, r2
    8c40:	4921      	ldr	r1, [pc, #132]	; (8cc8 <Reset_Handler+0xc0>)
    8c42:	185b      	adds	r3, r3, r1
    8c44:	2103      	movs	r1, #3
    8c46:	438b      	bics	r3, r1
    8c48:	3304      	adds	r3, #4
    8c4a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8c4c:	2100      	movs	r1, #0
    8c4e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8c50:	4293      	cmp	r3, r2
    8c52:	d1fc      	bne.n	8c4e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8c54:	4a1d      	ldr	r2, [pc, #116]	; (8ccc <Reset_Handler+0xc4>)
    8c56:	21ff      	movs	r1, #255	; 0xff
    8c58:	4b1d      	ldr	r3, [pc, #116]	; (8cd0 <Reset_Handler+0xc8>)
    8c5a:	438b      	bics	r3, r1
    8c5c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8c5e:	39fd      	subs	r1, #253	; 0xfd
    8c60:	2390      	movs	r3, #144	; 0x90
    8c62:	005b      	lsls	r3, r3, #1
    8c64:	4a1b      	ldr	r2, [pc, #108]	; (8cd4 <Reset_Handler+0xcc>)
    8c66:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8c68:	4a1b      	ldr	r2, [pc, #108]	; (8cd8 <Reset_Handler+0xd0>)
    8c6a:	78d3      	ldrb	r3, [r2, #3]
    8c6c:	2503      	movs	r5, #3
    8c6e:	43ab      	bics	r3, r5
    8c70:	2402      	movs	r4, #2
    8c72:	4323      	orrs	r3, r4
    8c74:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8c76:	78d3      	ldrb	r3, [r2, #3]
    8c78:	270c      	movs	r7, #12
    8c7a:	43bb      	bics	r3, r7
    8c7c:	2608      	movs	r6, #8
    8c7e:	4333      	orrs	r3, r6
    8c80:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8c82:	4b16      	ldr	r3, [pc, #88]	; (8cdc <Reset_Handler+0xd4>)
    8c84:	7b98      	ldrb	r0, [r3, #14]
    8c86:	2230      	movs	r2, #48	; 0x30
    8c88:	4390      	bics	r0, r2
    8c8a:	2220      	movs	r2, #32
    8c8c:	4310      	orrs	r0, r2
    8c8e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8c90:	7b99      	ldrb	r1, [r3, #14]
    8c92:	43b9      	bics	r1, r7
    8c94:	4331      	orrs	r1, r6
    8c96:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8c98:	7b9a      	ldrb	r2, [r3, #14]
    8c9a:	43aa      	bics	r2, r5
    8c9c:	4322      	orrs	r2, r4
    8c9e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8ca0:	4a0f      	ldr	r2, [pc, #60]	; (8ce0 <Reset_Handler+0xd8>)
    8ca2:	6853      	ldr	r3, [r2, #4]
    8ca4:	2180      	movs	r1, #128	; 0x80
    8ca6:	430b      	orrs	r3, r1
    8ca8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8caa:	4b0e      	ldr	r3, [pc, #56]	; (8ce4 <Reset_Handler+0xdc>)
    8cac:	4798      	blx	r3
        main();
    8cae:	4b0e      	ldr	r3, [pc, #56]	; (8ce8 <Reset_Handler+0xe0>)
    8cb0:	4798      	blx	r3
    8cb2:	e7fe      	b.n	8cb2 <Reset_Handler+0xaa>
    8cb4:	0000acfc 	.word	0x0000acfc
    8cb8:	20000000 	.word	0x20000000
    8cbc:	2000018c 	.word	0x2000018c
    8cc0:	20000004 	.word	0x20000004
    8cc4:	2000018c 	.word	0x2000018c
    8cc8:	20002a40 	.word	0x20002a40
    8ccc:	e000ed00 	.word	0xe000ed00
    8cd0:	00000000 	.word	0x00000000
    8cd4:	41007000 	.word	0x41007000
    8cd8:	41005000 	.word	0x41005000
    8cdc:	41004800 	.word	0x41004800
    8ce0:	41004000 	.word	0x41004000
    8ce4:	000092bd 	.word	0x000092bd
    8ce8:	00005db9 	.word	0x00005db9

00008cec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8cec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8cee:	4a06      	ldr	r2, [pc, #24]	; (8d08 <_sbrk+0x1c>)
    8cf0:	6812      	ldr	r2, [r2, #0]
    8cf2:	2a00      	cmp	r2, #0
    8cf4:	d004      	beq.n	8d00 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8cf6:	4a04      	ldr	r2, [pc, #16]	; (8d08 <_sbrk+0x1c>)
    8cf8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8cfa:	18c3      	adds	r3, r0, r3
    8cfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8cfe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8d00:	4902      	ldr	r1, [pc, #8]	; (8d0c <_sbrk+0x20>)
    8d02:	4a01      	ldr	r2, [pc, #4]	; (8d08 <_sbrk+0x1c>)
    8d04:	6011      	str	r1, [r2, #0]
    8d06:	e7f6      	b.n	8cf6 <_sbrk+0xa>
    8d08:	2000035c 	.word	0x2000035c
    8d0c:	20004a40 	.word	0x20004a40

00008d10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8d10:	2001      	movs	r0, #1
    8d12:	4240      	negs	r0, r0
    8d14:	4770      	bx	lr

00008d16 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8d16:	2380      	movs	r3, #128	; 0x80
    8d18:	019b      	lsls	r3, r3, #6
    8d1a:	604b      	str	r3, [r1, #4]

	return 0;
}
    8d1c:	2000      	movs	r0, #0
    8d1e:	4770      	bx	lr

00008d20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8d20:	2001      	movs	r0, #1
    8d22:	4770      	bx	lr

00008d24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8d24:	2000      	movs	r0, #0
    8d26:	4770      	bx	lr

00008d28 <__udivsi3>:
    8d28:	2200      	movs	r2, #0
    8d2a:	0843      	lsrs	r3, r0, #1
    8d2c:	428b      	cmp	r3, r1
    8d2e:	d374      	bcc.n	8e1a <__udivsi3+0xf2>
    8d30:	0903      	lsrs	r3, r0, #4
    8d32:	428b      	cmp	r3, r1
    8d34:	d35f      	bcc.n	8df6 <__udivsi3+0xce>
    8d36:	0a03      	lsrs	r3, r0, #8
    8d38:	428b      	cmp	r3, r1
    8d3a:	d344      	bcc.n	8dc6 <__udivsi3+0x9e>
    8d3c:	0b03      	lsrs	r3, r0, #12
    8d3e:	428b      	cmp	r3, r1
    8d40:	d328      	bcc.n	8d94 <__udivsi3+0x6c>
    8d42:	0c03      	lsrs	r3, r0, #16
    8d44:	428b      	cmp	r3, r1
    8d46:	d30d      	bcc.n	8d64 <__udivsi3+0x3c>
    8d48:	22ff      	movs	r2, #255	; 0xff
    8d4a:	0209      	lsls	r1, r1, #8
    8d4c:	ba12      	rev	r2, r2
    8d4e:	0c03      	lsrs	r3, r0, #16
    8d50:	428b      	cmp	r3, r1
    8d52:	d302      	bcc.n	8d5a <__udivsi3+0x32>
    8d54:	1212      	asrs	r2, r2, #8
    8d56:	0209      	lsls	r1, r1, #8
    8d58:	d065      	beq.n	8e26 <__udivsi3+0xfe>
    8d5a:	0b03      	lsrs	r3, r0, #12
    8d5c:	428b      	cmp	r3, r1
    8d5e:	d319      	bcc.n	8d94 <__udivsi3+0x6c>
    8d60:	e000      	b.n	8d64 <__udivsi3+0x3c>
    8d62:	0a09      	lsrs	r1, r1, #8
    8d64:	0bc3      	lsrs	r3, r0, #15
    8d66:	428b      	cmp	r3, r1
    8d68:	d301      	bcc.n	8d6e <__udivsi3+0x46>
    8d6a:	03cb      	lsls	r3, r1, #15
    8d6c:	1ac0      	subs	r0, r0, r3
    8d6e:	4152      	adcs	r2, r2
    8d70:	0b83      	lsrs	r3, r0, #14
    8d72:	428b      	cmp	r3, r1
    8d74:	d301      	bcc.n	8d7a <__udivsi3+0x52>
    8d76:	038b      	lsls	r3, r1, #14
    8d78:	1ac0      	subs	r0, r0, r3
    8d7a:	4152      	adcs	r2, r2
    8d7c:	0b43      	lsrs	r3, r0, #13
    8d7e:	428b      	cmp	r3, r1
    8d80:	d301      	bcc.n	8d86 <__udivsi3+0x5e>
    8d82:	034b      	lsls	r3, r1, #13
    8d84:	1ac0      	subs	r0, r0, r3
    8d86:	4152      	adcs	r2, r2
    8d88:	0b03      	lsrs	r3, r0, #12
    8d8a:	428b      	cmp	r3, r1
    8d8c:	d301      	bcc.n	8d92 <__udivsi3+0x6a>
    8d8e:	030b      	lsls	r3, r1, #12
    8d90:	1ac0      	subs	r0, r0, r3
    8d92:	4152      	adcs	r2, r2
    8d94:	0ac3      	lsrs	r3, r0, #11
    8d96:	428b      	cmp	r3, r1
    8d98:	d301      	bcc.n	8d9e <__udivsi3+0x76>
    8d9a:	02cb      	lsls	r3, r1, #11
    8d9c:	1ac0      	subs	r0, r0, r3
    8d9e:	4152      	adcs	r2, r2
    8da0:	0a83      	lsrs	r3, r0, #10
    8da2:	428b      	cmp	r3, r1
    8da4:	d301      	bcc.n	8daa <__udivsi3+0x82>
    8da6:	028b      	lsls	r3, r1, #10
    8da8:	1ac0      	subs	r0, r0, r3
    8daa:	4152      	adcs	r2, r2
    8dac:	0a43      	lsrs	r3, r0, #9
    8dae:	428b      	cmp	r3, r1
    8db0:	d301      	bcc.n	8db6 <__udivsi3+0x8e>
    8db2:	024b      	lsls	r3, r1, #9
    8db4:	1ac0      	subs	r0, r0, r3
    8db6:	4152      	adcs	r2, r2
    8db8:	0a03      	lsrs	r3, r0, #8
    8dba:	428b      	cmp	r3, r1
    8dbc:	d301      	bcc.n	8dc2 <__udivsi3+0x9a>
    8dbe:	020b      	lsls	r3, r1, #8
    8dc0:	1ac0      	subs	r0, r0, r3
    8dc2:	4152      	adcs	r2, r2
    8dc4:	d2cd      	bcs.n	8d62 <__udivsi3+0x3a>
    8dc6:	09c3      	lsrs	r3, r0, #7
    8dc8:	428b      	cmp	r3, r1
    8dca:	d301      	bcc.n	8dd0 <__udivsi3+0xa8>
    8dcc:	01cb      	lsls	r3, r1, #7
    8dce:	1ac0      	subs	r0, r0, r3
    8dd0:	4152      	adcs	r2, r2
    8dd2:	0983      	lsrs	r3, r0, #6
    8dd4:	428b      	cmp	r3, r1
    8dd6:	d301      	bcc.n	8ddc <__udivsi3+0xb4>
    8dd8:	018b      	lsls	r3, r1, #6
    8dda:	1ac0      	subs	r0, r0, r3
    8ddc:	4152      	adcs	r2, r2
    8dde:	0943      	lsrs	r3, r0, #5
    8de0:	428b      	cmp	r3, r1
    8de2:	d301      	bcc.n	8de8 <__udivsi3+0xc0>
    8de4:	014b      	lsls	r3, r1, #5
    8de6:	1ac0      	subs	r0, r0, r3
    8de8:	4152      	adcs	r2, r2
    8dea:	0903      	lsrs	r3, r0, #4
    8dec:	428b      	cmp	r3, r1
    8dee:	d301      	bcc.n	8df4 <__udivsi3+0xcc>
    8df0:	010b      	lsls	r3, r1, #4
    8df2:	1ac0      	subs	r0, r0, r3
    8df4:	4152      	adcs	r2, r2
    8df6:	08c3      	lsrs	r3, r0, #3
    8df8:	428b      	cmp	r3, r1
    8dfa:	d301      	bcc.n	8e00 <__udivsi3+0xd8>
    8dfc:	00cb      	lsls	r3, r1, #3
    8dfe:	1ac0      	subs	r0, r0, r3
    8e00:	4152      	adcs	r2, r2
    8e02:	0883      	lsrs	r3, r0, #2
    8e04:	428b      	cmp	r3, r1
    8e06:	d301      	bcc.n	8e0c <__udivsi3+0xe4>
    8e08:	008b      	lsls	r3, r1, #2
    8e0a:	1ac0      	subs	r0, r0, r3
    8e0c:	4152      	adcs	r2, r2
    8e0e:	0843      	lsrs	r3, r0, #1
    8e10:	428b      	cmp	r3, r1
    8e12:	d301      	bcc.n	8e18 <__udivsi3+0xf0>
    8e14:	004b      	lsls	r3, r1, #1
    8e16:	1ac0      	subs	r0, r0, r3
    8e18:	4152      	adcs	r2, r2
    8e1a:	1a41      	subs	r1, r0, r1
    8e1c:	d200      	bcs.n	8e20 <__udivsi3+0xf8>
    8e1e:	4601      	mov	r1, r0
    8e20:	4152      	adcs	r2, r2
    8e22:	4610      	mov	r0, r2
    8e24:	4770      	bx	lr
    8e26:	e7ff      	b.n	8e28 <__udivsi3+0x100>
    8e28:	b501      	push	{r0, lr}
    8e2a:	2000      	movs	r0, #0
    8e2c:	f000 f8f0 	bl	9010 <__aeabi_idiv0>
    8e30:	bd02      	pop	{r1, pc}
    8e32:	46c0      	nop			; (mov r8, r8)

00008e34 <__aeabi_uidivmod>:
    8e34:	2900      	cmp	r1, #0
    8e36:	d0f7      	beq.n	8e28 <__udivsi3+0x100>
    8e38:	e776      	b.n	8d28 <__udivsi3>
    8e3a:	4770      	bx	lr

00008e3c <__divsi3>:
    8e3c:	4603      	mov	r3, r0
    8e3e:	430b      	orrs	r3, r1
    8e40:	d47f      	bmi.n	8f42 <__divsi3+0x106>
    8e42:	2200      	movs	r2, #0
    8e44:	0843      	lsrs	r3, r0, #1
    8e46:	428b      	cmp	r3, r1
    8e48:	d374      	bcc.n	8f34 <__divsi3+0xf8>
    8e4a:	0903      	lsrs	r3, r0, #4
    8e4c:	428b      	cmp	r3, r1
    8e4e:	d35f      	bcc.n	8f10 <__divsi3+0xd4>
    8e50:	0a03      	lsrs	r3, r0, #8
    8e52:	428b      	cmp	r3, r1
    8e54:	d344      	bcc.n	8ee0 <__divsi3+0xa4>
    8e56:	0b03      	lsrs	r3, r0, #12
    8e58:	428b      	cmp	r3, r1
    8e5a:	d328      	bcc.n	8eae <__divsi3+0x72>
    8e5c:	0c03      	lsrs	r3, r0, #16
    8e5e:	428b      	cmp	r3, r1
    8e60:	d30d      	bcc.n	8e7e <__divsi3+0x42>
    8e62:	22ff      	movs	r2, #255	; 0xff
    8e64:	0209      	lsls	r1, r1, #8
    8e66:	ba12      	rev	r2, r2
    8e68:	0c03      	lsrs	r3, r0, #16
    8e6a:	428b      	cmp	r3, r1
    8e6c:	d302      	bcc.n	8e74 <__divsi3+0x38>
    8e6e:	1212      	asrs	r2, r2, #8
    8e70:	0209      	lsls	r1, r1, #8
    8e72:	d065      	beq.n	8f40 <__divsi3+0x104>
    8e74:	0b03      	lsrs	r3, r0, #12
    8e76:	428b      	cmp	r3, r1
    8e78:	d319      	bcc.n	8eae <__divsi3+0x72>
    8e7a:	e000      	b.n	8e7e <__divsi3+0x42>
    8e7c:	0a09      	lsrs	r1, r1, #8
    8e7e:	0bc3      	lsrs	r3, r0, #15
    8e80:	428b      	cmp	r3, r1
    8e82:	d301      	bcc.n	8e88 <__divsi3+0x4c>
    8e84:	03cb      	lsls	r3, r1, #15
    8e86:	1ac0      	subs	r0, r0, r3
    8e88:	4152      	adcs	r2, r2
    8e8a:	0b83      	lsrs	r3, r0, #14
    8e8c:	428b      	cmp	r3, r1
    8e8e:	d301      	bcc.n	8e94 <__divsi3+0x58>
    8e90:	038b      	lsls	r3, r1, #14
    8e92:	1ac0      	subs	r0, r0, r3
    8e94:	4152      	adcs	r2, r2
    8e96:	0b43      	lsrs	r3, r0, #13
    8e98:	428b      	cmp	r3, r1
    8e9a:	d301      	bcc.n	8ea0 <__divsi3+0x64>
    8e9c:	034b      	lsls	r3, r1, #13
    8e9e:	1ac0      	subs	r0, r0, r3
    8ea0:	4152      	adcs	r2, r2
    8ea2:	0b03      	lsrs	r3, r0, #12
    8ea4:	428b      	cmp	r3, r1
    8ea6:	d301      	bcc.n	8eac <__divsi3+0x70>
    8ea8:	030b      	lsls	r3, r1, #12
    8eaa:	1ac0      	subs	r0, r0, r3
    8eac:	4152      	adcs	r2, r2
    8eae:	0ac3      	lsrs	r3, r0, #11
    8eb0:	428b      	cmp	r3, r1
    8eb2:	d301      	bcc.n	8eb8 <__divsi3+0x7c>
    8eb4:	02cb      	lsls	r3, r1, #11
    8eb6:	1ac0      	subs	r0, r0, r3
    8eb8:	4152      	adcs	r2, r2
    8eba:	0a83      	lsrs	r3, r0, #10
    8ebc:	428b      	cmp	r3, r1
    8ebe:	d301      	bcc.n	8ec4 <__divsi3+0x88>
    8ec0:	028b      	lsls	r3, r1, #10
    8ec2:	1ac0      	subs	r0, r0, r3
    8ec4:	4152      	adcs	r2, r2
    8ec6:	0a43      	lsrs	r3, r0, #9
    8ec8:	428b      	cmp	r3, r1
    8eca:	d301      	bcc.n	8ed0 <__divsi3+0x94>
    8ecc:	024b      	lsls	r3, r1, #9
    8ece:	1ac0      	subs	r0, r0, r3
    8ed0:	4152      	adcs	r2, r2
    8ed2:	0a03      	lsrs	r3, r0, #8
    8ed4:	428b      	cmp	r3, r1
    8ed6:	d301      	bcc.n	8edc <__divsi3+0xa0>
    8ed8:	020b      	lsls	r3, r1, #8
    8eda:	1ac0      	subs	r0, r0, r3
    8edc:	4152      	adcs	r2, r2
    8ede:	d2cd      	bcs.n	8e7c <__divsi3+0x40>
    8ee0:	09c3      	lsrs	r3, r0, #7
    8ee2:	428b      	cmp	r3, r1
    8ee4:	d301      	bcc.n	8eea <__divsi3+0xae>
    8ee6:	01cb      	lsls	r3, r1, #7
    8ee8:	1ac0      	subs	r0, r0, r3
    8eea:	4152      	adcs	r2, r2
    8eec:	0983      	lsrs	r3, r0, #6
    8eee:	428b      	cmp	r3, r1
    8ef0:	d301      	bcc.n	8ef6 <__divsi3+0xba>
    8ef2:	018b      	lsls	r3, r1, #6
    8ef4:	1ac0      	subs	r0, r0, r3
    8ef6:	4152      	adcs	r2, r2
    8ef8:	0943      	lsrs	r3, r0, #5
    8efa:	428b      	cmp	r3, r1
    8efc:	d301      	bcc.n	8f02 <__divsi3+0xc6>
    8efe:	014b      	lsls	r3, r1, #5
    8f00:	1ac0      	subs	r0, r0, r3
    8f02:	4152      	adcs	r2, r2
    8f04:	0903      	lsrs	r3, r0, #4
    8f06:	428b      	cmp	r3, r1
    8f08:	d301      	bcc.n	8f0e <__divsi3+0xd2>
    8f0a:	010b      	lsls	r3, r1, #4
    8f0c:	1ac0      	subs	r0, r0, r3
    8f0e:	4152      	adcs	r2, r2
    8f10:	08c3      	lsrs	r3, r0, #3
    8f12:	428b      	cmp	r3, r1
    8f14:	d301      	bcc.n	8f1a <__divsi3+0xde>
    8f16:	00cb      	lsls	r3, r1, #3
    8f18:	1ac0      	subs	r0, r0, r3
    8f1a:	4152      	adcs	r2, r2
    8f1c:	0883      	lsrs	r3, r0, #2
    8f1e:	428b      	cmp	r3, r1
    8f20:	d301      	bcc.n	8f26 <__divsi3+0xea>
    8f22:	008b      	lsls	r3, r1, #2
    8f24:	1ac0      	subs	r0, r0, r3
    8f26:	4152      	adcs	r2, r2
    8f28:	0843      	lsrs	r3, r0, #1
    8f2a:	428b      	cmp	r3, r1
    8f2c:	d301      	bcc.n	8f32 <__divsi3+0xf6>
    8f2e:	004b      	lsls	r3, r1, #1
    8f30:	1ac0      	subs	r0, r0, r3
    8f32:	4152      	adcs	r2, r2
    8f34:	1a41      	subs	r1, r0, r1
    8f36:	d200      	bcs.n	8f3a <__divsi3+0xfe>
    8f38:	4601      	mov	r1, r0
    8f3a:	4152      	adcs	r2, r2
    8f3c:	4610      	mov	r0, r2
    8f3e:	4770      	bx	lr
    8f40:	e05d      	b.n	8ffe <__divsi3+0x1c2>
    8f42:	0fca      	lsrs	r2, r1, #31
    8f44:	d000      	beq.n	8f48 <__divsi3+0x10c>
    8f46:	4249      	negs	r1, r1
    8f48:	1003      	asrs	r3, r0, #32
    8f4a:	d300      	bcc.n	8f4e <__divsi3+0x112>
    8f4c:	4240      	negs	r0, r0
    8f4e:	4053      	eors	r3, r2
    8f50:	2200      	movs	r2, #0
    8f52:	469c      	mov	ip, r3
    8f54:	0903      	lsrs	r3, r0, #4
    8f56:	428b      	cmp	r3, r1
    8f58:	d32d      	bcc.n	8fb6 <__divsi3+0x17a>
    8f5a:	0a03      	lsrs	r3, r0, #8
    8f5c:	428b      	cmp	r3, r1
    8f5e:	d312      	bcc.n	8f86 <__divsi3+0x14a>
    8f60:	22fc      	movs	r2, #252	; 0xfc
    8f62:	0189      	lsls	r1, r1, #6
    8f64:	ba12      	rev	r2, r2
    8f66:	0a03      	lsrs	r3, r0, #8
    8f68:	428b      	cmp	r3, r1
    8f6a:	d30c      	bcc.n	8f86 <__divsi3+0x14a>
    8f6c:	0189      	lsls	r1, r1, #6
    8f6e:	1192      	asrs	r2, r2, #6
    8f70:	428b      	cmp	r3, r1
    8f72:	d308      	bcc.n	8f86 <__divsi3+0x14a>
    8f74:	0189      	lsls	r1, r1, #6
    8f76:	1192      	asrs	r2, r2, #6
    8f78:	428b      	cmp	r3, r1
    8f7a:	d304      	bcc.n	8f86 <__divsi3+0x14a>
    8f7c:	0189      	lsls	r1, r1, #6
    8f7e:	d03a      	beq.n	8ff6 <__divsi3+0x1ba>
    8f80:	1192      	asrs	r2, r2, #6
    8f82:	e000      	b.n	8f86 <__divsi3+0x14a>
    8f84:	0989      	lsrs	r1, r1, #6
    8f86:	09c3      	lsrs	r3, r0, #7
    8f88:	428b      	cmp	r3, r1
    8f8a:	d301      	bcc.n	8f90 <__divsi3+0x154>
    8f8c:	01cb      	lsls	r3, r1, #7
    8f8e:	1ac0      	subs	r0, r0, r3
    8f90:	4152      	adcs	r2, r2
    8f92:	0983      	lsrs	r3, r0, #6
    8f94:	428b      	cmp	r3, r1
    8f96:	d301      	bcc.n	8f9c <__divsi3+0x160>
    8f98:	018b      	lsls	r3, r1, #6
    8f9a:	1ac0      	subs	r0, r0, r3
    8f9c:	4152      	adcs	r2, r2
    8f9e:	0943      	lsrs	r3, r0, #5
    8fa0:	428b      	cmp	r3, r1
    8fa2:	d301      	bcc.n	8fa8 <__divsi3+0x16c>
    8fa4:	014b      	lsls	r3, r1, #5
    8fa6:	1ac0      	subs	r0, r0, r3
    8fa8:	4152      	adcs	r2, r2
    8faa:	0903      	lsrs	r3, r0, #4
    8fac:	428b      	cmp	r3, r1
    8fae:	d301      	bcc.n	8fb4 <__divsi3+0x178>
    8fb0:	010b      	lsls	r3, r1, #4
    8fb2:	1ac0      	subs	r0, r0, r3
    8fb4:	4152      	adcs	r2, r2
    8fb6:	08c3      	lsrs	r3, r0, #3
    8fb8:	428b      	cmp	r3, r1
    8fba:	d301      	bcc.n	8fc0 <__divsi3+0x184>
    8fbc:	00cb      	lsls	r3, r1, #3
    8fbe:	1ac0      	subs	r0, r0, r3
    8fc0:	4152      	adcs	r2, r2
    8fc2:	0883      	lsrs	r3, r0, #2
    8fc4:	428b      	cmp	r3, r1
    8fc6:	d301      	bcc.n	8fcc <__divsi3+0x190>
    8fc8:	008b      	lsls	r3, r1, #2
    8fca:	1ac0      	subs	r0, r0, r3
    8fcc:	4152      	adcs	r2, r2
    8fce:	d2d9      	bcs.n	8f84 <__divsi3+0x148>
    8fd0:	0843      	lsrs	r3, r0, #1
    8fd2:	428b      	cmp	r3, r1
    8fd4:	d301      	bcc.n	8fda <__divsi3+0x19e>
    8fd6:	004b      	lsls	r3, r1, #1
    8fd8:	1ac0      	subs	r0, r0, r3
    8fda:	4152      	adcs	r2, r2
    8fdc:	1a41      	subs	r1, r0, r1
    8fde:	d200      	bcs.n	8fe2 <__divsi3+0x1a6>
    8fe0:	4601      	mov	r1, r0
    8fe2:	4663      	mov	r3, ip
    8fe4:	4152      	adcs	r2, r2
    8fe6:	105b      	asrs	r3, r3, #1
    8fe8:	4610      	mov	r0, r2
    8fea:	d301      	bcc.n	8ff0 <__divsi3+0x1b4>
    8fec:	4240      	negs	r0, r0
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d500      	bpl.n	8ff4 <__divsi3+0x1b8>
    8ff2:	4249      	negs	r1, r1
    8ff4:	4770      	bx	lr
    8ff6:	4663      	mov	r3, ip
    8ff8:	105b      	asrs	r3, r3, #1
    8ffa:	d300      	bcc.n	8ffe <__divsi3+0x1c2>
    8ffc:	4240      	negs	r0, r0
    8ffe:	b501      	push	{r0, lr}
    9000:	2000      	movs	r0, #0
    9002:	f000 f805 	bl	9010 <__aeabi_idiv0>
    9006:	bd02      	pop	{r1, pc}

00009008 <__aeabi_idivmod>:
    9008:	2900      	cmp	r1, #0
    900a:	d0f8      	beq.n	8ffe <__divsi3+0x1c2>
    900c:	e716      	b.n	8e3c <__divsi3>
    900e:	4770      	bx	lr

00009010 <__aeabi_idiv0>:
    9010:	4770      	bx	lr
    9012:	46c0      	nop			; (mov r8, r8)

00009014 <__clzsi2>:
    9014:	211c      	movs	r1, #28
    9016:	2301      	movs	r3, #1
    9018:	041b      	lsls	r3, r3, #16
    901a:	4298      	cmp	r0, r3
    901c:	d301      	bcc.n	9022 <__clzsi2+0xe>
    901e:	0c00      	lsrs	r0, r0, #16
    9020:	3910      	subs	r1, #16
    9022:	0a1b      	lsrs	r3, r3, #8
    9024:	4298      	cmp	r0, r3
    9026:	d301      	bcc.n	902c <__clzsi2+0x18>
    9028:	0a00      	lsrs	r0, r0, #8
    902a:	3908      	subs	r1, #8
    902c:	091b      	lsrs	r3, r3, #4
    902e:	4298      	cmp	r0, r3
    9030:	d301      	bcc.n	9036 <__clzsi2+0x22>
    9032:	0900      	lsrs	r0, r0, #4
    9034:	3904      	subs	r1, #4
    9036:	a202      	add	r2, pc, #8	; (adr r2, 9040 <__clzsi2+0x2c>)
    9038:	5c10      	ldrb	r0, [r2, r0]
    903a:	1840      	adds	r0, r0, r1
    903c:	4770      	bx	lr
    903e:	46c0      	nop			; (mov r8, r8)
    9040:	02020304 	.word	0x02020304
    9044:	01010101 	.word	0x01010101
	...

00009050 <__ctzsi2>:
    9050:	4241      	negs	r1, r0
    9052:	4008      	ands	r0, r1
    9054:	211c      	movs	r1, #28
    9056:	2301      	movs	r3, #1
    9058:	041b      	lsls	r3, r3, #16
    905a:	4298      	cmp	r0, r3
    905c:	d301      	bcc.n	9062 <__ctzsi2+0x12>
    905e:	0c00      	lsrs	r0, r0, #16
    9060:	3910      	subs	r1, #16
    9062:	0a1b      	lsrs	r3, r3, #8
    9064:	4298      	cmp	r0, r3
    9066:	d301      	bcc.n	906c <__ctzsi2+0x1c>
    9068:	0a00      	lsrs	r0, r0, #8
    906a:	3908      	subs	r1, #8
    906c:	091b      	lsrs	r3, r3, #4
    906e:	4298      	cmp	r0, r3
    9070:	d301      	bcc.n	9076 <__ctzsi2+0x26>
    9072:	0900      	lsrs	r0, r0, #4
    9074:	3904      	subs	r1, #4
    9076:	a202      	add	r2, pc, #8	; (adr r2, 9080 <__ctzsi2+0x30>)
    9078:	5c10      	ldrb	r0, [r2, r0]
    907a:	1a40      	subs	r0, r0, r1
    907c:	4770      	bx	lr
    907e:	46c0      	nop			; (mov r8, r8)
    9080:	1d1d1c1b 	.word	0x1d1d1c1b
    9084:	1e1e1e1e 	.word	0x1e1e1e1e
    9088:	1f1f1f1f 	.word	0x1f1f1f1f
    908c:	1f1f1f1f 	.word	0x1f1f1f1f

00009090 <__aeabi_uldivmod>:
    9090:	2b00      	cmp	r3, #0
    9092:	d111      	bne.n	90b8 <__aeabi_uldivmod+0x28>
    9094:	2a00      	cmp	r2, #0
    9096:	d10f      	bne.n	90b8 <__aeabi_uldivmod+0x28>
    9098:	2900      	cmp	r1, #0
    909a:	d100      	bne.n	909e <__aeabi_uldivmod+0xe>
    909c:	2800      	cmp	r0, #0
    909e:	d002      	beq.n	90a6 <__aeabi_uldivmod+0x16>
    90a0:	2100      	movs	r1, #0
    90a2:	43c9      	mvns	r1, r1
    90a4:	1c08      	adds	r0, r1, #0
    90a6:	b407      	push	{r0, r1, r2}
    90a8:	4802      	ldr	r0, [pc, #8]	; (90b4 <__aeabi_uldivmod+0x24>)
    90aa:	a102      	add	r1, pc, #8	; (adr r1, 90b4 <__aeabi_uldivmod+0x24>)
    90ac:	1840      	adds	r0, r0, r1
    90ae:	9002      	str	r0, [sp, #8]
    90b0:	bd03      	pop	{r0, r1, pc}
    90b2:	46c0      	nop			; (mov r8, r8)
    90b4:	ffffff5d 	.word	0xffffff5d
    90b8:	b403      	push	{r0, r1}
    90ba:	4668      	mov	r0, sp
    90bc:	b501      	push	{r0, lr}
    90be:	9802      	ldr	r0, [sp, #8]
    90c0:	f000 f830 	bl	9124 <__udivmoddi4>
    90c4:	9b01      	ldr	r3, [sp, #4]
    90c6:	469e      	mov	lr, r3
    90c8:	b002      	add	sp, #8
    90ca:	bc0c      	pop	{r2, r3}
    90cc:	4770      	bx	lr
    90ce:	46c0      	nop			; (mov r8, r8)

000090d0 <__aeabi_lmul>:
    90d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90d2:	46ce      	mov	lr, r9
    90d4:	4647      	mov	r7, r8
    90d6:	0415      	lsls	r5, r2, #16
    90d8:	0c2d      	lsrs	r5, r5, #16
    90da:	002e      	movs	r6, r5
    90dc:	b580      	push	{r7, lr}
    90de:	0407      	lsls	r7, r0, #16
    90e0:	0c14      	lsrs	r4, r2, #16
    90e2:	0c3f      	lsrs	r7, r7, #16
    90e4:	4699      	mov	r9, r3
    90e6:	0c03      	lsrs	r3, r0, #16
    90e8:	437e      	muls	r6, r7
    90ea:	435d      	muls	r5, r3
    90ec:	4367      	muls	r7, r4
    90ee:	4363      	muls	r3, r4
    90f0:	197f      	adds	r7, r7, r5
    90f2:	0c34      	lsrs	r4, r6, #16
    90f4:	19e4      	adds	r4, r4, r7
    90f6:	469c      	mov	ip, r3
    90f8:	42a5      	cmp	r5, r4
    90fa:	d903      	bls.n	9104 <__aeabi_lmul+0x34>
    90fc:	2380      	movs	r3, #128	; 0x80
    90fe:	025b      	lsls	r3, r3, #9
    9100:	4698      	mov	r8, r3
    9102:	44c4      	add	ip, r8
    9104:	464b      	mov	r3, r9
    9106:	4351      	muls	r1, r2
    9108:	4343      	muls	r3, r0
    910a:	0436      	lsls	r6, r6, #16
    910c:	0c36      	lsrs	r6, r6, #16
    910e:	0c25      	lsrs	r5, r4, #16
    9110:	0424      	lsls	r4, r4, #16
    9112:	4465      	add	r5, ip
    9114:	19a4      	adds	r4, r4, r6
    9116:	1859      	adds	r1, r3, r1
    9118:	1949      	adds	r1, r1, r5
    911a:	0020      	movs	r0, r4
    911c:	bc0c      	pop	{r2, r3}
    911e:	4690      	mov	r8, r2
    9120:	4699      	mov	r9, r3
    9122:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009124 <__udivmoddi4>:
    9124:	b5f0      	push	{r4, r5, r6, r7, lr}
    9126:	4657      	mov	r7, sl
    9128:	464e      	mov	r6, r9
    912a:	4645      	mov	r5, r8
    912c:	46de      	mov	lr, fp
    912e:	b5e0      	push	{r5, r6, r7, lr}
    9130:	0004      	movs	r4, r0
    9132:	b083      	sub	sp, #12
    9134:	000d      	movs	r5, r1
    9136:	4692      	mov	sl, r2
    9138:	4699      	mov	r9, r3
    913a:	428b      	cmp	r3, r1
    913c:	d82f      	bhi.n	919e <__udivmoddi4+0x7a>
    913e:	d02c      	beq.n	919a <__udivmoddi4+0x76>
    9140:	4649      	mov	r1, r9
    9142:	4650      	mov	r0, sl
    9144:	f000 f8ae 	bl	92a4 <__clzdi2>
    9148:	0029      	movs	r1, r5
    914a:	0006      	movs	r6, r0
    914c:	0020      	movs	r0, r4
    914e:	f000 f8a9 	bl	92a4 <__clzdi2>
    9152:	1a33      	subs	r3, r6, r0
    9154:	4698      	mov	r8, r3
    9156:	3b20      	subs	r3, #32
    9158:	469b      	mov	fp, r3
    915a:	d500      	bpl.n	915e <__udivmoddi4+0x3a>
    915c:	e074      	b.n	9248 <__udivmoddi4+0x124>
    915e:	4653      	mov	r3, sl
    9160:	465a      	mov	r2, fp
    9162:	4093      	lsls	r3, r2
    9164:	001f      	movs	r7, r3
    9166:	4653      	mov	r3, sl
    9168:	4642      	mov	r2, r8
    916a:	4093      	lsls	r3, r2
    916c:	001e      	movs	r6, r3
    916e:	42af      	cmp	r7, r5
    9170:	d829      	bhi.n	91c6 <__udivmoddi4+0xa2>
    9172:	d026      	beq.n	91c2 <__udivmoddi4+0x9e>
    9174:	465b      	mov	r3, fp
    9176:	1ba4      	subs	r4, r4, r6
    9178:	41bd      	sbcs	r5, r7
    917a:	2b00      	cmp	r3, #0
    917c:	da00      	bge.n	9180 <__udivmoddi4+0x5c>
    917e:	e079      	b.n	9274 <__udivmoddi4+0x150>
    9180:	2200      	movs	r2, #0
    9182:	2300      	movs	r3, #0
    9184:	9200      	str	r2, [sp, #0]
    9186:	9301      	str	r3, [sp, #4]
    9188:	2301      	movs	r3, #1
    918a:	465a      	mov	r2, fp
    918c:	4093      	lsls	r3, r2
    918e:	9301      	str	r3, [sp, #4]
    9190:	2301      	movs	r3, #1
    9192:	4642      	mov	r2, r8
    9194:	4093      	lsls	r3, r2
    9196:	9300      	str	r3, [sp, #0]
    9198:	e019      	b.n	91ce <__udivmoddi4+0xaa>
    919a:	4282      	cmp	r2, r0
    919c:	d9d0      	bls.n	9140 <__udivmoddi4+0x1c>
    919e:	2200      	movs	r2, #0
    91a0:	2300      	movs	r3, #0
    91a2:	9200      	str	r2, [sp, #0]
    91a4:	9301      	str	r3, [sp, #4]
    91a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    91a8:	2b00      	cmp	r3, #0
    91aa:	d001      	beq.n	91b0 <__udivmoddi4+0x8c>
    91ac:	601c      	str	r4, [r3, #0]
    91ae:	605d      	str	r5, [r3, #4]
    91b0:	9800      	ldr	r0, [sp, #0]
    91b2:	9901      	ldr	r1, [sp, #4]
    91b4:	b003      	add	sp, #12
    91b6:	bc3c      	pop	{r2, r3, r4, r5}
    91b8:	4690      	mov	r8, r2
    91ba:	4699      	mov	r9, r3
    91bc:	46a2      	mov	sl, r4
    91be:	46ab      	mov	fp, r5
    91c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91c2:	42a3      	cmp	r3, r4
    91c4:	d9d6      	bls.n	9174 <__udivmoddi4+0x50>
    91c6:	2200      	movs	r2, #0
    91c8:	2300      	movs	r3, #0
    91ca:	9200      	str	r2, [sp, #0]
    91cc:	9301      	str	r3, [sp, #4]
    91ce:	4643      	mov	r3, r8
    91d0:	2b00      	cmp	r3, #0
    91d2:	d0e8      	beq.n	91a6 <__udivmoddi4+0x82>
    91d4:	07fb      	lsls	r3, r7, #31
    91d6:	0872      	lsrs	r2, r6, #1
    91d8:	431a      	orrs	r2, r3
    91da:	4646      	mov	r6, r8
    91dc:	087b      	lsrs	r3, r7, #1
    91de:	e00e      	b.n	91fe <__udivmoddi4+0xda>
    91e0:	42ab      	cmp	r3, r5
    91e2:	d101      	bne.n	91e8 <__udivmoddi4+0xc4>
    91e4:	42a2      	cmp	r2, r4
    91e6:	d80c      	bhi.n	9202 <__udivmoddi4+0xde>
    91e8:	1aa4      	subs	r4, r4, r2
    91ea:	419d      	sbcs	r5, r3
    91ec:	2001      	movs	r0, #1
    91ee:	1924      	adds	r4, r4, r4
    91f0:	416d      	adcs	r5, r5
    91f2:	2100      	movs	r1, #0
    91f4:	3e01      	subs	r6, #1
    91f6:	1824      	adds	r4, r4, r0
    91f8:	414d      	adcs	r5, r1
    91fa:	2e00      	cmp	r6, #0
    91fc:	d006      	beq.n	920c <__udivmoddi4+0xe8>
    91fe:	42ab      	cmp	r3, r5
    9200:	d9ee      	bls.n	91e0 <__udivmoddi4+0xbc>
    9202:	3e01      	subs	r6, #1
    9204:	1924      	adds	r4, r4, r4
    9206:	416d      	adcs	r5, r5
    9208:	2e00      	cmp	r6, #0
    920a:	d1f8      	bne.n	91fe <__udivmoddi4+0xda>
    920c:	465b      	mov	r3, fp
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	9901      	ldr	r1, [sp, #4]
    9212:	1900      	adds	r0, r0, r4
    9214:	4169      	adcs	r1, r5
    9216:	2b00      	cmp	r3, #0
    9218:	db22      	blt.n	9260 <__udivmoddi4+0x13c>
    921a:	002b      	movs	r3, r5
    921c:	465a      	mov	r2, fp
    921e:	40d3      	lsrs	r3, r2
    9220:	002a      	movs	r2, r5
    9222:	4644      	mov	r4, r8
    9224:	40e2      	lsrs	r2, r4
    9226:	001c      	movs	r4, r3
    9228:	465b      	mov	r3, fp
    922a:	0015      	movs	r5, r2
    922c:	2b00      	cmp	r3, #0
    922e:	db2c      	blt.n	928a <__udivmoddi4+0x166>
    9230:	0026      	movs	r6, r4
    9232:	409e      	lsls	r6, r3
    9234:	0033      	movs	r3, r6
    9236:	0026      	movs	r6, r4
    9238:	4647      	mov	r7, r8
    923a:	40be      	lsls	r6, r7
    923c:	0032      	movs	r2, r6
    923e:	1a80      	subs	r0, r0, r2
    9240:	4199      	sbcs	r1, r3
    9242:	9000      	str	r0, [sp, #0]
    9244:	9101      	str	r1, [sp, #4]
    9246:	e7ae      	b.n	91a6 <__udivmoddi4+0x82>
    9248:	4642      	mov	r2, r8
    924a:	2320      	movs	r3, #32
    924c:	1a9b      	subs	r3, r3, r2
    924e:	4652      	mov	r2, sl
    9250:	40da      	lsrs	r2, r3
    9252:	4641      	mov	r1, r8
    9254:	0013      	movs	r3, r2
    9256:	464a      	mov	r2, r9
    9258:	408a      	lsls	r2, r1
    925a:	0017      	movs	r7, r2
    925c:	431f      	orrs	r7, r3
    925e:	e782      	b.n	9166 <__udivmoddi4+0x42>
    9260:	4642      	mov	r2, r8
    9262:	2320      	movs	r3, #32
    9264:	1a9b      	subs	r3, r3, r2
    9266:	002a      	movs	r2, r5
    9268:	4646      	mov	r6, r8
    926a:	409a      	lsls	r2, r3
    926c:	0023      	movs	r3, r4
    926e:	40f3      	lsrs	r3, r6
    9270:	4313      	orrs	r3, r2
    9272:	e7d5      	b.n	9220 <__udivmoddi4+0xfc>
    9274:	4642      	mov	r2, r8
    9276:	2320      	movs	r3, #32
    9278:	2100      	movs	r1, #0
    927a:	1a9b      	subs	r3, r3, r2
    927c:	2200      	movs	r2, #0
    927e:	9100      	str	r1, [sp, #0]
    9280:	9201      	str	r2, [sp, #4]
    9282:	2201      	movs	r2, #1
    9284:	40da      	lsrs	r2, r3
    9286:	9201      	str	r2, [sp, #4]
    9288:	e782      	b.n	9190 <__udivmoddi4+0x6c>
    928a:	4642      	mov	r2, r8
    928c:	2320      	movs	r3, #32
    928e:	0026      	movs	r6, r4
    9290:	1a9b      	subs	r3, r3, r2
    9292:	40de      	lsrs	r6, r3
    9294:	002f      	movs	r7, r5
    9296:	46b4      	mov	ip, r6
    9298:	4097      	lsls	r7, r2
    929a:	4666      	mov	r6, ip
    929c:	003b      	movs	r3, r7
    929e:	4333      	orrs	r3, r6
    92a0:	e7c9      	b.n	9236 <__udivmoddi4+0x112>
    92a2:	46c0      	nop			; (mov r8, r8)

000092a4 <__clzdi2>:
    92a4:	b510      	push	{r4, lr}
    92a6:	2900      	cmp	r1, #0
    92a8:	d103      	bne.n	92b2 <__clzdi2+0xe>
    92aa:	f7ff feb3 	bl	9014 <__clzsi2>
    92ae:	3020      	adds	r0, #32
    92b0:	e002      	b.n	92b8 <__clzdi2+0x14>
    92b2:	1c08      	adds	r0, r1, #0
    92b4:	f7ff feae 	bl	9014 <__clzsi2>
    92b8:	bd10      	pop	{r4, pc}
    92ba:	46c0      	nop			; (mov r8, r8)

000092bc <__libc_init_array>:
    92bc:	b570      	push	{r4, r5, r6, lr}
    92be:	2600      	movs	r6, #0
    92c0:	4d0c      	ldr	r5, [pc, #48]	; (92f4 <__libc_init_array+0x38>)
    92c2:	4c0d      	ldr	r4, [pc, #52]	; (92f8 <__libc_init_array+0x3c>)
    92c4:	1b64      	subs	r4, r4, r5
    92c6:	10a4      	asrs	r4, r4, #2
    92c8:	42a6      	cmp	r6, r4
    92ca:	d109      	bne.n	92e0 <__libc_init_array+0x24>
    92cc:	2600      	movs	r6, #0
    92ce:	f001 fd01 	bl	acd4 <_init>
    92d2:	4d0a      	ldr	r5, [pc, #40]	; (92fc <__libc_init_array+0x40>)
    92d4:	4c0a      	ldr	r4, [pc, #40]	; (9300 <__libc_init_array+0x44>)
    92d6:	1b64      	subs	r4, r4, r5
    92d8:	10a4      	asrs	r4, r4, #2
    92da:	42a6      	cmp	r6, r4
    92dc:	d105      	bne.n	92ea <__libc_init_array+0x2e>
    92de:	bd70      	pop	{r4, r5, r6, pc}
    92e0:	00b3      	lsls	r3, r6, #2
    92e2:	58eb      	ldr	r3, [r5, r3]
    92e4:	4798      	blx	r3
    92e6:	3601      	adds	r6, #1
    92e8:	e7ee      	b.n	92c8 <__libc_init_array+0xc>
    92ea:	00b3      	lsls	r3, r6, #2
    92ec:	58eb      	ldr	r3, [r5, r3]
    92ee:	4798      	blx	r3
    92f0:	3601      	adds	r6, #1
    92f2:	e7f2      	b.n	92da <__libc_init_array+0x1e>
    92f4:	0000ace0 	.word	0x0000ace0
    92f8:	0000ace0 	.word	0x0000ace0
    92fc:	0000ace0 	.word	0x0000ace0
    9300:	0000ace4 	.word	0x0000ace4

00009304 <memcpy>:
    9304:	2300      	movs	r3, #0
    9306:	b510      	push	{r4, lr}
    9308:	429a      	cmp	r2, r3
    930a:	d100      	bne.n	930e <memcpy+0xa>
    930c:	bd10      	pop	{r4, pc}
    930e:	5ccc      	ldrb	r4, [r1, r3]
    9310:	54c4      	strb	r4, [r0, r3]
    9312:	3301      	adds	r3, #1
    9314:	e7f8      	b.n	9308 <memcpy+0x4>

00009316 <memset>:
    9316:	0003      	movs	r3, r0
    9318:	1882      	adds	r2, r0, r2
    931a:	4293      	cmp	r3, r2
    931c:	d100      	bne.n	9320 <memset+0xa>
    931e:	4770      	bx	lr
    9320:	7019      	strb	r1, [r3, #0]
    9322:	3301      	adds	r3, #1
    9324:	e7f9      	b.n	931a <memset+0x4>
	...

00009328 <iprintf>:
    9328:	b40f      	push	{r0, r1, r2, r3}
    932a:	4b0b      	ldr	r3, [pc, #44]	; (9358 <iprintf+0x30>)
    932c:	b513      	push	{r0, r1, r4, lr}
    932e:	681c      	ldr	r4, [r3, #0]
    9330:	2c00      	cmp	r4, #0
    9332:	d005      	beq.n	9340 <iprintf+0x18>
    9334:	69a3      	ldr	r3, [r4, #24]
    9336:	2b00      	cmp	r3, #0
    9338:	d102      	bne.n	9340 <iprintf+0x18>
    933a:	0020      	movs	r0, r4
    933c:	f000 f9bc 	bl	96b8 <__sinit>
    9340:	ab05      	add	r3, sp, #20
    9342:	9a04      	ldr	r2, [sp, #16]
    9344:	68a1      	ldr	r1, [r4, #8]
    9346:	0020      	movs	r0, r4
    9348:	9301      	str	r3, [sp, #4]
    934a:	f000 fb91 	bl	9a70 <_vfiprintf_r>
    934e:	bc16      	pop	{r1, r2, r4}
    9350:	bc08      	pop	{r3}
    9352:	b004      	add	sp, #16
    9354:	4718      	bx	r3
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	20000128 	.word	0x20000128

0000935c <setbuf>:
    935c:	424a      	negs	r2, r1
    935e:	414a      	adcs	r2, r1
    9360:	2380      	movs	r3, #128	; 0x80
    9362:	b510      	push	{r4, lr}
    9364:	0052      	lsls	r2, r2, #1
    9366:	00db      	lsls	r3, r3, #3
    9368:	f000 f802 	bl	9370 <setvbuf>
    936c:	bd10      	pop	{r4, pc}
	...

00009370 <setvbuf>:
    9370:	b5f0      	push	{r4, r5, r6, r7, lr}
    9372:	001d      	movs	r5, r3
    9374:	4b4f      	ldr	r3, [pc, #316]	; (94b4 <setvbuf+0x144>)
    9376:	b085      	sub	sp, #20
    9378:	681e      	ldr	r6, [r3, #0]
    937a:	0004      	movs	r4, r0
    937c:	000f      	movs	r7, r1
    937e:	9200      	str	r2, [sp, #0]
    9380:	2e00      	cmp	r6, #0
    9382:	d005      	beq.n	9390 <setvbuf+0x20>
    9384:	69b3      	ldr	r3, [r6, #24]
    9386:	2b00      	cmp	r3, #0
    9388:	d102      	bne.n	9390 <setvbuf+0x20>
    938a:	0030      	movs	r0, r6
    938c:	f000 f994 	bl	96b8 <__sinit>
    9390:	4b49      	ldr	r3, [pc, #292]	; (94b8 <setvbuf+0x148>)
    9392:	429c      	cmp	r4, r3
    9394:	d150      	bne.n	9438 <setvbuf+0xc8>
    9396:	6874      	ldr	r4, [r6, #4]
    9398:	9b00      	ldr	r3, [sp, #0]
    939a:	2b02      	cmp	r3, #2
    939c:	d005      	beq.n	93aa <setvbuf+0x3a>
    939e:	2b01      	cmp	r3, #1
    93a0:	d900      	bls.n	93a4 <setvbuf+0x34>
    93a2:	e084      	b.n	94ae <setvbuf+0x13e>
    93a4:	2d00      	cmp	r5, #0
    93a6:	da00      	bge.n	93aa <setvbuf+0x3a>
    93a8:	e081      	b.n	94ae <setvbuf+0x13e>
    93aa:	0021      	movs	r1, r4
    93ac:	0030      	movs	r0, r6
    93ae:	f000 f915 	bl	95dc <_fflush_r>
    93b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    93b4:	2900      	cmp	r1, #0
    93b6:	d008      	beq.n	93ca <setvbuf+0x5a>
    93b8:	0023      	movs	r3, r4
    93ba:	3344      	adds	r3, #68	; 0x44
    93bc:	4299      	cmp	r1, r3
    93be:	d002      	beq.n	93c6 <setvbuf+0x56>
    93c0:	0030      	movs	r0, r6
    93c2:	f000 fa85 	bl	98d0 <_free_r>
    93c6:	2300      	movs	r3, #0
    93c8:	6363      	str	r3, [r4, #52]	; 0x34
    93ca:	2300      	movs	r3, #0
    93cc:	61a3      	str	r3, [r4, #24]
    93ce:	6063      	str	r3, [r4, #4]
    93d0:	89a3      	ldrh	r3, [r4, #12]
    93d2:	061b      	lsls	r3, r3, #24
    93d4:	d503      	bpl.n	93de <setvbuf+0x6e>
    93d6:	6921      	ldr	r1, [r4, #16]
    93d8:	0030      	movs	r0, r6
    93da:	f000 fa79 	bl	98d0 <_free_r>
    93de:	89a3      	ldrh	r3, [r4, #12]
    93e0:	4a36      	ldr	r2, [pc, #216]	; (94bc <setvbuf+0x14c>)
    93e2:	4013      	ands	r3, r2
    93e4:	81a3      	strh	r3, [r4, #12]
    93e6:	9b00      	ldr	r3, [sp, #0]
    93e8:	2b02      	cmp	r3, #2
    93ea:	d05a      	beq.n	94a2 <setvbuf+0x132>
    93ec:	ab03      	add	r3, sp, #12
    93ee:	aa02      	add	r2, sp, #8
    93f0:	0021      	movs	r1, r4
    93f2:	0030      	movs	r0, r6
    93f4:	f000 f9f6 	bl	97e4 <__swhatbuf_r>
    93f8:	89a3      	ldrh	r3, [r4, #12]
    93fa:	4318      	orrs	r0, r3
    93fc:	81a0      	strh	r0, [r4, #12]
    93fe:	2d00      	cmp	r5, #0
    9400:	d124      	bne.n	944c <setvbuf+0xdc>
    9402:	9d02      	ldr	r5, [sp, #8]
    9404:	0028      	movs	r0, r5
    9406:	f000 fa59 	bl	98bc <malloc>
    940a:	9501      	str	r5, [sp, #4]
    940c:	1e07      	subs	r7, r0, #0
    940e:	d142      	bne.n	9496 <setvbuf+0x126>
    9410:	9b02      	ldr	r3, [sp, #8]
    9412:	9301      	str	r3, [sp, #4]
    9414:	42ab      	cmp	r3, r5
    9416:	d139      	bne.n	948c <setvbuf+0x11c>
    9418:	2001      	movs	r0, #1
    941a:	4240      	negs	r0, r0
    941c:	2302      	movs	r3, #2
    941e:	89a2      	ldrh	r2, [r4, #12]
    9420:	4313      	orrs	r3, r2
    9422:	81a3      	strh	r3, [r4, #12]
    9424:	2300      	movs	r3, #0
    9426:	60a3      	str	r3, [r4, #8]
    9428:	0023      	movs	r3, r4
    942a:	3347      	adds	r3, #71	; 0x47
    942c:	6023      	str	r3, [r4, #0]
    942e:	6123      	str	r3, [r4, #16]
    9430:	2301      	movs	r3, #1
    9432:	6163      	str	r3, [r4, #20]
    9434:	b005      	add	sp, #20
    9436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9438:	4b21      	ldr	r3, [pc, #132]	; (94c0 <setvbuf+0x150>)
    943a:	429c      	cmp	r4, r3
    943c:	d101      	bne.n	9442 <setvbuf+0xd2>
    943e:	68b4      	ldr	r4, [r6, #8]
    9440:	e7aa      	b.n	9398 <setvbuf+0x28>
    9442:	4b20      	ldr	r3, [pc, #128]	; (94c4 <setvbuf+0x154>)
    9444:	429c      	cmp	r4, r3
    9446:	d1a7      	bne.n	9398 <setvbuf+0x28>
    9448:	68f4      	ldr	r4, [r6, #12]
    944a:	e7a5      	b.n	9398 <setvbuf+0x28>
    944c:	2f00      	cmp	r7, #0
    944e:	d0d9      	beq.n	9404 <setvbuf+0x94>
    9450:	69b3      	ldr	r3, [r6, #24]
    9452:	2b00      	cmp	r3, #0
    9454:	d102      	bne.n	945c <setvbuf+0xec>
    9456:	0030      	movs	r0, r6
    9458:	f000 f92e 	bl	96b8 <__sinit>
    945c:	9b00      	ldr	r3, [sp, #0]
    945e:	2b01      	cmp	r3, #1
    9460:	d103      	bne.n	946a <setvbuf+0xfa>
    9462:	89a3      	ldrh	r3, [r4, #12]
    9464:	9a00      	ldr	r2, [sp, #0]
    9466:	431a      	orrs	r2, r3
    9468:	81a2      	strh	r2, [r4, #12]
    946a:	2008      	movs	r0, #8
    946c:	89a3      	ldrh	r3, [r4, #12]
    946e:	6027      	str	r7, [r4, #0]
    9470:	6127      	str	r7, [r4, #16]
    9472:	6165      	str	r5, [r4, #20]
    9474:	4018      	ands	r0, r3
    9476:	d018      	beq.n	94aa <setvbuf+0x13a>
    9478:	2001      	movs	r0, #1
    947a:	4018      	ands	r0, r3
    947c:	2300      	movs	r3, #0
    947e:	4298      	cmp	r0, r3
    9480:	d011      	beq.n	94a6 <setvbuf+0x136>
    9482:	426d      	negs	r5, r5
    9484:	60a3      	str	r3, [r4, #8]
    9486:	61a5      	str	r5, [r4, #24]
    9488:	0018      	movs	r0, r3
    948a:	e7d3      	b.n	9434 <setvbuf+0xc4>
    948c:	9801      	ldr	r0, [sp, #4]
    948e:	f000 fa15 	bl	98bc <malloc>
    9492:	1e07      	subs	r7, r0, #0
    9494:	d0c0      	beq.n	9418 <setvbuf+0xa8>
    9496:	2380      	movs	r3, #128	; 0x80
    9498:	89a2      	ldrh	r2, [r4, #12]
    949a:	9d01      	ldr	r5, [sp, #4]
    949c:	4313      	orrs	r3, r2
    949e:	81a3      	strh	r3, [r4, #12]
    94a0:	e7d6      	b.n	9450 <setvbuf+0xe0>
    94a2:	2000      	movs	r0, #0
    94a4:	e7ba      	b.n	941c <setvbuf+0xac>
    94a6:	60a5      	str	r5, [r4, #8]
    94a8:	e7c4      	b.n	9434 <setvbuf+0xc4>
    94aa:	60a0      	str	r0, [r4, #8]
    94ac:	e7c2      	b.n	9434 <setvbuf+0xc4>
    94ae:	2001      	movs	r0, #1
    94b0:	4240      	negs	r0, r0
    94b2:	e7bf      	b.n	9434 <setvbuf+0xc4>
    94b4:	20000128 	.word	0x20000128
    94b8:	0000ac60 	.word	0x0000ac60
    94bc:	fffff35c 	.word	0xfffff35c
    94c0:	0000ac80 	.word	0x0000ac80
    94c4:	0000ac40 	.word	0x0000ac40

000094c8 <__sflush_r>:
    94c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    94ca:	898a      	ldrh	r2, [r1, #12]
    94cc:	0005      	movs	r5, r0
    94ce:	000c      	movs	r4, r1
    94d0:	0713      	lsls	r3, r2, #28
    94d2:	d460      	bmi.n	9596 <__sflush_r+0xce>
    94d4:	684b      	ldr	r3, [r1, #4]
    94d6:	2b00      	cmp	r3, #0
    94d8:	dc04      	bgt.n	94e4 <__sflush_r+0x1c>
    94da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    94dc:	2b00      	cmp	r3, #0
    94de:	dc01      	bgt.n	94e4 <__sflush_r+0x1c>
    94e0:	2000      	movs	r0, #0
    94e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    94e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    94e6:	2f00      	cmp	r7, #0
    94e8:	d0fa      	beq.n	94e0 <__sflush_r+0x18>
    94ea:	2300      	movs	r3, #0
    94ec:	682e      	ldr	r6, [r5, #0]
    94ee:	602b      	str	r3, [r5, #0]
    94f0:	2380      	movs	r3, #128	; 0x80
    94f2:	015b      	lsls	r3, r3, #5
    94f4:	401a      	ands	r2, r3
    94f6:	d034      	beq.n	9562 <__sflush_r+0x9a>
    94f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    94fa:	89a3      	ldrh	r3, [r4, #12]
    94fc:	075b      	lsls	r3, r3, #29
    94fe:	d506      	bpl.n	950e <__sflush_r+0x46>
    9500:	6863      	ldr	r3, [r4, #4]
    9502:	1ac0      	subs	r0, r0, r3
    9504:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9506:	2b00      	cmp	r3, #0
    9508:	d001      	beq.n	950e <__sflush_r+0x46>
    950a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    950c:	1ac0      	subs	r0, r0, r3
    950e:	0002      	movs	r2, r0
    9510:	6a21      	ldr	r1, [r4, #32]
    9512:	2300      	movs	r3, #0
    9514:	0028      	movs	r0, r5
    9516:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9518:	47b8      	blx	r7
    951a:	89a1      	ldrh	r1, [r4, #12]
    951c:	1c43      	adds	r3, r0, #1
    951e:	d106      	bne.n	952e <__sflush_r+0x66>
    9520:	682b      	ldr	r3, [r5, #0]
    9522:	2b1d      	cmp	r3, #29
    9524:	d831      	bhi.n	958a <__sflush_r+0xc2>
    9526:	4a2c      	ldr	r2, [pc, #176]	; (95d8 <__sflush_r+0x110>)
    9528:	40da      	lsrs	r2, r3
    952a:	07d3      	lsls	r3, r2, #31
    952c:	d52d      	bpl.n	958a <__sflush_r+0xc2>
    952e:	2300      	movs	r3, #0
    9530:	6063      	str	r3, [r4, #4]
    9532:	6923      	ldr	r3, [r4, #16]
    9534:	6023      	str	r3, [r4, #0]
    9536:	04cb      	lsls	r3, r1, #19
    9538:	d505      	bpl.n	9546 <__sflush_r+0x7e>
    953a:	1c43      	adds	r3, r0, #1
    953c:	d102      	bne.n	9544 <__sflush_r+0x7c>
    953e:	682b      	ldr	r3, [r5, #0]
    9540:	2b00      	cmp	r3, #0
    9542:	d100      	bne.n	9546 <__sflush_r+0x7e>
    9544:	6560      	str	r0, [r4, #84]	; 0x54
    9546:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9548:	602e      	str	r6, [r5, #0]
    954a:	2900      	cmp	r1, #0
    954c:	d0c8      	beq.n	94e0 <__sflush_r+0x18>
    954e:	0023      	movs	r3, r4
    9550:	3344      	adds	r3, #68	; 0x44
    9552:	4299      	cmp	r1, r3
    9554:	d002      	beq.n	955c <__sflush_r+0x94>
    9556:	0028      	movs	r0, r5
    9558:	f000 f9ba 	bl	98d0 <_free_r>
    955c:	2000      	movs	r0, #0
    955e:	6360      	str	r0, [r4, #52]	; 0x34
    9560:	e7bf      	b.n	94e2 <__sflush_r+0x1a>
    9562:	2301      	movs	r3, #1
    9564:	6a21      	ldr	r1, [r4, #32]
    9566:	0028      	movs	r0, r5
    9568:	47b8      	blx	r7
    956a:	1c43      	adds	r3, r0, #1
    956c:	d1c5      	bne.n	94fa <__sflush_r+0x32>
    956e:	682b      	ldr	r3, [r5, #0]
    9570:	2b00      	cmp	r3, #0
    9572:	d0c2      	beq.n	94fa <__sflush_r+0x32>
    9574:	2b1d      	cmp	r3, #29
    9576:	d001      	beq.n	957c <__sflush_r+0xb4>
    9578:	2b16      	cmp	r3, #22
    957a:	d101      	bne.n	9580 <__sflush_r+0xb8>
    957c:	602e      	str	r6, [r5, #0]
    957e:	e7af      	b.n	94e0 <__sflush_r+0x18>
    9580:	2340      	movs	r3, #64	; 0x40
    9582:	89a2      	ldrh	r2, [r4, #12]
    9584:	4313      	orrs	r3, r2
    9586:	81a3      	strh	r3, [r4, #12]
    9588:	e7ab      	b.n	94e2 <__sflush_r+0x1a>
    958a:	2340      	movs	r3, #64	; 0x40
    958c:	430b      	orrs	r3, r1
    958e:	2001      	movs	r0, #1
    9590:	81a3      	strh	r3, [r4, #12]
    9592:	4240      	negs	r0, r0
    9594:	e7a5      	b.n	94e2 <__sflush_r+0x1a>
    9596:	690f      	ldr	r7, [r1, #16]
    9598:	2f00      	cmp	r7, #0
    959a:	d0a1      	beq.n	94e0 <__sflush_r+0x18>
    959c:	680b      	ldr	r3, [r1, #0]
    959e:	600f      	str	r7, [r1, #0]
    95a0:	1bdb      	subs	r3, r3, r7
    95a2:	9301      	str	r3, [sp, #4]
    95a4:	2300      	movs	r3, #0
    95a6:	0792      	lsls	r2, r2, #30
    95a8:	d100      	bne.n	95ac <__sflush_r+0xe4>
    95aa:	694b      	ldr	r3, [r1, #20]
    95ac:	60a3      	str	r3, [r4, #8]
    95ae:	9b01      	ldr	r3, [sp, #4]
    95b0:	2b00      	cmp	r3, #0
    95b2:	dc00      	bgt.n	95b6 <__sflush_r+0xee>
    95b4:	e794      	b.n	94e0 <__sflush_r+0x18>
    95b6:	9b01      	ldr	r3, [sp, #4]
    95b8:	003a      	movs	r2, r7
    95ba:	6a21      	ldr	r1, [r4, #32]
    95bc:	0028      	movs	r0, r5
    95be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    95c0:	47b0      	blx	r6
    95c2:	2800      	cmp	r0, #0
    95c4:	dc03      	bgt.n	95ce <__sflush_r+0x106>
    95c6:	2340      	movs	r3, #64	; 0x40
    95c8:	89a2      	ldrh	r2, [r4, #12]
    95ca:	4313      	orrs	r3, r2
    95cc:	e7df      	b.n	958e <__sflush_r+0xc6>
    95ce:	9b01      	ldr	r3, [sp, #4]
    95d0:	183f      	adds	r7, r7, r0
    95d2:	1a1b      	subs	r3, r3, r0
    95d4:	9301      	str	r3, [sp, #4]
    95d6:	e7ea      	b.n	95ae <__sflush_r+0xe6>
    95d8:	20400001 	.word	0x20400001

000095dc <_fflush_r>:
    95dc:	690b      	ldr	r3, [r1, #16]
    95de:	b570      	push	{r4, r5, r6, lr}
    95e0:	0005      	movs	r5, r0
    95e2:	000c      	movs	r4, r1
    95e4:	2b00      	cmp	r3, #0
    95e6:	d101      	bne.n	95ec <_fflush_r+0x10>
    95e8:	2000      	movs	r0, #0
    95ea:	bd70      	pop	{r4, r5, r6, pc}
    95ec:	2800      	cmp	r0, #0
    95ee:	d004      	beq.n	95fa <_fflush_r+0x1e>
    95f0:	6983      	ldr	r3, [r0, #24]
    95f2:	2b00      	cmp	r3, #0
    95f4:	d101      	bne.n	95fa <_fflush_r+0x1e>
    95f6:	f000 f85f 	bl	96b8 <__sinit>
    95fa:	4b0b      	ldr	r3, [pc, #44]	; (9628 <_fflush_r+0x4c>)
    95fc:	429c      	cmp	r4, r3
    95fe:	d109      	bne.n	9614 <_fflush_r+0x38>
    9600:	686c      	ldr	r4, [r5, #4]
    9602:	220c      	movs	r2, #12
    9604:	5ea3      	ldrsh	r3, [r4, r2]
    9606:	2b00      	cmp	r3, #0
    9608:	d0ee      	beq.n	95e8 <_fflush_r+0xc>
    960a:	0021      	movs	r1, r4
    960c:	0028      	movs	r0, r5
    960e:	f7ff ff5b 	bl	94c8 <__sflush_r>
    9612:	e7ea      	b.n	95ea <_fflush_r+0xe>
    9614:	4b05      	ldr	r3, [pc, #20]	; (962c <_fflush_r+0x50>)
    9616:	429c      	cmp	r4, r3
    9618:	d101      	bne.n	961e <_fflush_r+0x42>
    961a:	68ac      	ldr	r4, [r5, #8]
    961c:	e7f1      	b.n	9602 <_fflush_r+0x26>
    961e:	4b04      	ldr	r3, [pc, #16]	; (9630 <_fflush_r+0x54>)
    9620:	429c      	cmp	r4, r3
    9622:	d1ee      	bne.n	9602 <_fflush_r+0x26>
    9624:	68ec      	ldr	r4, [r5, #12]
    9626:	e7ec      	b.n	9602 <_fflush_r+0x26>
    9628:	0000ac60 	.word	0x0000ac60
    962c:	0000ac80 	.word	0x0000ac80
    9630:	0000ac40 	.word	0x0000ac40

00009634 <_cleanup_r>:
    9634:	b510      	push	{r4, lr}
    9636:	4902      	ldr	r1, [pc, #8]	; (9640 <_cleanup_r+0xc>)
    9638:	f000 f8b2 	bl	97a0 <_fwalk_reent>
    963c:	bd10      	pop	{r4, pc}
    963e:	46c0      	nop			; (mov r8, r8)
    9640:	000095dd 	.word	0x000095dd

00009644 <std.isra.0>:
    9644:	2300      	movs	r3, #0
    9646:	b510      	push	{r4, lr}
    9648:	0004      	movs	r4, r0
    964a:	6003      	str	r3, [r0, #0]
    964c:	6043      	str	r3, [r0, #4]
    964e:	6083      	str	r3, [r0, #8]
    9650:	8181      	strh	r1, [r0, #12]
    9652:	6643      	str	r3, [r0, #100]	; 0x64
    9654:	81c2      	strh	r2, [r0, #14]
    9656:	6103      	str	r3, [r0, #16]
    9658:	6143      	str	r3, [r0, #20]
    965a:	6183      	str	r3, [r0, #24]
    965c:	0019      	movs	r1, r3
    965e:	2208      	movs	r2, #8
    9660:	305c      	adds	r0, #92	; 0x5c
    9662:	f7ff fe58 	bl	9316 <memset>
    9666:	4b05      	ldr	r3, [pc, #20]	; (967c <std.isra.0+0x38>)
    9668:	6224      	str	r4, [r4, #32]
    966a:	6263      	str	r3, [r4, #36]	; 0x24
    966c:	4b04      	ldr	r3, [pc, #16]	; (9680 <std.isra.0+0x3c>)
    966e:	62a3      	str	r3, [r4, #40]	; 0x28
    9670:	4b04      	ldr	r3, [pc, #16]	; (9684 <std.isra.0+0x40>)
    9672:	62e3      	str	r3, [r4, #44]	; 0x2c
    9674:	4b04      	ldr	r3, [pc, #16]	; (9688 <std.isra.0+0x44>)
    9676:	6323      	str	r3, [r4, #48]	; 0x30
    9678:	bd10      	pop	{r4, pc}
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	00009fdd 	.word	0x00009fdd
    9680:	0000a005 	.word	0x0000a005
    9684:	0000a03d 	.word	0x0000a03d
    9688:	0000a069 	.word	0x0000a069

0000968c <__sfmoreglue>:
    968c:	b570      	push	{r4, r5, r6, lr}
    968e:	2568      	movs	r5, #104	; 0x68
    9690:	1e4a      	subs	r2, r1, #1
    9692:	4355      	muls	r5, r2
    9694:	000e      	movs	r6, r1
    9696:	0029      	movs	r1, r5
    9698:	3174      	adds	r1, #116	; 0x74
    969a:	f000 f963 	bl	9964 <_malloc_r>
    969e:	1e04      	subs	r4, r0, #0
    96a0:	d008      	beq.n	96b4 <__sfmoreglue+0x28>
    96a2:	2100      	movs	r1, #0
    96a4:	002a      	movs	r2, r5
    96a6:	6001      	str	r1, [r0, #0]
    96a8:	6046      	str	r6, [r0, #4]
    96aa:	300c      	adds	r0, #12
    96ac:	60a0      	str	r0, [r4, #8]
    96ae:	3268      	adds	r2, #104	; 0x68
    96b0:	f7ff fe31 	bl	9316 <memset>
    96b4:	0020      	movs	r0, r4
    96b6:	bd70      	pop	{r4, r5, r6, pc}

000096b8 <__sinit>:
    96b8:	6983      	ldr	r3, [r0, #24]
    96ba:	b513      	push	{r0, r1, r4, lr}
    96bc:	0004      	movs	r4, r0
    96be:	2b00      	cmp	r3, #0
    96c0:	d128      	bne.n	9714 <__sinit+0x5c>
    96c2:	6483      	str	r3, [r0, #72]	; 0x48
    96c4:	64c3      	str	r3, [r0, #76]	; 0x4c
    96c6:	6503      	str	r3, [r0, #80]	; 0x50
    96c8:	4b13      	ldr	r3, [pc, #76]	; (9718 <__sinit+0x60>)
    96ca:	4a14      	ldr	r2, [pc, #80]	; (971c <__sinit+0x64>)
    96cc:	681b      	ldr	r3, [r3, #0]
    96ce:	6282      	str	r2, [r0, #40]	; 0x28
    96d0:	9301      	str	r3, [sp, #4]
    96d2:	4298      	cmp	r0, r3
    96d4:	d101      	bne.n	96da <__sinit+0x22>
    96d6:	2301      	movs	r3, #1
    96d8:	6183      	str	r3, [r0, #24]
    96da:	0020      	movs	r0, r4
    96dc:	f000 f820 	bl	9720 <__sfp>
    96e0:	6060      	str	r0, [r4, #4]
    96e2:	0020      	movs	r0, r4
    96e4:	f000 f81c 	bl	9720 <__sfp>
    96e8:	60a0      	str	r0, [r4, #8]
    96ea:	0020      	movs	r0, r4
    96ec:	f000 f818 	bl	9720 <__sfp>
    96f0:	2200      	movs	r2, #0
    96f2:	60e0      	str	r0, [r4, #12]
    96f4:	2104      	movs	r1, #4
    96f6:	6860      	ldr	r0, [r4, #4]
    96f8:	f7ff ffa4 	bl	9644 <std.isra.0>
    96fc:	2201      	movs	r2, #1
    96fe:	2109      	movs	r1, #9
    9700:	68a0      	ldr	r0, [r4, #8]
    9702:	f7ff ff9f 	bl	9644 <std.isra.0>
    9706:	2202      	movs	r2, #2
    9708:	2112      	movs	r1, #18
    970a:	68e0      	ldr	r0, [r4, #12]
    970c:	f7ff ff9a 	bl	9644 <std.isra.0>
    9710:	2301      	movs	r3, #1
    9712:	61a3      	str	r3, [r4, #24]
    9714:	bd13      	pop	{r0, r1, r4, pc}
    9716:	46c0      	nop			; (mov r8, r8)
    9718:	0000ac3c 	.word	0x0000ac3c
    971c:	00009635 	.word	0x00009635

00009720 <__sfp>:
    9720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9722:	4b1e      	ldr	r3, [pc, #120]	; (979c <__sfp+0x7c>)
    9724:	0007      	movs	r7, r0
    9726:	681e      	ldr	r6, [r3, #0]
    9728:	69b3      	ldr	r3, [r6, #24]
    972a:	2b00      	cmp	r3, #0
    972c:	d102      	bne.n	9734 <__sfp+0x14>
    972e:	0030      	movs	r0, r6
    9730:	f7ff ffc2 	bl	96b8 <__sinit>
    9734:	3648      	adds	r6, #72	; 0x48
    9736:	68b4      	ldr	r4, [r6, #8]
    9738:	6873      	ldr	r3, [r6, #4]
    973a:	3b01      	subs	r3, #1
    973c:	d504      	bpl.n	9748 <__sfp+0x28>
    973e:	6833      	ldr	r3, [r6, #0]
    9740:	2b00      	cmp	r3, #0
    9742:	d007      	beq.n	9754 <__sfp+0x34>
    9744:	6836      	ldr	r6, [r6, #0]
    9746:	e7f6      	b.n	9736 <__sfp+0x16>
    9748:	220c      	movs	r2, #12
    974a:	5ea5      	ldrsh	r5, [r4, r2]
    974c:	2d00      	cmp	r5, #0
    974e:	d00d      	beq.n	976c <__sfp+0x4c>
    9750:	3468      	adds	r4, #104	; 0x68
    9752:	e7f2      	b.n	973a <__sfp+0x1a>
    9754:	2104      	movs	r1, #4
    9756:	0038      	movs	r0, r7
    9758:	f7ff ff98 	bl	968c <__sfmoreglue>
    975c:	6030      	str	r0, [r6, #0]
    975e:	2800      	cmp	r0, #0
    9760:	d1f0      	bne.n	9744 <__sfp+0x24>
    9762:	230c      	movs	r3, #12
    9764:	0004      	movs	r4, r0
    9766:	603b      	str	r3, [r7, #0]
    9768:	0020      	movs	r0, r4
    976a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    976c:	2301      	movs	r3, #1
    976e:	0020      	movs	r0, r4
    9770:	425b      	negs	r3, r3
    9772:	81e3      	strh	r3, [r4, #14]
    9774:	3302      	adds	r3, #2
    9776:	81a3      	strh	r3, [r4, #12]
    9778:	6665      	str	r5, [r4, #100]	; 0x64
    977a:	6025      	str	r5, [r4, #0]
    977c:	60a5      	str	r5, [r4, #8]
    977e:	6065      	str	r5, [r4, #4]
    9780:	6125      	str	r5, [r4, #16]
    9782:	6165      	str	r5, [r4, #20]
    9784:	61a5      	str	r5, [r4, #24]
    9786:	2208      	movs	r2, #8
    9788:	0029      	movs	r1, r5
    978a:	305c      	adds	r0, #92	; 0x5c
    978c:	f7ff fdc3 	bl	9316 <memset>
    9790:	6365      	str	r5, [r4, #52]	; 0x34
    9792:	63a5      	str	r5, [r4, #56]	; 0x38
    9794:	64a5      	str	r5, [r4, #72]	; 0x48
    9796:	64e5      	str	r5, [r4, #76]	; 0x4c
    9798:	e7e6      	b.n	9768 <__sfp+0x48>
    979a:	46c0      	nop			; (mov r8, r8)
    979c:	0000ac3c 	.word	0x0000ac3c

000097a0 <_fwalk_reent>:
    97a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    97a2:	0004      	movs	r4, r0
    97a4:	0007      	movs	r7, r0
    97a6:	2600      	movs	r6, #0
    97a8:	9101      	str	r1, [sp, #4]
    97aa:	3448      	adds	r4, #72	; 0x48
    97ac:	2c00      	cmp	r4, #0
    97ae:	d101      	bne.n	97b4 <_fwalk_reent+0x14>
    97b0:	0030      	movs	r0, r6
    97b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    97b4:	6863      	ldr	r3, [r4, #4]
    97b6:	68a5      	ldr	r5, [r4, #8]
    97b8:	9300      	str	r3, [sp, #0]
    97ba:	9b00      	ldr	r3, [sp, #0]
    97bc:	3b01      	subs	r3, #1
    97be:	9300      	str	r3, [sp, #0]
    97c0:	d501      	bpl.n	97c6 <_fwalk_reent+0x26>
    97c2:	6824      	ldr	r4, [r4, #0]
    97c4:	e7f2      	b.n	97ac <_fwalk_reent+0xc>
    97c6:	89ab      	ldrh	r3, [r5, #12]
    97c8:	2b01      	cmp	r3, #1
    97ca:	d908      	bls.n	97de <_fwalk_reent+0x3e>
    97cc:	220e      	movs	r2, #14
    97ce:	5eab      	ldrsh	r3, [r5, r2]
    97d0:	3301      	adds	r3, #1
    97d2:	d004      	beq.n	97de <_fwalk_reent+0x3e>
    97d4:	0029      	movs	r1, r5
    97d6:	0038      	movs	r0, r7
    97d8:	9b01      	ldr	r3, [sp, #4]
    97da:	4798      	blx	r3
    97dc:	4306      	orrs	r6, r0
    97de:	3568      	adds	r5, #104	; 0x68
    97e0:	e7eb      	b.n	97ba <_fwalk_reent+0x1a>
	...

000097e4 <__swhatbuf_r>:
    97e4:	b570      	push	{r4, r5, r6, lr}
    97e6:	000e      	movs	r6, r1
    97e8:	001d      	movs	r5, r3
    97ea:	230e      	movs	r3, #14
    97ec:	5ec9      	ldrsh	r1, [r1, r3]
    97ee:	b090      	sub	sp, #64	; 0x40
    97f0:	0014      	movs	r4, r2
    97f2:	2900      	cmp	r1, #0
    97f4:	da07      	bge.n	9806 <__swhatbuf_r+0x22>
    97f6:	2300      	movs	r3, #0
    97f8:	602b      	str	r3, [r5, #0]
    97fa:	89b3      	ldrh	r3, [r6, #12]
    97fc:	061b      	lsls	r3, r3, #24
    97fe:	d411      	bmi.n	9824 <__swhatbuf_r+0x40>
    9800:	2380      	movs	r3, #128	; 0x80
    9802:	00db      	lsls	r3, r3, #3
    9804:	e00f      	b.n	9826 <__swhatbuf_r+0x42>
    9806:	aa01      	add	r2, sp, #4
    9808:	f000 fd26 	bl	a258 <_fstat_r>
    980c:	2800      	cmp	r0, #0
    980e:	dbf2      	blt.n	97f6 <__swhatbuf_r+0x12>
    9810:	22f0      	movs	r2, #240	; 0xf0
    9812:	9b02      	ldr	r3, [sp, #8]
    9814:	0212      	lsls	r2, r2, #8
    9816:	4013      	ands	r3, r2
    9818:	4a05      	ldr	r2, [pc, #20]	; (9830 <__swhatbuf_r+0x4c>)
    981a:	189b      	adds	r3, r3, r2
    981c:	425a      	negs	r2, r3
    981e:	4153      	adcs	r3, r2
    9820:	602b      	str	r3, [r5, #0]
    9822:	e7ed      	b.n	9800 <__swhatbuf_r+0x1c>
    9824:	2340      	movs	r3, #64	; 0x40
    9826:	2000      	movs	r0, #0
    9828:	6023      	str	r3, [r4, #0]
    982a:	b010      	add	sp, #64	; 0x40
    982c:	bd70      	pop	{r4, r5, r6, pc}
    982e:	46c0      	nop			; (mov r8, r8)
    9830:	ffffe000 	.word	0xffffe000

00009834 <__smakebuf_r>:
    9834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9836:	2602      	movs	r6, #2
    9838:	898b      	ldrh	r3, [r1, #12]
    983a:	0005      	movs	r5, r0
    983c:	000c      	movs	r4, r1
    983e:	4233      	tst	r3, r6
    9840:	d006      	beq.n	9850 <__smakebuf_r+0x1c>
    9842:	0023      	movs	r3, r4
    9844:	3347      	adds	r3, #71	; 0x47
    9846:	6023      	str	r3, [r4, #0]
    9848:	6123      	str	r3, [r4, #16]
    984a:	2301      	movs	r3, #1
    984c:	6163      	str	r3, [r4, #20]
    984e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9850:	ab01      	add	r3, sp, #4
    9852:	466a      	mov	r2, sp
    9854:	f7ff ffc6 	bl	97e4 <__swhatbuf_r>
    9858:	9900      	ldr	r1, [sp, #0]
    985a:	0007      	movs	r7, r0
    985c:	0028      	movs	r0, r5
    985e:	f000 f881 	bl	9964 <_malloc_r>
    9862:	2800      	cmp	r0, #0
    9864:	d108      	bne.n	9878 <__smakebuf_r+0x44>
    9866:	220c      	movs	r2, #12
    9868:	5ea3      	ldrsh	r3, [r4, r2]
    986a:	059a      	lsls	r2, r3, #22
    986c:	d4ef      	bmi.n	984e <__smakebuf_r+0x1a>
    986e:	2203      	movs	r2, #3
    9870:	4393      	bics	r3, r2
    9872:	431e      	orrs	r6, r3
    9874:	81a6      	strh	r6, [r4, #12]
    9876:	e7e4      	b.n	9842 <__smakebuf_r+0xe>
    9878:	4b0f      	ldr	r3, [pc, #60]	; (98b8 <__smakebuf_r+0x84>)
    987a:	62ab      	str	r3, [r5, #40]	; 0x28
    987c:	2380      	movs	r3, #128	; 0x80
    987e:	89a2      	ldrh	r2, [r4, #12]
    9880:	6020      	str	r0, [r4, #0]
    9882:	4313      	orrs	r3, r2
    9884:	81a3      	strh	r3, [r4, #12]
    9886:	9b00      	ldr	r3, [sp, #0]
    9888:	6120      	str	r0, [r4, #16]
    988a:	6163      	str	r3, [r4, #20]
    988c:	9b01      	ldr	r3, [sp, #4]
    988e:	2b00      	cmp	r3, #0
    9890:	d00d      	beq.n	98ae <__smakebuf_r+0x7a>
    9892:	230e      	movs	r3, #14
    9894:	5ee1      	ldrsh	r1, [r4, r3]
    9896:	0028      	movs	r0, r5
    9898:	f000 fcf0 	bl	a27c <_isatty_r>
    989c:	2800      	cmp	r0, #0
    989e:	d006      	beq.n	98ae <__smakebuf_r+0x7a>
    98a0:	2203      	movs	r2, #3
    98a2:	89a3      	ldrh	r3, [r4, #12]
    98a4:	4393      	bics	r3, r2
    98a6:	001a      	movs	r2, r3
    98a8:	2301      	movs	r3, #1
    98aa:	4313      	orrs	r3, r2
    98ac:	81a3      	strh	r3, [r4, #12]
    98ae:	89a0      	ldrh	r0, [r4, #12]
    98b0:	4338      	orrs	r0, r7
    98b2:	81a0      	strh	r0, [r4, #12]
    98b4:	e7cb      	b.n	984e <__smakebuf_r+0x1a>
    98b6:	46c0      	nop			; (mov r8, r8)
    98b8:	00009635 	.word	0x00009635

000098bc <malloc>:
    98bc:	b510      	push	{r4, lr}
    98be:	4b03      	ldr	r3, [pc, #12]	; (98cc <malloc+0x10>)
    98c0:	0001      	movs	r1, r0
    98c2:	6818      	ldr	r0, [r3, #0]
    98c4:	f000 f84e 	bl	9964 <_malloc_r>
    98c8:	bd10      	pop	{r4, pc}
    98ca:	46c0      	nop			; (mov r8, r8)
    98cc:	20000128 	.word	0x20000128

000098d0 <_free_r>:
    98d0:	b570      	push	{r4, r5, r6, lr}
    98d2:	0005      	movs	r5, r0
    98d4:	2900      	cmp	r1, #0
    98d6:	d010      	beq.n	98fa <_free_r+0x2a>
    98d8:	1f0c      	subs	r4, r1, #4
    98da:	6823      	ldr	r3, [r4, #0]
    98dc:	2b00      	cmp	r3, #0
    98de:	da00      	bge.n	98e2 <_free_r+0x12>
    98e0:	18e4      	adds	r4, r4, r3
    98e2:	0028      	movs	r0, r5
    98e4:	f000 fcfb 	bl	a2de <__malloc_lock>
    98e8:	4a1d      	ldr	r2, [pc, #116]	; (9960 <_free_r+0x90>)
    98ea:	6813      	ldr	r3, [r2, #0]
    98ec:	2b00      	cmp	r3, #0
    98ee:	d105      	bne.n	98fc <_free_r+0x2c>
    98f0:	6063      	str	r3, [r4, #4]
    98f2:	6014      	str	r4, [r2, #0]
    98f4:	0028      	movs	r0, r5
    98f6:	f000 fcf3 	bl	a2e0 <__malloc_unlock>
    98fa:	bd70      	pop	{r4, r5, r6, pc}
    98fc:	42a3      	cmp	r3, r4
    98fe:	d909      	bls.n	9914 <_free_r+0x44>
    9900:	6821      	ldr	r1, [r4, #0]
    9902:	1860      	adds	r0, r4, r1
    9904:	4283      	cmp	r3, r0
    9906:	d1f3      	bne.n	98f0 <_free_r+0x20>
    9908:	6818      	ldr	r0, [r3, #0]
    990a:	685b      	ldr	r3, [r3, #4]
    990c:	1841      	adds	r1, r0, r1
    990e:	6021      	str	r1, [r4, #0]
    9910:	e7ee      	b.n	98f0 <_free_r+0x20>
    9912:	0013      	movs	r3, r2
    9914:	685a      	ldr	r2, [r3, #4]
    9916:	2a00      	cmp	r2, #0
    9918:	d001      	beq.n	991e <_free_r+0x4e>
    991a:	42a2      	cmp	r2, r4
    991c:	d9f9      	bls.n	9912 <_free_r+0x42>
    991e:	6819      	ldr	r1, [r3, #0]
    9920:	1858      	adds	r0, r3, r1
    9922:	42a0      	cmp	r0, r4
    9924:	d10b      	bne.n	993e <_free_r+0x6e>
    9926:	6820      	ldr	r0, [r4, #0]
    9928:	1809      	adds	r1, r1, r0
    992a:	1858      	adds	r0, r3, r1
    992c:	6019      	str	r1, [r3, #0]
    992e:	4282      	cmp	r2, r0
    9930:	d1e0      	bne.n	98f4 <_free_r+0x24>
    9932:	6810      	ldr	r0, [r2, #0]
    9934:	6852      	ldr	r2, [r2, #4]
    9936:	1841      	adds	r1, r0, r1
    9938:	6019      	str	r1, [r3, #0]
    993a:	605a      	str	r2, [r3, #4]
    993c:	e7da      	b.n	98f4 <_free_r+0x24>
    993e:	42a0      	cmp	r0, r4
    9940:	d902      	bls.n	9948 <_free_r+0x78>
    9942:	230c      	movs	r3, #12
    9944:	602b      	str	r3, [r5, #0]
    9946:	e7d5      	b.n	98f4 <_free_r+0x24>
    9948:	6821      	ldr	r1, [r4, #0]
    994a:	1860      	adds	r0, r4, r1
    994c:	4282      	cmp	r2, r0
    994e:	d103      	bne.n	9958 <_free_r+0x88>
    9950:	6810      	ldr	r0, [r2, #0]
    9952:	6852      	ldr	r2, [r2, #4]
    9954:	1841      	adds	r1, r0, r1
    9956:	6021      	str	r1, [r4, #0]
    9958:	6062      	str	r2, [r4, #4]
    995a:	605c      	str	r4, [r3, #4]
    995c:	e7ca      	b.n	98f4 <_free_r+0x24>
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	20000360 	.word	0x20000360

00009964 <_malloc_r>:
    9964:	2303      	movs	r3, #3
    9966:	b570      	push	{r4, r5, r6, lr}
    9968:	1ccd      	adds	r5, r1, #3
    996a:	439d      	bics	r5, r3
    996c:	3508      	adds	r5, #8
    996e:	0006      	movs	r6, r0
    9970:	2d0c      	cmp	r5, #12
    9972:	d21e      	bcs.n	99b2 <_malloc_r+0x4e>
    9974:	250c      	movs	r5, #12
    9976:	42a9      	cmp	r1, r5
    9978:	d81d      	bhi.n	99b6 <_malloc_r+0x52>
    997a:	0030      	movs	r0, r6
    997c:	f000 fcaf 	bl	a2de <__malloc_lock>
    9980:	4a25      	ldr	r2, [pc, #148]	; (9a18 <_malloc_r+0xb4>)
    9982:	6814      	ldr	r4, [r2, #0]
    9984:	0021      	movs	r1, r4
    9986:	2900      	cmp	r1, #0
    9988:	d119      	bne.n	99be <_malloc_r+0x5a>
    998a:	4c24      	ldr	r4, [pc, #144]	; (9a1c <_malloc_r+0xb8>)
    998c:	6823      	ldr	r3, [r4, #0]
    998e:	2b00      	cmp	r3, #0
    9990:	d103      	bne.n	999a <_malloc_r+0x36>
    9992:	0030      	movs	r0, r6
    9994:	f000 fb10 	bl	9fb8 <_sbrk_r>
    9998:	6020      	str	r0, [r4, #0]
    999a:	0029      	movs	r1, r5
    999c:	0030      	movs	r0, r6
    999e:	f000 fb0b 	bl	9fb8 <_sbrk_r>
    99a2:	1c43      	adds	r3, r0, #1
    99a4:	d12c      	bne.n	9a00 <_malloc_r+0x9c>
    99a6:	230c      	movs	r3, #12
    99a8:	0030      	movs	r0, r6
    99aa:	6033      	str	r3, [r6, #0]
    99ac:	f000 fc98 	bl	a2e0 <__malloc_unlock>
    99b0:	e003      	b.n	99ba <_malloc_r+0x56>
    99b2:	2d00      	cmp	r5, #0
    99b4:	dadf      	bge.n	9976 <_malloc_r+0x12>
    99b6:	230c      	movs	r3, #12
    99b8:	6033      	str	r3, [r6, #0]
    99ba:	2000      	movs	r0, #0
    99bc:	bd70      	pop	{r4, r5, r6, pc}
    99be:	680b      	ldr	r3, [r1, #0]
    99c0:	1b5b      	subs	r3, r3, r5
    99c2:	d41a      	bmi.n	99fa <_malloc_r+0x96>
    99c4:	2b0b      	cmp	r3, #11
    99c6:	d903      	bls.n	99d0 <_malloc_r+0x6c>
    99c8:	600b      	str	r3, [r1, #0]
    99ca:	18cc      	adds	r4, r1, r3
    99cc:	6025      	str	r5, [r4, #0]
    99ce:	e003      	b.n	99d8 <_malloc_r+0x74>
    99d0:	428c      	cmp	r4, r1
    99d2:	d10e      	bne.n	99f2 <_malloc_r+0x8e>
    99d4:	6863      	ldr	r3, [r4, #4]
    99d6:	6013      	str	r3, [r2, #0]
    99d8:	0030      	movs	r0, r6
    99da:	f000 fc81 	bl	a2e0 <__malloc_unlock>
    99de:	0020      	movs	r0, r4
    99e0:	2207      	movs	r2, #7
    99e2:	300b      	adds	r0, #11
    99e4:	1d23      	adds	r3, r4, #4
    99e6:	4390      	bics	r0, r2
    99e8:	1ac3      	subs	r3, r0, r3
    99ea:	d0e7      	beq.n	99bc <_malloc_r+0x58>
    99ec:	425a      	negs	r2, r3
    99ee:	50e2      	str	r2, [r4, r3]
    99f0:	e7e4      	b.n	99bc <_malloc_r+0x58>
    99f2:	684b      	ldr	r3, [r1, #4]
    99f4:	6063      	str	r3, [r4, #4]
    99f6:	000c      	movs	r4, r1
    99f8:	e7ee      	b.n	99d8 <_malloc_r+0x74>
    99fa:	000c      	movs	r4, r1
    99fc:	6849      	ldr	r1, [r1, #4]
    99fe:	e7c2      	b.n	9986 <_malloc_r+0x22>
    9a00:	2303      	movs	r3, #3
    9a02:	1cc4      	adds	r4, r0, #3
    9a04:	439c      	bics	r4, r3
    9a06:	42a0      	cmp	r0, r4
    9a08:	d0e0      	beq.n	99cc <_malloc_r+0x68>
    9a0a:	1a21      	subs	r1, r4, r0
    9a0c:	0030      	movs	r0, r6
    9a0e:	f000 fad3 	bl	9fb8 <_sbrk_r>
    9a12:	1c43      	adds	r3, r0, #1
    9a14:	d1da      	bne.n	99cc <_malloc_r+0x68>
    9a16:	e7c6      	b.n	99a6 <_malloc_r+0x42>
    9a18:	20000360 	.word	0x20000360
    9a1c:	20000364 	.word	0x20000364

00009a20 <__sfputc_r>:
    9a20:	6893      	ldr	r3, [r2, #8]
    9a22:	b510      	push	{r4, lr}
    9a24:	3b01      	subs	r3, #1
    9a26:	6093      	str	r3, [r2, #8]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	da05      	bge.n	9a38 <__sfputc_r+0x18>
    9a2c:	6994      	ldr	r4, [r2, #24]
    9a2e:	42a3      	cmp	r3, r4
    9a30:	db08      	blt.n	9a44 <__sfputc_r+0x24>
    9a32:	b2cb      	uxtb	r3, r1
    9a34:	2b0a      	cmp	r3, #10
    9a36:	d005      	beq.n	9a44 <__sfputc_r+0x24>
    9a38:	6813      	ldr	r3, [r2, #0]
    9a3a:	1c58      	adds	r0, r3, #1
    9a3c:	6010      	str	r0, [r2, #0]
    9a3e:	7019      	strb	r1, [r3, #0]
    9a40:	b2c8      	uxtb	r0, r1
    9a42:	bd10      	pop	{r4, pc}
    9a44:	f000 fb16 	bl	a074 <__swbuf_r>
    9a48:	e7fb      	b.n	9a42 <__sfputc_r+0x22>

00009a4a <__sfputs_r>:
    9a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a4c:	0006      	movs	r6, r0
    9a4e:	000f      	movs	r7, r1
    9a50:	0014      	movs	r4, r2
    9a52:	18d5      	adds	r5, r2, r3
    9a54:	42ac      	cmp	r4, r5
    9a56:	d101      	bne.n	9a5c <__sfputs_r+0x12>
    9a58:	2000      	movs	r0, #0
    9a5a:	e007      	b.n	9a6c <__sfputs_r+0x22>
    9a5c:	7821      	ldrb	r1, [r4, #0]
    9a5e:	003a      	movs	r2, r7
    9a60:	0030      	movs	r0, r6
    9a62:	f7ff ffdd 	bl	9a20 <__sfputc_r>
    9a66:	3401      	adds	r4, #1
    9a68:	1c43      	adds	r3, r0, #1
    9a6a:	d1f3      	bne.n	9a54 <__sfputs_r+0xa>
    9a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009a70 <_vfiprintf_r>:
    9a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a72:	b09f      	sub	sp, #124	; 0x7c
    9a74:	0006      	movs	r6, r0
    9a76:	000f      	movs	r7, r1
    9a78:	0014      	movs	r4, r2
    9a7a:	9305      	str	r3, [sp, #20]
    9a7c:	2800      	cmp	r0, #0
    9a7e:	d004      	beq.n	9a8a <_vfiprintf_r+0x1a>
    9a80:	6983      	ldr	r3, [r0, #24]
    9a82:	2b00      	cmp	r3, #0
    9a84:	d101      	bne.n	9a8a <_vfiprintf_r+0x1a>
    9a86:	f7ff fe17 	bl	96b8 <__sinit>
    9a8a:	4b7f      	ldr	r3, [pc, #508]	; (9c88 <_vfiprintf_r+0x218>)
    9a8c:	429f      	cmp	r7, r3
    9a8e:	d15c      	bne.n	9b4a <_vfiprintf_r+0xda>
    9a90:	6877      	ldr	r7, [r6, #4]
    9a92:	89bb      	ldrh	r3, [r7, #12]
    9a94:	071b      	lsls	r3, r3, #28
    9a96:	d562      	bpl.n	9b5e <_vfiprintf_r+0xee>
    9a98:	693b      	ldr	r3, [r7, #16]
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d05f      	beq.n	9b5e <_vfiprintf_r+0xee>
    9a9e:	2300      	movs	r3, #0
    9aa0:	ad06      	add	r5, sp, #24
    9aa2:	616b      	str	r3, [r5, #20]
    9aa4:	3320      	adds	r3, #32
    9aa6:	766b      	strb	r3, [r5, #25]
    9aa8:	3310      	adds	r3, #16
    9aaa:	76ab      	strb	r3, [r5, #26]
    9aac:	9402      	str	r4, [sp, #8]
    9aae:	9c02      	ldr	r4, [sp, #8]
    9ab0:	7823      	ldrb	r3, [r4, #0]
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d15d      	bne.n	9b72 <_vfiprintf_r+0x102>
    9ab6:	9b02      	ldr	r3, [sp, #8]
    9ab8:	1ae3      	subs	r3, r4, r3
    9aba:	9304      	str	r3, [sp, #16]
    9abc:	d00d      	beq.n	9ada <_vfiprintf_r+0x6a>
    9abe:	9b04      	ldr	r3, [sp, #16]
    9ac0:	9a02      	ldr	r2, [sp, #8]
    9ac2:	0039      	movs	r1, r7
    9ac4:	0030      	movs	r0, r6
    9ac6:	f7ff ffc0 	bl	9a4a <__sfputs_r>
    9aca:	1c43      	adds	r3, r0, #1
    9acc:	d100      	bne.n	9ad0 <_vfiprintf_r+0x60>
    9ace:	e0cc      	b.n	9c6a <_vfiprintf_r+0x1fa>
    9ad0:	696a      	ldr	r2, [r5, #20]
    9ad2:	9b04      	ldr	r3, [sp, #16]
    9ad4:	4694      	mov	ip, r2
    9ad6:	4463      	add	r3, ip
    9ad8:	616b      	str	r3, [r5, #20]
    9ada:	7823      	ldrb	r3, [r4, #0]
    9adc:	2b00      	cmp	r3, #0
    9ade:	d100      	bne.n	9ae2 <_vfiprintf_r+0x72>
    9ae0:	e0c3      	b.n	9c6a <_vfiprintf_r+0x1fa>
    9ae2:	2201      	movs	r2, #1
    9ae4:	2300      	movs	r3, #0
    9ae6:	4252      	negs	r2, r2
    9ae8:	606a      	str	r2, [r5, #4]
    9aea:	a902      	add	r1, sp, #8
    9aec:	3254      	adds	r2, #84	; 0x54
    9aee:	1852      	adds	r2, r2, r1
    9af0:	3401      	adds	r4, #1
    9af2:	602b      	str	r3, [r5, #0]
    9af4:	60eb      	str	r3, [r5, #12]
    9af6:	60ab      	str	r3, [r5, #8]
    9af8:	7013      	strb	r3, [r2, #0]
    9afa:	65ab      	str	r3, [r5, #88]	; 0x58
    9afc:	7821      	ldrb	r1, [r4, #0]
    9afe:	2205      	movs	r2, #5
    9b00:	4862      	ldr	r0, [pc, #392]	; (9c8c <_vfiprintf_r+0x21c>)
    9b02:	f000 fbe1 	bl	a2c8 <memchr>
    9b06:	1c63      	adds	r3, r4, #1
    9b08:	469c      	mov	ip, r3
    9b0a:	2800      	cmp	r0, #0
    9b0c:	d135      	bne.n	9b7a <_vfiprintf_r+0x10a>
    9b0e:	6829      	ldr	r1, [r5, #0]
    9b10:	06cb      	lsls	r3, r1, #27
    9b12:	d504      	bpl.n	9b1e <_vfiprintf_r+0xae>
    9b14:	2353      	movs	r3, #83	; 0x53
    9b16:	aa02      	add	r2, sp, #8
    9b18:	3020      	adds	r0, #32
    9b1a:	189b      	adds	r3, r3, r2
    9b1c:	7018      	strb	r0, [r3, #0]
    9b1e:	070b      	lsls	r3, r1, #28
    9b20:	d504      	bpl.n	9b2c <_vfiprintf_r+0xbc>
    9b22:	2353      	movs	r3, #83	; 0x53
    9b24:	202b      	movs	r0, #43	; 0x2b
    9b26:	aa02      	add	r2, sp, #8
    9b28:	189b      	adds	r3, r3, r2
    9b2a:	7018      	strb	r0, [r3, #0]
    9b2c:	7823      	ldrb	r3, [r4, #0]
    9b2e:	2b2a      	cmp	r3, #42	; 0x2a
    9b30:	d02c      	beq.n	9b8c <_vfiprintf_r+0x11c>
    9b32:	2000      	movs	r0, #0
    9b34:	210a      	movs	r1, #10
    9b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b38:	7822      	ldrb	r2, [r4, #0]
    9b3a:	3a30      	subs	r2, #48	; 0x30
    9b3c:	2a09      	cmp	r2, #9
    9b3e:	d800      	bhi.n	9b42 <_vfiprintf_r+0xd2>
    9b40:	e06b      	b.n	9c1a <_vfiprintf_r+0x1aa>
    9b42:	2800      	cmp	r0, #0
    9b44:	d02a      	beq.n	9b9c <_vfiprintf_r+0x12c>
    9b46:	9309      	str	r3, [sp, #36]	; 0x24
    9b48:	e028      	b.n	9b9c <_vfiprintf_r+0x12c>
    9b4a:	4b51      	ldr	r3, [pc, #324]	; (9c90 <_vfiprintf_r+0x220>)
    9b4c:	429f      	cmp	r7, r3
    9b4e:	d101      	bne.n	9b54 <_vfiprintf_r+0xe4>
    9b50:	68b7      	ldr	r7, [r6, #8]
    9b52:	e79e      	b.n	9a92 <_vfiprintf_r+0x22>
    9b54:	4b4f      	ldr	r3, [pc, #316]	; (9c94 <_vfiprintf_r+0x224>)
    9b56:	429f      	cmp	r7, r3
    9b58:	d19b      	bne.n	9a92 <_vfiprintf_r+0x22>
    9b5a:	68f7      	ldr	r7, [r6, #12]
    9b5c:	e799      	b.n	9a92 <_vfiprintf_r+0x22>
    9b5e:	0039      	movs	r1, r7
    9b60:	0030      	movs	r0, r6
    9b62:	f000 faf1 	bl	a148 <__swsetup_r>
    9b66:	2800      	cmp	r0, #0
    9b68:	d099      	beq.n	9a9e <_vfiprintf_r+0x2e>
    9b6a:	2001      	movs	r0, #1
    9b6c:	4240      	negs	r0, r0
    9b6e:	b01f      	add	sp, #124	; 0x7c
    9b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b72:	2b25      	cmp	r3, #37	; 0x25
    9b74:	d09f      	beq.n	9ab6 <_vfiprintf_r+0x46>
    9b76:	3401      	adds	r4, #1
    9b78:	e79a      	b.n	9ab0 <_vfiprintf_r+0x40>
    9b7a:	4b44      	ldr	r3, [pc, #272]	; (9c8c <_vfiprintf_r+0x21c>)
    9b7c:	6829      	ldr	r1, [r5, #0]
    9b7e:	1ac0      	subs	r0, r0, r3
    9b80:	2301      	movs	r3, #1
    9b82:	4083      	lsls	r3, r0
    9b84:	430b      	orrs	r3, r1
    9b86:	602b      	str	r3, [r5, #0]
    9b88:	4664      	mov	r4, ip
    9b8a:	e7b7      	b.n	9afc <_vfiprintf_r+0x8c>
    9b8c:	9b05      	ldr	r3, [sp, #20]
    9b8e:	1d18      	adds	r0, r3, #4
    9b90:	681b      	ldr	r3, [r3, #0]
    9b92:	9005      	str	r0, [sp, #20]
    9b94:	2b00      	cmp	r3, #0
    9b96:	db3a      	blt.n	9c0e <_vfiprintf_r+0x19e>
    9b98:	9309      	str	r3, [sp, #36]	; 0x24
    9b9a:	4664      	mov	r4, ip
    9b9c:	7823      	ldrb	r3, [r4, #0]
    9b9e:	2b2e      	cmp	r3, #46	; 0x2e
    9ba0:	d10b      	bne.n	9bba <_vfiprintf_r+0x14a>
    9ba2:	7863      	ldrb	r3, [r4, #1]
    9ba4:	1c62      	adds	r2, r4, #1
    9ba6:	2b2a      	cmp	r3, #42	; 0x2a
    9ba8:	d13f      	bne.n	9c2a <_vfiprintf_r+0x1ba>
    9baa:	9b05      	ldr	r3, [sp, #20]
    9bac:	3402      	adds	r4, #2
    9bae:	1d1a      	adds	r2, r3, #4
    9bb0:	681b      	ldr	r3, [r3, #0]
    9bb2:	9205      	str	r2, [sp, #20]
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	db35      	blt.n	9c24 <_vfiprintf_r+0x1b4>
    9bb8:	9307      	str	r3, [sp, #28]
    9bba:	7821      	ldrb	r1, [r4, #0]
    9bbc:	2203      	movs	r2, #3
    9bbe:	4836      	ldr	r0, [pc, #216]	; (9c98 <_vfiprintf_r+0x228>)
    9bc0:	f000 fb82 	bl	a2c8 <memchr>
    9bc4:	2800      	cmp	r0, #0
    9bc6:	d007      	beq.n	9bd8 <_vfiprintf_r+0x168>
    9bc8:	4b33      	ldr	r3, [pc, #204]	; (9c98 <_vfiprintf_r+0x228>)
    9bca:	682a      	ldr	r2, [r5, #0]
    9bcc:	1ac0      	subs	r0, r0, r3
    9bce:	2340      	movs	r3, #64	; 0x40
    9bd0:	4083      	lsls	r3, r0
    9bd2:	4313      	orrs	r3, r2
    9bd4:	602b      	str	r3, [r5, #0]
    9bd6:	3401      	adds	r4, #1
    9bd8:	7821      	ldrb	r1, [r4, #0]
    9bda:	1c63      	adds	r3, r4, #1
    9bdc:	2206      	movs	r2, #6
    9bde:	482f      	ldr	r0, [pc, #188]	; (9c9c <_vfiprintf_r+0x22c>)
    9be0:	9302      	str	r3, [sp, #8]
    9be2:	7629      	strb	r1, [r5, #24]
    9be4:	f000 fb70 	bl	a2c8 <memchr>
    9be8:	2800      	cmp	r0, #0
    9bea:	d044      	beq.n	9c76 <_vfiprintf_r+0x206>
    9bec:	4b2c      	ldr	r3, [pc, #176]	; (9ca0 <_vfiprintf_r+0x230>)
    9bee:	2b00      	cmp	r3, #0
    9bf0:	d12f      	bne.n	9c52 <_vfiprintf_r+0x1e2>
    9bf2:	6829      	ldr	r1, [r5, #0]
    9bf4:	9b05      	ldr	r3, [sp, #20]
    9bf6:	2207      	movs	r2, #7
    9bf8:	05c9      	lsls	r1, r1, #23
    9bfa:	d528      	bpl.n	9c4e <_vfiprintf_r+0x1de>
    9bfc:	189b      	adds	r3, r3, r2
    9bfe:	4393      	bics	r3, r2
    9c00:	3308      	adds	r3, #8
    9c02:	9305      	str	r3, [sp, #20]
    9c04:	696b      	ldr	r3, [r5, #20]
    9c06:	9a03      	ldr	r2, [sp, #12]
    9c08:	189b      	adds	r3, r3, r2
    9c0a:	616b      	str	r3, [r5, #20]
    9c0c:	e74f      	b.n	9aae <_vfiprintf_r+0x3e>
    9c0e:	425b      	negs	r3, r3
    9c10:	60eb      	str	r3, [r5, #12]
    9c12:	2302      	movs	r3, #2
    9c14:	430b      	orrs	r3, r1
    9c16:	602b      	str	r3, [r5, #0]
    9c18:	e7bf      	b.n	9b9a <_vfiprintf_r+0x12a>
    9c1a:	434b      	muls	r3, r1
    9c1c:	3401      	adds	r4, #1
    9c1e:	189b      	adds	r3, r3, r2
    9c20:	2001      	movs	r0, #1
    9c22:	e789      	b.n	9b38 <_vfiprintf_r+0xc8>
    9c24:	2301      	movs	r3, #1
    9c26:	425b      	negs	r3, r3
    9c28:	e7c6      	b.n	9bb8 <_vfiprintf_r+0x148>
    9c2a:	2300      	movs	r3, #0
    9c2c:	0014      	movs	r4, r2
    9c2e:	200a      	movs	r0, #10
    9c30:	001a      	movs	r2, r3
    9c32:	606b      	str	r3, [r5, #4]
    9c34:	7821      	ldrb	r1, [r4, #0]
    9c36:	3930      	subs	r1, #48	; 0x30
    9c38:	2909      	cmp	r1, #9
    9c3a:	d903      	bls.n	9c44 <_vfiprintf_r+0x1d4>
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d0bc      	beq.n	9bba <_vfiprintf_r+0x14a>
    9c40:	9207      	str	r2, [sp, #28]
    9c42:	e7ba      	b.n	9bba <_vfiprintf_r+0x14a>
    9c44:	4342      	muls	r2, r0
    9c46:	3401      	adds	r4, #1
    9c48:	1852      	adds	r2, r2, r1
    9c4a:	2301      	movs	r3, #1
    9c4c:	e7f2      	b.n	9c34 <_vfiprintf_r+0x1c4>
    9c4e:	3307      	adds	r3, #7
    9c50:	e7d5      	b.n	9bfe <_vfiprintf_r+0x18e>
    9c52:	ab05      	add	r3, sp, #20
    9c54:	9300      	str	r3, [sp, #0]
    9c56:	003a      	movs	r2, r7
    9c58:	4b12      	ldr	r3, [pc, #72]	; (9ca4 <_vfiprintf_r+0x234>)
    9c5a:	0029      	movs	r1, r5
    9c5c:	0030      	movs	r0, r6
    9c5e:	e000      	b.n	9c62 <_vfiprintf_r+0x1f2>
    9c60:	bf00      	nop
    9c62:	9003      	str	r0, [sp, #12]
    9c64:	9b03      	ldr	r3, [sp, #12]
    9c66:	3301      	adds	r3, #1
    9c68:	d1cc      	bne.n	9c04 <_vfiprintf_r+0x194>
    9c6a:	89bb      	ldrh	r3, [r7, #12]
    9c6c:	065b      	lsls	r3, r3, #25
    9c6e:	d500      	bpl.n	9c72 <_vfiprintf_r+0x202>
    9c70:	e77b      	b.n	9b6a <_vfiprintf_r+0xfa>
    9c72:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9c74:	e77b      	b.n	9b6e <_vfiprintf_r+0xfe>
    9c76:	ab05      	add	r3, sp, #20
    9c78:	9300      	str	r3, [sp, #0]
    9c7a:	003a      	movs	r2, r7
    9c7c:	4b09      	ldr	r3, [pc, #36]	; (9ca4 <_vfiprintf_r+0x234>)
    9c7e:	0029      	movs	r1, r5
    9c80:	0030      	movs	r0, r6
    9c82:	f000 f87f 	bl	9d84 <_printf_i>
    9c86:	e7ec      	b.n	9c62 <_vfiprintf_r+0x1f2>
    9c88:	0000ac60 	.word	0x0000ac60
    9c8c:	0000aca0 	.word	0x0000aca0
    9c90:	0000ac80 	.word	0x0000ac80
    9c94:	0000ac40 	.word	0x0000ac40
    9c98:	0000aca6 	.word	0x0000aca6
    9c9c:	0000acaa 	.word	0x0000acaa
    9ca0:	00000000 	.word	0x00000000
    9ca4:	00009a4b 	.word	0x00009a4b

00009ca8 <_printf_common>:
    9ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9caa:	0015      	movs	r5, r2
    9cac:	9301      	str	r3, [sp, #4]
    9cae:	688a      	ldr	r2, [r1, #8]
    9cb0:	690b      	ldr	r3, [r1, #16]
    9cb2:	9000      	str	r0, [sp, #0]
    9cb4:	000c      	movs	r4, r1
    9cb6:	4293      	cmp	r3, r2
    9cb8:	da00      	bge.n	9cbc <_printf_common+0x14>
    9cba:	0013      	movs	r3, r2
    9cbc:	0022      	movs	r2, r4
    9cbe:	602b      	str	r3, [r5, #0]
    9cc0:	3243      	adds	r2, #67	; 0x43
    9cc2:	7812      	ldrb	r2, [r2, #0]
    9cc4:	2a00      	cmp	r2, #0
    9cc6:	d001      	beq.n	9ccc <_printf_common+0x24>
    9cc8:	3301      	adds	r3, #1
    9cca:	602b      	str	r3, [r5, #0]
    9ccc:	6823      	ldr	r3, [r4, #0]
    9cce:	069b      	lsls	r3, r3, #26
    9cd0:	d502      	bpl.n	9cd8 <_printf_common+0x30>
    9cd2:	682b      	ldr	r3, [r5, #0]
    9cd4:	3302      	adds	r3, #2
    9cd6:	602b      	str	r3, [r5, #0]
    9cd8:	2706      	movs	r7, #6
    9cda:	6823      	ldr	r3, [r4, #0]
    9cdc:	401f      	ands	r7, r3
    9cde:	d027      	beq.n	9d30 <_printf_common+0x88>
    9ce0:	0023      	movs	r3, r4
    9ce2:	3343      	adds	r3, #67	; 0x43
    9ce4:	781b      	ldrb	r3, [r3, #0]
    9ce6:	1e5a      	subs	r2, r3, #1
    9ce8:	4193      	sbcs	r3, r2
    9cea:	6822      	ldr	r2, [r4, #0]
    9cec:	0692      	lsls	r2, r2, #26
    9cee:	d430      	bmi.n	9d52 <_printf_common+0xaa>
    9cf0:	0022      	movs	r2, r4
    9cf2:	9901      	ldr	r1, [sp, #4]
    9cf4:	3243      	adds	r2, #67	; 0x43
    9cf6:	9800      	ldr	r0, [sp, #0]
    9cf8:	9e08      	ldr	r6, [sp, #32]
    9cfa:	47b0      	blx	r6
    9cfc:	1c43      	adds	r3, r0, #1
    9cfe:	d025      	beq.n	9d4c <_printf_common+0xa4>
    9d00:	2306      	movs	r3, #6
    9d02:	6820      	ldr	r0, [r4, #0]
    9d04:	682a      	ldr	r2, [r5, #0]
    9d06:	68e1      	ldr	r1, [r4, #12]
    9d08:	4003      	ands	r3, r0
    9d0a:	2500      	movs	r5, #0
    9d0c:	2b04      	cmp	r3, #4
    9d0e:	d103      	bne.n	9d18 <_printf_common+0x70>
    9d10:	1a8d      	subs	r5, r1, r2
    9d12:	43eb      	mvns	r3, r5
    9d14:	17db      	asrs	r3, r3, #31
    9d16:	401d      	ands	r5, r3
    9d18:	68a3      	ldr	r3, [r4, #8]
    9d1a:	6922      	ldr	r2, [r4, #16]
    9d1c:	4293      	cmp	r3, r2
    9d1e:	dd01      	ble.n	9d24 <_printf_common+0x7c>
    9d20:	1a9b      	subs	r3, r3, r2
    9d22:	18ed      	adds	r5, r5, r3
    9d24:	2700      	movs	r7, #0
    9d26:	42bd      	cmp	r5, r7
    9d28:	d120      	bne.n	9d6c <_printf_common+0xc4>
    9d2a:	2000      	movs	r0, #0
    9d2c:	e010      	b.n	9d50 <_printf_common+0xa8>
    9d2e:	3701      	adds	r7, #1
    9d30:	68e3      	ldr	r3, [r4, #12]
    9d32:	682a      	ldr	r2, [r5, #0]
    9d34:	1a9b      	subs	r3, r3, r2
    9d36:	429f      	cmp	r7, r3
    9d38:	dad2      	bge.n	9ce0 <_printf_common+0x38>
    9d3a:	0022      	movs	r2, r4
    9d3c:	2301      	movs	r3, #1
    9d3e:	3219      	adds	r2, #25
    9d40:	9901      	ldr	r1, [sp, #4]
    9d42:	9800      	ldr	r0, [sp, #0]
    9d44:	9e08      	ldr	r6, [sp, #32]
    9d46:	47b0      	blx	r6
    9d48:	1c43      	adds	r3, r0, #1
    9d4a:	d1f0      	bne.n	9d2e <_printf_common+0x86>
    9d4c:	2001      	movs	r0, #1
    9d4e:	4240      	negs	r0, r0
    9d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9d52:	2030      	movs	r0, #48	; 0x30
    9d54:	18e1      	adds	r1, r4, r3
    9d56:	3143      	adds	r1, #67	; 0x43
    9d58:	7008      	strb	r0, [r1, #0]
    9d5a:	0021      	movs	r1, r4
    9d5c:	1c5a      	adds	r2, r3, #1
    9d5e:	3145      	adds	r1, #69	; 0x45
    9d60:	7809      	ldrb	r1, [r1, #0]
    9d62:	18a2      	adds	r2, r4, r2
    9d64:	3243      	adds	r2, #67	; 0x43
    9d66:	3302      	adds	r3, #2
    9d68:	7011      	strb	r1, [r2, #0]
    9d6a:	e7c1      	b.n	9cf0 <_printf_common+0x48>
    9d6c:	0022      	movs	r2, r4
    9d6e:	2301      	movs	r3, #1
    9d70:	321a      	adds	r2, #26
    9d72:	9901      	ldr	r1, [sp, #4]
    9d74:	9800      	ldr	r0, [sp, #0]
    9d76:	9e08      	ldr	r6, [sp, #32]
    9d78:	47b0      	blx	r6
    9d7a:	1c43      	adds	r3, r0, #1
    9d7c:	d0e6      	beq.n	9d4c <_printf_common+0xa4>
    9d7e:	3701      	adds	r7, #1
    9d80:	e7d1      	b.n	9d26 <_printf_common+0x7e>
	...

00009d84 <_printf_i>:
    9d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d86:	b08b      	sub	sp, #44	; 0x2c
    9d88:	9206      	str	r2, [sp, #24]
    9d8a:	000a      	movs	r2, r1
    9d8c:	3243      	adds	r2, #67	; 0x43
    9d8e:	9307      	str	r3, [sp, #28]
    9d90:	9005      	str	r0, [sp, #20]
    9d92:	9204      	str	r2, [sp, #16]
    9d94:	7e0a      	ldrb	r2, [r1, #24]
    9d96:	000c      	movs	r4, r1
    9d98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d9a:	2a6e      	cmp	r2, #110	; 0x6e
    9d9c:	d100      	bne.n	9da0 <_printf_i+0x1c>
    9d9e:	e08f      	b.n	9ec0 <_printf_i+0x13c>
    9da0:	d817      	bhi.n	9dd2 <_printf_i+0x4e>
    9da2:	2a63      	cmp	r2, #99	; 0x63
    9da4:	d02c      	beq.n	9e00 <_printf_i+0x7c>
    9da6:	d808      	bhi.n	9dba <_printf_i+0x36>
    9da8:	2a00      	cmp	r2, #0
    9daa:	d100      	bne.n	9dae <_printf_i+0x2a>
    9dac:	e099      	b.n	9ee2 <_printf_i+0x15e>
    9dae:	2a58      	cmp	r2, #88	; 0x58
    9db0:	d054      	beq.n	9e5c <_printf_i+0xd8>
    9db2:	0026      	movs	r6, r4
    9db4:	3642      	adds	r6, #66	; 0x42
    9db6:	7032      	strb	r2, [r6, #0]
    9db8:	e029      	b.n	9e0e <_printf_i+0x8a>
    9dba:	2a64      	cmp	r2, #100	; 0x64
    9dbc:	d001      	beq.n	9dc2 <_printf_i+0x3e>
    9dbe:	2a69      	cmp	r2, #105	; 0x69
    9dc0:	d1f7      	bne.n	9db2 <_printf_i+0x2e>
    9dc2:	6821      	ldr	r1, [r4, #0]
    9dc4:	681a      	ldr	r2, [r3, #0]
    9dc6:	0608      	lsls	r0, r1, #24
    9dc8:	d523      	bpl.n	9e12 <_printf_i+0x8e>
    9dca:	1d11      	adds	r1, r2, #4
    9dcc:	6019      	str	r1, [r3, #0]
    9dce:	6815      	ldr	r5, [r2, #0]
    9dd0:	e025      	b.n	9e1e <_printf_i+0x9a>
    9dd2:	2a73      	cmp	r2, #115	; 0x73
    9dd4:	d100      	bne.n	9dd8 <_printf_i+0x54>
    9dd6:	e088      	b.n	9eea <_printf_i+0x166>
    9dd8:	d808      	bhi.n	9dec <_printf_i+0x68>
    9dda:	2a6f      	cmp	r2, #111	; 0x6f
    9ddc:	d029      	beq.n	9e32 <_printf_i+0xae>
    9dde:	2a70      	cmp	r2, #112	; 0x70
    9de0:	d1e7      	bne.n	9db2 <_printf_i+0x2e>
    9de2:	2220      	movs	r2, #32
    9de4:	6809      	ldr	r1, [r1, #0]
    9de6:	430a      	orrs	r2, r1
    9de8:	6022      	str	r2, [r4, #0]
    9dea:	e003      	b.n	9df4 <_printf_i+0x70>
    9dec:	2a75      	cmp	r2, #117	; 0x75
    9dee:	d020      	beq.n	9e32 <_printf_i+0xae>
    9df0:	2a78      	cmp	r2, #120	; 0x78
    9df2:	d1de      	bne.n	9db2 <_printf_i+0x2e>
    9df4:	0022      	movs	r2, r4
    9df6:	2178      	movs	r1, #120	; 0x78
    9df8:	3245      	adds	r2, #69	; 0x45
    9dfa:	7011      	strb	r1, [r2, #0]
    9dfc:	4a6c      	ldr	r2, [pc, #432]	; (9fb0 <_printf_i+0x22c>)
    9dfe:	e030      	b.n	9e62 <_printf_i+0xde>
    9e00:	000e      	movs	r6, r1
    9e02:	681a      	ldr	r2, [r3, #0]
    9e04:	3642      	adds	r6, #66	; 0x42
    9e06:	1d11      	adds	r1, r2, #4
    9e08:	6019      	str	r1, [r3, #0]
    9e0a:	6813      	ldr	r3, [r2, #0]
    9e0c:	7033      	strb	r3, [r6, #0]
    9e0e:	2301      	movs	r3, #1
    9e10:	e079      	b.n	9f06 <_printf_i+0x182>
    9e12:	0649      	lsls	r1, r1, #25
    9e14:	d5d9      	bpl.n	9dca <_printf_i+0x46>
    9e16:	1d11      	adds	r1, r2, #4
    9e18:	6019      	str	r1, [r3, #0]
    9e1a:	2300      	movs	r3, #0
    9e1c:	5ed5      	ldrsh	r5, [r2, r3]
    9e1e:	2d00      	cmp	r5, #0
    9e20:	da03      	bge.n	9e2a <_printf_i+0xa6>
    9e22:	232d      	movs	r3, #45	; 0x2d
    9e24:	9a04      	ldr	r2, [sp, #16]
    9e26:	426d      	negs	r5, r5
    9e28:	7013      	strb	r3, [r2, #0]
    9e2a:	4b62      	ldr	r3, [pc, #392]	; (9fb4 <_printf_i+0x230>)
    9e2c:	270a      	movs	r7, #10
    9e2e:	9303      	str	r3, [sp, #12]
    9e30:	e02f      	b.n	9e92 <_printf_i+0x10e>
    9e32:	6820      	ldr	r0, [r4, #0]
    9e34:	6819      	ldr	r1, [r3, #0]
    9e36:	0605      	lsls	r5, r0, #24
    9e38:	d503      	bpl.n	9e42 <_printf_i+0xbe>
    9e3a:	1d08      	adds	r0, r1, #4
    9e3c:	6018      	str	r0, [r3, #0]
    9e3e:	680d      	ldr	r5, [r1, #0]
    9e40:	e005      	b.n	9e4e <_printf_i+0xca>
    9e42:	0640      	lsls	r0, r0, #25
    9e44:	d5f9      	bpl.n	9e3a <_printf_i+0xb6>
    9e46:	680d      	ldr	r5, [r1, #0]
    9e48:	1d08      	adds	r0, r1, #4
    9e4a:	6018      	str	r0, [r3, #0]
    9e4c:	b2ad      	uxth	r5, r5
    9e4e:	4b59      	ldr	r3, [pc, #356]	; (9fb4 <_printf_i+0x230>)
    9e50:	2708      	movs	r7, #8
    9e52:	9303      	str	r3, [sp, #12]
    9e54:	2a6f      	cmp	r2, #111	; 0x6f
    9e56:	d018      	beq.n	9e8a <_printf_i+0x106>
    9e58:	270a      	movs	r7, #10
    9e5a:	e016      	b.n	9e8a <_printf_i+0x106>
    9e5c:	3145      	adds	r1, #69	; 0x45
    9e5e:	700a      	strb	r2, [r1, #0]
    9e60:	4a54      	ldr	r2, [pc, #336]	; (9fb4 <_printf_i+0x230>)
    9e62:	9203      	str	r2, [sp, #12]
    9e64:	681a      	ldr	r2, [r3, #0]
    9e66:	6821      	ldr	r1, [r4, #0]
    9e68:	1d10      	adds	r0, r2, #4
    9e6a:	6018      	str	r0, [r3, #0]
    9e6c:	6815      	ldr	r5, [r2, #0]
    9e6e:	0608      	lsls	r0, r1, #24
    9e70:	d522      	bpl.n	9eb8 <_printf_i+0x134>
    9e72:	07cb      	lsls	r3, r1, #31
    9e74:	d502      	bpl.n	9e7c <_printf_i+0xf8>
    9e76:	2320      	movs	r3, #32
    9e78:	4319      	orrs	r1, r3
    9e7a:	6021      	str	r1, [r4, #0]
    9e7c:	2710      	movs	r7, #16
    9e7e:	2d00      	cmp	r5, #0
    9e80:	d103      	bne.n	9e8a <_printf_i+0x106>
    9e82:	2320      	movs	r3, #32
    9e84:	6822      	ldr	r2, [r4, #0]
    9e86:	439a      	bics	r2, r3
    9e88:	6022      	str	r2, [r4, #0]
    9e8a:	0023      	movs	r3, r4
    9e8c:	2200      	movs	r2, #0
    9e8e:	3343      	adds	r3, #67	; 0x43
    9e90:	701a      	strb	r2, [r3, #0]
    9e92:	6863      	ldr	r3, [r4, #4]
    9e94:	60a3      	str	r3, [r4, #8]
    9e96:	2b00      	cmp	r3, #0
    9e98:	db5c      	blt.n	9f54 <_printf_i+0x1d0>
    9e9a:	2204      	movs	r2, #4
    9e9c:	6821      	ldr	r1, [r4, #0]
    9e9e:	4391      	bics	r1, r2
    9ea0:	6021      	str	r1, [r4, #0]
    9ea2:	2d00      	cmp	r5, #0
    9ea4:	d158      	bne.n	9f58 <_printf_i+0x1d4>
    9ea6:	9e04      	ldr	r6, [sp, #16]
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d064      	beq.n	9f76 <_printf_i+0x1f2>
    9eac:	0026      	movs	r6, r4
    9eae:	9b03      	ldr	r3, [sp, #12]
    9eb0:	3642      	adds	r6, #66	; 0x42
    9eb2:	781b      	ldrb	r3, [r3, #0]
    9eb4:	7033      	strb	r3, [r6, #0]
    9eb6:	e05e      	b.n	9f76 <_printf_i+0x1f2>
    9eb8:	0648      	lsls	r0, r1, #25
    9eba:	d5da      	bpl.n	9e72 <_printf_i+0xee>
    9ebc:	b2ad      	uxth	r5, r5
    9ebe:	e7d8      	b.n	9e72 <_printf_i+0xee>
    9ec0:	6809      	ldr	r1, [r1, #0]
    9ec2:	681a      	ldr	r2, [r3, #0]
    9ec4:	0608      	lsls	r0, r1, #24
    9ec6:	d505      	bpl.n	9ed4 <_printf_i+0x150>
    9ec8:	1d11      	adds	r1, r2, #4
    9eca:	6019      	str	r1, [r3, #0]
    9ecc:	6813      	ldr	r3, [r2, #0]
    9ece:	6962      	ldr	r2, [r4, #20]
    9ed0:	601a      	str	r2, [r3, #0]
    9ed2:	e006      	b.n	9ee2 <_printf_i+0x15e>
    9ed4:	0649      	lsls	r1, r1, #25
    9ed6:	d5f7      	bpl.n	9ec8 <_printf_i+0x144>
    9ed8:	1d11      	adds	r1, r2, #4
    9eda:	6019      	str	r1, [r3, #0]
    9edc:	6813      	ldr	r3, [r2, #0]
    9ede:	8aa2      	ldrh	r2, [r4, #20]
    9ee0:	801a      	strh	r2, [r3, #0]
    9ee2:	2300      	movs	r3, #0
    9ee4:	9e04      	ldr	r6, [sp, #16]
    9ee6:	6123      	str	r3, [r4, #16]
    9ee8:	e054      	b.n	9f94 <_printf_i+0x210>
    9eea:	681a      	ldr	r2, [r3, #0]
    9eec:	1d11      	adds	r1, r2, #4
    9eee:	6019      	str	r1, [r3, #0]
    9ef0:	6816      	ldr	r6, [r2, #0]
    9ef2:	2100      	movs	r1, #0
    9ef4:	6862      	ldr	r2, [r4, #4]
    9ef6:	0030      	movs	r0, r6
    9ef8:	f000 f9e6 	bl	a2c8 <memchr>
    9efc:	2800      	cmp	r0, #0
    9efe:	d001      	beq.n	9f04 <_printf_i+0x180>
    9f00:	1b80      	subs	r0, r0, r6
    9f02:	6060      	str	r0, [r4, #4]
    9f04:	6863      	ldr	r3, [r4, #4]
    9f06:	6123      	str	r3, [r4, #16]
    9f08:	2300      	movs	r3, #0
    9f0a:	9a04      	ldr	r2, [sp, #16]
    9f0c:	7013      	strb	r3, [r2, #0]
    9f0e:	e041      	b.n	9f94 <_printf_i+0x210>
    9f10:	6923      	ldr	r3, [r4, #16]
    9f12:	0032      	movs	r2, r6
    9f14:	9906      	ldr	r1, [sp, #24]
    9f16:	9805      	ldr	r0, [sp, #20]
    9f18:	9d07      	ldr	r5, [sp, #28]
    9f1a:	47a8      	blx	r5
    9f1c:	1c43      	adds	r3, r0, #1
    9f1e:	d043      	beq.n	9fa8 <_printf_i+0x224>
    9f20:	6823      	ldr	r3, [r4, #0]
    9f22:	2500      	movs	r5, #0
    9f24:	079b      	lsls	r3, r3, #30
    9f26:	d40f      	bmi.n	9f48 <_printf_i+0x1c4>
    9f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f2a:	68e0      	ldr	r0, [r4, #12]
    9f2c:	4298      	cmp	r0, r3
    9f2e:	da3d      	bge.n	9fac <_printf_i+0x228>
    9f30:	0018      	movs	r0, r3
    9f32:	e03b      	b.n	9fac <_printf_i+0x228>
    9f34:	0022      	movs	r2, r4
    9f36:	2301      	movs	r3, #1
    9f38:	3219      	adds	r2, #25
    9f3a:	9906      	ldr	r1, [sp, #24]
    9f3c:	9805      	ldr	r0, [sp, #20]
    9f3e:	9e07      	ldr	r6, [sp, #28]
    9f40:	47b0      	blx	r6
    9f42:	1c43      	adds	r3, r0, #1
    9f44:	d030      	beq.n	9fa8 <_printf_i+0x224>
    9f46:	3501      	adds	r5, #1
    9f48:	68e3      	ldr	r3, [r4, #12]
    9f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9f4c:	1a9b      	subs	r3, r3, r2
    9f4e:	429d      	cmp	r5, r3
    9f50:	dbf0      	blt.n	9f34 <_printf_i+0x1b0>
    9f52:	e7e9      	b.n	9f28 <_printf_i+0x1a4>
    9f54:	2d00      	cmp	r5, #0
    9f56:	d0a9      	beq.n	9eac <_printf_i+0x128>
    9f58:	9e04      	ldr	r6, [sp, #16]
    9f5a:	0028      	movs	r0, r5
    9f5c:	0039      	movs	r1, r7
    9f5e:	f7fe ff69 	bl	8e34 <__aeabi_uidivmod>
    9f62:	9b03      	ldr	r3, [sp, #12]
    9f64:	3e01      	subs	r6, #1
    9f66:	5c5b      	ldrb	r3, [r3, r1]
    9f68:	0028      	movs	r0, r5
    9f6a:	7033      	strb	r3, [r6, #0]
    9f6c:	0039      	movs	r1, r7
    9f6e:	f7fe fedb 	bl	8d28 <__udivsi3>
    9f72:	1e05      	subs	r5, r0, #0
    9f74:	d1f1      	bne.n	9f5a <_printf_i+0x1d6>
    9f76:	2f08      	cmp	r7, #8
    9f78:	d109      	bne.n	9f8e <_printf_i+0x20a>
    9f7a:	6823      	ldr	r3, [r4, #0]
    9f7c:	07db      	lsls	r3, r3, #31
    9f7e:	d506      	bpl.n	9f8e <_printf_i+0x20a>
    9f80:	6863      	ldr	r3, [r4, #4]
    9f82:	6922      	ldr	r2, [r4, #16]
    9f84:	4293      	cmp	r3, r2
    9f86:	dc02      	bgt.n	9f8e <_printf_i+0x20a>
    9f88:	2330      	movs	r3, #48	; 0x30
    9f8a:	3e01      	subs	r6, #1
    9f8c:	7033      	strb	r3, [r6, #0]
    9f8e:	9b04      	ldr	r3, [sp, #16]
    9f90:	1b9b      	subs	r3, r3, r6
    9f92:	6123      	str	r3, [r4, #16]
    9f94:	9b07      	ldr	r3, [sp, #28]
    9f96:	aa09      	add	r2, sp, #36	; 0x24
    9f98:	9300      	str	r3, [sp, #0]
    9f9a:	0021      	movs	r1, r4
    9f9c:	9b06      	ldr	r3, [sp, #24]
    9f9e:	9805      	ldr	r0, [sp, #20]
    9fa0:	f7ff fe82 	bl	9ca8 <_printf_common>
    9fa4:	1c43      	adds	r3, r0, #1
    9fa6:	d1b3      	bne.n	9f10 <_printf_i+0x18c>
    9fa8:	2001      	movs	r0, #1
    9faa:	4240      	negs	r0, r0
    9fac:	b00b      	add	sp, #44	; 0x2c
    9fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fb0:	0000acc2 	.word	0x0000acc2
    9fb4:	0000acb1 	.word	0x0000acb1

00009fb8 <_sbrk_r>:
    9fb8:	2300      	movs	r3, #0
    9fba:	b570      	push	{r4, r5, r6, lr}
    9fbc:	4c06      	ldr	r4, [pc, #24]	; (9fd8 <_sbrk_r+0x20>)
    9fbe:	0005      	movs	r5, r0
    9fc0:	0008      	movs	r0, r1
    9fc2:	6023      	str	r3, [r4, #0]
    9fc4:	f7fe fe92 	bl	8cec <_sbrk>
    9fc8:	1c43      	adds	r3, r0, #1
    9fca:	d103      	bne.n	9fd4 <_sbrk_r+0x1c>
    9fcc:	6823      	ldr	r3, [r4, #0]
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d000      	beq.n	9fd4 <_sbrk_r+0x1c>
    9fd2:	602b      	str	r3, [r5, #0]
    9fd4:	bd70      	pop	{r4, r5, r6, pc}
    9fd6:	46c0      	nop			; (mov r8, r8)
    9fd8:	20002a3c 	.word	0x20002a3c

00009fdc <__sread>:
    9fdc:	b570      	push	{r4, r5, r6, lr}
    9fde:	000c      	movs	r4, r1
    9fe0:	250e      	movs	r5, #14
    9fe2:	5f49      	ldrsh	r1, [r1, r5]
    9fe4:	f000 f97e 	bl	a2e4 <_read_r>
    9fe8:	2800      	cmp	r0, #0
    9fea:	db03      	blt.n	9ff4 <__sread+0x18>
    9fec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9fee:	181b      	adds	r3, r3, r0
    9ff0:	6563      	str	r3, [r4, #84]	; 0x54
    9ff2:	bd70      	pop	{r4, r5, r6, pc}
    9ff4:	89a3      	ldrh	r3, [r4, #12]
    9ff6:	4a02      	ldr	r2, [pc, #8]	; (a000 <__sread+0x24>)
    9ff8:	4013      	ands	r3, r2
    9ffa:	81a3      	strh	r3, [r4, #12]
    9ffc:	e7f9      	b.n	9ff2 <__sread+0x16>
    9ffe:	46c0      	nop			; (mov r8, r8)
    a000:	ffffefff 	.word	0xffffefff

0000a004 <__swrite>:
    a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a006:	001f      	movs	r7, r3
    a008:	898b      	ldrh	r3, [r1, #12]
    a00a:	0005      	movs	r5, r0
    a00c:	000c      	movs	r4, r1
    a00e:	0016      	movs	r6, r2
    a010:	05db      	lsls	r3, r3, #23
    a012:	d505      	bpl.n	a020 <__swrite+0x1c>
    a014:	230e      	movs	r3, #14
    a016:	5ec9      	ldrsh	r1, [r1, r3]
    a018:	2200      	movs	r2, #0
    a01a:	2302      	movs	r3, #2
    a01c:	f000 f940 	bl	a2a0 <_lseek_r>
    a020:	89a3      	ldrh	r3, [r4, #12]
    a022:	4a05      	ldr	r2, [pc, #20]	; (a038 <__swrite+0x34>)
    a024:	0028      	movs	r0, r5
    a026:	4013      	ands	r3, r2
    a028:	81a3      	strh	r3, [r4, #12]
    a02a:	0032      	movs	r2, r6
    a02c:	230e      	movs	r3, #14
    a02e:	5ee1      	ldrsh	r1, [r4, r3]
    a030:	003b      	movs	r3, r7
    a032:	f000 f875 	bl	a120 <_write_r>
    a036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a038:	ffffefff 	.word	0xffffefff

0000a03c <__sseek>:
    a03c:	b570      	push	{r4, r5, r6, lr}
    a03e:	000c      	movs	r4, r1
    a040:	250e      	movs	r5, #14
    a042:	5f49      	ldrsh	r1, [r1, r5]
    a044:	f000 f92c 	bl	a2a0 <_lseek_r>
    a048:	89a3      	ldrh	r3, [r4, #12]
    a04a:	1c42      	adds	r2, r0, #1
    a04c:	d103      	bne.n	a056 <__sseek+0x1a>
    a04e:	4a05      	ldr	r2, [pc, #20]	; (a064 <__sseek+0x28>)
    a050:	4013      	ands	r3, r2
    a052:	81a3      	strh	r3, [r4, #12]
    a054:	bd70      	pop	{r4, r5, r6, pc}
    a056:	2280      	movs	r2, #128	; 0x80
    a058:	0152      	lsls	r2, r2, #5
    a05a:	4313      	orrs	r3, r2
    a05c:	81a3      	strh	r3, [r4, #12]
    a05e:	6560      	str	r0, [r4, #84]	; 0x54
    a060:	e7f8      	b.n	a054 <__sseek+0x18>
    a062:	46c0      	nop			; (mov r8, r8)
    a064:	ffffefff 	.word	0xffffefff

0000a068 <__sclose>:
    a068:	b510      	push	{r4, lr}
    a06a:	230e      	movs	r3, #14
    a06c:	5ec9      	ldrsh	r1, [r1, r3]
    a06e:	f000 f8e1 	bl	a234 <_close_r>
    a072:	bd10      	pop	{r4, pc}

0000a074 <__swbuf_r>:
    a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a076:	0005      	movs	r5, r0
    a078:	000e      	movs	r6, r1
    a07a:	0014      	movs	r4, r2
    a07c:	2800      	cmp	r0, #0
    a07e:	d004      	beq.n	a08a <__swbuf_r+0x16>
    a080:	6983      	ldr	r3, [r0, #24]
    a082:	2b00      	cmp	r3, #0
    a084:	d101      	bne.n	a08a <__swbuf_r+0x16>
    a086:	f7ff fb17 	bl	96b8 <__sinit>
    a08a:	4b22      	ldr	r3, [pc, #136]	; (a114 <__swbuf_r+0xa0>)
    a08c:	429c      	cmp	r4, r3
    a08e:	d12d      	bne.n	a0ec <__swbuf_r+0x78>
    a090:	686c      	ldr	r4, [r5, #4]
    a092:	69a3      	ldr	r3, [r4, #24]
    a094:	60a3      	str	r3, [r4, #8]
    a096:	89a3      	ldrh	r3, [r4, #12]
    a098:	071b      	lsls	r3, r3, #28
    a09a:	d531      	bpl.n	a100 <__swbuf_r+0x8c>
    a09c:	6923      	ldr	r3, [r4, #16]
    a09e:	2b00      	cmp	r3, #0
    a0a0:	d02e      	beq.n	a100 <__swbuf_r+0x8c>
    a0a2:	6823      	ldr	r3, [r4, #0]
    a0a4:	6922      	ldr	r2, [r4, #16]
    a0a6:	b2f7      	uxtb	r7, r6
    a0a8:	1a98      	subs	r0, r3, r2
    a0aa:	6963      	ldr	r3, [r4, #20]
    a0ac:	b2f6      	uxtb	r6, r6
    a0ae:	4298      	cmp	r0, r3
    a0b0:	db05      	blt.n	a0be <__swbuf_r+0x4a>
    a0b2:	0021      	movs	r1, r4
    a0b4:	0028      	movs	r0, r5
    a0b6:	f7ff fa91 	bl	95dc <_fflush_r>
    a0ba:	2800      	cmp	r0, #0
    a0bc:	d126      	bne.n	a10c <__swbuf_r+0x98>
    a0be:	68a3      	ldr	r3, [r4, #8]
    a0c0:	3001      	adds	r0, #1
    a0c2:	3b01      	subs	r3, #1
    a0c4:	60a3      	str	r3, [r4, #8]
    a0c6:	6823      	ldr	r3, [r4, #0]
    a0c8:	1c5a      	adds	r2, r3, #1
    a0ca:	6022      	str	r2, [r4, #0]
    a0cc:	701f      	strb	r7, [r3, #0]
    a0ce:	6963      	ldr	r3, [r4, #20]
    a0d0:	4298      	cmp	r0, r3
    a0d2:	d004      	beq.n	a0de <__swbuf_r+0x6a>
    a0d4:	89a3      	ldrh	r3, [r4, #12]
    a0d6:	07db      	lsls	r3, r3, #31
    a0d8:	d51a      	bpl.n	a110 <__swbuf_r+0x9c>
    a0da:	2e0a      	cmp	r6, #10
    a0dc:	d118      	bne.n	a110 <__swbuf_r+0x9c>
    a0de:	0021      	movs	r1, r4
    a0e0:	0028      	movs	r0, r5
    a0e2:	f7ff fa7b 	bl	95dc <_fflush_r>
    a0e6:	2800      	cmp	r0, #0
    a0e8:	d012      	beq.n	a110 <__swbuf_r+0x9c>
    a0ea:	e00f      	b.n	a10c <__swbuf_r+0x98>
    a0ec:	4b0a      	ldr	r3, [pc, #40]	; (a118 <__swbuf_r+0xa4>)
    a0ee:	429c      	cmp	r4, r3
    a0f0:	d101      	bne.n	a0f6 <__swbuf_r+0x82>
    a0f2:	68ac      	ldr	r4, [r5, #8]
    a0f4:	e7cd      	b.n	a092 <__swbuf_r+0x1e>
    a0f6:	4b09      	ldr	r3, [pc, #36]	; (a11c <__swbuf_r+0xa8>)
    a0f8:	429c      	cmp	r4, r3
    a0fa:	d1ca      	bne.n	a092 <__swbuf_r+0x1e>
    a0fc:	68ec      	ldr	r4, [r5, #12]
    a0fe:	e7c8      	b.n	a092 <__swbuf_r+0x1e>
    a100:	0021      	movs	r1, r4
    a102:	0028      	movs	r0, r5
    a104:	f000 f820 	bl	a148 <__swsetup_r>
    a108:	2800      	cmp	r0, #0
    a10a:	d0ca      	beq.n	a0a2 <__swbuf_r+0x2e>
    a10c:	2601      	movs	r6, #1
    a10e:	4276      	negs	r6, r6
    a110:	0030      	movs	r0, r6
    a112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a114:	0000ac60 	.word	0x0000ac60
    a118:	0000ac80 	.word	0x0000ac80
    a11c:	0000ac40 	.word	0x0000ac40

0000a120 <_write_r>:
    a120:	b570      	push	{r4, r5, r6, lr}
    a122:	0005      	movs	r5, r0
    a124:	0008      	movs	r0, r1
    a126:	0011      	movs	r1, r2
    a128:	2200      	movs	r2, #0
    a12a:	4c06      	ldr	r4, [pc, #24]	; (a144 <_write_r+0x24>)
    a12c:	6022      	str	r2, [r4, #0]
    a12e:	001a      	movs	r2, r3
    a130:	f7f9 fe2c 	bl	3d8c <_write>
    a134:	1c43      	adds	r3, r0, #1
    a136:	d103      	bne.n	a140 <_write_r+0x20>
    a138:	6823      	ldr	r3, [r4, #0]
    a13a:	2b00      	cmp	r3, #0
    a13c:	d000      	beq.n	a140 <_write_r+0x20>
    a13e:	602b      	str	r3, [r5, #0]
    a140:	bd70      	pop	{r4, r5, r6, pc}
    a142:	46c0      	nop			; (mov r8, r8)
    a144:	20002a3c 	.word	0x20002a3c

0000a148 <__swsetup_r>:
    a148:	4b36      	ldr	r3, [pc, #216]	; (a224 <__swsetup_r+0xdc>)
    a14a:	b570      	push	{r4, r5, r6, lr}
    a14c:	681d      	ldr	r5, [r3, #0]
    a14e:	0006      	movs	r6, r0
    a150:	000c      	movs	r4, r1
    a152:	2d00      	cmp	r5, #0
    a154:	d005      	beq.n	a162 <__swsetup_r+0x1a>
    a156:	69ab      	ldr	r3, [r5, #24]
    a158:	2b00      	cmp	r3, #0
    a15a:	d102      	bne.n	a162 <__swsetup_r+0x1a>
    a15c:	0028      	movs	r0, r5
    a15e:	f7ff faab 	bl	96b8 <__sinit>
    a162:	4b31      	ldr	r3, [pc, #196]	; (a228 <__swsetup_r+0xe0>)
    a164:	429c      	cmp	r4, r3
    a166:	d10f      	bne.n	a188 <__swsetup_r+0x40>
    a168:	686c      	ldr	r4, [r5, #4]
    a16a:	230c      	movs	r3, #12
    a16c:	5ee2      	ldrsh	r2, [r4, r3]
    a16e:	b293      	uxth	r3, r2
    a170:	0719      	lsls	r1, r3, #28
    a172:	d42d      	bmi.n	a1d0 <__swsetup_r+0x88>
    a174:	06d9      	lsls	r1, r3, #27
    a176:	d411      	bmi.n	a19c <__swsetup_r+0x54>
    a178:	2309      	movs	r3, #9
    a17a:	2001      	movs	r0, #1
    a17c:	6033      	str	r3, [r6, #0]
    a17e:	3337      	adds	r3, #55	; 0x37
    a180:	4313      	orrs	r3, r2
    a182:	81a3      	strh	r3, [r4, #12]
    a184:	4240      	negs	r0, r0
    a186:	bd70      	pop	{r4, r5, r6, pc}
    a188:	4b28      	ldr	r3, [pc, #160]	; (a22c <__swsetup_r+0xe4>)
    a18a:	429c      	cmp	r4, r3
    a18c:	d101      	bne.n	a192 <__swsetup_r+0x4a>
    a18e:	68ac      	ldr	r4, [r5, #8]
    a190:	e7eb      	b.n	a16a <__swsetup_r+0x22>
    a192:	4b27      	ldr	r3, [pc, #156]	; (a230 <__swsetup_r+0xe8>)
    a194:	429c      	cmp	r4, r3
    a196:	d1e8      	bne.n	a16a <__swsetup_r+0x22>
    a198:	68ec      	ldr	r4, [r5, #12]
    a19a:	e7e6      	b.n	a16a <__swsetup_r+0x22>
    a19c:	075b      	lsls	r3, r3, #29
    a19e:	d513      	bpl.n	a1c8 <__swsetup_r+0x80>
    a1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a1a2:	2900      	cmp	r1, #0
    a1a4:	d008      	beq.n	a1b8 <__swsetup_r+0x70>
    a1a6:	0023      	movs	r3, r4
    a1a8:	3344      	adds	r3, #68	; 0x44
    a1aa:	4299      	cmp	r1, r3
    a1ac:	d002      	beq.n	a1b4 <__swsetup_r+0x6c>
    a1ae:	0030      	movs	r0, r6
    a1b0:	f7ff fb8e 	bl	98d0 <_free_r>
    a1b4:	2300      	movs	r3, #0
    a1b6:	6363      	str	r3, [r4, #52]	; 0x34
    a1b8:	2224      	movs	r2, #36	; 0x24
    a1ba:	89a3      	ldrh	r3, [r4, #12]
    a1bc:	4393      	bics	r3, r2
    a1be:	81a3      	strh	r3, [r4, #12]
    a1c0:	2300      	movs	r3, #0
    a1c2:	6063      	str	r3, [r4, #4]
    a1c4:	6923      	ldr	r3, [r4, #16]
    a1c6:	6023      	str	r3, [r4, #0]
    a1c8:	2308      	movs	r3, #8
    a1ca:	89a2      	ldrh	r2, [r4, #12]
    a1cc:	4313      	orrs	r3, r2
    a1ce:	81a3      	strh	r3, [r4, #12]
    a1d0:	6923      	ldr	r3, [r4, #16]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d10b      	bne.n	a1ee <__swsetup_r+0xa6>
    a1d6:	21a0      	movs	r1, #160	; 0xa0
    a1d8:	2280      	movs	r2, #128	; 0x80
    a1da:	89a3      	ldrh	r3, [r4, #12]
    a1dc:	0089      	lsls	r1, r1, #2
    a1de:	0092      	lsls	r2, r2, #2
    a1e0:	400b      	ands	r3, r1
    a1e2:	4293      	cmp	r3, r2
    a1e4:	d003      	beq.n	a1ee <__swsetup_r+0xa6>
    a1e6:	0021      	movs	r1, r4
    a1e8:	0030      	movs	r0, r6
    a1ea:	f7ff fb23 	bl	9834 <__smakebuf_r>
    a1ee:	2301      	movs	r3, #1
    a1f0:	89a2      	ldrh	r2, [r4, #12]
    a1f2:	4013      	ands	r3, r2
    a1f4:	d011      	beq.n	a21a <__swsetup_r+0xd2>
    a1f6:	2300      	movs	r3, #0
    a1f8:	60a3      	str	r3, [r4, #8]
    a1fa:	6963      	ldr	r3, [r4, #20]
    a1fc:	425b      	negs	r3, r3
    a1fe:	61a3      	str	r3, [r4, #24]
    a200:	2000      	movs	r0, #0
    a202:	6923      	ldr	r3, [r4, #16]
    a204:	4283      	cmp	r3, r0
    a206:	d1be      	bne.n	a186 <__swsetup_r+0x3e>
    a208:	230c      	movs	r3, #12
    a20a:	5ee2      	ldrsh	r2, [r4, r3]
    a20c:	0613      	lsls	r3, r2, #24
    a20e:	d5ba      	bpl.n	a186 <__swsetup_r+0x3e>
    a210:	2340      	movs	r3, #64	; 0x40
    a212:	4313      	orrs	r3, r2
    a214:	81a3      	strh	r3, [r4, #12]
    a216:	3801      	subs	r0, #1
    a218:	e7b5      	b.n	a186 <__swsetup_r+0x3e>
    a21a:	0792      	lsls	r2, r2, #30
    a21c:	d400      	bmi.n	a220 <__swsetup_r+0xd8>
    a21e:	6963      	ldr	r3, [r4, #20]
    a220:	60a3      	str	r3, [r4, #8]
    a222:	e7ed      	b.n	a200 <__swsetup_r+0xb8>
    a224:	20000128 	.word	0x20000128
    a228:	0000ac60 	.word	0x0000ac60
    a22c:	0000ac80 	.word	0x0000ac80
    a230:	0000ac40 	.word	0x0000ac40

0000a234 <_close_r>:
    a234:	2300      	movs	r3, #0
    a236:	b570      	push	{r4, r5, r6, lr}
    a238:	4c06      	ldr	r4, [pc, #24]	; (a254 <_close_r+0x20>)
    a23a:	0005      	movs	r5, r0
    a23c:	0008      	movs	r0, r1
    a23e:	6023      	str	r3, [r4, #0]
    a240:	f7fe fd66 	bl	8d10 <_close>
    a244:	1c43      	adds	r3, r0, #1
    a246:	d103      	bne.n	a250 <_close_r+0x1c>
    a248:	6823      	ldr	r3, [r4, #0]
    a24a:	2b00      	cmp	r3, #0
    a24c:	d000      	beq.n	a250 <_close_r+0x1c>
    a24e:	602b      	str	r3, [r5, #0]
    a250:	bd70      	pop	{r4, r5, r6, pc}
    a252:	46c0      	nop			; (mov r8, r8)
    a254:	20002a3c 	.word	0x20002a3c

0000a258 <_fstat_r>:
    a258:	2300      	movs	r3, #0
    a25a:	b570      	push	{r4, r5, r6, lr}
    a25c:	4c06      	ldr	r4, [pc, #24]	; (a278 <_fstat_r+0x20>)
    a25e:	0005      	movs	r5, r0
    a260:	0008      	movs	r0, r1
    a262:	0011      	movs	r1, r2
    a264:	6023      	str	r3, [r4, #0]
    a266:	f7fe fd56 	bl	8d16 <_fstat>
    a26a:	1c43      	adds	r3, r0, #1
    a26c:	d103      	bne.n	a276 <_fstat_r+0x1e>
    a26e:	6823      	ldr	r3, [r4, #0]
    a270:	2b00      	cmp	r3, #0
    a272:	d000      	beq.n	a276 <_fstat_r+0x1e>
    a274:	602b      	str	r3, [r5, #0]
    a276:	bd70      	pop	{r4, r5, r6, pc}
    a278:	20002a3c 	.word	0x20002a3c

0000a27c <_isatty_r>:
    a27c:	2300      	movs	r3, #0
    a27e:	b570      	push	{r4, r5, r6, lr}
    a280:	4c06      	ldr	r4, [pc, #24]	; (a29c <_isatty_r+0x20>)
    a282:	0005      	movs	r5, r0
    a284:	0008      	movs	r0, r1
    a286:	6023      	str	r3, [r4, #0]
    a288:	f7fe fd4a 	bl	8d20 <_isatty>
    a28c:	1c43      	adds	r3, r0, #1
    a28e:	d103      	bne.n	a298 <_isatty_r+0x1c>
    a290:	6823      	ldr	r3, [r4, #0]
    a292:	2b00      	cmp	r3, #0
    a294:	d000      	beq.n	a298 <_isatty_r+0x1c>
    a296:	602b      	str	r3, [r5, #0]
    a298:	bd70      	pop	{r4, r5, r6, pc}
    a29a:	46c0      	nop			; (mov r8, r8)
    a29c:	20002a3c 	.word	0x20002a3c

0000a2a0 <_lseek_r>:
    a2a0:	b570      	push	{r4, r5, r6, lr}
    a2a2:	0005      	movs	r5, r0
    a2a4:	0008      	movs	r0, r1
    a2a6:	0011      	movs	r1, r2
    a2a8:	2200      	movs	r2, #0
    a2aa:	4c06      	ldr	r4, [pc, #24]	; (a2c4 <_lseek_r+0x24>)
    a2ac:	6022      	str	r2, [r4, #0]
    a2ae:	001a      	movs	r2, r3
    a2b0:	f7fe fd38 	bl	8d24 <_lseek>
    a2b4:	1c43      	adds	r3, r0, #1
    a2b6:	d103      	bne.n	a2c0 <_lseek_r+0x20>
    a2b8:	6823      	ldr	r3, [r4, #0]
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d000      	beq.n	a2c0 <_lseek_r+0x20>
    a2be:	602b      	str	r3, [r5, #0]
    a2c0:	bd70      	pop	{r4, r5, r6, pc}
    a2c2:	46c0      	nop			; (mov r8, r8)
    a2c4:	20002a3c 	.word	0x20002a3c

0000a2c8 <memchr>:
    a2c8:	b2c9      	uxtb	r1, r1
    a2ca:	1882      	adds	r2, r0, r2
    a2cc:	4290      	cmp	r0, r2
    a2ce:	d101      	bne.n	a2d4 <memchr+0xc>
    a2d0:	2000      	movs	r0, #0
    a2d2:	4770      	bx	lr
    a2d4:	7803      	ldrb	r3, [r0, #0]
    a2d6:	428b      	cmp	r3, r1
    a2d8:	d0fb      	beq.n	a2d2 <memchr+0xa>
    a2da:	3001      	adds	r0, #1
    a2dc:	e7f6      	b.n	a2cc <memchr+0x4>

0000a2de <__malloc_lock>:
    a2de:	4770      	bx	lr

0000a2e0 <__malloc_unlock>:
    a2e0:	4770      	bx	lr
	...

0000a2e4 <_read_r>:
    a2e4:	b570      	push	{r4, r5, r6, lr}
    a2e6:	0005      	movs	r5, r0
    a2e8:	0008      	movs	r0, r1
    a2ea:	0011      	movs	r1, r2
    a2ec:	2200      	movs	r2, #0
    a2ee:	4c06      	ldr	r4, [pc, #24]	; (a308 <_read_r+0x24>)
    a2f0:	6022      	str	r2, [r4, #0]
    a2f2:	001a      	movs	r2, r3
    a2f4:	f7f9 fd28 	bl	3d48 <_read>
    a2f8:	1c43      	adds	r3, r0, #1
    a2fa:	d103      	bne.n	a304 <_read_r+0x20>
    a2fc:	6823      	ldr	r3, [r4, #0]
    a2fe:	2b00      	cmp	r3, #0
    a300:	d000      	beq.n	a304 <_read_r+0x20>
    a302:	602b      	str	r3, [r5, #0]
    a304:	bd70      	pop	{r4, r5, r6, pc}
    a306:	46c0      	nop			; (mov r8, r8)
    a308:	20002a3c 	.word	0x20002a3c

0000a30c <_tcc_apbcmasks>:
    a30c:	00000100 00000200 00000400              ............

0000a318 <_tcc_cc_nums>:
    a318:	00020204                                ....

0000a31c <_tcc_gclk_ids>:
    a31c:	001b1a1a                                ....

0000a320 <_tcc_maxs>:
    a320:	00ffffff 00ffffff 0000ffff              ............

0000a32c <_tcc_ow_nums>:
    a32c:	00020408                                ....

0000a330 <_tcc_intflag>:
    a330:	00000001 00000002 00000004 00000008     ................
    a340:	00001000 00002000 00004000 00008000     ..... ...@......
    a350:	00010000 00020000 00040000 00080000     ................

0000a360 <tcc_interrupt_vectors.12466>:
    a360:	0011100f                                ....

0000a364 <mmc_trans_multipliers>:
    a364:	00000000 0000000a 0000000c 0000000d     ................
    a374:	0000000f 00000014 0000001a 0000001e     ................
    a384:	00000023 00000028 0000002d 00000034     #...(...-...4...
    a394:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000a3a4 <sd_mmc_trans_units>:
    a3a4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000a3c0 <sd_trans_multipliers>:
    a3c0:	00000000 0000000a 0000000c 0000000d     ................
    a3d0:	0000000f 00000014 00000019 0000001e     ................
    a3e0:	00000023 00000028 0000002d 00000032     #...(...-...2...
    a3f0:	00000037 0000003c 00000046 00000050     7...<...F...P...
    a400:	00001822 000018f8 000018f8 00001764     "...........d...
    a410:	000018f8 000018f8 000018f8 000018f8     ................
    a420:	000018f8 000018f8 000018f8 000018f8     ................
    a430:	000018f8 000018f8 000018f8 000018f8     ................
    a440:	000018f8 000018f8 00001788 000018f8     ................
    a450:	000018f8 000018f8 000018f8 000018f8     ................
    a460:	000018f8 000018f8 00001812 000018a6     ................
    a470:	000018f8 000018f8 000018c6 000018f8     ................
    a480:	000018f8 000018f8 000018f8 000018f8     ................
    a490:	000018f8 0000184e 000018f8 000018f8     ....N...........
    a4a0:	000018e8 000018f8 000018f0 000018f8     ................
    a4b0:	000018f8 000018f8 000018f8 000018de     ................
    a4c0:	000018f8 000018f8 000018f8 000018f8     ................
    a4d0:	000018f8 000018f8 000018f8 000018f8     ................
    a4e0:	000018f8 000018f8 000018f8 000018f8     ................
    a4f0:	000018f8 000018f8 000018f8 000018f8     ................
    a500:	000018f8 000018f8 000018f8 000018f8     ................
    a510:	000018f8 000018f8 000018f8 000018f8     ................
    a520:	000018f8 000018f8 000018f8 000018f8     ................
    a530:	000018f8 000018f8 000018f8 000018f8     ................
    a540:	000018f8 000018f8 000018f8 000018f8     ................
    a550:	000018f8 000018f8 000018f8 000018f8     ................
    a560:	000018f8 000018f8 0000181a 31333231     ............1231
    a570:	32313332 33323133 00000000 00002b82     23123123.....+..
    a580:	00002b7e 00002b7e 00002bec 00002bec     ~+..~+...+...+..
    a590:	00002b96 00002b88 00002b9c 00002bda     .+...+...+...+..
    a5a0:	00002d70 00002d50 00002d50 00002ddc     p-..P-..P-...-..
    a5b0:	00002d62 00002d7e 00002d54 00002d8c     b-..~-..T-...-..
    a5c0:	00002dcc                                .-..

0000a5c4 <LfnOfs>:
    a5c4:	07050301 12100e09 1c181614 0000001e     ................

0000a5d4 <excvt.4558>:
    a5d4:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    a5e4:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    a5f4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    a604:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    a614:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    a624:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    a634:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    a644:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    a654:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    a664:	00005d5b                                []..

0000a668 <Tbl>:
    a668:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    a678:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    a688:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    a698:	00d600ff 00f800dc 00d800a3 019200d7     ................
    a6a8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    a6b8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    a6c8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    a6d8:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    a6e8:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    a6f8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    a708:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    a718:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    a728:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    a738:	00da00de 00d900db 00dd00fd 00b400af     ................
    a748:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    a758:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000a768 <tbl_lower.4308>:
    a768:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    a778:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    a788:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    a798:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    a7a8:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    a7b8:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    a7c8:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    a7d8:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    a7e8:	01050103 01090107 010d010b 0111010f     ................
    a7f8:	01150113 01190117 011d011b 0121011f     ..............!.
    a808:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    a818:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    a828:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    a838:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    a848:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    a858:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    a868:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    a878:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    a888:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    a898:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    a8a8:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    a8b8:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    a8c8:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    a8d8:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    a8e8:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    a8f8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    a908:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    a918:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    a928:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    a938:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000a948 <tbl_upper.4309>:
    a948:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    a958:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    a968:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    a978:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    a988:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    a998:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    a9a8:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    a9b8:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    a9c8:	01040102 01080106 010c010a 0110010e     ................
    a9d8:	01140112 01180116 011c011a 0120011e     .............. .
    a9e8:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    a9f8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    aa08:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    aa18:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    aa28:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    aa38:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    aa48:	03940393 03960395 03980397 039a0399     ................
    aa58:	039c039b 039e039d 03a0039f 03a303a1     ................
    aa68:	03a503a4 03a703a6 03a903a8 041003aa     ................
    aa78:	04120411 04140413 04160415 04180417     ................
    aa88:	041a0419 041c041b 041e041d 0420041f     .............. .
    aa98:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    aaa8:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    aab8:	04030402 04050404 04070406 04090408     ................
    aac8:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    aad8:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    aae8:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    aaf8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    ab08:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    ab18:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    ab28:	6f727245 68772072 20656c69 6e65706f     Error while open
    ab38:	20676e69 656c6966 2523203a 000d0a64     ing file: #%d...
    ab48:	6f727245 68772072 20656c69 74697277     Error while writ
    ab58:	20676e69 20564157 64616568 203a7265     ing WAV header: 
    ab68:	0a642523 0000000d 32303831 315f3231     #%d.....180212_1
    ab78:	32393034 61772e35 00000076 4f525245     40925.wav...ERRO
    ab88:	6c632052 6e69736f 65722067 64726f63     R closing record
    ab98:	66206465 0a656c69 0000000d 64726143     ed file.....Card
    aba8:	736e6920 6c6c6174 69616620 0d0a216c      install fail!..
    abb8:	00000000 61656c50 75206573 756c706e     ....Please unplu
    abc8:	6e612067 65722064 756c702d 68742067     g and re-plug th
    abd8:	61632065 0a2e6472 0000000d 000066f4     e card.......f..
    abe8:	00006702 0000679c 0000683c 000068a0     .g...g..<h...h..

0000abf8 <_usb_device_irq_bits>:
    abf8:	00080004 00800070 01000001 00000200     ....p...........

0000ac08 <_usb_endpoint_irq_bits>:
    ac08:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    ac18:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    ac28:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    ac38:	00002249                                I"..

0000ac3c <_global_impure_ptr>:
    ac3c:	2000012c                                ,.. 

0000ac40 <__sf_fake_stderr>:
	...

0000ac60 <__sf_fake_stdin>:
	...

0000ac80 <__sf_fake_stdout>:
	...
    aca0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    acb0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    acc0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    acd0:	00006665                                ef..

0000acd4 <_init>:
    acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acd6:	46c0      	nop			; (mov r8, r8)
    acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    acda:	bc08      	pop	{r3}
    acdc:	469e      	mov	lr, r3
    acde:	4770      	bx	lr

0000ace0 <__init_array_start>:
    ace0:	000000dd 	.word	0x000000dd

0000ace4 <_fini>:
    ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ace6:	46c0      	nop			; (mov r8, r8)
    ace8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    acea:	bc08      	pop	{r3}
    acec:	469e      	mov	lr, r3
    acee:	4770      	bx	lr

0000acf0 <__fini_array_start>:
    acf0:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	1325 0000 1999 0000 19c1 0000 12e5 0000     %...............
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12606>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <wave_header>:
200000ac:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
200000bc:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
200000cc:	0004 0010 6164 6174 0000 0000               ....data....

200000d8 <udc_config>:
200000d8:	010c 2000 00e4 2000 0000 0000               ... ... ....

200000e4 <udc_config_lsfs>:
200000e4:	00ec 2000 0120 2000                         ...  .. 

200000ec <udc_desc_fs>:
200000ec:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000fc:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

2000010c <udc_device_desc>:
2000010c:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000011c:	0103 0000                                   ....

20000120 <udi_apis>:
20000120:	0030 2000                                   0.. 

20000124 <ss_pins>:
20000124:	0105                                             .

20000125 <g_interrupt_enabled>:
20000125:	0001 2c00                                        ...

20000128 <_impure_ptr>:
20000128:	012c 2000                                   ,.. 

2000012c <impure_data>:
2000012c:	0000 0000 ac60 0000 ac80 0000 ac40 0000     ....`.......@...
	...
