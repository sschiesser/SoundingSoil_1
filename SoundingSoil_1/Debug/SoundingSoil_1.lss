
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aea0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000aea0  0000aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000018c  20000000  0000aea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000cc4  2000018c  0000b034  0002018c  2**2
                  ALLOC
  4 .stack        00002000  20000e50  0000bcf8  0002018c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006abcd  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008cf4  00000000  00000000  0008adda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016f2c  00000000  00000000  00093ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001108  00000000  00000000  000aa9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001a00  00000000  00000000  000abb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026a0a  00000000  00000000  000ad502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001ff4a  00000000  00000000  000d3f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a009c  00000000  00000000  000f3e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003544  00000000  00000000  00193ef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 2e 00 20 b5 8d 00 00 b1 8d 00 00 b1 8d 00 00     P.. ............
	...
      2c:	b1 8d 00 00 00 00 00 00 00 00 00 00 b1 8d 00 00     ................
      3c:	b1 8d 00 00 b1 8d 00 00 b1 8d 00 00 b1 8d 00 00     ................
      4c:	b1 8d 00 00 71 76 00 00 b1 8d 00 00 b1 8d 00 00     ....qv..........
      5c:	2d 6e 00 00 b1 8d 00 00 61 26 00 00 71 26 00 00     -n......a&..q&..
      6c:	81 26 00 00 91 26 00 00 a1 26 00 00 b1 26 00 00     .&...&...&...&..
      7c:	2d 0a 00 00 3d 0a 00 00 4d 0a 00 00 b1 8d 00 00     -...=...M.......
      8c:	b1 8d 00 00 b1 8d 00 00 b1 8d 00 00 b1 8d 00 00     ................
      9c:	b1 8d 00 00 b1 8d 00 00 b1 8d 00 00 b1 8d 00 00     ................
      ac:	b1 8d 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000018c 	.word	0x2000018c
      d4:	00000000 	.word	0x00000000
      d8:	0000aea8 	.word	0x0000aea8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000190 	.word	0x20000190
     108:	0000aea8 	.word	0x0000aea8
     10c:	0000aea8 	.word	0x0000aea8
     110:	00000000 	.word	0x00000000

00000114 <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     114:	1c93      	adds	r3, r2, #2
     116:	009b      	lsls	r3, r3, #2
     118:	18c3      	adds	r3, r0, r3
     11a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
     11c:	2136      	movs	r1, #54	; 0x36
     11e:	2301      	movs	r3, #1
     120:	4093      	lsls	r3, r2
     122:	001a      	movs	r2, r3
     124:	5c43      	ldrb	r3, [r0, r1]
     126:	4313      	orrs	r3, r2
     128:	5443      	strb	r3, [r0, r1]
}
     12a:	4770      	bx	lr

0000012c <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     12c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     12e:	2317      	movs	r3, #23
	if (length == 0) {
     130:	2a00      	cmp	r2, #0
     132:	d101      	bne.n	138 <spi_write_buffer_job+0xc>

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);

	return STATUS_OK;
}
     134:	0018      	movs	r0, r3
     136:	bd10      	pop	{r4, pc}
	if (module->status == STATUS_BUSY) {
     138:	3321      	adds	r3, #33	; 0x21
     13a:	5cc4      	ldrb	r4, [r0, r3]
		return STATUS_BUSY;
     13c:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     13e:	2c05      	cmp	r4, #5
     140:	d0f8      	beq.n	134 <spi_write_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
     142:	8682      	strh	r2, [r0, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
     144:	8642      	strh	r2, [r0, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
     146:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
     148:	2205      	movs	r2, #5
     14a:	3333      	adds	r3, #51	; 0x33
     14c:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_WRITE;
     14e:	3b37      	subs	r3, #55	; 0x37
     150:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     152:	6803      	ldr	r3, [r0, #0]
	if (module->mode == SPI_MODE_SLAVE) {
     154:	7942      	ldrb	r2, [r0, #5]
     156:	2a00      	cmp	r2, #0
     158:	d102      	bne.n	160 <spi_write_buffer_job+0x34>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     15a:	3202      	adds	r2, #2
     15c:	761a      	strb	r2, [r3, #24]
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     15e:	759a      	strb	r2, [r3, #22]
	if (module->receiver_enabled) {
     160:	79c2      	ldrb	r2, [r0, #7]
     162:	2a00      	cmp	r2, #0
     164:	d103      	bne.n	16e <spi_write_buffer_job+0x42>
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     166:	2201      	movs	r2, #1
     168:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     16a:	2300      	movs	r3, #0
     16c:	e7e2      	b.n	134 <spi_write_buffer_job+0x8>
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
     16e:	2205      	movs	r2, #5
     170:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     172:	2300      	movs	r3, #0
     174:	e7de      	b.n	134 <spi_write_buffer_job+0x8>
	...

00000178 <spi_read_buffer_job>:
enum status_code spi_read_buffer_job(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     178:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     17a:	2417      	movs	r4, #23
	if (length == 0) {
     17c:	2a00      	cmp	r2, #0
     17e:	d101      	bne.n	184 <spi_read_buffer_job+0xc>

	dummy_write = dummy;
	/* Issue internal read */
	_spi_read_buffer(module, rx_data, length);
	return STATUS_OK;
}
     180:	0020      	movs	r0, r4
     182:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
     184:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
     186:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
     188:	2d00      	cmp	r5, #0
     18a:	d0f9      	beq.n	180 <spi_read_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
     18c:	341c      	adds	r4, #28
     18e:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
     190:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     192:	2d05      	cmp	r5, #5
     194:	d0f4      	beq.n	180 <spi_read_buffer_job+0x8>
	dummy_write = dummy;
     196:	4c0f      	ldr	r4, [pc, #60]	; (1d4 <spi_read_buffer_job+0x5c>)
     198:	8023      	strh	r3, [r4, #0]
	module->remaining_rx_buffer_length = length;
     19a:	8602      	strh	r2, [r0, #48]	; 0x30
	module->remaining_dummy_buffer_length = length;
     19c:	8642      	strh	r2, [r0, #50]	; 0x32
	module->rx_buffer_ptr = rx_data;
     19e:	6281      	str	r1, [r0, #40]	; 0x28
	module->status = STATUS_BUSY;
     1a0:	2205      	movs	r2, #5
     1a2:	2338      	movs	r3, #56	; 0x38
     1a4:	54c2      	strb	r2, [r0, r3]
	module->dir = SPI_DIRECTION_READ;
     1a6:	2300      	movs	r3, #0
     1a8:	7243      	strb	r3, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
     1aa:	6803      	ldr	r3, [r0, #0]
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     1ac:	7942      	ldrb	r2, [r0, #5]
     1ae:	2a01      	cmp	r2, #1
     1b0:	d009      	beq.n	1c6 <spi_read_buffer_job+0x4e>
	if (module->mode == SPI_MODE_SLAVE) {
     1b2:	2a00      	cmp	r2, #0
     1b4:	d10c      	bne.n	1d0 <spi_read_buffer_job+0x58>
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     1b6:	3202      	adds	r2, #2
     1b8:	761a      	strb	r2, [r3, #24]
		hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     1ba:	3206      	adds	r2, #6
     1bc:	761a      	strb	r2, [r3, #24]
		tmp_intenset |= SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     1be:	3206      	adds	r2, #6
	hw->INTENSET.reg = tmp_intenset;
     1c0:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     1c2:	2400      	movs	r4, #0
     1c4:	e7dc      	b.n	180 <spi_read_buffer_job+0x8>
	if (module->mode == SPI_MODE_MASTER && module->dir == SPI_DIRECTION_READ) {
     1c6:	7a42      	ldrb	r2, [r0, #9]
		tmp_intenset |= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     1c8:	4251      	negs	r1, r2
     1ca:	414a      	adcs	r2, r1
     1cc:	3204      	adds	r2, #4
     1ce:	e7f7      	b.n	1c0 <spi_read_buffer_job+0x48>
	tmp_intenset = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     1d0:	2204      	movs	r2, #4
     1d2:	e7f5      	b.n	1c0 <spi_read_buffer_job+0x48>
     1d4:	20000368 	.word	0x20000368

000001d8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     1da:	0080      	lsls	r0, r0, #2
     1dc:	4b85      	ldr	r3, [pc, #532]	; (3f4 <_spi_interrupt_handler+0x21c>)
     1de:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     1e0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     1e2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     1e4:	5ce3      	ldrb	r3, [r4, r3]
     1e6:	2236      	movs	r2, #54	; 0x36
     1e8:	5ca7      	ldrb	r7, [r4, r2]
     1ea:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     1ec:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     1ee:	7db5      	ldrb	r5, [r6, #22]
     1f0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     1f2:	07eb      	lsls	r3, r5, #31
     1f4:	d52e      	bpl.n	254 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     1f6:	7963      	ldrb	r3, [r4, #5]
     1f8:	2b01      	cmp	r3, #1
     1fa:	d025      	beq.n	248 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     1fc:	2b00      	cmp	r3, #0
     1fe:	d129      	bne.n	254 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     200:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     202:	2b00      	cmp	r3, #0
     204:	d026      	beq.n	254 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     206:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     20a:	7813      	ldrb	r3, [r2, #0]
     20c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     20e:	1c50      	adds	r0, r2, #1
     210:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     212:	79a0      	ldrb	r0, [r4, #6]
     214:	2801      	cmp	r0, #1
     216:	d100      	bne.n	21a <_spi_interrupt_handler+0x42>
     218:	e069      	b.n	2ee <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     21a:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     21c:	05db      	lsls	r3, r3, #23
     21e:	0ddb      	lsrs	r3, r3, #23
     220:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     222:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     224:	3b01      	subs	r3, #1
     226:	b29b      	uxth	r3, r3
     228:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     22a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     22c:	b29b      	uxth	r3, r3
     22e:	2b00      	cmp	r3, #0
     230:	d110      	bne.n	254 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     232:	3301      	adds	r3, #1
     234:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     236:	7a63      	ldrb	r3, [r4, #9]
     238:	2b01      	cmp	r3, #1
     23a:	d10b      	bne.n	254 <_spi_interrupt_handler+0x7c>
     23c:	79e3      	ldrb	r3, [r4, #7]
     23e:	2b00      	cmp	r3, #0
     240:	d108      	bne.n	254 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     242:	3302      	adds	r3, #2
     244:	75b3      	strb	r3, [r6, #22]
     246:	e005      	b.n	254 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
     248:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     24a:	2b00      	cmp	r3, #0
     24c:	d03e      	beq.n	2cc <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
     24e:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     250:	2b00      	cmp	r3, #0
     252:	d1d8      	bne.n	206 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     254:	076b      	lsls	r3, r5, #29
     256:	d511      	bpl.n	27c <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     258:	8b73      	ldrh	r3, [r6, #26]
     25a:	075b      	lsls	r3, r3, #29
     25c:	d551      	bpl.n	302 <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
     25e:	7a63      	ldrb	r3, [r4, #9]
     260:	2b01      	cmp	r3, #1
     262:	d008      	beq.n	276 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     264:	221e      	movs	r2, #30
     266:	2338      	movs	r3, #56	; 0x38
     268:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     26a:	3b35      	subs	r3, #53	; 0x35
     26c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     26e:	3302      	adds	r3, #2
     270:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     272:	073b      	lsls	r3, r7, #28
     274:	d441      	bmi.n	2fa <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     276:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     278:	2304      	movs	r3, #4
     27a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     27c:	07ab      	lsls	r3, r5, #30
     27e:	d515      	bpl.n	2ac <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     280:	7963      	ldrb	r3, [r4, #5]
     282:	2b00      	cmp	r3, #0
     284:	d10e      	bne.n	2a4 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     286:	3307      	adds	r3, #7
     288:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     28a:	3b05      	subs	r3, #5
     28c:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     28e:	3301      	adds	r3, #1
     290:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     292:	2300      	movs	r3, #0
     294:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     296:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     298:	3338      	adds	r3, #56	; 0x38
     29a:	2200      	movs	r2, #0
     29c:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     29e:	06fb      	lsls	r3, r7, #27
     2a0:	d500      	bpl.n	2a4 <_spi_interrupt_handler+0xcc>
     2a2:	e07f      	b.n	3a4 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     2a4:	7963      	ldrb	r3, [r4, #5]
     2a6:	2b01      	cmp	r3, #1
     2a8:	d100      	bne.n	2ac <_spi_interrupt_handler+0xd4>
     2aa:	e07f      	b.n	3ac <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     2ac:	072b      	lsls	r3, r5, #28
     2ae:	d508      	bpl.n	2c2 <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
     2b0:	7963      	ldrb	r3, [r4, #5]
     2b2:	2b00      	cmp	r3, #0
     2b4:	d105      	bne.n	2c2 <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     2b6:	3308      	adds	r3, #8
     2b8:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     2ba:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     2bc:	06bb      	lsls	r3, r7, #26
     2be:	d500      	bpl.n	2c2 <_spi_interrupt_handler+0xea>
     2c0:	e08a      	b.n	3d8 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     2c2:	b26d      	sxtb	r5, r5
     2c4:	2d00      	cmp	r5, #0
     2c6:	da00      	bge.n	2ca <_spi_interrupt_handler+0xf2>
     2c8:	e08a      	b.n	3e0 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     2cc:	4b4a      	ldr	r3, [pc, #296]	; (3f8 <_spi_interrupt_handler+0x220>)
     2ce:	881b      	ldrh	r3, [r3, #0]
     2d0:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     2d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     2d4:	3b01      	subs	r3, #1
     2d6:	b29b      	uxth	r3, r3
     2d8:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     2da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     2dc:	b29b      	uxth	r3, r3
     2de:	2b00      	cmp	r3, #0
     2e0:	d101      	bne.n	2e6 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     2e2:	3301      	adds	r3, #1
     2e4:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     2e6:	7963      	ldrb	r3, [r4, #5]
		if (0
     2e8:	2b01      	cmp	r3, #1
     2ea:	d0b0      	beq.n	24e <_spi_interrupt_handler+0x76>
     2ec:	e786      	b.n	1fc <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     2ee:	7850      	ldrb	r0, [r2, #1]
     2f0:	0200      	lsls	r0, r0, #8
     2f2:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     2f4:	3202      	adds	r2, #2
     2f6:	62e2      	str	r2, [r4, #44]	; 0x2c
     2f8:	e790      	b.n	21c <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     2fa:	0020      	movs	r0, r4
     2fc:	69a3      	ldr	r3, [r4, #24]
     2fe:	4798      	blx	r3
     300:	e7b9      	b.n	276 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     302:	7a63      	ldrb	r3, [r4, #9]
     304:	2b01      	cmp	r3, #1
     306:	d027      	beq.n	358 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     308:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     30c:	05db      	lsls	r3, r3, #23
     30e:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     310:	b2da      	uxtb	r2, r3
     312:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     314:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     316:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     318:	1c51      	adds	r1, r2, #1
     31a:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     31c:	79a1      	ldrb	r1, [r4, #6]
     31e:	2901      	cmp	r1, #1
     320:	d033      	beq.n	38a <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
     322:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     324:	3b01      	subs	r3, #1
     326:	b29b      	uxth	r3, r3
     328:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     32a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     32c:	b29b      	uxth	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	d1a4      	bne.n	27c <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
     332:	2200      	movs	r2, #0
     334:	3338      	adds	r3, #56	; 0x38
     336:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     338:	3b34      	subs	r3, #52	; 0x34
     33a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     33c:	7a63      	ldrb	r3, [r4, #9]
     33e:	2b02      	cmp	r3, #2
     340:	d029      	beq.n	396 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
     342:	7a63      	ldrb	r3, [r4, #9]
     344:	2b00      	cmp	r3, #0
     346:	d000      	beq.n	34a <_spi_interrupt_handler+0x172>
     348:	e798      	b.n	27c <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     34a:	07bb      	lsls	r3, r7, #30
     34c:	d400      	bmi.n	350 <_spi_interrupt_handler+0x178>
     34e:	e795      	b.n	27c <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     350:	0020      	movs	r0, r4
     352:	6923      	ldr	r3, [r4, #16]
     354:	4798      	blx	r3
     356:	e791      	b.n	27c <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     358:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     35c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     35e:	3b01      	subs	r3, #1
     360:	b29b      	uxth	r3, r3
     362:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     364:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     366:	b29b      	uxth	r3, r3
     368:	2b00      	cmp	r3, #0
     36a:	d000      	beq.n	36e <_spi_interrupt_handler+0x196>
     36c:	e786      	b.n	27c <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     36e:	3304      	adds	r3, #4
     370:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     372:	2200      	movs	r2, #0
     374:	3334      	adds	r3, #52	; 0x34
     376:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     378:	3b35      	subs	r3, #53	; 0x35
     37a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     37c:	07fb      	lsls	r3, r7, #31
     37e:	d400      	bmi.n	382 <_spi_interrupt_handler+0x1aa>
     380:	e77c      	b.n	27c <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     382:	0020      	movs	r0, r4
     384:	68e3      	ldr	r3, [r4, #12]
     386:	4798      	blx	r3
     388:	e778      	b.n	27c <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     38a:	0a1b      	lsrs	r3, r3, #8
     38c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     38e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     390:	3301      	adds	r3, #1
     392:	62a3      	str	r3, [r4, #40]	; 0x28
     394:	e7c5      	b.n	322 <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     396:	077b      	lsls	r3, r7, #29
     398:	d400      	bmi.n	39c <_spi_interrupt_handler+0x1c4>
     39a:	e76f      	b.n	27c <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     39c:	0020      	movs	r0, r4
     39e:	6963      	ldr	r3, [r4, #20]
     3a0:	4798      	blx	r3
     3a2:	e76b      	b.n	27c <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     3a4:	0020      	movs	r0, r4
     3a6:	69e3      	ldr	r3, [r4, #28]
     3a8:	4798      	blx	r3
     3aa:	e77b      	b.n	2a4 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     3ac:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     3ae:	2b01      	cmp	r3, #1
     3b0:	d000      	beq.n	3b4 <_spi_interrupt_handler+0x1dc>
     3b2:	e786      	b.n	2c2 <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     3b4:	79e3      	ldrb	r3, [r4, #7]
     3b6:	2b00      	cmp	r3, #0
     3b8:	d000      	beq.n	3bc <_spi_interrupt_handler+0x1e4>
     3ba:	e782      	b.n	2c2 <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     3bc:	3302      	adds	r3, #2
     3be:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
     3c0:	3301      	adds	r3, #1
     3c2:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     3c4:	2200      	movs	r2, #0
     3c6:	3335      	adds	r3, #53	; 0x35
     3c8:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     3ca:	07fb      	lsls	r3, r7, #31
     3cc:	d400      	bmi.n	3d0 <_spi_interrupt_handler+0x1f8>
     3ce:	e76d      	b.n	2ac <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     3d0:	0020      	movs	r0, r4
     3d2:	68e3      	ldr	r3, [r4, #12]
     3d4:	4798      	blx	r3
     3d6:	e769      	b.n	2ac <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     3d8:	0020      	movs	r0, r4
     3da:	6a23      	ldr	r3, [r4, #32]
     3dc:	4798      	blx	r3
     3de:	e770      	b.n	2c2 <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     3e0:	2380      	movs	r3, #128	; 0x80
     3e2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     3e4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     3e6:	067b      	lsls	r3, r7, #25
     3e8:	d400      	bmi.n	3ec <_spi_interrupt_handler+0x214>
     3ea:	e76e      	b.n	2ca <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     3ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
     3ee:	0020      	movs	r0, r4
     3f0:	4798      	blx	r3
}
     3f2:	e76a      	b.n	2ca <_spi_interrupt_handler+0xf2>
     3f4:	200003c4 	.word	0x200003c4
     3f8:	20000368 	.word	0x20000368

000003fc <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     3fc:	4b09      	ldr	r3, [pc, #36]	; (424 <_tcc_get_inst_index+0x28>)
     3fe:	4298      	cmp	r0, r3
     400:	d00c      	beq.n	41c <_tcc_get_inst_index+0x20>
     402:	4b09      	ldr	r3, [pc, #36]	; (428 <_tcc_get_inst_index+0x2c>)
     404:	4298      	cmp	r0, r3
     406:	d007      	beq.n	418 <_tcc_get_inst_index+0x1c>
     408:	4a08      	ldr	r2, [pc, #32]	; (42c <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     40a:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
     40c:	4290      	cmp	r0, r2
     40e:	d001      	beq.n	414 <_tcc_get_inst_index+0x18>
}
     410:	0018      	movs	r0, r3
     412:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     414:	3302      	adds	r3, #2
     416:	e002      	b.n	41e <_tcc_get_inst_index+0x22>
     418:	2301      	movs	r3, #1
     41a:	e000      	b.n	41e <_tcc_get_inst_index+0x22>
     41c:	2300      	movs	r3, #0
			return i;
     41e:	b2db      	uxtb	r3, r3
     420:	e7f6      	b.n	410 <_tcc_get_inst_index+0x14>
     422:	46c0      	nop			; (mov r8, r8)
     424:	42002000 	.word	0x42002000
     428:	42002400 	.word	0x42002400
     42c:	42002800 	.word	0x42002800

00000430 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     430:	b510      	push	{r4, lr}
     432:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     434:	0008      	movs	r0, r1
     436:	4b4f      	ldr	r3, [pc, #316]	; (574 <tcc_get_config_defaults+0x144>)
     438:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     43a:	2300      	movs	r3, #0
     43c:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     43e:	0080      	lsls	r0, r0, #2
     440:	4a4d      	ldr	r2, [pc, #308]	; (578 <tcc_get_config_defaults+0x148>)
     442:	5882      	ldr	r2, [r0, r2]
     444:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     446:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     448:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     44a:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     44c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     44e:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     450:	61e3      	str	r3, [r4, #28]
     452:	6223      	str	r3, [r4, #32]
     454:	6263      	str	r3, [r4, #36]	; 0x24
     456:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     458:	7523      	strb	r3, [r4, #20]
     45a:	7563      	strb	r3, [r4, #21]
     45c:	75a3      	strb	r3, [r4, #22]
     45e:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     460:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     462:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     464:	7423      	strb	r3, [r4, #16]
     466:	7463      	strb	r3, [r4, #17]
     468:	74a3      	strb	r3, [r4, #18]
     46a:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     46c:	222c      	movs	r2, #44	; 0x2c
     46e:	54a3      	strb	r3, [r4, r2]
     470:	3201      	adds	r2, #1
     472:	54a3      	strb	r3, [r4, r2]
     474:	3201      	adds	r2, #1
     476:	54a3      	strb	r3, [r4, r2]
     478:	3201      	adds	r2, #1
     47a:	54a3      	strb	r3, [r4, r2]
     47c:	3201      	adds	r2, #1
     47e:	54a3      	strb	r3, [r4, r2]
     480:	3201      	adds	r2, #1
     482:	54a3      	strb	r3, [r4, r2]
     484:	3201      	adds	r2, #1
     486:	54a3      	strb	r3, [r4, r2]
     488:	3201      	adds	r2, #1
     48a:	54a3      	strb	r3, [r4, r2]
     48c:	3201      	adds	r2, #1
     48e:	54a3      	strb	r3, [r4, r2]
     490:	3201      	adds	r2, #1
     492:	54a3      	strb	r3, [r4, r2]
     494:	3201      	adds	r2, #1
     496:	54a3      	strb	r3, [r4, r2]
     498:	3201      	adds	r2, #1
     49a:	54a3      	strb	r3, [r4, r2]
     49c:	3201      	adds	r2, #1
     49e:	54a3      	strb	r3, [r4, r2]
     4a0:	3201      	adds	r2, #1
     4a2:	54a3      	strb	r3, [r4, r2]
     4a4:	3201      	adds	r2, #1
     4a6:	54a3      	strb	r3, [r4, r2]
     4a8:	3201      	adds	r2, #1
     4aa:	54a3      	strb	r3, [r4, r2]
     4ac:	3201      	adds	r2, #1
     4ae:	54a3      	strb	r3, [r4, r2]
     4b0:	3201      	adds	r2, #1
     4b2:	54a3      	strb	r3, [r4, r2]
     4b4:	3201      	adds	r2, #1
     4b6:	54a3      	strb	r3, [r4, r2]
     4b8:	3201      	adds	r2, #1
     4ba:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     4bc:	3201      	adds	r2, #1
     4be:	54a3      	strb	r3, [r4, r2]
     4c0:	3201      	adds	r2, #1
     4c2:	54a3      	strb	r3, [r4, r2]
     4c4:	3201      	adds	r2, #1
     4c6:	54a3      	strb	r3, [r4, r2]
     4c8:	3201      	adds	r2, #1
     4ca:	54a3      	strb	r3, [r4, r2]
     4cc:	3201      	adds	r2, #1
     4ce:	54a3      	strb	r3, [r4, r2]
     4d0:	3201      	adds	r2, #1
     4d2:	54a3      	strb	r3, [r4, r2]
     4d4:	3201      	adds	r2, #1
     4d6:	54a3      	strb	r3, [r4, r2]
     4d8:	3201      	adds	r2, #1
     4da:	54a3      	strb	r3, [r4, r2]
     4dc:	3201      	adds	r2, #1
     4de:	54a3      	strb	r3, [r4, r2]
     4e0:	3201      	adds	r2, #1
     4e2:	54a3      	strb	r3, [r4, r2]
     4e4:	3201      	adds	r2, #1
     4e6:	54a3      	strb	r3, [r4, r2]
     4e8:	3201      	adds	r2, #1
     4ea:	54a3      	strb	r3, [r4, r2]
     4ec:	3201      	adds	r2, #1
     4ee:	54a3      	strb	r3, [r4, r2]
     4f0:	3201      	adds	r2, #1
     4f2:	54a3      	strb	r3, [r4, r2]
     4f4:	3201      	adds	r2, #1
     4f6:	54a3      	strb	r3, [r4, r2]
     4f8:	3201      	adds	r2, #1
     4fa:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     4fc:	3201      	adds	r2, #1
     4fe:	54a3      	strb	r3, [r4, r2]
     500:	3201      	adds	r2, #1
     502:	54a3      	strb	r3, [r4, r2]
     504:	3201      	adds	r2, #1
     506:	54a3      	strb	r3, [r4, r2]
     508:	3201      	adds	r2, #1
     50a:	54a3      	strb	r3, [r4, r2]
     50c:	3201      	adds	r2, #1
     50e:	54a3      	strb	r3, [r4, r2]
     510:	3201      	adds	r2, #1
     512:	54a3      	strb	r3, [r4, r2]
     514:	3201      	adds	r2, #1
     516:	54a3      	strb	r3, [r4, r2]
     518:	3201      	adds	r2, #1
     51a:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     51c:	3241      	adds	r2, #65	; 0x41
     51e:	54a3      	strb	r3, [r4, r2]
     520:	65a3      	str	r3, [r4, #88]	; 0x58
     522:	67a3      	str	r3, [r4, #120]	; 0x78
     524:	3201      	adds	r2, #1
     526:	54a3      	strb	r3, [r4, r2]
     528:	65e3      	str	r3, [r4, #92]	; 0x5c
     52a:	67e3      	str	r3, [r4, #124]	; 0x7c
     52c:	3201      	adds	r2, #1
     52e:	54a3      	strb	r3, [r4, r2]
     530:	6623      	str	r3, [r4, #96]	; 0x60
     532:	3a1a      	subs	r2, #26
     534:	50a3      	str	r3, [r4, r2]
     536:	321b      	adds	r2, #27
     538:	54a3      	strb	r3, [r4, r2]
     53a:	6663      	str	r3, [r4, #100]	; 0x64
     53c:	3a17      	subs	r2, #23
     53e:	50a3      	str	r3, [r4, r2]
     540:	3218      	adds	r2, #24
     542:	54a3      	strb	r3, [r4, r2]
     544:	66a3      	str	r3, [r4, #104]	; 0x68
     546:	3a14      	subs	r2, #20
     548:	50a3      	str	r3, [r4, r2]
     54a:	3215      	adds	r2, #21
     54c:	54a3      	strb	r3, [r4, r2]
     54e:	66e3      	str	r3, [r4, #108]	; 0x6c
     550:	3a11      	subs	r2, #17
     552:	50a3      	str	r3, [r4, r2]
     554:	3212      	adds	r2, #18
     556:	54a3      	strb	r3, [r4, r2]
     558:	6723      	str	r3, [r4, #112]	; 0x70
     55a:	3a0e      	subs	r2, #14
     55c:	50a3      	str	r3, [r4, r2]
     55e:	320f      	adds	r2, #15
     560:	54a3      	strb	r3, [r4, r2]
     562:	6763      	str	r3, [r4, #116]	; 0x74
     564:	3a0b      	subs	r2, #11
     566:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     568:	2101      	movs	r1, #1
     56a:	320c      	adds	r2, #12
     56c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     56e:	3201      	adds	r2, #1
     570:	54a3      	strb	r3, [r4, r2]
}
     572:	bd10      	pop	{r4, pc}
     574:	000003fd 	.word	0x000003fd
     578:	0000a4cc 	.word	0x0000a4cc

0000057c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     57c:	b5f0      	push	{r4, r5, r6, r7, lr}
     57e:	46de      	mov	lr, fp
     580:	4657      	mov	r7, sl
     582:	464e      	mov	r6, r9
     584:	4645      	mov	r5, r8
     586:	b5e0      	push	{r5, r6, r7, lr}
     588:	b091      	sub	sp, #68	; 0x44
     58a:	9001      	str	r0, [sp, #4]
     58c:	000c      	movs	r4, r1
     58e:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     590:	0008      	movs	r0, r1
     592:	4bc3      	ldr	r3, [pc, #780]	; (8a0 <tcc_init+0x324>)
     594:	4798      	blx	r3
     596:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     598:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     59a:	48c2      	ldr	r0, [pc, #776]	; (8a4 <tcc_init+0x328>)
     59c:	6a02      	ldr	r2, [r0, #32]
     59e:	009e      	lsls	r6, r3, #2
     5a0:	4fc1      	ldr	r7, [pc, #772]	; (8a8 <tcc_init+0x32c>)
     5a2:	59f7      	ldr	r7, [r6, r7]
     5a4:	433a      	orrs	r2, r7
     5a6:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     5a8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     5aa:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     5ac:	0792      	lsls	r2, r2, #30
     5ae:	d506      	bpl.n	5be <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     5b0:	b011      	add	sp, #68	; 0x44
     5b2:	bc3c      	pop	{r2, r3, r4, r5}
     5b4:	4690      	mov	r8, r2
     5b6:	4699      	mov	r9, r3
     5b8:	46a2      	mov	sl, r4
     5ba:	46ab      	mov	fp, r5
     5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     5be:	6822      	ldr	r2, [r4, #0]
     5c0:	2701      	movs	r7, #1
     5c2:	4017      	ands	r7, r2
     5c4:	d1f4      	bne.n	5b0 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     5c6:	48b9      	ldr	r0, [pc, #740]	; (8ac <tcc_init+0x330>)
     5c8:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     5ca:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     5cc:	682e      	ldr	r6, [r5, #0]
     5ce:	42b2      	cmp	r2, r6
     5d0:	d3ee      	bcc.n	5b0 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     5d2:	686e      	ldr	r6, [r5, #4]
     5d4:	42b2      	cmp	r2, r6
     5d6:	d3eb      	bcc.n	5b0 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     5d8:	69e8      	ldr	r0, [r5, #28]
     5da:	4282      	cmp	r2, r0
     5dc:	d200      	bcs.n	5e0 <tcc_init+0x64>
     5de:	e1b9      	b.n	954 <tcc_init+0x3d8>
     5e0:	6a28      	ldr	r0, [r5, #32]
     5e2:	4282      	cmp	r2, r0
     5e4:	d200      	bcs.n	5e8 <tcc_init+0x6c>
     5e6:	e1b7      	b.n	958 <tcc_init+0x3dc>
     5e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
     5ea:	4282      	cmp	r2, r0
     5ec:	d200      	bcs.n	5f0 <tcc_init+0x74>
     5ee:	e1b5      	b.n	95c <tcc_init+0x3e0>
     5f0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     5f2:	4282      	cmp	r2, r0
     5f4:	d200      	bcs.n	5f8 <tcc_init+0x7c>
     5f6:	e1b3      	b.n	960 <tcc_init+0x3e4>
     5f8:	2298      	movs	r2, #152	; 0x98
     5fa:	4694      	mov	ip, r2
     5fc:	44ac      	add	ip, r5
     5fe:	4662      	mov	r2, ip
     600:	9208      	str	r2, [sp, #32]
     602:	2000      	movs	r0, #0
     604:	e003      	b.n	60e <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     606:	3001      	adds	r0, #1
     608:	3201      	adds	r2, #1
     60a:	2808      	cmp	r0, #8
     60c:	d008      	beq.n	620 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     60e:	7816      	ldrb	r6, [r2, #0]
     610:	2e00      	cmp	r6, #0
     612:	d0f8      	beq.n	606 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     614:	4ea6      	ldr	r6, [pc, #664]	; (8b0 <tcc_init+0x334>)
     616:	5c76      	ldrb	r6, [r6, r1]
     618:	4286      	cmp	r6, r0
     61a:	dcf4      	bgt.n	606 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     61c:	2017      	movs	r0, #23
     61e:	e7c7      	b.n	5b0 <tcc_init+0x34>
     620:	2200      	movs	r2, #0
     622:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     624:	2080      	movs	r0, #128	; 0x80
     626:	0440      	lsls	r0, r0, #17
     628:	4684      	mov	ip, r0
     62a:	e002      	b.n	632 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     62c:	3201      	adds	r2, #1
     62e:	2a04      	cmp	r2, #4
     630:	d00e      	beq.n	650 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     632:	18a8      	adds	r0, r5, r2
     634:	7c00      	ldrb	r0, [r0, #16]
     636:	2801      	cmp	r0, #1
     638:	d1f8      	bne.n	62c <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     63a:	489e      	ldr	r0, [pc, #632]	; (8b4 <tcc_init+0x338>)
     63c:	5c40      	ldrb	r0, [r0, r1]
     63e:	4290      	cmp	r0, r2
     640:	da00      	bge.n	644 <tcc_init+0xc8>
     642:	e18f      	b.n	964 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     644:	4660      	mov	r0, ip
     646:	4090      	lsls	r0, r2
     648:	9e02      	ldr	r6, [sp, #8]
     64a:	4306      	orrs	r6, r0
     64c:	9602      	str	r6, [sp, #8]
     64e:	e7ed      	b.n	62c <tcc_init+0xb0>
	if (config->run_in_standby) {
     650:	329d      	adds	r2, #157	; 0x9d
     652:	5caa      	ldrb	r2, [r5, r2]
     654:	2a00      	cmp	r2, #0
     656:	d004      	beq.n	662 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     658:	2280      	movs	r2, #128	; 0x80
     65a:	0112      	lsls	r2, r2, #4
     65c:	9902      	ldr	r1, [sp, #8]
     65e:	4311      	orrs	r1, r2
     660:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     662:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     664:	1e51      	subs	r1, r2, #1
     666:	418a      	sbcs	r2, r1
     668:	0092      	lsls	r2, r2, #2
     66a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     66c:	7a6a      	ldrb	r2, [r5, #9]
     66e:	2a01      	cmp	r2, #1
     670:	d022      	beq.n	6b8 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     672:	4a90      	ldr	r2, [pc, #576]	; (8b4 <tcc_init+0x338>)
     674:	5cd2      	ldrb	r2, [r2, r3]
     676:	0011      	movs	r1, r2
     678:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     67a:	2235      	movs	r2, #53	; 0x35
     67c:	5caa      	ldrb	r2, [r5, r2]
     67e:	428a      	cmp	r2, r1
     680:	d300      	bcc.n	684 <tcc_init+0x108>
     682:	e179      	b.n	978 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     684:	212c      	movs	r1, #44	; 0x2c
     686:	5c69      	ldrb	r1, [r5, r1]
     688:	290f      	cmp	r1, #15
     68a:	d900      	bls.n	68e <tcc_init+0x112>
     68c:	e174      	b.n	978 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     68e:	7b28      	ldrb	r0, [r5, #12]
     690:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     692:	7ae8      	ldrb	r0, [r5, #11]
     694:	900b      	str	r0, [sp, #44]	; 0x2c
     696:	202d      	movs	r0, #45	; 0x2d
     698:	4682      	mov	sl, r0
     69a:	44aa      	add	sl, r5
     69c:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     69e:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     6a0:	ae0e      	add	r6, sp, #56	; 0x38
     6a2:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     6a4:	26c0      	movs	r6, #192	; 0xc0
     6a6:	0136      	lsls	r6, r6, #4
     6a8:	46b1      	mov	r9, r6
     6aa:	4684      	mov	ip, r0
     6ac:	46a0      	mov	r8, r4
     6ae:	0028      	movs	r0, r5
     6b0:	4655      	mov	r5, sl
     6b2:	9309      	str	r3, [sp, #36]	; 0x24
     6b4:	4682      	mov	sl, r0
     6b6:	e035      	b.n	724 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     6b8:	9906      	ldr	r1, [sp, #24]
     6ba:	4311      	orrs	r1, r2
     6bc:	9106      	str	r1, [sp, #24]
     6be:	e7d8      	b.n	672 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     6c0:	0292      	lsls	r2, r2, #10
     6c2:	464f      	mov	r7, r9
     6c4:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6c6:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     6c8:	7919      	ldrb	r1, [r3, #4]
     6ca:	468b      	mov	fp, r1
     6cc:	2103      	movs	r1, #3
     6ce:	465f      	mov	r7, fp
     6d0:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6d2:	430a      	orrs	r2, r1
     6d4:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     6d6:	795a      	ldrb	r2, [r3, #5]
     6d8:	0152      	lsls	r2, r2, #5
     6da:	2160      	movs	r1, #96	; 0x60
     6dc:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6de:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     6e0:	7999      	ldrb	r1, [r3, #6]
     6e2:	0209      	lsls	r1, r1, #8
     6e4:	26c0      	movs	r6, #192	; 0xc0
     6e6:	00b6      	lsls	r6, r6, #2
     6e8:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6ea:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     6ec:	79da      	ldrb	r2, [r3, #7]
     6ee:	0312      	lsls	r2, r2, #12
     6f0:	21e0      	movs	r1, #224	; 0xe0
     6f2:	01c9      	lsls	r1, r1, #7
     6f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     6f6:	4316      	orrs	r6, r2
     6f8:	4334      	orrs	r4, r6
     6fa:	9a03      	ldr	r2, [sp, #12]
     6fc:	4314      	orrs	r4, r2
     6fe:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     700:	4662      	mov	r2, ip
     702:	9907      	ldr	r1, [sp, #28]
     704:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     706:	2a04      	cmp	r2, #4
     708:	d02a      	beq.n	760 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     70a:	7c9a      	ldrb	r2, [r3, #18]
     70c:	9905      	ldr	r1, [sp, #20]
     70e:	4291      	cmp	r1, r2
     710:	d800      	bhi.n	714 <tcc_init+0x198>
     712:	e131      	b.n	978 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     714:	7a59      	ldrb	r1, [r3, #9]
     716:	350a      	adds	r5, #10
     718:	2304      	movs	r3, #4
     71a:	469b      	mov	fp, r3
     71c:	44dc      	add	ip, fp
     71e:	290f      	cmp	r1, #15
     720:	d900      	bls.n	724 <tcc_init+0x1a8>
     722:	e129      	b.n	978 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     724:	0609      	lsls	r1, r1, #24
     726:	23f0      	movs	r3, #240	; 0xf0
     728:	051b      	lsls	r3, r3, #20
     72a:	4019      	ands	r1, r3
     72c:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     72e:	782e      	ldrb	r6, [r5, #0]
     730:	0436      	lsls	r6, r6, #16
     732:	20ff      	movs	r0, #255	; 0xff
     734:	0400      	lsls	r0, r0, #16
     736:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     738:	7868      	ldrb	r0, [r5, #1]
     73a:	2480      	movs	r4, #128	; 0x80
     73c:	2800      	cmp	r0, #0
     73e:	d100      	bne.n	742 <tcc_init+0x1c6>
     740:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     742:	7898      	ldrb	r0, [r3, #2]
     744:	2708      	movs	r7, #8
     746:	9703      	str	r7, [sp, #12]
     748:	2800      	cmp	r0, #0
     74a:	d101      	bne.n	750 <tcc_init+0x1d4>
     74c:	9804      	ldr	r0, [sp, #16]
     74e:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     750:	78d8      	ldrb	r0, [r3, #3]
     752:	4683      	mov	fp, r0
     754:	2010      	movs	r0, #16
     756:	465f      	mov	r7, fp
     758:	2f00      	cmp	r7, #0
     75a:	d1b1      	bne.n	6c0 <tcc_init+0x144>
     75c:	9804      	ldr	r0, [sp, #16]
     75e:	e7af      	b.n	6c0 <tcc_init+0x144>
     760:	4644      	mov	r4, r8
     762:	4655      	mov	r5, sl
     764:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     766:	4a52      	ldr	r2, [pc, #328]	; (8b0 <tcc_init+0x334>)
     768:	5cd2      	ldrb	r2, [r2, r3]
     76a:	4691      	mov	r9, r2
     76c:	4651      	mov	r1, sl
     76e:	3150      	adds	r1, #80	; 0x50
     770:	4650      	mov	r0, sl
     772:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     774:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     776:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     778:	2601      	movs	r6, #1
     77a:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     77c:	2602      	movs	r6, #2
     77e:	36ff      	adds	r6, #255	; 0xff
     780:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     782:	2680      	movs	r6, #128	; 0x80
     784:	0276      	lsls	r6, r6, #9
     786:	46b0      	mov	r8, r6
     788:	46a4      	mov	ip, r4
     78a:	001c      	movs	r4, r3
     78c:	464b      	mov	r3, r9
     78e:	e00f      	b.n	7b0 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     790:	7806      	ldrb	r6, [r0, #0]
     792:	2e00      	cmp	r6, #0
     794:	d007      	beq.n	7a6 <tcc_init+0x22a>
			if (i >= ow_num) {
     796:	4293      	cmp	r3, r2
     798:	d800      	bhi.n	79c <tcc_init+0x220>
     79a:	e0e7      	b.n	96c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     79c:	2e02      	cmp	r6, #2
     79e:	d014      	beq.n	7ca <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     7a0:	4656      	mov	r6, sl
     7a2:	4096      	lsls	r6, r2
     7a4:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     7a6:	3201      	adds	r2, #1
     7a8:	3101      	adds	r1, #1
     7aa:	3002      	adds	r0, #2
     7ac:	2a08      	cmp	r2, #8
     7ae:	d010      	beq.n	7d2 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     7b0:	780e      	ldrb	r6, [r1, #0]
     7b2:	2e00      	cmp	r6, #0
     7b4:	d0ec      	beq.n	790 <tcc_init+0x214>
			if (i >= ow_num) {
     7b6:	4293      	cmp	r3, r2
     7b8:	d800      	bhi.n	7bc <tcc_init+0x240>
     7ba:	e0d5      	b.n	968 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     7bc:	4646      	mov	r6, r8
     7be:	4096      	lsls	r6, r2
     7c0:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     7c2:	7806      	ldrb	r6, [r0, #0]
     7c4:	2e00      	cmp	r6, #0
     7c6:	d1e9      	bne.n	79c <tcc_init+0x220>
     7c8:	e7ed      	b.n	7a6 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     7ca:	465e      	mov	r6, fp
     7cc:	4096      	lsls	r6, r2
     7ce:	4337      	orrs	r7, r6
     7d0:	e7e9      	b.n	7a6 <tcc_init+0x22a>
     7d2:	4699      	mov	r9, r3
     7d4:	0023      	movs	r3, r4
     7d6:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     7d8:	7e6a      	ldrb	r2, [r5, #25]
     7da:	0112      	lsls	r2, r2, #4
     7dc:	2130      	movs	r1, #48	; 0x30
     7de:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     7e0:	7e28      	ldrb	r0, [r5, #24]
     7e2:	2207      	movs	r2, #7
     7e4:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     7e6:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     7e8:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     7ea:	2080      	movs	r0, #128	; 0x80
     7ec:	0240      	lsls	r0, r0, #9
     7ee:	000e      	movs	r6, r1
     7f0:	e002      	b.n	7f8 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     7f2:	3201      	adds	r2, #1
     7f4:	2a04      	cmp	r2, #4
     7f6:	d00b      	beq.n	810 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     7f8:	18a9      	adds	r1, r5, r2
     7fa:	7d09      	ldrb	r1, [r1, #20]
     7fc:	2900      	cmp	r1, #0
     7fe:	d0f8      	beq.n	7f2 <tcc_init+0x276>
			if (n >= cc_num) {
     800:	9905      	ldr	r1, [sp, #20]
     802:	4291      	cmp	r1, r2
     804:	dc00      	bgt.n	808 <tcc_init+0x28c>
     806:	e0b3      	b.n	970 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     808:	0001      	movs	r1, r0
     80a:	4091      	lsls	r1, r2
     80c:	430e      	orrs	r6, r1
     80e:	e7f0      	b.n	7f2 <tcc_init+0x276>
     810:	46b2      	mov	sl, r6
     812:	9801      	ldr	r0, [sp, #4]
     814:	0002      	movs	r2, r0
     816:	3204      	adds	r2, #4
     818:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     81a:	2100      	movs	r1, #0
     81c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     81e:	4282      	cmp	r2, r0
     820:	d1fc      	bne.n	81c <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     822:	2200      	movs	r2, #0
     824:	9801      	ldr	r0, [sp, #4]
     826:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     828:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     82a:	0099      	lsls	r1, r3, #2
     82c:	4a22      	ldr	r2, [pc, #136]	; (8b8 <tcc_init+0x33c>)
     82e:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     830:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     832:	22a0      	movs	r2, #160	; 0xa0
     834:	5ca9      	ldrb	r1, [r5, r2]
     836:	3a64      	subs	r2, #100	; 0x64
     838:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     83a:	a90d      	add	r1, sp, #52	; 0x34
     83c:	7aaa      	ldrb	r2, [r5, #10]
     83e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     840:	4a1e      	ldr	r2, [pc, #120]	; (8bc <tcc_init+0x340>)
     842:	5cd6      	ldrb	r6, [r2, r3]
     844:	0030      	movs	r0, r6
     846:	4b1e      	ldr	r3, [pc, #120]	; (8c0 <tcc_init+0x344>)
     848:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     84a:	0030      	movs	r0, r6
     84c:	4b1d      	ldr	r3, [pc, #116]	; (8c4 <tcc_init+0x348>)
     84e:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     850:	464b      	mov	r3, r9
     852:	2b00      	cmp	r3, #0
     854:	dd3c      	ble.n	8d0 <tcc_init+0x354>
     856:	002e      	movs	r6, r5
     858:	3658      	adds	r6, #88	; 0x58
     85a:	3398      	adds	r3, #152	; 0x98
     85c:	4698      	mov	r8, r3
     85e:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     860:	2301      	movs	r3, #1
     862:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     864:	46ab      	mov	fp, r5
     866:	4645      	mov	r5, r8
     868:	46a0      	mov	r8, r4
     86a:	9c08      	ldr	r4, [sp, #32]
     86c:	e003      	b.n	876 <tcc_init+0x2fa>
     86e:	3401      	adds	r4, #1
     870:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     872:	42ac      	cmp	r4, r5
     874:	d02a      	beq.n	8cc <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     876:	7823      	ldrb	r3, [r4, #0]
     878:	2b00      	cmp	r3, #0
     87a:	d0f8      	beq.n	86e <tcc_init+0x2f2>
     87c:	ab0c      	add	r3, sp, #48	; 0x30
     87e:	464a      	mov	r2, r9
     880:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     882:	2300      	movs	r3, #0
     884:	aa0c      	add	r2, sp, #48	; 0x30
     886:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     888:	0013      	movs	r3, r2
     88a:	2220      	movs	r2, #32
     88c:	18b2      	adds	r2, r6, r2
     88e:	7812      	ldrb	r2, [r2, #0]
     890:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     892:	464a      	mov	r2, r9
     894:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     896:	7830      	ldrb	r0, [r6, #0]
     898:	0019      	movs	r1, r3
     89a:	4b0b      	ldr	r3, [pc, #44]	; (8c8 <tcc_init+0x34c>)
     89c:	4798      	blx	r3
     89e:	e7e6      	b.n	86e <tcc_init+0x2f2>
     8a0:	000003fd 	.word	0x000003fd
     8a4:	40000400 	.word	0x40000400
     8a8:	0000a4b8 	.word	0x0000a4b8
     8ac:	0000a4cc 	.word	0x0000a4cc
     8b0:	0000a4d8 	.word	0x0000a4d8
     8b4:	0000a4c4 	.word	0x0000a4c4
     8b8:	2000036c 	.word	0x2000036c
     8bc:	0000a4c8 	.word	0x0000a4c8
     8c0:	00008c59 	.word	0x00008c59
     8c4:	00008bcd 	.word	0x00008bcd
     8c8:	00008d51 	.word	0x00008d51
     8cc:	4644      	mov	r4, r8
     8ce:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     8d2:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     8d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     8d6:	0212      	lsls	r2, r2, #8
     8d8:	4313      	orrs	r3, r2
     8da:	9a02      	ldr	r2, [sp, #8]
     8dc:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     8de:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     8e0:	2204      	movs	r2, #4
     8e2:	68a3      	ldr	r3, [r4, #8]
     8e4:	421a      	tst	r2, r3
     8e6:	d1fc      	bne.n	8e2 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     8e8:	23ff      	movs	r3, #255	; 0xff
     8ea:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     8ec:	2204      	movs	r2, #4
     8ee:	68a3      	ldr	r3, [r4, #8]
     8f0:	421a      	tst	r2, r3
     8f2:	d1fc      	bne.n	8ee <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     8f4:	466b      	mov	r3, sp
     8f6:	7e1b      	ldrb	r3, [r3, #24]
     8f8:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     8fc:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     900:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     902:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     904:	4a1d      	ldr	r2, [pc, #116]	; (97c <tcc_init+0x400>)
     906:	68a3      	ldr	r3, [r4, #8]
     908:	4213      	tst	r3, r2
     90a:	d1fc      	bne.n	906 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     90c:	4653      	mov	r3, sl
     90e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     910:	2210      	movs	r2, #16
     912:	68a3      	ldr	r3, [r4, #8]
     914:	421a      	tst	r2, r3
     916:	d1fc      	bne.n	912 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     918:	682b      	ldr	r3, [r5, #0]
     91a:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     91c:	4a18      	ldr	r2, [pc, #96]	; (980 <tcc_init+0x404>)
     91e:	68a3      	ldr	r3, [r4, #8]
     920:	4213      	tst	r3, r2
     922:	d1fc      	bne.n	91e <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     924:	686b      	ldr	r3, [r5, #4]
     926:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     928:	9805      	ldr	r0, [sp, #20]
     92a:	2800      	cmp	r0, #0
     92c:	dd22      	ble.n	974 <tcc_init+0x3f8>
     92e:	351c      	adds	r5, #28
     930:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     932:	4e14      	ldr	r6, [pc, #80]	; (984 <tcc_init+0x408>)
     934:	0032      	movs	r2, r6
     936:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     938:	68a3      	ldr	r3, [r4, #8]
     93a:	421a      	tst	r2, r3
     93c:	d1fc      	bne.n	938 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     93e:	cd04      	ldmia	r5!, {r2}
     940:	000b      	movs	r3, r1
     942:	3310      	adds	r3, #16
     944:	009b      	lsls	r3, r3, #2
     946:	18e3      	adds	r3, r4, r3
     948:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     94a:	3101      	adds	r1, #1
     94c:	4288      	cmp	r0, r1
     94e:	dcf1      	bgt.n	934 <tcc_init+0x3b8>
	return STATUS_OK;
     950:	2000      	movs	r0, #0
     952:	e62d      	b.n	5b0 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     954:	2017      	movs	r0, #23
     956:	e62b      	b.n	5b0 <tcc_init+0x34>
     958:	2017      	movs	r0, #23
     95a:	e629      	b.n	5b0 <tcc_init+0x34>
     95c:	2017      	movs	r0, #23
     95e:	e627      	b.n	5b0 <tcc_init+0x34>
     960:	2017      	movs	r0, #23
     962:	e625      	b.n	5b0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     964:	2017      	movs	r0, #23
     966:	e623      	b.n	5b0 <tcc_init+0x34>
			if (i >= ow_num) {
     968:	2017      	movs	r0, #23
     96a:	e621      	b.n	5b0 <tcc_init+0x34>
			if (i >= ow_num) {
     96c:	2017      	movs	r0, #23
     96e:	e61f      	b.n	5b0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     970:	2017      	movs	r0, #23
     972:	e61d      	b.n	5b0 <tcc_init+0x34>
	return STATUS_OK;
     974:	2000      	movs	r0, #0
     976:	e61b      	b.n	5b0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     978:	2017      	movs	r0, #23
     97a:	e619      	b.n	5b0 <tcc_init+0x34>
     97c:	00020040 	.word	0x00020040
     980:	00040080 	.word	0x00040080
     984:	00080100 	.word	0x00080100

00000988 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     988:	0092      	lsls	r2, r2, #2
     98a:	1883      	adds	r3, r0, r2
     98c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     98e:	4b03      	ldr	r3, [pc, #12]	; (99c <tcc_register_callback+0x14>)
     990:	58d3      	ldr	r3, [r2, r3]
     992:	6b42      	ldr	r2, [r0, #52]	; 0x34
     994:	4313      	orrs	r3, r2
     996:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     998:	2000      	movs	r0, #0
     99a:	4770      	bx	lr
     99c:	0000a4dc 	.word	0x0000a4dc

000009a0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     9a0:	b570      	push	{r4, r5, r6, lr}
     9a2:	0004      	movs	r4, r0
     9a4:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     9a6:	6800      	ldr	r0, [r0, #0]
     9a8:	4b09      	ldr	r3, [pc, #36]	; (9d0 <tcc_enable_callback+0x30>)
     9aa:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     9ac:	4b09      	ldr	r3, [pc, #36]	; (9d4 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     9ae:	5c1b      	ldrb	r3, [r3, r0]
     9b0:	221f      	movs	r2, #31
     9b2:	401a      	ands	r2, r3
     9b4:	2301      	movs	r3, #1
     9b6:	4093      	lsls	r3, r2
     9b8:	4a07      	ldr	r2, [pc, #28]	; (9d8 <tcc_enable_callback+0x38>)
     9ba:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     9bc:	00ad      	lsls	r5, r5, #2
     9be:	4b07      	ldr	r3, [pc, #28]	; (9dc <tcc_enable_callback+0x3c>)
     9c0:	58ea      	ldr	r2, [r5, r3]
     9c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     9c4:	4313      	orrs	r3, r2
     9c6:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     9c8:	6823      	ldr	r3, [r4, #0]
     9ca:	629a      	str	r2, [r3, #40]	; 0x28
}
     9cc:	bd70      	pop	{r4, r5, r6, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	000003fd 	.word	0x000003fd
     9d4:	0000a50c 	.word	0x0000a50c
     9d8:	e000e100 	.word	0xe000e100
     9dc:	0000a4dc 	.word	0x0000a4dc

000009e0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e2:	46c6      	mov	lr, r8
     9e4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     9e6:	0080      	lsls	r0, r0, #2
     9e8:	4b0e      	ldr	r3, [pc, #56]	; (a24 <_tcc_interrupt_handler+0x44>)
     9ea:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     9ec:	683b      	ldr	r3, [r7, #0]
     9ee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     9f4:	4013      	ands	r3, r2
     9f6:	401e      	ands	r6, r3
     9f8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     9fa:	4b0b      	ldr	r3, [pc, #44]	; (a28 <_tcc_interrupt_handler+0x48>)
     9fc:	4698      	mov	r8, r3
     9fe:	e002      	b.n	a06 <_tcc_interrupt_handler+0x26>
     a00:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     a02:	2c30      	cmp	r4, #48	; 0x30
     a04:	d00a      	beq.n	a1c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     a06:	4643      	mov	r3, r8
     a08:	58e5      	ldr	r5, [r4, r3]
     a0a:	4235      	tst	r5, r6
     a0c:	d0f8      	beq.n	a00 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     a0e:	193b      	adds	r3, r7, r4
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	0038      	movs	r0, r7
     a14:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     a16:	683b      	ldr	r3, [r7, #0]
     a18:	62dd      	str	r5, [r3, #44]	; 0x2c
     a1a:	e7f1      	b.n	a00 <_tcc_interrupt_handler+0x20>
		}
	}
}
     a1c:	bc04      	pop	{r2}
     a1e:	4690      	mov	r8, r2
     a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	2000036c 	.word	0x2000036c
     a28:	0000a4dc 	.word	0x0000a4dc

00000a2c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     a2c:	b510      	push	{r4, lr}
     a2e:	2000      	movs	r0, #0
     a30:	4b01      	ldr	r3, [pc, #4]	; (a38 <TCC0_Handler+0xc>)
     a32:	4798      	blx	r3
     a34:	bd10      	pop	{r4, pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	000009e1 	.word	0x000009e1

00000a3c <TCC1_Handler>:
     a3c:	b510      	push	{r4, lr}
     a3e:	2001      	movs	r0, #1
     a40:	4b01      	ldr	r3, [pc, #4]	; (a48 <TCC1_Handler+0xc>)
     a42:	4798      	blx	r3
     a44:	bd10      	pop	{r4, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	000009e1 	.word	0x000009e1

00000a4c <TCC2_Handler>:
     a4c:	b510      	push	{r4, lr}
     a4e:	2002      	movs	r0, #2
     a50:	4b01      	ldr	r3, [pc, #4]	; (a58 <TCC2_Handler+0xc>)
     a52:	4798      	blx	r3
     a54:	bd10      	pop	{r4, pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	000009e1 	.word	0x000009e1

00000a5c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     a5c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     a5e:	4b07      	ldr	r3, [pc, #28]	; (a7c <sd_mmc_configure_slot+0x20>)
     a60:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     a62:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     a64:	5ccb      	ldrb	r3, [r1, r3]
     a66:	1e5a      	subs	r2, r3, #1
     a68:	4193      	sbcs	r3, r2
     a6a:	b2db      	uxtb	r3, r3
     a6c:	7c4a      	ldrb	r2, [r1, #17]
     a6e:	6809      	ldr	r1, [r1, #0]
     a70:	4803      	ldr	r0, [pc, #12]	; (a80 <sd_mmc_configure_slot+0x24>)
     a72:	7800      	ldrb	r0, [r0, #0]
     a74:	4c03      	ldr	r4, [pc, #12]	; (a84 <sd_mmc_configure_slot+0x28>)
     a76:	47a0      	blx	r4
}
     a78:	bd10      	pop	{r4, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	200001a8 	.word	0x200001a8
     a80:	200001b1 	.word	0x200001b1
     a84:	00008589 	.word	0x00008589

00000a88 <sd_mmc_select_slot>:
{
     a88:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     a8a:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     a8c:	2800      	cmp	r0, #0
     a8e:	d001      	beq.n	a94 <sd_mmc_select_slot+0xc>
}
     a90:	0018      	movs	r0, r3
     a92:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     a94:	4b40      	ldr	r3, [pc, #256]	; (b98 <sd_mmc_select_slot+0x110>)
     a96:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     a98:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     a9a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a9c:	2a00      	cmp	r2, #0
     a9e:	d104      	bne.n	aaa <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     aa0:	094b      	lsrs	r3, r1, #5
     aa2:	01db      	lsls	r3, r3, #7
     aa4:	4a3d      	ldr	r2, [pc, #244]	; (b9c <sd_mmc_select_slot+0x114>)
     aa6:	4694      	mov	ip, r2
     aa8:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     aaa:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     aac:	221f      	movs	r2, #31
     aae:	400a      	ands	r2, r1
     ab0:	2301      	movs	r3, #1
     ab2:	4093      	lsls	r3, r2
     ab4:	4218      	tst	r0, r3
     ab6:	d010      	beq.n	ada <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     ab8:	4b37      	ldr	r3, [pc, #220]	; (b98 <sd_mmc_select_slot+0x110>)
     aba:	7b9b      	ldrb	r3, [r3, #14]
     abc:	2b01      	cmp	r3, #1
     abe:	d004      	beq.n	aca <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     ac0:	2204      	movs	r2, #4
     ac2:	4b35      	ldr	r3, [pc, #212]	; (b98 <sd_mmc_select_slot+0x110>)
     ac4:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     ac6:	2302      	movs	r3, #2
     ac8:	e7e2      	b.n	a90 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     aca:	4b35      	ldr	r3, [pc, #212]	; (ba0 <sd_mmc_select_slot+0x118>)
     acc:	781b      	ldrb	r3, [r3, #0]
     ace:	2b00      	cmp	r3, #0
     ad0:	d0f6      	beq.n	ac0 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     ad2:	2200      	movs	r2, #0
     ad4:	4b33      	ldr	r3, [pc, #204]	; (ba4 <sd_mmc_select_slot+0x11c>)
     ad6:	601a      	str	r2, [r3, #0]
     ad8:	e7f2      	b.n	ac0 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     ada:	4b2f      	ldr	r3, [pc, #188]	; (b98 <sd_mmc_select_slot+0x110>)
     adc:	7b9a      	ldrb	r2, [r3, #14]
     ade:	2a04      	cmp	r2, #4
     ae0:	d005      	beq.n	aee <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     ae2:	2a01      	cmp	r2, #1
     ae4:	d033      	beq.n	b4e <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     ae6:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     ae8:	2a03      	cmp	r2, #3
     aea:	d0d1      	beq.n	a90 <sd_mmc_select_slot+0x8>
     aec:	e045      	b.n	b7a <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     aee:	3a03      	subs	r2, #3
     af0:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     af2:	4b2c      	ldr	r3, [pc, #176]	; (ba4 <sd_mmc_select_slot+0x11c>)
     af4:	681b      	ldr	r3, [r3, #0]
     af6:	2b00      	cmp	r3, #0
     af8:	d017      	beq.n	b2a <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     afa:	2200      	movs	r2, #0
     afc:	4b28      	ldr	r3, [pc, #160]	; (ba0 <sd_mmc_select_slot+0x118>)
     afe:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     b00:	2000      	movs	r0, #0
     b02:	4b29      	ldr	r3, [pc, #164]	; (ba8 <sd_mmc_select_slot+0x120>)
     b04:	4798      	blx	r3
     b06:	22fa      	movs	r2, #250	; 0xfa
     b08:	0092      	lsls	r2, r2, #2
     b0a:	2300      	movs	r3, #0
     b0c:	2100      	movs	r1, #0
     b0e:	4c27      	ldr	r4, [pc, #156]	; (bac <sd_mmc_select_slot+0x124>)
     b10:	47a0      	blx	r4
     b12:	4a27      	ldr	r2, [pc, #156]	; (bb0 <sd_mmc_select_slot+0x128>)
     b14:	2300      	movs	r3, #0
     b16:	1880      	adds	r0, r0, r2
     b18:	4159      	adcs	r1, r3
     b1a:	4a26      	ldr	r2, [pc, #152]	; (bb4 <sd_mmc_select_slot+0x12c>)
     b1c:	2300      	movs	r3, #0
     b1e:	4c26      	ldr	r4, [pc, #152]	; (bb8 <sd_mmc_select_slot+0x130>)
     b20:	47a0      	blx	r4
     b22:	4b26      	ldr	r3, [pc, #152]	; (bbc <sd_mmc_select_slot+0x134>)
     b24:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     b26:	2302      	movs	r3, #2
     b28:	e7b2      	b.n	a90 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     b2a:	2401      	movs	r4, #1
     b2c:	4b1c      	ldr	r3, [pc, #112]	; (ba0 <sd_mmc_select_slot+0x118>)
     b2e:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     b30:	2000      	movs	r0, #0
     b32:	4b1d      	ldr	r3, [pc, #116]	; (ba8 <sd_mmc_select_slot+0x120>)
     b34:	4798      	blx	r3
     b36:	21fa      	movs	r1, #250	; 0xfa
     b38:	0149      	lsls	r1, r1, #5
     b3a:	4b21      	ldr	r3, [pc, #132]	; (bc0 <sd_mmc_select_slot+0x138>)
     b3c:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     b3e:	23fa      	movs	r3, #250	; 0xfa
     b40:	009b      	lsls	r3, r3, #2
     b42:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     b44:	4b17      	ldr	r3, [pc, #92]	; (ba4 <sd_mmc_select_slot+0x11c>)
     b46:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     b48:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     b4a:	2302      	movs	r3, #2
     b4c:	e7a0      	b.n	a90 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     b4e:	4b14      	ldr	r3, [pc, #80]	; (ba0 <sd_mmc_select_slot+0x118>)
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	2b00      	cmp	r3, #0
     b54:	d007      	beq.n	b66 <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     b56:	4b13      	ldr	r3, [pc, #76]	; (ba4 <sd_mmc_select_slot+0x11c>)
     b58:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     b5a:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     b5c:	03d2      	lsls	r2, r2, #15
     b5e:	d597      	bpl.n	a90 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     b60:	2200      	movs	r2, #0
     b62:	4b10      	ldr	r3, [pc, #64]	; (ba4 <sd_mmc_select_slot+0x11c>)
     b64:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     b66:	4b0c      	ldr	r3, [pc, #48]	; (b98 <sd_mmc_select_slot+0x110>)
     b68:	2202      	movs	r2, #2
     b6a:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     b6c:	4a15      	ldr	r2, [pc, #84]	; (bc4 <sd_mmc_select_slot+0x13c>)
     b6e:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     b70:	2201      	movs	r2, #1
     b72:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     b74:	2100      	movs	r1, #0
     b76:	3221      	adds	r2, #33	; 0x21
     b78:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     b7a:	2200      	movs	r2, #0
     b7c:	4b12      	ldr	r3, [pc, #72]	; (bc8 <sd_mmc_select_slot+0x140>)
     b7e:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     b80:	4c05      	ldr	r4, [pc, #20]	; (b98 <sd_mmc_select_slot+0x110>)
     b82:	4b12      	ldr	r3, [pc, #72]	; (bcc <sd_mmc_select_slot+0x144>)
     b84:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     b86:	4b12      	ldr	r3, [pc, #72]	; (bd0 <sd_mmc_select_slot+0x148>)
     b88:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     b8a:	7ba3      	ldrb	r3, [r4, #14]
     b8c:	3b02      	subs	r3, #2
     b8e:	425a      	negs	r2, r3
     b90:	4153      	adcs	r3, r2
     b92:	b2db      	uxtb	r3, r3
     b94:	e77c      	b.n	a90 <sd_mmc_select_slot+0x8>
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	2000000c 	.word	0x2000000c
     b9c:	41004400 	.word	0x41004400
     ba0:	200001b0 	.word	0x200001b0
     ba4:	e000e010 	.word	0xe000e010
     ba8:	00008b41 	.word	0x00008b41
     bac:	0000927d 	.word	0x0000927d
     bb0:	00001b57 	.word	0x00001b57
     bb4:	00001b58 	.word	0x00001b58
     bb8:	0000923d 	.word	0x0000923d
     bbc:	20000001 	.word	0x20000001
     bc0:	00008ed5 	.word	0x00008ed5
     bc4:	00061a80 	.word	0x00061a80
     bc8:	200001b1 	.word	0x200001b1
     bcc:	200001a8 	.word	0x200001a8
     bd0:	00000a5d 	.word	0x00000a5d

00000bd4 <sd_mmc_cmd13>:
{
     bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bd6:	4d09      	ldr	r5, [pc, #36]	; (bfc <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     bd8:	4f09      	ldr	r7, [pc, #36]	; (c00 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     bda:	4e0a      	ldr	r6, [pc, #40]	; (c04 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     bdc:	2100      	movs	r1, #0
     bde:	480a      	ldr	r0, [pc, #40]	; (c08 <sd_mmc_cmd13+0x34>)
     be0:	47b8      	blx	r7
     be2:	1e04      	subs	r4, r0, #0
     be4:	d007      	beq.n	bf6 <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     be6:	47b0      	blx	r6
     be8:	23ff      	movs	r3, #255	; 0xff
     bea:	4203      	tst	r3, r0
     bec:	d003      	beq.n	bf6 <sd_mmc_cmd13+0x22>
     bee:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     bf0:	2d00      	cmp	r5, #0
     bf2:	d1f3      	bne.n	bdc <sd_mmc_cmd13+0x8>
			return false;
     bf4:	2400      	movs	r4, #0
}
     bf6:	0020      	movs	r0, r4
     bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	00030d41 	.word	0x00030d41
     c00:	0000863d 	.word	0x0000863d
     c04:	000086a5 	.word	0x000086a5
     c08:	00001b0d 	.word	0x00001b0d

00000c0c <sd_mmc_cmd9_spi>:
{
     c0c:	b510      	push	{r4, lr}
     c0e:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     c10:	4b0c      	ldr	r3, [pc, #48]	; (c44 <sd_mmc_cmd9_spi+0x38>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	8999      	ldrh	r1, [r3, #12]
     c16:	0409      	lsls	r1, r1, #16
     c18:	2301      	movs	r3, #1
     c1a:	9300      	str	r3, [sp, #0]
     c1c:	2210      	movs	r2, #16
     c1e:	480a      	ldr	r0, [pc, #40]	; (c48 <sd_mmc_cmd9_spi+0x3c>)
     c20:	4c0a      	ldr	r4, [pc, #40]	; (c4c <sd_mmc_cmd9_spi+0x40>)
     c22:	47a0      	blx	r4
     c24:	2800      	cmp	r0, #0
     c26:	d101      	bne.n	c2c <sd_mmc_cmd9_spi+0x20>
}
     c28:	b002      	add	sp, #8
     c2a:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     c2c:	4b05      	ldr	r3, [pc, #20]	; (c44 <sd_mmc_cmd9_spi+0x38>)
     c2e:	6818      	ldr	r0, [r3, #0]
     c30:	3012      	adds	r0, #18
     c32:	2101      	movs	r1, #1
     c34:	4b06      	ldr	r3, [pc, #24]	; (c50 <sd_mmc_cmd9_spi+0x44>)
     c36:	4798      	blx	r3
     c38:	2800      	cmp	r0, #0
     c3a:	d0f5      	beq.n	c28 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     c3c:	4b05      	ldr	r3, [pc, #20]	; (c54 <sd_mmc_cmd9_spi+0x48>)
     c3e:	4798      	blx	r3
     c40:	e7f2      	b.n	c28 <sd_mmc_cmd9_spi+0x1c>
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	200001a8 	.word	0x200001a8
     c48:	00081109 	.word	0x00081109
     c4c:	00008671 	.word	0x00008671
     c50:	00008729 	.word	0x00008729
     c54:	000087b5 	.word	0x000087b5

00000c58 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     c58:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <sd_mmc_deselect_slot+0x14>)
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	2b00      	cmp	r3, #0
     c60:	d000      	beq.n	c64 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     c62:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     c64:	2000      	movs	r0, #0
     c66:	4b02      	ldr	r3, [pc, #8]	; (c70 <sd_mmc_deselect_slot+0x18>)
     c68:	4798      	blx	r3
}
     c6a:	e7fa      	b.n	c62 <sd_mmc_deselect_slot+0xa>
     c6c:	200001b1 	.word	0x200001b1
     c70:	000085dd 	.word	0x000085dd

00000c74 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     c74:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     c76:	2204      	movs	r2, #4
     c78:	4b03      	ldr	r3, [pc, #12]	; (c88 <sd_mmc_init+0x14>)
     c7a:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     c7c:	32fb      	adds	r2, #251	; 0xfb
     c7e:	4b03      	ldr	r3, [pc, #12]	; (c8c <sd_mmc_init+0x18>)
     c80:	701a      	strb	r2, [r3, #0]
	driver_init();
     c82:	4b03      	ldr	r3, [pc, #12]	; (c90 <sd_mmc_init+0x1c>)
     c84:	4798      	blx	r3
}
     c86:	bd10      	pop	{r4, pc}
     c88:	2000000c 	.word	0x2000000c
     c8c:	200001b1 	.word	0x200001b1
     c90:	0000847d 	.word	0x0000847d

00000c94 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     c94:	b5f0      	push	{r4, r5, r6, r7, lr}
     c96:	46c6      	mov	lr, r8
     c98:	b500      	push	{lr}
     c9a:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     c9c:	4bcb      	ldr	r3, [pc, #812]	; (fcc <sd_mmc_check+0x338>)
     c9e:	4798      	blx	r3
     ca0:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     ca2:	2801      	cmp	r0, #1
     ca4:	d006      	beq.n	cb4 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     ca6:	4bca      	ldr	r3, [pc, #808]	; (fd0 <sd_mmc_check+0x33c>)
     ca8:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     caa:	0020      	movs	r0, r4
     cac:	b008      	add	sp, #32
     cae:	bc04      	pop	{r2}
     cb0:	4690      	mov	r8, r2
     cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     cb4:	4bc7      	ldr	r3, [pc, #796]	; (fd4 <sd_mmc_check+0x340>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	2201      	movs	r2, #1
     cba:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     cbc:	2200      	movs	r2, #0
     cbe:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     cc0:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     cc2:	4bc5      	ldr	r3, [pc, #788]	; (fd8 <sd_mmc_check+0x344>)
     cc4:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     cc6:	2100      	movs	r1, #0
     cc8:	2088      	movs	r0, #136	; 0x88
     cca:	0140      	lsls	r0, r0, #5
     ccc:	4bc3      	ldr	r3, [pc, #780]	; (fdc <sd_mmc_check+0x348>)
     cce:	4798      	blx	r3
     cd0:	2800      	cmp	r0, #0
     cd2:	d107      	bne.n	ce4 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     cd4:	4bbf      	ldr	r3, [pc, #764]	; (fd4 <sd_mmc_check+0x340>)
     cd6:	681b      	ldr	r3, [r3, #0]
     cd8:	2203      	movs	r2, #3
     cda:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     cdc:	4bbc      	ldr	r3, [pc, #752]	; (fd0 <sd_mmc_check+0x33c>)
     cde:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     ce0:	2403      	movs	r4, #3
     ce2:	e7e2      	b.n	caa <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     ce4:	21d5      	movs	r1, #213	; 0xd5
     ce6:	0049      	lsls	r1, r1, #1
     ce8:	48bd      	ldr	r0, [pc, #756]	; (fe0 <sd_mmc_check+0x34c>)
     cea:	4bbc      	ldr	r3, [pc, #752]	; (fdc <sd_mmc_check+0x348>)
     cec:	4798      	blx	r3
	*v2 = 0;
     cee:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     cf0:	2800      	cmp	r0, #0
     cf2:	d125      	bne.n	d40 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     cf4:	4bb7      	ldr	r3, [pc, #732]	; (fd4 <sd_mmc_check+0x340>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	7bdb      	ldrb	r3, [r3, #15]
     cfa:	07db      	lsls	r3, r3, #31
     cfc:	d500      	bpl.n	d00 <sd_mmc_check+0x6c>
     cfe:	e1eb      	b.n	10d8 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     d00:	4bb4      	ldr	r3, [pc, #720]	; (fd4 <sd_mmc_check+0x340>)
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	7bda      	ldrb	r2, [r3, #15]
     d06:	2309      	movs	r3, #9
     d08:	4013      	ands	r3, r2
     d0a:	2b01      	cmp	r3, #1
     d0c:	d10f      	bne.n	d2e <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d0e:	2180      	movs	r1, #128	; 0x80
     d10:	0089      	lsls	r1, r1, #2
     d12:	48b4      	ldr	r0, [pc, #720]	; (fe4 <sd_mmc_check+0x350>)
     d14:	4bb1      	ldr	r3, [pc, #708]	; (fdc <sd_mmc_check+0x348>)
     d16:	4798      	blx	r3
     d18:	2800      	cmp	r0, #0
     d1a:	d0db      	beq.n	cd4 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d1c:	4bad      	ldr	r3, [pc, #692]	; (fd4 <sd_mmc_check+0x340>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	7bdb      	ldrb	r3, [r3, #15]
     d22:	07db      	lsls	r3, r3, #31
     d24:	d503      	bpl.n	d2e <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     d26:	4bb0      	ldr	r3, [pc, #704]	; (fe8 <sd_mmc_check+0x354>)
     d28:	4798      	blx	r3
     d2a:	2800      	cmp	r0, #0
     d2c:	d0d2      	beq.n	cd4 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d2e:	4baf      	ldr	r3, [pc, #700]	; (fec <sd_mmc_check+0x358>)
     d30:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     d32:	4ba8      	ldr	r3, [pc, #672]	; (fd4 <sd_mmc_check+0x340>)
     d34:	681b      	ldr	r3, [r3, #0]
     d36:	2200      	movs	r2, #0
     d38:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     d3a:	4ba5      	ldr	r3, [pc, #660]	; (fd0 <sd_mmc_check+0x33c>)
     d3c:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     d3e:	e7b4      	b.n	caa <sd_mmc_check+0x16>
	resp = driver_get_response();
     d40:	4bab      	ldr	r3, [pc, #684]	; (ff0 <sd_mmc_check+0x35c>)
     d42:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     d44:	1c43      	adds	r3, r0, #1
     d46:	d100      	bne.n	d4a <sd_mmc_check+0xb6>
     d48:	e1c4      	b.n	10d4 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     d4a:	0500      	lsls	r0, r0, #20
     d4c:	0d00      	lsrs	r0, r0, #20
     d4e:	23d5      	movs	r3, #213	; 0xd5
     d50:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     d52:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     d54:	4298      	cmp	r0, r3
     d56:	d1bd      	bne.n	cd4 <sd_mmc_check+0x40>
     d58:	e7cc      	b.n	cf4 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     d5a:	2100      	movs	r1, #0
     d5c:	48a5      	ldr	r0, [pc, #660]	; (ff4 <sd_mmc_check+0x360>)
     d5e:	4b9f      	ldr	r3, [pc, #636]	; (fdc <sd_mmc_check+0x348>)
     d60:	4798      	blx	r3
     d62:	2800      	cmp	r0, #0
     d64:	d119      	bne.n	d9a <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     d66:	4b9b      	ldr	r3, [pc, #620]	; (fd4 <sd_mmc_check+0x340>)
     d68:	681b      	ldr	r3, [r3, #0]
     d6a:	2202      	movs	r2, #2
     d6c:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     d6e:	2100      	movs	r1, #0
     d70:	2088      	movs	r0, #136	; 0x88
     d72:	0140      	lsls	r0, r0, #5
     d74:	4b99      	ldr	r3, [pc, #612]	; (fdc <sd_mmc_check+0x348>)
     d76:	4798      	blx	r3
     d78:	2800      	cmp	r0, #0
     d7a:	d0ab      	beq.n	cd4 <sd_mmc_check+0x40>
     d7c:	4d9e      	ldr	r5, [pc, #632]	; (ff8 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d7e:	4f97      	ldr	r7, [pc, #604]	; (fdc <sd_mmc_check+0x348>)
		resp = driver_get_response();
     d80:	4e9b      	ldr	r6, [pc, #620]	; (ff0 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     d82:	2100      	movs	r1, #0
     d84:	489d      	ldr	r0, [pc, #628]	; (ffc <sd_mmc_check+0x368>)
     d86:	47b8      	blx	r7
     d88:	2800      	cmp	r0, #0
     d8a:	d0a3      	beq.n	cd4 <sd_mmc_check+0x40>
		resp = driver_get_response();
     d8c:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     d8e:	07c3      	lsls	r3, r0, #31
     d90:	d57d      	bpl.n	e8e <sd_mmc_check+0x1fa>
     d92:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     d94:	2d00      	cmp	r5, #0
     d96:	d1f4      	bne.n	d82 <sd_mmc_check+0xee>
     d98:	e79c      	b.n	cd4 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     d9a:	4b95      	ldr	r3, [pc, #596]	; (ff0 <sd_mmc_check+0x35c>)
     d9c:	4798      	blx	r3
     d9e:	0043      	lsls	r3, r0, #1
     da0:	d505      	bpl.n	dae <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     da2:	4b8c      	ldr	r3, [pc, #560]	; (fd4 <sd_mmc_check+0x340>)
     da4:	681a      	ldr	r2, [r3, #0]
     da6:	7bd3      	ldrb	r3, [r2, #15]
     da8:	2108      	movs	r1, #8
     daa:	430b      	orrs	r3, r1
     dac:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     dae:	2100      	movs	r1, #0
     db0:	4893      	ldr	r0, [pc, #588]	; (1000 <sd_mmc_check+0x36c>)
     db2:	4b8a      	ldr	r3, [pc, #552]	; (fdc <sd_mmc_check+0x348>)
     db4:	4798      	blx	r3
     db6:	2800      	cmp	r0, #0
     db8:	d08c      	beq.n	cd4 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     dba:	4b86      	ldr	r3, [pc, #536]	; (fd4 <sd_mmc_check+0x340>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	7bdb      	ldrb	r3, [r3, #15]
     dc0:	07da      	lsls	r2, r3, #31
     dc2:	d400      	bmi.n	dc6 <sd_mmc_check+0x132>
     dc4:	e1a4      	b.n	1110 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     dc6:	4b8f      	ldr	r3, [pc, #572]	; (1004 <sd_mmc_check+0x370>)
     dc8:	4798      	blx	r3
     dca:	2800      	cmp	r0, #0
     dcc:	d082      	beq.n	cd4 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     dce:	4b81      	ldr	r3, [pc, #516]	; (fd4 <sd_mmc_check+0x340>)
     dd0:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dd2:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     dd4:	2107      	movs	r1, #7
     dd6:	4019      	ands	r1, r3
     dd8:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     dda:	488b      	ldr	r0, [pc, #556]	; (1008 <sd_mmc_check+0x374>)
     ddc:	5808      	ldr	r0, [r1, r0]
     dde:	21fa      	movs	r1, #250	; 0xfa
     de0:	0089      	lsls	r1, r1, #2
     de2:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     de4:	065b      	lsls	r3, r3, #25
     de6:	0f1b      	lsrs	r3, r3, #28
     de8:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     dea:	4888      	ldr	r0, [pc, #544]	; (100c <sd_mmc_check+0x378>)
     dec:	581b      	ldr	r3, [r3, r0]
     dee:	434b      	muls	r3, r1
     df0:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     df2:	7c93      	ldrb	r3, [r2, #18]
     df4:	099b      	lsrs	r3, r3, #6
     df6:	d000      	beq.n	dfa <sd_mmc_check+0x166>
     df8:	e13c      	b.n	1074 <sd_mmc_check+0x3e0>
     dfa:	7e91      	ldrb	r1, [r2, #26]
     dfc:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     dfe:	7e53      	ldrb	r3, [r2, #25]
     e00:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e02:	7e10      	ldrb	r0, [r2, #24]
     e04:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     e06:	4303      	orrs	r3, r0
     e08:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e0a:	7f10      	ldrb	r0, [r2, #28]
     e0c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     e0e:	7ed1      	ldrb	r1, [r2, #27]
     e10:	0049      	lsls	r1, r1, #1
     e12:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     e14:	051b      	lsls	r3, r3, #20
     e16:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     e18:	3301      	adds	r3, #1
     e1a:	2107      	movs	r1, #7
     e1c:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     e1e:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     e20:	408b      	lsls	r3, r1
     e22:	7dd0      	ldrb	r0, [r2, #23]
     e24:	210f      	movs	r1, #15
     e26:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     e28:	408b      	lsls	r3, r1
				/ 1024;
     e2a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     e2c:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     e2e:	8991      	ldrh	r1, [r2, #12]
     e30:	0409      	lsls	r1, r1, #16
     e32:	4877      	ldr	r0, [pc, #476]	; (1010 <sd_mmc_check+0x37c>)
     e34:	4b69      	ldr	r3, [pc, #420]	; (fdc <sd_mmc_check+0x348>)
     e36:	4798      	blx	r3
     e38:	2800      	cmp	r0, #0
     e3a:	d100      	bne.n	e3e <sd_mmc_check+0x1aa>
     e3c:	e74a      	b.n	cd4 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     e3e:	2301      	movs	r3, #1
     e40:	9300      	str	r3, [sp, #0]
     e42:	2208      	movs	r2, #8
     e44:	2100      	movs	r1, #0
     e46:	4873      	ldr	r0, [pc, #460]	; (1014 <sd_mmc_check+0x380>)
     e48:	4d73      	ldr	r5, [pc, #460]	; (1018 <sd_mmc_check+0x384>)
     e4a:	47a8      	blx	r5
     e4c:	2800      	cmp	r0, #0
     e4e:	d100      	bne.n	e52 <sd_mmc_check+0x1be>
     e50:	e740      	b.n	cd4 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     e52:	2101      	movs	r1, #1
     e54:	a806      	add	r0, sp, #24
     e56:	4b71      	ldr	r3, [pc, #452]	; (101c <sd_mmc_check+0x388>)
     e58:	4798      	blx	r3
     e5a:	2800      	cmp	r0, #0
     e5c:	d100      	bne.n	e60 <sd_mmc_check+0x1cc>
     e5e:	e739      	b.n	cd4 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     e60:	4b6f      	ldr	r3, [pc, #444]	; (1020 <sd_mmc_check+0x38c>)
     e62:	4798      	blx	r3
     e64:	2800      	cmp	r0, #0
     e66:	d100      	bne.n	e6a <sd_mmc_check+0x1d6>
     e68:	e734      	b.n	cd4 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     e6a:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     e6c:	781b      	ldrb	r3, [r3, #0]
     e6e:	220f      	movs	r2, #15
     e70:	4013      	ands	r3, r2
     e72:	2b01      	cmp	r3, #1
     e74:	d100      	bne.n	e78 <sd_mmc_check+0x1e4>
     e76:	e119      	b.n	10ac <sd_mmc_check+0x418>
     e78:	2b00      	cmp	r3, #0
     e7a:	d100      	bne.n	e7e <sd_mmc_check+0x1ea>
     e7c:	e109      	b.n	1092 <sd_mmc_check+0x3fe>
     e7e:	2b02      	cmp	r3, #2
     e80:	d100      	bne.n	e84 <sd_mmc_check+0x1f0>
     e82:	e118      	b.n	10b6 <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     e84:	4b53      	ldr	r3, [pc, #332]	; (fd4 <sd_mmc_check+0x340>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	2210      	movs	r2, #16
     e8a:	741a      	strb	r2, [r3, #16]
     e8c:	e105      	b.n	109a <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     e8e:	2100      	movs	r1, #0
     e90:	4858      	ldr	r0, [pc, #352]	; (ff4 <sd_mmc_check+0x360>)
     e92:	4b52      	ldr	r3, [pc, #328]	; (fdc <sd_mmc_check+0x348>)
     e94:	4798      	blx	r3
     e96:	2800      	cmp	r0, #0
     e98:	d100      	bne.n	e9c <sd_mmc_check+0x208>
     e9a:	e71b      	b.n	cd4 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     e9c:	4b54      	ldr	r3, [pc, #336]	; (ff0 <sd_mmc_check+0x35c>)
     e9e:	4798      	blx	r3
     ea0:	23c0      	movs	r3, #192	; 0xc0
     ea2:	05db      	lsls	r3, r3, #23
     ea4:	4018      	ands	r0, r3
     ea6:	2380      	movs	r3, #128	; 0x80
     ea8:	05db      	lsls	r3, r3, #23
     eaa:	4298      	cmp	r0, r3
     eac:	d105      	bne.n	eba <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     eae:	4b49      	ldr	r3, [pc, #292]	; (fd4 <sd_mmc_check+0x340>)
     eb0:	681a      	ldr	r2, [r3, #0]
     eb2:	7bd1      	ldrb	r1, [r2, #15]
     eb4:	2308      	movs	r3, #8
     eb6:	430b      	orrs	r3, r1
     eb8:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     eba:	2100      	movs	r1, #0
     ebc:	4850      	ldr	r0, [pc, #320]	; (1000 <sd_mmc_check+0x36c>)
     ebe:	4b47      	ldr	r3, [pc, #284]	; (fdc <sd_mmc_check+0x348>)
     ec0:	4798      	blx	r3
     ec2:	2800      	cmp	r0, #0
     ec4:	d100      	bne.n	ec8 <sd_mmc_check+0x234>
     ec6:	e705      	b.n	cd4 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     ec8:	4b4e      	ldr	r3, [pc, #312]	; (1004 <sd_mmc_check+0x370>)
     eca:	4798      	blx	r3
     ecc:	2800      	cmp	r0, #0
     ece:	d100      	bne.n	ed2 <sd_mmc_check+0x23e>
     ed0:	e700      	b.n	cd4 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     ed2:	4b40      	ldr	r3, [pc, #256]	; (fd4 <sd_mmc_check+0x340>)
     ed4:	681a      	ldr	r2, [r3, #0]
     ed6:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     ed8:	069b      	lsls	r3, r3, #26
     eda:	0f1b      	lsrs	r3, r3, #28
     edc:	2b02      	cmp	r3, #2
     ede:	d100      	bne.n	ee2 <sd_mmc_check+0x24e>
     ee0:	e0a8      	b.n	1034 <sd_mmc_check+0x3a0>
     ee2:	d907      	bls.n	ef4 <sd_mmc_check+0x260>
     ee4:	2b03      	cmp	r3, #3
     ee6:	d100      	bne.n	eea <sd_mmc_check+0x256>
     ee8:	e0a7      	b.n	103a <sd_mmc_check+0x3a6>
     eea:	2b04      	cmp	r3, #4
     eec:	d104      	bne.n	ef8 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     eee:	2340      	movs	r3, #64	; 0x40
     ef0:	7413      	strb	r3, [r2, #16]
     ef2:	e003      	b.n	efc <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     ef4:	2b01      	cmp	r3, #1
     ef6:	d066      	beq.n	fc6 <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     ef8:	2312      	movs	r3, #18
     efa:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     efc:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     efe:	0659      	lsls	r1, r3, #25
     f00:	0f09      	lsrs	r1, r1, #28
     f02:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     f04:	2007      	movs	r0, #7
     f06:	4003      	ands	r3, r0
     f08:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     f0a:	483f      	ldr	r0, [pc, #252]	; (1008 <sd_mmc_check+0x374>)
     f0c:	5818      	ldr	r0, [r3, r0]
     f0e:	23fa      	movs	r3, #250	; 0xfa
     f10:	009b      	lsls	r3, r3, #2
     f12:	4343      	muls	r3, r0
     f14:	4843      	ldr	r0, [pc, #268]	; (1024 <sd_mmc_check+0x390>)
     f16:	5809      	ldr	r1, [r1, r0]
     f18:	434b      	muls	r3, r1
     f1a:	6013      	str	r3, [r2, #0]
     f1c:	7e91      	ldrb	r1, [r2, #26]
     f1e:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f20:	7e53      	ldrb	r3, [r2, #25]
     f22:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f24:	7e10      	ldrb	r0, [r2, #24]
     f26:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f28:	4303      	orrs	r3, r0
     f2a:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     f2c:	051b      	lsls	r3, r3, #20
     f2e:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     f30:	493d      	ldr	r1, [pc, #244]	; (1028 <sd_mmc_check+0x394>)
     f32:	428b      	cmp	r3, r1
     f34:	d00f      	beq.n	f56 <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f36:	7f10      	ldrb	r0, [r2, #28]
     f38:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f3a:	7ed1      	ldrb	r1, [r2, #27]
     f3c:	0049      	lsls	r1, r1, #1
     f3e:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     f40:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     f42:	2007      	movs	r0, #7
     f44:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     f46:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     f48:	408b      	lsls	r3, r1
     f4a:	7dd1      	ldrb	r1, [r2, #23]
     f4c:	3008      	adds	r0, #8
     f4e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     f50:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     f52:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     f54:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     f56:	7c13      	ldrb	r3, [r2, #16]
     f58:	2b3f      	cmp	r3, #63	; 0x3f
     f5a:	d97b      	bls.n	1054 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     f5c:	2100      	movs	r1, #0
     f5e:	9100      	str	r1, [sp, #0]
     f60:	2301      	movs	r3, #1
     f62:	2280      	movs	r2, #128	; 0x80
     f64:	0092      	lsls	r2, r2, #2
     f66:	4831      	ldr	r0, [pc, #196]	; (102c <sd_mmc_check+0x398>)
     f68:	4d2b      	ldr	r5, [pc, #172]	; (1018 <sd_mmc_check+0x384>)
     f6a:	47a8      	blx	r5
     f6c:	2800      	cmp	r0, #0
     f6e:	d100      	bne.n	f72 <sd_mmc_check+0x2de>
     f70:	e6b0      	b.n	cd4 <sd_mmc_check+0x40>
     f72:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     f74:	4e2e      	ldr	r6, [pc, #184]	; (1030 <sd_mmc_check+0x39c>)
     f76:	a805      	add	r0, sp, #20
     f78:	47b0      	blx	r6
     f7a:	2800      	cmp	r0, #0
     f7c:	d100      	bne.n	f80 <sd_mmc_check+0x2ec>
     f7e:	e6a9      	b.n	cd4 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     f80:	3501      	adds	r5, #1
     f82:	b2ad      	uxth	r5, r5
     f84:	2d32      	cmp	r5, #50	; 0x32
     f86:	d1f6      	bne.n	f76 <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     f88:	4b12      	ldr	r3, [pc, #72]	; (fd4 <sd_mmc_check+0x340>)
     f8a:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     f8c:	7e8a      	ldrb	r2, [r1, #26]
     f8e:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     f90:	7e4b      	ldrb	r3, [r1, #25]
     f92:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f94:	7e09      	ldrb	r1, [r1, #24]
     f96:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     f98:	430b      	orrs	r3, r1
     f9a:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     f9c:	051b      	lsls	r3, r3, #20
     f9e:	0d1b      	lsrs	r3, r3, #20
     fa0:	4a21      	ldr	r2, [pc, #132]	; (1028 <sd_mmc_check+0x394>)
     fa2:	4293      	cmp	r3, r2
     fa4:	d154      	bne.n	1050 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     fa6:	4e22      	ldr	r6, [pc, #136]	; (1030 <sd_mmc_check+0x39c>)
     fa8:	a806      	add	r0, sp, #24
     faa:	47b0      	blx	r6
     fac:	2800      	cmp	r0, #0
     fae:	d100      	bne.n	fb2 <sd_mmc_check+0x31e>
     fb0:	e690      	b.n	cd4 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     fb2:	3501      	adds	r5, #1
     fb4:	b2ad      	uxth	r5, r5
     fb6:	2d35      	cmp	r5, #53	; 0x35
     fb8:	d9f6      	bls.n	fa8 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     fba:	4b06      	ldr	r3, [pc, #24]	; (fd4 <sd_mmc_check+0x340>)
     fbc:	681a      	ldr	r2, [r3, #0]
     fbe:	9b06      	ldr	r3, [sp, #24]
     fc0:	085b      	lsrs	r3, r3, #1
     fc2:	6053      	str	r3, [r2, #4]
     fc4:	e044      	b.n	1050 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     fc6:	2314      	movs	r3, #20
     fc8:	7413      	strb	r3, [r2, #16]
     fca:	e797      	b.n	efc <sd_mmc_check+0x268>
     fcc:	00000a89 	.word	0x00000a89
     fd0:	00000c59 	.word	0x00000c59
     fd4:	200001a8 	.word	0x200001a8
     fd8:	00008605 	.word	0x00008605
     fdc:	0000863d 	.word	0x0000863d
     fe0:	00005508 	.word	0x00005508
     fe4:	00001110 	.word	0x00001110
     fe8:	00000bd5 	.word	0x00000bd5
     fec:	00000a5d 	.word	0x00000a5d
     ff0:	000086a5 	.word	0x000086a5
     ff4:	0000053a 	.word	0x0000053a
     ff8:	00001bef 	.word	0x00001bef
     ffc:	00001101 	.word	0x00001101
    1000:	0000113b 	.word	0x0000113b
    1004:	00000c0d 	.word	0x00000c0d
    1008:	0000a550 	.word	0x0000a550
    100c:	0000a56c 	.word	0x0000a56c
    1010:	00001137 	.word	0x00001137
    1014:	00081133 	.word	0x00081133
    1018:	00008671 	.word	0x00008671
    101c:	00008729 	.word	0x00008729
    1020:	000087b5 	.word	0x000087b5
    1024:	0000a510 	.word	0x0000a510
    1028:	00000fff 	.word	0x00000fff
    102c:	00081108 	.word	0x00081108
    1030:	000086b1 	.word	0x000086b1
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    1034:	2322      	movs	r3, #34	; 0x22
    1036:	7413      	strb	r3, [r2, #16]
    1038:	e760      	b.n	efc <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    103a:	2330      	movs	r3, #48	; 0x30
    103c:	7413      	strb	r3, [r2, #16]
    103e:	e75d      	b.n	efc <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    1040:	a806      	add	r0, sp, #24
    1042:	4b36      	ldr	r3, [pc, #216]	; (111c <sd_mmc_check+0x488>)
    1044:	4798      	blx	r3
    1046:	2800      	cmp	r0, #0
    1048:	d100      	bne.n	104c <sd_mmc_check+0x3b8>
    104a:	e643      	b.n	cd4 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    104c:	3501      	adds	r5, #1
    104e:	b2ad      	uxth	r5, r5
    1050:	2d7f      	cmp	r5, #127	; 0x7f
    1052:	d9f5      	bls.n	1040 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1054:	2180      	movs	r1, #128	; 0x80
    1056:	0089      	lsls	r1, r1, #2
    1058:	4831      	ldr	r0, [pc, #196]	; (1120 <sd_mmc_check+0x48c>)
    105a:	4b32      	ldr	r3, [pc, #200]	; (1124 <sd_mmc_check+0x490>)
    105c:	4798      	blx	r3
    105e:	2800      	cmp	r0, #0
    1060:	d100      	bne.n	1064 <sd_mmc_check+0x3d0>
    1062:	e637      	b.n	cd4 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    1064:	4b30      	ldr	r3, [pc, #192]	; (1128 <sd_mmc_check+0x494>)
    1066:	4798      	blx	r3
    1068:	2800      	cmp	r0, #0
    106a:	d100      	bne.n	106e <sd_mmc_check+0x3da>
    106c:	e632      	b.n	cd4 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    106e:	4b2f      	ldr	r3, [pc, #188]	; (112c <sd_mmc_check+0x498>)
    1070:	4798      	blx	r3
    1072:	e65e      	b.n	d32 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    1074:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    1076:	7e93      	ldrb	r3, [r2, #26]
    1078:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    107a:	7e51      	ldrb	r1, [r2, #25]
    107c:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    107e:	430b      	orrs	r3, r1
    1080:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    1082:	029b      	lsls	r3, r3, #10
				* 512;
    1084:	085b      	lsrs	r3, r3, #1
    1086:	2180      	movs	r1, #128	; 0x80
    1088:	0089      	lsls	r1, r1, #2
    108a:	468c      	mov	ip, r1
    108c:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    108e:	6053      	str	r3, [r2, #4]
    1090:	e6cd      	b.n	e2e <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1092:	4b27      	ldr	r3, [pc, #156]	; (1130 <sd_mmc_check+0x49c>)
    1094:	681b      	ldr	r3, [r3, #0]
    1096:	2210      	movs	r2, #16
    1098:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    109a:	4b25      	ldr	r3, [pc, #148]	; (1130 <sd_mmc_check+0x49c>)
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	7bdb      	ldrb	r3, [r3, #15]
    10a0:	2209      	movs	r2, #9
    10a2:	4013      	ands	r3, r2
    10a4:	2b01      	cmp	r3, #1
    10a6:	d000      	beq.n	10aa <sd_mmc_check+0x416>
    10a8:	e638      	b.n	d1c <sd_mmc_check+0x88>
    10aa:	e630      	b.n	d0e <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    10ac:	4b20      	ldr	r3, [pc, #128]	; (1130 <sd_mmc_check+0x49c>)
    10ae:	681b      	ldr	r3, [r3, #0]
    10b0:	221a      	movs	r2, #26
    10b2:	741a      	strb	r2, [r3, #16]
    10b4:	e7f1      	b.n	109a <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    10b6:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    10b8:	789b      	ldrb	r3, [r3, #2]
    10ba:	09db      	lsrs	r3, r3, #7
    10bc:	2b01      	cmp	r3, #1
    10be:	d104      	bne.n	10ca <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    10c0:	4b1b      	ldr	r3, [pc, #108]	; (1130 <sd_mmc_check+0x49c>)
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	2230      	movs	r2, #48	; 0x30
    10c6:	741a      	strb	r2, [r3, #16]
    10c8:	e7e7      	b.n	109a <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    10ca:	4b19      	ldr	r3, [pc, #100]	; (1130 <sd_mmc_check+0x49c>)
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	2220      	movs	r2, #32
    10d0:	741a      	strb	r2, [r3, #16]
    10d2:	e7e2      	b.n	109a <sd_mmc_check+0x406>
	*v2 = 0;
    10d4:	2600      	movs	r6, #0
    10d6:	e60d      	b.n	cf4 <sd_mmc_check+0x60>
    10d8:	1e73      	subs	r3, r6, #1
    10da:	419e      	sbcs	r6, r3
    10dc:	07b3      	lsls	r3, r6, #30
    10de:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    10e0:	4d14      	ldr	r5, [pc, #80]	; (1134 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    10e2:	4f10      	ldr	r7, [pc, #64]	; (1124 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    10e4:	46b8      	mov	r8, r7
		resp = driver_get_response();
    10e6:	4e14      	ldr	r6, [pc, #80]	; (1138 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    10e8:	2100      	movs	r1, #0
    10ea:	4814      	ldr	r0, [pc, #80]	; (113c <sd_mmc_check+0x4a8>)
    10ec:	47b8      	blx	r7
    10ee:	2800      	cmp	r0, #0
    10f0:	d100      	bne.n	10f4 <sd_mmc_check+0x460>
    10f2:	e638      	b.n	d66 <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    10f4:	9903      	ldr	r1, [sp, #12]
    10f6:	4812      	ldr	r0, [pc, #72]	; (1140 <sd_mmc_check+0x4ac>)
    10f8:	47c0      	blx	r8
    10fa:	2800      	cmp	r0, #0
    10fc:	d100      	bne.n	1100 <sd_mmc_check+0x46c>
    10fe:	e632      	b.n	d66 <sd_mmc_check+0xd2>
		resp = driver_get_response();
    1100:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    1102:	07c3      	lsls	r3, r0, #31
    1104:	d400      	bmi.n	1108 <sd_mmc_check+0x474>
    1106:	e628      	b.n	d5a <sd_mmc_check+0xc6>
    1108:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    110a:	2d00      	cmp	r5, #0
    110c:	d1ec      	bne.n	10e8 <sd_mmc_check+0x454>
    110e:	e62a      	b.n	d66 <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1110:	2209      	movs	r2, #9
    1112:	4013      	ands	r3, r2
    1114:	2b01      	cmp	r3, #1
    1116:	d000      	beq.n	111a <sd_mmc_check+0x486>
    1118:	e609      	b.n	d2e <sd_mmc_check+0x9a>
    111a:	e5f8      	b.n	d0e <sd_mmc_check+0x7a>
    111c:	000086b1 	.word	0x000086b1
    1120:	00001110 	.word	0x00001110
    1124:	0000863d 	.word	0x0000863d
    1128:	00000bd5 	.word	0x00000bd5
    112c:	00000a5d 	.word	0x00000a5d
    1130:	200001a8 	.word	0x200001a8
    1134:	00001bef 	.word	0x00001bef
    1138:	000086a5 	.word	0x000086a5
    113c:	00001137 	.word	0x00001137
    1140:	00001129 	.word	0x00001129

00001144 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1144:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1146:	4b06      	ldr	r3, [pc, #24]	; (1160 <sd_mmc_get_type+0x1c>)
    1148:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    114a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    114c:	2800      	cmp	r0, #0
    114e:	d001      	beq.n	1154 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    1150:	0018      	movs	r0, r3
    1152:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    1154:	4b03      	ldr	r3, [pc, #12]	; (1164 <sd_mmc_get_type+0x20>)
    1156:	4798      	blx	r3
	return sd_mmc_card->type;
    1158:	4b03      	ldr	r3, [pc, #12]	; (1168 <sd_mmc_get_type+0x24>)
    115a:	681b      	ldr	r3, [r3, #0]
    115c:	7bdb      	ldrb	r3, [r3, #15]
    115e:	e7f7      	b.n	1150 <sd_mmc_get_type+0xc>
    1160:	00000a89 	.word	0x00000a89
    1164:	00000c59 	.word	0x00000c59
    1168:	200001a8 	.word	0x200001a8

0000116c <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    116c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    116e:	4b06      	ldr	r3, [pc, #24]	; (1188 <sd_mmc_get_capacity+0x1c>)
    1170:	4798      	blx	r3
		return 0;
    1172:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1174:	2800      	cmp	r0, #0
    1176:	d001      	beq.n	117c <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    1178:	0018      	movs	r0, r3
    117a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    117c:	4b03      	ldr	r3, [pc, #12]	; (118c <sd_mmc_get_capacity+0x20>)
    117e:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1180:	4b03      	ldr	r3, [pc, #12]	; (1190 <sd_mmc_get_capacity+0x24>)
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	685b      	ldr	r3, [r3, #4]
    1186:	e7f7      	b.n	1178 <sd_mmc_get_capacity+0xc>
    1188:	00000a89 	.word	0x00000a89
    118c:	00000c59 	.word	0x00000c59
    1190:	200001a8 	.word	0x200001a8

00001194 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    1194:	2000      	movs	r0, #0
    1196:	4770      	bx	lr

00001198 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	b082      	sub	sp, #8
    119c:	000e      	movs	r6, r1
    119e:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    11a0:	4b16      	ldr	r3, [pc, #88]	; (11fc <sd_mmc_init_read_blocks+0x64>)
    11a2:	4798      	blx	r3
    11a4:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    11a6:	d002      	beq.n	11ae <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    11a8:	0020      	movs	r0, r4
    11aa:	b002      	add	sp, #8
    11ac:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    11ae:	4b14      	ldr	r3, [pc, #80]	; (1200 <sd_mmc_init_read_blocks+0x68>)
    11b0:	4798      	blx	r3
    11b2:	2800      	cmp	r0, #0
    11b4:	d017      	beq.n	11e6 <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    11b6:	2d01      	cmp	r5, #1
    11b8:	d919      	bls.n	11ee <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    11ba:	4812      	ldr	r0, [pc, #72]	; (1204 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    11bc:	4b12      	ldr	r3, [pc, #72]	; (1208 <sd_mmc_init_read_blocks+0x70>)
    11be:	681b      	ldr	r3, [r3, #0]
    11c0:	7bdb      	ldrb	r3, [r3, #15]
    11c2:	071b      	lsls	r3, r3, #28
    11c4:	d400      	bmi.n	11c8 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    11c6:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    11c8:	2301      	movs	r3, #1
    11ca:	9300      	str	r3, [sp, #0]
    11cc:	002b      	movs	r3, r5
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	0092      	lsls	r2, r2, #2
    11d2:	0031      	movs	r1, r6
    11d4:	4e0d      	ldr	r6, [pc, #52]	; (120c <sd_mmc_init_read_blocks+0x74>)
    11d6:	47b0      	blx	r6
    11d8:	2800      	cmp	r0, #0
    11da:	d00a      	beq.n	11f2 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    11dc:	4b0c      	ldr	r3, [pc, #48]	; (1210 <sd_mmc_init_read_blocks+0x78>)
    11de:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    11e0:	4b0c      	ldr	r3, [pc, #48]	; (1214 <sd_mmc_init_read_blocks+0x7c>)
    11e2:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    11e4:	e7e0      	b.n	11a8 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    11e6:	4b0c      	ldr	r3, [pc, #48]	; (1218 <sd_mmc_init_read_blocks+0x80>)
    11e8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11ea:	3405      	adds	r4, #5
    11ec:	e7dc      	b.n	11a8 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    11ee:	480b      	ldr	r0, [pc, #44]	; (121c <sd_mmc_init_read_blocks+0x84>)
    11f0:	e7e4      	b.n	11bc <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    11f2:	4b09      	ldr	r3, [pc, #36]	; (1218 <sd_mmc_init_read_blocks+0x80>)
    11f4:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11f6:	2405      	movs	r4, #5
    11f8:	e7d6      	b.n	11a8 <sd_mmc_init_read_blocks+0x10>
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	00000a89 	.word	0x00000a89
    1200:	00000bd5 	.word	0x00000bd5
    1204:	00101112 	.word	0x00101112
    1208:	200001a8 	.word	0x200001a8
    120c:	00008671 	.word	0x00008671
    1210:	200001ac 	.word	0x200001ac
    1214:	200001ae 	.word	0x200001ae
    1218:	00000c59 	.word	0x00000c59
    121c:	00081111 	.word	0x00081111

00001220 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1220:	b510      	push	{r4, lr}
    1222:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1224:	4b07      	ldr	r3, [pc, #28]	; (1244 <sd_mmc_start_read_blocks+0x24>)
    1226:	4798      	blx	r3
    1228:	2800      	cmp	r0, #0
    122a:	d104      	bne.n	1236 <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    122c:	2200      	movs	r2, #0
    122e:	4b06      	ldr	r3, [pc, #24]	; (1248 <sd_mmc_start_read_blocks+0x28>)
    1230:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1232:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1234:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1236:	4a04      	ldr	r2, [pc, #16]	; (1248 <sd_mmc_start_read_blocks+0x28>)
    1238:	8813      	ldrh	r3, [r2, #0]
    123a:	1b1c      	subs	r4, r3, r4
    123c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    123e:	2000      	movs	r0, #0
    1240:	e7f8      	b.n	1234 <sd_mmc_start_read_blocks+0x14>
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	00008729 	.word	0x00008729
    1248:	200001ac 	.word	0x200001ac

0000124c <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    124c:	b510      	push	{r4, lr}
    124e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    1250:	4b14      	ldr	r3, [pc, #80]	; (12a4 <sd_mmc_wait_end_of_read_blocks+0x58>)
    1252:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1254:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    1256:	2800      	cmp	r0, #0
    1258:	d101      	bne.n	125e <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    125a:	0018      	movs	r0, r3
    125c:	bd10      	pop	{r4, pc}
	if (abort) {
    125e:	2c00      	cmp	r4, #0
    1260:	d010      	beq.n	1284 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    1262:	2200      	movs	r2, #0
    1264:	4b10      	ldr	r3, [pc, #64]	; (12a8 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1266:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1268:	4b10      	ldr	r3, [pc, #64]	; (12ac <sd_mmc_wait_end_of_read_blocks+0x60>)
    126a:	881b      	ldrh	r3, [r3, #0]
    126c:	2b01      	cmp	r3, #1
    126e:	d00f      	beq.n	1290 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1270:	2100      	movs	r1, #0
    1272:	480f      	ldr	r0, [pc, #60]	; (12b0 <sd_mmc_wait_end_of_read_blocks+0x64>)
    1274:	4b0f      	ldr	r3, [pc, #60]	; (12b4 <sd_mmc_wait_end_of_read_blocks+0x68>)
    1276:	4798      	blx	r3
    1278:	2800      	cmp	r0, #0
    127a:	d00d      	beq.n	1298 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    127c:	4b0e      	ldr	r3, [pc, #56]	; (12b8 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    127e:	4798      	blx	r3
	return SD_MMC_OK;
    1280:	2300      	movs	r3, #0
    1282:	e7ea      	b.n	125a <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    1286:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1288:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    128a:	2a00      	cmp	r2, #0
    128c:	d0ec      	beq.n	1268 <sd_mmc_wait_end_of_read_blocks+0x1c>
    128e:	e7e4      	b.n	125a <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    1290:	4b09      	ldr	r3, [pc, #36]	; (12b8 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    1292:	4798      	blx	r3
		return SD_MMC_OK;
    1294:	2300      	movs	r3, #0
    1296:	e7e0      	b.n	125a <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1298:	2100      	movs	r1, #0
    129a:	4805      	ldr	r0, [pc, #20]	; (12b0 <sd_mmc_wait_end_of_read_blocks+0x64>)
    129c:	4b05      	ldr	r3, [pc, #20]	; (12b4 <sd_mmc_wait_end_of_read_blocks+0x68>)
    129e:	4798      	blx	r3
    12a0:	e7ec      	b.n	127c <sd_mmc_wait_end_of_read_blocks+0x30>
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	000087b5 	.word	0x000087b5
    12a8:	200001ac 	.word	0x200001ac
    12ac:	200001ae 	.word	0x200001ae
    12b0:	0000310c 	.word	0x0000310c
    12b4:	0000863d 	.word	0x0000863d
    12b8:	00000c59 	.word	0x00000c59

000012bc <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	b082      	sub	sp, #8
    12c0:	000e      	movs	r6, r1
    12c2:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    12c4:	4b11      	ldr	r3, [pc, #68]	; (130c <sd_mmc_init_write_blocks+0x50>)
    12c6:	4798      	blx	r3
    12c8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    12ca:	d116      	bne.n	12fa <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    12cc:	2d01      	cmp	r5, #1
    12ce:	d917      	bls.n	1300 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    12d0:	480f      	ldr	r0, [pc, #60]	; (1310 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    12d2:	4b10      	ldr	r3, [pc, #64]	; (1314 <sd_mmc_init_write_blocks+0x58>)
    12d4:	681b      	ldr	r3, [r3, #0]
    12d6:	7bdb      	ldrb	r3, [r3, #15]
    12d8:	071b      	lsls	r3, r3, #28
    12da:	d400      	bmi.n	12de <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    12dc:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    12de:	2301      	movs	r3, #1
    12e0:	9300      	str	r3, [sp, #0]
    12e2:	002b      	movs	r3, r5
    12e4:	2280      	movs	r2, #128	; 0x80
    12e6:	0092      	lsls	r2, r2, #2
    12e8:	0031      	movs	r1, r6
    12ea:	4e0b      	ldr	r6, [pc, #44]	; (1318 <sd_mmc_init_write_blocks+0x5c>)
    12ec:	47b0      	blx	r6
    12ee:	2800      	cmp	r0, #0
    12f0:	d008      	beq.n	1304 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    12f2:	4b0a      	ldr	r3, [pc, #40]	; (131c <sd_mmc_init_write_blocks+0x60>)
    12f4:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    12f6:	4b0a      	ldr	r3, [pc, #40]	; (1320 <sd_mmc_init_write_blocks+0x64>)
    12f8:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    12fa:	0020      	movs	r0, r4
    12fc:	b002      	add	sp, #8
    12fe:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1300:	4808      	ldr	r0, [pc, #32]	; (1324 <sd_mmc_init_write_blocks+0x68>)
    1302:	e7e6      	b.n	12d2 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    1304:	4b08      	ldr	r3, [pc, #32]	; (1328 <sd_mmc_init_write_blocks+0x6c>)
    1306:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1308:	2405      	movs	r4, #5
    130a:	e7f6      	b.n	12fa <sd_mmc_init_write_blocks+0x3e>
    130c:	00000a89 	.word	0x00000a89
    1310:	00109119 	.word	0x00109119
    1314:	200001a8 	.word	0x200001a8
    1318:	00008671 	.word	0x00008671
    131c:	200001ac 	.word	0x200001ac
    1320:	200001ae 	.word	0x200001ae
    1324:	00089118 	.word	0x00089118
    1328:	00000c59 	.word	0x00000c59

0000132c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    132c:	b510      	push	{r4, lr}
    132e:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1330:	4b07      	ldr	r3, [pc, #28]	; (1350 <sd_mmc_start_write_blocks+0x24>)
    1332:	4798      	blx	r3
    1334:	2800      	cmp	r0, #0
    1336:	d104      	bne.n	1342 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1338:	2200      	movs	r2, #0
    133a:	4b06      	ldr	r3, [pc, #24]	; (1354 <sd_mmc_start_write_blocks+0x28>)
    133c:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    133e:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1340:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1342:	4a04      	ldr	r2, [pc, #16]	; (1354 <sd_mmc_start_write_blocks+0x28>)
    1344:	8813      	ldrh	r3, [r2, #0]
    1346:	1b1c      	subs	r4, r3, r4
    1348:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    134a:	2000      	movs	r0, #0
    134c:	e7f8      	b.n	1340 <sd_mmc_start_write_blocks+0x14>
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	000087b9 	.word	0x000087b9
    1354:	200001ac 	.word	0x200001ac

00001358 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1358:	b510      	push	{r4, lr}
    135a:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    135c:	4b0e      	ldr	r3, [pc, #56]	; (1398 <sd_mmc_wait_end_of_write_blocks+0x40>)
    135e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1360:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    1362:	2800      	cmp	r0, #0
    1364:	d101      	bne.n	136a <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    1366:	0018      	movs	r0, r3
    1368:	bd10      	pop	{r4, pc}
	if (abort) {
    136a:	2c00      	cmp	r4, #0
    136c:	d00a      	beq.n	1384 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    136e:	2200      	movs	r2, #0
    1370:	4b0a      	ldr	r3, [pc, #40]	; (139c <sd_mmc_wait_end_of_write_blocks+0x44>)
    1372:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1374:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <sd_mmc_wait_end_of_write_blocks+0x48>)
    1376:	881b      	ldrh	r3, [r3, #0]
    1378:	2b01      	cmp	r3, #1
    137a:	d009      	beq.n	1390 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    137c:	4b09      	ldr	r3, [pc, #36]	; (13a4 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    137e:	4798      	blx	r3
	return SD_MMC_OK;
    1380:	2300      	movs	r3, #0
    1382:	e7f0      	b.n	1366 <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1384:	4b05      	ldr	r3, [pc, #20]	; (139c <sd_mmc_wait_end_of_write_blocks+0x44>)
    1386:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    1388:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    138a:	2a00      	cmp	r2, #0
    138c:	d0f2      	beq.n	1374 <sd_mmc_wait_end_of_write_blocks+0x1c>
    138e:	e7ea      	b.n	1366 <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1390:	4b04      	ldr	r3, [pc, #16]	; (13a4 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1392:	4798      	blx	r3
		return SD_MMC_OK;
    1394:	2300      	movs	r3, #0
    1396:	e7e6      	b.n	1366 <sd_mmc_wait_end_of_write_blocks+0xe>
    1398:	00008839 	.word	0x00008839
    139c:	200001ac 	.word	0x200001ac
    13a0:	200001ae 	.word	0x200001ae
    13a4:	00000c59 	.word	0x00000c59

000013a8 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    13a8:	2000      	movs	r0, #0
    13aa:	4770      	bx	lr

000013ac <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
    13ac:	b510      	push	{r4, lr}
    13ae:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    13b0:	4b08      	ldr	r3, [pc, #32]	; (13d4 <udi_msc_cbw_wait+0x28>)
    13b2:	9300      	str	r3, [sp, #0]
    13b4:	231f      	movs	r3, #31
    13b6:	4a08      	ldr	r2, [pc, #32]	; (13d8 <udi_msc_cbw_wait+0x2c>)
    13b8:	2101      	movs	r1, #1
    13ba:	2002      	movs	r0, #2
    13bc:	4c07      	ldr	r4, [pc, #28]	; (13dc <udi_msc_cbw_wait+0x30>)
    13be:	47a0      	blx	r4
    13c0:	2800      	cmp	r0, #0
    13c2:	d001      	beq.n	13c8 <udi_msc_cbw_wait+0x1c>
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
	}
}
    13c4:	b002      	add	sp, #8
    13c6:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    13c8:	4905      	ldr	r1, [pc, #20]	; (13e0 <udi_msc_cbw_wait+0x34>)
    13ca:	3002      	adds	r0, #2
    13cc:	4b05      	ldr	r3, [pc, #20]	; (13e4 <udi_msc_cbw_wait+0x38>)
    13ce:	4798      	blx	r3
}
    13d0:	e7f8      	b.n	13c4 <udi_msc_cbw_wait+0x18>
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	000017d1 	.word	0x000017d1
    13d8:	200001d8 	.word	0x200001d8
    13dc:	00003b81 	.word	0x00003b81
    13e0:	000013ad 	.word	0x000013ad
    13e4:	00003b29 	.word	0x00003b29

000013e8 <udi_msc_enable>:
{
    13e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    13ea:	2300      	movs	r3, #0
    13ec:	4a13      	ldr	r2, [pc, #76]	; (143c <udi_msc_enable+0x54>)
    13ee:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    13f0:	4a13      	ldr	r2, [pc, #76]	; (1440 <udi_msc_enable+0x58>)
    13f2:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    13f4:	3301      	adds	r3, #1
    13f6:	4a13      	ldr	r2, [pc, #76]	; (1444 <udi_msc_enable+0x5c>)
    13f8:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    13fa:	4a13      	ldr	r2, [pc, #76]	; (1448 <udi_msc_enable+0x60>)
    13fc:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    13fe:	4b13      	ldr	r3, [pc, #76]	; (144c <udi_msc_enable+0x64>)
    1400:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    1402:	2800      	cmp	r0, #0
    1404:	d105      	bne.n	1412 <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    1406:	2200      	movs	r2, #0
    1408:	4b11      	ldr	r3, [pc, #68]	; (1450 <udi_msc_enable+0x68>)
    140a:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    140c:	2500      	movs	r5, #0
}
    140e:	0028      	movs	r0, r5
    1410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    1412:	3801      	subs	r0, #1
    1414:	4b0e      	ldr	r3, [pc, #56]	; (1450 <udi_msc_enable+0x68>)
    1416:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    1418:	4b0e      	ldr	r3, [pc, #56]	; (1454 <udi_msc_enable+0x6c>)
    141a:	4798      	blx	r3
    141c:	1e05      	subs	r5, r0, #0
    141e:	d0f6      	beq.n	140e <udi_msc_enable+0x26>
    1420:	2400      	movs	r4, #0
		mem_unload(lun, false);
    1422:	4f0d      	ldr	r7, [pc, #52]	; (1458 <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1424:	4e0a      	ldr	r6, [pc, #40]	; (1450 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    1426:	2100      	movs	r1, #0
    1428:	0020      	movs	r0, r4
    142a:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    142c:	3401      	adds	r4, #1
    142e:	b2e4      	uxtb	r4, r4
    1430:	7833      	ldrb	r3, [r6, #0]
    1432:	42a3      	cmp	r3, r4
    1434:	d2f7      	bcs.n	1426 <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    1436:	4b09      	ldr	r3, [pc, #36]	; (145c <udi_msc_enable+0x74>)
    1438:	4798      	blx	r3
	return true;
    143a:	e7e8      	b.n	140e <udi_msc_enable+0x26>
    143c:	200001ce 	.word	0x200001ce
    1440:	200001cc 	.word	0x200001cc
    1444:	20000044 	.word	0x20000044
    1448:	20000045 	.word	0x20000045
    144c:	0000885d 	.word	0x0000885d
    1450:	200001fc 	.word	0x200001fc
    1454:	000062fd 	.word	0x000062fd
    1458:	0000889d 	.word	0x0000889d
    145c:	000013ad 	.word	0x000013ad

00001460 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    1460:	b510      	push	{r4, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    1462:	4b01      	ldr	r3, [pc, #4]	; (1468 <udi_msc_csw_sent+0x8>)
    1464:	4798      	blx	r3
}
    1466:	bd10      	pop	{r4, pc}
    1468:	000013ad 	.word	0x000013ad

0000146c <udi_msc_csw_send>:
{
    146c:	b510      	push	{r4, lr}
    146e:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    1470:	4b08      	ldr	r3, [pc, #32]	; (1494 <udi_msc_csw_send+0x28>)
    1472:	9300      	str	r3, [sp, #0]
    1474:	230d      	movs	r3, #13
    1476:	4a08      	ldr	r2, [pc, #32]	; (1498 <udi_msc_csw_send+0x2c>)
    1478:	2100      	movs	r1, #0
    147a:	2081      	movs	r0, #129	; 0x81
    147c:	4c07      	ldr	r4, [pc, #28]	; (149c <udi_msc_csw_send+0x30>)
    147e:	47a0      	blx	r4
    1480:	2800      	cmp	r0, #0
    1482:	d001      	beq.n	1488 <udi_msc_csw_send+0x1c>
}
    1484:	b002      	add	sp, #8
    1486:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    1488:	4905      	ldr	r1, [pc, #20]	; (14a0 <udi_msc_csw_send+0x34>)
    148a:	3081      	adds	r0, #129	; 0x81
    148c:	4b05      	ldr	r3, [pc, #20]	; (14a4 <udi_msc_csw_send+0x38>)
    148e:	4798      	blx	r3
}
    1490:	e7f8      	b.n	1484 <udi_msc_csw_send+0x18>
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	00001461 	.word	0x00001461
    1498:	20000048 	.word	0x20000048
    149c:	00003b81 	.word	0x00003b81
    14a0:	0000146d 	.word	0x0000146d
    14a4:	00003b29 	.word	0x00003b29

000014a8 <udi_msc_cbw_invalid>:
{
    14a8:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    14aa:	4b06      	ldr	r3, [pc, #24]	; (14c4 <udi_msc_cbw_invalid+0x1c>)
    14ac:	781b      	ldrb	r3, [r3, #0]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d100      	bne.n	14b4 <udi_msc_cbw_invalid+0xc>
}
    14b2:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    14b4:	2002      	movs	r0, #2
    14b6:	4b04      	ldr	r3, [pc, #16]	; (14c8 <udi_msc_cbw_invalid+0x20>)
    14b8:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    14ba:	4904      	ldr	r1, [pc, #16]	; (14cc <udi_msc_cbw_invalid+0x24>)
    14bc:	2002      	movs	r0, #2
    14be:	4b04      	ldr	r3, [pc, #16]	; (14d0 <udi_msc_cbw_invalid+0x28>)
    14c0:	4798      	blx	r3
    14c2:	e7f6      	b.n	14b2 <udi_msc_cbw_invalid+0xa>
    14c4:	200001cc 	.word	0x200001cc
    14c8:	000039b5 	.word	0x000039b5
    14cc:	000014a9 	.word	0x000014a9
    14d0:	00003b29 	.word	0x00003b29

000014d4 <udi_msc_csw_invalid>:
{
    14d4:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    14d6:	4b06      	ldr	r3, [pc, #24]	; (14f0 <udi_msc_csw_invalid+0x1c>)
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	2b00      	cmp	r3, #0
    14dc:	d100      	bne.n	14e0 <udi_msc_csw_invalid+0xc>
}
    14de:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    14e0:	2081      	movs	r0, #129	; 0x81
    14e2:	4b04      	ldr	r3, [pc, #16]	; (14f4 <udi_msc_csw_invalid+0x20>)
    14e4:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    14e6:	4904      	ldr	r1, [pc, #16]	; (14f8 <udi_msc_csw_invalid+0x24>)
    14e8:	2081      	movs	r0, #129	; 0x81
    14ea:	4b04      	ldr	r3, [pc, #16]	; (14fc <udi_msc_csw_invalid+0x28>)
    14ec:	4798      	blx	r3
    14ee:	e7f6      	b.n	14de <udi_msc_csw_invalid+0xa>
    14f0:	200001cc 	.word	0x200001cc
    14f4:	000039b5 	.word	0x000039b5
    14f8:	000014d5 	.word	0x000014d5
    14fc:	00003b29 	.word	0x00003b29

00001500 <udi_msc_csw_process>:
{
    1500:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    1502:	4b0b      	ldr	r3, [pc, #44]	; (1530 <udi_msc_csw_process+0x30>)
    1504:	689b      	ldr	r3, [r3, #8]
    1506:	2b00      	cmp	r3, #0
    1508:	d006      	beq.n	1518 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    150a:	4b0a      	ldr	r3, [pc, #40]	; (1534 <udi_msc_csw_process+0x34>)
    150c:	7b1b      	ldrb	r3, [r3, #12]
    150e:	2b7f      	cmp	r3, #127	; 0x7f
    1510:	d809      	bhi.n	1526 <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    1512:	2002      	movs	r0, #2
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <udi_msc_csw_process+0x38>)
    1516:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    1518:	4b06      	ldr	r3, [pc, #24]	; (1534 <udi_msc_csw_process+0x34>)
    151a:	685a      	ldr	r2, [r3, #4]
    151c:	4b04      	ldr	r3, [pc, #16]	; (1530 <udi_msc_csw_process+0x30>)
    151e:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    1520:	4b06      	ldr	r3, [pc, #24]	; (153c <udi_msc_csw_process+0x3c>)
    1522:	4798      	blx	r3
}
    1524:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    1526:	2081      	movs	r0, #129	; 0x81
    1528:	4b03      	ldr	r3, [pc, #12]	; (1538 <udi_msc_csw_process+0x38>)
    152a:	4798      	blx	r3
    152c:	e7f4      	b.n	1518 <udi_msc_csw_process+0x18>
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	20000048 	.word	0x20000048
    1534:	200001d8 	.word	0x200001d8
    1538:	000039b5 	.word	0x000039b5
    153c:	0000146d 	.word	0x0000146d

00001540 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    1540:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    1542:	4c05      	ldr	r4, [pc, #20]	; (1558 <udi_msc_clear_sense+0x18>)
    1544:	2212      	movs	r2, #18
    1546:	2100      	movs	r1, #0
    1548:	0020      	movs	r0, r4
    154a:	4b04      	ldr	r3, [pc, #16]	; (155c <udi_msc_clear_sense+0x1c>)
    154c:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    154e:	23f0      	movs	r3, #240	; 0xf0
    1550:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    1552:	3be6      	subs	r3, #230	; 0xe6
    1554:	71e3      	strb	r3, [r4, #7]
}
    1556:	bd10      	pop	{r4, pc}
    1558:	20000200 	.word	0x20000200
    155c:	000094c3 	.word	0x000094c3

00001560 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    1560:	b570      	push	{r4, r5, r6, lr}
    1562:	0006      	movs	r6, r0
    1564:	000d      	movs	r5, r1
    1566:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    1568:	4b08      	ldr	r3, [pc, #32]	; (158c <udi_msc_sense_fail+0x2c>)
    156a:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    156c:	2201      	movs	r2, #1
    156e:	4b08      	ldr	r3, [pc, #32]	; (1590 <udi_msc_sense_fail+0x30>)
    1570:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    1572:	4b08      	ldr	r3, [pc, #32]	; (1594 <udi_msc_sense_fail+0x34>)
    1574:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    1576:	0e22      	lsrs	r2, r4, #24
    1578:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    157a:	0c22      	lsrs	r2, r4, #16
    157c:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    157e:	0a22      	lsrs	r2, r4, #8
    1580:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    1582:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    1584:	0a2a      	lsrs	r2, r5, #8
    1586:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    1588:	735d      	strb	r5, [r3, #13]
}
    158a:	bd70      	pop	{r4, r5, r6, pc}
    158c:	00001541 	.word	0x00001541
    1590:	20000048 	.word	0x20000048
    1594:	20000200 	.word	0x20000200

00001598 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
    1598:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    159a:	2200      	movs	r2, #0
    159c:	2190      	movs	r1, #144	; 0x90
    159e:	0189      	lsls	r1, r1, #6
    15a0:	2005      	movs	r0, #5
    15a2:	4b01      	ldr	r3, [pc, #4]	; (15a8 <udi_msc_sense_fail_cdb_invalid+0x10>)
    15a4:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    15a6:	bd10      	pop	{r4, pc}
    15a8:	00001561 	.word	0x00001561

000015ac <udi_msc_cbw_validate>:
{
    15ac:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    15ae:	4b09      	ldr	r3, [pc, #36]	; (15d4 <udi_msc_cbw_validate+0x28>)
    15b0:	7b1b      	ldrb	r3, [r3, #12]
    15b2:	4059      	eors	r1, r3
    15b4:	b249      	sxtb	r1, r1
    15b6:	2900      	cmp	r1, #0
    15b8:	db04      	blt.n	15c4 <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <udi_msc_cbw_validate+0x2c>)
    15bc:	689a      	ldr	r2, [r3, #8]
	return true;
    15be:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    15c0:	4282      	cmp	r2, r0
    15c2:	d204      	bcs.n	15ce <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    15c4:	4b05      	ldr	r3, [pc, #20]	; (15dc <udi_msc_cbw_validate+0x30>)
    15c6:	4798      	blx	r3
		udi_msc_csw_process();
    15c8:	4b05      	ldr	r3, [pc, #20]	; (15e0 <udi_msc_cbw_validate+0x34>)
    15ca:	4798      	blx	r3
		return false;
    15cc:	2300      	movs	r3, #0
}
    15ce:	0018      	movs	r0, r3
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	200001d8 	.word	0x200001d8
    15d8:	20000048 	.word	0x20000048
    15dc:	00001599 	.word	0x00001599
    15e0:	00001501 	.word	0x00001501

000015e4 <udi_msc_sense_fail_hardware>:
{
    15e4:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    15e6:	2200      	movs	r2, #0
    15e8:	2100      	movs	r1, #0
    15ea:	2004      	movs	r0, #4
    15ec:	4b01      	ldr	r3, [pc, #4]	; (15f4 <udi_msc_sense_fail_hardware+0x10>)
    15ee:	4798      	blx	r3
}
    15f0:	bd10      	pop	{r4, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	00001561 	.word	0x00001561

000015f8 <udi_msc_data_send>:
{
    15f8:	b510      	push	{r4, lr}
    15fa:	b082      	sub	sp, #8
    15fc:	0002      	movs	r2, r0
    15fe:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1600:	4907      	ldr	r1, [pc, #28]	; (1620 <udi_msc_data_send+0x28>)
    1602:	9100      	str	r1, [sp, #0]
    1604:	2101      	movs	r1, #1
    1606:	2081      	movs	r0, #129	; 0x81
    1608:	4c06      	ldr	r4, [pc, #24]	; (1624 <udi_msc_data_send+0x2c>)
    160a:	47a0      	blx	r4
    160c:	2800      	cmp	r0, #0
    160e:	d001      	beq.n	1614 <udi_msc_data_send+0x1c>
}
    1610:	b002      	add	sp, #8
    1612:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    1614:	4b04      	ldr	r3, [pc, #16]	; (1628 <udi_msc_data_send+0x30>)
    1616:	4798      	blx	r3
		udi_msc_csw_process();
    1618:	4b04      	ldr	r3, [pc, #16]	; (162c <udi_msc_data_send+0x34>)
    161a:	4798      	blx	r3
}
    161c:	e7f8      	b.n	1610 <udi_msc_data_send+0x18>
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	00001671 	.word	0x00001671
    1624:	00003b81 	.word	0x00003b81
    1628:	000015e5 	.word	0x000015e5
    162c:	00001501 	.word	0x00001501

00001630 <udi_msc_sense_fail_busy_or_change>:
{
    1630:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    1632:	2200      	movs	r2, #0
    1634:	21a0      	movs	r1, #160	; 0xa0
    1636:	0189      	lsls	r1, r1, #6
    1638:	2006      	movs	r0, #6
    163a:	4b01      	ldr	r3, [pc, #4]	; (1640 <udi_msc_sense_fail_busy_or_change+0x10>)
    163c:	4798      	blx	r3
}
    163e:	bd10      	pop	{r4, pc}
    1640:	00001561 	.word	0x00001561

00001644 <udi_msc_sense_fail_not_present>:
{
    1644:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    1646:	2200      	movs	r2, #0
    1648:	21e8      	movs	r1, #232	; 0xe8
    164a:	0189      	lsls	r1, r1, #6
    164c:	2002      	movs	r0, #2
    164e:	4b01      	ldr	r3, [pc, #4]	; (1654 <udi_msc_sense_fail_not_present+0x10>)
    1650:	4798      	blx	r3
}
    1652:	bd10      	pop	{r4, pc}
    1654:	00001561 	.word	0x00001561

00001658 <udi_msc_sense_pass>:
{
    1658:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    165a:	4b03      	ldr	r3, [pc, #12]	; (1668 <udi_msc_sense_pass+0x10>)
    165c:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    165e:	2200      	movs	r2, #0
    1660:	4b02      	ldr	r3, [pc, #8]	; (166c <udi_msc_sense_pass+0x14>)
    1662:	731a      	strb	r2, [r3, #12]
}
    1664:	bd10      	pop	{r4, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	00001541 	.word	0x00001541
    166c:	20000048 	.word	0x20000048

00001670 <udi_msc_data_sent>:
{
    1670:	b510      	push	{r4, lr}
    1672:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    1674:	2800      	cmp	r0, #0
    1676:	d000      	beq.n	167a <udi_msc_data_sent+0xa>
}
    1678:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    167a:	4b04      	ldr	r3, [pc, #16]	; (168c <udi_msc_data_sent+0x1c>)
    167c:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    167e:	4b04      	ldr	r3, [pc, #16]	; (1690 <udi_msc_data_sent+0x20>)
    1680:	689a      	ldr	r2, [r3, #8]
    1682:	1b14      	subs	r4, r2, r4
    1684:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    1686:	4b03      	ldr	r3, [pc, #12]	; (1694 <udi_msc_data_sent+0x24>)
    1688:	4798      	blx	r3
    168a:	e7f5      	b.n	1678 <udi_msc_data_sent+0x8>
    168c:	00001659 	.word	0x00001659
    1690:	20000048 	.word	0x20000048
    1694:	00001501 	.word	0x00001501

00001698 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    1698:	b570      	push	{r4, r5, r6, lr}
    169a:	0005      	movs	r5, r0
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    169c:	2214      	movs	r2, #20
    169e:	2100      	movs	r1, #0
    16a0:	4823      	ldr	r0, [pc, #140]	; (1730 <udi_msc_spc_mode_sense+0x98>)
    16a2:	4b24      	ldr	r3, [pc, #144]	; (1734 <udi_msc_spc_mode_sense+0x9c>)
    16a4:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    16a6:	2d00      	cmp	r5, #0
    16a8:	d018      	beq.n	16dc <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    16aa:	4b23      	ldr	r3, [pc, #140]	; (1738 <udi_msc_spc_mode_sense+0xa0>)
    16ac:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    16ae:	4a20      	ldr	r2, [pc, #128]	; (1730 <udi_msc_spc_mode_sense+0x98>)
    16b0:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    16b2:	2408      	movs	r4, #8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    16b4:	4b20      	ldr	r3, [pc, #128]	; (1738 <udi_msc_spc_mode_sense+0xa0>)
    16b6:	7c58      	ldrb	r0, [r3, #17]
    16b8:	233f      	movs	r3, #63	; 0x3f
    16ba:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    16bc:	2b1c      	cmp	r3, #28
    16be:	d013      	beq.n	16e8 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    16c0:	2b3f      	cmp	r3, #63	; 0x3f
    16c2:	d011      	beq.n	16e8 <udi_msc_spc_mode_sense+0x50>
    16c4:	1c20      	adds	r0, r4, #0
    16c6:	428c      	cmp	r4, r1
    16c8:	d900      	bls.n	16cc <udi_msc_spc_mode_sense+0x34>
    16ca:	1c08      	adds	r0, r1, #0
    16cc:	b2c6      	uxtb	r6, r0
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    16ce:	2180      	movs	r1, #128	; 0x80
    16d0:	0030      	movs	r0, r6
    16d2:	4b1a      	ldr	r3, [pc, #104]	; (173c <udi_msc_spc_mode_sense+0xa4>)
    16d4:	4798      	blx	r3
    16d6:	2800      	cmp	r0, #0
    16d8:	d10f      	bne.n	16fa <udi_msc_spc_mode_sense+0x62>
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
    16da:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    16dc:	4b16      	ldr	r3, [pc, #88]	; (1738 <udi_msc_spc_mode_sense+0xa0>)
    16de:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    16e0:	4a13      	ldr	r2, [pc, #76]	; (1730 <udi_msc_spc_mode_sense+0x98>)
    16e2:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    16e4:	2404      	movs	r4, #4
    16e6:	e7e5      	b.n	16b4 <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    16e8:	231c      	movs	r3, #28
    16ea:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    16ec:	3b12      	subs	r3, #18
    16ee:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    16f0:	3b05      	subs	r3, #5
    16f2:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    16f4:	340c      	adds	r4, #12
    16f6:	b2e4      	uxtb	r4, r4
    16f8:	e7e4      	b.n	16c4 <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    16fa:	4b0f      	ldr	r3, [pc, #60]	; (1738 <udi_msc_spc_mode_sense+0xa0>)
    16fc:	7b58      	ldrb	r0, [r3, #13]
    16fe:	4b10      	ldr	r3, [pc, #64]	; (1740 <udi_msc_spc_mode_sense+0xa8>)
    1700:	4798      	blx	r3
    1702:	1e43      	subs	r3, r0, #1
    1704:	4198      	sbcs	r0, r3
    1706:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    1708:	2d00      	cmp	r5, #0
    170a:	d00c      	beq.n	1726 <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    170c:	3c02      	subs	r4, #2
    170e:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1710:	4a07      	ldr	r2, [pc, #28]	; (1730 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    1712:	0a23      	lsrs	r3, r4, #8
    1714:	0224      	lsls	r4, r4, #8
    1716:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    1718:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    171a:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    171c:	0031      	movs	r1, r6
    171e:	4804      	ldr	r0, [pc, #16]	; (1730 <udi_msc_spc_mode_sense+0x98>)
    1720:	4b08      	ldr	r3, [pc, #32]	; (1744 <udi_msc_spc_mode_sense+0xac>)
    1722:	4798      	blx	r3
    1724:	e7d9      	b.n	16da <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    1726:	4b02      	ldr	r3, [pc, #8]	; (1730 <udi_msc_spc_mode_sense+0x98>)
    1728:	3c01      	subs	r4, #1
    172a:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    172c:	7098      	strb	r0, [r3, #2]
    172e:	e7f5      	b.n	171c <udi_msc_spc_mode_sense+0x84>
    1730:	200001b4 	.word	0x200001b4
    1734:	000094c3 	.word	0x000094c3
    1738:	200001d8 	.word	0x200001d8
    173c:	000015ad 	.word	0x000015ad
    1740:	000088ad 	.word	0x000088ad
    1744:	000015f9 	.word	0x000015f9

00001748 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
    1748:	b510      	push	{r4, lr}
    174a:	1e04      	subs	r4, r0, #0
	uint32_t trans_size;

	if (!b_read) {
    174c:	d01e      	beq.n	178c <udi_msc_sbc_trans+0x44>
			udi_msc_csw_process();
			return;
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    174e:	4a17      	ldr	r2, [pc, #92]	; (17ac <udi_msc_sbc_trans+0x64>)
    1750:	4b17      	ldr	r3, [pc, #92]	; (17b0 <udi_msc_sbc_trans+0x68>)
    1752:	7c59      	ldrb	r1, [r3, #17]
    1754:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    1756:	7c99      	ldrb	r1, [r3, #18]
    1758:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    175a:	7cd9      	ldrb	r1, [r3, #19]
    175c:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    175e:	7d19      	ldrb	r1, [r3, #20]
    1760:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1762:	4a14      	ldr	r2, [pc, #80]	; (17b4 <udi_msc_sbc_trans+0x6c>)
    1764:	7d99      	ldrb	r1, [r3, #22]
    1766:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    1768:	7ddb      	ldrb	r3, [r3, #23]
    176a:	7013      	strb	r3, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    176c:	8810      	ldrh	r0, [r2, #0]
    176e:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    1770:	0021      	movs	r1, r4
    1772:	1e4b      	subs	r3, r1, #1
    1774:	4199      	sbcs	r1, r3
    1776:	01c9      	lsls	r1, r1, #7
    1778:	4b0f      	ldr	r3, [pc, #60]	; (17b8 <udi_msc_sbc_trans+0x70>)
    177a:	4798      	blx	r3
    177c:	2800      	cmp	r0, #0
    177e:	d004      	beq.n	178a <udi_msc_sbc_trans+0x42>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    1780:	4b0e      	ldr	r3, [pc, #56]	; (17bc <udi_msc_sbc_trans+0x74>)
    1782:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    1784:	2201      	movs	r2, #1
    1786:	4b0e      	ldr	r3, [pc, #56]	; (17c0 <udi_msc_sbc_trans+0x78>)
    1788:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    178a:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    178c:	4b08      	ldr	r3, [pc, #32]	; (17b0 <udi_msc_sbc_trans+0x68>)
    178e:	7b58      	ldrb	r0, [r3, #13]
    1790:	4b0c      	ldr	r3, [pc, #48]	; (17c4 <udi_msc_sbc_trans+0x7c>)
    1792:	4798      	blx	r3
    1794:	2800      	cmp	r0, #0
    1796:	d0da      	beq.n	174e <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    1798:	2200      	movs	r2, #0
    179a:	219c      	movs	r1, #156	; 0x9c
    179c:	0189      	lsls	r1, r1, #6
    179e:	2007      	movs	r0, #7
    17a0:	4b09      	ldr	r3, [pc, #36]	; (17c8 <udi_msc_sbc_trans+0x80>)
    17a2:	4798      	blx	r3
			udi_msc_csw_process();
    17a4:	4b09      	ldr	r3, [pc, #36]	; (17cc <udi_msc_sbc_trans+0x84>)
    17a6:	4798      	blx	r3
			return;
    17a8:	e7ef      	b.n	178a <udi_msc_sbc_trans+0x42>
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	200001c8 	.word	0x200001c8
    17b0:	200001d8 	.word	0x200001d8
    17b4:	200001f8 	.word	0x200001f8
    17b8:	000015ad 	.word	0x000015ad
    17bc:	200001cd 	.word	0x200001cd
    17c0:	200001ce 	.word	0x200001ce
    17c4:	000088ad 	.word	0x000088ad
    17c8:	00001561 	.word	0x00001561
    17cc:	00001501 	.word	0x00001501

000017d0 <udi_msc_cbw_received>:
{
    17d0:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    17d2:	2800      	cmp	r0, #0
    17d4:	d10d      	bne.n	17f2 <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    17d6:	291f      	cmp	r1, #31
    17d8:	d104      	bne.n	17e4 <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    17da:	4b84      	ldr	r3, [pc, #528]	; (19ec <udi_msc_cbw_received+0x21c>)
    17dc:	4a84      	ldr	r2, [pc, #528]	; (19f0 <udi_msc_cbw_received+0x220>)
    17de:	6812      	ldr	r2, [r2, #0]
    17e0:	429a      	cmp	r2, r3
    17e2:	d007      	beq.n	17f4 <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    17e4:	2201      	movs	r2, #1
    17e6:	4b83      	ldr	r3, [pc, #524]	; (19f4 <udi_msc_cbw_received+0x224>)
    17e8:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    17ea:	4b83      	ldr	r3, [pc, #524]	; (19f8 <udi_msc_cbw_received+0x228>)
    17ec:	4798      	blx	r3
		udi_msc_csw_invalid();
    17ee:	4b83      	ldr	r3, [pc, #524]	; (19fc <udi_msc_cbw_received+0x22c>)
    17f0:	4798      	blx	r3
}
    17f2:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    17f4:	4b7e      	ldr	r3, [pc, #504]	; (19f0 <udi_msc_cbw_received+0x220>)
    17f6:	7b58      	ldrb	r0, [r3, #13]
    17f8:	220f      	movs	r2, #15
    17fa:	4010      	ands	r0, r2
    17fc:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    17fe:	4b80      	ldr	r3, [pc, #512]	; (1a00 <udi_msc_cbw_received+0x230>)
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	4283      	cmp	r3, r0
    1804:	d30b      	bcc.n	181e <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    1806:	4b7a      	ldr	r3, [pc, #488]	; (19f0 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    1808:	4a7e      	ldr	r2, [pc, #504]	; (1a04 <udi_msc_cbw_received+0x234>)
    180a:	6899      	ldr	r1, [r3, #8]
    180c:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    180e:	7bda      	ldrb	r2, [r3, #15]
    1810:	2a5a      	cmp	r2, #90	; 0x5a
    1812:	d900      	bls.n	1816 <udi_msc_cbw_received+0x46>
    1814:	e0d2      	b.n	19bc <udi_msc_cbw_received+0x1ec>
    1816:	0093      	lsls	r3, r2, #2
    1818:	4a7b      	ldr	r2, [pc, #492]	; (1a08 <udi_msc_cbw_received+0x238>)
    181a:	58d3      	ldr	r3, [r2, r3]
    181c:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    181e:	4b7b      	ldr	r3, [pc, #492]	; (1a0c <udi_msc_cbw_received+0x23c>)
    1820:	4798      	blx	r3
		udi_msc_csw_process();
    1822:	4b7b      	ldr	r3, [pc, #492]	; (1a10 <udi_msc_cbw_received+0x240>)
    1824:	4798      	blx	r3
		return;
    1826:	e7e4      	b.n	17f2 <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    1828:	4b71      	ldr	r3, [pc, #452]	; (19f0 <udi_msc_cbw_received+0x220>)
    182a:	7cda      	ldrb	r2, [r3, #19]
    182c:	1c13      	adds	r3, r2, #0
    182e:	2a12      	cmp	r2, #18
    1830:	d900      	bls.n	1834 <udi_msc_cbw_received+0x64>
    1832:	2312      	movs	r3, #18
    1834:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1836:	2180      	movs	r1, #128	; 0x80
    1838:	0020      	movs	r0, r4
    183a:	4b76      	ldr	r3, [pc, #472]	; (1a14 <udi_msc_cbw_received+0x244>)
    183c:	4798      	blx	r3
    183e:	2800      	cmp	r0, #0
    1840:	d0d7      	beq.n	17f2 <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    1842:	0021      	movs	r1, r4
    1844:	4874      	ldr	r0, [pc, #464]	; (1a18 <udi_msc_cbw_received+0x248>)
    1846:	4b75      	ldr	r3, [pc, #468]	; (1a1c <udi_msc_cbw_received+0x24c>)
    1848:	4798      	blx	r3
    184a:	e7d2      	b.n	17f2 <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    184c:	4b68      	ldr	r3, [pc, #416]	; (19f0 <udi_msc_cbw_received+0x220>)
    184e:	7cdb      	ldrb	r3, [r3, #19]
    1850:	1c1a      	adds	r2, r3, #0
    1852:	2b24      	cmp	r3, #36	; 0x24
    1854:	d900      	bls.n	1858 <udi_msc_cbw_received+0x88>
    1856:	2224      	movs	r2, #36	; 0x24
    1858:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    185a:	2180      	movs	r1, #128	; 0x80
    185c:	0020      	movs	r0, r4
    185e:	4b6d      	ldr	r3, [pc, #436]	; (1a14 <udi_msc_cbw_received+0x244>)
    1860:	4798      	blx	r3
    1862:	2800      	cmp	r0, #0
    1864:	d0c5      	beq.n	17f2 <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    1866:	4b62      	ldr	r3, [pc, #392]	; (19f0 <udi_msc_cbw_received+0x220>)
    1868:	7c1b      	ldrb	r3, [r3, #16]
    186a:	079b      	lsls	r3, r3, #30
    186c:	d103      	bne.n	1876 <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    186e:	4b60      	ldr	r3, [pc, #384]	; (19f0 <udi_msc_cbw_received+0x220>)
    1870:	7c5d      	ldrb	r5, [r3, #17]
    1872:	2d00      	cmp	r5, #0
    1874:	d004      	beq.n	1880 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1876:	4b65      	ldr	r3, [pc, #404]	; (1a0c <udi_msc_cbw_received+0x23c>)
    1878:	4798      	blx	r3
		udi_msc_csw_process();
    187a:	4b65      	ldr	r3, [pc, #404]	; (1a10 <udi_msc_cbw_received+0x240>)
    187c:	4798      	blx	r3
    187e:	e7b8      	b.n	17f2 <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    1880:	4b5b      	ldr	r3, [pc, #364]	; (19f0 <udi_msc_cbw_received+0x220>)
    1882:	7b58      	ldrb	r0, [r3, #13]
    1884:	4b66      	ldr	r3, [pc, #408]	; (1a20 <udi_msc_cbw_received+0x250>)
    1886:	4798      	blx	r3
    1888:	2380      	movs	r3, #128	; 0x80
    188a:	2800      	cmp	r0, #0
    188c:	d100      	bne.n	1890 <udi_msc_cbw_received+0xc0>
    188e:	002b      	movs	r3, r5
    1890:	4e64      	ldr	r6, [pc, #400]	; (1a24 <udi_msc_cbw_received+0x254>)
    1892:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    1894:	4b56      	ldr	r3, [pc, #344]	; (19f0 <udi_msc_cbw_received+0x220>)
    1896:	7b58      	ldrb	r0, [r3, #13]
    1898:	4b63      	ldr	r3, [pc, #396]	; (1a28 <udi_msc_cbw_received+0x258>)
    189a:	4798      	blx	r3
    189c:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    189e:	0030      	movs	r0, r6
    18a0:	3010      	adds	r0, #16
    18a2:	3101      	adds	r1, #1
    18a4:	2210      	movs	r2, #16
    18a6:	4b61      	ldr	r3, [pc, #388]	; (1a2c <udi_msc_cbw_received+0x25c>)
    18a8:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    18aa:	7c33      	ldrb	r3, [r6, #16]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d100      	bne.n	18b2 <udi_msc_cbw_received+0xe2>
    18b0:	e08e      	b.n	19d0 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    18b2:	2b22      	cmp	r3, #34	; 0x22
    18b4:	d100      	bne.n	18b8 <udi_msc_cbw_received+0xe8>
    18b6:	e08a      	b.n	19ce <udi_msc_cbw_received+0x1fe>
    18b8:	495a      	ldr	r1, [pc, #360]	; (1a24 <udi_msc_cbw_received+0x254>)
		i++;
    18ba:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    18bc:	7c4a      	ldrb	r2, [r1, #17]
    18be:	2a00      	cmp	r2, #0
    18c0:	d100      	bne.n	18c4 <udi_msc_cbw_received+0xf4>
    18c2:	e085      	b.n	19d0 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    18c4:	2a22      	cmp	r2, #34	; 0x22
    18c6:	d100      	bne.n	18ca <udi_msc_cbw_received+0xfa>
    18c8:	e082      	b.n	19d0 <udi_msc_cbw_received+0x200>
		i++;
    18ca:	3301      	adds	r3, #1
    18cc:	b2db      	uxtb	r3, r3
    18ce:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    18d0:	2b10      	cmp	r3, #16
    18d2:	d1f3      	bne.n	18bc <udi_msc_cbw_received+0xec>
    18d4:	e084      	b.n	19e0 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    18d6:	2000      	movs	r0, #0
    18d8:	4b55      	ldr	r3, [pc, #340]	; (1a30 <udi_msc_cbw_received+0x260>)
    18da:	4798      	blx	r3
		break;
    18dc:	e789      	b.n	17f2 <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    18de:	2001      	movs	r0, #1
    18e0:	4b53      	ldr	r3, [pc, #332]	; (1a30 <udi_msc_cbw_received+0x260>)
    18e2:	4798      	blx	r3
		break;
    18e4:	e785      	b.n	17f2 <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    18e6:	4b53      	ldr	r3, [pc, #332]	; (1a34 <udi_msc_cbw_received+0x264>)
    18e8:	4798      	blx	r3
    18ea:	2802      	cmp	r0, #2
    18ec:	d009      	beq.n	1902 <udi_msc_cbw_received+0x132>
    18ee:	2803      	cmp	r0, #3
    18f0:	d004      	beq.n	18fc <udi_msc_cbw_received+0x12c>
    18f2:	2800      	cmp	r0, #0
    18f4:	d008      	beq.n	1908 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    18f6:	4b50      	ldr	r3, [pc, #320]	; (1a38 <udi_msc_cbw_received+0x268>)
    18f8:	4798      	blx	r3
    18fa:	e007      	b.n	190c <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    18fc:	4b4f      	ldr	r3, [pc, #316]	; (1a3c <udi_msc_cbw_received+0x26c>)
    18fe:	4798      	blx	r3
    1900:	e004      	b.n	190c <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    1902:	4b4f      	ldr	r3, [pc, #316]	; (1a40 <udi_msc_cbw_received+0x270>)
    1904:	4798      	blx	r3
    1906:	e001      	b.n	190c <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    1908:	4b4e      	ldr	r3, [pc, #312]	; (1a44 <udi_msc_cbw_received+0x274>)
    190a:	4798      	blx	r3
	udi_msc_csw_process();
    190c:	4b40      	ldr	r3, [pc, #256]	; (1a10 <udi_msc_cbw_received+0x240>)
    190e:	4798      	blx	r3
    1910:	e76f      	b.n	17f2 <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1912:	2180      	movs	r1, #128	; 0x80
    1914:	2008      	movs	r0, #8
    1916:	4b3f      	ldr	r3, [pc, #252]	; (1a14 <udi_msc_cbw_received+0x244>)
    1918:	4798      	blx	r3
    191a:	2800      	cmp	r0, #0
    191c:	d100      	bne.n	1920 <udi_msc_cbw_received+0x150>
    191e:	e768      	b.n	17f2 <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1920:	4b33      	ldr	r3, [pc, #204]	; (19f0 <udi_msc_cbw_received+0x220>)
    1922:	7b58      	ldrb	r0, [r3, #13]
    1924:	4948      	ldr	r1, [pc, #288]	; (1a48 <udi_msc_cbw_received+0x278>)
    1926:	4b49      	ldr	r3, [pc, #292]	; (1a4c <udi_msc_cbw_received+0x27c>)
    1928:	4798      	blx	r3
    192a:	2802      	cmp	r0, #2
    192c:	d00d      	beq.n	194a <udi_msc_cbw_received+0x17a>
    192e:	2803      	cmp	r0, #3
    1930:	d006      	beq.n	1940 <udi_msc_cbw_received+0x170>
    1932:	2800      	cmp	r0, #0
    1934:	d00e      	beq.n	1954 <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    1936:	4b40      	ldr	r3, [pc, #256]	; (1a38 <udi_msc_cbw_received+0x268>)
    1938:	4798      	blx	r3
		udi_msc_csw_process();
    193a:	4b35      	ldr	r3, [pc, #212]	; (1a10 <udi_msc_cbw_received+0x240>)
    193c:	4798      	blx	r3
    193e:	e758      	b.n	17f2 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1940:	4b3e      	ldr	r3, [pc, #248]	; (1a3c <udi_msc_cbw_received+0x26c>)
    1942:	4798      	blx	r3
		udi_msc_csw_process();
    1944:	4b32      	ldr	r3, [pc, #200]	; (1a10 <udi_msc_cbw_received+0x240>)
    1946:	4798      	blx	r3
    1948:	e753      	b.n	17f2 <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    194a:	4b3d      	ldr	r3, [pc, #244]	; (1a40 <udi_msc_cbw_received+0x270>)
    194c:	4798      	blx	r3
		udi_msc_csw_process();
    194e:	4b30      	ldr	r3, [pc, #192]	; (1a10 <udi_msc_cbw_received+0x240>)
    1950:	4798      	blx	r3
    1952:	e74e      	b.n	17f2 <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1954:	483c      	ldr	r0, [pc, #240]	; (1a48 <udi_msc_cbw_received+0x278>)
    1956:	2380      	movs	r3, #128	; 0x80
    1958:	029b      	lsls	r3, r3, #10
    195a:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    195c:	6803      	ldr	r3, [r0, #0]
    195e:	ba1b      	rev	r3, r3
    1960:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1962:	2108      	movs	r1, #8
    1964:	4b2d      	ldr	r3, [pc, #180]	; (1a1c <udi_msc_cbw_received+0x24c>)
    1966:	4798      	blx	r3
    1968:	e743      	b.n	17f2 <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    196a:	4b21      	ldr	r3, [pc, #132]	; (19f0 <udi_msc_cbw_received+0x220>)
    196c:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    196e:	079a      	lsls	r2, r3, #30
    1970:	d404      	bmi.n	197c <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    1972:	4b34      	ldr	r3, [pc, #208]	; (1a44 <udi_msc_cbw_received+0x274>)
    1974:	4798      	blx	r3
	udi_msc_csw_process();
    1976:	4b26      	ldr	r3, [pc, #152]	; (1a10 <udi_msc_cbw_received+0x240>)
    1978:	4798      	blx	r3
    197a:	e73a      	b.n	17f2 <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    197c:	2101      	movs	r1, #1
    197e:	404b      	eors	r3, r1
    1980:	2101      	movs	r1, #1
    1982:	4019      	ands	r1, r3
    1984:	4b32      	ldr	r3, [pc, #200]	; (1a50 <udi_msc_cbw_received+0x280>)
    1986:	4798      	blx	r3
    1988:	e7f3      	b.n	1972 <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    198a:	4b19      	ldr	r3, [pc, #100]	; (19f0 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    198c:	7cdb      	ldrb	r3, [r3, #19]
    198e:	2b00      	cmp	r3, #0
    1990:	d004      	beq.n	199c <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1992:	4b1e      	ldr	r3, [pc, #120]	; (1a0c <udi_msc_cbw_received+0x23c>)
    1994:	4798      	blx	r3
	udi_msc_csw_process();
    1996:	4b1e      	ldr	r3, [pc, #120]	; (1a10 <udi_msc_cbw_received+0x240>)
    1998:	4798      	blx	r3
    199a:	e72a      	b.n	17f2 <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    199c:	4b29      	ldr	r3, [pc, #164]	; (1a44 <udi_msc_cbw_received+0x274>)
    199e:	4798      	blx	r3
    19a0:	e7f9      	b.n	1996 <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    19a2:	4b28      	ldr	r3, [pc, #160]	; (1a44 <udi_msc_cbw_received+0x274>)
    19a4:	4798      	blx	r3
		udi_msc_csw_process();
    19a6:	4b1a      	ldr	r3, [pc, #104]	; (1a10 <udi_msc_cbw_received+0x240>)
    19a8:	4798      	blx	r3
		break;
    19aa:	e722      	b.n	17f2 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    19ac:	2001      	movs	r0, #1
    19ae:	4b29      	ldr	r3, [pc, #164]	; (1a54 <udi_msc_cbw_received+0x284>)
    19b0:	4798      	blx	r3
		break;
    19b2:	e71e      	b.n	17f2 <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    19b4:	2000      	movs	r0, #0
    19b6:	4b27      	ldr	r3, [pc, #156]	; (1a54 <udi_msc_cbw_received+0x284>)
    19b8:	4798      	blx	r3
		break;
    19ba:	e71a      	b.n	17f2 <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    19bc:	2200      	movs	r2, #0
    19be:	2180      	movs	r1, #128	; 0x80
    19c0:	0189      	lsls	r1, r1, #6
    19c2:	2005      	movs	r0, #5
    19c4:	4b24      	ldr	r3, [pc, #144]	; (1a58 <udi_msc_cbw_received+0x288>)
    19c6:	4798      	blx	r3
		udi_msc_csw_process();
    19c8:	4b11      	ldr	r3, [pc, #68]	; (1a10 <udi_msc_cbw_received+0x240>)
    19ca:	4798      	blx	r3
		break;
    19cc:	e711      	b.n	17f2 <udi_msc_cbw_received+0x22>
	i = 0;
    19ce:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    19d0:	4814      	ldr	r0, [pc, #80]	; (1a24 <udi_msc_cbw_received+0x254>)
    19d2:	2120      	movs	r1, #32
    19d4:	18c2      	adds	r2, r0, r3
    19d6:	7411      	strb	r1, [r2, #16]
		i++;
    19d8:	3301      	adds	r3, #1
    19da:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    19dc:	2b10      	cmp	r3, #16
    19de:	d1f9      	bne.n	19d4 <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    19e0:	0021      	movs	r1, r4
    19e2:	4810      	ldr	r0, [pc, #64]	; (1a24 <udi_msc_cbw_received+0x254>)
    19e4:	4b0d      	ldr	r3, [pc, #52]	; (1a1c <udi_msc_cbw_received+0x24c>)
    19e6:	4798      	blx	r3
    19e8:	e703      	b.n	17f2 <udi_msc_cbw_received+0x22>
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	43425355 	.word	0x43425355
    19f0:	200001d8 	.word	0x200001d8
    19f4:	200001cc 	.word	0x200001cc
    19f8:	000014a9 	.word	0x000014a9
    19fc:	000014d5 	.word	0x000014d5
    1a00:	200001fc 	.word	0x200001fc
    1a04:	20000048 	.word	0x20000048
    1a08:	0000a5ac 	.word	0x0000a5ac
    1a0c:	00001599 	.word	0x00001599
    1a10:	00001501 	.word	0x00001501
    1a14:	000015ad 	.word	0x000015ad
    1a18:	20000200 	.word	0x20000200
    1a1c:	000015f9 	.word	0x000015f9
    1a20:	000088c5 	.word	0x000088c5
    1a24:	20000058 	.word	0x20000058
    1a28:	000088dd 	.word	0x000088dd
    1a2c:	000094b1 	.word	0x000094b1
    1a30:	00001699 	.word	0x00001699
    1a34:	00008861 	.word	0x00008861
    1a38:	000015e5 	.word	0x000015e5
    1a3c:	00001631 	.word	0x00001631
    1a40:	00001645 	.word	0x00001645
    1a44:	00001659 	.word	0x00001659
    1a48:	200001d0 	.word	0x200001d0
    1a4c:	00008879 	.word	0x00008879
    1a50:	0000889d 	.word	0x0000889d
    1a54:	00001749 	.word	0x00001749
    1a58:	00001561 	.word	0x00001561

00001a5c <udi_msc_disable>:
{
    1a5c:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1a5e:	2200      	movs	r2, #0
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <udi_msc_disable+0x18>)
    1a62:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    1a64:	2301      	movs	r3, #1
    1a66:	4a04      	ldr	r2, [pc, #16]	; (1a78 <udi_msc_disable+0x1c>)
    1a68:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1a6a:	4a04      	ldr	r2, [pc, #16]	; (1a7c <udi_msc_disable+0x20>)
    1a6c:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1a6e:	4b04      	ldr	r3, [pc, #16]	; (1a80 <udi_msc_disable+0x24>)
    1a70:	4798      	blx	r3
}
    1a72:	bd10      	pop	{r4, pc}
    1a74:	200001ce 	.word	0x200001ce
    1a78:	20000044 	.word	0x20000044
    1a7c:	20000045 	.word	0x20000045
    1a80:	0000630d 	.word	0x0000630d

00001a84 <udi_msc_setup>:
{
    1a84:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    1a86:	4b20      	ldr	r3, [pc, #128]	; (1b08 <udi_msc_setup+0x84>)
    1a88:	781a      	ldrb	r2, [r3, #0]
    1a8a:	b253      	sxtb	r3, r2
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	db05      	blt.n	1a9c <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a90:	2360      	movs	r3, #96	; 0x60
    1a92:	4013      	ands	r3, r2
	return false;	// Not supported request
    1a94:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a96:	2b20      	cmp	r3, #32
    1a98:	d018      	beq.n	1acc <udi_msc_setup+0x48>
}
    1a9a:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1a9c:	2360      	movs	r3, #96	; 0x60
    1a9e:	4013      	ands	r3, r2
	return false;	// Not supported request
    1aa0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1aa2:	2b20      	cmp	r3, #32
    1aa4:	d1f9      	bne.n	1a9a <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1aa6:	4b18      	ldr	r3, [pc, #96]	; (1b08 <udi_msc_setup+0x84>)
    1aa8:	785b      	ldrb	r3, [r3, #1]
    1aaa:	2bfe      	cmp	r3, #254	; 0xfe
    1aac:	d127      	bne.n	1afe <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    1aae:	4b16      	ldr	r3, [pc, #88]	; (1b08 <udi_msc_setup+0x84>)
    1ab0:	88db      	ldrh	r3, [r3, #6]
    1ab2:	2b01      	cmp	r3, #1
    1ab4:	d1f1      	bne.n	1a9a <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1ab6:	4b14      	ldr	r3, [pc, #80]	; (1b08 <udi_msc_setup+0x84>)
    1ab8:	885b      	ldrh	r3, [r3, #2]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d1ed      	bne.n	1a9a <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1abe:	4b12      	ldr	r3, [pc, #72]	; (1b08 <udi_msc_setup+0x84>)
    1ac0:	4a12      	ldr	r2, [pc, #72]	; (1b0c <udi_msc_setup+0x88>)
    1ac2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    1ac4:	2201      	movs	r2, #1
    1ac6:	819a      	strh	r2, [r3, #12]
				return true;
    1ac8:	3001      	adds	r0, #1
    1aca:	e7e6      	b.n	1a9a <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    1acc:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <udi_msc_setup+0x84>)
    1ace:	785b      	ldrb	r3, [r3, #1]
    1ad0:	2bff      	cmp	r3, #255	; 0xff
    1ad2:	d116      	bne.n	1b02 <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    1ad4:	4b0c      	ldr	r3, [pc, #48]	; (1b08 <udi_msc_setup+0x84>)
    1ad6:	88db      	ldrh	r3, [r3, #6]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d1de      	bne.n	1a9a <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    1adc:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <udi_msc_setup+0x84>)
    1ade:	885b      	ldrh	r3, [r3, #2]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d1da      	bne.n	1a9a <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    1ae4:	4a0a      	ldr	r2, [pc, #40]	; (1b10 <udi_msc_setup+0x8c>)
    1ae6:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1ae8:	4a0a      	ldr	r2, [pc, #40]	; (1b14 <udi_msc_setup+0x90>)
    1aea:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1aec:	3002      	adds	r0, #2
    1aee:	4c0a      	ldr	r4, [pc, #40]	; (1b18 <udi_msc_setup+0x94>)
    1af0:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    1af2:	2081      	movs	r0, #129	; 0x81
    1af4:	47a0      	blx	r4
				udi_msc_cbw_wait();
    1af6:	4b09      	ldr	r3, [pc, #36]	; (1b1c <udi_msc_setup+0x98>)
    1af8:	4798      	blx	r3
				return true;
    1afa:	2001      	movs	r0, #1
    1afc:	e7cd      	b.n	1a9a <udi_msc_setup+0x16>
	return false;	// Not supported request
    1afe:	2000      	movs	r0, #0
    1b00:	e7cb      	b.n	1a9a <udi_msc_setup+0x16>
    1b02:	2000      	movs	r0, #0
    1b04:	e7c9      	b.n	1a9a <udi_msc_setup+0x16>
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	200005c4 	.word	0x200005c4
    1b0c:	200001fc 	.word	0x200001fc
    1b10:	200001cc 	.word	0x200001cc
    1b14:	200001ce 	.word	0x200001ce
    1b18:	000037f5 	.word	0x000037f5
    1b1c:	000013ad 	.word	0x000013ad

00001b20 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1b20:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    1b22:	4b11      	ldr	r3, [pc, #68]	; (1b68 <udc_next_desc_in_iface+0x48>)
    1b24:	681b      	ldr	r3, [r3, #0]
    1b26:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1b28:	7894      	ldrb	r4, [r2, #2]
    1b2a:	78d3      	ldrb	r3, [r2, #3]
    1b2c:	021b      	lsls	r3, r3, #8
    1b2e:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1b30:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    1b32:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1b34:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    1b36:	4290      	cmp	r0, r2
    1b38:	d210      	bcs.n	1b5c <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1b3a:	7843      	ldrb	r3, [r0, #1]
    1b3c:	2b04      	cmp	r3, #4
    1b3e:	d00f      	beq.n	1b60 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1b40:	428b      	cmp	r3, r1
    1b42:	d00a      	beq.n	1b5a <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    1b44:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    1b46:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1b48:	4290      	cmp	r0, r2
    1b4a:	d205      	bcs.n	1b58 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1b4c:	7843      	ldrb	r3, [r0, #1]
    1b4e:	2b04      	cmp	r3, #4
    1b50:	d008      	beq.n	1b64 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    1b52:	428b      	cmp	r3, r1
    1b54:	d1f6      	bne.n	1b44 <udc_next_desc_in_iface+0x24>
    1b56:	e000      	b.n	1b5a <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1b58:	2000      	movs	r0, #0
}
    1b5a:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1b5c:	2000      	movs	r0, #0
    1b5e:	e7fc      	b.n	1b5a <udc_next_desc_in_iface+0x3a>
    1b60:	2000      	movs	r0, #0
    1b62:	e7fa      	b.n	1b5a <udc_next_desc_in_iface+0x3a>
    1b64:	2000      	movs	r0, #0
    1b66:	e7f8      	b.n	1b5a <udc_next_desc_in_iface+0x3a>
    1b68:	20000220 	.word	0x20000220

00001b6c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1b6c:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1b6e:	4b03      	ldr	r3, [pc, #12]	; (1b7c <udc_valid_address+0x10>)
    1b70:	885b      	ldrh	r3, [r3, #2]
    1b72:	207f      	movs	r0, #127	; 0x7f
    1b74:	4018      	ands	r0, r3
    1b76:	4b02      	ldr	r3, [pc, #8]	; (1b80 <udc_valid_address+0x14>)
    1b78:	4798      	blx	r3
}
    1b7a:	bd10      	pop	{r4, pc}
    1b7c:	200005c4 	.word	0x200005c4
    1b80:	00003d59 	.word	0x00003d59

00001b84 <udc_update_iface_desc>:
{
    1b84:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    1b86:	4b19      	ldr	r3, [pc, #100]	; (1bec <udc_update_iface_desc+0x68>)
    1b88:	781b      	ldrb	r3, [r3, #0]
		return false;
    1b8a:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	d029      	beq.n	1be4 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b90:	4b17      	ldr	r3, [pc, #92]	; (1bf0 <udc_update_iface_desc+0x6c>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	681b      	ldr	r3, [r3, #0]
    1b96:	791c      	ldrb	r4, [r3, #4]
    1b98:	4284      	cmp	r4, r0
    1b9a:	d923      	bls.n	1be4 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    1b9c:	4a15      	ldr	r2, [pc, #84]	; (1bf4 <udc_update_iface_desc+0x70>)
    1b9e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1ba0:	789a      	ldrb	r2, [r3, #2]
    1ba2:	78dc      	ldrb	r4, [r3, #3]
    1ba4:	0224      	lsls	r4, r4, #8
    1ba6:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1ba8:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    1baa:	42a3      	cmp	r3, r4
    1bac:	d21c      	bcs.n	1be8 <udc_update_iface_desc+0x64>
    1bae:	2500      	movs	r5, #0
    1bb0:	2601      	movs	r6, #1
    1bb2:	e007      	b.n	1bc4 <udc_update_iface_desc+0x40>
    1bb4:	4a0f      	ldr	r2, [pc, #60]	; (1bf4 <udc_update_iface_desc+0x70>)
    1bb6:	6013      	str	r3, [r2, #0]
    1bb8:	e00f      	b.n	1bda <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    1bba:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1bbc:	189b      	adds	r3, r3, r2
    1bbe:	0035      	movs	r5, r6
	while (ptr_end_desc >
    1bc0:	42a3      	cmp	r3, r4
    1bc2:	d20c      	bcs.n	1bde <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    1bc4:	785a      	ldrb	r2, [r3, #1]
    1bc6:	2a04      	cmp	r2, #4
    1bc8:	d1f7      	bne.n	1bba <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1bca:	789a      	ldrb	r2, [r3, #2]
    1bcc:	4282      	cmp	r2, r0
    1bce:	d1f4      	bne.n	1bba <udc_update_iface_desc+0x36>
    1bd0:	78da      	ldrb	r2, [r3, #3]
    1bd2:	428a      	cmp	r2, r1
    1bd4:	d1f1      	bne.n	1bba <udc_update_iface_desc+0x36>
    1bd6:	2d00      	cmp	r5, #0
    1bd8:	d1ec      	bne.n	1bb4 <udc_update_iface_desc+0x30>
				return true; // Interface found
    1bda:	2201      	movs	r2, #1
    1bdc:	e002      	b.n	1be4 <udc_update_iface_desc+0x60>
    1bde:	4a05      	ldr	r2, [pc, #20]	; (1bf4 <udc_update_iface_desc+0x70>)
    1be0:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    1be2:	2200      	movs	r2, #0
}
    1be4:	0010      	movs	r0, r2
    1be6:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1be8:	2200      	movs	r2, #0
    1bea:	e7fb      	b.n	1be4 <udc_update_iface_desc+0x60>
    1bec:	2000021c 	.word	0x2000021c
    1bf0:	20000220 	.word	0x20000220
    1bf4:	20000224 	.word	0x20000224

00001bf8 <udc_iface_disable>:
{
    1bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bfa:	46c6      	mov	lr, r8
    1bfc:	b500      	push	{lr}
    1bfe:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c00:	2100      	movs	r1, #0
    1c02:	4b13      	ldr	r3, [pc, #76]	; (1c50 <udc_iface_disable+0x58>)
    1c04:	4798      	blx	r3
    1c06:	1e05      	subs	r5, r0, #0
    1c08:	d103      	bne.n	1c12 <udc_iface_disable+0x1a>
}
    1c0a:	0028      	movs	r0, r5
    1c0c:	bc04      	pop	{r2}
    1c0e:	4690      	mov	r8, r2
    1c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c12:	4b10      	ldr	r3, [pc, #64]	; (1c54 <udc_iface_disable+0x5c>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	685b      	ldr	r3, [r3, #4]
    1c18:	00a2      	lsls	r2, r4, #2
    1c1a:	58d3      	ldr	r3, [r2, r3]
    1c1c:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c1e:	68db      	ldr	r3, [r3, #12]
    1c20:	4798      	blx	r3
    1c22:	0001      	movs	r1, r0
    1c24:	0020      	movs	r0, r4
    1c26:	4b0a      	ldr	r3, [pc, #40]	; (1c50 <udc_iface_disable+0x58>)
    1c28:	4798      	blx	r3
    1c2a:	1e05      	subs	r5, r0, #0
    1c2c:	d0ed      	beq.n	1c0a <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1c2e:	4b0a      	ldr	r3, [pc, #40]	; (1c58 <udc_iface_disable+0x60>)
    1c30:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c32:	4e0a      	ldr	r6, [pc, #40]	; (1c5c <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    1c34:	4f0a      	ldr	r7, [pc, #40]	; (1c60 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c36:	2105      	movs	r1, #5
    1c38:	0020      	movs	r0, r4
    1c3a:	47b0      	blx	r6
    1c3c:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1c3e:	d002      	beq.n	1c46 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1c40:	7880      	ldrb	r0, [r0, #2]
    1c42:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c44:	e7f7      	b.n	1c36 <udc_iface_disable+0x3e>
	udi_api->disable();
    1c46:	4643      	mov	r3, r8
    1c48:	685b      	ldr	r3, [r3, #4]
    1c4a:	4798      	blx	r3
	return true;
    1c4c:	e7dd      	b.n	1c0a <udc_iface_disable+0x12>
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	00001b85 	.word	0x00001b85
    1c54:	20000220 	.word	0x20000220
    1c58:	20000224 	.word	0x20000224
    1c5c:	00001b21 	.word	0x00001b21
    1c60:	00003841 	.word	0x00003841

00001c64 <udc_iface_enable>:
{
    1c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c66:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1c68:	4b0f      	ldr	r3, [pc, #60]	; (1ca8 <udc_iface_enable+0x44>)
    1c6a:	4798      	blx	r3
    1c6c:	2800      	cmp	r0, #0
    1c6e:	d019      	beq.n	1ca4 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1c70:	4b0e      	ldr	r3, [pc, #56]	; (1cac <udc_iface_enable+0x48>)
    1c72:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c74:	4e0e      	ldr	r6, [pc, #56]	; (1cb0 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c76:	4f0f      	ldr	r7, [pc, #60]	; (1cb4 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1c78:	2105      	movs	r1, #5
    1c7a:	0020      	movs	r0, r4
    1c7c:	47b0      	blx	r6
    1c7e:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1c80:	d009      	beq.n	1c96 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1c82:	7903      	ldrb	r3, [r0, #4]
    1c84:	7942      	ldrb	r2, [r0, #5]
    1c86:	0212      	lsls	r2, r2, #8
    1c88:	431a      	orrs	r2, r3
    1c8a:	78c1      	ldrb	r1, [r0, #3]
    1c8c:	7880      	ldrb	r0, [r0, #2]
    1c8e:	47b8      	blx	r7
    1c90:	2800      	cmp	r0, #0
    1c92:	d1f1      	bne.n	1c78 <udc_iface_enable+0x14>
    1c94:	e006      	b.n	1ca4 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    1c96:	4b08      	ldr	r3, [pc, #32]	; (1cb8 <udc_iface_enable+0x54>)
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	685b      	ldr	r3, [r3, #4]
    1c9c:	00ad      	lsls	r5, r5, #2
    1c9e:	58eb      	ldr	r3, [r5, r3]
    1ca0:	681b      	ldr	r3, [r3, #0]
    1ca2:	4798      	blx	r3
}
    1ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00001b85 	.word	0x00001b85
    1cac:	20000224 	.word	0x20000224
    1cb0:	00001b21 	.word	0x00001b21
    1cb4:	00003899 	.word	0x00003899
    1cb8:	20000220 	.word	0x20000220

00001cbc <udc_start>:
{
    1cbc:	b510      	push	{r4, lr}
	udd_enable();
    1cbe:	4b01      	ldr	r3, [pc, #4]	; (1cc4 <udc_start+0x8>)
    1cc0:	4798      	blx	r3
}
    1cc2:	bd10      	pop	{r4, pc}
    1cc4:	00003e65 	.word	0x00003e65

00001cc8 <udc_reset>:
{
    1cc8:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1cca:	4b0e      	ldr	r3, [pc, #56]	; (1d04 <udc_reset+0x3c>)
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d011      	beq.n	1cf6 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cd2:	4b0d      	ldr	r3, [pc, #52]	; (1d08 <udc_reset+0x40>)
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1cd8:	791b      	ldrb	r3, [r3, #4]
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d00b      	beq.n	1cf6 <udc_reset+0x2e>
    1cde:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    1ce0:	4e0a      	ldr	r6, [pc, #40]	; (1d0c <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ce2:	4d09      	ldr	r5, [pc, #36]	; (1d08 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    1ce4:	0020      	movs	r0, r4
    1ce6:	47b0      	blx	r6
				iface_num++) {
    1ce8:	3401      	adds	r4, #1
    1cea:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cec:	682b      	ldr	r3, [r5, #0]
    1cee:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1cf0:	791b      	ldrb	r3, [r3, #4]
    1cf2:	42a3      	cmp	r3, r4
    1cf4:	d8f6      	bhi.n	1ce4 <udc_reset+0x1c>
	udc_num_configuration = 0;
    1cf6:	2200      	movs	r2, #0
    1cf8:	4b02      	ldr	r3, [pc, #8]	; (1d04 <udc_reset+0x3c>)
    1cfa:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1cfc:	3201      	adds	r2, #1
    1cfe:	4b04      	ldr	r3, [pc, #16]	; (1d10 <udc_reset+0x48>)
    1d00:	801a      	strh	r2, [r3, #0]
}
    1d02:	bd70      	pop	{r4, r5, r6, pc}
    1d04:	2000021c 	.word	0x2000021c
    1d08:	20000220 	.word	0x20000220
    1d0c:	00001bf9 	.word	0x00001bf9
    1d10:	20000212 	.word	0x20000212

00001d14 <udc_sof_notify>:
{
    1d14:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1d16:	4b0e      	ldr	r3, [pc, #56]	; (1d50 <udc_sof_notify+0x3c>)
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d017      	beq.n	1d4e <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d1e:	4b0d      	ldr	r3, [pc, #52]	; (1d54 <udc_sof_notify+0x40>)
    1d20:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1d22:	681a      	ldr	r2, [r3, #0]
    1d24:	7912      	ldrb	r2, [r2, #4]
    1d26:	2a00      	cmp	r2, #0
    1d28:	d011      	beq.n	1d4e <udc_sof_notify+0x3a>
    1d2a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d2c:	4d09      	ldr	r5, [pc, #36]	; (1d54 <udc_sof_notify+0x40>)
    1d2e:	e006      	b.n	1d3e <udc_sof_notify+0x2a>
				iface_num++) {
    1d30:	3401      	adds	r4, #1
    1d32:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1d34:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1d36:	681a      	ldr	r2, [r3, #0]
    1d38:	7912      	ldrb	r2, [r2, #4]
    1d3a:	42a2      	cmp	r2, r4
    1d3c:	d907      	bls.n	1d4e <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1d3e:	685b      	ldr	r3, [r3, #4]
    1d40:	00a2      	lsls	r2, r4, #2
    1d42:	58d3      	ldr	r3, [r2, r3]
    1d44:	691b      	ldr	r3, [r3, #16]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d0f2      	beq.n	1d30 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1d4a:	4798      	blx	r3
    1d4c:	e7f0      	b.n	1d30 <udc_sof_notify+0x1c>
}
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
    1d50:	2000021c 	.word	0x2000021c
    1d54:	20000220 	.word	0x20000220

00001d58 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1d5a:	4bac      	ldr	r3, [pc, #688]	; (200c <STACK_SIZE+0xc>)
    1d5c:	2200      	movs	r2, #0
    1d5e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1d60:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1d62:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	b25a      	sxtb	r2, r3
    1d68:	2a00      	cmp	r2, #0
    1d6a:	db13      	blt.n	1d94 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1d6c:	2260      	movs	r2, #96	; 0x60
    1d6e:	421a      	tst	r2, r3
    1d70:	d100      	bne.n	1d74 <udc_process_setup+0x1c>
    1d72:	e0da      	b.n	1f2a <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d74:	4ba5      	ldr	r3, [pc, #660]	; (200c <STACK_SIZE+0xc>)
    1d76:	781a      	ldrb	r2, [r3, #0]
    1d78:	231f      	movs	r3, #31
    1d7a:	4013      	ands	r3, r2
    1d7c:	2b01      	cmp	r3, #1
    1d7e:	d100      	bne.n	1d82 <udc_process_setup+0x2a>
    1d80:	e176      	b.n	2070 <STACK_SIZE+0x70>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d82:	4ba2      	ldr	r3, [pc, #648]	; (200c <STACK_SIZE+0xc>)
    1d84:	781a      	ldrb	r2, [r3, #0]
    1d86:	231f      	movs	r3, #31
    1d88:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1d8a:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1d8c:	2b02      	cmp	r3, #2
    1d8e:	d100      	bne.n	1d92 <udc_process_setup+0x3a>
    1d90:	e1cc      	b.n	212c <STACK_SIZE+0x12c>
#endif
}
    1d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1d94:	4a9d      	ldr	r2, [pc, #628]	; (200c <STACK_SIZE+0xc>)
    1d96:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1d98:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1d9a:	2a00      	cmp	r2, #0
    1d9c:	d0f9      	beq.n	1d92 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1d9e:	2160      	movs	r1, #96	; 0x60
    1da0:	4219      	tst	r1, r3
    1da2:	d1e7      	bne.n	1d74 <udc_process_setup+0x1c>
    1da4:	211f      	movs	r1, #31
    1da6:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1da8:	d108      	bne.n	1dbc <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1daa:	4998      	ldr	r1, [pc, #608]	; (200c <STACK_SIZE+0xc>)
    1dac:	7849      	ldrb	r1, [r1, #1]
    1dae:	2906      	cmp	r1, #6
    1db0:	d023      	beq.n	1dfa <udc_process_setup+0xa2>
    1db2:	2908      	cmp	r1, #8
    1db4:	d100      	bne.n	1db8 <udc_process_setup+0x60>
    1db6:	e087      	b.n	1ec8 <udc_process_setup+0x170>
    1db8:	2900      	cmp	r1, #0
    1dba:	d017      	beq.n	1dec <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1dbc:	2b01      	cmp	r3, #1
    1dbe:	d100      	bne.n	1dc2 <udc_process_setup+0x6a>
    1dc0:	e08a      	b.n	1ed8 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1dc2:	2b02      	cmp	r3, #2
    1dc4:	d1d6      	bne.n	1d74 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1dc6:	4b91      	ldr	r3, [pc, #580]	; (200c <STACK_SIZE+0xc>)
    1dc8:	785b      	ldrb	r3, [r3, #1]
	return false;
    1dca:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d000      	beq.n	1dd2 <udc_process_setup+0x7a>
    1dd0:	e1a8      	b.n	2124 <STACK_SIZE+0x124>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1dd2:	2a02      	cmp	r2, #2
    1dd4:	d1d5      	bne.n	1d82 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1dd6:	4b8d      	ldr	r3, [pc, #564]	; (200c <STACK_SIZE+0xc>)
    1dd8:	7918      	ldrb	r0, [r3, #4]
    1dda:	4b8d      	ldr	r3, [pc, #564]	; (2010 <STACK_SIZE+0x10>)
    1ddc:	4798      	blx	r3
    1dde:	4b8d      	ldr	r3, [pc, #564]	; (2014 <STACK_SIZE+0x14>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1de0:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1de2:	2102      	movs	r1, #2
    1de4:	0018      	movs	r0, r3
    1de6:	4b8c      	ldr	r3, [pc, #560]	; (2018 <STACK_SIZE+0x18>)
    1de8:	4798      	blx	r3
    1dea:	e0ff      	b.n	1fec <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1dec:	2a02      	cmp	r2, #2
    1dee:	d1c8      	bne.n	1d82 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1df0:	3102      	adds	r1, #2
    1df2:	488a      	ldr	r0, [pc, #552]	; (201c <STACK_SIZE+0x1c>)
    1df4:	4b88      	ldr	r3, [pc, #544]	; (2018 <STACK_SIZE+0x18>)
    1df6:	4798      	blx	r3
    1df8:	e0f8      	b.n	1fec <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1dfa:	4b84      	ldr	r3, [pc, #528]	; (200c <STACK_SIZE+0xc>)
    1dfc:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1dfe:	0a13      	lsrs	r3, r2, #8
    1e00:	2b02      	cmp	r3, #2
    1e02:	d023      	beq.n	1e4c <udc_process_setup+0xf4>
    1e04:	b2d9      	uxtb	r1, r3
    1e06:	2902      	cmp	r1, #2
    1e08:	d90f      	bls.n	1e2a <udc_process_setup+0xd2>
    1e0a:	2b03      	cmp	r3, #3
    1e0c:	d034      	beq.n	1e78 <udc_process_setup+0x120>
    1e0e:	2b0f      	cmp	r3, #15
    1e10:	d000      	beq.n	1e14 <udc_process_setup+0xbc>
    1e12:	e184      	b.n	211e <STACK_SIZE+0x11e>
		if (udc_config.conf_bos == NULL) {
    1e14:	4b82      	ldr	r3, [pc, #520]	; (2020 <STACK_SIZE+0x20>)
    1e16:	6898      	ldr	r0, [r3, #8]
    1e18:	2800      	cmp	r0, #0
    1e1a:	d0b2      	beq.n	1d82 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1e1c:	7883      	ldrb	r3, [r0, #2]
    1e1e:	78c1      	ldrb	r1, [r0, #3]
    1e20:	0209      	lsls	r1, r1, #8
    1e22:	4319      	orrs	r1, r3
    1e24:	4b7c      	ldr	r3, [pc, #496]	; (2018 <STACK_SIZE+0x18>)
    1e26:	4798      	blx	r3
    1e28:	e007      	b.n	1e3a <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1e2a:	2b01      	cmp	r3, #1
    1e2c:	d000      	beq.n	1e30 <udc_process_setup+0xd8>
    1e2e:	e176      	b.n	211e <STACK_SIZE+0x11e>
				(uint8_t *) udc_config.confdev_lsfs,
    1e30:	4b7b      	ldr	r3, [pc, #492]	; (2020 <STACK_SIZE+0x20>)
    1e32:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1e34:	7801      	ldrb	r1, [r0, #0]
    1e36:	4b78      	ldr	r3, [pc, #480]	; (2018 <STACK_SIZE+0x18>)
    1e38:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1e3a:	4b74      	ldr	r3, [pc, #464]	; (200c <STACK_SIZE+0xc>)
    1e3c:	88da      	ldrh	r2, [r3, #6]
    1e3e:	899b      	ldrh	r3, [r3, #12]
    1e40:	4293      	cmp	r3, r2
    1e42:	d800      	bhi.n	1e46 <udc_process_setup+0xee>
    1e44:	e0d2      	b.n	1fec <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1e46:	4b71      	ldr	r3, [pc, #452]	; (200c <STACK_SIZE+0xc>)
    1e48:	819a      	strh	r2, [r3, #12]
    1e4a:	e0cf      	b.n	1fec <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1e4c:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1e4e:	4b74      	ldr	r3, [pc, #464]	; (2020 <STACK_SIZE+0x20>)
    1e50:	681b      	ldr	r3, [r3, #0]
    1e52:	7c5b      	ldrb	r3, [r3, #17]
    1e54:	4293      	cmp	r3, r2
    1e56:	d800      	bhi.n	1e5a <udc_process_setup+0x102>
    1e58:	e793      	b.n	1d82 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1e5a:	4b71      	ldr	r3, [pc, #452]	; (2020 <STACK_SIZE+0x20>)
    1e5c:	685b      	ldr	r3, [r3, #4]
    1e5e:	00d2      	lsls	r2, r2, #3
    1e60:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1e62:	7883      	ldrb	r3, [r0, #2]
    1e64:	78c1      	ldrb	r1, [r0, #3]
    1e66:	0209      	lsls	r1, r1, #8
    1e68:	4319      	orrs	r1, r3
    1e6a:	4b6b      	ldr	r3, [pc, #428]	; (2018 <STACK_SIZE+0x18>)
    1e6c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1e6e:	4b67      	ldr	r3, [pc, #412]	; (200c <STACK_SIZE+0xc>)
    1e70:	689b      	ldr	r3, [r3, #8]
    1e72:	2202      	movs	r2, #2
    1e74:	705a      	strb	r2, [r3, #1]
    1e76:	e7e0      	b.n	1e3a <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1e78:	23ff      	movs	r3, #255	; 0xff
    1e7a:	401a      	ands	r2, r3
    1e7c:	2a01      	cmp	r2, #1
    1e7e:	d020      	beq.n	1ec2 <udc_process_setup+0x16a>
    1e80:	2a00      	cmp	r2, #0
    1e82:	d019      	beq.n	1eb8 <udc_process_setup+0x160>
    1e84:	2a02      	cmp	r2, #2
    1e86:	d100      	bne.n	1e8a <udc_process_setup+0x132>
    1e88:	e178      	b.n	217c <STACK_SIZE+0x17c>
    1e8a:	2a03      	cmp	r2, #3
    1e8c:	d000      	beq.n	1e90 <udc_process_setup+0x138>
    1e8e:	e771      	b.n	1d74 <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1e90:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1e92:	4c64      	ldr	r4, [pc, #400]	; (2024 <STACK_SIZE+0x24>)
    1e94:	4a64      	ldr	r2, [pc, #400]	; (2028 <STACK_SIZE+0x28>)
    1e96:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1e98:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1e9a:	5ce0      	ldrb	r0, [r4, r3]
    1e9c:	8010      	strh	r0, [r2, #0]
    1e9e:	3301      	adds	r3, #1
    1ea0:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1ea2:	b2d8      	uxtb	r0, r3
    1ea4:	4281      	cmp	r1, r0
    1ea6:	d8f8      	bhi.n	1e9a <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1ea8:	0049      	lsls	r1, r1, #1
    1eaa:	3102      	adds	r1, #2
    1eac:	485e      	ldr	r0, [pc, #376]	; (2028 <STACK_SIZE+0x28>)
    1eae:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1eb0:	b289      	uxth	r1, r1
    1eb2:	4b59      	ldr	r3, [pc, #356]	; (2018 <STACK_SIZE+0x18>)
    1eb4:	4798      	blx	r3
    1eb6:	e7c0      	b.n	1e3a <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1eb8:	2104      	movs	r1, #4
    1eba:	485c      	ldr	r0, [pc, #368]	; (202c <STACK_SIZE+0x2c>)
    1ebc:	4b56      	ldr	r3, [pc, #344]	; (2018 <STACK_SIZE+0x18>)
    1ebe:	4798      	blx	r3
    1ec0:	e7bb      	b.n	1e3a <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1ec2:	4c5b      	ldr	r4, [pc, #364]	; (2030 <STACK_SIZE+0x30>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1ec4:	2109      	movs	r1, #9
    1ec6:	e7e5      	b.n	1e94 <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1ec8:	2a01      	cmp	r2, #1
    1eca:	d000      	beq.n	1ece <udc_process_setup+0x176>
    1ecc:	e759      	b.n	1d82 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1ece:	2101      	movs	r1, #1
    1ed0:	4858      	ldr	r0, [pc, #352]	; (2034 <STACK_SIZE+0x34>)
    1ed2:	4b51      	ldr	r3, [pc, #324]	; (2018 <STACK_SIZE+0x18>)
    1ed4:	4798      	blx	r3
    1ed6:	e089      	b.n	1fec <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ed8:	494c      	ldr	r1, [pc, #304]	; (200c <STACK_SIZE+0xc>)
    1eda:	7849      	ldrb	r1, [r1, #1]
    1edc:	290a      	cmp	r1, #10
    1ede:	d000      	beq.n	1ee2 <udc_process_setup+0x18a>
    1ee0:	e76f      	b.n	1dc2 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1ee2:	2a01      	cmp	r2, #1
    1ee4:	d000      	beq.n	1ee8 <udc_process_setup+0x190>
    1ee6:	e0c3      	b.n	2070 <STACK_SIZE+0x70>
	if (!udc_num_configuration) {
    1ee8:	4b52      	ldr	r3, [pc, #328]	; (2034 <STACK_SIZE+0x34>)
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d100      	bne.n	1ef2 <udc_process_setup+0x19a>
    1ef0:	e0be      	b.n	2070 <STACK_SIZE+0x70>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1ef2:	4b46      	ldr	r3, [pc, #280]	; (200c <STACK_SIZE+0xc>)
    1ef4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1ef6:	4b50      	ldr	r3, [pc, #320]	; (2038 <STACK_SIZE+0x38>)
    1ef8:	681d      	ldr	r5, [r3, #0]
    1efa:	682b      	ldr	r3, [r5, #0]
    1efc:	791b      	ldrb	r3, [r3, #4]
    1efe:	42a3      	cmp	r3, r4
    1f00:	d800      	bhi.n	1f04 <udc_process_setup+0x1ac>
    1f02:	e0b5      	b.n	2070 <STACK_SIZE+0x70>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1f04:	2100      	movs	r1, #0
    1f06:	0020      	movs	r0, r4
    1f08:	4b4c      	ldr	r3, [pc, #304]	; (203c <STACK_SIZE+0x3c>)
    1f0a:	4798      	blx	r3
    1f0c:	2800      	cmp	r0, #0
    1f0e:	d100      	bne.n	1f12 <udc_process_setup+0x1ba>
    1f10:	e730      	b.n	1d74 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1f12:	686b      	ldr	r3, [r5, #4]
    1f14:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1f16:	58e3      	ldr	r3, [r4, r3]
    1f18:	68db      	ldr	r3, [r3, #12]
    1f1a:	4798      	blx	r3
    1f1c:	4b48      	ldr	r3, [pc, #288]	; (2040 <STACK_SIZE+0x40>)
    1f1e:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1f20:	2101      	movs	r1, #1
    1f22:	0018      	movs	r0, r3
    1f24:	4b3c      	ldr	r3, [pc, #240]	; (2018 <STACK_SIZE+0x18>)
    1f26:	4798      	blx	r3
    1f28:	e060      	b.n	1fec <udc_process_setup+0x294>
    1f2a:	221f      	movs	r2, #31
    1f2c:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1f2e:	d15f      	bne.n	1ff0 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1f30:	4a36      	ldr	r2, [pc, #216]	; (200c <STACK_SIZE+0xc>)
    1f32:	7852      	ldrb	r2, [r2, #1]
    1f34:	2a03      	cmp	r2, #3
    1f36:	d100      	bne.n	1f3a <udc_process_setup+0x1e2>
    1f38:	e0f3      	b.n	2122 <STACK_SIZE+0x122>
    1f3a:	b2d1      	uxtb	r1, r2
    1f3c:	2903      	cmp	r1, #3
    1f3e:	d93b      	bls.n	1fb8 <udc_process_setup+0x260>
    1f40:	2a05      	cmp	r2, #5
    1f42:	d04b      	beq.n	1fdc <udc_process_setup+0x284>
    1f44:	2a09      	cmp	r2, #9
    1f46:	d153      	bne.n	1ff0 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1f48:	4b30      	ldr	r3, [pc, #192]	; (200c <STACK_SIZE+0xc>)
    1f4a:	88db      	ldrh	r3, [r3, #6]
    1f4c:	2b00      	cmp	r3, #0
    1f4e:	d000      	beq.n	1f52 <udc_process_setup+0x1fa>
    1f50:	e717      	b.n	1d82 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1f52:	4b3c      	ldr	r3, [pc, #240]	; (2044 <STACK_SIZE+0x44>)
    1f54:	4798      	blx	r3
    1f56:	2800      	cmp	r0, #0
    1f58:	d100      	bne.n	1f5c <udc_process_setup+0x204>
    1f5a:	e70b      	b.n	1d74 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1f5c:	4b2b      	ldr	r3, [pc, #172]	; (200c <STACK_SIZE+0xc>)
    1f5e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1f60:	4b2f      	ldr	r3, [pc, #188]	; (2020 <STACK_SIZE+0x20>)
    1f62:	681b      	ldr	r3, [r3, #0]
    1f64:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1f66:	429a      	cmp	r2, r3
    1f68:	dd00      	ble.n	1f6c <udc_process_setup+0x214>
    1f6a:	e703      	b.n	1d74 <udc_process_setup+0x1c>
	udc_reset();
    1f6c:	4b36      	ldr	r3, [pc, #216]	; (2048 <STACK_SIZE+0x48>)
    1f6e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1f70:	4b26      	ldr	r3, [pc, #152]	; (200c <STACK_SIZE+0xc>)
    1f72:	789b      	ldrb	r3, [r3, #2]
    1f74:	4a2f      	ldr	r2, [pc, #188]	; (2034 <STACK_SIZE+0x34>)
    1f76:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d037      	beq.n	1fec <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1f7c:	4a33      	ldr	r2, [pc, #204]	; (204c <STACK_SIZE+0x4c>)
    1f7e:	4694      	mov	ip, r2
    1f80:	4463      	add	r3, ip
    1f82:	00db      	lsls	r3, r3, #3
    1f84:	4a26      	ldr	r2, [pc, #152]	; (2020 <STACK_SIZE+0x20>)
    1f86:	6852      	ldr	r2, [r2, #4]
    1f88:	18d3      	adds	r3, r2, r3
    1f8a:	4a2b      	ldr	r2, [pc, #172]	; (2038 <STACK_SIZE+0x38>)
    1f8c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	791b      	ldrb	r3, [r3, #4]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d02a      	beq.n	1fec <udc_process_setup+0x294>
    1f96:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1f98:	4d2d      	ldr	r5, [pc, #180]	; (2050 <STACK_SIZE+0x50>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1f9a:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1f9c:	2100      	movs	r1, #0
    1f9e:	0020      	movs	r0, r4
    1fa0:	47a8      	blx	r5
    1fa2:	2800      	cmp	r0, #0
    1fa4:	d100      	bne.n	1fa8 <udc_process_setup+0x250>
    1fa6:	e6e5      	b.n	1d74 <udc_process_setup+0x1c>
			iface_num++) {
    1fa8:	3401      	adds	r4, #1
    1faa:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1fac:	6833      	ldr	r3, [r6, #0]
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	791b      	ldrb	r3, [r3, #4]
    1fb2:	42a3      	cmp	r3, r4
    1fb4:	d8f2      	bhi.n	1f9c <udc_process_setup+0x244>
    1fb6:	e019      	b.n	1fec <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1fb8:	2a01      	cmp	r2, #1
    1fba:	d119      	bne.n	1ff0 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1fbc:	4b13      	ldr	r3, [pc, #76]	; (200c <STACK_SIZE+0xc>)
    1fbe:	88db      	ldrh	r3, [r3, #6]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d000      	beq.n	1fc6 <udc_process_setup+0x26e>
    1fc4:	e6dd      	b.n	1d82 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1fc6:	4b11      	ldr	r3, [pc, #68]	; (200c <STACK_SIZE+0xc>)
    1fc8:	885b      	ldrh	r3, [r3, #2]
    1fca:	2b01      	cmp	r3, #1
    1fcc:	d000      	beq.n	1fd0 <udc_process_setup+0x278>
    1fce:	e6d8      	b.n	1d82 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1fd0:	4a12      	ldr	r2, [pc, #72]	; (201c <STACK_SIZE+0x1c>)
    1fd2:	8813      	ldrh	r3, [r2, #0]
    1fd4:	2102      	movs	r1, #2
    1fd6:	438b      	bics	r3, r1
    1fd8:	8013      	strh	r3, [r2, #0]
    1fda:	e007      	b.n	1fec <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1fdc:	4b0b      	ldr	r3, [pc, #44]	; (200c <STACK_SIZE+0xc>)
    1fde:	88db      	ldrh	r3, [r3, #6]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d000      	beq.n	1fe6 <udc_process_setup+0x28e>
    1fe4:	e6cd      	b.n	1d82 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1fe6:	4a1b      	ldr	r2, [pc, #108]	; (2054 <STACK_SIZE+0x54>)
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <STACK_SIZE+0xc>)
    1fea:	611a      	str	r2, [r3, #16]
			return true;
    1fec:	2001      	movs	r0, #1
    1fee:	e6d0      	b.n	1d92 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ff0:	2b01      	cmp	r3, #1
    1ff2:	d031      	beq.n	2058 <STACK_SIZE+0x58>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1ff4:	2b02      	cmp	r3, #2
    1ff6:	d000      	beq.n	1ffa <udc_process_setup+0x2a2>
    1ff8:	e6bc      	b.n	1d74 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ffa:	4b04      	ldr	r3, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffc:	785b      	ldrb	r3, [r3, #1]
    1ffe:	2b01      	cmp	r3, #1
    2000:	d06c      	beq.n	20dc <STACK_SIZE+0xdc>
    2002:	2b03      	cmp	r3, #3
    2004:	d100      	bne.n	2008 <STACK_SIZE+0x8>
    2006:	e078      	b.n	20fa <STACK_SIZE+0xfa>
	return false;
    2008:	2000      	movs	r0, #0
    200a:	e08b      	b.n	2124 <STACK_SIZE+0x124>
    200c:	200005c4 	.word	0x200005c4
    2010:	000039a1 	.word	0x000039a1
    2014:	20000214 	.word	0x20000214
    2018:	00003d79 	.word	0x00003d79
    201c:	20000212 	.word	0x20000212
    2020:	200000d8 	.word	0x200000d8
    2024:	0000a718 	.word	0x0000a718
    2028:	2000007c 	.word	0x2000007c
    202c:	20000098 	.word	0x20000098
    2030:	2000009c 	.word	0x2000009c
    2034:	2000021c 	.word	0x2000021c
    2038:	20000220 	.word	0x20000220
    203c:	00001b85 	.word	0x00001b85
    2040:	20000218 	.word	0x20000218
    2044:	00003d69 	.word	0x00003d69
    2048:	00001cc9 	.word	0x00001cc9
    204c:	1fffffff 	.word	0x1fffffff
    2050:	00001c65 	.word	0x00001c65
    2054:	00001b6d 	.word	0x00001b6d
			switch (udd_g_ctrlreq.req.bRequest) {
    2058:	4a4a      	ldr	r2, [pc, #296]	; (2184 <STACK_SIZE+0x184>)
    205a:	7852      	ldrb	r2, [r2, #1]
    205c:	2a0b      	cmp	r2, #11
    205e:	d1c9      	bne.n	1ff4 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    2060:	4b48      	ldr	r3, [pc, #288]	; (2184 <STACK_SIZE+0x184>)
    2062:	88db      	ldrh	r3, [r3, #6]
    2064:	2b00      	cmp	r3, #0
    2066:	d103      	bne.n	2070 <STACK_SIZE+0x70>
	if (!udc_num_configuration) {
    2068:	4b47      	ldr	r3, [pc, #284]	; (2188 <STACK_SIZE+0x188>)
    206a:	781b      	ldrb	r3, [r3, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d127      	bne.n	20c0 <STACK_SIZE+0xc0>
	if (0 == udc_num_configuration) {
    2070:	4b45      	ldr	r3, [pc, #276]	; (2188 <STACK_SIZE+0x188>)
    2072:	781b      	ldrb	r3, [r3, #0]
	return false;
    2074:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    2076:	2b00      	cmp	r3, #0
    2078:	d100      	bne.n	207c <STACK_SIZE+0x7c>
    207a:	e68a      	b.n	1d92 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    207c:	4b41      	ldr	r3, [pc, #260]	; (2184 <STACK_SIZE+0x184>)
    207e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2080:	4b42      	ldr	r3, [pc, #264]	; (218c <STACK_SIZE+0x18c>)
    2082:	681d      	ldr	r5, [r3, #0]
    2084:	682b      	ldr	r3, [r5, #0]
    2086:	791b      	ldrb	r3, [r3, #4]
    2088:	42a3      	cmp	r3, r4
    208a:	d800      	bhi.n	208e <STACK_SIZE+0x8e>
    208c:	e681      	b.n	1d92 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    208e:	2100      	movs	r1, #0
    2090:	0020      	movs	r0, r4
    2092:	4b3f      	ldr	r3, [pc, #252]	; (2190 <STACK_SIZE+0x190>)
    2094:	4798      	blx	r3
    2096:	2800      	cmp	r0, #0
    2098:	d100      	bne.n	209c <STACK_SIZE+0x9c>
    209a:	e672      	b.n	1d82 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    209c:	686b      	ldr	r3, [r5, #4]
    209e:	00a2      	lsls	r2, r4, #2
    20a0:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    20a2:	68eb      	ldr	r3, [r5, #12]
    20a4:	4798      	blx	r3
    20a6:	0001      	movs	r1, r0
    20a8:	0020      	movs	r0, r4
    20aa:	4b39      	ldr	r3, [pc, #228]	; (2190 <STACK_SIZE+0x190>)
    20ac:	4798      	blx	r3
    20ae:	2800      	cmp	r0, #0
    20b0:	d100      	bne.n	20b4 <STACK_SIZE+0xb4>
    20b2:	e666      	b.n	1d82 <udc_process_setup+0x2a>
	return udi_api->setup();
    20b4:	68ab      	ldr	r3, [r5, #8]
    20b6:	4798      	blx	r3
		if (udc_req_iface()) {
    20b8:	2800      	cmp	r0, #0
    20ba:	d000      	beq.n	20be <STACK_SIZE+0xbe>
    20bc:	e669      	b.n	1d92 <udc_process_setup+0x3a>
    20be:	e660      	b.n	1d82 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    20c0:	4b30      	ldr	r3, [pc, #192]	; (2184 <STACK_SIZE+0x184>)
    20c2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    20c4:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    20c6:	0028      	movs	r0, r5
    20c8:	4b32      	ldr	r3, [pc, #200]	; (2194 <STACK_SIZE+0x194>)
    20ca:	4798      	blx	r3
    20cc:	2800      	cmp	r0, #0
    20ce:	d100      	bne.n	20d2 <STACK_SIZE+0xd2>
    20d0:	e650      	b.n	1d74 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    20d2:	b2e1      	uxtb	r1, r4
    20d4:	0028      	movs	r0, r5
    20d6:	4b30      	ldr	r3, [pc, #192]	; (2198 <STACK_SIZE+0x198>)
    20d8:	4798      	blx	r3
    20da:	e023      	b.n	2124 <STACK_SIZE+0x124>
	if (udd_g_ctrlreq.req.wLength) {
    20dc:	4b29      	ldr	r3, [pc, #164]	; (2184 <STACK_SIZE+0x184>)
    20de:	88db      	ldrh	r3, [r3, #6]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d000      	beq.n	20e6 <STACK_SIZE+0xe6>
    20e4:	e64d      	b.n	1d82 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    20e6:	4b27      	ldr	r3, [pc, #156]	; (2184 <STACK_SIZE+0x184>)
    20e8:	885b      	ldrh	r3, [r3, #2]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d000      	beq.n	20f0 <STACK_SIZE+0xf0>
    20ee:	e648      	b.n	1d82 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    20f0:	4b24      	ldr	r3, [pc, #144]	; (2184 <STACK_SIZE+0x184>)
    20f2:	7918      	ldrb	r0, [r3, #4]
    20f4:	4b29      	ldr	r3, [pc, #164]	; (219c <STACK_SIZE+0x19c>)
    20f6:	4798      	blx	r3
    20f8:	e014      	b.n	2124 <STACK_SIZE+0x124>
	if (udd_g_ctrlreq.req.wLength) {
    20fa:	4b22      	ldr	r3, [pc, #136]	; (2184 <STACK_SIZE+0x184>)
    20fc:	88db      	ldrh	r3, [r3, #6]
    20fe:	2b00      	cmp	r3, #0
    2100:	d000      	beq.n	2104 <STACK_SIZE+0x104>
    2102:	e63e      	b.n	1d82 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2104:	4b1f      	ldr	r3, [pc, #124]	; (2184 <STACK_SIZE+0x184>)
    2106:	885b      	ldrh	r3, [r3, #2]
    2108:	2b00      	cmp	r3, #0
    210a:	d000      	beq.n	210e <STACK_SIZE+0x10e>
    210c:	e639      	b.n	1d82 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    210e:	4c1d      	ldr	r4, [pc, #116]	; (2184 <STACK_SIZE+0x184>)
    2110:	7920      	ldrb	r0, [r4, #4]
    2112:	4b23      	ldr	r3, [pc, #140]	; (21a0 <STACK_SIZE+0x1a0>)
    2114:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2116:	7920      	ldrb	r0, [r4, #4]
    2118:	4b22      	ldr	r3, [pc, #136]	; (21a4 <STACK_SIZE+0x1a4>)
    211a:	4798      	blx	r3
    211c:	e002      	b.n	2124 <STACK_SIZE+0x124>
		return false;
    211e:	2000      	movs	r0, #0
    2120:	e000      	b.n	2124 <STACK_SIZE+0x124>
				return udc_req_std_dev_set_feature();
    2122:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2124:	2800      	cmp	r0, #0
    2126:	d000      	beq.n	212a <STACK_SIZE+0x12a>
    2128:	e633      	b.n	1d92 <udc_process_setup+0x3a>
    212a:	e623      	b.n	1d74 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    212c:	4b16      	ldr	r3, [pc, #88]	; (2188 <STACK_SIZE+0x188>)
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	2b00      	cmp	r3, #0
    2132:	d100      	bne.n	2136 <STACK_SIZE+0x136>
    2134:	e62d      	b.n	1d92 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2136:	4b15      	ldr	r3, [pc, #84]	; (218c <STACK_SIZE+0x18c>)
    2138:	681b      	ldr	r3, [r3, #0]
    213a:	681a      	ldr	r2, [r3, #0]
    213c:	7912      	ldrb	r2, [r2, #4]
    213e:	2a00      	cmp	r2, #0
    2140:	d01a      	beq.n	2178 <STACK_SIZE+0x178>
    2142:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2144:	4e12      	ldr	r6, [pc, #72]	; (2190 <STACK_SIZE+0x190>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2146:	4f11      	ldr	r7, [pc, #68]	; (218c <STACK_SIZE+0x18c>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2148:	685b      	ldr	r3, [r3, #4]
    214a:	00aa      	lsls	r2, r5, #2
    214c:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    214e:	68e3      	ldr	r3, [r4, #12]
    2150:	4798      	blx	r3
    2152:	0001      	movs	r1, r0
    2154:	0028      	movs	r0, r5
    2156:	47b0      	blx	r6
    2158:	2800      	cmp	r0, #0
    215a:	d100      	bne.n	215e <STACK_SIZE+0x15e>
    215c:	e619      	b.n	1d92 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    215e:	68a3      	ldr	r3, [r4, #8]
    2160:	4798      	blx	r3
    2162:	2800      	cmp	r0, #0
    2164:	d000      	beq.n	2168 <STACK_SIZE+0x168>
    2166:	e614      	b.n	1d92 <udc_process_setup+0x3a>
			iface_num++) {
    2168:	3501      	adds	r5, #1
    216a:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    216c:	683b      	ldr	r3, [r7, #0]
    216e:	681a      	ldr	r2, [r3, #0]
    2170:	7912      	ldrb	r2, [r2, #4]
    2172:	42aa      	cmp	r2, r5
    2174:	d8e8      	bhi.n	2148 <STACK_SIZE+0x148>
    2176:	e60c      	b.n	1d92 <udc_process_setup+0x3a>
	return false;
    2178:	2000      	movs	r0, #0
    217a:	e60a      	b.n	1d92 <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    217c:	2103      	movs	r1, #3
		str = udc_string_product_name;
    217e:	4c0a      	ldr	r4, [pc, #40]	; (21a8 <STACK_SIZE+0x1a8>)
    2180:	e688      	b.n	1e94 <udc_process_setup+0x13c>
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	200005c4 	.word	0x200005c4
    2188:	2000021c 	.word	0x2000021c
    218c:	20000220 	.word	0x20000220
    2190:	00001b85 	.word	0x00001b85
    2194:	00001bf9 	.word	0x00001bf9
    2198:	00001c65 	.word	0x00001c65
    219c:	00003ae5 	.word	0x00003ae5
    21a0:	000037f5 	.word	0x000037f5
    21a4:	000039b5 	.word	0x000039b5
    21a8:	200000a8 	.word	0x200000a8

000021ac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    21ac:	4a04      	ldr	r2, [pc, #16]	; (21c0 <_extint_enable+0x14>)
    21ae:	7813      	ldrb	r3, [r2, #0]
    21b0:	2102      	movs	r1, #2
    21b2:	430b      	orrs	r3, r1
    21b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    21b6:	7853      	ldrb	r3, [r2, #1]
    21b8:	b25b      	sxtb	r3, r3
    21ba:	2b00      	cmp	r3, #0
    21bc:	dbfb      	blt.n	21b6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    21be:	4770      	bx	lr
    21c0:	40001800 	.word	0x40001800

000021c4 <_system_extint_init>:
{
    21c4:	b500      	push	{lr}
    21c6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    21c8:	4a12      	ldr	r2, [pc, #72]	; (2214 <_system_extint_init+0x50>)
    21ca:	6993      	ldr	r3, [r2, #24]
    21cc:	2140      	movs	r1, #64	; 0x40
    21ce:	430b      	orrs	r3, r1
    21d0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    21d2:	a901      	add	r1, sp, #4
    21d4:	2300      	movs	r3, #0
    21d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    21d8:	2005      	movs	r0, #5
    21da:	4b0f      	ldr	r3, [pc, #60]	; (2218 <_system_extint_init+0x54>)
    21dc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    21de:	2005      	movs	r0, #5
    21e0:	4b0e      	ldr	r3, [pc, #56]	; (221c <_system_extint_init+0x58>)
    21e2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    21e4:	4a0e      	ldr	r2, [pc, #56]	; (2220 <_system_extint_init+0x5c>)
    21e6:	7813      	ldrb	r3, [r2, #0]
    21e8:	2101      	movs	r1, #1
    21ea:	430b      	orrs	r3, r1
    21ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    21ee:	7853      	ldrb	r3, [r2, #1]
    21f0:	b25b      	sxtb	r3, r3
    21f2:	2b00      	cmp	r3, #0
    21f4:	dbfb      	blt.n	21ee <_system_extint_init+0x2a>
    21f6:	4b0b      	ldr	r3, [pc, #44]	; (2224 <_system_extint_init+0x60>)
    21f8:	0019      	movs	r1, r3
    21fa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    21fc:	2200      	movs	r2, #0
    21fe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2200:	4299      	cmp	r1, r3
    2202:	d1fc      	bne.n	21fe <_system_extint_init+0x3a>
    2204:	2210      	movs	r2, #16
    2206:	4b08      	ldr	r3, [pc, #32]	; (2228 <_system_extint_init+0x64>)
    2208:	601a      	str	r2, [r3, #0]
	_extint_enable();
    220a:	4b08      	ldr	r3, [pc, #32]	; (222c <_system_extint_init+0x68>)
    220c:	4798      	blx	r3
}
    220e:	b003      	add	sp, #12
    2210:	bd00      	pop	{pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	40000400 	.word	0x40000400
    2218:	00008c59 	.word	0x00008c59
    221c:	00008bcd 	.word	0x00008bcd
    2220:	40001800 	.word	0x40001800
    2224:	20000380 	.word	0x20000380
    2228:	e000e100 	.word	0xe000e100
    222c:	000021ad 	.word	0x000021ad

00002230 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    2230:	2300      	movs	r3, #0
    2232:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2234:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2236:	2201      	movs	r2, #1
    2238:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    223a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    223c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    223e:	3302      	adds	r3, #2
    2240:	72c3      	strb	r3, [r0, #11]
}
    2242:	4770      	bx	lr

00002244 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2244:	b5f0      	push	{r4, r5, r6, r7, lr}
    2246:	b083      	sub	sp, #12
    2248:	0005      	movs	r5, r0
    224a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    224c:	a901      	add	r1, sp, #4
    224e:	2300      	movs	r3, #0
    2250:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2252:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2254:	7923      	ldrb	r3, [r4, #4]
    2256:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2258:	7a23      	ldrb	r3, [r4, #8]
    225a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    225c:	7820      	ldrb	r0, [r4, #0]
    225e:	4b15      	ldr	r3, [pc, #84]	; (22b4 <extint_chan_set_config+0x70>)
    2260:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2262:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    2264:	2d1f      	cmp	r5, #31
    2266:	d800      	bhi.n	226a <extint_chan_set_config+0x26>
		return eics[eic_index];
    2268:	4813      	ldr	r0, [pc, #76]	; (22b8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    226a:	2207      	movs	r2, #7
    226c:	402a      	ands	r2, r5
    226e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    2270:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2272:	7aa3      	ldrb	r3, [r4, #10]
    2274:	2b00      	cmp	r3, #0
    2276:	d001      	beq.n	227c <extint_chan_set_config+0x38>
    2278:	2308      	movs	r3, #8
    227a:	431f      	orrs	r7, r3
    227c:	08eb      	lsrs	r3, r5, #3
    227e:	009b      	lsls	r3, r3, #2
    2280:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    2282:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2284:	260f      	movs	r6, #15
    2286:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2288:	43b1      	bics	r1, r6
			(new_config << config_pos);
    228a:	4097      	lsls	r7, r2
    228c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    228e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    2290:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    2292:	7a63      	ldrb	r3, [r4, #9]
    2294:	2b00      	cmp	r3, #0
    2296:	d106      	bne.n	22a6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    2298:	6943      	ldr	r3, [r0, #20]
    229a:	2201      	movs	r2, #1
    229c:	40aa      	lsls	r2, r5
    229e:	4393      	bics	r3, r2
    22a0:	6143      	str	r3, [r0, #20]
	}
}
    22a2:	b003      	add	sp, #12
    22a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    22a6:	6942      	ldr	r2, [r0, #20]
    22a8:	2301      	movs	r3, #1
    22aa:	40ab      	lsls	r3, r5
    22ac:	4313      	orrs	r3, r2
    22ae:	6143      	str	r3, [r0, #20]
    22b0:	e7f7      	b.n	22a2 <extint_chan_set_config+0x5e>
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00008d51 	.word	0x00008d51
    22b8:	40001800 	.word	0x40001800

000022bc <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22bc:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    22be:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    22c0:	b25b      	sxtb	r3, r3
    22c2:	2b00      	cmp	r3, #0
    22c4:	dbfb      	blt.n	22be <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    22c6:	8813      	ldrh	r3, [r2, #0]
    22c8:	2102      	movs	r1, #2
    22ca:	430b      	orrs	r3, r1
    22cc:	8013      	strh	r3, [r2, #0]
}
    22ce:	4770      	bx	lr

000022d0 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22d0:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    22d2:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    22d4:	b25b      	sxtb	r3, r3
    22d6:	2b00      	cmp	r3, #0
    22d8:	dbfb      	blt.n	22d2 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    22da:	23c1      	movs	r3, #193	; 0xc1
    22dc:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    22de:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    22e0:	8813      	ldrh	r3, [r2, #0]
    22e2:	2102      	movs	r1, #2
    22e4:	438b      	bics	r3, r1
    22e6:	8013      	strh	r3, [r2, #0]
}
    22e8:	4770      	bx	lr
	...

000022ec <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    22ec:	b570      	push	{r4, r5, r6, lr}
    22ee:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22f0:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    22f2:	4b06      	ldr	r3, [pc, #24]	; (230c <rtc_calendar_reset+0x20>)
    22f4:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    22f6:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    22f8:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    22fa:	b25b      	sxtb	r3, r3
    22fc:	2b00      	cmp	r3, #0
    22fe:	dbfb      	blt.n	22f8 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    2300:	882b      	ldrh	r3, [r5, #0]
    2302:	2201      	movs	r2, #1
    2304:	4313      	orrs	r3, r2
    2306:	802b      	strh	r3, [r5, #0]
}
    2308:	bd70      	pop	{r4, r5, r6, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	000022d1 	.word	0x000022d1

00002310 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2310:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    2312:	88cb      	ldrh	r3, [r1, #6]
    2314:	88c2      	ldrh	r2, [r0, #6]
    2316:	1a9a      	subs	r2, r3, r2
    2318:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    231a:	794b      	ldrb	r3, [r1, #5]
    231c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    231e:	790c      	ldrb	r4, [r1, #4]
    2320:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    2322:	4323      	orrs	r3, r4
    2324:	788c      	ldrb	r4, [r1, #2]
    2326:	0324      	lsls	r4, r4, #12
    2328:	4323      	orrs	r3, r4
    232a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    232c:	7902      	ldrb	r2, [r0, #4]
    232e:	2a00      	cmp	r2, #0
    2330:	d105      	bne.n	233e <rtc_calendar_time_to_register_value+0x2e>
    2332:	78ca      	ldrb	r2, [r1, #3]
    2334:	2a00      	cmp	r2, #0
    2336:	d002      	beq.n	233e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    2338:	2280      	movs	r2, #128	; 0x80
    233a:	0252      	lsls	r2, r2, #9
    233c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    233e:	7848      	ldrb	r0, [r1, #1]
    2340:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    2342:	780a      	ldrb	r2, [r1, #0]
    2344:	4310      	orrs	r0, r2
    2346:	4318      	orrs	r0, r3

	return register_value;
}
    2348:	bd10      	pop	{r4, pc}

0000234a <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    234a:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    234c:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    234e:	88c4      	ldrh	r4, [r0, #6]
    2350:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2352:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    2354:	018b      	lsls	r3, r1, #6
    2356:	0f1b      	lsrs	r3, r3, #28
    2358:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    235a:	028b      	lsls	r3, r1, #10
    235c:	0edb      	lsrs	r3, r3, #27
    235e:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    2360:	7903      	ldrb	r3, [r0, #4]
    2362:	2b00      	cmp	r3, #0
    2364:	d10c      	bne.n	2380 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    2366:	040b      	lsls	r3, r1, #16
    2368:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    236a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    236c:	03cb      	lsls	r3, r1, #15
    236e:	0fdb      	lsrs	r3, r3, #31
    2370:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    2372:	0988      	lsrs	r0, r1, #6
    2374:	233f      	movs	r3, #63	; 0x3f
    2376:	4018      	ands	r0, r3
    2378:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    237a:	4019      	ands	r1, r3
    237c:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    237e:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    2380:	03cb      	lsls	r3, r1, #15
    2382:	0edb      	lsrs	r3, r3, #27
    2384:	7093      	strb	r3, [r2, #2]
    2386:	e7f4      	b.n	2372 <rtc_calendar_register_value_to_time+0x28>

00002388 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2388:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    238a:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    238c:	4b03      	ldr	r3, [pc, #12]	; (239c <rtc_calendar_set_time+0x14>)
    238e:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2390:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    2392:	b25b      	sxtb	r3, r3
    2394:	2b00      	cmp	r3, #0
    2396:	dbfb      	blt.n	2390 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    2398:	6120      	str	r0, [r4, #16]
}
    239a:	bd10      	pop	{r4, pc}
    239c:	00002311 	.word	0x00002311

000023a0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    23a0:	b510      	push	{r4, lr}
    23a2:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    23a4:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    23a6:	7941      	ldrb	r1, [r0, #5]
    23a8:	2900      	cmp	r1, #0
    23aa:	d006      	beq.n	23ba <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    23ac:	8859      	ldrh	r1, [r3, #2]
    23ae:	0449      	lsls	r1, r1, #17
    23b0:	d50b      	bpl.n	23ca <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    23b2:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    23b4:	4b0a      	ldr	r3, [pc, #40]	; (23e0 <rtc_calendar_get_time+0x40>)
    23b6:	4798      	blx	r3
}
    23b8:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    23ba:	490a      	ldr	r1, [pc, #40]	; (23e4 <rtc_calendar_get_time+0x44>)
    23bc:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    23be:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    23c0:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    23c2:	b249      	sxtb	r1, r1
    23c4:	2900      	cmp	r1, #0
    23c6:	dbfb      	blt.n	23c0 <rtc_calendar_get_time+0x20>
    23c8:	e7f3      	b.n	23b2 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    23ca:	8859      	ldrh	r1, [r3, #2]
    23cc:	24c0      	movs	r4, #192	; 0xc0
    23ce:	0224      	lsls	r4, r4, #8
    23d0:	4321      	orrs	r1, r4
    23d2:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    23d4:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    23d6:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    23d8:	b249      	sxtb	r1, r1
    23da:	2900      	cmp	r1, #0
    23dc:	dbfb      	blt.n	23d6 <rtc_calendar_get_time+0x36>
    23de:	e7e8      	b.n	23b2 <rtc_calendar_get_time+0x12>
    23e0:	0000234b 	.word	0x0000234b
    23e4:	ffff8000 	.word	0xffff8000

000023e8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    23e8:	b570      	push	{r4, r5, r6, lr}
    23ea:	000d      	movs	r5, r1
    23ec:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    23ee:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    23f0:	2a01      	cmp	r2, #1
    23f2:	d901      	bls.n	23f8 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    23f4:	0018      	movs	r0, r3
    23f6:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    23f8:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    23fa:	4b06      	ldr	r3, [pc, #24]	; (2414 <rtc_calendar_set_alarm+0x2c>)
    23fc:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    23fe:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    2400:	b25b      	sxtb	r3, r3
    2402:	2b00      	cmp	r3, #0
    2404:	dbfb      	blt.n	23fe <rtc_calendar_set_alarm+0x16>
    2406:	00e4      	lsls	r4, r4, #3
    2408:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    240a:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    240c:	7a2b      	ldrb	r3, [r5, #8]
    240e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    2410:	2300      	movs	r3, #0
    2412:	e7ef      	b.n	23f4 <rtc_calendar_set_alarm+0xc>
    2414:	00002311 	.word	0x00002311

00002418 <rtc_calendar_init>:
{
    2418:	b530      	push	{r4, r5, lr}
    241a:	b083      	sub	sp, #12
    241c:	0005      	movs	r5, r0
    241e:	0014      	movs	r4, r2
	module->hw = hw;
    2420:	6001      	str	r1, [r0, #0]
    2422:	4a1c      	ldr	r2, [pc, #112]	; (2494 <rtc_calendar_init+0x7c>)
    2424:	6993      	ldr	r3, [r2, #24]
    2426:	2120      	movs	r1, #32
    2428:	430b      	orrs	r3, r1
    242a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    242c:	a901      	add	r1, sp, #4
    242e:	2302      	movs	r3, #2
    2430:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    2432:	2004      	movs	r0, #4
    2434:	4b18      	ldr	r3, [pc, #96]	; (2498 <rtc_calendar_init+0x80>)
    2436:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    2438:	2004      	movs	r0, #4
    243a:	4b18      	ldr	r3, [pc, #96]	; (249c <rtc_calendar_init+0x84>)
    243c:	4798      	blx	r3
	rtc_calendar_reset(module);
    243e:	0028      	movs	r0, r5
    2440:	4b17      	ldr	r3, [pc, #92]	; (24a0 <rtc_calendar_init+0x88>)
    2442:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    2444:	7923      	ldrb	r3, [r4, #4]
    2446:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    2448:	78e3      	ldrb	r3, [r4, #3]
    244a:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    244c:	88e3      	ldrh	r3, [r4, #6]
    244e:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    2450:	4b14      	ldr	r3, [pc, #80]	; (24a4 <rtc_calendar_init+0x8c>)
    2452:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    2454:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    2456:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    2458:	7921      	ldrb	r1, [r4, #4]
    245a:	2900      	cmp	r1, #0
    245c:	d017      	beq.n	248e <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    245e:	2108      	movs	r1, #8
    2460:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    2462:	78a1      	ldrb	r1, [r4, #2]
    2464:	2900      	cmp	r1, #0
    2466:	d001      	beq.n	246c <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    2468:	2180      	movs	r1, #128	; 0x80
    246a:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    246c:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    246e:	78e3      	ldrb	r3, [r4, #3]
    2470:	2b00      	cmp	r3, #0
    2472:	d004      	beq.n	247e <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    2474:	8853      	ldrh	r3, [r2, #2]
    2476:	2180      	movs	r1, #128	; 0x80
    2478:	01c9      	lsls	r1, r1, #7
    247a:	430b      	orrs	r3, r1
    247c:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    247e:	0021      	movs	r1, r4
    2480:	3108      	adds	r1, #8
    2482:	2200      	movs	r2, #0
    2484:	0028      	movs	r0, r5
    2486:	4b08      	ldr	r3, [pc, #32]	; (24a8 <rtc_calendar_init+0x90>)
    2488:	4798      	blx	r3
}
    248a:	b003      	add	sp, #12
    248c:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    248e:	2148      	movs	r1, #72	; 0x48
    2490:	430b      	orrs	r3, r1
    2492:	e7e6      	b.n	2462 <rtc_calendar_init+0x4a>
    2494:	40000400 	.word	0x40000400
    2498:	00008c59 	.word	0x00008c59
    249c:	00008bcd 	.word	0x00008bcd
    24a0:	000022ed 	.word	0x000022ed
    24a4:	200003c0 	.word	0x200003c0
    24a8:	000023e9 	.word	0x000023e9

000024ac <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    24ac:	b570      	push	{r4, r5, r6, lr}
    24ae:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    24b0:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    24b2:	2a01      	cmp	r2, #1
    24b4:	d901      	bls.n	24ba <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    24b6:	0018      	movs	r0, r3
    24b8:	bd70      	pop	{r4, r5, r6, pc}
    24ba:	00d2      	lsls	r2, r2, #3
    24bc:	6803      	ldr	r3, [r0, #0]
    24be:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    24c0:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    24c2:	0022      	movs	r2, r4
    24c4:	4b02      	ldr	r3, [pc, #8]	; (24d0 <rtc_calendar_get_alarm+0x24>)
    24c6:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    24c8:	7f2b      	ldrb	r3, [r5, #28]
    24ca:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    24cc:	2300      	movs	r3, #0
    24ce:	e7f2      	b.n	24b6 <rtc_calendar_get_alarm+0xa>
    24d0:	0000234b 	.word	0x0000234b

000024d4 <rtc_calendar_swap_time_mode>:
{
    24d4:	b570      	push	{r4, r5, r6, lr}
    24d6:	b086      	sub	sp, #24
    24d8:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    24da:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    24dc:	a904      	add	r1, sp, #16
    24de:	4b3d      	ldr	r3, [pc, #244]	; (25d4 <rtc_calendar_swap_time_mode+0x100>)
    24e0:	4798      	blx	r3
	if (module->clock_24h) {
    24e2:	7923      	ldrb	r3, [r4, #4]
    24e4:	2b00      	cmp	r3, #0
    24e6:	d042      	beq.n	256e <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    24e8:	aa04      	add	r2, sp, #16
    24ea:	7890      	ldrb	r0, [r2, #2]
    24ec:	230b      	movs	r3, #11
    24ee:	4283      	cmp	r3, r0
    24f0:	419b      	sbcs	r3, r3
    24f2:	425b      	negs	r3, r3
    24f4:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    24f6:	210c      	movs	r1, #12
    24f8:	4b37      	ldr	r3, [pc, #220]	; (25d8 <rtc_calendar_swap_time_mode+0x104>)
    24fa:	4798      	blx	r3
    24fc:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    24fe:	2900      	cmp	r1, #0
    2500:	d016      	beq.n	2530 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    2502:	ab04      	add	r3, sp, #16
    2504:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2506:	ad01      	add	r5, sp, #4
    2508:	2200      	movs	r2, #0
    250a:	0029      	movs	r1, r5
    250c:	0020      	movs	r0, r4
    250e:	4b33      	ldr	r3, [pc, #204]	; (25dc <rtc_calendar_swap_time_mode+0x108>)
    2510:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    2512:	78a8      	ldrb	r0, [r5, #2]
    2514:	230b      	movs	r3, #11
    2516:	4283      	cmp	r3, r0
    2518:	419b      	sbcs	r3, r3
    251a:	425b      	negs	r3, r3
    251c:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    251e:	210c      	movs	r1, #12
    2520:	4b2d      	ldr	r3, [pc, #180]	; (25d8 <rtc_calendar_swap_time_mode+0x104>)
    2522:	4798      	blx	r3
    2524:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    2526:	2900      	cmp	r1, #0
    2528:	d006      	beq.n	2538 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    252a:	ab01      	add	r3, sp, #4
    252c:	7099      	strb	r1, [r3, #2]
    252e:	e006      	b.n	253e <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    2530:	220c      	movs	r2, #12
    2532:	ab04      	add	r3, sp, #16
    2534:	709a      	strb	r2, [r3, #2]
    2536:	e7e6      	b.n	2506 <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    2538:	220c      	movs	r2, #12
    253a:	ab01      	add	r3, sp, #4
    253c:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    253e:	2500      	movs	r5, #0
    2540:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2542:	2200      	movs	r2, #0
    2544:	a901      	add	r1, sp, #4
    2546:	0020      	movs	r0, r4
    2548:	4b25      	ldr	r3, [pc, #148]	; (25e0 <rtc_calendar_swap_time_mode+0x10c>)
    254a:	4798      	blx	r3
		module->clock_24h = false;
    254c:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    254e:	0020      	movs	r0, r4
    2550:	4b24      	ldr	r3, [pc, #144]	; (25e4 <rtc_calendar_swap_time_mode+0x110>)
    2552:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    2554:	8833      	ldrh	r3, [r6, #0]
    2556:	2240      	movs	r2, #64	; 0x40
    2558:	4053      	eors	r3, r2
    255a:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    255c:	0020      	movs	r0, r4
    255e:	4b22      	ldr	r3, [pc, #136]	; (25e8 <rtc_calendar_swap_time_mode+0x114>)
    2560:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    2562:	a904      	add	r1, sp, #16
    2564:	0020      	movs	r0, r4
    2566:	4b21      	ldr	r3, [pc, #132]	; (25ec <rtc_calendar_swap_time_mode+0x118>)
    2568:	4798      	blx	r3
}
    256a:	b006      	add	sp, #24
    256c:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    256e:	ab04      	add	r3, sp, #16
    2570:	78db      	ldrb	r3, [r3, #3]
    2572:	2b00      	cmp	r3, #0
    2574:	d015      	beq.n	25a2 <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    2576:	ab04      	add	r3, sp, #16
    2578:	789a      	ldrb	r2, [r3, #2]
    257a:	320c      	adds	r2, #12
    257c:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    257e:	2200      	movs	r2, #0
    2580:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    2582:	ad01      	add	r5, sp, #4
    2584:	2200      	movs	r2, #0
    2586:	0029      	movs	r1, r5
    2588:	0020      	movs	r0, r4
    258a:	4b14      	ldr	r3, [pc, #80]	; (25dc <rtc_calendar_swap_time_mode+0x108>)
    258c:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    258e:	78eb      	ldrb	r3, [r5, #3]
    2590:	2b00      	cmp	r3, #0
    2592:	d10e      	bne.n	25b2 <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    2594:	ab01      	add	r3, sp, #4
    2596:	789b      	ldrb	r3, [r3, #2]
    2598:	2b0c      	cmp	r3, #12
    259a:	d017      	beq.n	25cc <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    259c:	2301      	movs	r3, #1
    259e:	7123      	strb	r3, [r4, #4]
    25a0:	e7d5      	b.n	254e <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    25a2:	ab04      	add	r3, sp, #16
    25a4:	789b      	ldrb	r3, [r3, #2]
    25a6:	2b0c      	cmp	r3, #12
    25a8:	d1eb      	bne.n	2582 <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    25aa:	2200      	movs	r2, #0
    25ac:	ab04      	add	r3, sp, #16
    25ae:	709a      	strb	r2, [r3, #2]
    25b0:	e7e7      	b.n	2582 <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    25b2:	a901      	add	r1, sp, #4
    25b4:	788b      	ldrb	r3, [r1, #2]
    25b6:	330c      	adds	r3, #12
    25b8:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    25ba:	2300      	movs	r3, #0
    25bc:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    25be:	3301      	adds	r3, #1
    25c0:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    25c2:	2200      	movs	r2, #0
    25c4:	0020      	movs	r0, r4
    25c6:	4b06      	ldr	r3, [pc, #24]	; (25e0 <rtc_calendar_swap_time_mode+0x10c>)
    25c8:	4798      	blx	r3
    25ca:	e7e7      	b.n	259c <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    25cc:	2200      	movs	r2, #0
    25ce:	ab01      	add	r3, sp, #4
    25d0:	709a      	strb	r2, [r3, #2]
    25d2:	e7e3      	b.n	259c <rtc_calendar_swap_time_mode+0xc8>
    25d4:	000023a1 	.word	0x000023a1
    25d8:	00008fe1 	.word	0x00008fe1
    25dc:	000024ad 	.word	0x000024ad
    25e0:	000023e9 	.word	0x000023e9
    25e4:	000022d1 	.word	0x000022d1
    25e8:	000022bd 	.word	0x000022bd
    25ec:	00002389 	.word	0x00002389

000025f0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    25f0:	4770      	bx	lr
	...

000025f4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    25f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    25f6:	4b0a      	ldr	r3, [pc, #40]	; (2620 <_sercom_set_handler+0x2c>)
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d10c      	bne.n	2618 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    25fe:	4f09      	ldr	r7, [pc, #36]	; (2624 <_sercom_set_handler+0x30>)
    2600:	4e09      	ldr	r6, [pc, #36]	; (2628 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2602:	4d0a      	ldr	r5, [pc, #40]	; (262c <_sercom_set_handler+0x38>)
    2604:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2606:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2608:	195a      	adds	r2, r3, r5
    260a:	6014      	str	r4, [r2, #0]
    260c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    260e:	2b18      	cmp	r3, #24
    2610:	d1f9      	bne.n	2606 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2612:	2201      	movs	r2, #1
    2614:	4b02      	ldr	r3, [pc, #8]	; (2620 <_sercom_set_handler+0x2c>)
    2616:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2618:	0080      	lsls	r0, r0, #2
    261a:	4b02      	ldr	r3, [pc, #8]	; (2624 <_sercom_set_handler+0x30>)
    261c:	50c1      	str	r1, [r0, r3]
}
    261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2620:	20000228 	.word	0x20000228
    2624:	2000022c 	.word	0x2000022c
    2628:	000025f1 	.word	0x000025f1
    262c:	200003c4 	.word	0x200003c4

00002630 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2630:	b500      	push	{lr}
    2632:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2634:	2309      	movs	r3, #9
    2636:	466a      	mov	r2, sp
    2638:	7013      	strb	r3, [r2, #0]
    263a:	3301      	adds	r3, #1
    263c:	7053      	strb	r3, [r2, #1]
    263e:	3301      	adds	r3, #1
    2640:	7093      	strb	r3, [r2, #2]
    2642:	3301      	adds	r3, #1
    2644:	70d3      	strb	r3, [r2, #3]
    2646:	3301      	adds	r3, #1
    2648:	7113      	strb	r3, [r2, #4]
    264a:	3301      	adds	r3, #1
    264c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    264e:	4b03      	ldr	r3, [pc, #12]	; (265c <_sercom_get_interrupt_vector+0x2c>)
    2650:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2652:	466b      	mov	r3, sp
    2654:	5618      	ldrsb	r0, [r3, r0]
}
    2656:	b003      	add	sp, #12
    2658:	bd00      	pop	{pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	00007a01 	.word	0x00007a01

00002660 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2660:	b510      	push	{r4, lr}
    2662:	4b02      	ldr	r3, [pc, #8]	; (266c <SERCOM0_Handler+0xc>)
    2664:	681b      	ldr	r3, [r3, #0]
    2666:	2000      	movs	r0, #0
    2668:	4798      	blx	r3
    266a:	bd10      	pop	{r4, pc}
    266c:	2000022c 	.word	0x2000022c

00002670 <SERCOM1_Handler>:
    2670:	b510      	push	{r4, lr}
    2672:	4b02      	ldr	r3, [pc, #8]	; (267c <SERCOM1_Handler+0xc>)
    2674:	685b      	ldr	r3, [r3, #4]
    2676:	2001      	movs	r0, #1
    2678:	4798      	blx	r3
    267a:	bd10      	pop	{r4, pc}
    267c:	2000022c 	.word	0x2000022c

00002680 <SERCOM2_Handler>:
    2680:	b510      	push	{r4, lr}
    2682:	4b02      	ldr	r3, [pc, #8]	; (268c <SERCOM2_Handler+0xc>)
    2684:	689b      	ldr	r3, [r3, #8]
    2686:	2002      	movs	r0, #2
    2688:	4798      	blx	r3
    268a:	bd10      	pop	{r4, pc}
    268c:	2000022c 	.word	0x2000022c

00002690 <SERCOM3_Handler>:
    2690:	b510      	push	{r4, lr}
    2692:	4b02      	ldr	r3, [pc, #8]	; (269c <SERCOM3_Handler+0xc>)
    2694:	68db      	ldr	r3, [r3, #12]
    2696:	2003      	movs	r0, #3
    2698:	4798      	blx	r3
    269a:	bd10      	pop	{r4, pc}
    269c:	2000022c 	.word	0x2000022c

000026a0 <SERCOM4_Handler>:
    26a0:	b510      	push	{r4, lr}
    26a2:	4b02      	ldr	r3, [pc, #8]	; (26ac <SERCOM4_Handler+0xc>)
    26a4:	691b      	ldr	r3, [r3, #16]
    26a6:	2004      	movs	r0, #4
    26a8:	4798      	blx	r3
    26aa:	bd10      	pop	{r4, pc}
    26ac:	2000022c 	.word	0x2000022c

000026b0 <SERCOM5_Handler>:
    26b0:	b510      	push	{r4, lr}
    26b2:	4b02      	ldr	r3, [pc, #8]	; (26bc <SERCOM5_Handler+0xc>)
    26b4:	695b      	ldr	r3, [r3, #20]
    26b6:	2005      	movs	r0, #5
    26b8:	4798      	blx	r3
    26ba:	bd10      	pop	{r4, pc}
    26bc:	2000022c 	.word	0x2000022c

000026c0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    26c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26c2:	46de      	mov	lr, fp
    26c4:	4657      	mov	r7, sl
    26c6:	464e      	mov	r6, r9
    26c8:	4645      	mov	r5, r8
    26ca:	b5e0      	push	{r5, r6, r7, lr}
    26cc:	b091      	sub	sp, #68	; 0x44
    26ce:	0005      	movs	r5, r0
    26d0:	000c      	movs	r4, r1
    26d2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    26d4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    26d6:	0008      	movs	r0, r1
    26d8:	4bbc      	ldr	r3, [pc, #752]	; (29cc <usart_init+0x30c>)
    26da:	4798      	blx	r3
    26dc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    26de:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    26e0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    26e2:	07db      	lsls	r3, r3, #31
    26e4:	d506      	bpl.n	26f4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    26e6:	b011      	add	sp, #68	; 0x44
    26e8:	bc3c      	pop	{r2, r3, r4, r5}
    26ea:	4690      	mov	r8, r2
    26ec:	4699      	mov	r9, r3
    26ee:	46a2      	mov	sl, r4
    26f0:	46ab      	mov	fp, r5
    26f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    26f4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    26f6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    26f8:	079b      	lsls	r3, r3, #30
    26fa:	d4f4      	bmi.n	26e6 <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    26fc:	49b4      	ldr	r1, [pc, #720]	; (29d0 <usart_init+0x310>)
    26fe:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2700:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2702:	2301      	movs	r3, #1
    2704:	40bb      	lsls	r3, r7
    2706:	4303      	orrs	r3, r0
    2708:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    270a:	a90f      	add	r1, sp, #60	; 0x3c
    270c:	272d      	movs	r7, #45	; 0x2d
    270e:	5df3      	ldrb	r3, [r6, r7]
    2710:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2712:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2714:	b2d3      	uxtb	r3, r2
    2716:	9302      	str	r3, [sp, #8]
    2718:	0018      	movs	r0, r3
    271a:	4bae      	ldr	r3, [pc, #696]	; (29d4 <usart_init+0x314>)
    271c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    271e:	9802      	ldr	r0, [sp, #8]
    2720:	4bad      	ldr	r3, [pc, #692]	; (29d8 <usart_init+0x318>)
    2722:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2724:	5df0      	ldrb	r0, [r6, r7]
    2726:	2100      	movs	r1, #0
    2728:	4bac      	ldr	r3, [pc, #688]	; (29dc <usart_init+0x31c>)
    272a:	4798      	blx	r3
	module->character_size = config->character_size;
    272c:	7af3      	ldrb	r3, [r6, #11]
    272e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2730:	2324      	movs	r3, #36	; 0x24
    2732:	5cf3      	ldrb	r3, [r6, r3]
    2734:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2736:	2325      	movs	r3, #37	; 0x25
    2738:	5cf3      	ldrb	r3, [r6, r3]
    273a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    273c:	7ef3      	ldrb	r3, [r6, #27]
    273e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2740:	7f33      	ldrb	r3, [r6, #28]
    2742:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2744:	682b      	ldr	r3, [r5, #0]
    2746:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2748:	0018      	movs	r0, r3
    274a:	4ba0      	ldr	r3, [pc, #640]	; (29cc <usart_init+0x30c>)
    274c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    274e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2750:	2200      	movs	r2, #0
    2752:	230e      	movs	r3, #14
    2754:	a906      	add	r1, sp, #24
    2756:	468c      	mov	ip, r1
    2758:	4463      	add	r3, ip
    275a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    275c:	8a32      	ldrh	r2, [r6, #16]
    275e:	9202      	str	r2, [sp, #8]
    2760:	2380      	movs	r3, #128	; 0x80
    2762:	01db      	lsls	r3, r3, #7
    2764:	429a      	cmp	r2, r3
    2766:	d100      	bne.n	276a <usart_init+0xaa>
    2768:	e09e      	b.n	28a8 <usart_init+0x1e8>
    276a:	d90f      	bls.n	278c <usart_init+0xcc>
    276c:	23c0      	movs	r3, #192	; 0xc0
    276e:	01db      	lsls	r3, r3, #7
    2770:	9a02      	ldr	r2, [sp, #8]
    2772:	429a      	cmp	r2, r3
    2774:	d100      	bne.n	2778 <usart_init+0xb8>
    2776:	e092      	b.n	289e <usart_init+0x1de>
    2778:	2380      	movs	r3, #128	; 0x80
    277a:	021b      	lsls	r3, r3, #8
    277c:	429a      	cmp	r2, r3
    277e:	d000      	beq.n	2782 <usart_init+0xc2>
    2780:	e11f      	b.n	29c2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2782:	2303      	movs	r3, #3
    2784:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2786:	2300      	movs	r3, #0
    2788:	9307      	str	r3, [sp, #28]
    278a:	e008      	b.n	279e <usart_init+0xde>
	switch (config->sample_rate) {
    278c:	2380      	movs	r3, #128	; 0x80
    278e:	019b      	lsls	r3, r3, #6
    2790:	429a      	cmp	r2, r3
    2792:	d000      	beq.n	2796 <usart_init+0xd6>
    2794:	e115      	b.n	29c2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2796:	2310      	movs	r3, #16
    2798:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    279a:	3b0f      	subs	r3, #15
    279c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    279e:	6833      	ldr	r3, [r6, #0]
    27a0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    27a2:	68f3      	ldr	r3, [r6, #12]
    27a4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    27a6:	6973      	ldr	r3, [r6, #20]
    27a8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    27aa:	7e33      	ldrb	r3, [r6, #24]
    27ac:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    27ae:	2326      	movs	r3, #38	; 0x26
    27b0:	5cf3      	ldrb	r3, [r6, r3]
    27b2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    27b4:	6873      	ldr	r3, [r6, #4]
    27b6:	4699      	mov	r9, r3
	switch (transfer_mode)
    27b8:	2b00      	cmp	r3, #0
    27ba:	d100      	bne.n	27be <usart_init+0xfe>
    27bc:	e0a0      	b.n	2900 <usart_init+0x240>
    27be:	2380      	movs	r3, #128	; 0x80
    27c0:	055b      	lsls	r3, r3, #21
    27c2:	4599      	cmp	r9, r3
    27c4:	d100      	bne.n	27c8 <usart_init+0x108>
    27c6:	e084      	b.n	28d2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    27c8:	7e73      	ldrb	r3, [r6, #25]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d002      	beq.n	27d4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    27ce:	7eb3      	ldrb	r3, [r6, #26]
    27d0:	4642      	mov	r2, r8
    27d2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    27d4:	682a      	ldr	r2, [r5, #0]
    27d6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    27d8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    27da:	2b00      	cmp	r3, #0
    27dc:	d1fc      	bne.n	27d8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    27de:	330e      	adds	r3, #14
    27e0:	aa06      	add	r2, sp, #24
    27e2:	4694      	mov	ip, r2
    27e4:	4463      	add	r3, ip
    27e6:	881b      	ldrh	r3, [r3, #0]
    27e8:	4642      	mov	r2, r8
    27ea:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    27ec:	9b05      	ldr	r3, [sp, #20]
    27ee:	9a03      	ldr	r2, [sp, #12]
    27f0:	4313      	orrs	r3, r2
    27f2:	9a04      	ldr	r2, [sp, #16]
    27f4:	4313      	orrs	r3, r2
    27f6:	464a      	mov	r2, r9
    27f8:	4313      	orrs	r3, r2
    27fa:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    27fc:	465b      	mov	r3, fp
    27fe:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2800:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2802:	4653      	mov	r3, sl
    2804:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2806:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2808:	2327      	movs	r3, #39	; 0x27
    280a:	5cf3      	ldrb	r3, [r6, r3]
    280c:	2b00      	cmp	r3, #0
    280e:	d101      	bne.n	2814 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2810:	3304      	adds	r3, #4
    2812:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2814:	7e73      	ldrb	r3, [r6, #25]
    2816:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2818:	7f32      	ldrb	r2, [r6, #28]
    281a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    281c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    281e:	7f72      	ldrb	r2, [r6, #29]
    2820:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2822:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2824:	2224      	movs	r2, #36	; 0x24
    2826:	5cb2      	ldrb	r2, [r6, r2]
    2828:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    282a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    282c:	2225      	movs	r2, #37	; 0x25
    282e:	5cb2      	ldrb	r2, [r6, r2]
    2830:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2832:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2834:	7ab1      	ldrb	r1, [r6, #10]
    2836:	7af2      	ldrb	r2, [r6, #11]
    2838:	4311      	orrs	r1, r2
    283a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    283c:	8933      	ldrh	r3, [r6, #8]
    283e:	2bff      	cmp	r3, #255	; 0xff
    2840:	d100      	bne.n	2844 <usart_init+0x184>
    2842:	e081      	b.n	2948 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2844:	2280      	movs	r2, #128	; 0x80
    2846:	0452      	lsls	r2, r2, #17
    2848:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    284a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    284c:	232c      	movs	r3, #44	; 0x2c
    284e:	5cf3      	ldrb	r3, [r6, r3]
    2850:	2b00      	cmp	r3, #0
    2852:	d103      	bne.n	285c <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2854:	4b62      	ldr	r3, [pc, #392]	; (29e0 <usart_init+0x320>)
    2856:	789b      	ldrb	r3, [r3, #2]
    2858:	079b      	lsls	r3, r3, #30
    285a:	d501      	bpl.n	2860 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    285c:	2380      	movs	r3, #128	; 0x80
    285e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2860:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2862:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2864:	2b00      	cmp	r3, #0
    2866:	d1fc      	bne.n	2862 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2868:	4643      	mov	r3, r8
    286a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    286c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    286e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2870:	2b00      	cmp	r3, #0
    2872:	d1fc      	bne.n	286e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2874:	4643      	mov	r3, r8
    2876:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2878:	ab0e      	add	r3, sp, #56	; 0x38
    287a:	2280      	movs	r2, #128	; 0x80
    287c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    287e:	2200      	movs	r2, #0
    2880:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2882:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2884:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2886:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2888:	930a      	str	r3, [sp, #40]	; 0x28
    288a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    288c:	930b      	str	r3, [sp, #44]	; 0x2c
    288e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2890:	930c      	str	r3, [sp, #48]	; 0x30
    2892:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2894:	9302      	str	r3, [sp, #8]
    2896:	930d      	str	r3, [sp, #52]	; 0x34
    2898:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    289a:	ae0a      	add	r6, sp, #40	; 0x28
    289c:	e063      	b.n	2966 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    289e:	2308      	movs	r3, #8
    28a0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    28a2:	3b07      	subs	r3, #7
    28a4:	9307      	str	r3, [sp, #28]
    28a6:	e77a      	b.n	279e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    28a8:	6833      	ldr	r3, [r6, #0]
    28aa:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    28ac:	68f3      	ldr	r3, [r6, #12]
    28ae:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    28b0:	6973      	ldr	r3, [r6, #20]
    28b2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    28b4:	7e33      	ldrb	r3, [r6, #24]
    28b6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    28b8:	2326      	movs	r3, #38	; 0x26
    28ba:	5cf3      	ldrb	r3, [r6, r3]
    28bc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    28be:	6873      	ldr	r3, [r6, #4]
    28c0:	4699      	mov	r9, r3
	switch (transfer_mode)
    28c2:	2b00      	cmp	r3, #0
    28c4:	d018      	beq.n	28f8 <usart_init+0x238>
    28c6:	2380      	movs	r3, #128	; 0x80
    28c8:	055b      	lsls	r3, r3, #21
    28ca:	4599      	cmp	r9, r3
    28cc:	d001      	beq.n	28d2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    28ce:	2000      	movs	r0, #0
    28d0:	e025      	b.n	291e <usart_init+0x25e>
			if (!config->use_external_clock) {
    28d2:	2327      	movs	r3, #39	; 0x27
    28d4:	5cf3      	ldrb	r3, [r6, r3]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d000      	beq.n	28dc <usart_init+0x21c>
    28da:	e775      	b.n	27c8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    28dc:	6a33      	ldr	r3, [r6, #32]
    28de:	001f      	movs	r7, r3
    28e0:	b2c0      	uxtb	r0, r0
    28e2:	4b40      	ldr	r3, [pc, #256]	; (29e4 <usart_init+0x324>)
    28e4:	4798      	blx	r3
    28e6:	0001      	movs	r1, r0
    28e8:	220e      	movs	r2, #14
    28ea:	ab06      	add	r3, sp, #24
    28ec:	469c      	mov	ip, r3
    28ee:	4462      	add	r2, ip
    28f0:	0038      	movs	r0, r7
    28f2:	4b3d      	ldr	r3, [pc, #244]	; (29e8 <usart_init+0x328>)
    28f4:	4798      	blx	r3
    28f6:	e012      	b.n	291e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    28f8:	2308      	movs	r3, #8
    28fa:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28fc:	2300      	movs	r3, #0
    28fe:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2900:	2327      	movs	r3, #39	; 0x27
    2902:	5cf3      	ldrb	r3, [r6, r3]
    2904:	2b00      	cmp	r3, #0
    2906:	d00e      	beq.n	2926 <usart_init+0x266>
				status_code =
    2908:	9b06      	ldr	r3, [sp, #24]
    290a:	9300      	str	r3, [sp, #0]
    290c:	9b07      	ldr	r3, [sp, #28]
    290e:	220e      	movs	r2, #14
    2910:	a906      	add	r1, sp, #24
    2912:	468c      	mov	ip, r1
    2914:	4462      	add	r2, ip
    2916:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2918:	6a30      	ldr	r0, [r6, #32]
    291a:	4f34      	ldr	r7, [pc, #208]	; (29ec <usart_init+0x32c>)
    291c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    291e:	2800      	cmp	r0, #0
    2920:	d000      	beq.n	2924 <usart_init+0x264>
    2922:	e6e0      	b.n	26e6 <usart_init+0x26>
    2924:	e750      	b.n	27c8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2926:	6a33      	ldr	r3, [r6, #32]
    2928:	001f      	movs	r7, r3
    292a:	b2c0      	uxtb	r0, r0
    292c:	4b2d      	ldr	r3, [pc, #180]	; (29e4 <usart_init+0x324>)
    292e:	4798      	blx	r3
    2930:	0001      	movs	r1, r0
				status_code =
    2932:	9b06      	ldr	r3, [sp, #24]
    2934:	9300      	str	r3, [sp, #0]
    2936:	9b07      	ldr	r3, [sp, #28]
    2938:	220e      	movs	r2, #14
    293a:	a806      	add	r0, sp, #24
    293c:	4684      	mov	ip, r0
    293e:	4462      	add	r2, ip
    2940:	0038      	movs	r0, r7
    2942:	4f2a      	ldr	r7, [pc, #168]	; (29ec <usart_init+0x32c>)
    2944:	47b8      	blx	r7
    2946:	e7ea      	b.n	291e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2948:	7ef3      	ldrb	r3, [r6, #27]
    294a:	2b00      	cmp	r3, #0
    294c:	d100      	bne.n	2950 <usart_init+0x290>
    294e:	e77d      	b.n	284c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2950:	2380      	movs	r3, #128	; 0x80
    2952:	04db      	lsls	r3, r3, #19
    2954:	431f      	orrs	r7, r3
    2956:	e779      	b.n	284c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2958:	0020      	movs	r0, r4
    295a:	4b25      	ldr	r3, [pc, #148]	; (29f0 <usart_init+0x330>)
    295c:	4798      	blx	r3
    295e:	e007      	b.n	2970 <usart_init+0x2b0>
    2960:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2962:	2f04      	cmp	r7, #4
    2964:	d00d      	beq.n	2982 <usart_init+0x2c2>
    2966:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2968:	00bb      	lsls	r3, r7, #2
    296a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    296c:	2800      	cmp	r0, #0
    296e:	d0f3      	beq.n	2958 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2970:	1c43      	adds	r3, r0, #1
    2972:	d0f5      	beq.n	2960 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2974:	a90e      	add	r1, sp, #56	; 0x38
    2976:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2978:	0c00      	lsrs	r0, r0, #16
    297a:	b2c0      	uxtb	r0, r0
    297c:	4b1d      	ldr	r3, [pc, #116]	; (29f4 <usart_init+0x334>)
    297e:	4798      	blx	r3
    2980:	e7ee      	b.n	2960 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2982:	2300      	movs	r3, #0
    2984:	60eb      	str	r3, [r5, #12]
    2986:	612b      	str	r3, [r5, #16]
    2988:	616b      	str	r3, [r5, #20]
    298a:	61ab      	str	r3, [r5, #24]
    298c:	61eb      	str	r3, [r5, #28]
    298e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2990:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2992:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2994:	2200      	movs	r2, #0
    2996:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2998:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    299a:	3330      	adds	r3, #48	; 0x30
    299c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    299e:	3301      	adds	r3, #1
    29a0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    29a2:	3301      	adds	r3, #1
    29a4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    29a6:	3301      	adds	r3, #1
    29a8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    29aa:	6828      	ldr	r0, [r5, #0]
    29ac:	4b07      	ldr	r3, [pc, #28]	; (29cc <usart_init+0x30c>)
    29ae:	4798      	blx	r3
    29b0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    29b2:	4911      	ldr	r1, [pc, #68]	; (29f8 <usart_init+0x338>)
    29b4:	4b11      	ldr	r3, [pc, #68]	; (29fc <usart_init+0x33c>)
    29b6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    29b8:	00a4      	lsls	r4, r4, #2
    29ba:	4b11      	ldr	r3, [pc, #68]	; (2a00 <usart_init+0x340>)
    29bc:	50e5      	str	r5, [r4, r3]
	return status_code;
    29be:	2000      	movs	r0, #0
    29c0:	e691      	b.n	26e6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    29c2:	2310      	movs	r3, #16
    29c4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    29c6:	2300      	movs	r3, #0
    29c8:	9307      	str	r3, [sp, #28]
    29ca:	e6e8      	b.n	279e <usart_init+0xde>
    29cc:	00007a01 	.word	0x00007a01
    29d0:	40000400 	.word	0x40000400
    29d4:	00008c59 	.word	0x00008c59
    29d8:	00008bcd 	.word	0x00008bcd
    29dc:	0000783d 	.word	0x0000783d
    29e0:	41002000 	.word	0x41002000
    29e4:	00008c75 	.word	0x00008c75
    29e8:	0000777f 	.word	0x0000777f
    29ec:	000077a9 	.word	0x000077a9
    29f0:	00007889 	.word	0x00007889
    29f4:	00008d51 	.word	0x00008d51
    29f8:	00002aa1 	.word	0x00002aa1
    29fc:	000025f5 	.word	0x000025f5
    2a00:	200003c4 	.word	0x200003c4

00002a04 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2a04:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2a06:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2a08:	2a00      	cmp	r2, #0
    2a0a:	d101      	bne.n	2a10 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2a0c:	0018      	movs	r0, r3
    2a0e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2a10:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2a12:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2a14:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2a16:	2a00      	cmp	r2, #0
    2a18:	d1f8      	bne.n	2a0c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a1a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a1c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2a1e:	2a00      	cmp	r2, #0
    2a20:	d1fc      	bne.n	2a1c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2a22:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2a24:	2102      	movs	r1, #2
    2a26:	7e1a      	ldrb	r2, [r3, #24]
    2a28:	420a      	tst	r2, r1
    2a2a:	d0fc      	beq.n	2a26 <usart_write_wait+0x22>
	return STATUS_OK;
    2a2c:	2300      	movs	r3, #0
    2a2e:	e7ed      	b.n	2a0c <usart_write_wait+0x8>

00002a30 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2a30:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2a32:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2a34:	2a00      	cmp	r2, #0
    2a36:	d101      	bne.n	2a3c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2a38:	0018      	movs	r0, r3
    2a3a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2a3c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2a3e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2a40:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2a42:	2a00      	cmp	r2, #0
    2a44:	d1f8      	bne.n	2a38 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a46:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2a48:	7e10      	ldrb	r0, [r2, #24]
    2a4a:	0740      	lsls	r0, r0, #29
    2a4c:	d5f4      	bpl.n	2a38 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2a4e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2a50:	2b00      	cmp	r3, #0
    2a52:	d1fc      	bne.n	2a4e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a54:	8b53      	ldrh	r3, [r2, #26]
    2a56:	b2db      	uxtb	r3, r3
	if (error_code) {
    2a58:	0698      	lsls	r0, r3, #26
    2a5a:	d01d      	beq.n	2a98 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2a5c:	0798      	lsls	r0, r3, #30
    2a5e:	d503      	bpl.n	2a68 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a60:	2302      	movs	r3, #2
    2a62:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2a64:	3318      	adds	r3, #24
    2a66:	e7e7      	b.n	2a38 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a68:	0758      	lsls	r0, r3, #29
    2a6a:	d503      	bpl.n	2a74 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a6c:	2304      	movs	r3, #4
    2a6e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2a70:	331a      	adds	r3, #26
    2a72:	e7e1      	b.n	2a38 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a74:	07d8      	lsls	r0, r3, #31
    2a76:	d503      	bpl.n	2a80 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a78:	2301      	movs	r3, #1
    2a7a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2a7c:	3312      	adds	r3, #18
    2a7e:	e7db      	b.n	2a38 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a80:	06d8      	lsls	r0, r3, #27
    2a82:	d503      	bpl.n	2a8c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a84:	2310      	movs	r3, #16
    2a86:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2a88:	3332      	adds	r3, #50	; 0x32
    2a8a:	e7d5      	b.n	2a38 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a8c:	069b      	lsls	r3, r3, #26
    2a8e:	d503      	bpl.n	2a98 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a90:	2320      	movs	r3, #32
    2a92:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2a94:	3321      	adds	r3, #33	; 0x21
    2a96:	e7cf      	b.n	2a38 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2a98:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2a9a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2a9c:	2300      	movs	r3, #0
    2a9e:	e7cb      	b.n	2a38 <usart_read_wait+0x8>

00002aa0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2aa2:	0080      	lsls	r0, r0, #2
    2aa4:	4b62      	ldr	r3, [pc, #392]	; (2c30 <_usart_interrupt_handler+0x190>)
    2aa6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2aa8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2aaa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2aac:	2b00      	cmp	r3, #0
    2aae:	d1fc      	bne.n	2aaa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ab0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2ab2:	7da6      	ldrb	r6, [r4, #22]
    2ab4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2ab6:	2330      	movs	r3, #48	; 0x30
    2ab8:	5ceb      	ldrb	r3, [r5, r3]
    2aba:	2231      	movs	r2, #49	; 0x31
    2abc:	5caf      	ldrb	r7, [r5, r2]
    2abe:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2ac0:	07f3      	lsls	r3, r6, #31
    2ac2:	d522      	bpl.n	2b0a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ac4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ac6:	b29b      	uxth	r3, r3
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d01c      	beq.n	2b06 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2acc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2ace:	7813      	ldrb	r3, [r2, #0]
    2ad0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ad2:	1c51      	adds	r1, r2, #1
    2ad4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ad6:	7969      	ldrb	r1, [r5, #5]
    2ad8:	2901      	cmp	r1, #1
    2ada:	d00e      	beq.n	2afa <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2adc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2ade:	05db      	lsls	r3, r3, #23
    2ae0:	0ddb      	lsrs	r3, r3, #23
    2ae2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ae4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ae6:	3b01      	subs	r3, #1
    2ae8:	b29b      	uxth	r3, r3
    2aea:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2aec:	2b00      	cmp	r3, #0
    2aee:	d10c      	bne.n	2b0a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2af0:	3301      	adds	r3, #1
    2af2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2af4:	3301      	adds	r3, #1
    2af6:	75a3      	strb	r3, [r4, #22]
    2af8:	e007      	b.n	2b0a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2afa:	7851      	ldrb	r1, [r2, #1]
    2afc:	0209      	lsls	r1, r1, #8
    2afe:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2b00:	3202      	adds	r2, #2
    2b02:	62aa      	str	r2, [r5, #40]	; 0x28
    2b04:	e7eb      	b.n	2ade <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2b06:	2301      	movs	r3, #1
    2b08:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2b0a:	07b3      	lsls	r3, r6, #30
    2b0c:	d506      	bpl.n	2b1c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2b0e:	2302      	movs	r3, #2
    2b10:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2b12:	2200      	movs	r2, #0
    2b14:	3331      	adds	r3, #49	; 0x31
    2b16:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2b18:	07fb      	lsls	r3, r7, #31
    2b1a:	d41a      	bmi.n	2b52 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2b1c:	0773      	lsls	r3, r6, #29
    2b1e:	d565      	bpl.n	2bec <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2b20:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b22:	b29b      	uxth	r3, r3
    2b24:	2b00      	cmp	r3, #0
    2b26:	d05f      	beq.n	2be8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b28:	8b63      	ldrh	r3, [r4, #26]
    2b2a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2b2c:	071a      	lsls	r2, r3, #28
    2b2e:	d414      	bmi.n	2b5a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b30:	223f      	movs	r2, #63	; 0x3f
    2b32:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2b34:	2b00      	cmp	r3, #0
    2b36:	d034      	beq.n	2ba2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2b38:	079a      	lsls	r2, r3, #30
    2b3a:	d511      	bpl.n	2b60 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2b3c:	221a      	movs	r2, #26
    2b3e:	2332      	movs	r3, #50	; 0x32
    2b40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b42:	3b30      	subs	r3, #48	; 0x30
    2b44:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2b46:	077b      	lsls	r3, r7, #29
    2b48:	d550      	bpl.n	2bec <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2b4a:	0028      	movs	r0, r5
    2b4c:	696b      	ldr	r3, [r5, #20]
    2b4e:	4798      	blx	r3
    2b50:	e04c      	b.n	2bec <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b52:	0028      	movs	r0, r5
    2b54:	68eb      	ldr	r3, [r5, #12]
    2b56:	4798      	blx	r3
    2b58:	e7e0      	b.n	2b1c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b5a:	2237      	movs	r2, #55	; 0x37
    2b5c:	4013      	ands	r3, r2
    2b5e:	e7e9      	b.n	2b34 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b60:	075a      	lsls	r2, r3, #29
    2b62:	d505      	bpl.n	2b70 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b64:	221e      	movs	r2, #30
    2b66:	2332      	movs	r3, #50	; 0x32
    2b68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b6a:	3b2e      	subs	r3, #46	; 0x2e
    2b6c:	8363      	strh	r3, [r4, #26]
    2b6e:	e7ea      	b.n	2b46 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b70:	07da      	lsls	r2, r3, #31
    2b72:	d505      	bpl.n	2b80 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b74:	2213      	movs	r2, #19
    2b76:	2332      	movs	r3, #50	; 0x32
    2b78:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b7a:	3b31      	subs	r3, #49	; 0x31
    2b7c:	8363      	strh	r3, [r4, #26]
    2b7e:	e7e2      	b.n	2b46 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b80:	06da      	lsls	r2, r3, #27
    2b82:	d505      	bpl.n	2b90 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b84:	2242      	movs	r2, #66	; 0x42
    2b86:	2332      	movs	r3, #50	; 0x32
    2b88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b8a:	3b22      	subs	r3, #34	; 0x22
    2b8c:	8363      	strh	r3, [r4, #26]
    2b8e:	e7da      	b.n	2b46 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b90:	2220      	movs	r2, #32
    2b92:	421a      	tst	r2, r3
    2b94:	d0d7      	beq.n	2b46 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b96:	3221      	adds	r2, #33	; 0x21
    2b98:	2332      	movs	r3, #50	; 0x32
    2b9a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b9c:	3b12      	subs	r3, #18
    2b9e:	8363      	strh	r3, [r4, #26]
    2ba0:	e7d1      	b.n	2b46 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ba4:	05db      	lsls	r3, r3, #23
    2ba6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2ba8:	b2da      	uxtb	r2, r3
    2baa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2bac:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2bae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2bb0:	1c51      	adds	r1, r2, #1
    2bb2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bb4:	7969      	ldrb	r1, [r5, #5]
    2bb6:	2901      	cmp	r1, #1
    2bb8:	d010      	beq.n	2bdc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2bba:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2bbc:	3b01      	subs	r3, #1
    2bbe:	b29b      	uxth	r3, r3
    2bc0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d112      	bne.n	2bec <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2bc6:	3304      	adds	r3, #4
    2bc8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2bca:	2200      	movs	r2, #0
    2bcc:	332e      	adds	r3, #46	; 0x2e
    2bce:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2bd0:	07bb      	lsls	r3, r7, #30
    2bd2:	d50b      	bpl.n	2bec <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2bd4:	0028      	movs	r0, r5
    2bd6:	692b      	ldr	r3, [r5, #16]
    2bd8:	4798      	blx	r3
    2bda:	e007      	b.n	2bec <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2bdc:	0a1b      	lsrs	r3, r3, #8
    2bde:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2be0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2be2:	3301      	adds	r3, #1
    2be4:	626b      	str	r3, [r5, #36]	; 0x24
    2be6:	e7e8      	b.n	2bba <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2be8:	2304      	movs	r3, #4
    2bea:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2bec:	06f3      	lsls	r3, r6, #27
    2bee:	d504      	bpl.n	2bfa <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2bf0:	2310      	movs	r3, #16
    2bf2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2bf4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2bf6:	06fb      	lsls	r3, r7, #27
    2bf8:	d40e      	bmi.n	2c18 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2bfa:	06b3      	lsls	r3, r6, #26
    2bfc:	d504      	bpl.n	2c08 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2bfe:	2320      	movs	r3, #32
    2c00:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2c02:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2c04:	073b      	lsls	r3, r7, #28
    2c06:	d40b      	bmi.n	2c20 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2c08:	0733      	lsls	r3, r6, #28
    2c0a:	d504      	bpl.n	2c16 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2c0c:	2308      	movs	r3, #8
    2c0e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2c10:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2c12:	06bb      	lsls	r3, r7, #26
    2c14:	d408      	bmi.n	2c28 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2c18:	0028      	movs	r0, r5
    2c1a:	69eb      	ldr	r3, [r5, #28]
    2c1c:	4798      	blx	r3
    2c1e:	e7ec      	b.n	2bfa <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2c20:	0028      	movs	r0, r5
    2c22:	69ab      	ldr	r3, [r5, #24]
    2c24:	4798      	blx	r3
    2c26:	e7ef      	b.n	2c08 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2c28:	6a2b      	ldr	r3, [r5, #32]
    2c2a:	0028      	movs	r0, r5
    2c2c:	4798      	blx	r3
}
    2c2e:	e7f2      	b.n	2c16 <_usart_interrupt_handler+0x176>
    2c30:	200003c4 	.word	0x200003c4

00002c34 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2c34:	b510      	push	{r4, lr}
	switch (clock_source) {
    2c36:	2808      	cmp	r0, #8
    2c38:	d803      	bhi.n	2c42 <system_clock_source_get_hz+0xe>
    2c3a:	0080      	lsls	r0, r0, #2
    2c3c:	4b1e      	ldr	r3, [pc, #120]	; (2cb8 <system_clock_source_get_hz+0x84>)
    2c3e:	581b      	ldr	r3, [r3, r0]
    2c40:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2c42:	2000      	movs	r0, #0
    2c44:	e036      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    2c46:	4b1d      	ldr	r3, [pc, #116]	; (2cbc <system_clock_source_get_hz+0x88>)
    2c48:	6918      	ldr	r0, [r3, #16]
    2c4a:	e033      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2c4c:	4b1c      	ldr	r3, [pc, #112]	; (2cc0 <system_clock_source_get_hz+0x8c>)
    2c4e:	6a1b      	ldr	r3, [r3, #32]
    2c50:	059b      	lsls	r3, r3, #22
    2c52:	0f9b      	lsrs	r3, r3, #30
    2c54:	481b      	ldr	r0, [pc, #108]	; (2cc4 <system_clock_source_get_hz+0x90>)
    2c56:	40d8      	lsrs	r0, r3
    2c58:	e02c      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2c5a:	4b18      	ldr	r3, [pc, #96]	; (2cbc <system_clock_source_get_hz+0x88>)
    2c5c:	6958      	ldr	r0, [r3, #20]
    2c5e:	e029      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c60:	4b16      	ldr	r3, [pc, #88]	; (2cbc <system_clock_source_get_hz+0x88>)
    2c62:	681b      	ldr	r3, [r3, #0]
			return 0;
    2c64:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c66:	079b      	lsls	r3, r3, #30
    2c68:	d524      	bpl.n	2cb4 <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c6a:	4915      	ldr	r1, [pc, #84]	; (2cc0 <system_clock_source_get_hz+0x8c>)
    2c6c:	2210      	movs	r2, #16
    2c6e:	68cb      	ldr	r3, [r1, #12]
    2c70:	421a      	tst	r2, r3
    2c72:	d0fc      	beq.n	2c6e <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2c74:	4b11      	ldr	r3, [pc, #68]	; (2cbc <system_clock_source_get_hz+0x88>)
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	075b      	lsls	r3, r3, #29
    2c7a:	d401      	bmi.n	2c80 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2c7c:	4812      	ldr	r0, [pc, #72]	; (2cc8 <system_clock_source_get_hz+0x94>)
    2c7e:	e019      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2c80:	4b0e      	ldr	r3, [pc, #56]	; (2cbc <system_clock_source_get_hz+0x88>)
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	069b      	lsls	r3, r3, #26
    2c86:	d501      	bpl.n	2c8c <system_clock_source_get_hz+0x58>
		return 48000000UL;
    2c88:	480f      	ldr	r0, [pc, #60]	; (2cc8 <system_clock_source_get_hz+0x94>)
    2c8a:	e013      	b.n	2cb4 <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c8c:	2000      	movs	r0, #0
    2c8e:	4b0f      	ldr	r3, [pc, #60]	; (2ccc <system_clock_source_get_hz+0x98>)
    2c90:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2c92:	4b0a      	ldr	r3, [pc, #40]	; (2cbc <system_clock_source_get_hz+0x88>)
    2c94:	689b      	ldr	r3, [r3, #8]
    2c96:	041b      	lsls	r3, r3, #16
    2c98:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c9a:	4358      	muls	r0, r3
    2c9c:	e00a      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2c9e:	2350      	movs	r3, #80	; 0x50
    2ca0:	4a07      	ldr	r2, [pc, #28]	; (2cc0 <system_clock_source_get_hz+0x8c>)
    2ca2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2ca4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ca6:	075b      	lsls	r3, r3, #29
    2ca8:	d504      	bpl.n	2cb4 <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    2caa:	4b04      	ldr	r3, [pc, #16]	; (2cbc <system_clock_source_get_hz+0x88>)
    2cac:	68d8      	ldr	r0, [r3, #12]
    2cae:	e001      	b.n	2cb4 <system_clock_source_get_hz+0x80>
		return 32768UL;
    2cb0:	2080      	movs	r0, #128	; 0x80
    2cb2:	0200      	lsls	r0, r0, #8
	}
}
    2cb4:	bd10      	pop	{r4, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	0000a728 	.word	0x0000a728
    2cbc:	20000244 	.word	0x20000244
    2cc0:	40000800 	.word	0x40000800
    2cc4:	007a1200 	.word	0x007a1200
    2cc8:	02dc6c00 	.word	0x02dc6c00
    2ccc:	00008c75 	.word	0x00008c75

00002cd0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2cd0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2cd2:	490c      	ldr	r1, [pc, #48]	; (2d04 <system_clock_source_osc8m_set_config+0x34>)
    2cd4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2cd6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2cd8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2cda:	7840      	ldrb	r0, [r0, #1]
    2cdc:	2201      	movs	r2, #1
    2cde:	4010      	ands	r0, r2
    2ce0:	0180      	lsls	r0, r0, #6
    2ce2:	2640      	movs	r6, #64	; 0x40
    2ce4:	43b3      	bics	r3, r6
    2ce6:	4303      	orrs	r3, r0
    2ce8:	402a      	ands	r2, r5
    2cea:	01d2      	lsls	r2, r2, #7
    2cec:	2080      	movs	r0, #128	; 0x80
    2cee:	4383      	bics	r3, r0
    2cf0:	4313      	orrs	r3, r2
    2cf2:	2203      	movs	r2, #3
    2cf4:	4022      	ands	r2, r4
    2cf6:	0212      	lsls	r2, r2, #8
    2cf8:	4803      	ldr	r0, [pc, #12]	; (2d08 <system_clock_source_osc8m_set_config+0x38>)
    2cfa:	4003      	ands	r3, r0
    2cfc:	4313      	orrs	r3, r2
    2cfe:	620b      	str	r3, [r1, #32]
}
    2d00:	bd70      	pop	{r4, r5, r6, pc}
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	40000800 	.word	0x40000800
    2d08:	fffffcff 	.word	0xfffffcff

00002d0c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d0e:	46de      	mov	lr, fp
    2d10:	4657      	mov	r7, sl
    2d12:	464e      	mov	r6, r9
    2d14:	4645      	mov	r5, r8
    2d16:	b5e0      	push	{r5, r6, r7, lr}
    2d18:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2d1a:	4b26      	ldr	r3, [pc, #152]	; (2db4 <system_clock_source_xosc32k_set_config+0xa8>)
    2d1c:	469b      	mov	fp, r3
    2d1e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2d20:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2d22:	7800      	ldrb	r0, [r0, #0]
    2d24:	4242      	negs	r2, r0
    2d26:	4142      	adcs	r2, r0
    2d28:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2d2a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2d2c:	78ca      	ldrb	r2, [r1, #3]
    2d2e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2d30:	790a      	ldrb	r2, [r1, #4]
    2d32:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2d34:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2d36:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2d38:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2d3a:	688a      	ldr	r2, [r1, #8]
    2d3c:	491e      	ldr	r1, [pc, #120]	; (2db8 <system_clock_source_xosc32k_set_config+0xac>)
    2d3e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2d40:	2101      	movs	r1, #1
    2d42:	464a      	mov	r2, r9
    2d44:	0092      	lsls	r2, r2, #2
    2d46:	4691      	mov	r9, r2
    2d48:	2204      	movs	r2, #4
    2d4a:	4393      	bics	r3, r2
    2d4c:	464a      	mov	r2, r9
    2d4e:	4313      	orrs	r3, r2
    2d50:	4642      	mov	r2, r8
    2d52:	400a      	ands	r2, r1
    2d54:	00d2      	lsls	r2, r2, #3
    2d56:	4690      	mov	r8, r2
    2d58:	2208      	movs	r2, #8
    2d5a:	4393      	bics	r3, r2
    2d5c:	4642      	mov	r2, r8
    2d5e:	4313      	orrs	r3, r2
    2d60:	4662      	mov	r2, ip
    2d62:	400a      	ands	r2, r1
    2d64:	0112      	lsls	r2, r2, #4
    2d66:	4694      	mov	ip, r2
    2d68:	2210      	movs	r2, #16
    2d6a:	4393      	bics	r3, r2
    2d6c:	4662      	mov	r2, ip
    2d6e:	4313      	orrs	r3, r2
    2d70:	4008      	ands	r0, r1
    2d72:	0140      	lsls	r0, r0, #5
    2d74:	2220      	movs	r2, #32
    2d76:	4393      	bics	r3, r2
    2d78:	4303      	orrs	r3, r0
    2d7a:	400f      	ands	r7, r1
    2d7c:	01bf      	lsls	r7, r7, #6
    2d7e:	2040      	movs	r0, #64	; 0x40
    2d80:	4383      	bics	r3, r0
    2d82:	433b      	orrs	r3, r7
    2d84:	400e      	ands	r6, r1
    2d86:	01f6      	lsls	r6, r6, #7
    2d88:	3040      	adds	r0, #64	; 0x40
    2d8a:	4383      	bics	r3, r0
    2d8c:	4333      	orrs	r3, r6
    2d8e:	3879      	subs	r0, #121	; 0x79
    2d90:	4005      	ands	r5, r0
    2d92:	022d      	lsls	r5, r5, #8
    2d94:	4809      	ldr	r0, [pc, #36]	; (2dbc <system_clock_source_xosc32k_set_config+0xb0>)
    2d96:	4003      	ands	r3, r0
    2d98:	432b      	orrs	r3, r5
    2d9a:	4021      	ands	r1, r4
    2d9c:	0309      	lsls	r1, r1, #12
    2d9e:	4808      	ldr	r0, [pc, #32]	; (2dc0 <system_clock_source_xosc32k_set_config+0xb4>)
    2da0:	4003      	ands	r3, r0
    2da2:	430b      	orrs	r3, r1
    2da4:	465a      	mov	r2, fp
    2da6:	8293      	strh	r3, [r2, #20]
}
    2da8:	bc3c      	pop	{r2, r3, r4, r5}
    2daa:	4690      	mov	r8, r2
    2dac:	4699      	mov	r9, r3
    2dae:	46a2      	mov	sl, r4
    2db0:	46ab      	mov	fp, r5
    2db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2db4:	40000800 	.word	0x40000800
    2db8:	20000244 	.word	0x20000244
    2dbc:	fffff8ff 	.word	0xfffff8ff
    2dc0:	ffffefff 	.word	0xffffefff

00002dc4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2dc4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2dc6:	7a03      	ldrb	r3, [r0, #8]
    2dc8:	069b      	lsls	r3, r3, #26
    2dca:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2dcc:	8942      	ldrh	r2, [r0, #10]
    2dce:	0592      	lsls	r2, r2, #22
    2dd0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2dd2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2dd4:	4918      	ldr	r1, [pc, #96]	; (2e38 <system_clock_source_dfll_set_config+0x74>)
    2dd6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2dd8:	7983      	ldrb	r3, [r0, #6]
    2dda:	79c2      	ldrb	r2, [r0, #7]
    2ddc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2dde:	8842      	ldrh	r2, [r0, #2]
    2de0:	8884      	ldrh	r4, [r0, #4]
    2de2:	4322      	orrs	r2, r4
    2de4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2de6:	7842      	ldrb	r2, [r0, #1]
    2de8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2dea:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2dec:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2dee:	7803      	ldrb	r3, [r0, #0]
    2df0:	2b04      	cmp	r3, #4
    2df2:	d011      	beq.n	2e18 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2df4:	2b20      	cmp	r3, #32
    2df6:	d10e      	bne.n	2e16 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2df8:	7b03      	ldrb	r3, [r0, #12]
    2dfa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2dfc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2dfe:	4313      	orrs	r3, r2
    2e00:	89c2      	ldrh	r2, [r0, #14]
    2e02:	0412      	lsls	r2, r2, #16
    2e04:	490d      	ldr	r1, [pc, #52]	; (2e3c <system_clock_source_dfll_set_config+0x78>)
    2e06:	400a      	ands	r2, r1
    2e08:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2e0a:	4a0b      	ldr	r2, [pc, #44]	; (2e38 <system_clock_source_dfll_set_config+0x74>)
    2e0c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2e0e:	6811      	ldr	r1, [r2, #0]
    2e10:	4b0b      	ldr	r3, [pc, #44]	; (2e40 <system_clock_source_dfll_set_config+0x7c>)
    2e12:	430b      	orrs	r3, r1
    2e14:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2e16:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2e18:	7b03      	ldrb	r3, [r0, #12]
    2e1a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2e1c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2e1e:	4313      	orrs	r3, r2
    2e20:	89c2      	ldrh	r2, [r0, #14]
    2e22:	0412      	lsls	r2, r2, #16
    2e24:	4905      	ldr	r1, [pc, #20]	; (2e3c <system_clock_source_dfll_set_config+0x78>)
    2e26:	400a      	ands	r2, r1
    2e28:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2e2a:	4a03      	ldr	r2, [pc, #12]	; (2e38 <system_clock_source_dfll_set_config+0x74>)
    2e2c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2e2e:	6813      	ldr	r3, [r2, #0]
    2e30:	2104      	movs	r1, #4
    2e32:	430b      	orrs	r3, r1
    2e34:	6013      	str	r3, [r2, #0]
    2e36:	e7ee      	b.n	2e16 <system_clock_source_dfll_set_config+0x52>
    2e38:	20000244 	.word	0x20000244
    2e3c:	03ff0000 	.word	0x03ff0000
    2e40:	00000424 	.word	0x00000424

00002e44 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    2e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e46:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    2e48:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    2e4a:	7d03      	ldrb	r3, [r0, #20]
    2e4c:	2b01      	cmp	r3, #1
    2e4e:	d03b      	beq.n	2ec8 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    2e50:	68ab      	ldr	r3, [r5, #8]
    2e52:	0118      	lsls	r0, r3, #4
    2e54:	0021      	movs	r1, r4
    2e56:	4b20      	ldr	r3, [pc, #128]	; (2ed8 <system_clock_source_dpll_set_config+0x94>)
    2e58:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    2e5a:	220f      	movs	r2, #15
    2e5c:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    2e5e:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2e60:	782e      	ldrb	r6, [r5, #0]
    2e62:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    2e64:	7869      	ldrb	r1, [r5, #1]
    2e66:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    2e68:	430e      	orrs	r6, r1
    2e6a:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    2e6c:	491b      	ldr	r1, [pc, #108]	; (2edc <system_clock_source_dpll_set_config+0x98>)
    2e6e:	2744      	movs	r7, #68	; 0x44
    2e70:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2e72:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    2e74:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    2e76:	051b      	lsls	r3, r3, #20
    2e78:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    2e7a:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    2e7c:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    2e7e:	78ab      	ldrb	r3, [r5, #2]
    2e80:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    2e82:	78ee      	ldrb	r6, [r5, #3]
    2e84:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e86:	4333      	orrs	r3, r6
    2e88:	792e      	ldrb	r6, [r5, #4]
    2e8a:	00b6      	lsls	r6, r6, #2
    2e8c:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    2e8e:	7caf      	ldrb	r7, [r5, #18]
    2e90:	2603      	movs	r6, #3
    2e92:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e94:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    2e96:	8a2e      	ldrh	r6, [r5, #16]
    2e98:	0436      	lsls	r6, r6, #16
    2e9a:	4f11      	ldr	r7, [pc, #68]	; (2ee0 <system_clock_source_dpll_set_config+0x9c>)
    2e9c:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2e9e:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    2ea0:	7cee      	ldrb	r6, [r5, #19]
    2ea2:	0236      	lsls	r6, r6, #8
    2ea4:	27e0      	movs	r7, #224	; 0xe0
    2ea6:	00ff      	lsls	r7, r7, #3
    2ea8:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2eaa:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    2eac:	7d2e      	ldrb	r6, [r5, #20]
    2eae:	0136      	lsls	r6, r6, #4
    2eb0:	2530      	movs	r5, #48	; 0x30
    2eb2:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    2eb4:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    2eb6:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    2eb8:	230f      	movs	r3, #15
    2eba:	4398      	bics	r0, r3
    2ebc:	1880      	adds	r0, r0, r2
    2ebe:	4344      	muls	r4, r0
    2ec0:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    2ec2:	4b08      	ldr	r3, [pc, #32]	; (2ee4 <system_clock_source_dpll_set_config+0xa0>)
    2ec4:	60dc      	str	r4, [r3, #12]
}
    2ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    2ec8:	8a01      	ldrh	r1, [r0, #16]
    2eca:	3101      	adds	r1, #1
    2ecc:	0049      	lsls	r1, r1, #1
    2ece:	0020      	movs	r0, r4
    2ed0:	4b01      	ldr	r3, [pc, #4]	; (2ed8 <system_clock_source_dpll_set_config+0x94>)
    2ed2:	4798      	blx	r3
    2ed4:	0004      	movs	r4, r0
    2ed6:	e7bb      	b.n	2e50 <system_clock_source_dpll_set_config+0xc>
    2ed8:	00008ed5 	.word	0x00008ed5
    2edc:	40000800 	.word	0x40000800
    2ee0:	07ff0000 	.word	0x07ff0000
    2ee4:	20000244 	.word	0x20000244

00002ee8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2ee8:	2808      	cmp	r0, #8
    2eea:	d803      	bhi.n	2ef4 <system_clock_source_enable+0xc>
    2eec:	0080      	lsls	r0, r0, #2
    2eee:	4b25      	ldr	r3, [pc, #148]	; (2f84 <system_clock_source_enable+0x9c>)
    2ef0:	581b      	ldr	r3, [r3, r0]
    2ef2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2ef4:	2017      	movs	r0, #23
    2ef6:	e044      	b.n	2f82 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2ef8:	4a23      	ldr	r2, [pc, #140]	; (2f88 <system_clock_source_enable+0xa0>)
    2efa:	6a13      	ldr	r3, [r2, #32]
    2efc:	2102      	movs	r1, #2
    2efe:	430b      	orrs	r3, r1
    2f00:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f02:	2000      	movs	r0, #0
    2f04:	e03d      	b.n	2f82 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f06:	4a20      	ldr	r2, [pc, #128]	; (2f88 <system_clock_source_enable+0xa0>)
    2f08:	6993      	ldr	r3, [r2, #24]
    2f0a:	2102      	movs	r1, #2
    2f0c:	430b      	orrs	r3, r1
    2f0e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f10:	2000      	movs	r0, #0
		break;
    2f12:	e036      	b.n	2f82 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f14:	4a1c      	ldr	r2, [pc, #112]	; (2f88 <system_clock_source_enable+0xa0>)
    2f16:	8a13      	ldrh	r3, [r2, #16]
    2f18:	2102      	movs	r1, #2
    2f1a:	430b      	orrs	r3, r1
    2f1c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2f1e:	2000      	movs	r0, #0
		break;
    2f20:	e02f      	b.n	2f82 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2f22:	4a19      	ldr	r2, [pc, #100]	; (2f88 <system_clock_source_enable+0xa0>)
    2f24:	8a93      	ldrh	r3, [r2, #20]
    2f26:	2102      	movs	r1, #2
    2f28:	430b      	orrs	r3, r1
    2f2a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2f2c:	2000      	movs	r0, #0
		break;
    2f2e:	e028      	b.n	2f82 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f30:	4916      	ldr	r1, [pc, #88]	; (2f8c <system_clock_source_enable+0xa4>)
    2f32:	680b      	ldr	r3, [r1, #0]
    2f34:	2202      	movs	r2, #2
    2f36:	4313      	orrs	r3, r2
    2f38:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2f3a:	4b13      	ldr	r3, [pc, #76]	; (2f88 <system_clock_source_enable+0xa0>)
    2f3c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f3e:	0019      	movs	r1, r3
    2f40:	320e      	adds	r2, #14
    2f42:	68cb      	ldr	r3, [r1, #12]
    2f44:	421a      	tst	r2, r3
    2f46:	d0fc      	beq.n	2f42 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f48:	4a10      	ldr	r2, [pc, #64]	; (2f8c <system_clock_source_enable+0xa4>)
    2f4a:	6891      	ldr	r1, [r2, #8]
    2f4c:	4b0e      	ldr	r3, [pc, #56]	; (2f88 <system_clock_source_enable+0xa0>)
    2f4e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f50:	6852      	ldr	r2, [r2, #4]
    2f52:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f54:	2200      	movs	r2, #0
    2f56:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f58:	0019      	movs	r1, r3
    2f5a:	3210      	adds	r2, #16
    2f5c:	68cb      	ldr	r3, [r1, #12]
    2f5e:	421a      	tst	r2, r3
    2f60:	d0fc      	beq.n	2f5c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f62:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <system_clock_source_enable+0xa4>)
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	b29b      	uxth	r3, r3
    2f68:	4a07      	ldr	r2, [pc, #28]	; (2f88 <system_clock_source_enable+0xa0>)
    2f6a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2f6c:	2000      	movs	r0, #0
    2f6e:	e008      	b.n	2f82 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2f70:	4905      	ldr	r1, [pc, #20]	; (2f88 <system_clock_source_enable+0xa0>)
    2f72:	2244      	movs	r2, #68	; 0x44
    2f74:	5c8b      	ldrb	r3, [r1, r2]
    2f76:	2002      	movs	r0, #2
    2f78:	4303      	orrs	r3, r0
    2f7a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2f7c:	2000      	movs	r0, #0
		break;
    2f7e:	e000      	b.n	2f82 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2f80:	2000      	movs	r0, #0
}
    2f82:	4770      	bx	lr
    2f84:	0000a74c 	.word	0x0000a74c
    2f88:	40000800 	.word	0x40000800
    2f8c:	20000244 	.word	0x20000244

00002f90 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f92:	46ce      	mov	lr, r9
    2f94:	4647      	mov	r7, r8
    2f96:	b580      	push	{r7, lr}
    2f98:	b095      	sub	sp, #84	; 0x54
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2f9a:	22c2      	movs	r2, #194	; 0xc2
    2f9c:	00d2      	lsls	r2, r2, #3
    2f9e:	4b66      	ldr	r3, [pc, #408]	; (3138 <system_clock_init+0x1a8>)
    2fa0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fa2:	4a66      	ldr	r2, [pc, #408]	; (313c <system_clock_init+0x1ac>)
    2fa4:	6853      	ldr	r3, [r2, #4]
    2fa6:	211e      	movs	r1, #30
    2fa8:	438b      	bics	r3, r1
    2faa:	391a      	subs	r1, #26
    2fac:	430b      	orrs	r3, r1
    2fae:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2fb0:	2202      	movs	r2, #2
    2fb2:	ab01      	add	r3, sp, #4
    2fb4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fb6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2fb8:	4d61      	ldr	r5, [pc, #388]	; (3140 <system_clock_init+0x1b0>)
    2fba:	b2e0      	uxtb	r0, r4
    2fbc:	a901      	add	r1, sp, #4
    2fbe:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fc0:	3401      	adds	r4, #1
    2fc2:	2c25      	cmp	r4, #37	; 0x25
    2fc4:	d1f9      	bne.n	2fba <system_clock_init+0x2a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2fc6:	a810      	add	r0, sp, #64	; 0x40
    2fc8:	2300      	movs	r3, #0
    2fca:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2fcc:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2fce:	2280      	movs	r2, #128	; 0x80
    2fd0:	0212      	lsls	r2, r2, #8
    2fd2:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2fd4:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2fd6:	2201      	movs	r2, #1
    2fd8:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2fda:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2fdc:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2fde:	3205      	adds	r2, #5
    2fe0:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2fe2:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2fe4:	4b57      	ldr	r3, [pc, #348]	; (3144 <system_clock_init+0x1b4>)
    2fe6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2fe8:	2005      	movs	r0, #5
    2fea:	4b57      	ldr	r3, [pc, #348]	; (3148 <system_clock_init+0x1b8>)
    2fec:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2fee:	4952      	ldr	r1, [pc, #328]	; (3138 <system_clock_init+0x1a8>)
    2ff0:	2202      	movs	r2, #2
    2ff2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2ff4:	421a      	tst	r2, r3
    2ff6:	d0fc      	beq.n	2ff2 <system_clock_init+0x62>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2ff8:	4a4f      	ldr	r2, [pc, #316]	; (3138 <system_clock_init+0x1a8>)
    2ffa:	8a93      	ldrh	r3, [r2, #20]
    2ffc:	2180      	movs	r1, #128	; 0x80
    2ffe:	430b      	orrs	r3, r1
    3000:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3002:	ab0b      	add	r3, sp, #44	; 0x2c
    3004:	2200      	movs	r2, #0
    3006:	2100      	movs	r1, #0
    3008:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    300a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    300c:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    300e:	3120      	adds	r1, #32
    3010:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3012:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3014:	4b4d      	ldr	r3, [pc, #308]	; (314c <system_clock_init+0x1bc>)
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    301a:	2b3f      	cmp	r3, #63	; 0x3f
    301c:	d100      	bne.n	3020 <system_clock_init+0x90>
    301e:	e088      	b.n	3132 <system_clock_init+0x1a2>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3020:	a80b      	add	r0, sp, #44	; 0x2c
    3022:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3024:	2307      	movs	r3, #7
    3026:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    3028:	3303      	adds	r3, #3
    302a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    302c:	4b48      	ldr	r3, [pc, #288]	; (3150 <system_clock_init+0x1c0>)
    302e:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    3030:	3bff      	subs	r3, #255	; 0xff
    3032:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    3034:	4b47      	ldr	r3, [pc, #284]	; (3154 <system_clock_init+0x1c4>)
    3036:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3038:	4b47      	ldr	r3, [pc, #284]	; (3158 <system_clock_init+0x1c8>)
    303a:	4798      	blx	r3
	config->run_in_standby  = false;
    303c:	a80a      	add	r0, sp, #40	; 0x28
    303e:	2500      	movs	r5, #0
    3040:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3042:	2601      	movs	r6, #1
    3044:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3046:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3048:	4b44      	ldr	r3, [pc, #272]	; (315c <system_clock_init+0x1cc>)
    304a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    304c:	2006      	movs	r0, #6
    304e:	4b3e      	ldr	r3, [pc, #248]	; (3148 <system_clock_init+0x1b8>)
    3050:	4699      	mov	r9, r3
    3052:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3054:	4b42      	ldr	r3, [pc, #264]	; (3160 <system_clock_init+0x1d0>)
    3056:	4798      	blx	r3
	config->division_factor    = 1;
    3058:	ac01      	add	r4, sp, #4
    305a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    305c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    305e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3060:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3062:	2305      	movs	r3, #5
    3064:	7023      	strb	r3, [r4, #0]
    3066:	0021      	movs	r1, r4
    3068:	2001      	movs	r0, #1
    306a:	4b3e      	ldr	r3, [pc, #248]	; (3164 <system_clock_init+0x1d4>)
    306c:	4698      	mov	r8, r3
    306e:	4798      	blx	r3
    3070:	2001      	movs	r0, #1
    3072:	4f3d      	ldr	r7, [pc, #244]	; (3168 <system_clock_init+0x1d8>)
    3074:	47b8      	blx	r7
	config->division_factor    = 1;
    3076:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3078:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    307a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    307c:	7265      	strb	r5, [r4, #9]
    307e:	2308      	movs	r3, #8
    3080:	7023      	strb	r3, [r4, #0]
    3082:	0021      	movs	r1, r4
    3084:	2003      	movs	r0, #3
    3086:	47c0      	blx	r8
    3088:	2003      	movs	r0, #3
    308a:	47b8      	blx	r7
	config->division_factor    = 1;
    308c:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    308e:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    3090:	7265      	strb	r5, [r4, #9]
    3092:	2304      	movs	r3, #4
    3094:	7023      	strb	r3, [r4, #0]
    3096:	7226      	strb	r6, [r4, #8]
    3098:	0021      	movs	r1, r4
    309a:	2007      	movs	r0, #7
    309c:	47c0      	blx	r8
    309e:	2007      	movs	r0, #7
    30a0:	47b8      	blx	r7
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    30a2:	2007      	movs	r0, #7
    30a4:	47c8      	blx	r9
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    30a6:	4924      	ldr	r1, [pc, #144]	; (3138 <system_clock_init+0x1a8>)
    30a8:	2210      	movs	r2, #16
    30aa:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    30ac:	421a      	tst	r2, r3
    30ae:	d0fc      	beq.n	30aa <system_clock_init+0x11a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    30b0:	4a21      	ldr	r2, [pc, #132]	; (3138 <system_clock_init+0x1a8>)
    30b2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    30b4:	2180      	movs	r1, #128	; 0x80
    30b6:	430b      	orrs	r3, r1
    30b8:	8493      	strh	r3, [r2, #36]	; 0x24
	config->run_in_standby      = false;
    30ba:	a804      	add	r0, sp, #16
    30bc:	2300      	movs	r3, #0
    30be:	7043      	strb	r3, [r0, #1]
	config->lock_bypass         = false;
    30c0:	7083      	strb	r3, [r0, #2]
	config->wake_up_fast        = false;
    30c2:	70c3      	strb	r3, [r0, #3]
	config->low_power_enable    = false;
    30c4:	7103      	strb	r3, [r0, #4]
	config->output_frequency    = 48000000;
    30c6:	4a29      	ldr	r2, [pc, #164]	; (316c <system_clock_init+0x1dc>)
    30c8:	6082      	str	r2, [r0, #8]
	config->reference_frequency = 32768;
    30ca:	2280      	movs	r2, #128	; 0x80
    30cc:	0212      	lsls	r2, r2, #8
    30ce:	60c2      	str	r2, [r0, #12]
	config->reference_divider   = 1;
    30d0:	2201      	movs	r2, #1
    30d2:	8202      	strh	r2, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    30d4:	7503      	strb	r3, [r0, #20]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    30d6:	74c3      	strb	r3, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    30d8:	7483      	strb	r3, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    30da:	7003      	strb	r3, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    30dc:	4b24      	ldr	r3, [pc, #144]	; (3170 <system_clock_init+0x1e0>)
    30de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    30e0:	2008      	movs	r0, #8
    30e2:	4b19      	ldr	r3, [pc, #100]	; (3148 <system_clock_init+0x1b8>)
    30e4:	4798      	blx	r3
		return ((SYSCTRL->DPLLSTATUS.reg &
    30e6:	4814      	ldr	r0, [pc, #80]	; (3138 <system_clock_init+0x1a8>)
    30e8:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    30ea:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    30ec:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    30ee:	4013      	ands	r3, r2
    30f0:	2b03      	cmp	r3, #3
    30f2:	d1fb      	bne.n	30ec <system_clock_init+0x15c>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    30f4:	4910      	ldr	r1, [pc, #64]	; (3138 <system_clock_init+0x1a8>)
    30f6:	2244      	movs	r2, #68	; 0x44
    30f8:	5c88      	ldrb	r0, [r1, r2]
    30fa:	3b83      	subs	r3, #131	; 0x83
    30fc:	4303      	orrs	r3, r0
    30fe:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    3100:	4a1c      	ldr	r2, [pc, #112]	; (3174 <system_clock_init+0x1e4>)
    3102:	2300      	movs	r3, #0
    3104:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3106:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3108:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    310a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    310c:	a901      	add	r1, sp, #4
    310e:	2201      	movs	r2, #1
    3110:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3112:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    3114:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3116:	3307      	adds	r3, #7
    3118:	700b      	strb	r3, [r1, #0]
    311a:	720a      	strb	r2, [r1, #8]
    311c:	2000      	movs	r0, #0
    311e:	4b11      	ldr	r3, [pc, #68]	; (3164 <system_clock_init+0x1d4>)
    3120:	4798      	blx	r3
    3122:	2000      	movs	r0, #0
    3124:	4b10      	ldr	r3, [pc, #64]	; (3168 <system_clock_init+0x1d8>)
    3126:	4798      	blx	r3
#endif
}
    3128:	b015      	add	sp, #84	; 0x54
    312a:	bc0c      	pop	{r2, r3}
    312c:	4690      	mov	r8, r2
    312e:	4699      	mov	r9, r3
    3130:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3132:	3b20      	subs	r3, #32
    3134:	e774      	b.n	3020 <system_clock_init+0x90>
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	40000800 	.word	0x40000800
    313c:	41004000 	.word	0x41004000
    3140:	00008c59 	.word	0x00008c59
    3144:	00002d0d 	.word	0x00002d0d
    3148:	00002ee9 	.word	0x00002ee9
    314c:	00806024 	.word	0x00806024
    3150:	000001ff 	.word	0x000001ff
    3154:	ffffbb80 	.word	0xffffbb80
    3158:	00002dc5 	.word	0x00002dc5
    315c:	00002cd1 	.word	0x00002cd1
    3160:	00008a21 	.word	0x00008a21
    3164:	00008a45 	.word	0x00008a45
    3168:	00008afd 	.word	0x00008afd
    316c:	02dc6c00 	.word	0x02dc6c00
    3170:	00002e45 	.word	0x00002e45
    3174:	40000400 	.word	0x40000400

00003178 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3178:	b510      	push	{r4, lr}
    317a:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    317c:	ab03      	add	r3, sp, #12
    317e:	2200      	movs	r2, #0
    3180:	701a      	strb	r2, [r3, #0]
    3182:	3203      	adds	r2, #3
    3184:	705a      	strb	r2, [r3, #1]
    3186:	3a01      	subs	r2, #1
    3188:	709a      	strb	r2, [r3, #2]
    318a:	3a01      	subs	r2, #1
    318c:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    318e:	4b27      	ldr	r3, [pc, #156]	; (322c <udd_sleep_mode+0xb4>)
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	4283      	cmp	r3, r0
    3194:	d007      	beq.n	31a6 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    3196:	2800      	cmp	r0, #0
    3198:	d107      	bne.n	31aa <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    319a:	4b24      	ldr	r3, [pc, #144]	; (322c <udd_sleep_mode+0xb4>)
    319c:	781b      	ldrb	r3, [r3, #0]
    319e:	2b00      	cmp	r3, #0
    31a0:	d123      	bne.n	31ea <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    31a2:	4b22      	ldr	r3, [pc, #136]	; (322c <udd_sleep_mode+0xb4>)
    31a4:	7018      	strb	r0, [r3, #0]
}
    31a6:	b004      	add	sp, #16
    31a8:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    31aa:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    31ac:	5c1b      	ldrb	r3, [r3, r0]
    31ae:	4a20      	ldr	r2, [pc, #128]	; (3230 <udd_sleep_mode+0xb8>)
    31b0:	5cd2      	ldrb	r2, [r2, r3]
    31b2:	2aff      	cmp	r2, #255	; 0xff
    31b4:	d100      	bne.n	31b8 <udd_sleep_mode+0x40>
    31b6:	e7fe      	b.n	31b6 <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31b8:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31bc:	4251      	negs	r1, r2
    31be:	414a      	adcs	r2, r1
    31c0:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    31c2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    31c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    31c8:	2100      	movs	r1, #0
    31ca:	4a1a      	ldr	r2, [pc, #104]	; (3234 <udd_sleep_mode+0xbc>)
    31cc:	7011      	strb	r1, [r2, #0]
	return flags;
    31ce:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    31d0:	4917      	ldr	r1, [pc, #92]	; (3230 <udd_sleep_mode+0xb8>)
    31d2:	5cca      	ldrb	r2, [r1, r3]
    31d4:	3201      	adds	r2, #1
    31d6:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    31d8:	2c00      	cmp	r4, #0
    31da:	d0de      	beq.n	319a <udd_sleep_mode+0x22>
		cpu_irq_enable();
    31dc:	2201      	movs	r2, #1
    31de:	4b15      	ldr	r3, [pc, #84]	; (3234 <udd_sleep_mode+0xbc>)
    31e0:	701a      	strb	r2, [r3, #0]
    31e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    31e6:	b662      	cpsie	i
    31e8:	e7d7      	b.n	319a <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    31ea:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    31ec:	5cd3      	ldrb	r3, [r2, r3]
    31ee:	4a10      	ldr	r2, [pc, #64]	; (3230 <udd_sleep_mode+0xb8>)
    31f0:	5cd2      	ldrb	r2, [r2, r3]
    31f2:	2a00      	cmp	r2, #0
    31f4:	d100      	bne.n	31f8 <udd_sleep_mode+0x80>
    31f6:	e7fe      	b.n	31f6 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31f8:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    31fc:	4251      	negs	r1, r2
    31fe:	414a      	adcs	r2, r1
    3200:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    3202:	b672      	cpsid	i
    3204:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3208:	2100      	movs	r1, #0
    320a:	4a0a      	ldr	r2, [pc, #40]	; (3234 <udd_sleep_mode+0xbc>)
    320c:	7011      	strb	r1, [r2, #0]
	return flags;
    320e:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3210:	4907      	ldr	r1, [pc, #28]	; (3230 <udd_sleep_mode+0xb8>)
    3212:	5cca      	ldrb	r2, [r1, r3]
    3214:	3a01      	subs	r2, #1
    3216:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    3218:	2c00      	cmp	r4, #0
    321a:	d0c2      	beq.n	31a2 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    321c:	2201      	movs	r2, #1
    321e:	4b05      	ldr	r3, [pc, #20]	; (3234 <udd_sleep_mode+0xbc>)
    3220:	701a      	strb	r2, [r3, #0]
    3222:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3226:	b662      	cpsie	i
    3228:	e7bb      	b.n	31a2 <udd_sleep_mode+0x2a>
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	200002b4 	.word	0x200002b4
    3230:	20000e44 	.word	0x20000e44
    3234:	20000125 	.word	0x20000125

00003238 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    3238:	0643      	lsls	r3, r0, #25
    323a:	d00b      	beq.n	3254 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    323c:	230f      	movs	r3, #15
    323e:	4003      	ands	r3, r0
    3240:	005b      	lsls	r3, r3, #1
    3242:	09c0      	lsrs	r0, r0, #7
    3244:	1818      	adds	r0, r3, r0
    3246:	3802      	subs	r0, #2
    3248:	0083      	lsls	r3, r0, #2
    324a:	1818      	adds	r0, r3, r0
    324c:	0080      	lsls	r0, r0, #2
    324e:	4b02      	ldr	r3, [pc, #8]	; (3258 <udd_ep_get_job+0x20>)
    3250:	1818      	adds	r0, r3, r0
	}
}
    3252:	4770      	bx	lr
		return NULL;
    3254:	2000      	movs	r0, #0
    3256:	e7fc      	b.n	3252 <udd_ep_get_job+0x1a>
    3258:	20000264 	.word	0x20000264

0000325c <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    325c:	b5f0      	push	{r4, r5, r6, r7, lr}
    325e:	46d6      	mov	lr, sl
    3260:	464f      	mov	r7, r9
    3262:	4646      	mov	r6, r8
    3264:	b5c0      	push	{r6, r7, lr}
    3266:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    3268:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    326a:	b26b      	sxtb	r3, r5
    326c:	2b00      	cmp	r3, #0
    326e:	db26      	blt.n	32be <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    3270:	0028      	movs	r0, r5
    3272:	4b5e      	ldr	r3, [pc, #376]	; (33ec <udd_ep_transfer_process+0x190>)
    3274:	4798      	blx	r3
    3276:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    3278:	270f      	movs	r7, #15
    327a:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    327c:	8a03      	ldrh	r3, [r0, #16]
    327e:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    3280:	464b      	mov	r3, r9
    3282:	881b      	ldrh	r3, [r3, #0]
    3284:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    3286:	7c83      	ldrb	r3, [r0, #18]
    3288:	075b      	lsls	r3, r3, #29
    328a:	d46a      	bmi.n	3362 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    328c:	68e3      	ldr	r3, [r4, #12]
    328e:	4453      	add	r3, sl
    3290:	001e      	movs	r6, r3
    3292:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    3294:	68a3      	ldr	r3, [r4, #8]
    3296:	429e      	cmp	r6, r3
    3298:	d800      	bhi.n	329c <udd_ep_transfer_process+0x40>
    329a:	e074      	b.n	3386 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    329c:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    329e:	7ca3      	ldrb	r3, [r4, #18]
    32a0:	2201      	movs	r2, #1
    32a2:	4393      	bics	r3, r2
    32a4:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    32a6:	6823      	ldr	r3, [r4, #0]
    32a8:	2b00      	cmp	r3, #0
    32aa:	d003      	beq.n	32b4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    32ac:	68e1      	ldr	r1, [r4, #12]
    32ae:	002a      	movs	r2, r5
    32b0:	2000      	movs	r0, #0
    32b2:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    32b4:	bc1c      	pop	{r2, r3, r4}
    32b6:	4690      	mov	r8, r2
    32b8:	4699      	mov	r9, r3
    32ba:	46a2      	mov	sl, r4
    32bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    32be:	0028      	movs	r0, r5
    32c0:	4b4a      	ldr	r3, [pc, #296]	; (33ec <udd_ep_transfer_process+0x190>)
    32c2:	4798      	blx	r3
    32c4:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    32c6:	270f      	movs	r7, #15
    32c8:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    32ca:	8a03      	ldrh	r3, [r0, #16]
    32cc:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    32ce:	464b      	mov	r3, r9
    32d0:	885e      	ldrh	r6, [r3, #2]
    32d2:	68c3      	ldr	r3, [r0, #12]
    32d4:	469c      	mov	ip, r3
    32d6:	4466      	add	r6, ip
    32d8:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    32da:	6881      	ldr	r1, [r0, #8]
    32dc:	428e      	cmp	r6, r1
    32de:	d025      	beq.n	332c <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    32e0:	1b8d      	subs	r5, r1, r6
    32e2:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    32e4:	4b42      	ldr	r3, [pc, #264]	; (33f0 <udd_ep_transfer_process+0x194>)
    32e6:	429d      	cmp	r5, r3
    32e8:	d906      	bls.n	32f8 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    32ea:	001d      	movs	r5, r3
    32ec:	4641      	mov	r1, r8
    32ee:	0018      	movs	r0, r3
    32f0:	4b40      	ldr	r3, [pc, #256]	; (33f4 <udd_ep_transfer_process+0x198>)
    32f2:	4798      	blx	r3
    32f4:	1a6d      	subs	r5, r5, r1
    32f6:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    32f8:	7ca2      	ldrb	r2, [r4, #18]
    32fa:	2300      	movs	r3, #0
    32fc:	0792      	lsls	r2, r2, #30
    32fe:	d507      	bpl.n	3310 <udd_ep_transfer_process+0xb4>
    3300:	4641      	mov	r1, r8
    3302:	0028      	movs	r0, r5
    3304:	4b3c      	ldr	r3, [pc, #240]	; (33f8 <udd_ep_transfer_process+0x19c>)
    3306:	4798      	blx	r3
    3308:	b289      	uxth	r1, r1
    330a:	424b      	negs	r3, r1
    330c:	414b      	adcs	r3, r1
    330e:	b2db      	uxtb	r3, r3
    3310:	005b      	lsls	r3, r3, #1
    3312:	7ca2      	ldrb	r2, [r4, #18]
    3314:	2102      	movs	r1, #2
    3316:	438a      	bics	r2, r1
    3318:	4313      	orrs	r3, r2
    331a:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    331c:	6862      	ldr	r2, [r4, #4]
    331e:	1992      	adds	r2, r2, r6
    3320:	002b      	movs	r3, r5
    3322:	0039      	movs	r1, r7
    3324:	4835      	ldr	r0, [pc, #212]	; (33fc <udd_ep_transfer_process+0x1a0>)
    3326:	4c36      	ldr	r4, [pc, #216]	; (3400 <udd_ep_transfer_process+0x1a4>)
    3328:	47a0      	blx	r4
    332a:	e7c3      	b.n	32b4 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    332c:	7c83      	ldrb	r3, [r0, #18]
    332e:	079b      	lsls	r3, r3, #30
    3330:	d40b      	bmi.n	334a <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    3332:	7c83      	ldrb	r3, [r0, #18]
    3334:	2201      	movs	r2, #1
    3336:	4393      	bics	r3, r2
    3338:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    333a:	6803      	ldr	r3, [r0, #0]
    333c:	2b00      	cmp	r3, #0
    333e:	d0b9      	beq.n	32b4 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3340:	002a      	movs	r2, r5
    3342:	0031      	movs	r1, r6
    3344:	2000      	movs	r0, #0
    3346:	4798      	blx	r3
    3348:	e7b4      	b.n	32b4 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    334a:	7c83      	ldrb	r3, [r0, #18]
    334c:	2202      	movs	r2, #2
    334e:	4393      	bics	r3, r2
    3350:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3352:	6842      	ldr	r2, [r0, #4]
    3354:	1992      	adds	r2, r2, r6
    3356:	2300      	movs	r3, #0
    3358:	0039      	movs	r1, r7
    335a:	4828      	ldr	r0, [pc, #160]	; (33fc <udd_ep_transfer_process+0x1a0>)
    335c:	4c28      	ldr	r4, [pc, #160]	; (3400 <udd_ep_transfer_process+0x1a4>)
    335e:	47a0      	blx	r4
    3360:	e7a8      	b.n	32b4 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    3362:	6843      	ldr	r3, [r0, #4]
    3364:	68c2      	ldr	r2, [r0, #12]
    3366:	4694      	mov	ip, r2
    3368:	4463      	add	r3, ip
    336a:	001e      	movs	r6, r3
    336c:	4641      	mov	r1, r8
    336e:	6880      	ldr	r0, [r0, #8]
    3370:	4b21      	ldr	r3, [pc, #132]	; (33f8 <udd_ep_transfer_process+0x19c>)
    3372:	4798      	blx	r3
    3374:	000a      	movs	r2, r1
    3376:	1e7b      	subs	r3, r7, #1
    3378:	019b      	lsls	r3, r3, #6
    337a:	4922      	ldr	r1, [pc, #136]	; (3404 <udd_ep_transfer_process+0x1a8>)
    337c:	1859      	adds	r1, r3, r1
    337e:	0030      	movs	r0, r6
    3380:	4b21      	ldr	r3, [pc, #132]	; (3408 <udd_ep_transfer_process+0x1ac>)
    3382:	4798      	blx	r3
    3384:	e782      	b.n	328c <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3386:	464a      	mov	r2, r9
    3388:	8892      	ldrh	r2, [r2, #4]
    338a:	4552      	cmp	r2, sl
    338c:	d000      	beq.n	3390 <udd_ep_transfer_process+0x134>
    338e:	e786      	b.n	329e <udd_ep_transfer_process+0x42>
    3390:	429e      	cmp	r6, r3
    3392:	d100      	bne.n	3396 <udd_ep_transfer_process+0x13a>
    3394:	e783      	b.n	329e <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3396:	1b9b      	subs	r3, r3, r6
    3398:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    339a:	4b15      	ldr	r3, [pc, #84]	; (33f0 <udd_ep_transfer_process+0x194>)
    339c:	429d      	cmp	r5, r3
    339e:	d916      	bls.n	33ce <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    33a0:	001d      	movs	r5, r3
    33a2:	4641      	mov	r1, r8
    33a4:	0018      	movs	r0, r3
    33a6:	4b13      	ldr	r3, [pc, #76]	; (33f4 <udd_ep_transfer_process+0x198>)
    33a8:	4798      	blx	r3
    33aa:	1a6b      	subs	r3, r5, r1
    33ac:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    33ae:	4598      	cmp	r8, r3
    33b0:	d914      	bls.n	33dc <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    33b2:	7ca3      	ldrb	r3, [r4, #18]
    33b4:	2204      	movs	r2, #4
    33b6:	4313      	orrs	r3, r2
    33b8:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    33ba:	1e7a      	subs	r2, r7, #1
    33bc:	0192      	lsls	r2, r2, #6
    33be:	4b11      	ldr	r3, [pc, #68]	; (3404 <udd_ep_transfer_process+0x1a8>)
    33c0:	18d2      	adds	r2, r2, r3
    33c2:	4643      	mov	r3, r8
    33c4:	0039      	movs	r1, r7
    33c6:	480d      	ldr	r0, [pc, #52]	; (33fc <udd_ep_transfer_process+0x1a0>)
    33c8:	4c10      	ldr	r4, [pc, #64]	; (340c <udd_ep_transfer_process+0x1b0>)
    33ca:	47a0      	blx	r4
    33cc:	e772      	b.n	32b4 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    33ce:	4641      	mov	r1, r8
    33d0:	0028      	movs	r0, r5
    33d2:	4b09      	ldr	r3, [pc, #36]	; (33f8 <udd_ep_transfer_process+0x19c>)
    33d4:	4798      	blx	r3
    33d6:	1a6b      	subs	r3, r5, r1
    33d8:	b29b      	uxth	r3, r3
    33da:	e7e8      	b.n	33ae <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    33dc:	6862      	ldr	r2, [r4, #4]
    33de:	1992      	adds	r2, r2, r6
    33e0:	0039      	movs	r1, r7
    33e2:	4806      	ldr	r0, [pc, #24]	; (33fc <udd_ep_transfer_process+0x1a0>)
    33e4:	4c09      	ldr	r4, [pc, #36]	; (340c <udd_ep_transfer_process+0x1b0>)
    33e6:	47a0      	blx	r4
    33e8:	e764      	b.n	32b4 <udd_ep_transfer_process+0x58>
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00003239 	.word	0x00003239
    33f0:	00001fff 	.word	0x00001fff
    33f4:	000091b5 	.word	0x000091b5
    33f8:	00008fe1 	.word	0x00008fe1
    33fc:	2000045c 	.word	0x2000045c
    3400:	00006d45 	.word	0x00006d45
    3404:	200003dc 	.word	0x200003dc
    3408:	000094b1 	.word	0x000094b1
    340c:	00006d99 	.word	0x00006d99

00003410 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    3410:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3412:	2205      	movs	r2, #5
    3414:	4b05      	ldr	r3, [pc, #20]	; (342c <udd_ctrl_stall_data+0x1c>)
    3416:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3418:	4c05      	ldr	r4, [pc, #20]	; (3430 <udd_ctrl_stall_data+0x20>)
    341a:	2180      	movs	r1, #128	; 0x80
    341c:	0020      	movs	r0, r4
    341e:	4b05      	ldr	r3, [pc, #20]	; (3434 <udd_ctrl_stall_data+0x24>)
    3420:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    3422:	2100      	movs	r1, #0
    3424:	0020      	movs	r0, r4
    3426:	4b04      	ldr	r3, [pc, #16]	; (3438 <udd_ctrl_stall_data+0x28>)
    3428:	4798      	blx	r3
}
    342a:	bd10      	pop	{r4, pc}
    342c:	20000262 	.word	0x20000262
    3430:	2000045c 	.word	0x2000045c
    3434:	00006c99 	.word	0x00006c99
    3438:	00006cbf 	.word	0x00006cbf

0000343c <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    343c:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    343e:	4c08      	ldr	r4, [pc, #32]	; (3460 <_usb_device_lpm_suspend+0x24>)
    3440:	2106      	movs	r1, #6
    3442:	0020      	movs	r0, r4
    3444:	4d07      	ldr	r5, [pc, #28]	; (3464 <_usb_device_lpm_suspend+0x28>)
    3446:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3448:	2104      	movs	r1, #4
    344a:	0020      	movs	r0, r4
    344c:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    344e:	2102      	movs	r1, #2
    3450:	0020      	movs	r0, r4
    3452:	4b05      	ldr	r3, [pc, #20]	; (3468 <_usb_device_lpm_suspend+0x2c>)
    3454:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3456:	2002      	movs	r0, #2
    3458:	4b04      	ldr	r3, [pc, #16]	; (346c <_usb_device_lpm_suspend+0x30>)
    345a:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    345c:	bd70      	pop	{r4, r5, r6, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	2000045c 	.word	0x2000045c
    3464:	000067ad 	.word	0x000067ad
    3468:	0000678d 	.word	0x0000678d
    346c:	00003179 	.word	0x00003179

00003470 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3470:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3472:	4b13      	ldr	r3, [pc, #76]	; (34c0 <_usb_on_wakeup+0x50>)
    3474:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3476:	069b      	lsls	r3, r3, #26
    3478:	d41c      	bmi.n	34b4 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    347a:	4911      	ldr	r1, [pc, #68]	; (34c0 <_usb_on_wakeup+0x50>)
    347c:	22d0      	movs	r2, #208	; 0xd0
    347e:	68cb      	ldr	r3, [r1, #12]
    3480:	4013      	ands	r3, r2
    3482:	2bd0      	cmp	r3, #208	; 0xd0
    3484:	d1fb      	bne.n	347e <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3486:	4c0f      	ldr	r4, [pc, #60]	; (34c4 <_usb_on_wakeup+0x54>)
    3488:	2102      	movs	r1, #2
    348a:	0020      	movs	r0, r4
    348c:	4b0e      	ldr	r3, [pc, #56]	; (34c8 <_usb_on_wakeup+0x58>)
    348e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3490:	2104      	movs	r1, #4
    3492:	0020      	movs	r0, r4
    3494:	4d0d      	ldr	r5, [pc, #52]	; (34cc <_usb_on_wakeup+0x5c>)
    3496:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3498:	4a0d      	ldr	r2, [pc, #52]	; (34d0 <_usb_on_wakeup+0x60>)
    349a:	2106      	movs	r1, #6
    349c:	0020      	movs	r0, r4
    349e:	4b0d      	ldr	r3, [pc, #52]	; (34d4 <_usb_on_wakeup+0x64>)
    34a0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    34a2:	2106      	movs	r1, #6
    34a4:	0020      	movs	r0, r4
    34a6:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    34a8:	2003      	movs	r0, #3
    34aa:	4b0b      	ldr	r3, [pc, #44]	; (34d8 <_usb_on_wakeup+0x68>)
    34ac:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    34ae:	4b0b      	ldr	r3, [pc, #44]	; (34dc <_usb_on_wakeup+0x6c>)
    34b0:	4798      	blx	r3
#endif
}
    34b2:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    34b4:	4902      	ldr	r1, [pc, #8]	; (34c0 <_usb_on_wakeup+0x50>)
    34b6:	2210      	movs	r2, #16
    34b8:	68cb      	ldr	r3, [r1, #12]
    34ba:	421a      	tst	r2, r3
    34bc:	d0fc      	beq.n	34b8 <_usb_on_wakeup+0x48>
    34be:	e7e2      	b.n	3486 <_usb_on_wakeup+0x16>
    34c0:	40000800 	.word	0x40000800
    34c4:	2000045c 	.word	0x2000045c
    34c8:	000067ad 	.word	0x000067ad
    34cc:	0000678d 	.word	0x0000678d
    34d0:	0000343d 	.word	0x0000343d
    34d4:	00006769 	.word	0x00006769
    34d8:	00003179 	.word	0x00003179
    34dc:	000062cd 	.word	0x000062cd

000034e0 <_usb_on_bus_reset>:
{
    34e0:	b530      	push	{r4, r5, lr}
    34e2:	b083      	sub	sp, #12
    34e4:	0004      	movs	r4, r0
	udc_reset();
    34e6:	4b1e      	ldr	r3, [pc, #120]	; (3560 <_usb_on_bus_reset+0x80>)
    34e8:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    34ea:	2380      	movs	r3, #128	; 0x80
    34ec:	6822      	ldr	r2, [r4, #0]
    34ee:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    34f0:	ad01      	add	r5, sp, #4
    34f2:	0028      	movs	r0, r5
    34f4:	4b1b      	ldr	r3, [pc, #108]	; (3564 <_usb_on_bus_reset+0x84>)
    34f6:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    34f8:	2303      	movs	r3, #3
    34fa:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    34fc:	0029      	movs	r1, r5
    34fe:	0020      	movs	r0, r4
    3500:	4b19      	ldr	r3, [pc, #100]	; (3568 <_usb_on_bus_reset+0x88>)
    3502:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3504:	4919      	ldr	r1, [pc, #100]	; (356c <_usb_on_bus_reset+0x8c>)
    3506:	0020      	movs	r0, r4
    3508:	4b19      	ldr	r3, [pc, #100]	; (3570 <_usb_on_bus_reset+0x90>)
    350a:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    350c:	4b19      	ldr	r3, [pc, #100]	; (3574 <_usb_on_bus_reset+0x94>)
    350e:	2202      	movs	r2, #2
    3510:	2100      	movs	r1, #0
    3512:	0020      	movs	r0, r4
    3514:	4d18      	ldr	r5, [pc, #96]	; (3578 <_usb_on_bus_reset+0x98>)
    3516:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3518:	4b18      	ldr	r3, [pc, #96]	; (357c <_usb_on_bus_reset+0x9c>)
    351a:	2200      	movs	r2, #0
    351c:	2100      	movs	r1, #0
    351e:	0020      	movs	r0, r4
    3520:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3522:	4b17      	ldr	r3, [pc, #92]	; (3580 <_usb_on_bus_reset+0xa0>)
    3524:	2201      	movs	r2, #1
    3526:	2100      	movs	r1, #0
    3528:	0020      	movs	r0, r4
    352a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    352c:	2202      	movs	r2, #2
    352e:	2100      	movs	r1, #0
    3530:	0020      	movs	r0, r4
    3532:	4d14      	ldr	r5, [pc, #80]	; (3584 <_usb_on_bus_reset+0xa4>)
    3534:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3536:	2200      	movs	r2, #0
    3538:	2100      	movs	r1, #0
    353a:	0020      	movs	r0, r4
    353c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    353e:	2201      	movs	r2, #1
    3540:	2100      	movs	r1, #0
    3542:	0020      	movs	r0, r4
    3544:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3546:	6821      	ldr	r1, [r4, #0]
    3548:	890b      	ldrh	r3, [r1, #8]
    354a:	4a0f      	ldr	r2, [pc, #60]	; (3588 <_usb_on_bus_reset+0xa8>)
    354c:	401a      	ands	r2, r3
    354e:	2380      	movs	r3, #128	; 0x80
    3550:	00db      	lsls	r3, r3, #3
    3552:	4313      	orrs	r3, r2
    3554:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3556:	2200      	movs	r2, #0
    3558:	4b0c      	ldr	r3, [pc, #48]	; (358c <_usb_on_bus_reset+0xac>)
    355a:	701a      	strb	r2, [r3, #0]
}
    355c:	b003      	add	sp, #12
    355e:	bd30      	pop	{r4, r5, pc}
    3560:	00001cc9 	.word	0x00001cc9
    3564:	000069b9 	.word	0x000069b9
    3568:	000069c9 	.word	0x000069c9
    356c:	200005dc 	.word	0x200005dc
    3570:	00006de9 	.word	0x00006de9
    3574:	000036c9 	.word	0x000036c9
    3578:	000067c9 	.word	0x000067c9
    357c:	000039e5 	.word	0x000039e5
    3580:	000035cd 	.word	0x000035cd
    3584:	00006819 	.word	0x00006819
    3588:	fffff3ff 	.word	0xfffff3ff
    358c:	20000262 	.word	0x20000262

00003590 <udd_ctrl_send_zlp_in>:
{
    3590:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3592:	2203      	movs	r2, #3
    3594:	4b07      	ldr	r3, [pc, #28]	; (35b4 <udd_ctrl_send_zlp_in+0x24>)
    3596:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3598:	4c07      	ldr	r4, [pc, #28]	; (35b8 <udd_ctrl_send_zlp_in+0x28>)
    359a:	4908      	ldr	r1, [pc, #32]	; (35bc <udd_ctrl_send_zlp_in+0x2c>)
    359c:	0020      	movs	r0, r4
    359e:	4b08      	ldr	r3, [pc, #32]	; (35c0 <udd_ctrl_send_zlp_in+0x30>)
    35a0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    35a2:	4b08      	ldr	r3, [pc, #32]	; (35c4 <udd_ctrl_send_zlp_in+0x34>)
    35a4:	689a      	ldr	r2, [r3, #8]
    35a6:	2300      	movs	r3, #0
    35a8:	2100      	movs	r1, #0
    35aa:	0020      	movs	r0, r4
    35ac:	4c06      	ldr	r4, [pc, #24]	; (35c8 <udd_ctrl_send_zlp_in+0x38>)
    35ae:	47a0      	blx	r4
}
    35b0:	bd10      	pop	{r4, pc}
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	20000262 	.word	0x20000262
    35b8:	2000045c 	.word	0x2000045c
    35bc:	200005dc 	.word	0x200005dc
    35c0:	00006de9 	.word	0x00006de9
    35c4:	200005c4 	.word	0x200005c4
    35c8:	00006d45 	.word	0x00006d45

000035cc <_usb_ep0_on_tansfer_fail>:
{
    35cc:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    35ce:	7989      	ldrb	r1, [r1, #6]
    35d0:	b24b      	sxtb	r3, r1
    35d2:	2b00      	cmp	r3, #0
    35d4:	db06      	blt.n	35e4 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    35d6:	4b0e      	ldr	r3, [pc, #56]	; (3610 <_usb_ep0_on_tansfer_fail+0x44>)
    35d8:	781b      	ldrb	r3, [r3, #0]
    35da:	2b02      	cmp	r3, #2
    35dc:	d00f      	beq.n	35fe <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    35de:	2b03      	cmp	r3, #3
    35e0:	d011      	beq.n	3606 <_usb_ep0_on_tansfer_fail+0x3a>
}
    35e2:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    35e4:	4b0a      	ldr	r3, [pc, #40]	; (3610 <_usb_ep0_on_tansfer_fail+0x44>)
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	2b01      	cmp	r3, #1
    35ea:	d005      	beq.n	35f8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    35ec:	2b04      	cmp	r3, #4
    35ee:	d1f8      	bne.n	35e2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    35f0:	4808      	ldr	r0, [pc, #32]	; (3614 <_usb_ep0_on_tansfer_fail+0x48>)
    35f2:	4b09      	ldr	r3, [pc, #36]	; (3618 <_usb_ep0_on_tansfer_fail+0x4c>)
    35f4:	4798      	blx	r3
    35f6:	e7f4      	b.n	35e2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    35f8:	4b08      	ldr	r3, [pc, #32]	; (361c <_usb_ep0_on_tansfer_fail+0x50>)
    35fa:	4798      	blx	r3
    35fc:	e7f1      	b.n	35e2 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    35fe:	2204      	movs	r2, #4
    3600:	4b03      	ldr	r3, [pc, #12]	; (3610 <_usb_ep0_on_tansfer_fail+0x44>)
    3602:	701a      	strb	r2, [r3, #0]
    3604:	e7ed      	b.n	35e2 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3606:	4803      	ldr	r0, [pc, #12]	; (3614 <_usb_ep0_on_tansfer_fail+0x48>)
    3608:	4b03      	ldr	r3, [pc, #12]	; (3618 <_usb_ep0_on_tansfer_fail+0x4c>)
    360a:	4798      	blx	r3
}
    360c:	e7e9      	b.n	35e2 <_usb_ep0_on_tansfer_fail+0x16>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	20000262 	.word	0x20000262
    3614:	2000045c 	.word	0x2000045c
    3618:	00006c99 	.word	0x00006c99
    361c:	00003591 	.word	0x00003591

00003620 <udd_ctrl_in_sent>:
{
    3620:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3622:	4b20      	ldr	r3, [pc, #128]	; (36a4 <udd_ctrl_in_sent+0x84>)
    3624:	881b      	ldrh	r3, [r3, #0]
    3626:	4a20      	ldr	r2, [pc, #128]	; (36a8 <udd_ctrl_in_sent+0x88>)
    3628:	8994      	ldrh	r4, [r2, #12]
    362a:	1ae4      	subs	r4, r4, r3
    362c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    362e:	2c00      	cmp	r4, #0
    3630:	d118      	bne.n	3664 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3632:	4a1e      	ldr	r2, [pc, #120]	; (36ac <udd_ctrl_in_sent+0x8c>)
    3634:	8811      	ldrh	r1, [r2, #0]
    3636:	185b      	adds	r3, r3, r1
    3638:	b29b      	uxth	r3, r3
    363a:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    363c:	4a1a      	ldr	r2, [pc, #104]	; (36a8 <udd_ctrl_in_sent+0x88>)
    363e:	88d2      	ldrh	r2, [r2, #6]
    3640:	429a      	cmp	r2, r3
    3642:	d023      	beq.n	368c <udd_ctrl_in_sent+0x6c>
    3644:	4b1a      	ldr	r3, [pc, #104]	; (36b0 <udd_ctrl_in_sent+0x90>)
    3646:	781b      	ldrb	r3, [r3, #0]
    3648:	2b00      	cmp	r3, #0
    364a:	d11f      	bne.n	368c <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    364c:	4b16      	ldr	r3, [pc, #88]	; (36a8 <udd_ctrl_in_sent+0x88>)
    364e:	695b      	ldr	r3, [r3, #20]
    3650:	2b00      	cmp	r3, #0
    3652:	d023      	beq.n	369c <udd_ctrl_in_sent+0x7c>
    3654:	4798      	blx	r3
    3656:	2800      	cmp	r0, #0
    3658:	d020      	beq.n	369c <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    365a:	2200      	movs	r2, #0
    365c:	4b11      	ldr	r3, [pc, #68]	; (36a4 <udd_ctrl_in_sent+0x84>)
    365e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3660:	4b11      	ldr	r3, [pc, #68]	; (36a8 <udd_ctrl_in_sent+0x88>)
    3662:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3664:	2c3f      	cmp	r4, #63	; 0x3f
    3666:	d919      	bls.n	369c <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3668:	2200      	movs	r2, #0
    366a:	4b11      	ldr	r3, [pc, #68]	; (36b0 <udd_ctrl_in_sent+0x90>)
    366c:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    366e:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3670:	4d0c      	ldr	r5, [pc, #48]	; (36a4 <udd_ctrl_in_sent+0x84>)
    3672:	882b      	ldrh	r3, [r5, #0]
    3674:	4a0c      	ldr	r2, [pc, #48]	; (36a8 <udd_ctrl_in_sent+0x88>)
    3676:	6892      	ldr	r2, [r2, #8]
    3678:	18d2      	adds	r2, r2, r3
    367a:	0023      	movs	r3, r4
    367c:	2100      	movs	r1, #0
    367e:	480d      	ldr	r0, [pc, #52]	; (36b4 <udd_ctrl_in_sent+0x94>)
    3680:	4e0d      	ldr	r6, [pc, #52]	; (36b8 <udd_ctrl_in_sent+0x98>)
    3682:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3684:	882b      	ldrh	r3, [r5, #0]
    3686:	18e4      	adds	r4, r4, r3
    3688:	802c      	strh	r4, [r5, #0]
}
    368a:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    368c:	2204      	movs	r2, #4
    368e:	4b0b      	ldr	r3, [pc, #44]	; (36bc <udd_ctrl_in_sent+0x9c>)
    3690:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3692:	490b      	ldr	r1, [pc, #44]	; (36c0 <udd_ctrl_in_sent+0xa0>)
    3694:	4807      	ldr	r0, [pc, #28]	; (36b4 <udd_ctrl_in_sent+0x94>)
    3696:	4b0b      	ldr	r3, [pc, #44]	; (36c4 <udd_ctrl_in_sent+0xa4>)
    3698:	4798      	blx	r3
			return;
    369a:	e7f6      	b.n	368a <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    369c:	2201      	movs	r2, #1
    369e:	4b04      	ldr	r3, [pc, #16]	; (36b0 <udd_ctrl_in_sent+0x90>)
    36a0:	701a      	strb	r2, [r3, #0]
    36a2:	e7e5      	b.n	3670 <udd_ctrl_in_sent+0x50>
    36a4:	2000025e 	.word	0x2000025e
    36a8:	200005c4 	.word	0x200005c4
    36ac:	20000260 	.word	0x20000260
    36b0:	2000025c 	.word	0x2000025c
    36b4:	2000045c 	.word	0x2000045c
    36b8:	00006d45 	.word	0x00006d45
    36bc:	20000262 	.word	0x20000262
    36c0:	200005dc 	.word	0x200005dc
    36c4:	00006de9 	.word	0x00006de9

000036c8 <_usb_ep0_on_setup>:
{
    36c8:	b510      	push	{r4, lr}
    36ca:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    36cc:	4b2c      	ldr	r3, [pc, #176]	; (3780 <_usb_ep0_on_setup+0xb8>)
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	2b00      	cmp	r3, #0
    36d2:	d007      	beq.n	36e4 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    36d4:	4b2b      	ldr	r3, [pc, #172]	; (3784 <_usb_ep0_on_setup+0xbc>)
    36d6:	691b      	ldr	r3, [r3, #16]
    36d8:	2b00      	cmp	r3, #0
    36da:	d000      	beq.n	36de <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    36dc:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    36de:	2200      	movs	r2, #0
    36e0:	4b27      	ldr	r3, [pc, #156]	; (3780 <_usb_ep0_on_setup+0xb8>)
    36e2:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    36e4:	8823      	ldrh	r3, [r4, #0]
    36e6:	2b08      	cmp	r3, #8
    36e8:	d002      	beq.n	36f0 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    36ea:	4b27      	ldr	r3, [pc, #156]	; (3788 <_usb_ep0_on_setup+0xc0>)
    36ec:	4798      	blx	r3
}
    36ee:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    36f0:	4a24      	ldr	r2, [pc, #144]	; (3784 <_usb_ep0_on_setup+0xbc>)
    36f2:	4b26      	ldr	r3, [pc, #152]	; (378c <_usb_ep0_on_setup+0xc4>)
    36f4:	7819      	ldrb	r1, [r3, #0]
    36f6:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    36f8:	7859      	ldrb	r1, [r3, #1]
    36fa:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    36fc:	78d8      	ldrb	r0, [r3, #3]
    36fe:	0200      	lsls	r0, r0, #8
    3700:	7899      	ldrb	r1, [r3, #2]
    3702:	1809      	adds	r1, r1, r0
    3704:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    3706:	7958      	ldrb	r0, [r3, #5]
    3708:	0200      	lsls	r0, r0, #8
    370a:	7919      	ldrb	r1, [r3, #4]
    370c:	1809      	adds	r1, r1, r0
    370e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    3710:	79d9      	ldrb	r1, [r3, #7]
    3712:	0209      	lsls	r1, r1, #8
    3714:	799b      	ldrb	r3, [r3, #6]
    3716:	185b      	adds	r3, r3, r1
    3718:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    371a:	4b1d      	ldr	r3, [pc, #116]	; (3790 <_usb_ep0_on_setup+0xc8>)
    371c:	4798      	blx	r3
    371e:	2800      	cmp	r0, #0
    3720:	d016      	beq.n	3750 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    3722:	4b18      	ldr	r3, [pc, #96]	; (3784 <_usb_ep0_on_setup+0xbc>)
    3724:	781b      	ldrb	r3, [r3, #0]
    3726:	2b7f      	cmp	r3, #127	; 0x7f
    3728:	d815      	bhi.n	3756 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    372a:	4b16      	ldr	r3, [pc, #88]	; (3784 <_usb_ep0_on_setup+0xbc>)
    372c:	88db      	ldrh	r3, [r3, #6]
    372e:	2b00      	cmp	r3, #0
    3730:	d022      	beq.n	3778 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    3732:	2300      	movs	r3, #0
    3734:	4a17      	ldr	r2, [pc, #92]	; (3794 <_usb_ep0_on_setup+0xcc>)
    3736:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3738:	4a17      	ldr	r2, [pc, #92]	; (3798 <_usb_ep0_on_setup+0xd0>)
    373a:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    373c:	2201      	movs	r2, #1
    373e:	4b10      	ldr	r3, [pc, #64]	; (3780 <_usb_ep0_on_setup+0xb8>)
    3740:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3742:	2340      	movs	r3, #64	; 0x40
    3744:	4a11      	ldr	r2, [pc, #68]	; (378c <_usb_ep0_on_setup+0xc4>)
    3746:	2100      	movs	r1, #0
    3748:	4814      	ldr	r0, [pc, #80]	; (379c <_usb_ep0_on_setup+0xd4>)
    374a:	4c15      	ldr	r4, [pc, #84]	; (37a0 <_usb_ep0_on_setup+0xd8>)
    374c:	47a0      	blx	r4
    374e:	e7ce      	b.n	36ee <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    3750:	4b0d      	ldr	r3, [pc, #52]	; (3788 <_usb_ep0_on_setup+0xc0>)
    3752:	4798      	blx	r3
			return;
    3754:	e7cb      	b.n	36ee <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    3756:	2300      	movs	r3, #0
    3758:	4a0e      	ldr	r2, [pc, #56]	; (3794 <_usb_ep0_on_setup+0xcc>)
    375a:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    375c:	4a0e      	ldr	r2, [pc, #56]	; (3798 <_usb_ep0_on_setup+0xd0>)
    375e:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3760:	2202      	movs	r2, #2
    3762:	4b07      	ldr	r3, [pc, #28]	; (3780 <_usb_ep0_on_setup+0xb8>)
    3764:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3766:	2340      	movs	r3, #64	; 0x40
    3768:	4a08      	ldr	r2, [pc, #32]	; (378c <_usb_ep0_on_setup+0xc4>)
    376a:	2100      	movs	r1, #0
    376c:	480b      	ldr	r0, [pc, #44]	; (379c <_usb_ep0_on_setup+0xd4>)
    376e:	4c0c      	ldr	r4, [pc, #48]	; (37a0 <_usb_ep0_on_setup+0xd8>)
    3770:	47a0      	blx	r4
			udd_ctrl_in_sent();
    3772:	4b0c      	ldr	r3, [pc, #48]	; (37a4 <_usb_ep0_on_setup+0xdc>)
    3774:	4798      	blx	r3
    3776:	e7ba      	b.n	36ee <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3778:	4b0b      	ldr	r3, [pc, #44]	; (37a8 <_usb_ep0_on_setup+0xe0>)
    377a:	4798      	blx	r3
				return;
    377c:	e7b7      	b.n	36ee <_usb_ep0_on_setup+0x26>
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	20000262 	.word	0x20000262
    3784:	200005c4 	.word	0x200005c4
    3788:	00003411 	.word	0x00003411
    378c:	200005dc 	.word	0x200005dc
    3790:	00001d59 	.word	0x00001d59
    3794:	20000260 	.word	0x20000260
    3798:	2000025e 	.word	0x2000025e
    379c:	2000045c 	.word	0x2000045c
    37a0:	00006d99 	.word	0x00006d99
    37a4:	00003621 	.word	0x00003621
    37a8:	00003591 	.word	0x00003591

000037ac <_usb_on_sof_notify>:
{
    37ac:	b510      	push	{r4, lr}
	udc_sof_notify();
    37ae:	4b02      	ldr	r3, [pc, #8]	; (37b8 <_usb_on_sof_notify+0xc>)
    37b0:	4798      	blx	r3
	UDC_SOF_EVENT();
    37b2:	4b02      	ldr	r3, [pc, #8]	; (37bc <_usb_on_sof_notify+0x10>)
    37b4:	4798      	blx	r3
}
    37b6:	bd10      	pop	{r4, pc}
    37b8:	00001d15 	.word	0x00001d15
    37bc:	000062d9 	.word	0x000062d9

000037c0 <_usb_on_suspend>:
{
    37c0:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    37c2:	4c07      	ldr	r4, [pc, #28]	; (37e0 <_usb_on_suspend+0x20>)
    37c4:	2104      	movs	r1, #4
    37c6:	0020      	movs	r0, r4
    37c8:	4b06      	ldr	r3, [pc, #24]	; (37e4 <_usb_on_suspend+0x24>)
    37ca:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    37cc:	2102      	movs	r1, #2
    37ce:	0020      	movs	r0, r4
    37d0:	4b05      	ldr	r3, [pc, #20]	; (37e8 <_usb_on_suspend+0x28>)
    37d2:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    37d4:	2001      	movs	r0, #1
    37d6:	4b05      	ldr	r3, [pc, #20]	; (37ec <_usb_on_suspend+0x2c>)
    37d8:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    37da:	4b05      	ldr	r3, [pc, #20]	; (37f0 <_usb_on_suspend+0x30>)
    37dc:	4798      	blx	r3
}
    37de:	bd10      	pop	{r4, pc}
    37e0:	2000045c 	.word	0x2000045c
    37e4:	000067ad 	.word	0x000067ad
    37e8:	0000678d 	.word	0x0000678d
    37ec:	00003179 	.word	0x00003179
    37f0:	000062c1 	.word	0x000062c1

000037f4 <udd_ep_abort>:
{
    37f4:	b510      	push	{r4, lr}
    37f6:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    37f8:	0001      	movs	r1, r0
    37fa:	480a      	ldr	r0, [pc, #40]	; (3824 <udd_ep_abort+0x30>)
    37fc:	4b0a      	ldr	r3, [pc, #40]	; (3828 <udd_ep_abort+0x34>)
    37fe:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    3800:	0020      	movs	r0, r4
    3802:	4b0a      	ldr	r3, [pc, #40]	; (382c <udd_ep_abort+0x38>)
    3804:	4798      	blx	r3
	if (!ptr_job->busy) {
    3806:	7c83      	ldrb	r3, [r0, #18]
    3808:	07db      	lsls	r3, r3, #31
    380a:	d50a      	bpl.n	3822 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    380c:	7c83      	ldrb	r3, [r0, #18]
    380e:	2201      	movs	r2, #1
    3810:	4393      	bics	r3, r2
    3812:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3814:	6803      	ldr	r3, [r0, #0]
    3816:	2b00      	cmp	r3, #0
    3818:	d003      	beq.n	3822 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    381a:	68c1      	ldr	r1, [r0, #12]
    381c:	0022      	movs	r2, r4
    381e:	2001      	movs	r0, #1
    3820:	4798      	blx	r3
}
    3822:	bd10      	pop	{r4, pc}
    3824:	2000045c 	.word	0x2000045c
    3828:	00006c39 	.word	0x00006c39
    382c:	00003239 	.word	0x00003239

00003830 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    3830:	4b02      	ldr	r3, [pc, #8]	; (383c <udd_get_frame_number+0xc>)
    3832:	681b      	ldr	r3, [r3, #0]
    3834:	8a18      	ldrh	r0, [r3, #16]
    3836:	0480      	lsls	r0, r0, #18
    3838:	0d40      	lsrs	r0, r0, #21
}
    383a:	4770      	bx	lr
    383c:	2000045c 	.word	0x2000045c

00003840 <udd_ep_free>:
{
    3840:	b570      	push	{r4, r5, r6, lr}
    3842:	b082      	sub	sp, #8
    3844:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    3846:	ad01      	add	r5, sp, #4
    3848:	0028      	movs	r0, r5
    384a:	4b0d      	ldr	r3, [pc, #52]	; (3880 <udd_ep_free+0x40>)
    384c:	4798      	blx	r3
	udd_ep_abort(ep);
    384e:	0020      	movs	r0, r4
    3850:	4b0c      	ldr	r3, [pc, #48]	; (3884 <udd_ep_free+0x44>)
    3852:	4798      	blx	r3
	config_ep.ep_address = ep;
    3854:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    3856:	2300      	movs	r3, #0
    3858:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    385a:	4e0b      	ldr	r6, [pc, #44]	; (3888 <udd_ep_free+0x48>)
    385c:	0029      	movs	r1, r5
    385e:	0030      	movs	r0, r6
    3860:	4b0a      	ldr	r3, [pc, #40]	; (388c <udd_ep_free+0x4c>)
    3862:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3864:	210f      	movs	r1, #15
    3866:	4021      	ands	r1, r4
    3868:	2200      	movs	r2, #0
    386a:	0030      	movs	r0, r6
    386c:	4b08      	ldr	r3, [pc, #32]	; (3890 <udd_ep_free+0x50>)
    386e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3870:	2200      	movs	r2, #0
    3872:	0021      	movs	r1, r4
    3874:	0030      	movs	r0, r6
    3876:	4b07      	ldr	r3, [pc, #28]	; (3894 <udd_ep_free+0x54>)
    3878:	4798      	blx	r3
}
    387a:	b002      	add	sp, #8
    387c:	bd70      	pop	{r4, r5, r6, pc}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	000069b9 	.word	0x000069b9
    3884:	000037f5 	.word	0x000037f5
    3888:	2000045c 	.word	0x2000045c
    388c:	000069c9 	.word	0x000069c9
    3890:	000067f1 	.word	0x000067f1
    3894:	000068e9 	.word	0x000068e9

00003898 <udd_ep_alloc>:
{
    3898:	b5f0      	push	{r4, r5, r6, r7, lr}
    389a:	b083      	sub	sp, #12
    389c:	0005      	movs	r5, r0
    389e:	000f      	movs	r7, r1
    38a0:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    38a2:	ae01      	add	r6, sp, #4
    38a4:	0030      	movs	r0, r6
    38a6:	4b36      	ldr	r3, [pc, #216]	; (3980 <udd_ep_alloc+0xe8>)
    38a8:	4798      	blx	r3
	config_ep.ep_address = ep;
    38aa:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    38ac:	2c08      	cmp	r4, #8
    38ae:	d813      	bhi.n	38d8 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    38b0:	2200      	movs	r2, #0
    38b2:	ab01      	add	r3, sp, #4
    38b4:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    38b6:	0028      	movs	r0, r5
    38b8:	4b32      	ldr	r3, [pc, #200]	; (3984 <udd_ep_alloc+0xec>)
    38ba:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    38bc:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    38be:	2103      	movs	r1, #3
    38c0:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    38c2:	2901      	cmp	r1, #1
    38c4:	d038      	beq.n	3938 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    38c6:	2902      	cmp	r1, #2
    38c8:	d043      	beq.n	3952 <udd_ep_alloc+0xba>
		return false;
    38ca:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    38cc:	2903      	cmp	r1, #3
    38ce:	d13d      	bne.n	394c <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    38d0:	2204      	movs	r2, #4
    38d2:	ab01      	add	r3, sp, #4
    38d4:	70da      	strb	r2, [r3, #3]
    38d6:	e032      	b.n	393e <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    38d8:	2c10      	cmp	r4, #16
    38da:	d803      	bhi.n	38e4 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    38dc:	2201      	movs	r2, #1
    38de:	ab01      	add	r3, sp, #4
    38e0:	705a      	strb	r2, [r3, #1]
    38e2:	e7e8      	b.n	38b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    38e4:	2c20      	cmp	r4, #32
    38e6:	d803      	bhi.n	38f0 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    38e8:	2202      	movs	r2, #2
    38ea:	ab01      	add	r3, sp, #4
    38ec:	705a      	strb	r2, [r3, #1]
    38ee:	e7e2      	b.n	38b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    38f0:	2c40      	cmp	r4, #64	; 0x40
    38f2:	d803      	bhi.n	38fc <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    38f4:	2203      	movs	r2, #3
    38f6:	ab01      	add	r3, sp, #4
    38f8:	705a      	strb	r2, [r3, #1]
    38fa:	e7dc      	b.n	38b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    38fc:	2c80      	cmp	r4, #128	; 0x80
    38fe:	d803      	bhi.n	3908 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    3900:	2204      	movs	r2, #4
    3902:	ab01      	add	r3, sp, #4
    3904:	705a      	strb	r2, [r3, #1]
    3906:	e7d6      	b.n	38b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    3908:	2380      	movs	r3, #128	; 0x80
    390a:	005b      	lsls	r3, r3, #1
    390c:	429c      	cmp	r4, r3
    390e:	d803      	bhi.n	3918 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    3910:	2205      	movs	r2, #5
    3912:	ab01      	add	r3, sp, #4
    3914:	705a      	strb	r2, [r3, #1]
    3916:	e7ce      	b.n	38b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    3918:	2380      	movs	r3, #128	; 0x80
    391a:	009b      	lsls	r3, r3, #2
    391c:	429c      	cmp	r4, r3
    391e:	d803      	bhi.n	3928 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    3920:	2206      	movs	r2, #6
    3922:	ab01      	add	r3, sp, #4
    3924:	705a      	strb	r2, [r3, #1]
    3926:	e7c6      	b.n	38b6 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    3928:	4a17      	ldr	r2, [pc, #92]	; (3988 <udd_ep_alloc+0xf0>)
		return false;
    392a:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    392c:	4294      	cmp	r4, r2
    392e:	d80d      	bhi.n	394c <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    3930:	2207      	movs	r2, #7
    3932:	ab01      	add	r3, sp, #4
    3934:	705a      	strb	r2, [r3, #1]
    3936:	e7be      	b.n	38b6 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3938:	2202      	movs	r2, #2
    393a:	ab01      	add	r3, sp, #4
    393c:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    393e:	a901      	add	r1, sp, #4
    3940:	4812      	ldr	r0, [pc, #72]	; (398c <udd_ep_alloc+0xf4>)
    3942:	4b13      	ldr	r3, [pc, #76]	; (3990 <udd_ep_alloc+0xf8>)
    3944:	4798      	blx	r3
		return false;
    3946:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3948:	2800      	cmp	r0, #0
    394a:	d006      	beq.n	395a <udd_ep_alloc+0xc2>
}
    394c:	0018      	movs	r0, r3
    394e:	b003      	add	sp, #12
    3950:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    3952:	2203      	movs	r2, #3
    3954:	ab01      	add	r3, sp, #4
    3956:	70da      	strb	r2, [r3, #3]
    3958:	e7f1      	b.n	393e <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    395a:	210f      	movs	r1, #15
    395c:	4029      	ands	r1, r5
    395e:	4c0b      	ldr	r4, [pc, #44]	; (398c <udd_ep_alloc+0xf4>)
    3960:	4b0c      	ldr	r3, [pc, #48]	; (3994 <udd_ep_alloc+0xfc>)
    3962:	2200      	movs	r2, #0
    3964:	0020      	movs	r0, r4
    3966:	4e0c      	ldr	r6, [pc, #48]	; (3998 <udd_ep_alloc+0x100>)
    3968:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    396a:	2200      	movs	r2, #0
    396c:	0029      	movs	r1, r5
    396e:	0020      	movs	r0, r4
    3970:	4e0a      	ldr	r6, [pc, #40]	; (399c <udd_ep_alloc+0x104>)
    3972:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3974:	2201      	movs	r2, #1
    3976:	0029      	movs	r1, r5
    3978:	0020      	movs	r0, r4
    397a:	47b0      	blx	r6
	return true;
    397c:	2301      	movs	r3, #1
    397e:	e7e5      	b.n	394c <udd_ep_alloc+0xb4>
    3980:	000069b9 	.word	0x000069b9
    3984:	00003239 	.word	0x00003239
    3988:	000003ff 	.word	0x000003ff
    398c:	2000045c 	.word	0x2000045c
    3990:	000069c9 	.word	0x000069c9
    3994:	0000325d 	.word	0x0000325d
    3998:	000067c9 	.word	0x000067c9
    399c:	00006819 	.word	0x00006819

000039a0 <udd_ep_is_halted>:
{
    39a0:	b510      	push	{r4, lr}
    39a2:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    39a4:	4801      	ldr	r0, [pc, #4]	; (39ac <udd_ep_is_halted+0xc>)
    39a6:	4b02      	ldr	r3, [pc, #8]	; (39b0 <udd_ep_is_halted+0x10>)
    39a8:	4798      	blx	r3
}
    39aa:	bd10      	pop	{r4, pc}
    39ac:	2000045c 	.word	0x2000045c
    39b0:	00006c6f 	.word	0x00006c6f

000039b4 <udd_ep_set_halt>:
{
    39b4:	b510      	push	{r4, lr}
    39b6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    39b8:	230f      	movs	r3, #15
    39ba:	4003      	ands	r3, r0
		return false;
    39bc:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    39be:	2b02      	cmp	r3, #2
    39c0:	d900      	bls.n	39c4 <udd_ep_set_halt+0x10>
}
    39c2:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    39c4:	0021      	movs	r1, r4
    39c6:	4804      	ldr	r0, [pc, #16]	; (39d8 <udd_ep_set_halt+0x24>)
    39c8:	4b04      	ldr	r3, [pc, #16]	; (39dc <udd_ep_set_halt+0x28>)
    39ca:	4798      	blx	r3
	udd_ep_abort(ep);
    39cc:	0020      	movs	r0, r4
    39ce:	4b04      	ldr	r3, [pc, #16]	; (39e0 <udd_ep_set_halt+0x2c>)
    39d0:	4798      	blx	r3
	return true;
    39d2:	2001      	movs	r0, #1
    39d4:	e7f5      	b.n	39c2 <udd_ep_set_halt+0xe>
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	2000045c 	.word	0x2000045c
    39dc:	00006c99 	.word	0x00006c99
    39e0:	000037f5 	.word	0x000037f5

000039e4 <_usb_ep0_on_tansfer_ok>:
{
    39e4:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    39e6:	4b34      	ldr	r3, [pc, #208]	; (3ab8 <_usb_ep0_on_tansfer_ok+0xd4>)
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	2b01      	cmp	r3, #1
    39ec:	d00a      	beq.n	3a04 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    39ee:	2b02      	cmp	r3, #2
    39f0:	d05f      	beq.n	3ab2 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    39f2:	4b32      	ldr	r3, [pc, #200]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    39f4:	691b      	ldr	r3, [r3, #16]
    39f6:	2b00      	cmp	r3, #0
    39f8:	d000      	beq.n	39fc <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    39fa:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    39fc:	2200      	movs	r2, #0
    39fe:	4b2e      	ldr	r3, [pc, #184]	; (3ab8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3a00:	701a      	strb	r2, [r3, #0]
}
    3a02:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    3a04:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    3a06:	4b2d      	ldr	r3, [pc, #180]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    3a08:	899b      	ldrh	r3, [r3, #12]
    3a0a:	4a2d      	ldr	r2, [pc, #180]	; (3ac0 <_usb_ep0_on_tansfer_ok+0xdc>)
    3a0c:	8814      	ldrh	r4, [r2, #0]
    3a0e:	1962      	adds	r2, r4, r5
    3a10:	4293      	cmp	r3, r2
    3a12:	da01      	bge.n	3a18 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3a14:	1b1d      	subs	r5, r3, r4
    3a16:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    3a18:	4b28      	ldr	r3, [pc, #160]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    3a1a:	6898      	ldr	r0, [r3, #8]
    3a1c:	1900      	adds	r0, r0, r4
    3a1e:	002a      	movs	r2, r5
    3a20:	4928      	ldr	r1, [pc, #160]	; (3ac4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3a22:	4b29      	ldr	r3, [pc, #164]	; (3ac8 <_usb_ep0_on_tansfer_ok+0xe4>)
    3a24:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    3a26:	1964      	adds	r4, r4, r5
    3a28:	b2a4      	uxth	r4, r4
    3a2a:	4b25      	ldr	r3, [pc, #148]	; (3ac0 <_usb_ep0_on_tansfer_ok+0xdc>)
    3a2c:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3a2e:	2d40      	cmp	r5, #64	; 0x40
    3a30:	d00a      	beq.n	3a48 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    3a32:	4b22      	ldr	r3, [pc, #136]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    3a34:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    3a36:	695b      	ldr	r3, [r3, #20]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d002      	beq.n	3a42 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3a3c:	4798      	blx	r3
    3a3e:	2800      	cmp	r0, #0
    3a40:	d014      	beq.n	3a6c <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    3a42:	4b22      	ldr	r3, [pc, #136]	; (3acc <_usb_ep0_on_tansfer_ok+0xe8>)
    3a44:	4798      	blx	r3
    3a46:	e7dc      	b.n	3a02 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3a48:	4b1c      	ldr	r3, [pc, #112]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    3a4a:	88da      	ldrh	r2, [r3, #6]
    3a4c:	4b20      	ldr	r3, [pc, #128]	; (3ad0 <_usb_ep0_on_tansfer_ok+0xec>)
    3a4e:	881b      	ldrh	r3, [r3, #0]
    3a50:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    3a52:	429a      	cmp	r2, r3
    3a54:	dded      	ble.n	3a32 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    3a56:	4b19      	ldr	r3, [pc, #100]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    3a58:	899b      	ldrh	r3, [r3, #12]
    3a5a:	42a3      	cmp	r3, r4
    3a5c:	d00c      	beq.n	3a78 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3a5e:	2340      	movs	r3, #64	; 0x40
    3a60:	4a18      	ldr	r2, [pc, #96]	; (3ac4 <_usb_ep0_on_tansfer_ok+0xe0>)
    3a62:	2100      	movs	r1, #0
    3a64:	481b      	ldr	r0, [pc, #108]	; (3ad4 <_usb_ep0_on_tansfer_ok+0xf0>)
    3a66:	4c1c      	ldr	r4, [pc, #112]	; (3ad8 <_usb_ep0_on_tansfer_ok+0xf4>)
    3a68:	47a0      	blx	r4
    3a6a:	e7ca      	b.n	3a02 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a6c:	2205      	movs	r2, #5
    3a6e:	4b12      	ldr	r3, [pc, #72]	; (3ab8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3a70:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    3a72:	4b1a      	ldr	r3, [pc, #104]	; (3adc <_usb_ep0_on_tansfer_ok+0xf8>)
    3a74:	4798      	blx	r3
    3a76:	e7c4      	b.n	3a02 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3a78:	4b10      	ldr	r3, [pc, #64]	; (3abc <_usb_ep0_on_tansfer_ok+0xd8>)
    3a7a:	695b      	ldr	r3, [r3, #20]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d00b      	beq.n	3a98 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3a80:	4798      	blx	r3
    3a82:	2800      	cmp	r0, #0
    3a84:	d00f      	beq.n	3aa6 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3a86:	4912      	ldr	r1, [pc, #72]	; (3ad0 <_usb_ep0_on_tansfer_ok+0xec>)
    3a88:	4a0d      	ldr	r2, [pc, #52]	; (3ac0 <_usb_ep0_on_tansfer_ok+0xdc>)
    3a8a:	880b      	ldrh	r3, [r1, #0]
    3a8c:	8810      	ldrh	r0, [r2, #0]
    3a8e:	181b      	adds	r3, r3, r0
    3a90:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    3a92:	2300      	movs	r3, #0
    3a94:	8013      	strh	r3, [r2, #0]
    3a96:	e7e2      	b.n	3a5e <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3a98:	2205      	movs	r2, #5
    3a9a:	4b07      	ldr	r3, [pc, #28]	; (3ab8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3a9c:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3a9e:	2000      	movs	r0, #0
    3aa0:	4b0e      	ldr	r3, [pc, #56]	; (3adc <_usb_ep0_on_tansfer_ok+0xf8>)
    3aa2:	4798      	blx	r3
    3aa4:	e7ad      	b.n	3a02 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3aa6:	2205      	movs	r2, #5
    3aa8:	4b03      	ldr	r3, [pc, #12]	; (3ab8 <_usb_ep0_on_tansfer_ok+0xd4>)
    3aaa:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3aac:	4b0b      	ldr	r3, [pc, #44]	; (3adc <_usb_ep0_on_tansfer_ok+0xf8>)
    3aae:	4798      	blx	r3
    3ab0:	e7a7      	b.n	3a02 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    3ab2:	4b0b      	ldr	r3, [pc, #44]	; (3ae0 <_usb_ep0_on_tansfer_ok+0xfc>)
    3ab4:	4798      	blx	r3
    3ab6:	e7a4      	b.n	3a02 <_usb_ep0_on_tansfer_ok+0x1e>
    3ab8:	20000262 	.word	0x20000262
    3abc:	200005c4 	.word	0x200005c4
    3ac0:	2000025e 	.word	0x2000025e
    3ac4:	200005dc 	.word	0x200005dc
    3ac8:	000094b1 	.word	0x000094b1
    3acc:	00003591 	.word	0x00003591
    3ad0:	20000260 	.word	0x20000260
    3ad4:	2000045c 	.word	0x2000045c
    3ad8:	00006d99 	.word	0x00006d99
    3adc:	000039b5 	.word	0x000039b5
    3ae0:	00003621 	.word	0x00003621

00003ae4 <udd_ep_clear_halt>:
{
    3ae4:	b570      	push	{r4, r5, r6, lr}
    3ae6:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3ae8:	230f      	movs	r3, #15
    3aea:	4003      	ands	r3, r0
		return false;
    3aec:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3aee:	2b02      	cmp	r3, #2
    3af0:	d900      	bls.n	3af4 <udd_ep_clear_halt+0x10>
}
    3af2:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    3af4:	0020      	movs	r0, r4
    3af6:	4b09      	ldr	r3, [pc, #36]	; (3b1c <udd_ep_clear_halt+0x38>)
    3af8:	4798      	blx	r3
    3afa:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    3afc:	0021      	movs	r1, r4
    3afe:	4808      	ldr	r0, [pc, #32]	; (3b20 <udd_ep_clear_halt+0x3c>)
    3b00:	4b08      	ldr	r3, [pc, #32]	; (3b24 <udd_ep_clear_halt+0x40>)
    3b02:	4798      	blx	r3
	if (ptr_job->busy == true) {
    3b04:	7cab      	ldrb	r3, [r5, #18]
	return true;
    3b06:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    3b08:	07db      	lsls	r3, r3, #31
    3b0a:	d5f2      	bpl.n	3af2 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    3b0c:	7cab      	ldrb	r3, [r5, #18]
    3b0e:	2201      	movs	r2, #1
    3b10:	4393      	bics	r3, r2
    3b12:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    3b14:	682b      	ldr	r3, [r5, #0]
    3b16:	4798      	blx	r3
	return true;
    3b18:	2001      	movs	r0, #1
    3b1a:	e7ea      	b.n	3af2 <udd_ep_clear_halt+0xe>
    3b1c:	00003239 	.word	0x00003239
    3b20:	2000045c 	.word	0x2000045c
    3b24:	00006cbf 	.word	0x00006cbf

00003b28 <udd_ep_wait_stall_clear>:
{
    3b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b2a:	0004      	movs	r4, r0
    3b2c:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    3b2e:	230f      	movs	r3, #15
    3b30:	4003      	ands	r3, r0
		return false;
    3b32:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3b34:	2b02      	cmp	r3, #2
    3b36:	d805      	bhi.n	3b44 <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3b38:	4b0d      	ldr	r3, [pc, #52]	; (3b70 <udd_ep_wait_stall_clear+0x48>)
    3b3a:	4798      	blx	r3
    3b3c:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    3b3e:	7c83      	ldrb	r3, [r0, #18]
    3b40:	07db      	lsls	r3, r3, #31
    3b42:	d501      	bpl.n	3b48 <udd_ep_wait_stall_clear+0x20>
}
    3b44:	0030      	movs	r0, r6
    3b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3b48:	0021      	movs	r1, r4
    3b4a:	480a      	ldr	r0, [pc, #40]	; (3b74 <udd_ep_wait_stall_clear+0x4c>)
    3b4c:	4b0a      	ldr	r3, [pc, #40]	; (3b78 <udd_ep_wait_stall_clear+0x50>)
    3b4e:	4798      	blx	r3
    3b50:	1e06      	subs	r6, r0, #0
    3b52:	d005      	beq.n	3b60 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    3b54:	7cbb      	ldrb	r3, [r7, #18]
    3b56:	2201      	movs	r2, #1
    3b58:	4313      	orrs	r3, r2
    3b5a:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3b5c:	603d      	str	r5, [r7, #0]
		return true;
    3b5e:	e7f1      	b.n	3b44 <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3b60:	0021      	movs	r1, r4
    3b62:	4804      	ldr	r0, [pc, #16]	; (3b74 <udd_ep_wait_stall_clear+0x4c>)
    3b64:	4b05      	ldr	r3, [pc, #20]	; (3b7c <udd_ep_wait_stall_clear+0x54>)
    3b66:	4798      	blx	r3
    3b68:	1e06      	subs	r6, r0, #0
    3b6a:	d0eb      	beq.n	3b44 <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3b6c:	47a8      	blx	r5
		return true;
    3b6e:	e7e9      	b.n	3b44 <udd_ep_wait_stall_clear+0x1c>
    3b70:	00003239 	.word	0x00003239
    3b74:	2000045c 	.word	0x2000045c
    3b78:	00006c6f 	.word	0x00006c6f
    3b7c:	00006c0d 	.word	0x00006c0d

00003b80 <udd_ep_run>:
{
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b82:	b087      	sub	sp, #28
    3b84:	0005      	movs	r5, r0
    3b86:	9103      	str	r1, [sp, #12]
    3b88:	9202      	str	r2, [sp, #8]
    3b8a:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3b8c:	260f      	movs	r6, #15
    3b8e:	4006      	ands	r6, r0
		return false;
    3b90:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3b92:	2e02      	cmp	r6, #2
    3b94:	d902      	bls.n	3b9c <udd_ep_run+0x1c>
}
    3b96:	0020      	movs	r0, r4
    3b98:	b007      	add	sp, #28
    3b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3b9c:	4b64      	ldr	r3, [pc, #400]	; (3d30 <udd_ep_run+0x1b0>)
    3b9e:	4798      	blx	r3
    3ba0:	1e04      	subs	r4, r0, #0
    3ba2:	d000      	beq.n	3ba6 <udd_ep_run+0x26>
    3ba4:	e0bd      	b.n	3d22 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    3ba6:	0028      	movs	r0, r5
    3ba8:	4b62      	ldr	r3, [pc, #392]	; (3d34 <udd_ep_run+0x1b4>)
    3baa:	4798      	blx	r3
    3bac:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3bae:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3bb2:	425a      	negs	r2, r3
    3bb4:	4153      	adcs	r3, r2
    3bb6:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3bb8:	b672      	cpsid	i
    3bba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3bbe:	2200      	movs	r2, #0
    3bc0:	4b5d      	ldr	r3, [pc, #372]	; (3d38 <udd_ep_run+0x1b8>)
    3bc2:	701a      	strb	r2, [r3, #0]
	return flags;
    3bc4:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    3bc6:	7c83      	ldrb	r3, [r0, #18]
    3bc8:	07db      	lsls	r3, r3, #31
    3bca:	d508      	bpl.n	3bde <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3bcc:	2a00      	cmp	r2, #0
    3bce:	d0e2      	beq.n	3b96 <udd_ep_run+0x16>
		cpu_irq_enable();
    3bd0:	2201      	movs	r2, #1
    3bd2:	4b59      	ldr	r3, [pc, #356]	; (3d38 <udd_ep_run+0x1b8>)
    3bd4:	701a      	strb	r2, [r3, #0]
    3bd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3bda:	b662      	cpsie	i
    3bdc:	e7db      	b.n	3b96 <udd_ep_run+0x16>
	ptr_job->busy = true;
    3bde:	7c83      	ldrb	r3, [r0, #18]
    3be0:	2101      	movs	r1, #1
    3be2:	430b      	orrs	r3, r1
    3be4:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    3be6:	2a00      	cmp	r2, #0
    3be8:	d005      	beq.n	3bf6 <udd_ep_run+0x76>
		cpu_irq_enable();
    3bea:	2201      	movs	r2, #1
    3bec:	4b52      	ldr	r3, [pc, #328]	; (3d38 <udd_ep_run+0x1b8>)
    3bee:	701a      	strb	r2, [r3, #0]
    3bf0:	f3bf 8f5f 	dmb	sy
    3bf4:	b662      	cpsie	i
	ptr_job->buf = buf;
    3bf6:	9b02      	ldr	r3, [sp, #8]
    3bf8:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    3bfa:	9b01      	ldr	r3, [sp, #4]
    3bfc:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    3bfe:	2300      	movs	r3, #0
    3c00:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    3c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c04:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    3c06:	2301      	movs	r3, #1
    3c08:	9a03      	ldr	r2, [sp, #12]
    3c0a:	4013      	ands	r3, r2
    3c0c:	005a      	lsls	r2, r3, #1
    3c0e:	7cbb      	ldrb	r3, [r7, #18]
    3c10:	2102      	movs	r1, #2
    3c12:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    3c14:	4313      	orrs	r3, r2
    3c16:	2204      	movs	r2, #4
    3c18:	4393      	bics	r3, r2
    3c1a:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    3c1c:	b26b      	sxtb	r3, r5
    3c1e:	2b00      	cmp	r3, #0
    3c20:	db20      	blt.n	3c64 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    3c22:	9b01      	ldr	r3, [sp, #4]
    3c24:	2b00      	cmp	r3, #0
    3c26:	d06f      	beq.n	3d08 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    3c28:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3c2a:	4b44      	ldr	r3, [pc, #272]	; (3d3c <udd_ep_run+0x1bc>)
    3c2c:	429c      	cmp	r4, r3
    3c2e:	d95a      	bls.n	3ce6 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3c30:	8a39      	ldrh	r1, [r7, #16]
    3c32:	001c      	movs	r4, r3
    3c34:	0018      	movs	r0, r3
    3c36:	4b42      	ldr	r3, [pc, #264]	; (3d40 <udd_ep_run+0x1c0>)
    3c38:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3c3a:	1a63      	subs	r3, r4, r1
    3c3c:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3c3e:	8a3b      	ldrh	r3, [r7, #16]
    3c40:	429a      	cmp	r2, r3
    3c42:	d257      	bcs.n	3cf4 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    3c44:	7cba      	ldrb	r2, [r7, #18]
    3c46:	2104      	movs	r1, #4
    3c48:	430a      	orrs	r2, r1
    3c4a:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3c4c:	1e72      	subs	r2, r6, #1
    3c4e:	0192      	lsls	r2, r2, #6
    3c50:	493c      	ldr	r1, [pc, #240]	; (3d44 <udd_ep_run+0x1c4>)
    3c52:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3c54:	0031      	movs	r1, r6
    3c56:	483c      	ldr	r0, [pc, #240]	; (3d48 <udd_ep_run+0x1c8>)
    3c58:	4c3c      	ldr	r4, [pc, #240]	; (3d4c <udd_ep_run+0x1cc>)
    3c5a:	47a0      	blx	r4
				return (STATUS_OK ==
    3c5c:	4244      	negs	r4, r0
    3c5e:	4144      	adcs	r4, r0
    3c60:	b2e4      	uxtb	r4, r4
    3c62:	e798      	b.n	3b96 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    3c64:	9b01      	ldr	r3, [sp, #4]
    3c66:	2b00      	cmp	r3, #0
    3c68:	d027      	beq.n	3cba <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3c6a:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3c6c:	4b33      	ldr	r3, [pc, #204]	; (3d3c <udd_ep_run+0x1bc>)
    3c6e:	429d      	cmp	r5, r3
    3c70:	d906      	bls.n	3c80 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    3c72:	8a39      	ldrh	r1, [r7, #16]
    3c74:	001d      	movs	r5, r3
    3c76:	0018      	movs	r0, r3
    3c78:	4b31      	ldr	r3, [pc, #196]	; (3d40 <udd_ep_run+0x1c0>)
    3c7a:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3c7c:	1a6b      	subs	r3, r5, r1
    3c7e:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3c80:	7cbb      	ldrb	r3, [r7, #18]
    3c82:	079b      	lsls	r3, r3, #30
    3c84:	d507      	bpl.n	3c96 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    3c86:	8a39      	ldrh	r1, [r7, #16]
    3c88:	0028      	movs	r0, r5
    3c8a:	4b31      	ldr	r3, [pc, #196]	; (3d50 <udd_ep_run+0x1d0>)
    3c8c:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3c8e:	b289      	uxth	r1, r1
    3c90:	424c      	negs	r4, r1
    3c92:	414c      	adcs	r4, r1
    3c94:	b2e4      	uxtb	r4, r4
    3c96:	2001      	movs	r0, #1
    3c98:	4020      	ands	r0, r4
    3c9a:	0040      	lsls	r0, r0, #1
    3c9c:	7cbc      	ldrb	r4, [r7, #18]
    3c9e:	2302      	movs	r3, #2
    3ca0:	439c      	bics	r4, r3
    3ca2:	4304      	orrs	r4, r0
    3ca4:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    3ca6:	002b      	movs	r3, r5
    3ca8:	9a02      	ldr	r2, [sp, #8]
    3caa:	0031      	movs	r1, r6
    3cac:	4826      	ldr	r0, [pc, #152]	; (3d48 <udd_ep_run+0x1c8>)
    3cae:	4c29      	ldr	r4, [pc, #164]	; (3d54 <udd_ep_run+0x1d4>)
    3cb0:	47a0      	blx	r4
		return (STATUS_OK ==
    3cb2:	4244      	negs	r4, r0
    3cb4:	4144      	adcs	r4, r0
    3cb6:	b2e4      	uxtb	r4, r4
    3cb8:	e76d      	b.n	3b96 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3cba:	7cbb      	ldrb	r3, [r7, #18]
    3cbc:	079b      	lsls	r3, r3, #30
    3cbe:	d505      	bpl.n	3ccc <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3cc0:	7cbb      	ldrb	r3, [r7, #18]
    3cc2:	2202      	movs	r2, #2
    3cc4:	4393      	bics	r3, r2
    3cc6:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3cc8:	2500      	movs	r5, #0
    3cca:	e7ec      	b.n	3ca6 <udd_ep_run+0x126>
			ptr_job->busy = false;
    3ccc:	7cbb      	ldrb	r3, [r7, #18]
    3cce:	2201      	movs	r2, #1
    3cd0:	4393      	bics	r3, r2
    3cd2:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d025      	beq.n	3d26 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3cda:	002a      	movs	r2, r5
    3cdc:	2100      	movs	r1, #0
    3cde:	2000      	movs	r0, #0
    3ce0:	4798      	blx	r3
			return true;
    3ce2:	2401      	movs	r4, #1
    3ce4:	e757      	b.n	3b96 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    3ce6:	8a39      	ldrh	r1, [r7, #16]
    3ce8:	0020      	movs	r0, r4
    3cea:	4b19      	ldr	r3, [pc, #100]	; (3d50 <udd_ep_run+0x1d0>)
    3cec:	4798      	blx	r3
    3cee:	1a63      	subs	r3, r4, r1
    3cf0:	b29a      	uxth	r2, r3
    3cf2:	e7a4      	b.n	3c3e <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    3cf4:	0013      	movs	r3, r2
    3cf6:	9a02      	ldr	r2, [sp, #8]
    3cf8:	0031      	movs	r1, r6
    3cfa:	4813      	ldr	r0, [pc, #76]	; (3d48 <udd_ep_run+0x1c8>)
    3cfc:	4c13      	ldr	r4, [pc, #76]	; (3d4c <udd_ep_run+0x1cc>)
    3cfe:	47a0      	blx	r4
				return (STATUS_OK ==
    3d00:	4244      	negs	r4, r0
    3d02:	4144      	adcs	r4, r0
    3d04:	b2e4      	uxtb	r4, r4
    3d06:	e746      	b.n	3b96 <udd_ep_run+0x16>
			ptr_job->busy = false;
    3d08:	7cbb      	ldrb	r3, [r7, #18]
    3d0a:	2201      	movs	r2, #1
    3d0c:	4393      	bics	r3, r2
    3d0e:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    3d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d12:	2b00      	cmp	r3, #0
    3d14:	d009      	beq.n	3d2a <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    3d16:	002a      	movs	r2, r5
    3d18:	2100      	movs	r1, #0
    3d1a:	2000      	movs	r0, #0
    3d1c:	4798      	blx	r3
			return true;
    3d1e:	2401      	movs	r4, #1
    3d20:	e739      	b.n	3b96 <udd_ep_run+0x16>
		return false;
    3d22:	2400      	movs	r4, #0
    3d24:	e737      	b.n	3b96 <udd_ep_run+0x16>
			return true;
    3d26:	2401      	movs	r4, #1
    3d28:	e735      	b.n	3b96 <udd_ep_run+0x16>
			return true;
    3d2a:	2401      	movs	r4, #1
    3d2c:	e733      	b.n	3b96 <udd_ep_run+0x16>
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	000039a1 	.word	0x000039a1
    3d34:	00003239 	.word	0x00003239
    3d38:	20000125 	.word	0x20000125
    3d3c:	00001fff 	.word	0x00001fff
    3d40:	000091b5 	.word	0x000091b5
    3d44:	200003dc 	.word	0x200003dc
    3d48:	2000045c 	.word	0x2000045c
    3d4c:	00006d99 	.word	0x00006d99
    3d50:	00008fe1 	.word	0x00008fe1
    3d54:	00006d45 	.word	0x00006d45

00003d58 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3d58:	4b02      	ldr	r3, [pc, #8]	; (3d64 <udd_set_address+0xc>)
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	2280      	movs	r2, #128	; 0x80
    3d5e:	4310      	orrs	r0, r2
    3d60:	7298      	strb	r0, [r3, #10]
}
    3d62:	4770      	bx	lr
    3d64:	2000045c 	.word	0x2000045c

00003d68 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3d68:	4b02      	ldr	r3, [pc, #8]	; (3d74 <udd_getaddress+0xc>)
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	7a98      	ldrb	r0, [r3, #10]
    3d6e:	0640      	lsls	r0, r0, #25
    3d70:	0e40      	lsrs	r0, r0, #25
}
    3d72:	4770      	bx	lr
    3d74:	2000045c 	.word	0x2000045c

00003d78 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3d78:	4b01      	ldr	r3, [pc, #4]	; (3d80 <udd_set_setup_payload+0x8>)
    3d7a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3d7c:	8199      	strh	r1, [r3, #12]
}
    3d7e:	4770      	bx	lr
    3d80:	200005c4 	.word	0x200005c4

00003d84 <udd_detach>:

void udd_detach(void)
{
    3d84:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    3d86:	4b05      	ldr	r3, [pc, #20]	; (3d9c <udd_detach+0x18>)
    3d88:	681a      	ldr	r2, [r3, #0]
    3d8a:	8913      	ldrh	r3, [r2, #8]
    3d8c:	2101      	movs	r1, #1
    3d8e:	430b      	orrs	r3, r1
    3d90:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3d92:	2001      	movs	r0, #1
    3d94:	4b02      	ldr	r3, [pc, #8]	; (3da0 <udd_detach+0x1c>)
    3d96:	4798      	blx	r3
}
    3d98:	bd10      	pop	{r4, pc}
    3d9a:	46c0      	nop			; (mov r8, r8)
    3d9c:	2000045c 	.word	0x2000045c
    3da0:	00003179 	.word	0x00003179

00003da4 <udd_attach>:

void udd_attach(void)
{
    3da4:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    3da6:	2003      	movs	r0, #3
    3da8:	4b16      	ldr	r3, [pc, #88]	; (3e04 <udd_attach+0x60>)
    3daa:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3dac:	4c16      	ldr	r4, [pc, #88]	; (3e08 <udd_attach+0x64>)
    3dae:	6822      	ldr	r2, [r4, #0]
    3db0:	8913      	ldrh	r3, [r2, #8]
    3db2:	2101      	movs	r1, #1
    3db4:	438b      	bics	r3, r1
    3db6:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3db8:	4a14      	ldr	r2, [pc, #80]	; (3e0c <udd_attach+0x68>)
    3dba:	3103      	adds	r1, #3
    3dbc:	0020      	movs	r0, r4
    3dbe:	4e14      	ldr	r6, [pc, #80]	; (3e10 <udd_attach+0x6c>)
    3dc0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3dc2:	4a14      	ldr	r2, [pc, #80]	; (3e14 <udd_attach+0x70>)
    3dc4:	2100      	movs	r1, #0
    3dc6:	0020      	movs	r0, r4
    3dc8:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3dca:	4a13      	ldr	r2, [pc, #76]	; (3e18 <udd_attach+0x74>)
    3dcc:	2101      	movs	r1, #1
    3dce:	0020      	movs	r0, r4
    3dd0:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3dd2:	4a12      	ldr	r2, [pc, #72]	; (3e1c <udd_attach+0x78>)
    3dd4:	2102      	movs	r1, #2
    3dd6:	0020      	movs	r0, r4
    3dd8:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3dda:	2104      	movs	r1, #4
    3ddc:	0020      	movs	r0, r4
    3dde:	4d10      	ldr	r5, [pc, #64]	; (3e20 <udd_attach+0x7c>)
    3de0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3de2:	2100      	movs	r1, #0
    3de4:	0020      	movs	r0, r4
    3de6:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    3de8:	2101      	movs	r1, #1
    3dea:	0020      	movs	r0, r4
    3dec:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3dee:	2102      	movs	r1, #2
    3df0:	0020      	movs	r0, r4
    3df2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3df4:	4a0b      	ldr	r2, [pc, #44]	; (3e24 <udd_attach+0x80>)
    3df6:	2106      	movs	r1, #6
    3df8:	0020      	movs	r0, r4
    3dfa:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3dfc:	2106      	movs	r1, #6
    3dfe:	0020      	movs	r0, r4
    3e00:	47a8      	blx	r5
#endif
}
    3e02:	bd70      	pop	{r4, r5, r6, pc}
    3e04:	00003179 	.word	0x00003179
    3e08:	2000045c 	.word	0x2000045c
    3e0c:	000037c1 	.word	0x000037c1
    3e10:	00006769 	.word	0x00006769
    3e14:	000037ad 	.word	0x000037ad
    3e18:	000034e1 	.word	0x000034e1
    3e1c:	00003471 	.word	0x00003471
    3e20:	0000678d 	.word	0x0000678d
    3e24:	0000343d 	.word	0x0000343d

00003e28 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    3e28:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3e2a:	2100      	movs	r1, #0
    3e2c:	200e      	movs	r0, #14
    3e2e:	4b08      	ldr	r3, [pc, #32]	; (3e50 <_uhd_vbus_handler+0x28>)
    3e30:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    3e32:	4b08      	ldr	r3, [pc, #32]	; (3e54 <_uhd_vbus_handler+0x2c>)
    3e34:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    3e36:	045b      	lsls	r3, r3, #17
    3e38:	d406      	bmi.n	3e48 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3e3a:	4b07      	ldr	r3, [pc, #28]	; (3e58 <_uhd_vbus_handler+0x30>)
    3e3c:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3e3e:	2100      	movs	r1, #0
    3e40:	200e      	movs	r0, #14
    3e42:	4b06      	ldr	r3, [pc, #24]	; (3e5c <_uhd_vbus_handler+0x34>)
    3e44:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3e46:	bd10      	pop	{r4, pc}
		udd_attach();
    3e48:	4b05      	ldr	r3, [pc, #20]	; (3e60 <_uhd_vbus_handler+0x38>)
    3e4a:	4798      	blx	r3
    3e4c:	e7f7      	b.n	3e3e <_uhd_vbus_handler+0x16>
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	00007651 	.word	0x00007651
    3e54:	41004400 	.word	0x41004400
    3e58:	00003d85 	.word	0x00003d85
    3e5c:	00007631 	.word	0x00007631
    3e60:	00003da5 	.word	0x00003da5

00003e64 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3e64:	b570      	push	{r4, r5, r6, lr}
    3e66:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3e68:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3e6c:	425a      	negs	r2, r3
    3e6e:	4153      	adcs	r3, r2
    3e70:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3e72:	b672      	cpsid	i
    3e74:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3e78:	2600      	movs	r6, #0
    3e7a:	4b29      	ldr	r3, [pc, #164]	; (3f20 <udd_enable+0xbc>)
    3e7c:	701e      	strb	r6, [r3, #0]
	return flags;
    3e7e:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3e80:	ac05      	add	r4, sp, #20
    3e82:	0020      	movs	r0, r4
    3e84:	4b27      	ldr	r3, [pc, #156]	; (3f24 <udd_enable+0xc0>)
    3e86:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3e88:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3e8a:	4e27      	ldr	r6, [pc, #156]	; (3f28 <udd_enable+0xc4>)
    3e8c:	0022      	movs	r2, r4
    3e8e:	4927      	ldr	r1, [pc, #156]	; (3f2c <udd_enable+0xc8>)
    3e90:	0030      	movs	r0, r6
    3e92:	4b27      	ldr	r3, [pc, #156]	; (3f30 <udd_enable+0xcc>)
    3e94:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3e96:	0030      	movs	r0, r6
    3e98:	4b26      	ldr	r3, [pc, #152]	; (3f34 <udd_enable+0xd0>)
    3e9a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3e9c:	4b26      	ldr	r3, [pc, #152]	; (3f38 <udd_enable+0xd4>)
    3e9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3ea0:	069b      	lsls	r3, r3, #26
    3ea2:	d434      	bmi.n	3f0e <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3ea4:	4924      	ldr	r1, [pc, #144]	; (3f38 <udd_enable+0xd4>)
    3ea6:	22d0      	movs	r2, #208	; 0xd0
    3ea8:	68cb      	ldr	r3, [r1, #12]
    3eaa:	4013      	ands	r3, r2
    3eac:	2bd0      	cmp	r3, #208	; 0xd0
    3eae:	d1fb      	bne.n	3ea8 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3eb0:	2001      	movs	r0, #1
    3eb2:	4b22      	ldr	r3, [pc, #136]	; (3f3c <udd_enable+0xd8>)
    3eb4:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3eb6:	ac02      	add	r4, sp, #8
    3eb8:	0020      	movs	r0, r4
    3eba:	4b21      	ldr	r3, [pc, #132]	; (3f40 <udd_enable+0xdc>)
    3ebc:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3ebe:	230e      	movs	r3, #14
    3ec0:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3ec2:	2300      	movs	r3, #0
    3ec4:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3ec6:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3ec8:	3303      	adds	r3, #3
    3eca:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3ecc:	3b02      	subs	r3, #2
    3ece:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3ed0:	2100      	movs	r1, #0
    3ed2:	200e      	movs	r0, #14
    3ed4:	4b1b      	ldr	r3, [pc, #108]	; (3f44 <udd_enable+0xe0>)
    3ed6:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3ed8:	0021      	movs	r1, r4
    3eda:	200e      	movs	r0, #14
    3edc:	4b1a      	ldr	r3, [pc, #104]	; (3f48 <udd_enable+0xe4>)
    3ede:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3ee0:	2200      	movs	r2, #0
    3ee2:	210e      	movs	r1, #14
    3ee4:	4819      	ldr	r0, [pc, #100]	; (3f4c <udd_enable+0xe8>)
    3ee6:	4b1a      	ldr	r3, [pc, #104]	; (3f50 <udd_enable+0xec>)
    3ee8:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3eea:	2100      	movs	r1, #0
    3eec:	200e      	movs	r0, #14
    3eee:	4b19      	ldr	r3, [pc, #100]	; (3f54 <udd_enable+0xf0>)
    3ef0:	4798      	blx	r3
    3ef2:	4b19      	ldr	r3, [pc, #100]	; (3f58 <udd_enable+0xf4>)
    3ef4:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3ef6:	045b      	lsls	r3, r3, #17
    3ef8:	d40f      	bmi.n	3f1a <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3efa:	2d00      	cmp	r5, #0
    3efc:	d005      	beq.n	3f0a <udd_enable+0xa6>
		cpu_irq_enable();
    3efe:	2201      	movs	r2, #1
    3f00:	4b07      	ldr	r3, [pc, #28]	; (3f20 <udd_enable+0xbc>)
    3f02:	701a      	strb	r2, [r3, #0]
    3f04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3f08:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3f0a:	b006      	add	sp, #24
    3f0c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3f0e:	490a      	ldr	r1, [pc, #40]	; (3f38 <udd_enable+0xd4>)
    3f10:	2210      	movs	r2, #16
    3f12:	68cb      	ldr	r3, [r1, #12]
    3f14:	421a      	tst	r2, r3
    3f16:	d0fc      	beq.n	3f12 <udd_enable+0xae>
    3f18:	e7ca      	b.n	3eb0 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3f1a:	4b0c      	ldr	r3, [pc, #48]	; (3f4c <udd_enable+0xe8>)
    3f1c:	4798      	blx	r3
    3f1e:	e7ec      	b.n	3efa <udd_enable+0x96>
    3f20:	20000125 	.word	0x20000125
    3f24:	000073f5 	.word	0x000073f5
    3f28:	2000045c 	.word	0x2000045c
    3f2c:	41005000 	.word	0x41005000
    3f30:	00007405 	.word	0x00007405
    3f34:	00006e19 	.word	0x00006e19
    3f38:	40000800 	.word	0x40000800
    3f3c:	00003179 	.word	0x00003179
    3f40:	00002231 	.word	0x00002231
    3f44:	00007651 	.word	0x00007651
    3f48:	00002245 	.word	0x00002245
    3f4c:	00003e29 	.word	0x00003e29
    3f50:	00007605 	.word	0x00007605
    3f54:	00007631 	.word	0x00007631
    3f58:	41004400 	.word	0x41004400

00003f5c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5e:	46c6      	mov	lr, r8
    3f60:	b500      	push	{lr}
    3f62:	000c      	movs	r4, r1
    3f64:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3f66:	2800      	cmp	r0, #0
    3f68:	d10f      	bne.n	3f8a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3f6a:	2a00      	cmp	r2, #0
    3f6c:	dd11      	ble.n	3f92 <_read+0x36>
    3f6e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3f70:	4e09      	ldr	r6, [pc, #36]	; (3f98 <_read+0x3c>)
    3f72:	4d0a      	ldr	r5, [pc, #40]	; (3f9c <_read+0x40>)
    3f74:	6830      	ldr	r0, [r6, #0]
    3f76:	0021      	movs	r1, r4
    3f78:	682b      	ldr	r3, [r5, #0]
    3f7a:	4798      	blx	r3
		ptr++;
    3f7c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3f7e:	42bc      	cmp	r4, r7
    3f80:	d1f8      	bne.n	3f74 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3f82:	4640      	mov	r0, r8
    3f84:	bc04      	pop	{r2}
    3f86:	4690      	mov	r8, r2
    3f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3f8a:	2301      	movs	r3, #1
    3f8c:	425b      	negs	r3, r3
    3f8e:	4698      	mov	r8, r3
    3f90:	e7f7      	b.n	3f82 <_read+0x26>
	for (; len > 0; --len) {
    3f92:	4680      	mov	r8, r0
    3f94:	e7f5      	b.n	3f82 <_read+0x26>
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	20000624 	.word	0x20000624
    3f9c:	2000061c 	.word	0x2000061c

00003fa0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fa2:	46c6      	mov	lr, r8
    3fa4:	b500      	push	{lr}
    3fa6:	000e      	movs	r6, r1
    3fa8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3faa:	3801      	subs	r0, #1
    3fac:	2802      	cmp	r0, #2
    3fae:	d810      	bhi.n	3fd2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3fb0:	2a00      	cmp	r2, #0
    3fb2:	d011      	beq.n	3fd8 <_write+0x38>
    3fb4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3fb6:	4b0c      	ldr	r3, [pc, #48]	; (3fe8 <_write+0x48>)
    3fb8:	4698      	mov	r8, r3
    3fba:	4f0c      	ldr	r7, [pc, #48]	; (3fec <_write+0x4c>)
    3fbc:	4643      	mov	r3, r8
    3fbe:	6818      	ldr	r0, [r3, #0]
    3fc0:	5d31      	ldrb	r1, [r6, r4]
    3fc2:	683b      	ldr	r3, [r7, #0]
    3fc4:	4798      	blx	r3
    3fc6:	2800      	cmp	r0, #0
    3fc8:	db08      	blt.n	3fdc <_write+0x3c>
			return -1;
		}
		++nChars;
    3fca:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3fcc:	42a5      	cmp	r5, r4
    3fce:	d1f5      	bne.n	3fbc <_write+0x1c>
    3fd0:	e006      	b.n	3fe0 <_write+0x40>
		return -1;
    3fd2:	2401      	movs	r4, #1
    3fd4:	4264      	negs	r4, r4
    3fd6:	e003      	b.n	3fe0 <_write+0x40>
	for (; len != 0; --len) {
    3fd8:	0014      	movs	r4, r2
    3fda:	e001      	b.n	3fe0 <_write+0x40>
			return -1;
    3fdc:	2401      	movs	r4, #1
    3fde:	4264      	negs	r4, r4
	}
	return nChars;
}
    3fe0:	0020      	movs	r0, r4
    3fe2:	bc04      	pop	{r2}
    3fe4:	4690      	mov	r8, r2
    3fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fe8:	20000624 	.word	0x20000624
    3fec:	20000620 	.word	0x20000620

00003ff0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3ff0:	b530      	push	{r4, r5, lr}
    3ff2:	b087      	sub	sp, #28
    3ff4:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3ff6:	aa01      	add	r2, sp, #4
    3ff8:	23a0      	movs	r3, #160	; 0xa0
    3ffa:	011b      	lsls	r3, r3, #4
    3ffc:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3ffe:	2300      	movs	r3, #0
    4000:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    4002:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    4004:	21fa      	movs	r1, #250	; 0xfa
    4006:	00c9      	lsls	r1, r1, #3
    4008:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    400a:	2101      	movs	r1, #1
    400c:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    400e:	2004      	movs	r0, #4
    4010:	7210      	strb	r0, [r2, #8]
    4012:	7253      	strb	r3, [r2, #9]
    4014:	7293      	strb	r3, [r2, #10]
    4016:	72d3      	strb	r3, [r2, #11]
    4018:	7311      	strb	r1, [r2, #12]
    401a:	7351      	strb	r1, [r2, #13]
    401c:	4b14      	ldr	r3, [pc, #80]	; (4070 <disk_initialize+0x80>)
    401e:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    4020:	2306      	movs	r3, #6
    4022:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    4024:	4d13      	ldr	r5, [pc, #76]	; (4074 <disk_initialize+0x84>)
    4026:	4914      	ldr	r1, [pc, #80]	; (4078 <disk_initialize+0x88>)
    4028:	0028      	movs	r0, r5
    402a:	4b14      	ldr	r3, [pc, #80]	; (407c <disk_initialize+0x8c>)
    402c:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    402e:	0028      	movs	r0, r5
    4030:	4b13      	ldr	r3, [pc, #76]	; (4080 <disk_initialize+0x90>)
    4032:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    4034:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    4036:	2c01      	cmp	r4, #1
    4038:	d901      	bls.n	403e <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    403a:	b007      	add	sp, #28
    403c:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    403e:	0020      	movs	r0, r4
    4040:	4b10      	ldr	r3, [pc, #64]	; (4084 <disk_initialize+0x94>)
    4042:	4798      	blx	r3
    4044:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    4046:	2803      	cmp	r0, #3
    4048:	d106      	bne.n	4058 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    404a:	0020      	movs	r0, r4
    404c:	4b0d      	ldr	r3, [pc, #52]	; (4084 <disk_initialize+0x94>)
    404e:	4798      	blx	r3
    4050:	0003      	movs	r3, r0
		return STA_NOINIT;
    4052:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    4054:	2b03      	cmp	r3, #3
    4056:	d0f0      	beq.n	403a <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    4058:	2b00      	cmp	r3, #0
    405a:	d106      	bne.n	406a <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    405c:	0020      	movs	r0, r4
    405e:	4b0a      	ldr	r3, [pc, #40]	; (4088 <disk_initialize+0x98>)
    4060:	4798      	blx	r3
	return 0;
    4062:	1e43      	subs	r3, r0, #1
    4064:	4198      	sbcs	r0, r3
    4066:	0080      	lsls	r0, r0, #2
    4068:	e7e7      	b.n	403a <disk_initialize+0x4a>
		return STA_NOINIT;
    406a:	2001      	movs	r0, #1
    406c:	e7e5      	b.n	403a <disk_initialize+0x4a>
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	000007de 	.word	0x000007de
    4074:	20000628 	.word	0x20000628
    4078:	40001400 	.word	0x40001400
    407c:	00002419 	.word	0x00002419
    4080:	000022bd 	.word	0x000022bd
    4084:	00008861 	.word	0x00008861
    4088:	000088ad 	.word	0x000088ad

0000408c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    408c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    408e:	4b05      	ldr	r3, [pc, #20]	; (40a4 <disk_status+0x18>)
    4090:	4798      	blx	r3
    4092:	1e03      	subs	r3, r0, #0
    4094:	d004      	beq.n	40a0 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    4096:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    4098:	2b02      	cmp	r3, #2
    409a:	d000      	beq.n	409e <disk_status+0x12>
	default:
		return STA_NOINIT;
    409c:	3802      	subs	r0, #2
	}
}
    409e:	bd10      	pop	{r4, pc}
		return 0;
    40a0:	2000      	movs	r0, #0
    40a2:	e7fc      	b.n	409e <disk_status+0x12>
    40a4:	00008861 	.word	0x00008861

000040a8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    40a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40aa:	46de      	mov	lr, fp
    40ac:	464f      	mov	r7, r9
    40ae:	4646      	mov	r6, r8
    40b0:	b5c0      	push	{r6, r7, lr}
    40b2:	b084      	sub	sp, #16
    40b4:	9001      	str	r0, [sp, #4]
    40b6:	000d      	movs	r5, r1
    40b8:	0014      	movs	r4, r2
    40ba:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    40bc:	4b18      	ldr	r3, [pc, #96]	; (4120 <disk_read+0x78>)
    40be:	4798      	blx	r3
    40c0:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    40c2:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    40c4:	2e00      	cmp	r6, #0
    40c6:	d105      	bne.n	40d4 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    40c8:	b004      	add	sp, #16
    40ca:	bc1c      	pop	{r2, r3, r4}
    40cc:	4690      	mov	r8, r2
    40ce:	4699      	mov	r9, r3
    40d0:	46a3      	mov	fp, r4
    40d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    40d4:	a903      	add	r1, sp, #12
    40d6:	9801      	ldr	r0, [sp, #4]
    40d8:	4b12      	ldr	r3, [pc, #72]	; (4124 <disk_read+0x7c>)
    40da:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    40dc:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    40de:	0032      	movs	r2, r6
    40e0:	437a      	muls	r2, r7
    40e2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    40e4:	9b03      	ldr	r3, [sp, #12]
    40e6:	3301      	adds	r3, #1
    40e8:	4373      	muls	r3, r6
		return RES_PARERR;
    40ea:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    40ec:	429a      	cmp	r2, r3
    40ee:	d8eb      	bhi.n	40c8 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    40f0:	2f00      	cmp	r7, #0
    40f2:	d011      	beq.n	4118 <disk_read+0x70>
    40f4:	0273      	lsls	r3, r6, #9
    40f6:	4698      	mov	r8, r3
    40f8:	1c7b      	adds	r3, r7, #1
    40fa:	469b      	mov	fp, r3
    40fc:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    40fe:	4e0a      	ldr	r6, [pc, #40]	; (4128 <disk_read+0x80>)
    4100:	002a      	movs	r2, r5
    4102:	0021      	movs	r1, r4
    4104:	9801      	ldr	r0, [sp, #4]
    4106:	47b0      	blx	r6
    4108:	2800      	cmp	r0, #0
    410a:	d107      	bne.n	411c <disk_read+0x74>
    410c:	3701      	adds	r7, #1
    410e:	444c      	add	r4, r9
    4110:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    4112:	455f      	cmp	r7, fp
    4114:	d1f4      	bne.n	4100 <disk_read+0x58>
    4116:	e7d7      	b.n	40c8 <disk_read+0x20>
	return RES_OK;
    4118:	2000      	movs	r0, #0
    411a:	e7d5      	b.n	40c8 <disk_read+0x20>
			return RES_ERROR;
    411c:	2001      	movs	r0, #1
    411e:	e7d3      	b.n	40c8 <disk_read+0x20>
    4120:	00008895 	.word	0x00008895
    4124:	00008879 	.word	0x00008879
    4128:	000088ed 	.word	0x000088ed

0000412c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    412c:	b5f0      	push	{r4, r5, r6, r7, lr}
    412e:	46de      	mov	lr, fp
    4130:	464f      	mov	r7, r9
    4132:	4646      	mov	r6, r8
    4134:	b5c0      	push	{r6, r7, lr}
    4136:	b084      	sub	sp, #16
    4138:	9001      	str	r0, [sp, #4]
    413a:	000d      	movs	r5, r1
    413c:	0014      	movs	r4, r2
    413e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    4140:	4b18      	ldr	r3, [pc, #96]	; (41a4 <disk_write+0x78>)
    4142:	4798      	blx	r3
    4144:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    4146:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    4148:	2e00      	cmp	r6, #0
    414a:	d105      	bne.n	4158 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    414c:	b004      	add	sp, #16
    414e:	bc1c      	pop	{r2, r3, r4}
    4150:	4690      	mov	r8, r2
    4152:	4699      	mov	r9, r3
    4154:	46a3      	mov	fp, r4
    4156:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    4158:	a903      	add	r1, sp, #12
    415a:	9801      	ldr	r0, [sp, #4]
    415c:	4b12      	ldr	r3, [pc, #72]	; (41a8 <disk_write+0x7c>)
    415e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    4160:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    4162:	0032      	movs	r2, r6
    4164:	437a      	muls	r2, r7
    4166:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    4168:	9b03      	ldr	r3, [sp, #12]
    416a:	3301      	adds	r3, #1
    416c:	4373      	muls	r3, r6
		return RES_PARERR;
    416e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    4170:	429a      	cmp	r2, r3
    4172:	d8eb      	bhi.n	414c <disk_write+0x20>
	for (i = 0; i < count; i++) {
    4174:	2f00      	cmp	r7, #0
    4176:	d011      	beq.n	419c <disk_write+0x70>
    4178:	0273      	lsls	r3, r6, #9
    417a:	4698      	mov	r8, r3
    417c:	1c7b      	adds	r3, r7, #1
    417e:	469b      	mov	fp, r3
    4180:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    4182:	4e0a      	ldr	r6, [pc, #40]	; (41ac <disk_write+0x80>)
    4184:	002a      	movs	r2, r5
    4186:	0021      	movs	r1, r4
    4188:	9801      	ldr	r0, [sp, #4]
    418a:	47b0      	blx	r6
    418c:	2800      	cmp	r0, #0
    418e:	d107      	bne.n	41a0 <disk_write+0x74>
    4190:	3701      	adds	r7, #1
    4192:	444c      	add	r4, r9
    4194:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    4196:	455f      	cmp	r7, fp
    4198:	d1f4      	bne.n	4184 <disk_write+0x58>
    419a:	e7d7      	b.n	414c <disk_write+0x20>
	return RES_OK;
    419c:	2000      	movs	r0, #0
    419e:	e7d5      	b.n	414c <disk_write+0x20>
			return RES_ERROR;
    41a0:	2001      	movs	r0, #1
    41a2:	e7d3      	b.n	414c <disk_write+0x20>
    41a4:	00008895 	.word	0x00008895
    41a8:	00008879 	.word	0x00008879
    41ac:	00008921 	.word	0x00008921

000041b0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    41b0:	b510      	push	{r4, lr}
    41b2:	b082      	sub	sp, #8
    41b4:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    41b6:	2901      	cmp	r1, #1
    41b8:	d00b      	beq.n	41d2 <disk_ioctl+0x22>
    41ba:	2900      	cmp	r1, #0
    41bc:	d020      	beq.n	4200 <disk_ioctl+0x50>
    41be:	2902      	cmp	r1, #2
    41c0:	d00f      	beq.n	41e2 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    41c2:	2004      	movs	r0, #4
	switch (ctrl) {
    41c4:	2903      	cmp	r1, #3
    41c6:	d102      	bne.n	41ce <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    41c8:	2301      	movs	r3, #1
    41ca:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    41cc:	2000      	movs	r0, #0
	}

	return res;
}
    41ce:	b002      	add	sp, #8
    41d0:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    41d2:	a901      	add	r1, sp, #4
    41d4:	4b0e      	ldr	r3, [pc, #56]	; (4210 <disk_ioctl+0x60>)
    41d6:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    41d8:	9b01      	ldr	r3, [sp, #4]
    41da:	3301      	adds	r3, #1
    41dc:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    41de:	2000      	movs	r0, #0
	break;
    41e0:	e7f5      	b.n	41ce <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    41e2:	4b0c      	ldr	r3, [pc, #48]	; (4214 <disk_ioctl+0x64>)
    41e4:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    41e6:	1e43      	subs	r3, r0, #1
    41e8:	b2db      	uxtb	r3, r3
    41ea:	2b01      	cmp	r3, #1
    41ec:	d904      	bls.n	41f8 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    41ee:	1f03      	subs	r3, r0, #4
    41f0:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    41f2:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    41f4:	4213      	tst	r3, r2
    41f6:	d1ea      	bne.n	41ce <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    41f8:	2300      	movs	r3, #0
    41fa:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    41fc:	2000      	movs	r0, #0
	break;
    41fe:	e7e6      	b.n	41ce <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    4200:	4b05      	ldr	r3, [pc, #20]	; (4218 <disk_ioctl+0x68>)
    4202:	4798      	blx	r3
    4204:	2800      	cmp	r0, #0
    4206:	d001      	beq.n	420c <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    4208:	2003      	movs	r0, #3
    420a:	e7e0      	b.n	41ce <disk_ioctl+0x1e>
			res = RES_OK;
    420c:	2000      	movs	r0, #0
    420e:	e7de      	b.n	41ce <disk_ioctl+0x1e>
    4210:	00008879 	.word	0x00008879
    4214:	00008895 	.word	0x00008895
    4218:	00008861 	.word	0x00008861

0000421c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    421c:	b500      	push	{lr}
    421e:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    4220:	4669      	mov	r1, sp
    4222:	480f      	ldr	r0, [pc, #60]	; (4260 <get_fattime+0x44>)
    4224:	4b0f      	ldr	r3, [pc, #60]	; (4264 <get_fattime+0x48>)
    4226:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    4228:	466b      	mov	r3, sp
    422a:	7958      	ldrb	r0, [r3, #5]
    422c:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    422e:	791b      	ldrb	r3, [r3, #4]
    4230:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    4232:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    4234:	466b      	mov	r3, sp
    4236:	789b      	ldrb	r3, [r3, #2]
    4238:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    423a:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    423c:	466b      	mov	r3, sp
    423e:	785b      	ldrb	r3, [r3, #1]
    4240:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    4242:	4318      	orrs	r0, r3
    4244:	466b      	mov	r3, sp
    4246:	781b      	ldrb	r3, [r3, #0]
    4248:	085b      	lsrs	r3, r3, #1
    424a:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    424c:	466b      	mov	r3, sp
    424e:	88db      	ldrh	r3, [r3, #6]
    4250:	4a05      	ldr	r2, [pc, #20]	; (4268 <get_fattime+0x4c>)
    4252:	4694      	mov	ip, r2
    4254:	4463      	add	r3, ip
    4256:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    4258:	4318      	orrs	r0, r3

	return ul_time;
}
    425a:	b003      	add	sp, #12
    425c:	bd00      	pop	{pc}
    425e:	46c0      	nop			; (mov r8, r8)
    4260:	20000628 	.word	0x20000628
    4264:	000023a1 	.word	0x000023a1
    4268:	fffff844 	.word	0xfffff844

0000426c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    426c:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    426e:	2a00      	cmp	r2, #0
    4270:	d005      	beq.n	427e <mem_cpy+0x12>
    4272:	2300      	movs	r3, #0
		*d++ = *s++;
    4274:	5ccc      	ldrb	r4, [r1, r3]
    4276:	54c4      	strb	r4, [r0, r3]
    4278:	3301      	adds	r3, #1
	while (cnt--)
    427a:	4293      	cmp	r3, r2
    427c:	d1fa      	bne.n	4274 <mem_cpy+0x8>
}
    427e:	bd10      	pop	{r4, pc}

00004280 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4280:	2a00      	cmp	r2, #0
    4282:	d005      	beq.n	4290 <mem_set+0x10>
    4284:	0003      	movs	r3, r0
    4286:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    4288:	7019      	strb	r1, [r3, #0]
    428a:	3301      	adds	r3, #1
	while (cnt--)
    428c:	4293      	cmp	r3, r2
    428e:	d1fb      	bne.n	4288 <mem_set+0x8>
}
    4290:	4770      	bx	lr

00004292 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    4292:	0002      	movs	r2, r0
	clst -= 2;
    4294:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    4296:	6983      	ldr	r3, [r0, #24]
    4298:	3b02      	subs	r3, #2
    429a:	2000      	movs	r0, #0
    429c:	4299      	cmp	r1, r3
    429e:	d203      	bcs.n	42a8 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    42a0:	7890      	ldrb	r0, [r2, #2]
    42a2:	4341      	muls	r1, r0
    42a4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    42a6:	1808      	adds	r0, r1, r0
}
    42a8:	4770      	bx	lr

000042aa <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    42aa:	0002      	movs	r2, r0
    42ac:	0001      	movs	r1, r0
    42ae:	310b      	adds	r1, #11
	BYTE sum = 0;
    42b0:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    42b2:	0843      	lsrs	r3, r0, #1
    42b4:	01c0      	lsls	r0, r0, #7
    42b6:	4303      	orrs	r3, r0
    42b8:	7810      	ldrb	r0, [r2, #0]
    42ba:	1818      	adds	r0, r3, r0
    42bc:	b2c0      	uxtb	r0, r0
    42be:	3201      	adds	r2, #1
    42c0:	428a      	cmp	r2, r1
    42c2:	d1f6      	bne.n	42b2 <sum_sfn+0x8>
	return sum;
}
    42c4:	4770      	bx	lr
	...

000042c8 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    42c8:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    42ca:	2800      	cmp	r0, #0
    42cc:	d010      	beq.n	42f0 <validate+0x28>
    42ce:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    42d0:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    42d2:	2a00      	cmp	r2, #0
    42d4:	d101      	bne.n	42da <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    42d6:	0018      	movs	r0, r3
    42d8:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    42da:	88c2      	ldrh	r2, [r0, #6]
    42dc:	428a      	cmp	r2, r1
    42de:	d1fa      	bne.n	42d6 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    42e0:	7840      	ldrb	r0, [r0, #1]
    42e2:	4b04      	ldr	r3, [pc, #16]	; (42f4 <validate+0x2c>)
    42e4:	4798      	blx	r3
		return FR_NOT_READY;
    42e6:	2303      	movs	r3, #3
	return FR_OK;
    42e8:	07c0      	lsls	r0, r0, #31
    42ea:	17c0      	asrs	r0, r0, #31
    42ec:	4003      	ands	r3, r0
    42ee:	e7f2      	b.n	42d6 <validate+0xe>
		return FR_INVALID_OBJECT;
    42f0:	2309      	movs	r3, #9
    42f2:	e7f0      	b.n	42d6 <validate+0xe>
    42f4:	0000408d 	.word	0x0000408d

000042f8 <check_fs>:
{
    42f8:	b570      	push	{r4, r5, r6, lr}
    42fa:	0004      	movs	r4, r0
    42fc:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    42fe:	0001      	movs	r1, r0
    4300:	3130      	adds	r1, #48	; 0x30
    4302:	7840      	ldrb	r0, [r0, #1]
    4304:	2301      	movs	r3, #1
    4306:	4d1f      	ldr	r5, [pc, #124]	; (4384 <check_fs+0x8c>)
    4308:	47a8      	blx	r5
		return 3;
    430a:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    430c:	2800      	cmp	r0, #0
    430e:	d001      	beq.n	4314 <check_fs+0x1c>
}
    4310:	0018      	movs	r0, r3
    4312:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    4314:	4b1c      	ldr	r3, [pc, #112]	; (4388 <check_fs+0x90>)
    4316:	5ce3      	ldrb	r3, [r4, r3]
    4318:	021b      	lsls	r3, r3, #8
    431a:	4a1c      	ldr	r2, [pc, #112]	; (438c <check_fs+0x94>)
    431c:	5ca2      	ldrb	r2, [r4, r2]
    431e:	431a      	orrs	r2, r3
    4320:	491b      	ldr	r1, [pc, #108]	; (4390 <check_fs+0x98>)
    4322:	b212      	sxth	r2, r2
		return 2;
    4324:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    4326:	428a      	cmp	r2, r1
    4328:	d1f2      	bne.n	4310 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    432a:	3367      	adds	r3, #103	; 0x67
    432c:	5ce3      	ldrb	r3, [r4, r3]
    432e:	061b      	lsls	r3, r3, #24
    4330:	2268      	movs	r2, #104	; 0x68
    4332:	5ca2      	ldrb	r2, [r4, r2]
    4334:	0412      	lsls	r2, r2, #16
    4336:	4313      	orrs	r3, r2
    4338:	2266      	movs	r2, #102	; 0x66
    433a:	5ca2      	ldrb	r2, [r4, r2]
    433c:	4313      	orrs	r3, r2
    433e:	2267      	movs	r2, #103	; 0x67
    4340:	5ca2      	ldrb	r2, [r4, r2]
    4342:	0212      	lsls	r2, r2, #8
    4344:	4313      	orrs	r3, r2
    4346:	021b      	lsls	r3, r3, #8
    4348:	0a1b      	lsrs	r3, r3, #8
    434a:	4a12      	ldr	r2, [pc, #72]	; (4394 <check_fs+0x9c>)
    434c:	4293      	cmp	r3, r2
    434e:	d016      	beq.n	437e <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    4350:	2385      	movs	r3, #133	; 0x85
    4352:	5ce3      	ldrb	r3, [r4, r3]
    4354:	061b      	lsls	r3, r3, #24
    4356:	2284      	movs	r2, #132	; 0x84
    4358:	5ca2      	ldrb	r2, [r4, r2]
    435a:	0412      	lsls	r2, r2, #16
    435c:	4313      	orrs	r3, r2
    435e:	2282      	movs	r2, #130	; 0x82
    4360:	5ca2      	ldrb	r2, [r4, r2]
    4362:	4313      	orrs	r3, r2
    4364:	2283      	movs	r2, #131	; 0x83
    4366:	5ca2      	ldrb	r2, [r4, r2]
    4368:	0212      	lsls	r2, r2, #8
    436a:	4313      	orrs	r3, r2
    436c:	021b      	lsls	r3, r3, #8
    436e:	0a1b      	lsrs	r3, r3, #8
    4370:	4a09      	ldr	r2, [pc, #36]	; (4398 <check_fs+0xa0>)
    4372:	4694      	mov	ip, r2
    4374:	4463      	add	r3, ip
    4376:	1e58      	subs	r0, r3, #1
    4378:	4183      	sbcs	r3, r0
		return 3;
    437a:	b2db      	uxtb	r3, r3
    437c:	e7c8      	b.n	4310 <check_fs+0x18>
		return 0;
    437e:	2300      	movs	r3, #0
    4380:	e7c6      	b.n	4310 <check_fs+0x18>
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	000040a9 	.word	0x000040a9
    4388:	0000022f 	.word	0x0000022f
    438c:	0000022e 	.word	0x0000022e
    4390:	ffffaa55 	.word	0xffffaa55
    4394:	00544146 	.word	0x00544146
    4398:	ffabbeba 	.word	0xffabbeba

0000439c <chk_mounted>:
{
    439c:	b5f0      	push	{r4, r5, r6, r7, lr}
    439e:	46d6      	mov	lr, sl
    43a0:	464f      	mov	r7, r9
    43a2:	4646      	mov	r6, r8
    43a4:	b5c0      	push	{r6, r7, lr}
    43a6:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    43a8:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    43aa:	781c      	ldrb	r4, [r3, #0]
    43ac:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    43ae:	2c09      	cmp	r4, #9
    43b0:	d80e      	bhi.n	43d0 <chk_mounted+0x34>
    43b2:	785a      	ldrb	r2, [r3, #1]
    43b4:	2a3a      	cmp	r2, #58	; 0x3a
    43b6:	d001      	beq.n	43bc <chk_mounted+0x20>
    43b8:	2400      	movs	r4, #0
    43ba:	e00a      	b.n	43d2 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    43bc:	3302      	adds	r3, #2
    43be:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    43c0:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    43c2:	2c03      	cmp	r4, #3
    43c4:	d905      	bls.n	43d2 <chk_mounted+0x36>
}
    43c6:	bc1c      	pop	{r2, r3, r4}
    43c8:	4690      	mov	r8, r2
    43ca:	4699      	mov	r9, r3
    43cc:	46a2      	mov	sl, r4
    43ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43d0:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    43d2:	00a3      	lsls	r3, r4, #2
    43d4:	4ac5      	ldr	r2, [pc, #788]	; (46ec <chk_mounted+0x350>)
    43d6:	589e      	ldr	r6, [r3, r2]
    43d8:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    43da:	2e00      	cmp	r6, #0
    43dc:	d100      	bne.n	43e0 <chk_mounted+0x44>
    43de:	e0e8      	b.n	45b2 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    43e0:	7833      	ldrb	r3, [r6, #0]
    43e2:	2b00      	cmp	r3, #0
    43e4:	d00d      	beq.n	4402 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    43e6:	7870      	ldrb	r0, [r6, #1]
    43e8:	4bc1      	ldr	r3, [pc, #772]	; (46f0 <chk_mounted+0x354>)
    43ea:	4798      	blx	r3
    43ec:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    43ee:	07c2      	lsls	r2, r0, #31
    43f0:	d407      	bmi.n	4402 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    43f2:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    43f4:	2d00      	cmp	r5, #0
    43f6:	d0e6      	beq.n	43c6 <chk_mounted+0x2a>
    43f8:	075b      	lsls	r3, r3, #29
    43fa:	d400      	bmi.n	43fe <chk_mounted+0x62>
    43fc:	e0db      	b.n	45b6 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    43fe:	300a      	adds	r0, #10
    4400:	e7e1      	b.n	43c6 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    4402:	2300      	movs	r3, #0
    4404:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    4406:	b2e0      	uxtb	r0, r4
    4408:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    440a:	4bba      	ldr	r3, [pc, #744]	; (46f4 <chk_mounted+0x358>)
    440c:	4798      	blx	r3
    440e:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    4410:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    4412:	07da      	lsls	r2, r3, #31
    4414:	d4d7      	bmi.n	43c6 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    4416:	2d00      	cmp	r5, #0
    4418:	d002      	beq.n	4420 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    441a:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    441c:	075b      	lsls	r3, r3, #29
    441e:	d4d2      	bmi.n	43c6 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    4420:	2100      	movs	r1, #0
    4422:	0030      	movs	r0, r6
    4424:	4bb4      	ldr	r3, [pc, #720]	; (46f8 <chk_mounted+0x35c>)
    4426:	4798      	blx	r3
    4428:	0003      	movs	r3, r0
    442a:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    442c:	2801      	cmp	r0, #1
    442e:	d100      	bne.n	4432 <chk_mounted+0x96>
    4430:	e09a      	b.n	4568 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    4432:	2b03      	cmp	r3, #3
    4434:	d100      	bne.n	4438 <chk_mounted+0x9c>
    4436:	e0c0      	b.n	45ba <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4438:	200d      	movs	r0, #13
    443a:	2b00      	cmp	r3, #0
    443c:	d1c3      	bne.n	43c6 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    443e:	333c      	adds	r3, #60	; 0x3c
    4440:	5cf2      	ldrb	r2, [r6, r3]
    4442:	0212      	lsls	r2, r2, #8
    4444:	3b01      	subs	r3, #1
    4446:	5cf3      	ldrb	r3, [r6, r3]
    4448:	4313      	orrs	r3, r2
    444a:	2280      	movs	r2, #128	; 0x80
    444c:	0092      	lsls	r2, r2, #2
    444e:	b21b      	sxth	r3, r3
    4450:	4293      	cmp	r3, r2
    4452:	d1b8      	bne.n	43c6 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    4454:	2347      	movs	r3, #71	; 0x47
    4456:	5cf3      	ldrb	r3, [r6, r3]
    4458:	021b      	lsls	r3, r3, #8
    445a:	3abb      	subs	r2, #187	; 0xbb
    445c:	3aff      	subs	r2, #255	; 0xff
    445e:	5cb5      	ldrb	r5, [r6, r2]
    4460:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    4462:	d10d      	bne.n	4480 <chk_mounted+0xe4>
    4464:	2357      	movs	r3, #87	; 0x57
    4466:	5cf5      	ldrb	r5, [r6, r3]
    4468:	062d      	lsls	r5, r5, #24
    446a:	3b01      	subs	r3, #1
    446c:	5cf3      	ldrb	r3, [r6, r3]
    446e:	041b      	lsls	r3, r3, #16
    4470:	431d      	orrs	r5, r3
    4472:	2354      	movs	r3, #84	; 0x54
    4474:	5cf3      	ldrb	r3, [r6, r3]
    4476:	431d      	orrs	r5, r3
    4478:	2355      	movs	r3, #85	; 0x55
    447a:	5cf3      	ldrb	r3, [r6, r3]
    447c:	021b      	lsls	r3, r3, #8
    447e:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    4480:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    4482:	2340      	movs	r3, #64	; 0x40
    4484:	5cf2      	ldrb	r2, [r6, r3]
    4486:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    4488:	1e53      	subs	r3, r2, #1
    448a:	200d      	movs	r0, #13
    448c:	2b01      	cmp	r3, #1
    448e:	d89a      	bhi.n	43c6 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    4490:	233d      	movs	r3, #61	; 0x3d
    4492:	5cf1      	ldrb	r1, [r6, r3]
    4494:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    4496:	2900      	cmp	r1, #0
    4498:	d095      	beq.n	43c6 <chk_mounted+0x2a>
    449a:	1e4b      	subs	r3, r1, #1
    449c:	4219      	tst	r1, r3
    449e:	d192      	bne.n	43c6 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    44a0:	2342      	movs	r3, #66	; 0x42
    44a2:	5cf3      	ldrb	r3, [r6, r3]
    44a4:	021b      	lsls	r3, r3, #8
    44a6:	3034      	adds	r0, #52	; 0x34
    44a8:	5c30      	ldrb	r0, [r6, r0]
    44aa:	4318      	orrs	r0, r3
    44ac:	4680      	mov	r8, r0
    44ae:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    44b0:	200d      	movs	r0, #13
    44b2:	4643      	mov	r3, r8
    44b4:	071b      	lsls	r3, r3, #28
    44b6:	d000      	beq.n	44ba <chk_mounted+0x11e>
    44b8:	e785      	b.n	43c6 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    44ba:	2344      	movs	r3, #68	; 0x44
    44bc:	5cf3      	ldrb	r3, [r6, r3]
    44be:	021b      	lsls	r3, r3, #8
    44c0:	3036      	adds	r0, #54	; 0x36
    44c2:	5c30      	ldrb	r0, [r6, r0]
    44c4:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    44c6:	d10d      	bne.n	44e4 <chk_mounted+0x148>
    44c8:	3353      	adds	r3, #83	; 0x53
    44ca:	5cf3      	ldrb	r3, [r6, r3]
    44cc:	061b      	lsls	r3, r3, #24
    44ce:	2052      	movs	r0, #82	; 0x52
    44d0:	5c30      	ldrb	r0, [r6, r0]
    44d2:	0400      	lsls	r0, r0, #16
    44d4:	4303      	orrs	r3, r0
    44d6:	2050      	movs	r0, #80	; 0x50
    44d8:	5c30      	ldrb	r0, [r6, r0]
    44da:	4303      	orrs	r3, r0
    44dc:	2051      	movs	r0, #81	; 0x51
    44de:	5c30      	ldrb	r0, [r6, r0]
    44e0:	0200      	lsls	r0, r0, #8
    44e2:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    44e4:	203f      	movs	r0, #63	; 0x3f
    44e6:	5c30      	ldrb	r0, [r6, r0]
    44e8:	0200      	lsls	r0, r0, #8
    44ea:	273e      	movs	r7, #62	; 0x3e
    44ec:	5df7      	ldrb	r7, [r6, r7]
    44ee:	4307      	orrs	r7, r0
    44f0:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    44f2:	200d      	movs	r0, #13
    44f4:	2f00      	cmp	r7, #0
    44f6:	d100      	bne.n	44fa <chk_mounted+0x15e>
    44f8:	e765      	b.n	43c6 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    44fa:	436a      	muls	r2, r5
    44fc:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    44fe:	4642      	mov	r2, r8
    4500:	0917      	lsrs	r7, r2, #4
    4502:	4457      	add	r7, sl
    4504:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    4506:	42bb      	cmp	r3, r7
    4508:	d200      	bcs.n	450c <chk_mounted+0x170>
    450a:	e75c      	b.n	43c6 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    450c:	1bd8      	subs	r0, r3, r7
    450e:	4b7b      	ldr	r3, [pc, #492]	; (46fc <chk_mounted+0x360>)
    4510:	4798      	blx	r3
    4512:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    4514:	200d      	movs	r0, #13
    4516:	2b00      	cmp	r3, #0
    4518:	d100      	bne.n	451c <chk_mounted+0x180>
    451a:	e754      	b.n	43c6 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    451c:	4a78      	ldr	r2, [pc, #480]	; (4700 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    451e:	429a      	cmp	r2, r3
    4520:	4192      	sbcs	r2, r2
    4522:	4252      	negs	r2, r2
    4524:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    4526:	4977      	ldr	r1, [pc, #476]	; (4704 <chk_mounted+0x368>)
    4528:	428b      	cmp	r3, r1
    452a:	d848      	bhi.n	45be <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    452c:	3302      	adds	r3, #2
    452e:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    4530:	19e7      	adds	r7, r4, r7
    4532:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    4534:	4454      	add	r4, sl
    4536:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    4538:	200d      	movs	r0, #13
    453a:	4641      	mov	r1, r8
    453c:	2900      	cmp	r1, #0
    453e:	d100      	bne.n	4542 <chk_mounted+0x1a6>
    4540:	e741      	b.n	43c6 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    4542:	444c      	add	r4, r9
    4544:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    4546:	2a02      	cmp	r2, #2
    4548:	d12c      	bne.n	45a4 <chk_mounted+0x208>
    454a:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    454c:	496e      	ldr	r1, [pc, #440]	; (4708 <chk_mounted+0x36c>)
    454e:	468c      	mov	ip, r1
    4550:	4463      	add	r3, ip
    4552:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    4554:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4556:	429d      	cmp	r5, r3
    4558:	d200      	bcs.n	455c <chk_mounted+0x1c0>
    455a:	e734      	b.n	43c6 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    455c:	2301      	movs	r3, #1
    455e:	425b      	negs	r3, r3
    4560:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    4562:	2300      	movs	r3, #0
    4564:	60f3      	str	r3, [r6, #12]
    4566:	e0b6      	b.n	46d6 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    4568:	33f2      	adds	r3, #242	; 0xf2
    456a:	33ff      	adds	r3, #255	; 0xff
    456c:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    456e:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    4570:	2b00      	cmp	r3, #0
    4572:	d100      	bne.n	4576 <chk_mounted+0x1da>
    4574:	e727      	b.n	43c6 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    4576:	23fa      	movs	r3, #250	; 0xfa
    4578:	33ff      	adds	r3, #255	; 0xff
    457a:	5cf4      	ldrb	r4, [r6, r3]
    457c:	0624      	lsls	r4, r4, #24
    457e:	3b01      	subs	r3, #1
    4580:	5cf3      	ldrb	r3, [r6, r3]
    4582:	041b      	lsls	r3, r3, #16
    4584:	431c      	orrs	r4, r3
    4586:	23fb      	movs	r3, #251	; 0xfb
    4588:	005b      	lsls	r3, r3, #1
    458a:	5cf3      	ldrb	r3, [r6, r3]
    458c:	431c      	orrs	r4, r3
    458e:	23f8      	movs	r3, #248	; 0xf8
    4590:	33ff      	adds	r3, #255	; 0xff
    4592:	5cf2      	ldrb	r2, [r6, r3]
    4594:	0212      	lsls	r2, r2, #8
    4596:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    4598:	0021      	movs	r1, r4
    459a:	0030      	movs	r0, r6
    459c:	4b56      	ldr	r3, [pc, #344]	; (46f8 <chk_mounted+0x35c>)
    459e:	4798      	blx	r3
    45a0:	0003      	movs	r3, r0
    45a2:	e746      	b.n	4432 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    45a4:	2103      	movs	r1, #3
    45a6:	4359      	muls	r1, r3
    45a8:	0849      	lsrs	r1, r1, #1
    45aa:	2001      	movs	r0, #1
    45ac:	4003      	ands	r3, r0
    45ae:	18cb      	adds	r3, r1, r3
    45b0:	e7cc      	b.n	454c <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    45b2:	200c      	movs	r0, #12
    45b4:	e707      	b.n	43c6 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    45b6:	2000      	movs	r0, #0
    45b8:	e705      	b.n	43c6 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    45ba:	2001      	movs	r0, #1
    45bc:	e703      	b.n	43c6 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    45be:	3302      	adds	r3, #2
    45c0:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    45c2:	19e7      	adds	r7, r4, r7
    45c4:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    45c6:	4652      	mov	r2, sl
    45c8:	18a2      	adds	r2, r4, r2
    45ca:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    45cc:	200d      	movs	r0, #13
    45ce:	4642      	mov	r2, r8
    45d0:	2a00      	cmp	r2, #0
    45d2:	d000      	beq.n	45d6 <chk_mounted+0x23a>
    45d4:	e6f7      	b.n	43c6 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    45d6:	225f      	movs	r2, #95	; 0x5f
    45d8:	5cb2      	ldrb	r2, [r6, r2]
    45da:	0612      	lsls	r2, r2, #24
    45dc:	215e      	movs	r1, #94	; 0x5e
    45de:	5c71      	ldrb	r1, [r6, r1]
    45e0:	0409      	lsls	r1, r1, #16
    45e2:	430a      	orrs	r2, r1
    45e4:	215c      	movs	r1, #92	; 0x5c
    45e6:	5c71      	ldrb	r1, [r6, r1]
    45e8:	430a      	orrs	r2, r1
    45ea:	215d      	movs	r1, #93	; 0x5d
    45ec:	5c71      	ldrb	r1, [r6, r1]
    45ee:	0209      	lsls	r1, r1, #8
    45f0:	430a      	orrs	r2, r1
    45f2:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    45f4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    45f6:	4a44      	ldr	r2, [pc, #272]	; (4708 <chk_mounted+0x36c>)
    45f8:	4694      	mov	ip, r2
    45fa:	4463      	add	r3, ip
    45fc:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    45fe:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4600:	429d      	cmp	r5, r3
    4602:	d200      	bcs.n	4606 <chk_mounted+0x26a>
    4604:	e6df      	b.n	43c6 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    4606:	2301      	movs	r3, #1
    4608:	425b      	negs	r3, r3
    460a:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    460c:	2300      	movs	r3, #0
    460e:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    4610:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    4612:	3361      	adds	r3, #97	; 0x61
    4614:	5cf3      	ldrb	r3, [r6, r3]
    4616:	021b      	lsls	r3, r3, #8
    4618:	2260      	movs	r2, #96	; 0x60
    461a:	5cb2      	ldrb	r2, [r6, r2]
    461c:	431a      	orrs	r2, r3
    461e:	1912      	adds	r2, r2, r4
    4620:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    4622:	0031      	movs	r1, r6
    4624:	3130      	adds	r1, #48	; 0x30
    4626:	7870      	ldrb	r0, [r6, #1]
    4628:	2301      	movs	r3, #1
    462a:	4c38      	ldr	r4, [pc, #224]	; (470c <chk_mounted+0x370>)
    462c:	47a0      	blx	r4
    462e:	2203      	movs	r2, #3
    4630:	2800      	cmp	r0, #0
    4632:	d150      	bne.n	46d6 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    4634:	4b36      	ldr	r3, [pc, #216]	; (4710 <chk_mounted+0x374>)
    4636:	5cf2      	ldrb	r2, [r6, r3]
    4638:	0212      	lsls	r2, r2, #8
    463a:	4b36      	ldr	r3, [pc, #216]	; (4714 <chk_mounted+0x378>)
    463c:	5cf3      	ldrb	r3, [r6, r3]
    463e:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    4640:	4935      	ldr	r1, [pc, #212]	; (4718 <chk_mounted+0x37c>)
    4642:	b21b      	sxth	r3, r3
    4644:	2203      	movs	r2, #3
    4646:	428b      	cmp	r3, r1
    4648:	d145      	bne.n	46d6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    464a:	2333      	movs	r3, #51	; 0x33
    464c:	5cf3      	ldrb	r3, [r6, r3]
    464e:	061b      	lsls	r3, r3, #24
    4650:	322f      	adds	r2, #47	; 0x2f
    4652:	5cb2      	ldrb	r2, [r6, r2]
    4654:	0412      	lsls	r2, r2, #16
    4656:	4313      	orrs	r3, r2
    4658:	2230      	movs	r2, #48	; 0x30
    465a:	5cb2      	ldrb	r2, [r6, r2]
    465c:	4313      	orrs	r3, r2
    465e:	2231      	movs	r2, #49	; 0x31
    4660:	5cb2      	ldrb	r2, [r6, r2]
    4662:	0212      	lsls	r2, r2, #8
    4664:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    4666:	492d      	ldr	r1, [pc, #180]	; (471c <chk_mounted+0x380>)
    4668:	2203      	movs	r2, #3
    466a:	428b      	cmp	r3, r1
    466c:	d133      	bne.n	46d6 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    466e:	4b2c      	ldr	r3, [pc, #176]	; (4720 <chk_mounted+0x384>)
    4670:	5cf3      	ldrb	r3, [r6, r3]
    4672:	061b      	lsls	r3, r3, #24
    4674:	4a2b      	ldr	r2, [pc, #172]	; (4724 <chk_mounted+0x388>)
    4676:	5cb2      	ldrb	r2, [r6, r2]
    4678:	0412      	lsls	r2, r2, #16
    467a:	4313      	orrs	r3, r2
    467c:	2285      	movs	r2, #133	; 0x85
    467e:	0092      	lsls	r2, r2, #2
    4680:	5cb2      	ldrb	r2, [r6, r2]
    4682:	4313      	orrs	r3, r2
    4684:	4a28      	ldr	r2, [pc, #160]	; (4728 <chk_mounted+0x38c>)
    4686:	5cb2      	ldrb	r2, [r6, r2]
    4688:	0212      	lsls	r2, r2, #8
    468a:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    468c:	4927      	ldr	r1, [pc, #156]	; (472c <chk_mounted+0x390>)
    468e:	2203      	movs	r2, #3
    4690:	428b      	cmp	r3, r1
    4692:	d120      	bne.n	46d6 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    4694:	4b26      	ldr	r3, [pc, #152]	; (4730 <chk_mounted+0x394>)
    4696:	5cf3      	ldrb	r3, [r6, r3]
    4698:	061b      	lsls	r3, r3, #24
    469a:	4a26      	ldr	r2, [pc, #152]	; (4734 <chk_mounted+0x398>)
    469c:	5cb2      	ldrb	r2, [r6, r2]
    469e:	0412      	lsls	r2, r2, #16
    46a0:	4313      	orrs	r3, r2
    46a2:	2287      	movs	r2, #135	; 0x87
    46a4:	0092      	lsls	r2, r2, #2
    46a6:	5cb2      	ldrb	r2, [r6, r2]
    46a8:	4313      	orrs	r3, r2
    46aa:	4a23      	ldr	r2, [pc, #140]	; (4738 <chk_mounted+0x39c>)
    46ac:	5cb2      	ldrb	r2, [r6, r2]
    46ae:	0212      	lsls	r2, r2, #8
    46b0:	4313      	orrs	r3, r2
    46b2:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    46b4:	4b21      	ldr	r3, [pc, #132]	; (473c <chk_mounted+0x3a0>)
    46b6:	5cf3      	ldrb	r3, [r6, r3]
    46b8:	061b      	lsls	r3, r3, #24
    46ba:	4a21      	ldr	r2, [pc, #132]	; (4740 <chk_mounted+0x3a4>)
    46bc:	5cb2      	ldrb	r2, [r6, r2]
    46be:	0412      	lsls	r2, r2, #16
    46c0:	4313      	orrs	r3, r2
    46c2:	2286      	movs	r2, #134	; 0x86
    46c4:	0092      	lsls	r2, r2, #2
    46c6:	5cb2      	ldrb	r2, [r6, r2]
    46c8:	4313      	orrs	r3, r2
    46ca:	4a1e      	ldr	r2, [pc, #120]	; (4744 <chk_mounted+0x3a8>)
    46cc:	5cb2      	ldrb	r2, [r6, r2]
    46ce:	0212      	lsls	r2, r2, #8
    46d0:	4313      	orrs	r3, r2
    46d2:	6133      	str	r3, [r6, #16]
    46d4:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    46d6:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    46d8:	4a1b      	ldr	r2, [pc, #108]	; (4748 <chk_mounted+0x3ac>)
    46da:	8813      	ldrh	r3, [r2, #0]
    46dc:	3301      	adds	r3, #1
    46de:	b29b      	uxth	r3, r3
    46e0:	8013      	strh	r3, [r2, #0]
    46e2:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    46e4:	2000      	movs	r0, #0
    46e6:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    46e8:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    46ea:	e66c      	b.n	43c6 <chk_mounted+0x2a>
    46ec:	200002b8 	.word	0x200002b8
    46f0:	0000408d 	.word	0x0000408d
    46f4:	00003ff1 	.word	0x00003ff1
    46f8:	000042f9 	.word	0x000042f9
    46fc:	00008ed5 	.word	0x00008ed5
    4700:	00000ff5 	.word	0x00000ff5
    4704:	0000fff5 	.word	0x0000fff5
    4708:	000001ff 	.word	0x000001ff
    470c:	000040a9 	.word	0x000040a9
    4710:	0000022f 	.word	0x0000022f
    4714:	0000022e 	.word	0x0000022e
    4718:	ffffaa55 	.word	0xffffaa55
    471c:	41615252 	.word	0x41615252
    4720:	00000217 	.word	0x00000217
    4724:	00000216 	.word	0x00000216
    4728:	00000215 	.word	0x00000215
    472c:	61417272 	.word	0x61417272
    4730:	0000021f 	.word	0x0000021f
    4734:	0000021e 	.word	0x0000021e
    4738:	0000021d 	.word	0x0000021d
    473c:	0000021b 	.word	0x0000021b
    4740:	0000021a 	.word	0x0000021a
    4744:	00000219 	.word	0x00000219
    4748:	200002c8 	.word	0x200002c8

0000474c <move_window>:
{
    474c:	b5f0      	push	{r4, r5, r6, r7, lr}
    474e:	46ce      	mov	lr, r9
    4750:	b500      	push	{lr}
    4752:	b082      	sub	sp, #8
    4754:	0004      	movs	r4, r0
    4756:	000f      	movs	r7, r1
	wsect = fs->winsect;
    4758:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    475a:	428d      	cmp	r5, r1
    475c:	d03f      	beq.n	47de <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    475e:	7903      	ldrb	r3, [r0, #4]
    4760:	2b00      	cmp	r3, #0
    4762:	d107      	bne.n	4774 <move_window+0x28>
	return FR_OK;
    4764:	2300      	movs	r3, #0
		if (sector) {
    4766:	2f00      	cmp	r7, #0
    4768:	d12c      	bne.n	47c4 <move_window+0x78>
}
    476a:	0018      	movs	r0, r3
    476c:	b002      	add	sp, #8
    476e:	bc04      	pop	{r2}
    4770:	4691      	mov	r9, r2
    4772:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4774:	2330      	movs	r3, #48	; 0x30
    4776:	469c      	mov	ip, r3
    4778:	4484      	add	ip, r0
    477a:	4663      	mov	r3, ip
    477c:	4661      	mov	r1, ip
    477e:	9301      	str	r3, [sp, #4]
    4780:	7840      	ldrb	r0, [r0, #1]
    4782:	2301      	movs	r3, #1
    4784:	002a      	movs	r2, r5
    4786:	4e17      	ldr	r6, [pc, #92]	; (47e4 <move_window+0x98>)
    4788:	47b0      	blx	r6
				return FR_DISK_ERR;
    478a:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    478c:	2800      	cmp	r0, #0
    478e:	d1ec      	bne.n	476a <move_window+0x1e>
			fs->wflag = 0;
    4790:	2300      	movs	r3, #0
    4792:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    4794:	6a23      	ldr	r3, [r4, #32]
    4796:	69e2      	ldr	r2, [r4, #28]
    4798:	4694      	mov	ip, r2
    479a:	4463      	add	r3, ip
    479c:	429d      	cmp	r5, r3
    479e:	d2e1      	bcs.n	4764 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    47a0:	78e6      	ldrb	r6, [r4, #3]
    47a2:	2e01      	cmp	r6, #1
    47a4:	d9de      	bls.n	4764 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    47a6:	4b0f      	ldr	r3, [pc, #60]	; (47e4 <move_window+0x98>)
    47a8:	4699      	mov	r9, r3
					wsect += fs->fsize;
    47aa:	69e3      	ldr	r3, [r4, #28]
    47ac:	469c      	mov	ip, r3
    47ae:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    47b0:	7860      	ldrb	r0, [r4, #1]
    47b2:	2301      	movs	r3, #1
    47b4:	002a      	movs	r2, r5
    47b6:	9901      	ldr	r1, [sp, #4]
    47b8:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    47ba:	3e01      	subs	r6, #1
    47bc:	b2f6      	uxtb	r6, r6
    47be:	2e01      	cmp	r6, #1
    47c0:	d1f3      	bne.n	47aa <move_window+0x5e>
    47c2:	e7cf      	b.n	4764 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    47c4:	0021      	movs	r1, r4
    47c6:	3130      	adds	r1, #48	; 0x30
    47c8:	7860      	ldrb	r0, [r4, #1]
    47ca:	3301      	adds	r3, #1
    47cc:	003a      	movs	r2, r7
    47ce:	4d06      	ldr	r5, [pc, #24]	; (47e8 <move_window+0x9c>)
    47d0:	47a8      	blx	r5
				return FR_DISK_ERR;
    47d2:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    47d4:	2800      	cmp	r0, #0
    47d6:	d1c8      	bne.n	476a <move_window+0x1e>
			fs->winsect = sector;
    47d8:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    47da:	2300      	movs	r3, #0
    47dc:	e7c5      	b.n	476a <move_window+0x1e>
    47de:	2300      	movs	r3, #0
    47e0:	e7c3      	b.n	476a <move_window+0x1e>
    47e2:	46c0      	nop			; (mov r8, r8)
    47e4:	0000412d 	.word	0x0000412d
    47e8:	000040a9 	.word	0x000040a9

000047ec <get_fat>:
{
    47ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ee:	0005      	movs	r5, r0
    47f0:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    47f2:	2901      	cmp	r1, #1
    47f4:	d974      	bls.n	48e0 <get_fat+0xf4>
		return 1;
    47f6:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    47f8:	69ab      	ldr	r3, [r5, #24]
    47fa:	4299      	cmp	r1, r3
    47fc:	d271      	bcs.n	48e2 <get_fat+0xf6>
	switch (fs->fs_type) {
    47fe:	782b      	ldrb	r3, [r5, #0]
    4800:	2b02      	cmp	r3, #2
    4802:	d034      	beq.n	486e <get_fat+0x82>
    4804:	2b03      	cmp	r3, #3
    4806:	d049      	beq.n	489c <get_fat+0xb0>
    4808:	2b01      	cmp	r3, #1
    480a:	d002      	beq.n	4812 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    480c:	2001      	movs	r0, #1
    480e:	4240      	negs	r0, r0
    4810:	e067      	b.n	48e2 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    4812:	084e      	lsrs	r6, r1, #1
    4814:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4816:	0a71      	lsrs	r1, r6, #9
    4818:	6a2b      	ldr	r3, [r5, #32]
    481a:	469c      	mov	ip, r3
    481c:	4461      	add	r1, ip
    481e:	0028      	movs	r0, r5
    4820:	4b30      	ldr	r3, [pc, #192]	; (48e4 <get_fat+0xf8>)
    4822:	4798      	blx	r3
    4824:	2800      	cmp	r0, #0
    4826:	d002      	beq.n	482e <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4828:	2001      	movs	r0, #1
    482a:	4240      	negs	r0, r0
    482c:	e059      	b.n	48e2 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    482e:	05f3      	lsls	r3, r6, #23
    4830:	0ddb      	lsrs	r3, r3, #23
    4832:	18eb      	adds	r3, r5, r3
    4834:	3330      	adds	r3, #48	; 0x30
    4836:	781f      	ldrb	r7, [r3, #0]
    4838:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    483a:	0a71      	lsrs	r1, r6, #9
    483c:	6a2b      	ldr	r3, [r5, #32]
    483e:	469c      	mov	ip, r3
    4840:	4461      	add	r1, ip
    4842:	0028      	movs	r0, r5
    4844:	4b27      	ldr	r3, [pc, #156]	; (48e4 <get_fat+0xf8>)
    4846:	4798      	blx	r3
    4848:	2800      	cmp	r0, #0
    484a:	d002      	beq.n	4852 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    484c:	2001      	movs	r0, #1
    484e:	4240      	negs	r0, r0
    4850:	e047      	b.n	48e2 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    4852:	05f6      	lsls	r6, r6, #23
    4854:	0df6      	lsrs	r6, r6, #23
    4856:	19ad      	adds	r5, r5, r6
    4858:	3530      	adds	r5, #48	; 0x30
    485a:	7828      	ldrb	r0, [r5, #0]
    485c:	0200      	lsls	r0, r0, #8
    485e:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4860:	07e3      	lsls	r3, r4, #31
    4862:	d501      	bpl.n	4868 <get_fat+0x7c>
    4864:	0900      	lsrs	r0, r0, #4
    4866:	e03c      	b.n	48e2 <get_fat+0xf6>
    4868:	0500      	lsls	r0, r0, #20
    486a:	0d00      	lsrs	r0, r0, #20
    486c:	e039      	b.n	48e2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    486e:	0a09      	lsrs	r1, r1, #8
    4870:	6a2b      	ldr	r3, [r5, #32]
    4872:	469c      	mov	ip, r3
    4874:	4461      	add	r1, ip
    4876:	0028      	movs	r0, r5
    4878:	4b1a      	ldr	r3, [pc, #104]	; (48e4 <get_fat+0xf8>)
    487a:	4798      	blx	r3
    487c:	2800      	cmp	r0, #0
    487e:	d002      	beq.n	4886 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4880:	2001      	movs	r0, #1
    4882:	4240      	negs	r0, r0
    4884:	e02d      	b.n	48e2 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    4886:	0064      	lsls	r4, r4, #1
    4888:	23ff      	movs	r3, #255	; 0xff
    488a:	005b      	lsls	r3, r3, #1
    488c:	401c      	ands	r4, r3
		return LD_WORD(p);
    488e:	192d      	adds	r5, r5, r4
    4890:	3530      	adds	r5, #48	; 0x30
    4892:	786b      	ldrb	r3, [r5, #1]
    4894:	021b      	lsls	r3, r3, #8
    4896:	7828      	ldrb	r0, [r5, #0]
    4898:	4318      	orrs	r0, r3
    489a:	e022      	b.n	48e2 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    489c:	09c9      	lsrs	r1, r1, #7
    489e:	6a2b      	ldr	r3, [r5, #32]
    48a0:	469c      	mov	ip, r3
    48a2:	4461      	add	r1, ip
    48a4:	0028      	movs	r0, r5
    48a6:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <get_fat+0xf8>)
    48a8:	4798      	blx	r3
    48aa:	2800      	cmp	r0, #0
    48ac:	d002      	beq.n	48b4 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    48ae:	2001      	movs	r0, #1
    48b0:	4240      	negs	r0, r0
    48b2:	e016      	b.n	48e2 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    48b4:	00a4      	lsls	r4, r4, #2
    48b6:	23fe      	movs	r3, #254	; 0xfe
    48b8:	005b      	lsls	r3, r3, #1
    48ba:	401c      	ands	r4, r3
    48bc:	0023      	movs	r3, r4
    48be:	3330      	adds	r3, #48	; 0x30
    48c0:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    48c2:	78d8      	ldrb	r0, [r3, #3]
    48c4:	0600      	lsls	r0, r0, #24
    48c6:	789a      	ldrb	r2, [r3, #2]
    48c8:	0412      	lsls	r2, r2, #16
    48ca:	4310      	orrs	r0, r2
    48cc:	192c      	adds	r4, r5, r4
    48ce:	3430      	adds	r4, #48	; 0x30
    48d0:	7822      	ldrb	r2, [r4, #0]
    48d2:	4310      	orrs	r0, r2
    48d4:	785b      	ldrb	r3, [r3, #1]
    48d6:	021b      	lsls	r3, r3, #8
    48d8:	4318      	orrs	r0, r3
    48da:	0100      	lsls	r0, r0, #4
    48dc:	0900      	lsrs	r0, r0, #4
    48de:	e000      	b.n	48e2 <get_fat+0xf6>
		return 1;
    48e0:	2001      	movs	r0, #1
}
    48e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e4:	0000474d 	.word	0x0000474d

000048e8 <dir_sdi>:
{
    48e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48ea:	0004      	movs	r4, r0
    48ec:	000d      	movs	r5, r1
	dj->index = idx;
    48ee:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    48f0:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    48f2:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    48f4:	2901      	cmp	r1, #1
    48f6:	d003      	beq.n	4900 <dir_sdi+0x18>
    48f8:	6823      	ldr	r3, [r4, #0]
    48fa:	699a      	ldr	r2, [r3, #24]
    48fc:	4291      	cmp	r1, r2
    48fe:	d300      	bcc.n	4902 <dir_sdi+0x1a>
}
    4900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4902:	2900      	cmp	r1, #0
    4904:	d119      	bne.n	493a <dir_sdi+0x52>
    4906:	781a      	ldrb	r2, [r3, #0]
    4908:	2a03      	cmp	r2, #3
    490a:	d013      	beq.n	4934 <dir_sdi+0x4c>
		dj->clust = clst;
    490c:	2200      	movs	r2, #0
    490e:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4910:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    4912:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    4914:	42aa      	cmp	r2, r5
    4916:	d9f3      	bls.n	4900 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4918:	092a      	lsrs	r2, r5, #4
    491a:	b292      	uxth	r2, r2
    491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    491e:	189b      	adds	r3, r3, r2
    4920:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    4922:	6823      	ldr	r3, [r4, #0]
    4924:	3330      	adds	r3, #48	; 0x30
    4926:	220f      	movs	r2, #15
    4928:	4015      	ands	r5, r2
    492a:	016d      	lsls	r5, r5, #5
    492c:	195d      	adds	r5, r3, r5
    492e:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    4930:	2000      	movs	r0, #0
    4932:	e7e5      	b.n	4900 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    4934:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    4936:	2900      	cmp	r1, #0
    4938:	d0e8      	beq.n	490c <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    493a:	789e      	ldrb	r6, [r3, #2]
    493c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    493e:	42b5      	cmp	r5, r6
    4940:	d313      	bcc.n	496a <dir_sdi+0x82>
    4942:	1bad      	subs	r5, r5, r6
    4944:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    4946:	4f10      	ldr	r7, [pc, #64]	; (4988 <dir_sdi+0xa0>)
    4948:	e000      	b.n	494c <dir_sdi+0x64>
    494a:	001d      	movs	r5, r3
    494c:	6820      	ldr	r0, [r4, #0]
    494e:	47b8      	blx	r7
    4950:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4952:	1c43      	adds	r3, r0, #1
    4954:	d012      	beq.n	497c <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    4956:	2801      	cmp	r0, #1
    4958:	d912      	bls.n	4980 <dir_sdi+0x98>
    495a:	6823      	ldr	r3, [r4, #0]
    495c:	699b      	ldr	r3, [r3, #24]
    495e:	4298      	cmp	r0, r3
    4960:	d210      	bcs.n	4984 <dir_sdi+0x9c>
    4962:	1bab      	subs	r3, r5, r6
    4964:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    4966:	42b5      	cmp	r5, r6
    4968:	d2ef      	bcs.n	494a <dir_sdi+0x62>
		dj->clust = clst;
    496a:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    496c:	6820      	ldr	r0, [r4, #0]
    496e:	4b07      	ldr	r3, [pc, #28]	; (498c <dir_sdi+0xa4>)
    4970:	4798      	blx	r3
    4972:	092b      	lsrs	r3, r5, #4
    4974:	b29b      	uxth	r3, r3
    4976:	1818      	adds	r0, r3, r0
    4978:	6120      	str	r0, [r4, #16]
    497a:	e7d2      	b.n	4922 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    497c:	2001      	movs	r0, #1
    497e:	e7bf      	b.n	4900 <dir_sdi+0x18>
				return FR_INT_ERR;
    4980:	2002      	movs	r0, #2
    4982:	e7bd      	b.n	4900 <dir_sdi+0x18>
    4984:	2002      	movs	r0, #2
    4986:	e7bb      	b.n	4900 <dir_sdi+0x18>
    4988:	000047ed 	.word	0x000047ed
    498c:	00004293 	.word	0x00004293

00004990 <put_fat>:
{
    4990:	b5f0      	push	{r4, r5, r6, r7, lr}
    4992:	46c6      	mov	lr, r8
    4994:	b500      	push	{lr}
    4996:	0007      	movs	r7, r0
    4998:	000c      	movs	r4, r1
    499a:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    499c:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    499e:	2901      	cmp	r1, #1
    49a0:	d902      	bls.n	49a8 <put_fat+0x18>
    49a2:	6983      	ldr	r3, [r0, #24]
    49a4:	4299      	cmp	r1, r3
    49a6:	d303      	bcc.n	49b0 <put_fat+0x20>
}
    49a8:	0028      	movs	r0, r5
    49aa:	bc04      	pop	{r2}
    49ac:	4690      	mov	r8, r2
    49ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    49b0:	7803      	ldrb	r3, [r0, #0]
    49b2:	2b02      	cmp	r3, #2
    49b4:	d053      	beq.n	4a5e <put_fat+0xce>
    49b6:	2b03      	cmp	r3, #3
    49b8:	d063      	beq.n	4a82 <put_fat+0xf2>
			res = FR_INT_ERR;
    49ba:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    49bc:	2b01      	cmp	r3, #1
    49be:	d002      	beq.n	49c6 <put_fat+0x36>
		fs->wflag = 1;
    49c0:	2301      	movs	r3, #1
    49c2:	713b      	strb	r3, [r7, #4]
    49c4:	e7f0      	b.n	49a8 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    49c6:	084b      	lsrs	r3, r1, #1
    49c8:	4698      	mov	r8, r3
    49ca:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    49cc:	4643      	mov	r3, r8
    49ce:	0a59      	lsrs	r1, r3, #9
    49d0:	6a03      	ldr	r3, [r0, #32]
    49d2:	469c      	mov	ip, r3
    49d4:	4461      	add	r1, ip
    49d6:	4b3b      	ldr	r3, [pc, #236]	; (4ac4 <put_fat+0x134>)
    49d8:	4798      	blx	r3
    49da:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    49dc:	d1f0      	bne.n	49c0 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    49de:	4643      	mov	r3, r8
    49e0:	05db      	lsls	r3, r3, #23
    49e2:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    49e4:	07e2      	lsls	r2, r4, #31
    49e6:	d51f      	bpl.n	4a28 <put_fat+0x98>
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	3330      	adds	r3, #48	; 0x30
    49ec:	7819      	ldrb	r1, [r3, #0]
    49ee:	220f      	movs	r2, #15
    49f0:	400a      	ands	r2, r1
    49f2:	0131      	lsls	r1, r6, #4
    49f4:	20ff      	movs	r0, #255	; 0xff
    49f6:	0100      	lsls	r0, r0, #4
    49f8:	4001      	ands	r1, r0
    49fa:	430a      	orrs	r2, r1
    49fc:	701a      	strb	r2, [r3, #0]
			bc++;
    49fe:	4644      	mov	r4, r8
    4a00:	3401      	adds	r4, #1
			fs->wflag = 1;
    4a02:	2301      	movs	r3, #1
    4a04:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a06:	0a61      	lsrs	r1, r4, #9
    4a08:	6a3b      	ldr	r3, [r7, #32]
    4a0a:	469c      	mov	ip, r3
    4a0c:	4461      	add	r1, ip
    4a0e:	0038      	movs	r0, r7
    4a10:	4b2c      	ldr	r3, [pc, #176]	; (4ac4 <put_fat+0x134>)
    4a12:	4798      	blx	r3
			if (res != FR_OK) break;
    4a14:	2800      	cmp	r0, #0
    4a16:	d151      	bne.n	4abc <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    4a18:	05e4      	lsls	r4, r4, #23
    4a1a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4a1c:	0936      	lsrs	r6, r6, #4
    4a1e:	b2f6      	uxtb	r6, r6
    4a20:	193c      	adds	r4, r7, r4
    4a22:	3430      	adds	r4, #48	; 0x30
    4a24:	7026      	strb	r6, [r4, #0]
			break;
    4a26:	e7cb      	b.n	49c0 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4a28:	18fb      	adds	r3, r7, r3
    4a2a:	3330      	adds	r3, #48	; 0x30
    4a2c:	701e      	strb	r6, [r3, #0]
			bc++;
    4a2e:	4644      	mov	r4, r8
    4a30:	3401      	adds	r4, #1
			fs->wflag = 1;
    4a32:	2301      	movs	r3, #1
    4a34:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a36:	0a61      	lsrs	r1, r4, #9
    4a38:	6a3b      	ldr	r3, [r7, #32]
    4a3a:	469c      	mov	ip, r3
    4a3c:	4461      	add	r1, ip
    4a3e:	0038      	movs	r0, r7
    4a40:	4b20      	ldr	r3, [pc, #128]	; (4ac4 <put_fat+0x134>)
    4a42:	4798      	blx	r3
			if (res != FR_OK) break;
    4a44:	2800      	cmp	r0, #0
    4a46:	d13b      	bne.n	4ac0 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    4a48:	05e4      	lsls	r4, r4, #23
    4a4a:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4a4c:	193b      	adds	r3, r7, r4
    4a4e:	3330      	adds	r3, #48	; 0x30
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	220f      	movs	r2, #15
    4a54:	4393      	bics	r3, r2
    4a56:	0536      	lsls	r6, r6, #20
    4a58:	0f36      	lsrs	r6, r6, #28
    4a5a:	431e      	orrs	r6, r3
    4a5c:	e7e0      	b.n	4a20 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4a5e:	0a09      	lsrs	r1, r1, #8
    4a60:	6a03      	ldr	r3, [r0, #32]
    4a62:	469c      	mov	ip, r3
    4a64:	4461      	add	r1, ip
    4a66:	4b17      	ldr	r3, [pc, #92]	; (4ac4 <put_fat+0x134>)
    4a68:	4798      	blx	r3
    4a6a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4a6c:	d1a8      	bne.n	49c0 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4a6e:	0063      	lsls	r3, r4, #1
    4a70:	24ff      	movs	r4, #255	; 0xff
    4a72:	0064      	lsls	r4, r4, #1
    4a74:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    4a76:	18fb      	adds	r3, r7, r3
    4a78:	3330      	adds	r3, #48	; 0x30
    4a7a:	701e      	strb	r6, [r3, #0]
    4a7c:	0a36      	lsrs	r6, r6, #8
    4a7e:	705e      	strb	r6, [r3, #1]
			break;
    4a80:	e79e      	b.n	49c0 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4a82:	09c9      	lsrs	r1, r1, #7
    4a84:	6a03      	ldr	r3, [r0, #32]
    4a86:	469c      	mov	ip, r3
    4a88:	4461      	add	r1, ip
    4a8a:	4b0e      	ldr	r3, [pc, #56]	; (4ac4 <put_fat+0x134>)
    4a8c:	4798      	blx	r3
    4a8e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4a90:	d196      	bne.n	49c0 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    4a92:	00a4      	lsls	r4, r4, #2
    4a94:	23fe      	movs	r3, #254	; 0xfe
    4a96:	005b      	lsls	r3, r3, #1
    4a98:	401c      	ands	r4, r3
    4a9a:	0022      	movs	r2, r4
    4a9c:	3230      	adds	r2, #48	; 0x30
    4a9e:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4aa0:	78d3      	ldrb	r3, [r2, #3]
    4aa2:	193c      	adds	r4, r7, r4
    4aa4:	3430      	adds	r4, #48	; 0x30
    4aa6:	091b      	lsrs	r3, r3, #4
    4aa8:	071b      	lsls	r3, r3, #28
    4aaa:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4aac:	7026      	strb	r6, [r4, #0]
    4aae:	0a33      	lsrs	r3, r6, #8
    4ab0:	7053      	strb	r3, [r2, #1]
    4ab2:	0c33      	lsrs	r3, r6, #16
    4ab4:	7093      	strb	r3, [r2, #2]
    4ab6:	0e36      	lsrs	r6, r6, #24
    4ab8:	70d6      	strb	r6, [r2, #3]
			break;
    4aba:	e781      	b.n	49c0 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4abc:	0005      	movs	r5, r0
    4abe:	e77f      	b.n	49c0 <put_fat+0x30>
    4ac0:	0005      	movs	r5, r0
    4ac2:	e77d      	b.n	49c0 <put_fat+0x30>
    4ac4:	0000474d 	.word	0x0000474d

00004ac8 <create_chain>:
{
    4ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aca:	46c6      	mov	lr, r8
    4acc:	b500      	push	{lr}
    4ace:	0005      	movs	r5, r0
    4ad0:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    4ad2:	2900      	cmp	r1, #0
    4ad4:	d107      	bne.n	4ae6 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    4ad6:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4ad8:	2e00      	cmp	r6, #0
    4ada:	d00d      	beq.n	4af8 <create_chain+0x30>
    4adc:	6983      	ldr	r3, [r0, #24]
    4ade:	429e      	cmp	r6, r3
    4ae0:	d30b      	bcc.n	4afa <create_chain+0x32>
    4ae2:	2601      	movs	r6, #1
    4ae4:	e009      	b.n	4afa <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    4ae6:	4b26      	ldr	r3, [pc, #152]	; (4b80 <create_chain+0xb8>)
    4ae8:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4aea:	2801      	cmp	r0, #1
    4aec:	d93d      	bls.n	4b6a <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4aee:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4af0:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4af2:	4298      	cmp	r0, r3
    4af4:	d201      	bcs.n	4afa <create_chain+0x32>
    4af6:	e03d      	b.n	4b74 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4af8:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    4afa:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4afc:	4f20      	ldr	r7, [pc, #128]	; (4b80 <create_chain+0xb8>)
    4afe:	e00a      	b.n	4b16 <create_chain+0x4e>
    4b00:	0021      	movs	r1, r4
    4b02:	0028      	movs	r0, r5
    4b04:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    4b06:	2800      	cmp	r0, #0
    4b08:	d00d      	beq.n	4b26 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4b0a:	1c43      	adds	r3, r0, #1
    4b0c:	d032      	beq.n	4b74 <create_chain+0xac>
    4b0e:	2801      	cmp	r0, #1
    4b10:	d030      	beq.n	4b74 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4b12:	42b4      	cmp	r4, r6
    4b14:	d02d      	beq.n	4b72 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    4b16:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    4b18:	69ab      	ldr	r3, [r5, #24]
    4b1a:	429c      	cmp	r4, r3
    4b1c:	d3f0      	bcc.n	4b00 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4b1e:	2e01      	cmp	r6, #1
    4b20:	d925      	bls.n	4b6e <create_chain+0xa6>
			ncl = 2;
    4b22:	2402      	movs	r4, #2
    4b24:	e7ec      	b.n	4b00 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4b26:	4a17      	ldr	r2, [pc, #92]	; (4b84 <create_chain+0xbc>)
    4b28:	0021      	movs	r1, r4
    4b2a:	0028      	movs	r0, r5
    4b2c:	4b16      	ldr	r3, [pc, #88]	; (4b88 <create_chain+0xc0>)
    4b2e:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4b30:	2800      	cmp	r0, #0
    4b32:	d113      	bne.n	4b5c <create_chain+0x94>
    4b34:	4643      	mov	r3, r8
    4b36:	2b00      	cmp	r3, #0
    4b38:	d109      	bne.n	4b4e <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    4b3a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4b3c:	692b      	ldr	r3, [r5, #16]
    4b3e:	1c5a      	adds	r2, r3, #1
    4b40:	d01b      	beq.n	4b7a <create_chain+0xb2>
			fs->free_clust--;
    4b42:	3b01      	subs	r3, #1
    4b44:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    4b46:	2301      	movs	r3, #1
    4b48:	716b      	strb	r3, [r5, #5]
    4b4a:	0020      	movs	r0, r4
    4b4c:	e012      	b.n	4b74 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4b4e:	0022      	movs	r2, r4
    4b50:	4641      	mov	r1, r8
    4b52:	0028      	movs	r0, r5
    4b54:	4b0c      	ldr	r3, [pc, #48]	; (4b88 <create_chain+0xc0>)
    4b56:	4798      	blx	r3
	if (res == FR_OK) {
    4b58:	2800      	cmp	r0, #0
    4b5a:	d0ee      	beq.n	4b3a <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4b5c:	3801      	subs	r0, #1
    4b5e:	4242      	negs	r2, r0
    4b60:	4142      	adcs	r2, r0
    4b62:	4250      	negs	r0, r2
    4b64:	2301      	movs	r3, #1
    4b66:	4318      	orrs	r0, r3
    4b68:	e004      	b.n	4b74 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4b6a:	2001      	movs	r0, #1
    4b6c:	e002      	b.n	4b74 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4b6e:	2000      	movs	r0, #0
    4b70:	e000      	b.n	4b74 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4b72:	2000      	movs	r0, #0
}
    4b74:	bc04      	pop	{r2}
    4b76:	4690      	mov	r8, r2
    4b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b7a:	0020      	movs	r0, r4
    4b7c:	e7fa      	b.n	4b74 <create_chain+0xac>
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	000047ed 	.word	0x000047ed
    4b84:	0fffffff 	.word	0x0fffffff
    4b88:	00004991 	.word	0x00004991

00004b8c <remove_chain>:
{
    4b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b8e:	46ce      	mov	lr, r9
    4b90:	4647      	mov	r7, r8
    4b92:	b580      	push	{r7, lr}
    4b94:	0004      	movs	r4, r0
    4b96:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4b98:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4b9a:	2901      	cmp	r1, #1
    4b9c:	d902      	bls.n	4ba4 <remove_chain+0x18>
    4b9e:	69a3      	ldr	r3, [r4, #24]
    4ba0:	4299      	cmp	r1, r3
    4ba2:	d303      	bcc.n	4bac <remove_chain+0x20>
}
    4ba4:	bc0c      	pop	{r2, r3}
    4ba6:	4690      	mov	r8, r2
    4ba8:	4699      	mov	r9, r3
    4baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4bac:	4f13      	ldr	r7, [pc, #76]	; (4bfc <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4bae:	4b14      	ldr	r3, [pc, #80]	; (4c00 <remove_chain+0x74>)
    4bb0:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    4bb2:	2301      	movs	r3, #1
    4bb4:	4699      	mov	r9, r3
    4bb6:	e003      	b.n	4bc0 <remove_chain+0x34>
    4bb8:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4bba:	69a3      	ldr	r3, [r4, #24]
    4bbc:	42b3      	cmp	r3, r6
    4bbe:	d9f1      	bls.n	4ba4 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4bc0:	0029      	movs	r1, r5
    4bc2:	0020      	movs	r0, r4
    4bc4:	47b8      	blx	r7
    4bc6:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4bc8:	d011      	beq.n	4bee <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4bca:	2801      	cmp	r0, #1
    4bcc:	d011      	beq.n	4bf2 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4bce:	1c43      	adds	r3, r0, #1
    4bd0:	d011      	beq.n	4bf6 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4bd2:	2200      	movs	r2, #0
    4bd4:	0029      	movs	r1, r5
    4bd6:	0020      	movs	r0, r4
    4bd8:	47c0      	blx	r8
			if (res != FR_OK) break;
    4bda:	2800      	cmp	r0, #0
    4bdc:	d1e2      	bne.n	4ba4 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4bde:	6923      	ldr	r3, [r4, #16]
    4be0:	1c5a      	adds	r2, r3, #1
    4be2:	d0e9      	beq.n	4bb8 <remove_chain+0x2c>
				fs->free_clust++;
    4be4:	3301      	adds	r3, #1
    4be6:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    4be8:	464b      	mov	r3, r9
    4bea:	7163      	strb	r3, [r4, #5]
    4bec:	e7e4      	b.n	4bb8 <remove_chain+0x2c>
    4bee:	2000      	movs	r0, #0
    4bf0:	e7d8      	b.n	4ba4 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4bf2:	2002      	movs	r0, #2
    4bf4:	e7d6      	b.n	4ba4 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4bf6:	2001      	movs	r0, #1
    4bf8:	e7d4      	b.n	4ba4 <remove_chain+0x18>
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	000047ed 	.word	0x000047ed
    4c00:	00004991 	.word	0x00004991

00004c04 <dir_next>:
{
    4c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c06:	46d6      	mov	lr, sl
    4c08:	4647      	mov	r7, r8
    4c0a:	b580      	push	{r7, lr}
    4c0c:	0006      	movs	r6, r0
    4c0e:	000d      	movs	r5, r1
	i = dj->index + 1;
    4c10:	88c4      	ldrh	r4, [r0, #6]
    4c12:	3401      	adds	r4, #1
    4c14:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    4c16:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4c18:	2c00      	cmp	r4, #0
    4c1a:	d103      	bne.n	4c24 <dir_next+0x20>
}
    4c1c:	bc0c      	pop	{r2, r3}
    4c1e:	4690      	mov	r8, r2
    4c20:	469a      	mov	sl, r3
    4c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4c24:	6933      	ldr	r3, [r6, #16]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d0f8      	beq.n	4c1c <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    4c2a:	270f      	movs	r7, #15
    4c2c:	4027      	ands	r7, r4
    4c2e:	d10f      	bne.n	4c50 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4c30:	3301      	adds	r3, #1
    4c32:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4c34:	68f1      	ldr	r1, [r6, #12]
    4c36:	2900      	cmp	r1, #0
    4c38:	d104      	bne.n	4c44 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4c3a:	6833      	ldr	r3, [r6, #0]
    4c3c:	891b      	ldrh	r3, [r3, #8]
    4c3e:	42a3      	cmp	r3, r4
    4c40:	d9ec      	bls.n	4c1c <dir_next+0x18>
    4c42:	e005      	b.n	4c50 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4c44:	6830      	ldr	r0, [r6, #0]
    4c46:	7883      	ldrb	r3, [r0, #2]
    4c48:	3b01      	subs	r3, #1
    4c4a:	0922      	lsrs	r2, r4, #4
    4c4c:	421a      	tst	r2, r3
    4c4e:	d007      	beq.n	4c60 <dir_next+0x5c>
	dj->index = i;
    4c50:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4c52:	6833      	ldr	r3, [r6, #0]
    4c54:	3330      	adds	r3, #48	; 0x30
    4c56:	017f      	lsls	r7, r7, #5
    4c58:	19df      	adds	r7, r3, r7
    4c5a:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4c5c:	2000      	movs	r0, #0
    4c5e:	e7dd      	b.n	4c1c <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4c60:	4b2c      	ldr	r3, [pc, #176]	; (4d14 <dir_next+0x110>)
    4c62:	4798      	blx	r3
    4c64:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    4c66:	2002      	movs	r0, #2
    4c68:	4643      	mov	r3, r8
    4c6a:	2b01      	cmp	r3, #1
    4c6c:	d9d6      	bls.n	4c1c <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4c6e:	3301      	adds	r3, #1
    4c70:	d04b      	beq.n	4d0a <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    4c72:	6833      	ldr	r3, [r6, #0]
    4c74:	699a      	ldr	r2, [r3, #24]
    4c76:	4590      	cmp	r8, r2
    4c78:	d33f      	bcc.n	4cfa <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4c7a:	3002      	adds	r0, #2
    4c7c:	2d00      	cmp	r5, #0
    4c7e:	d0cd      	beq.n	4c1c <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4c80:	68f1      	ldr	r1, [r6, #12]
    4c82:	0018      	movs	r0, r3
    4c84:	4b24      	ldr	r3, [pc, #144]	; (4d18 <dir_next+0x114>)
    4c86:	4798      	blx	r3
    4c88:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4c8a:	2007      	movs	r0, #7
    4c8c:	4643      	mov	r3, r8
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d0c4      	beq.n	4c1c <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    4c92:	3805      	subs	r0, #5
    4c94:	2b01      	cmp	r3, #1
    4c96:	d0c1      	beq.n	4c1c <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4c98:	3801      	subs	r0, #1
    4c9a:	3301      	adds	r3, #1
    4c9c:	d0be      	beq.n	4c1c <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4c9e:	2100      	movs	r1, #0
    4ca0:	6830      	ldr	r0, [r6, #0]
    4ca2:	4b1e      	ldr	r3, [pc, #120]	; (4d1c <dir_next+0x118>)
    4ca4:	4798      	blx	r3
    4ca6:	0003      	movs	r3, r0
    4ca8:	2001      	movs	r0, #1
    4caa:	2b00      	cmp	r3, #0
    4cac:	d1b6      	bne.n	4c1c <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4cae:	6830      	ldr	r0, [r6, #0]
    4cb0:	3030      	adds	r0, #48	; 0x30
    4cb2:	2280      	movs	r2, #128	; 0x80
    4cb4:	0092      	lsls	r2, r2, #2
    4cb6:	2100      	movs	r1, #0
    4cb8:	4b19      	ldr	r3, [pc, #100]	; (4d20 <dir_next+0x11c>)
    4cba:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4cbc:	6835      	ldr	r5, [r6, #0]
    4cbe:	4641      	mov	r1, r8
    4cc0:	0028      	movs	r0, r5
    4cc2:	4b18      	ldr	r3, [pc, #96]	; (4d24 <dir_next+0x120>)
    4cc4:	4798      	blx	r3
    4cc6:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4cc8:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4cca:	2301      	movs	r3, #1
    4ccc:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4cce:	6833      	ldr	r3, [r6, #0]
    4cd0:	789a      	ldrb	r2, [r3, #2]
    4cd2:	42aa      	cmp	r2, r5
    4cd4:	d90e      	bls.n	4cf4 <dir_next+0xf0>
						dj->fs->wflag = 1;
    4cd6:	4652      	mov	r2, sl
    4cd8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4cda:	2100      	movs	r1, #0
    4cdc:	6830      	ldr	r0, [r6, #0]
    4cde:	4b0f      	ldr	r3, [pc, #60]	; (4d1c <dir_next+0x118>)
    4ce0:	4798      	blx	r3
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d113      	bne.n	4d0e <dir_next+0x10a>
						dj->fs->winsect++;
    4ce6:	6832      	ldr	r2, [r6, #0]
    4ce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4cea:	3301      	adds	r3, #1
    4cec:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4cee:	3501      	adds	r5, #1
    4cf0:	b2ed      	uxtb	r5, r5
    4cf2:	e7ec      	b.n	4cce <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4cf6:	1b52      	subs	r2, r2, r5
    4cf8:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    4cfa:	4643      	mov	r3, r8
    4cfc:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4cfe:	4641      	mov	r1, r8
    4d00:	6830      	ldr	r0, [r6, #0]
    4d02:	4b08      	ldr	r3, [pc, #32]	; (4d24 <dir_next+0x120>)
    4d04:	4798      	blx	r3
    4d06:	6130      	str	r0, [r6, #16]
    4d08:	e7a2      	b.n	4c50 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4d0a:	2001      	movs	r0, #1
    4d0c:	e786      	b.n	4c1c <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4d0e:	2001      	movs	r0, #1
    4d10:	e784      	b.n	4c1c <dir_next+0x18>
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	000047ed 	.word	0x000047ed
    4d18:	00004ac9 	.word	0x00004ac9
    4d1c:	0000474d 	.word	0x0000474d
    4d20:	00004281 	.word	0x00004281
    4d24:	00004293 	.word	0x00004293

00004d28 <dir_find>:
{
    4d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d2a:	46de      	mov	lr, fp
    4d2c:	4657      	mov	r7, sl
    4d2e:	464e      	mov	r6, r9
    4d30:	4645      	mov	r5, r8
    4d32:	b5e0      	push	{r5, r6, r7, lr}
    4d34:	b083      	sub	sp, #12
    4d36:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4d38:	2100      	movs	r1, #0
    4d3a:	4b5a      	ldr	r3, [pc, #360]	; (4ea4 <dir_find+0x17c>)
    4d3c:	4798      	blx	r3
    4d3e:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4d40:	d000      	beq.n	4d44 <dir_find+0x1c>
    4d42:	e09e      	b.n	4e82 <dir_find+0x15a>
    4d44:	23ff      	movs	r3, #255	; 0xff
    4d46:	4699      	mov	r9, r3
    4d48:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4d4a:	4b57      	ldr	r3, [pc, #348]	; (4ea8 <dir_find+0x180>)
    4d4c:	469b      	mov	fp, r3
    4d4e:	e01b      	b.n	4d88 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4d50:	2b0f      	cmp	r3, #15
    4d52:	d030      	beq.n	4db6 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4d54:	4653      	mov	r3, sl
    4d56:	2b00      	cmp	r3, #0
    4d58:	d105      	bne.n	4d66 <dir_find+0x3e>
    4d5a:	0020      	movs	r0, r4
    4d5c:	4b53      	ldr	r3, [pc, #332]	; (4eac <dir_find+0x184>)
    4d5e:	4798      	blx	r3
    4d60:	4581      	cmp	r9, r0
    4d62:	d100      	bne.n	4d66 <dir_find+0x3e>
    4d64:	e08d      	b.n	4e82 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4d66:	2301      	movs	r3, #1
    4d68:	425b      	negs	r3, r3
    4d6a:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4d6c:	69a8      	ldr	r0, [r5, #24]
    4d6e:	7ac3      	ldrb	r3, [r0, #11]
    4d70:	07db      	lsls	r3, r3, #31
    4d72:	d400      	bmi.n	4d76 <dir_find+0x4e>
    4d74:	e07d      	b.n	4e72 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4d76:	23ff      	movs	r3, #255	; 0xff
    4d78:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4d7a:	2100      	movs	r1, #0
    4d7c:	0028      	movs	r0, r5
    4d7e:	4b4c      	ldr	r3, [pc, #304]	; (4eb0 <dir_find+0x188>)
    4d80:	4798      	blx	r3
    4d82:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    4d84:	d000      	beq.n	4d88 <dir_find+0x60>
    4d86:	e07c      	b.n	4e82 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4d88:	6929      	ldr	r1, [r5, #16]
    4d8a:	6828      	ldr	r0, [r5, #0]
    4d8c:	47d8      	blx	fp
    4d8e:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4d90:	d177      	bne.n	4e82 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    4d92:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    4d94:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4d96:	2e00      	cmp	r6, #0
    4d98:	d100      	bne.n	4d9c <dir_find+0x74>
    4d9a:	e080      	b.n	4e9e <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4d9c:	7ae2      	ldrb	r2, [r4, #11]
    4d9e:	233f      	movs	r3, #63	; 0x3f
    4da0:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    4da2:	2ee5      	cmp	r6, #229	; 0xe5
    4da4:	d100      	bne.n	4da8 <dir_find+0x80>
    4da6:	e077      	b.n	4e98 <dir_find+0x170>
    4da8:	0712      	lsls	r2, r2, #28
    4daa:	d5d1      	bpl.n	4d50 <dir_find+0x28>
    4dac:	2b0f      	cmp	r3, #15
    4dae:	d002      	beq.n	4db6 <dir_find+0x8e>
			ord = 0xFF;
    4db0:	23ff      	movs	r3, #255	; 0xff
    4db2:	469a      	mov	sl, r3
    4db4:	e7e1      	b.n	4d7a <dir_find+0x52>
				if (dj->lfn) {
    4db6:	69ef      	ldr	r7, [r5, #28]
    4db8:	2f00      	cmp	r7, #0
    4dba:	d0de      	beq.n	4d7a <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4dbc:	0673      	lsls	r3, r6, #25
    4dbe:	d518      	bpl.n	4df2 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4dc0:	7b63      	ldrb	r3, [r4, #13]
    4dc2:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    4dc4:	2340      	movs	r3, #64	; 0x40
    4dc6:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4dc8:	88eb      	ldrh	r3, [r5, #6]
    4dca:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4dcc:	7b63      	ldrb	r3, [r4, #13]
    4dce:	9300      	str	r3, [sp, #0]
    4dd0:	22ff      	movs	r2, #255	; 0xff
    4dd2:	4692      	mov	sl, r2
    4dd4:	454b      	cmp	r3, r9
    4dd6:	d1d0      	bne.n	4d7a <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    4dd8:	7823      	ldrb	r3, [r4, #0]
    4dda:	3abf      	subs	r2, #191	; 0xbf
    4ddc:	4393      	bics	r3, r2
    4dde:	3b01      	subs	r3, #1
    4de0:	005a      	lsls	r2, r3, #1
    4de2:	18d2      	adds	r2, r2, r3
    4de4:	0092      	lsls	r2, r2, #2
    4de6:	4692      	mov	sl, r2
    4de8:	449a      	add	sl, r3
	s = 0; wc = 1;
    4dea:	2201      	movs	r2, #1
    4dec:	2300      	movs	r3, #0
    4dee:	4699      	mov	r9, r3
    4df0:	e01d      	b.n	4e2e <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4df2:	45b2      	cmp	sl, r6
    4df4:	d0ea      	beq.n	4dcc <dir_find+0xa4>
    4df6:	23ff      	movs	r3, #255	; 0xff
    4df8:	469a      	mov	sl, r3
    4dfa:	e7be      	b.n	4d7a <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4dfc:	4b2d      	ldr	r3, [pc, #180]	; (4eb4 <dir_find+0x18c>)
    4dfe:	4798      	blx	r3
    4e00:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4e02:	4653      	mov	r3, sl
    4e04:	2bfe      	cmp	r3, #254	; 0xfe
    4e06:	d81f      	bhi.n	4e48 <dir_find+0x120>
    4e08:	2301      	movs	r3, #1
    4e0a:	4453      	add	r3, sl
    4e0c:	4698      	mov	r8, r3
    4e0e:	4653      	mov	r3, sl
    4e10:	005b      	lsls	r3, r3, #1
    4e12:	5bd8      	ldrh	r0, [r3, r7]
    4e14:	4b27      	ldr	r3, [pc, #156]	; (4eb4 <dir_find+0x18c>)
    4e16:	4798      	blx	r3
    4e18:	0002      	movs	r2, r0
    4e1a:	9b01      	ldr	r3, [sp, #4]
    4e1c:	4283      	cmp	r3, r0
    4e1e:	d113      	bne.n	4e48 <dir_find+0x120>
    4e20:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4e22:	2301      	movs	r3, #1
    4e24:	469c      	mov	ip, r3
    4e26:	44e1      	add	r9, ip
    4e28:	464b      	mov	r3, r9
    4e2a:	2b0d      	cmp	r3, #13
    4e2c:	d011      	beq.n	4e52 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4e2e:	4b22      	ldr	r3, [pc, #136]	; (4eb8 <dir_find+0x190>)
    4e30:	4649      	mov	r1, r9
    4e32:	5cc9      	ldrb	r1, [r1, r3]
    4e34:	1863      	adds	r3, r4, r1
    4e36:	785b      	ldrb	r3, [r3, #1]
    4e38:	021b      	lsls	r3, r3, #8
    4e3a:	5c60      	ldrb	r0, [r4, r1]
    4e3c:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4e3e:	2a00      	cmp	r2, #0
    4e40:	d1dc      	bne.n	4dfc <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4e42:	4b1e      	ldr	r3, [pc, #120]	; (4ebc <dir_find+0x194>)
    4e44:	4298      	cmp	r0, r3
    4e46:	d0ec      	beq.n	4e22 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4e48:	9b00      	ldr	r3, [sp, #0]
    4e4a:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4e4c:	23ff      	movs	r3, #255	; 0xff
    4e4e:	469a      	mov	sl, r3
    4e50:	e793      	b.n	4d7a <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4e52:	7823      	ldrb	r3, [r4, #0]
    4e54:	065b      	lsls	r3, r3, #25
    4e56:	d506      	bpl.n	4e66 <dir_find+0x13e>
    4e58:	2a00      	cmp	r2, #0
    4e5a:	d004      	beq.n	4e66 <dir_find+0x13e>
    4e5c:	4653      	mov	r3, sl
    4e5e:	005b      	lsls	r3, r3, #1
    4e60:	5bdb      	ldrh	r3, [r3, r7]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d1f0      	bne.n	4e48 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4e66:	3e01      	subs	r6, #1
    4e68:	b2f3      	uxtb	r3, r6
    4e6a:	469a      	mov	sl, r3
    4e6c:	9b00      	ldr	r3, [sp, #0]
    4e6e:	4699      	mov	r9, r3
    4e70:	e783      	b.n	4d7a <dir_find+0x52>
    4e72:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4e74:	5ce1      	ldrb	r1, [r4, r3]
    4e76:	5cc2      	ldrb	r2, [r0, r3]
    4e78:	4291      	cmp	r1, r2
    4e7a:	d10a      	bne.n	4e92 <dir_find+0x16a>
    4e7c:	3301      	adds	r3, #1
    4e7e:	2b0b      	cmp	r3, #11
    4e80:	d1f8      	bne.n	4e74 <dir_find+0x14c>
}
    4e82:	0038      	movs	r0, r7
    4e84:	b003      	add	sp, #12
    4e86:	bc3c      	pop	{r2, r3, r4, r5}
    4e88:	4690      	mov	r8, r2
    4e8a:	4699      	mov	r9, r3
    4e8c:	46a2      	mov	sl, r4
    4e8e:	46ab      	mov	fp, r5
    4e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4e92:	23ff      	movs	r3, #255	; 0xff
    4e94:	469a      	mov	sl, r3
    4e96:	e770      	b.n	4d7a <dir_find+0x52>
			ord = 0xFF;
    4e98:	23ff      	movs	r3, #255	; 0xff
    4e9a:	469a      	mov	sl, r3
    4e9c:	e76d      	b.n	4d7a <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4e9e:	2704      	movs	r7, #4
    4ea0:	e7ef      	b.n	4e82 <dir_find+0x15a>
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	000048e9 	.word	0x000048e9
    4ea8:	0000474d 	.word	0x0000474d
    4eac:	000042ab 	.word	0x000042ab
    4eb0:	00004c05 	.word	0x00004c05
    4eb4:	00005c41 	.word	0x00005c41
    4eb8:	0000a770 	.word	0x0000a770
    4ebc:	0000ffff 	.word	0x0000ffff

00004ec0 <dir_register>:
{
    4ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ec2:	46de      	mov	lr, fp
    4ec4:	4657      	mov	r7, sl
    4ec6:	464e      	mov	r6, r9
    4ec8:	4645      	mov	r5, r8
    4eca:	b5e0      	push	{r5, r6, r7, lr}
    4ecc:	b089      	sub	sp, #36	; 0x24
    4ece:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4ed0:	6987      	ldr	r7, [r0, #24]
    4ed2:	69c3      	ldr	r3, [r0, #28]
    4ed4:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4ed6:	ad05      	add	r5, sp, #20
    4ed8:	220c      	movs	r2, #12
    4eda:	0039      	movs	r1, r7
    4edc:	0028      	movs	r0, r5
    4ede:	4ba7      	ldr	r3, [pc, #668]	; (517c <dir_register+0x2bc>)
    4ee0:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4ee2:	7aeb      	ldrb	r3, [r5, #11]
    4ee4:	07db      	lsls	r3, r3, #31
    4ee6:	d400      	bmi.n	4eea <dir_register+0x2a>
    4ee8:	e070      	b.n	4fcc <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4eea:	2300      	movs	r3, #0
    4eec:	72fb      	strb	r3, [r7, #11]
    4eee:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4ef0:	220b      	movs	r2, #11
    4ef2:	a905      	add	r1, sp, #20
    4ef4:	0038      	movs	r0, r7
    4ef6:	4ba1      	ldr	r3, [pc, #644]	; (517c <dir_register+0x2bc>)
    4ef8:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4efa:	2301      	movs	r3, #1
		ns[i--] = c;
    4efc:	ad03      	add	r5, sp, #12
    4efe:	001e      	movs	r6, r3
    4f00:	46a0      	mov	r8, r4
    4f02:	e049      	b.n	4f98 <dir_register+0xd8>
    4f04:	3801      	subs	r0, #1
    4f06:	1829      	adds	r1, r5, r0
    4f08:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4f0a:	091b      	lsrs	r3, r3, #4
    4f0c:	b29b      	uxth	r3, r3
	} while (seq);
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d007      	beq.n	4f22 <dir_register+0x62>
		c = (seq % 16) + '0';
    4f12:	0021      	movs	r1, r4
    4f14:	4019      	ands	r1, r3
    4f16:	000a      	movs	r2, r1
    4f18:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4f1a:	2a39      	cmp	r2, #57	; 0x39
    4f1c:	d9f2      	bls.n	4f04 <dir_register+0x44>
    4f1e:	3207      	adds	r2, #7
    4f20:	e7f0      	b.n	4f04 <dir_register+0x44>
	ns[i] = '~';
    4f22:	337e      	adds	r3, #126	; 0x7e
    4f24:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4f26:	2800      	cmp	r0, #0
    4f28:	d00a      	beq.n	4f40 <dir_register+0x80>
    4f2a:	783b      	ldrb	r3, [r7, #0]
    4f2c:	2b20      	cmp	r3, #32
    4f2e:	d009      	beq.n	4f44 <dir_register+0x84>
    4f30:	2300      	movs	r3, #0
    4f32:	3301      	adds	r3, #1
    4f34:	4298      	cmp	r0, r3
    4f36:	d007      	beq.n	4f48 <dir_register+0x88>
    4f38:	5cfa      	ldrb	r2, [r7, r3]
    4f3a:	2a20      	cmp	r2, #32
    4f3c:	d1f9      	bne.n	4f32 <dir_register+0x72>
    4f3e:	e009      	b.n	4f54 <dir_register+0x94>
    4f40:	0003      	movs	r3, r0
    4f42:	e007      	b.n	4f54 <dir_register+0x94>
    4f44:	2300      	movs	r3, #0
    4f46:	e005      	b.n	4f54 <dir_register+0x94>
    4f48:	0003      	movs	r3, r0
    4f4a:	e003      	b.n	4f54 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4f4c:	54fa      	strb	r2, [r7, r3]
    4f4e:	3301      	adds	r3, #1
	} while (j < 8);
    4f50:	2b07      	cmp	r3, #7
    4f52:	d805      	bhi.n	4f60 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4f54:	2220      	movs	r2, #32
    4f56:	2807      	cmp	r0, #7
    4f58:	d8f8      	bhi.n	4f4c <dir_register+0x8c>
    4f5a:	5c2a      	ldrb	r2, [r5, r0]
    4f5c:	3001      	adds	r0, #1
    4f5e:	e7f5      	b.n	4f4c <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4f60:	4640      	mov	r0, r8
    4f62:	4b87      	ldr	r3, [pc, #540]	; (5180 <dir_register+0x2c0>)
    4f64:	4798      	blx	r3
			if (res != FR_OK) break;
    4f66:	2800      	cmp	r0, #0
    4f68:	d11c      	bne.n	4fa4 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4f6a:	3601      	adds	r6, #1
    4f6c:	b2b6      	uxth	r6, r6
    4f6e:	2e64      	cmp	r6, #100	; 0x64
    4f70:	d015      	beq.n	4f9e <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4f72:	220b      	movs	r2, #11
    4f74:	a905      	add	r1, sp, #20
    4f76:	0038      	movs	r0, r7
    4f78:	4b80      	ldr	r3, [pc, #512]	; (517c <dir_register+0x2bc>)
    4f7a:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4f7c:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4f7e:	2e05      	cmp	r6, #5
    4f80:	d90a      	bls.n	4f98 <dir_register+0xd8>
    4f82:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4f84:	085a      	lsrs	r2, r3, #1
    4f86:	03db      	lsls	r3, r3, #15
    4f88:	4313      	orrs	r3, r2
    4f8a:	880a      	ldrh	r2, [r1, #0]
    4f8c:	189b      	adds	r3, r3, r2
    4f8e:	b29b      	uxth	r3, r3
    4f90:	3102      	adds	r1, #2
    4f92:	880a      	ldrh	r2, [r1, #0]
    4f94:	2a00      	cmp	r2, #0
    4f96:	d1f5      	bne.n	4f84 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4f98:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4f9a:	240f      	movs	r4, #15
    4f9c:	e7b9      	b.n	4f12 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4f9e:	2307      	movs	r3, #7
    4fa0:	4698      	mov	r8, r3
    4fa2:	e006      	b.n	4fb2 <dir_register+0xf2>
    4fa4:	4644      	mov	r4, r8
    4fa6:	4680      	mov	r8, r0
    4fa8:	2e64      	cmp	r6, #100	; 0x64
    4faa:	d100      	bne.n	4fae <dir_register+0xee>
    4fac:	e0a5      	b.n	50fa <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4fae:	2804      	cmp	r0, #4
    4fb0:	d007      	beq.n	4fc2 <dir_register+0x102>
}
    4fb2:	4640      	mov	r0, r8
    4fb4:	b009      	add	sp, #36	; 0x24
    4fb6:	bc3c      	pop	{r2, r3, r4, r5}
    4fb8:	4690      	mov	r8, r2
    4fba:	4699      	mov	r9, r3
    4fbc:	46a2      	mov	sl, r4
    4fbe:	46ab      	mov	fp, r5
    4fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4fc2:	ab05      	add	r3, sp, #20
    4fc4:	7adb      	ldrb	r3, [r3, #11]
    4fc6:	72fb      	strb	r3, [r7, #11]
    4fc8:	4653      	mov	r3, sl
    4fca:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4fcc:	ab05      	add	r3, sp, #20
    4fce:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4fd0:	2201      	movs	r2, #1
    4fd2:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4fd4:	079b      	lsls	r3, r3, #30
    4fd6:	d511      	bpl.n	4ffc <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4fd8:	4653      	mov	r3, sl
    4fda:	881b      	ldrh	r3, [r3, #0]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d01b      	beq.n	5018 <dir_register+0x158>
    4fe0:	2000      	movs	r0, #0
    4fe2:	4652      	mov	r2, sl
    4fe4:	3001      	adds	r0, #1
    4fe6:	b280      	uxth	r0, r0
    4fe8:	0043      	lsls	r3, r0, #1
    4fea:	5a9b      	ldrh	r3, [r3, r2]
    4fec:	2b00      	cmp	r3, #0
    4fee:	d1f9      	bne.n	4fe4 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4ff0:	3019      	adds	r0, #25
    4ff2:	210d      	movs	r1, #13
    4ff4:	4b63      	ldr	r3, [pc, #396]	; (5184 <dir_register+0x2c4>)
    4ff6:	4798      	blx	r3
    4ff8:	b283      	uxth	r3, r0
    4ffa:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4ffc:	2100      	movs	r1, #0
    4ffe:	0020      	movs	r0, r4
    5000:	4b61      	ldr	r3, [pc, #388]	; (5188 <dir_register+0x2c8>)
    5002:	4798      	blx	r3
    5004:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    5006:	2800      	cmp	r0, #0
    5008:	d1d3      	bne.n	4fb2 <dir_register+0xf2>
    500a:	4682      	mov	sl, r0
    500c:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    500e:	4f5f      	ldr	r7, [pc, #380]	; (518c <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    5010:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    5012:	4b5f      	ldr	r3, [pc, #380]	; (5190 <dir_register+0x2d0>)
    5014:	4699      	mov	r9, r3
    5016:	e00b      	b.n	5030 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    5018:	2000      	movs	r0, #0
    501a:	e7e9      	b.n	4ff0 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    501c:	1c6b      	adds	r3, r5, #1
    501e:	b29b      	uxth	r3, r3
    5020:	459b      	cmp	fp, r3
    5022:	d06d      	beq.n	5100 <dir_register+0x240>
    5024:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    5026:	2101      	movs	r1, #1
    5028:	0020      	movs	r0, r4
    502a:	47c8      	blx	r9
	} while (res == FR_OK);
    502c:	2800      	cmp	r0, #0
    502e:	d112      	bne.n	5056 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    5030:	6921      	ldr	r1, [r4, #16]
    5032:	6820      	ldr	r0, [r4, #0]
    5034:	47b8      	blx	r7
		if (res != FR_OK) break;
    5036:	2800      	cmp	r0, #0
    5038:	d000      	beq.n	503c <dir_register+0x17c>
    503a:	e098      	b.n	516e <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    503c:	6963      	ldr	r3, [r4, #20]
    503e:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    5040:	2be5      	cmp	r3, #229	; 0xe5
    5042:	d001      	beq.n	5048 <dir_register+0x188>
    5044:	2b00      	cmp	r3, #0
    5046:	d104      	bne.n	5052 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    5048:	2d00      	cmp	r5, #0
    504a:	d1e7      	bne.n	501c <dir_register+0x15c>
    504c:	88e3      	ldrh	r3, [r4, #6]
    504e:	469a      	mov	sl, r3
    5050:	e7e4      	b.n	501c <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    5052:	0035      	movs	r5, r6
    5054:	e7e7      	b.n	5026 <dir_register+0x166>
    5056:	4680      	mov	r8, r0
    5058:	e7ab      	b.n	4fb2 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    505a:	4651      	mov	r1, sl
    505c:	0020      	movs	r0, r4
    505e:	4b4a      	ldr	r3, [pc, #296]	; (5188 <dir_register+0x2c8>)
    5060:	4798      	blx	r3
    5062:	4680      	mov	r8, r0
		if (res == FR_OK) {
    5064:	2800      	cmp	r0, #0
    5066:	d1a4      	bne.n	4fb2 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    5068:	69a0      	ldr	r0, [r4, #24]
    506a:	4b4a      	ldr	r3, [pc, #296]	; (5194 <dir_register+0x2d4>)
    506c:	4798      	blx	r3
    506e:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    5070:	46a8      	mov	r8, r5
    5072:	e01f      	b.n	50b4 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5074:	0022      	movs	r2, r4
    5076:	e067      	b.n	5148 <dir_register+0x288>
    5078:	465e      	mov	r6, fp
    507a:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    507c:	4946      	ldr	r1, [pc, #280]	; (5198 <dir_register+0x2d8>)
    507e:	428b      	cmp	r3, r1
    5080:	d003      	beq.n	508a <dir_register+0x1ca>
    5082:	0052      	lsls	r2, r2, #1
    5084:	5b93      	ldrh	r3, [r2, r6]
    5086:	2b00      	cmp	r3, #0
    5088:	d103      	bne.n	5092 <dir_register+0x1d2>
    508a:	2340      	movs	r3, #64	; 0x40
    508c:	464a      	mov	r2, r9
    508e:	431a      	orrs	r2, r3
    5090:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    5092:	464b      	mov	r3, r9
    5094:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    5096:	2301      	movs	r3, #1
    5098:	6822      	ldr	r2, [r4, #0]
    509a:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    509c:	2100      	movs	r1, #0
    509e:	0020      	movs	r0, r4
    50a0:	4b3b      	ldr	r3, [pc, #236]	; (5190 <dir_register+0x2d0>)
    50a2:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    50a4:	2800      	cmp	r0, #0
    50a6:	d166      	bne.n	5176 <dir_register+0x2b6>
    50a8:	4645      	mov	r5, r8
    50aa:	3d01      	subs	r5, #1
    50ac:	b2ab      	uxth	r3, r5
    50ae:	4698      	mov	r8, r3
    50b0:	2b00      	cmp	r3, #0
    50b2:	d027      	beq.n	5104 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    50b4:	6921      	ldr	r1, [r4, #16]
    50b6:	6820      	ldr	r0, [r4, #0]
    50b8:	4b34      	ldr	r3, [pc, #208]	; (518c <dir_register+0x2cc>)
    50ba:	4798      	blx	r3
				if (res != FR_OK) break;
    50bc:	2800      	cmp	r0, #0
    50be:	d158      	bne.n	5172 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    50c0:	69e6      	ldr	r6, [r4, #28]
    50c2:	6960      	ldr	r0, [r4, #20]
    50c4:	4643      	mov	r3, r8
    50c6:	466a      	mov	r2, sp
    50c8:	70d3      	strb	r3, [r2, #3]
    50ca:	78d3      	ldrb	r3, [r2, #3]
    50cc:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    50ce:	7913      	ldrb	r3, [r2, #4]
    50d0:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    50d2:	230f      	movs	r3, #15
    50d4:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    50d6:	2300      	movs	r3, #0
    50d8:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    50da:	7683      	strb	r3, [r0, #26]
    50dc:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    50de:	464b      	mov	r3, r9
    50e0:	3b01      	subs	r3, #1
    50e2:	005a      	lsls	r2, r3, #1
    50e4:	18d2      	adds	r2, r2, r3
    50e6:	0092      	lsls	r2, r2, #2
    50e8:	18d2      	adds	r2, r2, r3
    50ea:	492c      	ldr	r1, [pc, #176]	; (519c <dir_register+0x2dc>)
    50ec:	000d      	movs	r5, r1
    50ee:	350d      	adds	r5, #13
	s = wc = 0;
    50f0:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    50f2:	4f29      	ldr	r7, [pc, #164]	; (5198 <dir_register+0x2d8>)
    50f4:	46b3      	mov	fp, r6
    50f6:	46a4      	mov	ip, r4
    50f8:	e029      	b.n	514e <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    50fa:	2307      	movs	r3, #7
    50fc:	4698      	mov	r8, r3
    50fe:	e758      	b.n	4fb2 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    5100:	2b01      	cmp	r3, #1
    5102:	d8aa      	bhi.n	505a <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    5104:	6921      	ldr	r1, [r4, #16]
    5106:	6820      	ldr	r0, [r4, #0]
    5108:	4b20      	ldr	r3, [pc, #128]	; (518c <dir_register+0x2cc>)
    510a:	4798      	blx	r3
    510c:	4680      	mov	r8, r0
		if (res == FR_OK) {
    510e:	2800      	cmp	r0, #0
    5110:	d000      	beq.n	5114 <dir_register+0x254>
    5112:	e74e      	b.n	4fb2 <dir_register+0xf2>
			dir = dj->dir;
    5114:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    5116:	2220      	movs	r2, #32
    5118:	2100      	movs	r1, #0
    511a:	0028      	movs	r0, r5
    511c:	4b20      	ldr	r3, [pc, #128]	; (51a0 <dir_register+0x2e0>)
    511e:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    5120:	220b      	movs	r2, #11
    5122:	69a1      	ldr	r1, [r4, #24]
    5124:	0028      	movs	r0, r5
    5126:	4b15      	ldr	r3, [pc, #84]	; (517c <dir_register+0x2bc>)
    5128:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    512a:	69a3      	ldr	r3, [r4, #24]
    512c:	7ada      	ldrb	r2, [r3, #11]
    512e:	2318      	movs	r3, #24
    5130:	4013      	ands	r3, r2
    5132:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    5134:	6823      	ldr	r3, [r4, #0]
    5136:	2201      	movs	r2, #1
    5138:	711a      	strb	r2, [r3, #4]
    513a:	e73a      	b.n	4fb2 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    513c:	780c      	ldrb	r4, [r1, #0]
    513e:	26ff      	movs	r6, #255	; 0xff
    5140:	5506      	strb	r6, [r0, r4]
    5142:	1904      	adds	r4, r0, r4
    5144:	26ff      	movs	r6, #255	; 0xff
    5146:	7066      	strb	r6, [r4, #1]
    5148:	3101      	adds	r1, #1
	} while (++s < 13);
    514a:	42a9      	cmp	r1, r5
    514c:	d094      	beq.n	5078 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    514e:	42bb      	cmp	r3, r7
    5150:	d0f4      	beq.n	513c <dir_register+0x27c>
    5152:	1c54      	adds	r4, r2, #1
    5154:	0052      	lsls	r2, r2, #1
    5156:	465b      	mov	r3, fp
    5158:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    515a:	780a      	ldrb	r2, [r1, #0]
    515c:	5483      	strb	r3, [r0, r2]
    515e:	1882      	adds	r2, r0, r2
    5160:	0a1e      	lsrs	r6, r3, #8
    5162:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    5164:	2b00      	cmp	r3, #0
    5166:	d185      	bne.n	5074 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    5168:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    516a:	003b      	movs	r3, r7
    516c:	e7ec      	b.n	5148 <dir_register+0x288>
    516e:	4680      	mov	r8, r0
    5170:	e71f      	b.n	4fb2 <dir_register+0xf2>
    5172:	4680      	mov	r8, r0
    5174:	e71d      	b.n	4fb2 <dir_register+0xf2>
    5176:	4680      	mov	r8, r0
    5178:	e71b      	b.n	4fb2 <dir_register+0xf2>
    517a:	46c0      	nop			; (mov r8, r8)
    517c:	0000426d 	.word	0x0000426d
    5180:	00004d29 	.word	0x00004d29
    5184:	00008fe9 	.word	0x00008fe9
    5188:	000048e9 	.word	0x000048e9
    518c:	0000474d 	.word	0x0000474d
    5190:	00004c05 	.word	0x00004c05
    5194:	000042ab 	.word	0x000042ab
    5198:	0000ffff 	.word	0x0000ffff
    519c:	0000a770 	.word	0x0000a770
    51a0:	00004281 	.word	0x00004281

000051a4 <sync>:
{
    51a4:	b570      	push	{r4, r5, r6, lr}
    51a6:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    51a8:	2100      	movs	r1, #0
    51aa:	4b2c      	ldr	r3, [pc, #176]	; (525c <sync+0xb8>)
    51ac:	4798      	blx	r3
	if (res == FR_OK) {
    51ae:	2800      	cmp	r0, #0
    51b0:	d10a      	bne.n	51c8 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    51b2:	7823      	ldrb	r3, [r4, #0]
    51b4:	2b03      	cmp	r3, #3
    51b6:	d008      	beq.n	51ca <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    51b8:	7860      	ldrb	r0, [r4, #1]
    51ba:	2200      	movs	r2, #0
    51bc:	2100      	movs	r1, #0
    51be:	4b28      	ldr	r3, [pc, #160]	; (5260 <sync+0xbc>)
    51c0:	4798      	blx	r3
    51c2:	1e43      	subs	r3, r0, #1
    51c4:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    51c6:	b2c0      	uxtb	r0, r0
}
    51c8:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    51ca:	7963      	ldrb	r3, [r4, #5]
    51cc:	2b00      	cmp	r3, #0
    51ce:	d0f3      	beq.n	51b8 <sync+0x14>
			fs->winsect = 0;
    51d0:	2600      	movs	r6, #0
    51d2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    51d4:	0025      	movs	r5, r4
    51d6:	3530      	adds	r5, #48	; 0x30
    51d8:	2280      	movs	r2, #128	; 0x80
    51da:	0092      	lsls	r2, r2, #2
    51dc:	2100      	movs	r1, #0
    51de:	0028      	movs	r0, r5
    51e0:	4b20      	ldr	r3, [pc, #128]	; (5264 <sync+0xc0>)
    51e2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    51e4:	2255      	movs	r2, #85	; 0x55
    51e6:	4b20      	ldr	r3, [pc, #128]	; (5268 <sync+0xc4>)
    51e8:	54e2      	strb	r2, [r4, r3]
    51ea:	3255      	adds	r2, #85	; 0x55
    51ec:	4b1f      	ldr	r3, [pc, #124]	; (526c <sync+0xc8>)
    51ee:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    51f0:	3bde      	subs	r3, #222	; 0xde
    51f2:	3bff      	subs	r3, #255	; 0xff
    51f4:	3a7a      	subs	r2, #122	; 0x7a
    51f6:	54a3      	strb	r3, [r4, r2]
    51f8:	3201      	adds	r2, #1
    51fa:	54a3      	strb	r3, [r4, r2]
    51fc:	330f      	adds	r3, #15
    51fe:	3201      	adds	r2, #1
    5200:	54a3      	strb	r3, [r4, r2]
    5202:	320f      	adds	r2, #15
    5204:	2133      	movs	r1, #51	; 0x33
    5206:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    5208:	313f      	adds	r1, #63	; 0x3f
    520a:	2085      	movs	r0, #133	; 0x85
    520c:	0080      	lsls	r0, r0, #2
    520e:	5421      	strb	r1, [r4, r0]
    5210:	4817      	ldr	r0, [pc, #92]	; (5270 <sync+0xcc>)
    5212:	5421      	strb	r1, [r4, r0]
    5214:	4917      	ldr	r1, [pc, #92]	; (5274 <sync+0xd0>)
    5216:	5462      	strb	r2, [r4, r1]
    5218:	4a17      	ldr	r2, [pc, #92]	; (5278 <sync+0xd4>)
    521a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    521c:	6923      	ldr	r3, [r4, #16]
    521e:	3201      	adds	r2, #1
    5220:	54a3      	strb	r3, [r4, r2]
    5222:	0a19      	lsrs	r1, r3, #8
    5224:	4a15      	ldr	r2, [pc, #84]	; (527c <sync+0xd8>)
    5226:	54a1      	strb	r1, [r4, r2]
    5228:	0c19      	lsrs	r1, r3, #16
    522a:	4a15      	ldr	r2, [pc, #84]	; (5280 <sync+0xdc>)
    522c:	54a1      	strb	r1, [r4, r2]
    522e:	0e1b      	lsrs	r3, r3, #24
    5230:	4a14      	ldr	r2, [pc, #80]	; (5284 <sync+0xe0>)
    5232:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5234:	68e3      	ldr	r3, [r4, #12]
    5236:	3201      	adds	r2, #1
    5238:	54a3      	strb	r3, [r4, r2]
    523a:	0a19      	lsrs	r1, r3, #8
    523c:	4a12      	ldr	r2, [pc, #72]	; (5288 <sync+0xe4>)
    523e:	54a1      	strb	r1, [r4, r2]
    5240:	0c19      	lsrs	r1, r3, #16
    5242:	4a12      	ldr	r2, [pc, #72]	; (528c <sync+0xe8>)
    5244:	54a1      	strb	r1, [r4, r2]
    5246:	0e1b      	lsrs	r3, r3, #24
    5248:	4a11      	ldr	r2, [pc, #68]	; (5290 <sync+0xec>)
    524a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    524c:	7860      	ldrb	r0, [r4, #1]
    524e:	2301      	movs	r3, #1
    5250:	6962      	ldr	r2, [r4, #20]
    5252:	0029      	movs	r1, r5
    5254:	4d0f      	ldr	r5, [pc, #60]	; (5294 <sync+0xf0>)
    5256:	47a8      	blx	r5
			fs->fsi_flag = 0;
    5258:	7166      	strb	r6, [r4, #5]
    525a:	e7ad      	b.n	51b8 <sync+0x14>
    525c:	0000474d 	.word	0x0000474d
    5260:	000041b1 	.word	0x000041b1
    5264:	00004281 	.word	0x00004281
    5268:	0000022e 	.word	0x0000022e
    526c:	0000022f 	.word	0x0000022f
    5270:	00000215 	.word	0x00000215
    5274:	00000216 	.word	0x00000216
    5278:	00000217 	.word	0x00000217
    527c:	00000219 	.word	0x00000219
    5280:	0000021a 	.word	0x0000021a
    5284:	0000021b 	.word	0x0000021b
    5288:	0000021d 	.word	0x0000021d
    528c:	0000021e 	.word	0x0000021e
    5290:	0000021f 	.word	0x0000021f
    5294:	0000412d 	.word	0x0000412d

00005298 <follow_path>:
{
    5298:	b5f0      	push	{r4, r5, r6, r7, lr}
    529a:	46de      	mov	lr, fp
    529c:	4657      	mov	r7, sl
    529e:	464e      	mov	r6, r9
    52a0:	4645      	mov	r5, r8
    52a2:	b5e0      	push	{r5, r6, r7, lr}
    52a4:	b083      	sub	sp, #12
    52a6:	4682      	mov	sl, r0
    52a8:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    52aa:	780b      	ldrb	r3, [r1, #0]
    52ac:	2b2f      	cmp	r3, #47	; 0x2f
    52ae:	d00f      	beq.n	52d0 <follow_path+0x38>
    52b0:	2b5c      	cmp	r3, #92	; 0x5c
    52b2:	d00d      	beq.n	52d0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    52b4:	2300      	movs	r3, #0
    52b6:	4652      	mov	r2, sl
    52b8:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    52ba:	782b      	ldrb	r3, [r5, #0]
    52bc:	4657      	mov	r7, sl
    52be:	2b1f      	cmp	r3, #31
    52c0:	d809      	bhi.n	52d6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    52c2:	2100      	movs	r1, #0
    52c4:	4650      	mov	r0, sl
    52c6:	4bb2      	ldr	r3, [pc, #712]	; (5590 <follow_path+0x2f8>)
    52c8:	4798      	blx	r3
		dj->dir = 0;
    52ca:	2300      	movs	r3, #0
    52cc:	617b      	str	r3, [r7, #20]
    52ce:	e13a      	b.n	5546 <follow_path+0x2ae>
		path++;
    52d0:	3501      	adds	r5, #1
    52d2:	e7ef      	b.n	52b4 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    52d4:	3501      	adds	r5, #1
    52d6:	7828      	ldrb	r0, [r5, #0]
    52d8:	282f      	cmp	r0, #47	; 0x2f
    52da:	d0fb      	beq.n	52d4 <follow_path+0x3c>
    52dc:	285c      	cmp	r0, #92	; 0x5c
    52de:	d0f9      	beq.n	52d4 <follow_path+0x3c>
	lfn = dj->lfn;
    52e0:	69fb      	ldr	r3, [r7, #28]
    52e2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    52e4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    52e6:	281f      	cmp	r0, #31
    52e8:	d800      	bhi.n	52ec <follow_path+0x54>
    52ea:	e13b      	b.n	5564 <follow_path+0x2cc>
    52ec:	282f      	cmp	r0, #47	; 0x2f
    52ee:	d100      	bne.n	52f2 <follow_path+0x5a>
    52f0:	e13b      	b.n	556a <follow_path+0x2d2>
    52f2:	285c      	cmp	r0, #92	; 0x5c
    52f4:	d100      	bne.n	52f8 <follow_path+0x60>
    52f6:	e13b      	b.n	5570 <follow_path+0x2d8>
    52f8:	1c6e      	adds	r6, r5, #1
    52fa:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    52fc:	2380      	movs	r3, #128	; 0x80
    52fe:	005b      	lsls	r3, r3, #1
    5300:	4698      	mov	r8, r3
    5302:	46bb      	mov	fp, r7
    5304:	002b      	movs	r3, r5
    5306:	0025      	movs	r5, r4
    5308:	0034      	movs	r4, r6
    530a:	4656      	mov	r6, sl
    530c:	4699      	mov	r9, r3
    530e:	e011      	b.n	5334 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    5310:	2b00      	cmp	r3, #0
    5312:	d135      	bne.n	5380 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    5314:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    5316:	1c6b      	adds	r3, r5, #1
    5318:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    531a:	281f      	cmp	r0, #31
    531c:	d91e      	bls.n	535c <follow_path+0xc4>
    531e:	282f      	cmp	r0, #47	; 0x2f
    5320:	d100      	bne.n	5324 <follow_path+0x8c>
    5322:	e128      	b.n	5576 <follow_path+0x2de>
    5324:	285c      	cmp	r0, #92	; 0x5c
    5326:	d100      	bne.n	532a <follow_path+0x92>
    5328:	e142      	b.n	55b0 <follow_path+0x318>
    532a:	3602      	adds	r6, #2
    532c:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    532e:	4543      	cmp	r3, r8
    5330:	d026      	beq.n	5380 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    5332:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    5334:	2101      	movs	r1, #1
    5336:	4b97      	ldr	r3, [pc, #604]	; (5594 <follow_path+0x2fc>)
    5338:	4798      	blx	r3
    533a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    533c:	d020      	beq.n	5380 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    533e:	287f      	cmp	r0, #127	; 0x7f
    5340:	d8e8      	bhi.n	5314 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    5342:	2822      	cmp	r0, #34	; 0x22
    5344:	d100      	bne.n	5348 <follow_path+0xb0>
    5346:	e0fd      	b.n	5544 <follow_path+0x2ac>
    5348:	232a      	movs	r3, #42	; 0x2a
    534a:	4a93      	ldr	r2, [pc, #588]	; (5598 <follow_path+0x300>)
    534c:	b29f      	uxth	r7, r3
    534e:	428f      	cmp	r7, r1
    5350:	d0de      	beq.n	5310 <follow_path+0x78>
    5352:	3201      	adds	r2, #1
    5354:	7813      	ldrb	r3, [r2, #0]
    5356:	2b00      	cmp	r3, #0
    5358:	d1f8      	bne.n	534c <follow_path+0xb4>
    535a:	e7db      	b.n	5314 <follow_path+0x7c>
    535c:	002c      	movs	r4, r5
    535e:	465f      	mov	r7, fp
    5360:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5362:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5364:	2604      	movs	r6, #4
    5366:	e10b      	b.n	5580 <follow_path+0x2e8>
		di--;
    5368:	3c01      	subs	r4, #1
    536a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    536c:	2c00      	cmp	r4, #0
    536e:	d100      	bne.n	5372 <follow_path+0xda>
    5370:	e0e8      	b.n	5544 <follow_path+0x2ac>
		w = lfn[di-1];
    5372:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    5374:	2a20      	cmp	r2, #32
    5376:	d0f7      	beq.n	5368 <follow_path+0xd0>
    5378:	2a2e      	cmp	r2, #46	; 0x2e
    537a:	d0f5      	beq.n	5368 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    537c:	2c00      	cmp	r4, #0
    537e:	d101      	bne.n	5384 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5380:	2006      	movs	r0, #6
	return res;
    5382:	e0e0      	b.n	5546 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    5384:	0063      	lsls	r3, r4, #1
    5386:	4698      	mov	r8, r3
    5388:	2300      	movs	r3, #0
    538a:	4652      	mov	r2, sl
    538c:	4641      	mov	r1, r8
    538e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    5390:	220b      	movs	r2, #11
    5392:	2120      	movs	r1, #32
    5394:	69b8      	ldr	r0, [r7, #24]
    5396:	4b81      	ldr	r3, [pc, #516]	; (559c <follow_path+0x304>)
    5398:	4798      	blx	r3
    539a:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    539c:	2300      	movs	r3, #0
    539e:	e001      	b.n	53a4 <follow_path+0x10c>
    53a0:	3301      	adds	r3, #1
    53a2:	3202      	adds	r2, #2
    53a4:	8811      	ldrh	r1, [r2, #0]
    53a6:	2920      	cmp	r1, #32
    53a8:	d0fa      	beq.n	53a0 <follow_path+0x108>
    53aa:	292e      	cmp	r1, #46	; 0x2e
    53ac:	d0f8      	beq.n	53a0 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    53ae:	2b00      	cmp	r3, #0
    53b0:	d001      	beq.n	53b6 <follow_path+0x11e>
    53b2:	2203      	movs	r2, #3
    53b4:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    53b6:	4652      	mov	r2, sl
    53b8:	4442      	add	r2, r8
    53ba:	3a02      	subs	r2, #2
    53bc:	8812      	ldrh	r2, [r2, #0]
    53be:	2a2e      	cmp	r2, #46	; 0x2e
    53c0:	d009      	beq.n	53d6 <follow_path+0x13e>
    53c2:	4642      	mov	r2, r8
    53c4:	3a04      	subs	r2, #4
    53c6:	4452      	add	r2, sl
    53c8:	3c01      	subs	r4, #1
    53ca:	2c00      	cmp	r4, #0
    53cc:	d003      	beq.n	53d6 <follow_path+0x13e>
    53ce:	3a02      	subs	r2, #2
    53d0:	8851      	ldrh	r1, [r2, #2]
    53d2:	292e      	cmp	r1, #46	; 0x2e
    53d4:	d1f8      	bne.n	53c8 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    53d6:	2208      	movs	r2, #8
    53d8:	9201      	str	r2, [sp, #4]
    53da:	2200      	movs	r2, #0
    53dc:	4693      	mov	fp, r2
    53de:	4691      	mov	r9, r2
    53e0:	46a0      	mov	r8, r4
    53e2:	e006      	b.n	53f2 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    53e4:	4544      	cmp	r4, r8
    53e6:	d100      	bne.n	53ea <follow_path+0x152>
    53e8:	e0e6      	b.n	55b8 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    53ea:	2303      	movs	r3, #3
    53ec:	431e      	orrs	r6, r3
    53ee:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    53f0:	0023      	movs	r3, r4
    53f2:	1c5c      	adds	r4, r3, #1
    53f4:	005b      	lsls	r3, r3, #1
    53f6:	4652      	mov	r2, sl
    53f8:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    53fa:	2800      	cmp	r0, #0
    53fc:	d02c      	beq.n	5458 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    53fe:	2820      	cmp	r0, #32
    5400:	d0f3      	beq.n	53ea <follow_path+0x152>
    5402:	282e      	cmp	r0, #46	; 0x2e
    5404:	d0ee      	beq.n	53e4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    5406:	9b01      	ldr	r3, [sp, #4]
    5408:	459b      	cmp	fp, r3
    540a:	d219      	bcs.n	5440 <follow_path+0x1a8>
    540c:	4544      	cmp	r4, r8
    540e:	d100      	bne.n	5412 <follow_path+0x17a>
    5410:	e0d2      	b.n	55b8 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    5412:	287f      	cmp	r0, #127	; 0x7f
    5414:	d85e      	bhi.n	54d4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    5416:	282b      	cmp	r0, #43	; 0x2b
    5418:	d06e      	beq.n	54f8 <follow_path+0x260>
    541a:	232c      	movs	r3, #44	; 0x2c
    541c:	4a60      	ldr	r2, [pc, #384]	; (55a0 <follow_path+0x308>)
    541e:	b299      	uxth	r1, r3
    5420:	4281      	cmp	r1, r0
    5422:	d067      	beq.n	54f4 <follow_path+0x25c>
    5424:	3201      	adds	r2, #1
    5426:	7813      	ldrb	r3, [r2, #0]
    5428:	2b00      	cmp	r3, #0
    542a:	d1f8      	bne.n	541e <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    542c:	0003      	movs	r3, r0
    542e:	3b41      	subs	r3, #65	; 0x41
    5430:	b29b      	uxth	r3, r3
    5432:	2b19      	cmp	r3, #25
    5434:	d86c      	bhi.n	5510 <follow_path+0x278>
					b |= 2;
    5436:	2302      	movs	r3, #2
    5438:	464a      	mov	r2, r9
    543a:	431a      	orrs	r2, r3
    543c:	4691      	mov	r9, r2
    543e:	e05f      	b.n	5500 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    5440:	9b01      	ldr	r3, [sp, #4]
    5442:	2b0b      	cmp	r3, #11
    5444:	d03b      	beq.n	54be <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    5446:	4544      	cmp	r4, r8
    5448:	d100      	bne.n	544c <follow_path+0x1b4>
    544a:	e0b9      	b.n	55c0 <follow_path+0x328>
    544c:	2303      	movs	r3, #3
    544e:	431e      	orrs	r6, r3
    5450:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    5452:	4544      	cmp	r4, r8
    5454:	d800      	bhi.n	5458 <follow_path+0x1c0>
    5456:	e0b3      	b.n	55c0 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5458:	69bb      	ldr	r3, [r7, #24]
    545a:	781a      	ldrb	r2, [r3, #0]
    545c:	2ae5      	cmp	r2, #229	; 0xe5
    545e:	d036      	beq.n	54ce <follow_path+0x236>
	if (ni == 8) b <<= 2;
    5460:	9b01      	ldr	r3, [sp, #4]
    5462:	2b08      	cmp	r3, #8
    5464:	d060      	beq.n	5528 <follow_path+0x290>
    5466:	230c      	movs	r3, #12
    5468:	464a      	mov	r2, r9
    546a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    546c:	2b0c      	cmp	r3, #12
    546e:	d060      	beq.n	5532 <follow_path+0x29a>
    5470:	43d2      	mvns	r2, r2
    5472:	0792      	lsls	r2, r2, #30
    5474:	d05d      	beq.n	5532 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    5476:	07b2      	lsls	r2, r6, #30
    5478:	d406      	bmi.n	5488 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    547a:	2203      	movs	r2, #3
    547c:	4649      	mov	r1, r9
    547e:	400a      	ands	r2, r1
    5480:	2a01      	cmp	r2, #1
    5482:	d059      	beq.n	5538 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5484:	2b04      	cmp	r3, #4
    5486:	d05a      	beq.n	553e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    5488:	69bb      	ldr	r3, [r7, #24]
    548a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    548c:	0038      	movs	r0, r7
    548e:	4b45      	ldr	r3, [pc, #276]	; (55a4 <follow_path+0x30c>)
    5490:	4798      	blx	r3
			ns = *(dj->fn+NS);
    5492:	69bb      	ldr	r3, [r7, #24]
    5494:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    5496:	2800      	cmp	r0, #0
    5498:	d15c      	bne.n	5554 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    549a:	075b      	lsls	r3, r3, #29
    549c:	d453      	bmi.n	5546 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    549e:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    54a0:	7ad3      	ldrb	r3, [r2, #11]
    54a2:	06db      	lsls	r3, r3, #27
    54a4:	d55c      	bpl.n	5560 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    54a6:	7d51      	ldrb	r1, [r2, #21]
    54a8:	0209      	lsls	r1, r1, #8
    54aa:	7d13      	ldrb	r3, [r2, #20]
    54ac:	430b      	orrs	r3, r1
    54ae:	041b      	lsls	r3, r3, #16
    54b0:	7ed1      	ldrb	r1, [r2, #27]
    54b2:	0209      	lsls	r1, r1, #8
    54b4:	7e92      	ldrb	r2, [r2, #26]
    54b6:	430a      	orrs	r2, r1
    54b8:	4313      	orrs	r3, r2
    54ba:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    54bc:	e70b      	b.n	52d6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    54be:	2303      	movs	r3, #3
    54c0:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    54c2:	69bb      	ldr	r3, [r7, #24]
    54c4:	781a      	ldrb	r2, [r3, #0]
    54c6:	2ae5      	cmp	r2, #229	; 0xe5
    54c8:	d1cd      	bne.n	5466 <follow_path+0x1ce>
    54ca:	220b      	movs	r2, #11
    54cc:	9201      	str	r2, [sp, #4]
    54ce:	2205      	movs	r2, #5
    54d0:	701a      	strb	r2, [r3, #0]
    54d2:	e7c5      	b.n	5460 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    54d4:	2100      	movs	r1, #0
    54d6:	4b2f      	ldr	r3, [pc, #188]	; (5594 <follow_path+0x2fc>)
    54d8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    54da:	2800      	cmp	r0, #0
    54dc:	d100      	bne.n	54e0 <follow_path+0x248>
    54de:	e079      	b.n	55d4 <follow_path+0x33c>
    54e0:	4b31      	ldr	r3, [pc, #196]	; (55a8 <follow_path+0x310>)
    54e2:	469c      	mov	ip, r3
    54e4:	4460      	add	r0, ip
    54e6:	3880      	subs	r0, #128	; 0x80
    54e8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    54ea:	2302      	movs	r3, #2
    54ec:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    54ee:	2800      	cmp	r0, #0
    54f0:	d002      	beq.n	54f8 <follow_path+0x260>
    54f2:	e790      	b.n	5416 <follow_path+0x17e>
    54f4:	2b00      	cmp	r3, #0
    54f6:	d099      	beq.n	542c <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    54f8:	2303      	movs	r3, #3
    54fa:	431e      	orrs	r6, r3
    54fc:	b2f6      	uxtb	r6, r6
    54fe:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    5500:	69bb      	ldr	r3, [r7, #24]
    5502:	465a      	mov	r2, fp
    5504:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    5506:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    5508:	2201      	movs	r2, #1
    550a:	4694      	mov	ip, r2
    550c:	44e3      	add	fp, ip
    550e:	e770      	b.n	53f2 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    5510:	0003      	movs	r3, r0
    5512:	3b61      	subs	r3, #97	; 0x61
    5514:	b29b      	uxth	r3, r3
    5516:	2b19      	cmp	r3, #25
    5518:	d8f2      	bhi.n	5500 <follow_path+0x268>
						b |= 1; w -= 0x20;
    551a:	2301      	movs	r3, #1
    551c:	464a      	mov	r2, r9
    551e:	431a      	orrs	r2, r3
    5520:	4691      	mov	r9, r2
    5522:	3820      	subs	r0, #32
    5524:	b280      	uxth	r0, r0
    5526:	e7eb      	b.n	5500 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    5528:	464b      	mov	r3, r9
    552a:	009b      	lsls	r3, r3, #2
    552c:	b2db      	uxtb	r3, r3
    552e:	4699      	mov	r9, r3
    5530:	e799      	b.n	5466 <follow_path+0x1ce>
		cf |= NS_LFN;
    5532:	2202      	movs	r2, #2
    5534:	4316      	orrs	r6, r2
    5536:	e79e      	b.n	5476 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5538:	320f      	adds	r2, #15
    553a:	4316      	orrs	r6, r2
    553c:	e7a2      	b.n	5484 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    553e:	3304      	adds	r3, #4
    5540:	431e      	orrs	r6, r3
    5542:	e7a1      	b.n	5488 <follow_path+0x1f0>
    5544:	2006      	movs	r0, #6
}
    5546:	b003      	add	sp, #12
    5548:	bc3c      	pop	{r2, r3, r4, r5}
    554a:	4690      	mov	r8, r2
    554c:	4699      	mov	r9, r3
    554e:	46a2      	mov	sl, r4
    5550:	46ab      	mov	fp, r5
    5552:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    5554:	2804      	cmp	r0, #4
    5556:	d1f6      	bne.n	5546 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5558:	075b      	lsls	r3, r3, #29
    555a:	d4f4      	bmi.n	5546 <follow_path+0x2ae>
    555c:	3001      	adds	r0, #1
    555e:	e7f2      	b.n	5546 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    5560:	2005      	movs	r0, #5
    5562:	e7f0      	b.n	5546 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    5564:	2301      	movs	r3, #1
	si = di = 0;
    5566:	2400      	movs	r4, #0
    5568:	e6fb      	b.n	5362 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    556a:	2301      	movs	r3, #1
	si = di = 0;
    556c:	2400      	movs	r4, #0
    556e:	e005      	b.n	557c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    5570:	2301      	movs	r3, #1
	si = di = 0;
    5572:	2400      	movs	r4, #0
    5574:	e002      	b.n	557c <follow_path+0x2e4>
    5576:	002c      	movs	r4, r5
    5578:	465f      	mov	r7, fp
    557a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    557c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    557e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    5580:	2c00      	cmp	r4, #0
    5582:	d0df      	beq.n	5544 <follow_path+0x2ac>
    5584:	4b09      	ldr	r3, [pc, #36]	; (55ac <follow_path+0x314>)
    5586:	18e3      	adds	r3, r4, r3
    5588:	005b      	lsls	r3, r3, #1
    558a:	4453      	add	r3, sl
    558c:	e6f1      	b.n	5372 <follow_path+0xda>
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	000048e9 	.word	0x000048e9
    5594:	00005bf9 	.word	0x00005bf9
    5598:	0000a801 	.word	0x0000a801
    559c:	00004281 	.word	0x00004281
    55a0:	0000a80d 	.word	0x0000a80d
    55a4:	00004d29 	.word	0x00004d29
    55a8:	0000a780 	.word	0x0000a780
    55ac:	7fffffff 	.word	0x7fffffff
    55b0:	002c      	movs	r4, r5
    55b2:	465f      	mov	r7, fp
    55b4:	464d      	mov	r5, r9
    55b6:	e7e1      	b.n	557c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    55b8:	9b01      	ldr	r3, [sp, #4]
    55ba:	2b0b      	cmp	r3, #11
    55bc:	d100      	bne.n	55c0 <follow_path+0x328>
    55be:	e77e      	b.n	54be <follow_path+0x226>
			b <<= 2; continue;
    55c0:	464b      	mov	r3, r9
    55c2:	009b      	lsls	r3, r3, #2
    55c4:	b2db      	uxtb	r3, r3
    55c6:	4699      	mov	r9, r3
    55c8:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    55ca:	220b      	movs	r2, #11
    55cc:	9201      	str	r2, [sp, #4]
    55ce:	3a03      	subs	r2, #3
    55d0:	4693      	mov	fp, r2
    55d2:	e70e      	b.n	53f2 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    55d4:	2302      	movs	r3, #2
    55d6:	431e      	orrs	r6, r3
    55d8:	e78e      	b.n	54f8 <follow_path+0x260>
    55da:	46c0      	nop			; (mov r8, r8)

000055dc <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    55dc:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    55de:	2803      	cmp	r0, #3
    55e0:	d901      	bls.n	55e6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    55e2:	0018      	movs	r0, r3
    55e4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    55e6:	0083      	lsls	r3, r0, #2
    55e8:	4a07      	ldr	r2, [pc, #28]	; (5608 <f_mount+0x2c>)
    55ea:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    55ec:	2b00      	cmp	r3, #0
    55ee:	d001      	beq.n	55f4 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    55f0:	2200      	movs	r2, #0
    55f2:	701a      	strb	r2, [r3, #0]
	if (fs) {
    55f4:	2900      	cmp	r1, #0
    55f6:	d001      	beq.n	55fc <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    55f8:	2300      	movs	r3, #0
    55fa:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    55fc:	0080      	lsls	r0, r0, #2
    55fe:	4b02      	ldr	r3, [pc, #8]	; (5608 <f_mount+0x2c>)
    5600:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    5602:	2300      	movs	r3, #0
    5604:	e7ed      	b.n	55e2 <f_mount+0x6>
    5606:	46c0      	nop			; (mov r8, r8)
    5608:	200002b8 	.word	0x200002b8

0000560c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    560c:	b5f0      	push	{r4, r5, r6, r7, lr}
    560e:	46c6      	mov	lr, r8
    5610:	b500      	push	{lr}
    5612:	4c59      	ldr	r4, [pc, #356]	; (5778 <f_open+0x16c>)
    5614:	44a5      	add	sp, r4
    5616:	0005      	movs	r5, r0
    5618:	9101      	str	r1, [sp, #4]
    561a:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    561c:	2300      	movs	r3, #0
    561e:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5620:	261f      	movs	r6, #31
    5622:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    5624:	221e      	movs	r2, #30
    5626:	403a      	ands	r2, r7
    5628:	a985      	add	r1, sp, #532	; 0x214
    562a:	a801      	add	r0, sp, #4
    562c:	4b53      	ldr	r3, [pc, #332]	; (577c <f_open+0x170>)
    562e:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    5630:	ab82      	add	r3, sp, #520	; 0x208
    5632:	938b      	str	r3, [sp, #556]	; 0x22c
    5634:	ab02      	add	r3, sp, #8
    5636:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    5638:	2800      	cmp	r0, #0
    563a:	d006      	beq.n	564a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    563c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    563e:	231c      	movs	r3, #28
    5640:	423b      	tst	r3, r7
    5642:	d145      	bne.n	56d0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    5644:	2800      	cmp	r0, #0
    5646:	d13d      	bne.n	56c4 <f_open+0xb8>
    5648:	e00c      	b.n	5664 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    564a:	9901      	ldr	r1, [sp, #4]
    564c:	a885      	add	r0, sp, #532	; 0x214
    564e:	4b4c      	ldr	r3, [pc, #304]	; (5780 <f_open+0x174>)
    5650:	4798      	blx	r3
	dir = dj.dir;
    5652:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    5654:	2800      	cmp	r0, #0
    5656:	d1f2      	bne.n	563e <f_open+0x32>
		if (!dir)	/* Current dir itself */
    5658:	2c00      	cmp	r4, #0
    565a:	d100      	bne.n	565e <f_open+0x52>
    565c:	e086      	b.n	576c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    565e:	231c      	movs	r3, #28
    5660:	423b      	tst	r3, r7
    5662:	d146      	bne.n	56f2 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5664:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    5666:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5668:	06da      	lsls	r2, r3, #27
    566a:	d42b      	bmi.n	56c4 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    566c:	07ba      	lsls	r2, r7, #30
    566e:	d502      	bpl.n	5676 <f_open+0x6a>
					res = FR_DENIED;
    5670:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5672:	07db      	lsls	r3, r3, #31
    5674:	d426      	bmi.n	56c4 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    5676:	073b      	lsls	r3, r7, #28
    5678:	d501      	bpl.n	567e <f_open+0x72>
			mode |= FA__WRITTEN;
    567a:	2320      	movs	r3, #32
    567c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    567e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5682:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    5684:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    5686:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5688:	7d62      	ldrb	r2, [r4, #21]
    568a:	0212      	lsls	r2, r2, #8
    568c:	7d23      	ldrb	r3, [r4, #20]
    568e:	4313      	orrs	r3, r2
    5690:	041b      	lsls	r3, r3, #16
    5692:	7ee1      	ldrb	r1, [r4, #27]
    5694:	0209      	lsls	r1, r1, #8
    5696:	7ea2      	ldrb	r2, [r4, #26]
    5698:	430a      	orrs	r2, r1
    569a:	4313      	orrs	r3, r2
    569c:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    569e:	7fe3      	ldrb	r3, [r4, #31]
    56a0:	061b      	lsls	r3, r3, #24
    56a2:	7fa2      	ldrb	r2, [r4, #30]
    56a4:	0412      	lsls	r2, r2, #16
    56a6:	4313      	orrs	r3, r2
    56a8:	7f22      	ldrb	r2, [r4, #28]
    56aa:	4313      	orrs	r3, r2
    56ac:	7f62      	ldrb	r2, [r4, #29]
    56ae:	0212      	lsls	r2, r2, #8
    56b0:	4313      	orrs	r3, r2
    56b2:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    56b4:	2300      	movs	r3, #0
    56b6:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    56b8:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    56ba:	9b85      	ldr	r3, [sp, #532]	; 0x214
    56bc:	602b      	str	r3, [r5, #0]
    56be:	88db      	ldrh	r3, [r3, #6]
    56c0:	80ab      	strh	r3, [r5, #4]
    56c2:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    56c4:	238e      	movs	r3, #142	; 0x8e
    56c6:	009b      	lsls	r3, r3, #2
    56c8:	449d      	add	sp, r3
    56ca:	bc04      	pop	{r2}
    56cc:	4690      	mov	r8, r2
    56ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    56d0:	2804      	cmp	r0, #4
    56d2:	d005      	beq.n	56e0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    56d4:	2308      	movs	r3, #8
    56d6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    56d8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    56da:	2800      	cmp	r0, #0
    56dc:	d0d3      	beq.n	5686 <f_open+0x7a>
    56de:	e7f1      	b.n	56c4 <f_open+0xb8>
				res = dir_register(&dj);
    56e0:	a885      	add	r0, sp, #532	; 0x214
    56e2:	4b28      	ldr	r3, [pc, #160]	; (5784 <f_open+0x178>)
    56e4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    56e6:	2308      	movs	r3, #8
    56e8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    56ea:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    56ec:	2800      	cmp	r0, #0
    56ee:	d008      	beq.n	5702 <f_open+0xf6>
    56f0:	e7e8      	b.n	56c4 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    56f2:	7ae3      	ldrb	r3, [r4, #11]
    56f4:	2211      	movs	r2, #17
				res = FR_DENIED;
    56f6:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    56f8:	421a      	tst	r2, r3
    56fa:	d1e3      	bne.n	56c4 <f_open+0xb8>
					res = FR_EXIST;
    56fc:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    56fe:	077b      	lsls	r3, r7, #29
    5700:	d4e0      	bmi.n	56c4 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    5702:	0733      	lsls	r3, r6, #28
    5704:	d5bb      	bpl.n	567e <f_open+0x72>
			dw = get_fattime();					/* Created time */
    5706:	4b20      	ldr	r3, [pc, #128]	; (5788 <f_open+0x17c>)
    5708:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    570a:	73a0      	strb	r0, [r4, #14]
    570c:	0a03      	lsrs	r3, r0, #8
    570e:	73e3      	strb	r3, [r4, #15]
    5710:	0c03      	lsrs	r3, r0, #16
    5712:	7423      	strb	r3, [r4, #16]
    5714:	0e00      	lsrs	r0, r0, #24
    5716:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    5718:	2300      	movs	r3, #0
    571a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    571c:	7723      	strb	r3, [r4, #28]
    571e:	7763      	strb	r3, [r4, #29]
    5720:	77a3      	strb	r3, [r4, #30]
    5722:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    5724:	7d62      	ldrb	r2, [r4, #21]
    5726:	0212      	lsls	r2, r2, #8
    5728:	7d27      	ldrb	r7, [r4, #20]
    572a:	4317      	orrs	r7, r2
    572c:	043f      	lsls	r7, r7, #16
    572e:	7ee1      	ldrb	r1, [r4, #27]
    5730:	0209      	lsls	r1, r1, #8
    5732:	7ea2      	ldrb	r2, [r4, #26]
    5734:	430a      	orrs	r2, r1
    5736:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    5738:	76a3      	strb	r3, [r4, #26]
    573a:	76e3      	strb	r3, [r4, #27]
    573c:	7523      	strb	r3, [r4, #20]
    573e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    5740:	9885      	ldr	r0, [sp, #532]	; 0x214
    5742:	3301      	adds	r3, #1
    5744:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    5746:	2f00      	cmp	r7, #0
    5748:	d097      	beq.n	567a <f_open+0x6e>
				dw = dj.fs->winsect;
    574a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    574c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    574e:	0039      	movs	r1, r7
    5750:	4b0e      	ldr	r3, [pc, #56]	; (578c <f_open+0x180>)
    5752:	4798      	blx	r3
				if (res == FR_OK) {
    5754:	2800      	cmp	r0, #0
    5756:	d1b5      	bne.n	56c4 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5758:	9885      	ldr	r0, [sp, #532]	; 0x214
    575a:	3f01      	subs	r7, #1
    575c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    575e:	4641      	mov	r1, r8
    5760:	4b0b      	ldr	r3, [pc, #44]	; (5790 <f_open+0x184>)
    5762:	4798      	blx	r3
	if (res == FR_OK) {
    5764:	2800      	cmp	r0, #0
    5766:	d100      	bne.n	576a <f_open+0x15e>
    5768:	e787      	b.n	567a <f_open+0x6e>
    576a:	e7ab      	b.n	56c4 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    576c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    576e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5770:	423b      	tst	r3, r7
    5772:	d0b2      	beq.n	56da <f_open+0xce>
			res = FR_INVALID_NAME;
    5774:	2006      	movs	r0, #6
    5776:	e7ad      	b.n	56d4 <f_open+0xc8>
    5778:	fffffdc8 	.word	0xfffffdc8
    577c:	0000439d 	.word	0x0000439d
    5780:	00005299 	.word	0x00005299
    5784:	00004ec1 	.word	0x00004ec1
    5788:	0000421d 	.word	0x0000421d
    578c:	00004b8d 	.word	0x00004b8d
    5790:	0000474d 	.word	0x0000474d

00005794 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    5794:	b5f0      	push	{r4, r5, r6, r7, lr}
    5796:	46de      	mov	lr, fp
    5798:	4657      	mov	r7, sl
    579a:	464e      	mov	r6, r9
    579c:	4645      	mov	r5, r8
    579e:	b5e0      	push	{r5, r6, r7, lr}
    57a0:	b083      	sub	sp, #12
    57a2:	0004      	movs	r4, r0
    57a4:	000d      	movs	r5, r1
    57a6:	0016      	movs	r6, r2
    57a8:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    57aa:	2300      	movs	r3, #0
    57ac:	464a      	mov	r2, r9
    57ae:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    57b0:	8881      	ldrh	r1, [r0, #4]
    57b2:	6800      	ldr	r0, [r0, #0]
    57b4:	4b7f      	ldr	r3, [pc, #508]	; (59b4 <f_write+0x220>)
    57b6:	4798      	blx	r3
    57b8:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    57ba:	2800      	cmp	r0, #0
    57bc:	d000      	beq.n	57c0 <f_write+0x2c>
    57be:	e0f1      	b.n	59a4 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    57c0:	79a3      	ldrb	r3, [r4, #6]
    57c2:	b25a      	sxtb	r2, r3
    57c4:	2a00      	cmp	r2, #0
    57c6:	da00      	bge.n	57ca <f_write+0x36>
    57c8:	e0ea      	b.n	59a0 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    57ca:	079b      	lsls	r3, r3, #30
    57cc:	d402      	bmi.n	57d4 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    57ce:	2307      	movs	r3, #7
    57d0:	9300      	str	r3, [sp, #0]
    57d2:	e0e7      	b.n	59a4 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    57d4:	68e3      	ldr	r3, [r4, #12]
    57d6:	199a      	adds	r2, r3, r6
    57d8:	4293      	cmp	r3, r2
    57da:	d810      	bhi.n	57fe <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    57dc:	2e00      	cmp	r6, #0
    57de:	d00e      	beq.n	57fe <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    57e0:	002f      	movs	r7, r5
    57e2:	e07b      	b.n	58dc <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    57e4:	2100      	movs	r1, #0
    57e6:	4b74      	ldr	r3, [pc, #464]	; (59b8 <f_write+0x224>)
    57e8:	4798      	blx	r3
    57ea:	0003      	movs	r3, r0
    57ec:	6120      	str	r0, [r4, #16]
    57ee:	e003      	b.n	57f8 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    57f0:	6961      	ldr	r1, [r4, #20]
    57f2:	4b71      	ldr	r3, [pc, #452]	; (59b8 <f_write+0x224>)
    57f4:	4798      	blx	r3
    57f6:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    57f8:	2b00      	cmp	r3, #0
    57fa:	d000      	beq.n	57fe <f_write+0x6a>
    57fc:	e080      	b.n	5900 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    57fe:	68a3      	ldr	r3, [r4, #8]
    5800:	68e2      	ldr	r2, [r4, #12]
    5802:	4293      	cmp	r3, r2
    5804:	d900      	bls.n	5808 <f_write+0x74>
    5806:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    5808:	79a3      	ldrb	r3, [r4, #6]
    580a:	2220      	movs	r2, #32
    580c:	4313      	orrs	r3, r2
    580e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    5810:	e0c8      	b.n	59a4 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5812:	79a2      	ldrb	r2, [r4, #6]
    5814:	3b81      	subs	r3, #129	; 0x81
    5816:	4313      	orrs	r3, r2
    5818:	71a3      	strb	r3, [r4, #6]
    581a:	2302      	movs	r3, #2
    581c:	9300      	str	r3, [sp, #0]
    581e:	e0c1      	b.n	59a4 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5820:	79a2      	ldrb	r2, [r4, #6]
    5822:	3b7f      	subs	r3, #127	; 0x7f
    5824:	4313      	orrs	r3, r2
    5826:	71a3      	strb	r3, [r4, #6]
    5828:	2301      	movs	r3, #1
    582a:	9300      	str	r3, [sp, #0]
    582c:	e0ba      	b.n	59a4 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    582e:	2100      	movs	r1, #0
    5830:	4b62      	ldr	r3, [pc, #392]	; (59bc <f_write+0x228>)
    5832:	4798      	blx	r3
    5834:	2800      	cmp	r0, #0
    5836:	d06d      	beq.n	5914 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    5838:	79a2      	ldrb	r2, [r4, #6]
    583a:	2380      	movs	r3, #128	; 0x80
    583c:	425b      	negs	r3, r3
    583e:	4313      	orrs	r3, r2
    5840:	71a3      	strb	r3, [r4, #6]
    5842:	2301      	movs	r3, #1
    5844:	9300      	str	r3, [sp, #0]
    5846:	e0ad      	b.n	59a4 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5848:	79a2      	ldrb	r2, [r4, #6]
    584a:	2380      	movs	r3, #128	; 0x80
    584c:	425b      	negs	r3, r3
    584e:	4313      	orrs	r3, r2
    5850:	71a3      	strb	r3, [r4, #6]
    5852:	2302      	movs	r3, #2
    5854:	9300      	str	r3, [sp, #0]
    5856:	e0a5      	b.n	59a4 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5858:	79a2      	ldrb	r2, [r4, #6]
    585a:	2380      	movs	r3, #128	; 0x80
    585c:	425b      	negs	r3, r3
    585e:	4313      	orrs	r3, r2
    5860:	71a3      	strb	r3, [r4, #6]
    5862:	2301      	movs	r3, #1
    5864:	9300      	str	r3, [sp, #0]
    5866:	e09d      	b.n	59a4 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5868:	0240      	lsls	r0, r0, #9
    586a:	1839      	adds	r1, r7, r0
    586c:	3330      	adds	r3, #48	; 0x30
    586e:	0018      	movs	r0, r3
    5870:	2280      	movs	r2, #128	; 0x80
    5872:	0092      	lsls	r2, r2, #2
    5874:	4b52      	ldr	r3, [pc, #328]	; (59c0 <f_write+0x22c>)
    5876:	4798      	blx	r3
					fp->fs->wflag = 0;
    5878:	2300      	movs	r3, #0
    587a:	6822      	ldr	r2, [r4, #0]
    587c:	7113      	strb	r3, [r2, #4]
    587e:	e072      	b.n	5966 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5880:	68a3      	ldr	r3, [r4, #8]
    5882:	68e2      	ldr	r2, [r4, #12]
    5884:	4293      	cmp	r3, r2
    5886:	d271      	bcs.n	596c <f_write+0x1d8>
			fp->dsect = sect;
    5888:	4643      	mov	r3, r8
    588a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    588c:	68a3      	ldr	r3, [r4, #8]
    588e:	05dd      	lsls	r5, r3, #23
    5890:	0ded      	lsrs	r5, r5, #23
    5892:	2380      	movs	r3, #128	; 0x80
    5894:	009b      	lsls	r3, r3, #2
    5896:	1b5d      	subs	r5, r3, r5
    5898:	42b5      	cmp	r5, r6
    589a:	d900      	bls.n	589e <f_write+0x10a>
    589c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    589e:	69a1      	ldr	r1, [r4, #24]
    58a0:	6820      	ldr	r0, [r4, #0]
    58a2:	4b46      	ldr	r3, [pc, #280]	; (59bc <f_write+0x228>)
    58a4:	4798      	blx	r3
    58a6:	2800      	cmp	r0, #0
    58a8:	d172      	bne.n	5990 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    58aa:	68a3      	ldr	r3, [r4, #8]
    58ac:	05d8      	lsls	r0, r3, #23
    58ae:	0dc0      	lsrs	r0, r0, #23
    58b0:	3030      	adds	r0, #48	; 0x30
    58b2:	6823      	ldr	r3, [r4, #0]
    58b4:	469c      	mov	ip, r3
    58b6:	4460      	add	r0, ip
    58b8:	002a      	movs	r2, r5
    58ba:	0039      	movs	r1, r7
    58bc:	4b40      	ldr	r3, [pc, #256]	; (59c0 <f_write+0x22c>)
    58be:	4798      	blx	r3
		fp->fs->wflag = 1;
    58c0:	2301      	movs	r3, #1
    58c2:	6822      	ldr	r2, [r4, #0]
    58c4:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    58c6:	197f      	adds	r7, r7, r5
    58c8:	68a3      	ldr	r3, [r4, #8]
    58ca:	195b      	adds	r3, r3, r5
    58cc:	60a3      	str	r3, [r4, #8]
    58ce:	464b      	mov	r3, r9
    58d0:	681b      	ldr	r3, [r3, #0]
    58d2:	195b      	adds	r3, r3, r5
    58d4:	464a      	mov	r2, r9
    58d6:	6013      	str	r3, [r2, #0]
    58d8:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    58da:	d090      	beq.n	57fe <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    58dc:	68a3      	ldr	r3, [r4, #8]
    58de:	05da      	lsls	r2, r3, #23
    58e0:	d1d4      	bne.n	588c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    58e2:	6820      	ldr	r0, [r4, #0]
    58e4:	7882      	ldrb	r2, [r0, #2]
    58e6:	3a01      	subs	r2, #1
    58e8:	0a5d      	lsrs	r5, r3, #9
    58ea:	4015      	ands	r5, r2
    58ec:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    58ee:	2d00      	cmp	r5, #0
    58f0:	d10b      	bne.n	590a <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    58f2:	2b00      	cmp	r3, #0
    58f4:	d000      	beq.n	58f8 <f_write+0x164>
    58f6:	e77b      	b.n	57f0 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    58f8:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    58fa:	2b00      	cmp	r3, #0
    58fc:	d100      	bne.n	5900 <f_write+0x16c>
    58fe:	e771      	b.n	57e4 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5900:	2b01      	cmp	r3, #1
    5902:	d086      	beq.n	5812 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5904:	1c5a      	adds	r2, r3, #1
    5906:	d08b      	beq.n	5820 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    5908:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    590a:	6820      	ldr	r0, [r4, #0]
    590c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    590e:	69a2      	ldr	r2, [r4, #24]
    5910:	4293      	cmp	r3, r2
    5912:	d08c      	beq.n	582e <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5914:	6823      	ldr	r3, [r4, #0]
    5916:	469a      	mov	sl, r3
    5918:	6961      	ldr	r1, [r4, #20]
    591a:	0018      	movs	r0, r3
    591c:	4b29      	ldr	r3, [pc, #164]	; (59c4 <f_write+0x230>)
    591e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5920:	2800      	cmp	r0, #0
    5922:	d091      	beq.n	5848 <f_write+0xb4>
			sect += csect;
    5924:	4680      	mov	r8, r0
    5926:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    5928:	0a73      	lsrs	r3, r6, #9
    592a:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    592c:	d0a8      	beq.n	5880 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    592e:	4653      	mov	r3, sl
    5930:	789b      	ldrb	r3, [r3, #2]
    5932:	465a      	mov	r2, fp
    5934:	18aa      	adds	r2, r5, r2
    5936:	429a      	cmp	r2, r3
    5938:	d901      	bls.n	593e <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    593a:	1b5b      	subs	r3, r3, r5
    593c:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    593e:	465b      	mov	r3, fp
    5940:	466a      	mov	r2, sp
    5942:	71d3      	strb	r3, [r2, #7]
    5944:	79d3      	ldrb	r3, [r2, #7]
    5946:	4652      	mov	r2, sl
    5948:	7850      	ldrb	r0, [r2, #1]
    594a:	4642      	mov	r2, r8
    594c:	0039      	movs	r1, r7
    594e:	4d1e      	ldr	r5, [pc, #120]	; (59c8 <f_write+0x234>)
    5950:	47a8      	blx	r5
    5952:	2800      	cmp	r0, #0
    5954:	d000      	beq.n	5958 <f_write+0x1c4>
    5956:	e77f      	b.n	5858 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5958:	6823      	ldr	r3, [r4, #0]
    595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    595c:	4641      	mov	r1, r8
    595e:	1a50      	subs	r0, r2, r1
    5960:	4583      	cmp	fp, r0
    5962:	d900      	bls.n	5966 <f_write+0x1d2>
    5964:	e780      	b.n	5868 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5966:	465b      	mov	r3, fp
    5968:	025d      	lsls	r5, r3, #9
				continue;
    596a:	e7ac      	b.n	58c6 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    596c:	2100      	movs	r1, #0
    596e:	4650      	mov	r0, sl
    5970:	4b12      	ldr	r3, [pc, #72]	; (59bc <f_write+0x228>)
    5972:	4798      	blx	r3
    5974:	2800      	cmp	r0, #0
    5976:	d103      	bne.n	5980 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5978:	6823      	ldr	r3, [r4, #0]
    597a:	4642      	mov	r2, r8
    597c:	62da      	str	r2, [r3, #44]	; 0x2c
    597e:	e783      	b.n	5888 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5980:	79a2      	ldrb	r2, [r4, #6]
    5982:	2380      	movs	r3, #128	; 0x80
    5984:	425b      	negs	r3, r3
    5986:	4313      	orrs	r3, r2
    5988:	71a3      	strb	r3, [r4, #6]
    598a:	2301      	movs	r3, #1
    598c:	9300      	str	r3, [sp, #0]
    598e:	e009      	b.n	59a4 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5990:	79a2      	ldrb	r2, [r4, #6]
    5992:	2380      	movs	r3, #128	; 0x80
    5994:	425b      	negs	r3, r3
    5996:	4313      	orrs	r3, r2
    5998:	71a3      	strb	r3, [r4, #6]
    599a:	2301      	movs	r3, #1
    599c:	9300      	str	r3, [sp, #0]
    599e:	e001      	b.n	59a4 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    59a0:	2302      	movs	r3, #2
    59a2:	9300      	str	r3, [sp, #0]
}
    59a4:	9800      	ldr	r0, [sp, #0]
    59a6:	b003      	add	sp, #12
    59a8:	bc3c      	pop	{r2, r3, r4, r5}
    59aa:	4690      	mov	r8, r2
    59ac:	4699      	mov	r9, r3
    59ae:	46a2      	mov	sl, r4
    59b0:	46ab      	mov	fp, r5
    59b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59b4:	000042c9 	.word	0x000042c9
    59b8:	00004ac9 	.word	0x00004ac9
    59bc:	0000474d 	.word	0x0000474d
    59c0:	0000426d 	.word	0x0000426d
    59c4:	00004293 	.word	0x00004293
    59c8:	0000412d 	.word	0x0000412d

000059cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    59cc:	b570      	push	{r4, r5, r6, lr}
    59ce:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    59d0:	8881      	ldrh	r1, [r0, #4]
    59d2:	6800      	ldr	r0, [r0, #0]
    59d4:	4b1c      	ldr	r3, [pc, #112]	; (5a48 <f_sync+0x7c>)
    59d6:	4798      	blx	r3
	if (res == FR_OK) {
    59d8:	2800      	cmp	r0, #0
    59da:	d102      	bne.n	59e2 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    59dc:	79a3      	ldrb	r3, [r4, #6]
    59de:	069b      	lsls	r3, r3, #26
    59e0:	d400      	bmi.n	59e4 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    59e2:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    59e4:	69e1      	ldr	r1, [r4, #28]
    59e6:	6820      	ldr	r0, [r4, #0]
    59e8:	4b18      	ldr	r3, [pc, #96]	; (5a4c <f_sync+0x80>)
    59ea:	4798      	blx	r3
			if (res == FR_OK) {
    59ec:	2800      	cmp	r0, #0
    59ee:	d1f8      	bne.n	59e2 <f_sync+0x16>
				dir = fp->dir_ptr;
    59f0:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    59f2:	7aeb      	ldrb	r3, [r5, #11]
    59f4:	2220      	movs	r2, #32
    59f6:	4313      	orrs	r3, r2
    59f8:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    59fa:	7b23      	ldrb	r3, [r4, #12]
    59fc:	772b      	strb	r3, [r5, #28]
    59fe:	89a3      	ldrh	r3, [r4, #12]
    5a00:	0a1b      	lsrs	r3, r3, #8
    5a02:	776b      	strb	r3, [r5, #29]
    5a04:	89e3      	ldrh	r3, [r4, #14]
    5a06:	77ab      	strb	r3, [r5, #30]
    5a08:	7be3      	ldrb	r3, [r4, #15]
    5a0a:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    5a0c:	7c23      	ldrb	r3, [r4, #16]
    5a0e:	76ab      	strb	r3, [r5, #26]
    5a10:	8a23      	ldrh	r3, [r4, #16]
    5a12:	0a1b      	lsrs	r3, r3, #8
    5a14:	76eb      	strb	r3, [r5, #27]
    5a16:	8a63      	ldrh	r3, [r4, #18]
    5a18:	752b      	strb	r3, [r5, #20]
    5a1a:	8a63      	ldrh	r3, [r4, #18]
    5a1c:	0a1b      	lsrs	r3, r3, #8
    5a1e:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    5a20:	4b0b      	ldr	r3, [pc, #44]	; (5a50 <f_sync+0x84>)
    5a22:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    5a24:	75a8      	strb	r0, [r5, #22]
    5a26:	0a03      	lsrs	r3, r0, #8
    5a28:	75eb      	strb	r3, [r5, #23]
    5a2a:	0c03      	lsrs	r3, r0, #16
    5a2c:	762b      	strb	r3, [r5, #24]
    5a2e:	0e00      	lsrs	r0, r0, #24
    5a30:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    5a32:	79a3      	ldrb	r3, [r4, #6]
    5a34:	2220      	movs	r2, #32
    5a36:	4393      	bics	r3, r2
    5a38:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    5a3a:	2301      	movs	r3, #1
    5a3c:	6822      	ldr	r2, [r4, #0]
    5a3e:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5a40:	6820      	ldr	r0, [r4, #0]
    5a42:	4b04      	ldr	r3, [pc, #16]	; (5a54 <f_sync+0x88>)
    5a44:	4798      	blx	r3
    5a46:	e7cc      	b.n	59e2 <f_sync+0x16>
    5a48:	000042c9 	.word	0x000042c9
    5a4c:	0000474d 	.word	0x0000474d
    5a50:	0000421d 	.word	0x0000421d
    5a54:	000051a5 	.word	0x000051a5

00005a58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5a58:	b510      	push	{r4, lr}
    5a5a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5a5c:	4b03      	ldr	r3, [pc, #12]	; (5a6c <f_close+0x14>)
    5a5e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5a60:	2800      	cmp	r0, #0
    5a62:	d101      	bne.n	5a68 <f_close+0x10>
    5a64:	2300      	movs	r3, #0
    5a66:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5a68:	bd10      	pop	{r4, pc}
    5a6a:	46c0      	nop			; (mov r8, r8)
    5a6c:	000059cd 	.word	0x000059cd

00005a70 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a72:	46de      	mov	lr, fp
    5a74:	4657      	mov	r7, sl
    5a76:	464e      	mov	r6, r9
    5a78:	4645      	mov	r5, r8
    5a7a:	b5e0      	push	{r5, r6, r7, lr}
    5a7c:	0004      	movs	r4, r0
    5a7e:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5a80:	8881      	ldrh	r1, [r0, #4]
    5a82:	6800      	ldr	r0, [r0, #0]
    5a84:	4b57      	ldr	r3, [pc, #348]	; (5be4 <f_lseek+0x174>)
    5a86:	4798      	blx	r3
    5a88:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5a8a:	d000      	beq.n	5a8e <f_lseek+0x1e>
    5a8c:	e0a2      	b.n	5bd4 <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    5a8e:	79a3      	ldrb	r3, [r4, #6]
    5a90:	b25a      	sxtb	r2, r3
    5a92:	2a00      	cmp	r2, #0
    5a94:	da00      	bge.n	5a98 <f_lseek+0x28>
    5a96:	e09c      	b.n	5bd2 <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5a98:	68e2      	ldr	r2, [r4, #12]
    5a9a:	42b2      	cmp	r2, r6
    5a9c:	d202      	bcs.n	5aa4 <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5a9e:	079b      	lsls	r3, r3, #30
    5aa0:	d400      	bmi.n	5aa4 <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    5aa2:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    5aa4:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    5aa6:	2300      	movs	r3, #0
    5aa8:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    5aaa:	2e00      	cmp	r6, #0
    5aac:	d100      	bne.n	5ab0 <f_lseek+0x40>
    5aae:	e091      	b.n	5bd4 <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5ab0:	6823      	ldr	r3, [r4, #0]
    5ab2:	4699      	mov	r9, r3
    5ab4:	789f      	ldrb	r7, [r3, #2]
    5ab6:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    5ab8:	2800      	cmp	r0, #0
    5aba:	d013      	beq.n	5ae4 <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    5abc:	1e43      	subs	r3, r0, #1
    5abe:	4698      	mov	r8, r3
    5ac0:	1e70      	subs	r0, r6, #1
    5ac2:	4b49      	ldr	r3, [pc, #292]	; (5be8 <f_lseek+0x178>)
    5ac4:	469a      	mov	sl, r3
    5ac6:	0039      	movs	r1, r7
    5ac8:	4798      	blx	r3
    5aca:	4683      	mov	fp, r0
    5acc:	0039      	movs	r1, r7
    5ace:	4640      	mov	r0, r8
    5ad0:	47d0      	blx	sl
			if (ifptr > 0 &&
    5ad2:	4583      	cmp	fp, r0
    5ad4:	d306      	bcc.n	5ae4 <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    5ad6:	4278      	negs	r0, r7
    5ad8:	4643      	mov	r3, r8
    5ada:	4003      	ands	r3, r0
    5adc:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    5ade:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    5ae0:	6960      	ldr	r0, [r4, #20]
    5ae2:	e003      	b.n	5aec <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    5ae4:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    5ae6:	2800      	cmp	r0, #0
    5ae8:	d00b      	beq.n	5b02 <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    5aea:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    5aec:	2800      	cmp	r0, #0
    5aee:	d060      	beq.n	5bb2 <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    5af0:	42be      	cmp	r6, r7
    5af2:	d93a      	bls.n	5b6a <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5af4:	2302      	movs	r3, #2
    5af6:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5af8:	4b3c      	ldr	r3, [pc, #240]	; (5bec <f_lseek+0x17c>)
    5afa:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    5afc:	4b3c      	ldr	r3, [pc, #240]	; (5bf0 <f_lseek+0x180>)
    5afe:	4699      	mov	r9, r3
    5b00:	e029      	b.n	5b56 <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    5b02:	2100      	movs	r1, #0
    5b04:	4648      	mov	r0, r9
    5b06:	4b39      	ldr	r3, [pc, #228]	; (5bec <f_lseek+0x17c>)
    5b08:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5b0a:	2801      	cmp	r0, #1
    5b0c:	d003      	beq.n	5b16 <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5b0e:	1c43      	adds	r3, r0, #1
    5b10:	d008      	beq.n	5b24 <f_lseek+0xb4>
					fp->sclust = clst;
    5b12:	6120      	str	r0, [r4, #16]
    5b14:	e7e9      	b.n	5aea <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5b16:	79a2      	ldrb	r2, [r4, #6]
    5b18:	2380      	movs	r3, #128	; 0x80
    5b1a:	425b      	negs	r3, r3
    5b1c:	4313      	orrs	r3, r2
    5b1e:	71a3      	strb	r3, [r4, #6]
    5b20:	2502      	movs	r5, #2
    5b22:	e057      	b.n	5bd4 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5b24:	79a2      	ldrb	r2, [r4, #6]
    5b26:	2380      	movs	r3, #128	; 0x80
    5b28:	425b      	negs	r3, r3
    5b2a:	4313      	orrs	r3, r2
    5b2c:	71a3      	strb	r3, [r4, #6]
    5b2e:	2501      	movs	r5, #1
    5b30:	e050      	b.n	5bd4 <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    5b32:	0001      	movs	r1, r0
    5b34:	6820      	ldr	r0, [r4, #0]
    5b36:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5b38:	1c43      	adds	r3, r0, #1
    5b3a:	d028      	beq.n	5b8e <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5b3c:	2801      	cmp	r0, #1
    5b3e:	d92d      	bls.n	5b9c <f_lseek+0x12c>
    5b40:	6823      	ldr	r3, [r4, #0]
    5b42:	699b      	ldr	r3, [r3, #24]
    5b44:	4298      	cmp	r0, r3
    5b46:	d229      	bcs.n	5b9c <f_lseek+0x12c>
					fp->clust = clst;
    5b48:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    5b4a:	68a3      	ldr	r3, [r4, #8]
    5b4c:	19db      	adds	r3, r3, r7
    5b4e:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    5b50:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    5b52:	42b7      	cmp	r7, r6
    5b54:	d209      	bcs.n	5b6a <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5b56:	79a3      	ldrb	r3, [r4, #6]
    5b58:	4642      	mov	r2, r8
    5b5a:	421a      	tst	r2, r3
    5b5c:	d0e9      	beq.n	5b32 <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5b5e:	0001      	movs	r1, r0
    5b60:	6820      	ldr	r0, [r4, #0]
    5b62:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    5b64:	2800      	cmp	r0, #0
    5b66:	d1e7      	bne.n	5b38 <f_lseek+0xc8>
							ofs = bcs; break;
    5b68:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    5b6a:	68a3      	ldr	r3, [r4, #8]
    5b6c:	199b      	adds	r3, r3, r6
    5b6e:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    5b70:	05f3      	lsls	r3, r6, #23
    5b72:	d01d      	beq.n	5bb0 <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    5b74:	0001      	movs	r1, r0
    5b76:	6820      	ldr	r0, [r4, #0]
    5b78:	4b1e      	ldr	r3, [pc, #120]	; (5bf4 <f_lseek+0x184>)
    5b7a:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5b7c:	2800      	cmp	r0, #0
    5b7e:	d114      	bne.n	5baa <f_lseek+0x13a>
    5b80:	79a2      	ldrb	r2, [r4, #6]
    5b82:	2380      	movs	r3, #128	; 0x80
    5b84:	425b      	negs	r3, r3
    5b86:	4313      	orrs	r3, r2
    5b88:	71a3      	strb	r3, [r4, #6]
    5b8a:	2502      	movs	r5, #2
    5b8c:	e022      	b.n	5bd4 <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5b8e:	79a2      	ldrb	r2, [r4, #6]
    5b90:	2380      	movs	r3, #128	; 0x80
    5b92:	425b      	negs	r3, r3
    5b94:	4313      	orrs	r3, r2
    5b96:	71a3      	strb	r3, [r4, #6]
    5b98:	2501      	movs	r5, #1
    5b9a:	e01b      	b.n	5bd4 <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5b9c:	79a2      	ldrb	r2, [r4, #6]
    5b9e:	2380      	movs	r3, #128	; 0x80
    5ba0:	425b      	negs	r3, r3
    5ba2:	4313      	orrs	r3, r2
    5ba4:	71a3      	strb	r3, [r4, #6]
    5ba6:	2502      	movs	r5, #2
    5ba8:	e014      	b.n	5bd4 <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    5baa:	0a76      	lsrs	r6, r6, #9
    5bac:	1830      	adds	r0, r6, r0
    5bae:	e000      	b.n	5bb2 <f_lseek+0x142>
		fp->fptr = nsect = 0;
    5bb0:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    5bb2:	68a3      	ldr	r3, [r4, #8]
    5bb4:	05da      	lsls	r2, r3, #23
    5bb6:	d003      	beq.n	5bc0 <f_lseek+0x150>
    5bb8:	69a2      	ldr	r2, [r4, #24]
    5bba:	4290      	cmp	r0, r2
    5bbc:	d000      	beq.n	5bc0 <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5bbe:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    5bc0:	68e2      	ldr	r2, [r4, #12]
    5bc2:	4293      	cmp	r3, r2
    5bc4:	d906      	bls.n	5bd4 <f_lseek+0x164>
			fp->fsize = fp->fptr;
    5bc6:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    5bc8:	79a3      	ldrb	r3, [r4, #6]
    5bca:	2220      	movs	r2, #32
    5bcc:	4313      	orrs	r3, r2
    5bce:	71a3      	strb	r3, [r4, #6]
    5bd0:	e000      	b.n	5bd4 <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5bd2:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    5bd4:	0028      	movs	r0, r5
    5bd6:	bc3c      	pop	{r2, r3, r4, r5}
    5bd8:	4690      	mov	r8, r2
    5bda:	4699      	mov	r9, r3
    5bdc:	46a2      	mov	sl, r4
    5bde:	46ab      	mov	fp, r5
    5be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5be2:	46c0      	nop			; (mov r8, r8)
    5be4:	000042c9 	.word	0x000042c9
    5be8:	00008ed5 	.word	0x00008ed5
    5bec:	00004ac9 	.word	0x00004ac9
    5bf0:	000047ed 	.word	0x000047ed
    5bf4:	00004293 	.word	0x00004293

00005bf8 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    5bf8:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    5bfa:	287f      	cmp	r0, #127	; 0x7f
    5bfc:	d911      	bls.n	5c22 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5bfe:	2900      	cmp	r1, #0
    5c00:	d111      	bne.n	5c26 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    5c02:	28c7      	cmp	r0, #199	; 0xc7
    5c04:	d017      	beq.n	5c36 <ff_convert+0x3e>
    5c06:	4a0d      	ldr	r2, [pc, #52]	; (5c3c <ff_convert+0x44>)
    5c08:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    5c0a:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    5c0c:	8811      	ldrh	r1, [r2, #0]
    5c0e:	4281      	cmp	r1, r0
    5c10:	d004      	beq.n	5c1c <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    5c12:	3301      	adds	r3, #1
    5c14:	b29b      	uxth	r3, r3
    5c16:	3202      	adds	r2, #2
    5c18:	2b80      	cmp	r3, #128	; 0x80
    5c1a:	d1f7      	bne.n	5c0c <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    5c1c:	3380      	adds	r3, #128	; 0x80
    5c1e:	20ff      	movs	r0, #255	; 0xff
    5c20:	4003      	ands	r3, r0
		}
	}

	return c;
}
    5c22:	0018      	movs	r0, r3
    5c24:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    5c26:	2300      	movs	r3, #0
    5c28:	28ff      	cmp	r0, #255	; 0xff
    5c2a:	d8fa      	bhi.n	5c22 <ff_convert+0x2a>
    5c2c:	3880      	subs	r0, #128	; 0x80
    5c2e:	0040      	lsls	r0, r0, #1
    5c30:	4b02      	ldr	r3, [pc, #8]	; (5c3c <ff_convert+0x44>)
    5c32:	5ac3      	ldrh	r3, [r0, r3]
    5c34:	e7f5      	b.n	5c22 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    5c36:	2300      	movs	r3, #0
    5c38:	e7f0      	b.n	5c1c <ff_convert+0x24>
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	0000a814 	.word	0x0000a814

00005c40 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5c40:	2861      	cmp	r0, #97	; 0x61
    5c42:	d014      	beq.n	5c6e <ff_wtoupper+0x2e>
    5c44:	4b0b      	ldr	r3, [pc, #44]	; (5c74 <ff_wtoupper+0x34>)
    5c46:	3304      	adds	r3, #4
    5c48:	2101      	movs	r1, #1
    5c4a:	2262      	movs	r2, #98	; 0x62
    5c4c:	4290      	cmp	r0, r2
    5c4e:	d007      	beq.n	5c60 <ff_wtoupper+0x20>
    5c50:	3101      	adds	r1, #1
    5c52:	3302      	adds	r3, #2
    5c54:	1e9a      	subs	r2, r3, #2
    5c56:	8812      	ldrh	r2, [r2, #0]
    5c58:	2a00      	cmp	r2, #0
    5c5a:	d1f7      	bne.n	5c4c <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5c5c:	0003      	movs	r3, r0
    5c5e:	e004      	b.n	5c6a <ff_wtoupper+0x2a>
    5c60:	1e03      	subs	r3, r0, #0
    5c62:	d002      	beq.n	5c6a <ff_wtoupper+0x2a>
    5c64:	0049      	lsls	r1, r1, #1
    5c66:	4b04      	ldr	r3, [pc, #16]	; (5c78 <ff_wtoupper+0x38>)
    5c68:	5acb      	ldrh	r3, [r1, r3]
}
    5c6a:	0018      	movs	r0, r3
    5c6c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5c6e:	2100      	movs	r1, #0
    5c70:	e7f8      	b.n	5c64 <ff_wtoupper+0x24>
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	0000a914 	.word	0x0000a914
    5c78:	0000aaf4 	.word	0x0000aaf4

00005c7c <adc_spi_callback>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5c7c:	2280      	movs	r2, #128	; 0x80
    5c7e:	0352      	lsls	r2, r2, #13
    5c80:	4b02      	ldr	r3, [pc, #8]	; (5c8c <adc_spi_callback+0x10>)
    5c82:	619a      	str	r2, [r3, #24]
}

static void adc_spi_callback(struct spi_module *const module)
{
	port_pin_set_output_level(ADC_CONV_PIN, true);
	adc_recorder.rec_done = true;
    5c84:	2201      	movs	r2, #1
    5c86:	4b02      	ldr	r3, [pc, #8]	; (5c90 <adc_spi_callback+0x14>)
    5c88:	70da      	strb	r2, [r3, #3]
}
    5c8a:	4770      	bx	lr
    5c8c:	41004400 	.word	0x41004400
    5c90:	200006cc 	.word	0x200006cc

00005c94 <audio_sync_reached_callback>:
	return true;
}

static void audio_sync_reached_callback(void)
{
	sync_reached = true;
    5c94:	2201      	movs	r2, #1
    5c96:	4b01      	ldr	r3, [pc, #4]	; (5c9c <audio_sync_reached_callback+0x8>)
    5c98:	701a      	strb	r2, [r3, #0]
}
    5c9a:	4770      	bx	lr
    5c9c:	200002da 	.word	0x200002da

00005ca0 <audio_in_init>:
{
    5ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ca2:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
    5ca4:	a90f      	add	r1, sp, #60	; 0x3c
    5ca6:	2501      	movs	r5, #1
    5ca8:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    5caa:	2600      	movs	r6, #0
    5cac:	708e      	strb	r6, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5cae:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
    5cb0:	2014      	movs	r0, #20
    5cb2:	4f35      	ldr	r7, [pc, #212]	; (5d88 <audio_in_init+0xe8>)
    5cb4:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    5cb6:	2280      	movs	r2, #128	; 0x80
    5cb8:	0352      	lsls	r2, r2, #13
    5cba:	4b34      	ldr	r3, [pc, #208]	; (5d8c <audio_in_init+0xec>)
    5cbc:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    5cbe:	4c34      	ldr	r4, [pc, #208]	; (5d90 <audio_in_init+0xf0>)
    5cc0:	232f      	movs	r3, #47	; 0x2f
    5cc2:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5cc4:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
    5cc6:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5cc8:	466b      	mov	r3, sp
    5cca:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    5ccc:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5cce:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5cd0:	4669      	mov	r1, sp
    5cd2:	202f      	movs	r0, #47	; 0x2f
    5cd4:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    5cd6:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5cd8:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5cda:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5cdc:	2900      	cmp	r1, #0
    5cde:	d104      	bne.n	5cea <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
    5ce0:	095a      	lsrs	r2, r3, #5
    5ce2:	01d2      	lsls	r2, r2, #7
    5ce4:	4929      	ldr	r1, [pc, #164]	; (5d8c <audio_in_init+0xec>)
    5ce6:	468c      	mov	ip, r1
    5ce8:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5cea:	261f      	movs	r6, #31
    5cec:	4033      	ands	r3, r6
    5cee:	2501      	movs	r5, #1
    5cf0:	0029      	movs	r1, r5
    5cf2:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5cf4:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    5cf6:	ac01      	add	r4, sp, #4
    5cf8:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5cfa:	2300      	movs	r3, #0
    5cfc:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5cfe:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5d00:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    5d02:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    5d04:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5d06:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    5d08:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5d0a:	2224      	movs	r2, #36	; 0x24
    5d0c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5d0e:	3a18      	subs	r2, #24
    5d10:	2100      	movs	r1, #0
    5d12:	a807      	add	r0, sp, #28
    5d14:	4b1f      	ldr	r3, [pc, #124]	; (5d94 <audio_in_init+0xf4>)
    5d16:	4798      	blx	r3
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
    5d18:	2380      	movs	r3, #128	; 0x80
    5d1a:	039b      	lsls	r3, r3, #14
    5d1c:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
    5d1e:	4b1e      	ldr	r3, [pc, #120]	; (5d98 <audio_in_init+0xf8>)
    5d20:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
    5d22:	4b1e      	ldr	r3, [pc, #120]	; (5d9c <audio_in_init+0xfc>)
    5d24:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
    5d26:	4b1e      	ldr	r3, [pc, #120]	; (5da0 <audio_in_init+0x100>)
    5d28:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
    5d2a:	2301      	movs	r3, #1
    5d2c:	425b      	negs	r3, r3
    5d2e:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
    5d30:	4b1c      	ldr	r3, [pc, #112]	; (5da4 <audio_in_init+0x104>)
    5d32:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
    5d34:	4f1c      	ldr	r7, [pc, #112]	; (5da8 <audio_in_init+0x108>)
    5d36:	0022      	movs	r2, r4
    5d38:	491c      	ldr	r1, [pc, #112]	; (5dac <audio_in_init+0x10c>)
    5d3a:	0038      	movs	r0, r7
    5d3c:	4b1c      	ldr	r3, [pc, #112]	; (5db0 <audio_in_init+0x110>)
    5d3e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5d40:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5d42:	0020      	movs	r0, r4
    5d44:	4b1b      	ldr	r3, [pc, #108]	; (5db4 <audio_in_init+0x114>)
    5d46:	4798      	blx	r3
    5d48:	4006      	ands	r6, r0
    5d4a:	40b5      	lsls	r5, r6
    5d4c:	4b1a      	ldr	r3, [pc, #104]	; (5db8 <audio_in_init+0x118>)
    5d4e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d50:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    5d52:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    5d54:	2b00      	cmp	r3, #0
    5d56:	d1fc      	bne.n	5d52 <audio_in_init+0xb2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5d58:	6823      	ldr	r3, [r4, #0]
    5d5a:	2202      	movs	r2, #2
    5d5c:	4313      	orrs	r3, r2
    5d5e:	6023      	str	r3, [r4, #0]
	spi_register_callback(&adc_spi_module, adc_spi_callback, SPI_CALLBACK_BUFFER_RECEIVED);
    5d60:	4c11      	ldr	r4, [pc, #68]	; (5da8 <audio_in_init+0x108>)
    5d62:	3a01      	subs	r2, #1
    5d64:	4915      	ldr	r1, [pc, #84]	; (5dbc <audio_in_init+0x11c>)
    5d66:	0020      	movs	r0, r4
    5d68:	4b15      	ldr	r3, [pc, #84]	; (5dc0 <audio_in_init+0x120>)
    5d6a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    5d6c:	2237      	movs	r2, #55	; 0x37
    5d6e:	5ca3      	ldrb	r3, [r4, r2]
    5d70:	2102      	movs	r1, #2
    5d72:	430b      	orrs	r3, r1
    5d74:	54a3      	strb	r3, [r4, r2]
	adc_recorder.adc_init_ok = true;
    5d76:	4b13      	ldr	r3, [pc, #76]	; (5dc4 <audio_in_init+0x124>)
    5d78:	3a36      	subs	r2, #54	; 0x36
    5d7a:	701a      	strb	r2, [r3, #0]
	adc_recorder.rec_ready = false;
    5d7c:	2200      	movs	r2, #0
    5d7e:	705a      	strb	r2, [r3, #1]
	adc_recorder.rec_started = false;
    5d80:	709a      	strb	r2, [r3, #2]
	adc_recorder.rec_done = false;
    5d82:	70da      	strb	r2, [r3, #3]
}
    5d84:	b011      	add	sp, #68	; 0x44
    5d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d88:	000089fd 	.word	0x000089fd
    5d8c:	41004400 	.word	0x41004400
    5d90:	200006c8 	.word	0x200006c8
    5d94:	000094c3 	.word	0x000094c3
    5d98:	00100002 	.word	0x00100002
    5d9c:	00110002 	.word	0x00110002
    5da0:	00120002 	.word	0x00120002
    5da4:	00b71b00 	.word	0x00b71b00
    5da8:	20000630 	.word	0x20000630
    5dac:	42000c00 	.word	0x42000c00
    5db0:	00007af1 	.word	0x00007af1
    5db4:	00002631 	.word	0x00002631
    5db8:	e000e100 	.word	0xe000e100
    5dbc:	00005c7d 	.word	0x00005c7d
    5dc0:	00000115 	.word	0x00000115
    5dc4:	200006cc 	.word	0x200006cc

00005dc8 <audio_record_init>:
bool audio_record_init(void) {
    5dc8:	b510      	push	{r4, lr}
    5dca:	b086      	sub	sp, #24
	char file_name[] = "180212_140925.wav";
    5dcc:	aa01      	add	r2, sp, #4
    5dce:	4b1b      	ldr	r3, [pc, #108]	; (5e3c <audio_record_init+0x74>)
    5dd0:	cb13      	ldmia	r3!, {r0, r1, r4}
    5dd2:	c213      	stmia	r2!, {r0, r1, r4}
    5dd4:	0011      	movs	r1, r2
    5dd6:	681a      	ldr	r2, [r3, #0]
    5dd8:	600a      	str	r2, [r1, #0]
    5dda:	889b      	ldrh	r3, [r3, #4]
    5ddc:	808b      	strh	r3, [r1, #4]
	memset(&file_sys, 0, sizeof(FATFS));
    5dde:	4c18      	ldr	r4, [pc, #96]	; (5e40 <audio_record_init+0x78>)
    5de0:	228c      	movs	r2, #140	; 0x8c
    5de2:	0092      	lsls	r2, r2, #2
    5de4:	2100      	movs	r1, #0
    5de6:	0020      	movs	r0, r4
    5de8:	4b16      	ldr	r3, [pc, #88]	; (5e44 <audio_record_init+0x7c>)
    5dea:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    5dec:	0021      	movs	r1, r4
    5dee:	2000      	movs	r0, #0
    5df0:	4b15      	ldr	r3, [pc, #84]	; (5e48 <audio_record_init+0x80>)
    5df2:	4798      	blx	r3
		return false;
    5df4:	2300      	movs	r3, #0
	if(res == FR_INVALID_DRIVE) {
    5df6:	280b      	cmp	r0, #11
    5df8:	d01d      	beq.n	5e36 <audio_record_init+0x6e>
	res = f_open(&file_object, file_name, FA_CREATE_ALWAYS | FA_WRITE);
    5dfa:	220a      	movs	r2, #10
    5dfc:	a901      	add	r1, sp, #4
    5dfe:	4813      	ldr	r0, [pc, #76]	; (5e4c <audio_record_init+0x84>)
    5e00:	4b13      	ldr	r3, [pc, #76]	; (5e50 <audio_record_init+0x88>)
    5e02:	4798      	blx	r3
	if(res != FR_OK) {
    5e04:	2800      	cmp	r0, #0
    5e06:	d111      	bne.n	5e2c <audio_record_init+0x64>
	res = f_write(&file_object, wave_header, 44, (UINT *)&bytes);
    5e08:	466b      	mov	r3, sp
    5e0a:	222c      	movs	r2, #44	; 0x2c
    5e0c:	4911      	ldr	r1, [pc, #68]	; (5e54 <audio_record_init+0x8c>)
    5e0e:	480f      	ldr	r0, [pc, #60]	; (5e4c <audio_record_init+0x84>)
    5e10:	4c11      	ldr	r4, [pc, #68]	; (5e58 <audio_record_init+0x90>)
    5e12:	47a0      	blx	r4
	return true;
    5e14:	2301      	movs	r3, #1
	if(res != FR_OK) {
    5e16:	2800      	cmp	r0, #0
    5e18:	d00d      	beq.n	5e36 <audio_record_init+0x6e>
		printf("Error while writing WAV header: #%d\n\r", res);
    5e1a:	0001      	movs	r1, r0
    5e1c:	480f      	ldr	r0, [pc, #60]	; (5e5c <audio_record_init+0x94>)
    5e1e:	4b10      	ldr	r3, [pc, #64]	; (5e60 <audio_record_init+0x98>)
    5e20:	4798      	blx	r3
		f_close(&file_object);
    5e22:	480a      	ldr	r0, [pc, #40]	; (5e4c <audio_record_init+0x84>)
    5e24:	4b0f      	ldr	r3, [pc, #60]	; (5e64 <audio_record_init+0x9c>)
    5e26:	4798      	blx	r3
		return false;
    5e28:	2300      	movs	r3, #0
    5e2a:	e004      	b.n	5e36 <audio_record_init+0x6e>
		printf("Error while opening file: #%d\n\r", res);
    5e2c:	0001      	movs	r1, r0
    5e2e:	480e      	ldr	r0, [pc, #56]	; (5e68 <audio_record_init+0xa0>)
    5e30:	4b0b      	ldr	r3, [pc, #44]	; (5e60 <audio_record_init+0x98>)
    5e32:	4798      	blx	r3
		return false;
    5e34:	2300      	movs	r3, #0
}
    5e36:	0018      	movs	r0, r3
    5e38:	b006      	add	sp, #24
    5e3a:	bd10      	pop	{r4, pc}
    5e3c:	0000ad1c 	.word	0x0000ad1c
    5e40:	20000ad0 	.word	0x20000ad0
    5e44:	000094c3 	.word	0x000094c3
    5e48:	000055dd 	.word	0x000055dd
    5e4c:	2000066c 	.word	0x2000066c
    5e50:	0000560d 	.word	0x0000560d
    5e54:	200000ac 	.word	0x200000ac
    5e58:	00005795 	.word	0x00005795
    5e5c:	0000acf4 	.word	0x0000acf4
    5e60:	000094d5 	.word	0x000094d5
    5e64:	00005a59 	.word	0x00005a59
    5e68:	0000acd4 	.word	0x0000acd4

00005e6c <audio_record_close>:
{
    5e6c:	b530      	push	{r4, r5, lr}
    5e6e:	b083      	sub	sp, #12
	volatile bool retVal = true;
    5e70:	2201      	movs	r2, #1
    5e72:	466b      	mov	r3, sp
    5e74:	70da      	strb	r2, [r3, #3]
	((uint16_t *)&wave_header)[WAVE_FORMAT_NUM_CHANNEL_OFFSET/2] = AUDIO_NUM_CHANNELS;
    5e76:	4c18      	ldr	r4, [pc, #96]	; (5ed8 <audio_record_close+0x6c>)
    5e78:	2302      	movs	r3, #2
    5e7a:	82e3      	strh	r3, [r4, #22]
	((uint16_t *)&wave_header)[WAVE_FORMAT_BITS_PER_SAMPLE_OFFSET/2] = AUDIO_BITS_PER_SAMPLE;
    5e7c:	330e      	adds	r3, #14
    5e7e:	8463      	strh	r3, [r4, #34]	; 0x22
	((uint16_t *)&wave_header)[WAVE_FORMAT_BLOCK_ALIGN_OFFSET/2] = AUDIO_BITS_PER_SAMPLE/8 * AUDIO_NUM_CHANNELS;
    5e80:	3b0c      	subs	r3, #12
    5e82:	8423      	strh	r3, [r4, #32]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SAMPLE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE;
    5e84:	4b15      	ldr	r3, [pc, #84]	; (5edc <audio_record_close+0x70>)
    5e86:	61a3      	str	r3, [r4, #24]
	((uint32_t *)&wave_header)[WAVE_FORMAT_BYTE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE * AUDIO_NUM_CHANNELS * AUDIO_BITS_PER_SAMPLE/8;
    5e88:	4b15      	ldr	r3, [pc, #84]	; (5ee0 <audio_record_close+0x74>)
    5e8a:	61e3      	str	r3, [r4, #28]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SUBCHUNK2_SIZE_OFFSET/4] = audio_total_samples * AUDIO_BITS_PER_SAMPLE/8;
    5e8c:	4b15      	ldr	r3, [pc, #84]	; (5ee4 <audio_record_close+0x78>)
    5e8e:	681b      	ldr	r3, [r3, #0]
    5e90:	011b      	lsls	r3, r3, #4
    5e92:	08db      	lsrs	r3, r3, #3
    5e94:	62a3      	str	r3, [r4, #40]	; 0x28
	((uint32_t *)&wave_header)[WAVE_FORMAT_CHUNK_SIZE_OFFSET/4] = (audio_total_samples * AUDIO_BITS_PER_SAMPLE/8) + 36;
    5e96:	3324      	adds	r3, #36	; 0x24
    5e98:	6063      	str	r3, [r4, #4]
	f_lseek(&file_object, 0);
    5e9a:	4d13      	ldr	r5, [pc, #76]	; (5ee8 <audio_record_close+0x7c>)
    5e9c:	2100      	movs	r1, #0
    5e9e:	0028      	movs	r0, r5
    5ea0:	4b12      	ldr	r3, [pc, #72]	; (5eec <audio_record_close+0x80>)
    5ea2:	4798      	blx	r3
	res = f_write(&file_object, wave_header, 44, &bytes);
    5ea4:	ab01      	add	r3, sp, #4
    5ea6:	222c      	movs	r2, #44	; 0x2c
    5ea8:	0021      	movs	r1, r4
    5eaa:	0028      	movs	r0, r5
    5eac:	4c10      	ldr	r4, [pc, #64]	; (5ef0 <audio_record_close+0x84>)
    5eae:	47a0      	blx	r4
	if(res != FR_OK) {
    5eb0:	2800      	cmp	r0, #0
    5eb2:	d002      	beq.n	5eba <audio_record_close+0x4e>
		retVal = false;
    5eb4:	2200      	movs	r2, #0
    5eb6:	466b      	mov	r3, sp
    5eb8:	70da      	strb	r2, [r3, #3]
	f_close(&file_object);
    5eba:	480b      	ldr	r0, [pc, #44]	; (5ee8 <audio_record_close+0x7c>)
    5ebc:	4b0d      	ldr	r3, [pc, #52]	; (5ef4 <audio_record_close+0x88>)
    5ebe:	4798      	blx	r3
	audio_total_samples = 0;
    5ec0:	2200      	movs	r2, #0
    5ec2:	4b08      	ldr	r3, [pc, #32]	; (5ee4 <audio_record_close+0x78>)
    5ec4:	601a      	str	r2, [r3, #0]
    5ec6:	2280      	movs	r2, #128	; 0x80
    5ec8:	0152      	lsls	r2, r2, #5
    5eca:	4b0b      	ldr	r3, [pc, #44]	; (5ef8 <audio_record_close+0x8c>)
    5ecc:	619a      	str	r2, [r3, #24]
	return retVal;
    5ece:	466b      	mov	r3, sp
    5ed0:	78d8      	ldrb	r0, [r3, #3]
    5ed2:	b2c0      	uxtb	r0, r0
}
    5ed4:	b003      	add	sp, #12
    5ed6:	bd30      	pop	{r4, r5, pc}
    5ed8:	200000ac 	.word	0x200000ac
    5edc:	0000ac44 	.word	0x0000ac44
    5ee0:	0002b110 	.word	0x0002b110
    5ee4:	200002d0 	.word	0x200002d0
    5ee8:	2000066c 	.word	0x2000066c
    5eec:	00005a71 	.word	0x00005a71
    5ef0:	00005795 	.word	0x00005795
    5ef4:	00005a59 	.word	0x00005a59
    5ef8:	41004400 	.word	0x41004400

00005efc <audio_record_1samp_start>:
void audio_record_1samp_start(uint8_t buf) {
    5efc:	b510      	push	{r4, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5efe:	2280      	movs	r2, #128	; 0x80
    5f00:	0352      	lsls	r2, r2, #13
    5f02:	4b07      	ldr	r3, [pc, #28]	; (5f20 <audio_record_1samp_start+0x24>)
    5f04:	615a      	str	r2, [r3, #20]
	adc_recorder.rec_ready = false;
    5f06:	4b07      	ldr	r3, [pc, #28]	; (5f24 <audio_record_1samp_start+0x28>)
    5f08:	2200      	movs	r2, #0
    5f0a:	705a      	strb	r2, [r3, #1]
	adc_recorder.rec_started = true;
    5f0c:	3201      	adds	r2, #1
    5f0e:	709a      	strb	r2, [r3, #2]
	spi_read_buffer_job(&adc_spi_module, adc_vals, 2, 0xFFFF);
    5f10:	4b05      	ldr	r3, [pc, #20]	; (5f28 <audio_record_1samp_start+0x2c>)
    5f12:	3201      	adds	r2, #1
    5f14:	4905      	ldr	r1, [pc, #20]	; (5f2c <audio_record_1samp_start+0x30>)
    5f16:	4806      	ldr	r0, [pc, #24]	; (5f30 <audio_record_1samp_start+0x34>)
    5f18:	4c06      	ldr	r4, [pc, #24]	; (5f34 <audio_record_1samp_start+0x38>)
    5f1a:	47a0      	blx	r4
}
    5f1c:	bd10      	pop	{r4, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	41004400 	.word	0x41004400
    5f24:	200006cc 	.word	0x200006cc
    5f28:	0000ffff 	.word	0x0000ffff
    5f2c:	200006c4 	.word	0x200006c4
    5f30:	20000630 	.word	0x20000630
    5f34:	00000179 	.word	0x00000179

00005f38 <audio_record_1samp_finish>:
void audio_record_1samp_finish(uint8_t buf) {
    5f38:	b510      	push	{r4, lr}
	if(buf < AUDIO_BUFFER_NUMBER) {
    5f3a:	2803      	cmp	r0, #3
    5f3c:	d80b      	bhi.n	5f56 <audio_record_1samp_finish+0x1e>
		audio_buffer[buf][audio_frame_cnt] = adc_vals[0];
    5f3e:	4a06      	ldr	r2, [pc, #24]	; (5f58 <audio_record_1samp_finish+0x20>)
    5f40:	6811      	ldr	r1, [r2, #0]
    5f42:	0203      	lsls	r3, r0, #8
    5f44:	4805      	ldr	r0, [pc, #20]	; (5f5c <audio_record_1samp_finish+0x24>)
    5f46:	18c0      	adds	r0, r0, r3
    5f48:	4b05      	ldr	r3, [pc, #20]	; (5f60 <audio_record_1samp_finish+0x28>)
    5f4a:	781c      	ldrb	r4, [r3, #0]
    5f4c:	5444      	strb	r4, [r0, r1]
		audio_buffer[buf][audio_frame_cnt+1] = adc_vals[1];
    5f4e:	6812      	ldr	r2, [r2, #0]
    5f50:	1880      	adds	r0, r0, r2
    5f52:	785b      	ldrb	r3, [r3, #1]
    5f54:	7043      	strb	r3, [r0, #1]
}
    5f56:	bd10      	pop	{r4, pc}
    5f58:	200002cc 	.word	0x200002cc
    5f5c:	200006d0 	.word	0x200006d0
    5f60:	200006c4 	.word	0x200006c4

00005f64 <audio_write_chunk>:
{
    5f64:	b510      	push	{r4, lr}
    5f66:	b082      	sub	sp, #8
	res = f_write(&file_object, (char *)audio_buffer[buf], AUDIO_CHUNK_SIZE, &bytes);
    5f68:	0201      	lsls	r1, r0, #8
    5f6a:	480e      	ldr	r0, [pc, #56]	; (5fa4 <audio_write_chunk+0x40>)
    5f6c:	1809      	adds	r1, r1, r0
    5f6e:	ab01      	add	r3, sp, #4
    5f70:	2280      	movs	r2, #128	; 0x80
    5f72:	0052      	lsls	r2, r2, #1
    5f74:	480c      	ldr	r0, [pc, #48]	; (5fa8 <audio_write_chunk+0x44>)
    5f76:	4c0d      	ldr	r4, [pc, #52]	; (5fac <audio_write_chunk+0x48>)
    5f78:	47a0      	blx	r4
	if(res != FR_OK) {
    5f7a:	2800      	cmp	r0, #0
    5f7c:	d10a      	bne.n	5f94 <audio_write_chunk+0x30>
		res = f_sync(&file_object);
    5f7e:	480a      	ldr	r0, [pc, #40]	; (5fa8 <audio_write_chunk+0x44>)
    5f80:	4b0b      	ldr	r3, [pc, #44]	; (5fb0 <audio_write_chunk+0x4c>)
    5f82:	4798      	blx	r3
	return true;
    5f84:	2301      	movs	r3, #1
		if(res != FR_OK) {
    5f86:	2800      	cmp	r0, #0
    5f88:	d008      	beq.n	5f9c <audio_write_chunk+0x38>
			f_close(&file_object);
    5f8a:	4807      	ldr	r0, [pc, #28]	; (5fa8 <audio_write_chunk+0x44>)
    5f8c:	4b09      	ldr	r3, [pc, #36]	; (5fb4 <audio_write_chunk+0x50>)
    5f8e:	4798      	blx	r3
			return false;
    5f90:	2300      	movs	r3, #0
    5f92:	e003      	b.n	5f9c <audio_write_chunk+0x38>
		f_close(&file_object);
    5f94:	4804      	ldr	r0, [pc, #16]	; (5fa8 <audio_write_chunk+0x44>)
    5f96:	4b07      	ldr	r3, [pc, #28]	; (5fb4 <audio_write_chunk+0x50>)
    5f98:	4798      	blx	r3
		return false;
    5f9a:	2300      	movs	r3, #0
}
    5f9c:	0018      	movs	r0, r3
    5f9e:	b002      	add	sp, #8
    5fa0:	bd10      	pop	{r4, pc}
    5fa2:	46c0      	nop			; (mov r8, r8)
    5fa4:	200006d0 	.word	0x200006d0
    5fa8:	2000066c 	.word	0x2000066c
    5fac:	00005795 	.word	0x00005795
    5fb0:	000059cd 	.word	0x000059cd
    5fb4:	00005a59 	.word	0x00005a59

00005fb8 <audio_sync_init>:

void audio_sync_init(void)
{
    5fb8:	b570      	push	{r4, r5, r6, lr}
    5fba:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    5fbc:	4e19      	ldr	r6, [pc, #100]	; (6024 <audio_sync_init+0x6c>)
    5fbe:	ac01      	add	r4, sp, #4
    5fc0:	0031      	movs	r1, r6
    5fc2:	0020      	movs	r0, r4
    5fc4:	4b18      	ldr	r3, [pc, #96]	; (6028 <audio_sync_init+0x70>)
    5fc6:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
    5fc8:	2300      	movs	r3, #0
    5fca:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    5fcc:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
    5fce:	4b17      	ldr	r3, [pc, #92]	; (602c <audio_sync_init+0x74>)
    5fd0:	6063      	str	r3, [r4, #4]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
    5fd2:	4d17      	ldr	r5, [pc, #92]	; (6030 <audio_sync_init+0x78>)
    5fd4:	0022      	movs	r2, r4
    5fd6:	0031      	movs	r1, r6
    5fd8:	0028      	movs	r0, r5
    5fda:	4b16      	ldr	r3, [pc, #88]	; (6034 <audio_sync_init+0x7c>)
    5fdc:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5fde:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5fe0:	2102      	movs	r1, #2
    5fe2:	6893      	ldr	r3, [r2, #8]
    5fe4:	4219      	tst	r1, r3
    5fe6:	d1fc      	bne.n	5fe2 <audio_sync_init+0x2a>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5fe8:	6813      	ldr	r3, [r2, #0]
    5fea:	2102      	movs	r1, #2
    5fec:	430b      	orrs	r3, r1
    5fee:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5ff0:	4b0f      	ldr	r3, [pc, #60]	; (6030 <audio_sync_init+0x78>)
    5ff2:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5ff4:	3102      	adds	r1, #2
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    5ff6:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Cancel RETRIGGER command and issue STOP */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    5ff8:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5ffa:	6893      	ldr	r3, [r2, #8]
    5ffc:	4219      	tst	r1, r3
    5ffe:	d1fc      	bne.n	5ffa <audio_sync_init+0x42>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    6000:	7953      	ldrb	r3, [r2, #5]
    6002:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    6004:	d005      	beq.n	6012 <audio_sync_init+0x5a>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    6006:	2b40      	cmp	r3, #64	; 0x40
    6008:	d005      	beq.n	6016 <audio_sync_init+0x5e>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    600a:	2b20      	cmp	r3, #32
    600c:	d1f5      	bne.n	5ffa <audio_sync_init+0x42>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    600e:	7114      	strb	r4, [r2, #4]
    6010:	e7f3      	b.n	5ffa <audio_sync_init+0x42>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_STOP;
    6012:	2340      	movs	r3, #64	; 0x40
    6014:	7153      	strb	r3, [r2, #5]
	tcc_enable(&audio_syncer_module);
	tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, (tcc_callback_t)audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
    6016:	2200      	movs	r2, #0
    6018:	4907      	ldr	r1, [pc, #28]	; (6038 <audio_sync_init+0x80>)
    601a:	4805      	ldr	r0, [pc, #20]	; (6030 <audio_sync_init+0x78>)
    601c:	4b07      	ldr	r3, [pc, #28]	; (603c <audio_sync_init+0x84>)
    601e:	4798      	blx	r3
	//tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
}
    6020:	b02a      	add	sp, #168	; 0xa8
    6022:	bd70      	pop	{r4, r5, r6, pc}
    6024:	42002000 	.word	0x42002000
    6028:	00000431 	.word	0x00000431
    602c:	00000412 	.word	0x00000412
    6030:	20000d00 	.word	0x20000d00
    6034:	0000057d 	.word	0x0000057d
    6038:	00005c95 	.word	0x00005c95
    603c:	00000989 	.word	0x00000989

00006040 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    6040:	b530      	push	{r4, r5, lr}
    6042:	b089      	sub	sp, #36	; 0x24
		sleepmgr_locks[i] = 0;
    6044:	4b76      	ldr	r3, [pc, #472]	; (6220 <main+0x1e0>)
    6046:	2400      	movs	r4, #0
    6048:	701c      	strb	r4, [r3, #0]
    604a:	705c      	strb	r4, [r3, #1]
    604c:	709c      	strb	r4, [r3, #2]
    604e:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    6050:	2501      	movs	r5, #1
    6052:	711d      	strb	r5, [r3, #4]
	irq_initialize_vectors();

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    6054:	4b73      	ldr	r3, [pc, #460]	; (6224 <main+0x1e4>)
    6056:	4798      	blx	r3
	
	delay_init();
    6058:	4b73      	ldr	r3, [pc, #460]	; (6228 <main+0x1e8>)
    605a:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    605c:	aa03      	add	r2, sp, #12
    605e:	23a0      	movs	r3, #160	; 0xa0
    6060:	011b      	lsls	r3, r3, #4
    6062:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    6064:	7094      	strb	r4, [r2, #2]
	config->continuously_update = false;
    6066:	70d4      	strb	r4, [r2, #3]
	config->year_init_value     = 2000;
    6068:	23fa      	movs	r3, #250	; 0xfa
    606a:	00db      	lsls	r3, r3, #3
    606c:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    606e:	7214      	strb	r4, [r2, #8]
    6070:	7254      	strb	r4, [r2, #9]
    6072:	7294      	strb	r4, [r2, #10]
    6074:	72d4      	strb	r4, [r2, #11]
    6076:	7315      	strb	r5, [r2, #12]
    6078:	7355      	strb	r5, [r2, #13]
    607a:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    607c:	2306      	movs	r3, #6
    607e:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    6080:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6082:	4c6a      	ldr	r4, [pc, #424]	; (622c <main+0x1ec>)
    6084:	496a      	ldr	r1, [pc, #424]	; (6230 <main+0x1f0>)
    6086:	0020      	movs	r0, r4
    6088:	4b6a      	ldr	r3, [pc, #424]	; (6234 <main+0x1f4>)
    608a:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    608c:	0020      	movs	r0, r4
    608e:	4b6a      	ldr	r3, [pc, #424]	; (6238 <main+0x1f8>)
    6090:	4798      	blx	r3
	current_time.year = 2018;
    6092:	a901      	add	r1, sp, #4
    6094:	4b69      	ldr	r3, [pc, #420]	; (623c <main+0x1fc>)
    6096:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    6098:	2302      	movs	r3, #2
    609a:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    609c:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    609e:	3309      	adds	r3, #9
    60a0:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    60a2:	331c      	adds	r3, #28
    60a4:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    60a6:	3303      	adds	r3, #3
    60a8:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    60aa:	0020      	movs	r0, r4
    60ac:	4b64      	ldr	r3, [pc, #400]	; (6240 <main+0x200>)
    60ae:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    60b0:	0020      	movs	r0, r4
    60b2:	4b64      	ldr	r3, [pc, #400]	; (6244 <main+0x204>)
    60b4:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    60b6:	4b64      	ldr	r3, [pc, #400]	; (6248 <main+0x208>)
    60b8:	4798      	blx	r3
	ui_powerdown();
    60ba:	4b64      	ldr	r3, [pc, #400]	; (624c <main+0x20c>)
    60bc:	4798      	blx	r3
	ui_cdc_init();
    60be:	4b64      	ldr	r3, [pc, #400]	; (6250 <main+0x210>)
    60c0:	4798      	blx	r3
	ui_configure_callback();
    60c2:	4b64      	ldr	r3, [pc, #400]	; (6254 <main+0x214>)
    60c4:	4798      	blx	r3

	sd_mmc_init();
    60c6:	4b64      	ldr	r3, [pc, #400]	; (6258 <main+0x218>)
    60c8:	4798      	blx	r3
	memories_initialization();
    60ca:	4b64      	ldr	r3, [pc, #400]	; (625c <main+0x21c>)
    60cc:	4798      	blx	r3
	
	audio_in_init();
    60ce:	4b64      	ldr	r3, [pc, #400]	; (6260 <main+0x220>)
    60d0:	4798      	blx	r3
	audio_sync_init();
    60d2:	4b64      	ldr	r3, [pc, #400]	; (6264 <main+0x224>)
    60d4:	4798      	blx	r3
	cpu_irq_enable();
    60d6:	4b64      	ldr	r3, [pc, #400]	; (6268 <main+0x228>)
    60d8:	701d      	strb	r5, [r3, #0]
    60da:	f3bf 8f5f 	dmb	sy
    60de:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    60e0:	4b62      	ldr	r3, [pc, #392]	; (626c <main+0x22c>)
    60e2:	4798      	blx	r3
	
	/* The main loop manages only the power mode
	 * because the USB management & button detection
	 * are done by interrupt */
	for(;;) {
		if(rec_start_request) {
    60e4:	4c62      	ldr	r4, [pc, #392]	; (6270 <main+0x230>)
    60e6:	e021      	b.n	612c <main+0xec>
			/* Testing if SD card is present */
			if(sd_test_availability()) {
    60e8:	4b62      	ldr	r3, [pc, #392]	; (6274 <main+0x234>)
    60ea:	4798      	blx	r3
    60ec:	2800      	cmp	r0, #0
    60ee:	d020      	beq.n	6132 <main+0xf2>
				if(audio_record_init()) {
    60f0:	4b61      	ldr	r3, [pc, #388]	; (6278 <main+0x238>)
    60f2:	4798      	blx	r3
    60f4:	2800      	cmp	r0, #0
    60f6:	d004      	beq.n	6102 <main+0xc2>
					adc_recorder.rec_ready = true;
    60f8:	2301      	movs	r3, #1
    60fa:	4a60      	ldr	r2, [pc, #384]	; (627c <main+0x23c>)
    60fc:	7053      	strb	r3, [r2, #1]
					rec_init_done = true;
    60fe:	4a60      	ldr	r2, [pc, #384]	; (6280 <main+0x240>)
    6100:	7013      	strb	r3, [r2, #0]
				}
				rec_start_request = false;
    6102:	2300      	movs	r3, #0
    6104:	4a5a      	ldr	r2, [pc, #360]	; (6270 <main+0x230>)
    6106:	7013      	strb	r3, [r2, #0]
    6108:	e013      	b.n	6132 <main+0xf2>
			}
		}
		
		if(rec_stop_request) {
			rec_stop_request = false;
    610a:	2200      	movs	r2, #0
    610c:	4b5d      	ldr	r3, [pc, #372]	; (6284 <main+0x244>)
    610e:	701a      	strb	r2, [r3, #0]
			if(!audio_record_close()) {
    6110:	4b5d      	ldr	r3, [pc, #372]	; (6288 <main+0x248>)
    6112:	4798      	blx	r3
    6114:	2800      	cmp	r0, #0
    6116:	d110      	bne.n	613a <main+0xfa>
				printf("ERROR closing recorded file\n\r");
    6118:	485c      	ldr	r0, [pc, #368]	; (628c <main+0x24c>)
    611a:	4b5d      	ldr	r3, [pc, #372]	; (6290 <main+0x250>)
    611c:	4798      	blx	r3
    611e:	e00c      	b.n	613a <main+0xfa>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
    6120:	2320      	movs	r3, #32
    6122:	7153      	strb	r3, [r2, #5]
			audio_record_1samp_start(audio_buffer_counter);
			tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
			tcc_restart_counter(&audio_syncer_module);
		}
		
		if(sync_reached) {
    6124:	4b5b      	ldr	r3, [pc, #364]	; (6294 <main+0x254>)
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	2b00      	cmp	r3, #0
    612a:	d139      	bne.n	61a0 <main+0x160>
		if(rec_start_request) {
    612c:	7823      	ldrb	r3, [r4, #0]
    612e:	2b00      	cmp	r3, #0
    6130:	d1da      	bne.n	60e8 <main+0xa8>
		if(rec_stop_request) {
    6132:	4b54      	ldr	r3, [pc, #336]	; (6284 <main+0x244>)
    6134:	781b      	ldrb	r3, [r3, #0]
    6136:	2b00      	cmp	r3, #0
    6138:	d1e7      	bne.n	610a <main+0xca>
		if(rec_init_done) {
    613a:	4b51      	ldr	r3, [pc, #324]	; (6280 <main+0x240>)
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	2b00      	cmp	r3, #0
    6140:	d0f0      	beq.n	6124 <main+0xe4>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    6142:	4b55      	ldr	r3, [pc, #340]	; (6298 <main+0x258>)
    6144:	2280      	movs	r2, #128	; 0x80
    6146:	00d2      	lsls	r2, r2, #3
    6148:	61da      	str	r2, [r3, #28]
		port_base->OUTCLR.reg = pin_mask;
    614a:	2280      	movs	r2, #128	; 0x80
    614c:	0152      	lsls	r2, r2, #5
    614e:	615a      	str	r2, [r3, #20]
			audio_frame_cnt = 0;
    6150:	4a52      	ldr	r2, [pc, #328]	; (629c <main+0x25c>)
    6152:	2300      	movs	r3, #0
    6154:	6013      	str	r3, [r2, #0]
			rec_init_done = false;
    6156:	494a      	ldr	r1, [pc, #296]	; (6280 <main+0x240>)
    6158:	700b      	strb	r3, [r1, #0]
			sync_reached = false;
    615a:	494e      	ldr	r1, [pc, #312]	; (6294 <main+0x254>)
    615c:	700b      	strb	r3, [r1, #0]
			audio_frame_cnt = 0;
    615e:	6013      	str	r3, [r2, #0]
			audio_total_samples = 0;
    6160:	4a4f      	ldr	r2, [pc, #316]	; (62a0 <main+0x260>)
    6162:	6013      	str	r3, [r2, #0]
			audio_buffer_counter = 0;
    6164:	4a4f      	ldr	r2, [pc, #316]	; (62a4 <main+0x264>)
    6166:	7013      	strb	r3, [r2, #0]
			rec_running = true;
    6168:	2101      	movs	r1, #1
    616a:	4b4f      	ldr	r3, [pc, #316]	; (62a8 <main+0x268>)
    616c:	7019      	strb	r1, [r3, #0]
			audio_record_1samp_start(audio_buffer_counter);
    616e:	7810      	ldrb	r0, [r2, #0]
    6170:	b2c0      	uxtb	r0, r0
    6172:	4b4e      	ldr	r3, [pc, #312]	; (62ac <main+0x26c>)
    6174:	4798      	blx	r3
			tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
    6176:	4d4e      	ldr	r5, [pc, #312]	; (62b0 <main+0x270>)
    6178:	2100      	movs	r1, #0
    617a:	0028      	movs	r0, r5
    617c:	4b4d      	ldr	r3, [pc, #308]	; (62b4 <main+0x274>)
    617e:	4798      	blx	r3
	Tcc *const tcc_module = module_inst->hw;
    6180:	682a      	ldr	r2, [r5, #0]
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6182:	2104      	movs	r1, #4
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    6184:	201f      	movs	r0, #31
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    6186:	25e0      	movs	r5, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6188:	6893      	ldr	r3, [r2, #8]
    618a:	4219      	tst	r1, r3
    618c:	d1fc      	bne.n	6188 <main+0x148>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    618e:	7953      	ldrb	r3, [r2, #5]
    6190:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    6192:	d0c5      	beq.n	6120 <main+0xe0>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    6194:	2b20      	cmp	r3, #32
    6196:	d0c5      	beq.n	6124 <main+0xe4>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    6198:	2b40      	cmp	r3, #64	; 0x40
    619a:	d1f5      	bne.n	6188 <main+0x148>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    619c:	7115      	strb	r5, [r2, #4]
    619e:	e7f3      	b.n	6188 <main+0x148>
			sync_reached = false;
    61a0:	2200      	movs	r2, #0
    61a2:	4b3c      	ldr	r3, [pc, #240]	; (6294 <main+0x254>)
    61a4:	701a      	strb	r2, [r3, #0]
	port_base->OUTTGL.reg = pin_mask;
    61a6:	2280      	movs	r2, #128	; 0x80
    61a8:	00d2      	lsls	r2, r2, #3
    61aa:	4b3b      	ldr	r3, [pc, #236]	; (6298 <main+0x258>)
    61ac:	61da      	str	r2, [r3, #28]
			//if(rec_running && adc_recorder.rec_ready) {
				//port_pin_toggle_output_level(UI_DBG_PIN);
				//audio_record_1samp_start(audio_buffer_counter);
				//adc_recorder.rec_started = false;
			//}
			if(rec_running && adc_recorder.rec_done) {
    61ae:	4b3e      	ldr	r3, [pc, #248]	; (62a8 <main+0x268>)
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	2b00      	cmp	r3, #0
    61b4:	d0ba      	beq.n	612c <main+0xec>
    61b6:	4b31      	ldr	r3, [pc, #196]	; (627c <main+0x23c>)
    61b8:	78db      	ldrb	r3, [r3, #3]
    61ba:	2b00      	cmp	r3, #0
    61bc:	d0b6      	beq.n	612c <main+0xec>
				adc_recorder.rec_done = false;
    61be:	4b2f      	ldr	r3, [pc, #188]	; (627c <main+0x23c>)
    61c0:	2200      	movs	r2, #0
    61c2:	70da      	strb	r2, [r3, #3]
				adc_recorder.rec_ready = true;
    61c4:	3201      	adds	r2, #1
    61c6:	705a      	strb	r2, [r3, #1]
				audio_record_1samp_finish(audio_buffer_counter);
    61c8:	4b36      	ldr	r3, [pc, #216]	; (62a4 <main+0x264>)
    61ca:	7818      	ldrb	r0, [r3, #0]
    61cc:	b2c0      	uxtb	r0, r0
    61ce:	4b3a      	ldr	r3, [pc, #232]	; (62b8 <main+0x278>)
    61d0:	4798      	blx	r3
				audio_frame_cnt += 2;
    61d2:	4b32      	ldr	r3, [pc, #200]	; (629c <main+0x25c>)
    61d4:	681a      	ldr	r2, [r3, #0]
    61d6:	3202      	adds	r2, #2
    61d8:	601a      	str	r2, [r3, #0]
				if(audio_frame_cnt >= AUDIO_CHUNK_SIZE) {
    61da:	681b      	ldr	r3, [r3, #0]
    61dc:	2bff      	cmp	r3, #255	; 0xff
    61de:	d918      	bls.n	6212 <main+0x1d2>
					audio_total_samples += audio_frame_cnt;
    61e0:	4a2e      	ldr	r2, [pc, #184]	; (629c <main+0x25c>)
    61e2:	6813      	ldr	r3, [r2, #0]
    61e4:	492e      	ldr	r1, [pc, #184]	; (62a0 <main+0x260>)
    61e6:	6808      	ldr	r0, [r1, #0]
    61e8:	4684      	mov	ip, r0
    61ea:	4463      	add	r3, ip
    61ec:	600b      	str	r3, [r1, #0]
					audio_frame_cnt = 0;
    61ee:	2300      	movs	r3, #0
    61f0:	6013      	str	r3, [r2, #0]
					//printf("Writing to buffer# %d\n\r", audio_buffer_counter);
					audio_write_chunk(audio_buffer_counter);
    61f2:	4d2c      	ldr	r5, [pc, #176]	; (62a4 <main+0x264>)
    61f4:	7828      	ldrb	r0, [r5, #0]
    61f6:	b2c0      	uxtb	r0, r0
    61f8:	4b30      	ldr	r3, [pc, #192]	; (62bc <main+0x27c>)
    61fa:	4798      	blx	r3
					audio_buffer_counter = (audio_buffer_counter >= (AUDIO_BUFFER_NUMBER-1)) ? 0 : (audio_buffer_counter + 1);
    61fc:	782a      	ldrb	r2, [r5, #0]
    61fe:	b2d2      	uxtb	r2, r2
    6200:	2300      	movs	r3, #0
    6202:	2a02      	cmp	r2, #2
    6204:	d803      	bhi.n	620e <main+0x1ce>
    6206:	4b27      	ldr	r3, [pc, #156]	; (62a4 <main+0x264>)
    6208:	781b      	ldrb	r3, [r3, #0]
    620a:	3301      	adds	r3, #1
    620c:	b2db      	uxtb	r3, r3
    620e:	4a25      	ldr	r2, [pc, #148]	; (62a4 <main+0x264>)
    6210:	7013      	strb	r3, [r2, #0]
				}
				audio_record_1samp_start(audio_buffer_counter);
    6212:	4b24      	ldr	r3, [pc, #144]	; (62a4 <main+0x264>)
    6214:	7818      	ldrb	r0, [r3, #0]
    6216:	b2c0      	uxtb	r0, r0
    6218:	4b24      	ldr	r3, [pc, #144]	; (62ac <main+0x26c>)
    621a:	4798      	blx	r3
    621c:	e786      	b.n	612c <main+0xec>
    621e:	46c0      	nop			; (mov r8, r8)
    6220:	20000e44 	.word	0x20000e44
    6224:	00008d85 	.word	0x00008d85
    6228:	00008125 	.word	0x00008125
    622c:	20000628 	.word	0x20000628
    6230:	40001400 	.word	0x40001400
    6234:	00002419 	.word	0x00002419
    6238:	000022bd 	.word	0x000022bd
    623c:	000007e2 	.word	0x000007e2
    6240:	00002389 	.word	0x00002389
    6244:	000024d5 	.word	0x000024d5
    6248:	00006649 	.word	0x00006649
    624c:	0000671d 	.word	0x0000671d
    6250:	00006555 	.word	0x00006555
    6254:	000066e9 	.word	0x000066e9
    6258:	00000c75 	.word	0x00000c75
    625c:	00006319 	.word	0x00006319
    6260:	00005ca1 	.word	0x00005ca1
    6264:	00005fb9 	.word	0x00005fb9
    6268:	20000125 	.word	0x20000125
    626c:	00001cbd 	.word	0x00001cbd
    6270:	200002d8 	.word	0x200002d8
    6274:	0000631d 	.word	0x0000631d
    6278:	00005dc9 	.word	0x00005dc9
    627c:	200006cc 	.word	0x200006cc
    6280:	200002d6 	.word	0x200002d6
    6284:	200002d9 	.word	0x200002d9
    6288:	00005e6d 	.word	0x00005e6d
    628c:	0000ad30 	.word	0x0000ad30
    6290:	000094d5 	.word	0x000094d5
    6294:	200002da 	.word	0x200002da
    6298:	41004400 	.word	0x41004400
    629c:	200002cc 	.word	0x200002cc
    62a0:	200002d0 	.word	0x200002d0
    62a4:	200002ca 	.word	0x200002ca
    62a8:	200002d7 	.word	0x200002d7
    62ac:	00005efd 	.word	0x00005efd
    62b0:	20000d00 	.word	0x20000d00
    62b4:	000009a1 	.word	0x000009a1
    62b8:	00005f39 	.word	0x00005f39
    62bc:	00005f65 	.word	0x00005f65

000062c0 <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    62c0:	b510      	push	{r4, lr}
	ui_powerdown();
    62c2:	4b01      	ldr	r3, [pc, #4]	; (62c8 <main_suspend_action+0x8>)
    62c4:	4798      	blx	r3
}
    62c6:	bd10      	pop	{r4, pc}
    62c8:	0000671d 	.word	0x0000671d

000062cc <main_resume_action>:

void main_resume_action(void)
{
    62cc:	b510      	push	{r4, lr}
	ui_wakeup();
    62ce:	4b01      	ldr	r3, [pc, #4]	; (62d4 <main_resume_action+0x8>)
    62d0:	4798      	blx	r3
}
    62d2:	bd10      	pop	{r4, pc}
    62d4:	0000672d 	.word	0x0000672d

000062d8 <main_sof_action>:

void main_sof_action(void)
{
    62d8:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    62da:	4b05      	ldr	r3, [pc, #20]	; (62f0 <main_sof_action+0x18>)
    62dc:	781b      	ldrb	r3, [r3, #0]
    62de:	2b00      	cmp	r3, #0
    62e0:	d100      	bne.n	62e4 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    62e2:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    62e4:	4b03      	ldr	r3, [pc, #12]	; (62f4 <main_sof_action+0x1c>)
    62e6:	4798      	blx	r3
    62e8:	4b03      	ldr	r3, [pc, #12]	; (62f8 <main_sof_action+0x20>)
    62ea:	4798      	blx	r3
    62ec:	e7f9      	b.n	62e2 <main_sof_action+0xa>
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	200002d4 	.word	0x200002d4
    62f4:	00003831 	.word	0x00003831
    62f8:	00006745 	.word	0x00006745

000062fc <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    62fc:	2201      	movs	r2, #1
    62fe:	4b02      	ldr	r3, [pc, #8]	; (6308 <main_msc_enable+0xc>)
    6300:	701a      	strb	r2, [r3, #0]
	return true;
}
    6302:	2001      	movs	r0, #1
    6304:	4770      	bx	lr
    6306:	46c0      	nop			; (mov r8, r8)
    6308:	200002d4 	.word	0x200002d4

0000630c <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    630c:	2200      	movs	r2, #0
    630e:	4b01      	ldr	r3, [pc, #4]	; (6314 <main_msc_disable+0x8>)
    6310:	701a      	strb	r2, [r3, #0]
}
    6312:	4770      	bx	lr
    6314:	200002d4 	.word	0x200002d4

00006318 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    6318:	4770      	bx	lr
	...

0000631c <sd_test_availability>:
#include "sd_management.h"

extern volatile bool rec_start_request;

bool sd_test_availability(void)
{
    631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    631e:	4c2c      	ldr	r4, [pc, #176]	; (63d0 <sd_test_availability+0xb4>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    6320:	4d2c      	ldr	r5, [pc, #176]	; (63d4 <sd_test_availability+0xb8>)
    6322:	e028      	b.n	6376 <sd_test_availability+0x5a>
			printf("Card install fail!\n\r");
    6324:	482c      	ldr	r0, [pc, #176]	; (63d8 <sd_test_availability+0xbc>)
    6326:	4e2d      	ldr	r6, [pc, #180]	; (63dc <sd_test_availability+0xc0>)
    6328:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    632a:	482d      	ldr	r0, [pc, #180]	; (63e0 <sd_test_availability+0xc4>)
    632c:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    632e:	4e2d      	ldr	r6, [pc, #180]	; (63e4 <sd_test_availability+0xc8>)
    6330:	2000      	movs	r0, #0
    6332:	47b0      	blx	r6
    6334:	2802      	cmp	r0, #2
    6336:	d1fb      	bne.n	6330 <sd_test_availability+0x14>
    6338:	4b2b      	ldr	r3, [pc, #172]	; (63e8 <sd_test_availability+0xcc>)
    633a:	2280      	movs	r2, #128	; 0x80
    633c:	0152      	lsls	r2, r2, #5
    633e:	61da      	str	r2, [r3, #28]
    6340:	2280      	movs	r2, #128	; 0x80
    6342:	0212      	lsls	r2, r2, #8
    6344:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    6346:	2000      	movs	r0, #0
    6348:	4b22      	ldr	r3, [pc, #136]	; (63d4 <sd_test_availability+0xb8>)
    634a:	4798      	blx	r3
    634c:	2296      	movs	r2, #150	; 0x96
    634e:	0052      	lsls	r2, r2, #1
    6350:	2300      	movs	r3, #0
    6352:	2100      	movs	r1, #0
    6354:	4e25      	ldr	r6, [pc, #148]	; (63ec <sd_test_availability+0xd0>)
    6356:	47b0      	blx	r6
    6358:	4a25      	ldr	r2, [pc, #148]	; (63f0 <sd_test_availability+0xd4>)
    635a:	2300      	movs	r3, #0
    635c:	1880      	adds	r0, r0, r2
    635e:	4159      	adcs	r1, r3
    6360:	4a24      	ldr	r2, [pc, #144]	; (63f4 <sd_test_availability+0xd8>)
    6362:	2300      	movs	r3, #0
    6364:	4e24      	ldr	r6, [pc, #144]	; (63f8 <sd_test_availability+0xdc>)
    6366:	47b0      	blx	r6
    6368:	4b24      	ldr	r3, [pc, #144]	; (63fc <sd_test_availability+0xe0>)
    636a:	4798      	blx	r3
		if(!rec_start_request) {
    636c:	4b24      	ldr	r3, [pc, #144]	; (6400 <sd_test_availability+0xe4>)
    636e:	7818      	ldrb	r0, [r3, #0]
    6370:	b2c0      	uxtb	r0, r0
    6372:	2800      	cmp	r0, #0
    6374:	d024      	beq.n	63c0 <sd_test_availability+0xa4>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    6376:	2000      	movs	r0, #0
    6378:	47a0      	blx	r4
    637a:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    637c:	2801      	cmp	r0, #1
    637e:	d0d1      	beq.n	6324 <sd_test_availability+0x8>
    6380:	4b19      	ldr	r3, [pc, #100]	; (63e8 <sd_test_availability+0xcc>)
    6382:	2280      	movs	r2, #128	; 0x80
    6384:	0152      	lsls	r2, r2, #5
    6386:	61da      	str	r2, [r3, #28]
    6388:	2280      	movs	r2, #128	; 0x80
    638a:	0212      	lsls	r2, r2, #8
    638c:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    638e:	2000      	movs	r0, #0
    6390:	47a8      	blx	r5
    6392:	2296      	movs	r2, #150	; 0x96
    6394:	0052      	lsls	r2, r2, #1
    6396:	2300      	movs	r3, #0
    6398:	2100      	movs	r1, #0
    639a:	4f14      	ldr	r7, [pc, #80]	; (63ec <sd_test_availability+0xd0>)
    639c:	47b8      	blx	r7
    639e:	4a14      	ldr	r2, [pc, #80]	; (63f0 <sd_test_availability+0xd4>)
    63a0:	2300      	movs	r3, #0
    63a2:	1880      	adds	r0, r0, r2
    63a4:	4159      	adcs	r1, r3
    63a6:	4a13      	ldr	r2, [pc, #76]	; (63f4 <sd_test_availability+0xd8>)
    63a8:	2300      	movs	r3, #0
    63aa:	4f13      	ldr	r7, [pc, #76]	; (63f8 <sd_test_availability+0xdc>)
    63ac:	47b8      	blx	r7
    63ae:	4b13      	ldr	r3, [pc, #76]	; (63fc <sd_test_availability+0xe0>)
    63b0:	4798      	blx	r3
		if(!rec_start_request) {
    63b2:	4b13      	ldr	r3, [pc, #76]	; (6400 <sd_test_availability+0xe4>)
    63b4:	7818      	ldrb	r0, [r3, #0]
    63b6:	b2c0      	uxtb	r0, r0
    63b8:	2800      	cmp	r0, #0
    63ba:	d001      	beq.n	63c0 <sd_test_availability+0xa4>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    63bc:	2e00      	cmp	r6, #0
    63be:	d1da      	bne.n	6376 <sd_test_availability+0x5a>
		port_base->OUTSET.reg = pin_mask;
    63c0:	4b09      	ldr	r3, [pc, #36]	; (63e8 <sd_test_availability+0xcc>)
    63c2:	2280      	movs	r2, #128	; 0x80
    63c4:	0152      	lsls	r2, r2, #5
    63c6:	619a      	str	r2, [r3, #24]
    63c8:	2280      	movs	r2, #128	; 0x80
    63ca:	0212      	lsls	r2, r2, #8
    63cc:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
    63ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63d0:	00008129 	.word	0x00008129
    63d4:	00008b41 	.word	0x00008b41
    63d8:	0000ad50 	.word	0x0000ad50
    63dc:	000094d5 	.word	0x000094d5
    63e0:	0000ad68 	.word	0x0000ad68
    63e4:	00000c95 	.word	0x00000c95
    63e8:	41004400 	.word	0x41004400
    63ec:	0000927d 	.word	0x0000927d
    63f0:	00001b57 	.word	0x00001b57
    63f4:	00001b58 	.word	0x00001b58
    63f8:	0000923d 	.word	0x0000923d
    63fc:	20000001 	.word	0x20000001
    6400:	200002d8 	.word	0x200002d8

00006404 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6404:	b570      	push	{r4, r5, r6, lr}
    6406:	b082      	sub	sp, #8
    6408:	0005      	movs	r5, r0
    640a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    640c:	2200      	movs	r2, #0
    640e:	466b      	mov	r3, sp
    6410:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6412:	4c06      	ldr	r4, [pc, #24]	; (642c <usart_serial_getchar+0x28>)
    6414:	466b      	mov	r3, sp
    6416:	1d99      	adds	r1, r3, #6
    6418:	0028      	movs	r0, r5
    641a:	47a0      	blx	r4
    641c:	2800      	cmp	r0, #0
    641e:	d1f9      	bne.n	6414 <usart_serial_getchar+0x10>

	*c = temp;
    6420:	466b      	mov	r3, sp
    6422:	3306      	adds	r3, #6
    6424:	881b      	ldrh	r3, [r3, #0]
    6426:	7033      	strb	r3, [r6, #0]
}
    6428:	b002      	add	sp, #8
    642a:	bd70      	pop	{r4, r5, r6, pc}
    642c:	00002a31 	.word	0x00002a31

00006430 <usart_serial_putchar>:
{
    6430:	b570      	push	{r4, r5, r6, lr}
    6432:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6434:	b28c      	uxth	r4, r1
    6436:	4e03      	ldr	r6, [pc, #12]	; (6444 <usart_serial_putchar+0x14>)
    6438:	0021      	movs	r1, r4
    643a:	0028      	movs	r0, r5
    643c:	47b0      	blx	r6
    643e:	2800      	cmp	r0, #0
    6440:	d1fa      	bne.n	6438 <usart_serial_putchar+0x8>
}
    6442:	bd70      	pop	{r4, r5, r6, pc}
    6444:	00002a05 	.word	0x00002a05

00006448 <ui_button1_callback>:
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void ui_button1_callback(void)
{
    6448:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    644a:	4b18      	ldr	r3, [pc, #96]	; (64ac <ui_button1_callback+0x64>)
    644c:	6a1b      	ldr	r3, [r3, #32]
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_1_PIN);
	
	if(press_state) {
    644e:	00db      	lsls	r3, r3, #3
    6450:	d500      	bpl.n	6454 <ui_button1_callback+0xc>
		}
		else {
			rec_start_request = true;
		}
	}
}
    6452:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    6454:	2000      	movs	r0, #0
    6456:	4b16      	ldr	r3, [pc, #88]	; (64b0 <ui_button1_callback+0x68>)
    6458:	4798      	blx	r3
    645a:	2264      	movs	r2, #100	; 0x64
    645c:	2300      	movs	r3, #0
    645e:	2100      	movs	r1, #0
    6460:	4c14      	ldr	r4, [pc, #80]	; (64b4 <ui_button1_callback+0x6c>)
    6462:	47a0      	blx	r4
    6464:	4a14      	ldr	r2, [pc, #80]	; (64b8 <ui_button1_callback+0x70>)
    6466:	2300      	movs	r3, #0
    6468:	1880      	adds	r0, r0, r2
    646a:	4159      	adcs	r1, r3
    646c:	4a13      	ldr	r2, [pc, #76]	; (64bc <ui_button1_callback+0x74>)
    646e:	2300      	movs	r3, #0
    6470:	4c13      	ldr	r4, [pc, #76]	; (64c0 <ui_button1_callback+0x78>)
    6472:	47a0      	blx	r4
    6474:	4b13      	ldr	r3, [pc, #76]	; (64c4 <ui_button1_callback+0x7c>)
    6476:	4798      	blx	r3
    6478:	4b0c      	ldr	r3, [pc, #48]	; (64ac <ui_button1_callback+0x64>)
    647a:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    647c:	00db      	lsls	r3, r3, #3
    647e:	d4e8      	bmi.n	6452 <ui_button1_callback+0xa>
		if(rec_running || rec_start_request) {
    6480:	4b11      	ldr	r3, [pc, #68]	; (64c8 <ui_button1_callback+0x80>)
    6482:	781b      	ldrb	r3, [r3, #0]
    6484:	2b00      	cmp	r3, #0
    6486:	d107      	bne.n	6498 <ui_button1_callback+0x50>
    6488:	4b10      	ldr	r3, [pc, #64]	; (64cc <ui_button1_callback+0x84>)
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	2b00      	cmp	r3, #0
    648e:	d103      	bne.n	6498 <ui_button1_callback+0x50>
			rec_start_request = true;
    6490:	2201      	movs	r2, #1
    6492:	4b0e      	ldr	r3, [pc, #56]	; (64cc <ui_button1_callback+0x84>)
    6494:	701a      	strb	r2, [r3, #0]
}
    6496:	e7dc      	b.n	6452 <ui_button1_callback+0xa>
			rec_start_request = false;
    6498:	2300      	movs	r3, #0
    649a:	4a0c      	ldr	r2, [pc, #48]	; (64cc <ui_button1_callback+0x84>)
    649c:	7013      	strb	r3, [r2, #0]
			rec_running = false;
    649e:	4a0a      	ldr	r2, [pc, #40]	; (64c8 <ui_button1_callback+0x80>)
    64a0:	7013      	strb	r3, [r2, #0]
			rec_stop_request = true;
    64a2:	2201      	movs	r2, #1
    64a4:	4b0a      	ldr	r3, [pc, #40]	; (64d0 <ui_button1_callback+0x88>)
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	e7d3      	b.n	6452 <ui_button1_callback+0xa>
    64aa:	46c0      	nop			; (mov r8, r8)
    64ac:	41004400 	.word	0x41004400
    64b0:	00008b41 	.word	0x00008b41
    64b4:	0000927d 	.word	0x0000927d
    64b8:	00001b57 	.word	0x00001b57
    64bc:	00001b58 	.word	0x00001b58
    64c0:	0000923d 	.word	0x0000923d
    64c4:	20000001 	.word	0x20000001
    64c8:	200002d7 	.word	0x200002d7
    64cc:	200002d8 	.word	0x200002d8
    64d0:	200002d9 	.word	0x200002d9

000064d4 <ui_button3_callback>:


void ui_button3_callback(void)
{
    64d4:	b510      	push	{r4, lr}
    64d6:	4b17      	ldr	r3, [pc, #92]	; (6534 <ui_button3_callback+0x60>)
    64d8:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    64da:	071b      	lsls	r3, r3, #28
    64dc:	d500      	bpl.n	64e0 <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    64de:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    64e0:	2000      	movs	r0, #0
    64e2:	4b15      	ldr	r3, [pc, #84]	; (6538 <ui_button3_callback+0x64>)
    64e4:	4798      	blx	r3
    64e6:	2264      	movs	r2, #100	; 0x64
    64e8:	2300      	movs	r3, #0
    64ea:	2100      	movs	r1, #0
    64ec:	4c13      	ldr	r4, [pc, #76]	; (653c <ui_button3_callback+0x68>)
    64ee:	47a0      	blx	r4
    64f0:	4a13      	ldr	r2, [pc, #76]	; (6540 <ui_button3_callback+0x6c>)
    64f2:	2300      	movs	r3, #0
    64f4:	1880      	adds	r0, r0, r2
    64f6:	4159      	adcs	r1, r3
    64f8:	4a12      	ldr	r2, [pc, #72]	; (6544 <ui_button3_callback+0x70>)
    64fa:	2300      	movs	r3, #0
    64fc:	4c12      	ldr	r4, [pc, #72]	; (6548 <ui_button3_callback+0x74>)
    64fe:	47a0      	blx	r4
    6500:	4b12      	ldr	r3, [pc, #72]	; (654c <ui_button3_callback+0x78>)
    6502:	4798      	blx	r3
    6504:	4b0b      	ldr	r3, [pc, #44]	; (6534 <ui_button3_callback+0x60>)
    6506:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    6508:	071b      	lsls	r3, r3, #28
    650a:	d4e8      	bmi.n	64de <ui_button3_callback+0xa>
		if(monitoring_on) {
    650c:	4b10      	ldr	r3, [pc, #64]	; (6550 <ui_button3_callback+0x7c>)
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	2b00      	cmp	r3, #0
    6512:	d107      	bne.n	6524 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    6514:	2280      	movs	r2, #128	; 0x80
    6516:	0212      	lsls	r2, r2, #8
    6518:	4b06      	ldr	r3, [pc, #24]	; (6534 <ui_button3_callback+0x60>)
    651a:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    651c:	2201      	movs	r2, #1
    651e:	4b0c      	ldr	r3, [pc, #48]	; (6550 <ui_button3_callback+0x7c>)
    6520:	701a      	strb	r2, [r3, #0]
}
    6522:	e7dc      	b.n	64de <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    6524:	2280      	movs	r2, #128	; 0x80
    6526:	0212      	lsls	r2, r2, #8
    6528:	4b02      	ldr	r3, [pc, #8]	; (6534 <ui_button3_callback+0x60>)
    652a:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    652c:	2200      	movs	r2, #0
    652e:	4b08      	ldr	r3, [pc, #32]	; (6550 <ui_button3_callback+0x7c>)
    6530:	701a      	strb	r2, [r3, #0]
    6532:	e7d4      	b.n	64de <ui_button3_callback+0xa>
    6534:	41004400 	.word	0x41004400
    6538:	00008b41 	.word	0x00008b41
    653c:	0000927d 	.word	0x0000927d
    6540:	00001b57 	.word	0x00001b57
    6544:	00001b58 	.word	0x00001b58
    6548:	0000923d 	.word	0x0000923d
    654c:	20000001 	.word	0x20000001
    6550:	200002d5 	.word	0x200002d5

00006554 <ui_cdc_init>:
{
    6554:	b5f0      	push	{r4, r5, r6, r7, lr}
    6556:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6558:	2380      	movs	r3, #128	; 0x80
    655a:	05db      	lsls	r3, r3, #23
    655c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    655e:	2300      	movs	r3, #0
    6560:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6562:	22ff      	movs	r2, #255	; 0xff
    6564:	4669      	mov	r1, sp
    6566:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6568:	2200      	movs	r2, #0
    656a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    656c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    656e:	2401      	movs	r4, #1
    6570:	2124      	movs	r1, #36	; 0x24
    6572:	4668      	mov	r0, sp
    6574:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    6576:	3101      	adds	r1, #1
    6578:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    657a:	3101      	adds	r1, #1
    657c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    657e:	3101      	adds	r1, #1
    6580:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    6582:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6584:	3105      	adds	r1, #5
    6586:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    6588:	3101      	adds	r1, #1
    658a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    658c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    658e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6590:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6592:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6594:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6596:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    6598:	2313      	movs	r3, #19
    659a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    659c:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    659e:	2380      	movs	r3, #128	; 0x80
    65a0:	035b      	lsls	r3, r3, #13
    65a2:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    65a4:	4b1a      	ldr	r3, [pc, #104]	; (6610 <ui_cdc_init+0xbc>)
    65a6:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    65a8:	4b1a      	ldr	r3, [pc, #104]	; (6614 <ui_cdc_init+0xc0>)
    65aa:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    65ac:	2301      	movs	r3, #1
    65ae:	425b      	negs	r3, r3
    65b0:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    65b2:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    65b4:	23e1      	movs	r3, #225	; 0xe1
    65b6:	025b      	lsls	r3, r3, #9
    65b8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    65ba:	4d17      	ldr	r5, [pc, #92]	; (6618 <ui_cdc_init+0xc4>)
    65bc:	4b17      	ldr	r3, [pc, #92]	; (661c <ui_cdc_init+0xc8>)
    65be:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    65c0:	4a17      	ldr	r2, [pc, #92]	; (6620 <ui_cdc_init+0xcc>)
    65c2:	4b18      	ldr	r3, [pc, #96]	; (6624 <ui_cdc_init+0xd0>)
    65c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    65c6:	4a18      	ldr	r2, [pc, #96]	; (6628 <ui_cdc_init+0xd4>)
    65c8:	4b18      	ldr	r3, [pc, #96]	; (662c <ui_cdc_init+0xd8>)
    65ca:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    65cc:	466a      	mov	r2, sp
    65ce:	4918      	ldr	r1, [pc, #96]	; (6630 <ui_cdc_init+0xdc>)
    65d0:	0028      	movs	r0, r5
    65d2:	4b18      	ldr	r3, [pc, #96]	; (6634 <ui_cdc_init+0xe0>)
    65d4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    65d6:	4f18      	ldr	r7, [pc, #96]	; (6638 <ui_cdc_init+0xe4>)
    65d8:	683b      	ldr	r3, [r7, #0]
    65da:	6898      	ldr	r0, [r3, #8]
    65dc:	2100      	movs	r1, #0
    65de:	4e17      	ldr	r6, [pc, #92]	; (663c <ui_cdc_init+0xe8>)
    65e0:	47b0      	blx	r6
	setbuf(stdin, NULL);
    65e2:	683b      	ldr	r3, [r7, #0]
    65e4:	6858      	ldr	r0, [r3, #4]
    65e6:	2100      	movs	r1, #0
    65e8:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    65ea:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    65ec:	0030      	movs	r0, r6
    65ee:	4b14      	ldr	r3, [pc, #80]	; (6640 <ui_cdc_init+0xec>)
    65f0:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    65f2:	231f      	movs	r3, #31
    65f4:	4018      	ands	r0, r3
    65f6:	4084      	lsls	r4, r0
    65f8:	4b12      	ldr	r3, [pc, #72]	; (6644 <ui_cdc_init+0xf0>)
    65fa:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    65fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    65fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6600:	2b00      	cmp	r3, #0
    6602:	d1fc      	bne.n	65fe <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6604:	6833      	ldr	r3, [r6, #0]
    6606:	2202      	movs	r2, #2
    6608:	4313      	orrs	r3, r2
    660a:	6033      	str	r3, [r6, #0]
}
    660c:	b011      	add	sp, #68	; 0x44
    660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6610:	00160002 	.word	0x00160002
    6614:	00170002 	.word	0x00170002
    6618:	20000690 	.word	0x20000690
    661c:	20000624 	.word	0x20000624
    6620:	00006431 	.word	0x00006431
    6624:	20000620 	.word	0x20000620
    6628:	00006405 	.word	0x00006405
    662c:	2000061c 	.word	0x2000061c
    6630:	42001400 	.word	0x42001400
    6634:	000026c1 	.word	0x000026c1
    6638:	20000128 	.word	0x20000128
    663c:	00009509 	.word	0x00009509
    6640:	00002631 	.word	0x00002631
    6644:	e000e100 	.word	0xe000e100

00006648 <ui_lb_init>:
{
    6648:	b5f0      	push	{r4, r5, r6, r7, lr}
    664a:	46c6      	mov	lr, r8
    664c:	b500      	push	{lr}
    664e:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    6650:	ac03      	add	r4, sp, #12
    6652:	2501      	movs	r5, #1
    6654:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6656:	2600      	movs	r6, #0
    6658:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    665a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    665c:	0021      	movs	r1, r4
    665e:	200c      	movs	r0, #12
    6660:	4b1d      	ldr	r3, [pc, #116]	; (66d8 <ui_lb_init+0x90>)
    6662:	4698      	mov	r8, r3
    6664:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    6666:	4f1d      	ldr	r7, [pc, #116]	; (66dc <ui_lb_init+0x94>)
    6668:	2380      	movs	r3, #128	; 0x80
    666a:	015b      	lsls	r3, r3, #5
    666c:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    666e:	0021      	movs	r1, r4
    6670:	200d      	movs	r0, #13
    6672:	47c0      	blx	r8
    6674:	2380      	movs	r3, #128	; 0x80
    6676:	019b      	lsls	r3, r3, #6
    6678:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    667a:	0021      	movs	r1, r4
    667c:	200f      	movs	r0, #15
    667e:	47c0      	blx	r8
    6680:	2380      	movs	r3, #128	; 0x80
    6682:	021b      	lsls	r3, r3, #8
    6684:	61bb      	str	r3, [r7, #24]
	port_pin_set_config(UI_DBG_PIN, &pin_conf);
    6686:	0021      	movs	r1, r4
    6688:	200a      	movs	r0, #10
    668a:	47c0      	blx	r8
		port_base->OUTCLR.reg = pin_mask;
    668c:	2380      	movs	r3, #128	; 0x80
    668e:	00db      	lsls	r3, r3, #3
    6690:	617b      	str	r3, [r7, #20]
	extint_chan_get_config_defaults(&config_extint_chan);
    6692:	4668      	mov	r0, sp
    6694:	4b12      	ldr	r3, [pc, #72]	; (66e0 <ui_lb_init+0x98>)
    6696:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    6698:	231c      	movs	r3, #28
    669a:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    669c:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    669e:	466b      	mov	r3, sp
    66a0:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    66a2:	2403      	movs	r4, #3
    66a4:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    66a6:	4669      	mov	r1, sp
    66a8:	2008      	movs	r0, #8
    66aa:	4f0e      	ldr	r7, [pc, #56]	; (66e4 <ui_lb_init+0x9c>)
    66ac:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    66ae:	2302      	movs	r3, #2
    66b0:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    66b2:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    66b4:	466b      	mov	r3, sp
    66b6:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    66b8:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    66ba:	4669      	mov	r1, sp
    66bc:	2002      	movs	r0, #2
    66be:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    66c0:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    66c2:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    66c4:	466b      	mov	r3, sp
    66c6:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    66c8:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    66ca:	4669      	mov	r1, sp
    66cc:	2003      	movs	r0, #3
    66ce:	47b8      	blx	r7
}
    66d0:	b004      	add	sp, #16
    66d2:	bc04      	pop	{r2}
    66d4:	4690      	mov	r8, r2
    66d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66d8:	000089fd 	.word	0x000089fd
    66dc:	41004400 	.word	0x41004400
    66e0:	00002231 	.word	0x00002231
    66e4:	00002245 	.word	0x00002245

000066e8 <ui_configure_callback>:
{
    66e8:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    66ea:	2200      	movs	r2, #0
    66ec:	2108      	movs	r1, #8
    66ee:	4807      	ldr	r0, [pc, #28]	; (670c <ui_configure_callback+0x24>)
    66f0:	4c07      	ldr	r4, [pc, #28]	; (6710 <ui_configure_callback+0x28>)
    66f2:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    66f4:	2200      	movs	r2, #0
    66f6:	2103      	movs	r1, #3
    66f8:	4806      	ldr	r0, [pc, #24]	; (6714 <ui_configure_callback+0x2c>)
    66fa:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    66fc:	2100      	movs	r1, #0
    66fe:	2008      	movs	r0, #8
    6700:	4c05      	ldr	r4, [pc, #20]	; (6718 <ui_configure_callback+0x30>)
    6702:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6704:	2100      	movs	r1, #0
    6706:	2003      	movs	r0, #3
    6708:	47a0      	blx	r4
}
    670a:	bd10      	pop	{r4, pc}
    670c:	00006449 	.word	0x00006449
    6710:	00007605 	.word	0x00007605
    6714:	000064d5 	.word	0x000064d5
    6718:	00007631 	.word	0x00007631

0000671c <ui_powerdown>:
		port_base->OUTSET.reg = pin_mask;
    671c:	2280      	movs	r2, #128	; 0x80
    671e:	05d2      	lsls	r2, r2, #23
    6720:	4b01      	ldr	r3, [pc, #4]	; (6728 <ui_powerdown+0xc>)
    6722:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    6724:	4770      	bx	lr
    6726:	46c0      	nop			; (mov r8, r8)
    6728:	41004480 	.word	0x41004480

0000672c <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    672c:	2280      	movs	r2, #128	; 0x80
    672e:	05d2      	lsls	r2, r2, #23
    6730:	4b01      	ldr	r3, [pc, #4]	; (6738 <ui_wakeup+0xc>)
    6732:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    6734:	4770      	bx	lr
    6736:	46c0      	nop			; (mov r8, r8)
    6738:	41004480 	.word	0x41004480

0000673c <ui_start_read>:

void ui_start_read(void)
{
}
    673c:	4770      	bx	lr

0000673e <ui_stop_read>:

void ui_stop_read(void)
{
}
    673e:	4770      	bx	lr

00006740 <ui_start_write>:

void ui_start_write(void)
{
}
    6740:	4770      	bx	lr

00006742 <ui_stop_write>:

void ui_stop_write(void)
{
}
    6742:	4770      	bx	lr

00006744 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    6744:	2800      	cmp	r0, #0
    6746:	d104      	bne.n	6752 <ui_process+0xe>
    6748:	2280      	movs	r2, #128	; 0x80
    674a:	05d2      	lsls	r2, r2, #23
    674c:	4b05      	ldr	r3, [pc, #20]	; (6764 <ui_process+0x20>)
    674e:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    6750:	4770      	bx	lr
	if (1000 == framenumber) {
    6752:	23fa      	movs	r3, #250	; 0xfa
    6754:	009b      	lsls	r3, r3, #2
    6756:	4298      	cmp	r0, r3
    6758:	d1fa      	bne.n	6750 <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    675a:	2280      	movs	r2, #128	; 0x80
    675c:	05d2      	lsls	r2, r2, #23
    675e:	4b01      	ldr	r3, [pc, #4]	; (6764 <ui_process+0x20>)
    6760:	619a      	str	r2, [r3, #24]
}
    6762:	e7f5      	b.n	6750 <ui_process+0xc>
    6764:	41004480 	.word	0x41004480

00006768 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    6768:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    676a:	000b      	movs	r3, r1
    676c:	332e      	adds	r3, #46	; 0x2e
    676e:	009b      	lsls	r3, r3, #2
    6770:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    6772:	22aa      	movs	r2, #170	; 0xaa
    6774:	0052      	lsls	r2, r2, #1
    6776:	0049      	lsls	r1, r1, #1
    6778:	5a83      	ldrh	r3, [r0, r2]
    677a:	4c03      	ldr	r4, [pc, #12]	; (6788 <usb_device_register_callback+0x20>)
    677c:	5b09      	ldrh	r1, [r1, r4]
    677e:	430b      	orrs	r3, r1
    6780:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    6782:	2000      	movs	r0, #0
    6784:	bd10      	pop	{r4, pc}
    6786:	46c0      	nop			; (mov r8, r8)
    6788:	0000ada4 	.word	0x0000ada4

0000678c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    678c:	0049      	lsls	r1, r1, #1
    678e:	4b06      	ldr	r3, [pc, #24]	; (67a8 <usb_device_enable_callback+0x1c>)
    6790:	5acb      	ldrh	r3, [r1, r3]
    6792:	6802      	ldr	r2, [r0, #0]
    6794:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    6796:	21ab      	movs	r1, #171	; 0xab
    6798:	0049      	lsls	r1, r1, #1
    679a:	5a42      	ldrh	r2, [r0, r1]
    679c:	431a      	orrs	r2, r3
    679e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    67a0:	6802      	ldr	r2, [r0, #0]
    67a2:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    67a4:	2000      	movs	r0, #0
    67a6:	4770      	bx	lr
    67a8:	0000ada4 	.word	0x0000ada4

000067ac <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    67ac:	0049      	lsls	r1, r1, #1
    67ae:	4b05      	ldr	r3, [pc, #20]	; (67c4 <usb_device_disable_callback+0x18>)
    67b0:	5aca      	ldrh	r2, [r1, r3]
    67b2:	21ab      	movs	r1, #171	; 0xab
    67b4:	0049      	lsls	r1, r1, #1
    67b6:	5a43      	ldrh	r3, [r0, r1]
    67b8:	4393      	bics	r3, r2
    67ba:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    67bc:	6803      	ldr	r3, [r0, #0]
    67be:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    67c0:	2000      	movs	r0, #0
    67c2:	4770      	bx	lr
    67c4:	0000ada4 	.word	0x0000ada4

000067c8 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    67c8:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    67ca:	008c      	lsls	r4, r1, #2
    67cc:	18a4      	adds	r4, r4, r2
    67ce:	3434      	adds	r4, #52	; 0x34
    67d0:	00a4      	lsls	r4, r4, #2
    67d2:	1904      	adds	r4, r0, r4
    67d4:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    67d6:	1840      	adds	r0, r0, r1
    67d8:	3059      	adds	r0, #89	; 0x59
    67da:	30ff      	adds	r0, #255	; 0xff
    67dc:	7803      	ldrb	r3, [r0, #0]
    67de:	4903      	ldr	r1, [pc, #12]	; (67ec <usb_device_endpoint_register_callback+0x24>)
    67e0:	5c8a      	ldrb	r2, [r1, r2]
    67e2:	4313      	orrs	r3, r2
    67e4:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    67e6:	2000      	movs	r0, #0
    67e8:	bd10      	pop	{r4, pc}
    67ea:	46c0      	nop			; (mov r8, r8)
    67ec:	0000adb4 	.word	0x0000adb4

000067f0 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    67f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    67f2:	008b      	lsls	r3, r1, #2
    67f4:	189b      	adds	r3, r3, r2
    67f6:	3334      	adds	r3, #52	; 0x34
    67f8:	009b      	lsls	r3, r3, #2
    67fa:	18c3      	adds	r3, r0, r3
    67fc:	2400      	movs	r4, #0
    67fe:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    6800:	1840      	adds	r0, r0, r1
    6802:	3059      	adds	r0, #89	; 0x59
    6804:	30ff      	adds	r0, #255	; 0xff
    6806:	4b03      	ldr	r3, [pc, #12]	; (6814 <usb_device_endpoint_unregister_callback+0x24>)
    6808:	5c9a      	ldrb	r2, [r3, r2]
    680a:	7803      	ldrb	r3, [r0, #0]
    680c:	4393      	bics	r3, r2
    680e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    6810:	2000      	movs	r0, #0
    6812:	bd10      	pop	{r4, pc}
    6814:	0000adb4 	.word	0x0000adb4

00006818 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    6818:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    681a:	230f      	movs	r3, #15
    681c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    681e:	18c4      	adds	r4, r0, r3
    6820:	3461      	adds	r4, #97	; 0x61
    6822:	34ff      	adds	r4, #255	; 0xff
    6824:	7825      	ldrb	r5, [r4, #0]
    6826:	4e2f      	ldr	r6, [pc, #188]	; (68e4 <usb_device_endpoint_enable_callback+0xcc>)
    6828:	5cb6      	ldrb	r6, [r6, r2]
    682a:	4335      	orrs	r5, r6
    682c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    682e:	2a00      	cmp	r2, #0
    6830:	d129      	bne.n	6886 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6832:	2b00      	cmp	r3, #0
    6834:	d112      	bne.n	685c <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    6836:	2503      	movs	r5, #3
    6838:	240a      	movs	r4, #10
    683a:	34ff      	adds	r4, #255	; 0xff
    683c:	6806      	ldr	r6, [r0, #0]
    683e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6840:	2a03      	cmp	r2, #3
    6842:	d109      	bne.n	6858 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6844:	b249      	sxtb	r1, r1
    6846:	2900      	cmp	r1, #0
    6848:	db44      	blt.n	68d4 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    684a:	6802      	ldr	r2, [r0, #0]
    684c:	015b      	lsls	r3, r3, #5
    684e:	18d3      	adds	r3, r2, r3
    6850:	330a      	adds	r3, #10
    6852:	33ff      	adds	r3, #255	; 0xff
    6854:	2220      	movs	r2, #32
    6856:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    6858:	2000      	movs	r0, #0
    685a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    685c:	b24c      	sxtb	r4, r1
    685e:	2c00      	cmp	r4, #0
    6860:	db08      	blt.n	6874 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    6862:	015c      	lsls	r4, r3, #5
    6864:	6805      	ldr	r5, [r0, #0]
    6866:	46ac      	mov	ip, r5
    6868:	4464      	add	r4, ip
    686a:	340a      	adds	r4, #10
    686c:	34ff      	adds	r4, #255	; 0xff
    686e:	2501      	movs	r5, #1
    6870:	7025      	strb	r5, [r4, #0]
    6872:	e7e5      	b.n	6840 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    6874:	015c      	lsls	r4, r3, #5
    6876:	6805      	ldr	r5, [r0, #0]
    6878:	46ac      	mov	ip, r5
    687a:	4464      	add	r4, ip
    687c:	340a      	adds	r4, #10
    687e:	34ff      	adds	r4, #255	; 0xff
    6880:	2502      	movs	r5, #2
    6882:	7025      	strb	r5, [r4, #0]
    6884:	e7dc      	b.n	6840 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    6886:	2a01      	cmp	r2, #1
    6888:	d11a      	bne.n	68c0 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    688a:	2b00      	cmp	r3, #0
    688c:	d105      	bne.n	689a <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    688e:	6802      	ldr	r2, [r0, #0]
    6890:	210c      	movs	r1, #12
    6892:	230a      	movs	r3, #10
    6894:	33ff      	adds	r3, #255	; 0xff
    6896:	54d1      	strb	r1, [r2, r3]
    6898:	e7de      	b.n	6858 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    689a:	b249      	sxtb	r1, r1
    689c:	2900      	cmp	r1, #0
    689e:	db07      	blt.n	68b0 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    68a0:	6802      	ldr	r2, [r0, #0]
    68a2:	015b      	lsls	r3, r3, #5
    68a4:	18d3      	adds	r3, r2, r3
    68a6:	330a      	adds	r3, #10
    68a8:	33ff      	adds	r3, #255	; 0xff
    68aa:	2204      	movs	r2, #4
    68ac:	701a      	strb	r2, [r3, #0]
    68ae:	e7d3      	b.n	6858 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    68b0:	6802      	ldr	r2, [r0, #0]
    68b2:	015b      	lsls	r3, r3, #5
    68b4:	18d3      	adds	r3, r2, r3
    68b6:	330a      	adds	r3, #10
    68b8:	33ff      	adds	r3, #255	; 0xff
    68ba:	2208      	movs	r2, #8
    68bc:	701a      	strb	r2, [r3, #0]
    68be:	e7cb      	b.n	6858 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    68c0:	2a02      	cmp	r2, #2
    68c2:	d1bd      	bne.n	6840 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    68c4:	6802      	ldr	r2, [r0, #0]
    68c6:	015b      	lsls	r3, r3, #5
    68c8:	18d3      	adds	r3, r2, r3
    68ca:	330a      	adds	r3, #10
    68cc:	33ff      	adds	r3, #255	; 0xff
    68ce:	2210      	movs	r2, #16
    68d0:	701a      	strb	r2, [r3, #0]
    68d2:	e7c1      	b.n	6858 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    68d4:	6802      	ldr	r2, [r0, #0]
    68d6:	015b      	lsls	r3, r3, #5
    68d8:	18d3      	adds	r3, r2, r3
    68da:	330a      	adds	r3, #10
    68dc:	33ff      	adds	r3, #255	; 0xff
    68de:	2240      	movs	r2, #64	; 0x40
    68e0:	701a      	strb	r2, [r3, #0]
    68e2:	e7b9      	b.n	6858 <usb_device_endpoint_enable_callback+0x40>
    68e4:	0000adb4 	.word	0x0000adb4

000068e8 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    68e8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    68ea:	230f      	movs	r3, #15
    68ec:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    68ee:	18c4      	adds	r4, r0, r3
    68f0:	3461      	adds	r4, #97	; 0x61
    68f2:	34ff      	adds	r4, #255	; 0xff
    68f4:	4d2f      	ldr	r5, [pc, #188]	; (69b4 <usb_device_endpoint_disable_callback+0xcc>)
    68f6:	5cae      	ldrb	r6, [r5, r2]
    68f8:	7825      	ldrb	r5, [r4, #0]
    68fa:	43b5      	bics	r5, r6
    68fc:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    68fe:	2a00      	cmp	r2, #0
    6900:	d129      	bne.n	6956 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    6902:	2b00      	cmp	r3, #0
    6904:	d112      	bne.n	692c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    6906:	2503      	movs	r5, #3
    6908:	2484      	movs	r4, #132	; 0x84
    690a:	0064      	lsls	r4, r4, #1
    690c:	6806      	ldr	r6, [r0, #0]
    690e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    6910:	2a03      	cmp	r2, #3
    6912:	d109      	bne.n	6928 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    6914:	b249      	sxtb	r1, r1
    6916:	2900      	cmp	r1, #0
    6918:	db44      	blt.n	69a4 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    691a:	6802      	ldr	r2, [r0, #0]
    691c:	015b      	lsls	r3, r3, #5
    691e:	18d3      	adds	r3, r2, r3
    6920:	3309      	adds	r3, #9
    6922:	33ff      	adds	r3, #255	; 0xff
    6924:	2220      	movs	r2, #32
    6926:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    6928:	2000      	movs	r0, #0
    692a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    692c:	b24c      	sxtb	r4, r1
    692e:	2c00      	cmp	r4, #0
    6930:	db08      	blt.n	6944 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    6932:	015c      	lsls	r4, r3, #5
    6934:	6805      	ldr	r5, [r0, #0]
    6936:	46ac      	mov	ip, r5
    6938:	4464      	add	r4, ip
    693a:	3409      	adds	r4, #9
    693c:	34ff      	adds	r4, #255	; 0xff
    693e:	2501      	movs	r5, #1
    6940:	7025      	strb	r5, [r4, #0]
    6942:	e7e5      	b.n	6910 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    6944:	015c      	lsls	r4, r3, #5
    6946:	6805      	ldr	r5, [r0, #0]
    6948:	46ac      	mov	ip, r5
    694a:	4464      	add	r4, ip
    694c:	3409      	adds	r4, #9
    694e:	34ff      	adds	r4, #255	; 0xff
    6950:	2502      	movs	r5, #2
    6952:	7025      	strb	r5, [r4, #0]
    6954:	e7dc      	b.n	6910 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    6956:	2a01      	cmp	r2, #1
    6958:	d11a      	bne.n	6990 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    695a:	2b00      	cmp	r3, #0
    695c:	d105      	bne.n	696a <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    695e:	6802      	ldr	r2, [r0, #0]
    6960:	210c      	movs	r1, #12
    6962:	3309      	adds	r3, #9
    6964:	33ff      	adds	r3, #255	; 0xff
    6966:	54d1      	strb	r1, [r2, r3]
    6968:	e7de      	b.n	6928 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    696a:	b249      	sxtb	r1, r1
    696c:	2900      	cmp	r1, #0
    696e:	db07      	blt.n	6980 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    6970:	6802      	ldr	r2, [r0, #0]
    6972:	015b      	lsls	r3, r3, #5
    6974:	18d3      	adds	r3, r2, r3
    6976:	3309      	adds	r3, #9
    6978:	33ff      	adds	r3, #255	; 0xff
    697a:	2204      	movs	r2, #4
    697c:	701a      	strb	r2, [r3, #0]
    697e:	e7d3      	b.n	6928 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    6980:	6802      	ldr	r2, [r0, #0]
    6982:	015b      	lsls	r3, r3, #5
    6984:	18d3      	adds	r3, r2, r3
    6986:	3309      	adds	r3, #9
    6988:	33ff      	adds	r3, #255	; 0xff
    698a:	2208      	movs	r2, #8
    698c:	701a      	strb	r2, [r3, #0]
    698e:	e7cb      	b.n	6928 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    6990:	2a02      	cmp	r2, #2
    6992:	d1bd      	bne.n	6910 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    6994:	6802      	ldr	r2, [r0, #0]
    6996:	015b      	lsls	r3, r3, #5
    6998:	18d3      	adds	r3, r2, r3
    699a:	3309      	adds	r3, #9
    699c:	33ff      	adds	r3, #255	; 0xff
    699e:	2210      	movs	r2, #16
    69a0:	701a      	strb	r2, [r3, #0]
    69a2:	e7c1      	b.n	6928 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    69a4:	6802      	ldr	r2, [r0, #0]
    69a6:	015b      	lsls	r3, r3, #5
    69a8:	18d3      	adds	r3, r2, r3
    69aa:	3309      	adds	r3, #9
    69ac:	33ff      	adds	r3, #255	; 0xff
    69ae:	2240      	movs	r2, #64	; 0x40
    69b0:	701a      	strb	r2, [r3, #0]
    69b2:	e7b9      	b.n	6928 <usb_device_endpoint_disable_callback+0x40>
    69b4:	0000adb4 	.word	0x0000adb4

000069b8 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    69b8:	2300      	movs	r3, #0
    69ba:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    69bc:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    69be:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    69c0:	3301      	adds	r3, #1
    69c2:	70c3      	strb	r3, [r0, #3]
}
    69c4:	4770      	bx	lr
	...

000069c8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    69c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    69ca:	780c      	ldrb	r4, [r1, #0]
    69cc:	230f      	movs	r3, #15
    69ce:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    69d0:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    69d2:	78ca      	ldrb	r2, [r1, #3]
    69d4:	2a04      	cmp	r2, #4
    69d6:	d870      	bhi.n	6aba <usb_device_endpoint_set_config+0xf2>
    69d8:	0092      	lsls	r2, r2, #2
    69da:	4d89      	ldr	r5, [pc, #548]	; (6c00 <usb_device_endpoint_set_config+0x238>)
    69dc:	58aa      	ldr	r2, [r5, r2]
    69de:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    69e0:	6802      	ldr	r2, [r0, #0]
    69e2:	3308      	adds	r3, #8
    69e4:	015b      	lsls	r3, r3, #5
    69e6:	2100      	movs	r1, #0
    69e8:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    69ea:	2200      	movs	r2, #0
    69ec:	e082      	b.n	6af4 <usb_device_endpoint_set_config+0x12c>
    69ee:	015c      	lsls	r4, r3, #5
    69f0:	6802      	ldr	r2, [r0, #0]
    69f2:	4694      	mov	ip, r2
    69f4:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    69f6:	2280      	movs	r2, #128	; 0x80
    69f8:	0052      	lsls	r2, r2, #1
    69fa:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    69fc:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    69fe:	076d      	lsls	r5, r5, #29
    6a00:	d178      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    6a02:	32e4      	adds	r2, #228	; 0xe4
    6a04:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6a06:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    6a08:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    6a0a:	422e      	tst	r6, r5
    6a0c:	d172      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    6a0e:	3d5f      	subs	r5, #95	; 0x5f
    6a10:	32e4      	adds	r2, #228	; 0xe4
    6a12:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6a14:	001a      	movs	r2, r3
    6a16:	3208      	adds	r2, #8
    6a18:	0152      	lsls	r2, r2, #5
    6a1a:	6804      	ldr	r4, [r0, #0]
    6a1c:	18a4      	adds	r4, r4, r2
    6a1e:	352f      	adds	r5, #47	; 0x2f
    6a20:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6a22:	6800      	ldr	r0, [r0, #0]
    6a24:	1882      	adds	r2, r0, r2
    6a26:	2080      	movs	r0, #128	; 0x80
    6a28:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    6a2a:	788a      	ldrb	r2, [r1, #2]
    6a2c:	2a00      	cmp	r2, #0
    6a2e:	d01f      	beq.n	6a70 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6a30:	0158      	lsls	r0, r3, #5
    6a32:	4a74      	ldr	r2, [pc, #464]	; (6c04 <usb_device_endpoint_set_config+0x23c>)
    6a34:	1812      	adds	r2, r2, r0
    6a36:	6854      	ldr	r4, [r2, #4]
    6a38:	2080      	movs	r0, #128	; 0x80
    6a3a:	0600      	lsls	r0, r0, #24
    6a3c:	4304      	orrs	r4, r0
    6a3e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6a40:	6954      	ldr	r4, [r2, #20]
    6a42:	4320      	orrs	r0, r4
    6a44:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6a46:	2507      	movs	r5, #7
    6a48:	784c      	ldrb	r4, [r1, #1]
    6a4a:	015a      	lsls	r2, r3, #5
    6a4c:	4b6d      	ldr	r3, [pc, #436]	; (6c04 <usb_device_endpoint_set_config+0x23c>)
    6a4e:	189b      	adds	r3, r3, r2
    6a50:	6858      	ldr	r0, [r3, #4]
    6a52:	402c      	ands	r4, r5
    6a54:	0724      	lsls	r4, r4, #28
    6a56:	4e6c      	ldr	r6, [pc, #432]	; (6c08 <usb_device_endpoint_set_config+0x240>)
    6a58:	4030      	ands	r0, r6
    6a5a:	4320      	orrs	r0, r4
    6a5c:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6a5e:	7849      	ldrb	r1, [r1, #1]
    6a60:	695a      	ldr	r2, [r3, #20]
    6a62:	4029      	ands	r1, r5
    6a64:	0709      	lsls	r1, r1, #28
    6a66:	4032      	ands	r2, r6
    6a68:	430a      	orrs	r2, r1
    6a6a:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6a6c:	2200      	movs	r2, #0
    6a6e:	e041      	b.n	6af4 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6a70:	0158      	lsls	r0, r3, #5
    6a72:	4a64      	ldr	r2, [pc, #400]	; (6c04 <usb_device_endpoint_set_config+0x23c>)
    6a74:	1812      	adds	r2, r2, r0
    6a76:	6850      	ldr	r0, [r2, #4]
    6a78:	0040      	lsls	r0, r0, #1
    6a7a:	0840      	lsrs	r0, r0, #1
    6a7c:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6a7e:	6950      	ldr	r0, [r2, #20]
    6a80:	0040      	lsls	r0, r0, #1
    6a82:	0840      	lsrs	r0, r0, #1
    6a84:	6150      	str	r0, [r2, #20]
    6a86:	e7de      	b.n	6a46 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6a88:	2c00      	cmp	r4, #0
    6a8a:	db35      	blt.n	6af8 <usb_device_endpoint_set_config+0x130>
    6a8c:	015d      	lsls	r5, r3, #5
    6a8e:	6802      	ldr	r2, [r0, #0]
    6a90:	4694      	mov	ip, r2
    6a92:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6a94:	2280      	movs	r2, #128	; 0x80
    6a96:	0052      	lsls	r2, r2, #1
    6a98:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    6a9a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6a9c:	0776      	lsls	r6, r6, #29
    6a9e:	d129      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    6aa0:	2680      	movs	r6, #128	; 0x80
    6aa2:	0076      	lsls	r6, r6, #1
    6aa4:	5daa      	ldrb	r2, [r5, r6]
    6aa6:	2702      	movs	r7, #2
    6aa8:	433a      	orrs	r2, r7
    6aaa:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6aac:	6802      	ldr	r2, [r0, #0]
    6aae:	0018      	movs	r0, r3
    6ab0:	3008      	adds	r0, #8
    6ab2:	0140      	lsls	r0, r0, #5
    6ab4:	1812      	adds	r2, r2, r0
    6ab6:	2040      	movs	r0, #64	; 0x40
    6ab8:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6aba:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6abc:	784f      	ldrb	r7, [r1, #1]
    6abe:	005d      	lsls	r5, r3, #1
    6ac0:	18ad      	adds	r5, r5, r2
    6ac2:	012d      	lsls	r5, r5, #4
    6ac4:	4e4f      	ldr	r6, [pc, #316]	; (6c04 <usb_device_endpoint_set_config+0x23c>)
    6ac6:	1975      	adds	r5, r6, r5
    6ac8:	6868      	ldr	r0, [r5, #4]
    6aca:	2407      	movs	r4, #7
    6acc:	403c      	ands	r4, r7
    6ace:	0724      	lsls	r4, r4, #28
    6ad0:	4e4d      	ldr	r6, [pc, #308]	; (6c08 <usb_device_endpoint_set_config+0x240>)
    6ad2:	4030      	ands	r0, r6
    6ad4:	4320      	orrs	r0, r4
    6ad6:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    6ad8:	7889      	ldrb	r1, [r1, #2]
    6ada:	2900      	cmp	r1, #0
    6adc:	d000      	beq.n	6ae0 <usb_device_endpoint_set_config+0x118>
    6ade:	e088      	b.n	6bf2 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6ae0:	005b      	lsls	r3, r3, #1
    6ae2:	189b      	adds	r3, r3, r2
    6ae4:	011b      	lsls	r3, r3, #4
    6ae6:	4a47      	ldr	r2, [pc, #284]	; (6c04 <usb_device_endpoint_set_config+0x23c>)
    6ae8:	18d3      	adds	r3, r2, r3
    6aea:	685a      	ldr	r2, [r3, #4]
    6aec:	0052      	lsls	r2, r2, #1
    6aee:	0852      	lsrs	r2, r2, #1
    6af0:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    6af2:	2200      	movs	r2, #0
}
    6af4:	0010      	movs	r0, r2
    6af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6af8:	015d      	lsls	r5, r3, #5
    6afa:	6802      	ldr	r2, [r0, #0]
    6afc:	4694      	mov	ip, r2
    6afe:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6b00:	2280      	movs	r2, #128	; 0x80
    6b02:	0052      	lsls	r2, r2, #1
    6b04:	5caf      	ldrb	r7, [r5, r2]
    6b06:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6b08:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6b0a:	4237      	tst	r7, r6
    6b0c:	d1f2      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    6b0e:	3690      	adds	r6, #144	; 0x90
    6b10:	5daa      	ldrb	r2, [r5, r6]
    6b12:	2720      	movs	r7, #32
    6b14:	433a      	orrs	r2, r7
    6b16:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6b18:	6802      	ldr	r2, [r0, #0]
    6b1a:	0018      	movs	r0, r3
    6b1c:	3008      	adds	r0, #8
    6b1e:	0140      	lsls	r0, r0, #5
    6b20:	1812      	adds	r2, r2, r0
    6b22:	2080      	movs	r0, #128	; 0x80
    6b24:	7110      	strb	r0, [r2, #4]
    6b26:	e7c8      	b.n	6aba <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6b28:	2c00      	cmp	r4, #0
    6b2a:	db17      	blt.n	6b5c <usb_device_endpoint_set_config+0x194>
    6b2c:	015d      	lsls	r5, r3, #5
    6b2e:	6802      	ldr	r2, [r0, #0]
    6b30:	4694      	mov	ip, r2
    6b32:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6b34:	2280      	movs	r2, #128	; 0x80
    6b36:	0052      	lsls	r2, r2, #1
    6b38:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6b3a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6b3c:	0776      	lsls	r6, r6, #29
    6b3e:	d1d9      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    6b40:	2680      	movs	r6, #128	; 0x80
    6b42:	0076      	lsls	r6, r6, #1
    6b44:	5daa      	ldrb	r2, [r5, r6]
    6b46:	2703      	movs	r7, #3
    6b48:	433a      	orrs	r2, r7
    6b4a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6b4c:	6802      	ldr	r2, [r0, #0]
    6b4e:	0018      	movs	r0, r3
    6b50:	3008      	adds	r0, #8
    6b52:	0140      	lsls	r0, r0, #5
    6b54:	1812      	adds	r2, r2, r0
    6b56:	2040      	movs	r0, #64	; 0x40
    6b58:	7150      	strb	r0, [r2, #5]
    6b5a:	e7ae      	b.n	6aba <usb_device_endpoint_set_config+0xf2>
    6b5c:	015d      	lsls	r5, r3, #5
    6b5e:	6802      	ldr	r2, [r0, #0]
    6b60:	4694      	mov	ip, r2
    6b62:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6b64:	2280      	movs	r2, #128	; 0x80
    6b66:	0052      	lsls	r2, r2, #1
    6b68:	5caf      	ldrb	r7, [r5, r2]
    6b6a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6b6c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6b6e:	4237      	tst	r7, r6
    6b70:	d1c0      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    6b72:	3690      	adds	r6, #144	; 0x90
    6b74:	5daa      	ldrb	r2, [r5, r6]
    6b76:	2730      	movs	r7, #48	; 0x30
    6b78:	433a      	orrs	r2, r7
    6b7a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6b7c:	6802      	ldr	r2, [r0, #0]
    6b7e:	0018      	movs	r0, r3
    6b80:	3008      	adds	r0, #8
    6b82:	0140      	lsls	r0, r0, #5
    6b84:	1812      	adds	r2, r2, r0
    6b86:	2080      	movs	r0, #128	; 0x80
    6b88:	7110      	strb	r0, [r2, #4]
    6b8a:	e796      	b.n	6aba <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6b8c:	2c00      	cmp	r4, #0
    6b8e:	db17      	blt.n	6bc0 <usb_device_endpoint_set_config+0x1f8>
    6b90:	015d      	lsls	r5, r3, #5
    6b92:	6802      	ldr	r2, [r0, #0]
    6b94:	4694      	mov	ip, r2
    6b96:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6b98:	2280      	movs	r2, #128	; 0x80
    6b9a:	0052      	lsls	r2, r2, #1
    6b9c:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    6b9e:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6ba0:	0776      	lsls	r6, r6, #29
    6ba2:	d1a7      	bne.n	6af4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6ba4:	2680      	movs	r6, #128	; 0x80
    6ba6:	0076      	lsls	r6, r6, #1
    6ba8:	5daa      	ldrb	r2, [r5, r6]
    6baa:	2704      	movs	r7, #4
    6bac:	433a      	orrs	r2, r7
    6bae:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6bb0:	6802      	ldr	r2, [r0, #0]
    6bb2:	0018      	movs	r0, r3
    6bb4:	3008      	adds	r0, #8
    6bb6:	0140      	lsls	r0, r0, #5
    6bb8:	1812      	adds	r2, r2, r0
    6bba:	2040      	movs	r0, #64	; 0x40
    6bbc:	7150      	strb	r0, [r2, #5]
    6bbe:	e77c      	b.n	6aba <usb_device_endpoint_set_config+0xf2>
    6bc0:	015d      	lsls	r5, r3, #5
    6bc2:	6802      	ldr	r2, [r0, #0]
    6bc4:	4694      	mov	ip, r2
    6bc6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6bc8:	2280      	movs	r2, #128	; 0x80
    6bca:	0052      	lsls	r2, r2, #1
    6bcc:	5caf      	ldrb	r7, [r5, r2]
    6bce:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6bd0:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6bd2:	4237      	tst	r7, r6
    6bd4:	d000      	beq.n	6bd8 <usb_device_endpoint_set_config+0x210>
    6bd6:	e78d      	b.n	6af4 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    6bd8:	3690      	adds	r6, #144	; 0x90
    6bda:	5daa      	ldrb	r2, [r5, r6]
    6bdc:	2740      	movs	r7, #64	; 0x40
    6bde:	433a      	orrs	r2, r7
    6be0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6be2:	6802      	ldr	r2, [r0, #0]
    6be4:	0018      	movs	r0, r3
    6be6:	3008      	adds	r0, #8
    6be8:	0140      	lsls	r0, r0, #5
    6bea:	1812      	adds	r2, r2, r0
    6bec:	2080      	movs	r0, #128	; 0x80
    6bee:	7110      	strb	r0, [r2, #4]
    6bf0:	e763      	b.n	6aba <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    6bf2:	6869      	ldr	r1, [r5, #4]
    6bf4:	2380      	movs	r3, #128	; 0x80
    6bf6:	061b      	lsls	r3, r3, #24
    6bf8:	430b      	orrs	r3, r1
    6bfa:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    6bfc:	2200      	movs	r2, #0
    6bfe:	e779      	b.n	6af4 <usb_device_endpoint_set_config+0x12c>
    6c00:	0000ad90 	.word	0x0000ad90
    6c04:	20000d40 	.word	0x20000d40
    6c08:	8fffffff 	.word	0x8fffffff

00006c0c <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6c0c:	230f      	movs	r3, #15
    6c0e:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    6c10:	b249      	sxtb	r1, r1
    6c12:	2900      	cmp	r1, #0
    6c14:	db09      	blt.n	6c2a <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6c16:	6802      	ldr	r2, [r0, #0]
    6c18:	3308      	adds	r3, #8
    6c1a:	015b      	lsls	r3, r3, #5
    6c1c:	5c98      	ldrb	r0, [r3, r2]
    6c1e:	0740      	lsls	r0, r0, #29
    6c20:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    6c22:	1e43      	subs	r3, r0, #1
    6c24:	4198      	sbcs	r0, r3
    6c26:	b2c0      	uxtb	r0, r0
}
    6c28:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    6c2a:	6802      	ldr	r2, [r0, #0]
    6c2c:	3308      	adds	r3, #8
    6c2e:	015b      	lsls	r3, r3, #5
    6c30:	5c98      	ldrb	r0, [r3, r2]
    6c32:	0640      	lsls	r0, r0, #25
    6c34:	0f40      	lsrs	r0, r0, #29
    6c36:	e7f4      	b.n	6c22 <usb_device_endpoint_is_configured+0x16>

00006c38 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    6c38:	230f      	movs	r3, #15
    6c3a:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    6c3c:	b249      	sxtb	r1, r1
    6c3e:	2900      	cmp	r1, #0
    6c40:	db0a      	blt.n	6c58 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6c42:	3308      	adds	r3, #8
    6c44:	015b      	lsls	r3, r3, #5
    6c46:	6802      	ldr	r2, [r0, #0]
    6c48:	18d2      	adds	r2, r2, r3
    6c4a:	2140      	movs	r1, #64	; 0x40
    6c4c:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6c4e:	6802      	ldr	r2, [r0, #0]
    6c50:	18d3      	adds	r3, r2, r3
    6c52:	2201      	movs	r2, #1
    6c54:	71da      	strb	r2, [r3, #7]
	}
}
    6c56:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6c58:	3308      	adds	r3, #8
    6c5a:	015b      	lsls	r3, r3, #5
    6c5c:	6802      	ldr	r2, [r0, #0]
    6c5e:	18d2      	adds	r2, r2, r3
    6c60:	2180      	movs	r1, #128	; 0x80
    6c62:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6c64:	6802      	ldr	r2, [r0, #0]
    6c66:	18d3      	adds	r3, r2, r3
    6c68:	2202      	movs	r2, #2
    6c6a:	71da      	strb	r2, [r3, #7]
    6c6c:	e7f3      	b.n	6c56 <usb_device_endpoint_abort_job+0x1e>

00006c6e <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6c6e:	230f      	movs	r3, #15
    6c70:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6c72:	b249      	sxtb	r1, r1
    6c74:	2900      	cmp	r1, #0
    6c76:	db07      	blt.n	6c88 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6c78:	6802      	ldr	r2, [r0, #0]
    6c7a:	3308      	adds	r3, #8
    6c7c:	015b      	lsls	r3, r3, #5
    6c7e:	18d3      	adds	r3, r2, r3
    6c80:	7998      	ldrb	r0, [r3, #6]
    6c82:	06c0      	lsls	r0, r0, #27
    6c84:	0fc0      	lsrs	r0, r0, #31
	}
}
    6c86:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    6c88:	6802      	ldr	r2, [r0, #0]
    6c8a:	3308      	adds	r3, #8
    6c8c:	015b      	lsls	r3, r3, #5
    6c8e:	18d3      	adds	r3, r2, r3
    6c90:	7998      	ldrb	r0, [r3, #6]
    6c92:	0680      	lsls	r0, r0, #26
    6c94:	0fc0      	lsrs	r0, r0, #31
    6c96:	e7f6      	b.n	6c86 <usb_device_endpoint_is_halted+0x18>

00006c98 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6c98:	230f      	movs	r3, #15
    6c9a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    6c9c:	b249      	sxtb	r1, r1
    6c9e:	2900      	cmp	r1, #0
    6ca0:	db06      	blt.n	6cb0 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    6ca2:	6802      	ldr	r2, [r0, #0]
    6ca4:	3308      	adds	r3, #8
    6ca6:	015b      	lsls	r3, r3, #5
    6ca8:	18d3      	adds	r3, r2, r3
    6caa:	2210      	movs	r2, #16
    6cac:	715a      	strb	r2, [r3, #5]
	}
}
    6cae:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    6cb0:	6802      	ldr	r2, [r0, #0]
    6cb2:	3308      	adds	r3, #8
    6cb4:	015b      	lsls	r3, r3, #5
    6cb6:	18d3      	adds	r3, r2, r3
    6cb8:	2220      	movs	r2, #32
    6cba:	715a      	strb	r2, [r3, #5]
    6cbc:	e7f7      	b.n	6cae <usb_device_endpoint_set_halt+0x16>

00006cbe <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    6cbe:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6cc0:	230f      	movs	r3, #15
    6cc2:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6cc4:	b249      	sxtb	r1, r1
    6cc6:	2900      	cmp	r1, #0
    6cc8:	db1d      	blt.n	6d06 <usb_device_endpoint_clear_halt+0x48>
    6cca:	0159      	lsls	r1, r3, #5
    6ccc:	6802      	ldr	r2, [r0, #0]
    6cce:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    6cd0:	2483      	movs	r4, #131	; 0x83
    6cd2:	0064      	lsls	r4, r4, #1
    6cd4:	5d14      	ldrb	r4, [r2, r4]
    6cd6:	06e4      	lsls	r4, r4, #27
    6cd8:	d514      	bpl.n	6d04 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    6cda:	2510      	movs	r5, #16
    6cdc:	2482      	movs	r4, #130	; 0x82
    6cde:	0064      	lsls	r4, r4, #1
    6ce0:	5515      	strb	r5, [r2, r4]
    6ce2:	6802      	ldr	r2, [r0, #0]
    6ce4:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6ce6:	2108      	movs	r1, #8
    6ce8:	31ff      	adds	r1, #255	; 0xff
    6cea:	5c51      	ldrb	r1, [r2, r1]
    6cec:	0689      	lsls	r1, r1, #26
    6cee:	d509      	bpl.n	6d04 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6cf0:	3ce4      	subs	r4, #228	; 0xe4
    6cf2:	2108      	movs	r1, #8
    6cf4:	31ff      	adds	r1, #255	; 0xff
    6cf6:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    6cf8:	6802      	ldr	r2, [r0, #0]
    6cfa:	3308      	adds	r3, #8
    6cfc:	015b      	lsls	r3, r3, #5
    6cfe:	18d3      	adds	r3, r2, r3
    6d00:	2201      	movs	r2, #1
    6d02:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    6d04:	bd30      	pop	{r4, r5, pc}
    6d06:	0159      	lsls	r1, r3, #5
    6d08:	6802      	ldr	r2, [r0, #0]
    6d0a:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    6d0c:	2483      	movs	r4, #131	; 0x83
    6d0e:	0064      	lsls	r4, r4, #1
    6d10:	5d14      	ldrb	r4, [r2, r4]
    6d12:	06a4      	lsls	r4, r4, #26
    6d14:	d5f6      	bpl.n	6d04 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    6d16:	2520      	movs	r5, #32
    6d18:	2482      	movs	r4, #130	; 0x82
    6d1a:	0064      	lsls	r4, r4, #1
    6d1c:	5515      	strb	r5, [r2, r4]
    6d1e:	6802      	ldr	r2, [r0, #0]
    6d20:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6d22:	2108      	movs	r1, #8
    6d24:	31ff      	adds	r1, #255	; 0xff
    6d26:	5c51      	ldrb	r1, [r2, r1]
    6d28:	0649      	lsls	r1, r1, #25
    6d2a:	d5eb      	bpl.n	6d04 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6d2c:	3cc4      	subs	r4, #196	; 0xc4
    6d2e:	2108      	movs	r1, #8
    6d30:	31ff      	adds	r1, #255	; 0xff
    6d32:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    6d34:	6802      	ldr	r2, [r0, #0]
    6d36:	3308      	adds	r3, #8
    6d38:	015b      	lsls	r3, r3, #5
    6d3a:	18d3      	adds	r3, r2, r3
    6d3c:	2202      	movs	r2, #2
    6d3e:	711a      	strb	r2, [r3, #4]
    6d40:	e7e0      	b.n	6d04 <usb_device_endpoint_clear_halt+0x46>
	...

00006d44 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6d44:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    6d46:	000c      	movs	r4, r1
    6d48:	3408      	adds	r4, #8
    6d4a:	0164      	lsls	r4, r4, #5
    6d4c:	6805      	ldr	r5, [r0, #0]
    6d4e:	5d64      	ldrb	r4, [r4, r5]
    6d50:	0664      	lsls	r4, r4, #25
    6d52:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6d54:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6d56:	2c00      	cmp	r4, #0
    6d58:	d101      	bne.n	6d5e <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    6d5a:	0028      	movs	r0, r5
    6d5c:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    6d5e:	014c      	lsls	r4, r1, #5
    6d60:	4d0b      	ldr	r5, [pc, #44]	; (6d90 <usb_device_endpoint_write_buffer_job+0x4c>)
    6d62:	192d      	adds	r5, r5, r4
    6d64:	002c      	movs	r4, r5
    6d66:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6d68:	696a      	ldr	r2, [r5, #20]
    6d6a:	4d0a      	ldr	r5, [pc, #40]	; (6d94 <usb_device_endpoint_write_buffer_job+0x50>)
    6d6c:	402a      	ands	r2, r5
    6d6e:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    6d70:	6962      	ldr	r2, [r4, #20]
    6d72:	049b      	lsls	r3, r3, #18
    6d74:	0c9b      	lsrs	r3, r3, #18
    6d76:	0b92      	lsrs	r2, r2, #14
    6d78:	0392      	lsls	r2, r2, #14
    6d7a:	4313      	orrs	r3, r2
    6d7c:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    6d7e:	6803      	ldr	r3, [r0, #0]
    6d80:	3108      	adds	r1, #8
    6d82:	0149      	lsls	r1, r1, #5
    6d84:	1859      	adds	r1, r3, r1
    6d86:	2380      	movs	r3, #128	; 0x80
    6d88:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    6d8a:	2500      	movs	r5, #0
    6d8c:	e7e5      	b.n	6d5a <usb_device_endpoint_write_buffer_job+0x16>
    6d8e:	46c0      	nop			; (mov r8, r8)
    6d90:	20000d40 	.word	0x20000d40
    6d94:	f0003fff 	.word	0xf0003fff

00006d98 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6d98:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6d9a:	000c      	movs	r4, r1
    6d9c:	3408      	adds	r4, #8
    6d9e:	0164      	lsls	r4, r4, #5
    6da0:	6805      	ldr	r5, [r0, #0]
    6da2:	5d64      	ldrb	r4, [r4, r5]
    6da4:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6da6:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6da8:	2c00      	cmp	r4, #0
    6daa:	d101      	bne.n	6db0 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    6dac:	0028      	movs	r0, r5
    6dae:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6db0:	4c0b      	ldr	r4, [pc, #44]	; (6de0 <usb_device_endpoint_read_buffer_job+0x48>)
    6db2:	014d      	lsls	r5, r1, #5
    6db4:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    6db6:	1962      	adds	r2, r4, r5
    6db8:	6854      	ldr	r4, [r2, #4]
    6dba:	049b      	lsls	r3, r3, #18
    6dbc:	091b      	lsrs	r3, r3, #4
    6dbe:	4d09      	ldr	r5, [pc, #36]	; (6de4 <usb_device_endpoint_read_buffer_job+0x4c>)
    6dc0:	402c      	ands	r4, r5
    6dc2:	4323      	orrs	r3, r4
    6dc4:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6dc6:	6853      	ldr	r3, [r2, #4]
    6dc8:	0b9b      	lsrs	r3, r3, #14
    6dca:	039b      	lsls	r3, r3, #14
    6dcc:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6dce:	6803      	ldr	r3, [r0, #0]
    6dd0:	3108      	adds	r1, #8
    6dd2:	0149      	lsls	r1, r1, #5
    6dd4:	1859      	adds	r1, r3, r1
    6dd6:	2340      	movs	r3, #64	; 0x40
    6dd8:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6dda:	2500      	movs	r5, #0
    6ddc:	e7e6      	b.n	6dac <usb_device_endpoint_read_buffer_job+0x14>
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	20000d40 	.word	0x20000d40
    6de4:	f0003fff 	.word	0xf0003fff

00006de8 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6de8:	4b09      	ldr	r3, [pc, #36]	; (6e10 <usb_device_endpoint_setup_buffer_job+0x28>)
    6dea:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6dec:	685a      	ldr	r2, [r3, #4]
    6dee:	4909      	ldr	r1, [pc, #36]	; (6e14 <usb_device_endpoint_setup_buffer_job+0x2c>)
    6df0:	4011      	ands	r1, r2
    6df2:	2280      	movs	r2, #128	; 0x80
    6df4:	0292      	lsls	r2, r2, #10
    6df6:	430a      	orrs	r2, r1
    6df8:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6dfa:	685a      	ldr	r2, [r3, #4]
    6dfc:	0b92      	lsrs	r2, r2, #14
    6dfe:	0392      	lsls	r2, r2, #14
    6e00:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    6e02:	6802      	ldr	r2, [r0, #0]
    6e04:	2140      	movs	r1, #64	; 0x40
    6e06:	2382      	movs	r3, #130	; 0x82
    6e08:	005b      	lsls	r3, r3, #1
    6e0a:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    6e0c:	2000      	movs	r0, #0
    6e0e:	4770      	bx	lr
    6e10:	20000d40 	.word	0x20000d40
    6e14:	f0003fff 	.word	0xf0003fff

00006e18 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    6e18:	6802      	ldr	r2, [r0, #0]
    6e1a:	7813      	ldrb	r3, [r2, #0]
    6e1c:	2102      	movs	r1, #2
    6e1e:	430b      	orrs	r3, r1
    6e20:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    6e22:	6802      	ldr	r2, [r0, #0]
    6e24:	7893      	ldrb	r3, [r2, #2]
    6e26:	2b02      	cmp	r3, #2
    6e28:	d0fc      	beq.n	6e24 <usb_enable+0xc>
}
    6e2a:	4770      	bx	lr

00006e2c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    6e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e2e:	46de      	mov	lr, fp
    6e30:	4657      	mov	r7, sl
    6e32:	464e      	mov	r6, r9
    6e34:	4645      	mov	r5, r8
    6e36:	b5e0      	push	{r5, r6, r7, lr}
    6e38:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    6e3a:	4bc2      	ldr	r3, [pc, #776]	; (7144 <USB_Handler+0x318>)
    6e3c:	681f      	ldr	r7, [r3, #0]
    6e3e:	683d      	ldr	r5, [r7, #0]
    6e40:	782b      	ldrb	r3, [r5, #0]
    6e42:	09db      	lsrs	r3, r3, #7
    6e44:	d114      	bne.n	6e70 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    6e46:	8c2e      	ldrh	r6, [r5, #32]
    6e48:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    6e4a:	2e00      	cmp	r6, #0
    6e4c:	d000      	beq.n	6e50 <USB_Handler+0x24>
    6e4e:	e1a9      	b.n	71a4 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    6e50:	8bae      	ldrh	r6, [r5, #28]
    6e52:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    6e54:	23ab      	movs	r3, #171	; 0xab
    6e56:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    6e58:	5afb      	ldrh	r3, [r7, r3]
    6e5a:	22aa      	movs	r2, #170	; 0xaa
    6e5c:	0052      	lsls	r2, r2, #1
    6e5e:	5abd      	ldrh	r5, [r7, r2]
    6e60:	401d      	ands	r5, r3
    6e62:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6e64:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    6e66:	4fb8      	ldr	r7, [pc, #736]	; (7148 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6e68:	4bb6      	ldr	r3, [pc, #728]	; (7144 <USB_Handler+0x318>)
    6e6a:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6e6c:	4698      	mov	r8, r3
    6e6e:	e184      	b.n	717a <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    6e70:	8c2b      	ldrh	r3, [r5, #32]
    6e72:	b29b      	uxth	r3, r3
    6e74:	2b00      	cmp	r3, #0
    6e76:	d100      	bne.n	6e7a <USB_Handler+0x4e>
    6e78:	e0de      	b.n	7038 <USB_Handler+0x20c>
    6e7a:	8c28      	ldrh	r0, [r5, #32]
    6e7c:	b280      	uxth	r0, r0
    6e7e:	4bb3      	ldr	r3, [pc, #716]	; (714c <USB_Handler+0x320>)
    6e80:	4798      	blx	r3
    6e82:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    6e84:	281f      	cmp	r0, #31
    6e86:	d900      	bls.n	6e8a <USB_Handler+0x5e>
    6e88:	e0d6      	b.n	7038 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6e8a:	0003      	movs	r3, r0
    6e8c:	3308      	adds	r3, #8
    6e8e:	015b      	lsls	r3, r3, #5
    6e90:	18ed      	adds	r5, r5, r3
    6e92:	79ed      	ldrb	r5, [r5, #7]
    6e94:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6e96:	07ab      	lsls	r3, r5, #30
    6e98:	d041      	beq.n	6f1e <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6e9a:	4aad      	ldr	r2, [pc, #692]	; (7150 <USB_Handler+0x324>)
    6e9c:	2301      	movs	r3, #1
    6e9e:	4083      	lsls	r3, r0
    6ea0:	6811      	ldr	r1, [r2, #0]
    6ea2:	4399      	bics	r1, r3
    6ea4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6ea6:	0003      	movs	r3, r0
    6ea8:	3308      	adds	r3, #8
    6eaa:	015b      	lsls	r3, r3, #5
    6eac:	683a      	ldr	r2, [r7, #0]
    6eae:	4694      	mov	ip, r2
    6eb0:	4463      	add	r3, ip
    6eb2:	2203      	movs	r2, #3
    6eb4:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6eb6:	183b      	adds	r3, r7, r0
    6eb8:	33ae      	adds	r3, #174	; 0xae
    6eba:	781b      	ldrb	r3, [r3, #0]
    6ebc:	07db      	lsls	r3, r3, #31
    6ebe:	d52e      	bpl.n	6f1e <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    6ec0:	4ba4      	ldr	r3, [pc, #656]	; (7154 <USB_Handler+0x328>)
    6ec2:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6ec4:	683a      	ldr	r2, [r7, #0]
    6ec6:	0003      	movs	r3, r0
    6ec8:	3308      	adds	r3, #8
    6eca:	015b      	lsls	r3, r3, #5
    6ecc:	5c9b      	ldrb	r3, [r3, r2]
    6ece:	079b      	lsls	r3, r3, #30
    6ed0:	0f9b      	lsrs	r3, r3, #30
    6ed2:	2b01      	cmp	r3, #1
    6ed4:	d100      	bne.n	6ed8 <USB_Handler+0xac>
    6ed6:	e081      	b.n	6fdc <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6ed8:	0142      	lsls	r2, r0, #5
    6eda:	4b9f      	ldr	r3, [pc, #636]	; (7158 <USB_Handler+0x32c>)
    6edc:	189b      	adds	r3, r3, r2
    6ede:	685a      	ldr	r2, [r3, #4]
    6ee0:	0112      	lsls	r2, r2, #4
    6ee2:	0c92      	lsrs	r2, r2, #18
    6ee4:	b290      	uxth	r0, r2
    6ee6:	499b      	ldr	r1, [pc, #620]	; (7154 <USB_Handler+0x328>)
    6ee8:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6eea:	685a      	ldr	r2, [r3, #4]
    6eec:	0492      	lsls	r2, r2, #18
    6eee:	0c92      	lsrs	r2, r2, #18
    6ef0:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6ef2:	685a      	ldr	r2, [r3, #4]
    6ef4:	4999      	ldr	r1, [pc, #612]	; (715c <USB_Handler+0x330>)
    6ef6:	400a      	ands	r2, r1
    6ef8:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    6efa:	2800      	cmp	r0, #0
    6efc:	d107      	bne.n	6f0e <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6efe:	0162      	lsls	r2, r4, #5
    6f00:	4b95      	ldr	r3, [pc, #596]	; (7158 <USB_Handler+0x32c>)
    6f02:	189b      	adds	r3, r3, r2
    6f04:	685b      	ldr	r3, [r3, #4]
    6f06:	049b      	lsls	r3, r3, #18
    6f08:	0c9b      	lsrs	r3, r3, #18
    6f0a:	4a92      	ldr	r2, [pc, #584]	; (7154 <USB_Handler+0x328>)
    6f0c:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    6f0e:	4b8d      	ldr	r3, [pc, #564]	; (7144 <USB_Handler+0x318>)
    6f10:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    6f12:	1ca3      	adds	r3, r4, #2
    6f14:	011b      	lsls	r3, r3, #4
    6f16:	18c3      	adds	r3, r0, r3
    6f18:	685b      	ldr	r3, [r3, #4]
    6f1a:	498e      	ldr	r1, [pc, #568]	; (7154 <USB_Handler+0x328>)
    6f1c:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    6f1e:	076b      	lsls	r3, r5, #29
    6f20:	d50e      	bpl.n	6f40 <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f22:	4a8b      	ldr	r2, [pc, #556]	; (7150 <USB_Handler+0x324>)
    6f24:	2301      	movs	r3, #1
    6f26:	40a3      	lsls	r3, r4
    6f28:	6811      	ldr	r1, [r2, #0]
    6f2a:	4399      	bics	r1, r3
    6f2c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6f2e:	4b85      	ldr	r3, [pc, #532]	; (7144 <USB_Handler+0x318>)
    6f30:	681b      	ldr	r3, [r3, #0]
    6f32:	681b      	ldr	r3, [r3, #0]
    6f34:	0022      	movs	r2, r4
    6f36:	3208      	adds	r2, #8
    6f38:	0152      	lsls	r2, r2, #5
    6f3a:	189b      	adds	r3, r3, r2
    6f3c:	2204      	movs	r2, #4
    6f3e:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    6f40:	072b      	lsls	r3, r5, #28
    6f42:	d514      	bpl.n	6f6e <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f44:	4a82      	ldr	r2, [pc, #520]	; (7150 <USB_Handler+0x324>)
    6f46:	2301      	movs	r3, #1
    6f48:	40a3      	lsls	r3, r4
    6f4a:	6811      	ldr	r1, [r2, #0]
    6f4c:	4399      	bics	r1, r3
    6f4e:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6f50:	4b7c      	ldr	r3, [pc, #496]	; (7144 <USB_Handler+0x318>)
    6f52:	6818      	ldr	r0, [r3, #0]
    6f54:	0023      	movs	r3, r4
    6f56:	3308      	adds	r3, #8
    6f58:	015b      	lsls	r3, r3, #5
    6f5a:	6802      	ldr	r2, [r0, #0]
    6f5c:	4694      	mov	ip, r2
    6f5e:	4463      	add	r3, ip
    6f60:	2208      	movs	r2, #8
    6f62:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6f64:	1903      	adds	r3, r0, r4
    6f66:	33ae      	adds	r3, #174	; 0xae
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	079b      	lsls	r3, r3, #30
    6f6c:	d447      	bmi.n	6ffe <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6f6e:	06eb      	lsls	r3, r5, #27
    6f70:	d514      	bpl.n	6f9c <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6f72:	4a77      	ldr	r2, [pc, #476]	; (7150 <USB_Handler+0x324>)
    6f74:	2301      	movs	r3, #1
    6f76:	40a3      	lsls	r3, r4
    6f78:	6811      	ldr	r1, [r2, #0]
    6f7a:	4399      	bics	r1, r3
    6f7c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6f7e:	4b71      	ldr	r3, [pc, #452]	; (7144 <USB_Handler+0x318>)
    6f80:	6818      	ldr	r0, [r3, #0]
    6f82:	0023      	movs	r3, r4
    6f84:	3308      	adds	r3, #8
    6f86:	015b      	lsls	r3, r3, #5
    6f88:	6802      	ldr	r2, [r0, #0]
    6f8a:	4694      	mov	ip, r2
    6f8c:	4463      	add	r3, ip
    6f8e:	2210      	movs	r2, #16
    6f90:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6f92:	1903      	adds	r3, r0, r4
    6f94:	33ae      	adds	r3, #174	; 0xae
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	075b      	lsls	r3, r3, #29
    6f9a:	d43e      	bmi.n	701a <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6f9c:	06ab      	lsls	r3, r5, #26
    6f9e:	d400      	bmi.n	6fa2 <USB_Handler+0x176>
    6fa0:	e0b0      	b.n	7104 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6fa2:	4a6b      	ldr	r2, [pc, #428]	; (7150 <USB_Handler+0x324>)
    6fa4:	2301      	movs	r3, #1
    6fa6:	40a3      	lsls	r3, r4
    6fa8:	6811      	ldr	r1, [r2, #0]
    6faa:	4399      	bics	r1, r3
    6fac:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6fae:	4b65      	ldr	r3, [pc, #404]	; (7144 <USB_Handler+0x318>)
    6fb0:	6818      	ldr	r0, [r3, #0]
    6fb2:	0023      	movs	r3, r4
    6fb4:	3308      	adds	r3, #8
    6fb6:	015b      	lsls	r3, r3, #5
    6fb8:	6802      	ldr	r2, [r0, #0]
    6fba:	4694      	mov	ip, r2
    6fbc:	4463      	add	r3, ip
    6fbe:	2220      	movs	r2, #32
    6fc0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6fc2:	1903      	adds	r3, r0, r4
    6fc4:	33ae      	adds	r3, #174	; 0xae
    6fc6:	781b      	ldrb	r3, [r3, #0]
    6fc8:	071b      	lsls	r3, r3, #28
    6fca:	d400      	bmi.n	6fce <USB_Handler+0x1a2>
    6fcc:	e09a      	b.n	7104 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    6fce:	4961      	ldr	r1, [pc, #388]	; (7154 <USB_Handler+0x328>)
    6fd0:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6fd2:	0124      	lsls	r4, r4, #4
    6fd4:	1904      	adds	r4, r0, r4
    6fd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6fd8:	4798      	blx	r3
    6fda:	e093      	b.n	7104 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6fdc:	0142      	lsls	r2, r0, #5
    6fde:	4b5e      	ldr	r3, [pc, #376]	; (7158 <USB_Handler+0x32c>)
    6fe0:	189b      	adds	r3, r3, r2
    6fe2:	685a      	ldr	r2, [r3, #4]
    6fe4:	0492      	lsls	r2, r2, #18
    6fe6:	0c92      	lsrs	r2, r2, #18
    6fe8:	495a      	ldr	r1, [pc, #360]	; (7154 <USB_Handler+0x328>)
    6fea:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6fec:	685a      	ldr	r2, [r3, #4]
    6fee:	0112      	lsls	r2, r2, #4
    6ff0:	0c92      	lsrs	r2, r2, #18
    6ff2:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6ff4:	685a      	ldr	r2, [r3, #4]
    6ff6:	0b92      	lsrs	r2, r2, #14
    6ff8:	0392      	lsls	r2, r2, #14
    6ffa:	605a      	str	r2, [r3, #4]
    6ffc:	e787      	b.n	6f0e <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    6ffe:	4955      	ldr	r1, [pc, #340]	; (7154 <USB_Handler+0x328>)
    7000:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    7002:	0162      	lsls	r2, r4, #5
    7004:	4b54      	ldr	r3, [pc, #336]	; (7158 <USB_Handler+0x32c>)
    7006:	189b      	adds	r3, r3, r2
    7008:	89db      	ldrh	r3, [r3, #14]
    700a:	221f      	movs	r2, #31
    700c:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    700e:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    7010:	0123      	lsls	r3, r4, #4
    7012:	18c3      	adds	r3, r0, r3
    7014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7016:	4798      	blx	r3
    7018:	e7a9      	b.n	6f6e <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    701a:	494e      	ldr	r1, [pc, #312]	; (7154 <USB_Handler+0x328>)
    701c:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    701e:	0162      	lsls	r2, r4, #5
    7020:	4b4d      	ldr	r3, [pc, #308]	; (7158 <USB_Handler+0x32c>)
    7022:	189b      	adds	r3, r3, r2
    7024:	685b      	ldr	r3, [r3, #4]
    7026:	011b      	lsls	r3, r3, #4
    7028:	0c9b      	lsrs	r3, r3, #18
    702a:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    702c:	0123      	lsls	r3, r4, #4
    702e:	18c3      	adds	r3, r0, r3
    7030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7032:	2100      	movs	r1, #0
    7034:	4798      	blx	r3
    7036:	e7b1      	b.n	6f9c <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    7038:	8bac      	ldrh	r4, [r5, #28]
    703a:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    703c:	0763      	lsls	r3, r4, #29
    703e:	d505      	bpl.n	704c <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    7040:	2304      	movs	r3, #4
    7042:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    7044:	33a1      	adds	r3, #161	; 0xa1
    7046:	5cfb      	ldrb	r3, [r7, r3]
    7048:	07db      	lsls	r3, r3, #31
    704a:	d462      	bmi.n	7112 <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    704c:	0723      	lsls	r3, r4, #28
    704e:	d50b      	bpl.n	7068 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    7050:	2200      	movs	r2, #0
    7052:	4b3f      	ldr	r3, [pc, #252]	; (7150 <USB_Handler+0x324>)
    7054:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    7056:	4b3b      	ldr	r3, [pc, #236]	; (7144 <USB_Handler+0x318>)
    7058:	6818      	ldr	r0, [r3, #0]
    705a:	2308      	movs	r3, #8
    705c:	6802      	ldr	r2, [r0, #0]
    705e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    7060:	339d      	adds	r3, #157	; 0x9d
    7062:	5cc3      	ldrb	r3, [r0, r3]
    7064:	079b      	lsls	r3, r3, #30
    7066:	d458      	bmi.n	711a <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    7068:	0663      	lsls	r3, r4, #25
    706a:	d508      	bpl.n	707e <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    706c:	4b35      	ldr	r3, [pc, #212]	; (7144 <USB_Handler+0x318>)
    706e:	6818      	ldr	r0, [r3, #0]
    7070:	2340      	movs	r3, #64	; 0x40
    7072:	6802      	ldr	r2, [r0, #0]
    7074:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    7076:	3365      	adds	r3, #101	; 0x65
    7078:	5cc3      	ldrb	r3, [r0, r3]
    707a:	06db      	lsls	r3, r3, #27
    707c:	d450      	bmi.n	7120 <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    707e:	06a3      	lsls	r3, r4, #26
    7080:	d508      	bpl.n	7094 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    7082:	4b30      	ldr	r3, [pc, #192]	; (7144 <USB_Handler+0x318>)
    7084:	6818      	ldr	r0, [r3, #0]
    7086:	2320      	movs	r3, #32
    7088:	6802      	ldr	r2, [r0, #0]
    708a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    708c:	3385      	adds	r3, #133	; 0x85
    708e:	5cc3      	ldrb	r3, [r0, r3]
    7090:	071b      	lsls	r3, r3, #28
    7092:	d448      	bmi.n	7126 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    7094:	06e3      	lsls	r3, r4, #27
    7096:	d508      	bpl.n	70aa <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    7098:	4b2a      	ldr	r3, [pc, #168]	; (7144 <USB_Handler+0x318>)
    709a:	6818      	ldr	r0, [r3, #0]
    709c:	2310      	movs	r3, #16
    709e:	6802      	ldr	r2, [r0, #0]
    70a0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    70a2:	3395      	adds	r3, #149	; 0x95
    70a4:	5cc3      	ldrb	r3, [r0, r3]
    70a6:	075b      	lsls	r3, r3, #29
    70a8:	d440      	bmi.n	712c <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    70aa:	0623      	lsls	r3, r4, #24
    70ac:	d50b      	bpl.n	70c6 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    70ae:	2200      	movs	r2, #0
    70b0:	4b27      	ldr	r3, [pc, #156]	; (7150 <USB_Handler+0x324>)
    70b2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    70b4:	4b23      	ldr	r3, [pc, #140]	; (7144 <USB_Handler+0x318>)
    70b6:	6818      	ldr	r0, [r3, #0]
    70b8:	2380      	movs	r3, #128	; 0x80
    70ba:	6802      	ldr	r2, [r0, #0]
    70bc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    70be:	3325      	adds	r3, #37	; 0x25
    70c0:	5cc3      	ldrb	r3, [r0, r3]
    70c2:	069b      	lsls	r3, r3, #26
    70c4:	d435      	bmi.n	7132 <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    70c6:	05e3      	lsls	r3, r4, #23
    70c8:	d50c      	bpl.n	70e4 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    70ca:	2200      	movs	r2, #0
    70cc:	4b20      	ldr	r3, [pc, #128]	; (7150 <USB_Handler+0x324>)
    70ce:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    70d0:	4b1c      	ldr	r3, [pc, #112]	; (7144 <USB_Handler+0x318>)
    70d2:	6818      	ldr	r0, [r3, #0]
    70d4:	2380      	movs	r3, #128	; 0x80
    70d6:	005b      	lsls	r3, r3, #1
    70d8:	6802      	ldr	r2, [r0, #0]
    70da:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    70dc:	3b5b      	subs	r3, #91	; 0x5b
    70de:	5cc3      	ldrb	r3, [r0, r3]
    70e0:	065b      	lsls	r3, r3, #25
    70e2:	d429      	bmi.n	7138 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    70e4:	05a3      	lsls	r3, r4, #22
    70e6:	d50d      	bpl.n	7104 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    70e8:	2200      	movs	r2, #0
    70ea:	4b19      	ldr	r3, [pc, #100]	; (7150 <USB_Handler+0x324>)
    70ec:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    70ee:	4b15      	ldr	r3, [pc, #84]	; (7144 <USB_Handler+0x318>)
    70f0:	6818      	ldr	r0, [r3, #0]
    70f2:	2380      	movs	r3, #128	; 0x80
    70f4:	009b      	lsls	r3, r3, #2
    70f6:	6802      	ldr	r2, [r0, #0]
    70f8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    70fa:	3b5c      	subs	r3, #92	; 0x5c
    70fc:	3bff      	subs	r3, #255	; 0xff
    70fe:	5cc3      	ldrb	r3, [r0, r3]
    7100:	2b7f      	cmp	r3, #127	; 0x7f
    7102:	d81c      	bhi.n	713e <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    7104:	b003      	add	sp, #12
    7106:	bc3c      	pop	{r2, r3, r4, r5}
    7108:	4690      	mov	r8, r2
    710a:	4699      	mov	r9, r3
    710c:	46a2      	mov	sl, r4
    710e:	46ab      	mov	fp, r5
    7110:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	0038      	movs	r0, r7
    7116:	4798      	blx	r3
    7118:	e798      	b.n	704c <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    711a:	6883      	ldr	r3, [r0, #8]
    711c:	4798      	blx	r3
    711e:	e7a3      	b.n	7068 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    7120:	6943      	ldr	r3, [r0, #20]
    7122:	4798      	blx	r3
    7124:	e7ab      	b.n	707e <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    7126:	6903      	ldr	r3, [r0, #16]
    7128:	4798      	blx	r3
    712a:	e7b3      	b.n	7094 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    712c:	68c3      	ldr	r3, [r0, #12]
    712e:	4798      	blx	r3
    7130:	e7bb      	b.n	70aa <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    7132:	6983      	ldr	r3, [r0, #24]
    7134:	4798      	blx	r3
    7136:	e7c6      	b.n	70c6 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    7138:	69c3      	ldr	r3, [r0, #28]
    713a:	4798      	blx	r3
    713c:	e7d2      	b.n	70e4 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    713e:	6a03      	ldr	r3, [r0, #32]
    7140:	4798      	blx	r3
    7142:	e7df      	b.n	7104 <USB_Handler+0x2d8>
    7144:	200002dc 	.word	0x200002dc
    7148:	0000ada4 	.word	0x0000ada4
    714c:	000091fd 	.word	0x000091fd
    7150:	200002ec 	.word	0x200002ec
    7154:	200002f0 	.word	0x200002f0
    7158:	20000d40 	.word	0x20000d40
    715c:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    7160:	0023      	movs	r3, r4
    7162:	332e      	adds	r3, #46	; 0x2e
    7164:	009b      	lsls	r3, r3, #2
    7166:	4642      	mov	r2, r8
    7168:	6812      	ldr	r2, [r2, #0]
    716a:	589b      	ldr	r3, [r3, r2]
    716c:	499e      	ldr	r1, [pc, #632]	; (73e8 <USB_Handler+0x5bc>)
    716e:	4642      	mov	r2, r8
    7170:	6810      	ldr	r0, [r2, #0]
    7172:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    7174:	3401      	adds	r4, #1
    7176:	2c07      	cmp	r4, #7
    7178:	d0c4      	beq.n	7104 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    717a:	0063      	lsls	r3, r4, #1
    717c:	5bdb      	ldrh	r3, [r3, r7]
    717e:	4233      	tst	r3, r6
    7180:	d003      	beq.n	718a <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    7182:	464a      	mov	r2, r9
    7184:	6812      	ldr	r2, [r2, #0]
    7186:	6812      	ldr	r2, [r2, #0]
    7188:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    718a:	422b      	tst	r3, r5
    718c:	d0f2      	beq.n	7174 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    718e:	2c06      	cmp	r4, #6
    7190:	d1e6      	bne.n	7160 <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    7192:	4b96      	ldr	r3, [pc, #600]	; (73ec <USB_Handler+0x5c0>)
    7194:	891b      	ldrh	r3, [r3, #8]
    7196:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    7198:	2280      	movs	r2, #128	; 0x80
    719a:	0052      	lsls	r2, r2, #1
    719c:	4013      	ands	r3, r2
    719e:	4a92      	ldr	r2, [pc, #584]	; (73e8 <USB_Handler+0x5bc>)
    71a0:	6013      	str	r3, [r2, #0]
    71a2:	e7dd      	b.n	7160 <USB_Handler+0x334>
    71a4:	003c      	movs	r4, r7
    71a6:	3459      	adds	r4, #89	; 0x59
    71a8:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    71aa:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    71ac:	2201      	movs	r2, #1
    71ae:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    71b0:	325f      	adds	r2, #95	; 0x5f
    71b2:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    71b4:	3a50      	subs	r2, #80	; 0x50
    71b6:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    71b8:	3a0d      	subs	r2, #13
    71ba:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    71bc:	46b8      	mov	r8, r7
    71be:	002f      	movs	r7, r5
    71c0:	e0b9      	b.n	7336 <USB_Handler+0x50a>
    71c2:	002a      	movs	r2, r5
    71c4:	003d      	movs	r5, r7
    71c6:	4647      	mov	r7, r8
    71c8:	4690      	mov	r8, r2
    71ca:	015b      	lsls	r3, r3, #5
    71cc:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    71ce:	2308      	movs	r3, #8
    71d0:	33ff      	adds	r3, #255	; 0xff
    71d2:	5ceb      	ldrb	r3, [r5, r3]
    71d4:	065b      	lsls	r3, r3, #25
    71d6:	d516      	bpl.n	7206 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    71d8:	2240      	movs	r2, #64	; 0x40
    71da:	2308      	movs	r3, #8
    71dc:	33ff      	adds	r3, #255	; 0xff
    71de:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    71e0:	3b88      	subs	r3, #136	; 0x88
    71e2:	3bff      	subs	r3, #255	; 0xff
    71e4:	4642      	mov	r2, r8
    71e6:	4313      	orrs	r3, r2
    71e8:	4a81      	ldr	r2, [pc, #516]	; (73f0 <USB_Handler+0x5c4>)
    71ea:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    71ec:	2360      	movs	r3, #96	; 0x60
    71ee:	420b      	tst	r3, r1
    71f0:	d100      	bne.n	71f4 <USB_Handler+0x3c8>
    71f2:	e787      	b.n	7104 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    71f4:	9b01      	ldr	r3, [sp, #4]
    71f6:	011b      	lsls	r3, r3, #4
    71f8:	18fb      	adds	r3, r7, r3
    71fa:	33e0      	adds	r3, #224	; 0xe0
    71fc:	681b      	ldr	r3, [r3, #0]
    71fe:	497c      	ldr	r1, [pc, #496]	; (73f0 <USB_Handler+0x5c4>)
    7200:	0038      	movs	r0, r7
    7202:	4798      	blx	r3
    7204:	e77e      	b.n	7104 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    7206:	2308      	movs	r3, #8
    7208:	33ff      	adds	r3, #255	; 0xff
    720a:	5ceb      	ldrb	r3, [r5, r3]
    720c:	069b      	lsls	r3, r3, #26
    720e:	d5ed      	bpl.n	71ec <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    7210:	2220      	movs	r2, #32
    7212:	2308      	movs	r3, #8
    7214:	33ff      	adds	r3, #255	; 0xff
    7216:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7218:	4b75      	ldr	r3, [pc, #468]	; (73f0 <USB_Handler+0x5c4>)
    721a:	4642      	mov	r2, r8
    721c:	719a      	strb	r2, [r3, #6]
    721e:	e7e5      	b.n	71ec <USB_Handler+0x3c0>
    7220:	003d      	movs	r5, r7
    7222:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    7224:	9a01      	ldr	r2, [sp, #4]
    7226:	0013      	movs	r3, r2
    7228:	3308      	adds	r3, #8
    722a:	015b      	lsls	r3, r3, #5
    722c:	18ed      	adds	r5, r5, r3
    722e:	2310      	movs	r3, #16
    7230:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    7232:	18bb      	adds	r3, r7, r2
    7234:	3361      	adds	r3, #97	; 0x61
    7236:	33ff      	adds	r3, #255	; 0xff
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	06db      	lsls	r3, r3, #27
    723c:	d400      	bmi.n	7240 <USB_Handler+0x414>
    723e:	e761      	b.n	7104 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    7240:	0010      	movs	r0, r2
    7242:	0152      	lsls	r2, r2, #5
    7244:	4b69      	ldr	r3, [pc, #420]	; (73ec <USB_Handler+0x5c0>)
    7246:	189b      	adds	r3, r3, r2
    7248:	685b      	ldr	r3, [r3, #4]
    724a:	049b      	lsls	r3, r3, #18
    724c:	0c9b      	lsrs	r3, r3, #18
    724e:	4968      	ldr	r1, [pc, #416]	; (73f0 <USB_Handler+0x5c4>)
    7250:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    7252:	0103      	lsls	r3, r0, #4
    7254:	18fb      	adds	r3, r7, r3
    7256:	33dc      	adds	r3, #220	; 0xdc
    7258:	681b      	ldr	r3, [r3, #0]
    725a:	4640      	mov	r0, r8
    725c:	4798      	blx	r3
    725e:	e751      	b.n	7104 <USB_Handler+0x2d8>
    7260:	002a      	movs	r2, r5
    7262:	003d      	movs	r5, r7
    7264:	4647      	mov	r7, r8
    7266:	4690      	mov	r8, r2
    7268:	015b      	lsls	r3, r3, #5
    726a:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    726c:	2308      	movs	r3, #8
    726e:	33ff      	adds	r3, #255	; 0xff
    7270:	5ceb      	ldrb	r3, [r5, r3]
    7272:	079b      	lsls	r3, r3, #30
    7274:	d51e      	bpl.n	72b4 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    7276:	2202      	movs	r2, #2
    7278:	2308      	movs	r3, #8
    727a:	33ff      	adds	r3, #255	; 0xff
    727c:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    727e:	485c      	ldr	r0, [pc, #368]	; (73f0 <USB_Handler+0x5c4>)
    7280:	3b88      	subs	r3, #136	; 0x88
    7282:	3bff      	subs	r3, #255	; 0xff
    7284:	4642      	mov	r2, r8
    7286:	4313      	orrs	r3, r2
    7288:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    728a:	9b01      	ldr	r3, [sp, #4]
    728c:	015a      	lsls	r2, r3, #5
    728e:	4b57      	ldr	r3, [pc, #348]	; (73ec <USB_Handler+0x5c0>)
    7290:	189b      	adds	r3, r3, r2
    7292:	3310      	adds	r3, #16
    7294:	685b      	ldr	r3, [r3, #4]
    7296:	049b      	lsls	r3, r3, #18
    7298:	0c9b      	lsrs	r3, r3, #18
    729a:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    729c:	078b      	lsls	r3, r1, #30
    729e:	d100      	bne.n	72a2 <USB_Handler+0x476>
    72a0:	e730      	b.n	7104 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    72a2:	9b01      	ldr	r3, [sp, #4]
    72a4:	330d      	adds	r3, #13
    72a6:	011b      	lsls	r3, r3, #4
    72a8:	18fb      	adds	r3, r7, r3
    72aa:	685b      	ldr	r3, [r3, #4]
    72ac:	4950      	ldr	r1, [pc, #320]	; (73f0 <USB_Handler+0x5c4>)
    72ae:	0038      	movs	r0, r7
    72b0:	4798      	blx	r3
    72b2:	e727      	b.n	7104 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    72b4:	2308      	movs	r3, #8
    72b6:	33ff      	adds	r3, #255	; 0xff
    72b8:	5ceb      	ldrb	r3, [r5, r3]
    72ba:	07db      	lsls	r3, r3, #31
    72bc:	d5ee      	bpl.n	729c <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    72be:	2201      	movs	r2, #1
    72c0:	2308      	movs	r3, #8
    72c2:	33ff      	adds	r3, #255	; 0xff
    72c4:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    72c6:	484a      	ldr	r0, [pc, #296]	; (73f0 <USB_Handler+0x5c4>)
    72c8:	4643      	mov	r3, r8
    72ca:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    72cc:	9b01      	ldr	r3, [sp, #4]
    72ce:	015b      	lsls	r3, r3, #5
    72d0:	4a46      	ldr	r2, [pc, #280]	; (73ec <USB_Handler+0x5c0>)
    72d2:	18d2      	adds	r2, r2, r3
    72d4:	6853      	ldr	r3, [r2, #4]
    72d6:	049b      	lsls	r3, r3, #18
    72d8:	0c9b      	lsrs	r3, r3, #18
    72da:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    72dc:	6853      	ldr	r3, [r2, #4]
    72de:	011b      	lsls	r3, r3, #4
    72e0:	0c9b      	lsrs	r3, r3, #18
    72e2:	8083      	strh	r3, [r0, #4]
    72e4:	e7da      	b.n	729c <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    72e6:	2208      	movs	r2, #8
    72e8:	32ff      	adds	r2, #255	; 0xff
    72ea:	5c9a      	ldrb	r2, [r3, r2]
    72ec:	0752      	lsls	r2, r2, #29
    72ee:	d56e      	bpl.n	73ce <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    72f0:	2004      	movs	r0, #4
    72f2:	2208      	movs	r2, #8
    72f4:	32ff      	adds	r2, #255	; 0xff
    72f6:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    72f8:	9801      	ldr	r0, [sp, #4]
    72fa:	0142      	lsls	r2, r0, #5
    72fc:	4b3b      	ldr	r3, [pc, #236]	; (73ec <USB_Handler+0x5c0>)
    72fe:	189b      	adds	r3, r3, r2
    7300:	7a9b      	ldrb	r3, [r3, #10]
    7302:	079b      	lsls	r3, r3, #30
    7304:	d505      	bpl.n	7312 <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    7306:	4b39      	ldr	r3, [pc, #228]	; (73ec <USB_Handler+0x5c0>)
    7308:	189b      	adds	r3, r3, r2
    730a:	7a9a      	ldrb	r2, [r3, #10]
    730c:	2002      	movs	r0, #2
    730e:	4382      	bics	r2, r0
    7310:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    7312:	4b37      	ldr	r3, [pc, #220]	; (73f0 <USB_Handler+0x5c4>)
    7314:	4642      	mov	r2, r8
    7316:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    7318:	9b01      	ldr	r3, [sp, #4]
    731a:	3308      	adds	r3, #8
    731c:	015b      	lsls	r3, r3, #5
    731e:	683a      	ldr	r2, [r7, #0]
    7320:	4694      	mov	ip, r2
    7322:	4463      	add	r3, ip
    7324:	79db      	ldrb	r3, [r3, #7]
    7326:	07db      	lsls	r3, r3, #31
    7328:	d551      	bpl.n	73ce <USB_Handler+0x5a2>
    732a:	e6eb      	b.n	7104 <USB_Handler+0x2d8>
    732c:	3301      	adds	r3, #1
    732e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    7330:	2b08      	cmp	r3, #8
    7332:	d100      	bne.n	7336 <USB_Handler+0x50a>
    7334:	e6e6      	b.n	7104 <USB_Handler+0x2d8>
    7336:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    7338:	9301      	str	r3, [sp, #4]
    733a:	0032      	movs	r2, r6
    733c:	411a      	asrs	r2, r3
    733e:	4661      	mov	r1, ip
    7340:	4211      	tst	r1, r2
    7342:	d0f3      	beq.n	732c <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    7344:	001a      	movs	r2, r3
    7346:	3208      	adds	r2, #8
    7348:	0152      	lsls	r2, r2, #5
    734a:	18ba      	adds	r2, r7, r2
    734c:	79d2      	ldrb	r2, [r2, #7]
    734e:	b2d2      	uxtb	r2, r2
    7350:	7a21      	ldrb	r1, [r4, #8]
    7352:	4011      	ands	r1, r2
    7354:	7820      	ldrb	r0, [r4, #0]
    7356:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    7358:	4648      	mov	r0, r9
    735a:	4210      	tst	r0, r2
    735c:	d000      	beq.n	7360 <USB_Handler+0x534>
    735e:	e730      	b.n	71c2 <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    7360:	4650      	mov	r0, sl
    7362:	4210      	tst	r0, r2
    7364:	d000      	beq.n	7368 <USB_Handler+0x53c>
    7366:	e75b      	b.n	7220 <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    7368:	4658      	mov	r0, fp
    736a:	4210      	tst	r0, r2
    736c:	d000      	beq.n	7370 <USB_Handler+0x544>
    736e:	e777      	b.n	7260 <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    7370:	200c      	movs	r0, #12
    7372:	4210      	tst	r0, r2
    7374:	d0da      	beq.n	732c <USB_Handler+0x500>
    7376:	002a      	movs	r2, r5
    7378:	003d      	movs	r5, r7
    737a:	4647      	mov	r7, r8
    737c:	4690      	mov	r8, r2
    737e:	015b      	lsls	r3, r3, #5
    7380:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    7382:	2208      	movs	r2, #8
    7384:	32ff      	adds	r2, #255	; 0xff
    7386:	5c9a      	ldrb	r2, [r3, r2]
    7388:	0712      	lsls	r2, r2, #28
    738a:	d5ac      	bpl.n	72e6 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    738c:	3804      	subs	r0, #4
    738e:	2208      	movs	r2, #8
    7390:	32ff      	adds	r2, #255	; 0xff
    7392:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    7394:	9801      	ldr	r0, [sp, #4]
    7396:	0142      	lsls	r2, r0, #5
    7398:	4b14      	ldr	r3, [pc, #80]	; (73ec <USB_Handler+0x5c0>)
    739a:	189b      	adds	r3, r3, r2
    739c:	7e9b      	ldrb	r3, [r3, #26]
    739e:	079b      	lsls	r3, r3, #30
    73a0:	d505      	bpl.n	73ae <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    73a2:	4b12      	ldr	r3, [pc, #72]	; (73ec <USB_Handler+0x5c0>)
    73a4:	189b      	adds	r3, r3, r2
    73a6:	7e9a      	ldrb	r2, [r3, #26]
    73a8:	2002      	movs	r0, #2
    73aa:	4382      	bics	r2, r0
    73ac:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    73ae:	2380      	movs	r3, #128	; 0x80
    73b0:	425b      	negs	r3, r3
    73b2:	4642      	mov	r2, r8
    73b4:	4313      	orrs	r3, r2
    73b6:	4a0e      	ldr	r2, [pc, #56]	; (73f0 <USB_Handler+0x5c4>)
    73b8:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    73ba:	9b01      	ldr	r3, [sp, #4]
    73bc:	3308      	adds	r3, #8
    73be:	015b      	lsls	r3, r3, #5
    73c0:	683a      	ldr	r2, [r7, #0]
    73c2:	4694      	mov	ip, r2
    73c4:	4463      	add	r3, ip
    73c6:	79db      	ldrb	r3, [r3, #7]
    73c8:	079b      	lsls	r3, r3, #30
    73ca:	d500      	bpl.n	73ce <USB_Handler+0x5a2>
    73cc:	e69a      	b.n	7104 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    73ce:	230c      	movs	r3, #12
    73d0:	420b      	tst	r3, r1
    73d2:	d100      	bne.n	73d6 <USB_Handler+0x5aa>
    73d4:	e696      	b.n	7104 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    73d6:	9b01      	ldr	r3, [sp, #4]
    73d8:	011b      	lsls	r3, r3, #4
    73da:	18fb      	adds	r3, r7, r3
    73dc:	33d8      	adds	r3, #216	; 0xd8
    73de:	681b      	ldr	r3, [r3, #0]
    73e0:	4903      	ldr	r1, [pc, #12]	; (73f0 <USB_Handler+0x5c4>)
    73e2:	0038      	movs	r0, r7
    73e4:	4798      	blx	r3
    73e6:	e68d      	b.n	7104 <USB_Handler+0x2d8>
    73e8:	200002e0 	.word	0x200002e0
    73ec:	20000d40 	.word	0x20000d40
    73f0:	200002e4 	.word	0x200002e4

000073f4 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    73f4:	2200      	movs	r2, #0
    73f6:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    73f8:	2301      	movs	r3, #1
    73fa:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    73fc:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    73fe:	70c3      	strb	r3, [r0, #3]
}
    7400:	4770      	bx	lr
	...

00007404 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    7404:	b5f0      	push	{r4, r5, r6, r7, lr}
    7406:	46ce      	mov	lr, r9
    7408:	4647      	mov	r7, r8
    740a:	b580      	push	{r7, lr}
    740c:	b083      	sub	sp, #12
    740e:	0004      	movs	r4, r0
    7410:	000d      	movs	r5, r1
    7412:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    7414:	2300      	movs	r3, #0
    7416:	4a6e      	ldr	r2, [pc, #440]	; (75d0 <usb_init+0x1cc>)
    7418:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    741a:	4a6e      	ldr	r2, [pc, #440]	; (75d4 <usb_init+0x1d0>)
    741c:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    741e:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    7420:	496d      	ldr	r1, [pc, #436]	; (75d8 <usb_init+0x1d4>)
    7422:	69ca      	ldr	r2, [r1, #28]
    7424:	2020      	movs	r0, #32
    7426:	4302      	orrs	r2, r0
    7428:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    742a:	af01      	add	r7, sp, #4
    742c:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    742e:	2201      	movs	r2, #1
    7430:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    7432:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    7434:	3306      	adds	r3, #6
    7436:	4699      	mov	r9, r3
    7438:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    743a:	0039      	movs	r1, r7
    743c:	3808      	subs	r0, #8
    743e:	4b67      	ldr	r3, [pc, #412]	; (75dc <usb_init+0x1d8>)
    7440:	4698      	mov	r8, r3
    7442:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    7444:	464b      	mov	r3, r9
    7446:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    7448:	0039      	movs	r1, r7
    744a:	2019      	movs	r0, #25
    744c:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    744e:	78b3      	ldrb	r3, [r6, #2]
    7450:	466a      	mov	r2, sp
    7452:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    7454:	4669      	mov	r1, sp
    7456:	2006      	movs	r0, #6
    7458:	4b61      	ldr	r3, [pc, #388]	; (75e0 <usb_init+0x1dc>)
    745a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    745c:	2006      	movs	r0, #6
    745e:	4b61      	ldr	r3, [pc, #388]	; (75e4 <usb_init+0x1e0>)
    7460:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    7462:	782b      	ldrb	r3, [r5, #0]
    7464:	2201      	movs	r2, #1
    7466:	4313      	orrs	r3, r2
    7468:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    746a:	78ab      	ldrb	r3, [r5, #2]
    746c:	07db      	lsls	r3, r3, #31
    746e:	d4fc      	bmi.n	746a <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7470:	4a5d      	ldr	r2, [pc, #372]	; (75e8 <usb_init+0x1e4>)
    7472:	78d3      	ldrb	r3, [r2, #3]
    7474:	2103      	movs	r1, #3
    7476:	438b      	bics	r3, r1
    7478:	2102      	movs	r1, #2
    747a:	430b      	orrs	r3, r1
    747c:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    747e:	78d3      	ldrb	r3, [r2, #3]
    7480:	210c      	movs	r1, #12
    7482:	438b      	bics	r3, r1
    7484:	2108      	movs	r1, #8
    7486:	430b      	orrs	r3, r1
    7488:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    748a:	4b58      	ldr	r3, [pc, #352]	; (75ec <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    748c:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    748e:	039b      	lsls	r3, r3, #14
    7490:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    7492:	2b1f      	cmp	r3, #31
    7494:	d100      	bne.n	7498 <usb_init+0x94>
    7496:	e08f      	b.n	75b8 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    7498:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    749a:	019b      	lsls	r3, r3, #6
    749c:	4954      	ldr	r1, [pc, #336]	; (75f0 <usb_init+0x1ec>)
    749e:	400a      	ands	r2, r1
    74a0:	4313      	orrs	r3, r2
    74a2:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    74a4:	4b51      	ldr	r3, [pc, #324]	; (75ec <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    74a6:	681b      	ldr	r3, [r3, #0]
    74a8:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    74aa:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    74ac:	2b1f      	cmp	r3, #31
    74ae:	d100      	bne.n	74b2 <usb_init+0xae>
    74b0:	e084      	b.n	75bc <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    74b2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    74b4:	211f      	movs	r1, #31
    74b6:	438a      	bics	r2, r1
    74b8:	4313      	orrs	r3, r2
    74ba:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    74bc:	4b4b      	ldr	r3, [pc, #300]	; (75ec <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    74be:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    74c0:	019b      	lsls	r3, r3, #6
    74c2:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    74c4:	2b07      	cmp	r3, #7
    74c6:	d100      	bne.n	74ca <usb_init+0xc6>
    74c8:	e07a      	b.n	75c0 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    74ca:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    74cc:	031b      	lsls	r3, r3, #12
    74ce:	4949      	ldr	r1, [pc, #292]	; (75f4 <usb_init+0x1f0>)
    74d0:	400a      	ands	r2, r1
    74d2:	4313      	orrs	r3, r2
    74d4:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    74d6:	7832      	ldrb	r2, [r6, #0]
    74d8:	7829      	ldrb	r1, [r5, #0]
    74da:	01d2      	lsls	r2, r2, #7
    74dc:	237f      	movs	r3, #127	; 0x7f
    74de:	400b      	ands	r3, r1
    74e0:	4313      	orrs	r3, r2
    74e2:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    74e4:	7871      	ldrb	r1, [r6, #1]
    74e6:	782b      	ldrb	r3, [r5, #0]
    74e8:	2201      	movs	r2, #1
    74ea:	400a      	ands	r2, r1
    74ec:	0092      	lsls	r2, r2, #2
    74ee:	2104      	movs	r1, #4
    74f0:	438b      	bics	r3, r1
    74f2:	4313      	orrs	r3, r2
    74f4:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    74f6:	4b40      	ldr	r3, [pc, #256]	; (75f8 <usb_init+0x1f4>)
    74f8:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    74fa:	78f3      	ldrb	r3, [r6, #3]
    74fc:	2b01      	cmp	r3, #1
    74fe:	d061      	beq.n	75c4 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    7500:	2b00      	cmp	r3, #0
    7502:	d106      	bne.n	7512 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    7504:	6822      	ldr	r2, [r4, #0]
    7506:	8913      	ldrh	r3, [r2, #8]
    7508:	210c      	movs	r1, #12
    750a:	438b      	bics	r3, r1
    750c:	2104      	movs	r1, #4
    750e:	430b      	orrs	r3, r1
    7510:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    7512:	2280      	movs	r2, #128	; 0x80
    7514:	0052      	lsls	r2, r2, #1
    7516:	2100      	movs	r1, #0
    7518:	4837      	ldr	r0, [pc, #220]	; (75f8 <usb_init+0x1f4>)
    751a:	4b38      	ldr	r3, [pc, #224]	; (75fc <usb_init+0x1f8>)
    751c:	4798      	blx	r3
    751e:	1d23      	adds	r3, r4, #4
    7520:	0021      	movs	r1, r4
    7522:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    7524:	2200      	movs	r2, #0
    7526:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    7528:	428b      	cmp	r3, r1
    752a:	d1fc      	bne.n	7526 <usb_init+0x122>
    752c:	0021      	movs	r1, r4
    752e:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    7530:	2200      	movs	r2, #0
    7532:	601a      	str	r2, [r3, #0]
    7534:	605a      	str	r2, [r3, #4]
    7536:	609a      	str	r2, [r3, #8]
    7538:	60da      	str	r2, [r3, #12]
    753a:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    753c:	428b      	cmp	r3, r1
    753e:	d1f8      	bne.n	7532 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    7540:	2300      	movs	r3, #0
    7542:	22a4      	movs	r2, #164	; 0xa4
    7544:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    7546:	3201      	adds	r2, #1
    7548:	54a3      	strb	r3, [r4, r2]
    754a:	0023      	movs	r3, r4
    754c:	33a6      	adds	r3, #166	; 0xa6
    754e:	0021      	movs	r1, r4
    7550:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    7552:	2200      	movs	r2, #0
    7554:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    7556:	721a      	strb	r2, [r3, #8]
    7558:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    755a:	4299      	cmp	r1, r3
    755c:	d1fa      	bne.n	7554 <usb_init+0x150>
    755e:	0023      	movs	r3, r4
    7560:	33b8      	adds	r3, #184	; 0xb8
    7562:	0021      	movs	r1, r4
    7564:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    7566:	2200      	movs	r2, #0
    7568:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    756a:	428b      	cmp	r3, r1
    756c:	d1fc      	bne.n	7568 <usb_init+0x164>
    756e:	0021      	movs	r1, r4
    7570:	3155      	adds	r1, #85	; 0x55
    7572:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    7574:	2200      	movs	r2, #0
    7576:	601a      	str	r2, [r3, #0]
    7578:	605a      	str	r2, [r3, #4]
    757a:	609a      	str	r2, [r3, #8]
    757c:	60da      	str	r2, [r3, #12]
    757e:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    7580:	428b      	cmp	r3, r1
    7582:	d1f8      	bne.n	7576 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    7584:	2300      	movs	r3, #0
    7586:	22aa      	movs	r2, #170	; 0xaa
    7588:	0052      	lsls	r2, r2, #1
    758a:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    758c:	3202      	adds	r2, #2
    758e:	52a3      	strh	r3, [r4, r2]
    7590:	0023      	movs	r3, r4
    7592:	3359      	adds	r3, #89	; 0x59
    7594:	33ff      	adds	r3, #255	; 0xff
    7596:	3461      	adds	r4, #97	; 0x61
    7598:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    759a:	2200      	movs	r2, #0
    759c:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    759e:	721a      	strb	r2, [r3, #8]
    75a0:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    75a2:	42a3      	cmp	r3, r4
    75a4:	d1fa      	bne.n	759c <usb_init+0x198>
    75a6:	2280      	movs	r2, #128	; 0x80
    75a8:	4b15      	ldr	r3, [pc, #84]	; (7600 <usb_init+0x1fc>)
    75aa:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    75ac:	2000      	movs	r0, #0
    75ae:	b003      	add	sp, #12
    75b0:	bc0c      	pop	{r2, r3}
    75b2:	4690      	mov	r8, r2
    75b4:	4699      	mov	r9, r3
    75b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    75b8:	3b1a      	subs	r3, #26
    75ba:	e76d      	b.n	7498 <usb_init+0x94>
		pad_transp = 29;
    75bc:	3b02      	subs	r3, #2
    75be:	e778      	b.n	74b2 <usb_init+0xae>
		pad_trim = 3;
    75c0:	3b04      	subs	r3, #4
    75c2:	e782      	b.n	74ca <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    75c4:	6822      	ldr	r2, [r4, #0]
    75c6:	8913      	ldrh	r3, [r2, #8]
    75c8:	3108      	adds	r1, #8
    75ca:	438b      	bics	r3, r1
    75cc:	8113      	strh	r3, [r2, #8]
    75ce:	e7a0      	b.n	7512 <usb_init+0x10e>
    75d0:	200002ec 	.word	0x200002ec
    75d4:	200002dc 	.word	0x200002dc
    75d8:	40000400 	.word	0x40000400
    75dc:	00008d51 	.word	0x00008d51
    75e0:	00008c59 	.word	0x00008c59
    75e4:	00008bcd 	.word	0x00008bcd
    75e8:	41005000 	.word	0x41005000
    75ec:	00806024 	.word	0x00806024
    75f0:	fffff83f 	.word	0xfffff83f
    75f4:	ffff8fff 	.word	0xffff8fff
    75f8:	20000d40 	.word	0x20000d40
    75fc:	000094c3 	.word	0x000094c3
    7600:	e000e100 	.word	0xe000e100

00007604 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7604:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    7606:	2a00      	cmp	r2, #0
    7608:	d001      	beq.n	760e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    760a:	0018      	movs	r0, r3
    760c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    760e:	008b      	lsls	r3, r1, #2
    7610:	4a06      	ldr	r2, [pc, #24]	; (762c <extint_register_callback+0x28>)
    7612:	589b      	ldr	r3, [r3, r2]
    7614:	2b00      	cmp	r3, #0
    7616:	d003      	beq.n	7620 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    7618:	4283      	cmp	r3, r0
    761a:	d005      	beq.n	7628 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    761c:	231d      	movs	r3, #29
    761e:	e7f4      	b.n	760a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    7620:	0089      	lsls	r1, r1, #2
    7622:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    7624:	2300      	movs	r3, #0
    7626:	e7f0      	b.n	760a <extint_register_callback+0x6>
		return STATUS_OK;
    7628:	2300      	movs	r3, #0
    762a:	e7ee      	b.n	760a <extint_register_callback+0x6>
    762c:	20000380 	.word	0x20000380

00007630 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7630:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7632:	2900      	cmp	r1, #0
    7634:	d001      	beq.n	763a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    7636:	0018      	movs	r0, r3
    7638:	4770      	bx	lr
		return NULL;
    763a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    763c:	281f      	cmp	r0, #31
    763e:	d800      	bhi.n	7642 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    7640:	4a02      	ldr	r2, [pc, #8]	; (764c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    7642:	2301      	movs	r3, #1
    7644:	4083      	lsls	r3, r0
    7646:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    7648:	2300      	movs	r3, #0
    764a:	e7f4      	b.n	7636 <extint_chan_enable_callback+0x6>
    764c:	40001800 	.word	0x40001800

00007650 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7650:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7652:	2900      	cmp	r1, #0
    7654:	d001      	beq.n	765a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    7656:	0018      	movs	r0, r3
    7658:	4770      	bx	lr
		return NULL;
    765a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    765c:	281f      	cmp	r0, #31
    765e:	d800      	bhi.n	7662 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    7660:	4a02      	ldr	r2, [pc, #8]	; (766c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    7662:	2301      	movs	r3, #1
    7664:	4083      	lsls	r3, r0
    7666:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    7668:	2300      	movs	r3, #0
    766a:	e7f4      	b.n	7656 <extint_chan_disable_callback+0x6>
    766c:	40001800 	.word	0x40001800

00007670 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    7670:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7672:	2200      	movs	r2, #0
    7674:	4b10      	ldr	r3, [pc, #64]	; (76b8 <EIC_Handler+0x48>)
    7676:	701a      	strb	r2, [r3, #0]
    7678:	2300      	movs	r3, #0
    767a:	4910      	ldr	r1, [pc, #64]	; (76bc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    767c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    767e:	4e10      	ldr	r6, [pc, #64]	; (76c0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    7680:	4c0d      	ldr	r4, [pc, #52]	; (76b8 <EIC_Handler+0x48>)
    7682:	e00a      	b.n	769a <EIC_Handler+0x2a>
		return eics[eic_index];
    7684:	490d      	ldr	r1, [pc, #52]	; (76bc <EIC_Handler+0x4c>)
    7686:	e008      	b.n	769a <EIC_Handler+0x2a>
    7688:	7823      	ldrb	r3, [r4, #0]
    768a:	3301      	adds	r3, #1
    768c:	b2db      	uxtb	r3, r3
    768e:	7023      	strb	r3, [r4, #0]
    7690:	2b0f      	cmp	r3, #15
    7692:	d810      	bhi.n	76b6 <EIC_Handler+0x46>
		return NULL;
    7694:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    7696:	2b1f      	cmp	r3, #31
    7698:	d9f4      	bls.n	7684 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    769a:	0028      	movs	r0, r5
    769c:	4018      	ands	r0, r3
    769e:	2201      	movs	r2, #1
    76a0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    76a2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    76a4:	4210      	tst	r0, r2
    76a6:	d0ef      	beq.n	7688 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    76a8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    76aa:	009b      	lsls	r3, r3, #2
    76ac:	599b      	ldr	r3, [r3, r6]
    76ae:	2b00      	cmp	r3, #0
    76b0:	d0ea      	beq.n	7688 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    76b2:	4798      	blx	r3
    76b4:	e7e8      	b.n	7688 <EIC_Handler+0x18>
			}
		}
	}
}
    76b6:	bd70      	pop	{r4, r5, r6, pc}
    76b8:	20000e40 	.word	0x20000e40
    76bc:	40001800 	.word	0x40001800
    76c0:	20000380 	.word	0x20000380

000076c4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    76c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    76c6:	46de      	mov	lr, fp
    76c8:	4657      	mov	r7, sl
    76ca:	464e      	mov	r6, r9
    76cc:	4645      	mov	r5, r8
    76ce:	b5e0      	push	{r5, r6, r7, lr}
    76d0:	b087      	sub	sp, #28
    76d2:	4680      	mov	r8, r0
    76d4:	9104      	str	r1, [sp, #16]
    76d6:	0016      	movs	r6, r2
    76d8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    76da:	2200      	movs	r2, #0
    76dc:	2300      	movs	r3, #0
    76de:	2100      	movs	r1, #0
    76e0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    76e2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    76e4:	2001      	movs	r0, #1
    76e6:	0021      	movs	r1, r4
    76e8:	9600      	str	r6, [sp, #0]
    76ea:	9701      	str	r7, [sp, #4]
    76ec:	465c      	mov	r4, fp
    76ee:	9403      	str	r4, [sp, #12]
    76f0:	4644      	mov	r4, r8
    76f2:	9405      	str	r4, [sp, #20]
    76f4:	e013      	b.n	771e <long_division+0x5a>
    76f6:	2420      	movs	r4, #32
    76f8:	1a64      	subs	r4, r4, r1
    76fa:	0005      	movs	r5, r0
    76fc:	40e5      	lsrs	r5, r4
    76fe:	46a8      	mov	r8, r5
    7700:	e014      	b.n	772c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    7702:	9c00      	ldr	r4, [sp, #0]
    7704:	9d01      	ldr	r5, [sp, #4]
    7706:	1b12      	subs	r2, r2, r4
    7708:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    770a:	465c      	mov	r4, fp
    770c:	464d      	mov	r5, r9
    770e:	432c      	orrs	r4, r5
    7710:	46a3      	mov	fp, r4
    7712:	9c03      	ldr	r4, [sp, #12]
    7714:	4645      	mov	r5, r8
    7716:	432c      	orrs	r4, r5
    7718:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    771a:	3901      	subs	r1, #1
    771c:	d325      	bcc.n	776a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    771e:	2420      	movs	r4, #32
    7720:	4264      	negs	r4, r4
    7722:	190c      	adds	r4, r1, r4
    7724:	d4e7      	bmi.n	76f6 <long_division+0x32>
    7726:	0005      	movs	r5, r0
    7728:	40a5      	lsls	r5, r4
    772a:	46a8      	mov	r8, r5
    772c:	0004      	movs	r4, r0
    772e:	408c      	lsls	r4, r1
    7730:	46a1      	mov	r9, r4
		r = r << 1;
    7732:	1892      	adds	r2, r2, r2
    7734:	415b      	adcs	r3, r3
    7736:	0014      	movs	r4, r2
    7738:	001d      	movs	r5, r3
		if (n & bit_shift) {
    773a:	9e05      	ldr	r6, [sp, #20]
    773c:	464f      	mov	r7, r9
    773e:	403e      	ands	r6, r7
    7740:	46b4      	mov	ip, r6
    7742:	9e04      	ldr	r6, [sp, #16]
    7744:	4647      	mov	r7, r8
    7746:	403e      	ands	r6, r7
    7748:	46b2      	mov	sl, r6
    774a:	4666      	mov	r6, ip
    774c:	4657      	mov	r7, sl
    774e:	433e      	orrs	r6, r7
    7750:	d003      	beq.n	775a <long_division+0x96>
			r |= 0x01;
    7752:	0006      	movs	r6, r0
    7754:	4326      	orrs	r6, r4
    7756:	0032      	movs	r2, r6
    7758:	002b      	movs	r3, r5
		if (r >= d) {
    775a:	9c00      	ldr	r4, [sp, #0]
    775c:	9d01      	ldr	r5, [sp, #4]
    775e:	429d      	cmp	r5, r3
    7760:	d8db      	bhi.n	771a <long_division+0x56>
    7762:	d1ce      	bne.n	7702 <long_division+0x3e>
    7764:	4294      	cmp	r4, r2
    7766:	d8d8      	bhi.n	771a <long_division+0x56>
    7768:	e7cb      	b.n	7702 <long_division+0x3e>
    776a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    776c:	4658      	mov	r0, fp
    776e:	0019      	movs	r1, r3
    7770:	b007      	add	sp, #28
    7772:	bc3c      	pop	{r2, r3, r4, r5}
    7774:	4690      	mov	r8, r2
    7776:	4699      	mov	r9, r3
    7778:	46a2      	mov	sl, r4
    777a:	46ab      	mov	fp, r5
    777c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000777e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    777e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7780:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7782:	2340      	movs	r3, #64	; 0x40
    7784:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    7786:	4281      	cmp	r1, r0
    7788:	d202      	bcs.n	7790 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    778a:	0018      	movs	r0, r3
    778c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    778e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    7790:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    7792:	1c63      	adds	r3, r4, #1
    7794:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    7796:	4288      	cmp	r0, r1
    7798:	d9f9      	bls.n	778e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    779a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    779c:	2cff      	cmp	r4, #255	; 0xff
    779e:	d8f4      	bhi.n	778a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    77a0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    77a2:	2300      	movs	r3, #0
    77a4:	e7f1      	b.n	778a <_sercom_get_sync_baud_val+0xc>
	...

000077a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    77a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77aa:	b083      	sub	sp, #12
    77ac:	000f      	movs	r7, r1
    77ae:	0016      	movs	r6, r2
    77b0:	aa08      	add	r2, sp, #32
    77b2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    77b4:	0004      	movs	r4, r0
    77b6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    77b8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    77ba:	42bc      	cmp	r4, r7
    77bc:	d902      	bls.n	77c4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    77be:	0010      	movs	r0, r2
    77c0:	b003      	add	sp, #12
    77c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    77c4:	2b00      	cmp	r3, #0
    77c6:	d114      	bne.n	77f2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    77c8:	0002      	movs	r2, r0
    77ca:	0008      	movs	r0, r1
    77cc:	2100      	movs	r1, #0
    77ce:	4c19      	ldr	r4, [pc, #100]	; (7834 <_sercom_get_async_baud_val+0x8c>)
    77d0:	47a0      	blx	r4
    77d2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    77d4:	003a      	movs	r2, r7
    77d6:	2300      	movs	r3, #0
    77d8:	2000      	movs	r0, #0
    77da:	4c17      	ldr	r4, [pc, #92]	; (7838 <_sercom_get_async_baud_val+0x90>)
    77dc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    77de:	2200      	movs	r2, #0
    77e0:	2301      	movs	r3, #1
    77e2:	1a12      	subs	r2, r2, r0
    77e4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    77e6:	0c12      	lsrs	r2, r2, #16
    77e8:	041b      	lsls	r3, r3, #16
    77ea:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    77ec:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    77ee:	2200      	movs	r2, #0
    77f0:	e7e5      	b.n	77be <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    77f2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    77f4:	2b01      	cmp	r3, #1
    77f6:	d1f9      	bne.n	77ec <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    77f8:	000a      	movs	r2, r1
    77fa:	2300      	movs	r3, #0
    77fc:	2100      	movs	r1, #0
    77fe:	4c0d      	ldr	r4, [pc, #52]	; (7834 <_sercom_get_async_baud_val+0x8c>)
    7800:	47a0      	blx	r4
    7802:	0002      	movs	r2, r0
    7804:	000b      	movs	r3, r1
    7806:	9200      	str	r2, [sp, #0]
    7808:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    780a:	0038      	movs	r0, r7
    780c:	2100      	movs	r1, #0
    780e:	4c0a      	ldr	r4, [pc, #40]	; (7838 <_sercom_get_async_baud_val+0x90>)
    7810:	47a0      	blx	r4
    7812:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    7814:	2380      	movs	r3, #128	; 0x80
    7816:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7818:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    781a:	4298      	cmp	r0, r3
    781c:	d8cf      	bhi.n	77be <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    781e:	0f79      	lsrs	r1, r7, #29
    7820:	00f8      	lsls	r0, r7, #3
    7822:	9a00      	ldr	r2, [sp, #0]
    7824:	9b01      	ldr	r3, [sp, #4]
    7826:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    7828:	00ea      	lsls	r2, r5, #3
    782a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    782c:	b2d2      	uxtb	r2, r2
    782e:	0352      	lsls	r2, r2, #13
    7830:	432a      	orrs	r2, r5
    7832:	e7db      	b.n	77ec <_sercom_get_async_baud_val+0x44>
    7834:	0000927d 	.word	0x0000927d
    7838:	000076c5 	.word	0x000076c5

0000783c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    783c:	b510      	push	{r4, lr}
    783e:	b082      	sub	sp, #8
    7840:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7842:	4b0e      	ldr	r3, [pc, #56]	; (787c <sercom_set_gclk_generator+0x40>)
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2b00      	cmp	r3, #0
    7848:	d007      	beq.n	785a <sercom_set_gclk_generator+0x1e>
    784a:	2900      	cmp	r1, #0
    784c:	d105      	bne.n	785a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    784e:	4b0b      	ldr	r3, [pc, #44]	; (787c <sercom_set_gclk_generator+0x40>)
    7850:	785b      	ldrb	r3, [r3, #1]
    7852:	4283      	cmp	r3, r0
    7854:	d010      	beq.n	7878 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7856:	201d      	movs	r0, #29
    7858:	e00c      	b.n	7874 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    785a:	a901      	add	r1, sp, #4
    785c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    785e:	2013      	movs	r0, #19
    7860:	4b07      	ldr	r3, [pc, #28]	; (7880 <sercom_set_gclk_generator+0x44>)
    7862:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7864:	2013      	movs	r0, #19
    7866:	4b07      	ldr	r3, [pc, #28]	; (7884 <sercom_set_gclk_generator+0x48>)
    7868:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    786a:	4b04      	ldr	r3, [pc, #16]	; (787c <sercom_set_gclk_generator+0x40>)
    786c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    786e:	2201      	movs	r2, #1
    7870:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7872:	2000      	movs	r0, #0
}
    7874:	b002      	add	sp, #8
    7876:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7878:	2000      	movs	r0, #0
    787a:	e7fb      	b.n	7874 <sercom_set_gclk_generator+0x38>
    787c:	200002f8 	.word	0x200002f8
    7880:	00008c59 	.word	0x00008c59
    7884:	00008bcd 	.word	0x00008bcd

00007888 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7888:	4b40      	ldr	r3, [pc, #256]	; (798c <_sercom_get_default_pad+0x104>)
    788a:	4298      	cmp	r0, r3
    788c:	d031      	beq.n	78f2 <_sercom_get_default_pad+0x6a>
    788e:	d90a      	bls.n	78a6 <_sercom_get_default_pad+0x1e>
    7890:	4b3f      	ldr	r3, [pc, #252]	; (7990 <_sercom_get_default_pad+0x108>)
    7892:	4298      	cmp	r0, r3
    7894:	d04d      	beq.n	7932 <_sercom_get_default_pad+0xaa>
    7896:	4b3f      	ldr	r3, [pc, #252]	; (7994 <_sercom_get_default_pad+0x10c>)
    7898:	4298      	cmp	r0, r3
    789a:	d05a      	beq.n	7952 <_sercom_get_default_pad+0xca>
    789c:	4b3e      	ldr	r3, [pc, #248]	; (7998 <_sercom_get_default_pad+0x110>)
    789e:	4298      	cmp	r0, r3
    78a0:	d037      	beq.n	7912 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    78a2:	2000      	movs	r0, #0
}
    78a4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    78a6:	4b3d      	ldr	r3, [pc, #244]	; (799c <_sercom_get_default_pad+0x114>)
    78a8:	4298      	cmp	r0, r3
    78aa:	d00c      	beq.n	78c6 <_sercom_get_default_pad+0x3e>
    78ac:	4b3c      	ldr	r3, [pc, #240]	; (79a0 <_sercom_get_default_pad+0x118>)
    78ae:	4298      	cmp	r0, r3
    78b0:	d1f7      	bne.n	78a2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    78b2:	2901      	cmp	r1, #1
    78b4:	d017      	beq.n	78e6 <_sercom_get_default_pad+0x5e>
    78b6:	2900      	cmp	r1, #0
    78b8:	d05d      	beq.n	7976 <_sercom_get_default_pad+0xee>
    78ba:	2902      	cmp	r1, #2
    78bc:	d015      	beq.n	78ea <_sercom_get_default_pad+0x62>
    78be:	2903      	cmp	r1, #3
    78c0:	d015      	beq.n	78ee <_sercom_get_default_pad+0x66>
	return 0;
    78c2:	2000      	movs	r0, #0
    78c4:	e7ee      	b.n	78a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    78c6:	2901      	cmp	r1, #1
    78c8:	d007      	beq.n	78da <_sercom_get_default_pad+0x52>
    78ca:	2900      	cmp	r1, #0
    78cc:	d051      	beq.n	7972 <_sercom_get_default_pad+0xea>
    78ce:	2902      	cmp	r1, #2
    78d0:	d005      	beq.n	78de <_sercom_get_default_pad+0x56>
    78d2:	2903      	cmp	r1, #3
    78d4:	d005      	beq.n	78e2 <_sercom_get_default_pad+0x5a>
	return 0;
    78d6:	2000      	movs	r0, #0
    78d8:	e7e4      	b.n	78a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    78da:	4832      	ldr	r0, [pc, #200]	; (79a4 <_sercom_get_default_pad+0x11c>)
    78dc:	e7e2      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    78de:	4832      	ldr	r0, [pc, #200]	; (79a8 <_sercom_get_default_pad+0x120>)
    78e0:	e7e0      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    78e2:	4832      	ldr	r0, [pc, #200]	; (79ac <_sercom_get_default_pad+0x124>)
    78e4:	e7de      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    78e6:	4832      	ldr	r0, [pc, #200]	; (79b0 <_sercom_get_default_pad+0x128>)
    78e8:	e7dc      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    78ea:	4832      	ldr	r0, [pc, #200]	; (79b4 <_sercom_get_default_pad+0x12c>)
    78ec:	e7da      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    78ee:	4832      	ldr	r0, [pc, #200]	; (79b8 <_sercom_get_default_pad+0x130>)
    78f0:	e7d8      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    78f2:	2901      	cmp	r1, #1
    78f4:	d007      	beq.n	7906 <_sercom_get_default_pad+0x7e>
    78f6:	2900      	cmp	r1, #0
    78f8:	d03f      	beq.n	797a <_sercom_get_default_pad+0xf2>
    78fa:	2902      	cmp	r1, #2
    78fc:	d005      	beq.n	790a <_sercom_get_default_pad+0x82>
    78fe:	2903      	cmp	r1, #3
    7900:	d005      	beq.n	790e <_sercom_get_default_pad+0x86>
	return 0;
    7902:	2000      	movs	r0, #0
    7904:	e7ce      	b.n	78a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7906:	482d      	ldr	r0, [pc, #180]	; (79bc <_sercom_get_default_pad+0x134>)
    7908:	e7cc      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    790a:	482d      	ldr	r0, [pc, #180]	; (79c0 <_sercom_get_default_pad+0x138>)
    790c:	e7ca      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    790e:	482d      	ldr	r0, [pc, #180]	; (79c4 <_sercom_get_default_pad+0x13c>)
    7910:	e7c8      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7912:	2901      	cmp	r1, #1
    7914:	d007      	beq.n	7926 <_sercom_get_default_pad+0x9e>
    7916:	2900      	cmp	r1, #0
    7918:	d031      	beq.n	797e <_sercom_get_default_pad+0xf6>
    791a:	2902      	cmp	r1, #2
    791c:	d005      	beq.n	792a <_sercom_get_default_pad+0xa2>
    791e:	2903      	cmp	r1, #3
    7920:	d005      	beq.n	792e <_sercom_get_default_pad+0xa6>
	return 0;
    7922:	2000      	movs	r0, #0
    7924:	e7be      	b.n	78a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7926:	4828      	ldr	r0, [pc, #160]	; (79c8 <_sercom_get_default_pad+0x140>)
    7928:	e7bc      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    792a:	4828      	ldr	r0, [pc, #160]	; (79cc <_sercom_get_default_pad+0x144>)
    792c:	e7ba      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    792e:	4828      	ldr	r0, [pc, #160]	; (79d0 <_sercom_get_default_pad+0x148>)
    7930:	e7b8      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7932:	2901      	cmp	r1, #1
    7934:	d007      	beq.n	7946 <_sercom_get_default_pad+0xbe>
    7936:	2900      	cmp	r1, #0
    7938:	d023      	beq.n	7982 <_sercom_get_default_pad+0xfa>
    793a:	2902      	cmp	r1, #2
    793c:	d005      	beq.n	794a <_sercom_get_default_pad+0xc2>
    793e:	2903      	cmp	r1, #3
    7940:	d005      	beq.n	794e <_sercom_get_default_pad+0xc6>
	return 0;
    7942:	2000      	movs	r0, #0
    7944:	e7ae      	b.n	78a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7946:	4823      	ldr	r0, [pc, #140]	; (79d4 <_sercom_get_default_pad+0x14c>)
    7948:	e7ac      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    794a:	4823      	ldr	r0, [pc, #140]	; (79d8 <_sercom_get_default_pad+0x150>)
    794c:	e7aa      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    794e:	4823      	ldr	r0, [pc, #140]	; (79dc <_sercom_get_default_pad+0x154>)
    7950:	e7a8      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7952:	2901      	cmp	r1, #1
    7954:	d007      	beq.n	7966 <_sercom_get_default_pad+0xde>
    7956:	2900      	cmp	r1, #0
    7958:	d015      	beq.n	7986 <_sercom_get_default_pad+0xfe>
    795a:	2902      	cmp	r1, #2
    795c:	d005      	beq.n	796a <_sercom_get_default_pad+0xe2>
    795e:	2903      	cmp	r1, #3
    7960:	d005      	beq.n	796e <_sercom_get_default_pad+0xe6>
	return 0;
    7962:	2000      	movs	r0, #0
    7964:	e79e      	b.n	78a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7966:	481e      	ldr	r0, [pc, #120]	; (79e0 <_sercom_get_default_pad+0x158>)
    7968:	e79c      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    796a:	481e      	ldr	r0, [pc, #120]	; (79e4 <_sercom_get_default_pad+0x15c>)
    796c:	e79a      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    796e:	481e      	ldr	r0, [pc, #120]	; (79e8 <_sercom_get_default_pad+0x160>)
    7970:	e798      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7972:	481e      	ldr	r0, [pc, #120]	; (79ec <_sercom_get_default_pad+0x164>)
    7974:	e796      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7976:	2003      	movs	r0, #3
    7978:	e794      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    797a:	481d      	ldr	r0, [pc, #116]	; (79f0 <_sercom_get_default_pad+0x168>)
    797c:	e792      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    797e:	481d      	ldr	r0, [pc, #116]	; (79f4 <_sercom_get_default_pad+0x16c>)
    7980:	e790      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7982:	481d      	ldr	r0, [pc, #116]	; (79f8 <_sercom_get_default_pad+0x170>)
    7984:	e78e      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    7986:	481d      	ldr	r0, [pc, #116]	; (79fc <_sercom_get_default_pad+0x174>)
    7988:	e78c      	b.n	78a4 <_sercom_get_default_pad+0x1c>
    798a:	46c0      	nop			; (mov r8, r8)
    798c:	42001000 	.word	0x42001000
    7990:	42001800 	.word	0x42001800
    7994:	42001c00 	.word	0x42001c00
    7998:	42001400 	.word	0x42001400
    799c:	42000800 	.word	0x42000800
    79a0:	42000c00 	.word	0x42000c00
    79a4:	00050003 	.word	0x00050003
    79a8:	00060003 	.word	0x00060003
    79ac:	00070003 	.word	0x00070003
    79b0:	00010003 	.word	0x00010003
    79b4:	001e0003 	.word	0x001e0003
    79b8:	001f0003 	.word	0x001f0003
    79bc:	00090003 	.word	0x00090003
    79c0:	000a0003 	.word	0x000a0003
    79c4:	000b0003 	.word	0x000b0003
    79c8:	00110003 	.word	0x00110003
    79cc:	00120003 	.word	0x00120003
    79d0:	00130003 	.word	0x00130003
    79d4:	000d0003 	.word	0x000d0003
    79d8:	000e0003 	.word	0x000e0003
    79dc:	000f0003 	.word	0x000f0003
    79e0:	00170003 	.word	0x00170003
    79e4:	00180003 	.word	0x00180003
    79e8:	00190003 	.word	0x00190003
    79ec:	00040003 	.word	0x00040003
    79f0:	00080003 	.word	0x00080003
    79f4:	00100003 	.word	0x00100003
    79f8:	000c0003 	.word	0x000c0003
    79fc:	00160003 	.word	0x00160003

00007a00 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7a00:	b530      	push	{r4, r5, lr}
    7a02:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7a04:	4b0b      	ldr	r3, [pc, #44]	; (7a34 <_sercom_get_sercom_inst_index+0x34>)
    7a06:	466a      	mov	r2, sp
    7a08:	cb32      	ldmia	r3!, {r1, r4, r5}
    7a0a:	c232      	stmia	r2!, {r1, r4, r5}
    7a0c:	cb32      	ldmia	r3!, {r1, r4, r5}
    7a0e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7a10:	9b00      	ldr	r3, [sp, #0]
    7a12:	4283      	cmp	r3, r0
    7a14:	d00b      	beq.n	7a2e <_sercom_get_sercom_inst_index+0x2e>
    7a16:	2301      	movs	r3, #1
    7a18:	009a      	lsls	r2, r3, #2
    7a1a:	4669      	mov	r1, sp
    7a1c:	5852      	ldr	r2, [r2, r1]
    7a1e:	4282      	cmp	r2, r0
    7a20:	d006      	beq.n	7a30 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a22:	3301      	adds	r3, #1
    7a24:	2b06      	cmp	r3, #6
    7a26:	d1f7      	bne.n	7a18 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    7a28:	2000      	movs	r0, #0
}
    7a2a:	b007      	add	sp, #28
    7a2c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7a2e:	2300      	movs	r3, #0
			return i;
    7a30:	b2d8      	uxtb	r0, r3
    7a32:	e7fa      	b.n	7a2a <_sercom_get_sercom_inst_index+0x2a>
    7a34:	0000adb8 	.word	0x0000adb8

00007a38 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    7a38:	b570      	push	{r4, r5, r6, lr}
    7a3a:	b082      	sub	sp, #8
    7a3c:	0005      	movs	r5, r0
    7a3e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7a40:	2200      	movs	r2, #0
    7a42:	466b      	mov	r3, sp
    7a44:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    7a46:	6806      	ldr	r6, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    7a48:	0030      	movs	r0, r6
    7a4a:	4b24      	ldr	r3, [pc, #144]	; (7adc <spi_set_baudrate+0xa4>)
    7a4c:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7a4e:	231f      	movs	r3, #31
    7a50:	4018      	ands	r0, r3
    7a52:	3b1e      	subs	r3, #30
    7a54:	4083      	lsls	r3, r0
    7a56:	2280      	movs	r2, #128	; 0x80
    7a58:	4921      	ldr	r1, [pc, #132]	; (7ae0 <spi_set_baudrate+0xa8>)
    7a5a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a5c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7a5e:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    7a60:	2b00      	cmp	r3, #0
    7a62:	d1fc      	bne.n	7a5e <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    7a64:	338f      	adds	r3, #143	; 0x8f
    7a66:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    7a68:	7633      	strb	r3, [r6, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7a6a:	6833      	ldr	r3, [r6, #0]
    7a6c:	2202      	movs	r2, #2
    7a6e:	4393      	bics	r3, r2
    7a70:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a72:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7a74:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    7a76:	2b00      	cmp	r3, #0
    7a78:	d1fc      	bne.n	7a74 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7a7a:	4b1a      	ldr	r3, [pc, #104]	; (7ae4 <spi_set_baudrate+0xac>)
    7a7c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7a7e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7a80:	b2c0      	uxtb	r0, r0
    7a82:	4b19      	ldr	r3, [pc, #100]	; (7ae8 <spi_set_baudrate+0xb0>)
    7a84:	4798      	blx	r3
    7a86:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    7a88:	466b      	mov	r3, sp
    7a8a:	1d9a      	adds	r2, r3, #6
    7a8c:	0020      	movs	r0, r4
    7a8e:	4b17      	ldr	r3, [pc, #92]	; (7aec <spi_set_baudrate+0xb4>)
    7a90:	4798      	blx	r3
    7a92:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    7a94:	d003      	beq.n	7a9e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    7a96:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    7a98:	0020      	movs	r0, r4
    7a9a:	b002      	add	sp, #8
    7a9c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    7a9e:	466b      	mov	r3, sp
    7aa0:	3306      	adds	r3, #6
    7aa2:	781b      	ldrb	r3, [r3, #0]
    7aa4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7aa6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7aa8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    7aaa:	2b00      	cmp	r3, #0
    7aac:	d1fc      	bne.n	7aa8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7aae:	0030      	movs	r0, r6
    7ab0:	4b0a      	ldr	r3, [pc, #40]	; (7adc <spi_set_baudrate+0xa4>)
    7ab2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7ab4:	231f      	movs	r3, #31
    7ab6:	4018      	ands	r0, r3
    7ab8:	3b1e      	subs	r3, #30
    7aba:	4083      	lsls	r3, r0
    7abc:	4a08      	ldr	r2, [pc, #32]	; (7ae0 <spi_set_baudrate+0xa8>)
    7abe:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ac0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7ac2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d1fc      	bne.n	7ac2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7ac8:	6833      	ldr	r3, [r6, #0]
    7aca:	2202      	movs	r2, #2
    7acc:	4313      	orrs	r3, r2
    7ace:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ad0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7ad2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d1fc      	bne.n	7ad2 <spi_set_baudrate+0x9a>
    7ad8:	e7de      	b.n	7a98 <spi_set_baudrate+0x60>
    7ada:	46c0      	nop			; (mov r8, r8)
    7adc:	00002631 	.word	0x00002631
    7ae0:	e000e100 	.word	0xe000e100
    7ae4:	00007a01 	.word	0x00007a01
    7ae8:	00008c75 	.word	0x00008c75
    7aec:	0000777f 	.word	0x0000777f

00007af0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7af2:	b08b      	sub	sp, #44	; 0x2c
    7af4:	0005      	movs	r5, r0
    7af6:	000c      	movs	r4, r1
    7af8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7afa:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7afc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7afe:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7b00:	079b      	lsls	r3, r3, #30
    7b02:	d501      	bpl.n	7b08 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    7b04:	b00b      	add	sp, #44	; 0x2c
    7b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7b08:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7b0a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7b0c:	07db      	lsls	r3, r3, #31
    7b0e:	d4f9      	bmi.n	7b04 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7b10:	0008      	movs	r0, r1
    7b12:	4b6f      	ldr	r3, [pc, #444]	; (7cd0 <spi_init+0x1e0>)
    7b14:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    7b16:	4a6f      	ldr	r2, [pc, #444]	; (7cd4 <spi_init+0x1e4>)
    7b18:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7b1a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7b1c:	2301      	movs	r3, #1
    7b1e:	40bb      	lsls	r3, r7
    7b20:	430b      	orrs	r3, r1
    7b22:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7b24:	a909      	add	r1, sp, #36	; 0x24
    7b26:	2724      	movs	r7, #36	; 0x24
    7b28:	5df3      	ldrb	r3, [r6, r7]
    7b2a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7b2c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7b2e:	b2c3      	uxtb	r3, r0
    7b30:	9301      	str	r3, [sp, #4]
    7b32:	0018      	movs	r0, r3
    7b34:	4b68      	ldr	r3, [pc, #416]	; (7cd8 <spi_init+0x1e8>)
    7b36:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7b38:	9801      	ldr	r0, [sp, #4]
    7b3a:	4b68      	ldr	r3, [pc, #416]	; (7cdc <spi_init+0x1ec>)
    7b3c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7b3e:	5df0      	ldrb	r0, [r6, r7]
    7b40:	2100      	movs	r1, #0
    7b42:	4b67      	ldr	r3, [pc, #412]	; (7ce0 <spi_init+0x1f0>)
    7b44:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7b46:	7833      	ldrb	r3, [r6, #0]
    7b48:	2b01      	cmp	r3, #1
    7b4a:	d03f      	beq.n	7bcc <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    7b4c:	7833      	ldrb	r3, [r6, #0]
    7b4e:	2b00      	cmp	r3, #0
    7b50:	d103      	bne.n	7b5a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7b52:	6823      	ldr	r3, [r4, #0]
    7b54:	2208      	movs	r2, #8
    7b56:	4313      	orrs	r3, r2
    7b58:	6023      	str	r3, [r4, #0]
    7b5a:	002b      	movs	r3, r5
    7b5c:	330c      	adds	r3, #12
    7b5e:	0029      	movs	r1, r5
    7b60:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    7b62:	2200      	movs	r2, #0
    7b64:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7b66:	428b      	cmp	r3, r1
    7b68:	d1fc      	bne.n	7b64 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    7b6a:	2300      	movs	r3, #0
    7b6c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7b6e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7b70:	2400      	movs	r4, #0
    7b72:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7b74:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    7b76:	3336      	adds	r3, #54	; 0x36
    7b78:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    7b7a:	3301      	adds	r3, #1
    7b7c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    7b7e:	3301      	adds	r3, #1
    7b80:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    7b82:	3b35      	subs	r3, #53	; 0x35
    7b84:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    7b86:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7b88:	6828      	ldr	r0, [r5, #0]
    7b8a:	4b51      	ldr	r3, [pc, #324]	; (7cd0 <spi_init+0x1e0>)
    7b8c:	4798      	blx	r3
    7b8e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    7b90:	4954      	ldr	r1, [pc, #336]	; (7ce4 <spi_init+0x1f4>)
    7b92:	4b55      	ldr	r3, [pc, #340]	; (7ce8 <spi_init+0x1f8>)
    7b94:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7b96:	00bf      	lsls	r7, r7, #2
    7b98:	4b54      	ldr	r3, [pc, #336]	; (7cec <spi_init+0x1fc>)
    7b9a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b9c:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7b9e:	ab04      	add	r3, sp, #16
    7ba0:	2280      	movs	r2, #128	; 0x80
    7ba2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7ba4:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7ba6:	3a7f      	subs	r2, #127	; 0x7f
    7ba8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7baa:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    7bac:	7833      	ldrb	r3, [r6, #0]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d102      	bne.n	7bb8 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7bb2:	2200      	movs	r2, #0
    7bb4:	ab04      	add	r3, sp, #16
    7bb6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7bb8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7bba:	9305      	str	r3, [sp, #20]
    7bbc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7bbe:	9306      	str	r3, [sp, #24]
    7bc0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7bc2:	9307      	str	r3, [sp, #28]
    7bc4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7bc6:	9308      	str	r3, [sp, #32]
    7bc8:	2400      	movs	r4, #0
    7bca:	e00b      	b.n	7be4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7bcc:	6823      	ldr	r3, [r4, #0]
    7bce:	220c      	movs	r2, #12
    7bd0:	4313      	orrs	r3, r2
    7bd2:	6023      	str	r3, [r4, #0]
    7bd4:	e7ba      	b.n	7b4c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7bd6:	0038      	movs	r0, r7
    7bd8:	4b45      	ldr	r3, [pc, #276]	; (7cf0 <spi_init+0x200>)
    7bda:	4798      	blx	r3
    7bdc:	e00a      	b.n	7bf4 <spi_init+0x104>
    7bde:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7be0:	2c04      	cmp	r4, #4
    7be2:	d010      	beq.n	7c06 <spi_init+0x116>
    7be4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7be6:	00a3      	lsls	r3, r4, #2
    7be8:	aa02      	add	r2, sp, #8
    7bea:	200c      	movs	r0, #12
    7bec:	1812      	adds	r2, r2, r0
    7bee:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d0f0      	beq.n	7bd6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    7bf4:	1c43      	adds	r3, r0, #1
    7bf6:	d0f2      	beq.n	7bde <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7bf8:	a904      	add	r1, sp, #16
    7bfa:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7bfc:	0c00      	lsrs	r0, r0, #16
    7bfe:	b2c0      	uxtb	r0, r0
    7c00:	4b3c      	ldr	r3, [pc, #240]	; (7cf4 <spi_init+0x204>)
    7c02:	4798      	blx	r3
    7c04:	e7eb      	b.n	7bde <spi_init+0xee>
	module->mode             = config->mode;
    7c06:	7833      	ldrb	r3, [r6, #0]
    7c08:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    7c0a:	7c33      	ldrb	r3, [r6, #16]
    7c0c:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    7c0e:	7cb3      	ldrb	r3, [r6, #18]
    7c10:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    7c12:	7d33      	ldrb	r3, [r6, #20]
    7c14:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    7c16:	2200      	movs	r2, #0
    7c18:	ab02      	add	r3, sp, #8
    7c1a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7c1c:	7833      	ldrb	r3, [r6, #0]
    7c1e:	2b01      	cmp	r3, #1
    7c20:	d012      	beq.n	7c48 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    7c22:	7833      	ldrb	r3, [r6, #0]
    7c24:	2b00      	cmp	r3, #0
    7c26:	d126      	bne.n	7c76 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    7c28:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    7c2a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    7c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    7c2e:	7ff1      	ldrb	r1, [r6, #31]
    7c30:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    7c32:	7fb4      	ldrb	r4, [r6, #30]
    7c34:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    7c36:	4319      	orrs	r1, r3
    7c38:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    7c3a:	2320      	movs	r3, #32
    7c3c:	5cf3      	ldrb	r3, [r6, r3]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d01b      	beq.n	7c7a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    7c42:	2340      	movs	r3, #64	; 0x40
    7c44:	431a      	orrs	r2, r3
    7c46:	e018      	b.n	7c7a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7c48:	6828      	ldr	r0, [r5, #0]
    7c4a:	4b21      	ldr	r3, [pc, #132]	; (7cd0 <spi_init+0x1e0>)
    7c4c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7c4e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7c50:	b2c0      	uxtb	r0, r0
    7c52:	4b29      	ldr	r3, [pc, #164]	; (7cf8 <spi_init+0x208>)
    7c54:	4798      	blx	r3
    7c56:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    7c58:	ab02      	add	r3, sp, #8
    7c5a:	1d9a      	adds	r2, r3, #6
    7c5c:	69b0      	ldr	r0, [r6, #24]
    7c5e:	4b27      	ldr	r3, [pc, #156]	; (7cfc <spi_init+0x20c>)
    7c60:	4798      	blx	r3
    7c62:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7c64:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7c66:	2b00      	cmp	r3, #0
    7c68:	d000      	beq.n	7c6c <spi_init+0x17c>
    7c6a:	e74b      	b.n	7b04 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    7c6c:	ab02      	add	r3, sp, #8
    7c6e:	3306      	adds	r3, #6
    7c70:	781b      	ldrb	r3, [r3, #0]
    7c72:	733b      	strb	r3, [r7, #12]
    7c74:	e7d5      	b.n	7c22 <spi_init+0x132>
	uint32_t ctrlb = 0;
    7c76:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    7c78:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    7c7a:	6873      	ldr	r3, [r6, #4]
    7c7c:	68b1      	ldr	r1, [r6, #8]
    7c7e:	430b      	orrs	r3, r1
    7c80:	68f1      	ldr	r1, [r6, #12]
    7c82:	430b      	orrs	r3, r1
    7c84:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    7c86:	7c31      	ldrb	r1, [r6, #16]
    7c88:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    7c8a:	7c71      	ldrb	r1, [r6, #17]
    7c8c:	2900      	cmp	r1, #0
    7c8e:	d103      	bne.n	7c98 <spi_init+0x1a8>
    7c90:	491b      	ldr	r1, [pc, #108]	; (7d00 <spi_init+0x210>)
    7c92:	7889      	ldrb	r1, [r1, #2]
    7c94:	0789      	lsls	r1, r1, #30
    7c96:	d501      	bpl.n	7c9c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7c98:	2180      	movs	r1, #128	; 0x80
    7c9a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    7c9c:	7cb1      	ldrb	r1, [r6, #18]
    7c9e:	2900      	cmp	r1, #0
    7ca0:	d002      	beq.n	7ca8 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7ca2:	2180      	movs	r1, #128	; 0x80
    7ca4:	0289      	lsls	r1, r1, #10
    7ca6:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7ca8:	7cf1      	ldrb	r1, [r6, #19]
    7caa:	2900      	cmp	r1, #0
    7cac:	d002      	beq.n	7cb4 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7cae:	2180      	movs	r1, #128	; 0x80
    7cb0:	0089      	lsls	r1, r1, #2
    7cb2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    7cb4:	7d31      	ldrb	r1, [r6, #20]
    7cb6:	2900      	cmp	r1, #0
    7cb8:	d002      	beq.n	7cc0 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7cba:	2180      	movs	r1, #128	; 0x80
    7cbc:	0189      	lsls	r1, r1, #6
    7cbe:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    7cc0:	6839      	ldr	r1, [r7, #0]
    7cc2:	430b      	orrs	r3, r1
    7cc4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7cc6:	687b      	ldr	r3, [r7, #4]
    7cc8:	431a      	orrs	r2, r3
    7cca:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    7ccc:	2000      	movs	r0, #0
    7cce:	e719      	b.n	7b04 <spi_init+0x14>
    7cd0:	00007a01 	.word	0x00007a01
    7cd4:	40000400 	.word	0x40000400
    7cd8:	00008c59 	.word	0x00008c59
    7cdc:	00008bcd 	.word	0x00008bcd
    7ce0:	0000783d 	.word	0x0000783d
    7ce4:	000001d9 	.word	0x000001d9
    7ce8:	000025f5 	.word	0x000025f5
    7cec:	200003c4 	.word	0x200003c4
    7cf0:	00007889 	.word	0x00007889
    7cf4:	00008d51 	.word	0x00008d51
    7cf8:	00008c75 	.word	0x00008c75
    7cfc:	0000777f 	.word	0x0000777f
    7d00:	41002000 	.word	0x41002000

00007d04 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    7d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d06:	46d6      	mov	lr, sl
    7d08:	464f      	mov	r7, r9
    7d0a:	b580      	push	{r7, lr}
    7d0c:	b083      	sub	sp, #12
    7d0e:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7d10:	2538      	movs	r5, #56	; 0x38
    7d12:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7d14:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7d16:	2e05      	cmp	r6, #5
    7d18:	d075      	beq.n	7e06 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7d1a:	3512      	adds	r5, #18
	if (length == 0) {
    7d1c:	2a00      	cmp	r2, #0
    7d1e:	d072      	beq.n	7e06 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    7d20:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    7d22:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    7d24:	2c00      	cmp	r4, #0
    7d26:	d06e      	beq.n	7e06 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7d28:	7944      	ldrb	r4, [r0, #5]
    7d2a:	2c00      	cmp	r4, #0
    7d2c:	d103      	bne.n	7d36 <spi_read_buffer_wait+0x32>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7d2e:	6804      	ldr	r4, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7d30:	7e25      	ldrb	r5, [r4, #24]
    7d32:	07a9      	lsls	r1, r5, #30
    7d34:	d40a      	bmi.n	7d4c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    7d36:	3a01      	subs	r2, #1
    7d38:	b294      	uxth	r4, r2
    7d3a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    7d3c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    7d3e:	2102      	movs	r1, #2
    7d40:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    7d42:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7d44:	05db      	lsls	r3, r3, #23
    7d46:	0ddb      	lsrs	r3, r3, #23
    7d48:	469a      	mov	sl, r3
    7d4a:	e037      	b.n	7dbc <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7d4c:	2502      	movs	r5, #2
    7d4e:	7625      	strb	r5, [r4, #24]
    7d50:	e7f1      	b.n	7d36 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d52:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7d54:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    7d56:	423b      	tst	r3, r7
    7d58:	d0fc      	beq.n	7d54 <spi_read_buffer_wait+0x50>
    7d5a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    7d5c:	423b      	tst	r3, r7
    7d5e:	d009      	beq.n	7d74 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7d60:	4653      	mov	r3, sl
    7d62:	628b      	str	r3, [r1, #40]	; 0x28
    7d64:	e02d      	b.n	7dc2 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7d66:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    7d68:	464d      	mov	r5, r9
    7d6a:	422b      	tst	r3, r5
    7d6c:	d138      	bne.n	7de0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d6e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    7d70:	4213      	tst	r3, r2
    7d72:	d045      	beq.n	7e00 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d74:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d76:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    7d78:	4213      	tst	r3, r2
    7d7a:	d0fc      	beq.n	7d76 <spi_read_buffer_wait+0x72>
    7d7c:	7e0b      	ldrb	r3, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7d7e:	4213      	tst	r3, r2
    7d80:	d040      	beq.n	7e04 <spi_read_buffer_wait+0x100>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7d82:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    7d84:	2500      	movs	r5, #0
    7d86:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7d88:	4213      	tst	r3, r2
    7d8a:	d002      	beq.n	7d92 <spi_read_buffer_wait+0x8e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7d8c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    7d8e:	231e      	movs	r3, #30
    7d90:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7d92:	7983      	ldrb	r3, [r0, #6]
    7d94:	2b01      	cmp	r3, #1
    7d96:	d027      	beq.n	7de8 <spi_read_buffer_wait+0xe4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7d98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7d9a:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    7d9c:	9901      	ldr	r1, [sp, #4]
    7d9e:	2900      	cmp	r1, #0
    7da0:	d137      	bne.n	7e12 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    7da2:	1c75      	adds	r5, r6, #1
    7da4:	b2ad      	uxth	r5, r5
    7da6:	4661      	mov	r1, ip
    7da8:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7daa:	7981      	ldrb	r1, [r0, #6]
    7dac:	2901      	cmp	r1, #1
    7dae:	d01f      	beq.n	7df0 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    7db0:	002e      	movs	r6, r5
	while (length--) {
    7db2:	3c01      	subs	r4, #1
    7db4:	b2a4      	uxth	r4, r4
    7db6:	4b18      	ldr	r3, [pc, #96]	; (7e18 <spi_read_buffer_wait+0x114>)
    7db8:	429c      	cmp	r4, r3
    7dba:	d01f      	beq.n	7dfc <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    7dbc:	7943      	ldrb	r3, [r0, #5]
    7dbe:	2b01      	cmp	r3, #1
    7dc0:	d0c7      	beq.n	7d52 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    7dc2:	7943      	ldrb	r3, [r0, #5]
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d1d5      	bne.n	7d74 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7dc8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7dca:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    7dcc:	4213      	tst	r3, r2
    7dce:	d1ca      	bne.n	7d66 <spi_read_buffer_wait+0x62>
    7dd0:	4b12      	ldr	r3, [pc, #72]	; (7e1c <spi_read_buffer_wait+0x118>)
    7dd2:	7e0d      	ldrb	r5, [r1, #24]
    7dd4:	4215      	tst	r5, r2
    7dd6:	d1c6      	bne.n	7d66 <spi_read_buffer_wait+0x62>
    7dd8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7dda:	2b00      	cmp	r3, #0
    7ddc:	d1f9      	bne.n	7dd2 <spi_read_buffer_wait+0xce>
    7dde:	e7c2      	b.n	7d66 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7de0:	2302      	movs	r3, #2
    7de2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    7de4:	2504      	movs	r5, #4
    7de6:	e00e      	b.n	7e06 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7de8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7dea:	05db      	lsls	r3, r3, #23
    7dec:	0ddb      	lsrs	r3, r3, #23
    7dee:	e7d5      	b.n	7d9c <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    7df0:	3602      	adds	r6, #2
    7df2:	b2b6      	uxth	r6, r6
    7df4:	0a1b      	lsrs	r3, r3, #8
    7df6:	4661      	mov	r1, ip
    7df8:	554b      	strb	r3, [r1, r5]
    7dfa:	e7da      	b.n	7db2 <spi_read_buffer_wait+0xae>
    7dfc:	9d01      	ldr	r5, [sp, #4]
    7dfe:	e002      	b.n	7e06 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    7e00:	2512      	movs	r5, #18
    7e02:	e000      	b.n	7e06 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    7e04:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    7e06:	0028      	movs	r0, r5
    7e08:	b003      	add	sp, #12
    7e0a:	bc0c      	pop	{r2, r3}
    7e0c:	4691      	mov	r9, r2
    7e0e:	469a      	mov	sl, r3
    7e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e12:	9d01      	ldr	r5, [sp, #4]
    7e14:	e7f7      	b.n	7e06 <spi_read_buffer_wait+0x102>
    7e16:	46c0      	nop			; (mov r8, r8)
    7e18:	0000ffff 	.word	0x0000ffff
    7e1c:	00002710 	.word	0x00002710

00007e20 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7e20:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7e22:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7e24:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7e26:	2c01      	cmp	r4, #1
    7e28:	d001      	beq.n	7e2e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7e2a:	0018      	movs	r0, r3
    7e2c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7e2e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7e30:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    7e32:	2c00      	cmp	r4, #0
    7e34:	d1f9      	bne.n	7e2a <spi_select_slave+0xa>
		if (select) {
    7e36:	2a00      	cmp	r2, #0
    7e38:	d058      	beq.n	7eec <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7e3a:	784b      	ldrb	r3, [r1, #1]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d044      	beq.n	7eca <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7e40:	6803      	ldr	r3, [r0, #0]
    7e42:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7e44:	07db      	lsls	r3, r3, #31
    7e46:	d410      	bmi.n	7e6a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7e48:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e4a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7e4c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e4e:	2900      	cmp	r1, #0
    7e50:	d104      	bne.n	7e5c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    7e52:	0953      	lsrs	r3, r2, #5
    7e54:	01db      	lsls	r3, r3, #7
    7e56:	492e      	ldr	r1, [pc, #184]	; (7f10 <spi_select_slave+0xf0>)
    7e58:	468c      	mov	ip, r1
    7e5a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e5c:	211f      	movs	r1, #31
    7e5e:	4011      	ands	r1, r2
    7e60:	2201      	movs	r2, #1
    7e62:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7e64:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    7e66:	2305      	movs	r3, #5
    7e68:	e7df      	b.n	7e2a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7e6a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7e6c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7e6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e70:	2c00      	cmp	r4, #0
    7e72:	d104      	bne.n	7e7e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7e74:	0953      	lsrs	r3, r2, #5
    7e76:	01db      	lsls	r3, r3, #7
    7e78:	4c25      	ldr	r4, [pc, #148]	; (7f10 <spi_select_slave+0xf0>)
    7e7a:	46a4      	mov	ip, r4
    7e7c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7e7e:	241f      	movs	r4, #31
    7e80:	4014      	ands	r4, r2
    7e82:	2201      	movs	r2, #1
    7e84:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7e86:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7e88:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7e8a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7e8c:	07d2      	lsls	r2, r2, #31
    7e8e:	d501      	bpl.n	7e94 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7e90:	788a      	ldrb	r2, [r1, #2]
    7e92:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7e94:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7e96:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7e98:	2a00      	cmp	r2, #0
    7e9a:	d1c6      	bne.n	7e2a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7e9c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7e9e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7ea0:	7e13      	ldrb	r3, [r2, #24]
    7ea2:	420b      	tst	r3, r1
    7ea4:	d0fc      	beq.n	7ea0 <spi_select_slave+0x80>
    7ea6:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7ea8:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7eaa:	0749      	lsls	r1, r1, #29
    7eac:	d5bd      	bpl.n	7e2a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7eae:	8b53      	ldrh	r3, [r2, #26]
    7eb0:	075b      	lsls	r3, r3, #29
    7eb2:	d501      	bpl.n	7eb8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7eb4:	2304      	movs	r3, #4
    7eb6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7eb8:	7983      	ldrb	r3, [r0, #6]
    7eba:	2b01      	cmp	r3, #1
    7ebc:	d002      	beq.n	7ec4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7ebe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7ec0:	2300      	movs	r3, #0
    7ec2:	e7b2      	b.n	7e2a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7ec4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7ec6:	2300      	movs	r3, #0
    7ec8:	e7af      	b.n	7e2a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7eca:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7ecc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7ece:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7ed0:	2900      	cmp	r1, #0
    7ed2:	d104      	bne.n	7ede <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7ed4:	0953      	lsrs	r3, r2, #5
    7ed6:	01db      	lsls	r3, r3, #7
    7ed8:	490d      	ldr	r1, [pc, #52]	; (7f10 <spi_select_slave+0xf0>)
    7eda:	468c      	mov	ip, r1
    7edc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ede:	211f      	movs	r1, #31
    7ee0:	4011      	ands	r1, r2
    7ee2:	2201      	movs	r2, #1
    7ee4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7ee6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7ee8:	2300      	movs	r3, #0
    7eea:	e79e      	b.n	7e2a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7eec:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7eee:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7ef0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7ef2:	2900      	cmp	r1, #0
    7ef4:	d104      	bne.n	7f00 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7ef6:	0953      	lsrs	r3, r2, #5
    7ef8:	01db      	lsls	r3, r3, #7
    7efa:	4905      	ldr	r1, [pc, #20]	; (7f10 <spi_select_slave+0xf0>)
    7efc:	468c      	mov	ip, r1
    7efe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7f00:	211f      	movs	r1, #31
    7f02:	4011      	ands	r1, r2
    7f04:	2201      	movs	r2, #1
    7f06:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7f08:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7f0a:	2300      	movs	r3, #0
    7f0c:	e78d      	b.n	7e2a <spi_select_slave+0xa>
    7f0e:	46c0      	nop			; (mov r8, r8)
    7f10:	41004400 	.word	0x41004400

00007f14 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f16:	46de      	mov	lr, fp
    7f18:	4657      	mov	r7, sl
    7f1a:	464e      	mov	r6, r9
    7f1c:	4645      	mov	r5, r8
    7f1e:	b5e0      	push	{r5, r6, r7, lr}
    7f20:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    7f22:	2338      	movs	r3, #56	; 0x38
    7f24:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    7f26:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    7f28:	2c05      	cmp	r4, #5
    7f2a:	d002      	beq.n	7f32 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7f2c:	3312      	adds	r3, #18
	if (length == 0) {
    7f2e:	2a00      	cmp	r2, #0
    7f30:	d107      	bne.n	7f42 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7f32:	0018      	movs	r0, r3
    7f34:	b003      	add	sp, #12
    7f36:	bc3c      	pop	{r2, r3, r4, r5}
    7f38:	4690      	mov	r8, r2
    7f3a:	4699      	mov	r9, r3
    7f3c:	46a2      	mov	sl, r4
    7f3e:	46ab      	mov	fp, r5
    7f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7f42:	7943      	ldrb	r3, [r0, #5]
    7f44:	2b00      	cmp	r3, #0
    7f46:	d103      	bne.n	7f50 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f48:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7f4a:	7e1c      	ldrb	r4, [r3, #24]
    7f4c:	07a4      	lsls	r4, r4, #30
    7f4e:	d40a      	bmi.n	7f66 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    7f50:	4693      	mov	fp, r2
    7f52:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    7f54:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    7f56:	2502      	movs	r5, #2
    7f58:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    7f5a:	3502      	adds	r5, #2
    7f5c:	46a8      	mov	r8, r5
    7f5e:	3a01      	subs	r2, #1
    7f60:	b292      	uxth	r2, r2
    7f62:	468a      	mov	sl, r1
    7f64:	e023      	b.n	7fae <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7f66:	2402      	movs	r4, #2
    7f68:	761c      	strb	r4, [r3, #24]
    7f6a:	e7f1      	b.n	7f50 <spi_write_buffer_wait+0x3c>
    7f6c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    7f6e:	4661      	mov	r1, ip
    7f70:	420d      	tst	r5, r1
    7f72:	d12e      	bne.n	7fd2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7f74:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    7f76:	421d      	tst	r5, r3
    7f78:	d100      	bne.n	7f7c <spi_write_buffer_wait+0x68>
    7f7a:	e0c2      	b.n	8102 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7f7c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7f7e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    7f80:	421d      	tst	r5, r3
    7f82:	d0fc      	beq.n	7f7e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    7f84:	1c67      	adds	r7, r4, #1
    7f86:	b2bf      	uxth	r7, r7
    7f88:	4651      	mov	r1, sl
    7f8a:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7f8c:	7981      	ldrb	r1, [r0, #6]
    7f8e:	2901      	cmp	r1, #1
    7f90:	d023      	beq.n	7fda <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    7f92:	b2ad      	uxth	r5, r5
    7f94:	003c      	movs	r4, r7
    7f96:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7f98:	421f      	tst	r7, r3
    7f9a:	d002      	beq.n	7fa2 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7f9c:	05ed      	lsls	r5, r5, #23
    7f9e:	0ded      	lsrs	r5, r5, #23
    7fa0:	62b5      	str	r5, [r6, #40]	; 0x28
    7fa2:	1e55      	subs	r5, r2, #1
    7fa4:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    7fa6:	79c6      	ldrb	r6, [r0, #7]
    7fa8:	2e00      	cmp	r6, #0
    7faa:	d11d      	bne.n	7fe8 <spi_write_buffer_wait+0xd4>
    7fac:	002a      	movs	r2, r5
	while (length--) {
    7fae:	4d5a      	ldr	r5, [pc, #360]	; (8118 <spi_write_buffer_wait+0x204>)
    7fb0:	42aa      	cmp	r2, r5
    7fb2:	d070      	beq.n	8096 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    7fb4:	7945      	ldrb	r5, [r0, #5]
    7fb6:	2d00      	cmp	r5, #0
    7fb8:	d1e0      	bne.n	7f7c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7fba:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7fbc:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    7fbe:	421d      	tst	r5, r3
    7fc0:	d1d4      	bne.n	7f6c <spi_write_buffer_wait+0x58>
    7fc2:	4d56      	ldr	r5, [pc, #344]	; (811c <spi_write_buffer_wait+0x208>)
    7fc4:	7e37      	ldrb	r7, [r6, #24]
    7fc6:	421f      	tst	r7, r3
    7fc8:	d1d0      	bne.n	7f6c <spi_write_buffer_wait+0x58>
    7fca:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7fcc:	2d00      	cmp	r5, #0
    7fce:	d1f9      	bne.n	7fc4 <spi_write_buffer_wait+0xb0>
    7fd0:	e7cc      	b.n	7f6c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7fd2:	2302      	movs	r3, #2
    7fd4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    7fd6:	3302      	adds	r3, #2
    7fd8:	e7ab      	b.n	7f32 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7fda:	3402      	adds	r4, #2
    7fdc:	b2a4      	uxth	r4, r4
    7fde:	4651      	mov	r1, sl
    7fe0:	5dcf      	ldrb	r7, [r1, r7]
    7fe2:	023f      	lsls	r7, r7, #8
    7fe4:	433d      	orrs	r5, r7
    7fe6:	e7d6      	b.n	7f96 <spi_write_buffer_wait+0x82>
    7fe8:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    7fea:	7945      	ldrb	r5, [r0, #5]
    7fec:	2d00      	cmp	r5, #0
    7fee:	d137      	bne.n	8060 <spi_write_buffer_wait+0x14c>
    7ff0:	4d4b      	ldr	r5, [pc, #300]	; (8120 <spi_write_buffer_wait+0x20c>)
    7ff2:	9101      	str	r1, [sp, #4]
    7ff4:	e012      	b.n	801c <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    7ff6:	3402      	adds	r4, #2
    7ff8:	b2a4      	uxth	r4, r4
    7ffa:	4649      	mov	r1, r9
    7ffc:	9f01      	ldr	r7, [sp, #4]
    7ffe:	5c79      	ldrb	r1, [r7, r1]
    8000:	0209      	lsls	r1, r1, #8
    8002:	9f00      	ldr	r7, [sp, #0]
    8004:	430f      	orrs	r7, r1
    8006:	e01b      	b.n	8040 <spi_write_buffer_wait+0x12c>
						length--;
    8008:	3a01      	subs	r2, #1
    800a:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    800c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    800e:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    8010:	4641      	mov	r1, r8
    8012:	420f      	tst	r7, r1
    8014:	d11b      	bne.n	804e <spi_write_buffer_wait+0x13a>
    8016:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    8018:	2d00      	cmp	r5, #0
    801a:	d018      	beq.n	804e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    801c:	2a00      	cmp	r2, #0
    801e:	d0f5      	beq.n	800c <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8020:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8022:	7e37      	ldrb	r7, [r6, #24]
    8024:	421f      	tst	r7, r3
    8026:	d0f1      	beq.n	800c <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    8028:	1c67      	adds	r7, r4, #1
    802a:	b2b9      	uxth	r1, r7
    802c:	4689      	mov	r9, r1
    802e:	9901      	ldr	r1, [sp, #4]
    8030:	5d09      	ldrb	r1, [r1, r4]
    8032:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8034:	7981      	ldrb	r1, [r0, #6]
    8036:	2901      	cmp	r1, #1
    8038:	d0dd      	beq.n	7ff6 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    803a:	4669      	mov	r1, sp
    803c:	880f      	ldrh	r7, [r1, #0]
    803e:	464c      	mov	r4, r9
    8040:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    8042:	4219      	tst	r1, r3
    8044:	d0e0      	beq.n	8008 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8046:	05ff      	lsls	r7, r7, #23
    8048:	0dff      	lsrs	r7, r7, #23
    804a:	62b7      	str	r7, [r6, #40]	; 0x28
    804c:	e7dc      	b.n	8008 <spi_write_buffer_wait+0xf4>
    804e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8050:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    8052:	4667      	mov	r7, ip
    8054:	423d      	tst	r5, r7
    8056:	d118      	bne.n	808a <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8058:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    805a:	4646      	mov	r6, r8
    805c:	4235      	tst	r5, r6
    805e:	d052      	beq.n	8106 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8060:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8062:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    8064:	4647      	mov	r7, r8
    8066:	423d      	tst	r5, r7
    8068:	d0fb      	beq.n	8062 <spi_write_buffer_wait+0x14e>
    806a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    806c:	423d      	tst	r5, r7
    806e:	d007      	beq.n	8080 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8070:	8b75      	ldrh	r5, [r6, #26]
    8072:	423d      	tst	r5, r7
    8074:	d000      	beq.n	8078 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8076:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8078:	7985      	ldrb	r5, [r0, #6]
    807a:	2d01      	cmp	r5, #1
    807c:	d009      	beq.n	8092 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    807e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    8080:	465d      	mov	r5, fp
    8082:	3d01      	subs	r5, #1
    8084:	b2ad      	uxth	r5, r5
    8086:	46ab      	mov	fp, r5
    8088:	e769      	b.n	7f5e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    808a:	2302      	movs	r3, #2
    808c:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    808e:	3302      	adds	r3, #2
    8090:	e74f      	b.n	7f32 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8092:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    8094:	e7f4      	b.n	8080 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    8096:	7943      	ldrb	r3, [r0, #5]
    8098:	2b01      	cmp	r3, #1
    809a:	d00b      	beq.n	80b4 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    809c:	2b00      	cmp	r3, #0
    809e:	d134      	bne.n	810a <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    80a0:	79c2      	ldrb	r2, [r0, #7]
    80a2:	2a00      	cmp	r2, #0
    80a4:	d100      	bne.n	80a8 <spi_write_buffer_wait+0x194>
    80a6:	e744      	b.n	7f32 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    80a8:	2404      	movs	r4, #4
			while (flush_length) {
    80aa:	465b      	mov	r3, fp
    80ac:	465d      	mov	r5, fp
    80ae:	2b00      	cmp	r3, #0
    80b0:	d119      	bne.n	80e6 <spi_write_buffer_wait+0x1d2>
    80b2:	e73e      	b.n	7f32 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    80b4:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    80b6:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    80b8:	7e0b      	ldrb	r3, [r1, #24]
    80ba:	4213      	tst	r3, r2
    80bc:	d0fc      	beq.n	80b8 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    80be:	2300      	movs	r3, #0
    80c0:	e737      	b.n	7f32 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    80c2:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    80c4:	4223      	tst	r3, r4
    80c6:	d022      	beq.n	810e <spi_write_buffer_wait+0x1fa>
    80c8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    80ca:	4223      	tst	r3, r4
    80cc:	d007      	beq.n	80de <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    80ce:	8b4b      	ldrh	r3, [r1, #26]
    80d0:	4223      	tst	r3, r4
    80d2:	d000      	beq.n	80d6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    80d4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    80d6:	7983      	ldrb	r3, [r0, #6]
    80d8:	2b01      	cmp	r3, #1
    80da:	d010      	beq.n	80fe <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    80dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    80de:	3d01      	subs	r5, #1
    80e0:	b2ad      	uxth	r5, r5
			while (flush_length) {
    80e2:	2d00      	cmp	r5, #0
    80e4:	d015      	beq.n	8112 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    80e6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    80e8:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    80ea:	4223      	tst	r3, r4
    80ec:	d1e9      	bne.n	80c2 <spi_write_buffer_wait+0x1ae>
    80ee:	4b0b      	ldr	r3, [pc, #44]	; (811c <spi_write_buffer_wait+0x208>)
    80f0:	7e0a      	ldrb	r2, [r1, #24]
    80f2:	4222      	tst	r2, r4
    80f4:	d1e5      	bne.n	80c2 <spi_write_buffer_wait+0x1ae>
    80f6:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    80f8:	2b00      	cmp	r3, #0
    80fa:	d1f9      	bne.n	80f0 <spi_write_buffer_wait+0x1dc>
    80fc:	e7e1      	b.n	80c2 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    80fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    8100:	e7ed      	b.n	80de <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    8102:	2312      	movs	r3, #18
    8104:	e715      	b.n	7f32 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    8106:	2312      	movs	r3, #18
    8108:	e713      	b.n	7f32 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    810a:	2300      	movs	r3, #0
    810c:	e711      	b.n	7f32 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    810e:	2312      	movs	r3, #18
    8110:	e70f      	b.n	7f32 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    8112:	2300      	movs	r3, #0
    8114:	e70d      	b.n	7f32 <spi_write_buffer_wait+0x1e>
    8116:	46c0      	nop			; (mov r8, r8)
    8118:	0000ffff 	.word	0x0000ffff
    811c:	00002710 	.word	0x00002710
    8120:	00002711 	.word	0x00002711

00008124 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    8124:	4770      	bx	lr
	...

00008128 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    8128:	b510      	push	{r4, lr}
    812a:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    812c:	4b0f      	ldr	r3, [pc, #60]	; (816c <sd_mmc_test_unit_ready+0x44>)
    812e:	4798      	blx	r3
    8130:	2801      	cmp	r0, #1
    8132:	d019      	beq.n	8168 <sd_mmc_test_unit_ready+0x40>
    8134:	2800      	cmp	r0, #0
    8136:	d003      	beq.n	8140 <sd_mmc_test_unit_ready+0x18>
    8138:	2802      	cmp	r0, #2
    813a:	d010      	beq.n	815e <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    813c:	2001      	movs	r0, #1
	}
}
    813e:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    8140:	4b0b      	ldr	r3, [pc, #44]	; (8170 <sd_mmc_test_unit_ready+0x48>)
    8142:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    8144:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    8146:	2b00      	cmp	r3, #0
    8148:	d1f9      	bne.n	813e <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    814a:	0020      	movs	r0, r4
    814c:	4b09      	ldr	r3, [pc, #36]	; (8174 <sd_mmc_test_unit_ready+0x4c>)
    814e:	4798      	blx	r3
    8150:	0003      	movs	r3, r0
    8152:	2003      	movs	r0, #3
    8154:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    8156:	4243      	negs	r3, r0
    8158:	4158      	adcs	r0, r3
    815a:	0040      	lsls	r0, r0, #1
    815c:	e7ef      	b.n	813e <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    815e:	2200      	movs	r2, #0
    8160:	4b03      	ldr	r3, [pc, #12]	; (8170 <sd_mmc_test_unit_ready+0x48>)
    8162:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    8164:	2002      	movs	r0, #2
    8166:	e7ea      	b.n	813e <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    8168:	2003      	movs	r0, #3
    816a:	e7e8      	b.n	813e <sd_mmc_test_unit_ready+0x16>
    816c:	00000c95 	.word	0x00000c95
    8170:	200002fc 	.word	0x200002fc
    8174:	00001145 	.word	0x00001145

00008178 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    8178:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    817a:	2000      	movs	r0, #0
    817c:	4b01      	ldr	r3, [pc, #4]	; (8184 <sd_mmc_test_unit_ready_0+0xc>)
    817e:	4798      	blx	r3
}
    8180:	bd10      	pop	{r4, pc}
    8182:	46c0      	nop			; (mov r8, r8)
    8184:	00008129 	.word	0x00008129

00008188 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    8188:	b570      	push	{r4, r5, r6, lr}
    818a:	0004      	movs	r4, r0
    818c:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    818e:	4b04      	ldr	r3, [pc, #16]	; (81a0 <sd_mmc_read_capacity+0x18>)
    8190:	4798      	blx	r3
    8192:	0040      	lsls	r0, r0, #1
    8194:	3801      	subs	r0, #1
    8196:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    8198:	0020      	movs	r0, r4
    819a:	4b02      	ldr	r3, [pc, #8]	; (81a4 <sd_mmc_read_capacity+0x1c>)
    819c:	4798      	blx	r3
}
    819e:	bd70      	pop	{r4, r5, r6, pc}
    81a0:	0000116d 	.word	0x0000116d
    81a4:	00008129 	.word	0x00008129

000081a8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    81a8:	b510      	push	{r4, lr}
    81aa:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    81ac:	2000      	movs	r0, #0
    81ae:	4b01      	ldr	r3, [pc, #4]	; (81b4 <sd_mmc_read_capacity_0+0xc>)
    81b0:	4798      	blx	r3
}
    81b2:	bd10      	pop	{r4, pc}
    81b4:	00008189 	.word	0x00008189

000081b8 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    81b8:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    81ba:	2000      	movs	r0, #0
    81bc:	4b01      	ldr	r3, [pc, #4]	; (81c4 <sd_mmc_wr_protect_0+0xc>)
    81be:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    81c0:	bd10      	pop	{r4, pc}
    81c2:	46c0      	nop			; (mov r8, r8)
    81c4:	00001195 	.word	0x00001195

000081c8 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    81c8:	2001      	movs	r0, #1
    81ca:	4770      	bx	lr

000081cc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    81cc:	b510      	push	{r4, lr}
    81ce:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    81d0:	2201      	movs	r2, #1
    81d2:	4b0c      	ldr	r3, [pc, #48]	; (8204 <sd_mmc_mem_2_ram+0x38>)
    81d4:	4798      	blx	r3
    81d6:	2800      	cmp	r0, #0
    81d8:	d004      	beq.n	81e4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    81da:	3802      	subs	r0, #2
    81dc:	4243      	negs	r3, r0
    81de:	4158      	adcs	r0, r3
    81e0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    81e2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    81e4:	2101      	movs	r1, #1
    81e6:	0020      	movs	r0, r4
    81e8:	4b07      	ldr	r3, [pc, #28]	; (8208 <sd_mmc_mem_2_ram+0x3c>)
    81ea:	4798      	blx	r3
    81ec:	0003      	movs	r3, r0
		return CTRL_FAIL;
    81ee:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    81f0:	2b00      	cmp	r3, #0
    81f2:	d1f6      	bne.n	81e2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    81f4:	2000      	movs	r0, #0
    81f6:	4b05      	ldr	r3, [pc, #20]	; (820c <sd_mmc_mem_2_ram+0x40>)
    81f8:	4798      	blx	r3
    81fa:	1e43      	subs	r3, r0, #1
    81fc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    81fe:	b2c0      	uxtb	r0, r0
    8200:	e7ef      	b.n	81e2 <sd_mmc_mem_2_ram+0x16>
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	00001199 	.word	0x00001199
    8208:	00001221 	.word	0x00001221
    820c:	0000124d 	.word	0x0000124d

00008210 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    8210:	b510      	push	{r4, lr}
    8212:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    8214:	0001      	movs	r1, r0
    8216:	2000      	movs	r0, #0
    8218:	4b01      	ldr	r3, [pc, #4]	; (8220 <sd_mmc_mem_2_ram_0+0x10>)
    821a:	4798      	blx	r3
}
    821c:	bd10      	pop	{r4, pc}
    821e:	46c0      	nop			; (mov r8, r8)
    8220:	000081cd 	.word	0x000081cd

00008224 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    8224:	b510      	push	{r4, lr}
    8226:	0014      	movs	r4, r2
 	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    8228:	2201      	movs	r2, #1
    822a:	4b0c      	ldr	r3, [pc, #48]	; (825c <sd_mmc_ram_2_mem+0x38>)
    822c:	4798      	blx	r3
    822e:	2800      	cmp	r0, #0
    8230:	d004      	beq.n	823c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    8232:	3802      	subs	r0, #2
    8234:	4243      	negs	r3, r0
    8236:	4158      	adcs	r0, r3
    8238:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    823a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    823c:	2101      	movs	r1, #1
    823e:	0020      	movs	r0, r4
    8240:	4b07      	ldr	r3, [pc, #28]	; (8260 <sd_mmc_ram_2_mem+0x3c>)
    8242:	4798      	blx	r3
    8244:	0003      	movs	r3, r0
		return CTRL_FAIL;
    8246:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    8248:	2b00      	cmp	r3, #0
    824a:	d1f6      	bne.n	823a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    824c:	2000      	movs	r0, #0
    824e:	4b05      	ldr	r3, [pc, #20]	; (8264 <sd_mmc_ram_2_mem+0x40>)
    8250:	4798      	blx	r3
    8252:	1e43      	subs	r3, r0, #1
    8254:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    8256:	b2c0      	uxtb	r0, r0
    8258:	e7ef      	b.n	823a <sd_mmc_ram_2_mem+0x16>
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	000012bd 	.word	0x000012bd
    8260:	0000132d 	.word	0x0000132d
    8264:	00001359 	.word	0x00001359

00008268 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    8268:	b510      	push	{r4, lr}
    826a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    826c:	0001      	movs	r1, r0
    826e:	2000      	movs	r0, #0
    8270:	4b01      	ldr	r3, [pc, #4]	; (8278 <sd_mmc_ram_2_mem_0+0x10>)
    8272:	4798      	blx	r3
}
    8274:	bd10      	pop	{r4, pc}
    8276:	46c0      	nop			; (mov r8, r8)
    8278:	00008225 	.word	0x00008225

0000827c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    827c:	b500      	push	{lr}
    827e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    8280:	466b      	mov	r3, sp
    8282:	1dd9      	adds	r1, r3, #7
    8284:	23ff      	movs	r3, #255	; 0xff
    8286:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    8288:	2201      	movs	r2, #1
    828a:	480b      	ldr	r0, [pc, #44]	; (82b8 <sd_mmc_spi_start_write_block+0x3c>)
    828c:	4b0b      	ldr	r3, [pc, #44]	; (82bc <sd_mmc_spi_start_write_block+0x40>)
    828e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    8290:	4b0b      	ldr	r3, [pc, #44]	; (82c0 <sd_mmc_spi_start_write_block+0x44>)
    8292:	881b      	ldrh	r3, [r3, #0]
    8294:	2b01      	cmp	r3, #1
    8296:	d00a      	beq.n	82ae <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    8298:	22fc      	movs	r2, #252	; 0xfc
    829a:	466b      	mov	r3, sp
    829c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    829e:	2201      	movs	r2, #1
    82a0:	466b      	mov	r3, sp
    82a2:	1d99      	adds	r1, r3, #6
    82a4:	4804      	ldr	r0, [pc, #16]	; (82b8 <sd_mmc_spi_start_write_block+0x3c>)
    82a6:	4b05      	ldr	r3, [pc, #20]	; (82bc <sd_mmc_spi_start_write_block+0x40>)
    82a8:	4798      	blx	r3
}
    82aa:	b003      	add	sp, #12
    82ac:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    82ae:	22fe      	movs	r2, #254	; 0xfe
    82b0:	466b      	mov	r3, sp
    82b2:	719a      	strb	r2, [r3, #6]
    82b4:	e7f3      	b.n	829e <sd_mmc_spi_start_write_block+0x22>
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	20000300 	.word	0x20000300
    82bc:	00007f15 	.word	0x00007f15
    82c0:	20000344 	.word	0x20000344

000082c4 <sd_mmc_spi_wait_busy>:
{
    82c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82c6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    82c8:	466b      	mov	r3, sp
    82ca:	1ddc      	adds	r4, r3, #7
    82cc:	23ff      	movs	r3, #255	; 0xff
    82ce:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    82d0:	4e12      	ldr	r6, [pc, #72]	; (831c <sd_mmc_spi_wait_busy+0x58>)
    82d2:	2201      	movs	r2, #1
    82d4:	0021      	movs	r1, r4
    82d6:	0030      	movs	r0, r6
    82d8:	4d11      	ldr	r5, [pc, #68]	; (8320 <sd_mmc_spi_wait_busy+0x5c>)
    82da:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    82dc:	23ff      	movs	r3, #255	; 0xff
    82de:	2201      	movs	r2, #1
    82e0:	0021      	movs	r1, r4
    82e2:	0030      	movs	r0, r6
    82e4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    82e6:	23ff      	movs	r3, #255	; 0xff
    82e8:	2201      	movs	r2, #1
    82ea:	0021      	movs	r1, r4
    82ec:	0030      	movs	r0, r6
    82ee:	47a8      	blx	r5
    82f0:	4c0c      	ldr	r4, [pc, #48]	; (8324 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    82f2:	466b      	mov	r3, sp
    82f4:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    82f6:	4e09      	ldr	r6, [pc, #36]	; (831c <sd_mmc_spi_wait_busy+0x58>)
    82f8:	4f09      	ldr	r7, [pc, #36]	; (8320 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    82fa:	782b      	ldrb	r3, [r5, #0]
    82fc:	2bff      	cmp	r3, #255	; 0xff
    82fe:	d009      	beq.n	8314 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8300:	23ff      	movs	r3, #255	; 0xff
    8302:	2201      	movs	r2, #1
    8304:	0029      	movs	r1, r5
    8306:	0030      	movs	r0, r6
    8308:	47b8      	blx	r7
    830a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    830c:	2c00      	cmp	r4, #0
    830e:	d1f4      	bne.n	82fa <sd_mmc_spi_wait_busy+0x36>
			return false;
    8310:	2000      	movs	r0, #0
    8312:	e000      	b.n	8316 <sd_mmc_spi_wait_busy+0x52>
	return true;
    8314:	2001      	movs	r0, #1
}
    8316:	b003      	add	sp, #12
    8318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    831a:	46c0      	nop			; (mov r8, r8)
    831c:	20000300 	.word	0x20000300
    8320:	00007d05 	.word	0x00007d05
    8324:	00030d40 	.word	0x00030d40

00008328 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    8328:	b570      	push	{r4, r5, r6, lr}
    832a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    832c:	4b14      	ldr	r3, [pc, #80]	; (8380 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    832e:	881c      	ldrh	r4, [r3, #0]
    8330:	2c01      	cmp	r4, #1
    8332:	d023      	beq.n	837c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    8334:	4b13      	ldr	r3, [pc, #76]	; (8384 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    8336:	8819      	ldrh	r1, [r3, #0]
    8338:	4b13      	ldr	r3, [pc, #76]	; (8388 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    833a:	6818      	ldr	r0, [r3, #0]
    833c:	4b13      	ldr	r3, [pc, #76]	; (838c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    833e:	4798      	blx	r3
		return true; // It is not the End of multi write
    8340:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    8342:	4284      	cmp	r4, r0
    8344:	d902      	bls.n	834c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    8346:	0018      	movs	r0, r3
    8348:	b002      	add	sp, #8
    834a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    834c:	466b      	mov	r3, sp
    834e:	1ddc      	adds	r4, r3, #7
    8350:	23ff      	movs	r3, #255	; 0xff
    8352:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8354:	4e0e      	ldr	r6, [pc, #56]	; (8390 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    8356:	2201      	movs	r2, #1
    8358:	0021      	movs	r1, r4
    835a:	0030      	movs	r0, r6
    835c:	4d0d      	ldr	r5, [pc, #52]	; (8394 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    835e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    8360:	23fd      	movs	r3, #253	; 0xfd
    8362:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8364:	2201      	movs	r2, #1
    8366:	0021      	movs	r1, r4
    8368:	0030      	movs	r0, r6
    836a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    836c:	4b0a      	ldr	r3, [pc, #40]	; (8398 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    836e:	4798      	blx	r3
    8370:	1e03      	subs	r3, r0, #0
    8372:	d1e8      	bne.n	8346 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8374:	2105      	movs	r1, #5
    8376:	4a09      	ldr	r2, [pc, #36]	; (839c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    8378:	7011      	strb	r1, [r2, #0]
		return false;
    837a:	e7e4      	b.n	8346 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    837c:	2301      	movs	r3, #1
    837e:	e7e2      	b.n	8346 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    8380:	20000344 	.word	0x20000344
    8384:	2000033c 	.word	0x2000033c
    8388:	2000034c 	.word	0x2000034c
    838c:	00008ed5 	.word	0x00008ed5
    8390:	20000300 	.word	0x20000300
    8394:	00007f15 	.word	0x00007f15
    8398:	000082c5 	.word	0x000082c5
    839c:	20000343 	.word	0x20000343

000083a0 <sd_mmc_spi_start_read_block>:
{
    83a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    83a2:	b083      	sub	sp, #12
	token = 0;
    83a4:	2200      	movs	r2, #0
    83a6:	466b      	mov	r3, sp
    83a8:	71da      	strb	r2, [r3, #7]
    83aa:	4c14      	ldr	r4, [pc, #80]	; (83fc <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    83ac:	466b      	mov	r3, sp
    83ae:	1ddd      	adds	r5, r3, #7
    83b0:	4e13      	ldr	r6, [pc, #76]	; (8400 <sd_mmc_spi_start_read_block+0x60>)
    83b2:	4f14      	ldr	r7, [pc, #80]	; (8404 <sd_mmc_spi_start_read_block+0x64>)
    83b4:	23ff      	movs	r3, #255	; 0xff
    83b6:	2201      	movs	r2, #1
    83b8:	0029      	movs	r1, r5
    83ba:	0030      	movs	r0, r6
    83bc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    83be:	782b      	ldrb	r3, [r5, #0]
    83c0:	220f      	movs	r2, #15
    83c2:	0019      	movs	r1, r3
    83c4:	4391      	bics	r1, r2
    83c6:	1e0a      	subs	r2, r1, #0
    83c8:	d009      	beq.n	83de <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    83ca:	2bfe      	cmp	r3, #254	; 0xfe
    83cc:	d013      	beq.n	83f6 <sd_mmc_spi_start_read_block+0x56>
    83ce:	3c01      	subs	r4, #1
		if (i-- == 0) {
    83d0:	2c00      	cmp	r4, #0
    83d2:	d1ef      	bne.n	83b4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    83d4:	2204      	movs	r2, #4
    83d6:	4b0c      	ldr	r3, [pc, #48]	; (8408 <sd_mmc_spi_start_read_block+0x68>)
    83d8:	701a      	strb	r2, [r3, #0]
			return false;
    83da:	2000      	movs	r0, #0
    83dc:	e00c      	b.n	83f8 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    83de:	075b      	lsls	r3, r3, #29
    83e0:	d004      	beq.n	83ec <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    83e2:	3207      	adds	r2, #7
    83e4:	4b08      	ldr	r3, [pc, #32]	; (8408 <sd_mmc_spi_start_read_block+0x68>)
    83e6:	701a      	strb	r2, [r3, #0]
			return false;
    83e8:	2000      	movs	r0, #0
    83ea:	e005      	b.n	83f8 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    83ec:	220b      	movs	r2, #11
    83ee:	4b06      	ldr	r3, [pc, #24]	; (8408 <sd_mmc_spi_start_read_block+0x68>)
    83f0:	701a      	strb	r2, [r3, #0]
			return false;
    83f2:	2000      	movs	r0, #0
    83f4:	e000      	b.n	83f8 <sd_mmc_spi_start_read_block+0x58>
	return true;
    83f6:	2001      	movs	r0, #1
}
    83f8:	b003      	add	sp, #12
    83fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83fc:	0007a120 	.word	0x0007a120
    8400:	20000300 	.word	0x20000300
    8404:	00007d05 	.word	0x00007d05
    8408:	20000343 	.word	0x20000343

0000840c <sd_mmc_spi_stop_write_block>:
{
    840c:	b530      	push	{r4, r5, lr}
    840e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    8410:	a901      	add	r1, sp, #4
    8412:	2301      	movs	r3, #1
    8414:	425b      	negs	r3, r3
    8416:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    8418:	4d14      	ldr	r5, [pc, #80]	; (846c <sd_mmc_spi_stop_write_block+0x60>)
    841a:	2202      	movs	r2, #2
    841c:	0028      	movs	r0, r5
    841e:	4b14      	ldr	r3, [pc, #80]	; (8470 <sd_mmc_spi_stop_write_block+0x64>)
    8420:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    8422:	466b      	mov	r3, sp
    8424:	1ddc      	adds	r4, r3, #7
    8426:	23ff      	movs	r3, #255	; 0xff
    8428:	2201      	movs	r2, #1
    842a:	0021      	movs	r1, r4
    842c:	0028      	movs	r0, r5
    842e:	4d11      	ldr	r5, [pc, #68]	; (8474 <sd_mmc_spi_stop_write_block+0x68>)
    8430:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    8432:	7822      	ldrb	r2, [r4, #0]
    8434:	2311      	movs	r3, #17
    8436:	4013      	ands	r3, r2
    8438:	2b01      	cmp	r3, #1
    843a:	d005      	beq.n	8448 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    843c:	2201      	movs	r2, #1
    843e:	4b0e      	ldr	r3, [pc, #56]	; (8478 <sd_mmc_spi_stop_write_block+0x6c>)
    8440:	701a      	strb	r2, [r3, #0]
		return false;
    8442:	2000      	movs	r0, #0
}
    8444:	b003      	add	sp, #12
    8446:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    8448:	231e      	movs	r3, #30
    844a:	401a      	ands	r2, r3
    844c:	2a04      	cmp	r2, #4
    844e:	d00b      	beq.n	8468 <sd_mmc_spi_stop_write_block+0x5c>
    8450:	2a0a      	cmp	r2, #10
    8452:	d104      	bne.n	845e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    8454:	3a02      	subs	r2, #2
    8456:	4b08      	ldr	r3, [pc, #32]	; (8478 <sd_mmc_spi_stop_write_block+0x6c>)
    8458:	701a      	strb	r2, [r3, #0]
		return false;
    845a:	2000      	movs	r0, #0
    845c:	e7f2      	b.n	8444 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    845e:	220a      	movs	r2, #10
    8460:	4b05      	ldr	r3, [pc, #20]	; (8478 <sd_mmc_spi_stop_write_block+0x6c>)
    8462:	701a      	strb	r2, [r3, #0]
		return false;
    8464:	2000      	movs	r0, #0
    8466:	e7ed      	b.n	8444 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    8468:	2001      	movs	r0, #1
    846a:	e7eb      	b.n	8444 <sd_mmc_spi_stop_write_block+0x38>
    846c:	20000300 	.word	0x20000300
    8470:	00007f15 	.word	0x00007f15
    8474:	00007d05 	.word	0x00007d05
    8478:	20000343 	.word	0x20000343

0000847c <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}


void sd_mmc_spi_init(void)
{
    847c:	b570      	push	{r4, r5, r6, lr}
    847e:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8480:	2500      	movs	r5, #0
    8482:	4b30      	ldr	r3, [pc, #192]	; (8544 <sd_mmc_spi_init+0xc8>)
    8484:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    8486:	a90f      	add	r1, sp, #60	; 0x3c
    8488:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    848a:	2601      	movs	r6, #1
    848c:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    848e:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    8490:	2025      	movs	r0, #37	; 0x25
    8492:	4b2d      	ldr	r3, [pc, #180]	; (8548 <sd_mmc_spi_init+0xcc>)
    8494:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    8496:	ac01      	add	r4, sp, #4
    8498:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    849a:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    849c:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    849e:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    84a0:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    84a2:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    84a4:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    84a6:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    84a8:	2324      	movs	r3, #36	; 0x24
    84aa:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    84ac:	220c      	movs	r2, #12
    84ae:	2100      	movs	r1, #0
    84b0:	a807      	add	r0, sp, #28
    84b2:	4b26      	ldr	r3, [pc, #152]	; (854c <sd_mmc_spi_init+0xd0>)
    84b4:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    84b6:	2380      	movs	r3, #128	; 0x80
    84b8:	025b      	lsls	r3, r3, #9
    84ba:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    84bc:	4b24      	ldr	r3, [pc, #144]	; (8550 <sd_mmc_spi_init+0xd4>)
    84be:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    84c0:	4b24      	ldr	r3, [pc, #144]	; (8554 <sd_mmc_spi_init+0xd8>)
    84c2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    84c4:	4b24      	ldr	r3, [pc, #144]	; (8558 <sd_mmc_spi_init+0xdc>)
    84c6:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    84c8:	4b24      	ldr	r3, [pc, #144]	; (855c <sd_mmc_spi_init+0xe0>)
    84ca:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    84cc:	4b24      	ldr	r3, [pc, #144]	; (8560 <sd_mmc_spi_init+0xe4>)
    84ce:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    84d0:	4d24      	ldr	r5, [pc, #144]	; (8564 <sd_mmc_spi_init+0xe8>)
    84d2:	0022      	movs	r2, r4
    84d4:	4924      	ldr	r1, [pc, #144]	; (8568 <sd_mmc_spi_init+0xec>)
    84d6:	0028      	movs	r0, r5
    84d8:	4b24      	ldr	r3, [pc, #144]	; (856c <sd_mmc_spi_init+0xf0>)
    84da:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    84dc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    84de:	0020      	movs	r0, r4
    84e0:	4b23      	ldr	r3, [pc, #140]	; (8570 <sd_mmc_spi_init+0xf4>)
    84e2:	4798      	blx	r3
    84e4:	231f      	movs	r3, #31
    84e6:	4018      	ands	r0, r3
    84e8:	4086      	lsls	r6, r0
    84ea:	4b22      	ldr	r3, [pc, #136]	; (8574 <sd_mmc_spi_init+0xf8>)
    84ec:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    84ee:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    84f0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    84f2:	2b00      	cmp	r3, #0
    84f4:	d1fc      	bne.n	84f0 <sd_mmc_spi_init+0x74>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    84f6:	6823      	ldr	r3, [r4, #0]
    84f8:	2202      	movs	r2, #2
    84fa:	4313      	orrs	r3, r2
    84fc:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    84fe:	4a1e      	ldr	r2, [pc, #120]	; (8578 <sd_mmc_spi_init+0xfc>)
    8500:	2300      	movs	r3, #0
    8502:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    8504:	7093      	strb	r3, [r2, #2]
	//spi_register_callback(&sd_mmc_master, sd_mmc_spi_write_callback, SPI_CALLBACK_BUFFER_TRANSMITTED);
	//spi_enable_callback(&sd_mmc_master, SPI_CALLBACK_BUFFER_RECEIVED);
	//spi_enable_callback(&sd_mmc_master, SPI_CALLBACK_BUFFER_TRANSMITTED);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    8506:	491d      	ldr	r1, [pc, #116]	; (857c <sd_mmc_spi_init+0x100>)
    8508:	7808      	ldrb	r0, [r1, #0]
    850a:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    850c:	4c1c      	ldr	r4, [pc, #112]	; (8580 <sd_mmc_spi_init+0x104>)
    850e:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    8510:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8512:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    8514:	2201      	movs	r2, #1
    8516:	4669      	mov	r1, sp
    8518:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    851a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    851c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    851e:	4b0a      	ldr	r3, [pc, #40]	; (8548 <sd_mmc_spi_init+0xcc>)
    8520:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8522:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    8524:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8526:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8528:	2900      	cmp	r1, #0
    852a:	d104      	bne.n	8536 <sd_mmc_spi_init+0xba>
		return &(ports[port_index]->Group[group_index]);
    852c:	0953      	lsrs	r3, r2, #5
    852e:	01db      	lsls	r3, r3, #7
    8530:	4914      	ldr	r1, [pc, #80]	; (8584 <sd_mmc_spi_init+0x108>)
    8532:	468c      	mov	ip, r1
    8534:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8536:	211f      	movs	r1, #31
    8538:	4011      	ands	r1, r2
    853a:	2201      	movs	r2, #1
    853c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    853e:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    8540:	b010      	add	sp, #64	; 0x40
    8542:	bd70      	pop	{r4, r5, r6, pc}
    8544:	20000343 	.word	0x20000343
    8548:	000089fd 	.word	0x000089fd
    854c:	000094c3 	.word	0x000094c3
    8550:	00040003 	.word	0x00040003
    8554:	00050003 	.word	0x00050003
    8558:	00060003 	.word	0x00060003
    855c:	00070003 	.word	0x00070003
    8560:	00061a80 	.word	0x00061a80
    8564:	20000300 	.word	0x20000300
    8568:	42000800 	.word	0x42000800
    856c:	00007af1 	.word	0x00007af1
    8570:	00002631 	.word	0x00002631
    8574:	e000e100 	.word	0xe000e100
    8578:	20000350 	.word	0x20000350
    857c:	20000124 	.word	0x20000124
    8580:	20000340 	.word	0x20000340
    8584:	41004400 	.word	0x41004400

00008588 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    8588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    858a:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    858c:	2200      	movs	r2, #0
    858e:	4b0d      	ldr	r3, [pc, #52]	; (85c4 <sd_mmc_spi_select_device+0x3c>)
    8590:	701a      	strb	r2, [r3, #0]
    8592:	000c      	movs	r4, r1
    8594:	4b0c      	ldr	r3, [pc, #48]	; (85c8 <sd_mmc_spi_select_device+0x40>)
    8596:	4299      	cmp	r1, r3
    8598:	d900      	bls.n	859c <sd_mmc_spi_select_device+0x14>
    859a:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    859c:	4d0b      	ldr	r5, [pc, #44]	; (85cc <sd_mmc_spi_select_device+0x44>)
    859e:	4e0c      	ldr	r6, [pc, #48]	; (85d0 <sd_mmc_spi_select_device+0x48>)
    85a0:	e001      	b.n	85a6 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    85a2:	08e3      	lsrs	r3, r4, #3
    85a4:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    85a6:	0021      	movs	r1, r4
    85a8:	0028      	movs	r0, r5
    85aa:	47b0      	blx	r6
    85ac:	2817      	cmp	r0, #23
    85ae:	d0f8      	beq.n	85a2 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    85b0:	0079      	lsls	r1, r7, #1
    85b2:	19cf      	adds	r7, r1, r7
    85b4:	4907      	ldr	r1, [pc, #28]	; (85d4 <sd_mmc_spi_select_device+0x4c>)
    85b6:	19c9      	adds	r1, r1, r7
    85b8:	2201      	movs	r2, #1
    85ba:	4804      	ldr	r0, [pc, #16]	; (85cc <sd_mmc_spi_select_device+0x44>)
    85bc:	4b06      	ldr	r3, [pc, #24]	; (85d8 <sd_mmc_spi_select_device+0x50>)
    85be:	4798      	blx	r3
}
    85c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	20000343 	.word	0x20000343
    85c8:	00b71b00 	.word	0x00b71b00
    85cc:	20000300 	.word	0x20000300
    85d0:	00007a39 	.word	0x00007a39
    85d4:	20000340 	.word	0x20000340
    85d8:	00007e21 	.word	0x00007e21

000085dc <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    85dc:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    85de:	2200      	movs	r2, #0
    85e0:	4b04      	ldr	r3, [pc, #16]	; (85f4 <sd_mmc_spi_deselect_device+0x18>)
    85e2:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    85e4:	0041      	lsls	r1, r0, #1
    85e6:	1808      	adds	r0, r1, r0
    85e8:	4903      	ldr	r1, [pc, #12]	; (85f8 <sd_mmc_spi_deselect_device+0x1c>)
    85ea:	1809      	adds	r1, r1, r0
    85ec:	4803      	ldr	r0, [pc, #12]	; (85fc <sd_mmc_spi_deselect_device+0x20>)
    85ee:	4b04      	ldr	r3, [pc, #16]	; (8600 <sd_mmc_spi_deselect_device+0x24>)
    85f0:	4798      	blx	r3
}
    85f2:	bd10      	pop	{r4, pc}
    85f4:	20000343 	.word	0x20000343
    85f8:	20000340 	.word	0x20000340
    85fc:	20000300 	.word	0x20000300
    8600:	00007e21 	.word	0x00007e21

00008604 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    8604:	b570      	push	{r4, r5, r6, lr}
    8606:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    8608:	22ff      	movs	r2, #255	; 0xff
    860a:	466b      	mov	r3, sp
    860c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    860e:	2200      	movs	r2, #0
    8610:	4b07      	ldr	r3, [pc, #28]	; (8630 <sd_mmc_spi_send_clock+0x2c>)
    8612:	701a      	strb	r2, [r3, #0]
    8614:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    8616:	4e07      	ldr	r6, [pc, #28]	; (8634 <sd_mmc_spi_send_clock+0x30>)
    8618:	4d07      	ldr	r5, [pc, #28]	; (8638 <sd_mmc_spi_send_clock+0x34>)
    861a:	2201      	movs	r2, #1
    861c:	466b      	mov	r3, sp
    861e:	1dd9      	adds	r1, r3, #7
    8620:	0030      	movs	r0, r6
    8622:	47a8      	blx	r5
    8624:	3c01      	subs	r4, #1
    8626:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    8628:	2c00      	cmp	r4, #0
    862a:	d1f6      	bne.n	861a <sd_mmc_spi_send_clock+0x16>
	}
}
    862c:	b002      	add	sp, #8
    862e:	bd70      	pop	{r4, r5, r6, pc}
    8630:	20000343 	.word	0x20000343
    8634:	20000300 	.word	0x20000300
    8638:	00007f15 	.word	0x00007f15

0000863c <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    863c:	b500      	push	{lr}
    863e:	b083      	sub	sp, #12
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
	uint8_t dummy = 0xFF;
    8640:	466b      	mov	r3, sp
    8642:	1dd9      	adds	r1, r3, #7
    8644:	23ff      	movs	r3, #255	; 0xff
    8646:	700b      	strb	r3, [r1, #0]
	//uint8_t r1; //! R1 response
	//uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8648:	2300      	movs	r3, #0
    864a:	4a05      	ldr	r2, [pc, #20]	; (8660 <sd_mmc_spi_send_cmd+0x24>)
    864c:	7013      	strb	r3, [r2, #0]
	//cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_cb_state.write_state = WRITE_ADTC_DUMMY;
    864e:	4a05      	ldr	r2, [pc, #20]	; (8664 <sd_mmc_spi_send_cmd+0x28>)
    8650:	7053      	strb	r3, [r2, #1]
	spi_write_buffer_job(&sd_mmc_master, &dummy, 1);
    8652:	2201      	movs	r2, #1
    8654:	4804      	ldr	r0, [pc, #16]	; (8668 <sd_mmc_spi_send_cmd+0x2c>)
    8656:	4b05      	ldr	r3, [pc, #20]	; (866c <sd_mmc_spi_send_cmd+0x30>)
    8658:	4798      	blx	r3
}
    865a:	2000      	movs	r0, #0
    865c:	b003      	add	sp, #12
    865e:	bd00      	pop	{pc}
    8660:	20000343 	.word	0x20000343
    8664:	2000037c 	.word	0x2000037c
    8668:	20000300 	.word	0x20000300
    866c:	0000012d 	.word	0x0000012d

00008670 <sd_mmc_spi_adtc_start>:
{
    8670:	b500      	push	{lr}
    8672:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    8674:	466b      	mov	r3, sp
    8676:	1dd9      	adds	r1, r3, #7
    8678:	23ff      	movs	r3, #255	; 0xff
    867a:	700b      	strb	r3, [r1, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    867c:	2300      	movs	r3, #0
    867e:	4a05      	ldr	r2, [pc, #20]	; (8694 <sd_mmc_spi_adtc_start+0x24>)
    8680:	7013      	strb	r3, [r2, #0]
	spi_cb_state.write_state = WRITE_ADTC_DUMMY;
    8682:	4a05      	ldr	r2, [pc, #20]	; (8698 <sd_mmc_spi_adtc_start+0x28>)
    8684:	7053      	strb	r3, [r2, #1]
	spi_write_buffer_job(&sd_mmc_master, &dummy, 1);
    8686:	2201      	movs	r2, #1
    8688:	4804      	ldr	r0, [pc, #16]	; (869c <sd_mmc_spi_adtc_start+0x2c>)
    868a:	4b05      	ldr	r3, [pc, #20]	; (86a0 <sd_mmc_spi_adtc_start+0x30>)
    868c:	4798      	blx	r3
	//spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
}
    868e:	b003      	add	sp, #12
    8690:	bd00      	pop	{pc}
    8692:	46c0      	nop			; (mov r8, r8)
    8694:	20000343 	.word	0x20000343
    8698:	2000037c 	.word	0x2000037c
    869c:	20000300 	.word	0x20000300
    86a0:	0000012d 	.word	0x0000012d

000086a4 <sd_mmc_spi_get_response>:
	return true; // Command complete
}

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    86a4:	4b01      	ldr	r3, [pc, #4]	; (86ac <sd_mmc_spi_get_response+0x8>)
    86a6:	6818      	ldr	r0, [r3, #0]
}
    86a8:	4770      	bx	lr
    86aa:	46c0      	nop			; (mov r8, r8)
    86ac:	20000348 	.word	0x20000348

000086b0 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    86b0:	b510      	push	{r4, lr}
    86b2:	b084      	sub	sp, #16
    86b4:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    86b6:	2200      	movs	r2, #0
    86b8:	4b14      	ldr	r3, [pc, #80]	; (870c <sd_mmc_spi_read_word+0x5c>)
    86ba:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    86bc:	4b14      	ldr	r3, [pc, #80]	; (8710 <sd_mmc_spi_read_word+0x60>)
    86be:	8819      	ldrh	r1, [r3, #0]
    86c0:	4b14      	ldr	r3, [pc, #80]	; (8714 <sd_mmc_spi_read_word+0x64>)
    86c2:	6818      	ldr	r0, [r3, #0]
    86c4:	4b14      	ldr	r3, [pc, #80]	; (8718 <sd_mmc_spi_read_word+0x68>)
    86c6:	4798      	blx	r3
    86c8:	2900      	cmp	r1, #0
    86ca:	d103      	bne.n	86d4 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    86cc:	4b13      	ldr	r3, [pc, #76]	; (871c <sd_mmc_spi_read_word+0x6c>)
    86ce:	4798      	blx	r3
    86d0:	2800      	cmp	r0, #0
    86d2:	d010      	beq.n	86f6 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    86d4:	23ff      	movs	r3, #255	; 0xff
    86d6:	2204      	movs	r2, #4
    86d8:	a901      	add	r1, sp, #4
    86da:	4811      	ldr	r0, [pc, #68]	; (8720 <sd_mmc_spi_read_word+0x70>)
    86dc:	4c11      	ldr	r4, [pc, #68]	; (8724 <sd_mmc_spi_read_word+0x74>)
    86de:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    86e0:	4b0c      	ldr	r3, [pc, #48]	; (8714 <sd_mmc_spi_read_word+0x64>)
    86e2:	681a      	ldr	r2, [r3, #0]
    86e4:	1d10      	adds	r0, r2, #4
    86e6:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    86e8:	4b09      	ldr	r3, [pc, #36]	; (8710 <sd_mmc_spi_read_word+0x60>)
    86ea:	8819      	ldrh	r1, [r3, #0]
    86ec:	4b0a      	ldr	r3, [pc, #40]	; (8718 <sd_mmc_spi_read_word+0x68>)
    86ee:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    86f0:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    86f2:	2900      	cmp	r1, #0
    86f4:	d001      	beq.n	86fa <sd_mmc_spi_read_word+0x4a>
}
    86f6:	b004      	add	sp, #16
    86f8:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    86fa:	23ff      	movs	r3, #255	; 0xff
    86fc:	2202      	movs	r2, #2
    86fe:	a903      	add	r1, sp, #12
    8700:	4807      	ldr	r0, [pc, #28]	; (8720 <sd_mmc_spi_read_word+0x70>)
    8702:	4c08      	ldr	r4, [pc, #32]	; (8724 <sd_mmc_spi_read_word+0x74>)
    8704:	47a0      	blx	r4
	return true;
    8706:	2001      	movs	r0, #1
    8708:	e7f5      	b.n	86f6 <sd_mmc_spi_read_word+0x46>
    870a:	46c0      	nop			; (mov r8, r8)
    870c:	20000343 	.word	0x20000343
    8710:	2000033c 	.word	0x2000033c
    8714:	2000034c 	.word	0x2000034c
    8718:	00008fe1 	.word	0x00008fe1
    871c:	000083a1 	.word	0x000083a1
    8720:	20000300 	.word	0x20000300
    8724:	00007d05 	.word	0x00007d05

00008728 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    8728:	b5f0      	push	{r4, r5, r6, r7, lr}
    872a:	46de      	mov	lr, fp
    872c:	4657      	mov	r7, sl
    872e:	4646      	mov	r6, r8
    8730:	b5c0      	push	{r6, r7, lr}
    8732:	b082      	sub	sp, #8
    8734:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8736:	2200      	movs	r2, #0
    8738:	4b17      	ldr	r3, [pc, #92]	; (8798 <sd_mmc_spi_start_read_blocks+0x70>)
    873a:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    873c:	1e4c      	subs	r4, r1, #1
    873e:	b2a4      	uxth	r4, r4
    8740:	2900      	cmp	r1, #0
    8742:	d026      	beq.n	8792 <sd_mmc_spi_start_read_blocks+0x6a>
    8744:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    8746:	4b15      	ldr	r3, [pc, #84]	; (879c <sd_mmc_spi_start_read_blocks+0x74>)
    8748:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    874a:	4f15      	ldr	r7, [pc, #84]	; (87a0 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    874c:	47d0      	blx	sl
    874e:	4680      	mov	r8, r0
    8750:	2800      	cmp	r0, #0
    8752:	d017      	beq.n	8784 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    8754:	883a      	ldrh	r2, [r7, #0]
    8756:	465b      	mov	r3, fp
    8758:	1999      	adds	r1, r3, r6
    875a:	23ff      	movs	r3, #255	; 0xff
    875c:	4811      	ldr	r0, [pc, #68]	; (87a4 <sd_mmc_spi_start_read_blocks+0x7c>)
    875e:	4d12      	ldr	r5, [pc, #72]	; (87a8 <sd_mmc_spi_start_read_blocks+0x80>)
    8760:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    8762:	883b      	ldrh	r3, [r7, #0]
    8764:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    8766:	4a11      	ldr	r2, [pc, #68]	; (87ac <sd_mmc_spi_start_read_blocks+0x84>)
    8768:	6811      	ldr	r1, [r2, #0]
    876a:	468c      	mov	ip, r1
    876c:	4463      	add	r3, ip
    876e:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8770:	23ff      	movs	r3, #255	; 0xff
    8772:	2202      	movs	r2, #2
    8774:	a901      	add	r1, sp, #4
    8776:	480b      	ldr	r0, [pc, #44]	; (87a4 <sd_mmc_spi_start_read_blocks+0x7c>)
    8778:	47a8      	blx	r5
	while (nb_block--) {
    877a:	3c01      	subs	r4, #1
    877c:	b2a4      	uxth	r4, r4
    877e:	4b0c      	ldr	r3, [pc, #48]	; (87b0 <sd_mmc_spi_start_read_blocks+0x88>)
    8780:	429c      	cmp	r4, r3
    8782:	d1e3      	bne.n	874c <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    8784:	4640      	mov	r0, r8
    8786:	b002      	add	sp, #8
    8788:	bc1c      	pop	{r2, r3, r4}
    878a:	4690      	mov	r8, r2
    878c:	469a      	mov	sl, r3
    878e:	46a3      	mov	fp, r4
    8790:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    8792:	2301      	movs	r3, #1
    8794:	4698      	mov	r8, r3
    8796:	e7f5      	b.n	8784 <sd_mmc_spi_start_read_blocks+0x5c>
    8798:	20000343 	.word	0x20000343
    879c:	000083a1 	.word	0x000083a1
    87a0:	2000033c 	.word	0x2000033c
    87a4:	20000300 	.word	0x20000300
    87a8:	00007d05 	.word	0x00007d05
    87ac:	2000034c 	.word	0x2000034c
    87b0:	0000ffff 	.word	0x0000ffff

000087b4 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    87b4:	2001      	movs	r0, #1
    87b6:	4770      	bx	lr

000087b8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    87b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    87ba:	46c6      	mov	lr, r8
    87bc:	b500      	push	{lr}
    87be:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    87c0:	2200      	movs	r2, #0
    87c2:	4b15      	ldr	r3, [pc, #84]	; (8818 <sd_mmc_spi_start_write_blocks+0x60>)
    87c4:	701a      	strb	r2, [r3, #0]
	pos = 0;
    87c6:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    87c8:	4f14      	ldr	r7, [pc, #80]	; (881c <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    87ca:	4e15      	ldr	r6, [pc, #84]	; (8820 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    87cc:	e000      	b.n	87d0 <sd_mmc_spi_start_write_blocks+0x18>
{
    87ce:	0021      	movs	r1, r4
	while (nb_block--) {
    87d0:	1e4c      	subs	r4, r1, #1
    87d2:	b2a4      	uxth	r4, r4
    87d4:	2900      	cmp	r1, #0
    87d6:	d01b      	beq.n	8810 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    87d8:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    87da:	8832      	ldrh	r2, [r6, #0]
    87dc:	4643      	mov	r3, r8
    87de:	1959      	adds	r1, r3, r5
    87e0:	4810      	ldr	r0, [pc, #64]	; (8824 <sd_mmc_spi_start_write_blocks+0x6c>)
    87e2:	4b11      	ldr	r3, [pc, #68]	; (8828 <sd_mmc_spi_start_write_blocks+0x70>)
    87e4:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    87e6:	8833      	ldrh	r3, [r6, #0]
    87e8:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    87ea:	4a10      	ldr	r2, [pc, #64]	; (882c <sd_mmc_spi_start_write_blocks+0x74>)
    87ec:	6811      	ldr	r1, [r2, #0]
    87ee:	468c      	mov	ip, r1
    87f0:	4463      	add	r3, ip
    87f2:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    87f4:	4b0e      	ldr	r3, [pc, #56]	; (8830 <sd_mmc_spi_start_write_blocks+0x78>)
    87f6:	4798      	blx	r3
    87f8:	2800      	cmp	r0, #0
    87fa:	d00a      	beq.n	8812 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    87fc:	2c00      	cmp	r4, #0
    87fe:	d0e6      	beq.n	87ce <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    8800:	4b0c      	ldr	r3, [pc, #48]	; (8834 <sd_mmc_spi_start_write_blocks+0x7c>)
    8802:	4798      	blx	r3
    8804:	2800      	cmp	r0, #0
    8806:	d1e2      	bne.n	87ce <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8808:	2205      	movs	r2, #5
    880a:	4b03      	ldr	r3, [pc, #12]	; (8818 <sd_mmc_spi_start_write_blocks+0x60>)
    880c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    880e:	e000      	b.n	8812 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    8810:	2001      	movs	r0, #1
}
    8812:	bc04      	pop	{r2}
    8814:	4690      	mov	r8, r2
    8816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8818:	20000343 	.word	0x20000343
    881c:	0000827d 	.word	0x0000827d
    8820:	2000033c 	.word	0x2000033c
    8824:	20000300 	.word	0x20000300
    8828:	00007f15 	.word	0x00007f15
    882c:	2000034c 	.word	0x2000034c
    8830:	0000840d 	.word	0x0000840d
    8834:	000082c5 	.word	0x000082c5

00008838 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    8838:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    883a:	4b05      	ldr	r3, [pc, #20]	; (8850 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    883c:	4798      	blx	r3
    883e:	2800      	cmp	r0, #0
    8840:	d103      	bne.n	884a <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8842:	2205      	movs	r2, #5
    8844:	4b03      	ldr	r3, [pc, #12]	; (8854 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    8846:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    8848:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    884a:	4b03      	ldr	r3, [pc, #12]	; (8858 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    884c:	4798      	blx	r3
    884e:	e7fb      	b.n	8848 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    8850:	000082c5 	.word	0x000082c5
    8854:	20000343 	.word	0x20000343
    8858:	00008329 	.word	0x00008329

0000885c <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    885c:	2001      	movs	r0, #1
    885e:	4770      	bx	lr

00008860 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    8860:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    8862:	2301      	movs	r3, #1
    8864:	2800      	cmp	r0, #0
    8866:	d001      	beq.n	886c <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8868:	0018      	movs	r0, r3
    886a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    886c:	4b01      	ldr	r3, [pc, #4]	; (8874 <mem_test_unit_ready+0x14>)
    886e:	4798      	blx	r3
    8870:	0003      	movs	r3, r0
    8872:	e7f9      	b.n	8868 <mem_test_unit_ready+0x8>
    8874:	00008179 	.word	0x00008179

00008878 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    8878:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    887a:	2301      	movs	r3, #1
    887c:	2800      	cmp	r0, #0
    887e:	d001      	beq.n	8884 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8880:	0018      	movs	r0, r3
    8882:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8884:	0008      	movs	r0, r1
    8886:	4b02      	ldr	r3, [pc, #8]	; (8890 <mem_read_capacity+0x18>)
    8888:	4798      	blx	r3
    888a:	0003      	movs	r3, r0
    888c:	e7f8      	b.n	8880 <mem_read_capacity+0x8>
    888e:	46c0      	nop			; (mov r8, r8)
    8890:	000081a9 	.word	0x000081a9

00008894 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    8894:	4243      	negs	r3, r0
    8896:	4158      	adcs	r0, r3
    8898:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    889a:	4770      	bx	lr

0000889c <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    889c:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    889e:	2000      	movs	r0, #0
    88a0:	2b00      	cmp	r3, #0
    88a2:	d101      	bne.n	88a8 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    88a4:	3001      	adds	r0, #1
    88a6:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    88a8:	4770      	bx	lr
	...

000088ac <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    88ac:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    88ae:	2301      	movs	r3, #1
    88b0:	2800      	cmp	r0, #0
    88b2:	d001      	beq.n	88b8 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    88b4:	0018      	movs	r0, r3
    88b6:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    88b8:	4b01      	ldr	r3, [pc, #4]	; (88c0 <mem_wr_protect+0x14>)
    88ba:	4798      	blx	r3
    88bc:	0003      	movs	r3, r0
    88be:	e7f9      	b.n	88b4 <mem_wr_protect+0x8>
    88c0:	000081b9 	.word	0x000081b9

000088c4 <mem_removal>:


bool mem_removal(U8 lun)
{
    88c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    88c6:	2301      	movs	r3, #1
    88c8:	2800      	cmp	r0, #0
    88ca:	d001      	beq.n	88d0 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    88cc:	0018      	movs	r0, r3
    88ce:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    88d0:	4b01      	ldr	r3, [pc, #4]	; (88d8 <mem_removal+0x14>)
    88d2:	4798      	blx	r3
    88d4:	0003      	movs	r3, r0
    88d6:	e7f9      	b.n	88cc <mem_removal+0x8>
    88d8:	000081c9 	.word	0x000081c9

000088dc <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    88dc:	2800      	cmp	r0, #0
    88de:	d101      	bne.n	88e4 <mem_name+0x8>
    88e0:	4801      	ldr	r0, [pc, #4]	; (88e8 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    88e2:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    88e4:	2000      	movs	r0, #0
    88e6:	e7fc      	b.n	88e2 <mem_name+0x6>
    88e8:	0000add0 	.word	0x0000add0

000088ec <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    88ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88ee:	0005      	movs	r5, r0
    88f0:	000e      	movs	r6, r1
    88f2:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    88f4:	4b07      	ldr	r3, [pc, #28]	; (8914 <memory_2_ram+0x28>)
    88f6:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    88f8:	2401      	movs	r4, #1
    88fa:	2d00      	cmp	r5, #0
    88fc:	d003      	beq.n	8906 <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    88fe:	4b06      	ldr	r3, [pc, #24]	; (8918 <memory_2_ram+0x2c>)
    8900:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8902:	0020      	movs	r0, r4
    8904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8906:	0039      	movs	r1, r7
    8908:	0030      	movs	r0, r6
    890a:	4b04      	ldr	r3, [pc, #16]	; (891c <memory_2_ram+0x30>)
    890c:	4798      	blx	r3
    890e:	0004      	movs	r4, r0
    8910:	e7f5      	b.n	88fe <memory_2_ram+0x12>
    8912:	46c0      	nop			; (mov r8, r8)
    8914:	0000673d 	.word	0x0000673d
    8918:	0000673f 	.word	0x0000673f
    891c:	00008211 	.word	0x00008211

00008920 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    8920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8922:	0005      	movs	r5, r0
    8924:	000e      	movs	r6, r1
    8926:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    8928:	4b07      	ldr	r3, [pc, #28]	; (8948 <ram_2_memory+0x28>)
    892a:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    892c:	2401      	movs	r4, #1
    892e:	2d00      	cmp	r5, #0
    8930:	d003      	beq.n	893a <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    8932:	4b06      	ldr	r3, [pc, #24]	; (894c <ram_2_memory+0x2c>)
    8934:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    8936:	0020      	movs	r0, r4
    8938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    893a:	0039      	movs	r1, r7
    893c:	0030      	movs	r0, r6
    893e:	4b04      	ldr	r3, [pc, #16]	; (8950 <ram_2_memory+0x30>)
    8940:	4798      	blx	r3
    8942:	0004      	movs	r4, r0
    8944:	e7f5      	b.n	8932 <ram_2_memory+0x12>
    8946:	46c0      	nop			; (mov r8, r8)
    8948:	00006741 	.word	0x00006741
    894c:	00006743 	.word	0x00006743
    8950:	00008269 	.word	0x00008269

00008954 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    8954:	4b0c      	ldr	r3, [pc, #48]	; (8988 <cpu_irq_enter_critical+0x34>)
    8956:	681b      	ldr	r3, [r3, #0]
    8958:	2b00      	cmp	r3, #0
    895a:	d106      	bne.n	896a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    895c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    8960:	2b00      	cmp	r3, #0
    8962:	d007      	beq.n	8974 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    8964:	2200      	movs	r2, #0
    8966:	4b09      	ldr	r3, [pc, #36]	; (898c <cpu_irq_enter_critical+0x38>)
    8968:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    896a:	4a07      	ldr	r2, [pc, #28]	; (8988 <cpu_irq_enter_critical+0x34>)
    896c:	6813      	ldr	r3, [r2, #0]
    896e:	3301      	adds	r3, #1
    8970:	6013      	str	r3, [r2, #0]
}
    8972:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    8974:	b672      	cpsid	i
    8976:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    897a:	2200      	movs	r2, #0
    897c:	4b04      	ldr	r3, [pc, #16]	; (8990 <cpu_irq_enter_critical+0x3c>)
    897e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8980:	3201      	adds	r2, #1
    8982:	4b02      	ldr	r3, [pc, #8]	; (898c <cpu_irq_enter_critical+0x38>)
    8984:	701a      	strb	r2, [r3, #0]
    8986:	e7f0      	b.n	896a <cpu_irq_enter_critical+0x16>
    8988:	20000354 	.word	0x20000354
    898c:	20000358 	.word	0x20000358
    8990:	20000125 	.word	0x20000125

00008994 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8994:	4b08      	ldr	r3, [pc, #32]	; (89b8 <cpu_irq_leave_critical+0x24>)
    8996:	681a      	ldr	r2, [r3, #0]
    8998:	3a01      	subs	r2, #1
    899a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    899c:	681b      	ldr	r3, [r3, #0]
    899e:	2b00      	cmp	r3, #0
    89a0:	d109      	bne.n	89b6 <cpu_irq_leave_critical+0x22>
    89a2:	4b06      	ldr	r3, [pc, #24]	; (89bc <cpu_irq_leave_critical+0x28>)
    89a4:	781b      	ldrb	r3, [r3, #0]
    89a6:	2b00      	cmp	r3, #0
    89a8:	d005      	beq.n	89b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    89aa:	2201      	movs	r2, #1
    89ac:	4b04      	ldr	r3, [pc, #16]	; (89c0 <cpu_irq_leave_critical+0x2c>)
    89ae:	701a      	strb	r2, [r3, #0]
    89b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    89b4:	b662      	cpsie	i
	}
}
    89b6:	4770      	bx	lr
    89b8:	20000354 	.word	0x20000354
    89bc:	20000358 	.word	0x20000358
    89c0:	20000125 	.word	0x20000125

000089c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    89c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89c6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    89c8:	ac01      	add	r4, sp, #4
    89ca:	2501      	movs	r5, #1
    89cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    89ce:	2700      	movs	r7, #0
    89d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    89d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    89d4:	0021      	movs	r1, r4
    89d6:	203e      	movs	r0, #62	; 0x3e
    89d8:	4e06      	ldr	r6, [pc, #24]	; (89f4 <system_board_init+0x30>)
    89da:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    89dc:	2280      	movs	r2, #128	; 0x80
    89de:	05d2      	lsls	r2, r2, #23
    89e0:	4b05      	ldr	r3, [pc, #20]	; (89f8 <system_board_init+0x34>)
    89e2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    89e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    89e6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    89e8:	0021      	movs	r1, r4
    89ea:	200f      	movs	r0, #15
    89ec:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    89ee:	b003      	add	sp, #12
    89f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89f2:	46c0      	nop			; (mov r8, r8)
    89f4:	000089fd 	.word	0x000089fd
    89f8:	41004480 	.word	0x41004480

000089fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    89fc:	b500      	push	{lr}
    89fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8a00:	ab01      	add	r3, sp, #4
    8a02:	2280      	movs	r2, #128	; 0x80
    8a04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8a06:	780a      	ldrb	r2, [r1, #0]
    8a08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    8a0a:	784a      	ldrb	r2, [r1, #1]
    8a0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    8a0e:	788a      	ldrb	r2, [r1, #2]
    8a10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8a12:	0019      	movs	r1, r3
    8a14:	4b01      	ldr	r3, [pc, #4]	; (8a1c <port_pin_set_config+0x20>)
    8a16:	4798      	blx	r3
}
    8a18:	b003      	add	sp, #12
    8a1a:	bd00      	pop	{pc}
    8a1c:	00008d51 	.word	0x00008d51

00008a20 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    8a20:	4a06      	ldr	r2, [pc, #24]	; (8a3c <system_gclk_init+0x1c>)
    8a22:	6993      	ldr	r3, [r2, #24]
    8a24:	2108      	movs	r1, #8
    8a26:	430b      	orrs	r3, r1
    8a28:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8a2a:	2201      	movs	r2, #1
    8a2c:	4b04      	ldr	r3, [pc, #16]	; (8a40 <system_gclk_init+0x20>)
    8a2e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8a30:	0019      	movs	r1, r3
    8a32:	780b      	ldrb	r3, [r1, #0]
    8a34:	4213      	tst	r3, r2
    8a36:	d1fc      	bne.n	8a32 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8a38:	4770      	bx	lr
    8a3a:	46c0      	nop			; (mov r8, r8)
    8a3c:	40000400 	.word	0x40000400
    8a40:	40000c00 	.word	0x40000c00

00008a44 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8a44:	b570      	push	{r4, r5, r6, lr}
    8a46:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8a48:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8a4a:	780d      	ldrb	r5, [r1, #0]
    8a4c:	022d      	lsls	r5, r5, #8
    8a4e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8a50:	784b      	ldrb	r3, [r1, #1]
    8a52:	2b00      	cmp	r3, #0
    8a54:	d002      	beq.n	8a5c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8a56:	2380      	movs	r3, #128	; 0x80
    8a58:	02db      	lsls	r3, r3, #11
    8a5a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8a5c:	7a4b      	ldrb	r3, [r1, #9]
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d002      	beq.n	8a68 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8a62:	2380      	movs	r3, #128	; 0x80
    8a64:	031b      	lsls	r3, r3, #12
    8a66:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8a68:	6848      	ldr	r0, [r1, #4]
    8a6a:	2801      	cmp	r0, #1
    8a6c:	d910      	bls.n	8a90 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8a6e:	1e43      	subs	r3, r0, #1
    8a70:	4218      	tst	r0, r3
    8a72:	d134      	bne.n	8ade <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8a74:	2802      	cmp	r0, #2
    8a76:	d930      	bls.n	8ada <system_gclk_gen_set_config+0x96>
    8a78:	2302      	movs	r3, #2
    8a7a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    8a7c:	3201      	adds	r2, #1
						mask <<= 1) {
    8a7e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8a80:	4298      	cmp	r0, r3
    8a82:	d8fb      	bhi.n	8a7c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8a84:	0212      	lsls	r2, r2, #8
    8a86:	4332      	orrs	r2, r6
    8a88:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8a8a:	2380      	movs	r3, #128	; 0x80
    8a8c:	035b      	lsls	r3, r3, #13
    8a8e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8a90:	7a0b      	ldrb	r3, [r1, #8]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d002      	beq.n	8a9c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8a96:	2380      	movs	r3, #128	; 0x80
    8a98:	039b      	lsls	r3, r3, #14
    8a9a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8a9c:	4a13      	ldr	r2, [pc, #76]	; (8aec <system_gclk_gen_set_config+0xa8>)
    8a9e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8aa0:	b25b      	sxtb	r3, r3
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	dbfb      	blt.n	8a9e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8aa6:	4b12      	ldr	r3, [pc, #72]	; (8af0 <system_gclk_gen_set_config+0xac>)
    8aa8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8aaa:	4b12      	ldr	r3, [pc, #72]	; (8af4 <system_gclk_gen_set_config+0xb0>)
    8aac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8aae:	4a0f      	ldr	r2, [pc, #60]	; (8aec <system_gclk_gen_set_config+0xa8>)
    8ab0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8ab2:	b25b      	sxtb	r3, r3
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	dbfb      	blt.n	8ab0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8ab8:	4b0c      	ldr	r3, [pc, #48]	; (8aec <system_gclk_gen_set_config+0xa8>)
    8aba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8abc:	001a      	movs	r2, r3
    8abe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8ac0:	b25b      	sxtb	r3, r3
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	dbfb      	blt.n	8abe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8ac6:	4a09      	ldr	r2, [pc, #36]	; (8aec <system_gclk_gen_set_config+0xa8>)
    8ac8:	6853      	ldr	r3, [r2, #4]
    8aca:	2180      	movs	r1, #128	; 0x80
    8acc:	0249      	lsls	r1, r1, #9
    8ace:	400b      	ands	r3, r1
    8ad0:	431d      	orrs	r5, r3
    8ad2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8ad4:	4b08      	ldr	r3, [pc, #32]	; (8af8 <system_gclk_gen_set_config+0xb4>)
    8ad6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8ad8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    8ada:	2200      	movs	r2, #0
    8adc:	e7d2      	b.n	8a84 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8ade:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8ae0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8ae2:	2380      	movs	r3, #128	; 0x80
    8ae4:	029b      	lsls	r3, r3, #10
    8ae6:	431d      	orrs	r5, r3
    8ae8:	e7d2      	b.n	8a90 <system_gclk_gen_set_config+0x4c>
    8aea:	46c0      	nop			; (mov r8, r8)
    8aec:	40000c00 	.word	0x40000c00
    8af0:	00008955 	.word	0x00008955
    8af4:	40000c08 	.word	0x40000c08
    8af8:	00008995 	.word	0x00008995

00008afc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8afc:	b510      	push	{r4, lr}
    8afe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b00:	4a0b      	ldr	r2, [pc, #44]	; (8b30 <system_gclk_gen_enable+0x34>)
    8b02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8b04:	b25b      	sxtb	r3, r3
    8b06:	2b00      	cmp	r3, #0
    8b08:	dbfb      	blt.n	8b02 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    8b0a:	4b0a      	ldr	r3, [pc, #40]	; (8b34 <system_gclk_gen_enable+0x38>)
    8b0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8b0e:	4b0a      	ldr	r3, [pc, #40]	; (8b38 <system_gclk_gen_enable+0x3c>)
    8b10:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b12:	4a07      	ldr	r2, [pc, #28]	; (8b30 <system_gclk_gen_enable+0x34>)
    8b14:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8b16:	b25b      	sxtb	r3, r3
    8b18:	2b00      	cmp	r3, #0
    8b1a:	dbfb      	blt.n	8b14 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8b1c:	4a04      	ldr	r2, [pc, #16]	; (8b30 <system_gclk_gen_enable+0x34>)
    8b1e:	6851      	ldr	r1, [r2, #4]
    8b20:	2380      	movs	r3, #128	; 0x80
    8b22:	025b      	lsls	r3, r3, #9
    8b24:	430b      	orrs	r3, r1
    8b26:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    8b28:	4b04      	ldr	r3, [pc, #16]	; (8b3c <system_gclk_gen_enable+0x40>)
    8b2a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8b2c:	bd10      	pop	{r4, pc}
    8b2e:	46c0      	nop			; (mov r8, r8)
    8b30:	40000c00 	.word	0x40000c00
    8b34:	00008955 	.word	0x00008955
    8b38:	40000c04 	.word	0x40000c04
    8b3c:	00008995 	.word	0x00008995

00008b40 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8b40:	b570      	push	{r4, r5, r6, lr}
    8b42:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b44:	4a1a      	ldr	r2, [pc, #104]	; (8bb0 <system_gclk_gen_get_hz+0x70>)
    8b46:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8b48:	b25b      	sxtb	r3, r3
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	dbfb      	blt.n	8b46 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    8b4e:	4b19      	ldr	r3, [pc, #100]	; (8bb4 <system_gclk_gen_get_hz+0x74>)
    8b50:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8b52:	4b19      	ldr	r3, [pc, #100]	; (8bb8 <system_gclk_gen_get_hz+0x78>)
    8b54:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b56:	4a16      	ldr	r2, [pc, #88]	; (8bb0 <system_gclk_gen_get_hz+0x70>)
    8b58:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8b5a:	b25b      	sxtb	r3, r3
    8b5c:	2b00      	cmp	r3, #0
    8b5e:	dbfb      	blt.n	8b58 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8b60:	4e13      	ldr	r6, [pc, #76]	; (8bb0 <system_gclk_gen_get_hz+0x70>)
    8b62:	6870      	ldr	r0, [r6, #4]
    8b64:	04c0      	lsls	r0, r0, #19
    8b66:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8b68:	4b14      	ldr	r3, [pc, #80]	; (8bbc <system_gclk_gen_get_hz+0x7c>)
    8b6a:	4798      	blx	r3
    8b6c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8b6e:	4b12      	ldr	r3, [pc, #72]	; (8bb8 <system_gclk_gen_get_hz+0x78>)
    8b70:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8b72:	6876      	ldr	r6, [r6, #4]
    8b74:	02f6      	lsls	r6, r6, #11
    8b76:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8b78:	4b11      	ldr	r3, [pc, #68]	; (8bc0 <system_gclk_gen_get_hz+0x80>)
    8b7a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b7c:	4a0c      	ldr	r2, [pc, #48]	; (8bb0 <system_gclk_gen_get_hz+0x70>)
    8b7e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8b80:	b25b      	sxtb	r3, r3
    8b82:	2b00      	cmp	r3, #0
    8b84:	dbfb      	blt.n	8b7e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8b86:	4b0a      	ldr	r3, [pc, #40]	; (8bb0 <system_gclk_gen_get_hz+0x70>)
    8b88:	689c      	ldr	r4, [r3, #8]
    8b8a:	0224      	lsls	r4, r4, #8
    8b8c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    8b8e:	4b0d      	ldr	r3, [pc, #52]	; (8bc4 <system_gclk_gen_get_hz+0x84>)
    8b90:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8b92:	2e00      	cmp	r6, #0
    8b94:	d107      	bne.n	8ba6 <system_gclk_gen_get_hz+0x66>
    8b96:	2c01      	cmp	r4, #1
    8b98:	d907      	bls.n	8baa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    8b9a:	0021      	movs	r1, r4
    8b9c:	0028      	movs	r0, r5
    8b9e:	4b0a      	ldr	r3, [pc, #40]	; (8bc8 <system_gclk_gen_get_hz+0x88>)
    8ba0:	4798      	blx	r3
    8ba2:	0005      	movs	r5, r0
    8ba4:	e001      	b.n	8baa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8ba6:	3401      	adds	r4, #1
    8ba8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    8baa:	0028      	movs	r0, r5
    8bac:	bd70      	pop	{r4, r5, r6, pc}
    8bae:	46c0      	nop			; (mov r8, r8)
    8bb0:	40000c00 	.word	0x40000c00
    8bb4:	00008955 	.word	0x00008955
    8bb8:	40000c04 	.word	0x40000c04
    8bbc:	00002c35 	.word	0x00002c35
    8bc0:	40000c08 	.word	0x40000c08
    8bc4:	00008995 	.word	0x00008995
    8bc8:	00008ed5 	.word	0x00008ed5

00008bcc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8bcc:	b510      	push	{r4, lr}
    8bce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8bd0:	4b06      	ldr	r3, [pc, #24]	; (8bec <system_gclk_chan_enable+0x20>)
    8bd2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8bd4:	4b06      	ldr	r3, [pc, #24]	; (8bf0 <system_gclk_chan_enable+0x24>)
    8bd6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8bd8:	4a06      	ldr	r2, [pc, #24]	; (8bf4 <system_gclk_chan_enable+0x28>)
    8bda:	8853      	ldrh	r3, [r2, #2]
    8bdc:	2180      	movs	r1, #128	; 0x80
    8bde:	01c9      	lsls	r1, r1, #7
    8be0:	430b      	orrs	r3, r1
    8be2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8be4:	4b04      	ldr	r3, [pc, #16]	; (8bf8 <system_gclk_chan_enable+0x2c>)
    8be6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8be8:	bd10      	pop	{r4, pc}
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	00008955 	.word	0x00008955
    8bf0:	40000c02 	.word	0x40000c02
    8bf4:	40000c00 	.word	0x40000c00
    8bf8:	00008995 	.word	0x00008995

00008bfc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8bfc:	b510      	push	{r4, lr}
    8bfe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8c00:	4b0f      	ldr	r3, [pc, #60]	; (8c40 <system_gclk_chan_disable+0x44>)
    8c02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8c04:	4b0f      	ldr	r3, [pc, #60]	; (8c44 <system_gclk_chan_disable+0x48>)
    8c06:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8c08:	4a0f      	ldr	r2, [pc, #60]	; (8c48 <system_gclk_chan_disable+0x4c>)
    8c0a:	8853      	ldrh	r3, [r2, #2]
    8c0c:	051b      	lsls	r3, r3, #20
    8c0e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8c10:	8853      	ldrh	r3, [r2, #2]
    8c12:	490e      	ldr	r1, [pc, #56]	; (8c4c <system_gclk_chan_disable+0x50>)
    8c14:	400b      	ands	r3, r1
    8c16:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8c18:	8853      	ldrh	r3, [r2, #2]
    8c1a:	490d      	ldr	r1, [pc, #52]	; (8c50 <system_gclk_chan_disable+0x54>)
    8c1c:	400b      	ands	r3, r1
    8c1e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8c20:	0011      	movs	r1, r2
    8c22:	2280      	movs	r2, #128	; 0x80
    8c24:	01d2      	lsls	r2, r2, #7
    8c26:	884b      	ldrh	r3, [r1, #2]
    8c28:	4213      	tst	r3, r2
    8c2a:	d1fc      	bne.n	8c26 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8c2c:	4906      	ldr	r1, [pc, #24]	; (8c48 <system_gclk_chan_disable+0x4c>)
    8c2e:	884a      	ldrh	r2, [r1, #2]
    8c30:	0203      	lsls	r3, r0, #8
    8c32:	4806      	ldr	r0, [pc, #24]	; (8c4c <system_gclk_chan_disable+0x50>)
    8c34:	4002      	ands	r2, r0
    8c36:	4313      	orrs	r3, r2
    8c38:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    8c3a:	4b06      	ldr	r3, [pc, #24]	; (8c54 <system_gclk_chan_disable+0x58>)
    8c3c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8c3e:	bd10      	pop	{r4, pc}
    8c40:	00008955 	.word	0x00008955
    8c44:	40000c02 	.word	0x40000c02
    8c48:	40000c00 	.word	0x40000c00
    8c4c:	fffff0ff 	.word	0xfffff0ff
    8c50:	ffffbfff 	.word	0xffffbfff
    8c54:	00008995 	.word	0x00008995

00008c58 <system_gclk_chan_set_config>:
{
    8c58:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8c5a:	780c      	ldrb	r4, [r1, #0]
    8c5c:	0224      	lsls	r4, r4, #8
    8c5e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8c60:	4b02      	ldr	r3, [pc, #8]	; (8c6c <system_gclk_chan_set_config+0x14>)
    8c62:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8c64:	b2a4      	uxth	r4, r4
    8c66:	4b02      	ldr	r3, [pc, #8]	; (8c70 <system_gclk_chan_set_config+0x18>)
    8c68:	805c      	strh	r4, [r3, #2]
}
    8c6a:	bd10      	pop	{r4, pc}
    8c6c:	00008bfd 	.word	0x00008bfd
    8c70:	40000c00 	.word	0x40000c00

00008c74 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8c74:	b510      	push	{r4, lr}
    8c76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8c78:	4b06      	ldr	r3, [pc, #24]	; (8c94 <system_gclk_chan_get_hz+0x20>)
    8c7a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8c7c:	4b06      	ldr	r3, [pc, #24]	; (8c98 <system_gclk_chan_get_hz+0x24>)
    8c7e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8c80:	4b06      	ldr	r3, [pc, #24]	; (8c9c <system_gclk_chan_get_hz+0x28>)
    8c82:	885c      	ldrh	r4, [r3, #2]
    8c84:	0524      	lsls	r4, r4, #20
    8c86:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8c88:	4b05      	ldr	r3, [pc, #20]	; (8ca0 <system_gclk_chan_get_hz+0x2c>)
    8c8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8c8c:	0020      	movs	r0, r4
    8c8e:	4b05      	ldr	r3, [pc, #20]	; (8ca4 <system_gclk_chan_get_hz+0x30>)
    8c90:	4798      	blx	r3
}
    8c92:	bd10      	pop	{r4, pc}
    8c94:	00008955 	.word	0x00008955
    8c98:	40000c02 	.word	0x40000c02
    8c9c:	40000c00 	.word	0x40000c00
    8ca0:	00008995 	.word	0x00008995
    8ca4:	00008b41 	.word	0x00008b41

00008ca8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8ca8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    8caa:	78d3      	ldrb	r3, [r2, #3]
    8cac:	2b00      	cmp	r3, #0
    8cae:	d135      	bne.n	8d1c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8cb0:	7813      	ldrb	r3, [r2, #0]
    8cb2:	2b80      	cmp	r3, #128	; 0x80
    8cb4:	d029      	beq.n	8d0a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8cb6:	061b      	lsls	r3, r3, #24
    8cb8:	2480      	movs	r4, #128	; 0x80
    8cba:	0264      	lsls	r4, r4, #9
    8cbc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8cbe:	7854      	ldrb	r4, [r2, #1]
    8cc0:	2502      	movs	r5, #2
    8cc2:	43ac      	bics	r4, r5
    8cc4:	d106      	bne.n	8cd4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8cc6:	7894      	ldrb	r4, [r2, #2]
    8cc8:	2c00      	cmp	r4, #0
    8cca:	d120      	bne.n	8d0e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    8ccc:	2480      	movs	r4, #128	; 0x80
    8cce:	02a4      	lsls	r4, r4, #10
    8cd0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8cd2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8cd4:	7854      	ldrb	r4, [r2, #1]
    8cd6:	3c01      	subs	r4, #1
    8cd8:	2c01      	cmp	r4, #1
    8cda:	d91c      	bls.n	8d16 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8cdc:	040d      	lsls	r5, r1, #16
    8cde:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8ce0:	24a0      	movs	r4, #160	; 0xa0
    8ce2:	05e4      	lsls	r4, r4, #23
    8ce4:	432c      	orrs	r4, r5
    8ce6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8ce8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8cea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8cec:	24d0      	movs	r4, #208	; 0xd0
    8cee:	0624      	lsls	r4, r4, #24
    8cf0:	432c      	orrs	r4, r5
    8cf2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8cf4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8cf6:	78d4      	ldrb	r4, [r2, #3]
    8cf8:	2c00      	cmp	r4, #0
    8cfa:	d122      	bne.n	8d42 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8cfc:	035b      	lsls	r3, r3, #13
    8cfe:	d51c      	bpl.n	8d3a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8d00:	7893      	ldrb	r3, [r2, #2]
    8d02:	2b01      	cmp	r3, #1
    8d04:	d01e      	beq.n	8d44 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    8d06:	6141      	str	r1, [r0, #20]
    8d08:	e017      	b.n	8d3a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    8d0a:	2300      	movs	r3, #0
    8d0c:	e7d7      	b.n	8cbe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8d0e:	24c0      	movs	r4, #192	; 0xc0
    8d10:	02e4      	lsls	r4, r4, #11
    8d12:	4323      	orrs	r3, r4
    8d14:	e7dd      	b.n	8cd2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8d16:	4c0d      	ldr	r4, [pc, #52]	; (8d4c <_system_pinmux_config+0xa4>)
    8d18:	4023      	ands	r3, r4
    8d1a:	e7df      	b.n	8cdc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8d1c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8d1e:	040c      	lsls	r4, r1, #16
    8d20:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8d22:	23a0      	movs	r3, #160	; 0xa0
    8d24:	05db      	lsls	r3, r3, #23
    8d26:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8d28:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    8d2a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8d2c:	23d0      	movs	r3, #208	; 0xd0
    8d2e:	061b      	lsls	r3, r3, #24
    8d30:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8d32:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8d34:	78d3      	ldrb	r3, [r2, #3]
    8d36:	2b00      	cmp	r3, #0
    8d38:	d103      	bne.n	8d42 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8d3a:	7853      	ldrb	r3, [r2, #1]
    8d3c:	3b01      	subs	r3, #1
    8d3e:	2b01      	cmp	r3, #1
    8d40:	d902      	bls.n	8d48 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8d42:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8d44:	6181      	str	r1, [r0, #24]
    8d46:	e7f8      	b.n	8d3a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    8d48:	6081      	str	r1, [r0, #8]
}
    8d4a:	e7fa      	b.n	8d42 <_system_pinmux_config+0x9a>
    8d4c:	fffbffff 	.word	0xfffbffff

00008d50 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8d50:	b510      	push	{r4, lr}
    8d52:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8d54:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8d56:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8d58:	2900      	cmp	r1, #0
    8d5a:	d104      	bne.n	8d66 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8d5c:	0943      	lsrs	r3, r0, #5
    8d5e:	01db      	lsls	r3, r3, #7
    8d60:	4905      	ldr	r1, [pc, #20]	; (8d78 <system_pinmux_pin_set_config+0x28>)
    8d62:	468c      	mov	ip, r1
    8d64:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8d66:	241f      	movs	r4, #31
    8d68:	4020      	ands	r0, r4
    8d6a:	2101      	movs	r1, #1
    8d6c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8d6e:	0018      	movs	r0, r3
    8d70:	4b02      	ldr	r3, [pc, #8]	; (8d7c <system_pinmux_pin_set_config+0x2c>)
    8d72:	4798      	blx	r3
}
    8d74:	bd10      	pop	{r4, pc}
    8d76:	46c0      	nop			; (mov r8, r8)
    8d78:	41004400 	.word	0x41004400
    8d7c:	00008ca9 	.word	0x00008ca9

00008d80 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8d80:	4770      	bx	lr
	...

00008d84 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8d84:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8d86:	4b05      	ldr	r3, [pc, #20]	; (8d9c <system_init+0x18>)
    8d88:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8d8a:	4b05      	ldr	r3, [pc, #20]	; (8da0 <system_init+0x1c>)
    8d8c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8d8e:	4b05      	ldr	r3, [pc, #20]	; (8da4 <system_init+0x20>)
    8d90:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8d92:	4b05      	ldr	r3, [pc, #20]	; (8da8 <system_init+0x24>)
    8d94:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8d96:	4b05      	ldr	r3, [pc, #20]	; (8dac <system_init+0x28>)
    8d98:	4798      	blx	r3
}
    8d9a:	bd10      	pop	{r4, pc}
    8d9c:	00002f91 	.word	0x00002f91
    8da0:	000089c5 	.word	0x000089c5
    8da4:	00008d81 	.word	0x00008d81
    8da8:	000021c5 	.word	0x000021c5
    8dac:	00008d81 	.word	0x00008d81

00008db0 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    8db0:	4770      	bx	lr
	...

00008db4 <Reset_Handler>:
{
    8db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8db6:	4a2a      	ldr	r2, [pc, #168]	; (8e60 <Reset_Handler+0xac>)
    8db8:	4b2a      	ldr	r3, [pc, #168]	; (8e64 <Reset_Handler+0xb0>)
    8dba:	429a      	cmp	r2, r3
    8dbc:	d011      	beq.n	8de2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8dbe:	001a      	movs	r2, r3
    8dc0:	4b29      	ldr	r3, [pc, #164]	; (8e68 <Reset_Handler+0xb4>)
    8dc2:	429a      	cmp	r2, r3
    8dc4:	d20d      	bcs.n	8de2 <Reset_Handler+0x2e>
    8dc6:	4a29      	ldr	r2, [pc, #164]	; (8e6c <Reset_Handler+0xb8>)
    8dc8:	3303      	adds	r3, #3
    8dca:	1a9b      	subs	r3, r3, r2
    8dcc:	089b      	lsrs	r3, r3, #2
    8dce:	3301      	adds	r3, #1
    8dd0:	009b      	lsls	r3, r3, #2
    8dd2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8dd4:	4823      	ldr	r0, [pc, #140]	; (8e64 <Reset_Handler+0xb0>)
    8dd6:	4922      	ldr	r1, [pc, #136]	; (8e60 <Reset_Handler+0xac>)
    8dd8:	588c      	ldr	r4, [r1, r2]
    8dda:	5084      	str	r4, [r0, r2]
    8ddc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8dde:	429a      	cmp	r2, r3
    8de0:	d1fa      	bne.n	8dd8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8de2:	4a23      	ldr	r2, [pc, #140]	; (8e70 <Reset_Handler+0xbc>)
    8de4:	4b23      	ldr	r3, [pc, #140]	; (8e74 <Reset_Handler+0xc0>)
    8de6:	429a      	cmp	r2, r3
    8de8:	d20a      	bcs.n	8e00 <Reset_Handler+0x4c>
    8dea:	43d3      	mvns	r3, r2
    8dec:	4921      	ldr	r1, [pc, #132]	; (8e74 <Reset_Handler+0xc0>)
    8dee:	185b      	adds	r3, r3, r1
    8df0:	2103      	movs	r1, #3
    8df2:	438b      	bics	r3, r1
    8df4:	3304      	adds	r3, #4
    8df6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8df8:	2100      	movs	r1, #0
    8dfa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8dfc:	4293      	cmp	r3, r2
    8dfe:	d1fc      	bne.n	8dfa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8e00:	4a1d      	ldr	r2, [pc, #116]	; (8e78 <Reset_Handler+0xc4>)
    8e02:	21ff      	movs	r1, #255	; 0xff
    8e04:	4b1d      	ldr	r3, [pc, #116]	; (8e7c <Reset_Handler+0xc8>)
    8e06:	438b      	bics	r3, r1
    8e08:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8e0a:	39fd      	subs	r1, #253	; 0xfd
    8e0c:	2390      	movs	r3, #144	; 0x90
    8e0e:	005b      	lsls	r3, r3, #1
    8e10:	4a1b      	ldr	r2, [pc, #108]	; (8e80 <Reset_Handler+0xcc>)
    8e12:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8e14:	4a1b      	ldr	r2, [pc, #108]	; (8e84 <Reset_Handler+0xd0>)
    8e16:	78d3      	ldrb	r3, [r2, #3]
    8e18:	2503      	movs	r5, #3
    8e1a:	43ab      	bics	r3, r5
    8e1c:	2402      	movs	r4, #2
    8e1e:	4323      	orrs	r3, r4
    8e20:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8e22:	78d3      	ldrb	r3, [r2, #3]
    8e24:	270c      	movs	r7, #12
    8e26:	43bb      	bics	r3, r7
    8e28:	2608      	movs	r6, #8
    8e2a:	4333      	orrs	r3, r6
    8e2c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8e2e:	4b16      	ldr	r3, [pc, #88]	; (8e88 <Reset_Handler+0xd4>)
    8e30:	7b98      	ldrb	r0, [r3, #14]
    8e32:	2230      	movs	r2, #48	; 0x30
    8e34:	4390      	bics	r0, r2
    8e36:	2220      	movs	r2, #32
    8e38:	4310      	orrs	r0, r2
    8e3a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8e3c:	7b99      	ldrb	r1, [r3, #14]
    8e3e:	43b9      	bics	r1, r7
    8e40:	4331      	orrs	r1, r6
    8e42:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8e44:	7b9a      	ldrb	r2, [r3, #14]
    8e46:	43aa      	bics	r2, r5
    8e48:	4322      	orrs	r2, r4
    8e4a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8e4c:	4a0f      	ldr	r2, [pc, #60]	; (8e8c <Reset_Handler+0xd8>)
    8e4e:	6853      	ldr	r3, [r2, #4]
    8e50:	2180      	movs	r1, #128	; 0x80
    8e52:	430b      	orrs	r3, r1
    8e54:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8e56:	4b0e      	ldr	r3, [pc, #56]	; (8e90 <Reset_Handler+0xdc>)
    8e58:	4798      	blx	r3
        main();
    8e5a:	4b0e      	ldr	r3, [pc, #56]	; (8e94 <Reset_Handler+0xe0>)
    8e5c:	4798      	blx	r3
    8e5e:	e7fe      	b.n	8e5e <Reset_Handler+0xaa>
    8e60:	0000aea8 	.word	0x0000aea8
    8e64:	20000000 	.word	0x20000000
    8e68:	2000018c 	.word	0x2000018c
    8e6c:	20000004 	.word	0x20000004
    8e70:	2000018c 	.word	0x2000018c
    8e74:	20000e50 	.word	0x20000e50
    8e78:	e000ed00 	.word	0xe000ed00
    8e7c:	00000000 	.word	0x00000000
    8e80:	41007000 	.word	0x41007000
    8e84:	41005000 	.word	0x41005000
    8e88:	41004800 	.word	0x41004800
    8e8c:	41004000 	.word	0x41004000
    8e90:	00009469 	.word	0x00009469
    8e94:	00006041 	.word	0x00006041

00008e98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8e98:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8e9a:	4a06      	ldr	r2, [pc, #24]	; (8eb4 <_sbrk+0x1c>)
    8e9c:	6812      	ldr	r2, [r2, #0]
    8e9e:	2a00      	cmp	r2, #0
    8ea0:	d004      	beq.n	8eac <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8ea2:	4a04      	ldr	r2, [pc, #16]	; (8eb4 <_sbrk+0x1c>)
    8ea4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8ea6:	18c3      	adds	r3, r0, r3
    8ea8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8eaa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8eac:	4902      	ldr	r1, [pc, #8]	; (8eb8 <_sbrk+0x20>)
    8eae:	4a01      	ldr	r2, [pc, #4]	; (8eb4 <_sbrk+0x1c>)
    8eb0:	6011      	str	r1, [r2, #0]
    8eb2:	e7f6      	b.n	8ea2 <_sbrk+0xa>
    8eb4:	2000035c 	.word	0x2000035c
    8eb8:	20002e50 	.word	0x20002e50

00008ebc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8ebc:	2001      	movs	r0, #1
    8ebe:	4240      	negs	r0, r0
    8ec0:	4770      	bx	lr

00008ec2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8ec2:	2380      	movs	r3, #128	; 0x80
    8ec4:	019b      	lsls	r3, r3, #6
    8ec6:	604b      	str	r3, [r1, #4]

	return 0;
}
    8ec8:	2000      	movs	r0, #0
    8eca:	4770      	bx	lr

00008ecc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8ecc:	2001      	movs	r0, #1
    8ece:	4770      	bx	lr

00008ed0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8ed0:	2000      	movs	r0, #0
    8ed2:	4770      	bx	lr

00008ed4 <__udivsi3>:
    8ed4:	2200      	movs	r2, #0
    8ed6:	0843      	lsrs	r3, r0, #1
    8ed8:	428b      	cmp	r3, r1
    8eda:	d374      	bcc.n	8fc6 <__udivsi3+0xf2>
    8edc:	0903      	lsrs	r3, r0, #4
    8ede:	428b      	cmp	r3, r1
    8ee0:	d35f      	bcc.n	8fa2 <__udivsi3+0xce>
    8ee2:	0a03      	lsrs	r3, r0, #8
    8ee4:	428b      	cmp	r3, r1
    8ee6:	d344      	bcc.n	8f72 <__udivsi3+0x9e>
    8ee8:	0b03      	lsrs	r3, r0, #12
    8eea:	428b      	cmp	r3, r1
    8eec:	d328      	bcc.n	8f40 <__udivsi3+0x6c>
    8eee:	0c03      	lsrs	r3, r0, #16
    8ef0:	428b      	cmp	r3, r1
    8ef2:	d30d      	bcc.n	8f10 <__udivsi3+0x3c>
    8ef4:	22ff      	movs	r2, #255	; 0xff
    8ef6:	0209      	lsls	r1, r1, #8
    8ef8:	ba12      	rev	r2, r2
    8efa:	0c03      	lsrs	r3, r0, #16
    8efc:	428b      	cmp	r3, r1
    8efe:	d302      	bcc.n	8f06 <__udivsi3+0x32>
    8f00:	1212      	asrs	r2, r2, #8
    8f02:	0209      	lsls	r1, r1, #8
    8f04:	d065      	beq.n	8fd2 <__udivsi3+0xfe>
    8f06:	0b03      	lsrs	r3, r0, #12
    8f08:	428b      	cmp	r3, r1
    8f0a:	d319      	bcc.n	8f40 <__udivsi3+0x6c>
    8f0c:	e000      	b.n	8f10 <__udivsi3+0x3c>
    8f0e:	0a09      	lsrs	r1, r1, #8
    8f10:	0bc3      	lsrs	r3, r0, #15
    8f12:	428b      	cmp	r3, r1
    8f14:	d301      	bcc.n	8f1a <__udivsi3+0x46>
    8f16:	03cb      	lsls	r3, r1, #15
    8f18:	1ac0      	subs	r0, r0, r3
    8f1a:	4152      	adcs	r2, r2
    8f1c:	0b83      	lsrs	r3, r0, #14
    8f1e:	428b      	cmp	r3, r1
    8f20:	d301      	bcc.n	8f26 <__udivsi3+0x52>
    8f22:	038b      	lsls	r3, r1, #14
    8f24:	1ac0      	subs	r0, r0, r3
    8f26:	4152      	adcs	r2, r2
    8f28:	0b43      	lsrs	r3, r0, #13
    8f2a:	428b      	cmp	r3, r1
    8f2c:	d301      	bcc.n	8f32 <__udivsi3+0x5e>
    8f2e:	034b      	lsls	r3, r1, #13
    8f30:	1ac0      	subs	r0, r0, r3
    8f32:	4152      	adcs	r2, r2
    8f34:	0b03      	lsrs	r3, r0, #12
    8f36:	428b      	cmp	r3, r1
    8f38:	d301      	bcc.n	8f3e <__udivsi3+0x6a>
    8f3a:	030b      	lsls	r3, r1, #12
    8f3c:	1ac0      	subs	r0, r0, r3
    8f3e:	4152      	adcs	r2, r2
    8f40:	0ac3      	lsrs	r3, r0, #11
    8f42:	428b      	cmp	r3, r1
    8f44:	d301      	bcc.n	8f4a <__udivsi3+0x76>
    8f46:	02cb      	lsls	r3, r1, #11
    8f48:	1ac0      	subs	r0, r0, r3
    8f4a:	4152      	adcs	r2, r2
    8f4c:	0a83      	lsrs	r3, r0, #10
    8f4e:	428b      	cmp	r3, r1
    8f50:	d301      	bcc.n	8f56 <__udivsi3+0x82>
    8f52:	028b      	lsls	r3, r1, #10
    8f54:	1ac0      	subs	r0, r0, r3
    8f56:	4152      	adcs	r2, r2
    8f58:	0a43      	lsrs	r3, r0, #9
    8f5a:	428b      	cmp	r3, r1
    8f5c:	d301      	bcc.n	8f62 <__udivsi3+0x8e>
    8f5e:	024b      	lsls	r3, r1, #9
    8f60:	1ac0      	subs	r0, r0, r3
    8f62:	4152      	adcs	r2, r2
    8f64:	0a03      	lsrs	r3, r0, #8
    8f66:	428b      	cmp	r3, r1
    8f68:	d301      	bcc.n	8f6e <__udivsi3+0x9a>
    8f6a:	020b      	lsls	r3, r1, #8
    8f6c:	1ac0      	subs	r0, r0, r3
    8f6e:	4152      	adcs	r2, r2
    8f70:	d2cd      	bcs.n	8f0e <__udivsi3+0x3a>
    8f72:	09c3      	lsrs	r3, r0, #7
    8f74:	428b      	cmp	r3, r1
    8f76:	d301      	bcc.n	8f7c <__udivsi3+0xa8>
    8f78:	01cb      	lsls	r3, r1, #7
    8f7a:	1ac0      	subs	r0, r0, r3
    8f7c:	4152      	adcs	r2, r2
    8f7e:	0983      	lsrs	r3, r0, #6
    8f80:	428b      	cmp	r3, r1
    8f82:	d301      	bcc.n	8f88 <__udivsi3+0xb4>
    8f84:	018b      	lsls	r3, r1, #6
    8f86:	1ac0      	subs	r0, r0, r3
    8f88:	4152      	adcs	r2, r2
    8f8a:	0943      	lsrs	r3, r0, #5
    8f8c:	428b      	cmp	r3, r1
    8f8e:	d301      	bcc.n	8f94 <__udivsi3+0xc0>
    8f90:	014b      	lsls	r3, r1, #5
    8f92:	1ac0      	subs	r0, r0, r3
    8f94:	4152      	adcs	r2, r2
    8f96:	0903      	lsrs	r3, r0, #4
    8f98:	428b      	cmp	r3, r1
    8f9a:	d301      	bcc.n	8fa0 <__udivsi3+0xcc>
    8f9c:	010b      	lsls	r3, r1, #4
    8f9e:	1ac0      	subs	r0, r0, r3
    8fa0:	4152      	adcs	r2, r2
    8fa2:	08c3      	lsrs	r3, r0, #3
    8fa4:	428b      	cmp	r3, r1
    8fa6:	d301      	bcc.n	8fac <__udivsi3+0xd8>
    8fa8:	00cb      	lsls	r3, r1, #3
    8faa:	1ac0      	subs	r0, r0, r3
    8fac:	4152      	adcs	r2, r2
    8fae:	0883      	lsrs	r3, r0, #2
    8fb0:	428b      	cmp	r3, r1
    8fb2:	d301      	bcc.n	8fb8 <__udivsi3+0xe4>
    8fb4:	008b      	lsls	r3, r1, #2
    8fb6:	1ac0      	subs	r0, r0, r3
    8fb8:	4152      	adcs	r2, r2
    8fba:	0843      	lsrs	r3, r0, #1
    8fbc:	428b      	cmp	r3, r1
    8fbe:	d301      	bcc.n	8fc4 <__udivsi3+0xf0>
    8fc0:	004b      	lsls	r3, r1, #1
    8fc2:	1ac0      	subs	r0, r0, r3
    8fc4:	4152      	adcs	r2, r2
    8fc6:	1a41      	subs	r1, r0, r1
    8fc8:	d200      	bcs.n	8fcc <__udivsi3+0xf8>
    8fca:	4601      	mov	r1, r0
    8fcc:	4152      	adcs	r2, r2
    8fce:	4610      	mov	r0, r2
    8fd0:	4770      	bx	lr
    8fd2:	e7ff      	b.n	8fd4 <__udivsi3+0x100>
    8fd4:	b501      	push	{r0, lr}
    8fd6:	2000      	movs	r0, #0
    8fd8:	f000 f8f0 	bl	91bc <__aeabi_idiv0>
    8fdc:	bd02      	pop	{r1, pc}
    8fde:	46c0      	nop			; (mov r8, r8)

00008fe0 <__aeabi_uidivmod>:
    8fe0:	2900      	cmp	r1, #0
    8fe2:	d0f7      	beq.n	8fd4 <__udivsi3+0x100>
    8fe4:	e776      	b.n	8ed4 <__udivsi3>
    8fe6:	4770      	bx	lr

00008fe8 <__divsi3>:
    8fe8:	4603      	mov	r3, r0
    8fea:	430b      	orrs	r3, r1
    8fec:	d47f      	bmi.n	90ee <__divsi3+0x106>
    8fee:	2200      	movs	r2, #0
    8ff0:	0843      	lsrs	r3, r0, #1
    8ff2:	428b      	cmp	r3, r1
    8ff4:	d374      	bcc.n	90e0 <__divsi3+0xf8>
    8ff6:	0903      	lsrs	r3, r0, #4
    8ff8:	428b      	cmp	r3, r1
    8ffa:	d35f      	bcc.n	90bc <__divsi3+0xd4>
    8ffc:	0a03      	lsrs	r3, r0, #8
    8ffe:	428b      	cmp	r3, r1
    9000:	d344      	bcc.n	908c <__divsi3+0xa4>
    9002:	0b03      	lsrs	r3, r0, #12
    9004:	428b      	cmp	r3, r1
    9006:	d328      	bcc.n	905a <__divsi3+0x72>
    9008:	0c03      	lsrs	r3, r0, #16
    900a:	428b      	cmp	r3, r1
    900c:	d30d      	bcc.n	902a <__divsi3+0x42>
    900e:	22ff      	movs	r2, #255	; 0xff
    9010:	0209      	lsls	r1, r1, #8
    9012:	ba12      	rev	r2, r2
    9014:	0c03      	lsrs	r3, r0, #16
    9016:	428b      	cmp	r3, r1
    9018:	d302      	bcc.n	9020 <__divsi3+0x38>
    901a:	1212      	asrs	r2, r2, #8
    901c:	0209      	lsls	r1, r1, #8
    901e:	d065      	beq.n	90ec <__divsi3+0x104>
    9020:	0b03      	lsrs	r3, r0, #12
    9022:	428b      	cmp	r3, r1
    9024:	d319      	bcc.n	905a <__divsi3+0x72>
    9026:	e000      	b.n	902a <__divsi3+0x42>
    9028:	0a09      	lsrs	r1, r1, #8
    902a:	0bc3      	lsrs	r3, r0, #15
    902c:	428b      	cmp	r3, r1
    902e:	d301      	bcc.n	9034 <__divsi3+0x4c>
    9030:	03cb      	lsls	r3, r1, #15
    9032:	1ac0      	subs	r0, r0, r3
    9034:	4152      	adcs	r2, r2
    9036:	0b83      	lsrs	r3, r0, #14
    9038:	428b      	cmp	r3, r1
    903a:	d301      	bcc.n	9040 <__divsi3+0x58>
    903c:	038b      	lsls	r3, r1, #14
    903e:	1ac0      	subs	r0, r0, r3
    9040:	4152      	adcs	r2, r2
    9042:	0b43      	lsrs	r3, r0, #13
    9044:	428b      	cmp	r3, r1
    9046:	d301      	bcc.n	904c <__divsi3+0x64>
    9048:	034b      	lsls	r3, r1, #13
    904a:	1ac0      	subs	r0, r0, r3
    904c:	4152      	adcs	r2, r2
    904e:	0b03      	lsrs	r3, r0, #12
    9050:	428b      	cmp	r3, r1
    9052:	d301      	bcc.n	9058 <__divsi3+0x70>
    9054:	030b      	lsls	r3, r1, #12
    9056:	1ac0      	subs	r0, r0, r3
    9058:	4152      	adcs	r2, r2
    905a:	0ac3      	lsrs	r3, r0, #11
    905c:	428b      	cmp	r3, r1
    905e:	d301      	bcc.n	9064 <__divsi3+0x7c>
    9060:	02cb      	lsls	r3, r1, #11
    9062:	1ac0      	subs	r0, r0, r3
    9064:	4152      	adcs	r2, r2
    9066:	0a83      	lsrs	r3, r0, #10
    9068:	428b      	cmp	r3, r1
    906a:	d301      	bcc.n	9070 <__divsi3+0x88>
    906c:	028b      	lsls	r3, r1, #10
    906e:	1ac0      	subs	r0, r0, r3
    9070:	4152      	adcs	r2, r2
    9072:	0a43      	lsrs	r3, r0, #9
    9074:	428b      	cmp	r3, r1
    9076:	d301      	bcc.n	907c <__divsi3+0x94>
    9078:	024b      	lsls	r3, r1, #9
    907a:	1ac0      	subs	r0, r0, r3
    907c:	4152      	adcs	r2, r2
    907e:	0a03      	lsrs	r3, r0, #8
    9080:	428b      	cmp	r3, r1
    9082:	d301      	bcc.n	9088 <__divsi3+0xa0>
    9084:	020b      	lsls	r3, r1, #8
    9086:	1ac0      	subs	r0, r0, r3
    9088:	4152      	adcs	r2, r2
    908a:	d2cd      	bcs.n	9028 <__divsi3+0x40>
    908c:	09c3      	lsrs	r3, r0, #7
    908e:	428b      	cmp	r3, r1
    9090:	d301      	bcc.n	9096 <__divsi3+0xae>
    9092:	01cb      	lsls	r3, r1, #7
    9094:	1ac0      	subs	r0, r0, r3
    9096:	4152      	adcs	r2, r2
    9098:	0983      	lsrs	r3, r0, #6
    909a:	428b      	cmp	r3, r1
    909c:	d301      	bcc.n	90a2 <__divsi3+0xba>
    909e:	018b      	lsls	r3, r1, #6
    90a0:	1ac0      	subs	r0, r0, r3
    90a2:	4152      	adcs	r2, r2
    90a4:	0943      	lsrs	r3, r0, #5
    90a6:	428b      	cmp	r3, r1
    90a8:	d301      	bcc.n	90ae <__divsi3+0xc6>
    90aa:	014b      	lsls	r3, r1, #5
    90ac:	1ac0      	subs	r0, r0, r3
    90ae:	4152      	adcs	r2, r2
    90b0:	0903      	lsrs	r3, r0, #4
    90b2:	428b      	cmp	r3, r1
    90b4:	d301      	bcc.n	90ba <__divsi3+0xd2>
    90b6:	010b      	lsls	r3, r1, #4
    90b8:	1ac0      	subs	r0, r0, r3
    90ba:	4152      	adcs	r2, r2
    90bc:	08c3      	lsrs	r3, r0, #3
    90be:	428b      	cmp	r3, r1
    90c0:	d301      	bcc.n	90c6 <__divsi3+0xde>
    90c2:	00cb      	lsls	r3, r1, #3
    90c4:	1ac0      	subs	r0, r0, r3
    90c6:	4152      	adcs	r2, r2
    90c8:	0883      	lsrs	r3, r0, #2
    90ca:	428b      	cmp	r3, r1
    90cc:	d301      	bcc.n	90d2 <__divsi3+0xea>
    90ce:	008b      	lsls	r3, r1, #2
    90d0:	1ac0      	subs	r0, r0, r3
    90d2:	4152      	adcs	r2, r2
    90d4:	0843      	lsrs	r3, r0, #1
    90d6:	428b      	cmp	r3, r1
    90d8:	d301      	bcc.n	90de <__divsi3+0xf6>
    90da:	004b      	lsls	r3, r1, #1
    90dc:	1ac0      	subs	r0, r0, r3
    90de:	4152      	adcs	r2, r2
    90e0:	1a41      	subs	r1, r0, r1
    90e2:	d200      	bcs.n	90e6 <__divsi3+0xfe>
    90e4:	4601      	mov	r1, r0
    90e6:	4152      	adcs	r2, r2
    90e8:	4610      	mov	r0, r2
    90ea:	4770      	bx	lr
    90ec:	e05d      	b.n	91aa <__divsi3+0x1c2>
    90ee:	0fca      	lsrs	r2, r1, #31
    90f0:	d000      	beq.n	90f4 <__divsi3+0x10c>
    90f2:	4249      	negs	r1, r1
    90f4:	1003      	asrs	r3, r0, #32
    90f6:	d300      	bcc.n	90fa <__divsi3+0x112>
    90f8:	4240      	negs	r0, r0
    90fa:	4053      	eors	r3, r2
    90fc:	2200      	movs	r2, #0
    90fe:	469c      	mov	ip, r3
    9100:	0903      	lsrs	r3, r0, #4
    9102:	428b      	cmp	r3, r1
    9104:	d32d      	bcc.n	9162 <__divsi3+0x17a>
    9106:	0a03      	lsrs	r3, r0, #8
    9108:	428b      	cmp	r3, r1
    910a:	d312      	bcc.n	9132 <__divsi3+0x14a>
    910c:	22fc      	movs	r2, #252	; 0xfc
    910e:	0189      	lsls	r1, r1, #6
    9110:	ba12      	rev	r2, r2
    9112:	0a03      	lsrs	r3, r0, #8
    9114:	428b      	cmp	r3, r1
    9116:	d30c      	bcc.n	9132 <__divsi3+0x14a>
    9118:	0189      	lsls	r1, r1, #6
    911a:	1192      	asrs	r2, r2, #6
    911c:	428b      	cmp	r3, r1
    911e:	d308      	bcc.n	9132 <__divsi3+0x14a>
    9120:	0189      	lsls	r1, r1, #6
    9122:	1192      	asrs	r2, r2, #6
    9124:	428b      	cmp	r3, r1
    9126:	d304      	bcc.n	9132 <__divsi3+0x14a>
    9128:	0189      	lsls	r1, r1, #6
    912a:	d03a      	beq.n	91a2 <__divsi3+0x1ba>
    912c:	1192      	asrs	r2, r2, #6
    912e:	e000      	b.n	9132 <__divsi3+0x14a>
    9130:	0989      	lsrs	r1, r1, #6
    9132:	09c3      	lsrs	r3, r0, #7
    9134:	428b      	cmp	r3, r1
    9136:	d301      	bcc.n	913c <__divsi3+0x154>
    9138:	01cb      	lsls	r3, r1, #7
    913a:	1ac0      	subs	r0, r0, r3
    913c:	4152      	adcs	r2, r2
    913e:	0983      	lsrs	r3, r0, #6
    9140:	428b      	cmp	r3, r1
    9142:	d301      	bcc.n	9148 <__divsi3+0x160>
    9144:	018b      	lsls	r3, r1, #6
    9146:	1ac0      	subs	r0, r0, r3
    9148:	4152      	adcs	r2, r2
    914a:	0943      	lsrs	r3, r0, #5
    914c:	428b      	cmp	r3, r1
    914e:	d301      	bcc.n	9154 <__divsi3+0x16c>
    9150:	014b      	lsls	r3, r1, #5
    9152:	1ac0      	subs	r0, r0, r3
    9154:	4152      	adcs	r2, r2
    9156:	0903      	lsrs	r3, r0, #4
    9158:	428b      	cmp	r3, r1
    915a:	d301      	bcc.n	9160 <__divsi3+0x178>
    915c:	010b      	lsls	r3, r1, #4
    915e:	1ac0      	subs	r0, r0, r3
    9160:	4152      	adcs	r2, r2
    9162:	08c3      	lsrs	r3, r0, #3
    9164:	428b      	cmp	r3, r1
    9166:	d301      	bcc.n	916c <__divsi3+0x184>
    9168:	00cb      	lsls	r3, r1, #3
    916a:	1ac0      	subs	r0, r0, r3
    916c:	4152      	adcs	r2, r2
    916e:	0883      	lsrs	r3, r0, #2
    9170:	428b      	cmp	r3, r1
    9172:	d301      	bcc.n	9178 <__divsi3+0x190>
    9174:	008b      	lsls	r3, r1, #2
    9176:	1ac0      	subs	r0, r0, r3
    9178:	4152      	adcs	r2, r2
    917a:	d2d9      	bcs.n	9130 <__divsi3+0x148>
    917c:	0843      	lsrs	r3, r0, #1
    917e:	428b      	cmp	r3, r1
    9180:	d301      	bcc.n	9186 <__divsi3+0x19e>
    9182:	004b      	lsls	r3, r1, #1
    9184:	1ac0      	subs	r0, r0, r3
    9186:	4152      	adcs	r2, r2
    9188:	1a41      	subs	r1, r0, r1
    918a:	d200      	bcs.n	918e <__divsi3+0x1a6>
    918c:	4601      	mov	r1, r0
    918e:	4663      	mov	r3, ip
    9190:	4152      	adcs	r2, r2
    9192:	105b      	asrs	r3, r3, #1
    9194:	4610      	mov	r0, r2
    9196:	d301      	bcc.n	919c <__divsi3+0x1b4>
    9198:	4240      	negs	r0, r0
    919a:	2b00      	cmp	r3, #0
    919c:	d500      	bpl.n	91a0 <__divsi3+0x1b8>
    919e:	4249      	negs	r1, r1
    91a0:	4770      	bx	lr
    91a2:	4663      	mov	r3, ip
    91a4:	105b      	asrs	r3, r3, #1
    91a6:	d300      	bcc.n	91aa <__divsi3+0x1c2>
    91a8:	4240      	negs	r0, r0
    91aa:	b501      	push	{r0, lr}
    91ac:	2000      	movs	r0, #0
    91ae:	f000 f805 	bl	91bc <__aeabi_idiv0>
    91b2:	bd02      	pop	{r1, pc}

000091b4 <__aeabi_idivmod>:
    91b4:	2900      	cmp	r1, #0
    91b6:	d0f8      	beq.n	91aa <__divsi3+0x1c2>
    91b8:	e716      	b.n	8fe8 <__divsi3>
    91ba:	4770      	bx	lr

000091bc <__aeabi_idiv0>:
    91bc:	4770      	bx	lr
    91be:	46c0      	nop			; (mov r8, r8)

000091c0 <__clzsi2>:
    91c0:	211c      	movs	r1, #28
    91c2:	2301      	movs	r3, #1
    91c4:	041b      	lsls	r3, r3, #16
    91c6:	4298      	cmp	r0, r3
    91c8:	d301      	bcc.n	91ce <__clzsi2+0xe>
    91ca:	0c00      	lsrs	r0, r0, #16
    91cc:	3910      	subs	r1, #16
    91ce:	0a1b      	lsrs	r3, r3, #8
    91d0:	4298      	cmp	r0, r3
    91d2:	d301      	bcc.n	91d8 <__clzsi2+0x18>
    91d4:	0a00      	lsrs	r0, r0, #8
    91d6:	3908      	subs	r1, #8
    91d8:	091b      	lsrs	r3, r3, #4
    91da:	4298      	cmp	r0, r3
    91dc:	d301      	bcc.n	91e2 <__clzsi2+0x22>
    91de:	0900      	lsrs	r0, r0, #4
    91e0:	3904      	subs	r1, #4
    91e2:	a202      	add	r2, pc, #8	; (adr r2, 91ec <__clzsi2+0x2c>)
    91e4:	5c10      	ldrb	r0, [r2, r0]
    91e6:	1840      	adds	r0, r0, r1
    91e8:	4770      	bx	lr
    91ea:	46c0      	nop			; (mov r8, r8)
    91ec:	02020304 	.word	0x02020304
    91f0:	01010101 	.word	0x01010101
	...

000091fc <__ctzsi2>:
    91fc:	4241      	negs	r1, r0
    91fe:	4008      	ands	r0, r1
    9200:	211c      	movs	r1, #28
    9202:	2301      	movs	r3, #1
    9204:	041b      	lsls	r3, r3, #16
    9206:	4298      	cmp	r0, r3
    9208:	d301      	bcc.n	920e <__ctzsi2+0x12>
    920a:	0c00      	lsrs	r0, r0, #16
    920c:	3910      	subs	r1, #16
    920e:	0a1b      	lsrs	r3, r3, #8
    9210:	4298      	cmp	r0, r3
    9212:	d301      	bcc.n	9218 <__ctzsi2+0x1c>
    9214:	0a00      	lsrs	r0, r0, #8
    9216:	3908      	subs	r1, #8
    9218:	091b      	lsrs	r3, r3, #4
    921a:	4298      	cmp	r0, r3
    921c:	d301      	bcc.n	9222 <__ctzsi2+0x26>
    921e:	0900      	lsrs	r0, r0, #4
    9220:	3904      	subs	r1, #4
    9222:	a202      	add	r2, pc, #8	; (adr r2, 922c <__ctzsi2+0x30>)
    9224:	5c10      	ldrb	r0, [r2, r0]
    9226:	1a40      	subs	r0, r0, r1
    9228:	4770      	bx	lr
    922a:	46c0      	nop			; (mov r8, r8)
    922c:	1d1d1c1b 	.word	0x1d1d1c1b
    9230:	1e1e1e1e 	.word	0x1e1e1e1e
    9234:	1f1f1f1f 	.word	0x1f1f1f1f
    9238:	1f1f1f1f 	.word	0x1f1f1f1f

0000923c <__aeabi_uldivmod>:
    923c:	2b00      	cmp	r3, #0
    923e:	d111      	bne.n	9264 <__aeabi_uldivmod+0x28>
    9240:	2a00      	cmp	r2, #0
    9242:	d10f      	bne.n	9264 <__aeabi_uldivmod+0x28>
    9244:	2900      	cmp	r1, #0
    9246:	d100      	bne.n	924a <__aeabi_uldivmod+0xe>
    9248:	2800      	cmp	r0, #0
    924a:	d002      	beq.n	9252 <__aeabi_uldivmod+0x16>
    924c:	2100      	movs	r1, #0
    924e:	43c9      	mvns	r1, r1
    9250:	1c08      	adds	r0, r1, #0
    9252:	b407      	push	{r0, r1, r2}
    9254:	4802      	ldr	r0, [pc, #8]	; (9260 <__aeabi_uldivmod+0x24>)
    9256:	a102      	add	r1, pc, #8	; (adr r1, 9260 <__aeabi_uldivmod+0x24>)
    9258:	1840      	adds	r0, r0, r1
    925a:	9002      	str	r0, [sp, #8]
    925c:	bd03      	pop	{r0, r1, pc}
    925e:	46c0      	nop			; (mov r8, r8)
    9260:	ffffff5d 	.word	0xffffff5d
    9264:	b403      	push	{r0, r1}
    9266:	4668      	mov	r0, sp
    9268:	b501      	push	{r0, lr}
    926a:	9802      	ldr	r0, [sp, #8]
    926c:	f000 f830 	bl	92d0 <__udivmoddi4>
    9270:	9b01      	ldr	r3, [sp, #4]
    9272:	469e      	mov	lr, r3
    9274:	b002      	add	sp, #8
    9276:	bc0c      	pop	{r2, r3}
    9278:	4770      	bx	lr
    927a:	46c0      	nop			; (mov r8, r8)

0000927c <__aeabi_lmul>:
    927c:	b5f0      	push	{r4, r5, r6, r7, lr}
    927e:	46ce      	mov	lr, r9
    9280:	4647      	mov	r7, r8
    9282:	0415      	lsls	r5, r2, #16
    9284:	0c2d      	lsrs	r5, r5, #16
    9286:	002e      	movs	r6, r5
    9288:	b580      	push	{r7, lr}
    928a:	0407      	lsls	r7, r0, #16
    928c:	0c14      	lsrs	r4, r2, #16
    928e:	0c3f      	lsrs	r7, r7, #16
    9290:	4699      	mov	r9, r3
    9292:	0c03      	lsrs	r3, r0, #16
    9294:	437e      	muls	r6, r7
    9296:	435d      	muls	r5, r3
    9298:	4367      	muls	r7, r4
    929a:	4363      	muls	r3, r4
    929c:	197f      	adds	r7, r7, r5
    929e:	0c34      	lsrs	r4, r6, #16
    92a0:	19e4      	adds	r4, r4, r7
    92a2:	469c      	mov	ip, r3
    92a4:	42a5      	cmp	r5, r4
    92a6:	d903      	bls.n	92b0 <__aeabi_lmul+0x34>
    92a8:	2380      	movs	r3, #128	; 0x80
    92aa:	025b      	lsls	r3, r3, #9
    92ac:	4698      	mov	r8, r3
    92ae:	44c4      	add	ip, r8
    92b0:	464b      	mov	r3, r9
    92b2:	4351      	muls	r1, r2
    92b4:	4343      	muls	r3, r0
    92b6:	0436      	lsls	r6, r6, #16
    92b8:	0c36      	lsrs	r6, r6, #16
    92ba:	0c25      	lsrs	r5, r4, #16
    92bc:	0424      	lsls	r4, r4, #16
    92be:	4465      	add	r5, ip
    92c0:	19a4      	adds	r4, r4, r6
    92c2:	1859      	adds	r1, r3, r1
    92c4:	1949      	adds	r1, r1, r5
    92c6:	0020      	movs	r0, r4
    92c8:	bc0c      	pop	{r2, r3}
    92ca:	4690      	mov	r8, r2
    92cc:	4699      	mov	r9, r3
    92ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000092d0 <__udivmoddi4>:
    92d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    92d2:	4657      	mov	r7, sl
    92d4:	464e      	mov	r6, r9
    92d6:	4645      	mov	r5, r8
    92d8:	46de      	mov	lr, fp
    92da:	b5e0      	push	{r5, r6, r7, lr}
    92dc:	0004      	movs	r4, r0
    92de:	b083      	sub	sp, #12
    92e0:	000d      	movs	r5, r1
    92e2:	4692      	mov	sl, r2
    92e4:	4699      	mov	r9, r3
    92e6:	428b      	cmp	r3, r1
    92e8:	d82f      	bhi.n	934a <__udivmoddi4+0x7a>
    92ea:	d02c      	beq.n	9346 <__udivmoddi4+0x76>
    92ec:	4649      	mov	r1, r9
    92ee:	4650      	mov	r0, sl
    92f0:	f000 f8ae 	bl	9450 <__clzdi2>
    92f4:	0029      	movs	r1, r5
    92f6:	0006      	movs	r6, r0
    92f8:	0020      	movs	r0, r4
    92fa:	f000 f8a9 	bl	9450 <__clzdi2>
    92fe:	1a33      	subs	r3, r6, r0
    9300:	4698      	mov	r8, r3
    9302:	3b20      	subs	r3, #32
    9304:	469b      	mov	fp, r3
    9306:	d500      	bpl.n	930a <__udivmoddi4+0x3a>
    9308:	e074      	b.n	93f4 <__udivmoddi4+0x124>
    930a:	4653      	mov	r3, sl
    930c:	465a      	mov	r2, fp
    930e:	4093      	lsls	r3, r2
    9310:	001f      	movs	r7, r3
    9312:	4653      	mov	r3, sl
    9314:	4642      	mov	r2, r8
    9316:	4093      	lsls	r3, r2
    9318:	001e      	movs	r6, r3
    931a:	42af      	cmp	r7, r5
    931c:	d829      	bhi.n	9372 <__udivmoddi4+0xa2>
    931e:	d026      	beq.n	936e <__udivmoddi4+0x9e>
    9320:	465b      	mov	r3, fp
    9322:	1ba4      	subs	r4, r4, r6
    9324:	41bd      	sbcs	r5, r7
    9326:	2b00      	cmp	r3, #0
    9328:	da00      	bge.n	932c <__udivmoddi4+0x5c>
    932a:	e079      	b.n	9420 <__udivmoddi4+0x150>
    932c:	2200      	movs	r2, #0
    932e:	2300      	movs	r3, #0
    9330:	9200      	str	r2, [sp, #0]
    9332:	9301      	str	r3, [sp, #4]
    9334:	2301      	movs	r3, #1
    9336:	465a      	mov	r2, fp
    9338:	4093      	lsls	r3, r2
    933a:	9301      	str	r3, [sp, #4]
    933c:	2301      	movs	r3, #1
    933e:	4642      	mov	r2, r8
    9340:	4093      	lsls	r3, r2
    9342:	9300      	str	r3, [sp, #0]
    9344:	e019      	b.n	937a <__udivmoddi4+0xaa>
    9346:	4282      	cmp	r2, r0
    9348:	d9d0      	bls.n	92ec <__udivmoddi4+0x1c>
    934a:	2200      	movs	r2, #0
    934c:	2300      	movs	r3, #0
    934e:	9200      	str	r2, [sp, #0]
    9350:	9301      	str	r3, [sp, #4]
    9352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9354:	2b00      	cmp	r3, #0
    9356:	d001      	beq.n	935c <__udivmoddi4+0x8c>
    9358:	601c      	str	r4, [r3, #0]
    935a:	605d      	str	r5, [r3, #4]
    935c:	9800      	ldr	r0, [sp, #0]
    935e:	9901      	ldr	r1, [sp, #4]
    9360:	b003      	add	sp, #12
    9362:	bc3c      	pop	{r2, r3, r4, r5}
    9364:	4690      	mov	r8, r2
    9366:	4699      	mov	r9, r3
    9368:	46a2      	mov	sl, r4
    936a:	46ab      	mov	fp, r5
    936c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    936e:	42a3      	cmp	r3, r4
    9370:	d9d6      	bls.n	9320 <__udivmoddi4+0x50>
    9372:	2200      	movs	r2, #0
    9374:	2300      	movs	r3, #0
    9376:	9200      	str	r2, [sp, #0]
    9378:	9301      	str	r3, [sp, #4]
    937a:	4643      	mov	r3, r8
    937c:	2b00      	cmp	r3, #0
    937e:	d0e8      	beq.n	9352 <__udivmoddi4+0x82>
    9380:	07fb      	lsls	r3, r7, #31
    9382:	0872      	lsrs	r2, r6, #1
    9384:	431a      	orrs	r2, r3
    9386:	4646      	mov	r6, r8
    9388:	087b      	lsrs	r3, r7, #1
    938a:	e00e      	b.n	93aa <__udivmoddi4+0xda>
    938c:	42ab      	cmp	r3, r5
    938e:	d101      	bne.n	9394 <__udivmoddi4+0xc4>
    9390:	42a2      	cmp	r2, r4
    9392:	d80c      	bhi.n	93ae <__udivmoddi4+0xde>
    9394:	1aa4      	subs	r4, r4, r2
    9396:	419d      	sbcs	r5, r3
    9398:	2001      	movs	r0, #1
    939a:	1924      	adds	r4, r4, r4
    939c:	416d      	adcs	r5, r5
    939e:	2100      	movs	r1, #0
    93a0:	3e01      	subs	r6, #1
    93a2:	1824      	adds	r4, r4, r0
    93a4:	414d      	adcs	r5, r1
    93a6:	2e00      	cmp	r6, #0
    93a8:	d006      	beq.n	93b8 <__udivmoddi4+0xe8>
    93aa:	42ab      	cmp	r3, r5
    93ac:	d9ee      	bls.n	938c <__udivmoddi4+0xbc>
    93ae:	3e01      	subs	r6, #1
    93b0:	1924      	adds	r4, r4, r4
    93b2:	416d      	adcs	r5, r5
    93b4:	2e00      	cmp	r6, #0
    93b6:	d1f8      	bne.n	93aa <__udivmoddi4+0xda>
    93b8:	465b      	mov	r3, fp
    93ba:	9800      	ldr	r0, [sp, #0]
    93bc:	9901      	ldr	r1, [sp, #4]
    93be:	1900      	adds	r0, r0, r4
    93c0:	4169      	adcs	r1, r5
    93c2:	2b00      	cmp	r3, #0
    93c4:	db22      	blt.n	940c <__udivmoddi4+0x13c>
    93c6:	002b      	movs	r3, r5
    93c8:	465a      	mov	r2, fp
    93ca:	40d3      	lsrs	r3, r2
    93cc:	002a      	movs	r2, r5
    93ce:	4644      	mov	r4, r8
    93d0:	40e2      	lsrs	r2, r4
    93d2:	001c      	movs	r4, r3
    93d4:	465b      	mov	r3, fp
    93d6:	0015      	movs	r5, r2
    93d8:	2b00      	cmp	r3, #0
    93da:	db2c      	blt.n	9436 <__udivmoddi4+0x166>
    93dc:	0026      	movs	r6, r4
    93de:	409e      	lsls	r6, r3
    93e0:	0033      	movs	r3, r6
    93e2:	0026      	movs	r6, r4
    93e4:	4647      	mov	r7, r8
    93e6:	40be      	lsls	r6, r7
    93e8:	0032      	movs	r2, r6
    93ea:	1a80      	subs	r0, r0, r2
    93ec:	4199      	sbcs	r1, r3
    93ee:	9000      	str	r0, [sp, #0]
    93f0:	9101      	str	r1, [sp, #4]
    93f2:	e7ae      	b.n	9352 <__udivmoddi4+0x82>
    93f4:	4642      	mov	r2, r8
    93f6:	2320      	movs	r3, #32
    93f8:	1a9b      	subs	r3, r3, r2
    93fa:	4652      	mov	r2, sl
    93fc:	40da      	lsrs	r2, r3
    93fe:	4641      	mov	r1, r8
    9400:	0013      	movs	r3, r2
    9402:	464a      	mov	r2, r9
    9404:	408a      	lsls	r2, r1
    9406:	0017      	movs	r7, r2
    9408:	431f      	orrs	r7, r3
    940a:	e782      	b.n	9312 <__udivmoddi4+0x42>
    940c:	4642      	mov	r2, r8
    940e:	2320      	movs	r3, #32
    9410:	1a9b      	subs	r3, r3, r2
    9412:	002a      	movs	r2, r5
    9414:	4646      	mov	r6, r8
    9416:	409a      	lsls	r2, r3
    9418:	0023      	movs	r3, r4
    941a:	40f3      	lsrs	r3, r6
    941c:	4313      	orrs	r3, r2
    941e:	e7d5      	b.n	93cc <__udivmoddi4+0xfc>
    9420:	4642      	mov	r2, r8
    9422:	2320      	movs	r3, #32
    9424:	2100      	movs	r1, #0
    9426:	1a9b      	subs	r3, r3, r2
    9428:	2200      	movs	r2, #0
    942a:	9100      	str	r1, [sp, #0]
    942c:	9201      	str	r2, [sp, #4]
    942e:	2201      	movs	r2, #1
    9430:	40da      	lsrs	r2, r3
    9432:	9201      	str	r2, [sp, #4]
    9434:	e782      	b.n	933c <__udivmoddi4+0x6c>
    9436:	4642      	mov	r2, r8
    9438:	2320      	movs	r3, #32
    943a:	0026      	movs	r6, r4
    943c:	1a9b      	subs	r3, r3, r2
    943e:	40de      	lsrs	r6, r3
    9440:	002f      	movs	r7, r5
    9442:	46b4      	mov	ip, r6
    9444:	4097      	lsls	r7, r2
    9446:	4666      	mov	r6, ip
    9448:	003b      	movs	r3, r7
    944a:	4333      	orrs	r3, r6
    944c:	e7c9      	b.n	93e2 <__udivmoddi4+0x112>
    944e:	46c0      	nop			; (mov r8, r8)

00009450 <__clzdi2>:
    9450:	b510      	push	{r4, lr}
    9452:	2900      	cmp	r1, #0
    9454:	d103      	bne.n	945e <__clzdi2+0xe>
    9456:	f7ff feb3 	bl	91c0 <__clzsi2>
    945a:	3020      	adds	r0, #32
    945c:	e002      	b.n	9464 <__clzdi2+0x14>
    945e:	1c08      	adds	r0, r1, #0
    9460:	f7ff feae 	bl	91c0 <__clzsi2>
    9464:	bd10      	pop	{r4, pc}
    9466:	46c0      	nop			; (mov r8, r8)

00009468 <__libc_init_array>:
    9468:	b570      	push	{r4, r5, r6, lr}
    946a:	2600      	movs	r6, #0
    946c:	4d0c      	ldr	r5, [pc, #48]	; (94a0 <__libc_init_array+0x38>)
    946e:	4c0d      	ldr	r4, [pc, #52]	; (94a4 <__libc_init_array+0x3c>)
    9470:	1b64      	subs	r4, r4, r5
    9472:	10a4      	asrs	r4, r4, #2
    9474:	42a6      	cmp	r6, r4
    9476:	d109      	bne.n	948c <__libc_init_array+0x24>
    9478:	2600      	movs	r6, #0
    947a:	f001 fd01 	bl	ae80 <_init>
    947e:	4d0a      	ldr	r5, [pc, #40]	; (94a8 <__libc_init_array+0x40>)
    9480:	4c0a      	ldr	r4, [pc, #40]	; (94ac <__libc_init_array+0x44>)
    9482:	1b64      	subs	r4, r4, r5
    9484:	10a4      	asrs	r4, r4, #2
    9486:	42a6      	cmp	r6, r4
    9488:	d105      	bne.n	9496 <__libc_init_array+0x2e>
    948a:	bd70      	pop	{r4, r5, r6, pc}
    948c:	00b3      	lsls	r3, r6, #2
    948e:	58eb      	ldr	r3, [r5, r3]
    9490:	4798      	blx	r3
    9492:	3601      	adds	r6, #1
    9494:	e7ee      	b.n	9474 <__libc_init_array+0xc>
    9496:	00b3      	lsls	r3, r6, #2
    9498:	58eb      	ldr	r3, [r5, r3]
    949a:	4798      	blx	r3
    949c:	3601      	adds	r6, #1
    949e:	e7f2      	b.n	9486 <__libc_init_array+0x1e>
    94a0:	0000ae8c 	.word	0x0000ae8c
    94a4:	0000ae8c 	.word	0x0000ae8c
    94a8:	0000ae8c 	.word	0x0000ae8c
    94ac:	0000ae90 	.word	0x0000ae90

000094b0 <memcpy>:
    94b0:	2300      	movs	r3, #0
    94b2:	b510      	push	{r4, lr}
    94b4:	429a      	cmp	r2, r3
    94b6:	d100      	bne.n	94ba <memcpy+0xa>
    94b8:	bd10      	pop	{r4, pc}
    94ba:	5ccc      	ldrb	r4, [r1, r3]
    94bc:	54c4      	strb	r4, [r0, r3]
    94be:	3301      	adds	r3, #1
    94c0:	e7f8      	b.n	94b4 <memcpy+0x4>

000094c2 <memset>:
    94c2:	0003      	movs	r3, r0
    94c4:	1882      	adds	r2, r0, r2
    94c6:	4293      	cmp	r3, r2
    94c8:	d100      	bne.n	94cc <memset+0xa>
    94ca:	4770      	bx	lr
    94cc:	7019      	strb	r1, [r3, #0]
    94ce:	3301      	adds	r3, #1
    94d0:	e7f9      	b.n	94c6 <memset+0x4>
	...

000094d4 <iprintf>:
    94d4:	b40f      	push	{r0, r1, r2, r3}
    94d6:	4b0b      	ldr	r3, [pc, #44]	; (9504 <iprintf+0x30>)
    94d8:	b513      	push	{r0, r1, r4, lr}
    94da:	681c      	ldr	r4, [r3, #0]
    94dc:	2c00      	cmp	r4, #0
    94de:	d005      	beq.n	94ec <iprintf+0x18>
    94e0:	69a3      	ldr	r3, [r4, #24]
    94e2:	2b00      	cmp	r3, #0
    94e4:	d102      	bne.n	94ec <iprintf+0x18>
    94e6:	0020      	movs	r0, r4
    94e8:	f000 f9bc 	bl	9864 <__sinit>
    94ec:	ab05      	add	r3, sp, #20
    94ee:	9a04      	ldr	r2, [sp, #16]
    94f0:	68a1      	ldr	r1, [r4, #8]
    94f2:	0020      	movs	r0, r4
    94f4:	9301      	str	r3, [sp, #4]
    94f6:	f000 fb91 	bl	9c1c <_vfiprintf_r>
    94fa:	bc16      	pop	{r1, r2, r4}
    94fc:	bc08      	pop	{r3}
    94fe:	b004      	add	sp, #16
    9500:	4718      	bx	r3
    9502:	46c0      	nop			; (mov r8, r8)
    9504:	20000128 	.word	0x20000128

00009508 <setbuf>:
    9508:	424a      	negs	r2, r1
    950a:	414a      	adcs	r2, r1
    950c:	2380      	movs	r3, #128	; 0x80
    950e:	b510      	push	{r4, lr}
    9510:	0052      	lsls	r2, r2, #1
    9512:	00db      	lsls	r3, r3, #3
    9514:	f000 f802 	bl	951c <setvbuf>
    9518:	bd10      	pop	{r4, pc}
	...

0000951c <setvbuf>:
    951c:	b5f0      	push	{r4, r5, r6, r7, lr}
    951e:	001d      	movs	r5, r3
    9520:	4b4f      	ldr	r3, [pc, #316]	; (9660 <setvbuf+0x144>)
    9522:	b085      	sub	sp, #20
    9524:	681e      	ldr	r6, [r3, #0]
    9526:	0004      	movs	r4, r0
    9528:	000f      	movs	r7, r1
    952a:	9200      	str	r2, [sp, #0]
    952c:	2e00      	cmp	r6, #0
    952e:	d005      	beq.n	953c <setvbuf+0x20>
    9530:	69b3      	ldr	r3, [r6, #24]
    9532:	2b00      	cmp	r3, #0
    9534:	d102      	bne.n	953c <setvbuf+0x20>
    9536:	0030      	movs	r0, r6
    9538:	f000 f994 	bl	9864 <__sinit>
    953c:	4b49      	ldr	r3, [pc, #292]	; (9664 <setvbuf+0x148>)
    953e:	429c      	cmp	r4, r3
    9540:	d150      	bne.n	95e4 <setvbuf+0xc8>
    9542:	6874      	ldr	r4, [r6, #4]
    9544:	9b00      	ldr	r3, [sp, #0]
    9546:	2b02      	cmp	r3, #2
    9548:	d005      	beq.n	9556 <setvbuf+0x3a>
    954a:	2b01      	cmp	r3, #1
    954c:	d900      	bls.n	9550 <setvbuf+0x34>
    954e:	e084      	b.n	965a <setvbuf+0x13e>
    9550:	2d00      	cmp	r5, #0
    9552:	da00      	bge.n	9556 <setvbuf+0x3a>
    9554:	e081      	b.n	965a <setvbuf+0x13e>
    9556:	0021      	movs	r1, r4
    9558:	0030      	movs	r0, r6
    955a:	f000 f915 	bl	9788 <_fflush_r>
    955e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9560:	2900      	cmp	r1, #0
    9562:	d008      	beq.n	9576 <setvbuf+0x5a>
    9564:	0023      	movs	r3, r4
    9566:	3344      	adds	r3, #68	; 0x44
    9568:	4299      	cmp	r1, r3
    956a:	d002      	beq.n	9572 <setvbuf+0x56>
    956c:	0030      	movs	r0, r6
    956e:	f000 fa85 	bl	9a7c <_free_r>
    9572:	2300      	movs	r3, #0
    9574:	6363      	str	r3, [r4, #52]	; 0x34
    9576:	2300      	movs	r3, #0
    9578:	61a3      	str	r3, [r4, #24]
    957a:	6063      	str	r3, [r4, #4]
    957c:	89a3      	ldrh	r3, [r4, #12]
    957e:	061b      	lsls	r3, r3, #24
    9580:	d503      	bpl.n	958a <setvbuf+0x6e>
    9582:	6921      	ldr	r1, [r4, #16]
    9584:	0030      	movs	r0, r6
    9586:	f000 fa79 	bl	9a7c <_free_r>
    958a:	89a3      	ldrh	r3, [r4, #12]
    958c:	4a36      	ldr	r2, [pc, #216]	; (9668 <setvbuf+0x14c>)
    958e:	4013      	ands	r3, r2
    9590:	81a3      	strh	r3, [r4, #12]
    9592:	9b00      	ldr	r3, [sp, #0]
    9594:	2b02      	cmp	r3, #2
    9596:	d05a      	beq.n	964e <setvbuf+0x132>
    9598:	ab03      	add	r3, sp, #12
    959a:	aa02      	add	r2, sp, #8
    959c:	0021      	movs	r1, r4
    959e:	0030      	movs	r0, r6
    95a0:	f000 f9f6 	bl	9990 <__swhatbuf_r>
    95a4:	89a3      	ldrh	r3, [r4, #12]
    95a6:	4318      	orrs	r0, r3
    95a8:	81a0      	strh	r0, [r4, #12]
    95aa:	2d00      	cmp	r5, #0
    95ac:	d124      	bne.n	95f8 <setvbuf+0xdc>
    95ae:	9d02      	ldr	r5, [sp, #8]
    95b0:	0028      	movs	r0, r5
    95b2:	f000 fa59 	bl	9a68 <malloc>
    95b6:	9501      	str	r5, [sp, #4]
    95b8:	1e07      	subs	r7, r0, #0
    95ba:	d142      	bne.n	9642 <setvbuf+0x126>
    95bc:	9b02      	ldr	r3, [sp, #8]
    95be:	9301      	str	r3, [sp, #4]
    95c0:	42ab      	cmp	r3, r5
    95c2:	d139      	bne.n	9638 <setvbuf+0x11c>
    95c4:	2001      	movs	r0, #1
    95c6:	4240      	negs	r0, r0
    95c8:	2302      	movs	r3, #2
    95ca:	89a2      	ldrh	r2, [r4, #12]
    95cc:	4313      	orrs	r3, r2
    95ce:	81a3      	strh	r3, [r4, #12]
    95d0:	2300      	movs	r3, #0
    95d2:	60a3      	str	r3, [r4, #8]
    95d4:	0023      	movs	r3, r4
    95d6:	3347      	adds	r3, #71	; 0x47
    95d8:	6023      	str	r3, [r4, #0]
    95da:	6123      	str	r3, [r4, #16]
    95dc:	2301      	movs	r3, #1
    95de:	6163      	str	r3, [r4, #20]
    95e0:	b005      	add	sp, #20
    95e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95e4:	4b21      	ldr	r3, [pc, #132]	; (966c <setvbuf+0x150>)
    95e6:	429c      	cmp	r4, r3
    95e8:	d101      	bne.n	95ee <setvbuf+0xd2>
    95ea:	68b4      	ldr	r4, [r6, #8]
    95ec:	e7aa      	b.n	9544 <setvbuf+0x28>
    95ee:	4b20      	ldr	r3, [pc, #128]	; (9670 <setvbuf+0x154>)
    95f0:	429c      	cmp	r4, r3
    95f2:	d1a7      	bne.n	9544 <setvbuf+0x28>
    95f4:	68f4      	ldr	r4, [r6, #12]
    95f6:	e7a5      	b.n	9544 <setvbuf+0x28>
    95f8:	2f00      	cmp	r7, #0
    95fa:	d0d9      	beq.n	95b0 <setvbuf+0x94>
    95fc:	69b3      	ldr	r3, [r6, #24]
    95fe:	2b00      	cmp	r3, #0
    9600:	d102      	bne.n	9608 <setvbuf+0xec>
    9602:	0030      	movs	r0, r6
    9604:	f000 f92e 	bl	9864 <__sinit>
    9608:	9b00      	ldr	r3, [sp, #0]
    960a:	2b01      	cmp	r3, #1
    960c:	d103      	bne.n	9616 <setvbuf+0xfa>
    960e:	89a3      	ldrh	r3, [r4, #12]
    9610:	9a00      	ldr	r2, [sp, #0]
    9612:	431a      	orrs	r2, r3
    9614:	81a2      	strh	r2, [r4, #12]
    9616:	2008      	movs	r0, #8
    9618:	89a3      	ldrh	r3, [r4, #12]
    961a:	6027      	str	r7, [r4, #0]
    961c:	6127      	str	r7, [r4, #16]
    961e:	6165      	str	r5, [r4, #20]
    9620:	4018      	ands	r0, r3
    9622:	d018      	beq.n	9656 <setvbuf+0x13a>
    9624:	2001      	movs	r0, #1
    9626:	4018      	ands	r0, r3
    9628:	2300      	movs	r3, #0
    962a:	4298      	cmp	r0, r3
    962c:	d011      	beq.n	9652 <setvbuf+0x136>
    962e:	426d      	negs	r5, r5
    9630:	60a3      	str	r3, [r4, #8]
    9632:	61a5      	str	r5, [r4, #24]
    9634:	0018      	movs	r0, r3
    9636:	e7d3      	b.n	95e0 <setvbuf+0xc4>
    9638:	9801      	ldr	r0, [sp, #4]
    963a:	f000 fa15 	bl	9a68 <malloc>
    963e:	1e07      	subs	r7, r0, #0
    9640:	d0c0      	beq.n	95c4 <setvbuf+0xa8>
    9642:	2380      	movs	r3, #128	; 0x80
    9644:	89a2      	ldrh	r2, [r4, #12]
    9646:	9d01      	ldr	r5, [sp, #4]
    9648:	4313      	orrs	r3, r2
    964a:	81a3      	strh	r3, [r4, #12]
    964c:	e7d6      	b.n	95fc <setvbuf+0xe0>
    964e:	2000      	movs	r0, #0
    9650:	e7ba      	b.n	95c8 <setvbuf+0xac>
    9652:	60a5      	str	r5, [r4, #8]
    9654:	e7c4      	b.n	95e0 <setvbuf+0xc4>
    9656:	60a0      	str	r0, [r4, #8]
    9658:	e7c2      	b.n	95e0 <setvbuf+0xc4>
    965a:	2001      	movs	r0, #1
    965c:	4240      	negs	r0, r0
    965e:	e7bf      	b.n	95e0 <setvbuf+0xc4>
    9660:	20000128 	.word	0x20000128
    9664:	0000ae0c 	.word	0x0000ae0c
    9668:	fffff35c 	.word	0xfffff35c
    966c:	0000ae2c 	.word	0x0000ae2c
    9670:	0000adec 	.word	0x0000adec

00009674 <__sflush_r>:
    9674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9676:	898a      	ldrh	r2, [r1, #12]
    9678:	0005      	movs	r5, r0
    967a:	000c      	movs	r4, r1
    967c:	0713      	lsls	r3, r2, #28
    967e:	d460      	bmi.n	9742 <__sflush_r+0xce>
    9680:	684b      	ldr	r3, [r1, #4]
    9682:	2b00      	cmp	r3, #0
    9684:	dc04      	bgt.n	9690 <__sflush_r+0x1c>
    9686:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9688:	2b00      	cmp	r3, #0
    968a:	dc01      	bgt.n	9690 <__sflush_r+0x1c>
    968c:	2000      	movs	r0, #0
    968e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9690:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9692:	2f00      	cmp	r7, #0
    9694:	d0fa      	beq.n	968c <__sflush_r+0x18>
    9696:	2300      	movs	r3, #0
    9698:	682e      	ldr	r6, [r5, #0]
    969a:	602b      	str	r3, [r5, #0]
    969c:	2380      	movs	r3, #128	; 0x80
    969e:	015b      	lsls	r3, r3, #5
    96a0:	401a      	ands	r2, r3
    96a2:	d034      	beq.n	970e <__sflush_r+0x9a>
    96a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    96a6:	89a3      	ldrh	r3, [r4, #12]
    96a8:	075b      	lsls	r3, r3, #29
    96aa:	d506      	bpl.n	96ba <__sflush_r+0x46>
    96ac:	6863      	ldr	r3, [r4, #4]
    96ae:	1ac0      	subs	r0, r0, r3
    96b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    96b2:	2b00      	cmp	r3, #0
    96b4:	d001      	beq.n	96ba <__sflush_r+0x46>
    96b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    96b8:	1ac0      	subs	r0, r0, r3
    96ba:	0002      	movs	r2, r0
    96bc:	6a21      	ldr	r1, [r4, #32]
    96be:	2300      	movs	r3, #0
    96c0:	0028      	movs	r0, r5
    96c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    96c4:	47b8      	blx	r7
    96c6:	89a1      	ldrh	r1, [r4, #12]
    96c8:	1c43      	adds	r3, r0, #1
    96ca:	d106      	bne.n	96da <__sflush_r+0x66>
    96cc:	682b      	ldr	r3, [r5, #0]
    96ce:	2b1d      	cmp	r3, #29
    96d0:	d831      	bhi.n	9736 <__sflush_r+0xc2>
    96d2:	4a2c      	ldr	r2, [pc, #176]	; (9784 <__sflush_r+0x110>)
    96d4:	40da      	lsrs	r2, r3
    96d6:	07d3      	lsls	r3, r2, #31
    96d8:	d52d      	bpl.n	9736 <__sflush_r+0xc2>
    96da:	2300      	movs	r3, #0
    96dc:	6063      	str	r3, [r4, #4]
    96de:	6923      	ldr	r3, [r4, #16]
    96e0:	6023      	str	r3, [r4, #0]
    96e2:	04cb      	lsls	r3, r1, #19
    96e4:	d505      	bpl.n	96f2 <__sflush_r+0x7e>
    96e6:	1c43      	adds	r3, r0, #1
    96e8:	d102      	bne.n	96f0 <__sflush_r+0x7c>
    96ea:	682b      	ldr	r3, [r5, #0]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d100      	bne.n	96f2 <__sflush_r+0x7e>
    96f0:	6560      	str	r0, [r4, #84]	; 0x54
    96f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    96f4:	602e      	str	r6, [r5, #0]
    96f6:	2900      	cmp	r1, #0
    96f8:	d0c8      	beq.n	968c <__sflush_r+0x18>
    96fa:	0023      	movs	r3, r4
    96fc:	3344      	adds	r3, #68	; 0x44
    96fe:	4299      	cmp	r1, r3
    9700:	d002      	beq.n	9708 <__sflush_r+0x94>
    9702:	0028      	movs	r0, r5
    9704:	f000 f9ba 	bl	9a7c <_free_r>
    9708:	2000      	movs	r0, #0
    970a:	6360      	str	r0, [r4, #52]	; 0x34
    970c:	e7bf      	b.n	968e <__sflush_r+0x1a>
    970e:	2301      	movs	r3, #1
    9710:	6a21      	ldr	r1, [r4, #32]
    9712:	0028      	movs	r0, r5
    9714:	47b8      	blx	r7
    9716:	1c43      	adds	r3, r0, #1
    9718:	d1c5      	bne.n	96a6 <__sflush_r+0x32>
    971a:	682b      	ldr	r3, [r5, #0]
    971c:	2b00      	cmp	r3, #0
    971e:	d0c2      	beq.n	96a6 <__sflush_r+0x32>
    9720:	2b1d      	cmp	r3, #29
    9722:	d001      	beq.n	9728 <__sflush_r+0xb4>
    9724:	2b16      	cmp	r3, #22
    9726:	d101      	bne.n	972c <__sflush_r+0xb8>
    9728:	602e      	str	r6, [r5, #0]
    972a:	e7af      	b.n	968c <__sflush_r+0x18>
    972c:	2340      	movs	r3, #64	; 0x40
    972e:	89a2      	ldrh	r2, [r4, #12]
    9730:	4313      	orrs	r3, r2
    9732:	81a3      	strh	r3, [r4, #12]
    9734:	e7ab      	b.n	968e <__sflush_r+0x1a>
    9736:	2340      	movs	r3, #64	; 0x40
    9738:	430b      	orrs	r3, r1
    973a:	2001      	movs	r0, #1
    973c:	81a3      	strh	r3, [r4, #12]
    973e:	4240      	negs	r0, r0
    9740:	e7a5      	b.n	968e <__sflush_r+0x1a>
    9742:	690f      	ldr	r7, [r1, #16]
    9744:	2f00      	cmp	r7, #0
    9746:	d0a1      	beq.n	968c <__sflush_r+0x18>
    9748:	680b      	ldr	r3, [r1, #0]
    974a:	600f      	str	r7, [r1, #0]
    974c:	1bdb      	subs	r3, r3, r7
    974e:	9301      	str	r3, [sp, #4]
    9750:	2300      	movs	r3, #0
    9752:	0792      	lsls	r2, r2, #30
    9754:	d100      	bne.n	9758 <__sflush_r+0xe4>
    9756:	694b      	ldr	r3, [r1, #20]
    9758:	60a3      	str	r3, [r4, #8]
    975a:	9b01      	ldr	r3, [sp, #4]
    975c:	2b00      	cmp	r3, #0
    975e:	dc00      	bgt.n	9762 <__sflush_r+0xee>
    9760:	e794      	b.n	968c <__sflush_r+0x18>
    9762:	9b01      	ldr	r3, [sp, #4]
    9764:	003a      	movs	r2, r7
    9766:	6a21      	ldr	r1, [r4, #32]
    9768:	0028      	movs	r0, r5
    976a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    976c:	47b0      	blx	r6
    976e:	2800      	cmp	r0, #0
    9770:	dc03      	bgt.n	977a <__sflush_r+0x106>
    9772:	2340      	movs	r3, #64	; 0x40
    9774:	89a2      	ldrh	r2, [r4, #12]
    9776:	4313      	orrs	r3, r2
    9778:	e7df      	b.n	973a <__sflush_r+0xc6>
    977a:	9b01      	ldr	r3, [sp, #4]
    977c:	183f      	adds	r7, r7, r0
    977e:	1a1b      	subs	r3, r3, r0
    9780:	9301      	str	r3, [sp, #4]
    9782:	e7ea      	b.n	975a <__sflush_r+0xe6>
    9784:	20400001 	.word	0x20400001

00009788 <_fflush_r>:
    9788:	690b      	ldr	r3, [r1, #16]
    978a:	b570      	push	{r4, r5, r6, lr}
    978c:	0005      	movs	r5, r0
    978e:	000c      	movs	r4, r1
    9790:	2b00      	cmp	r3, #0
    9792:	d101      	bne.n	9798 <_fflush_r+0x10>
    9794:	2000      	movs	r0, #0
    9796:	bd70      	pop	{r4, r5, r6, pc}
    9798:	2800      	cmp	r0, #0
    979a:	d004      	beq.n	97a6 <_fflush_r+0x1e>
    979c:	6983      	ldr	r3, [r0, #24]
    979e:	2b00      	cmp	r3, #0
    97a0:	d101      	bne.n	97a6 <_fflush_r+0x1e>
    97a2:	f000 f85f 	bl	9864 <__sinit>
    97a6:	4b0b      	ldr	r3, [pc, #44]	; (97d4 <_fflush_r+0x4c>)
    97a8:	429c      	cmp	r4, r3
    97aa:	d109      	bne.n	97c0 <_fflush_r+0x38>
    97ac:	686c      	ldr	r4, [r5, #4]
    97ae:	220c      	movs	r2, #12
    97b0:	5ea3      	ldrsh	r3, [r4, r2]
    97b2:	2b00      	cmp	r3, #0
    97b4:	d0ee      	beq.n	9794 <_fflush_r+0xc>
    97b6:	0021      	movs	r1, r4
    97b8:	0028      	movs	r0, r5
    97ba:	f7ff ff5b 	bl	9674 <__sflush_r>
    97be:	e7ea      	b.n	9796 <_fflush_r+0xe>
    97c0:	4b05      	ldr	r3, [pc, #20]	; (97d8 <_fflush_r+0x50>)
    97c2:	429c      	cmp	r4, r3
    97c4:	d101      	bne.n	97ca <_fflush_r+0x42>
    97c6:	68ac      	ldr	r4, [r5, #8]
    97c8:	e7f1      	b.n	97ae <_fflush_r+0x26>
    97ca:	4b04      	ldr	r3, [pc, #16]	; (97dc <_fflush_r+0x54>)
    97cc:	429c      	cmp	r4, r3
    97ce:	d1ee      	bne.n	97ae <_fflush_r+0x26>
    97d0:	68ec      	ldr	r4, [r5, #12]
    97d2:	e7ec      	b.n	97ae <_fflush_r+0x26>
    97d4:	0000ae0c 	.word	0x0000ae0c
    97d8:	0000ae2c 	.word	0x0000ae2c
    97dc:	0000adec 	.word	0x0000adec

000097e0 <_cleanup_r>:
    97e0:	b510      	push	{r4, lr}
    97e2:	4902      	ldr	r1, [pc, #8]	; (97ec <_cleanup_r+0xc>)
    97e4:	f000 f8b2 	bl	994c <_fwalk_reent>
    97e8:	bd10      	pop	{r4, pc}
    97ea:	46c0      	nop			; (mov r8, r8)
    97ec:	00009789 	.word	0x00009789

000097f0 <std.isra.0>:
    97f0:	2300      	movs	r3, #0
    97f2:	b510      	push	{r4, lr}
    97f4:	0004      	movs	r4, r0
    97f6:	6003      	str	r3, [r0, #0]
    97f8:	6043      	str	r3, [r0, #4]
    97fa:	6083      	str	r3, [r0, #8]
    97fc:	8181      	strh	r1, [r0, #12]
    97fe:	6643      	str	r3, [r0, #100]	; 0x64
    9800:	81c2      	strh	r2, [r0, #14]
    9802:	6103      	str	r3, [r0, #16]
    9804:	6143      	str	r3, [r0, #20]
    9806:	6183      	str	r3, [r0, #24]
    9808:	0019      	movs	r1, r3
    980a:	2208      	movs	r2, #8
    980c:	305c      	adds	r0, #92	; 0x5c
    980e:	f7ff fe58 	bl	94c2 <memset>
    9812:	4b05      	ldr	r3, [pc, #20]	; (9828 <std.isra.0+0x38>)
    9814:	6224      	str	r4, [r4, #32]
    9816:	6263      	str	r3, [r4, #36]	; 0x24
    9818:	4b04      	ldr	r3, [pc, #16]	; (982c <std.isra.0+0x3c>)
    981a:	62a3      	str	r3, [r4, #40]	; 0x28
    981c:	4b04      	ldr	r3, [pc, #16]	; (9830 <std.isra.0+0x40>)
    981e:	62e3      	str	r3, [r4, #44]	; 0x2c
    9820:	4b04      	ldr	r3, [pc, #16]	; (9834 <std.isra.0+0x44>)
    9822:	6323      	str	r3, [r4, #48]	; 0x30
    9824:	bd10      	pop	{r4, pc}
    9826:	46c0      	nop			; (mov r8, r8)
    9828:	0000a189 	.word	0x0000a189
    982c:	0000a1b1 	.word	0x0000a1b1
    9830:	0000a1e9 	.word	0x0000a1e9
    9834:	0000a215 	.word	0x0000a215

00009838 <__sfmoreglue>:
    9838:	b570      	push	{r4, r5, r6, lr}
    983a:	2568      	movs	r5, #104	; 0x68
    983c:	1e4a      	subs	r2, r1, #1
    983e:	4355      	muls	r5, r2
    9840:	000e      	movs	r6, r1
    9842:	0029      	movs	r1, r5
    9844:	3174      	adds	r1, #116	; 0x74
    9846:	f000 f963 	bl	9b10 <_malloc_r>
    984a:	1e04      	subs	r4, r0, #0
    984c:	d008      	beq.n	9860 <__sfmoreglue+0x28>
    984e:	2100      	movs	r1, #0
    9850:	002a      	movs	r2, r5
    9852:	6001      	str	r1, [r0, #0]
    9854:	6046      	str	r6, [r0, #4]
    9856:	300c      	adds	r0, #12
    9858:	60a0      	str	r0, [r4, #8]
    985a:	3268      	adds	r2, #104	; 0x68
    985c:	f7ff fe31 	bl	94c2 <memset>
    9860:	0020      	movs	r0, r4
    9862:	bd70      	pop	{r4, r5, r6, pc}

00009864 <__sinit>:
    9864:	6983      	ldr	r3, [r0, #24]
    9866:	b513      	push	{r0, r1, r4, lr}
    9868:	0004      	movs	r4, r0
    986a:	2b00      	cmp	r3, #0
    986c:	d128      	bne.n	98c0 <__sinit+0x5c>
    986e:	6483      	str	r3, [r0, #72]	; 0x48
    9870:	64c3      	str	r3, [r0, #76]	; 0x4c
    9872:	6503      	str	r3, [r0, #80]	; 0x50
    9874:	4b13      	ldr	r3, [pc, #76]	; (98c4 <__sinit+0x60>)
    9876:	4a14      	ldr	r2, [pc, #80]	; (98c8 <__sinit+0x64>)
    9878:	681b      	ldr	r3, [r3, #0]
    987a:	6282      	str	r2, [r0, #40]	; 0x28
    987c:	9301      	str	r3, [sp, #4]
    987e:	4298      	cmp	r0, r3
    9880:	d101      	bne.n	9886 <__sinit+0x22>
    9882:	2301      	movs	r3, #1
    9884:	6183      	str	r3, [r0, #24]
    9886:	0020      	movs	r0, r4
    9888:	f000 f820 	bl	98cc <__sfp>
    988c:	6060      	str	r0, [r4, #4]
    988e:	0020      	movs	r0, r4
    9890:	f000 f81c 	bl	98cc <__sfp>
    9894:	60a0      	str	r0, [r4, #8]
    9896:	0020      	movs	r0, r4
    9898:	f000 f818 	bl	98cc <__sfp>
    989c:	2200      	movs	r2, #0
    989e:	60e0      	str	r0, [r4, #12]
    98a0:	2104      	movs	r1, #4
    98a2:	6860      	ldr	r0, [r4, #4]
    98a4:	f7ff ffa4 	bl	97f0 <std.isra.0>
    98a8:	2201      	movs	r2, #1
    98aa:	2109      	movs	r1, #9
    98ac:	68a0      	ldr	r0, [r4, #8]
    98ae:	f7ff ff9f 	bl	97f0 <std.isra.0>
    98b2:	2202      	movs	r2, #2
    98b4:	2112      	movs	r1, #18
    98b6:	68e0      	ldr	r0, [r4, #12]
    98b8:	f7ff ff9a 	bl	97f0 <std.isra.0>
    98bc:	2301      	movs	r3, #1
    98be:	61a3      	str	r3, [r4, #24]
    98c0:	bd13      	pop	{r0, r1, r4, pc}
    98c2:	46c0      	nop			; (mov r8, r8)
    98c4:	0000ade8 	.word	0x0000ade8
    98c8:	000097e1 	.word	0x000097e1

000098cc <__sfp>:
    98cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98ce:	4b1e      	ldr	r3, [pc, #120]	; (9948 <__sfp+0x7c>)
    98d0:	0007      	movs	r7, r0
    98d2:	681e      	ldr	r6, [r3, #0]
    98d4:	69b3      	ldr	r3, [r6, #24]
    98d6:	2b00      	cmp	r3, #0
    98d8:	d102      	bne.n	98e0 <__sfp+0x14>
    98da:	0030      	movs	r0, r6
    98dc:	f7ff ffc2 	bl	9864 <__sinit>
    98e0:	3648      	adds	r6, #72	; 0x48
    98e2:	68b4      	ldr	r4, [r6, #8]
    98e4:	6873      	ldr	r3, [r6, #4]
    98e6:	3b01      	subs	r3, #1
    98e8:	d504      	bpl.n	98f4 <__sfp+0x28>
    98ea:	6833      	ldr	r3, [r6, #0]
    98ec:	2b00      	cmp	r3, #0
    98ee:	d007      	beq.n	9900 <__sfp+0x34>
    98f0:	6836      	ldr	r6, [r6, #0]
    98f2:	e7f6      	b.n	98e2 <__sfp+0x16>
    98f4:	220c      	movs	r2, #12
    98f6:	5ea5      	ldrsh	r5, [r4, r2]
    98f8:	2d00      	cmp	r5, #0
    98fa:	d00d      	beq.n	9918 <__sfp+0x4c>
    98fc:	3468      	adds	r4, #104	; 0x68
    98fe:	e7f2      	b.n	98e6 <__sfp+0x1a>
    9900:	2104      	movs	r1, #4
    9902:	0038      	movs	r0, r7
    9904:	f7ff ff98 	bl	9838 <__sfmoreglue>
    9908:	6030      	str	r0, [r6, #0]
    990a:	2800      	cmp	r0, #0
    990c:	d1f0      	bne.n	98f0 <__sfp+0x24>
    990e:	230c      	movs	r3, #12
    9910:	0004      	movs	r4, r0
    9912:	603b      	str	r3, [r7, #0]
    9914:	0020      	movs	r0, r4
    9916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9918:	2301      	movs	r3, #1
    991a:	0020      	movs	r0, r4
    991c:	425b      	negs	r3, r3
    991e:	81e3      	strh	r3, [r4, #14]
    9920:	3302      	adds	r3, #2
    9922:	81a3      	strh	r3, [r4, #12]
    9924:	6665      	str	r5, [r4, #100]	; 0x64
    9926:	6025      	str	r5, [r4, #0]
    9928:	60a5      	str	r5, [r4, #8]
    992a:	6065      	str	r5, [r4, #4]
    992c:	6125      	str	r5, [r4, #16]
    992e:	6165      	str	r5, [r4, #20]
    9930:	61a5      	str	r5, [r4, #24]
    9932:	2208      	movs	r2, #8
    9934:	0029      	movs	r1, r5
    9936:	305c      	adds	r0, #92	; 0x5c
    9938:	f7ff fdc3 	bl	94c2 <memset>
    993c:	6365      	str	r5, [r4, #52]	; 0x34
    993e:	63a5      	str	r5, [r4, #56]	; 0x38
    9940:	64a5      	str	r5, [r4, #72]	; 0x48
    9942:	64e5      	str	r5, [r4, #76]	; 0x4c
    9944:	e7e6      	b.n	9914 <__sfp+0x48>
    9946:	46c0      	nop			; (mov r8, r8)
    9948:	0000ade8 	.word	0x0000ade8

0000994c <_fwalk_reent>:
    994c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    994e:	0004      	movs	r4, r0
    9950:	0007      	movs	r7, r0
    9952:	2600      	movs	r6, #0
    9954:	9101      	str	r1, [sp, #4]
    9956:	3448      	adds	r4, #72	; 0x48
    9958:	2c00      	cmp	r4, #0
    995a:	d101      	bne.n	9960 <_fwalk_reent+0x14>
    995c:	0030      	movs	r0, r6
    995e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9960:	6863      	ldr	r3, [r4, #4]
    9962:	68a5      	ldr	r5, [r4, #8]
    9964:	9300      	str	r3, [sp, #0]
    9966:	9b00      	ldr	r3, [sp, #0]
    9968:	3b01      	subs	r3, #1
    996a:	9300      	str	r3, [sp, #0]
    996c:	d501      	bpl.n	9972 <_fwalk_reent+0x26>
    996e:	6824      	ldr	r4, [r4, #0]
    9970:	e7f2      	b.n	9958 <_fwalk_reent+0xc>
    9972:	89ab      	ldrh	r3, [r5, #12]
    9974:	2b01      	cmp	r3, #1
    9976:	d908      	bls.n	998a <_fwalk_reent+0x3e>
    9978:	220e      	movs	r2, #14
    997a:	5eab      	ldrsh	r3, [r5, r2]
    997c:	3301      	adds	r3, #1
    997e:	d004      	beq.n	998a <_fwalk_reent+0x3e>
    9980:	0029      	movs	r1, r5
    9982:	0038      	movs	r0, r7
    9984:	9b01      	ldr	r3, [sp, #4]
    9986:	4798      	blx	r3
    9988:	4306      	orrs	r6, r0
    998a:	3568      	adds	r5, #104	; 0x68
    998c:	e7eb      	b.n	9966 <_fwalk_reent+0x1a>
	...

00009990 <__swhatbuf_r>:
    9990:	b570      	push	{r4, r5, r6, lr}
    9992:	000e      	movs	r6, r1
    9994:	001d      	movs	r5, r3
    9996:	230e      	movs	r3, #14
    9998:	5ec9      	ldrsh	r1, [r1, r3]
    999a:	b090      	sub	sp, #64	; 0x40
    999c:	0014      	movs	r4, r2
    999e:	2900      	cmp	r1, #0
    99a0:	da07      	bge.n	99b2 <__swhatbuf_r+0x22>
    99a2:	2300      	movs	r3, #0
    99a4:	602b      	str	r3, [r5, #0]
    99a6:	89b3      	ldrh	r3, [r6, #12]
    99a8:	061b      	lsls	r3, r3, #24
    99aa:	d411      	bmi.n	99d0 <__swhatbuf_r+0x40>
    99ac:	2380      	movs	r3, #128	; 0x80
    99ae:	00db      	lsls	r3, r3, #3
    99b0:	e00f      	b.n	99d2 <__swhatbuf_r+0x42>
    99b2:	aa01      	add	r2, sp, #4
    99b4:	f000 fd26 	bl	a404 <_fstat_r>
    99b8:	2800      	cmp	r0, #0
    99ba:	dbf2      	blt.n	99a2 <__swhatbuf_r+0x12>
    99bc:	22f0      	movs	r2, #240	; 0xf0
    99be:	9b02      	ldr	r3, [sp, #8]
    99c0:	0212      	lsls	r2, r2, #8
    99c2:	4013      	ands	r3, r2
    99c4:	4a05      	ldr	r2, [pc, #20]	; (99dc <__swhatbuf_r+0x4c>)
    99c6:	189b      	adds	r3, r3, r2
    99c8:	425a      	negs	r2, r3
    99ca:	4153      	adcs	r3, r2
    99cc:	602b      	str	r3, [r5, #0]
    99ce:	e7ed      	b.n	99ac <__swhatbuf_r+0x1c>
    99d0:	2340      	movs	r3, #64	; 0x40
    99d2:	2000      	movs	r0, #0
    99d4:	6023      	str	r3, [r4, #0]
    99d6:	b010      	add	sp, #64	; 0x40
    99d8:	bd70      	pop	{r4, r5, r6, pc}
    99da:	46c0      	nop			; (mov r8, r8)
    99dc:	ffffe000 	.word	0xffffe000

000099e0 <__smakebuf_r>:
    99e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    99e2:	2602      	movs	r6, #2
    99e4:	898b      	ldrh	r3, [r1, #12]
    99e6:	0005      	movs	r5, r0
    99e8:	000c      	movs	r4, r1
    99ea:	4233      	tst	r3, r6
    99ec:	d006      	beq.n	99fc <__smakebuf_r+0x1c>
    99ee:	0023      	movs	r3, r4
    99f0:	3347      	adds	r3, #71	; 0x47
    99f2:	6023      	str	r3, [r4, #0]
    99f4:	6123      	str	r3, [r4, #16]
    99f6:	2301      	movs	r3, #1
    99f8:	6163      	str	r3, [r4, #20]
    99fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    99fc:	ab01      	add	r3, sp, #4
    99fe:	466a      	mov	r2, sp
    9a00:	f7ff ffc6 	bl	9990 <__swhatbuf_r>
    9a04:	9900      	ldr	r1, [sp, #0]
    9a06:	0007      	movs	r7, r0
    9a08:	0028      	movs	r0, r5
    9a0a:	f000 f881 	bl	9b10 <_malloc_r>
    9a0e:	2800      	cmp	r0, #0
    9a10:	d108      	bne.n	9a24 <__smakebuf_r+0x44>
    9a12:	220c      	movs	r2, #12
    9a14:	5ea3      	ldrsh	r3, [r4, r2]
    9a16:	059a      	lsls	r2, r3, #22
    9a18:	d4ef      	bmi.n	99fa <__smakebuf_r+0x1a>
    9a1a:	2203      	movs	r2, #3
    9a1c:	4393      	bics	r3, r2
    9a1e:	431e      	orrs	r6, r3
    9a20:	81a6      	strh	r6, [r4, #12]
    9a22:	e7e4      	b.n	99ee <__smakebuf_r+0xe>
    9a24:	4b0f      	ldr	r3, [pc, #60]	; (9a64 <__smakebuf_r+0x84>)
    9a26:	62ab      	str	r3, [r5, #40]	; 0x28
    9a28:	2380      	movs	r3, #128	; 0x80
    9a2a:	89a2      	ldrh	r2, [r4, #12]
    9a2c:	6020      	str	r0, [r4, #0]
    9a2e:	4313      	orrs	r3, r2
    9a30:	81a3      	strh	r3, [r4, #12]
    9a32:	9b00      	ldr	r3, [sp, #0]
    9a34:	6120      	str	r0, [r4, #16]
    9a36:	6163      	str	r3, [r4, #20]
    9a38:	9b01      	ldr	r3, [sp, #4]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d00d      	beq.n	9a5a <__smakebuf_r+0x7a>
    9a3e:	230e      	movs	r3, #14
    9a40:	5ee1      	ldrsh	r1, [r4, r3]
    9a42:	0028      	movs	r0, r5
    9a44:	f000 fcf0 	bl	a428 <_isatty_r>
    9a48:	2800      	cmp	r0, #0
    9a4a:	d006      	beq.n	9a5a <__smakebuf_r+0x7a>
    9a4c:	2203      	movs	r2, #3
    9a4e:	89a3      	ldrh	r3, [r4, #12]
    9a50:	4393      	bics	r3, r2
    9a52:	001a      	movs	r2, r3
    9a54:	2301      	movs	r3, #1
    9a56:	4313      	orrs	r3, r2
    9a58:	81a3      	strh	r3, [r4, #12]
    9a5a:	89a0      	ldrh	r0, [r4, #12]
    9a5c:	4338      	orrs	r0, r7
    9a5e:	81a0      	strh	r0, [r4, #12]
    9a60:	e7cb      	b.n	99fa <__smakebuf_r+0x1a>
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	000097e1 	.word	0x000097e1

00009a68 <malloc>:
    9a68:	b510      	push	{r4, lr}
    9a6a:	4b03      	ldr	r3, [pc, #12]	; (9a78 <malloc+0x10>)
    9a6c:	0001      	movs	r1, r0
    9a6e:	6818      	ldr	r0, [r3, #0]
    9a70:	f000 f84e 	bl	9b10 <_malloc_r>
    9a74:	bd10      	pop	{r4, pc}
    9a76:	46c0      	nop			; (mov r8, r8)
    9a78:	20000128 	.word	0x20000128

00009a7c <_free_r>:
    9a7c:	b570      	push	{r4, r5, r6, lr}
    9a7e:	0005      	movs	r5, r0
    9a80:	2900      	cmp	r1, #0
    9a82:	d010      	beq.n	9aa6 <_free_r+0x2a>
    9a84:	1f0c      	subs	r4, r1, #4
    9a86:	6823      	ldr	r3, [r4, #0]
    9a88:	2b00      	cmp	r3, #0
    9a8a:	da00      	bge.n	9a8e <_free_r+0x12>
    9a8c:	18e4      	adds	r4, r4, r3
    9a8e:	0028      	movs	r0, r5
    9a90:	f000 fcfb 	bl	a48a <__malloc_lock>
    9a94:	4a1d      	ldr	r2, [pc, #116]	; (9b0c <_free_r+0x90>)
    9a96:	6813      	ldr	r3, [r2, #0]
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d105      	bne.n	9aa8 <_free_r+0x2c>
    9a9c:	6063      	str	r3, [r4, #4]
    9a9e:	6014      	str	r4, [r2, #0]
    9aa0:	0028      	movs	r0, r5
    9aa2:	f000 fcf3 	bl	a48c <__malloc_unlock>
    9aa6:	bd70      	pop	{r4, r5, r6, pc}
    9aa8:	42a3      	cmp	r3, r4
    9aaa:	d909      	bls.n	9ac0 <_free_r+0x44>
    9aac:	6821      	ldr	r1, [r4, #0]
    9aae:	1860      	adds	r0, r4, r1
    9ab0:	4283      	cmp	r3, r0
    9ab2:	d1f3      	bne.n	9a9c <_free_r+0x20>
    9ab4:	6818      	ldr	r0, [r3, #0]
    9ab6:	685b      	ldr	r3, [r3, #4]
    9ab8:	1841      	adds	r1, r0, r1
    9aba:	6021      	str	r1, [r4, #0]
    9abc:	e7ee      	b.n	9a9c <_free_r+0x20>
    9abe:	0013      	movs	r3, r2
    9ac0:	685a      	ldr	r2, [r3, #4]
    9ac2:	2a00      	cmp	r2, #0
    9ac4:	d001      	beq.n	9aca <_free_r+0x4e>
    9ac6:	42a2      	cmp	r2, r4
    9ac8:	d9f9      	bls.n	9abe <_free_r+0x42>
    9aca:	6819      	ldr	r1, [r3, #0]
    9acc:	1858      	adds	r0, r3, r1
    9ace:	42a0      	cmp	r0, r4
    9ad0:	d10b      	bne.n	9aea <_free_r+0x6e>
    9ad2:	6820      	ldr	r0, [r4, #0]
    9ad4:	1809      	adds	r1, r1, r0
    9ad6:	1858      	adds	r0, r3, r1
    9ad8:	6019      	str	r1, [r3, #0]
    9ada:	4282      	cmp	r2, r0
    9adc:	d1e0      	bne.n	9aa0 <_free_r+0x24>
    9ade:	6810      	ldr	r0, [r2, #0]
    9ae0:	6852      	ldr	r2, [r2, #4]
    9ae2:	1841      	adds	r1, r0, r1
    9ae4:	6019      	str	r1, [r3, #0]
    9ae6:	605a      	str	r2, [r3, #4]
    9ae8:	e7da      	b.n	9aa0 <_free_r+0x24>
    9aea:	42a0      	cmp	r0, r4
    9aec:	d902      	bls.n	9af4 <_free_r+0x78>
    9aee:	230c      	movs	r3, #12
    9af0:	602b      	str	r3, [r5, #0]
    9af2:	e7d5      	b.n	9aa0 <_free_r+0x24>
    9af4:	6821      	ldr	r1, [r4, #0]
    9af6:	1860      	adds	r0, r4, r1
    9af8:	4282      	cmp	r2, r0
    9afa:	d103      	bne.n	9b04 <_free_r+0x88>
    9afc:	6810      	ldr	r0, [r2, #0]
    9afe:	6852      	ldr	r2, [r2, #4]
    9b00:	1841      	adds	r1, r0, r1
    9b02:	6021      	str	r1, [r4, #0]
    9b04:	6062      	str	r2, [r4, #4]
    9b06:	605c      	str	r4, [r3, #4]
    9b08:	e7ca      	b.n	9aa0 <_free_r+0x24>
    9b0a:	46c0      	nop			; (mov r8, r8)
    9b0c:	20000360 	.word	0x20000360

00009b10 <_malloc_r>:
    9b10:	2303      	movs	r3, #3
    9b12:	b570      	push	{r4, r5, r6, lr}
    9b14:	1ccd      	adds	r5, r1, #3
    9b16:	439d      	bics	r5, r3
    9b18:	3508      	adds	r5, #8
    9b1a:	0006      	movs	r6, r0
    9b1c:	2d0c      	cmp	r5, #12
    9b1e:	d21e      	bcs.n	9b5e <_malloc_r+0x4e>
    9b20:	250c      	movs	r5, #12
    9b22:	42a9      	cmp	r1, r5
    9b24:	d81d      	bhi.n	9b62 <_malloc_r+0x52>
    9b26:	0030      	movs	r0, r6
    9b28:	f000 fcaf 	bl	a48a <__malloc_lock>
    9b2c:	4a25      	ldr	r2, [pc, #148]	; (9bc4 <_malloc_r+0xb4>)
    9b2e:	6814      	ldr	r4, [r2, #0]
    9b30:	0021      	movs	r1, r4
    9b32:	2900      	cmp	r1, #0
    9b34:	d119      	bne.n	9b6a <_malloc_r+0x5a>
    9b36:	4c24      	ldr	r4, [pc, #144]	; (9bc8 <_malloc_r+0xb8>)
    9b38:	6823      	ldr	r3, [r4, #0]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d103      	bne.n	9b46 <_malloc_r+0x36>
    9b3e:	0030      	movs	r0, r6
    9b40:	f000 fb10 	bl	a164 <_sbrk_r>
    9b44:	6020      	str	r0, [r4, #0]
    9b46:	0029      	movs	r1, r5
    9b48:	0030      	movs	r0, r6
    9b4a:	f000 fb0b 	bl	a164 <_sbrk_r>
    9b4e:	1c43      	adds	r3, r0, #1
    9b50:	d12c      	bne.n	9bac <_malloc_r+0x9c>
    9b52:	230c      	movs	r3, #12
    9b54:	0030      	movs	r0, r6
    9b56:	6033      	str	r3, [r6, #0]
    9b58:	f000 fc98 	bl	a48c <__malloc_unlock>
    9b5c:	e003      	b.n	9b66 <_malloc_r+0x56>
    9b5e:	2d00      	cmp	r5, #0
    9b60:	dadf      	bge.n	9b22 <_malloc_r+0x12>
    9b62:	230c      	movs	r3, #12
    9b64:	6033      	str	r3, [r6, #0]
    9b66:	2000      	movs	r0, #0
    9b68:	bd70      	pop	{r4, r5, r6, pc}
    9b6a:	680b      	ldr	r3, [r1, #0]
    9b6c:	1b5b      	subs	r3, r3, r5
    9b6e:	d41a      	bmi.n	9ba6 <_malloc_r+0x96>
    9b70:	2b0b      	cmp	r3, #11
    9b72:	d903      	bls.n	9b7c <_malloc_r+0x6c>
    9b74:	600b      	str	r3, [r1, #0]
    9b76:	18cc      	adds	r4, r1, r3
    9b78:	6025      	str	r5, [r4, #0]
    9b7a:	e003      	b.n	9b84 <_malloc_r+0x74>
    9b7c:	428c      	cmp	r4, r1
    9b7e:	d10e      	bne.n	9b9e <_malloc_r+0x8e>
    9b80:	6863      	ldr	r3, [r4, #4]
    9b82:	6013      	str	r3, [r2, #0]
    9b84:	0030      	movs	r0, r6
    9b86:	f000 fc81 	bl	a48c <__malloc_unlock>
    9b8a:	0020      	movs	r0, r4
    9b8c:	2207      	movs	r2, #7
    9b8e:	300b      	adds	r0, #11
    9b90:	1d23      	adds	r3, r4, #4
    9b92:	4390      	bics	r0, r2
    9b94:	1ac3      	subs	r3, r0, r3
    9b96:	d0e7      	beq.n	9b68 <_malloc_r+0x58>
    9b98:	425a      	negs	r2, r3
    9b9a:	50e2      	str	r2, [r4, r3]
    9b9c:	e7e4      	b.n	9b68 <_malloc_r+0x58>
    9b9e:	684b      	ldr	r3, [r1, #4]
    9ba0:	6063      	str	r3, [r4, #4]
    9ba2:	000c      	movs	r4, r1
    9ba4:	e7ee      	b.n	9b84 <_malloc_r+0x74>
    9ba6:	000c      	movs	r4, r1
    9ba8:	6849      	ldr	r1, [r1, #4]
    9baa:	e7c2      	b.n	9b32 <_malloc_r+0x22>
    9bac:	2303      	movs	r3, #3
    9bae:	1cc4      	adds	r4, r0, #3
    9bb0:	439c      	bics	r4, r3
    9bb2:	42a0      	cmp	r0, r4
    9bb4:	d0e0      	beq.n	9b78 <_malloc_r+0x68>
    9bb6:	1a21      	subs	r1, r4, r0
    9bb8:	0030      	movs	r0, r6
    9bba:	f000 fad3 	bl	a164 <_sbrk_r>
    9bbe:	1c43      	adds	r3, r0, #1
    9bc0:	d1da      	bne.n	9b78 <_malloc_r+0x68>
    9bc2:	e7c6      	b.n	9b52 <_malloc_r+0x42>
    9bc4:	20000360 	.word	0x20000360
    9bc8:	20000364 	.word	0x20000364

00009bcc <__sfputc_r>:
    9bcc:	6893      	ldr	r3, [r2, #8]
    9bce:	b510      	push	{r4, lr}
    9bd0:	3b01      	subs	r3, #1
    9bd2:	6093      	str	r3, [r2, #8]
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	da05      	bge.n	9be4 <__sfputc_r+0x18>
    9bd8:	6994      	ldr	r4, [r2, #24]
    9bda:	42a3      	cmp	r3, r4
    9bdc:	db08      	blt.n	9bf0 <__sfputc_r+0x24>
    9bde:	b2cb      	uxtb	r3, r1
    9be0:	2b0a      	cmp	r3, #10
    9be2:	d005      	beq.n	9bf0 <__sfputc_r+0x24>
    9be4:	6813      	ldr	r3, [r2, #0]
    9be6:	1c58      	adds	r0, r3, #1
    9be8:	6010      	str	r0, [r2, #0]
    9bea:	7019      	strb	r1, [r3, #0]
    9bec:	b2c8      	uxtb	r0, r1
    9bee:	bd10      	pop	{r4, pc}
    9bf0:	f000 fb16 	bl	a220 <__swbuf_r>
    9bf4:	e7fb      	b.n	9bee <__sfputc_r+0x22>

00009bf6 <__sfputs_r>:
    9bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bf8:	0006      	movs	r6, r0
    9bfa:	000f      	movs	r7, r1
    9bfc:	0014      	movs	r4, r2
    9bfe:	18d5      	adds	r5, r2, r3
    9c00:	42ac      	cmp	r4, r5
    9c02:	d101      	bne.n	9c08 <__sfputs_r+0x12>
    9c04:	2000      	movs	r0, #0
    9c06:	e007      	b.n	9c18 <__sfputs_r+0x22>
    9c08:	7821      	ldrb	r1, [r4, #0]
    9c0a:	003a      	movs	r2, r7
    9c0c:	0030      	movs	r0, r6
    9c0e:	f7ff ffdd 	bl	9bcc <__sfputc_r>
    9c12:	3401      	adds	r4, #1
    9c14:	1c43      	adds	r3, r0, #1
    9c16:	d1f3      	bne.n	9c00 <__sfputs_r+0xa>
    9c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009c1c <_vfiprintf_r>:
    9c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c1e:	b09f      	sub	sp, #124	; 0x7c
    9c20:	0006      	movs	r6, r0
    9c22:	000f      	movs	r7, r1
    9c24:	0014      	movs	r4, r2
    9c26:	9305      	str	r3, [sp, #20]
    9c28:	2800      	cmp	r0, #0
    9c2a:	d004      	beq.n	9c36 <_vfiprintf_r+0x1a>
    9c2c:	6983      	ldr	r3, [r0, #24]
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d101      	bne.n	9c36 <_vfiprintf_r+0x1a>
    9c32:	f7ff fe17 	bl	9864 <__sinit>
    9c36:	4b7f      	ldr	r3, [pc, #508]	; (9e34 <_vfiprintf_r+0x218>)
    9c38:	429f      	cmp	r7, r3
    9c3a:	d15c      	bne.n	9cf6 <_vfiprintf_r+0xda>
    9c3c:	6877      	ldr	r7, [r6, #4]
    9c3e:	89bb      	ldrh	r3, [r7, #12]
    9c40:	071b      	lsls	r3, r3, #28
    9c42:	d562      	bpl.n	9d0a <_vfiprintf_r+0xee>
    9c44:	693b      	ldr	r3, [r7, #16]
    9c46:	2b00      	cmp	r3, #0
    9c48:	d05f      	beq.n	9d0a <_vfiprintf_r+0xee>
    9c4a:	2300      	movs	r3, #0
    9c4c:	ad06      	add	r5, sp, #24
    9c4e:	616b      	str	r3, [r5, #20]
    9c50:	3320      	adds	r3, #32
    9c52:	766b      	strb	r3, [r5, #25]
    9c54:	3310      	adds	r3, #16
    9c56:	76ab      	strb	r3, [r5, #26]
    9c58:	9402      	str	r4, [sp, #8]
    9c5a:	9c02      	ldr	r4, [sp, #8]
    9c5c:	7823      	ldrb	r3, [r4, #0]
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d15d      	bne.n	9d1e <_vfiprintf_r+0x102>
    9c62:	9b02      	ldr	r3, [sp, #8]
    9c64:	1ae3      	subs	r3, r4, r3
    9c66:	9304      	str	r3, [sp, #16]
    9c68:	d00d      	beq.n	9c86 <_vfiprintf_r+0x6a>
    9c6a:	9b04      	ldr	r3, [sp, #16]
    9c6c:	9a02      	ldr	r2, [sp, #8]
    9c6e:	0039      	movs	r1, r7
    9c70:	0030      	movs	r0, r6
    9c72:	f7ff ffc0 	bl	9bf6 <__sfputs_r>
    9c76:	1c43      	adds	r3, r0, #1
    9c78:	d100      	bne.n	9c7c <_vfiprintf_r+0x60>
    9c7a:	e0cc      	b.n	9e16 <_vfiprintf_r+0x1fa>
    9c7c:	696a      	ldr	r2, [r5, #20]
    9c7e:	9b04      	ldr	r3, [sp, #16]
    9c80:	4694      	mov	ip, r2
    9c82:	4463      	add	r3, ip
    9c84:	616b      	str	r3, [r5, #20]
    9c86:	7823      	ldrb	r3, [r4, #0]
    9c88:	2b00      	cmp	r3, #0
    9c8a:	d100      	bne.n	9c8e <_vfiprintf_r+0x72>
    9c8c:	e0c3      	b.n	9e16 <_vfiprintf_r+0x1fa>
    9c8e:	2201      	movs	r2, #1
    9c90:	2300      	movs	r3, #0
    9c92:	4252      	negs	r2, r2
    9c94:	606a      	str	r2, [r5, #4]
    9c96:	a902      	add	r1, sp, #8
    9c98:	3254      	adds	r2, #84	; 0x54
    9c9a:	1852      	adds	r2, r2, r1
    9c9c:	3401      	adds	r4, #1
    9c9e:	602b      	str	r3, [r5, #0]
    9ca0:	60eb      	str	r3, [r5, #12]
    9ca2:	60ab      	str	r3, [r5, #8]
    9ca4:	7013      	strb	r3, [r2, #0]
    9ca6:	65ab      	str	r3, [r5, #88]	; 0x58
    9ca8:	7821      	ldrb	r1, [r4, #0]
    9caa:	2205      	movs	r2, #5
    9cac:	4862      	ldr	r0, [pc, #392]	; (9e38 <_vfiprintf_r+0x21c>)
    9cae:	f000 fbe1 	bl	a474 <memchr>
    9cb2:	1c63      	adds	r3, r4, #1
    9cb4:	469c      	mov	ip, r3
    9cb6:	2800      	cmp	r0, #0
    9cb8:	d135      	bne.n	9d26 <_vfiprintf_r+0x10a>
    9cba:	6829      	ldr	r1, [r5, #0]
    9cbc:	06cb      	lsls	r3, r1, #27
    9cbe:	d504      	bpl.n	9cca <_vfiprintf_r+0xae>
    9cc0:	2353      	movs	r3, #83	; 0x53
    9cc2:	aa02      	add	r2, sp, #8
    9cc4:	3020      	adds	r0, #32
    9cc6:	189b      	adds	r3, r3, r2
    9cc8:	7018      	strb	r0, [r3, #0]
    9cca:	070b      	lsls	r3, r1, #28
    9ccc:	d504      	bpl.n	9cd8 <_vfiprintf_r+0xbc>
    9cce:	2353      	movs	r3, #83	; 0x53
    9cd0:	202b      	movs	r0, #43	; 0x2b
    9cd2:	aa02      	add	r2, sp, #8
    9cd4:	189b      	adds	r3, r3, r2
    9cd6:	7018      	strb	r0, [r3, #0]
    9cd8:	7823      	ldrb	r3, [r4, #0]
    9cda:	2b2a      	cmp	r3, #42	; 0x2a
    9cdc:	d02c      	beq.n	9d38 <_vfiprintf_r+0x11c>
    9cde:	2000      	movs	r0, #0
    9ce0:	210a      	movs	r1, #10
    9ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ce4:	7822      	ldrb	r2, [r4, #0]
    9ce6:	3a30      	subs	r2, #48	; 0x30
    9ce8:	2a09      	cmp	r2, #9
    9cea:	d800      	bhi.n	9cee <_vfiprintf_r+0xd2>
    9cec:	e06b      	b.n	9dc6 <_vfiprintf_r+0x1aa>
    9cee:	2800      	cmp	r0, #0
    9cf0:	d02a      	beq.n	9d48 <_vfiprintf_r+0x12c>
    9cf2:	9309      	str	r3, [sp, #36]	; 0x24
    9cf4:	e028      	b.n	9d48 <_vfiprintf_r+0x12c>
    9cf6:	4b51      	ldr	r3, [pc, #324]	; (9e3c <_vfiprintf_r+0x220>)
    9cf8:	429f      	cmp	r7, r3
    9cfa:	d101      	bne.n	9d00 <_vfiprintf_r+0xe4>
    9cfc:	68b7      	ldr	r7, [r6, #8]
    9cfe:	e79e      	b.n	9c3e <_vfiprintf_r+0x22>
    9d00:	4b4f      	ldr	r3, [pc, #316]	; (9e40 <_vfiprintf_r+0x224>)
    9d02:	429f      	cmp	r7, r3
    9d04:	d19b      	bne.n	9c3e <_vfiprintf_r+0x22>
    9d06:	68f7      	ldr	r7, [r6, #12]
    9d08:	e799      	b.n	9c3e <_vfiprintf_r+0x22>
    9d0a:	0039      	movs	r1, r7
    9d0c:	0030      	movs	r0, r6
    9d0e:	f000 faf1 	bl	a2f4 <__swsetup_r>
    9d12:	2800      	cmp	r0, #0
    9d14:	d099      	beq.n	9c4a <_vfiprintf_r+0x2e>
    9d16:	2001      	movs	r0, #1
    9d18:	4240      	negs	r0, r0
    9d1a:	b01f      	add	sp, #124	; 0x7c
    9d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d1e:	2b25      	cmp	r3, #37	; 0x25
    9d20:	d09f      	beq.n	9c62 <_vfiprintf_r+0x46>
    9d22:	3401      	adds	r4, #1
    9d24:	e79a      	b.n	9c5c <_vfiprintf_r+0x40>
    9d26:	4b44      	ldr	r3, [pc, #272]	; (9e38 <_vfiprintf_r+0x21c>)
    9d28:	6829      	ldr	r1, [r5, #0]
    9d2a:	1ac0      	subs	r0, r0, r3
    9d2c:	2301      	movs	r3, #1
    9d2e:	4083      	lsls	r3, r0
    9d30:	430b      	orrs	r3, r1
    9d32:	602b      	str	r3, [r5, #0]
    9d34:	4664      	mov	r4, ip
    9d36:	e7b7      	b.n	9ca8 <_vfiprintf_r+0x8c>
    9d38:	9b05      	ldr	r3, [sp, #20]
    9d3a:	1d18      	adds	r0, r3, #4
    9d3c:	681b      	ldr	r3, [r3, #0]
    9d3e:	9005      	str	r0, [sp, #20]
    9d40:	2b00      	cmp	r3, #0
    9d42:	db3a      	blt.n	9dba <_vfiprintf_r+0x19e>
    9d44:	9309      	str	r3, [sp, #36]	; 0x24
    9d46:	4664      	mov	r4, ip
    9d48:	7823      	ldrb	r3, [r4, #0]
    9d4a:	2b2e      	cmp	r3, #46	; 0x2e
    9d4c:	d10b      	bne.n	9d66 <_vfiprintf_r+0x14a>
    9d4e:	7863      	ldrb	r3, [r4, #1]
    9d50:	1c62      	adds	r2, r4, #1
    9d52:	2b2a      	cmp	r3, #42	; 0x2a
    9d54:	d13f      	bne.n	9dd6 <_vfiprintf_r+0x1ba>
    9d56:	9b05      	ldr	r3, [sp, #20]
    9d58:	3402      	adds	r4, #2
    9d5a:	1d1a      	adds	r2, r3, #4
    9d5c:	681b      	ldr	r3, [r3, #0]
    9d5e:	9205      	str	r2, [sp, #20]
    9d60:	2b00      	cmp	r3, #0
    9d62:	db35      	blt.n	9dd0 <_vfiprintf_r+0x1b4>
    9d64:	9307      	str	r3, [sp, #28]
    9d66:	7821      	ldrb	r1, [r4, #0]
    9d68:	2203      	movs	r2, #3
    9d6a:	4836      	ldr	r0, [pc, #216]	; (9e44 <_vfiprintf_r+0x228>)
    9d6c:	f000 fb82 	bl	a474 <memchr>
    9d70:	2800      	cmp	r0, #0
    9d72:	d007      	beq.n	9d84 <_vfiprintf_r+0x168>
    9d74:	4b33      	ldr	r3, [pc, #204]	; (9e44 <_vfiprintf_r+0x228>)
    9d76:	682a      	ldr	r2, [r5, #0]
    9d78:	1ac0      	subs	r0, r0, r3
    9d7a:	2340      	movs	r3, #64	; 0x40
    9d7c:	4083      	lsls	r3, r0
    9d7e:	4313      	orrs	r3, r2
    9d80:	602b      	str	r3, [r5, #0]
    9d82:	3401      	adds	r4, #1
    9d84:	7821      	ldrb	r1, [r4, #0]
    9d86:	1c63      	adds	r3, r4, #1
    9d88:	2206      	movs	r2, #6
    9d8a:	482f      	ldr	r0, [pc, #188]	; (9e48 <_vfiprintf_r+0x22c>)
    9d8c:	9302      	str	r3, [sp, #8]
    9d8e:	7629      	strb	r1, [r5, #24]
    9d90:	f000 fb70 	bl	a474 <memchr>
    9d94:	2800      	cmp	r0, #0
    9d96:	d044      	beq.n	9e22 <_vfiprintf_r+0x206>
    9d98:	4b2c      	ldr	r3, [pc, #176]	; (9e4c <_vfiprintf_r+0x230>)
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d12f      	bne.n	9dfe <_vfiprintf_r+0x1e2>
    9d9e:	6829      	ldr	r1, [r5, #0]
    9da0:	9b05      	ldr	r3, [sp, #20]
    9da2:	2207      	movs	r2, #7
    9da4:	05c9      	lsls	r1, r1, #23
    9da6:	d528      	bpl.n	9dfa <_vfiprintf_r+0x1de>
    9da8:	189b      	adds	r3, r3, r2
    9daa:	4393      	bics	r3, r2
    9dac:	3308      	adds	r3, #8
    9dae:	9305      	str	r3, [sp, #20]
    9db0:	696b      	ldr	r3, [r5, #20]
    9db2:	9a03      	ldr	r2, [sp, #12]
    9db4:	189b      	adds	r3, r3, r2
    9db6:	616b      	str	r3, [r5, #20]
    9db8:	e74f      	b.n	9c5a <_vfiprintf_r+0x3e>
    9dba:	425b      	negs	r3, r3
    9dbc:	60eb      	str	r3, [r5, #12]
    9dbe:	2302      	movs	r3, #2
    9dc0:	430b      	orrs	r3, r1
    9dc2:	602b      	str	r3, [r5, #0]
    9dc4:	e7bf      	b.n	9d46 <_vfiprintf_r+0x12a>
    9dc6:	434b      	muls	r3, r1
    9dc8:	3401      	adds	r4, #1
    9dca:	189b      	adds	r3, r3, r2
    9dcc:	2001      	movs	r0, #1
    9dce:	e789      	b.n	9ce4 <_vfiprintf_r+0xc8>
    9dd0:	2301      	movs	r3, #1
    9dd2:	425b      	negs	r3, r3
    9dd4:	e7c6      	b.n	9d64 <_vfiprintf_r+0x148>
    9dd6:	2300      	movs	r3, #0
    9dd8:	0014      	movs	r4, r2
    9dda:	200a      	movs	r0, #10
    9ddc:	001a      	movs	r2, r3
    9dde:	606b      	str	r3, [r5, #4]
    9de0:	7821      	ldrb	r1, [r4, #0]
    9de2:	3930      	subs	r1, #48	; 0x30
    9de4:	2909      	cmp	r1, #9
    9de6:	d903      	bls.n	9df0 <_vfiprintf_r+0x1d4>
    9de8:	2b00      	cmp	r3, #0
    9dea:	d0bc      	beq.n	9d66 <_vfiprintf_r+0x14a>
    9dec:	9207      	str	r2, [sp, #28]
    9dee:	e7ba      	b.n	9d66 <_vfiprintf_r+0x14a>
    9df0:	4342      	muls	r2, r0
    9df2:	3401      	adds	r4, #1
    9df4:	1852      	adds	r2, r2, r1
    9df6:	2301      	movs	r3, #1
    9df8:	e7f2      	b.n	9de0 <_vfiprintf_r+0x1c4>
    9dfa:	3307      	adds	r3, #7
    9dfc:	e7d5      	b.n	9daa <_vfiprintf_r+0x18e>
    9dfe:	ab05      	add	r3, sp, #20
    9e00:	9300      	str	r3, [sp, #0]
    9e02:	003a      	movs	r2, r7
    9e04:	4b12      	ldr	r3, [pc, #72]	; (9e50 <_vfiprintf_r+0x234>)
    9e06:	0029      	movs	r1, r5
    9e08:	0030      	movs	r0, r6
    9e0a:	e000      	b.n	9e0e <_vfiprintf_r+0x1f2>
    9e0c:	bf00      	nop
    9e0e:	9003      	str	r0, [sp, #12]
    9e10:	9b03      	ldr	r3, [sp, #12]
    9e12:	3301      	adds	r3, #1
    9e14:	d1cc      	bne.n	9db0 <_vfiprintf_r+0x194>
    9e16:	89bb      	ldrh	r3, [r7, #12]
    9e18:	065b      	lsls	r3, r3, #25
    9e1a:	d500      	bpl.n	9e1e <_vfiprintf_r+0x202>
    9e1c:	e77b      	b.n	9d16 <_vfiprintf_r+0xfa>
    9e1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9e20:	e77b      	b.n	9d1a <_vfiprintf_r+0xfe>
    9e22:	ab05      	add	r3, sp, #20
    9e24:	9300      	str	r3, [sp, #0]
    9e26:	003a      	movs	r2, r7
    9e28:	4b09      	ldr	r3, [pc, #36]	; (9e50 <_vfiprintf_r+0x234>)
    9e2a:	0029      	movs	r1, r5
    9e2c:	0030      	movs	r0, r6
    9e2e:	f000 f87f 	bl	9f30 <_printf_i>
    9e32:	e7ec      	b.n	9e0e <_vfiprintf_r+0x1f2>
    9e34:	0000ae0c 	.word	0x0000ae0c
    9e38:	0000ae4c 	.word	0x0000ae4c
    9e3c:	0000ae2c 	.word	0x0000ae2c
    9e40:	0000adec 	.word	0x0000adec
    9e44:	0000ae52 	.word	0x0000ae52
    9e48:	0000ae56 	.word	0x0000ae56
    9e4c:	00000000 	.word	0x00000000
    9e50:	00009bf7 	.word	0x00009bf7

00009e54 <_printf_common>:
    9e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e56:	0015      	movs	r5, r2
    9e58:	9301      	str	r3, [sp, #4]
    9e5a:	688a      	ldr	r2, [r1, #8]
    9e5c:	690b      	ldr	r3, [r1, #16]
    9e5e:	9000      	str	r0, [sp, #0]
    9e60:	000c      	movs	r4, r1
    9e62:	4293      	cmp	r3, r2
    9e64:	da00      	bge.n	9e68 <_printf_common+0x14>
    9e66:	0013      	movs	r3, r2
    9e68:	0022      	movs	r2, r4
    9e6a:	602b      	str	r3, [r5, #0]
    9e6c:	3243      	adds	r2, #67	; 0x43
    9e6e:	7812      	ldrb	r2, [r2, #0]
    9e70:	2a00      	cmp	r2, #0
    9e72:	d001      	beq.n	9e78 <_printf_common+0x24>
    9e74:	3301      	adds	r3, #1
    9e76:	602b      	str	r3, [r5, #0]
    9e78:	6823      	ldr	r3, [r4, #0]
    9e7a:	069b      	lsls	r3, r3, #26
    9e7c:	d502      	bpl.n	9e84 <_printf_common+0x30>
    9e7e:	682b      	ldr	r3, [r5, #0]
    9e80:	3302      	adds	r3, #2
    9e82:	602b      	str	r3, [r5, #0]
    9e84:	2706      	movs	r7, #6
    9e86:	6823      	ldr	r3, [r4, #0]
    9e88:	401f      	ands	r7, r3
    9e8a:	d027      	beq.n	9edc <_printf_common+0x88>
    9e8c:	0023      	movs	r3, r4
    9e8e:	3343      	adds	r3, #67	; 0x43
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	1e5a      	subs	r2, r3, #1
    9e94:	4193      	sbcs	r3, r2
    9e96:	6822      	ldr	r2, [r4, #0]
    9e98:	0692      	lsls	r2, r2, #26
    9e9a:	d430      	bmi.n	9efe <_printf_common+0xaa>
    9e9c:	0022      	movs	r2, r4
    9e9e:	9901      	ldr	r1, [sp, #4]
    9ea0:	3243      	adds	r2, #67	; 0x43
    9ea2:	9800      	ldr	r0, [sp, #0]
    9ea4:	9e08      	ldr	r6, [sp, #32]
    9ea6:	47b0      	blx	r6
    9ea8:	1c43      	adds	r3, r0, #1
    9eaa:	d025      	beq.n	9ef8 <_printf_common+0xa4>
    9eac:	2306      	movs	r3, #6
    9eae:	6820      	ldr	r0, [r4, #0]
    9eb0:	682a      	ldr	r2, [r5, #0]
    9eb2:	68e1      	ldr	r1, [r4, #12]
    9eb4:	4003      	ands	r3, r0
    9eb6:	2500      	movs	r5, #0
    9eb8:	2b04      	cmp	r3, #4
    9eba:	d103      	bne.n	9ec4 <_printf_common+0x70>
    9ebc:	1a8d      	subs	r5, r1, r2
    9ebe:	43eb      	mvns	r3, r5
    9ec0:	17db      	asrs	r3, r3, #31
    9ec2:	401d      	ands	r5, r3
    9ec4:	68a3      	ldr	r3, [r4, #8]
    9ec6:	6922      	ldr	r2, [r4, #16]
    9ec8:	4293      	cmp	r3, r2
    9eca:	dd01      	ble.n	9ed0 <_printf_common+0x7c>
    9ecc:	1a9b      	subs	r3, r3, r2
    9ece:	18ed      	adds	r5, r5, r3
    9ed0:	2700      	movs	r7, #0
    9ed2:	42bd      	cmp	r5, r7
    9ed4:	d120      	bne.n	9f18 <_printf_common+0xc4>
    9ed6:	2000      	movs	r0, #0
    9ed8:	e010      	b.n	9efc <_printf_common+0xa8>
    9eda:	3701      	adds	r7, #1
    9edc:	68e3      	ldr	r3, [r4, #12]
    9ede:	682a      	ldr	r2, [r5, #0]
    9ee0:	1a9b      	subs	r3, r3, r2
    9ee2:	429f      	cmp	r7, r3
    9ee4:	dad2      	bge.n	9e8c <_printf_common+0x38>
    9ee6:	0022      	movs	r2, r4
    9ee8:	2301      	movs	r3, #1
    9eea:	3219      	adds	r2, #25
    9eec:	9901      	ldr	r1, [sp, #4]
    9eee:	9800      	ldr	r0, [sp, #0]
    9ef0:	9e08      	ldr	r6, [sp, #32]
    9ef2:	47b0      	blx	r6
    9ef4:	1c43      	adds	r3, r0, #1
    9ef6:	d1f0      	bne.n	9eda <_printf_common+0x86>
    9ef8:	2001      	movs	r0, #1
    9efa:	4240      	negs	r0, r0
    9efc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9efe:	2030      	movs	r0, #48	; 0x30
    9f00:	18e1      	adds	r1, r4, r3
    9f02:	3143      	adds	r1, #67	; 0x43
    9f04:	7008      	strb	r0, [r1, #0]
    9f06:	0021      	movs	r1, r4
    9f08:	1c5a      	adds	r2, r3, #1
    9f0a:	3145      	adds	r1, #69	; 0x45
    9f0c:	7809      	ldrb	r1, [r1, #0]
    9f0e:	18a2      	adds	r2, r4, r2
    9f10:	3243      	adds	r2, #67	; 0x43
    9f12:	3302      	adds	r3, #2
    9f14:	7011      	strb	r1, [r2, #0]
    9f16:	e7c1      	b.n	9e9c <_printf_common+0x48>
    9f18:	0022      	movs	r2, r4
    9f1a:	2301      	movs	r3, #1
    9f1c:	321a      	adds	r2, #26
    9f1e:	9901      	ldr	r1, [sp, #4]
    9f20:	9800      	ldr	r0, [sp, #0]
    9f22:	9e08      	ldr	r6, [sp, #32]
    9f24:	47b0      	blx	r6
    9f26:	1c43      	adds	r3, r0, #1
    9f28:	d0e6      	beq.n	9ef8 <_printf_common+0xa4>
    9f2a:	3701      	adds	r7, #1
    9f2c:	e7d1      	b.n	9ed2 <_printf_common+0x7e>
	...

00009f30 <_printf_i>:
    9f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f32:	b08b      	sub	sp, #44	; 0x2c
    9f34:	9206      	str	r2, [sp, #24]
    9f36:	000a      	movs	r2, r1
    9f38:	3243      	adds	r2, #67	; 0x43
    9f3a:	9307      	str	r3, [sp, #28]
    9f3c:	9005      	str	r0, [sp, #20]
    9f3e:	9204      	str	r2, [sp, #16]
    9f40:	7e0a      	ldrb	r2, [r1, #24]
    9f42:	000c      	movs	r4, r1
    9f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9f46:	2a6e      	cmp	r2, #110	; 0x6e
    9f48:	d100      	bne.n	9f4c <_printf_i+0x1c>
    9f4a:	e08f      	b.n	a06c <_printf_i+0x13c>
    9f4c:	d817      	bhi.n	9f7e <_printf_i+0x4e>
    9f4e:	2a63      	cmp	r2, #99	; 0x63
    9f50:	d02c      	beq.n	9fac <_printf_i+0x7c>
    9f52:	d808      	bhi.n	9f66 <_printf_i+0x36>
    9f54:	2a00      	cmp	r2, #0
    9f56:	d100      	bne.n	9f5a <_printf_i+0x2a>
    9f58:	e099      	b.n	a08e <_printf_i+0x15e>
    9f5a:	2a58      	cmp	r2, #88	; 0x58
    9f5c:	d054      	beq.n	a008 <_printf_i+0xd8>
    9f5e:	0026      	movs	r6, r4
    9f60:	3642      	adds	r6, #66	; 0x42
    9f62:	7032      	strb	r2, [r6, #0]
    9f64:	e029      	b.n	9fba <_printf_i+0x8a>
    9f66:	2a64      	cmp	r2, #100	; 0x64
    9f68:	d001      	beq.n	9f6e <_printf_i+0x3e>
    9f6a:	2a69      	cmp	r2, #105	; 0x69
    9f6c:	d1f7      	bne.n	9f5e <_printf_i+0x2e>
    9f6e:	6821      	ldr	r1, [r4, #0]
    9f70:	681a      	ldr	r2, [r3, #0]
    9f72:	0608      	lsls	r0, r1, #24
    9f74:	d523      	bpl.n	9fbe <_printf_i+0x8e>
    9f76:	1d11      	adds	r1, r2, #4
    9f78:	6019      	str	r1, [r3, #0]
    9f7a:	6815      	ldr	r5, [r2, #0]
    9f7c:	e025      	b.n	9fca <_printf_i+0x9a>
    9f7e:	2a73      	cmp	r2, #115	; 0x73
    9f80:	d100      	bne.n	9f84 <_printf_i+0x54>
    9f82:	e088      	b.n	a096 <_printf_i+0x166>
    9f84:	d808      	bhi.n	9f98 <_printf_i+0x68>
    9f86:	2a6f      	cmp	r2, #111	; 0x6f
    9f88:	d029      	beq.n	9fde <_printf_i+0xae>
    9f8a:	2a70      	cmp	r2, #112	; 0x70
    9f8c:	d1e7      	bne.n	9f5e <_printf_i+0x2e>
    9f8e:	2220      	movs	r2, #32
    9f90:	6809      	ldr	r1, [r1, #0]
    9f92:	430a      	orrs	r2, r1
    9f94:	6022      	str	r2, [r4, #0]
    9f96:	e003      	b.n	9fa0 <_printf_i+0x70>
    9f98:	2a75      	cmp	r2, #117	; 0x75
    9f9a:	d020      	beq.n	9fde <_printf_i+0xae>
    9f9c:	2a78      	cmp	r2, #120	; 0x78
    9f9e:	d1de      	bne.n	9f5e <_printf_i+0x2e>
    9fa0:	0022      	movs	r2, r4
    9fa2:	2178      	movs	r1, #120	; 0x78
    9fa4:	3245      	adds	r2, #69	; 0x45
    9fa6:	7011      	strb	r1, [r2, #0]
    9fa8:	4a6c      	ldr	r2, [pc, #432]	; (a15c <_printf_i+0x22c>)
    9faa:	e030      	b.n	a00e <_printf_i+0xde>
    9fac:	000e      	movs	r6, r1
    9fae:	681a      	ldr	r2, [r3, #0]
    9fb0:	3642      	adds	r6, #66	; 0x42
    9fb2:	1d11      	adds	r1, r2, #4
    9fb4:	6019      	str	r1, [r3, #0]
    9fb6:	6813      	ldr	r3, [r2, #0]
    9fb8:	7033      	strb	r3, [r6, #0]
    9fba:	2301      	movs	r3, #1
    9fbc:	e079      	b.n	a0b2 <_printf_i+0x182>
    9fbe:	0649      	lsls	r1, r1, #25
    9fc0:	d5d9      	bpl.n	9f76 <_printf_i+0x46>
    9fc2:	1d11      	adds	r1, r2, #4
    9fc4:	6019      	str	r1, [r3, #0]
    9fc6:	2300      	movs	r3, #0
    9fc8:	5ed5      	ldrsh	r5, [r2, r3]
    9fca:	2d00      	cmp	r5, #0
    9fcc:	da03      	bge.n	9fd6 <_printf_i+0xa6>
    9fce:	232d      	movs	r3, #45	; 0x2d
    9fd0:	9a04      	ldr	r2, [sp, #16]
    9fd2:	426d      	negs	r5, r5
    9fd4:	7013      	strb	r3, [r2, #0]
    9fd6:	4b62      	ldr	r3, [pc, #392]	; (a160 <_printf_i+0x230>)
    9fd8:	270a      	movs	r7, #10
    9fda:	9303      	str	r3, [sp, #12]
    9fdc:	e02f      	b.n	a03e <_printf_i+0x10e>
    9fde:	6820      	ldr	r0, [r4, #0]
    9fe0:	6819      	ldr	r1, [r3, #0]
    9fe2:	0605      	lsls	r5, r0, #24
    9fe4:	d503      	bpl.n	9fee <_printf_i+0xbe>
    9fe6:	1d08      	adds	r0, r1, #4
    9fe8:	6018      	str	r0, [r3, #0]
    9fea:	680d      	ldr	r5, [r1, #0]
    9fec:	e005      	b.n	9ffa <_printf_i+0xca>
    9fee:	0640      	lsls	r0, r0, #25
    9ff0:	d5f9      	bpl.n	9fe6 <_printf_i+0xb6>
    9ff2:	680d      	ldr	r5, [r1, #0]
    9ff4:	1d08      	adds	r0, r1, #4
    9ff6:	6018      	str	r0, [r3, #0]
    9ff8:	b2ad      	uxth	r5, r5
    9ffa:	4b59      	ldr	r3, [pc, #356]	; (a160 <_printf_i+0x230>)
    9ffc:	2708      	movs	r7, #8
    9ffe:	9303      	str	r3, [sp, #12]
    a000:	2a6f      	cmp	r2, #111	; 0x6f
    a002:	d018      	beq.n	a036 <_printf_i+0x106>
    a004:	270a      	movs	r7, #10
    a006:	e016      	b.n	a036 <_printf_i+0x106>
    a008:	3145      	adds	r1, #69	; 0x45
    a00a:	700a      	strb	r2, [r1, #0]
    a00c:	4a54      	ldr	r2, [pc, #336]	; (a160 <_printf_i+0x230>)
    a00e:	9203      	str	r2, [sp, #12]
    a010:	681a      	ldr	r2, [r3, #0]
    a012:	6821      	ldr	r1, [r4, #0]
    a014:	1d10      	adds	r0, r2, #4
    a016:	6018      	str	r0, [r3, #0]
    a018:	6815      	ldr	r5, [r2, #0]
    a01a:	0608      	lsls	r0, r1, #24
    a01c:	d522      	bpl.n	a064 <_printf_i+0x134>
    a01e:	07cb      	lsls	r3, r1, #31
    a020:	d502      	bpl.n	a028 <_printf_i+0xf8>
    a022:	2320      	movs	r3, #32
    a024:	4319      	orrs	r1, r3
    a026:	6021      	str	r1, [r4, #0]
    a028:	2710      	movs	r7, #16
    a02a:	2d00      	cmp	r5, #0
    a02c:	d103      	bne.n	a036 <_printf_i+0x106>
    a02e:	2320      	movs	r3, #32
    a030:	6822      	ldr	r2, [r4, #0]
    a032:	439a      	bics	r2, r3
    a034:	6022      	str	r2, [r4, #0]
    a036:	0023      	movs	r3, r4
    a038:	2200      	movs	r2, #0
    a03a:	3343      	adds	r3, #67	; 0x43
    a03c:	701a      	strb	r2, [r3, #0]
    a03e:	6863      	ldr	r3, [r4, #4]
    a040:	60a3      	str	r3, [r4, #8]
    a042:	2b00      	cmp	r3, #0
    a044:	db5c      	blt.n	a100 <_printf_i+0x1d0>
    a046:	2204      	movs	r2, #4
    a048:	6821      	ldr	r1, [r4, #0]
    a04a:	4391      	bics	r1, r2
    a04c:	6021      	str	r1, [r4, #0]
    a04e:	2d00      	cmp	r5, #0
    a050:	d158      	bne.n	a104 <_printf_i+0x1d4>
    a052:	9e04      	ldr	r6, [sp, #16]
    a054:	2b00      	cmp	r3, #0
    a056:	d064      	beq.n	a122 <_printf_i+0x1f2>
    a058:	0026      	movs	r6, r4
    a05a:	9b03      	ldr	r3, [sp, #12]
    a05c:	3642      	adds	r6, #66	; 0x42
    a05e:	781b      	ldrb	r3, [r3, #0]
    a060:	7033      	strb	r3, [r6, #0]
    a062:	e05e      	b.n	a122 <_printf_i+0x1f2>
    a064:	0648      	lsls	r0, r1, #25
    a066:	d5da      	bpl.n	a01e <_printf_i+0xee>
    a068:	b2ad      	uxth	r5, r5
    a06a:	e7d8      	b.n	a01e <_printf_i+0xee>
    a06c:	6809      	ldr	r1, [r1, #0]
    a06e:	681a      	ldr	r2, [r3, #0]
    a070:	0608      	lsls	r0, r1, #24
    a072:	d505      	bpl.n	a080 <_printf_i+0x150>
    a074:	1d11      	adds	r1, r2, #4
    a076:	6019      	str	r1, [r3, #0]
    a078:	6813      	ldr	r3, [r2, #0]
    a07a:	6962      	ldr	r2, [r4, #20]
    a07c:	601a      	str	r2, [r3, #0]
    a07e:	e006      	b.n	a08e <_printf_i+0x15e>
    a080:	0649      	lsls	r1, r1, #25
    a082:	d5f7      	bpl.n	a074 <_printf_i+0x144>
    a084:	1d11      	adds	r1, r2, #4
    a086:	6019      	str	r1, [r3, #0]
    a088:	6813      	ldr	r3, [r2, #0]
    a08a:	8aa2      	ldrh	r2, [r4, #20]
    a08c:	801a      	strh	r2, [r3, #0]
    a08e:	2300      	movs	r3, #0
    a090:	9e04      	ldr	r6, [sp, #16]
    a092:	6123      	str	r3, [r4, #16]
    a094:	e054      	b.n	a140 <_printf_i+0x210>
    a096:	681a      	ldr	r2, [r3, #0]
    a098:	1d11      	adds	r1, r2, #4
    a09a:	6019      	str	r1, [r3, #0]
    a09c:	6816      	ldr	r6, [r2, #0]
    a09e:	2100      	movs	r1, #0
    a0a0:	6862      	ldr	r2, [r4, #4]
    a0a2:	0030      	movs	r0, r6
    a0a4:	f000 f9e6 	bl	a474 <memchr>
    a0a8:	2800      	cmp	r0, #0
    a0aa:	d001      	beq.n	a0b0 <_printf_i+0x180>
    a0ac:	1b80      	subs	r0, r0, r6
    a0ae:	6060      	str	r0, [r4, #4]
    a0b0:	6863      	ldr	r3, [r4, #4]
    a0b2:	6123      	str	r3, [r4, #16]
    a0b4:	2300      	movs	r3, #0
    a0b6:	9a04      	ldr	r2, [sp, #16]
    a0b8:	7013      	strb	r3, [r2, #0]
    a0ba:	e041      	b.n	a140 <_printf_i+0x210>
    a0bc:	6923      	ldr	r3, [r4, #16]
    a0be:	0032      	movs	r2, r6
    a0c0:	9906      	ldr	r1, [sp, #24]
    a0c2:	9805      	ldr	r0, [sp, #20]
    a0c4:	9d07      	ldr	r5, [sp, #28]
    a0c6:	47a8      	blx	r5
    a0c8:	1c43      	adds	r3, r0, #1
    a0ca:	d043      	beq.n	a154 <_printf_i+0x224>
    a0cc:	6823      	ldr	r3, [r4, #0]
    a0ce:	2500      	movs	r5, #0
    a0d0:	079b      	lsls	r3, r3, #30
    a0d2:	d40f      	bmi.n	a0f4 <_printf_i+0x1c4>
    a0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0d6:	68e0      	ldr	r0, [r4, #12]
    a0d8:	4298      	cmp	r0, r3
    a0da:	da3d      	bge.n	a158 <_printf_i+0x228>
    a0dc:	0018      	movs	r0, r3
    a0de:	e03b      	b.n	a158 <_printf_i+0x228>
    a0e0:	0022      	movs	r2, r4
    a0e2:	2301      	movs	r3, #1
    a0e4:	3219      	adds	r2, #25
    a0e6:	9906      	ldr	r1, [sp, #24]
    a0e8:	9805      	ldr	r0, [sp, #20]
    a0ea:	9e07      	ldr	r6, [sp, #28]
    a0ec:	47b0      	blx	r6
    a0ee:	1c43      	adds	r3, r0, #1
    a0f0:	d030      	beq.n	a154 <_printf_i+0x224>
    a0f2:	3501      	adds	r5, #1
    a0f4:	68e3      	ldr	r3, [r4, #12]
    a0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a0f8:	1a9b      	subs	r3, r3, r2
    a0fa:	429d      	cmp	r5, r3
    a0fc:	dbf0      	blt.n	a0e0 <_printf_i+0x1b0>
    a0fe:	e7e9      	b.n	a0d4 <_printf_i+0x1a4>
    a100:	2d00      	cmp	r5, #0
    a102:	d0a9      	beq.n	a058 <_printf_i+0x128>
    a104:	9e04      	ldr	r6, [sp, #16]
    a106:	0028      	movs	r0, r5
    a108:	0039      	movs	r1, r7
    a10a:	f7fe ff69 	bl	8fe0 <__aeabi_uidivmod>
    a10e:	9b03      	ldr	r3, [sp, #12]
    a110:	3e01      	subs	r6, #1
    a112:	5c5b      	ldrb	r3, [r3, r1]
    a114:	0028      	movs	r0, r5
    a116:	7033      	strb	r3, [r6, #0]
    a118:	0039      	movs	r1, r7
    a11a:	f7fe fedb 	bl	8ed4 <__udivsi3>
    a11e:	1e05      	subs	r5, r0, #0
    a120:	d1f1      	bne.n	a106 <_printf_i+0x1d6>
    a122:	2f08      	cmp	r7, #8
    a124:	d109      	bne.n	a13a <_printf_i+0x20a>
    a126:	6823      	ldr	r3, [r4, #0]
    a128:	07db      	lsls	r3, r3, #31
    a12a:	d506      	bpl.n	a13a <_printf_i+0x20a>
    a12c:	6863      	ldr	r3, [r4, #4]
    a12e:	6922      	ldr	r2, [r4, #16]
    a130:	4293      	cmp	r3, r2
    a132:	dc02      	bgt.n	a13a <_printf_i+0x20a>
    a134:	2330      	movs	r3, #48	; 0x30
    a136:	3e01      	subs	r6, #1
    a138:	7033      	strb	r3, [r6, #0]
    a13a:	9b04      	ldr	r3, [sp, #16]
    a13c:	1b9b      	subs	r3, r3, r6
    a13e:	6123      	str	r3, [r4, #16]
    a140:	9b07      	ldr	r3, [sp, #28]
    a142:	aa09      	add	r2, sp, #36	; 0x24
    a144:	9300      	str	r3, [sp, #0]
    a146:	0021      	movs	r1, r4
    a148:	9b06      	ldr	r3, [sp, #24]
    a14a:	9805      	ldr	r0, [sp, #20]
    a14c:	f7ff fe82 	bl	9e54 <_printf_common>
    a150:	1c43      	adds	r3, r0, #1
    a152:	d1b3      	bne.n	a0bc <_printf_i+0x18c>
    a154:	2001      	movs	r0, #1
    a156:	4240      	negs	r0, r0
    a158:	b00b      	add	sp, #44	; 0x2c
    a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a15c:	0000ae6e 	.word	0x0000ae6e
    a160:	0000ae5d 	.word	0x0000ae5d

0000a164 <_sbrk_r>:
    a164:	2300      	movs	r3, #0
    a166:	b570      	push	{r4, r5, r6, lr}
    a168:	4c06      	ldr	r4, [pc, #24]	; (a184 <_sbrk_r+0x20>)
    a16a:	0005      	movs	r5, r0
    a16c:	0008      	movs	r0, r1
    a16e:	6023      	str	r3, [r4, #0]
    a170:	f7fe fe92 	bl	8e98 <_sbrk>
    a174:	1c43      	adds	r3, r0, #1
    a176:	d103      	bne.n	a180 <_sbrk_r+0x1c>
    a178:	6823      	ldr	r3, [r4, #0]
    a17a:	2b00      	cmp	r3, #0
    a17c:	d000      	beq.n	a180 <_sbrk_r+0x1c>
    a17e:	602b      	str	r3, [r5, #0]
    a180:	bd70      	pop	{r4, r5, r6, pc}
    a182:	46c0      	nop			; (mov r8, r8)
    a184:	20000e4c 	.word	0x20000e4c

0000a188 <__sread>:
    a188:	b570      	push	{r4, r5, r6, lr}
    a18a:	000c      	movs	r4, r1
    a18c:	250e      	movs	r5, #14
    a18e:	5f49      	ldrsh	r1, [r1, r5]
    a190:	f000 f97e 	bl	a490 <_read_r>
    a194:	2800      	cmp	r0, #0
    a196:	db03      	blt.n	a1a0 <__sread+0x18>
    a198:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a19a:	181b      	adds	r3, r3, r0
    a19c:	6563      	str	r3, [r4, #84]	; 0x54
    a19e:	bd70      	pop	{r4, r5, r6, pc}
    a1a0:	89a3      	ldrh	r3, [r4, #12]
    a1a2:	4a02      	ldr	r2, [pc, #8]	; (a1ac <__sread+0x24>)
    a1a4:	4013      	ands	r3, r2
    a1a6:	81a3      	strh	r3, [r4, #12]
    a1a8:	e7f9      	b.n	a19e <__sread+0x16>
    a1aa:	46c0      	nop			; (mov r8, r8)
    a1ac:	ffffefff 	.word	0xffffefff

0000a1b0 <__swrite>:
    a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1b2:	001f      	movs	r7, r3
    a1b4:	898b      	ldrh	r3, [r1, #12]
    a1b6:	0005      	movs	r5, r0
    a1b8:	000c      	movs	r4, r1
    a1ba:	0016      	movs	r6, r2
    a1bc:	05db      	lsls	r3, r3, #23
    a1be:	d505      	bpl.n	a1cc <__swrite+0x1c>
    a1c0:	230e      	movs	r3, #14
    a1c2:	5ec9      	ldrsh	r1, [r1, r3]
    a1c4:	2200      	movs	r2, #0
    a1c6:	2302      	movs	r3, #2
    a1c8:	f000 f940 	bl	a44c <_lseek_r>
    a1cc:	89a3      	ldrh	r3, [r4, #12]
    a1ce:	4a05      	ldr	r2, [pc, #20]	; (a1e4 <__swrite+0x34>)
    a1d0:	0028      	movs	r0, r5
    a1d2:	4013      	ands	r3, r2
    a1d4:	81a3      	strh	r3, [r4, #12]
    a1d6:	0032      	movs	r2, r6
    a1d8:	230e      	movs	r3, #14
    a1da:	5ee1      	ldrsh	r1, [r4, r3]
    a1dc:	003b      	movs	r3, r7
    a1de:	f000 f875 	bl	a2cc <_write_r>
    a1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1e4:	ffffefff 	.word	0xffffefff

0000a1e8 <__sseek>:
    a1e8:	b570      	push	{r4, r5, r6, lr}
    a1ea:	000c      	movs	r4, r1
    a1ec:	250e      	movs	r5, #14
    a1ee:	5f49      	ldrsh	r1, [r1, r5]
    a1f0:	f000 f92c 	bl	a44c <_lseek_r>
    a1f4:	89a3      	ldrh	r3, [r4, #12]
    a1f6:	1c42      	adds	r2, r0, #1
    a1f8:	d103      	bne.n	a202 <__sseek+0x1a>
    a1fa:	4a05      	ldr	r2, [pc, #20]	; (a210 <__sseek+0x28>)
    a1fc:	4013      	ands	r3, r2
    a1fe:	81a3      	strh	r3, [r4, #12]
    a200:	bd70      	pop	{r4, r5, r6, pc}
    a202:	2280      	movs	r2, #128	; 0x80
    a204:	0152      	lsls	r2, r2, #5
    a206:	4313      	orrs	r3, r2
    a208:	81a3      	strh	r3, [r4, #12]
    a20a:	6560      	str	r0, [r4, #84]	; 0x54
    a20c:	e7f8      	b.n	a200 <__sseek+0x18>
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	ffffefff 	.word	0xffffefff

0000a214 <__sclose>:
    a214:	b510      	push	{r4, lr}
    a216:	230e      	movs	r3, #14
    a218:	5ec9      	ldrsh	r1, [r1, r3]
    a21a:	f000 f8e1 	bl	a3e0 <_close_r>
    a21e:	bd10      	pop	{r4, pc}

0000a220 <__swbuf_r>:
    a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a222:	0005      	movs	r5, r0
    a224:	000e      	movs	r6, r1
    a226:	0014      	movs	r4, r2
    a228:	2800      	cmp	r0, #0
    a22a:	d004      	beq.n	a236 <__swbuf_r+0x16>
    a22c:	6983      	ldr	r3, [r0, #24]
    a22e:	2b00      	cmp	r3, #0
    a230:	d101      	bne.n	a236 <__swbuf_r+0x16>
    a232:	f7ff fb17 	bl	9864 <__sinit>
    a236:	4b22      	ldr	r3, [pc, #136]	; (a2c0 <__swbuf_r+0xa0>)
    a238:	429c      	cmp	r4, r3
    a23a:	d12d      	bne.n	a298 <__swbuf_r+0x78>
    a23c:	686c      	ldr	r4, [r5, #4]
    a23e:	69a3      	ldr	r3, [r4, #24]
    a240:	60a3      	str	r3, [r4, #8]
    a242:	89a3      	ldrh	r3, [r4, #12]
    a244:	071b      	lsls	r3, r3, #28
    a246:	d531      	bpl.n	a2ac <__swbuf_r+0x8c>
    a248:	6923      	ldr	r3, [r4, #16]
    a24a:	2b00      	cmp	r3, #0
    a24c:	d02e      	beq.n	a2ac <__swbuf_r+0x8c>
    a24e:	6823      	ldr	r3, [r4, #0]
    a250:	6922      	ldr	r2, [r4, #16]
    a252:	b2f7      	uxtb	r7, r6
    a254:	1a98      	subs	r0, r3, r2
    a256:	6963      	ldr	r3, [r4, #20]
    a258:	b2f6      	uxtb	r6, r6
    a25a:	4298      	cmp	r0, r3
    a25c:	db05      	blt.n	a26a <__swbuf_r+0x4a>
    a25e:	0021      	movs	r1, r4
    a260:	0028      	movs	r0, r5
    a262:	f7ff fa91 	bl	9788 <_fflush_r>
    a266:	2800      	cmp	r0, #0
    a268:	d126      	bne.n	a2b8 <__swbuf_r+0x98>
    a26a:	68a3      	ldr	r3, [r4, #8]
    a26c:	3001      	adds	r0, #1
    a26e:	3b01      	subs	r3, #1
    a270:	60a3      	str	r3, [r4, #8]
    a272:	6823      	ldr	r3, [r4, #0]
    a274:	1c5a      	adds	r2, r3, #1
    a276:	6022      	str	r2, [r4, #0]
    a278:	701f      	strb	r7, [r3, #0]
    a27a:	6963      	ldr	r3, [r4, #20]
    a27c:	4298      	cmp	r0, r3
    a27e:	d004      	beq.n	a28a <__swbuf_r+0x6a>
    a280:	89a3      	ldrh	r3, [r4, #12]
    a282:	07db      	lsls	r3, r3, #31
    a284:	d51a      	bpl.n	a2bc <__swbuf_r+0x9c>
    a286:	2e0a      	cmp	r6, #10
    a288:	d118      	bne.n	a2bc <__swbuf_r+0x9c>
    a28a:	0021      	movs	r1, r4
    a28c:	0028      	movs	r0, r5
    a28e:	f7ff fa7b 	bl	9788 <_fflush_r>
    a292:	2800      	cmp	r0, #0
    a294:	d012      	beq.n	a2bc <__swbuf_r+0x9c>
    a296:	e00f      	b.n	a2b8 <__swbuf_r+0x98>
    a298:	4b0a      	ldr	r3, [pc, #40]	; (a2c4 <__swbuf_r+0xa4>)
    a29a:	429c      	cmp	r4, r3
    a29c:	d101      	bne.n	a2a2 <__swbuf_r+0x82>
    a29e:	68ac      	ldr	r4, [r5, #8]
    a2a0:	e7cd      	b.n	a23e <__swbuf_r+0x1e>
    a2a2:	4b09      	ldr	r3, [pc, #36]	; (a2c8 <__swbuf_r+0xa8>)
    a2a4:	429c      	cmp	r4, r3
    a2a6:	d1ca      	bne.n	a23e <__swbuf_r+0x1e>
    a2a8:	68ec      	ldr	r4, [r5, #12]
    a2aa:	e7c8      	b.n	a23e <__swbuf_r+0x1e>
    a2ac:	0021      	movs	r1, r4
    a2ae:	0028      	movs	r0, r5
    a2b0:	f000 f820 	bl	a2f4 <__swsetup_r>
    a2b4:	2800      	cmp	r0, #0
    a2b6:	d0ca      	beq.n	a24e <__swbuf_r+0x2e>
    a2b8:	2601      	movs	r6, #1
    a2ba:	4276      	negs	r6, r6
    a2bc:	0030      	movs	r0, r6
    a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2c0:	0000ae0c 	.word	0x0000ae0c
    a2c4:	0000ae2c 	.word	0x0000ae2c
    a2c8:	0000adec 	.word	0x0000adec

0000a2cc <_write_r>:
    a2cc:	b570      	push	{r4, r5, r6, lr}
    a2ce:	0005      	movs	r5, r0
    a2d0:	0008      	movs	r0, r1
    a2d2:	0011      	movs	r1, r2
    a2d4:	2200      	movs	r2, #0
    a2d6:	4c06      	ldr	r4, [pc, #24]	; (a2f0 <_write_r+0x24>)
    a2d8:	6022      	str	r2, [r4, #0]
    a2da:	001a      	movs	r2, r3
    a2dc:	f7f9 fe60 	bl	3fa0 <_write>
    a2e0:	1c43      	adds	r3, r0, #1
    a2e2:	d103      	bne.n	a2ec <_write_r+0x20>
    a2e4:	6823      	ldr	r3, [r4, #0]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d000      	beq.n	a2ec <_write_r+0x20>
    a2ea:	602b      	str	r3, [r5, #0]
    a2ec:	bd70      	pop	{r4, r5, r6, pc}
    a2ee:	46c0      	nop			; (mov r8, r8)
    a2f0:	20000e4c 	.word	0x20000e4c

0000a2f4 <__swsetup_r>:
    a2f4:	4b36      	ldr	r3, [pc, #216]	; (a3d0 <__swsetup_r+0xdc>)
    a2f6:	b570      	push	{r4, r5, r6, lr}
    a2f8:	681d      	ldr	r5, [r3, #0]
    a2fa:	0006      	movs	r6, r0
    a2fc:	000c      	movs	r4, r1
    a2fe:	2d00      	cmp	r5, #0
    a300:	d005      	beq.n	a30e <__swsetup_r+0x1a>
    a302:	69ab      	ldr	r3, [r5, #24]
    a304:	2b00      	cmp	r3, #0
    a306:	d102      	bne.n	a30e <__swsetup_r+0x1a>
    a308:	0028      	movs	r0, r5
    a30a:	f7ff faab 	bl	9864 <__sinit>
    a30e:	4b31      	ldr	r3, [pc, #196]	; (a3d4 <__swsetup_r+0xe0>)
    a310:	429c      	cmp	r4, r3
    a312:	d10f      	bne.n	a334 <__swsetup_r+0x40>
    a314:	686c      	ldr	r4, [r5, #4]
    a316:	230c      	movs	r3, #12
    a318:	5ee2      	ldrsh	r2, [r4, r3]
    a31a:	b293      	uxth	r3, r2
    a31c:	0719      	lsls	r1, r3, #28
    a31e:	d42d      	bmi.n	a37c <__swsetup_r+0x88>
    a320:	06d9      	lsls	r1, r3, #27
    a322:	d411      	bmi.n	a348 <__swsetup_r+0x54>
    a324:	2309      	movs	r3, #9
    a326:	2001      	movs	r0, #1
    a328:	6033      	str	r3, [r6, #0]
    a32a:	3337      	adds	r3, #55	; 0x37
    a32c:	4313      	orrs	r3, r2
    a32e:	81a3      	strh	r3, [r4, #12]
    a330:	4240      	negs	r0, r0
    a332:	bd70      	pop	{r4, r5, r6, pc}
    a334:	4b28      	ldr	r3, [pc, #160]	; (a3d8 <__swsetup_r+0xe4>)
    a336:	429c      	cmp	r4, r3
    a338:	d101      	bne.n	a33e <__swsetup_r+0x4a>
    a33a:	68ac      	ldr	r4, [r5, #8]
    a33c:	e7eb      	b.n	a316 <__swsetup_r+0x22>
    a33e:	4b27      	ldr	r3, [pc, #156]	; (a3dc <__swsetup_r+0xe8>)
    a340:	429c      	cmp	r4, r3
    a342:	d1e8      	bne.n	a316 <__swsetup_r+0x22>
    a344:	68ec      	ldr	r4, [r5, #12]
    a346:	e7e6      	b.n	a316 <__swsetup_r+0x22>
    a348:	075b      	lsls	r3, r3, #29
    a34a:	d513      	bpl.n	a374 <__swsetup_r+0x80>
    a34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a34e:	2900      	cmp	r1, #0
    a350:	d008      	beq.n	a364 <__swsetup_r+0x70>
    a352:	0023      	movs	r3, r4
    a354:	3344      	adds	r3, #68	; 0x44
    a356:	4299      	cmp	r1, r3
    a358:	d002      	beq.n	a360 <__swsetup_r+0x6c>
    a35a:	0030      	movs	r0, r6
    a35c:	f7ff fb8e 	bl	9a7c <_free_r>
    a360:	2300      	movs	r3, #0
    a362:	6363      	str	r3, [r4, #52]	; 0x34
    a364:	2224      	movs	r2, #36	; 0x24
    a366:	89a3      	ldrh	r3, [r4, #12]
    a368:	4393      	bics	r3, r2
    a36a:	81a3      	strh	r3, [r4, #12]
    a36c:	2300      	movs	r3, #0
    a36e:	6063      	str	r3, [r4, #4]
    a370:	6923      	ldr	r3, [r4, #16]
    a372:	6023      	str	r3, [r4, #0]
    a374:	2308      	movs	r3, #8
    a376:	89a2      	ldrh	r2, [r4, #12]
    a378:	4313      	orrs	r3, r2
    a37a:	81a3      	strh	r3, [r4, #12]
    a37c:	6923      	ldr	r3, [r4, #16]
    a37e:	2b00      	cmp	r3, #0
    a380:	d10b      	bne.n	a39a <__swsetup_r+0xa6>
    a382:	21a0      	movs	r1, #160	; 0xa0
    a384:	2280      	movs	r2, #128	; 0x80
    a386:	89a3      	ldrh	r3, [r4, #12]
    a388:	0089      	lsls	r1, r1, #2
    a38a:	0092      	lsls	r2, r2, #2
    a38c:	400b      	ands	r3, r1
    a38e:	4293      	cmp	r3, r2
    a390:	d003      	beq.n	a39a <__swsetup_r+0xa6>
    a392:	0021      	movs	r1, r4
    a394:	0030      	movs	r0, r6
    a396:	f7ff fb23 	bl	99e0 <__smakebuf_r>
    a39a:	2301      	movs	r3, #1
    a39c:	89a2      	ldrh	r2, [r4, #12]
    a39e:	4013      	ands	r3, r2
    a3a0:	d011      	beq.n	a3c6 <__swsetup_r+0xd2>
    a3a2:	2300      	movs	r3, #0
    a3a4:	60a3      	str	r3, [r4, #8]
    a3a6:	6963      	ldr	r3, [r4, #20]
    a3a8:	425b      	negs	r3, r3
    a3aa:	61a3      	str	r3, [r4, #24]
    a3ac:	2000      	movs	r0, #0
    a3ae:	6923      	ldr	r3, [r4, #16]
    a3b0:	4283      	cmp	r3, r0
    a3b2:	d1be      	bne.n	a332 <__swsetup_r+0x3e>
    a3b4:	230c      	movs	r3, #12
    a3b6:	5ee2      	ldrsh	r2, [r4, r3]
    a3b8:	0613      	lsls	r3, r2, #24
    a3ba:	d5ba      	bpl.n	a332 <__swsetup_r+0x3e>
    a3bc:	2340      	movs	r3, #64	; 0x40
    a3be:	4313      	orrs	r3, r2
    a3c0:	81a3      	strh	r3, [r4, #12]
    a3c2:	3801      	subs	r0, #1
    a3c4:	e7b5      	b.n	a332 <__swsetup_r+0x3e>
    a3c6:	0792      	lsls	r2, r2, #30
    a3c8:	d400      	bmi.n	a3cc <__swsetup_r+0xd8>
    a3ca:	6963      	ldr	r3, [r4, #20]
    a3cc:	60a3      	str	r3, [r4, #8]
    a3ce:	e7ed      	b.n	a3ac <__swsetup_r+0xb8>
    a3d0:	20000128 	.word	0x20000128
    a3d4:	0000ae0c 	.word	0x0000ae0c
    a3d8:	0000ae2c 	.word	0x0000ae2c
    a3dc:	0000adec 	.word	0x0000adec

0000a3e0 <_close_r>:
    a3e0:	2300      	movs	r3, #0
    a3e2:	b570      	push	{r4, r5, r6, lr}
    a3e4:	4c06      	ldr	r4, [pc, #24]	; (a400 <_close_r+0x20>)
    a3e6:	0005      	movs	r5, r0
    a3e8:	0008      	movs	r0, r1
    a3ea:	6023      	str	r3, [r4, #0]
    a3ec:	f7fe fd66 	bl	8ebc <_close>
    a3f0:	1c43      	adds	r3, r0, #1
    a3f2:	d103      	bne.n	a3fc <_close_r+0x1c>
    a3f4:	6823      	ldr	r3, [r4, #0]
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	d000      	beq.n	a3fc <_close_r+0x1c>
    a3fa:	602b      	str	r3, [r5, #0]
    a3fc:	bd70      	pop	{r4, r5, r6, pc}
    a3fe:	46c0      	nop			; (mov r8, r8)
    a400:	20000e4c 	.word	0x20000e4c

0000a404 <_fstat_r>:
    a404:	2300      	movs	r3, #0
    a406:	b570      	push	{r4, r5, r6, lr}
    a408:	4c06      	ldr	r4, [pc, #24]	; (a424 <_fstat_r+0x20>)
    a40a:	0005      	movs	r5, r0
    a40c:	0008      	movs	r0, r1
    a40e:	0011      	movs	r1, r2
    a410:	6023      	str	r3, [r4, #0]
    a412:	f7fe fd56 	bl	8ec2 <_fstat>
    a416:	1c43      	adds	r3, r0, #1
    a418:	d103      	bne.n	a422 <_fstat_r+0x1e>
    a41a:	6823      	ldr	r3, [r4, #0]
    a41c:	2b00      	cmp	r3, #0
    a41e:	d000      	beq.n	a422 <_fstat_r+0x1e>
    a420:	602b      	str	r3, [r5, #0]
    a422:	bd70      	pop	{r4, r5, r6, pc}
    a424:	20000e4c 	.word	0x20000e4c

0000a428 <_isatty_r>:
    a428:	2300      	movs	r3, #0
    a42a:	b570      	push	{r4, r5, r6, lr}
    a42c:	4c06      	ldr	r4, [pc, #24]	; (a448 <_isatty_r+0x20>)
    a42e:	0005      	movs	r5, r0
    a430:	0008      	movs	r0, r1
    a432:	6023      	str	r3, [r4, #0]
    a434:	f7fe fd4a 	bl	8ecc <_isatty>
    a438:	1c43      	adds	r3, r0, #1
    a43a:	d103      	bne.n	a444 <_isatty_r+0x1c>
    a43c:	6823      	ldr	r3, [r4, #0]
    a43e:	2b00      	cmp	r3, #0
    a440:	d000      	beq.n	a444 <_isatty_r+0x1c>
    a442:	602b      	str	r3, [r5, #0]
    a444:	bd70      	pop	{r4, r5, r6, pc}
    a446:	46c0      	nop			; (mov r8, r8)
    a448:	20000e4c 	.word	0x20000e4c

0000a44c <_lseek_r>:
    a44c:	b570      	push	{r4, r5, r6, lr}
    a44e:	0005      	movs	r5, r0
    a450:	0008      	movs	r0, r1
    a452:	0011      	movs	r1, r2
    a454:	2200      	movs	r2, #0
    a456:	4c06      	ldr	r4, [pc, #24]	; (a470 <_lseek_r+0x24>)
    a458:	6022      	str	r2, [r4, #0]
    a45a:	001a      	movs	r2, r3
    a45c:	f7fe fd38 	bl	8ed0 <_lseek>
    a460:	1c43      	adds	r3, r0, #1
    a462:	d103      	bne.n	a46c <_lseek_r+0x20>
    a464:	6823      	ldr	r3, [r4, #0]
    a466:	2b00      	cmp	r3, #0
    a468:	d000      	beq.n	a46c <_lseek_r+0x20>
    a46a:	602b      	str	r3, [r5, #0]
    a46c:	bd70      	pop	{r4, r5, r6, pc}
    a46e:	46c0      	nop			; (mov r8, r8)
    a470:	20000e4c 	.word	0x20000e4c

0000a474 <memchr>:
    a474:	b2c9      	uxtb	r1, r1
    a476:	1882      	adds	r2, r0, r2
    a478:	4290      	cmp	r0, r2
    a47a:	d101      	bne.n	a480 <memchr+0xc>
    a47c:	2000      	movs	r0, #0
    a47e:	4770      	bx	lr
    a480:	7803      	ldrb	r3, [r0, #0]
    a482:	428b      	cmp	r3, r1
    a484:	d0fb      	beq.n	a47e <memchr+0xa>
    a486:	3001      	adds	r0, #1
    a488:	e7f6      	b.n	a478 <memchr+0x4>

0000a48a <__malloc_lock>:
    a48a:	4770      	bx	lr

0000a48c <__malloc_unlock>:
    a48c:	4770      	bx	lr
	...

0000a490 <_read_r>:
    a490:	b570      	push	{r4, r5, r6, lr}
    a492:	0005      	movs	r5, r0
    a494:	0008      	movs	r0, r1
    a496:	0011      	movs	r1, r2
    a498:	2200      	movs	r2, #0
    a49a:	4c06      	ldr	r4, [pc, #24]	; (a4b4 <_read_r+0x24>)
    a49c:	6022      	str	r2, [r4, #0]
    a49e:	001a      	movs	r2, r3
    a4a0:	f7f9 fd5c 	bl	3f5c <_read>
    a4a4:	1c43      	adds	r3, r0, #1
    a4a6:	d103      	bne.n	a4b0 <_read_r+0x20>
    a4a8:	6823      	ldr	r3, [r4, #0]
    a4aa:	2b00      	cmp	r3, #0
    a4ac:	d000      	beq.n	a4b0 <_read_r+0x20>
    a4ae:	602b      	str	r3, [r5, #0]
    a4b0:	bd70      	pop	{r4, r5, r6, pc}
    a4b2:	46c0      	nop			; (mov r8, r8)
    a4b4:	20000e4c 	.word	0x20000e4c

0000a4b8 <_tcc_apbcmasks>:
    a4b8:	00000100 00000200 00000400              ............

0000a4c4 <_tcc_cc_nums>:
    a4c4:	00020204                                ....

0000a4c8 <_tcc_gclk_ids>:
    a4c8:	001b1a1a                                ....

0000a4cc <_tcc_maxs>:
    a4cc:	00ffffff 00ffffff 0000ffff              ............

0000a4d8 <_tcc_ow_nums>:
    a4d8:	00020408                                ....

0000a4dc <_tcc_intflag>:
    a4dc:	00000001 00000002 00000004 00000008     ................
    a4ec:	00001000 00002000 00004000 00008000     ..... ...@......
    a4fc:	00010000 00020000 00040000 00080000     ................

0000a50c <tcc_interrupt_vectors.12466>:
    a50c:	0011100f                                ....

0000a510 <mmc_trans_multipliers>:
    a510:	00000000 0000000a 0000000c 0000000d     ................
    a520:	0000000f 00000014 0000001a 0000001e     ................
    a530:	00000023 00000028 0000002d 00000034     #...(...-...4...
    a540:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000a550 <sd_mmc_trans_units>:
    a550:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000a56c <sd_trans_multipliers>:
    a56c:	00000000 0000000a 0000000c 0000000d     ................
    a57c:	0000000f 00000014 00000019 0000001e     ................
    a58c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    a59c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    a5ac:	000018e6 000019bc 000019bc 00001828     ............(...
    a5bc:	000019bc 000019bc 000019bc 000019bc     ................
    a5cc:	000019bc 000019bc 000019bc 000019bc     ................
    a5dc:	000019bc 000019bc 000019bc 000019bc     ................
    a5ec:	000019bc 000019bc 0000184c 000019bc     ........L.......
    a5fc:	000019bc 000019bc 000019bc 000019bc     ................
    a60c:	000019bc 000019bc 000018d6 0000196a     ............j...
    a61c:	000019bc 000019bc 0000198a 000019bc     ................
    a62c:	000019bc 000019bc 000019bc 000019bc     ................
    a63c:	000019bc 00001912 000019bc 000019bc     ................
    a64c:	000019ac 000019bc 000019b4 000019bc     ................
    a65c:	000019bc 000019bc 000019bc 000019a2     ................
    a66c:	000019bc 000019bc 000019bc 000019bc     ................
    a67c:	000019bc 000019bc 000019bc 000019bc     ................
    a68c:	000019bc 000019bc 000019bc 000019bc     ................
    a69c:	000019bc 000019bc 000019bc 000019bc     ................
    a6ac:	000019bc 000019bc 000019bc 000019bc     ................
    a6bc:	000019bc 000019bc 000019bc 000019bc     ................
    a6cc:	000019bc 000019bc 000019bc 000019bc     ................
    a6dc:	000019bc 000019bc 000019bc 000019bc     ................
    a6ec:	000019bc 000019bc 000019bc 000019bc     ................
    a6fc:	000019bc 000019bc 000019bc 000019bc     ................
    a70c:	000019bc 000019bc 000018de 31333231     ............1231
    a71c:	32313332 33323133 00000000 00002c46     23123123....F,..
    a72c:	00002c42 00002c42 00002cb0 00002cb0     B,..B,...,...,..
    a73c:	00002c5a 00002c4c 00002c60 00002c9e     Z,..L,..`,...,..
    a74c:	00002f14 00002ef4 00002ef4 00002f80     ./.........../..
    a75c:	00002f06 00002f22 00002ef8 00002f30     ./.."/......0/..
    a76c:	00002f70                                p/..

0000a770 <LfnOfs>:
    a770:	07050301 12100e09 1c181614 0000001e     ................

0000a780 <excvt.4558>:
    a780:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    a790:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    a7a0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    a7b0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    a7c0:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    a7d0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    a7e0:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    a7f0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    a800:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    a810:	00005d5b                                []..

0000a814 <Tbl>:
    a814:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    a824:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    a834:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    a844:	00d600ff 00f800dc 00d800a3 019200d7     ................
    a854:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    a864:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    a874:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    a884:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    a894:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    a8a4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    a8b4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    a8c4:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    a8d4:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    a8e4:	00da00de 00d900db 00dd00fd 00b400af     ................
    a8f4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    a904:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000a914 <tbl_lower.4308>:
    a914:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    a924:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    a934:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    a944:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    a954:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    a964:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    a974:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    a984:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    a994:	01050103 01090107 010d010b 0111010f     ................
    a9a4:	01150113 01190117 011d011b 0121011f     ..............!.
    a9b4:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    a9c4:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    a9d4:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    a9e4:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    a9f4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    aa04:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    aa14:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    aa24:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    aa34:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    aa44:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    aa54:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    aa64:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    aa74:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    aa84:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    aa94:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    aaa4:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    aab4:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    aac4:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    aad4:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    aae4:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000aaf4 <tbl_upper.4309>:
    aaf4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    ab04:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    ab14:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    ab24:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    ab34:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    ab44:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    ab54:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    ab64:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    ab74:	01040102 01080106 010c010a 0110010e     ................
    ab84:	01140112 01180116 011c011a 0120011e     .............. .
    ab94:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    aba4:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    abb4:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    abc4:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    abd4:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    abe4:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    abf4:	03940393 03960395 03980397 039a0399     ................
    ac04:	039c039b 039e039d 03a0039f 03a303a1     ................
    ac14:	03a503a4 03a703a6 03a903a8 041003aa     ................
    ac24:	04120411 04140413 04160415 04180417     ................
    ac34:	041a0419 041c041b 041e041d 0420041f     .............. .
    ac44:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    ac54:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    ac64:	04030402 04050404 04070406 04090408     ................
    ac74:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    ac84:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    ac94:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    aca4:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    acb4:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    acc4:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    acd4:	6f727245 68772072 20656c69 6e65706f     Error while open
    ace4:	20676e69 656c6966 2523203a 000d0a64     ing file: #%d...
    acf4:	6f727245 68772072 20656c69 74697277     Error while writ
    ad04:	20676e69 20564157 64616568 203a7265     ing WAV header: 
    ad14:	0a642523 0000000d 32303831 315f3231     #%d.....180212_1
    ad24:	32393034 61772e35 00000076 4f525245     40925.wav...ERRO
    ad34:	6c632052 6e69736f 65722067 64726f63     R closing record
    ad44:	66206465 0a656c69 0000000d 64726143     ed file.....Card
    ad54:	736e6920 6c6c6174 69616620 0d0a216c      install fail!..
    ad64:	00000000 61656c50 75206573 756c706e     ....Please unplu
    ad74:	6e612067 65722064 756c702d 68742067     g and re-plug th
    ad84:	61632065 0a2e6472 0000000d 000069e0     e card.......i..
    ad94:	000069ee 00006a88 00006b28 00006b8c     .i...j..(k...k..

0000ada4 <_usb_device_irq_bits>:
    ada4:	00080004 00800070 01000001 00000200     ....p...........

0000adb4 <_usb_endpoint_irq_bits>:
    adb4:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    adc4:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    add4:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    ade4:	00002249                                I"..

0000ade8 <_global_impure_ptr>:
    ade8:	2000012c                                ,.. 

0000adec <__sf_fake_stderr>:
	...

0000ae0c <__sf_fake_stdin>:
	...

0000ae2c <__sf_fake_stdout>:
	...
    ae4c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ae5c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ae6c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    ae7c:	00006665                                ef..

0000ae80 <_init>:
    ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae82:	46c0      	nop			; (mov r8, r8)
    ae84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ae86:	bc08      	pop	{r3}
    ae88:	469e      	mov	lr, r3
    ae8a:	4770      	bx	lr

0000ae8c <__init_array_start>:
    ae8c:	000000dd 	.word	0x000000dd

0000ae90 <_fini>:
    ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae92:	46c0      	nop			; (mov r8, r8)
    ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ae96:	bc08      	pop	{r3}
    ae98:	469e      	mov	lr, r3
    ae9a:	4770      	bx	lr

0000ae9c <__fini_array_start>:
    ae9c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	13e9 0000 1a5d 0000 1a85 0000 13a9 0000     ....]...........
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12606>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <wave_header>:
200000ac:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
200000bc:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
200000cc:	0004 0010 6164 6174 0000 0000               ....data....

200000d8 <udc_config>:
200000d8:	010c 2000 00e4 2000 0000 0000               ... ... ....

200000e4 <udc_config_lsfs>:
200000e4:	00ec 2000 0120 2000                         ...  .. 

200000ec <udc_desc_fs>:
200000ec:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000fc:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

2000010c <udc_device_desc>:
2000010c:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000011c:	0103 0000                                   ....

20000120 <udi_apis>:
20000120:	0030 2000                                   0.. 

20000124 <ss_pins>:
20000124:	0105                                             .

20000125 <g_interrupt_enabled>:
20000125:	0001 2c00                                        ...

20000128 <_impure_ptr>:
20000128:	012c 2000                                   ,.. 

2000012c <impure_data>:
2000012c:	0000 0000 ae0c 0000 ae2c 0000 adec 0000     ........,.......
	...
