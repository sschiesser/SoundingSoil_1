
SoundingSoil_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ab50  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000ab50  0000ab50  0001ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000018c  20000000  0000ab58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000c50  2000018c  0000ace4  0002018c  2**2
                  ALLOC
  4 .stack        00002004  20000ddc  0000b934  0002018c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00066b3a  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00008848  00000000  00000000  00086d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016889  00000000  00000000  0008f58f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010a8  00000000  00000000  000a5e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001948  00000000  00000000  000a6ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000263a2  00000000  00000000  000a8808  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f0cf  00000000  00000000  000cebaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009fc64  00000000  00000000  000edc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003484  00000000  00000000  0018d8e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 2d 00 20 65 8a 00 00 61 8a 00 00 61 8a 00 00     .-. e...a...a...
	...
      2c:	61 8a 00 00 00 00 00 00 00 00 00 00 61 8a 00 00     a...........a...
      3c:	61 8a 00 00 61 8a 00 00 61 8a 00 00 61 8a 00 00     a...a...a...a...
      4c:	61 8a 00 00 1d 71 00 00 61 8a 00 00 61 8a 00 00     a....q..a...a...
      5c:	d9 68 00 00 61 8a 00 00 79 23 00 00 89 23 00 00     .h..a...y#...#..
      6c:	99 23 00 00 a9 23 00 00 b9 23 00 00 c9 23 00 00     .#...#...#...#..
      7c:	45 07 00 00 55 07 00 00 65 07 00 00 61 8a 00 00     E...U...e...a...
      8c:	61 8a 00 00 61 8a 00 00 61 8a 00 00 61 8a 00 00     a...a...a...a...
      9c:	61 8a 00 00 61 8a 00 00 61 8a 00 00 61 8a 00 00     a...a...a...a...
      ac:	61 8a 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000018c 	.word	0x2000018c
      d4:	00000000 	.word	0x00000000
      d8:	0000ab58 	.word	0x0000ab58

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000190 	.word	0x20000190
     108:	0000ab58 	.word	0x0000ab58
     10c:	0000ab58 	.word	0x0000ab58
     110:	00000000 	.word	0x00000000

00000114 <_tcc_get_inst_index>:
	uint32_t ch;
	for(ch = 0; ch < TCC_NUM_CHANNELS; ch ++) {
		if (events->generate_event_on_channel[ch]) {
			evctrl |= (TCC_EVCTRL_MCEO(1) << ch);
		}
		if (events->on_event_perform_channel_action[ch]) {
     114:	4b09      	ldr	r3, [pc, #36]	; (13c <_tcc_get_inst_index+0x28>)
     116:	4298      	cmp	r0, r3
			evctrl |= (TCC_EVCTRL_MCEI(1) << ch);
     118:	d00c      	beq.n	134 <_tcc_get_inst_index+0x20>
     11a:	4b09      	ldr	r3, [pc, #36]	; (140 <_tcc_get_inst_index+0x2c>)
     11c:	4298      	cmp	r0, r3
     11e:	d007      	beq.n	130 <_tcc_get_inst_index+0x1c>
		}
	}
	if (events->generate_event_on_counter_overflow) {
     120:	4a08      	ldr	r2, [pc, #32]	; (144 <_tcc_get_inst_index+0x30>)
     122:	2300      	movs	r3, #0
     124:	4290      	cmp	r0, r2
		evctrl |= TCC_EVCTRL_OVFEO;
     126:	d001      	beq.n	12c <_tcc_get_inst_index+0x18>
     128:	0018      	movs	r0, r3
     12a:	4770      	bx	lr
	}
	if (events->generate_event_on_counter_retrigger) {
     12c:	3302      	adds	r3, #2
     12e:	e002      	b.n	136 <_tcc_get_inst_index+0x22>
     130:	2301      	movs	r3, #1
		evctrl |= TCC_EVCTRL_TRGEO;
     132:	e000      	b.n	136 <_tcc_get_inst_index+0x22>
     134:	2300      	movs	r3, #0
     136:	b2db      	uxtb	r3, r3
	}
	if (events->generate_event_on_counter_event) {
     138:	e7f6      	b.n	128 <_tcc_get_inst_index+0x14>
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	42002000 	.word	0x42002000
		evctrl |= TCC_EVCTRL_CNTEO;
     140:	42002400 	.word	0x42002400
	}

	tcc_module->EVCTRL.reg = evctrl;
     144:	42002800 	.word	0x42002800

00000148 <tcc_get_config_defaults>:

	return STATUS_OK;
     148:	b510      	push	{r4, lr}
			return STATUS_ERR_INVALID_ARG;
     14a:	0004      	movs	r4, r0
     14c:	0008      	movs	r0, r1
			return STATUS_ERR_INVALID_ARG;
     14e:	4b4f      	ldr	r3, [pc, #316]	; (28c <tcc_get_config_defaults+0x144>)
     150:	4798      	blx	r3
     152:	2300      	movs	r3, #0
     154:	6023      	str	r3, [r4, #0]
     156:	0080      	lsls	r0, r0, #2
     158:	4a4d      	ldr	r2, [pc, #308]	; (290 <tcc_get_config_defaults+0x148>)
     15a:	5882      	ldr	r2, [r0, r2]
     15c:	6062      	str	r2, [r4, #4]
     15e:	72a3      	strb	r3, [r4, #10]
     160:	72e3      	strb	r3, [r4, #11]
     162:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     164:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     166:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     168:	61e3      	str	r3, [r4, #28]
     16a:	6223      	str	r3, [r4, #32]
     16c:	6263      	str	r3, [r4, #36]	; 0x24
     16e:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     170:	7523      	strb	r3, [r4, #20]
     172:	7563      	strb	r3, [r4, #21]
     174:	75a3      	strb	r3, [r4, #22]
     176:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     178:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     17a:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     17c:	7423      	strb	r3, [r4, #16]
     17e:	7463      	strb	r3, [r4, #17]
     180:	74a3      	strb	r3, [r4, #18]
     182:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     184:	222c      	movs	r2, #44	; 0x2c
     186:	54a3      	strb	r3, [r4, r2]
     188:	3201      	adds	r2, #1
     18a:	54a3      	strb	r3, [r4, r2]
     18c:	3201      	adds	r2, #1
     18e:	54a3      	strb	r3, [r4, r2]
     190:	3201      	adds	r2, #1
     192:	54a3      	strb	r3, [r4, r2]
     194:	3201      	adds	r2, #1
     196:	54a3      	strb	r3, [r4, r2]
     198:	3201      	adds	r2, #1
     19a:	54a3      	strb	r3, [r4, r2]
     19c:	3201      	adds	r2, #1
     19e:	54a3      	strb	r3, [r4, r2]
     1a0:	3201      	adds	r2, #1
     1a2:	54a3      	strb	r3, [r4, r2]
     1a4:	3201      	adds	r2, #1
     1a6:	54a3      	strb	r3, [r4, r2]
     1a8:	3201      	adds	r2, #1
     1aa:	54a3      	strb	r3, [r4, r2]
     1ac:	3201      	adds	r2, #1
     1ae:	54a3      	strb	r3, [r4, r2]
     1b0:	3201      	adds	r2, #1
     1b2:	54a3      	strb	r3, [r4, r2]
     1b4:	3201      	adds	r2, #1
     1b6:	54a3      	strb	r3, [r4, r2]
     1b8:	3201      	adds	r2, #1
     1ba:	54a3      	strb	r3, [r4, r2]
     1bc:	3201      	adds	r2, #1
     1be:	54a3      	strb	r3, [r4, r2]
     1c0:	3201      	adds	r2, #1
     1c2:	54a3      	strb	r3, [r4, r2]
     1c4:	3201      	adds	r2, #1
     1c6:	54a3      	strb	r3, [r4, r2]
     1c8:	3201      	adds	r2, #1
     1ca:	54a3      	strb	r3, [r4, r2]
     1cc:	3201      	adds	r2, #1
     1ce:	54a3      	strb	r3, [r4, r2]
     1d0:	3201      	adds	r2, #1
     1d2:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     1d4:	3201      	adds	r2, #1
     1d6:	54a3      	strb	r3, [r4, r2]
     1d8:	3201      	adds	r2, #1
     1da:	54a3      	strb	r3, [r4, r2]
     1dc:	3201      	adds	r2, #1
     1de:	54a3      	strb	r3, [r4, r2]
     1e0:	3201      	adds	r2, #1
     1e2:	54a3      	strb	r3, [r4, r2]
     1e4:	3201      	adds	r2, #1
     1e6:	54a3      	strb	r3, [r4, r2]
     1e8:	3201      	adds	r2, #1
     1ea:	54a3      	strb	r3, [r4, r2]
     1ec:	3201      	adds	r2, #1
     1ee:	54a3      	strb	r3, [r4, r2]
     1f0:	3201      	adds	r2, #1
     1f2:	54a3      	strb	r3, [r4, r2]
     1f4:	3201      	adds	r2, #1
     1f6:	54a3      	strb	r3, [r4, r2]
     1f8:	3201      	adds	r2, #1
     1fa:	54a3      	strb	r3, [r4, r2]
     1fc:	3201      	adds	r2, #1
     1fe:	54a3      	strb	r3, [r4, r2]
     200:	3201      	adds	r2, #1
     202:	54a3      	strb	r3, [r4, r2]
     204:	3201      	adds	r2, #1
     206:	54a3      	strb	r3, [r4, r2]
     208:	3201      	adds	r2, #1
     20a:	54a3      	strb	r3, [r4, r2]
     20c:	3201      	adds	r2, #1
     20e:	54a3      	strb	r3, [r4, r2]
     210:	3201      	adds	r2, #1
     212:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     214:	3201      	adds	r2, #1
     216:	54a3      	strb	r3, [r4, r2]
     218:	3201      	adds	r2, #1
     21a:	54a3      	strb	r3, [r4, r2]
     21c:	3201      	adds	r2, #1
     21e:	54a3      	strb	r3, [r4, r2]
     220:	3201      	adds	r2, #1
     222:	54a3      	strb	r3, [r4, r2]
     224:	3201      	adds	r2, #1
     226:	54a3      	strb	r3, [r4, r2]
     228:	3201      	adds	r2, #1
     22a:	54a3      	strb	r3, [r4, r2]
     22c:	3201      	adds	r2, #1
     22e:	54a3      	strb	r3, [r4, r2]
     230:	3201      	adds	r2, #1
     232:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     234:	3241      	adds	r2, #65	; 0x41
     236:	54a3      	strb	r3, [r4, r2]
     238:	65a3      	str	r3, [r4, #88]	; 0x58
     23a:	67a3      	str	r3, [r4, #120]	; 0x78
     23c:	3201      	adds	r2, #1
     23e:	54a3      	strb	r3, [r4, r2]
     240:	65e3      	str	r3, [r4, #92]	; 0x5c
     242:	67e3      	str	r3, [r4, #124]	; 0x7c
     244:	3201      	adds	r2, #1
     246:	54a3      	strb	r3, [r4, r2]
     248:	6623      	str	r3, [r4, #96]	; 0x60
     24a:	3a1a      	subs	r2, #26
     24c:	50a3      	str	r3, [r4, r2]
     24e:	321b      	adds	r2, #27
     250:	54a3      	strb	r3, [r4, r2]
     252:	6663      	str	r3, [r4, #100]	; 0x64
     254:	3a17      	subs	r2, #23
     256:	50a3      	str	r3, [r4, r2]
     258:	3218      	adds	r2, #24
     25a:	54a3      	strb	r3, [r4, r2]
     25c:	66a3      	str	r3, [r4, #104]	; 0x68
     25e:	3a14      	subs	r2, #20
     260:	50a3      	str	r3, [r4, r2]
     262:	3215      	adds	r2, #21
     264:	54a3      	strb	r3, [r4, r2]
     266:	66e3      	str	r3, [r4, #108]	; 0x6c
     268:	3a11      	subs	r2, #17
     26a:	50a3      	str	r3, [r4, r2]
     26c:	3212      	adds	r2, #18
     26e:	54a3      	strb	r3, [r4, r2]
     270:	6723      	str	r3, [r4, #112]	; 0x70
     272:	3a0e      	subs	r2, #14
     274:	50a3      	str	r3, [r4, r2]
     276:	320f      	adds	r2, #15
     278:	54a3      	strb	r3, [r4, r2]
     27a:	6763      	str	r3, [r4, #116]	; 0x74
     27c:	3a0b      	subs	r2, #11
     27e:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
     280:	2101      	movs	r1, #1
     282:	320c      	adds	r2, #12
     284:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     286:	3201      	adds	r2, #1
     288:	54a3      	strb	r3, [r4, r2]
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000115 	.word	0x00000115
     290:	0000a17c 	.word	0x0000a17c

00000294 <tcc_init>:
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
     2a0:	b091      	sub	sp, #68	; 0x44
     2a2:	9001      	str	r0, [sp, #4]
     2a4:	000c      	movs	r4, r1
     2a6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     2a8:	0008      	movs	r0, r1
     2aa:	4bc3      	ldr	r3, [pc, #780]	; (5b8 <tcc_init+0x324>)
     2ac:	4798      	blx	r3
     2ae:	0003      	movs	r3, r0
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     2b0:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2b2:	48c2      	ldr	r0, [pc, #776]	; (5bc <tcc_init+0x328>)
     2b4:	6a02      	ldr	r2, [r0, #32]
     2b6:	009e      	lsls	r6, r3, #2
     2b8:	4fc1      	ldr	r7, [pc, #772]	; (5c0 <tcc_init+0x32c>)
     2ba:	59f7      	ldr	r7, [r6, r7]
     2bc:	433a      	orrs	r2, r7
     2be:	6202      	str	r2, [r0, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     2c2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     2c4:	0792      	lsls	r2, r2, #30
     2c6:	d506      	bpl.n	2d6 <tcc_init+0x42>
}
     2c8:	b011      	add	sp, #68	; 0x44
     2ca:	bc3c      	pop	{r2, r3, r4, r5}
     2cc:	4690      	mov	r8, r2
     2ce:	4699      	mov	r9, r3
     2d0:	46a2      	mov	sl, r4
     2d2:	46ab      	mov	fp, r5
     2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     2d6:	6822      	ldr	r2, [r4, #0]
     2d8:	2701      	movs	r7, #1
     2da:	4017      	ands	r7, r2
     2dc:	d1f4      	bne.n	2c8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
     2de:	48b9      	ldr	r0, [pc, #740]	; (5c4 <tcc_init+0x330>)
     2e0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
     2e2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
     2e4:	682e      	ldr	r6, [r5, #0]
     2e6:	42b2      	cmp	r2, r6
     2e8:	d3ee      	bcc.n	2c8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
     2ea:	686e      	ldr	r6, [r5, #4]
     2ec:	42b2      	cmp	r2, r6
     2ee:	d3eb      	bcc.n	2c8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
     2f0:	69e8      	ldr	r0, [r5, #28]
     2f2:	4282      	cmp	r2, r0
     2f4:	d200      	bcs.n	2f8 <tcc_init+0x64>
     2f6:	e1b9      	b.n	66c <tcc_init+0x3d8>
     2f8:	6a28      	ldr	r0, [r5, #32]
     2fa:	4282      	cmp	r2, r0
     2fc:	d200      	bcs.n	300 <tcc_init+0x6c>
     2fe:	e1b7      	b.n	670 <tcc_init+0x3dc>
     300:	6a68      	ldr	r0, [r5, #36]	; 0x24
     302:	4282      	cmp	r2, r0
     304:	d200      	bcs.n	308 <tcc_init+0x74>
     306:	e1b5      	b.n	674 <tcc_init+0x3e0>
     308:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     30a:	4282      	cmp	r2, r0
     30c:	d200      	bcs.n	310 <tcc_init+0x7c>
     30e:	e1b3      	b.n	678 <tcc_init+0x3e4>
     310:	2298      	movs	r2, #152	; 0x98
     312:	4694      	mov	ip, r2
     314:	44ac      	add	ip, r5
     316:	4662      	mov	r2, ip
     318:	9208      	str	r2, [sp, #32]
     31a:	2000      	movs	r0, #0
     31c:	e003      	b.n	326 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     31e:	3001      	adds	r0, #1
     320:	3201      	adds	r2, #1
     322:	2808      	cmp	r0, #8
     324:	d008      	beq.n	338 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
     326:	7816      	ldrb	r6, [r2, #0]
     328:	2e00      	cmp	r6, #0
     32a:	d0f8      	beq.n	31e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
     32c:	4ea6      	ldr	r6, [pc, #664]	; (5c8 <tcc_init+0x334>)
     32e:	5c76      	ldrb	r6, [r6, r1]
     330:	4286      	cmp	r6, r0
     332:	dcf4      	bgt.n	31e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
     334:	2017      	movs	r0, #23
     336:	e7c7      	b.n	2c8 <tcc_init+0x34>
     338:	2200      	movs	r2, #0
     33a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	4684      	mov	ip, r0
     342:	e002      	b.n	34a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     344:	3201      	adds	r2, #1
     346:	2a04      	cmp	r2, #4
     348:	d00e      	beq.n	368 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
     34a:	18a8      	adds	r0, r5, r2
     34c:	7c00      	ldrb	r0, [r0, #16]
     34e:	2801      	cmp	r0, #1
     350:	d1f8      	bne.n	344 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
     352:	489e      	ldr	r0, [pc, #632]	; (5cc <tcc_init+0x338>)
     354:	5c40      	ldrb	r0, [r0, r1]
     356:	4290      	cmp	r0, r2
     358:	da00      	bge.n	35c <tcc_init+0xc8>
     35a:	e18f      	b.n	67c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     35c:	4660      	mov	r0, ip
     35e:	4090      	lsls	r0, r2
     360:	9e02      	ldr	r6, [sp, #8]
     362:	4306      	orrs	r6, r0
     364:	9602      	str	r6, [sp, #8]
     366:	e7ed      	b.n	344 <tcc_init+0xb0>
	if (config->run_in_standby) {
     368:	329d      	adds	r2, #157	; 0x9d
     36a:	5caa      	ldrb	r2, [r5, r2]
     36c:	2a00      	cmp	r2, #0
     36e:	d004      	beq.n	37a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     370:	2280      	movs	r2, #128	; 0x80
     372:	0112      	lsls	r2, r2, #4
     374:	9902      	ldr	r1, [sp, #8]
     376:	4311      	orrs	r1, r2
     378:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
     37a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     37c:	1e51      	subs	r1, r2, #1
     37e:	418a      	sbcs	r2, r1
     380:	0092      	lsls	r2, r2, #2
     382:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     384:	7a6a      	ldrb	r2, [r5, #9]
     386:	2a01      	cmp	r2, #1
     388:	d022      	beq.n	3d0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
     38a:	4a90      	ldr	r2, [pc, #576]	; (5cc <tcc_init+0x338>)
     38c:	5cd2      	ldrb	r2, [r2, r3]
     38e:	0011      	movs	r1, r2
     390:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
     392:	2235      	movs	r2, #53	; 0x35
     394:	5caa      	ldrb	r2, [r5, r2]
     396:	428a      	cmp	r2, r1
     398:	d300      	bcc.n	39c <tcc_init+0x108>
     39a:	e179      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     39c:	212c      	movs	r1, #44	; 0x2c
     39e:	5c69      	ldrb	r1, [r5, r1]
     3a0:	290f      	cmp	r1, #15
     3a2:	d900      	bls.n	3a6 <tcc_init+0x112>
     3a4:	e174      	b.n	690 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     3a6:	7b28      	ldrb	r0, [r5, #12]
     3a8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     3aa:	7ae8      	ldrb	r0, [r5, #11]
     3ac:	900b      	str	r0, [sp, #44]	; 0x2c
     3ae:	202d      	movs	r0, #45	; 0x2d
     3b0:	4682      	mov	sl, r0
     3b2:	44aa      	add	sl, r5
     3b4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     3b6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
     3b8:	ae0e      	add	r6, sp, #56	; 0x38
     3ba:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3bc:	26c0      	movs	r6, #192	; 0xc0
     3be:	0136      	lsls	r6, r6, #4
     3c0:	46b1      	mov	r9, r6
     3c2:	4684      	mov	ip, r0
     3c4:	46a0      	mov	r8, r4
     3c6:	0028      	movs	r0, r5
     3c8:	4655      	mov	r5, sl
     3ca:	9309      	str	r3, [sp, #36]	; 0x24
     3cc:	4682      	mov	sl, r0
     3ce:	e035      	b.n	43c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
     3d0:	9906      	ldr	r1, [sp, #24]
     3d2:	4311      	orrs	r1, r2
     3d4:	9106      	str	r1, [sp, #24]
     3d6:	e7d8      	b.n	38a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     3d8:	0292      	lsls	r2, r2, #10
     3da:	464f      	mov	r7, r9
     3dc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3de:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
     3e0:	7919      	ldrb	r1, [r3, #4]
     3e2:	468b      	mov	fp, r1
     3e4:	2103      	movs	r1, #3
     3e6:	465f      	mov	r7, fp
     3e8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3ea:	430a      	orrs	r2, r1
     3ec:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
     3ee:	795a      	ldrb	r2, [r3, #5]
     3f0:	0152      	lsls	r2, r2, #5
     3f2:	2160      	movs	r1, #96	; 0x60
     3f4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     3f6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
     3f8:	7999      	ldrb	r1, [r3, #6]
     3fa:	0209      	lsls	r1, r1, #8
     3fc:	26c0      	movs	r6, #192	; 0xc0
     3fe:	00b6      	lsls	r6, r6, #2
     400:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     402:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     404:	79da      	ldrb	r2, [r3, #7]
     406:	0312      	lsls	r2, r2, #12
     408:	21e0      	movs	r1, #224	; 0xe0
     40a:	01c9      	lsls	r1, r1, #7
     40c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     40e:	4316      	orrs	r6, r2
     410:	4334      	orrs	r4, r6
     412:	9a03      	ldr	r2, [sp, #12]
     414:	4314      	orrs	r4, r2
     416:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
     418:	4662      	mov	r2, ip
     41a:	9907      	ldr	r1, [sp, #28]
     41c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     41e:	2a04      	cmp	r2, #4
     420:	d02a      	beq.n	478 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
     422:	7c9a      	ldrb	r2, [r3, #18]
     424:	9905      	ldr	r1, [sp, #20]
     426:	4291      	cmp	r1, r2
     428:	d800      	bhi.n	42c <tcc_init+0x198>
     42a:	e131      	b.n	690 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
     42c:	7a59      	ldrb	r1, [r3, #9]
     42e:	350a      	adds	r5, #10
     430:	2304      	movs	r3, #4
     432:	469b      	mov	fp, r3
     434:	44dc      	add	ip, fp
     436:	290f      	cmp	r1, #15
     438:	d900      	bls.n	43c <tcc_init+0x1a8>
     43a:	e129      	b.n	690 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     43c:	0609      	lsls	r1, r1, #24
     43e:	23f0      	movs	r3, #240	; 0xf0
     440:	051b      	lsls	r3, r3, #20
     442:	4019      	ands	r1, r3
     444:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     446:	782e      	ldrb	r6, [r5, #0]
     448:	0436      	lsls	r6, r6, #16
     44a:	20ff      	movs	r0, #255	; 0xff
     44c:	0400      	lsls	r0, r0, #16
     44e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     450:	7868      	ldrb	r0, [r5, #1]
     452:	2480      	movs	r4, #128	; 0x80
     454:	2800      	cmp	r0, #0
     456:	d100      	bne.n	45a <tcc_init+0x1c6>
     458:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     45a:	7898      	ldrb	r0, [r3, #2]
     45c:	2708      	movs	r7, #8
     45e:	9703      	str	r7, [sp, #12]
     460:	2800      	cmp	r0, #0
     462:	d101      	bne.n	468 <tcc_init+0x1d4>
     464:	9804      	ldr	r0, [sp, #16]
     466:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     468:	78d8      	ldrb	r0, [r3, #3]
     46a:	4683      	mov	fp, r0
     46c:	2010      	movs	r0, #16
     46e:	465f      	mov	r7, fp
     470:	2f00      	cmp	r7, #0
     472:	d1b1      	bne.n	3d8 <tcc_init+0x144>
     474:	9804      	ldr	r0, [sp, #16]
     476:	e7af      	b.n	3d8 <tcc_init+0x144>
     478:	4644      	mov	r4, r8
     47a:	4655      	mov	r5, sl
     47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
     47e:	4a52      	ldr	r2, [pc, #328]	; (5c8 <tcc_init+0x334>)
     480:	5cd2      	ldrb	r2, [r2, r3]
     482:	4691      	mov	r9, r2
     484:	4651      	mov	r1, sl
     486:	3150      	adds	r1, #80	; 0x50
     488:	4650      	mov	r0, sl
     48a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
     48c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     48e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     490:	2601      	movs	r6, #1
     492:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     494:	2602      	movs	r6, #2
     496:	36ff      	adds	r6, #255	; 0xff
     498:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     49a:	2680      	movs	r6, #128	; 0x80
     49c:	0276      	lsls	r6, r6, #9
     49e:	46b0      	mov	r8, r6
     4a0:	46a4      	mov	ip, r4
     4a2:	001c      	movs	r4, r3
     4a4:	464b      	mov	r3, r9
     4a6:	e00f      	b.n	4c8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4a8:	7806      	ldrb	r6, [r0, #0]
     4aa:	2e00      	cmp	r6, #0
     4ac:	d007      	beq.n	4be <tcc_init+0x22a>
			if (i >= ow_num) {
     4ae:	4293      	cmp	r3, r2
     4b0:	d800      	bhi.n	4b4 <tcc_init+0x220>
     4b2:	e0e7      	b.n	684 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     4b4:	2e02      	cmp	r6, #2
     4b6:	d014      	beq.n	4e2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     4b8:	4656      	mov	r6, sl
     4ba:	4096      	lsls	r6, r2
     4bc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4be:	3201      	adds	r2, #1
     4c0:	3101      	adds	r1, #1
     4c2:	3002      	adds	r0, #2
     4c4:	2a08      	cmp	r2, #8
     4c6:	d010      	beq.n	4ea <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
     4c8:	780e      	ldrb	r6, [r1, #0]
     4ca:	2e00      	cmp	r6, #0
     4cc:	d0ec      	beq.n	4a8 <tcc_init+0x214>
			if (i >= ow_num) {
     4ce:	4293      	cmp	r3, r2
     4d0:	d800      	bhi.n	4d4 <tcc_init+0x240>
     4d2:	e0d5      	b.n	680 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     4d4:	4646      	mov	r6, r8
     4d6:	4096      	lsls	r6, r2
     4d8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
     4da:	7806      	ldrb	r6, [r0, #0]
     4dc:	2e00      	cmp	r6, #0
     4de:	d1e9      	bne.n	4b4 <tcc_init+0x220>
     4e0:	e7ed      	b.n	4be <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     4e2:	465e      	mov	r6, fp
     4e4:	4096      	lsls	r6, r2
     4e6:	4337      	orrs	r7, r6
     4e8:	e7e9      	b.n	4be <tcc_init+0x22a>
     4ea:	4699      	mov	r9, r3
     4ec:	0023      	movs	r3, r4
     4ee:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4f0:	7e6a      	ldrb	r2, [r5, #25]
     4f2:	0112      	lsls	r2, r2, #4
     4f4:	2130      	movs	r1, #48	; 0x30
     4f6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     4f8:	7e28      	ldrb	r0, [r5, #24]
     4fa:	2207      	movs	r2, #7
     4fc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     4fe:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     500:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     502:	2080      	movs	r0, #128	; 0x80
     504:	0240      	lsls	r0, r0, #9
     506:	000e      	movs	r6, r1
     508:	e002      	b.n	510 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     50a:	3201      	adds	r2, #1
     50c:	2a04      	cmp	r2, #4
     50e:	d00b      	beq.n	528 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
     510:	18a9      	adds	r1, r5, r2
     512:	7d09      	ldrb	r1, [r1, #20]
     514:	2900      	cmp	r1, #0
     516:	d0f8      	beq.n	50a <tcc_init+0x276>
			if (n >= cc_num) {
     518:	9905      	ldr	r1, [sp, #20]
     51a:	4291      	cmp	r1, r2
     51c:	dc00      	bgt.n	520 <tcc_init+0x28c>
     51e:	e0b3      	b.n	688 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
     520:	0001      	movs	r1, r0
     522:	4091      	lsls	r1, r2
     524:	430e      	orrs	r6, r1
     526:	e7f0      	b.n	50a <tcc_init+0x276>
     528:	46b2      	mov	sl, r6
     52a:	9801      	ldr	r0, [sp, #4]
     52c:	0002      	movs	r2, r0
     52e:	3204      	adds	r2, #4
     530:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     532:	2100      	movs	r1, #0
     534:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     536:	4282      	cmp	r2, r0
     538:	d1fc      	bne.n	534 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
     53a:	2200      	movs	r2, #0
     53c:	9801      	ldr	r0, [sp, #4]
     53e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     540:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     542:	0099      	lsls	r1, r3, #2
     544:	4a22      	ldr	r2, [pc, #136]	; (5d0 <tcc_init+0x33c>)
     546:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
     548:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     54a:	22a0      	movs	r2, #160	; 0xa0
     54c:	5ca9      	ldrb	r1, [r5, r2]
     54e:	3a64      	subs	r2, #100	; 0x64
     550:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
     552:	a90d      	add	r1, sp, #52	; 0x34
     554:	7aaa      	ldrb	r2, [r5, #10]
     556:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     558:	4a1e      	ldr	r2, [pc, #120]	; (5d4 <tcc_init+0x340>)
     55a:	5cd6      	ldrb	r6, [r2, r3]
     55c:	0030      	movs	r0, r6
     55e:	4b1e      	ldr	r3, [pc, #120]	; (5d8 <tcc_init+0x344>)
     560:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     562:	0030      	movs	r0, r6
     564:	4b1d      	ldr	r3, [pc, #116]	; (5dc <tcc_init+0x348>)
     566:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     568:	464b      	mov	r3, r9
     56a:	2b00      	cmp	r3, #0
     56c:	dd3c      	ble.n	5e8 <tcc_init+0x354>
     56e:	002e      	movs	r6, r5
     570:	3658      	adds	r6, #88	; 0x58
     572:	3398      	adds	r3, #152	; 0x98
     574:	4698      	mov	r8, r3
     576:	44a8      	add	r8, r5
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     578:	2301      	movs	r3, #1
     57a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
     57c:	46ab      	mov	fp, r5
     57e:	4645      	mov	r5, r8
     580:	46a0      	mov	r8, r4
     582:	9c08      	ldr	r4, [sp, #32]
     584:	e003      	b.n	58e <tcc_init+0x2fa>
     586:	3401      	adds	r4, #1
     588:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     58a:	42ac      	cmp	r4, r5
     58c:	d02a      	beq.n	5e4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
     58e:	7823      	ldrb	r3, [r4, #0]
     590:	2b00      	cmp	r3, #0
     592:	d0f8      	beq.n	586 <tcc_init+0x2f2>
     594:	ab0c      	add	r3, sp, #48	; 0x30
     596:	464a      	mov	r2, r9
     598:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     59a:	2300      	movs	r3, #0
     59c:	aa0c      	add	r2, sp, #48	; 0x30
     59e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     5a0:	0013      	movs	r3, r2
     5a2:	2220      	movs	r2, #32
     5a4:	18b2      	adds	r2, r6, r2
     5a6:	7812      	ldrb	r2, [r2, #0]
     5a8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     5aa:	464a      	mov	r2, r9
     5ac:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     5ae:	7830      	ldrb	r0, [r6, #0]
     5b0:	0019      	movs	r1, r3
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <tcc_init+0x34c>)
     5b4:	4798      	blx	r3
     5b6:	e7e6      	b.n	586 <tcc_init+0x2f2>
     5b8:	00000115 	.word	0x00000115
     5bc:	40000400 	.word	0x40000400
     5c0:	0000a168 	.word	0x0000a168
     5c4:	0000a17c 	.word	0x0000a17c
     5c8:	0000a188 	.word	0x0000a188
     5cc:	0000a174 	.word	0x0000a174
     5d0:	20000338 	.word	0x20000338
     5d4:	0000a178 	.word	0x0000a178
     5d8:	00008909 	.word	0x00008909
     5dc:	0000887d 	.word	0x0000887d
     5e0:	00008a01 	.word	0x00008a01
     5e4:	4644      	mov	r4, r8
     5e6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5ea:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     5ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     5ee:	0212      	lsls	r2, r2, #8
     5f0:	4313      	orrs	r3, r2
     5f2:	9a02      	ldr	r2, [sp, #8]
     5f4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     5f6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     5f8:	2204      	movs	r2, #4
     5fa:	68a3      	ldr	r3, [r4, #8]
     5fc:	421a      	tst	r2, r3
     5fe:	d1fc      	bne.n	5fa <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
     600:	23ff      	movs	r3, #255	; 0xff
     602:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     604:	2204      	movs	r2, #4
     606:	68a3      	ldr	r3, [r4, #8]
     608:	421a      	tst	r2, r3
     60a:	d1fc      	bne.n	606 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
     60c:	466b      	mov	r3, sp
     60e:	7e1b      	ldrb	r3, [r3, #24]
     610:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     612:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     614:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     618:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     61a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     61c:	4a1d      	ldr	r2, [pc, #116]	; (694 <tcc_init+0x400>)
     61e:	68a3      	ldr	r3, [r4, #8]
     620:	4213      	tst	r3, r2
     622:	d1fc      	bne.n	61e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
     624:	4653      	mov	r3, sl
     626:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     628:	2210      	movs	r2, #16
     62a:	68a3      	ldr	r3, [r4, #8]
     62c:	421a      	tst	r2, r3
     62e:	d1fc      	bne.n	62a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
     630:	682b      	ldr	r3, [r5, #0]
     632:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     634:	4a18      	ldr	r2, [pc, #96]	; (698 <tcc_init+0x404>)
     636:	68a3      	ldr	r3, [r4, #8]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
     63c:	686b      	ldr	r3, [r5, #4]
     63e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     640:	9805      	ldr	r0, [sp, #20]
     642:	2800      	cmp	r0, #0
     644:	dd22      	ble.n	68c <tcc_init+0x3f8>
     646:	351c      	adds	r5, #28
     648:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     64a:	4e14      	ldr	r6, [pc, #80]	; (69c <tcc_init+0x408>)
     64c:	0032      	movs	r2, r6
     64e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     650:	68a3      	ldr	r3, [r4, #8]
     652:	421a      	tst	r2, r3
     654:	d1fc      	bne.n	650 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
     656:	cd04      	ldmia	r5!, {r2}
     658:	000b      	movs	r3, r1
     65a:	3310      	adds	r3, #16
     65c:	009b      	lsls	r3, r3, #2
     65e:	18e3      	adds	r3, r4, r3
     660:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     662:	3101      	adds	r1, #1
     664:	4288      	cmp	r0, r1
     666:	dcf1      	bgt.n	64c <tcc_init+0x3b8>
	return STATUS_OK;
     668:	2000      	movs	r0, #0
     66a:	e62d      	b.n	2c8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
     66c:	2017      	movs	r0, #23
     66e:	e62b      	b.n	2c8 <tcc_init+0x34>
     670:	2017      	movs	r0, #23
     672:	e629      	b.n	2c8 <tcc_init+0x34>
     674:	2017      	movs	r0, #23
     676:	e627      	b.n	2c8 <tcc_init+0x34>
     678:	2017      	movs	r0, #23
     67a:	e625      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e623      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     680:	2017      	movs	r0, #23
     682:	e621      	b.n	2c8 <tcc_init+0x34>
			if (i >= ow_num) {
     684:	2017      	movs	r0, #23
     686:	e61f      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     688:	2017      	movs	r0, #23
     68a:	e61d      	b.n	2c8 <tcc_init+0x34>
	return STATUS_OK;
     68c:	2000      	movs	r0, #0
     68e:	e61b      	b.n	2c8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
     690:	2017      	movs	r0, #23
     692:	e619      	b.n	2c8 <tcc_init+0x34>
     694:	00020040 	.word	0x00020040
     698:	00040080 	.word	0x00040080
     69c:	00080100 	.word	0x00080100

000006a0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     6a0:	0092      	lsls	r2, r2, #2
     6a2:	1883      	adds	r3, r0, r2
     6a4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
     6a6:	4b03      	ldr	r3, [pc, #12]	; (6b4 <tcc_register_callback+0x14>)
     6a8:	58d3      	ldr	r3, [r2, r3]
     6aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
     6ac:	4313      	orrs	r3, r2
     6ae:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
     6b0:	2000      	movs	r0, #0
     6b2:	4770      	bx	lr
     6b4:	0000a18c 	.word	0x0000a18c

000006b8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
     6b8:	b570      	push	{r4, r5, r6, lr}
     6ba:	0004      	movs	r4, r0
     6bc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
     6be:	6800      	ldr	r0, [r0, #0]
     6c0:	4b09      	ldr	r3, [pc, #36]	; (6e8 <tcc_enable_callback+0x30>)
     6c2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6c6:	5c1b      	ldrb	r3, [r3, r0]
     6c8:	221f      	movs	r2, #31
     6ca:	401a      	ands	r2, r3
     6cc:	2301      	movs	r3, #1
     6ce:	4093      	lsls	r3, r2
     6d0:	4a07      	ldr	r2, [pc, #28]	; (6f0 <tcc_enable_callback+0x38>)
     6d2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
     6d4:	00ad      	lsls	r5, r5, #2
     6d6:	4b07      	ldr	r3, [pc, #28]	; (6f4 <tcc_enable_callback+0x3c>)
     6d8:	58ea      	ldr	r2, [r5, r3]
     6da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6dc:	4313      	orrs	r3, r2
     6de:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
     6e0:	6823      	ldr	r3, [r4, #0]
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
}
     6e4:	bd70      	pop	{r4, r5, r6, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00000115 	.word	0x00000115
     6ec:	0000a1bc 	.word	0x0000a1bc
     6f0:	e000e100 	.word	0xe000e100
     6f4:	0000a18c 	.word	0x0000a18c

000006f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	46c6      	mov	lr, r8
     6fc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     6fe:	0080      	lsls	r0, r0, #2
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <_tcc_interrupt_handler+0x44>)
     702:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     704:	683b      	ldr	r3, [r7, #0]
     706:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     70a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     70c:	4013      	ands	r3, r2
     70e:	401e      	ands	r6, r3
     710:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     712:	4b0b      	ldr	r3, [pc, #44]	; (740 <_tcc_interrupt_handler+0x48>)
     714:	4698      	mov	r8, r3
     716:	e002      	b.n	71e <_tcc_interrupt_handler+0x26>
     718:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     71a:	2c30      	cmp	r4, #48	; 0x30
     71c:	d00a      	beq.n	734 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     71e:	4643      	mov	r3, r8
     720:	58e5      	ldr	r5, [r4, r3]
     722:	4235      	tst	r5, r6
     724:	d0f8      	beq.n	718 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     726:	193b      	adds	r3, r7, r4
     728:	685b      	ldr	r3, [r3, #4]
     72a:	0038      	movs	r0, r7
     72c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     72e:	683b      	ldr	r3, [r7, #0]
     730:	62dd      	str	r5, [r3, #44]	; 0x2c
     732:	e7f1      	b.n	718 <_tcc_interrupt_handler+0x20>
		}
	}
}
     734:	bc04      	pop	{r2}
     736:	4690      	mov	r8, r2
     738:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	20000338 	.word	0x20000338
     740:	0000a18c 	.word	0x0000a18c

00000744 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     744:	b510      	push	{r4, lr}
     746:	2000      	movs	r0, #0
     748:	4b01      	ldr	r3, [pc, #4]	; (750 <TCC0_Handler+0xc>)
     74a:	4798      	blx	r3
     74c:	bd10      	pop	{r4, pc}
     74e:	46c0      	nop			; (mov r8, r8)
     750:	000006f9 	.word	0x000006f9

00000754 <TCC1_Handler>:
     754:	b510      	push	{r4, lr}
     756:	2001      	movs	r0, #1
     758:	4b01      	ldr	r3, [pc, #4]	; (760 <TCC1_Handler+0xc>)
     75a:	4798      	blx	r3
     75c:	bd10      	pop	{r4, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	000006f9 	.word	0x000006f9

00000764 <TCC2_Handler>:
     764:	b510      	push	{r4, lr}
     766:	2002      	movs	r0, #2
     768:	4b01      	ldr	r3, [pc, #4]	; (770 <TCC2_Handler+0xc>)
     76a:	4798      	blx	r3
     76c:	bd10      	pop	{r4, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	000006f9 	.word	0x000006f9

00000774 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     774:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <sd_mmc_configure_slot+0x20>)
     778:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     77a:	2322      	movs	r3, #34	; 0x22
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     77c:	5ccb      	ldrb	r3, [r1, r3]
     77e:	1e5a      	subs	r2, r3, #1
     780:	4193      	sbcs	r3, r2
     782:	b2db      	uxtb	r3, r3
     784:	7c4a      	ldrb	r2, [r1, #17]
     786:	6809      	ldr	r1, [r1, #0]
     788:	4803      	ldr	r0, [pc, #12]	; (798 <sd_mmc_configure_slot+0x24>)
     78a:	7800      	ldrb	r0, [r0, #0]
     78c:	4c03      	ldr	r4, [pc, #12]	; (79c <sd_mmc_configure_slot+0x28>)
     78e:	47a0      	blx	r4
}
     790:	bd10      	pop	{r4, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	200001a8 	.word	0x200001a8
     798:	200001b1 	.word	0x200001b1
     79c:	000080f9 	.word	0x000080f9

000007a0 <sd_mmc_select_slot>:
{
     7a0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     7a2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     7a4:	2800      	cmp	r0, #0
     7a6:	d001      	beq.n	7ac <sd_mmc_select_slot+0xc>
}
     7a8:	0018      	movs	r0, r3
     7aa:	bd10      	pop	{r4, pc}
	if (port_pin_get_input_level(sd_mmc_cards[slot].cd_gpio)
     7ac:	4b40      	ldr	r3, [pc, #256]	; (8b0 <sd_mmc_select_slot+0x110>)
     7ae:	7a19      	ldrb	r1, [r3, #8]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     7b0:	09ca      	lsrs	r2, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     7b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7b4:	2a00      	cmp	r2, #0
     7b6:	d104      	bne.n	7c2 <sd_mmc_select_slot+0x22>
		return &(ports[port_index]->Group[group_index]);
     7b8:	094b      	lsrs	r3, r1, #5
     7ba:	01db      	lsls	r3, r3, #7
     7bc:	4a3d      	ldr	r2, [pc, #244]	; (8b4 <sd_mmc_select_slot+0x114>)
     7be:	4694      	mov	ip, r2
     7c0:	4463      	add	r3, ip
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     7c2:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7c4:	221f      	movs	r2, #31
     7c6:	400a      	ands	r2, r1
     7c8:	2301      	movs	r3, #1
     7ca:	4093      	lsls	r3, r2
     7cc:	4218      	tst	r0, r3
     7ce:	d010      	beq.n	7f2 <sd_mmc_select_slot+0x52>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     7d0:	4b37      	ldr	r3, [pc, #220]	; (8b0 <sd_mmc_select_slot+0x110>)
     7d2:	7b9b      	ldrb	r3, [r3, #14]
     7d4:	2b01      	cmp	r3, #1
     7d6:	d004      	beq.n	7e2 <sd_mmc_select_slot+0x42>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     7d8:	2204      	movs	r2, #4
     7da:	4b35      	ldr	r3, [pc, #212]	; (8b0 <sd_mmc_select_slot+0x110>)
     7dc:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
     7de:	2302      	movs	r3, #2
     7e0:	e7e2      	b.n	7a8 <sd_mmc_select_slot+0x8>
	if (sd_mmc_sam_systick_used) {
     7e2:	4b35      	ldr	r3, [pc, #212]	; (8b8 <sd_mmc_select_slot+0x118>)
     7e4:	781b      	ldrb	r3, [r3, #0]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d0f6      	beq.n	7d8 <sd_mmc_select_slot+0x38>
		SysTick->CTRL = 0;
     7ea:	2200      	movs	r2, #0
     7ec:	4b33      	ldr	r3, [pc, #204]	; (8bc <sd_mmc_select_slot+0x11c>)
     7ee:	601a      	str	r2, [r3, #0]
     7f0:	e7f2      	b.n	7d8 <sd_mmc_select_slot+0x38>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
     7f2:	4b2f      	ldr	r3, [pc, #188]	; (8b0 <sd_mmc_select_slot+0x110>)
     7f4:	7b9a      	ldrb	r2, [r3, #14]
     7f6:	2a04      	cmp	r2, #4
     7f8:	d005      	beq.n	806 <sd_mmc_select_slot+0x66>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
     7fa:	2a01      	cmp	r2, #1
     7fc:	d033      	beq.n	866 <sd_mmc_select_slot+0xc6>
		return SD_MMC_ERR_UNUSABLE;
     7fe:	2303      	movs	r3, #3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
     800:	2a03      	cmp	r2, #3
     802:	d0d1      	beq.n	7a8 <sd_mmc_select_slot+0x8>
     804:	e045      	b.n	892 <sd_mmc_select_slot+0xf2>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
     806:	3a03      	subs	r2, #3
     808:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
     80a:	4b2c      	ldr	r3, [pc, #176]	; (8bc <sd_mmc_select_slot+0x11c>)
     80c:	681b      	ldr	r3, [r3, #0]
     80e:	2b00      	cmp	r3, #0
     810:	d017      	beq.n	842 <sd_mmc_select_slot+0xa2>
		sd_mmc_sam_systick_used = false;
     812:	2200      	movs	r2, #0
     814:	4b28      	ldr	r3, [pc, #160]	; (8b8 <sd_mmc_select_slot+0x118>)
     816:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
     818:	2000      	movs	r0, #0
     81a:	4b29      	ldr	r3, [pc, #164]	; (8c0 <sd_mmc_select_slot+0x120>)
     81c:	4798      	blx	r3
     81e:	22fa      	movs	r2, #250	; 0xfa
     820:	0092      	lsls	r2, r2, #2
     822:	2300      	movs	r3, #0
     824:	2100      	movs	r1, #0
     826:	4c27      	ldr	r4, [pc, #156]	; (8c4 <sd_mmc_select_slot+0x124>)
     828:	47a0      	blx	r4
     82a:	4a27      	ldr	r2, [pc, #156]	; (8c8 <sd_mmc_select_slot+0x128>)
     82c:	2300      	movs	r3, #0
     82e:	1880      	adds	r0, r0, r2
     830:	4159      	adcs	r1, r3
     832:	4a26      	ldr	r2, [pc, #152]	; (8cc <sd_mmc_select_slot+0x12c>)
     834:	2300      	movs	r3, #0
     836:	4c26      	ldr	r4, [pc, #152]	; (8d0 <sd_mmc_select_slot+0x130>)
     838:	47a0      	blx	r4
     83a:	4b26      	ldr	r3, [pc, #152]	; (8d4 <sd_mmc_select_slot+0x134>)
     83c:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
     83e:	2302      	movs	r3, #2
     840:	e7b2      	b.n	7a8 <sd_mmc_select_slot+0x8>
		sd_mmc_sam_systick_used = true;
     842:	2401      	movs	r4, #1
     844:	4b1c      	ldr	r3, [pc, #112]	; (8b8 <sd_mmc_select_slot+0x118>)
     846:	701c      	strb	r4, [r3, #0]
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     848:	2000      	movs	r0, #0
     84a:	4b1d      	ldr	r3, [pc, #116]	; (8c0 <sd_mmc_select_slot+0x120>)
     84c:	4798      	blx	r3
     84e:	21fa      	movs	r1, #250	; 0xfa
     850:	0149      	lsls	r1, r1, #5
     852:	4b21      	ldr	r3, [pc, #132]	; (8d8 <sd_mmc_select_slot+0x138>)
     854:	4798      	blx	r3
				* SD_MMC_DEBOUNCE_TIMEOUT;
     856:	23fa      	movs	r3, #250	; 0xfa
     858:	009b      	lsls	r3, r3, #2
     85a:	4358      	muls	r0, r3
		SysTick->LOAD = (system_gclk_gen_get_hz(0) / (8 * 1000))
     85c:	4b17      	ldr	r3, [pc, #92]	; (8bc <sd_mmc_select_slot+0x11c>)
     85e:	6058      	str	r0, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
     860:	601c      	str	r4, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
     862:	2302      	movs	r3, #2
     864:	e7a0      	b.n	7a8 <sd_mmc_select_slot+0x8>
	if (!sd_mmc_sam_systick_used) {
     866:	4b14      	ldr	r3, [pc, #80]	; (8b8 <sd_mmc_select_slot+0x118>)
     868:	781b      	ldrb	r3, [r3, #0]
     86a:	2b00      	cmp	r3, #0
     86c:	d007      	beq.n	87e <sd_mmc_select_slot+0xde>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     86e:	4b13      	ldr	r3, [pc, #76]	; (8bc <sd_mmc_select_slot+0x11c>)
     870:	681a      	ldr	r2, [r3, #0]
			return SD_MMC_ERR_NO_CARD;
     872:	2302      	movs	r3, #2
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
     874:	03d2      	lsls	r2, r2, #15
     876:	d597      	bpl.n	7a8 <sd_mmc_select_slot+0x8>
		SysTick->CTRL = 0;
     878:	2200      	movs	r2, #0
     87a:	4b10      	ldr	r3, [pc, #64]	; (8bc <sd_mmc_select_slot+0x11c>)
     87c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     87e:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <sd_mmc_select_slot+0x110>)
     880:	2202      	movs	r2, #2
     882:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     884:	4a15      	ldr	r2, [pc, #84]	; (8dc <sd_mmc_select_slot+0x13c>)
     886:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     888:	2201      	movs	r2, #1
     88a:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
     88c:	2100      	movs	r1, #0
     88e:	3221      	adds	r2, #33	; 0x21
     890:	5499      	strb	r1, [r3, r2]
	sd_mmc_slot_sel = slot;
     892:	2200      	movs	r2, #0
     894:	4b12      	ldr	r3, [pc, #72]	; (8e0 <sd_mmc_select_slot+0x140>)
     896:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     898:	4c05      	ldr	r4, [pc, #20]	; (8b0 <sd_mmc_select_slot+0x110>)
     89a:	4b12      	ldr	r3, [pc, #72]	; (8e4 <sd_mmc_select_slot+0x144>)
     89c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     89e:	4b12      	ldr	r3, [pc, #72]	; (8e8 <sd_mmc_select_slot+0x148>)
     8a0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     8a2:	7ba3      	ldrb	r3, [r4, #14]
     8a4:	3b02      	subs	r3, #2
     8a6:	425a      	negs	r2, r3
     8a8:	4153      	adcs	r3, r2
     8aa:	b2db      	uxtb	r3, r3
     8ac:	e77c      	b.n	7a8 <sd_mmc_select_slot+0x8>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	2000000c 	.word	0x2000000c
     8b4:	41004400 	.word	0x41004400
     8b8:	200001b0 	.word	0x200001b0
     8bc:	e000e010 	.word	0xe000e010
     8c0:	000087f1 	.word	0x000087f1
     8c4:	00008f2d 	.word	0x00008f2d
     8c8:	00001b57 	.word	0x00001b57
     8cc:	00001b58 	.word	0x00001b58
     8d0:	00008eed 	.word	0x00008eed
     8d4:	20000001 	.word	0x20000001
     8d8:	00008b85 	.word	0x00008b85
     8dc:	00061a80 	.word	0x00061a80
     8e0:	200001b1 	.word	0x200001b1
     8e4:	200001a8 	.word	0x200001a8
     8e8:	00000775 	.word	0x00000775

000008ec <sd_mmc_cmd13>:
{
     8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ee:	4d09      	ldr	r5, [pc, #36]	; (914 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8f0:	4f09      	ldr	r7, [pc, #36]	; (918 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     8f2:	4e0a      	ldr	r6, [pc, #40]	; (91c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8f4:	2100      	movs	r1, #0
     8f6:	480a      	ldr	r0, [pc, #40]	; (920 <sd_mmc_cmd13+0x34>)
     8f8:	47b8      	blx	r7
     8fa:	1e04      	subs	r4, r0, #0
     8fc:	d007      	beq.n	90e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     8fe:	47b0      	blx	r6
     900:	23ff      	movs	r3, #255	; 0xff
     902:	4203      	tst	r3, r0
     904:	d003      	beq.n	90e <sd_mmc_cmd13+0x22>
     906:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     908:	2d00      	cmp	r5, #0
     90a:	d1f3      	bne.n	8f4 <sd_mmc_cmd13+0x8>
			return false;
     90c:	2400      	movs	r4, #0
}
     90e:	0020      	movs	r0, r4
     910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	00030d41 	.word	0x00030d41
     918:	0000833d 	.word	0x0000833d
     91c:	00008355 	.word	0x00008355
     920:	00001b0d 	.word	0x00001b0d

00000924 <sd_mmc_cmd9_spi>:
{
     924:	b510      	push	{r4, lr}
     926:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     928:	4b0c      	ldr	r3, [pc, #48]	; (95c <sd_mmc_cmd9_spi+0x38>)
     92a:	681b      	ldr	r3, [r3, #0]
     92c:	8999      	ldrh	r1, [r3, #12]
     92e:	0409      	lsls	r1, r1, #16
     930:	2301      	movs	r3, #1
     932:	9300      	str	r3, [sp, #0]
     934:	2210      	movs	r2, #16
     936:	480a      	ldr	r0, [pc, #40]	; (960 <sd_mmc_cmd9_spi+0x3c>)
     938:	4c0a      	ldr	r4, [pc, #40]	; (964 <sd_mmc_cmd9_spi+0x40>)
     93a:	47a0      	blx	r4
     93c:	2800      	cmp	r0, #0
     93e:	d101      	bne.n	944 <sd_mmc_cmd9_spi+0x20>
}
     940:	b002      	add	sp, #8
     942:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     944:	4b05      	ldr	r3, [pc, #20]	; (95c <sd_mmc_cmd9_spi+0x38>)
     946:	6818      	ldr	r0, [r3, #0]
     948:	3012      	adds	r0, #18
     94a:	2101      	movs	r1, #1
     94c:	4b06      	ldr	r3, [pc, #24]	; (968 <sd_mmc_cmd9_spi+0x44>)
     94e:	4798      	blx	r3
     950:	2800      	cmp	r0, #0
     952:	d0f5      	beq.n	940 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <sd_mmc_cmd9_spi+0x48>)
     956:	4798      	blx	r3
     958:	e7f2      	b.n	940 <sd_mmc_cmd9_spi+0x1c>
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	200001a8 	.word	0x200001a8
     960:	00081109 	.word	0x00081109
     964:	000081ad 	.word	0x000081ad
     968:	000083d9 	.word	0x000083d9
     96c:	00008465 	.word	0x00008465

00000970 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     970:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     972:	4b04      	ldr	r3, [pc, #16]	; (984 <sd_mmc_deselect_slot+0x14>)
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b00      	cmp	r3, #0
     978:	d000      	beq.n	97c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     97a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     97c:	2000      	movs	r0, #0
     97e:	4b02      	ldr	r3, [pc, #8]	; (988 <sd_mmc_deselect_slot+0x18>)
     980:	4798      	blx	r3
}
     982:	e7fa      	b.n	97a <sd_mmc_deselect_slot+0xa>
     984:	200001b1 	.word	0x200001b1
     988:	0000814d 	.word	0x0000814d

0000098c <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     98c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     98e:	2204      	movs	r2, #4
     990:	4b03      	ldr	r3, [pc, #12]	; (9a0 <sd_mmc_init+0x14>)
     992:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     994:	32fb      	adds	r2, #251	; 0xfb
     996:	4b03      	ldr	r3, [pc, #12]	; (9a4 <sd_mmc_init+0x18>)
     998:	701a      	strb	r2, [r3, #0]
	driver_init();
     99a:	4b03      	ldr	r3, [pc, #12]	; (9a8 <sd_mmc_init+0x1c>)
     99c:	4798      	blx	r3
}
     99e:	bd10      	pop	{r4, pc}
     9a0:	2000000c 	.word	0x2000000c
     9a4:	200001b1 	.word	0x200001b1
     9a8:	00008005 	.word	0x00008005

000009ac <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ae:	46c6      	mov	lr, r8
     9b0:	b500      	push	{lr}
     9b2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     9b4:	4bcb      	ldr	r3, [pc, #812]	; (ce4 <sd_mmc_check+0x338>)
     9b6:	4798      	blx	r3
     9b8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     9ba:	2801      	cmp	r0, #1
     9bc:	d006      	beq.n	9cc <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     9be:	4bca      	ldr	r3, [pc, #808]	; (ce8 <sd_mmc_check+0x33c>)
     9c0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     9c2:	0020      	movs	r0, r4
     9c4:	b008      	add	sp, #32
     9c6:	bc04      	pop	{r2}
     9c8:	4690      	mov	r8, r2
     9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     9cc:	4bc7      	ldr	r3, [pc, #796]	; (cec <sd_mmc_check+0x340>)
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	2201      	movs	r2, #1
     9d2:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     9d4:	2200      	movs	r2, #0
     9d6:	741a      	strb	r2, [r3, #16]
	sd_mmc_card->rca = 0;
     9d8:	819a      	strh	r2, [r3, #12]
	driver_send_clock();
     9da:	4bc5      	ldr	r3, [pc, #788]	; (cf0 <sd_mmc_check+0x344>)
     9dc:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     9de:	2100      	movs	r1, #0
     9e0:	2088      	movs	r0, #136	; 0x88
     9e2:	0140      	lsls	r0, r0, #5
     9e4:	4bc3      	ldr	r3, [pc, #780]	; (cf4 <sd_mmc_check+0x348>)
     9e6:	4798      	blx	r3
     9e8:	2800      	cmp	r0, #0
     9ea:	d107      	bne.n	9fc <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     9ec:	4bbf      	ldr	r3, [pc, #764]	; (cec <sd_mmc_check+0x340>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	2203      	movs	r2, #3
     9f2:	739a      	strb	r2, [r3, #14]
	sd_mmc_deselect_slot();
     9f4:	4bbc      	ldr	r3, [pc, #752]	; (ce8 <sd_mmc_check+0x33c>)
     9f6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     9f8:	2403      	movs	r4, #3
     9fa:	e7e2      	b.n	9c2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     9fc:	21d5      	movs	r1, #213	; 0xd5
     9fe:	0049      	lsls	r1, r1, #1
     a00:	48bd      	ldr	r0, [pc, #756]	; (cf8 <sd_mmc_check+0x34c>)
     a02:	4bbc      	ldr	r3, [pc, #752]	; (cf4 <sd_mmc_check+0x348>)
     a04:	4798      	blx	r3
	*v2 = 0;
     a06:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     a08:	2800      	cmp	r0, #0
     a0a:	d125      	bne.n	a58 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a0c:	4bb7      	ldr	r3, [pc, #732]	; (cec <sd_mmc_check+0x340>)
     a0e:	681b      	ldr	r3, [r3, #0]
     a10:	7bdb      	ldrb	r3, [r3, #15]
     a12:	07db      	lsls	r3, r3, #31
     a14:	d500      	bpl.n	a18 <sd_mmc_check+0x6c>
     a16:	e1eb      	b.n	df0 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a18:	4bb4      	ldr	r3, [pc, #720]	; (cec <sd_mmc_check+0x340>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	7bda      	ldrb	r2, [r3, #15]
     a1e:	2309      	movs	r3, #9
     a20:	4013      	ands	r3, r2
     a22:	2b01      	cmp	r3, #1
     a24:	d10f      	bne.n	a46 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a26:	2180      	movs	r1, #128	; 0x80
     a28:	0089      	lsls	r1, r1, #2
     a2a:	48b4      	ldr	r0, [pc, #720]	; (cfc <sd_mmc_check+0x350>)
     a2c:	4bb1      	ldr	r3, [pc, #708]	; (cf4 <sd_mmc_check+0x348>)
     a2e:	4798      	blx	r3
     a30:	2800      	cmp	r0, #0
     a32:	d0db      	beq.n	9ec <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a34:	4bad      	ldr	r3, [pc, #692]	; (cec <sd_mmc_check+0x340>)
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	7bdb      	ldrb	r3, [r3, #15]
     a3a:	07db      	lsls	r3, r3, #31
     a3c:	d503      	bpl.n	a46 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     a3e:	4bb0      	ldr	r3, [pc, #704]	; (d00 <sd_mmc_check+0x354>)
     a40:	4798      	blx	r3
     a42:	2800      	cmp	r0, #0
     a44:	d0d2      	beq.n	9ec <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a46:	4baf      	ldr	r3, [pc, #700]	; (d04 <sd_mmc_check+0x358>)
     a48:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     a4a:	4ba8      	ldr	r3, [pc, #672]	; (cec <sd_mmc_check+0x340>)
     a4c:	681b      	ldr	r3, [r3, #0]
     a4e:	2200      	movs	r2, #0
     a50:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
     a52:	4ba5      	ldr	r3, [pc, #660]	; (ce8 <sd_mmc_check+0x33c>)
     a54:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     a56:	e7b4      	b.n	9c2 <sd_mmc_check+0x16>
	resp = driver_get_response();
     a58:	4bab      	ldr	r3, [pc, #684]	; (d08 <sd_mmc_check+0x35c>)
     a5a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     a5c:	1c43      	adds	r3, r0, #1
     a5e:	d100      	bne.n	a62 <sd_mmc_check+0xb6>
     a60:	e1c4      	b.n	dec <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a62:	0500      	lsls	r0, r0, #20
     a64:	0d00      	lsrs	r0, r0, #20
     a66:	23d5      	movs	r3, #213	; 0xd5
     a68:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     a6a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a6c:	4298      	cmp	r0, r3
     a6e:	d1bd      	bne.n	9ec <sd_mmc_check+0x40>
     a70:	e7cc      	b.n	a0c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     a72:	2100      	movs	r1, #0
     a74:	48a5      	ldr	r0, [pc, #660]	; (d0c <sd_mmc_check+0x360>)
     a76:	4b9f      	ldr	r3, [pc, #636]	; (cf4 <sd_mmc_check+0x348>)
     a78:	4798      	blx	r3
     a7a:	2800      	cmp	r0, #0
     a7c:	d119      	bne.n	ab2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     a7e:	4b9b      	ldr	r3, [pc, #620]	; (cec <sd_mmc_check+0x340>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	2202      	movs	r2, #2
     a84:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a86:	2100      	movs	r1, #0
     a88:	2088      	movs	r0, #136	; 0x88
     a8a:	0140      	lsls	r0, r0, #5
     a8c:	4b99      	ldr	r3, [pc, #612]	; (cf4 <sd_mmc_check+0x348>)
     a8e:	4798      	blx	r3
     a90:	2800      	cmp	r0, #0
     a92:	d0ab      	beq.n	9ec <sd_mmc_check+0x40>
     a94:	4d9e      	ldr	r5, [pc, #632]	; (d10 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a96:	4f97      	ldr	r7, [pc, #604]	; (cf4 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     a98:	4e9b      	ldr	r6, [pc, #620]	; (d08 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a9a:	2100      	movs	r1, #0
     a9c:	489d      	ldr	r0, [pc, #628]	; (d14 <sd_mmc_check+0x368>)
     a9e:	47b8      	blx	r7
     aa0:	2800      	cmp	r0, #0
     aa2:	d0a3      	beq.n	9ec <sd_mmc_check+0x40>
		resp = driver_get_response();
     aa4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     aa6:	07c3      	lsls	r3, r0, #31
     aa8:	d57d      	bpl.n	ba6 <sd_mmc_check+0x1fa>
     aaa:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     aac:	2d00      	cmp	r5, #0
     aae:	d1f4      	bne.n	a9a <sd_mmc_check+0xee>
     ab0:	e79c      	b.n	9ec <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     ab2:	4b95      	ldr	r3, [pc, #596]	; (d08 <sd_mmc_check+0x35c>)
     ab4:	4798      	blx	r3
     ab6:	0043      	lsls	r3, r0, #1
     ab8:	d505      	bpl.n	ac6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     aba:	4b8c      	ldr	r3, [pc, #560]	; (cec <sd_mmc_check+0x340>)
     abc:	681a      	ldr	r2, [r3, #0]
     abe:	7bd3      	ldrb	r3, [r2, #15]
     ac0:	2108      	movs	r1, #8
     ac2:	430b      	orrs	r3, r1
     ac4:	73d3      	strb	r3, [r2, #15]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ac6:	2100      	movs	r1, #0
     ac8:	4893      	ldr	r0, [pc, #588]	; (d18 <sd_mmc_check+0x36c>)
     aca:	4b8a      	ldr	r3, [pc, #552]	; (cf4 <sd_mmc_check+0x348>)
     acc:	4798      	blx	r3
     ace:	2800      	cmp	r0, #0
     ad0:	d08c      	beq.n	9ec <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     ad2:	4b86      	ldr	r3, [pc, #536]	; (cec <sd_mmc_check+0x340>)
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	7bdb      	ldrb	r3, [r3, #15]
     ad8:	07da      	lsls	r2, r3, #31
     ada:	d400      	bmi.n	ade <sd_mmc_check+0x132>
     adc:	e1a4      	b.n	e28 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     ade:	4b8f      	ldr	r3, [pc, #572]	; (d1c <sd_mmc_check+0x370>)
     ae0:	4798      	blx	r3
     ae2:	2800      	cmp	r0, #0
     ae4:	d082      	beq.n	9ec <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     ae6:	4b81      	ldr	r3, [pc, #516]	; (cec <sd_mmc_check+0x340>)
     ae8:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     aea:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     aec:	2107      	movs	r1, #7
     aee:	4019      	ands	r1, r3
     af0:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     af2:	488b      	ldr	r0, [pc, #556]	; (d20 <sd_mmc_check+0x374>)
     af4:	5808      	ldr	r0, [r1, r0]
     af6:	21fa      	movs	r1, #250	; 0xfa
     af8:	0089      	lsls	r1, r1, #2
     afa:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     afc:	065b      	lsls	r3, r3, #25
     afe:	0f1b      	lsrs	r3, r3, #28
     b00:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     b02:	4888      	ldr	r0, [pc, #544]	; (d24 <sd_mmc_check+0x378>)
     b04:	581b      	ldr	r3, [r3, r0]
     b06:	434b      	muls	r3, r1
     b08:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     b0a:	7c93      	ldrb	r3, [r2, #18]
     b0c:	099b      	lsrs	r3, r3, #6
     b0e:	d000      	beq.n	b12 <sd_mmc_check+0x166>
     b10:	e13c      	b.n	d8c <sd_mmc_check+0x3e0>
     b12:	7e91      	ldrb	r1, [r2, #26]
     b14:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b16:	7e53      	ldrb	r3, [r2, #25]
     b18:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b1a:	7e10      	ldrb	r0, [r2, #24]
     b1c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b1e:	4303      	orrs	r3, r0
     b20:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b22:	7f10      	ldrb	r0, [r2, #28]
     b24:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b26:	7ed1      	ldrb	r1, [r2, #27]
     b28:	0049      	lsls	r1, r1, #1
     b2a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     b2c:	051b      	lsls	r3, r3, #20
     b2e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b30:	3301      	adds	r3, #1
     b32:	2107      	movs	r1, #7
     b34:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     b36:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b38:	408b      	lsls	r3, r1
     b3a:	7dd0      	ldrb	r0, [r2, #23]
     b3c:	210f      	movs	r1, #15
     b3e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     b40:	408b      	lsls	r3, r1
				/ 1024;
     b42:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     b44:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     b46:	8991      	ldrh	r1, [r2, #12]
     b48:	0409      	lsls	r1, r1, #16
     b4a:	4877      	ldr	r0, [pc, #476]	; (d28 <sd_mmc_check+0x37c>)
     b4c:	4b69      	ldr	r3, [pc, #420]	; (cf4 <sd_mmc_check+0x348>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d100      	bne.n	b56 <sd_mmc_check+0x1aa>
     b54:	e74a      	b.n	9ec <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     b56:	2301      	movs	r3, #1
     b58:	9300      	str	r3, [sp, #0]
     b5a:	2208      	movs	r2, #8
     b5c:	2100      	movs	r1, #0
     b5e:	4873      	ldr	r0, [pc, #460]	; (d2c <sd_mmc_check+0x380>)
     b60:	4d73      	ldr	r5, [pc, #460]	; (d30 <sd_mmc_check+0x384>)
     b62:	47a8      	blx	r5
     b64:	2800      	cmp	r0, #0
     b66:	d100      	bne.n	b6a <sd_mmc_check+0x1be>
     b68:	e740      	b.n	9ec <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     b6a:	2101      	movs	r1, #1
     b6c:	a806      	add	r0, sp, #24
     b6e:	4b71      	ldr	r3, [pc, #452]	; (d34 <sd_mmc_check+0x388>)
     b70:	4798      	blx	r3
     b72:	2800      	cmp	r0, #0
     b74:	d100      	bne.n	b78 <sd_mmc_check+0x1cc>
     b76:	e739      	b.n	9ec <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     b78:	4b6f      	ldr	r3, [pc, #444]	; (d38 <sd_mmc_check+0x38c>)
     b7a:	4798      	blx	r3
     b7c:	2800      	cmp	r0, #0
     b7e:	d100      	bne.n	b82 <sd_mmc_check+0x1d6>
     b80:	e734      	b.n	9ec <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b82:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     b84:	781b      	ldrb	r3, [r3, #0]
     b86:	220f      	movs	r2, #15
     b88:	4013      	ands	r3, r2
     b8a:	2b01      	cmp	r3, #1
     b8c:	d100      	bne.n	b90 <sd_mmc_check+0x1e4>
     b8e:	e119      	b.n	dc4 <sd_mmc_check+0x418>
     b90:	2b00      	cmp	r3, #0
     b92:	d100      	bne.n	b96 <sd_mmc_check+0x1ea>
     b94:	e109      	b.n	daa <sd_mmc_check+0x3fe>
     b96:	2b02      	cmp	r3, #2
     b98:	d100      	bne.n	b9c <sd_mmc_check+0x1f0>
     b9a:	e118      	b.n	dce <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b9c:	4b53      	ldr	r3, [pc, #332]	; (cec <sd_mmc_check+0x340>)
     b9e:	681b      	ldr	r3, [r3, #0]
     ba0:	2210      	movs	r2, #16
     ba2:	741a      	strb	r2, [r3, #16]
     ba4:	e105      	b.n	db2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     ba6:	2100      	movs	r1, #0
     ba8:	4858      	ldr	r0, [pc, #352]	; (d0c <sd_mmc_check+0x360>)
     baa:	4b52      	ldr	r3, [pc, #328]	; (cf4 <sd_mmc_check+0x348>)
     bac:	4798      	blx	r3
     bae:	2800      	cmp	r0, #0
     bb0:	d100      	bne.n	bb4 <sd_mmc_check+0x208>
     bb2:	e71b      	b.n	9ec <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     bb4:	4b54      	ldr	r3, [pc, #336]	; (d08 <sd_mmc_check+0x35c>)
     bb6:	4798      	blx	r3
     bb8:	23c0      	movs	r3, #192	; 0xc0
     bba:	05db      	lsls	r3, r3, #23
     bbc:	4018      	ands	r0, r3
     bbe:	2380      	movs	r3, #128	; 0x80
     bc0:	05db      	lsls	r3, r3, #23
     bc2:	4298      	cmp	r0, r3
     bc4:	d105      	bne.n	bd2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     bc6:	4b49      	ldr	r3, [pc, #292]	; (cec <sd_mmc_check+0x340>)
     bc8:	681a      	ldr	r2, [r3, #0]
     bca:	7bd1      	ldrb	r1, [r2, #15]
     bcc:	2308      	movs	r3, #8
     bce:	430b      	orrs	r3, r1
     bd0:	73d3      	strb	r3, [r2, #15]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     bd2:	2100      	movs	r1, #0
     bd4:	4850      	ldr	r0, [pc, #320]	; (d18 <sd_mmc_check+0x36c>)
     bd6:	4b47      	ldr	r3, [pc, #284]	; (cf4 <sd_mmc_check+0x348>)
     bd8:	4798      	blx	r3
     bda:	2800      	cmp	r0, #0
     bdc:	d100      	bne.n	be0 <sd_mmc_check+0x234>
     bde:	e705      	b.n	9ec <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     be0:	4b4e      	ldr	r3, [pc, #312]	; (d1c <sd_mmc_check+0x370>)
     be2:	4798      	blx	r3
     be4:	2800      	cmp	r0, #0
     be6:	d100      	bne.n	bea <sd_mmc_check+0x23e>
     be8:	e700      	b.n	9ec <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bea:	4b40      	ldr	r3, [pc, #256]	; (cec <sd_mmc_check+0x340>)
     bec:	681a      	ldr	r2, [r3, #0]
     bee:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
     bf0:	069b      	lsls	r3, r3, #26
     bf2:	0f1b      	lsrs	r3, r3, #28
     bf4:	2b02      	cmp	r3, #2
     bf6:	d100      	bne.n	bfa <sd_mmc_check+0x24e>
     bf8:	e0a8      	b.n	d4c <sd_mmc_check+0x3a0>
     bfa:	d907      	bls.n	c0c <sd_mmc_check+0x260>
     bfc:	2b03      	cmp	r3, #3
     bfe:	d100      	bne.n	c02 <sd_mmc_check+0x256>
     c00:	e0a7      	b.n	d52 <sd_mmc_check+0x3a6>
     c02:	2b04      	cmp	r3, #4
     c04:	d104      	bne.n	c10 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     c06:	2340      	movs	r3, #64	; 0x40
     c08:	7413      	strb	r3, [r2, #16]
     c0a:	e003      	b.n	c14 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     c0c:	2b01      	cmp	r3, #1
     c0e:	d066      	beq.n	cde <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     c10:	2312      	movs	r3, #18
     c12:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c14:	7d53      	ldrb	r3, [r2, #21]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     c16:	0659      	lsls	r1, r3, #25
     c18:	0f09      	lsrs	r1, r1, #28
     c1a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c1c:	2007      	movs	r0, #7
     c1e:	4003      	ands	r3, r0
     c20:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c22:	483f      	ldr	r0, [pc, #252]	; (d20 <sd_mmc_check+0x374>)
     c24:	5818      	ldr	r0, [r3, r0]
     c26:	23fa      	movs	r3, #250	; 0xfa
     c28:	009b      	lsls	r3, r3, #2
     c2a:	4343      	muls	r3, r0
     c2c:	4843      	ldr	r0, [pc, #268]	; (d3c <sd_mmc_check+0x390>)
     c2e:	5809      	ldr	r1, [r1, r0]
     c30:	434b      	muls	r3, r1
     c32:	6013      	str	r3, [r2, #0]
     c34:	7e91      	ldrb	r1, [r2, #26]
     c36:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c38:	7e53      	ldrb	r3, [r2, #25]
     c3a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c3c:	7e10      	ldrb	r0, [r2, #24]
     c3e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c40:	4303      	orrs	r3, r0
     c42:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     c44:	051b      	lsls	r3, r3, #20
     c46:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     c48:	493d      	ldr	r1, [pc, #244]	; (d40 <sd_mmc_check+0x394>)
     c4a:	428b      	cmp	r3, r1
     c4c:	d00f      	beq.n	c6e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c4e:	7f10      	ldrb	r0, [r2, #28]
     c50:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c52:	7ed1      	ldrb	r1, [r2, #27]
     c54:	0049      	lsls	r1, r1, #1
     c56:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c58:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     c5a:	2007      	movs	r0, #7
     c5c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     c5e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c60:	408b      	lsls	r3, r1
     c62:	7dd1      	ldrb	r1, [r2, #23]
     c64:	3008      	adds	r0, #8
     c66:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     c68:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     c6a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     c6c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     c6e:	7c13      	ldrb	r3, [r2, #16]
     c70:	2b3f      	cmp	r3, #63	; 0x3f
     c72:	d97b      	bls.n	d6c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     c74:	2100      	movs	r1, #0
     c76:	9100      	str	r1, [sp, #0]
     c78:	2301      	movs	r3, #1
     c7a:	2280      	movs	r2, #128	; 0x80
     c7c:	0092      	lsls	r2, r2, #2
     c7e:	4831      	ldr	r0, [pc, #196]	; (d44 <sd_mmc_check+0x398>)
     c80:	4d2b      	ldr	r5, [pc, #172]	; (d30 <sd_mmc_check+0x384>)
     c82:	47a8      	blx	r5
     c84:	2800      	cmp	r0, #0
     c86:	d100      	bne.n	c8a <sd_mmc_check+0x2de>
     c88:	e6b0      	b.n	9ec <sd_mmc_check+0x40>
     c8a:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     c8c:	4e2e      	ldr	r6, [pc, #184]	; (d48 <sd_mmc_check+0x39c>)
     c8e:	a805      	add	r0, sp, #20
     c90:	47b0      	blx	r6
     c92:	2800      	cmp	r0, #0
     c94:	d100      	bne.n	c98 <sd_mmc_check+0x2ec>
     c96:	e6a9      	b.n	9ec <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c98:	3501      	adds	r5, #1
     c9a:	b2ad      	uxth	r5, r5
     c9c:	2d32      	cmp	r5, #50	; 0x32
     c9e:	d1f6      	bne.n	c8e <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     ca0:	4b12      	ldr	r3, [pc, #72]	; (cec <sd_mmc_check+0x340>)
     ca2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ca4:	7e8a      	ldrb	r2, [r1, #26]
     ca6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     ca8:	7e4b      	ldrb	r3, [r1, #25]
     caa:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cac:	7e09      	ldrb	r1, [r1, #24]
     cae:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     cb0:	430b      	orrs	r3, r1
     cb2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     cb4:	051b      	lsls	r3, r3, #20
     cb6:	0d1b      	lsrs	r3, r3, #20
     cb8:	4a21      	ldr	r2, [pc, #132]	; (d40 <sd_mmc_check+0x394>)
     cba:	4293      	cmp	r3, r2
     cbc:	d154      	bne.n	d68 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     cbe:	4e22      	ldr	r6, [pc, #136]	; (d48 <sd_mmc_check+0x39c>)
     cc0:	a806      	add	r0, sp, #24
     cc2:	47b0      	blx	r6
     cc4:	2800      	cmp	r0, #0
     cc6:	d100      	bne.n	cca <sd_mmc_check+0x31e>
     cc8:	e690      	b.n	9ec <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     cca:	3501      	adds	r5, #1
     ccc:	b2ad      	uxth	r5, r5
     cce:	2d35      	cmp	r5, #53	; 0x35
     cd0:	d9f6      	bls.n	cc0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     cd2:	4b06      	ldr	r3, [pc, #24]	; (cec <sd_mmc_check+0x340>)
     cd4:	681a      	ldr	r2, [r3, #0]
     cd6:	9b06      	ldr	r3, [sp, #24]
     cd8:	085b      	lsrs	r3, r3, #1
     cda:	6053      	str	r3, [r2, #4]
     cdc:	e044      	b.n	d68 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     cde:	2314      	movs	r3, #20
     ce0:	7413      	strb	r3, [r2, #16]
     ce2:	e797      	b.n	c14 <sd_mmc_check+0x268>
     ce4:	000007a1 	.word	0x000007a1
     ce8:	00000971 	.word	0x00000971
     cec:	200001a8 	.word	0x200001a8
     cf0:	00008175 	.word	0x00008175
     cf4:	0000833d 	.word	0x0000833d
     cf8:	00005508 	.word	0x00005508
     cfc:	00001110 	.word	0x00001110
     d00:	000008ed 	.word	0x000008ed
     d04:	00000775 	.word	0x00000775
     d08:	00008355 	.word	0x00008355
     d0c:	0000053a 	.word	0x0000053a
     d10:	00001bef 	.word	0x00001bef
     d14:	00001101 	.word	0x00001101
     d18:	0000113b 	.word	0x0000113b
     d1c:	00000925 	.word	0x00000925
     d20:	0000a200 	.word	0x0000a200
     d24:	0000a21c 	.word	0x0000a21c
     d28:	00001137 	.word	0x00001137
     d2c:	00081133 	.word	0x00081133
     d30:	000081ad 	.word	0x000081ad
     d34:	000083d9 	.word	0x000083d9
     d38:	00008465 	.word	0x00008465
     d3c:	0000a1c0 	.word	0x0000a1c0
     d40:	00000fff 	.word	0x00000fff
     d44:	00081108 	.word	0x00081108
     d48:	00008361 	.word	0x00008361
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     d4c:	2322      	movs	r3, #34	; 0x22
     d4e:	7413      	strb	r3, [r2, #16]
     d50:	e760      	b.n	c14 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     d52:	2330      	movs	r3, #48	; 0x30
     d54:	7413      	strb	r3, [r2, #16]
     d56:	e75d      	b.n	c14 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     d58:	a806      	add	r0, sp, #24
     d5a:	4b36      	ldr	r3, [pc, #216]	; (e34 <sd_mmc_check+0x488>)
     d5c:	4798      	blx	r3
     d5e:	2800      	cmp	r0, #0
     d60:	d100      	bne.n	d64 <sd_mmc_check+0x3b8>
     d62:	e643      	b.n	9ec <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     d64:	3501      	adds	r5, #1
     d66:	b2ad      	uxth	r5, r5
     d68:	2d7f      	cmp	r5, #127	; 0x7f
     d6a:	d9f5      	bls.n	d58 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d6c:	2180      	movs	r1, #128	; 0x80
     d6e:	0089      	lsls	r1, r1, #2
     d70:	4831      	ldr	r0, [pc, #196]	; (e38 <sd_mmc_check+0x48c>)
     d72:	4b32      	ldr	r3, [pc, #200]	; (e3c <sd_mmc_check+0x490>)
     d74:	4798      	blx	r3
     d76:	2800      	cmp	r0, #0
     d78:	d100      	bne.n	d7c <sd_mmc_check+0x3d0>
     d7a:	e637      	b.n	9ec <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     d7c:	4b30      	ldr	r3, [pc, #192]	; (e40 <sd_mmc_check+0x494>)
     d7e:	4798      	blx	r3
     d80:	2800      	cmp	r0, #0
     d82:	d100      	bne.n	d86 <sd_mmc_check+0x3da>
     d84:	e632      	b.n	9ec <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d86:	4b2f      	ldr	r3, [pc, #188]	; (e44 <sd_mmc_check+0x498>)
     d88:	4798      	blx	r3
     d8a:	e65e      	b.n	a4a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d8c:	7ed0      	ldrb	r0, [r2, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d8e:	7e93      	ldrb	r3, [r2, #26]
     d90:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d92:	7e51      	ldrb	r1, [r2, #25]
     d94:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d96:	430b      	orrs	r3, r1
     d98:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     d9a:	029b      	lsls	r3, r3, #10
				* 512;
     d9c:	085b      	lsrs	r3, r3, #1
     d9e:	2180      	movs	r1, #128	; 0x80
     da0:	0089      	lsls	r1, r1, #2
     da2:	468c      	mov	ip, r1
     da4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     da6:	6053      	str	r3, [r2, #4]
     da8:	e6cd      	b.n	b46 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     daa:	4b27      	ldr	r3, [pc, #156]	; (e48 <sd_mmc_check+0x49c>)
     dac:	681b      	ldr	r3, [r3, #0]
     dae:	2210      	movs	r2, #16
     db0:	741a      	strb	r2, [r3, #16]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     db2:	4b25      	ldr	r3, [pc, #148]	; (e48 <sd_mmc_check+0x49c>)
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	7bdb      	ldrb	r3, [r3, #15]
     db8:	2209      	movs	r2, #9
     dba:	4013      	ands	r3, r2
     dbc:	2b01      	cmp	r3, #1
     dbe:	d000      	beq.n	dc2 <sd_mmc_check+0x416>
     dc0:	e638      	b.n	a34 <sd_mmc_check+0x88>
     dc2:	e630      	b.n	a26 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     dc4:	4b20      	ldr	r3, [pc, #128]	; (e48 <sd_mmc_check+0x49c>)
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	221a      	movs	r2, #26
     dca:	741a      	strb	r2, [r3, #16]
     dcc:	e7f1      	b.n	db2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dce:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     dd0:	789b      	ldrb	r3, [r3, #2]
     dd2:	09db      	lsrs	r3, r3, #7
     dd4:	2b01      	cmp	r3, #1
     dd6:	d104      	bne.n	de2 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     dd8:	4b1b      	ldr	r3, [pc, #108]	; (e48 <sd_mmc_check+0x49c>)
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2230      	movs	r2, #48	; 0x30
     dde:	741a      	strb	r2, [r3, #16]
     de0:	e7e7      	b.n	db2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     de2:	4b19      	ldr	r3, [pc, #100]	; (e48 <sd_mmc_check+0x49c>)
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	2220      	movs	r2, #32
     de8:	741a      	strb	r2, [r3, #16]
     dea:	e7e2      	b.n	db2 <sd_mmc_check+0x406>
	*v2 = 0;
     dec:	2600      	movs	r6, #0
     dee:	e60d      	b.n	a0c <sd_mmc_check+0x60>
     df0:	1e73      	subs	r3, r6, #1
     df2:	419e      	sbcs	r6, r3
     df4:	07b3      	lsls	r3, r6, #30
     df6:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     df8:	4d14      	ldr	r5, [pc, #80]	; (e4c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     dfa:	4f10      	ldr	r7, [pc, #64]	; (e3c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     dfc:	46b8      	mov	r8, r7
		resp = driver_get_response();
     dfe:	4e14      	ldr	r6, [pc, #80]	; (e50 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e00:	2100      	movs	r1, #0
     e02:	4814      	ldr	r0, [pc, #80]	; (e54 <sd_mmc_check+0x4a8>)
     e04:	47b8      	blx	r7
     e06:	2800      	cmp	r0, #0
     e08:	d100      	bne.n	e0c <sd_mmc_check+0x460>
     e0a:	e638      	b.n	a7e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     e0c:	9903      	ldr	r1, [sp, #12]
     e0e:	4812      	ldr	r0, [pc, #72]	; (e58 <sd_mmc_check+0x4ac>)
     e10:	47c0      	blx	r8
     e12:	2800      	cmp	r0, #0
     e14:	d100      	bne.n	e18 <sd_mmc_check+0x46c>
     e16:	e632      	b.n	a7e <sd_mmc_check+0xd2>
		resp = driver_get_response();
     e18:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e1a:	07c3      	lsls	r3, r0, #31
     e1c:	d400      	bmi.n	e20 <sd_mmc_check+0x474>
     e1e:	e628      	b.n	a72 <sd_mmc_check+0xc6>
     e20:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e22:	2d00      	cmp	r5, #0
     e24:	d1ec      	bne.n	e00 <sd_mmc_check+0x454>
     e26:	e62a      	b.n	a7e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e28:	2209      	movs	r2, #9
     e2a:	4013      	ands	r3, r2
     e2c:	2b01      	cmp	r3, #1
     e2e:	d000      	beq.n	e32 <sd_mmc_check+0x486>
     e30:	e609      	b.n	a46 <sd_mmc_check+0x9a>
     e32:	e5f8      	b.n	a26 <sd_mmc_check+0x7a>
     e34:	00008361 	.word	0x00008361
     e38:	00001110 	.word	0x00001110
     e3c:	0000833d 	.word	0x0000833d
     e40:	000008ed 	.word	0x000008ed
     e44:	00000775 	.word	0x00000775
     e48:	200001a8 	.word	0x200001a8
     e4c:	00001bef 	.word	0x00001bef
     e50:	00008355 	.word	0x00008355
     e54:	00001137 	.word	0x00001137
     e58:	00001129 	.word	0x00001129

00000e5c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     e5c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e5e:	4b06      	ldr	r3, [pc, #24]	; (e78 <sd_mmc_get_type+0x1c>)
     e60:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     e62:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e64:	2800      	cmp	r0, #0
     e66:	d001      	beq.n	e6c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     e68:	0018      	movs	r0, r3
     e6a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e6c:	4b03      	ldr	r3, [pc, #12]	; (e7c <sd_mmc_get_type+0x20>)
     e6e:	4798      	blx	r3
	return sd_mmc_card->type;
     e70:	4b03      	ldr	r3, [pc, #12]	; (e80 <sd_mmc_get_type+0x24>)
     e72:	681b      	ldr	r3, [r3, #0]
     e74:	7bdb      	ldrb	r3, [r3, #15]
     e76:	e7f7      	b.n	e68 <sd_mmc_get_type+0xc>
     e78:	000007a1 	.word	0x000007a1
     e7c:	00000971 	.word	0x00000971
     e80:	200001a8 	.word	0x200001a8

00000e84 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     e84:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e86:	4b06      	ldr	r3, [pc, #24]	; (ea0 <sd_mmc_get_capacity+0x1c>)
     e88:	4798      	blx	r3
		return 0;
     e8a:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e8c:	2800      	cmp	r0, #0
     e8e:	d001      	beq.n	e94 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     e90:	0018      	movs	r0, r3
     e92:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e94:	4b03      	ldr	r3, [pc, #12]	; (ea4 <sd_mmc_get_capacity+0x20>)
     e96:	4798      	blx	r3
	return sd_mmc_card->capacity;
     e98:	4b03      	ldr	r3, [pc, #12]	; (ea8 <sd_mmc_get_capacity+0x24>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	685b      	ldr	r3, [r3, #4]
     e9e:	e7f7      	b.n	e90 <sd_mmc_get_capacity+0xc>
     ea0:	000007a1 	.word	0x000007a1
     ea4:	00000971 	.word	0x00000971
     ea8:	200001a8 	.word	0x200001a8

00000eac <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     eac:	2000      	movs	r0, #0
     eae:	4770      	bx	lr

00000eb0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	b082      	sub	sp, #8
     eb4:	000e      	movs	r6, r1
     eb6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     eb8:	4b16      	ldr	r3, [pc, #88]	; (f14 <sd_mmc_init_read_blocks+0x64>)
     eba:	4798      	blx	r3
     ebc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     ebe:	d002      	beq.n	ec6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     ec0:	0020      	movs	r0, r4
     ec2:	b002      	add	sp, #8
     ec4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     ec6:	4b14      	ldr	r3, [pc, #80]	; (f18 <sd_mmc_init_read_blocks+0x68>)
     ec8:	4798      	blx	r3
     eca:	2800      	cmp	r0, #0
     ecc:	d017      	beq.n	efe <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     ece:	2d01      	cmp	r5, #1
     ed0:	d919      	bls.n	f06 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     ed2:	4812      	ldr	r0, [pc, #72]	; (f1c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     ed4:	4b12      	ldr	r3, [pc, #72]	; (f20 <sd_mmc_init_read_blocks+0x70>)
     ed6:	681b      	ldr	r3, [r3, #0]
     ed8:	7bdb      	ldrb	r3, [r3, #15]
     eda:	071b      	lsls	r3, r3, #28
     edc:	d400      	bmi.n	ee0 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     ede:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ee0:	2301      	movs	r3, #1
     ee2:	9300      	str	r3, [sp, #0]
     ee4:	002b      	movs	r3, r5
     ee6:	2280      	movs	r2, #128	; 0x80
     ee8:	0092      	lsls	r2, r2, #2
     eea:	0031      	movs	r1, r6
     eec:	4e0d      	ldr	r6, [pc, #52]	; (f24 <sd_mmc_init_read_blocks+0x74>)
     eee:	47b0      	blx	r6
     ef0:	2800      	cmp	r0, #0
     ef2:	d00a      	beq.n	f0a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     ef4:	4b0c      	ldr	r3, [pc, #48]	; (f28 <sd_mmc_init_read_blocks+0x78>)
     ef6:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     ef8:	4b0c      	ldr	r3, [pc, #48]	; (f2c <sd_mmc_init_read_blocks+0x7c>)
     efa:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     efc:	e7e0      	b.n	ec0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     efe:	4b0c      	ldr	r3, [pc, #48]	; (f30 <sd_mmc_init_read_blocks+0x80>)
     f00:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f02:	3405      	adds	r4, #5
     f04:	e7dc      	b.n	ec0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     f06:	480b      	ldr	r0, [pc, #44]	; (f34 <sd_mmc_init_read_blocks+0x84>)
     f08:	e7e4      	b.n	ed4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     f0a:	4b09      	ldr	r3, [pc, #36]	; (f30 <sd_mmc_init_read_blocks+0x80>)
     f0c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f0e:	2405      	movs	r4, #5
     f10:	e7d6      	b.n	ec0 <sd_mmc_init_read_blocks+0x10>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	000007a1 	.word	0x000007a1
     f18:	000008ed 	.word	0x000008ed
     f1c:	00101112 	.word	0x00101112
     f20:	200001a8 	.word	0x200001a8
     f24:	000081ad 	.word	0x000081ad
     f28:	200001ac 	.word	0x200001ac
     f2c:	200001ae 	.word	0x200001ae
     f30:	00000971 	.word	0x00000971
     f34:	00081111 	.word	0x00081111

00000f38 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     f38:	b510      	push	{r4, lr}
     f3a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     f3c:	4b07      	ldr	r3, [pc, #28]	; (f5c <sd_mmc_start_read_blocks+0x24>)
     f3e:	4798      	blx	r3
     f40:	2800      	cmp	r0, #0
     f42:	d104      	bne.n	f4e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     f44:	2200      	movs	r2, #0
     f46:	4b06      	ldr	r3, [pc, #24]	; (f60 <sd_mmc_start_read_blocks+0x28>)
     f48:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     f4a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     f4c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     f4e:	4a04      	ldr	r2, [pc, #16]	; (f60 <sd_mmc_start_read_blocks+0x28>)
     f50:	8813      	ldrh	r3, [r2, #0]
     f52:	1b1c      	subs	r4, r3, r4
     f54:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     f56:	2000      	movs	r0, #0
     f58:	e7f8      	b.n	f4c <sd_mmc_start_read_blocks+0x14>
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	000083d9 	.word	0x000083d9
     f60:	200001ac 	.word	0x200001ac

00000f64 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     f64:	b510      	push	{r4, lr}
     f66:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     f68:	4b14      	ldr	r3, [pc, #80]	; (fbc <sd_mmc_wait_end_of_read_blocks+0x58>)
     f6a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f6c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     f6e:	2800      	cmp	r0, #0
     f70:	d101      	bne.n	f76 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     f72:	0018      	movs	r0, r3
     f74:	bd10      	pop	{r4, pc}
	if (abort) {
     f76:	2c00      	cmp	r4, #0
     f78:	d010      	beq.n	f9c <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     f7a:	2200      	movs	r2, #0
     f7c:	4b10      	ldr	r3, [pc, #64]	; (fc0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f7e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     f80:	4b10      	ldr	r3, [pc, #64]	; (fc4 <sd_mmc_wait_end_of_read_blocks+0x60>)
     f82:	881b      	ldrh	r3, [r3, #0]
     f84:	2b01      	cmp	r3, #1
     f86:	d00f      	beq.n	fa8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     f88:	2100      	movs	r1, #0
     f8a:	480f      	ldr	r0, [pc, #60]	; (fc8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f8c:	4b0f      	ldr	r3, [pc, #60]	; (fcc <sd_mmc_wait_end_of_read_blocks+0x68>)
     f8e:	4798      	blx	r3
     f90:	2800      	cmp	r0, #0
     f92:	d00d      	beq.n	fb0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     f94:	4b0e      	ldr	r3, [pc, #56]	; (fd0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f96:	4798      	blx	r3
	return SD_MMC_OK;
     f98:	2300      	movs	r3, #0
     f9a:	e7ea      	b.n	f72 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     f9c:	4b08      	ldr	r3, [pc, #32]	; (fc0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f9e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     fa0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     fa2:	2a00      	cmp	r2, #0
     fa4:	d0ec      	beq.n	f80 <sd_mmc_wait_end_of_read_blocks+0x1c>
     fa6:	e7e4      	b.n	f72 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     fa8:	4b09      	ldr	r3, [pc, #36]	; (fd0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
     faa:	4798      	blx	r3
		return SD_MMC_OK;
     fac:	2300      	movs	r3, #0
     fae:	e7e0      	b.n	f72 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     fb0:	2100      	movs	r1, #0
     fb2:	4805      	ldr	r0, [pc, #20]	; (fc8 <sd_mmc_wait_end_of_read_blocks+0x64>)
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <sd_mmc_wait_end_of_read_blocks+0x68>)
     fb6:	4798      	blx	r3
     fb8:	e7ec      	b.n	f94 <sd_mmc_wait_end_of_read_blocks+0x30>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00008465 	.word	0x00008465
     fc0:	200001ac 	.word	0x200001ac
     fc4:	200001ae 	.word	0x200001ae
     fc8:	0000310c 	.word	0x0000310c
     fcc:	0000833d 	.word	0x0000833d
     fd0:	00000971 	.word	0x00000971

00000fd4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	b082      	sub	sp, #8
     fd8:	000e      	movs	r6, r1
     fda:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     fdc:	4b11      	ldr	r3, [pc, #68]	; (1024 <sd_mmc_init_write_blocks+0x50>)
     fde:	4798      	blx	r3
     fe0:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     fe2:	d116      	bne.n	1012 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     fe4:	2d01      	cmp	r5, #1
     fe6:	d917      	bls.n	1018 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     fe8:	480f      	ldr	r0, [pc, #60]	; (1028 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     fea:	4b10      	ldr	r3, [pc, #64]	; (102c <sd_mmc_init_write_blocks+0x58>)
     fec:	681b      	ldr	r3, [r3, #0]
     fee:	7bdb      	ldrb	r3, [r3, #15]
     ff0:	071b      	lsls	r3, r3, #28
     ff2:	d400      	bmi.n	ff6 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     ff4:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ff6:	2301      	movs	r3, #1
     ff8:	9300      	str	r3, [sp, #0]
     ffa:	002b      	movs	r3, r5
     ffc:	2280      	movs	r2, #128	; 0x80
     ffe:	0092      	lsls	r2, r2, #2
    1000:	0031      	movs	r1, r6
    1002:	4e0b      	ldr	r6, [pc, #44]	; (1030 <sd_mmc_init_write_blocks+0x5c>)
    1004:	47b0      	blx	r6
    1006:	2800      	cmp	r0, #0
    1008:	d008      	beq.n	101c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    100a:	4b0a      	ldr	r3, [pc, #40]	; (1034 <sd_mmc_init_write_blocks+0x60>)
    100c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    100e:	4b0a      	ldr	r3, [pc, #40]	; (1038 <sd_mmc_init_write_blocks+0x64>)
    1010:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    1012:	0020      	movs	r0, r4
    1014:	b002      	add	sp, #8
    1016:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1018:	4808      	ldr	r0, [pc, #32]	; (103c <sd_mmc_init_write_blocks+0x68>)
    101a:	e7e6      	b.n	fea <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    101c:	4b08      	ldr	r3, [pc, #32]	; (1040 <sd_mmc_init_write_blocks+0x6c>)
    101e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1020:	2405      	movs	r4, #5
    1022:	e7f6      	b.n	1012 <sd_mmc_init_write_blocks+0x3e>
    1024:	000007a1 	.word	0x000007a1
    1028:	00109119 	.word	0x00109119
    102c:	200001a8 	.word	0x200001a8
    1030:	000081ad 	.word	0x000081ad
    1034:	200001ac 	.word	0x200001ac
    1038:	200001ae 	.word	0x200001ae
    103c:	00089118 	.word	0x00089118
    1040:	00000971 	.word	0x00000971

00001044 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1044:	b510      	push	{r4, lr}
    1046:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1048:	4b07      	ldr	r3, [pc, #28]	; (1068 <sd_mmc_start_write_blocks+0x24>)
    104a:	4798      	blx	r3
    104c:	2800      	cmp	r0, #0
    104e:	d104      	bne.n	105a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    1050:	2200      	movs	r2, #0
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <sd_mmc_start_write_blocks+0x28>)
    1054:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1056:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1058:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    105a:	4a04      	ldr	r2, [pc, #16]	; (106c <sd_mmc_start_write_blocks+0x28>)
    105c:	8813      	ldrh	r3, [r2, #0]
    105e:	1b1c      	subs	r4, r3, r4
    1060:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    1062:	2000      	movs	r0, #0
    1064:	e7f8      	b.n	1058 <sd_mmc_start_write_blocks+0x14>
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00008469 	.word	0x00008469
    106c:	200001ac 	.word	0x200001ac

00001070 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1070:	b510      	push	{r4, lr}
    1072:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1074:	4b0e      	ldr	r3, [pc, #56]	; (10b0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    1076:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1078:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    107a:	2800      	cmp	r0, #0
    107c:	d101      	bne.n	1082 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    107e:	0018      	movs	r0, r3
    1080:	bd10      	pop	{r4, pc}
	if (abort) {
    1082:	2c00      	cmp	r4, #0
    1084:	d00a      	beq.n	109c <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1086:	2200      	movs	r2, #0
    1088:	4b0a      	ldr	r3, [pc, #40]	; (10b4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    108a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    108c:	4b0a      	ldr	r3, [pc, #40]	; (10b8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    108e:	881b      	ldrh	r3, [r3, #0]
    1090:	2b01      	cmp	r3, #1
    1092:	d009      	beq.n	10a8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1096:	4798      	blx	r3
	return SD_MMC_OK;
    1098:	2300      	movs	r3, #0
    109a:	e7f0      	b.n	107e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    109c:	4b05      	ldr	r3, [pc, #20]	; (10b4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    109e:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    10a0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    10a2:	2a00      	cmp	r2, #0
    10a4:	d0f2      	beq.n	108c <sd_mmc_wait_end_of_write_blocks+0x1c>
    10a6:	e7ea      	b.n	107e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    10a8:	4b04      	ldr	r3, [pc, #16]	; (10bc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    10aa:	4798      	blx	r3
		return SD_MMC_OK;
    10ac:	2300      	movs	r3, #0
    10ae:	e7e6      	b.n	107e <sd_mmc_wait_end_of_write_blocks+0xe>
    10b0:	000084e9 	.word	0x000084e9
    10b4:	200001ac 	.word	0x200001ac
    10b8:	200001ae 	.word	0x200001ae
    10bc:	00000971 	.word	0x00000971

000010c0 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
    10c0:	2000      	movs	r0, #0
    10c2:	4770      	bx	lr

000010c4 <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
    10c4:	b510      	push	{r4, lr}
    10c6:	b082      	sub	sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
    10c8:	4b08      	ldr	r3, [pc, #32]	; (10ec <udi_msc_cbw_wait+0x28>)
    10ca:	9300      	str	r3, [sp, #0]
    10cc:	231f      	movs	r3, #31
    10ce:	4a08      	ldr	r2, [pc, #32]	; (10f0 <udi_msc_cbw_wait+0x2c>)
    10d0:	2101      	movs	r1, #1
    10d2:	2002      	movs	r0, #2
    10d4:	4c07      	ldr	r4, [pc, #28]	; (10f4 <udi_msc_cbw_wait+0x30>)
    10d6:	47a0      	blx	r4
    10d8:	2800      	cmp	r0, #0
    10da:	d001      	beq.n	10e0 <udi_msc_cbw_wait+0x1c>
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
	}
}
    10dc:	b002      	add	sp, #8
    10de:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
    10e0:	4905      	ldr	r1, [pc, #20]	; (10f8 <udi_msc_cbw_wait+0x34>)
    10e2:	3002      	adds	r0, #2
    10e4:	4b05      	ldr	r3, [pc, #20]	; (10fc <udi_msc_cbw_wait+0x38>)
    10e6:	4798      	blx	r3
}
    10e8:	e7f8      	b.n	10dc <udi_msc_cbw_wait+0x18>
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	000014e9 	.word	0x000014e9
    10f0:	200001d8 	.word	0x200001d8
    10f4:	00003749 	.word	0x00003749
    10f8:	000010c5 	.word	0x000010c5
    10fc:	000036f1 	.word	0x000036f1

00001100 <udi_msc_enable>:
{
    1100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udi_msc_b_trans_req = false;
    1102:	2300      	movs	r3, #0
    1104:	4a13      	ldr	r2, [pc, #76]	; (1154 <udi_msc_enable+0x54>)
    1106:	7013      	strb	r3, [r2, #0]
	udi_msc_b_cbw_invalid = false;
    1108:	4a13      	ldr	r2, [pc, #76]	; (1158 <udi_msc_enable+0x58>)
    110a:	7013      	strb	r3, [r2, #0]
	udi_msc_b_ack_trans = true;
    110c:	3301      	adds	r3, #1
    110e:	4a13      	ldr	r2, [pc, #76]	; (115c <udi_msc_enable+0x5c>)
    1110:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1112:	4a13      	ldr	r2, [pc, #76]	; (1160 <udi_msc_enable+0x60>)
    1114:	7013      	strb	r3, [r2, #0]
	udi_msc_nb_lun = get_nb_lun();
    1116:	4b13      	ldr	r3, [pc, #76]	; (1164 <udi_msc_enable+0x64>)
    1118:	4798      	blx	r3
	if (0 == udi_msc_nb_lun)
    111a:	2800      	cmp	r0, #0
    111c:	d105      	bne.n	112a <udi_msc_enable+0x2a>
	udi_msc_nb_lun = get_nb_lun();
    111e:	2200      	movs	r2, #0
    1120:	4b11      	ldr	r3, [pc, #68]	; (1168 <udi_msc_enable+0x68>)
    1122:	701a      	strb	r2, [r3, #0]
		return false; // No lun available, then not authorize to enable interface
    1124:	2500      	movs	r5, #0
}
    1126:	0028      	movs	r0, r5
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udi_msc_nb_lun--;
    112a:	3801      	subs	r0, #1
    112c:	4b0e      	ldr	r3, [pc, #56]	; (1168 <udi_msc_enable+0x68>)
    112e:	7018      	strb	r0, [r3, #0]
	if (!UDI_MSC_ENABLE_EXT())
    1130:	4b0e      	ldr	r3, [pc, #56]	; (116c <udi_msc_enable+0x6c>)
    1132:	4798      	blx	r3
    1134:	1e05      	subs	r5, r0, #0
    1136:	d0f6      	beq.n	1126 <udi_msc_enable+0x26>
    1138:	2400      	movs	r4, #0
		mem_unload(lun, false);
    113a:	4f0d      	ldr	r7, [pc, #52]	; (1170 <udi_msc_enable+0x70>)
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    113c:	4e0a      	ldr	r6, [pc, #40]	; (1168 <udi_msc_enable+0x68>)
		mem_unload(lun, false);
    113e:	2100      	movs	r1, #0
    1140:	0020      	movs	r0, r4
    1142:	47b8      	blx	r7
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
    1144:	3401      	adds	r4, #1
    1146:	b2e4      	uxtb	r4, r4
    1148:	7833      	ldrb	r3, [r6, #0]
    114a:	42a3      	cmp	r3, r4
    114c:	d2f7      	bcs.n	113e <udi_msc_enable+0x3e>
	udi_msc_cbw_wait();
    114e:	4b09      	ldr	r3, [pc, #36]	; (1174 <udi_msc_enable+0x74>)
    1150:	4798      	blx	r3
	return true;
    1152:	e7e8      	b.n	1126 <udi_msc_enable+0x26>
    1154:	200001ce 	.word	0x200001ce
    1158:	200001cc 	.word	0x200001cc
    115c:	20000044 	.word	0x20000044
    1160:	20000045 	.word	0x20000045
    1164:	0000850d 	.word	0x0000850d
    1168:	200001fc 	.word	0x200001fc
    116c:	00005da9 	.word	0x00005da9
    1170:	0000854d 	.word	0x0000854d
    1174:	000010c5 	.word	0x000010c5

00001178 <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    1178:	b510      	push	{r4, lr}
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
    117a:	4b01      	ldr	r3, [pc, #4]	; (1180 <udi_msc_csw_sent+0x8>)
    117c:	4798      	blx	r3
}
    117e:	bd10      	pop	{r4, pc}
    1180:	000010c5 	.word	0x000010c5

00001184 <udi_msc_csw_send>:
{
    1184:	b510      	push	{r4, lr}
    1186:	b082      	sub	sp, #8
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
    1188:	4b08      	ldr	r3, [pc, #32]	; (11ac <udi_msc_csw_send+0x28>)
    118a:	9300      	str	r3, [sp, #0]
    118c:	230d      	movs	r3, #13
    118e:	4a08      	ldr	r2, [pc, #32]	; (11b0 <udi_msc_csw_send+0x2c>)
    1190:	2100      	movs	r1, #0
    1192:	2081      	movs	r0, #129	; 0x81
    1194:	4c07      	ldr	r4, [pc, #28]	; (11b4 <udi_msc_csw_send+0x30>)
    1196:	47a0      	blx	r4
    1198:	2800      	cmp	r0, #0
    119a:	d001      	beq.n	11a0 <udi_msc_csw_send+0x1c>
}
    119c:	b002      	add	sp, #8
    119e:	bd10      	pop	{r4, pc}
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
    11a0:	4905      	ldr	r1, [pc, #20]	; (11b8 <udi_msc_csw_send+0x34>)
    11a2:	3081      	adds	r0, #129	; 0x81
    11a4:	4b05      	ldr	r3, [pc, #20]	; (11bc <udi_msc_csw_send+0x38>)
    11a6:	4798      	blx	r3
}
    11a8:	e7f8      	b.n	119c <udi_msc_csw_send+0x18>
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	00001179 	.word	0x00001179
    11b0:	20000048 	.word	0x20000048
    11b4:	00003749 	.word	0x00003749
    11b8:	00001185 	.word	0x00001185
    11bc:	000036f1 	.word	0x000036f1

000011c0 <udi_msc_cbw_invalid>:
{
    11c0:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    11c2:	4b06      	ldr	r3, [pc, #24]	; (11dc <udi_msc_cbw_invalid+0x1c>)
    11c4:	781b      	ldrb	r3, [r3, #0]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d100      	bne.n	11cc <udi_msc_cbw_invalid+0xc>
}
    11ca:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_OUT);
    11cc:	2002      	movs	r0, #2
    11ce:	4b04      	ldr	r3, [pc, #16]	; (11e0 <udi_msc_cbw_invalid+0x20>)
    11d0:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
    11d2:	4904      	ldr	r1, [pc, #16]	; (11e4 <udi_msc_cbw_invalid+0x24>)
    11d4:	2002      	movs	r0, #2
    11d6:	4b04      	ldr	r3, [pc, #16]	; (11e8 <udi_msc_cbw_invalid+0x28>)
    11d8:	4798      	blx	r3
    11da:	e7f6      	b.n	11ca <udi_msc_cbw_invalid+0xa>
    11dc:	200001cc 	.word	0x200001cc
    11e0:	0000357d 	.word	0x0000357d
    11e4:	000011c1 	.word	0x000011c1
    11e8:	000036f1 	.word	0x000036f1

000011ec <udi_msc_csw_invalid>:
{
    11ec:	b510      	push	{r4, lr}
	if (!udi_msc_b_cbw_invalid)
    11ee:	4b06      	ldr	r3, [pc, #24]	; (1208 <udi_msc_csw_invalid+0x1c>)
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d100      	bne.n	11f8 <udi_msc_csw_invalid+0xc>
}
    11f6:	bd10      	pop	{r4, pc}
	udd_ep_set_halt(UDI_MSC_EP_IN);
    11f8:	2081      	movs	r0, #129	; 0x81
    11fa:	4b04      	ldr	r3, [pc, #16]	; (120c <udi_msc_csw_invalid+0x20>)
    11fc:	4798      	blx	r3
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
    11fe:	4904      	ldr	r1, [pc, #16]	; (1210 <udi_msc_csw_invalid+0x24>)
    1200:	2081      	movs	r0, #129	; 0x81
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <udi_msc_csw_invalid+0x28>)
    1204:	4798      	blx	r3
    1206:	e7f6      	b.n	11f6 <udi_msc_csw_invalid+0xa>
    1208:	200001cc 	.word	0x200001cc
    120c:	0000357d 	.word	0x0000357d
    1210:	000011ed 	.word	0x000011ed
    1214:	000036f1 	.word	0x000036f1

00001218 <udi_msc_csw_process>:
{
    1218:	b510      	push	{r4, lr}
	if (0 != udi_msc_csw.dCSWDataResidue) {
    121a:	4b0b      	ldr	r3, [pc, #44]	; (1248 <udi_msc_csw_process+0x30>)
    121c:	689b      	ldr	r3, [r3, #8]
    121e:	2b00      	cmp	r3, #0
    1220:	d006      	beq.n	1230 <udi_msc_csw_process+0x18>
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <udi_msc_csw_process+0x34>)
    1224:	7b1b      	ldrb	r3, [r3, #12]
    1226:	2b7f      	cmp	r3, #127	; 0x7f
    1228:	d809      	bhi.n	123e <udi_msc_csw_process+0x26>
			udd_ep_set_halt(UDI_MSC_EP_OUT);
    122a:	2002      	movs	r0, #2
    122c:	4b08      	ldr	r3, [pc, #32]	; (1250 <udi_msc_csw_process+0x38>)
    122e:	4798      	blx	r3
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
    1230:	4b06      	ldr	r3, [pc, #24]	; (124c <udi_msc_csw_process+0x34>)
    1232:	685a      	ldr	r2, [r3, #4]
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <udi_msc_csw_process+0x30>)
    1236:	605a      	str	r2, [r3, #4]
	udi_msc_csw_send();
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <udi_msc_csw_process+0x3c>)
    123a:	4798      	blx	r3
}
    123c:	bd10      	pop	{r4, pc}
			udd_ep_set_halt(UDI_MSC_EP_IN);
    123e:	2081      	movs	r0, #129	; 0x81
    1240:	4b03      	ldr	r3, [pc, #12]	; (1250 <udi_msc_csw_process+0x38>)
    1242:	4798      	blx	r3
    1244:	e7f4      	b.n	1230 <udi_msc_csw_process+0x18>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	20000048 	.word	0x20000048
    124c:	200001d8 	.word	0x200001d8
    1250:	0000357d 	.word	0x0000357d
    1254:	00001185 	.word	0x00001185

00001258 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
    1258:	b510      	push	{r4, lr}
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    125a:	4c05      	ldr	r4, [pc, #20]	; (1270 <udi_msc_clear_sense+0x18>)
    125c:	2212      	movs	r2, #18
    125e:	2100      	movs	r1, #0
    1260:	0020      	movs	r0, r4
    1262:	4b04      	ldr	r3, [pc, #16]	; (1274 <udi_msc_clear_sense+0x1c>)
    1264:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    1266:	23f0      	movs	r3, #240	; 0xf0
    1268:	7023      	strb	r3, [r4, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    126a:	3be6      	subs	r3, #230	; 0xe6
    126c:	71e3      	strb	r3, [r4, #7]
}
    126e:	bd10      	pop	{r4, pc}
    1270:	20000200 	.word	0x20000200
    1274:	00009173 	.word	0x00009173

00001278 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    1278:	b570      	push	{r4, r5, r6, lr}
    127a:	0006      	movs	r6, r0
    127c:	000d      	movs	r5, r1
    127e:	0014      	movs	r4, r2
	udi_msc_clear_sense();
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <udi_msc_sense_fail+0x2c>)
    1282:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    1284:	2201      	movs	r2, #1
    1286:	4b08      	ldr	r3, [pc, #32]	; (12a8 <udi_msc_sense_fail+0x30>)
    1288:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
    128a:	4b08      	ldr	r3, [pc, #32]	; (12ac <udi_msc_sense_fail+0x34>)
    128c:	709e      	strb	r6, [r3, #2]
	udi_msc_sense.information[0] = lba >> 24;
    128e:	0e22      	lsrs	r2, r4, #24
    1290:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
    1292:	0c22      	lsrs	r2, r4, #16
    1294:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
    1296:	0a22      	lsrs	r2, r4, #8
    1298:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
    129a:	719c      	strb	r4, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    129c:	0a2a      	lsrs	r2, r5, #8
    129e:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    12a0:	735d      	strb	r5, [r3, #13]
}
    12a2:	bd70      	pop	{r4, r5, r6, pc}
    12a4:	00001259 	.word	0x00001259
    12a8:	20000048 	.word	0x20000048
    12ac:	20000200 	.word	0x20000200

000012b0 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
    12b0:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    12b2:	2200      	movs	r2, #0
    12b4:	2190      	movs	r1, #144	; 0x90
    12b6:	0189      	lsls	r1, r1, #6
    12b8:	2005      	movs	r0, #5
    12ba:	4b01      	ldr	r3, [pc, #4]	; (12c0 <udi_msc_sense_fail_cdb_invalid+0x10>)
    12bc:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
    12be:	bd10      	pop	{r4, pc}
    12c0:	00001279 	.word	0x00001279

000012c4 <udi_msc_cbw_validate>:
{
    12c4:	b510      	push	{r4, lr}
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    12c6:	4b09      	ldr	r3, [pc, #36]	; (12ec <udi_msc_cbw_validate+0x28>)
    12c8:	7b1b      	ldrb	r3, [r3, #12]
    12ca:	4059      	eors	r1, r3
    12cc:	b249      	sxtb	r1, r1
    12ce:	2900      	cmp	r1, #0
    12d0:	db04      	blt.n	12dc <udi_msc_cbw_validate+0x18>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    12d2:	4b07      	ldr	r3, [pc, #28]	; (12f0 <udi_msc_cbw_validate+0x2c>)
    12d4:	689a      	ldr	r2, [r3, #8]
	return true;
    12d6:	2301      	movs	r3, #1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    12d8:	4282      	cmp	r2, r0
    12da:	d204      	bcs.n	12e6 <udi_msc_cbw_validate+0x22>
		udi_msc_sense_fail_cdb_invalid();
    12dc:	4b05      	ldr	r3, [pc, #20]	; (12f4 <udi_msc_cbw_validate+0x30>)
    12de:	4798      	blx	r3
		udi_msc_csw_process();
    12e0:	4b05      	ldr	r3, [pc, #20]	; (12f8 <udi_msc_cbw_validate+0x34>)
    12e2:	4798      	blx	r3
		return false;
    12e4:	2300      	movs	r3, #0
}
    12e6:	0018      	movs	r0, r3
    12e8:	bd10      	pop	{r4, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	200001d8 	.word	0x200001d8
    12f0:	20000048 	.word	0x20000048
    12f4:	000012b1 	.word	0x000012b1
    12f8:	00001219 	.word	0x00001219

000012fc <udi_msc_sense_fail_hardware>:
{
    12fc:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    12fe:	2200      	movs	r2, #0
    1300:	2100      	movs	r1, #0
    1302:	2004      	movs	r0, #4
    1304:	4b01      	ldr	r3, [pc, #4]	; (130c <udi_msc_sense_fail_hardware+0x10>)
    1306:	4798      	blx	r3
}
    1308:	bd10      	pop	{r4, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	00001279 	.word	0x00001279

00001310 <udi_msc_data_send>:
{
    1310:	b510      	push	{r4, lr}
    1312:	b082      	sub	sp, #8
    1314:	0002      	movs	r2, r0
    1316:	000b      	movs	r3, r1
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    1318:	4907      	ldr	r1, [pc, #28]	; (1338 <udi_msc_data_send+0x28>)
    131a:	9100      	str	r1, [sp, #0]
    131c:	2101      	movs	r1, #1
    131e:	2081      	movs	r0, #129	; 0x81
    1320:	4c06      	ldr	r4, [pc, #24]	; (133c <udi_msc_data_send+0x2c>)
    1322:	47a0      	blx	r4
    1324:	2800      	cmp	r0, #0
    1326:	d001      	beq.n	132c <udi_msc_data_send+0x1c>
}
    1328:	b002      	add	sp, #8
    132a:	bd10      	pop	{r4, pc}
		udi_msc_sense_fail_hardware();
    132c:	4b04      	ldr	r3, [pc, #16]	; (1340 <udi_msc_data_send+0x30>)
    132e:	4798      	blx	r3
		udi_msc_csw_process();
    1330:	4b04      	ldr	r3, [pc, #16]	; (1344 <udi_msc_data_send+0x34>)
    1332:	4798      	blx	r3
}
    1334:	e7f8      	b.n	1328 <udi_msc_data_send+0x18>
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	00001389 	.word	0x00001389
    133c:	00003749 	.word	0x00003749
    1340:	000012fd 	.word	0x000012fd
    1344:	00001219 	.word	0x00001219

00001348 <udi_msc_sense_fail_busy_or_change>:
{
    1348:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    134a:	2200      	movs	r2, #0
    134c:	21a0      	movs	r1, #160	; 0xa0
    134e:	0189      	lsls	r1, r1, #6
    1350:	2006      	movs	r0, #6
    1352:	4b01      	ldr	r3, [pc, #4]	; (1358 <udi_msc_sense_fail_busy_or_change+0x10>)
    1354:	4798      	blx	r3
}
    1356:	bd10      	pop	{r4, pc}
    1358:	00001279 	.word	0x00001279

0000135c <udi_msc_sense_fail_not_present>:
{
    135c:	b510      	push	{r4, lr}
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    135e:	2200      	movs	r2, #0
    1360:	21e8      	movs	r1, #232	; 0xe8
    1362:	0189      	lsls	r1, r1, #6
    1364:	2002      	movs	r0, #2
    1366:	4b01      	ldr	r3, [pc, #4]	; (136c <udi_msc_sense_fail_not_present+0x10>)
    1368:	4798      	blx	r3
}
    136a:	bd10      	pop	{r4, pc}
    136c:	00001279 	.word	0x00001279

00001370 <udi_msc_sense_pass>:
{
    1370:	b510      	push	{r4, lr}
	udi_msc_clear_sense();
    1372:	4b03      	ldr	r3, [pc, #12]	; (1380 <udi_msc_sense_pass+0x10>)
    1374:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1376:	2200      	movs	r2, #0
    1378:	4b02      	ldr	r3, [pc, #8]	; (1384 <udi_msc_sense_pass+0x14>)
    137a:	731a      	strb	r2, [r3, #12]
}
    137c:	bd10      	pop	{r4, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	00001259 	.word	0x00001259
    1384:	20000048 	.word	0x20000048

00001388 <udi_msc_data_sent>:
{
    1388:	b510      	push	{r4, lr}
    138a:	000c      	movs	r4, r1
	if (UDD_EP_TRANSFER_OK != status) {
    138c:	2800      	cmp	r0, #0
    138e:	d000      	beq.n	1392 <udi_msc_data_sent+0xa>
}
    1390:	bd10      	pop	{r4, pc}
	udi_msc_sense_pass();
    1392:	4b04      	ldr	r3, [pc, #16]	; (13a4 <udi_msc_data_sent+0x1c>)
    1394:	4798      	blx	r3
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    1396:	4b04      	ldr	r3, [pc, #16]	; (13a8 <udi_msc_data_sent+0x20>)
    1398:	689a      	ldr	r2, [r3, #8]
    139a:	1b14      	subs	r4, r2, r4
    139c:	609c      	str	r4, [r3, #8]
	udi_msc_csw_process();
    139e:	4b03      	ldr	r3, [pc, #12]	; (13ac <udi_msc_data_sent+0x24>)
    13a0:	4798      	blx	r3
    13a2:	e7f5      	b.n	1390 <udi_msc_data_sent+0x8>
    13a4:	00001371 	.word	0x00001371
    13a8:	20000048 	.word	0x20000048
    13ac:	00001219 	.word	0x00001219

000013b0 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	0005      	movs	r5, r0
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    13b4:	2214      	movs	r2, #20
    13b6:	2100      	movs	r1, #0
    13b8:	4823      	ldr	r0, [pc, #140]	; (1448 <udi_msc_spc_mode_sense+0x98>)
    13ba:	4b24      	ldr	r3, [pc, #144]	; (144c <udi_msc_spc_mode_sense+0x9c>)
    13bc:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
    13be:	2d00      	cmp	r5, #0
    13c0:	d018      	beq.n	13f4 <udi_msc_spc_mode_sense+0x44>
		request_lgt = udi_msc_cbw.CDB[8];
    13c2:	4b23      	ldr	r3, [pc, #140]	; (1450 <udi_msc_spc_mode_sense+0xa0>)
    13c4:	7dd9      	ldrb	r1, [r3, #23]
		ptr_mode = &sense.s10.sense_data;
    13c6:	4a20      	ldr	r2, [pc, #128]	; (1448 <udi_msc_spc_mode_sense+0x98>)
    13c8:	3208      	adds	r2, #8
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    13ca:	2408      	movs	r4, #8
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    13cc:	4b20      	ldr	r3, [pc, #128]	; (1450 <udi_msc_spc_mode_sense+0xa0>)
    13ce:	7c58      	ldrb	r0, [r3, #17]
    13d0:	233f      	movs	r3, #63	; 0x3f
    13d2:	4003      	ands	r3, r0
	if ((SCSI_MS_MODE_INFEXP == mode)
    13d4:	2b1c      	cmp	r3, #28
    13d6:	d013      	beq.n	1400 <udi_msc_spc_mode_sense+0x50>
			|| (SCSI_MS_MODE_ALL == mode)) {
    13d8:	2b3f      	cmp	r3, #63	; 0x3f
    13da:	d011      	beq.n	1400 <udi_msc_spc_mode_sense+0x50>
    13dc:	1c20      	adds	r0, r4, #0
    13de:	428c      	cmp	r4, r1
    13e0:	d900      	bls.n	13e4 <udi_msc_spc_mode_sense+0x34>
    13e2:	1c08      	adds	r0, r1, #0
    13e4:	b2c6      	uxtb	r6, r0
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    13e6:	2180      	movs	r1, #128	; 0x80
    13e8:	0030      	movs	r0, r6
    13ea:	4b1a      	ldr	r3, [pc, #104]	; (1454 <udi_msc_spc_mode_sense+0xa4>)
    13ec:	4798      	blx	r3
    13ee:	2800      	cmp	r0, #0
    13f0:	d10f      	bne.n	1412 <udi_msc_spc_mode_sense+0x62>
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
}
    13f2:	bd70      	pop	{r4, r5, r6, pc}
		request_lgt = udi_msc_cbw.CDB[4];
    13f4:	4b16      	ldr	r3, [pc, #88]	; (1450 <udi_msc_spc_mode_sense+0xa0>)
    13f6:	7cd9      	ldrb	r1, [r3, #19]
		ptr_mode = &sense.s6.sense_data;
    13f8:	4a13      	ldr	r2, [pc, #76]	; (1448 <udi_msc_spc_mode_sense+0x98>)
    13fa:	3204      	adds	r2, #4
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    13fc:	2404      	movs	r4, #4
    13fe:	e7e5      	b.n	13cc <udi_msc_spc_mode_sense+0x1c>
		ptr_mode->page_code =
    1400:	231c      	movs	r3, #28
    1402:	7013      	strb	r3, [r2, #0]
		ptr_mode->page_length =
    1404:	3b12      	subs	r3, #18
    1406:	7053      	strb	r3, [r2, #1]
		ptr_mode->mrie =
    1408:	3b05      	subs	r3, #5
    140a:	70d3      	strb	r3, [r2, #3]
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    140c:	340c      	adds	r4, #12
    140e:	b2e4      	uxtb	r4, r4
    1410:	e7e4      	b.n	13dc <udi_msc_spc_mode_sense+0x2c>
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    1412:	4b0f      	ldr	r3, [pc, #60]	; (1450 <udi_msc_spc_mode_sense+0xa0>)
    1414:	7b58      	ldrb	r0, [r3, #13]
    1416:	4b10      	ldr	r3, [pc, #64]	; (1458 <udi_msc_spc_mode_sense+0xa8>)
    1418:	4798      	blx	r3
    141a:	1e43      	subs	r3, r0, #1
    141c:	4198      	sbcs	r0, r3
    141e:	01c0      	lsls	r0, r0, #7
	if (b_sense10) {
    1420:	2d00      	cmp	r5, #0
    1422:	d00c      	beq.n	143e <udi_msc_spc_mode_sense+0x8e>
				cpu_to_be16((data_sense_lgt - 2));
    1424:	3c02      	subs	r4, #2
    1426:	b2a4      	uxth	r4, r4
		sense.s10.header.mode_data_length =
    1428:	4a07      	ldr	r2, [pc, #28]	; (1448 <udi_msc_spc_mode_sense+0x98>)
				cpu_to_be16((data_sense_lgt - 2));
    142a:	0a23      	lsrs	r3, r4, #8
    142c:	0224      	lsls	r4, r4, #8
    142e:	431c      	orrs	r4, r3
		sense.s10.header.mode_data_length =
    1430:	8014      	strh	r4, [r2, #0]
		sense.s10.header.device_specific_parameter = wp;
    1432:	70d0      	strb	r0, [r2, #3]
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    1434:	0031      	movs	r1, r6
    1436:	4804      	ldr	r0, [pc, #16]	; (1448 <udi_msc_spc_mode_sense+0x98>)
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <udi_msc_spc_mode_sense+0xac>)
    143a:	4798      	blx	r3
    143c:	e7d9      	b.n	13f2 <udi_msc_spc_mode_sense+0x42>
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    143e:	4b02      	ldr	r3, [pc, #8]	; (1448 <udi_msc_spc_mode_sense+0x98>)
    1440:	3c01      	subs	r4, #1
    1442:	701c      	strb	r4, [r3, #0]
		sense.s6.header.device_specific_parameter = wp;
    1444:	7098      	strb	r0, [r3, #2]
    1446:	e7f5      	b.n	1434 <udi_msc_spc_mode_sense+0x84>
    1448:	200001b4 	.word	0x200001b4
    144c:	00009173 	.word	0x00009173
    1450:	200001d8 	.word	0x200001d8
    1454:	000012c5 	.word	0x000012c5
    1458:	0000855d 	.word	0x0000855d
    145c:	00001311 	.word	0x00001311

00001460 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
    1460:	b510      	push	{r4, lr}
    1462:	1e04      	subs	r4, r0, #0
	uint32_t trans_size;

	if (!b_read) {
    1464:	d01e      	beq.n	14a4 <udi_msc_sbc_trans+0x44>
			udi_msc_csw_process();
			return;
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1466:	4a17      	ldr	r2, [pc, #92]	; (14c4 <udi_msc_sbc_trans+0x64>)
    1468:	4b17      	ldr	r3, [pc, #92]	; (14c8 <udi_msc_sbc_trans+0x68>)
    146a:	7c59      	ldrb	r1, [r3, #17]
    146c:	70d1      	strb	r1, [r2, #3]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    146e:	7c99      	ldrb	r1, [r3, #18]
    1470:	7091      	strb	r1, [r2, #2]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    1472:	7cd9      	ldrb	r1, [r3, #19]
    1474:	7051      	strb	r1, [r2, #1]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1476:	7d19      	ldrb	r1, [r3, #20]
    1478:	7011      	strb	r1, [r2, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    147a:	4a14      	ldr	r2, [pc, #80]	; (14cc <udi_msc_sbc_trans+0x6c>)
    147c:	7d99      	ldrb	r1, [r3, #22]
    147e:	7051      	strb	r1, [r2, #1]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    1480:	7ddb      	ldrb	r3, [r3, #23]
    1482:	7013      	strb	r3, [r2, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1484:	8810      	ldrh	r0, [r2, #0]
    1486:	0240      	lsls	r0, r0, #9
	if (!udi_msc_cbw_validate(trans_size,
    1488:	0021      	movs	r1, r4
    148a:	1e4b      	subs	r3, r1, #1
    148c:	4199      	sbcs	r1, r3
    148e:	01c9      	lsls	r1, r1, #7
    1490:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <udi_msc_sbc_trans+0x70>)
    1492:	4798      	blx	r3
    1494:	2800      	cmp	r0, #0
    1496:	d004      	beq.n	14a2 <udi_msc_sbc_trans+0x42>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    1498:	4b0e      	ldr	r3, [pc, #56]	; (14d4 <udi_msc_sbc_trans+0x74>)
    149a:	701c      	strb	r4, [r3, #0]
	udi_msc_b_trans_req = true;
    149c:	2201      	movs	r2, #1
    149e:	4b0e      	ldr	r3, [pc, #56]	; (14d8 <udi_msc_sbc_trans+0x78>)
    14a0:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    14a2:	bd10      	pop	{r4, pc}
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    14a4:	4b08      	ldr	r3, [pc, #32]	; (14c8 <udi_msc_sbc_trans+0x68>)
    14a6:	7b58      	ldrb	r0, [r3, #13]
    14a8:	4b0c      	ldr	r3, [pc, #48]	; (14dc <udi_msc_sbc_trans+0x7c>)
    14aa:	4798      	blx	r3
    14ac:	2800      	cmp	r0, #0
    14ae:	d0da      	beq.n	1466 <udi_msc_sbc_trans+0x6>
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    14b0:	2200      	movs	r2, #0
    14b2:	219c      	movs	r1, #156	; 0x9c
    14b4:	0189      	lsls	r1, r1, #6
    14b6:	2007      	movs	r0, #7
    14b8:	4b09      	ldr	r3, [pc, #36]	; (14e0 <udi_msc_sbc_trans+0x80>)
    14ba:	4798      	blx	r3
			udi_msc_csw_process();
    14bc:	4b09      	ldr	r3, [pc, #36]	; (14e4 <udi_msc_sbc_trans+0x84>)
    14be:	4798      	blx	r3
			return;
    14c0:	e7ef      	b.n	14a2 <udi_msc_sbc_trans+0x42>
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	200001c8 	.word	0x200001c8
    14c8:	200001d8 	.word	0x200001d8
    14cc:	200001f8 	.word	0x200001f8
    14d0:	000012c5 	.word	0x000012c5
    14d4:	200001cd 	.word	0x200001cd
    14d8:	200001ce 	.word	0x200001ce
    14dc:	0000855d 	.word	0x0000855d
    14e0:	00001279 	.word	0x00001279
    14e4:	00001219 	.word	0x00001219

000014e8 <udi_msc_cbw_received>:
{
    14e8:	b570      	push	{r4, r5, r6, lr}
	if (UDD_EP_TRANSFER_OK != status) {
    14ea:	2800      	cmp	r0, #0
    14ec:	d10d      	bne.n	150a <udi_msc_cbw_received+0x22>
	if ((sizeof(udi_msc_cbw) != nb_received)
    14ee:	291f      	cmp	r1, #31
    14f0:	d104      	bne.n	14fc <udi_msc_cbw_received+0x14>
			|| (udi_msc_cbw.dCBWSignature !=
    14f2:	4b84      	ldr	r3, [pc, #528]	; (1704 <udi_msc_cbw_received+0x21c>)
    14f4:	4a84      	ldr	r2, [pc, #528]	; (1708 <udi_msc_cbw_received+0x220>)
    14f6:	6812      	ldr	r2, [r2, #0]
    14f8:	429a      	cmp	r2, r3
    14fa:	d007      	beq.n	150c <udi_msc_cbw_received+0x24>
		udi_msc_b_cbw_invalid = true;
    14fc:	2201      	movs	r2, #1
    14fe:	4b83      	ldr	r3, [pc, #524]	; (170c <udi_msc_cbw_received+0x224>)
    1500:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
    1502:	4b83      	ldr	r3, [pc, #524]	; (1710 <udi_msc_cbw_received+0x228>)
    1504:	4798      	blx	r3
		udi_msc_csw_invalid();
    1506:	4b83      	ldr	r3, [pc, #524]	; (1714 <udi_msc_cbw_received+0x22c>)
    1508:	4798      	blx	r3
}
    150a:	bd70      	pop	{r4, r5, r6, pc}
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    150c:	4b7e      	ldr	r3, [pc, #504]	; (1708 <udi_msc_cbw_received+0x220>)
    150e:	7b58      	ldrb	r0, [r3, #13]
    1510:	220f      	movs	r2, #15
    1512:	4010      	ands	r0, r2
    1514:	7358      	strb	r0, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    1516:	4b80      	ldr	r3, [pc, #512]	; (1718 <udi_msc_cbw_received+0x230>)
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	4283      	cmp	r3, r0
    151c:	d30b      	bcc.n	1536 <udi_msc_cbw_received+0x4e>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    151e:	4b7a      	ldr	r3, [pc, #488]	; (1708 <udi_msc_cbw_received+0x220>)
	udi_msc_csw.dCSWDataResidue =
    1520:	4a7e      	ldr	r2, [pc, #504]	; (171c <udi_msc_cbw_received+0x234>)
    1522:	6899      	ldr	r1, [r3, #8]
    1524:	6091      	str	r1, [r2, #8]
	switch (udi_msc_cbw.CDB[0]) {
    1526:	7bda      	ldrb	r2, [r3, #15]
    1528:	2a5a      	cmp	r2, #90	; 0x5a
    152a:	d900      	bls.n	152e <udi_msc_cbw_received+0x46>
    152c:	e0d2      	b.n	16d4 <udi_msc_cbw_received+0x1ec>
    152e:	0093      	lsls	r3, r2, #2
    1530:	4a7b      	ldr	r2, [pc, #492]	; (1720 <udi_msc_cbw_received+0x238>)
    1532:	58d3      	ldr	r3, [r2, r3]
    1534:	469f      	mov	pc, r3
		udi_msc_sense_fail_cdb_invalid();
    1536:	4b7b      	ldr	r3, [pc, #492]	; (1724 <udi_msc_cbw_received+0x23c>)
    1538:	4798      	blx	r3
		udi_msc_csw_process();
    153a:	4b7b      	ldr	r3, [pc, #492]	; (1728 <udi_msc_cbw_received+0x240>)
    153c:	4798      	blx	r3
		return;
    153e:	e7e4      	b.n	150a <udi_msc_cbw_received+0x22>
	uint8_t length = udi_msc_cbw.CDB[4];
    1540:	4b71      	ldr	r3, [pc, #452]	; (1708 <udi_msc_cbw_received+0x220>)
    1542:	7cda      	ldrb	r2, [r3, #19]
    1544:	1c13      	adds	r3, r2, #0
    1546:	2a12      	cmp	r2, #18
    1548:	d900      	bls.n	154c <udi_msc_cbw_received+0x64>
    154a:	2312      	movs	r3, #18
    154c:	b2dc      	uxtb	r4, r3
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    154e:	2180      	movs	r1, #128	; 0x80
    1550:	0020      	movs	r0, r4
    1552:	4b76      	ldr	r3, [pc, #472]	; (172c <udi_msc_cbw_received+0x244>)
    1554:	4798      	blx	r3
    1556:	2800      	cmp	r0, #0
    1558:	d0d7      	beq.n	150a <udi_msc_cbw_received+0x22>
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    155a:	0021      	movs	r1, r4
    155c:	4874      	ldr	r0, [pc, #464]	; (1730 <udi_msc_cbw_received+0x248>)
    155e:	4b75      	ldr	r3, [pc, #468]	; (1734 <udi_msc_cbw_received+0x24c>)
    1560:	4798      	blx	r3
    1562:	e7d2      	b.n	150a <udi_msc_cbw_received+0x22>
	length = udi_msc_cbw.CDB[4];
    1564:	4b68      	ldr	r3, [pc, #416]	; (1708 <udi_msc_cbw_received+0x220>)
    1566:	7cdb      	ldrb	r3, [r3, #19]
    1568:	1c1a      	adds	r2, r3, #0
    156a:	2b24      	cmp	r3, #36	; 0x24
    156c:	d900      	bls.n	1570 <udi_msc_cbw_received+0x88>
    156e:	2224      	movs	r2, #36	; 0x24
    1570:	b2d4      	uxtb	r4, r2
	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1572:	2180      	movs	r1, #128	; 0x80
    1574:	0020      	movs	r0, r4
    1576:	4b6d      	ldr	r3, [pc, #436]	; (172c <udi_msc_cbw_received+0x244>)
    1578:	4798      	blx	r3
    157a:	2800      	cmp	r0, #0
    157c:	d0c5      	beq.n	150a <udi_msc_cbw_received+0x22>
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    157e:	4b62      	ldr	r3, [pc, #392]	; (1708 <udi_msc_cbw_received+0x220>)
    1580:	7c1b      	ldrb	r3, [r3, #16]
    1582:	079b      	lsls	r3, r3, #30
    1584:	d103      	bne.n	158e <udi_msc_cbw_received+0xa6>
			|| (0 != udi_msc_cbw.CDB[2])) {
    1586:	4b60      	ldr	r3, [pc, #384]	; (1708 <udi_msc_cbw_received+0x220>)
    1588:	7c5d      	ldrb	r5, [r3, #17]
    158a:	2d00      	cmp	r5, #0
    158c:	d004      	beq.n	1598 <udi_msc_cbw_received+0xb0>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    158e:	4b65      	ldr	r3, [pc, #404]	; (1724 <udi_msc_cbw_received+0x23c>)
    1590:	4798      	blx	r3
		udi_msc_csw_process();
    1592:	4b65      	ldr	r3, [pc, #404]	; (1728 <udi_msc_cbw_received+0x240>)
    1594:	4798      	blx	r3
    1596:	e7b8      	b.n	150a <udi_msc_cbw_received+0x22>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    1598:	4b5b      	ldr	r3, [pc, #364]	; (1708 <udi_msc_cbw_received+0x220>)
    159a:	7b58      	ldrb	r0, [r3, #13]
    159c:	4b66      	ldr	r3, [pc, #408]	; (1738 <udi_msc_cbw_received+0x250>)
    159e:	4798      	blx	r3
    15a0:	2380      	movs	r3, #128	; 0x80
    15a2:	2800      	cmp	r0, #0
    15a4:	d100      	bne.n	15a8 <udi_msc_cbw_received+0xc0>
    15a6:	002b      	movs	r3, r5
    15a8:	4e64      	ldr	r6, [pc, #400]	; (173c <udi_msc_cbw_received+0x254>)
    15aa:	7073      	strb	r3, [r6, #1]
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    15ac:	4b56      	ldr	r3, [pc, #344]	; (1708 <udi_msc_cbw_received+0x220>)
    15ae:	7b58      	ldrb	r0, [r3, #13]
    15b0:	4b63      	ldr	r3, [pc, #396]	; (1740 <udi_msc_cbw_received+0x258>)
    15b2:	4798      	blx	r3
    15b4:	0001      	movs	r1, r0
	memcpy(udi_msc_inquiry_data.product_id,
    15b6:	0030      	movs	r0, r6
    15b8:	3010      	adds	r0, #16
    15ba:	3101      	adds	r1, #1
    15bc:	2210      	movs	r2, #16
    15be:	4b61      	ldr	r3, [pc, #388]	; (1744 <udi_msc_cbw_received+0x25c>)
    15c0:	4798      	blx	r3
		if ((0 == udi_msc_inquiry_data.product_id[i])
    15c2:	7c33      	ldrb	r3, [r6, #16]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d100      	bne.n	15ca <udi_msc_cbw_received+0xe2>
    15c8:	e08e      	b.n	16e8 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    15ca:	2b22      	cmp	r3, #34	; 0x22
    15cc:	d100      	bne.n	15d0 <udi_msc_cbw_received+0xe8>
    15ce:	e08a      	b.n	16e6 <udi_msc_cbw_received+0x1fe>
    15d0:	495a      	ldr	r1, [pc, #360]	; (173c <udi_msc_cbw_received+0x254>)
		i++;
    15d2:	2301      	movs	r3, #1
		if ((0 == udi_msc_inquiry_data.product_id[i])
    15d4:	7c4a      	ldrb	r2, [r1, #17]
    15d6:	2a00      	cmp	r2, #0
    15d8:	d100      	bne.n	15dc <udi_msc_cbw_received+0xf4>
    15da:	e085      	b.n	16e8 <udi_msc_cbw_received+0x200>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    15dc:	2a22      	cmp	r2, #34	; 0x22
    15de:	d100      	bne.n	15e2 <udi_msc_cbw_received+0xfa>
    15e0:	e082      	b.n	16e8 <udi_msc_cbw_received+0x200>
		i++;
    15e2:	3301      	adds	r3, #1
    15e4:	b2db      	uxtb	r3, r3
    15e6:	3101      	adds	r1, #1
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    15e8:	2b10      	cmp	r3, #16
    15ea:	d1f3      	bne.n	15d4 <udi_msc_cbw_received+0xec>
    15ec:	e084      	b.n	16f8 <udi_msc_cbw_received+0x210>
		udi_msc_spc_mode_sense(false);
    15ee:	2000      	movs	r0, #0
    15f0:	4b55      	ldr	r3, [pc, #340]	; (1748 <udi_msc_cbw_received+0x260>)
    15f2:	4798      	blx	r3
		break;
    15f4:	e789      	b.n	150a <udi_msc_cbw_received+0x22>
		udi_msc_spc_mode_sense(true);
    15f6:	2001      	movs	r0, #1
    15f8:	4b53      	ldr	r3, [pc, #332]	; (1748 <udi_msc_cbw_received+0x260>)
    15fa:	4798      	blx	r3
		break;
    15fc:	e785      	b.n	150a <udi_msc_cbw_received+0x22>
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    15fe:	4b53      	ldr	r3, [pc, #332]	; (174c <udi_msc_cbw_received+0x264>)
    1600:	4798      	blx	r3
    1602:	2802      	cmp	r0, #2
    1604:	d009      	beq.n	161a <udi_msc_cbw_received+0x132>
    1606:	2803      	cmp	r0, #3
    1608:	d004      	beq.n	1614 <udi_msc_cbw_received+0x12c>
    160a:	2800      	cmp	r0, #0
    160c:	d008      	beq.n	1620 <udi_msc_cbw_received+0x138>
		udi_msc_sense_fail_hardware();
    160e:	4b50      	ldr	r3, [pc, #320]	; (1750 <udi_msc_cbw_received+0x268>)
    1610:	4798      	blx	r3
    1612:	e007      	b.n	1624 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_busy_or_change();
    1614:	4b4f      	ldr	r3, [pc, #316]	; (1754 <udi_msc_cbw_received+0x26c>)
    1616:	4798      	blx	r3
    1618:	e004      	b.n	1624 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_fail_not_present();
    161a:	4b4f      	ldr	r3, [pc, #316]	; (1758 <udi_msc_cbw_received+0x270>)
    161c:	4798      	blx	r3
    161e:	e001      	b.n	1624 <udi_msc_cbw_received+0x13c>
		udi_msc_sense_pass();
    1620:	4b4e      	ldr	r3, [pc, #312]	; (175c <udi_msc_cbw_received+0x274>)
    1622:	4798      	blx	r3
	udi_msc_csw_process();
    1624:	4b40      	ldr	r3, [pc, #256]	; (1728 <udi_msc_cbw_received+0x240>)
    1626:	4798      	blx	r3
    1628:	e76f      	b.n	150a <udi_msc_cbw_received+0x22>
	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    162a:	2180      	movs	r1, #128	; 0x80
    162c:	2008      	movs	r0, #8
    162e:	4b3f      	ldr	r3, [pc, #252]	; (172c <udi_msc_cbw_received+0x244>)
    1630:	4798      	blx	r3
    1632:	2800      	cmp	r0, #0
    1634:	d100      	bne.n	1638 <udi_msc_cbw_received+0x150>
    1636:	e768      	b.n	150a <udi_msc_cbw_received+0x22>
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    1638:	4b33      	ldr	r3, [pc, #204]	; (1708 <udi_msc_cbw_received+0x220>)
    163a:	7b58      	ldrb	r0, [r3, #13]
    163c:	4948      	ldr	r1, [pc, #288]	; (1760 <udi_msc_cbw_received+0x278>)
    163e:	4b49      	ldr	r3, [pc, #292]	; (1764 <udi_msc_cbw_received+0x27c>)
    1640:	4798      	blx	r3
    1642:	2802      	cmp	r0, #2
    1644:	d00d      	beq.n	1662 <udi_msc_cbw_received+0x17a>
    1646:	2803      	cmp	r0, #3
    1648:	d006      	beq.n	1658 <udi_msc_cbw_received+0x170>
    164a:	2800      	cmp	r0, #0
    164c:	d00e      	beq.n	166c <udi_msc_cbw_received+0x184>
		udi_msc_sense_fail_hardware();
    164e:	4b40      	ldr	r3, [pc, #256]	; (1750 <udi_msc_cbw_received+0x268>)
    1650:	4798      	blx	r3
		udi_msc_csw_process();
    1652:	4b35      	ldr	r3, [pc, #212]	; (1728 <udi_msc_cbw_received+0x240>)
    1654:	4798      	blx	r3
    1656:	e758      	b.n	150a <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_busy_or_change();
    1658:	4b3e      	ldr	r3, [pc, #248]	; (1754 <udi_msc_cbw_received+0x26c>)
    165a:	4798      	blx	r3
		udi_msc_csw_process();
    165c:	4b32      	ldr	r3, [pc, #200]	; (1728 <udi_msc_cbw_received+0x240>)
    165e:	4798      	blx	r3
    1660:	e753      	b.n	150a <udi_msc_cbw_received+0x22>
		udi_msc_sense_fail_not_present();
    1662:	4b3d      	ldr	r3, [pc, #244]	; (1758 <udi_msc_cbw_received+0x270>)
    1664:	4798      	blx	r3
		udi_msc_csw_process();
    1666:	4b30      	ldr	r3, [pc, #192]	; (1728 <udi_msc_cbw_received+0x240>)
    1668:	4798      	blx	r3
    166a:	e74e      	b.n	150a <udi_msc_cbw_received+0x22>
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    166c:	483c      	ldr	r0, [pc, #240]	; (1760 <udi_msc_cbw_received+0x278>)
    166e:	2380      	movs	r3, #128	; 0x80
    1670:	029b      	lsls	r3, r3, #10
    1672:	6043      	str	r3, [r0, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1674:	6803      	ldr	r3, [r0, #0]
    1676:	ba1b      	rev	r3, r3
    1678:	6003      	str	r3, [r0, #0]
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    167a:	2108      	movs	r1, #8
    167c:	4b2d      	ldr	r3, [pc, #180]	; (1734 <udi_msc_cbw_received+0x24c>)
    167e:	4798      	blx	r3
    1680:	e743      	b.n	150a <udi_msc_cbw_received+0x22>
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    1682:	4b21      	ldr	r3, [pc, #132]	; (1708 <udi_msc_cbw_received+0x220>)
    1684:	7cdb      	ldrb	r3, [r3, #19]
	if (loej) {
    1686:	079a      	lsls	r2, r3, #30
    1688:	d404      	bmi.n	1694 <udi_msc_cbw_received+0x1ac>
	udi_msc_sense_pass();
    168a:	4b34      	ldr	r3, [pc, #208]	; (175c <udi_msc_cbw_received+0x274>)
    168c:	4798      	blx	r3
	udi_msc_csw_process();
    168e:	4b26      	ldr	r3, [pc, #152]	; (1728 <udi_msc_cbw_received+0x240>)
    1690:	4798      	blx	r3
    1692:	e73a      	b.n	150a <udi_msc_cbw_received+0x22>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    1694:	2101      	movs	r1, #1
    1696:	404b      	eors	r3, r1
    1698:	2101      	movs	r1, #1
    169a:	4019      	ands	r1, r3
    169c:	4b32      	ldr	r3, [pc, #200]	; (1768 <udi_msc_cbw_received+0x280>)
    169e:	4798      	blx	r3
    16a0:	e7f3      	b.n	168a <udi_msc_cbw_received+0x1a2>
	uint8_t prevent = udi_msc_cbw.CDB[4];
    16a2:	4b19      	ldr	r3, [pc, #100]	; (1708 <udi_msc_cbw_received+0x220>)
	if (0 == prevent) {
    16a4:	7cdb      	ldrb	r3, [r3, #19]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d004      	beq.n	16b4 <udi_msc_cbw_received+0x1cc>
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    16aa:	4b1e      	ldr	r3, [pc, #120]	; (1724 <udi_msc_cbw_received+0x23c>)
    16ac:	4798      	blx	r3
	udi_msc_csw_process();
    16ae:	4b1e      	ldr	r3, [pc, #120]	; (1728 <udi_msc_cbw_received+0x240>)
    16b0:	4798      	blx	r3
    16b2:	e72a      	b.n	150a <udi_msc_cbw_received+0x22>
		udi_msc_sense_pass();
    16b4:	4b29      	ldr	r3, [pc, #164]	; (175c <udi_msc_cbw_received+0x274>)
    16b6:	4798      	blx	r3
    16b8:	e7f9      	b.n	16ae <udi_msc_cbw_received+0x1c6>
		udi_msc_sense_pass();
    16ba:	4b28      	ldr	r3, [pc, #160]	; (175c <udi_msc_cbw_received+0x274>)
    16bc:	4798      	blx	r3
		udi_msc_csw_process();
    16be:	4b1a      	ldr	r3, [pc, #104]	; (1728 <udi_msc_cbw_received+0x240>)
    16c0:	4798      	blx	r3
		break;
    16c2:	e722      	b.n	150a <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(true);
    16c4:	2001      	movs	r0, #1
    16c6:	4b29      	ldr	r3, [pc, #164]	; (176c <udi_msc_cbw_received+0x284>)
    16c8:	4798      	blx	r3
		break;
    16ca:	e71e      	b.n	150a <udi_msc_cbw_received+0x22>
		udi_msc_sbc_trans(false);
    16cc:	2000      	movs	r0, #0
    16ce:	4b27      	ldr	r3, [pc, #156]	; (176c <udi_msc_cbw_received+0x284>)
    16d0:	4798      	blx	r3
		break;
    16d2:	e71a      	b.n	150a <udi_msc_cbw_received+0x22>
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    16d4:	2200      	movs	r2, #0
    16d6:	2180      	movs	r1, #128	; 0x80
    16d8:	0189      	lsls	r1, r1, #6
    16da:	2005      	movs	r0, #5
    16dc:	4b24      	ldr	r3, [pc, #144]	; (1770 <udi_msc_cbw_received+0x288>)
    16de:	4798      	blx	r3
		udi_msc_csw_process();
    16e0:	4b11      	ldr	r3, [pc, #68]	; (1728 <udi_msc_cbw_received+0x240>)
    16e2:	4798      	blx	r3
		break;
    16e4:	e711      	b.n	150a <udi_msc_cbw_received+0x22>
	i = 0;
    16e6:	002b      	movs	r3, r5
		udi_msc_inquiry_data.product_id[i] = ' ';
    16e8:	4814      	ldr	r0, [pc, #80]	; (173c <udi_msc_cbw_received+0x254>)
    16ea:	2120      	movs	r1, #32
    16ec:	18c2      	adds	r2, r0, r3
    16ee:	7411      	strb	r1, [r2, #16]
		i++;
    16f0:	3301      	adds	r3, #1
    16f2:	b2db      	uxtb	r3, r3
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    16f4:	2b10      	cmp	r3, #16
    16f6:	d1f9      	bne.n	16ec <udi_msc_cbw_received+0x204>
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    16f8:	0021      	movs	r1, r4
    16fa:	4810      	ldr	r0, [pc, #64]	; (173c <udi_msc_cbw_received+0x254>)
    16fc:	4b0d      	ldr	r3, [pc, #52]	; (1734 <udi_msc_cbw_received+0x24c>)
    16fe:	4798      	blx	r3
    1700:	e703      	b.n	150a <udi_msc_cbw_received+0x22>
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	43425355 	.word	0x43425355
    1708:	200001d8 	.word	0x200001d8
    170c:	200001cc 	.word	0x200001cc
    1710:	000011c1 	.word	0x000011c1
    1714:	000011ed 	.word	0x000011ed
    1718:	200001fc 	.word	0x200001fc
    171c:	20000048 	.word	0x20000048
    1720:	0000a25c 	.word	0x0000a25c
    1724:	000012b1 	.word	0x000012b1
    1728:	00001219 	.word	0x00001219
    172c:	000012c5 	.word	0x000012c5
    1730:	20000200 	.word	0x20000200
    1734:	00001311 	.word	0x00001311
    1738:	00008575 	.word	0x00008575
    173c:	20000058 	.word	0x20000058
    1740:	0000858d 	.word	0x0000858d
    1744:	00009161 	.word	0x00009161
    1748:	000013b1 	.word	0x000013b1
    174c:	00008511 	.word	0x00008511
    1750:	000012fd 	.word	0x000012fd
    1754:	00001349 	.word	0x00001349
    1758:	0000135d 	.word	0x0000135d
    175c:	00001371 	.word	0x00001371
    1760:	200001d0 	.word	0x200001d0
    1764:	00008529 	.word	0x00008529
    1768:	0000854d 	.word	0x0000854d
    176c:	00001461 	.word	0x00001461
    1770:	00001279 	.word	0x00001279

00001774 <udi_msc_disable>:
{
    1774:	b510      	push	{r4, lr}
	udi_msc_b_trans_req = false;
    1776:	2200      	movs	r2, #0
    1778:	4b04      	ldr	r3, [pc, #16]	; (178c <udi_msc_disable+0x18>)
    177a:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
    177c:	2301      	movs	r3, #1
    177e:	4a04      	ldr	r2, [pc, #16]	; (1790 <udi_msc_disable+0x1c>)
    1780:	7013      	strb	r3, [r2, #0]
	udi_msc_b_reset_trans = true;
    1782:	4a04      	ldr	r2, [pc, #16]	; (1794 <udi_msc_disable+0x20>)
    1784:	7013      	strb	r3, [r2, #0]
	UDI_MSC_DISABLE_EXT();
    1786:	4b04      	ldr	r3, [pc, #16]	; (1798 <udi_msc_disable+0x24>)
    1788:	4798      	blx	r3
}
    178a:	bd10      	pop	{r4, pc}
    178c:	200001ce 	.word	0x200001ce
    1790:	20000044 	.word	0x20000044
    1794:	20000045 	.word	0x20000045
    1798:	00005db9 	.word	0x00005db9

0000179c <udi_msc_setup>:
{
    179c:	b510      	push	{r4, lr}
	if (Udd_setup_is_in()) {
    179e:	4b20      	ldr	r3, [pc, #128]	; (1820 <udi_msc_setup+0x84>)
    17a0:	781a      	ldrb	r2, [r3, #0]
    17a2:	b253      	sxtb	r3, r2
    17a4:	2b00      	cmp	r3, #0
    17a6:	db05      	blt.n	17b4 <udi_msc_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17a8:	2360      	movs	r3, #96	; 0x60
    17aa:	4013      	ands	r3, r2
	return false;	// Not supported request
    17ac:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17ae:	2b20      	cmp	r3, #32
    17b0:	d018      	beq.n	17e4 <udi_msc_setup+0x48>
}
    17b2:	bd10      	pop	{r4, pc}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17b4:	2360      	movs	r3, #96	; 0x60
    17b6:	4013      	ands	r3, r2
	return false;	// Not supported request
    17b8:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    17ba:	2b20      	cmp	r3, #32
    17bc:	d1f9      	bne.n	17b2 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    17be:	4b18      	ldr	r3, [pc, #96]	; (1820 <udi_msc_setup+0x84>)
    17c0:	785b      	ldrb	r3, [r3, #1]
    17c2:	2bfe      	cmp	r3, #254	; 0xfe
    17c4:	d127      	bne.n	1816 <udi_msc_setup+0x7a>
				if (1 != udd_g_ctrlreq.req.wLength)
    17c6:	4b16      	ldr	r3, [pc, #88]	; (1820 <udi_msc_setup+0x84>)
    17c8:	88db      	ldrh	r3, [r3, #6]
    17ca:	2b01      	cmp	r3, #1
    17cc:	d1f1      	bne.n	17b2 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    17ce:	4b14      	ldr	r3, [pc, #80]	; (1820 <udi_msc_setup+0x84>)
    17d0:	885b      	ldrh	r3, [r3, #2]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d1ed      	bne.n	17b2 <udi_msc_setup+0x16>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    17d6:	4b12      	ldr	r3, [pc, #72]	; (1820 <udi_msc_setup+0x84>)
    17d8:	4a12      	ldr	r2, [pc, #72]	; (1824 <udi_msc_setup+0x88>)
    17da:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    17dc:	2201      	movs	r2, #1
    17de:	819a      	strh	r2, [r3, #12]
				return true;
    17e0:	3001      	adds	r0, #1
    17e2:	e7e6      	b.n	17b2 <udi_msc_setup+0x16>
			switch (udd_g_ctrlreq.req.bRequest) {
    17e4:	4b0e      	ldr	r3, [pc, #56]	; (1820 <udi_msc_setup+0x84>)
    17e6:	785b      	ldrb	r3, [r3, #1]
    17e8:	2bff      	cmp	r3, #255	; 0xff
    17ea:	d116      	bne.n	181a <udi_msc_setup+0x7e>
				if (0 != udd_g_ctrlreq.req.wLength)
    17ec:	4b0c      	ldr	r3, [pc, #48]	; (1820 <udi_msc_setup+0x84>)
    17ee:	88db      	ldrh	r3, [r3, #6]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d1de      	bne.n	17b2 <udi_msc_setup+0x16>
				if (0 != udd_g_ctrlreq.req.wValue)
    17f4:	4b0a      	ldr	r3, [pc, #40]	; (1820 <udi_msc_setup+0x84>)
    17f6:	885b      	ldrh	r3, [r3, #2]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d1da      	bne.n	17b2 <udi_msc_setup+0x16>
				udi_msc_b_cbw_invalid = false;
    17fc:	4a0a      	ldr	r2, [pc, #40]	; (1828 <udi_msc_setup+0x8c>)
    17fe:	7013      	strb	r3, [r2, #0]
				udi_msc_b_trans_req = false;
    1800:	4a0a      	ldr	r2, [pc, #40]	; (182c <udi_msc_setup+0x90>)
    1802:	7013      	strb	r3, [r2, #0]
				udd_ep_abort(UDI_MSC_EP_OUT);
    1804:	3002      	adds	r0, #2
    1806:	4c0a      	ldr	r4, [pc, #40]	; (1830 <udi_msc_setup+0x94>)
    1808:	47a0      	blx	r4
				udd_ep_abort(UDI_MSC_EP_IN);
    180a:	2081      	movs	r0, #129	; 0x81
    180c:	47a0      	blx	r4
				udi_msc_cbw_wait();
    180e:	4b09      	ldr	r3, [pc, #36]	; (1834 <udi_msc_setup+0x98>)
    1810:	4798      	blx	r3
				return true;
    1812:	2001      	movs	r0, #1
    1814:	e7cd      	b.n	17b2 <udi_msc_setup+0x16>
	return false;	// Not supported request
    1816:	2000      	movs	r0, #0
    1818:	e7cb      	b.n	17b2 <udi_msc_setup+0x16>
    181a:	2000      	movs	r0, #0
    181c:	e7c9      	b.n	17b2 <udi_msc_setup+0x16>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	20000588 	.word	0x20000588
    1824:	200001fc 	.word	0x200001fc
    1828:	200001cc 	.word	0x200001cc
    182c:	200001ce 	.word	0x200001ce
    1830:	000033bd 	.word	0x000033bd
    1834:	000010c5 	.word	0x000010c5

00001838 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    1838:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    183a:	4b11      	ldr	r3, [pc, #68]	; (1880 <udc_next_desc_in_iface+0x48>)
    183c:	681b      	ldr	r3, [r3, #0]
    183e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    1840:	7894      	ldrb	r4, [r2, #2]
    1842:	78d3      	ldrb	r3, [r2, #3]
    1844:	021b      	lsls	r3, r3, #8
    1846:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    1848:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    184a:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    184c:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    184e:	4290      	cmp	r0, r2
    1850:	d210      	bcs.n	1874 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1852:	7843      	ldrb	r3, [r0, #1]
    1854:	2b04      	cmp	r3, #4
    1856:	d00f      	beq.n	1878 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    1858:	428b      	cmp	r3, r1
    185a:	d00a      	beq.n	1872 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    185c:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    185e:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    1860:	4290      	cmp	r0, r2
    1862:	d205      	bcs.n	1870 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    1864:	7843      	ldrb	r3, [r0, #1]
    1866:	2b04      	cmp	r3, #4
    1868:	d008      	beq.n	187c <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    186a:	428b      	cmp	r3, r1
    186c:	d1f6      	bne.n	185c <udc_next_desc_in_iface+0x24>
    186e:	e000      	b.n	1872 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    1870:	2000      	movs	r0, #0
}
    1872:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    1874:	2000      	movs	r0, #0
    1876:	e7fc      	b.n	1872 <udc_next_desc_in_iface+0x3a>
    1878:	2000      	movs	r0, #0
    187a:	e7fa      	b.n	1872 <udc_next_desc_in_iface+0x3a>
    187c:	2000      	movs	r0, #0
    187e:	e7f8      	b.n	1872 <udc_next_desc_in_iface+0x3a>
    1880:	20000220 	.word	0x20000220

00001884 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    1884:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1886:	4b03      	ldr	r3, [pc, #12]	; (1894 <udc_valid_address+0x10>)
    1888:	885b      	ldrh	r3, [r3, #2]
    188a:	207f      	movs	r0, #127	; 0x7f
    188c:	4018      	ands	r0, r3
    188e:	4b02      	ldr	r3, [pc, #8]	; (1898 <udc_valid_address+0x14>)
    1890:	4798      	blx	r3
}
    1892:	bd10      	pop	{r4, pc}
    1894:	20000588 	.word	0x20000588
    1898:	00003921 	.word	0x00003921

0000189c <udc_update_iface_desc>:
{
    189c:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    189e:	4b19      	ldr	r3, [pc, #100]	; (1904 <udc_update_iface_desc+0x68>)
    18a0:	781b      	ldrb	r3, [r3, #0]
		return false;
    18a2:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    18a4:	2b00      	cmp	r3, #0
    18a6:	d029      	beq.n	18fc <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18a8:	4b17      	ldr	r3, [pc, #92]	; (1908 <udc_update_iface_desc+0x6c>)
    18aa:	681b      	ldr	r3, [r3, #0]
    18ac:	681b      	ldr	r3, [r3, #0]
    18ae:	791c      	ldrb	r4, [r3, #4]
    18b0:	4284      	cmp	r4, r0
    18b2:	d923      	bls.n	18fc <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    18b4:	4a15      	ldr	r2, [pc, #84]	; (190c <udc_update_iface_desc+0x70>)
    18b6:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    18b8:	789a      	ldrb	r2, [r3, #2]
    18ba:	78dc      	ldrb	r4, [r3, #3]
    18bc:	0224      	lsls	r4, r4, #8
    18be:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    18c0:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    18c2:	42a3      	cmp	r3, r4
    18c4:	d21c      	bcs.n	1900 <udc_update_iface_desc+0x64>
    18c6:	2500      	movs	r5, #0
    18c8:	2601      	movs	r6, #1
    18ca:	e007      	b.n	18dc <udc_update_iface_desc+0x40>
    18cc:	4a0f      	ldr	r2, [pc, #60]	; (190c <udc_update_iface_desc+0x70>)
    18ce:	6013      	str	r3, [r2, #0]
    18d0:	e00f      	b.n	18f2 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    18d2:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    18d4:	189b      	adds	r3, r3, r2
    18d6:	0035      	movs	r5, r6
	while (ptr_end_desc >
    18d8:	42a3      	cmp	r3, r4
    18da:	d20c      	bcs.n	18f6 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    18dc:	785a      	ldrb	r2, [r3, #1]
    18de:	2a04      	cmp	r2, #4
    18e0:	d1f7      	bne.n	18d2 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    18e2:	789a      	ldrb	r2, [r3, #2]
    18e4:	4282      	cmp	r2, r0
    18e6:	d1f4      	bne.n	18d2 <udc_update_iface_desc+0x36>
    18e8:	78da      	ldrb	r2, [r3, #3]
    18ea:	428a      	cmp	r2, r1
    18ec:	d1f1      	bne.n	18d2 <udc_update_iface_desc+0x36>
    18ee:	2d00      	cmp	r5, #0
    18f0:	d1ec      	bne.n	18cc <udc_update_iface_desc+0x30>
				return true; // Interface found
    18f2:	2201      	movs	r2, #1
    18f4:	e002      	b.n	18fc <udc_update_iface_desc+0x60>
    18f6:	4a05      	ldr	r2, [pc, #20]	; (190c <udc_update_iface_desc+0x70>)
    18f8:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    18fa:	2200      	movs	r2, #0
}
    18fc:	0010      	movs	r0, r2
    18fe:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    1900:	2200      	movs	r2, #0
    1902:	e7fb      	b.n	18fc <udc_update_iface_desc+0x60>
    1904:	2000021c 	.word	0x2000021c
    1908:	20000220 	.word	0x20000220
    190c:	20000224 	.word	0x20000224

00001910 <udc_iface_disable>:
{
    1910:	b5f0      	push	{r4, r5, r6, r7, lr}
    1912:	46c6      	mov	lr, r8
    1914:	b500      	push	{lr}
    1916:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    1918:	2100      	movs	r1, #0
    191a:	4b13      	ldr	r3, [pc, #76]	; (1968 <udc_iface_disable+0x58>)
    191c:	4798      	blx	r3
    191e:	1e05      	subs	r5, r0, #0
    1920:	d103      	bne.n	192a <udc_iface_disable+0x1a>
}
    1922:	0028      	movs	r0, r5
    1924:	bc04      	pop	{r2}
    1926:	4690      	mov	r8, r2
    1928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    192a:	4b10      	ldr	r3, [pc, #64]	; (196c <udc_iface_disable+0x5c>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	685b      	ldr	r3, [r3, #4]
    1930:	00a2      	lsls	r2, r4, #2
    1932:	58d3      	ldr	r3, [r2, r3]
    1934:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1936:	68db      	ldr	r3, [r3, #12]
    1938:	4798      	blx	r3
    193a:	0001      	movs	r1, r0
    193c:	0020      	movs	r0, r4
    193e:	4b0a      	ldr	r3, [pc, #40]	; (1968 <udc_iface_disable+0x58>)
    1940:	4798      	blx	r3
    1942:	1e05      	subs	r5, r0, #0
    1944:	d0ed      	beq.n	1922 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1946:	4b0a      	ldr	r3, [pc, #40]	; (1970 <udc_iface_disable+0x60>)
    1948:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    194a:	4e0a      	ldr	r6, [pc, #40]	; (1974 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    194c:	4f0a      	ldr	r7, [pc, #40]	; (1978 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    194e:	2105      	movs	r1, #5
    1950:	0020      	movs	r0, r4
    1952:	47b0      	blx	r6
    1954:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    1956:	d002      	beq.n	195e <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    1958:	7880      	ldrb	r0, [r0, #2]
    195a:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    195c:	e7f7      	b.n	194e <udc_iface_disable+0x3e>
	udi_api->disable();
    195e:	4643      	mov	r3, r8
    1960:	685b      	ldr	r3, [r3, #4]
    1962:	4798      	blx	r3
	return true;
    1964:	e7dd      	b.n	1922 <udc_iface_disable+0x12>
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	0000189d 	.word	0x0000189d
    196c:	20000220 	.word	0x20000220
    1970:	20000224 	.word	0x20000224
    1974:	00001839 	.word	0x00001839
    1978:	00003409 	.word	0x00003409

0000197c <udc_iface_enable>:
{
    197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    197e:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    1980:	4b0f      	ldr	r3, [pc, #60]	; (19c0 <udc_iface_enable+0x44>)
    1982:	4798      	blx	r3
    1984:	2800      	cmp	r0, #0
    1986:	d019      	beq.n	19bc <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    1988:	4b0e      	ldr	r3, [pc, #56]	; (19c4 <udc_iface_enable+0x48>)
    198a:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    198c:	4e0e      	ldr	r6, [pc, #56]	; (19c8 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    198e:	4f0f      	ldr	r7, [pc, #60]	; (19cc <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1990:	2105      	movs	r1, #5
    1992:	0020      	movs	r0, r4
    1994:	47b0      	blx	r6
    1996:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    1998:	d009      	beq.n	19ae <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    199a:	7903      	ldrb	r3, [r0, #4]
    199c:	7942      	ldrb	r2, [r0, #5]
    199e:	0212      	lsls	r2, r2, #8
    19a0:	431a      	orrs	r2, r3
    19a2:	78c1      	ldrb	r1, [r0, #3]
    19a4:	7880      	ldrb	r0, [r0, #2]
    19a6:	47b8      	blx	r7
    19a8:	2800      	cmp	r0, #0
    19aa:	d1f1      	bne.n	1990 <udc_iface_enable+0x14>
    19ac:	e006      	b.n	19bc <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    19ae:	4b08      	ldr	r3, [pc, #32]	; (19d0 <udc_iface_enable+0x54>)
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	685b      	ldr	r3, [r3, #4]
    19b4:	00ad      	lsls	r5, r5, #2
    19b6:	58eb      	ldr	r3, [r5, r3]
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	4798      	blx	r3
}
    19bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	0000189d 	.word	0x0000189d
    19c4:	20000224 	.word	0x20000224
    19c8:	00001839 	.word	0x00001839
    19cc:	00003461 	.word	0x00003461
    19d0:	20000220 	.word	0x20000220

000019d4 <udc_start>:
{
    19d4:	b510      	push	{r4, lr}
	udd_enable();
    19d6:	4b01      	ldr	r3, [pc, #4]	; (19dc <udc_start+0x8>)
    19d8:	4798      	blx	r3
}
    19da:	bd10      	pop	{r4, pc}
    19dc:	00003a2d 	.word	0x00003a2d

000019e0 <udc_reset>:
{
    19e0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    19e2:	4b0e      	ldr	r3, [pc, #56]	; (1a1c <udc_reset+0x3c>)
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	2b00      	cmp	r3, #0
    19e8:	d011      	beq.n	1a0e <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19ea:	4b0d      	ldr	r3, [pc, #52]	; (1a20 <udc_reset+0x40>)
    19ec:	681b      	ldr	r3, [r3, #0]
    19ee:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    19f0:	791b      	ldrb	r3, [r3, #4]
    19f2:	2b00      	cmp	r3, #0
    19f4:	d00b      	beq.n	1a0e <udc_reset+0x2e>
    19f6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    19f8:	4e0a      	ldr	r6, [pc, #40]	; (1a24 <udc_reset+0x44>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19fa:	4d09      	ldr	r5, [pc, #36]	; (1a20 <udc_reset+0x40>)
			udc_iface_disable(iface_num);
    19fc:	0020      	movs	r0, r4
    19fe:	47b0      	blx	r6
				iface_num++) {
    1a00:	3401      	adds	r4, #1
    1a02:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a04:	682b      	ldr	r3, [r5, #0]
    1a06:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1a08:	791b      	ldrb	r3, [r3, #4]
    1a0a:	42a3      	cmp	r3, r4
    1a0c:	d8f6      	bhi.n	19fc <udc_reset+0x1c>
	udc_num_configuration = 0;
    1a0e:	2200      	movs	r2, #0
    1a10:	4b02      	ldr	r3, [pc, #8]	; (1a1c <udc_reset+0x3c>)
    1a12:	701a      	strb	r2, [r3, #0]
	udc_device_status =
    1a14:	3201      	adds	r2, #1
    1a16:	4b04      	ldr	r3, [pc, #16]	; (1a28 <udc_reset+0x48>)
    1a18:	801a      	strh	r2, [r3, #0]
}
    1a1a:	bd70      	pop	{r4, r5, r6, pc}
    1a1c:	2000021c 	.word	0x2000021c
    1a20:	20000220 	.word	0x20000220
    1a24:	00001911 	.word	0x00001911
    1a28:	20000212 	.word	0x20000212

00001a2c <udc_sof_notify>:
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    1a2e:	4b0e      	ldr	r3, [pc, #56]	; (1a68 <udc_sof_notify+0x3c>)
    1a30:	781b      	ldrb	r3, [r3, #0]
    1a32:	2b00      	cmp	r3, #0
    1a34:	d017      	beq.n	1a66 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a36:	4b0d      	ldr	r3, [pc, #52]	; (1a6c <udc_sof_notify+0x40>)
    1a38:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    1a3a:	681a      	ldr	r2, [r3, #0]
    1a3c:	7912      	ldrb	r2, [r2, #4]
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d011      	beq.n	1a66 <udc_sof_notify+0x3a>
    1a42:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a44:	4d09      	ldr	r5, [pc, #36]	; (1a6c <udc_sof_notify+0x40>)
    1a46:	e006      	b.n	1a56 <udc_sof_notify+0x2a>
				iface_num++) {
    1a48:	3401      	adds	r4, #1
    1a4a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a4c:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    1a4e:	681a      	ldr	r2, [r3, #0]
    1a50:	7912      	ldrb	r2, [r2, #4]
    1a52:	42a2      	cmp	r2, r4
    1a54:	d907      	bls.n	1a66 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1a56:	685b      	ldr	r3, [r3, #4]
    1a58:	00a2      	lsls	r2, r4, #2
    1a5a:	58d3      	ldr	r3, [r2, r3]
    1a5c:	691b      	ldr	r3, [r3, #16]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d0f2      	beq.n	1a48 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1a62:	4798      	blx	r3
    1a64:	e7f0      	b.n	1a48 <udc_sof_notify+0x1c>
}
    1a66:	bd70      	pop	{r4, r5, r6, pc}
    1a68:	2000021c 	.word	0x2000021c
    1a6c:	20000220 	.word	0x20000220

00001a70 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1a72:	4bac      	ldr	r3, [pc, #688]	; (1d24 <udc_process_setup+0x2b4>)
    1a74:	2200      	movs	r2, #0
    1a76:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1a78:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1a7a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1a7c:	781b      	ldrb	r3, [r3, #0]
    1a7e:	b25a      	sxtb	r2, r3
    1a80:	2a00      	cmp	r2, #0
    1a82:	db13      	blt.n	1aac <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a84:	2260      	movs	r2, #96	; 0x60
    1a86:	421a      	tst	r2, r3
    1a88:	d100      	bne.n	1a8c <udc_process_setup+0x1c>
    1a8a:	e0da      	b.n	1c42 <udc_process_setup+0x1d2>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1a8c:	4ba5      	ldr	r3, [pc, #660]	; (1d24 <udc_process_setup+0x2b4>)
    1a8e:	781a      	ldrb	r2, [r3, #0]
    1a90:	231f      	movs	r3, #31
    1a92:	4013      	ands	r3, r2
    1a94:	2b01      	cmp	r3, #1
    1a96:	d100      	bne.n	1a9a <udc_process_setup+0x2a>
    1a98:	e176      	b.n	1d88 <udc_process_setup+0x318>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1a9a:	4ba2      	ldr	r3, [pc, #648]	; (1d24 <udc_process_setup+0x2b4>)
    1a9c:	781a      	ldrb	r2, [r3, #0]
    1a9e:	231f      	movs	r3, #31
    1aa0:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1aa2:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1aa4:	2b02      	cmp	r3, #2
    1aa6:	d100      	bne.n	1aaa <udc_process_setup+0x3a>
    1aa8:	e1cc      	b.n	1e44 <udc_process_setup+0x3d4>
#endif
}
    1aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    1aac:	4a9d      	ldr	r2, [pc, #628]	; (1d24 <udc_process_setup+0x2b4>)
    1aae:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    1ab0:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    1ab2:	2a00      	cmp	r2, #0
    1ab4:	d0f9      	beq.n	1aaa <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1ab6:	2160      	movs	r1, #96	; 0x60
    1ab8:	4219      	tst	r1, r3
    1aba:	d1e7      	bne.n	1a8c <udc_process_setup+0x1c>
    1abc:	211f      	movs	r1, #31
    1abe:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1ac0:	d108      	bne.n	1ad4 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ac2:	4998      	ldr	r1, [pc, #608]	; (1d24 <udc_process_setup+0x2b4>)
    1ac4:	7849      	ldrb	r1, [r1, #1]
    1ac6:	2906      	cmp	r1, #6
    1ac8:	d023      	beq.n	1b12 <udc_process_setup+0xa2>
    1aca:	2908      	cmp	r1, #8
    1acc:	d100      	bne.n	1ad0 <udc_process_setup+0x60>
    1ace:	e087      	b.n	1be0 <udc_process_setup+0x170>
    1ad0:	2900      	cmp	r1, #0
    1ad2:	d017      	beq.n	1b04 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ad4:	2b01      	cmp	r3, #1
    1ad6:	d100      	bne.n	1ada <udc_process_setup+0x6a>
    1ad8:	e08a      	b.n	1bf0 <udc_process_setup+0x180>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1ada:	2b02      	cmp	r3, #2
    1adc:	d1d6      	bne.n	1a8c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1ade:	4b91      	ldr	r3, [pc, #580]	; (1d24 <udc_process_setup+0x2b4>)
    1ae0:	785b      	ldrb	r3, [r3, #1]
	return false;
    1ae2:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d000      	beq.n	1aea <udc_process_setup+0x7a>
    1ae8:	e1a8      	b.n	1e3c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1aea:	2a02      	cmp	r2, #2
    1aec:	d1d5      	bne.n	1a9a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1aee:	4b8d      	ldr	r3, [pc, #564]	; (1d24 <udc_process_setup+0x2b4>)
    1af0:	7918      	ldrb	r0, [r3, #4]
    1af2:	4b8d      	ldr	r3, [pc, #564]	; (1d28 <udc_process_setup+0x2b8>)
    1af4:	4798      	blx	r3
    1af6:	4b8d      	ldr	r3, [pc, #564]	; (1d2c <udc_process_setup+0x2bc>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    1af8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1afa:	2102      	movs	r1, #2
    1afc:	0018      	movs	r0, r3
    1afe:	4b8c      	ldr	r3, [pc, #560]	; (1d30 <udc_process_setup+0x2c0>)
    1b00:	4798      	blx	r3
    1b02:	e0ff      	b.n	1d04 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1b04:	2a02      	cmp	r2, #2
    1b06:	d1c8      	bne.n	1a9a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1b08:	3102      	adds	r1, #2
    1b0a:	488a      	ldr	r0, [pc, #552]	; (1d34 <udc_process_setup+0x2c4>)
    1b0c:	4b88      	ldr	r3, [pc, #544]	; (1d30 <udc_process_setup+0x2c0>)
    1b0e:	4798      	blx	r3
    1b10:	e0f8      	b.n	1d04 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b12:	4b84      	ldr	r3, [pc, #528]	; (1d24 <udc_process_setup+0x2b4>)
    1b14:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b16:	0a13      	lsrs	r3, r2, #8
    1b18:	2b02      	cmp	r3, #2
    1b1a:	d023      	beq.n	1b64 <udc_process_setup+0xf4>
    1b1c:	b2d9      	uxtb	r1, r3
    1b1e:	2902      	cmp	r1, #2
    1b20:	d90f      	bls.n	1b42 <udc_process_setup+0xd2>
    1b22:	2b03      	cmp	r3, #3
    1b24:	d034      	beq.n	1b90 <udc_process_setup+0x120>
    1b26:	2b0f      	cmp	r3, #15
    1b28:	d000      	beq.n	1b2c <udc_process_setup+0xbc>
    1b2a:	e184      	b.n	1e36 <udc_process_setup+0x3c6>
		if (udc_config.conf_bos == NULL) {
    1b2c:	4b82      	ldr	r3, [pc, #520]	; (1d38 <udc_process_setup+0x2c8>)
    1b2e:	6898      	ldr	r0, [r3, #8]
    1b30:	2800      	cmp	r0, #0
    1b32:	d0b2      	beq.n	1a9a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1b34:	7883      	ldrb	r3, [r0, #2]
    1b36:	78c1      	ldrb	r1, [r0, #3]
    1b38:	0209      	lsls	r1, r1, #8
    1b3a:	4319      	orrs	r1, r3
    1b3c:	4b7c      	ldr	r3, [pc, #496]	; (1d30 <udc_process_setup+0x2c0>)
    1b3e:	4798      	blx	r3
    1b40:	e007      	b.n	1b52 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b42:	2b01      	cmp	r3, #1
    1b44:	d000      	beq.n	1b48 <udc_process_setup+0xd8>
    1b46:	e176      	b.n	1e36 <udc_process_setup+0x3c6>
				(uint8_t *) udc_config.confdev_lsfs,
    1b48:	4b7b      	ldr	r3, [pc, #492]	; (1d38 <udc_process_setup+0x2c8>)
    1b4a:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    1b4c:	7801      	ldrb	r1, [r0, #0]
    1b4e:	4b78      	ldr	r3, [pc, #480]	; (1d30 <udc_process_setup+0x2c0>)
    1b50:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1b52:	4b74      	ldr	r3, [pc, #464]	; (1d24 <udc_process_setup+0x2b4>)
    1b54:	88da      	ldrh	r2, [r3, #6]
    1b56:	899b      	ldrh	r3, [r3, #12]
    1b58:	4293      	cmp	r3, r2
    1b5a:	d800      	bhi.n	1b5e <udc_process_setup+0xee>
    1b5c:	e0d2      	b.n	1d04 <udc_process_setup+0x294>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1b5e:	4b71      	ldr	r3, [pc, #452]	; (1d24 <udc_process_setup+0x2b4>)
    1b60:	819a      	strh	r2, [r3, #12]
    1b62:	e0cf      	b.n	1d04 <udc_process_setup+0x294>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1b64:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    1b66:	4b74      	ldr	r3, [pc, #464]	; (1d38 <udc_process_setup+0x2c8>)
    1b68:	681b      	ldr	r3, [r3, #0]
    1b6a:	7c5b      	ldrb	r3, [r3, #17]
    1b6c:	4293      	cmp	r3, r2
    1b6e:	d800      	bhi.n	1b72 <udc_process_setup+0x102>
    1b70:	e793      	b.n	1a9a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1b72:	4b71      	ldr	r3, [pc, #452]	; (1d38 <udc_process_setup+0x2c8>)
    1b74:	685b      	ldr	r3, [r3, #4]
    1b76:	00d2      	lsls	r2, r2, #3
    1b78:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    1b7a:	7883      	ldrb	r3, [r0, #2]
    1b7c:	78c1      	ldrb	r1, [r0, #3]
    1b7e:	0209      	lsls	r1, r1, #8
    1b80:	4319      	orrs	r1, r3
    1b82:	4b6b      	ldr	r3, [pc, #428]	; (1d30 <udc_process_setup+0x2c0>)
    1b84:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1b86:	4b67      	ldr	r3, [pc, #412]	; (1d24 <udc_process_setup+0x2b4>)
    1b88:	689b      	ldr	r3, [r3, #8]
    1b8a:	2202      	movs	r2, #2
    1b8c:	705a      	strb	r2, [r3, #1]
    1b8e:	e7e0      	b.n	1b52 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1b90:	23ff      	movs	r3, #255	; 0xff
    1b92:	401a      	ands	r2, r3
    1b94:	2a01      	cmp	r2, #1
    1b96:	d020      	beq.n	1bda <udc_process_setup+0x16a>
    1b98:	2a00      	cmp	r2, #0
    1b9a:	d019      	beq.n	1bd0 <udc_process_setup+0x160>
    1b9c:	2a02      	cmp	r2, #2
    1b9e:	d100      	bne.n	1ba2 <udc_process_setup+0x132>
    1ba0:	e178      	b.n	1e94 <udc_process_setup+0x424>
    1ba2:	2a03      	cmp	r2, #3
    1ba4:	d000      	beq.n	1ba8 <udc_process_setup+0x138>
    1ba6:	e771      	b.n	1a8c <udc_process_setup+0x1c>
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1ba8:	210c      	movs	r1, #12
		str = udc_get_string_serial_name();
    1baa:	4c64      	ldr	r4, [pc, #400]	; (1d3c <udc_process_setup+0x2cc>)
    1bac:	4a64      	ldr	r2, [pc, #400]	; (1d40 <udc_process_setup+0x2d0>)
    1bae:	3202      	adds	r2, #2
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1bb0:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1bb2:	5ce0      	ldrb	r0, [r4, r3]
    1bb4:	8010      	strh	r0, [r2, #0]
    1bb6:	3301      	adds	r3, #1
    1bb8:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    1bba:	b2d8      	uxtb	r0, r3
    1bbc:	4281      	cmp	r1, r0
    1bbe:	d8f8      	bhi.n	1bb2 <udc_process_setup+0x142>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1bc0:	0049      	lsls	r1, r1, #1
    1bc2:	3102      	adds	r1, #2
    1bc4:	485e      	ldr	r0, [pc, #376]	; (1d40 <udc_process_setup+0x2d0>)
    1bc6:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    1bc8:	b289      	uxth	r1, r1
    1bca:	4b59      	ldr	r3, [pc, #356]	; (1d30 <udc_process_setup+0x2c0>)
    1bcc:	4798      	blx	r3
    1bce:	e7c0      	b.n	1b52 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1bd0:	2104      	movs	r1, #4
    1bd2:	485c      	ldr	r0, [pc, #368]	; (1d44 <udc_process_setup+0x2d4>)
    1bd4:	4b56      	ldr	r3, [pc, #344]	; (1d30 <udc_process_setup+0x2c0>)
    1bd6:	4798      	blx	r3
    1bd8:	e7bb      	b.n	1b52 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    1bda:	4c5b      	ldr	r4, [pc, #364]	; (1d48 <udc_process_setup+0x2d8>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1bdc:	2109      	movs	r1, #9
    1bde:	e7e5      	b.n	1bac <udc_process_setup+0x13c>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1be0:	2a01      	cmp	r2, #1
    1be2:	d000      	beq.n	1be6 <udc_process_setup+0x176>
    1be4:	e759      	b.n	1a9a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    1be6:	2101      	movs	r1, #1
    1be8:	4858      	ldr	r0, [pc, #352]	; (1d4c <udc_process_setup+0x2dc>)
    1bea:	4b51      	ldr	r3, [pc, #324]	; (1d30 <udc_process_setup+0x2c0>)
    1bec:	4798      	blx	r3
    1bee:	e089      	b.n	1d04 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1bf0:	494c      	ldr	r1, [pc, #304]	; (1d24 <udc_process_setup+0x2b4>)
    1bf2:	7849      	ldrb	r1, [r1, #1]
    1bf4:	290a      	cmp	r1, #10
    1bf6:	d000      	beq.n	1bfa <udc_process_setup+0x18a>
    1bf8:	e76f      	b.n	1ada <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    1bfa:	2a01      	cmp	r2, #1
    1bfc:	d000      	beq.n	1c00 <udc_process_setup+0x190>
    1bfe:	e0c3      	b.n	1d88 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1c00:	4b52      	ldr	r3, [pc, #328]	; (1d4c <udc_process_setup+0x2dc>)
    1c02:	781b      	ldrb	r3, [r3, #0]
    1c04:	2b00      	cmp	r3, #0
    1c06:	d100      	bne.n	1c0a <udc_process_setup+0x19a>
    1c08:	e0be      	b.n	1d88 <udc_process_setup+0x318>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1c0a:	4b46      	ldr	r3, [pc, #280]	; (1d24 <udc_process_setup+0x2b4>)
    1c0c:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1c0e:	4b50      	ldr	r3, [pc, #320]	; (1d50 <udc_process_setup+0x2e0>)
    1c10:	681d      	ldr	r5, [r3, #0]
    1c12:	682b      	ldr	r3, [r5, #0]
    1c14:	791b      	ldrb	r3, [r3, #4]
    1c16:	42a3      	cmp	r3, r4
    1c18:	d800      	bhi.n	1c1c <udc_process_setup+0x1ac>
    1c1a:	e0b5      	b.n	1d88 <udc_process_setup+0x318>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1c1c:	2100      	movs	r1, #0
    1c1e:	0020      	movs	r0, r4
    1c20:	4b4c      	ldr	r3, [pc, #304]	; (1d54 <udc_process_setup+0x2e4>)
    1c22:	4798      	blx	r3
    1c24:	2800      	cmp	r0, #0
    1c26:	d100      	bne.n	1c2a <udc_process_setup+0x1ba>
    1c28:	e730      	b.n	1a8c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c2a:	686b      	ldr	r3, [r5, #4]
    1c2c:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    1c2e:	58e3      	ldr	r3, [r4, r3]
    1c30:	68db      	ldr	r3, [r3, #12]
    1c32:	4798      	blx	r3
    1c34:	4b48      	ldr	r3, [pc, #288]	; (1d58 <udc_process_setup+0x2e8>)
    1c36:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    1c38:	2101      	movs	r1, #1
    1c3a:	0018      	movs	r0, r3
    1c3c:	4b3c      	ldr	r3, [pc, #240]	; (1d30 <udc_process_setup+0x2c0>)
    1c3e:	4798      	blx	r3
    1c40:	e060      	b.n	1d04 <udc_process_setup+0x294>
    1c42:	221f      	movs	r2, #31
    1c44:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1c46:	d15f      	bne.n	1d08 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
    1c48:	4a36      	ldr	r2, [pc, #216]	; (1d24 <udc_process_setup+0x2b4>)
    1c4a:	7852      	ldrb	r2, [r2, #1]
    1c4c:	2a03      	cmp	r2, #3
    1c4e:	d100      	bne.n	1c52 <udc_process_setup+0x1e2>
    1c50:	e0f3      	b.n	1e3a <udc_process_setup+0x3ca>
    1c52:	b2d1      	uxtb	r1, r2
    1c54:	2903      	cmp	r1, #3
    1c56:	d93b      	bls.n	1cd0 <udc_process_setup+0x260>
    1c58:	2a05      	cmp	r2, #5
    1c5a:	d04b      	beq.n	1cf4 <udc_process_setup+0x284>
    1c5c:	2a09      	cmp	r2, #9
    1c5e:	d153      	bne.n	1d08 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1c60:	4b30      	ldr	r3, [pc, #192]	; (1d24 <udc_process_setup+0x2b4>)
    1c62:	88db      	ldrh	r3, [r3, #6]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d000      	beq.n	1c6a <udc_process_setup+0x1fa>
    1c68:	e717      	b.n	1a9a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    1c6a:	4b3c      	ldr	r3, [pc, #240]	; (1d5c <udc_process_setup+0x2ec>)
    1c6c:	4798      	blx	r3
    1c6e:	2800      	cmp	r0, #0
    1c70:	d100      	bne.n	1c74 <udc_process_setup+0x204>
    1c72:	e70b      	b.n	1a8c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c74:	4b2b      	ldr	r3, [pc, #172]	; (1d24 <udc_process_setup+0x2b4>)
    1c76:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    1c78:	4b2f      	ldr	r3, [pc, #188]	; (1d38 <udc_process_setup+0x2c8>)
    1c7a:	681b      	ldr	r3, [r3, #0]
    1c7c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c7e:	429a      	cmp	r2, r3
    1c80:	dd00      	ble.n	1c84 <udc_process_setup+0x214>
    1c82:	e703      	b.n	1a8c <udc_process_setup+0x1c>
	udc_reset();
    1c84:	4b36      	ldr	r3, [pc, #216]	; (1d60 <udc_process_setup+0x2f0>)
    1c86:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1c88:	4b26      	ldr	r3, [pc, #152]	; (1d24 <udc_process_setup+0x2b4>)
    1c8a:	789b      	ldrb	r3, [r3, #2]
    1c8c:	4a2f      	ldr	r2, [pc, #188]	; (1d4c <udc_process_setup+0x2dc>)
    1c8e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    1c90:	2b00      	cmp	r3, #0
    1c92:	d037      	beq.n	1d04 <udc_process_setup+0x294>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c94:	4a33      	ldr	r2, [pc, #204]	; (1d64 <udc_process_setup+0x2f4>)
    1c96:	4694      	mov	ip, r2
    1c98:	4463      	add	r3, ip
    1c9a:	00db      	lsls	r3, r3, #3
    1c9c:	4a26      	ldr	r2, [pc, #152]	; (1d38 <udc_process_setup+0x2c8>)
    1c9e:	6852      	ldr	r2, [r2, #4]
    1ca0:	18d3      	adds	r3, r2, r3
    1ca2:	4a2b      	ldr	r2, [pc, #172]	; (1d50 <udc_process_setup+0x2e0>)
    1ca4:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ca6:	681b      	ldr	r3, [r3, #0]
    1ca8:	791b      	ldrb	r3, [r3, #4]
    1caa:	2b00      	cmp	r3, #0
    1cac:	d02a      	beq.n	1d04 <udc_process_setup+0x294>
    1cae:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    1cb0:	4d2d      	ldr	r5, [pc, #180]	; (1d68 <udc_process_setup+0x2f8>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cb2:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    1cb4:	2100      	movs	r1, #0
    1cb6:	0020      	movs	r0, r4
    1cb8:	47a8      	blx	r5
    1cba:	2800      	cmp	r0, #0
    1cbc:	d100      	bne.n	1cc0 <udc_process_setup+0x250>
    1cbe:	e6e5      	b.n	1a8c <udc_process_setup+0x1c>
			iface_num++) {
    1cc0:	3401      	adds	r4, #1
    1cc2:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1cc4:	6833      	ldr	r3, [r6, #0]
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	791b      	ldrb	r3, [r3, #4]
    1cca:	42a3      	cmp	r3, r4
    1ccc:	d8f2      	bhi.n	1cb4 <udc_process_setup+0x244>
    1cce:	e019      	b.n	1d04 <udc_process_setup+0x294>
			switch (udd_g_ctrlreq.req.bRequest) {
    1cd0:	2a01      	cmp	r2, #1
    1cd2:	d119      	bne.n	1d08 <udc_process_setup+0x298>
	if (udd_g_ctrlreq.req.wLength) {
    1cd4:	4b13      	ldr	r3, [pc, #76]	; (1d24 <udc_process_setup+0x2b4>)
    1cd6:	88db      	ldrh	r3, [r3, #6]
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d000      	beq.n	1cde <udc_process_setup+0x26e>
    1cdc:	e6dd      	b.n	1a9a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1cde:	4b11      	ldr	r3, [pc, #68]	; (1d24 <udc_process_setup+0x2b4>)
    1ce0:	885b      	ldrh	r3, [r3, #2]
    1ce2:	2b01      	cmp	r3, #1
    1ce4:	d000      	beq.n	1ce8 <udc_process_setup+0x278>
    1ce6:	e6d8      	b.n	1a9a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1ce8:	4a12      	ldr	r2, [pc, #72]	; (1d34 <udc_process_setup+0x2c4>)
    1cea:	8813      	ldrh	r3, [r2, #0]
    1cec:	2102      	movs	r1, #2
    1cee:	438b      	bics	r3, r1
    1cf0:	8013      	strh	r3, [r2, #0]
    1cf2:	e007      	b.n	1d04 <udc_process_setup+0x294>
	if (udd_g_ctrlreq.req.wLength) {
    1cf4:	4b0b      	ldr	r3, [pc, #44]	; (1d24 <udc_process_setup+0x2b4>)
    1cf6:	88db      	ldrh	r3, [r3, #6]
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d000      	beq.n	1cfe <udc_process_setup+0x28e>
    1cfc:	e6cd      	b.n	1a9a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    1cfe:	4a1b      	ldr	r2, [pc, #108]	; (1d6c <udc_process_setup+0x2fc>)
    1d00:	4b08      	ldr	r3, [pc, #32]	; (1d24 <udc_process_setup+0x2b4>)
    1d02:	611a      	str	r2, [r3, #16]
			return true;
    1d04:	2001      	movs	r0, #1
    1d06:	e6d0      	b.n	1aaa <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1d08:	2b01      	cmp	r3, #1
    1d0a:	d031      	beq.n	1d70 <udc_process_setup+0x300>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1d0c:	2b02      	cmp	r3, #2
    1d0e:	d000      	beq.n	1d12 <udc_process_setup+0x2a2>
    1d10:	e6bc      	b.n	1a8c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    1d12:	4b04      	ldr	r3, [pc, #16]	; (1d24 <udc_process_setup+0x2b4>)
    1d14:	785b      	ldrb	r3, [r3, #1]
    1d16:	2b01      	cmp	r3, #1
    1d18:	d06c      	beq.n	1df4 <udc_process_setup+0x384>
    1d1a:	2b03      	cmp	r3, #3
    1d1c:	d100      	bne.n	1d20 <udc_process_setup+0x2b0>
    1d1e:	e078      	b.n	1e12 <udc_process_setup+0x3a2>
	return false;
    1d20:	2000      	movs	r0, #0
    1d22:	e08b      	b.n	1e3c <udc_process_setup+0x3cc>
    1d24:	20000588 	.word	0x20000588
    1d28:	00003569 	.word	0x00003569
    1d2c:	20000214 	.word	0x20000214
    1d30:	00003941 	.word	0x00003941
    1d34:	20000212 	.word	0x20000212
    1d38:	200000d8 	.word	0x200000d8
    1d3c:	0000a3c8 	.word	0x0000a3c8
    1d40:	2000007c 	.word	0x2000007c
    1d44:	20000098 	.word	0x20000098
    1d48:	2000009c 	.word	0x2000009c
    1d4c:	2000021c 	.word	0x2000021c
    1d50:	20000220 	.word	0x20000220
    1d54:	0000189d 	.word	0x0000189d
    1d58:	20000218 	.word	0x20000218
    1d5c:	00003931 	.word	0x00003931
    1d60:	000019e1 	.word	0x000019e1
    1d64:	1fffffff 	.word	0x1fffffff
    1d68:	0000197d 	.word	0x0000197d
    1d6c:	00001885 	.word	0x00001885
			switch (udd_g_ctrlreq.req.bRequest) {
    1d70:	4a4a      	ldr	r2, [pc, #296]	; (1e9c <udc_process_setup+0x42c>)
    1d72:	7852      	ldrb	r2, [r2, #1]
    1d74:	2a0b      	cmp	r2, #11
    1d76:	d1c9      	bne.n	1d0c <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
    1d78:	4b48      	ldr	r3, [pc, #288]	; (1e9c <udc_process_setup+0x42c>)
    1d7a:	88db      	ldrh	r3, [r3, #6]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d103      	bne.n	1d88 <udc_process_setup+0x318>
	if (!udc_num_configuration) {
    1d80:	4b47      	ldr	r3, [pc, #284]	; (1ea0 <udc_process_setup+0x430>)
    1d82:	781b      	ldrb	r3, [r3, #0]
    1d84:	2b00      	cmp	r3, #0
    1d86:	d127      	bne.n	1dd8 <udc_process_setup+0x368>
	if (0 == udc_num_configuration) {
    1d88:	4b45      	ldr	r3, [pc, #276]	; (1ea0 <udc_process_setup+0x430>)
    1d8a:	781b      	ldrb	r3, [r3, #0]
	return false;
    1d8c:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d100      	bne.n	1d94 <udc_process_setup+0x324>
    1d92:	e68a      	b.n	1aaa <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d94:	4b41      	ldr	r3, [pc, #260]	; (1e9c <udc_process_setup+0x42c>)
    1d96:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d98:	4b42      	ldr	r3, [pc, #264]	; (1ea4 <udc_process_setup+0x434>)
    1d9a:	681d      	ldr	r5, [r3, #0]
    1d9c:	682b      	ldr	r3, [r5, #0]
    1d9e:	791b      	ldrb	r3, [r3, #4]
    1da0:	42a3      	cmp	r3, r4
    1da2:	d800      	bhi.n	1da6 <udc_process_setup+0x336>
    1da4:	e681      	b.n	1aaa <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    1da6:	2100      	movs	r1, #0
    1da8:	0020      	movs	r0, r4
    1daa:	4b3f      	ldr	r3, [pc, #252]	; (1ea8 <udc_process_setup+0x438>)
    1dac:	4798      	blx	r3
    1dae:	2800      	cmp	r0, #0
    1db0:	d100      	bne.n	1db4 <udc_process_setup+0x344>
    1db2:	e672      	b.n	1a9a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1db4:	686b      	ldr	r3, [r5, #4]
    1db6:	00a2      	lsls	r2, r4, #2
    1db8:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1dba:	68eb      	ldr	r3, [r5, #12]
    1dbc:	4798      	blx	r3
    1dbe:	0001      	movs	r1, r0
    1dc0:	0020      	movs	r0, r4
    1dc2:	4b39      	ldr	r3, [pc, #228]	; (1ea8 <udc_process_setup+0x438>)
    1dc4:	4798      	blx	r3
    1dc6:	2800      	cmp	r0, #0
    1dc8:	d100      	bne.n	1dcc <udc_process_setup+0x35c>
    1dca:	e666      	b.n	1a9a <udc_process_setup+0x2a>
	return udi_api->setup();
    1dcc:	68ab      	ldr	r3, [r5, #8]
    1dce:	4798      	blx	r3
		if (udc_req_iface()) {
    1dd0:	2800      	cmp	r0, #0
    1dd2:	d000      	beq.n	1dd6 <udc_process_setup+0x366>
    1dd4:	e669      	b.n	1aaa <udc_process_setup+0x3a>
    1dd6:	e660      	b.n	1a9a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1dd8:	4b30      	ldr	r3, [pc, #192]	; (1e9c <udc_process_setup+0x42c>)
    1dda:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1ddc:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    1dde:	0028      	movs	r0, r5
    1de0:	4b32      	ldr	r3, [pc, #200]	; (1eac <udc_process_setup+0x43c>)
    1de2:	4798      	blx	r3
    1de4:	2800      	cmp	r0, #0
    1de6:	d100      	bne.n	1dea <udc_process_setup+0x37a>
    1de8:	e650      	b.n	1a8c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    1dea:	b2e1      	uxtb	r1, r4
    1dec:	0028      	movs	r0, r5
    1dee:	4b30      	ldr	r3, [pc, #192]	; (1eb0 <udc_process_setup+0x440>)
    1df0:	4798      	blx	r3
    1df2:	e023      	b.n	1e3c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1df4:	4b29      	ldr	r3, [pc, #164]	; (1e9c <udc_process_setup+0x42c>)
    1df6:	88db      	ldrh	r3, [r3, #6]
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d000      	beq.n	1dfe <udc_process_setup+0x38e>
    1dfc:	e64d      	b.n	1a9a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1dfe:	4b27      	ldr	r3, [pc, #156]	; (1e9c <udc_process_setup+0x42c>)
    1e00:	885b      	ldrh	r3, [r3, #2]
    1e02:	2b00      	cmp	r3, #0
    1e04:	d000      	beq.n	1e08 <udc_process_setup+0x398>
    1e06:	e648      	b.n	1a9a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e08:	4b24      	ldr	r3, [pc, #144]	; (1e9c <udc_process_setup+0x42c>)
    1e0a:	7918      	ldrb	r0, [r3, #4]
    1e0c:	4b29      	ldr	r3, [pc, #164]	; (1eb4 <udc_process_setup+0x444>)
    1e0e:	4798      	blx	r3
    1e10:	e014      	b.n	1e3c <udc_process_setup+0x3cc>
	if (udd_g_ctrlreq.req.wLength) {
    1e12:	4b22      	ldr	r3, [pc, #136]	; (1e9c <udc_process_setup+0x42c>)
    1e14:	88db      	ldrh	r3, [r3, #6]
    1e16:	2b00      	cmp	r3, #0
    1e18:	d000      	beq.n	1e1c <udc_process_setup+0x3ac>
    1e1a:	e63e      	b.n	1a9a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1e1c:	4b1f      	ldr	r3, [pc, #124]	; (1e9c <udc_process_setup+0x42c>)
    1e1e:	885b      	ldrh	r3, [r3, #2]
    1e20:	2b00      	cmp	r3, #0
    1e22:	d000      	beq.n	1e26 <udc_process_setup+0x3b6>
    1e24:	e639      	b.n	1a9a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e26:	4c1d      	ldr	r4, [pc, #116]	; (1e9c <udc_process_setup+0x42c>)
    1e28:	7920      	ldrb	r0, [r4, #4]
    1e2a:	4b23      	ldr	r3, [pc, #140]	; (1eb8 <udc_process_setup+0x448>)
    1e2c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1e2e:	7920      	ldrb	r0, [r4, #4]
    1e30:	4b22      	ldr	r3, [pc, #136]	; (1ebc <udc_process_setup+0x44c>)
    1e32:	4798      	blx	r3
    1e34:	e002      	b.n	1e3c <udc_process_setup+0x3cc>
		return false;
    1e36:	2000      	movs	r0, #0
    1e38:	e000      	b.n	1e3c <udc_process_setup+0x3cc>
				return udc_req_std_dev_set_feature();
    1e3a:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d000      	beq.n	1e42 <udc_process_setup+0x3d2>
    1e40:	e633      	b.n	1aaa <udc_process_setup+0x3a>
    1e42:	e623      	b.n	1a8c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
    1e44:	4b16      	ldr	r3, [pc, #88]	; (1ea0 <udc_process_setup+0x430>)
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d100      	bne.n	1e4e <udc_process_setup+0x3de>
    1e4c:	e62d      	b.n	1aaa <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e4e:	4b15      	ldr	r3, [pc, #84]	; (1ea4 <udc_process_setup+0x434>)
    1e50:	681b      	ldr	r3, [r3, #0]
    1e52:	681a      	ldr	r2, [r3, #0]
    1e54:	7912      	ldrb	r2, [r2, #4]
    1e56:	2a00      	cmp	r2, #0
    1e58:	d01a      	beq.n	1e90 <udc_process_setup+0x420>
    1e5a:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e5c:	4e12      	ldr	r6, [pc, #72]	; (1ea8 <udc_process_setup+0x438>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e5e:	4f11      	ldr	r7, [pc, #68]	; (1ea4 <udc_process_setup+0x434>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1e60:	685b      	ldr	r3, [r3, #4]
    1e62:	00aa      	lsls	r2, r5, #2
    1e64:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e66:	68e3      	ldr	r3, [r4, #12]
    1e68:	4798      	blx	r3
    1e6a:	0001      	movs	r1, r0
    1e6c:	0028      	movs	r0, r5
    1e6e:	47b0      	blx	r6
    1e70:	2800      	cmp	r0, #0
    1e72:	d100      	bne.n	1e76 <udc_process_setup+0x406>
    1e74:	e619      	b.n	1aaa <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    1e76:	68a3      	ldr	r3, [r4, #8]
    1e78:	4798      	blx	r3
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d000      	beq.n	1e80 <udc_process_setup+0x410>
    1e7e:	e614      	b.n	1aaa <udc_process_setup+0x3a>
			iface_num++) {
    1e80:	3501      	adds	r5, #1
    1e82:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e84:	683b      	ldr	r3, [r7, #0]
    1e86:	681a      	ldr	r2, [r3, #0]
    1e88:	7912      	ldrb	r2, [r2, #4]
    1e8a:	42aa      	cmp	r2, r5
    1e8c:	d8e8      	bhi.n	1e60 <udc_process_setup+0x3f0>
    1e8e:	e60c      	b.n	1aaa <udc_process_setup+0x3a>
	return false;
    1e90:	2000      	movs	r0, #0
    1e92:	e60a      	b.n	1aaa <udc_process_setup+0x3a>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1e94:	2103      	movs	r1, #3
		str = udc_string_product_name;
    1e96:	4c0a      	ldr	r4, [pc, #40]	; (1ec0 <udc_process_setup+0x450>)
    1e98:	e688      	b.n	1bac <udc_process_setup+0x13c>
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	20000588 	.word	0x20000588
    1ea0:	2000021c 	.word	0x2000021c
    1ea4:	20000220 	.word	0x20000220
    1ea8:	0000189d 	.word	0x0000189d
    1eac:	00001911 	.word	0x00001911
    1eb0:	0000197d 	.word	0x0000197d
    1eb4:	000036ad 	.word	0x000036ad
    1eb8:	000033bd 	.word	0x000033bd
    1ebc:	0000357d 	.word	0x0000357d
    1ec0:	200000a8 	.word	0x200000a8

00001ec4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1ec4:	4a04      	ldr	r2, [pc, #16]	; (1ed8 <_extint_enable+0x14>)
    1ec6:	7813      	ldrb	r3, [r2, #0]
    1ec8:	2102      	movs	r1, #2
    1eca:	430b      	orrs	r3, r1
    1ecc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1ece:	7853      	ldrb	r3, [r2, #1]
    1ed0:	b25b      	sxtb	r3, r3
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	dbfb      	blt.n	1ece <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1ed6:	4770      	bx	lr
    1ed8:	40001800 	.word	0x40001800

00001edc <_system_extint_init>:
{
    1edc:	b500      	push	{lr}
    1ede:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    1ee0:	4a12      	ldr	r2, [pc, #72]	; (1f2c <_system_extint_init+0x50>)
    1ee2:	6993      	ldr	r3, [r2, #24]
    1ee4:	2140      	movs	r1, #64	; 0x40
    1ee6:	430b      	orrs	r3, r1
    1ee8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1eea:	a901      	add	r1, sp, #4
    1eec:	2300      	movs	r3, #0
    1eee:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1ef0:	2005      	movs	r0, #5
    1ef2:	4b0f      	ldr	r3, [pc, #60]	; (1f30 <_system_extint_init+0x54>)
    1ef4:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    1ef6:	2005      	movs	r0, #5
    1ef8:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <_system_extint_init+0x58>)
    1efa:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1efc:	4a0e      	ldr	r2, [pc, #56]	; (1f38 <_system_extint_init+0x5c>)
    1efe:	7813      	ldrb	r3, [r2, #0]
    1f00:	2101      	movs	r1, #1
    1f02:	430b      	orrs	r3, r1
    1f04:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1f06:	7853      	ldrb	r3, [r2, #1]
    1f08:	b25b      	sxtb	r3, r3
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	dbfb      	blt.n	1f06 <_system_extint_init+0x2a>
    1f0e:	4b0b      	ldr	r3, [pc, #44]	; (1f3c <_system_extint_init+0x60>)
    1f10:	0019      	movs	r1, r3
    1f12:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    1f14:	2200      	movs	r2, #0
    1f16:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1f18:	4299      	cmp	r1, r3
    1f1a:	d1fc      	bne.n	1f16 <_system_extint_init+0x3a>
    1f1c:	2210      	movs	r2, #16
    1f1e:	4b08      	ldr	r3, [pc, #32]	; (1f40 <_system_extint_init+0x64>)
    1f20:	601a      	str	r2, [r3, #0]
	_extint_enable();
    1f22:	4b08      	ldr	r3, [pc, #32]	; (1f44 <_system_extint_init+0x68>)
    1f24:	4798      	blx	r3
}
    1f26:	b003      	add	sp, #12
    1f28:	bd00      	pop	{pc}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	40000400 	.word	0x40000400
    1f30:	00008909 	.word	0x00008909
    1f34:	0000887d 	.word	0x0000887d
    1f38:	40001800 	.word	0x40001800
    1f3c:	20000344 	.word	0x20000344
    1f40:	e000e100 	.word	0xe000e100
    1f44:	00001ec5 	.word	0x00001ec5

00001f48 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    1f48:	2300      	movs	r3, #0
    1f4a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    1f4c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1f4e:	2201      	movs	r2, #1
    1f50:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    1f52:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    1f54:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1f56:	3302      	adds	r3, #2
    1f58:	72c3      	strb	r3, [r0, #11]
}
    1f5a:	4770      	bx	lr

00001f5c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	b083      	sub	sp, #12
    1f60:	0005      	movs	r5, r0
    1f62:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f64:	a901      	add	r1, sp, #4
    1f66:	2300      	movs	r3, #0
    1f68:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1f6a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    1f6c:	7923      	ldrb	r3, [r4, #4]
    1f6e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1f70:	7a23      	ldrb	r3, [r4, #8]
    1f72:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1f74:	7820      	ldrb	r0, [r4, #0]
    1f76:	4b15      	ldr	r3, [pc, #84]	; (1fcc <extint_chan_set_config+0x70>)
    1f78:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    1f7a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    1f7c:	2d1f      	cmp	r5, #31
    1f7e:	d800      	bhi.n	1f82 <extint_chan_set_config+0x26>
		return eics[eic_index];
    1f80:	4813      	ldr	r0, [pc, #76]	; (1fd0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    1f82:	2207      	movs	r2, #7
    1f84:	402a      	ands	r2, r5
    1f86:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    1f88:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1f8a:	7aa3      	ldrb	r3, [r4, #10]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d001      	beq.n	1f94 <extint_chan_set_config+0x38>
    1f90:	2308      	movs	r3, #8
    1f92:	431f      	orrs	r7, r3
    1f94:	08eb      	lsrs	r3, r5, #3
    1f96:	009b      	lsls	r3, r3, #2
    1f98:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    1f9a:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1f9c:	260f      	movs	r6, #15
    1f9e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    1fa0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    1fa2:	4097      	lsls	r7, r2
    1fa4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1fa6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    1fa8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    1faa:	7a63      	ldrb	r3, [r4, #9]
    1fac:	2b00      	cmp	r3, #0
    1fae:	d106      	bne.n	1fbe <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    1fb0:	6943      	ldr	r3, [r0, #20]
    1fb2:	2201      	movs	r2, #1
    1fb4:	40aa      	lsls	r2, r5
    1fb6:	4393      	bics	r3, r2
    1fb8:	6143      	str	r3, [r0, #20]
	}
}
    1fba:	b003      	add	sp, #12
    1fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    1fbe:	6942      	ldr	r2, [r0, #20]
    1fc0:	2301      	movs	r3, #1
    1fc2:	40ab      	lsls	r3, r5
    1fc4:	4313      	orrs	r3, r2
    1fc6:	6143      	str	r3, [r0, #20]
    1fc8:	e7f7      	b.n	1fba <extint_chan_set_config+0x5e>
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	00008a01 	.word	0x00008a01
    1fd0:	40001800 	.word	0x40001800

00001fd4 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1fd4:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1fd6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1fd8:	b25b      	sxtb	r3, r3
    1fda:	2b00      	cmp	r3, #0
    1fdc:	dbfb      	blt.n	1fd6 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1fde:	8813      	ldrh	r3, [r2, #0]
    1fe0:	2102      	movs	r1, #2
    1fe2:	430b      	orrs	r3, r1
    1fe4:	8013      	strh	r3, [r2, #0]
}
    1fe6:	4770      	bx	lr

00001fe8 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1fe8:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1fea:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1fec:	b25b      	sxtb	r3, r3
    1fee:	2b00      	cmp	r3, #0
    1ff0:	dbfb      	blt.n	1fea <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1ff2:	23c1      	movs	r3, #193	; 0xc1
    1ff4:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1ff6:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1ff8:	8813      	ldrh	r3, [r2, #0]
    1ffa:	2102      	movs	r1, #2
    1ffc:	438b      	bics	r3, r1
    1ffe:	8013      	strh	r3, [r2, #0]
}
    2000:	4770      	bx	lr
	...

00002004 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    2004:	b570      	push	{r4, r5, r6, lr}
    2006:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2008:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    200a:	4b06      	ldr	r3, [pc, #24]	; (2024 <rtc_calendar_reset+0x20>)
    200c:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    200e:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2010:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    2012:	b25b      	sxtb	r3, r3
    2014:	2b00      	cmp	r3, #0
    2016:	dbfb      	blt.n	2010 <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    2018:	882b      	ldrh	r3, [r5, #0]
    201a:	2201      	movs	r2, #1
    201c:	4313      	orrs	r3, r2
    201e:	802b      	strh	r3, [r5, #0]
}
    2020:	bd70      	pop	{r4, r5, r6, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	00001fe9 	.word	0x00001fe9

00002028 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    2028:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    202a:	88cb      	ldrh	r3, [r1, #6]
    202c:	88c2      	ldrh	r2, [r0, #6]
    202e:	1a9a      	subs	r2, r3, r2
    2030:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    2032:	794b      	ldrb	r3, [r1, #5]
    2034:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    2036:	790c      	ldrb	r4, [r1, #4]
    2038:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    203a:	4323      	orrs	r3, r4
    203c:	788c      	ldrb	r4, [r1, #2]
    203e:	0324      	lsls	r4, r4, #12
    2040:	4323      	orrs	r3, r4
    2042:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    2044:	7902      	ldrb	r2, [r0, #4]
    2046:	2a00      	cmp	r2, #0
    2048:	d105      	bne.n	2056 <rtc_calendar_time_to_register_value+0x2e>
    204a:	78ca      	ldrb	r2, [r1, #3]
    204c:	2a00      	cmp	r2, #0
    204e:	d002      	beq.n	2056 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    2050:	2280      	movs	r2, #128	; 0x80
    2052:	0252      	lsls	r2, r2, #9
    2054:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    2056:	7848      	ldrb	r0, [r1, #1]
    2058:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    205a:	780a      	ldrb	r2, [r1, #0]
    205c:	4310      	orrs	r0, r2
    205e:	4318      	orrs	r0, r3

	return register_value;
}
    2060:	bd10      	pop	{r4, pc}

00002062 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    2062:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    2064:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    2066:	88c4      	ldrh	r4, [r0, #6]
    2068:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    206a:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    206c:	018b      	lsls	r3, r1, #6
    206e:	0f1b      	lsrs	r3, r3, #28
    2070:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    2072:	028b      	lsls	r3, r1, #10
    2074:	0edb      	lsrs	r3, r3, #27
    2076:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    2078:	7903      	ldrb	r3, [r0, #4]
    207a:	2b00      	cmp	r3, #0
    207c:	d10c      	bne.n	2098 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    207e:	040b      	lsls	r3, r1, #16
    2080:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    2082:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    2084:	03cb      	lsls	r3, r1, #15
    2086:	0fdb      	lsrs	r3, r3, #31
    2088:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    208a:	0988      	lsrs	r0, r1, #6
    208c:	233f      	movs	r3, #63	; 0x3f
    208e:	4018      	ands	r0, r3
    2090:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    2092:	4019      	ands	r1, r3
    2094:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    2096:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    2098:	03cb      	lsls	r3, r1, #15
    209a:	0edb      	lsrs	r3, r3, #27
    209c:	7093      	strb	r3, [r2, #2]
    209e:	e7f4      	b.n	208a <rtc_calendar_register_value_to_time+0x28>

000020a0 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    20a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    20a2:	6804      	ldr	r4, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
    20a4:	4b03      	ldr	r3, [pc, #12]	; (20b4 <rtc_calendar_set_time+0x14>)
    20a6:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    20a8:	7aa3      	ldrb	r3, [r4, #10]

	while (rtc_calendar_is_syncing(module)) {
    20aa:	b25b      	sxtb	r3, r3
    20ac:	2b00      	cmp	r3, #0
    20ae:	dbfb      	blt.n	20a8 <rtc_calendar_set_time+0x8>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
    20b0:	6120      	str	r0, [r4, #16]
}
    20b2:	bd10      	pop	{r4, pc}
    20b4:	00002029 	.word	0x00002029

000020b8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    20b8:	b510      	push	{r4, lr}
    20ba:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    20bc:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    20be:	7941      	ldrb	r1, [r0, #5]
    20c0:	2900      	cmp	r1, #0
    20c2:	d006      	beq.n	20d2 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    20c4:	8859      	ldrh	r1, [r3, #2]
    20c6:	0449      	lsls	r1, r1, #17
    20c8:	d50b      	bpl.n	20e2 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    20ca:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    20cc:	4b0a      	ldr	r3, [pc, #40]	; (20f8 <rtc_calendar_get_time+0x40>)
    20ce:	4798      	blx	r3
}
    20d0:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    20d2:	490a      	ldr	r1, [pc, #40]	; (20fc <rtc_calendar_get_time+0x44>)
    20d4:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    20d6:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    20d8:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    20da:	b249      	sxtb	r1, r1
    20dc:	2900      	cmp	r1, #0
    20de:	dbfb      	blt.n	20d8 <rtc_calendar_get_time+0x20>
    20e0:	e7f3      	b.n	20ca <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    20e2:	8859      	ldrh	r1, [r3, #2]
    20e4:	24c0      	movs	r4, #192	; 0xc0
    20e6:	0224      	lsls	r4, r4, #8
    20e8:	4321      	orrs	r1, r4
    20ea:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    20ec:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    20ee:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    20f0:	b249      	sxtb	r1, r1
    20f2:	2900      	cmp	r1, #0
    20f4:	dbfb      	blt.n	20ee <rtc_calendar_get_time+0x36>
    20f6:	e7e8      	b.n	20ca <rtc_calendar_get_time+0x12>
    20f8:	00002063 	.word	0x00002063
    20fc:	ffff8000 	.word	0xffff8000

00002100 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    2100:	b570      	push	{r4, r5, r6, lr}
    2102:	000d      	movs	r5, r1
    2104:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    2106:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    2108:	2a01      	cmp	r2, #1
    210a:	d901      	bls.n	2110 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    210c:	0018      	movs	r0, r3
    210e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    2110:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    2112:	4b06      	ldr	r3, [pc, #24]	; (212c <rtc_calendar_set_alarm+0x2c>)
    2114:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    2116:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    2118:	b25b      	sxtb	r3, r3
    211a:	2b00      	cmp	r3, #0
    211c:	dbfb      	blt.n	2116 <rtc_calendar_set_alarm+0x16>
    211e:	00e4      	lsls	r4, r4, #3
    2120:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    2122:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    2124:	7a2b      	ldrb	r3, [r5, #8]
    2126:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    2128:	2300      	movs	r3, #0
    212a:	e7ef      	b.n	210c <rtc_calendar_set_alarm+0xc>
    212c:	00002029 	.word	0x00002029

00002130 <rtc_calendar_init>:
{
    2130:	b530      	push	{r4, r5, lr}
    2132:	b083      	sub	sp, #12
    2134:	0005      	movs	r5, r0
    2136:	0014      	movs	r4, r2
	module->hw = hw;
    2138:	6001      	str	r1, [r0, #0]
    213a:	4a1c      	ldr	r2, [pc, #112]	; (21ac <rtc_calendar_init+0x7c>)
    213c:	6993      	ldr	r3, [r2, #24]
    213e:	2120      	movs	r1, #32
    2140:	430b      	orrs	r3, r1
    2142:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    2144:	a901      	add	r1, sp, #4
    2146:	2302      	movs	r3, #2
    2148:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    214a:	2004      	movs	r0, #4
    214c:	4b18      	ldr	r3, [pc, #96]	; (21b0 <rtc_calendar_init+0x80>)
    214e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    2150:	2004      	movs	r0, #4
    2152:	4b18      	ldr	r3, [pc, #96]	; (21b4 <rtc_calendar_init+0x84>)
    2154:	4798      	blx	r3
	rtc_calendar_reset(module);
    2156:	0028      	movs	r0, r5
    2158:	4b17      	ldr	r3, [pc, #92]	; (21b8 <rtc_calendar_init+0x88>)
    215a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    215c:	7923      	ldrb	r3, [r4, #4]
    215e:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    2160:	78e3      	ldrb	r3, [r4, #3]
    2162:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    2164:	88e3      	ldrh	r3, [r4, #6]
    2166:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    2168:	4b14      	ldr	r3, [pc, #80]	; (21bc <rtc_calendar_init+0x8c>)
    216a:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    216c:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    216e:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    2170:	7921      	ldrb	r1, [r4, #4]
    2172:	2900      	cmp	r1, #0
    2174:	d017      	beq.n	21a6 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    2176:	2108      	movs	r1, #8
    2178:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    217a:	78a1      	ldrb	r1, [r4, #2]
    217c:	2900      	cmp	r1, #0
    217e:	d001      	beq.n	2184 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    2180:	2180      	movs	r1, #128	; 0x80
    2182:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    2184:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    2186:	78e3      	ldrb	r3, [r4, #3]
    2188:	2b00      	cmp	r3, #0
    218a:	d004      	beq.n	2196 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    218c:	8853      	ldrh	r3, [r2, #2]
    218e:	2180      	movs	r1, #128	; 0x80
    2190:	01c9      	lsls	r1, r1, #7
    2192:	430b      	orrs	r3, r1
    2194:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    2196:	0021      	movs	r1, r4
    2198:	3108      	adds	r1, #8
    219a:	2200      	movs	r2, #0
    219c:	0028      	movs	r0, r5
    219e:	4b08      	ldr	r3, [pc, #32]	; (21c0 <rtc_calendar_init+0x90>)
    21a0:	4798      	blx	r3
}
    21a2:	b003      	add	sp, #12
    21a4:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    21a6:	2148      	movs	r1, #72	; 0x48
    21a8:	430b      	orrs	r3, r1
    21aa:	e7e6      	b.n	217a <rtc_calendar_init+0x4a>
    21ac:	40000400 	.word	0x40000400
    21b0:	00008909 	.word	0x00008909
    21b4:	0000887d 	.word	0x0000887d
    21b8:	00002005 	.word	0x00002005
    21bc:	20000384 	.word	0x20000384
    21c0:	00002101 	.word	0x00002101

000021c4 <rtc_calendar_get_alarm>:
 */
enum status_code rtc_calendar_get_alarm(
		struct rtc_module *const module,
		struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	000c      	movs	r4, r1

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    21c8:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    21ca:	2a01      	cmp	r2, #1
    21cc:	d901      	bls.n	21d2 <rtc_calendar_get_alarm+0xe>

	/* Read alarm mask */
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;

	return STATUS_OK;
}
    21ce:	0018      	movs	r0, r3
    21d0:	bd70      	pop	{r4, r5, r6, pc}
    21d2:	00d2      	lsls	r2, r2, #3
    21d4:	6803      	ldr	r3, [r0, #0]
    21d6:	189d      	adds	r5, r3, r2
	uint32_t register_value =
    21d8:	69a9      	ldr	r1, [r5, #24]
	rtc_calendar_register_value_to_time(module, register_value, &(alarm->time));
    21da:	0022      	movs	r2, r4
    21dc:	4b02      	ldr	r3, [pc, #8]	; (21e8 <rtc_calendar_get_alarm+0x24>)
    21de:	4798      	blx	r3
	alarm->mask = (enum rtc_calendar_alarm_mask)rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg;
    21e0:	7f2b      	ldrb	r3, [r5, #28]
    21e2:	7223      	strb	r3, [r4, #8]
	return STATUS_OK;
    21e4:	2300      	movs	r3, #0
    21e6:	e7f2      	b.n	21ce <rtc_calendar_get_alarm+0xa>
    21e8:	00002063 	.word	0x00002063

000021ec <rtc_calendar_swap_time_mode>:
{
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	b086      	sub	sp, #24
    21f0:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    21f2:	6806      	ldr	r6, [r0, #0]
	rtc_calendar_get_time(module, &time);
    21f4:	a904      	add	r1, sp, #16
    21f6:	4b3d      	ldr	r3, [pc, #244]	; (22ec <rtc_calendar_swap_time_mode+0x100>)
    21f8:	4798      	blx	r3
	if (module->clock_24h) {
    21fa:	7923      	ldrb	r3, [r4, #4]
    21fc:	2b00      	cmp	r3, #0
    21fe:	d042      	beq.n	2286 <rtc_calendar_swap_time_mode+0x9a>
		time.pm = (uint8_t)(time.hour / 12);
    2200:	aa04      	add	r2, sp, #16
    2202:	7890      	ldrb	r0, [r2, #2]
    2204:	230b      	movs	r3, #11
    2206:	4283      	cmp	r3, r0
    2208:	419b      	sbcs	r3, r3
    220a:	425b      	negs	r3, r3
    220c:	70d3      	strb	r3, [r2, #3]
		time.hour = time.hour % 12;
    220e:	210c      	movs	r1, #12
    2210:	4b37      	ldr	r3, [pc, #220]	; (22f0 <rtc_calendar_swap_time_mode+0x104>)
    2212:	4798      	blx	r3
    2214:	b2c9      	uxtb	r1, r1
		if (time.hour == 0) {
    2216:	2900      	cmp	r1, #0
    2218:	d016      	beq.n	2248 <rtc_calendar_swap_time_mode+0x5c>
		time.hour = time.hour % 12;
    221a:	ab04      	add	r3, sp, #16
    221c:	7099      	strb	r1, [r3, #2]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    221e:	ad01      	add	r5, sp, #4
    2220:	2200      	movs	r2, #0
    2222:	0029      	movs	r1, r5
    2224:	0020      	movs	r0, r4
    2226:	4b33      	ldr	r3, [pc, #204]	; (22f4 <rtc_calendar_swap_time_mode+0x108>)
    2228:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
    222a:	78a8      	ldrb	r0, [r5, #2]
    222c:	230b      	movs	r3, #11
    222e:	4283      	cmp	r3, r0
    2230:	419b      	sbcs	r3, r3
    2232:	425b      	negs	r3, r3
    2234:	70eb      	strb	r3, [r5, #3]
			alarm.time.hour = alarm.time.hour % 12;
    2236:	210c      	movs	r1, #12
    2238:	4b2d      	ldr	r3, [pc, #180]	; (22f0 <rtc_calendar_swap_time_mode+0x104>)
    223a:	4798      	blx	r3
    223c:	b2c9      	uxtb	r1, r1
			if (alarm.time.hour == 0) {
    223e:	2900      	cmp	r1, #0
    2240:	d006      	beq.n	2250 <rtc_calendar_swap_time_mode+0x64>
			alarm.time.hour = alarm.time.hour % 12;
    2242:	ab01      	add	r3, sp, #4
    2244:	7099      	strb	r1, [r3, #2]
    2246:	e006      	b.n	2256 <rtc_calendar_swap_time_mode+0x6a>
			time.hour = 12;
    2248:	220c      	movs	r2, #12
    224a:	ab04      	add	r3, sp, #16
    224c:	709a      	strb	r2, [r3, #2]
    224e:	e7e6      	b.n	221e <rtc_calendar_swap_time_mode+0x32>
				alarm.time.hour = 12;
    2250:	220c      	movs	r2, #12
    2252:	ab01      	add	r3, sp, #4
    2254:	709a      	strb	r2, [r3, #2]
			module->clock_24h = false;
    2256:	2500      	movs	r5, #0
    2258:	7125      	strb	r5, [r4, #4]
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    225a:	2200      	movs	r2, #0
    225c:	a901      	add	r1, sp, #4
    225e:	0020      	movs	r0, r4
    2260:	4b25      	ldr	r3, [pc, #148]	; (22f8 <rtc_calendar_swap_time_mode+0x10c>)
    2262:	4798      	blx	r3
		module->clock_24h = false;
    2264:	7125      	strb	r5, [r4, #4]
	rtc_calendar_disable(module);
    2266:	0020      	movs	r0, r4
    2268:	4b24      	ldr	r3, [pc, #144]	; (22fc <rtc_calendar_swap_time_mode+0x110>)
    226a:	4798      	blx	r3
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
    226c:	8833      	ldrh	r3, [r6, #0]
    226e:	2240      	movs	r2, #64	; 0x40
    2270:	4053      	eors	r3, r2
    2272:	8033      	strh	r3, [r6, #0]
	rtc_calendar_enable(module);
    2274:	0020      	movs	r0, r4
    2276:	4b22      	ldr	r3, [pc, #136]	; (2300 <rtc_calendar_swap_time_mode+0x114>)
    2278:	4798      	blx	r3
	rtc_calendar_set_time(module, &time);
    227a:	a904      	add	r1, sp, #16
    227c:	0020      	movs	r0, r4
    227e:	4b21      	ldr	r3, [pc, #132]	; (2304 <rtc_calendar_swap_time_mode+0x118>)
    2280:	4798      	blx	r3
}
    2282:	b006      	add	sp, #24
    2284:	bd70      	pop	{r4, r5, r6, pc}
		if (time.pm == 1) {
    2286:	ab04      	add	r3, sp, #16
    2288:	78db      	ldrb	r3, [r3, #3]
    228a:	2b00      	cmp	r3, #0
    228c:	d015      	beq.n	22ba <rtc_calendar_swap_time_mode+0xce>
			time.hour = time.hour + 12;
    228e:	ab04      	add	r3, sp, #16
    2290:	789a      	ldrb	r2, [r3, #2]
    2292:	320c      	adds	r2, #12
    2294:	709a      	strb	r2, [r3, #2]
			time.pm = 0;
    2296:	2200      	movs	r2, #0
    2298:	70da      	strb	r2, [r3, #3]
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    229a:	ad01      	add	r5, sp, #4
    229c:	2200      	movs	r2, #0
    229e:	0029      	movs	r1, r5
    22a0:	0020      	movs	r0, r4
    22a2:	4b14      	ldr	r3, [pc, #80]	; (22f4 <rtc_calendar_swap_time_mode+0x108>)
    22a4:	4798      	blx	r3
			if (alarm.time.pm == 1) {
    22a6:	78eb      	ldrb	r3, [r5, #3]
    22a8:	2b00      	cmp	r3, #0
    22aa:	d10e      	bne.n	22ca <rtc_calendar_swap_time_mode+0xde>
			} else if (alarm.time.hour == 12) {
    22ac:	ab01      	add	r3, sp, #4
    22ae:	789b      	ldrb	r3, [r3, #2]
    22b0:	2b0c      	cmp	r3, #12
    22b2:	d017      	beq.n	22e4 <rtc_calendar_swap_time_mode+0xf8>
		module->clock_24h = true;
    22b4:	2301      	movs	r3, #1
    22b6:	7123      	strb	r3, [r4, #4]
    22b8:	e7d5      	b.n	2266 <rtc_calendar_swap_time_mode+0x7a>
		} else if (time.hour == 12) {
    22ba:	ab04      	add	r3, sp, #16
    22bc:	789b      	ldrb	r3, [r3, #2]
    22be:	2b0c      	cmp	r3, #12
    22c0:	d1eb      	bne.n	229a <rtc_calendar_swap_time_mode+0xae>
			time.hour = 0;
    22c2:	2200      	movs	r2, #0
    22c4:	ab04      	add	r3, sp, #16
    22c6:	709a      	strb	r2, [r3, #2]
    22c8:	e7e7      	b.n	229a <rtc_calendar_swap_time_mode+0xae>
				alarm.time.hour = alarm.time.hour + 12;
    22ca:	a901      	add	r1, sp, #4
    22cc:	788b      	ldrb	r3, [r1, #2]
    22ce:	330c      	adds	r3, #12
    22d0:	708b      	strb	r3, [r1, #2]
				alarm.time.pm = 0;
    22d2:	2300      	movs	r3, #0
    22d4:	70cb      	strb	r3, [r1, #3]
				module->clock_24h = true;
    22d6:	3301      	adds	r3, #1
    22d8:	7123      	strb	r3, [r4, #4]
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
    22da:	2200      	movs	r2, #0
    22dc:	0020      	movs	r0, r4
    22de:	4b06      	ldr	r3, [pc, #24]	; (22f8 <rtc_calendar_swap_time_mode+0x10c>)
    22e0:	4798      	blx	r3
    22e2:	e7e7      	b.n	22b4 <rtc_calendar_swap_time_mode+0xc8>
				alarm.time.hour = 0;
    22e4:	2200      	movs	r2, #0
    22e6:	ab01      	add	r3, sp, #4
    22e8:	709a      	strb	r2, [r3, #2]
    22ea:	e7e3      	b.n	22b4 <rtc_calendar_swap_time_mode+0xc8>
    22ec:	000020b9 	.word	0x000020b9
    22f0:	00008c91 	.word	0x00008c91
    22f4:	000021c5 	.word	0x000021c5
    22f8:	00002101 	.word	0x00002101
    22fc:	00001fe9 	.word	0x00001fe9
    2300:	00001fd5 	.word	0x00001fd5
    2304:	000020a1 	.word	0x000020a1

00002308 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2308:	4770      	bx	lr
	...

0000230c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    230e:	4b0a      	ldr	r3, [pc, #40]	; (2338 <_sercom_set_handler+0x2c>)
    2310:	781b      	ldrb	r3, [r3, #0]
    2312:	2b00      	cmp	r3, #0
    2314:	d10c      	bne.n	2330 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2316:	4f09      	ldr	r7, [pc, #36]	; (233c <_sercom_set_handler+0x30>)
    2318:	4e09      	ldr	r6, [pc, #36]	; (2340 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    231a:	4d0a      	ldr	r5, [pc, #40]	; (2344 <_sercom_set_handler+0x38>)
    231c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    231e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2320:	195a      	adds	r2, r3, r5
    2322:	6014      	str	r4, [r2, #0]
    2324:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2326:	2b18      	cmp	r3, #24
    2328:	d1f9      	bne.n	231e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    232a:	2201      	movs	r2, #1
    232c:	4b02      	ldr	r3, [pc, #8]	; (2338 <_sercom_set_handler+0x2c>)
    232e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2330:	0080      	lsls	r0, r0, #2
    2332:	4b02      	ldr	r3, [pc, #8]	; (233c <_sercom_set_handler+0x30>)
    2334:	50c1      	str	r1, [r0, r3]
}
    2336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2338:	20000228 	.word	0x20000228
    233c:	2000022c 	.word	0x2000022c
    2340:	00002309 	.word	0x00002309
    2344:	20000388 	.word	0x20000388

00002348 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2348:	b500      	push	{lr}
    234a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    234c:	2309      	movs	r3, #9
    234e:	466a      	mov	r2, sp
    2350:	7013      	strb	r3, [r2, #0]
    2352:	3301      	adds	r3, #1
    2354:	7053      	strb	r3, [r2, #1]
    2356:	3301      	adds	r3, #1
    2358:	7093      	strb	r3, [r2, #2]
    235a:	3301      	adds	r3, #1
    235c:	70d3      	strb	r3, [r2, #3]
    235e:	3301      	adds	r3, #1
    2360:	7113      	strb	r3, [r2, #4]
    2362:	3301      	adds	r3, #1
    2364:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2366:	4b03      	ldr	r3, [pc, #12]	; (2374 <_sercom_get_interrupt_vector+0x2c>)
    2368:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    236a:	466b      	mov	r3, sp
    236c:	5618      	ldrsb	r0, [r3, r0]
}
    236e:	b003      	add	sp, #12
    2370:	bd00      	pop	{pc}
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	000074ad 	.word	0x000074ad

00002378 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2378:	b510      	push	{r4, lr}
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <SERCOM0_Handler+0xc>)
    237c:	681b      	ldr	r3, [r3, #0]
    237e:	2000      	movs	r0, #0
    2380:	4798      	blx	r3
    2382:	bd10      	pop	{r4, pc}
    2384:	2000022c 	.word	0x2000022c

00002388 <SERCOM1_Handler>:
    2388:	b510      	push	{r4, lr}
    238a:	4b02      	ldr	r3, [pc, #8]	; (2394 <SERCOM1_Handler+0xc>)
    238c:	685b      	ldr	r3, [r3, #4]
    238e:	2001      	movs	r0, #1
    2390:	4798      	blx	r3
    2392:	bd10      	pop	{r4, pc}
    2394:	2000022c 	.word	0x2000022c

00002398 <SERCOM2_Handler>:
    2398:	b510      	push	{r4, lr}
    239a:	4b02      	ldr	r3, [pc, #8]	; (23a4 <SERCOM2_Handler+0xc>)
    239c:	689b      	ldr	r3, [r3, #8]
    239e:	2002      	movs	r0, #2
    23a0:	4798      	blx	r3
    23a2:	bd10      	pop	{r4, pc}
    23a4:	2000022c 	.word	0x2000022c

000023a8 <SERCOM3_Handler>:
    23a8:	b510      	push	{r4, lr}
    23aa:	4b02      	ldr	r3, [pc, #8]	; (23b4 <SERCOM3_Handler+0xc>)
    23ac:	68db      	ldr	r3, [r3, #12]
    23ae:	2003      	movs	r0, #3
    23b0:	4798      	blx	r3
    23b2:	bd10      	pop	{r4, pc}
    23b4:	2000022c 	.word	0x2000022c

000023b8 <SERCOM4_Handler>:
    23b8:	b510      	push	{r4, lr}
    23ba:	4b02      	ldr	r3, [pc, #8]	; (23c4 <SERCOM4_Handler+0xc>)
    23bc:	691b      	ldr	r3, [r3, #16]
    23be:	2004      	movs	r0, #4
    23c0:	4798      	blx	r3
    23c2:	bd10      	pop	{r4, pc}
    23c4:	2000022c 	.word	0x2000022c

000023c8 <SERCOM5_Handler>:
    23c8:	b510      	push	{r4, lr}
    23ca:	4b02      	ldr	r3, [pc, #8]	; (23d4 <SERCOM5_Handler+0xc>)
    23cc:	695b      	ldr	r3, [r3, #20]
    23ce:	2005      	movs	r0, #5
    23d0:	4798      	blx	r3
    23d2:	bd10      	pop	{r4, pc}
    23d4:	2000022c 	.word	0x2000022c

000023d8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23da:	46de      	mov	lr, fp
    23dc:	4657      	mov	r7, sl
    23de:	464e      	mov	r6, r9
    23e0:	4645      	mov	r5, r8
    23e2:	b5e0      	push	{r5, r6, r7, lr}
    23e4:	b091      	sub	sp, #68	; 0x44
    23e6:	0005      	movs	r5, r0
    23e8:	000c      	movs	r4, r1
    23ea:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    23ec:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23ee:	0008      	movs	r0, r1
    23f0:	4bbc      	ldr	r3, [pc, #752]	; (26e4 <usart_init+0x30c>)
    23f2:	4798      	blx	r3
    23f4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    23f6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    23f8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    23fa:	07db      	lsls	r3, r3, #31
    23fc:	d506      	bpl.n	240c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    23fe:	b011      	add	sp, #68	; 0x44
    2400:	bc3c      	pop	{r2, r3, r4, r5}
    2402:	4690      	mov	r8, r2
    2404:	4699      	mov	r9, r3
    2406:	46a2      	mov	sl, r4
    2408:	46ab      	mov	fp, r5
    240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    240c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    240e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2410:	079b      	lsls	r3, r3, #30
    2412:	d4f4      	bmi.n	23fe <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    2414:	49b4      	ldr	r1, [pc, #720]	; (26e8 <usart_init+0x310>)
    2416:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2418:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    241a:	2301      	movs	r3, #1
    241c:	40bb      	lsls	r3, r7
    241e:	4303      	orrs	r3, r0
    2420:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2422:	a90f      	add	r1, sp, #60	; 0x3c
    2424:	272d      	movs	r7, #45	; 0x2d
    2426:	5df3      	ldrb	r3, [r6, r7]
    2428:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    242a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    242c:	b2d3      	uxtb	r3, r2
    242e:	9302      	str	r3, [sp, #8]
    2430:	0018      	movs	r0, r3
    2432:	4bae      	ldr	r3, [pc, #696]	; (26ec <usart_init+0x314>)
    2434:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2436:	9802      	ldr	r0, [sp, #8]
    2438:	4bad      	ldr	r3, [pc, #692]	; (26f0 <usart_init+0x318>)
    243a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    243c:	5df0      	ldrb	r0, [r6, r7]
    243e:	2100      	movs	r1, #0
    2440:	4bac      	ldr	r3, [pc, #688]	; (26f4 <usart_init+0x31c>)
    2442:	4798      	blx	r3
	module->character_size = config->character_size;
    2444:	7af3      	ldrb	r3, [r6, #11]
    2446:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2448:	2324      	movs	r3, #36	; 0x24
    244a:	5cf3      	ldrb	r3, [r6, r3]
    244c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    244e:	2325      	movs	r3, #37	; 0x25
    2450:	5cf3      	ldrb	r3, [r6, r3]
    2452:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2454:	7ef3      	ldrb	r3, [r6, #27]
    2456:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2458:	7f33      	ldrb	r3, [r6, #28]
    245a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    245c:	682b      	ldr	r3, [r5, #0]
    245e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2460:	0018      	movs	r0, r3
    2462:	4ba0      	ldr	r3, [pc, #640]	; (26e4 <usart_init+0x30c>)
    2464:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2466:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2468:	2200      	movs	r2, #0
    246a:	230e      	movs	r3, #14
    246c:	a906      	add	r1, sp, #24
    246e:	468c      	mov	ip, r1
    2470:	4463      	add	r3, ip
    2472:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2474:	8a32      	ldrh	r2, [r6, #16]
    2476:	9202      	str	r2, [sp, #8]
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	01db      	lsls	r3, r3, #7
    247c:	429a      	cmp	r2, r3
    247e:	d100      	bne.n	2482 <usart_init+0xaa>
    2480:	e09e      	b.n	25c0 <usart_init+0x1e8>
    2482:	d90f      	bls.n	24a4 <usart_init+0xcc>
    2484:	23c0      	movs	r3, #192	; 0xc0
    2486:	01db      	lsls	r3, r3, #7
    2488:	9a02      	ldr	r2, [sp, #8]
    248a:	429a      	cmp	r2, r3
    248c:	d100      	bne.n	2490 <usart_init+0xb8>
    248e:	e092      	b.n	25b6 <usart_init+0x1de>
    2490:	2380      	movs	r3, #128	; 0x80
    2492:	021b      	lsls	r3, r3, #8
    2494:	429a      	cmp	r2, r3
    2496:	d000      	beq.n	249a <usart_init+0xc2>
    2498:	e11f      	b.n	26da <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    249a:	2303      	movs	r3, #3
    249c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    249e:	2300      	movs	r3, #0
    24a0:	9307      	str	r3, [sp, #28]
    24a2:	e008      	b.n	24b6 <usart_init+0xde>
	switch (config->sample_rate) {
    24a4:	2380      	movs	r3, #128	; 0x80
    24a6:	019b      	lsls	r3, r3, #6
    24a8:	429a      	cmp	r2, r3
    24aa:	d000      	beq.n	24ae <usart_init+0xd6>
    24ac:	e115      	b.n	26da <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    24ae:	2310      	movs	r3, #16
    24b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    24b2:	3b0f      	subs	r3, #15
    24b4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    24b6:	6833      	ldr	r3, [r6, #0]
    24b8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    24ba:	68f3      	ldr	r3, [r6, #12]
    24bc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    24be:	6973      	ldr	r3, [r6, #20]
    24c0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    24c2:	7e33      	ldrb	r3, [r6, #24]
    24c4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    24c6:	2326      	movs	r3, #38	; 0x26
    24c8:	5cf3      	ldrb	r3, [r6, r3]
    24ca:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    24cc:	6873      	ldr	r3, [r6, #4]
    24ce:	4699      	mov	r9, r3
	switch (transfer_mode)
    24d0:	2b00      	cmp	r3, #0
    24d2:	d100      	bne.n	24d6 <usart_init+0xfe>
    24d4:	e0a0      	b.n	2618 <usart_init+0x240>
    24d6:	2380      	movs	r3, #128	; 0x80
    24d8:	055b      	lsls	r3, r3, #21
    24da:	4599      	cmp	r9, r3
    24dc:	d100      	bne.n	24e0 <usart_init+0x108>
    24de:	e084      	b.n	25ea <usart_init+0x212>
	if(config->encoding_format_enable) {
    24e0:	7e73      	ldrb	r3, [r6, #25]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d002      	beq.n	24ec <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    24e6:	7eb3      	ldrb	r3, [r6, #26]
    24e8:	4642      	mov	r2, r8
    24ea:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    24ec:	682a      	ldr	r2, [r5, #0]
    24ee:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    24f0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    24f2:	2b00      	cmp	r3, #0
    24f4:	d1fc      	bne.n	24f0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    24f6:	330e      	adds	r3, #14
    24f8:	aa06      	add	r2, sp, #24
    24fa:	4694      	mov	ip, r2
    24fc:	4463      	add	r3, ip
    24fe:	881b      	ldrh	r3, [r3, #0]
    2500:	4642      	mov	r2, r8
    2502:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2504:	9b05      	ldr	r3, [sp, #20]
    2506:	9a03      	ldr	r2, [sp, #12]
    2508:	4313      	orrs	r3, r2
    250a:	9a04      	ldr	r2, [sp, #16]
    250c:	4313      	orrs	r3, r2
    250e:	464a      	mov	r2, r9
    2510:	4313      	orrs	r3, r2
    2512:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2514:	465b      	mov	r3, fp
    2516:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2518:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    251a:	4653      	mov	r3, sl
    251c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    251e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2520:	2327      	movs	r3, #39	; 0x27
    2522:	5cf3      	ldrb	r3, [r6, r3]
    2524:	2b00      	cmp	r3, #0
    2526:	d101      	bne.n	252c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2528:	3304      	adds	r3, #4
    252a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    252c:	7e73      	ldrb	r3, [r6, #25]
    252e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2530:	7f32      	ldrb	r2, [r6, #28]
    2532:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2534:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2536:	7f72      	ldrb	r2, [r6, #29]
    2538:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    253a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    253c:	2224      	movs	r2, #36	; 0x24
    253e:	5cb2      	ldrb	r2, [r6, r2]
    2540:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2542:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2544:	2225      	movs	r2, #37	; 0x25
    2546:	5cb2      	ldrb	r2, [r6, r2]
    2548:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    254a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    254c:	7ab1      	ldrb	r1, [r6, #10]
    254e:	7af2      	ldrb	r2, [r6, #11]
    2550:	4311      	orrs	r1, r2
    2552:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2554:	8933      	ldrh	r3, [r6, #8]
    2556:	2bff      	cmp	r3, #255	; 0xff
    2558:	d100      	bne.n	255c <usart_init+0x184>
    255a:	e081      	b.n	2660 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    255c:	2280      	movs	r2, #128	; 0x80
    255e:	0452      	lsls	r2, r2, #17
    2560:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2562:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2564:	232c      	movs	r3, #44	; 0x2c
    2566:	5cf3      	ldrb	r3, [r6, r3]
    2568:	2b00      	cmp	r3, #0
    256a:	d103      	bne.n	2574 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    256c:	4b62      	ldr	r3, [pc, #392]	; (26f8 <usart_init+0x320>)
    256e:	789b      	ldrb	r3, [r3, #2]
    2570:	079b      	lsls	r3, r3, #30
    2572:	d501      	bpl.n	2578 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2574:	2380      	movs	r3, #128	; 0x80
    2576:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2578:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    257a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    257c:	2b00      	cmp	r3, #0
    257e:	d1fc      	bne.n	257a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2580:	4643      	mov	r3, r8
    2582:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2584:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2586:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2588:	2b00      	cmp	r3, #0
    258a:	d1fc      	bne.n	2586 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    258c:	4643      	mov	r3, r8
    258e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2590:	ab0e      	add	r3, sp, #56	; 0x38
    2592:	2280      	movs	r2, #128	; 0x80
    2594:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2596:	2200      	movs	r2, #0
    2598:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    259a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    259c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    259e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    25a0:	930a      	str	r3, [sp, #40]	; 0x28
    25a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    25a4:	930b      	str	r3, [sp, #44]	; 0x2c
    25a6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    25a8:	930c      	str	r3, [sp, #48]	; 0x30
    25aa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    25ac:	9302      	str	r3, [sp, #8]
    25ae:	930d      	str	r3, [sp, #52]	; 0x34
    25b0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25b2:	ae0a      	add	r6, sp, #40	; 0x28
    25b4:	e063      	b.n	267e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    25b6:	2308      	movs	r3, #8
    25b8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    25ba:	3b07      	subs	r3, #7
    25bc:	9307      	str	r3, [sp, #28]
    25be:	e77a      	b.n	24b6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    25c0:	6833      	ldr	r3, [r6, #0]
    25c2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    25c4:	68f3      	ldr	r3, [r6, #12]
    25c6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    25c8:	6973      	ldr	r3, [r6, #20]
    25ca:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    25cc:	7e33      	ldrb	r3, [r6, #24]
    25ce:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25d0:	2326      	movs	r3, #38	; 0x26
    25d2:	5cf3      	ldrb	r3, [r6, r3]
    25d4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    25d6:	6873      	ldr	r3, [r6, #4]
    25d8:	4699      	mov	r9, r3
	switch (transfer_mode)
    25da:	2b00      	cmp	r3, #0
    25dc:	d018      	beq.n	2610 <usart_init+0x238>
    25de:	2380      	movs	r3, #128	; 0x80
    25e0:	055b      	lsls	r3, r3, #21
    25e2:	4599      	cmp	r9, r3
    25e4:	d001      	beq.n	25ea <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    25e6:	2000      	movs	r0, #0
    25e8:	e025      	b.n	2636 <usart_init+0x25e>
			if (!config->use_external_clock) {
    25ea:	2327      	movs	r3, #39	; 0x27
    25ec:	5cf3      	ldrb	r3, [r6, r3]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d000      	beq.n	25f4 <usart_init+0x21c>
    25f2:	e775      	b.n	24e0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    25f4:	6a33      	ldr	r3, [r6, #32]
    25f6:	001f      	movs	r7, r3
    25f8:	b2c0      	uxtb	r0, r0
    25fa:	4b40      	ldr	r3, [pc, #256]	; (26fc <usart_init+0x324>)
    25fc:	4798      	blx	r3
    25fe:	0001      	movs	r1, r0
    2600:	220e      	movs	r2, #14
    2602:	ab06      	add	r3, sp, #24
    2604:	469c      	mov	ip, r3
    2606:	4462      	add	r2, ip
    2608:	0038      	movs	r0, r7
    260a:	4b3d      	ldr	r3, [pc, #244]	; (2700 <usart_init+0x328>)
    260c:	4798      	blx	r3
    260e:	e012      	b.n	2636 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2610:	2308      	movs	r3, #8
    2612:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2614:	2300      	movs	r3, #0
    2616:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2618:	2327      	movs	r3, #39	; 0x27
    261a:	5cf3      	ldrb	r3, [r6, r3]
    261c:	2b00      	cmp	r3, #0
    261e:	d00e      	beq.n	263e <usart_init+0x266>
				status_code =
    2620:	9b06      	ldr	r3, [sp, #24]
    2622:	9300      	str	r3, [sp, #0]
    2624:	9b07      	ldr	r3, [sp, #28]
    2626:	220e      	movs	r2, #14
    2628:	a906      	add	r1, sp, #24
    262a:	468c      	mov	ip, r1
    262c:	4462      	add	r2, ip
    262e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2630:	6a30      	ldr	r0, [r6, #32]
    2632:	4f34      	ldr	r7, [pc, #208]	; (2704 <usart_init+0x32c>)
    2634:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2636:	2800      	cmp	r0, #0
    2638:	d000      	beq.n	263c <usart_init+0x264>
    263a:	e6e0      	b.n	23fe <usart_init+0x26>
    263c:	e750      	b.n	24e0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    263e:	6a33      	ldr	r3, [r6, #32]
    2640:	001f      	movs	r7, r3
    2642:	b2c0      	uxtb	r0, r0
    2644:	4b2d      	ldr	r3, [pc, #180]	; (26fc <usart_init+0x324>)
    2646:	4798      	blx	r3
    2648:	0001      	movs	r1, r0
				status_code =
    264a:	9b06      	ldr	r3, [sp, #24]
    264c:	9300      	str	r3, [sp, #0]
    264e:	9b07      	ldr	r3, [sp, #28]
    2650:	220e      	movs	r2, #14
    2652:	a806      	add	r0, sp, #24
    2654:	4684      	mov	ip, r0
    2656:	4462      	add	r2, ip
    2658:	0038      	movs	r0, r7
    265a:	4f2a      	ldr	r7, [pc, #168]	; (2704 <usart_init+0x32c>)
    265c:	47b8      	blx	r7
    265e:	e7ea      	b.n	2636 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2660:	7ef3      	ldrb	r3, [r6, #27]
    2662:	2b00      	cmp	r3, #0
    2664:	d100      	bne.n	2668 <usart_init+0x290>
    2666:	e77d      	b.n	2564 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2668:	2380      	movs	r3, #128	; 0x80
    266a:	04db      	lsls	r3, r3, #19
    266c:	431f      	orrs	r7, r3
    266e:	e779      	b.n	2564 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2670:	0020      	movs	r0, r4
    2672:	4b25      	ldr	r3, [pc, #148]	; (2708 <usart_init+0x330>)
    2674:	4798      	blx	r3
    2676:	e007      	b.n	2688 <usart_init+0x2b0>
    2678:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    267a:	2f04      	cmp	r7, #4
    267c:	d00d      	beq.n	269a <usart_init+0x2c2>
    267e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2680:	00bb      	lsls	r3, r7, #2
    2682:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2684:	2800      	cmp	r0, #0
    2686:	d0f3      	beq.n	2670 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2688:	1c43      	adds	r3, r0, #1
    268a:	d0f5      	beq.n	2678 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    268c:	a90e      	add	r1, sp, #56	; 0x38
    268e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2690:	0c00      	lsrs	r0, r0, #16
    2692:	b2c0      	uxtb	r0, r0
    2694:	4b1d      	ldr	r3, [pc, #116]	; (270c <usart_init+0x334>)
    2696:	4798      	blx	r3
    2698:	e7ee      	b.n	2678 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    269a:	2300      	movs	r3, #0
    269c:	60eb      	str	r3, [r5, #12]
    269e:	612b      	str	r3, [r5, #16]
    26a0:	616b      	str	r3, [r5, #20]
    26a2:	61ab      	str	r3, [r5, #24]
    26a4:	61eb      	str	r3, [r5, #28]
    26a6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    26a8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    26aa:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    26ac:	2200      	movs	r2, #0
    26ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    26b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    26b2:	3330      	adds	r3, #48	; 0x30
    26b4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    26b6:	3301      	adds	r3, #1
    26b8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    26ba:	3301      	adds	r3, #1
    26bc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    26be:	3301      	adds	r3, #1
    26c0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    26c2:	6828      	ldr	r0, [r5, #0]
    26c4:	4b07      	ldr	r3, [pc, #28]	; (26e4 <usart_init+0x30c>)
    26c6:	4798      	blx	r3
    26c8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    26ca:	4911      	ldr	r1, [pc, #68]	; (2710 <usart_init+0x338>)
    26cc:	4b11      	ldr	r3, [pc, #68]	; (2714 <usart_init+0x33c>)
    26ce:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    26d0:	00a4      	lsls	r4, r4, #2
    26d2:	4b11      	ldr	r3, [pc, #68]	; (2718 <usart_init+0x340>)
    26d4:	50e5      	str	r5, [r4, r3]
	return status_code;
    26d6:	2000      	movs	r0, #0
    26d8:	e691      	b.n	23fe <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26da:	2310      	movs	r3, #16
    26dc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26de:	2300      	movs	r3, #0
    26e0:	9307      	str	r3, [sp, #28]
    26e2:	e6e8      	b.n	24b6 <usart_init+0xde>
    26e4:	000074ad 	.word	0x000074ad
    26e8:	40000400 	.word	0x40000400
    26ec:	00008909 	.word	0x00008909
    26f0:	0000887d 	.word	0x0000887d
    26f4:	000072e9 	.word	0x000072e9
    26f8:	41002000 	.word	0x41002000
    26fc:	00008925 	.word	0x00008925
    2700:	0000722b 	.word	0x0000722b
    2704:	00007255 	.word	0x00007255
    2708:	00007335 	.word	0x00007335
    270c:	00008a01 	.word	0x00008a01
    2710:	000027b9 	.word	0x000027b9
    2714:	0000230d 	.word	0x0000230d
    2718:	20000388 	.word	0x20000388

0000271c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    271c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    271e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2720:	2a00      	cmp	r2, #0
    2722:	d101      	bne.n	2728 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2724:	0018      	movs	r0, r3
    2726:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2728:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    272a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    272c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    272e:	2a00      	cmp	r2, #0
    2730:	d1f8      	bne.n	2724 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2732:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2734:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2736:	2a00      	cmp	r2, #0
    2738:	d1fc      	bne.n	2734 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    273a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    273c:	2102      	movs	r1, #2
    273e:	7e1a      	ldrb	r2, [r3, #24]
    2740:	420a      	tst	r2, r1
    2742:	d0fc      	beq.n	273e <usart_write_wait+0x22>
	return STATUS_OK;
    2744:	2300      	movs	r3, #0
    2746:	e7ed      	b.n	2724 <usart_write_wait+0x8>

00002748 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2748:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    274a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    274c:	2a00      	cmp	r2, #0
    274e:	d101      	bne.n	2754 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2750:	0018      	movs	r0, r3
    2752:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2754:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2756:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2758:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    275a:	2a00      	cmp	r2, #0
    275c:	d1f8      	bne.n	2750 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    275e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2760:	7e10      	ldrb	r0, [r2, #24]
    2762:	0740      	lsls	r0, r0, #29
    2764:	d5f4      	bpl.n	2750 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2766:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2768:	2b00      	cmp	r3, #0
    276a:	d1fc      	bne.n	2766 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    276c:	8b53      	ldrh	r3, [r2, #26]
    276e:	b2db      	uxtb	r3, r3
	if (error_code) {
    2770:	0698      	lsls	r0, r3, #26
    2772:	d01d      	beq.n	27b0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2774:	0798      	lsls	r0, r3, #30
    2776:	d503      	bpl.n	2780 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2778:	2302      	movs	r3, #2
    277a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    277c:	3318      	adds	r3, #24
    277e:	e7e7      	b.n	2750 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2780:	0758      	lsls	r0, r3, #29
    2782:	d503      	bpl.n	278c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2784:	2304      	movs	r3, #4
    2786:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2788:	331a      	adds	r3, #26
    278a:	e7e1      	b.n	2750 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    278c:	07d8      	lsls	r0, r3, #31
    278e:	d503      	bpl.n	2798 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2790:	2301      	movs	r3, #1
    2792:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2794:	3312      	adds	r3, #18
    2796:	e7db      	b.n	2750 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2798:	06d8      	lsls	r0, r3, #27
    279a:	d503      	bpl.n	27a4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    279c:	2310      	movs	r3, #16
    279e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    27a0:	3332      	adds	r3, #50	; 0x32
    27a2:	e7d5      	b.n	2750 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    27a4:	069b      	lsls	r3, r3, #26
    27a6:	d503      	bpl.n	27b0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    27a8:	2320      	movs	r3, #32
    27aa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    27ac:	3321      	adds	r3, #33	; 0x21
    27ae:	e7cf      	b.n	2750 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    27b0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    27b2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    27b4:	2300      	movs	r3, #0
    27b6:	e7cb      	b.n	2750 <usart_read_wait+0x8>

000027b8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    27b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    27ba:	0080      	lsls	r0, r0, #2
    27bc:	4b62      	ldr	r3, [pc, #392]	; (2948 <_usart_interrupt_handler+0x190>)
    27be:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    27c0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27c2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    27c4:	2b00      	cmp	r3, #0
    27c6:	d1fc      	bne.n	27c2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    27c8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    27ca:	7da6      	ldrb	r6, [r4, #22]
    27cc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    27ce:	2330      	movs	r3, #48	; 0x30
    27d0:	5ceb      	ldrb	r3, [r5, r3]
    27d2:	2231      	movs	r2, #49	; 0x31
    27d4:	5caf      	ldrb	r7, [r5, r2]
    27d6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    27d8:	07f3      	lsls	r3, r6, #31
    27da:	d522      	bpl.n	2822 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    27dc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    27de:	b29b      	uxth	r3, r3
    27e0:	2b00      	cmp	r3, #0
    27e2:	d01c      	beq.n	281e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    27e6:	7813      	ldrb	r3, [r2, #0]
    27e8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    27ea:	1c51      	adds	r1, r2, #1
    27ec:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    27ee:	7969      	ldrb	r1, [r5, #5]
    27f0:	2901      	cmp	r1, #1
    27f2:	d00e      	beq.n	2812 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27f4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    27f6:	05db      	lsls	r3, r3, #23
    27f8:	0ddb      	lsrs	r3, r3, #23
    27fa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    27fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    27fe:	3b01      	subs	r3, #1
    2800:	b29b      	uxth	r3, r3
    2802:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2804:	2b00      	cmp	r3, #0
    2806:	d10c      	bne.n	2822 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2808:	3301      	adds	r3, #1
    280a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    280c:	3301      	adds	r3, #1
    280e:	75a3      	strb	r3, [r4, #22]
    2810:	e007      	b.n	2822 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2812:	7851      	ldrb	r1, [r2, #1]
    2814:	0209      	lsls	r1, r1, #8
    2816:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2818:	3202      	adds	r2, #2
    281a:	62aa      	str	r2, [r5, #40]	; 0x28
    281c:	e7eb      	b.n	27f6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    281e:	2301      	movs	r3, #1
    2820:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2822:	07b3      	lsls	r3, r6, #30
    2824:	d506      	bpl.n	2834 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2826:	2302      	movs	r3, #2
    2828:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    282a:	2200      	movs	r2, #0
    282c:	3331      	adds	r3, #49	; 0x31
    282e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2830:	07fb      	lsls	r3, r7, #31
    2832:	d41a      	bmi.n	286a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2834:	0773      	lsls	r3, r6, #29
    2836:	d565      	bpl.n	2904 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2838:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    283a:	b29b      	uxth	r3, r3
    283c:	2b00      	cmp	r3, #0
    283e:	d05f      	beq.n	2900 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2840:	8b63      	ldrh	r3, [r4, #26]
    2842:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2844:	071a      	lsls	r2, r3, #28
    2846:	d414      	bmi.n	2872 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2848:	223f      	movs	r2, #63	; 0x3f
    284a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    284c:	2b00      	cmp	r3, #0
    284e:	d034      	beq.n	28ba <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2850:	079a      	lsls	r2, r3, #30
    2852:	d511      	bpl.n	2878 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2854:	221a      	movs	r2, #26
    2856:	2332      	movs	r3, #50	; 0x32
    2858:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    285a:	3b30      	subs	r3, #48	; 0x30
    285c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    285e:	077b      	lsls	r3, r7, #29
    2860:	d550      	bpl.n	2904 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2862:	0028      	movs	r0, r5
    2864:	696b      	ldr	r3, [r5, #20]
    2866:	4798      	blx	r3
    2868:	e04c      	b.n	2904 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    286a:	0028      	movs	r0, r5
    286c:	68eb      	ldr	r3, [r5, #12]
    286e:	4798      	blx	r3
    2870:	e7e0      	b.n	2834 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2872:	2237      	movs	r2, #55	; 0x37
    2874:	4013      	ands	r3, r2
    2876:	e7e9      	b.n	284c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2878:	075a      	lsls	r2, r3, #29
    287a:	d505      	bpl.n	2888 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    287c:	221e      	movs	r2, #30
    287e:	2332      	movs	r3, #50	; 0x32
    2880:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2882:	3b2e      	subs	r3, #46	; 0x2e
    2884:	8363      	strh	r3, [r4, #26]
    2886:	e7ea      	b.n	285e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2888:	07da      	lsls	r2, r3, #31
    288a:	d505      	bpl.n	2898 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    288c:	2213      	movs	r2, #19
    288e:	2332      	movs	r3, #50	; 0x32
    2890:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2892:	3b31      	subs	r3, #49	; 0x31
    2894:	8363      	strh	r3, [r4, #26]
    2896:	e7e2      	b.n	285e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2898:	06da      	lsls	r2, r3, #27
    289a:	d505      	bpl.n	28a8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    289c:	2242      	movs	r2, #66	; 0x42
    289e:	2332      	movs	r3, #50	; 0x32
    28a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    28a2:	3b22      	subs	r3, #34	; 0x22
    28a4:	8363      	strh	r3, [r4, #26]
    28a6:	e7da      	b.n	285e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    28a8:	2220      	movs	r2, #32
    28aa:	421a      	tst	r2, r3
    28ac:	d0d7      	beq.n	285e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    28ae:	3221      	adds	r2, #33	; 0x21
    28b0:	2332      	movs	r3, #50	; 0x32
    28b2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    28b4:	3b12      	subs	r3, #18
    28b6:	8363      	strh	r3, [r4, #26]
    28b8:	e7d1      	b.n	285e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    28ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    28bc:	05db      	lsls	r3, r3, #23
    28be:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    28c0:	b2da      	uxtb	r2, r3
    28c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    28c4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    28c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    28c8:	1c51      	adds	r1, r2, #1
    28ca:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    28cc:	7969      	ldrb	r1, [r5, #5]
    28ce:	2901      	cmp	r1, #1
    28d0:	d010      	beq.n	28f4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    28d2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    28d4:	3b01      	subs	r3, #1
    28d6:	b29b      	uxth	r3, r3
    28d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    28da:	2b00      	cmp	r3, #0
    28dc:	d112      	bne.n	2904 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28de:	3304      	adds	r3, #4
    28e0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    28e2:	2200      	movs	r2, #0
    28e4:	332e      	adds	r3, #46	; 0x2e
    28e6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    28e8:	07bb      	lsls	r3, r7, #30
    28ea:	d50b      	bpl.n	2904 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    28ec:	0028      	movs	r0, r5
    28ee:	692b      	ldr	r3, [r5, #16]
    28f0:	4798      	blx	r3
    28f2:	e007      	b.n	2904 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    28f4:	0a1b      	lsrs	r3, r3, #8
    28f6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    28f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    28fa:	3301      	adds	r3, #1
    28fc:	626b      	str	r3, [r5, #36]	; 0x24
    28fe:	e7e8      	b.n	28d2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2900:	2304      	movs	r3, #4
    2902:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2904:	06f3      	lsls	r3, r6, #27
    2906:	d504      	bpl.n	2912 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2908:	2310      	movs	r3, #16
    290a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    290c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    290e:	06fb      	lsls	r3, r7, #27
    2910:	d40e      	bmi.n	2930 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2912:	06b3      	lsls	r3, r6, #26
    2914:	d504      	bpl.n	2920 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2916:	2320      	movs	r3, #32
    2918:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    291a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    291c:	073b      	lsls	r3, r7, #28
    291e:	d40b      	bmi.n	2938 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2920:	0733      	lsls	r3, r6, #28
    2922:	d504      	bpl.n	292e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2924:	2308      	movs	r3, #8
    2926:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2928:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    292a:	06bb      	lsls	r3, r7, #26
    292c:	d408      	bmi.n	2940 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2930:	0028      	movs	r0, r5
    2932:	69eb      	ldr	r3, [r5, #28]
    2934:	4798      	blx	r3
    2936:	e7ec      	b.n	2912 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2938:	0028      	movs	r0, r5
    293a:	69ab      	ldr	r3, [r5, #24]
    293c:	4798      	blx	r3
    293e:	e7ef      	b.n	2920 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2940:	6a2b      	ldr	r3, [r5, #32]
    2942:	0028      	movs	r0, r5
    2944:	4798      	blx	r3
}
    2946:	e7f2      	b.n	292e <_usart_interrupt_handler+0x176>
    2948:	20000388 	.word	0x20000388

0000294c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    294c:	b510      	push	{r4, lr}
	switch (clock_source) {
    294e:	2808      	cmp	r0, #8
    2950:	d803      	bhi.n	295a <system_clock_source_get_hz+0xe>
    2952:	0080      	lsls	r0, r0, #2
    2954:	4b1e      	ldr	r3, [pc, #120]	; (29d0 <system_clock_source_get_hz+0x84>)
    2956:	581b      	ldr	r3, [r3, r0]
    2958:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    295a:	2000      	movs	r0, #0
    295c:	e036      	b.n	29cc <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc.frequency;
    295e:	4b1d      	ldr	r3, [pc, #116]	; (29d4 <system_clock_source_get_hz+0x88>)
    2960:	6918      	ldr	r0, [r3, #16]
    2962:	e033      	b.n	29cc <system_clock_source_get_hz+0x80>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2964:	4b1c      	ldr	r3, [pc, #112]	; (29d8 <system_clock_source_get_hz+0x8c>)
    2966:	6a1b      	ldr	r3, [r3, #32]
    2968:	059b      	lsls	r3, r3, #22
    296a:	0f9b      	lsrs	r3, r3, #30
    296c:	481b      	ldr	r0, [pc, #108]	; (29dc <system_clock_source_get_hz+0x90>)
    296e:	40d8      	lsrs	r0, r3
    2970:	e02c      	b.n	29cc <system_clock_source_get_hz+0x80>
		return _system_clock_inst.xosc32k.frequency;
    2972:	4b18      	ldr	r3, [pc, #96]	; (29d4 <system_clock_source_get_hz+0x88>)
    2974:	6958      	ldr	r0, [r3, #20]
    2976:	e029      	b.n	29cc <system_clock_source_get_hz+0x80>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2978:	4b16      	ldr	r3, [pc, #88]	; (29d4 <system_clock_source_get_hz+0x88>)
    297a:	681b      	ldr	r3, [r3, #0]
			return 0;
    297c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    297e:	079b      	lsls	r3, r3, #30
    2980:	d524      	bpl.n	29cc <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2982:	4915      	ldr	r1, [pc, #84]	; (29d8 <system_clock_source_get_hz+0x8c>)
    2984:	2210      	movs	r2, #16
    2986:	68cb      	ldr	r3, [r1, #12]
    2988:	421a      	tst	r2, r3
    298a:	d0fc      	beq.n	2986 <system_clock_source_get_hz+0x3a>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    298c:	4b11      	ldr	r3, [pc, #68]	; (29d4 <system_clock_source_get_hz+0x88>)
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	075b      	lsls	r3, r3, #29
    2992:	d401      	bmi.n	2998 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2994:	4812      	ldr	r0, [pc, #72]	; (29e0 <system_clock_source_get_hz+0x94>)
    2996:	e019      	b.n	29cc <system_clock_source_get_hz+0x80>
		if ((_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) && !(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_USBCRM)) {
    2998:	4b0e      	ldr	r3, [pc, #56]	; (29d4 <system_clock_source_get_hz+0x88>)
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	069b      	lsls	r3, r3, #26
    299e:	d501      	bpl.n	29a4 <system_clock_source_get_hz+0x58>
		return 48000000UL;
    29a0:	480f      	ldr	r0, [pc, #60]	; (29e0 <system_clock_source_get_hz+0x94>)
    29a2:	e013      	b.n	29cc <system_clock_source_get_hz+0x80>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    29a4:	2000      	movs	r0, #0
    29a6:	4b0f      	ldr	r3, [pc, #60]	; (29e4 <system_clock_source_get_hz+0x98>)
    29a8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    29aa:	4b0a      	ldr	r3, [pc, #40]	; (29d4 <system_clock_source_get_hz+0x88>)
    29ac:	689b      	ldr	r3, [r3, #8]
    29ae:	041b      	lsls	r3, r3, #16
    29b0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    29b2:	4358      	muls	r0, r3
    29b4:	e00a      	b.n	29cc <system_clock_source_get_hz+0x80>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    29b6:	2350      	movs	r3, #80	; 0x50
    29b8:	4a07      	ldr	r2, [pc, #28]	; (29d8 <system_clock_source_get_hz+0x8c>)
    29ba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    29bc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    29be:	075b      	lsls	r3, r3, #29
    29c0:	d504      	bpl.n	29cc <system_clock_source_get_hz+0x80>
		return _system_clock_inst.dpll.frequency;
    29c2:	4b04      	ldr	r3, [pc, #16]	; (29d4 <system_clock_source_get_hz+0x88>)
    29c4:	68d8      	ldr	r0, [r3, #12]
    29c6:	e001      	b.n	29cc <system_clock_source_get_hz+0x80>
		return 32768UL;
    29c8:	2080      	movs	r0, #128	; 0x80
    29ca:	0200      	lsls	r0, r0, #8
	}
}
    29cc:	bd10      	pop	{r4, pc}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	0000a3d8 	.word	0x0000a3d8
    29d4:	20000244 	.word	0x20000244
    29d8:	40000800 	.word	0x40000800
    29dc:	007a1200 	.word	0x007a1200
    29e0:	02dc6c00 	.word	0x02dc6c00
    29e4:	00008925 	.word	0x00008925

000029e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    29e8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    29ea:	490c      	ldr	r1, [pc, #48]	; (2a1c <system_clock_source_osc8m_set_config+0x34>)
    29ec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    29ee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    29f0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    29f2:	7840      	ldrb	r0, [r0, #1]
    29f4:	2201      	movs	r2, #1
    29f6:	4010      	ands	r0, r2
    29f8:	0180      	lsls	r0, r0, #6
    29fa:	2640      	movs	r6, #64	; 0x40
    29fc:	43b3      	bics	r3, r6
    29fe:	4303      	orrs	r3, r0
    2a00:	402a      	ands	r2, r5
    2a02:	01d2      	lsls	r2, r2, #7
    2a04:	2080      	movs	r0, #128	; 0x80
    2a06:	4383      	bics	r3, r0
    2a08:	4313      	orrs	r3, r2
    2a0a:	2203      	movs	r2, #3
    2a0c:	4022      	ands	r2, r4
    2a0e:	0212      	lsls	r2, r2, #8
    2a10:	4803      	ldr	r0, [pc, #12]	; (2a20 <system_clock_source_osc8m_set_config+0x38>)
    2a12:	4003      	ands	r3, r0
    2a14:	4313      	orrs	r3, r2
    2a16:	620b      	str	r3, [r1, #32]
}
    2a18:	bd70      	pop	{r4, r5, r6, pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	40000800 	.word	0x40000800
    2a20:	fffffcff 	.word	0xfffffcff

00002a24 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    2a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a26:	46ce      	mov	lr, r9
    2a28:	4647      	mov	r7, r8
    2a2a:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    2a2c:	4b19      	ldr	r3, [pc, #100]	; (2a94 <system_clock_source_osc32k_set_config+0x70>)
    2a2e:	4699      	mov	r9, r3
    2a30:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    2a32:	7841      	ldrb	r1, [r0, #1]
    2a34:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    2a36:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2a38:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2a3a:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    2a3c:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    2a3e:	7880      	ldrb	r0, [r0, #2]
    2a40:	2101      	movs	r1, #1
    2a42:	4008      	ands	r0, r1
    2a44:	0080      	lsls	r0, r0, #2
    2a46:	2204      	movs	r2, #4
    2a48:	4393      	bics	r3, r2
    2a4a:	4303      	orrs	r3, r0
    2a4c:	4660      	mov	r0, ip
    2a4e:	4008      	ands	r0, r1
    2a50:	00c0      	lsls	r0, r0, #3
    2a52:	3204      	adds	r2, #4
    2a54:	4393      	bics	r3, r2
    2a56:	4303      	orrs	r3, r0
    2a58:	0038      	movs	r0, r7
    2a5a:	4008      	ands	r0, r1
    2a5c:	0180      	lsls	r0, r0, #6
    2a5e:	2740      	movs	r7, #64	; 0x40
    2a60:	43bb      	bics	r3, r7
    2a62:	4303      	orrs	r3, r0
    2a64:	0030      	movs	r0, r6
    2a66:	4008      	ands	r0, r1
    2a68:	01c0      	lsls	r0, r0, #7
    2a6a:	2680      	movs	r6, #128	; 0x80
    2a6c:	43b3      	bics	r3, r6
    2a6e:	4303      	orrs	r3, r0
    2a70:	2007      	movs	r0, #7
    2a72:	4005      	ands	r5, r0
    2a74:	022d      	lsls	r5, r5, #8
    2a76:	4808      	ldr	r0, [pc, #32]	; (2a98 <system_clock_source_osc32k_set_config+0x74>)
    2a78:	4003      	ands	r3, r0
    2a7a:	432b      	orrs	r3, r5
    2a7c:	4021      	ands	r1, r4
    2a7e:	0309      	lsls	r1, r1, #12
    2a80:	4806      	ldr	r0, [pc, #24]	; (2a9c <system_clock_source_osc32k_set_config+0x78>)
    2a82:	4003      	ands	r3, r0
    2a84:	430b      	orrs	r3, r1
    2a86:	464a      	mov	r2, r9
    2a88:	6193      	str	r3, [r2, #24]
}
    2a8a:	bc0c      	pop	{r2, r3}
    2a8c:	4690      	mov	r8, r2
    2a8e:	4699      	mov	r9, r3
    2a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	40000800 	.word	0x40000800
    2a98:	fffff8ff 	.word	0xfffff8ff
    2a9c:	ffffefff 	.word	0xffffefff

00002aa0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2aa0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2aa2:	7a03      	ldrb	r3, [r0, #8]
    2aa4:	069b      	lsls	r3, r3, #26
    2aa6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2aa8:	8942      	ldrh	r2, [r0, #10]
    2aaa:	0592      	lsls	r2, r2, #22
    2aac:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2aae:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2ab0:	4918      	ldr	r1, [pc, #96]	; (2b14 <system_clock_source_dfll_set_config+0x74>)
    2ab2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2ab4:	7983      	ldrb	r3, [r0, #6]
    2ab6:	79c2      	ldrb	r2, [r0, #7]
    2ab8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2aba:	8842      	ldrh	r2, [r0, #2]
    2abc:	8884      	ldrh	r4, [r0, #4]
    2abe:	4322      	orrs	r2, r4
    2ac0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2ac2:	7842      	ldrb	r2, [r0, #1]
    2ac4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2ac6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ac8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2aca:	7803      	ldrb	r3, [r0, #0]
    2acc:	2b04      	cmp	r3, #4
    2ace:	d011      	beq.n	2af4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ad0:	2b20      	cmp	r3, #32
    2ad2:	d10e      	bne.n	2af2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ad4:	7b03      	ldrb	r3, [r0, #12]
    2ad6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ad8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ada:	4313      	orrs	r3, r2
    2adc:	89c2      	ldrh	r2, [r0, #14]
    2ade:	0412      	lsls	r2, r2, #16
    2ae0:	490d      	ldr	r1, [pc, #52]	; (2b18 <system_clock_source_dfll_set_config+0x78>)
    2ae2:	400a      	ands	r2, r1
    2ae4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ae6:	4a0b      	ldr	r2, [pc, #44]	; (2b14 <system_clock_source_dfll_set_config+0x74>)
    2ae8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2aea:	6811      	ldr	r1, [r2, #0]
    2aec:	4b0b      	ldr	r3, [pc, #44]	; (2b1c <system_clock_source_dfll_set_config+0x7c>)
    2aee:	430b      	orrs	r3, r1
    2af0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2af2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2af4:	7b03      	ldrb	r3, [r0, #12]
    2af6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2af8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2afa:	4313      	orrs	r3, r2
    2afc:	89c2      	ldrh	r2, [r0, #14]
    2afe:	0412      	lsls	r2, r2, #16
    2b00:	4905      	ldr	r1, [pc, #20]	; (2b18 <system_clock_source_dfll_set_config+0x78>)
    2b02:	400a      	ands	r2, r1
    2b04:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b06:	4a03      	ldr	r2, [pc, #12]	; (2b14 <system_clock_source_dfll_set_config+0x74>)
    2b08:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2b0a:	6813      	ldr	r3, [r2, #0]
    2b0c:	2104      	movs	r1, #4
    2b0e:	430b      	orrs	r3, r1
    2b10:	6013      	str	r3, [r2, #0]
    2b12:	e7ee      	b.n	2af2 <system_clock_source_dfll_set_config+0x52>
    2b14:	20000244 	.word	0x20000244
    2b18:	03ff0000 	.word	0x03ff0000
    2b1c:	00000424 	.word	0x00000424

00002b20 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b20:	2808      	cmp	r0, #8
    2b22:	d803      	bhi.n	2b2c <system_clock_source_enable+0xc>
    2b24:	0080      	lsls	r0, r0, #2
    2b26:	4b25      	ldr	r3, [pc, #148]	; (2bbc <system_clock_source_enable+0x9c>)
    2b28:	581b      	ldr	r3, [r3, r0]
    2b2a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b2c:	2017      	movs	r0, #23
    2b2e:	e044      	b.n	2bba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2b30:	4a23      	ldr	r2, [pc, #140]	; (2bc0 <system_clock_source_enable+0xa0>)
    2b32:	6a13      	ldr	r3, [r2, #32]
    2b34:	2102      	movs	r1, #2
    2b36:	430b      	orrs	r3, r1
    2b38:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2b3a:	2000      	movs	r0, #0
    2b3c:	e03d      	b.n	2bba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2b3e:	4a20      	ldr	r2, [pc, #128]	; (2bc0 <system_clock_source_enable+0xa0>)
    2b40:	6993      	ldr	r3, [r2, #24]
    2b42:	2102      	movs	r1, #2
    2b44:	430b      	orrs	r3, r1
    2b46:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2b48:	2000      	movs	r0, #0
		break;
    2b4a:	e036      	b.n	2bba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2b4c:	4a1c      	ldr	r2, [pc, #112]	; (2bc0 <system_clock_source_enable+0xa0>)
    2b4e:	8a13      	ldrh	r3, [r2, #16]
    2b50:	2102      	movs	r1, #2
    2b52:	430b      	orrs	r3, r1
    2b54:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2b56:	2000      	movs	r0, #0
		break;
    2b58:	e02f      	b.n	2bba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2b5a:	4a19      	ldr	r2, [pc, #100]	; (2bc0 <system_clock_source_enable+0xa0>)
    2b5c:	8a93      	ldrh	r3, [r2, #20]
    2b5e:	2102      	movs	r1, #2
    2b60:	430b      	orrs	r3, r1
    2b62:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2b64:	2000      	movs	r0, #0
		break;
    2b66:	e028      	b.n	2bba <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b68:	4916      	ldr	r1, [pc, #88]	; (2bc4 <system_clock_source_enable+0xa4>)
    2b6a:	680b      	ldr	r3, [r1, #0]
    2b6c:	2202      	movs	r2, #2
    2b6e:	4313      	orrs	r3, r2
    2b70:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2b72:	4b13      	ldr	r3, [pc, #76]	; (2bc0 <system_clock_source_enable+0xa0>)
    2b74:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b76:	0019      	movs	r1, r3
    2b78:	320e      	adds	r2, #14
    2b7a:	68cb      	ldr	r3, [r1, #12]
    2b7c:	421a      	tst	r2, r3
    2b7e:	d0fc      	beq.n	2b7a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2b80:	4a10      	ldr	r2, [pc, #64]	; (2bc4 <system_clock_source_enable+0xa4>)
    2b82:	6891      	ldr	r1, [r2, #8]
    2b84:	4b0e      	ldr	r3, [pc, #56]	; (2bc0 <system_clock_source_enable+0xa0>)
    2b86:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2b88:	6852      	ldr	r2, [r2, #4]
    2b8a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2b8c:	2200      	movs	r2, #0
    2b8e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b90:	0019      	movs	r1, r3
    2b92:	3210      	adds	r2, #16
    2b94:	68cb      	ldr	r3, [r1, #12]
    2b96:	421a      	tst	r2, r3
    2b98:	d0fc      	beq.n	2b94 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2b9a:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <system_clock_source_enable+0xa4>)
    2b9c:	681b      	ldr	r3, [r3, #0]
    2b9e:	b29b      	uxth	r3, r3
    2ba0:	4a07      	ldr	r2, [pc, #28]	; (2bc0 <system_clock_source_enable+0xa0>)
    2ba2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2ba4:	2000      	movs	r0, #0
    2ba6:	e008      	b.n	2bba <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2ba8:	4905      	ldr	r1, [pc, #20]	; (2bc0 <system_clock_source_enable+0xa0>)
    2baa:	2244      	movs	r2, #68	; 0x44
    2bac:	5c8b      	ldrb	r3, [r1, r2]
    2bae:	2002      	movs	r0, #2
    2bb0:	4303      	orrs	r3, r0
    2bb2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2bb4:	2000      	movs	r0, #0
		break;
    2bb6:	e000      	b.n	2bba <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2bb8:	2000      	movs	r0, #0
}
    2bba:	4770      	bx	lr
    2bbc:	0000a3fc 	.word	0x0000a3fc
    2bc0:	40000800 	.word	0x40000800
    2bc4:	20000244 	.word	0x20000244

00002bc8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bca:	46ce      	mov	lr, r9
    2bcc:	4647      	mov	r7, r8
    2bce:	b580      	push	{r7, lr}
    2bd0:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2bd2:	22c2      	movs	r2, #194	; 0xc2
    2bd4:	00d2      	lsls	r2, r2, #3
    2bd6:	4b4b      	ldr	r3, [pc, #300]	; (2d04 <system_clock_init+0x13c>)
    2bd8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2bda:	4a4b      	ldr	r2, [pc, #300]	; (2d08 <system_clock_init+0x140>)
    2bdc:	6853      	ldr	r3, [r2, #4]
    2bde:	211e      	movs	r1, #30
    2be0:	438b      	bics	r3, r1
    2be2:	391a      	subs	r1, #26
    2be4:	430b      	orrs	r3, r1
    2be6:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2be8:	2202      	movs	r2, #2
    2bea:	ab01      	add	r3, sp, #4
    2bec:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bee:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2bf0:	4d46      	ldr	r5, [pc, #280]	; (2d0c <system_clock_init+0x144>)
    2bf2:	b2e0      	uxtb	r0, r4
    2bf4:	a901      	add	r1, sp, #4
    2bf6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bf8:	3401      	adds	r4, #1
    2bfa:	2c25      	cmp	r4, #37	; 0x25
    2bfc:	d1f9      	bne.n	2bf2 <system_clock_init+0x2a>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    2bfe:	4c44      	ldr	r4, [pc, #272]	; (2d10 <system_clock_init+0x148>)
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);
    2c00:	6823      	ldr	r3, [r4, #0]
    2c02:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    2c04:	493f      	ldr	r1, [pc, #252]	; (2d04 <system_clock_init+0x13c>)
    2c06:	698a      	ldr	r2, [r1, #24]
    2c08:	0e5b      	lsrs	r3, r3, #25
    2c0a:	041b      	lsls	r3, r3, #16
    2c0c:	4841      	ldr	r0, [pc, #260]	; (2d14 <system_clock_init+0x14c>)
    2c0e:	4002      	ands	r2, r0
    2c10:	4313      	orrs	r3, r2
    2c12:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    2c14:	a80a      	add	r0, sp, #40	; 0x28
    2c16:	2301      	movs	r3, #1
    2c18:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    2c1a:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    2c1c:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    2c1e:	2207      	movs	r2, #7
    2c20:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    2c22:	2500      	movs	r5, #0
    2c24:	7145      	strb	r5, [r0, #5]

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    2c26:	70c3      	strb	r3, [r0, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    2c28:	4b3b      	ldr	r3, [pc, #236]	; (2d18 <system_clock_init+0x150>)
    2c2a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    2c2c:	2004      	movs	r0, #4
    2c2e:	4b3b      	ldr	r3, [pc, #236]	; (2d1c <system_clock_init+0x154>)
    2c30:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2c32:	ab05      	add	r3, sp, #20
    2c34:	2200      	movs	r2, #0
    2c36:	805d      	strh	r5, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2c38:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2c3a:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2c3c:	2120      	movs	r1, #32
    2c3e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2c40:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2c42:	6823      	ldr	r3, [r4, #0]
    2c44:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2c46:	2b3f      	cmp	r3, #63	; 0x3f
    2c48:	d05a      	beq.n	2d00 <system_clock_init+0x138>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2c4a:	a805      	add	r0, sp, #20
    2c4c:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2c4e:	2307      	movs	r3, #7
    2c50:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10; 
    2c52:	3303      	adds	r3, #3
    2c54:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    2c56:	4b32      	ldr	r3, [pc, #200]	; (2d20 <system_clock_init+0x158>)
    2c58:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    2c5a:	3bff      	subs	r3, #255	; 0xff
    2c5c:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    2c5e:	4b31      	ldr	r3, [pc, #196]	; (2d24 <system_clock_init+0x15c>)
    2c60:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2c62:	4b31      	ldr	r3, [pc, #196]	; (2d28 <system_clock_init+0x160>)
    2c64:	4798      	blx	r3
	config->run_in_standby  = false;
    2c66:	a804      	add	r0, sp, #16
    2c68:	2500      	movs	r5, #0
    2c6a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2c6c:	2601      	movs	r6, #1
    2c6e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2c70:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2c72:	4b2e      	ldr	r3, [pc, #184]	; (2d2c <system_clock_init+0x164>)
    2c74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2c76:	2006      	movs	r0, #6
    2c78:	4f28      	ldr	r7, [pc, #160]	; (2d1c <system_clock_init+0x154>)
    2c7a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2c7c:	4b2c      	ldr	r3, [pc, #176]	; (2d30 <system_clock_init+0x168>)
    2c7e:	4798      	blx	r3
	config->division_factor    = 1;
    2c80:	ac01      	add	r4, sp, #4
    2c82:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2c84:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    2c86:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2c88:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2c8a:	2305      	movs	r3, #5
    2c8c:	7023      	strb	r3, [r4, #0]
    2c8e:	0021      	movs	r1, r4
    2c90:	2001      	movs	r0, #1
    2c92:	4b28      	ldr	r3, [pc, #160]	; (2d34 <system_clock_init+0x16c>)
    2c94:	4699      	mov	r9, r3
    2c96:	4798      	blx	r3
    2c98:	2001      	movs	r0, #1
    2c9a:	4b27      	ldr	r3, [pc, #156]	; (2d38 <system_clock_init+0x170>)
    2c9c:	4698      	mov	r8, r3
    2c9e:	4798      	blx	r3
	config->division_factor    = 1;
    2ca0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    2ca2:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2ca4:	7265      	strb	r5, [r4, #9]
    2ca6:	2304      	movs	r3, #4
    2ca8:	7023      	strb	r3, [r4, #0]
    2caa:	7226      	strb	r6, [r4, #8]
    2cac:	0021      	movs	r1, r4
    2cae:	2007      	movs	r0, #7
    2cb0:	47c8      	blx	r9
    2cb2:	2007      	movs	r0, #7
    2cb4:	47c0      	blx	r8
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2cb6:	2007      	movs	r0, #7
    2cb8:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2cba:	4912      	ldr	r1, [pc, #72]	; (2d04 <system_clock_init+0x13c>)
    2cbc:	2210      	movs	r2, #16
    2cbe:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2cc0:	421a      	tst	r2, r3
    2cc2:	d0fc      	beq.n	2cbe <system_clock_init+0xf6>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    2cc4:	4a0f      	ldr	r2, [pc, #60]	; (2d04 <system_clock_init+0x13c>)
    2cc6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    2cc8:	2180      	movs	r1, #128	; 0x80
    2cca:	430b      	orrs	r3, r1
    2ccc:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    2cce:	4a1b      	ldr	r2, [pc, #108]	; (2d3c <system_clock_init+0x174>)
    2cd0:	2300      	movs	r3, #0
    2cd2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2cd4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2cd6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2cd8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2cda:	a901      	add	r1, sp, #4
    2cdc:	2201      	movs	r2, #1
    2cde:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2ce0:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    2ce2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ce4:	3307      	adds	r3, #7
    2ce6:	700b      	strb	r3, [r1, #0]
    2ce8:	720a      	strb	r2, [r1, #8]
    2cea:	2000      	movs	r0, #0
    2cec:	4b11      	ldr	r3, [pc, #68]	; (2d34 <system_clock_init+0x16c>)
    2cee:	4798      	blx	r3
    2cf0:	2000      	movs	r0, #0
    2cf2:	4b11      	ldr	r3, [pc, #68]	; (2d38 <system_clock_init+0x170>)
    2cf4:	4798      	blx	r3
#endif
}
    2cf6:	b00d      	add	sp, #52	; 0x34
    2cf8:	bc0c      	pop	{r2, r3}
    2cfa:	4690      	mov	r8, r2
    2cfc:	4699      	mov	r9, r3
    2cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2d00:	3b20      	subs	r3, #32
    2d02:	e7a2      	b.n	2c4a <system_clock_init+0x82>
    2d04:	40000800 	.word	0x40000800
    2d08:	41004000 	.word	0x41004000
    2d0c:	00008909 	.word	0x00008909
    2d10:	00806024 	.word	0x00806024
    2d14:	ff80ffff 	.word	0xff80ffff
    2d18:	00002a25 	.word	0x00002a25
    2d1c:	00002b21 	.word	0x00002b21
    2d20:	000001ff 	.word	0x000001ff
    2d24:	ffffbb80 	.word	0xffffbb80
    2d28:	00002aa1 	.word	0x00002aa1
    2d2c:	000029e9 	.word	0x000029e9
    2d30:	000086d1 	.word	0x000086d1
    2d34:	000086f5 	.word	0x000086f5
    2d38:	000087ad 	.word	0x000087ad
    2d3c:	40000400 	.word	0x40000400

00002d40 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2d40:	b510      	push	{r4, lr}
    2d42:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    2d44:	ab03      	add	r3, sp, #12
    2d46:	2200      	movs	r2, #0
    2d48:	701a      	strb	r2, [r3, #0]
    2d4a:	3203      	adds	r2, #3
    2d4c:	705a      	strb	r2, [r3, #1]
    2d4e:	3a01      	subs	r2, #1
    2d50:	709a      	strb	r2, [r3, #2]
    2d52:	3a01      	subs	r2, #1
    2d54:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    2d56:	4b27      	ldr	r3, [pc, #156]	; (2df4 <udd_sleep_mode+0xb4>)
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	4283      	cmp	r3, r0
    2d5c:	d007      	beq.n	2d6e <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    2d5e:	2800      	cmp	r0, #0
    2d60:	d107      	bne.n	2d72 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    2d62:	4b24      	ldr	r3, [pc, #144]	; (2df4 <udd_sleep_mode+0xb4>)
    2d64:	781b      	ldrb	r3, [r3, #0]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d123      	bne.n	2db2 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    2d6a:	4b22      	ldr	r3, [pc, #136]	; (2df4 <udd_sleep_mode+0xb4>)
    2d6c:	7018      	strb	r0, [r3, #0]
}
    2d6e:	b004      	add	sp, #16
    2d70:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    2d72:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    2d74:	5c1b      	ldrb	r3, [r3, r0]
    2d76:	4a20      	ldr	r2, [pc, #128]	; (2df8 <udd_sleep_mode+0xb8>)
    2d78:	5cd2      	ldrb	r2, [r2, r3]
    2d7a:	2aff      	cmp	r2, #255	; 0xff
    2d7c:	d100      	bne.n	2d80 <udd_sleep_mode+0x40>
    2d7e:	e7fe      	b.n	2d7e <udd_sleep_mode+0x3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d80:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d84:	4251      	negs	r1, r2
    2d86:	414a      	adcs	r2, r1
    2d88:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2d8a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2d8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2d90:	2100      	movs	r1, #0
    2d92:	4a1a      	ldr	r2, [pc, #104]	; (2dfc <udd_sleep_mode+0xbc>)
    2d94:	7011      	strb	r1, [r2, #0]
	return flags;
    2d96:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2d98:	4917      	ldr	r1, [pc, #92]	; (2df8 <udd_sleep_mode+0xb8>)
    2d9a:	5cca      	ldrb	r2, [r1, r3]
    2d9c:	3201      	adds	r2, #1
    2d9e:	54ca      	strb	r2, [r1, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2da0:	2c00      	cmp	r4, #0
    2da2:	d0de      	beq.n	2d62 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    2da4:	2201      	movs	r2, #1
    2da6:	4b15      	ldr	r3, [pc, #84]	; (2dfc <udd_sleep_mode+0xbc>)
    2da8:	701a      	strb	r2, [r3, #0]
    2daa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2dae:	b662      	cpsie	i
    2db0:	e7d7      	b.n	2d62 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    2db2:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2db4:	5cd3      	ldrb	r3, [r2, r3]
    2db6:	4a10      	ldr	r2, [pc, #64]	; (2df8 <udd_sleep_mode+0xb8>)
    2db8:	5cd2      	ldrb	r2, [r2, r3]
    2dba:	2a00      	cmp	r2, #0
    2dbc:	d100      	bne.n	2dc0 <udd_sleep_mode+0x80>
    2dbe:	e7fe      	b.n	2dbe <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2dc0:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2dc4:	4251      	negs	r1, r2
    2dc6:	414a      	adcs	r2, r1
    2dc8:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    2dca:	b672      	cpsid	i
    2dcc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2dd0:	2100      	movs	r1, #0
    2dd2:	4a0a      	ldr	r2, [pc, #40]	; (2dfc <udd_sleep_mode+0xbc>)
    2dd4:	7011      	strb	r1, [r2, #0]
	return flags;
    2dd6:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2dd8:	4907      	ldr	r1, [pc, #28]	; (2df8 <udd_sleep_mode+0xb8>)
    2dda:	5cca      	ldrb	r2, [r1, r3]
    2ddc:	3a01      	subs	r2, #1
    2dde:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    2de0:	2c00      	cmp	r4, #0
    2de2:	d0c2      	beq.n	2d6a <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    2de4:	2201      	movs	r2, #1
    2de6:	4b05      	ldr	r3, [pc, #20]	; (2dfc <udd_sleep_mode+0xbc>)
    2de8:	701a      	strb	r2, [r3, #0]
    2dea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2dee:	b662      	cpsie	i
    2df0:	e7bb      	b.n	2d6a <udd_sleep_mode+0x2a>
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	200002b4 	.word	0x200002b4
    2df8:	20000dd0 	.word	0x20000dd0
    2dfc:	20000125 	.word	0x20000125

00002e00 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    2e00:	0643      	lsls	r3, r0, #25
    2e02:	d00b      	beq.n	2e1c <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2e04:	230f      	movs	r3, #15
    2e06:	4003      	ands	r3, r0
    2e08:	005b      	lsls	r3, r3, #1
    2e0a:	09c0      	lsrs	r0, r0, #7
    2e0c:	1818      	adds	r0, r3, r0
    2e0e:	3802      	subs	r0, #2
    2e10:	0083      	lsls	r3, r0, #2
    2e12:	1818      	adds	r0, r3, r0
    2e14:	0080      	lsls	r0, r0, #2
    2e16:	4b02      	ldr	r3, [pc, #8]	; (2e20 <udd_ep_get_job+0x20>)
    2e18:	1818      	adds	r0, r3, r0
	}
}
    2e1a:	4770      	bx	lr
		return NULL;
    2e1c:	2000      	movs	r0, #0
    2e1e:	e7fc      	b.n	2e1a <udd_ep_get_job+0x1a>
    2e20:	20000264 	.word	0x20000264

00002e24 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    2e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e26:	46d6      	mov	lr, sl
    2e28:	464f      	mov	r7, r9
    2e2a:	4646      	mov	r6, r8
    2e2c:	b5c0      	push	{r6, r7, lr}
    2e2e:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2e30:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    2e32:	b26b      	sxtb	r3, r5
    2e34:	2b00      	cmp	r3, #0
    2e36:	db26      	blt.n	2e86 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    2e38:	0028      	movs	r0, r5
    2e3a:	4b5e      	ldr	r3, [pc, #376]	; (2fb4 <udd_ep_transfer_process+0x190>)
    2e3c:	4798      	blx	r3
    2e3e:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e40:	270f      	movs	r7, #15
    2e42:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e44:	8a03      	ldrh	r3, [r0, #16]
    2e46:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    2e48:	464b      	mov	r3, r9
    2e4a:	881b      	ldrh	r3, [r3, #0]
    2e4c:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    2e4e:	7c83      	ldrb	r3, [r0, #18]
    2e50:	075b      	lsls	r3, r3, #29
    2e52:	d46a      	bmi.n	2f2a <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    2e54:	68e3      	ldr	r3, [r4, #12]
    2e56:	4453      	add	r3, sl
    2e58:	001e      	movs	r6, r3
    2e5a:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2e5c:	68a3      	ldr	r3, [r4, #8]
    2e5e:	429e      	cmp	r6, r3
    2e60:	d800      	bhi.n	2e64 <udd_ep_transfer_process+0x40>
    2e62:	e074      	b.n	2f4e <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    2e64:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    2e66:	7ca3      	ldrb	r3, [r4, #18]
    2e68:	2201      	movs	r2, #1
    2e6a:	4393      	bics	r3, r2
    2e6c:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    2e6e:	6823      	ldr	r3, [r4, #0]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d003      	beq.n	2e7c <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2e74:	68e1      	ldr	r1, [r4, #12]
    2e76:	002a      	movs	r2, r5
    2e78:	2000      	movs	r0, #0
    2e7a:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    2e7c:	bc1c      	pop	{r2, r3, r4}
    2e7e:	4690      	mov	r8, r2
    2e80:	4699      	mov	r9, r3
    2e82:	46a2      	mov	sl, r4
    2e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    2e86:	0028      	movs	r0, r5
    2e88:	4b4a      	ldr	r3, [pc, #296]	; (2fb4 <udd_ep_transfer_process+0x190>)
    2e8a:	4798      	blx	r3
    2e8c:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    2e8e:	270f      	movs	r7, #15
    2e90:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    2e92:	8a03      	ldrh	r3, [r0, #16]
    2e94:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    2e96:	464b      	mov	r3, r9
    2e98:	885e      	ldrh	r6, [r3, #2]
    2e9a:	68c3      	ldr	r3, [r0, #12]
    2e9c:	469c      	mov	ip, r3
    2e9e:	4466      	add	r6, ip
    2ea0:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    2ea2:	6881      	ldr	r1, [r0, #8]
    2ea4:	428e      	cmp	r6, r1
    2ea6:	d025      	beq.n	2ef4 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2ea8:	1b8d      	subs	r5, r1, r6
    2eaa:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2eac:	4b42      	ldr	r3, [pc, #264]	; (2fb8 <udd_ep_transfer_process+0x194>)
    2eae:	429d      	cmp	r5, r3
    2eb0:	d906      	bls.n	2ec0 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    2eb2:	001d      	movs	r5, r3
    2eb4:	4641      	mov	r1, r8
    2eb6:	0018      	movs	r0, r3
    2eb8:	4b40      	ldr	r3, [pc, #256]	; (2fbc <udd_ep_transfer_process+0x198>)
    2eba:	4798      	blx	r3
    2ebc:	1a6d      	subs	r5, r5, r1
    2ebe:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2ec0:	7ca2      	ldrb	r2, [r4, #18]
    2ec2:	2300      	movs	r3, #0
    2ec4:	0792      	lsls	r2, r2, #30
    2ec6:	d507      	bpl.n	2ed8 <udd_ep_transfer_process+0xb4>
    2ec8:	4641      	mov	r1, r8
    2eca:	0028      	movs	r0, r5
    2ecc:	4b3c      	ldr	r3, [pc, #240]	; (2fc0 <udd_ep_transfer_process+0x19c>)
    2ece:	4798      	blx	r3
    2ed0:	b289      	uxth	r1, r1
    2ed2:	424b      	negs	r3, r1
    2ed4:	414b      	adcs	r3, r1
    2ed6:	b2db      	uxtb	r3, r3
    2ed8:	005b      	lsls	r3, r3, #1
    2eda:	7ca2      	ldrb	r2, [r4, #18]
    2edc:	2102      	movs	r1, #2
    2ede:	438a      	bics	r2, r1
    2ee0:	4313      	orrs	r3, r2
    2ee2:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2ee4:	6862      	ldr	r2, [r4, #4]
    2ee6:	1992      	adds	r2, r2, r6
    2ee8:	002b      	movs	r3, r5
    2eea:	0039      	movs	r1, r7
    2eec:	4835      	ldr	r0, [pc, #212]	; (2fc4 <udd_ep_transfer_process+0x1a0>)
    2eee:	4c36      	ldr	r4, [pc, #216]	; (2fc8 <udd_ep_transfer_process+0x1a4>)
    2ef0:	47a0      	blx	r4
    2ef2:	e7c3      	b.n	2e7c <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    2ef4:	7c83      	ldrb	r3, [r0, #18]
    2ef6:	079b      	lsls	r3, r3, #30
    2ef8:	d40b      	bmi.n	2f12 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    2efa:	7c83      	ldrb	r3, [r0, #18]
    2efc:	2201      	movs	r2, #1
    2efe:	4393      	bics	r3, r2
    2f00:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2f02:	6803      	ldr	r3, [r0, #0]
    2f04:	2b00      	cmp	r3, #0
    2f06:	d0b9      	beq.n	2e7c <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2f08:	002a      	movs	r2, r5
    2f0a:	0031      	movs	r1, r6
    2f0c:	2000      	movs	r0, #0
    2f0e:	4798      	blx	r3
    2f10:	e7b4      	b.n	2e7c <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    2f12:	7c83      	ldrb	r3, [r0, #18]
    2f14:	2202      	movs	r2, #2
    2f16:	4393      	bics	r3, r2
    2f18:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2f1a:	6842      	ldr	r2, [r0, #4]
    2f1c:	1992      	adds	r2, r2, r6
    2f1e:	2300      	movs	r3, #0
    2f20:	0039      	movs	r1, r7
    2f22:	4828      	ldr	r0, [pc, #160]	; (2fc4 <udd_ep_transfer_process+0x1a0>)
    2f24:	4c28      	ldr	r4, [pc, #160]	; (2fc8 <udd_ep_transfer_process+0x1a4>)
    2f26:	47a0      	blx	r4
    2f28:	e7a8      	b.n	2e7c <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2f2a:	6843      	ldr	r3, [r0, #4]
    2f2c:	68c2      	ldr	r2, [r0, #12]
    2f2e:	4694      	mov	ip, r2
    2f30:	4463      	add	r3, ip
    2f32:	001e      	movs	r6, r3
    2f34:	4641      	mov	r1, r8
    2f36:	6880      	ldr	r0, [r0, #8]
    2f38:	4b21      	ldr	r3, [pc, #132]	; (2fc0 <udd_ep_transfer_process+0x19c>)
    2f3a:	4798      	blx	r3
    2f3c:	000a      	movs	r2, r1
    2f3e:	1e7b      	subs	r3, r7, #1
    2f40:	019b      	lsls	r3, r3, #6
    2f42:	4922      	ldr	r1, [pc, #136]	; (2fcc <udd_ep_transfer_process+0x1a8>)
    2f44:	1859      	adds	r1, r3, r1
    2f46:	0030      	movs	r0, r6
    2f48:	4b21      	ldr	r3, [pc, #132]	; (2fd0 <udd_ep_transfer_process+0x1ac>)
    2f4a:	4798      	blx	r3
    2f4c:	e782      	b.n	2e54 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2f4e:	464a      	mov	r2, r9
    2f50:	8892      	ldrh	r2, [r2, #4]
    2f52:	4552      	cmp	r2, sl
    2f54:	d000      	beq.n	2f58 <udd_ep_transfer_process+0x134>
    2f56:	e786      	b.n	2e66 <udd_ep_transfer_process+0x42>
    2f58:	429e      	cmp	r6, r3
    2f5a:	d100      	bne.n	2f5e <udd_ep_transfer_process+0x13a>
    2f5c:	e783      	b.n	2e66 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    2f5e:	1b9b      	subs	r3, r3, r6
    2f60:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2f62:	4b15      	ldr	r3, [pc, #84]	; (2fb8 <udd_ep_transfer_process+0x194>)
    2f64:	429d      	cmp	r5, r3
    2f66:	d916      	bls.n	2f96 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    2f68:	001d      	movs	r5, r3
    2f6a:	4641      	mov	r1, r8
    2f6c:	0018      	movs	r0, r3
    2f6e:	4b13      	ldr	r3, [pc, #76]	; (2fbc <udd_ep_transfer_process+0x198>)
    2f70:	4798      	blx	r3
    2f72:	1a6b      	subs	r3, r5, r1
    2f74:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    2f76:	4598      	cmp	r8, r3
    2f78:	d914      	bls.n	2fa4 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    2f7a:	7ca3      	ldrb	r3, [r4, #18]
    2f7c:	2204      	movs	r2, #4
    2f7e:	4313      	orrs	r3, r2
    2f80:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    2f82:	1e7a      	subs	r2, r7, #1
    2f84:	0192      	lsls	r2, r2, #6
    2f86:	4b11      	ldr	r3, [pc, #68]	; (2fcc <udd_ep_transfer_process+0x1a8>)
    2f88:	18d2      	adds	r2, r2, r3
    2f8a:	4643      	mov	r3, r8
    2f8c:	0039      	movs	r1, r7
    2f8e:	480d      	ldr	r0, [pc, #52]	; (2fc4 <udd_ep_transfer_process+0x1a0>)
    2f90:	4c10      	ldr	r4, [pc, #64]	; (2fd4 <udd_ep_transfer_process+0x1b0>)
    2f92:	47a0      	blx	r4
    2f94:	e772      	b.n	2e7c <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    2f96:	4641      	mov	r1, r8
    2f98:	0028      	movs	r0, r5
    2f9a:	4b09      	ldr	r3, [pc, #36]	; (2fc0 <udd_ep_transfer_process+0x19c>)
    2f9c:	4798      	blx	r3
    2f9e:	1a6b      	subs	r3, r5, r1
    2fa0:	b29b      	uxth	r3, r3
    2fa2:	e7e8      	b.n	2f76 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2fa4:	6862      	ldr	r2, [r4, #4]
    2fa6:	1992      	adds	r2, r2, r6
    2fa8:	0039      	movs	r1, r7
    2faa:	4806      	ldr	r0, [pc, #24]	; (2fc4 <udd_ep_transfer_process+0x1a0>)
    2fac:	4c09      	ldr	r4, [pc, #36]	; (2fd4 <udd_ep_transfer_process+0x1b0>)
    2fae:	47a0      	blx	r4
    2fb0:	e764      	b.n	2e7c <udd_ep_transfer_process+0x58>
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	00002e01 	.word	0x00002e01
    2fb8:	00001fff 	.word	0x00001fff
    2fbc:	00008e65 	.word	0x00008e65
    2fc0:	00008c91 	.word	0x00008c91
    2fc4:	20000420 	.word	0x20000420
    2fc8:	000067f1 	.word	0x000067f1
    2fcc:	200003a0 	.word	0x200003a0
    2fd0:	00009161 	.word	0x00009161
    2fd4:	00006845 	.word	0x00006845

00002fd8 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    2fd8:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2fda:	2205      	movs	r2, #5
    2fdc:	4b05      	ldr	r3, [pc, #20]	; (2ff4 <udd_ctrl_stall_data+0x1c>)
    2fde:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    2fe0:	4c05      	ldr	r4, [pc, #20]	; (2ff8 <udd_ctrl_stall_data+0x20>)
    2fe2:	2180      	movs	r1, #128	; 0x80
    2fe4:	0020      	movs	r0, r4
    2fe6:	4b05      	ldr	r3, [pc, #20]	; (2ffc <udd_ctrl_stall_data+0x24>)
    2fe8:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    2fea:	2100      	movs	r1, #0
    2fec:	0020      	movs	r0, r4
    2fee:	4b04      	ldr	r3, [pc, #16]	; (3000 <udd_ctrl_stall_data+0x28>)
    2ff0:	4798      	blx	r3
}
    2ff2:	bd10      	pop	{r4, pc}
    2ff4:	20000262 	.word	0x20000262
    2ff8:	20000420 	.word	0x20000420
    2ffc:	00006745 	.word	0x00006745
    3000:	0000676b 	.word	0x0000676b

00003004 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    3004:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3006:	4c08      	ldr	r4, [pc, #32]	; (3028 <_usb_device_lpm_suspend+0x24>)
    3008:	2106      	movs	r1, #6
    300a:	0020      	movs	r0, r4
    300c:	4d07      	ldr	r5, [pc, #28]	; (302c <_usb_device_lpm_suspend+0x28>)
    300e:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3010:	2104      	movs	r1, #4
    3012:	0020      	movs	r0, r4
    3014:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3016:	2102      	movs	r1, #2
    3018:	0020      	movs	r0, r4
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <_usb_device_lpm_suspend+0x2c>)
    301c:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    301e:	2002      	movs	r0, #2
    3020:	4b04      	ldr	r3, [pc, #16]	; (3034 <_usb_device_lpm_suspend+0x30>)
    3022:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3024:	bd70      	pop	{r4, r5, r6, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	20000420 	.word	0x20000420
    302c:	00006259 	.word	0x00006259
    3030:	00006239 	.word	0x00006239
    3034:	00002d41 	.word	0x00002d41

00003038 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3038:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    303a:	4b13      	ldr	r3, [pc, #76]	; (3088 <_usb_on_wakeup+0x50>)
    303c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    303e:	069b      	lsls	r3, r3, #26
    3040:	d41c      	bmi.n	307c <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3042:	4911      	ldr	r1, [pc, #68]	; (3088 <_usb_on_wakeup+0x50>)
    3044:	22d0      	movs	r2, #208	; 0xd0
    3046:	68cb      	ldr	r3, [r1, #12]
    3048:	4013      	ands	r3, r2
    304a:	2bd0      	cmp	r3, #208	; 0xd0
    304c:	d1fb      	bne.n	3046 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    304e:	4c0f      	ldr	r4, [pc, #60]	; (308c <_usb_on_wakeup+0x54>)
    3050:	2102      	movs	r1, #2
    3052:	0020      	movs	r0, r4
    3054:	4b0e      	ldr	r3, [pc, #56]	; (3090 <_usb_on_wakeup+0x58>)
    3056:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3058:	2104      	movs	r1, #4
    305a:	0020      	movs	r0, r4
    305c:	4d0d      	ldr	r5, [pc, #52]	; (3094 <_usb_on_wakeup+0x5c>)
    305e:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3060:	4a0d      	ldr	r2, [pc, #52]	; (3098 <_usb_on_wakeup+0x60>)
    3062:	2106      	movs	r1, #6
    3064:	0020      	movs	r0, r4
    3066:	4b0d      	ldr	r3, [pc, #52]	; (309c <_usb_on_wakeup+0x64>)
    3068:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    306a:	2106      	movs	r1, #6
    306c:	0020      	movs	r0, r4
    306e:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3070:	2003      	movs	r0, #3
    3072:	4b0b      	ldr	r3, [pc, #44]	; (30a0 <_usb_on_wakeup+0x68>)
    3074:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3076:	4b0b      	ldr	r3, [pc, #44]	; (30a4 <_usb_on_wakeup+0x6c>)
    3078:	4798      	blx	r3
#endif
}
    307a:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    307c:	4902      	ldr	r1, [pc, #8]	; (3088 <_usb_on_wakeup+0x50>)
    307e:	2210      	movs	r2, #16
    3080:	68cb      	ldr	r3, [r1, #12]
    3082:	421a      	tst	r2, r3
    3084:	d0fc      	beq.n	3080 <_usb_on_wakeup+0x48>
    3086:	e7e2      	b.n	304e <_usb_on_wakeup+0x16>
    3088:	40000800 	.word	0x40000800
    308c:	20000420 	.word	0x20000420
    3090:	00006259 	.word	0x00006259
    3094:	00006239 	.word	0x00006239
    3098:	00003005 	.word	0x00003005
    309c:	00006215 	.word	0x00006215
    30a0:	00002d41 	.word	0x00002d41
    30a4:	00005d79 	.word	0x00005d79

000030a8 <_usb_on_bus_reset>:
{
    30a8:	b530      	push	{r4, r5, lr}
    30aa:	b083      	sub	sp, #12
    30ac:	0004      	movs	r4, r0
	udc_reset();
    30ae:	4b1e      	ldr	r3, [pc, #120]	; (3128 <_usb_on_bus_reset+0x80>)
    30b0:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    30b2:	2380      	movs	r3, #128	; 0x80
    30b4:	6822      	ldr	r2, [r4, #0]
    30b6:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    30b8:	ad01      	add	r5, sp, #4
    30ba:	0028      	movs	r0, r5
    30bc:	4b1b      	ldr	r3, [pc, #108]	; (312c <_usb_on_bus_reset+0x84>)
    30be:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    30c0:	2303      	movs	r3, #3
    30c2:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    30c4:	0029      	movs	r1, r5
    30c6:	0020      	movs	r0, r4
    30c8:	4b19      	ldr	r3, [pc, #100]	; (3130 <_usb_on_bus_reset+0x88>)
    30ca:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    30cc:	4919      	ldr	r1, [pc, #100]	; (3134 <_usb_on_bus_reset+0x8c>)
    30ce:	0020      	movs	r0, r4
    30d0:	4b19      	ldr	r3, [pc, #100]	; (3138 <_usb_on_bus_reset+0x90>)
    30d2:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    30d4:	4b19      	ldr	r3, [pc, #100]	; (313c <_usb_on_bus_reset+0x94>)
    30d6:	2202      	movs	r2, #2
    30d8:	2100      	movs	r1, #0
    30da:	0020      	movs	r0, r4
    30dc:	4d18      	ldr	r5, [pc, #96]	; (3140 <_usb_on_bus_reset+0x98>)
    30de:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    30e0:	4b18      	ldr	r3, [pc, #96]	; (3144 <_usb_on_bus_reset+0x9c>)
    30e2:	2200      	movs	r2, #0
    30e4:	2100      	movs	r1, #0
    30e6:	0020      	movs	r0, r4
    30e8:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    30ea:	4b17      	ldr	r3, [pc, #92]	; (3148 <_usb_on_bus_reset+0xa0>)
    30ec:	2201      	movs	r2, #1
    30ee:	2100      	movs	r1, #0
    30f0:	0020      	movs	r0, r4
    30f2:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    30f4:	2202      	movs	r2, #2
    30f6:	2100      	movs	r1, #0
    30f8:	0020      	movs	r0, r4
    30fa:	4d14      	ldr	r5, [pc, #80]	; (314c <_usb_on_bus_reset+0xa4>)
    30fc:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    30fe:	2200      	movs	r2, #0
    3100:	2100      	movs	r1, #0
    3102:	0020      	movs	r0, r4
    3104:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3106:	2201      	movs	r2, #1
    3108:	2100      	movs	r1, #0
    310a:	0020      	movs	r0, r4
    310c:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    310e:	6821      	ldr	r1, [r4, #0]
    3110:	890b      	ldrh	r3, [r1, #8]
    3112:	4a0f      	ldr	r2, [pc, #60]	; (3150 <_usb_on_bus_reset+0xa8>)
    3114:	401a      	ands	r2, r3
    3116:	2380      	movs	r3, #128	; 0x80
    3118:	00db      	lsls	r3, r3, #3
    311a:	4313      	orrs	r3, r2
    311c:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    311e:	2200      	movs	r2, #0
    3120:	4b0c      	ldr	r3, [pc, #48]	; (3154 <_usb_on_bus_reset+0xac>)
    3122:	701a      	strb	r2, [r3, #0]
}
    3124:	b003      	add	sp, #12
    3126:	bd30      	pop	{r4, r5, pc}
    3128:	000019e1 	.word	0x000019e1
    312c:	00006465 	.word	0x00006465
    3130:	00006475 	.word	0x00006475
    3134:	200005a0 	.word	0x200005a0
    3138:	00006895 	.word	0x00006895
    313c:	00003291 	.word	0x00003291
    3140:	00006275 	.word	0x00006275
    3144:	000035ad 	.word	0x000035ad
    3148:	00003195 	.word	0x00003195
    314c:	000062c5 	.word	0x000062c5
    3150:	fffff3ff 	.word	0xfffff3ff
    3154:	20000262 	.word	0x20000262

00003158 <udd_ctrl_send_zlp_in>:
{
    3158:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    315a:	2203      	movs	r2, #3
    315c:	4b07      	ldr	r3, [pc, #28]	; (317c <udd_ctrl_send_zlp_in+0x24>)
    315e:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3160:	4c07      	ldr	r4, [pc, #28]	; (3180 <udd_ctrl_send_zlp_in+0x28>)
    3162:	4908      	ldr	r1, [pc, #32]	; (3184 <udd_ctrl_send_zlp_in+0x2c>)
    3164:	0020      	movs	r0, r4
    3166:	4b08      	ldr	r3, [pc, #32]	; (3188 <udd_ctrl_send_zlp_in+0x30>)
    3168:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    316a:	4b08      	ldr	r3, [pc, #32]	; (318c <udd_ctrl_send_zlp_in+0x34>)
    316c:	689a      	ldr	r2, [r3, #8]
    316e:	2300      	movs	r3, #0
    3170:	2100      	movs	r1, #0
    3172:	0020      	movs	r0, r4
    3174:	4c06      	ldr	r4, [pc, #24]	; (3190 <udd_ctrl_send_zlp_in+0x38>)
    3176:	47a0      	blx	r4
}
    3178:	bd10      	pop	{r4, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	20000262 	.word	0x20000262
    3180:	20000420 	.word	0x20000420
    3184:	200005a0 	.word	0x200005a0
    3188:	00006895 	.word	0x00006895
    318c:	20000588 	.word	0x20000588
    3190:	000067f1 	.word	0x000067f1

00003194 <_usb_ep0_on_tansfer_fail>:
{
    3194:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    3196:	7989      	ldrb	r1, [r1, #6]
    3198:	b24b      	sxtb	r3, r1
    319a:	2b00      	cmp	r3, #0
    319c:	db06      	blt.n	31ac <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    319e:	4b0e      	ldr	r3, [pc, #56]	; (31d8 <_usb_ep0_on_tansfer_fail+0x44>)
    31a0:	781b      	ldrb	r3, [r3, #0]
    31a2:	2b02      	cmp	r3, #2
    31a4:	d00f      	beq.n	31c6 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    31a6:	2b03      	cmp	r3, #3
    31a8:	d011      	beq.n	31ce <_usb_ep0_on_tansfer_fail+0x3a>
}
    31aa:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    31ac:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <_usb_ep0_on_tansfer_fail+0x44>)
    31ae:	781b      	ldrb	r3, [r3, #0]
    31b0:	2b01      	cmp	r3, #1
    31b2:	d005      	beq.n	31c0 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    31b4:	2b04      	cmp	r3, #4
    31b6:	d1f8      	bne.n	31aa <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    31b8:	4808      	ldr	r0, [pc, #32]	; (31dc <_usb_ep0_on_tansfer_fail+0x48>)
    31ba:	4b09      	ldr	r3, [pc, #36]	; (31e0 <_usb_ep0_on_tansfer_fail+0x4c>)
    31bc:	4798      	blx	r3
    31be:	e7f4      	b.n	31aa <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    31c0:	4b08      	ldr	r3, [pc, #32]	; (31e4 <_usb_ep0_on_tansfer_fail+0x50>)
    31c2:	4798      	blx	r3
    31c4:	e7f1      	b.n	31aa <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    31c6:	2204      	movs	r2, #4
    31c8:	4b03      	ldr	r3, [pc, #12]	; (31d8 <_usb_ep0_on_tansfer_fail+0x44>)
    31ca:	701a      	strb	r2, [r3, #0]
    31cc:	e7ed      	b.n	31aa <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    31ce:	4803      	ldr	r0, [pc, #12]	; (31dc <_usb_ep0_on_tansfer_fail+0x48>)
    31d0:	4b03      	ldr	r3, [pc, #12]	; (31e0 <_usb_ep0_on_tansfer_fail+0x4c>)
    31d2:	4798      	blx	r3
}
    31d4:	e7e9      	b.n	31aa <_usb_ep0_on_tansfer_fail+0x16>
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	20000262 	.word	0x20000262
    31dc:	20000420 	.word	0x20000420
    31e0:	00006745 	.word	0x00006745
    31e4:	00003159 	.word	0x00003159

000031e8 <udd_ctrl_in_sent>:
{
    31e8:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    31ea:	4b20      	ldr	r3, [pc, #128]	; (326c <udd_ctrl_in_sent+0x84>)
    31ec:	881b      	ldrh	r3, [r3, #0]
    31ee:	4a20      	ldr	r2, [pc, #128]	; (3270 <udd_ctrl_in_sent+0x88>)
    31f0:	8994      	ldrh	r4, [r2, #12]
    31f2:	1ae4      	subs	r4, r4, r3
    31f4:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    31f6:	2c00      	cmp	r4, #0
    31f8:	d118      	bne.n	322c <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    31fa:	4a1e      	ldr	r2, [pc, #120]	; (3274 <udd_ctrl_in_sent+0x8c>)
    31fc:	8811      	ldrh	r1, [r2, #0]
    31fe:	185b      	adds	r3, r3, r1
    3200:	b29b      	uxth	r3, r3
    3202:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3204:	4a1a      	ldr	r2, [pc, #104]	; (3270 <udd_ctrl_in_sent+0x88>)
    3206:	88d2      	ldrh	r2, [r2, #6]
    3208:	429a      	cmp	r2, r3
    320a:	d023      	beq.n	3254 <udd_ctrl_in_sent+0x6c>
    320c:	4b1a      	ldr	r3, [pc, #104]	; (3278 <udd_ctrl_in_sent+0x90>)
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	2b00      	cmp	r3, #0
    3212:	d11f      	bne.n	3254 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3214:	4b16      	ldr	r3, [pc, #88]	; (3270 <udd_ctrl_in_sent+0x88>)
    3216:	695b      	ldr	r3, [r3, #20]
    3218:	2b00      	cmp	r3, #0
    321a:	d023      	beq.n	3264 <udd_ctrl_in_sent+0x7c>
    321c:	4798      	blx	r3
    321e:	2800      	cmp	r0, #0
    3220:	d020      	beq.n	3264 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    3222:	2200      	movs	r2, #0
    3224:	4b11      	ldr	r3, [pc, #68]	; (326c <udd_ctrl_in_sent+0x84>)
    3226:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3228:	4b11      	ldr	r3, [pc, #68]	; (3270 <udd_ctrl_in_sent+0x88>)
    322a:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    322c:	2c3f      	cmp	r4, #63	; 0x3f
    322e:	d919      	bls.n	3264 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3230:	2200      	movs	r2, #0
    3232:	4b11      	ldr	r3, [pc, #68]	; (3278 <udd_ctrl_in_sent+0x90>)
    3234:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    3236:	2440      	movs	r4, #64	; 0x40
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3238:	4d0c      	ldr	r5, [pc, #48]	; (326c <udd_ctrl_in_sent+0x84>)
    323a:	882b      	ldrh	r3, [r5, #0]
    323c:	4a0c      	ldr	r2, [pc, #48]	; (3270 <udd_ctrl_in_sent+0x88>)
    323e:	6892      	ldr	r2, [r2, #8]
    3240:	18d2      	adds	r2, r2, r3
    3242:	0023      	movs	r3, r4
    3244:	2100      	movs	r1, #0
    3246:	480d      	ldr	r0, [pc, #52]	; (327c <udd_ctrl_in_sent+0x94>)
    3248:	4e0d      	ldr	r6, [pc, #52]	; (3280 <udd_ctrl_in_sent+0x98>)
    324a:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    324c:	882b      	ldrh	r3, [r5, #0]
    324e:	18e4      	adds	r4, r4, r3
    3250:	802c      	strh	r4, [r5, #0]
}
    3252:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3254:	2204      	movs	r2, #4
    3256:	4b0b      	ldr	r3, [pc, #44]	; (3284 <udd_ctrl_in_sent+0x9c>)
    3258:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    325a:	490b      	ldr	r1, [pc, #44]	; (3288 <udd_ctrl_in_sent+0xa0>)
    325c:	4807      	ldr	r0, [pc, #28]	; (327c <udd_ctrl_in_sent+0x94>)
    325e:	4b0b      	ldr	r3, [pc, #44]	; (328c <udd_ctrl_in_sent+0xa4>)
    3260:	4798      	blx	r3
			return;
    3262:	e7f6      	b.n	3252 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3264:	2201      	movs	r2, #1
    3266:	4b04      	ldr	r3, [pc, #16]	; (3278 <udd_ctrl_in_sent+0x90>)
    3268:	701a      	strb	r2, [r3, #0]
    326a:	e7e5      	b.n	3238 <udd_ctrl_in_sent+0x50>
    326c:	2000025e 	.word	0x2000025e
    3270:	20000588 	.word	0x20000588
    3274:	20000260 	.word	0x20000260
    3278:	2000025c 	.word	0x2000025c
    327c:	20000420 	.word	0x20000420
    3280:	000067f1 	.word	0x000067f1
    3284:	20000262 	.word	0x20000262
    3288:	200005a0 	.word	0x200005a0
    328c:	00006895 	.word	0x00006895

00003290 <_usb_ep0_on_setup>:
{
    3290:	b510      	push	{r4, lr}
    3292:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    3294:	4b2c      	ldr	r3, [pc, #176]	; (3348 <_usb_ep0_on_setup+0xb8>)
    3296:	781b      	ldrb	r3, [r3, #0]
    3298:	2b00      	cmp	r3, #0
    329a:	d007      	beq.n	32ac <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    329c:	4b2b      	ldr	r3, [pc, #172]	; (334c <_usb_ep0_on_setup+0xbc>)
    329e:	691b      	ldr	r3, [r3, #16]
    32a0:	2b00      	cmp	r3, #0
    32a2:	d000      	beq.n	32a6 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    32a4:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    32a6:	2200      	movs	r2, #0
    32a8:	4b27      	ldr	r3, [pc, #156]	; (3348 <_usb_ep0_on_setup+0xb8>)
    32aa:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    32ac:	8823      	ldrh	r3, [r4, #0]
    32ae:	2b08      	cmp	r3, #8
    32b0:	d002      	beq.n	32b8 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    32b2:	4b27      	ldr	r3, [pc, #156]	; (3350 <_usb_ep0_on_setup+0xc0>)
    32b4:	4798      	blx	r3
}
    32b6:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    32b8:	4a24      	ldr	r2, [pc, #144]	; (334c <_usb_ep0_on_setup+0xbc>)
    32ba:	4b26      	ldr	r3, [pc, #152]	; (3354 <_usb_ep0_on_setup+0xc4>)
    32bc:	7819      	ldrb	r1, [r3, #0]
    32be:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    32c0:	7859      	ldrb	r1, [r3, #1]
    32c2:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    32c4:	78d8      	ldrb	r0, [r3, #3]
    32c6:	0200      	lsls	r0, r0, #8
    32c8:	7899      	ldrb	r1, [r3, #2]
    32ca:	1809      	adds	r1, r1, r0
    32cc:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    32ce:	7958      	ldrb	r0, [r3, #5]
    32d0:	0200      	lsls	r0, r0, #8
    32d2:	7919      	ldrb	r1, [r3, #4]
    32d4:	1809      	adds	r1, r1, r0
    32d6:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    32d8:	79d9      	ldrb	r1, [r3, #7]
    32da:	0209      	lsls	r1, r1, #8
    32dc:	799b      	ldrb	r3, [r3, #6]
    32de:	185b      	adds	r3, r3, r1
    32e0:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    32e2:	4b1d      	ldr	r3, [pc, #116]	; (3358 <_usb_ep0_on_setup+0xc8>)
    32e4:	4798      	blx	r3
    32e6:	2800      	cmp	r0, #0
    32e8:	d016      	beq.n	3318 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    32ea:	4b18      	ldr	r3, [pc, #96]	; (334c <_usb_ep0_on_setup+0xbc>)
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b7f      	cmp	r3, #127	; 0x7f
    32f0:	d815      	bhi.n	331e <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    32f2:	4b16      	ldr	r3, [pc, #88]	; (334c <_usb_ep0_on_setup+0xbc>)
    32f4:	88db      	ldrh	r3, [r3, #6]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d022      	beq.n	3340 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    32fa:	2300      	movs	r3, #0
    32fc:	4a17      	ldr	r2, [pc, #92]	; (335c <_usb_ep0_on_setup+0xcc>)
    32fe:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    3300:	4a17      	ldr	r2, [pc, #92]	; (3360 <_usb_ep0_on_setup+0xd0>)
    3302:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    3304:	2201      	movs	r2, #1
    3306:	4b10      	ldr	r3, [pc, #64]	; (3348 <_usb_ep0_on_setup+0xb8>)
    3308:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    330a:	2340      	movs	r3, #64	; 0x40
    330c:	4a11      	ldr	r2, [pc, #68]	; (3354 <_usb_ep0_on_setup+0xc4>)
    330e:	2100      	movs	r1, #0
    3310:	4814      	ldr	r0, [pc, #80]	; (3364 <_usb_ep0_on_setup+0xd4>)
    3312:	4c15      	ldr	r4, [pc, #84]	; (3368 <_usb_ep0_on_setup+0xd8>)
    3314:	47a0      	blx	r4
    3316:	e7ce      	b.n	32b6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    3318:	4b0d      	ldr	r3, [pc, #52]	; (3350 <_usb_ep0_on_setup+0xc0>)
    331a:	4798      	blx	r3
			return;
    331c:	e7cb      	b.n	32b6 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    331e:	2300      	movs	r3, #0
    3320:	4a0e      	ldr	r2, [pc, #56]	; (335c <_usb_ep0_on_setup+0xcc>)
    3322:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    3324:	4a0e      	ldr	r2, [pc, #56]	; (3360 <_usb_ep0_on_setup+0xd0>)
    3326:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    3328:	2202      	movs	r2, #2
    332a:	4b07      	ldr	r3, [pc, #28]	; (3348 <_usb_ep0_on_setup+0xb8>)
    332c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    332e:	2340      	movs	r3, #64	; 0x40
    3330:	4a08      	ldr	r2, [pc, #32]	; (3354 <_usb_ep0_on_setup+0xc4>)
    3332:	2100      	movs	r1, #0
    3334:	480b      	ldr	r0, [pc, #44]	; (3364 <_usb_ep0_on_setup+0xd4>)
    3336:	4c0c      	ldr	r4, [pc, #48]	; (3368 <_usb_ep0_on_setup+0xd8>)
    3338:	47a0      	blx	r4
			udd_ctrl_in_sent();
    333a:	4b0c      	ldr	r3, [pc, #48]	; (336c <_usb_ep0_on_setup+0xdc>)
    333c:	4798      	blx	r3
    333e:	e7ba      	b.n	32b6 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    3340:	4b0b      	ldr	r3, [pc, #44]	; (3370 <_usb_ep0_on_setup+0xe0>)
    3342:	4798      	blx	r3
				return;
    3344:	e7b7      	b.n	32b6 <_usb_ep0_on_setup+0x26>
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	20000262 	.word	0x20000262
    334c:	20000588 	.word	0x20000588
    3350:	00002fd9 	.word	0x00002fd9
    3354:	200005a0 	.word	0x200005a0
    3358:	00001a71 	.word	0x00001a71
    335c:	20000260 	.word	0x20000260
    3360:	2000025e 	.word	0x2000025e
    3364:	20000420 	.word	0x20000420
    3368:	00006845 	.word	0x00006845
    336c:	000031e9 	.word	0x000031e9
    3370:	00003159 	.word	0x00003159

00003374 <_usb_on_sof_notify>:
{
    3374:	b510      	push	{r4, lr}
	udc_sof_notify();
    3376:	4b02      	ldr	r3, [pc, #8]	; (3380 <_usb_on_sof_notify+0xc>)
    3378:	4798      	blx	r3
	UDC_SOF_EVENT();
    337a:	4b02      	ldr	r3, [pc, #8]	; (3384 <_usb_on_sof_notify+0x10>)
    337c:	4798      	blx	r3
}
    337e:	bd10      	pop	{r4, pc}
    3380:	00001a2d 	.word	0x00001a2d
    3384:	00005d85 	.word	0x00005d85

00003388 <_usb_on_suspend>:
{
    3388:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    338a:	4c07      	ldr	r4, [pc, #28]	; (33a8 <_usb_on_suspend+0x20>)
    338c:	2104      	movs	r1, #4
    338e:	0020      	movs	r0, r4
    3390:	4b06      	ldr	r3, [pc, #24]	; (33ac <_usb_on_suspend+0x24>)
    3392:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3394:	2102      	movs	r1, #2
    3396:	0020      	movs	r0, r4
    3398:	4b05      	ldr	r3, [pc, #20]	; (33b0 <_usb_on_suspend+0x28>)
    339a:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    339c:	2001      	movs	r0, #1
    339e:	4b05      	ldr	r3, [pc, #20]	; (33b4 <_usb_on_suspend+0x2c>)
    33a0:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    33a2:	4b05      	ldr	r3, [pc, #20]	; (33b8 <_usb_on_suspend+0x30>)
    33a4:	4798      	blx	r3
}
    33a6:	bd10      	pop	{r4, pc}
    33a8:	20000420 	.word	0x20000420
    33ac:	00006259 	.word	0x00006259
    33b0:	00006239 	.word	0x00006239
    33b4:	00002d41 	.word	0x00002d41
    33b8:	00005d6d 	.word	0x00005d6d

000033bc <udd_ep_abort>:
{
    33bc:	b510      	push	{r4, lr}
    33be:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    33c0:	0001      	movs	r1, r0
    33c2:	480a      	ldr	r0, [pc, #40]	; (33ec <udd_ep_abort+0x30>)
    33c4:	4b0a      	ldr	r3, [pc, #40]	; (33f0 <udd_ep_abort+0x34>)
    33c6:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    33c8:	0020      	movs	r0, r4
    33ca:	4b0a      	ldr	r3, [pc, #40]	; (33f4 <udd_ep_abort+0x38>)
    33cc:	4798      	blx	r3
	if (!ptr_job->busy) {
    33ce:	7c83      	ldrb	r3, [r0, #18]
    33d0:	07db      	lsls	r3, r3, #31
    33d2:	d50a      	bpl.n	33ea <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    33d4:	7c83      	ldrb	r3, [r0, #18]
    33d6:	2201      	movs	r2, #1
    33d8:	4393      	bics	r3, r2
    33da:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    33dc:	6803      	ldr	r3, [r0, #0]
    33de:	2b00      	cmp	r3, #0
    33e0:	d003      	beq.n	33ea <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    33e2:	68c1      	ldr	r1, [r0, #12]
    33e4:	0022      	movs	r2, r4
    33e6:	2001      	movs	r0, #1
    33e8:	4798      	blx	r3
}
    33ea:	bd10      	pop	{r4, pc}
    33ec:	20000420 	.word	0x20000420
    33f0:	000066e5 	.word	0x000066e5
    33f4:	00002e01 	.word	0x00002e01

000033f8 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    33f8:	4b02      	ldr	r3, [pc, #8]	; (3404 <udd_get_frame_number+0xc>)
    33fa:	681b      	ldr	r3, [r3, #0]
    33fc:	8a18      	ldrh	r0, [r3, #16]
    33fe:	0480      	lsls	r0, r0, #18
    3400:	0d40      	lsrs	r0, r0, #21
}
    3402:	4770      	bx	lr
    3404:	20000420 	.word	0x20000420

00003408 <udd_ep_free>:
{
    3408:	b570      	push	{r4, r5, r6, lr}
    340a:	b082      	sub	sp, #8
    340c:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    340e:	ad01      	add	r5, sp, #4
    3410:	0028      	movs	r0, r5
    3412:	4b0d      	ldr	r3, [pc, #52]	; (3448 <udd_ep_free+0x40>)
    3414:	4798      	blx	r3
	udd_ep_abort(ep);
    3416:	0020      	movs	r0, r4
    3418:	4b0c      	ldr	r3, [pc, #48]	; (344c <udd_ep_free+0x44>)
    341a:	4798      	blx	r3
	config_ep.ep_address = ep;
    341c:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    341e:	2300      	movs	r3, #0
    3420:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    3422:	4e0b      	ldr	r6, [pc, #44]	; (3450 <udd_ep_free+0x48>)
    3424:	0029      	movs	r1, r5
    3426:	0030      	movs	r0, r6
    3428:	4b0a      	ldr	r3, [pc, #40]	; (3454 <udd_ep_free+0x4c>)
    342a:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    342c:	210f      	movs	r1, #15
    342e:	4021      	ands	r1, r4
    3430:	2200      	movs	r2, #0
    3432:	0030      	movs	r0, r6
    3434:	4b08      	ldr	r3, [pc, #32]	; (3458 <udd_ep_free+0x50>)
    3436:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3438:	2200      	movs	r2, #0
    343a:	0021      	movs	r1, r4
    343c:	0030      	movs	r0, r6
    343e:	4b07      	ldr	r3, [pc, #28]	; (345c <udd_ep_free+0x54>)
    3440:	4798      	blx	r3
}
    3442:	b002      	add	sp, #8
    3444:	bd70      	pop	{r4, r5, r6, pc}
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	00006465 	.word	0x00006465
    344c:	000033bd 	.word	0x000033bd
    3450:	20000420 	.word	0x20000420
    3454:	00006475 	.word	0x00006475
    3458:	0000629d 	.word	0x0000629d
    345c:	00006395 	.word	0x00006395

00003460 <udd_ep_alloc>:
{
    3460:	b5f0      	push	{r4, r5, r6, r7, lr}
    3462:	b083      	sub	sp, #12
    3464:	0005      	movs	r5, r0
    3466:	000f      	movs	r7, r1
    3468:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    346a:	ae01      	add	r6, sp, #4
    346c:	0030      	movs	r0, r6
    346e:	4b36      	ldr	r3, [pc, #216]	; (3548 <udd_ep_alloc+0xe8>)
    3470:	4798      	blx	r3
	config_ep.ep_address = ep;
    3472:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    3474:	2c08      	cmp	r4, #8
    3476:	d813      	bhi.n	34a0 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    3478:	2200      	movs	r2, #0
    347a:	ab01      	add	r3, sp, #4
    347c:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    347e:	0028      	movs	r0, r5
    3480:	4b32      	ldr	r3, [pc, #200]	; (354c <udd_ep_alloc+0xec>)
    3482:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    3484:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    3486:	2103      	movs	r1, #3
    3488:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    348a:	2901      	cmp	r1, #1
    348c:	d038      	beq.n	3500 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    348e:	2902      	cmp	r1, #2
    3490:	d043      	beq.n	351a <udd_ep_alloc+0xba>
		return false;
    3492:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    3494:	2903      	cmp	r1, #3
    3496:	d13d      	bne.n	3514 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    3498:	2204      	movs	r2, #4
    349a:	ab01      	add	r3, sp, #4
    349c:	70da      	strb	r2, [r3, #3]
    349e:	e032      	b.n	3506 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    34a0:	2c10      	cmp	r4, #16
    34a2:	d803      	bhi.n	34ac <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    34a4:	2201      	movs	r2, #1
    34a6:	ab01      	add	r3, sp, #4
    34a8:	705a      	strb	r2, [r3, #1]
    34aa:	e7e8      	b.n	347e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    34ac:	2c20      	cmp	r4, #32
    34ae:	d803      	bhi.n	34b8 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    34b0:	2202      	movs	r2, #2
    34b2:	ab01      	add	r3, sp, #4
    34b4:	705a      	strb	r2, [r3, #1]
    34b6:	e7e2      	b.n	347e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    34b8:	2c40      	cmp	r4, #64	; 0x40
    34ba:	d803      	bhi.n	34c4 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    34bc:	2203      	movs	r2, #3
    34be:	ab01      	add	r3, sp, #4
    34c0:	705a      	strb	r2, [r3, #1]
    34c2:	e7dc      	b.n	347e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    34c4:	2c80      	cmp	r4, #128	; 0x80
    34c6:	d803      	bhi.n	34d0 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    34c8:	2204      	movs	r2, #4
    34ca:	ab01      	add	r3, sp, #4
    34cc:	705a      	strb	r2, [r3, #1]
    34ce:	e7d6      	b.n	347e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    34d0:	2380      	movs	r3, #128	; 0x80
    34d2:	005b      	lsls	r3, r3, #1
    34d4:	429c      	cmp	r4, r3
    34d6:	d803      	bhi.n	34e0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    34d8:	2205      	movs	r2, #5
    34da:	ab01      	add	r3, sp, #4
    34dc:	705a      	strb	r2, [r3, #1]
    34de:	e7ce      	b.n	347e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    34e0:	2380      	movs	r3, #128	; 0x80
    34e2:	009b      	lsls	r3, r3, #2
    34e4:	429c      	cmp	r4, r3
    34e6:	d803      	bhi.n	34f0 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    34e8:	2206      	movs	r2, #6
    34ea:	ab01      	add	r3, sp, #4
    34ec:	705a      	strb	r2, [r3, #1]
    34ee:	e7c6      	b.n	347e <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    34f0:	4a17      	ldr	r2, [pc, #92]	; (3550 <udd_ep_alloc+0xf0>)
		return false;
    34f2:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    34f4:	4294      	cmp	r4, r2
    34f6:	d80d      	bhi.n	3514 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    34f8:	2207      	movs	r2, #7
    34fa:	ab01      	add	r3, sp, #4
    34fc:	705a      	strb	r2, [r3, #1]
    34fe:	e7be      	b.n	347e <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    3500:	2202      	movs	r2, #2
    3502:	ab01      	add	r3, sp, #4
    3504:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3506:	a901      	add	r1, sp, #4
    3508:	4812      	ldr	r0, [pc, #72]	; (3554 <udd_ep_alloc+0xf4>)
    350a:	4b13      	ldr	r3, [pc, #76]	; (3558 <udd_ep_alloc+0xf8>)
    350c:	4798      	blx	r3
		return false;
    350e:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    3510:	2800      	cmp	r0, #0
    3512:	d006      	beq.n	3522 <udd_ep_alloc+0xc2>
}
    3514:	0018      	movs	r0, r3
    3516:	b003      	add	sp, #12
    3518:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    351a:	2203      	movs	r2, #3
    351c:	ab01      	add	r3, sp, #4
    351e:	70da      	strb	r2, [r3, #3]
    3520:	e7f1      	b.n	3506 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    3522:	210f      	movs	r1, #15
    3524:	4029      	ands	r1, r5
    3526:	4c0b      	ldr	r4, [pc, #44]	; (3554 <udd_ep_alloc+0xf4>)
    3528:	4b0c      	ldr	r3, [pc, #48]	; (355c <udd_ep_alloc+0xfc>)
    352a:	2200      	movs	r2, #0
    352c:	0020      	movs	r0, r4
    352e:	4e0c      	ldr	r6, [pc, #48]	; (3560 <udd_ep_alloc+0x100>)
    3530:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3532:	2200      	movs	r2, #0
    3534:	0029      	movs	r1, r5
    3536:	0020      	movs	r0, r4
    3538:	4e0a      	ldr	r6, [pc, #40]	; (3564 <udd_ep_alloc+0x104>)
    353a:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    353c:	2201      	movs	r2, #1
    353e:	0029      	movs	r1, r5
    3540:	0020      	movs	r0, r4
    3542:	47b0      	blx	r6
	return true;
    3544:	2301      	movs	r3, #1
    3546:	e7e5      	b.n	3514 <udd_ep_alloc+0xb4>
    3548:	00006465 	.word	0x00006465
    354c:	00002e01 	.word	0x00002e01
    3550:	000003ff 	.word	0x000003ff
    3554:	20000420 	.word	0x20000420
    3558:	00006475 	.word	0x00006475
    355c:	00002e25 	.word	0x00002e25
    3560:	00006275 	.word	0x00006275
    3564:	000062c5 	.word	0x000062c5

00003568 <udd_ep_is_halted>:
{
    3568:	b510      	push	{r4, lr}
    356a:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    356c:	4801      	ldr	r0, [pc, #4]	; (3574 <udd_ep_is_halted+0xc>)
    356e:	4b02      	ldr	r3, [pc, #8]	; (3578 <udd_ep_is_halted+0x10>)
    3570:	4798      	blx	r3
}
    3572:	bd10      	pop	{r4, pc}
    3574:	20000420 	.word	0x20000420
    3578:	0000671b 	.word	0x0000671b

0000357c <udd_ep_set_halt>:
{
    357c:	b510      	push	{r4, lr}
    357e:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3580:	230f      	movs	r3, #15
    3582:	4003      	ands	r3, r0
		return false;
    3584:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    3586:	2b02      	cmp	r3, #2
    3588:	d900      	bls.n	358c <udd_ep_set_halt+0x10>
}
    358a:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    358c:	0021      	movs	r1, r4
    358e:	4804      	ldr	r0, [pc, #16]	; (35a0 <udd_ep_set_halt+0x24>)
    3590:	4b04      	ldr	r3, [pc, #16]	; (35a4 <udd_ep_set_halt+0x28>)
    3592:	4798      	blx	r3
	udd_ep_abort(ep);
    3594:	0020      	movs	r0, r4
    3596:	4b04      	ldr	r3, [pc, #16]	; (35a8 <udd_ep_set_halt+0x2c>)
    3598:	4798      	blx	r3
	return true;
    359a:	2001      	movs	r0, #1
    359c:	e7f5      	b.n	358a <udd_ep_set_halt+0xe>
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	20000420 	.word	0x20000420
    35a4:	00006745 	.word	0x00006745
    35a8:	000033bd 	.word	0x000033bd

000035ac <_usb_ep0_on_tansfer_ok>:
{
    35ac:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    35ae:	4b34      	ldr	r3, [pc, #208]	; (3680 <_usb_ep0_on_tansfer_ok+0xd4>)
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	2b01      	cmp	r3, #1
    35b4:	d00a      	beq.n	35cc <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    35b6:	2b02      	cmp	r3, #2
    35b8:	d05f      	beq.n	367a <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    35ba:	4b32      	ldr	r3, [pc, #200]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    35bc:	691b      	ldr	r3, [r3, #16]
    35be:	2b00      	cmp	r3, #0
    35c0:	d000      	beq.n	35c4 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    35c2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    35c4:	2200      	movs	r2, #0
    35c6:	4b2e      	ldr	r3, [pc, #184]	; (3680 <_usb_ep0_on_tansfer_ok+0xd4>)
    35c8:	701a      	strb	r2, [r3, #0]
}
    35ca:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    35cc:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    35ce:	4b2d      	ldr	r3, [pc, #180]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    35d0:	899b      	ldrh	r3, [r3, #12]
    35d2:	4a2d      	ldr	r2, [pc, #180]	; (3688 <_usb_ep0_on_tansfer_ok+0xdc>)
    35d4:	8814      	ldrh	r4, [r2, #0]
    35d6:	1962      	adds	r2, r4, r5
    35d8:	4293      	cmp	r3, r2
    35da:	da01      	bge.n	35e0 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    35dc:	1b1d      	subs	r5, r3, r4
    35de:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    35e0:	4b28      	ldr	r3, [pc, #160]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    35e2:	6898      	ldr	r0, [r3, #8]
    35e4:	1900      	adds	r0, r0, r4
    35e6:	002a      	movs	r2, r5
    35e8:	4928      	ldr	r1, [pc, #160]	; (368c <_usb_ep0_on_tansfer_ok+0xe0>)
    35ea:	4b29      	ldr	r3, [pc, #164]	; (3690 <_usb_ep0_on_tansfer_ok+0xe4>)
    35ec:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    35ee:	1964      	adds	r4, r4, r5
    35f0:	b2a4      	uxth	r4, r4
    35f2:	4b25      	ldr	r3, [pc, #148]	; (3688 <_usb_ep0_on_tansfer_ok+0xdc>)
    35f4:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    35f6:	2d40      	cmp	r5, #64	; 0x40
    35f8:	d00a      	beq.n	3610 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    35fa:	4b22      	ldr	r3, [pc, #136]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    35fc:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    35fe:	695b      	ldr	r3, [r3, #20]
    3600:	2b00      	cmp	r3, #0
    3602:	d002      	beq.n	360a <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    3604:	4798      	blx	r3
    3606:	2800      	cmp	r0, #0
    3608:	d014      	beq.n	3634 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    360a:	4b22      	ldr	r3, [pc, #136]	; (3694 <_usb_ep0_on_tansfer_ok+0xe8>)
    360c:	4798      	blx	r3
    360e:	e7dc      	b.n	35ca <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    3610:	4b1c      	ldr	r3, [pc, #112]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    3612:	88da      	ldrh	r2, [r3, #6]
    3614:	4b20      	ldr	r3, [pc, #128]	; (3698 <_usb_ep0_on_tansfer_ok+0xec>)
    3616:	881b      	ldrh	r3, [r3, #0]
    3618:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    361a:	429a      	cmp	r2, r3
    361c:	dded      	ble.n	35fa <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    361e:	4b19      	ldr	r3, [pc, #100]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    3620:	899b      	ldrh	r3, [r3, #12]
    3622:	42a3      	cmp	r3, r4
    3624:	d00c      	beq.n	3640 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    3626:	2340      	movs	r3, #64	; 0x40
    3628:	4a18      	ldr	r2, [pc, #96]	; (368c <_usb_ep0_on_tansfer_ok+0xe0>)
    362a:	2100      	movs	r1, #0
    362c:	481b      	ldr	r0, [pc, #108]	; (369c <_usb_ep0_on_tansfer_ok+0xf0>)
    362e:	4c1c      	ldr	r4, [pc, #112]	; (36a0 <_usb_ep0_on_tansfer_ok+0xf4>)
    3630:	47a0      	blx	r4
    3632:	e7ca      	b.n	35ca <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3634:	2205      	movs	r2, #5
    3636:	4b12      	ldr	r3, [pc, #72]	; (3680 <_usb_ep0_on_tansfer_ok+0xd4>)
    3638:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    363a:	4b1a      	ldr	r3, [pc, #104]	; (36a4 <_usb_ep0_on_tansfer_ok+0xf8>)
    363c:	4798      	blx	r3
    363e:	e7c4      	b.n	35ca <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    3640:	4b10      	ldr	r3, [pc, #64]	; (3684 <_usb_ep0_on_tansfer_ok+0xd8>)
    3642:	695b      	ldr	r3, [r3, #20]
    3644:	2b00      	cmp	r3, #0
    3646:	d00b      	beq.n	3660 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    3648:	4798      	blx	r3
    364a:	2800      	cmp	r0, #0
    364c:	d00f      	beq.n	366e <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    364e:	4912      	ldr	r1, [pc, #72]	; (3698 <_usb_ep0_on_tansfer_ok+0xec>)
    3650:	4a0d      	ldr	r2, [pc, #52]	; (3688 <_usb_ep0_on_tansfer_ok+0xdc>)
    3652:	880b      	ldrh	r3, [r1, #0]
    3654:	8810      	ldrh	r0, [r2, #0]
    3656:	181b      	adds	r3, r3, r0
    3658:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    365a:	2300      	movs	r3, #0
    365c:	8013      	strh	r3, [r2, #0]
    365e:	e7e2      	b.n	3626 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3660:	2205      	movs	r2, #5
    3662:	4b07      	ldr	r3, [pc, #28]	; (3680 <_usb_ep0_on_tansfer_ok+0xd4>)
    3664:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3666:	2000      	movs	r0, #0
    3668:	4b0e      	ldr	r3, [pc, #56]	; (36a4 <_usb_ep0_on_tansfer_ok+0xf8>)
    366a:	4798      	blx	r3
    366c:	e7ad      	b.n	35ca <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    366e:	2205      	movs	r2, #5
    3670:	4b03      	ldr	r3, [pc, #12]	; (3680 <_usb_ep0_on_tansfer_ok+0xd4>)
    3672:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    3674:	4b0b      	ldr	r3, [pc, #44]	; (36a4 <_usb_ep0_on_tansfer_ok+0xf8>)
    3676:	4798      	blx	r3
    3678:	e7a7      	b.n	35ca <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    367a:	4b0b      	ldr	r3, [pc, #44]	; (36a8 <_usb_ep0_on_tansfer_ok+0xfc>)
    367c:	4798      	blx	r3
    367e:	e7a4      	b.n	35ca <_usb_ep0_on_tansfer_ok+0x1e>
    3680:	20000262 	.word	0x20000262
    3684:	20000588 	.word	0x20000588
    3688:	2000025e 	.word	0x2000025e
    368c:	200005a0 	.word	0x200005a0
    3690:	00009161 	.word	0x00009161
    3694:	00003159 	.word	0x00003159
    3698:	20000260 	.word	0x20000260
    369c:	20000420 	.word	0x20000420
    36a0:	00006845 	.word	0x00006845
    36a4:	0000357d 	.word	0x0000357d
    36a8:	000031e9 	.word	0x000031e9

000036ac <udd_ep_clear_halt>:
{
    36ac:	b570      	push	{r4, r5, r6, lr}
    36ae:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36b0:	230f      	movs	r3, #15
    36b2:	4003      	ands	r3, r0
		return false;
    36b4:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36b6:	2b02      	cmp	r3, #2
    36b8:	d900      	bls.n	36bc <udd_ep_clear_halt+0x10>
}
    36ba:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    36bc:	0020      	movs	r0, r4
    36be:	4b09      	ldr	r3, [pc, #36]	; (36e4 <udd_ep_clear_halt+0x38>)
    36c0:	4798      	blx	r3
    36c2:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    36c4:	0021      	movs	r1, r4
    36c6:	4808      	ldr	r0, [pc, #32]	; (36e8 <udd_ep_clear_halt+0x3c>)
    36c8:	4b08      	ldr	r3, [pc, #32]	; (36ec <udd_ep_clear_halt+0x40>)
    36ca:	4798      	blx	r3
	if (ptr_job->busy == true) {
    36cc:	7cab      	ldrb	r3, [r5, #18]
	return true;
    36ce:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    36d0:	07db      	lsls	r3, r3, #31
    36d2:	d5f2      	bpl.n	36ba <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    36d4:	7cab      	ldrb	r3, [r5, #18]
    36d6:	2201      	movs	r2, #1
    36d8:	4393      	bics	r3, r2
    36da:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    36dc:	682b      	ldr	r3, [r5, #0]
    36de:	4798      	blx	r3
	return true;
    36e0:	2001      	movs	r0, #1
    36e2:	e7ea      	b.n	36ba <udd_ep_clear_halt+0xe>
    36e4:	00002e01 	.word	0x00002e01
    36e8:	20000420 	.word	0x20000420
    36ec:	0000676b 	.word	0x0000676b

000036f0 <udd_ep_wait_stall_clear>:
{
    36f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36f2:	0004      	movs	r4, r0
    36f4:	000d      	movs	r5, r1
	if (USB_DEVICE_MAX_EP < ep_num) {
    36f6:	230f      	movs	r3, #15
    36f8:	4003      	ands	r3, r0
		return false;
    36fa:	2600      	movs	r6, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    36fc:	2b02      	cmp	r3, #2
    36fe:	d805      	bhi.n	370c <udd_ep_wait_stall_clear+0x1c>
	ptr_job = udd_ep_get_job(ep);
    3700:	4b0d      	ldr	r3, [pc, #52]	; (3738 <udd_ep_wait_stall_clear+0x48>)
    3702:	4798      	blx	r3
    3704:	0007      	movs	r7, r0
	if (ptr_job->busy == true) {
    3706:	7c83      	ldrb	r3, [r0, #18]
    3708:	07db      	lsls	r3, r3, #31
    370a:	d501      	bpl.n	3710 <udd_ep_wait_stall_clear+0x20>
}
    370c:	0030      	movs	r0, r6
    370e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (usb_device_endpoint_is_halted(&usb_device, ep)) {
    3710:	0021      	movs	r1, r4
    3712:	480a      	ldr	r0, [pc, #40]	; (373c <udd_ep_wait_stall_clear+0x4c>)
    3714:	4b0a      	ldr	r3, [pc, #40]	; (3740 <udd_ep_wait_stall_clear+0x50>)
    3716:	4798      	blx	r3
    3718:	1e06      	subs	r6, r0, #0
    371a:	d005      	beq.n	3728 <udd_ep_wait_stall_clear+0x38>
		ptr_job->busy = true;
    371c:	7cbb      	ldrb	r3, [r7, #18]
    371e:	2201      	movs	r2, #1
    3720:	4313      	orrs	r3, r2
    3722:	74bb      	strb	r3, [r7, #18]
		ptr_job->call_nohalt = callback;
    3724:	603d      	str	r5, [r7, #0]
		return true;
    3726:	e7f1      	b.n	370c <udd_ep_wait_stall_clear+0x1c>
	} else if (usb_device_endpoint_is_configured(&usb_device, ep)) {
    3728:	0021      	movs	r1, r4
    372a:	4804      	ldr	r0, [pc, #16]	; (373c <udd_ep_wait_stall_clear+0x4c>)
    372c:	4b05      	ldr	r3, [pc, #20]	; (3744 <udd_ep_wait_stall_clear+0x54>)
    372e:	4798      	blx	r3
    3730:	1e06      	subs	r6, r0, #0
    3732:	d0eb      	beq.n	370c <udd_ep_wait_stall_clear+0x1c>
		callback(); /* Endpoint not halted then call directly callback */
    3734:	47a8      	blx	r5
		return true;
    3736:	e7e9      	b.n	370c <udd_ep_wait_stall_clear+0x1c>
    3738:	00002e01 	.word	0x00002e01
    373c:	20000420 	.word	0x20000420
    3740:	0000671b 	.word	0x0000671b
    3744:	000066b9 	.word	0x000066b9

00003748 <udd_ep_run>:
{
    3748:	b5f0      	push	{r4, r5, r6, r7, lr}
    374a:	b087      	sub	sp, #28
    374c:	0005      	movs	r5, r0
    374e:	9103      	str	r1, [sp, #12]
    3750:	9202      	str	r2, [sp, #8]
    3752:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    3754:	260f      	movs	r6, #15
    3756:	4006      	ands	r6, r0
		return false;
    3758:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    375a:	2e02      	cmp	r6, #2
    375c:	d902      	bls.n	3764 <udd_ep_run+0x1c>
}
    375e:	0020      	movs	r0, r4
    3760:	b007      	add	sp, #28
    3762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    3764:	4b64      	ldr	r3, [pc, #400]	; (38f8 <udd_ep_run+0x1b0>)
    3766:	4798      	blx	r3
    3768:	1e04      	subs	r4, r0, #0
    376a:	d000      	beq.n	376e <udd_ep_run+0x26>
    376c:	e0bd      	b.n	38ea <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    376e:	0028      	movs	r0, r5
    3770:	4b62      	ldr	r3, [pc, #392]	; (38fc <udd_ep_run+0x1b4>)
    3772:	4798      	blx	r3
    3774:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3776:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    377a:	425a      	negs	r2, r3
    377c:	4153      	adcs	r3, r2
    377e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    3780:	b672      	cpsid	i
    3782:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3786:	2200      	movs	r2, #0
    3788:	4b5d      	ldr	r3, [pc, #372]	; (3900 <udd_ep_run+0x1b8>)
    378a:	701a      	strb	r2, [r3, #0]
	return flags;
    378c:	9a05      	ldr	r2, [sp, #20]
	if (ptr_job->busy == true) {
    378e:	7c83      	ldrb	r3, [r0, #18]
    3790:	07db      	lsls	r3, r3, #31
    3792:	d508      	bpl.n	37a6 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    3794:	2a00      	cmp	r2, #0
    3796:	d0e2      	beq.n	375e <udd_ep_run+0x16>
		cpu_irq_enable();
    3798:	2201      	movs	r2, #1
    379a:	4b59      	ldr	r3, [pc, #356]	; (3900 <udd_ep_run+0x1b8>)
    379c:	701a      	strb	r2, [r3, #0]
    379e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    37a2:	b662      	cpsie	i
    37a4:	e7db      	b.n	375e <udd_ep_run+0x16>
	ptr_job->busy = true;
    37a6:	7c83      	ldrb	r3, [r0, #18]
    37a8:	2101      	movs	r1, #1
    37aa:	430b      	orrs	r3, r1
    37ac:	7483      	strb	r3, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    37ae:	2a00      	cmp	r2, #0
    37b0:	d005      	beq.n	37be <udd_ep_run+0x76>
		cpu_irq_enable();
    37b2:	2201      	movs	r2, #1
    37b4:	4b52      	ldr	r3, [pc, #328]	; (3900 <udd_ep_run+0x1b8>)
    37b6:	701a      	strb	r2, [r3, #0]
    37b8:	f3bf 8f5f 	dmb	sy
    37bc:	b662      	cpsie	i
	ptr_job->buf = buf;
    37be:	9b02      	ldr	r3, [sp, #8]
    37c0:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    37c2:	9b01      	ldr	r3, [sp, #4]
    37c4:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    37c6:	2300      	movs	r3, #0
    37c8:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    37ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    37cc:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    37ce:	2301      	movs	r3, #1
    37d0:	9a03      	ldr	r2, [sp, #12]
    37d2:	4013      	ands	r3, r2
    37d4:	005a      	lsls	r2, r3, #1
    37d6:	7cbb      	ldrb	r3, [r7, #18]
    37d8:	2102      	movs	r1, #2
    37da:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    37dc:	4313      	orrs	r3, r2
    37de:	2204      	movs	r2, #4
    37e0:	4393      	bics	r3, r2
    37e2:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    37e4:	b26b      	sxtb	r3, r5
    37e6:	2b00      	cmp	r3, #0
    37e8:	db20      	blt.n	382c <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    37ea:	9b01      	ldr	r3, [sp, #4]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d06f      	beq.n	38d0 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    37f0:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    37f2:	4b44      	ldr	r3, [pc, #272]	; (3904 <udd_ep_run+0x1bc>)
    37f4:	429c      	cmp	r4, r3
    37f6:	d95a      	bls.n	38ae <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    37f8:	8a39      	ldrh	r1, [r7, #16]
    37fa:	001c      	movs	r4, r3
    37fc:	0018      	movs	r0, r3
    37fe:	4b42      	ldr	r3, [pc, #264]	; (3908 <udd_ep_run+0x1c0>)
    3800:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3802:	1a63      	subs	r3, r4, r1
    3804:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    3806:	8a3b      	ldrh	r3, [r7, #16]
    3808:	429a      	cmp	r2, r3
    380a:	d257      	bcs.n	38bc <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    380c:	7cba      	ldrb	r2, [r7, #18]
    380e:	2104      	movs	r1, #4
    3810:	430a      	orrs	r2, r1
    3812:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    3814:	1e72      	subs	r2, r6, #1
    3816:	0192      	lsls	r2, r2, #6
    3818:	493c      	ldr	r1, [pc, #240]	; (390c <udd_ep_run+0x1c4>)
    381a:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    381c:	0031      	movs	r1, r6
    381e:	483c      	ldr	r0, [pc, #240]	; (3910 <udd_ep_run+0x1c8>)
    3820:	4c3c      	ldr	r4, [pc, #240]	; (3914 <udd_ep_run+0x1cc>)
    3822:	47a0      	blx	r4
				return (STATUS_OK ==
    3824:	4244      	negs	r4, r0
    3826:	4144      	adcs	r4, r0
    3828:	b2e4      	uxtb	r4, r4
    382a:	e798      	b.n	375e <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    382c:	9b01      	ldr	r3, [sp, #4]
    382e:	2b00      	cmp	r3, #0
    3830:	d027      	beq.n	3882 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    3832:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3834:	4b33      	ldr	r3, [pc, #204]	; (3904 <udd_ep_run+0x1bc>)
    3836:	429d      	cmp	r5, r3
    3838:	d906      	bls.n	3848 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    383a:	8a39      	ldrh	r1, [r7, #16]
    383c:	001d      	movs	r5, r3
    383e:	0018      	movs	r0, r3
    3840:	4b31      	ldr	r3, [pc, #196]	; (3908 <udd_ep_run+0x1c0>)
    3842:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    3844:	1a6b      	subs	r3, r5, r1
    3846:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3848:	7cbb      	ldrb	r3, [r7, #18]
    384a:	079b      	lsls	r3, r3, #30
    384c:	d507      	bpl.n	385e <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    384e:	8a39      	ldrh	r1, [r7, #16]
    3850:	0028      	movs	r0, r5
    3852:	4b31      	ldr	r3, [pc, #196]	; (3918 <udd_ep_run+0x1d0>)
    3854:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    3856:	b289      	uxth	r1, r1
    3858:	424c      	negs	r4, r1
    385a:	414c      	adcs	r4, r1
    385c:	b2e4      	uxtb	r4, r4
    385e:	2001      	movs	r0, #1
    3860:	4020      	ands	r0, r4
    3862:	0040      	lsls	r0, r0, #1
    3864:	7cbc      	ldrb	r4, [r7, #18]
    3866:	2302      	movs	r3, #2
    3868:	439c      	bics	r4, r3
    386a:	4304      	orrs	r4, r0
    386c:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    386e:	002b      	movs	r3, r5
    3870:	9a02      	ldr	r2, [sp, #8]
    3872:	0031      	movs	r1, r6
    3874:	4826      	ldr	r0, [pc, #152]	; (3910 <udd_ep_run+0x1c8>)
    3876:	4c29      	ldr	r4, [pc, #164]	; (391c <udd_ep_run+0x1d4>)
    3878:	47a0      	blx	r4
		return (STATUS_OK ==
    387a:	4244      	negs	r4, r0
    387c:	4144      	adcs	r4, r0
    387e:	b2e4      	uxtb	r4, r4
    3880:	e76d      	b.n	375e <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    3882:	7cbb      	ldrb	r3, [r7, #18]
    3884:	079b      	lsls	r3, r3, #30
    3886:	d505      	bpl.n	3894 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    3888:	7cbb      	ldrb	r3, [r7, #18]
    388a:	2202      	movs	r2, #2
    388c:	4393      	bics	r3, r2
    388e:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    3890:	2500      	movs	r5, #0
    3892:	e7ec      	b.n	386e <udd_ep_run+0x126>
			ptr_job->busy = false;
    3894:	7cbb      	ldrb	r3, [r7, #18]
    3896:	2201      	movs	r2, #1
    3898:	4393      	bics	r3, r2
    389a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    389c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    389e:	2b00      	cmp	r3, #0
    38a0:	d025      	beq.n	38ee <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    38a2:	002a      	movs	r2, r5
    38a4:	2100      	movs	r1, #0
    38a6:	2000      	movs	r0, #0
    38a8:	4798      	blx	r3
			return true;
    38aa:	2401      	movs	r4, #1
    38ac:	e757      	b.n	375e <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    38ae:	8a39      	ldrh	r1, [r7, #16]
    38b0:	0020      	movs	r0, r4
    38b2:	4b19      	ldr	r3, [pc, #100]	; (3918 <udd_ep_run+0x1d0>)
    38b4:	4798      	blx	r3
    38b6:	1a63      	subs	r3, r4, r1
    38b8:	b29a      	uxth	r2, r3
    38ba:	e7a4      	b.n	3806 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    38bc:	0013      	movs	r3, r2
    38be:	9a02      	ldr	r2, [sp, #8]
    38c0:	0031      	movs	r1, r6
    38c2:	4813      	ldr	r0, [pc, #76]	; (3910 <udd_ep_run+0x1c8>)
    38c4:	4c13      	ldr	r4, [pc, #76]	; (3914 <udd_ep_run+0x1cc>)
    38c6:	47a0      	blx	r4
				return (STATUS_OK ==
    38c8:	4244      	negs	r4, r0
    38ca:	4144      	adcs	r4, r0
    38cc:	b2e4      	uxtb	r4, r4
    38ce:	e746      	b.n	375e <udd_ep_run+0x16>
			ptr_job->busy = false;
    38d0:	7cbb      	ldrb	r3, [r7, #18]
    38d2:	2201      	movs	r2, #1
    38d4:	4393      	bics	r3, r2
    38d6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    38d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38da:	2b00      	cmp	r3, #0
    38dc:	d009      	beq.n	38f2 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    38de:	002a      	movs	r2, r5
    38e0:	2100      	movs	r1, #0
    38e2:	2000      	movs	r0, #0
    38e4:	4798      	blx	r3
			return true;
    38e6:	2401      	movs	r4, #1
    38e8:	e739      	b.n	375e <udd_ep_run+0x16>
		return false;
    38ea:	2400      	movs	r4, #0
    38ec:	e737      	b.n	375e <udd_ep_run+0x16>
			return true;
    38ee:	2401      	movs	r4, #1
    38f0:	e735      	b.n	375e <udd_ep_run+0x16>
			return true;
    38f2:	2401      	movs	r4, #1
    38f4:	e733      	b.n	375e <udd_ep_run+0x16>
    38f6:	46c0      	nop			; (mov r8, r8)
    38f8:	00003569 	.word	0x00003569
    38fc:	00002e01 	.word	0x00002e01
    3900:	20000125 	.word	0x20000125
    3904:	00001fff 	.word	0x00001fff
    3908:	00008e65 	.word	0x00008e65
    390c:	200003a0 	.word	0x200003a0
    3910:	20000420 	.word	0x20000420
    3914:	00006845 	.word	0x00006845
    3918:	00008c91 	.word	0x00008c91
    391c:	000067f1 	.word	0x000067f1

00003920 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3920:	4b02      	ldr	r3, [pc, #8]	; (392c <udd_set_address+0xc>)
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	2280      	movs	r2, #128	; 0x80
    3926:	4310      	orrs	r0, r2
    3928:	7298      	strb	r0, [r3, #10]
}
    392a:	4770      	bx	lr
    392c:	20000420 	.word	0x20000420

00003930 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    3930:	4b02      	ldr	r3, [pc, #8]	; (393c <udd_getaddress+0xc>)
    3932:	681b      	ldr	r3, [r3, #0]
    3934:	7a98      	ldrb	r0, [r3, #10]
    3936:	0640      	lsls	r0, r0, #25
    3938:	0e40      	lsrs	r0, r0, #25
}
    393a:	4770      	bx	lr
    393c:	20000420 	.word	0x20000420

00003940 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    3940:	4b01      	ldr	r3, [pc, #4]	; (3948 <udd_set_setup_payload+0x8>)
    3942:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    3944:	8199      	strh	r1, [r3, #12]
}
    3946:	4770      	bx	lr
    3948:	20000588 	.word	0x20000588

0000394c <udd_detach>:

void udd_detach(void)
{
    394c:	b510      	push	{r4, lr}
	module_inst->hw->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    394e:	4b05      	ldr	r3, [pc, #20]	; (3964 <udd_detach+0x18>)
    3950:	681a      	ldr	r2, [r3, #0]
    3952:	8913      	ldrh	r3, [r2, #8]
    3954:	2101      	movs	r1, #1
    3956:	430b      	orrs	r3, r1
    3958:	8113      	strh	r3, [r2, #8]
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
    395a:	2001      	movs	r0, #1
    395c:	4b02      	ldr	r3, [pc, #8]	; (3968 <udd_detach+0x1c>)
    395e:	4798      	blx	r3
}
    3960:	bd10      	pop	{r4, pc}
    3962:	46c0      	nop			; (mov r8, r8)
    3964:	20000420 	.word	0x20000420
    3968:	00002d41 	.word	0x00002d41

0000396c <udd_attach>:

void udd_attach(void)
{
    396c:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    396e:	2003      	movs	r0, #3
    3970:	4b16      	ldr	r3, [pc, #88]	; (39cc <udd_attach+0x60>)
    3972:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    3974:	4c16      	ldr	r4, [pc, #88]	; (39d0 <udd_attach+0x64>)
    3976:	6822      	ldr	r2, [r4, #0]
    3978:	8913      	ldrh	r3, [r2, #8]
    397a:	2101      	movs	r1, #1
    397c:	438b      	bics	r3, r1
    397e:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3980:	4a14      	ldr	r2, [pc, #80]	; (39d4 <udd_attach+0x68>)
    3982:	3103      	adds	r1, #3
    3984:	0020      	movs	r0, r4
    3986:	4e14      	ldr	r6, [pc, #80]	; (39d8 <udd_attach+0x6c>)
    3988:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    398a:	4a14      	ldr	r2, [pc, #80]	; (39dc <udd_attach+0x70>)
    398c:	2100      	movs	r1, #0
    398e:	0020      	movs	r0, r4
    3990:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    3992:	4a13      	ldr	r2, [pc, #76]	; (39e0 <udd_attach+0x74>)
    3994:	2101      	movs	r1, #1
    3996:	0020      	movs	r0, r4
    3998:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    399a:	4a12      	ldr	r2, [pc, #72]	; (39e4 <udd_attach+0x78>)
    399c:	2102      	movs	r1, #2
    399e:	0020      	movs	r0, r4
    39a0:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    39a2:	2104      	movs	r1, #4
    39a4:	0020      	movs	r0, r4
    39a6:	4d10      	ldr	r5, [pc, #64]	; (39e8 <udd_attach+0x7c>)
    39a8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    39aa:	2100      	movs	r1, #0
    39ac:	0020      	movs	r0, r4
    39ae:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    39b0:	2101      	movs	r1, #1
    39b2:	0020      	movs	r0, r4
    39b4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    39b6:	2102      	movs	r1, #2
    39b8:	0020      	movs	r0, r4
    39ba:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    39bc:	4a0b      	ldr	r2, [pc, #44]	; (39ec <udd_attach+0x80>)
    39be:	2106      	movs	r1, #6
    39c0:	0020      	movs	r0, r4
    39c2:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    39c4:	2106      	movs	r1, #6
    39c6:	0020      	movs	r0, r4
    39c8:	47a8      	blx	r5
#endif
}
    39ca:	bd70      	pop	{r4, r5, r6, pc}
    39cc:	00002d41 	.word	0x00002d41
    39d0:	20000420 	.word	0x20000420
    39d4:	00003389 	.word	0x00003389
    39d8:	00006215 	.word	0x00006215
    39dc:	00003375 	.word	0x00003375
    39e0:	000030a9 	.word	0x000030a9
    39e4:	00003039 	.word	0x00003039
    39e8:	00006239 	.word	0x00006239
    39ec:	00003005 	.word	0x00003005

000039f0 <_uhd_vbus_handler>:
/**
 * \internal
 * \brief USB VBUS pin change handler
 */
static void _uhd_vbus_handler(void)
{
    39f0:	b510      	push	{r4, lr}
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    39f2:	2100      	movs	r1, #0
    39f4:	200e      	movs	r0, #14
    39f6:	4b08      	ldr	r3, [pc, #32]	; (3a18 <_uhd_vbus_handler+0x28>)
    39f8:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    39fa:	4b08      	ldr	r3, [pc, #32]	; (3a1c <_uhd_vbus_handler+0x2c>)
    39fc:	6a1b      	ldr	r3, [r3, #32]
			EXTINT_CALLBACK_TYPE_DETECT);
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	if (is_usb_vbus_high()) {
    39fe:	045b      	lsls	r3, r3, #17
    3a00:	d406      	bmi.n	3a10 <_uhd_vbus_handler+0x20>
		udd_attach();
	} else {
		udd_detach();
    3a02:	4b07      	ldr	r3, [pc, #28]	; (3a20 <_uhd_vbus_handler+0x30>)
    3a04:	4798      	blx	r3
	}
# endif
# ifdef UDC_VBUS_EVENT
	UDC_VBUS_EVENT(is_usb_vbus_high());
# endif
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3a06:	2100      	movs	r1, #0
    3a08:	200e      	movs	r0, #14
    3a0a:	4b06      	ldr	r3, [pc, #24]	; (3a24 <_uhd_vbus_handler+0x34>)
    3a0c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    3a0e:	bd10      	pop	{r4, pc}
		udd_attach();
    3a10:	4b05      	ldr	r3, [pc, #20]	; (3a28 <_uhd_vbus_handler+0x38>)
    3a12:	4798      	blx	r3
    3a14:	e7f7      	b.n	3a06 <_uhd_vbus_handler+0x16>
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	000070fd 	.word	0x000070fd
    3a1c:	41004400 	.word	0x41004400
    3a20:	0000394d 	.word	0x0000394d
    3a24:	000070dd 	.word	0x000070dd
    3a28:	0000396d 	.word	0x0000396d

00003a2c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    3a2c:	b570      	push	{r4, r5, r6, lr}
    3a2e:	b086      	sub	sp, #24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3a30:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3a34:	425a      	negs	r2, r3
    3a36:	4153      	adcs	r3, r2
    3a38:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3a3a:	b672      	cpsid	i
    3a3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a40:	2600      	movs	r6, #0
    3a42:	4b29      	ldr	r3, [pc, #164]	; (3ae8 <udd_enable+0xbc>)
    3a44:	701e      	strb	r6, [r3, #0]
	return flags;
    3a46:	9d01      	ldr	r5, [sp, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    3a48:	ac05      	add	r4, sp, #20
    3a4a:	0020      	movs	r0, r4
    3a4c:	4b27      	ldr	r3, [pc, #156]	; (3aec <udd_enable+0xc0>)
    3a4e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    3a50:	70a6      	strb	r6, [r4, #2]
	usb_init(&usb_device, USB, &config_usb);
    3a52:	4e27      	ldr	r6, [pc, #156]	; (3af0 <udd_enable+0xc4>)
    3a54:	0022      	movs	r2, r4
    3a56:	4927      	ldr	r1, [pc, #156]	; (3af4 <udd_enable+0xc8>)
    3a58:	0030      	movs	r0, r6
    3a5a:	4b27      	ldr	r3, [pc, #156]	; (3af8 <udd_enable+0xcc>)
    3a5c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3a5e:	0030      	movs	r0, r6
    3a60:	4b26      	ldr	r3, [pc, #152]	; (3afc <udd_enable+0xd0>)
    3a62:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3a64:	4b26      	ldr	r3, [pc, #152]	; (3b00 <udd_enable+0xd4>)
    3a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3a68:	069b      	lsls	r3, r3, #26
    3a6a:	d434      	bmi.n	3ad6 <udd_enable+0xaa>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3a6c:	4924      	ldr	r1, [pc, #144]	; (3b00 <udd_enable+0xd4>)
    3a6e:	22d0      	movs	r2, #208	; 0xd0
    3a70:	68cb      	ldr	r3, [r1, #12]
    3a72:	4013      	ands	r3, r2
    3a74:	2bd0      	cmp	r3, #208	; 0xd0
    3a76:	d1fb      	bne.n	3a70 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3a78:	2001      	movs	r0, #1
    3a7a:	4b22      	ldr	r3, [pc, #136]	; (3b04 <udd_enable+0xd8>)
    3a7c:	4798      	blx	r3
	extint_chan_get_config_defaults(&eint_chan_conf);
    3a7e:	ac02      	add	r4, sp, #8
    3a80:	0020      	movs	r0, r4
    3a82:	4b21      	ldr	r3, [pc, #132]	; (3b08 <udd_enable+0xdc>)
    3a84:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = USB_VBUS_PIN;
    3a86:	230e      	movs	r3, #14
    3a88:	9302      	str	r3, [sp, #8]
	eint_chan_conf.gpio_pin_mux       = USB_VBUS_EIC_MUX;
    3a8a:	2300      	movs	r3, #0
    3a8c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_NONE;
    3a8e:	7223      	strb	r3, [r4, #8]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_BOTH;
    3a90:	3303      	adds	r3, #3
    3a92:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3a94:	3b02      	subs	r3, #2
    3a96:	72a3      	strb	r3, [r4, #10]
	extint_chan_disable_callback(USB_VBUS_EIC_LINE,
    3a98:	2100      	movs	r1, #0
    3a9a:	200e      	movs	r0, #14
    3a9c:	4b1b      	ldr	r3, [pc, #108]	; (3b0c <udd_enable+0xe0>)
    3a9e:	4798      	blx	r3
	extint_chan_set_config(USB_VBUS_EIC_LINE, &eint_chan_conf);
    3aa0:	0021      	movs	r1, r4
    3aa2:	200e      	movs	r0, #14
    3aa4:	4b1a      	ldr	r3, [pc, #104]	; (3b10 <udd_enable+0xe4>)
    3aa6:	4798      	blx	r3
	extint_register_callback(_uhd_vbus_handler,
    3aa8:	2200      	movs	r2, #0
    3aaa:	210e      	movs	r1, #14
    3aac:	4819      	ldr	r0, [pc, #100]	; (3b14 <udd_enable+0xe8>)
    3aae:	4b1a      	ldr	r3, [pc, #104]	; (3b18 <udd_enable+0xec>)
    3ab0:	4798      	blx	r3
	extint_chan_enable_callback(USB_VBUS_EIC_LINE,
    3ab2:	2100      	movs	r1, #0
    3ab4:	200e      	movs	r0, #14
    3ab6:	4b19      	ldr	r3, [pc, #100]	; (3b1c <udd_enable+0xf0>)
    3ab8:	4798      	blx	r3
    3aba:	4b19      	ldr	r3, [pc, #100]	; (3b20 <udd_enable+0xf4>)
    3abc:	6a1b      	ldr	r3, [r3, #32]

#if USB_VBUS_EIC
	_usb_vbus_config();
	if (is_usb_vbus_high()) {
    3abe:	045b      	lsls	r3, r3, #17
    3ac0:	d40f      	bmi.n	3ae2 <udd_enable+0xb6>
	if (cpu_irq_is_enabled_flags(flags))
    3ac2:	2d00      	cmp	r5, #0
    3ac4:	d005      	beq.n	3ad2 <udd_enable+0xa6>
		cpu_irq_enable();
    3ac6:	2201      	movs	r2, #1
    3ac8:	4b07      	ldr	r3, [pc, #28]	; (3ae8 <udd_enable+0xbc>)
    3aca:	701a      	strb	r2, [r3, #0]
    3acc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ad0:	b662      	cpsie	i
	udd_attach();
# endif
#endif

	cpu_irq_restore(flags);
}
    3ad2:	b006      	add	sp, #24
    3ad4:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3ad6:	490a      	ldr	r1, [pc, #40]	; (3b00 <udd_enable+0xd4>)
    3ad8:	2210      	movs	r2, #16
    3ada:	68cb      	ldr	r3, [r1, #12]
    3adc:	421a      	tst	r2, r3
    3ade:	d0fc      	beq.n	3ada <udd_enable+0xae>
    3ae0:	e7ca      	b.n	3a78 <udd_enable+0x4c>
		_uhd_vbus_handler();
    3ae2:	4b0c      	ldr	r3, [pc, #48]	; (3b14 <udd_enable+0xe8>)
    3ae4:	4798      	blx	r3
    3ae6:	e7ec      	b.n	3ac2 <udd_enable+0x96>
    3ae8:	20000125 	.word	0x20000125
    3aec:	00006ea1 	.word	0x00006ea1
    3af0:	20000420 	.word	0x20000420
    3af4:	41005000 	.word	0x41005000
    3af8:	00006eb1 	.word	0x00006eb1
    3afc:	000068c5 	.word	0x000068c5
    3b00:	40000800 	.word	0x40000800
    3b04:	00002d41 	.word	0x00002d41
    3b08:	00001f49 	.word	0x00001f49
    3b0c:	000070fd 	.word	0x000070fd
    3b10:	00001f5d 	.word	0x00001f5d
    3b14:	000039f1 	.word	0x000039f1
    3b18:	000070b1 	.word	0x000070b1
    3b1c:	000070dd 	.word	0x000070dd
    3b20:	41004400 	.word	0x41004400

00003b24 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b26:	46c6      	mov	lr, r8
    3b28:	b500      	push	{lr}
    3b2a:	000c      	movs	r4, r1
    3b2c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3b2e:	2800      	cmp	r0, #0
    3b30:	d10f      	bne.n	3b52 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3b32:	2a00      	cmp	r2, #0
    3b34:	dd11      	ble.n	3b5a <_read+0x36>
    3b36:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3b38:	4e09      	ldr	r6, [pc, #36]	; (3b60 <_read+0x3c>)
    3b3a:	4d0a      	ldr	r5, [pc, #40]	; (3b64 <_read+0x40>)
    3b3c:	6830      	ldr	r0, [r6, #0]
    3b3e:	0021      	movs	r1, r4
    3b40:	682b      	ldr	r3, [r5, #0]
    3b42:	4798      	blx	r3
		ptr++;
    3b44:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3b46:	42bc      	cmp	r4, r7
    3b48:	d1f8      	bne.n	3b3c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3b4a:	4640      	mov	r0, r8
    3b4c:	bc04      	pop	{r2}
    3b4e:	4690      	mov	r8, r2
    3b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3b52:	2301      	movs	r3, #1
    3b54:	425b      	negs	r3, r3
    3b56:	4698      	mov	r8, r3
    3b58:	e7f7      	b.n	3b4a <_read+0x26>
	for (; len > 0; --len) {
    3b5a:	4680      	mov	r8, r0
    3b5c:	e7f5      	b.n	3b4a <_read+0x26>
    3b5e:	46c0      	nop			; (mov r8, r8)
    3b60:	200005e8 	.word	0x200005e8
    3b64:	200005e0 	.word	0x200005e0

00003b68 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b6a:	46c6      	mov	lr, r8
    3b6c:	b500      	push	{lr}
    3b6e:	000e      	movs	r6, r1
    3b70:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3b72:	3801      	subs	r0, #1
    3b74:	2802      	cmp	r0, #2
    3b76:	d810      	bhi.n	3b9a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3b78:	2a00      	cmp	r2, #0
    3b7a:	d011      	beq.n	3ba0 <_write+0x38>
    3b7c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3b7e:	4b0c      	ldr	r3, [pc, #48]	; (3bb0 <_write+0x48>)
    3b80:	4698      	mov	r8, r3
    3b82:	4f0c      	ldr	r7, [pc, #48]	; (3bb4 <_write+0x4c>)
    3b84:	4643      	mov	r3, r8
    3b86:	6818      	ldr	r0, [r3, #0]
    3b88:	5d31      	ldrb	r1, [r6, r4]
    3b8a:	683b      	ldr	r3, [r7, #0]
    3b8c:	4798      	blx	r3
    3b8e:	2800      	cmp	r0, #0
    3b90:	db08      	blt.n	3ba4 <_write+0x3c>
			return -1;
		}
		++nChars;
    3b92:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3b94:	42a5      	cmp	r5, r4
    3b96:	d1f5      	bne.n	3b84 <_write+0x1c>
    3b98:	e006      	b.n	3ba8 <_write+0x40>
		return -1;
    3b9a:	2401      	movs	r4, #1
    3b9c:	4264      	negs	r4, r4
    3b9e:	e003      	b.n	3ba8 <_write+0x40>
	for (; len != 0; --len) {
    3ba0:	0014      	movs	r4, r2
    3ba2:	e001      	b.n	3ba8 <_write+0x40>
			return -1;
    3ba4:	2401      	movs	r4, #1
    3ba6:	4264      	negs	r4, r4
	}
	return nChars;
}
    3ba8:	0020      	movs	r0, r4
    3baa:	bc04      	pop	{r2}
    3bac:	4690      	mov	r8, r2
    3bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bb0:	200005e8 	.word	0x200005e8
    3bb4:	200005e4 	.word	0x200005e4

00003bb8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3bb8:	b530      	push	{r4, r5, lr}
    3bba:	b087      	sub	sp, #28
    3bbc:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3bbe:	aa01      	add	r2, sp, #4
    3bc0:	23a0      	movs	r3, #160	; 0xa0
    3bc2:	011b      	lsls	r3, r3, #4
    3bc4:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3bc6:	2300      	movs	r3, #0
    3bc8:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3bca:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3bcc:	21fa      	movs	r1, #250	; 0xfa
    3bce:	00c9      	lsls	r1, r1, #3
    3bd0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    3bd2:	2101      	movs	r1, #1
    3bd4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3bd6:	2004      	movs	r0, #4
    3bd8:	7210      	strb	r0, [r2, #8]
    3bda:	7253      	strb	r3, [r2, #9]
    3bdc:	7293      	strb	r3, [r2, #10]
    3bde:	72d3      	strb	r3, [r2, #11]
    3be0:	7311      	strb	r1, [r2, #12]
    3be2:	7351      	strb	r1, [r2, #13]
    3be4:	4b14      	ldr	r3, [pc, #80]	; (3c38 <disk_initialize+0x80>)
    3be6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3be8:	2306      	movs	r3, #6
    3bea:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3bec:	4d13      	ldr	r5, [pc, #76]	; (3c3c <disk_initialize+0x84>)
    3bee:	4914      	ldr	r1, [pc, #80]	; (3c40 <disk_initialize+0x88>)
    3bf0:	0028      	movs	r0, r5
    3bf2:	4b14      	ldr	r3, [pc, #80]	; (3c44 <disk_initialize+0x8c>)
    3bf4:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3bf6:	0028      	movs	r0, r5
    3bf8:	4b13      	ldr	r3, [pc, #76]	; (3c48 <disk_initialize+0x90>)
    3bfa:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3bfc:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    3bfe:	2c01      	cmp	r4, #1
    3c00:	d901      	bls.n	3c06 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    3c02:	b007      	add	sp, #28
    3c04:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    3c06:	0020      	movs	r0, r4
    3c08:	4b10      	ldr	r3, [pc, #64]	; (3c4c <disk_initialize+0x94>)
    3c0a:	4798      	blx	r3
    3c0c:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    3c0e:	2803      	cmp	r0, #3
    3c10:	d106      	bne.n	3c20 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    3c12:	0020      	movs	r0, r4
    3c14:	4b0d      	ldr	r3, [pc, #52]	; (3c4c <disk_initialize+0x94>)
    3c16:	4798      	blx	r3
    3c18:	0003      	movs	r3, r0
		return STA_NOINIT;
    3c1a:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3c1c:	2b03      	cmp	r3, #3
    3c1e:	d0f0      	beq.n	3c02 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    3c20:	2b00      	cmp	r3, #0
    3c22:	d106      	bne.n	3c32 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3c24:	0020      	movs	r0, r4
    3c26:	4b0a      	ldr	r3, [pc, #40]	; (3c50 <disk_initialize+0x98>)
    3c28:	4798      	blx	r3
	return 0;
    3c2a:	1e43      	subs	r3, r0, #1
    3c2c:	4198      	sbcs	r0, r3
    3c2e:	0080      	lsls	r0, r0, #2
    3c30:	e7e7      	b.n	3c02 <disk_initialize+0x4a>
		return STA_NOINIT;
    3c32:	2001      	movs	r0, #1
    3c34:	e7e5      	b.n	3c02 <disk_initialize+0x4a>
    3c36:	46c0      	nop			; (mov r8, r8)
    3c38:	000007de 	.word	0x000007de
    3c3c:	200005ec 	.word	0x200005ec
    3c40:	40001400 	.word	0x40001400
    3c44:	00002131 	.word	0x00002131
    3c48:	00001fd5 	.word	0x00001fd5
    3c4c:	00008511 	.word	0x00008511
    3c50:	0000855d 	.word	0x0000855d

00003c54 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    3c54:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    3c56:	4b05      	ldr	r3, [pc, #20]	; (3c6c <disk_status+0x18>)
    3c58:	4798      	blx	r3
    3c5a:	1e03      	subs	r3, r0, #0
    3c5c:	d004      	beq.n	3c68 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    3c5e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    3c60:	2b02      	cmp	r3, #2
    3c62:	d000      	beq.n	3c66 <disk_status+0x12>
	default:
		return STA_NOINIT;
    3c64:	3802      	subs	r0, #2
	}
}
    3c66:	bd10      	pop	{r4, pc}
		return 0;
    3c68:	2000      	movs	r0, #0
    3c6a:	e7fc      	b.n	3c66 <disk_status+0x12>
    3c6c:	00008511 	.word	0x00008511

00003c70 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    3c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c72:	46de      	mov	lr, fp
    3c74:	464f      	mov	r7, r9
    3c76:	4646      	mov	r6, r8
    3c78:	b5c0      	push	{r6, r7, lr}
    3c7a:	b084      	sub	sp, #16
    3c7c:	9001      	str	r0, [sp, #4]
    3c7e:	000d      	movs	r5, r1
    3c80:	0014      	movs	r4, r2
    3c82:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3c84:	4b18      	ldr	r3, [pc, #96]	; (3ce8 <disk_read+0x78>)
    3c86:	4798      	blx	r3
    3c88:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3c8a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3c8c:	2e00      	cmp	r6, #0
    3c8e:	d105      	bne.n	3c9c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3c90:	b004      	add	sp, #16
    3c92:	bc1c      	pop	{r2, r3, r4}
    3c94:	4690      	mov	r8, r2
    3c96:	4699      	mov	r9, r3
    3c98:	46a3      	mov	fp, r4
    3c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3c9c:	a903      	add	r1, sp, #12
    3c9e:	9801      	ldr	r0, [sp, #4]
    3ca0:	4b12      	ldr	r3, [pc, #72]	; (3cec <disk_read+0x7c>)
    3ca2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3ca4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3ca6:	0032      	movs	r2, r6
    3ca8:	437a      	muls	r2, r7
    3caa:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3cac:	9b03      	ldr	r3, [sp, #12]
    3cae:	3301      	adds	r3, #1
    3cb0:	4373      	muls	r3, r6
		return RES_PARERR;
    3cb2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3cb4:	429a      	cmp	r2, r3
    3cb6:	d8eb      	bhi.n	3c90 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3cb8:	2f00      	cmp	r7, #0
    3cba:	d011      	beq.n	3ce0 <disk_read+0x70>
    3cbc:	0273      	lsls	r3, r6, #9
    3cbe:	4698      	mov	r8, r3
    3cc0:	1c7b      	adds	r3, r7, #1
    3cc2:	469b      	mov	fp, r3
    3cc4:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3cc6:	4e0a      	ldr	r6, [pc, #40]	; (3cf0 <disk_read+0x80>)
    3cc8:	002a      	movs	r2, r5
    3cca:	0021      	movs	r1, r4
    3ccc:	9801      	ldr	r0, [sp, #4]
    3cce:	47b0      	blx	r6
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d107      	bne.n	3ce4 <disk_read+0x74>
    3cd4:	3701      	adds	r7, #1
    3cd6:	444c      	add	r4, r9
    3cd8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3cda:	455f      	cmp	r7, fp
    3cdc:	d1f4      	bne.n	3cc8 <disk_read+0x58>
    3cde:	e7d7      	b.n	3c90 <disk_read+0x20>
	return RES_OK;
    3ce0:	2000      	movs	r0, #0
    3ce2:	e7d5      	b.n	3c90 <disk_read+0x20>
			return RES_ERROR;
    3ce4:	2001      	movs	r0, #1
    3ce6:	e7d3      	b.n	3c90 <disk_read+0x20>
    3ce8:	00008545 	.word	0x00008545
    3cec:	00008529 	.word	0x00008529
    3cf0:	0000859d 	.word	0x0000859d

00003cf4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cf6:	46de      	mov	lr, fp
    3cf8:	464f      	mov	r7, r9
    3cfa:	4646      	mov	r6, r8
    3cfc:	b5c0      	push	{r6, r7, lr}
    3cfe:	b084      	sub	sp, #16
    3d00:	9001      	str	r0, [sp, #4]
    3d02:	000d      	movs	r5, r1
    3d04:	0014      	movs	r4, r2
    3d06:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3d08:	4b18      	ldr	r3, [pc, #96]	; (3d6c <disk_write+0x78>)
    3d0a:	4798      	blx	r3
    3d0c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    3d0e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    3d10:	2e00      	cmp	r6, #0
    3d12:	d105      	bne.n	3d20 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3d14:	b004      	add	sp, #16
    3d16:	bc1c      	pop	{r2, r3, r4}
    3d18:	4690      	mov	r8, r2
    3d1a:	4699      	mov	r9, r3
    3d1c:	46a3      	mov	fp, r4
    3d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3d20:	a903      	add	r1, sp, #12
    3d22:	9801      	ldr	r0, [sp, #4]
    3d24:	4b12      	ldr	r3, [pc, #72]	; (3d70 <disk_write+0x7c>)
    3d26:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d28:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3d2a:	0032      	movs	r2, r6
    3d2c:	437a      	muls	r2, r7
    3d2e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3d30:	9b03      	ldr	r3, [sp, #12]
    3d32:	3301      	adds	r3, #1
    3d34:	4373      	muls	r3, r6
		return RES_PARERR;
    3d36:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3d38:	429a      	cmp	r2, r3
    3d3a:	d8eb      	bhi.n	3d14 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    3d3c:	2f00      	cmp	r7, #0
    3d3e:	d011      	beq.n	3d64 <disk_write+0x70>
    3d40:	0273      	lsls	r3, r6, #9
    3d42:	4698      	mov	r8, r3
    3d44:	1c7b      	adds	r3, r7, #1
    3d46:	469b      	mov	fp, r3
    3d48:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    3d4a:	4e0a      	ldr	r6, [pc, #40]	; (3d74 <disk_write+0x80>)
    3d4c:	002a      	movs	r2, r5
    3d4e:	0021      	movs	r1, r4
    3d50:	9801      	ldr	r0, [sp, #4]
    3d52:	47b0      	blx	r6
    3d54:	2800      	cmp	r0, #0
    3d56:	d107      	bne.n	3d68 <disk_write+0x74>
    3d58:	3701      	adds	r7, #1
    3d5a:	444c      	add	r4, r9
    3d5c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3d5e:	455f      	cmp	r7, fp
    3d60:	d1f4      	bne.n	3d4c <disk_write+0x58>
    3d62:	e7d7      	b.n	3d14 <disk_write+0x20>
	return RES_OK;
    3d64:	2000      	movs	r0, #0
    3d66:	e7d5      	b.n	3d14 <disk_write+0x20>
			return RES_ERROR;
    3d68:	2001      	movs	r0, #1
    3d6a:	e7d3      	b.n	3d14 <disk_write+0x20>
    3d6c:	00008545 	.word	0x00008545
    3d70:	00008529 	.word	0x00008529
    3d74:	000085d1 	.word	0x000085d1

00003d78 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    3d78:	b510      	push	{r4, lr}
    3d7a:	b082      	sub	sp, #8
    3d7c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    3d7e:	2901      	cmp	r1, #1
    3d80:	d00b      	beq.n	3d9a <disk_ioctl+0x22>
    3d82:	2900      	cmp	r1, #0
    3d84:	d020      	beq.n	3dc8 <disk_ioctl+0x50>
    3d86:	2902      	cmp	r1, #2
    3d88:	d00f      	beq.n	3daa <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    3d8a:	2004      	movs	r0, #4
	switch (ctrl) {
    3d8c:	2903      	cmp	r1, #3
    3d8e:	d102      	bne.n	3d96 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    3d90:	2301      	movs	r3, #1
    3d92:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3d94:	2000      	movs	r0, #0
	}

	return res;
}
    3d96:	b002      	add	sp, #8
    3d98:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3d9a:	a901      	add	r1, sp, #4
    3d9c:	4b0e      	ldr	r3, [pc, #56]	; (3dd8 <disk_ioctl+0x60>)
    3d9e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    3da0:	9b01      	ldr	r3, [sp, #4]
    3da2:	3301      	adds	r3, #1
    3da4:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3da6:	2000      	movs	r0, #0
	break;
    3da8:	e7f5      	b.n	3d96 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3daa:	4b0c      	ldr	r3, [pc, #48]	; (3ddc <disk_ioctl+0x64>)
    3dac:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    3dae:	1e43      	subs	r3, r0, #1
    3db0:	b2db      	uxtb	r3, r3
    3db2:	2b01      	cmp	r3, #1
    3db4:	d904      	bls.n	3dc0 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3db6:	1f03      	subs	r3, r0, #4
    3db8:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    3dba:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3dbc:	4213      	tst	r3, r2
    3dbe:	d1ea      	bne.n	3d96 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    3dc0:	2300      	movs	r3, #0
    3dc2:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3dc4:	2000      	movs	r0, #0
	break;
    3dc6:	e7e6      	b.n	3d96 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3dc8:	4b05      	ldr	r3, [pc, #20]	; (3de0 <disk_ioctl+0x68>)
    3dca:	4798      	blx	r3
    3dcc:	2800      	cmp	r0, #0
    3dce:	d001      	beq.n	3dd4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    3dd0:	2003      	movs	r0, #3
    3dd2:	e7e0      	b.n	3d96 <disk_ioctl+0x1e>
			res = RES_OK;
    3dd4:	2000      	movs	r0, #0
    3dd6:	e7de      	b.n	3d96 <disk_ioctl+0x1e>
    3dd8:	00008529 	.word	0x00008529
    3ddc:	00008545 	.word	0x00008545
    3de0:	00008511 	.word	0x00008511

00003de4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3de4:	b500      	push	{lr}
    3de6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3de8:	4669      	mov	r1, sp
    3dea:	480f      	ldr	r0, [pc, #60]	; (3e28 <get_fattime+0x44>)
    3dec:	4b0f      	ldr	r3, [pc, #60]	; (3e2c <get_fattime+0x48>)
    3dee:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    3df0:	466b      	mov	r3, sp
    3df2:	7958      	ldrb	r0, [r3, #5]
    3df4:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3df6:	791b      	ldrb	r3, [r3, #4]
    3df8:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    3dfa:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    3dfc:	466b      	mov	r3, sp
    3dfe:	789b      	ldrb	r3, [r3, #2]
    3e00:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    3e02:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    3e04:	466b      	mov	r3, sp
    3e06:	785b      	ldrb	r3, [r3, #1]
    3e08:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    3e0a:	4318      	orrs	r0, r3
    3e0c:	466b      	mov	r3, sp
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	085b      	lsrs	r3, r3, #1
    3e12:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3e14:	466b      	mov	r3, sp
    3e16:	88db      	ldrh	r3, [r3, #6]
    3e18:	4a05      	ldr	r2, [pc, #20]	; (3e30 <get_fattime+0x4c>)
    3e1a:	4694      	mov	ip, r2
    3e1c:	4463      	add	r3, ip
    3e1e:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    3e20:	4318      	orrs	r0, r3

	return ul_time;
}
    3e22:	b003      	add	sp, #12
    3e24:	bd00      	pop	{pc}
    3e26:	46c0      	nop			; (mov r8, r8)
    3e28:	200005ec 	.word	0x200005ec
    3e2c:	000020b9 	.word	0x000020b9
    3e30:	fffff844 	.word	0xfffff844

00003e34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3e34:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    3e36:	2a00      	cmp	r2, #0
    3e38:	d005      	beq.n	3e46 <mem_cpy+0x12>
    3e3a:	2300      	movs	r3, #0
		*d++ = *s++;
    3e3c:	5ccc      	ldrb	r4, [r1, r3]
    3e3e:	54c4      	strb	r4, [r0, r3]
    3e40:	3301      	adds	r3, #1
	while (cnt--)
    3e42:	4293      	cmp	r3, r2
    3e44:	d1fa      	bne.n	3e3c <mem_cpy+0x8>
}
    3e46:	bd10      	pop	{r4, pc}

00003e48 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3e48:	2a00      	cmp	r2, #0
    3e4a:	d005      	beq.n	3e58 <mem_set+0x10>
    3e4c:	0003      	movs	r3, r0
    3e4e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    3e50:	7019      	strb	r1, [r3, #0]
    3e52:	3301      	adds	r3, #1
	while (cnt--)
    3e54:	4293      	cmp	r3, r2
    3e56:	d1fb      	bne.n	3e50 <mem_set+0x8>
}
    3e58:	4770      	bx	lr

00003e5a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    3e5a:	0002      	movs	r2, r0
	clst -= 2;
    3e5c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    3e5e:	6983      	ldr	r3, [r0, #24]
    3e60:	3b02      	subs	r3, #2
    3e62:	2000      	movs	r0, #0
    3e64:	4299      	cmp	r1, r3
    3e66:	d203      	bcs.n	3e70 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    3e68:	7890      	ldrb	r0, [r2, #2]
    3e6a:	4341      	muls	r1, r0
    3e6c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3e6e:	1808      	adds	r0, r1, r0
}
    3e70:	4770      	bx	lr

00003e72 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    3e72:	0002      	movs	r2, r0
    3e74:	0001      	movs	r1, r0
    3e76:	310b      	adds	r1, #11
	BYTE sum = 0;
    3e78:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    3e7a:	0843      	lsrs	r3, r0, #1
    3e7c:	01c0      	lsls	r0, r0, #7
    3e7e:	4303      	orrs	r3, r0
    3e80:	7810      	ldrb	r0, [r2, #0]
    3e82:	1818      	adds	r0, r3, r0
    3e84:	b2c0      	uxtb	r0, r0
    3e86:	3201      	adds	r2, #1
    3e88:	428a      	cmp	r2, r1
    3e8a:	d1f6      	bne.n	3e7a <sum_sfn+0x8>
	return sum;
}
    3e8c:	4770      	bx	lr
	...

00003e90 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    3e90:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    3e92:	2800      	cmp	r0, #0
    3e94:	d010      	beq.n	3eb8 <validate+0x28>
    3e96:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3e98:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3e9a:	2a00      	cmp	r2, #0
    3e9c:	d101      	bne.n	3ea2 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    3e9e:	0018      	movs	r0, r3
    3ea0:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    3ea2:	88c2      	ldrh	r2, [r0, #6]
    3ea4:	428a      	cmp	r2, r1
    3ea6:	d1fa      	bne.n	3e9e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3ea8:	7840      	ldrb	r0, [r0, #1]
    3eaa:	4b04      	ldr	r3, [pc, #16]	; (3ebc <validate+0x2c>)
    3eac:	4798      	blx	r3
		return FR_NOT_READY;
    3eae:	2303      	movs	r3, #3
	return FR_OK;
    3eb0:	07c0      	lsls	r0, r0, #31
    3eb2:	17c0      	asrs	r0, r0, #31
    3eb4:	4003      	ands	r3, r0
    3eb6:	e7f2      	b.n	3e9e <validate+0xe>
		return FR_INVALID_OBJECT;
    3eb8:	2309      	movs	r3, #9
    3eba:	e7f0      	b.n	3e9e <validate+0xe>
    3ebc:	00003c55 	.word	0x00003c55

00003ec0 <check_fs>:
{
    3ec0:	b570      	push	{r4, r5, r6, lr}
    3ec2:	0004      	movs	r4, r0
    3ec4:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3ec6:	0001      	movs	r1, r0
    3ec8:	3130      	adds	r1, #48	; 0x30
    3eca:	7840      	ldrb	r0, [r0, #1]
    3ecc:	2301      	movs	r3, #1
    3ece:	4d1f      	ldr	r5, [pc, #124]	; (3f4c <check_fs+0x8c>)
    3ed0:	47a8      	blx	r5
		return 3;
    3ed2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d001      	beq.n	3edc <check_fs+0x1c>
}
    3ed8:	0018      	movs	r0, r3
    3eda:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3edc:	4b1c      	ldr	r3, [pc, #112]	; (3f50 <check_fs+0x90>)
    3ede:	5ce3      	ldrb	r3, [r4, r3]
    3ee0:	021b      	lsls	r3, r3, #8
    3ee2:	4a1c      	ldr	r2, [pc, #112]	; (3f54 <check_fs+0x94>)
    3ee4:	5ca2      	ldrb	r2, [r4, r2]
    3ee6:	431a      	orrs	r2, r3
    3ee8:	491b      	ldr	r1, [pc, #108]	; (3f58 <check_fs+0x98>)
    3eea:	b212      	sxth	r2, r2
		return 2;
    3eec:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3eee:	428a      	cmp	r2, r1
    3ef0:	d1f2      	bne.n	3ed8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3ef2:	3367      	adds	r3, #103	; 0x67
    3ef4:	5ce3      	ldrb	r3, [r4, r3]
    3ef6:	061b      	lsls	r3, r3, #24
    3ef8:	2268      	movs	r2, #104	; 0x68
    3efa:	5ca2      	ldrb	r2, [r4, r2]
    3efc:	0412      	lsls	r2, r2, #16
    3efe:	4313      	orrs	r3, r2
    3f00:	2266      	movs	r2, #102	; 0x66
    3f02:	5ca2      	ldrb	r2, [r4, r2]
    3f04:	4313      	orrs	r3, r2
    3f06:	2267      	movs	r2, #103	; 0x67
    3f08:	5ca2      	ldrb	r2, [r4, r2]
    3f0a:	0212      	lsls	r2, r2, #8
    3f0c:	4313      	orrs	r3, r2
    3f0e:	021b      	lsls	r3, r3, #8
    3f10:	0a1b      	lsrs	r3, r3, #8
    3f12:	4a12      	ldr	r2, [pc, #72]	; (3f5c <check_fs+0x9c>)
    3f14:	4293      	cmp	r3, r2
    3f16:	d016      	beq.n	3f46 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3f18:	2385      	movs	r3, #133	; 0x85
    3f1a:	5ce3      	ldrb	r3, [r4, r3]
    3f1c:	061b      	lsls	r3, r3, #24
    3f1e:	2284      	movs	r2, #132	; 0x84
    3f20:	5ca2      	ldrb	r2, [r4, r2]
    3f22:	0412      	lsls	r2, r2, #16
    3f24:	4313      	orrs	r3, r2
    3f26:	2282      	movs	r2, #130	; 0x82
    3f28:	5ca2      	ldrb	r2, [r4, r2]
    3f2a:	4313      	orrs	r3, r2
    3f2c:	2283      	movs	r2, #131	; 0x83
    3f2e:	5ca2      	ldrb	r2, [r4, r2]
    3f30:	0212      	lsls	r2, r2, #8
    3f32:	4313      	orrs	r3, r2
    3f34:	021b      	lsls	r3, r3, #8
    3f36:	0a1b      	lsrs	r3, r3, #8
    3f38:	4a09      	ldr	r2, [pc, #36]	; (3f60 <check_fs+0xa0>)
    3f3a:	4694      	mov	ip, r2
    3f3c:	4463      	add	r3, ip
    3f3e:	1e58      	subs	r0, r3, #1
    3f40:	4183      	sbcs	r3, r0
		return 3;
    3f42:	b2db      	uxtb	r3, r3
    3f44:	e7c8      	b.n	3ed8 <check_fs+0x18>
		return 0;
    3f46:	2300      	movs	r3, #0
    3f48:	e7c6      	b.n	3ed8 <check_fs+0x18>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00003c71 	.word	0x00003c71
    3f50:	0000022f 	.word	0x0000022f
    3f54:	0000022e 	.word	0x0000022e
    3f58:	ffffaa55 	.word	0xffffaa55
    3f5c:	00544146 	.word	0x00544146
    3f60:	ffabbeba 	.word	0xffabbeba

00003f64 <chk_mounted>:
{
    3f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f66:	46d6      	mov	lr, sl
    3f68:	464f      	mov	r7, r9
    3f6a:	4646      	mov	r6, r8
    3f6c:	b5c0      	push	{r6, r7, lr}
    3f6e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    3f70:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    3f72:	781c      	ldrb	r4, [r3, #0]
    3f74:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    3f76:	2c09      	cmp	r4, #9
    3f78:	d80e      	bhi.n	3f98 <chk_mounted+0x34>
    3f7a:	785a      	ldrb	r2, [r3, #1]
    3f7c:	2a3a      	cmp	r2, #58	; 0x3a
    3f7e:	d001      	beq.n	3f84 <chk_mounted+0x20>
    3f80:	2400      	movs	r4, #0
    3f82:	e00a      	b.n	3f9a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    3f84:	3302      	adds	r3, #2
    3f86:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    3f88:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    3f8a:	2c03      	cmp	r4, #3
    3f8c:	d905      	bls.n	3f9a <chk_mounted+0x36>
}
    3f8e:	bc1c      	pop	{r2, r3, r4}
    3f90:	4690      	mov	r8, r2
    3f92:	4699      	mov	r9, r3
    3f94:	46a2      	mov	sl, r4
    3f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f98:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3f9a:	00a3      	lsls	r3, r4, #2
    3f9c:	4ac5      	ldr	r2, [pc, #788]	; (42b4 <chk_mounted+0x350>)
    3f9e:	589e      	ldr	r6, [r3, r2]
    3fa0:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3fa2:	2e00      	cmp	r6, #0
    3fa4:	d100      	bne.n	3fa8 <chk_mounted+0x44>
    3fa6:	e0e8      	b.n	417a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3fa8:	7833      	ldrb	r3, [r6, #0]
    3faa:	2b00      	cmp	r3, #0
    3fac:	d00d      	beq.n	3fca <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3fae:	7870      	ldrb	r0, [r6, #1]
    3fb0:	4bc1      	ldr	r3, [pc, #772]	; (42b8 <chk_mounted+0x354>)
    3fb2:	4798      	blx	r3
    3fb4:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3fb6:	07c2      	lsls	r2, r0, #31
    3fb8:	d407      	bmi.n	3fca <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3fba:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3fbc:	2d00      	cmp	r5, #0
    3fbe:	d0e6      	beq.n	3f8e <chk_mounted+0x2a>
    3fc0:	075b      	lsls	r3, r3, #29
    3fc2:	d400      	bmi.n	3fc6 <chk_mounted+0x62>
    3fc4:	e0db      	b.n	417e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3fc6:	300a      	adds	r0, #10
    3fc8:	e7e1      	b.n	3f8e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3fca:	2300      	movs	r3, #0
    3fcc:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3fce:	b2e0      	uxtb	r0, r4
    3fd0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3fd2:	4bba      	ldr	r3, [pc, #744]	; (42bc <chk_mounted+0x358>)
    3fd4:	4798      	blx	r3
    3fd6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3fd8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3fda:	07da      	lsls	r2, r3, #31
    3fdc:	d4d7      	bmi.n	3f8e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3fde:	2d00      	cmp	r5, #0
    3fe0:	d002      	beq.n	3fe8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3fe2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3fe4:	075b      	lsls	r3, r3, #29
    3fe6:	d4d2      	bmi.n	3f8e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3fe8:	2100      	movs	r1, #0
    3fea:	0030      	movs	r0, r6
    3fec:	4bb4      	ldr	r3, [pc, #720]	; (42c0 <chk_mounted+0x35c>)
    3fee:	4798      	blx	r3
    3ff0:	0003      	movs	r3, r0
    3ff2:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3ff4:	2801      	cmp	r0, #1
    3ff6:	d100      	bne.n	3ffa <chk_mounted+0x96>
    3ff8:	e09a      	b.n	4130 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3ffa:	2b03      	cmp	r3, #3
    3ffc:	d100      	bne.n	4000 <chk_mounted+0x9c>
    3ffe:	e0c0      	b.n	4182 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4000:	200d      	movs	r0, #13
    4002:	2b00      	cmp	r3, #0
    4004:	d1c3      	bne.n	3f8e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    4006:	333c      	adds	r3, #60	; 0x3c
    4008:	5cf2      	ldrb	r2, [r6, r3]
    400a:	0212      	lsls	r2, r2, #8
    400c:	3b01      	subs	r3, #1
    400e:	5cf3      	ldrb	r3, [r6, r3]
    4010:	4313      	orrs	r3, r2
    4012:	2280      	movs	r2, #128	; 0x80
    4014:	0092      	lsls	r2, r2, #2
    4016:	b21b      	sxth	r3, r3
    4018:	4293      	cmp	r3, r2
    401a:	d1b8      	bne.n	3f8e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    401c:	2347      	movs	r3, #71	; 0x47
    401e:	5cf3      	ldrb	r3, [r6, r3]
    4020:	021b      	lsls	r3, r3, #8
    4022:	3abb      	subs	r2, #187	; 0xbb
    4024:	3aff      	subs	r2, #255	; 0xff
    4026:	5cb5      	ldrb	r5, [r6, r2]
    4028:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    402a:	d10d      	bne.n	4048 <chk_mounted+0xe4>
    402c:	2357      	movs	r3, #87	; 0x57
    402e:	5cf5      	ldrb	r5, [r6, r3]
    4030:	062d      	lsls	r5, r5, #24
    4032:	3b01      	subs	r3, #1
    4034:	5cf3      	ldrb	r3, [r6, r3]
    4036:	041b      	lsls	r3, r3, #16
    4038:	431d      	orrs	r5, r3
    403a:	2354      	movs	r3, #84	; 0x54
    403c:	5cf3      	ldrb	r3, [r6, r3]
    403e:	431d      	orrs	r5, r3
    4040:	2355      	movs	r3, #85	; 0x55
    4042:	5cf3      	ldrb	r3, [r6, r3]
    4044:	021b      	lsls	r3, r3, #8
    4046:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    4048:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    404a:	2340      	movs	r3, #64	; 0x40
    404c:	5cf2      	ldrb	r2, [r6, r3]
    404e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    4050:	1e53      	subs	r3, r2, #1
    4052:	200d      	movs	r0, #13
    4054:	2b01      	cmp	r3, #1
    4056:	d89a      	bhi.n	3f8e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    4058:	233d      	movs	r3, #61	; 0x3d
    405a:	5cf1      	ldrb	r1, [r6, r3]
    405c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    405e:	2900      	cmp	r1, #0
    4060:	d095      	beq.n	3f8e <chk_mounted+0x2a>
    4062:	1e4b      	subs	r3, r1, #1
    4064:	4219      	tst	r1, r3
    4066:	d192      	bne.n	3f8e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    4068:	2342      	movs	r3, #66	; 0x42
    406a:	5cf3      	ldrb	r3, [r6, r3]
    406c:	021b      	lsls	r3, r3, #8
    406e:	3034      	adds	r0, #52	; 0x34
    4070:	5c30      	ldrb	r0, [r6, r0]
    4072:	4318      	orrs	r0, r3
    4074:	4680      	mov	r8, r0
    4076:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    4078:	200d      	movs	r0, #13
    407a:	4643      	mov	r3, r8
    407c:	071b      	lsls	r3, r3, #28
    407e:	d000      	beq.n	4082 <chk_mounted+0x11e>
    4080:	e785      	b.n	3f8e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    4082:	2344      	movs	r3, #68	; 0x44
    4084:	5cf3      	ldrb	r3, [r6, r3]
    4086:	021b      	lsls	r3, r3, #8
    4088:	3036      	adds	r0, #54	; 0x36
    408a:	5c30      	ldrb	r0, [r6, r0]
    408c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    408e:	d10d      	bne.n	40ac <chk_mounted+0x148>
    4090:	3353      	adds	r3, #83	; 0x53
    4092:	5cf3      	ldrb	r3, [r6, r3]
    4094:	061b      	lsls	r3, r3, #24
    4096:	2052      	movs	r0, #82	; 0x52
    4098:	5c30      	ldrb	r0, [r6, r0]
    409a:	0400      	lsls	r0, r0, #16
    409c:	4303      	orrs	r3, r0
    409e:	2050      	movs	r0, #80	; 0x50
    40a0:	5c30      	ldrb	r0, [r6, r0]
    40a2:	4303      	orrs	r3, r0
    40a4:	2051      	movs	r0, #81	; 0x51
    40a6:	5c30      	ldrb	r0, [r6, r0]
    40a8:	0200      	lsls	r0, r0, #8
    40aa:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    40ac:	203f      	movs	r0, #63	; 0x3f
    40ae:	5c30      	ldrb	r0, [r6, r0]
    40b0:	0200      	lsls	r0, r0, #8
    40b2:	273e      	movs	r7, #62	; 0x3e
    40b4:	5df7      	ldrb	r7, [r6, r7]
    40b6:	4307      	orrs	r7, r0
    40b8:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    40ba:	200d      	movs	r0, #13
    40bc:	2f00      	cmp	r7, #0
    40be:	d100      	bne.n	40c2 <chk_mounted+0x15e>
    40c0:	e765      	b.n	3f8e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    40c2:	436a      	muls	r2, r5
    40c4:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    40c6:	4642      	mov	r2, r8
    40c8:	0917      	lsrs	r7, r2, #4
    40ca:	4457      	add	r7, sl
    40cc:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    40ce:	42bb      	cmp	r3, r7
    40d0:	d200      	bcs.n	40d4 <chk_mounted+0x170>
    40d2:	e75c      	b.n	3f8e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    40d4:	1bd8      	subs	r0, r3, r7
    40d6:	4b7b      	ldr	r3, [pc, #492]	; (42c4 <chk_mounted+0x360>)
    40d8:	4798      	blx	r3
    40da:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    40dc:	200d      	movs	r0, #13
    40de:	2b00      	cmp	r3, #0
    40e0:	d100      	bne.n	40e4 <chk_mounted+0x180>
    40e2:	e754      	b.n	3f8e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    40e4:	4a78      	ldr	r2, [pc, #480]	; (42c8 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    40e6:	429a      	cmp	r2, r3
    40e8:	4192      	sbcs	r2, r2
    40ea:	4252      	negs	r2, r2
    40ec:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    40ee:	4977      	ldr	r1, [pc, #476]	; (42cc <chk_mounted+0x368>)
    40f0:	428b      	cmp	r3, r1
    40f2:	d848      	bhi.n	4186 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    40f4:	3302      	adds	r3, #2
    40f6:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    40f8:	19e7      	adds	r7, r4, r7
    40fa:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    40fc:	4454      	add	r4, sl
    40fe:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    4100:	200d      	movs	r0, #13
    4102:	4641      	mov	r1, r8
    4104:	2900      	cmp	r1, #0
    4106:	d100      	bne.n	410a <chk_mounted+0x1a6>
    4108:	e741      	b.n	3f8e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    410a:	444c      	add	r4, r9
    410c:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    410e:	2a02      	cmp	r2, #2
    4110:	d12c      	bne.n	416c <chk_mounted+0x208>
    4112:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    4114:	496e      	ldr	r1, [pc, #440]	; (42d0 <chk_mounted+0x36c>)
    4116:	468c      	mov	ip, r1
    4118:	4463      	add	r3, ip
    411a:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    411c:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    411e:	429d      	cmp	r5, r3
    4120:	d200      	bcs.n	4124 <chk_mounted+0x1c0>
    4122:	e734      	b.n	3f8e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    4124:	2301      	movs	r3, #1
    4126:	425b      	negs	r3, r3
    4128:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    412a:	2300      	movs	r3, #0
    412c:	60f3      	str	r3, [r6, #12]
    412e:	e0b6      	b.n	429e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    4130:	33f2      	adds	r3, #242	; 0xf2
    4132:	33ff      	adds	r3, #255	; 0xff
    4134:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4136:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    4138:	2b00      	cmp	r3, #0
    413a:	d100      	bne.n	413e <chk_mounted+0x1da>
    413c:	e727      	b.n	3f8e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    413e:	23fa      	movs	r3, #250	; 0xfa
    4140:	33ff      	adds	r3, #255	; 0xff
    4142:	5cf4      	ldrb	r4, [r6, r3]
    4144:	0624      	lsls	r4, r4, #24
    4146:	3b01      	subs	r3, #1
    4148:	5cf3      	ldrb	r3, [r6, r3]
    414a:	041b      	lsls	r3, r3, #16
    414c:	431c      	orrs	r4, r3
    414e:	23fb      	movs	r3, #251	; 0xfb
    4150:	005b      	lsls	r3, r3, #1
    4152:	5cf3      	ldrb	r3, [r6, r3]
    4154:	431c      	orrs	r4, r3
    4156:	23f8      	movs	r3, #248	; 0xf8
    4158:	33ff      	adds	r3, #255	; 0xff
    415a:	5cf2      	ldrb	r2, [r6, r3]
    415c:	0212      	lsls	r2, r2, #8
    415e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    4160:	0021      	movs	r1, r4
    4162:	0030      	movs	r0, r6
    4164:	4b56      	ldr	r3, [pc, #344]	; (42c0 <chk_mounted+0x35c>)
    4166:	4798      	blx	r3
    4168:	0003      	movs	r3, r0
    416a:	e746      	b.n	3ffa <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    416c:	2103      	movs	r1, #3
    416e:	4359      	muls	r1, r3
    4170:	0849      	lsrs	r1, r1, #1
    4172:	2001      	movs	r0, #1
    4174:	4003      	ands	r3, r0
    4176:	18cb      	adds	r3, r1, r3
    4178:	e7cc      	b.n	4114 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    417a:	200c      	movs	r0, #12
    417c:	e707      	b.n	3f8e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    417e:	2000      	movs	r0, #0
    4180:	e705      	b.n	3f8e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    4182:	2001      	movs	r0, #1
    4184:	e703      	b.n	3f8e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    4186:	3302      	adds	r3, #2
    4188:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    418a:	19e7      	adds	r7, r4, r7
    418c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    418e:	4652      	mov	r2, sl
    4190:	18a2      	adds	r2, r4, r2
    4192:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    4194:	200d      	movs	r0, #13
    4196:	4642      	mov	r2, r8
    4198:	2a00      	cmp	r2, #0
    419a:	d000      	beq.n	419e <chk_mounted+0x23a>
    419c:	e6f7      	b.n	3f8e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    419e:	225f      	movs	r2, #95	; 0x5f
    41a0:	5cb2      	ldrb	r2, [r6, r2]
    41a2:	0612      	lsls	r2, r2, #24
    41a4:	215e      	movs	r1, #94	; 0x5e
    41a6:	5c71      	ldrb	r1, [r6, r1]
    41a8:	0409      	lsls	r1, r1, #16
    41aa:	430a      	orrs	r2, r1
    41ac:	215c      	movs	r1, #92	; 0x5c
    41ae:	5c71      	ldrb	r1, [r6, r1]
    41b0:	430a      	orrs	r2, r1
    41b2:	215d      	movs	r1, #93	; 0x5d
    41b4:	5c71      	ldrb	r1, [r6, r1]
    41b6:	0209      	lsls	r1, r1, #8
    41b8:	430a      	orrs	r2, r1
    41ba:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    41bc:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    41be:	4a44      	ldr	r2, [pc, #272]	; (42d0 <chk_mounted+0x36c>)
    41c0:	4694      	mov	ip, r2
    41c2:	4463      	add	r3, ip
    41c4:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    41c6:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    41c8:	429d      	cmp	r5, r3
    41ca:	d200      	bcs.n	41ce <chk_mounted+0x26a>
    41cc:	e6df      	b.n	3f8e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    41ce:	2301      	movs	r3, #1
    41d0:	425b      	negs	r3, r3
    41d2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    41d4:	2300      	movs	r3, #0
    41d6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    41d8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    41da:	3361      	adds	r3, #97	; 0x61
    41dc:	5cf3      	ldrb	r3, [r6, r3]
    41de:	021b      	lsls	r3, r3, #8
    41e0:	2260      	movs	r2, #96	; 0x60
    41e2:	5cb2      	ldrb	r2, [r6, r2]
    41e4:	431a      	orrs	r2, r3
    41e6:	1912      	adds	r2, r2, r4
    41e8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    41ea:	0031      	movs	r1, r6
    41ec:	3130      	adds	r1, #48	; 0x30
    41ee:	7870      	ldrb	r0, [r6, #1]
    41f0:	2301      	movs	r3, #1
    41f2:	4c38      	ldr	r4, [pc, #224]	; (42d4 <chk_mounted+0x370>)
    41f4:	47a0      	blx	r4
    41f6:	2203      	movs	r2, #3
    41f8:	2800      	cmp	r0, #0
    41fa:	d150      	bne.n	429e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    41fc:	4b36      	ldr	r3, [pc, #216]	; (42d8 <chk_mounted+0x374>)
    41fe:	5cf2      	ldrb	r2, [r6, r3]
    4200:	0212      	lsls	r2, r2, #8
    4202:	4b36      	ldr	r3, [pc, #216]	; (42dc <chk_mounted+0x378>)
    4204:	5cf3      	ldrb	r3, [r6, r3]
    4206:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    4208:	4935      	ldr	r1, [pc, #212]	; (42e0 <chk_mounted+0x37c>)
    420a:	b21b      	sxth	r3, r3
    420c:	2203      	movs	r2, #3
    420e:	428b      	cmp	r3, r1
    4210:	d145      	bne.n	429e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4212:	2333      	movs	r3, #51	; 0x33
    4214:	5cf3      	ldrb	r3, [r6, r3]
    4216:	061b      	lsls	r3, r3, #24
    4218:	322f      	adds	r2, #47	; 0x2f
    421a:	5cb2      	ldrb	r2, [r6, r2]
    421c:	0412      	lsls	r2, r2, #16
    421e:	4313      	orrs	r3, r2
    4220:	2230      	movs	r2, #48	; 0x30
    4222:	5cb2      	ldrb	r2, [r6, r2]
    4224:	4313      	orrs	r3, r2
    4226:	2231      	movs	r2, #49	; 0x31
    4228:	5cb2      	ldrb	r2, [r6, r2]
    422a:	0212      	lsls	r2, r2, #8
    422c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    422e:	492d      	ldr	r1, [pc, #180]	; (42e4 <chk_mounted+0x380>)
    4230:	2203      	movs	r2, #3
    4232:	428b      	cmp	r3, r1
    4234:	d133      	bne.n	429e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    4236:	4b2c      	ldr	r3, [pc, #176]	; (42e8 <chk_mounted+0x384>)
    4238:	5cf3      	ldrb	r3, [r6, r3]
    423a:	061b      	lsls	r3, r3, #24
    423c:	4a2b      	ldr	r2, [pc, #172]	; (42ec <chk_mounted+0x388>)
    423e:	5cb2      	ldrb	r2, [r6, r2]
    4240:	0412      	lsls	r2, r2, #16
    4242:	4313      	orrs	r3, r2
    4244:	2285      	movs	r2, #133	; 0x85
    4246:	0092      	lsls	r2, r2, #2
    4248:	5cb2      	ldrb	r2, [r6, r2]
    424a:	4313      	orrs	r3, r2
    424c:	4a28      	ldr	r2, [pc, #160]	; (42f0 <chk_mounted+0x38c>)
    424e:	5cb2      	ldrb	r2, [r6, r2]
    4250:	0212      	lsls	r2, r2, #8
    4252:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    4254:	4927      	ldr	r1, [pc, #156]	; (42f4 <chk_mounted+0x390>)
    4256:	2203      	movs	r2, #3
    4258:	428b      	cmp	r3, r1
    425a:	d120      	bne.n	429e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    425c:	4b26      	ldr	r3, [pc, #152]	; (42f8 <chk_mounted+0x394>)
    425e:	5cf3      	ldrb	r3, [r6, r3]
    4260:	061b      	lsls	r3, r3, #24
    4262:	4a26      	ldr	r2, [pc, #152]	; (42fc <chk_mounted+0x398>)
    4264:	5cb2      	ldrb	r2, [r6, r2]
    4266:	0412      	lsls	r2, r2, #16
    4268:	4313      	orrs	r3, r2
    426a:	2287      	movs	r2, #135	; 0x87
    426c:	0092      	lsls	r2, r2, #2
    426e:	5cb2      	ldrb	r2, [r6, r2]
    4270:	4313      	orrs	r3, r2
    4272:	4a23      	ldr	r2, [pc, #140]	; (4300 <chk_mounted+0x39c>)
    4274:	5cb2      	ldrb	r2, [r6, r2]
    4276:	0212      	lsls	r2, r2, #8
    4278:	4313      	orrs	r3, r2
    427a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    427c:	4b21      	ldr	r3, [pc, #132]	; (4304 <chk_mounted+0x3a0>)
    427e:	5cf3      	ldrb	r3, [r6, r3]
    4280:	061b      	lsls	r3, r3, #24
    4282:	4a21      	ldr	r2, [pc, #132]	; (4308 <chk_mounted+0x3a4>)
    4284:	5cb2      	ldrb	r2, [r6, r2]
    4286:	0412      	lsls	r2, r2, #16
    4288:	4313      	orrs	r3, r2
    428a:	2286      	movs	r2, #134	; 0x86
    428c:	0092      	lsls	r2, r2, #2
    428e:	5cb2      	ldrb	r2, [r6, r2]
    4290:	4313      	orrs	r3, r2
    4292:	4a1e      	ldr	r2, [pc, #120]	; (430c <chk_mounted+0x3a8>)
    4294:	5cb2      	ldrb	r2, [r6, r2]
    4296:	0212      	lsls	r2, r2, #8
    4298:	4313      	orrs	r3, r2
    429a:	6133      	str	r3, [r6, #16]
    429c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    429e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    42a0:	4a1b      	ldr	r2, [pc, #108]	; (4310 <chk_mounted+0x3ac>)
    42a2:	8813      	ldrh	r3, [r2, #0]
    42a4:	3301      	adds	r3, #1
    42a6:	b29b      	uxth	r3, r3
    42a8:	8013      	strh	r3, [r2, #0]
    42aa:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    42ac:	2000      	movs	r0, #0
    42ae:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    42b0:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    42b2:	e66c      	b.n	3f8e <chk_mounted+0x2a>
    42b4:	200002b8 	.word	0x200002b8
    42b8:	00003c55 	.word	0x00003c55
    42bc:	00003bb9 	.word	0x00003bb9
    42c0:	00003ec1 	.word	0x00003ec1
    42c4:	00008b85 	.word	0x00008b85
    42c8:	00000ff5 	.word	0x00000ff5
    42cc:	0000fff5 	.word	0x0000fff5
    42d0:	000001ff 	.word	0x000001ff
    42d4:	00003c71 	.word	0x00003c71
    42d8:	0000022f 	.word	0x0000022f
    42dc:	0000022e 	.word	0x0000022e
    42e0:	ffffaa55 	.word	0xffffaa55
    42e4:	41615252 	.word	0x41615252
    42e8:	00000217 	.word	0x00000217
    42ec:	00000216 	.word	0x00000216
    42f0:	00000215 	.word	0x00000215
    42f4:	61417272 	.word	0x61417272
    42f8:	0000021f 	.word	0x0000021f
    42fc:	0000021e 	.word	0x0000021e
    4300:	0000021d 	.word	0x0000021d
    4304:	0000021b 	.word	0x0000021b
    4308:	0000021a 	.word	0x0000021a
    430c:	00000219 	.word	0x00000219
    4310:	200002c8 	.word	0x200002c8

00004314 <move_window>:
{
    4314:	b5f0      	push	{r4, r5, r6, r7, lr}
    4316:	46ce      	mov	lr, r9
    4318:	b500      	push	{lr}
    431a:	b082      	sub	sp, #8
    431c:	0004      	movs	r4, r0
    431e:	000f      	movs	r7, r1
	wsect = fs->winsect;
    4320:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    4322:	428d      	cmp	r5, r1
    4324:	d03f      	beq.n	43a6 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    4326:	7903      	ldrb	r3, [r0, #4]
    4328:	2b00      	cmp	r3, #0
    432a:	d107      	bne.n	433c <move_window+0x28>
	return FR_OK;
    432c:	2300      	movs	r3, #0
		if (sector) {
    432e:	2f00      	cmp	r7, #0
    4330:	d12c      	bne.n	438c <move_window+0x78>
}
    4332:	0018      	movs	r0, r3
    4334:	b002      	add	sp, #8
    4336:	bc04      	pop	{r2}
    4338:	4691      	mov	r9, r2
    433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    433c:	2330      	movs	r3, #48	; 0x30
    433e:	469c      	mov	ip, r3
    4340:	4484      	add	ip, r0
    4342:	4663      	mov	r3, ip
    4344:	4661      	mov	r1, ip
    4346:	9301      	str	r3, [sp, #4]
    4348:	7840      	ldrb	r0, [r0, #1]
    434a:	2301      	movs	r3, #1
    434c:	002a      	movs	r2, r5
    434e:	4e17      	ldr	r6, [pc, #92]	; (43ac <move_window+0x98>)
    4350:	47b0      	blx	r6
				return FR_DISK_ERR;
    4352:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    4354:	2800      	cmp	r0, #0
    4356:	d1ec      	bne.n	4332 <move_window+0x1e>
			fs->wflag = 0;
    4358:	2300      	movs	r3, #0
    435a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    435c:	6a23      	ldr	r3, [r4, #32]
    435e:	69e2      	ldr	r2, [r4, #28]
    4360:	4694      	mov	ip, r2
    4362:	4463      	add	r3, ip
    4364:	429d      	cmp	r5, r3
    4366:	d2e1      	bcs.n	432c <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4368:	78e6      	ldrb	r6, [r4, #3]
    436a:	2e01      	cmp	r6, #1
    436c:	d9de      	bls.n	432c <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    436e:	4b0f      	ldr	r3, [pc, #60]	; (43ac <move_window+0x98>)
    4370:	4699      	mov	r9, r3
					wsect += fs->fsize;
    4372:	69e3      	ldr	r3, [r4, #28]
    4374:	469c      	mov	ip, r3
    4376:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    4378:	7860      	ldrb	r0, [r4, #1]
    437a:	2301      	movs	r3, #1
    437c:	002a      	movs	r2, r5
    437e:	9901      	ldr	r1, [sp, #4]
    4380:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    4382:	3e01      	subs	r6, #1
    4384:	b2f6      	uxtb	r6, r6
    4386:	2e01      	cmp	r6, #1
    4388:	d1f3      	bne.n	4372 <move_window+0x5e>
    438a:	e7cf      	b.n	432c <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    438c:	0021      	movs	r1, r4
    438e:	3130      	adds	r1, #48	; 0x30
    4390:	7860      	ldrb	r0, [r4, #1]
    4392:	3301      	adds	r3, #1
    4394:	003a      	movs	r2, r7
    4396:	4d06      	ldr	r5, [pc, #24]	; (43b0 <move_window+0x9c>)
    4398:	47a8      	blx	r5
				return FR_DISK_ERR;
    439a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    439c:	2800      	cmp	r0, #0
    439e:	d1c8      	bne.n	4332 <move_window+0x1e>
			fs->winsect = sector;
    43a0:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    43a2:	2300      	movs	r3, #0
    43a4:	e7c5      	b.n	4332 <move_window+0x1e>
    43a6:	2300      	movs	r3, #0
    43a8:	e7c3      	b.n	4332 <move_window+0x1e>
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	00003cf5 	.word	0x00003cf5
    43b0:	00003c71 	.word	0x00003c71

000043b4 <get_fat>:
{
    43b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43b6:	0005      	movs	r5, r0
    43b8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    43ba:	2901      	cmp	r1, #1
    43bc:	d974      	bls.n	44a8 <get_fat+0xf4>
		return 1;
    43be:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    43c0:	69ab      	ldr	r3, [r5, #24]
    43c2:	4299      	cmp	r1, r3
    43c4:	d271      	bcs.n	44aa <get_fat+0xf6>
	switch (fs->fs_type) {
    43c6:	782b      	ldrb	r3, [r5, #0]
    43c8:	2b02      	cmp	r3, #2
    43ca:	d034      	beq.n	4436 <get_fat+0x82>
    43cc:	2b03      	cmp	r3, #3
    43ce:	d049      	beq.n	4464 <get_fat+0xb0>
    43d0:	2b01      	cmp	r3, #1
    43d2:	d002      	beq.n	43da <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    43d4:	2001      	movs	r0, #1
    43d6:	4240      	negs	r0, r0
    43d8:	e067      	b.n	44aa <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    43da:	084e      	lsrs	r6, r1, #1
    43dc:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    43de:	0a71      	lsrs	r1, r6, #9
    43e0:	6a2b      	ldr	r3, [r5, #32]
    43e2:	469c      	mov	ip, r3
    43e4:	4461      	add	r1, ip
    43e6:	0028      	movs	r0, r5
    43e8:	4b30      	ldr	r3, [pc, #192]	; (44ac <get_fat+0xf8>)
    43ea:	4798      	blx	r3
    43ec:	2800      	cmp	r0, #0
    43ee:	d002      	beq.n	43f6 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    43f0:	2001      	movs	r0, #1
    43f2:	4240      	negs	r0, r0
    43f4:	e059      	b.n	44aa <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    43f6:	05f3      	lsls	r3, r6, #23
    43f8:	0ddb      	lsrs	r3, r3, #23
    43fa:	18eb      	adds	r3, r5, r3
    43fc:	3330      	adds	r3, #48	; 0x30
    43fe:	781f      	ldrb	r7, [r3, #0]
    4400:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    4402:	0a71      	lsrs	r1, r6, #9
    4404:	6a2b      	ldr	r3, [r5, #32]
    4406:	469c      	mov	ip, r3
    4408:	4461      	add	r1, ip
    440a:	0028      	movs	r0, r5
    440c:	4b27      	ldr	r3, [pc, #156]	; (44ac <get_fat+0xf8>)
    440e:	4798      	blx	r3
    4410:	2800      	cmp	r0, #0
    4412:	d002      	beq.n	441a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4414:	2001      	movs	r0, #1
    4416:	4240      	negs	r0, r0
    4418:	e047      	b.n	44aa <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    441a:	05f6      	lsls	r6, r6, #23
    441c:	0df6      	lsrs	r6, r6, #23
    441e:	19ad      	adds	r5, r5, r6
    4420:	3530      	adds	r5, #48	; 0x30
    4422:	7828      	ldrb	r0, [r5, #0]
    4424:	0200      	lsls	r0, r0, #8
    4426:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    4428:	07e3      	lsls	r3, r4, #31
    442a:	d501      	bpl.n	4430 <get_fat+0x7c>
    442c:	0900      	lsrs	r0, r0, #4
    442e:	e03c      	b.n	44aa <get_fat+0xf6>
    4430:	0500      	lsls	r0, r0, #20
    4432:	0d00      	lsrs	r0, r0, #20
    4434:	e039      	b.n	44aa <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    4436:	0a09      	lsrs	r1, r1, #8
    4438:	6a2b      	ldr	r3, [r5, #32]
    443a:	469c      	mov	ip, r3
    443c:	4461      	add	r1, ip
    443e:	0028      	movs	r0, r5
    4440:	4b1a      	ldr	r3, [pc, #104]	; (44ac <get_fat+0xf8>)
    4442:	4798      	blx	r3
    4444:	2800      	cmp	r0, #0
    4446:	d002      	beq.n	444e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4448:	2001      	movs	r0, #1
    444a:	4240      	negs	r0, r0
    444c:	e02d      	b.n	44aa <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    444e:	0064      	lsls	r4, r4, #1
    4450:	23ff      	movs	r3, #255	; 0xff
    4452:	005b      	lsls	r3, r3, #1
    4454:	401c      	ands	r4, r3
		return LD_WORD(p);
    4456:	192d      	adds	r5, r5, r4
    4458:	3530      	adds	r5, #48	; 0x30
    445a:	786b      	ldrb	r3, [r5, #1]
    445c:	021b      	lsls	r3, r3, #8
    445e:	7828      	ldrb	r0, [r5, #0]
    4460:	4318      	orrs	r0, r3
    4462:	e022      	b.n	44aa <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    4464:	09c9      	lsrs	r1, r1, #7
    4466:	6a2b      	ldr	r3, [r5, #32]
    4468:	469c      	mov	ip, r3
    446a:	4461      	add	r1, ip
    446c:	0028      	movs	r0, r5
    446e:	4b0f      	ldr	r3, [pc, #60]	; (44ac <get_fat+0xf8>)
    4470:	4798      	blx	r3
    4472:	2800      	cmp	r0, #0
    4474:	d002      	beq.n	447c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    4476:	2001      	movs	r0, #1
    4478:	4240      	negs	r0, r0
    447a:	e016      	b.n	44aa <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    447c:	00a4      	lsls	r4, r4, #2
    447e:	23fe      	movs	r3, #254	; 0xfe
    4480:	005b      	lsls	r3, r3, #1
    4482:	401c      	ands	r4, r3
    4484:	0023      	movs	r3, r4
    4486:	3330      	adds	r3, #48	; 0x30
    4488:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    448a:	78d8      	ldrb	r0, [r3, #3]
    448c:	0600      	lsls	r0, r0, #24
    448e:	789a      	ldrb	r2, [r3, #2]
    4490:	0412      	lsls	r2, r2, #16
    4492:	4310      	orrs	r0, r2
    4494:	192c      	adds	r4, r5, r4
    4496:	3430      	adds	r4, #48	; 0x30
    4498:	7822      	ldrb	r2, [r4, #0]
    449a:	4310      	orrs	r0, r2
    449c:	785b      	ldrb	r3, [r3, #1]
    449e:	021b      	lsls	r3, r3, #8
    44a0:	4318      	orrs	r0, r3
    44a2:	0100      	lsls	r0, r0, #4
    44a4:	0900      	lsrs	r0, r0, #4
    44a6:	e000      	b.n	44aa <get_fat+0xf6>
		return 1;
    44a8:	2001      	movs	r0, #1
}
    44aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44ac:	00004315 	.word	0x00004315

000044b0 <dir_sdi>:
{
    44b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44b2:	0004      	movs	r4, r0
    44b4:	000d      	movs	r5, r1
	dj->index = idx;
    44b6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    44b8:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    44ba:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    44bc:	2901      	cmp	r1, #1
    44be:	d003      	beq.n	44c8 <dir_sdi+0x18>
    44c0:	6823      	ldr	r3, [r4, #0]
    44c2:	699a      	ldr	r2, [r3, #24]
    44c4:	4291      	cmp	r1, r2
    44c6:	d300      	bcc.n	44ca <dir_sdi+0x1a>
}
    44c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    44ca:	2900      	cmp	r1, #0
    44cc:	d119      	bne.n	4502 <dir_sdi+0x52>
    44ce:	781a      	ldrb	r2, [r3, #0]
    44d0:	2a03      	cmp	r2, #3
    44d2:	d013      	beq.n	44fc <dir_sdi+0x4c>
		dj->clust = clst;
    44d4:	2200      	movs	r2, #0
    44d6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    44d8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    44da:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    44dc:	42aa      	cmp	r2, r5
    44de:	d9f3      	bls.n	44c8 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    44e0:	092a      	lsrs	r2, r5, #4
    44e2:	b292      	uxth	r2, r2
    44e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44e6:	189b      	adds	r3, r3, r2
    44e8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    44ea:	6823      	ldr	r3, [r4, #0]
    44ec:	3330      	adds	r3, #48	; 0x30
    44ee:	220f      	movs	r2, #15
    44f0:	4015      	ands	r5, r2
    44f2:	016d      	lsls	r5, r5, #5
    44f4:	195d      	adds	r5, r3, r5
    44f6:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    44f8:	2000      	movs	r0, #0
    44fa:	e7e5      	b.n	44c8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    44fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    44fe:	2900      	cmp	r1, #0
    4500:	d0e8      	beq.n	44d4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    4502:	789e      	ldrb	r6, [r3, #2]
    4504:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    4506:	42b5      	cmp	r5, r6
    4508:	d313      	bcc.n	4532 <dir_sdi+0x82>
    450a:	1bad      	subs	r5, r5, r6
    450c:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    450e:	4f10      	ldr	r7, [pc, #64]	; (4550 <dir_sdi+0xa0>)
    4510:	e000      	b.n	4514 <dir_sdi+0x64>
    4512:	001d      	movs	r5, r3
    4514:	6820      	ldr	r0, [r4, #0]
    4516:	47b8      	blx	r7
    4518:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    451a:	1c43      	adds	r3, r0, #1
    451c:	d012      	beq.n	4544 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    451e:	2801      	cmp	r0, #1
    4520:	d912      	bls.n	4548 <dir_sdi+0x98>
    4522:	6823      	ldr	r3, [r4, #0]
    4524:	699b      	ldr	r3, [r3, #24]
    4526:	4298      	cmp	r0, r3
    4528:	d210      	bcs.n	454c <dir_sdi+0x9c>
    452a:	1bab      	subs	r3, r5, r6
    452c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    452e:	42b5      	cmp	r5, r6
    4530:	d2ef      	bcs.n	4512 <dir_sdi+0x62>
		dj->clust = clst;
    4532:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    4534:	6820      	ldr	r0, [r4, #0]
    4536:	4b07      	ldr	r3, [pc, #28]	; (4554 <dir_sdi+0xa4>)
    4538:	4798      	blx	r3
    453a:	092b      	lsrs	r3, r5, #4
    453c:	b29b      	uxth	r3, r3
    453e:	1818      	adds	r0, r3, r0
    4540:	6120      	str	r0, [r4, #16]
    4542:	e7d2      	b.n	44ea <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4544:	2001      	movs	r0, #1
    4546:	e7bf      	b.n	44c8 <dir_sdi+0x18>
				return FR_INT_ERR;
    4548:	2002      	movs	r0, #2
    454a:	e7bd      	b.n	44c8 <dir_sdi+0x18>
    454c:	2002      	movs	r0, #2
    454e:	e7bb      	b.n	44c8 <dir_sdi+0x18>
    4550:	000043b5 	.word	0x000043b5
    4554:	00003e5b 	.word	0x00003e5b

00004558 <put_fat>:
{
    4558:	b5f0      	push	{r4, r5, r6, r7, lr}
    455a:	46c6      	mov	lr, r8
    455c:	b500      	push	{lr}
    455e:	0007      	movs	r7, r0
    4560:	000c      	movs	r4, r1
    4562:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    4564:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4566:	2901      	cmp	r1, #1
    4568:	d902      	bls.n	4570 <put_fat+0x18>
    456a:	6983      	ldr	r3, [r0, #24]
    456c:	4299      	cmp	r1, r3
    456e:	d303      	bcc.n	4578 <put_fat+0x20>
}
    4570:	0028      	movs	r0, r5
    4572:	bc04      	pop	{r2}
    4574:	4690      	mov	r8, r2
    4576:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    4578:	7803      	ldrb	r3, [r0, #0]
    457a:	2b02      	cmp	r3, #2
    457c:	d053      	beq.n	4626 <put_fat+0xce>
    457e:	2b03      	cmp	r3, #3
    4580:	d063      	beq.n	464a <put_fat+0xf2>
			res = FR_INT_ERR;
    4582:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    4584:	2b01      	cmp	r3, #1
    4586:	d002      	beq.n	458e <put_fat+0x36>
		fs->wflag = 1;
    4588:	2301      	movs	r3, #1
    458a:	713b      	strb	r3, [r7, #4]
    458c:	e7f0      	b.n	4570 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    458e:	084b      	lsrs	r3, r1, #1
    4590:	4698      	mov	r8, r3
    4592:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4594:	4643      	mov	r3, r8
    4596:	0a59      	lsrs	r1, r3, #9
    4598:	6a03      	ldr	r3, [r0, #32]
    459a:	469c      	mov	ip, r3
    459c:	4461      	add	r1, ip
    459e:	4b3b      	ldr	r3, [pc, #236]	; (468c <put_fat+0x134>)
    45a0:	4798      	blx	r3
    45a2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    45a4:	d1f0      	bne.n	4588 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    45a6:	4643      	mov	r3, r8
    45a8:	05db      	lsls	r3, r3, #23
    45aa:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    45ac:	07e2      	lsls	r2, r4, #31
    45ae:	d51f      	bpl.n	45f0 <put_fat+0x98>
    45b0:	18fb      	adds	r3, r7, r3
    45b2:	3330      	adds	r3, #48	; 0x30
    45b4:	7819      	ldrb	r1, [r3, #0]
    45b6:	220f      	movs	r2, #15
    45b8:	400a      	ands	r2, r1
    45ba:	0131      	lsls	r1, r6, #4
    45bc:	20ff      	movs	r0, #255	; 0xff
    45be:	0100      	lsls	r0, r0, #4
    45c0:	4001      	ands	r1, r0
    45c2:	430a      	orrs	r2, r1
    45c4:	701a      	strb	r2, [r3, #0]
			bc++;
    45c6:	4644      	mov	r4, r8
    45c8:	3401      	adds	r4, #1
			fs->wflag = 1;
    45ca:	2301      	movs	r3, #1
    45cc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    45ce:	0a61      	lsrs	r1, r4, #9
    45d0:	6a3b      	ldr	r3, [r7, #32]
    45d2:	469c      	mov	ip, r3
    45d4:	4461      	add	r1, ip
    45d6:	0038      	movs	r0, r7
    45d8:	4b2c      	ldr	r3, [pc, #176]	; (468c <put_fat+0x134>)
    45da:	4798      	blx	r3
			if (res != FR_OK) break;
    45dc:	2800      	cmp	r0, #0
    45de:	d151      	bne.n	4684 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    45e0:	05e4      	lsls	r4, r4, #23
    45e2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    45e4:	0936      	lsrs	r6, r6, #4
    45e6:	b2f6      	uxtb	r6, r6
    45e8:	193c      	adds	r4, r7, r4
    45ea:	3430      	adds	r4, #48	; 0x30
    45ec:	7026      	strb	r6, [r4, #0]
			break;
    45ee:	e7cb      	b.n	4588 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    45f0:	18fb      	adds	r3, r7, r3
    45f2:	3330      	adds	r3, #48	; 0x30
    45f4:	701e      	strb	r6, [r3, #0]
			bc++;
    45f6:	4644      	mov	r4, r8
    45f8:	3401      	adds	r4, #1
			fs->wflag = 1;
    45fa:	2301      	movs	r3, #1
    45fc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    45fe:	0a61      	lsrs	r1, r4, #9
    4600:	6a3b      	ldr	r3, [r7, #32]
    4602:	469c      	mov	ip, r3
    4604:	4461      	add	r1, ip
    4606:	0038      	movs	r0, r7
    4608:	4b20      	ldr	r3, [pc, #128]	; (468c <put_fat+0x134>)
    460a:	4798      	blx	r3
			if (res != FR_OK) break;
    460c:	2800      	cmp	r0, #0
    460e:	d13b      	bne.n	4688 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    4610:	05e4      	lsls	r4, r4, #23
    4612:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4614:	193b      	adds	r3, r7, r4
    4616:	3330      	adds	r3, #48	; 0x30
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	220f      	movs	r2, #15
    461c:	4393      	bics	r3, r2
    461e:	0536      	lsls	r6, r6, #20
    4620:	0f36      	lsrs	r6, r6, #28
    4622:	431e      	orrs	r6, r3
    4624:	e7e0      	b.n	45e8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4626:	0a09      	lsrs	r1, r1, #8
    4628:	6a03      	ldr	r3, [r0, #32]
    462a:	469c      	mov	ip, r3
    462c:	4461      	add	r1, ip
    462e:	4b17      	ldr	r3, [pc, #92]	; (468c <put_fat+0x134>)
    4630:	4798      	blx	r3
    4632:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4634:	d1a8      	bne.n	4588 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    4636:	0063      	lsls	r3, r4, #1
    4638:	24ff      	movs	r4, #255	; 0xff
    463a:	0064      	lsls	r4, r4, #1
    463c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    463e:	18fb      	adds	r3, r7, r3
    4640:	3330      	adds	r3, #48	; 0x30
    4642:	701e      	strb	r6, [r3, #0]
    4644:	0a36      	lsrs	r6, r6, #8
    4646:	705e      	strb	r6, [r3, #1]
			break;
    4648:	e79e      	b.n	4588 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    464a:	09c9      	lsrs	r1, r1, #7
    464c:	6a03      	ldr	r3, [r0, #32]
    464e:	469c      	mov	ip, r3
    4650:	4461      	add	r1, ip
    4652:	4b0e      	ldr	r3, [pc, #56]	; (468c <put_fat+0x134>)
    4654:	4798      	blx	r3
    4656:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4658:	d196      	bne.n	4588 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    465a:	00a4      	lsls	r4, r4, #2
    465c:	23fe      	movs	r3, #254	; 0xfe
    465e:	005b      	lsls	r3, r3, #1
    4660:	401c      	ands	r4, r3
    4662:	0022      	movs	r2, r4
    4664:	3230      	adds	r2, #48	; 0x30
    4666:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    4668:	78d3      	ldrb	r3, [r2, #3]
    466a:	193c      	adds	r4, r7, r4
    466c:	3430      	adds	r4, #48	; 0x30
    466e:	091b      	lsrs	r3, r3, #4
    4670:	071b      	lsls	r3, r3, #28
    4672:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    4674:	7026      	strb	r6, [r4, #0]
    4676:	0a33      	lsrs	r3, r6, #8
    4678:	7053      	strb	r3, [r2, #1]
    467a:	0c33      	lsrs	r3, r6, #16
    467c:	7093      	strb	r3, [r2, #2]
    467e:	0e36      	lsrs	r6, r6, #24
    4680:	70d6      	strb	r6, [r2, #3]
			break;
    4682:	e781      	b.n	4588 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4684:	0005      	movs	r5, r0
    4686:	e77f      	b.n	4588 <put_fat+0x30>
    4688:	0005      	movs	r5, r0
    468a:	e77d      	b.n	4588 <put_fat+0x30>
    468c:	00004315 	.word	0x00004315

00004690 <create_chain>:
{
    4690:	b5f0      	push	{r4, r5, r6, r7, lr}
    4692:	46c6      	mov	lr, r8
    4694:	b500      	push	{lr}
    4696:	0005      	movs	r5, r0
    4698:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    469a:	2900      	cmp	r1, #0
    469c:	d107      	bne.n	46ae <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    469e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    46a0:	2e00      	cmp	r6, #0
    46a2:	d00d      	beq.n	46c0 <create_chain+0x30>
    46a4:	6983      	ldr	r3, [r0, #24]
    46a6:	429e      	cmp	r6, r3
    46a8:	d30b      	bcc.n	46c2 <create_chain+0x32>
    46aa:	2601      	movs	r6, #1
    46ac:	e009      	b.n	46c2 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    46ae:	4b26      	ldr	r3, [pc, #152]	; (4748 <create_chain+0xb8>)
    46b0:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    46b2:	2801      	cmp	r0, #1
    46b4:	d93d      	bls.n	4732 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    46b6:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    46b8:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    46ba:	4298      	cmp	r0, r3
    46bc:	d201      	bcs.n	46c2 <create_chain+0x32>
    46be:	e03d      	b.n	473c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    46c0:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    46c2:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    46c4:	4f20      	ldr	r7, [pc, #128]	; (4748 <create_chain+0xb8>)
    46c6:	e00a      	b.n	46de <create_chain+0x4e>
    46c8:	0021      	movs	r1, r4
    46ca:	0028      	movs	r0, r5
    46cc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    46ce:	2800      	cmp	r0, #0
    46d0:	d00d      	beq.n	46ee <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    46d2:	1c43      	adds	r3, r0, #1
    46d4:	d032      	beq.n	473c <create_chain+0xac>
    46d6:	2801      	cmp	r0, #1
    46d8:	d030      	beq.n	473c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    46da:	42b4      	cmp	r4, r6
    46dc:	d02d      	beq.n	473a <create_chain+0xaa>
		ncl++;							/* Next cluster */
    46de:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    46e0:	69ab      	ldr	r3, [r5, #24]
    46e2:	429c      	cmp	r4, r3
    46e4:	d3f0      	bcc.n	46c8 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    46e6:	2e01      	cmp	r6, #1
    46e8:	d925      	bls.n	4736 <create_chain+0xa6>
			ncl = 2;
    46ea:	2402      	movs	r4, #2
    46ec:	e7ec      	b.n	46c8 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    46ee:	4a17      	ldr	r2, [pc, #92]	; (474c <create_chain+0xbc>)
    46f0:	0021      	movs	r1, r4
    46f2:	0028      	movs	r0, r5
    46f4:	4b16      	ldr	r3, [pc, #88]	; (4750 <create_chain+0xc0>)
    46f6:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    46f8:	2800      	cmp	r0, #0
    46fa:	d113      	bne.n	4724 <create_chain+0x94>
    46fc:	4643      	mov	r3, r8
    46fe:	2b00      	cmp	r3, #0
    4700:	d109      	bne.n	4716 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    4702:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4704:	692b      	ldr	r3, [r5, #16]
    4706:	1c5a      	adds	r2, r3, #1
    4708:	d01b      	beq.n	4742 <create_chain+0xb2>
			fs->free_clust--;
    470a:	3b01      	subs	r3, #1
    470c:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    470e:	2301      	movs	r3, #1
    4710:	716b      	strb	r3, [r5, #5]
    4712:	0020      	movs	r0, r4
    4714:	e012      	b.n	473c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4716:	0022      	movs	r2, r4
    4718:	4641      	mov	r1, r8
    471a:	0028      	movs	r0, r5
    471c:	4b0c      	ldr	r3, [pc, #48]	; (4750 <create_chain+0xc0>)
    471e:	4798      	blx	r3
	if (res == FR_OK) {
    4720:	2800      	cmp	r0, #0
    4722:	d0ee      	beq.n	4702 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4724:	3801      	subs	r0, #1
    4726:	4242      	negs	r2, r0
    4728:	4142      	adcs	r2, r0
    472a:	4250      	negs	r0, r2
    472c:	2301      	movs	r3, #1
    472e:	4318      	orrs	r0, r3
    4730:	e004      	b.n	473c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    4732:	2001      	movs	r0, #1
    4734:	e002      	b.n	473c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    4736:	2000      	movs	r0, #0
    4738:	e000      	b.n	473c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    473a:	2000      	movs	r0, #0
}
    473c:	bc04      	pop	{r2}
    473e:	4690      	mov	r8, r2
    4740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4742:	0020      	movs	r0, r4
    4744:	e7fa      	b.n	473c <create_chain+0xac>
    4746:	46c0      	nop			; (mov r8, r8)
    4748:	000043b5 	.word	0x000043b5
    474c:	0fffffff 	.word	0x0fffffff
    4750:	00004559 	.word	0x00004559

00004754 <remove_chain>:
{
    4754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4756:	46ce      	mov	lr, r9
    4758:	4647      	mov	r7, r8
    475a:	b580      	push	{r7, lr}
    475c:	0004      	movs	r4, r0
    475e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    4760:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4762:	2901      	cmp	r1, #1
    4764:	d902      	bls.n	476c <remove_chain+0x18>
    4766:	69a3      	ldr	r3, [r4, #24]
    4768:	4299      	cmp	r1, r3
    476a:	d303      	bcc.n	4774 <remove_chain+0x20>
}
    476c:	bc0c      	pop	{r2, r3}
    476e:	4690      	mov	r8, r2
    4770:	4699      	mov	r9, r3
    4772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4774:	4f13      	ldr	r7, [pc, #76]	; (47c4 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4776:	4b14      	ldr	r3, [pc, #80]	; (47c8 <remove_chain+0x74>)
    4778:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    477a:	2301      	movs	r3, #1
    477c:	4699      	mov	r9, r3
    477e:	e003      	b.n	4788 <remove_chain+0x34>
    4780:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    4782:	69a3      	ldr	r3, [r4, #24]
    4784:	42b3      	cmp	r3, r6
    4786:	d9f1      	bls.n	476c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    4788:	0029      	movs	r1, r5
    478a:	0020      	movs	r0, r4
    478c:	47b8      	blx	r7
    478e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    4790:	d011      	beq.n	47b6 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4792:	2801      	cmp	r0, #1
    4794:	d011      	beq.n	47ba <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4796:	1c43      	adds	r3, r0, #1
    4798:	d011      	beq.n	47be <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    479a:	2200      	movs	r2, #0
    479c:	0029      	movs	r1, r5
    479e:	0020      	movs	r0, r4
    47a0:	47c0      	blx	r8
			if (res != FR_OK) break;
    47a2:	2800      	cmp	r0, #0
    47a4:	d1e2      	bne.n	476c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    47a6:	6923      	ldr	r3, [r4, #16]
    47a8:	1c5a      	adds	r2, r3, #1
    47aa:	d0e9      	beq.n	4780 <remove_chain+0x2c>
				fs->free_clust++;
    47ac:	3301      	adds	r3, #1
    47ae:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    47b0:	464b      	mov	r3, r9
    47b2:	7163      	strb	r3, [r4, #5]
    47b4:	e7e4      	b.n	4780 <remove_chain+0x2c>
    47b6:	2000      	movs	r0, #0
    47b8:	e7d8      	b.n	476c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    47ba:	2002      	movs	r0, #2
    47bc:	e7d6      	b.n	476c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    47be:	2001      	movs	r0, #1
    47c0:	e7d4      	b.n	476c <remove_chain+0x18>
    47c2:	46c0      	nop			; (mov r8, r8)
    47c4:	000043b5 	.word	0x000043b5
    47c8:	00004559 	.word	0x00004559

000047cc <dir_next>:
{
    47cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ce:	46d6      	mov	lr, sl
    47d0:	4647      	mov	r7, r8
    47d2:	b580      	push	{r7, lr}
    47d4:	0006      	movs	r6, r0
    47d6:	000d      	movs	r5, r1
	i = dj->index + 1;
    47d8:	88c4      	ldrh	r4, [r0, #6]
    47da:	3401      	adds	r4, #1
    47dc:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    47de:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    47e0:	2c00      	cmp	r4, #0
    47e2:	d103      	bne.n	47ec <dir_next+0x20>
}
    47e4:	bc0c      	pop	{r2, r3}
    47e6:	4690      	mov	r8, r2
    47e8:	469a      	mov	sl, r3
    47ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    47ec:	6933      	ldr	r3, [r6, #16]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d0f8      	beq.n	47e4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    47f2:	270f      	movs	r7, #15
    47f4:	4027      	ands	r7, r4
    47f6:	d10f      	bne.n	4818 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    47f8:	3301      	adds	r3, #1
    47fa:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    47fc:	68f1      	ldr	r1, [r6, #12]
    47fe:	2900      	cmp	r1, #0
    4800:	d104      	bne.n	480c <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    4802:	6833      	ldr	r3, [r6, #0]
    4804:	891b      	ldrh	r3, [r3, #8]
    4806:	42a3      	cmp	r3, r4
    4808:	d9ec      	bls.n	47e4 <dir_next+0x18>
    480a:	e005      	b.n	4818 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    480c:	6830      	ldr	r0, [r6, #0]
    480e:	7883      	ldrb	r3, [r0, #2]
    4810:	3b01      	subs	r3, #1
    4812:	0922      	lsrs	r2, r4, #4
    4814:	421a      	tst	r2, r3
    4816:	d007      	beq.n	4828 <dir_next+0x5c>
	dj->index = i;
    4818:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    481a:	6833      	ldr	r3, [r6, #0]
    481c:	3330      	adds	r3, #48	; 0x30
    481e:	017f      	lsls	r7, r7, #5
    4820:	19df      	adds	r7, r3, r7
    4822:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4824:	2000      	movs	r0, #0
    4826:	e7dd      	b.n	47e4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4828:	4b2c      	ldr	r3, [pc, #176]	; (48dc <dir_next+0x110>)
    482a:	4798      	blx	r3
    482c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    482e:	2002      	movs	r0, #2
    4830:	4643      	mov	r3, r8
    4832:	2b01      	cmp	r3, #1
    4834:	d9d6      	bls.n	47e4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4836:	3301      	adds	r3, #1
    4838:	d04b      	beq.n	48d2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    483a:	6833      	ldr	r3, [r6, #0]
    483c:	699a      	ldr	r2, [r3, #24]
    483e:	4590      	cmp	r8, r2
    4840:	d33f      	bcc.n	48c2 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    4842:	3002      	adds	r0, #2
    4844:	2d00      	cmp	r5, #0
    4846:	d0cd      	beq.n	47e4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    4848:	68f1      	ldr	r1, [r6, #12]
    484a:	0018      	movs	r0, r3
    484c:	4b24      	ldr	r3, [pc, #144]	; (48e0 <dir_next+0x114>)
    484e:	4798      	blx	r3
    4850:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4852:	2007      	movs	r0, #7
    4854:	4643      	mov	r3, r8
    4856:	2b00      	cmp	r3, #0
    4858:	d0c4      	beq.n	47e4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    485a:	3805      	subs	r0, #5
    485c:	2b01      	cmp	r3, #1
    485e:	d0c1      	beq.n	47e4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4860:	3801      	subs	r0, #1
    4862:	3301      	adds	r3, #1
    4864:	d0be      	beq.n	47e4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    4866:	2100      	movs	r1, #0
    4868:	6830      	ldr	r0, [r6, #0]
    486a:	4b1e      	ldr	r3, [pc, #120]	; (48e4 <dir_next+0x118>)
    486c:	4798      	blx	r3
    486e:	0003      	movs	r3, r0
    4870:	2001      	movs	r0, #1
    4872:	2b00      	cmp	r3, #0
    4874:	d1b6      	bne.n	47e4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    4876:	6830      	ldr	r0, [r6, #0]
    4878:	3030      	adds	r0, #48	; 0x30
    487a:	2280      	movs	r2, #128	; 0x80
    487c:	0092      	lsls	r2, r2, #2
    487e:	2100      	movs	r1, #0
    4880:	4b19      	ldr	r3, [pc, #100]	; (48e8 <dir_next+0x11c>)
    4882:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    4884:	6835      	ldr	r5, [r6, #0]
    4886:	4641      	mov	r1, r8
    4888:	0028      	movs	r0, r5
    488a:	4b18      	ldr	r3, [pc, #96]	; (48ec <dir_next+0x120>)
    488c:	4798      	blx	r3
    488e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4890:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    4892:	2301      	movs	r3, #1
    4894:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4896:	6833      	ldr	r3, [r6, #0]
    4898:	789a      	ldrb	r2, [r3, #2]
    489a:	42aa      	cmp	r2, r5
    489c:	d90e      	bls.n	48bc <dir_next+0xf0>
						dj->fs->wflag = 1;
    489e:	4652      	mov	r2, sl
    48a0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    48a2:	2100      	movs	r1, #0
    48a4:	6830      	ldr	r0, [r6, #0]
    48a6:	4b0f      	ldr	r3, [pc, #60]	; (48e4 <dir_next+0x118>)
    48a8:	4798      	blx	r3
    48aa:	2800      	cmp	r0, #0
    48ac:	d113      	bne.n	48d6 <dir_next+0x10a>
						dj->fs->winsect++;
    48ae:	6832      	ldr	r2, [r6, #0]
    48b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    48b2:	3301      	adds	r3, #1
    48b4:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    48b6:	3501      	adds	r5, #1
    48b8:	b2ed      	uxtb	r5, r5
    48ba:	e7ec      	b.n	4896 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    48bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48be:	1b52      	subs	r2, r2, r5
    48c0:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    48c2:	4643      	mov	r3, r8
    48c4:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    48c6:	4641      	mov	r1, r8
    48c8:	6830      	ldr	r0, [r6, #0]
    48ca:	4b08      	ldr	r3, [pc, #32]	; (48ec <dir_next+0x120>)
    48cc:	4798      	blx	r3
    48ce:	6130      	str	r0, [r6, #16]
    48d0:	e7a2      	b.n	4818 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    48d2:	2001      	movs	r0, #1
    48d4:	e786      	b.n	47e4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    48d6:	2001      	movs	r0, #1
    48d8:	e784      	b.n	47e4 <dir_next+0x18>
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	000043b5 	.word	0x000043b5
    48e0:	00004691 	.word	0x00004691
    48e4:	00004315 	.word	0x00004315
    48e8:	00003e49 	.word	0x00003e49
    48ec:	00003e5b 	.word	0x00003e5b

000048f0 <dir_find>:
{
    48f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    48f2:	46de      	mov	lr, fp
    48f4:	4657      	mov	r7, sl
    48f6:	464e      	mov	r6, r9
    48f8:	4645      	mov	r5, r8
    48fa:	b5e0      	push	{r5, r6, r7, lr}
    48fc:	b083      	sub	sp, #12
    48fe:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    4900:	2100      	movs	r1, #0
    4902:	4b5a      	ldr	r3, [pc, #360]	; (4a6c <dir_find+0x17c>)
    4904:	4798      	blx	r3
    4906:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4908:	d000      	beq.n	490c <dir_find+0x1c>
    490a:	e09e      	b.n	4a4a <dir_find+0x15a>
    490c:	23ff      	movs	r3, #255	; 0xff
    490e:	4699      	mov	r9, r3
    4910:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    4912:	4b57      	ldr	r3, [pc, #348]	; (4a70 <dir_find+0x180>)
    4914:	469b      	mov	fp, r3
    4916:	e01b      	b.n	4950 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4918:	2b0f      	cmp	r3, #15
    491a:	d030      	beq.n	497e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    491c:	4653      	mov	r3, sl
    491e:	2b00      	cmp	r3, #0
    4920:	d105      	bne.n	492e <dir_find+0x3e>
    4922:	0020      	movs	r0, r4
    4924:	4b53      	ldr	r3, [pc, #332]	; (4a74 <dir_find+0x184>)
    4926:	4798      	blx	r3
    4928:	4581      	cmp	r9, r0
    492a:	d100      	bne.n	492e <dir_find+0x3e>
    492c:	e08d      	b.n	4a4a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    492e:	2301      	movs	r3, #1
    4930:	425b      	negs	r3, r3
    4932:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    4934:	69a8      	ldr	r0, [r5, #24]
    4936:	7ac3      	ldrb	r3, [r0, #11]
    4938:	07db      	lsls	r3, r3, #31
    493a:	d400      	bmi.n	493e <dir_find+0x4e>
    493c:	e07d      	b.n	4a3a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    493e:	23ff      	movs	r3, #255	; 0xff
    4940:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    4942:	2100      	movs	r1, #0
    4944:	0028      	movs	r0, r5
    4946:	4b4c      	ldr	r3, [pc, #304]	; (4a78 <dir_find+0x188>)
    4948:	4798      	blx	r3
    494a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    494c:	d000      	beq.n	4950 <dir_find+0x60>
    494e:	e07c      	b.n	4a4a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    4950:	6929      	ldr	r1, [r5, #16]
    4952:	6828      	ldr	r0, [r5, #0]
    4954:	47d8      	blx	fp
    4956:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    4958:	d177      	bne.n	4a4a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    495a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    495c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    495e:	2e00      	cmp	r6, #0
    4960:	d100      	bne.n	4964 <dir_find+0x74>
    4962:	e080      	b.n	4a66 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    4964:	7ae2      	ldrb	r2, [r4, #11]
    4966:	233f      	movs	r3, #63	; 0x3f
    4968:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    496a:	2ee5      	cmp	r6, #229	; 0xe5
    496c:	d100      	bne.n	4970 <dir_find+0x80>
    496e:	e077      	b.n	4a60 <dir_find+0x170>
    4970:	0712      	lsls	r2, r2, #28
    4972:	d5d1      	bpl.n	4918 <dir_find+0x28>
    4974:	2b0f      	cmp	r3, #15
    4976:	d002      	beq.n	497e <dir_find+0x8e>
			ord = 0xFF;
    4978:	23ff      	movs	r3, #255	; 0xff
    497a:	469a      	mov	sl, r3
    497c:	e7e1      	b.n	4942 <dir_find+0x52>
				if (dj->lfn) {
    497e:	69ef      	ldr	r7, [r5, #28]
    4980:	2f00      	cmp	r7, #0
    4982:	d0de      	beq.n	4942 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    4984:	0673      	lsls	r3, r6, #25
    4986:	d518      	bpl.n	49ba <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    4988:	7b63      	ldrb	r3, [r4, #13]
    498a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    498c:	2340      	movs	r3, #64	; 0x40
    498e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    4990:	88eb      	ldrh	r3, [r5, #6]
    4992:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4994:	7b63      	ldrb	r3, [r4, #13]
    4996:	9300      	str	r3, [sp, #0]
    4998:	22ff      	movs	r2, #255	; 0xff
    499a:	4692      	mov	sl, r2
    499c:	454b      	cmp	r3, r9
    499e:	d1d0      	bne.n	4942 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    49a0:	7823      	ldrb	r3, [r4, #0]
    49a2:	3abf      	subs	r2, #191	; 0xbf
    49a4:	4393      	bics	r3, r2
    49a6:	3b01      	subs	r3, #1
    49a8:	005a      	lsls	r2, r3, #1
    49aa:	18d2      	adds	r2, r2, r3
    49ac:	0092      	lsls	r2, r2, #2
    49ae:	4692      	mov	sl, r2
    49b0:	449a      	add	sl, r3
	s = 0; wc = 1;
    49b2:	2201      	movs	r2, #1
    49b4:	2300      	movs	r3, #0
    49b6:	4699      	mov	r9, r3
    49b8:	e01d      	b.n	49f6 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    49ba:	45b2      	cmp	sl, r6
    49bc:	d0ea      	beq.n	4994 <dir_find+0xa4>
    49be:	23ff      	movs	r3, #255	; 0xff
    49c0:	469a      	mov	sl, r3
    49c2:	e7be      	b.n	4942 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    49c4:	4b2d      	ldr	r3, [pc, #180]	; (4a7c <dir_find+0x18c>)
    49c6:	4798      	blx	r3
    49c8:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    49ca:	4653      	mov	r3, sl
    49cc:	2bfe      	cmp	r3, #254	; 0xfe
    49ce:	d81f      	bhi.n	4a10 <dir_find+0x120>
    49d0:	2301      	movs	r3, #1
    49d2:	4453      	add	r3, sl
    49d4:	4698      	mov	r8, r3
    49d6:	4653      	mov	r3, sl
    49d8:	005b      	lsls	r3, r3, #1
    49da:	5bd8      	ldrh	r0, [r3, r7]
    49dc:	4b27      	ldr	r3, [pc, #156]	; (4a7c <dir_find+0x18c>)
    49de:	4798      	blx	r3
    49e0:	0002      	movs	r2, r0
    49e2:	9b01      	ldr	r3, [sp, #4]
    49e4:	4283      	cmp	r3, r0
    49e6:	d113      	bne.n	4a10 <dir_find+0x120>
    49e8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    49ea:	2301      	movs	r3, #1
    49ec:	469c      	mov	ip, r3
    49ee:	44e1      	add	r9, ip
    49f0:	464b      	mov	r3, r9
    49f2:	2b0d      	cmp	r3, #13
    49f4:	d011      	beq.n	4a1a <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    49f6:	4b22      	ldr	r3, [pc, #136]	; (4a80 <dir_find+0x190>)
    49f8:	4649      	mov	r1, r9
    49fa:	5cc9      	ldrb	r1, [r1, r3]
    49fc:	1863      	adds	r3, r4, r1
    49fe:	785b      	ldrb	r3, [r3, #1]
    4a00:	021b      	lsls	r3, r3, #8
    4a02:	5c60      	ldrb	r0, [r4, r1]
    4a04:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4a06:	2a00      	cmp	r2, #0
    4a08:	d1dc      	bne.n	49c4 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4a0a:	4b1e      	ldr	r3, [pc, #120]	; (4a84 <dir_find+0x194>)
    4a0c:	4298      	cmp	r0, r3
    4a0e:	d0ec      	beq.n	49ea <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4a10:	9b00      	ldr	r3, [sp, #0]
    4a12:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4a14:	23ff      	movs	r3, #255	; 0xff
    4a16:	469a      	mov	sl, r3
    4a18:	e793      	b.n	4942 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4a1a:	7823      	ldrb	r3, [r4, #0]
    4a1c:	065b      	lsls	r3, r3, #25
    4a1e:	d506      	bpl.n	4a2e <dir_find+0x13e>
    4a20:	2a00      	cmp	r2, #0
    4a22:	d004      	beq.n	4a2e <dir_find+0x13e>
    4a24:	4653      	mov	r3, sl
    4a26:	005b      	lsls	r3, r3, #1
    4a28:	5bdb      	ldrh	r3, [r3, r7]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d1f0      	bne.n	4a10 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4a2e:	3e01      	subs	r6, #1
    4a30:	b2f3      	uxtb	r3, r6
    4a32:	469a      	mov	sl, r3
    4a34:	9b00      	ldr	r3, [sp, #0]
    4a36:	4699      	mov	r9, r3
    4a38:	e783      	b.n	4942 <dir_find+0x52>
    4a3a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    4a3c:	5ce1      	ldrb	r1, [r4, r3]
    4a3e:	5cc2      	ldrb	r2, [r0, r3]
    4a40:	4291      	cmp	r1, r2
    4a42:	d10a      	bne.n	4a5a <dir_find+0x16a>
    4a44:	3301      	adds	r3, #1
    4a46:	2b0b      	cmp	r3, #11
    4a48:	d1f8      	bne.n	4a3c <dir_find+0x14c>
}
    4a4a:	0038      	movs	r0, r7
    4a4c:	b003      	add	sp, #12
    4a4e:	bc3c      	pop	{r2, r3, r4, r5}
    4a50:	4690      	mov	r8, r2
    4a52:	4699      	mov	r9, r3
    4a54:	46a2      	mov	sl, r4
    4a56:	46ab      	mov	fp, r5
    4a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    4a5a:	23ff      	movs	r3, #255	; 0xff
    4a5c:	469a      	mov	sl, r3
    4a5e:	e770      	b.n	4942 <dir_find+0x52>
			ord = 0xFF;
    4a60:	23ff      	movs	r3, #255	; 0xff
    4a62:	469a      	mov	sl, r3
    4a64:	e76d      	b.n	4942 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4a66:	2704      	movs	r7, #4
    4a68:	e7ef      	b.n	4a4a <dir_find+0x15a>
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	000044b1 	.word	0x000044b1
    4a70:	00004315 	.word	0x00004315
    4a74:	00003e73 	.word	0x00003e73
    4a78:	000047cd 	.word	0x000047cd
    4a7c:	00005809 	.word	0x00005809
    4a80:	0000a420 	.word	0x0000a420
    4a84:	0000ffff 	.word	0x0000ffff

00004a88 <dir_register>:
{
    4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a8a:	46de      	mov	lr, fp
    4a8c:	4657      	mov	r7, sl
    4a8e:	464e      	mov	r6, r9
    4a90:	4645      	mov	r5, r8
    4a92:	b5e0      	push	{r5, r6, r7, lr}
    4a94:	b089      	sub	sp, #36	; 0x24
    4a96:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4a98:	6987      	ldr	r7, [r0, #24]
    4a9a:	69c3      	ldr	r3, [r0, #28]
    4a9c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    4a9e:	ad05      	add	r5, sp, #20
    4aa0:	220c      	movs	r2, #12
    4aa2:	0039      	movs	r1, r7
    4aa4:	0028      	movs	r0, r5
    4aa6:	4ba7      	ldr	r3, [pc, #668]	; (4d44 <dir_register+0x2bc>)
    4aa8:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4aaa:	7aeb      	ldrb	r3, [r5, #11]
    4aac:	07db      	lsls	r3, r3, #31
    4aae:	d400      	bmi.n	4ab2 <dir_register+0x2a>
    4ab0:	e070      	b.n	4b94 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    4ab2:	2300      	movs	r3, #0
    4ab4:	72fb      	strb	r3, [r7, #11]
    4ab6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4ab8:	220b      	movs	r2, #11
    4aba:	a905      	add	r1, sp, #20
    4abc:	0038      	movs	r0, r7
    4abe:	4ba1      	ldr	r3, [pc, #644]	; (4d44 <dir_register+0x2bc>)
    4ac0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4ac2:	2301      	movs	r3, #1
		ns[i--] = c;
    4ac4:	ad03      	add	r5, sp, #12
    4ac6:	001e      	movs	r6, r3
    4ac8:	46a0      	mov	r8, r4
    4aca:	e049      	b.n	4b60 <dir_register+0xd8>
    4acc:	3801      	subs	r0, #1
    4ace:	1829      	adds	r1, r5, r0
    4ad0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    4ad2:	091b      	lsrs	r3, r3, #4
    4ad4:	b29b      	uxth	r3, r3
	} while (seq);
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d007      	beq.n	4aea <dir_register+0x62>
		c = (seq % 16) + '0';
    4ada:	0021      	movs	r1, r4
    4adc:	4019      	ands	r1, r3
    4ade:	000a      	movs	r2, r1
    4ae0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4ae2:	2a39      	cmp	r2, #57	; 0x39
    4ae4:	d9f2      	bls.n	4acc <dir_register+0x44>
    4ae6:	3207      	adds	r2, #7
    4ae8:	e7f0      	b.n	4acc <dir_register+0x44>
	ns[i] = '~';
    4aea:	337e      	adds	r3, #126	; 0x7e
    4aec:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    4aee:	2800      	cmp	r0, #0
    4af0:	d00a      	beq.n	4b08 <dir_register+0x80>
    4af2:	783b      	ldrb	r3, [r7, #0]
    4af4:	2b20      	cmp	r3, #32
    4af6:	d009      	beq.n	4b0c <dir_register+0x84>
    4af8:	2300      	movs	r3, #0
    4afa:	3301      	adds	r3, #1
    4afc:	4298      	cmp	r0, r3
    4afe:	d007      	beq.n	4b10 <dir_register+0x88>
    4b00:	5cfa      	ldrb	r2, [r7, r3]
    4b02:	2a20      	cmp	r2, #32
    4b04:	d1f9      	bne.n	4afa <dir_register+0x72>
    4b06:	e009      	b.n	4b1c <dir_register+0x94>
    4b08:	0003      	movs	r3, r0
    4b0a:	e007      	b.n	4b1c <dir_register+0x94>
    4b0c:	2300      	movs	r3, #0
    4b0e:	e005      	b.n	4b1c <dir_register+0x94>
    4b10:	0003      	movs	r3, r0
    4b12:	e003      	b.n	4b1c <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4b14:	54fa      	strb	r2, [r7, r3]
    4b16:	3301      	adds	r3, #1
	} while (j < 8);
    4b18:	2b07      	cmp	r3, #7
    4b1a:	d805      	bhi.n	4b28 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4b1c:	2220      	movs	r2, #32
    4b1e:	2807      	cmp	r0, #7
    4b20:	d8f8      	bhi.n	4b14 <dir_register+0x8c>
    4b22:	5c2a      	ldrb	r2, [r5, r0]
    4b24:	3001      	adds	r0, #1
    4b26:	e7f5      	b.n	4b14 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4b28:	4640      	mov	r0, r8
    4b2a:	4b87      	ldr	r3, [pc, #540]	; (4d48 <dir_register+0x2c0>)
    4b2c:	4798      	blx	r3
			if (res != FR_OK) break;
    4b2e:	2800      	cmp	r0, #0
    4b30:	d11c      	bne.n	4b6c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    4b32:	3601      	adds	r6, #1
    4b34:	b2b6      	uxth	r6, r6
    4b36:	2e64      	cmp	r6, #100	; 0x64
    4b38:	d015      	beq.n	4b66 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    4b3a:	220b      	movs	r2, #11
    4b3c:	a905      	add	r1, sp, #20
    4b3e:	0038      	movs	r0, r7
    4b40:	4b80      	ldr	r3, [pc, #512]	; (4d44 <dir_register+0x2bc>)
    4b42:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    4b44:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    4b46:	2e05      	cmp	r6, #5
    4b48:	d90a      	bls.n	4b60 <dir_register+0xd8>
    4b4a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    4b4c:	085a      	lsrs	r2, r3, #1
    4b4e:	03db      	lsls	r3, r3, #15
    4b50:	4313      	orrs	r3, r2
    4b52:	880a      	ldrh	r2, [r1, #0]
    4b54:	189b      	adds	r3, r3, r2
    4b56:	b29b      	uxth	r3, r3
    4b58:	3102      	adds	r1, #2
    4b5a:	880a      	ldrh	r2, [r1, #0]
    4b5c:	2a00      	cmp	r2, #0
    4b5e:	d1f5      	bne.n	4b4c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    4b60:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    4b62:	240f      	movs	r4, #15
    4b64:	e7b9      	b.n	4ada <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4b66:	2307      	movs	r3, #7
    4b68:	4698      	mov	r8, r3
    4b6a:	e006      	b.n	4b7a <dir_register+0xf2>
    4b6c:	4644      	mov	r4, r8
    4b6e:	4680      	mov	r8, r0
    4b70:	2e64      	cmp	r6, #100	; 0x64
    4b72:	d100      	bne.n	4b76 <dir_register+0xee>
    4b74:	e0a5      	b.n	4cc2 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4b76:	2804      	cmp	r0, #4
    4b78:	d007      	beq.n	4b8a <dir_register+0x102>
}
    4b7a:	4640      	mov	r0, r8
    4b7c:	b009      	add	sp, #36	; 0x24
    4b7e:	bc3c      	pop	{r2, r3, r4, r5}
    4b80:	4690      	mov	r8, r2
    4b82:	4699      	mov	r9, r3
    4b84:	46a2      	mov	sl, r4
    4b86:	46ab      	mov	fp, r5
    4b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    4b8a:	ab05      	add	r3, sp, #20
    4b8c:	7adb      	ldrb	r3, [r3, #11]
    4b8e:	72fb      	strb	r3, [r7, #11]
    4b90:	4653      	mov	r3, sl
    4b92:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4b94:	ab05      	add	r3, sp, #20
    4b96:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4b98:	2201      	movs	r2, #1
    4b9a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4b9c:	079b      	lsls	r3, r3, #30
    4b9e:	d511      	bpl.n	4bc4 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    4ba0:	4653      	mov	r3, sl
    4ba2:	881b      	ldrh	r3, [r3, #0]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d01b      	beq.n	4be0 <dir_register+0x158>
    4ba8:	2000      	movs	r0, #0
    4baa:	4652      	mov	r2, sl
    4bac:	3001      	adds	r0, #1
    4bae:	b280      	uxth	r0, r0
    4bb0:	0043      	lsls	r3, r0, #1
    4bb2:	5a9b      	ldrh	r3, [r3, r2]
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	d1f9      	bne.n	4bac <dir_register+0x124>
		ne = (ne + 25) / 13;
    4bb8:	3019      	adds	r0, #25
    4bba:	210d      	movs	r1, #13
    4bbc:	4b63      	ldr	r3, [pc, #396]	; (4d4c <dir_register+0x2c4>)
    4bbe:	4798      	blx	r3
    4bc0:	b283      	uxth	r3, r0
    4bc2:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4bc4:	2100      	movs	r1, #0
    4bc6:	0020      	movs	r0, r4
    4bc8:	4b61      	ldr	r3, [pc, #388]	; (4d50 <dir_register+0x2c8>)
    4bca:	4798      	blx	r3
    4bcc:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    4bce:	2800      	cmp	r0, #0
    4bd0:	d1d3      	bne.n	4b7a <dir_register+0xf2>
    4bd2:	4682      	mov	sl, r0
    4bd4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4bd6:	4f5f      	ldr	r7, [pc, #380]	; (4d54 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4bd8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4bda:	4b5f      	ldr	r3, [pc, #380]	; (4d58 <dir_register+0x2d0>)
    4bdc:	4699      	mov	r9, r3
    4bde:	e00b      	b.n	4bf8 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    4be0:	2000      	movs	r0, #0
    4be2:	e7e9      	b.n	4bb8 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4be4:	1c6b      	adds	r3, r5, #1
    4be6:	b29b      	uxth	r3, r3
    4be8:	459b      	cmp	fp, r3
    4bea:	d06d      	beq.n	4cc8 <dir_register+0x240>
    4bec:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4bee:	2101      	movs	r1, #1
    4bf0:	0020      	movs	r0, r4
    4bf2:	47c8      	blx	r9
	} while (res == FR_OK);
    4bf4:	2800      	cmp	r0, #0
    4bf6:	d112      	bne.n	4c1e <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4bf8:	6921      	ldr	r1, [r4, #16]
    4bfa:	6820      	ldr	r0, [r4, #0]
    4bfc:	47b8      	blx	r7
		if (res != FR_OK) break;
    4bfe:	2800      	cmp	r0, #0
    4c00:	d000      	beq.n	4c04 <dir_register+0x17c>
    4c02:	e098      	b.n	4d36 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4c04:	6963      	ldr	r3, [r4, #20]
    4c06:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4c08:	2be5      	cmp	r3, #229	; 0xe5
    4c0a:	d001      	beq.n	4c10 <dir_register+0x188>
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d104      	bne.n	4c1a <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    4c10:	2d00      	cmp	r5, #0
    4c12:	d1e7      	bne.n	4be4 <dir_register+0x15c>
    4c14:	88e3      	ldrh	r3, [r4, #6]
    4c16:	469a      	mov	sl, r3
    4c18:	e7e4      	b.n	4be4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4c1a:	0035      	movs	r5, r6
    4c1c:	e7e7      	b.n	4bee <dir_register+0x166>
    4c1e:	4680      	mov	r8, r0
    4c20:	e7ab      	b.n	4b7a <dir_register+0xf2>
		res = dir_sdi(dj, is);
    4c22:	4651      	mov	r1, sl
    4c24:	0020      	movs	r0, r4
    4c26:	4b4a      	ldr	r3, [pc, #296]	; (4d50 <dir_register+0x2c8>)
    4c28:	4798      	blx	r3
    4c2a:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4c2c:	2800      	cmp	r0, #0
    4c2e:	d1a4      	bne.n	4b7a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    4c30:	69a0      	ldr	r0, [r4, #24]
    4c32:	4b4a      	ldr	r3, [pc, #296]	; (4d5c <dir_register+0x2d4>)
    4c34:	4798      	blx	r3
    4c36:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4c38:	46a8      	mov	r8, r5
    4c3a:	e01f      	b.n	4c7c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4c3c:	0022      	movs	r2, r4
    4c3e:	e067      	b.n	4d10 <dir_register+0x288>
    4c40:	465e      	mov	r6, fp
    4c42:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    4c44:	4946      	ldr	r1, [pc, #280]	; (4d60 <dir_register+0x2d8>)
    4c46:	428b      	cmp	r3, r1
    4c48:	d003      	beq.n	4c52 <dir_register+0x1ca>
    4c4a:	0052      	lsls	r2, r2, #1
    4c4c:	5b93      	ldrh	r3, [r2, r6]
    4c4e:	2b00      	cmp	r3, #0
    4c50:	d103      	bne.n	4c5a <dir_register+0x1d2>
    4c52:	2340      	movs	r3, #64	; 0x40
    4c54:	464a      	mov	r2, r9
    4c56:	431a      	orrs	r2, r3
    4c58:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    4c5a:	464b      	mov	r3, r9
    4c5c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    4c5e:	2301      	movs	r3, #1
    4c60:	6822      	ldr	r2, [r4, #0]
    4c62:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    4c64:	2100      	movs	r1, #0
    4c66:	0020      	movs	r0, r4
    4c68:	4b3b      	ldr	r3, [pc, #236]	; (4d58 <dir_register+0x2d0>)
    4c6a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d166      	bne.n	4d3e <dir_register+0x2b6>
    4c70:	4645      	mov	r5, r8
    4c72:	3d01      	subs	r5, #1
    4c74:	b2ab      	uxth	r3, r5
    4c76:	4698      	mov	r8, r3
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d027      	beq.n	4ccc <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    4c7c:	6921      	ldr	r1, [r4, #16]
    4c7e:	6820      	ldr	r0, [r4, #0]
    4c80:	4b34      	ldr	r3, [pc, #208]	; (4d54 <dir_register+0x2cc>)
    4c82:	4798      	blx	r3
				if (res != FR_OK) break;
    4c84:	2800      	cmp	r0, #0
    4c86:	d158      	bne.n	4d3a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    4c88:	69e6      	ldr	r6, [r4, #28]
    4c8a:	6960      	ldr	r0, [r4, #20]
    4c8c:	4643      	mov	r3, r8
    4c8e:	466a      	mov	r2, sp
    4c90:	70d3      	strb	r3, [r2, #3]
    4c92:	78d3      	ldrb	r3, [r2, #3]
    4c94:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4c96:	7913      	ldrb	r3, [r2, #4]
    4c98:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4c9a:	230f      	movs	r3, #15
    4c9c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    4c9e:	2300      	movs	r3, #0
    4ca0:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    4ca2:	7683      	strb	r3, [r0, #26]
    4ca4:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4ca6:	464b      	mov	r3, r9
    4ca8:	3b01      	subs	r3, #1
    4caa:	005a      	lsls	r2, r3, #1
    4cac:	18d2      	adds	r2, r2, r3
    4cae:	0092      	lsls	r2, r2, #2
    4cb0:	18d2      	adds	r2, r2, r3
    4cb2:	492c      	ldr	r1, [pc, #176]	; (4d64 <dir_register+0x2dc>)
    4cb4:	000d      	movs	r5, r1
    4cb6:	350d      	adds	r5, #13
	s = wc = 0;
    4cb8:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4cba:	4f29      	ldr	r7, [pc, #164]	; (4d60 <dir_register+0x2d8>)
    4cbc:	46b3      	mov	fp, r6
    4cbe:	46a4      	mov	ip, r4
    4cc0:	e029      	b.n	4d16 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4cc2:	2307      	movs	r3, #7
    4cc4:	4698      	mov	r8, r3
    4cc6:	e758      	b.n	4b7a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4cc8:	2b01      	cmp	r3, #1
    4cca:	d8aa      	bhi.n	4c22 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4ccc:	6921      	ldr	r1, [r4, #16]
    4cce:	6820      	ldr	r0, [r4, #0]
    4cd0:	4b20      	ldr	r3, [pc, #128]	; (4d54 <dir_register+0x2cc>)
    4cd2:	4798      	blx	r3
    4cd4:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4cd6:	2800      	cmp	r0, #0
    4cd8:	d000      	beq.n	4cdc <dir_register+0x254>
    4cda:	e74e      	b.n	4b7a <dir_register+0xf2>
			dir = dj->dir;
    4cdc:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    4cde:	2220      	movs	r2, #32
    4ce0:	2100      	movs	r1, #0
    4ce2:	0028      	movs	r0, r5
    4ce4:	4b20      	ldr	r3, [pc, #128]	; (4d68 <dir_register+0x2e0>)
    4ce6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4ce8:	220b      	movs	r2, #11
    4cea:	69a1      	ldr	r1, [r4, #24]
    4cec:	0028      	movs	r0, r5
    4cee:	4b15      	ldr	r3, [pc, #84]	; (4d44 <dir_register+0x2bc>)
    4cf0:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    4cf2:	69a3      	ldr	r3, [r4, #24]
    4cf4:	7ada      	ldrb	r2, [r3, #11]
    4cf6:	2318      	movs	r3, #24
    4cf8:	4013      	ands	r3, r2
    4cfa:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4cfc:	6823      	ldr	r3, [r4, #0]
    4cfe:	2201      	movs	r2, #1
    4d00:	711a      	strb	r2, [r3, #4]
    4d02:	e73a      	b.n	4b7a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4d04:	780c      	ldrb	r4, [r1, #0]
    4d06:	26ff      	movs	r6, #255	; 0xff
    4d08:	5506      	strb	r6, [r0, r4]
    4d0a:	1904      	adds	r4, r0, r4
    4d0c:	26ff      	movs	r6, #255	; 0xff
    4d0e:	7066      	strb	r6, [r4, #1]
    4d10:	3101      	adds	r1, #1
	} while (++s < 13);
    4d12:	42a9      	cmp	r1, r5
    4d14:	d094      	beq.n	4c40 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4d16:	42bb      	cmp	r3, r7
    4d18:	d0f4      	beq.n	4d04 <dir_register+0x27c>
    4d1a:	1c54      	adds	r4, r2, #1
    4d1c:	0052      	lsls	r2, r2, #1
    4d1e:	465b      	mov	r3, fp
    4d20:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4d22:	780a      	ldrb	r2, [r1, #0]
    4d24:	5483      	strb	r3, [r0, r2]
    4d26:	1882      	adds	r2, r0, r2
    4d28:	0a1e      	lsrs	r6, r3, #8
    4d2a:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	d185      	bne.n	4c3c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4d30:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4d32:	003b      	movs	r3, r7
    4d34:	e7ec      	b.n	4d10 <dir_register+0x288>
    4d36:	4680      	mov	r8, r0
    4d38:	e71f      	b.n	4b7a <dir_register+0xf2>
    4d3a:	4680      	mov	r8, r0
    4d3c:	e71d      	b.n	4b7a <dir_register+0xf2>
    4d3e:	4680      	mov	r8, r0
    4d40:	e71b      	b.n	4b7a <dir_register+0xf2>
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	00003e35 	.word	0x00003e35
    4d48:	000048f1 	.word	0x000048f1
    4d4c:	00008c99 	.word	0x00008c99
    4d50:	000044b1 	.word	0x000044b1
    4d54:	00004315 	.word	0x00004315
    4d58:	000047cd 	.word	0x000047cd
    4d5c:	00003e73 	.word	0x00003e73
    4d60:	0000ffff 	.word	0x0000ffff
    4d64:	0000a420 	.word	0x0000a420
    4d68:	00003e49 	.word	0x00003e49

00004d6c <sync>:
{
    4d6c:	b570      	push	{r4, r5, r6, lr}
    4d6e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    4d70:	2100      	movs	r1, #0
    4d72:	4b2c      	ldr	r3, [pc, #176]	; (4e24 <sync+0xb8>)
    4d74:	4798      	blx	r3
	if (res == FR_OK) {
    4d76:	2800      	cmp	r0, #0
    4d78:	d10a      	bne.n	4d90 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4d7a:	7823      	ldrb	r3, [r4, #0]
    4d7c:	2b03      	cmp	r3, #3
    4d7e:	d008      	beq.n	4d92 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    4d80:	7860      	ldrb	r0, [r4, #1]
    4d82:	2200      	movs	r2, #0
    4d84:	2100      	movs	r1, #0
    4d86:	4b28      	ldr	r3, [pc, #160]	; (4e28 <sync+0xbc>)
    4d88:	4798      	blx	r3
    4d8a:	1e43      	subs	r3, r0, #1
    4d8c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    4d8e:	b2c0      	uxtb	r0, r0
}
    4d90:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4d92:	7963      	ldrb	r3, [r4, #5]
    4d94:	2b00      	cmp	r3, #0
    4d96:	d0f3      	beq.n	4d80 <sync+0x14>
			fs->winsect = 0;
    4d98:	2600      	movs	r6, #0
    4d9a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4d9c:	0025      	movs	r5, r4
    4d9e:	3530      	adds	r5, #48	; 0x30
    4da0:	2280      	movs	r2, #128	; 0x80
    4da2:	0092      	lsls	r2, r2, #2
    4da4:	2100      	movs	r1, #0
    4da6:	0028      	movs	r0, r5
    4da8:	4b20      	ldr	r3, [pc, #128]	; (4e2c <sync+0xc0>)
    4daa:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4dac:	2255      	movs	r2, #85	; 0x55
    4dae:	4b20      	ldr	r3, [pc, #128]	; (4e30 <sync+0xc4>)
    4db0:	54e2      	strb	r2, [r4, r3]
    4db2:	3255      	adds	r2, #85	; 0x55
    4db4:	4b1f      	ldr	r3, [pc, #124]	; (4e34 <sync+0xc8>)
    4db6:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4db8:	3bde      	subs	r3, #222	; 0xde
    4dba:	3bff      	subs	r3, #255	; 0xff
    4dbc:	3a7a      	subs	r2, #122	; 0x7a
    4dbe:	54a3      	strb	r3, [r4, r2]
    4dc0:	3201      	adds	r2, #1
    4dc2:	54a3      	strb	r3, [r4, r2]
    4dc4:	330f      	adds	r3, #15
    4dc6:	3201      	adds	r2, #1
    4dc8:	54a3      	strb	r3, [r4, r2]
    4dca:	320f      	adds	r2, #15
    4dcc:	2133      	movs	r1, #51	; 0x33
    4dce:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    4dd0:	313f      	adds	r1, #63	; 0x3f
    4dd2:	2085      	movs	r0, #133	; 0x85
    4dd4:	0080      	lsls	r0, r0, #2
    4dd6:	5421      	strb	r1, [r4, r0]
    4dd8:	4817      	ldr	r0, [pc, #92]	; (4e38 <sync+0xcc>)
    4dda:	5421      	strb	r1, [r4, r0]
    4ddc:	4917      	ldr	r1, [pc, #92]	; (4e3c <sync+0xd0>)
    4dde:	5462      	strb	r2, [r4, r1]
    4de0:	4a17      	ldr	r2, [pc, #92]	; (4e40 <sync+0xd4>)
    4de2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4de4:	6923      	ldr	r3, [r4, #16]
    4de6:	3201      	adds	r2, #1
    4de8:	54a3      	strb	r3, [r4, r2]
    4dea:	0a19      	lsrs	r1, r3, #8
    4dec:	4a15      	ldr	r2, [pc, #84]	; (4e44 <sync+0xd8>)
    4dee:	54a1      	strb	r1, [r4, r2]
    4df0:	0c19      	lsrs	r1, r3, #16
    4df2:	4a15      	ldr	r2, [pc, #84]	; (4e48 <sync+0xdc>)
    4df4:	54a1      	strb	r1, [r4, r2]
    4df6:	0e1b      	lsrs	r3, r3, #24
    4df8:	4a14      	ldr	r2, [pc, #80]	; (4e4c <sync+0xe0>)
    4dfa:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4dfc:	68e3      	ldr	r3, [r4, #12]
    4dfe:	3201      	adds	r2, #1
    4e00:	54a3      	strb	r3, [r4, r2]
    4e02:	0a19      	lsrs	r1, r3, #8
    4e04:	4a12      	ldr	r2, [pc, #72]	; (4e50 <sync+0xe4>)
    4e06:	54a1      	strb	r1, [r4, r2]
    4e08:	0c19      	lsrs	r1, r3, #16
    4e0a:	4a12      	ldr	r2, [pc, #72]	; (4e54 <sync+0xe8>)
    4e0c:	54a1      	strb	r1, [r4, r2]
    4e0e:	0e1b      	lsrs	r3, r3, #24
    4e10:	4a11      	ldr	r2, [pc, #68]	; (4e58 <sync+0xec>)
    4e12:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4e14:	7860      	ldrb	r0, [r4, #1]
    4e16:	2301      	movs	r3, #1
    4e18:	6962      	ldr	r2, [r4, #20]
    4e1a:	0029      	movs	r1, r5
    4e1c:	4d0f      	ldr	r5, [pc, #60]	; (4e5c <sync+0xf0>)
    4e1e:	47a8      	blx	r5
			fs->fsi_flag = 0;
    4e20:	7166      	strb	r6, [r4, #5]
    4e22:	e7ad      	b.n	4d80 <sync+0x14>
    4e24:	00004315 	.word	0x00004315
    4e28:	00003d79 	.word	0x00003d79
    4e2c:	00003e49 	.word	0x00003e49
    4e30:	0000022e 	.word	0x0000022e
    4e34:	0000022f 	.word	0x0000022f
    4e38:	00000215 	.word	0x00000215
    4e3c:	00000216 	.word	0x00000216
    4e40:	00000217 	.word	0x00000217
    4e44:	00000219 	.word	0x00000219
    4e48:	0000021a 	.word	0x0000021a
    4e4c:	0000021b 	.word	0x0000021b
    4e50:	0000021d 	.word	0x0000021d
    4e54:	0000021e 	.word	0x0000021e
    4e58:	0000021f 	.word	0x0000021f
    4e5c:	00003cf5 	.word	0x00003cf5

00004e60 <follow_path>:
{
    4e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e62:	46de      	mov	lr, fp
    4e64:	4657      	mov	r7, sl
    4e66:	464e      	mov	r6, r9
    4e68:	4645      	mov	r5, r8
    4e6a:	b5e0      	push	{r5, r6, r7, lr}
    4e6c:	b083      	sub	sp, #12
    4e6e:	4682      	mov	sl, r0
    4e70:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    4e72:	780b      	ldrb	r3, [r1, #0]
    4e74:	2b2f      	cmp	r3, #47	; 0x2f
    4e76:	d00f      	beq.n	4e98 <follow_path+0x38>
    4e78:	2b5c      	cmp	r3, #92	; 0x5c
    4e7a:	d00d      	beq.n	4e98 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    4e7c:	2300      	movs	r3, #0
    4e7e:	4652      	mov	r2, sl
    4e80:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    4e82:	782b      	ldrb	r3, [r5, #0]
    4e84:	4657      	mov	r7, sl
    4e86:	2b1f      	cmp	r3, #31
    4e88:	d809      	bhi.n	4e9e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    4e8a:	2100      	movs	r1, #0
    4e8c:	4650      	mov	r0, sl
    4e8e:	4bb2      	ldr	r3, [pc, #712]	; (5158 <follow_path+0x2f8>)
    4e90:	4798      	blx	r3
		dj->dir = 0;
    4e92:	2300      	movs	r3, #0
    4e94:	617b      	str	r3, [r7, #20]
    4e96:	e13a      	b.n	510e <follow_path+0x2ae>
		path++;
    4e98:	3501      	adds	r5, #1
    4e9a:	e7ef      	b.n	4e7c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4e9c:	3501      	adds	r5, #1
    4e9e:	7828      	ldrb	r0, [r5, #0]
    4ea0:	282f      	cmp	r0, #47	; 0x2f
    4ea2:	d0fb      	beq.n	4e9c <follow_path+0x3c>
    4ea4:	285c      	cmp	r0, #92	; 0x5c
    4ea6:	d0f9      	beq.n	4e9c <follow_path+0x3c>
	lfn = dj->lfn;
    4ea8:	69fb      	ldr	r3, [r7, #28]
    4eaa:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4eac:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4eae:	281f      	cmp	r0, #31
    4eb0:	d800      	bhi.n	4eb4 <follow_path+0x54>
    4eb2:	e13b      	b.n	512c <follow_path+0x2cc>
    4eb4:	282f      	cmp	r0, #47	; 0x2f
    4eb6:	d100      	bne.n	4eba <follow_path+0x5a>
    4eb8:	e13b      	b.n	5132 <follow_path+0x2d2>
    4eba:	285c      	cmp	r0, #92	; 0x5c
    4ebc:	d100      	bne.n	4ec0 <follow_path+0x60>
    4ebe:	e13b      	b.n	5138 <follow_path+0x2d8>
    4ec0:	1c6e      	adds	r6, r5, #1
    4ec2:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4ec4:	2380      	movs	r3, #128	; 0x80
    4ec6:	005b      	lsls	r3, r3, #1
    4ec8:	4698      	mov	r8, r3
    4eca:	46bb      	mov	fp, r7
    4ecc:	002b      	movs	r3, r5
    4ece:	0025      	movs	r5, r4
    4ed0:	0034      	movs	r4, r6
    4ed2:	4656      	mov	r6, sl
    4ed4:	4699      	mov	r9, r3
    4ed6:	e011      	b.n	4efc <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d135      	bne.n	4f48 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4edc:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    4ede:	1c6b      	adds	r3, r5, #1
    4ee0:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    4ee2:	281f      	cmp	r0, #31
    4ee4:	d91e      	bls.n	4f24 <follow_path+0xc4>
    4ee6:	282f      	cmp	r0, #47	; 0x2f
    4ee8:	d100      	bne.n	4eec <follow_path+0x8c>
    4eea:	e128      	b.n	513e <follow_path+0x2de>
    4eec:	285c      	cmp	r0, #92	; 0x5c
    4eee:	d100      	bne.n	4ef2 <follow_path+0x92>
    4ef0:	e142      	b.n	5178 <follow_path+0x318>
    4ef2:	3602      	adds	r6, #2
    4ef4:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4ef6:	4543      	cmp	r3, r8
    4ef8:	d026      	beq.n	4f48 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4efa:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4efc:	2101      	movs	r1, #1
    4efe:	4b97      	ldr	r3, [pc, #604]	; (515c <follow_path+0x2fc>)
    4f00:	4798      	blx	r3
    4f02:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4f04:	d020      	beq.n	4f48 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4f06:	287f      	cmp	r0, #127	; 0x7f
    4f08:	d8e8      	bhi.n	4edc <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4f0a:	2822      	cmp	r0, #34	; 0x22
    4f0c:	d100      	bne.n	4f10 <follow_path+0xb0>
    4f0e:	e0fd      	b.n	510c <follow_path+0x2ac>
    4f10:	232a      	movs	r3, #42	; 0x2a
    4f12:	4a93      	ldr	r2, [pc, #588]	; (5160 <follow_path+0x300>)
    4f14:	b29f      	uxth	r7, r3
    4f16:	428f      	cmp	r7, r1
    4f18:	d0de      	beq.n	4ed8 <follow_path+0x78>
    4f1a:	3201      	adds	r2, #1
    4f1c:	7813      	ldrb	r3, [r2, #0]
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d1f8      	bne.n	4f14 <follow_path+0xb4>
    4f22:	e7db      	b.n	4edc <follow_path+0x7c>
    4f24:	002c      	movs	r4, r5
    4f26:	465f      	mov	r7, fp
    4f28:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4f2a:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4f2c:	2604      	movs	r6, #4
    4f2e:	e10b      	b.n	5148 <follow_path+0x2e8>
		di--;
    4f30:	3c01      	subs	r4, #1
    4f32:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    4f34:	2c00      	cmp	r4, #0
    4f36:	d100      	bne.n	4f3a <follow_path+0xda>
    4f38:	e0e8      	b.n	510c <follow_path+0x2ac>
		w = lfn[di-1];
    4f3a:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4f3c:	2a20      	cmp	r2, #32
    4f3e:	d0f7      	beq.n	4f30 <follow_path+0xd0>
    4f40:	2a2e      	cmp	r2, #46	; 0x2e
    4f42:	d0f5      	beq.n	4f30 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    4f44:	2c00      	cmp	r4, #0
    4f46:	d101      	bne.n	4f4c <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4f48:	2006      	movs	r0, #6
	return res;
    4f4a:	e0e0      	b.n	510e <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    4f4c:	0063      	lsls	r3, r4, #1
    4f4e:	4698      	mov	r8, r3
    4f50:	2300      	movs	r3, #0
    4f52:	4652      	mov	r2, sl
    4f54:	4641      	mov	r1, r8
    4f56:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    4f58:	220b      	movs	r2, #11
    4f5a:	2120      	movs	r1, #32
    4f5c:	69b8      	ldr	r0, [r7, #24]
    4f5e:	4b81      	ldr	r3, [pc, #516]	; (5164 <follow_path+0x304>)
    4f60:	4798      	blx	r3
    4f62:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4f64:	2300      	movs	r3, #0
    4f66:	e001      	b.n	4f6c <follow_path+0x10c>
    4f68:	3301      	adds	r3, #1
    4f6a:	3202      	adds	r2, #2
    4f6c:	8811      	ldrh	r1, [r2, #0]
    4f6e:	2920      	cmp	r1, #32
    4f70:	d0fa      	beq.n	4f68 <follow_path+0x108>
    4f72:	292e      	cmp	r1, #46	; 0x2e
    4f74:	d0f8      	beq.n	4f68 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    4f76:	2b00      	cmp	r3, #0
    4f78:	d001      	beq.n	4f7e <follow_path+0x11e>
    4f7a:	2203      	movs	r2, #3
    4f7c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4f7e:	4652      	mov	r2, sl
    4f80:	4442      	add	r2, r8
    4f82:	3a02      	subs	r2, #2
    4f84:	8812      	ldrh	r2, [r2, #0]
    4f86:	2a2e      	cmp	r2, #46	; 0x2e
    4f88:	d009      	beq.n	4f9e <follow_path+0x13e>
    4f8a:	4642      	mov	r2, r8
    4f8c:	3a04      	subs	r2, #4
    4f8e:	4452      	add	r2, sl
    4f90:	3c01      	subs	r4, #1
    4f92:	2c00      	cmp	r4, #0
    4f94:	d003      	beq.n	4f9e <follow_path+0x13e>
    4f96:	3a02      	subs	r2, #2
    4f98:	8851      	ldrh	r1, [r2, #2]
    4f9a:	292e      	cmp	r1, #46	; 0x2e
    4f9c:	d1f8      	bne.n	4f90 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4f9e:	2208      	movs	r2, #8
    4fa0:	9201      	str	r2, [sp, #4]
    4fa2:	2200      	movs	r2, #0
    4fa4:	4693      	mov	fp, r2
    4fa6:	4691      	mov	r9, r2
    4fa8:	46a0      	mov	r8, r4
    4faa:	e006      	b.n	4fba <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4fac:	4544      	cmp	r4, r8
    4fae:	d100      	bne.n	4fb2 <follow_path+0x152>
    4fb0:	e0e6      	b.n	5180 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4fb2:	2303      	movs	r3, #3
    4fb4:	431e      	orrs	r6, r3
    4fb6:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4fb8:	0023      	movs	r3, r4
    4fba:	1c5c      	adds	r4, r3, #1
    4fbc:	005b      	lsls	r3, r3, #1
    4fbe:	4652      	mov	r2, sl
    4fc0:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4fc2:	2800      	cmp	r0, #0
    4fc4:	d02c      	beq.n	5020 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4fc6:	2820      	cmp	r0, #32
    4fc8:	d0f3      	beq.n	4fb2 <follow_path+0x152>
    4fca:	282e      	cmp	r0, #46	; 0x2e
    4fcc:	d0ee      	beq.n	4fac <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4fce:	9b01      	ldr	r3, [sp, #4]
    4fd0:	459b      	cmp	fp, r3
    4fd2:	d219      	bcs.n	5008 <follow_path+0x1a8>
    4fd4:	4544      	cmp	r4, r8
    4fd6:	d100      	bne.n	4fda <follow_path+0x17a>
    4fd8:	e0d2      	b.n	5180 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4fda:	287f      	cmp	r0, #127	; 0x7f
    4fdc:	d85e      	bhi.n	509c <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4fde:	282b      	cmp	r0, #43	; 0x2b
    4fe0:	d06e      	beq.n	50c0 <follow_path+0x260>
    4fe2:	232c      	movs	r3, #44	; 0x2c
    4fe4:	4a60      	ldr	r2, [pc, #384]	; (5168 <follow_path+0x308>)
    4fe6:	b299      	uxth	r1, r3
    4fe8:	4281      	cmp	r1, r0
    4fea:	d067      	beq.n	50bc <follow_path+0x25c>
    4fec:	3201      	adds	r2, #1
    4fee:	7813      	ldrb	r3, [r2, #0]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d1f8      	bne.n	4fe6 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4ff4:	0003      	movs	r3, r0
    4ff6:	3b41      	subs	r3, #65	; 0x41
    4ff8:	b29b      	uxth	r3, r3
    4ffa:	2b19      	cmp	r3, #25
    4ffc:	d86c      	bhi.n	50d8 <follow_path+0x278>
					b |= 2;
    4ffe:	2302      	movs	r3, #2
    5000:	464a      	mov	r2, r9
    5002:	431a      	orrs	r2, r3
    5004:	4691      	mov	r9, r2
    5006:	e05f      	b.n	50c8 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    5008:	9b01      	ldr	r3, [sp, #4]
    500a:	2b0b      	cmp	r3, #11
    500c:	d03b      	beq.n	5086 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    500e:	4544      	cmp	r4, r8
    5010:	d100      	bne.n	5014 <follow_path+0x1b4>
    5012:	e0b9      	b.n	5188 <follow_path+0x328>
    5014:	2303      	movs	r3, #3
    5016:	431e      	orrs	r6, r3
    5018:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    501a:	4544      	cmp	r4, r8
    501c:	d800      	bhi.n	5020 <follow_path+0x1c0>
    501e:	e0b3      	b.n	5188 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    5020:	69bb      	ldr	r3, [r7, #24]
    5022:	781a      	ldrb	r2, [r3, #0]
    5024:	2ae5      	cmp	r2, #229	; 0xe5
    5026:	d036      	beq.n	5096 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    5028:	9b01      	ldr	r3, [sp, #4]
    502a:	2b08      	cmp	r3, #8
    502c:	d060      	beq.n	50f0 <follow_path+0x290>
    502e:	230c      	movs	r3, #12
    5030:	464a      	mov	r2, r9
    5032:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    5034:	2b0c      	cmp	r3, #12
    5036:	d060      	beq.n	50fa <follow_path+0x29a>
    5038:	43d2      	mvns	r2, r2
    503a:	0792      	lsls	r2, r2, #30
    503c:	d05d      	beq.n	50fa <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    503e:	07b2      	lsls	r2, r6, #30
    5040:	d406      	bmi.n	5050 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5042:	2203      	movs	r2, #3
    5044:	4649      	mov	r1, r9
    5046:	400a      	ands	r2, r1
    5048:	2a01      	cmp	r2, #1
    504a:	d059      	beq.n	5100 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    504c:	2b04      	cmp	r3, #4
    504e:	d05a      	beq.n	5106 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    5050:	69bb      	ldr	r3, [r7, #24]
    5052:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    5054:	0038      	movs	r0, r7
    5056:	4b45      	ldr	r3, [pc, #276]	; (516c <follow_path+0x30c>)
    5058:	4798      	blx	r3
			ns = *(dj->fn+NS);
    505a:	69bb      	ldr	r3, [r7, #24]
    505c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    505e:	2800      	cmp	r0, #0
    5060:	d15c      	bne.n	511c <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    5062:	075b      	lsls	r3, r3, #29
    5064:	d453      	bmi.n	510e <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    5066:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    5068:	7ad3      	ldrb	r3, [r2, #11]
    506a:	06db      	lsls	r3, r3, #27
    506c:	d55c      	bpl.n	5128 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    506e:	7d51      	ldrb	r1, [r2, #21]
    5070:	0209      	lsls	r1, r1, #8
    5072:	7d13      	ldrb	r3, [r2, #20]
    5074:	430b      	orrs	r3, r1
    5076:	041b      	lsls	r3, r3, #16
    5078:	7ed1      	ldrb	r1, [r2, #27]
    507a:	0209      	lsls	r1, r1, #8
    507c:	7e92      	ldrb	r2, [r2, #26]
    507e:	430a      	orrs	r2, r1
    5080:	4313      	orrs	r3, r2
    5082:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    5084:	e70b      	b.n	4e9e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    5086:	2303      	movs	r3, #3
    5088:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    508a:	69bb      	ldr	r3, [r7, #24]
    508c:	781a      	ldrb	r2, [r3, #0]
    508e:	2ae5      	cmp	r2, #229	; 0xe5
    5090:	d1cd      	bne.n	502e <follow_path+0x1ce>
    5092:	220b      	movs	r2, #11
    5094:	9201      	str	r2, [sp, #4]
    5096:	2205      	movs	r2, #5
    5098:	701a      	strb	r2, [r3, #0]
    509a:	e7c5      	b.n	5028 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    509c:	2100      	movs	r1, #0
    509e:	4b2f      	ldr	r3, [pc, #188]	; (515c <follow_path+0x2fc>)
    50a0:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    50a2:	2800      	cmp	r0, #0
    50a4:	d100      	bne.n	50a8 <follow_path+0x248>
    50a6:	e079      	b.n	519c <follow_path+0x33c>
    50a8:	4b31      	ldr	r3, [pc, #196]	; (5170 <follow_path+0x310>)
    50aa:	469c      	mov	ip, r3
    50ac:	4460      	add	r0, ip
    50ae:	3880      	subs	r0, #128	; 0x80
    50b0:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    50b2:	2302      	movs	r3, #2
    50b4:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    50b6:	2800      	cmp	r0, #0
    50b8:	d002      	beq.n	50c0 <follow_path+0x260>
    50ba:	e790      	b.n	4fde <follow_path+0x17e>
    50bc:	2b00      	cmp	r3, #0
    50be:	d099      	beq.n	4ff4 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    50c0:	2303      	movs	r3, #3
    50c2:	431e      	orrs	r6, r3
    50c4:	b2f6      	uxtb	r6, r6
    50c6:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    50c8:	69bb      	ldr	r3, [r7, #24]
    50ca:	465a      	mov	r2, fp
    50cc:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    50ce:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    50d0:	2201      	movs	r2, #1
    50d2:	4694      	mov	ip, r2
    50d4:	44e3      	add	fp, ip
    50d6:	e770      	b.n	4fba <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    50d8:	0003      	movs	r3, r0
    50da:	3b61      	subs	r3, #97	; 0x61
    50dc:	b29b      	uxth	r3, r3
    50de:	2b19      	cmp	r3, #25
    50e0:	d8f2      	bhi.n	50c8 <follow_path+0x268>
						b |= 1; w -= 0x20;
    50e2:	2301      	movs	r3, #1
    50e4:	464a      	mov	r2, r9
    50e6:	431a      	orrs	r2, r3
    50e8:	4691      	mov	r9, r2
    50ea:	3820      	subs	r0, #32
    50ec:	b280      	uxth	r0, r0
    50ee:	e7eb      	b.n	50c8 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    50f0:	464b      	mov	r3, r9
    50f2:	009b      	lsls	r3, r3, #2
    50f4:	b2db      	uxtb	r3, r3
    50f6:	4699      	mov	r9, r3
    50f8:	e799      	b.n	502e <follow_path+0x1ce>
		cf |= NS_LFN;
    50fa:	2202      	movs	r2, #2
    50fc:	4316      	orrs	r6, r2
    50fe:	e79e      	b.n	503e <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    5100:	320f      	adds	r2, #15
    5102:	4316      	orrs	r6, r2
    5104:	e7a2      	b.n	504c <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    5106:	3304      	adds	r3, #4
    5108:	431e      	orrs	r6, r3
    510a:	e7a1      	b.n	5050 <follow_path+0x1f0>
    510c:	2006      	movs	r0, #6
}
    510e:	b003      	add	sp, #12
    5110:	bc3c      	pop	{r2, r3, r4, r5}
    5112:	4690      	mov	r8, r2
    5114:	4699      	mov	r9, r3
    5116:	46a2      	mov	sl, r4
    5118:	46ab      	mov	fp, r5
    511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    511c:	2804      	cmp	r0, #4
    511e:	d1f6      	bne.n	510e <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    5120:	075b      	lsls	r3, r3, #29
    5122:	d4f4      	bmi.n	510e <follow_path+0x2ae>
    5124:	3001      	adds	r0, #1
    5126:	e7f2      	b.n	510e <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    5128:	2005      	movs	r0, #5
    512a:	e7f0      	b.n	510e <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    512c:	2301      	movs	r3, #1
	si = di = 0;
    512e:	2400      	movs	r4, #0
    5130:	e6fb      	b.n	4f2a <follow_path+0xca>
		w = p[si++];					/* Get a character */
    5132:	2301      	movs	r3, #1
	si = di = 0;
    5134:	2400      	movs	r4, #0
    5136:	e005      	b.n	5144 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    5138:	2301      	movs	r3, #1
	si = di = 0;
    513a:	2400      	movs	r4, #0
    513c:	e002      	b.n	5144 <follow_path+0x2e4>
    513e:	002c      	movs	r4, r5
    5140:	465f      	mov	r7, fp
    5142:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    5144:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5146:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    5148:	2c00      	cmp	r4, #0
    514a:	d0df      	beq.n	510c <follow_path+0x2ac>
    514c:	4b09      	ldr	r3, [pc, #36]	; (5174 <follow_path+0x314>)
    514e:	18e3      	adds	r3, r4, r3
    5150:	005b      	lsls	r3, r3, #1
    5152:	4453      	add	r3, sl
    5154:	e6f1      	b.n	4f3a <follow_path+0xda>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	000044b1 	.word	0x000044b1
    515c:	000057c1 	.word	0x000057c1
    5160:	0000a4b1 	.word	0x0000a4b1
    5164:	00003e49 	.word	0x00003e49
    5168:	0000a4bd 	.word	0x0000a4bd
    516c:	000048f1 	.word	0x000048f1
    5170:	0000a430 	.word	0x0000a430
    5174:	7fffffff 	.word	0x7fffffff
    5178:	002c      	movs	r4, r5
    517a:	465f      	mov	r7, fp
    517c:	464d      	mov	r5, r9
    517e:	e7e1      	b.n	5144 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    5180:	9b01      	ldr	r3, [sp, #4]
    5182:	2b0b      	cmp	r3, #11
    5184:	d100      	bne.n	5188 <follow_path+0x328>
    5186:	e77e      	b.n	5086 <follow_path+0x226>
			b <<= 2; continue;
    5188:	464b      	mov	r3, r9
    518a:	009b      	lsls	r3, r3, #2
    518c:	b2db      	uxtb	r3, r3
    518e:	4699      	mov	r9, r3
    5190:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    5192:	220b      	movs	r2, #11
    5194:	9201      	str	r2, [sp, #4]
    5196:	3a03      	subs	r2, #3
    5198:	4693      	mov	fp, r2
    519a:	e70e      	b.n	4fba <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    519c:	2302      	movs	r3, #2
    519e:	431e      	orrs	r6, r3
    51a0:	e78e      	b.n	50c0 <follow_path+0x260>
    51a2:	46c0      	nop			; (mov r8, r8)

000051a4 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    51a4:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    51a6:	2803      	cmp	r0, #3
    51a8:	d901      	bls.n	51ae <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    51aa:	0018      	movs	r0, r3
    51ac:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    51ae:	0083      	lsls	r3, r0, #2
    51b0:	4a07      	ldr	r2, [pc, #28]	; (51d0 <f_mount+0x2c>)
    51b2:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    51b4:	2b00      	cmp	r3, #0
    51b6:	d001      	beq.n	51bc <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    51b8:	2200      	movs	r2, #0
    51ba:	701a      	strb	r2, [r3, #0]
	if (fs) {
    51bc:	2900      	cmp	r1, #0
    51be:	d001      	beq.n	51c4 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    51c0:	2300      	movs	r3, #0
    51c2:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    51c4:	0080      	lsls	r0, r0, #2
    51c6:	4b02      	ldr	r3, [pc, #8]	; (51d0 <f_mount+0x2c>)
    51c8:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    51ca:	2300      	movs	r3, #0
    51cc:	e7ed      	b.n	51aa <f_mount+0x6>
    51ce:	46c0      	nop			; (mov r8, r8)
    51d0:	200002b8 	.word	0x200002b8

000051d4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d6:	46c6      	mov	lr, r8
    51d8:	b500      	push	{lr}
    51da:	4c59      	ldr	r4, [pc, #356]	; (5340 <f_open+0x16c>)
    51dc:	44a5      	add	sp, r4
    51de:	0005      	movs	r5, r0
    51e0:	9101      	str	r1, [sp, #4]
    51e2:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    51e4:	2300      	movs	r3, #0
    51e6:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    51e8:	261f      	movs	r6, #31
    51ea:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    51ec:	221e      	movs	r2, #30
    51ee:	403a      	ands	r2, r7
    51f0:	a985      	add	r1, sp, #532	; 0x214
    51f2:	a801      	add	r0, sp, #4
    51f4:	4b53      	ldr	r3, [pc, #332]	; (5344 <f_open+0x170>)
    51f6:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    51f8:	ab82      	add	r3, sp, #520	; 0x208
    51fa:	938b      	str	r3, [sp, #556]	; 0x22c
    51fc:	ab02      	add	r3, sp, #8
    51fe:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    5200:	2800      	cmp	r0, #0
    5202:	d006      	beq.n	5212 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    5204:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5206:	231c      	movs	r3, #28
    5208:	423b      	tst	r3, r7
    520a:	d145      	bne.n	5298 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    520c:	2800      	cmp	r0, #0
    520e:	d13d      	bne.n	528c <f_open+0xb8>
    5210:	e00c      	b.n	522c <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    5212:	9901      	ldr	r1, [sp, #4]
    5214:	a885      	add	r0, sp, #532	; 0x214
    5216:	4b4c      	ldr	r3, [pc, #304]	; (5348 <f_open+0x174>)
    5218:	4798      	blx	r3
	dir = dj.dir;
    521a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    521c:	2800      	cmp	r0, #0
    521e:	d1f2      	bne.n	5206 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    5220:	2c00      	cmp	r4, #0
    5222:	d100      	bne.n	5226 <f_open+0x52>
    5224:	e086      	b.n	5334 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5226:	231c      	movs	r3, #28
    5228:	423b      	tst	r3, r7
    522a:	d146      	bne.n	52ba <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    522c:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    522e:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    5230:	06da      	lsls	r2, r3, #27
    5232:	d42b      	bmi.n	528c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5234:	07ba      	lsls	r2, r7, #30
    5236:	d502      	bpl.n	523e <f_open+0x6a>
					res = FR_DENIED;
    5238:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    523a:	07db      	lsls	r3, r3, #31
    523c:	d426      	bmi.n	528c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    523e:	073b      	lsls	r3, r7, #28
    5240:	d501      	bpl.n	5246 <f_open+0x72>
			mode |= FA__WRITTEN;
    5242:	2320      	movs	r3, #32
    5244:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    5246:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    524a:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    524c:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    524e:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    5250:	7d62      	ldrb	r2, [r4, #21]
    5252:	0212      	lsls	r2, r2, #8
    5254:	7d23      	ldrb	r3, [r4, #20]
    5256:	4313      	orrs	r3, r2
    5258:	041b      	lsls	r3, r3, #16
    525a:	7ee1      	ldrb	r1, [r4, #27]
    525c:	0209      	lsls	r1, r1, #8
    525e:	7ea2      	ldrb	r2, [r4, #26]
    5260:	430a      	orrs	r2, r1
    5262:	4313      	orrs	r3, r2
    5264:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    5266:	7fe3      	ldrb	r3, [r4, #31]
    5268:	061b      	lsls	r3, r3, #24
    526a:	7fa2      	ldrb	r2, [r4, #30]
    526c:	0412      	lsls	r2, r2, #16
    526e:	4313      	orrs	r3, r2
    5270:	7f22      	ldrb	r2, [r4, #28]
    5272:	4313      	orrs	r3, r2
    5274:	7f62      	ldrb	r2, [r4, #29]
    5276:	0212      	lsls	r2, r2, #8
    5278:	4313      	orrs	r3, r2
    527a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    527c:	2300      	movs	r3, #0
    527e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    5280:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    5282:	9b85      	ldr	r3, [sp, #532]	; 0x214
    5284:	602b      	str	r3, [r5, #0]
    5286:	88db      	ldrh	r3, [r3, #6]
    5288:	80ab      	strh	r3, [r5, #4]
    528a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    528c:	238e      	movs	r3, #142	; 0x8e
    528e:	009b      	lsls	r3, r3, #2
    5290:	449d      	add	sp, r3
    5292:	bc04      	pop	{r2}
    5294:	4690      	mov	r8, r2
    5296:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    5298:	2804      	cmp	r0, #4
    529a:	d005      	beq.n	52a8 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    529c:	2308      	movs	r3, #8
    529e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    52a0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    52a2:	2800      	cmp	r0, #0
    52a4:	d0d3      	beq.n	524e <f_open+0x7a>
    52a6:	e7f1      	b.n	528c <f_open+0xb8>
				res = dir_register(&dj);
    52a8:	a885      	add	r0, sp, #532	; 0x214
    52aa:	4b28      	ldr	r3, [pc, #160]	; (534c <f_open+0x178>)
    52ac:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    52ae:	2308      	movs	r3, #8
    52b0:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    52b2:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    52b4:	2800      	cmp	r0, #0
    52b6:	d008      	beq.n	52ca <f_open+0xf6>
    52b8:	e7e8      	b.n	528c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    52ba:	7ae3      	ldrb	r3, [r4, #11]
    52bc:	2211      	movs	r2, #17
				res = FR_DENIED;
    52be:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    52c0:	421a      	tst	r2, r3
    52c2:	d1e3      	bne.n	528c <f_open+0xb8>
					res = FR_EXIST;
    52c4:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    52c6:	077b      	lsls	r3, r7, #29
    52c8:	d4e0      	bmi.n	528c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    52ca:	0733      	lsls	r3, r6, #28
    52cc:	d5bb      	bpl.n	5246 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    52ce:	4b20      	ldr	r3, [pc, #128]	; (5350 <f_open+0x17c>)
    52d0:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    52d2:	73a0      	strb	r0, [r4, #14]
    52d4:	0a03      	lsrs	r3, r0, #8
    52d6:	73e3      	strb	r3, [r4, #15]
    52d8:	0c03      	lsrs	r3, r0, #16
    52da:	7423      	strb	r3, [r4, #16]
    52dc:	0e00      	lsrs	r0, r0, #24
    52de:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    52e0:	2300      	movs	r3, #0
    52e2:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    52e4:	7723      	strb	r3, [r4, #28]
    52e6:	7763      	strb	r3, [r4, #29]
    52e8:	77a3      	strb	r3, [r4, #30]
    52ea:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    52ec:	7d62      	ldrb	r2, [r4, #21]
    52ee:	0212      	lsls	r2, r2, #8
    52f0:	7d27      	ldrb	r7, [r4, #20]
    52f2:	4317      	orrs	r7, r2
    52f4:	043f      	lsls	r7, r7, #16
    52f6:	7ee1      	ldrb	r1, [r4, #27]
    52f8:	0209      	lsls	r1, r1, #8
    52fa:	7ea2      	ldrb	r2, [r4, #26]
    52fc:	430a      	orrs	r2, r1
    52fe:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    5300:	76a3      	strb	r3, [r4, #26]
    5302:	76e3      	strb	r3, [r4, #27]
    5304:	7523      	strb	r3, [r4, #20]
    5306:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    5308:	9885      	ldr	r0, [sp, #532]	; 0x214
    530a:	3301      	adds	r3, #1
    530c:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    530e:	2f00      	cmp	r7, #0
    5310:	d097      	beq.n	5242 <f_open+0x6e>
				dw = dj.fs->winsect;
    5312:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    5314:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    5316:	0039      	movs	r1, r7
    5318:	4b0e      	ldr	r3, [pc, #56]	; (5354 <f_open+0x180>)
    531a:	4798      	blx	r3
				if (res == FR_OK) {
    531c:	2800      	cmp	r0, #0
    531e:	d1b5      	bne.n	528c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5320:	9885      	ldr	r0, [sp, #532]	; 0x214
    5322:	3f01      	subs	r7, #1
    5324:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    5326:	4641      	mov	r1, r8
    5328:	4b0b      	ldr	r3, [pc, #44]	; (5358 <f_open+0x184>)
    532a:	4798      	blx	r3
	if (res == FR_OK) {
    532c:	2800      	cmp	r0, #0
    532e:	d100      	bne.n	5332 <f_open+0x15e>
    5330:	e787      	b.n	5242 <f_open+0x6e>
    5332:	e7ab      	b.n	528c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5334:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    5336:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5338:	423b      	tst	r3, r7
    533a:	d0b2      	beq.n	52a2 <f_open+0xce>
			res = FR_INVALID_NAME;
    533c:	2006      	movs	r0, #6
    533e:	e7ad      	b.n	529c <f_open+0xc8>
    5340:	fffffdc8 	.word	0xfffffdc8
    5344:	00003f65 	.word	0x00003f65
    5348:	00004e61 	.word	0x00004e61
    534c:	00004a89 	.word	0x00004a89
    5350:	00003de5 	.word	0x00003de5
    5354:	00004755 	.word	0x00004755
    5358:	00004315 	.word	0x00004315

0000535c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    535c:	b5f0      	push	{r4, r5, r6, r7, lr}
    535e:	46de      	mov	lr, fp
    5360:	4657      	mov	r7, sl
    5362:	464e      	mov	r6, r9
    5364:	4645      	mov	r5, r8
    5366:	b5e0      	push	{r5, r6, r7, lr}
    5368:	b083      	sub	sp, #12
    536a:	0004      	movs	r4, r0
    536c:	000d      	movs	r5, r1
    536e:	0016      	movs	r6, r2
    5370:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    5372:	2300      	movs	r3, #0
    5374:	464a      	mov	r2, r9
    5376:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    5378:	8881      	ldrh	r1, [r0, #4]
    537a:	6800      	ldr	r0, [r0, #0]
    537c:	4b7f      	ldr	r3, [pc, #508]	; (557c <f_write+0x220>)
    537e:	4798      	blx	r3
    5380:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5382:	2800      	cmp	r0, #0
    5384:	d000      	beq.n	5388 <f_write+0x2c>
    5386:	e0f1      	b.n	556c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    5388:	79a3      	ldrb	r3, [r4, #6]
    538a:	b25a      	sxtb	r2, r3
    538c:	2a00      	cmp	r2, #0
    538e:	da00      	bge.n	5392 <f_write+0x36>
    5390:	e0ea      	b.n	5568 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    5392:	079b      	lsls	r3, r3, #30
    5394:	d402      	bmi.n	539c <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    5396:	2307      	movs	r3, #7
    5398:	9300      	str	r3, [sp, #0]
    539a:	e0e7      	b.n	556c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    539c:	68e3      	ldr	r3, [r4, #12]
    539e:	199a      	adds	r2, r3, r6
    53a0:	4293      	cmp	r3, r2
    53a2:	d810      	bhi.n	53c6 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    53a4:	2e00      	cmp	r6, #0
    53a6:	d00e      	beq.n	53c6 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    53a8:	002f      	movs	r7, r5
    53aa:	e07b      	b.n	54a4 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    53ac:	2100      	movs	r1, #0
    53ae:	4b74      	ldr	r3, [pc, #464]	; (5580 <f_write+0x224>)
    53b0:	4798      	blx	r3
    53b2:	0003      	movs	r3, r0
    53b4:	6120      	str	r0, [r4, #16]
    53b6:	e003      	b.n	53c0 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    53b8:	6961      	ldr	r1, [r4, #20]
    53ba:	4b71      	ldr	r3, [pc, #452]	; (5580 <f_write+0x224>)
    53bc:	4798      	blx	r3
    53be:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    53c0:	2b00      	cmp	r3, #0
    53c2:	d000      	beq.n	53c6 <f_write+0x6a>
    53c4:	e080      	b.n	54c8 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    53c6:	68a3      	ldr	r3, [r4, #8]
    53c8:	68e2      	ldr	r2, [r4, #12]
    53ca:	4293      	cmp	r3, r2
    53cc:	d900      	bls.n	53d0 <f_write+0x74>
    53ce:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    53d0:	79a3      	ldrb	r3, [r4, #6]
    53d2:	2220      	movs	r2, #32
    53d4:	4313      	orrs	r3, r2
    53d6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    53d8:	e0c8      	b.n	556c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    53da:	79a2      	ldrb	r2, [r4, #6]
    53dc:	3b81      	subs	r3, #129	; 0x81
    53de:	4313      	orrs	r3, r2
    53e0:	71a3      	strb	r3, [r4, #6]
    53e2:	2302      	movs	r3, #2
    53e4:	9300      	str	r3, [sp, #0]
    53e6:	e0c1      	b.n	556c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    53e8:	79a2      	ldrb	r2, [r4, #6]
    53ea:	3b7f      	subs	r3, #127	; 0x7f
    53ec:	4313      	orrs	r3, r2
    53ee:	71a3      	strb	r3, [r4, #6]
    53f0:	2301      	movs	r3, #1
    53f2:	9300      	str	r3, [sp, #0]
    53f4:	e0ba      	b.n	556c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    53f6:	2100      	movs	r1, #0
    53f8:	4b62      	ldr	r3, [pc, #392]	; (5584 <f_write+0x228>)
    53fa:	4798      	blx	r3
    53fc:	2800      	cmp	r0, #0
    53fe:	d06d      	beq.n	54dc <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    5400:	79a2      	ldrb	r2, [r4, #6]
    5402:	2380      	movs	r3, #128	; 0x80
    5404:	425b      	negs	r3, r3
    5406:	4313      	orrs	r3, r2
    5408:	71a3      	strb	r3, [r4, #6]
    540a:	2301      	movs	r3, #1
    540c:	9300      	str	r3, [sp, #0]
    540e:	e0ad      	b.n	556c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5410:	79a2      	ldrb	r2, [r4, #6]
    5412:	2380      	movs	r3, #128	; 0x80
    5414:	425b      	negs	r3, r3
    5416:	4313      	orrs	r3, r2
    5418:	71a3      	strb	r3, [r4, #6]
    541a:	2302      	movs	r3, #2
    541c:	9300      	str	r3, [sp, #0]
    541e:	e0a5      	b.n	556c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5420:	79a2      	ldrb	r2, [r4, #6]
    5422:	2380      	movs	r3, #128	; 0x80
    5424:	425b      	negs	r3, r3
    5426:	4313      	orrs	r3, r2
    5428:	71a3      	strb	r3, [r4, #6]
    542a:	2301      	movs	r3, #1
    542c:	9300      	str	r3, [sp, #0]
    542e:	e09d      	b.n	556c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5430:	0240      	lsls	r0, r0, #9
    5432:	1839      	adds	r1, r7, r0
    5434:	3330      	adds	r3, #48	; 0x30
    5436:	0018      	movs	r0, r3
    5438:	2280      	movs	r2, #128	; 0x80
    543a:	0092      	lsls	r2, r2, #2
    543c:	4b52      	ldr	r3, [pc, #328]	; (5588 <f_write+0x22c>)
    543e:	4798      	blx	r3
					fp->fs->wflag = 0;
    5440:	2300      	movs	r3, #0
    5442:	6822      	ldr	r2, [r4, #0]
    5444:	7113      	strb	r3, [r2, #4]
    5446:	e072      	b.n	552e <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5448:	68a3      	ldr	r3, [r4, #8]
    544a:	68e2      	ldr	r2, [r4, #12]
    544c:	4293      	cmp	r3, r2
    544e:	d271      	bcs.n	5534 <f_write+0x1d8>
			fp->dsect = sect;
    5450:	4643      	mov	r3, r8
    5452:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5454:	68a3      	ldr	r3, [r4, #8]
    5456:	05dd      	lsls	r5, r3, #23
    5458:	0ded      	lsrs	r5, r5, #23
    545a:	2380      	movs	r3, #128	; 0x80
    545c:	009b      	lsls	r3, r3, #2
    545e:	1b5d      	subs	r5, r3, r5
    5460:	42b5      	cmp	r5, r6
    5462:	d900      	bls.n	5466 <f_write+0x10a>
    5464:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    5466:	69a1      	ldr	r1, [r4, #24]
    5468:	6820      	ldr	r0, [r4, #0]
    546a:	4b46      	ldr	r3, [pc, #280]	; (5584 <f_write+0x228>)
    546c:	4798      	blx	r3
    546e:	2800      	cmp	r0, #0
    5470:	d172      	bne.n	5558 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    5472:	68a3      	ldr	r3, [r4, #8]
    5474:	05d8      	lsls	r0, r3, #23
    5476:	0dc0      	lsrs	r0, r0, #23
    5478:	3030      	adds	r0, #48	; 0x30
    547a:	6823      	ldr	r3, [r4, #0]
    547c:	469c      	mov	ip, r3
    547e:	4460      	add	r0, ip
    5480:	002a      	movs	r2, r5
    5482:	0039      	movs	r1, r7
    5484:	4b40      	ldr	r3, [pc, #256]	; (5588 <f_write+0x22c>)
    5486:	4798      	blx	r3
		fp->fs->wflag = 1;
    5488:	2301      	movs	r3, #1
    548a:	6822      	ldr	r2, [r4, #0]
    548c:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    548e:	197f      	adds	r7, r7, r5
    5490:	68a3      	ldr	r3, [r4, #8]
    5492:	195b      	adds	r3, r3, r5
    5494:	60a3      	str	r3, [r4, #8]
    5496:	464b      	mov	r3, r9
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	195b      	adds	r3, r3, r5
    549c:	464a      	mov	r2, r9
    549e:	6013      	str	r3, [r2, #0]
    54a0:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    54a2:	d090      	beq.n	53c6 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    54a4:	68a3      	ldr	r3, [r4, #8]
    54a6:	05da      	lsls	r2, r3, #23
    54a8:	d1d4      	bne.n	5454 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    54aa:	6820      	ldr	r0, [r4, #0]
    54ac:	7882      	ldrb	r2, [r0, #2]
    54ae:	3a01      	subs	r2, #1
    54b0:	0a5d      	lsrs	r5, r3, #9
    54b2:	4015      	ands	r5, r2
    54b4:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    54b6:	2d00      	cmp	r5, #0
    54b8:	d10b      	bne.n	54d2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    54ba:	2b00      	cmp	r3, #0
    54bc:	d000      	beq.n	54c0 <f_write+0x164>
    54be:	e77b      	b.n	53b8 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    54c0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    54c2:	2b00      	cmp	r3, #0
    54c4:	d100      	bne.n	54c8 <f_write+0x16c>
    54c6:	e771      	b.n	53ac <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    54c8:	2b01      	cmp	r3, #1
    54ca:	d086      	beq.n	53da <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    54cc:	1c5a      	adds	r2, r3, #1
    54ce:	d08b      	beq.n	53e8 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    54d0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    54d2:	6820      	ldr	r0, [r4, #0]
    54d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    54d6:	69a2      	ldr	r2, [r4, #24]
    54d8:	4293      	cmp	r3, r2
    54da:	d08c      	beq.n	53f6 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    54dc:	6823      	ldr	r3, [r4, #0]
    54de:	469a      	mov	sl, r3
    54e0:	6961      	ldr	r1, [r4, #20]
    54e2:	0018      	movs	r0, r3
    54e4:	4b29      	ldr	r3, [pc, #164]	; (558c <f_write+0x230>)
    54e6:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    54e8:	2800      	cmp	r0, #0
    54ea:	d091      	beq.n	5410 <f_write+0xb4>
			sect += csect;
    54ec:	4680      	mov	r8, r0
    54ee:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    54f0:	0a73      	lsrs	r3, r6, #9
    54f2:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    54f4:	d0a8      	beq.n	5448 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    54f6:	4653      	mov	r3, sl
    54f8:	789b      	ldrb	r3, [r3, #2]
    54fa:	465a      	mov	r2, fp
    54fc:	18aa      	adds	r2, r5, r2
    54fe:	429a      	cmp	r2, r3
    5500:	d901      	bls.n	5506 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    5502:	1b5b      	subs	r3, r3, r5
    5504:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    5506:	465b      	mov	r3, fp
    5508:	466a      	mov	r2, sp
    550a:	71d3      	strb	r3, [r2, #7]
    550c:	79d3      	ldrb	r3, [r2, #7]
    550e:	4652      	mov	r2, sl
    5510:	7850      	ldrb	r0, [r2, #1]
    5512:	4642      	mov	r2, r8
    5514:	0039      	movs	r1, r7
    5516:	4d1e      	ldr	r5, [pc, #120]	; (5590 <f_write+0x234>)
    5518:	47a8      	blx	r5
    551a:	2800      	cmp	r0, #0
    551c:	d000      	beq.n	5520 <f_write+0x1c4>
    551e:	e77f      	b.n	5420 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5520:	6823      	ldr	r3, [r4, #0]
    5522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5524:	4641      	mov	r1, r8
    5526:	1a50      	subs	r0, r2, r1
    5528:	4583      	cmp	fp, r0
    552a:	d900      	bls.n	552e <f_write+0x1d2>
    552c:	e780      	b.n	5430 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    552e:	465b      	mov	r3, fp
    5530:	025d      	lsls	r5, r3, #9
				continue;
    5532:	e7ac      	b.n	548e <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5534:	2100      	movs	r1, #0
    5536:	4650      	mov	r0, sl
    5538:	4b12      	ldr	r3, [pc, #72]	; (5584 <f_write+0x228>)
    553a:	4798      	blx	r3
    553c:	2800      	cmp	r0, #0
    553e:	d103      	bne.n	5548 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5540:	6823      	ldr	r3, [r4, #0]
    5542:	4642      	mov	r2, r8
    5544:	62da      	str	r2, [r3, #44]	; 0x2c
    5546:	e783      	b.n	5450 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5548:	79a2      	ldrb	r2, [r4, #6]
    554a:	2380      	movs	r3, #128	; 0x80
    554c:	425b      	negs	r3, r3
    554e:	4313      	orrs	r3, r2
    5550:	71a3      	strb	r3, [r4, #6]
    5552:	2301      	movs	r3, #1
    5554:	9300      	str	r3, [sp, #0]
    5556:	e009      	b.n	556c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5558:	79a2      	ldrb	r2, [r4, #6]
    555a:	2380      	movs	r3, #128	; 0x80
    555c:	425b      	negs	r3, r3
    555e:	4313      	orrs	r3, r2
    5560:	71a3      	strb	r3, [r4, #6]
    5562:	2301      	movs	r3, #1
    5564:	9300      	str	r3, [sp, #0]
    5566:	e001      	b.n	556c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5568:	2302      	movs	r3, #2
    556a:	9300      	str	r3, [sp, #0]
}
    556c:	9800      	ldr	r0, [sp, #0]
    556e:	b003      	add	sp, #12
    5570:	bc3c      	pop	{r2, r3, r4, r5}
    5572:	4690      	mov	r8, r2
    5574:	4699      	mov	r9, r3
    5576:	46a2      	mov	sl, r4
    5578:	46ab      	mov	fp, r5
    557a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    557c:	00003e91 	.word	0x00003e91
    5580:	00004691 	.word	0x00004691
    5584:	00004315 	.word	0x00004315
    5588:	00003e35 	.word	0x00003e35
    558c:	00003e5b 	.word	0x00003e5b
    5590:	00003cf5 	.word	0x00003cf5

00005594 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    5594:	b570      	push	{r4, r5, r6, lr}
    5596:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5598:	8881      	ldrh	r1, [r0, #4]
    559a:	6800      	ldr	r0, [r0, #0]
    559c:	4b1c      	ldr	r3, [pc, #112]	; (5610 <f_sync+0x7c>)
    559e:	4798      	blx	r3
	if (res == FR_OK) {
    55a0:	2800      	cmp	r0, #0
    55a2:	d102      	bne.n	55aa <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    55a4:	79a3      	ldrb	r3, [r4, #6]
    55a6:	069b      	lsls	r3, r3, #26
    55a8:	d400      	bmi.n	55ac <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    55aa:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    55ac:	69e1      	ldr	r1, [r4, #28]
    55ae:	6820      	ldr	r0, [r4, #0]
    55b0:	4b18      	ldr	r3, [pc, #96]	; (5614 <f_sync+0x80>)
    55b2:	4798      	blx	r3
			if (res == FR_OK) {
    55b4:	2800      	cmp	r0, #0
    55b6:	d1f8      	bne.n	55aa <f_sync+0x16>
				dir = fp->dir_ptr;
    55b8:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    55ba:	7aeb      	ldrb	r3, [r5, #11]
    55bc:	2220      	movs	r2, #32
    55be:	4313      	orrs	r3, r2
    55c0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    55c2:	7b23      	ldrb	r3, [r4, #12]
    55c4:	772b      	strb	r3, [r5, #28]
    55c6:	89a3      	ldrh	r3, [r4, #12]
    55c8:	0a1b      	lsrs	r3, r3, #8
    55ca:	776b      	strb	r3, [r5, #29]
    55cc:	89e3      	ldrh	r3, [r4, #14]
    55ce:	77ab      	strb	r3, [r5, #30]
    55d0:	7be3      	ldrb	r3, [r4, #15]
    55d2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    55d4:	7c23      	ldrb	r3, [r4, #16]
    55d6:	76ab      	strb	r3, [r5, #26]
    55d8:	8a23      	ldrh	r3, [r4, #16]
    55da:	0a1b      	lsrs	r3, r3, #8
    55dc:	76eb      	strb	r3, [r5, #27]
    55de:	8a63      	ldrh	r3, [r4, #18]
    55e0:	752b      	strb	r3, [r5, #20]
    55e2:	8a63      	ldrh	r3, [r4, #18]
    55e4:	0a1b      	lsrs	r3, r3, #8
    55e6:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    55e8:	4b0b      	ldr	r3, [pc, #44]	; (5618 <f_sync+0x84>)
    55ea:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    55ec:	75a8      	strb	r0, [r5, #22]
    55ee:	0a03      	lsrs	r3, r0, #8
    55f0:	75eb      	strb	r3, [r5, #23]
    55f2:	0c03      	lsrs	r3, r0, #16
    55f4:	762b      	strb	r3, [r5, #24]
    55f6:	0e00      	lsrs	r0, r0, #24
    55f8:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    55fa:	79a3      	ldrb	r3, [r4, #6]
    55fc:	2220      	movs	r2, #32
    55fe:	4393      	bics	r3, r2
    5600:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    5602:	2301      	movs	r3, #1
    5604:	6822      	ldr	r2, [r4, #0]
    5606:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5608:	6820      	ldr	r0, [r4, #0]
    560a:	4b04      	ldr	r3, [pc, #16]	; (561c <f_sync+0x88>)
    560c:	4798      	blx	r3
    560e:	e7cc      	b.n	55aa <f_sync+0x16>
    5610:	00003e91 	.word	0x00003e91
    5614:	00004315 	.word	0x00004315
    5618:	00003de5 	.word	0x00003de5
    561c:	00004d6d 	.word	0x00004d6d

00005620 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5620:	b510      	push	{r4, lr}
    5622:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5624:	4b03      	ldr	r3, [pc, #12]	; (5634 <f_close+0x14>)
    5626:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5628:	2800      	cmp	r0, #0
    562a:	d101      	bne.n	5630 <f_close+0x10>
    562c:	2300      	movs	r3, #0
    562e:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5630:	bd10      	pop	{r4, pc}
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	00005595 	.word	0x00005595

00005638 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    563a:	46de      	mov	lr, fp
    563c:	4657      	mov	r7, sl
    563e:	464e      	mov	r6, r9
    5640:	4645      	mov	r5, r8
    5642:	b5e0      	push	{r5, r6, r7, lr}
    5644:	0004      	movs	r4, r0
    5646:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5648:	8881      	ldrh	r1, [r0, #4]
    564a:	6800      	ldr	r0, [r0, #0]
    564c:	4b57      	ldr	r3, [pc, #348]	; (57ac <f_lseek+0x174>)
    564e:	4798      	blx	r3
    5650:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5652:	d000      	beq.n	5656 <f_lseek+0x1e>
    5654:	e0a2      	b.n	579c <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    5656:	79a3      	ldrb	r3, [r4, #6]
    5658:	b25a      	sxtb	r2, r3
    565a:	2a00      	cmp	r2, #0
    565c:	da00      	bge.n	5660 <f_lseek+0x28>
    565e:	e09c      	b.n	579a <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5660:	68e2      	ldr	r2, [r4, #12]
    5662:	42b2      	cmp	r2, r6
    5664:	d202      	bcs.n	566c <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5666:	079b      	lsls	r3, r3, #30
    5668:	d400      	bmi.n	566c <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    566a:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    566c:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    566e:	2300      	movs	r3, #0
    5670:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    5672:	2e00      	cmp	r6, #0
    5674:	d100      	bne.n	5678 <f_lseek+0x40>
    5676:	e091      	b.n	579c <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5678:	6823      	ldr	r3, [r4, #0]
    567a:	4699      	mov	r9, r3
    567c:	789f      	ldrb	r7, [r3, #2]
    567e:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    5680:	2800      	cmp	r0, #0
    5682:	d013      	beq.n	56ac <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    5684:	1e43      	subs	r3, r0, #1
    5686:	4698      	mov	r8, r3
    5688:	1e70      	subs	r0, r6, #1
    568a:	4b49      	ldr	r3, [pc, #292]	; (57b0 <f_lseek+0x178>)
    568c:	469a      	mov	sl, r3
    568e:	0039      	movs	r1, r7
    5690:	4798      	blx	r3
    5692:	4683      	mov	fp, r0
    5694:	0039      	movs	r1, r7
    5696:	4640      	mov	r0, r8
    5698:	47d0      	blx	sl
			if (ifptr > 0 &&
    569a:	4583      	cmp	fp, r0
    569c:	d306      	bcc.n	56ac <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    569e:	4278      	negs	r0, r7
    56a0:	4643      	mov	r3, r8
    56a2:	4003      	ands	r3, r0
    56a4:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    56a6:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    56a8:	6960      	ldr	r0, [r4, #20]
    56aa:	e003      	b.n	56b4 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    56ac:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    56ae:	2800      	cmp	r0, #0
    56b0:	d00b      	beq.n	56ca <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    56b2:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    56b4:	2800      	cmp	r0, #0
    56b6:	d060      	beq.n	577a <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    56b8:	42be      	cmp	r6, r7
    56ba:	d93a      	bls.n	5732 <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    56bc:	2302      	movs	r3, #2
    56be:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    56c0:	4b3c      	ldr	r3, [pc, #240]	; (57b4 <f_lseek+0x17c>)
    56c2:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    56c4:	4b3c      	ldr	r3, [pc, #240]	; (57b8 <f_lseek+0x180>)
    56c6:	4699      	mov	r9, r3
    56c8:	e029      	b.n	571e <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    56ca:	2100      	movs	r1, #0
    56cc:	4648      	mov	r0, r9
    56ce:	4b39      	ldr	r3, [pc, #228]	; (57b4 <f_lseek+0x17c>)
    56d0:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    56d2:	2801      	cmp	r0, #1
    56d4:	d003      	beq.n	56de <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    56d6:	1c43      	adds	r3, r0, #1
    56d8:	d008      	beq.n	56ec <f_lseek+0xb4>
					fp->sclust = clst;
    56da:	6120      	str	r0, [r4, #16]
    56dc:	e7e9      	b.n	56b2 <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    56de:	79a2      	ldrb	r2, [r4, #6]
    56e0:	2380      	movs	r3, #128	; 0x80
    56e2:	425b      	negs	r3, r3
    56e4:	4313      	orrs	r3, r2
    56e6:	71a3      	strb	r3, [r4, #6]
    56e8:	2502      	movs	r5, #2
    56ea:	e057      	b.n	579c <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    56ec:	79a2      	ldrb	r2, [r4, #6]
    56ee:	2380      	movs	r3, #128	; 0x80
    56f0:	425b      	negs	r3, r3
    56f2:	4313      	orrs	r3, r2
    56f4:	71a3      	strb	r3, [r4, #6]
    56f6:	2501      	movs	r5, #1
    56f8:	e050      	b.n	579c <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    56fa:	0001      	movs	r1, r0
    56fc:	6820      	ldr	r0, [r4, #0]
    56fe:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5700:	1c43      	adds	r3, r0, #1
    5702:	d028      	beq.n	5756 <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5704:	2801      	cmp	r0, #1
    5706:	d92d      	bls.n	5764 <f_lseek+0x12c>
    5708:	6823      	ldr	r3, [r4, #0]
    570a:	699b      	ldr	r3, [r3, #24]
    570c:	4298      	cmp	r0, r3
    570e:	d229      	bcs.n	5764 <f_lseek+0x12c>
					fp->clust = clst;
    5710:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    5712:	68a3      	ldr	r3, [r4, #8]
    5714:	19db      	adds	r3, r3, r7
    5716:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    5718:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    571a:	42b7      	cmp	r7, r6
    571c:	d209      	bcs.n	5732 <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    571e:	79a3      	ldrb	r3, [r4, #6]
    5720:	4642      	mov	r2, r8
    5722:	421a      	tst	r2, r3
    5724:	d0e9      	beq.n	56fa <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5726:	0001      	movs	r1, r0
    5728:	6820      	ldr	r0, [r4, #0]
    572a:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    572c:	2800      	cmp	r0, #0
    572e:	d1e7      	bne.n	5700 <f_lseek+0xc8>
							ofs = bcs; break;
    5730:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    5732:	68a3      	ldr	r3, [r4, #8]
    5734:	199b      	adds	r3, r3, r6
    5736:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    5738:	05f3      	lsls	r3, r6, #23
    573a:	d01d      	beq.n	5778 <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    573c:	0001      	movs	r1, r0
    573e:	6820      	ldr	r0, [r4, #0]
    5740:	4b1e      	ldr	r3, [pc, #120]	; (57bc <f_lseek+0x184>)
    5742:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5744:	2800      	cmp	r0, #0
    5746:	d114      	bne.n	5772 <f_lseek+0x13a>
    5748:	79a2      	ldrb	r2, [r4, #6]
    574a:	2380      	movs	r3, #128	; 0x80
    574c:	425b      	negs	r3, r3
    574e:	4313      	orrs	r3, r2
    5750:	71a3      	strb	r3, [r4, #6]
    5752:	2502      	movs	r5, #2
    5754:	e022      	b.n	579c <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5756:	79a2      	ldrb	r2, [r4, #6]
    5758:	2380      	movs	r3, #128	; 0x80
    575a:	425b      	negs	r3, r3
    575c:	4313      	orrs	r3, r2
    575e:	71a3      	strb	r3, [r4, #6]
    5760:	2501      	movs	r5, #1
    5762:	e01b      	b.n	579c <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5764:	79a2      	ldrb	r2, [r4, #6]
    5766:	2380      	movs	r3, #128	; 0x80
    5768:	425b      	negs	r3, r3
    576a:	4313      	orrs	r3, r2
    576c:	71a3      	strb	r3, [r4, #6]
    576e:	2502      	movs	r5, #2
    5770:	e014      	b.n	579c <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    5772:	0a76      	lsrs	r6, r6, #9
    5774:	1830      	adds	r0, r6, r0
    5776:	e000      	b.n	577a <f_lseek+0x142>
		fp->fptr = nsect = 0;
    5778:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    577a:	68a3      	ldr	r3, [r4, #8]
    577c:	05da      	lsls	r2, r3, #23
    577e:	d003      	beq.n	5788 <f_lseek+0x150>
    5780:	69a2      	ldr	r2, [r4, #24]
    5782:	4290      	cmp	r0, r2
    5784:	d000      	beq.n	5788 <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5786:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    5788:	68e2      	ldr	r2, [r4, #12]
    578a:	4293      	cmp	r3, r2
    578c:	d906      	bls.n	579c <f_lseek+0x164>
			fp->fsize = fp->fptr;
    578e:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    5790:	79a3      	ldrb	r3, [r4, #6]
    5792:	2220      	movs	r2, #32
    5794:	4313      	orrs	r3, r2
    5796:	71a3      	strb	r3, [r4, #6]
    5798:	e000      	b.n	579c <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    579a:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    579c:	0028      	movs	r0, r5
    579e:	bc3c      	pop	{r2, r3, r4, r5}
    57a0:	4690      	mov	r8, r2
    57a2:	4699      	mov	r9, r3
    57a4:	46a2      	mov	sl, r4
    57a6:	46ab      	mov	fp, r5
    57a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57aa:	46c0      	nop			; (mov r8, r8)
    57ac:	00003e91 	.word	0x00003e91
    57b0:	00008b85 	.word	0x00008b85
    57b4:	00004691 	.word	0x00004691
    57b8:	000043b5 	.word	0x000043b5
    57bc:	00003e5b 	.word	0x00003e5b

000057c0 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    57c0:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    57c2:	287f      	cmp	r0, #127	; 0x7f
    57c4:	d911      	bls.n	57ea <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    57c6:	2900      	cmp	r1, #0
    57c8:	d111      	bne.n	57ee <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    57ca:	28c7      	cmp	r0, #199	; 0xc7
    57cc:	d017      	beq.n	57fe <ff_convert+0x3e>
    57ce:	4a0d      	ldr	r2, [pc, #52]	; (5804 <ff_convert+0x44>)
    57d0:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    57d2:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    57d4:	8811      	ldrh	r1, [r2, #0]
    57d6:	4281      	cmp	r1, r0
    57d8:	d004      	beq.n	57e4 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    57da:	3301      	adds	r3, #1
    57dc:	b29b      	uxth	r3, r3
    57de:	3202      	adds	r2, #2
    57e0:	2b80      	cmp	r3, #128	; 0x80
    57e2:	d1f7      	bne.n	57d4 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    57e4:	3380      	adds	r3, #128	; 0x80
    57e6:	20ff      	movs	r0, #255	; 0xff
    57e8:	4003      	ands	r3, r0
		}
	}

	return c;
}
    57ea:	0018      	movs	r0, r3
    57ec:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    57ee:	2300      	movs	r3, #0
    57f0:	28ff      	cmp	r0, #255	; 0xff
    57f2:	d8fa      	bhi.n	57ea <ff_convert+0x2a>
    57f4:	3880      	subs	r0, #128	; 0x80
    57f6:	0040      	lsls	r0, r0, #1
    57f8:	4b02      	ldr	r3, [pc, #8]	; (5804 <ff_convert+0x44>)
    57fa:	5ac3      	ldrh	r3, [r0, r3]
    57fc:	e7f5      	b.n	57ea <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    57fe:	2300      	movs	r3, #0
    5800:	e7f0      	b.n	57e4 <ff_convert+0x24>
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	0000a4c4 	.word	0x0000a4c4

00005808 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5808:	2861      	cmp	r0, #97	; 0x61
    580a:	d014      	beq.n	5836 <ff_wtoupper+0x2e>
    580c:	4b0b      	ldr	r3, [pc, #44]	; (583c <ff_wtoupper+0x34>)
    580e:	3304      	adds	r3, #4
    5810:	2101      	movs	r1, #1
    5812:	2262      	movs	r2, #98	; 0x62
    5814:	4290      	cmp	r0, r2
    5816:	d007      	beq.n	5828 <ff_wtoupper+0x20>
    5818:	3101      	adds	r1, #1
    581a:	3302      	adds	r3, #2
    581c:	1e9a      	subs	r2, r3, #2
    581e:	8812      	ldrh	r2, [r2, #0]
    5820:	2a00      	cmp	r2, #0
    5822:	d1f7      	bne.n	5814 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    5824:	0003      	movs	r3, r0
    5826:	e004      	b.n	5832 <ff_wtoupper+0x2a>
    5828:	1e03      	subs	r3, r0, #0
    582a:	d002      	beq.n	5832 <ff_wtoupper+0x2a>
    582c:	0049      	lsls	r1, r1, #1
    582e:	4b04      	ldr	r3, [pc, #16]	; (5840 <ff_wtoupper+0x38>)
    5830:	5acb      	ldrh	r3, [r1, r3]
}
    5832:	0018      	movs	r0, r3
    5834:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5836:	2100      	movs	r1, #0
    5838:	e7f8      	b.n	582c <ff_wtoupper+0x24>
    583a:	46c0      	nop			; (mov r8, r8)
    583c:	0000a5c4 	.word	0x0000a5c4
    5840:	0000a7a4 	.word	0x0000a7a4

00005844 <audio_sync_reached_callback>:
	return true;
}

static void audio_sync_reached_callback(void)
{
	sync_reached = true;
    5844:	2201      	movs	r2, #1
    5846:	4b01      	ldr	r3, [pc, #4]	; (584c <audio_sync_reached_callback+0x8>)
    5848:	701a      	strb	r2, [r3, #0]
}
    584a:	4770      	bx	lr
    584c:	200002db 	.word	0x200002db

00005850 <audio_in_init>:
{
    5850:	b5f0      	push	{r4, r5, r6, r7, lr}
    5852:	b091      	sub	sp, #68	; 0x44
	config->input_pull = PORT_PIN_PULL_UP;
    5854:	a90f      	add	r1, sp, #60	; 0x3c
    5856:	2501      	movs	r5, #1
    5858:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    585a:	2600      	movs	r6, #0
    585c:	708e      	strb	r6, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    585e:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(ADC_CONV_PIN, &pin_conf);
    5860:	2014      	movs	r0, #20
    5862:	4f28      	ldr	r7, [pc, #160]	; (5904 <audio_in_init+0xb4>)
    5864:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5866:	2280      	movs	r2, #128	; 0x80
    5868:	0352      	lsls	r2, r2, #13
    586a:	4b27      	ldr	r3, [pc, #156]	; (5908 <audio_in_init+0xb8>)
    586c:	619a      	str	r2, [r3, #24]
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    586e:	4c27      	ldr	r4, [pc, #156]	; (590c <audio_in_init+0xbc>)
    5870:	232f      	movs	r3, #47	; 0x2f
    5872:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    5874:	7066      	strb	r6, [r4, #1]
	slave->address         = config->address;
    5876:	70a6      	strb	r6, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5878:	466b      	mov	r3, sp
    587a:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    587c:	709e      	strb	r6, [r3, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    587e:	701d      	strb	r5, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5880:	4669      	mov	r1, sp
    5882:	202f      	movs	r0, #47	; 0x2f
    5884:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    5886:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5888:	09d1      	lsrs	r1, r2, #7
		return NULL;
    588a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    588c:	2900      	cmp	r1, #0
    588e:	d104      	bne.n	589a <audio_in_init+0x4a>
		return &(ports[port_index]->Group[group_index]);
    5890:	0953      	lsrs	r3, r2, #5
    5892:	01db      	lsls	r3, r3, #7
    5894:	491c      	ldr	r1, [pc, #112]	; (5908 <audio_in_init+0xb8>)
    5896:	468c      	mov	ip, r1
    5898:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    589a:	211f      	movs	r1, #31
    589c:	4011      	ands	r1, r2
    589e:	2201      	movs	r2, #1
    58a0:	0010      	movs	r0, r2
    58a2:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    58a4:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    58a6:	ac01      	add	r4, sp, #4
    58a8:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    58aa:	2300      	movs	r3, #0
    58ac:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    58ae:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    58b0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    58b2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    58b4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    58b6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    58b8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    58ba:	3223      	adds	r2, #35	; 0x23
    58bc:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    58be:	3a18      	subs	r2, #24
    58c0:	2100      	movs	r1, #0
    58c2:	a807      	add	r0, sp, #28
    58c4:	4b12      	ldr	r3, [pc, #72]	; (5910 <audio_in_init+0xc0>)
    58c6:	4798      	blx	r3
	config_spi_master.mux_setting = ADC_SPI_MUX_SETTING;
    58c8:	2380      	movs	r3, #128	; 0x80
    58ca:	039b      	lsls	r3, r3, #14
    58cc:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = ADC_SPI_PINMUX_PAD0;
    58ce:	4b11      	ldr	r3, [pc, #68]	; (5914 <audio_in_init+0xc4>)
    58d0:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = ADC_SPI_PINMUX_PAD1;
    58d2:	4b11      	ldr	r3, [pc, #68]	; (5918 <audio_in_init+0xc8>)
    58d4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = ADC_SPI_PINMUX_PAD2;
    58d6:	4b11      	ldr	r3, [pc, #68]	; (591c <audio_in_init+0xcc>)
    58d8:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = ADC_SPI_PINMUX_PAD3;
    58da:	2301      	movs	r3, #1
    58dc:	425b      	negs	r3, r3
    58de:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate = ADC_SPI_BAUDRATE;
    58e0:	4b0f      	ldr	r3, [pc, #60]	; (5920 <audio_in_init+0xd0>)
    58e2:	61a3      	str	r3, [r4, #24]
	spi_init(&adc_spi_module, ADC_SPI_MODULE, &config_spi_master);
    58e4:	4d0f      	ldr	r5, [pc, #60]	; (5924 <audio_in_init+0xd4>)
    58e6:	0022      	movs	r2, r4
    58e8:	490f      	ldr	r1, [pc, #60]	; (5928 <audio_in_init+0xd8>)
    58ea:	0028      	movs	r0, r5
    58ec:	4b0f      	ldr	r3, [pc, #60]	; (592c <audio_in_init+0xdc>)
    58ee:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    58f0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    58f2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    58f4:	2b00      	cmp	r3, #0
    58f6:	d1fc      	bne.n	58f2 <audio_in_init+0xa2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    58f8:	6813      	ldr	r3, [r2, #0]
    58fa:	2102      	movs	r1, #2
    58fc:	430b      	orrs	r3, r1
    58fe:	6013      	str	r3, [r2, #0]
}
    5900:	b011      	add	sp, #68	; 0x44
    5902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5904:	000086ad 	.word	0x000086ad
    5908:	41004400 	.word	0x41004400
    590c:	20000658 	.word	0x20000658
    5910:	00009173 	.word	0x00009173
    5914:	00100002 	.word	0x00100002
    5918:	00110002 	.word	0x00110002
    591c:	00120002 	.word	0x00120002
    5920:	003d0900 	.word	0x003d0900
    5924:	200005f4 	.word	0x200005f4
    5928:	42000c00 	.word	0x42000c00
    592c:	00007569 	.word	0x00007569

00005930 <audio_record_init>:
bool audio_record_init(void) {
    5930:	b510      	push	{r4, lr}
    5932:	b086      	sub	sp, #24
	char file_name[] = "180212_140925.wav";
    5934:	aa01      	add	r2, sp, #4
    5936:	4b1b      	ldr	r3, [pc, #108]	; (59a4 <audio_record_init+0x74>)
    5938:	cb13      	ldmia	r3!, {r0, r1, r4}
    593a:	c213      	stmia	r2!, {r0, r1, r4}
    593c:	0011      	movs	r1, r2
    593e:	681a      	ldr	r2, [r3, #0]
    5940:	600a      	str	r2, [r1, #0]
    5942:	889b      	ldrh	r3, [r3, #4]
    5944:	808b      	strh	r3, [r1, #4]
	memset(&file_sys, 0, sizeof(FATFS));
    5946:	4c18      	ldr	r4, [pc, #96]	; (59a8 <audio_record_init+0x78>)
    5948:	228c      	movs	r2, #140	; 0x8c
    594a:	0092      	lsls	r2, r2, #2
    594c:	2100      	movs	r1, #0
    594e:	0020      	movs	r0, r4
    5950:	4b16      	ldr	r3, [pc, #88]	; (59ac <audio_record_init+0x7c>)
    5952:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_SPI_MEM, &file_sys);
    5954:	0021      	movs	r1, r4
    5956:	2000      	movs	r0, #0
    5958:	4b15      	ldr	r3, [pc, #84]	; (59b0 <audio_record_init+0x80>)
    595a:	4798      	blx	r3
		return false;
    595c:	2300      	movs	r3, #0
	if(res == FR_INVALID_DRIVE) {
    595e:	280b      	cmp	r0, #11
    5960:	d01d      	beq.n	599e <audio_record_init+0x6e>
	res = f_open(&file_object, file_name, FA_CREATE_ALWAYS | FA_WRITE);
    5962:	220a      	movs	r2, #10
    5964:	a901      	add	r1, sp, #4
    5966:	4813      	ldr	r0, [pc, #76]	; (59b4 <audio_record_init+0x84>)
    5968:	4b13      	ldr	r3, [pc, #76]	; (59b8 <audio_record_init+0x88>)
    596a:	4798      	blx	r3
	if(res != FR_OK) {
    596c:	2800      	cmp	r0, #0
    596e:	d111      	bne.n	5994 <audio_record_init+0x64>
	res = f_write(&file_object, wave_header, 44, (UINT *)&bytes);
    5970:	466b      	mov	r3, sp
    5972:	222c      	movs	r2, #44	; 0x2c
    5974:	4911      	ldr	r1, [pc, #68]	; (59bc <audio_record_init+0x8c>)
    5976:	480f      	ldr	r0, [pc, #60]	; (59b4 <audio_record_init+0x84>)
    5978:	4c11      	ldr	r4, [pc, #68]	; (59c0 <audio_record_init+0x90>)
    597a:	47a0      	blx	r4
	return true;
    597c:	2301      	movs	r3, #1
	if(res != FR_OK) {
    597e:	2800      	cmp	r0, #0
    5980:	d00d      	beq.n	599e <audio_record_init+0x6e>
		printf("Error while writing WAV header: #%d\n\r", res);
    5982:	0001      	movs	r1, r0
    5984:	480f      	ldr	r0, [pc, #60]	; (59c4 <audio_record_init+0x94>)
    5986:	4b10      	ldr	r3, [pc, #64]	; (59c8 <audio_record_init+0x98>)
    5988:	4798      	blx	r3
		f_close(&file_object);
    598a:	480a      	ldr	r0, [pc, #40]	; (59b4 <audio_record_init+0x84>)
    598c:	4b0f      	ldr	r3, [pc, #60]	; (59cc <audio_record_init+0x9c>)
    598e:	4798      	blx	r3
		return false;
    5990:	2300      	movs	r3, #0
    5992:	e004      	b.n	599e <audio_record_init+0x6e>
		printf("Error while opening file: #%d\n\r", res);
    5994:	0001      	movs	r1, r0
    5996:	480e      	ldr	r0, [pc, #56]	; (59d0 <audio_record_init+0xa0>)
    5998:	4b0b      	ldr	r3, [pc, #44]	; (59c8 <audio_record_init+0x98>)
    599a:	4798      	blx	r3
		return false;
    599c:	2300      	movs	r3, #0
}
    599e:	0018      	movs	r0, r3
    59a0:	b006      	add	sp, #24
    59a2:	bd10      	pop	{r4, pc}
    59a4:	0000a9cc 	.word	0x0000a9cc
    59a8:	20000a5c 	.word	0x20000a5c
    59ac:	00009173 	.word	0x00009173
    59b0:	000051a5 	.word	0x000051a5
    59b4:	20000600 	.word	0x20000600
    59b8:	000051d5 	.word	0x000051d5
    59bc:	200000ac 	.word	0x200000ac
    59c0:	0000535d 	.word	0x0000535d
    59c4:	0000a9a4 	.word	0x0000a9a4
    59c8:	00009185 	.word	0x00009185
    59cc:	00005621 	.word	0x00005621
    59d0:	0000a984 	.word	0x0000a984

000059d4 <audio_record_close>:
{
    59d4:	b570      	push	{r4, r5, r6, lr}
    59d6:	b082      	sub	sp, #8
	((uint16_t *)&wave_header)[WAVE_FORMAT_NUM_CHANNEL_OFFSET/2] = AUDIO_NUM_CHANNELS;
    59d8:	4c15      	ldr	r4, [pc, #84]	; (5a30 <audio_record_close+0x5c>)
    59da:	2302      	movs	r3, #2
    59dc:	82e3      	strh	r3, [r4, #22]
	((uint16_t *)&wave_header)[WAVE_FORMAT_BITS_PER_SAMPLE_OFFSET/2] = AUDIO_BITS_PER_SAMPLE;
    59de:	330e      	adds	r3, #14
    59e0:	8463      	strh	r3, [r4, #34]	; 0x22
	((uint16_t *)&wave_header)[WAVE_FORMAT_BLOCK_ALIGN_OFFSET/2] = AUDIO_BITS_PER_SAMPLE/8 * AUDIO_NUM_CHANNELS;
    59e2:	3b0c      	subs	r3, #12
    59e4:	8423      	strh	r3, [r4, #32]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SAMPLE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE;
    59e6:	4b13      	ldr	r3, [pc, #76]	; (5a34 <audio_record_close+0x60>)
    59e8:	61a3      	str	r3, [r4, #24]
	((uint32_t *)&wave_header)[WAVE_FORMAT_BYTE_RATE_OFFSET/4] = AUDIO_SAMPLING_RATE * AUDIO_NUM_CHANNELS * AUDIO_BITS_PER_SAMPLE/8;
    59ea:	4b13      	ldr	r3, [pc, #76]	; (5a38 <audio_record_close+0x64>)
    59ec:	61e3      	str	r3, [r4, #28]
	((uint32_t *)&wave_header)[WAVE_FORMAT_SUBCHUNK2_SIZE_OFFSET/4] = audio_total_samples * AUDIO_BITS_PER_SAMPLE/8;
    59ee:	4e13      	ldr	r6, [pc, #76]	; (5a3c <audio_record_close+0x68>)
    59f0:	6833      	ldr	r3, [r6, #0]
    59f2:	011b      	lsls	r3, r3, #4
    59f4:	08db      	lsrs	r3, r3, #3
    59f6:	62a3      	str	r3, [r4, #40]	; 0x28
	((uint32_t *)&wave_header)[WAVE_FORMAT_CHUNK_SIZE_OFFSET/4] = (audio_total_samples * AUDIO_BITS_PER_SAMPLE/8) + 36;
    59f8:	3324      	adds	r3, #36	; 0x24
    59fa:	6063      	str	r3, [r4, #4]
	f_lseek(&file_object, 0);
    59fc:	4d10      	ldr	r5, [pc, #64]	; (5a40 <audio_record_close+0x6c>)
    59fe:	2100      	movs	r1, #0
    5a00:	0028      	movs	r0, r5
    5a02:	4b10      	ldr	r3, [pc, #64]	; (5a44 <audio_record_close+0x70>)
    5a04:	4798      	blx	r3
	res = f_write(&file_object, wave_header, 44, &bytes);
    5a06:	ab01      	add	r3, sp, #4
    5a08:	222c      	movs	r2, #44	; 0x2c
    5a0a:	0021      	movs	r1, r4
    5a0c:	0028      	movs	r0, r5
    5a0e:	4c0e      	ldr	r4, [pc, #56]	; (5a48 <audio_record_close+0x74>)
    5a10:	47a0      	blx	r4
    5a12:	0004      	movs	r4, r0
	f_close(&file_object);
    5a14:	0028      	movs	r0, r5
    5a16:	4b0d      	ldr	r3, [pc, #52]	; (5a4c <audio_record_close+0x78>)
    5a18:	4798      	blx	r3
	audio_total_samples = 0;
    5a1a:	2300      	movs	r3, #0
    5a1c:	6033      	str	r3, [r6, #0]
    5a1e:	2280      	movs	r2, #128	; 0x80
    5a20:	0152      	lsls	r2, r2, #5
    5a22:	4b0b      	ldr	r3, [pc, #44]	; (5a50 <audio_record_close+0x7c>)
    5a24:	619a      	str	r2, [r3, #24]
	if(res != FR_OK) {
    5a26:	4260      	negs	r0, r4
    5a28:	4160      	adcs	r0, r4
	return retVal;
    5a2a:	b2c0      	uxtb	r0, r0
}
    5a2c:	b002      	add	sp, #8
    5a2e:	bd70      	pop	{r4, r5, r6, pc}
    5a30:	200000ac 	.word	0x200000ac
    5a34:	0000ac44 	.word	0x0000ac44
    5a38:	0002b110 	.word	0x0002b110
    5a3c:	200002d0 	.word	0x200002d0
    5a40:	20000600 	.word	0x20000600
    5a44:	00005639 	.word	0x00005639
    5a48:	0000535d 	.word	0x0000535d
    5a4c:	00005621 	.word	0x00005621
    5a50:	41004400 	.word	0x41004400

00005a54 <audio_record_1samp>:
void audio_record_1samp(bool ub) {
    5a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a56:	b083      	sub	sp, #12
    5a58:	0006      	movs	r6, r0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5a5a:	4c0e      	ldr	r4, [pc, #56]	; (5a94 <audio_record_1samp+0x40>)
    5a5c:	2580      	movs	r5, #128	; 0x80
    5a5e:	036d      	lsls	r5, r5, #13
    5a60:	6165      	str	r5, [r4, #20]
	spi_read_buffer_wait(&adc_spi_module, adc_vals, 2, 0xFF);
    5a62:	23ff      	movs	r3, #255	; 0xff
    5a64:	2202      	movs	r2, #2
    5a66:	a901      	add	r1, sp, #4
    5a68:	480b      	ldr	r0, [pc, #44]	; (5a98 <audio_record_1samp+0x44>)
    5a6a:	4f0c      	ldr	r7, [pc, #48]	; (5a9c <audio_record_1samp+0x48>)
    5a6c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    5a6e:	61a5      	str	r5, [r4, #24]
	if(ub) {
    5a70:	2e00      	cmp	r6, #0
    5a72:	d106      	bne.n	5a82 <audio_record_1samp+0x2e>
		audio_buffer[0][0] = 0x12;
    5a74:	4b0a      	ldr	r3, [pc, #40]	; (5aa0 <audio_record_1samp+0x4c>)
    5a76:	2212      	movs	r2, #18
    5a78:	701a      	strb	r2, [r3, #0]
		audio_buffer[0][1] = 0x34;
    5a7a:	3222      	adds	r2, #34	; 0x22
    5a7c:	705a      	strb	r2, [r3, #1]
}
    5a7e:	b003      	add	sp, #12
    5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		audio_buffer[1][0] = 0x56;
    5a82:	4b07      	ldr	r3, [pc, #28]	; (5aa0 <audio_record_1samp+0x4c>)
    5a84:	2156      	movs	r1, #86	; 0x56
    5a86:	2280      	movs	r2, #128	; 0x80
    5a88:	0092      	lsls	r2, r2, #2
    5a8a:	5499      	strb	r1, [r3, r2]
		audio_buffer[1][1] = 0x78;
    5a8c:	3122      	adds	r1, #34	; 0x22
    5a8e:	4a05      	ldr	r2, [pc, #20]	; (5aa4 <audio_record_1samp+0x50>)
    5a90:	5499      	strb	r1, [r3, r2]
    5a92:	e7f4      	b.n	5a7e <audio_record_1samp+0x2a>
    5a94:	41004400 	.word	0x41004400
    5a98:	200005f4 	.word	0x200005f4
    5a9c:	0000789d 	.word	0x0000789d
    5aa0:	2000065c 	.word	0x2000065c
    5aa4:	00000201 	.word	0x00000201

00005aa8 <audio_write_chunck>:
{
    5aa8:	b510      	push	{r4, lr}
    5aaa:	b082      	sub	sp, #8
	res = f_write(&file_object, (char *)audio_buffer[ub], AUDIO_CHUNK_SIZE, &bytes);
    5aac:	0241      	lsls	r1, r0, #9
    5aae:	480e      	ldr	r0, [pc, #56]	; (5ae8 <audio_write_chunck+0x40>)
    5ab0:	1809      	adds	r1, r1, r0
    5ab2:	ab01      	add	r3, sp, #4
    5ab4:	2280      	movs	r2, #128	; 0x80
    5ab6:	0092      	lsls	r2, r2, #2
    5ab8:	480c      	ldr	r0, [pc, #48]	; (5aec <audio_write_chunck+0x44>)
    5aba:	4c0d      	ldr	r4, [pc, #52]	; (5af0 <audio_write_chunck+0x48>)
    5abc:	47a0      	blx	r4
	if(res != FR_OK) {
    5abe:	2800      	cmp	r0, #0
    5ac0:	d10a      	bne.n	5ad8 <audio_write_chunck+0x30>
		res = f_sync(&file_object);
    5ac2:	480a      	ldr	r0, [pc, #40]	; (5aec <audio_write_chunck+0x44>)
    5ac4:	4b0b      	ldr	r3, [pc, #44]	; (5af4 <audio_write_chunck+0x4c>)
    5ac6:	4798      	blx	r3
	return true;
    5ac8:	2301      	movs	r3, #1
		if(res != FR_OK) {
    5aca:	2800      	cmp	r0, #0
    5acc:	d008      	beq.n	5ae0 <audio_write_chunck+0x38>
			f_close(&file_object);
    5ace:	4807      	ldr	r0, [pc, #28]	; (5aec <audio_write_chunck+0x44>)
    5ad0:	4b09      	ldr	r3, [pc, #36]	; (5af8 <audio_write_chunck+0x50>)
    5ad2:	4798      	blx	r3
			return false;
    5ad4:	2300      	movs	r3, #0
    5ad6:	e003      	b.n	5ae0 <audio_write_chunck+0x38>
		f_close(&file_object);
    5ad8:	4804      	ldr	r0, [pc, #16]	; (5aec <audio_write_chunck+0x44>)
    5ada:	4b07      	ldr	r3, [pc, #28]	; (5af8 <audio_write_chunck+0x50>)
    5adc:	4798      	blx	r3
		return false;
    5ade:	2300      	movs	r3, #0
}
    5ae0:	0018      	movs	r0, r3
    5ae2:	b002      	add	sp, #8
    5ae4:	bd10      	pop	{r4, pc}
    5ae6:	46c0      	nop			; (mov r8, r8)
    5ae8:	2000065c 	.word	0x2000065c
    5aec:	20000600 	.word	0x20000600
    5af0:	0000535d 	.word	0x0000535d
    5af4:	00005595 	.word	0x00005595
    5af8:	00005621 	.word	0x00005621

00005afc <audio_sync_init>:

void audio_sync_init(void)
{
    5afc:	b570      	push	{r4, r5, r6, lr}
    5afe:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    5b00:	4e12      	ldr	r6, [pc, #72]	; (5b4c <audio_sync_init+0x50>)
    5b02:	ac01      	add	r4, sp, #4
    5b04:	0031      	movs	r1, r6
    5b06:	0020      	movs	r0, r4
    5b08:	4b11      	ldr	r3, [pc, #68]	; (5b50 <audio_sync_init+0x54>)
    5b0a:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
    5b0c:	2300      	movs	r3, #0
    5b0e:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    5b10:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = AUDIO_SYNC_44_1KHZ_CNT;
    5b12:	4b10      	ldr	r3, [pc, #64]	; (5b54 <audio_sync_init+0x58>)
    5b14:	6063      	str	r3, [r4, #4]
	tcc_init(&audio_syncer_module, TCC0, &config_tcc);
    5b16:	4d10      	ldr	r5, [pc, #64]	; (5b58 <audio_sync_init+0x5c>)
    5b18:	0022      	movs	r2, r4
    5b1a:	0031      	movs	r1, r6
    5b1c:	0028      	movs	r0, r5
    5b1e:	4b0f      	ldr	r3, [pc, #60]	; (5b5c <audio_sync_init+0x60>)
    5b20:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5b22:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5b24:	2102      	movs	r1, #2
    5b26:	6893      	ldr	r3, [r2, #8]
    5b28:	4219      	tst	r1, r3
    5b2a:	d1fc      	bne.n	5b26 <audio_sync_init+0x2a>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5b2c:	6813      	ldr	r3, [r2, #0]
    5b2e:	2102      	movs	r1, #2
    5b30:	430b      	orrs	r3, r1
    5b32:	6013      	str	r3, [r2, #0]
	tcc_enable(&audio_syncer_module);
	//tcc_stop_counter(&audio_syncer_module);
	
	tcc_register_callback(&audio_syncer_module, (tcc_callback_t)audio_sync_reached_callback, TCC_CALLBACK_OVERFLOW);
    5b34:	4c08      	ldr	r4, [pc, #32]	; (5b58 <audio_sync_init+0x5c>)
    5b36:	2200      	movs	r2, #0
    5b38:	4909      	ldr	r1, [pc, #36]	; (5b60 <audio_sync_init+0x64>)
    5b3a:	0020      	movs	r0, r4
    5b3c:	4b09      	ldr	r3, [pc, #36]	; (5b64 <audio_sync_init+0x68>)
    5b3e:	4798      	blx	r3
	tcc_enable_callback(&audio_syncer_module, TCC_CALLBACK_OVERFLOW);
    5b40:	2100      	movs	r1, #0
    5b42:	0020      	movs	r0, r4
    5b44:	4b08      	ldr	r3, [pc, #32]	; (5b68 <audio_sync_init+0x6c>)
    5b46:	4798      	blx	r3
}
    5b48:	b02a      	add	sp, #168	; 0xa8
    5b4a:	bd70      	pop	{r4, r5, r6, pc}
    5b4c:	42002000 	.word	0x42002000
    5b50:	00000149 	.word	0x00000149
    5b54:	00000bb8 	.word	0x00000bb8
    5b58:	20000c8c 	.word	0x20000c8c
    5b5c:	00000295 	.word	0x00000295
    5b60:	00005845 	.word	0x00005845
    5b64:	000006a1 	.word	0x000006a1
    5b68:	000006b9 	.word	0x000006b9

00005b6c <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    5b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b6e:	b089      	sub	sp, #36	; 0x24
		sleepmgr_locks[i] = 0;
    5b70:	4b58      	ldr	r3, [pc, #352]	; (5cd4 <main+0x168>)
    5b72:	2400      	movs	r4, #0
    5b74:	701c      	strb	r4, [r3, #0]
    5b76:	705c      	strb	r4, [r3, #1]
    5b78:	709c      	strb	r4, [r3, #2]
    5b7a:	70dc      	strb	r4, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5b7c:	2501      	movs	r5, #1
    5b7e:	711d      	strb	r5, [r3, #4]
	irq_initialize_vectors();

	// Initialize the sleep manager
	sleepmgr_init();

	system_init();
    5b80:	4b55      	ldr	r3, [pc, #340]	; (5cd8 <main+0x16c>)
    5b82:	4798      	blx	r3
	
	delay_init();
    5b84:	4b55      	ldr	r3, [pc, #340]	; (5cdc <main+0x170>)
    5b86:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    5b88:	aa03      	add	r2, sp, #12
    5b8a:	23a0      	movs	r3, #160	; 0xa0
    5b8c:	011b      	lsls	r3, r3, #4
    5b8e:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    5b90:	7094      	strb	r4, [r2, #2]
	config->continuously_update = false;
    5b92:	70d4      	strb	r4, [r2, #3]
	config->year_init_value     = 2000;
    5b94:	23fa      	movs	r3, #250	; 0xfa
    5b96:	00db      	lsls	r3, r3, #3
    5b98:	80d3      	strh	r3, [r2, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    5b9a:	7214      	strb	r4, [r2, #8]
    5b9c:	7254      	strb	r4, [r2, #9]
    5b9e:	7294      	strb	r4, [r2, #10]
    5ba0:	72d4      	strb	r4, [r2, #11]
    5ba2:	7315      	strb	r5, [r2, #12]
    5ba4:	7355      	strb	r5, [r2, #13]
    5ba6:	81d3      	strh	r3, [r2, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    5ba8:	2306      	movs	r3, #6
    5baa:	7413      	strb	r3, [r2, #16]
	config_rtc_calendar.clock_24h = true;
    5bac:	7115      	strb	r5, [r2, #4]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    5bae:	4c4c      	ldr	r4, [pc, #304]	; (5ce0 <main+0x174>)
    5bb0:	494c      	ldr	r1, [pc, #304]	; (5ce4 <main+0x178>)
    5bb2:	0020      	movs	r0, r4
    5bb4:	4b4c      	ldr	r3, [pc, #304]	; (5ce8 <main+0x17c>)
    5bb6:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    5bb8:	0020      	movs	r0, r4
    5bba:	4b4c      	ldr	r3, [pc, #304]	; (5cec <main+0x180>)
    5bbc:	4798      	blx	r3
	current_time.year = 2018;
    5bbe:	a901      	add	r1, sp, #4
    5bc0:	4b4b      	ldr	r3, [pc, #300]	; (5cf0 <main+0x184>)
    5bc2:	80cb      	strh	r3, [r1, #6]
	current_time.month = 02;
    5bc4:	2302      	movs	r3, #2
    5bc6:	714b      	strb	r3, [r1, #5]
	current_time.day = 02;
    5bc8:	710b      	strb	r3, [r1, #4]
	current_time.hour = 11;
    5bca:	3309      	adds	r3, #9
    5bcc:	708b      	strb	r3, [r1, #2]
	current_time.minute = 39;
    5bce:	331c      	adds	r3, #28
    5bd0:	704b      	strb	r3, [r1, #1]
	current_time.second = 42;
    5bd2:	3303      	adds	r3, #3
    5bd4:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &current_time);
    5bd6:	0020      	movs	r0, r4
    5bd8:	4b46      	ldr	r3, [pc, #280]	; (5cf4 <main+0x188>)
    5bda:	4798      	blx	r3
	rtc_calendar_swap_time_mode(&rtc_instance);
    5bdc:	0020      	movs	r0, r4
    5bde:	4b46      	ldr	r3, [pc, #280]	; (5cf8 <main+0x18c>)
    5be0:	4798      	blx	r3
	
	calendar_init();
	
	ui_lb_init();
    5be2:	4b46      	ldr	r3, [pc, #280]	; (5cfc <main+0x190>)
    5be4:	4798      	blx	r3
	ui_powerdown();
    5be6:	4b46      	ldr	r3, [pc, #280]	; (5d00 <main+0x194>)
    5be8:	4798      	blx	r3
	ui_cdc_init();
    5bea:	4b46      	ldr	r3, [pc, #280]	; (5d04 <main+0x198>)
    5bec:	4798      	blx	r3
	ui_configure_callback();
    5bee:	4b46      	ldr	r3, [pc, #280]	; (5d08 <main+0x19c>)
    5bf0:	4798      	blx	r3

	sd_mmc_init();
    5bf2:	4b46      	ldr	r3, [pc, #280]	; (5d0c <main+0x1a0>)
    5bf4:	4798      	blx	r3
	memories_initialization();
    5bf6:	4b46      	ldr	r3, [pc, #280]	; (5d10 <main+0x1a4>)
    5bf8:	4798      	blx	r3
	
	audio_in_init();
    5bfa:	4b46      	ldr	r3, [pc, #280]	; (5d14 <main+0x1a8>)
    5bfc:	4798      	blx	r3
	audio_sync_init();
    5bfe:	4b46      	ldr	r3, [pc, #280]	; (5d18 <main+0x1ac>)
    5c00:	4798      	blx	r3
	cpu_irq_enable();
    5c02:	4b46      	ldr	r3, [pc, #280]	; (5d1c <main+0x1b0>)
    5c04:	701d      	strb	r5, [r3, #0]
    5c06:	f3bf 8f5f 	dmb	sy
    5c0a:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
    5c0c:	4b44      	ldr	r3, [pc, #272]	; (5d20 <main+0x1b4>)
    5c0e:	4798      	blx	r3
	 * because the USB management & button detection
	 * are done by interrupt */
	for(;;) {
		if(rec_start_request) {
			/* Testing if SD card is present */
			if(sd_test_availability()) {
    5c10:	4d44      	ldr	r5, [pc, #272]	; (5d24 <main+0x1b8>)
				if(audio_record_init()) {
    5c12:	4f45      	ldr	r7, [pc, #276]	; (5d28 <main+0x1bc>)
					rec_init_done = true;
				}
				rec_start_request = false;
    5c14:	4e45      	ldr	r6, [pc, #276]	; (5d2c <main+0x1c0>)
    5c16:	e05b      	b.n	5cd0 <main+0x164>
			if(sd_test_availability()) {
    5c18:	47a8      	blx	r5
    5c1a:	2800      	cmp	r0, #0
    5c1c:	d017      	beq.n	5c4e <main+0xe2>
				if(audio_record_init()) {
    5c1e:	47b8      	blx	r7
    5c20:	2800      	cmp	r0, #0
    5c22:	d002      	beq.n	5c2a <main+0xbe>
					rec_init_done = true;
    5c24:	2201      	movs	r2, #1
    5c26:	4b42      	ldr	r3, [pc, #264]	; (5d30 <main+0x1c4>)
    5c28:	701a      	strb	r2, [r3, #0]
				rec_start_request = false;
    5c2a:	2300      	movs	r3, #0
    5c2c:	7033      	strb	r3, [r6, #0]
    5c2e:	e00e      	b.n	5c4e <main+0xe2>
			}
		}
		
		if(rec_stop_request) {
			if(!audio_record_close()) {
    5c30:	4b40      	ldr	r3, [pc, #256]	; (5d34 <main+0x1c8>)
    5c32:	4798      	blx	r3
    5c34:	2800      	cmp	r0, #0
    5c36:	d10e      	bne.n	5c56 <main+0xea>
				printf("ERROR closing recorded file\n\r");
    5c38:	483f      	ldr	r0, [pc, #252]	; (5d38 <main+0x1cc>)
    5c3a:	4b40      	ldr	r3, [pc, #256]	; (5d3c <main+0x1d0>)
    5c3c:	4798      	blx	r3
    5c3e:	e00a      	b.n	5c56 <main+0xea>
			audio_frame_cnt = 0;
			rec_init_done = false;
			rec_running = true;
		}
		
		if(sync_reached) {
    5c40:	4b3f      	ldr	r3, [pc, #252]	; (5d40 <main+0x1d4>)
    5c42:	781b      	ldrb	r3, [r3, #0]
    5c44:	2b00      	cmp	r3, #0
    5c46:	d119      	bne.n	5c7c <main+0x110>
		if(rec_start_request) {
    5c48:	7823      	ldrb	r3, [r4, #0]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d1e4      	bne.n	5c18 <main+0xac>
		if(rec_stop_request) {
    5c4e:	4b3d      	ldr	r3, [pc, #244]	; (5d44 <main+0x1d8>)
    5c50:	781b      	ldrb	r3, [r3, #0]
    5c52:	2b00      	cmp	r3, #0
    5c54:	d1ec      	bne.n	5c30 <main+0xc4>
		if(rec_init_done) {
    5c56:	4b36      	ldr	r3, [pc, #216]	; (5d30 <main+0x1c4>)
    5c58:	781b      	ldrb	r3, [r3, #0]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	d0f0      	beq.n	5c40 <main+0xd4>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    5c5e:	2380      	movs	r3, #128	; 0x80
    5c60:	015b      	lsls	r3, r3, #5
    5c62:	4a39      	ldr	r2, [pc, #228]	; (5d48 <main+0x1dc>)
    5c64:	61d3      	str	r3, [r2, #28]
		port_base->OUTCLR.reg = pin_mask;
    5c66:	4a39      	ldr	r2, [pc, #228]	; (5d4c <main+0x1e0>)
    5c68:	6153      	str	r3, [r2, #20]
			audio_frame_cnt = 0;
    5c6a:	2300      	movs	r3, #0
    5c6c:	4a38      	ldr	r2, [pc, #224]	; (5d50 <main+0x1e4>)
    5c6e:	6013      	str	r3, [r2, #0]
			rec_init_done = false;
    5c70:	4a2f      	ldr	r2, [pc, #188]	; (5d30 <main+0x1c4>)
    5c72:	7013      	strb	r3, [r2, #0]
			rec_running = true;
    5c74:	2201      	movs	r2, #1
    5c76:	4b37      	ldr	r3, [pc, #220]	; (5d54 <main+0x1e8>)
    5c78:	701a      	strb	r2, [r3, #0]
    5c7a:	e7e1      	b.n	5c40 <main+0xd4>
			sync_reached = false;
    5c7c:	2200      	movs	r2, #0
    5c7e:	4b30      	ldr	r3, [pc, #192]	; (5d40 <main+0x1d4>)
    5c80:	701a      	strb	r2, [r3, #0]
			if(rec_running) {
    5c82:	4b34      	ldr	r3, [pc, #208]	; (5d54 <main+0x1e8>)
    5c84:	781b      	ldrb	r3, [r3, #0]
    5c86:	2b00      	cmp	r3, #0
    5c88:	d0de      	beq.n	5c48 <main+0xdc>
	port_base->OUTTGL.reg = pin_mask;
    5c8a:	2280      	movs	r2, #128	; 0x80
    5c8c:	0152      	lsls	r2, r2, #5
    5c8e:	4b2e      	ldr	r3, [pc, #184]	; (5d48 <main+0x1dc>)
    5c90:	61da      	str	r2, [r3, #28]
				port_pin_toggle_output_level(PIN_PB12);
				audio_record_1samp(audio_upper_buffer);
    5c92:	4b31      	ldr	r3, [pc, #196]	; (5d58 <main+0x1ec>)
    5c94:	7818      	ldrb	r0, [r3, #0]
    5c96:	b2c0      	uxtb	r0, r0
    5c98:	4b30      	ldr	r3, [pc, #192]	; (5d5c <main+0x1f0>)
    5c9a:	4798      	blx	r3
				//audio_write_1samp(audio_upper_buffer);
				audio_frame_cnt += 2;
    5c9c:	4b2c      	ldr	r3, [pc, #176]	; (5d50 <main+0x1e4>)
    5c9e:	681a      	ldr	r2, [r3, #0]
    5ca0:	3202      	adds	r2, #2
    5ca2:	601a      	str	r2, [r3, #0]
				if(audio_frame_cnt >= AUDIO_CHUNK_SIZE) {
    5ca4:	681a      	ldr	r2, [r3, #0]
    5ca6:	4b2e      	ldr	r3, [pc, #184]	; (5d60 <main+0x1f4>)
    5ca8:	429a      	cmp	r2, r3
    5caa:	d9cd      	bls.n	5c48 <main+0xdc>
					audio_total_samples += audio_frame_cnt;
    5cac:	4a28      	ldr	r2, [pc, #160]	; (5d50 <main+0x1e4>)
    5cae:	6813      	ldr	r3, [r2, #0]
    5cb0:	492c      	ldr	r1, [pc, #176]	; (5d64 <main+0x1f8>)
    5cb2:	6808      	ldr	r0, [r1, #0]
    5cb4:	4684      	mov	ip, r0
    5cb6:	4463      	add	r3, ip
    5cb8:	600b      	str	r3, [r1, #0]
					audio_frame_cnt = 0;
    5cba:	2300      	movs	r3, #0
    5cbc:	6013      	str	r3, [r2, #0]
					audio_write_chunck(audio_upper_buffer);
    5cbe:	4c26      	ldr	r4, [pc, #152]	; (5d58 <main+0x1ec>)
    5cc0:	7820      	ldrb	r0, [r4, #0]
    5cc2:	b2c0      	uxtb	r0, r0
    5cc4:	4b28      	ldr	r3, [pc, #160]	; (5d68 <main+0x1fc>)
    5cc6:	4798      	blx	r3
					audio_upper_buffer = (audio_upper_buffer) ? false : true;
    5cc8:	7823      	ldrb	r3, [r4, #0]
    5cca:	2201      	movs	r2, #1
    5ccc:	4053      	eors	r3, r2
    5cce:	7023      	strb	r3, [r4, #0]
		if(rec_start_request) {
    5cd0:	4c16      	ldr	r4, [pc, #88]	; (5d2c <main+0x1c0>)
    5cd2:	e7b9      	b.n	5c48 <main+0xdc>
    5cd4:	20000dd0 	.word	0x20000dd0
    5cd8:	00008a35 	.word	0x00008a35
    5cdc:	00007cad 	.word	0x00007cad
    5ce0:	200005ec 	.word	0x200005ec
    5ce4:	40001400 	.word	0x40001400
    5ce8:	00002131 	.word	0x00002131
    5cec:	00001fd5 	.word	0x00001fd5
    5cf0:	000007e2 	.word	0x000007e2
    5cf4:	000020a1 	.word	0x000020a1
    5cf8:	000021ed 	.word	0x000021ed
    5cfc:	000060f5 	.word	0x000060f5
    5d00:	000061c9 	.word	0x000061c9
    5d04:	00006001 	.word	0x00006001
    5d08:	00006195 	.word	0x00006195
    5d0c:	0000098d 	.word	0x0000098d
    5d10:	00005dc5 	.word	0x00005dc5
    5d14:	00005851 	.word	0x00005851
    5d18:	00005afd 	.word	0x00005afd
    5d1c:	20000125 	.word	0x20000125
    5d20:	000019d5 	.word	0x000019d5
    5d24:	00005dc9 	.word	0x00005dc9
    5d28:	00005931 	.word	0x00005931
    5d2c:	200002d9 	.word	0x200002d9
    5d30:	200002d7 	.word	0x200002d7
    5d34:	000059d5 	.word	0x000059d5
    5d38:	0000a9e0 	.word	0x0000a9e0
    5d3c:	00009185 	.word	0x00009185
    5d40:	200002db 	.word	0x200002db
    5d44:	200002da 	.word	0x200002da
    5d48:	41004480 	.word	0x41004480
    5d4c:	41004400 	.word	0x41004400
    5d50:	200002cc 	.word	0x200002cc
    5d54:	200002d8 	.word	0x200002d8
    5d58:	200002d4 	.word	0x200002d4
    5d5c:	00005a55 	.word	0x00005a55
    5d60:	000001ff 	.word	0x000001ff
    5d64:	200002d0 	.word	0x200002d0
    5d68:	00005aa9 	.word	0x00005aa9

00005d6c <main_suspend_action>:
		//}
	}
}

void main_suspend_action(void)
{
    5d6c:	b510      	push	{r4, lr}
	ui_powerdown();
    5d6e:	4b01      	ldr	r3, [pc, #4]	; (5d74 <main_suspend_action+0x8>)
    5d70:	4798      	blx	r3
}
    5d72:	bd10      	pop	{r4, pc}
    5d74:	000061c9 	.word	0x000061c9

00005d78 <main_resume_action>:

void main_resume_action(void)
{
    5d78:	b510      	push	{r4, lr}
	ui_wakeup();
    5d7a:	4b01      	ldr	r3, [pc, #4]	; (5d80 <main_resume_action+0x8>)
    5d7c:	4798      	blx	r3
}
    5d7e:	bd10      	pop	{r4, pc}
    5d80:	000061d9 	.word	0x000061d9

00005d84 <main_sof_action>:

void main_sof_action(void)
{
    5d84:	b510      	push	{r4, lr}
	if (!main_b_msc_enable)
    5d86:	4b05      	ldr	r3, [pc, #20]	; (5d9c <main_sof_action+0x18>)
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d100      	bne.n	5d90 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    5d8e:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    5d90:	4b03      	ldr	r3, [pc, #12]	; (5da0 <main_sof_action+0x1c>)
    5d92:	4798      	blx	r3
    5d94:	4b03      	ldr	r3, [pc, #12]	; (5da4 <main_sof_action+0x20>)
    5d96:	4798      	blx	r3
    5d98:	e7f9      	b.n	5d8e <main_sof_action+0xa>
    5d9a:	46c0      	nop			; (mov r8, r8)
    5d9c:	200002d5 	.word	0x200002d5
    5da0:	000033f9 	.word	0x000033f9
    5da4:	000061f1 	.word	0x000061f1

00005da8 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    5da8:	2201      	movs	r2, #1
    5daa:	4b02      	ldr	r3, [pc, #8]	; (5db4 <main_msc_enable+0xc>)
    5dac:	701a      	strb	r2, [r3, #0]
	return true;
}
    5dae:	2001      	movs	r0, #1
    5db0:	4770      	bx	lr
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	200002d5 	.word	0x200002d5

00005db8 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    5db8:	2200      	movs	r2, #0
    5dba:	4b01      	ldr	r3, [pc, #4]	; (5dc0 <main_msc_disable+0x8>)
    5dbc:	701a      	strb	r2, [r3, #0]
}
    5dbe:	4770      	bx	lr
    5dc0:	200002d5 	.word	0x200002d5

00005dc4 <memories_initialization>:
	ext_sram_init();
#endif
#ifdef CONF_BOARD_NAND
	nand_init();
#endif
}
    5dc4:	4770      	bx	lr
	...

00005dc8 <sd_test_availability>:
#include "sd_management.h"

extern volatile bool rec_start_request;

bool sd_test_availability(void)
{
    5dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Ctrl_status status;
	bool retVal = true;
	do {
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    5dca:	4c2c      	ldr	r4, [pc, #176]	; (5e7c <sd_test_availability+0xb4>)
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
			}
		}
		LED_Toggle(UI_LED_REC);
		LED_Toggle(UI_LED_MON);
		delay_ms(300);
    5dcc:	4d2c      	ldr	r5, [pc, #176]	; (5e80 <sd_test_availability+0xb8>)
    5dce:	e028      	b.n	5e22 <sd_test_availability+0x5a>
			printf("Card install fail!\n\r");
    5dd0:	482c      	ldr	r0, [pc, #176]	; (5e84 <sd_test_availability+0xbc>)
    5dd2:	4e2d      	ldr	r6, [pc, #180]	; (5e88 <sd_test_availability+0xc0>)
    5dd4:	47b0      	blx	r6
			printf("Please unplug and re-plug the card.\n\r");
    5dd6:	482d      	ldr	r0, [pc, #180]	; (5e8c <sd_test_availability+0xc4>)
    5dd8:	47b0      	blx	r6
			while(CTRL_NO_PRESENT != sd_mmc_check(SD_SLOT_NUMBER)) {
    5dda:	4e2d      	ldr	r6, [pc, #180]	; (5e90 <sd_test_availability+0xc8>)
    5ddc:	2000      	movs	r0, #0
    5dde:	47b0      	blx	r6
    5de0:	2802      	cmp	r0, #2
    5de2:	d1fb      	bne.n	5ddc <sd_test_availability+0x14>
    5de4:	4b2b      	ldr	r3, [pc, #172]	; (5e94 <sd_test_availability+0xcc>)
    5de6:	2280      	movs	r2, #128	; 0x80
    5de8:	0152      	lsls	r2, r2, #5
    5dea:	61da      	str	r2, [r3, #28]
    5dec:	2280      	movs	r2, #128	; 0x80
    5dee:	0212      	lsls	r2, r2, #8
    5df0:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    5df2:	2000      	movs	r0, #0
    5df4:	4b22      	ldr	r3, [pc, #136]	; (5e80 <sd_test_availability+0xb8>)
    5df6:	4798      	blx	r3
    5df8:	2296      	movs	r2, #150	; 0x96
    5dfa:	0052      	lsls	r2, r2, #1
    5dfc:	2300      	movs	r3, #0
    5dfe:	2100      	movs	r1, #0
    5e00:	4e25      	ldr	r6, [pc, #148]	; (5e98 <sd_test_availability+0xd0>)
    5e02:	47b0      	blx	r6
    5e04:	4a25      	ldr	r2, [pc, #148]	; (5e9c <sd_test_availability+0xd4>)
    5e06:	2300      	movs	r3, #0
    5e08:	1880      	adds	r0, r0, r2
    5e0a:	4159      	adcs	r1, r3
    5e0c:	4a24      	ldr	r2, [pc, #144]	; (5ea0 <sd_test_availability+0xd8>)
    5e0e:	2300      	movs	r3, #0
    5e10:	4e24      	ldr	r6, [pc, #144]	; (5ea4 <sd_test_availability+0xdc>)
    5e12:	47b0      	blx	r6
    5e14:	4b24      	ldr	r3, [pc, #144]	; (5ea8 <sd_test_availability+0xe0>)
    5e16:	4798      	blx	r3
		if(!rec_start_request) {
    5e18:	4b24      	ldr	r3, [pc, #144]	; (5eac <sd_test_availability+0xe4>)
    5e1a:	7818      	ldrb	r0, [r3, #0]
    5e1c:	b2c0      	uxtb	r0, r0
    5e1e:	2800      	cmp	r0, #0
    5e20:	d024      	beq.n	5e6c <sd_test_availability+0xa4>
		status = sd_mmc_test_unit_ready(SD_SLOT_NUMBER);
    5e22:	2000      	movs	r0, #0
    5e24:	47a0      	blx	r4
    5e26:	0006      	movs	r6, r0
		if(status == CTRL_FAIL) {
    5e28:	2801      	cmp	r0, #1
    5e2a:	d0d1      	beq.n	5dd0 <sd_test_availability+0x8>
    5e2c:	4b19      	ldr	r3, [pc, #100]	; (5e94 <sd_test_availability+0xcc>)
    5e2e:	2280      	movs	r2, #128	; 0x80
    5e30:	0152      	lsls	r2, r2, #5
    5e32:	61da      	str	r2, [r3, #28]
    5e34:	2280      	movs	r2, #128	; 0x80
    5e36:	0212      	lsls	r2, r2, #8
    5e38:	61da      	str	r2, [r3, #28]
		delay_ms(300);
    5e3a:	2000      	movs	r0, #0
    5e3c:	47a8      	blx	r5
    5e3e:	2296      	movs	r2, #150	; 0x96
    5e40:	0052      	lsls	r2, r2, #1
    5e42:	2300      	movs	r3, #0
    5e44:	2100      	movs	r1, #0
    5e46:	4f14      	ldr	r7, [pc, #80]	; (5e98 <sd_test_availability+0xd0>)
    5e48:	47b8      	blx	r7
    5e4a:	4a14      	ldr	r2, [pc, #80]	; (5e9c <sd_test_availability+0xd4>)
    5e4c:	2300      	movs	r3, #0
    5e4e:	1880      	adds	r0, r0, r2
    5e50:	4159      	adcs	r1, r3
    5e52:	4a13      	ldr	r2, [pc, #76]	; (5ea0 <sd_test_availability+0xd8>)
    5e54:	2300      	movs	r3, #0
    5e56:	4f13      	ldr	r7, [pc, #76]	; (5ea4 <sd_test_availability+0xdc>)
    5e58:	47b8      	blx	r7
    5e5a:	4b13      	ldr	r3, [pc, #76]	; (5ea8 <sd_test_availability+0xe0>)
    5e5c:	4798      	blx	r3
		if(!rec_start_request) {
    5e5e:	4b13      	ldr	r3, [pc, #76]	; (5eac <sd_test_availability+0xe4>)
    5e60:	7818      	ldrb	r0, [r3, #0]
    5e62:	b2c0      	uxtb	r0, r0
    5e64:	2800      	cmp	r0, #0
    5e66:	d001      	beq.n	5e6c <sd_test_availability+0xa4>
			retVal = false;
			break;
		}
	} while(status != CTRL_GOOD);
    5e68:	2e00      	cmp	r6, #0
    5e6a:	d1da      	bne.n	5e22 <sd_test_availability+0x5a>
		port_base->OUTSET.reg = pin_mask;
    5e6c:	4b09      	ldr	r3, [pc, #36]	; (5e94 <sd_test_availability+0xcc>)
    5e6e:	2280      	movs	r2, #128	; 0x80
    5e70:	0152      	lsls	r2, r2, #5
    5e72:	619a      	str	r2, [r3, #24]
    5e74:	2280      	movs	r2, #128	; 0x80
    5e76:	0212      	lsls	r2, r2, #8
    5e78:	619a      	str	r2, [r3, #24]
	LED_Off(UI_LED_REC);
	LED_Off(UI_LED_MON);
	return retVal;
    5e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e7c:	00007cb1 	.word	0x00007cb1
    5e80:	000087f1 	.word	0x000087f1
    5e84:	0000aa00 	.word	0x0000aa00
    5e88:	00009185 	.word	0x00009185
    5e8c:	0000aa18 	.word	0x0000aa18
    5e90:	000009ad 	.word	0x000009ad
    5e94:	41004400 	.word	0x41004400
    5e98:	00008f2d 	.word	0x00008f2d
    5e9c:	00001b57 	.word	0x00001b57
    5ea0:	00001b58 	.word	0x00001b58
    5ea4:	00008eed 	.word	0x00008eed
    5ea8:	20000001 	.word	0x20000001
    5eac:	200002d9 	.word	0x200002d9

00005eb0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5eb0:	b570      	push	{r4, r5, r6, lr}
    5eb2:	b082      	sub	sp, #8
    5eb4:	0005      	movs	r5, r0
    5eb6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5eb8:	2200      	movs	r2, #0
    5eba:	466b      	mov	r3, sp
    5ebc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5ebe:	4c06      	ldr	r4, [pc, #24]	; (5ed8 <usart_serial_getchar+0x28>)
    5ec0:	466b      	mov	r3, sp
    5ec2:	1d99      	adds	r1, r3, #6
    5ec4:	0028      	movs	r0, r5
    5ec6:	47a0      	blx	r4
    5ec8:	2800      	cmp	r0, #0
    5eca:	d1f9      	bne.n	5ec0 <usart_serial_getchar+0x10>

	*c = temp;
    5ecc:	466b      	mov	r3, sp
    5ece:	3306      	adds	r3, #6
    5ed0:	881b      	ldrh	r3, [r3, #0]
    5ed2:	7033      	strb	r3, [r6, #0]
}
    5ed4:	b002      	add	sp, #8
    5ed6:	bd70      	pop	{r4, r5, r6, pc}
    5ed8:	00002749 	.word	0x00002749

00005edc <usart_serial_putchar>:
{
    5edc:	b570      	push	{r4, r5, r6, lr}
    5ede:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5ee0:	b28c      	uxth	r4, r1
    5ee2:	4e03      	ldr	r6, [pc, #12]	; (5ef0 <usart_serial_putchar+0x14>)
    5ee4:	0021      	movs	r1, r4
    5ee6:	0028      	movs	r0, r5
    5ee8:	47b0      	blx	r6
    5eea:	2800      	cmp	r0, #0
    5eec:	d1fa      	bne.n	5ee4 <usart_serial_putchar+0x8>
}
    5eee:	bd70      	pop	{r4, r5, r6, pc}
    5ef0:	0000271d 	.word	0x0000271d

00005ef4 <ui_button1_callback>:
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

void ui_button1_callback(void)
{
    5ef4:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    5ef6:	4b18      	ldr	r3, [pc, #96]	; (5f58 <ui_button1_callback+0x64>)
    5ef8:	6a1b      	ldr	r3, [r3, #32]
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_1_PIN);
	
	if(press_state) {
    5efa:	00db      	lsls	r3, r3, #3
    5efc:	d500      	bpl.n	5f00 <ui_button1_callback+0xc>
		}
		else {
			rec_start_request = true;
		}
	}
}
    5efe:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    5f00:	2000      	movs	r0, #0
    5f02:	4b16      	ldr	r3, [pc, #88]	; (5f5c <ui_button1_callback+0x68>)
    5f04:	4798      	blx	r3
    5f06:	2264      	movs	r2, #100	; 0x64
    5f08:	2300      	movs	r3, #0
    5f0a:	2100      	movs	r1, #0
    5f0c:	4c14      	ldr	r4, [pc, #80]	; (5f60 <ui_button1_callback+0x6c>)
    5f0e:	47a0      	blx	r4
    5f10:	4a14      	ldr	r2, [pc, #80]	; (5f64 <ui_button1_callback+0x70>)
    5f12:	2300      	movs	r3, #0
    5f14:	1880      	adds	r0, r0, r2
    5f16:	4159      	adcs	r1, r3
    5f18:	4a13      	ldr	r2, [pc, #76]	; (5f68 <ui_button1_callback+0x74>)
    5f1a:	2300      	movs	r3, #0
    5f1c:	4c13      	ldr	r4, [pc, #76]	; (5f6c <ui_button1_callback+0x78>)
    5f1e:	47a0      	blx	r4
    5f20:	4b13      	ldr	r3, [pc, #76]	; (5f70 <ui_button1_callback+0x7c>)
    5f22:	4798      	blx	r3
    5f24:	4b0c      	ldr	r3, [pc, #48]	; (5f58 <ui_button1_callback+0x64>)
    5f26:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    5f28:	00db      	lsls	r3, r3, #3
    5f2a:	d4e8      	bmi.n	5efe <ui_button1_callback+0xa>
		if(rec_running || rec_start_request) {
    5f2c:	4b11      	ldr	r3, [pc, #68]	; (5f74 <ui_button1_callback+0x80>)
    5f2e:	781b      	ldrb	r3, [r3, #0]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d107      	bne.n	5f44 <ui_button1_callback+0x50>
    5f34:	4b10      	ldr	r3, [pc, #64]	; (5f78 <ui_button1_callback+0x84>)
    5f36:	781b      	ldrb	r3, [r3, #0]
    5f38:	2b00      	cmp	r3, #0
    5f3a:	d103      	bne.n	5f44 <ui_button1_callback+0x50>
			rec_start_request = true;
    5f3c:	2201      	movs	r2, #1
    5f3e:	4b0e      	ldr	r3, [pc, #56]	; (5f78 <ui_button1_callback+0x84>)
    5f40:	701a      	strb	r2, [r3, #0]
}
    5f42:	e7dc      	b.n	5efe <ui_button1_callback+0xa>
			rec_start_request = false;
    5f44:	2300      	movs	r3, #0
    5f46:	4a0c      	ldr	r2, [pc, #48]	; (5f78 <ui_button1_callback+0x84>)
    5f48:	7013      	strb	r3, [r2, #0]
			rec_running = false;
    5f4a:	4a0a      	ldr	r2, [pc, #40]	; (5f74 <ui_button1_callback+0x80>)
    5f4c:	7013      	strb	r3, [r2, #0]
			rec_stop_request = true;
    5f4e:	2201      	movs	r2, #1
    5f50:	4b0a      	ldr	r3, [pc, #40]	; (5f7c <ui_button1_callback+0x88>)
    5f52:	701a      	strb	r2, [r3, #0]
    5f54:	e7d3      	b.n	5efe <ui_button1_callback+0xa>
    5f56:	46c0      	nop			; (mov r8, r8)
    5f58:	41004400 	.word	0x41004400
    5f5c:	000087f1 	.word	0x000087f1
    5f60:	00008f2d 	.word	0x00008f2d
    5f64:	00001b57 	.word	0x00001b57
    5f68:	00001b58 	.word	0x00001b58
    5f6c:	00008eed 	.word	0x00008eed
    5f70:	20000001 	.word	0x20000001
    5f74:	200002d8 	.word	0x200002d8
    5f78:	200002d9 	.word	0x200002d9
    5f7c:	200002da 	.word	0x200002da

00005f80 <ui_button3_callback>:


void ui_button3_callback(void)
{
    5f80:	b510      	push	{r4, lr}
    5f82:	4b17      	ldr	r3, [pc, #92]	; (5fe0 <ui_button3_callback+0x60>)
    5f84:	6a1b      	ldr	r3, [r3, #32]
	//static uint32_t debounce_old3 = 0;
	bool press_ok = false;
	bool press_state = !port_pin_get_input_level(UI_BUT_3_PIN);
	
	if(press_state) {
    5f86:	071b      	lsls	r3, r3, #28
    5f88:	d500      	bpl.n	5f8c <ui_button3_callback+0xc>
		else {
			LED_On(UI_LED_3_PIN);
			monitoring_on = true;
		}
	}
}
    5f8a:	bd10      	pop	{r4, pc}
		delay_ms(BUTTON_DEBOUNCE_MS);
    5f8c:	2000      	movs	r0, #0
    5f8e:	4b15      	ldr	r3, [pc, #84]	; (5fe4 <ui_button3_callback+0x64>)
    5f90:	4798      	blx	r3
    5f92:	2264      	movs	r2, #100	; 0x64
    5f94:	2300      	movs	r3, #0
    5f96:	2100      	movs	r1, #0
    5f98:	4c13      	ldr	r4, [pc, #76]	; (5fe8 <ui_button3_callback+0x68>)
    5f9a:	47a0      	blx	r4
    5f9c:	4a13      	ldr	r2, [pc, #76]	; (5fec <ui_button3_callback+0x6c>)
    5f9e:	2300      	movs	r3, #0
    5fa0:	1880      	adds	r0, r0, r2
    5fa2:	4159      	adcs	r1, r3
    5fa4:	4a12      	ldr	r2, [pc, #72]	; (5ff0 <ui_button3_callback+0x70>)
    5fa6:	2300      	movs	r3, #0
    5fa8:	4c12      	ldr	r4, [pc, #72]	; (5ff4 <ui_button3_callback+0x74>)
    5faa:	47a0      	blx	r4
    5fac:	4b12      	ldr	r3, [pc, #72]	; (5ff8 <ui_button3_callback+0x78>)
    5fae:	4798      	blx	r3
    5fb0:	4b0b      	ldr	r3, [pc, #44]	; (5fe0 <ui_button3_callback+0x60>)
    5fb2:	6a1b      	ldr	r3, [r3, #32]
	if(press_ok) {
    5fb4:	071b      	lsls	r3, r3, #28
    5fb6:	d4e8      	bmi.n	5f8a <ui_button3_callback+0xa>
		if(monitoring_on) {
    5fb8:	4b10      	ldr	r3, [pc, #64]	; (5ffc <ui_button3_callback+0x7c>)
    5fba:	781b      	ldrb	r3, [r3, #0]
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d107      	bne.n	5fd0 <ui_button3_callback+0x50>
		port_base->OUTCLR.reg = pin_mask;
    5fc0:	2280      	movs	r2, #128	; 0x80
    5fc2:	0212      	lsls	r2, r2, #8
    5fc4:	4b06      	ldr	r3, [pc, #24]	; (5fe0 <ui_button3_callback+0x60>)
    5fc6:	615a      	str	r2, [r3, #20]
			monitoring_on = true;
    5fc8:	2201      	movs	r2, #1
    5fca:	4b0c      	ldr	r3, [pc, #48]	; (5ffc <ui_button3_callback+0x7c>)
    5fcc:	701a      	strb	r2, [r3, #0]
}
    5fce:	e7dc      	b.n	5f8a <ui_button3_callback+0xa>
		port_base->OUTSET.reg = pin_mask;
    5fd0:	2280      	movs	r2, #128	; 0x80
    5fd2:	0212      	lsls	r2, r2, #8
    5fd4:	4b02      	ldr	r3, [pc, #8]	; (5fe0 <ui_button3_callback+0x60>)
    5fd6:	619a      	str	r2, [r3, #24]
			monitoring_on = false;
    5fd8:	2200      	movs	r2, #0
    5fda:	4b08      	ldr	r3, [pc, #32]	; (5ffc <ui_button3_callback+0x7c>)
    5fdc:	701a      	strb	r2, [r3, #0]
    5fde:	e7d4      	b.n	5f8a <ui_button3_callback+0xa>
    5fe0:	41004400 	.word	0x41004400
    5fe4:	000087f1 	.word	0x000087f1
    5fe8:	00008f2d 	.word	0x00008f2d
    5fec:	00001b57 	.word	0x00001b57
    5ff0:	00001b58 	.word	0x00001b58
    5ff4:	00008eed 	.word	0x00008eed
    5ff8:	20000001 	.word	0x20000001
    5ffc:	200002d6 	.word	0x200002d6

00006000 <ui_cdc_init>:
{
    6000:	b5f0      	push	{r4, r5, r6, r7, lr}
    6002:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6004:	2380      	movs	r3, #128	; 0x80
    6006:	05db      	lsls	r3, r3, #23
    6008:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    600a:	2300      	movs	r3, #0
    600c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    600e:	22ff      	movs	r2, #255	; 0xff
    6010:	4669      	mov	r1, sp
    6012:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    6014:	2200      	movs	r2, #0
    6016:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6018:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    601a:	2401      	movs	r4, #1
    601c:	2124      	movs	r1, #36	; 0x24
    601e:	4668      	mov	r0, sp
    6020:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    6022:	3101      	adds	r1, #1
    6024:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    6026:	3101      	adds	r1, #1
    6028:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    602a:	3101      	adds	r1, #1
    602c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    602e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    6030:	3105      	adds	r1, #5
    6032:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    6034:	3101      	adds	r1, #1
    6036:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6038:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    603a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    603c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    603e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6040:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6042:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    6044:	2313      	movs	r3, #19
    6046:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6048:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = UI_CDC_MUX_SETTING;
    604a:	2380      	movs	r3, #128	; 0x80
    604c:	035b      	lsls	r3, r3, #13
    604e:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = UI_CDC_PINMUX_PAD0;
    6050:	4b1a      	ldr	r3, [pc, #104]	; (60bc <ui_cdc_init+0xbc>)
    6052:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = UI_CDC_PINMUX_PAD1;
    6054:	4b1a      	ldr	r3, [pc, #104]	; (60c0 <ui_cdc_init+0xc0>)
    6056:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = UI_CDC_PINMUX_PAD2;
    6058:	2301      	movs	r3, #1
    605a:	425b      	negs	r3, r3
    605c:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = UI_CDC_PINMUX_PAD3;
    605e:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = CONF_CDC_BAUDRATE;
    6060:	23e1      	movs	r3, #225	; 0xe1
    6062:	025b      	lsls	r3, r3, #9
    6064:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    6066:	4d17      	ldr	r5, [pc, #92]	; (60c4 <ui_cdc_init+0xc4>)
    6068:	4b17      	ldr	r3, [pc, #92]	; (60c8 <ui_cdc_init+0xc8>)
    606a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    606c:	4a17      	ldr	r2, [pc, #92]	; (60cc <ui_cdc_init+0xcc>)
    606e:	4b18      	ldr	r3, [pc, #96]	; (60d0 <ui_cdc_init+0xd0>)
    6070:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6072:	4a18      	ldr	r2, [pc, #96]	; (60d4 <ui_cdc_init+0xd4>)
    6074:	4b18      	ldr	r3, [pc, #96]	; (60d8 <ui_cdc_init+0xd8>)
    6076:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    6078:	466a      	mov	r2, sp
    607a:	4918      	ldr	r1, [pc, #96]	; (60dc <ui_cdc_init+0xdc>)
    607c:	0028      	movs	r0, r5
    607e:	4b18      	ldr	r3, [pc, #96]	; (60e0 <ui_cdc_init+0xe0>)
    6080:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6082:	4f18      	ldr	r7, [pc, #96]	; (60e4 <ui_cdc_init+0xe4>)
    6084:	683b      	ldr	r3, [r7, #0]
    6086:	6898      	ldr	r0, [r3, #8]
    6088:	2100      	movs	r1, #0
    608a:	4e17      	ldr	r6, [pc, #92]	; (60e8 <ui_cdc_init+0xe8>)
    608c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    608e:	683b      	ldr	r3, [r7, #0]
    6090:	6858      	ldr	r0, [r3, #4]
    6092:	2100      	movs	r1, #0
    6094:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6096:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6098:	0030      	movs	r0, r6
    609a:	4b14      	ldr	r3, [pc, #80]	; (60ec <ui_cdc_init+0xec>)
    609c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    609e:	231f      	movs	r3, #31
    60a0:	4018      	ands	r0, r3
    60a2:	4084      	lsls	r4, r0
    60a4:	4b12      	ldr	r3, [pc, #72]	; (60f0 <ui_cdc_init+0xf0>)
    60a6:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    60a8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    60aa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    60ac:	2b00      	cmp	r3, #0
    60ae:	d1fc      	bne.n	60aa <ui_cdc_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    60b0:	6833      	ldr	r3, [r6, #0]
    60b2:	2202      	movs	r2, #2
    60b4:	4313      	orrs	r3, r2
    60b6:	6033      	str	r3, [r6, #0]
}
    60b8:	b011      	add	sp, #68	; 0x44
    60ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60bc:	00160002 	.word	0x00160002
    60c0:	00170002 	.word	0x00170002
    60c4:	20000624 	.word	0x20000624
    60c8:	200005e8 	.word	0x200005e8
    60cc:	00005edd 	.word	0x00005edd
    60d0:	200005e4 	.word	0x200005e4
    60d4:	00005eb1 	.word	0x00005eb1
    60d8:	200005e0 	.word	0x200005e0
    60dc:	42001400 	.word	0x42001400
    60e0:	000023d9 	.word	0x000023d9
    60e4:	20000128 	.word	0x20000128
    60e8:	000091b9 	.word	0x000091b9
    60ec:	00002349 	.word	0x00002349
    60f0:	e000e100 	.word	0xe000e100

000060f4 <ui_lb_init>:
{
    60f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60f6:	46c6      	mov	lr, r8
    60f8:	b500      	push	{lr}
    60fa:	b084      	sub	sp, #16
	config->input_pull = PORT_PIN_PULL_UP;
    60fc:	ac03      	add	r4, sp, #12
    60fe:	2501      	movs	r5, #1
    6100:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    6102:	2600      	movs	r6, #0
    6104:	70a6      	strb	r6, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6106:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(UI_LED_1_PIN, &pin_conf);
    6108:	0021      	movs	r1, r4
    610a:	200c      	movs	r0, #12
    610c:	4f1d      	ldr	r7, [pc, #116]	; (6184 <ui_lb_init+0x90>)
    610e:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    6110:	4b1d      	ldr	r3, [pc, #116]	; (6188 <ui_lb_init+0x94>)
    6112:	4698      	mov	r8, r3
    6114:	2380      	movs	r3, #128	; 0x80
    6116:	015b      	lsls	r3, r3, #5
    6118:	4642      	mov	r2, r8
    611a:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_LED_2_PIN, &pin_conf);
    611c:	0021      	movs	r1, r4
    611e:	200d      	movs	r0, #13
    6120:	47b8      	blx	r7
    6122:	2380      	movs	r3, #128	; 0x80
    6124:	019b      	lsls	r3, r3, #6
    6126:	4642      	mov	r2, r8
    6128:	6193      	str	r3, [r2, #24]
	port_pin_set_config(UI_LED_3_PIN, &pin_conf);
    612a:	0021      	movs	r1, r4
    612c:	200f      	movs	r0, #15
    612e:	47b8      	blx	r7
    6130:	2380      	movs	r3, #128	; 0x80
    6132:	021b      	lsls	r3, r3, #8
    6134:	4642      	mov	r2, r8
    6136:	6193      	str	r3, [r2, #24]
	port_pin_set_config(PIN_PB12, &pin_conf);
    6138:	0021      	movs	r1, r4
    613a:	202c      	movs	r0, #44	; 0x2c
    613c:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    613e:	4668      	mov	r0, sp
    6140:	4b12      	ldr	r3, [pc, #72]	; (618c <ui_lb_init+0x98>)
    6142:	4798      	blx	r3
	config_extint_chan.gpio_pin = UI_BUT_1_EIC_PIN;
    6144:	231c      	movs	r3, #28
    6146:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_1_EIC_MUX;
    6148:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    614a:	466b      	mov	r3, sp
    614c:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    614e:	2403      	movs	r4, #3
    6150:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_1_EIC_LINE, &config_extint_chan);
    6152:	4669      	mov	r1, sp
    6154:	2008      	movs	r0, #8
    6156:	4f0e      	ldr	r7, [pc, #56]	; (6190 <ui_lb_init+0x9c>)
    6158:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_2_EIC_PIN;
    615a:	2302      	movs	r3, #2
    615c:	9300      	str	r3, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_2_EIC_MUX;
    615e:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    6160:	466b      	mov	r3, sp
    6162:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6164:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_2_EIC_LINE, &config_extint_chan);
    6166:	4669      	mov	r1, sp
    6168:	2002      	movs	r0, #2
    616a:	47b8      	blx	r7
	config_extint_chan.gpio_pin = UI_BUT_3_EIC_PIN;
    616c:	9400      	str	r4, [sp, #0]
	config_extint_chan.gpio_pin_mux = UI_BUT_3_EIC_MUX;
    616e:	9601      	str	r6, [sp, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    6170:	466b      	mov	r3, sp
    6172:	721d      	strb	r5, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    6174:	72dc      	strb	r4, [r3, #11]
	extint_chan_set_config(UI_BUT_3_EIC_LINE, &config_extint_chan);
    6176:	4669      	mov	r1, sp
    6178:	2003      	movs	r0, #3
    617a:	47b8      	blx	r7
}
    617c:	b004      	add	sp, #16
    617e:	bc04      	pop	{r2}
    6180:	4690      	mov	r8, r2
    6182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6184:	000086ad 	.word	0x000086ad
    6188:	41004400 	.word	0x41004400
    618c:	00001f49 	.word	0x00001f49
    6190:	00001f5d 	.word	0x00001f5d

00006194 <ui_configure_callback>:
{
    6194:	b510      	push	{r4, lr}
	extint_register_callback(ui_button1_callback, UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    6196:	2200      	movs	r2, #0
    6198:	2108      	movs	r1, #8
    619a:	4807      	ldr	r0, [pc, #28]	; (61b8 <ui_configure_callback+0x24>)
    619c:	4c07      	ldr	r4, [pc, #28]	; (61bc <ui_configure_callback+0x28>)
    619e:	47a0      	blx	r4
	extint_register_callback(ui_button3_callback, UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    61a0:	2200      	movs	r2, #0
    61a2:	2103      	movs	r1, #3
    61a4:	4806      	ldr	r0, [pc, #24]	; (61c0 <ui_configure_callback+0x2c>)
    61a6:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_1_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    61a8:	2100      	movs	r1, #0
    61aa:	2008      	movs	r0, #8
    61ac:	4c05      	ldr	r4, [pc, #20]	; (61c4 <ui_configure_callback+0x30>)
    61ae:	47a0      	blx	r4
	extint_chan_enable_callback(UI_BUT_3_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    61b0:	2100      	movs	r1, #0
    61b2:	2003      	movs	r0, #3
    61b4:	47a0      	blx	r4
}
    61b6:	bd10      	pop	{r4, pc}
    61b8:	00005ef5 	.word	0x00005ef5
    61bc:	000070b1 	.word	0x000070b1
    61c0:	00005f81 	.word	0x00005f81
    61c4:	000070dd 	.word	0x000070dd

000061c8 <ui_powerdown>:
    61c8:	2280      	movs	r2, #128	; 0x80
    61ca:	05d2      	lsls	r2, r2, #23
    61cc:	4b01      	ldr	r3, [pc, #4]	; (61d4 <ui_powerdown+0xc>)
    61ce:	619a      	str	r2, [r3, #24]

void ui_powerdown(void)
{
	LED_Off(LED_0_PIN);
}
    61d0:	4770      	bx	lr
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	41004480 	.word	0x41004480

000061d8 <ui_wakeup>:
		port_base->OUTCLR.reg = pin_mask;
    61d8:	2280      	movs	r2, #128	; 0x80
    61da:	05d2      	lsls	r2, r2, #23
    61dc:	4b01      	ldr	r3, [pc, #4]	; (61e4 <ui_wakeup+0xc>)
    61de:	615a      	str	r2, [r3, #20]

void ui_wakeup(void)
{
	LED_On(LED_0_PIN);
}
    61e0:	4770      	bx	lr
    61e2:	46c0      	nop			; (mov r8, r8)
    61e4:	41004480 	.word	0x41004480

000061e8 <ui_start_read>:

void ui_start_read(void)
{
}
    61e8:	4770      	bx	lr

000061ea <ui_stop_read>:

void ui_stop_read(void)
{
}
    61ea:	4770      	bx	lr

000061ec <ui_start_write>:

void ui_start_write(void)
{
}
    61ec:	4770      	bx	lr

000061ee <ui_stop_write>:

void ui_stop_write(void)
{
}
    61ee:	4770      	bx	lr

000061f0 <ui_process>:

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
    61f0:	2800      	cmp	r0, #0
    61f2:	d104      	bne.n	61fe <ui_process+0xe>
    61f4:	2280      	movs	r2, #128	; 0x80
    61f6:	05d2      	lsls	r2, r2, #23
    61f8:	4b05      	ldr	r3, [pc, #20]	; (6210 <ui_process+0x20>)
    61fa:	615a      	str	r2, [r3, #20]
		LED_On(LED_0_PIN);
	}
	if (1000 == framenumber) {
		LED_Off(LED_0_PIN);
	}
}
    61fc:	4770      	bx	lr
	if (1000 == framenumber) {
    61fe:	23fa      	movs	r3, #250	; 0xfa
    6200:	009b      	lsls	r3, r3, #2
    6202:	4298      	cmp	r0, r3
    6204:	d1fa      	bne.n	61fc <ui_process+0xc>
		port_base->OUTSET.reg = pin_mask;
    6206:	2280      	movs	r2, #128	; 0x80
    6208:	05d2      	lsls	r2, r2, #23
    620a:	4b01      	ldr	r3, [pc, #4]	; (6210 <ui_process+0x20>)
    620c:	619a      	str	r2, [r3, #24]
}
    620e:	e7f5      	b.n	61fc <ui_process+0xc>
    6210:	41004480 	.word	0x41004480

00006214 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    6214:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    6216:	000b      	movs	r3, r1
    6218:	332e      	adds	r3, #46	; 0x2e
    621a:	009b      	lsls	r3, r3, #2
    621c:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    621e:	22aa      	movs	r2, #170	; 0xaa
    6220:	0052      	lsls	r2, r2, #1
    6222:	0049      	lsls	r1, r1, #1
    6224:	5a83      	ldrh	r3, [r0, r2]
    6226:	4c03      	ldr	r4, [pc, #12]	; (6234 <usb_device_register_callback+0x20>)
    6228:	5b09      	ldrh	r1, [r1, r4]
    622a:	430b      	orrs	r3, r1
    622c:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    622e:	2000      	movs	r0, #0
    6230:	bd10      	pop	{r4, pc}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	0000aa54 	.word	0x0000aa54

00006238 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    6238:	0049      	lsls	r1, r1, #1
    623a:	4b06      	ldr	r3, [pc, #24]	; (6254 <usb_device_enable_callback+0x1c>)
    623c:	5acb      	ldrh	r3, [r1, r3]
    623e:	6802      	ldr	r2, [r0, #0]
    6240:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    6242:	21ab      	movs	r1, #171	; 0xab
    6244:	0049      	lsls	r1, r1, #1
    6246:	5a42      	ldrh	r2, [r0, r1]
    6248:	431a      	orrs	r2, r3
    624a:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    624c:	6802      	ldr	r2, [r0, #0]
    624e:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    6250:	2000      	movs	r0, #0
    6252:	4770      	bx	lr
    6254:	0000aa54 	.word	0x0000aa54

00006258 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    6258:	0049      	lsls	r1, r1, #1
    625a:	4b05      	ldr	r3, [pc, #20]	; (6270 <usb_device_disable_callback+0x18>)
    625c:	5aca      	ldrh	r2, [r1, r3]
    625e:	21ab      	movs	r1, #171	; 0xab
    6260:	0049      	lsls	r1, r1, #1
    6262:	5a43      	ldrh	r3, [r0, r1]
    6264:	4393      	bics	r3, r2
    6266:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    6268:	6803      	ldr	r3, [r0, #0]
    626a:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    626c:	2000      	movs	r0, #0
    626e:	4770      	bx	lr
    6270:	0000aa54 	.word	0x0000aa54

00006274 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    6274:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    6276:	008c      	lsls	r4, r1, #2
    6278:	18a4      	adds	r4, r4, r2
    627a:	3434      	adds	r4, #52	; 0x34
    627c:	00a4      	lsls	r4, r4, #2
    627e:	1904      	adds	r4, r0, r4
    6280:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    6282:	1840      	adds	r0, r0, r1
    6284:	3059      	adds	r0, #89	; 0x59
    6286:	30ff      	adds	r0, #255	; 0xff
    6288:	7803      	ldrb	r3, [r0, #0]
    628a:	4903      	ldr	r1, [pc, #12]	; (6298 <usb_device_endpoint_register_callback+0x24>)
    628c:	5c8a      	ldrb	r2, [r1, r2]
    628e:	4313      	orrs	r3, r2
    6290:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    6292:	2000      	movs	r0, #0
    6294:	bd10      	pop	{r4, pc}
    6296:	46c0      	nop			; (mov r8, r8)
    6298:	0000aa64 	.word	0x0000aa64

0000629c <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    629c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    629e:	008b      	lsls	r3, r1, #2
    62a0:	189b      	adds	r3, r3, r2
    62a2:	3334      	adds	r3, #52	; 0x34
    62a4:	009b      	lsls	r3, r3, #2
    62a6:	18c3      	adds	r3, r0, r3
    62a8:	2400      	movs	r4, #0
    62aa:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    62ac:	1840      	adds	r0, r0, r1
    62ae:	3059      	adds	r0, #89	; 0x59
    62b0:	30ff      	adds	r0, #255	; 0xff
    62b2:	4b03      	ldr	r3, [pc, #12]	; (62c0 <usb_device_endpoint_unregister_callback+0x24>)
    62b4:	5c9a      	ldrb	r2, [r3, r2]
    62b6:	7803      	ldrb	r3, [r0, #0]
    62b8:	4393      	bics	r3, r2
    62ba:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    62bc:	2000      	movs	r0, #0
    62be:	bd10      	pop	{r4, pc}
    62c0:	0000aa64 	.word	0x0000aa64

000062c4 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    62c4:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    62c6:	230f      	movs	r3, #15
    62c8:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    62ca:	18c4      	adds	r4, r0, r3
    62cc:	3461      	adds	r4, #97	; 0x61
    62ce:	34ff      	adds	r4, #255	; 0xff
    62d0:	7825      	ldrb	r5, [r4, #0]
    62d2:	4e2f      	ldr	r6, [pc, #188]	; (6390 <usb_device_endpoint_enable_callback+0xcc>)
    62d4:	5cb6      	ldrb	r6, [r6, r2]
    62d6:	4335      	orrs	r5, r6
    62d8:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    62da:	2a00      	cmp	r2, #0
    62dc:	d129      	bne.n	6332 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    62de:	2b00      	cmp	r3, #0
    62e0:	d112      	bne.n	6308 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    62e2:	2503      	movs	r5, #3
    62e4:	240a      	movs	r4, #10
    62e6:	34ff      	adds	r4, #255	; 0xff
    62e8:	6806      	ldr	r6, [r0, #0]
    62ea:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    62ec:	2a03      	cmp	r2, #3
    62ee:	d109      	bne.n	6304 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    62f0:	b249      	sxtb	r1, r1
    62f2:	2900      	cmp	r1, #0
    62f4:	db44      	blt.n	6380 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    62f6:	6802      	ldr	r2, [r0, #0]
    62f8:	015b      	lsls	r3, r3, #5
    62fa:	18d3      	adds	r3, r2, r3
    62fc:	330a      	adds	r3, #10
    62fe:	33ff      	adds	r3, #255	; 0xff
    6300:	2220      	movs	r2, #32
    6302:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    6304:	2000      	movs	r0, #0
    6306:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    6308:	b24c      	sxtb	r4, r1
    630a:	2c00      	cmp	r4, #0
    630c:	db08      	blt.n	6320 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    630e:	015c      	lsls	r4, r3, #5
    6310:	6805      	ldr	r5, [r0, #0]
    6312:	46ac      	mov	ip, r5
    6314:	4464      	add	r4, ip
    6316:	340a      	adds	r4, #10
    6318:	34ff      	adds	r4, #255	; 0xff
    631a:	2501      	movs	r5, #1
    631c:	7025      	strb	r5, [r4, #0]
    631e:	e7e5      	b.n	62ec <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    6320:	015c      	lsls	r4, r3, #5
    6322:	6805      	ldr	r5, [r0, #0]
    6324:	46ac      	mov	ip, r5
    6326:	4464      	add	r4, ip
    6328:	340a      	adds	r4, #10
    632a:	34ff      	adds	r4, #255	; 0xff
    632c:	2502      	movs	r5, #2
    632e:	7025      	strb	r5, [r4, #0]
    6330:	e7dc      	b.n	62ec <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    6332:	2a01      	cmp	r2, #1
    6334:	d11a      	bne.n	636c <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    6336:	2b00      	cmp	r3, #0
    6338:	d105      	bne.n	6346 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    633a:	6802      	ldr	r2, [r0, #0]
    633c:	210c      	movs	r1, #12
    633e:	230a      	movs	r3, #10
    6340:	33ff      	adds	r3, #255	; 0xff
    6342:	54d1      	strb	r1, [r2, r3]
    6344:	e7de      	b.n	6304 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    6346:	b249      	sxtb	r1, r1
    6348:	2900      	cmp	r1, #0
    634a:	db07      	blt.n	635c <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    634c:	6802      	ldr	r2, [r0, #0]
    634e:	015b      	lsls	r3, r3, #5
    6350:	18d3      	adds	r3, r2, r3
    6352:	330a      	adds	r3, #10
    6354:	33ff      	adds	r3, #255	; 0xff
    6356:	2204      	movs	r2, #4
    6358:	701a      	strb	r2, [r3, #0]
    635a:	e7d3      	b.n	6304 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    635c:	6802      	ldr	r2, [r0, #0]
    635e:	015b      	lsls	r3, r3, #5
    6360:	18d3      	adds	r3, r2, r3
    6362:	330a      	adds	r3, #10
    6364:	33ff      	adds	r3, #255	; 0xff
    6366:	2208      	movs	r2, #8
    6368:	701a      	strb	r2, [r3, #0]
    636a:	e7cb      	b.n	6304 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    636c:	2a02      	cmp	r2, #2
    636e:	d1bd      	bne.n	62ec <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    6370:	6802      	ldr	r2, [r0, #0]
    6372:	015b      	lsls	r3, r3, #5
    6374:	18d3      	adds	r3, r2, r3
    6376:	330a      	adds	r3, #10
    6378:	33ff      	adds	r3, #255	; 0xff
    637a:	2210      	movs	r2, #16
    637c:	701a      	strb	r2, [r3, #0]
    637e:	e7c1      	b.n	6304 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    6380:	6802      	ldr	r2, [r0, #0]
    6382:	015b      	lsls	r3, r3, #5
    6384:	18d3      	adds	r3, r2, r3
    6386:	330a      	adds	r3, #10
    6388:	33ff      	adds	r3, #255	; 0xff
    638a:	2240      	movs	r2, #64	; 0x40
    638c:	701a      	strb	r2, [r3, #0]
    638e:	e7b9      	b.n	6304 <usb_device_endpoint_enable_callback+0x40>
    6390:	0000aa64 	.word	0x0000aa64

00006394 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    6394:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6396:	230f      	movs	r3, #15
    6398:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    639a:	18c4      	adds	r4, r0, r3
    639c:	3461      	adds	r4, #97	; 0x61
    639e:	34ff      	adds	r4, #255	; 0xff
    63a0:	4d2f      	ldr	r5, [pc, #188]	; (6460 <usb_device_endpoint_disable_callback+0xcc>)
    63a2:	5cae      	ldrb	r6, [r5, r2]
    63a4:	7825      	ldrb	r5, [r4, #0]
    63a6:	43b5      	bics	r5, r6
    63a8:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    63aa:	2a00      	cmp	r2, #0
    63ac:	d129      	bne.n	6402 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    63ae:	2b00      	cmp	r3, #0
    63b0:	d112      	bne.n	63d8 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    63b2:	2503      	movs	r5, #3
    63b4:	2484      	movs	r4, #132	; 0x84
    63b6:	0064      	lsls	r4, r4, #1
    63b8:	6806      	ldr	r6, [r0, #0]
    63ba:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    63bc:	2a03      	cmp	r2, #3
    63be:	d109      	bne.n	63d4 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    63c0:	b249      	sxtb	r1, r1
    63c2:	2900      	cmp	r1, #0
    63c4:	db44      	blt.n	6450 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    63c6:	6802      	ldr	r2, [r0, #0]
    63c8:	015b      	lsls	r3, r3, #5
    63ca:	18d3      	adds	r3, r2, r3
    63cc:	3309      	adds	r3, #9
    63ce:	33ff      	adds	r3, #255	; 0xff
    63d0:	2220      	movs	r2, #32
    63d2:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    63d4:	2000      	movs	r0, #0
    63d6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    63d8:	b24c      	sxtb	r4, r1
    63da:	2c00      	cmp	r4, #0
    63dc:	db08      	blt.n	63f0 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    63de:	015c      	lsls	r4, r3, #5
    63e0:	6805      	ldr	r5, [r0, #0]
    63e2:	46ac      	mov	ip, r5
    63e4:	4464      	add	r4, ip
    63e6:	3409      	adds	r4, #9
    63e8:	34ff      	adds	r4, #255	; 0xff
    63ea:	2501      	movs	r5, #1
    63ec:	7025      	strb	r5, [r4, #0]
    63ee:	e7e5      	b.n	63bc <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    63f0:	015c      	lsls	r4, r3, #5
    63f2:	6805      	ldr	r5, [r0, #0]
    63f4:	46ac      	mov	ip, r5
    63f6:	4464      	add	r4, ip
    63f8:	3409      	adds	r4, #9
    63fa:	34ff      	adds	r4, #255	; 0xff
    63fc:	2502      	movs	r5, #2
    63fe:	7025      	strb	r5, [r4, #0]
    6400:	e7dc      	b.n	63bc <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    6402:	2a01      	cmp	r2, #1
    6404:	d11a      	bne.n	643c <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    6406:	2b00      	cmp	r3, #0
    6408:	d105      	bne.n	6416 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    640a:	6802      	ldr	r2, [r0, #0]
    640c:	210c      	movs	r1, #12
    640e:	3309      	adds	r3, #9
    6410:	33ff      	adds	r3, #255	; 0xff
    6412:	54d1      	strb	r1, [r2, r3]
    6414:	e7de      	b.n	63d4 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    6416:	b249      	sxtb	r1, r1
    6418:	2900      	cmp	r1, #0
    641a:	db07      	blt.n	642c <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    641c:	6802      	ldr	r2, [r0, #0]
    641e:	015b      	lsls	r3, r3, #5
    6420:	18d3      	adds	r3, r2, r3
    6422:	3309      	adds	r3, #9
    6424:	33ff      	adds	r3, #255	; 0xff
    6426:	2204      	movs	r2, #4
    6428:	701a      	strb	r2, [r3, #0]
    642a:	e7d3      	b.n	63d4 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    642c:	6802      	ldr	r2, [r0, #0]
    642e:	015b      	lsls	r3, r3, #5
    6430:	18d3      	adds	r3, r2, r3
    6432:	3309      	adds	r3, #9
    6434:	33ff      	adds	r3, #255	; 0xff
    6436:	2208      	movs	r2, #8
    6438:	701a      	strb	r2, [r3, #0]
    643a:	e7cb      	b.n	63d4 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    643c:	2a02      	cmp	r2, #2
    643e:	d1bd      	bne.n	63bc <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    6440:	6802      	ldr	r2, [r0, #0]
    6442:	015b      	lsls	r3, r3, #5
    6444:	18d3      	adds	r3, r2, r3
    6446:	3309      	adds	r3, #9
    6448:	33ff      	adds	r3, #255	; 0xff
    644a:	2210      	movs	r2, #16
    644c:	701a      	strb	r2, [r3, #0]
    644e:	e7c1      	b.n	63d4 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    6450:	6802      	ldr	r2, [r0, #0]
    6452:	015b      	lsls	r3, r3, #5
    6454:	18d3      	adds	r3, r2, r3
    6456:	3309      	adds	r3, #9
    6458:	33ff      	adds	r3, #255	; 0xff
    645a:	2240      	movs	r2, #64	; 0x40
    645c:	701a      	strb	r2, [r3, #0]
    645e:	e7b9      	b.n	63d4 <usb_device_endpoint_disable_callback+0x40>
    6460:	0000aa64 	.word	0x0000aa64

00006464 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    6464:	2300      	movs	r3, #0
    6466:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    6468:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    646a:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    646c:	3301      	adds	r3, #1
    646e:	70c3      	strb	r3, [r0, #3]
}
    6470:	4770      	bx	lr
	...

00006474 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    6474:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    6476:	780c      	ldrb	r4, [r1, #0]
    6478:	230f      	movs	r3, #15
    647a:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    647c:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    647e:	78ca      	ldrb	r2, [r1, #3]
    6480:	2a04      	cmp	r2, #4
    6482:	d870      	bhi.n	6566 <usb_device_endpoint_set_config+0xf2>
    6484:	0092      	lsls	r2, r2, #2
    6486:	4d89      	ldr	r5, [pc, #548]	; (66ac <usb_device_endpoint_set_config+0x238>)
    6488:	58aa      	ldr	r2, [r5, r2]
    648a:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    648c:	6802      	ldr	r2, [r0, #0]
    648e:	3308      	adds	r3, #8
    6490:	015b      	lsls	r3, r3, #5
    6492:	2100      	movs	r1, #0
    6494:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    6496:	2200      	movs	r2, #0
    6498:	e082      	b.n	65a0 <usb_device_endpoint_set_config+0x12c>
    649a:	015c      	lsls	r4, r3, #5
    649c:	6802      	ldr	r2, [r0, #0]
    649e:	4694      	mov	ip, r2
    64a0:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    64a2:	2280      	movs	r2, #128	; 0x80
    64a4:	0052      	lsls	r2, r2, #1
    64a6:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    64a8:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    64aa:	076d      	lsls	r5, r5, #29
    64ac:	d178      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    64ae:	32e4      	adds	r2, #228	; 0xe4
    64b0:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    64b2:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    64b4:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    64b6:	422e      	tst	r6, r5
    64b8:	d172      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    64ba:	3d5f      	subs	r5, #95	; 0x5f
    64bc:	32e4      	adds	r2, #228	; 0xe4
    64be:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    64c0:	001a      	movs	r2, r3
    64c2:	3208      	adds	r2, #8
    64c4:	0152      	lsls	r2, r2, #5
    64c6:	6804      	ldr	r4, [r0, #0]
    64c8:	18a4      	adds	r4, r4, r2
    64ca:	352f      	adds	r5, #47	; 0x2f
    64cc:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    64ce:	6800      	ldr	r0, [r0, #0]
    64d0:	1882      	adds	r2, r0, r2
    64d2:	2080      	movs	r0, #128	; 0x80
    64d4:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    64d6:	788a      	ldrb	r2, [r1, #2]
    64d8:	2a00      	cmp	r2, #0
    64da:	d01f      	beq.n	651c <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64dc:	0158      	lsls	r0, r3, #5
    64de:	4a74      	ldr	r2, [pc, #464]	; (66b0 <usb_device_endpoint_set_config+0x23c>)
    64e0:	1812      	adds	r2, r2, r0
    64e2:	6854      	ldr	r4, [r2, #4]
    64e4:	2080      	movs	r0, #128	; 0x80
    64e6:	0600      	lsls	r0, r0, #24
    64e8:	4304      	orrs	r4, r0
    64ea:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    64ec:	6954      	ldr	r4, [r2, #20]
    64ee:	4320      	orrs	r0, r4
    64f0:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    64f2:	2507      	movs	r5, #7
    64f4:	784c      	ldrb	r4, [r1, #1]
    64f6:	015a      	lsls	r2, r3, #5
    64f8:	4b6d      	ldr	r3, [pc, #436]	; (66b0 <usb_device_endpoint_set_config+0x23c>)
    64fa:	189b      	adds	r3, r3, r2
    64fc:	6858      	ldr	r0, [r3, #4]
    64fe:	402c      	ands	r4, r5
    6500:	0724      	lsls	r4, r4, #28
    6502:	4e6c      	ldr	r6, [pc, #432]	; (66b4 <usb_device_endpoint_set_config+0x240>)
    6504:	4030      	ands	r0, r6
    6506:	4320      	orrs	r0, r4
    6508:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    650a:	7849      	ldrb	r1, [r1, #1]
    650c:	695a      	ldr	r2, [r3, #20]
    650e:	4029      	ands	r1, r5
    6510:	0709      	lsls	r1, r1, #28
    6512:	4032      	ands	r2, r6
    6514:	430a      	orrs	r2, r1
    6516:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    6518:	2200      	movs	r2, #0
    651a:	e041      	b.n	65a0 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    651c:	0158      	lsls	r0, r3, #5
    651e:	4a64      	ldr	r2, [pc, #400]	; (66b0 <usb_device_endpoint_set_config+0x23c>)
    6520:	1812      	adds	r2, r2, r0
    6522:	6850      	ldr	r0, [r2, #4]
    6524:	0040      	lsls	r0, r0, #1
    6526:	0840      	lsrs	r0, r0, #1
    6528:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    652a:	6950      	ldr	r0, [r2, #20]
    652c:	0040      	lsls	r0, r0, #1
    652e:	0840      	lsrs	r0, r0, #1
    6530:	6150      	str	r0, [r2, #20]
    6532:	e7de      	b.n	64f2 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    6534:	2c00      	cmp	r4, #0
    6536:	db35      	blt.n	65a4 <usb_device_endpoint_set_config+0x130>
    6538:	015d      	lsls	r5, r3, #5
    653a:	6802      	ldr	r2, [r0, #0]
    653c:	4694      	mov	ip, r2
    653e:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6540:	2280      	movs	r2, #128	; 0x80
    6542:	0052      	lsls	r2, r2, #1
    6544:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    6546:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6548:	0776      	lsls	r6, r6, #29
    654a:	d129      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    654c:	2680      	movs	r6, #128	; 0x80
    654e:	0076      	lsls	r6, r6, #1
    6550:	5daa      	ldrb	r2, [r5, r6]
    6552:	2702      	movs	r7, #2
    6554:	433a      	orrs	r2, r7
    6556:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    6558:	6802      	ldr	r2, [r0, #0]
    655a:	0018      	movs	r0, r3
    655c:	3008      	adds	r0, #8
    655e:	0140      	lsls	r0, r0, #5
    6560:	1812      	adds	r2, r2, r0
    6562:	2040      	movs	r0, #64	; 0x40
    6564:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    6566:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    6568:	784f      	ldrb	r7, [r1, #1]
    656a:	005d      	lsls	r5, r3, #1
    656c:	18ad      	adds	r5, r5, r2
    656e:	012d      	lsls	r5, r5, #4
    6570:	4e4f      	ldr	r6, [pc, #316]	; (66b0 <usb_device_endpoint_set_config+0x23c>)
    6572:	1975      	adds	r5, r6, r5
    6574:	6868      	ldr	r0, [r5, #4]
    6576:	2407      	movs	r4, #7
    6578:	403c      	ands	r4, r7
    657a:	0724      	lsls	r4, r4, #28
    657c:	4e4d      	ldr	r6, [pc, #308]	; (66b4 <usb_device_endpoint_set_config+0x240>)
    657e:	4030      	ands	r0, r6
    6580:	4320      	orrs	r0, r4
    6582:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    6584:	7889      	ldrb	r1, [r1, #2]
    6586:	2900      	cmp	r1, #0
    6588:	d000      	beq.n	658c <usb_device_endpoint_set_config+0x118>
    658a:	e088      	b.n	669e <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    658c:	005b      	lsls	r3, r3, #1
    658e:	189b      	adds	r3, r3, r2
    6590:	011b      	lsls	r3, r3, #4
    6592:	4a47      	ldr	r2, [pc, #284]	; (66b0 <usb_device_endpoint_set_config+0x23c>)
    6594:	18d3      	adds	r3, r2, r3
    6596:	685a      	ldr	r2, [r3, #4]
    6598:	0052      	lsls	r2, r2, #1
    659a:	0852      	lsrs	r2, r2, #1
    659c:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    659e:	2200      	movs	r2, #0
}
    65a0:	0010      	movs	r0, r2
    65a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65a4:	015d      	lsls	r5, r3, #5
    65a6:	6802      	ldr	r2, [r0, #0]
    65a8:	4694      	mov	ip, r2
    65aa:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    65ac:	2280      	movs	r2, #128	; 0x80
    65ae:	0052      	lsls	r2, r2, #1
    65b0:	5caf      	ldrb	r7, [r5, r2]
    65b2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    65b4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    65b6:	4237      	tst	r7, r6
    65b8:	d1f2      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    65ba:	3690      	adds	r6, #144	; 0x90
    65bc:	5daa      	ldrb	r2, [r5, r6]
    65be:	2720      	movs	r7, #32
    65c0:	433a      	orrs	r2, r7
    65c2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    65c4:	6802      	ldr	r2, [r0, #0]
    65c6:	0018      	movs	r0, r3
    65c8:	3008      	adds	r0, #8
    65ca:	0140      	lsls	r0, r0, #5
    65cc:	1812      	adds	r2, r2, r0
    65ce:	2080      	movs	r0, #128	; 0x80
    65d0:	7110      	strb	r0, [r2, #4]
    65d2:	e7c8      	b.n	6566 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    65d4:	2c00      	cmp	r4, #0
    65d6:	db17      	blt.n	6608 <usb_device_endpoint_set_config+0x194>
    65d8:	015d      	lsls	r5, r3, #5
    65da:	6802      	ldr	r2, [r0, #0]
    65dc:	4694      	mov	ip, r2
    65de:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65e0:	2280      	movs	r2, #128	; 0x80
    65e2:	0052      	lsls	r2, r2, #1
    65e4:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    65e6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    65e8:	0776      	lsls	r6, r6, #29
    65ea:	d1d9      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    65ec:	2680      	movs	r6, #128	; 0x80
    65ee:	0076      	lsls	r6, r6, #1
    65f0:	5daa      	ldrb	r2, [r5, r6]
    65f2:	2703      	movs	r7, #3
    65f4:	433a      	orrs	r2, r7
    65f6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    65f8:	6802      	ldr	r2, [r0, #0]
    65fa:	0018      	movs	r0, r3
    65fc:	3008      	adds	r0, #8
    65fe:	0140      	lsls	r0, r0, #5
    6600:	1812      	adds	r2, r2, r0
    6602:	2040      	movs	r0, #64	; 0x40
    6604:	7150      	strb	r0, [r2, #5]
    6606:	e7ae      	b.n	6566 <usb_device_endpoint_set_config+0xf2>
    6608:	015d      	lsls	r5, r3, #5
    660a:	6802      	ldr	r2, [r0, #0]
    660c:	4694      	mov	ip, r2
    660e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6610:	2280      	movs	r2, #128	; 0x80
    6612:	0052      	lsls	r2, r2, #1
    6614:	5caf      	ldrb	r7, [r5, r2]
    6616:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    6618:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    661a:	4237      	tst	r7, r6
    661c:	d1c0      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    661e:	3690      	adds	r6, #144	; 0x90
    6620:	5daa      	ldrb	r2, [r5, r6]
    6622:	2730      	movs	r7, #48	; 0x30
    6624:	433a      	orrs	r2, r7
    6626:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6628:	6802      	ldr	r2, [r0, #0]
    662a:	0018      	movs	r0, r3
    662c:	3008      	adds	r0, #8
    662e:	0140      	lsls	r0, r0, #5
    6630:	1812      	adds	r2, r2, r0
    6632:	2080      	movs	r0, #128	; 0x80
    6634:	7110      	strb	r0, [r2, #4]
    6636:	e796      	b.n	6566 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    6638:	2c00      	cmp	r4, #0
    663a:	db17      	blt.n	666c <usb_device_endpoint_set_config+0x1f8>
    663c:	015d      	lsls	r5, r3, #5
    663e:	6802      	ldr	r2, [r0, #0]
    6640:	4694      	mov	ip, r2
    6642:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    6644:	2280      	movs	r2, #128	; 0x80
    6646:	0052      	lsls	r2, r2, #1
    6648:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    664a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    664c:	0776      	lsls	r6, r6, #29
    664e:	d1a7      	bne.n	65a0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    6650:	2680      	movs	r6, #128	; 0x80
    6652:	0076      	lsls	r6, r6, #1
    6654:	5daa      	ldrb	r2, [r5, r6]
    6656:	2704      	movs	r7, #4
    6658:	433a      	orrs	r2, r7
    665a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    665c:	6802      	ldr	r2, [r0, #0]
    665e:	0018      	movs	r0, r3
    6660:	3008      	adds	r0, #8
    6662:	0140      	lsls	r0, r0, #5
    6664:	1812      	adds	r2, r2, r0
    6666:	2040      	movs	r0, #64	; 0x40
    6668:	7150      	strb	r0, [r2, #5]
    666a:	e77c      	b.n	6566 <usb_device_endpoint_set_config+0xf2>
    666c:	015d      	lsls	r5, r3, #5
    666e:	6802      	ldr	r2, [r0, #0]
    6670:	4694      	mov	ip, r2
    6672:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    6674:	2280      	movs	r2, #128	; 0x80
    6676:	0052      	lsls	r2, r2, #1
    6678:	5caf      	ldrb	r7, [r5, r2]
    667a:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    667c:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    667e:	4237      	tst	r7, r6
    6680:	d000      	beq.n	6684 <usb_device_endpoint_set_config+0x210>
    6682:	e78d      	b.n	65a0 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    6684:	3690      	adds	r6, #144	; 0x90
    6686:	5daa      	ldrb	r2, [r5, r6]
    6688:	2740      	movs	r7, #64	; 0x40
    668a:	433a      	orrs	r2, r7
    668c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    668e:	6802      	ldr	r2, [r0, #0]
    6690:	0018      	movs	r0, r3
    6692:	3008      	adds	r0, #8
    6694:	0140      	lsls	r0, r0, #5
    6696:	1812      	adds	r2, r2, r0
    6698:	2080      	movs	r0, #128	; 0x80
    669a:	7110      	strb	r0, [r2, #4]
    669c:	e763      	b.n	6566 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    669e:	6869      	ldr	r1, [r5, #4]
    66a0:	2380      	movs	r3, #128	; 0x80
    66a2:	061b      	lsls	r3, r3, #24
    66a4:	430b      	orrs	r3, r1
    66a6:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    66a8:	2200      	movs	r2, #0
    66aa:	e779      	b.n	65a0 <usb_device_endpoint_set_config+0x12c>
    66ac:	0000aa40 	.word	0x0000aa40
    66b0:	20000ccc 	.word	0x20000ccc
    66b4:	8fffffff 	.word	0x8fffffff

000066b8 <usb_device_endpoint_is_configured>:
 *
 * \return \c true if endpoint is configured and ready to use
 */
bool usb_device_endpoint_is_configured(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    66b8:	230f      	movs	r3, #15
    66ba:	400b      	ands	r3, r1
	uint8_t flag;

	if (ep & USB_EP_DIR_IN) {
    66bc:	b249      	sxtb	r1, r1
    66be:	2900      	cmp	r1, #0
    66c0:	db09      	blt.n	66d6 <usb_device_endpoint_is_configured+0x1e>
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	} else {
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    66c2:	6802      	ldr	r2, [r0, #0]
    66c4:	3308      	adds	r3, #8
    66c6:	015b      	lsls	r3, r3, #5
    66c8:	5c98      	ldrb	r0, [r3, r2]
    66ca:	0740      	lsls	r0, r0, #29
    66cc:	0f40      	lsrs	r0, r0, #29
	}
	return ((enum usb_device_endpoint_type)(flag) != USB_DEVICE_ENDPOINT_TYPE_DISABLE);
    66ce:	1e43      	subs	r3, r0, #1
    66d0:	4198      	sbcs	r0, r3
    66d2:	b2c0      	uxtb	r0, r0
}
    66d4:	4770      	bx	lr
		flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    66d6:	6802      	ldr	r2, [r0, #0]
    66d8:	3308      	adds	r3, #8
    66da:	015b      	lsls	r3, r3, #5
    66dc:	5c98      	ldrb	r0, [r3, r2]
    66de:	0640      	lsls	r0, r0, #25
    66e0:	0f40      	lsrs	r0, r0, #29
    66e2:	e7f4      	b.n	66ce <usb_device_endpoint_is_configured+0x16>

000066e4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    66e4:	230f      	movs	r3, #15
    66e6:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    66e8:	b249      	sxtb	r1, r1
    66ea:	2900      	cmp	r1, #0
    66ec:	db0a      	blt.n	6704 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    66ee:	3308      	adds	r3, #8
    66f0:	015b      	lsls	r3, r3, #5
    66f2:	6802      	ldr	r2, [r0, #0]
    66f4:	18d2      	adds	r2, r2, r3
    66f6:	2140      	movs	r1, #64	; 0x40
    66f8:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    66fa:	6802      	ldr	r2, [r0, #0]
    66fc:	18d3      	adds	r3, r2, r3
    66fe:	2201      	movs	r2, #1
    6700:	71da      	strb	r2, [r3, #7]
	}
}
    6702:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    6704:	3308      	adds	r3, #8
    6706:	015b      	lsls	r3, r3, #5
    6708:	6802      	ldr	r2, [r0, #0]
    670a:	18d2      	adds	r2, r2, r3
    670c:	2180      	movs	r1, #128	; 0x80
    670e:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6710:	6802      	ldr	r2, [r0, #0]
    6712:	18d3      	adds	r3, r2, r3
    6714:	2202      	movs	r2, #2
    6716:	71da      	strb	r2, [r3, #7]
    6718:	e7f3      	b.n	6702 <usb_device_endpoint_abort_job+0x1e>

0000671a <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    671a:	230f      	movs	r3, #15
    671c:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    671e:	b249      	sxtb	r1, r1
    6720:	2900      	cmp	r1, #0
    6722:	db07      	blt.n	6734 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    6724:	6802      	ldr	r2, [r0, #0]
    6726:	3308      	adds	r3, #8
    6728:	015b      	lsls	r3, r3, #5
    672a:	18d3      	adds	r3, r2, r3
    672c:	7998      	ldrb	r0, [r3, #6]
    672e:	06c0      	lsls	r0, r0, #27
    6730:	0fc0      	lsrs	r0, r0, #31
	}
}
    6732:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    6734:	6802      	ldr	r2, [r0, #0]
    6736:	3308      	adds	r3, #8
    6738:	015b      	lsls	r3, r3, #5
    673a:	18d3      	adds	r3, r2, r3
    673c:	7998      	ldrb	r0, [r3, #6]
    673e:	0680      	lsls	r0, r0, #26
    6740:	0fc0      	lsrs	r0, r0, #31
    6742:	e7f6      	b.n	6732 <usb_device_endpoint_is_halted+0x18>

00006744 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    6744:	230f      	movs	r3, #15
    6746:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    6748:	b249      	sxtb	r1, r1
    674a:	2900      	cmp	r1, #0
    674c:	db06      	blt.n	675c <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    674e:	6802      	ldr	r2, [r0, #0]
    6750:	3308      	adds	r3, #8
    6752:	015b      	lsls	r3, r3, #5
    6754:	18d3      	adds	r3, r2, r3
    6756:	2210      	movs	r2, #16
    6758:	715a      	strb	r2, [r3, #5]
	}
}
    675a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    675c:	6802      	ldr	r2, [r0, #0]
    675e:	3308      	adds	r3, #8
    6760:	015b      	lsls	r3, r3, #5
    6762:	18d3      	adds	r3, r2, r3
    6764:	2220      	movs	r2, #32
    6766:	715a      	strb	r2, [r3, #5]
    6768:	e7f7      	b.n	675a <usb_device_endpoint_set_halt+0x16>

0000676a <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    676a:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    676c:	230f      	movs	r3, #15
    676e:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    6770:	b249      	sxtb	r1, r1
    6772:	2900      	cmp	r1, #0
    6774:	db1d      	blt.n	67b2 <usb_device_endpoint_clear_halt+0x48>
    6776:	0159      	lsls	r1, r3, #5
    6778:	6802      	ldr	r2, [r0, #0]
    677a:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    677c:	2483      	movs	r4, #131	; 0x83
    677e:	0064      	lsls	r4, r4, #1
    6780:	5d14      	ldrb	r4, [r2, r4]
    6782:	06e4      	lsls	r4, r4, #27
    6784:	d514      	bpl.n	67b0 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    6786:	2510      	movs	r5, #16
    6788:	2482      	movs	r4, #130	; 0x82
    678a:	0064      	lsls	r4, r4, #1
    678c:	5515      	strb	r5, [r2, r4]
    678e:	6802      	ldr	r2, [r0, #0]
    6790:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6792:	2108      	movs	r1, #8
    6794:	31ff      	adds	r1, #255	; 0xff
    6796:	5c51      	ldrb	r1, [r2, r1]
    6798:	0689      	lsls	r1, r1, #26
    679a:	d509      	bpl.n	67b0 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    679c:	3ce4      	subs	r4, #228	; 0xe4
    679e:	2108      	movs	r1, #8
    67a0:	31ff      	adds	r1, #255	; 0xff
    67a2:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    67a4:	6802      	ldr	r2, [r0, #0]
    67a6:	3308      	adds	r3, #8
    67a8:	015b      	lsls	r3, r3, #5
    67aa:	18d3      	adds	r3, r2, r3
    67ac:	2201      	movs	r2, #1
    67ae:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    67b0:	bd30      	pop	{r4, r5, pc}
    67b2:	0159      	lsls	r1, r3, #5
    67b4:	6802      	ldr	r2, [r0, #0]
    67b6:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    67b8:	2483      	movs	r4, #131	; 0x83
    67ba:	0064      	lsls	r4, r4, #1
    67bc:	5d14      	ldrb	r4, [r2, r4]
    67be:	06a4      	lsls	r4, r4, #26
    67c0:	d5f6      	bpl.n	67b0 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    67c2:	2520      	movs	r5, #32
    67c4:	2482      	movs	r4, #130	; 0x82
    67c6:	0064      	lsls	r4, r4, #1
    67c8:	5515      	strb	r5, [r2, r4]
    67ca:	6802      	ldr	r2, [r0, #0]
    67cc:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    67ce:	2108      	movs	r1, #8
    67d0:	31ff      	adds	r1, #255	; 0xff
    67d2:	5c51      	ldrb	r1, [r2, r1]
    67d4:	0649      	lsls	r1, r1, #25
    67d6:	d5eb      	bpl.n	67b0 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    67d8:	3cc4      	subs	r4, #196	; 0xc4
    67da:	2108      	movs	r1, #8
    67dc:	31ff      	adds	r1, #255	; 0xff
    67de:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    67e0:	6802      	ldr	r2, [r0, #0]
    67e2:	3308      	adds	r3, #8
    67e4:	015b      	lsls	r3, r3, #5
    67e6:	18d3      	adds	r3, r2, r3
    67e8:	2202      	movs	r2, #2
    67ea:	711a      	strb	r2, [r3, #4]
    67ec:	e7e0      	b.n	67b0 <usb_device_endpoint_clear_halt+0x46>
	...

000067f0 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    67f0:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    67f2:	000c      	movs	r4, r1
    67f4:	3408      	adds	r4, #8
    67f6:	0164      	lsls	r4, r4, #5
    67f8:	6805      	ldr	r5, [r0, #0]
    67fa:	5d64      	ldrb	r4, [r4, r5]
    67fc:	0664      	lsls	r4, r4, #25
    67fe:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6800:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6802:	2c00      	cmp	r4, #0
    6804:	d101      	bne.n	680a <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    6806:	0028      	movs	r0, r5
    6808:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    680a:	014c      	lsls	r4, r1, #5
    680c:	4d0b      	ldr	r5, [pc, #44]	; (683c <usb_device_endpoint_write_buffer_job+0x4c>)
    680e:	192d      	adds	r5, r5, r4
    6810:	002c      	movs	r4, r5
    6812:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    6814:	696a      	ldr	r2, [r5, #20]
    6816:	4d0a      	ldr	r5, [pc, #40]	; (6840 <usb_device_endpoint_write_buffer_job+0x50>)
    6818:	402a      	ands	r2, r5
    681a:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    681c:	6962      	ldr	r2, [r4, #20]
    681e:	049b      	lsls	r3, r3, #18
    6820:	0c9b      	lsrs	r3, r3, #18
    6822:	0b92      	lsrs	r2, r2, #14
    6824:	0392      	lsls	r2, r2, #14
    6826:	4313      	orrs	r3, r2
    6828:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    682a:	6803      	ldr	r3, [r0, #0]
    682c:	3108      	adds	r1, #8
    682e:	0149      	lsls	r1, r1, #5
    6830:	1859      	adds	r1, r3, r1
    6832:	2380      	movs	r3, #128	; 0x80
    6834:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    6836:	2500      	movs	r5, #0
    6838:	e7e5      	b.n	6806 <usb_device_endpoint_write_buffer_job+0x16>
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	20000ccc 	.word	0x20000ccc
    6840:	f0003fff 	.word	0xf0003fff

00006844 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    6844:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    6846:	000c      	movs	r4, r1
    6848:	3408      	adds	r4, #8
    684a:	0164      	lsls	r4, r4, #5
    684c:	6805      	ldr	r5, [r0, #0]
    684e:	5d64      	ldrb	r4, [r4, r5]
    6850:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    6852:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    6854:	2c00      	cmp	r4, #0
    6856:	d101      	bne.n	685c <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    6858:	0028      	movs	r0, r5
    685a:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    685c:	4c0b      	ldr	r4, [pc, #44]	; (688c <usb_device_endpoint_read_buffer_job+0x48>)
    685e:	014d      	lsls	r5, r1, #5
    6860:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    6862:	1962      	adds	r2, r4, r5
    6864:	6854      	ldr	r4, [r2, #4]
    6866:	049b      	lsls	r3, r3, #18
    6868:	091b      	lsrs	r3, r3, #4
    686a:	4d09      	ldr	r5, [pc, #36]	; (6890 <usb_device_endpoint_read_buffer_job+0x4c>)
    686c:	402c      	ands	r4, r5
    686e:	4323      	orrs	r3, r4
    6870:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6872:	6853      	ldr	r3, [r2, #4]
    6874:	0b9b      	lsrs	r3, r3, #14
    6876:	039b      	lsls	r3, r3, #14
    6878:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    687a:	6803      	ldr	r3, [r0, #0]
    687c:	3108      	adds	r1, #8
    687e:	0149      	lsls	r1, r1, #5
    6880:	1859      	adds	r1, r3, r1
    6882:	2340      	movs	r3, #64	; 0x40
    6884:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    6886:	2500      	movs	r5, #0
    6888:	e7e6      	b.n	6858 <usb_device_endpoint_read_buffer_job+0x14>
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	20000ccc 	.word	0x20000ccc
    6890:	f0003fff 	.word	0xf0003fff

00006894 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    6894:	4b09      	ldr	r3, [pc, #36]	; (68bc <usb_device_endpoint_setup_buffer_job+0x28>)
    6896:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    6898:	685a      	ldr	r2, [r3, #4]
    689a:	4909      	ldr	r1, [pc, #36]	; (68c0 <usb_device_endpoint_setup_buffer_job+0x2c>)
    689c:	4011      	ands	r1, r2
    689e:	2280      	movs	r2, #128	; 0x80
    68a0:	0292      	lsls	r2, r2, #10
    68a2:	430a      	orrs	r2, r1
    68a4:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    68a6:	685a      	ldr	r2, [r3, #4]
    68a8:	0b92      	lsrs	r2, r2, #14
    68aa:	0392      	lsls	r2, r2, #14
    68ac:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    68ae:	6802      	ldr	r2, [r0, #0]
    68b0:	2140      	movs	r1, #64	; 0x40
    68b2:	2382      	movs	r3, #130	; 0x82
    68b4:	005b      	lsls	r3, r3, #1
    68b6:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    68b8:	2000      	movs	r0, #0
    68ba:	4770      	bx	lr
    68bc:	20000ccc 	.word	0x20000ccc
    68c0:	f0003fff 	.word	0xf0003fff

000068c4 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    68c4:	6802      	ldr	r2, [r0, #0]
    68c6:	7813      	ldrb	r3, [r2, #0]
    68c8:	2102      	movs	r1, #2
    68ca:	430b      	orrs	r3, r1
    68cc:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    68ce:	6802      	ldr	r2, [r0, #0]
    68d0:	7893      	ldrb	r3, [r2, #2]
    68d2:	2b02      	cmp	r3, #2
    68d4:	d0fc      	beq.n	68d0 <usb_enable+0xc>
}
    68d6:	4770      	bx	lr

000068d8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    68d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68da:	46de      	mov	lr, fp
    68dc:	4657      	mov	r7, sl
    68de:	464e      	mov	r6, r9
    68e0:	4645      	mov	r5, r8
    68e2:	b5e0      	push	{r5, r6, r7, lr}
    68e4:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    68e6:	4bc2      	ldr	r3, [pc, #776]	; (6bf0 <USB_Handler+0x318>)
    68e8:	681f      	ldr	r7, [r3, #0]
    68ea:	683d      	ldr	r5, [r7, #0]
    68ec:	782b      	ldrb	r3, [r5, #0]
    68ee:	09db      	lsrs	r3, r3, #7
    68f0:	d114      	bne.n	691c <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    68f2:	8c2e      	ldrh	r6, [r5, #32]
    68f4:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    68f6:	2e00      	cmp	r6, #0
    68f8:	d000      	beq.n	68fc <USB_Handler+0x24>
    68fa:	e1a9      	b.n	6c50 <USB_Handler+0x378>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    68fc:	8bae      	ldrh	r6, [r5, #28]
    68fe:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    6900:	23ab      	movs	r3, #171	; 0xab
    6902:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    6904:	5afb      	ldrh	r3, [r7, r3]
    6906:	22aa      	movs	r2, #170	; 0xaa
    6908:	0052      	lsls	r2, r2, #1
    690a:	5abd      	ldrh	r5, [r7, r2]
    690c:	401d      	ands	r5, r3
    690e:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6910:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    6912:	4fb8      	ldr	r7, [pc, #736]	; (6bf4 <USB_Handler+0x31c>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6914:	4bb6      	ldr	r3, [pc, #728]	; (6bf0 <USB_Handler+0x318>)
    6916:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6918:	4698      	mov	r8, r3
    691a:	e184      	b.n	6c26 <USB_Handler+0x34e>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    691c:	8c2b      	ldrh	r3, [r5, #32]
    691e:	b29b      	uxth	r3, r3
    6920:	2b00      	cmp	r3, #0
    6922:	d100      	bne.n	6926 <USB_Handler+0x4e>
    6924:	e0de      	b.n	6ae4 <USB_Handler+0x20c>
    6926:	8c28      	ldrh	r0, [r5, #32]
    6928:	b280      	uxth	r0, r0
    692a:	4bb3      	ldr	r3, [pc, #716]	; (6bf8 <USB_Handler+0x320>)
    692c:	4798      	blx	r3
    692e:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    6930:	281f      	cmp	r0, #31
    6932:	d900      	bls.n	6936 <USB_Handler+0x5e>
    6934:	e0d6      	b.n	6ae4 <USB_Handler+0x20c>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    6936:	0003      	movs	r3, r0
    6938:	3308      	adds	r3, #8
    693a:	015b      	lsls	r3, r3, #5
    693c:	18ed      	adds	r5, r5, r3
    693e:	79ed      	ldrb	r5, [r5, #7]
    6940:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    6942:	07ab      	lsls	r3, r5, #30
    6944:	d041      	beq.n	69ca <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6946:	4aad      	ldr	r2, [pc, #692]	; (6bfc <USB_Handler+0x324>)
    6948:	2301      	movs	r3, #1
    694a:	4083      	lsls	r3, r0
    694c:	6811      	ldr	r1, [r2, #0]
    694e:	4399      	bics	r1, r3
    6950:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6952:	0003      	movs	r3, r0
    6954:	3308      	adds	r3, #8
    6956:	015b      	lsls	r3, r3, #5
    6958:	683a      	ldr	r2, [r7, #0]
    695a:	4694      	mov	ip, r2
    695c:	4463      	add	r3, ip
    695e:	2203      	movs	r2, #3
    6960:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6962:	183b      	adds	r3, r7, r0
    6964:	33ae      	adds	r3, #174	; 0xae
    6966:	781b      	ldrb	r3, [r3, #0]
    6968:	07db      	lsls	r3, r3, #31
    696a:	d52e      	bpl.n	69ca <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    696c:	4ba4      	ldr	r3, [pc, #656]	; (6c00 <USB_Handler+0x328>)
    696e:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    6970:	683a      	ldr	r2, [r7, #0]
    6972:	0003      	movs	r3, r0
    6974:	3308      	adds	r3, #8
    6976:	015b      	lsls	r3, r3, #5
    6978:	5c9b      	ldrb	r3, [r3, r2]
    697a:	079b      	lsls	r3, r3, #30
    697c:	0f9b      	lsrs	r3, r3, #30
    697e:	2b01      	cmp	r3, #1
    6980:	d100      	bne.n	6984 <USB_Handler+0xac>
    6982:	e081      	b.n	6a88 <USB_Handler+0x1b0>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6984:	0142      	lsls	r2, r0, #5
    6986:	4b9f      	ldr	r3, [pc, #636]	; (6c04 <USB_Handler+0x32c>)
    6988:	189b      	adds	r3, r3, r2
    698a:	685a      	ldr	r2, [r3, #4]
    698c:	0112      	lsls	r2, r2, #4
    698e:	0c92      	lsrs	r2, r2, #18
    6990:	b290      	uxth	r0, r2
    6992:	499b      	ldr	r1, [pc, #620]	; (6c00 <USB_Handler+0x328>)
    6994:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6996:	685a      	ldr	r2, [r3, #4]
    6998:	0492      	lsls	r2, r2, #18
    699a:	0c92      	lsrs	r2, r2, #18
    699c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    699e:	685a      	ldr	r2, [r3, #4]
    69a0:	4999      	ldr	r1, [pc, #612]	; (6c08 <USB_Handler+0x330>)
    69a2:	400a      	ands	r2, r1
    69a4:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    69a6:	2800      	cmp	r0, #0
    69a8:	d107      	bne.n	69ba <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    69aa:	0162      	lsls	r2, r4, #5
    69ac:	4b95      	ldr	r3, [pc, #596]	; (6c04 <USB_Handler+0x32c>)
    69ae:	189b      	adds	r3, r3, r2
    69b0:	685b      	ldr	r3, [r3, #4]
    69b2:	049b      	lsls	r3, r3, #18
    69b4:	0c9b      	lsrs	r3, r3, #18
    69b6:	4a92      	ldr	r2, [pc, #584]	; (6c00 <USB_Handler+0x328>)
    69b8:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    69ba:	4b8d      	ldr	r3, [pc, #564]	; (6bf0 <USB_Handler+0x318>)
    69bc:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    69be:	1ca3      	adds	r3, r4, #2
    69c0:	011b      	lsls	r3, r3, #4
    69c2:	18c3      	adds	r3, r0, r3
    69c4:	685b      	ldr	r3, [r3, #4]
    69c6:	498e      	ldr	r1, [pc, #568]	; (6c00 <USB_Handler+0x328>)
    69c8:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    69ca:	076b      	lsls	r3, r5, #29
    69cc:	d50e      	bpl.n	69ec <USB_Handler+0x114>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    69ce:	4a8b      	ldr	r2, [pc, #556]	; (6bfc <USB_Handler+0x324>)
    69d0:	2301      	movs	r3, #1
    69d2:	40a3      	lsls	r3, r4
    69d4:	6811      	ldr	r1, [r2, #0]
    69d6:	4399      	bics	r1, r3
    69d8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    69da:	4b85      	ldr	r3, [pc, #532]	; (6bf0 <USB_Handler+0x318>)
    69dc:	681b      	ldr	r3, [r3, #0]
    69de:	681b      	ldr	r3, [r3, #0]
    69e0:	0022      	movs	r2, r4
    69e2:	3208      	adds	r2, #8
    69e4:	0152      	lsls	r2, r2, #5
    69e6:	189b      	adds	r3, r3, r2
    69e8:	2204      	movs	r2, #4
    69ea:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    69ec:	072b      	lsls	r3, r5, #28
    69ee:	d514      	bpl.n	6a1a <USB_Handler+0x142>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    69f0:	4a82      	ldr	r2, [pc, #520]	; (6bfc <USB_Handler+0x324>)
    69f2:	2301      	movs	r3, #1
    69f4:	40a3      	lsls	r3, r4
    69f6:	6811      	ldr	r1, [r2, #0]
    69f8:	4399      	bics	r1, r3
    69fa:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    69fc:	4b7c      	ldr	r3, [pc, #496]	; (6bf0 <USB_Handler+0x318>)
    69fe:	6818      	ldr	r0, [r3, #0]
    6a00:	0023      	movs	r3, r4
    6a02:	3308      	adds	r3, #8
    6a04:	015b      	lsls	r3, r3, #5
    6a06:	6802      	ldr	r2, [r0, #0]
    6a08:	4694      	mov	ip, r2
    6a0a:	4463      	add	r3, ip
    6a0c:	2208      	movs	r2, #8
    6a0e:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6a10:	1903      	adds	r3, r0, r4
    6a12:	33ae      	adds	r3, #174	; 0xae
    6a14:	781b      	ldrb	r3, [r3, #0]
    6a16:	079b      	lsls	r3, r3, #30
    6a18:	d447      	bmi.n	6aaa <USB_Handler+0x1d2>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    6a1a:	06eb      	lsls	r3, r5, #27
    6a1c:	d514      	bpl.n	6a48 <USB_Handler+0x170>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a1e:	4a77      	ldr	r2, [pc, #476]	; (6bfc <USB_Handler+0x324>)
    6a20:	2301      	movs	r3, #1
    6a22:	40a3      	lsls	r3, r4
    6a24:	6811      	ldr	r1, [r2, #0]
    6a26:	4399      	bics	r1, r3
    6a28:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a2a:	4b71      	ldr	r3, [pc, #452]	; (6bf0 <USB_Handler+0x318>)
    6a2c:	6818      	ldr	r0, [r3, #0]
    6a2e:	0023      	movs	r3, r4
    6a30:	3308      	adds	r3, #8
    6a32:	015b      	lsls	r3, r3, #5
    6a34:	6802      	ldr	r2, [r0, #0]
    6a36:	4694      	mov	ip, r2
    6a38:	4463      	add	r3, ip
    6a3a:	2210      	movs	r2, #16
    6a3c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6a3e:	1903      	adds	r3, r0, r4
    6a40:	33ae      	adds	r3, #174	; 0xae
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	075b      	lsls	r3, r3, #29
    6a46:	d43e      	bmi.n	6ac6 <USB_Handler+0x1ee>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    6a48:	06ab      	lsls	r3, r5, #26
    6a4a:	d400      	bmi.n	6a4e <USB_Handler+0x176>
    6a4c:	e0b0      	b.n	6bb0 <USB_Handler+0x2d8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    6a4e:	4a6b      	ldr	r2, [pc, #428]	; (6bfc <USB_Handler+0x324>)
    6a50:	2301      	movs	r3, #1
    6a52:	40a3      	lsls	r3, r4
    6a54:	6811      	ldr	r1, [r2, #0]
    6a56:	4399      	bics	r1, r3
    6a58:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    6a5a:	4b65      	ldr	r3, [pc, #404]	; (6bf0 <USB_Handler+0x318>)
    6a5c:	6818      	ldr	r0, [r3, #0]
    6a5e:	0023      	movs	r3, r4
    6a60:	3308      	adds	r3, #8
    6a62:	015b      	lsls	r3, r3, #5
    6a64:	6802      	ldr	r2, [r0, #0]
    6a66:	4694      	mov	ip, r2
    6a68:	4463      	add	r3, ip
    6a6a:	2220      	movs	r2, #32
    6a6c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    6a6e:	1903      	adds	r3, r0, r4
    6a70:	33ae      	adds	r3, #174	; 0xae
    6a72:	781b      	ldrb	r3, [r3, #0]
    6a74:	071b      	lsls	r3, r3, #28
    6a76:	d400      	bmi.n	6a7a <USB_Handler+0x1a2>
    6a78:	e09a      	b.n	6bb0 <USB_Handler+0x2d8>
				pipe_callback_para.pipe_num = pipe_int;
    6a7a:	4961      	ldr	r1, [pc, #388]	; (6c00 <USB_Handler+0x328>)
    6a7c:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    6a7e:	0124      	lsls	r4, r4, #4
    6a80:	1904      	adds	r4, r0, r4
    6a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6a84:	4798      	blx	r3
    6a86:	e093      	b.n	6bb0 <USB_Handler+0x2d8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    6a88:	0142      	lsls	r2, r0, #5
    6a8a:	4b5e      	ldr	r3, [pc, #376]	; (6c04 <USB_Handler+0x32c>)
    6a8c:	189b      	adds	r3, r3, r2
    6a8e:	685a      	ldr	r2, [r3, #4]
    6a90:	0492      	lsls	r2, r2, #18
    6a92:	0c92      	lsrs	r2, r2, #18
    6a94:	495a      	ldr	r1, [pc, #360]	; (6c00 <USB_Handler+0x328>)
    6a96:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6a98:	685a      	ldr	r2, [r3, #4]
    6a9a:	0112      	lsls	r2, r2, #4
    6a9c:	0c92      	lsrs	r2, r2, #18
    6a9e:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    6aa0:	685a      	ldr	r2, [r3, #4]
    6aa2:	0b92      	lsrs	r2, r2, #14
    6aa4:	0392      	lsls	r2, r2, #14
    6aa6:	605a      	str	r2, [r3, #4]
    6aa8:	e787      	b.n	69ba <USB_Handler+0xe2>
				pipe_callback_para.pipe_num = pipe_int;
    6aaa:	4955      	ldr	r1, [pc, #340]	; (6c00 <USB_Handler+0x328>)
    6aac:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    6aae:	0162      	lsls	r2, r4, #5
    6ab0:	4b54      	ldr	r3, [pc, #336]	; (6c04 <USB_Handler+0x32c>)
    6ab2:	189b      	adds	r3, r3, r2
    6ab4:	89db      	ldrh	r3, [r3, #14]
    6ab6:	221f      	movs	r2, #31
    6ab8:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    6aba:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    6abc:	0123      	lsls	r3, r4, #4
    6abe:	18c3      	adds	r3, r0, r3
    6ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ac2:	4798      	blx	r3
    6ac4:	e7a9      	b.n	6a1a <USB_Handler+0x142>
				pipe_callback_para.pipe_num = pipe_int;
    6ac6:	494e      	ldr	r1, [pc, #312]	; (6c00 <USB_Handler+0x328>)
    6ac8:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    6aca:	0162      	lsls	r2, r4, #5
    6acc:	4b4d      	ldr	r3, [pc, #308]	; (6c04 <USB_Handler+0x32c>)
    6ace:	189b      	adds	r3, r3, r2
    6ad0:	685b      	ldr	r3, [r3, #4]
    6ad2:	011b      	lsls	r3, r3, #4
    6ad4:	0c9b      	lsrs	r3, r3, #18
    6ad6:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    6ad8:	0123      	lsls	r3, r4, #4
    6ada:	18c3      	adds	r3, r0, r3
    6adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6ade:	2100      	movs	r1, #0
    6ae0:	4798      	blx	r3
    6ae2:	e7b1      	b.n	6a48 <USB_Handler+0x170>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    6ae4:	8bac      	ldrh	r4, [r5, #28]
    6ae6:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    6ae8:	0763      	lsls	r3, r4, #29
    6aea:	d505      	bpl.n	6af8 <USB_Handler+0x220>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    6aec:	2304      	movs	r3, #4
    6aee:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    6af0:	33a1      	adds	r3, #161	; 0xa1
    6af2:	5cfb      	ldrb	r3, [r7, r3]
    6af4:	07db      	lsls	r3, r3, #31
    6af6:	d462      	bmi.n	6bbe <USB_Handler+0x2e6>
		if (flags & USB_HOST_INTFLAG_RST) {
    6af8:	0723      	lsls	r3, r4, #28
    6afa:	d50b      	bpl.n	6b14 <USB_Handler+0x23c>
			host_pipe_job_busy_status = 0;
    6afc:	2200      	movs	r2, #0
    6afe:	4b3f      	ldr	r3, [pc, #252]	; (6bfc <USB_Handler+0x324>)
    6b00:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    6b02:	4b3b      	ldr	r3, [pc, #236]	; (6bf0 <USB_Handler+0x318>)
    6b04:	6818      	ldr	r0, [r3, #0]
    6b06:	2308      	movs	r3, #8
    6b08:	6802      	ldr	r2, [r0, #0]
    6b0a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    6b0c:	339d      	adds	r3, #157	; 0x9d
    6b0e:	5cc3      	ldrb	r3, [r0, r3]
    6b10:	079b      	lsls	r3, r3, #30
    6b12:	d458      	bmi.n	6bc6 <USB_Handler+0x2ee>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    6b14:	0663      	lsls	r3, r4, #25
    6b16:	d508      	bpl.n	6b2a <USB_Handler+0x252>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    6b18:	4b35      	ldr	r3, [pc, #212]	; (6bf0 <USB_Handler+0x318>)
    6b1a:	6818      	ldr	r0, [r3, #0]
    6b1c:	2340      	movs	r3, #64	; 0x40
    6b1e:	6802      	ldr	r2, [r0, #0]
    6b20:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    6b22:	3365      	adds	r3, #101	; 0x65
    6b24:	5cc3      	ldrb	r3, [r0, r3]
    6b26:	06db      	lsls	r3, r3, #27
    6b28:	d450      	bmi.n	6bcc <USB_Handler+0x2f4>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    6b2a:	06a3      	lsls	r3, r4, #26
    6b2c:	d508      	bpl.n	6b40 <USB_Handler+0x268>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    6b2e:	4b30      	ldr	r3, [pc, #192]	; (6bf0 <USB_Handler+0x318>)
    6b30:	6818      	ldr	r0, [r3, #0]
    6b32:	2320      	movs	r3, #32
    6b34:	6802      	ldr	r2, [r0, #0]
    6b36:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    6b38:	3385      	adds	r3, #133	; 0x85
    6b3a:	5cc3      	ldrb	r3, [r0, r3]
    6b3c:	071b      	lsls	r3, r3, #28
    6b3e:	d448      	bmi.n	6bd2 <USB_Handler+0x2fa>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    6b40:	06e3      	lsls	r3, r4, #27
    6b42:	d508      	bpl.n	6b56 <USB_Handler+0x27e>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    6b44:	4b2a      	ldr	r3, [pc, #168]	; (6bf0 <USB_Handler+0x318>)
    6b46:	6818      	ldr	r0, [r3, #0]
    6b48:	2310      	movs	r3, #16
    6b4a:	6802      	ldr	r2, [r0, #0]
    6b4c:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    6b4e:	3395      	adds	r3, #149	; 0x95
    6b50:	5cc3      	ldrb	r3, [r0, r3]
    6b52:	075b      	lsls	r3, r3, #29
    6b54:	d440      	bmi.n	6bd8 <USB_Handler+0x300>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    6b56:	0623      	lsls	r3, r4, #24
    6b58:	d50b      	bpl.n	6b72 <USB_Handler+0x29a>
			host_pipe_job_busy_status = 0;
    6b5a:	2200      	movs	r2, #0
    6b5c:	4b27      	ldr	r3, [pc, #156]	; (6bfc <USB_Handler+0x324>)
    6b5e:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    6b60:	4b23      	ldr	r3, [pc, #140]	; (6bf0 <USB_Handler+0x318>)
    6b62:	6818      	ldr	r0, [r3, #0]
    6b64:	2380      	movs	r3, #128	; 0x80
    6b66:	6802      	ldr	r2, [r0, #0]
    6b68:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    6b6a:	3325      	adds	r3, #37	; 0x25
    6b6c:	5cc3      	ldrb	r3, [r0, r3]
    6b6e:	069b      	lsls	r3, r3, #26
    6b70:	d435      	bmi.n	6bde <USB_Handler+0x306>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    6b72:	05e3      	lsls	r3, r4, #23
    6b74:	d50c      	bpl.n	6b90 <USB_Handler+0x2b8>
			host_pipe_job_busy_status = 0;
    6b76:	2200      	movs	r2, #0
    6b78:	4b20      	ldr	r3, [pc, #128]	; (6bfc <USB_Handler+0x324>)
    6b7a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    6b7c:	4b1c      	ldr	r3, [pc, #112]	; (6bf0 <USB_Handler+0x318>)
    6b7e:	6818      	ldr	r0, [r3, #0]
    6b80:	2380      	movs	r3, #128	; 0x80
    6b82:	005b      	lsls	r3, r3, #1
    6b84:	6802      	ldr	r2, [r0, #0]
    6b86:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    6b88:	3b5b      	subs	r3, #91	; 0x5b
    6b8a:	5cc3      	ldrb	r3, [r0, r3]
    6b8c:	065b      	lsls	r3, r3, #25
    6b8e:	d429      	bmi.n	6be4 <USB_Handler+0x30c>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    6b90:	05a3      	lsls	r3, r4, #22
    6b92:	d50d      	bpl.n	6bb0 <USB_Handler+0x2d8>
			host_pipe_job_busy_status = 0;
    6b94:	2200      	movs	r2, #0
    6b96:	4b19      	ldr	r3, [pc, #100]	; (6bfc <USB_Handler+0x324>)
    6b98:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    6b9a:	4b15      	ldr	r3, [pc, #84]	; (6bf0 <USB_Handler+0x318>)
    6b9c:	6818      	ldr	r0, [r3, #0]
    6b9e:	2380      	movs	r3, #128	; 0x80
    6ba0:	009b      	lsls	r3, r3, #2
    6ba2:	6802      	ldr	r2, [r0, #0]
    6ba4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    6ba6:	3b5c      	subs	r3, #92	; 0x5c
    6ba8:	3bff      	subs	r3, #255	; 0xff
    6baa:	5cc3      	ldrb	r3, [r0, r3]
    6bac:	2b7f      	cmp	r3, #127	; 0x7f
    6bae:	d81c      	bhi.n	6bea <USB_Handler+0x312>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    6bb0:	b003      	add	sp, #12
    6bb2:	bc3c      	pop	{r2, r3, r4, r5}
    6bb4:	4690      	mov	r8, r2
    6bb6:	4699      	mov	r9, r3
    6bb8:	46a2      	mov	sl, r4
    6bba:	46ab      	mov	fp, r5
    6bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    6bbe:	687b      	ldr	r3, [r7, #4]
    6bc0:	0038      	movs	r0, r7
    6bc2:	4798      	blx	r3
    6bc4:	e798      	b.n	6af8 <USB_Handler+0x220>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    6bc6:	6883      	ldr	r3, [r0, #8]
    6bc8:	4798      	blx	r3
    6bca:	e7a3      	b.n	6b14 <USB_Handler+0x23c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    6bcc:	6943      	ldr	r3, [r0, #20]
    6bce:	4798      	blx	r3
    6bd0:	e7ab      	b.n	6b2a <USB_Handler+0x252>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    6bd2:	6903      	ldr	r3, [r0, #16]
    6bd4:	4798      	blx	r3
    6bd6:	e7b3      	b.n	6b40 <USB_Handler+0x268>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    6bd8:	68c3      	ldr	r3, [r0, #12]
    6bda:	4798      	blx	r3
    6bdc:	e7bb      	b.n	6b56 <USB_Handler+0x27e>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    6bde:	6983      	ldr	r3, [r0, #24]
    6be0:	4798      	blx	r3
    6be2:	e7c6      	b.n	6b72 <USB_Handler+0x29a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    6be4:	69c3      	ldr	r3, [r0, #28]
    6be6:	4798      	blx	r3
    6be8:	e7d2      	b.n	6b90 <USB_Handler+0x2b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    6bea:	6a03      	ldr	r3, [r0, #32]
    6bec:	4798      	blx	r3
    6bee:	e7df      	b.n	6bb0 <USB_Handler+0x2d8>
    6bf0:	200002dc 	.word	0x200002dc
    6bf4:	0000aa54 	.word	0x0000aa54
    6bf8:	00008ead 	.word	0x00008ead
    6bfc:	200002ec 	.word	0x200002ec
    6c00:	200002f0 	.word	0x200002f0
    6c04:	20000ccc 	.word	0x20000ccc
    6c08:	f0003fff 	.word	0xf0003fff
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    6c0c:	0023      	movs	r3, r4
    6c0e:	332e      	adds	r3, #46	; 0x2e
    6c10:	009b      	lsls	r3, r3, #2
    6c12:	4642      	mov	r2, r8
    6c14:	6812      	ldr	r2, [r2, #0]
    6c16:	589b      	ldr	r3, [r3, r2]
    6c18:	499e      	ldr	r1, [pc, #632]	; (6e94 <USB_Handler+0x5bc>)
    6c1a:	4642      	mov	r2, r8
    6c1c:	6810      	ldr	r0, [r2, #0]
    6c1e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    6c20:	3401      	adds	r4, #1
    6c22:	2c07      	cmp	r4, #7
    6c24:	d0c4      	beq.n	6bb0 <USB_Handler+0x2d8>
			if (flags & _usb_device_irq_bits[i]) {
    6c26:	0063      	lsls	r3, r4, #1
    6c28:	5bdb      	ldrh	r3, [r3, r7]
    6c2a:	4233      	tst	r3, r6
    6c2c:	d003      	beq.n	6c36 <USB_Handler+0x35e>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    6c2e:	464a      	mov	r2, r9
    6c30:	6812      	ldr	r2, [r2, #0]
    6c32:	6812      	ldr	r2, [r2, #0]
    6c34:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    6c36:	422b      	tst	r3, r5
    6c38:	d0f2      	beq.n	6c20 <USB_Handler+0x348>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    6c3a:	2c06      	cmp	r4, #6
    6c3c:	d1e6      	bne.n	6c0c <USB_Handler+0x334>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    6c3e:	4b96      	ldr	r3, [pc, #600]	; (6e98 <USB_Handler+0x5c0>)
    6c40:	891b      	ldrh	r3, [r3, #8]
    6c42:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    6c44:	2280      	movs	r2, #128	; 0x80
    6c46:	0052      	lsls	r2, r2, #1
    6c48:	4013      	ands	r3, r2
    6c4a:	4a92      	ldr	r2, [pc, #584]	; (6e94 <USB_Handler+0x5bc>)
    6c4c:	6013      	str	r3, [r2, #0]
    6c4e:	e7dd      	b.n	6c0c <USB_Handler+0x334>
    6c50:	003c      	movs	r4, r7
    6c52:	3459      	adds	r4, #89	; 0x59
    6c54:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    6c56:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    6c58:	2201      	movs	r2, #1
    6c5a:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6c5c:	325f      	adds	r2, #95	; 0x5f
    6c5e:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6c60:	3a50      	subs	r2, #80	; 0x50
    6c62:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6c64:	3a0d      	subs	r2, #13
    6c66:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6c68:	46b8      	mov	r8, r7
    6c6a:	002f      	movs	r7, r5
    6c6c:	e0b9      	b.n	6de2 <USB_Handler+0x50a>
    6c6e:	002a      	movs	r2, r5
    6c70:	003d      	movs	r5, r7
    6c72:	4647      	mov	r7, r8
    6c74:	4690      	mov	r8, r2
    6c76:	015b      	lsls	r3, r3, #5
    6c78:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    6c7a:	2308      	movs	r3, #8
    6c7c:	33ff      	adds	r3, #255	; 0xff
    6c7e:	5ceb      	ldrb	r3, [r5, r3]
    6c80:	065b      	lsls	r3, r3, #25
    6c82:	d516      	bpl.n	6cb2 <USB_Handler+0x3da>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    6c84:	2240      	movs	r2, #64	; 0x40
    6c86:	2308      	movs	r3, #8
    6c88:	33ff      	adds	r3, #255	; 0xff
    6c8a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6c8c:	3b88      	subs	r3, #136	; 0x88
    6c8e:	3bff      	subs	r3, #255	; 0xff
    6c90:	4642      	mov	r2, r8
    6c92:	4313      	orrs	r3, r2
    6c94:	4a81      	ldr	r2, [pc, #516]	; (6e9c <USB_Handler+0x5c4>)
    6c96:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6c98:	2360      	movs	r3, #96	; 0x60
    6c9a:	420b      	tst	r3, r1
    6c9c:	d100      	bne.n	6ca0 <USB_Handler+0x3c8>
    6c9e:	e787      	b.n	6bb0 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	011b      	lsls	r3, r3, #4
    6ca4:	18fb      	adds	r3, r7, r3
    6ca6:	33e0      	adds	r3, #224	; 0xe0
    6ca8:	681b      	ldr	r3, [r3, #0]
    6caa:	497c      	ldr	r1, [pc, #496]	; (6e9c <USB_Handler+0x5c4>)
    6cac:	0038      	movs	r0, r7
    6cae:	4798      	blx	r3
    6cb0:	e77e      	b.n	6bb0 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    6cb2:	2308      	movs	r3, #8
    6cb4:	33ff      	adds	r3, #255	; 0xff
    6cb6:	5ceb      	ldrb	r3, [r5, r3]
    6cb8:	069b      	lsls	r3, r3, #26
    6cba:	d5ed      	bpl.n	6c98 <USB_Handler+0x3c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    6cbc:	2220      	movs	r2, #32
    6cbe:	2308      	movs	r3, #8
    6cc0:	33ff      	adds	r3, #255	; 0xff
    6cc2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6cc4:	4b75      	ldr	r3, [pc, #468]	; (6e9c <USB_Handler+0x5c4>)
    6cc6:	4642      	mov	r2, r8
    6cc8:	719a      	strb	r2, [r3, #6]
    6cca:	e7e5      	b.n	6c98 <USB_Handler+0x3c0>
    6ccc:	003d      	movs	r5, r7
    6cce:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    6cd0:	9a01      	ldr	r2, [sp, #4]
    6cd2:	0013      	movs	r3, r2
    6cd4:	3308      	adds	r3, #8
    6cd6:	015b      	lsls	r3, r3, #5
    6cd8:	18ed      	adds	r5, r5, r3
    6cda:	2310      	movs	r3, #16
    6cdc:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    6cde:	18bb      	adds	r3, r7, r2
    6ce0:	3361      	adds	r3, #97	; 0x61
    6ce2:	33ff      	adds	r3, #255	; 0xff
    6ce4:	781b      	ldrb	r3, [r3, #0]
    6ce6:	06db      	lsls	r3, r3, #27
    6ce8:	d400      	bmi.n	6cec <USB_Handler+0x414>
    6cea:	e761      	b.n	6bb0 <USB_Handler+0x2d8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6cec:	0010      	movs	r0, r2
    6cee:	0152      	lsls	r2, r2, #5
    6cf0:	4b69      	ldr	r3, [pc, #420]	; (6e98 <USB_Handler+0x5c0>)
    6cf2:	189b      	adds	r3, r3, r2
    6cf4:	685b      	ldr	r3, [r3, #4]
    6cf6:	049b      	lsls	r3, r3, #18
    6cf8:	0c9b      	lsrs	r3, r3, #18
    6cfa:	4968      	ldr	r1, [pc, #416]	; (6e9c <USB_Handler+0x5c4>)
    6cfc:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    6cfe:	0103      	lsls	r3, r0, #4
    6d00:	18fb      	adds	r3, r7, r3
    6d02:	33dc      	adds	r3, #220	; 0xdc
    6d04:	681b      	ldr	r3, [r3, #0]
    6d06:	4640      	mov	r0, r8
    6d08:	4798      	blx	r3
    6d0a:	e751      	b.n	6bb0 <USB_Handler+0x2d8>
    6d0c:	002a      	movs	r2, r5
    6d0e:	003d      	movs	r5, r7
    6d10:	4647      	mov	r7, r8
    6d12:	4690      	mov	r8, r2
    6d14:	015b      	lsls	r3, r3, #5
    6d16:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6d18:	2308      	movs	r3, #8
    6d1a:	33ff      	adds	r3, #255	; 0xff
    6d1c:	5ceb      	ldrb	r3, [r5, r3]
    6d1e:	079b      	lsls	r3, r3, #30
    6d20:	d51e      	bpl.n	6d60 <USB_Handler+0x488>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    6d22:	2202      	movs	r2, #2
    6d24:	2308      	movs	r3, #8
    6d26:	33ff      	adds	r3, #255	; 0xff
    6d28:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6d2a:	485c      	ldr	r0, [pc, #368]	; (6e9c <USB_Handler+0x5c4>)
    6d2c:	3b88      	subs	r3, #136	; 0x88
    6d2e:	3bff      	subs	r3, #255	; 0xff
    6d30:	4642      	mov	r2, r8
    6d32:	4313      	orrs	r3, r2
    6d34:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    6d36:	9b01      	ldr	r3, [sp, #4]
    6d38:	015a      	lsls	r2, r3, #5
    6d3a:	4b57      	ldr	r3, [pc, #348]	; (6e98 <USB_Handler+0x5c0>)
    6d3c:	189b      	adds	r3, r3, r2
    6d3e:	3310      	adds	r3, #16
    6d40:	685b      	ldr	r3, [r3, #4]
    6d42:	049b      	lsls	r3, r3, #18
    6d44:	0c9b      	lsrs	r3, r3, #18
    6d46:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6d48:	078b      	lsls	r3, r1, #30
    6d4a:	d100      	bne.n	6d4e <USB_Handler+0x476>
    6d4c:	e730      	b.n	6bb0 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	330d      	adds	r3, #13
    6d52:	011b      	lsls	r3, r3, #4
    6d54:	18fb      	adds	r3, r7, r3
    6d56:	685b      	ldr	r3, [r3, #4]
    6d58:	4950      	ldr	r1, [pc, #320]	; (6e9c <USB_Handler+0x5c4>)
    6d5a:	0038      	movs	r0, r7
    6d5c:	4798      	blx	r3
    6d5e:	e727      	b.n	6bb0 <USB_Handler+0x2d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6d60:	2308      	movs	r3, #8
    6d62:	33ff      	adds	r3, #255	; 0xff
    6d64:	5ceb      	ldrb	r3, [r5, r3]
    6d66:	07db      	lsls	r3, r3, #31
    6d68:	d5ee      	bpl.n	6d48 <USB_Handler+0x470>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    6d6a:	2201      	movs	r2, #1
    6d6c:	2308      	movs	r3, #8
    6d6e:	33ff      	adds	r3, #255	; 0xff
    6d70:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6d72:	484a      	ldr	r0, [pc, #296]	; (6e9c <USB_Handler+0x5c4>)
    6d74:	4643      	mov	r3, r8
    6d76:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    6d78:	9b01      	ldr	r3, [sp, #4]
    6d7a:	015b      	lsls	r3, r3, #5
    6d7c:	4a46      	ldr	r2, [pc, #280]	; (6e98 <USB_Handler+0x5c0>)
    6d7e:	18d2      	adds	r2, r2, r3
    6d80:	6853      	ldr	r3, [r2, #4]
    6d82:	049b      	lsls	r3, r3, #18
    6d84:	0c9b      	lsrs	r3, r3, #18
    6d86:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    6d88:	6853      	ldr	r3, [r2, #4]
    6d8a:	011b      	lsls	r3, r3, #4
    6d8c:	0c9b      	lsrs	r3, r3, #18
    6d8e:	8083      	strh	r3, [r0, #4]
    6d90:	e7da      	b.n	6d48 <USB_Handler+0x470>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    6d92:	2208      	movs	r2, #8
    6d94:	32ff      	adds	r2, #255	; 0xff
    6d96:	5c9a      	ldrb	r2, [r3, r2]
    6d98:	0752      	lsls	r2, r2, #29
    6d9a:	d56e      	bpl.n	6e7a <USB_Handler+0x5a2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    6d9c:	2004      	movs	r0, #4
    6d9e:	2208      	movs	r2, #8
    6da0:	32ff      	adds	r2, #255	; 0xff
    6da2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6da4:	9801      	ldr	r0, [sp, #4]
    6da6:	0142      	lsls	r2, r0, #5
    6da8:	4b3b      	ldr	r3, [pc, #236]	; (6e98 <USB_Handler+0x5c0>)
    6daa:	189b      	adds	r3, r3, r2
    6dac:	7a9b      	ldrb	r3, [r3, #10]
    6dae:	079b      	lsls	r3, r3, #30
    6db0:	d505      	bpl.n	6dbe <USB_Handler+0x4e6>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6db2:	4b39      	ldr	r3, [pc, #228]	; (6e98 <USB_Handler+0x5c0>)
    6db4:	189b      	adds	r3, r3, r2
    6db6:	7a9a      	ldrb	r2, [r3, #10]
    6db8:	2002      	movs	r0, #2
    6dba:	4382      	bics	r2, r0
    6dbc:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    6dbe:	4b37      	ldr	r3, [pc, #220]	; (6e9c <USB_Handler+0x5c4>)
    6dc0:	4642      	mov	r2, r8
    6dc2:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	3308      	adds	r3, #8
    6dc8:	015b      	lsls	r3, r3, #5
    6dca:	683a      	ldr	r2, [r7, #0]
    6dcc:	4694      	mov	ip, r2
    6dce:	4463      	add	r3, ip
    6dd0:	79db      	ldrb	r3, [r3, #7]
    6dd2:	07db      	lsls	r3, r3, #31
    6dd4:	d551      	bpl.n	6e7a <USB_Handler+0x5a2>
    6dd6:	e6eb      	b.n	6bb0 <USB_Handler+0x2d8>
    6dd8:	3301      	adds	r3, #1
    6dda:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    6ddc:	2b08      	cmp	r3, #8
    6dde:	d100      	bne.n	6de2 <USB_Handler+0x50a>
    6de0:	e6e6      	b.n	6bb0 <USB_Handler+0x2d8>
    6de2:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    6de4:	9301      	str	r3, [sp, #4]
    6de6:	0032      	movs	r2, r6
    6de8:	411a      	asrs	r2, r3
    6dea:	4661      	mov	r1, ip
    6dec:	4211      	tst	r1, r2
    6dee:	d0f3      	beq.n	6dd8 <USB_Handler+0x500>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    6df0:	001a      	movs	r2, r3
    6df2:	3208      	adds	r2, #8
    6df4:	0152      	lsls	r2, r2, #5
    6df6:	18ba      	adds	r2, r7, r2
    6df8:	79d2      	ldrb	r2, [r2, #7]
    6dfa:	b2d2      	uxtb	r2, r2
    6dfc:	7a21      	ldrb	r1, [r4, #8]
    6dfe:	4011      	ands	r1, r2
    6e00:	7820      	ldrb	r0, [r4, #0]
    6e02:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    6e04:	4648      	mov	r0, r9
    6e06:	4210      	tst	r0, r2
    6e08:	d000      	beq.n	6e0c <USB_Handler+0x534>
    6e0a:	e730      	b.n	6c6e <USB_Handler+0x396>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    6e0c:	4650      	mov	r0, sl
    6e0e:	4210      	tst	r0, r2
    6e10:	d000      	beq.n	6e14 <USB_Handler+0x53c>
    6e12:	e75b      	b.n	6ccc <USB_Handler+0x3f4>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    6e14:	4658      	mov	r0, fp
    6e16:	4210      	tst	r0, r2
    6e18:	d000      	beq.n	6e1c <USB_Handler+0x544>
    6e1a:	e777      	b.n	6d0c <USB_Handler+0x434>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6e1c:	200c      	movs	r0, #12
    6e1e:	4210      	tst	r0, r2
    6e20:	d0da      	beq.n	6dd8 <USB_Handler+0x500>
    6e22:	002a      	movs	r2, r5
    6e24:	003d      	movs	r5, r7
    6e26:	4647      	mov	r7, r8
    6e28:	4690      	mov	r8, r2
    6e2a:	015b      	lsls	r3, r3, #5
    6e2c:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    6e2e:	2208      	movs	r2, #8
    6e30:	32ff      	adds	r2, #255	; 0xff
    6e32:	5c9a      	ldrb	r2, [r3, r2]
    6e34:	0712      	lsls	r2, r2, #28
    6e36:	d5ac      	bpl.n	6d92 <USB_Handler+0x4ba>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    6e38:	3804      	subs	r0, #4
    6e3a:	2208      	movs	r2, #8
    6e3c:	32ff      	adds	r2, #255	; 0xff
    6e3e:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    6e40:	9801      	ldr	r0, [sp, #4]
    6e42:	0142      	lsls	r2, r0, #5
    6e44:	4b14      	ldr	r3, [pc, #80]	; (6e98 <USB_Handler+0x5c0>)
    6e46:	189b      	adds	r3, r3, r2
    6e48:	7e9b      	ldrb	r3, [r3, #26]
    6e4a:	079b      	lsls	r3, r3, #30
    6e4c:	d505      	bpl.n	6e5a <USB_Handler+0x582>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    6e4e:	4b12      	ldr	r3, [pc, #72]	; (6e98 <USB_Handler+0x5c0>)
    6e50:	189b      	adds	r3, r3, r2
    6e52:	7e9a      	ldrb	r2, [r3, #26]
    6e54:	2002      	movs	r0, #2
    6e56:	4382      	bics	r2, r0
    6e58:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    6e5a:	2380      	movs	r3, #128	; 0x80
    6e5c:	425b      	negs	r3, r3
    6e5e:	4642      	mov	r2, r8
    6e60:	4313      	orrs	r3, r2
    6e62:	4a0e      	ldr	r2, [pc, #56]	; (6e9c <USB_Handler+0x5c4>)
    6e64:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    6e66:	9b01      	ldr	r3, [sp, #4]
    6e68:	3308      	adds	r3, #8
    6e6a:	015b      	lsls	r3, r3, #5
    6e6c:	683a      	ldr	r2, [r7, #0]
    6e6e:	4694      	mov	ip, r2
    6e70:	4463      	add	r3, ip
    6e72:	79db      	ldrb	r3, [r3, #7]
    6e74:	079b      	lsls	r3, r3, #30
    6e76:	d500      	bpl.n	6e7a <USB_Handler+0x5a2>
    6e78:	e69a      	b.n	6bb0 <USB_Handler+0x2d8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    6e7a:	230c      	movs	r3, #12
    6e7c:	420b      	tst	r3, r1
    6e7e:	d100      	bne.n	6e82 <USB_Handler+0x5aa>
    6e80:	e696      	b.n	6bb0 <USB_Handler+0x2d8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    6e82:	9b01      	ldr	r3, [sp, #4]
    6e84:	011b      	lsls	r3, r3, #4
    6e86:	18fb      	adds	r3, r7, r3
    6e88:	33d8      	adds	r3, #216	; 0xd8
    6e8a:	681b      	ldr	r3, [r3, #0]
    6e8c:	4903      	ldr	r1, [pc, #12]	; (6e9c <USB_Handler+0x5c4>)
    6e8e:	0038      	movs	r0, r7
    6e90:	4798      	blx	r3
    6e92:	e68d      	b.n	6bb0 <USB_Handler+0x2d8>
    6e94:	200002e0 	.word	0x200002e0
    6e98:	20000ccc 	.word	0x20000ccc
    6e9c:	200002e4 	.word	0x200002e4

00006ea0 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    6ea0:	2200      	movs	r2, #0
    6ea2:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    6ea4:	2301      	movs	r3, #1
    6ea6:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    6ea8:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    6eaa:	70c3      	strb	r3, [r0, #3]
}
    6eac:	4770      	bx	lr
	...

00006eb0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    6eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6eb2:	46ce      	mov	lr, r9
    6eb4:	4647      	mov	r7, r8
    6eb6:	b580      	push	{r7, lr}
    6eb8:	b083      	sub	sp, #12
    6eba:	0004      	movs	r4, r0
    6ebc:	000d      	movs	r5, r1
    6ebe:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    6ec0:	2300      	movs	r3, #0
    6ec2:	4a6e      	ldr	r2, [pc, #440]	; (707c <usb_init+0x1cc>)
    6ec4:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    6ec6:	4a6e      	ldr	r2, [pc, #440]	; (7080 <usb_init+0x1d0>)
    6ec8:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6eca:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    6ecc:	496d      	ldr	r1, [pc, #436]	; (7084 <usb_init+0x1d4>)
    6ece:	69ca      	ldr	r2, [r1, #28]
    6ed0:	2020      	movs	r0, #32
    6ed2:	4302      	orrs	r2, r0
    6ed4:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6ed6:	af01      	add	r7, sp, #4
    6ed8:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6eda:	2201      	movs	r2, #1
    6edc:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    6ede:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    6ee0:	3306      	adds	r3, #6
    6ee2:	4699      	mov	r9, r3
    6ee4:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    6ee6:	0039      	movs	r1, r7
    6ee8:	3808      	subs	r0, #8
    6eea:	4b67      	ldr	r3, [pc, #412]	; (7088 <usb_init+0x1d8>)
    6eec:	4698      	mov	r8, r3
    6eee:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    6ef0:	464b      	mov	r3, r9
    6ef2:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    6ef4:	0039      	movs	r1, r7
    6ef6:	2019      	movs	r0, #25
    6ef8:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    6efa:	78b3      	ldrb	r3, [r6, #2]
    6efc:	466a      	mov	r2, sp
    6efe:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    6f00:	4669      	mov	r1, sp
    6f02:	2006      	movs	r0, #6
    6f04:	4b61      	ldr	r3, [pc, #388]	; (708c <usb_init+0x1dc>)
    6f06:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    6f08:	2006      	movs	r0, #6
    6f0a:	4b61      	ldr	r3, [pc, #388]	; (7090 <usb_init+0x1e0>)
    6f0c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    6f0e:	782b      	ldrb	r3, [r5, #0]
    6f10:	2201      	movs	r2, #1
    6f12:	4313      	orrs	r3, r2
    6f14:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    6f16:	78ab      	ldrb	r3, [r5, #2]
    6f18:	07db      	lsls	r3, r3, #31
    6f1a:	d4fc      	bmi.n	6f16 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6f1c:	4a5d      	ldr	r2, [pc, #372]	; (7094 <usb_init+0x1e4>)
    6f1e:	78d3      	ldrb	r3, [r2, #3]
    6f20:	2103      	movs	r1, #3
    6f22:	438b      	bics	r3, r1
    6f24:	2102      	movs	r1, #2
    6f26:	430b      	orrs	r3, r1
    6f28:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6f2a:	78d3      	ldrb	r3, [r2, #3]
    6f2c:	210c      	movs	r1, #12
    6f2e:	438b      	bics	r3, r1
    6f30:	2108      	movs	r1, #8
    6f32:	430b      	orrs	r3, r1
    6f34:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f36:	4b58      	ldr	r3, [pc, #352]	; (7098 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    6f38:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    6f3a:	039b      	lsls	r3, r3, #14
    6f3c:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    6f3e:	2b1f      	cmp	r3, #31
    6f40:	d100      	bne.n	6f44 <usb_init+0x94>
    6f42:	e08f      	b.n	7064 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    6f44:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6f46:	019b      	lsls	r3, r3, #6
    6f48:	4954      	ldr	r1, [pc, #336]	; (709c <usb_init+0x1ec>)
    6f4a:	400a      	ands	r2, r1
    6f4c:	4313      	orrs	r3, r2
    6f4e:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6f50:	4b51      	ldr	r3, [pc, #324]	; (7098 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    6f52:	681b      	ldr	r3, [r3, #0]
    6f54:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    6f56:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    6f58:	2b1f      	cmp	r3, #31
    6f5a:	d100      	bne.n	6f5e <usb_init+0xae>
    6f5c:	e084      	b.n	7068 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    6f5e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6f60:	211f      	movs	r1, #31
    6f62:	438a      	bics	r2, r1
    6f64:	4313      	orrs	r3, r2
    6f66:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6f68:	4b4b      	ldr	r3, [pc, #300]	; (7098 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    6f6a:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    6f6c:	019b      	lsls	r3, r3, #6
    6f6e:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    6f70:	2b07      	cmp	r3, #7
    6f72:	d100      	bne.n	6f76 <usb_init+0xc6>
    6f74:	e07a      	b.n	706c <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    6f76:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    6f78:	031b      	lsls	r3, r3, #12
    6f7a:	4949      	ldr	r1, [pc, #292]	; (70a0 <usb_init+0x1f0>)
    6f7c:	400a      	ands	r2, r1
    6f7e:	4313      	orrs	r3, r2
    6f80:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    6f82:	7832      	ldrb	r2, [r6, #0]
    6f84:	7829      	ldrb	r1, [r5, #0]
    6f86:	01d2      	lsls	r2, r2, #7
    6f88:	237f      	movs	r3, #127	; 0x7f
    6f8a:	400b      	ands	r3, r1
    6f8c:	4313      	orrs	r3, r2
    6f8e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    6f90:	7871      	ldrb	r1, [r6, #1]
    6f92:	782b      	ldrb	r3, [r5, #0]
    6f94:	2201      	movs	r2, #1
    6f96:	400a      	ands	r2, r1
    6f98:	0092      	lsls	r2, r2, #2
    6f9a:	2104      	movs	r1, #4
    6f9c:	438b      	bics	r3, r1
    6f9e:	4313      	orrs	r3, r2
    6fa0:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    6fa2:	4b40      	ldr	r3, [pc, #256]	; (70a4 <usb_init+0x1f4>)
    6fa4:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    6fa6:	78f3      	ldrb	r3, [r6, #3]
    6fa8:	2b01      	cmp	r3, #1
    6faa:	d061      	beq.n	7070 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    6fac:	2b00      	cmp	r3, #0
    6fae:	d106      	bne.n	6fbe <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    6fb0:	6822      	ldr	r2, [r4, #0]
    6fb2:	8913      	ldrh	r3, [r2, #8]
    6fb4:	210c      	movs	r1, #12
    6fb6:	438b      	bics	r3, r1
    6fb8:	2104      	movs	r1, #4
    6fba:	430b      	orrs	r3, r1
    6fbc:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    6fbe:	2280      	movs	r2, #128	; 0x80
    6fc0:	0052      	lsls	r2, r2, #1
    6fc2:	2100      	movs	r1, #0
    6fc4:	4837      	ldr	r0, [pc, #220]	; (70a4 <usb_init+0x1f4>)
    6fc6:	4b38      	ldr	r3, [pc, #224]	; (70a8 <usb_init+0x1f8>)
    6fc8:	4798      	blx	r3
    6fca:	1d23      	adds	r3, r4, #4
    6fcc:	0021      	movs	r1, r4
    6fce:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    6fd0:	2200      	movs	r2, #0
    6fd2:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    6fd4:	428b      	cmp	r3, r1
    6fd6:	d1fc      	bne.n	6fd2 <usb_init+0x122>
    6fd8:	0021      	movs	r1, r4
    6fda:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    6fdc:	2200      	movs	r2, #0
    6fde:	601a      	str	r2, [r3, #0]
    6fe0:	605a      	str	r2, [r3, #4]
    6fe2:	609a      	str	r2, [r3, #8]
    6fe4:	60da      	str	r2, [r3, #12]
    6fe6:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    6fe8:	428b      	cmp	r3, r1
    6fea:	d1f8      	bne.n	6fde <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    6fec:	2300      	movs	r3, #0
    6fee:	22a4      	movs	r2, #164	; 0xa4
    6ff0:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    6ff2:	3201      	adds	r2, #1
    6ff4:	54a3      	strb	r3, [r4, r2]
    6ff6:	0023      	movs	r3, r4
    6ff8:	33a6      	adds	r3, #166	; 0xa6
    6ffa:	0021      	movs	r1, r4
    6ffc:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    6ffe:	2200      	movs	r2, #0
    7000:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    7002:	721a      	strb	r2, [r3, #8]
    7004:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    7006:	4299      	cmp	r1, r3
    7008:	d1fa      	bne.n	7000 <usb_init+0x150>
    700a:	0023      	movs	r3, r4
    700c:	33b8      	adds	r3, #184	; 0xb8
    700e:	0021      	movs	r1, r4
    7010:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    7012:	2200      	movs	r2, #0
    7014:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    7016:	428b      	cmp	r3, r1
    7018:	d1fc      	bne.n	7014 <usb_init+0x164>
    701a:	0021      	movs	r1, r4
    701c:	3155      	adds	r1, #85	; 0x55
    701e:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    7020:	2200      	movs	r2, #0
    7022:	601a      	str	r2, [r3, #0]
    7024:	605a      	str	r2, [r3, #4]
    7026:	609a      	str	r2, [r3, #8]
    7028:	60da      	str	r2, [r3, #12]
    702a:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    702c:	428b      	cmp	r3, r1
    702e:	d1f8      	bne.n	7022 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    7030:	2300      	movs	r3, #0
    7032:	22aa      	movs	r2, #170	; 0xaa
    7034:	0052      	lsls	r2, r2, #1
    7036:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    7038:	3202      	adds	r2, #2
    703a:	52a3      	strh	r3, [r4, r2]
    703c:	0023      	movs	r3, r4
    703e:	3359      	adds	r3, #89	; 0x59
    7040:	33ff      	adds	r3, #255	; 0xff
    7042:	3461      	adds	r4, #97	; 0x61
    7044:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    7046:	2200      	movs	r2, #0
    7048:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    704a:	721a      	strb	r2, [r3, #8]
    704c:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    704e:	42a3      	cmp	r3, r4
    7050:	d1fa      	bne.n	7048 <usb_init+0x198>
    7052:	2280      	movs	r2, #128	; 0x80
    7054:	4b15      	ldr	r3, [pc, #84]	; (70ac <usb_init+0x1fc>)
    7056:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    7058:	2000      	movs	r0, #0
    705a:	b003      	add	sp, #12
    705c:	bc0c      	pop	{r2, r3}
    705e:	4690      	mov	r8, r2
    7060:	4699      	mov	r9, r3
    7062:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    7064:	3b1a      	subs	r3, #26
    7066:	e76d      	b.n	6f44 <usb_init+0x94>
		pad_transp = 29;
    7068:	3b02      	subs	r3, #2
    706a:	e778      	b.n	6f5e <usb_init+0xae>
		pad_trim = 3;
    706c:	3b04      	subs	r3, #4
    706e:	e782      	b.n	6f76 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    7070:	6822      	ldr	r2, [r4, #0]
    7072:	8913      	ldrh	r3, [r2, #8]
    7074:	3108      	adds	r1, #8
    7076:	438b      	bics	r3, r1
    7078:	8113      	strh	r3, [r2, #8]
    707a:	e7a0      	b.n	6fbe <usb_init+0x10e>
    707c:	200002ec 	.word	0x200002ec
    7080:	200002dc 	.word	0x200002dc
    7084:	40000400 	.word	0x40000400
    7088:	00008a01 	.word	0x00008a01
    708c:	00008909 	.word	0x00008909
    7090:	0000887d 	.word	0x0000887d
    7094:	41005000 	.word	0x41005000
    7098:	00806024 	.word	0x00806024
    709c:	fffff83f 	.word	0xfffff83f
    70a0:	ffff8fff 	.word	0xffff8fff
    70a4:	20000ccc 	.word	0x20000ccc
    70a8:	00009173 	.word	0x00009173
    70ac:	e000e100 	.word	0xe000e100

000070b0 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    70b0:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    70b2:	2a00      	cmp	r2, #0
    70b4:	d001      	beq.n	70ba <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    70b6:	0018      	movs	r0, r3
    70b8:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    70ba:	008b      	lsls	r3, r1, #2
    70bc:	4a06      	ldr	r2, [pc, #24]	; (70d8 <extint_register_callback+0x28>)
    70be:	589b      	ldr	r3, [r3, r2]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d003      	beq.n	70cc <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    70c4:	4283      	cmp	r3, r0
    70c6:	d005      	beq.n	70d4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    70c8:	231d      	movs	r3, #29
    70ca:	e7f4      	b.n	70b6 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    70cc:	0089      	lsls	r1, r1, #2
    70ce:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    70d0:	2300      	movs	r3, #0
    70d2:	e7f0      	b.n	70b6 <extint_register_callback+0x6>
		return STATUS_OK;
    70d4:	2300      	movs	r3, #0
    70d6:	e7ee      	b.n	70b6 <extint_register_callback+0x6>
    70d8:	20000344 	.word	0x20000344

000070dc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    70dc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    70de:	2900      	cmp	r1, #0
    70e0:	d001      	beq.n	70e6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    70e2:	0018      	movs	r0, r3
    70e4:	4770      	bx	lr
		return NULL;
    70e6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    70e8:	281f      	cmp	r0, #31
    70ea:	d800      	bhi.n	70ee <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    70ec:	4a02      	ldr	r2, [pc, #8]	; (70f8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    70ee:	2301      	movs	r3, #1
    70f0:	4083      	lsls	r3, r0
    70f2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    70f4:	2300      	movs	r3, #0
    70f6:	e7f4      	b.n	70e2 <extint_chan_enable_callback+0x6>
    70f8:	40001800 	.word	0x40001800

000070fc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    70fc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    70fe:	2900      	cmp	r1, #0
    7100:	d001      	beq.n	7106 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    7102:	0018      	movs	r0, r3
    7104:	4770      	bx	lr
		return NULL;
    7106:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    7108:	281f      	cmp	r0, #31
    710a:	d800      	bhi.n	710e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    710c:	4a02      	ldr	r2, [pc, #8]	; (7118 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    710e:	2301      	movs	r3, #1
    7110:	4083      	lsls	r3, r0
    7112:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    7114:	2300      	movs	r3, #0
    7116:	e7f4      	b.n	7102 <extint_chan_disable_callback+0x6>
    7118:	40001800 	.word	0x40001800

0000711c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    711c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    711e:	2200      	movs	r2, #0
    7120:	4b10      	ldr	r3, [pc, #64]	; (7164 <EIC_Handler+0x48>)
    7122:	701a      	strb	r2, [r3, #0]
    7124:	2300      	movs	r3, #0
    7126:	4910      	ldr	r1, [pc, #64]	; (7168 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    7128:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    712a:	4e10      	ldr	r6, [pc, #64]	; (716c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    712c:	4c0d      	ldr	r4, [pc, #52]	; (7164 <EIC_Handler+0x48>)
    712e:	e00a      	b.n	7146 <EIC_Handler+0x2a>
		return eics[eic_index];
    7130:	490d      	ldr	r1, [pc, #52]	; (7168 <EIC_Handler+0x4c>)
    7132:	e008      	b.n	7146 <EIC_Handler+0x2a>
    7134:	7823      	ldrb	r3, [r4, #0]
    7136:	3301      	adds	r3, #1
    7138:	b2db      	uxtb	r3, r3
    713a:	7023      	strb	r3, [r4, #0]
    713c:	2b0f      	cmp	r3, #15
    713e:	d810      	bhi.n	7162 <EIC_Handler+0x46>
		return NULL;
    7140:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    7142:	2b1f      	cmp	r3, #31
    7144:	d9f4      	bls.n	7130 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    7146:	0028      	movs	r0, r5
    7148:	4018      	ands	r0, r3
    714a:	2201      	movs	r2, #1
    714c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    714e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    7150:	4210      	tst	r0, r2
    7152:	d0ef      	beq.n	7134 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    7154:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    7156:	009b      	lsls	r3, r3, #2
    7158:	599b      	ldr	r3, [r3, r6]
    715a:	2b00      	cmp	r3, #0
    715c:	d0ea      	beq.n	7134 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    715e:	4798      	blx	r3
    7160:	e7e8      	b.n	7134 <EIC_Handler+0x18>
			}
		}
	}
}
    7162:	bd70      	pop	{r4, r5, r6, pc}
    7164:	20000dcc 	.word	0x20000dcc
    7168:	40001800 	.word	0x40001800
    716c:	20000344 	.word	0x20000344

00007170 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7170:	b5f0      	push	{r4, r5, r6, r7, lr}
    7172:	46de      	mov	lr, fp
    7174:	4657      	mov	r7, sl
    7176:	464e      	mov	r6, r9
    7178:	4645      	mov	r5, r8
    717a:	b5e0      	push	{r5, r6, r7, lr}
    717c:	b087      	sub	sp, #28
    717e:	4680      	mov	r8, r0
    7180:	9104      	str	r1, [sp, #16]
    7182:	0016      	movs	r6, r2
    7184:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7186:	2200      	movs	r2, #0
    7188:	2300      	movs	r3, #0
    718a:	2100      	movs	r1, #0
    718c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    718e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    7190:	2001      	movs	r0, #1
    7192:	0021      	movs	r1, r4
    7194:	9600      	str	r6, [sp, #0]
    7196:	9701      	str	r7, [sp, #4]
    7198:	465c      	mov	r4, fp
    719a:	9403      	str	r4, [sp, #12]
    719c:	4644      	mov	r4, r8
    719e:	9405      	str	r4, [sp, #20]
    71a0:	e013      	b.n	71ca <long_division+0x5a>
    71a2:	2420      	movs	r4, #32
    71a4:	1a64      	subs	r4, r4, r1
    71a6:	0005      	movs	r5, r0
    71a8:	40e5      	lsrs	r5, r4
    71aa:	46a8      	mov	r8, r5
    71ac:	e014      	b.n	71d8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    71ae:	9c00      	ldr	r4, [sp, #0]
    71b0:	9d01      	ldr	r5, [sp, #4]
    71b2:	1b12      	subs	r2, r2, r4
    71b4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    71b6:	465c      	mov	r4, fp
    71b8:	464d      	mov	r5, r9
    71ba:	432c      	orrs	r4, r5
    71bc:	46a3      	mov	fp, r4
    71be:	9c03      	ldr	r4, [sp, #12]
    71c0:	4645      	mov	r5, r8
    71c2:	432c      	orrs	r4, r5
    71c4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    71c6:	3901      	subs	r1, #1
    71c8:	d325      	bcc.n	7216 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    71ca:	2420      	movs	r4, #32
    71cc:	4264      	negs	r4, r4
    71ce:	190c      	adds	r4, r1, r4
    71d0:	d4e7      	bmi.n	71a2 <long_division+0x32>
    71d2:	0005      	movs	r5, r0
    71d4:	40a5      	lsls	r5, r4
    71d6:	46a8      	mov	r8, r5
    71d8:	0004      	movs	r4, r0
    71da:	408c      	lsls	r4, r1
    71dc:	46a1      	mov	r9, r4
		r = r << 1;
    71de:	1892      	adds	r2, r2, r2
    71e0:	415b      	adcs	r3, r3
    71e2:	0014      	movs	r4, r2
    71e4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    71e6:	9e05      	ldr	r6, [sp, #20]
    71e8:	464f      	mov	r7, r9
    71ea:	403e      	ands	r6, r7
    71ec:	46b4      	mov	ip, r6
    71ee:	9e04      	ldr	r6, [sp, #16]
    71f0:	4647      	mov	r7, r8
    71f2:	403e      	ands	r6, r7
    71f4:	46b2      	mov	sl, r6
    71f6:	4666      	mov	r6, ip
    71f8:	4657      	mov	r7, sl
    71fa:	433e      	orrs	r6, r7
    71fc:	d003      	beq.n	7206 <long_division+0x96>
			r |= 0x01;
    71fe:	0006      	movs	r6, r0
    7200:	4326      	orrs	r6, r4
    7202:	0032      	movs	r2, r6
    7204:	002b      	movs	r3, r5
		if (r >= d) {
    7206:	9c00      	ldr	r4, [sp, #0]
    7208:	9d01      	ldr	r5, [sp, #4]
    720a:	429d      	cmp	r5, r3
    720c:	d8db      	bhi.n	71c6 <long_division+0x56>
    720e:	d1ce      	bne.n	71ae <long_division+0x3e>
    7210:	4294      	cmp	r4, r2
    7212:	d8d8      	bhi.n	71c6 <long_division+0x56>
    7214:	e7cb      	b.n	71ae <long_division+0x3e>
    7216:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    7218:	4658      	mov	r0, fp
    721a:	0019      	movs	r1, r3
    721c:	b007      	add	sp, #28
    721e:	bc3c      	pop	{r2, r3, r4, r5}
    7220:	4690      	mov	r8, r2
    7222:	4699      	mov	r9, r3
    7224:	46a2      	mov	sl, r4
    7226:	46ab      	mov	fp, r5
    7228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000722a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    722a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    722c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    722e:	2340      	movs	r3, #64	; 0x40
    7230:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    7232:	4281      	cmp	r1, r0
    7234:	d202      	bcs.n	723c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    7236:	0018      	movs	r0, r3
    7238:	bd10      	pop	{r4, pc}
		baud_calculated++;
    723a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    723c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    723e:	1c63      	adds	r3, r4, #1
    7240:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    7242:	4288      	cmp	r0, r1
    7244:	d9f9      	bls.n	723a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7246:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    7248:	2cff      	cmp	r4, #255	; 0xff
    724a:	d8f4      	bhi.n	7236 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    724c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    724e:	2300      	movs	r3, #0
    7250:	e7f1      	b.n	7236 <_sercom_get_sync_baud_val+0xc>
	...

00007254 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7254:	b5f0      	push	{r4, r5, r6, r7, lr}
    7256:	b083      	sub	sp, #12
    7258:	000f      	movs	r7, r1
    725a:	0016      	movs	r6, r2
    725c:	aa08      	add	r2, sp, #32
    725e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7260:	0004      	movs	r4, r0
    7262:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7264:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    7266:	42bc      	cmp	r4, r7
    7268:	d902      	bls.n	7270 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    726a:	0010      	movs	r0, r2
    726c:	b003      	add	sp, #12
    726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7270:	2b00      	cmp	r3, #0
    7272:	d114      	bne.n	729e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7274:	0002      	movs	r2, r0
    7276:	0008      	movs	r0, r1
    7278:	2100      	movs	r1, #0
    727a:	4c19      	ldr	r4, [pc, #100]	; (72e0 <_sercom_get_async_baud_val+0x8c>)
    727c:	47a0      	blx	r4
    727e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    7280:	003a      	movs	r2, r7
    7282:	2300      	movs	r3, #0
    7284:	2000      	movs	r0, #0
    7286:	4c17      	ldr	r4, [pc, #92]	; (72e4 <_sercom_get_async_baud_val+0x90>)
    7288:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    728a:	2200      	movs	r2, #0
    728c:	2301      	movs	r3, #1
    728e:	1a12      	subs	r2, r2, r0
    7290:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    7292:	0c12      	lsrs	r2, r2, #16
    7294:	041b      	lsls	r3, r3, #16
    7296:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    7298:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    729a:	2200      	movs	r2, #0
    729c:	e7e5      	b.n	726a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    729e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    72a0:	2b01      	cmp	r3, #1
    72a2:	d1f9      	bne.n	7298 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    72a4:	000a      	movs	r2, r1
    72a6:	2300      	movs	r3, #0
    72a8:	2100      	movs	r1, #0
    72aa:	4c0d      	ldr	r4, [pc, #52]	; (72e0 <_sercom_get_async_baud_val+0x8c>)
    72ac:	47a0      	blx	r4
    72ae:	0002      	movs	r2, r0
    72b0:	000b      	movs	r3, r1
    72b2:	9200      	str	r2, [sp, #0]
    72b4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    72b6:	0038      	movs	r0, r7
    72b8:	2100      	movs	r1, #0
    72ba:	4c0a      	ldr	r4, [pc, #40]	; (72e4 <_sercom_get_async_baud_val+0x90>)
    72bc:	47a0      	blx	r4
    72be:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    72c0:	2380      	movs	r3, #128	; 0x80
    72c2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    72c4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    72c6:	4298      	cmp	r0, r3
    72c8:	d8cf      	bhi.n	726a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    72ca:	0f79      	lsrs	r1, r7, #29
    72cc:	00f8      	lsls	r0, r7, #3
    72ce:	9a00      	ldr	r2, [sp, #0]
    72d0:	9b01      	ldr	r3, [sp, #4]
    72d2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    72d4:	00ea      	lsls	r2, r5, #3
    72d6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    72d8:	b2d2      	uxtb	r2, r2
    72da:	0352      	lsls	r2, r2, #13
    72dc:	432a      	orrs	r2, r5
    72de:	e7db      	b.n	7298 <_sercom_get_async_baud_val+0x44>
    72e0:	00008f2d 	.word	0x00008f2d
    72e4:	00007171 	.word	0x00007171

000072e8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    72e8:	b510      	push	{r4, lr}
    72ea:	b082      	sub	sp, #8
    72ec:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    72ee:	4b0e      	ldr	r3, [pc, #56]	; (7328 <sercom_set_gclk_generator+0x40>)
    72f0:	781b      	ldrb	r3, [r3, #0]
    72f2:	2b00      	cmp	r3, #0
    72f4:	d007      	beq.n	7306 <sercom_set_gclk_generator+0x1e>
    72f6:	2900      	cmp	r1, #0
    72f8:	d105      	bne.n	7306 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    72fa:	4b0b      	ldr	r3, [pc, #44]	; (7328 <sercom_set_gclk_generator+0x40>)
    72fc:	785b      	ldrb	r3, [r3, #1]
    72fe:	4283      	cmp	r3, r0
    7300:	d010      	beq.n	7324 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7302:	201d      	movs	r0, #29
    7304:	e00c      	b.n	7320 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    7306:	a901      	add	r1, sp, #4
    7308:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    730a:	2013      	movs	r0, #19
    730c:	4b07      	ldr	r3, [pc, #28]	; (732c <sercom_set_gclk_generator+0x44>)
    730e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7310:	2013      	movs	r0, #19
    7312:	4b07      	ldr	r3, [pc, #28]	; (7330 <sercom_set_gclk_generator+0x48>)
    7314:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    7316:	4b04      	ldr	r3, [pc, #16]	; (7328 <sercom_set_gclk_generator+0x40>)
    7318:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    731a:	2201      	movs	r2, #1
    731c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    731e:	2000      	movs	r0, #0
}
    7320:	b002      	add	sp, #8
    7322:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7324:	2000      	movs	r0, #0
    7326:	e7fb      	b.n	7320 <sercom_set_gclk_generator+0x38>
    7328:	200002f8 	.word	0x200002f8
    732c:	00008909 	.word	0x00008909
    7330:	0000887d 	.word	0x0000887d

00007334 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7334:	4b40      	ldr	r3, [pc, #256]	; (7438 <_sercom_get_default_pad+0x104>)
    7336:	4298      	cmp	r0, r3
    7338:	d031      	beq.n	739e <_sercom_get_default_pad+0x6a>
    733a:	d90a      	bls.n	7352 <_sercom_get_default_pad+0x1e>
    733c:	4b3f      	ldr	r3, [pc, #252]	; (743c <_sercom_get_default_pad+0x108>)
    733e:	4298      	cmp	r0, r3
    7340:	d04d      	beq.n	73de <_sercom_get_default_pad+0xaa>
    7342:	4b3f      	ldr	r3, [pc, #252]	; (7440 <_sercom_get_default_pad+0x10c>)
    7344:	4298      	cmp	r0, r3
    7346:	d05a      	beq.n	73fe <_sercom_get_default_pad+0xca>
    7348:	4b3e      	ldr	r3, [pc, #248]	; (7444 <_sercom_get_default_pad+0x110>)
    734a:	4298      	cmp	r0, r3
    734c:	d037      	beq.n	73be <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    734e:	2000      	movs	r0, #0
}
    7350:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    7352:	4b3d      	ldr	r3, [pc, #244]	; (7448 <_sercom_get_default_pad+0x114>)
    7354:	4298      	cmp	r0, r3
    7356:	d00c      	beq.n	7372 <_sercom_get_default_pad+0x3e>
    7358:	4b3c      	ldr	r3, [pc, #240]	; (744c <_sercom_get_default_pad+0x118>)
    735a:	4298      	cmp	r0, r3
    735c:	d1f7      	bne.n	734e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    735e:	2901      	cmp	r1, #1
    7360:	d017      	beq.n	7392 <_sercom_get_default_pad+0x5e>
    7362:	2900      	cmp	r1, #0
    7364:	d05d      	beq.n	7422 <_sercom_get_default_pad+0xee>
    7366:	2902      	cmp	r1, #2
    7368:	d015      	beq.n	7396 <_sercom_get_default_pad+0x62>
    736a:	2903      	cmp	r1, #3
    736c:	d015      	beq.n	739a <_sercom_get_default_pad+0x66>
	return 0;
    736e:	2000      	movs	r0, #0
    7370:	e7ee      	b.n	7350 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7372:	2901      	cmp	r1, #1
    7374:	d007      	beq.n	7386 <_sercom_get_default_pad+0x52>
    7376:	2900      	cmp	r1, #0
    7378:	d051      	beq.n	741e <_sercom_get_default_pad+0xea>
    737a:	2902      	cmp	r1, #2
    737c:	d005      	beq.n	738a <_sercom_get_default_pad+0x56>
    737e:	2903      	cmp	r1, #3
    7380:	d005      	beq.n	738e <_sercom_get_default_pad+0x5a>
	return 0;
    7382:	2000      	movs	r0, #0
    7384:	e7e4      	b.n	7350 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7386:	4832      	ldr	r0, [pc, #200]	; (7450 <_sercom_get_default_pad+0x11c>)
    7388:	e7e2      	b.n	7350 <_sercom_get_default_pad+0x1c>
    738a:	4832      	ldr	r0, [pc, #200]	; (7454 <_sercom_get_default_pad+0x120>)
    738c:	e7e0      	b.n	7350 <_sercom_get_default_pad+0x1c>
    738e:	4832      	ldr	r0, [pc, #200]	; (7458 <_sercom_get_default_pad+0x124>)
    7390:	e7de      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7392:	4832      	ldr	r0, [pc, #200]	; (745c <_sercom_get_default_pad+0x128>)
    7394:	e7dc      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7396:	4832      	ldr	r0, [pc, #200]	; (7460 <_sercom_get_default_pad+0x12c>)
    7398:	e7da      	b.n	7350 <_sercom_get_default_pad+0x1c>
    739a:	4832      	ldr	r0, [pc, #200]	; (7464 <_sercom_get_default_pad+0x130>)
    739c:	e7d8      	b.n	7350 <_sercom_get_default_pad+0x1c>
    739e:	2901      	cmp	r1, #1
    73a0:	d007      	beq.n	73b2 <_sercom_get_default_pad+0x7e>
    73a2:	2900      	cmp	r1, #0
    73a4:	d03f      	beq.n	7426 <_sercom_get_default_pad+0xf2>
    73a6:	2902      	cmp	r1, #2
    73a8:	d005      	beq.n	73b6 <_sercom_get_default_pad+0x82>
    73aa:	2903      	cmp	r1, #3
    73ac:	d005      	beq.n	73ba <_sercom_get_default_pad+0x86>
	return 0;
    73ae:	2000      	movs	r0, #0
    73b0:	e7ce      	b.n	7350 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73b2:	482d      	ldr	r0, [pc, #180]	; (7468 <_sercom_get_default_pad+0x134>)
    73b4:	e7cc      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73b6:	482d      	ldr	r0, [pc, #180]	; (746c <_sercom_get_default_pad+0x138>)
    73b8:	e7ca      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73ba:	482d      	ldr	r0, [pc, #180]	; (7470 <_sercom_get_default_pad+0x13c>)
    73bc:	e7c8      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73be:	2901      	cmp	r1, #1
    73c0:	d007      	beq.n	73d2 <_sercom_get_default_pad+0x9e>
    73c2:	2900      	cmp	r1, #0
    73c4:	d031      	beq.n	742a <_sercom_get_default_pad+0xf6>
    73c6:	2902      	cmp	r1, #2
    73c8:	d005      	beq.n	73d6 <_sercom_get_default_pad+0xa2>
    73ca:	2903      	cmp	r1, #3
    73cc:	d005      	beq.n	73da <_sercom_get_default_pad+0xa6>
	return 0;
    73ce:	2000      	movs	r0, #0
    73d0:	e7be      	b.n	7350 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73d2:	4828      	ldr	r0, [pc, #160]	; (7474 <_sercom_get_default_pad+0x140>)
    73d4:	e7bc      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73d6:	4828      	ldr	r0, [pc, #160]	; (7478 <_sercom_get_default_pad+0x144>)
    73d8:	e7ba      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73da:	4828      	ldr	r0, [pc, #160]	; (747c <_sercom_get_default_pad+0x148>)
    73dc:	e7b8      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73de:	2901      	cmp	r1, #1
    73e0:	d007      	beq.n	73f2 <_sercom_get_default_pad+0xbe>
    73e2:	2900      	cmp	r1, #0
    73e4:	d023      	beq.n	742e <_sercom_get_default_pad+0xfa>
    73e6:	2902      	cmp	r1, #2
    73e8:	d005      	beq.n	73f6 <_sercom_get_default_pad+0xc2>
    73ea:	2903      	cmp	r1, #3
    73ec:	d005      	beq.n	73fa <_sercom_get_default_pad+0xc6>
	return 0;
    73ee:	2000      	movs	r0, #0
    73f0:	e7ae      	b.n	7350 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73f2:	4823      	ldr	r0, [pc, #140]	; (7480 <_sercom_get_default_pad+0x14c>)
    73f4:	e7ac      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73f6:	4823      	ldr	r0, [pc, #140]	; (7484 <_sercom_get_default_pad+0x150>)
    73f8:	e7aa      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73fa:	4823      	ldr	r0, [pc, #140]	; (7488 <_sercom_get_default_pad+0x154>)
    73fc:	e7a8      	b.n	7350 <_sercom_get_default_pad+0x1c>
    73fe:	2901      	cmp	r1, #1
    7400:	d007      	beq.n	7412 <_sercom_get_default_pad+0xde>
    7402:	2900      	cmp	r1, #0
    7404:	d015      	beq.n	7432 <_sercom_get_default_pad+0xfe>
    7406:	2902      	cmp	r1, #2
    7408:	d005      	beq.n	7416 <_sercom_get_default_pad+0xe2>
    740a:	2903      	cmp	r1, #3
    740c:	d005      	beq.n	741a <_sercom_get_default_pad+0xe6>
	return 0;
    740e:	2000      	movs	r0, #0
    7410:	e79e      	b.n	7350 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7412:	481e      	ldr	r0, [pc, #120]	; (748c <_sercom_get_default_pad+0x158>)
    7414:	e79c      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7416:	481e      	ldr	r0, [pc, #120]	; (7490 <_sercom_get_default_pad+0x15c>)
    7418:	e79a      	b.n	7350 <_sercom_get_default_pad+0x1c>
    741a:	481e      	ldr	r0, [pc, #120]	; (7494 <_sercom_get_default_pad+0x160>)
    741c:	e798      	b.n	7350 <_sercom_get_default_pad+0x1c>
    741e:	481e      	ldr	r0, [pc, #120]	; (7498 <_sercom_get_default_pad+0x164>)
    7420:	e796      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7422:	2003      	movs	r0, #3
    7424:	e794      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7426:	481d      	ldr	r0, [pc, #116]	; (749c <_sercom_get_default_pad+0x168>)
    7428:	e792      	b.n	7350 <_sercom_get_default_pad+0x1c>
    742a:	481d      	ldr	r0, [pc, #116]	; (74a0 <_sercom_get_default_pad+0x16c>)
    742c:	e790      	b.n	7350 <_sercom_get_default_pad+0x1c>
    742e:	481d      	ldr	r0, [pc, #116]	; (74a4 <_sercom_get_default_pad+0x170>)
    7430:	e78e      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7432:	481d      	ldr	r0, [pc, #116]	; (74a8 <_sercom_get_default_pad+0x174>)
    7434:	e78c      	b.n	7350 <_sercom_get_default_pad+0x1c>
    7436:	46c0      	nop			; (mov r8, r8)
    7438:	42001000 	.word	0x42001000
    743c:	42001800 	.word	0x42001800
    7440:	42001c00 	.word	0x42001c00
    7444:	42001400 	.word	0x42001400
    7448:	42000800 	.word	0x42000800
    744c:	42000c00 	.word	0x42000c00
    7450:	00050003 	.word	0x00050003
    7454:	00060003 	.word	0x00060003
    7458:	00070003 	.word	0x00070003
    745c:	00010003 	.word	0x00010003
    7460:	001e0003 	.word	0x001e0003
    7464:	001f0003 	.word	0x001f0003
    7468:	00090003 	.word	0x00090003
    746c:	000a0003 	.word	0x000a0003
    7470:	000b0003 	.word	0x000b0003
    7474:	00110003 	.word	0x00110003
    7478:	00120003 	.word	0x00120003
    747c:	00130003 	.word	0x00130003
    7480:	000d0003 	.word	0x000d0003
    7484:	000e0003 	.word	0x000e0003
    7488:	000f0003 	.word	0x000f0003
    748c:	00170003 	.word	0x00170003
    7490:	00180003 	.word	0x00180003
    7494:	00190003 	.word	0x00190003
    7498:	00040003 	.word	0x00040003
    749c:	00080003 	.word	0x00080003
    74a0:	00100003 	.word	0x00100003
    74a4:	000c0003 	.word	0x000c0003
    74a8:	00160003 	.word	0x00160003

000074ac <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    74ac:	b530      	push	{r4, r5, lr}
    74ae:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    74b0:	4b0b      	ldr	r3, [pc, #44]	; (74e0 <_sercom_get_sercom_inst_index+0x34>)
    74b2:	466a      	mov	r2, sp
    74b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    74b6:	c232      	stmia	r2!, {r1, r4, r5}
    74b8:	cb32      	ldmia	r3!, {r1, r4, r5}
    74ba:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    74bc:	9b00      	ldr	r3, [sp, #0]
    74be:	4283      	cmp	r3, r0
    74c0:	d00b      	beq.n	74da <_sercom_get_sercom_inst_index+0x2e>
    74c2:	2301      	movs	r3, #1
    74c4:	009a      	lsls	r2, r3, #2
    74c6:	4669      	mov	r1, sp
    74c8:	5852      	ldr	r2, [r2, r1]
    74ca:	4282      	cmp	r2, r0
    74cc:	d006      	beq.n	74dc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    74ce:	3301      	adds	r3, #1
    74d0:	2b06      	cmp	r3, #6
    74d2:	d1f7      	bne.n	74c4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    74d4:	2000      	movs	r0, #0
}
    74d6:	b007      	add	sp, #28
    74d8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    74da:	2300      	movs	r3, #0
			return i;
    74dc:	b2d8      	uxtb	r0, r3
    74de:	e7fa      	b.n	74d6 <_sercom_get_sercom_inst_index+0x2a>
    74e0:	0000aa68 	.word	0x0000aa68

000074e4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    74e4:	b570      	push	{r4, r5, r6, lr}
    74e6:	b082      	sub	sp, #8
    74e8:	0006      	movs	r6, r0
    74ea:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    74ec:	2200      	movs	r2, #0
    74ee:	466b      	mov	r3, sp
    74f0:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    74f2:	6804      	ldr	r4, [r0, #0]
	return (spi_module->SYNCBUSY.reg);
    74f4:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    74f6:	2b00      	cmp	r3, #0
    74f8:	d1fc      	bne.n	74f4 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    74fa:	338f      	adds	r3, #143	; 0x8f
    74fc:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    74fe:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    7500:	6823      	ldr	r3, [r4, #0]
    7502:	2202      	movs	r2, #2
    7504:	4393      	bics	r3, r2
    7506:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7508:	6830      	ldr	r0, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    750a:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    750c:	2b00      	cmp	r3, #0
    750e:	d1fc      	bne.n	750a <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7510:	4b12      	ldr	r3, [pc, #72]	; (755c <spi_set_baudrate+0x78>)
    7512:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7514:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7516:	b2c0      	uxtb	r0, r0
    7518:	4b11      	ldr	r3, [pc, #68]	; (7560 <spi_set_baudrate+0x7c>)
    751a:	4798      	blx	r3
    751c:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    751e:	466b      	mov	r3, sp
    7520:	1d9a      	adds	r2, r3, #6
    7522:	0028      	movs	r0, r5
    7524:	4b0f      	ldr	r3, [pc, #60]	; (7564 <spi_set_baudrate+0x80>)
    7526:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    7528:	2800      	cmp	r0, #0
    752a:	d002      	beq.n	7532 <spi_set_baudrate+0x4e>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    752c:	2017      	movs	r0, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    752e:	b002      	add	sp, #8
    7530:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    7532:	466b      	mov	r3, sp
    7534:	3306      	adds	r3, #6
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	7323      	strb	r3, [r4, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    753a:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    753c:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    753e:	2a00      	cmp	r2, #0
    7540:	d1fc      	bne.n	753c <spi_set_baudrate+0x58>
    7542:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    7544:	2a00      	cmp	r2, #0
    7546:	d1fc      	bne.n	7542 <spi_set_baudrate+0x5e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7548:	681a      	ldr	r2, [r3, #0]
    754a:	2102      	movs	r1, #2
    754c:	430a      	orrs	r2, r1
    754e:	601a      	str	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7550:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    7552:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7554:	2b00      	cmp	r3, #0
    7556:	d1fc      	bne.n	7552 <spi_set_baudrate+0x6e>
    7558:	e7e9      	b.n	752e <spi_set_baudrate+0x4a>
    755a:	46c0      	nop			; (mov r8, r8)
    755c:	000074ad 	.word	0x000074ad
    7560:	00008925 	.word	0x00008925
    7564:	0000722b 	.word	0x0000722b

00007568 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7568:	b5f0      	push	{r4, r5, r6, r7, lr}
    756a:	46d6      	mov	lr, sl
    756c:	464f      	mov	r7, r9
    756e:	b580      	push	{r7, lr}
    7570:	b08b      	sub	sp, #44	; 0x2c
    7572:	4681      	mov	r9, r0
    7574:	000f      	movs	r7, r1
    7576:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7578:	0003      	movs	r3, r0
    757a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    757c:	680b      	ldr	r3, [r1, #0]
    757e:	079b      	lsls	r3, r3, #30
    7580:	d409      	bmi.n	7596 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7582:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    7584:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7586:	07db      	lsls	r3, r3, #31
    7588:	d400      	bmi.n	758c <spi_init+0x24>
    758a:	e0b1      	b.n	76f0 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    758c:	b00b      	add	sp, #44	; 0x2c
    758e:	bc0c      	pop	{r2, r3}
    7590:	4691      	mov	r9, r2
    7592:	469a      	mov	sl, r3
    7594:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    7596:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7598:	9305      	str	r3, [sp, #20]
    759a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    759c:	9306      	str	r3, [sp, #24]
    759e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    75a0:	9307      	str	r3, [sp, #28]
    75a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    75a4:	9308      	str	r3, [sp, #32]
    75a6:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    75a8:	ab05      	add	r3, sp, #20
    75aa:	9301      	str	r3, [sp, #4]
    75ac:	e00a      	b.n	75c4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    75ae:	0038      	movs	r0, r7
    75b0:	4baf      	ldr	r3, [pc, #700]	; (7870 <spi_init+0x308>)
    75b2:	4798      	blx	r3
    75b4:	e00c      	b.n	75d0 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    75b6:	230f      	movs	r3, #15
    75b8:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    75ba:	4281      	cmp	r1, r0
    75bc:	d12d      	bne.n	761a <spi_init+0xb2>
    75be:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    75c0:	2e04      	cmp	r6, #4
    75c2:	d02f      	beq.n	7624 <spi_init+0xbc>
    75c4:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    75c6:	00b3      	lsls	r3, r6, #2
    75c8:	9a01      	ldr	r2, [sp, #4]
    75ca:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
    75cc:	2800      	cmp	r0, #0
    75ce:	d0ee      	beq.n	75ae <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
    75d0:	1c43      	adds	r3, r0, #1
    75d2:	d0f4      	beq.n	75be <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
    75d4:	0401      	lsls	r1, r0, #16
    75d6:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    75d8:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    75da:	b2c3      	uxtb	r3, r0
    75dc:	469c      	mov	ip, r3
		return NULL;
    75de:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    75e0:	0602      	lsls	r2, r0, #24
    75e2:	d405      	bmi.n	75f0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
    75e4:	4663      	mov	r3, ip
    75e6:	095b      	lsrs	r3, r3, #5
    75e8:	01db      	lsls	r3, r3, #7
    75ea:	4aa2      	ldr	r2, [pc, #648]	; (7874 <spi_init+0x30c>)
    75ec:	4692      	mov	sl, r2
    75ee:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
    75f0:	221f      	movs	r2, #31
    75f2:	4660      	mov	r0, ip
    75f4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    75f6:	1898      	adds	r0, r3, r2
    75f8:	3040      	adds	r0, #64	; 0x40
    75fa:	7800      	ldrb	r0, [r0, #0]
    75fc:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    75fe:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7600:	4655      	mov	r5, sl
    7602:	07ed      	lsls	r5, r5, #31
    7604:	d5d9      	bpl.n	75ba <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7606:	0852      	lsrs	r2, r2, #1
    7608:	189b      	adds	r3, r3, r2
    760a:	3330      	adds	r3, #48	; 0x30
    760c:	7818      	ldrb	r0, [r3, #0]
    760e:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    7610:	4663      	mov	r3, ip
    7612:	07db      	lsls	r3, r3, #31
    7614:	d5cf      	bpl.n	75b6 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7616:	0900      	lsrs	r0, r0, #4
    7618:	e7cf      	b.n	75ba <spi_init+0x52>
			module->hw = NULL;
    761a:	2300      	movs	r3, #0
    761c:	464a      	mov	r2, r9
    761e:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    7620:	201c      	movs	r0, #28
    7622:	e7b3      	b.n	758c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    7624:	2013      	movs	r0, #19
    7626:	4b94      	ldr	r3, [pc, #592]	; (7878 <spi_init+0x310>)
    7628:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    762a:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    762c:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    762e:	2a01      	cmp	r2, #1
    7630:	d016      	beq.n	7660 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
    7632:	7821      	ldrb	r1, [r4, #0]
    7634:	2900      	cmp	r1, #0
    7636:	d127      	bne.n	7688 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
    7638:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    763a:	7fe2      	ldrb	r2, [r4, #31]
    763c:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    763e:	7fa0      	ldrb	r0, [r4, #30]
    7640:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
    7642:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
    7644:	429a      	cmp	r2, r3
    7646:	d1a1      	bne.n	758c <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
    7648:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
    764a:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
    764c:	3004      	adds	r0, #4
    764e:	5c20      	ldrb	r0, [r4, r0]
    7650:	2800      	cmp	r0, #0
    7652:	d001      	beq.n	7658 <spi_init+0xf0>
    7654:	2040      	movs	r0, #64	; 0x40
    7656:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    7658:	2008      	movs	r0, #8
    765a:	4303      	orrs	r3, r0
    765c:	431d      	orrs	r5, r3
    765e:	e014      	b.n	768a <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
    7660:	aa04      	add	r2, sp, #16
    7662:	0001      	movs	r1, r0
    7664:	69a0      	ldr	r0, [r4, #24]
    7666:	4b85      	ldr	r3, [pc, #532]	; (787c <spi_init+0x314>)
    7668:	4798      	blx	r3
    766a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    766c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    766e:	2b00      	cmp	r3, #0
    7670:	d000      	beq.n	7674 <spi_init+0x10c>
    7672:	e78b      	b.n	758c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    7674:	7b3b      	ldrb	r3, [r7, #12]
    7676:	b2db      	uxtb	r3, r3
    7678:	aa04      	add	r2, sp, #16
    767a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    767c:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    767e:	429a      	cmp	r2, r3
    7680:	d000      	beq.n	7684 <spi_init+0x11c>
    7682:	e783      	b.n	758c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    7684:	350c      	adds	r5, #12
    7686:	e7d4      	b.n	7632 <spi_init+0xca>
	uint32_t ctrlb = 0;
    7688:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
    768a:	6863      	ldr	r3, [r4, #4]
    768c:	68a0      	ldr	r0, [r4, #8]
    768e:	4303      	orrs	r3, r0
    7690:	68e0      	ldr	r0, [r4, #12]
    7692:	4303      	orrs	r3, r0
    7694:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    7696:	7c20      	ldrb	r0, [r4, #16]
    7698:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
    769a:	7c60      	ldrb	r0, [r4, #17]
    769c:	2800      	cmp	r0, #0
    769e:	d001      	beq.n	76a4 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    76a0:	2080      	movs	r0, #128	; 0x80
    76a2:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
    76a4:	7ca0      	ldrb	r0, [r4, #18]
    76a6:	2800      	cmp	r0, #0
    76a8:	d002      	beq.n	76b0 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    76aa:	2080      	movs	r0, #128	; 0x80
    76ac:	0280      	lsls	r0, r0, #10
    76ae:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
    76b0:	7ce0      	ldrb	r0, [r4, #19]
    76b2:	2800      	cmp	r0, #0
    76b4:	d002      	beq.n	76bc <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    76b6:	2080      	movs	r0, #128	; 0x80
    76b8:	0080      	lsls	r0, r0, #2
    76ba:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
    76bc:	7d20      	ldrb	r0, [r4, #20]
    76be:	2800      	cmp	r0, #0
    76c0:	d002      	beq.n	76c8 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    76c2:	2080      	movs	r0, #128	; 0x80
    76c4:	0180      	lsls	r0, r0, #6
    76c6:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
    76c8:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    76ca:	2502      	movs	r5, #2
    76cc:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
    76ce:	4283      	cmp	r3, r0
    76d0:	d004      	beq.n	76dc <spi_init+0x174>
	module->hw = NULL;
    76d2:	2300      	movs	r3, #0
    76d4:	464a      	mov	r2, r9
    76d6:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
    76d8:	201c      	movs	r0, #28
    76da:	e757      	b.n	758c <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
    76dc:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    76de:	4293      	cmp	r3, r2
    76e0:	d1f7      	bne.n	76d2 <spi_init+0x16a>
		module->mode           = config->mode;
    76e2:	464b      	mov	r3, r9
    76e4:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
    76e6:	7c23      	ldrb	r3, [r4, #16]
    76e8:	464a      	mov	r2, r9
    76ea:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    76ec:	2000      	movs	r0, #0
    76ee:	e74d      	b.n	758c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    76f0:	0008      	movs	r0, r1
    76f2:	4b63      	ldr	r3, [pc, #396]	; (7880 <spi_init+0x318>)
    76f4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    76f6:	4a63      	ldr	r2, [pc, #396]	; (7884 <spi_init+0x31c>)
    76f8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    76fa:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    76fc:	2301      	movs	r3, #1
    76fe:	40ab      	lsls	r3, r5
    7700:	430b      	orrs	r3, r1
    7702:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    7704:	a909      	add	r1, sp, #36	; 0x24
    7706:	2624      	movs	r6, #36	; 0x24
    7708:	5da3      	ldrb	r3, [r4, r6]
    770a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    770c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    770e:	b2c5      	uxtb	r5, r0
    7710:	0028      	movs	r0, r5
    7712:	4b5d      	ldr	r3, [pc, #372]	; (7888 <spi_init+0x320>)
    7714:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7716:	0028      	movs	r0, r5
    7718:	4b5c      	ldr	r3, [pc, #368]	; (788c <spi_init+0x324>)
    771a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    771c:	5da0      	ldrb	r0, [r4, r6]
    771e:	2100      	movs	r1, #0
    7720:	4b5b      	ldr	r3, [pc, #364]	; (7890 <spi_init+0x328>)
    7722:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7724:	7823      	ldrb	r3, [r4, #0]
    7726:	2b01      	cmp	r3, #1
    7728:	d020      	beq.n	776c <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
    772a:	7823      	ldrb	r3, [r4, #0]
    772c:	2b00      	cmp	r3, #0
    772e:	d103      	bne.n	7738 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    7730:	683b      	ldr	r3, [r7, #0]
    7732:	2208      	movs	r2, #8
    7734:	4313      	orrs	r3, r2
    7736:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7738:	464b      	mov	r3, r9
    773a:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    773c:	ab04      	add	r3, sp, #16
    773e:	2280      	movs	r2, #128	; 0x80
    7740:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7742:	2200      	movs	r2, #0
    7744:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7746:	2101      	movs	r1, #1
    7748:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    774a:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    774c:	7823      	ldrb	r3, [r4, #0]
    774e:	2b00      	cmp	r3, #0
    7750:	d101      	bne.n	7756 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7752:	ab04      	add	r3, sp, #16
    7754:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7758:	9305      	str	r3, [sp, #20]
    775a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    775c:	9306      	str	r3, [sp, #24]
    775e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7760:	9307      	str	r3, [sp, #28]
    7762:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7764:	9308      	str	r3, [sp, #32]
    7766:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7768:	ad05      	add	r5, sp, #20
    776a:	e011      	b.n	7790 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    776c:	683b      	ldr	r3, [r7, #0]
    776e:	220c      	movs	r2, #12
    7770:	4313      	orrs	r3, r2
    7772:	603b      	str	r3, [r7, #0]
    7774:	e7d9      	b.n	772a <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7776:	0030      	movs	r0, r6
    7778:	4b3d      	ldr	r3, [pc, #244]	; (7870 <spi_init+0x308>)
    777a:	4798      	blx	r3
    777c:	e00d      	b.n	779a <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    777e:	a904      	add	r1, sp, #16
    7780:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7782:	0c00      	lsrs	r0, r0, #16
    7784:	b2c0      	uxtb	r0, r0
    7786:	4b43      	ldr	r3, [pc, #268]	; (7894 <spi_init+0x32c>)
    7788:	4798      	blx	r3
    778a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    778c:	2f04      	cmp	r7, #4
    778e:	d007      	beq.n	77a0 <spi_init+0x238>
    7790:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7792:	00bb      	lsls	r3, r7, #2
    7794:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    7796:	2800      	cmp	r0, #0
    7798:	d0ed      	beq.n	7776 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
    779a:	1c43      	adds	r3, r0, #1
    779c:	d1ef      	bne.n	777e <spi_init+0x216>
    779e:	e7f4      	b.n	778a <spi_init+0x222>
	module->mode             = config->mode;
    77a0:	7823      	ldrb	r3, [r4, #0]
    77a2:	464a      	mov	r2, r9
    77a4:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    77a6:	7c23      	ldrb	r3, [r4, #16]
    77a8:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    77aa:	7ca3      	ldrb	r3, [r4, #18]
    77ac:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    77ae:	7d23      	ldrb	r3, [r4, #20]
    77b0:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
    77b2:	2200      	movs	r2, #0
    77b4:	ab02      	add	r3, sp, #8
    77b6:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    77b8:	7823      	ldrb	r3, [r4, #0]
    77ba:	2b01      	cmp	r3, #1
    77bc:	d012      	beq.n	77e4 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
    77be:	7823      	ldrb	r3, [r4, #0]
    77c0:	2b00      	cmp	r3, #0
    77c2:	d127      	bne.n	7814 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
    77c4:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    77c6:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
    77c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    77ca:	7fe1      	ldrb	r1, [r4, #31]
    77cc:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    77ce:	7fa5      	ldrb	r5, [r4, #30]
    77d0:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
    77d2:	4319      	orrs	r1, r3
    77d4:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    77d6:	2320      	movs	r3, #32
    77d8:	5ce3      	ldrb	r3, [r4, r3]
    77da:	2b00      	cmp	r3, #0
    77dc:	d01c      	beq.n	7818 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    77de:	2340      	movs	r3, #64	; 0x40
    77e0:	431a      	orrs	r2, r3
    77e2:	e019      	b.n	7818 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    77e4:	464b      	mov	r3, r9
    77e6:	6818      	ldr	r0, [r3, #0]
    77e8:	4b25      	ldr	r3, [pc, #148]	; (7880 <spi_init+0x318>)
    77ea:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    77ec:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    77ee:	b2c0      	uxtb	r0, r0
    77f0:	4b21      	ldr	r3, [pc, #132]	; (7878 <spi_init+0x310>)
    77f2:	4798      	blx	r3
    77f4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    77f6:	ab02      	add	r3, sp, #8
    77f8:	1d9a      	adds	r2, r3, #6
    77fa:	69a0      	ldr	r0, [r4, #24]
    77fc:	4b1f      	ldr	r3, [pc, #124]	; (787c <spi_init+0x314>)
    77fe:	4798      	blx	r3
    7800:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    7802:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    7804:	2b00      	cmp	r3, #0
    7806:	d000      	beq.n	780a <spi_init+0x2a2>
    7808:	e6c0      	b.n	758c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    780a:	ab02      	add	r3, sp, #8
    780c:	3306      	adds	r3, #6
    780e:	781b      	ldrb	r3, [r3, #0]
    7810:	7333      	strb	r3, [r6, #12]
    7812:	e7d4      	b.n	77be <spi_init+0x256>
	uint32_t ctrlb = 0;
    7814:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    7816:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    7818:	6863      	ldr	r3, [r4, #4]
    781a:	68a1      	ldr	r1, [r4, #8]
    781c:	430b      	orrs	r3, r1
    781e:	68e1      	ldr	r1, [r4, #12]
    7820:	430b      	orrs	r3, r1
    7822:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    7824:	7c21      	ldrb	r1, [r4, #16]
    7826:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    7828:	7c61      	ldrb	r1, [r4, #17]
    782a:	2900      	cmp	r1, #0
    782c:	d103      	bne.n	7836 <spi_init+0x2ce>
    782e:	491a      	ldr	r1, [pc, #104]	; (7898 <spi_init+0x330>)
    7830:	7889      	ldrb	r1, [r1, #2]
    7832:	0789      	lsls	r1, r1, #30
    7834:	d501      	bpl.n	783a <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7836:	2180      	movs	r1, #128	; 0x80
    7838:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    783a:	7ca1      	ldrb	r1, [r4, #18]
    783c:	2900      	cmp	r1, #0
    783e:	d002      	beq.n	7846 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7840:	2180      	movs	r1, #128	; 0x80
    7842:	0289      	lsls	r1, r1, #10
    7844:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7846:	7ce1      	ldrb	r1, [r4, #19]
    7848:	2900      	cmp	r1, #0
    784a:	d002      	beq.n	7852 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    784c:	2180      	movs	r1, #128	; 0x80
    784e:	0089      	lsls	r1, r1, #2
    7850:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    7852:	7d21      	ldrb	r1, [r4, #20]
    7854:	2900      	cmp	r1, #0
    7856:	d002      	beq.n	785e <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7858:	2180      	movs	r1, #128	; 0x80
    785a:	0189      	lsls	r1, r1, #6
    785c:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    785e:	6831      	ldr	r1, [r6, #0]
    7860:	430b      	orrs	r3, r1
    7862:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
    7864:	6873      	ldr	r3, [r6, #4]
    7866:	431a      	orrs	r2, r3
    7868:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
    786a:	2000      	movs	r0, #0
    786c:	e68e      	b.n	758c <spi_init+0x24>
    786e:	46c0      	nop			; (mov r8, r8)
    7870:	00007335 	.word	0x00007335
    7874:	41004400 	.word	0x41004400
    7878:	00008925 	.word	0x00008925
    787c:	0000722b 	.word	0x0000722b
    7880:	000074ad 	.word	0x000074ad
    7884:	40000400 	.word	0x40000400
    7888:	00008909 	.word	0x00008909
    788c:	0000887d 	.word	0x0000887d
    7890:	000072e9 	.word	0x000072e9
    7894:	00008a01 	.word	0x00008a01
    7898:	41002000 	.word	0x41002000

0000789c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    789c:	b5f0      	push	{r4, r5, r6, r7, lr}
    789e:	46d6      	mov	lr, sl
    78a0:	464f      	mov	r7, r9
    78a2:	4646      	mov	r6, r8
    78a4:	b5c0      	push	{r6, r7, lr}
    78a6:	b082      	sub	sp, #8
    78a8:	4688      	mov	r8, r1
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    78aa:	2717      	movs	r7, #23
	if (length == 0) {
    78ac:	2a00      	cmp	r2, #0
    78ae:	d073      	beq.n	7998 <spi_read_buffer_wait+0xfc>
	}

	if (!(module->receiver_enabled)) {
    78b0:	79c1      	ldrb	r1, [r0, #7]
		return STATUS_ERR_DENIED;
    78b2:	3705      	adds	r7, #5
	if (!(module->receiver_enabled)) {
    78b4:	2900      	cmp	r1, #0
    78b6:	d06f      	beq.n	7998 <spi_read_buffer_wait+0xfc>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    78b8:	7941      	ldrb	r1, [r0, #5]
    78ba:	2900      	cmp	r1, #0
    78bc:	d103      	bne.n	78c6 <spi_read_buffer_wait+0x2a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    78be:	6801      	ldr	r1, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    78c0:	7e0c      	ldrb	r4, [r1, #24]
    78c2:	07a4      	lsls	r4, r4, #30
    78c4:	d40b      	bmi.n	78de <spi_read_buffer_wait+0x42>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    78c6:	3a01      	subs	r2, #1
    78c8:	b294      	uxth	r4, r2
    78ca:	2500      	movs	r5, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    78cc:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    78ce:	2102      	movs	r1, #2
    78d0:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    78d2:	2601      	movs	r6, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    78d4:	05db      	lsls	r3, r3, #23
    78d6:	0ddb      	lsrs	r3, r3, #23
    78d8:	469a      	mov	sl, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    78da:	46c4      	mov	ip, r8
    78dc:	e037      	b.n	794e <spi_read_buffer_wait+0xb2>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    78de:	2402      	movs	r4, #2
    78e0:	760c      	strb	r4, [r1, #24]
    78e2:	e7f0      	b.n	78c6 <spi_read_buffer_wait+0x2a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    78e4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    78e6:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    78e8:	4233      	tst	r3, r6
    78ea:	d0fc      	beq.n	78e6 <spi_read_buffer_wait+0x4a>
    78ec:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    78ee:	4233      	tst	r3, r6
    78f0:	d009      	beq.n	7906 <spi_read_buffer_wait+0x6a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    78f2:	4653      	mov	r3, sl
    78f4:	628b      	str	r3, [r1, #40]	; 0x28
    78f6:	e02d      	b.n	7954 <spi_read_buffer_wait+0xb8>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    78f8:	7e3b      	ldrb	r3, [r7, #24]
			if (spi_is_write_complete(module)) {
    78fa:	4649      	mov	r1, r9
    78fc:	420b      	tst	r3, r1
    78fe:	d138      	bne.n	7972 <spi_read_buffer_wait+0xd6>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7900:	7e3b      	ldrb	r3, [r7, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    7902:	4213      	tst	r3, r2
    7904:	d045      	beq.n	7992 <spi_read_buffer_wait+0xf6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7906:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7908:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    790a:	4213      	tst	r3, r2
    790c:	d0fc      	beq.n	7908 <spi_read_buffer_wait+0x6c>
    790e:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    7910:	4213      	tst	r3, r2
    7912:	d040      	beq.n	7996 <spi_read_buffer_wait+0xfa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7914:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    7916:	2700      	movs	r7, #0
    7918:	9701      	str	r7, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    791a:	4213      	tst	r3, r2
    791c:	d002      	beq.n	7924 <spi_read_buffer_wait+0x88>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    791e:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    7920:	231e      	movs	r3, #30
    7922:	9301      	str	r3, [sp, #4]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7924:	7983      	ldrb	r3, [r0, #6]
    7926:	2b01      	cmp	r3, #1
    7928:	d027      	beq.n	797a <spi_read_buffer_wait+0xde>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    792a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    792c:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    792e:	9901      	ldr	r1, [sp, #4]
    7930:	2900      	cmp	r1, #0
    7932:	d138      	bne.n	79a6 <spi_read_buffer_wait+0x10a>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    7934:	1c6f      	adds	r7, r5, #1
    7936:	b2bf      	uxth	r7, r7
    7938:	4661      	mov	r1, ip
    793a:	554b      	strb	r3, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    793c:	7981      	ldrb	r1, [r0, #6]
    793e:	2901      	cmp	r1, #1
    7940:	d01f      	beq.n	7982 <spi_read_buffer_wait+0xe6>
		rx_data[rx_pos++] = received_data;
    7942:	003d      	movs	r5, r7
	while (length--) {
    7944:	3c01      	subs	r4, #1
    7946:	b2a4      	uxth	r4, r4
    7948:	4918      	ldr	r1, [pc, #96]	; (79ac <spi_read_buffer_wait+0x110>)
    794a:	428c      	cmp	r4, r1
    794c:	d01f      	beq.n	798e <spi_read_buffer_wait+0xf2>
		if (module->mode == SPI_MODE_MASTER) {
    794e:	7943      	ldrb	r3, [r0, #5]
    7950:	2b01      	cmp	r3, #1
    7952:	d0c7      	beq.n	78e4 <spi_read_buffer_wait+0x48>
		if (module->mode == SPI_MODE_SLAVE) {
    7954:	7943      	ldrb	r3, [r0, #5]
    7956:	2b00      	cmp	r3, #0
    7958:	d1d5      	bne.n	7906 <spi_read_buffer_wait+0x6a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    795a:	6807      	ldr	r7, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    795c:	7e3b      	ldrb	r3, [r7, #24]
				if (spi_is_ready_to_read(module)) {
    795e:	4213      	tst	r3, r2
    7960:	d1ca      	bne.n	78f8 <spi_read_buffer_wait+0x5c>
    7962:	4b13      	ldr	r3, [pc, #76]	; (79b0 <spi_read_buffer_wait+0x114>)
    7964:	7e39      	ldrb	r1, [r7, #24]
    7966:	4211      	tst	r1, r2
    7968:	d1c6      	bne.n	78f8 <spi_read_buffer_wait+0x5c>
    796a:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    796c:	2b00      	cmp	r3, #0
    796e:	d1f9      	bne.n	7964 <spi_read_buffer_wait+0xc8>
    7970:	e7c2      	b.n	78f8 <spi_read_buffer_wait+0x5c>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7972:	2302      	movs	r3, #2
    7974:	763b      	strb	r3, [r7, #24]
				return STATUS_ABORTED;
    7976:	2704      	movs	r7, #4
    7978:	e00e      	b.n	7998 <spi_read_buffer_wait+0xfc>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    797a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    797c:	05c9      	lsls	r1, r1, #23
    797e:	0dcb      	lsrs	r3, r1, #23
    7980:	e7d5      	b.n	792e <spi_read_buffer_wait+0x92>
			rx_data[rx_pos++] = (received_data >> 8);
    7982:	3502      	adds	r5, #2
    7984:	b2ad      	uxth	r5, r5
    7986:	0a19      	lsrs	r1, r3, #8
    7988:	4663      	mov	r3, ip
    798a:	55d9      	strb	r1, [r3, r7]
    798c:	e7da      	b.n	7944 <spi_read_buffer_wait+0xa8>
    798e:	9f01      	ldr	r7, [sp, #4]
    7990:	e002      	b.n	7998 <spi_read_buffer_wait+0xfc>
				return STATUS_ERR_TIMEOUT;
    7992:	2712      	movs	r7, #18
    7994:	e000      	b.n	7998 <spi_read_buffer_wait+0xfc>
		return STATUS_ERR_IO;
    7996:	2710      	movs	r7, #16
		}
	}

	return STATUS_OK;
}
    7998:	0038      	movs	r0, r7
    799a:	b002      	add	sp, #8
    799c:	bc1c      	pop	{r2, r3, r4}
    799e:	4690      	mov	r8, r2
    79a0:	4699      	mov	r9, r3
    79a2:	46a2      	mov	sl, r4
    79a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79a6:	9f01      	ldr	r7, [sp, #4]
    79a8:	e7f6      	b.n	7998 <spi_read_buffer_wait+0xfc>
    79aa:	46c0      	nop			; (mov r8, r8)
    79ac:	0000ffff 	.word	0x0000ffff
    79b0:	00002710 	.word	0x00002710

000079b4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    79b4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    79b6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    79b8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    79ba:	2c01      	cmp	r4, #1
    79bc:	d001      	beq.n	79c2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    79be:	0018      	movs	r0, r3
    79c0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    79c2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    79c4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    79c6:	2c00      	cmp	r4, #0
    79c8:	d1f9      	bne.n	79be <spi_select_slave+0xa>
		if (select) {
    79ca:	2a00      	cmp	r2, #0
    79cc:	d058      	beq.n	7a80 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    79ce:	784b      	ldrb	r3, [r1, #1]
    79d0:	2b00      	cmp	r3, #0
    79d2:	d044      	beq.n	7a5e <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    79d4:	6803      	ldr	r3, [r0, #0]
    79d6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    79d8:	07db      	lsls	r3, r3, #31
    79da:	d410      	bmi.n	79fe <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    79dc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    79de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    79e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    79e2:	2900      	cmp	r1, #0
    79e4:	d104      	bne.n	79f0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    79e6:	0953      	lsrs	r3, r2, #5
    79e8:	01db      	lsls	r3, r3, #7
    79ea:	492e      	ldr	r1, [pc, #184]	; (7aa4 <spi_select_slave+0xf0>)
    79ec:	468c      	mov	ip, r1
    79ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    79f0:	211f      	movs	r1, #31
    79f2:	4011      	ands	r1, r2
    79f4:	2201      	movs	r2, #1
    79f6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    79f8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    79fa:	2305      	movs	r3, #5
    79fc:	e7df      	b.n	79be <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    79fe:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a00:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7a02:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a04:	2c00      	cmp	r4, #0
    7a06:	d104      	bne.n	7a12 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    7a08:	0953      	lsrs	r3, r2, #5
    7a0a:	01db      	lsls	r3, r3, #7
    7a0c:	4c25      	ldr	r4, [pc, #148]	; (7aa4 <spi_select_slave+0xf0>)
    7a0e:	46a4      	mov	ip, r4
    7a10:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a12:	241f      	movs	r4, #31
    7a14:	4014      	ands	r4, r2
    7a16:	2201      	movs	r2, #1
    7a18:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    7a1a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a1c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7a1e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7a20:	07d2      	lsls	r2, r2, #31
    7a22:	d501      	bpl.n	7a28 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7a24:	788a      	ldrb	r2, [r1, #2]
    7a26:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    7a28:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    7a2a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    7a2c:	2a00      	cmp	r2, #0
    7a2e:	d1c6      	bne.n	79be <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7a30:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    7a32:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7a34:	7e13      	ldrb	r3, [r2, #24]
    7a36:	420b      	tst	r3, r1
    7a38:	d0fc      	beq.n	7a34 <spi_select_slave+0x80>
    7a3a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    7a3c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    7a3e:	0749      	lsls	r1, r1, #29
    7a40:	d5bd      	bpl.n	79be <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7a42:	8b53      	ldrh	r3, [r2, #26]
    7a44:	075b      	lsls	r3, r3, #29
    7a46:	d501      	bpl.n	7a4c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7a48:	2304      	movs	r3, #4
    7a4a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7a4c:	7983      	ldrb	r3, [r0, #6]
    7a4e:	2b01      	cmp	r3, #1
    7a50:	d002      	beq.n	7a58 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7a52:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a54:	2300      	movs	r3, #0
    7a56:	e7b2      	b.n	79be <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7a58:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a5a:	2300      	movs	r3, #0
    7a5c:	e7af      	b.n	79be <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7a5e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a60:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7a62:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a64:	2900      	cmp	r1, #0
    7a66:	d104      	bne.n	7a72 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7a68:	0953      	lsrs	r3, r2, #5
    7a6a:	01db      	lsls	r3, r3, #7
    7a6c:	490d      	ldr	r1, [pc, #52]	; (7aa4 <spi_select_slave+0xf0>)
    7a6e:	468c      	mov	ip, r1
    7a70:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a72:	211f      	movs	r1, #31
    7a74:	4011      	ands	r1, r2
    7a76:	2201      	movs	r2, #1
    7a78:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7a7a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7a7c:	2300      	movs	r3, #0
    7a7e:	e79e      	b.n	79be <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7a80:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7a82:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7a84:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7a86:	2900      	cmp	r1, #0
    7a88:	d104      	bne.n	7a94 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7a8a:	0953      	lsrs	r3, r2, #5
    7a8c:	01db      	lsls	r3, r3, #7
    7a8e:	4905      	ldr	r1, [pc, #20]	; (7aa4 <spi_select_slave+0xf0>)
    7a90:	468c      	mov	ip, r1
    7a92:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7a94:	211f      	movs	r1, #31
    7a96:	4011      	ands	r1, r2
    7a98:	2201      	movs	r2, #1
    7a9a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7a9c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7a9e:	2300      	movs	r3, #0
    7aa0:	e78d      	b.n	79be <spi_select_slave+0xa>
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	41004400 	.word	0x41004400

00007aa8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aaa:	46de      	mov	lr, fp
    7aac:	4657      	mov	r7, sl
    7aae:	464e      	mov	r6, r9
    7ab0:	4645      	mov	r5, r8
    7ab2:	b5e0      	push	{r5, r6, r7, lr}
    7ab4:	b083      	sub	sp, #12
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7ab6:	2317      	movs	r3, #23
	if (length == 0) {
    7ab8:	2a00      	cmp	r2, #0
    7aba:	d107      	bne.n	7acc <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    7abc:	0018      	movs	r0, r3
    7abe:	b003      	add	sp, #12
    7ac0:	bc3c      	pop	{r2, r3, r4, r5}
    7ac2:	4690      	mov	r8, r2
    7ac4:	4699      	mov	r9, r3
    7ac6:	46a2      	mov	sl, r4
    7ac8:	46ab      	mov	fp, r5
    7aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    7acc:	7943      	ldrb	r3, [r0, #5]
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d103      	bne.n	7ada <spi_write_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7ad2:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7ad4:	7e1c      	ldrb	r4, [r3, #24]
    7ad6:	07a4      	lsls	r4, r4, #30
    7ad8:	d40a      	bmi.n	7af0 <spi_write_buffer_wait+0x48>
						data_to_send = tx_data[tx_pos++];
    7ada:	4693      	mov	fp, r2
    7adc:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    7ade:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    7ae0:	2502      	movs	r5, #2
    7ae2:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    7ae4:	3502      	adds	r5, #2
    7ae6:	46a8      	mov	r8, r5
    7ae8:	3a01      	subs	r2, #1
    7aea:	b292      	uxth	r2, r2
    7aec:	468a      	mov	sl, r1
    7aee:	e023      	b.n	7b38 <spi_write_buffer_wait+0x90>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7af0:	2402      	movs	r4, #2
    7af2:	761c      	strb	r4, [r3, #24]
    7af4:	e7f1      	b.n	7ada <spi_write_buffer_wait+0x32>
    7af6:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    7af8:	4661      	mov	r1, ip
    7afa:	420d      	tst	r5, r1
    7afc:	d12e      	bne.n	7b5c <spi_write_buffer_wait+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7afe:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    7b00:	421d      	tst	r5, r3
    7b02:	d100      	bne.n	7b06 <spi_write_buffer_wait+0x5e>
    7b04:	e0c2      	b.n	7c8c <spi_write_buffer_wait+0x1e4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b06:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b08:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    7b0a:	421d      	tst	r5, r3
    7b0c:	d0fc      	beq.n	7b08 <spi_write_buffer_wait+0x60>
		uint16_t data_to_send = tx_data[tx_pos++];
    7b0e:	1c67      	adds	r7, r4, #1
    7b10:	b2bf      	uxth	r7, r7
    7b12:	4651      	mov	r1, sl
    7b14:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7b16:	7981      	ldrb	r1, [r0, #6]
    7b18:	2901      	cmp	r1, #1
    7b1a:	d023      	beq.n	7b64 <spi_write_buffer_wait+0xbc>
		uint16_t data_to_send = tx_data[tx_pos++];
    7b1c:	b2ad      	uxth	r5, r5
    7b1e:	003c      	movs	r4, r7
    7b20:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7b22:	421f      	tst	r7, r3
    7b24:	d002      	beq.n	7b2c <spi_write_buffer_wait+0x84>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7b26:	05ed      	lsls	r5, r5, #23
    7b28:	0ded      	lsrs	r5, r5, #23
    7b2a:	62b5      	str	r5, [r6, #40]	; 0x28
    7b2c:	1e55      	subs	r5, r2, #1
    7b2e:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    7b30:	79c6      	ldrb	r6, [r0, #7]
    7b32:	2e00      	cmp	r6, #0
    7b34:	d11d      	bne.n	7b72 <spi_write_buffer_wait+0xca>
    7b36:	002a      	movs	r2, r5
	while (length--) {
    7b38:	4d59      	ldr	r5, [pc, #356]	; (7ca0 <spi_write_buffer_wait+0x1f8>)
    7b3a:	42aa      	cmp	r2, r5
    7b3c:	d070      	beq.n	7c20 <spi_write_buffer_wait+0x178>
		if (module->mode == SPI_MODE_SLAVE) {
    7b3e:	7945      	ldrb	r5, [r0, #5]
    7b40:	2d00      	cmp	r5, #0
    7b42:	d1e0      	bne.n	7b06 <spi_write_buffer_wait+0x5e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b44:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7b46:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    7b48:	421d      	tst	r5, r3
    7b4a:	d1d4      	bne.n	7af6 <spi_write_buffer_wait+0x4e>
    7b4c:	4d55      	ldr	r5, [pc, #340]	; (7ca4 <spi_write_buffer_wait+0x1fc>)
    7b4e:	7e37      	ldrb	r7, [r6, #24]
    7b50:	421f      	tst	r7, r3
    7b52:	d1d0      	bne.n	7af6 <spi_write_buffer_wait+0x4e>
    7b54:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7b56:	2d00      	cmp	r5, #0
    7b58:	d1f9      	bne.n	7b4e <spi_write_buffer_wait+0xa6>
    7b5a:	e7cc      	b.n	7af6 <spi_write_buffer_wait+0x4e>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7b5c:	2302      	movs	r3, #2
    7b5e:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    7b60:	3302      	adds	r3, #2
    7b62:	e7ab      	b.n	7abc <spi_write_buffer_wait+0x14>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7b64:	3402      	adds	r4, #2
    7b66:	b2a4      	uxth	r4, r4
    7b68:	4651      	mov	r1, sl
    7b6a:	5dcf      	ldrb	r7, [r1, r7]
    7b6c:	023f      	lsls	r7, r7, #8
    7b6e:	433d      	orrs	r5, r7
    7b70:	e7d6      	b.n	7b20 <spi_write_buffer_wait+0x78>
    7b72:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    7b74:	7945      	ldrb	r5, [r0, #5]
    7b76:	2d00      	cmp	r5, #0
    7b78:	d137      	bne.n	7bea <spi_write_buffer_wait+0x142>
    7b7a:	4d4b      	ldr	r5, [pc, #300]	; (7ca8 <spi_write_buffer_wait+0x200>)
    7b7c:	9101      	str	r1, [sp, #4]
    7b7e:	e012      	b.n	7ba6 <spi_write_buffer_wait+0xfe>
							data_to_send |= (tx_data[tx_pos++] << 8);
    7b80:	3402      	adds	r4, #2
    7b82:	b2a4      	uxth	r4, r4
    7b84:	4649      	mov	r1, r9
    7b86:	9f01      	ldr	r7, [sp, #4]
    7b88:	5c79      	ldrb	r1, [r7, r1]
    7b8a:	0209      	lsls	r1, r1, #8
    7b8c:	9f00      	ldr	r7, [sp, #0]
    7b8e:	430f      	orrs	r7, r1
    7b90:	e01b      	b.n	7bca <spi_write_buffer_wait+0x122>
						length--;
    7b92:	3a01      	subs	r2, #1
    7b94:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    7b96:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7b98:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    7b9a:	4641      	mov	r1, r8
    7b9c:	420f      	tst	r7, r1
    7b9e:	d11b      	bne.n	7bd8 <spi_write_buffer_wait+0x130>
    7ba0:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7ba2:	2d00      	cmp	r5, #0
    7ba4:	d018      	beq.n	7bd8 <spi_write_buffer_wait+0x130>
					if (length && spi_is_ready_to_write(module)) {
    7ba6:	2a00      	cmp	r2, #0
    7ba8:	d0f5      	beq.n	7b96 <spi_write_buffer_wait+0xee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7baa:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7bac:	7e37      	ldrb	r7, [r6, #24]
    7bae:	421f      	tst	r7, r3
    7bb0:	d0f1      	beq.n	7b96 <spi_write_buffer_wait+0xee>
						data_to_send = tx_data[tx_pos++];
    7bb2:	1c67      	adds	r7, r4, #1
    7bb4:	b2b9      	uxth	r1, r7
    7bb6:	4689      	mov	r9, r1
    7bb8:	9901      	ldr	r1, [sp, #4]
    7bba:	5d09      	ldrb	r1, [r1, r4]
    7bbc:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7bbe:	7981      	ldrb	r1, [r0, #6]
    7bc0:	2901      	cmp	r1, #1
    7bc2:	d0dd      	beq.n	7b80 <spi_write_buffer_wait+0xd8>
						data_to_send = tx_data[tx_pos++];
    7bc4:	4669      	mov	r1, sp
    7bc6:	880f      	ldrh	r7, [r1, #0]
    7bc8:	464c      	mov	r4, r9
    7bca:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    7bcc:	4219      	tst	r1, r3
    7bce:	d0e0      	beq.n	7b92 <spi_write_buffer_wait+0xea>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7bd0:	05ff      	lsls	r7, r7, #23
    7bd2:	0dff      	lsrs	r7, r7, #23
    7bd4:	62b7      	str	r7, [r6, #40]	; 0x28
    7bd6:	e7dc      	b.n	7b92 <spi_write_buffer_wait+0xea>
    7bd8:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7bda:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    7bdc:	4667      	mov	r7, ip
    7bde:	423d      	tst	r5, r7
    7be0:	d118      	bne.n	7c14 <spi_write_buffer_wait+0x16c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7be2:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    7be4:	4646      	mov	r6, r8
    7be6:	4235      	tst	r5, r6
    7be8:	d052      	beq.n	7c90 <spi_write_buffer_wait+0x1e8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7bea:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7bec:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    7bee:	4647      	mov	r7, r8
    7bf0:	423d      	tst	r5, r7
    7bf2:	d0fb      	beq.n	7bec <spi_write_buffer_wait+0x144>
    7bf4:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    7bf6:	423d      	tst	r5, r7
    7bf8:	d007      	beq.n	7c0a <spi_write_buffer_wait+0x162>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7bfa:	8b75      	ldrh	r5, [r6, #26]
    7bfc:	423d      	tst	r5, r7
    7bfe:	d000      	beq.n	7c02 <spi_write_buffer_wait+0x15a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7c00:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7c02:	7985      	ldrb	r5, [r0, #6]
    7c04:	2d01      	cmp	r5, #1
    7c06:	d009      	beq.n	7c1c <spi_write_buffer_wait+0x174>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7c08:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    7c0a:	465d      	mov	r5, fp
    7c0c:	3d01      	subs	r5, #1
    7c0e:	b2ad      	uxth	r5, r5
    7c10:	46ab      	mov	fp, r5
    7c12:	e769      	b.n	7ae8 <spi_write_buffer_wait+0x40>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7c14:	2302      	movs	r3, #2
    7c16:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    7c18:	3302      	adds	r3, #2
    7c1a:	e74f      	b.n	7abc <spi_write_buffer_wait+0x14>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7c1c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    7c1e:	e7f4      	b.n	7c0a <spi_write_buffer_wait+0x162>
	if (module->mode == SPI_MODE_MASTER) {
    7c20:	7943      	ldrb	r3, [r0, #5]
    7c22:	2b01      	cmp	r3, #1
    7c24:	d00b      	beq.n	7c3e <spi_write_buffer_wait+0x196>
	if (module->mode == SPI_MODE_SLAVE) {
    7c26:	2b00      	cmp	r3, #0
    7c28:	d134      	bne.n	7c94 <spi_write_buffer_wait+0x1ec>
		if (module->receiver_enabled) {
    7c2a:	79c2      	ldrb	r2, [r0, #7]
    7c2c:	2a00      	cmp	r2, #0
    7c2e:	d100      	bne.n	7c32 <spi_write_buffer_wait+0x18a>
    7c30:	e744      	b.n	7abc <spi_write_buffer_wait+0x14>
					if (spi_is_ready_to_read(module)) {
    7c32:	2404      	movs	r4, #4
			while (flush_length) {
    7c34:	465b      	mov	r3, fp
    7c36:	465d      	mov	r5, fp
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d119      	bne.n	7c70 <spi_write_buffer_wait+0x1c8>
    7c3c:	e73e      	b.n	7abc <spi_write_buffer_wait+0x14>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c3e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    7c40:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7c42:	7e0b      	ldrb	r3, [r1, #24]
    7c44:	4213      	tst	r3, r2
    7c46:	d0fc      	beq.n	7c42 <spi_write_buffer_wait+0x19a>
	return STATUS_OK;
    7c48:	2300      	movs	r3, #0
    7c4a:	e737      	b.n	7abc <spi_write_buffer_wait+0x14>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c4c:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    7c4e:	4223      	tst	r3, r4
    7c50:	d022      	beq.n	7c98 <spi_write_buffer_wait+0x1f0>
    7c52:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    7c54:	4223      	tst	r3, r4
    7c56:	d007      	beq.n	7c68 <spi_write_buffer_wait+0x1c0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7c58:	8b4b      	ldrh	r3, [r1, #26]
    7c5a:	4223      	tst	r3, r4
    7c5c:	d000      	beq.n	7c60 <spi_write_buffer_wait+0x1b8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7c5e:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7c60:	7983      	ldrb	r3, [r0, #6]
    7c62:	2b01      	cmp	r3, #1
    7c64:	d010      	beq.n	7c88 <spi_write_buffer_wait+0x1e0>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7c66:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    7c68:	3d01      	subs	r5, #1
    7c6a:	b2ad      	uxth	r5, r5
			while (flush_length) {
    7c6c:	2d00      	cmp	r5, #0
    7c6e:	d015      	beq.n	7c9c <spi_write_buffer_wait+0x1f4>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7c70:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c72:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    7c74:	4223      	tst	r3, r4
    7c76:	d1e9      	bne.n	7c4c <spi_write_buffer_wait+0x1a4>
    7c78:	4b0a      	ldr	r3, [pc, #40]	; (7ca4 <spi_write_buffer_wait+0x1fc>)
    7c7a:	7e0a      	ldrb	r2, [r1, #24]
    7c7c:	4222      	tst	r2, r4
    7c7e:	d1e5      	bne.n	7c4c <spi_write_buffer_wait+0x1a4>
    7c80:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    7c82:	2b00      	cmp	r3, #0
    7c84:	d1f9      	bne.n	7c7a <spi_write_buffer_wait+0x1d2>
    7c86:	e7e1      	b.n	7c4c <spi_write_buffer_wait+0x1a4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7c88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7c8a:	e7ed      	b.n	7c68 <spi_write_buffer_wait+0x1c0>
				return STATUS_ERR_TIMEOUT;
    7c8c:	2312      	movs	r3, #18
    7c8e:	e715      	b.n	7abc <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    7c90:	2312      	movs	r3, #18
    7c92:	e713      	b.n	7abc <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    7c94:	2300      	movs	r3, #0
    7c96:	e711      	b.n	7abc <spi_write_buffer_wait+0x14>
					return STATUS_ERR_TIMEOUT;
    7c98:	2312      	movs	r3, #18
    7c9a:	e70f      	b.n	7abc <spi_write_buffer_wait+0x14>
	return STATUS_OK;
    7c9c:	2300      	movs	r3, #0
    7c9e:	e70d      	b.n	7abc <spi_write_buffer_wait+0x14>
    7ca0:	0000ffff 	.word	0x0000ffff
    7ca4:	00002710 	.word	0x00002710
    7ca8:	00002711 	.word	0x00002711

00007cac <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    7cac:	4770      	bx	lr
	...

00007cb0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    7cb0:	b510      	push	{r4, lr}
    7cb2:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    7cb4:	4b0f      	ldr	r3, [pc, #60]	; (7cf4 <sd_mmc_test_unit_ready+0x44>)
    7cb6:	4798      	blx	r3
    7cb8:	2801      	cmp	r0, #1
    7cba:	d019      	beq.n	7cf0 <sd_mmc_test_unit_ready+0x40>
    7cbc:	2800      	cmp	r0, #0
    7cbe:	d003      	beq.n	7cc8 <sd_mmc_test_unit_ready+0x18>
    7cc0:	2802      	cmp	r0, #2
    7cc2:	d010      	beq.n	7ce6 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    7cc4:	2001      	movs	r0, #1
	}
}
    7cc6:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    7cc8:	4b0b      	ldr	r3, [pc, #44]	; (7cf8 <sd_mmc_test_unit_ready+0x48>)
    7cca:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    7ccc:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    7cce:	2b00      	cmp	r3, #0
    7cd0:	d1f9      	bne.n	7cc6 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    7cd2:	0020      	movs	r0, r4
    7cd4:	4b09      	ldr	r3, [pc, #36]	; (7cfc <sd_mmc_test_unit_ready+0x4c>)
    7cd6:	4798      	blx	r3
    7cd8:	0003      	movs	r3, r0
    7cda:	2003      	movs	r0, #3
    7cdc:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    7cde:	4243      	negs	r3, r0
    7ce0:	4158      	adcs	r0, r3
    7ce2:	0040      	lsls	r0, r0, #1
    7ce4:	e7ef      	b.n	7cc6 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    7ce6:	2200      	movs	r2, #0
    7ce8:	4b03      	ldr	r3, [pc, #12]	; (7cf8 <sd_mmc_test_unit_ready+0x48>)
    7cea:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    7cec:	2002      	movs	r0, #2
    7cee:	e7ea      	b.n	7cc6 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    7cf0:	2003      	movs	r0, #3
    7cf2:	e7e8      	b.n	7cc6 <sd_mmc_test_unit_ready+0x16>
    7cf4:	000009ad 	.word	0x000009ad
    7cf8:	200002fc 	.word	0x200002fc
    7cfc:	00000e5d 	.word	0x00000e5d

00007d00 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    7d00:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    7d02:	2000      	movs	r0, #0
    7d04:	4b01      	ldr	r3, [pc, #4]	; (7d0c <sd_mmc_test_unit_ready_0+0xc>)
    7d06:	4798      	blx	r3
}
    7d08:	bd10      	pop	{r4, pc}
    7d0a:	46c0      	nop			; (mov r8, r8)
    7d0c:	00007cb1 	.word	0x00007cb1

00007d10 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    7d10:	b570      	push	{r4, r5, r6, lr}
    7d12:	0004      	movs	r4, r0
    7d14:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    7d16:	4b04      	ldr	r3, [pc, #16]	; (7d28 <sd_mmc_read_capacity+0x18>)
    7d18:	4798      	blx	r3
    7d1a:	0040      	lsls	r0, r0, #1
    7d1c:	3801      	subs	r0, #1
    7d1e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    7d20:	0020      	movs	r0, r4
    7d22:	4b02      	ldr	r3, [pc, #8]	; (7d2c <sd_mmc_read_capacity+0x1c>)
    7d24:	4798      	blx	r3
}
    7d26:	bd70      	pop	{r4, r5, r6, pc}
    7d28:	00000e85 	.word	0x00000e85
    7d2c:	00007cb1 	.word	0x00007cb1

00007d30 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    7d30:	b510      	push	{r4, lr}
    7d32:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    7d34:	2000      	movs	r0, #0
    7d36:	4b01      	ldr	r3, [pc, #4]	; (7d3c <sd_mmc_read_capacity_0+0xc>)
    7d38:	4798      	blx	r3
}
    7d3a:	bd10      	pop	{r4, pc}
    7d3c:	00007d11 	.word	0x00007d11

00007d40 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    7d40:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    7d42:	2000      	movs	r0, #0
    7d44:	4b01      	ldr	r3, [pc, #4]	; (7d4c <sd_mmc_wr_protect_0+0xc>)
    7d46:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    7d48:	bd10      	pop	{r4, pc}
    7d4a:	46c0      	nop			; (mov r8, r8)
    7d4c:	00000ead 	.word	0x00000ead

00007d50 <sd_mmc_removal_0>:
}

bool sd_mmc_removal_0(void)
{
	return sd_mmc_removal(0);
}
    7d50:	2001      	movs	r0, #1
    7d52:	4770      	bx	lr

00007d54 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    7d54:	b510      	push	{r4, lr}
    7d56:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    7d58:	2201      	movs	r2, #1
    7d5a:	4b0c      	ldr	r3, [pc, #48]	; (7d8c <sd_mmc_mem_2_ram+0x38>)
    7d5c:	4798      	blx	r3
    7d5e:	2800      	cmp	r0, #0
    7d60:	d004      	beq.n	7d6c <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7d62:	3802      	subs	r0, #2
    7d64:	4243      	negs	r3, r0
    7d66:	4158      	adcs	r0, r3
    7d68:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7d6a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7d6c:	2101      	movs	r1, #1
    7d6e:	0020      	movs	r0, r4
    7d70:	4b07      	ldr	r3, [pc, #28]	; (7d90 <sd_mmc_mem_2_ram+0x3c>)
    7d72:	4798      	blx	r3
    7d74:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7d76:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    7d78:	2b00      	cmp	r3, #0
    7d7a:	d1f6      	bne.n	7d6a <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    7d7c:	2000      	movs	r0, #0
    7d7e:	4b05      	ldr	r3, [pc, #20]	; (7d94 <sd_mmc_mem_2_ram+0x40>)
    7d80:	4798      	blx	r3
    7d82:	1e43      	subs	r3, r0, #1
    7d84:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7d86:	b2c0      	uxtb	r0, r0
    7d88:	e7ef      	b.n	7d6a <sd_mmc_mem_2_ram+0x16>
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	00000eb1 	.word	0x00000eb1
    7d90:	00000f39 	.word	0x00000f39
    7d94:	00000f65 	.word	0x00000f65

00007d98 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    7d98:	b510      	push	{r4, lr}
    7d9a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    7d9c:	0001      	movs	r1, r0
    7d9e:	2000      	movs	r0, #0
    7da0:	4b01      	ldr	r3, [pc, #4]	; (7da8 <sd_mmc_mem_2_ram_0+0x10>)
    7da2:	4798      	blx	r3
}
    7da4:	bd10      	pop	{r4, pc}
    7da6:	46c0      	nop			; (mov r8, r8)
    7da8:	00007d55 	.word	0x00007d55

00007dac <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    7dac:	b510      	push	{r4, lr}
    7dae:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    7db0:	2201      	movs	r2, #1
    7db2:	4b0c      	ldr	r3, [pc, #48]	; (7de4 <sd_mmc_ram_2_mem+0x38>)
    7db4:	4798      	blx	r3
    7db6:	2800      	cmp	r0, #0
    7db8:	d004      	beq.n	7dc4 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    7dba:	3802      	subs	r0, #2
    7dbc:	4243      	negs	r3, r0
    7dbe:	4158      	adcs	r0, r3
    7dc0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    7dc2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7dc4:	2101      	movs	r1, #1
    7dc6:	0020      	movs	r0, r4
    7dc8:	4b07      	ldr	r3, [pc, #28]	; (7de8 <sd_mmc_ram_2_mem+0x3c>)
    7dca:	4798      	blx	r3
    7dcc:	0003      	movs	r3, r0
		return CTRL_FAIL;
    7dce:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d1f6      	bne.n	7dc2 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    7dd4:	2000      	movs	r0, #0
    7dd6:	4b05      	ldr	r3, [pc, #20]	; (7dec <sd_mmc_ram_2_mem+0x40>)
    7dd8:	4798      	blx	r3
    7dda:	1e43      	subs	r3, r0, #1
    7ddc:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    7dde:	b2c0      	uxtb	r0, r0
    7de0:	e7ef      	b.n	7dc2 <sd_mmc_ram_2_mem+0x16>
    7de2:	46c0      	nop			; (mov r8, r8)
    7de4:	00000fd5 	.word	0x00000fd5
    7de8:	00001045 	.word	0x00001045
    7dec:	00001071 	.word	0x00001071

00007df0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    7df0:	b510      	push	{r4, lr}
    7df2:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    7df4:	0001      	movs	r1, r0
    7df6:	2000      	movs	r0, #0
    7df8:	4b01      	ldr	r3, [pc, #4]	; (7e00 <sd_mmc_ram_2_mem_0+0x10>)
    7dfa:	4798      	blx	r3
}
    7dfc:	bd10      	pop	{r4, pc}
    7dfe:	46c0      	nop			; (mov r8, r8)
    7e00:	00007dad 	.word	0x00007dad

00007e04 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    7e04:	b500      	push	{lr}
    7e06:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    7e08:	466b      	mov	r3, sp
    7e0a:	1dd9      	adds	r1, r3, #7
    7e0c:	23ff      	movs	r3, #255	; 0xff
    7e0e:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    7e10:	2201      	movs	r2, #1
    7e12:	480b      	ldr	r0, [pc, #44]	; (7e40 <sd_mmc_spi_start_write_block+0x3c>)
    7e14:	4b0b      	ldr	r3, [pc, #44]	; (7e44 <sd_mmc_spi_start_write_block+0x40>)
    7e16:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    7e18:	4b0b      	ldr	r3, [pc, #44]	; (7e48 <sd_mmc_spi_start_write_block+0x44>)
    7e1a:	881b      	ldrh	r3, [r3, #0]
    7e1c:	2b01      	cmp	r3, #1
    7e1e:	d00a      	beq.n	7e36 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    7e20:	22fc      	movs	r2, #252	; 0xfc
    7e22:	466b      	mov	r3, sp
    7e24:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    7e26:	2201      	movs	r2, #1
    7e28:	466b      	mov	r3, sp
    7e2a:	1d99      	adds	r1, r3, #6
    7e2c:	4804      	ldr	r0, [pc, #16]	; (7e40 <sd_mmc_spi_start_write_block+0x3c>)
    7e2e:	4b05      	ldr	r3, [pc, #20]	; (7e44 <sd_mmc_spi_start_write_block+0x40>)
    7e30:	4798      	blx	r3
}
    7e32:	b003      	add	sp, #12
    7e34:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    7e36:	22fe      	movs	r2, #254	; 0xfe
    7e38:	466b      	mov	r3, sp
    7e3a:	719a      	strb	r2, [r3, #6]
    7e3c:	e7f3      	b.n	7e26 <sd_mmc_spi_start_write_block+0x22>
    7e3e:	46c0      	nop			; (mov r8, r8)
    7e40:	20000300 	.word	0x20000300
    7e44:	00007aa9 	.word	0x00007aa9
    7e48:	20000314 	.word	0x20000314

00007e4c <sd_mmc_spi_wait_busy>:
{
    7e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e4e:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    7e50:	466b      	mov	r3, sp
    7e52:	1ddc      	adds	r4, r3, #7
    7e54:	23ff      	movs	r3, #255	; 0xff
    7e56:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7e58:	4e12      	ldr	r6, [pc, #72]	; (7ea4 <sd_mmc_spi_wait_busy+0x58>)
    7e5a:	2201      	movs	r2, #1
    7e5c:	0021      	movs	r1, r4
    7e5e:	0030      	movs	r0, r6
    7e60:	4d11      	ldr	r5, [pc, #68]	; (7ea8 <sd_mmc_spi_wait_busy+0x5c>)
    7e62:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7e64:	23ff      	movs	r3, #255	; 0xff
    7e66:	2201      	movs	r2, #1
    7e68:	0021      	movs	r1, r4
    7e6a:	0030      	movs	r0, r6
    7e6c:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7e6e:	23ff      	movs	r3, #255	; 0xff
    7e70:	2201      	movs	r2, #1
    7e72:	0021      	movs	r1, r4
    7e74:	0030      	movs	r0, r6
    7e76:	47a8      	blx	r5
    7e78:	4c0c      	ldr	r4, [pc, #48]	; (7eac <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    7e7a:	466b      	mov	r3, sp
    7e7c:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7e7e:	4e09      	ldr	r6, [pc, #36]	; (7ea4 <sd_mmc_spi_wait_busy+0x58>)
    7e80:	4f09      	ldr	r7, [pc, #36]	; (7ea8 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    7e82:	782b      	ldrb	r3, [r5, #0]
    7e84:	2bff      	cmp	r3, #255	; 0xff
    7e86:	d009      	beq.n	7e9c <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7e88:	23ff      	movs	r3, #255	; 0xff
    7e8a:	2201      	movs	r2, #1
    7e8c:	0029      	movs	r1, r5
    7e8e:	0030      	movs	r0, r6
    7e90:	47b8      	blx	r7
    7e92:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    7e94:	2c00      	cmp	r4, #0
    7e96:	d1f4      	bne.n	7e82 <sd_mmc_spi_wait_busy+0x36>
			return false;
    7e98:	2000      	movs	r0, #0
    7e9a:	e000      	b.n	7e9e <sd_mmc_spi_wait_busy+0x52>
	return true;
    7e9c:	2001      	movs	r0, #1
}
    7e9e:	b003      	add	sp, #12
    7ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ea2:	46c0      	nop			; (mov r8, r8)
    7ea4:	20000300 	.word	0x20000300
    7ea8:	0000789d 	.word	0x0000789d
    7eac:	00030d40 	.word	0x00030d40

00007eb0 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    7eb0:	b570      	push	{r4, r5, r6, lr}
    7eb2:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    7eb4:	4b14      	ldr	r3, [pc, #80]	; (7f08 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    7eb6:	881c      	ldrh	r4, [r3, #0]
    7eb8:	2c01      	cmp	r4, #1
    7eba:	d023      	beq.n	7f04 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    7ebc:	4b13      	ldr	r3, [pc, #76]	; (7f0c <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    7ebe:	8819      	ldrh	r1, [r3, #0]
    7ec0:	4b13      	ldr	r3, [pc, #76]	; (7f10 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    7ec2:	6818      	ldr	r0, [r3, #0]
    7ec4:	4b13      	ldr	r3, [pc, #76]	; (7f14 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    7ec6:	4798      	blx	r3
		return true; // It is not the End of multi write
    7ec8:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    7eca:	4284      	cmp	r4, r0
    7ecc:	d902      	bls.n	7ed4 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    7ece:	0018      	movs	r0, r3
    7ed0:	b002      	add	sp, #8
    7ed2:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    7ed4:	466b      	mov	r3, sp
    7ed6:	1ddc      	adds	r4, r3, #7
    7ed8:	23ff      	movs	r3, #255	; 0xff
    7eda:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    7edc:	4e0e      	ldr	r6, [pc, #56]	; (7f18 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    7ede:	2201      	movs	r2, #1
    7ee0:	0021      	movs	r1, r4
    7ee2:	0030      	movs	r0, r6
    7ee4:	4d0d      	ldr	r5, [pc, #52]	; (7f1c <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    7ee6:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    7ee8:	23fd      	movs	r3, #253	; 0xfd
    7eea:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    7eec:	2201      	movs	r2, #1
    7eee:	0021      	movs	r1, r4
    7ef0:	0030      	movs	r0, r6
    7ef2:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    7ef4:	4b0a      	ldr	r3, [pc, #40]	; (7f20 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    7ef6:	4798      	blx	r3
    7ef8:	1e03      	subs	r3, r0, #0
    7efa:	d1e8      	bne.n	7ece <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    7efc:	2105      	movs	r1, #5
    7efe:	4a09      	ldr	r2, [pc, #36]	; (7f24 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    7f00:	7011      	strb	r1, [r2, #0]
		return false;
    7f02:	e7e4      	b.n	7ece <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    7f04:	2301      	movs	r3, #1
    7f06:	e7e2      	b.n	7ece <sd_mmc_spi_stop_multiwrite_block+0x1e>
    7f08:	20000314 	.word	0x20000314
    7f0c:	2000030c 	.word	0x2000030c
    7f10:	2000031c 	.word	0x2000031c
    7f14:	00008b85 	.word	0x00008b85
    7f18:	20000300 	.word	0x20000300
    7f1c:	00007aa9 	.word	0x00007aa9
    7f20:	00007e4d 	.word	0x00007e4d
    7f24:	20000313 	.word	0x20000313

00007f28 <sd_mmc_spi_start_read_block>:
{
    7f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f2a:	b083      	sub	sp, #12
	token = 0;
    7f2c:	2200      	movs	r2, #0
    7f2e:	466b      	mov	r3, sp
    7f30:	71da      	strb	r2, [r3, #7]
    7f32:	4c14      	ldr	r4, [pc, #80]	; (7f84 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    7f34:	466b      	mov	r3, sp
    7f36:	1ddd      	adds	r5, r3, #7
    7f38:	4e13      	ldr	r6, [pc, #76]	; (7f88 <sd_mmc_spi_start_read_block+0x60>)
    7f3a:	4f14      	ldr	r7, [pc, #80]	; (7f8c <sd_mmc_spi_start_read_block+0x64>)
    7f3c:	23ff      	movs	r3, #255	; 0xff
    7f3e:	2201      	movs	r2, #1
    7f40:	0029      	movs	r1, r5
    7f42:	0030      	movs	r0, r6
    7f44:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    7f46:	782b      	ldrb	r3, [r5, #0]
    7f48:	220f      	movs	r2, #15
    7f4a:	0019      	movs	r1, r3
    7f4c:	4391      	bics	r1, r2
    7f4e:	1e0a      	subs	r2, r1, #0
    7f50:	d009      	beq.n	7f66 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    7f52:	2bfe      	cmp	r3, #254	; 0xfe
    7f54:	d013      	beq.n	7f7e <sd_mmc_spi_start_read_block+0x56>
    7f56:	3c01      	subs	r4, #1
		if (i-- == 0) {
    7f58:	2c00      	cmp	r4, #0
    7f5a:	d1ef      	bne.n	7f3c <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    7f5c:	2204      	movs	r2, #4
    7f5e:	4b0c      	ldr	r3, [pc, #48]	; (7f90 <sd_mmc_spi_start_read_block+0x68>)
    7f60:	701a      	strb	r2, [r3, #0]
			return false;
    7f62:	2000      	movs	r0, #0
    7f64:	e00c      	b.n	7f80 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    7f66:	075b      	lsls	r3, r3, #29
    7f68:	d004      	beq.n	7f74 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    7f6a:	3207      	adds	r2, #7
    7f6c:	4b08      	ldr	r3, [pc, #32]	; (7f90 <sd_mmc_spi_start_read_block+0x68>)
    7f6e:	701a      	strb	r2, [r3, #0]
			return false;
    7f70:	2000      	movs	r0, #0
    7f72:	e005      	b.n	7f80 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    7f74:	220b      	movs	r2, #11
    7f76:	4b06      	ldr	r3, [pc, #24]	; (7f90 <sd_mmc_spi_start_read_block+0x68>)
    7f78:	701a      	strb	r2, [r3, #0]
			return false;
    7f7a:	2000      	movs	r0, #0
    7f7c:	e000      	b.n	7f80 <sd_mmc_spi_start_read_block+0x58>
	return true;
    7f7e:	2001      	movs	r0, #1
}
    7f80:	b003      	add	sp, #12
    7f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f84:	0007a120 	.word	0x0007a120
    7f88:	20000300 	.word	0x20000300
    7f8c:	0000789d 	.word	0x0000789d
    7f90:	20000313 	.word	0x20000313

00007f94 <sd_mmc_spi_stop_write_block>:
{
    7f94:	b530      	push	{r4, r5, lr}
    7f96:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    7f98:	a901      	add	r1, sp, #4
    7f9a:	2301      	movs	r3, #1
    7f9c:	425b      	negs	r3, r3
    7f9e:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    7fa0:	4d14      	ldr	r5, [pc, #80]	; (7ff4 <sd_mmc_spi_stop_write_block+0x60>)
    7fa2:	2202      	movs	r2, #2
    7fa4:	0028      	movs	r0, r5
    7fa6:	4b14      	ldr	r3, [pc, #80]	; (7ff8 <sd_mmc_spi_stop_write_block+0x64>)
    7fa8:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    7faa:	466b      	mov	r3, sp
    7fac:	1ddc      	adds	r4, r3, #7
    7fae:	23ff      	movs	r3, #255	; 0xff
    7fb0:	2201      	movs	r2, #1
    7fb2:	0021      	movs	r1, r4
    7fb4:	0028      	movs	r0, r5
    7fb6:	4d11      	ldr	r5, [pc, #68]	; (7ffc <sd_mmc_spi_stop_write_block+0x68>)
    7fb8:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    7fba:	7822      	ldrb	r2, [r4, #0]
    7fbc:	2311      	movs	r3, #17
    7fbe:	4013      	ands	r3, r2
    7fc0:	2b01      	cmp	r3, #1
    7fc2:	d005      	beq.n	7fd0 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    7fc4:	2201      	movs	r2, #1
    7fc6:	4b0e      	ldr	r3, [pc, #56]	; (8000 <sd_mmc_spi_stop_write_block+0x6c>)
    7fc8:	701a      	strb	r2, [r3, #0]
		return false;
    7fca:	2000      	movs	r0, #0
}
    7fcc:	b003      	add	sp, #12
    7fce:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    7fd0:	231e      	movs	r3, #30
    7fd2:	401a      	ands	r2, r3
    7fd4:	2a04      	cmp	r2, #4
    7fd6:	d00b      	beq.n	7ff0 <sd_mmc_spi_stop_write_block+0x5c>
    7fd8:	2a0a      	cmp	r2, #10
    7fda:	d104      	bne.n	7fe6 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    7fdc:	3a02      	subs	r2, #2
    7fde:	4b08      	ldr	r3, [pc, #32]	; (8000 <sd_mmc_spi_stop_write_block+0x6c>)
    7fe0:	701a      	strb	r2, [r3, #0]
		return false;
    7fe2:	2000      	movs	r0, #0
    7fe4:	e7f2      	b.n	7fcc <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    7fe6:	220a      	movs	r2, #10
    7fe8:	4b05      	ldr	r3, [pc, #20]	; (8000 <sd_mmc_spi_stop_write_block+0x6c>)
    7fea:	701a      	strb	r2, [r3, #0]
		return false;
    7fec:	2000      	movs	r0, #0
    7fee:	e7ed      	b.n	7fcc <sd_mmc_spi_stop_write_block+0x38>
	return true;
    7ff0:	2001      	movs	r0, #1
    7ff2:	e7eb      	b.n	7fcc <sd_mmc_spi_stop_write_block+0x38>
    7ff4:	20000300 	.word	0x20000300
    7ff8:	00007aa9 	.word	0x00007aa9
    7ffc:	0000789d 	.word	0x0000789d
    8000:	20000313 	.word	0x20000313

00008004 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    8004:	b570      	push	{r4, r5, r6, lr}
    8006:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8008:	2500      	movs	r5, #0
    800a:	4b2c      	ldr	r3, [pc, #176]	; (80bc <sd_mmc_spi_init+0xb8>)
    800c:	701d      	strb	r5, [r3, #0]
	config->direction  = PORT_PIN_DIR_INPUT;
    800e:	a90f      	add	r1, sp, #60	; 0x3c
    8010:	700d      	strb	r5, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8012:	2601      	movs	r6, #1
    8014:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    8016:	708d      	strb	r5, [r1, #2]
	port_get_config_defaults(&pin_conf);

	// Set card detect pin as inputs
	pin_conf.direction	= PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
    8018:	2025      	movs	r0, #37	; 0x25
    801a:	4b29      	ldr	r3, [pc, #164]	; (80c0 <sd_mmc_spi_init+0xbc>)
    801c:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    801e:	ac01      	add	r4, sp, #4
    8020:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8022:	9502      	str	r5, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8024:	9503      	str	r5, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    8026:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    8028:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    802a:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    802c:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    802e:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    8030:	2324      	movs	r3, #36	; 0x24
    8032:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    8034:	220c      	movs	r2, #12
    8036:	2100      	movs	r1, #0
    8038:	a807      	add	r0, sp, #28
    803a:	4b22      	ldr	r3, [pc, #136]	; (80c4 <sd_mmc_spi_init+0xc0>)
    803c:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    803e:	2380      	movs	r3, #128	; 0x80
    8040:	025b      	lsls	r3, r3, #9
    8042:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    8044:	4b20      	ldr	r3, [pc, #128]	; (80c8 <sd_mmc_spi_init+0xc4>)
    8046:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    8048:	4b20      	ldr	r3, [pc, #128]	; (80cc <sd_mmc_spi_init+0xc8>)
    804a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    804c:	4b20      	ldr	r3, [pc, #128]	; (80d0 <sd_mmc_spi_init+0xcc>)
    804e:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    8050:	4b20      	ldr	r3, [pc, #128]	; (80d4 <sd_mmc_spi_init+0xd0>)
    8052:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    8054:	4b20      	ldr	r3, [pc, #128]	; (80d8 <sd_mmc_spi_init+0xd4>)
    8056:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    8058:	4d20      	ldr	r5, [pc, #128]	; (80dc <sd_mmc_spi_init+0xd8>)
    805a:	0022      	movs	r2, r4
    805c:	4920      	ldr	r1, [pc, #128]	; (80e0 <sd_mmc_spi_init+0xdc>)
    805e:	0028      	movs	r0, r5
    8060:	4b20      	ldr	r3, [pc, #128]	; (80e4 <sd_mmc_spi_init+0xe0>)
    8062:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    8064:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8066:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8068:	2b00      	cmp	r3, #0
    806a:	d1fc      	bne.n	8066 <sd_mmc_spi_init+0x62>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    806c:	6813      	ldr	r3, [r2, #0]
    806e:	2102      	movs	r1, #2
    8070:	430b      	orrs	r3, r1
    8072:	6013      	str	r3, [r2, #0]
	config->address_enabled = false;
    8074:	4a1c      	ldr	r2, [pc, #112]	; (80e8 <sd_mmc_spi_init+0xe4>)
    8076:	2300      	movs	r3, #0
    8078:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    807a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    807c:	491b      	ldr	r1, [pc, #108]	; (80ec <sd_mmc_spi_init+0xe8>)
    807e:	7808      	ldrb	r0, [r1, #0]
    8080:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    8082:	4c1b      	ldr	r4, [pc, #108]	; (80f0 <sd_mmc_spi_init+0xec>)
    8084:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    8086:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8088:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    808a:	2201      	movs	r2, #1
    808c:	4669      	mov	r1, sp
    808e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    8090:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8092:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8094:	4b0a      	ldr	r3, [pc, #40]	; (80c0 <sd_mmc_spi_init+0xbc>)
    8096:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8098:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    809a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    809c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    809e:	2900      	cmp	r1, #0
    80a0:	d104      	bne.n	80ac <sd_mmc_spi_init+0xa8>
		return &(ports[port_index]->Group[group_index]);
    80a2:	0953      	lsrs	r3, r2, #5
    80a4:	01db      	lsls	r3, r3, #7
    80a6:	4913      	ldr	r1, [pc, #76]	; (80f4 <sd_mmc_spi_init+0xf0>)
    80a8:	468c      	mov	ip, r1
    80aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    80ac:	211f      	movs	r1, #31
    80ae:	4011      	ands	r1, r2
    80b0:	2201      	movs	r2, #1
    80b2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    80b4:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    80b6:	b010      	add	sp, #64	; 0x40
    80b8:	bd70      	pop	{r4, r5, r6, pc}
    80ba:	46c0      	nop			; (mov r8, r8)
    80bc:	20000313 	.word	0x20000313
    80c0:	000086ad 	.word	0x000086ad
    80c4:	00009173 	.word	0x00009173
    80c8:	00040003 	.word	0x00040003
    80cc:	00050003 	.word	0x00050003
    80d0:	00060003 	.word	0x00060003
    80d4:	00070003 	.word	0x00070003
    80d8:	00061a80 	.word	0x00061a80
    80dc:	20000300 	.word	0x20000300
    80e0:	42000800 	.word	0x42000800
    80e4:	00007569 	.word	0x00007569
    80e8:	20000320 	.word	0x20000320
    80ec:	20000124 	.word	0x20000124
    80f0:	20000310 	.word	0x20000310
    80f4:	41004400 	.word	0x41004400

000080f8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    80f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80fa:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    80fc:	2200      	movs	r2, #0
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <sd_mmc_spi_select_device+0x3c>)
    8100:	701a      	strb	r2, [r3, #0]
    8102:	000c      	movs	r4, r1
    8104:	4b0c      	ldr	r3, [pc, #48]	; (8138 <sd_mmc_spi_select_device+0x40>)
    8106:	4299      	cmp	r1, r3
    8108:	d900      	bls.n	810c <sd_mmc_spi_select_device+0x14>
    810a:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    810c:	4d0b      	ldr	r5, [pc, #44]	; (813c <sd_mmc_spi_select_device+0x44>)
    810e:	4e0c      	ldr	r6, [pc, #48]	; (8140 <sd_mmc_spi_select_device+0x48>)
    8110:	e001      	b.n	8116 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    8112:	08e3      	lsrs	r3, r4, #3
    8114:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    8116:	0021      	movs	r1, r4
    8118:	0028      	movs	r0, r5
    811a:	47b0      	blx	r6
    811c:	2817      	cmp	r0, #23
    811e:	d0f8      	beq.n	8112 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    8120:	0079      	lsls	r1, r7, #1
    8122:	19cf      	adds	r7, r1, r7
    8124:	4907      	ldr	r1, [pc, #28]	; (8144 <sd_mmc_spi_select_device+0x4c>)
    8126:	19c9      	adds	r1, r1, r7
    8128:	2201      	movs	r2, #1
    812a:	4804      	ldr	r0, [pc, #16]	; (813c <sd_mmc_spi_select_device+0x44>)
    812c:	4b06      	ldr	r3, [pc, #24]	; (8148 <sd_mmc_spi_select_device+0x50>)
    812e:	4798      	blx	r3
}
    8130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8132:	46c0      	nop			; (mov r8, r8)
    8134:	20000313 	.word	0x20000313
    8138:	003d0900 	.word	0x003d0900
    813c:	20000300 	.word	0x20000300
    8140:	000074e5 	.word	0x000074e5
    8144:	20000310 	.word	0x20000310
    8148:	000079b5 	.word	0x000079b5

0000814c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    814c:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    814e:	2200      	movs	r2, #0
    8150:	4b04      	ldr	r3, [pc, #16]	; (8164 <sd_mmc_spi_deselect_device+0x18>)
    8152:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    8154:	0041      	lsls	r1, r0, #1
    8156:	1808      	adds	r0, r1, r0
    8158:	4903      	ldr	r1, [pc, #12]	; (8168 <sd_mmc_spi_deselect_device+0x1c>)
    815a:	1809      	adds	r1, r1, r0
    815c:	4803      	ldr	r0, [pc, #12]	; (816c <sd_mmc_spi_deselect_device+0x20>)
    815e:	4b04      	ldr	r3, [pc, #16]	; (8170 <sd_mmc_spi_deselect_device+0x24>)
    8160:	4798      	blx	r3
}
    8162:	bd10      	pop	{r4, pc}
    8164:	20000313 	.word	0x20000313
    8168:	20000310 	.word	0x20000310
    816c:	20000300 	.word	0x20000300
    8170:	000079b5 	.word	0x000079b5

00008174 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    8174:	b570      	push	{r4, r5, r6, lr}
    8176:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    8178:	22ff      	movs	r2, #255	; 0xff
    817a:	466b      	mov	r3, sp
    817c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    817e:	2200      	movs	r2, #0
    8180:	4b07      	ldr	r3, [pc, #28]	; (81a0 <sd_mmc_spi_send_clock+0x2c>)
    8182:	701a      	strb	r2, [r3, #0]
    8184:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    8186:	4e07      	ldr	r6, [pc, #28]	; (81a4 <sd_mmc_spi_send_clock+0x30>)
    8188:	4d07      	ldr	r5, [pc, #28]	; (81a8 <sd_mmc_spi_send_clock+0x34>)
    818a:	2201      	movs	r2, #1
    818c:	466b      	mov	r3, sp
    818e:	1dd9      	adds	r1, r3, #7
    8190:	0030      	movs	r0, r6
    8192:	47a8      	blx	r5
    8194:	3c01      	subs	r4, #1
    8196:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    8198:	2c00      	cmp	r4, #0
    819a:	d1f6      	bne.n	818a <sd_mmc_spi_send_clock+0x16>
	}
}
    819c:	b002      	add	sp, #8
    819e:	bd70      	pop	{r4, r5, r6, pc}
    81a0:	20000313 	.word	0x20000313
    81a4:	20000300 	.word	0x20000300
    81a8:	00007aa9 	.word	0x00007aa9

000081ac <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    81ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    81ae:	46c6      	mov	lr, r8
    81b0:	b500      	push	{lr}
    81b2:	b086      	sub	sp, #24
    81b4:	4680      	mov	r8, r0
    81b6:	9200      	str	r2, [sp, #0]
    81b8:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    81ba:	22ff      	movs	r2, #255	; 0xff
    81bc:	230f      	movs	r3, #15
    81be:	a802      	add	r0, sp, #8
    81c0:	4684      	mov	ip, r0
    81c2:	4463      	add	r3, ip
    81c4:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    81c6:	2200      	movs	r2, #0
    81c8:	4b53      	ldr	r3, [pc, #332]	; (8318 <sd_mmc_spi_adtc_start+0x16c>)
    81ca:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    81cc:	ab04      	add	r3, sp, #16
    81ce:	323f      	adds	r2, #63	; 0x3f
    81d0:	4640      	mov	r0, r8
    81d2:	4002      	ands	r2, r0
    81d4:	2040      	movs	r0, #64	; 0x40
    81d6:	4302      	orrs	r2, r0
    81d8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    81da:	0e0a      	lsrs	r2, r1, #24
    81dc:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    81de:	0c0a      	lsrs	r2, r1, #16
    81e0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    81e2:	0a0a      	lsrs	r2, r1, #8
    81e4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    81e6:	7119      	strb	r1, [r3, #4]
    81e8:	2700      	movs	r7, #0
	crc = 0;
    81ea:	2300      	movs	r3, #0
		value = *buf++;
    81ec:	a904      	add	r1, sp, #16
    81ee:	2208      	movs	r2, #8
				crc ^= 0x09;
    81f0:	2409      	movs	r4, #9
    81f2:	e011      	b.n	8218 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    81f4:	0076      	lsls	r6, r6, #1
    81f6:	b2f6      	uxtb	r6, r6
    81f8:	3801      	subs	r0, #1
    81fa:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    81fc:	2800      	cmp	r0, #0
    81fe:	d008      	beq.n	8212 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    8200:	005b      	lsls	r3, r3, #1
    8202:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    8204:	001d      	movs	r5, r3
    8206:	4075      	eors	r5, r6
    8208:	062d      	lsls	r5, r5, #24
    820a:	d5f3      	bpl.n	81f4 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    820c:	4063      	eors	r3, r4
    820e:	b2db      	uxtb	r3, r3
    8210:	e7f0      	b.n	81f4 <sd_mmc_spi_adtc_start+0x48>
    8212:	3701      	adds	r7, #1
	while (size--) {
    8214:	2f05      	cmp	r7, #5
    8216:	d002      	beq.n	821e <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    8218:	5c7e      	ldrb	r6, [r7, r1]
    821a:	0010      	movs	r0, r2
    821c:	e7f0      	b.n	8200 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    821e:	005b      	lsls	r3, r3, #1
    8220:	2201      	movs	r2, #1
    8222:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    8224:	ac04      	add	r4, sp, #16
    8226:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    8228:	4e3c      	ldr	r6, [pc, #240]	; (831c <sd_mmc_spi_adtc_start+0x170>)
    822a:	2201      	movs	r2, #1
    822c:	210f      	movs	r1, #15
    822e:	ab02      	add	r3, sp, #8
    8230:	469c      	mov	ip, r3
    8232:	4461      	add	r1, ip
    8234:	0030      	movs	r0, r6
    8236:	4f3a      	ldr	r7, [pc, #232]	; (8320 <sd_mmc_spi_adtc_start+0x174>)
    8238:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    823a:	2206      	movs	r2, #6
    823c:	0021      	movs	r1, r4
    823e:	0030      	movs	r0, r6
    8240:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    8242:	ab02      	add	r3, sp, #8
    8244:	1dd9      	adds	r1, r3, #7
    8246:	23ff      	movs	r3, #255	; 0xff
    8248:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    824a:	2201      	movs	r2, #1
    824c:	0030      	movs	r0, r6
    824e:	4e35      	ldr	r6, [pc, #212]	; (8324 <sd_mmc_spi_adtc_start+0x178>)
    8250:	47b0      	blx	r6
    8252:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    8254:	ab02      	add	r3, sp, #8
    8256:	1dde      	adds	r6, r3, #7
    8258:	4f30      	ldr	r7, [pc, #192]	; (831c <sd_mmc_spi_adtc_start+0x170>)
    825a:	4d32      	ldr	r5, [pc, #200]	; (8324 <sd_mmc_spi_adtc_start+0x178>)
    825c:	23ff      	movs	r3, #255	; 0xff
    825e:	2201      	movs	r2, #1
    8260:	0031      	movs	r1, r6
    8262:	0038      	movs	r0, r7
    8264:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    8266:	7833      	ldrb	r3, [r6, #0]
    8268:	b25a      	sxtb	r2, r3
    826a:	2a00      	cmp	r2, #0
    826c:	da0b      	bge.n	8286 <sd_mmc_spi_adtc_start+0xda>
    826e:	3c01      	subs	r4, #1
    8270:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    8272:	2c00      	cmp	r4, #0
    8274:	d1f2      	bne.n	825c <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    8276:	2202      	movs	r2, #2
    8278:	4b27      	ldr	r3, [pc, #156]	; (8318 <sd_mmc_spi_adtc_start+0x16c>)
    827a:	701a      	strb	r2, [r3, #0]
			return false;
    827c:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    827e:	b006      	add	sp, #24
    8280:	bc04      	pop	{r2}
    8282:	4690      	mov	r8, r2
    8284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    8286:	4a28      	ldr	r2, [pc, #160]	; (8328 <sd_mmc_spi_adtc_start+0x17c>)
    8288:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    828a:	071a      	lsls	r2, r3, #28
    828c:	d41a      	bmi.n	82c4 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    828e:	075a      	lsls	r2, r3, #29
    8290:	d41d      	bmi.n	82ce <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    8292:	2201      	movs	r2, #1
    8294:	4393      	bics	r3, r2
    8296:	d11f      	bne.n	82d8 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    8298:	4643      	mov	r3, r8
    829a:	049b      	lsls	r3, r3, #18
    829c:	d420      	bmi.n	82e0 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    829e:	4643      	mov	r3, r8
    82a0:	059b      	lsls	r3, r3, #22
    82a2:	d425      	bmi.n	82f0 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    82a4:	4643      	mov	r3, r8
    82a6:	055b      	lsls	r3, r3, #21
    82a8:	d42b      	bmi.n	8302 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    82aa:	4b20      	ldr	r3, [pc, #128]	; (832c <sd_mmc_spi_adtc_start+0x180>)
    82ac:	466a      	mov	r2, sp
    82ae:	8812      	ldrh	r2, [r2, #0]
    82b0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    82b2:	4b1f      	ldr	r3, [pc, #124]	; (8330 <sd_mmc_spi_adtc_start+0x184>)
    82b4:	466a      	mov	r2, sp
    82b6:	8892      	ldrh	r2, [r2, #4]
    82b8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    82ba:	2200      	movs	r2, #0
    82bc:	4b1d      	ldr	r3, [pc, #116]	; (8334 <sd_mmc_spi_adtc_start+0x188>)
    82be:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    82c0:	2001      	movs	r0, #1
    82c2:	e7dc      	b.n	827e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    82c4:	2206      	movs	r2, #6
    82c6:	4b14      	ldr	r3, [pc, #80]	; (8318 <sd_mmc_spi_adtc_start+0x16c>)
    82c8:	701a      	strb	r2, [r3, #0]
		return false;
    82ca:	2000      	movs	r0, #0
    82cc:	e7d7      	b.n	827e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    82ce:	2209      	movs	r2, #9
    82d0:	4b11      	ldr	r3, [pc, #68]	; (8318 <sd_mmc_spi_adtc_start+0x16c>)
    82d2:	701a      	strb	r2, [r3, #0]
		return false;
    82d4:	2000      	movs	r0, #0
    82d6:	e7d2      	b.n	827e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    82d8:	4b0f      	ldr	r3, [pc, #60]	; (8318 <sd_mmc_spi_adtc_start+0x16c>)
    82da:	701a      	strb	r2, [r3, #0]
		return false;
    82dc:	2000      	movs	r0, #0
    82de:	e7ce      	b.n	827e <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    82e0:	4b15      	ldr	r3, [pc, #84]	; (8338 <sd_mmc_spi_adtc_start+0x18c>)
    82e2:	4798      	blx	r3
    82e4:	2800      	cmp	r0, #0
    82e6:	d1da      	bne.n	829e <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    82e8:	2203      	movs	r2, #3
    82ea:	4b0b      	ldr	r3, [pc, #44]	; (8318 <sd_mmc_spi_adtc_start+0x16c>)
    82ec:	701a      	strb	r2, [r3, #0]
			return false;
    82ee:	e7c6      	b.n	827e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    82f0:	490d      	ldr	r1, [pc, #52]	; (8328 <sd_mmc_spi_adtc_start+0x17c>)
    82f2:	2300      	movs	r3, #0
    82f4:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    82f6:	33ff      	adds	r3, #255	; 0xff
    82f8:	2201      	movs	r2, #1
    82fa:	4808      	ldr	r0, [pc, #32]	; (831c <sd_mmc_spi_adtc_start+0x170>)
    82fc:	4e09      	ldr	r6, [pc, #36]	; (8324 <sd_mmc_spi_adtc_start+0x178>)
    82fe:	47b0      	blx	r6
    8300:	e7d0      	b.n	82a4 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    8302:	4e09      	ldr	r6, [pc, #36]	; (8328 <sd_mmc_spi_adtc_start+0x17c>)
    8304:	23ff      	movs	r3, #255	; 0xff
    8306:	2204      	movs	r2, #4
    8308:	0031      	movs	r1, r6
    830a:	4804      	ldr	r0, [pc, #16]	; (831c <sd_mmc_spi_adtc_start+0x170>)
    830c:	4f05      	ldr	r7, [pc, #20]	; (8324 <sd_mmc_spi_adtc_start+0x178>)
    830e:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    8310:	6833      	ldr	r3, [r6, #0]
    8312:	ba1b      	rev	r3, r3
    8314:	6033      	str	r3, [r6, #0]
    8316:	e7c8      	b.n	82aa <sd_mmc_spi_adtc_start+0xfe>
    8318:	20000313 	.word	0x20000313
    831c:	20000300 	.word	0x20000300
    8320:	00007aa9 	.word	0x00007aa9
    8324:	0000789d 	.word	0x0000789d
    8328:	20000318 	.word	0x20000318
    832c:	2000030c 	.word	0x2000030c
    8330:	20000314 	.word	0x20000314
    8334:	2000031c 	.word	0x2000031c
    8338:	00007e4d 	.word	0x00007e4d

0000833c <sd_mmc_spi_send_cmd>:
{
    833c:	b510      	push	{r4, lr}
    833e:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    8340:	2300      	movs	r3, #0
    8342:	9300      	str	r3, [sp, #0]
    8344:	2200      	movs	r2, #0
    8346:	4c02      	ldr	r4, [pc, #8]	; (8350 <sd_mmc_spi_send_cmd+0x14>)
    8348:	47a0      	blx	r4
}
    834a:	b002      	add	sp, #8
    834c:	bd10      	pop	{r4, pc}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	000081ad 	.word	0x000081ad

00008354 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    8354:	4b01      	ldr	r3, [pc, #4]	; (835c <sd_mmc_spi_get_response+0x8>)
    8356:	6818      	ldr	r0, [r3, #0]
}
    8358:	4770      	bx	lr
    835a:	46c0      	nop			; (mov r8, r8)
    835c:	20000318 	.word	0x20000318

00008360 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    8360:	b510      	push	{r4, lr}
    8362:	b084      	sub	sp, #16
    8364:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8366:	2200      	movs	r2, #0
    8368:	4b14      	ldr	r3, [pc, #80]	; (83bc <sd_mmc_spi_read_word+0x5c>)
    836a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    836c:	4b14      	ldr	r3, [pc, #80]	; (83c0 <sd_mmc_spi_read_word+0x60>)
    836e:	8819      	ldrh	r1, [r3, #0]
    8370:	4b14      	ldr	r3, [pc, #80]	; (83c4 <sd_mmc_spi_read_word+0x64>)
    8372:	6818      	ldr	r0, [r3, #0]
    8374:	4b14      	ldr	r3, [pc, #80]	; (83c8 <sd_mmc_spi_read_word+0x68>)
    8376:	4798      	blx	r3
    8378:	2900      	cmp	r1, #0
    837a:	d103      	bne.n	8384 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    837c:	4b13      	ldr	r3, [pc, #76]	; (83cc <sd_mmc_spi_read_word+0x6c>)
    837e:	4798      	blx	r3
    8380:	2800      	cmp	r0, #0
    8382:	d010      	beq.n	83a6 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    8384:	23ff      	movs	r3, #255	; 0xff
    8386:	2204      	movs	r2, #4
    8388:	a901      	add	r1, sp, #4
    838a:	4811      	ldr	r0, [pc, #68]	; (83d0 <sd_mmc_spi_read_word+0x70>)
    838c:	4c11      	ldr	r4, [pc, #68]	; (83d4 <sd_mmc_spi_read_word+0x74>)
    838e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    8390:	4b0c      	ldr	r3, [pc, #48]	; (83c4 <sd_mmc_spi_read_word+0x64>)
    8392:	681a      	ldr	r2, [r3, #0]
    8394:	1d10      	adds	r0, r2, #4
    8396:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8398:	4b09      	ldr	r3, [pc, #36]	; (83c0 <sd_mmc_spi_read_word+0x60>)
    839a:	8819      	ldrh	r1, [r3, #0]
    839c:	4b0a      	ldr	r3, [pc, #40]	; (83c8 <sd_mmc_spi_read_word+0x68>)
    839e:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    83a0:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    83a2:	2900      	cmp	r1, #0
    83a4:	d001      	beq.n	83aa <sd_mmc_spi_read_word+0x4a>
}
    83a6:	b004      	add	sp, #16
    83a8:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    83aa:	23ff      	movs	r3, #255	; 0xff
    83ac:	2202      	movs	r2, #2
    83ae:	a903      	add	r1, sp, #12
    83b0:	4807      	ldr	r0, [pc, #28]	; (83d0 <sd_mmc_spi_read_word+0x70>)
    83b2:	4c08      	ldr	r4, [pc, #32]	; (83d4 <sd_mmc_spi_read_word+0x74>)
    83b4:	47a0      	blx	r4
	return true;
    83b6:	2001      	movs	r0, #1
    83b8:	e7f5      	b.n	83a6 <sd_mmc_spi_read_word+0x46>
    83ba:	46c0      	nop			; (mov r8, r8)
    83bc:	20000313 	.word	0x20000313
    83c0:	2000030c 	.word	0x2000030c
    83c4:	2000031c 	.word	0x2000031c
    83c8:	00008c91 	.word	0x00008c91
    83cc:	00007f29 	.word	0x00007f29
    83d0:	20000300 	.word	0x20000300
    83d4:	0000789d 	.word	0x0000789d

000083d8 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    83d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    83da:	46de      	mov	lr, fp
    83dc:	4657      	mov	r7, sl
    83de:	4646      	mov	r6, r8
    83e0:	b5c0      	push	{r6, r7, lr}
    83e2:	b082      	sub	sp, #8
    83e4:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    83e6:	2200      	movs	r2, #0
    83e8:	4b17      	ldr	r3, [pc, #92]	; (8448 <sd_mmc_spi_start_read_blocks+0x70>)
    83ea:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    83ec:	1e4c      	subs	r4, r1, #1
    83ee:	b2a4      	uxth	r4, r4
    83f0:	2900      	cmp	r1, #0
    83f2:	d026      	beq.n	8442 <sd_mmc_spi_start_read_blocks+0x6a>
    83f4:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    83f6:	4b15      	ldr	r3, [pc, #84]	; (844c <sd_mmc_spi_start_read_blocks+0x74>)
    83f8:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    83fa:	4f15      	ldr	r7, [pc, #84]	; (8450 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    83fc:	47d0      	blx	sl
    83fe:	4680      	mov	r8, r0
    8400:	2800      	cmp	r0, #0
    8402:	d017      	beq.n	8434 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    8404:	883a      	ldrh	r2, [r7, #0]
    8406:	465b      	mov	r3, fp
    8408:	1999      	adds	r1, r3, r6
    840a:	23ff      	movs	r3, #255	; 0xff
    840c:	4811      	ldr	r0, [pc, #68]	; (8454 <sd_mmc_spi_start_read_blocks+0x7c>)
    840e:	4d12      	ldr	r5, [pc, #72]	; (8458 <sd_mmc_spi_start_read_blocks+0x80>)
    8410:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    8412:	883b      	ldrh	r3, [r7, #0]
    8414:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    8416:	4a11      	ldr	r2, [pc, #68]	; (845c <sd_mmc_spi_start_read_blocks+0x84>)
    8418:	6811      	ldr	r1, [r2, #0]
    841a:	468c      	mov	ip, r1
    841c:	4463      	add	r3, ip
    841e:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8420:	23ff      	movs	r3, #255	; 0xff
    8422:	2202      	movs	r2, #2
    8424:	a901      	add	r1, sp, #4
    8426:	480b      	ldr	r0, [pc, #44]	; (8454 <sd_mmc_spi_start_read_blocks+0x7c>)
    8428:	47a8      	blx	r5
	while (nb_block--) {
    842a:	3c01      	subs	r4, #1
    842c:	b2a4      	uxth	r4, r4
    842e:	4b0c      	ldr	r3, [pc, #48]	; (8460 <sd_mmc_spi_start_read_blocks+0x88>)
    8430:	429c      	cmp	r4, r3
    8432:	d1e3      	bne.n	83fc <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    8434:	4640      	mov	r0, r8
    8436:	b002      	add	sp, #8
    8438:	bc1c      	pop	{r2, r3, r4}
    843a:	4690      	mov	r8, r2
    843c:	469a      	mov	sl, r3
    843e:	46a3      	mov	fp, r4
    8440:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    8442:	2301      	movs	r3, #1
    8444:	4698      	mov	r8, r3
    8446:	e7f5      	b.n	8434 <sd_mmc_spi_start_read_blocks+0x5c>
    8448:	20000313 	.word	0x20000313
    844c:	00007f29 	.word	0x00007f29
    8450:	2000030c 	.word	0x2000030c
    8454:	20000300 	.word	0x20000300
    8458:	0000789d 	.word	0x0000789d
    845c:	2000031c 	.word	0x2000031c
    8460:	0000ffff 	.word	0x0000ffff

00008464 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    8464:	2001      	movs	r0, #1
    8466:	4770      	bx	lr

00008468 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    8468:	b5f0      	push	{r4, r5, r6, r7, lr}
    846a:	46c6      	mov	lr, r8
    846c:	b500      	push	{lr}
    846e:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8470:	2200      	movs	r2, #0
    8472:	4b15      	ldr	r3, [pc, #84]	; (84c8 <sd_mmc_spi_start_write_blocks+0x60>)
    8474:	701a      	strb	r2, [r3, #0]
	pos = 0;
    8476:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    8478:	4f14      	ldr	r7, [pc, #80]	; (84cc <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    847a:	4e15      	ldr	r6, [pc, #84]	; (84d0 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    847c:	e000      	b.n	8480 <sd_mmc_spi_start_write_blocks+0x18>
{
    847e:	0021      	movs	r1, r4
	while (nb_block--) {
    8480:	1e4c      	subs	r4, r1, #1
    8482:	b2a4      	uxth	r4, r4
    8484:	2900      	cmp	r1, #0
    8486:	d01b      	beq.n	84c0 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    8488:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    848a:	8832      	ldrh	r2, [r6, #0]
    848c:	4643      	mov	r3, r8
    848e:	1959      	adds	r1, r3, r5
    8490:	4810      	ldr	r0, [pc, #64]	; (84d4 <sd_mmc_spi_start_write_blocks+0x6c>)
    8492:	4b11      	ldr	r3, [pc, #68]	; (84d8 <sd_mmc_spi_start_write_blocks+0x70>)
    8494:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    8496:	8833      	ldrh	r3, [r6, #0]
    8498:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    849a:	4a10      	ldr	r2, [pc, #64]	; (84dc <sd_mmc_spi_start_write_blocks+0x74>)
    849c:	6811      	ldr	r1, [r2, #0]
    849e:	468c      	mov	ip, r1
    84a0:	4463      	add	r3, ip
    84a2:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    84a4:	4b0e      	ldr	r3, [pc, #56]	; (84e0 <sd_mmc_spi_start_write_blocks+0x78>)
    84a6:	4798      	blx	r3
    84a8:	2800      	cmp	r0, #0
    84aa:	d00a      	beq.n	84c2 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    84ac:	2c00      	cmp	r4, #0
    84ae:	d0e6      	beq.n	847e <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    84b0:	4b0c      	ldr	r3, [pc, #48]	; (84e4 <sd_mmc_spi_start_write_blocks+0x7c>)
    84b2:	4798      	blx	r3
    84b4:	2800      	cmp	r0, #0
    84b6:	d1e2      	bne.n	847e <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    84b8:	2205      	movs	r2, #5
    84ba:	4b03      	ldr	r3, [pc, #12]	; (84c8 <sd_mmc_spi_start_write_blocks+0x60>)
    84bc:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    84be:	e000      	b.n	84c2 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    84c0:	2001      	movs	r0, #1
}
    84c2:	bc04      	pop	{r2}
    84c4:	4690      	mov	r8, r2
    84c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84c8:	20000313 	.word	0x20000313
    84cc:	00007e05 	.word	0x00007e05
    84d0:	2000030c 	.word	0x2000030c
    84d4:	20000300 	.word	0x20000300
    84d8:	00007aa9 	.word	0x00007aa9
    84dc:	2000031c 	.word	0x2000031c
    84e0:	00007f95 	.word	0x00007f95
    84e4:	00007e4d 	.word	0x00007e4d

000084e8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    84e8:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    84ea:	4b05      	ldr	r3, [pc, #20]	; (8500 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    84ec:	4798      	blx	r3
    84ee:	2800      	cmp	r0, #0
    84f0:	d103      	bne.n	84fa <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    84f2:	2205      	movs	r2, #5
    84f4:	4b03      	ldr	r3, [pc, #12]	; (8504 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    84f6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    84f8:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    84fa:	4b03      	ldr	r3, [pc, #12]	; (8508 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    84fc:	4798      	blx	r3
    84fe:	e7fb      	b.n	84f8 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    8500:	00007e4d 	.word	0x00007e4d
    8504:	20000313 	.word	0x20000313
    8508:	00007eb1 	.word	0x00007eb1

0000850c <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
    850c:	2001      	movs	r0, #1
    850e:	4770      	bx	lr

00008510 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    8510:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    8512:	2301      	movs	r3, #1
    8514:	2800      	cmp	r0, #0
    8516:	d001      	beq.n	851c <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8518:	0018      	movs	r0, r3
    851a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    851c:	4b01      	ldr	r3, [pc, #4]	; (8524 <mem_test_unit_ready+0x14>)
    851e:	4798      	blx	r3
    8520:	0003      	movs	r3, r0
    8522:	e7f9      	b.n	8518 <mem_test_unit_ready+0x8>
    8524:	00007d01 	.word	0x00007d01

00008528 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    8528:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    852a:	2301      	movs	r3, #1
    852c:	2800      	cmp	r0, #0
    852e:	d001      	beq.n	8534 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    8530:	0018      	movs	r0, r3
    8532:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    8534:	0008      	movs	r0, r1
    8536:	4b02      	ldr	r3, [pc, #8]	; (8540 <mem_read_capacity+0x18>)
    8538:	4798      	blx	r3
    853a:	0003      	movs	r3, r0
    853c:	e7f8      	b.n	8530 <mem_read_capacity+0x8>
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	00007d31 	.word	0x00007d31

00008544 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    8544:	4243      	negs	r3, r0
    8546:	4158      	adcs	r0, r3
    8548:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    854a:	4770      	bx	lr

0000854c <mem_unload>:


bool mem_unload(U8 lun, bool unload)
{
    854c:	0003      	movs	r3, r0

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
    854e:	2000      	movs	r0, #0
    8550:	2b00      	cmp	r3, #0
    8552:	d101      	bne.n	8558 <mem_unload+0xc>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
    8554:	3001      	adds	r0, #1
    8556:	4048      	eors	r0, r1
#endif

  Ctrl_access_unlock();

  return unloaded;
}
    8558:	4770      	bx	lr
	...

0000855c <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
    855c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    855e:	2301      	movs	r3, #1
    8560:	2800      	cmp	r0, #0
    8562:	d001      	beq.n	8568 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    8564:	0018      	movs	r0, r3
    8566:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8568:	4b01      	ldr	r3, [pc, #4]	; (8570 <mem_wr_protect+0x14>)
    856a:	4798      	blx	r3
    856c:	0003      	movs	r3, r0
    856e:	e7f9      	b.n	8564 <mem_wr_protect+0x8>
    8570:	00007d41 	.word	0x00007d41

00008574 <mem_removal>:


bool mem_removal(U8 lun)
{
    8574:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    8576:	2301      	movs	r3, #1
    8578:	2800      	cmp	r0, #0
    857a:	d001      	beq.n	8580 <mem_removal+0xc>
#endif

  Ctrl_access_unlock();

  return removal;
}
    857c:	0018      	movs	r0, r3
    857e:	bd10      	pop	{r4, pc}
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
    8580:	4b01      	ldr	r3, [pc, #4]	; (8588 <mem_removal+0x14>)
    8582:	4798      	blx	r3
    8584:	0003      	movs	r3, r0
    8586:	e7f9      	b.n	857c <mem_removal+0x8>
    8588:	00007d51 	.word	0x00007d51

0000858c <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
    858c:	2800      	cmp	r0, #0
    858e:	d101      	bne.n	8594 <mem_name+0x8>
    8590:	4801      	ldr	r0, [pc, #4]	; (8598 <mem_name+0xc>)
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
    8592:	4770      	bx	lr
       (lun < MAX_LUN) ? lun_desc[lun].name :
    8594:	2000      	movs	r0, #0
    8596:	e7fc      	b.n	8592 <mem_name+0x6>
    8598:	0000aa80 	.word	0x0000aa80

0000859c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    859e:	0005      	movs	r5, r0
    85a0:	000e      	movs	r6, r1
    85a2:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
    85a4:	4b07      	ldr	r3, [pc, #28]	; (85c4 <memory_2_ram+0x28>)
    85a6:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    85a8:	2401      	movs	r4, #1
    85aa:	2d00      	cmp	r5, #0
    85ac:	d003      	beq.n	85b6 <memory_2_ram+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
    85ae:	4b06      	ldr	r3, [pc, #24]	; (85c8 <memory_2_ram+0x2c>)
    85b0:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    85b2:	0020      	movs	r0, r4
    85b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    85b6:	0039      	movs	r1, r7
    85b8:	0030      	movs	r0, r6
    85ba:	4b04      	ldr	r3, [pc, #16]	; (85cc <memory_2_ram+0x30>)
    85bc:	4798      	blx	r3
    85be:	0004      	movs	r4, r0
    85c0:	e7f5      	b.n	85ae <memory_2_ram+0x12>
    85c2:	46c0      	nop			; (mov r8, r8)
    85c4:	000061e9 	.word	0x000061e9
    85c8:	000061eb 	.word	0x000061eb
    85cc:	00007d99 	.word	0x00007d99

000085d0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    85d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85d2:	0005      	movs	r5, r0
    85d4:	000e      	movs	r6, r1
    85d6:	0017      	movs	r7, r2
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
    85d8:	4b07      	ldr	r3, [pc, #28]	; (85f8 <ram_2_memory+0x28>)
    85da:	4798      	blx	r3
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    85dc:	2401      	movs	r4, #1
    85de:	2d00      	cmp	r5, #0
    85e0:	d003      	beq.n	85ea <ram_2_memory+0x1a>
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
    85e2:	4b06      	ldr	r3, [pc, #24]	; (85fc <ram_2_memory+0x2c>)
    85e4:	4798      	blx	r3

  Ctrl_access_unlock();

  return status;
}
    85e6:	0020      	movs	r0, r4
    85e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    85ea:	0039      	movs	r1, r7
    85ec:	0030      	movs	r0, r6
    85ee:	4b04      	ldr	r3, [pc, #16]	; (8600 <ram_2_memory+0x30>)
    85f0:	4798      	blx	r3
    85f2:	0004      	movs	r4, r0
    85f4:	e7f5      	b.n	85e2 <ram_2_memory+0x12>
    85f6:	46c0      	nop			; (mov r8, r8)
    85f8:	000061ed 	.word	0x000061ed
    85fc:	000061ef 	.word	0x000061ef
    8600:	00007df1 	.word	0x00007df1

00008604 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    8604:	4b0c      	ldr	r3, [pc, #48]	; (8638 <cpu_irq_enter_critical+0x34>)
    8606:	681b      	ldr	r3, [r3, #0]
    8608:	2b00      	cmp	r3, #0
    860a:	d106      	bne.n	861a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    860c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    8610:	2b00      	cmp	r3, #0
    8612:	d007      	beq.n	8624 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    8614:	2200      	movs	r2, #0
    8616:	4b09      	ldr	r3, [pc, #36]	; (863c <cpu_irq_enter_critical+0x38>)
    8618:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    861a:	4a07      	ldr	r2, [pc, #28]	; (8638 <cpu_irq_enter_critical+0x34>)
    861c:	6813      	ldr	r3, [r2, #0]
    861e:	3301      	adds	r3, #1
    8620:	6013      	str	r3, [r2, #0]
}
    8622:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    8624:	b672      	cpsid	i
    8626:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    862a:	2200      	movs	r2, #0
    862c:	4b04      	ldr	r3, [pc, #16]	; (8640 <cpu_irq_enter_critical+0x3c>)
    862e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8630:	3201      	adds	r2, #1
    8632:	4b02      	ldr	r3, [pc, #8]	; (863c <cpu_irq_enter_critical+0x38>)
    8634:	701a      	strb	r2, [r3, #0]
    8636:	e7f0      	b.n	861a <cpu_irq_enter_critical+0x16>
    8638:	20000324 	.word	0x20000324
    863c:	20000328 	.word	0x20000328
    8640:	20000125 	.word	0x20000125

00008644 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8644:	4b08      	ldr	r3, [pc, #32]	; (8668 <cpu_irq_leave_critical+0x24>)
    8646:	681a      	ldr	r2, [r3, #0]
    8648:	3a01      	subs	r2, #1
    864a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    864c:	681b      	ldr	r3, [r3, #0]
    864e:	2b00      	cmp	r3, #0
    8650:	d109      	bne.n	8666 <cpu_irq_leave_critical+0x22>
    8652:	4b06      	ldr	r3, [pc, #24]	; (866c <cpu_irq_leave_critical+0x28>)
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	2b00      	cmp	r3, #0
    8658:	d005      	beq.n	8666 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    865a:	2201      	movs	r2, #1
    865c:	4b04      	ldr	r3, [pc, #16]	; (8670 <cpu_irq_leave_critical+0x2c>)
    865e:	701a      	strb	r2, [r3, #0]
    8660:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8664:	b662      	cpsie	i
	}
}
    8666:	4770      	bx	lr
    8668:	20000324 	.word	0x20000324
    866c:	20000328 	.word	0x20000328
    8670:	20000125 	.word	0x20000125

00008674 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8674:	b5f0      	push	{r4, r5, r6, r7, lr}
    8676:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    8678:	ac01      	add	r4, sp, #4
    867a:	2501      	movs	r5, #1
    867c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    867e:	2700      	movs	r7, #0
    8680:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8682:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    8684:	0021      	movs	r1, r4
    8686:	203e      	movs	r0, #62	; 0x3e
    8688:	4e06      	ldr	r6, [pc, #24]	; (86a4 <system_board_init+0x30>)
    868a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    868c:	2280      	movs	r2, #128	; 0x80
    868e:	05d2      	lsls	r2, r2, #23
    8690:	4b05      	ldr	r3, [pc, #20]	; (86a8 <system_board_init+0x34>)
    8692:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8694:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    8696:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    8698:	0021      	movs	r1, r4
    869a:	200f      	movs	r0, #15
    869c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    869e:	b003      	add	sp, #12
    86a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86a2:	46c0      	nop			; (mov r8, r8)
    86a4:	000086ad 	.word	0x000086ad
    86a8:	41004480 	.word	0x41004480

000086ac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    86ac:	b500      	push	{lr}
    86ae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    86b0:	ab01      	add	r3, sp, #4
    86b2:	2280      	movs	r2, #128	; 0x80
    86b4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    86b6:	780a      	ldrb	r2, [r1, #0]
    86b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    86ba:	784a      	ldrb	r2, [r1, #1]
    86bc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    86be:	788a      	ldrb	r2, [r1, #2]
    86c0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    86c2:	0019      	movs	r1, r3
    86c4:	4b01      	ldr	r3, [pc, #4]	; (86cc <port_pin_set_config+0x20>)
    86c6:	4798      	blx	r3
}
    86c8:	b003      	add	sp, #12
    86ca:	bd00      	pop	{pc}
    86cc:	00008a01 	.word	0x00008a01

000086d0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    86d0:	4a06      	ldr	r2, [pc, #24]	; (86ec <system_gclk_init+0x1c>)
    86d2:	6993      	ldr	r3, [r2, #24]
    86d4:	2108      	movs	r1, #8
    86d6:	430b      	orrs	r3, r1
    86d8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    86da:	2201      	movs	r2, #1
    86dc:	4b04      	ldr	r3, [pc, #16]	; (86f0 <system_gclk_init+0x20>)
    86de:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    86e0:	0019      	movs	r1, r3
    86e2:	780b      	ldrb	r3, [r1, #0]
    86e4:	4213      	tst	r3, r2
    86e6:	d1fc      	bne.n	86e2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    86e8:	4770      	bx	lr
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	40000400 	.word	0x40000400
    86f0:	40000c00 	.word	0x40000c00

000086f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    86f4:	b570      	push	{r4, r5, r6, lr}
    86f6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    86f8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    86fa:	780d      	ldrb	r5, [r1, #0]
    86fc:	022d      	lsls	r5, r5, #8
    86fe:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8700:	784b      	ldrb	r3, [r1, #1]
    8702:	2b00      	cmp	r3, #0
    8704:	d002      	beq.n	870c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8706:	2380      	movs	r3, #128	; 0x80
    8708:	02db      	lsls	r3, r3, #11
    870a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    870c:	7a4b      	ldrb	r3, [r1, #9]
    870e:	2b00      	cmp	r3, #0
    8710:	d002      	beq.n	8718 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8712:	2380      	movs	r3, #128	; 0x80
    8714:	031b      	lsls	r3, r3, #12
    8716:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8718:	6848      	ldr	r0, [r1, #4]
    871a:	2801      	cmp	r0, #1
    871c:	d910      	bls.n	8740 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    871e:	1e43      	subs	r3, r0, #1
    8720:	4218      	tst	r0, r3
    8722:	d134      	bne.n	878e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8724:	2802      	cmp	r0, #2
    8726:	d930      	bls.n	878a <system_gclk_gen_set_config+0x96>
    8728:	2302      	movs	r3, #2
    872a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    872c:	3201      	adds	r2, #1
						mask <<= 1) {
    872e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    8730:	4298      	cmp	r0, r3
    8732:	d8fb      	bhi.n	872c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8734:	0212      	lsls	r2, r2, #8
    8736:	4332      	orrs	r2, r6
    8738:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    873a:	2380      	movs	r3, #128	; 0x80
    873c:	035b      	lsls	r3, r3, #13
    873e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8740:	7a0b      	ldrb	r3, [r1, #8]
    8742:	2b00      	cmp	r3, #0
    8744:	d002      	beq.n	874c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8746:	2380      	movs	r3, #128	; 0x80
    8748:	039b      	lsls	r3, r3, #14
    874a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    874c:	4a13      	ldr	r2, [pc, #76]	; (879c <system_gclk_gen_set_config+0xa8>)
    874e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    8750:	b25b      	sxtb	r3, r3
    8752:	2b00      	cmp	r3, #0
    8754:	dbfb      	blt.n	874e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    8756:	4b12      	ldr	r3, [pc, #72]	; (87a0 <system_gclk_gen_set_config+0xac>)
    8758:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    875a:	4b12      	ldr	r3, [pc, #72]	; (87a4 <system_gclk_gen_set_config+0xb0>)
    875c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    875e:	4a0f      	ldr	r2, [pc, #60]	; (879c <system_gclk_gen_set_config+0xa8>)
    8760:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8762:	b25b      	sxtb	r3, r3
    8764:	2b00      	cmp	r3, #0
    8766:	dbfb      	blt.n	8760 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8768:	4b0c      	ldr	r3, [pc, #48]	; (879c <system_gclk_gen_set_config+0xa8>)
    876a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    876c:	001a      	movs	r2, r3
    876e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    8770:	b25b      	sxtb	r3, r3
    8772:	2b00      	cmp	r3, #0
    8774:	dbfb      	blt.n	876e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8776:	4a09      	ldr	r2, [pc, #36]	; (879c <system_gclk_gen_set_config+0xa8>)
    8778:	6853      	ldr	r3, [r2, #4]
    877a:	2180      	movs	r1, #128	; 0x80
    877c:	0249      	lsls	r1, r1, #9
    877e:	400b      	ands	r3, r1
    8780:	431d      	orrs	r5, r3
    8782:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    8784:	4b08      	ldr	r3, [pc, #32]	; (87a8 <system_gclk_gen_set_config+0xb4>)
    8786:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8788:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    878a:	2200      	movs	r2, #0
    878c:	e7d2      	b.n	8734 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    878e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    8790:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8792:	2380      	movs	r3, #128	; 0x80
    8794:	029b      	lsls	r3, r3, #10
    8796:	431d      	orrs	r5, r3
    8798:	e7d2      	b.n	8740 <system_gclk_gen_set_config+0x4c>
    879a:	46c0      	nop			; (mov r8, r8)
    879c:	40000c00 	.word	0x40000c00
    87a0:	00008605 	.word	0x00008605
    87a4:	40000c08 	.word	0x40000c08
    87a8:	00008645 	.word	0x00008645

000087ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    87ac:	b510      	push	{r4, lr}
    87ae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    87b0:	4a0b      	ldr	r2, [pc, #44]	; (87e0 <system_gclk_gen_enable+0x34>)
    87b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    87b4:	b25b      	sxtb	r3, r3
    87b6:	2b00      	cmp	r3, #0
    87b8:	dbfb      	blt.n	87b2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    87ba:	4b0a      	ldr	r3, [pc, #40]	; (87e4 <system_gclk_gen_enable+0x38>)
    87bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    87be:	4b0a      	ldr	r3, [pc, #40]	; (87e8 <system_gclk_gen_enable+0x3c>)
    87c0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    87c2:	4a07      	ldr	r2, [pc, #28]	; (87e0 <system_gclk_gen_enable+0x34>)
    87c4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    87c6:	b25b      	sxtb	r3, r3
    87c8:	2b00      	cmp	r3, #0
    87ca:	dbfb      	blt.n	87c4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    87cc:	4a04      	ldr	r2, [pc, #16]	; (87e0 <system_gclk_gen_enable+0x34>)
    87ce:	6851      	ldr	r1, [r2, #4]
    87d0:	2380      	movs	r3, #128	; 0x80
    87d2:	025b      	lsls	r3, r3, #9
    87d4:	430b      	orrs	r3, r1
    87d6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    87d8:	4b04      	ldr	r3, [pc, #16]	; (87ec <system_gclk_gen_enable+0x40>)
    87da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    87dc:	bd10      	pop	{r4, pc}
    87de:	46c0      	nop			; (mov r8, r8)
    87e0:	40000c00 	.word	0x40000c00
    87e4:	00008605 	.word	0x00008605
    87e8:	40000c04 	.word	0x40000c04
    87ec:	00008645 	.word	0x00008645

000087f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    87f0:	b570      	push	{r4, r5, r6, lr}
    87f2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    87f4:	4a1a      	ldr	r2, [pc, #104]	; (8860 <system_gclk_gen_get_hz+0x70>)
    87f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    87f8:	b25b      	sxtb	r3, r3
    87fa:	2b00      	cmp	r3, #0
    87fc:	dbfb      	blt.n	87f6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    87fe:	4b19      	ldr	r3, [pc, #100]	; (8864 <system_gclk_gen_get_hz+0x74>)
    8800:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8802:	4b19      	ldr	r3, [pc, #100]	; (8868 <system_gclk_gen_get_hz+0x78>)
    8804:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8806:	4a16      	ldr	r2, [pc, #88]	; (8860 <system_gclk_gen_get_hz+0x70>)
    8808:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    880a:	b25b      	sxtb	r3, r3
    880c:	2b00      	cmp	r3, #0
    880e:	dbfb      	blt.n	8808 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8810:	4e13      	ldr	r6, [pc, #76]	; (8860 <system_gclk_gen_get_hz+0x70>)
    8812:	6870      	ldr	r0, [r6, #4]
    8814:	04c0      	lsls	r0, r0, #19
    8816:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8818:	4b14      	ldr	r3, [pc, #80]	; (886c <system_gclk_gen_get_hz+0x7c>)
    881a:	4798      	blx	r3
    881c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    881e:	4b12      	ldr	r3, [pc, #72]	; (8868 <system_gclk_gen_get_hz+0x78>)
    8820:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8822:	6876      	ldr	r6, [r6, #4]
    8824:	02f6      	lsls	r6, r6, #11
    8826:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8828:	4b11      	ldr	r3, [pc, #68]	; (8870 <system_gclk_gen_get_hz+0x80>)
    882a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    882c:	4a0c      	ldr	r2, [pc, #48]	; (8860 <system_gclk_gen_get_hz+0x70>)
    882e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    8830:	b25b      	sxtb	r3, r3
    8832:	2b00      	cmp	r3, #0
    8834:	dbfb      	blt.n	882e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8836:	4b0a      	ldr	r3, [pc, #40]	; (8860 <system_gclk_gen_get_hz+0x70>)
    8838:	689c      	ldr	r4, [r3, #8]
    883a:	0224      	lsls	r4, r4, #8
    883c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    883e:	4b0d      	ldr	r3, [pc, #52]	; (8874 <system_gclk_gen_get_hz+0x84>)
    8840:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8842:	2e00      	cmp	r6, #0
    8844:	d107      	bne.n	8856 <system_gclk_gen_get_hz+0x66>
    8846:	2c01      	cmp	r4, #1
    8848:	d907      	bls.n	885a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    884a:	0021      	movs	r1, r4
    884c:	0028      	movs	r0, r5
    884e:	4b0a      	ldr	r3, [pc, #40]	; (8878 <system_gclk_gen_get_hz+0x88>)
    8850:	4798      	blx	r3
    8852:	0005      	movs	r5, r0
    8854:	e001      	b.n	885a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8856:	3401      	adds	r4, #1
    8858:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    885a:	0028      	movs	r0, r5
    885c:	bd70      	pop	{r4, r5, r6, pc}
    885e:	46c0      	nop			; (mov r8, r8)
    8860:	40000c00 	.word	0x40000c00
    8864:	00008605 	.word	0x00008605
    8868:	40000c04 	.word	0x40000c04
    886c:	0000294d 	.word	0x0000294d
    8870:	40000c08 	.word	0x40000c08
    8874:	00008645 	.word	0x00008645
    8878:	00008b85 	.word	0x00008b85

0000887c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    887c:	b510      	push	{r4, lr}
    887e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8880:	4b06      	ldr	r3, [pc, #24]	; (889c <system_gclk_chan_enable+0x20>)
    8882:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8884:	4b06      	ldr	r3, [pc, #24]	; (88a0 <system_gclk_chan_enable+0x24>)
    8886:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8888:	4a06      	ldr	r2, [pc, #24]	; (88a4 <system_gclk_chan_enable+0x28>)
    888a:	8853      	ldrh	r3, [r2, #2]
    888c:	2180      	movs	r1, #128	; 0x80
    888e:	01c9      	lsls	r1, r1, #7
    8890:	430b      	orrs	r3, r1
    8892:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    8894:	4b04      	ldr	r3, [pc, #16]	; (88a8 <system_gclk_chan_enable+0x2c>)
    8896:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8898:	bd10      	pop	{r4, pc}
    889a:	46c0      	nop			; (mov r8, r8)
    889c:	00008605 	.word	0x00008605
    88a0:	40000c02 	.word	0x40000c02
    88a4:	40000c00 	.word	0x40000c00
    88a8:	00008645 	.word	0x00008645

000088ac <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    88ac:	b510      	push	{r4, lr}
    88ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    88b0:	4b0f      	ldr	r3, [pc, #60]	; (88f0 <system_gclk_chan_disable+0x44>)
    88b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    88b4:	4b0f      	ldr	r3, [pc, #60]	; (88f4 <system_gclk_chan_disable+0x48>)
    88b6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    88b8:	4a0f      	ldr	r2, [pc, #60]	; (88f8 <system_gclk_chan_disable+0x4c>)
    88ba:	8853      	ldrh	r3, [r2, #2]
    88bc:	051b      	lsls	r3, r3, #20
    88be:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    88c0:	8853      	ldrh	r3, [r2, #2]
    88c2:	490e      	ldr	r1, [pc, #56]	; (88fc <system_gclk_chan_disable+0x50>)
    88c4:	400b      	ands	r3, r1
    88c6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    88c8:	8853      	ldrh	r3, [r2, #2]
    88ca:	490d      	ldr	r1, [pc, #52]	; (8900 <system_gclk_chan_disable+0x54>)
    88cc:	400b      	ands	r3, r1
    88ce:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    88d0:	0011      	movs	r1, r2
    88d2:	2280      	movs	r2, #128	; 0x80
    88d4:	01d2      	lsls	r2, r2, #7
    88d6:	884b      	ldrh	r3, [r1, #2]
    88d8:	4213      	tst	r3, r2
    88da:	d1fc      	bne.n	88d6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    88dc:	4906      	ldr	r1, [pc, #24]	; (88f8 <system_gclk_chan_disable+0x4c>)
    88de:	884a      	ldrh	r2, [r1, #2]
    88e0:	0203      	lsls	r3, r0, #8
    88e2:	4806      	ldr	r0, [pc, #24]	; (88fc <system_gclk_chan_disable+0x50>)
    88e4:	4002      	ands	r2, r0
    88e6:	4313      	orrs	r3, r2
    88e8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    88ea:	4b06      	ldr	r3, [pc, #24]	; (8904 <system_gclk_chan_disable+0x58>)
    88ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    88ee:	bd10      	pop	{r4, pc}
    88f0:	00008605 	.word	0x00008605
    88f4:	40000c02 	.word	0x40000c02
    88f8:	40000c00 	.word	0x40000c00
    88fc:	fffff0ff 	.word	0xfffff0ff
    8900:	ffffbfff 	.word	0xffffbfff
    8904:	00008645 	.word	0x00008645

00008908 <system_gclk_chan_set_config>:
{
    8908:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    890a:	780c      	ldrb	r4, [r1, #0]
    890c:	0224      	lsls	r4, r4, #8
    890e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    8910:	4b02      	ldr	r3, [pc, #8]	; (891c <system_gclk_chan_set_config+0x14>)
    8912:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8914:	b2a4      	uxth	r4, r4
    8916:	4b02      	ldr	r3, [pc, #8]	; (8920 <system_gclk_chan_set_config+0x18>)
    8918:	805c      	strh	r4, [r3, #2]
}
    891a:	bd10      	pop	{r4, pc}
    891c:	000088ad 	.word	0x000088ad
    8920:	40000c00 	.word	0x40000c00

00008924 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8924:	b510      	push	{r4, lr}
    8926:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8928:	4b06      	ldr	r3, [pc, #24]	; (8944 <system_gclk_chan_get_hz+0x20>)
    892a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    892c:	4b06      	ldr	r3, [pc, #24]	; (8948 <system_gclk_chan_get_hz+0x24>)
    892e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8930:	4b06      	ldr	r3, [pc, #24]	; (894c <system_gclk_chan_get_hz+0x28>)
    8932:	885c      	ldrh	r4, [r3, #2]
    8934:	0524      	lsls	r4, r4, #20
    8936:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8938:	4b05      	ldr	r3, [pc, #20]	; (8950 <system_gclk_chan_get_hz+0x2c>)
    893a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    893c:	0020      	movs	r0, r4
    893e:	4b05      	ldr	r3, [pc, #20]	; (8954 <system_gclk_chan_get_hz+0x30>)
    8940:	4798      	blx	r3
}
    8942:	bd10      	pop	{r4, pc}
    8944:	00008605 	.word	0x00008605
    8948:	40000c02 	.word	0x40000c02
    894c:	40000c00 	.word	0x40000c00
    8950:	00008645 	.word	0x00008645
    8954:	000087f1 	.word	0x000087f1

00008958 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8958:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    895a:	78d3      	ldrb	r3, [r2, #3]
    895c:	2b00      	cmp	r3, #0
    895e:	d135      	bne.n	89cc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8960:	7813      	ldrb	r3, [r2, #0]
    8962:	2b80      	cmp	r3, #128	; 0x80
    8964:	d029      	beq.n	89ba <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8966:	061b      	lsls	r3, r3, #24
    8968:	2480      	movs	r4, #128	; 0x80
    896a:	0264      	lsls	r4, r4, #9
    896c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    896e:	7854      	ldrb	r4, [r2, #1]
    8970:	2502      	movs	r5, #2
    8972:	43ac      	bics	r4, r5
    8974:	d106      	bne.n	8984 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    8976:	7894      	ldrb	r4, [r2, #2]
    8978:	2c00      	cmp	r4, #0
    897a:	d120      	bne.n	89be <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    897c:	2480      	movs	r4, #128	; 0x80
    897e:	02a4      	lsls	r4, r4, #10
    8980:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    8982:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8984:	7854      	ldrb	r4, [r2, #1]
    8986:	3c01      	subs	r4, #1
    8988:	2c01      	cmp	r4, #1
    898a:	d91c      	bls.n	89c6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    898c:	040d      	lsls	r5, r1, #16
    898e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8990:	24a0      	movs	r4, #160	; 0xa0
    8992:	05e4      	lsls	r4, r4, #23
    8994:	432c      	orrs	r4, r5
    8996:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8998:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    899a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    899c:	24d0      	movs	r4, #208	; 0xd0
    899e:	0624      	lsls	r4, r4, #24
    89a0:	432c      	orrs	r4, r5
    89a2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    89a4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    89a6:	78d4      	ldrb	r4, [r2, #3]
    89a8:	2c00      	cmp	r4, #0
    89aa:	d122      	bne.n	89f2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    89ac:	035b      	lsls	r3, r3, #13
    89ae:	d51c      	bpl.n	89ea <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    89b0:	7893      	ldrb	r3, [r2, #2]
    89b2:	2b01      	cmp	r3, #1
    89b4:	d01e      	beq.n	89f4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    89b6:	6141      	str	r1, [r0, #20]
    89b8:	e017      	b.n	89ea <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    89ba:	2300      	movs	r3, #0
    89bc:	e7d7      	b.n	896e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    89be:	24c0      	movs	r4, #192	; 0xc0
    89c0:	02e4      	lsls	r4, r4, #11
    89c2:	4323      	orrs	r3, r4
    89c4:	e7dd      	b.n	8982 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    89c6:	4c0d      	ldr	r4, [pc, #52]	; (89fc <_system_pinmux_config+0xa4>)
    89c8:	4023      	ands	r3, r4
    89ca:	e7df      	b.n	898c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    89cc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    89ce:	040c      	lsls	r4, r1, #16
    89d0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    89d2:	23a0      	movs	r3, #160	; 0xa0
    89d4:	05db      	lsls	r3, r3, #23
    89d6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    89d8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    89da:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    89dc:	23d0      	movs	r3, #208	; 0xd0
    89de:	061b      	lsls	r3, r3, #24
    89e0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    89e2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    89e4:	78d3      	ldrb	r3, [r2, #3]
    89e6:	2b00      	cmp	r3, #0
    89e8:	d103      	bne.n	89f2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    89ea:	7853      	ldrb	r3, [r2, #1]
    89ec:	3b01      	subs	r3, #1
    89ee:	2b01      	cmp	r3, #1
    89f0:	d902      	bls.n	89f8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    89f2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    89f4:	6181      	str	r1, [r0, #24]
    89f6:	e7f8      	b.n	89ea <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    89f8:	6081      	str	r1, [r0, #8]
}
    89fa:	e7fa      	b.n	89f2 <_system_pinmux_config+0x9a>
    89fc:	fffbffff 	.word	0xfffbffff

00008a00 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8a00:	b510      	push	{r4, lr}
    8a02:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8a04:	09c1      	lsrs	r1, r0, #7
		return NULL;
    8a06:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8a08:	2900      	cmp	r1, #0
    8a0a:	d104      	bne.n	8a16 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8a0c:	0943      	lsrs	r3, r0, #5
    8a0e:	01db      	lsls	r3, r3, #7
    8a10:	4905      	ldr	r1, [pc, #20]	; (8a28 <system_pinmux_pin_set_config+0x28>)
    8a12:	468c      	mov	ip, r1
    8a14:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    8a16:	241f      	movs	r4, #31
    8a18:	4020      	ands	r0, r4
    8a1a:	2101      	movs	r1, #1
    8a1c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8a1e:	0018      	movs	r0, r3
    8a20:	4b02      	ldr	r3, [pc, #8]	; (8a2c <system_pinmux_pin_set_config+0x2c>)
    8a22:	4798      	blx	r3
}
    8a24:	bd10      	pop	{r4, pc}
    8a26:	46c0      	nop			; (mov r8, r8)
    8a28:	41004400 	.word	0x41004400
    8a2c:	00008959 	.word	0x00008959

00008a30 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8a30:	4770      	bx	lr
	...

00008a34 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8a34:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    8a36:	4b05      	ldr	r3, [pc, #20]	; (8a4c <system_init+0x18>)
    8a38:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    8a3a:	4b05      	ldr	r3, [pc, #20]	; (8a50 <system_init+0x1c>)
    8a3c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8a3e:	4b05      	ldr	r3, [pc, #20]	; (8a54 <system_init+0x20>)
    8a40:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8a42:	4b05      	ldr	r3, [pc, #20]	; (8a58 <system_init+0x24>)
    8a44:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    8a46:	4b05      	ldr	r3, [pc, #20]	; (8a5c <system_init+0x28>)
    8a48:	4798      	blx	r3
}
    8a4a:	bd10      	pop	{r4, pc}
    8a4c:	00002bc9 	.word	0x00002bc9
    8a50:	00008675 	.word	0x00008675
    8a54:	00008a31 	.word	0x00008a31
    8a58:	00001edd 	.word	0x00001edd
    8a5c:	00008a31 	.word	0x00008a31

00008a60 <Dummy_Handler>:
 */
void Dummy_Handler(void)
{
        //while (1) {
        //}
}
    8a60:	4770      	bx	lr
	...

00008a64 <Reset_Handler>:
{
    8a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    8a66:	4a2a      	ldr	r2, [pc, #168]	; (8b10 <Reset_Handler+0xac>)
    8a68:	4b2a      	ldr	r3, [pc, #168]	; (8b14 <Reset_Handler+0xb0>)
    8a6a:	429a      	cmp	r2, r3
    8a6c:	d011      	beq.n	8a92 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8a6e:	001a      	movs	r2, r3
    8a70:	4b29      	ldr	r3, [pc, #164]	; (8b18 <Reset_Handler+0xb4>)
    8a72:	429a      	cmp	r2, r3
    8a74:	d20d      	bcs.n	8a92 <Reset_Handler+0x2e>
    8a76:	4a29      	ldr	r2, [pc, #164]	; (8b1c <Reset_Handler+0xb8>)
    8a78:	3303      	adds	r3, #3
    8a7a:	1a9b      	subs	r3, r3, r2
    8a7c:	089b      	lsrs	r3, r3, #2
    8a7e:	3301      	adds	r3, #1
    8a80:	009b      	lsls	r3, r3, #2
    8a82:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8a84:	4823      	ldr	r0, [pc, #140]	; (8b14 <Reset_Handler+0xb0>)
    8a86:	4922      	ldr	r1, [pc, #136]	; (8b10 <Reset_Handler+0xac>)
    8a88:	588c      	ldr	r4, [r1, r2]
    8a8a:	5084      	str	r4, [r0, r2]
    8a8c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8a8e:	429a      	cmp	r2, r3
    8a90:	d1fa      	bne.n	8a88 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8a92:	4a23      	ldr	r2, [pc, #140]	; (8b20 <Reset_Handler+0xbc>)
    8a94:	4b23      	ldr	r3, [pc, #140]	; (8b24 <Reset_Handler+0xc0>)
    8a96:	429a      	cmp	r2, r3
    8a98:	d20a      	bcs.n	8ab0 <Reset_Handler+0x4c>
    8a9a:	43d3      	mvns	r3, r2
    8a9c:	4921      	ldr	r1, [pc, #132]	; (8b24 <Reset_Handler+0xc0>)
    8a9e:	185b      	adds	r3, r3, r1
    8aa0:	2103      	movs	r1, #3
    8aa2:	438b      	bics	r3, r1
    8aa4:	3304      	adds	r3, #4
    8aa6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8aa8:	2100      	movs	r1, #0
    8aaa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8aac:	4293      	cmp	r3, r2
    8aae:	d1fc      	bne.n	8aaa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8ab0:	4a1d      	ldr	r2, [pc, #116]	; (8b28 <Reset_Handler+0xc4>)
    8ab2:	21ff      	movs	r1, #255	; 0xff
    8ab4:	4b1d      	ldr	r3, [pc, #116]	; (8b2c <Reset_Handler+0xc8>)
    8ab6:	438b      	bics	r3, r1
    8ab8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8aba:	39fd      	subs	r1, #253	; 0xfd
    8abc:	2390      	movs	r3, #144	; 0x90
    8abe:	005b      	lsls	r3, r3, #1
    8ac0:	4a1b      	ldr	r2, [pc, #108]	; (8b30 <Reset_Handler+0xcc>)
    8ac2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8ac4:	4a1b      	ldr	r2, [pc, #108]	; (8b34 <Reset_Handler+0xd0>)
    8ac6:	78d3      	ldrb	r3, [r2, #3]
    8ac8:	2503      	movs	r5, #3
    8aca:	43ab      	bics	r3, r5
    8acc:	2402      	movs	r4, #2
    8ace:	4323      	orrs	r3, r4
    8ad0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8ad2:	78d3      	ldrb	r3, [r2, #3]
    8ad4:	270c      	movs	r7, #12
    8ad6:	43bb      	bics	r3, r7
    8ad8:	2608      	movs	r6, #8
    8ada:	4333      	orrs	r3, r6
    8adc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    8ade:	4b16      	ldr	r3, [pc, #88]	; (8b38 <Reset_Handler+0xd4>)
    8ae0:	7b98      	ldrb	r0, [r3, #14]
    8ae2:	2230      	movs	r2, #48	; 0x30
    8ae4:	4390      	bics	r0, r2
    8ae6:	2220      	movs	r2, #32
    8ae8:	4310      	orrs	r0, r2
    8aea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    8aec:	7b99      	ldrb	r1, [r3, #14]
    8aee:	43b9      	bics	r1, r7
    8af0:	4331      	orrs	r1, r6
    8af2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    8af4:	7b9a      	ldrb	r2, [r3, #14]
    8af6:	43aa      	bics	r2, r5
    8af8:	4322      	orrs	r2, r4
    8afa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8afc:	4a0f      	ldr	r2, [pc, #60]	; (8b3c <Reset_Handler+0xd8>)
    8afe:	6853      	ldr	r3, [r2, #4]
    8b00:	2180      	movs	r1, #128	; 0x80
    8b02:	430b      	orrs	r3, r1
    8b04:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8b06:	4b0e      	ldr	r3, [pc, #56]	; (8b40 <Reset_Handler+0xdc>)
    8b08:	4798      	blx	r3
        main();
    8b0a:	4b0e      	ldr	r3, [pc, #56]	; (8b44 <Reset_Handler+0xe0>)
    8b0c:	4798      	blx	r3
    8b0e:	e7fe      	b.n	8b0e <Reset_Handler+0xaa>
    8b10:	0000ab58 	.word	0x0000ab58
    8b14:	20000000 	.word	0x20000000
    8b18:	2000018c 	.word	0x2000018c
    8b1c:	20000004 	.word	0x20000004
    8b20:	2000018c 	.word	0x2000018c
    8b24:	20000ddc 	.word	0x20000ddc
    8b28:	e000ed00 	.word	0xe000ed00
    8b2c:	00000000 	.word	0x00000000
    8b30:	41007000 	.word	0x41007000
    8b34:	41005000 	.word	0x41005000
    8b38:	41004800 	.word	0x41004800
    8b3c:	41004000 	.word	0x41004000
    8b40:	00009119 	.word	0x00009119
    8b44:	00005b6d 	.word	0x00005b6d

00008b48 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8b48:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8b4a:	4a06      	ldr	r2, [pc, #24]	; (8b64 <_sbrk+0x1c>)
    8b4c:	6812      	ldr	r2, [r2, #0]
    8b4e:	2a00      	cmp	r2, #0
    8b50:	d004      	beq.n	8b5c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8b52:	4a04      	ldr	r2, [pc, #16]	; (8b64 <_sbrk+0x1c>)
    8b54:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8b56:	18c3      	adds	r3, r0, r3
    8b58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8b5a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8b5c:	4902      	ldr	r1, [pc, #8]	; (8b68 <_sbrk+0x20>)
    8b5e:	4a01      	ldr	r2, [pc, #4]	; (8b64 <_sbrk+0x1c>)
    8b60:	6011      	str	r1, [r2, #0]
    8b62:	e7f6      	b.n	8b52 <_sbrk+0xa>
    8b64:	2000032c 	.word	0x2000032c
    8b68:	20002de0 	.word	0x20002de0

00008b6c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8b6c:	2001      	movs	r0, #1
    8b6e:	4240      	negs	r0, r0
    8b70:	4770      	bx	lr

00008b72 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8b72:	2380      	movs	r3, #128	; 0x80
    8b74:	019b      	lsls	r3, r3, #6
    8b76:	604b      	str	r3, [r1, #4]

	return 0;
}
    8b78:	2000      	movs	r0, #0
    8b7a:	4770      	bx	lr

00008b7c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8b7c:	2001      	movs	r0, #1
    8b7e:	4770      	bx	lr

00008b80 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8b80:	2000      	movs	r0, #0
    8b82:	4770      	bx	lr

00008b84 <__udivsi3>:
    8b84:	2200      	movs	r2, #0
    8b86:	0843      	lsrs	r3, r0, #1
    8b88:	428b      	cmp	r3, r1
    8b8a:	d374      	bcc.n	8c76 <__udivsi3+0xf2>
    8b8c:	0903      	lsrs	r3, r0, #4
    8b8e:	428b      	cmp	r3, r1
    8b90:	d35f      	bcc.n	8c52 <__udivsi3+0xce>
    8b92:	0a03      	lsrs	r3, r0, #8
    8b94:	428b      	cmp	r3, r1
    8b96:	d344      	bcc.n	8c22 <__udivsi3+0x9e>
    8b98:	0b03      	lsrs	r3, r0, #12
    8b9a:	428b      	cmp	r3, r1
    8b9c:	d328      	bcc.n	8bf0 <__udivsi3+0x6c>
    8b9e:	0c03      	lsrs	r3, r0, #16
    8ba0:	428b      	cmp	r3, r1
    8ba2:	d30d      	bcc.n	8bc0 <__udivsi3+0x3c>
    8ba4:	22ff      	movs	r2, #255	; 0xff
    8ba6:	0209      	lsls	r1, r1, #8
    8ba8:	ba12      	rev	r2, r2
    8baa:	0c03      	lsrs	r3, r0, #16
    8bac:	428b      	cmp	r3, r1
    8bae:	d302      	bcc.n	8bb6 <__udivsi3+0x32>
    8bb0:	1212      	asrs	r2, r2, #8
    8bb2:	0209      	lsls	r1, r1, #8
    8bb4:	d065      	beq.n	8c82 <__udivsi3+0xfe>
    8bb6:	0b03      	lsrs	r3, r0, #12
    8bb8:	428b      	cmp	r3, r1
    8bba:	d319      	bcc.n	8bf0 <__udivsi3+0x6c>
    8bbc:	e000      	b.n	8bc0 <__udivsi3+0x3c>
    8bbe:	0a09      	lsrs	r1, r1, #8
    8bc0:	0bc3      	lsrs	r3, r0, #15
    8bc2:	428b      	cmp	r3, r1
    8bc4:	d301      	bcc.n	8bca <__udivsi3+0x46>
    8bc6:	03cb      	lsls	r3, r1, #15
    8bc8:	1ac0      	subs	r0, r0, r3
    8bca:	4152      	adcs	r2, r2
    8bcc:	0b83      	lsrs	r3, r0, #14
    8bce:	428b      	cmp	r3, r1
    8bd0:	d301      	bcc.n	8bd6 <__udivsi3+0x52>
    8bd2:	038b      	lsls	r3, r1, #14
    8bd4:	1ac0      	subs	r0, r0, r3
    8bd6:	4152      	adcs	r2, r2
    8bd8:	0b43      	lsrs	r3, r0, #13
    8bda:	428b      	cmp	r3, r1
    8bdc:	d301      	bcc.n	8be2 <__udivsi3+0x5e>
    8bde:	034b      	lsls	r3, r1, #13
    8be0:	1ac0      	subs	r0, r0, r3
    8be2:	4152      	adcs	r2, r2
    8be4:	0b03      	lsrs	r3, r0, #12
    8be6:	428b      	cmp	r3, r1
    8be8:	d301      	bcc.n	8bee <__udivsi3+0x6a>
    8bea:	030b      	lsls	r3, r1, #12
    8bec:	1ac0      	subs	r0, r0, r3
    8bee:	4152      	adcs	r2, r2
    8bf0:	0ac3      	lsrs	r3, r0, #11
    8bf2:	428b      	cmp	r3, r1
    8bf4:	d301      	bcc.n	8bfa <__udivsi3+0x76>
    8bf6:	02cb      	lsls	r3, r1, #11
    8bf8:	1ac0      	subs	r0, r0, r3
    8bfa:	4152      	adcs	r2, r2
    8bfc:	0a83      	lsrs	r3, r0, #10
    8bfe:	428b      	cmp	r3, r1
    8c00:	d301      	bcc.n	8c06 <__udivsi3+0x82>
    8c02:	028b      	lsls	r3, r1, #10
    8c04:	1ac0      	subs	r0, r0, r3
    8c06:	4152      	adcs	r2, r2
    8c08:	0a43      	lsrs	r3, r0, #9
    8c0a:	428b      	cmp	r3, r1
    8c0c:	d301      	bcc.n	8c12 <__udivsi3+0x8e>
    8c0e:	024b      	lsls	r3, r1, #9
    8c10:	1ac0      	subs	r0, r0, r3
    8c12:	4152      	adcs	r2, r2
    8c14:	0a03      	lsrs	r3, r0, #8
    8c16:	428b      	cmp	r3, r1
    8c18:	d301      	bcc.n	8c1e <__udivsi3+0x9a>
    8c1a:	020b      	lsls	r3, r1, #8
    8c1c:	1ac0      	subs	r0, r0, r3
    8c1e:	4152      	adcs	r2, r2
    8c20:	d2cd      	bcs.n	8bbe <__udivsi3+0x3a>
    8c22:	09c3      	lsrs	r3, r0, #7
    8c24:	428b      	cmp	r3, r1
    8c26:	d301      	bcc.n	8c2c <__udivsi3+0xa8>
    8c28:	01cb      	lsls	r3, r1, #7
    8c2a:	1ac0      	subs	r0, r0, r3
    8c2c:	4152      	adcs	r2, r2
    8c2e:	0983      	lsrs	r3, r0, #6
    8c30:	428b      	cmp	r3, r1
    8c32:	d301      	bcc.n	8c38 <__udivsi3+0xb4>
    8c34:	018b      	lsls	r3, r1, #6
    8c36:	1ac0      	subs	r0, r0, r3
    8c38:	4152      	adcs	r2, r2
    8c3a:	0943      	lsrs	r3, r0, #5
    8c3c:	428b      	cmp	r3, r1
    8c3e:	d301      	bcc.n	8c44 <__udivsi3+0xc0>
    8c40:	014b      	lsls	r3, r1, #5
    8c42:	1ac0      	subs	r0, r0, r3
    8c44:	4152      	adcs	r2, r2
    8c46:	0903      	lsrs	r3, r0, #4
    8c48:	428b      	cmp	r3, r1
    8c4a:	d301      	bcc.n	8c50 <__udivsi3+0xcc>
    8c4c:	010b      	lsls	r3, r1, #4
    8c4e:	1ac0      	subs	r0, r0, r3
    8c50:	4152      	adcs	r2, r2
    8c52:	08c3      	lsrs	r3, r0, #3
    8c54:	428b      	cmp	r3, r1
    8c56:	d301      	bcc.n	8c5c <__udivsi3+0xd8>
    8c58:	00cb      	lsls	r3, r1, #3
    8c5a:	1ac0      	subs	r0, r0, r3
    8c5c:	4152      	adcs	r2, r2
    8c5e:	0883      	lsrs	r3, r0, #2
    8c60:	428b      	cmp	r3, r1
    8c62:	d301      	bcc.n	8c68 <__udivsi3+0xe4>
    8c64:	008b      	lsls	r3, r1, #2
    8c66:	1ac0      	subs	r0, r0, r3
    8c68:	4152      	adcs	r2, r2
    8c6a:	0843      	lsrs	r3, r0, #1
    8c6c:	428b      	cmp	r3, r1
    8c6e:	d301      	bcc.n	8c74 <__udivsi3+0xf0>
    8c70:	004b      	lsls	r3, r1, #1
    8c72:	1ac0      	subs	r0, r0, r3
    8c74:	4152      	adcs	r2, r2
    8c76:	1a41      	subs	r1, r0, r1
    8c78:	d200      	bcs.n	8c7c <__udivsi3+0xf8>
    8c7a:	4601      	mov	r1, r0
    8c7c:	4152      	adcs	r2, r2
    8c7e:	4610      	mov	r0, r2
    8c80:	4770      	bx	lr
    8c82:	e7ff      	b.n	8c84 <__udivsi3+0x100>
    8c84:	b501      	push	{r0, lr}
    8c86:	2000      	movs	r0, #0
    8c88:	f000 f8f0 	bl	8e6c <__aeabi_idiv0>
    8c8c:	bd02      	pop	{r1, pc}
    8c8e:	46c0      	nop			; (mov r8, r8)

00008c90 <__aeabi_uidivmod>:
    8c90:	2900      	cmp	r1, #0
    8c92:	d0f7      	beq.n	8c84 <__udivsi3+0x100>
    8c94:	e776      	b.n	8b84 <__udivsi3>
    8c96:	4770      	bx	lr

00008c98 <__divsi3>:
    8c98:	4603      	mov	r3, r0
    8c9a:	430b      	orrs	r3, r1
    8c9c:	d47f      	bmi.n	8d9e <__divsi3+0x106>
    8c9e:	2200      	movs	r2, #0
    8ca0:	0843      	lsrs	r3, r0, #1
    8ca2:	428b      	cmp	r3, r1
    8ca4:	d374      	bcc.n	8d90 <__divsi3+0xf8>
    8ca6:	0903      	lsrs	r3, r0, #4
    8ca8:	428b      	cmp	r3, r1
    8caa:	d35f      	bcc.n	8d6c <__divsi3+0xd4>
    8cac:	0a03      	lsrs	r3, r0, #8
    8cae:	428b      	cmp	r3, r1
    8cb0:	d344      	bcc.n	8d3c <__divsi3+0xa4>
    8cb2:	0b03      	lsrs	r3, r0, #12
    8cb4:	428b      	cmp	r3, r1
    8cb6:	d328      	bcc.n	8d0a <__divsi3+0x72>
    8cb8:	0c03      	lsrs	r3, r0, #16
    8cba:	428b      	cmp	r3, r1
    8cbc:	d30d      	bcc.n	8cda <__divsi3+0x42>
    8cbe:	22ff      	movs	r2, #255	; 0xff
    8cc0:	0209      	lsls	r1, r1, #8
    8cc2:	ba12      	rev	r2, r2
    8cc4:	0c03      	lsrs	r3, r0, #16
    8cc6:	428b      	cmp	r3, r1
    8cc8:	d302      	bcc.n	8cd0 <__divsi3+0x38>
    8cca:	1212      	asrs	r2, r2, #8
    8ccc:	0209      	lsls	r1, r1, #8
    8cce:	d065      	beq.n	8d9c <__divsi3+0x104>
    8cd0:	0b03      	lsrs	r3, r0, #12
    8cd2:	428b      	cmp	r3, r1
    8cd4:	d319      	bcc.n	8d0a <__divsi3+0x72>
    8cd6:	e000      	b.n	8cda <__divsi3+0x42>
    8cd8:	0a09      	lsrs	r1, r1, #8
    8cda:	0bc3      	lsrs	r3, r0, #15
    8cdc:	428b      	cmp	r3, r1
    8cde:	d301      	bcc.n	8ce4 <__divsi3+0x4c>
    8ce0:	03cb      	lsls	r3, r1, #15
    8ce2:	1ac0      	subs	r0, r0, r3
    8ce4:	4152      	adcs	r2, r2
    8ce6:	0b83      	lsrs	r3, r0, #14
    8ce8:	428b      	cmp	r3, r1
    8cea:	d301      	bcc.n	8cf0 <__divsi3+0x58>
    8cec:	038b      	lsls	r3, r1, #14
    8cee:	1ac0      	subs	r0, r0, r3
    8cf0:	4152      	adcs	r2, r2
    8cf2:	0b43      	lsrs	r3, r0, #13
    8cf4:	428b      	cmp	r3, r1
    8cf6:	d301      	bcc.n	8cfc <__divsi3+0x64>
    8cf8:	034b      	lsls	r3, r1, #13
    8cfa:	1ac0      	subs	r0, r0, r3
    8cfc:	4152      	adcs	r2, r2
    8cfe:	0b03      	lsrs	r3, r0, #12
    8d00:	428b      	cmp	r3, r1
    8d02:	d301      	bcc.n	8d08 <__divsi3+0x70>
    8d04:	030b      	lsls	r3, r1, #12
    8d06:	1ac0      	subs	r0, r0, r3
    8d08:	4152      	adcs	r2, r2
    8d0a:	0ac3      	lsrs	r3, r0, #11
    8d0c:	428b      	cmp	r3, r1
    8d0e:	d301      	bcc.n	8d14 <__divsi3+0x7c>
    8d10:	02cb      	lsls	r3, r1, #11
    8d12:	1ac0      	subs	r0, r0, r3
    8d14:	4152      	adcs	r2, r2
    8d16:	0a83      	lsrs	r3, r0, #10
    8d18:	428b      	cmp	r3, r1
    8d1a:	d301      	bcc.n	8d20 <__divsi3+0x88>
    8d1c:	028b      	lsls	r3, r1, #10
    8d1e:	1ac0      	subs	r0, r0, r3
    8d20:	4152      	adcs	r2, r2
    8d22:	0a43      	lsrs	r3, r0, #9
    8d24:	428b      	cmp	r3, r1
    8d26:	d301      	bcc.n	8d2c <__divsi3+0x94>
    8d28:	024b      	lsls	r3, r1, #9
    8d2a:	1ac0      	subs	r0, r0, r3
    8d2c:	4152      	adcs	r2, r2
    8d2e:	0a03      	lsrs	r3, r0, #8
    8d30:	428b      	cmp	r3, r1
    8d32:	d301      	bcc.n	8d38 <__divsi3+0xa0>
    8d34:	020b      	lsls	r3, r1, #8
    8d36:	1ac0      	subs	r0, r0, r3
    8d38:	4152      	adcs	r2, r2
    8d3a:	d2cd      	bcs.n	8cd8 <__divsi3+0x40>
    8d3c:	09c3      	lsrs	r3, r0, #7
    8d3e:	428b      	cmp	r3, r1
    8d40:	d301      	bcc.n	8d46 <__divsi3+0xae>
    8d42:	01cb      	lsls	r3, r1, #7
    8d44:	1ac0      	subs	r0, r0, r3
    8d46:	4152      	adcs	r2, r2
    8d48:	0983      	lsrs	r3, r0, #6
    8d4a:	428b      	cmp	r3, r1
    8d4c:	d301      	bcc.n	8d52 <__divsi3+0xba>
    8d4e:	018b      	lsls	r3, r1, #6
    8d50:	1ac0      	subs	r0, r0, r3
    8d52:	4152      	adcs	r2, r2
    8d54:	0943      	lsrs	r3, r0, #5
    8d56:	428b      	cmp	r3, r1
    8d58:	d301      	bcc.n	8d5e <__divsi3+0xc6>
    8d5a:	014b      	lsls	r3, r1, #5
    8d5c:	1ac0      	subs	r0, r0, r3
    8d5e:	4152      	adcs	r2, r2
    8d60:	0903      	lsrs	r3, r0, #4
    8d62:	428b      	cmp	r3, r1
    8d64:	d301      	bcc.n	8d6a <__divsi3+0xd2>
    8d66:	010b      	lsls	r3, r1, #4
    8d68:	1ac0      	subs	r0, r0, r3
    8d6a:	4152      	adcs	r2, r2
    8d6c:	08c3      	lsrs	r3, r0, #3
    8d6e:	428b      	cmp	r3, r1
    8d70:	d301      	bcc.n	8d76 <__divsi3+0xde>
    8d72:	00cb      	lsls	r3, r1, #3
    8d74:	1ac0      	subs	r0, r0, r3
    8d76:	4152      	adcs	r2, r2
    8d78:	0883      	lsrs	r3, r0, #2
    8d7a:	428b      	cmp	r3, r1
    8d7c:	d301      	bcc.n	8d82 <__divsi3+0xea>
    8d7e:	008b      	lsls	r3, r1, #2
    8d80:	1ac0      	subs	r0, r0, r3
    8d82:	4152      	adcs	r2, r2
    8d84:	0843      	lsrs	r3, r0, #1
    8d86:	428b      	cmp	r3, r1
    8d88:	d301      	bcc.n	8d8e <__divsi3+0xf6>
    8d8a:	004b      	lsls	r3, r1, #1
    8d8c:	1ac0      	subs	r0, r0, r3
    8d8e:	4152      	adcs	r2, r2
    8d90:	1a41      	subs	r1, r0, r1
    8d92:	d200      	bcs.n	8d96 <__divsi3+0xfe>
    8d94:	4601      	mov	r1, r0
    8d96:	4152      	adcs	r2, r2
    8d98:	4610      	mov	r0, r2
    8d9a:	4770      	bx	lr
    8d9c:	e05d      	b.n	8e5a <__divsi3+0x1c2>
    8d9e:	0fca      	lsrs	r2, r1, #31
    8da0:	d000      	beq.n	8da4 <__divsi3+0x10c>
    8da2:	4249      	negs	r1, r1
    8da4:	1003      	asrs	r3, r0, #32
    8da6:	d300      	bcc.n	8daa <__divsi3+0x112>
    8da8:	4240      	negs	r0, r0
    8daa:	4053      	eors	r3, r2
    8dac:	2200      	movs	r2, #0
    8dae:	469c      	mov	ip, r3
    8db0:	0903      	lsrs	r3, r0, #4
    8db2:	428b      	cmp	r3, r1
    8db4:	d32d      	bcc.n	8e12 <__divsi3+0x17a>
    8db6:	0a03      	lsrs	r3, r0, #8
    8db8:	428b      	cmp	r3, r1
    8dba:	d312      	bcc.n	8de2 <__divsi3+0x14a>
    8dbc:	22fc      	movs	r2, #252	; 0xfc
    8dbe:	0189      	lsls	r1, r1, #6
    8dc0:	ba12      	rev	r2, r2
    8dc2:	0a03      	lsrs	r3, r0, #8
    8dc4:	428b      	cmp	r3, r1
    8dc6:	d30c      	bcc.n	8de2 <__divsi3+0x14a>
    8dc8:	0189      	lsls	r1, r1, #6
    8dca:	1192      	asrs	r2, r2, #6
    8dcc:	428b      	cmp	r3, r1
    8dce:	d308      	bcc.n	8de2 <__divsi3+0x14a>
    8dd0:	0189      	lsls	r1, r1, #6
    8dd2:	1192      	asrs	r2, r2, #6
    8dd4:	428b      	cmp	r3, r1
    8dd6:	d304      	bcc.n	8de2 <__divsi3+0x14a>
    8dd8:	0189      	lsls	r1, r1, #6
    8dda:	d03a      	beq.n	8e52 <__divsi3+0x1ba>
    8ddc:	1192      	asrs	r2, r2, #6
    8dde:	e000      	b.n	8de2 <__divsi3+0x14a>
    8de0:	0989      	lsrs	r1, r1, #6
    8de2:	09c3      	lsrs	r3, r0, #7
    8de4:	428b      	cmp	r3, r1
    8de6:	d301      	bcc.n	8dec <__divsi3+0x154>
    8de8:	01cb      	lsls	r3, r1, #7
    8dea:	1ac0      	subs	r0, r0, r3
    8dec:	4152      	adcs	r2, r2
    8dee:	0983      	lsrs	r3, r0, #6
    8df0:	428b      	cmp	r3, r1
    8df2:	d301      	bcc.n	8df8 <__divsi3+0x160>
    8df4:	018b      	lsls	r3, r1, #6
    8df6:	1ac0      	subs	r0, r0, r3
    8df8:	4152      	adcs	r2, r2
    8dfa:	0943      	lsrs	r3, r0, #5
    8dfc:	428b      	cmp	r3, r1
    8dfe:	d301      	bcc.n	8e04 <__divsi3+0x16c>
    8e00:	014b      	lsls	r3, r1, #5
    8e02:	1ac0      	subs	r0, r0, r3
    8e04:	4152      	adcs	r2, r2
    8e06:	0903      	lsrs	r3, r0, #4
    8e08:	428b      	cmp	r3, r1
    8e0a:	d301      	bcc.n	8e10 <__divsi3+0x178>
    8e0c:	010b      	lsls	r3, r1, #4
    8e0e:	1ac0      	subs	r0, r0, r3
    8e10:	4152      	adcs	r2, r2
    8e12:	08c3      	lsrs	r3, r0, #3
    8e14:	428b      	cmp	r3, r1
    8e16:	d301      	bcc.n	8e1c <__divsi3+0x184>
    8e18:	00cb      	lsls	r3, r1, #3
    8e1a:	1ac0      	subs	r0, r0, r3
    8e1c:	4152      	adcs	r2, r2
    8e1e:	0883      	lsrs	r3, r0, #2
    8e20:	428b      	cmp	r3, r1
    8e22:	d301      	bcc.n	8e28 <__divsi3+0x190>
    8e24:	008b      	lsls	r3, r1, #2
    8e26:	1ac0      	subs	r0, r0, r3
    8e28:	4152      	adcs	r2, r2
    8e2a:	d2d9      	bcs.n	8de0 <__divsi3+0x148>
    8e2c:	0843      	lsrs	r3, r0, #1
    8e2e:	428b      	cmp	r3, r1
    8e30:	d301      	bcc.n	8e36 <__divsi3+0x19e>
    8e32:	004b      	lsls	r3, r1, #1
    8e34:	1ac0      	subs	r0, r0, r3
    8e36:	4152      	adcs	r2, r2
    8e38:	1a41      	subs	r1, r0, r1
    8e3a:	d200      	bcs.n	8e3e <__divsi3+0x1a6>
    8e3c:	4601      	mov	r1, r0
    8e3e:	4663      	mov	r3, ip
    8e40:	4152      	adcs	r2, r2
    8e42:	105b      	asrs	r3, r3, #1
    8e44:	4610      	mov	r0, r2
    8e46:	d301      	bcc.n	8e4c <__divsi3+0x1b4>
    8e48:	4240      	negs	r0, r0
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d500      	bpl.n	8e50 <__divsi3+0x1b8>
    8e4e:	4249      	negs	r1, r1
    8e50:	4770      	bx	lr
    8e52:	4663      	mov	r3, ip
    8e54:	105b      	asrs	r3, r3, #1
    8e56:	d300      	bcc.n	8e5a <__divsi3+0x1c2>
    8e58:	4240      	negs	r0, r0
    8e5a:	b501      	push	{r0, lr}
    8e5c:	2000      	movs	r0, #0
    8e5e:	f000 f805 	bl	8e6c <__aeabi_idiv0>
    8e62:	bd02      	pop	{r1, pc}

00008e64 <__aeabi_idivmod>:
    8e64:	2900      	cmp	r1, #0
    8e66:	d0f8      	beq.n	8e5a <__divsi3+0x1c2>
    8e68:	e716      	b.n	8c98 <__divsi3>
    8e6a:	4770      	bx	lr

00008e6c <__aeabi_idiv0>:
    8e6c:	4770      	bx	lr
    8e6e:	46c0      	nop			; (mov r8, r8)

00008e70 <__clzsi2>:
    8e70:	211c      	movs	r1, #28
    8e72:	2301      	movs	r3, #1
    8e74:	041b      	lsls	r3, r3, #16
    8e76:	4298      	cmp	r0, r3
    8e78:	d301      	bcc.n	8e7e <__clzsi2+0xe>
    8e7a:	0c00      	lsrs	r0, r0, #16
    8e7c:	3910      	subs	r1, #16
    8e7e:	0a1b      	lsrs	r3, r3, #8
    8e80:	4298      	cmp	r0, r3
    8e82:	d301      	bcc.n	8e88 <__clzsi2+0x18>
    8e84:	0a00      	lsrs	r0, r0, #8
    8e86:	3908      	subs	r1, #8
    8e88:	091b      	lsrs	r3, r3, #4
    8e8a:	4298      	cmp	r0, r3
    8e8c:	d301      	bcc.n	8e92 <__clzsi2+0x22>
    8e8e:	0900      	lsrs	r0, r0, #4
    8e90:	3904      	subs	r1, #4
    8e92:	a202      	add	r2, pc, #8	; (adr r2, 8e9c <__clzsi2+0x2c>)
    8e94:	5c10      	ldrb	r0, [r2, r0]
    8e96:	1840      	adds	r0, r0, r1
    8e98:	4770      	bx	lr
    8e9a:	46c0      	nop			; (mov r8, r8)
    8e9c:	02020304 	.word	0x02020304
    8ea0:	01010101 	.word	0x01010101
	...

00008eac <__ctzsi2>:
    8eac:	4241      	negs	r1, r0
    8eae:	4008      	ands	r0, r1
    8eb0:	211c      	movs	r1, #28
    8eb2:	2301      	movs	r3, #1
    8eb4:	041b      	lsls	r3, r3, #16
    8eb6:	4298      	cmp	r0, r3
    8eb8:	d301      	bcc.n	8ebe <__ctzsi2+0x12>
    8eba:	0c00      	lsrs	r0, r0, #16
    8ebc:	3910      	subs	r1, #16
    8ebe:	0a1b      	lsrs	r3, r3, #8
    8ec0:	4298      	cmp	r0, r3
    8ec2:	d301      	bcc.n	8ec8 <__ctzsi2+0x1c>
    8ec4:	0a00      	lsrs	r0, r0, #8
    8ec6:	3908      	subs	r1, #8
    8ec8:	091b      	lsrs	r3, r3, #4
    8eca:	4298      	cmp	r0, r3
    8ecc:	d301      	bcc.n	8ed2 <__ctzsi2+0x26>
    8ece:	0900      	lsrs	r0, r0, #4
    8ed0:	3904      	subs	r1, #4
    8ed2:	a202      	add	r2, pc, #8	; (adr r2, 8edc <__ctzsi2+0x30>)
    8ed4:	5c10      	ldrb	r0, [r2, r0]
    8ed6:	1a40      	subs	r0, r0, r1
    8ed8:	4770      	bx	lr
    8eda:	46c0      	nop			; (mov r8, r8)
    8edc:	1d1d1c1b 	.word	0x1d1d1c1b
    8ee0:	1e1e1e1e 	.word	0x1e1e1e1e
    8ee4:	1f1f1f1f 	.word	0x1f1f1f1f
    8ee8:	1f1f1f1f 	.word	0x1f1f1f1f

00008eec <__aeabi_uldivmod>:
    8eec:	2b00      	cmp	r3, #0
    8eee:	d111      	bne.n	8f14 <__aeabi_uldivmod+0x28>
    8ef0:	2a00      	cmp	r2, #0
    8ef2:	d10f      	bne.n	8f14 <__aeabi_uldivmod+0x28>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	d100      	bne.n	8efa <__aeabi_uldivmod+0xe>
    8ef8:	2800      	cmp	r0, #0
    8efa:	d002      	beq.n	8f02 <__aeabi_uldivmod+0x16>
    8efc:	2100      	movs	r1, #0
    8efe:	43c9      	mvns	r1, r1
    8f00:	1c08      	adds	r0, r1, #0
    8f02:	b407      	push	{r0, r1, r2}
    8f04:	4802      	ldr	r0, [pc, #8]	; (8f10 <__aeabi_uldivmod+0x24>)
    8f06:	a102      	add	r1, pc, #8	; (adr r1, 8f10 <__aeabi_uldivmod+0x24>)
    8f08:	1840      	adds	r0, r0, r1
    8f0a:	9002      	str	r0, [sp, #8]
    8f0c:	bd03      	pop	{r0, r1, pc}
    8f0e:	46c0      	nop			; (mov r8, r8)
    8f10:	ffffff5d 	.word	0xffffff5d
    8f14:	b403      	push	{r0, r1}
    8f16:	4668      	mov	r0, sp
    8f18:	b501      	push	{r0, lr}
    8f1a:	9802      	ldr	r0, [sp, #8]
    8f1c:	f000 f830 	bl	8f80 <__udivmoddi4>
    8f20:	9b01      	ldr	r3, [sp, #4]
    8f22:	469e      	mov	lr, r3
    8f24:	b002      	add	sp, #8
    8f26:	bc0c      	pop	{r2, r3}
    8f28:	4770      	bx	lr
    8f2a:	46c0      	nop			; (mov r8, r8)

00008f2c <__aeabi_lmul>:
    8f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f2e:	46ce      	mov	lr, r9
    8f30:	4647      	mov	r7, r8
    8f32:	0415      	lsls	r5, r2, #16
    8f34:	0c2d      	lsrs	r5, r5, #16
    8f36:	002e      	movs	r6, r5
    8f38:	b580      	push	{r7, lr}
    8f3a:	0407      	lsls	r7, r0, #16
    8f3c:	0c14      	lsrs	r4, r2, #16
    8f3e:	0c3f      	lsrs	r7, r7, #16
    8f40:	4699      	mov	r9, r3
    8f42:	0c03      	lsrs	r3, r0, #16
    8f44:	437e      	muls	r6, r7
    8f46:	435d      	muls	r5, r3
    8f48:	4367      	muls	r7, r4
    8f4a:	4363      	muls	r3, r4
    8f4c:	197f      	adds	r7, r7, r5
    8f4e:	0c34      	lsrs	r4, r6, #16
    8f50:	19e4      	adds	r4, r4, r7
    8f52:	469c      	mov	ip, r3
    8f54:	42a5      	cmp	r5, r4
    8f56:	d903      	bls.n	8f60 <__aeabi_lmul+0x34>
    8f58:	2380      	movs	r3, #128	; 0x80
    8f5a:	025b      	lsls	r3, r3, #9
    8f5c:	4698      	mov	r8, r3
    8f5e:	44c4      	add	ip, r8
    8f60:	464b      	mov	r3, r9
    8f62:	4351      	muls	r1, r2
    8f64:	4343      	muls	r3, r0
    8f66:	0436      	lsls	r6, r6, #16
    8f68:	0c36      	lsrs	r6, r6, #16
    8f6a:	0c25      	lsrs	r5, r4, #16
    8f6c:	0424      	lsls	r4, r4, #16
    8f6e:	4465      	add	r5, ip
    8f70:	19a4      	adds	r4, r4, r6
    8f72:	1859      	adds	r1, r3, r1
    8f74:	1949      	adds	r1, r1, r5
    8f76:	0020      	movs	r0, r4
    8f78:	bc0c      	pop	{r2, r3}
    8f7a:	4690      	mov	r8, r2
    8f7c:	4699      	mov	r9, r3
    8f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008f80 <__udivmoddi4>:
    8f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f82:	4657      	mov	r7, sl
    8f84:	464e      	mov	r6, r9
    8f86:	4645      	mov	r5, r8
    8f88:	46de      	mov	lr, fp
    8f8a:	b5e0      	push	{r5, r6, r7, lr}
    8f8c:	0004      	movs	r4, r0
    8f8e:	b083      	sub	sp, #12
    8f90:	000d      	movs	r5, r1
    8f92:	4692      	mov	sl, r2
    8f94:	4699      	mov	r9, r3
    8f96:	428b      	cmp	r3, r1
    8f98:	d82f      	bhi.n	8ffa <__udivmoddi4+0x7a>
    8f9a:	d02c      	beq.n	8ff6 <__udivmoddi4+0x76>
    8f9c:	4649      	mov	r1, r9
    8f9e:	4650      	mov	r0, sl
    8fa0:	f000 f8ae 	bl	9100 <__clzdi2>
    8fa4:	0029      	movs	r1, r5
    8fa6:	0006      	movs	r6, r0
    8fa8:	0020      	movs	r0, r4
    8faa:	f000 f8a9 	bl	9100 <__clzdi2>
    8fae:	1a33      	subs	r3, r6, r0
    8fb0:	4698      	mov	r8, r3
    8fb2:	3b20      	subs	r3, #32
    8fb4:	469b      	mov	fp, r3
    8fb6:	d500      	bpl.n	8fba <__udivmoddi4+0x3a>
    8fb8:	e074      	b.n	90a4 <__udivmoddi4+0x124>
    8fba:	4653      	mov	r3, sl
    8fbc:	465a      	mov	r2, fp
    8fbe:	4093      	lsls	r3, r2
    8fc0:	001f      	movs	r7, r3
    8fc2:	4653      	mov	r3, sl
    8fc4:	4642      	mov	r2, r8
    8fc6:	4093      	lsls	r3, r2
    8fc8:	001e      	movs	r6, r3
    8fca:	42af      	cmp	r7, r5
    8fcc:	d829      	bhi.n	9022 <__udivmoddi4+0xa2>
    8fce:	d026      	beq.n	901e <__udivmoddi4+0x9e>
    8fd0:	465b      	mov	r3, fp
    8fd2:	1ba4      	subs	r4, r4, r6
    8fd4:	41bd      	sbcs	r5, r7
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	da00      	bge.n	8fdc <__udivmoddi4+0x5c>
    8fda:	e079      	b.n	90d0 <__udivmoddi4+0x150>
    8fdc:	2200      	movs	r2, #0
    8fde:	2300      	movs	r3, #0
    8fe0:	9200      	str	r2, [sp, #0]
    8fe2:	9301      	str	r3, [sp, #4]
    8fe4:	2301      	movs	r3, #1
    8fe6:	465a      	mov	r2, fp
    8fe8:	4093      	lsls	r3, r2
    8fea:	9301      	str	r3, [sp, #4]
    8fec:	2301      	movs	r3, #1
    8fee:	4642      	mov	r2, r8
    8ff0:	4093      	lsls	r3, r2
    8ff2:	9300      	str	r3, [sp, #0]
    8ff4:	e019      	b.n	902a <__udivmoddi4+0xaa>
    8ff6:	4282      	cmp	r2, r0
    8ff8:	d9d0      	bls.n	8f9c <__udivmoddi4+0x1c>
    8ffa:	2200      	movs	r2, #0
    8ffc:	2300      	movs	r3, #0
    8ffe:	9200      	str	r2, [sp, #0]
    9000:	9301      	str	r3, [sp, #4]
    9002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9004:	2b00      	cmp	r3, #0
    9006:	d001      	beq.n	900c <__udivmoddi4+0x8c>
    9008:	601c      	str	r4, [r3, #0]
    900a:	605d      	str	r5, [r3, #4]
    900c:	9800      	ldr	r0, [sp, #0]
    900e:	9901      	ldr	r1, [sp, #4]
    9010:	b003      	add	sp, #12
    9012:	bc3c      	pop	{r2, r3, r4, r5}
    9014:	4690      	mov	r8, r2
    9016:	4699      	mov	r9, r3
    9018:	46a2      	mov	sl, r4
    901a:	46ab      	mov	fp, r5
    901c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    901e:	42a3      	cmp	r3, r4
    9020:	d9d6      	bls.n	8fd0 <__udivmoddi4+0x50>
    9022:	2200      	movs	r2, #0
    9024:	2300      	movs	r3, #0
    9026:	9200      	str	r2, [sp, #0]
    9028:	9301      	str	r3, [sp, #4]
    902a:	4643      	mov	r3, r8
    902c:	2b00      	cmp	r3, #0
    902e:	d0e8      	beq.n	9002 <__udivmoddi4+0x82>
    9030:	07fb      	lsls	r3, r7, #31
    9032:	0872      	lsrs	r2, r6, #1
    9034:	431a      	orrs	r2, r3
    9036:	4646      	mov	r6, r8
    9038:	087b      	lsrs	r3, r7, #1
    903a:	e00e      	b.n	905a <__udivmoddi4+0xda>
    903c:	42ab      	cmp	r3, r5
    903e:	d101      	bne.n	9044 <__udivmoddi4+0xc4>
    9040:	42a2      	cmp	r2, r4
    9042:	d80c      	bhi.n	905e <__udivmoddi4+0xde>
    9044:	1aa4      	subs	r4, r4, r2
    9046:	419d      	sbcs	r5, r3
    9048:	2001      	movs	r0, #1
    904a:	1924      	adds	r4, r4, r4
    904c:	416d      	adcs	r5, r5
    904e:	2100      	movs	r1, #0
    9050:	3e01      	subs	r6, #1
    9052:	1824      	adds	r4, r4, r0
    9054:	414d      	adcs	r5, r1
    9056:	2e00      	cmp	r6, #0
    9058:	d006      	beq.n	9068 <__udivmoddi4+0xe8>
    905a:	42ab      	cmp	r3, r5
    905c:	d9ee      	bls.n	903c <__udivmoddi4+0xbc>
    905e:	3e01      	subs	r6, #1
    9060:	1924      	adds	r4, r4, r4
    9062:	416d      	adcs	r5, r5
    9064:	2e00      	cmp	r6, #0
    9066:	d1f8      	bne.n	905a <__udivmoddi4+0xda>
    9068:	465b      	mov	r3, fp
    906a:	9800      	ldr	r0, [sp, #0]
    906c:	9901      	ldr	r1, [sp, #4]
    906e:	1900      	adds	r0, r0, r4
    9070:	4169      	adcs	r1, r5
    9072:	2b00      	cmp	r3, #0
    9074:	db22      	blt.n	90bc <__udivmoddi4+0x13c>
    9076:	002b      	movs	r3, r5
    9078:	465a      	mov	r2, fp
    907a:	40d3      	lsrs	r3, r2
    907c:	002a      	movs	r2, r5
    907e:	4644      	mov	r4, r8
    9080:	40e2      	lsrs	r2, r4
    9082:	001c      	movs	r4, r3
    9084:	465b      	mov	r3, fp
    9086:	0015      	movs	r5, r2
    9088:	2b00      	cmp	r3, #0
    908a:	db2c      	blt.n	90e6 <__udivmoddi4+0x166>
    908c:	0026      	movs	r6, r4
    908e:	409e      	lsls	r6, r3
    9090:	0033      	movs	r3, r6
    9092:	0026      	movs	r6, r4
    9094:	4647      	mov	r7, r8
    9096:	40be      	lsls	r6, r7
    9098:	0032      	movs	r2, r6
    909a:	1a80      	subs	r0, r0, r2
    909c:	4199      	sbcs	r1, r3
    909e:	9000      	str	r0, [sp, #0]
    90a0:	9101      	str	r1, [sp, #4]
    90a2:	e7ae      	b.n	9002 <__udivmoddi4+0x82>
    90a4:	4642      	mov	r2, r8
    90a6:	2320      	movs	r3, #32
    90a8:	1a9b      	subs	r3, r3, r2
    90aa:	4652      	mov	r2, sl
    90ac:	40da      	lsrs	r2, r3
    90ae:	4641      	mov	r1, r8
    90b0:	0013      	movs	r3, r2
    90b2:	464a      	mov	r2, r9
    90b4:	408a      	lsls	r2, r1
    90b6:	0017      	movs	r7, r2
    90b8:	431f      	orrs	r7, r3
    90ba:	e782      	b.n	8fc2 <__udivmoddi4+0x42>
    90bc:	4642      	mov	r2, r8
    90be:	2320      	movs	r3, #32
    90c0:	1a9b      	subs	r3, r3, r2
    90c2:	002a      	movs	r2, r5
    90c4:	4646      	mov	r6, r8
    90c6:	409a      	lsls	r2, r3
    90c8:	0023      	movs	r3, r4
    90ca:	40f3      	lsrs	r3, r6
    90cc:	4313      	orrs	r3, r2
    90ce:	e7d5      	b.n	907c <__udivmoddi4+0xfc>
    90d0:	4642      	mov	r2, r8
    90d2:	2320      	movs	r3, #32
    90d4:	2100      	movs	r1, #0
    90d6:	1a9b      	subs	r3, r3, r2
    90d8:	2200      	movs	r2, #0
    90da:	9100      	str	r1, [sp, #0]
    90dc:	9201      	str	r2, [sp, #4]
    90de:	2201      	movs	r2, #1
    90e0:	40da      	lsrs	r2, r3
    90e2:	9201      	str	r2, [sp, #4]
    90e4:	e782      	b.n	8fec <__udivmoddi4+0x6c>
    90e6:	4642      	mov	r2, r8
    90e8:	2320      	movs	r3, #32
    90ea:	0026      	movs	r6, r4
    90ec:	1a9b      	subs	r3, r3, r2
    90ee:	40de      	lsrs	r6, r3
    90f0:	002f      	movs	r7, r5
    90f2:	46b4      	mov	ip, r6
    90f4:	4097      	lsls	r7, r2
    90f6:	4666      	mov	r6, ip
    90f8:	003b      	movs	r3, r7
    90fa:	4333      	orrs	r3, r6
    90fc:	e7c9      	b.n	9092 <__udivmoddi4+0x112>
    90fe:	46c0      	nop			; (mov r8, r8)

00009100 <__clzdi2>:
    9100:	b510      	push	{r4, lr}
    9102:	2900      	cmp	r1, #0
    9104:	d103      	bne.n	910e <__clzdi2+0xe>
    9106:	f7ff feb3 	bl	8e70 <__clzsi2>
    910a:	3020      	adds	r0, #32
    910c:	e002      	b.n	9114 <__clzdi2+0x14>
    910e:	1c08      	adds	r0, r1, #0
    9110:	f7ff feae 	bl	8e70 <__clzsi2>
    9114:	bd10      	pop	{r4, pc}
    9116:	46c0      	nop			; (mov r8, r8)

00009118 <__libc_init_array>:
    9118:	b570      	push	{r4, r5, r6, lr}
    911a:	2600      	movs	r6, #0
    911c:	4d0c      	ldr	r5, [pc, #48]	; (9150 <__libc_init_array+0x38>)
    911e:	4c0d      	ldr	r4, [pc, #52]	; (9154 <__libc_init_array+0x3c>)
    9120:	1b64      	subs	r4, r4, r5
    9122:	10a4      	asrs	r4, r4, #2
    9124:	42a6      	cmp	r6, r4
    9126:	d109      	bne.n	913c <__libc_init_array+0x24>
    9128:	2600      	movs	r6, #0
    912a:	f001 fd01 	bl	ab30 <_init>
    912e:	4d0a      	ldr	r5, [pc, #40]	; (9158 <__libc_init_array+0x40>)
    9130:	4c0a      	ldr	r4, [pc, #40]	; (915c <__libc_init_array+0x44>)
    9132:	1b64      	subs	r4, r4, r5
    9134:	10a4      	asrs	r4, r4, #2
    9136:	42a6      	cmp	r6, r4
    9138:	d105      	bne.n	9146 <__libc_init_array+0x2e>
    913a:	bd70      	pop	{r4, r5, r6, pc}
    913c:	00b3      	lsls	r3, r6, #2
    913e:	58eb      	ldr	r3, [r5, r3]
    9140:	4798      	blx	r3
    9142:	3601      	adds	r6, #1
    9144:	e7ee      	b.n	9124 <__libc_init_array+0xc>
    9146:	00b3      	lsls	r3, r6, #2
    9148:	58eb      	ldr	r3, [r5, r3]
    914a:	4798      	blx	r3
    914c:	3601      	adds	r6, #1
    914e:	e7f2      	b.n	9136 <__libc_init_array+0x1e>
    9150:	0000ab3c 	.word	0x0000ab3c
    9154:	0000ab3c 	.word	0x0000ab3c
    9158:	0000ab3c 	.word	0x0000ab3c
    915c:	0000ab40 	.word	0x0000ab40

00009160 <memcpy>:
    9160:	2300      	movs	r3, #0
    9162:	b510      	push	{r4, lr}
    9164:	429a      	cmp	r2, r3
    9166:	d100      	bne.n	916a <memcpy+0xa>
    9168:	bd10      	pop	{r4, pc}
    916a:	5ccc      	ldrb	r4, [r1, r3]
    916c:	54c4      	strb	r4, [r0, r3]
    916e:	3301      	adds	r3, #1
    9170:	e7f8      	b.n	9164 <memcpy+0x4>

00009172 <memset>:
    9172:	0003      	movs	r3, r0
    9174:	1882      	adds	r2, r0, r2
    9176:	4293      	cmp	r3, r2
    9178:	d100      	bne.n	917c <memset+0xa>
    917a:	4770      	bx	lr
    917c:	7019      	strb	r1, [r3, #0]
    917e:	3301      	adds	r3, #1
    9180:	e7f9      	b.n	9176 <memset+0x4>
	...

00009184 <iprintf>:
    9184:	b40f      	push	{r0, r1, r2, r3}
    9186:	4b0b      	ldr	r3, [pc, #44]	; (91b4 <iprintf+0x30>)
    9188:	b513      	push	{r0, r1, r4, lr}
    918a:	681c      	ldr	r4, [r3, #0]
    918c:	2c00      	cmp	r4, #0
    918e:	d005      	beq.n	919c <iprintf+0x18>
    9190:	69a3      	ldr	r3, [r4, #24]
    9192:	2b00      	cmp	r3, #0
    9194:	d102      	bne.n	919c <iprintf+0x18>
    9196:	0020      	movs	r0, r4
    9198:	f000 f9bc 	bl	9514 <__sinit>
    919c:	ab05      	add	r3, sp, #20
    919e:	9a04      	ldr	r2, [sp, #16]
    91a0:	68a1      	ldr	r1, [r4, #8]
    91a2:	0020      	movs	r0, r4
    91a4:	9301      	str	r3, [sp, #4]
    91a6:	f000 fb91 	bl	98cc <_vfiprintf_r>
    91aa:	bc16      	pop	{r1, r2, r4}
    91ac:	bc08      	pop	{r3}
    91ae:	b004      	add	sp, #16
    91b0:	4718      	bx	r3
    91b2:	46c0      	nop			; (mov r8, r8)
    91b4:	20000128 	.word	0x20000128

000091b8 <setbuf>:
    91b8:	424a      	negs	r2, r1
    91ba:	414a      	adcs	r2, r1
    91bc:	2380      	movs	r3, #128	; 0x80
    91be:	b510      	push	{r4, lr}
    91c0:	0052      	lsls	r2, r2, #1
    91c2:	00db      	lsls	r3, r3, #3
    91c4:	f000 f802 	bl	91cc <setvbuf>
    91c8:	bd10      	pop	{r4, pc}
	...

000091cc <setvbuf>:
    91cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ce:	001d      	movs	r5, r3
    91d0:	4b4f      	ldr	r3, [pc, #316]	; (9310 <setvbuf+0x144>)
    91d2:	b085      	sub	sp, #20
    91d4:	681e      	ldr	r6, [r3, #0]
    91d6:	0004      	movs	r4, r0
    91d8:	000f      	movs	r7, r1
    91da:	9200      	str	r2, [sp, #0]
    91dc:	2e00      	cmp	r6, #0
    91de:	d005      	beq.n	91ec <setvbuf+0x20>
    91e0:	69b3      	ldr	r3, [r6, #24]
    91e2:	2b00      	cmp	r3, #0
    91e4:	d102      	bne.n	91ec <setvbuf+0x20>
    91e6:	0030      	movs	r0, r6
    91e8:	f000 f994 	bl	9514 <__sinit>
    91ec:	4b49      	ldr	r3, [pc, #292]	; (9314 <setvbuf+0x148>)
    91ee:	429c      	cmp	r4, r3
    91f0:	d150      	bne.n	9294 <setvbuf+0xc8>
    91f2:	6874      	ldr	r4, [r6, #4]
    91f4:	9b00      	ldr	r3, [sp, #0]
    91f6:	2b02      	cmp	r3, #2
    91f8:	d005      	beq.n	9206 <setvbuf+0x3a>
    91fa:	2b01      	cmp	r3, #1
    91fc:	d900      	bls.n	9200 <setvbuf+0x34>
    91fe:	e084      	b.n	930a <setvbuf+0x13e>
    9200:	2d00      	cmp	r5, #0
    9202:	da00      	bge.n	9206 <setvbuf+0x3a>
    9204:	e081      	b.n	930a <setvbuf+0x13e>
    9206:	0021      	movs	r1, r4
    9208:	0030      	movs	r0, r6
    920a:	f000 f915 	bl	9438 <_fflush_r>
    920e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9210:	2900      	cmp	r1, #0
    9212:	d008      	beq.n	9226 <setvbuf+0x5a>
    9214:	0023      	movs	r3, r4
    9216:	3344      	adds	r3, #68	; 0x44
    9218:	4299      	cmp	r1, r3
    921a:	d002      	beq.n	9222 <setvbuf+0x56>
    921c:	0030      	movs	r0, r6
    921e:	f000 fa85 	bl	972c <_free_r>
    9222:	2300      	movs	r3, #0
    9224:	6363      	str	r3, [r4, #52]	; 0x34
    9226:	2300      	movs	r3, #0
    9228:	61a3      	str	r3, [r4, #24]
    922a:	6063      	str	r3, [r4, #4]
    922c:	89a3      	ldrh	r3, [r4, #12]
    922e:	061b      	lsls	r3, r3, #24
    9230:	d503      	bpl.n	923a <setvbuf+0x6e>
    9232:	6921      	ldr	r1, [r4, #16]
    9234:	0030      	movs	r0, r6
    9236:	f000 fa79 	bl	972c <_free_r>
    923a:	89a3      	ldrh	r3, [r4, #12]
    923c:	4a36      	ldr	r2, [pc, #216]	; (9318 <setvbuf+0x14c>)
    923e:	4013      	ands	r3, r2
    9240:	81a3      	strh	r3, [r4, #12]
    9242:	9b00      	ldr	r3, [sp, #0]
    9244:	2b02      	cmp	r3, #2
    9246:	d05a      	beq.n	92fe <setvbuf+0x132>
    9248:	ab03      	add	r3, sp, #12
    924a:	aa02      	add	r2, sp, #8
    924c:	0021      	movs	r1, r4
    924e:	0030      	movs	r0, r6
    9250:	f000 f9f6 	bl	9640 <__swhatbuf_r>
    9254:	89a3      	ldrh	r3, [r4, #12]
    9256:	4318      	orrs	r0, r3
    9258:	81a0      	strh	r0, [r4, #12]
    925a:	2d00      	cmp	r5, #0
    925c:	d124      	bne.n	92a8 <setvbuf+0xdc>
    925e:	9d02      	ldr	r5, [sp, #8]
    9260:	0028      	movs	r0, r5
    9262:	f000 fa59 	bl	9718 <malloc>
    9266:	9501      	str	r5, [sp, #4]
    9268:	1e07      	subs	r7, r0, #0
    926a:	d142      	bne.n	92f2 <setvbuf+0x126>
    926c:	9b02      	ldr	r3, [sp, #8]
    926e:	9301      	str	r3, [sp, #4]
    9270:	42ab      	cmp	r3, r5
    9272:	d139      	bne.n	92e8 <setvbuf+0x11c>
    9274:	2001      	movs	r0, #1
    9276:	4240      	negs	r0, r0
    9278:	2302      	movs	r3, #2
    927a:	89a2      	ldrh	r2, [r4, #12]
    927c:	4313      	orrs	r3, r2
    927e:	81a3      	strh	r3, [r4, #12]
    9280:	2300      	movs	r3, #0
    9282:	60a3      	str	r3, [r4, #8]
    9284:	0023      	movs	r3, r4
    9286:	3347      	adds	r3, #71	; 0x47
    9288:	6023      	str	r3, [r4, #0]
    928a:	6123      	str	r3, [r4, #16]
    928c:	2301      	movs	r3, #1
    928e:	6163      	str	r3, [r4, #20]
    9290:	b005      	add	sp, #20
    9292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9294:	4b21      	ldr	r3, [pc, #132]	; (931c <setvbuf+0x150>)
    9296:	429c      	cmp	r4, r3
    9298:	d101      	bne.n	929e <setvbuf+0xd2>
    929a:	68b4      	ldr	r4, [r6, #8]
    929c:	e7aa      	b.n	91f4 <setvbuf+0x28>
    929e:	4b20      	ldr	r3, [pc, #128]	; (9320 <setvbuf+0x154>)
    92a0:	429c      	cmp	r4, r3
    92a2:	d1a7      	bne.n	91f4 <setvbuf+0x28>
    92a4:	68f4      	ldr	r4, [r6, #12]
    92a6:	e7a5      	b.n	91f4 <setvbuf+0x28>
    92a8:	2f00      	cmp	r7, #0
    92aa:	d0d9      	beq.n	9260 <setvbuf+0x94>
    92ac:	69b3      	ldr	r3, [r6, #24]
    92ae:	2b00      	cmp	r3, #0
    92b0:	d102      	bne.n	92b8 <setvbuf+0xec>
    92b2:	0030      	movs	r0, r6
    92b4:	f000 f92e 	bl	9514 <__sinit>
    92b8:	9b00      	ldr	r3, [sp, #0]
    92ba:	2b01      	cmp	r3, #1
    92bc:	d103      	bne.n	92c6 <setvbuf+0xfa>
    92be:	89a3      	ldrh	r3, [r4, #12]
    92c0:	9a00      	ldr	r2, [sp, #0]
    92c2:	431a      	orrs	r2, r3
    92c4:	81a2      	strh	r2, [r4, #12]
    92c6:	2008      	movs	r0, #8
    92c8:	89a3      	ldrh	r3, [r4, #12]
    92ca:	6027      	str	r7, [r4, #0]
    92cc:	6127      	str	r7, [r4, #16]
    92ce:	6165      	str	r5, [r4, #20]
    92d0:	4018      	ands	r0, r3
    92d2:	d018      	beq.n	9306 <setvbuf+0x13a>
    92d4:	2001      	movs	r0, #1
    92d6:	4018      	ands	r0, r3
    92d8:	2300      	movs	r3, #0
    92da:	4298      	cmp	r0, r3
    92dc:	d011      	beq.n	9302 <setvbuf+0x136>
    92de:	426d      	negs	r5, r5
    92e0:	60a3      	str	r3, [r4, #8]
    92e2:	61a5      	str	r5, [r4, #24]
    92e4:	0018      	movs	r0, r3
    92e6:	e7d3      	b.n	9290 <setvbuf+0xc4>
    92e8:	9801      	ldr	r0, [sp, #4]
    92ea:	f000 fa15 	bl	9718 <malloc>
    92ee:	1e07      	subs	r7, r0, #0
    92f0:	d0c0      	beq.n	9274 <setvbuf+0xa8>
    92f2:	2380      	movs	r3, #128	; 0x80
    92f4:	89a2      	ldrh	r2, [r4, #12]
    92f6:	9d01      	ldr	r5, [sp, #4]
    92f8:	4313      	orrs	r3, r2
    92fa:	81a3      	strh	r3, [r4, #12]
    92fc:	e7d6      	b.n	92ac <setvbuf+0xe0>
    92fe:	2000      	movs	r0, #0
    9300:	e7ba      	b.n	9278 <setvbuf+0xac>
    9302:	60a5      	str	r5, [r4, #8]
    9304:	e7c4      	b.n	9290 <setvbuf+0xc4>
    9306:	60a0      	str	r0, [r4, #8]
    9308:	e7c2      	b.n	9290 <setvbuf+0xc4>
    930a:	2001      	movs	r0, #1
    930c:	4240      	negs	r0, r0
    930e:	e7bf      	b.n	9290 <setvbuf+0xc4>
    9310:	20000128 	.word	0x20000128
    9314:	0000aabc 	.word	0x0000aabc
    9318:	fffff35c 	.word	0xfffff35c
    931c:	0000aadc 	.word	0x0000aadc
    9320:	0000aa9c 	.word	0x0000aa9c

00009324 <__sflush_r>:
    9324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9326:	898a      	ldrh	r2, [r1, #12]
    9328:	0005      	movs	r5, r0
    932a:	000c      	movs	r4, r1
    932c:	0713      	lsls	r3, r2, #28
    932e:	d460      	bmi.n	93f2 <__sflush_r+0xce>
    9330:	684b      	ldr	r3, [r1, #4]
    9332:	2b00      	cmp	r3, #0
    9334:	dc04      	bgt.n	9340 <__sflush_r+0x1c>
    9336:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9338:	2b00      	cmp	r3, #0
    933a:	dc01      	bgt.n	9340 <__sflush_r+0x1c>
    933c:	2000      	movs	r0, #0
    933e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9340:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9342:	2f00      	cmp	r7, #0
    9344:	d0fa      	beq.n	933c <__sflush_r+0x18>
    9346:	2300      	movs	r3, #0
    9348:	682e      	ldr	r6, [r5, #0]
    934a:	602b      	str	r3, [r5, #0]
    934c:	2380      	movs	r3, #128	; 0x80
    934e:	015b      	lsls	r3, r3, #5
    9350:	401a      	ands	r2, r3
    9352:	d034      	beq.n	93be <__sflush_r+0x9a>
    9354:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9356:	89a3      	ldrh	r3, [r4, #12]
    9358:	075b      	lsls	r3, r3, #29
    935a:	d506      	bpl.n	936a <__sflush_r+0x46>
    935c:	6863      	ldr	r3, [r4, #4]
    935e:	1ac0      	subs	r0, r0, r3
    9360:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9362:	2b00      	cmp	r3, #0
    9364:	d001      	beq.n	936a <__sflush_r+0x46>
    9366:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9368:	1ac0      	subs	r0, r0, r3
    936a:	0002      	movs	r2, r0
    936c:	6a21      	ldr	r1, [r4, #32]
    936e:	2300      	movs	r3, #0
    9370:	0028      	movs	r0, r5
    9372:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9374:	47b8      	blx	r7
    9376:	89a1      	ldrh	r1, [r4, #12]
    9378:	1c43      	adds	r3, r0, #1
    937a:	d106      	bne.n	938a <__sflush_r+0x66>
    937c:	682b      	ldr	r3, [r5, #0]
    937e:	2b1d      	cmp	r3, #29
    9380:	d831      	bhi.n	93e6 <__sflush_r+0xc2>
    9382:	4a2c      	ldr	r2, [pc, #176]	; (9434 <__sflush_r+0x110>)
    9384:	40da      	lsrs	r2, r3
    9386:	07d3      	lsls	r3, r2, #31
    9388:	d52d      	bpl.n	93e6 <__sflush_r+0xc2>
    938a:	2300      	movs	r3, #0
    938c:	6063      	str	r3, [r4, #4]
    938e:	6923      	ldr	r3, [r4, #16]
    9390:	6023      	str	r3, [r4, #0]
    9392:	04cb      	lsls	r3, r1, #19
    9394:	d505      	bpl.n	93a2 <__sflush_r+0x7e>
    9396:	1c43      	adds	r3, r0, #1
    9398:	d102      	bne.n	93a0 <__sflush_r+0x7c>
    939a:	682b      	ldr	r3, [r5, #0]
    939c:	2b00      	cmp	r3, #0
    939e:	d100      	bne.n	93a2 <__sflush_r+0x7e>
    93a0:	6560      	str	r0, [r4, #84]	; 0x54
    93a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    93a4:	602e      	str	r6, [r5, #0]
    93a6:	2900      	cmp	r1, #0
    93a8:	d0c8      	beq.n	933c <__sflush_r+0x18>
    93aa:	0023      	movs	r3, r4
    93ac:	3344      	adds	r3, #68	; 0x44
    93ae:	4299      	cmp	r1, r3
    93b0:	d002      	beq.n	93b8 <__sflush_r+0x94>
    93b2:	0028      	movs	r0, r5
    93b4:	f000 f9ba 	bl	972c <_free_r>
    93b8:	2000      	movs	r0, #0
    93ba:	6360      	str	r0, [r4, #52]	; 0x34
    93bc:	e7bf      	b.n	933e <__sflush_r+0x1a>
    93be:	2301      	movs	r3, #1
    93c0:	6a21      	ldr	r1, [r4, #32]
    93c2:	0028      	movs	r0, r5
    93c4:	47b8      	blx	r7
    93c6:	1c43      	adds	r3, r0, #1
    93c8:	d1c5      	bne.n	9356 <__sflush_r+0x32>
    93ca:	682b      	ldr	r3, [r5, #0]
    93cc:	2b00      	cmp	r3, #0
    93ce:	d0c2      	beq.n	9356 <__sflush_r+0x32>
    93d0:	2b1d      	cmp	r3, #29
    93d2:	d001      	beq.n	93d8 <__sflush_r+0xb4>
    93d4:	2b16      	cmp	r3, #22
    93d6:	d101      	bne.n	93dc <__sflush_r+0xb8>
    93d8:	602e      	str	r6, [r5, #0]
    93da:	e7af      	b.n	933c <__sflush_r+0x18>
    93dc:	2340      	movs	r3, #64	; 0x40
    93de:	89a2      	ldrh	r2, [r4, #12]
    93e0:	4313      	orrs	r3, r2
    93e2:	81a3      	strh	r3, [r4, #12]
    93e4:	e7ab      	b.n	933e <__sflush_r+0x1a>
    93e6:	2340      	movs	r3, #64	; 0x40
    93e8:	430b      	orrs	r3, r1
    93ea:	2001      	movs	r0, #1
    93ec:	81a3      	strh	r3, [r4, #12]
    93ee:	4240      	negs	r0, r0
    93f0:	e7a5      	b.n	933e <__sflush_r+0x1a>
    93f2:	690f      	ldr	r7, [r1, #16]
    93f4:	2f00      	cmp	r7, #0
    93f6:	d0a1      	beq.n	933c <__sflush_r+0x18>
    93f8:	680b      	ldr	r3, [r1, #0]
    93fa:	600f      	str	r7, [r1, #0]
    93fc:	1bdb      	subs	r3, r3, r7
    93fe:	9301      	str	r3, [sp, #4]
    9400:	2300      	movs	r3, #0
    9402:	0792      	lsls	r2, r2, #30
    9404:	d100      	bne.n	9408 <__sflush_r+0xe4>
    9406:	694b      	ldr	r3, [r1, #20]
    9408:	60a3      	str	r3, [r4, #8]
    940a:	9b01      	ldr	r3, [sp, #4]
    940c:	2b00      	cmp	r3, #0
    940e:	dc00      	bgt.n	9412 <__sflush_r+0xee>
    9410:	e794      	b.n	933c <__sflush_r+0x18>
    9412:	9b01      	ldr	r3, [sp, #4]
    9414:	003a      	movs	r2, r7
    9416:	6a21      	ldr	r1, [r4, #32]
    9418:	0028      	movs	r0, r5
    941a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    941c:	47b0      	blx	r6
    941e:	2800      	cmp	r0, #0
    9420:	dc03      	bgt.n	942a <__sflush_r+0x106>
    9422:	2340      	movs	r3, #64	; 0x40
    9424:	89a2      	ldrh	r2, [r4, #12]
    9426:	4313      	orrs	r3, r2
    9428:	e7df      	b.n	93ea <__sflush_r+0xc6>
    942a:	9b01      	ldr	r3, [sp, #4]
    942c:	183f      	adds	r7, r7, r0
    942e:	1a1b      	subs	r3, r3, r0
    9430:	9301      	str	r3, [sp, #4]
    9432:	e7ea      	b.n	940a <__sflush_r+0xe6>
    9434:	20400001 	.word	0x20400001

00009438 <_fflush_r>:
    9438:	690b      	ldr	r3, [r1, #16]
    943a:	b570      	push	{r4, r5, r6, lr}
    943c:	0005      	movs	r5, r0
    943e:	000c      	movs	r4, r1
    9440:	2b00      	cmp	r3, #0
    9442:	d101      	bne.n	9448 <_fflush_r+0x10>
    9444:	2000      	movs	r0, #0
    9446:	bd70      	pop	{r4, r5, r6, pc}
    9448:	2800      	cmp	r0, #0
    944a:	d004      	beq.n	9456 <_fflush_r+0x1e>
    944c:	6983      	ldr	r3, [r0, #24]
    944e:	2b00      	cmp	r3, #0
    9450:	d101      	bne.n	9456 <_fflush_r+0x1e>
    9452:	f000 f85f 	bl	9514 <__sinit>
    9456:	4b0b      	ldr	r3, [pc, #44]	; (9484 <_fflush_r+0x4c>)
    9458:	429c      	cmp	r4, r3
    945a:	d109      	bne.n	9470 <_fflush_r+0x38>
    945c:	686c      	ldr	r4, [r5, #4]
    945e:	220c      	movs	r2, #12
    9460:	5ea3      	ldrsh	r3, [r4, r2]
    9462:	2b00      	cmp	r3, #0
    9464:	d0ee      	beq.n	9444 <_fflush_r+0xc>
    9466:	0021      	movs	r1, r4
    9468:	0028      	movs	r0, r5
    946a:	f7ff ff5b 	bl	9324 <__sflush_r>
    946e:	e7ea      	b.n	9446 <_fflush_r+0xe>
    9470:	4b05      	ldr	r3, [pc, #20]	; (9488 <_fflush_r+0x50>)
    9472:	429c      	cmp	r4, r3
    9474:	d101      	bne.n	947a <_fflush_r+0x42>
    9476:	68ac      	ldr	r4, [r5, #8]
    9478:	e7f1      	b.n	945e <_fflush_r+0x26>
    947a:	4b04      	ldr	r3, [pc, #16]	; (948c <_fflush_r+0x54>)
    947c:	429c      	cmp	r4, r3
    947e:	d1ee      	bne.n	945e <_fflush_r+0x26>
    9480:	68ec      	ldr	r4, [r5, #12]
    9482:	e7ec      	b.n	945e <_fflush_r+0x26>
    9484:	0000aabc 	.word	0x0000aabc
    9488:	0000aadc 	.word	0x0000aadc
    948c:	0000aa9c 	.word	0x0000aa9c

00009490 <_cleanup_r>:
    9490:	b510      	push	{r4, lr}
    9492:	4902      	ldr	r1, [pc, #8]	; (949c <_cleanup_r+0xc>)
    9494:	f000 f8b2 	bl	95fc <_fwalk_reent>
    9498:	bd10      	pop	{r4, pc}
    949a:	46c0      	nop			; (mov r8, r8)
    949c:	00009439 	.word	0x00009439

000094a0 <std.isra.0>:
    94a0:	2300      	movs	r3, #0
    94a2:	b510      	push	{r4, lr}
    94a4:	0004      	movs	r4, r0
    94a6:	6003      	str	r3, [r0, #0]
    94a8:	6043      	str	r3, [r0, #4]
    94aa:	6083      	str	r3, [r0, #8]
    94ac:	8181      	strh	r1, [r0, #12]
    94ae:	6643      	str	r3, [r0, #100]	; 0x64
    94b0:	81c2      	strh	r2, [r0, #14]
    94b2:	6103      	str	r3, [r0, #16]
    94b4:	6143      	str	r3, [r0, #20]
    94b6:	6183      	str	r3, [r0, #24]
    94b8:	0019      	movs	r1, r3
    94ba:	2208      	movs	r2, #8
    94bc:	305c      	adds	r0, #92	; 0x5c
    94be:	f7ff fe58 	bl	9172 <memset>
    94c2:	4b05      	ldr	r3, [pc, #20]	; (94d8 <std.isra.0+0x38>)
    94c4:	6224      	str	r4, [r4, #32]
    94c6:	6263      	str	r3, [r4, #36]	; 0x24
    94c8:	4b04      	ldr	r3, [pc, #16]	; (94dc <std.isra.0+0x3c>)
    94ca:	62a3      	str	r3, [r4, #40]	; 0x28
    94cc:	4b04      	ldr	r3, [pc, #16]	; (94e0 <std.isra.0+0x40>)
    94ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    94d0:	4b04      	ldr	r3, [pc, #16]	; (94e4 <std.isra.0+0x44>)
    94d2:	6323      	str	r3, [r4, #48]	; 0x30
    94d4:	bd10      	pop	{r4, pc}
    94d6:	46c0      	nop			; (mov r8, r8)
    94d8:	00009e39 	.word	0x00009e39
    94dc:	00009e61 	.word	0x00009e61
    94e0:	00009e99 	.word	0x00009e99
    94e4:	00009ec5 	.word	0x00009ec5

000094e8 <__sfmoreglue>:
    94e8:	b570      	push	{r4, r5, r6, lr}
    94ea:	2568      	movs	r5, #104	; 0x68
    94ec:	1e4a      	subs	r2, r1, #1
    94ee:	4355      	muls	r5, r2
    94f0:	000e      	movs	r6, r1
    94f2:	0029      	movs	r1, r5
    94f4:	3174      	adds	r1, #116	; 0x74
    94f6:	f000 f963 	bl	97c0 <_malloc_r>
    94fa:	1e04      	subs	r4, r0, #0
    94fc:	d008      	beq.n	9510 <__sfmoreglue+0x28>
    94fe:	2100      	movs	r1, #0
    9500:	002a      	movs	r2, r5
    9502:	6001      	str	r1, [r0, #0]
    9504:	6046      	str	r6, [r0, #4]
    9506:	300c      	adds	r0, #12
    9508:	60a0      	str	r0, [r4, #8]
    950a:	3268      	adds	r2, #104	; 0x68
    950c:	f7ff fe31 	bl	9172 <memset>
    9510:	0020      	movs	r0, r4
    9512:	bd70      	pop	{r4, r5, r6, pc}

00009514 <__sinit>:
    9514:	6983      	ldr	r3, [r0, #24]
    9516:	b513      	push	{r0, r1, r4, lr}
    9518:	0004      	movs	r4, r0
    951a:	2b00      	cmp	r3, #0
    951c:	d128      	bne.n	9570 <__sinit+0x5c>
    951e:	6483      	str	r3, [r0, #72]	; 0x48
    9520:	64c3      	str	r3, [r0, #76]	; 0x4c
    9522:	6503      	str	r3, [r0, #80]	; 0x50
    9524:	4b13      	ldr	r3, [pc, #76]	; (9574 <__sinit+0x60>)
    9526:	4a14      	ldr	r2, [pc, #80]	; (9578 <__sinit+0x64>)
    9528:	681b      	ldr	r3, [r3, #0]
    952a:	6282      	str	r2, [r0, #40]	; 0x28
    952c:	9301      	str	r3, [sp, #4]
    952e:	4298      	cmp	r0, r3
    9530:	d101      	bne.n	9536 <__sinit+0x22>
    9532:	2301      	movs	r3, #1
    9534:	6183      	str	r3, [r0, #24]
    9536:	0020      	movs	r0, r4
    9538:	f000 f820 	bl	957c <__sfp>
    953c:	6060      	str	r0, [r4, #4]
    953e:	0020      	movs	r0, r4
    9540:	f000 f81c 	bl	957c <__sfp>
    9544:	60a0      	str	r0, [r4, #8]
    9546:	0020      	movs	r0, r4
    9548:	f000 f818 	bl	957c <__sfp>
    954c:	2200      	movs	r2, #0
    954e:	60e0      	str	r0, [r4, #12]
    9550:	2104      	movs	r1, #4
    9552:	6860      	ldr	r0, [r4, #4]
    9554:	f7ff ffa4 	bl	94a0 <std.isra.0>
    9558:	2201      	movs	r2, #1
    955a:	2109      	movs	r1, #9
    955c:	68a0      	ldr	r0, [r4, #8]
    955e:	f7ff ff9f 	bl	94a0 <std.isra.0>
    9562:	2202      	movs	r2, #2
    9564:	2112      	movs	r1, #18
    9566:	68e0      	ldr	r0, [r4, #12]
    9568:	f7ff ff9a 	bl	94a0 <std.isra.0>
    956c:	2301      	movs	r3, #1
    956e:	61a3      	str	r3, [r4, #24]
    9570:	bd13      	pop	{r0, r1, r4, pc}
    9572:	46c0      	nop			; (mov r8, r8)
    9574:	0000aa98 	.word	0x0000aa98
    9578:	00009491 	.word	0x00009491

0000957c <__sfp>:
    957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    957e:	4b1e      	ldr	r3, [pc, #120]	; (95f8 <__sfp+0x7c>)
    9580:	0007      	movs	r7, r0
    9582:	681e      	ldr	r6, [r3, #0]
    9584:	69b3      	ldr	r3, [r6, #24]
    9586:	2b00      	cmp	r3, #0
    9588:	d102      	bne.n	9590 <__sfp+0x14>
    958a:	0030      	movs	r0, r6
    958c:	f7ff ffc2 	bl	9514 <__sinit>
    9590:	3648      	adds	r6, #72	; 0x48
    9592:	68b4      	ldr	r4, [r6, #8]
    9594:	6873      	ldr	r3, [r6, #4]
    9596:	3b01      	subs	r3, #1
    9598:	d504      	bpl.n	95a4 <__sfp+0x28>
    959a:	6833      	ldr	r3, [r6, #0]
    959c:	2b00      	cmp	r3, #0
    959e:	d007      	beq.n	95b0 <__sfp+0x34>
    95a0:	6836      	ldr	r6, [r6, #0]
    95a2:	e7f6      	b.n	9592 <__sfp+0x16>
    95a4:	220c      	movs	r2, #12
    95a6:	5ea5      	ldrsh	r5, [r4, r2]
    95a8:	2d00      	cmp	r5, #0
    95aa:	d00d      	beq.n	95c8 <__sfp+0x4c>
    95ac:	3468      	adds	r4, #104	; 0x68
    95ae:	e7f2      	b.n	9596 <__sfp+0x1a>
    95b0:	2104      	movs	r1, #4
    95b2:	0038      	movs	r0, r7
    95b4:	f7ff ff98 	bl	94e8 <__sfmoreglue>
    95b8:	6030      	str	r0, [r6, #0]
    95ba:	2800      	cmp	r0, #0
    95bc:	d1f0      	bne.n	95a0 <__sfp+0x24>
    95be:	230c      	movs	r3, #12
    95c0:	0004      	movs	r4, r0
    95c2:	603b      	str	r3, [r7, #0]
    95c4:	0020      	movs	r0, r4
    95c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95c8:	2301      	movs	r3, #1
    95ca:	0020      	movs	r0, r4
    95cc:	425b      	negs	r3, r3
    95ce:	81e3      	strh	r3, [r4, #14]
    95d0:	3302      	adds	r3, #2
    95d2:	81a3      	strh	r3, [r4, #12]
    95d4:	6665      	str	r5, [r4, #100]	; 0x64
    95d6:	6025      	str	r5, [r4, #0]
    95d8:	60a5      	str	r5, [r4, #8]
    95da:	6065      	str	r5, [r4, #4]
    95dc:	6125      	str	r5, [r4, #16]
    95de:	6165      	str	r5, [r4, #20]
    95e0:	61a5      	str	r5, [r4, #24]
    95e2:	2208      	movs	r2, #8
    95e4:	0029      	movs	r1, r5
    95e6:	305c      	adds	r0, #92	; 0x5c
    95e8:	f7ff fdc3 	bl	9172 <memset>
    95ec:	6365      	str	r5, [r4, #52]	; 0x34
    95ee:	63a5      	str	r5, [r4, #56]	; 0x38
    95f0:	64a5      	str	r5, [r4, #72]	; 0x48
    95f2:	64e5      	str	r5, [r4, #76]	; 0x4c
    95f4:	e7e6      	b.n	95c4 <__sfp+0x48>
    95f6:	46c0      	nop			; (mov r8, r8)
    95f8:	0000aa98 	.word	0x0000aa98

000095fc <_fwalk_reent>:
    95fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    95fe:	0004      	movs	r4, r0
    9600:	0007      	movs	r7, r0
    9602:	2600      	movs	r6, #0
    9604:	9101      	str	r1, [sp, #4]
    9606:	3448      	adds	r4, #72	; 0x48
    9608:	2c00      	cmp	r4, #0
    960a:	d101      	bne.n	9610 <_fwalk_reent+0x14>
    960c:	0030      	movs	r0, r6
    960e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9610:	6863      	ldr	r3, [r4, #4]
    9612:	68a5      	ldr	r5, [r4, #8]
    9614:	9300      	str	r3, [sp, #0]
    9616:	9b00      	ldr	r3, [sp, #0]
    9618:	3b01      	subs	r3, #1
    961a:	9300      	str	r3, [sp, #0]
    961c:	d501      	bpl.n	9622 <_fwalk_reent+0x26>
    961e:	6824      	ldr	r4, [r4, #0]
    9620:	e7f2      	b.n	9608 <_fwalk_reent+0xc>
    9622:	89ab      	ldrh	r3, [r5, #12]
    9624:	2b01      	cmp	r3, #1
    9626:	d908      	bls.n	963a <_fwalk_reent+0x3e>
    9628:	220e      	movs	r2, #14
    962a:	5eab      	ldrsh	r3, [r5, r2]
    962c:	3301      	adds	r3, #1
    962e:	d004      	beq.n	963a <_fwalk_reent+0x3e>
    9630:	0029      	movs	r1, r5
    9632:	0038      	movs	r0, r7
    9634:	9b01      	ldr	r3, [sp, #4]
    9636:	4798      	blx	r3
    9638:	4306      	orrs	r6, r0
    963a:	3568      	adds	r5, #104	; 0x68
    963c:	e7eb      	b.n	9616 <_fwalk_reent+0x1a>
	...

00009640 <__swhatbuf_r>:
    9640:	b570      	push	{r4, r5, r6, lr}
    9642:	000e      	movs	r6, r1
    9644:	001d      	movs	r5, r3
    9646:	230e      	movs	r3, #14
    9648:	5ec9      	ldrsh	r1, [r1, r3]
    964a:	b090      	sub	sp, #64	; 0x40
    964c:	0014      	movs	r4, r2
    964e:	2900      	cmp	r1, #0
    9650:	da07      	bge.n	9662 <__swhatbuf_r+0x22>
    9652:	2300      	movs	r3, #0
    9654:	602b      	str	r3, [r5, #0]
    9656:	89b3      	ldrh	r3, [r6, #12]
    9658:	061b      	lsls	r3, r3, #24
    965a:	d411      	bmi.n	9680 <__swhatbuf_r+0x40>
    965c:	2380      	movs	r3, #128	; 0x80
    965e:	00db      	lsls	r3, r3, #3
    9660:	e00f      	b.n	9682 <__swhatbuf_r+0x42>
    9662:	aa01      	add	r2, sp, #4
    9664:	f000 fd26 	bl	a0b4 <_fstat_r>
    9668:	2800      	cmp	r0, #0
    966a:	dbf2      	blt.n	9652 <__swhatbuf_r+0x12>
    966c:	22f0      	movs	r2, #240	; 0xf0
    966e:	9b02      	ldr	r3, [sp, #8]
    9670:	0212      	lsls	r2, r2, #8
    9672:	4013      	ands	r3, r2
    9674:	4a05      	ldr	r2, [pc, #20]	; (968c <__swhatbuf_r+0x4c>)
    9676:	189b      	adds	r3, r3, r2
    9678:	425a      	negs	r2, r3
    967a:	4153      	adcs	r3, r2
    967c:	602b      	str	r3, [r5, #0]
    967e:	e7ed      	b.n	965c <__swhatbuf_r+0x1c>
    9680:	2340      	movs	r3, #64	; 0x40
    9682:	2000      	movs	r0, #0
    9684:	6023      	str	r3, [r4, #0]
    9686:	b010      	add	sp, #64	; 0x40
    9688:	bd70      	pop	{r4, r5, r6, pc}
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	ffffe000 	.word	0xffffe000

00009690 <__smakebuf_r>:
    9690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9692:	2602      	movs	r6, #2
    9694:	898b      	ldrh	r3, [r1, #12]
    9696:	0005      	movs	r5, r0
    9698:	000c      	movs	r4, r1
    969a:	4233      	tst	r3, r6
    969c:	d006      	beq.n	96ac <__smakebuf_r+0x1c>
    969e:	0023      	movs	r3, r4
    96a0:	3347      	adds	r3, #71	; 0x47
    96a2:	6023      	str	r3, [r4, #0]
    96a4:	6123      	str	r3, [r4, #16]
    96a6:	2301      	movs	r3, #1
    96a8:	6163      	str	r3, [r4, #20]
    96aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    96ac:	ab01      	add	r3, sp, #4
    96ae:	466a      	mov	r2, sp
    96b0:	f7ff ffc6 	bl	9640 <__swhatbuf_r>
    96b4:	9900      	ldr	r1, [sp, #0]
    96b6:	0007      	movs	r7, r0
    96b8:	0028      	movs	r0, r5
    96ba:	f000 f881 	bl	97c0 <_malloc_r>
    96be:	2800      	cmp	r0, #0
    96c0:	d108      	bne.n	96d4 <__smakebuf_r+0x44>
    96c2:	220c      	movs	r2, #12
    96c4:	5ea3      	ldrsh	r3, [r4, r2]
    96c6:	059a      	lsls	r2, r3, #22
    96c8:	d4ef      	bmi.n	96aa <__smakebuf_r+0x1a>
    96ca:	2203      	movs	r2, #3
    96cc:	4393      	bics	r3, r2
    96ce:	431e      	orrs	r6, r3
    96d0:	81a6      	strh	r6, [r4, #12]
    96d2:	e7e4      	b.n	969e <__smakebuf_r+0xe>
    96d4:	4b0f      	ldr	r3, [pc, #60]	; (9714 <__smakebuf_r+0x84>)
    96d6:	62ab      	str	r3, [r5, #40]	; 0x28
    96d8:	2380      	movs	r3, #128	; 0x80
    96da:	89a2      	ldrh	r2, [r4, #12]
    96dc:	6020      	str	r0, [r4, #0]
    96de:	4313      	orrs	r3, r2
    96e0:	81a3      	strh	r3, [r4, #12]
    96e2:	9b00      	ldr	r3, [sp, #0]
    96e4:	6120      	str	r0, [r4, #16]
    96e6:	6163      	str	r3, [r4, #20]
    96e8:	9b01      	ldr	r3, [sp, #4]
    96ea:	2b00      	cmp	r3, #0
    96ec:	d00d      	beq.n	970a <__smakebuf_r+0x7a>
    96ee:	230e      	movs	r3, #14
    96f0:	5ee1      	ldrsh	r1, [r4, r3]
    96f2:	0028      	movs	r0, r5
    96f4:	f000 fcf0 	bl	a0d8 <_isatty_r>
    96f8:	2800      	cmp	r0, #0
    96fa:	d006      	beq.n	970a <__smakebuf_r+0x7a>
    96fc:	2203      	movs	r2, #3
    96fe:	89a3      	ldrh	r3, [r4, #12]
    9700:	4393      	bics	r3, r2
    9702:	001a      	movs	r2, r3
    9704:	2301      	movs	r3, #1
    9706:	4313      	orrs	r3, r2
    9708:	81a3      	strh	r3, [r4, #12]
    970a:	89a0      	ldrh	r0, [r4, #12]
    970c:	4338      	orrs	r0, r7
    970e:	81a0      	strh	r0, [r4, #12]
    9710:	e7cb      	b.n	96aa <__smakebuf_r+0x1a>
    9712:	46c0      	nop			; (mov r8, r8)
    9714:	00009491 	.word	0x00009491

00009718 <malloc>:
    9718:	b510      	push	{r4, lr}
    971a:	4b03      	ldr	r3, [pc, #12]	; (9728 <malloc+0x10>)
    971c:	0001      	movs	r1, r0
    971e:	6818      	ldr	r0, [r3, #0]
    9720:	f000 f84e 	bl	97c0 <_malloc_r>
    9724:	bd10      	pop	{r4, pc}
    9726:	46c0      	nop			; (mov r8, r8)
    9728:	20000128 	.word	0x20000128

0000972c <_free_r>:
    972c:	b570      	push	{r4, r5, r6, lr}
    972e:	0005      	movs	r5, r0
    9730:	2900      	cmp	r1, #0
    9732:	d010      	beq.n	9756 <_free_r+0x2a>
    9734:	1f0c      	subs	r4, r1, #4
    9736:	6823      	ldr	r3, [r4, #0]
    9738:	2b00      	cmp	r3, #0
    973a:	da00      	bge.n	973e <_free_r+0x12>
    973c:	18e4      	adds	r4, r4, r3
    973e:	0028      	movs	r0, r5
    9740:	f000 fcfb 	bl	a13a <__malloc_lock>
    9744:	4a1d      	ldr	r2, [pc, #116]	; (97bc <_free_r+0x90>)
    9746:	6813      	ldr	r3, [r2, #0]
    9748:	2b00      	cmp	r3, #0
    974a:	d105      	bne.n	9758 <_free_r+0x2c>
    974c:	6063      	str	r3, [r4, #4]
    974e:	6014      	str	r4, [r2, #0]
    9750:	0028      	movs	r0, r5
    9752:	f000 fcf3 	bl	a13c <__malloc_unlock>
    9756:	bd70      	pop	{r4, r5, r6, pc}
    9758:	42a3      	cmp	r3, r4
    975a:	d909      	bls.n	9770 <_free_r+0x44>
    975c:	6821      	ldr	r1, [r4, #0]
    975e:	1860      	adds	r0, r4, r1
    9760:	4283      	cmp	r3, r0
    9762:	d1f3      	bne.n	974c <_free_r+0x20>
    9764:	6818      	ldr	r0, [r3, #0]
    9766:	685b      	ldr	r3, [r3, #4]
    9768:	1841      	adds	r1, r0, r1
    976a:	6021      	str	r1, [r4, #0]
    976c:	e7ee      	b.n	974c <_free_r+0x20>
    976e:	0013      	movs	r3, r2
    9770:	685a      	ldr	r2, [r3, #4]
    9772:	2a00      	cmp	r2, #0
    9774:	d001      	beq.n	977a <_free_r+0x4e>
    9776:	42a2      	cmp	r2, r4
    9778:	d9f9      	bls.n	976e <_free_r+0x42>
    977a:	6819      	ldr	r1, [r3, #0]
    977c:	1858      	adds	r0, r3, r1
    977e:	42a0      	cmp	r0, r4
    9780:	d10b      	bne.n	979a <_free_r+0x6e>
    9782:	6820      	ldr	r0, [r4, #0]
    9784:	1809      	adds	r1, r1, r0
    9786:	1858      	adds	r0, r3, r1
    9788:	6019      	str	r1, [r3, #0]
    978a:	4282      	cmp	r2, r0
    978c:	d1e0      	bne.n	9750 <_free_r+0x24>
    978e:	6810      	ldr	r0, [r2, #0]
    9790:	6852      	ldr	r2, [r2, #4]
    9792:	1841      	adds	r1, r0, r1
    9794:	6019      	str	r1, [r3, #0]
    9796:	605a      	str	r2, [r3, #4]
    9798:	e7da      	b.n	9750 <_free_r+0x24>
    979a:	42a0      	cmp	r0, r4
    979c:	d902      	bls.n	97a4 <_free_r+0x78>
    979e:	230c      	movs	r3, #12
    97a0:	602b      	str	r3, [r5, #0]
    97a2:	e7d5      	b.n	9750 <_free_r+0x24>
    97a4:	6821      	ldr	r1, [r4, #0]
    97a6:	1860      	adds	r0, r4, r1
    97a8:	4282      	cmp	r2, r0
    97aa:	d103      	bne.n	97b4 <_free_r+0x88>
    97ac:	6810      	ldr	r0, [r2, #0]
    97ae:	6852      	ldr	r2, [r2, #4]
    97b0:	1841      	adds	r1, r0, r1
    97b2:	6021      	str	r1, [r4, #0]
    97b4:	6062      	str	r2, [r4, #4]
    97b6:	605c      	str	r4, [r3, #4]
    97b8:	e7ca      	b.n	9750 <_free_r+0x24>
    97ba:	46c0      	nop			; (mov r8, r8)
    97bc:	20000330 	.word	0x20000330

000097c0 <_malloc_r>:
    97c0:	2303      	movs	r3, #3
    97c2:	b570      	push	{r4, r5, r6, lr}
    97c4:	1ccd      	adds	r5, r1, #3
    97c6:	439d      	bics	r5, r3
    97c8:	3508      	adds	r5, #8
    97ca:	0006      	movs	r6, r0
    97cc:	2d0c      	cmp	r5, #12
    97ce:	d21e      	bcs.n	980e <_malloc_r+0x4e>
    97d0:	250c      	movs	r5, #12
    97d2:	42a9      	cmp	r1, r5
    97d4:	d81d      	bhi.n	9812 <_malloc_r+0x52>
    97d6:	0030      	movs	r0, r6
    97d8:	f000 fcaf 	bl	a13a <__malloc_lock>
    97dc:	4a25      	ldr	r2, [pc, #148]	; (9874 <_malloc_r+0xb4>)
    97de:	6814      	ldr	r4, [r2, #0]
    97e0:	0021      	movs	r1, r4
    97e2:	2900      	cmp	r1, #0
    97e4:	d119      	bne.n	981a <_malloc_r+0x5a>
    97e6:	4c24      	ldr	r4, [pc, #144]	; (9878 <_malloc_r+0xb8>)
    97e8:	6823      	ldr	r3, [r4, #0]
    97ea:	2b00      	cmp	r3, #0
    97ec:	d103      	bne.n	97f6 <_malloc_r+0x36>
    97ee:	0030      	movs	r0, r6
    97f0:	f000 fb10 	bl	9e14 <_sbrk_r>
    97f4:	6020      	str	r0, [r4, #0]
    97f6:	0029      	movs	r1, r5
    97f8:	0030      	movs	r0, r6
    97fa:	f000 fb0b 	bl	9e14 <_sbrk_r>
    97fe:	1c43      	adds	r3, r0, #1
    9800:	d12c      	bne.n	985c <_malloc_r+0x9c>
    9802:	230c      	movs	r3, #12
    9804:	0030      	movs	r0, r6
    9806:	6033      	str	r3, [r6, #0]
    9808:	f000 fc98 	bl	a13c <__malloc_unlock>
    980c:	e003      	b.n	9816 <_malloc_r+0x56>
    980e:	2d00      	cmp	r5, #0
    9810:	dadf      	bge.n	97d2 <_malloc_r+0x12>
    9812:	230c      	movs	r3, #12
    9814:	6033      	str	r3, [r6, #0]
    9816:	2000      	movs	r0, #0
    9818:	bd70      	pop	{r4, r5, r6, pc}
    981a:	680b      	ldr	r3, [r1, #0]
    981c:	1b5b      	subs	r3, r3, r5
    981e:	d41a      	bmi.n	9856 <_malloc_r+0x96>
    9820:	2b0b      	cmp	r3, #11
    9822:	d903      	bls.n	982c <_malloc_r+0x6c>
    9824:	600b      	str	r3, [r1, #0]
    9826:	18cc      	adds	r4, r1, r3
    9828:	6025      	str	r5, [r4, #0]
    982a:	e003      	b.n	9834 <_malloc_r+0x74>
    982c:	428c      	cmp	r4, r1
    982e:	d10e      	bne.n	984e <_malloc_r+0x8e>
    9830:	6863      	ldr	r3, [r4, #4]
    9832:	6013      	str	r3, [r2, #0]
    9834:	0030      	movs	r0, r6
    9836:	f000 fc81 	bl	a13c <__malloc_unlock>
    983a:	0020      	movs	r0, r4
    983c:	2207      	movs	r2, #7
    983e:	300b      	adds	r0, #11
    9840:	1d23      	adds	r3, r4, #4
    9842:	4390      	bics	r0, r2
    9844:	1ac3      	subs	r3, r0, r3
    9846:	d0e7      	beq.n	9818 <_malloc_r+0x58>
    9848:	425a      	negs	r2, r3
    984a:	50e2      	str	r2, [r4, r3]
    984c:	e7e4      	b.n	9818 <_malloc_r+0x58>
    984e:	684b      	ldr	r3, [r1, #4]
    9850:	6063      	str	r3, [r4, #4]
    9852:	000c      	movs	r4, r1
    9854:	e7ee      	b.n	9834 <_malloc_r+0x74>
    9856:	000c      	movs	r4, r1
    9858:	6849      	ldr	r1, [r1, #4]
    985a:	e7c2      	b.n	97e2 <_malloc_r+0x22>
    985c:	2303      	movs	r3, #3
    985e:	1cc4      	adds	r4, r0, #3
    9860:	439c      	bics	r4, r3
    9862:	42a0      	cmp	r0, r4
    9864:	d0e0      	beq.n	9828 <_malloc_r+0x68>
    9866:	1a21      	subs	r1, r4, r0
    9868:	0030      	movs	r0, r6
    986a:	f000 fad3 	bl	9e14 <_sbrk_r>
    986e:	1c43      	adds	r3, r0, #1
    9870:	d1da      	bne.n	9828 <_malloc_r+0x68>
    9872:	e7c6      	b.n	9802 <_malloc_r+0x42>
    9874:	20000330 	.word	0x20000330
    9878:	20000334 	.word	0x20000334

0000987c <__sfputc_r>:
    987c:	6893      	ldr	r3, [r2, #8]
    987e:	b510      	push	{r4, lr}
    9880:	3b01      	subs	r3, #1
    9882:	6093      	str	r3, [r2, #8]
    9884:	2b00      	cmp	r3, #0
    9886:	da05      	bge.n	9894 <__sfputc_r+0x18>
    9888:	6994      	ldr	r4, [r2, #24]
    988a:	42a3      	cmp	r3, r4
    988c:	db08      	blt.n	98a0 <__sfputc_r+0x24>
    988e:	b2cb      	uxtb	r3, r1
    9890:	2b0a      	cmp	r3, #10
    9892:	d005      	beq.n	98a0 <__sfputc_r+0x24>
    9894:	6813      	ldr	r3, [r2, #0]
    9896:	1c58      	adds	r0, r3, #1
    9898:	6010      	str	r0, [r2, #0]
    989a:	7019      	strb	r1, [r3, #0]
    989c:	b2c8      	uxtb	r0, r1
    989e:	bd10      	pop	{r4, pc}
    98a0:	f000 fb16 	bl	9ed0 <__swbuf_r>
    98a4:	e7fb      	b.n	989e <__sfputc_r+0x22>

000098a6 <__sfputs_r>:
    98a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98a8:	0006      	movs	r6, r0
    98aa:	000f      	movs	r7, r1
    98ac:	0014      	movs	r4, r2
    98ae:	18d5      	adds	r5, r2, r3
    98b0:	42ac      	cmp	r4, r5
    98b2:	d101      	bne.n	98b8 <__sfputs_r+0x12>
    98b4:	2000      	movs	r0, #0
    98b6:	e007      	b.n	98c8 <__sfputs_r+0x22>
    98b8:	7821      	ldrb	r1, [r4, #0]
    98ba:	003a      	movs	r2, r7
    98bc:	0030      	movs	r0, r6
    98be:	f7ff ffdd 	bl	987c <__sfputc_r>
    98c2:	3401      	adds	r4, #1
    98c4:	1c43      	adds	r3, r0, #1
    98c6:	d1f3      	bne.n	98b0 <__sfputs_r+0xa>
    98c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000098cc <_vfiprintf_r>:
    98cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    98ce:	b09f      	sub	sp, #124	; 0x7c
    98d0:	0006      	movs	r6, r0
    98d2:	000f      	movs	r7, r1
    98d4:	0014      	movs	r4, r2
    98d6:	9305      	str	r3, [sp, #20]
    98d8:	2800      	cmp	r0, #0
    98da:	d004      	beq.n	98e6 <_vfiprintf_r+0x1a>
    98dc:	6983      	ldr	r3, [r0, #24]
    98de:	2b00      	cmp	r3, #0
    98e0:	d101      	bne.n	98e6 <_vfiprintf_r+0x1a>
    98e2:	f7ff fe17 	bl	9514 <__sinit>
    98e6:	4b7f      	ldr	r3, [pc, #508]	; (9ae4 <_vfiprintf_r+0x218>)
    98e8:	429f      	cmp	r7, r3
    98ea:	d15c      	bne.n	99a6 <_vfiprintf_r+0xda>
    98ec:	6877      	ldr	r7, [r6, #4]
    98ee:	89bb      	ldrh	r3, [r7, #12]
    98f0:	071b      	lsls	r3, r3, #28
    98f2:	d562      	bpl.n	99ba <_vfiprintf_r+0xee>
    98f4:	693b      	ldr	r3, [r7, #16]
    98f6:	2b00      	cmp	r3, #0
    98f8:	d05f      	beq.n	99ba <_vfiprintf_r+0xee>
    98fa:	2300      	movs	r3, #0
    98fc:	ad06      	add	r5, sp, #24
    98fe:	616b      	str	r3, [r5, #20]
    9900:	3320      	adds	r3, #32
    9902:	766b      	strb	r3, [r5, #25]
    9904:	3310      	adds	r3, #16
    9906:	76ab      	strb	r3, [r5, #26]
    9908:	9402      	str	r4, [sp, #8]
    990a:	9c02      	ldr	r4, [sp, #8]
    990c:	7823      	ldrb	r3, [r4, #0]
    990e:	2b00      	cmp	r3, #0
    9910:	d15d      	bne.n	99ce <_vfiprintf_r+0x102>
    9912:	9b02      	ldr	r3, [sp, #8]
    9914:	1ae3      	subs	r3, r4, r3
    9916:	9304      	str	r3, [sp, #16]
    9918:	d00d      	beq.n	9936 <_vfiprintf_r+0x6a>
    991a:	9b04      	ldr	r3, [sp, #16]
    991c:	9a02      	ldr	r2, [sp, #8]
    991e:	0039      	movs	r1, r7
    9920:	0030      	movs	r0, r6
    9922:	f7ff ffc0 	bl	98a6 <__sfputs_r>
    9926:	1c43      	adds	r3, r0, #1
    9928:	d100      	bne.n	992c <_vfiprintf_r+0x60>
    992a:	e0cc      	b.n	9ac6 <_vfiprintf_r+0x1fa>
    992c:	696a      	ldr	r2, [r5, #20]
    992e:	9b04      	ldr	r3, [sp, #16]
    9930:	4694      	mov	ip, r2
    9932:	4463      	add	r3, ip
    9934:	616b      	str	r3, [r5, #20]
    9936:	7823      	ldrb	r3, [r4, #0]
    9938:	2b00      	cmp	r3, #0
    993a:	d100      	bne.n	993e <_vfiprintf_r+0x72>
    993c:	e0c3      	b.n	9ac6 <_vfiprintf_r+0x1fa>
    993e:	2201      	movs	r2, #1
    9940:	2300      	movs	r3, #0
    9942:	4252      	negs	r2, r2
    9944:	606a      	str	r2, [r5, #4]
    9946:	a902      	add	r1, sp, #8
    9948:	3254      	adds	r2, #84	; 0x54
    994a:	1852      	adds	r2, r2, r1
    994c:	3401      	adds	r4, #1
    994e:	602b      	str	r3, [r5, #0]
    9950:	60eb      	str	r3, [r5, #12]
    9952:	60ab      	str	r3, [r5, #8]
    9954:	7013      	strb	r3, [r2, #0]
    9956:	65ab      	str	r3, [r5, #88]	; 0x58
    9958:	7821      	ldrb	r1, [r4, #0]
    995a:	2205      	movs	r2, #5
    995c:	4862      	ldr	r0, [pc, #392]	; (9ae8 <_vfiprintf_r+0x21c>)
    995e:	f000 fbe1 	bl	a124 <memchr>
    9962:	1c63      	adds	r3, r4, #1
    9964:	469c      	mov	ip, r3
    9966:	2800      	cmp	r0, #0
    9968:	d135      	bne.n	99d6 <_vfiprintf_r+0x10a>
    996a:	6829      	ldr	r1, [r5, #0]
    996c:	06cb      	lsls	r3, r1, #27
    996e:	d504      	bpl.n	997a <_vfiprintf_r+0xae>
    9970:	2353      	movs	r3, #83	; 0x53
    9972:	aa02      	add	r2, sp, #8
    9974:	3020      	adds	r0, #32
    9976:	189b      	adds	r3, r3, r2
    9978:	7018      	strb	r0, [r3, #0]
    997a:	070b      	lsls	r3, r1, #28
    997c:	d504      	bpl.n	9988 <_vfiprintf_r+0xbc>
    997e:	2353      	movs	r3, #83	; 0x53
    9980:	202b      	movs	r0, #43	; 0x2b
    9982:	aa02      	add	r2, sp, #8
    9984:	189b      	adds	r3, r3, r2
    9986:	7018      	strb	r0, [r3, #0]
    9988:	7823      	ldrb	r3, [r4, #0]
    998a:	2b2a      	cmp	r3, #42	; 0x2a
    998c:	d02c      	beq.n	99e8 <_vfiprintf_r+0x11c>
    998e:	2000      	movs	r0, #0
    9990:	210a      	movs	r1, #10
    9992:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9994:	7822      	ldrb	r2, [r4, #0]
    9996:	3a30      	subs	r2, #48	; 0x30
    9998:	2a09      	cmp	r2, #9
    999a:	d800      	bhi.n	999e <_vfiprintf_r+0xd2>
    999c:	e06b      	b.n	9a76 <_vfiprintf_r+0x1aa>
    999e:	2800      	cmp	r0, #0
    99a0:	d02a      	beq.n	99f8 <_vfiprintf_r+0x12c>
    99a2:	9309      	str	r3, [sp, #36]	; 0x24
    99a4:	e028      	b.n	99f8 <_vfiprintf_r+0x12c>
    99a6:	4b51      	ldr	r3, [pc, #324]	; (9aec <_vfiprintf_r+0x220>)
    99a8:	429f      	cmp	r7, r3
    99aa:	d101      	bne.n	99b0 <_vfiprintf_r+0xe4>
    99ac:	68b7      	ldr	r7, [r6, #8]
    99ae:	e79e      	b.n	98ee <_vfiprintf_r+0x22>
    99b0:	4b4f      	ldr	r3, [pc, #316]	; (9af0 <_vfiprintf_r+0x224>)
    99b2:	429f      	cmp	r7, r3
    99b4:	d19b      	bne.n	98ee <_vfiprintf_r+0x22>
    99b6:	68f7      	ldr	r7, [r6, #12]
    99b8:	e799      	b.n	98ee <_vfiprintf_r+0x22>
    99ba:	0039      	movs	r1, r7
    99bc:	0030      	movs	r0, r6
    99be:	f000 faf1 	bl	9fa4 <__swsetup_r>
    99c2:	2800      	cmp	r0, #0
    99c4:	d099      	beq.n	98fa <_vfiprintf_r+0x2e>
    99c6:	2001      	movs	r0, #1
    99c8:	4240      	negs	r0, r0
    99ca:	b01f      	add	sp, #124	; 0x7c
    99cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99ce:	2b25      	cmp	r3, #37	; 0x25
    99d0:	d09f      	beq.n	9912 <_vfiprintf_r+0x46>
    99d2:	3401      	adds	r4, #1
    99d4:	e79a      	b.n	990c <_vfiprintf_r+0x40>
    99d6:	4b44      	ldr	r3, [pc, #272]	; (9ae8 <_vfiprintf_r+0x21c>)
    99d8:	6829      	ldr	r1, [r5, #0]
    99da:	1ac0      	subs	r0, r0, r3
    99dc:	2301      	movs	r3, #1
    99de:	4083      	lsls	r3, r0
    99e0:	430b      	orrs	r3, r1
    99e2:	602b      	str	r3, [r5, #0]
    99e4:	4664      	mov	r4, ip
    99e6:	e7b7      	b.n	9958 <_vfiprintf_r+0x8c>
    99e8:	9b05      	ldr	r3, [sp, #20]
    99ea:	1d18      	adds	r0, r3, #4
    99ec:	681b      	ldr	r3, [r3, #0]
    99ee:	9005      	str	r0, [sp, #20]
    99f0:	2b00      	cmp	r3, #0
    99f2:	db3a      	blt.n	9a6a <_vfiprintf_r+0x19e>
    99f4:	9309      	str	r3, [sp, #36]	; 0x24
    99f6:	4664      	mov	r4, ip
    99f8:	7823      	ldrb	r3, [r4, #0]
    99fa:	2b2e      	cmp	r3, #46	; 0x2e
    99fc:	d10b      	bne.n	9a16 <_vfiprintf_r+0x14a>
    99fe:	7863      	ldrb	r3, [r4, #1]
    9a00:	1c62      	adds	r2, r4, #1
    9a02:	2b2a      	cmp	r3, #42	; 0x2a
    9a04:	d13f      	bne.n	9a86 <_vfiprintf_r+0x1ba>
    9a06:	9b05      	ldr	r3, [sp, #20]
    9a08:	3402      	adds	r4, #2
    9a0a:	1d1a      	adds	r2, r3, #4
    9a0c:	681b      	ldr	r3, [r3, #0]
    9a0e:	9205      	str	r2, [sp, #20]
    9a10:	2b00      	cmp	r3, #0
    9a12:	db35      	blt.n	9a80 <_vfiprintf_r+0x1b4>
    9a14:	9307      	str	r3, [sp, #28]
    9a16:	7821      	ldrb	r1, [r4, #0]
    9a18:	2203      	movs	r2, #3
    9a1a:	4836      	ldr	r0, [pc, #216]	; (9af4 <_vfiprintf_r+0x228>)
    9a1c:	f000 fb82 	bl	a124 <memchr>
    9a20:	2800      	cmp	r0, #0
    9a22:	d007      	beq.n	9a34 <_vfiprintf_r+0x168>
    9a24:	4b33      	ldr	r3, [pc, #204]	; (9af4 <_vfiprintf_r+0x228>)
    9a26:	682a      	ldr	r2, [r5, #0]
    9a28:	1ac0      	subs	r0, r0, r3
    9a2a:	2340      	movs	r3, #64	; 0x40
    9a2c:	4083      	lsls	r3, r0
    9a2e:	4313      	orrs	r3, r2
    9a30:	602b      	str	r3, [r5, #0]
    9a32:	3401      	adds	r4, #1
    9a34:	7821      	ldrb	r1, [r4, #0]
    9a36:	1c63      	adds	r3, r4, #1
    9a38:	2206      	movs	r2, #6
    9a3a:	482f      	ldr	r0, [pc, #188]	; (9af8 <_vfiprintf_r+0x22c>)
    9a3c:	9302      	str	r3, [sp, #8]
    9a3e:	7629      	strb	r1, [r5, #24]
    9a40:	f000 fb70 	bl	a124 <memchr>
    9a44:	2800      	cmp	r0, #0
    9a46:	d044      	beq.n	9ad2 <_vfiprintf_r+0x206>
    9a48:	4b2c      	ldr	r3, [pc, #176]	; (9afc <_vfiprintf_r+0x230>)
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d12f      	bne.n	9aae <_vfiprintf_r+0x1e2>
    9a4e:	6829      	ldr	r1, [r5, #0]
    9a50:	9b05      	ldr	r3, [sp, #20]
    9a52:	2207      	movs	r2, #7
    9a54:	05c9      	lsls	r1, r1, #23
    9a56:	d528      	bpl.n	9aaa <_vfiprintf_r+0x1de>
    9a58:	189b      	adds	r3, r3, r2
    9a5a:	4393      	bics	r3, r2
    9a5c:	3308      	adds	r3, #8
    9a5e:	9305      	str	r3, [sp, #20]
    9a60:	696b      	ldr	r3, [r5, #20]
    9a62:	9a03      	ldr	r2, [sp, #12]
    9a64:	189b      	adds	r3, r3, r2
    9a66:	616b      	str	r3, [r5, #20]
    9a68:	e74f      	b.n	990a <_vfiprintf_r+0x3e>
    9a6a:	425b      	negs	r3, r3
    9a6c:	60eb      	str	r3, [r5, #12]
    9a6e:	2302      	movs	r3, #2
    9a70:	430b      	orrs	r3, r1
    9a72:	602b      	str	r3, [r5, #0]
    9a74:	e7bf      	b.n	99f6 <_vfiprintf_r+0x12a>
    9a76:	434b      	muls	r3, r1
    9a78:	3401      	adds	r4, #1
    9a7a:	189b      	adds	r3, r3, r2
    9a7c:	2001      	movs	r0, #1
    9a7e:	e789      	b.n	9994 <_vfiprintf_r+0xc8>
    9a80:	2301      	movs	r3, #1
    9a82:	425b      	negs	r3, r3
    9a84:	e7c6      	b.n	9a14 <_vfiprintf_r+0x148>
    9a86:	2300      	movs	r3, #0
    9a88:	0014      	movs	r4, r2
    9a8a:	200a      	movs	r0, #10
    9a8c:	001a      	movs	r2, r3
    9a8e:	606b      	str	r3, [r5, #4]
    9a90:	7821      	ldrb	r1, [r4, #0]
    9a92:	3930      	subs	r1, #48	; 0x30
    9a94:	2909      	cmp	r1, #9
    9a96:	d903      	bls.n	9aa0 <_vfiprintf_r+0x1d4>
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d0bc      	beq.n	9a16 <_vfiprintf_r+0x14a>
    9a9c:	9207      	str	r2, [sp, #28]
    9a9e:	e7ba      	b.n	9a16 <_vfiprintf_r+0x14a>
    9aa0:	4342      	muls	r2, r0
    9aa2:	3401      	adds	r4, #1
    9aa4:	1852      	adds	r2, r2, r1
    9aa6:	2301      	movs	r3, #1
    9aa8:	e7f2      	b.n	9a90 <_vfiprintf_r+0x1c4>
    9aaa:	3307      	adds	r3, #7
    9aac:	e7d5      	b.n	9a5a <_vfiprintf_r+0x18e>
    9aae:	ab05      	add	r3, sp, #20
    9ab0:	9300      	str	r3, [sp, #0]
    9ab2:	003a      	movs	r2, r7
    9ab4:	4b12      	ldr	r3, [pc, #72]	; (9b00 <_vfiprintf_r+0x234>)
    9ab6:	0029      	movs	r1, r5
    9ab8:	0030      	movs	r0, r6
    9aba:	e000      	b.n	9abe <_vfiprintf_r+0x1f2>
    9abc:	bf00      	nop
    9abe:	9003      	str	r0, [sp, #12]
    9ac0:	9b03      	ldr	r3, [sp, #12]
    9ac2:	3301      	adds	r3, #1
    9ac4:	d1cc      	bne.n	9a60 <_vfiprintf_r+0x194>
    9ac6:	89bb      	ldrh	r3, [r7, #12]
    9ac8:	065b      	lsls	r3, r3, #25
    9aca:	d500      	bpl.n	9ace <_vfiprintf_r+0x202>
    9acc:	e77b      	b.n	99c6 <_vfiprintf_r+0xfa>
    9ace:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9ad0:	e77b      	b.n	99ca <_vfiprintf_r+0xfe>
    9ad2:	ab05      	add	r3, sp, #20
    9ad4:	9300      	str	r3, [sp, #0]
    9ad6:	003a      	movs	r2, r7
    9ad8:	4b09      	ldr	r3, [pc, #36]	; (9b00 <_vfiprintf_r+0x234>)
    9ada:	0029      	movs	r1, r5
    9adc:	0030      	movs	r0, r6
    9ade:	f000 f87f 	bl	9be0 <_printf_i>
    9ae2:	e7ec      	b.n	9abe <_vfiprintf_r+0x1f2>
    9ae4:	0000aabc 	.word	0x0000aabc
    9ae8:	0000aafc 	.word	0x0000aafc
    9aec:	0000aadc 	.word	0x0000aadc
    9af0:	0000aa9c 	.word	0x0000aa9c
    9af4:	0000ab02 	.word	0x0000ab02
    9af8:	0000ab06 	.word	0x0000ab06
    9afc:	00000000 	.word	0x00000000
    9b00:	000098a7 	.word	0x000098a7

00009b04 <_printf_common>:
    9b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9b06:	0015      	movs	r5, r2
    9b08:	9301      	str	r3, [sp, #4]
    9b0a:	688a      	ldr	r2, [r1, #8]
    9b0c:	690b      	ldr	r3, [r1, #16]
    9b0e:	9000      	str	r0, [sp, #0]
    9b10:	000c      	movs	r4, r1
    9b12:	4293      	cmp	r3, r2
    9b14:	da00      	bge.n	9b18 <_printf_common+0x14>
    9b16:	0013      	movs	r3, r2
    9b18:	0022      	movs	r2, r4
    9b1a:	602b      	str	r3, [r5, #0]
    9b1c:	3243      	adds	r2, #67	; 0x43
    9b1e:	7812      	ldrb	r2, [r2, #0]
    9b20:	2a00      	cmp	r2, #0
    9b22:	d001      	beq.n	9b28 <_printf_common+0x24>
    9b24:	3301      	adds	r3, #1
    9b26:	602b      	str	r3, [r5, #0]
    9b28:	6823      	ldr	r3, [r4, #0]
    9b2a:	069b      	lsls	r3, r3, #26
    9b2c:	d502      	bpl.n	9b34 <_printf_common+0x30>
    9b2e:	682b      	ldr	r3, [r5, #0]
    9b30:	3302      	adds	r3, #2
    9b32:	602b      	str	r3, [r5, #0]
    9b34:	2706      	movs	r7, #6
    9b36:	6823      	ldr	r3, [r4, #0]
    9b38:	401f      	ands	r7, r3
    9b3a:	d027      	beq.n	9b8c <_printf_common+0x88>
    9b3c:	0023      	movs	r3, r4
    9b3e:	3343      	adds	r3, #67	; 0x43
    9b40:	781b      	ldrb	r3, [r3, #0]
    9b42:	1e5a      	subs	r2, r3, #1
    9b44:	4193      	sbcs	r3, r2
    9b46:	6822      	ldr	r2, [r4, #0]
    9b48:	0692      	lsls	r2, r2, #26
    9b4a:	d430      	bmi.n	9bae <_printf_common+0xaa>
    9b4c:	0022      	movs	r2, r4
    9b4e:	9901      	ldr	r1, [sp, #4]
    9b50:	3243      	adds	r2, #67	; 0x43
    9b52:	9800      	ldr	r0, [sp, #0]
    9b54:	9e08      	ldr	r6, [sp, #32]
    9b56:	47b0      	blx	r6
    9b58:	1c43      	adds	r3, r0, #1
    9b5a:	d025      	beq.n	9ba8 <_printf_common+0xa4>
    9b5c:	2306      	movs	r3, #6
    9b5e:	6820      	ldr	r0, [r4, #0]
    9b60:	682a      	ldr	r2, [r5, #0]
    9b62:	68e1      	ldr	r1, [r4, #12]
    9b64:	4003      	ands	r3, r0
    9b66:	2500      	movs	r5, #0
    9b68:	2b04      	cmp	r3, #4
    9b6a:	d103      	bne.n	9b74 <_printf_common+0x70>
    9b6c:	1a8d      	subs	r5, r1, r2
    9b6e:	43eb      	mvns	r3, r5
    9b70:	17db      	asrs	r3, r3, #31
    9b72:	401d      	ands	r5, r3
    9b74:	68a3      	ldr	r3, [r4, #8]
    9b76:	6922      	ldr	r2, [r4, #16]
    9b78:	4293      	cmp	r3, r2
    9b7a:	dd01      	ble.n	9b80 <_printf_common+0x7c>
    9b7c:	1a9b      	subs	r3, r3, r2
    9b7e:	18ed      	adds	r5, r5, r3
    9b80:	2700      	movs	r7, #0
    9b82:	42bd      	cmp	r5, r7
    9b84:	d120      	bne.n	9bc8 <_printf_common+0xc4>
    9b86:	2000      	movs	r0, #0
    9b88:	e010      	b.n	9bac <_printf_common+0xa8>
    9b8a:	3701      	adds	r7, #1
    9b8c:	68e3      	ldr	r3, [r4, #12]
    9b8e:	682a      	ldr	r2, [r5, #0]
    9b90:	1a9b      	subs	r3, r3, r2
    9b92:	429f      	cmp	r7, r3
    9b94:	dad2      	bge.n	9b3c <_printf_common+0x38>
    9b96:	0022      	movs	r2, r4
    9b98:	2301      	movs	r3, #1
    9b9a:	3219      	adds	r2, #25
    9b9c:	9901      	ldr	r1, [sp, #4]
    9b9e:	9800      	ldr	r0, [sp, #0]
    9ba0:	9e08      	ldr	r6, [sp, #32]
    9ba2:	47b0      	blx	r6
    9ba4:	1c43      	adds	r3, r0, #1
    9ba6:	d1f0      	bne.n	9b8a <_printf_common+0x86>
    9ba8:	2001      	movs	r0, #1
    9baa:	4240      	negs	r0, r0
    9bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9bae:	2030      	movs	r0, #48	; 0x30
    9bb0:	18e1      	adds	r1, r4, r3
    9bb2:	3143      	adds	r1, #67	; 0x43
    9bb4:	7008      	strb	r0, [r1, #0]
    9bb6:	0021      	movs	r1, r4
    9bb8:	1c5a      	adds	r2, r3, #1
    9bba:	3145      	adds	r1, #69	; 0x45
    9bbc:	7809      	ldrb	r1, [r1, #0]
    9bbe:	18a2      	adds	r2, r4, r2
    9bc0:	3243      	adds	r2, #67	; 0x43
    9bc2:	3302      	adds	r3, #2
    9bc4:	7011      	strb	r1, [r2, #0]
    9bc6:	e7c1      	b.n	9b4c <_printf_common+0x48>
    9bc8:	0022      	movs	r2, r4
    9bca:	2301      	movs	r3, #1
    9bcc:	321a      	adds	r2, #26
    9bce:	9901      	ldr	r1, [sp, #4]
    9bd0:	9800      	ldr	r0, [sp, #0]
    9bd2:	9e08      	ldr	r6, [sp, #32]
    9bd4:	47b0      	blx	r6
    9bd6:	1c43      	adds	r3, r0, #1
    9bd8:	d0e6      	beq.n	9ba8 <_printf_common+0xa4>
    9bda:	3701      	adds	r7, #1
    9bdc:	e7d1      	b.n	9b82 <_printf_common+0x7e>
	...

00009be0 <_printf_i>:
    9be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9be2:	b08b      	sub	sp, #44	; 0x2c
    9be4:	9206      	str	r2, [sp, #24]
    9be6:	000a      	movs	r2, r1
    9be8:	3243      	adds	r2, #67	; 0x43
    9bea:	9307      	str	r3, [sp, #28]
    9bec:	9005      	str	r0, [sp, #20]
    9bee:	9204      	str	r2, [sp, #16]
    9bf0:	7e0a      	ldrb	r2, [r1, #24]
    9bf2:	000c      	movs	r4, r1
    9bf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9bf6:	2a6e      	cmp	r2, #110	; 0x6e
    9bf8:	d100      	bne.n	9bfc <_printf_i+0x1c>
    9bfa:	e08f      	b.n	9d1c <_printf_i+0x13c>
    9bfc:	d817      	bhi.n	9c2e <_printf_i+0x4e>
    9bfe:	2a63      	cmp	r2, #99	; 0x63
    9c00:	d02c      	beq.n	9c5c <_printf_i+0x7c>
    9c02:	d808      	bhi.n	9c16 <_printf_i+0x36>
    9c04:	2a00      	cmp	r2, #0
    9c06:	d100      	bne.n	9c0a <_printf_i+0x2a>
    9c08:	e099      	b.n	9d3e <_printf_i+0x15e>
    9c0a:	2a58      	cmp	r2, #88	; 0x58
    9c0c:	d054      	beq.n	9cb8 <_printf_i+0xd8>
    9c0e:	0026      	movs	r6, r4
    9c10:	3642      	adds	r6, #66	; 0x42
    9c12:	7032      	strb	r2, [r6, #0]
    9c14:	e029      	b.n	9c6a <_printf_i+0x8a>
    9c16:	2a64      	cmp	r2, #100	; 0x64
    9c18:	d001      	beq.n	9c1e <_printf_i+0x3e>
    9c1a:	2a69      	cmp	r2, #105	; 0x69
    9c1c:	d1f7      	bne.n	9c0e <_printf_i+0x2e>
    9c1e:	6821      	ldr	r1, [r4, #0]
    9c20:	681a      	ldr	r2, [r3, #0]
    9c22:	0608      	lsls	r0, r1, #24
    9c24:	d523      	bpl.n	9c6e <_printf_i+0x8e>
    9c26:	1d11      	adds	r1, r2, #4
    9c28:	6019      	str	r1, [r3, #0]
    9c2a:	6815      	ldr	r5, [r2, #0]
    9c2c:	e025      	b.n	9c7a <_printf_i+0x9a>
    9c2e:	2a73      	cmp	r2, #115	; 0x73
    9c30:	d100      	bne.n	9c34 <_printf_i+0x54>
    9c32:	e088      	b.n	9d46 <_printf_i+0x166>
    9c34:	d808      	bhi.n	9c48 <_printf_i+0x68>
    9c36:	2a6f      	cmp	r2, #111	; 0x6f
    9c38:	d029      	beq.n	9c8e <_printf_i+0xae>
    9c3a:	2a70      	cmp	r2, #112	; 0x70
    9c3c:	d1e7      	bne.n	9c0e <_printf_i+0x2e>
    9c3e:	2220      	movs	r2, #32
    9c40:	6809      	ldr	r1, [r1, #0]
    9c42:	430a      	orrs	r2, r1
    9c44:	6022      	str	r2, [r4, #0]
    9c46:	e003      	b.n	9c50 <_printf_i+0x70>
    9c48:	2a75      	cmp	r2, #117	; 0x75
    9c4a:	d020      	beq.n	9c8e <_printf_i+0xae>
    9c4c:	2a78      	cmp	r2, #120	; 0x78
    9c4e:	d1de      	bne.n	9c0e <_printf_i+0x2e>
    9c50:	0022      	movs	r2, r4
    9c52:	2178      	movs	r1, #120	; 0x78
    9c54:	3245      	adds	r2, #69	; 0x45
    9c56:	7011      	strb	r1, [r2, #0]
    9c58:	4a6c      	ldr	r2, [pc, #432]	; (9e0c <_printf_i+0x22c>)
    9c5a:	e030      	b.n	9cbe <_printf_i+0xde>
    9c5c:	000e      	movs	r6, r1
    9c5e:	681a      	ldr	r2, [r3, #0]
    9c60:	3642      	adds	r6, #66	; 0x42
    9c62:	1d11      	adds	r1, r2, #4
    9c64:	6019      	str	r1, [r3, #0]
    9c66:	6813      	ldr	r3, [r2, #0]
    9c68:	7033      	strb	r3, [r6, #0]
    9c6a:	2301      	movs	r3, #1
    9c6c:	e079      	b.n	9d62 <_printf_i+0x182>
    9c6e:	0649      	lsls	r1, r1, #25
    9c70:	d5d9      	bpl.n	9c26 <_printf_i+0x46>
    9c72:	1d11      	adds	r1, r2, #4
    9c74:	6019      	str	r1, [r3, #0]
    9c76:	2300      	movs	r3, #0
    9c78:	5ed5      	ldrsh	r5, [r2, r3]
    9c7a:	2d00      	cmp	r5, #0
    9c7c:	da03      	bge.n	9c86 <_printf_i+0xa6>
    9c7e:	232d      	movs	r3, #45	; 0x2d
    9c80:	9a04      	ldr	r2, [sp, #16]
    9c82:	426d      	negs	r5, r5
    9c84:	7013      	strb	r3, [r2, #0]
    9c86:	4b62      	ldr	r3, [pc, #392]	; (9e10 <_printf_i+0x230>)
    9c88:	270a      	movs	r7, #10
    9c8a:	9303      	str	r3, [sp, #12]
    9c8c:	e02f      	b.n	9cee <_printf_i+0x10e>
    9c8e:	6820      	ldr	r0, [r4, #0]
    9c90:	6819      	ldr	r1, [r3, #0]
    9c92:	0605      	lsls	r5, r0, #24
    9c94:	d503      	bpl.n	9c9e <_printf_i+0xbe>
    9c96:	1d08      	adds	r0, r1, #4
    9c98:	6018      	str	r0, [r3, #0]
    9c9a:	680d      	ldr	r5, [r1, #0]
    9c9c:	e005      	b.n	9caa <_printf_i+0xca>
    9c9e:	0640      	lsls	r0, r0, #25
    9ca0:	d5f9      	bpl.n	9c96 <_printf_i+0xb6>
    9ca2:	680d      	ldr	r5, [r1, #0]
    9ca4:	1d08      	adds	r0, r1, #4
    9ca6:	6018      	str	r0, [r3, #0]
    9ca8:	b2ad      	uxth	r5, r5
    9caa:	4b59      	ldr	r3, [pc, #356]	; (9e10 <_printf_i+0x230>)
    9cac:	2708      	movs	r7, #8
    9cae:	9303      	str	r3, [sp, #12]
    9cb0:	2a6f      	cmp	r2, #111	; 0x6f
    9cb2:	d018      	beq.n	9ce6 <_printf_i+0x106>
    9cb4:	270a      	movs	r7, #10
    9cb6:	e016      	b.n	9ce6 <_printf_i+0x106>
    9cb8:	3145      	adds	r1, #69	; 0x45
    9cba:	700a      	strb	r2, [r1, #0]
    9cbc:	4a54      	ldr	r2, [pc, #336]	; (9e10 <_printf_i+0x230>)
    9cbe:	9203      	str	r2, [sp, #12]
    9cc0:	681a      	ldr	r2, [r3, #0]
    9cc2:	6821      	ldr	r1, [r4, #0]
    9cc4:	1d10      	adds	r0, r2, #4
    9cc6:	6018      	str	r0, [r3, #0]
    9cc8:	6815      	ldr	r5, [r2, #0]
    9cca:	0608      	lsls	r0, r1, #24
    9ccc:	d522      	bpl.n	9d14 <_printf_i+0x134>
    9cce:	07cb      	lsls	r3, r1, #31
    9cd0:	d502      	bpl.n	9cd8 <_printf_i+0xf8>
    9cd2:	2320      	movs	r3, #32
    9cd4:	4319      	orrs	r1, r3
    9cd6:	6021      	str	r1, [r4, #0]
    9cd8:	2710      	movs	r7, #16
    9cda:	2d00      	cmp	r5, #0
    9cdc:	d103      	bne.n	9ce6 <_printf_i+0x106>
    9cde:	2320      	movs	r3, #32
    9ce0:	6822      	ldr	r2, [r4, #0]
    9ce2:	439a      	bics	r2, r3
    9ce4:	6022      	str	r2, [r4, #0]
    9ce6:	0023      	movs	r3, r4
    9ce8:	2200      	movs	r2, #0
    9cea:	3343      	adds	r3, #67	; 0x43
    9cec:	701a      	strb	r2, [r3, #0]
    9cee:	6863      	ldr	r3, [r4, #4]
    9cf0:	60a3      	str	r3, [r4, #8]
    9cf2:	2b00      	cmp	r3, #0
    9cf4:	db5c      	blt.n	9db0 <_printf_i+0x1d0>
    9cf6:	2204      	movs	r2, #4
    9cf8:	6821      	ldr	r1, [r4, #0]
    9cfa:	4391      	bics	r1, r2
    9cfc:	6021      	str	r1, [r4, #0]
    9cfe:	2d00      	cmp	r5, #0
    9d00:	d158      	bne.n	9db4 <_printf_i+0x1d4>
    9d02:	9e04      	ldr	r6, [sp, #16]
    9d04:	2b00      	cmp	r3, #0
    9d06:	d064      	beq.n	9dd2 <_printf_i+0x1f2>
    9d08:	0026      	movs	r6, r4
    9d0a:	9b03      	ldr	r3, [sp, #12]
    9d0c:	3642      	adds	r6, #66	; 0x42
    9d0e:	781b      	ldrb	r3, [r3, #0]
    9d10:	7033      	strb	r3, [r6, #0]
    9d12:	e05e      	b.n	9dd2 <_printf_i+0x1f2>
    9d14:	0648      	lsls	r0, r1, #25
    9d16:	d5da      	bpl.n	9cce <_printf_i+0xee>
    9d18:	b2ad      	uxth	r5, r5
    9d1a:	e7d8      	b.n	9cce <_printf_i+0xee>
    9d1c:	6809      	ldr	r1, [r1, #0]
    9d1e:	681a      	ldr	r2, [r3, #0]
    9d20:	0608      	lsls	r0, r1, #24
    9d22:	d505      	bpl.n	9d30 <_printf_i+0x150>
    9d24:	1d11      	adds	r1, r2, #4
    9d26:	6019      	str	r1, [r3, #0]
    9d28:	6813      	ldr	r3, [r2, #0]
    9d2a:	6962      	ldr	r2, [r4, #20]
    9d2c:	601a      	str	r2, [r3, #0]
    9d2e:	e006      	b.n	9d3e <_printf_i+0x15e>
    9d30:	0649      	lsls	r1, r1, #25
    9d32:	d5f7      	bpl.n	9d24 <_printf_i+0x144>
    9d34:	1d11      	adds	r1, r2, #4
    9d36:	6019      	str	r1, [r3, #0]
    9d38:	6813      	ldr	r3, [r2, #0]
    9d3a:	8aa2      	ldrh	r2, [r4, #20]
    9d3c:	801a      	strh	r2, [r3, #0]
    9d3e:	2300      	movs	r3, #0
    9d40:	9e04      	ldr	r6, [sp, #16]
    9d42:	6123      	str	r3, [r4, #16]
    9d44:	e054      	b.n	9df0 <_printf_i+0x210>
    9d46:	681a      	ldr	r2, [r3, #0]
    9d48:	1d11      	adds	r1, r2, #4
    9d4a:	6019      	str	r1, [r3, #0]
    9d4c:	6816      	ldr	r6, [r2, #0]
    9d4e:	2100      	movs	r1, #0
    9d50:	6862      	ldr	r2, [r4, #4]
    9d52:	0030      	movs	r0, r6
    9d54:	f000 f9e6 	bl	a124 <memchr>
    9d58:	2800      	cmp	r0, #0
    9d5a:	d001      	beq.n	9d60 <_printf_i+0x180>
    9d5c:	1b80      	subs	r0, r0, r6
    9d5e:	6060      	str	r0, [r4, #4]
    9d60:	6863      	ldr	r3, [r4, #4]
    9d62:	6123      	str	r3, [r4, #16]
    9d64:	2300      	movs	r3, #0
    9d66:	9a04      	ldr	r2, [sp, #16]
    9d68:	7013      	strb	r3, [r2, #0]
    9d6a:	e041      	b.n	9df0 <_printf_i+0x210>
    9d6c:	6923      	ldr	r3, [r4, #16]
    9d6e:	0032      	movs	r2, r6
    9d70:	9906      	ldr	r1, [sp, #24]
    9d72:	9805      	ldr	r0, [sp, #20]
    9d74:	9d07      	ldr	r5, [sp, #28]
    9d76:	47a8      	blx	r5
    9d78:	1c43      	adds	r3, r0, #1
    9d7a:	d043      	beq.n	9e04 <_printf_i+0x224>
    9d7c:	6823      	ldr	r3, [r4, #0]
    9d7e:	2500      	movs	r5, #0
    9d80:	079b      	lsls	r3, r3, #30
    9d82:	d40f      	bmi.n	9da4 <_printf_i+0x1c4>
    9d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d86:	68e0      	ldr	r0, [r4, #12]
    9d88:	4298      	cmp	r0, r3
    9d8a:	da3d      	bge.n	9e08 <_printf_i+0x228>
    9d8c:	0018      	movs	r0, r3
    9d8e:	e03b      	b.n	9e08 <_printf_i+0x228>
    9d90:	0022      	movs	r2, r4
    9d92:	2301      	movs	r3, #1
    9d94:	3219      	adds	r2, #25
    9d96:	9906      	ldr	r1, [sp, #24]
    9d98:	9805      	ldr	r0, [sp, #20]
    9d9a:	9e07      	ldr	r6, [sp, #28]
    9d9c:	47b0      	blx	r6
    9d9e:	1c43      	adds	r3, r0, #1
    9da0:	d030      	beq.n	9e04 <_printf_i+0x224>
    9da2:	3501      	adds	r5, #1
    9da4:	68e3      	ldr	r3, [r4, #12]
    9da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9da8:	1a9b      	subs	r3, r3, r2
    9daa:	429d      	cmp	r5, r3
    9dac:	dbf0      	blt.n	9d90 <_printf_i+0x1b0>
    9dae:	e7e9      	b.n	9d84 <_printf_i+0x1a4>
    9db0:	2d00      	cmp	r5, #0
    9db2:	d0a9      	beq.n	9d08 <_printf_i+0x128>
    9db4:	9e04      	ldr	r6, [sp, #16]
    9db6:	0028      	movs	r0, r5
    9db8:	0039      	movs	r1, r7
    9dba:	f7fe ff69 	bl	8c90 <__aeabi_uidivmod>
    9dbe:	9b03      	ldr	r3, [sp, #12]
    9dc0:	3e01      	subs	r6, #1
    9dc2:	5c5b      	ldrb	r3, [r3, r1]
    9dc4:	0028      	movs	r0, r5
    9dc6:	7033      	strb	r3, [r6, #0]
    9dc8:	0039      	movs	r1, r7
    9dca:	f7fe fedb 	bl	8b84 <__udivsi3>
    9dce:	1e05      	subs	r5, r0, #0
    9dd0:	d1f1      	bne.n	9db6 <_printf_i+0x1d6>
    9dd2:	2f08      	cmp	r7, #8
    9dd4:	d109      	bne.n	9dea <_printf_i+0x20a>
    9dd6:	6823      	ldr	r3, [r4, #0]
    9dd8:	07db      	lsls	r3, r3, #31
    9dda:	d506      	bpl.n	9dea <_printf_i+0x20a>
    9ddc:	6863      	ldr	r3, [r4, #4]
    9dde:	6922      	ldr	r2, [r4, #16]
    9de0:	4293      	cmp	r3, r2
    9de2:	dc02      	bgt.n	9dea <_printf_i+0x20a>
    9de4:	2330      	movs	r3, #48	; 0x30
    9de6:	3e01      	subs	r6, #1
    9de8:	7033      	strb	r3, [r6, #0]
    9dea:	9b04      	ldr	r3, [sp, #16]
    9dec:	1b9b      	subs	r3, r3, r6
    9dee:	6123      	str	r3, [r4, #16]
    9df0:	9b07      	ldr	r3, [sp, #28]
    9df2:	aa09      	add	r2, sp, #36	; 0x24
    9df4:	9300      	str	r3, [sp, #0]
    9df6:	0021      	movs	r1, r4
    9df8:	9b06      	ldr	r3, [sp, #24]
    9dfa:	9805      	ldr	r0, [sp, #20]
    9dfc:	f7ff fe82 	bl	9b04 <_printf_common>
    9e00:	1c43      	adds	r3, r0, #1
    9e02:	d1b3      	bne.n	9d6c <_printf_i+0x18c>
    9e04:	2001      	movs	r0, #1
    9e06:	4240      	negs	r0, r0
    9e08:	b00b      	add	sp, #44	; 0x2c
    9e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e0c:	0000ab1e 	.word	0x0000ab1e
    9e10:	0000ab0d 	.word	0x0000ab0d

00009e14 <_sbrk_r>:
    9e14:	2300      	movs	r3, #0
    9e16:	b570      	push	{r4, r5, r6, lr}
    9e18:	4c06      	ldr	r4, [pc, #24]	; (9e34 <_sbrk_r+0x20>)
    9e1a:	0005      	movs	r5, r0
    9e1c:	0008      	movs	r0, r1
    9e1e:	6023      	str	r3, [r4, #0]
    9e20:	f7fe fe92 	bl	8b48 <_sbrk>
    9e24:	1c43      	adds	r3, r0, #1
    9e26:	d103      	bne.n	9e30 <_sbrk_r+0x1c>
    9e28:	6823      	ldr	r3, [r4, #0]
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	d000      	beq.n	9e30 <_sbrk_r+0x1c>
    9e2e:	602b      	str	r3, [r5, #0]
    9e30:	bd70      	pop	{r4, r5, r6, pc}
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	20000dd8 	.word	0x20000dd8

00009e38 <__sread>:
    9e38:	b570      	push	{r4, r5, r6, lr}
    9e3a:	000c      	movs	r4, r1
    9e3c:	250e      	movs	r5, #14
    9e3e:	5f49      	ldrsh	r1, [r1, r5]
    9e40:	f000 f97e 	bl	a140 <_read_r>
    9e44:	2800      	cmp	r0, #0
    9e46:	db03      	blt.n	9e50 <__sread+0x18>
    9e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9e4a:	181b      	adds	r3, r3, r0
    9e4c:	6563      	str	r3, [r4, #84]	; 0x54
    9e4e:	bd70      	pop	{r4, r5, r6, pc}
    9e50:	89a3      	ldrh	r3, [r4, #12]
    9e52:	4a02      	ldr	r2, [pc, #8]	; (9e5c <__sread+0x24>)
    9e54:	4013      	ands	r3, r2
    9e56:	81a3      	strh	r3, [r4, #12]
    9e58:	e7f9      	b.n	9e4e <__sread+0x16>
    9e5a:	46c0      	nop			; (mov r8, r8)
    9e5c:	ffffefff 	.word	0xffffefff

00009e60 <__swrite>:
    9e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e62:	001f      	movs	r7, r3
    9e64:	898b      	ldrh	r3, [r1, #12]
    9e66:	0005      	movs	r5, r0
    9e68:	000c      	movs	r4, r1
    9e6a:	0016      	movs	r6, r2
    9e6c:	05db      	lsls	r3, r3, #23
    9e6e:	d505      	bpl.n	9e7c <__swrite+0x1c>
    9e70:	230e      	movs	r3, #14
    9e72:	5ec9      	ldrsh	r1, [r1, r3]
    9e74:	2200      	movs	r2, #0
    9e76:	2302      	movs	r3, #2
    9e78:	f000 f940 	bl	a0fc <_lseek_r>
    9e7c:	89a3      	ldrh	r3, [r4, #12]
    9e7e:	4a05      	ldr	r2, [pc, #20]	; (9e94 <__swrite+0x34>)
    9e80:	0028      	movs	r0, r5
    9e82:	4013      	ands	r3, r2
    9e84:	81a3      	strh	r3, [r4, #12]
    9e86:	0032      	movs	r2, r6
    9e88:	230e      	movs	r3, #14
    9e8a:	5ee1      	ldrsh	r1, [r4, r3]
    9e8c:	003b      	movs	r3, r7
    9e8e:	f000 f875 	bl	9f7c <_write_r>
    9e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e94:	ffffefff 	.word	0xffffefff

00009e98 <__sseek>:
    9e98:	b570      	push	{r4, r5, r6, lr}
    9e9a:	000c      	movs	r4, r1
    9e9c:	250e      	movs	r5, #14
    9e9e:	5f49      	ldrsh	r1, [r1, r5]
    9ea0:	f000 f92c 	bl	a0fc <_lseek_r>
    9ea4:	89a3      	ldrh	r3, [r4, #12]
    9ea6:	1c42      	adds	r2, r0, #1
    9ea8:	d103      	bne.n	9eb2 <__sseek+0x1a>
    9eaa:	4a05      	ldr	r2, [pc, #20]	; (9ec0 <__sseek+0x28>)
    9eac:	4013      	ands	r3, r2
    9eae:	81a3      	strh	r3, [r4, #12]
    9eb0:	bd70      	pop	{r4, r5, r6, pc}
    9eb2:	2280      	movs	r2, #128	; 0x80
    9eb4:	0152      	lsls	r2, r2, #5
    9eb6:	4313      	orrs	r3, r2
    9eb8:	81a3      	strh	r3, [r4, #12]
    9eba:	6560      	str	r0, [r4, #84]	; 0x54
    9ebc:	e7f8      	b.n	9eb0 <__sseek+0x18>
    9ebe:	46c0      	nop			; (mov r8, r8)
    9ec0:	ffffefff 	.word	0xffffefff

00009ec4 <__sclose>:
    9ec4:	b510      	push	{r4, lr}
    9ec6:	230e      	movs	r3, #14
    9ec8:	5ec9      	ldrsh	r1, [r1, r3]
    9eca:	f000 f8e1 	bl	a090 <_close_r>
    9ece:	bd10      	pop	{r4, pc}

00009ed0 <__swbuf_r>:
    9ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ed2:	0005      	movs	r5, r0
    9ed4:	000e      	movs	r6, r1
    9ed6:	0014      	movs	r4, r2
    9ed8:	2800      	cmp	r0, #0
    9eda:	d004      	beq.n	9ee6 <__swbuf_r+0x16>
    9edc:	6983      	ldr	r3, [r0, #24]
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d101      	bne.n	9ee6 <__swbuf_r+0x16>
    9ee2:	f7ff fb17 	bl	9514 <__sinit>
    9ee6:	4b22      	ldr	r3, [pc, #136]	; (9f70 <__swbuf_r+0xa0>)
    9ee8:	429c      	cmp	r4, r3
    9eea:	d12d      	bne.n	9f48 <__swbuf_r+0x78>
    9eec:	686c      	ldr	r4, [r5, #4]
    9eee:	69a3      	ldr	r3, [r4, #24]
    9ef0:	60a3      	str	r3, [r4, #8]
    9ef2:	89a3      	ldrh	r3, [r4, #12]
    9ef4:	071b      	lsls	r3, r3, #28
    9ef6:	d531      	bpl.n	9f5c <__swbuf_r+0x8c>
    9ef8:	6923      	ldr	r3, [r4, #16]
    9efa:	2b00      	cmp	r3, #0
    9efc:	d02e      	beq.n	9f5c <__swbuf_r+0x8c>
    9efe:	6823      	ldr	r3, [r4, #0]
    9f00:	6922      	ldr	r2, [r4, #16]
    9f02:	b2f7      	uxtb	r7, r6
    9f04:	1a98      	subs	r0, r3, r2
    9f06:	6963      	ldr	r3, [r4, #20]
    9f08:	b2f6      	uxtb	r6, r6
    9f0a:	4298      	cmp	r0, r3
    9f0c:	db05      	blt.n	9f1a <__swbuf_r+0x4a>
    9f0e:	0021      	movs	r1, r4
    9f10:	0028      	movs	r0, r5
    9f12:	f7ff fa91 	bl	9438 <_fflush_r>
    9f16:	2800      	cmp	r0, #0
    9f18:	d126      	bne.n	9f68 <__swbuf_r+0x98>
    9f1a:	68a3      	ldr	r3, [r4, #8]
    9f1c:	3001      	adds	r0, #1
    9f1e:	3b01      	subs	r3, #1
    9f20:	60a3      	str	r3, [r4, #8]
    9f22:	6823      	ldr	r3, [r4, #0]
    9f24:	1c5a      	adds	r2, r3, #1
    9f26:	6022      	str	r2, [r4, #0]
    9f28:	701f      	strb	r7, [r3, #0]
    9f2a:	6963      	ldr	r3, [r4, #20]
    9f2c:	4298      	cmp	r0, r3
    9f2e:	d004      	beq.n	9f3a <__swbuf_r+0x6a>
    9f30:	89a3      	ldrh	r3, [r4, #12]
    9f32:	07db      	lsls	r3, r3, #31
    9f34:	d51a      	bpl.n	9f6c <__swbuf_r+0x9c>
    9f36:	2e0a      	cmp	r6, #10
    9f38:	d118      	bne.n	9f6c <__swbuf_r+0x9c>
    9f3a:	0021      	movs	r1, r4
    9f3c:	0028      	movs	r0, r5
    9f3e:	f7ff fa7b 	bl	9438 <_fflush_r>
    9f42:	2800      	cmp	r0, #0
    9f44:	d012      	beq.n	9f6c <__swbuf_r+0x9c>
    9f46:	e00f      	b.n	9f68 <__swbuf_r+0x98>
    9f48:	4b0a      	ldr	r3, [pc, #40]	; (9f74 <__swbuf_r+0xa4>)
    9f4a:	429c      	cmp	r4, r3
    9f4c:	d101      	bne.n	9f52 <__swbuf_r+0x82>
    9f4e:	68ac      	ldr	r4, [r5, #8]
    9f50:	e7cd      	b.n	9eee <__swbuf_r+0x1e>
    9f52:	4b09      	ldr	r3, [pc, #36]	; (9f78 <__swbuf_r+0xa8>)
    9f54:	429c      	cmp	r4, r3
    9f56:	d1ca      	bne.n	9eee <__swbuf_r+0x1e>
    9f58:	68ec      	ldr	r4, [r5, #12]
    9f5a:	e7c8      	b.n	9eee <__swbuf_r+0x1e>
    9f5c:	0021      	movs	r1, r4
    9f5e:	0028      	movs	r0, r5
    9f60:	f000 f820 	bl	9fa4 <__swsetup_r>
    9f64:	2800      	cmp	r0, #0
    9f66:	d0ca      	beq.n	9efe <__swbuf_r+0x2e>
    9f68:	2601      	movs	r6, #1
    9f6a:	4276      	negs	r6, r6
    9f6c:	0030      	movs	r0, r6
    9f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f70:	0000aabc 	.word	0x0000aabc
    9f74:	0000aadc 	.word	0x0000aadc
    9f78:	0000aa9c 	.word	0x0000aa9c

00009f7c <_write_r>:
    9f7c:	b570      	push	{r4, r5, r6, lr}
    9f7e:	0005      	movs	r5, r0
    9f80:	0008      	movs	r0, r1
    9f82:	0011      	movs	r1, r2
    9f84:	2200      	movs	r2, #0
    9f86:	4c06      	ldr	r4, [pc, #24]	; (9fa0 <_write_r+0x24>)
    9f88:	6022      	str	r2, [r4, #0]
    9f8a:	001a      	movs	r2, r3
    9f8c:	f7f9 fdec 	bl	3b68 <_write>
    9f90:	1c43      	adds	r3, r0, #1
    9f92:	d103      	bne.n	9f9c <_write_r+0x20>
    9f94:	6823      	ldr	r3, [r4, #0]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d000      	beq.n	9f9c <_write_r+0x20>
    9f9a:	602b      	str	r3, [r5, #0]
    9f9c:	bd70      	pop	{r4, r5, r6, pc}
    9f9e:	46c0      	nop			; (mov r8, r8)
    9fa0:	20000dd8 	.word	0x20000dd8

00009fa4 <__swsetup_r>:
    9fa4:	4b36      	ldr	r3, [pc, #216]	; (a080 <__swsetup_r+0xdc>)
    9fa6:	b570      	push	{r4, r5, r6, lr}
    9fa8:	681d      	ldr	r5, [r3, #0]
    9faa:	0006      	movs	r6, r0
    9fac:	000c      	movs	r4, r1
    9fae:	2d00      	cmp	r5, #0
    9fb0:	d005      	beq.n	9fbe <__swsetup_r+0x1a>
    9fb2:	69ab      	ldr	r3, [r5, #24]
    9fb4:	2b00      	cmp	r3, #0
    9fb6:	d102      	bne.n	9fbe <__swsetup_r+0x1a>
    9fb8:	0028      	movs	r0, r5
    9fba:	f7ff faab 	bl	9514 <__sinit>
    9fbe:	4b31      	ldr	r3, [pc, #196]	; (a084 <__swsetup_r+0xe0>)
    9fc0:	429c      	cmp	r4, r3
    9fc2:	d10f      	bne.n	9fe4 <__swsetup_r+0x40>
    9fc4:	686c      	ldr	r4, [r5, #4]
    9fc6:	230c      	movs	r3, #12
    9fc8:	5ee2      	ldrsh	r2, [r4, r3]
    9fca:	b293      	uxth	r3, r2
    9fcc:	0719      	lsls	r1, r3, #28
    9fce:	d42d      	bmi.n	a02c <__swsetup_r+0x88>
    9fd0:	06d9      	lsls	r1, r3, #27
    9fd2:	d411      	bmi.n	9ff8 <__swsetup_r+0x54>
    9fd4:	2309      	movs	r3, #9
    9fd6:	2001      	movs	r0, #1
    9fd8:	6033      	str	r3, [r6, #0]
    9fda:	3337      	adds	r3, #55	; 0x37
    9fdc:	4313      	orrs	r3, r2
    9fde:	81a3      	strh	r3, [r4, #12]
    9fe0:	4240      	negs	r0, r0
    9fe2:	bd70      	pop	{r4, r5, r6, pc}
    9fe4:	4b28      	ldr	r3, [pc, #160]	; (a088 <__swsetup_r+0xe4>)
    9fe6:	429c      	cmp	r4, r3
    9fe8:	d101      	bne.n	9fee <__swsetup_r+0x4a>
    9fea:	68ac      	ldr	r4, [r5, #8]
    9fec:	e7eb      	b.n	9fc6 <__swsetup_r+0x22>
    9fee:	4b27      	ldr	r3, [pc, #156]	; (a08c <__swsetup_r+0xe8>)
    9ff0:	429c      	cmp	r4, r3
    9ff2:	d1e8      	bne.n	9fc6 <__swsetup_r+0x22>
    9ff4:	68ec      	ldr	r4, [r5, #12]
    9ff6:	e7e6      	b.n	9fc6 <__swsetup_r+0x22>
    9ff8:	075b      	lsls	r3, r3, #29
    9ffa:	d513      	bpl.n	a024 <__swsetup_r+0x80>
    9ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9ffe:	2900      	cmp	r1, #0
    a000:	d008      	beq.n	a014 <__swsetup_r+0x70>
    a002:	0023      	movs	r3, r4
    a004:	3344      	adds	r3, #68	; 0x44
    a006:	4299      	cmp	r1, r3
    a008:	d002      	beq.n	a010 <__swsetup_r+0x6c>
    a00a:	0030      	movs	r0, r6
    a00c:	f7ff fb8e 	bl	972c <_free_r>
    a010:	2300      	movs	r3, #0
    a012:	6363      	str	r3, [r4, #52]	; 0x34
    a014:	2224      	movs	r2, #36	; 0x24
    a016:	89a3      	ldrh	r3, [r4, #12]
    a018:	4393      	bics	r3, r2
    a01a:	81a3      	strh	r3, [r4, #12]
    a01c:	2300      	movs	r3, #0
    a01e:	6063      	str	r3, [r4, #4]
    a020:	6923      	ldr	r3, [r4, #16]
    a022:	6023      	str	r3, [r4, #0]
    a024:	2308      	movs	r3, #8
    a026:	89a2      	ldrh	r2, [r4, #12]
    a028:	4313      	orrs	r3, r2
    a02a:	81a3      	strh	r3, [r4, #12]
    a02c:	6923      	ldr	r3, [r4, #16]
    a02e:	2b00      	cmp	r3, #0
    a030:	d10b      	bne.n	a04a <__swsetup_r+0xa6>
    a032:	21a0      	movs	r1, #160	; 0xa0
    a034:	2280      	movs	r2, #128	; 0x80
    a036:	89a3      	ldrh	r3, [r4, #12]
    a038:	0089      	lsls	r1, r1, #2
    a03a:	0092      	lsls	r2, r2, #2
    a03c:	400b      	ands	r3, r1
    a03e:	4293      	cmp	r3, r2
    a040:	d003      	beq.n	a04a <__swsetup_r+0xa6>
    a042:	0021      	movs	r1, r4
    a044:	0030      	movs	r0, r6
    a046:	f7ff fb23 	bl	9690 <__smakebuf_r>
    a04a:	2301      	movs	r3, #1
    a04c:	89a2      	ldrh	r2, [r4, #12]
    a04e:	4013      	ands	r3, r2
    a050:	d011      	beq.n	a076 <__swsetup_r+0xd2>
    a052:	2300      	movs	r3, #0
    a054:	60a3      	str	r3, [r4, #8]
    a056:	6963      	ldr	r3, [r4, #20]
    a058:	425b      	negs	r3, r3
    a05a:	61a3      	str	r3, [r4, #24]
    a05c:	2000      	movs	r0, #0
    a05e:	6923      	ldr	r3, [r4, #16]
    a060:	4283      	cmp	r3, r0
    a062:	d1be      	bne.n	9fe2 <__swsetup_r+0x3e>
    a064:	230c      	movs	r3, #12
    a066:	5ee2      	ldrsh	r2, [r4, r3]
    a068:	0613      	lsls	r3, r2, #24
    a06a:	d5ba      	bpl.n	9fe2 <__swsetup_r+0x3e>
    a06c:	2340      	movs	r3, #64	; 0x40
    a06e:	4313      	orrs	r3, r2
    a070:	81a3      	strh	r3, [r4, #12]
    a072:	3801      	subs	r0, #1
    a074:	e7b5      	b.n	9fe2 <__swsetup_r+0x3e>
    a076:	0792      	lsls	r2, r2, #30
    a078:	d400      	bmi.n	a07c <__swsetup_r+0xd8>
    a07a:	6963      	ldr	r3, [r4, #20]
    a07c:	60a3      	str	r3, [r4, #8]
    a07e:	e7ed      	b.n	a05c <__swsetup_r+0xb8>
    a080:	20000128 	.word	0x20000128
    a084:	0000aabc 	.word	0x0000aabc
    a088:	0000aadc 	.word	0x0000aadc
    a08c:	0000aa9c 	.word	0x0000aa9c

0000a090 <_close_r>:
    a090:	2300      	movs	r3, #0
    a092:	b570      	push	{r4, r5, r6, lr}
    a094:	4c06      	ldr	r4, [pc, #24]	; (a0b0 <_close_r+0x20>)
    a096:	0005      	movs	r5, r0
    a098:	0008      	movs	r0, r1
    a09a:	6023      	str	r3, [r4, #0]
    a09c:	f7fe fd66 	bl	8b6c <_close>
    a0a0:	1c43      	adds	r3, r0, #1
    a0a2:	d103      	bne.n	a0ac <_close_r+0x1c>
    a0a4:	6823      	ldr	r3, [r4, #0]
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d000      	beq.n	a0ac <_close_r+0x1c>
    a0aa:	602b      	str	r3, [r5, #0]
    a0ac:	bd70      	pop	{r4, r5, r6, pc}
    a0ae:	46c0      	nop			; (mov r8, r8)
    a0b0:	20000dd8 	.word	0x20000dd8

0000a0b4 <_fstat_r>:
    a0b4:	2300      	movs	r3, #0
    a0b6:	b570      	push	{r4, r5, r6, lr}
    a0b8:	4c06      	ldr	r4, [pc, #24]	; (a0d4 <_fstat_r+0x20>)
    a0ba:	0005      	movs	r5, r0
    a0bc:	0008      	movs	r0, r1
    a0be:	0011      	movs	r1, r2
    a0c0:	6023      	str	r3, [r4, #0]
    a0c2:	f7fe fd56 	bl	8b72 <_fstat>
    a0c6:	1c43      	adds	r3, r0, #1
    a0c8:	d103      	bne.n	a0d2 <_fstat_r+0x1e>
    a0ca:	6823      	ldr	r3, [r4, #0]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d000      	beq.n	a0d2 <_fstat_r+0x1e>
    a0d0:	602b      	str	r3, [r5, #0]
    a0d2:	bd70      	pop	{r4, r5, r6, pc}
    a0d4:	20000dd8 	.word	0x20000dd8

0000a0d8 <_isatty_r>:
    a0d8:	2300      	movs	r3, #0
    a0da:	b570      	push	{r4, r5, r6, lr}
    a0dc:	4c06      	ldr	r4, [pc, #24]	; (a0f8 <_isatty_r+0x20>)
    a0de:	0005      	movs	r5, r0
    a0e0:	0008      	movs	r0, r1
    a0e2:	6023      	str	r3, [r4, #0]
    a0e4:	f7fe fd4a 	bl	8b7c <_isatty>
    a0e8:	1c43      	adds	r3, r0, #1
    a0ea:	d103      	bne.n	a0f4 <_isatty_r+0x1c>
    a0ec:	6823      	ldr	r3, [r4, #0]
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d000      	beq.n	a0f4 <_isatty_r+0x1c>
    a0f2:	602b      	str	r3, [r5, #0]
    a0f4:	bd70      	pop	{r4, r5, r6, pc}
    a0f6:	46c0      	nop			; (mov r8, r8)
    a0f8:	20000dd8 	.word	0x20000dd8

0000a0fc <_lseek_r>:
    a0fc:	b570      	push	{r4, r5, r6, lr}
    a0fe:	0005      	movs	r5, r0
    a100:	0008      	movs	r0, r1
    a102:	0011      	movs	r1, r2
    a104:	2200      	movs	r2, #0
    a106:	4c06      	ldr	r4, [pc, #24]	; (a120 <_lseek_r+0x24>)
    a108:	6022      	str	r2, [r4, #0]
    a10a:	001a      	movs	r2, r3
    a10c:	f7fe fd38 	bl	8b80 <_lseek>
    a110:	1c43      	adds	r3, r0, #1
    a112:	d103      	bne.n	a11c <_lseek_r+0x20>
    a114:	6823      	ldr	r3, [r4, #0]
    a116:	2b00      	cmp	r3, #0
    a118:	d000      	beq.n	a11c <_lseek_r+0x20>
    a11a:	602b      	str	r3, [r5, #0]
    a11c:	bd70      	pop	{r4, r5, r6, pc}
    a11e:	46c0      	nop			; (mov r8, r8)
    a120:	20000dd8 	.word	0x20000dd8

0000a124 <memchr>:
    a124:	b2c9      	uxtb	r1, r1
    a126:	1882      	adds	r2, r0, r2
    a128:	4290      	cmp	r0, r2
    a12a:	d101      	bne.n	a130 <memchr+0xc>
    a12c:	2000      	movs	r0, #0
    a12e:	4770      	bx	lr
    a130:	7803      	ldrb	r3, [r0, #0]
    a132:	428b      	cmp	r3, r1
    a134:	d0fb      	beq.n	a12e <memchr+0xa>
    a136:	3001      	adds	r0, #1
    a138:	e7f6      	b.n	a128 <memchr+0x4>

0000a13a <__malloc_lock>:
    a13a:	4770      	bx	lr

0000a13c <__malloc_unlock>:
    a13c:	4770      	bx	lr
	...

0000a140 <_read_r>:
    a140:	b570      	push	{r4, r5, r6, lr}
    a142:	0005      	movs	r5, r0
    a144:	0008      	movs	r0, r1
    a146:	0011      	movs	r1, r2
    a148:	2200      	movs	r2, #0
    a14a:	4c06      	ldr	r4, [pc, #24]	; (a164 <_read_r+0x24>)
    a14c:	6022      	str	r2, [r4, #0]
    a14e:	001a      	movs	r2, r3
    a150:	f7f9 fce8 	bl	3b24 <_read>
    a154:	1c43      	adds	r3, r0, #1
    a156:	d103      	bne.n	a160 <_read_r+0x20>
    a158:	6823      	ldr	r3, [r4, #0]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d000      	beq.n	a160 <_read_r+0x20>
    a15e:	602b      	str	r3, [r5, #0]
    a160:	bd70      	pop	{r4, r5, r6, pc}
    a162:	46c0      	nop			; (mov r8, r8)
    a164:	20000dd8 	.word	0x20000dd8

0000a168 <_tcc_apbcmasks>:
    a168:	00000100 00000200 00000400              ............

0000a174 <_tcc_cc_nums>:
    a174:	00020204                                ....

0000a178 <_tcc_gclk_ids>:
    a178:	001b1a1a                                ....

0000a17c <_tcc_maxs>:
    a17c:	00ffffff 00ffffff 0000ffff              ............

0000a188 <_tcc_ow_nums>:
    a188:	00020408                                ....

0000a18c <_tcc_intflag>:
    a18c:	00000001 00000002 00000004 00000008     ................
    a19c:	00001000 00002000 00004000 00008000     ..... ...@......
    a1ac:	00010000 00020000 00040000 00080000     ................

0000a1bc <tcc_interrupt_vectors.12466>:
    a1bc:	0011100f                                ....

0000a1c0 <mmc_trans_multipliers>:
    a1c0:	00000000 0000000a 0000000c 0000000d     ................
    a1d0:	0000000f 00000014 0000001a 0000001e     ................
    a1e0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    a1f0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000a200 <sd_mmc_trans_units>:
    a200:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000a21c <sd_trans_multipliers>:
    a21c:	00000000 0000000a 0000000c 0000000d     ................
    a22c:	0000000f 00000014 00000019 0000001e     ................
    a23c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    a24c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    a25c:	000015fe 000016d4 000016d4 00001540     ............@...
    a26c:	000016d4 000016d4 000016d4 000016d4     ................
    a27c:	000016d4 000016d4 000016d4 000016d4     ................
    a28c:	000016d4 000016d4 000016d4 000016d4     ................
    a29c:	000016d4 000016d4 00001564 000016d4     ........d.......
    a2ac:	000016d4 000016d4 000016d4 000016d4     ................
    a2bc:	000016d4 000016d4 000015ee 00001682     ................
    a2cc:	000016d4 000016d4 000016a2 000016d4     ................
    a2dc:	000016d4 000016d4 000016d4 000016d4     ................
    a2ec:	000016d4 0000162a 000016d4 000016d4     ....*...........
    a2fc:	000016c4 000016d4 000016cc 000016d4     ................
    a30c:	000016d4 000016d4 000016d4 000016ba     ................
    a31c:	000016d4 000016d4 000016d4 000016d4     ................
    a32c:	000016d4 000016d4 000016d4 000016d4     ................
    a33c:	000016d4 000016d4 000016d4 000016d4     ................
    a34c:	000016d4 000016d4 000016d4 000016d4     ................
    a35c:	000016d4 000016d4 000016d4 000016d4     ................
    a36c:	000016d4 000016d4 000016d4 000016d4     ................
    a37c:	000016d4 000016d4 000016d4 000016d4     ................
    a38c:	000016d4 000016d4 000016d4 000016d4     ................
    a39c:	000016d4 000016d4 000016d4 000016d4     ................
    a3ac:	000016d4 000016d4 000016d4 000016d4     ................
    a3bc:	000016d4 000016d4 000015f6 31333231     ............1231
    a3cc:	32313332 33323133 00000000 0000295e     23123123....^)..
    a3dc:	0000295a 0000295a 000029c8 000029c8     Z)..Z)...)...)..
    a3ec:	00002972 00002964 00002978 000029b6     r)..d)..x)...)..
    a3fc:	00002b4c 00002b2c 00002b2c 00002bb8     L+..,+..,+...+..
    a40c:	00002b3e 00002b5a 00002b30 00002b68     >+..Z+..0+..h+..
    a41c:	00002ba8                                .+..

0000a420 <LfnOfs>:
    a420:	07050301 12100e09 1c181614 0000001e     ................

0000a430 <excvt.4558>:
    a430:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    a440:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    a450:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    a460:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    a470:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    a480:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    a490:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    a4a0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    a4b0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    a4c0:	00005d5b                                []..

0000a4c4 <Tbl>:
    a4c4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    a4d4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    a4e4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    a4f4:	00d600ff 00f800dc 00d800a3 019200d7     ................
    a504:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    a514:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    a524:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    a534:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    a544:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    a554:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    a564:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    a574:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    a584:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    a594:	00da00de 00d900db 00dd00fd 00b400af     ................
    a5a4:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    a5b4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000a5c4 <tbl_lower.4308>:
    a5c4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    a5d4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    a5e4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    a5f4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    a604:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    a614:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    a624:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    a634:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    a644:	01050103 01090107 010d010b 0111010f     ................
    a654:	01150113 01190117 011d011b 0121011f     ..............!.
    a664:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    a674:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    a684:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    a694:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    a6a4:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    a6b4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    a6c4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    a6d4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    a6e4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    a6f4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    a704:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    a714:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    a724:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    a734:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    a744:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    a754:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    a764:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    a774:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    a784:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    a794:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000a7a4 <tbl_upper.4309>:
    a7a4:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    a7b4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    a7c4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    a7d4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    a7e4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    a7f4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    a804:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    a814:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    a824:	01040102 01080106 010c010a 0110010e     ................
    a834:	01140112 01180116 011c011a 0120011e     .............. .
    a844:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    a854:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    a864:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    a874:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    a884:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    a894:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    a8a4:	03940393 03960395 03980397 039a0399     ................
    a8b4:	039c039b 039e039d 03a0039f 03a303a1     ................
    a8c4:	03a503a4 03a703a6 03a903a8 041003aa     ................
    a8d4:	04120411 04140413 04160415 04180417     ................
    a8e4:	041a0419 041c041b 041e041d 0420041f     .............. .
    a8f4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    a904:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    a914:	04030402 04050404 04070406 04090408     ................
    a924:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    a934:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    a944:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    a954:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    a964:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    a974:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    a984:	6f727245 68772072 20656c69 6e65706f     Error while open
    a994:	20676e69 656c6966 2523203a 000d0a64     ing file: #%d...
    a9a4:	6f727245 68772072 20656c69 74697277     Error while writ
    a9b4:	20676e69 20564157 64616568 203a7265     ing WAV header: 
    a9c4:	0a642523 0000000d 32303831 315f3231     #%d.....180212_1
    a9d4:	32393034 61772e35 00000076 4f525245     40925.wav...ERRO
    a9e4:	6c632052 6e69736f 65722067 64726f63     R closing record
    a9f4:	66206465 0a656c69 0000000d 64726143     ed file.....Card
    aa04:	736e6920 6c6c6174 69616620 0d0a216c      install fail!..
    aa14:	00000000 61656c50 75206573 756c706e     ....Please unplu
    aa24:	6e612067 65722064 756c702d 68742067     g and re-plug th
    aa34:	61632065 0a2e6472 0000000d 0000648c     e card.......d..
    aa44:	0000649a 00006534 000065d4 00006638     .d..4e...e..8f..

0000aa54 <_usb_device_irq_bits>:
    aa54:	00080004 00800070 01000001 00000200     ....p...........

0000aa64 <_usb_endpoint_irq_bits>:
    aa64:	60100c03 42000800 42000c00 42001000     ...`...B...B...B
    aa74:	42001400 42001800 42001c00 2f445322     ...B...B...B"SD/
    aa84:	20434d4d 64726143 65766f20 50532072     MMC Card over SP
    aa94:	00002249                                I"..

0000aa98 <_global_impure_ptr>:
    aa98:	2000012c                                ,.. 

0000aa9c <__sf_fake_stderr>:
	...

0000aabc <__sf_fake_stdin>:
	...

0000aadc <__sf_fake_stdout>:
	...
    aafc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ab0c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ab1c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    ab2c:	00006665                                ef..

0000ab30 <_init>:
    ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab32:	46c0      	nop			; (mov r8, r8)
    ab34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ab36:	bc08      	pop	{r3}
    ab38:	469e      	mov	lr, r3
    ab3a:	4770      	bx	lr

0000ab3c <__init_array_start>:
    ab3c:	000000dd 	.word	0x000000dd

0000ab40 <_fini>:
    ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab42:	46c0      	nop			; (mov r8, r8)
    ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ab46:	bc08      	pop	{r3}
    ab48:	469e      	mov	lr, r3
    ab4a:	4770      	bx	lr

0000ab4c <__fini_array_start>:
    ab4c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <sd_mmc_cards>:
	...
20000014:	0025 0000 0000 0000 0000 0000 0000 0000     %...............
	...

20000030 <udi_api_msc>:
20000030:	1101 0000 1775 0000 179d 0000 10c1 0000     ....u...........
20000040:	0000 0000                                   ....

20000044 <udi_msc_b_ack_trans>:
20000044:	0101                                             .

20000045 <udi_msc_b_reset_trans>:
20000045:	0001 5500                                        ...

20000048 <udi_msc_csw>:
20000048:	5355 5342 0000 0000 0000 0000 0000 0000     USBS............

20000058 <udi_msc_inquiry_data.12606>:
20000058:	0000 0203 001f 0000 5441 454d 204c 2020     ........ATMEL   
	...
20000078:	2e31 3030                                   1.00

2000007c <udc_string_desc>:
2000007c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000098 <udc_string_desc_languageid>:
20000098:	0304 0409                                   ....

2000009c <udc_string_manufacturer_name>:
2000009c:	5441 454d 204c 5341 0046 0000               ATMEL ASF...

200000a8 <udc_string_product_name>:
200000a8:	534d 0043                                   MSC.

200000ac <wave_header>:
200000ac:	4952 4646 0000 0000 4157 4556 6d66 2074     RIFF....WAVEfmt 
200000bc:	0010 0000 0001 0002 ac44 0000 b110 0002     ........D.......
200000cc:	0004 0010 6164 6174 0000 0000               ....data....

200000d8 <udc_config>:
200000d8:	010c 2000 00e4 2000 0000 0000               ... ... ....

200000e4 <udc_config_lsfs>:
200000e4:	00ec 2000 0120 2000                         ...  .. 

200000ec <udc_desc_fs>:
200000ec:	0209 0020 0101 c000 0932 0004 0200 0608     .. .....2.......
200000fc:	0050 0507 0281 0040 0700 0205 4002 0000     P.....@......@..

2000010c <udc_device_desc>:
2000010c:	0112 0200 0000 4000 03eb 2403 0100 0201     .......@...$....
2000011c:	0103 0000                                   ....

20000120 <udi_apis>:
20000120:	0030 2000                                   0.. 

20000124 <ss_pins>:
20000124:	0105                                             .

20000125 <g_interrupt_enabled>:
20000125:	0001 2c00                                        ...

20000128 <_impure_ptr>:
20000128:	012c 2000                                   ,.. 

2000012c <impure_data>:
2000012c:	0000 0000 aabc 0000 aadc 0000 aa9c 0000     ................
	...
